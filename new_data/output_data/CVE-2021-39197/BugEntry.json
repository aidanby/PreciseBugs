{"buggy_code": ["require \"cgi\"\nrequire \"json\"\nrequire \"securerandom\"\n\nmodule BetterErrors\n  # @private\n  class ErrorPage\n    def self.template_path(template_name)\n      File.expand_path(\"../templates/#{template_name}.erb\", __FILE__)\n    end\n\n    def self.template(template_name)\n      Erubi::Engine.new(File.read(template_path(template_name)), escape: true)\n    end\n\n    attr_reader :exception, :env, :repls\n\n    def initialize(exception, env)\n      @exception = RaisedException.new(exception)\n      @env = env\n      @start_time = Time.now.to_f\n      @repls = []\n    end\n\n    def id\n      @id ||= SecureRandom.hex(8)\n    end\n\n    def render(template_name = \"main\")\n      binding.eval(self.class.template(template_name).src)\n    rescue => e\n      # Fix the backtrace, which doesn't identify the template that failed (within Better Errors).\n      # We don't know the line number, so just injecting the template path has to be enough.\n      e.backtrace.unshift \"#{self.class.template_path(template_name)}:0\"\n      raise\n    end\n\n    def do_variables(opts)\n      index = opts[\"index\"].to_i\n      @frame = backtrace_frames[index]\n      @var_start_time = Time.now.to_f\n      { html: render(\"variable_info\") }\n    end\n\n    def do_eval(opts)\n      index = opts[\"index\"].to_i\n      code = opts[\"source\"]\n\n      unless (binding = backtrace_frames[index].frame_binding)\n        return { error: \"REPL unavailable in this stack frame\" }\n      end\n\n      @repls[index] ||= REPL.provider.new(binding, exception)\n\n      eval_and_respond(index, code)\n    end\n\n    def backtrace_frames\n      exception.backtrace\n    end\n\n    def exception_type\n      exception.type\n    end\n\n    def exception_message\n      exception.message.strip.gsub(/(\\r?\\n\\s*\\r?\\n)+/, \"\\n\")\n    end\n\n    def active_support_actions\n      return [] unless defined?(ActiveSupport::ActionableError)\n\n      ActiveSupport::ActionableError.actions(exception.type)\n    end\n\n    def action_dispatch_action_endpoint\n      return unless defined?(ActionDispatch::ActionableExceptions)\n\n      ActionDispatch::ActionableExceptions.endpoint\n    end\n\n    def application_frames\n      backtrace_frames.select(&:application?)\n    end\n\n    def first_frame\n      application_frames.first || backtrace_frames.first\n    end\n\n    private\n\n    def editor_url(frame)\n      BetterErrors.editor[frame.filename, frame.line]\n    end\n\n    def rack_session\n      env['rack.session']\n    end\n\n    def rails_params\n      env['action_dispatch.request.parameters']\n    end\n\n    def uri_prefix\n      env[\"SCRIPT_NAME\"] || \"\"\n    end\n\n    def request_path\n      env[\"PATH_INFO\"]\n    end\n\n    def html_formatted_code_block(frame)\n      CodeFormatter::HTML.new(frame.filename, frame.line).output\n    end\n\n    def text_formatted_code_block(frame)\n      CodeFormatter::Text.new(frame.filename, frame.line).output\n    end\n\n    def text_heading(char, str)\n      str + \"\\n\" + char*str.size\n    end\n\n    def inspect_value(obj)\n      if BetterErrors.ignored_classes.include? obj.class.name\n        \"<span class='unsupported'>(Instance of ignored class. \"\\\n        \"#{obj.class.name ? \"Remove #{CGI.escapeHTML(obj.class.name)} from\" : \"Modify\"}\"\\\n        \" BetterErrors.ignored_classes if you need to see it.)</span>\"\n      else\n        InspectableValue.new(obj).to_html\n      end\n    rescue BetterErrors::ValueLargerThanConfiguredMaximum\n      \"<span class='unsupported'>(Object too large. \"\\\n        \"#{obj.class.name ? \"Modify #{CGI.escapeHTML(obj.class.name)}#inspect or a\" : \"A\"}\"\\\n        \"djust BetterErrors.maximum_variable_inspect_size if you need to see it.)</span>\"\n    rescue Exception => e\n      \"<span class='unsupported'>(exception #{CGI.escapeHTML(e.class.to_s)} was raised in inspect)</span>\"\n    end\n\n    def eval_and_respond(index, code)\n      result, prompt, prefilled_input = @repls[index].send_input(code)\n\n      {\n        highlighted_input: CodeRay.scan(code, :ruby).div(wrap: nil),\n        prefilled_input:   prefilled_input,\n        prompt:            prompt,\n        result:            result\n      }\n    end\n  end\nend\n", "require \"json\"\nrequire \"ipaddr\"\nrequire \"set\"\nrequire \"rack\"\n\nmodule BetterErrors\n  # Better Errors' error handling middleware. Including this in your middleware\n  # stack will show a Better Errors error page for exceptions raised below this\n  # middleware.\n  #\n  # If you are using Ruby on Rails, you do not need to manually insert this\n  # middleware into your middleware stack.\n  #\n  # @example Sinatra\n  #   require \"better_errors\"\n  #\n  #   if development?\n  #     use BetterErrors::Middleware\n  #   end\n  #\n  # @example Rack\n  #   require \"better_errors\"\n  #   if ENV[\"RACK_ENV\"] == \"development\"\n  #     use BetterErrors::Middleware\n  #   end\n  #\n  class Middleware\n    # The set of IP addresses that are allowed to access Better Errors.\n    #\n    # Set to `{ \"127.0.0.1/8\", \"::1/128\" }` by default.\n    ALLOWED_IPS = Set.new\n\n    # Adds an address to the set of IP addresses allowed to access Better\n    # Errors.\n    def self.allow_ip!(addr)\n      ALLOWED_IPS << (addr.is_a?(IPAddr) ? addr : IPAddr.new(addr))\n    end\n\n    allow_ip! \"127.0.0.0/8\"\n    allow_ip! \"::1/128\" rescue nil # windows ruby doesn't have ipv6 support\n\n    # A new instance of BetterErrors::Middleware\n    #\n    # @param app      The Rack app/middleware to wrap with Better Errors\n    # @param handler  The error handler to use.\n    def initialize(app, handler = ErrorPage)\n      @app      = app\n      @handler  = handler\n    end\n\n    # Calls the Better Errors middleware\n    #\n    # @param [Hash] env\n    # @return [Array]\n    def call(env)\n      if allow_ip? env\n        better_errors_call env\n      else\n        @app.call env\n      end\n    end\n\n  private\n\n    def allow_ip?(env)\n      request = Rack::Request.new(env)\n      return true unless request.ip and !request.ip.strip.empty?\n      ip = IPAddr.new request.ip.split(\"%\").first\n      ALLOWED_IPS.any? { |subnet| subnet.include? ip }\n    end\n\n    def better_errors_call(env)\n      case env[\"PATH_INFO\"]\n      when %r{/__better_errors/(?<id>.+?)/(?<method>\\w+)\\z}\n        internal_call env, $~\n      when %r{/__better_errors/?\\z}\n        show_error_page env\n      else\n        protected_app_call env\n      end\n    end\n\n    def protected_app_call(env)\n      @app.call env\n    rescue Exception => ex\n      @error_page = @handler.new ex, env\n      log_exception\n      show_error_page(env, ex)\n    end\n\n    def show_error_page(env, exception=nil)\n      type, content = if @error_page\n        if text?(env)\n          [ 'plain', @error_page.render('text') ]\n        else\n          [ 'html', @error_page.render ]\n        end\n      else\n        [ 'html', no_errors_page ]\n      end\n\n      status_code = 500\n      if defined?(ActionDispatch::ExceptionWrapper) && exception\n        status_code = ActionDispatch::ExceptionWrapper.new(env, exception).status_code\n      end\n\n      [status_code, { \"Content-Type\" => \"text/#{type}; charset=utf-8\" }, [content]]\n    end\n\n    def text?(env)\n      env[\"HTTP_X_REQUESTED_WITH\"] == \"XMLHttpRequest\" ||\n      !env[\"HTTP_ACCEPT\"].to_s.include?('html')\n    end\n\n    def log_exception\n      return unless BetterErrors.logger\n\n      message = \"\\n#{@error_page.exception_type} - #{@error_page.exception_message}:\\n\"\n      message += backtrace_frames.map { |frame| \"  #{frame}\\n\" }.join\n\n      BetterErrors.logger.fatal message\n    end\n\n    def backtrace_frames\n      if defined?(Rails) && defined?(Rails.backtrace_cleaner)\n        Rails.backtrace_cleaner.clean @error_page.backtrace_frames.map(&:to_s)\n      else\n        @error_page.backtrace_frames\n      end\n    end\n\n    def internal_call(env, opts)\n      return no_errors_json_response unless @error_page\n      return invalid_error_json_response if opts[:id] != @error_page.id\n\n      env[\"rack.input\"].rewind\n      response = @error_page.send(\"do_#{opts[:method]}\", JSON.parse(env[\"rack.input\"].read))\n      [200, { \"Content-Type\" => \"text/plain; charset=utf-8\" }, [JSON.dump(response)]]\n    end\n\n    def no_errors_page\n      \"<h1>No errors</h1><p>No errors have been recorded yet.</p><hr>\" +\n      \"<code>Better Errors v#{BetterErrors::VERSION}</code>\"\n    end\n\n    def no_errors_json_response\n      explanation = if defined? Middleman\n        \"Middleman reloads all dependencies for each request, \" +\n          \"which breaks Better Errors.\"\n      elsif defined?(Shotgun) && defined?(Hanami)\n        \"Hanami is likely running with code-reloading enabled, which is the default. \" +\n          \"You can disable this by running hanami with the `--no-code-reloading` option.\"\n      elsif defined? Shotgun\n        \"The shotgun gem causes everything to be reloaded for every request. \" +\n          \"You can disable shotgun in the Gemfile temporarily to use Better Errors.\"\n      else\n        \"The application has been restarted since this page loaded, \" +\n          \"or the framework is reloading all gems before each request \"\n      end\n      [200, { \"Content-Type\" => \"text/plain; charset=utf-8\" }, [JSON.dump(\n        error: 'No exception information available',\n        explanation: explanation,\n      )]]\n    end\n\n    def invalid_error_json_response\n      [200, { \"Content-Type\" => \"text/plain; charset=utf-8\" }, [JSON.dump(\n        error: \"Session expired\",\n        explanation: \"This page was likely opened from a previous exception, \" +\n          \"and the exception is no longer available in memory.\",\n      )]]\n    end\n  end\nend\n", "<!DOCTYPE html>\n<html>\n<head>\n    <title><%= exception_type %> at <%= request_path %></title>\n</head>\n<body>\n    <%# Stylesheets are placed in the <body> for Turbolinks compatibility. %>\n    <style>\n    /* Basic reset */\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    th, td {\n        vertical-align: top;\n        text-align: left;\n    }\n\n    textarea {\n        resize: none;\n    }\n\n    body {\n        font-size: 10pt;\n    }\n\n    body, td, input, textarea {\n        font-family: helvetica neue, lucida grande, sans-serif;\n        line-height: 1.5;\n        color: #333;\n        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);\n    }\n\n    html {\n        background: #f0f0f5;\n    }\n\n    .clearfix::after{\n        clear: both;\n        content: \".\";\n        display: block;\n        height: 0;\n        visibility: hidden;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Basic layout\n     * --------------------------------------------------------------------- */\n\n    /* Small */\n    @media screen and (max-width: 1100px) {\n        html {\n            overflow-y: scroll;\n        }\n\n        body {\n            margin: 0 20px;\n        }\n\n        header.exception {\n            margin: 0 -20px;\n        }\n\n        nav.sidebar {\n            padding: 0;\n            margin: 20px 0;\n        }\n\n        ul.frames {\n            max-height: 200px;\n            overflow: auto;\n        }\n    }\n\n    /* Wide */\n    @media screen and (min-width: 1100px) {\n        header.exception {\n           position: fixed;\n           top: 0;\n           left: 0;\n           right: 0;\n        }\n\n        nav.sidebar,\n        .frame_info {\n            position: fixed;\n            top: 95px;\n            bottom: 0;\n\n            box-sizing: border-box;\n\n            overflow-y: auto;\n            overflow-x: hidden;\n        }\n\n        nav.sidebar {\n            width: 40%;\n            left: 20px;\n            top: 115px;\n            bottom: 20px;\n        }\n\n        .frame_info {\n            right: 0;\n            left: 40%;\n\n            padding: 20px;\n            padding-left: 10px;\n            margin-left: 30px;\n        }\n    }\n\n    nav.sidebar {\n        background: #d3d3da;\n        border-top: solid 3px #a33;\n        border-bottom: solid 3px #a33;\n        border-radius: 4px;\n        box-shadow: 0 0 6px rgba(0, 0, 0, 0.2), inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n    }\n\n    /* ---------------------------------------------------------------------\n     * Header\n     * --------------------------------------------------------------------- */\n\n    header.exception {\n        padding: 18px 20px;\n\n        height: 59px;\n        min-height: 59px;\n\n        overflow: hidden;\n\n        background-color: #20202a;\n        color: #aaa;\n        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.3);\n        font-weight: 200;\n        box-shadow: inset 0 -5px 3px -3px rgba(0, 0, 0, 0.05), inset 0 -1px 0 rgba(0, 0, 0, 0.05);\n\n        -webkit-text-smoothing: antialiased;\n    }\n\n    /* Heading */\n    header.exception .fix-actions {\n        margin-top: .5em;\n    }\n\n    header.exception .fix-actions input[type=submit] {\n        font-weight: bold;\n    }\n\n    header.exception h2 {\n        font-weight: 200;\n        font-size: 11pt;\n    }\n\n    header.exception h2,\n    header.exception p {\n        line-height: 1.5em;\n        overflow: hidden;\n        white-space: pre;\n        text-overflow: ellipsis;\n    }\n\n    header.exception h2 strong {\n        font-weight: 700;\n        color: #d55;\n    }\n\n    header.exception p {\n        font-weight: 200;\n        font-size: 17pt;\n        color: white;\n    }\n\n    header.exception:hover {\n        height: auto;\n        z-index: 2;\n    }\n\n    header.exception:hover h2,\n    header.exception:hover p {\n        padding-right: 20px;\n        overflow-y: auto;\n        word-wrap: break-word;\n        white-space: pre-wrap;\n        height: auto;\n        max-height: 7.5em;\n    }\n\n    @media screen and (max-width: 1100px) {\n        header.exception {\n            height: auto;\n        }\n\n        header.exception h2,\n        header.exception p {\n            padding-right: 20px;\n            overflow-y: auto;\n            word-wrap: break-word;\n            height: auto;\n            max-height: 7em;\n        }\n    }\n\n    <%#\n    /* Light theme */\n    header.exception {\n        text-shadow: 0 1px 0 rgba(250, 250, 250, 0.6);\n        background: rgba(200,100,50,0.10);\n        color: #977;\n    }\n    header.exception h2 strong {\n        color: #533;\n    }\n    header.exception p {\n        color: #744;\n    }\n    %>\n\n    /* ---------------------------------------------------------------------\n     * Navigation\n     * --------------------------------------------------------------------- */\n\n    nav.tabs {\n        border-bottom: solid 1px #ddd;\n\n        background-color: #eee;\n        text-align: center;\n\n        padding: 6px;\n\n        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);\n    }\n\n    nav.tabs a {\n        display: inline-block;\n\n        height: 22px;\n        line-height: 22px;\n        padding: 0 10px;\n\n        text-decoration: none;\n        font-size: 8pt;\n        font-weight: bold;\n\n        color: #999;\n        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);\n    }\n\n    nav.tabs a.selected {\n        color: white;\n        background: rgba(0, 0, 0, 0.5);\n        border-radius: 16px;\n        box-shadow: 1px 1px 0 rgba(255, 255, 255, 0.1);\n        text-shadow: 0 0 4px rgba(0, 0, 0, 0.4), 0 1px 0 rgba(0, 0, 0, 0.4);\n    }\n\n    nav.tabs a.disabled {\n        text-decoration: line-through;\n        text-shadow: none;\n        cursor: default;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Sidebar\n     * --------------------------------------------------------------------- */\n\n    ul.frames {\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n\n    /* Each item */\n    ul.frames li {\n        background-color: #f8f8f8;\n        background: -webkit-linear-gradient(top, #f8f8f8 80%, #f0f0f0);\n        background: -moz-linear-gradient(top, #f8f8f8 80%, #f0f0f0);\n        background: linear-gradient(top, #f8f8f8 80%, #f0f0f0);\n        box-shadow: inset 0 -1px 0 #e2e2e2;\n        padding: 7px 20px;\n\n        cursor: pointer;\n        overflow: hidden;\n    }\n\n    ul.frames .name,\n    ul.frames .location {\n        overflow: hidden;\n        height: 1.5em;\n\n        white-space: nowrap;\n        word-wrap: none;\n        text-overflow: ellipsis;\n    }\n\n    ul.frames .method {\n        color: #966;\n    }\n\n    ul.frames .location {\n        font-size: 0.85em;\n        font-weight: 400;\n        color: #999;\n    }\n\n    ul.frames .line {\n        font-weight: bold;\n    }\n\n    /* Selected frame */\n    ul.frames li.selected {\n        background: #38a;\n        box-shadow: inset 0 1px 0 rgba(0, 0, 0, 0.1), inset 0 2px 0 rgba(255, 255, 255, 0.01), inset 0 -1px 0 rgba(0, 0, 0, 0.1);\n    }\n\n    ul.frames li.selected .name,\n    ul.frames li.selected .method,\n    ul.frames li.selected .location {\n        color: white;\n        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.2);\n    }\n\n    ul.frames li.selected .location {\n        opacity: 0.6;\n    }\n\n    /* Iconography */\n    ul.frames li {\n        padding-left: 60px;\n        position: relative;\n    }\n\n    ul.frames li .icon {\n        display: block;\n        width: 20px;\n        height: 20px;\n        line-height: 20px;\n        border-radius: 15px;\n\n        text-align: center;\n\n        background: white;\n        border: solid 2px #ccc;\n\n        font-size: 9pt;\n        font-weight: 200;\n        font-style: normal;\n\n        position: absolute;\n        top: 14px;\n        left: 20px;\n    }\n\n    ul.frames .icon.application {\n        background: #808090;\n        border-color: #555;\n    }\n\n    ul.frames .icon.application:before {\n        content: 'A';\n        color: white;\n        text-shadow: 0 0 3px rgba(0, 0, 0, 0.2);\n    }\n\n    /* Responsiveness -- flow to single-line mode */\n    @media screen and (max-width: 1100px) {\n        ul.frames li {\n            padding-top: 6px;\n            padding-bottom: 6px;\n            padding-left: 36px;\n            line-height: 1.3;\n        }\n\n        ul.frames li .icon {\n            width: 11px;\n            height: 11px;\n            line-height: 11px;\n\n            top: 7px;\n            left: 10px;\n            font-size: 5pt;\n        }\n\n        ul.frames .name,\n        ul.frames .location {\n            display: inline-block;\n            line-height: 1.3;\n            height: 1.3em;\n        }\n\n        ul.frames .name {\n            margin-right: 10px;\n        }\n    }\n\n    /* ---------------------------------------------------------------------\n     * Monospace\n     * --------------------------------------------------------------------- */\n\n    pre, code, .be-repl input, .be-repl .command-line span, textarea, .code_linenums {\n        font-family: menlo, lucida console, monospace;\n        font-size: 8pt;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Display area\n     * --------------------------------------------------------------------- */\n\n    .trace_info {\n        background: #fff;\n        padding: 6px;\n        border-radius: 3px;\n        margin-bottom: 2px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.03), 1px 1px 0 rgba(0, 0, 0, 0.05), -1px 1px 0 rgba(0, 0, 0, 0.05), 0 0 0 4px rgba(0, 0, 0, 0.04);\n    }\n\n    .code_block{\n        background: #f1f1f1;\n        border-left: 1px solid #ccc;\n    }\n\n    /* Titlebar */\n    .trace_info .title {\n        background: #f1f1f1;\n\n        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.3);\n        overflow: hidden;\n        padding: 6px 10px;\n\n        border: solid 1px #ccc;\n        border-bottom: 0;\n\n        border-top-left-radius: 2px;\n        border-top-right-radius: 2px;\n    }\n\n    .trace_info .title .name,\n    .trace_info .title .location {\n        font-size: 9pt;\n        line-height: 26px;\n        height: 26px;\n        overflow: hidden;\n    }\n\n    .trace_info .title .location {\n        float: left;\n        font-weight: bold;\n        font-size: 10pt;\n    }\n\n    .trace_info .title .location a {\n        color:inherit;\n        text-decoration:none;\n        border-bottom:1px solid #aaaaaa;\n    }\n\n    .trace_info .title .location a:hover {\n        border-color:#666666;\n    }\n\n    .trace_info .title .name {\n        float: right;\n        font-weight: 200;\n    }\n\n    .code, .be-console, .unavailable {\n        background: #fff;\n        padding: 5px;\n\n        box-shadow: inset 3px 3px 3px rgba(0, 0, 0, 0.1), inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n    }\n\n    .code_linenums{\n        background:#f1f1f1;\n        padding-top:10px;\n        padding-bottom:9px;\n        float:left;\n    }\n\n    .code_linenums span{\n        display:block;\n        padding:0 12px;\n    }\n\n    .code {\n        margin-bottom: -1px;\n        border-top-left-radius:2px;\n        padding: 10px 0;\n        overflow: auto;\n    }\n\n    .code pre{\n        padding-left:12px;\n        min-height:16px;\n    }\n\n    /* Source unavailable */\n    p.unavailable {\n        padding: 20px 0 40px 0;\n        text-align: center;\n        color: #b99;\n        font-weight: bold;\n    }\n\n    p.unavailable:before {\n        content: '\\00d7';\n        display: block;\n\n        color: #daa;\n\n        text-align: center;\n        font-size: 40pt;\n        font-weight: normal;\n        margin-bottom: -10px;\n    }\n\n    @-webkit-keyframes highlight {\n        0%   { background: rgba(220, 30, 30, 0.3); }\n        100% { background: rgba(220, 30, 30, 0.1); }\n    }\n    @-moz-keyframes highlight {\n        0%   { background: rgba(220, 30, 30, 0.3); }\n        100% { background: rgba(220, 30, 30, 0.1); }\n    }\n    @keyframes highlight {\n        0%   { background: rgba(220, 30, 30, 0.3); }\n        100% { background: rgba(220, 30, 30, 0.1); }\n    }\n\n    .code .highlight, .code_linenums .highlight {\n        background: rgba(220, 30, 30, 0.1);\n        -webkit-animation: highlight 400ms linear 1;\n        -moz-animation: highlight 400ms linear 1;\n        animation: highlight 400ms linear 1;\n    }\n\n    /* REPL shell */\n    .be-console {\n        padding: 0 1px 10px 1px;\n        border-bottom-left-radius: 2px;\n        border-bottom-right-radius: 2px;\n    }\n\n    .be-console pre {\n        padding: 10px 10px 0 10px;\n        max-height: 400px;\n        overflow-x: none;\n        overflow-y: auto;\n        margin-bottom: -3px;\n        word-wrap: break-word;\n        white-space: pre-wrap;\n    }\n\n    /* .command-line > span + input */\n    .be-console .command-line {\n        display: table;\n        width: 100%;\n    }\n\n    .be-console .command-line span,\n    .be-console .command-line input {\n        display: table-cell;\n    }\n\n    .be-console .command-line span {\n        width: 1%;\n        padding-right: 5px;\n        padding-left: 10px;\n        white-space: pre;\n    }\n\n    .be-console .command-line input {\n        width: 99%;\n    }\n\n    /* Input box */\n    .be-console input,\n    .be-console input:focus {\n        outline: 0;\n        border: 0;\n        padding: 0;\n        background: transparent;\n        margin: 0;\n    }\n\n    /* Hint text */\n    .hint {\n        margin: 15px 0 20px 0;\n        font-size: 8pt;\n        color: #8080a0;\n        padding-left: 20px;\n    }\n\n    .hint:before {\n        content: '\\25b2';\n        margin-right: 5px;\n        opacity: 0.5;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Variable infos\n     * --------------------------------------------------------------------- */\n\n    .sub {\n        padding: 10px 0;\n        margin: 10px 0;\n    }\n\n    .sub:before {\n        content: '';\n        display: block;\n        width: 100%;\n        height: 4px;\n\n        border-radius: 2px;\n        background: rgba(0, 150, 200, 0.05);\n        box-shadow: 1px 1px 0 rgba(255, 255, 255, 0.7), inset 0 0 0 1px rgba(0, 0, 0, 0.04), inset 2px 2px 2px rgba(0, 0, 0, 0.07);\n    }\n\n    .sub h3 {\n        color: #39a;\n        font-size: 1.1em;\n        margin: 10px 0;\n        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);\n\n        -webkit-font-smoothing: antialiased;\n    }\n\n    .sub .inset {\n        overflow-y: auto;\n    }\n\n    .sub table {\n        table-layout: fixed;\n    }\n\n    .sub table td {\n        border-top: dotted 1px #ddd;\n        padding: 7px 1px;\n    }\n\n    .sub table td.name {\n        width: 150px;\n\n        font-weight: bold;\n        font-size: 0.8em;\n        padding-right: 20px;\n\n        word-wrap: break-word;\n    }\n\n    .sub table td pre {\n        max-height: 15em;\n        overflow-y: auto;\n    }\n\n    .sub table td pre {\n        width: 100%;\n\n        word-wrap: break-word;\n        white-space: normal;\n    }\n\n    /* \"(object doesn't support inspect)\" */\n    .sub .unsupported {\n      font-family: sans-serif;\n      color: #777;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Scrollbar\n     * --------------------------------------------------------------------- */\n\n    nav.sidebar::-webkit-scrollbar,\n    .inset pre::-webkit-scrollbar,\n    .be-console pre::-webkit-scrollbar,\n    .code::-webkit-scrollbar {\n        width: 10px;\n        height: 10px;\n    }\n\n    .inset pre::-webkit-scrollbar-thumb,\n    .be-console pre::-webkit-scrollbar-thumb,\n    .code::-webkit-scrollbar-thumb {\n        background: #ccc;\n        border-radius: 5px;\n    }\n\n    nav.sidebar::-webkit-scrollbar-thumb {\n        background: rgba(0, 0, 0, 0.0);\n        border-radius: 5px;\n    }\n\n    nav.sidebar:hover::-webkit-scrollbar-thumb {\n        background-color: #999;\n        background: -webkit-linear-gradient(left, #aaa, #999);\n    }\n\n    .be-console pre:hover::-webkit-scrollbar-thumb,\n    .inset pre:hover::-webkit-scrollbar-thumb,\n    .code:hover::-webkit-scrollbar-thumb {\n        background: #888;\n    }\n    </style>\n\n    <%# IE8 compatibility crap %>\n    <script>\n    (function() {\n        var elements = [\"section\", \"nav\", \"header\", \"footer\", \"audio\"];\n        for (var i = 0; i < elements.length; i++) {\n            document.createElement(elements[i]);\n        }\n    })();\n    </script>\n\n    <%#\n      If Rails's Turbolinks is used, the Better Errors page is probably\n      rendered in the host app's layout. Let's empty out the styles of the\n      host app.\n    %>\n    <script>\n      if (window.Turbolinks) {\n          for(var i=0; i < document.styleSheets.length; i++) {\n              if(document.styleSheets[i].href)\n                  document.styleSheets[i].disabled = true;\n          }\n          if (window.Turbolinks.controller) {\n              // Turbolinks > 5 (see https://github.com/turbolinks/turbolinks/issues/6)\n              document.addEventListener(\"turbolinks:load\", function restoreCSS(e) {\n                  for(var i=0; i < document.styleSheets.length; i++) {\n                      document.styleSheets[i].disabled = false;\n                  }\n                  document.removeEventListener(\"turbolinks:load\", restoreCSS, false);\n              });\n          } else {\n              document.addEventListener(\"page:restore\", function restoreCSS(e) {\n                  for(var i=0; i < document.styleSheets.length; i++) {\n                      document.styleSheets[i].disabled = false;\n                  }\n                  document.removeEventListener(\"page:restore\", restoreCSS, false);\n              });\n          }\n      }\n    </script>\n\n    <div class='top'>\n        <header class=\"exception\">\n            <h2><strong><%= exception_type %></strong> <span>at <%= request_path %></span></h2>\n            <p><%= exception_message %></p>\n            <% unless active_support_actions.empty? %>\n                <div class='fix-actions'>\n                    <% active_support_actions.each do |action, _| %>\n                        <form class=\"button_to\" method=\"post\" action=\"<%= action_dispatch_action_endpoint %>\">\n                            <input type=\"submit\" value=\"<%= action %>\">\n                            <input type=\"hidden\" name=\"action\" value=\"<%= action %>\">\n                            <input type=\"hidden\" name=\"error\" value=\"<%= exception_type %>\">\n                            <input type=\"hidden\" name=\"location\" value=\"<%= request_path %>\">\n                        </form>\n                    <% end %>\n                </div>\n            <% end %>\n        </header>\n    </div>\n\n    <section class=\"backtrace\">\n        <nav class=\"sidebar\">\n            <nav class=\"tabs\">\n                <a href=\"#\" id=\"application_frames\">Application Frames</a>\n                <a href=\"#\" id=\"all_frames\">All Frames</a>\n            </nav>\n            <ul class=\"frames\">\n                <% backtrace_frames.each_with_index do |frame, index| %>\n                    <li class=\"<%= frame.context %>\" data-context=\"<%= frame.context %>\" data-index=\"<%= index %>\">\n                        <span class='stroke'></span>\n                        <i class=\"icon <%= frame.context %>\"></i>\n                        <div class=\"info\">\n                            <div class=\"name\">\n                                <strong><%= frame.class_name %></strong><span class='method'><%= frame.method_name %></span>\n                            </div>\n                            <div class=\"location\">\n                                <span class=\"filename\"><%= frame.pretty_path %></span>, line <span class=\"line\"><%= frame.line %></span>\n                            </div>\n                        </div>\n                    </li>\n                <% end %>\n            </ul>\n        </nav>\n\n        <% backtrace_frames.each_with_index do |frame, index| %>\n            <div class=\"frame_info\" id=\"frame_info_<%= index %>\" style=\"display:none;\"></div>\n        <% end %>\n    </section>\n</body>\n<script>\n(function() {\n\n    var OID = \"<%= id %>\";\n\n    var previousFrame = null;\n    var previousFrameInfo = null;\n    var allFrames = document.querySelectorAll(\"ul.frames li\");\n    var allFrameInfos = document.querySelectorAll(\".frame_info\");\n\n    function apiCall(method, opts, cb) {\n        var req = new XMLHttpRequest();\n        req.open(\"POST\", \"//\" + window.location.host + <%== uri_prefix.gsub(\"<\", \"&lt;\").inspect %> + \"/__better_errors/\" + OID + \"/\" + method, true);\n        req.setRequestHeader(\"Content-Type\", \"application/json\");\n        req.send(JSON.stringify(opts));\n        req.onreadystatechange = function() {\n            if(req.readyState == 4) {\n                var res = JSON.parse(req.responseText);\n                cb(res);\n            }\n        };\n    }\n\n    function escapeHTML(html) {\n        return html.replace(/&/, \"&amp;\").replace(/</g, \"&lt;\");\n    }\n\n    function REPL(index) {\n        this.index = index;\n\n        var previousCommands = JSON.parse(localStorage.getItem(\"better_errors_previous_commands\"));\n        if(previousCommands === null) {\n          localStorage.setItem(\"better_errors_previous_commands\", JSON.stringify([]));\n          previousCommands = [];\n        }\n\n        this.previousCommandOffset = previousCommands.length;\n    }\n\n    REPL.all = [];\n\n    REPL.prototype.install = function(containerElement) {\n        this.container = containerElement;\n\n        this.promptElement  = this.container.querySelector(\".command-line .prompt\");\n        this.inputElement   = this.container.querySelector(\"input\");\n        this.outputElement  = this.container.querySelector(\"pre\");\n\n        var self = this;\n        this.inputElement.onkeydown = function(ev) {\n            self.onKeyDown(ev);\n        };\n\n        this.setPrompt(\">>\");\n\n        REPL.all[this.index] = this;\n    }\n\n    REPL.prototype.focus = function() {\n        this.inputElement.focus();\n    };\n\n    REPL.prototype.setPrompt = function(prompt) {\n        this._prompt = prompt;\n        this.promptElement.innerHTML = escapeHTML(prompt);\n    };\n\n    REPL.prototype.getInput = function() {\n        return this.inputElement.value;\n    };\n\n    REPL.prototype.setInput = function(text) {\n        this.inputElement.value = text;\n\n        if(this.inputElement.setSelectionRange) {\n            // set cursor to end of input\n            this.inputElement.setSelectionRange(text.length, text.length);\n        }\n    };\n\n    REPL.prototype.writeRawOutput = function(output) {\n        this.outputElement.innerHTML += output;\n        this.outputElement.scrollTop = this.outputElement.scrollHeight;\n    };\n\n    REPL.prototype.writeOutput = function(output) {\n        this.writeRawOutput(escapeHTML(output));\n    };\n\n    REPL.prototype.sendInput = function(line) {\n        var self = this;\n        apiCall(\"eval\", { \"index\": this.index, source: line }, function(response) {\n            if(response.error) {\n                self.writeOutput(response.error + \"\\n\");\n            }\n            self.writeOutput(self._prompt + \" \");\n            self.writeRawOutput(response.highlighted_input + \"\\n\");\n            self.writeOutput(response.result);\n            self.setPrompt(response.prompt);\n            self.setInput(response.prefilled_input);\n        });\n    };\n\n    REPL.prototype.onEnterKey = function() {\n        var text = this.getInput();\n        if(text != \"\" && text !== undefined) {\n            var previousCommands = JSON.parse(localStorage.getItem(\"better_errors_previous_commands\"));\n            this.previousCommandOffset = previousCommands.push(text);\n            if(previousCommands.length > 100) {\n              previousCommands.splice(0, 1);\n              this.previousCommandOffset -= 1;\n            }\n            localStorage.setItem(\"better_errors_previous_commands\", JSON.stringify(previousCommands));\n        }\n        this.setInput(\"\");\n        this.sendInput(text);\n    };\n\n    REPL.prototype.onNavigateHistory = function(direction) {\n        this.previousCommandOffset += direction;\n        var previousCommands = JSON.parse(localStorage.getItem(\"better_errors_previous_commands\"));\n\n        if(this.previousCommandOffset < 0) {\n            this.previousCommandOffset = -1;\n            this.setInput(\"\");\n            return;\n        }\n\n        if(this.previousCommandOffset >= previousCommands.length) {\n            this.previousCommandOffset = previousCommands.length;\n            this.setInput(\"\");\n            return;\n        }\n\n        this.setInput(previousCommands[this.previousCommandOffset]);\n    };\n\n    REPL.prototype.onKeyDown = function(ev) {\n        if(ev.keyCode == 13) {\n            this.onEnterKey();\n        } else if(ev.keyCode == 38 || (ev.ctrlKey && ev.keyCode == 80)) {\n            // the user pressed the up arrow or Ctrl-P\n            this.onNavigateHistory(-1);\n            ev.preventDefault();\n            return false;\n        } else if(ev.keyCode == 40 || (ev.ctrlKey && ev.keyCode == 78)) {\n            // the user pressed the down arrow or Ctrl-N\n            this.onNavigateHistory(1);\n            ev.preventDefault();\n            return false;\n        }\n    };\n\n    function switchTo(el) {\n        if(previousFrameInfo) previousFrameInfo.style.display = \"none\";\n        previousFrameInfo = el;\n\n        el.style.display = \"block\";\n\n        var replInput = el.querySelector('.be-console input');\n        if (replInput) replInput.focus();\n    }\n\n    function selectFrameInfo(index) {\n        var el = allFrameInfos[index];\n        if(el) {\n            if (el.loaded) {\n                return switchTo(el);\n            }\n\n            apiCall(\"variables\", { \"index\": index }, function(response) {\n                el.loaded = true;\n                if(response.error) {\n                    el.innerHTML = \"<h2 class='error'>\" + escapeHTML(response.error) + \"</h2>\";\n                    if(response.explanation) {\n                      el.innerHTML += \"<p class='explanation'>\" + escapeHTML(response.explanation) + \"</p>\";\n                    }\n                    el.innerHTML += \"<p><a target='_new' href='https://github.com/BetterErrors/better_errors'>More about Better Errors</a></p>\";\n                } else {\n                    el.innerHTML = response.html;\n\n                    var repl = el.querySelector(\".be-repl .be-console\");\n                    if(repl) {\n                        new REPL(index).install(repl);\n                    }\n                }\n                switchTo(el);\n            });\n        }\n    }\n\n    for(var i = 0; i < allFrames.length; i++) {\n        (function(i, el) {\n            var el = allFrames[i];\n            el.onclick = function() {\n                if(previousFrame) {\n                    previousFrame.className = \"\";\n                }\n                el.className = \"selected\";\n                previousFrame = el;\n\n                selectFrameInfo(el.attributes[\"data-index\"].value);\n            };\n        })(i);\n    }\n\n    // Click the first application frame\n    (\n      document.querySelector(\".frames li.application\") ||\n      document.querySelector(\".frames li\")\n    ).onclick();\n\n    // This is the second query performed for frames; maybe the 'allFrames' list\n    // currently used and this list can be better used to avoid the repetition:\n    var applicationFramesCount = document.querySelectorAll(\n        \"ul.frames li[data-context=application]\"\n    ).length;\n\n    var applicationFramesButtonIsInstalled = false;\n    var applicationFramesButton = document.getElementById(\"application_frames\");\n    var allFramesButton = document.getElementById(\"all_frames\");\n\n    // The application frames button only needs to be bound if\n    // there are actually any application frames to look at.\n    var installApplicationFramesButton = function() {\n        applicationFramesButton.onclick = function() {\n            allFramesButton.className = \"\";\n            applicationFramesButton.className = \"selected\";\n            for(var i = 0; i < allFrames.length; i++) {\n                if(allFrames[i].attributes[\"data-context\"].value == \"application\") {\n                    allFrames[i].style.display = \"block\";\n                } else {\n                    allFrames[i].style.display = \"none\";\n                }\n            }\n            return false;\n        };\n\n        applicationFramesButtonIsInstalled = true;\n    }\n\n    allFramesButton.onclick = function() {\n        if(applicationFramesButtonIsInstalled) {\n            applicationFramesButton.className = \"\";\n        }\n\n        allFramesButton.className = \"selected\";\n        for(var i = 0; i < allFrames.length; i++) {\n            allFrames[i].style.display = \"block\";\n        }\n        return false;\n    };\n\n    // If there are no application frames, select the 'All Frames'\n    // tab by default.\n    if(applicationFramesCount > 0) {\n        installApplicationFramesButton();\n        applicationFramesButton.onclick();\n    } else {\n        applicationFramesButton.className = \"disabled\";\n        applicationFramesButton.title = \"No application frames available\";\n        allFramesButton.onclick();\n    }\n})();\n</script>\n</html>\n\n<!-- generated by Better Errors in <%= Time.now.to_f - @start_time %> seconds -->\n", "require \"spec_helper\"\n\nmodule BetterErrors\n  describe Middleware do\n    let(:app) { Middleware.new(->env { \":)\" }) }\n    let(:exception) { RuntimeError.new(\"oh no :(\") }\n\n    it \"passes non-error responses through\" do\n      expect(app.call({})).to eq(\":)\")\n    end\n\n    it \"calls the internal methods\" do\n      expect(app).to receive :internal_call\n      app.call(\"PATH_INFO\" => \"/__better_errors/1/preform_awesomness\")\n    end\n\n    it \"calls the internal methods on any subfolder path\" do\n      expect(app).to receive :internal_call\n      app.call(\"PATH_INFO\" => \"/any_sub/folder/path/__better_errors/1/preform_awesomness\")\n    end\n\n    it \"shows the error page\" do\n      expect(app).to receive :show_error_page\n      app.call(\"PATH_INFO\" => \"/__better_errors/\")\n    end\n\n    it \"shows the error page on any subfolder path\" do\n      expect(app).to receive :show_error_page\n      app.call(\"PATH_INFO\" => \"/any_sub/folder/path/__better_errors/\")\n    end\n\n    it \"doesn't show the error page to a non-local address\" do\n      expect(app).not_to receive :better_errors_call\n      app.call(\"REMOTE_ADDR\" => \"1.2.3.4\")\n    end\n\n    it \"shows to a whitelisted IP\" do\n      BetterErrors::Middleware.allow_ip! '77.55.33.11'\n      expect(app).to receive :better_errors_call\n      app.call(\"REMOTE_ADDR\" => \"77.55.33.11\")\n    end\n\n    it \"shows to a whitelisted IPAddr\" do\n      BetterErrors::Middleware.allow_ip! IPAddr.new('77.55.33.0/24')\n      expect(app).to receive :better_errors_call\n      app.call(\"REMOTE_ADDR\" => \"77.55.33.11\")\n    end\n\n    it \"respects the X-Forwarded-For header\" do\n      expect(app).not_to receive :better_errors_call\n      app.call(\n        \"REMOTE_ADDR\"          => \"127.0.0.1\",\n        \"HTTP_X_FORWARDED_FOR\" => \"1.2.3.4\",\n      )\n    end\n\n    it \"doesn't blow up when given a blank REMOTE_ADDR\" do\n      expect { app.call(\"REMOTE_ADDR\" => \" \") }.to_not raise_error\n    end\n\n    it \"doesn't blow up when given an IP address with a zone index\" do\n      expect { app.call(\"REMOTE_ADDR\" => \"0:0:0:0:0:0:0:1%0\" ) }.to_not raise_error\n    end\n\n    context \"when requesting the /__better_errors manually\" do\n      let(:app) { Middleware.new(->env { \":)\" }) }\n\n      it \"shows that no errors have been recorded\" do\n        status, headers, body = app.call(\"PATH_INFO\" => \"/__better_errors\")\n        expect(body.join).to match /No errors have been recorded yet./\n      end\n\n      it 'does not attempt to use ActionDispatch::ExceptionWrapper with a nil exception' do\n        ad_ew = double(\"ActionDispatch::ExceptionWrapper\")\n        stub_const('ActionDispatch::ExceptionWrapper', ad_ew)\n        expect(ad_ew).to_not receive :new\n\n        status, headers, body = app.call(\"PATH_INFO\" => \"/__better_errors\")\n      end\n\n      it \"shows that no errors have been recorded on any subfolder path\" do\n        status, headers, body = app.call(\"PATH_INFO\" => \"/any_sub/folder/path/__better_errors\")\n        expect(body.join).to match /No errors have been recorded yet./\n      end\n    end\n\n    context \"when handling an error\" do\n      let(:app) { Middleware.new(->env { raise exception }) }\n\n      it \"returns status 500\" do\n        status, headers, body = app.call({})\n\n        expect(status).to eq(500)\n      end\n\n      context \"when the exception has a cause\" do\n        before do\n          pending \"This Ruby does not support `cause`\" unless Exception.new.respond_to?(:cause)\n        end\n\n        let(:app) {\n          Middleware.new(->env {\n            begin\n              raise \"First Exception\"\n            rescue\n              raise \"Second Exception\"\n            end\n          })\n        }\n\n        it \"shows the exception as-is\" do\n          status, _, body = app.call({})\n\n          expect(status).to eq(500)\n          expect(body.join).to match(/\\n> Second Exception\\n/)\n          expect(body.join).not_to match(/\\n> First Exception\\n/)\n        end\n      end\n\n      context \"when the exception responds to #original_exception\" do\n        class OriginalExceptionException < Exception\n          attr_reader :original_exception\n\n          def initialize(message, original_exception = nil)\n            super(message)\n            @original_exception = original_exception\n          end\n        end\n\n        context 'and has one' do\n          let(:app) {\n            Middleware.new(->env {\n              raise OriginalExceptionException.new(\"Second Exception\", Exception.new(\"First Exception\"))\n            })\n          }\n\n          it \"shows the original exception instead of the last-raised one\" do\n            status, _, body = app.call({})\n\n            expect(status).to eq(500)\n            expect(body.join).not_to match(/Second Exception/)\n            expect(body.join).to match(/First Exception/)\n          end\n        end\n\n        context 'and does not have one' do\n          let(:app) {\n            Middleware.new(->env {\n              raise OriginalExceptionException.new(\"The Exception\")\n            })\n          }\n\n          it \"shows the exception as-is\" do\n            status, _, body = app.call({})\n\n            expect(status).to eq(500)\n            expect(body.join).to match(/The Exception/)\n          end\n        end\n      end\n\n      it \"returns ExceptionWrapper's status_code\" do\n        ad_ew = double(\"ActionDispatch::ExceptionWrapper\")\n        allow(ad_ew).to receive('new').with({}, exception) { double(\"ExceptionWrapper\", status_code: 404) }\n        stub_const('ActionDispatch::ExceptionWrapper', ad_ew)\n\n        status, headers, body = app.call({})\n\n        expect(status).to eq(404)\n      end\n\n      it \"returns UTF-8 error pages\" do\n        status, headers, body = app.call({})\n\n        expect(headers[\"Content-Type\"]).to match /charset=utf-8/\n      end\n\n      it \"returns text pages by default\" do\n        status, headers, body = app.call({})\n\n        expect(headers[\"Content-Type\"]).to match /text\\/plain/\n      end\n\n      it \"returns HTML pages by default\" do\n        # Chrome's 'Accept' header looks similar this.\n        status, headers, body = app.call(\"HTTP_ACCEPT\" => \"text/html,application/xhtml+xml;q=0.9,*/*\")\n\n        expect(headers[\"Content-Type\"]).to match /text\\/html/\n      end\n\n      context 'the logger' do\n        let(:logger) { double('logger', fatal: nil) }\n        before do\n          allow(BetterErrors).to receive(:logger).and_return(logger)\n        end\n\n        it \"receives the exception as a fatal message\" do\n          expect(logger).to receive(:fatal).with(/RuntimeError/)\n          app.call({})\n        end\n\n        context 'when Rails is being used' do\n          before do\n            skip(\"Rails not included in this run\") unless defined? Rails\n          end\n\n          it \"receives the exception without filtered backtrace frames\" do\n            expect(logger).to receive(:fatal) do |message|\n              expect(message).to_not match(/rspec-core/)\n            end\n            app.call({})\n          end\n        end\n        context 'when Rails is not being used' do\n          before do\n            skip(\"Rails is included in this run\") if defined? Rails\n          end\n\n          it \"receives the exception with all backtrace frames\" do\n            expect(logger).to receive(:fatal) do |message|\n              expect(message).to match(/rspec-core/)\n            end\n            app.call({})\n          end\n        end\n      end\n    end\n\n    context \"requesting the variables for a specific frame\" do\n      let(:env) { {} }\n      let(:result) {\n        app.call(\n          \"PATH_INFO\" => \"/__better_errors/#{id}/#{method}\",\n          # This is a POST request, and this is the body of the request.\n          \"rack.input\" => StringIO.new('{\"index\": 0}'),\n        )\n      }\n      let(:status) { result[0] }\n      let(:headers) { result[1] }\n      let(:body) { result[2].join }\n      let(:json_body) { JSON.parse(body) }\n      let(:id) { 'abcdefg' }\n      let(:method) { 'variables' }\n\n      context 'when no errors have been recorded' do\n        it 'returns a JSON error' do\n          expect(json_body).to match(\n            'error' => 'No exception information available',\n            'explanation' => /application has been restarted/,\n          )\n        end\n\n        context 'when Middleman is in use' do\n          let!(:middleman) { class_double(\"Middleman\").as_stubbed_const }\n          it 'returns a JSON error' do\n            expect(json_body['explanation'])\n              .to match(/Middleman reloads all dependencies/)\n          end\n        end\n\n        context 'when Shotgun is in use' do\n          let!(:shotgun) { class_double(\"Shotgun\").as_stubbed_const }\n\n          it 'returns a JSON error' do\n            expect(json_body['explanation'])\n              .to match(/The shotgun gem/)\n          end\n\n          context 'when Hanami is also in use' do\n            let!(:hanami) { class_double(\"Hanami\").as_stubbed_const }\n            it 'returns a JSON error' do\n              expect(json_body['explanation'])\n                .to match(/--no-code-reloading/)\n            end\n          end\n        end\n      end\n\n      context 'when an error has been recorded' do\n        let(:error_page) { ErrorPage.new(exception, env) }\n        before do\n          app.instance_variable_set('@error_page', error_page)\n        end\n\n        context 'but it does not match the request' do\n          it 'returns a JSON error' do\n            expect(json_body).to match(\n              'error' => 'Session expired',\n              'explanation' => /no longer available in memory/,\n            )\n          end\n        end\n\n        context 'and it matches the request', :focus do\n          let(:id) { error_page.id }\n\n          it 'returns a JSON error' do\n            expect(error_page).to receive(:do_variables).and_return(html: \"<content>\")\n            expect(json_body).to match(\n              'html' => '<content>',\n            )\n          end\n        end\n      end\n    end\n  end\nend\n"], "fixing_code": ["require \"cgi\"\nrequire \"json\"\nrequire \"securerandom\"\n\nmodule BetterErrors\n  # @private\n  class ErrorPage\n    def self.template_path(template_name)\n      File.expand_path(\"../templates/#{template_name}.erb\", __FILE__)\n    end\n\n    def self.template(template_name)\n      Erubi::Engine.new(File.read(template_path(template_name)), escape: true)\n    end\n\n    attr_reader :exception, :env, :repls\n\n    def initialize(exception, env)\n      @exception = RaisedException.new(exception)\n      @env = env\n      @start_time = Time.now.to_f\n      @repls = []\n    end\n\n    def id\n      @id ||= SecureRandom.hex(8)\n    end\n\n    def render(template_name = \"main\", csrf_token = nil)\n      binding.eval(self.class.template(template_name).src)\n    rescue => e\n      # Fix the backtrace, which doesn't identify the template that failed (within Better Errors).\n      # We don't know the line number, so just injecting the template path has to be enough.\n      e.backtrace.unshift \"#{self.class.template_path(template_name)}:0\"\n      raise\n    end\n\n    def do_variables(opts)\n      index = opts[\"index\"].to_i\n      @frame = backtrace_frames[index]\n      @var_start_time = Time.now.to_f\n      { html: render(\"variable_info\") }\n    end\n\n    def do_eval(opts)\n      index = opts[\"index\"].to_i\n      code = opts[\"source\"]\n\n      unless (binding = backtrace_frames[index].frame_binding)\n        return { error: \"REPL unavailable in this stack frame\" }\n      end\n\n      @repls[index] ||= REPL.provider.new(binding, exception)\n\n      eval_and_respond(index, code)\n    end\n\n    def backtrace_frames\n      exception.backtrace\n    end\n\n    def exception_type\n      exception.type\n    end\n\n    def exception_message\n      exception.message.strip.gsub(/(\\r?\\n\\s*\\r?\\n)+/, \"\\n\")\n    end\n\n    def active_support_actions\n      return [] unless defined?(ActiveSupport::ActionableError)\n\n      ActiveSupport::ActionableError.actions(exception.type)\n    end\n\n    def action_dispatch_action_endpoint\n      return unless defined?(ActionDispatch::ActionableExceptions)\n\n      ActionDispatch::ActionableExceptions.endpoint\n    end\n\n    def application_frames\n      backtrace_frames.select(&:application?)\n    end\n\n    def first_frame\n      application_frames.first || backtrace_frames.first\n    end\n\n    private\n\n    def editor_url(frame)\n      BetterErrors.editor[frame.filename, frame.line]\n    end\n\n    def rack_session\n      env['rack.session']\n    end\n\n    def rails_params\n      env['action_dispatch.request.parameters']\n    end\n\n    def uri_prefix\n      env[\"SCRIPT_NAME\"] || \"\"\n    end\n\n    def request_path\n      env[\"PATH_INFO\"]\n    end\n\n    def html_formatted_code_block(frame)\n      CodeFormatter::HTML.new(frame.filename, frame.line).output\n    end\n\n    def text_formatted_code_block(frame)\n      CodeFormatter::Text.new(frame.filename, frame.line).output\n    end\n\n    def text_heading(char, str)\n      str + \"\\n\" + char*str.size\n    end\n\n    def inspect_value(obj)\n      if BetterErrors.ignored_classes.include? obj.class.name\n        \"<span class='unsupported'>(Instance of ignored class. \"\\\n        \"#{obj.class.name ? \"Remove #{CGI.escapeHTML(obj.class.name)} from\" : \"Modify\"}\"\\\n        \" BetterErrors.ignored_classes if you need to see it.)</span>\"\n      else\n        InspectableValue.new(obj).to_html\n      end\n    rescue BetterErrors::ValueLargerThanConfiguredMaximum\n      \"<span class='unsupported'>(Object too large. \"\\\n        \"#{obj.class.name ? \"Modify #{CGI.escapeHTML(obj.class.name)}#inspect or a\" : \"A\"}\"\\\n        \"djust BetterErrors.maximum_variable_inspect_size if you need to see it.)</span>\"\n    rescue Exception => e\n      \"<span class='unsupported'>(exception #{CGI.escapeHTML(e.class.to_s)} was raised in inspect)</span>\"\n    end\n\n    def eval_and_respond(index, code)\n      result, prompt, prefilled_input = @repls[index].send_input(code)\n\n      {\n        highlighted_input: CodeRay.scan(code, :ruby).div(wrap: nil),\n        prefilled_input:   prefilled_input,\n        prompt:            prompt,\n        result:            result\n      }\n    end\n  end\nend\n", "require \"json\"\nrequire \"ipaddr\"\nrequire \"securerandom\"\nrequire \"set\"\nrequire \"rack\"\n\nmodule BetterErrors\n  # Better Errors' error handling middleware. Including this in your middleware\n  # stack will show a Better Errors error page for exceptions raised below this\n  # middleware.\n  #\n  # If you are using Ruby on Rails, you do not need to manually insert this\n  # middleware into your middleware stack.\n  #\n  # @example Sinatra\n  #   require \"better_errors\"\n  #\n  #   if development?\n  #     use BetterErrors::Middleware\n  #   end\n  #\n  # @example Rack\n  #   require \"better_errors\"\n  #   if ENV[\"RACK_ENV\"] == \"development\"\n  #     use BetterErrors::Middleware\n  #   end\n  #\n  class Middleware\n    # The set of IP addresses that are allowed to access Better Errors.\n    #\n    # Set to `{ \"127.0.0.1/8\", \"::1/128\" }` by default.\n    ALLOWED_IPS = Set.new\n\n    # Adds an address to the set of IP addresses allowed to access Better\n    # Errors.\n    def self.allow_ip!(addr)\n      ALLOWED_IPS << (addr.is_a?(IPAddr) ? addr : IPAddr.new(addr))\n    end\n\n    allow_ip! \"127.0.0.0/8\"\n    allow_ip! \"::1/128\" rescue nil # windows ruby doesn't have ipv6 support\n\n    CSRF_TOKEN_COOKIE_NAME = 'BetterErrors-CSRF-Token'\n\n    # A new instance of BetterErrors::Middleware\n    #\n    # @param app      The Rack app/middleware to wrap with Better Errors\n    # @param handler  The error handler to use.\n    def initialize(app, handler = ErrorPage)\n      @app      = app\n      @handler  = handler\n    end\n\n    # Calls the Better Errors middleware\n    #\n    # @param [Hash] env\n    # @return [Array]\n    def call(env)\n      if allow_ip? env\n        better_errors_call env\n      else\n        @app.call env\n      end\n    end\n\n  private\n\n    def allow_ip?(env)\n      request = Rack::Request.new(env)\n      return true unless request.ip and !request.ip.strip.empty?\n      ip = IPAddr.new request.ip.split(\"%\").first\n      ALLOWED_IPS.any? { |subnet| subnet.include? ip }\n    end\n\n    def better_errors_call(env)\n      case env[\"PATH_INFO\"]\n      when %r{/__better_errors/(?<id>.+?)/(?<method>\\w+)\\z}\n        internal_call env, $~\n      when %r{/__better_errors/?\\z}\n        show_error_page env\n      else\n        protected_app_call env\n      end\n    end\n\n    def protected_app_call(env)\n      @app.call env\n    rescue Exception => ex\n      @error_page = @handler.new ex, env\n      log_exception\n      show_error_page(env, ex)\n    end\n\n    def show_error_page(env, exception=nil)\n      request = Rack::Request.new(env)\n      csrf_token = request.cookies[CSRF_TOKEN_COOKIE_NAME] || SecureRandom.uuid\n\n      type, content = if @error_page\n        if text?(env)\n          [ 'plain', @error_page.render('text') ]\n        else\n          [ 'html', @error_page.render('main', csrf_token) ]\n        end\n      else\n        [ 'html', no_errors_page ]\n      end\n\n      status_code = 500\n      if defined?(ActionDispatch::ExceptionWrapper) && exception\n        status_code = ActionDispatch::ExceptionWrapper.new(env, exception).status_code\n      end\n\n      response = Rack::Response.new(content, status_code, { \"Content-Type\" => \"text/#{type}; charset=utf-8\" })\n\n      unless request.cookies[CSRF_TOKEN_COOKIE_NAME]\n        response.set_cookie(CSRF_TOKEN_COOKIE_NAME, value: csrf_token, httponly: true, same_site: :strict)\n      end\n\n      # In older versions of Rack, the body returned here is actually a Rack::BodyProxy which seems to be a bug.\n      # (It contains status, headers and body and does not act like an array of strings.)\n      # Since we already have status code and body here, there's no need to use the ones in the Rack::Response.\n      (_status_code, headers, _body) = response.finish\n      [status_code, headers, [content]]\n    end\n\n    def text?(env)\n      env[\"HTTP_X_REQUESTED_WITH\"] == \"XMLHttpRequest\" ||\n        !env[\"HTTP_ACCEPT\"].to_s.include?('html')\n    end\n\n    def log_exception\n      return unless BetterErrors.logger\n\n      message = \"\\n#{@error_page.exception_type} - #{@error_page.exception_message}:\\n\"\n      message += backtrace_frames.map { |frame| \"  #{frame}\\n\" }.join\n\n      BetterErrors.logger.fatal message\n    end\n\n    def backtrace_frames\n      if defined?(Rails) && defined?(Rails.backtrace_cleaner)\n        Rails.backtrace_cleaner.clean @error_page.backtrace_frames.map(&:to_s)\n      else\n        @error_page.backtrace_frames\n      end\n    end\n\n    def internal_call(env, opts)\n      return no_errors_json_response unless @error_page\n      return invalid_error_json_response if opts[:id] != @error_page.id\n\n      request = Rack::Request.new(env)\n      return invalid_csrf_token_json_response unless request.cookies[CSRF_TOKEN_COOKIE_NAME]\n\n      request.body.rewind\n      body = JSON.parse(request.body.read)\n      return invalid_csrf_token_json_response unless request.cookies[CSRF_TOKEN_COOKIE_NAME] == body['csrfToken']\n\n      response = @error_page.send(\"do_#{opts[:method]}\", body)\n      [200, { \"Content-Type\" => \"application/json; charset=utf-8\" }, [JSON.dump(response)]]\n    end\n\n    def no_errors_page\n      \"<h1>No errors</h1><p>No errors have been recorded yet.</p><hr>\" +\n      \"<code>Better Errors v#{BetterErrors::VERSION}</code>\"\n    end\n\n    def no_errors_json_response\n      explanation = if defined? Middleman\n        \"Middleman reloads all dependencies for each request, \" +\n          \"which breaks Better Errors.\"\n      elsif defined?(Shotgun) && defined?(Hanami)\n        \"Hanami is likely running with code-reloading enabled, which is the default. \" +\n          \"You can disable this by running hanami with the `--no-code-reloading` option.\"\n      elsif defined? Shotgun\n        \"The shotgun gem causes everything to be reloaded for every request. \" +\n          \"You can disable shotgun in the Gemfile temporarily to use Better Errors.\"\n      else\n        \"The application has been restarted since this page loaded, \" +\n          \"or the framework is reloading all gems before each request \"\n      end\n      [200, { \"Content-Type\" => \"application/json; charset=utf-8\" }, [JSON.dump(\n        error: 'No exception information available',\n        explanation: explanation,\n      )]]\n    end\n\n    def invalid_error_json_response\n      [200, { \"Content-Type\" => \"application/json; charset=utf-8\" }, [JSON.dump(\n        error: \"Session expired\",\n        explanation: \"This page was likely opened from a previous exception, \" +\n          \"and the exception is no longer available in memory.\",\n      )]]\n    end\n\n    def invalid_csrf_token_json_response\n      [200, { \"Content-Type\" => \"application/json; charset=utf-8\" }, [JSON.dump(\n        error: \"Invalid CSRF Token\",\n        explanation: \"The browser session might have been cleared, \" +\n          \"or something went wrong.\",\n      )]]\n    end\n  end\nend\n", "<!DOCTYPE html>\n<html>\n<head>\n    <title><%= exception_type %> at <%= request_path %></title>\n</head>\n<body>\n    <%# Stylesheets are placed in the <body> for Turbolinks compatibility. %>\n    <style>\n    /* Basic reset */\n    * {\n        margin: 0;\n        padding: 0;\n    }\n\n    table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    th, td {\n        vertical-align: top;\n        text-align: left;\n    }\n\n    textarea {\n        resize: none;\n    }\n\n    body {\n        font-size: 10pt;\n    }\n\n    body, td, input, textarea {\n        font-family: helvetica neue, lucida grande, sans-serif;\n        line-height: 1.5;\n        color: #333;\n        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);\n    }\n\n    html {\n        background: #f0f0f5;\n    }\n\n    .clearfix::after{\n        clear: both;\n        content: \".\";\n        display: block;\n        height: 0;\n        visibility: hidden;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Basic layout\n     * --------------------------------------------------------------------- */\n\n    /* Small */\n    @media screen and (max-width: 1100px) {\n        html {\n            overflow-y: scroll;\n        }\n\n        body {\n            margin: 0 20px;\n        }\n\n        header.exception {\n            margin: 0 -20px;\n        }\n\n        nav.sidebar {\n            padding: 0;\n            margin: 20px 0;\n        }\n\n        ul.frames {\n            max-height: 200px;\n            overflow: auto;\n        }\n    }\n\n    /* Wide */\n    @media screen and (min-width: 1100px) {\n        header.exception {\n           position: fixed;\n           top: 0;\n           left: 0;\n           right: 0;\n        }\n\n        nav.sidebar,\n        .frame_info {\n            position: fixed;\n            top: 95px;\n            bottom: 0;\n\n            box-sizing: border-box;\n\n            overflow-y: auto;\n            overflow-x: hidden;\n        }\n\n        nav.sidebar {\n            width: 40%;\n            left: 20px;\n            top: 115px;\n            bottom: 20px;\n        }\n\n        .frame_info {\n            right: 0;\n            left: 40%;\n\n            padding: 20px;\n            padding-left: 10px;\n            margin-left: 30px;\n        }\n    }\n\n    nav.sidebar {\n        background: #d3d3da;\n        border-top: solid 3px #a33;\n        border-bottom: solid 3px #a33;\n        border-radius: 4px;\n        box-shadow: 0 0 6px rgba(0, 0, 0, 0.2), inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n    }\n\n    /* ---------------------------------------------------------------------\n     * Header\n     * --------------------------------------------------------------------- */\n\n    header.exception {\n        padding: 18px 20px;\n\n        height: 59px;\n        min-height: 59px;\n\n        overflow: hidden;\n\n        background-color: #20202a;\n        color: #aaa;\n        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.3);\n        font-weight: 200;\n        box-shadow: inset 0 -5px 3px -3px rgba(0, 0, 0, 0.05), inset 0 -1px 0 rgba(0, 0, 0, 0.05);\n\n        -webkit-text-smoothing: antialiased;\n    }\n\n    /* Heading */\n    header.exception .fix-actions {\n        margin-top: .5em;\n    }\n\n    header.exception .fix-actions input[type=submit] {\n        font-weight: bold;\n    }\n\n    header.exception h2 {\n        font-weight: 200;\n        font-size: 11pt;\n    }\n\n    header.exception h2,\n    header.exception p {\n        line-height: 1.5em;\n        overflow: hidden;\n        white-space: pre;\n        text-overflow: ellipsis;\n    }\n\n    header.exception h2 strong {\n        font-weight: 700;\n        color: #d55;\n    }\n\n    header.exception p {\n        font-weight: 200;\n        font-size: 17pt;\n        color: white;\n    }\n\n    header.exception:hover {\n        height: auto;\n        z-index: 2;\n    }\n\n    header.exception:hover h2,\n    header.exception:hover p {\n        padding-right: 20px;\n        overflow-y: auto;\n        word-wrap: break-word;\n        white-space: pre-wrap;\n        height: auto;\n        max-height: 7.5em;\n    }\n\n    @media screen and (max-width: 1100px) {\n        header.exception {\n            height: auto;\n        }\n\n        header.exception h2,\n        header.exception p {\n            padding-right: 20px;\n            overflow-y: auto;\n            word-wrap: break-word;\n            height: auto;\n            max-height: 7em;\n        }\n    }\n\n    <%#\n    /* Light theme */\n    header.exception {\n        text-shadow: 0 1px 0 rgba(250, 250, 250, 0.6);\n        background: rgba(200,100,50,0.10);\n        color: #977;\n    }\n    header.exception h2 strong {\n        color: #533;\n    }\n    header.exception p {\n        color: #744;\n    }\n    %>\n\n    /* ---------------------------------------------------------------------\n     * Navigation\n     * --------------------------------------------------------------------- */\n\n    nav.tabs {\n        border-bottom: solid 1px #ddd;\n\n        background-color: #eee;\n        text-align: center;\n\n        padding: 6px;\n\n        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);\n    }\n\n    nav.tabs a {\n        display: inline-block;\n\n        height: 22px;\n        line-height: 22px;\n        padding: 0 10px;\n\n        text-decoration: none;\n        font-size: 8pt;\n        font-weight: bold;\n\n        color: #999;\n        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);\n    }\n\n    nav.tabs a.selected {\n        color: white;\n        background: rgba(0, 0, 0, 0.5);\n        border-radius: 16px;\n        box-shadow: 1px 1px 0 rgba(255, 255, 255, 0.1);\n        text-shadow: 0 0 4px rgba(0, 0, 0, 0.4), 0 1px 0 rgba(0, 0, 0, 0.4);\n    }\n\n    nav.tabs a.disabled {\n        text-decoration: line-through;\n        text-shadow: none;\n        cursor: default;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Sidebar\n     * --------------------------------------------------------------------- */\n\n    ul.frames {\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    }\n\n    /* Each item */\n    ul.frames li {\n        background-color: #f8f8f8;\n        background: -webkit-linear-gradient(top, #f8f8f8 80%, #f0f0f0);\n        background: -moz-linear-gradient(top, #f8f8f8 80%, #f0f0f0);\n        background: linear-gradient(top, #f8f8f8 80%, #f0f0f0);\n        box-shadow: inset 0 -1px 0 #e2e2e2;\n        padding: 7px 20px;\n\n        cursor: pointer;\n        overflow: hidden;\n    }\n\n    ul.frames .name,\n    ul.frames .location {\n        overflow: hidden;\n        height: 1.5em;\n\n        white-space: nowrap;\n        word-wrap: none;\n        text-overflow: ellipsis;\n    }\n\n    ul.frames .method {\n        color: #966;\n    }\n\n    ul.frames .location {\n        font-size: 0.85em;\n        font-weight: 400;\n        color: #999;\n    }\n\n    ul.frames .line {\n        font-weight: bold;\n    }\n\n    /* Selected frame */\n    ul.frames li.selected {\n        background: #38a;\n        box-shadow: inset 0 1px 0 rgba(0, 0, 0, 0.1), inset 0 2px 0 rgba(255, 255, 255, 0.01), inset 0 -1px 0 rgba(0, 0, 0, 0.1);\n    }\n\n    ul.frames li.selected .name,\n    ul.frames li.selected .method,\n    ul.frames li.selected .location {\n        color: white;\n        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.2);\n    }\n\n    ul.frames li.selected .location {\n        opacity: 0.6;\n    }\n\n    /* Iconography */\n    ul.frames li {\n        padding-left: 60px;\n        position: relative;\n    }\n\n    ul.frames li .icon {\n        display: block;\n        width: 20px;\n        height: 20px;\n        line-height: 20px;\n        border-radius: 15px;\n\n        text-align: center;\n\n        background: white;\n        border: solid 2px #ccc;\n\n        font-size: 9pt;\n        font-weight: 200;\n        font-style: normal;\n\n        position: absolute;\n        top: 14px;\n        left: 20px;\n    }\n\n    ul.frames .icon.application {\n        background: #808090;\n        border-color: #555;\n    }\n\n    ul.frames .icon.application:before {\n        content: 'A';\n        color: white;\n        text-shadow: 0 0 3px rgba(0, 0, 0, 0.2);\n    }\n\n    /* Responsiveness -- flow to single-line mode */\n    @media screen and (max-width: 1100px) {\n        ul.frames li {\n            padding-top: 6px;\n            padding-bottom: 6px;\n            padding-left: 36px;\n            line-height: 1.3;\n        }\n\n        ul.frames li .icon {\n            width: 11px;\n            height: 11px;\n            line-height: 11px;\n\n            top: 7px;\n            left: 10px;\n            font-size: 5pt;\n        }\n\n        ul.frames .name,\n        ul.frames .location {\n            display: inline-block;\n            line-height: 1.3;\n            height: 1.3em;\n        }\n\n        ul.frames .name {\n            margin-right: 10px;\n        }\n    }\n\n    /* ---------------------------------------------------------------------\n     * Monospace\n     * --------------------------------------------------------------------- */\n\n    pre, code, .be-repl input, .be-repl .command-line span, textarea, .code_linenums {\n        font-family: menlo, lucida console, monospace;\n        font-size: 8pt;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Display area\n     * --------------------------------------------------------------------- */\n\n    .trace_info {\n        background: #fff;\n        padding: 6px;\n        border-radius: 3px;\n        margin-bottom: 2px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.03), 1px 1px 0 rgba(0, 0, 0, 0.05), -1px 1px 0 rgba(0, 0, 0, 0.05), 0 0 0 4px rgba(0, 0, 0, 0.04);\n    }\n\n    .code_block{\n        background: #f1f1f1;\n        border-left: 1px solid #ccc;\n    }\n\n    /* Titlebar */\n    .trace_info .title {\n        background: #f1f1f1;\n\n        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.3);\n        overflow: hidden;\n        padding: 6px 10px;\n\n        border: solid 1px #ccc;\n        border-bottom: 0;\n\n        border-top-left-radius: 2px;\n        border-top-right-radius: 2px;\n    }\n\n    .trace_info .title .name,\n    .trace_info .title .location {\n        font-size: 9pt;\n        line-height: 26px;\n        height: 26px;\n        overflow: hidden;\n    }\n\n    .trace_info .title .location {\n        float: left;\n        font-weight: bold;\n        font-size: 10pt;\n    }\n\n    .trace_info .title .location a {\n        color:inherit;\n        text-decoration:none;\n        border-bottom:1px solid #aaaaaa;\n    }\n\n    .trace_info .title .location a:hover {\n        border-color:#666666;\n    }\n\n    .trace_info .title .name {\n        float: right;\n        font-weight: 200;\n    }\n\n    .code, .be-console, .unavailable {\n        background: #fff;\n        padding: 5px;\n\n        box-shadow: inset 3px 3px 3px rgba(0, 0, 0, 0.1), inset 0 0 0 1px rgba(0, 0, 0, 0.1);\n    }\n\n    .code_linenums{\n        background:#f1f1f1;\n        padding-top:10px;\n        padding-bottom:9px;\n        float:left;\n    }\n\n    .code_linenums span{\n        display:block;\n        padding:0 12px;\n    }\n\n    .code {\n        margin-bottom: -1px;\n        border-top-left-radius:2px;\n        padding: 10px 0;\n        overflow: auto;\n    }\n\n    .code pre{\n        padding-left:12px;\n        min-height:16px;\n    }\n\n    /* Source unavailable */\n    p.unavailable {\n        padding: 20px 0 40px 0;\n        text-align: center;\n        color: #b99;\n        font-weight: bold;\n    }\n\n    p.unavailable:before {\n        content: '\\00d7';\n        display: block;\n\n        color: #daa;\n\n        text-align: center;\n        font-size: 40pt;\n        font-weight: normal;\n        margin-bottom: -10px;\n    }\n\n    @-webkit-keyframes highlight {\n        0%   { background: rgba(220, 30, 30, 0.3); }\n        100% { background: rgba(220, 30, 30, 0.1); }\n    }\n    @-moz-keyframes highlight {\n        0%   { background: rgba(220, 30, 30, 0.3); }\n        100% { background: rgba(220, 30, 30, 0.1); }\n    }\n    @keyframes highlight {\n        0%   { background: rgba(220, 30, 30, 0.3); }\n        100% { background: rgba(220, 30, 30, 0.1); }\n    }\n\n    .code .highlight, .code_linenums .highlight {\n        background: rgba(220, 30, 30, 0.1);\n        -webkit-animation: highlight 400ms linear 1;\n        -moz-animation: highlight 400ms linear 1;\n        animation: highlight 400ms linear 1;\n    }\n\n    /* REPL shell */\n    .be-console {\n        padding: 0 1px 10px 1px;\n        border-bottom-left-radius: 2px;\n        border-bottom-right-radius: 2px;\n    }\n\n    .be-console pre {\n        padding: 10px 10px 0 10px;\n        max-height: 400px;\n        overflow-x: none;\n        overflow-y: auto;\n        margin-bottom: -3px;\n        word-wrap: break-word;\n        white-space: pre-wrap;\n    }\n\n    /* .command-line > span + input */\n    .be-console .command-line {\n        display: table;\n        width: 100%;\n    }\n\n    .be-console .command-line span,\n    .be-console .command-line input {\n        display: table-cell;\n    }\n\n    .be-console .command-line span {\n        width: 1%;\n        padding-right: 5px;\n        padding-left: 10px;\n        white-space: pre;\n    }\n\n    .be-console .command-line input {\n        width: 99%;\n    }\n\n    /* Input box */\n    .be-console input,\n    .be-console input:focus {\n        outline: 0;\n        border: 0;\n        padding: 0;\n        background: transparent;\n        margin: 0;\n    }\n\n    /* Hint text */\n    .hint {\n        margin: 15px 0 20px 0;\n        font-size: 8pt;\n        color: #8080a0;\n        padding-left: 20px;\n    }\n\n    .hint:before {\n        content: '\\25b2';\n        margin-right: 5px;\n        opacity: 0.5;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Variable infos\n     * --------------------------------------------------------------------- */\n\n    .sub {\n        padding: 10px 0;\n        margin: 10px 0;\n    }\n\n    .sub:before {\n        content: '';\n        display: block;\n        width: 100%;\n        height: 4px;\n\n        border-radius: 2px;\n        background: rgba(0, 150, 200, 0.05);\n        box-shadow: 1px 1px 0 rgba(255, 255, 255, 0.7), inset 0 0 0 1px rgba(0, 0, 0, 0.04), inset 2px 2px 2px rgba(0, 0, 0, 0.07);\n    }\n\n    .sub h3 {\n        color: #39a;\n        font-size: 1.1em;\n        margin: 10px 0;\n        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);\n\n        -webkit-font-smoothing: antialiased;\n    }\n\n    .sub .inset {\n        overflow-y: auto;\n    }\n\n    .sub table {\n        table-layout: fixed;\n    }\n\n    .sub table td {\n        border-top: dotted 1px #ddd;\n        padding: 7px 1px;\n    }\n\n    .sub table td.name {\n        width: 150px;\n\n        font-weight: bold;\n        font-size: 0.8em;\n        padding-right: 20px;\n\n        word-wrap: break-word;\n    }\n\n    .sub table td pre {\n        max-height: 15em;\n        overflow-y: auto;\n    }\n\n    .sub table td pre {\n        width: 100%;\n\n        word-wrap: break-word;\n        white-space: normal;\n    }\n\n    /* \"(object doesn't support inspect)\" */\n    .sub .unsupported {\n      font-family: sans-serif;\n      color: #777;\n    }\n\n    /* ---------------------------------------------------------------------\n     * Scrollbar\n     * --------------------------------------------------------------------- */\n\n    nav.sidebar::-webkit-scrollbar,\n    .inset pre::-webkit-scrollbar,\n    .be-console pre::-webkit-scrollbar,\n    .code::-webkit-scrollbar {\n        width: 10px;\n        height: 10px;\n    }\n\n    .inset pre::-webkit-scrollbar-thumb,\n    .be-console pre::-webkit-scrollbar-thumb,\n    .code::-webkit-scrollbar-thumb {\n        background: #ccc;\n        border-radius: 5px;\n    }\n\n    nav.sidebar::-webkit-scrollbar-thumb {\n        background: rgba(0, 0, 0, 0.0);\n        border-radius: 5px;\n    }\n\n    nav.sidebar:hover::-webkit-scrollbar-thumb {\n        background-color: #999;\n        background: -webkit-linear-gradient(left, #aaa, #999);\n    }\n\n    .be-console pre:hover::-webkit-scrollbar-thumb,\n    .inset pre:hover::-webkit-scrollbar-thumb,\n    .code:hover::-webkit-scrollbar-thumb {\n        background: #888;\n    }\n    </style>\n\n    <%# IE8 compatibility crap %>\n    <script>\n    (function() {\n        var elements = [\"section\", \"nav\", \"header\", \"footer\", \"audio\"];\n        for (var i = 0; i < elements.length; i++) {\n            document.createElement(elements[i]);\n        }\n    })();\n    </script>\n\n    <%#\n      If Rails's Turbolinks is used, the Better Errors page is probably\n      rendered in the host app's layout. Let's empty out the styles of the\n      host app.\n    %>\n    <script>\n      if (window.Turbolinks) {\n          for(var i=0; i < document.styleSheets.length; i++) {\n              if(document.styleSheets[i].href)\n                  document.styleSheets[i].disabled = true;\n          }\n          if (window.Turbolinks.controller) {\n              // Turbolinks > 5 (see https://github.com/turbolinks/turbolinks/issues/6)\n              document.addEventListener(\"turbolinks:load\", function restoreCSS(e) {\n                  for(var i=0; i < document.styleSheets.length; i++) {\n                      document.styleSheets[i].disabled = false;\n                  }\n                  document.removeEventListener(\"turbolinks:load\", restoreCSS, false);\n              });\n          } else {\n              document.addEventListener(\"page:restore\", function restoreCSS(e) {\n                  for(var i=0; i < document.styleSheets.length; i++) {\n                      document.styleSheets[i].disabled = false;\n                  }\n                  document.removeEventListener(\"page:restore\", restoreCSS, false);\n              });\n          }\n      }\n    </script>\n\n    <div class='top'>\n        <header class=\"exception\">\n            <h2><strong><%= exception_type %></strong> <span>at <%= request_path %></span></h2>\n            <p><%= exception_message %></p>\n            <% unless active_support_actions.empty? %>\n                <div class='fix-actions'>\n                    <% active_support_actions.each do |action, _| %>\n                        <form class=\"button_to\" method=\"post\" action=\"<%= action_dispatch_action_endpoint %>\">\n                            <input type=\"submit\" value=\"<%= action %>\">\n                            <input type=\"hidden\" name=\"action\" value=\"<%= action %>\">\n                            <input type=\"hidden\" name=\"error\" value=\"<%= exception_type %>\">\n                            <input type=\"hidden\" name=\"location\" value=\"<%= request_path %>\">\n                        </form>\n                    <% end %>\n                </div>\n            <% end %>\n        </header>\n    </div>\n\n    <section class=\"backtrace\">\n        <nav class=\"sidebar\">\n            <nav class=\"tabs\">\n                <a href=\"#\" id=\"application_frames\">Application Frames</a>\n                <a href=\"#\" id=\"all_frames\">All Frames</a>\n            </nav>\n            <ul class=\"frames\">\n                <% backtrace_frames.each_with_index do |frame, index| %>\n                    <li class=\"<%= frame.context %>\" data-context=\"<%= frame.context %>\" data-index=\"<%= index %>\">\n                        <span class='stroke'></span>\n                        <i class=\"icon <%= frame.context %>\"></i>\n                        <div class=\"info\">\n                            <div class=\"name\">\n                                <strong><%= frame.class_name %></strong><span class='method'><%= frame.method_name %></span>\n                            </div>\n                            <div class=\"location\">\n                                <span class=\"filename\"><%= frame.pretty_path %></span>, line <span class=\"line\"><%= frame.line %></span>\n                            </div>\n                        </div>\n                    </li>\n                <% end %>\n            </ul>\n        </nav>\n\n        <% backtrace_frames.each_with_index do |frame, index| %>\n            <div class=\"frame_info\" id=\"frame_info_<%= index %>\" style=\"display:none;\"></div>\n        <% end %>\n    </section>\n</body>\n<script>\n(function() {\n\n    var OID = \"<%= id %>\";\n    var csrfToken = \"<%= csrf_token %>\";\n\n    var previousFrame = null;\n    var previousFrameInfo = null;\n    var allFrames = document.querySelectorAll(\"ul.frames li\");\n    var allFrameInfos = document.querySelectorAll(\".frame_info\");\n\n    function apiCall(method, opts, cb) {\n        var req = new XMLHttpRequest();\n        req.open(\"POST\", \"//\" + window.location.host + <%== uri_prefix.gsub(\"<\", \"&lt;\").inspect %> + \"/__better_errors/\" + OID + \"/\" + method, true);\n        req.setRequestHeader(\"Content-Type\", \"application/json\");\n        opts.csrfToken = csrfToken;\n        req.send(JSON.stringify(opts));\n        req.onreadystatechange = function() {\n            if(req.readyState == 4) {\n                var res = JSON.parse(req.responseText);\n                cb(res);\n            }\n        };\n    }\n\n    function escapeHTML(html) {\n        return html.replace(/&/, \"&amp;\").replace(/</g, \"&lt;\");\n    }\n\n    function REPL(index) {\n        this.index = index;\n\n        var previousCommands = JSON.parse(localStorage.getItem(\"better_errors_previous_commands\"));\n        if(previousCommands === null) {\n          localStorage.setItem(\"better_errors_previous_commands\", JSON.stringify([]));\n          previousCommands = [];\n        }\n\n        this.previousCommandOffset = previousCommands.length;\n    }\n\n    REPL.all = [];\n\n    REPL.prototype.install = function(containerElement) {\n        this.container = containerElement;\n\n        this.promptElement  = this.container.querySelector(\".command-line .prompt\");\n        this.inputElement   = this.container.querySelector(\"input\");\n        this.outputElement  = this.container.querySelector(\"pre\");\n\n        var self = this;\n        this.inputElement.onkeydown = function(ev) {\n            self.onKeyDown(ev);\n        };\n\n        this.setPrompt(\">>\");\n\n        REPL.all[this.index] = this;\n    }\n\n    REPL.prototype.focus = function() {\n        this.inputElement.focus();\n    };\n\n    REPL.prototype.setPrompt = function(prompt) {\n        this._prompt = prompt;\n        this.promptElement.innerHTML = escapeHTML(prompt);\n    };\n\n    REPL.prototype.getInput = function() {\n        return this.inputElement.value;\n    };\n\n    REPL.prototype.setInput = function(text) {\n        this.inputElement.value = text;\n\n        if(this.inputElement.setSelectionRange) {\n            // set cursor to end of input\n            this.inputElement.setSelectionRange(text.length, text.length);\n        }\n    };\n\n    REPL.prototype.writeRawOutput = function(output) {\n        this.outputElement.innerHTML += output;\n        this.outputElement.scrollTop = this.outputElement.scrollHeight;\n    };\n\n    REPL.prototype.writeOutput = function(output) {\n        this.writeRawOutput(escapeHTML(output));\n    };\n\n    REPL.prototype.sendInput = function(line) {\n        var self = this;\n        apiCall(\"eval\", { \"index\": this.index, source: line }, function(response) {\n            if(response.error) {\n                self.writeOutput(response.error + \"\\n\");\n            }\n            self.writeOutput(self._prompt + \" \");\n            self.writeRawOutput(response.highlighted_input + \"\\n\");\n            self.writeOutput(response.result);\n            self.setPrompt(response.prompt);\n            self.setInput(response.prefilled_input);\n        });\n    };\n\n    REPL.prototype.onEnterKey = function() {\n        var text = this.getInput();\n        if(text != \"\" && text !== undefined) {\n            var previousCommands = JSON.parse(localStorage.getItem(\"better_errors_previous_commands\"));\n            this.previousCommandOffset = previousCommands.push(text);\n            if(previousCommands.length > 100) {\n              previousCommands.splice(0, 1);\n              this.previousCommandOffset -= 1;\n            }\n            localStorage.setItem(\"better_errors_previous_commands\", JSON.stringify(previousCommands));\n        }\n        this.setInput(\"\");\n        this.sendInput(text);\n    };\n\n    REPL.prototype.onNavigateHistory = function(direction) {\n        this.previousCommandOffset += direction;\n        var previousCommands = JSON.parse(localStorage.getItem(\"better_errors_previous_commands\"));\n\n        if(this.previousCommandOffset < 0) {\n            this.previousCommandOffset = -1;\n            this.setInput(\"\");\n            return;\n        }\n\n        if(this.previousCommandOffset >= previousCommands.length) {\n            this.previousCommandOffset = previousCommands.length;\n            this.setInput(\"\");\n            return;\n        }\n\n        this.setInput(previousCommands[this.previousCommandOffset]);\n    };\n\n    REPL.prototype.onKeyDown = function(ev) {\n        if(ev.keyCode == 13) {\n            this.onEnterKey();\n        } else if(ev.keyCode == 38 || (ev.ctrlKey && ev.keyCode == 80)) {\n            // the user pressed the up arrow or Ctrl-P\n            this.onNavigateHistory(-1);\n            ev.preventDefault();\n            return false;\n        } else if(ev.keyCode == 40 || (ev.ctrlKey && ev.keyCode == 78)) {\n            // the user pressed the down arrow or Ctrl-N\n            this.onNavigateHistory(1);\n            ev.preventDefault();\n            return false;\n        }\n    };\n\n    function switchTo(el) {\n        if(previousFrameInfo) previousFrameInfo.style.display = \"none\";\n        previousFrameInfo = el;\n\n        el.style.display = \"block\";\n\n        var replInput = el.querySelector('.be-console input');\n        if (replInput) replInput.focus();\n    }\n\n    function selectFrameInfo(index) {\n        var el = allFrameInfos[index];\n        if(el) {\n            if (el.loaded) {\n                return switchTo(el);\n            }\n\n            apiCall(\"variables\", { \"index\": index }, function(response) {\n                el.loaded = true;\n                if(response.error) {\n                    el.innerHTML = \"<h2 class='error'>\" + escapeHTML(response.error) + \"</h2>\";\n                    if(response.explanation) {\n                      el.innerHTML += \"<p class='explanation'>\" + escapeHTML(response.explanation) + \"</p>\";\n                    }\n                    el.innerHTML += \"<p><a target='_new' href='https://github.com/BetterErrors/better_errors'>More about Better Errors</a></p>\";\n                } else {\n                    el.innerHTML = response.html;\n\n                    var repl = el.querySelector(\".be-repl .be-console\");\n                    if(repl) {\n                        new REPL(index).install(repl);\n                    }\n                }\n                switchTo(el);\n            });\n        }\n    }\n\n    for(var i = 0; i < allFrames.length; i++) {\n        (function(i, el) {\n            var el = allFrames[i];\n            el.onclick = function() {\n                if(previousFrame) {\n                    previousFrame.className = \"\";\n                }\n                el.className = \"selected\";\n                previousFrame = el;\n\n                selectFrameInfo(el.attributes[\"data-index\"].value);\n            };\n        })(i);\n    }\n\n    // Click the first application frame\n    (\n      document.querySelector(\".frames li.application\") ||\n      document.querySelector(\".frames li\")\n    ).onclick();\n\n    // This is the second query performed for frames; maybe the 'allFrames' list\n    // currently used and this list can be better used to avoid the repetition:\n    var applicationFramesCount = document.querySelectorAll(\n        \"ul.frames li[data-context=application]\"\n    ).length;\n\n    var applicationFramesButtonIsInstalled = false;\n    var applicationFramesButton = document.getElementById(\"application_frames\");\n    var allFramesButton = document.getElementById(\"all_frames\");\n\n    // The application frames button only needs to be bound if\n    // there are actually any application frames to look at.\n    var installApplicationFramesButton = function() {\n        applicationFramesButton.onclick = function() {\n            allFramesButton.className = \"\";\n            applicationFramesButton.className = \"selected\";\n            for(var i = 0; i < allFrames.length; i++) {\n                if(allFrames[i].attributes[\"data-context\"].value == \"application\") {\n                    allFrames[i].style.display = \"block\";\n                } else {\n                    allFrames[i].style.display = \"none\";\n                }\n            }\n            return false;\n        };\n\n        applicationFramesButtonIsInstalled = true;\n    }\n\n    allFramesButton.onclick = function() {\n        if(applicationFramesButtonIsInstalled) {\n            applicationFramesButton.className = \"\";\n        }\n\n        allFramesButton.className = \"selected\";\n        for(var i = 0; i < allFrames.length; i++) {\n            allFrames[i].style.display = \"block\";\n        }\n        return false;\n    };\n\n    // If there are no application frames, select the 'All Frames'\n    // tab by default.\n    if(applicationFramesCount > 0) {\n        installApplicationFramesButton();\n        applicationFramesButton.onclick();\n    } else {\n        applicationFramesButton.className = \"disabled\";\n        applicationFramesButton.title = \"No application frames available\";\n        allFramesButton.onclick();\n    }\n})();\n</script>\n</html>\n\n<!-- generated by Better Errors in <%= Time.now.to_f - @start_time %> seconds -->\n", "require \"spec_helper\"\n\nmodule BetterErrors\n  describe Middleware do\n    let(:app) { Middleware.new(->env { \":)\" }) }\n    let(:exception) { RuntimeError.new(\"oh no :(\") }\n    let(:status) { response_env[0] }\n    let(:headers) { response_env[1] }\n    let(:body) { response_env[2].join }\n\n    context 'when the application raises no exception' do\n      it \"passes non-error responses through\" do\n        expect(app.call({})).to eq(\":)\")\n      end\n    end\n\n    it \"calls the internal methods\" do\n      expect(app).to receive :internal_call\n      app.call(\"PATH_INFO\" => \"/__better_errors/1/preform_awesomness\")\n    end\n\n    it \"calls the internal methods on any subfolder path\" do\n      expect(app).to receive :internal_call\n      app.call(\"PATH_INFO\" => \"/any_sub/folder/path/__better_errors/1/preform_awesomness\")\n    end\n\n    it \"shows the error page\" do\n      expect(app).to receive :show_error_page\n      app.call(\"PATH_INFO\" => \"/__better_errors/\")\n    end\n\n    it \"doesn't show the error page to a non-local address\" do\n      expect(app).not_to receive :better_errors_call\n      app.call(\"REMOTE_ADDR\" => \"1.2.3.4\")\n    end\n\n    it \"shows to a whitelisted IP\" do\n      BetterErrors::Middleware.allow_ip! '77.55.33.11'\n      expect(app).to receive :better_errors_call\n      app.call(\"REMOTE_ADDR\" => \"77.55.33.11\")\n    end\n\n    it \"shows to a whitelisted IPAddr\" do\n      BetterErrors::Middleware.allow_ip! IPAddr.new('77.55.33.0/24')\n      expect(app).to receive :better_errors_call\n      app.call(\"REMOTE_ADDR\" => \"77.55.33.11\")\n    end\n\n    it \"respects the X-Forwarded-For header\" do\n      expect(app).not_to receive :better_errors_call\n      app.call(\n        \"REMOTE_ADDR\"          => \"127.0.0.1\",\n        \"HTTP_X_FORWARDED_FOR\" => \"1.2.3.4\",\n      )\n    end\n\n    it \"doesn't blow up when given a blank REMOTE_ADDR\" do\n      expect { app.call(\"REMOTE_ADDR\" => \" \") }.to_not raise_error\n    end\n\n    it \"doesn't blow up when given an IP address with a zone index\" do\n      expect { app.call(\"REMOTE_ADDR\" => \"0:0:0:0:0:0:0:1%0\" ) }.to_not raise_error\n    end\n\n    context \"when /__better_errors is requested directly\" do\n      let(:response_env) { app.call(\"PATH_INFO\" => \"/__better_errors\") }\n\n      context \"when no error has been recorded since startup\" do\n        it \"shows that no errors have been recorded\" do\n          expect(body).to match /No errors have been recorded yet./\n        end\n\n        it 'does not attempt to use ActionDispatch::ExceptionWrapper on the nil exception' do\n          ad_ew = double(\"ActionDispatch::ExceptionWrapper\")\n          stub_const('ActionDispatch::ExceptionWrapper', ad_ew)\n          expect(ad_ew).to_not receive :new\n\n          response_env\n        end\n\n        context 'when requested inside a subfolder path' do\n          let(:response_env) { app.call(\"PATH_INFO\" => \"/any_sub/folder/__better_errors\") }\n\n          it \"shows that no errors have been recorded\" do\n            expect(body).to match /No errors have been recorded yet./\n          end\n        end\n      end\n\n      context 'when an error has been recorded' do\n        let(:app) {\n          Middleware.new(->env do\n            # Only raise on the first request\n            raise exception unless @already_raised\n            @already_raised = true\n          end)\n        }\n        before do\n          app.call({})\n        end\n\n        it 'returns the information of the most recent error' do\n          expect(body).to include(\"oh no :(\")\n        end\n\n        it 'does not attempt to use ActionDispatch::ExceptionWrapper' do\n          ad_ew = double(\"ActionDispatch::ExceptionWrapper\")\n          stub_const('ActionDispatch::ExceptionWrapper', ad_ew)\n          expect(ad_ew).to_not receive :new\n\n          response_env\n        end\n\n        context 'when inside a subfolder path' do\n          let(:response_env) { app.call(\"PATH_INFO\" => \"/any_sub/folder/__better_errors\") }\n\n          it \"shows the error page on any subfolder path\" do\n            expect(app).to receive :show_error_page\n            app.call(\"PATH_INFO\" => \"/any_sub/folder/path/__better_errors/\")\n          end\n        end\n      end\n    end\n\n    context \"when handling an error\" do\n      let(:app) { Middleware.new(->env { raise exception }) }\n      let(:response_env) { app.call({}) }\n\n      it \"returns status 500\" do\n        expect(status).to eq(500)\n      end\n\n      context \"when the exception has a cause\" do\n        before do\n          pending \"This Ruby does not support `cause`\" unless Exception.new.respond_to?(:cause)\n        end\n\n        let(:app) {\n          Middleware.new(->env {\n            begin\n              raise \"First Exception\"\n            rescue\n              raise \"Second Exception\"\n            end\n          })\n        }\n\n        it \"shows the exception as-is\" do\n          expect(status).to eq(500)\n          expect(body).to match(/\\n> Second Exception\\n/)\n          expect(body).not_to match(/\\n> First Exception\\n/)\n        end\n      end\n\n      context \"when the exception responds to #original_exception\" do\n        class OriginalExceptionException < Exception\n          attr_reader :original_exception\n\n          def initialize(message, original_exception = nil)\n            super(message)\n            @original_exception = original_exception\n          end\n        end\n\n        context 'and has one' do\n          let(:app) {\n            Middleware.new(->env {\n              raise OriginalExceptionException.new(\"Second Exception\", Exception.new(\"First Exception\"))\n            })\n          }\n\n          it \"shows the original exception instead of the last-raised one\" do\n            expect(status).to eq(500)\n            expect(body).not_to match(/Second Exception/)\n            expect(body).to match(/First Exception/)\n          end\n        end\n\n        context 'and does not have one' do\n          let(:app) {\n            Middleware.new(->env {\n              raise OriginalExceptionException.new(\"The Exception\")\n            })\n          }\n\n          it \"shows the exception as-is\" do\n            expect(status).to eq(500)\n            expect(body).to match(/The Exception/)\n          end\n        end\n      end\n\n      it \"returns ExceptionWrapper's status_code\" do\n        ad_ew = double(\"ActionDispatch::ExceptionWrapper\")\n        allow(ad_ew).to receive('new').with(anything, exception) { double(\"ExceptionWrapper\", status_code: 404) }\n        stub_const('ActionDispatch::ExceptionWrapper', ad_ew)\n\n        expect(status).to eq(404)\n      end\n\n      it \"returns UTF-8 error pages\" do\n        expect(headers[\"Content-Type\"]).to match /charset=utf-8/\n      end\n\n      it \"returns text content by default\" do\n        expect(headers[\"Content-Type\"]).to match /text\\/plain/\n      end\n\n      context 'when a CSRF token cookie is not specified' do\n        it 'includes a newly-generated CSRF token cookie' do\n          expect(headers).to include(\n            'Set-Cookie' => /BetterErrors-CSRF-Token=[-a-z0-9]+; HttpOnly; SameSite=Strict/\n          )\n        end\n      end\n\n      context 'when a CSRF token cookie is specified' do\n        let(:response_env) { app.call({ 'HTTP_COOKIE' => 'BetterErrors-CSRF-Token=abc123' }) }\n\n        it 'does not set a new CSRF token cookie' do\n          expect(headers).not_to include('Set-Cookie')\n        end\n      end\n\n      context 'when the Accept header specifies HTML first' do\n        let(:response_env) { app.call(\"HTTP_ACCEPT\" => \"text/html,application/xhtml+xml;q=0.9,*/*\") }\n\n        it \"returns HTML content\" do\n          expect(headers[\"Content-Type\"]).to match /text\\/html/\n        end\n\n        it 'includes the newly-generated CSRF token in the body of the page' do\n          matches = headers['Set-Cookie'].match(/BetterErrors-CSRF-Token=(?<tok>[-a-z0-9]+); HttpOnly; SameSite=Strict/)\n          expect(body).to include(matches[:tok])\n        end\n\n        context 'when a CSRF token cookie is specified' do\n          let(:response_env) {\n            app.call({\n              'HTTP_COOKIE' => 'BetterErrors-CSRF-Token=csrfTokenGHI',\n              \"HTTP_ACCEPT\" => \"text/html,application/xhtml+xml;q=0.9,*/*\",\n            })\n          }\n\n          it 'includes that CSRF token in the body of the page' do\n            expect(body).to include('csrfTokenGHI')\n          end\n        end\n      end\n\n      context 'the logger' do\n        let(:logger) { double('logger', fatal: nil) }\n        before do\n          allow(BetterErrors).to receive(:logger).and_return(logger)\n        end\n\n        it \"receives the exception as a fatal message\" do\n          expect(logger).to receive(:fatal).with(/RuntimeError/)\n          response_env\n        end\n\n        context 'when Rails is being used' do\n          before do\n            skip(\"Rails not included in this run\") unless defined? Rails\n          end\n\n          it \"receives the exception without filtered backtrace frames\" do\n            expect(logger).to receive(:fatal) do |message|\n              expect(message).to_not match(/rspec-core/)\n            end\n            response_env\n          end\n        end\n        context 'when Rails is not being used' do\n          before do\n            skip(\"Rails is included in this run\") if defined? Rails\n          end\n\n          it \"receives the exception with all backtrace frames\" do\n            expect(logger).to receive(:fatal) do |message|\n              expect(message).to match(/rspec-core/)\n            end\n            response_env\n          end\n        end\n      end\n    end\n\n    context \"requesting the variables for a specific frame\" do\n      let(:env) { {} }\n      let(:response_env) {\n        app.call(request_env)\n      }\n      let(:request_env) {\n        Rack::MockRequest.env_for(\"/__better_errors/#{id}/variables\", input: StringIO.new(JSON.dump(request_body_data)))\n      }\n      let(:request_body_data) { {\"index\": 0} }\n      let(:json_body) { JSON.parse(body) }\n      let(:id) { 'abcdefg' }\n\n      context 'when no errors have been recorded' do\n        it 'returns a JSON error' do\n          expect(json_body).to match(\n            'error' => 'No exception information available',\n            'explanation' => /application has been restarted/,\n          )\n        end\n\n        context 'when Middleman is in use' do\n          let!(:middleman) { class_double(\"Middleman\").as_stubbed_const }\n          it 'returns a JSON error' do\n            expect(json_body['explanation'])\n              .to match(/Middleman reloads all dependencies/)\n          end\n        end\n\n        context 'when Shotgun is in use' do\n          let!(:shotgun) { class_double(\"Shotgun\").as_stubbed_const }\n\n          it 'returns a JSON error' do\n            expect(json_body['explanation'])\n              .to match(/The shotgun gem/)\n          end\n\n          context 'when Hanami is also in use' do\n            let!(:hanami) { class_double(\"Hanami\").as_stubbed_const }\n            it 'returns a JSON error' do\n              expect(json_body['explanation'])\n                .to match(/--no-code-reloading/)\n            end\n          end\n        end\n      end\n\n      context 'when an error has been recorded' do\n        let(:error_page) { ErrorPage.new(exception, env) }\n        before do\n          app.instance_variable_set('@error_page', error_page)\n        end\n\n        context 'but it does not match the request' do\n          it 'returns a JSON error' do\n            expect(json_body).to match(\n              'error' => 'Session expired',\n              'explanation' => /no longer available in memory/,\n            )\n          end\n        end\n\n        context 'and its ID matches the requested ID' do\n          let(:id) { error_page.id }\n\n          context 'when the body csrfToken matches the CSRF token cookie' do\n            let(:request_body_data) { { \"index\" => 0, \"csrfToken\" => \"csrfToken123\" } }\n            before do\n              request_env[\"HTTP_COOKIE\"] = \"BetterErrors-CSRF-Token=csrfToken123\"\n            end\n\n            it 'returns the HTML content' do\n              expect(error_page).to receive(:do_variables).and_return(html: \"<content>\")\n              expect(json_body).to match(\n                'html' => '<content>',\n              )\n            end\n          end\n\n          context 'when the body csrfToken does not match the CSRF token cookie' do\n            let(:request_body_data) { {\"index\": 0, \"csrfToken\": \"csrfToken123\"} }\n            before do\n              request_env[\"HTTP_COOKIE\"] = \"BetterErrors-CSRF-Token=csrfToken456\"\n            end\n\n            it 'returns a JSON error' do\n              expect(json_body).to match(\n                'error' => 'Invalid CSRF Token',\n                'explanation' => /session might have been cleared/,\n              )\n            end\n          end\n\n          context 'when there is no CSRF token in the request' do\n            it 'returns a JSON error' do\n              expect(json_body).to match(\n                'error' => 'Invalid CSRF Token',\n                'explanation' => /session might have been cleared/,\n              )\n            end\n          end\n        end\n      end\n    end\n  end\nend\n"], "filenames": ["lib/better_errors/error_page.rb", "lib/better_errors/middleware.rb", "lib/better_errors/templates/main.erb", "spec/better_errors/middleware_spec.rb"], "buggy_code_start_loc": [29, 2, 802, 7], "buggy_code_end_loc": [30, 172, 812, 302], "fixing_code_start_loc": [29, 3, 803, 7], "fixing_code_end_loc": [30, 203, 815, 388], "type": "CWE-352", "message": "better_errors is an open source replacement for the standard Rails error page with more information rich error pages. It is also usable outside of Rails in any Rack app as Rack middleware. better_errors prior to 2.8.0 did not implement CSRF protection for its internal requests. It also did not enforce the correct \"Content-Type\" header for these requests, which allowed a cross-origin \"simple request\" to be made without CORS protection. These together left an application with better_errors enabled open to cross-origin attacks. As a developer tool, better_errors documentation strongly recommends addition only to the `development` bundle group, so this vulnerability should only affect development environments. Please ensure that your project limits better_errors to the `development` group (or the non-Rails equivalent). Starting with release 2.8.x, CSRF protection is enforced. It is recommended that you upgrade to the latest release, or minimally to \"~> 2.8.3\". There are no known workarounds to mitigate the risk of using older releases of better_errors.", "other": {"cve": {"id": "CVE-2021-39197", "sourceIdentifier": "security-advisories@github.com", "published": "2021-09-07T18:15:07.473", "lastModified": "2021-09-14T18:34:34.410", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "better_errors is an open source replacement for the standard Rails error page with more information rich error pages. It is also usable outside of Rails in any Rack app as Rack middleware. better_errors prior to 2.8.0 did not implement CSRF protection for its internal requests. It also did not enforce the correct \"Content-Type\" header for these requests, which allowed a cross-origin \"simple request\" to be made without CORS protection. These together left an application with better_errors enabled open to cross-origin attacks. As a developer tool, better_errors documentation strongly recommends addition only to the `development` bundle group, so this vulnerability should only affect development environments. Please ensure that your project limits better_errors to the `development` group (or the non-Rails equivalent). Starting with release 2.8.x, CSRF protection is enforced. It is recommended that you upgrade to the latest release, or minimally to \"~> 2.8.3\". There are no known workarounds to mitigate the risk of using older releases of better_errors."}, {"lang": "es", "value": "better_errors es un reemplazo de c\u00f3digo abierto para la p\u00e1gina de error est\u00e1ndar de Rails con p\u00e1ginas de error m\u00e1s ricas en informaci\u00f3n. Tambi\u00e9n puede ser usado fuera de Rails en cualquier aplicaci\u00f3n Rack como middleware Rack. better_errors versiones anteriores a 2.8.0, no implementaba la protecci\u00f3n CSRF para sus peticiones internas. Tampoco aplicaba la cabecera \"Content-Type\" correcta para estas peticiones, que permit\u00eda realizar una \"petici\u00f3n simple\" de origen cruzado sin protecci\u00f3n CORS. Todo esto dejaba una aplicaci\u00f3n con better_errors habilitado abierta a ataques de origen cruzado. Como herramienta para desarrolladores, la documentaci\u00f3n de better_errors recomienda encarecidamente que se a\u00f1ada s\u00f3lo al grupo de paquetes \"development\", por lo que esta vulnerabilidad s\u00f3lo deber\u00eda afectar a los entornos de desarrollo. Por favor, aseg\u00farese de que su proyecto limita better_errors al grupo \"development\" (o su equivalente no Rails). A partir de la versi\u00f3n 2.8.x, se aplica la protecci\u00f3n CSRF. Se recomienda actualizar a la \u00faltima versi\u00f3n, o como m\u00ednimo a \" versiones posteriores a 2.8.3\". No se presentan soluciones conocidas para mitigar el riesgo de usar versiones anteriores de better_errors"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:better_errors_project:better_errors:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "2.8.0", "matchCriteriaId": "82B32E86-42A3-4E3A-819D-BB3E0A2AEA7D"}]}]}], "references": [{"url": "https://github.com/BetterErrors/better_errors/commit/8e8e796bfbde4aa088741823c8a3fc6df2089bb0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/BetterErrors/better_errors/discussions/507", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/BetterErrors/better_errors/pull/474", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/BetterErrors/better_errors/security/advisories/GHSA-w3j4-76qw-wwjm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/BetterErrors/better_errors/commit/8e8e796bfbde4aa088741823c8a3fc6df2089bb0"}}