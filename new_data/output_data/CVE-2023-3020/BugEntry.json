{"buggy_code": ["<?php\n\nnamespace LibrarianApp;\n\nuse Exception;\nuse Librarian\\Container\\DependencyInjector;\nuse Librarian\\Export\\Bibtex;\nuse Librarian\\Export\\Endnote;\nuse Librarian\\Export\\Ris;\nuse Librarian\\Html\\Bootstrap;\nuse Librarian\\Html\\Bootstrap\\Icon;\nuse Librarian\\Html\\Element;\nuse GuzzleHttp\\Utils;\nuse Librarian\\ItemMeta;\nuse Librarian\\Media\\Temporal;\nuse Librarian\\Mvc\\TextView;\n\nclass ItemsView extends TextView {\n\n    use SharedHtmlView;\n\n    /**\n     * @var Temporal\n     */\n    private $temporal_obj;\n\n    /**\n     * @var ItemMeta\n     */\n    private $item_meta;\n\n    /**\n     * @var array Search type to human readable.\n     */\n    private $type_to_readable;\n\n    public function __construct(DependencyInjector $di) {\n\n        parent::__construct($di);\n\n        $this->type_to_readable = [\n            'anywhere'  => \"{$this->lang->t9n('Metadata')} {$this->lang->t9n('and')} {$this->lang->t9n('PDF')}\",\n            'metadata'  => $this->lang->t9n('Metadata'),\n            'FT'        => $this->lang->t9n('PDF'),\n            'pdfnotes'  => $this->lang->t9n('PDF notes'),\n            'itemnotes' => $this->lang->t9n('Notes'),\n            'itemid'    => $this->lang->t9n('Item') . ' ID',\n            'TI'        => $this->lang->t9n('Title'),\n            'AB'        => \"{$this->lang->t9n('Title')} {$this->lang->t9n('or')} {$this->lang->t9n('Abstract')}\",\n            'AU'        => \"{$this->lang->t9n('Author')} {$this->lang->t9n('or')} {$this->lang->t9n('Editor')}\",\n            'AF'        => $this->lang->t9n('Affiliation'),\n            'T1'        => $this->lang->t9n('Primary title'),\n            'T2'        => $this->lang->t9n('Secondary title'),\n            'T3'        => $this->lang->t9n('Tertiary title'),\n            'KW'        => $this->lang->t9n('Keyword'),\n            'YR'        => $this->lang->t9n('Year')\n        ];\n    }\n\n    /**\n     * Assemble item browsing page and send it.\n     *\n     * @param string $collection Specify library, clipboard.\n     * @param array $get GET super global array.\n     * @param array $input [array items, integer total_count, array tags]\n     * @param bool $filter_menu\n     * @return string\n     * @throws Exception\n     */\n    public function page(string $collection, array $get, array $input, bool $filter_menu = false): string {\n\n        // Page.\n        $page = isset($get['page']) ? $get['page'] : 1;\n\n        // Page title.\n        switch ($collection) {\n\n            case 'clipboard':\n                $title = \"{$this->lang->t9n('Page')} {$page} - {$this->lang->t9n('Clipboard')}\";\n                break;\n\n            case 'project':\n                $title = \"{$this->lang->t9n('Page')} {$page} - {$this->lang->t9n('Project')} - {$input['project']}\";\n                break;\n\n            case 'catalog':\n                $title = \"{$this->lang->t9n('Page')} {$page} - {$this->lang->t9n('Catalog')}\";\n                break;\n\n            default:\n                $title = \"{$this->lang->t9n('Page')} {$page} - {$this->lang->t9n('Library')}\";\n                break;\n        }\n\n        $this->title($title);\n\n        $this->head();\n\n        // Page top.\n        $page_top = $this->pageTop($collection, $get, $input);\n\n        // Item list.\n        switch ($this->app_settings->getUser('display_type')) {\n\n            case 'title':\n                $items = $this->titleList($input['items']);\n                break;\n\n            case 'icon':\n                $items = $this->iconList($input['items']);\n                break;\n\n            case 'summary':\n                $items = $this->summaryList($input['items']);\n                break;\n\n            case 'table':\n                $items = $this->tableList($input['items']);\n                break;\n\n            default:\n                $items = $this->titleList($input['items']);\n        }\n\n        // Top row contains the breadcrumb and the item list. It is scrollable.\n\n        /** @var Bootstrap\\Row $el */\n        $el = $this->di->get('Row');\n\n        $el->id('top-row');\n        $el->style('overflow: auto');\n        $el->addClass(\"d-flex align-content-start\");\n        $el->column($page_top, 'col-12');\n        $el->append($items);\n        $top_row = $el->render();\n\n        $el = null;\n\n        // Toolbar.\n        $page_bottom = $this->pageBottom($collection, $get, $input);\n\n        $page_rows = \"$top_row $page_bottom\";\n\n        // Add filter menu.\n        if ($filter_menu === true) {\n\n            $filter = $this->filterMenu($collection, $get);\n\n            $left_class = self::$theme === 'dark' ? 'bg-dark' : 'bg-white';\n\n            /** @var Bootstrap\\Row $el */\n            $el = $this->di->get('Row');\n\n            $el->column($filter, 'col-lg-auto p-0 ' . $left_class);\n            $el->column($page_rows, 'col-lg items-container');\n            $page_rows = $el->render();\n\n            $el = null;\n        }\n\n        // Modals.\n\n        switch ($collection) {\n\n            case 'clipboard':\n                $action = '#clipboard/main';\n                break;\n\n            case 'project':\n                $action = '#project/browse?id=' . $get['id'];\n                break;\n\n            default:\n                $action = '#items/main';\n        }\n\n        $modal_header = $collection === 'catalog' ? 'library' : $collection;\n\n        // Quick search modal.\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->context('link');\n        $el->addClass('pr-0');\n        $el->attr('data-dismiss', 'modal');\n        $el->attr('data-toggle', 'modal');\n        $el->dataTarget('#modal-searches');\n        $el->html($this->lang->t9n('Previous searches'));\n        $searches_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->context('link');\n        $el->attr('data-dismiss', 'modal');\n        $el->attr('data-toggle', 'modal');\n        $el->dataTarget('#modal-advanced-search');\n        $el->html($this->lang->t9n('Advanced search'));\n        $advanced_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Modal $el */\n        $el = $this->di->get('Modal');\n\n        $el->id('modal-quick-search');\n        $el->header($this->lang->t9n('Search ' . $modal_header));\n        $el->button($searches_button);\n        $el->button($advanced_button);\n        $el->body($this->sharedQuickSearch($action), 'bg-darker-5');\n        $quick_search = $el->render();\n\n        $el = null;\n\n        // Advanced search.\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->context('link');\n        $el->attr('data-dismiss', 'modal');\n        $el->attr('data-toggle', 'modal');\n        $el->dataTarget('#modal-quick-search');\n        $el->html($this->lang->t9n('Quick search'));\n        $button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->addClass('search-submit');\n        $el->context('primary');\n        $el->html($this->lang->t9n('Search-VERB'));\n        $search_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Modal $el */\n        $el = $this->di->get('Modal');\n\n        $el->id('modal-advanced-search');\n        $el->header('Search ' . $modal_header);\n        $el->button($searches_button);\n        $el->button($button);\n        $el->button($search_button);\n        $el->body($this->sharedAdvancedSearch($input['tags'] ?? [], $action), 'bg-darker-5');\n        $el->componentSize('large');\n        $advanced_search = $el->render();\n\n        $el = null;\n\n        $html = \"$page_rows $quick_search $advanced_search\";\n\n        // ID list.\n        $id_list = [];\n\n        foreach ($input['items'] as $item) {\n\n            $id_list[] = [\n                'id'    => $item['id'],\n                'title' => trim(mb_substr($item['title'], 0, 75)) . (mb_strlen($item['title']) > 75 ? '&hellip;' : '')\n            ];\n        }\n\n        $this->append([\n            'html'    => $html,\n            'id_list' => $id_list\n        ]);\n\n        return $this->send();\n    }\n\n    /**\n     * Assemble item page containing filter column and send it.\n     *\n     * @param string $collection Specify library, clipboard.\n     * @param array $get\n     * @param array $input [array $filters, array items, integer total_count]\n     * @return string\n     * @throws Exception\n     */\n    public function filteredPage(string $collection, array $get, array $input): string {\n\n        return $this->page($collection, $get, $input, true);\n    }\n\n    /**\n     * Top row for all pages.\n     *\n     * @param string $collection\n     * @param array $get\n     * @param array $input\n     * @return string\n     * @throws Exception\n     */\n    private function pageTop(string $collection, array $get, array $input): string {\n\n        // Breadcrumbs.\n\n        switch ($collection) {\n\n            case 'clipboard':\n                $bc_title = $this->lang->t9n('Clipboard');\n                break;\n\n            case 'project':\n                $bc_title = $input['project'];\n                break;\n\n            case 'catalog':\n                $bc_title = \"{$this->lang->t9n('Items')} {$get['from_id']} - \" .\n                    ($this->scalar_utils->formatNumber(-1 + $get['from_id'] + $this->app_settings->getGlobal('max_items')));\n                break;\n\n            default:\n                $bc_title = $this->lang->t9n('Library');\n        }\n\n        /** @var Bootstrap\\Breadcrumb $el */\n        $el = $this->di->get('Breadcrumb');\n\n        $el->style('margin: 0 -15px');\n        $el->addClass('bg-transparent');\n        $el->item('IL', IL_BASE_URL . 'index.php/#dashboard/main');\n\n        if ($collection === 'project') {\n\n            $el->item($this->lang->t9n('Projects'), IL_BASE_URL . 'index.php/#projects/main');\n        }\n\n        if ($collection === 'catalog') {\n\n            $el->item($this->lang->t9n('Catalog'), IL_BASE_URL . 'index.php/#items/catalog');\n        }\n\n        $el->item(\"{$bc_title}\");\n        $bc = $el->render();\n\n        $el = null;\n\n        // Item count.\n\n        if (empty($input['total_count'])) {\n\n            $item_count = \"<div class=\\\"text-muted w-100 pb-3 pb-lg-0\\\">{$this->lang->t9n('No items')}</div>\";\n\n        } else {\n\n            /*\n             * \"From\" item number = page number * page size + 1. We need to subtract 1 from the page number.\n             *  E.g., page 2 -> Item (10 + 1).\n             */\n            $from = ($get['page'] - 1) * $this->app_settings->getUser('page_size') + 1;\n            $from = $this->scalar_utils->formatNumber((int) $from);\n\n            // \"To\" item number = page number * page size. Max. is the total item number.\n            $last = min($get['page'] * $this->app_settings->getUser('page_size'), $input['total_count']);\n            $last = $this->scalar_utils->formatNumber((int) $last);\n\n            // Total count.\n            $total_count = $this->scalar_utils->formatNumber((int) $input['total_count']);\n\n            // Put together the item counter.\n            $item_count = '<div class=\"text-muted w-100 pb-3 pb-lg-0\">' .\n                sprintf($this->lang->t9n('Items %s of %s'), $from . ' - ' . $last, $total_count) . '</div>';\n        }\n\n        $tags_html = '';\n\n        // Search tags.\n        if (isset($get['search_type'])) {\n\n            for ($i = 1; $i <= 8; $i++) {\n\n                $this->type_to_readable[\"C{$i}\"] = $this->app_settings->getGlobal(\"custom{$i}\");\n            }\n\n            foreach ($get['search_type'] as $i => $type) {\n\n                if ($get['search_query'][$i] === '') {\n\n                    continue;\n                }\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->context(\"dark\");\n                $el->componentSize(\"small\");\n                $el->addClass(\"d-inline-block mr-1 mb-2 rounded-0\");\n                $el->html(\"<b>{$this->type_to_readable[$type]}</b> &mdash; {$get['search_query'][$i]}\");\n                $tags_html .= $el->render();\n\n                $el = null;\n            }\n        }\n\n        // Filter tags.\n        $facet_fields = [\n            'added_time'       => $this->lang->t9n('Added date'),\n            'author'           => $this->lang->t9n('Author'),\n            'custom1'          => $this->lang->t9n($this->app_settings->getGlobal('custom1')),\n            'custom2'          => $this->lang->t9n($this->app_settings->getGlobal('custom2')),\n            'custom3'          => $this->lang->t9n($this->app_settings->getGlobal('custom3')),\n            'custom4'          => $this->lang->t9n($this->app_settings->getGlobal('custom4')),\n            'custom5'          => $this->lang->t9n($this->app_settings->getGlobal('custom5')),\n            'custom6'          => $this->lang->t9n($this->app_settings->getGlobal('custom6')),\n            'custom7'          => $this->lang->t9n($this->app_settings->getGlobal('custom7')),\n            'custom8'          => $this->lang->t9n($this->app_settings->getGlobal('custom8')),\n            'editor'           => $this->lang->t9n('Editor'),\n            'keyword'          => $this->lang->t9n('Keyword'),\n            'misc'             => $this->lang->t9n('Miscellaneous'),\n            'primary_title'    => $this->lang->t9n('Primary title'),\n            'reference_type'   => $this->lang->t9n('Publication type'),\n            'secondary_title'  => $this->lang->t9n('Secondary title'),\n            'tag'              => $this->lang->t9n('Tag'),\n            'tertiary_title'   => $this->lang->t9n('Tertiary title')\n        ];\n\n        if (!empty($input['filters'])) {\n\n            /** @var Bootstrap\\Icon $el Close icon. */\n            $el = $this->di->get('Icon');\n\n            $el->icon(\"close\");\n            $close = $el->render();\n\n            $el = null;\n\n            foreach ($input['filters'] as $filter) {\n\n                $key = key($filter);\n                $values = current($filter);\n\n                if (empty($values)) {\n\n                    continue;\n                }\n\n                // Format dates to local format.\n                if ($key === 'added_time') {\n\n                    $this->temporal_obj = $this->di->get('Temporal');\n                    $values[1] = $this->temporal_obj->toUserDate($values[1]);\n                }\n\n                // Construct a URL for the Remove filter button.\n                $removed_get = $get;\n\n                // Always remove page, because the link generates a new item list.\n                unset ($removed_get['page']);\n\n                // Remove this tag URL.\n                $remove_key = array_search($values[0], $removed_get['filter'][$key]);\n                unset($removed_get['filter'][$key][$remove_key]);\n\n                // Build query.\n                $get_query = http_build_query($removed_get);\n                $get_query = empty($get_query) ? '' : '?'. $get_query;\n\n                $close_url = '#' . IL_PATH_URL . $get_query;\n\n                $name = $facet_fields[$key] ?? $this->lang->t9n('Filter-NOUN');\n\n                $t9n_value = $values[1] === 'untagged' ? $this->lang->t9n($values[1]) : $values[1];\n\n                $tags_html .= <<<EOT\n                    <div class=\"btn-group mr-1 mb-2\" role=\"group\" aria-label=\"Filter button\">\n                        <button type=\"button\" class=\"btn btn-sm btn-dark rounded-0\">\n                            <b>{$name}</b> &mdash; {$t9n_value}\n                        </button>\n                        <a href=\"{$close_url}\" class=\"btn btn-sm btn-secondary\">{$close}</a>\n                    </div>\nEOT;\n            }\n        }\n\n        // Put it together in a row.\n\n        /** @var Bootstrap\\Row $el */\n        $el = $this->di->get('Row');\n\n        $el->column($bc, 'col-lg-8');\n        $el->column($item_count, 'col-lg-4 text-center text-lg-right d-flex align-items-center');\n\n        if ($tags_html !== '') {\n\n            $el->column($tags_html, 'col-12');\n        }\n\n        $row = $el->render();\n\n        $el = null;\n\n        return $row;\n    }\n\n    /**\n     * @param string $collection\n     * @param array $get\n     * @param array $input\n     * @return string\n     * @throws Exception\n     */\n    private function pageBottom(string $collection, array $get, array $input): string {\n\n        // We'll use some _GET in URLs.\n        $sanitized_get = $this->sanitation->urlquery($get);\n\n        $btn_class_a = self::$theme === 'dark' ? 'warning' : 'warning';\n        $btn_class_b = self::$theme === 'dark' ? 'secondary' : 'outline-dark';\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('magnify');\n        $search_icon = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->id('search-toggle');\n        $el->context($btn_class_a);\n        $el->dataToggle('modal');\n        $el->dataTarget('#modal-quick-search');\n        $el->addClass('border-0 shadow-none');\n        $el->html(\"<span class=\\\"d-none d-xl-inline-block\\\" style='min-width:3.5rem'>{$this->lang->t9n('Search-NOUN')}</span>$search_icon\");\n        $search_toggle = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('filter-outline');\n        $filter_icon = $el->render();\n\n        $el = null;\n\n        $filter_url = '#' . str_replace(['/main', '/browse'], '/filter', IL_PATH_URL);\n\n        if ($collection === 'project') {\n\n            $filter_url = '#project/filter?id=' . $get['id'];\n        }\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->elementName('a');\n        $el->id('filter-toggle');\n        $el->context($btn_class_a);\n        $el->addClass('border-0 shadow-none');\n        $el->href($filter_url);\n        $el->html(\"<span class=\\\"d-none d-xl-inline-block\\\" style='min-width:3.5rem'>{$this->lang->t9n('Filter-NOUN')}</span>$filter_icon\");\n        $filter_toggle = $el->render();\n\n        $el = null;\n\n        // Catalog is not searchable and filterable.\n        if (isset($get['from_id'])) {\n\n            $search_toggle = '';\n            $filter_toggle = '';\n        }\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('briefcase-download-outline');\n        $export_icon = $el->render();\n\n        $el = null;\n\n        // First page URL.\n        unset($sanitized_get['page']);\n        $first_page_q = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->id('open-export');\n        $el->context($btn_class_b);\n        $el->addClass('border-0');\n        $el->dataToggle('modal');\n        $el->dataTarget('#modal-export');\n        $el->attr('data-export-url', IL_BASE_URL . 'index.php/' . IL_PATH_URL . $first_page_q);\n        $el->html(\"<span class=\\\"d-none d-xl-inline\\\">{$this->lang->t9n('Export-NOUN')}</span>$export_icon\");\n        $export_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('wrench-outline');\n        $omnitool_icon = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->id('open-omnitool');\n        $el->context($btn_class_b);\n        $el->addClass('border-0');\n        $el->dataToggle('modal');\n        $el->dataTarget('#modal-omnitool');\n        $el->attr('data-omnitool-url', IL_BASE_URL . 'index.php/' . IL_PATH_URL . $first_page_q);\n        $el->html(\"<span class=\\\"d-none d-xl-inline\\\">{$this->lang->t9n('Omnitool')}</span>$omnitool_icon\");\n        $omnitool_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('monitor');\n        $sort_icon = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->id('open-settings');\n        $el->context($btn_class_b);\n        $el->addClass('border-0');\n        $el->dataToggle('modal');\n        $el->dataTarget('#modal-settings');\n        $el->html(\"<span class=\\\"d-none d-xl-inline\\\">{$this->lang->t9n('Display')}</span>$sort_icon\");\n        $display_button = $el->render();\n\n        $el = null;\n\n        // First page.\n        /** @var Bootstrap\\IconButton $el */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href('#' . IL_PATH_URL . $first_page_q);\n        $el->context($btn_class_b);\n        $el->addClass('border-0');\n        $el->icon('chevron-double-left');\n        $el->html('Go to first page');\n\n        // Disabling.\n        if ($get['page'] === 1) {\n\n            $el->elementName('button');\n            $el->removeAttr('href');\n            $el->disabled('disabled');\n        }\n\n        $first_button = $el->render();\n\n        $el = null;\n\n        // Previous page.\n        $prev_disabled = true;\n        $prev_page = $get['page'] - 1;\n\n        if ($prev_page >= 1) {\n\n            $prev_disabled = false;\n            $sanitized_get['page'] = $prev_page;\n        }\n\n        $prev_page_q = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        /** @var Bootstrap\\IconButton $el */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href('#' . IL_PATH_URL . $prev_page_q);\n        $el->context($btn_class_b);\n        $el->addClass('border-0 navigation-left');\n        $el->icon('chevron-left');\n        $el->html('Go to previous page');\n\n        // Disabling.\n        if ($prev_disabled) {\n\n            $el->elementName('button');\n            $el->removeAttr('href');\n            $el->disabled('disabled');\n        }\n\n        $prev_button = $el->render();\n\n        $el = null;\n\n        unset($sanitized_get['page']);\n\n        // Next page.\n        $next_disabled = true;\n        $next_page = $get['page'] + 1;\n\n        // Enforce max_items.\n        if ($next_page <= ceil($input['total_count'] / $this->app_settings->getUser('page_size'))\n            && $next_page <= ceil($this->app_settings->getGlobal('max_items') / $this->app_settings->getUser('page_size'))) {\n\n            $next_disabled = false;\n            $sanitized_get['page'] = $next_page;\n        }\n\n        $next_page_q = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        /** @var Bootstrap\\IconButton $el */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href('#' . IL_PATH_URL . $next_page_q);\n        $el->context($btn_class_b);\n        $el->addClass('border-0 navigation-right');\n        $el->icon('chevron-right');\n        $el->html('Go to next page');\n\n        // Disabling.\n        if ($next_disabled) {\n\n            $el->elementName('button');\n            $el->removeAttr('href');\n            $el->disabled('disabled');\n        }\n\n        $next_button = $el->render();\n\n        $el = null;\n\n        unset($sanitized_get['page']);\n\n        // Last page.\n        $max_items = min($input['total_count'], $this->app_settings->getGlobal('max_items'));\n        $page_modulus = $max_items % $this->app_settings->getUser('page_size');\n\n        $last_page =  $page_modulus === 0 ?\n            $max_items / $this->app_settings->getUser('page_size') :\n            ceil($max_items / $this->app_settings->getUser('page_size'));\n\n        $sanitized_get['page'] = $last_page;\n\n        $last_page_q = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        /** @var Bootstrap\\IconButton $el */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href('#' . IL_PATH_URL . $last_page_q);\n        $el->context($btn_class_b);\n        $el->addClass('border-0 ');\n        $el->icon('chevron-double-right');\n        $el->html('Go to last page');\n\n        // Disabling.\n        if ((integer) $last_page === (integer) $get['page'] || (integer) $last_page === 0) {\n\n            $el->elementName('button');\n            $el->removeAttr('href');\n            $el->disabled('disabled');\n        }\n\n        $last_button = $el->render();\n\n        $el = null;\n\n        unset($sanitized_get['page']);\n\n        // Toolbar row.\n        $toolbar_class = self::$theme === 'dark' ? 'bg-secondary' : 'bg-darker-5';\n\n        /** @var Bootstrap\\Row $el */\n        $el = $this->di->get('Row');\n\n        $el->id('bottom-row');\n        $el->role('toolbar');\n        $el->addClass('px-3 ' . $toolbar_class);\n        $el->column(\"$search_toggle $filter_toggle $export_button $omnitool_button $display_button\", 'col-sm-auto text-center text-sm-left p-0 my-2');\n        $el->column(\"$first_button $prev_button $next_button $last_button\", 'col-sm text-center text-sm-right p-0 my-2');\n        $bottom_row = $el->render();\n\n        $el = null;\n\n        return $bottom_row;\n    }\n\n    /**\n     * Assemble HTML for title item list.\n     *\n     * @param array $items\n     * @return string\n     * @throws Exception\n     */\n    private function titleList(array $items): string {\n\n        // Theme.\n        $theme_classes = self::$theme === 'light' ? 'bg-white' : 'bg-dark text-white';\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->icon('chevron-down');\n        $el->addClass('mdi-18px text-muted');\n        $chevron = $el->render();\n\n        $el = null;\n\n        $titles = '';\n\n        foreach ($items as $item) {\n\n            $IL_BASE_URL = IL_BASE_URL;\n\n            if ((int) $item['has_pdf'] === 1) {\n\n                // Active search, convert to PDF search.\n                $get = $this->request->getQueryParams();\n                $search = '';\n\n                if (isset($get['search_query'])) {\n\n                    $search = '&search=' . rawurlencode($this->toPdfSearch($get));\n                }\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf?id={$item['id']}\" . $search);\n                $el->addClass('px-2 py-2 border-0');\n                $el->context('primary');\n                $el->html('PDF');\n                $pdf = $el->render();\n\n                $el = null;\n\n                /** @var Bootstrap\\IconButton $el */\n                $el = $this->di->get('IconButton');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf/file?disposition=attachment&id={$item['id']}\");\n                $el->addClass('px-2 py-1 border-0');\n                $el->context('secondary');\n                $el->icon('download');\n                $download = $el->render();\n\n                $el = null;\n\n                $pdf_link = <<<EOT\n                    <div class=\"btn-group-vertical\">\n                        $pdf\n                        $download\n                    </div>\nEOT;\n\n            } else {\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->addClass('px-2 py-2 bg-darker-5 border-0');\n                $el->html('PDF');\n                $el->disabled('disabled');\n                $pdf = $el->render();\n\n                $el = null;\n\n                /** @var Bootstrap\\IconButton $el */\n                $el = $this->di->get('IconButton');\n\n                $el->addClass('px-2 py-1 bg-darker-5 border-0');\n                $el->icon('download');\n                $el->disabled('disabled');\n                $download = $el->render();\n\n                $el = null;\n\n                $pdf_link = <<<EOT\n                    <div class=\"btn-group-vertical\">\n                        $pdf\n                        $download\n                    </div>\nEOT;\n            }\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->type('checkbox');\n            $el->inline(true);\n            $el->label($this->lang->t9n('Clipboard'));\n            $el->name('clipboard');\n            $el->addClass('clipboard mb-3');\n            $el->id('clipboard-' . $item['id']);\n\n            if ($item['in_clipboard'] === '1') {\n\n                $el->attr('checked', 'checked');\n            }\n\n            $check = $el->render();\n\n            $el = null;\n\n            /** @var Element $el */\n            $el = $this->di->get('Element');\n\n            $el->elementName('button');\n            $el->addClass('px-0 py-0 pr-1 mb-3 mr-3 projects-button');\n            $el->dataToggle('collapse');\n            $el->dataTarget(\"#projects-{$item['id']}\");\n            $el->html(\"{$chevron}{$this->lang->t9n('Projects')}\");\n            $button = $el->render();\n\n            $el = null;\n\n            $project_html = empty($item['projects']) ? \"<span class=\\\"text-secondary\\\">{$this->lang->t9n('No projects')}</span>\" : '';\n\n            if (!empty($item['projects'])) {\n\n                foreach ($item['projects'] as $project) {\n\n                    /** @var Bootstrap\\Input $el */\n                    $el = $this->di->get('Input');\n\n                    $el->type('checkbox');\n                    $el->inline(true);\n                    $el->label($project['project']);\n                    $el->name('project');\n                    $el->value($project['project_id']);\n                    $el->addClass('project');\n                    $el->id(\"project-{$item['id']}-{$project['project_id']}\");\n\n                    if ($project['in_project'] === 'Y') {\n\n                        $el->attr('checked', 'checked');\n                    }\n\n                    $project_html .= $el->render();\n\n                    $el = null;\n                }\n            }\n\n            // Authors.\n            $authors = $item['authors'] === [] ? $this->lang->t9n('No authors') : join('<span class=\"ml-0\"> &hellip;</span>', $item['authors']);\n\n            // Publication.\n            $publication = !empty($item['publication_title']) ? \"<i>{$item['publication_title']}</i>\" : $item['reference_type'];\n            $date = !empty($item['publication_date']) ? \"({$item['publication_date']})\" : '';\n\n            // Top HTML structure.\n\n            $titles .= <<<EOT\n                <table data-id=\"{$item['id']}\" class=\"{$theme_classes} item-container mb-2\" style=\"border: 1px solid rgba(0,0,0,0.08);table-layout: fixed;width:100%\">\n                    <tbody>\n                        <tr>\n                            <td class=\"py-3 pl-3\" rowspan=\"2\" style=\"vertical-align: top;width: 4.25em\">\n                                $pdf_link\n                            </td>\n                            <td class=\"pl-1 pt-3 pr-5\" style=\"height: 3.5rem\">\n                                <h5><a href=\"{$IL_BASE_URL}index.php/item#summary?id={$item['id']}\">{$item['title']}</a></h5>\n                                <span class=\"mr-1\">{$authors}</span> <span class=\"mr-1\">{$date}</span> {$publication}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td class=\"pr-5\" style=\"vertical-align: top\">\n                                $button $check\n                                <div class=\"collapse pl-1 mb-2\" id=\"projects-{$item['id']}\">$project_html</div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\nEOT;\n        }\n\n        return \"<div class=\\\"col\\\">$titles</div>\";\n    }\n\n    /**\n     * Display items as a table.\n     *\n     * @param array $items\n     * @return string\n     * @throws Exception\n     */\n    private function tableList(array $items): string {\n\n        $titles = <<<EOT\n            <table class=\"item-container\" style=\"table-layout: fixed;width: 100%;box-shadow: none\">\n                <thead>\n                    <tr>\n                        <th class=\"px-3 py-2\" style=\"width: 3rem\">&nbsp;</th>\n                        <th class=\"px-3 py-2 d-none d-md-table-cell\" style=\"width: 12rem\">Author</th>\n                        <th class=\"px-3 py-2\">Title</th>\n                        <th class=\"px-3 py-2 d-none d-xl-table-cell\" style=\"width: 5rem\">Year</th>\n                        <th class=\"px-3 py-2 d-none d-xl-table-cell\" style=\"width: 20%\">Publication</th>\n                    </tr>\n                </thead>\nEOT;\n\n        foreach ($items as $key => $item) {\n\n            $IL_BASE_URL = IL_BASE_URL;\n\n            if ((int) $item['has_pdf'] === 1) {\n\n                // Active search, convert to PDF search.\n                $get = $this->request->getQueryParams();\n                $search = '';\n\n                if (isset($get['search_query'])) {\n\n                    $search = '&search=' . rawurlencode($this->toPdfSearch($get));\n                }\n\n                /** @var Bootstrap\\Badge $el */\n                $el = $this->di->get('Badge');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf?id={$item['id']}\" . $search);\n                $el->addClass('border border-primary mr-3');\n                $el->context('primary');\n                $el->html('PDF');\n                $pdf_link = $el->render();\n\n                $el = null;\n\n            } else {\n\n                /** @var Bootstrap\\Badge $el */\n                $el = $this->di->get('Badge');\n\n                $el->context('secondary');\n                $el->addClass('border border-secondary mr-3');\n                $el->style('opacity: 0.66');\n                $el->html('PDF');\n                $pdf_link = $el->render();\n\n                $el = null;\n            }\n\n            // Authors.\n            $authors = $item['authors'] === [] ? \"<span class=\\\"text-muted\\\">{$this->lang->t9n('No authors')}</span>\" : $item['authors'][0];\n\n            // Publication.\n            $publication = !empty($item['publication_title']) ? $item['publication_title'] : $item['reference_type'];\n            $date = !empty($item['publication_date']) ? $item['publication_date'] : '';\n\n            // Top HTML structure.\n\n            $row_class = '';\n\n            if ($key % 2 === 0) {\n\n                $row_class = self::$theme === 'dark' ? 'bg-dark' : 'bg-white';\n            }\n\n            $titles .= <<<EOT\n                <tbody class=\"{$row_class}\">\n                    <tr>\n                        <td class=\"px-3 py-3\">{$pdf_link}</td>\n                        <td class=\"px-3 py-3 text-truncate d-none d-md-table-cell\">{$authors}</td>\n                        <td class=\"px-3 py-3 text-truncate\">\n                            <a href=\"{$IL_BASE_URL}index.php/item#summary?id={$item['id']}\">{$item['title']}</a>\n                        </td>\n                        <td class=\"px-3 py-3 text-truncate d-none d-xl-table-cell\">{$date}</td>\n                        <td class=\"px-3 py-3 text-truncate d-none d-xl-table-cell\">{$publication}</td>\n                    </tr>\n                </tbody>\nEOT;\n        }\n\n        $titles .= <<<EOT\n            </table>\nEOT;\n\n        return \"<div class=\\\"col-12\\\">$titles</div>\";\n    }\n\n    /**\n     * Assemble HTML for icon item list.\n     *\n     * @param array $items\n     * @return string\n     * @throws Exception\n     */\n    private function iconList(array $items): string {\n\n        // Card size.\n        if ($this->app_settings->getUser('icons_per_row') === 'auto') {\n\n            $server = $this->request->getServerParams();\n            $screen = $server['HTTP_X_CLIENT_WIDTH'];\n\n            if ($screen >= 1600) {\n\n                $card_size = '3';\n\n            } elseif ($screen >= 1366 && $screen < 1600) {\n\n                $card_size = '4';\n\n            } elseif ($screen >= 768 && $screen < 1366) {\n\n                $card_size = '6';\n\n            } else {\n\n                $card_size = '12';\n            }\n\n        } else {\n\n            switch ($this->app_settings->getUser('icons_per_row')) {\n\n                case 1:\n                    $card_size = '12';\n                    break;\n                case 2:\n                    $card_size = '6';\n                    break;\n                case 3:\n                    $card_size = '4';\n                    break;\n                case 4:\n                    $card_size = '3';\n                    break;\n                default:\n                    $card_size = '3';\n            }\n        }\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->icon('chevron-down');\n        $el->addClass('text-muted');\n        $chevron = $el->render();\n\n        $el = null;\n\n        $output = '';\n        $IL_BASE_URL = IL_BASE_URL;\n\n        foreach ($items as $item) {\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->type('checkbox');\n            $el->inline(true);\n            $el->addClass('clipboard');\n            $el->label($this->lang->t9n('Clipboard'));\n            $el->name('clipboard');\n            $el->id('clipboard-' . $item['id']);\n\n            if ($item['in_clipboard'] === '1') {\n\n                $el->attr('checked', 'checked');\n            }\n\n            $check = $el->render();\n\n            $el = null;\n\n            /** @var Element $el */\n            $el = $this->di->get('Element');\n\n            $el->elementName('button');\n            $el->addClass('px-0 py-0 pr-1 mr-3 projects-button');\n            $el->dataToggle('collapse');\n            $el->dataTarget(\"#projects-{$item['id']}\");\n            $el->html(\"{$chevron}{$this->lang->t9n('Projects')}\");\n            $button = $el->render();\n\n            $el = null;\n\n            $project_html = empty($item['projects']) ? \"<span class=\\\"text-secondary\\\">{$this->lang->t9n('No projects')}</span>\" : '';\n\n            if (!empty($item['projects'])) {\n\n                foreach ($item['projects'] as $project) {\n\n                    /** @var Bootstrap\\Input $el */\n                    $el = $this->di->get('Input');\n\n                    $el->type('checkbox');\n                    $el->inline(true);\n                    $el->label($project['project']);\n                    $el->name('project');\n                    $el->value($project['project_id']);\n                    $el->addClass('project');\n                    $el->id(\"project-{$item['id']}-{$project['project_id']}\");\n\n                    if ($project['in_project'] === 'Y') {\n\n                        $el->attr('checked', 'checked');\n                    }\n\n                    $project_html .= $el->render();\n\n                    $el = null;\n                }\n            }\n\n            // Active search, convert to PDF search.\n            $get = $this->request->getQueryParams();\n            $search = '';\n\n            if (isset($get['search_query'])) {\n\n                $search = '&search=' . rawurlencode($this->toPdfSearch($get));\n            }\n\n            /** @var Bootstrap\\Card $el */\n            $el = $this->di->get('Card');\n\n            $el->addClass(\"item-container h-100\");\n            $el->dataId($item['id']);\n            $el->body(<<<EOT\n                <div style=\"position:relative;padding-top: 62.5%;overflow: hidden\">\n                    <a href=\"{$IL_BASE_URL}index.php/pdf?id={$item['id']}{$search}\" style=\"position:absolute;top:0;left:0;width:100%\">\n                        <img\n                            class=\"img-fluid w-100\"\n                            src=\"{$IL_BASE_URL}index.php/icon?id={$item['id']}\"\n                            alt=\"PDF preview\">\n                    </a>\n                </div>\n                <div class=\"px-3 pt-2 pb-1 border-darker-top\">\n                    <div class=\"d-table\" style=\"table-layout: fixed;width: 100%;\">\n                        <div class=\"d-table-cell align-middle text-truncate\">\n                            <a href=\"{$IL_BASE_URL}index.php/item#summary?id={$item['id']}\">{$item['title']}</a>\n                        </div>\n                    </div>\n                    $button $check\n                    <div class=\"collapse\" id=\"projects-{$item['id']}\">$project_html</div>\n                </div>\n                \nEOT\n            , null, 'p-0');\n            $card = $el->render();\n\n            $el = null;\n\n            $output .= \"<div class=\\\"col-sm-{$card_size} pb-3\\\">$card</div>\";\n        }\n\n        return $output;\n    }\n\n    /**\n     * Assemble HTML for summaries item list.\n     *\n     * @param array $items\n     * @return string\n     * @throws Exception\n     */\n    private function summaryList(array $items): string {\n\n        $this->temporal_obj = $this->di->get('Temporal');\n\n        // Theme.\n        $theme_classes = self::$theme === 'light' ? 'bg-white' : 'bg-dark text-white';\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->icon('chevron-down');\n        $el->addClass('mdi-18px text-muted');\n        $chevron = $el->render();\n\n        $el = null;\n\n        $titles = '';\n\n        foreach ($items as $item) {\n\n            $IL_BASE_URL = IL_BASE_URL;\n\n            if ((int) $item['has_pdf'] === 1) {\n\n                // Active search, convert to PDF search.\n                $get = $this->request->getQueryParams();\n                $search = '';\n\n                if (isset($get['search_query'])) {\n\n                    $search = '&search=' . rawurlencode($this->toPdfSearch($get));\n                }\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf?id={$item['id']}\" . $search);\n                $el->addClass('px-2 py-2 border-0');\n                $el->context('primary');\n                $el->html('PDF');\n                $pdf = $el->render();\n\n                $el = null;\n\n                /** @var Bootstrap\\IconButton $el */\n                $el = $this->di->get('IconButton');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf/file?disposition=attachment&id={$item['id']}\");\n                $el->addClass('px-2 py-1 border-0');\n                $el->context('secondary');\n                $el->icon('download');\n                $download = $el->render();\n\n                $el = null;\n\n                $pdf_link = <<<EOT\n                    <div class=\"btn-group-vertical\">\n                        $pdf\n                        $download\n                    </div>\nEOT;\n\n            } else {\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->addClass('px-2 py-2 bg-darker-5 border-0');\n                $el->html('PDF');\n                $el->disabled('disabled');\n                $pdf = $el->render();\n\n                $el = null;\n\n                /** @var Bootstrap\\IconButton $el */\n                $el = $this->di->get('IconButton');\n\n                $el->addClass('px-2 py-1 bg-darker-5 border-0');\n                $el->icon('download');\n                $el->disabled('disabled');\n                $download = $el->render();\n\n                $el = null;\n\n                $pdf_link = <<<EOT\n                    <div class=\"btn-group-vertical\">\n                        $pdf\n                        $download\n                    </div>\nEOT;\n            }\n\n            $links = $this->sharedLinkList($item);\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->type('checkbox');\n            $el->inline(true);\n            $el->label($this->lang->t9n('Clipboard'));\n            $el->name('clipboard');\n            $el->addClass('clipboard');\n            $el->id('clipboard-' . $item['id']);\n\n            if ($item['in_clipboard'] === '1') {\n\n                $el->attr('checked', 'checked');\n            }\n\n            $check = $el->render();\n\n            $el = null;\n\n            /** @var Element $el */\n            $el = $this->di->get('Element');\n\n            $el->elementName('button');\n            $el->addClass('px-0 py-0 pr-1 mr-3 projects-button');\n            $el->dataToggle('collapse');\n            $el->dataTarget(\"#projects-{$item['id']}\");\n            $el->html(\"{$chevron}{$this->lang->t9n('Projects')}\");\n            $button = $el->render();\n\n            $el = null;\n\n            $project_html = empty($item['projects']) ? \"<span class=\\\"text-secondary\\\">{$this->lang->t9n('No projects')}</span>\" : '';\n\n            if (!empty($item['projects'])) {\n\n                foreach ($item['projects'] as $project) {\n\n                    /** @var Bootstrap\\Input $el */\n                    $el = $this->di->get('Input');\n\n                    $el->type('checkbox');\n                    $el->inline(true);\n                    $el->label($project['project']);\n                    $el->name('project');\n                    $el->value($project['project_id']);\n                    $el->addClass('project');\n                    $el->id(\"project-{$item['id']}-{$project['project_id']}\");\n\n                    if ($project['in_project'] === 'Y') {\n\n                        $el->attr('checked', 'checked');\n                    }\n\n                    $project_html .= $el->render();\n\n                    $el = null;\n                }\n            }\n\n            // Abstract.\n            $abstract = empty($item['abstract']) ? $this->lang->t9n('No abstract') : $item['abstract'];\n\n            // Rich-text notes.\n            $notes_arr = [];\n            $notes_arr[] = $this->sanitation->lmth($item['notes']);\n            $notes_arr[] = join('<br>', $this->sanitation->lmth($item['other_notes']));\n            $notes_arr = array_filter($notes_arr);\n            $notes = empty($notes_arr) ? $this->lang->t9n('No notes') : join('<hr>', $notes_arr);\n\n            // PDF annotations.\n            $pdf_notes_arr = [];\n            $pdf_notes_arr[] = join('<br><br>', $item['pdf_notes']);\n            $pdf_notes_arr[] = join('<br><br>', $item['other_pdf_notes']);\n            $pdf_notes_arr = array_filter($pdf_notes_arr);\n            $pdf_notes = empty($pdf_notes_arr) ? $this->lang->t9n('No notes') : join('<hr>', $pdf_notes_arr);\n\n            // Authors.\n            $authors = $item['authors'] === [] ? $this->lang->t9n('No authors') : join('<span class=\"ml-0\"> &hellip;</span>', $item['authors']);\n\n            // Publication.\n            $publication = !empty($item['publication_title']) ? \"<i>{$item['publication_title']}</i>\" : $item['reference_type'];\n            $date = !empty($item['publication_date']) ? \"({$item['publication_date']})\" : '';\n\n            // Tags.\n            $tags = '';\n\n            foreach ($item['tags'] as $tag_id => $tag) {\n\n                /** @var Bootstrap\\Badge $el */\n                $el = $this->di->get('Button');\n\n                $el->elementName('a');\n                $el->href(\"#items/filter?filter[tag][0]={$tag_id}\");\n                $el->context('outline-primary');\n                $el->componentSize('small');\n                $el->addClass('mr-1 mb-1');\n                $el->html($tag);\n\n                $tags .= $el->render();\n\n                $el = null;\n            }\n\n            $titles .= <<<EOT\n                <table data-id=\"{$item['id']}\" class=\"{$theme_classes} item-container mb-2\" style=\"border: 1px solid rgba(0,0,0,0.08);table-layout: fixed;width:100%\">\n                    <tbody>\n                        <tr>\n                            <td class=\"px-3 pt-3\" style=\"width:4.5em;vertical-align: top\" rowspan=\"5\">\n                                {$pdf_link}\n                            </td>\n                            <td class=\"pt-3 pr-3\">\n                                <h5><a href=\"{$IL_BASE_URL}index.php/item#summary?id={$item['id']}\">{$item['title']}</a></h5>\n                                <span class=\"mr-1\">{$authors}</span> <span class=\"mr-1\">{$date}</span> {$publication}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {$button} {$check}\n                                <div class=\"collapse\" id=\"projects-{$item['id']}\">$project_html</div>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td class=\"pt-0 pr-5\">\n                                <p style=\"text-align:justify;columns: 2 300px;column-gap: 30px;\">{$abstract}</p>\n                                <p>{$tags}</p>\n                                <p>{$links}</p>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td class=\"row pb-4 pr-5\">\n                                <div class=\"col-md-6\">\n                                    <p><span class=\"badge badge-secondary rounded-0\">{$this->lang->t9n('Notes')}</span></p>\n                                    {$notes}\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <p><span class=\"badge badge-secondary rounded-0\">{$this->lang->t9n('PDF notes')}</span></p>\n                                    {$pdf_notes}\n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\nEOT;\n        }\n\n        return \"<div class=\\\"col\\\">$titles</div>\";\n    }\n\n    /**\n     * Assemble HTML for the filter menu.\n     *\n     * @param string $collection\n     * @param array $get\n     * @return string\n     * @throws Exception\n     */\n    private function filterMenu(string $collection, array $get): string {\n\n        $sanitized_get = $this->sanitation->urlquery($get);\n        $sanitized_get = $this->sanitation->html($sanitized_get);\n\n        switch ($collection) {\n\n            case 'library':\n                $controller = 'items';\n                $browse_url = 'items/main';\n                break;\n\n            case 'clipboard':\n                $controller = 'clipboard';\n                $browse_url = 'clipboard/main';\n                break;\n\n            case 'project':\n                $controller = 'project';\n                $browse_url = 'project/browse';\n                break;\n\n            default:\n                $controller = 'items';\n                $browse_url = 'items/main';\n        }\n\n        // We are resetting to page #1.\n        unset($sanitized_get['page']);\n\n        // Add Header. Close filter button.\n        $close_params = isset($sanitized_get['id']) ? '?id=' . $sanitized_get['id'] : '';\n\n        $context = self::$theme === 'dark' ? 'dark' : 'light';\n\n        /** @var Bootstrap\\IconButton $el Close button. */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href(\"#{$browse_url}{$close_params}\");\n        $el->context($context);\n        $el->componentSize('small');\n        $el->addClass('px-1 py-0');\n        $el->icon(\"close\");\n        $close = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\ListGroup $el */\n        $el = $this->di->get('ListGroup');\n\n        $el->id('filter-list');\n        $el->addClass('list-group-flush');\n\n        $el->div(\"<b>Filter</b> {$close}\", 'border-0 d-flex justify-content-between');\n\n        // Query params for src attribute.\n        $get_query = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        // Add filter buttons.\n        $action_to_name = [\n            'tags' => $this->lang->t9n('Tag'),\n            'authors' => $this->lang->t9n('Author'),\n            'editors' => $this->lang->t9n('Editor'),\n            'addedtime' => $this->lang->t9n('Added date'),\n            'primarytitles' => $this->lang->t9n('Primary title'),\n            'secondarytitles' => $this->lang->t9n('Secondary title'),\n            'tertiarytitles' => $this->lang->t9n('Tertiary title'),\n            'publicationtype' => $this->lang->t9n('Publication type'),\n            'keywords' => $this->lang->t9n('Keyword'),\n            'custom1' =>  $this->lang->t9n($this->app_settings->getGlobal('custom1')),\n            'custom2' =>  $this->lang->t9n($this->app_settings->getGlobal('custom2')),\n            'custom3' =>  $this->lang->t9n($this->app_settings->getGlobal('custom3')),\n            'custom4' =>  $this->lang->t9n($this->app_settings->getGlobal('custom4')),\n            'custom5' =>  $this->lang->t9n($this->app_settings->getGlobal('custom5')),\n            'custom6' =>  $this->lang->t9n($this->app_settings->getGlobal('custom6')),\n            'custom7' =>  $this->lang->t9n($this->app_settings->getGlobal('custom7')),\n            'custom8' =>  $this->lang->t9n($this->app_settings->getGlobal('custom8'))\n        ];\n\n        // Limit to 3 tags.\n        if (isset($get['filter']['tag']) && count($get['filter']['tag']) >= 3) {\n\n            unset($action_to_name['tags']);\n        }\n\n        $IL_BASE_URL = IL_BASE_URL;\n        $classes = 'list-group-item-action border-0';\n\n        foreach ($action_to_name as $action => $name) {\n\n            $filter_class = in_array($action, ['tags', 'addedtime', 'publicationtype']) === true  ? ' open-filter-local' : ' open-filter-remote';\n\n            $el->button($name, $classes . $filter_class, \"data-title=\\\"$name\\\" data-src=\\\"{$IL_BASE_URL}index.php/{$controller}/{$action}{$get_query}\\\"\");\n        }\n\n        if ($collection === 'library') {\n\n            $name = $this->lang->t9n('Miscellaneous');\n\n            $el->button($name, $classes . ' open-filter-local', \"data-title=\\\"{$name}\\\" data-src=\\\"{$IL_BASE_URL}index.php/items/misc{$get_query}\\\"\");\n        }\n\n        $list = $el->render();\n\n        $el = null;\n\n        return $list;\n    }\n\n    /**\n     * Export to Bibtex, Citations, Endnote, RIS.\n     *\n     * @param array $items\n     * @param string $format\n     * @param string $disposition\n     * @param string|null $style\n     * @return string\n     * @throws Exception\n     */\n    public function export(array $items, string $format, string $disposition = 'inline', string $style = ''): string {\n\n        switch ($format) {\n\n            case 'bibtex':\n                /** @var Bibtex $formatter */\n                $formatter = $this->di->get('BibtexExport');\n                $output = $formatter->format($items['items']);\n                $this->append($output);\n                $filename = 'export.bib';\n                $this->contentType('text');\n                $this->setDisposition($disposition, $filename);\n                break;\n\n            case 'bibtexabs':\n                /** @var Bibtex $formatter */\n                $formatter = $this->di->get('BibtexExport');\n                $output = $formatter->format($items['items'], true);\n                $this->append($output);\n                $filename = 'export.bib';\n                $this->contentType('text');\n                $this->setDisposition($disposition, $filename);\n                break;\n\n            case 'citation':\n                $this->citationList($items['items'], $style);\n                $filename = 'export.html';\n                $this->contentType('html');\n                $this->setDisposition('inline', $filename);\n                break;\n\n            case 'endnote':\n                /** @var Endnote $formatter */\n                $formatter = $this->di->get('EndnoteExport');\n                $output = $formatter->format($items['items']);\n                $this->append($output);\n                $filename = 'export.txt';\n                $this->contentType('text');\n                $this->setDisposition($disposition, $filename);\n                break;\n\n            case 'ris':\n                /** @var Ris $formatter */\n                $formatter = $this->di->get('RisExport');\n                $output = $formatter->format($items['items']);\n                $this->append($output);\n                $filename = 'export.ris';\n                $this->contentType('text');\n                $this->setDisposition($disposition, $filename);\n                break;\n\n            default:\n                throw new Exception('export format not recognized');\n        }\n\n        return $this->send();\n    }\n\n    /**\n     * Citation list for export.\n     *\n     * @param array $items\n     * @param string $style\n     * @throws Exception\n     */\n    private function citationList(array $items, string $style): void {\n\n        $this->item_meta = $this->di->getShared('ItemMeta');\n\n        $items = $this->sanitation->stripLow($items);\n        $style = $this->sanitation->lmth($style);\n\n        $csl_items = [];\n\n        foreach ($items as $item) {\n\n            $authors = [];\n            $editors = [];\n\n            if (isset($item[ItemMeta::COLUMN['AUTHOR_LAST_NAME']])) {\n\n                foreach ($item[ItemMeta::COLUMN['AUTHOR_LAST_NAME']] as $key => $last_name) {\n\n                    $authors[$key]['family'] = $last_name;\n\n                    if (!empty($item[ItemMeta::COLUMN['AUTHOR_FIRST_NAME']][$key])) {\n\n                        $authors[$key]['given'] = $item[ItemMeta::COLUMN['AUTHOR_FIRST_NAME']][$key];\n                    }\n                }\n            }\n\n            if (isset($item[ItemMeta::COLUMN['EDITOR_LAST_NAME']])) {\n\n                foreach ($item[ItemMeta::COLUMN['EDITOR_LAST_NAME']] as $key => $last_name) {\n\n                    $editors[$key]['family'] = $last_name;\n\n                    if (!empty($item[ItemMeta::COLUMN['EDITOR_FIRST_NAME']][$key])) {\n\n                        $editors[$key]['given'] = $item[ItemMeta::COLUMN['EDITOR_FIRST_NAME']][$key];\n                    }\n                }\n            }\n\n            $doi = null;\n            $doi_key = array_search('DOI', $item[ItemMeta::COLUMN['UID_TYPES']]);\n\n            if ($doi_key !== false) {\n\n                $doi = $item[ItemMeta::COLUMN['UIDS']][$doi_key];\n            }\n\n            $csl_items[] = [\n                \"id\" => $item[ItemMeta::COLUMN['BIBTEX_ID']],\n                \"type\" => $this->item_meta->convert($item[ItemMeta::COLUMN['REFERENCE_TYPE']], 'il', 'csl'),\n                \"title\" => $item[ItemMeta::COLUMN['TITLE']],\n                \"container-title\" => $item[ItemMeta::COLUMN['SECONDARY_TITLE']],\n                \"collection-title\" => $item[ItemMeta::COLUMN['TERTIARY_TITLE']],\n                \"page\" => $item[ItemMeta::COLUMN['PAGES']],\n                \"volume\" => $item[ItemMeta::COLUMN['VOLUME']],\n                \"issue\" => $item[ItemMeta::COLUMN['ISSUE']],\n                \"DOI\" => $doi,\n                \"journalAbbreviation\" => $item[ItemMeta::COLUMN['PRIMARY_TITLE']],\n                \"author\" => $authors,\n                \"editor\" => $editors,\n                \"issued\" => [\n                    'date-parts' => [\n                        [\n                            (int) substr($item[ItemMeta::COLUMN['PUBLICATION_DATE']] ?? '', 0, 4),\n                            (int) substr($item[ItemMeta::COLUMN['PUBLICATION_DATE']] ?? '', 5, 2),\n                            (int) substr($item[ItemMeta::COLUMN['PUBLICATION_DATE']] ?? '', 8, 2),\n                        ]\n                    ]\n                ],\n                \"publisher\" => $item[ItemMeta::COLUMN['PUBLISHER']],\n                \"publisher-place\" => $item[ItemMeta::COLUMN['PLACE_PUBLISHED']]\n            ];\n        }\n\n        $items_json = Utils::jsonEncode($csl_items, JSON_INVALID_UTF8_SUBSTITUTE);\n        $items_json = str_replace(['\\r', '\\n', '\\r\\n'], ' ', $items_json);\n        $items_json = str_replace('\\\\', '\\\\\\\\', $items_json);\n        $items_json = str_replace('\"', '\\\\\"', $items_json);\n        $style = str_replace([\"\\r\", \"\\n\", \"\\r\\n\"], ' ', $style);\n        $style = str_replace('\"', '\\\\\"', $style);\n\n        $this->style = <<<'STYLE'\ntable {\n    margin:0.75in 1in;\n    border-spacing:0;\n}\ntd {\n    font-family: serif;\n    font-size: 12pt;\n    padding:0;\n    padding-bottom:1em;\n    vertical-align: top;\n    line-height: 1.8em\n}\n.td-csl-left {\n    width: 5em\n}\nSTYLE;\n\n        $this->styleLink('css/plugins.css');\n\n        $this->head();\n\n        $this->append('<table><tbody></tbody></table>');\n\n        $this->scriptLink('js/plugins.min.js');\n        $this->scriptLink('js/citeproc/citeproc.js');\n\n        $this->script = <<<SCRIPT\n// List of citations in JSON format.\nlet items = \"{$items_json}\";\nlet citations = JSON.parse(items);\n// Extract all citation keys.\nlet itemIDs = _.map(citations, 'id');\n// User-selected style.\nlet style = \"{$style}\";\n// Citeproc init options.\nciteprocSys = {\n    retrieveLocale: function (lang) {\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', window.IL_BASE_URL + 'js/citeproc/locales/locales-' + lang + '.xml', false);\n        xhr.send(null);\n        return xhr.responseText;\n    },\n    retrieveItem: function (id) {\n        return _.filter(citations, _.matches({ 'id': id }))[0];\n    }\n};\n// Render citations.\nlet citeproc = new CSL.Engine(citeprocSys, style);\nciteproc.updateItems(itemIDs);\nlet bibResult = citeproc.makeBibliography();\nif (typeof bibResult === 'object') {\n    // Load citations into the table.\n    $.each(bibResult[1], function (key, val) {\n        // Two columns vs one column layout.\n        if ($(val).children(\"div\").length === 2) {\n            $('tbody').append('<tr><td class=\"td-csl-left\" valign=\"top\" width=\"80\">'\n                + $(val).children(\"div\").eq(0).html() + '</td><td valign=\"top\">'\n                + $(val).children(\"div\").eq(1).html() + '</td></tr>');\n        } else if ($(val).children(\"div\").length === 0) {\n            $('tbody').append('<tr><td valign=\"top\">' + $(val).html() + '</td></tr>');\n        }\n    });\n    // Final CSS formatting.\n    $('td').css('line-height', 1.2 * bibResult[0]['linespacing'] + 'em')\n        .css('padding-bottom', bibResult[0]['entryspacing'] + 'em');\n    $('.td-csl-left').css('width', bibResult[0]['maxoffset'] + 'em')\n        .attr('width', 16 * bibResult[0]['maxoffset']);\n}\nSCRIPT;\n\n        $this->end();\n    }\n\n    /**\n     * Catalog cards.\n     *\n     * @param $count\n     * @return string\n     * @throws Exception\n     */\n    public function catalog($count) {\n\n        $this->title($this->lang->t9n('Catalog'));\n        $this->head();\n\n        /** @var Bootstrap\\Breadcrumb $el */\n        $el = $this->di->get('Breadcrumb');\n\n        $el->style('margin: 0 -15px');\n        $el->addClass('bg-transparent');\n        $el->item('IL', IL_BASE_URL . 'index.php/#dashboard/main');\n        $el->item($this->lang->t9n('Catalog'));\n        $bc = $el->render();\n\n        $el = null;\n\n        if ((int) $count['max_id'] === 0) {\n\n            $this->append(['html' => \"$bc\"]);\n\n            return $this->send();\n        }\n\n        $range  = $this->app_settings->getGlobal('max_items');\n        $starts = $range >= $count['max_id'] ? [0 => 1] : range(1, $count['max_id'], $range);\n\n        // Higher to lower.\n        rsort($starts);\n\n        /** @var Bootstrap\\Row $el */\n        $el = $this->di->get('Row');\n\n        foreach ($starts as $value) {\n\n            $end = min($value + $range - 1, $count['max_id']);\n            $val_formatted = $this->scalar_utils->formatNumber((int) $value);\n            $end_formatted = $this->scalar_utils->formatNumber((int) $end);\n            $link = '#items/catalog?from_id=';\n\n            /** @var Bootstrap\\Card $el */\n            $crd = $this->di->get('Card');\n\n            $crd->body(\"<a href=\\\"$link{$value}\\\">{$this->lang->t9n('Items')}<br> {$val_formatted} - {$end_formatted}</a>\", null, 'py-4');\n            $el->column($crd->render(), 'col-xl-3 col-lg-4 col-md-6 mb-3 text-center');\n\n            $crd = null;\n        }\n\n        $row = $el->render();\n\n        $el = null;\n\n        $this->append(['html' => \"$bc $row\"]);\n\n        return $this->send();\n    }\n\n    /**\n     * Export window form.\n     *\n     * @param bool $single\n     * @return string\n     * @throws Exception\n     */\n    public function exportForm($single = false): string {\n\n        $inputs = \"<div class=\\\"mb-2\\\"><b>{$this->lang->t9n('Format-NOUN')}</b></div>\";\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio3');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('bibtex');\n        $el->checked('checked');\n        $el->label('B<span style=\"font-size: 0.85rem\">IB</span>T<div class=\"d-inline-block\" style=\"transform: translateY(2px)\">E</div>X');\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio3-2');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('bibtexabs');\n        $el->checked('checked');\n        $el->label('B<span style=\"font-size: 0.85rem\">IB</span>T<div class=\"d-inline-block\" style=\"transform: translateY(2px)\">E</div>X + ' . $this->lang->t9n('abstracts'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio1');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('endnote');\n        $el->label('Endnote');\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio2');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('ris');\n        $el->label('RIS');\n        $inputs .= $el->render();\n\n        $el = null;\n\n        if ($single === false) {\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->id('export-radio4');\n            $el->type('radio');\n            $el->name('export');\n            $el->value('zip');\n            $el->label(\"{$this->lang->t9n('offline app')} <span class=\\\"text-secondary\\\">({$this->lang->t9n('up to 500 MB')})</span>\");\n            $inputs .= $el->render();\n\n            $el = null;\n        }\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio5');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('citation');\n        $el->label($this->lang->t9n('citation style'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Typeahead $el */\n        $el = $this->di->get('Typeahead');\n\n        $el->id('export-styles');\n        $el->name('style');\n        $el->attr('data-source', IL_BASE_URL . 'index.php/filter/citation');\n        $el->attr('data-minLength', '1');\n        $el->placeholder($this->lang->t9n('Search styles'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        $inputs .= \"<div class=\\\"mt-3 mb-2\\\"><b>{$this->lang->t9n('Output options')}</b></div>\";\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio6');\n        $el->type('radio');\n        $el->name('disposition');\n        $el->value('inline');\n        $el->checked('checked');\n        $el->label($this->lang->t9n('display in browser'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio7');\n        $el->type('radio');\n        $el->name('disposition');\n        $el->value('attachment');\n        $el->label($this->lang->t9n('download file'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Form $el */\n        $el = $this->di->get('Form');\n\n        $el->id('export-form');\n        $el->method('GET');\n        $el->target('_blank');\n        $el->action(IL_BASE_URL . 'index.php/items/export');\n        $el->html($inputs);\n        $form = $el->render();\n\n        $el = null;\n\n        $this->append(['html' => $form]);\n\n        return $this->send();\n    }\n\n    /**\n     * Omnitool form.\n     *\n     * @param array $projects\n     * @param array $tags\n     * @return string\n     * @throws Exception\n     */\n    public function omnitoolForm(array $projects, array $tags): string {\n\n        /** @var Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->icon('chevron-down');\n        $arrow = $el->render();\n\n        $el = null;\n\n        $inputs = \"<div class=\\\"mb-2\\\"><b>{$this->lang->t9n('Clipboard')}</b></div>\";\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio1');\n        $el->type('radio');\n        $el->name('omnitool[clipboard]');\n        $el->value('add');\n        $el->label($this->lang->t9n('add'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio2');\n        $el->type('radio');\n        $el->name('omnitool[clipboard]');\n        $el->value('remove');\n        $el->label($this->lang->t9n('remove'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio3');\n        $el->type('radio');\n        $el->name('omnitool[clipboard]');\n        $el->value('');\n        $el->checked('checked');\n        $el->label($this->lang->t9n('no action'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Select $el */\n        $el = $this->di->get('Select');\n\n        $el->id('omnitool-select-project');\n        $el->groupClass('mt-3');\n        $el->name('omnitool[project_id]');\n\n        foreach ($projects as $project) {\n\n            $el->option($project['project'], $project['id']);\n        }\n\n        $el->label($this->lang->t9n('Project'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio4');\n        $el->type('radio');\n        $el->name('omnitool[project]');\n        $el->value('add');\n        $el->label($this->lang->t9n('add'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio5');\n        $el->type('radio');\n        $el->name('omnitool[project]');\n        $el->value('remove');\n        $el->label($this->lang->t9n('remove'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio6');\n        $el->type('radio');\n        $el->name('omnitool[project]');\n        $el->value('');\n        $el->checked('checked');\n        $el->label($this->lang->t9n('no action'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        $inputs .= \"<div class=\\\"mt-3 mb-2 cursor-pointer\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#omnitool-tags\\\">$arrow<b>{$this->lang->t9n('Tags')}</b></div>\";\n\n        // Filter input.\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('tag-filter-omnitool');\n        $el->name('tag_filter');\n        $el->placeholder($this->lang->t9n('Filter-VERB'));\n        $el->ariaLabel($this->lang->t9n('Filter-VERB'));\n        $el->attr('data-targets', '#omnitool-tags .label-text');\n        $tag_checkboxes = $el->render();\n\n        $el = null;\n\n        // Tags.\n        $first_letter = '';\n        $i = 0;\n\n        $tag_checkboxes .= '<table class=\"tag-table\"><tr><td style=\"width:2.25rem\"></td><td>';\n\n        foreach ($tags as $tag_id => $tag) {\n\n            $first_letter2 = mb_strtoupper($this->scalar_utils->deaccent($tag[0] === '' ? '' : mb_substr($tag, 0, 1, 'UTF-8')), 'UTF-8');\n\n            if ($first_letter2 !== $first_letter) {\n\n                $tag_checkboxes .= '</td></tr><tr>';\n\n                /** @var Bootstrap\\Badge $el */\n                $el = $this->di->get('Badge');\n\n                $el->context('warning');\n                $el->addClass('d-inline-block mr-2 mb-2');\n                $el->style('width: 1.33rem');\n                $el->html($first_letter2);\n                $tag_checkboxes .= '<td>' . $el->render() . '</td><td>';\n\n                $el = null;\n\n                $first_letter = $first_letter2;\n            }\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->id('omnitool-checkbox-tags-' . $i);\n            $el->type('checkbox');\n            $el->name(\"omnitool[tags][$i]\");\n            $el->value($tag_id);\n            $el->label($tag);\n            $el->inline(true);\n\n            $tag_checkboxes .= $el->render();\n\n            $el = null;\n\n            $i++;\n        }\n\n        $tag_checkboxes .= '</td></tr></table>';\n\n        /** @var Bootstrap\\Card $el */\n        $el = $this->di->get('Element');\n\n        $el->id('omnitool-tags');\n        $el->addClass('mb-3 collapse');\n        $el->html($tag_checkboxes);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio7');\n        $el->type('radio');\n        $el->name('omnitool[tag]');\n        $el->value('add');\n        $el->label($this->lang->t9n('add'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio8');\n        $el->type('radio');\n        $el->name('omnitool[tag]');\n        $el->value('remove');\n        $el->label($this->lang->t9n('remove'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio9');\n        $el->type('radio');\n        $el->name('omnitool[tag]');\n        $el->value('');\n        $el->checked('checked');\n        $el->label($this->lang->t9n('no action'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        // Only admins, and users can delete.\n        if ($this->session->data('permissions') === 'A' || $this->session->data('permissions') === 'U') {\n\n            $inputs .= \"<div class=\\\"mt-3 mb-2 cursor-pointer text-danger\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#delete-all\\\">$arrow<b>{$this->lang->t9n('Delete all')}</b></div>\";\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->id('omnitool-checkbox1');\n            $el->type('checkbox');\n            $el->name('omnitool[delete]');\n            $el->value('1');\n            $el->label($this->lang->t9n('permanently delete all items'));\n            $inputs .= '<div class=\"collapse\" id=\"delete-all\">' . $el->render() . '</div>';\n\n            $el = null;\n\n        }\n\n        /** @var Bootstrap\\Form $el */\n        $el = $this->di->get('Form');\n\n        $el->method('GET');\n        $el->target('_blank');\n        $el->action(IL_BASE_URL . 'index.php/items/main');\n        $el->html($inputs);\n        $form = $el->render();\n\n        $el = null;\n\n        $this->append(['html' => $form]);\n\n        return $this->send();\n    }\n\n    /**\n     * Generate internal search name.\n     *\n     * @param array $get\n     * @return string\n     * @throws Exception\n     */\n    public function searchName(array $get): string {\n\n        $search_name = '';\n\n        // Search tags.\n        if (isset($get['search_type'])) {\n\n            // Custom customN names.\n            for ($i = 1; $i <= 8; $i++) {\n\n                $this->type_to_readable[\"C{$i}\"] = $this->lang->t9n($this->app_settings->getGlobal(\"custom{$i}\"));\n            }\n\n            foreach ($get['search_type'] as $i => $type) {\n\n                if ($get['search_query'][$i] === '') {\n\n                    continue;\n                }\n\n                $search_name .= \" {$this->type_to_readable[$type]}: {$get['search_query'][$i]}\";\n            }\n        }\n\n        return $search_name;\n    }\n\n    /**\n     * Convert search array parameters to a PDF string search.\n     *\n     * @param array $get\n     * @return string\n     */\n    private function toPdfSearch(array $get): string {\n\n        $search = '';\n\n        // Get the first valid search query.\n        foreach ($get['search_query'] as $key => $query) {\n\n            if (empty($query) || $get['search_type'][$key] === 'itemid') {\n\n                continue;\n            }\n\n            // Remove wildcards.\n            $search = trim(str_replace('*', '', $query));\n\n            // Get only first token, if query is not a phrase.\n            if ($get['search_boolean'][$key] !== 'PHRASE') {\n\n                $query_tokens = explode(' ', $query);\n                $search = $query_tokens[0] ?? '';\n            }\n\n            if (empty($search)) {\n\n                continue;\n            }\n\n            break;\n        }\n\n        return $search;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace LibrarianApp;\n\nuse Exception;\nuse Librarian\\Container\\DependencyInjector;\nuse Librarian\\Export\\Bibtex;\nuse Librarian\\Export\\Endnote;\nuse Librarian\\Export\\Ris;\nuse Librarian\\Html\\Bootstrap;\nuse Librarian\\Html\\Bootstrap\\Icon;\nuse Librarian\\Html\\Element;\nuse GuzzleHttp\\Utils;\nuse Librarian\\ItemMeta;\nuse Librarian\\Media\\Temporal;\nuse Librarian\\Mvc\\TextView;\n\nclass ItemsView extends TextView {\n\n    use SharedHtmlView;\n\n    /**\n     * @var Temporal\n     */\n    private $temporal_obj;\n\n    /**\n     * @var ItemMeta\n     */\n    private $item_meta;\n\n    /**\n     * @var array Search type to human readable.\n     */\n    private $type_to_readable;\n\n    public function __construct(DependencyInjector $di) {\n\n        parent::__construct($di);\n\n        $this->type_to_readable = [\n            'anywhere'  => \"{$this->lang->t9n('Metadata')} {$this->lang->t9n('and')} {$this->lang->t9n('PDF')}\",\n            'metadata'  => $this->lang->t9n('Metadata'),\n            'FT'        => $this->lang->t9n('PDF'),\n            'pdfnotes'  => $this->lang->t9n('PDF notes'),\n            'itemnotes' => $this->lang->t9n('Notes'),\n            'itemid'    => $this->lang->t9n('Item') . ' ID',\n            'TI'        => $this->lang->t9n('Title'),\n            'AB'        => \"{$this->lang->t9n('Title')} {$this->lang->t9n('or')} {$this->lang->t9n('Abstract')}\",\n            'AU'        => \"{$this->lang->t9n('Author')} {$this->lang->t9n('or')} {$this->lang->t9n('Editor')}\",\n            'AF'        => $this->lang->t9n('Affiliation'),\n            'T1'        => $this->lang->t9n('Primary title'),\n            'T2'        => $this->lang->t9n('Secondary title'),\n            'T3'        => $this->lang->t9n('Tertiary title'),\n            'KW'        => $this->lang->t9n('Keyword'),\n            'YR'        => $this->lang->t9n('Year')\n        ];\n    }\n\n    /**\n     * Assemble item browsing page and send it.\n     *\n     * @param string $collection Specify library, clipboard.\n     * @param array $get GET super global array.\n     * @param array $input [array items, integer total_count, array tags]\n     * @param bool $filter_menu\n     * @return string\n     * @throws Exception\n     */\n    public function page(string $collection, array $get, array $input, bool $filter_menu = false): string {\n\n        // Page.\n        $page = isset($get['page']) ? $get['page'] : 1;\n\n        // Page title.\n        switch ($collection) {\n\n            case 'clipboard':\n                $title = \"{$this->lang->t9n('Page')} {$page} - {$this->lang->t9n('Clipboard')}\";\n                break;\n\n            case 'project':\n                $title = \"{$this->lang->t9n('Page')} {$page} - {$this->lang->t9n('Project')} - {$input['project']}\";\n                break;\n\n            case 'catalog':\n                $title = \"{$this->lang->t9n('Page')} {$page} - {$this->lang->t9n('Catalog')}\";\n                break;\n\n            default:\n                $title = \"{$this->lang->t9n('Page')} {$page} - {$this->lang->t9n('Library')}\";\n                break;\n        }\n\n        $this->title($title);\n\n        $this->head();\n\n        // Page top.\n        $page_top = $this->pageTop($collection, $get, $input);\n\n        // Item list.\n        switch ($this->app_settings->getUser('display_type')) {\n\n            case 'title':\n                $items = $this->titleList($input['items']);\n                break;\n\n            case 'icon':\n                $items = $this->iconList($input['items']);\n                break;\n\n            case 'summary':\n                $items = $this->summaryList($input['items']);\n                break;\n\n            case 'table':\n                $items = $this->tableList($input['items']);\n                break;\n\n            default:\n                $items = $this->titleList($input['items']);\n        }\n\n        // Top row contains the breadcrumb and the item list. It is scrollable.\n\n        /** @var Bootstrap\\Row $el */\n        $el = $this->di->get('Row');\n\n        $el->id('top-row');\n        $el->style('overflow: auto');\n        $el->addClass(\"d-flex align-content-start\");\n        $el->column($page_top, 'col-12');\n        $el->append($items);\n        $top_row = $el->render();\n\n        $el = null;\n\n        // Toolbar.\n        $page_bottom = $this->pageBottom($collection, $get, $input);\n\n        $page_rows = \"$top_row $page_bottom\";\n\n        // Add filter menu.\n        if ($filter_menu === true) {\n\n            $filter = $this->filterMenu($collection, $get);\n\n            $left_class = self::$theme === 'dark' ? 'bg-dark' : 'bg-white';\n\n            /** @var Bootstrap\\Row $el */\n            $el = $this->di->get('Row');\n\n            $el->column($filter, 'col-lg-auto p-0 ' . $left_class);\n            $el->column($page_rows, 'col-lg items-container');\n            $page_rows = $el->render();\n\n            $el = null;\n        }\n\n        // Modals.\n\n        switch ($collection) {\n\n            case 'clipboard':\n                $action = '#clipboard/main';\n                break;\n\n            case 'project':\n                $action = '#project/browse?id=' . $get['id'];\n                break;\n\n            default:\n                $action = '#items/main';\n        }\n\n        $modal_header = $collection === 'catalog' ? 'library' : $collection;\n\n        // Quick search modal.\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->context('link');\n        $el->addClass('pr-0');\n        $el->attr('data-dismiss', 'modal');\n        $el->attr('data-toggle', 'modal');\n        $el->dataTarget('#modal-searches');\n        $el->html($this->lang->t9n('Previous searches'));\n        $searches_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->context('link');\n        $el->attr('data-dismiss', 'modal');\n        $el->attr('data-toggle', 'modal');\n        $el->dataTarget('#modal-advanced-search');\n        $el->html($this->lang->t9n('Advanced search'));\n        $advanced_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Modal $el */\n        $el = $this->di->get('Modal');\n\n        $el->id('modal-quick-search');\n        $el->header($this->lang->t9n('Search ' . $modal_header));\n        $el->button($searches_button);\n        $el->button($advanced_button);\n        $el->body($this->sharedQuickSearch($action), 'bg-darker-5');\n        $quick_search = $el->render();\n\n        $el = null;\n\n        // Advanced search.\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->context('link');\n        $el->attr('data-dismiss', 'modal');\n        $el->attr('data-toggle', 'modal');\n        $el->dataTarget('#modal-quick-search');\n        $el->html($this->lang->t9n('Quick search'));\n        $button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->addClass('search-submit');\n        $el->context('primary');\n        $el->html($this->lang->t9n('Search-VERB'));\n        $search_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Modal $el */\n        $el = $this->di->get('Modal');\n\n        $el->id('modal-advanced-search');\n        $el->header('Search ' . $modal_header);\n        $el->button($searches_button);\n        $el->button($button);\n        $el->button($search_button);\n        $el->body($this->sharedAdvancedSearch($input['tags'] ?? [], $action), 'bg-darker-5');\n        $el->componentSize('large');\n        $advanced_search = $el->render();\n\n        $el = null;\n\n        $html = \"$page_rows $quick_search $advanced_search\";\n\n        // ID list.\n        $id_list = [];\n\n        foreach ($input['items'] as $item) {\n\n            $id_list[] = [\n                'id'    => $item['id'],\n                'title' => trim(mb_substr($item['title'], 0, 75)) . (mb_strlen($item['title']) > 75 ? '&hellip;' : '')\n            ];\n        }\n\n        $this->append([\n            'html'    => $html,\n            'id_list' => $id_list\n        ]);\n\n        return $this->send();\n    }\n\n    /**\n     * Assemble item page containing filter column and send it.\n     *\n     * @param string $collection Specify library, clipboard.\n     * @param array $get\n     * @param array $input [array $filters, array items, integer total_count]\n     * @return string\n     * @throws Exception\n     */\n    public function filteredPage(string $collection, array $get, array $input): string {\n\n        return $this->page($collection, $get, $input, true);\n    }\n\n    /**\n     * Top row for all pages.\n     *\n     * @param string $collection\n     * @param array $get\n     * @param array $input\n     * @return string\n     * @throws Exception\n     */\n    private function pageTop(string $collection, array $get, array $input): string {\n\n        // Breadcrumbs.\n\n        switch ($collection) {\n\n            case 'clipboard':\n                $bc_title = $this->lang->t9n('Clipboard');\n                break;\n\n            case 'project':\n                $bc_title = $input['project'];\n                break;\n\n            case 'catalog':\n                $bc_title = \"{$this->lang->t9n('Items')} {$get['from_id']} - \" .\n                    ($this->scalar_utils->formatNumber(-1 + $get['from_id'] + $this->app_settings->getGlobal('max_items')));\n                break;\n\n            default:\n                $bc_title = $this->lang->t9n('Library');\n        }\n\n        /** @var Bootstrap\\Breadcrumb $el */\n        $el = $this->di->get('Breadcrumb');\n\n        $el->style('margin: 0 -15px');\n        $el->addClass('bg-transparent');\n        $el->item('IL', IL_BASE_URL . 'index.php/#dashboard/main');\n\n        if ($collection === 'project') {\n\n            $el->item($this->lang->t9n('Projects'), IL_BASE_URL . 'index.php/#projects/main');\n        }\n\n        if ($collection === 'catalog') {\n\n            $el->item($this->lang->t9n('Catalog'), IL_BASE_URL . 'index.php/#items/catalog');\n        }\n\n        $el->item(\"{$bc_title}\");\n        $bc = $el->render();\n\n        $el = null;\n\n        // Item count.\n\n        if (empty($input['total_count'])) {\n\n            $item_count = \"<div class=\\\"text-muted w-100 pb-3 pb-lg-0\\\">{$this->lang->t9n('No items')}</div>\";\n\n        } else {\n\n            /*\n             * \"From\" item number = page number * page size + 1. We need to subtract 1 from the page number.\n             *  E.g., page 2 -> Item (10 + 1).\n             */\n            $from = ($get['page'] - 1) * $this->app_settings->getUser('page_size') + 1;\n            $from = $this->scalar_utils->formatNumber((int) $from);\n\n            // \"To\" item number = page number * page size. Max. is the total item number.\n            $last = min($get['page'] * $this->app_settings->getUser('page_size'), $input['total_count']);\n            $last = $this->scalar_utils->formatNumber((int) $last);\n\n            // Total count.\n            $total_count = $this->scalar_utils->formatNumber((int) $input['total_count']);\n\n            // Put together the item counter.\n            $item_count = '<div class=\"text-muted w-100 pb-3 pb-lg-0\">' .\n                sprintf($this->lang->t9n('Items %s of %s'), $from . ' - ' . $last, $total_count) . '</div>';\n        }\n\n        $tags_html = '';\n\n        // Search tags.\n        if (isset($get['search_type'])) {\n\n            for ($i = 1; $i <= 8; $i++) {\n\n                $this->type_to_readable[\"C{$i}\"] = $this->app_settings->getGlobal(\"custom{$i}\");\n            }\n\n            foreach ($get['search_type'] as $i => $type) {\n\n                if ($get['search_query'][$i] === '') {\n\n                    continue;\n                }\n\n                $get_search_query = $this->sanitation->html($get['search_query'][$i]);\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->context(\"dark\");\n                $el->componentSize(\"small\");\n                $el->addClass(\"d-inline-block mr-1 mb-2 rounded-0\");\n                $el->html(\"<b>{$this->type_to_readable[$type]}</b> &mdash; {$get_search_query}\");\n                $tags_html .= $el->render();\n\n                $el = null;\n            }\n        }\n\n        // Filter tags.\n        $facet_fields = [\n            'added_time'       => $this->lang->t9n('Added date'),\n            'author'           => $this->lang->t9n('Author'),\n            'custom1'          => $this->lang->t9n($this->app_settings->getGlobal('custom1')),\n            'custom2'          => $this->lang->t9n($this->app_settings->getGlobal('custom2')),\n            'custom3'          => $this->lang->t9n($this->app_settings->getGlobal('custom3')),\n            'custom4'          => $this->lang->t9n($this->app_settings->getGlobal('custom4')),\n            'custom5'          => $this->lang->t9n($this->app_settings->getGlobal('custom5')),\n            'custom6'          => $this->lang->t9n($this->app_settings->getGlobal('custom6')),\n            'custom7'          => $this->lang->t9n($this->app_settings->getGlobal('custom7')),\n            'custom8'          => $this->lang->t9n($this->app_settings->getGlobal('custom8')),\n            'editor'           => $this->lang->t9n('Editor'),\n            'keyword'          => $this->lang->t9n('Keyword'),\n            'misc'             => $this->lang->t9n('Miscellaneous'),\n            'primary_title'    => $this->lang->t9n('Primary title'),\n            'reference_type'   => $this->lang->t9n('Publication type'),\n            'secondary_title'  => $this->lang->t9n('Secondary title'),\n            'tag'              => $this->lang->t9n('Tag'),\n            'tertiary_title'   => $this->lang->t9n('Tertiary title')\n        ];\n\n        if (!empty($input['filters'])) {\n\n            /** @var Bootstrap\\Icon $el Close icon. */\n            $el = $this->di->get('Icon');\n\n            $el->icon(\"close\");\n            $close = $el->render();\n\n            $el = null;\n\n            foreach ($input['filters'] as $filter) {\n\n                $key = key($filter);\n                $values = current($filter);\n\n                if (empty($values)) {\n\n                    continue;\n                }\n\n                // Format dates to local format.\n                if ($key === 'added_time') {\n\n                    $this->temporal_obj = $this->di->get('Temporal');\n                    $values[1] = $this->temporal_obj->toUserDate($values[1]);\n                }\n\n                // Construct a URL for the Remove filter button.\n                $removed_get = $get;\n\n                // Always remove page, because the link generates a new item list.\n                unset ($removed_get['page']);\n\n                // Remove this tag URL.\n                $remove_key = array_search($values[0], $removed_get['filter'][$key]);\n                unset($removed_get['filter'][$key][$remove_key]);\n\n                // Build query.\n                $get_query = http_build_query($removed_get);\n                $get_query = empty($get_query) ? '' : '?'. $get_query;\n\n                $close_url = '#' . IL_PATH_URL . $get_query;\n\n                $name = $facet_fields[$key] ?? $this->lang->t9n('Filter-NOUN');\n\n                $t9n_value = $values[1] === 'untagged' ? $this->lang->t9n($values[1]) : $values[1];\n\n                $tags_html .= <<<EOT\n                    <div class=\"btn-group mr-1 mb-2\" role=\"group\" aria-label=\"Filter button\">\n                        <button type=\"button\" class=\"btn btn-sm btn-dark rounded-0\">\n                            <b>{$name}</b> &mdash; {$t9n_value}\n                        </button>\n                        <a href=\"{$close_url}\" class=\"btn btn-sm btn-secondary\">{$close}</a>\n                    </div>\nEOT;\n            }\n        }\n\n        // Put it together in a row.\n\n        /** @var Bootstrap\\Row $el */\n        $el = $this->di->get('Row');\n\n        $el->column($bc, 'col-lg-8');\n        $el->column($item_count, 'col-lg-4 text-center text-lg-right d-flex align-items-center');\n\n        if ($tags_html !== '') {\n\n            $el->column($tags_html, 'col-12');\n        }\n\n        $row = $el->render();\n\n        $el = null;\n\n        return $row;\n    }\n\n    /**\n     * @param string $collection\n     * @param array $get\n     * @param array $input\n     * @return string\n     * @throws Exception\n     */\n    private function pageBottom(string $collection, array $get, array $input): string {\n\n        // We'll use some _GET in URLs.\n        $sanitized_get = $this->sanitation->urlquery($get);\n\n        $btn_class_a = self::$theme === 'dark' ? 'warning' : 'warning';\n        $btn_class_b = self::$theme === 'dark' ? 'secondary' : 'outline-dark';\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('magnify');\n        $search_icon = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->id('search-toggle');\n        $el->context($btn_class_a);\n        $el->dataToggle('modal');\n        $el->dataTarget('#modal-quick-search');\n        $el->addClass('border-0 shadow-none');\n        $el->html(\"<span class=\\\"d-none d-xl-inline-block\\\" style='min-width:3.5rem'>{$this->lang->t9n('Search-NOUN')}</span>$search_icon\");\n        $search_toggle = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('filter-outline');\n        $filter_icon = $el->render();\n\n        $el = null;\n\n        $filter_url = '#' . str_replace(['/main', '/browse'], '/filter', IL_PATH_URL);\n\n        if ($collection === 'project') {\n\n            $filter_url = '#project/filter?id=' . $get['id'];\n        }\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->elementName('a');\n        $el->id('filter-toggle');\n        $el->context($btn_class_a);\n        $el->addClass('border-0 shadow-none');\n        $el->href($filter_url);\n        $el->html(\"<span class=\\\"d-none d-xl-inline-block\\\" style='min-width:3.5rem'>{$this->lang->t9n('Filter-NOUN')}</span>$filter_icon\");\n        $filter_toggle = $el->render();\n\n        $el = null;\n\n        // Catalog is not searchable and filterable.\n        if (isset($get['from_id'])) {\n\n            $search_toggle = '';\n            $filter_toggle = '';\n        }\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('briefcase-download-outline');\n        $export_icon = $el->render();\n\n        $el = null;\n\n        // First page URL.\n        unset($sanitized_get['page']);\n        $first_page_q = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->id('open-export');\n        $el->context($btn_class_b);\n        $el->addClass('border-0');\n        $el->dataToggle('modal');\n        $el->dataTarget('#modal-export');\n        $el->attr('data-export-url', IL_BASE_URL . 'index.php/' . IL_PATH_URL . $first_page_q);\n        $el->html(\"<span class=\\\"d-none d-xl-inline\\\">{$this->lang->t9n('Export-NOUN')}</span>$export_icon\");\n        $export_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('wrench-outline');\n        $omnitool_icon = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->id('open-omnitool');\n        $el->context($btn_class_b);\n        $el->addClass('border-0');\n        $el->dataToggle('modal');\n        $el->dataTarget('#modal-omnitool');\n        $el->attr('data-omnitool-url', IL_BASE_URL . 'index.php/' . IL_PATH_URL . $first_page_q);\n        $el->html(\"<span class=\\\"d-none d-xl-inline\\\">{$this->lang->t9n('Omnitool')}</span>$omnitool_icon\");\n        $omnitool_button = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->addClass('d-xl-none');\n        $el->icon('monitor');\n        $sort_icon = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Button $el */\n        $el = $this->di->get('Button');\n\n        $el->id('open-settings');\n        $el->context($btn_class_b);\n        $el->addClass('border-0');\n        $el->dataToggle('modal');\n        $el->dataTarget('#modal-settings');\n        $el->html(\"<span class=\\\"d-none d-xl-inline\\\">{$this->lang->t9n('Display')}</span>$sort_icon\");\n        $display_button = $el->render();\n\n        $el = null;\n\n        // First page.\n        /** @var Bootstrap\\IconButton $el */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href('#' . IL_PATH_URL . $first_page_q);\n        $el->context($btn_class_b);\n        $el->addClass('border-0');\n        $el->icon('chevron-double-left');\n        $el->html('Go to first page');\n\n        // Disabling.\n        if ($get['page'] === 1) {\n\n            $el->elementName('button');\n            $el->removeAttr('href');\n            $el->disabled('disabled');\n        }\n\n        $first_button = $el->render();\n\n        $el = null;\n\n        // Previous page.\n        $prev_disabled = true;\n        $prev_page = $get['page'] - 1;\n\n        if ($prev_page >= 1) {\n\n            $prev_disabled = false;\n            $sanitized_get['page'] = $prev_page;\n        }\n\n        $prev_page_q = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        /** @var Bootstrap\\IconButton $el */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href('#' . IL_PATH_URL . $prev_page_q);\n        $el->context($btn_class_b);\n        $el->addClass('border-0 navigation-left');\n        $el->icon('chevron-left');\n        $el->html('Go to previous page');\n\n        // Disabling.\n        if ($prev_disabled) {\n\n            $el->elementName('button');\n            $el->removeAttr('href');\n            $el->disabled('disabled');\n        }\n\n        $prev_button = $el->render();\n\n        $el = null;\n\n        unset($sanitized_get['page']);\n\n        // Next page.\n        $next_disabled = true;\n        $next_page = $get['page'] + 1;\n\n        // Enforce max_items.\n        if ($next_page <= ceil($input['total_count'] / $this->app_settings->getUser('page_size'))\n            && $next_page <= ceil($this->app_settings->getGlobal('max_items') / $this->app_settings->getUser('page_size'))) {\n\n            $next_disabled = false;\n            $sanitized_get['page'] = $next_page;\n        }\n\n        $next_page_q = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        /** @var Bootstrap\\IconButton $el */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href('#' . IL_PATH_URL . $next_page_q);\n        $el->context($btn_class_b);\n        $el->addClass('border-0 navigation-right');\n        $el->icon('chevron-right');\n        $el->html('Go to next page');\n\n        // Disabling.\n        if ($next_disabled) {\n\n            $el->elementName('button');\n            $el->removeAttr('href');\n            $el->disabled('disabled');\n        }\n\n        $next_button = $el->render();\n\n        $el = null;\n\n        unset($sanitized_get['page']);\n\n        // Last page.\n        $max_items = min($input['total_count'], $this->app_settings->getGlobal('max_items'));\n        $page_modulus = $max_items % $this->app_settings->getUser('page_size');\n\n        $last_page =  $page_modulus === 0 ?\n            $max_items / $this->app_settings->getUser('page_size') :\n            ceil($max_items / $this->app_settings->getUser('page_size'));\n\n        $sanitized_get['page'] = $last_page;\n\n        $last_page_q = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        /** @var Bootstrap\\IconButton $el */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href('#' . IL_PATH_URL . $last_page_q);\n        $el->context($btn_class_b);\n        $el->addClass('border-0 ');\n        $el->icon('chevron-double-right');\n        $el->html('Go to last page');\n\n        // Disabling.\n        if ((integer) $last_page === (integer) $get['page'] || (integer) $last_page === 0) {\n\n            $el->elementName('button');\n            $el->removeAttr('href');\n            $el->disabled('disabled');\n        }\n\n        $last_button = $el->render();\n\n        $el = null;\n\n        unset($sanitized_get['page']);\n\n        // Toolbar row.\n        $toolbar_class = self::$theme === 'dark' ? 'bg-secondary' : 'bg-darker-5';\n\n        /** @var Bootstrap\\Row $el */\n        $el = $this->di->get('Row');\n\n        $el->id('bottom-row');\n        $el->role('toolbar');\n        $el->addClass('px-3 ' . $toolbar_class);\n        $el->column(\"$search_toggle $filter_toggle $export_button $omnitool_button $display_button\", 'col-sm-auto text-center text-sm-left p-0 my-2');\n        $el->column(\"$first_button $prev_button $next_button $last_button\", 'col-sm text-center text-sm-right p-0 my-2');\n        $bottom_row = $el->render();\n\n        $el = null;\n\n        return $bottom_row;\n    }\n\n    /**\n     * Assemble HTML for title item list.\n     *\n     * @param array $items\n     * @return string\n     * @throws Exception\n     */\n    private function titleList(array $items): string {\n\n        // Theme.\n        $theme_classes = self::$theme === 'light' ? 'bg-white' : 'bg-dark text-white';\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->icon('chevron-down');\n        $el->addClass('mdi-18px text-muted');\n        $chevron = $el->render();\n\n        $el = null;\n\n        $titles = '';\n\n        foreach ($items as $item) {\n\n            $IL_BASE_URL = IL_BASE_URL;\n\n            if ((int) $item['has_pdf'] === 1) {\n\n                // Active search, convert to PDF search.\n                $get = $this->request->getQueryParams();\n                $search = '';\n\n                if (isset($get['search_query'])) {\n\n                    $search = '&search=' . rawurlencode($this->toPdfSearch($get));\n                }\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf?id={$item['id']}\" . $search);\n                $el->addClass('px-2 py-2 border-0');\n                $el->context('primary');\n                $el->html('PDF');\n                $pdf = $el->render();\n\n                $el = null;\n\n                /** @var Bootstrap\\IconButton $el */\n                $el = $this->di->get('IconButton');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf/file?disposition=attachment&id={$item['id']}\");\n                $el->addClass('px-2 py-1 border-0');\n                $el->context('secondary');\n                $el->icon('download');\n                $download = $el->render();\n\n                $el = null;\n\n                $pdf_link = <<<EOT\n                    <div class=\"btn-group-vertical\">\n                        $pdf\n                        $download\n                    </div>\nEOT;\n\n            } else {\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->addClass('px-2 py-2 bg-darker-5 border-0');\n                $el->html('PDF');\n                $el->disabled('disabled');\n                $pdf = $el->render();\n\n                $el = null;\n\n                /** @var Bootstrap\\IconButton $el */\n                $el = $this->di->get('IconButton');\n\n                $el->addClass('px-2 py-1 bg-darker-5 border-0');\n                $el->icon('download');\n                $el->disabled('disabled');\n                $download = $el->render();\n\n                $el = null;\n\n                $pdf_link = <<<EOT\n                    <div class=\"btn-group-vertical\">\n                        $pdf\n                        $download\n                    </div>\nEOT;\n            }\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->type('checkbox');\n            $el->inline(true);\n            $el->label($this->lang->t9n('Clipboard'));\n            $el->name('clipboard');\n            $el->addClass('clipboard mb-3');\n            $el->id('clipboard-' . $item['id']);\n\n            if ($item['in_clipboard'] === '1') {\n\n                $el->attr('checked', 'checked');\n            }\n\n            $check = $el->render();\n\n            $el = null;\n\n            /** @var Element $el */\n            $el = $this->di->get('Element');\n\n            $el->elementName('button');\n            $el->addClass('px-0 py-0 pr-1 mb-3 mr-3 projects-button');\n            $el->dataToggle('collapse');\n            $el->dataTarget(\"#projects-{$item['id']}\");\n            $el->html(\"{$chevron}{$this->lang->t9n('Projects')}\");\n            $button = $el->render();\n\n            $el = null;\n\n            $project_html = empty($item['projects']) ? \"<span class=\\\"text-secondary\\\">{$this->lang->t9n('No projects')}</span>\" : '';\n\n            if (!empty($item['projects'])) {\n\n                foreach ($item['projects'] as $project) {\n\n                    /** @var Bootstrap\\Input $el */\n                    $el = $this->di->get('Input');\n\n                    $el->type('checkbox');\n                    $el->inline(true);\n                    $el->label($project['project']);\n                    $el->name('project');\n                    $el->value($project['project_id']);\n                    $el->addClass('project');\n                    $el->id(\"project-{$item['id']}-{$project['project_id']}\");\n\n                    if ($project['in_project'] === 'Y') {\n\n                        $el->attr('checked', 'checked');\n                    }\n\n                    $project_html .= $el->render();\n\n                    $el = null;\n                }\n            }\n\n            // Authors.\n            $authors = $item['authors'] === [] ? $this->lang->t9n('No authors') : join('<span class=\"ml-0\"> &hellip;</span>', $item['authors']);\n\n            // Publication.\n            $publication = !empty($item['publication_title']) ? \"<i>{$item['publication_title']}</i>\" : $item['reference_type'];\n            $date = !empty($item['publication_date']) ? \"({$item['publication_date']})\" : '';\n\n            // Top HTML structure.\n\n            $titles .= <<<EOT\n                <table data-id=\"{$item['id']}\" class=\"{$theme_classes} item-container mb-2\" style=\"border: 1px solid rgba(0,0,0,0.08);table-layout: fixed;width:100%\">\n                    <tbody>\n                        <tr>\n                            <td class=\"py-3 pl-3\" rowspan=\"2\" style=\"vertical-align: top;width: 4.25em\">\n                                $pdf_link\n                            </td>\n                            <td class=\"pl-1 pt-3 pr-5\" style=\"height: 3.5rem\">\n                                <h5><a href=\"{$IL_BASE_URL}index.php/item#summary?id={$item['id']}\">{$item['title']}</a></h5>\n                                <span class=\"mr-1\">{$authors}</span> <span class=\"mr-1\">{$date}</span> {$publication}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td class=\"pr-5\" style=\"vertical-align: top\">\n                                $button $check\n                                <div class=\"collapse pl-1 mb-2\" id=\"projects-{$item['id']}\">$project_html</div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\nEOT;\n        }\n\n        return \"<div class=\\\"col\\\">$titles</div>\";\n    }\n\n    /**\n     * Display items as a table.\n     *\n     * @param array $items\n     * @return string\n     * @throws Exception\n     */\n    private function tableList(array $items): string {\n\n        $titles = <<<EOT\n            <table class=\"item-container\" style=\"table-layout: fixed;width: 100%;box-shadow: none\">\n                <thead>\n                    <tr>\n                        <th class=\"px-3 py-2\" style=\"width: 3rem\">&nbsp;</th>\n                        <th class=\"px-3 py-2 d-none d-md-table-cell\" style=\"width: 12rem\">Author</th>\n                        <th class=\"px-3 py-2\">Title</th>\n                        <th class=\"px-3 py-2 d-none d-xl-table-cell\" style=\"width: 5rem\">Year</th>\n                        <th class=\"px-3 py-2 d-none d-xl-table-cell\" style=\"width: 20%\">Publication</th>\n                    </tr>\n                </thead>\nEOT;\n\n        foreach ($items as $key => $item) {\n\n            $IL_BASE_URL = IL_BASE_URL;\n\n            if ((int) $item['has_pdf'] === 1) {\n\n                // Active search, convert to PDF search.\n                $get = $this->request->getQueryParams();\n                $search = '';\n\n                if (isset($get['search_query'])) {\n\n                    $search = '&search=' . rawurlencode($this->toPdfSearch($get));\n                }\n\n                /** @var Bootstrap\\Badge $el */\n                $el = $this->di->get('Badge');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf?id={$item['id']}\" . $search);\n                $el->addClass('border border-primary mr-3');\n                $el->context('primary');\n                $el->html('PDF');\n                $pdf_link = $el->render();\n\n                $el = null;\n\n            } else {\n\n                /** @var Bootstrap\\Badge $el */\n                $el = $this->di->get('Badge');\n\n                $el->context('secondary');\n                $el->addClass('border border-secondary mr-3');\n                $el->style('opacity: 0.66');\n                $el->html('PDF');\n                $pdf_link = $el->render();\n\n                $el = null;\n            }\n\n            // Authors.\n            $authors = $item['authors'] === [] ? \"<span class=\\\"text-muted\\\">{$this->lang->t9n('No authors')}</span>\" : $item['authors'][0];\n\n            // Publication.\n            $publication = !empty($item['publication_title']) ? $item['publication_title'] : $item['reference_type'];\n            $date = !empty($item['publication_date']) ? $item['publication_date'] : '';\n\n            // Top HTML structure.\n\n            $row_class = '';\n\n            if ($key % 2 === 0) {\n\n                $row_class = self::$theme === 'dark' ? 'bg-dark' : 'bg-white';\n            }\n\n            $titles .= <<<EOT\n                <tbody class=\"{$row_class}\">\n                    <tr>\n                        <td class=\"px-3 py-3\">{$pdf_link}</td>\n                        <td class=\"px-3 py-3 text-truncate d-none d-md-table-cell\">{$authors}</td>\n                        <td class=\"px-3 py-3 text-truncate\">\n                            <a href=\"{$IL_BASE_URL}index.php/item#summary?id={$item['id']}\">{$item['title']}</a>\n                        </td>\n                        <td class=\"px-3 py-3 text-truncate d-none d-xl-table-cell\">{$date}</td>\n                        <td class=\"px-3 py-3 text-truncate d-none d-xl-table-cell\">{$publication}</td>\n                    </tr>\n                </tbody>\nEOT;\n        }\n\n        $titles .= <<<EOT\n            </table>\nEOT;\n\n        return \"<div class=\\\"col-12\\\">$titles</div>\";\n    }\n\n    /**\n     * Assemble HTML for icon item list.\n     *\n     * @param array $items\n     * @return string\n     * @throws Exception\n     */\n    private function iconList(array $items): string {\n\n        // Card size.\n        if ($this->app_settings->getUser('icons_per_row') === 'auto') {\n\n            $server = $this->request->getServerParams();\n            $screen = $server['HTTP_X_CLIENT_WIDTH'];\n\n            if ($screen >= 1600) {\n\n                $card_size = '3';\n\n            } elseif ($screen >= 1366 && $screen < 1600) {\n\n                $card_size = '4';\n\n            } elseif ($screen >= 768 && $screen < 1366) {\n\n                $card_size = '6';\n\n            } else {\n\n                $card_size = '12';\n            }\n\n        } else {\n\n            switch ($this->app_settings->getUser('icons_per_row')) {\n\n                case 1:\n                    $card_size = '12';\n                    break;\n                case 2:\n                    $card_size = '6';\n                    break;\n                case 3:\n                    $card_size = '4';\n                    break;\n                case 4:\n                    $card_size = '3';\n                    break;\n                default:\n                    $card_size = '3';\n            }\n        }\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->icon('chevron-down');\n        $el->addClass('text-muted');\n        $chevron = $el->render();\n\n        $el = null;\n\n        $output = '';\n        $IL_BASE_URL = IL_BASE_URL;\n\n        foreach ($items as $item) {\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->type('checkbox');\n            $el->inline(true);\n            $el->addClass('clipboard');\n            $el->label($this->lang->t9n('Clipboard'));\n            $el->name('clipboard');\n            $el->id('clipboard-' . $item['id']);\n\n            if ($item['in_clipboard'] === '1') {\n\n                $el->attr('checked', 'checked');\n            }\n\n            $check = $el->render();\n\n            $el = null;\n\n            /** @var Element $el */\n            $el = $this->di->get('Element');\n\n            $el->elementName('button');\n            $el->addClass('px-0 py-0 pr-1 mr-3 projects-button');\n            $el->dataToggle('collapse');\n            $el->dataTarget(\"#projects-{$item['id']}\");\n            $el->html(\"{$chevron}{$this->lang->t9n('Projects')}\");\n            $button = $el->render();\n\n            $el = null;\n\n            $project_html = empty($item['projects']) ? \"<span class=\\\"text-secondary\\\">{$this->lang->t9n('No projects')}</span>\" : '';\n\n            if (!empty($item['projects'])) {\n\n                foreach ($item['projects'] as $project) {\n\n                    /** @var Bootstrap\\Input $el */\n                    $el = $this->di->get('Input');\n\n                    $el->type('checkbox');\n                    $el->inline(true);\n                    $el->label($project['project']);\n                    $el->name('project');\n                    $el->value($project['project_id']);\n                    $el->addClass('project');\n                    $el->id(\"project-{$item['id']}-{$project['project_id']}\");\n\n                    if ($project['in_project'] === 'Y') {\n\n                        $el->attr('checked', 'checked');\n                    }\n\n                    $project_html .= $el->render();\n\n                    $el = null;\n                }\n            }\n\n            // Active search, convert to PDF search.\n            $get = $this->request->getQueryParams();\n            $search = '';\n\n            if (isset($get['search_query'])) {\n\n                $search = '&search=' . rawurlencode($this->toPdfSearch($get));\n            }\n\n            /** @var Bootstrap\\Card $el */\n            $el = $this->di->get('Card');\n\n            $el->addClass(\"item-container h-100\");\n            $el->dataId($item['id']);\n            $el->body(<<<EOT\n                <div style=\"position:relative;padding-top: 62.5%;overflow: hidden\">\n                    <a href=\"{$IL_BASE_URL}index.php/pdf?id={$item['id']}{$search}\" style=\"position:absolute;top:0;left:0;width:100%\">\n                        <img\n                            class=\"img-fluid w-100\"\n                            src=\"{$IL_BASE_URL}index.php/icon?id={$item['id']}\"\n                            alt=\"PDF preview\">\n                    </a>\n                </div>\n                <div class=\"px-3 pt-2 pb-1 border-darker-top\">\n                    <div class=\"d-table\" style=\"table-layout: fixed;width: 100%;\">\n                        <div class=\"d-table-cell align-middle text-truncate\">\n                            <a href=\"{$IL_BASE_URL}index.php/item#summary?id={$item['id']}\">{$item['title']}</a>\n                        </div>\n                    </div>\n                    $button $check\n                    <div class=\"collapse\" id=\"projects-{$item['id']}\">$project_html</div>\n                </div>\n                \nEOT\n            , null, 'p-0');\n            $card = $el->render();\n\n            $el = null;\n\n            $output .= \"<div class=\\\"col-sm-{$card_size} pb-3\\\">$card</div>\";\n        }\n\n        return $output;\n    }\n\n    /**\n     * Assemble HTML for summaries item list.\n     *\n     * @param array $items\n     * @return string\n     * @throws Exception\n     */\n    private function summaryList(array $items): string {\n\n        $this->temporal_obj = $this->di->get('Temporal');\n\n        // Theme.\n        $theme_classes = self::$theme === 'light' ? 'bg-white' : 'bg-dark text-white';\n\n        /** @var Bootstrap\\Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->icon('chevron-down');\n        $el->addClass('mdi-18px text-muted');\n        $chevron = $el->render();\n\n        $el = null;\n\n        $titles = '';\n\n        foreach ($items as $item) {\n\n            $IL_BASE_URL = IL_BASE_URL;\n\n            if ((int) $item['has_pdf'] === 1) {\n\n                // Active search, convert to PDF search.\n                $get = $this->request->getQueryParams();\n                $search = '';\n\n                if (isset($get['search_query'])) {\n\n                    $search = '&search=' . rawurlencode($this->toPdfSearch($get));\n                }\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf?id={$item['id']}\" . $search);\n                $el->addClass('px-2 py-2 border-0');\n                $el->context('primary');\n                $el->html('PDF');\n                $pdf = $el->render();\n\n                $el = null;\n\n                /** @var Bootstrap\\IconButton $el */\n                $el = $this->di->get('IconButton');\n\n                $el->elementName('a');\n                $el->href(\"{$IL_BASE_URL}index.php/pdf/file?disposition=attachment&id={$item['id']}\");\n                $el->addClass('px-2 py-1 border-0');\n                $el->context('secondary');\n                $el->icon('download');\n                $download = $el->render();\n\n                $el = null;\n\n                $pdf_link = <<<EOT\n                    <div class=\"btn-group-vertical\">\n                        $pdf\n                        $download\n                    </div>\nEOT;\n\n            } else {\n\n                /** @var Bootstrap\\Button $el */\n                $el = $this->di->get('Button');\n\n                $el->addClass('px-2 py-2 bg-darker-5 border-0');\n                $el->html('PDF');\n                $el->disabled('disabled');\n                $pdf = $el->render();\n\n                $el = null;\n\n                /** @var Bootstrap\\IconButton $el */\n                $el = $this->di->get('IconButton');\n\n                $el->addClass('px-2 py-1 bg-darker-5 border-0');\n                $el->icon('download');\n                $el->disabled('disabled');\n                $download = $el->render();\n\n                $el = null;\n\n                $pdf_link = <<<EOT\n                    <div class=\"btn-group-vertical\">\n                        $pdf\n                        $download\n                    </div>\nEOT;\n            }\n\n            $links = $this->sharedLinkList($item);\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->type('checkbox');\n            $el->inline(true);\n            $el->label($this->lang->t9n('Clipboard'));\n            $el->name('clipboard');\n            $el->addClass('clipboard');\n            $el->id('clipboard-' . $item['id']);\n\n            if ($item['in_clipboard'] === '1') {\n\n                $el->attr('checked', 'checked');\n            }\n\n            $check = $el->render();\n\n            $el = null;\n\n            /** @var Element $el */\n            $el = $this->di->get('Element');\n\n            $el->elementName('button');\n            $el->addClass('px-0 py-0 pr-1 mr-3 projects-button');\n            $el->dataToggle('collapse');\n            $el->dataTarget(\"#projects-{$item['id']}\");\n            $el->html(\"{$chevron}{$this->lang->t9n('Projects')}\");\n            $button = $el->render();\n\n            $el = null;\n\n            $project_html = empty($item['projects']) ? \"<span class=\\\"text-secondary\\\">{$this->lang->t9n('No projects')}</span>\" : '';\n\n            if (!empty($item['projects'])) {\n\n                foreach ($item['projects'] as $project) {\n\n                    /** @var Bootstrap\\Input $el */\n                    $el = $this->di->get('Input');\n\n                    $el->type('checkbox');\n                    $el->inline(true);\n                    $el->label($project['project']);\n                    $el->name('project');\n                    $el->value($project['project_id']);\n                    $el->addClass('project');\n                    $el->id(\"project-{$item['id']}-{$project['project_id']}\");\n\n                    if ($project['in_project'] === 'Y') {\n\n                        $el->attr('checked', 'checked');\n                    }\n\n                    $project_html .= $el->render();\n\n                    $el = null;\n                }\n            }\n\n            // Abstract.\n            $abstract = empty($item['abstract']) ? $this->lang->t9n('No abstract') : $item['abstract'];\n\n            // Rich-text notes.\n            $notes_arr = [];\n            $notes_arr[] = $this->sanitation->lmth($item['notes']);\n            $notes_arr[] = join('<br>', $this->sanitation->lmth($item['other_notes']));\n            $notes_arr = array_filter($notes_arr);\n            $notes = empty($notes_arr) ? $this->lang->t9n('No notes') : join('<hr>', $notes_arr);\n\n            // PDF annotations.\n            $pdf_notes_arr = [];\n            $pdf_notes_arr[] = join('<br><br>', $item['pdf_notes']);\n            $pdf_notes_arr[] = join('<br><br>', $item['other_pdf_notes']);\n            $pdf_notes_arr = array_filter($pdf_notes_arr);\n            $pdf_notes = empty($pdf_notes_arr) ? $this->lang->t9n('No notes') : join('<hr>', $pdf_notes_arr);\n\n            // Authors.\n            $authors = $item['authors'] === [] ? $this->lang->t9n('No authors') : join('<span class=\"ml-0\"> &hellip;</span>', $item['authors']);\n\n            // Publication.\n            $publication = !empty($item['publication_title']) ? \"<i>{$item['publication_title']}</i>\" : $item['reference_type'];\n            $date = !empty($item['publication_date']) ? \"({$item['publication_date']})\" : '';\n\n            // Tags.\n            $tags = '';\n\n            foreach ($item['tags'] as $tag_id => $tag) {\n\n                /** @var Bootstrap\\Badge $el */\n                $el = $this->di->get('Button');\n\n                $el->elementName('a');\n                $el->href(\"#items/filter?filter[tag][0]={$tag_id}\");\n                $el->context('outline-primary');\n                $el->componentSize('small');\n                $el->addClass('mr-1 mb-1');\n                $el->html($tag);\n\n                $tags .= $el->render();\n\n                $el = null;\n            }\n\n            $titles .= <<<EOT\n                <table data-id=\"{$item['id']}\" class=\"{$theme_classes} item-container mb-2\" style=\"border: 1px solid rgba(0,0,0,0.08);table-layout: fixed;width:100%\">\n                    <tbody>\n                        <tr>\n                            <td class=\"px-3 pt-3\" style=\"width:4.5em;vertical-align: top\" rowspan=\"5\">\n                                {$pdf_link}\n                            </td>\n                            <td class=\"pt-3 pr-3\">\n                                <h5><a href=\"{$IL_BASE_URL}index.php/item#summary?id={$item['id']}\">{$item['title']}</a></h5>\n                                <span class=\"mr-1\">{$authors}</span> <span class=\"mr-1\">{$date}</span> {$publication}\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>\n                                {$button} {$check}\n                                <div class=\"collapse\" id=\"projects-{$item['id']}\">$project_html</div>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td class=\"pt-0 pr-5\">\n                                <p style=\"text-align:justify;columns: 2 300px;column-gap: 30px;\">{$abstract}</p>\n                                <p>{$tags}</p>\n                                <p>{$links}</p>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td class=\"row pb-4 pr-5\">\n                                <div class=\"col-md-6\">\n                                    <p><span class=\"badge badge-secondary rounded-0\">{$this->lang->t9n('Notes')}</span></p>\n                                    {$notes}\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <p><span class=\"badge badge-secondary rounded-0\">{$this->lang->t9n('PDF notes')}</span></p>\n                                    {$pdf_notes}\n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\nEOT;\n        }\n\n        return \"<div class=\\\"col\\\">$titles</div>\";\n    }\n\n    /**\n     * Assemble HTML for the filter menu.\n     *\n     * @param string $collection\n     * @param array $get\n     * @return string\n     * @throws Exception\n     */\n    private function filterMenu(string $collection, array $get): string {\n\n        $sanitized_get = $this->sanitation->urlquery($get);\n        $sanitized_get = $this->sanitation->html($sanitized_get);\n\n        switch ($collection) {\n\n            case 'library':\n                $controller = 'items';\n                $browse_url = 'items/main';\n                break;\n\n            case 'clipboard':\n                $controller = 'clipboard';\n                $browse_url = 'clipboard/main';\n                break;\n\n            case 'project':\n                $controller = 'project';\n                $browse_url = 'project/browse';\n                break;\n\n            default:\n                $controller = 'items';\n                $browse_url = 'items/main';\n        }\n\n        // We are resetting to page #1.\n        unset($sanitized_get['page']);\n\n        // Add Header. Close filter button.\n        $close_params = isset($sanitized_get['id']) ? '?id=' . $sanitized_get['id'] : '';\n\n        $context = self::$theme === 'dark' ? 'dark' : 'light';\n\n        /** @var Bootstrap\\IconButton $el Close button. */\n        $el = $this->di->get('IconButton');\n\n        $el->elementName('a');\n        $el->href(\"#{$browse_url}{$close_params}\");\n        $el->context($context);\n        $el->componentSize('small');\n        $el->addClass('px-1 py-0');\n        $el->icon(\"close\");\n        $close = $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\ListGroup $el */\n        $el = $this->di->get('ListGroup');\n\n        $el->id('filter-list');\n        $el->addClass('list-group-flush');\n\n        $el->div(\"<b>Filter</b> {$close}\", 'border-0 d-flex justify-content-between');\n\n        // Query params for src attribute.\n        $get_query = empty($sanitized_get) ? '' : '?'. http_build_query($sanitized_get);\n\n        // Add filter buttons.\n        $action_to_name = [\n            'tags' => $this->lang->t9n('Tag'),\n            'authors' => $this->lang->t9n('Author'),\n            'editors' => $this->lang->t9n('Editor'),\n            'addedtime' => $this->lang->t9n('Added date'),\n            'primarytitles' => $this->lang->t9n('Primary title'),\n            'secondarytitles' => $this->lang->t9n('Secondary title'),\n            'tertiarytitles' => $this->lang->t9n('Tertiary title'),\n            'publicationtype' => $this->lang->t9n('Publication type'),\n            'keywords' => $this->lang->t9n('Keyword'),\n            'custom1' =>  $this->lang->t9n($this->app_settings->getGlobal('custom1')),\n            'custom2' =>  $this->lang->t9n($this->app_settings->getGlobal('custom2')),\n            'custom3' =>  $this->lang->t9n($this->app_settings->getGlobal('custom3')),\n            'custom4' =>  $this->lang->t9n($this->app_settings->getGlobal('custom4')),\n            'custom5' =>  $this->lang->t9n($this->app_settings->getGlobal('custom5')),\n            'custom6' =>  $this->lang->t9n($this->app_settings->getGlobal('custom6')),\n            'custom7' =>  $this->lang->t9n($this->app_settings->getGlobal('custom7')),\n            'custom8' =>  $this->lang->t9n($this->app_settings->getGlobal('custom8'))\n        ];\n\n        // Limit to 3 tags.\n        if (isset($get['filter']['tag']) && count($get['filter']['tag']) >= 3) {\n\n            unset($action_to_name['tags']);\n        }\n\n        $IL_BASE_URL = IL_BASE_URL;\n        $classes = 'list-group-item-action border-0';\n\n        foreach ($action_to_name as $action => $name) {\n\n            $filter_class = in_array($action, ['tags', 'addedtime', 'publicationtype']) === true  ? ' open-filter-local' : ' open-filter-remote';\n\n            $el->button($name, $classes . $filter_class, \"data-title=\\\"$name\\\" data-src=\\\"{$IL_BASE_URL}index.php/{$controller}/{$action}{$get_query}\\\"\");\n        }\n\n        if ($collection === 'library') {\n\n            $name = $this->lang->t9n('Miscellaneous');\n\n            $el->button($name, $classes . ' open-filter-local', \"data-title=\\\"{$name}\\\" data-src=\\\"{$IL_BASE_URL}index.php/items/misc{$get_query}\\\"\");\n        }\n\n        $list = $el->render();\n\n        $el = null;\n\n        return $list;\n    }\n\n    /**\n     * Export to Bibtex, Citations, Endnote, RIS.\n     *\n     * @param array $items\n     * @param string $format\n     * @param string $disposition\n     * @param string|null $style\n     * @return string\n     * @throws Exception\n     */\n    public function export(array $items, string $format, string $disposition = 'inline', string $style = ''): string {\n\n        switch ($format) {\n\n            case 'bibtex':\n                /** @var Bibtex $formatter */\n                $formatter = $this->di->get('BibtexExport');\n                $output = $formatter->format($items['items']);\n                $this->append($output);\n                $filename = 'export.bib';\n                $this->contentType('text');\n                $this->setDisposition($disposition, $filename);\n                break;\n\n            case 'bibtexabs':\n                /** @var Bibtex $formatter */\n                $formatter = $this->di->get('BibtexExport');\n                $output = $formatter->format($items['items'], true);\n                $this->append($output);\n                $filename = 'export.bib';\n                $this->contentType('text');\n                $this->setDisposition($disposition, $filename);\n                break;\n\n            case 'citation':\n                $this->citationList($items['items'], $style);\n                $filename = 'export.html';\n                $this->contentType('html');\n                $this->setDisposition('inline', $filename);\n                break;\n\n            case 'endnote':\n                /** @var Endnote $formatter */\n                $formatter = $this->di->get('EndnoteExport');\n                $output = $formatter->format($items['items']);\n                $this->append($output);\n                $filename = 'export.txt';\n                $this->contentType('text');\n                $this->setDisposition($disposition, $filename);\n                break;\n\n            case 'ris':\n                /** @var Ris $formatter */\n                $formatter = $this->di->get('RisExport');\n                $output = $formatter->format($items['items']);\n                $this->append($output);\n                $filename = 'export.ris';\n                $this->contentType('text');\n                $this->setDisposition($disposition, $filename);\n                break;\n\n            default:\n                throw new Exception('export format not recognized');\n        }\n\n        return $this->send();\n    }\n\n    /**\n     * Citation list for export.\n     *\n     * @param array $items\n     * @param string $style\n     * @throws Exception\n     */\n    private function citationList(array $items, string $style): void {\n\n        $this->item_meta = $this->di->getShared('ItemMeta');\n\n        $items = $this->sanitation->stripLow($items);\n        $style = $this->sanitation->lmth($style);\n\n        $csl_items = [];\n\n        foreach ($items as $item) {\n\n            $authors = [];\n            $editors = [];\n\n            if (isset($item[ItemMeta::COLUMN['AUTHOR_LAST_NAME']])) {\n\n                foreach ($item[ItemMeta::COLUMN['AUTHOR_LAST_NAME']] as $key => $last_name) {\n\n                    $authors[$key]['family'] = $last_name;\n\n                    if (!empty($item[ItemMeta::COLUMN['AUTHOR_FIRST_NAME']][$key])) {\n\n                        $authors[$key]['given'] = $item[ItemMeta::COLUMN['AUTHOR_FIRST_NAME']][$key];\n                    }\n                }\n            }\n\n            if (isset($item[ItemMeta::COLUMN['EDITOR_LAST_NAME']])) {\n\n                foreach ($item[ItemMeta::COLUMN['EDITOR_LAST_NAME']] as $key => $last_name) {\n\n                    $editors[$key]['family'] = $last_name;\n\n                    if (!empty($item[ItemMeta::COLUMN['EDITOR_FIRST_NAME']][$key])) {\n\n                        $editors[$key]['given'] = $item[ItemMeta::COLUMN['EDITOR_FIRST_NAME']][$key];\n                    }\n                }\n            }\n\n            $doi = null;\n            $doi_key = array_search('DOI', $item[ItemMeta::COLUMN['UID_TYPES']]);\n\n            if ($doi_key !== false) {\n\n                $doi = $item[ItemMeta::COLUMN['UIDS']][$doi_key];\n            }\n\n            $csl_items[] = [\n                \"id\" => $item[ItemMeta::COLUMN['BIBTEX_ID']],\n                \"type\" => $this->item_meta->convert($item[ItemMeta::COLUMN['REFERENCE_TYPE']], 'il', 'csl'),\n                \"title\" => $item[ItemMeta::COLUMN['TITLE']],\n                \"container-title\" => $item[ItemMeta::COLUMN['SECONDARY_TITLE']],\n                \"collection-title\" => $item[ItemMeta::COLUMN['TERTIARY_TITLE']],\n                \"page\" => $item[ItemMeta::COLUMN['PAGES']],\n                \"volume\" => $item[ItemMeta::COLUMN['VOLUME']],\n                \"issue\" => $item[ItemMeta::COLUMN['ISSUE']],\n                \"DOI\" => $doi,\n                \"journalAbbreviation\" => $item[ItemMeta::COLUMN['PRIMARY_TITLE']],\n                \"author\" => $authors,\n                \"editor\" => $editors,\n                \"issued\" => [\n                    'date-parts' => [\n                        [\n                            (int) substr($item[ItemMeta::COLUMN['PUBLICATION_DATE']] ?? '', 0, 4),\n                            (int) substr($item[ItemMeta::COLUMN['PUBLICATION_DATE']] ?? '', 5, 2),\n                            (int) substr($item[ItemMeta::COLUMN['PUBLICATION_DATE']] ?? '', 8, 2),\n                        ]\n                    ]\n                ],\n                \"publisher\" => $item[ItemMeta::COLUMN['PUBLISHER']],\n                \"publisher-place\" => $item[ItemMeta::COLUMN['PLACE_PUBLISHED']]\n            ];\n        }\n\n        $items_json = Utils::jsonEncode($csl_items, JSON_INVALID_UTF8_SUBSTITUTE);\n        $items_json = str_replace(['\\r', '\\n', '\\r\\n'], ' ', $items_json);\n        $items_json = str_replace('\\\\', '\\\\\\\\', $items_json);\n        $items_json = str_replace('\"', '\\\\\"', $items_json);\n        $style = str_replace([\"\\r\", \"\\n\", \"\\r\\n\"], ' ', $style);\n        $style = str_replace('\"', '\\\\\"', $style);\n\n        $this->style = <<<'STYLE'\ntable {\n    margin:0.75in 1in;\n    border-spacing:0;\n}\ntd {\n    font-family: serif;\n    font-size: 12pt;\n    padding:0;\n    padding-bottom:1em;\n    vertical-align: top;\n    line-height: 1.8em\n}\n.td-csl-left {\n    width: 5em\n}\nSTYLE;\n\n        $this->styleLink('css/plugins.css');\n\n        $this->head();\n\n        $this->append('<table><tbody></tbody></table>');\n\n        $this->scriptLink('js/plugins.min.js');\n        $this->scriptLink('js/citeproc/citeproc.js');\n\n        $this->script = <<<SCRIPT\n// List of citations in JSON format.\nlet items = \"{$items_json}\";\nlet citations = JSON.parse(items);\n// Extract all citation keys.\nlet itemIDs = _.map(citations, 'id');\n// User-selected style.\nlet style = \"{$style}\";\n// Citeproc init options.\nciteprocSys = {\n    retrieveLocale: function (lang) {\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', window.IL_BASE_URL + 'js/citeproc/locales/locales-' + lang + '.xml', false);\n        xhr.send(null);\n        return xhr.responseText;\n    },\n    retrieveItem: function (id) {\n        return _.filter(citations, _.matches({ 'id': id }))[0];\n    }\n};\n// Render citations.\nlet citeproc = new CSL.Engine(citeprocSys, style);\nciteproc.updateItems(itemIDs);\nlet bibResult = citeproc.makeBibliography();\nif (typeof bibResult === 'object') {\n    // Load citations into the table.\n    $.each(bibResult[1], function (key, val) {\n        // Two columns vs one column layout.\n        if ($(val).children(\"div\").length === 2) {\n            $('tbody').append('<tr><td class=\"td-csl-left\" valign=\"top\" width=\"80\">'\n                + $(val).children(\"div\").eq(0).html() + '</td><td valign=\"top\">'\n                + $(val).children(\"div\").eq(1).html() + '</td></tr>');\n        } else if ($(val).children(\"div\").length === 0) {\n            $('tbody').append('<tr><td valign=\"top\">' + $(val).html() + '</td></tr>');\n        }\n    });\n    // Final CSS formatting.\n    $('td').css('line-height', 1.2 * bibResult[0]['linespacing'] + 'em')\n        .css('padding-bottom', bibResult[0]['entryspacing'] + 'em');\n    $('.td-csl-left').css('width', bibResult[0]['maxoffset'] + 'em')\n        .attr('width', 16 * bibResult[0]['maxoffset']);\n}\nSCRIPT;\n\n        $this->end();\n    }\n\n    /**\n     * Catalog cards.\n     *\n     * @param $count\n     * @return string\n     * @throws Exception\n     */\n    public function catalog($count) {\n\n        $this->title($this->lang->t9n('Catalog'));\n        $this->head();\n\n        /** @var Bootstrap\\Breadcrumb $el */\n        $el = $this->di->get('Breadcrumb');\n\n        $el->style('margin: 0 -15px');\n        $el->addClass('bg-transparent');\n        $el->item('IL', IL_BASE_URL . 'index.php/#dashboard/main');\n        $el->item($this->lang->t9n('Catalog'));\n        $bc = $el->render();\n\n        $el = null;\n\n        if ((int) $count['max_id'] === 0) {\n\n            $this->append(['html' => \"$bc\"]);\n\n            return $this->send();\n        }\n\n        $range  = $this->app_settings->getGlobal('max_items');\n        $starts = $range >= $count['max_id'] ? [0 => 1] : range(1, $count['max_id'], $range);\n\n        // Higher to lower.\n        rsort($starts);\n\n        /** @var Bootstrap\\Row $el */\n        $el = $this->di->get('Row');\n\n        foreach ($starts as $value) {\n\n            $end = min($value + $range - 1, $count['max_id']);\n            $val_formatted = $this->scalar_utils->formatNumber((int) $value);\n            $end_formatted = $this->scalar_utils->formatNumber((int) $end);\n            $link = '#items/catalog?from_id=';\n\n            /** @var Bootstrap\\Card $el */\n            $crd = $this->di->get('Card');\n\n            $crd->body(\"<a href=\\\"$link{$value}\\\">{$this->lang->t9n('Items')}<br> {$val_formatted} - {$end_formatted}</a>\", null, 'py-4');\n            $el->column($crd->render(), 'col-xl-3 col-lg-4 col-md-6 mb-3 text-center');\n\n            $crd = null;\n        }\n\n        $row = $el->render();\n\n        $el = null;\n\n        $this->append(['html' => \"$bc $row\"]);\n\n        return $this->send();\n    }\n\n    /**\n     * Export window form.\n     *\n     * @param bool $single\n     * @return string\n     * @throws Exception\n     */\n    public function exportForm($single = false): string {\n\n        $inputs = \"<div class=\\\"mb-2\\\"><b>{$this->lang->t9n('Format-NOUN')}</b></div>\";\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio3');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('bibtex');\n        $el->checked('checked');\n        $el->label('B<span style=\"font-size: 0.85rem\">IB</span>T<div class=\"d-inline-block\" style=\"transform: translateY(2px)\">E</div>X');\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio3-2');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('bibtexabs');\n        $el->checked('checked');\n        $el->label('B<span style=\"font-size: 0.85rem\">IB</span>T<div class=\"d-inline-block\" style=\"transform: translateY(2px)\">E</div>X + ' . $this->lang->t9n('abstracts'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio1');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('endnote');\n        $el->label('Endnote');\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio2');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('ris');\n        $el->label('RIS');\n        $inputs .= $el->render();\n\n        $el = null;\n\n        if ($single === false) {\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->id('export-radio4');\n            $el->type('radio');\n            $el->name('export');\n            $el->value('zip');\n            $el->label(\"{$this->lang->t9n('offline app')} <span class=\\\"text-secondary\\\">({$this->lang->t9n('up to 500 MB')})</span>\");\n            $inputs .= $el->render();\n\n            $el = null;\n        }\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio5');\n        $el->type('radio');\n        $el->name('export');\n        $el->value('citation');\n        $el->label($this->lang->t9n('citation style'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Typeahead $el */\n        $el = $this->di->get('Typeahead');\n\n        $el->id('export-styles');\n        $el->name('style');\n        $el->attr('data-source', IL_BASE_URL . 'index.php/filter/citation');\n        $el->attr('data-minLength', '1');\n        $el->placeholder($this->lang->t9n('Search styles'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        $inputs .= \"<div class=\\\"mt-3 mb-2\\\"><b>{$this->lang->t9n('Output options')}</b></div>\";\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio6');\n        $el->type('radio');\n        $el->name('disposition');\n        $el->value('inline');\n        $el->checked('checked');\n        $el->label($this->lang->t9n('display in browser'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('export-radio7');\n        $el->type('radio');\n        $el->name('disposition');\n        $el->value('attachment');\n        $el->label($this->lang->t9n('download file'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Form $el */\n        $el = $this->di->get('Form');\n\n        $el->id('export-form');\n        $el->method('GET');\n        $el->target('_blank');\n        $el->action(IL_BASE_URL . 'index.php/items/export');\n        $el->html($inputs);\n        $form = $el->render();\n\n        $el = null;\n\n        $this->append(['html' => $form]);\n\n        return $this->send();\n    }\n\n    /**\n     * Omnitool form.\n     *\n     * @param array $projects\n     * @param array $tags\n     * @return string\n     * @throws Exception\n     */\n    public function omnitoolForm(array $projects, array $tags): string {\n\n        /** @var Icon $el */\n        $el = $this->di->get('Icon');\n\n        $el->icon('chevron-down');\n        $arrow = $el->render();\n\n        $el = null;\n\n        $inputs = \"<div class=\\\"mb-2\\\"><b>{$this->lang->t9n('Clipboard')}</b></div>\";\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio1');\n        $el->type('radio');\n        $el->name('omnitool[clipboard]');\n        $el->value('add');\n        $el->label($this->lang->t9n('add'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio2');\n        $el->type('radio');\n        $el->name('omnitool[clipboard]');\n        $el->value('remove');\n        $el->label($this->lang->t9n('remove'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio3');\n        $el->type('radio');\n        $el->name('omnitool[clipboard]');\n        $el->value('');\n        $el->checked('checked');\n        $el->label($this->lang->t9n('no action'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Select $el */\n        $el = $this->di->get('Select');\n\n        $el->id('omnitool-select-project');\n        $el->groupClass('mt-3');\n        $el->name('omnitool[project_id]');\n\n        foreach ($projects as $project) {\n\n            $el->option($project['project'], $project['id']);\n        }\n\n        $el->label($this->lang->t9n('Project'));\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio4');\n        $el->type('radio');\n        $el->name('omnitool[project]');\n        $el->value('add');\n        $el->label($this->lang->t9n('add'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio5');\n        $el->type('radio');\n        $el->name('omnitool[project]');\n        $el->value('remove');\n        $el->label($this->lang->t9n('remove'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio6');\n        $el->type('radio');\n        $el->name('omnitool[project]');\n        $el->value('');\n        $el->checked('checked');\n        $el->label($this->lang->t9n('no action'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        $inputs .= \"<div class=\\\"mt-3 mb-2 cursor-pointer\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#omnitool-tags\\\">$arrow<b>{$this->lang->t9n('Tags')}</b></div>\";\n\n        // Filter input.\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('tag-filter-omnitool');\n        $el->name('tag_filter');\n        $el->placeholder($this->lang->t9n('Filter-VERB'));\n        $el->ariaLabel($this->lang->t9n('Filter-VERB'));\n        $el->attr('data-targets', '#omnitool-tags .label-text');\n        $tag_checkboxes = $el->render();\n\n        $el = null;\n\n        // Tags.\n        $first_letter = '';\n        $i = 0;\n\n        $tag_checkboxes .= '<table class=\"tag-table\"><tr><td style=\"width:2.25rem\"></td><td>';\n\n        foreach ($tags as $tag_id => $tag) {\n\n            $first_letter2 = mb_strtoupper($this->scalar_utils->deaccent($tag[0] === '' ? '' : mb_substr($tag, 0, 1, 'UTF-8')), 'UTF-8');\n\n            if ($first_letter2 !== $first_letter) {\n\n                $tag_checkboxes .= '</td></tr><tr>';\n\n                /** @var Bootstrap\\Badge $el */\n                $el = $this->di->get('Badge');\n\n                $el->context('warning');\n                $el->addClass('d-inline-block mr-2 mb-2');\n                $el->style('width: 1.33rem');\n                $el->html($first_letter2);\n                $tag_checkboxes .= '<td>' . $el->render() . '</td><td>';\n\n                $el = null;\n\n                $first_letter = $first_letter2;\n            }\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->id('omnitool-checkbox-tags-' . $i);\n            $el->type('checkbox');\n            $el->name(\"omnitool[tags][$i]\");\n            $el->value($tag_id);\n            $el->label($tag);\n            $el->inline(true);\n\n            $tag_checkboxes .= $el->render();\n\n            $el = null;\n\n            $i++;\n        }\n\n        $tag_checkboxes .= '</td></tr></table>';\n\n        /** @var Bootstrap\\Card $el */\n        $el = $this->di->get('Element');\n\n        $el->id('omnitool-tags');\n        $el->addClass('mb-3 collapse');\n        $el->html($tag_checkboxes);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio7');\n        $el->type('radio');\n        $el->name('omnitool[tag]');\n        $el->value('add');\n        $el->label($this->lang->t9n('add'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio8');\n        $el->type('radio');\n        $el->name('omnitool[tag]');\n        $el->value('remove');\n        $el->label($this->lang->t9n('remove'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        /** @var Bootstrap\\Input $el */\n        $el = $this->di->get('Input');\n\n        $el->id('omnitool-radio9');\n        $el->type('radio');\n        $el->name('omnitool[tag]');\n        $el->value('');\n        $el->checked('checked');\n        $el->label($this->lang->t9n('no action'));\n        $el->inline(true);\n        $inputs .= $el->render();\n\n        $el = null;\n\n        // Only admins, and users can delete.\n        if ($this->session->data('permissions') === 'A' || $this->session->data('permissions') === 'U') {\n\n            $inputs .= \"<div class=\\\"mt-3 mb-2 cursor-pointer text-danger\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#delete-all\\\">$arrow<b>{$this->lang->t9n('Delete all')}</b></div>\";\n\n            /** @var Bootstrap\\Input $el */\n            $el = $this->di->get('Input');\n\n            $el->id('omnitool-checkbox1');\n            $el->type('checkbox');\n            $el->name('omnitool[delete]');\n            $el->value('1');\n            $el->label($this->lang->t9n('permanently delete all items'));\n            $inputs .= '<div class=\"collapse\" id=\"delete-all\">' . $el->render() . '</div>';\n\n            $el = null;\n\n        }\n\n        /** @var Bootstrap\\Form $el */\n        $el = $this->di->get('Form');\n\n        $el->method('GET');\n        $el->target('_blank');\n        $el->action(IL_BASE_URL . 'index.php/items/main');\n        $el->html($inputs);\n        $form = $el->render();\n\n        $el = null;\n\n        $this->append(['html' => $form]);\n\n        return $this->send();\n    }\n\n    /**\n     * Generate internal search name.\n     *\n     * @param array $get\n     * @return string\n     * @throws Exception\n     */\n    public function searchName(array $get): string {\n\n        $search_name = '';\n\n        // Search tags.\n        if (isset($get['search_type'])) {\n\n            // Custom customN names.\n            for ($i = 1; $i <= 8; $i++) {\n\n                $this->type_to_readable[\"C{$i}\"] = $this->lang->t9n($this->app_settings->getGlobal(\"custom{$i}\"));\n            }\n\n            foreach ($get['search_type'] as $i => $type) {\n\n                if ($get['search_query'][$i] === '') {\n\n                    continue;\n                }\n\n                $search_name .= \" {$this->type_to_readable[$type]}: {$get['search_query'][$i]}\";\n            }\n        }\n\n        return $search_name;\n    }\n\n    /**\n     * Convert search array parameters to a PDF string search.\n     *\n     * @param array $get\n     * @return string\n     */\n    private function toPdfSearch(array $get): string {\n\n        $search = '';\n\n        // Get the first valid search query.\n        foreach ($get['search_query'] as $key => $query) {\n\n            if (empty($query) || $get['search_type'][$key] === 'itemid') {\n\n                continue;\n            }\n\n            // Remove wildcards.\n            $search = trim(str_replace('*', '', $query));\n\n            // Get only first token, if query is not a phrase.\n            if ($get['search_boolean'][$key] !== 'PHRASE') {\n\n                $query_tokens = explode(' ', $query);\n                $search = $query_tokens[0] ?? '';\n            }\n\n            if (empty($search)) {\n\n                continue;\n            }\n\n            break;\n        }\n\n        return $search;\n    }\n}\n"], "filenames": ["app/views/items.php"], "buggy_code_start_loc": [388], "buggy_code_end_loc": [396], "fixing_code_start_loc": [389], "fixing_code_end_loc": [398], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository mkucej/i-librarian-free prior to 5.10.4.", "other": {"cve": {"id": "CVE-2023-3020", "sourceIdentifier": "security@huntr.dev", "published": "2023-05-31T17:15:09.567", "lastModified": "2023-06-06T19:28:02.127", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository mkucej/i-librarian-free prior to 5.10.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scilicot:i\\,_librarian:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.10.4", "matchCriteriaId": "B8366708-D2ED-4C03-9341-EA773907E156"}]}]}], "references": [{"url": "https://github.com/mkucej/i-librarian-free/commit/3f2c64768a70fc0d529bc29d47bc706ecf26314e", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/92cbe37c-33fa-43bf-8d5b-69aebf51d32c", "source": "security@huntr.dev", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/mkucej/i-librarian-free/commit/3f2c64768a70fc0d529bc29d47bc706ecf26314e"}}