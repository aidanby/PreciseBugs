{"buggy_code": ["<?php\n/*\n * @copyright   Copyright (C) 2010-2021 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Button\\ButtonUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\FieldSet\\FieldSetUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Form\\Form;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Html\\Html;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\InputUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\SelectOptionUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\SelectUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Panel\\Panel;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Panel\\PanelUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Title\\TitleUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Toolbar\\ToolbarUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\iUIBlock;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\MultiColumn\\Column\\Column;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\MultiColumn\\MultiColumn;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\PageContent\\PageContentFactory;\nuse Combodo\\iTop\\Application\\UI\\Preferences\\BlockShortcuts\\BlockShortcuts;\n\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'/application/application.inc.php');\nrequire_once(APPROOT.'/application/startup.inc.php');\n\n/**\n * Displays the user's changeable preferences\n * @param $oP WebPage The web page used for the output\n */\nfunction DisplayPreferences($oP)\n{\n\t$oContentLayout = PageContentFactory::MakeStandardEmpty();\n\t$oAppContext = new ApplicationContext();\n\t$sURL = utils::GetAbsoluteUrlAppRoot().'pages/UI.php?'.$oAppContext->GetForLink();\n\n\t$oContentLayout->AddMainBlock(TitleUIBlockFactory::MakeForPage(Dict::S('UI:Preferences:Title')));\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// User interface\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\t// Create panel\n\t$oUIPanel = PanelUIBlockFactory::MakeNeutral(Dict::S('UI:Preferences:UserInterface:Title'));\n\t$oContentLayout->AddMainBlock($oUIPanel);\n\n\t// Create form\n\t$oUIForm = new Form('ibo-form-for-user-interface-preferences');\n\t$oUIPanel->AddSubBlock($oUIForm);\n\n\t// Prepare form\n\t$oUIForm->AddSubBlock(InputUIBlockFactory::MakeForHidden('operation', 'apply_user_interface'))\n\t\t->AddSubBlock($oAppContext->GetForFormBlock())\n\t\t->SetOnSubmitJsCode('return ValidateOtherSettings();');\n\n\t$oMultiColContainer = new MultiColumn();\n\t$oUIForm->AddSubBlock($oMultiColContainer);\n\n\t$oFirstColumn = new Column();\n\t$oMultiColContainer->AddColumn($oFirstColumn);\n\n\t$oSecondColumn = new Column();\n\t$oMultiColContainer->AddColumn($oSecondColumn);\n\n\t// Prepare buttons\n\t$oUIToolbar = ToolbarUIBlockFactory::MakeForButton(null, ['ibo-is-fullwidth']);\n\t$oUIForm->AddSubBlock($oUIToolbar);\n\n\t// - Cancel button\n\t$oUICancelButton = ButtonUIBlockFactory::MakeForCancel();\n\t$oUIToolbar->AddSubBlock($oUICancelButton);\n\t$oUICancelButton->SetOnClickJsCode(\"window.location.href = '$sURL'\");\n\n\t// - Submit button\n\t$oUISubmitButton = ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Apply'), 'operation', 'apply_user_interface', true);\n\t$oUIToolbar->AddSubBlock($oUISubmitButton);\n\n\t// General\n\t$oGeneralFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:General:Title'), 'ibo-fieldset-for-language-preferences');\n\t$oGeneralFieldset->AddSubBlock(GetLanguageFieldBlock());\n\tif (true === MetaModel::GetConfig()->Get('user_preferences.allow_backoffice_theme_override')) {\n\t\t$oGeneralFieldset->AddSubBlock(GetThemeFieldBlock());\n\t}\n\t$oFirstColumn->AddSubBlock($oGeneralFieldset);\n\n\t// Lists\n\t$oListsFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:Lists:Title'), 'ibo-fieldset-for-lists-preferences');\n\t$oFirstColumn->AddSubBlock($oListsFieldset);\n\t$oListsFieldset->AddSubBlock(GetListPageSizeFieldBlock());\n\n\t// Tabs\n\t$oTabsFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:Tabs:Title'), 'ibo-fieldset-for-tabs-preferences');\n\t$oFirstColumn->AddSubBlock($oTabsFieldset);\n\t$oTabsFieldset->AddSubBlock(GetTabsLayoutFieldBlock());\n\t$oTabsFieldset->AddSubBlock(GetTabsNavigationFieldBlock());\n\n\t// Rich text editor\n\t$oRichTextFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:RichText:Title'), 'ibo-fieldset-for-rich-text-preferences');\n\t$oSecondColumn->AddSubBlock($oRichTextFieldset);\n\t$oRichTextFieldset->AddSubBlock(GetRichTextToolbarExpandedFieldBlock());\n\n\t// Activity panel\n\t$oActivityPanelfieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:ActivityPanel:Title'), 'ibo-fieldset-for-activity-panel');\n\t$oSecondColumn->AddSubBlock($oActivityPanelfieldset);\n\t$oActivityPanelfieldset->AddSubBlock(GetActivityPanelEntryFormOpenedFieldBlock());\n\n\t// Misc. options\n\t$oMiscOptionsFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:FavoriteOtherSettings'), 'ibo-fieldset-for-misc-options');\n\t$oSecondColumn->AddSubBlock($oMiscOptionsFieldset);\n\t$oMiscOptionsFieldset->AddSubBlock(GetObsoleteDataFieldBlock());\n\n\t$oP->add_script(\n\t\t<<<JS\nfunction ValidateOtherSettings()\n{\n\tvar sPageLength = $('#default_page_size').val();\n\tvar iPageLength = parseInt(sPageLength , 10);\n\tif (/^[0-9]+$/.test(sPageLength) && (iPageLength > 0))\n\t{\n\t\t$('#v_default_page_size').html('');\n\t\t$('#ibo-misc-settings-submit').prop('disabled', false);\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\t$('#v_default_page_size').html('<img src=\"../images/validation_error.png\"/>');\n\t\t$('#ibo-misc-settings-submit').prop('disabled', true);\n\t\treturn false;\n\t}\n}\nJS\n\t);\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// Favorite Organizations\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\n\t$oFavoriteOrganizationsBlock = new Panel(Dict::S('UI:FavoriteOrganizations'), array(), 'grey', 'ibo-favorite-organizations');\n\t$oFavoriteOrganizationsBlock->SetSubTitle(Dict::S('UI:FavoriteOrganizations+'));\n\t$oFavoriteOrganizationsBlock->AddCSSClass('ibo-datatable-panel');\n\t$oFavoriteOrganizationsForm = new Form();\n\t$oFavoriteOrganizationsBlock->AddSubBlock($oFavoriteOrganizationsForm);\n\t// Favorite organizations: the organizations listed in the drop-down menu\n\t$sOQL = ApplicationMenu::GetFavoriteSiloQuery();\n\t$oFilter = DBObjectSearch::FromOQL($sOQL);\n\t$oBlock = new DisplayBlock($oFilter, 'list', false);\n\n\t$aFavoriteOrgs = appUserPreferences::GetPref('favorite_orgs', null);\n\n\t$sIdFavoriteOrganizations = 1;\n\t$oFavoriteOrganizationsForm->AddSubBlock($oBlock->GetDisplay($oP, $sIdFavoriteOrganizations, [\n\t\t'menu'                => false,\n\t\t'selection_mode'      => true,\n\t\t'selection_type'      => 'multiple',\n\t\t'table_id'            => 'user_prefs',\n\t\t'surround_with_panel' => false,\n\t\t'selected_rows'       => $aFavoriteOrgs,\n\t]));\n\t$oFavoriteOrganizationsForm->AddSubBlock($oAppContext->GetForFormBlock());\n\n\t// Button toolbar\n\t$oFavoriteOrganizationsToolBar = ToolbarUIBlockFactory::MakeForButton(null, ['ibo-is-fullwidth']);\n\t$oFavoriteOrganizationsForm->AddSubBlock($oFavoriteOrganizationsToolBar);\n\n\t// - Cancel button\n\t$oFavoriteOrganizationsCancelButton = ButtonUIBlockFactory::MakeForCancel(Dict::S('UI:Button:Cancel'));\n\t$oFavoriteOrganizationsToolBar->AddSubBlock($oFavoriteOrganizationsCancelButton);\n\t$oFavoriteOrganizationsCancelButton->SetOnClickJsCode(\"window.location.href = '$sURL'\");\n\t// - Submit button\n\t$oFavoriteOrganizationsSubmitButton = ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Apply'), 'operation', 'apply', true);\n\t$oFavoriteOrganizationsToolBar->AddSubBlock($oFavoriteOrganizationsSubmitButton);\n\n\t// TODO 3.0 have this code work again, currently it prevents the display of favorite organizations and shortcuts.\n\t//\tif ($aFavoriteOrgs == null) {\n\t//\t\t// All checked\n\t//\t\t$oP->add_ready_script(\n\t//\t\t\t<<<JS\n\t//\t$('#$sIdFavoriteOrganizations.checkAll').prop('checked', true);\n\t//\tcheckAllDataTable('datatable_$sIdFavoriteOrganizations',true,'$sIdFavoriteOrganizations');\n\t//JS\n\t//\t\t);\n\t//\n\t//\t}\n\n\t$oContentLayout->AddMainBlock($oFavoriteOrganizationsBlock);\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// Shortcuts\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\n\t$oShortcutsBlock = new BlockShortcuts(Dict::S('Menu:MyShortcuts'), array(), 'grey', 'ibo-shortcuts');\n\t$oShortcutsBlock->AddCSSClass('ibo-datatable-panel');\n\n\t$oShortcutsBlock->sIdShortcuts = 'shortcut_list';\n\t$oShortcutsFilter = new DBObjectSearch('Shortcut');\n\t$oShortcutsFilter->AddCondition('user_id', UserRights::GetUserId(), '=');\n\n\t$oBlock = new DisplayBlock($oShortcutsFilter, 'list', false);\n\t$oShortcutsBlock->AddSubBlock($oBlock->GetDisplay($oP, $oShortcutsBlock->sIdShortcuts, [\n\t\t'view_link'           => false,\n\t\t'menu'                => false,\n\t\t'toolkit_menu'        => false,\n\t\t'selection_mode'      => true,\n\t\t'selection_type'      => 'multiple',\n\t\t'table_id'            => 'user_prefs_shortcuts',\n\t\t'surround_with_panel' => false,\n\t\t'id_for_select'       => 'Shortcut/_key_',\n\t]));\n\n\t$oSet = new DBObjectSet($oShortcutsFilter);\n\tif ($oSet->Count() > 0) {\n\t\t$oShortcutsToolBar = ToolbarUIBlockFactory::MakeForButton();\n\t\t$oShortcutsBlock->AddSubBlock($oShortcutsToolBar);\n\t\t// - Rename button\n\t\t$oShortcutsRenameButton = ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Rename'), null, null, false,\n\t\t\t\"shortcut_btn_rename\");\n\t\t$oShortcutsToolBar->AddSubBlock($oShortcutsRenameButton);\n\t\t// - Delete button\n\t\t$oShortcutsDeleteButton = ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Delete'), null, null, false,\n\t\t\t\"shortcut_btn_delete\");\n\t\t$oShortcutsToolBar->AddSubBlock($oShortcutsDeleteButton);\n\t}\n\t$oContentLayout->AddMainBlock($oShortcutsBlock);\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// Newsroom\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\t$iCountProviders = 0;\n\t$oUser = UserRights::GetUserObject();\n\t$aProviders = MetaModel::EnumPlugins('iNewsroomProvider');\n\tforeach($aProviders as $oProvider)\n\t{\n\t\tif ($oProvider->IsApplicable($oUser))\n\t\t{\n\t\t\t$iCountProviders++;\n\t\t}\n\t}\n\n\t$bNewsroomEnabled = (MetaModel::GetConfig()->Get('newsroom_enabled') !== false);\n\tif ($bNewsroomEnabled && ($iCountProviders > 0))\n\t{\n\t\t$oNewsroomBlock = new Panel(Dict::S('UI:Newsroom:Preferences'), array(), 'grey', 'ibo-newsroom');\n\n\t\t$sNewsroomHtml = '';\n\t\t$sNewsroomHtml .= '<form method=\"post\">';\n\t\t$iNewsroomDisplaySize = (int)appUserPreferences::GetPref('newsroom_display_size', 7);\n\n\t\tif ($iNewsroomDisplaySize < 1) $iNewsroomDisplaySize = 1;\n\t\tif ($iNewsroomDisplaySize > 20) $iNewsroomDisplaySize = 20;\n\t\t$sInput = '<input min=\"1\" max=\"20\" id=\"newsroom_display_size\" type=\"number\" size=\"2\" name=\"newsroom_display_size\" value=\"'.$iNewsroomDisplaySize.'\">';\n\t\t$sIcon = '<i id=\"newsroom_menu_icon\" class=\"top-right-icon icon-additional-arrow fas fa-bell\" style=\"top: 0;\"></i>';\n\t\t$sNewsroomHtml .= Dict::Format('UI:Newsroom:DisplayAtMost_X_Messages', $sInput, $sIcon);\n\n\t\t/**\n\t\t * @var iNewsroomProvider[] $aProviders\n\t\t */\n\t\t$sAppRootUrl = utils::GetAbsoluteUrlAppRoot();\n\t\tforeach($aProviders as $oProvider)\n\t\t{\n\t\t\tif ($oProvider->IsApplicable($oUser))\n\t\t\t{\n\t\t\t\t$sUrl = $oProvider->GetPreferencesUrl();\n\t\t\t\t$sProviderClass = get_class($oProvider);\n\t\t\t\t$sPreferencesLink = '';\n\t\t\t\tif ($sUrl !== null)\n\t\t\t\t{\n\t\t\t\t\tif(substr($sUrl, 0, strlen($sAppRootUrl)) === $sAppRootUrl)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sTarget = ''; // Internal link, open in the same window\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$sTarget = ' target=\"_blank\"'; // External link, open in new window\n\t\t\t\t\t}\n\t\t\t\t\t$sPreferencesLink = ' - <a class=\".newsroom-configuration-link\" href=\"'.$sUrl.'\"'.$sTarget.'>'.Dict::S('UI:Newsroom:ConfigurationLink').'</a>';\n\t\t\t\t}\n\t\t\t\t$sChecked = appUserPreferences::GetPref('newsroom_provider_'.$sProviderClass, true) ? ' checked=\"\" ' : '';\n\t\t\t\t$sNewsroomHtml .= '<div><input type=\"checkbox\" id=\"newsroom_provider_'.$sProviderClass.'\" value=\"on\"'.$sChecked.'name=\"newsroom_provider_'.$sProviderClass.'\"><label for=\"newsroom_provider_'.$sProviderClass.'\">'.Dict::Format('UI:Newsroom:DisplayMessagesFor_Provider',\n\t\t\t\t\t\t$oProvider->GetLabel()).'</label> '.$sPreferencesLink.'</div>';\n\t\t\t}\n\t\t}\n\n\t\t$sNewsroomHtml .= $oAppContext->GetForForm();\n\n\t\t$oNewsroomToolbar = ToolbarUIBlockFactory::MakeForButton();\n\n\t\t// - Reset button\n\t\t$oNewsroomResetCacheButton = ButtonUIBlockFactory::MakeForAlternativeDestructiveAction(Dict::S('UI:Newsroom:ResetCache'));\n\t\t$oNewsroomResetCacheButton->SetOnClickJsCode(\"$('#ibo-navigation-menu--notifications-menu').newsroom_menu('clearCache')\");\n\t\t$oNewsroomToolbar->AddSubBlock($oNewsroomResetCacheButton);\n\t\t// - Cancel button\n\t\t$oNewsroomCancelButton = ButtonUIBlockFactory::MakeForCancel(Dict::S('UI:Button:Cancel'));\n\t\t$oNewsroomCancelButton->SetOnClickJsCode(\"window.location.href = '$sURL'\");\n\t\t$oNewsroomToolbar->AddSubBlock($oNewsroomCancelButton);\n\t\t// - Submit button\n\t\t$oNewsroomSubmitButton = ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Apply'), 'operation',\n\t\t\t'apply_newsroom_preferences', true);\n\t\t$oNewsroomToolbar->AddSubBlock($oNewsroomSubmitButton);\n\n\n\t\t$sNewsroomEndHtml = '</form>';\n\t\t$oNewsroomEndHtmlBlock = new Html($sNewsroomEndHtml);\n\n\t\t$oNewsroomHtmlBlock = new Html($sNewsroomHtml);\n\t\t$oNewsroomBlock->AddSubBlock($oNewsroomHtmlBlock);\n\t\t$oNewsroomBlock->AddSubBlock($oNewsroomToolbar);\n\t\t$oNewsroomBlock->AddSubBlock($oNewsroomEndHtmlBlock);\n\t\t$oContentLayout->AddMainBlock($oNewsroomBlock);\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// User defined keyboard shortcut\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\n\t// Panel\n\t$oKeyboardShortcutBlock = new Panel(Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Title'), array(), 'grey', 'ibo_keyboard_shortcuts');\n\t// Form\n\t$oKeyboardShortcutForm = new Form('ibo-form-for-user-interface-preferences');\n\t$oKeyboardShortcutForm->AddSubBlock(InputUIBlockFactory::MakeForHidden('operation', 'apply_keyboard_shortcuts'))\n\t\t->AddSubBlock($oAppContext->GetForFormBlock());\n\n\t$oKeyboardShortcutBlock->AddSubBlock($oKeyboardShortcutForm);\n\n\t$sKeyboardShortcutBlockId = $oKeyboardShortcutBlock->GetId();\n\t// JS keyboard listener\n\t$oP->add_script(\n\t\t<<<JS\n    function recordSequence$sKeyboardShortcutBlockId(fCallback) {\n         Mousetrap.record(function(sequence) {\n            fCallback(sequence.join(' '));\n        });\n    }\nJS\n\t);\n\t// For each existing shortcut keyboard existing in iTop\n\t$aKeyboardShortcuts = utils::GetAllKeyboardShortcutsPrefs();\n\t$sKeyboardShortcutsInputHint = Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Input:Hint');\n\t$sKeyboardShortcutsButtonTooltip = Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Button:Tooltip');\n\tforeach ($aKeyboardShortcuts as $sKeyboardShortcutId => $aKeyboardShortcut) {\n\t\t// Recording button\n\t\t$oButton = ButtonUIBlockFactory::MakeForAlternativeSecondaryAction('');\n\t\t$oButton->SetIconClass('fas fa-pen')->SetTooltip($sKeyboardShortcutsButtonTooltip)->SetOnClickJsCode(\n\t\t\t<<<JS\nlet oPanel = $(this).siblings('input');\nvar fCallback = function(sVal){\n\toPanel.removeClass('ibo-is-focus').val(sVal);\n}\noPanel.addClass('ibo-is-focus').val('$sKeyboardShortcutsInputHint')\nrecordSequence$sKeyboardShortcutBlockId(fCallback);\nJS\n\t\t);\n\n\t\t$oInput = InputUIBlockFactory::MakeForInputWithLabel(Dict::S($aKeyboardShortcut['label']), $sKeyboardShortcutId, $aKeyboardShortcut['key'], $sKeyboardShortcutId, 'text');\n\t\t$oInput->GetInput()->AddCSSClasses(['ibo-keyboard-shortcut--input']);\n\t\t$oKeyboardShortcutForm->AddSubBlock(new Html('<div class=\"ibo-keyboard-shortcut--shortcut\">'));\n\t\t$oKeyboardShortcutForm->AddSubBlock($oInput);\n\t\t$oKeyboardShortcutForm->AddSubBlock($oButton);\n\t\t$oKeyboardShortcutForm->AddSubBlock(new Html('</div>'));\n\t}\n\n\t// Prepare buttons\n\t$oKeyboardShortcutToolbar = ToolbarUIBlockFactory::MakeForButton(null, ['ibo-is-fullwidth']);\n\t$oKeyboardShortcutForm->AddSubBlock($oKeyboardShortcutToolbar);\n\n\t// - Cancel button\n\t$oKeyboardShortcutCancelButton = ButtonUIBlockFactory::MakeForCancel();\n\t$oKeyboardShortcutToolbar->AddSubBlock($oKeyboardShortcutCancelButton);\n\t$oKeyboardShortcutCancelButton->SetOnClickJsCode(\"window.location.href = '$sURL'\");\n\n\t// - Reset button\n\t$oKeyboardShortcutResetButton = ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Button:Reset'), 'operation', 'reset_keyboard_shortcuts', true);\n\t$oKeyboardShortcutResetButton->SetTooltip(Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Button:Reset:Tooltip'));\n\t$oKeyboardShortcutToolbar->AddSubBlock($oKeyboardShortcutResetButton);\n\t// - Submit button\n\t$oKeyboardShortcutSubmitButton = ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Apply'), 'operation', 'apply_keyboard_shortcuts', true);\n\t$oKeyboardShortcutToolbar->AddSubBlock($oKeyboardShortcutSubmitButton);\n\n\n\t$oContentLayout->AddMainBlock($oKeyboardShortcutBlock);\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// User picture placeholder\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\n\t$oUserPicturePlaceHolderBlock = new Panel(Dict::S('UI:Preferences:ChooseAPlaceholder'), array(), 'grey', 'ibo-user-picture-placeholder');\n\n\t$sUserPicturesFolder = '../images/user-pictures/';\n\t$sUserDefaultPicture = appUserPreferences::GetPref('user_picture_placeholder', 'default-placeholder.png');\n\t$sUserPicturePlaceHolderHtml = '';\n\t$sUserPicturePlaceHolderHtml .= '<p>'.Dict::S('UI:Preferences:ChooseAPlaceholder+').'</p> <div class=\"ibo-preferences--user-preferences--picture-placeholder\">';\n\tforeach (scandir($sUserPicturesFolder) as $sUserPicture)\n\t{\n\t\tif ($sUserPicture === '.' || $sUserPicture === '..')\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t$sAdditionalClass = '';\n\t\tif ($sUserDefaultPicture === $sUserPicture)\n\t\t{\n\t\t\t$sAdditionalClass = ' ibo-is-active';\n\t\t}\n\t\t$sUserPicturePlaceHolderHtml .= '<a class=\"ibo-preferences--user-preferences--picture-placeholder--image'.$sAdditionalClass.'\" data-image-name=\"'.$sUserPicture.'\" data-role=\"ibo-preferences--user-preferences--picture-placeholder--image\" href=\"#\"> <img src=\"'.$sUserPicturesFolder.$sUserPicture.'\"/> </a>';\n\t}\n\t$oP->add_ready_script(\n\t\t<<<JS\n$('[data-role=\"ibo-preferences--user-preferences--picture-placeholder--image\"]').on('click',function(){\n\tconst me = this;\n\t\n\t// Save new preference\n\t$.post(\n\t\tGetAbsoluteUrlAppRoot()+'pages/ajax.render.php',\n\t\t{\n\t\t\t'operation': 'preferences_set_user_picture',\n\t\t\t'image_filename': $(this).attr('data-image-name')\n\t\t}\n\t)\n\t.done(function(oData){\n\t\tif(false === oData.success){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Update selection\n\t\t$('[data-role=\"ibo-preferences--user-preferences--picture-placeholder--image\"]').removeClass('ibo-is-active');\n\t\t$(me).addClass('ibo-is-active');\n\t\t\n\t\t// Update navigation menu\n\t\t$('[data-role=\"ibo-navigation-menu--user-picture--image\"]').attr('src', oData.data.image_url);\n\t});\n});\nJS\n);\n\t$sUserPicturePlaceHolderHtml .=\n\t\t<<<HTML\n</div>\nHTML\n\t;\n\t$oUserPicturePlaceHolderHtmlBlock = new Html($sUserPicturePlaceHolderHtml);\n\t$oUserPicturePlaceHolderBlock->AddSubBlock($oUserPicturePlaceHolderHtmlBlock);\n\t$oContentLayout->AddMainBlock($oUserPicturePlaceHolderBlock);\n\n\t/** @var iPreferencesExtension $oLoginExtensionInstance */\n\tforeach (MetaModel::EnumPlugins('iPreferencesExtension') as $oPreferencesExtensionInstance)\n\t{\n\t\t$oPreferencesExtensionInstance->DisplayPreferences($oP);\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// Footer\n\t//\n\t$oP->add_ready_script(\"$('#fav_page_length').bind('keyup change', function(){ ValidateOtherSettings(); })\");\n\t$oP->SetContentLayout($oContentLayout);\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @since 3.0.0\n */\nfunction GetLanguageFieldBlock(): iUIBlock\n{\n\t$aAvailableLanguages = Dict::GetLanguages();\n\t$aSortedLanguages = array();\n\tforeach ($aAvailableLanguages as $sCode => $aLang) {\n\t\tif (MetaModel::GetConfig()->Get('demo_mode') && ($sCode !== Dict::GetUserLanguage())) {\n\t\t\t// Demo mode: only the current user language is listed in the available choices\n\t\t\tcontinue;\n\t\t}\n\t\t$aSortedLanguages[$aLang['description']] = $sCode;\n\t}\n\tksort($aSortedLanguages);\n\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('language', Dict::S('UI:FavoriteLanguage'));\n\t/** @var \\Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\Select $oSelectInput */\n\tforeach ($aSortedLanguages as $sCode) {\n\t\t$bSelected = ($sCode === Dict::GetUserLanguage());\n\t\t$oSelect->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption($sCode, $aAvailableLanguages[$sCode]['description'].' ('.$aAvailableLanguages[$sCode]['localized_description'].')', $bSelected));\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @since 3.0.0\n */\nfunction GetThemeFieldBlock(): iUIBlock\n{\n\t$aAvailableThemes = ThemeHandler::GetAvailableThemes();\n\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('theme', Dict::S('UI:Preferences:General:Theme'));\n\tforeach ($aAvailableThemes as $sCode => $sLabel) {\n\t\tif (MetaModel::GetConfig()->Get('demo_mode') && ($sCode !== ThemeHandler::GetApplicationThemeId())) {\n\t\t\t// Demo mode: only the current app. theme is listed in the available choices\n\t\t\tcontinue;\n\t\t}\n\n\t\t$bSelected = ($sCode === ThemeHandler::GetCurrentUserThemeId());\n\t\tif ($sCode === MetaModel::GetConfig()->Get('backoffice_default_theme')) {\n\t\t\t$sLabel = Dict::Format('UI:Preferences:General:Theme:DefaultThemeLabel', $sLabel);\n\t\t}\n\t\t$oSelect->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption($sCode, $sLabel, $bSelected));\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetListPageSizeFieldBlock(): iUIBlock\n{\n\t$iDefaultPageSize = appUserPreferences::GetPref('default_page_size', MetaModel::GetConfig()->GetMinDisplayLimit());\n\n\t$sInputHtml = '<input id=\"default_page_size\" name=\"default_page_size\" type=\"text\" size=\"3\" value=\"'.$iDefaultPageSize.'\"/><span id=\"v_default_page_size\"></span>';\n\t$sHtml = '<p>'.Dict::Format('UI:Favorites:Default_X_ItemsPerPage', $sInputHtml).'</p>';\n\n\treturn new Html($sHtml);\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @return 3.0.0\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @throws \\CoreException\n */\nfunction GetTabsLayoutFieldBlock(): iUIBlock\n{\n\t$sCurrentValue = appUserPreferences::GetPref('tab_layout', false);\n\n\t$aOptionsValues = [\n\t\t'horizontal',\n\t\t'vertical',\n\t];\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('tab_layout', Dict::S('UI:Preferences:Tabs:Layout:Label'));\n\tforeach ($aOptionsValues as $sValue) {\n\t\t$oSelect->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption(\n\t\t\t$sValue,\n\t\t\tDict::S('UI:Preferences:Tabs:Layout:'.ucfirst($sValue)),\n\t\t\t$sValue === $sCurrentValue)\n\t\t);\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetTabsNavigationFieldBlock(): iUIBlock\n{\n\t$bCurrentValue = appUserPreferences::GetPref('tab_scrollable', false);\n\t$sCurrentValueAsString = $bCurrentValue ? 'true' : 'false';\n\n\t$aOptionsValues = [\n\t\t'true' => 'Scrollable',\n\t\t'false' => 'Classic',\n\t];\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('tab_scrollable', Dict::S('UI:Preferences:Tabs:Scrollable:Label'));\n\tforeach ($aOptionsValues as $sValue => $sDictEntrySuffix) {\n\t\t$oSelect->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption(\n\t\t\t$sValue,\n\t\t\tDict::S('UI:Preferences:Tabs:Scrollable:'.$sDictEntrySuffix),\n\t\t\t$sValue === $sCurrentValueAsString)\n\t\t);\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetRichTextToolbarExpandedFieldBlock(): iUIBlock\n{\n\t$bCurrentValue = isset(utils::GetCkeditorPref()['toolbarStartupExpanded']) ? (bool)utils::GetCkeditorPref()['toolbarStartupExpanded'] : false;\n\t$sCurrentValueAsString = $bCurrentValue ? 'true' : 'false';\n\n\t$aOptionsValues = [\n\t\t'true' => 'Expanded',\n\t\t'false' => 'Collapsed',\n\t];\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('toolbarexpanded', Dict::S('UI:Preferences:RichText:ToolbarState'));\n\tforeach ($aOptionsValues as $sValue => $sDictEntrySuffix) {\n\t\t$oSelect->AddOption(SelectOptionUIBlockFactory::MakeForSelectOption(\n\t\t\t$sValue,\n\t\t\tDict::S('UI:Preferences:RichText:ToolbarState:'.$sDictEntrySuffix),\n\t\t\t$sValue === $sCurrentValueAsString)\n\t\t);\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetActivityPanelEntryFormOpenedFieldBlock(): iUIBlock\n{\n\t// First check if user has a pref.\n\t$bOpened = appUserPreferences::GetPref('activity_panel.is_entry_form_opened', null);\n\tif (null === $bOpened) {\n\t\t// Otherwise get the default config. param.\n\t\t$bOpened = MetaModel::GetConfig()->Get('activity_panel.entry_form_opened_by_default');\n\t}\n\t$sCheckedForHtmlAttribute = $bOpened ? 'checked=\"checked\"' : '';\n\n\t$sLabel = Dict::S('UI:Preferences:ActivityPanel:EntryFormOpened');\n\t$sLabelDescription = Dict::S('UI:Preferences:ActivityPanel:EntryFormOpened+');\n\t$sHtml = <<<HTML\n<p>\n\t<label data-tooltip-content=\"{$sLabelDescription}\">\n\t\t<span>{$sLabel}</span>\n\t\t<input type=\"checkbox\" name=\"activity_panel_entry_form_opened\" value=\"1\" {$sCheckedForHtmlAttribute}>\n\t</label>\n</p>\nHTML;\n\n\treturn new Html($sHtml);\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetObsoleteDataFieldBlock(): iUIBlock\n{\n\t$bShow = utils::IsArchiveMode() || appUserPreferences::GetPref('show_obsolete_data', MetaModel::GetConfig()->Get('obsolescence.show_obsolete_data'));\n\t$sSelectedForHtmlAttribute = $bShow ? ' checked=\"checked\"' : '';\n\t$sDisabledForHtmlAttribute = utils::IsArchiveMode() ? 'disabled=\"disabled\"' : '';\n\n\t$sLabel = Dict::S('UI:Favorites:ShowObsoleteData');\n\t$sLabelDescription = Dict::S('UI:Favorites:ShowObsoleteData+');\n\t$sHtml = <<<HTML\n<p>\n\t<label data-tooltip-content=\"{$sLabelDescription}\">\n\t\t<span>{$sLabel}</span>\n\t\t<input type=\"checkbox\" name=\"show_obsolete_data\" value=\"1\"{$sSelectedForHtmlAttribute}{$sDisabledForHtmlAttribute}>\n\t</label>\n</p>\nHTML;\n\n\treturn new Html($sHtml);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n//\n// Main program\n//\n/////////////////////////////////////////////////////////////////////////////\n\nrequire_once(APPROOT.'/application/loginwebpage.class.inc.php');\nLoginWebPage::DoLogin(); // Check user rights and prompt if needed\n\n$iStep = utils::ReadParam('step', 1);\n\n$oPage = new iTopWebPage(Dict::S('UI:Preferences'));\n$oPage->DisableBreadCrumb();\n$sOperation = utils::ReadParam('operation', '');\n\ntry {\n\t$bOperationUsed = false;\n\t/** @var iPreferencesExtension $oLoginExtensionInstance */\n\tforeach (MetaModel::EnumPlugins('iPreferencesExtension') as $oPreferencesExtensionInstance) {\n\t\tif ($oPreferencesExtensionInstance->ApplyPreferences($oPage, $sOperation)) {\n\t\t\t$bOperationUsed = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!$bOperationUsed) {\n\t\tswitch ($sOperation) {\n\t\t\tcase 'apply':\n\t\t\t\t$oFilter = DBObjectSearch::FromOQL('SELECT Organization');\n\t\t\t\t$sSelectionMode = utils::ReadParam('selectionMode', '');\n\t\t\t\t$aExceptions = utils::ReadParam('storedSelection', array());\n\t\t\t\tif (($sSelectionMode == 'negative') && (count($aExceptions) == 0)) {\n\t\t\t\t\t// All Orgs selected\n\t\t\t\t\tappUserPreferences::SetPref('favorite_orgs', null);\n\t\t\t\t} else {\n\t\t\t\t\t// Some organizations selected... store them\n\t\t\t\t\t$aSelectOrgs = utils::ReadMultipleSelection($oFilter);\n\t\t\t\t\tappUserPreferences::SetPref('favorite_orgs', $aSelectOrgs);\n\t\t\t\t}\n\t\t\t\t$oPage->ResetNavigationMenuLayout();\n\t\t\t\tDisplayPreferences($oPage);\n\t\t\t\tbreak;\n\n\t\t\tcase 'apply_user_interface':\n\t\t\t\t// Language\n\t\t\t\t$sLangCode = utils::ReadParam('language', 'EN US');\n\t\t\t\t$oUser = UserRights::GetUserObject();\n\t\t\t\t$oUser->Set('language', $sLangCode);\n\n\t\t\t\tutils::PushArchiveMode(false);\n\t\t\t\t$oUser->AllowWrite(true);\n\t\t\t\t$oUser->DBUpdate();\n\t\t\t\tutils::PopArchiveMode();\n\n\t\t\t\t// Theme\n\t\t\t\t$sThemeId = utils::ReadParam('theme', '');\n\t\t\t\tif (!empty($sThemeId) && ThemeHandler::IsValidTheme($sThemeId)) {\n\t\t\t\t\tappUserPreferences::SetPref('backoffice_theme', $sThemeId);\n\t\t\t\t}\n\n\t\t\t\t// List\n\t\t\t\t$iDefaultPageSize = (int)utils::ReadParam('default_page_size', -1);\n\t\t\t\tif ($iDefaultPageSize > 0) {\n\t\t\t\t\tappUserPreferences::SetPref('default_page_size', $iDefaultPageSize);\n\t\t\t\t}\n\n\t\t\t\t// Tabs\n\t\t\t\t// - Layout\n\t\t\t\t$sLayout = utils::ReadParam('tab_layout', 'horizontal');\n\t\t\t\t$sLayoutAllowedValues = ['horizontal', 'vertical'];\n\t\t\t\tif (in_array($sLayout, $sLayoutAllowedValues, true)) {\n\t\t\t\t\tappUserPreferences::SetPref('tab_layout', $sLayout);\n\t\t\t\t}\n\n\t\t\t\t// - Navigation\n\t\t\t\t$bScrollable = utils::ReadParam('tab_scrollable', 'false') === 'true';\n\t\t\t\tappUserPreferences::SetPref('tab_scrollable', $bScrollable);\n\n\t\t\t\t// Rich text editor\n\t\t\t\t$bToolbarExpanded = utils::ReadParam('toolbarexpanded', 'false') === 'true';\n\t\t\t\t$aRichTextConfig = json_decode(appUserPreferences::GetPref('richtext_config', '{}'), true);\n\t\t\t\t$aRichTextConfig['toolbarStartupExpanded'] = $bToolbarExpanded;\n\t\t\t\tappUserPreferences::SetPref('richtext_config', json_encode($aRichTextConfig));\n\n\t\t\t\t// Activity panel\n\t\t\t\t$bActivityPanelEntryFormOpened = (bool)utils::ReadParam('activity_panel_entry_form_opened', 0);\n\t\t\t\tappUserPreferences::SetPref('activity_panel.is_entry_form_opened', $bActivityPanelEntryFormOpened);\n\n\t\t\t\t// Misc.\n\t\t\t\t// - Obsolete data\n\t\t\t\t$bShowObsoleteData = (bool)utils::ReadParam('show_obsolete_data', 0);\n\t\t\t\tappUserPreferences::SetPref('show_obsolete_data', $bShowObsoleteData);\n\n\t\t\t\t// Redirect to force a reload/display of the page in case language has been changed\n\t\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t\t$sURL = utils::GetAbsoluteUrlAppRoot().'pages/preferences.php?'.$oAppContext->GetForLink();\n\t\t\t\t$oPage->add_header('Location: '.$sURL);\n\t\t\t\tbreak;\n\t\t\tcase 'apply_keyboard_shortcuts':\n\t\t\t\t// Note: Mind the 4 blackslashes, see utils::GetClassesForInterface()\n\t\t\t\t$aShortcutClasses = utils::GetClassesForInterface('iKeyboardShortcut', '', array('[\\\\\\\\/]lib[\\\\\\\\/]', '[\\\\\\\\/]node_modules[\\\\\\\\/]', '[\\\\\\\\/]test[\\\\\\\\/]', '[\\\\\\\\/]tests[\\\\\\\\/]'));\n\t\t\t\t$aShortcutPrefs = [];\n\t\t\t\tforeach ($aShortcutClasses as $cShortcutPlugin) {\n\t\t\t\t\tforeach ($cShortcutPlugin::GetShortcutKeys() as $aShortcutKey) {\n\t\t\t\t\t\t$sKey = utils::ReadParam($aShortcutKey['id'], $aShortcutKey['key'], true, 'raw_data');\n\t\t\t\t\t\t$aShortcutPrefs[$aShortcutKey['id']] = strtolower($sKey);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tappUserPreferences::SetPref('keyboard_shortcuts', $aShortcutPrefs);\n\n\t\t\t\tDisplayPreferences($oPage);\n\t\t\t\tbreak;\n\t\t\tcase 'reset_keyboard_shortcuts':\n\t\t\t\tappUserPreferences::UnsetPref('keyboard_shortcuts');\n\n\t\t\t\tDisplayPreferences($oPage);\n\t\t\t\tbreak;\n\t\t\tcase 'apply_newsroom_preferences':\n\t\t\t\t$iCountProviders = 0;\n\t\t\t\t$oUser = UserRights::GetUserObject();\n\t\t\t\t$aProviders = MetaModel::EnumPlugins('iNewsroomProvider');\n\t\t\t\tforeach ($aProviders as $oProvider) {\n\t\t\t\t\tif ($oProvider->IsApplicable($oUser)) {\n\t\t\t\t\t\t$iCountProviders++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$bNewsroomEnabled = (MetaModel::GetConfig()->Get('newsroom_enabled') !== false);\n\t\t\t\tif ($bNewsroomEnabled && ($iCountProviders > 0)) {\n\t\t\t\t\t$iNewsroomDisplaySize = (int)utils::ReadParam('newsroom_display_size', 7);\n\t\t\t\t\tif ($iNewsroomDisplaySize < 1) {\n\t\t\t\t\t\t$iNewsroomDisplaySize = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif ($iNewsroomDisplaySize > 20) {\n\t\t\t\t\t\t$iNewsroomDisplaySize = 20;\n\t\t\t\t\t}\n\t\t\t\t\t$iCurrentDisplaySize = (int)appUserPreferences::GetPref('newsroom_display_size', $iNewsroomDisplaySize);\n\t\t\t\t\tif ($iCurrentDisplaySize != $iNewsroomDisplaySize) {\n\t\t\t\t\t\t// Save the preference only if it differs from the current (or default) value\n\t\t\t\t\t\tappUserPreferences::SetPref('newsroom_display_size', $iNewsroomDisplaySize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$bProvidersModified = false;\n\t\t\t\tforeach ($aProviders as $oProvider)\n\t\t\t\t{\n\t\t\t\t\tif ($oProvider->IsApplicable($oUser))\n\t\t\t\t\t{\n\t\t\t\t\t\t$sProviderClass = get_class($oProvider);\n\t\t\t\t\t\t$bProviderEnabled = (utils::ReadParam('newsroom_provider_'.$sProviderClass, 'off') == 'on');\n\t\t\t\t\t\t$bCurrentValue = appUserPreferences::GetPref('newsroom_provider_'.$sProviderClass, true);\n\t\t\t\t\t\tif ($bCurrentValue != $bProviderEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Save the preference only if it differs from the current value\n\t\t\t\t\t\t\t$bProvidersModified = true;\n\t\t\t\t\t\t\tappUserPreferences::SetPref('newsroom_provider_'.$sProviderClass, $bProviderEnabled);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($bProvidersModified)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script('$(\".itop-newsroom_menu\").newsroom_menu(\"clearCache\");');\n\t\t\t\t}\n\t\t\t\tDisplayPreferences($oPage);\n\t\t\t\tbreak;\n\n\t\t\tcase 'display':\n\t\t\tdefault:\n\t\t\t\t$oPage->SetBreadCrumbEntry('ui-tool-preferences', Dict::S('UI:Preferences'), Dict::S('UI:Preferences'), '',\n\t\t\t\t\t'fas fa-user-cog', iTopWebPage::ENUM_BREADCRUMB_ENTRY_ICON_TYPE_CSS_CLASSES);\n\t\t\t\tDisplayPreferences($oPage);\n\t\t}\n\t}\n\t\n\t$oPage->output();\n}\ncatch(CoreException $e)\n{\n\trequire_once(APPROOT.'/setup/setuppage.class.inc.php');\n\t$oP = new ErrorPage(Dict::S('UI:PageTitle:FatalError'));\n\t$oP->add(\"<h1>\".Dict::S('UI:FatalErrorMessage').\"</h1>\\n\");\t\n\t$oP->error(Dict::Format('UI:Error_Details', $e->getHtmlDesc()));\t\n\t$oP->output();\n\n\tif (MetaModel::IsLogEnabledIssue())\n\t{\n\t\tif (MetaModel::IsValidClass('EventIssue'))\n\t\t{\n\t\t\t$oLog = new EventIssue();\n\n\t\t\t$oLog->Set('message', $e->getMessage());\n\t\t\t$oLog->Set('userinfo', '');\n\t\t\t$oLog->Set('issue', $e->GetIssue());\n\t\t\t$oLog->Set('impact', 'Page could not be displayed');\n\t\t\t$oLog->Set('callstack', $e->getTrace());\n\t\t\t$oLog->Set('data', $e->getContextData());\n\t\t\t$oLog->DBInsertNoReload();\n\t\t}\n\n\t\tIssueLog::Error($e->getMessage());\n\t}\n\n\t// For debugging only\n\t//throw $e;\n}\ncatch(Exception $e)\n{\n\trequire_once(APPROOT.'/setup/setuppage.class.inc.php');\n\t$oP = new ErrorPage(Dict::S('UI:PageTitle:FatalError'));\n\t$oP->add(\"<h1>\".Dict::S('UI:FatalErrorMessage').\"</h1>\\n\");\t\n\t$oP->error(Dict::Format('UI:Error_Details', $e->getMessage()));\t\n\t$oP->output();\n\n\tif (MetaModel::IsLogEnabledIssue())\n\t{\n\t\tif (MetaModel::IsValidClass('EventIssue'))\n\t\t{\n\t\t\t$oLog = new EventIssue();\n\n\t\t\t$oLog->Set('message', $e->getMessage());\n\t\t\t$oLog->Set('userinfo', '');\n\t\t\t$oLog->Set('issue', 'PHP Exception');\n\t\t\t$oLog->Set('impact', 'Page could not be displayed');\n\t\t\t$oLog->Set('callstack', $e->getTrace());\n\t\t\t$oLog->Set('data', array());\n\t\t\t$oLog->DBInsertNoReload();\n\t\t}\n\n\t\tIssueLog::Error($e->getMessage());\n\t}\n}\n"], "fixing_code": ["<?php\n/*\n * @copyright   Copyright (C) 2010-2021 Combodo SARL\n * @license     http://opensource.org/licenses/AGPL-3.0\n */\n\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Button\\ButtonUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\FieldSet\\FieldSetUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Form\\Form;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Html\\Html;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\InputUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\SelectOptionUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\SelectUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Panel\\Panel;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Panel\\PanelUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Title\\TitleUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\Component\\Toolbar\\ToolbarUIBlockFactory;\nuse Combodo\\iTop\\Application\\UI\\Base\\iUIBlock;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\MultiColumn\\Column\\Column;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\MultiColumn\\MultiColumn;\nuse Combodo\\iTop\\Application\\UI\\Base\\Layout\\PageContent\\PageContentFactory;\nuse Combodo\\iTop\\Application\\UI\\Preferences\\BlockShortcuts\\BlockShortcuts;\n\nrequire_once('../approot.inc.php');\nrequire_once(APPROOT.'/application/application.inc.php');\nrequire_once(APPROOT.'/application/startup.inc.php');\n\n/**\n * Displays the user's changeable preferences\n * @param $oP WebPage The web page used for the output\n */\nfunction DisplayPreferences($oP)\n{\n\t$oContentLayout = PageContentFactory::MakeStandardEmpty();\n\t$oAppContext = new ApplicationContext();\n\t$sURL = utils::GetAbsoluteUrlAppRoot().'pages/UI.php?'.$oAppContext->GetForLink();\n\n\t$oContentLayout->AddMainBlock(TitleUIBlockFactory::MakeForPage(Dict::S('UI:Preferences:Title')));\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// User interface\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\t// Create panel\n\t$oUIPanel = PanelUIBlockFactory::MakeNeutral(Dict::S('UI:Preferences:UserInterface:Title'));\n\t$oContentLayout->AddMainBlock($oUIPanel);\n\n\t// Create form\n\t$oUIForm = new Form('ibo-form-for-user-interface-preferences');\n\t$oUIPanel->AddSubBlock($oUIForm);\n\n\t// Prepare form\n\t$oUIForm->AddSubBlock(InputUIBlockFactory::MakeForHidden('operation', 'apply_user_interface'))\n\t\t->AddSubBlock($oAppContext->GetForFormBlock())\n\t\t->SetOnSubmitJsCode('return ValidateOtherSettings();');\n\n\t$oMultiColContainer = new MultiColumn();\n\t$oUIForm->AddSubBlock($oMultiColContainer);\n\n\t$oFirstColumn = new Column();\n\t$oMultiColContainer->AddColumn($oFirstColumn);\n\n\t$oSecondColumn = new Column();\n\t$oMultiColContainer->AddColumn($oSecondColumn);\n\n\t// Prepare buttons\n\t$oUIToolbar = ToolbarUIBlockFactory::MakeForButton(null, ['ibo-is-fullwidth']);\n\t$oUIForm->AddSubBlock($oUIToolbar);\n\n\t// - Cancel button\n\t$oUICancelButton = ButtonUIBlockFactory::MakeForCancel();\n\t$oUIToolbar->AddSubBlock($oUICancelButton);\n\t$oUICancelButton->SetOnClickJsCode(\"window.location.href = '$sURL'\");\n\n\t// - Submit button\n\t$oUISubmitButton = ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Apply'), 'operation', 'apply_user_interface', true);\n\t$oUIToolbar->AddSubBlock($oUISubmitButton);\n\n\t// General\n\t$oGeneralFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:General:Title'), 'ibo-fieldset-for-language-preferences');\n\t$oGeneralFieldset->AddSubBlock(GetLanguageFieldBlock());\n\tif (true === MetaModel::GetConfig()->Get('user_preferences.allow_backoffice_theme_override')) {\n\t\t$oGeneralFieldset->AddSubBlock(GetThemeFieldBlock());\n\t}\n\t$oFirstColumn->AddSubBlock($oGeneralFieldset);\n\n\t// Lists\n\t$oListsFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:Lists:Title'), 'ibo-fieldset-for-lists-preferences');\n\t$oFirstColumn->AddSubBlock($oListsFieldset);\n\t$oListsFieldset->AddSubBlock(GetListPageSizeFieldBlock());\n\n\t// Tabs\n\t$oTabsFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:Tabs:Title'), 'ibo-fieldset-for-tabs-preferences');\n\t$oFirstColumn->AddSubBlock($oTabsFieldset);\n\t$oTabsFieldset->AddSubBlock(GetTabsLayoutFieldBlock());\n\t$oTabsFieldset->AddSubBlock(GetTabsNavigationFieldBlock());\n\n\t// Rich text editor\n\t$oRichTextFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:RichText:Title'), 'ibo-fieldset-for-rich-text-preferences');\n\t$oSecondColumn->AddSubBlock($oRichTextFieldset);\n\t$oRichTextFieldset->AddSubBlock(GetRichTextToolbarExpandedFieldBlock());\n\n\t// Activity panel\n\t$oActivityPanelfieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:Preferences:ActivityPanel:Title'), 'ibo-fieldset-for-activity-panel');\n\t$oSecondColumn->AddSubBlock($oActivityPanelfieldset);\n\t$oActivityPanelfieldset->AddSubBlock(GetActivityPanelEntryFormOpenedFieldBlock());\n\n\t// Misc. options\n\t$oMiscOptionsFieldset = FieldSetUIBlockFactory::MakeStandard(Dict::S('UI:FavoriteOtherSettings'), 'ibo-fieldset-for-misc-options');\n\t$oSecondColumn->AddSubBlock($oMiscOptionsFieldset);\n\t$oMiscOptionsFieldset->AddSubBlock(GetObsoleteDataFieldBlock());\n\n\t$oP->add_script(\n\t\t<<<JS\nfunction ValidateOtherSettings()\n{\n\tvar sPageLength = $('#default_page_size').val();\n\tvar iPageLength = parseInt(sPageLength , 10);\n\tif (/^[0-9]+$/.test(sPageLength) && (iPageLength > 0))\n\t{\n\t\t$('#v_default_page_size').html('');\n\t\t$('#ibo-misc-settings-submit').prop('disabled', false);\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\t$('#v_default_page_size').html('<img src=\"../images/validation_error.png\"/>');\n\t\t$('#ibo-misc-settings-submit').prop('disabled', true);\n\t\treturn false;\n\t}\n}\nJS\n\t);\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// Favorite Organizations\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\n\t$oFavoriteOrganizationsBlock = new Panel(Dict::S('UI:FavoriteOrganizations'), array(), 'grey', 'ibo-favorite-organizations');\n\t$oFavoriteOrganizationsBlock->SetSubTitle(Dict::S('UI:FavoriteOrganizations+'));\n\t$oFavoriteOrganizationsBlock->AddCSSClass('ibo-datatable-panel');\n\t$oFavoriteOrganizationsForm = new Form();\n\t$oFavoriteOrganizationsBlock->AddSubBlock($oFavoriteOrganizationsForm);\n\t// Favorite organizations: the organizations listed in the drop-down menu\n\t$sOQL = ApplicationMenu::GetFavoriteSiloQuery();\n\t$oFilter = DBObjectSearch::FromOQL($sOQL);\n\t$oBlock = new DisplayBlock($oFilter, 'list', false);\n\n\t$aFavoriteOrgs = appUserPreferences::GetPref('favorite_orgs', null);\n\n\t$sIdFavoriteOrganizations = 1;\n\t$oFavoriteOrganizationsForm->AddSubBlock($oBlock->GetDisplay($oP, $sIdFavoriteOrganizations, [\n\t\t'menu'                => false,\n\t\t'selection_mode'      => true,\n\t\t'selection_type'      => 'multiple',\n\t\t'table_id'            => 'user_prefs',\n\t\t'surround_with_panel' => false,\n\t\t'selected_rows'       => $aFavoriteOrgs,\n\t]));\n\t$oFavoriteOrganizationsForm->AddSubBlock($oAppContext->GetForFormBlock());\n\n\t// Button toolbar\n\t$oFavoriteOrganizationsToolBar = ToolbarUIBlockFactory::MakeForButton(null, ['ibo-is-fullwidth']);\n\t$oFavoriteOrganizationsForm->AddSubBlock($oFavoriteOrganizationsToolBar);\n\n\t// - Cancel button\n\t$oFavoriteOrganizationsCancelButton = ButtonUIBlockFactory::MakeForCancel(Dict::S('UI:Button:Cancel'));\n\t$oFavoriteOrganizationsToolBar->AddSubBlock($oFavoriteOrganizationsCancelButton);\n\t$oFavoriteOrganizationsCancelButton->SetOnClickJsCode(\"window.location.href = '$sURL'\");\n\t// - Submit button\n\t$oFavoriteOrganizationsSubmitButton = ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Apply'), 'operation', 'apply', true);\n\t$oFavoriteOrganizationsToolBar->AddSubBlock($oFavoriteOrganizationsSubmitButton);\n\n\t// TODO 3.0 have this code work again, currently it prevents the display of favorite organizations and shortcuts.\n\t//\tif ($aFavoriteOrgs == null) {\n\t//\t\t// All checked\n\t//\t\t$oP->add_ready_script(\n\t//\t\t\t<<<JS\n\t//\t$('#$sIdFavoriteOrganizations.checkAll').prop('checked', true);\n\t//\tcheckAllDataTable('datatable_$sIdFavoriteOrganizations',true,'$sIdFavoriteOrganizations');\n\t//JS\n\t//\t\t);\n\t//\n\t//\t}\n\n\t$oContentLayout->AddMainBlock($oFavoriteOrganizationsBlock);\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// Shortcuts\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\n\t$oShortcutsBlock = new BlockShortcuts(Dict::S('Menu:MyShortcuts'), array(), 'grey', 'ibo-shortcuts');\n\t$oShortcutsBlock->AddCSSClass('ibo-datatable-panel');\n\n\t$oShortcutsBlock->sIdShortcuts = 'shortcut_list';\n\t$oShortcutsFilter = new DBObjectSearch('Shortcut');\n\t$oShortcutsFilter->AddCondition('user_id', UserRights::GetUserId(), '=');\n\n\t$oBlock = new DisplayBlock($oShortcutsFilter, 'list', false);\n\t$oShortcutsBlock->AddSubBlock($oBlock->GetDisplay($oP, $oShortcutsBlock->sIdShortcuts, [\n\t\t'view_link'           => false,\n\t\t'menu'                => false,\n\t\t'toolkit_menu'        => false,\n\t\t'selection_mode'      => true,\n\t\t'selection_type'      => 'multiple',\n\t\t'table_id'            => 'user_prefs_shortcuts',\n\t\t'surround_with_panel' => false,\n\t\t'id_for_select'       => 'Shortcut/_key_',\n\t]));\n\n\t$oSet = new DBObjectSet($oShortcutsFilter);\n\tif ($oSet->Count() > 0) {\n\t\t$oShortcutsToolBar = ToolbarUIBlockFactory::MakeForButton();\n\t\t$oShortcutsBlock->AddSubBlock($oShortcutsToolBar);\n\t\t// - Rename button\n\t\t$oShortcutsRenameButton = ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Rename'), null, null, false,\n\t\t\t\"shortcut_btn_rename\");\n\t\t$oShortcutsToolBar->AddSubBlock($oShortcutsRenameButton);\n\t\t// - Delete button\n\t\t$oShortcutsDeleteButton = ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Button:Delete'), null, null, false,\n\t\t\t\"shortcut_btn_delete\");\n\t\t$oShortcutsToolBar->AddSubBlock($oShortcutsDeleteButton);\n\t}\n\t$oContentLayout->AddMainBlock($oShortcutsBlock);\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// Newsroom\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\t$iCountProviders = 0;\n\t$oUser = UserRights::GetUserObject();\n\t$aProviders = MetaModel::EnumPlugins('iNewsroomProvider');\n\tforeach($aProviders as $oProvider)\n\t{\n\t\tif ($oProvider->IsApplicable($oUser))\n\t\t{\n\t\t\t$iCountProviders++;\n\t\t}\n\t}\n\n\t$bNewsroomEnabled = (MetaModel::GetConfig()->Get('newsroom_enabled') !== false);\n\tif ($bNewsroomEnabled && ($iCountProviders > 0))\n\t{\n\t\t$oNewsroomBlock = new Panel(Dict::S('UI:Newsroom:Preferences'), array(), 'grey', 'ibo-newsroom');\n\n\t\t$sNewsroomHtml = '';\n\t\t$sNewsroomHtml .= '<form method=\"post\">';\n\t\t$iNewsroomDisplaySize = (int)appUserPreferences::GetPref('newsroom_display_size', 7);\n\n\t\tif ($iNewsroomDisplaySize < 1) $iNewsroomDisplaySize = 1;\n\t\tif ($iNewsroomDisplaySize > 20) $iNewsroomDisplaySize = 20;\n\t\t$sInput = '<input min=\"1\" max=\"20\" id=\"newsroom_display_size\" type=\"number\" size=\"2\" name=\"newsroom_display_size\" value=\"'.$iNewsroomDisplaySize.'\">';\n\t\t$sIcon = '<i id=\"newsroom_menu_icon\" class=\"top-right-icon icon-additional-arrow fas fa-bell\" style=\"top: 0;\"></i>';\n\t\t$sNewsroomHtml .= Dict::Format('UI:Newsroom:DisplayAtMost_X_Messages', $sInput, $sIcon);\n\n\t\t/**\n\t\t * @var iNewsroomProvider[] $aProviders\n\t\t */\n\t\t$sAppRootUrl = utils::GetAbsoluteUrlAppRoot();\n\t\tforeach($aProviders as $oProvider)\n\t\t{\n\t\t\tif ($oProvider->IsApplicable($oUser))\n\t\t\t{\n\t\t\t\t$sUrl = $oProvider->GetPreferencesUrl();\n\t\t\t\t$sProviderClass = get_class($oProvider);\n\t\t\t\t$sPreferencesLink = '';\n\t\t\t\tif ($sUrl !== null)\n\t\t\t\t{\n\t\t\t\t\tif(substr($sUrl, 0, strlen($sAppRootUrl)) === $sAppRootUrl)\n\t\t\t\t\t{\n\t\t\t\t\t\t$sTarget = ''; // Internal link, open in the same window\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$sTarget = ' target=\"_blank\"'; // External link, open in new window\n\t\t\t\t\t}\n\t\t\t\t\t$sPreferencesLink = ' - <a class=\".newsroom-configuration-link\" href=\"'.$sUrl.'\"'.$sTarget.'>'.Dict::S('UI:Newsroom:ConfigurationLink').'</a>';\n\t\t\t\t}\n\t\t\t\t$sChecked = appUserPreferences::GetPref('newsroom_provider_'.$sProviderClass, true) ? ' checked=\"\" ' : '';\n\t\t\t\t$sNewsroomHtml .= '<div><input type=\"checkbox\" id=\"newsroom_provider_'.$sProviderClass.'\" value=\"on\"'.$sChecked.'name=\"newsroom_provider_'.$sProviderClass.'\"><label for=\"newsroom_provider_'.$sProviderClass.'\">'.Dict::Format('UI:Newsroom:DisplayMessagesFor_Provider',\n\t\t\t\t\t\t$oProvider->GetLabel()).'</label> '.$sPreferencesLink.'</div>';\n\t\t\t}\n\t\t}\n\n\t\t$sNewsroomHtml .= $oAppContext->GetForForm();\n\n\t\t$oNewsroomToolbar = ToolbarUIBlockFactory::MakeForButton();\n\n\t\t// - Reset button\n\t\t$oNewsroomResetCacheButton = ButtonUIBlockFactory::MakeForAlternativeDestructiveAction(Dict::S('UI:Newsroom:ResetCache'));\n\t\t$oNewsroomResetCacheButton->SetOnClickJsCode(\"$('#ibo-navigation-menu--notifications-menu').newsroom_menu('clearCache')\");\n\t\t$oNewsroomToolbar->AddSubBlock($oNewsroomResetCacheButton);\n\t\t// - Cancel button\n\t\t$oNewsroomCancelButton = ButtonUIBlockFactory::MakeForCancel(Dict::S('UI:Button:Cancel'));\n\t\t$oNewsroomCancelButton->SetOnClickJsCode(\"window.location.href = '$sURL'\");\n\t\t$oNewsroomToolbar->AddSubBlock($oNewsroomCancelButton);\n\t\t// - Submit button\n\t\t$oNewsroomSubmitButton = ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Apply'), 'operation',\n\t\t\t'apply_newsroom_preferences', true);\n\t\t$oNewsroomToolbar->AddSubBlock($oNewsroomSubmitButton);\n\n\n\t\t$sNewsroomEndHtml = '</form>';\n\t\t$oNewsroomEndHtmlBlock = new Html($sNewsroomEndHtml);\n\n\t\t$oNewsroomHtmlBlock = new Html($sNewsroomHtml);\n\t\t$oNewsroomBlock->AddSubBlock($oNewsroomHtmlBlock);\n\t\t$oNewsroomBlock->AddSubBlock($oNewsroomToolbar);\n\t\t$oNewsroomBlock->AddSubBlock($oNewsroomEndHtmlBlock);\n\t\t$oContentLayout->AddMainBlock($oNewsroomBlock);\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// User defined keyboard shortcut\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\n\t// Panel\n\t$oKeyboardShortcutBlock = new Panel(Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Title'), array(), 'grey', 'ibo_keyboard_shortcuts');\n\t// Form\n\t$oKeyboardShortcutForm = new Form('ibo-form-for-user-interface-preferences');\n\t$oKeyboardShortcutForm->AddSubBlock(InputUIBlockFactory::MakeForHidden('operation', 'apply_keyboard_shortcuts'))\n\t\t->AddSubBlock($oAppContext->GetForFormBlock());\n\n\t$oKeyboardShortcutBlock->AddSubBlock($oKeyboardShortcutForm);\n\n\t$sKeyboardShortcutBlockId = $oKeyboardShortcutBlock->GetId();\n\t// JS keyboard listener\n\t$oP->add_script(\n\t\t<<<JS\n    function recordSequence$sKeyboardShortcutBlockId(fCallback) {\n         Mousetrap.record(function(sequence) {\n            fCallback(sequence.join(' '));\n        });\n    }\nJS\n\t);\n\t// For each existing shortcut keyboard existing in iTop\n\t$aKeyboardShortcuts = utils::GetAllKeyboardShortcutsPrefs();\n\t$sKeyboardShortcutsInputHint = Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Input:Hint');\n\t$sKeyboardShortcutsButtonTooltip = Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Button:Tooltip');\n\tforeach ($aKeyboardShortcuts as $sKeyboardShortcutId => $aKeyboardShortcut) {\n\t\t// Recording button\n\t\t$oButton = ButtonUIBlockFactory::MakeForAlternativeSecondaryAction('');\n\t\t$oButton->SetIconClass('fas fa-pen')->SetTooltip($sKeyboardShortcutsButtonTooltip)->SetOnClickJsCode(\n\t\t\t<<<JS\nlet oPanel = $(this).siblings('input');\nvar fCallback = function(sVal){\n\toPanel.removeClass('ibo-is-focus').val(sVal);\n}\noPanel.addClass('ibo-is-focus').val('$sKeyboardShortcutsInputHint')\nrecordSequence$sKeyboardShortcutBlockId(fCallback);\nJS\n\t\t);\n\n\t\t$oInput = InputUIBlockFactory::MakeForInputWithLabel(Dict::S($aKeyboardShortcut['label']), $sKeyboardShortcutId, $aKeyboardShortcut['key'], $sKeyboardShortcutId, 'text');\n\t\t$oInput->GetInput()->AddCSSClasses(['ibo-keyboard-shortcut--input']);\n\t\t$oKeyboardShortcutForm->AddSubBlock(new Html('<div class=\"ibo-keyboard-shortcut--shortcut\">'));\n\t\t$oKeyboardShortcutForm->AddSubBlock($oInput);\n\t\t$oKeyboardShortcutForm->AddSubBlock($oButton);\n\t\t$oKeyboardShortcutForm->AddSubBlock(new Html('</div>'));\n\t}\n\n\t// Prepare buttons\n\t$oKeyboardShortcutToolbar = ToolbarUIBlockFactory::MakeForButton(null, ['ibo-is-fullwidth']);\n\t$oKeyboardShortcutForm->AddSubBlock($oKeyboardShortcutToolbar);\n\n\t// - Cancel button\n\t$oKeyboardShortcutCancelButton = ButtonUIBlockFactory::MakeForCancel();\n\t$oKeyboardShortcutToolbar->AddSubBlock($oKeyboardShortcutCancelButton);\n\t$oKeyboardShortcutCancelButton->SetOnClickJsCode(\"window.location.href = '$sURL'\");\n\n\t// - Reset button\n\t$oKeyboardShortcutResetButton = ButtonUIBlockFactory::MakeForSecondaryAction(Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Button:Reset'), 'operation', 'reset_keyboard_shortcuts', true);\n\t$oKeyboardShortcutResetButton->SetTooltip(Dict::S('UI:Preferences:PersonalizeKeyboardShortcuts:Button:Reset:Tooltip'));\n\t$oKeyboardShortcutToolbar->AddSubBlock($oKeyboardShortcutResetButton);\n\t// - Submit button\n\t$oKeyboardShortcutSubmitButton = ButtonUIBlockFactory::MakeForPrimaryAction(Dict::S('UI:Button:Apply'), 'operation', 'apply_keyboard_shortcuts', true);\n\t$oKeyboardShortcutToolbar->AddSubBlock($oKeyboardShortcutSubmitButton);\n\n\n\t$oContentLayout->AddMainBlock($oKeyboardShortcutBlock);\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// User picture placeholder\n\t//\n\t//////////////////////////////////////////////////////////////////////////\n\n\t$oUserPicturePlaceHolderBlock = new Panel(Dict::S('UI:Preferences:ChooseAPlaceholder'), array(), 'grey', 'ibo-user-picture-placeholder');\n\n\t$sUserPicturesFolder = '../images/user-pictures/';\n\t$sUserDefaultPicture = appUserPreferences::GetPref('user_picture_placeholder', 'default-placeholder.png');\n\t$sUserPicturePlaceHolderHtml = '';\n\t$sUserPicturePlaceHolderHtml .= '<p>'.Dict::S('UI:Preferences:ChooseAPlaceholder+').'</p> <div class=\"ibo-preferences--user-preferences--picture-placeholder\">';\n\tforeach (scandir($sUserPicturesFolder) as $sUserPicture)\n\t{\n\t\tif ($sUserPicture === '.' || $sUserPicture === '..')\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\t$sAdditionalClass = '';\n\t\tif ($sUserDefaultPicture === $sUserPicture)\n\t\t{\n\t\t\t$sAdditionalClass = ' ibo-is-active';\n\t\t}\n\t\t$sUserPicturePlaceHolderHtml .= '<a class=\"ibo-preferences--user-preferences--picture-placeholder--image'.$sAdditionalClass.'\" data-image-name=\"'.$sUserPicture.'\" data-role=\"ibo-preferences--user-preferences--picture-placeholder--image\" href=\"#\"> <img src=\"'.$sUserPicturesFolder.$sUserPicture.'\"/> </a>';\n\t}\n\t$oP->add_ready_script(\n\t\t<<<JS\n$('[data-role=\"ibo-preferences--user-preferences--picture-placeholder--image\"]').on('click',function(){\n\tconst me = this;\n\t\n\t// Save new preference\n\t$.post(\n\t\tGetAbsoluteUrlAppRoot()+'pages/ajax.render.php',\n\t\t{\n\t\t\t'operation': 'preferences_set_user_picture',\n\t\t\t'image_filename': $(this).attr('data-image-name')\n\t\t}\n\t)\n\t.done(function(oData){\n\t\tif(false === oData.success){\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Update selection\n\t\t$('[data-role=\"ibo-preferences--user-preferences--picture-placeholder--image\"]').removeClass('ibo-is-active');\n\t\t$(me).addClass('ibo-is-active');\n\t\t\n\t\t// Update navigation menu\n\t\t$('[data-role=\"ibo-navigation-menu--user-picture--image\"]').attr('src', oData.data.image_url);\n\t});\n});\nJS\n);\n\t$sUserPicturePlaceHolderHtml .=\n\t\t<<<HTML\n</div>\nHTML\n\t;\n\t$oUserPicturePlaceHolderHtmlBlock = new Html($sUserPicturePlaceHolderHtml);\n\t$oUserPicturePlaceHolderBlock->AddSubBlock($oUserPicturePlaceHolderHtmlBlock);\n\t$oContentLayout->AddMainBlock($oUserPicturePlaceHolderBlock);\n\n\t/** @var iPreferencesExtension $oLoginExtensionInstance */\n\tforeach (MetaModel::EnumPlugins('iPreferencesExtension') as $oPreferencesExtensionInstance)\n\t{\n\t\t$oPreferencesExtensionInstance->DisplayPreferences($oP);\n\t}\n\n\t//////////////////////////////////////////////////////////////////////////\n\t//\n\t// Footer\n\t//\n\t$oP->add_ready_script(\"$('#fav_page_length').bind('keyup change', function(){ ValidateOtherSettings(); })\");\n\t$oP->SetContentLayout($oContentLayout);\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @since 3.0.0\n */\nfunction GetLanguageFieldBlock(): iUIBlock\n{\n\t$aAvailableLanguages = Dict::GetLanguages();\n\t$aSortedLanguages = array();\n\tforeach ($aAvailableLanguages as $sCode => $aLang) {\n\t\tif (MetaModel::GetConfig()->Get('demo_mode') && ($sCode !== Dict::GetUserLanguage())) {\n\t\t\t// Demo mode: only the current user language is listed in the available choices\n\t\t\tcontinue;\n\t\t}\n\t\t$aSortedLanguages[$aLang['description']] = $sCode;\n\t}\n\tksort($aSortedLanguages);\n\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('language', Dict::S('UI:FavoriteLanguage'));\n\t/** @var \\Combodo\\iTop\\Application\\UI\\Base\\Component\\Input\\Select\\Select $oSelectInput */\n\tforeach ($aSortedLanguages as $sCode) {\n\t\t$bSelected = ($sCode === Dict::GetUserLanguage());\n\t\t$oSelect->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption($sCode, $aAvailableLanguages[$sCode]['description'].' ('.$aAvailableLanguages[$sCode]['localized_description'].')', $bSelected));\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @since 3.0.0\n */\nfunction GetThemeFieldBlock(): iUIBlock\n{\n\t$aAvailableThemes = ThemeHandler::GetAvailableThemes();\n\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('theme', Dict::S('UI:Preferences:General:Theme'));\n\tforeach ($aAvailableThemes as $sCode => $sLabel) {\n\t\tif (MetaModel::GetConfig()->Get('demo_mode') && ($sCode !== ThemeHandler::GetApplicationThemeId())) {\n\t\t\t// Demo mode: only the current app. theme is listed in the available choices\n\t\t\tcontinue;\n\t\t}\n\n\t\t$bSelected = ($sCode === ThemeHandler::GetCurrentUserThemeId());\n\t\tif ($sCode === MetaModel::GetConfig()->Get('backoffice_default_theme')) {\n\t\t\t$sLabel = Dict::Format('UI:Preferences:General:Theme:DefaultThemeLabel', $sLabel);\n\t\t}\n\t\t$oSelect->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption($sCode, $sLabel, $bSelected));\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetListPageSizeFieldBlock(): iUIBlock\n{\n\t$iDefaultPageSize = appUserPreferences::GetPref('default_page_size', MetaModel::GetConfig()->GetMinDisplayLimit());\n\n\t$sInputHtml = '<input id=\"default_page_size\" name=\"default_page_size\" type=\"text\" size=\"3\" value=\"'.$iDefaultPageSize.'\"/><span id=\"v_default_page_size\"></span>';\n\t$sHtml = '<p>'.Dict::Format('UI:Favorites:Default_X_ItemsPerPage', $sInputHtml).'</p>';\n\n\treturn new Html($sHtml);\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @return 3.0.0\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @throws \\CoreException\n */\nfunction GetTabsLayoutFieldBlock(): iUIBlock\n{\n\t$sCurrentValue = appUserPreferences::GetPref('tab_layout', false);\n\n\t$aOptionsValues = [\n\t\t'horizontal',\n\t\t'vertical',\n\t];\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('tab_layout', Dict::S('UI:Preferences:Tabs:Layout:Label'));\n\tforeach ($aOptionsValues as $sValue) {\n\t\t$oSelect->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption(\n\t\t\t$sValue,\n\t\t\tDict::S('UI:Preferences:Tabs:Layout:'.ucfirst($sValue)),\n\t\t\t$sValue === $sCurrentValue)\n\t\t);\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetTabsNavigationFieldBlock(): iUIBlock\n{\n\t$bCurrentValue = appUserPreferences::GetPref('tab_scrollable', false);\n\t$sCurrentValueAsString = $bCurrentValue ? 'true' : 'false';\n\n\t$aOptionsValues = [\n\t\t'true' => 'Scrollable',\n\t\t'false' => 'Classic',\n\t];\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('tab_scrollable', Dict::S('UI:Preferences:Tabs:Scrollable:Label'));\n\tforeach ($aOptionsValues as $sValue => $sDictEntrySuffix) {\n\t\t$oSelect->AddSubBlock(SelectOptionUIBlockFactory::MakeForSelectOption(\n\t\t\t$sValue,\n\t\t\tDict::S('UI:Preferences:Tabs:Scrollable:'.$sDictEntrySuffix),\n\t\t\t$sValue === $sCurrentValueAsString)\n\t\t);\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetRichTextToolbarExpandedFieldBlock(): iUIBlock\n{\n\t$bCurrentValue = isset(utils::GetCkeditorPref()['toolbarStartupExpanded']) ? (bool)utils::GetCkeditorPref()['toolbarStartupExpanded'] : false;\n\t$sCurrentValueAsString = $bCurrentValue ? 'true' : 'false';\n\n\t$aOptionsValues = [\n\t\t'true' => 'Expanded',\n\t\t'false' => 'Collapsed',\n\t];\n\t$oSelect = SelectUIBlockFactory::MakeForSelectWithLabel('toolbarexpanded', Dict::S('UI:Preferences:RichText:ToolbarState'));\n\tforeach ($aOptionsValues as $sValue => $sDictEntrySuffix) {\n\t\t$oSelect->AddOption(SelectOptionUIBlockFactory::MakeForSelectOption(\n\t\t\t$sValue,\n\t\t\tDict::S('UI:Preferences:RichText:ToolbarState:'.$sDictEntrySuffix),\n\t\t\t$sValue === $sCurrentValueAsString)\n\t\t);\n\t}\n\n\treturn $oSelect;\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetActivityPanelEntryFormOpenedFieldBlock(): iUIBlock\n{\n\t// First check if user has a pref.\n\t$bOpened = appUserPreferences::GetPref('activity_panel.is_entry_form_opened', null);\n\tif (null === $bOpened) {\n\t\t// Otherwise get the default config. param.\n\t\t$bOpened = MetaModel::GetConfig()->Get('activity_panel.entry_form_opened_by_default');\n\t}\n\t$sCheckedForHtmlAttribute = $bOpened ? 'checked=\"checked\"' : '';\n\n\t$sLabel = Dict::S('UI:Preferences:ActivityPanel:EntryFormOpened');\n\t$sLabelDescription = Dict::S('UI:Preferences:ActivityPanel:EntryFormOpened+');\n\t$sHtml = <<<HTML\n<p>\n\t<label data-tooltip-content=\"{$sLabelDescription}\">\n\t\t<span>{$sLabel}</span>\n\t\t<input type=\"checkbox\" name=\"activity_panel_entry_form_opened\" value=\"1\" {$sCheckedForHtmlAttribute}>\n\t</label>\n</p>\nHTML;\n\n\treturn new Html($sHtml);\n}\n\n/**\n * @return \\Combodo\\iTop\\Application\\UI\\Base\\iUIBlock\n * @throws \\CoreException\n * @throws \\CoreUnexpectedValue\n * @throws \\MySQLException\n * @since 3.0.0\n */\nfunction GetObsoleteDataFieldBlock(): iUIBlock\n{\n\t$bShow = utils::IsArchiveMode() || appUserPreferences::GetPref('show_obsolete_data', MetaModel::GetConfig()->Get('obsolescence.show_obsolete_data'));\n\t$sSelectedForHtmlAttribute = $bShow ? ' checked=\"checked\"' : '';\n\t$sDisabledForHtmlAttribute = utils::IsArchiveMode() ? 'disabled=\"disabled\"' : '';\n\n\t$sLabel = Dict::S('UI:Favorites:ShowObsoleteData');\n\t$sLabelDescription = Dict::S('UI:Favorites:ShowObsoleteData+');\n\t$sHtml = <<<HTML\n<p>\n\t<label data-tooltip-content=\"{$sLabelDescription}\">\n\t\t<span>{$sLabel}</span>\n\t\t<input type=\"checkbox\" name=\"show_obsolete_data\" value=\"1\"{$sSelectedForHtmlAttribute}{$sDisabledForHtmlAttribute}>\n\t</label>\n</p>\nHTML;\n\n\treturn new Html($sHtml);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n//\n// Main program\n//\n/////////////////////////////////////////////////////////////////////////////\n\nrequire_once(APPROOT.'/application/loginwebpage.class.inc.php');\nLoginWebPage::DoLogin(); // Check user rights and prompt if needed\n\n$iStep = utils::ReadParam('step', 1);\n\n$oPage = new iTopWebPage(Dict::S('UI:Preferences'));\n$oPage->DisableBreadCrumb();\n$sOperation = utils::ReadParam('operation', '');\n\ntry {\n\t$bOperationUsed = false;\n\t/** @var iPreferencesExtension $oLoginExtensionInstance */\n\tforeach (MetaModel::EnumPlugins('iPreferencesExtension') as $oPreferencesExtensionInstance) {\n\t\tif ($oPreferencesExtensionInstance->ApplyPreferences($oPage, $sOperation)) {\n\t\t\t$bOperationUsed = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (!$bOperationUsed) {\n\t\tswitch ($sOperation) {\n\t\t\tcase 'apply':\n\t\t\t\t$oFilter = DBObjectSearch::FromOQL('SELECT Organization');\n\t\t\t\t$sSelectionMode = utils::ReadParam('selectionMode', '');\n\t\t\t\t$aExceptions = utils::ReadParam('storedSelection', array());\n\t\t\t\tif (($sSelectionMode == 'negative') && (count($aExceptions) == 0)) {\n\t\t\t\t\t// All Orgs selected\n\t\t\t\t\tappUserPreferences::SetPref('favorite_orgs', null);\n\t\t\t\t} else {\n\t\t\t\t\t// Some organizations selected... store them\n\t\t\t\t\t$aSelectOrgs = utils::ReadMultipleSelection($oFilter);\n\t\t\t\t\tappUserPreferences::SetPref('favorite_orgs', $aSelectOrgs);\n\t\t\t\t}\n\t\t\t\t$oPage->ResetNavigationMenuLayout();\n\t\t\t\tDisplayPreferences($oPage);\n\t\t\t\tbreak;\n\n\t\t\tcase 'apply_user_interface':\n\t\t\t\t// Language\n\t\t\t\t$sLangCode = utils::ReadParam('language', 'EN US');\n\t\t\t\t$oUser = UserRights::GetUserObject();\n\t\t\t\t$oUser->Set('language', $sLangCode);\n\n\t\t\t\tutils::PushArchiveMode(false);\n\t\t\t\t$oUser->AllowWrite(true);\n\t\t\t\t$oUser->DBUpdate();\n\t\t\t\tutils::PopArchiveMode();\n\n\t\t\t\t// Theme\n\t\t\t\t$sThemeId = utils::ReadParam('theme', '');\n\t\t\t\tif (!empty($sThemeId) && ThemeHandler::IsValidTheme($sThemeId)) {\n\t\t\t\t\tappUserPreferences::SetPref('backoffice_theme', $sThemeId);\n\t\t\t\t}\n\n\t\t\t\t// List\n\t\t\t\t$iDefaultPageSize = (int)utils::ReadParam('default_page_size', -1);\n\t\t\t\tif ($iDefaultPageSize > 0) {\n\t\t\t\t\tappUserPreferences::SetPref('default_page_size', $iDefaultPageSize);\n\t\t\t\t}\n\n\t\t\t\t// Tabs\n\t\t\t\t// - Layout\n\t\t\t\t$sLayout = utils::ReadParam('tab_layout', 'horizontal');\n\t\t\t\t$sLayoutAllowedValues = ['horizontal', 'vertical'];\n\t\t\t\tif (in_array($sLayout, $sLayoutAllowedValues, true)) {\n\t\t\t\t\tappUserPreferences::SetPref('tab_layout', $sLayout);\n\t\t\t\t}\n\n\t\t\t\t// - Navigation\n\t\t\t\t$bScrollable = utils::ReadParam('tab_scrollable', 'false') === 'true';\n\t\t\t\tappUserPreferences::SetPref('tab_scrollable', $bScrollable);\n\n\t\t\t\t// Rich text editor\n\t\t\t\t$bToolbarExpanded = utils::ReadParam('toolbarexpanded', 'false') === 'true';\n\t\t\t\t$aRichTextConfig = json_decode(appUserPreferences::GetPref('richtext_config', '{}'), true);\n\t\t\t\t$aRichTextConfig['toolbarStartupExpanded'] = $bToolbarExpanded;\n\t\t\t\tappUserPreferences::SetPref('richtext_config', json_encode($aRichTextConfig));\n\n\t\t\t\t// Activity panel\n\t\t\t\t$bActivityPanelEntryFormOpened = (bool)utils::ReadParam('activity_panel_entry_form_opened', 0);\n\t\t\t\tappUserPreferences::SetPref('activity_panel.is_entry_form_opened', $bActivityPanelEntryFormOpened);\n\n\t\t\t\t// Misc.\n\t\t\t\t// - Obsolete data\n\t\t\t\t$bShowObsoleteData = (bool)utils::ReadParam('show_obsolete_data', 0);\n\t\t\t\tappUserPreferences::SetPref('show_obsolete_data', $bShowObsoleteData);\n\n\t\t\t\t// Redirect to force a reload/display of the page in case language has been changed\n\t\t\t\t$oAppContext = new ApplicationContext();\n\t\t\t\t$sURL = utils::GetAbsoluteUrlAppRoot().'pages/preferences.php?'.$oAppContext->GetForLink();\n\t\t\t\t$oPage->add_header('Location: '.$sURL);\n\t\t\t\tbreak;\n\t\t\tcase 'apply_keyboard_shortcuts':\n\t\t\t\t// Note: Mind the 4 blackslashes, see utils::GetClassesForInterface()\n\t\t\t\t$aShortcutClasses = utils::GetClassesForInterface('iKeyboardShortcut', '', array('[\\\\\\\\/]lib[\\\\\\\\/]', '[\\\\\\\\/]node_modules[\\\\\\\\/]', '[\\\\\\\\/]test[\\\\\\\\/]', '[\\\\\\\\/]tests[\\\\\\\\/]'));\n\t\t\t\t$aShortcutPrefs = [];\n\t\t\t\tforeach ($aShortcutClasses as $cShortcutPlugin) {\n\t\t\t\t\tforeach ($cShortcutPlugin::GetShortcutKeys() as $aShortcutKey) {\n\t\t\t\t\t\t$sKey = utils::ReadParam($aShortcutKey['id'], $aShortcutKey['key'], true, 'raw_data');\n\t\t\t\t\t\t$aShortcutPrefs[$aShortcutKey['id']] = strtolower(utils::HtmlEntities($sKey));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tappUserPreferences::SetPref('keyboard_shortcuts', $aShortcutPrefs);\n\n\t\t\t\tDisplayPreferences($oPage);\n\t\t\t\tbreak;\n\t\t\tcase 'reset_keyboard_shortcuts':\n\t\t\t\tappUserPreferences::UnsetPref('keyboard_shortcuts');\n\n\t\t\t\tDisplayPreferences($oPage);\n\t\t\t\tbreak;\n\t\t\tcase 'apply_newsroom_preferences':\n\t\t\t\t$iCountProviders = 0;\n\t\t\t\t$oUser = UserRights::GetUserObject();\n\t\t\t\t$aProviders = MetaModel::EnumPlugins('iNewsroomProvider');\n\t\t\t\tforeach ($aProviders as $oProvider) {\n\t\t\t\t\tif ($oProvider->IsApplicable($oUser)) {\n\t\t\t\t\t\t$iCountProviders++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$bNewsroomEnabled = (MetaModel::GetConfig()->Get('newsroom_enabled') !== false);\n\t\t\t\tif ($bNewsroomEnabled && ($iCountProviders > 0)) {\n\t\t\t\t\t$iNewsroomDisplaySize = (int)utils::ReadParam('newsroom_display_size', 7);\n\t\t\t\t\tif ($iNewsroomDisplaySize < 1) {\n\t\t\t\t\t\t$iNewsroomDisplaySize = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif ($iNewsroomDisplaySize > 20) {\n\t\t\t\t\t\t$iNewsroomDisplaySize = 20;\n\t\t\t\t\t}\n\t\t\t\t\t$iCurrentDisplaySize = (int)appUserPreferences::GetPref('newsroom_display_size', $iNewsroomDisplaySize);\n\t\t\t\t\tif ($iCurrentDisplaySize != $iNewsroomDisplaySize) {\n\t\t\t\t\t\t// Save the preference only if it differs from the current (or default) value\n\t\t\t\t\t\tappUserPreferences::SetPref('newsroom_display_size', $iNewsroomDisplaySize);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$bProvidersModified = false;\n\t\t\t\tforeach ($aProviders as $oProvider)\n\t\t\t\t{\n\t\t\t\t\tif ($oProvider->IsApplicable($oUser))\n\t\t\t\t\t{\n\t\t\t\t\t\t$sProviderClass = get_class($oProvider);\n\t\t\t\t\t\t$bProviderEnabled = (utils::ReadParam('newsroom_provider_'.$sProviderClass, 'off') == 'on');\n\t\t\t\t\t\t$bCurrentValue = appUserPreferences::GetPref('newsroom_provider_'.$sProviderClass, true);\n\t\t\t\t\t\tif ($bCurrentValue != $bProviderEnabled)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Save the preference only if it differs from the current value\n\t\t\t\t\t\t\t$bProvidersModified = true;\n\t\t\t\t\t\t\tappUserPreferences::SetPref('newsroom_provider_'.$sProviderClass, $bProviderEnabled);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($bProvidersModified)\n\t\t\t\t{\n\t\t\t\t\t$oPage->add_ready_script('$(\".itop-newsroom_menu\").newsroom_menu(\"clearCache\");');\n\t\t\t\t}\n\t\t\t\tDisplayPreferences($oPage);\n\t\t\t\tbreak;\n\n\t\t\tcase 'display':\n\t\t\tdefault:\n\t\t\t\t$oPage->SetBreadCrumbEntry('ui-tool-preferences', Dict::S('UI:Preferences'), Dict::S('UI:Preferences'), '',\n\t\t\t\t\t'fas fa-user-cog', iTopWebPage::ENUM_BREADCRUMB_ENTRY_ICON_TYPE_CSS_CLASSES);\n\t\t\t\tDisplayPreferences($oPage);\n\t\t}\n\t}\n\t\n\t$oPage->output();\n}\ncatch(CoreException $e)\n{\n\trequire_once(APPROOT.'/setup/setuppage.class.inc.php');\n\t$oP = new ErrorPage(Dict::S('UI:PageTitle:FatalError'));\n\t$oP->add(\"<h1>\".Dict::S('UI:FatalErrorMessage').\"</h1>\\n\");\t\n\t$oP->error(Dict::Format('UI:Error_Details', $e->getHtmlDesc()));\t\n\t$oP->output();\n\n\tif (MetaModel::IsLogEnabledIssue())\n\t{\n\t\tif (MetaModel::IsValidClass('EventIssue'))\n\t\t{\n\t\t\t$oLog = new EventIssue();\n\n\t\t\t$oLog->Set('message', $e->getMessage());\n\t\t\t$oLog->Set('userinfo', '');\n\t\t\t$oLog->Set('issue', $e->GetIssue());\n\t\t\t$oLog->Set('impact', 'Page could not be displayed');\n\t\t\t$oLog->Set('callstack', $e->getTrace());\n\t\t\t$oLog->Set('data', $e->getContextData());\n\t\t\t$oLog->DBInsertNoReload();\n\t\t}\n\n\t\tIssueLog::Error($e->getMessage());\n\t}\n\n\t// For debugging only\n\t//throw $e;\n}\ncatch(Exception $e)\n{\n\trequire_once(APPROOT.'/setup/setuppage.class.inc.php');\n\t$oP = new ErrorPage(Dict::S('UI:PageTitle:FatalError'));\n\t$oP->add(\"<h1>\".Dict::S('UI:FatalErrorMessage').\"</h1>\\n\");\t\n\t$oP->error(Dict::Format('UI:Error_Details', $e->getMessage()));\t\n\t$oP->output();\n\n\tif (MetaModel::IsLogEnabledIssue())\n\t{\n\t\tif (MetaModel::IsValidClass('EventIssue'))\n\t\t{\n\t\t\t$oLog = new EventIssue();\n\n\t\t\t$oLog->Set('message', $e->getMessage());\n\t\t\t$oLog->Set('userinfo', '');\n\t\t\t$oLog->Set('issue', 'PHP Exception');\n\t\t\t$oLog->Set('impact', 'Page could not be displayed');\n\t\t\t$oLog->Set('callstack', $e->getTrace());\n\t\t\t$oLog->Set('data', array());\n\t\t\t$oLog->DBInsertNoReload();\n\t\t}\n\n\t\tIssueLog::Error($e->getMessage());\n\t}\n}\n"], "filenames": ["pages/preferences.php"], "buggy_code_start_loc": [782], "buggy_code_end_loc": [783], "fixing_code_start_loc": [782], "fixing_code_end_loc": [783], "type": "CWE-79", "message": "iTop is an open source, web-based IT service management platform. Prior to versions 3.0.4 and 3.1.0, when displaying `pages/preferences.php`, cross site scripting is possible. This issue is fixed in versions 3.0.4 and 3.1.0.\n", "other": {"cve": {"id": "CVE-2023-34446", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-25T18:17:28.077", "lastModified": "2023-10-31T15:19:32.367", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "iTop is an open source, web-based IT service management platform. Prior to versions 3.0.4 and 3.1.0, when displaying `pages/preferences.php`, cross site scripting is possible. This issue is fixed in versions 3.0.4 and 3.1.0.\n"}, {"lang": "es", "value": "iTop es una plataforma de gesti\u00f3n de servicios de TI basada en web y de c\u00f3digo abierto. Antes de las versiones 3.0.4 y 3.1.0, al mostrar `pages/preferences.php`, era posible realizar Cross-Site Scripting (XSS). Este problema se solucion\u00f3 en las versiones 3.0.4 y 3.1.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:combodo:itop:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "A3C0CBE4-6077-4FAD-9680-5306E52EB3E8"}]}]}], "references": [{"url": "https://github.com/Combodo/iTop/commit/e3ba826e5dfd3b724f1ee97bebfd20ded3c70b10", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Combodo/iTop/security/advisories/GHSA-q4pp-j46r-gm68", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Combodo/iTop/commit/e3ba826e5dfd3b724f1ee97bebfd20ded3c70b10"}}