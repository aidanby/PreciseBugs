{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Misc stuff and REQUIRED by ALL the scripts.\n * MUST be included by every script\n *\n * Among other things, it contains the advanced authentication work.\n *\n * Order of sections for common.inc.php:\n *\n * the authentication libraries must be before the connection to db\n *\n * ... so the required order is:\n *\n * LABEL_variables_init\n *  - initialize some variables always needed\n * LABEL_parsing_config_file\n *  - parsing of the configuration file\n * LABEL_loading_language_file\n *  - loading language file\n * LABEL_setup_servers\n *  - check and setup configured servers\n * LABEL_theme_setup\n *  - setting up themes\n *\n * - load of MySQL extension (if necessary)\n * - loading of an authentication library\n * - db connection\n * - authentication work\n *\n * @package PhpMyAdmin\n */\n\n/**\n * block attempts to directly run this script\n */\nif (getcwd() == dirname(__FILE__)) {\n    die('Attack stopped');\n}\n\n/**\n * Minimum PHP version; can't call PMA_fatalError() which uses a\n * PHP 5 function, so cannot easily localize this message.\n */\nif (version_compare(PHP_VERSION, '5.5.0', 'lt')) {\n    die('PHP 5.5+ is required');\n}\n\n/**\n * for verification in all procedural scripts under libraries\n */\ndefine('PHPMYADMIN', true);\n\n\n/**\n * String handling (security)\n */\nrequire_once './libraries/String.class.php';\n$PMA_String = new PMA_String();\n\n/**\n * the error handler\n */\nrequire './libraries/Error_Handler.class.php';\n\n/**\n * initialize the error handler\n */\n$GLOBALS['error_handler'] = new PMA_Error_Handler();\n\n/**\n * This setting was removed in PHP 5.4. But at this point PMA_PHP_INT_VERSION\n * is not yet defined so we use another way to find out the PHP version.\n */\nif (version_compare(phpversion(), '5.4', 'lt')) {\n    /**\n     * Avoid problems with magic_quotes_runtime\n     */\n    @ini_set('magic_quotes_runtime', 'false');\n}\n\n/**\n * core functions\n */\nrequire './libraries/core.lib.php';\n\n/**\n * Input sanitizing\n */\nrequire './libraries/sanitizing.lib.php';\n\n/**\n * Warning about mbstring.\n */\nif (! function_exists('mb_detect_encoding')) {\n    PMA_warnMissingExtension('mbstring', $fatal = true);\n}\n\n/**\n * Set utf-8 encoding for PHP\n */\nini_set('default_charset', 'utf-8');\nmb_internal_encoding('utf-8');\n\n/**\n * the PMA_Theme class\n */\nrequire './libraries/Theme.class.php';\n\n/**\n * the PMA_Theme_Manager class\n */\nrequire './libraries/Theme_Manager.class.php';\n\n/**\n * the PMA_Config class\n */\nrequire './libraries/Config.class.php';\n\n/**\n * the relation lib, tracker needs it\n */\nrequire './libraries/relation.lib.php';\n\n/**\n * the PMA_Tracker class\n */\nrequire './libraries/Tracker.class.php';\n\n/**\n * the PMA_Table class\n */\nrequire './libraries/Table.class.php';\n\n/**\n * the PMA_Types class\n */\nrequire './libraries/Types.class.php';\n\nif (! defined('PMA_MINIMUM_COMMON')) {\n    /**\n     * common functions\n     */\n    include_once './libraries/Util.class.php';\n\n    /**\n     * JavaScript escaping.\n     */\n    include_once './libraries/js_escape.lib.php';\n\n    /**\n     * Include URL/hidden inputs generating.\n     */\n    include_once './libraries/url_generating.lib.php';\n\n    /**\n     * Used to generate the page\n     */\n    include_once 'libraries/Response.class.php';\n}\n\n/******************************************************************************/\n/* start procedural code                       label_start_procedural         */\n\n/**\n * PATH_INFO could be compromised if set, so remove it from PHP_SELF\n * and provide a clean PHP_SELF here\n */\n$PMA_PHP_SELF = PMA_getenv('PHP_SELF');\n$_PATH_INFO = PMA_getenv('PATH_INFO');\nif (! empty($_PATH_INFO) && ! empty($PMA_PHP_SELF)) {\n    $path_info_pos = /*overload*/mb_strrpos($PMA_PHP_SELF, $_PATH_INFO);\n    $pathLength = $path_info_pos + /*overload*/mb_strlen($_PATH_INFO);\n    if ($pathLength === /*overload*/mb_strlen($PMA_PHP_SELF)) {\n        $PMA_PHP_SELF = /*overload*/mb_substr($PMA_PHP_SELF, 0, $path_info_pos);\n    }\n}\n$PMA_PHP_SELF = htmlspecialchars($PMA_PHP_SELF);\n\n\n/**\n * just to be sure there was no import (registering) before here\n * we empty the global space (but avoid unsetting $variables_list\n * and $key in the foreach (), we still need them!)\n */\n$variables_whitelist = array (\n    'GLOBALS',\n    '_SERVER',\n    '_GET',\n    '_POST',\n    '_REQUEST',\n    '_FILES',\n    '_ENV',\n    '_COOKIE',\n    '_SESSION',\n    'error_handler',\n    'PMA_PHP_SELF',\n    'variables_whitelist',\n    'key',\n    'PMA_String'\n);\n\nforeach (get_defined_vars() as $key => $value) {\n    if (! in_array($key, $variables_whitelist)) {\n        unset($$key);\n    }\n}\nunset($key, $value, $variables_whitelist);\n\n\n/**\n * Subforms - some functions need to be called by form, cause of the limited URL\n * length, but if this functions inside another form you cannot just open a new\n * form - so phpMyAdmin uses 'arrays' inside this form\n *\n * <code>\n * <form ...>\n * ... main form elements ...\n * <input type=\"hidden\" name=\"subform[action1][id]\" value=\"1\" />\n * ... other subform data ...\n * <input type=\"submit\" name=\"usesubform[action1]\" value=\"do action1\" />\n * ... other subforms ...\n * <input type=\"hidden\" name=\"subform[actionX][id]\" value=\"X\" />\n * ... other subform data ...\n * <input type=\"submit\" name=\"usesubform[actionX]\" value=\"do actionX\" />\n * ... main form elements ...\n * <input type=\"submit\" name=\"main_action\" value=\"submit form\" />\n * </form>\n * </code>\n *\n * so we now check if a subform is submitted\n */\n$__redirect = null;\nif (isset($_POST['usesubform'])) {\n    // if a subform is present and should be used\n    // the rest of the form is deprecated\n    $subform_id = key($_POST['usesubform']);\n    $subform    = $_POST['subform'][$subform_id];\n    $_POST      = $subform;\n    $_REQUEST   = $subform;\n    /**\n     * some subforms need another page than the main form, so we will just\n     * include this page at the end of this script - we use $__redirect to\n     * track this\n     */\n    if (isset($_POST['redirect'])\n        && $_POST['redirect'] != basename($PMA_PHP_SELF)\n    ) {\n        $__redirect = $_POST['redirect'];\n        unset($_POST['redirect']);\n    }\n    unset($subform_id, $subform);\n} else {\n    // Note: here we overwrite $_REQUEST so that it does not contain cookies,\n    // because another application for the same domain could have set\n    // a cookie (with a compatible path) that overrides a variable\n    // we expect from GET or POST.\n    // We'll refer to cookies explicitly with the $_COOKIE syntax.\n    $_REQUEST = array_merge($_GET, $_POST);\n}\n// end check if a subform is submitted\n\n/**\n * This setting was removed in PHP 5.4, but get_magic_quotes_gpc\n * always returns False since then.\n */\nif (get_magic_quotes_gpc()) {\n    PMA_arrayWalkRecursive($_GET, 'stripslashes', true);\n    PMA_arrayWalkRecursive($_POST, 'stripslashes', true);\n    PMA_arrayWalkRecursive($_COOKIE, 'stripslashes', true);\n    PMA_arrayWalkRecursive($_REQUEST, 'stripslashes', true);\n}\n\n/**\n * check timezone setting\n * this could produce an E_STRICT - but only once,\n * if not done here it will produce E_STRICT on every date/time function\n * (starting with PHP 5.3, this code can produce E_WARNING rather than\n *  E_STRICT)\n *\n */\ndate_default_timezone_set(@date_default_timezone_get());\n\n/******************************************************************************/\n/* parsing configuration file                  LABEL_parsing_config_file      */\n\n/**\n * We really need this one!\n */\nif (! function_exists('preg_replace')) {\n    PMA_warnMissingExtension('pcre', true);\n}\n\n/**\n * JSON is required in several places.\n */\nif (! function_exists('json_encode')) {\n    PMA_warnMissingExtension('json', true);\n}\n\n/**\n * @global PMA_Config $GLOBALS['PMA_Config']\n * force reading of config file, because we removed sensitive values\n * in the previous iteration\n */\n$GLOBALS['PMA_Config'] = new PMA_Config(CONFIG_FILE);\n\nif (!defined('PMA_MINIMUM_COMMON')) {\n    $GLOBALS['PMA_Config']->checkPmaAbsoluteUri();\n}\n\n/**\n * BC - enable backward compatibility\n * exports all configuration settings into $GLOBALS ($GLOBALS['cfg'])\n */\n$GLOBALS['PMA_Config']->enableBc();\n\n/**\n * clean cookies on upgrade\n * when changing something related to PMA cookies, increment the cookie version\n */\n$pma_cookie_version = 4;\nif (isset($_COOKIE)) {\n    if (! isset($_COOKIE['pmaCookieVer'])\n        || $_COOKIE['pmaCookieVer'] != $pma_cookie_version\n    ) {\n        // delete all cookies\n        foreach ($_COOKIE as $cookie_name => $tmp) {\n            $GLOBALS['PMA_Config']->removeCookie($cookie_name);\n        }\n        $_COOKIE = array();\n        $GLOBALS['PMA_Config']->setCookie('pmaCookieVer', $pma_cookie_version);\n    }\n}\n\n\n/**\n * check HTTPS connection\n */\nif ($GLOBALS['PMA_Config']->get('ForceSSL')\n    && ! $GLOBALS['PMA_Config']->detectHttps()\n) {\n    // grab SSL URL\n    $url = $GLOBALS['PMA_Config']->getSSLUri();\n    // Actually redirect\n    PMA_sendHeaderLocation($url . PMA_URL_getCommon($_GET, 'text'));\n    // delete the current session, otherwise we get problems (see bug #2397877)\n    $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);\n    exit;\n}\n\n\n/**\n * include session handling after the globals, to prevent overwriting\n */\nrequire './libraries/session.inc.php';\n\n/**\n * init some variables LABEL_variables_init\n */\n\n/**\n * holds parameters to be passed to next page\n * @global array $GLOBALS['url_params']\n */\n$GLOBALS['url_params'] = array();\n\n/**\n * the whitelist for $GLOBALS['goto']\n * @global array $goto_whitelist\n */\n$goto_whitelist = array(\n    //'browse_foreigners.php',\n    //'changelog.php',\n    //'chk_rel.php',\n    'db_create.php',\n    'db_datadict.php',\n    'db_sql.php',\n    'db_events.php',\n    'db_export.php',\n    'db_importdocsql.php',\n    'db_qbe.php',\n    'db_structure.php',\n    'db_import.php',\n    'db_operations.php',\n    'db_search.php',\n    'db_routines.php',\n    'export.php',\n    'import.php',\n    //'index.php',\n    //'navigation.php',\n    //'license.php',\n    'index.php',\n    'pdf_pages.php',\n    'pdf_schema.php',\n    //'phpinfo.php',\n    'server_binlog.php',\n    'server_collations.php',\n    'server_databases.php',\n    'server_engines.php',\n    'server_export.php',\n    'server_import.php',\n    'server_privileges.php',\n    'server_sql.php',\n    'server_status.php',\n    'server_status_advisor.php',\n    'server_status_monitor.php',\n    'server_status_queries.php',\n    'server_status_variables.php',\n    'server_variables.php',\n    'sql.php',\n    'tbl_addfield.php',\n    'tbl_change.php',\n    'tbl_create.php',\n    'tbl_import.php',\n    'tbl_indexes.php',\n    'tbl_sql.php',\n    'tbl_export.php',\n    'tbl_operations.php',\n    'tbl_structure.php',\n    'tbl_relation.php',\n    'tbl_replace.php',\n    'tbl_row_action.php',\n    'tbl_select.php',\n    'tbl_zoom_select.php',\n    //'themes.php',\n    'transformation_overview.php',\n    'transformation_wrapper.php',\n    'user_password.php',\n);\n\n/**\n * check $__redirect against whitelist\n */\nif (! PMA_checkPageValidity($__redirect, $goto_whitelist)) {\n    $__redirect = null;\n}\n\n/**\n * holds page that should be displayed\n * @global string $GLOBALS['goto']\n */\n$GLOBALS['goto'] = '';\n// Security fix: disallow accessing serious server files via \"?goto=\"\nif (PMA_checkPageValidity($_REQUEST['goto'], $goto_whitelist)) {\n    $GLOBALS['goto'] = $_REQUEST['goto'];\n    $GLOBALS['url_params']['goto'] = $_REQUEST['goto'];\n} else {\n    unset($_REQUEST['goto'], $_GET['goto'], $_POST['goto'], $_COOKIE['goto']);\n}\n\n/**\n * returning page\n * @global string $GLOBALS['back']\n */\nif (PMA_checkPageValidity($_REQUEST['back'], $goto_whitelist)) {\n    $GLOBALS['back'] = $_REQUEST['back'];\n} else {\n    unset($_REQUEST['back'], $_GET['back'], $_POST['back'], $_COOKIE['back']);\n}\n\n/**\n * Check whether user supplied token is valid, if not remove any possibly\n * dangerous stuff from request.\n *\n * remember that some objects in the session with session_start and __wakeup()\n * could access this variables before we reach this point\n * f.e. PMA_Config: fontsize\n *\n * @todo variables should be handled by their respective owners (objects)\n * f.e. lang, server, collation_connection in PMA_Config\n */\n$token_mismatch = true;\n$token_provided = false;\nif (PMA_isValid($_REQUEST['token'])) {\n    $token_provided = true;\n    $token_mismatch = ($_SESSION[' PMA_token '] != $_REQUEST['token']);\n}\n\nif ($token_mismatch) {\n    /**\n     *  List of parameters which are allowed from unsafe source\n     */\n    $allow_list = array(\n        /* needed for direct access, see FAQ 1.34\n         * also, server needed for cookie login screen (multi-server)\n         */\n        'server', 'db', 'table', 'target', 'lang',\n        /* Session ID */\n        'phpMyAdmin',\n        /* Cookie preferences */\n        'pma_lang', 'pma_collation_connection',\n        /* Possible login form */\n        'pma_servername', 'pma_username', 'pma_password',\n        'g-recaptcha-response',\n        /* Needed to send the correct reply */\n        'ajax_request',\n        /* Permit to log out even if there is a token mismatch */\n        'old_usr',\n        /* Permit redirection with token-mismatch in url.php */\n        'url',\n        /* Permit session expiry flag */\n        'session_expired',\n        /* JS loading */\n        'scripts', 'call_done'\n    );\n    /**\n     * Allow changing themes in test/theme.php\n     */\n    if (defined('PMA_TEST_THEME')) {\n        $allow_list[] = 'set_theme';\n    }\n    /**\n     * Require cleanup functions\n     */\n    include './libraries/cleanup.lib.php';\n    /**\n     * Do actual cleanup\n     */\n    PMA_removeRequestVars($allow_list);\n\n}\n\n\n/**\n * current selected database\n * @global string $GLOBALS['db']\n */\nPMA_setGlobalDbOrTable('db');\n\n/**\n * current selected table\n * @global string $GLOBALS['table']\n */\nPMA_setGlobalDbOrTable('table');\n\n/**\n * Store currently selected recent table.\n * Affect $GLOBALS['db'] and $GLOBALS['table']\n */\nif (PMA_isValid($_REQUEST['selected_recent_table'])) {\n    $recent_table = json_decode($_REQUEST['selected_recent_table'], true);\n    $GLOBALS['db'] = $recent_table['db'];\n    $GLOBALS['url_params']['db'] = $GLOBALS['db'];\n    $GLOBALS['table'] = $recent_table['table'];\n    $GLOBALS['url_params']['table'] = $GLOBALS['table'];\n}\n\n/**\n * SQL query to be executed\n * @global string $GLOBALS['sql_query']\n */\n$GLOBALS['sql_query'] = '';\nif (PMA_isValid($_REQUEST['sql_query'])) {\n    $GLOBALS['sql_query'] = $_REQUEST['sql_query'];\n}\n\n//$_REQUEST['set_theme'] // checked later in this file LABEL_theme_setup\n//$_REQUEST['server']; // checked later in this file\n//$_REQUEST['lang'];   // checked by LABEL_loading_language_file\n\n/******************************************************************************/\n/* loading language file                       LABEL_loading_language_file    */\n\n/**\n * lang detection is done here\n */\nrequire './libraries/select_lang.lib.php';\n\n// Defines the cell alignment values depending on text direction\nif ($GLOBALS['text_dir'] == 'ltr') {\n    $GLOBALS['cell_align_left']  = 'left';\n    $GLOBALS['cell_align_right'] = 'right';\n} else {\n    $GLOBALS['cell_align_left']  = 'right';\n    $GLOBALS['cell_align_right'] = 'left';\n}\n\n/**\n * check for errors occurred while loading configuration\n * this check is done here after loading language files to present errors in locale\n */\n$GLOBALS['PMA_Config']->checkPermissions();\n\nif ($GLOBALS['PMA_Config']->error_config_file) {\n    $error = '[strong]' . __('Failed to read configuration file!') . '[/strong]'\n        . '[br][br]'\n        . __(\n            'This usually means there is a syntax error in it, '\n            . 'please check any errors shown below.'\n        )\n        . '[br][br]'\n        . '[conferr]';\n    trigger_error($error, E_USER_ERROR);\n}\nif ($GLOBALS['PMA_Config']->error_config_default_file) {\n    $error = sprintf(\n        __('Could not load default configuration from: %1$s'),\n        $GLOBALS['PMA_Config']->default_source\n    );\n    trigger_error($error, E_USER_ERROR);\n}\nif ($GLOBALS['PMA_Config']->error_pma_uri) {\n    trigger_error(\n        __(\n            'The [code]$cfg[\\'PmaAbsoluteUri\\'][/code]'\n            . ' directive MUST be set in your configuration file!'\n        ),\n        E_USER_ERROR\n    );\n}\n\n\n/******************************************************************************/\n/* setup servers                                       LABEL_setup_servers    */\n\n/**\n * current server\n * @global integer $GLOBALS['server']\n */\n$GLOBALS['server'] = 0;\n\n/**\n * Servers array fixups.\n * $default_server comes from PMA_Config::enableBc()\n * @todo merge into PMA_Config\n */\n// Do we have some server?\nif (! isset($cfg['Servers']) || count($cfg['Servers']) == 0) {\n    // No server => create one with defaults\n    $cfg['Servers'] = array(1 => $default_server);\n} else {\n    // We have server(s) => apply default configuration\n    $new_servers = array();\n\n    foreach ($cfg['Servers'] as $server_index => $each_server) {\n\n        // Detect wrong configuration\n        if (!is_int($server_index) || $server_index < 1) {\n            trigger_error(\n                sprintf(__('Invalid server index: %s'), $server_index),\n                E_USER_ERROR\n            );\n        }\n\n        $each_server = array_merge($default_server, $each_server);\n\n        // Don't use servers with no hostname\n        if ($each_server['connect_type'] == 'tcp' && empty($each_server['host'])) {\n            trigger_error(\n                sprintf(\n                    __(\n                        'Invalid hostname for server %1$s. '\n                        . 'Please review your configuration.'\n                    ),\n                    $server_index\n                ),\n                E_USER_ERROR\n            );\n        }\n\n        // Final solution to bug #582890\n        // If we are using a socket connection\n        // and there is nothing in the verbose server name\n        // or the host field, then generate a name for the server\n        // in the form of \"Server 2\", localized of course!\n        if ($each_server['connect_type'] == 'socket'\n            && empty($each_server['host'])\n            && empty($each_server['verbose'])\n        ) {\n            $each_server['verbose'] = sprintf(__('Server %d'), $server_index);\n        }\n\n        $new_servers[$server_index] = $each_server;\n    }\n    $cfg['Servers'] = $new_servers;\n    unset($new_servers, $server_index, $each_server);\n}\n\n// Cleanup\nunset($default_server);\n\n\n/******************************************************************************/\n/* setup themes                                          LABEL_theme_setup    */\n\n/**\n * @global PMA_Theme_Manager $_SESSION['PMA_Theme_Manager']\n */\nif (! isset($_SESSION['PMA_Theme_Manager'])) {\n    $_SESSION['PMA_Theme_Manager'] = new PMA_Theme_Manager;\n} else {\n    /**\n     * @todo move all __wakeup() functionality into session.inc.php\n     */\n    $_SESSION['PMA_Theme_Manager']->checkConfig();\n}\n\n// for the theme per server feature\nif (isset($_REQUEST['server']) && ! isset($_REQUEST['set_theme'])) {\n    $GLOBALS['server'] = $_REQUEST['server'];\n    $tmp = $_SESSION['PMA_Theme_Manager']->getThemeCookie();\n    if (empty($tmp)) {\n        $tmp = $_SESSION['PMA_Theme_Manager']->theme_default;\n    }\n    $_SESSION['PMA_Theme_Manager']->setActiveTheme($tmp);\n    unset($tmp);\n}\n/**\n * @todo move into PMA_Theme_Manager::__wakeup()\n */\nif (isset($_REQUEST['set_theme'])) {\n    // if user selected a theme\n    $_SESSION['PMA_Theme_Manager']->setActiveTheme($_REQUEST['set_theme']);\n}\n\n/**\n * the theme object\n * @global PMA_Theme $_SESSION['PMA_Theme']\n */\n$_SESSION['PMA_Theme'] = $_SESSION['PMA_Theme_Manager']->theme;\n\n// BC\n/**\n * the active theme\n * @global string $GLOBALS['theme']\n */\n$GLOBALS['theme']           = $_SESSION['PMA_Theme']->getName();\n/**\n * the theme path\n * @global string $GLOBALS['pmaThemePath']\n */\n$GLOBALS['pmaThemePath']    = $_SESSION['PMA_Theme']->getPath();\n/**\n * the theme image path\n * @global string $GLOBALS['pmaThemeImage']\n */\n$GLOBALS['pmaThemeImage']   = $_SESSION['PMA_Theme']->getImgPath();\n\n/**\n * load layout file if exists\n */\nif (@file_exists($_SESSION['PMA_Theme']->getLayoutFile())) {\n    include $_SESSION['PMA_Theme']->getLayoutFile();\n}\n\nif (! defined('PMA_MINIMUM_COMMON')) {\n    /**\n     * Character set conversion.\n     */\n    include_once './libraries/charset_conversion.lib.php';\n\n    /**\n     * Lookup server by name\n     * (see FAQ 4.8)\n     */\n    if (! empty($_REQUEST['server'])\n        && is_string($_REQUEST['server'])\n        && ! is_numeric($_REQUEST['server'])\n    ) {\n        foreach ($cfg['Servers'] as $i => $server) {\n            $verboseToLower = /*overload*/mb_strtolower($server['verbose']);\n            $serverToLower = /*overload*/mb_strtolower($_REQUEST['server']);\n            if ($server['host'] == $_REQUEST['server']\n                || $server['verbose'] == $_REQUEST['server']\n                || $verboseToLower == $serverToLower\n                || md5($verboseToLower) == $serverToLower\n            ) {\n                $_REQUEST['server'] = $i;\n                break;\n            }\n        }\n        if (is_string($_REQUEST['server'])) {\n            unset($_REQUEST['server']);\n        }\n        unset($i);\n    }\n\n    /**\n     * If no server is selected, make sure that $cfg['Server'] is empty (so\n     * that nothing will work), and skip server authentication.\n     * We do NOT exit here, but continue on without logging into any server.\n     * This way, the welcome page will still come up (with no server info) and\n     * present a choice of servers in the case that there are multiple servers\n     * and '$cfg['ServerDefault'] = 0' is set.\n     */\n\n    if (isset($_REQUEST['server'])\n        && (is_string($_REQUEST['server']) || is_numeric($_REQUEST['server']))\n        && ! empty($_REQUEST['server'])\n        && ! empty($cfg['Servers'][$_REQUEST['server']])\n    ) {\n        $GLOBALS['server'] = $_REQUEST['server'];\n        $cfg['Server'] = $cfg['Servers'][$GLOBALS['server']];\n    } else {\n        if (!empty($cfg['Servers'][$cfg['ServerDefault']])) {\n            $GLOBALS['server'] = $cfg['ServerDefault'];\n            $cfg['Server'] = $cfg['Servers'][$GLOBALS['server']];\n        } else {\n            $GLOBALS['server'] = 0;\n            $cfg['Server'] = array();\n        }\n    }\n    $GLOBALS['url_params']['server'] = $GLOBALS['server'];\n\n    /**\n     * Kanji encoding convert feature appended by Y.Kawada (2002/2/20)\n     */\n    if (function_exists('mb_convert_encoding')\n        && $lang == 'ja'\n    ) {\n        include_once './libraries/kanji-encoding.lib.php';\n    } // end if\n\n    /**\n     * save some settings in cookies\n     * @todo should be done in PMA_Config\n     */\n    $GLOBALS['PMA_Config']->setCookie('pma_lang', $GLOBALS['lang']);\n    if (isset($GLOBALS['collation_connection'])) {\n        $GLOBALS['PMA_Config']->setCookie(\n            'pma_collation_connection',\n            $GLOBALS['collation_connection']\n        );\n    }\n\n    $_SESSION['PMA_Theme_Manager']->setThemeCookie();\n\n    if (! empty($cfg['Server'])) {\n\n        /**\n         * Loads the proper database interface for this server\n         */\n        include_once './libraries/database_interface.inc.php';\n\n        include_once './libraries/logging.lib.php';\n\n        // get LoginCookieValidity from preferences cache\n        // no generic solution for loading preferences from cache as some settings\n        // need to be kept for processing in PMA_Config::loadUserPreferences()\n        $cache_key = 'server_' . $GLOBALS['server'];\n        if (isset($_SESSION['cache'][$cache_key]['userprefs']['LoginCookieValidity'])\n        ) {\n            $value\n                = $_SESSION['cache'][$cache_key]['userprefs']['LoginCookieValidity'];\n            $GLOBALS['PMA_Config']->set('LoginCookieValidity', $value);\n            $GLOBALS['cfg']['LoginCookieValidity'] = $value;\n            unset($value);\n        }\n        unset($cache_key);\n\n        // Gets the authentication library that fits the $cfg['Server'] settings\n        // and run authentication\n\n        // to allow HTTP or http\n        $cfg['Server']['auth_type']\n            = /*overload*/mb_strtolower($cfg['Server']['auth_type']);\n\n        /**\n         * the required auth type plugin\n         */\n        $auth_class = \"Authentication\" . ucfirst($cfg['Server']['auth_type']);\n        if (! file_exists(\n            './libraries/plugins/auth/'\n            . $auth_class . '.class.php'\n        )) {\n            PMA_fatalError(\n                __('Invalid authentication method set in configuration:')\n                . ' ' . $cfg['Server']['auth_type']\n            );\n        }\n        if (isset($_REQUEST['pma_password'])) {\n            $_REQUEST['pma_password'] = substr($_REQUEST['pma_password'], 0, 256);\n        }\n        include_once  './libraries/plugins/auth/' . $auth_class . '.class.php';\n        // todo: add plugin manager\n        $plugin_manager = null;\n        /** @var AuthenticationPlugin $auth_plugin */\n        $auth_plugin = new $auth_class($plugin_manager);\n\n        if (! $auth_plugin->authCheck()) {\n            /* Force generating of new session on login */\n            if ($token_provided) {\n                PMA_secureSession();\n            }\n            $auth_plugin->auth();\n        } else {\n            $auth_plugin->authSetUser();\n        }\n\n        // Check IP-based Allow/Deny rules as soon as possible to reject the\n        // user based on mod_access in Apache\n        if (isset($cfg['Server']['AllowDeny'])\n            && isset($cfg['Server']['AllowDeny']['order'])\n        ) {\n\n            /**\n             * ip based access library\n             */\n            include_once './libraries/ip_allow_deny.lib.php';\n\n            $allowDeny_forbidden         = false; // default\n            if ($cfg['Server']['AllowDeny']['order'] == 'allow,deny') {\n                $allowDeny_forbidden     = true;\n                if (PMA_allowDeny('allow')) {\n                    $allowDeny_forbidden = false;\n                }\n                if (PMA_allowDeny('deny')) {\n                    $allowDeny_forbidden = true;\n                }\n            } elseif ($cfg['Server']['AllowDeny']['order'] == 'deny,allow') {\n                if (PMA_allowDeny('deny')) {\n                    $allowDeny_forbidden = true;\n                }\n                if (PMA_allowDeny('allow')) {\n                    $allowDeny_forbidden = false;\n                }\n            } elseif ($cfg['Server']['AllowDeny']['order'] == 'explicit') {\n                if (PMA_allowDeny('allow') && ! PMA_allowDeny('deny')) {\n                    $allowDeny_forbidden = false;\n                } else {\n                    $allowDeny_forbidden = true;\n                }\n            } // end if ... elseif ... elseif\n\n            // Ejects the user if banished\n            if ($allowDeny_forbidden) {\n                PMA_logUser($cfg['Server']['user'], 'allow-denied');\n                $auth_plugin->authFails();\n            }\n        } // end if\n\n        // is root allowed?\n        if (! $cfg['Server']['AllowRoot'] && $cfg['Server']['user'] == 'root') {\n            $allowDeny_forbidden = true;\n            PMA_logUser($cfg['Server']['user'], 'root-denied');\n            $auth_plugin->authFails();\n        }\n\n        // is a login without password allowed?\n        if (! $cfg['Server']['AllowNoPassword']\n            && $cfg['Server']['password'] == ''\n        ) {\n            $login_without_password_is_forbidden = true;\n            PMA_logUser($cfg['Server']['user'], 'empty-denied');\n            $auth_plugin->authFails();\n        }\n\n        // if using TCP socket is not needed\n        if (/*overload*/mb_strtolower($cfg['Server']['connect_type']) == 'tcp') {\n            $cfg['Server']['socket'] = '';\n        }\n\n        // Try to connect MySQL with the control user profile (will be used to\n        // get the privileges list for the current user but the true user link\n        // must be open after this one so it would be default one for all the\n        // scripts)\n        $controllink = false;\n        if ($cfg['Server']['controluser'] != '') {\n            if (! empty($cfg['Server']['controlhost'])\n                || ! empty($cfg['Server']['controlport'])\n            ) {\n                $server_details = array();\n                if (! empty($cfg['Server']['controlhost'])) {\n                    $server_details['host'] = $cfg['Server']['controlhost'];\n                } else {\n                    $server_details['host'] = $cfg['Server']['host'];\n                }\n                if (! empty($cfg['Server']['controlport'])) {\n                    $server_details['port'] = $cfg['Server']['controlport'];\n                } elseif ($server_details['host'] == $cfg['Server']['host']) {\n                    // Evaluates to true when controlhost == host\n                    // or controlhost is not defined (hence it defaults to host)\n                    // In such case we can use the value of port.\n                    $server_details['port'] = $cfg['Server']['port'];\n                }\n                // otherwise we leave the $server_details['port'] unset,\n                // allowing it to take default mysql port\n\n                $controllink = $GLOBALS['dbi']->connect(\n                    $cfg['Server']['controluser'],\n                    $cfg['Server']['controlpass'],\n                    true,\n                    $server_details\n                );\n            } else {\n                $controllink = $GLOBALS['dbi']->connect(\n                    $cfg['Server']['controluser'],\n                    $cfg['Server']['controlpass'],\n                    true\n                );\n            }\n        }\n\n        // Connects to the server (validates user's login)\n        /** @var PMA_DatabaseInterface $userlink */\n        $userlink = $GLOBALS['dbi']->connect(\n            $cfg['Server']['user'], $cfg['Server']['password'], false\n        );\n\n        // Set timestamp for the session, if required.\n        if ($cfg['Server']['SessionTimeZone'] != '') {\n            $sql_query_tz = 'SET ' . PMA_Util::backquote('time_zone') . ' = '\n                . '\\''\n                . PMA_Util::sqlAddSlashes($cfg['Server']['SessionTimeZone'])\n                . '\\'';\n\n            if (! $userlink->query($sql_query_tz)) {\n                $error_message_tz = sprintf(\n                    __(\n                        'Unable to use timezone %1$s for server %2$d. '\n                        . 'Please check your configuration setting for '\n                        . '[em]$cfg[\\'Servers\\'][%3$d][\\'SessionTimeZone\\'][/em]. '\n                        . 'phpMyAdmin is currently using the default time zone '\n                        . 'of the database server.'\n                    ),\n                    $cfg['Servers'][$GLOBALS['server']]['SessionTimeZone'],\n                    $GLOBALS['server'],\n                    $GLOBALS['server']\n                );\n\n                $GLOBALS['error_handler']->addError(\n                    $error_message_tz,\n                    E_USER_WARNING,\n                    '',\n                    '',\n                    false\n                );\n            }\n        }\n\n        if (! $controllink) {\n            $controllink = $userlink;\n        }\n\n        $auth_plugin->storeUserCredentials();\n\n        /* Log success */\n        PMA_logUser($cfg['Server']['user']);\n\n        if (PMA_MYSQL_INT_VERSION < $cfg['MysqlMinVersion']['internal']) {\n            PMA_fatalError(\n                __('You should upgrade to %s %s or later.'),\n                array('MySQL', $cfg['MysqlMinVersion']['human'])\n            );\n        }\n\n        /**\n         * Type handling object.\n         */\n        if (PMA_DRIZZLE) {\n            $GLOBALS['PMA_Types'] = new PMA_Types_Drizzle();\n        } else {\n            $GLOBALS['PMA_Types'] = new PMA_Types_MySQL();\n        }\n\n        if (PMA_DRIZZLE) {\n            // DisableIS must be set to false for Drizzle, it maps SHOW commands\n            // to INFORMATION_SCHEMA queries anyway so it's fast on large servers\n            $cfg['Server']['DisableIS'] = false;\n            // SHOW OPEN TABLES is not supported by Drizzle\n            $cfg['SkipLockedTables'] = false;\n        }\n\n        /**\n         * Charset information\n         */\n        if (!PMA_DRIZZLE) {\n            include_once './libraries/mysql_charsets.inc.php';\n        }\n        if (!isset($mysql_charsets)) {\n            $mysql_charsets = array();\n            $mysql_collations_flat = array();\n        }\n\n        /**\n         * Initializes the SQL parsing library.\n         */\n        include_once SQL_PARSER_AUTOLOAD;\n\n        // Loads closest context to this version.\n        SqlParser\\Context::loadClosest(\n            (PMA_DRIZZLE ? 'Drizzle' : 'MySql') . PMA_MYSQL_INT_VERSION\n        );\n\n        // Sets the default delimiter (if specified).\n        if (!empty($_REQUEST['sql_delimiter'])) {\n            SqlParser\\Lexer::$DEFAULT_DELIMITER = $_REQUEST['sql_delimiter'];\n        }\n\n        // TODO: Set SQL modes too.\n\n        /**\n         * the PMA_List_Database class\n         */\n        include_once './libraries/PMA.php';\n        $pma = new PMA;\n        $pma->userlink = $userlink;\n        $pma->controllink = $controllink;\n\n        /**\n         * some resetting has to be done when switching servers\n         */\n        if (isset($_SESSION['tmpval']['previous_server'])\n            && $_SESSION['tmpval']['previous_server'] != $GLOBALS['server']\n        ) {\n            unset($_SESSION['tmpval']['navi_limit_offset']);\n        }\n        $_SESSION['tmpval']['previous_server'] = $GLOBALS['server'];\n\n    } else { // end server connecting\n        // No need to check for 'PMA_BYPASS_GET_INSTANCE' since this execution path\n        // applies only to initial login\n        $response = PMA_Response::getInstance();\n        $response->getHeader()->disableMenuAndConsole();\n        $response->getFooter()->setMinimal();\n    }\n\n    /**\n     * check if profiling was requested and remember it\n     * (note: when $cfg['ServerDefault'] = 0, constant is not defined)\n     */\n    if (isset($_REQUEST['profiling'])\n        && PMA_Util::profilingSupported()\n    ) {\n        $_SESSION['profiling'] = true;\n    } elseif (isset($_REQUEST['profiling_form'])) {\n        // the checkbox was unchecked\n        unset($_SESSION['profiling']);\n    }\n\n    // load user preferences\n    $GLOBALS['PMA_Config']->loadUserPreferences();\n\n    /**\n     * Inclusion of profiling scripts is needed on various\n     * pages like sql, tbl_sql, db_sql, tbl_select\n     */\n    if (! defined('PMA_BYPASS_GET_INSTANCE')) {\n        $response = PMA_Response::getInstance();\n    }\n    if (isset($_SESSION['profiling'])) {\n        $header   = $response->getHeader();\n        $scripts  = $header->getScripts();\n        $scripts->addFile('jqplot/jquery.jqplot.js');\n        $scripts->addFile('jqplot/plugins/jqplot.pieRenderer.js');\n        $scripts->addFile('jqplot/plugins/jqplot.highlighter.js');\n        $scripts->addFile('canvg/canvg.js');\n        $scripts->addFile('jquery/jquery.tablesorter.js');\n    }\n\n    /*\n     * There is no point in even attempting to process\n     * an ajax request if there is a token mismatch\n     */\n    if (isset($response) && $response->isAjax() && $token_mismatch) {\n        $response->isSuccess(false);\n        $response->addJSON(\n            'message',\n            PMA_Message::error(__('Error: Token mismatch'))\n        );\n        exit;\n    }\n} else { // end if !defined('PMA_MINIMUM_COMMON')\n    // load user preferences\n    $GLOBALS['PMA_Config']->loadUserPreferences();\n}\n\n// remove sensitive values from session\n$GLOBALS['PMA_Config']->set('blowfish_secret', '');\n$GLOBALS['PMA_Config']->set('Servers', '');\n$GLOBALS['PMA_Config']->set('default_server', '');\n\n/* Tell tracker that it can actually work */\nPMA_Tracker::enable();\n\n/**\n * @global boolean $GLOBALS['is_ajax_request']\n * @todo should this be moved to the variables init section above?\n *\n * Check if the current request is an AJAX request, and set is_ajax_request\n * accordingly.  Suppress headers, footers and unnecessary output if set to\n * true\n */\nif (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {\n    $GLOBALS['is_ajax_request'] = true;\n} else {\n    $GLOBALS['is_ajax_request'] = false;\n}\n\nif (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {\n    PMA_fatalError(__(\"GLOBALS overwrite attempt\"));\n}\n\n/**\n * protect against possible exploits - there is no need to have so much variables\n */\nif (count($_REQUEST) > 1000) {\n    PMA_fatalError(__('possible exploit'));\n}\n\n/**\n * Check for numeric keys\n * (if register_globals is on, numeric key can be found in $GLOBALS)\n */\nforeach ($GLOBALS as $key => $dummy) {\n    if (is_numeric($key)) {\n        PMA_fatalError(__('numeric key detected'));\n    }\n}\nunset($dummy);\n\n// here, the function does not exist with this configuration:\n// $cfg['ServerDefault'] = 0;\n$GLOBALS['is_superuser']\n    = isset($GLOBALS['dbi']) && $GLOBALS['dbi']->isSuperuser();\n\nif (!empty($__redirect) && in_array($__redirect, $goto_whitelist)) {\n    /**\n     * include subform target page\n     */\n    include $__redirect;\n    exit();\n}\n\n// If Zero configuration mode enabled, check PMA tables in current db.\nif (! defined('PMA_MINIMUM_COMMON')\n    && ! empty($GLOBALS['server'])\n    && isset($GLOBALS['cfg']['ZeroConf'])\n    && $GLOBALS['cfg']['ZeroConf'] == true\n) {\n    if (! empty($GLOBALS['db'])) {\n        $cfgRelation = PMA_getRelationsParam();\n        if (empty($cfgRelation['db'])) {\n            PMA_fixPMATables($GLOBALS['db'], false);\n        }\n    }\n    $cfgRelation = PMA_getRelationsParam();\n    if (empty($cfgRelation['db'])) {\n        foreach ($GLOBALS['pma']->databases as $database) {\n            if ($database == 'phpmyadmin') {\n                PMA_fixPMATables($database, false);\n            }\n        }\n    }\n}\n\nif (! defined('PMA_MINIMUM_COMMON')) {\n    include_once 'libraries/config/page_settings.class.php';\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Core functions used all over the scripts.\n * This script is distinct from libraries/common.inc.php because this\n * script is called from /test.\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * String handling (security)\n */\nrequire_once 'libraries/string.lib.php';\nrequire_once 'libraries/String.class.php';\n$PMA_String = new PMA_String();\n\n/**\n * checks given $var and returns it if valid, or $default of not valid\n * given $var is also checked for type being 'similar' as $default\n * or against any other type if $type is provided\n *\n * <code>\n * // $_REQUEST['db'] not set\n * echo PMA_ifSetOr($_REQUEST['db'], ''); // ''\n * // $_REQUEST['sql_query'] not set\n * echo PMA_ifSetOr($_REQUEST['sql_query']); // null\n * // $cfg['ForceSSL'] not set\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false\n * echo PMA_ifSetOr($cfg['ForceSSL']); // null\n * // $cfg['ForceSSL'] set to 1\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'similar'); // 1\n * echo PMA_ifSetOr($cfg['ForceSSL'], false); // 1\n * // $cfg['ForceSSL'] set to true\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // true\n * </code>\n *\n * @param mixed &$var    param to check\n * @param mixed $default default value\n * @param mixed $type    var type or array of values to check against $var\n *\n * @return mixed   $var or $default\n *\n * @see     PMA_isValid()\n */\nfunction PMA_ifSetOr(&$var, $default = null, $type = 'similar')\n{\n    if (! PMA_isValid($var, $type, $default)) {\n        return $default;\n    }\n\n    return $var;\n}\n\n/**\n * checks given $var against $type or $compare\n *\n * $type can be:\n * - false       : no type checking\n * - 'scalar'    : whether type of $var is integer, float, string or boolean\n * - 'numeric'   : whether type of $var is any number representation\n * - 'length'    : whether type of $var is scalar with a string length > 0\n * - 'similar'   : whether type of $var is similar to type of $compare\n * - 'equal'     : whether type of $var is identical to type of $compare\n * - 'identical' : whether $var is identical to $compare, not only the type!\n * - or any other valid PHP variable type\n *\n * <code>\n * // $_REQUEST['doit'] = true;\n * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // false\n * // $_REQUEST['doit'] = 'true';\n * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // true\n * </code>\n *\n * NOTE: call-by-reference is used to not get NOTICE on undefined vars,\n * but the var is not altered inside this function, also after checking a var\n * this var exists nut is not set, example:\n * <code>\n * // $var is not set\n * isset($var); // false\n * functionCallByReference($var); // false\n * isset($var); // true\n * functionCallByReference($var); // true\n * </code>\n *\n * to avoid this we set this var to null if not isset\n *\n * @param mixed &$var    variable to check\n * @param mixed $type    var type or array of valid values to check against $var\n * @param mixed $compare var to compare with $var\n *\n * @return boolean whether valid or not\n *\n * @todo add some more var types like hex, bin, ...?\n * @see     http://php.net/gettype\n */\nfunction PMA_isValid(&$var, $type = 'length', $compare = null)\n{\n    if (! isset($var)) {\n        // var is not even set\n        return false;\n    }\n\n    if ($type === false) {\n        // no vartype requested\n        return true;\n    }\n\n    if (is_array($type)) {\n        return in_array($var, $type);\n    }\n\n    // allow some aliases of var types\n    $type = strtolower($type);\n    switch ($type) {\n    case 'identic' :\n        $type = 'identical';\n        break;\n    case 'len' :\n        $type = 'length';\n        break;\n    case 'bool' :\n        $type = 'boolean';\n        break;\n    case 'float' :\n        $type = 'double';\n        break;\n    case 'int' :\n        $type = 'integer';\n        break;\n    case 'null' :\n        $type = 'NULL';\n        break;\n    }\n\n    if ($type === 'identical') {\n        return $var === $compare;\n    }\n\n    // whether we should check against given $compare\n    if ($type === 'similar') {\n        switch (gettype($compare)) {\n        case 'string':\n        case 'boolean':\n            $type = 'scalar';\n            break;\n        case 'integer':\n        case 'double':\n            $type = 'numeric';\n            break;\n        default:\n            $type = gettype($compare);\n        }\n    } elseif ($type === 'equal') {\n        $type = gettype($compare);\n    }\n\n    // do the check\n    if ($type === 'length' || $type === 'scalar') {\n        $is_scalar = is_scalar($var);\n        if ($is_scalar && $type === 'length') {\n            return (bool) /*overload*/mb_strlen($var);\n        }\n        return $is_scalar;\n    }\n\n    if ($type === 'numeric') {\n        return is_numeric($var);\n    }\n\n    if (gettype($var) === $type) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Removes insecure parts in a path; used before include() or\n * require() when a part of the path comes from an insecure source\n * like a cookie or form.\n *\n * @param string $path The path to check\n *\n * @return string  The secured path\n *\n * @access  public\n */\nfunction PMA_securePath($path)\n{\n    // change .. to .\n    $path = preg_replace('@\\.\\.*@', '.', $path);\n\n    return $path;\n} // end function\n\n/**\n * displays the given error message on phpMyAdmin error page in foreign language,\n * ends script execution and closes session\n *\n * loads language file if not loaded already\n *\n * @param string       $error_message  the error message or named error message\n * @param string|array $message_args   arguments applied to $error_message\n * @param boolean      $delete_session whether to delete session cookie\n *\n * @return void\n */\nfunction PMA_fatalError(\n    $error_message, $message_args = null, $delete_session = true\n) {\n    /* Use format string if applicable */\n    if (is_string($message_args)) {\n        $error_message = sprintf($error_message, $message_args);\n    } elseif (is_array($message_args)) {\n        $error_message = vsprintf($error_message, $message_args);\n    }\n\n    if ($GLOBALS['is_ajax_request']) {\n        $response = PMA_Response::getInstance();\n        $response->isSuccess(false);\n        $response->addJSON('message', PMA_Message::error($error_message));\n    } else {\n        $error_message = strtr($error_message, array('<br />' => '[br]'));\n\n        /* Load gettext for fatal errors */\n        if (!function_exists('__')) {\n            // It is possible that PMA_fatalError() is called before including\n            // vendor_config.php which defines GETTEXT_INC. See bug #4557\n            if (defined(GETTEXT_INC)) {\n                include_once GETTEXT_INC;\n            } else {\n                include_once './libraries/php-gettext/gettext.inc';\n            }\n        }\n\n        // these variables are used in the included file libraries/error.inc.php\n        //first check if php-mbstring is available\n        if (function_exists('mb_detect_encoding')) {\n            //If present use gettext\n            $error_header = __('Error');\n        } else {\n            $error_header = 'Error';\n        }\n        $lang = $GLOBALS['available_languages'][$GLOBALS['lang']][1];\n        $dir = $GLOBALS['text_dir'];\n\n        // on fatal errors it cannot hurt to always delete the current session\n        if ($delete_session\n            && isset($GLOBALS['session_name'])\n            && isset($_COOKIE[$GLOBALS['session_name']])\n        ) {\n            $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);\n        }\n\n        // Displays the error message\n        include './libraries/error.inc.php';\n    }\n    if (! defined('TESTSUITE')) {\n        exit;\n    }\n}\n\n/**\n * Returns a link to the PHP documentation\n *\n * @param string $target anchor in documentation\n *\n * @return string  the URL\n *\n * @access  public\n */\nfunction PMA_getPHPDocLink($target)\n{\n    /* List of PHP documentation translations */\n    $php_doc_languages = array(\n        'pt_BR', 'zh', 'fr', 'de', 'it', 'ja', 'pl', 'ro', 'ru', 'fa', 'es', 'tr'\n    );\n\n    $lang = 'en';\n    if (in_array($GLOBALS['lang'], $php_doc_languages)) {\n        $lang = $GLOBALS['lang'];\n    }\n\n    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);\n}\n\n/**\n * Warn or fail on missing extension.\n *\n * @param string $extension Extension name\n * @param bool   $fatal     Whether the error is fatal.\n * @param string $extra     Extra string to append to message.\n *\n * @return void\n */\nfunction PMA_warnMissingExtension($extension, $fatal = false, $extra = '')\n{\n    /* Gettext does not have to be loaded yet here */\n    if (function_exists('__')) {\n        $message = __(\n            'The %s extension is missing. Please check your PHP configuration.'\n        );\n    } else {\n        $message\n            = 'The %s extension is missing. Please check your PHP configuration.';\n    }\n    $doclink = PMA_getPHPDocLink('book.' . $extension . '.php');\n    $message = sprintf(\n        $message,\n        '[a@' . $doclink . '@Documentation][em]' . $extension . '[/em][/a]'\n    );\n    if ($extra != '') {\n        $message .= ' ' . $extra;\n    }\n    if ($fatal) {\n        PMA_fatalError($message);\n        return;\n    }\n\n    $GLOBALS['error_handler']->addError(\n        $message,\n        E_USER_WARNING,\n        '',\n        '',\n        false\n    );\n}\n\n/**\n * returns count of tables in given db\n *\n * @param string $db database to count tables for\n *\n * @return integer count of tables in $db\n */\nfunction PMA_getTableCount($db)\n{\n    $tables = $GLOBALS['dbi']->tryQuery(\n        'SHOW TABLES FROM ' . PMA_Util::backquote($db) . ';',\n        null, PMA_DatabaseInterface::QUERY_STORE\n    );\n    if ($tables) {\n        $num_tables = $GLOBALS['dbi']->numRows($tables);\n        $GLOBALS['dbi']->freeResult($tables);\n    } else {\n        $num_tables = 0;\n    }\n\n    return $num_tables;\n}\n\n/**\n * Converts numbers like 10M into bytes\n * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas\n * (renamed with PMA prefix to avoid double definition when embedded\n * in Moodle)\n *\n * @param string|int $size size (Default = 0)\n *\n * @return integer $size\n */\nfunction PMA_getRealSize($size = 0)\n{\n    if (! $size) {\n        return 0;\n    }\n\n    $scan = array(\n        'gb' => 1073741824, //1024 * 1024 * 1024,\n        'g'  => 1073741824, //1024 * 1024 * 1024,\n        'mb' =>    1048576,\n        'm'  =>    1048576,\n        'kb' =>       1024,\n        'k'  =>       1024,\n        'b'  =>          1,\n    );\n\n    foreach ($scan as $unit => $factor) {\n        $sizeLength = strlen($size);\n        $unitLength = strlen($unit);\n        if ($sizeLength > $unitLength\n            && strtolower(\n                substr(\n                    $size,\n                    $sizeLength - $unitLength\n                )\n            ) == $unit\n        ) {\n            return substr(\n                $size,\n                0,\n                $sizeLength - $unitLength\n            ) * $factor;\n        }\n    }\n\n    return $size;\n} // end function PMA_getRealSize()\n\n/**\n * merges array recursive like array_merge_recursive() but keyed-values are\n * always overwritten.\n *\n * array PMA_arrayMergeRecursive(array $array1[, array $array2[, array ...]])\n *\n * @return array   merged array\n *\n * @see     http://php.net/array_merge\n * @see     http://php.net/array_merge_recursive\n */\nfunction PMA_arrayMergeRecursive()\n{\n    switch(func_num_args()) {\n    case 0 :\n        return false;\n    case 1 :\n        // when does that happen?\n        return func_get_arg(0);\n    case 2 :\n        $args = func_get_args();\n        if (! is_array($args[0]) || ! is_array($args[1])) {\n            return $args[1];\n        }\n        foreach ($args[1] as $key2 => $value2) {\n            if (isset($args[0][$key2]) && !is_int($key2)) {\n                $args[0][$key2] = PMA_arrayMergeRecursive(\n                    $args[0][$key2], $value2\n                );\n            } else {\n                // we erase the parent array, otherwise we cannot override\n                // a directive that contains array elements, like this:\n                // (in config.default.php)\n                // $cfg['ForeignKeyDropdownOrder']= array('id-content','content-id');\n                // (in config.inc.php)\n                // $cfg['ForeignKeyDropdownOrder']= array('content-id');\n                if (is_int($key2) && $key2 == 0) {\n                    unset($args[0]);\n                }\n                $args[0][$key2] = $value2;\n            }\n        }\n        return $args[0];\n    default :\n        $args = func_get_args();\n        $args[1] = PMA_arrayMergeRecursive($args[0], $args[1]);\n        array_shift($args);\n        return call_user_func_array('PMA_arrayMergeRecursive', $args);\n    }\n}\n\n/**\n * calls $function for every element in $array recursively\n *\n * this function is protected against deep recursion attack CVE-2006-1549,\n * 1000 seems to be more than enough\n *\n * @param array    &$array             array to walk\n * @param callable $function           function to call for every array element\n * @param bool     $apply_to_keys_also whether to call the function for the keys also\n *\n * @return void\n *\n * @see http://www.php-security.org/MOPB/MOPB-02-2007.html\n * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549\n */\nfunction PMA_arrayWalkRecursive(&$array, $function, $apply_to_keys_also = false)\n{\n    static $recursive_counter = 0;\n    $walked_keys = array();\n\n    if (++$recursive_counter > 1000) {\n        PMA_fatalError(__('possible deep recursion attack'));\n    }\n    foreach ($array as $key => $value) {\n        if (isset($walked_keys[$key])) {\n            continue;\n        }\n        $walked_keys[$key] = true;\n\n        if (is_array($value)) {\n            PMA_arrayWalkRecursive($array[$key], $function, $apply_to_keys_also);\n        } else {\n            $array[$key] = $function($value);\n        }\n\n        if ($apply_to_keys_also && is_string($key)) {\n            $new_key = $function($key);\n            if ($new_key != $key) {\n                $array[$new_key] = $array[$key];\n                unset($array[$key]);\n                $walked_keys[$new_key] = true;\n            }\n        }\n    }\n    $recursive_counter--;\n}\n\n/**\n * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist)\n *\n * checks given $page against given $whitelist and returns true if valid\n * it optionally ignores query parameters in $page (script.php?ignored)\n *\n * @param string &$page     page to check\n * @param array  $whitelist whitelist to check page against\n *\n * @return boolean whether $page is valid or not (in $whitelist or not)\n */\nfunction PMA_checkPageValidity(&$page, $whitelist)\n{\n    if (! isset($page) || !is_string($page)) {\n        return false;\n    }\n\n    if (in_array($page, $whitelist)) {\n        return true;\n    }\n\n    $_page = /*overload*/mb_substr(\n        $page,\n        0,\n        /*overload*/mb_strpos($page . '?', '?')\n    );\n    if (in_array($_page, $whitelist)) {\n        return true;\n    }\n\n    $_page = urldecode($page);\n    $_page = /*overload*/mb_substr(\n        $_page,\n        0,\n        /*overload*/mb_strpos($_page . '?', '?')\n    );\n    if (in_array($_page, $whitelist)) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * tries to find the value for the given environment variable name\n *\n * searches in $_SERVER, $_ENV then tries getenv() and apache_getenv()\n * in this order\n *\n * @param string $var_name variable name\n *\n * @return string  value of $var or empty string\n */\nfunction PMA_getenv($var_name)\n{\n    if (isset($_SERVER[$var_name])) {\n        return $_SERVER[$var_name];\n    }\n\n    if (isset($_ENV[$var_name])) {\n        return $_ENV[$var_name];\n    }\n\n    if (getenv($var_name)) {\n        return getenv($var_name);\n    }\n\n    if (function_exists('apache_getenv')\n        && apache_getenv($var_name, true)\n    ) {\n        return apache_getenv($var_name, true);\n    }\n\n    return '';\n}\n\n/**\n * Send HTTP header, taking IIS limits into account (600 seems ok)\n *\n * @param string $uri         the header to send\n * @param bool   $use_refresh whether to use Refresh: header when running on IIS\n *\n * @return boolean  always true\n */\nfunction PMA_sendHeaderLocation($uri, $use_refresh = false)\n{\n    if (PMA_IS_IIS && /*overload*/mb_strlen($uri) > 600) {\n        include_once './libraries/js_escape.lib.php';\n        PMA_Response::getInstance()->disable();\n\n        include_once './libraries/Template.class.php';\n\n        echo PMA\\Template::get('header_location')\n            ->render(array('uri' => $uri));\n\n        return;\n    }\n\n    if (SID) {\n        if (/*overload*/mb_strpos($uri, '?') === false) {\n            header('Location: ' . $uri . '?' . SID);\n        } else {\n            $separator = PMA_URL_getArgSeparator();\n            header('Location: ' . $uri . $separator . SID);\n        }\n        return;\n    }\n\n    session_write_close();\n    if (headers_sent()) {\n        if (function_exists('debug_print_backtrace')) {\n            echo '<pre>';\n            debug_print_backtrace();\n            echo '</pre>';\n        }\n        trigger_error(\n            'PMA_sendHeaderLocation called when headers are already sent!',\n            E_USER_ERROR\n        );\n    }\n    // bug #1523784: IE6 does not like 'Refresh: 0', it\n    // results in a blank page\n    // but we need it when coming from the cookie login panel)\n    if (PMA_IS_IIS && $use_refresh) {\n        header('Refresh: 0; ' . $uri);\n    } else {\n        header('Location: ' . $uri);\n    }\n}\n\n/**\n * Outputs headers to prevent caching in browser (and on the way).\n *\n * @return void\n */\nfunction PMA_noCacheHeader()\n{\n    if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {\n        return;\n    }\n    // rfc2616 - Section 14.21\n    header('Expires: ' . date(DATE_RFC1123));\n    // HTTP/1.1\n    header(\n        'Cache-Control: no-store, no-cache, must-revalidate,'\n        . '  pre-check=0, post-check=0, max-age=0'\n    );\n    if (PMA_USR_BROWSER_AGENT == 'IE') {\n        /* On SSL IE sometimes fails with:\n         *\n         * Internet Explorer was not able to open this Internet site. The\n         * requested site is either unavailable or cannot be found. Please\n         * try again later.\n         *\n         * Adding Pragma: public fixes this.\n         */\n        header('Pragma: public');\n        return;\n    }\n\n    header('Pragma: no-cache'); // HTTP/1.0\n    // test case: exporting a database into a .gz file with Safari\n    // would produce files not having the current time\n    // (added this header for Safari but should not harm other browsers)\n    header('Last-Modified: ' . date(DATE_RFC1123));\n}\n\n\n/**\n * Sends header indicating file download.\n *\n * @param string $filename Filename to include in headers if empty,\n *                         none Content-Disposition header will be sent.\n * @param string $mimetype MIME type to include in headers.\n * @param int    $length   Length of content (optional)\n * @param bool   $no_cache Whether to include no-caching headers.\n *\n * @return void\n */\nfunction PMA_downloadHeader($filename, $mimetype, $length = 0, $no_cache = true)\n{\n    if ($no_cache) {\n        PMA_noCacheHeader();\n    }\n    /* Replace all possibly dangerous chars in filename */\n    $filename = str_replace(array(';', '\"', \"\\n\", \"\\r\"), '-', $filename);\n    if (!empty($filename)) {\n        header('Content-Description: File Transfer');\n        header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n    }\n    header('Content-Type: ' . $mimetype);\n    // inform the server that compression has been done,\n    // to avoid a double compression (for example with Apache + mod_deflate)\n    $notChromeOrLessThan43 = PMA_USR_BROWSER_AGENT != 'CHROME' // see bug #4942\n        || (PMA_USR_BROWSER_AGENT == 'CHROME' && PMA_USR_BROWSER_VER < 43);\n    if (strpos($mimetype, 'gzip') !== false && $notChromeOrLessThan43) {\n        header('Content-Encoding: gzip');\n    }\n    header('Content-Transfer-Encoding: binary');\n    if ($length > 0) {\n        header('Content-Length: ' . $length);\n    }\n}\n\n/**\n * Returns value of an element in $array given by $path.\n * $path is a string describing position of an element in an associative array,\n * eg. Servers/1/host refers to $array[Servers][1][host]\n *\n * @param string $path    path in the array\n * @param array  $array   the array\n * @param mixed  $default default value\n *\n * @return mixed    array element or $default\n */\nfunction PMA_arrayRead($path, $array, $default = null)\n{\n    $keys = explode('/', $path);\n    $value =& $array;\n    foreach ($keys as $key) {\n        if (! isset($value[$key])) {\n            return $default;\n        }\n        $value =& $value[$key];\n    }\n    return $value;\n}\n\n/**\n * Stores value in an array\n *\n * @param string $path   path in the array\n * @param array  &$array the array\n * @param mixed  $value  value to store\n *\n * @return void\n */\nfunction PMA_arrayWrite($path, &$array, $value)\n{\n    $keys = explode('/', $path);\n    $last_key = array_pop($keys);\n    $a =& $array;\n    foreach ($keys as $key) {\n        if (! isset($a[$key])) {\n            $a[$key] = array();\n        }\n        $a =& $a[$key];\n    }\n    $a[$last_key] = $value;\n}\n\n/**\n * Removes value from an array\n *\n * @param string $path   path in the array\n * @param array  &$array the array\n *\n * @return void\n */\nfunction PMA_arrayRemove($path, &$array)\n{\n    $keys = explode('/', $path);\n    $keys_last = array_pop($keys);\n    $path = array();\n    $depth = 0;\n\n    $path[0] =& $array;\n    $found = true;\n    // go as deep as required or possible\n    foreach ($keys as $key) {\n        if (! isset($path[$depth][$key])) {\n            $found = false;\n            break;\n        }\n        $depth++;\n        $path[$depth] =& $path[$depth - 1][$key];\n    }\n    // if element found, remove it\n    if ($found) {\n        unset($path[$depth][$keys_last]);\n        $depth--;\n    }\n\n    // remove empty nested arrays\n    for (; $depth >= 0; $depth--) {\n        if (! isset($path[$depth+1]) || count($path[$depth+1]) == 0) {\n            unset($path[$depth][$keys[$depth]]);\n        } else {\n            break;\n        }\n    }\n}\n\n/**\n * Returns link to (possibly) external site using defined redirector.\n *\n * @param string $url URL where to go.\n *\n * @return string URL for a link.\n */\nfunction PMA_linkURL($url)\n{\n    if (!preg_match('#^https?://#', $url) || defined('PMA_SETUP')) {\n        return $url;\n    }\n\n    if (!function_exists('PMA_URL_getCommon')) {\n        include_once './libraries/url_generating.lib.php';\n    }\n    $params = array();\n    $params['url'] = $url;\n\n    $url = PMA_URL_getCommon($params);\n    //strip off token and such sensitive information. Just keep url.\n    $arr = parse_url($url);\n    parse_str($arr[\"query\"], $vars);\n    $query = http_build_query(array(\"url\" => $vars[\"url\"]));\n    $url = './url.php?' . $query;\n\n    return $url;\n}\n\n/**\n * Checks whether domain of URL is whitelisted domain or not.\n * Use only for URLs of external sites.\n *\n * @param string $url URL of external site.\n *\n * @return boolean True: if domain of $url is allowed domain,\n *                 False: otherwise.\n */\nfunction PMA_isAllowedDomain($url)\n{\n    $arr = parse_url($url);\n    $domain = $arr[\"host\"];\n    $domainWhiteList = array(\n        /* Include current domain */\n        $_SERVER['SERVER_NAME'],\n        /* phpMyAdmin domains */\n        'wiki.phpmyadmin.net', 'www.phpmyadmin.net', 'phpmyadmin.net',\n        'docs.phpmyadmin.net',\n        /* mysql.com domains */\n        'dev.mysql.com','bugs.mysql.com',\n        /* drizzle.org domains */\n        'www.drizzle.org',\n        /* mariadb domains */\n        'mariadb.org',\n        /* php.net domains */\n        'php.net',\n        /* Github domains*/\n        'github.com','www.github.com',\n        /* Following are doubtful ones. */\n        'www.primebase.com',\n        'pbxt.blogspot.com',\n        'www.percona.com',\n        'mysqldatabaseadministration.blogspot.com',\n        'ronaldbradford.com',\n        'xaprb.com',\n    );\n    if (in_array(/*overload*/mb_strtolower($domain), $domainWhiteList)) {\n        return true;\n    }\n\n    return false;\n}\n\n\n/**\n * Adds JS code snippets to be displayed by the PMA_Response class.\n * Adds a newline to each snippet.\n *\n * @param string $str Js code to be added (e.g. \"token=1234;\")\n *\n * @return void\n */\nfunction PMA_addJSCode($str)\n{\n    $response = PMA_Response::getInstance();\n    $header   = $response->getHeader();\n    $scripts  = $header->getScripts();\n    $scripts->addCode($str);\n}\n\n/**\n * Adds JS code snippet for variable assignment\n * to be displayed by the PMA_Response class.\n *\n * @param string $key    Name of value to set\n * @param mixed  $value  Value to set, can be either string or array of strings\n * @param bool   $escape Whether to escape value or keep it as it is\n *                       (for inclusion of js code)\n *\n * @return void\n */\nfunction PMA_addJSVar($key, $value, $escape = true)\n{\n    PMA_addJSCode(PMA_getJsValue($key, $value, $escape));\n}\n\n/**\n * Replace some html-unfriendly stuff\n *\n * @param string $buffer String to process\n *\n * @return string Escaped and cleaned up text suitable for html\n */\nfunction PMA_mimeDefaultFunction($buffer)\n{\n    $buffer = htmlspecialchars($buffer);\n    $buffer = str_replace('  ', ' &nbsp;', $buffer);\n    $buffer = preg_replace(\"@((\\015\\012)|(\\015)|(\\012))@\", '<br />' . \"\\n\", $buffer);\n\n    return $buffer;\n}\n\n/**\n * Displays SQL query before executing.\n *\n * @param array|string $query_data Array containing queries or query itself\n *\n * @return void\n */\nfunction PMA_previewSQL($query_data)\n{\n    $retval = '<div class=\"preview_sql\">';\n    if (empty($query_data)) {\n        $retval .= __('No change');\n    } elseif (is_array($query_data)) {\n        foreach ($query_data as $query) {\n            $retval .= PMA_Util::formatSql($query);\n        }\n    } else {\n        $retval .= PMA_Util::formatSql($query_data);\n    }\n    $retval .= '</div>';\n    $response = PMA_Response::getInstance();\n    $response->addJSON('sql_data', $retval);\n    exit;\n}\n\n/**\n * recursively check if variable is empty\n *\n * @param mixed $value the variable\n *\n * @return bool true if empty\n */\nfunction PMA_emptyRecursive($value)\n{\n    $empty = true;\n    if (is_array($value)) {\n        PMA_arrayWalkRecursive(\n            $value,\n            function ($item) use (&$empty) {\n                $empty = $empty && empty($item);\n            }\n        );\n    } else {\n        $empty = empty($value);\n    }\n    return $empty;\n}\n\n/**\n * Creates some globals from $_POST variables matching a pattern\n *\n * @param array $post_patterns The patterns to search for\n *\n * @return void\n */\nfunction PMA_setPostAsGlobal($post_patterns)\n{\n    foreach (array_keys($_POST) as $post_key) {\n        foreach ($post_patterns as $one_post_pattern) {\n            if (preg_match($one_post_pattern, $post_key)) {\n                $GLOBALS[$post_key] = $_POST[$post_key];\n            }\n        }\n    }\n}\n\n/**\n * Creates some globals from $_REQUEST\n *\n * @param string $param db|table\n *\n * @return void\n */\nfunction PMA_setGlobalDbOrTable($param)\n{\n    $GLOBALS[$param] = '';\n    if (PMA_isValid($_REQUEST[$param])) {\n        // can we strip tags from this?\n        // only \\ and / is not allowed in db names for MySQL\n        $GLOBALS[$param] = $_REQUEST[$param];\n        $GLOBALS['url_params'][$param] = $GLOBALS[$param];\n    }\n}\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Misc stuff and REQUIRED by ALL the scripts.\n * MUST be included by every script\n *\n * Among other things, it contains the advanced authentication work.\n *\n * Order of sections for common.inc.php:\n *\n * the authentication libraries must be before the connection to db\n *\n * ... so the required order is:\n *\n * LABEL_variables_init\n *  - initialize some variables always needed\n * LABEL_parsing_config_file\n *  - parsing of the configuration file\n * LABEL_loading_language_file\n *  - loading language file\n * LABEL_setup_servers\n *  - check and setup configured servers\n * LABEL_theme_setup\n *  - setting up themes\n *\n * - load of MySQL extension (if necessary)\n * - loading of an authentication library\n * - db connection\n * - authentication work\n *\n * @package PhpMyAdmin\n */\n\n/**\n * block attempts to directly run this script\n */\nif (getcwd() == dirname(__FILE__)) {\n    die('Attack stopped');\n}\n\n/**\n * Minimum PHP version; can't call PMA_fatalError() which uses a\n * PHP 5 function, so cannot easily localize this message.\n */\nif (version_compare(PHP_VERSION, '5.5.0', 'lt')) {\n    die('PHP 5.5+ is required');\n}\n\n/**\n * for verification in all procedural scripts under libraries\n */\ndefine('PHPMYADMIN', true);\n\n\n/**\n * String handling (security)\n */\nrequire_once './libraries/String.class.php';\n$PMA_String = new PMA_String();\n\n/**\n * the error handler\n */\nrequire './libraries/Error_Handler.class.php';\n\n/**\n * initialize the error handler\n */\n$GLOBALS['error_handler'] = new PMA_Error_Handler();\n\n/**\n * This setting was removed in PHP 5.4. But at this point PMA_PHP_INT_VERSION\n * is not yet defined so we use another way to find out the PHP version.\n */\nif (version_compare(phpversion(), '5.4', 'lt')) {\n    /**\n     * Avoid problems with magic_quotes_runtime\n     */\n    @ini_set('magic_quotes_runtime', 'false');\n}\n\n/**\n * core functions\n */\nrequire './libraries/core.lib.php';\n\n/**\n * Input sanitizing\n */\nrequire './libraries/sanitizing.lib.php';\n\n/**\n * Warning about mbstring.\n */\nif (! function_exists('mb_detect_encoding')) {\n    PMA_warnMissingExtension('mbstring', $fatal = true);\n}\n\n/**\n * Set utf-8 encoding for PHP\n */\nini_set('default_charset', 'utf-8');\nmb_internal_encoding('utf-8');\n\n/**\n * the PMA_Theme class\n */\nrequire './libraries/Theme.class.php';\n\n/**\n * the PMA_Theme_Manager class\n */\nrequire './libraries/Theme_Manager.class.php';\n\n/**\n * the PMA_Config class\n */\nrequire './libraries/Config.class.php';\n\n/**\n * the relation lib, tracker needs it\n */\nrequire './libraries/relation.lib.php';\n\n/**\n * the PMA_Tracker class\n */\nrequire './libraries/Tracker.class.php';\n\n/**\n * the PMA_Table class\n */\nrequire './libraries/Table.class.php';\n\n/**\n * the PMA_Types class\n */\nrequire './libraries/Types.class.php';\n\nif (! defined('PMA_MINIMUM_COMMON')) {\n    /**\n     * common functions\n     */\n    include_once './libraries/Util.class.php';\n\n    /**\n     * JavaScript escaping.\n     */\n    include_once './libraries/js_escape.lib.php';\n\n    /**\n     * Include URL/hidden inputs generating.\n     */\n    include_once './libraries/url_generating.lib.php';\n\n    /**\n     * Used to generate the page\n     */\n    include_once 'libraries/Response.class.php';\n}\n\n/******************************************************************************/\n/* start procedural code                       label_start_procedural         */\n\n/**\n * PATH_INFO could be compromised if set, so remove it from PHP_SELF\n * and provide a clean PHP_SELF here\n */\n$PMA_PHP_SELF = PMA_getenv('PHP_SELF');\n$_PATH_INFO = PMA_getenv('PATH_INFO');\nif (! empty($_PATH_INFO) && ! empty($PMA_PHP_SELF)) {\n    $path_info_pos = /*overload*/mb_strrpos($PMA_PHP_SELF, $_PATH_INFO);\n    $pathLength = $path_info_pos + /*overload*/mb_strlen($_PATH_INFO);\n    if ($pathLength === /*overload*/mb_strlen($PMA_PHP_SELF)) {\n        $PMA_PHP_SELF = /*overload*/mb_substr($PMA_PHP_SELF, 0, $path_info_pos);\n    }\n}\n$PMA_PHP_SELF = htmlspecialchars($PMA_PHP_SELF);\n\n\n/**\n * just to be sure there was no import (registering) before here\n * we empty the global space (but avoid unsetting $variables_list\n * and $key in the foreach (), we still need them!)\n */\n$variables_whitelist = array (\n    'GLOBALS',\n    '_SERVER',\n    '_GET',\n    '_POST',\n    '_REQUEST',\n    '_FILES',\n    '_ENV',\n    '_COOKIE',\n    '_SESSION',\n    'error_handler',\n    'PMA_PHP_SELF',\n    'variables_whitelist',\n    'key',\n    'PMA_String'\n);\n\nforeach (get_defined_vars() as $key => $value) {\n    if (! in_array($key, $variables_whitelist)) {\n        unset($$key);\n    }\n}\nunset($key, $value, $variables_whitelist);\n\n\n/**\n * Subforms - some functions need to be called by form, cause of the limited URL\n * length, but if this functions inside another form you cannot just open a new\n * form - so phpMyAdmin uses 'arrays' inside this form\n *\n * <code>\n * <form ...>\n * ... main form elements ...\n * <input type=\"hidden\" name=\"subform[action1][id]\" value=\"1\" />\n * ... other subform data ...\n * <input type=\"submit\" name=\"usesubform[action1]\" value=\"do action1\" />\n * ... other subforms ...\n * <input type=\"hidden\" name=\"subform[actionX][id]\" value=\"X\" />\n * ... other subform data ...\n * <input type=\"submit\" name=\"usesubform[actionX]\" value=\"do actionX\" />\n * ... main form elements ...\n * <input type=\"submit\" name=\"main_action\" value=\"submit form\" />\n * </form>\n * </code>\n *\n * so we now check if a subform is submitted\n */\n$__redirect = null;\nif (isset($_POST['usesubform'])) {\n    // if a subform is present and should be used\n    // the rest of the form is deprecated\n    $subform_id = key($_POST['usesubform']);\n    $subform    = $_POST['subform'][$subform_id];\n    $_POST      = $subform;\n    $_REQUEST   = $subform;\n    /**\n     * some subforms need another page than the main form, so we will just\n     * include this page at the end of this script - we use $__redirect to\n     * track this\n     */\n    if (isset($_POST['redirect'])\n        && $_POST['redirect'] != basename($PMA_PHP_SELF)\n    ) {\n        $__redirect = $_POST['redirect'];\n        unset($_POST['redirect']);\n    }\n    unset($subform_id, $subform);\n} else {\n    // Note: here we overwrite $_REQUEST so that it does not contain cookies,\n    // because another application for the same domain could have set\n    // a cookie (with a compatible path) that overrides a variable\n    // we expect from GET or POST.\n    // We'll refer to cookies explicitly with the $_COOKIE syntax.\n    $_REQUEST = array_merge($_GET, $_POST);\n}\n// end check if a subform is submitted\n\n/**\n * This setting was removed in PHP 5.4, but get_magic_quotes_gpc\n * always returns False since then.\n */\nif (get_magic_quotes_gpc()) {\n    PMA_arrayWalkRecursive($_GET, 'stripslashes', true);\n    PMA_arrayWalkRecursive($_POST, 'stripslashes', true);\n    PMA_arrayWalkRecursive($_COOKIE, 'stripslashes', true);\n    PMA_arrayWalkRecursive($_REQUEST, 'stripslashes', true);\n}\n\n/**\n * check timezone setting\n * this could produce an E_STRICT - but only once,\n * if not done here it will produce E_STRICT on every date/time function\n * (starting with PHP 5.3, this code can produce E_WARNING rather than\n *  E_STRICT)\n *\n */\ndate_default_timezone_set(@date_default_timezone_get());\n\n/******************************************************************************/\n/* parsing configuration file                  LABEL_parsing_config_file      */\n\n/**\n * We really need this one!\n */\nif (! function_exists('preg_replace')) {\n    PMA_warnMissingExtension('pcre', true);\n}\n\n/**\n * JSON is required in several places.\n */\nif (! function_exists('json_encode')) {\n    PMA_warnMissingExtension('json', true);\n}\n\n/**\n * @global PMA_Config $GLOBALS['PMA_Config']\n * force reading of config file, because we removed sensitive values\n * in the previous iteration\n */\n$GLOBALS['PMA_Config'] = new PMA_Config(CONFIG_FILE);\n\nif (!defined('PMA_MINIMUM_COMMON')) {\n    $GLOBALS['PMA_Config']->checkPmaAbsoluteUri();\n}\n\n/**\n * BC - enable backward compatibility\n * exports all configuration settings into $GLOBALS ($GLOBALS['cfg'])\n */\n$GLOBALS['PMA_Config']->enableBc();\n\n/**\n * clean cookies on upgrade\n * when changing something related to PMA cookies, increment the cookie version\n */\n$pma_cookie_version = 4;\nif (isset($_COOKIE)) {\n    if (! isset($_COOKIE['pmaCookieVer'])\n        || $_COOKIE['pmaCookieVer'] != $pma_cookie_version\n    ) {\n        // delete all cookies\n        foreach ($_COOKIE as $cookie_name => $tmp) {\n            $GLOBALS['PMA_Config']->removeCookie($cookie_name);\n        }\n        $_COOKIE = array();\n        $GLOBALS['PMA_Config']->setCookie('pmaCookieVer', $pma_cookie_version);\n    }\n}\n\n\n/**\n * check HTTPS connection\n */\nif ($GLOBALS['PMA_Config']->get('ForceSSL')\n    && ! $GLOBALS['PMA_Config']->detectHttps()\n) {\n    // grab SSL URL\n    $url = $GLOBALS['PMA_Config']->getSSLUri();\n    // Actually redirect\n    PMA_sendHeaderLocation($url . PMA_URL_getCommon($_GET, 'text'));\n    // delete the current session, otherwise we get problems (see bug #2397877)\n    $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);\n    exit;\n}\n\n\n/**\n * include session handling after the globals, to prevent overwriting\n */\nrequire './libraries/session.inc.php';\n\n/**\n * init some variables LABEL_variables_init\n */\n\n/**\n * holds parameters to be passed to next page\n * @global array $GLOBALS['url_params']\n */\n$GLOBALS['url_params'] = array();\n\n/**\n * the whitelist for $GLOBALS['goto']\n * @global array $goto_whitelist\n */\n$goto_whitelist = array(\n    //'browse_foreigners.php',\n    //'changelog.php',\n    //'chk_rel.php',\n    'db_create.php',\n    'db_datadict.php',\n    'db_sql.php',\n    'db_events.php',\n    'db_export.php',\n    'db_importdocsql.php',\n    'db_qbe.php',\n    'db_structure.php',\n    'db_import.php',\n    'db_operations.php',\n    'db_search.php',\n    'db_routines.php',\n    'export.php',\n    'import.php',\n    //'index.php',\n    //'navigation.php',\n    //'license.php',\n    'index.php',\n    'pdf_pages.php',\n    'pdf_schema.php',\n    //'phpinfo.php',\n    'server_binlog.php',\n    'server_collations.php',\n    'server_databases.php',\n    'server_engines.php',\n    'server_export.php',\n    'server_import.php',\n    'server_privileges.php',\n    'server_sql.php',\n    'server_status.php',\n    'server_status_advisor.php',\n    'server_status_monitor.php',\n    'server_status_queries.php',\n    'server_status_variables.php',\n    'server_variables.php',\n    'sql.php',\n    'tbl_addfield.php',\n    'tbl_change.php',\n    'tbl_create.php',\n    'tbl_import.php',\n    'tbl_indexes.php',\n    'tbl_sql.php',\n    'tbl_export.php',\n    'tbl_operations.php',\n    'tbl_structure.php',\n    'tbl_relation.php',\n    'tbl_replace.php',\n    'tbl_row_action.php',\n    'tbl_select.php',\n    'tbl_zoom_select.php',\n    //'themes.php',\n    'transformation_overview.php',\n    'transformation_wrapper.php',\n    'user_password.php',\n);\n\n/**\n * check $__redirect against whitelist\n */\nif (! PMA_checkPageValidity($__redirect, $goto_whitelist)) {\n    $__redirect = null;\n}\n\n/**\n * holds page that should be displayed\n * @global string $GLOBALS['goto']\n */\n$GLOBALS['goto'] = '';\n// Security fix: disallow accessing serious server files via \"?goto=\"\nif (PMA_checkPageValidity($_REQUEST['goto'], $goto_whitelist)) {\n    $GLOBALS['goto'] = $_REQUEST['goto'];\n    $GLOBALS['url_params']['goto'] = $_REQUEST['goto'];\n} else {\n    unset($_REQUEST['goto'], $_GET['goto'], $_POST['goto'], $_COOKIE['goto']);\n}\n\n/**\n * returning page\n * @global string $GLOBALS['back']\n */\nif (PMA_checkPageValidity($_REQUEST['back'], $goto_whitelist)) {\n    $GLOBALS['back'] = $_REQUEST['back'];\n} else {\n    unset($_REQUEST['back'], $_GET['back'], $_POST['back'], $_COOKIE['back']);\n}\n\n/**\n * Check whether user supplied token is valid, if not remove any possibly\n * dangerous stuff from request.\n *\n * remember that some objects in the session with session_start and __wakeup()\n * could access this variables before we reach this point\n * f.e. PMA_Config: fontsize\n *\n * @todo variables should be handled by their respective owners (objects)\n * f.e. lang, server, collation_connection in PMA_Config\n */\n$token_mismatch = true;\n$token_provided = false;\nif (PMA_isValid($_REQUEST['token'])) {\n    $token_provided = true;\n    $token_mismatch = ! hash_equals($_SESSION[' PMA_token '], $_REQUEST['token']);\n}\n\nif ($token_mismatch) {\n    /**\n     *  List of parameters which are allowed from unsafe source\n     */\n    $allow_list = array(\n        /* needed for direct access, see FAQ 1.34\n         * also, server needed for cookie login screen (multi-server)\n         */\n        'server', 'db', 'table', 'target', 'lang',\n        /* Session ID */\n        'phpMyAdmin',\n        /* Cookie preferences */\n        'pma_lang', 'pma_collation_connection',\n        /* Possible login form */\n        'pma_servername', 'pma_username', 'pma_password',\n        'g-recaptcha-response',\n        /* Needed to send the correct reply */\n        'ajax_request',\n        /* Permit to log out even if there is a token mismatch */\n        'old_usr',\n        /* Permit redirection with token-mismatch in url.php */\n        'url',\n        /* Permit session expiry flag */\n        'session_expired',\n        /* JS loading */\n        'scripts', 'call_done'\n    );\n    /**\n     * Allow changing themes in test/theme.php\n     */\n    if (defined('PMA_TEST_THEME')) {\n        $allow_list[] = 'set_theme';\n    }\n    /**\n     * Require cleanup functions\n     */\n    include './libraries/cleanup.lib.php';\n    /**\n     * Do actual cleanup\n     */\n    PMA_removeRequestVars($allow_list);\n\n}\n\n\n/**\n * current selected database\n * @global string $GLOBALS['db']\n */\nPMA_setGlobalDbOrTable('db');\n\n/**\n * current selected table\n * @global string $GLOBALS['table']\n */\nPMA_setGlobalDbOrTable('table');\n\n/**\n * Store currently selected recent table.\n * Affect $GLOBALS['db'] and $GLOBALS['table']\n */\nif (PMA_isValid($_REQUEST['selected_recent_table'])) {\n    $recent_table = json_decode($_REQUEST['selected_recent_table'], true);\n    $GLOBALS['db'] = $recent_table['db'];\n    $GLOBALS['url_params']['db'] = $GLOBALS['db'];\n    $GLOBALS['table'] = $recent_table['table'];\n    $GLOBALS['url_params']['table'] = $GLOBALS['table'];\n}\n\n/**\n * SQL query to be executed\n * @global string $GLOBALS['sql_query']\n */\n$GLOBALS['sql_query'] = '';\nif (PMA_isValid($_REQUEST['sql_query'])) {\n    $GLOBALS['sql_query'] = $_REQUEST['sql_query'];\n}\n\n//$_REQUEST['set_theme'] // checked later in this file LABEL_theme_setup\n//$_REQUEST['server']; // checked later in this file\n//$_REQUEST['lang'];   // checked by LABEL_loading_language_file\n\n/******************************************************************************/\n/* loading language file                       LABEL_loading_language_file    */\n\n/**\n * lang detection is done here\n */\nrequire './libraries/select_lang.lib.php';\n\n// Defines the cell alignment values depending on text direction\nif ($GLOBALS['text_dir'] == 'ltr') {\n    $GLOBALS['cell_align_left']  = 'left';\n    $GLOBALS['cell_align_right'] = 'right';\n} else {\n    $GLOBALS['cell_align_left']  = 'right';\n    $GLOBALS['cell_align_right'] = 'left';\n}\n\n/**\n * check for errors occurred while loading configuration\n * this check is done here after loading language files to present errors in locale\n */\n$GLOBALS['PMA_Config']->checkPermissions();\n\nif ($GLOBALS['PMA_Config']->error_config_file) {\n    $error = '[strong]' . __('Failed to read configuration file!') . '[/strong]'\n        . '[br][br]'\n        . __(\n            'This usually means there is a syntax error in it, '\n            . 'please check any errors shown below.'\n        )\n        . '[br][br]'\n        . '[conferr]';\n    trigger_error($error, E_USER_ERROR);\n}\nif ($GLOBALS['PMA_Config']->error_config_default_file) {\n    $error = sprintf(\n        __('Could not load default configuration from: %1$s'),\n        $GLOBALS['PMA_Config']->default_source\n    );\n    trigger_error($error, E_USER_ERROR);\n}\nif ($GLOBALS['PMA_Config']->error_pma_uri) {\n    trigger_error(\n        __(\n            'The [code]$cfg[\\'PmaAbsoluteUri\\'][/code]'\n            . ' directive MUST be set in your configuration file!'\n        ),\n        E_USER_ERROR\n    );\n}\n\n\n/******************************************************************************/\n/* setup servers                                       LABEL_setup_servers    */\n\n/**\n * current server\n * @global integer $GLOBALS['server']\n */\n$GLOBALS['server'] = 0;\n\n/**\n * Servers array fixups.\n * $default_server comes from PMA_Config::enableBc()\n * @todo merge into PMA_Config\n */\n// Do we have some server?\nif (! isset($cfg['Servers']) || count($cfg['Servers']) == 0) {\n    // No server => create one with defaults\n    $cfg['Servers'] = array(1 => $default_server);\n} else {\n    // We have server(s) => apply default configuration\n    $new_servers = array();\n\n    foreach ($cfg['Servers'] as $server_index => $each_server) {\n\n        // Detect wrong configuration\n        if (!is_int($server_index) || $server_index < 1) {\n            trigger_error(\n                sprintf(__('Invalid server index: %s'), $server_index),\n                E_USER_ERROR\n            );\n        }\n\n        $each_server = array_merge($default_server, $each_server);\n\n        // Don't use servers with no hostname\n        if ($each_server['connect_type'] == 'tcp' && empty($each_server['host'])) {\n            trigger_error(\n                sprintf(\n                    __(\n                        'Invalid hostname for server %1$s. '\n                        . 'Please review your configuration.'\n                    ),\n                    $server_index\n                ),\n                E_USER_ERROR\n            );\n        }\n\n        // Final solution to bug #582890\n        // If we are using a socket connection\n        // and there is nothing in the verbose server name\n        // or the host field, then generate a name for the server\n        // in the form of \"Server 2\", localized of course!\n        if ($each_server['connect_type'] == 'socket'\n            && empty($each_server['host'])\n            && empty($each_server['verbose'])\n        ) {\n            $each_server['verbose'] = sprintf(__('Server %d'), $server_index);\n        }\n\n        $new_servers[$server_index] = $each_server;\n    }\n    $cfg['Servers'] = $new_servers;\n    unset($new_servers, $server_index, $each_server);\n}\n\n// Cleanup\nunset($default_server);\n\n\n/******************************************************************************/\n/* setup themes                                          LABEL_theme_setup    */\n\n/**\n * @global PMA_Theme_Manager $_SESSION['PMA_Theme_Manager']\n */\nif (! isset($_SESSION['PMA_Theme_Manager'])) {\n    $_SESSION['PMA_Theme_Manager'] = new PMA_Theme_Manager;\n} else {\n    /**\n     * @todo move all __wakeup() functionality into session.inc.php\n     */\n    $_SESSION['PMA_Theme_Manager']->checkConfig();\n}\n\n// for the theme per server feature\nif (isset($_REQUEST['server']) && ! isset($_REQUEST['set_theme'])) {\n    $GLOBALS['server'] = $_REQUEST['server'];\n    $tmp = $_SESSION['PMA_Theme_Manager']->getThemeCookie();\n    if (empty($tmp)) {\n        $tmp = $_SESSION['PMA_Theme_Manager']->theme_default;\n    }\n    $_SESSION['PMA_Theme_Manager']->setActiveTheme($tmp);\n    unset($tmp);\n}\n/**\n * @todo move into PMA_Theme_Manager::__wakeup()\n */\nif (isset($_REQUEST['set_theme'])) {\n    // if user selected a theme\n    $_SESSION['PMA_Theme_Manager']->setActiveTheme($_REQUEST['set_theme']);\n}\n\n/**\n * the theme object\n * @global PMA_Theme $_SESSION['PMA_Theme']\n */\n$_SESSION['PMA_Theme'] = $_SESSION['PMA_Theme_Manager']->theme;\n\n// BC\n/**\n * the active theme\n * @global string $GLOBALS['theme']\n */\n$GLOBALS['theme']           = $_SESSION['PMA_Theme']->getName();\n/**\n * the theme path\n * @global string $GLOBALS['pmaThemePath']\n */\n$GLOBALS['pmaThemePath']    = $_SESSION['PMA_Theme']->getPath();\n/**\n * the theme image path\n * @global string $GLOBALS['pmaThemeImage']\n */\n$GLOBALS['pmaThemeImage']   = $_SESSION['PMA_Theme']->getImgPath();\n\n/**\n * load layout file if exists\n */\nif (@file_exists($_SESSION['PMA_Theme']->getLayoutFile())) {\n    include $_SESSION['PMA_Theme']->getLayoutFile();\n}\n\nif (! defined('PMA_MINIMUM_COMMON')) {\n    /**\n     * Character set conversion.\n     */\n    include_once './libraries/charset_conversion.lib.php';\n\n    /**\n     * Lookup server by name\n     * (see FAQ 4.8)\n     */\n    if (! empty($_REQUEST['server'])\n        && is_string($_REQUEST['server'])\n        && ! is_numeric($_REQUEST['server'])\n    ) {\n        foreach ($cfg['Servers'] as $i => $server) {\n            $verboseToLower = /*overload*/mb_strtolower($server['verbose']);\n            $serverToLower = /*overload*/mb_strtolower($_REQUEST['server']);\n            if ($server['host'] == $_REQUEST['server']\n                || $server['verbose'] == $_REQUEST['server']\n                || $verboseToLower == $serverToLower\n                || md5($verboseToLower) == $serverToLower\n            ) {\n                $_REQUEST['server'] = $i;\n                break;\n            }\n        }\n        if (is_string($_REQUEST['server'])) {\n            unset($_REQUEST['server']);\n        }\n        unset($i);\n    }\n\n    /**\n     * If no server is selected, make sure that $cfg['Server'] is empty (so\n     * that nothing will work), and skip server authentication.\n     * We do NOT exit here, but continue on without logging into any server.\n     * This way, the welcome page will still come up (with no server info) and\n     * present a choice of servers in the case that there are multiple servers\n     * and '$cfg['ServerDefault'] = 0' is set.\n     */\n\n    if (isset($_REQUEST['server'])\n        && (is_string($_REQUEST['server']) || is_numeric($_REQUEST['server']))\n        && ! empty($_REQUEST['server'])\n        && ! empty($cfg['Servers'][$_REQUEST['server']])\n    ) {\n        $GLOBALS['server'] = $_REQUEST['server'];\n        $cfg['Server'] = $cfg['Servers'][$GLOBALS['server']];\n    } else {\n        if (!empty($cfg['Servers'][$cfg['ServerDefault']])) {\n            $GLOBALS['server'] = $cfg['ServerDefault'];\n            $cfg['Server'] = $cfg['Servers'][$GLOBALS['server']];\n        } else {\n            $GLOBALS['server'] = 0;\n            $cfg['Server'] = array();\n        }\n    }\n    $GLOBALS['url_params']['server'] = $GLOBALS['server'];\n\n    /**\n     * Kanji encoding convert feature appended by Y.Kawada (2002/2/20)\n     */\n    if (function_exists('mb_convert_encoding')\n        && $lang == 'ja'\n    ) {\n        include_once './libraries/kanji-encoding.lib.php';\n    } // end if\n\n    /**\n     * save some settings in cookies\n     * @todo should be done in PMA_Config\n     */\n    $GLOBALS['PMA_Config']->setCookie('pma_lang', $GLOBALS['lang']);\n    if (isset($GLOBALS['collation_connection'])) {\n        $GLOBALS['PMA_Config']->setCookie(\n            'pma_collation_connection',\n            $GLOBALS['collation_connection']\n        );\n    }\n\n    $_SESSION['PMA_Theme_Manager']->setThemeCookie();\n\n    if (! empty($cfg['Server'])) {\n\n        /**\n         * Loads the proper database interface for this server\n         */\n        include_once './libraries/database_interface.inc.php';\n\n        include_once './libraries/logging.lib.php';\n\n        // get LoginCookieValidity from preferences cache\n        // no generic solution for loading preferences from cache as some settings\n        // need to be kept for processing in PMA_Config::loadUserPreferences()\n        $cache_key = 'server_' . $GLOBALS['server'];\n        if (isset($_SESSION['cache'][$cache_key]['userprefs']['LoginCookieValidity'])\n        ) {\n            $value\n                = $_SESSION['cache'][$cache_key]['userprefs']['LoginCookieValidity'];\n            $GLOBALS['PMA_Config']->set('LoginCookieValidity', $value);\n            $GLOBALS['cfg']['LoginCookieValidity'] = $value;\n            unset($value);\n        }\n        unset($cache_key);\n\n        // Gets the authentication library that fits the $cfg['Server'] settings\n        // and run authentication\n\n        // to allow HTTP or http\n        $cfg['Server']['auth_type']\n            = /*overload*/mb_strtolower($cfg['Server']['auth_type']);\n\n        /**\n         * the required auth type plugin\n         */\n        $auth_class = \"Authentication\" . ucfirst($cfg['Server']['auth_type']);\n        if (! file_exists(\n            './libraries/plugins/auth/'\n            . $auth_class . '.class.php'\n        )) {\n            PMA_fatalError(\n                __('Invalid authentication method set in configuration:')\n                . ' ' . $cfg['Server']['auth_type']\n            );\n        }\n        if (isset($_REQUEST['pma_password'])) {\n            $_REQUEST['pma_password'] = substr($_REQUEST['pma_password'], 0, 256);\n        }\n        include_once  './libraries/plugins/auth/' . $auth_class . '.class.php';\n        // todo: add plugin manager\n        $plugin_manager = null;\n        /** @var AuthenticationPlugin $auth_plugin */\n        $auth_plugin = new $auth_class($plugin_manager);\n\n        if (! $auth_plugin->authCheck()) {\n            /* Force generating of new session on login */\n            if ($token_provided) {\n                PMA_secureSession();\n            }\n            $auth_plugin->auth();\n        } else {\n            $auth_plugin->authSetUser();\n        }\n\n        // Check IP-based Allow/Deny rules as soon as possible to reject the\n        // user based on mod_access in Apache\n        if (isset($cfg['Server']['AllowDeny'])\n            && isset($cfg['Server']['AllowDeny']['order'])\n        ) {\n\n            /**\n             * ip based access library\n             */\n            include_once './libraries/ip_allow_deny.lib.php';\n\n            $allowDeny_forbidden         = false; // default\n            if ($cfg['Server']['AllowDeny']['order'] == 'allow,deny') {\n                $allowDeny_forbidden     = true;\n                if (PMA_allowDeny('allow')) {\n                    $allowDeny_forbidden = false;\n                }\n                if (PMA_allowDeny('deny')) {\n                    $allowDeny_forbidden = true;\n                }\n            } elseif ($cfg['Server']['AllowDeny']['order'] == 'deny,allow') {\n                if (PMA_allowDeny('deny')) {\n                    $allowDeny_forbidden = true;\n                }\n                if (PMA_allowDeny('allow')) {\n                    $allowDeny_forbidden = false;\n                }\n            } elseif ($cfg['Server']['AllowDeny']['order'] == 'explicit') {\n                if (PMA_allowDeny('allow') && ! PMA_allowDeny('deny')) {\n                    $allowDeny_forbidden = false;\n                } else {\n                    $allowDeny_forbidden = true;\n                }\n            } // end if ... elseif ... elseif\n\n            // Ejects the user if banished\n            if ($allowDeny_forbidden) {\n                PMA_logUser($cfg['Server']['user'], 'allow-denied');\n                $auth_plugin->authFails();\n            }\n        } // end if\n\n        // is root allowed?\n        if (! $cfg['Server']['AllowRoot'] && $cfg['Server']['user'] == 'root') {\n            $allowDeny_forbidden = true;\n            PMA_logUser($cfg['Server']['user'], 'root-denied');\n            $auth_plugin->authFails();\n        }\n\n        // is a login without password allowed?\n        if (! $cfg['Server']['AllowNoPassword']\n            && $cfg['Server']['password'] == ''\n        ) {\n            $login_without_password_is_forbidden = true;\n            PMA_logUser($cfg['Server']['user'], 'empty-denied');\n            $auth_plugin->authFails();\n        }\n\n        // if using TCP socket is not needed\n        if (/*overload*/mb_strtolower($cfg['Server']['connect_type']) == 'tcp') {\n            $cfg['Server']['socket'] = '';\n        }\n\n        // Try to connect MySQL with the control user profile (will be used to\n        // get the privileges list for the current user but the true user link\n        // must be open after this one so it would be default one for all the\n        // scripts)\n        $controllink = false;\n        if ($cfg['Server']['controluser'] != '') {\n            if (! empty($cfg['Server']['controlhost'])\n                || ! empty($cfg['Server']['controlport'])\n            ) {\n                $server_details = array();\n                if (! empty($cfg['Server']['controlhost'])) {\n                    $server_details['host'] = $cfg['Server']['controlhost'];\n                } else {\n                    $server_details['host'] = $cfg['Server']['host'];\n                }\n                if (! empty($cfg['Server']['controlport'])) {\n                    $server_details['port'] = $cfg['Server']['controlport'];\n                } elseif ($server_details['host'] == $cfg['Server']['host']) {\n                    // Evaluates to true when controlhost == host\n                    // or controlhost is not defined (hence it defaults to host)\n                    // In such case we can use the value of port.\n                    $server_details['port'] = $cfg['Server']['port'];\n                }\n                // otherwise we leave the $server_details['port'] unset,\n                // allowing it to take default mysql port\n\n                $controllink = $GLOBALS['dbi']->connect(\n                    $cfg['Server']['controluser'],\n                    $cfg['Server']['controlpass'],\n                    true,\n                    $server_details\n                );\n            } else {\n                $controllink = $GLOBALS['dbi']->connect(\n                    $cfg['Server']['controluser'],\n                    $cfg['Server']['controlpass'],\n                    true\n                );\n            }\n        }\n\n        // Connects to the server (validates user's login)\n        /** @var PMA_DatabaseInterface $userlink */\n        $userlink = $GLOBALS['dbi']->connect(\n            $cfg['Server']['user'], $cfg['Server']['password'], false\n        );\n\n        // Set timestamp for the session, if required.\n        if ($cfg['Server']['SessionTimeZone'] != '') {\n            $sql_query_tz = 'SET ' . PMA_Util::backquote('time_zone') . ' = '\n                . '\\''\n                . PMA_Util::sqlAddSlashes($cfg['Server']['SessionTimeZone'])\n                . '\\'';\n\n            if (! $userlink->query($sql_query_tz)) {\n                $error_message_tz = sprintf(\n                    __(\n                        'Unable to use timezone %1$s for server %2$d. '\n                        . 'Please check your configuration setting for '\n                        . '[em]$cfg[\\'Servers\\'][%3$d][\\'SessionTimeZone\\'][/em]. '\n                        . 'phpMyAdmin is currently using the default time zone '\n                        . 'of the database server.'\n                    ),\n                    $cfg['Servers'][$GLOBALS['server']]['SessionTimeZone'],\n                    $GLOBALS['server'],\n                    $GLOBALS['server']\n                );\n\n                $GLOBALS['error_handler']->addError(\n                    $error_message_tz,\n                    E_USER_WARNING,\n                    '',\n                    '',\n                    false\n                );\n            }\n        }\n\n        if (! $controllink) {\n            $controllink = $userlink;\n        }\n\n        $auth_plugin->storeUserCredentials();\n\n        /* Log success */\n        PMA_logUser($cfg['Server']['user']);\n\n        if (PMA_MYSQL_INT_VERSION < $cfg['MysqlMinVersion']['internal']) {\n            PMA_fatalError(\n                __('You should upgrade to %s %s or later.'),\n                array('MySQL', $cfg['MysqlMinVersion']['human'])\n            );\n        }\n\n        /**\n         * Type handling object.\n         */\n        if (PMA_DRIZZLE) {\n            $GLOBALS['PMA_Types'] = new PMA_Types_Drizzle();\n        } else {\n            $GLOBALS['PMA_Types'] = new PMA_Types_MySQL();\n        }\n\n        if (PMA_DRIZZLE) {\n            // DisableIS must be set to false for Drizzle, it maps SHOW commands\n            // to INFORMATION_SCHEMA queries anyway so it's fast on large servers\n            $cfg['Server']['DisableIS'] = false;\n            // SHOW OPEN TABLES is not supported by Drizzle\n            $cfg['SkipLockedTables'] = false;\n        }\n\n        /**\n         * Charset information\n         */\n        if (!PMA_DRIZZLE) {\n            include_once './libraries/mysql_charsets.inc.php';\n        }\n        if (!isset($mysql_charsets)) {\n            $mysql_charsets = array();\n            $mysql_collations_flat = array();\n        }\n\n        /**\n         * Initializes the SQL parsing library.\n         */\n        include_once SQL_PARSER_AUTOLOAD;\n\n        // Loads closest context to this version.\n        SqlParser\\Context::loadClosest(\n            (PMA_DRIZZLE ? 'Drizzle' : 'MySql') . PMA_MYSQL_INT_VERSION\n        );\n\n        // Sets the default delimiter (if specified).\n        if (!empty($_REQUEST['sql_delimiter'])) {\n            SqlParser\\Lexer::$DEFAULT_DELIMITER = $_REQUEST['sql_delimiter'];\n        }\n\n        // TODO: Set SQL modes too.\n\n        /**\n         * the PMA_List_Database class\n         */\n        include_once './libraries/PMA.php';\n        $pma = new PMA;\n        $pma->userlink = $userlink;\n        $pma->controllink = $controllink;\n\n        /**\n         * some resetting has to be done when switching servers\n         */\n        if (isset($_SESSION['tmpval']['previous_server'])\n            && $_SESSION['tmpval']['previous_server'] != $GLOBALS['server']\n        ) {\n            unset($_SESSION['tmpval']['navi_limit_offset']);\n        }\n        $_SESSION['tmpval']['previous_server'] = $GLOBALS['server'];\n\n    } else { // end server connecting\n        // No need to check for 'PMA_BYPASS_GET_INSTANCE' since this execution path\n        // applies only to initial login\n        $response = PMA_Response::getInstance();\n        $response->getHeader()->disableMenuAndConsole();\n        $response->getFooter()->setMinimal();\n    }\n\n    /**\n     * check if profiling was requested and remember it\n     * (note: when $cfg['ServerDefault'] = 0, constant is not defined)\n     */\n    if (isset($_REQUEST['profiling'])\n        && PMA_Util::profilingSupported()\n    ) {\n        $_SESSION['profiling'] = true;\n    } elseif (isset($_REQUEST['profiling_form'])) {\n        // the checkbox was unchecked\n        unset($_SESSION['profiling']);\n    }\n\n    // load user preferences\n    $GLOBALS['PMA_Config']->loadUserPreferences();\n\n    /**\n     * Inclusion of profiling scripts is needed on various\n     * pages like sql, tbl_sql, db_sql, tbl_select\n     */\n    if (! defined('PMA_BYPASS_GET_INSTANCE')) {\n        $response = PMA_Response::getInstance();\n    }\n    if (isset($_SESSION['profiling'])) {\n        $header   = $response->getHeader();\n        $scripts  = $header->getScripts();\n        $scripts->addFile('jqplot/jquery.jqplot.js');\n        $scripts->addFile('jqplot/plugins/jqplot.pieRenderer.js');\n        $scripts->addFile('jqplot/plugins/jqplot.highlighter.js');\n        $scripts->addFile('canvg/canvg.js');\n        $scripts->addFile('jquery/jquery.tablesorter.js');\n    }\n\n    /*\n     * There is no point in even attempting to process\n     * an ajax request if there is a token mismatch\n     */\n    if (isset($response) && $response->isAjax() && $token_mismatch) {\n        $response->isSuccess(false);\n        $response->addJSON(\n            'message',\n            PMA_Message::error(__('Error: Token mismatch'))\n        );\n        exit;\n    }\n} else { // end if !defined('PMA_MINIMUM_COMMON')\n    // load user preferences\n    $GLOBALS['PMA_Config']->loadUserPreferences();\n}\n\n// remove sensitive values from session\n$GLOBALS['PMA_Config']->set('blowfish_secret', '');\n$GLOBALS['PMA_Config']->set('Servers', '');\n$GLOBALS['PMA_Config']->set('default_server', '');\n\n/* Tell tracker that it can actually work */\nPMA_Tracker::enable();\n\n/**\n * @global boolean $GLOBALS['is_ajax_request']\n * @todo should this be moved to the variables init section above?\n *\n * Check if the current request is an AJAX request, and set is_ajax_request\n * accordingly.  Suppress headers, footers and unnecessary output if set to\n * true\n */\nif (isset($_REQUEST['ajax_request']) && $_REQUEST['ajax_request'] == true) {\n    $GLOBALS['is_ajax_request'] = true;\n} else {\n    $GLOBALS['is_ajax_request'] = false;\n}\n\nif (isset($_REQUEST['GLOBALS']) || isset($_FILES['GLOBALS'])) {\n    PMA_fatalError(__(\"GLOBALS overwrite attempt\"));\n}\n\n/**\n * protect against possible exploits - there is no need to have so much variables\n */\nif (count($_REQUEST) > 1000) {\n    PMA_fatalError(__('possible exploit'));\n}\n\n/**\n * Check for numeric keys\n * (if register_globals is on, numeric key can be found in $GLOBALS)\n */\nforeach ($GLOBALS as $key => $dummy) {\n    if (is_numeric($key)) {\n        PMA_fatalError(__('numeric key detected'));\n    }\n}\nunset($dummy);\n\n// here, the function does not exist with this configuration:\n// $cfg['ServerDefault'] = 0;\n$GLOBALS['is_superuser']\n    = isset($GLOBALS['dbi']) && $GLOBALS['dbi']->isSuperuser();\n\nif (!empty($__redirect) && in_array($__redirect, $goto_whitelist)) {\n    /**\n     * include subform target page\n     */\n    include $__redirect;\n    exit();\n}\n\n// If Zero configuration mode enabled, check PMA tables in current db.\nif (! defined('PMA_MINIMUM_COMMON')\n    && ! empty($GLOBALS['server'])\n    && isset($GLOBALS['cfg']['ZeroConf'])\n    && $GLOBALS['cfg']['ZeroConf'] == true\n) {\n    if (! empty($GLOBALS['db'])) {\n        $cfgRelation = PMA_getRelationsParam();\n        if (empty($cfgRelation['db'])) {\n            PMA_fixPMATables($GLOBALS['db'], false);\n        }\n    }\n    $cfgRelation = PMA_getRelationsParam();\n    if (empty($cfgRelation['db'])) {\n        foreach ($GLOBALS['pma']->databases as $database) {\n            if ($database == 'phpmyadmin') {\n                PMA_fixPMATables($database, false);\n            }\n        }\n    }\n}\n\nif (! defined('PMA_MINIMUM_COMMON')) {\n    include_once 'libraries/config/page_settings.class.php';\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Core functions used all over the scripts.\n * This script is distinct from libraries/common.inc.php because this\n * script is called from /test.\n *\n * @package PhpMyAdmin\n */\nif (! defined('PHPMYADMIN')) {\n    exit;\n}\n\n/**\n * String handling (security)\n */\nrequire_once 'libraries/string.lib.php';\nrequire_once 'libraries/String.class.php';\n$PMA_String = new PMA_String();\n\n/**\n * checks given $var and returns it if valid, or $default of not valid\n * given $var is also checked for type being 'similar' as $default\n * or against any other type if $type is provided\n *\n * <code>\n * // $_REQUEST['db'] not set\n * echo PMA_ifSetOr($_REQUEST['db'], ''); // ''\n * // $_REQUEST['sql_query'] not set\n * echo PMA_ifSetOr($_REQUEST['sql_query']); // null\n * // $cfg['ForceSSL'] not set\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false\n * echo PMA_ifSetOr($cfg['ForceSSL']); // null\n * // $cfg['ForceSSL'] set to 1\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // false\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'similar'); // 1\n * echo PMA_ifSetOr($cfg['ForceSSL'], false); // 1\n * // $cfg['ForceSSL'] set to true\n * echo PMA_ifSetOr($cfg['ForceSSL'], false, 'boolean'); // true\n * </code>\n *\n * @param mixed &$var    param to check\n * @param mixed $default default value\n * @param mixed $type    var type or array of values to check against $var\n *\n * @return mixed   $var or $default\n *\n * @see     PMA_isValid()\n */\nfunction PMA_ifSetOr(&$var, $default = null, $type = 'similar')\n{\n    if (! PMA_isValid($var, $type, $default)) {\n        return $default;\n    }\n\n    return $var;\n}\n\n/**\n * checks given $var against $type or $compare\n *\n * $type can be:\n * - false       : no type checking\n * - 'scalar'    : whether type of $var is integer, float, string or boolean\n * - 'numeric'   : whether type of $var is any number representation\n * - 'length'    : whether type of $var is scalar with a string length > 0\n * - 'similar'   : whether type of $var is similar to type of $compare\n * - 'equal'     : whether type of $var is identical to type of $compare\n * - 'identical' : whether $var is identical to $compare, not only the type!\n * - or any other valid PHP variable type\n *\n * <code>\n * // $_REQUEST['doit'] = true;\n * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // false\n * // $_REQUEST['doit'] = 'true';\n * PMA_isValid($_REQUEST['doit'], 'identical', 'true'); // true\n * </code>\n *\n * NOTE: call-by-reference is used to not get NOTICE on undefined vars,\n * but the var is not altered inside this function, also after checking a var\n * this var exists nut is not set, example:\n * <code>\n * // $var is not set\n * isset($var); // false\n * functionCallByReference($var); // false\n * isset($var); // true\n * functionCallByReference($var); // true\n * </code>\n *\n * to avoid this we set this var to null if not isset\n *\n * @param mixed &$var    variable to check\n * @param mixed $type    var type or array of valid values to check against $var\n * @param mixed $compare var to compare with $var\n *\n * @return boolean whether valid or not\n *\n * @todo add some more var types like hex, bin, ...?\n * @see     http://php.net/gettype\n */\nfunction PMA_isValid(&$var, $type = 'length', $compare = null)\n{\n    if (! isset($var)) {\n        // var is not even set\n        return false;\n    }\n\n    if ($type === false) {\n        // no vartype requested\n        return true;\n    }\n\n    if (is_array($type)) {\n        return in_array($var, $type);\n    }\n\n    // allow some aliases of var types\n    $type = strtolower($type);\n    switch ($type) {\n    case 'identic' :\n        $type = 'identical';\n        break;\n    case 'len' :\n        $type = 'length';\n        break;\n    case 'bool' :\n        $type = 'boolean';\n        break;\n    case 'float' :\n        $type = 'double';\n        break;\n    case 'int' :\n        $type = 'integer';\n        break;\n    case 'null' :\n        $type = 'NULL';\n        break;\n    }\n\n    if ($type === 'identical') {\n        return $var === $compare;\n    }\n\n    // whether we should check against given $compare\n    if ($type === 'similar') {\n        switch (gettype($compare)) {\n        case 'string':\n        case 'boolean':\n            $type = 'scalar';\n            break;\n        case 'integer':\n        case 'double':\n            $type = 'numeric';\n            break;\n        default:\n            $type = gettype($compare);\n        }\n    } elseif ($type === 'equal') {\n        $type = gettype($compare);\n    }\n\n    // do the check\n    if ($type === 'length' || $type === 'scalar') {\n        $is_scalar = is_scalar($var);\n        if ($is_scalar && $type === 'length') {\n            return (bool) /*overload*/mb_strlen($var);\n        }\n        return $is_scalar;\n    }\n\n    if ($type === 'numeric') {\n        return is_numeric($var);\n    }\n\n    if (gettype($var) === $type) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Removes insecure parts in a path; used before include() or\n * require() when a part of the path comes from an insecure source\n * like a cookie or form.\n *\n * @param string $path The path to check\n *\n * @return string  The secured path\n *\n * @access  public\n */\nfunction PMA_securePath($path)\n{\n    // change .. to .\n    $path = preg_replace('@\\.\\.*@', '.', $path);\n\n    return $path;\n} // end function\n\n/**\n * displays the given error message on phpMyAdmin error page in foreign language,\n * ends script execution and closes session\n *\n * loads language file if not loaded already\n *\n * @param string       $error_message  the error message or named error message\n * @param string|array $message_args   arguments applied to $error_message\n * @param boolean      $delete_session whether to delete session cookie\n *\n * @return void\n */\nfunction PMA_fatalError(\n    $error_message, $message_args = null, $delete_session = true\n) {\n    /* Use format string if applicable */\n    if (is_string($message_args)) {\n        $error_message = sprintf($error_message, $message_args);\n    } elseif (is_array($message_args)) {\n        $error_message = vsprintf($error_message, $message_args);\n    }\n\n    if ($GLOBALS['is_ajax_request']) {\n        $response = PMA_Response::getInstance();\n        $response->isSuccess(false);\n        $response->addJSON('message', PMA_Message::error($error_message));\n    } else {\n        $error_message = strtr($error_message, array('<br />' => '[br]'));\n\n        /* Load gettext for fatal errors */\n        if (!function_exists('__')) {\n            // It is possible that PMA_fatalError() is called before including\n            // vendor_config.php which defines GETTEXT_INC. See bug #4557\n            if (defined(GETTEXT_INC)) {\n                include_once GETTEXT_INC;\n            } else {\n                include_once './libraries/php-gettext/gettext.inc';\n            }\n        }\n\n        // these variables are used in the included file libraries/error.inc.php\n        //first check if php-mbstring is available\n        if (function_exists('mb_detect_encoding')) {\n            //If present use gettext\n            $error_header = __('Error');\n        } else {\n            $error_header = 'Error';\n        }\n        $lang = $GLOBALS['available_languages'][$GLOBALS['lang']][1];\n        $dir = $GLOBALS['text_dir'];\n\n        // on fatal errors it cannot hurt to always delete the current session\n        if ($delete_session\n            && isset($GLOBALS['session_name'])\n            && isset($_COOKIE[$GLOBALS['session_name']])\n        ) {\n            $GLOBALS['PMA_Config']->removeCookie($GLOBALS['session_name']);\n        }\n\n        // Displays the error message\n        include './libraries/error.inc.php';\n    }\n    if (! defined('TESTSUITE')) {\n        exit;\n    }\n}\n\n/**\n * Returns a link to the PHP documentation\n *\n * @param string $target anchor in documentation\n *\n * @return string  the URL\n *\n * @access  public\n */\nfunction PMA_getPHPDocLink($target)\n{\n    /* List of PHP documentation translations */\n    $php_doc_languages = array(\n        'pt_BR', 'zh', 'fr', 'de', 'it', 'ja', 'pl', 'ro', 'ru', 'fa', 'es', 'tr'\n    );\n\n    $lang = 'en';\n    if (in_array($GLOBALS['lang'], $php_doc_languages)) {\n        $lang = $GLOBALS['lang'];\n    }\n\n    return PMA_linkURL('http://php.net/manual/' . $lang . '/' . $target);\n}\n\n/**\n * Warn or fail on missing extension.\n *\n * @param string $extension Extension name\n * @param bool   $fatal     Whether the error is fatal.\n * @param string $extra     Extra string to append to message.\n *\n * @return void\n */\nfunction PMA_warnMissingExtension($extension, $fatal = false, $extra = '')\n{\n    /* Gettext does not have to be loaded yet here */\n    if (function_exists('__')) {\n        $message = __(\n            'The %s extension is missing. Please check your PHP configuration.'\n        );\n    } else {\n        $message\n            = 'The %s extension is missing. Please check your PHP configuration.';\n    }\n    $doclink = PMA_getPHPDocLink('book.' . $extension . '.php');\n    $message = sprintf(\n        $message,\n        '[a@' . $doclink . '@Documentation][em]' . $extension . '[/em][/a]'\n    );\n    if ($extra != '') {\n        $message .= ' ' . $extra;\n    }\n    if ($fatal) {\n        PMA_fatalError($message);\n        return;\n    }\n\n    $GLOBALS['error_handler']->addError(\n        $message,\n        E_USER_WARNING,\n        '',\n        '',\n        false\n    );\n}\n\n/**\n * returns count of tables in given db\n *\n * @param string $db database to count tables for\n *\n * @return integer count of tables in $db\n */\nfunction PMA_getTableCount($db)\n{\n    $tables = $GLOBALS['dbi']->tryQuery(\n        'SHOW TABLES FROM ' . PMA_Util::backquote($db) . ';',\n        null, PMA_DatabaseInterface::QUERY_STORE\n    );\n    if ($tables) {\n        $num_tables = $GLOBALS['dbi']->numRows($tables);\n        $GLOBALS['dbi']->freeResult($tables);\n    } else {\n        $num_tables = 0;\n    }\n\n    return $num_tables;\n}\n\n/**\n * Converts numbers like 10M into bytes\n * Used with permission from Moodle (http://moodle.org) by Martin Dougiamas\n * (renamed with PMA prefix to avoid double definition when embedded\n * in Moodle)\n *\n * @param string|int $size size (Default = 0)\n *\n * @return integer $size\n */\nfunction PMA_getRealSize($size = 0)\n{\n    if (! $size) {\n        return 0;\n    }\n\n    $scan = array(\n        'gb' => 1073741824, //1024 * 1024 * 1024,\n        'g'  => 1073741824, //1024 * 1024 * 1024,\n        'mb' =>    1048576,\n        'm'  =>    1048576,\n        'kb' =>       1024,\n        'k'  =>       1024,\n        'b'  =>          1,\n    );\n\n    foreach ($scan as $unit => $factor) {\n        $sizeLength = strlen($size);\n        $unitLength = strlen($unit);\n        if ($sizeLength > $unitLength\n            && strtolower(\n                substr(\n                    $size,\n                    $sizeLength - $unitLength\n                )\n            ) == $unit\n        ) {\n            return substr(\n                $size,\n                0,\n                $sizeLength - $unitLength\n            ) * $factor;\n        }\n    }\n\n    return $size;\n} // end function PMA_getRealSize()\n\n/**\n * merges array recursive like array_merge_recursive() but keyed-values are\n * always overwritten.\n *\n * array PMA_arrayMergeRecursive(array $array1[, array $array2[, array ...]])\n *\n * @return array   merged array\n *\n * @see     http://php.net/array_merge\n * @see     http://php.net/array_merge_recursive\n */\nfunction PMA_arrayMergeRecursive()\n{\n    switch(func_num_args()) {\n    case 0 :\n        return false;\n    case 1 :\n        // when does that happen?\n        return func_get_arg(0);\n    case 2 :\n        $args = func_get_args();\n        if (! is_array($args[0]) || ! is_array($args[1])) {\n            return $args[1];\n        }\n        foreach ($args[1] as $key2 => $value2) {\n            if (isset($args[0][$key2]) && !is_int($key2)) {\n                $args[0][$key2] = PMA_arrayMergeRecursive(\n                    $args[0][$key2], $value2\n                );\n            } else {\n                // we erase the parent array, otherwise we cannot override\n                // a directive that contains array elements, like this:\n                // (in config.default.php)\n                // $cfg['ForeignKeyDropdownOrder']= array('id-content','content-id');\n                // (in config.inc.php)\n                // $cfg['ForeignKeyDropdownOrder']= array('content-id');\n                if (is_int($key2) && $key2 == 0) {\n                    unset($args[0]);\n                }\n                $args[0][$key2] = $value2;\n            }\n        }\n        return $args[0];\n    default :\n        $args = func_get_args();\n        $args[1] = PMA_arrayMergeRecursive($args[0], $args[1]);\n        array_shift($args);\n        return call_user_func_array('PMA_arrayMergeRecursive', $args);\n    }\n}\n\n/**\n * calls $function for every element in $array recursively\n *\n * this function is protected against deep recursion attack CVE-2006-1549,\n * 1000 seems to be more than enough\n *\n * @param array    &$array             array to walk\n * @param callable $function           function to call for every array element\n * @param bool     $apply_to_keys_also whether to call the function for the keys also\n *\n * @return void\n *\n * @see http://www.php-security.org/MOPB/MOPB-02-2007.html\n * @see http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1549\n */\nfunction PMA_arrayWalkRecursive(&$array, $function, $apply_to_keys_also = false)\n{\n    static $recursive_counter = 0;\n    $walked_keys = array();\n\n    if (++$recursive_counter > 1000) {\n        PMA_fatalError(__('possible deep recursion attack'));\n    }\n    foreach ($array as $key => $value) {\n        if (isset($walked_keys[$key])) {\n            continue;\n        }\n        $walked_keys[$key] = true;\n\n        if (is_array($value)) {\n            PMA_arrayWalkRecursive($array[$key], $function, $apply_to_keys_also);\n        } else {\n            $array[$key] = $function($value);\n        }\n\n        if ($apply_to_keys_also && is_string($key)) {\n            $new_key = $function($key);\n            if ($new_key != $key) {\n                $array[$new_key] = $array[$key];\n                unset($array[$key]);\n                $walked_keys[$new_key] = true;\n            }\n        }\n    }\n    $recursive_counter--;\n}\n\n/**\n * boolean phpMyAdmin.PMA_checkPageValidity(string &$page, array $whitelist)\n *\n * checks given $page against given $whitelist and returns true if valid\n * it optionally ignores query parameters in $page (script.php?ignored)\n *\n * @param string &$page     page to check\n * @param array  $whitelist whitelist to check page against\n *\n * @return boolean whether $page is valid or not (in $whitelist or not)\n */\nfunction PMA_checkPageValidity(&$page, $whitelist)\n{\n    if (! isset($page) || !is_string($page)) {\n        return false;\n    }\n\n    if (in_array($page, $whitelist)) {\n        return true;\n    }\n\n    $_page = /*overload*/mb_substr(\n        $page,\n        0,\n        /*overload*/mb_strpos($page . '?', '?')\n    );\n    if (in_array($_page, $whitelist)) {\n        return true;\n    }\n\n    $_page = urldecode($page);\n    $_page = /*overload*/mb_substr(\n        $_page,\n        0,\n        /*overload*/mb_strpos($_page . '?', '?')\n    );\n    if (in_array($_page, $whitelist)) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * tries to find the value for the given environment variable name\n *\n * searches in $_SERVER, $_ENV then tries getenv() and apache_getenv()\n * in this order\n *\n * @param string $var_name variable name\n *\n * @return string  value of $var or empty string\n */\nfunction PMA_getenv($var_name)\n{\n    if (isset($_SERVER[$var_name])) {\n        return $_SERVER[$var_name];\n    }\n\n    if (isset($_ENV[$var_name])) {\n        return $_ENV[$var_name];\n    }\n\n    if (getenv($var_name)) {\n        return getenv($var_name);\n    }\n\n    if (function_exists('apache_getenv')\n        && apache_getenv($var_name, true)\n    ) {\n        return apache_getenv($var_name, true);\n    }\n\n    return '';\n}\n\n/**\n * Send HTTP header, taking IIS limits into account (600 seems ok)\n *\n * @param string $uri         the header to send\n * @param bool   $use_refresh whether to use Refresh: header when running on IIS\n *\n * @return boolean  always true\n */\nfunction PMA_sendHeaderLocation($uri, $use_refresh = false)\n{\n    if (PMA_IS_IIS && /*overload*/mb_strlen($uri) > 600) {\n        include_once './libraries/js_escape.lib.php';\n        PMA_Response::getInstance()->disable();\n\n        include_once './libraries/Template.class.php';\n\n        echo PMA\\Template::get('header_location')\n            ->render(array('uri' => $uri));\n\n        return;\n    }\n\n    if (SID) {\n        if (/*overload*/mb_strpos($uri, '?') === false) {\n            header('Location: ' . $uri . '?' . SID);\n        } else {\n            $separator = PMA_URL_getArgSeparator();\n            header('Location: ' . $uri . $separator . SID);\n        }\n        return;\n    }\n\n    session_write_close();\n    if (headers_sent()) {\n        if (function_exists('debug_print_backtrace')) {\n            echo '<pre>';\n            debug_print_backtrace();\n            echo '</pre>';\n        }\n        trigger_error(\n            'PMA_sendHeaderLocation called when headers are already sent!',\n            E_USER_ERROR\n        );\n    }\n    // bug #1523784: IE6 does not like 'Refresh: 0', it\n    // results in a blank page\n    // but we need it when coming from the cookie login panel)\n    if (PMA_IS_IIS && $use_refresh) {\n        header('Refresh: 0; ' . $uri);\n    } else {\n        header('Location: ' . $uri);\n    }\n}\n\n/**\n * Outputs headers to prevent caching in browser (and on the way).\n *\n * @return void\n */\nfunction PMA_noCacheHeader()\n{\n    if (defined('TESTSUITE') && ! defined('PMA_TEST_HEADERS')) {\n        return;\n    }\n    // rfc2616 - Section 14.21\n    header('Expires: ' . date(DATE_RFC1123));\n    // HTTP/1.1\n    header(\n        'Cache-Control: no-store, no-cache, must-revalidate,'\n        . '  pre-check=0, post-check=0, max-age=0'\n    );\n    if (PMA_USR_BROWSER_AGENT == 'IE') {\n        /* On SSL IE sometimes fails with:\n         *\n         * Internet Explorer was not able to open this Internet site. The\n         * requested site is either unavailable or cannot be found. Please\n         * try again later.\n         *\n         * Adding Pragma: public fixes this.\n         */\n        header('Pragma: public');\n        return;\n    }\n\n    header('Pragma: no-cache'); // HTTP/1.0\n    // test case: exporting a database into a .gz file with Safari\n    // would produce files not having the current time\n    // (added this header for Safari but should not harm other browsers)\n    header('Last-Modified: ' . date(DATE_RFC1123));\n}\n\n\n/**\n * Sends header indicating file download.\n *\n * @param string $filename Filename to include in headers if empty,\n *                         none Content-Disposition header will be sent.\n * @param string $mimetype MIME type to include in headers.\n * @param int    $length   Length of content (optional)\n * @param bool   $no_cache Whether to include no-caching headers.\n *\n * @return void\n */\nfunction PMA_downloadHeader($filename, $mimetype, $length = 0, $no_cache = true)\n{\n    if ($no_cache) {\n        PMA_noCacheHeader();\n    }\n    /* Replace all possibly dangerous chars in filename */\n    $filename = str_replace(array(';', '\"', \"\\n\", \"\\r\"), '-', $filename);\n    if (!empty($filename)) {\n        header('Content-Description: File Transfer');\n        header('Content-Disposition: attachment; filename=\"' . $filename . '\"');\n    }\n    header('Content-Type: ' . $mimetype);\n    // inform the server that compression has been done,\n    // to avoid a double compression (for example with Apache + mod_deflate)\n    $notChromeOrLessThan43 = PMA_USR_BROWSER_AGENT != 'CHROME' // see bug #4942\n        || (PMA_USR_BROWSER_AGENT == 'CHROME' && PMA_USR_BROWSER_VER < 43);\n    if (strpos($mimetype, 'gzip') !== false && $notChromeOrLessThan43) {\n        header('Content-Encoding: gzip');\n    }\n    header('Content-Transfer-Encoding: binary');\n    if ($length > 0) {\n        header('Content-Length: ' . $length);\n    }\n}\n\n/**\n * Returns value of an element in $array given by $path.\n * $path is a string describing position of an element in an associative array,\n * eg. Servers/1/host refers to $array[Servers][1][host]\n *\n * @param string $path    path in the array\n * @param array  $array   the array\n * @param mixed  $default default value\n *\n * @return mixed    array element or $default\n */\nfunction PMA_arrayRead($path, $array, $default = null)\n{\n    $keys = explode('/', $path);\n    $value =& $array;\n    foreach ($keys as $key) {\n        if (! isset($value[$key])) {\n            return $default;\n        }\n        $value =& $value[$key];\n    }\n    return $value;\n}\n\n/**\n * Stores value in an array\n *\n * @param string $path   path in the array\n * @param array  &$array the array\n * @param mixed  $value  value to store\n *\n * @return void\n */\nfunction PMA_arrayWrite($path, &$array, $value)\n{\n    $keys = explode('/', $path);\n    $last_key = array_pop($keys);\n    $a =& $array;\n    foreach ($keys as $key) {\n        if (! isset($a[$key])) {\n            $a[$key] = array();\n        }\n        $a =& $a[$key];\n    }\n    $a[$last_key] = $value;\n}\n\n/**\n * Removes value from an array\n *\n * @param string $path   path in the array\n * @param array  &$array the array\n *\n * @return void\n */\nfunction PMA_arrayRemove($path, &$array)\n{\n    $keys = explode('/', $path);\n    $keys_last = array_pop($keys);\n    $path = array();\n    $depth = 0;\n\n    $path[0] =& $array;\n    $found = true;\n    // go as deep as required or possible\n    foreach ($keys as $key) {\n        if (! isset($path[$depth][$key])) {\n            $found = false;\n            break;\n        }\n        $depth++;\n        $path[$depth] =& $path[$depth - 1][$key];\n    }\n    // if element found, remove it\n    if ($found) {\n        unset($path[$depth][$keys_last]);\n        $depth--;\n    }\n\n    // remove empty nested arrays\n    for (; $depth >= 0; $depth--) {\n        if (! isset($path[$depth+1]) || count($path[$depth+1]) == 0) {\n            unset($path[$depth][$keys[$depth]]);\n        } else {\n            break;\n        }\n    }\n}\n\n/**\n * Returns link to (possibly) external site using defined redirector.\n *\n * @param string $url URL where to go.\n *\n * @return string URL for a link.\n */\nfunction PMA_linkURL($url)\n{\n    if (!preg_match('#^https?://#', $url) || defined('PMA_SETUP')) {\n        return $url;\n    }\n\n    if (!function_exists('PMA_URL_getCommon')) {\n        include_once './libraries/url_generating.lib.php';\n    }\n    $params = array();\n    $params['url'] = $url;\n\n    $url = PMA_URL_getCommon($params);\n    //strip off token and such sensitive information. Just keep url.\n    $arr = parse_url($url);\n    parse_str($arr[\"query\"], $vars);\n    $query = http_build_query(array(\"url\" => $vars[\"url\"]));\n    $url = './url.php?' . $query;\n\n    return $url;\n}\n\n/**\n * Checks whether domain of URL is whitelisted domain or not.\n * Use only for URLs of external sites.\n *\n * @param string $url URL of external site.\n *\n * @return boolean True: if domain of $url is allowed domain,\n *                 False: otherwise.\n */\nfunction PMA_isAllowedDomain($url)\n{\n    $arr = parse_url($url);\n    $domain = $arr[\"host\"];\n    $domainWhiteList = array(\n        /* Include current domain */\n        $_SERVER['SERVER_NAME'],\n        /* phpMyAdmin domains */\n        'wiki.phpmyadmin.net', 'www.phpmyadmin.net', 'phpmyadmin.net',\n        'docs.phpmyadmin.net',\n        /* mysql.com domains */\n        'dev.mysql.com','bugs.mysql.com',\n        /* drizzle.org domains */\n        'www.drizzle.org',\n        /* mariadb domains */\n        'mariadb.org',\n        /* php.net domains */\n        'php.net',\n        /* Github domains*/\n        'github.com','www.github.com',\n        /* Following are doubtful ones. */\n        'www.primebase.com',\n        'pbxt.blogspot.com',\n        'www.percona.com',\n        'mysqldatabaseadministration.blogspot.com',\n        'ronaldbradford.com',\n        'xaprb.com',\n    );\n    if (in_array(/*overload*/mb_strtolower($domain), $domainWhiteList)) {\n        return true;\n    }\n\n    return false;\n}\n\n\n/**\n * Adds JS code snippets to be displayed by the PMA_Response class.\n * Adds a newline to each snippet.\n *\n * @param string $str Js code to be added (e.g. \"token=1234;\")\n *\n * @return void\n */\nfunction PMA_addJSCode($str)\n{\n    $response = PMA_Response::getInstance();\n    $header   = $response->getHeader();\n    $scripts  = $header->getScripts();\n    $scripts->addCode($str);\n}\n\n/**\n * Adds JS code snippet for variable assignment\n * to be displayed by the PMA_Response class.\n *\n * @param string $key    Name of value to set\n * @param mixed  $value  Value to set, can be either string or array of strings\n * @param bool   $escape Whether to escape value or keep it as it is\n *                       (for inclusion of js code)\n *\n * @return void\n */\nfunction PMA_addJSVar($key, $value, $escape = true)\n{\n    PMA_addJSCode(PMA_getJsValue($key, $value, $escape));\n}\n\n/**\n * Replace some html-unfriendly stuff\n *\n * @param string $buffer String to process\n *\n * @return string Escaped and cleaned up text suitable for html\n */\nfunction PMA_mimeDefaultFunction($buffer)\n{\n    $buffer = htmlspecialchars($buffer);\n    $buffer = str_replace('  ', ' &nbsp;', $buffer);\n    $buffer = preg_replace(\"@((\\015\\012)|(\\015)|(\\012))@\", '<br />' . \"\\n\", $buffer);\n\n    return $buffer;\n}\n\n/**\n * Displays SQL query before executing.\n *\n * @param array|string $query_data Array containing queries or query itself\n *\n * @return void\n */\nfunction PMA_previewSQL($query_data)\n{\n    $retval = '<div class=\"preview_sql\">';\n    if (empty($query_data)) {\n        $retval .= __('No change');\n    } elseif (is_array($query_data)) {\n        foreach ($query_data as $query) {\n            $retval .= PMA_Util::formatSql($query);\n        }\n    } else {\n        $retval .= PMA_Util::formatSql($query_data);\n    }\n    $retval .= '</div>';\n    $response = PMA_Response::getInstance();\n    $response->addJSON('sql_data', $retval);\n    exit;\n}\n\n/**\n * recursively check if variable is empty\n *\n * @param mixed $value the variable\n *\n * @return bool true if empty\n */\nfunction PMA_emptyRecursive($value)\n{\n    $empty = true;\n    if (is_array($value)) {\n        PMA_arrayWalkRecursive(\n            $value,\n            function ($item) use (&$empty) {\n                $empty = $empty && empty($item);\n            }\n        );\n    } else {\n        $empty = empty($value);\n    }\n    return $empty;\n}\n\n/**\n * Creates some globals from $_POST variables matching a pattern\n *\n * @param array $post_patterns The patterns to search for\n *\n * @return void\n */\nfunction PMA_setPostAsGlobal($post_patterns)\n{\n    foreach (array_keys($_POST) as $post_key) {\n        foreach ($post_patterns as $one_post_pattern) {\n            if (preg_match($one_post_pattern, $post_key)) {\n                $GLOBALS[$post_key] = $_POST[$post_key];\n            }\n        }\n    }\n}\n\n/**\n * Creates some globals from $_REQUEST\n *\n * @param string $param db|table\n *\n * @return void\n */\nfunction PMA_setGlobalDbOrTable($param)\n{\n    $GLOBALS[$param] = '';\n    if (PMA_isValid($_REQUEST[$param])) {\n        // can we strip tags from this?\n        // only \\ and / is not allowed in db names for MySQL\n        $GLOBALS[$param] = $_REQUEST[$param];\n        $GLOBALS['url_params'][$param] = $GLOBALS[$param];\n    }\n}\n\n/* Compatibility with PHP < 5.6 */\nif(! function_exists('hash_equals')) {\n    function hash_equals($a, $b) {\n        $ret = strlen($a) ^ strlen($b);\n        $ret |= array_sum(unpack(\"C*\", $a ^ $b));\n        return ! $ret;\n    }\n}\n"], "filenames": ["libraries/common.inc.php", "libraries/core.lib.php"], "buggy_code_start_loc": [477, 1000], "buggy_code_end_loc": [478, 1000], "fixing_code_start_loc": [477, 1001], "fixing_code_end_loc": [478, 1010], "type": "CWE-254", "message": "libraries/common.inc.php in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 does not use a constant-time algorithm for comparing CSRF tokens, which makes it easier for remote attackers to bypass intended access restrictions by measuring time differences.", "other": {"cve": {"id": "CVE-2016-2041", "sourceIdentifier": "cve@mitre.org", "published": "2016-02-20T01:59:04.327", "lastModified": "2018-10-30T16:27:35.843", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "libraries/common.inc.php in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 does not use a constant-time algorithm for comparing CSRF tokens, which makes it easier for remote attackers to bypass intended access restrictions by measuring time differences."}, {"lang": "es", "value": "libraries/common.inc.php en phpMyAdmin 4.0.x en versiones anteriores a 4.0.10.13, 4.4.x en versiones anteriores a 4.4.15.3 y 4.5.x en versiones anteriores a 4.5.4 no utiliza un algoritmo de tiempo constante para comparar tokens CSRF, lo que hace que sea m\u00e1s f\u00e1cil para atacantes remotos eludir las restricciones destinadas al acceso mediante la medici\u00f3n de diferencias de tiempo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-254"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:22:*:*:*:*:*:*:*", "matchCriteriaId": "253C303A-E577-4488-93E6-68A8DD942C38"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:23:*:*:*:*:*:*:*", "matchCriteriaId": "E79AB8DD-C907-4038-A931-1A5A4CFB6A5B"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F06DC95-76B1-4E24-A55F-1358A25ED0E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "B406A721-0075-46C8-A920-3C9602AD667B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "C8AE4653-1911-4A58-85DD-51E0578E788E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2CA76CB4-6167-446A-8D4F-6D5B38046334"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "6325E2AE-BB86-4953-AA9E-0433C00B096E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.1:*:*:*:*:*:*:*", "matchCriteriaId": "3C54B828-8B23-4C62-907E-8EE7E757B721"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.2:*:*:*:*:*:*:*", "matchCriteriaId": "02DD18C8-172B-41CD-87DD-58BDEC0D9418"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.3:*:*:*:*:*:*:*", "matchCriteriaId": "10666E30-D98A-47A9-881A-B281066F0EC8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.4:*:*:*:*:*:*:*", "matchCriteriaId": "3993826B-CA66-4BC2-8E1B-06CF9230B214"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.5:*:*:*:*:*:*:*", "matchCriteriaId": "14928F51-761E-4FCA-B13C-A11530C7FC46"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.6:*:*:*:*:*:*:*", "matchCriteriaId": "DB761644-20F5-4E0D-B301-7809EAECA813"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.7:*:*:*:*:*:*:*", "matchCriteriaId": "896439D0-6C98-44A6-8C9D-0D57D57782D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.8:*:*:*:*:*:*:*", "matchCriteriaId": "978B828C-1FCB-4386-B685-5BEE5A8A500C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.9:*:*:*:*:*:*:*", "matchCriteriaId": "51A3261B-23BE-42D7-8A52-AE2E8C274A3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.10:*:*:*:*:*:*:*", "matchCriteriaId": "F0B7EA51-27EC-4884-8D60-FB9477D2B91A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.11:*:*:*:*:*:*:*", "matchCriteriaId": "D6C9F2CC-778B-4604-B463-7A1D3FB8B9C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.12:*:*:*:*:*:*:*", "matchCriteriaId": "4B20C44D-0EF1-48F2-B0AA-C8FF0BD9E252"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "13CD0228-728B-437A-84C1-BD7AFA52FFB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "DFF55485-9892-4E7B-AEE0-017E61EAA7C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "6100FE3E-0A31-4B55-90F2-90AF765A8EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "FBAAC8D9-AAA5-487C-B4AA-84BAE5DB109E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5E06B1D3-29B4-45B7-B81F-C864AF579011"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "6B2E3923-0E2B-411A-B091-088E6FF050D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "1848C748-804D-4FE4-AB9C-B1BF9E58A19C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "12296322-DFAD-4B36-83EC-D01BF5DF7F2A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "EA321C14-C8F4-41FC-B601-2F646064ABBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "54DBCF86-0CE8-46C4-B2E7-E3224765CCFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1BF3DBC5-7020-48D0-ADEA-E71776DB2285"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "317F952E-5F12-4ED3-8FA3-FC1106B50F85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "87B97F98-C0A7-4D9E-8333-7EE9EC456A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "7A1E753D-5653-4D7A-8E41-6C02511EBFCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "417230C7-0EC2-49F4-B810-A8AE84A302AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "103FEAB1-194E-4CEF-935A-4DBCCA298205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1:*:*:*:*:*:*:*", "matchCriteriaId": "C5814003-9FF8-4F8E-9D90-A2BBB80B8451"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "16D28B77-9353-4259-9299-30638A78CCD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "C022292B-6E06-4328-842F-135A872D22AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1:*:*:*:*:*:*:*", "matchCriteriaId": "F15F00FB-BB9B-4D54-B198-0A74D418B8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC10AF20-7B65-4FAE-A2AD-783867D60A8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "4EB7190C-0401-4E2E-B15F-4CFC79D5A4E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "A4D7AAF1-64FF-40C9-90B2-DEC814157372"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "96D529F5-8870-4934-BCD8-E49095D21224"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "296EB2FA-FCAD-4BD5-A015-62765407AFE5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DBD0DC7-64D0-42B1-8EEE-73A0214680F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A6A15D1E-83ED-47EC-B17C-E6BCC49DE83D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "4112ACFF-D40E-45BE-9307-F710E7B41ECD"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.1:*:*:*:*:*:*:*", "matchCriteriaId": "4863BE36-D16A-4D75-90D9-FD76DB5B48B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.2:*:*:*:*:*:*:*", "matchCriteriaId": "03117DF1-3BEC-4B8D-AD63-DBBDB2126081"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176483.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176739.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00028.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00049.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.debian.org/security/2016/dsa-3627", "source": "cve@mitre.org"}, {"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2016-5.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/ec0e88e37ef30a66eada1c072953f4ec385a3e49", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/ec0e88e37ef30a66eada1c072953f4ec385a3e49"}}