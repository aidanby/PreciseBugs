{"buggy_code": ["<div id=\"tag-form\" class=\"field\">\n    <?php\n        $tags = $item->getTags();\n    ?>\n    <input type=\"hidden\" name=\"tags-to-add\" id=\"tags-to-add\" value=\"\" />\n    <input type=\"hidden\" name=\"tags-to-delete\" id=\"tags-to-delete\" value=\"\" />\n    <div id=\"add-tags\">\n        <label><?php echo __('Add Tags'); ?></label>           \n        <input type=\"text\" name=\"tags\" size=\"20\" id=\"tags\" class=\"textinput\" value=\"\" />\n        <p id=\"add-tags-explanation\" class=\"explanation\"><?php echo __('Separate tags with %s', option('tag_delimiter')); ?></p>\n        <input type=\"submit\" name=\"add-tags-button\" id=\"add-tags-button\" class=\"green button\" value=\"<?php echo __('Add Tags'); ?>\" />\n    </div>\n    <div id=\"all-tags\">\n    <?php if ($tags): ?>\n        <h3><?php echo __('All Tags'); ?></h3>\n        \n        <div class=\"tag-list\">\n        <ul id=\"all-tags-list\">\n            <?php foreach( $tags as $tag ): ?>\n                <li>\n                    <?php echo '<span class=\"tag\">' . $tag->name . '</span>'; \n                          echo '<span class=\"undo-remove-tag\"><a href=\"#\">' . __('Undo') . '</a></span>';\n                          echo '<span class=\"remove-tag\"><a href=\"#\">' . __('Remove') . '</a></span>'; ?>\n                </li>\n            <?php endforeach; ?>\n        </ul>\n        </div>\n    <?php endif; ?>\n    </div>\n</div>\n<?php fire_plugin_hook('admin_items_form_tags', array('item' => $item, 'view' => $this)); ?>\n", "if (typeof Omeka === 'undefined') {\n    Omeka = {};\n}\n\nOmeka.Items = {};\n\n(function ($) {\n    /**\n     * Enable drag and drop sorting for files.\n     */\n    Omeka.Items.enableSorting = function () {\n        $('.sortable').sortable({\n            items: 'li.file',\n            forcePlaceholderSize: true, \n            forceHelperSize: true,\n            revert: 200,\n            placeholder: \"ui-sortable-highlight\",\n            containment: 'document',\n            update: function (event, ui) {\n                $(this).find('.file-order').each(function (index) {\n                    $(this).val(index + 1);\n                });\n            }\n        });\n        $( \".sortable\" ).disableSelection();\n        \n        $( \".sortable input[type=checkbox]\" ).each(function () {\n            $(this).css(\"display\", \"none\");\n        });\n    };\n\n    /**\n     * Make links to files open in a new window.\n     */\n    Omeka.Items.makeFileWindow = function () {\n        $('#file-list a').click(function (event) {\n            event.preventDefault();\n            if($(this).hasClass(\"delete\")) {\n                Omeka.Items.enableFileDeletion($(this));\n            } else {\n                window.open(this.getAttribute('href'));\n            }\n        });\n    };\n\n    /**\n     * Set up toggle for marking files for deletion. \n     */\n    Omeka.Items.enableFileDeletion = function (deleteLink) {\n        if( !deleteLink.next().is(\":checked\") ) {\n            deleteLink.text(\"Undo\").next().prop('checked', true).parents('.sortable-item').addClass(\"deleted\");\n        } else {\n            deleteLink.text(\"Delete\").next().prop('checked', false).parents('.sortable-item').removeClass(\"deleted\");\n        }\n    };\n\n    /**\n     * Make the item type selector AJAX in the right item type form.\n     *\n     * @param {string} changeItemTypeUrl URL for getting form.\n     * @param {string} itemId Item ID.\n     */\n    Omeka.Items.changeItemType = function (changeItemTypeUrl, itemId) {\n        $('#change_type').hide();\n        $('#item-type').change(function () {\n            var params = {\n                type_id: $(this).val()\n            };\n            if (itemId) {\n                params.item_id = itemId;\n            }\n            $.ajax({\n                url: changeItemTypeUrl,\n                type: 'POST',\n                dataType: 'html',\n                data: params,\n                success: function (response) {\n                    var form = $('#type-metadata-form');\n                    form.hide();\n                    form.find('textarea').each(function () {\n                        tinyMCE.EditorManager.execCommand('mceRemoveEditor', true, this.id);\n                    });\n                    form.html(response);\n                    form.trigger('omeka:elementformload');\n                    form.slideDown(1000, function () {\n                        // Explicit show() call fixes IE7\n                        $(this).show();\n                    });\n                }\n            });\n        });\n    };\n\n    /**\n     * Add remove/undo buttons for removing a tag.\n     *\n     * @param {string} tag Tag to add buttons for.\n     */\n    Omeka.Items.addTagElement = function (tag) {\n        var tagLi = $('<li/>');\n        tagLi.after(\" \");\n\n        var undoButton = $('<span class=\"undo-remove-tag\"><a href=\"#\">Undo</a></span>').appendTo(tagLi);\n        var deleteButton = $('<span class=\"remove-tag\"><a href=\"#\">Remove</a></span>').appendTo(tagLi);\n        tagLi.prepend('<span class=\"tag\">' + tag + '</span>');\n\n        if($('#all-tags-list').length != 0) {\n            $('#all-tags-list').append(tagLi);\n        } else {\n            $('#all-tags').append($('<h3>All Tags</h3><div class=\"tag-list\"><ul id=\"all-tags-list\"></ul></div>'));\n            $('#all-tags-list').append(tagLi);\n        }\n\n        Omeka.Items.updateTagsField();\n        return false;\n    };\n\n\n    /**\n     * Add tag elements for new tags from the input box.\n     *\n     * @param {string} tags Comma-separated tags to be added.\n     */\n    Omeka.Items.addTags = function (tags) {\n        var newTags = tags.split(Omeka.Items.tagDelimiter);\n\n        // only add tags from the input box that are new\n        var oldTags = $('.tag-list .tag').map(function () {\n            return $.trim(this.text);\n        });\n\n        $.each(newTags, function () {\n            var tag = $.trim(this);\n            if (tag && $.inArray(tag, oldTags) === -1) {\n                Omeka.Items.addTagElement(tag);\n            }\n        });\n\n        $('#tags').val('');\n    };\n\n    /**\n     * Callback for tag remove buttons.\n     *\n     * @param {Element} button Clicked button.\n     */\n    Omeka.Items.toggleTag = function (button) {\n        $(button).parent().toggleClass('tag-removed');\n        Omeka.Items.updateTagsField();\n    };\n\n    /**\n     * Update the hidden tags fields to only include the tags that have not been removed.\n     */\n    Omeka.Items.updateTagsField = function () {\n        var tagsToAdd = [];\n        var tagsToDelete = [];\n\n        $('.tag-list li').each(function () {\n            var tagSpan = $(this).find('.tag');\n            var tag = $.trim(tagSpan.text());\n            if ($(this).hasClass('tag-removed')) {\n                tagsToDelete.push(tag);\n            } else {\n                tagsToAdd.push(tag);\n            }\n        });\n        \n        $('#tags-to-add').val(tagsToAdd.join(Omeka.Items.tagDelimiter));\n        $('#tags-to-delete').val(tagsToDelete.join(Omeka.Items.tagDelimiter));\n    };\n\n    /**\n     * Set up tag remove/undo buttons and adding from tags field.\n     *\n     */\n    Omeka.Items.enableTagRemoval = function () {\n        $('#add-tags-button').click(function (event) {\n            event.preventDefault();\n            Omeka.Items.addTags($('#tags').val());\n        });\n\n        $(document).on('click', 'span.remove-tag', function (event) {\n            event.preventDefault();\n            Omeka.Items.toggleTag(this);\n        });\n\n        $(document).on('click', 'span.undo-remove-tag', function (event) {\n            event.preventDefault();\n            Omeka.Items.toggleTag(this);\n        });\n\n    };\n\n    /**\n     * Set up autocomplete for tags field.\n     *\n     * @param {string} inputSelector Selector for input to autocomplete on.\n     * @param {string} tagChoicesUrl Autocomplete JSON URL.\n     */\n    Omeka.Items.tagChoices = function (inputSelector, tagChoicesUrl) {\n        function split(val) {\n            var escapedTagDelimiter = Omeka.Items.tagDelimiter.replace(/([.?*+\\^$\\[\\]\\\\(){}\\-])/g, \"\\\\$1\");\n            var re = new RegExp(escapedTagDelimiter + '\\\\s*');\n            return val.split(re);\n        }\n        function extractLast(term) {\n            return split(term).pop();\n        }\n\n        // Tokenized input based on\n        // http://jqueryui.com/demos/autocomplete/multiple.html\n        $(inputSelector).autocomplete({\n            source: function (request, response) {\n                $.getJSON(tagChoicesUrl, {\n                    term: extractLast(request.term)\n                }, function (data) {\n                    response(data);\n                });\n            },\n            focus: function () {\n                return false;\n            },\n            select: function (event, ui) {\n                var terms = split(this.value);\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push(ui.item.value);\n                // add placeholder to get the comma-and-space at the end\n                terms.push('');\n                this.value = terms.join(Omeka.Items.tagDelimiter + ' ');\n                return false;\n            }\n        });\n    };\n\n    /**\n     * Submit tag changes on items/show with AJAX.\n     */\n    Omeka.Items.modifyTagsShow = function () {\n        //Add the tags with this request\n        $('#tags-form').submit(function (event) {\n            event.preventDefault();\n            var form = $(this);\n            $.post(form.attr('action'), form.serialize(), function (response) {\n                $('#tag-cloud').hide().html(response).fadeIn(1000);\n            }, 'html');\n        });\n    };\n\n    /**\n     * Allow adding an arbitrary number of file input elements to the items form so that\n     * more than one file can be uploaded at once.\n     *\n     * @param {string} label\n     */\n    Omeka.Items.enableAddFiles = function (label) {\n        var filesDiv = $('#files-metadata .files');\n\n        var link = $('<a href=\"#\" id=\"add-file\" class=\"add-file button\">' + label + '</a>');\n        link.click(function (event) {\n            event.preventDefault();\n            var inputs = filesDiv.find('input');\n            var inputCount = inputs.length;\n            var fileHtml = '<input name=\"file[' + inputCount + ']\" type=\"file\"></div>';\n            $(fileHtml).insertAfter(inputs.last()).hide().slideDown(200, function () {\n                // Extra show fixes IE bug.\n                $(this).show();\n            });\n        });\n\n        $('#file-inputs').append(link);\n    };\n})(jQuery);\n"], "fixing_code": ["<div id=\"tag-form\" class=\"field\">\n    <?php\n        $tags = $item->getTags();\n    ?>\n    <input type=\"hidden\" name=\"tags-to-add\" id=\"tags-to-add\" value=\"\" />\n    <input type=\"hidden\" name=\"tags-to-delete\" id=\"tags-to-delete\" value=\"\" />\n    <div id=\"add-tags\">\n        <label><?php echo __('Add Tags'); ?></label>           \n        <input type=\"text\" name=\"tags\" size=\"20\" id=\"tags\" class=\"textinput\" value=\"\" />\n        <p id=\"add-tags-explanation\" class=\"explanation\"><?php echo __('Separate tags with %s', option('tag_delimiter')); ?></p>\n        <input type=\"submit\" name=\"add-tags-button\" id=\"add-tags-button\" class=\"green button\" value=\"<?php echo __('Add Tags'); ?>\" />\n    </div>\n    <div id=\"all-tags\">\n    <?php if ($tags): ?>\n        <h3><?php echo __('All Tags'); ?></h3>\n        \n        <div class=\"tag-list\">\n        <ul id=\"all-tags-list\">\n            <?php foreach( $tags as $tag ): ?>\n                <li>\n                    <?php echo '<span class=\"tag\">' . html_escape($tag->name) . '</span>';\n                          echo '<span class=\"undo-remove-tag\"><a href=\"#\">' . __('Undo') . '</a></span>';\n                          echo '<span class=\"remove-tag\"><a href=\"#\">' . __('Remove') . '</a></span>'; ?>\n                </li>\n            <?php endforeach; ?>\n        </ul>\n        </div>\n    <?php endif; ?>\n    </div>\n</div>\n<?php fire_plugin_hook('admin_items_form_tags', array('item' => $item, 'view' => $this)); ?>\n", "if (typeof Omeka === 'undefined') {\n    Omeka = {};\n}\n\nOmeka.Items = {};\n\n(function ($) {\n    /**\n     * Enable drag and drop sorting for files.\n     */\n    Omeka.Items.enableSorting = function () {\n        $('.sortable').sortable({\n            items: 'li.file',\n            forcePlaceholderSize: true, \n            forceHelperSize: true,\n            revert: 200,\n            placeholder: \"ui-sortable-highlight\",\n            containment: 'document',\n            update: function (event, ui) {\n                $(this).find('.file-order').each(function (index) {\n                    $(this).val(index + 1);\n                });\n            }\n        });\n        $( \".sortable\" ).disableSelection();\n        \n        $( \".sortable input[type=checkbox]\" ).each(function () {\n            $(this).css(\"display\", \"none\");\n        });\n    };\n\n    /**\n     * Make links to files open in a new window.\n     */\n    Omeka.Items.makeFileWindow = function () {\n        $('#file-list a').click(function (event) {\n            event.preventDefault();\n            if($(this).hasClass(\"delete\")) {\n                Omeka.Items.enableFileDeletion($(this));\n            } else {\n                window.open(this.getAttribute('href'));\n            }\n        });\n    };\n\n    /**\n     * Set up toggle for marking files for deletion. \n     */\n    Omeka.Items.enableFileDeletion = function (deleteLink) {\n        if( !deleteLink.next().is(\":checked\") ) {\n            deleteLink.text(\"Undo\").next().prop('checked', true).parents('.sortable-item').addClass(\"deleted\");\n        } else {\n            deleteLink.text(\"Delete\").next().prop('checked', false).parents('.sortable-item').removeClass(\"deleted\");\n        }\n    };\n\n    /**\n     * Make the item type selector AJAX in the right item type form.\n     *\n     * @param {string} changeItemTypeUrl URL for getting form.\n     * @param {string} itemId Item ID.\n     */\n    Omeka.Items.changeItemType = function (changeItemTypeUrl, itemId) {\n        $('#change_type').hide();\n        $('#item-type').change(function () {\n            var params = {\n                type_id: $(this).val()\n            };\n            if (itemId) {\n                params.item_id = itemId;\n            }\n            $.ajax({\n                url: changeItemTypeUrl,\n                type: 'POST',\n                dataType: 'html',\n                data: params,\n                success: function (response) {\n                    var form = $('#type-metadata-form');\n                    form.hide();\n                    form.find('textarea').each(function () {\n                        tinyMCE.EditorManager.execCommand('mceRemoveEditor', true, this.id);\n                    });\n                    form.html(response);\n                    form.trigger('omeka:elementformload');\n                    form.slideDown(1000, function () {\n                        // Explicit show() call fixes IE7\n                        $(this).show();\n                    });\n                }\n            });\n        });\n    };\n\n    /**\n     * Add remove/undo buttons for removing a tag.\n     *\n     * @param {string} tag Tag to add buttons for.\n     */\n    Omeka.Items.addTagElement = function (tag) {\n        var tagLi = $('<li/>');\n        tagLi.after(\" \");\n\n        var undoButton = $('<span class=\"undo-remove-tag\"><a href=\"#\">Undo</a></span>').appendTo(tagLi);\n        var deleteButton = $('<span class=\"remove-tag\"><a href=\"#\">Remove</a></span>').appendTo(tagLi);\n        $('<span></span>', {'class': 'tag', 'text': tag}).appendTo(tagLi);\n\n        if($('#all-tags-list').length != 0) {\n            $('#all-tags-list').append(tagLi);\n        } else {\n            $('#all-tags').append($('<h3>All Tags</h3><div class=\"tag-list\"><ul id=\"all-tags-list\"></ul></div>'));\n            $('#all-tags-list').append(tagLi);\n        }\n\n        Omeka.Items.updateTagsField();\n        return false;\n    };\n\n\n    /**\n     * Add tag elements for new tags from the input box.\n     *\n     * @param {string} tags Comma-separated tags to be added.\n     */\n    Omeka.Items.addTags = function (tags) {\n        var newTags = tags.split(Omeka.Items.tagDelimiter);\n\n        // only add tags from the input box that are new\n        var oldTags = $('.tag-list .tag').map(function () {\n            return $.trim(this.text);\n        });\n\n        $.each(newTags, function () {\n            var tag = $.trim(this);\n            if (tag && $.inArray(tag, oldTags) === -1) {\n                Omeka.Items.addTagElement(tag);\n            }\n        });\n\n        $('#tags').val('');\n    };\n\n    /**\n     * Callback for tag remove buttons.\n     *\n     * @param {Element} button Clicked button.\n     */\n    Omeka.Items.toggleTag = function (button) {\n        $(button).parent().toggleClass('tag-removed');\n        Omeka.Items.updateTagsField();\n    };\n\n    /**\n     * Update the hidden tags fields to only include the tags that have not been removed.\n     */\n    Omeka.Items.updateTagsField = function () {\n        var tagsToAdd = [];\n        var tagsToDelete = [];\n\n        $('.tag-list li').each(function () {\n            var tagSpan = $(this).find('.tag');\n            var tag = $.trim(tagSpan.text());\n            if ($(this).hasClass('tag-removed')) {\n                tagsToDelete.push(tag);\n            } else {\n                tagsToAdd.push(tag);\n            }\n        });\n        \n        $('#tags-to-add').val(tagsToAdd.join(Omeka.Items.tagDelimiter));\n        $('#tags-to-delete').val(tagsToDelete.join(Omeka.Items.tagDelimiter));\n    };\n\n    /**\n     * Set up tag remove/undo buttons and adding from tags field.\n     *\n     */\n    Omeka.Items.enableTagRemoval = function () {\n        $('#add-tags-button').click(function (event) {\n            event.preventDefault();\n            Omeka.Items.addTags($('#tags').val());\n        });\n\n        $(document).on('click', 'span.remove-tag', function (event) {\n            event.preventDefault();\n            Omeka.Items.toggleTag(this);\n        });\n\n        $(document).on('click', 'span.undo-remove-tag', function (event) {\n            event.preventDefault();\n            Omeka.Items.toggleTag(this);\n        });\n\n    };\n\n    /**\n     * Set up autocomplete for tags field.\n     *\n     * @param {string} inputSelector Selector for input to autocomplete on.\n     * @param {string} tagChoicesUrl Autocomplete JSON URL.\n     */\n    Omeka.Items.tagChoices = function (inputSelector, tagChoicesUrl) {\n        function split(val) {\n            var escapedTagDelimiter = Omeka.Items.tagDelimiter.replace(/([.?*+\\^$\\[\\]\\\\(){}\\-])/g, \"\\\\$1\");\n            var re = new RegExp(escapedTagDelimiter + '\\\\s*');\n            return val.split(re);\n        }\n        function extractLast(term) {\n            return split(term).pop();\n        }\n\n        // Tokenized input based on\n        // http://jqueryui.com/demos/autocomplete/multiple.html\n        $(inputSelector).autocomplete({\n            source: function (request, response) {\n                $.getJSON(tagChoicesUrl, {\n                    term: extractLast(request.term)\n                }, function (data) {\n                    response(data);\n                });\n            },\n            focus: function () {\n                return false;\n            },\n            select: function (event, ui) {\n                var terms = split(this.value);\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push(ui.item.value);\n                // add placeholder to get the comma-and-space at the end\n                terms.push('');\n                this.value = terms.join(Omeka.Items.tagDelimiter + ' ');\n                return false;\n            }\n        });\n    };\n\n    /**\n     * Submit tag changes on items/show with AJAX.\n     */\n    Omeka.Items.modifyTagsShow = function () {\n        //Add the tags with this request\n        $('#tags-form').submit(function (event) {\n            event.preventDefault();\n            var form = $(this);\n            $.post(form.attr('action'), form.serialize(), function (response) {\n                $('#tag-cloud').hide().html(response).fadeIn(1000);\n            }, 'html');\n        });\n    };\n\n    /**\n     * Allow adding an arbitrary number of file input elements to the items form so that\n     * more than one file can be uploaded at once.\n     *\n     * @param {string} label\n     */\n    Omeka.Items.enableAddFiles = function (label) {\n        var filesDiv = $('#files-metadata .files');\n\n        var link = $('<a href=\"#\" id=\"add-file\" class=\"add-file button\">' + label + '</a>');\n        link.click(function (event) {\n            event.preventDefault();\n            var inputs = filesDiv.find('input');\n            var inputCount = inputs.length;\n            var fileHtml = '<input name=\"file[' + inputCount + ']\" type=\"file\"></div>';\n            $(fileHtml).insertAfter(inputs.last()).hide().slideDown(200, function () {\n                // Extra show fixes IE bug.\n                $(this).show();\n            });\n        });\n\n        $('#file-inputs').append(link);\n    };\n})(jQuery);\n"], "filenames": ["admin/themes/default/items/tag-form.php", "admin/themes/default/javascripts/items.js"], "buggy_code_start_loc": [21, 105], "buggy_code_end_loc": [22, 106], "fixing_code_start_loc": [21, 105], "fixing_code_end_loc": [22, 106], "type": "CWE-79", "message": "admin/themes/default/items/tag-form.php in Omeka before 2.6.1 allows XSS by adding or editing a tag.", "other": {"cve": {"id": "CVE-2018-13423", "sourceIdentifier": "cve@mitre.org", "published": "2018-07-07T17:29:00.587", "lastModified": "2018-08-27T20:46:31.327", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "admin/themes/default/items/tag-form.php in Omeka before 2.6.1 allows XSS by adding or editing a tag."}, {"lang": "es", "value": "admin/themes/default/items/tag-form.php en Omeka en versiones anteriores a la 2.6.1 permite Cross-Site Scripting (XSS) a\u00f1adiendo o editando una etiqueta."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:omeka:omeka:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.1", "matchCriteriaId": "C3A06BD5-57AA-4312-8FC4-771F3BD1BC46"}]}]}], "references": [{"url": "https://github.com/omeka/Omeka/commit/ba841892116544847d76d3838781c9708cb92221", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/omeka/Omeka/releases/tag/v2.6.1", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/omeka/Omeka/commit/ba841892116544847d76d3838781c9708cb92221"}}