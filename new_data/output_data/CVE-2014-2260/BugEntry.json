{"buggy_code": ["window.WEB_SOCKET_SWF_LOCATION = '/static/main/WebSocketMain.swf'\n\n\nclass window.Stream \n    constructor: () ->\n\n    start: () ->\n        @socket = ajentiConnectSocket('/stream')\n\n        @socket.on 'connect', () ->\n            $('#connection-error').hide()\n\n        @socket.on 'auth-error', () ->\n            console.log 'Authentication lost!'\n            location.reload()\n            \n        @socket.on 'disconnect', () ->\n            $('#connection-error').show()\n\n        @socket.on 'init', (data) ->\n            data = JSON.parse(data)\n            console.group 'Welcome to Ajenti'\n            console.log 'version', data.version\n            console.log 'running on', data.platform\n            console.log 'your session:', data.session\n            $('title').text(data.hostname)\n            console.groupEnd()\n            Feedback.configure(data.feedback, data.platform, data.version, data.edition)\n            Feedback.emit('Login')\n\n        @socket.on 'ui', (ui) ->\n            console.group 'Received update'\n            console.log 'Transfer size', ui.length\n            profiler.start('Decompressing')\n            ui = RawDeflate.inflate(RawDeflate.Base64.decode(ui))\n            profiler.stop()\n            console.log 'Payload size', ui.length\n            ui = JSON.parse(ui)\n            console.log 'JSON data:', ui\n\n            UI.clear()\n            profiler.start('UI inflating')\n            ui = UI.inflate(ui)\n            profiler.stop()\n            profiler.start('UI replacement')\n            UI.replace(ui)\n            profiler.stop()\n            \n            console.log 'Total elements:', UI._total_elements\n            console.groupEnd()\n            Loading.hide()\n\n        @socket.on 'ack', () ->\n            Loading.hide()\n\n        @socket.on 'update-request', () ->\n            UI.checkForUpdates()\n            UI.sendUpdates(true)\n            Loading.show()\n\n        @socket.on 'progress-message', (m) ->\n            console.log '...', m\n            Loading.show()\n            Loading.setMessage(m)\n\n        @socket.on 'crash', (data) ->\n            data = JSON.parse(data)\n            console.log 'CRASH:', data\n            ajentiCrash(data)\n            Loading.hide()\n\n        @socket.on 'security-error', () ->\n            console.log 'SECURITY ERROR'\n            ajentiSecurityError()\n            Loading.hide()\n\n        @socket.on 'notify', (data) ->\n            data = JSON.parse(data)\n            Notificator.notify(data.type, data.text)\n\n        @socket.on 'openTab', (data) ->\n            data = JSON.parse(data)\n            Tabs.addTab(data.url, data.title)\n\n        @socket.on 'closeTab', (data) ->\n            data = JSON.parse(data)\n            Tabs.closeTab(data.url)\n\n        @socket.on 'debug', (data) ->\n            data = JSON.parse(data)\n            console.group 'Profiling'\n            for d of data.profiles\n                console.log d, data.profiles[d]\n            console.groupEnd()\n\n        $('#connection-error').hide()\n\n    send: (message) ->\n        console.log 'Sending updates', message\n        @socket.send JSON.stringify(message)\n        Loading.show()\n    \n    emit_ui_update: (updates) ->\n        @send(type: 'ui_update', content: updates)\n\n\nclass window.UIManager\n    constructor: (@stream) ->\n        @ui = null\n        @pendingUpdates = []\n        @updaterTimeout = null\n\n    inflate: (json) ->\n        children = []\n        @_total_elements += 1\n        if json.visible == true\n            for child in json.children\n                do (child) =>\n                    children.push @inflate(child)\n        typeid = json.typeid.replace(':', '__')\n        cls = Controls[typeid]\n        if not cls\n            cls = Controls.default\n\n        return new cls(this, json, children)\n\n    clear: () ->\n        @_total_elements = 0\n        if @ui\n            @ui.broadcast('destruct')\n        $('.root *').unbind() \n        $.cleanData($('.root *')) \n        $('.root *').safeRemove()\n        #$.cache = {} # Breaks stuff\n        delete @ui\n    \n    replace: (ui) ->\n        $('.ui-tooltip').remove()\n        @ui = ui\n\n        dom = $$(ui.html)\n        $('.root').append(dom)\n\n        profiler.start('DOM setup')\n        profiler.setupDomStats = {}\n        ui.setupDom(dom)\n        console.log profiler.setupDomStats\n        profiler.stop()\n\n        aoConnector.reportHeight($('body')[0].scrollHeight)\n\n    extractUpdates: (control, target) ->\n        updates = control.extractUpdates()\n        if updates\n            target.push updates\n        for child in control.children\n            do (child) =>\n                @extractUpdates(child, target)\n\n    checkForUpdates: () ->\n        updates = []\n        @extractUpdates(@ui, updates)\n        for update in updates\n            do (update) =>\n                @queueUpdate(update)\n\n    queueUpdate: (update) ->\n        @pendingUpdates.push update\n\n    sendUpdates: (force) ->\n        force ?= false\n        if @updaterTimeout\n            clearTimeout(@updaterTimeout)\n        @updaterTimeout = setTimeout () =>\n            if force or @pendingUpdates.length > 0\n                @stream.emit_ui_update @pendingUpdates\n            @pendingUpdates = []\n            @updaterTimeout = null\n        , 50\n\n    event: (control, event, params) ->\n        @checkForUpdates()\n        \n        update = \n            type: 'event'\n            uid: control.uid,\n            event: event,\n            params: params ? null\n\n        @queueUpdate update\n        @sendUpdates()\n\n    restoreTheme: () ->\n        if getCookie('ajenti-theme') == 'dark'\n            @toggleTheme()\n\n    toggleTheme: () ->\n        $('html').toggleClass('ui-dark')\n        $('html').toggleClass('ui-light')\n        \n        if $('html').hasClass('ui-dark')\n            setCookie('ajenti-theme', 'dark')\n        else\n            setCookie('ajenti-theme', 'light')\n\n\nclass window.LoadingDim \n    constructor: (@dom) ->\n        @dom.show()\n\n    hide: () ->\n        @setMessage('')\n        $('.hide-when-loaded').hide()\n        $('body').removeClass('loading')\n        @dom.stop().fadeTo(125, 0, () => @dom.hide())\n\n    show: () ->\n        $('body').addClass('loading')\n        @dom.show().stop().fadeTo(500, 1)\n\n    setMessage: (m) ->\n        @dom.find('.message').text(m)\n\n\nclass TabManager\n    constructor: () ->\n        @mainTab = $('#tab-ajenti')\n        @tabHeadersDom = $('#tab-headers')\n        @tabsDom = $('#tabs')\n        @tabHeadersDom.find('a').click () =>\n            @goHome()\n        @goHome()\n        @openTabs = {}\n\n    goHome: () ->\n        @tabsDom.find('>*').hide()\n        @mainTab.show()\n        @tabHeadersDom.find('a').removeClass('active')\n        @tabHeadersDom.find('a:first').addClass('active')\n\n    addTab: (url, title) ->\n        if @openTabs[url]\n            @openTabs[url].click()\n            return\n        dom = $(\"\"\"\n            <div class=\"tab\"><iframe src=\"#{url}\" /></div>\n        \"\"\")\n        @tabsDom.append(dom)\n        headerDom = $(\"\"\"\n            <a href=\"#\">#{title}<span class=\"close\"><i class=\"icon-remove\"></span></a></a>\n        \"\"\")\n        @tabHeadersDom.append(headerDom)\n        @openTabs[url] = headerDom\n        @openTabs[url].dom = dom\n        headerDom.click () =>\n            @tabsDom.find('>*').hide()\n            dom.show()\n            setTimeout () =>\n                dom.find('iframe')[0].contentWindow.focus()\n            , 100\n            @tabHeadersDom.find('a').removeClass('active')\n            headerDom.addClass('active')\n        headerDom.find('.close').click () =>\n            @closeTab(url)\n        headerDom.click()\n\n    closeTab: (url) ->\n        @openTabs[url].dom.remove()\n        @openTabs[url].remove()\n        delete @openTabs[url]\n        @goHome()\n\n$ () ->\n    window.Loading = new LoadingDim($('#loading'))\n    window.Tabs = new TabManager()\n    if window.UI\n        UI.restoreTheme()\n        $('#ui-theme-toggle').click () -> UI.toggleTheme()\n\n\nwindow.Controls = { }\n\n\nclass window.Control\n    constructor: (@ui, @properties, children) ->\n        window.Control.lastUID ?= -1\n\n        @properties ?= {}\n        @properties.visible ?= true\n        \n        if @properties.uid\n            @uid = @properties.uid    \n        else\n            @uid = (window.Control.lastUID--)\n\n        @dom = null\n        @children = []\n        @changed = false\n\n        profiler.start('Generating DOM')\n        @html = @createDom()\n        if @dom\n            console.log 'Bad control:', this #TODO\n        if not @html.trim\n            @html = ''\n            return\n        @html = @html.trim()\n\n        if not @noUID\n            @html = @html.insert(@html.indexOf('>'), \" id=\\\"uid-#{@uid}\\\"\")\n\n        profiler.stop()\n\n        children_html = ''\n        if children\n            for child in children\n                @children.push child\n                if not child.dom\n                    children_html += @wrapChild(child)\n        \n        @html = @html.replace('<children>', children_html)\n        \n        \n    s: (value) ->\n        # TODO SANITIZE!\n        value\n\n    createDom: () ->\n        \"\"\n\n    setupDom: (dom) ->\n        if @dom\n            return\n        if not dom\n            dom = $$(@html)\n        @dom = dom\n        if @properties.visible != true and @dom and @dom.style\n            @dom.style.display = 'none'\n        for child in @children\n            if child.dom\n                @append(child)\n            else\n                if Control.prototype.setupDom != child.constructor.prototype.setupDom\n                    key = child.constructor.name\n                    profiler.setupDomStats[key] ?= 0\n                    profiler.setupDomStats[key] += 1\n                child.setupDom(document.getElementById('uid-' + child.properties.uid))\n        return this\n        \n    destruct: () ->\n\n    detectUpdates: () ->\n        return {}\n\n    markChanged: () ->\n        if not @changed\n            $(@dom).before(\"\"\"\n                <div class=\"changed-badge\">\n                    <span title=\"Not saved yet\">*</span>\n                </div>\n            \"\"\")\n        @changed = true\n        $(@dom).addClass('changed')\n\n    wrapChild: (child) ->\n        return child.html\n\n    wrapChildLive: (child) ->\n        return child.dom\n\n    onBroadcast: (msg) ->\n\n    broadcast: (msg) ->\n        @onBroadcast(msg)\n        for c in @children\n            do (c) =>\n                c.broadcast(msg)\n        \n    extractUpdates: () ->\n        updates = @detectUpdates()\n        if not @uid or $.isEmptyObject(updates)\n            return null\n        for k of updates\n            do (k) =>\n                @properties[k] = updates[k]\n        return type: 'update', uid: @uid, properties: updates\n        \n    append: (child) ->\n        if not @childContainer\n            @childContainer = $($(@dom).find2('.--child-container')[0])\n        wrapper = @wrapChildLive(child)\n        if wrapper instanceof jQuery\n            wrapper = wrapper[0]\n        if wrapper\n            @childContainer.append(wrapper)\n\n    publish: () ->\n        @ui.checkForUpdates()\n        @ui.sendUpdates()\n    \n    event: (event, params) ->\n        @ui.checkForUpdates()\n        localHandler = this['on_' + event]\n        if localHandler\n            if not localHandler(params)\n                return false\n        if not @uid or @properties.client\n            return false\n        @ui.event(this, event, params)\n        return true\n\n    _int_to_px: (i) ->\n        if /^[0-9]+$/.test(i)\n            return i + 'px'\n        if i == null or i == 'auto'\n            return 'auto'\n        return i + ''\n\n    cancel: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n\n\n\n#---------------------\n# Crash handler\n#---------------------\n\n_escape = (s) -> s.replace(/</g, '&lt;')\n\nwindow.ajentiConnectSocket = (uri) ->\n    return io.connect(uri, resource: 'ajenti:socket')\n\nwindow.ajentiCrash = (info) ->\n    $('#crash').fadeIn()\n    $('#crash-traceback').html(_escape(info.message + \"\\n\" + info.traceback))\n    $('#crash-report textarea').val(info.report)\n\nwindow.ajentiCrashResume = (info) ->\n    $('#crash').fadeOut()\n\nwindow.ajentiCrashShowReport = () ->\n    $('#crash-traceback').toggle('blind')\n    $('#crash-report').toggle('blind')\n    setTimeout () =>\n        $('#crash-report textarea').focus()[0].select()\n    , 1000\n\nwindow.ajentiSecurityError = () ->\n    $('#security-error').fadeIn()\n\nwindow.ajentiSecurityResume = (info) ->\n    $('#security-error').fadeOut()\n\n\n\n$.fn.safeRemove = () ->\n    this.each (i,e) ->\n        if e.parentNode\n            e.parentNode.removeChild(e)\n\n$.fn.find2 = (selector) ->\n    @find(selector).add(@filter(selector))\n\n\nString.prototype.trim = () -> String(this).replace(/^\\s+|\\s+$/g, '')\nString.prototype.insert = (index, string) ->\n    if index > 0\n        return @substring(0, index) + string + @substring(index, @length)\n    else\n        return string + this\n\n\n#---------------------\n# SSL alert\n#---------------------\n\n$ () ->\n    if location.protocol == 'https:' or location.hostname == 'localhost'\n        $('#ssl-alert').hide()\n\n\n#---------------------\n# Detect tablets\n#---------------------\n\nif /Android|webOS|iPad|IEMobile/i.test(navigator.userAgent)\n    $ () ->\n        $('html').addClass('mode-tablet')\n        FastClick.attach(document.body)\n\n#---------------------\n# Fast DOM\n#---------------------\nwindow.$$ = (html, container) ->\n    container ?= 'div'\n    div = document.createElement(container)\n    div.innerHTML = html\n    return div.childNodes[0]\n\n", "class window.Controls.bind__template extends window.Control\n    createDom: () ->\n        @noUID = true\n        \"\"\"<children>\"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        if @children.length > 0\n            @dom = @children[0].dom", "class window.Controls.textbox extends window.Control\n    createDom: () ->\n        \"\"\"\n            <input class=\"control textbox #{@s(@properties.style)}\" \n                    #{if @properties.readonly then 'readonly' else ''}\n                    type=\"text\" />\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @input = @dom\n        @input.value = @properties.value\n        @input.addEventListener 'change', () => \n            @markChanged()\n        , false\n        return this\n\n    detectUpdates: () ->\n        r = {}\n        value = $(@input).val()\n        oldvalue = @properties.value || \"\"\n        if @properties.type == 'integer'\n            value = parseInt(value)\n        if value != oldvalue\n            r.value = value\n        @properties.value = value\n        return r\n\n\nclass window.Controls.passwordbox extends window.Controls.textbox\n    createDom: () ->\n        \"\"\"\n            <input class=\"control textbox #{@properties.style}\" \n                    type=\"password\" />\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @input = $(@dom)\n        @input.val(@properties.value)\n        @input.change () => @markChanged()\n        return this\n\n\nclass window.Controls.editable extends window.Control\n    createDom: () ->\n        icon = _make_icon(@properties.icon)\n        \"\"\"\n            <div class=\"control editable\">\n                <div class=\"control label\">#{icon} <span>#{@s(@properties.placeholder ? @properties.value)}</span></div>\n                <input class=\"control textbox #{@properties.style}\" type=\"text\" />\n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @label = $(@dom).find('.label')\n        @input = $(@dom).find('input')\n        @input.val(@properties.value or '')\n        @input.hide()\n        @input.change () => @markChanged()\n        @editmode = false\n        @label.click @goEditMode\n        @input.blur @goViewMode\n        @input.keyup (e) =>\n            if e.which == 13\n                @goViewMode()\n            @cancel(e)\n        return this\n\n    goViewMode: () =>\n        @editmode = false\n        @label.find('>span').html(@properties.placeholder ? @input.val())\n        @input.hide()\n        @label.show()\n\n    goEditMode: (e) =>\n        @editmode = true\n        @label.hide()\n        @input.show()\n        @input.focus()\n        e.stopPropagation()\n        e.preventDefault()\n\n    detectUpdates: () ->\n        r = {}\n        if @editmode\n            goViewMode()\n        value = @input.val()\n        if @properties.type == 'integer'\n            value = parseInt(value)\n        if value != @properties.value\n            r.value = value\n        return r\n\n\nclass window.Controls.checkbox extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div class=\"control checkbox\">\n                <input \n                    id=\"#{@properties.uid}\"\n                    type=\"checkbox\" \n                    #{if @properties.value then 'checked=\"checked\"' else ''} \n                />\n                <label for=\"#{@properties.uid}\">\n                    <div class=\"tick\">\n                        <i class=\"icon-ok\"></i>\n                    </div>\n                </label>\n                <div class=\"control label\">#{@s(@properties.text)}</div>\n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @input = $(@dom).find('input')\n        @input.change () => @markChanged()\n        return this\n\n    detectUpdates: () ->\n        r = {}\n        checked = @input.is(':checked')\n        if checked != @properties.value\n            r.value = checked\n        @properties.value = checked\n        return r\n\n\nclass window.Controls.dropdown extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div><select class=\"control dropdown\"></select></div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @input = $(@dom).find('select')\n        @data = []\n        for i in [0...@properties.labels.length]\n            do (i) =>\n                @input.append(\"\"\"<option value=\"#{i}\" #{if i == @properties.index then 'selected' else ''}>#{@s(@properties.labels[i])}</option>\"\"\")\n\n        @input.select2()\n        @input.change () => @markChanged()\n        \n        if @properties.server\n            @input.change (e) =>\n                @event('change', {})\n                @cancel(e)\n        return this\n\n    detectUpdates: () ->\n        r = {}\n        index = parseInt(@input.val())\n        if index != @properties.index\n            r.index = index\n        @properties.index = index\n        return r\n\n\nclass window.Controls.combobox extends window.Control\n    createDom: () ->\n        \"\"\"\n            <input class=\"control combobox\" type=\"text\" value=\"#{@properties.value}\" />\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)        \n        @input = $(@dom)\n        @input.change () => @markChanged()\n        @data = []\n        for i in [0...@properties.labels.length]\n            do (i) =>\n                @data.push {label: @properties.labels[i], value: @properties.values[i]}\n\n        if @properties.separator != null\n            @input.autocomplete {\n                source: (request, response) =>\n                    vals = @getVals()\n                    response($.ui.autocomplete.filter(@data, vals.pop()))\n                focus: () =>\n                    return false\n                select: (event, ui) =>\n                    vals = @getVals()\n                    vals.pop()\n                    vals.push ui.item.value\n                    @input.val(vals.join(@properties.separator))\n                    return false\n                minLength: 0\n            }\n        else\n            @input.autocomplete source: @data, minLength: 0\n        @input.click () =>\n            @input.autocomplete 'search', ''\n        return this\n\n    getVals: () ->\n        return @input.val().split(@properties.separator)\n\n    detectUpdates: () ->\n        r = {}\n        value = @input.val()\n        if @properties.type == 'integer'\n            value = parseInt(value)\n        if value != @properties.value\n            r.value = value\n        @properties.value = value\n        return r\n\n\n\nclass window.Controls.fileupload extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div class=\"control fileupload\">\n                <input type=\"file\" />\n                \n                <div class=\"full-overlay\">\n                    <div class=\"content\">\n                        <div class=\"inner\">\n                            <h1>Upload</h1>\n                            <div class=\"pb\"></div>\n                        </div>\n                    </div>\n                </div>  \n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)        \n        @progress = new window.Controls.progressbar(@ui, {}, [])\n        $(@dom).find('.pb').append($(@progress.dom))\n        @input = @dom.find('input')[0]\n        @input.addEventListener 'change', (e) =>\n            file = @input.files[0]\n            xhr = new XMLHttpRequest()\n            xhr.file = file\n            \n            if xhr.upload\n                xhr.upload.onprogress = (e) =>\n                    done = e.position || e.loaded\n                    total = e.totalSize || e.total\n                    progress = 1.0 * done / total / 2\n                    @progress.setProgress(progress)\n\n            d = new FormData()\n            d.append('file', file)\n\n            xhr.open('post', @properties.target, true)\n            xhr.send(d)\n            $(@dom).find('.full-overlay').show()\n        , false\n        $(@dom).find('.full-overlay').hide()\n\n\nclass window.Controls.paging extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div class=\"control paging\">\n                <div class=\"control label\">Page:&nbsp;</div>\n                <a class=\"prev control button style-mini\"><i class=\"icon-arrow-left\"></i></a>\n                <select></select>\n                <a class=\"next control button style-mini\"><i class=\"icon-arrow-right\"></i></a>\n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @select = $(@dom).find('select')\n        for i in [0...@properties.length]\n            @select.append($$(\"\"\"\n                <option value=\"#{i+1}\">#{i+1}</option>\n            \"\"\"))\n        @select.val(@properties.active + 1)\n        @select.select2(width: '80px')\n        @prev = $(@dom).find('.prev')\n        @next = $(@dom).find('.next')\n\n        if @properties.active == 0\n            @prev.hide()\n        if @properties.active == @properties.length - 1\n            @next.hide()\n        if !@properties.length\n            $(@dom).hide()\n\n        @prev.click () =>\n            @set(@properties.active - 1)\n        @next.click () =>\n            @set(@properties.active + 1)\n        @select.change () =>\n            idx = parseInt(@select.val()) - 1\n            console.log idx, @properties.active\n            if idx != @properties.active\n                @set(idx)\n        return this\n\n    set: (page) ->\n        @event('switch', page: page)\n\n\nclass window.Controls.pathbox extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div class=\"control container pathbox --child-container\">\n                <children>\n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @textbox = new Controls.textbox(@ui, value: @properties.value).setupDom()\n        @button = new Controls.button(\n            @ui, \n            style: 'mini'\n            icon: if @properties.directory then 'folder-close' else 'file'\n            text: ''\n        ).setupDom()\n        @append(@textbox)\n        @append(@button)\n\n        @button.on_click = () =>\n            @event('start', {})\n        return this\n\n    detectUpdates: () ->\n        return @textbox.detectUpdates()\n"], "fixing_code": ["window.WEB_SOCKET_SWF_LOCATION = '/static/main/WebSocketMain.swf'\n\n\nclass window.Stream \n    constructor: () ->\n\n    start: () ->\n        @socket = ajentiConnectSocket('/stream')\n\n        @socket.on 'connect', () ->\n            $('#connection-error').hide()\n\n        @socket.on 'auth-error', () ->\n            console.log 'Authentication lost!'\n            location.reload()\n            \n        @socket.on 'disconnect', () ->\n            $('#connection-error').show()\n\n        @socket.on 'init', (data) ->\n            data = JSON.parse(data)\n            console.group 'Welcome to Ajenti'\n            console.log 'version', data.version\n            console.log 'running on', data.platform\n            console.log 'your session:', data.session\n            $('title').text(data.hostname)\n            console.groupEnd()\n            Feedback.configure(data.feedback, data.platform, data.version, data.edition)\n            Feedback.emit('Login')\n\n        @socket.on 'ui', (ui) ->\n            console.group 'Received update'\n            console.log 'Transfer size', ui.length\n            profiler.start('Decompressing')\n            ui = RawDeflate.inflate(RawDeflate.Base64.decode(ui))\n            profiler.stop()\n            console.log 'Payload size', ui.length\n            ui = JSON.parse(ui)\n            console.log 'JSON data:', ui\n\n            UI.clear()\n            profiler.start('UI inflating')\n            ui = UI.inflate(ui)\n            profiler.stop()\n            profiler.start('UI replacement')\n            UI.replace(ui)\n            profiler.stop()\n            \n            console.log 'Total elements:', UI._total_elements\n            console.groupEnd()\n            Loading.hide()\n\n        @socket.on 'ack', () ->\n            Loading.hide()\n\n        @socket.on 'update-request', () ->\n            UI.checkForUpdates()\n            UI.sendUpdates(true)\n            Loading.show()\n\n        @socket.on 'progress-message', (m) ->\n            console.log '...', m\n            Loading.show()\n            Loading.setMessage(m)\n\n        @socket.on 'crash', (data) ->\n            data = JSON.parse(data)\n            console.log 'CRASH:', data\n            ajentiCrash(data)\n            Loading.hide()\n\n        @socket.on 'security-error', () ->\n            console.log 'SECURITY ERROR'\n            ajentiSecurityError()\n            Loading.hide()\n\n        @socket.on 'notify', (data) ->\n            data = JSON.parse(data)\n            Notificator.notify(data.type, data.text)\n\n        @socket.on 'openTab', (data) ->\n            data = JSON.parse(data)\n            Tabs.addTab(data.url, data.title)\n\n        @socket.on 'closeTab', (data) ->\n            data = JSON.parse(data)\n            Tabs.closeTab(data.url)\n\n        @socket.on 'debug', (data) ->\n            data = JSON.parse(data)\n            console.group 'Profiling'\n            for d of data.profiles\n                console.log d, data.profiles[d]\n            console.groupEnd()\n\n        $('#connection-error').hide()\n\n    send: (message) ->\n        console.log 'Sending updates', message\n        @socket.send JSON.stringify(message)\n        Loading.show()\n    \n    emit_ui_update: (updates) ->\n        @send(type: 'ui_update', content: updates)\n\n\nclass window.UIManager\n    constructor: (@stream) ->\n        @ui = null\n        @pendingUpdates = []\n        @updaterTimeout = null\n\n    inflate: (json) ->\n        children = []\n        @_total_elements += 1\n        if json.visible == true\n            for child in json.children\n                do (child) =>\n                    children.push @inflate(child)\n        typeid = json.typeid.replace(':', '__')\n        cls = Controls[typeid]\n        if not cls\n            cls = Controls.default\n\n        return new cls(this, json, children)\n\n    clear: () ->\n        @_total_elements = 0\n        if @ui\n            @ui.broadcast('destruct')\n        $('.root *').unbind() \n        $.cleanData($('.root *')) \n        $('.root *').safeRemove()\n        #$.cache = {} # Breaks stuff\n        delete @ui\n    \n    replace: (ui) ->\n        $('.ui-tooltip').remove()\n        @ui = ui\n\n        dom = $$(ui.html)\n        $('.root').append(dom)\n\n        profiler.start('DOM setup')\n        profiler.setupDomStats = {}\n        ui.setupDom(dom)\n        console.log profiler.setupDomStats\n        profiler.stop()\n\n        aoConnector.reportHeight($('body')[0].scrollHeight)\n\n    extractUpdates: (control, target) ->\n        updates = control.extractUpdates()\n        if updates\n            target.push updates\n        for child in control.children\n            do (child) =>\n                @extractUpdates(child, target)\n\n    checkForUpdates: () ->\n        updates = []\n        @extractUpdates(@ui, updates)\n        for update in updates\n            do (update) =>\n                @queueUpdate(update)\n\n    queueUpdate: (update) ->\n        @pendingUpdates.push update\n\n    sendUpdates: (force) ->\n        force ?= false\n        if @updaterTimeout\n            clearTimeout(@updaterTimeout)\n        @updaterTimeout = setTimeout () =>\n            if force or @pendingUpdates.length > 0\n                @stream.emit_ui_update @pendingUpdates\n            @pendingUpdates = []\n            @updaterTimeout = null\n        , 50\n\n    event: (control, event, params) ->\n        @checkForUpdates()\n        \n        update = \n            type: 'event'\n            uid: control.uid,\n            event: event,\n            params: params ? null\n\n        @queueUpdate update\n        @sendUpdates()\n\n    restoreTheme: () ->\n        if getCookie('ajenti-theme') == 'dark'\n            @toggleTheme()\n\n    toggleTheme: () ->\n        $('html').toggleClass('ui-dark')\n        $('html').toggleClass('ui-light')\n        \n        if $('html').hasClass('ui-dark')\n            setCookie('ajenti-theme', 'dark')\n        else\n            setCookie('ajenti-theme', 'light')\n\n\nclass window.LoadingDim \n    constructor: (@dom) ->\n        @dom.show()\n\n    hide: () ->\n        @setMessage('')\n        $('.hide-when-loaded').hide()\n        $('body').removeClass('loading')\n        @dom.stop().fadeTo(125, 0, () => @dom.hide())\n\n    show: () ->\n        $('body').addClass('loading')\n        @dom.show().stop().fadeTo(500, 1)\n\n    setMessage: (m) ->\n        @dom.find('.message').text(m)\n\n\nclass TabManager\n    constructor: () ->\n        @mainTab = $('#tab-ajenti')\n        @tabHeadersDom = $('#tab-headers')\n        @tabsDom = $('#tabs')\n        @tabHeadersDom.find('a').click () =>\n            @goHome()\n        @goHome()\n        @openTabs = {}\n\n    goHome: () ->\n        @tabsDom.find('>*').hide()\n        @mainTab.show()\n        @tabHeadersDom.find('a').removeClass('active')\n        @tabHeadersDom.find('a:first').addClass('active')\n\n    addTab: (url, title) ->\n        if @openTabs[url]\n            @openTabs[url].click()\n            return\n        dom = $(\"\"\"\n            <div class=\"tab\"><iframe src=\"#{url}\" /></div>\n        \"\"\")\n        @tabsDom.append(dom)\n        headerDom = $(\"\"\"\n            <a href=\"#\">#{title}<span class=\"close\"><i class=\"icon-remove\"></span></a></a>\n        \"\"\")\n        @tabHeadersDom.append(headerDom)\n        @openTabs[url] = headerDom\n        @openTabs[url].dom = dom\n        headerDom.click () =>\n            @tabsDom.find('>*').hide()\n            dom.show()\n            setTimeout () =>\n                dom.find('iframe')[0].contentWindow.focus()\n            , 100\n            @tabHeadersDom.find('a').removeClass('active')\n            headerDom.addClass('active')\n        headerDom.find('.close').click () =>\n            @closeTab(url)\n        headerDom.click()\n\n    closeTab: (url) ->\n        @openTabs[url].dom.remove()\n        @openTabs[url].remove()\n        delete @openTabs[url]\n        @goHome()\n\n$ () ->\n    window.Loading = new LoadingDim($('#loading'))\n    window.Tabs = new TabManager()\n    if window.UI\n        UI.restoreTheme()\n        $('#ui-theme-toggle').click () -> UI.toggleTheme()\n\n\nwindow.Controls = { }\n\n\nclass window.Control\n    constructor: (@ui, @properties, children) ->\n        window.Control.lastUID ?= -1\n\n        @properties ?= {}\n        @properties.visible ?= true\n        \n        if @properties.uid\n            @uid = @properties.uid    \n        else\n            @uid = (window.Control.lastUID--)\n\n        @dom = null\n        @children = []\n        @changed = false\n\n        profiler.start('Generating DOM')\n        @html = @createDom()\n        if @dom\n            console.log 'Bad control:', this #TODO\n        if not @html.trim\n            @html = ''\n            return\n        @html = @html.trim()\n\n        if not @noUID\n            @html = @html.insert(@html.indexOf('>'), \" id=\\\"uid-#{@uid}\\\"\")\n\n        profiler.stop()\n\n        children_html = ''\n        if children\n            for child in children\n                @children.push child\n                if not child.dom\n                    children_html += @wrapChild(child)\n        \n        @html = @html.replace('<children>', children_html)\n        \n        \n    s: (value) ->\n        ('' + value) /* Forces the conversion to string. */\n        .replace(/&/g, '&amp;') /* This MUST be the 1st replacement. */\n            .replace(/'/g, '&apos;') /* The 4 other predefined entities, required. */\n            .replace(/\"/g, '&quot;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n\n    createDom: () ->\n        \"\"\n\n    setupDom: (dom) ->\n        if @dom\n            return\n        if not dom\n            dom = $$(@html)\n        @dom = dom\n        if @properties.visible != true and @dom and @dom.style\n            @dom.style.display = 'none'\n        for child in @children\n            if child.dom\n                @append(child)\n            else\n                if Control.prototype.setupDom != child.constructor.prototype.setupDom\n                    key = child.constructor.name\n                    profiler.setupDomStats[key] ?= 0\n                    profiler.setupDomStats[key] += 1\n                child.setupDom(document.getElementById('uid-' + child.properties.uid))\n        return this\n        \n    destruct: () ->\n\n    detectUpdates: () ->\n        return {}\n\n    markChanged: () ->\n        if not @changed\n            $(@dom).before(\"\"\"\n                <div class=\"changed-badge\">\n                    <span title=\"Not saved yet\">*</span>\n                </div>\n            \"\"\")\n        @changed = true\n        $(@dom).addClass('changed')\n\n    wrapChild: (child) ->\n        return child.html\n\n    wrapChildLive: (child) ->\n        return child.dom\n\n    onBroadcast: (msg) ->\n\n    broadcast: (msg) ->\n        @onBroadcast(msg)\n        for c in @children\n            do (c) =>\n                c.broadcast(msg)\n        \n    extractUpdates: () ->\n        updates = @detectUpdates()\n        if not @uid or $.isEmptyObject(updates)\n            return null\n        for k of updates\n            do (k) =>\n                @properties[k] = updates[k]\n        return type: 'update', uid: @uid, properties: updates\n        \n    append: (child) ->\n        if not @childContainer\n            @childContainer = $($(@dom).find2('.--child-container')[0])\n        wrapper = @wrapChildLive(child)\n        if wrapper instanceof jQuery\n            wrapper = wrapper[0]\n        if wrapper\n            @childContainer.append(wrapper)\n\n    publish: () ->\n        @ui.checkForUpdates()\n        @ui.sendUpdates()\n    \n    event: (event, params) ->\n        @ui.checkForUpdates()\n        localHandler = this['on_' + event]\n        if localHandler\n            if not localHandler(params)\n                return false\n        if not @uid or @properties.client\n            return false\n        @ui.event(this, event, params)\n        return true\n\n    _int_to_px: (i) ->\n        if /^[0-9]+$/.test(i)\n            return i + 'px'\n        if i == null or i == 'auto'\n            return 'auto'\n        return i + ''\n\n    cancel: (event) ->\n        event.preventDefault()\n        event.stopPropagation()\n\n\n\n#---------------------\n# Crash handler\n#---------------------\n\n_escape = (s) -> s.replace(/</g, '&lt;')\n\nwindow.ajentiConnectSocket = (uri) ->\n    return io.connect(uri, resource: 'ajenti:socket')\n\nwindow.ajentiCrash = (info) ->\n    $('#crash').fadeIn()\n    $('#crash-traceback').html(_escape(info.message + \"\\n\" + info.traceback))\n    $('#crash-report textarea').val(info.report)\n\nwindow.ajentiCrashResume = (info) ->\n    $('#crash').fadeOut()\n\nwindow.ajentiCrashShowReport = () ->\n    $('#crash-traceback').toggle('blind')\n    $('#crash-report').toggle('blind')\n    setTimeout () =>\n        $('#crash-report textarea').focus()[0].select()\n    , 1000\n\nwindow.ajentiSecurityError = () ->\n    $('#security-error').fadeIn()\n\nwindow.ajentiSecurityResume = (info) ->\n    $('#security-error').fadeOut()\n\n\n\n$.fn.safeRemove = () ->\n    this.each (i,e) ->\n        if e.parentNode\n            e.parentNode.removeChild(e)\n\n$.fn.find2 = (selector) ->\n    @find(selector).add(@filter(selector))\n\n\nString.prototype.trim = () -> String(this).replace(/^\\s+|\\s+$/g, '')\nString.prototype.insert = (index, string) ->\n    if index > 0\n        return @substring(0, index) + string + @substring(index, @length)\n    else\n        return string + this\n\n\n#---------------------\n# SSL alert\n#---------------------\n\n$ () ->\n    if location.protocol == 'https:' or location.hostname == 'localhost'\n        $('#ssl-alert').hide()\n\n\n#---------------------\n# Detect tablets\n#---------------------\n\nif /Android|webOS|iPad|IEMobile/i.test(navigator.userAgent)\n    $ () ->\n        $('html').addClass('mode-tablet')\n        FastClick.attach(document.body)\n\n#---------------------\n# Fast DOM\n#---------------------\nwindow.$$ = (html, container) ->\n    container ?= 'div'\n    div = document.createElement(container)\n    div.innerHTML = html\n    return div.childNodes[0]\n\n", "class window.Controls.bind__template extends window.Control\n    createDom: () ->\n        @noUID = true\n        \"\"\"<children>\"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        if @children.length > 0\n            @dom = @children[0].dom\n            @properties = @children[0].properties", "class window.Controls.textbox extends window.Control\n    createDom: () ->\n        \"\"\"\n            <input class=\"control textbox #{@s(@properties.style)}\" \n                    #{if @properties.readonly then 'readonly' else ''}\n                    type=\"text\" />\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @input = @dom\n        @input.value = @properties.value\n        @input.addEventListener 'change', () => \n            @markChanged()\n        , false\n        return this\n\n    detectUpdates: () ->\n        r = {}\n        value = $(@input).val()\n        oldvalue = @properties.value || \"\"\n        if @properties.type == 'integer'\n            value = parseInt(value)\n        if value != oldvalue\n            r.value = value\n        @properties.value = value\n        return r\n\n\nclass window.Controls.passwordbox extends window.Controls.textbox\n    createDom: () ->\n        \"\"\"\n            <input class=\"control textbox #{@properties.style}\" \n                    type=\"password\" />\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @input = $(@dom)\n        @input.val(@properties.value)\n        @input.change () => @markChanged()\n        return this\n\n\nclass window.Controls.editable extends window.Control\n    createDom: () ->\n        icon = _make_icon(@properties.icon)\n        \"\"\"\n            <div class=\"control editable\">\n                <div class=\"control label\">#{icon} <span>#{@s(@properties.placeholder ? @properties.value)}</span></div>\n                <input class=\"control textbox #{@properties.style}\" type=\"text\" />\n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @label = $(@dom).find('.label')\n        @input = $(@dom).find('input')\n        @input.val(@properties.value or '')\n        @input.hide()\n        @input.change () => @markChanged()\n        @editmode = false\n        @label.click @goEditMode\n        @input.blur @goViewMode\n        @input.keyup (e) =>\n            if e.which == 13\n                @goViewMode()\n            @cancel(e)\n        return this\n\n    goViewMode: () =>\n        @editmode = false\n        @label.find('>span').html(@properties.placeholder ? @input.val())\n        @input.hide()\n        @label.show()\n\n    goEditMode: (e) =>\n        @editmode = true\n        @label.hide()\n        @input.show()\n        @input.focus()\n        e.stopPropagation()\n        e.preventDefault()\n\n    detectUpdates: () ->\n        r = {}\n        if @editmode\n            goViewMode()\n        value = @input.val()\n        if @properties.type == 'integer'\n            value = parseInt(value)\n        if value != @properties.value\n            r.value = value\n        return r\n\n\nclass window.Controls.checkbox extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div class=\"control checkbox\">\n                <input \n                    id=\"#{@properties.uid}\"\n                    type=\"checkbox\" \n                    #{if @properties.value then 'checked=\"checked\"' else ''} \n                />\n                <label for=\"#{@properties.uid}\">\n                    <div class=\"tick\">\n                        <i class=\"icon-ok\"></i>\n                    </div>\n                </label>\n                <div class=\"control label\">#{@s(@properties.text)}</div>\n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @input = $(@dom).find('input')\n        @input.change () => @markChanged()\n        return this\n\n    detectUpdates: () ->\n        r = {}\n        checked = @input.is(':checked')\n        if checked != @properties.value\n            r.value = checked\n        @properties.value = checked\n        return r\n\n\nclass window.Controls.dropdown extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div><select class=\"control dropdown\"></select></div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @input = $(@dom).find('select')\n        @data = []\n        for i in [0...@properties.labels.length]\n            do (i) =>\n                @input.append(\"\"\"<option value=\"#{i}\" #{if i == @properties.index then 'selected' else ''}>#{@s(@properties.labels[i])}</option>\"\"\")\n\n        @input.select2()\n        @input.change () => @markChanged()\n        \n        if @properties.server\n            @input.change (e) =>\n                @event('change', {})\n                @cancel(e)\n        return this\n\n    detectUpdates: () ->\n        r = {}\n        index = parseInt(@input.val())\n        if index != @properties.index\n            r.index = index\n        @properties.index = index\n        return r\n\n\nclass window.Controls.combobox extends window.Control\n    createDom: () ->\n        \"\"\"\n            <input class=\"control combobox\" type=\"text\" value=\"#{@properties.value}\" />\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)        \n        @input = $(@dom)\n        @input.change () => @markChanged()\n        @data = []\n        for i in [0...@properties.labels.length]\n            do (i) =>\n                @data.push {label: @properties.labels[i], value: @properties.values[i]}\n\n        if @properties.separator != null\n            @input.autocomplete {\n                source: (request, response) =>\n                    vals = @getVals()\n                    response($.ui.autocomplete.filter(@data, vals.pop()))\n                focus: () =>\n                    return false\n                select: (event, ui) =>\n                    vals = @getVals()\n                    vals.pop()\n                    vals.push ui.item.value\n                    @input.val(vals.join(@properties.separator))\n                    return false\n                minLength: 0\n            }\n        else\n            @input.autocomplete source: @data, minLength: 0\n        @input.click () =>\n            @input.autocomplete 'search', ''\n        return this\n\n    getVals: () ->\n        return @input.val().split(@properties.separator)\n\n    detectUpdates: () ->\n        r = {}\n        value = @input.val()\n        if @properties.type == 'integer'\n            value = parseInt(value)\n        if value != @properties.value\n            r.value = value\n        @properties.value = value\n        return r\n\n\n\nclass window.Controls.fileupload extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div class=\"control fileupload\">\n                <input type=\"file\" />\n                \n                <div class=\"full-overlay\">\n                    <div class=\"content\">\n                        <div class=\"inner\">\n                            <h1>Upload</h1>\n                            <div class=\"pb\"></div>\n                        </div>\n                    </div>\n                </div>  \n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)        \n        @progress = new window.Controls.progressbar(@ui, {}, [])\n        $(@dom).find('.pb').append($(@progress.dom))\n        @input = $(@dom).find('input')[0]\n        @input.addEventListener 'change', (e) =>\n            file = @input.files[0]\n            xhr = new XMLHttpRequest()\n            xhr.file = file\n            \n            if xhr.upload\n                xhr.upload.onprogress = (e) =>\n                    done = e.position || e.loaded\n                    total = e.totalSize || e.total\n                    progress = 1.0 * done / total / 2\n                    @progress.setProgress(progress)\n\n            d = new FormData()\n            d.append('file', file)\n\n            xhr.open('post', @properties.target, true)\n            xhr.send(d)\n            $(@dom).find('.full-overlay').show()\n        , false\n        $(@dom).find('.full-overlay').hide()\n\n\nclass window.Controls.paging extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div class=\"control paging\">\n                <div class=\"control label\">Page:&nbsp;</div>\n                <a class=\"prev control button style-mini\"><i class=\"icon-arrow-left\"></i></a>\n                <select></select>\n                <a class=\"next control button style-mini\"><i class=\"icon-arrow-right\"></i></a>\n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @select = $(@dom).find('select')\n        for i in [0...@properties.length]\n            @select.append($$(\"\"\"\n                <option value=\"#{i+1}\">#{i+1}</option>\n            \"\"\"))\n        @select.val(@properties.active + 1)\n        @select.select2(width: '80px')\n        @prev = $(@dom).find('.prev')\n        @next = $(@dom).find('.next')\n\n        if @properties.active == 0\n            @prev.hide()\n        if @properties.active == @properties.length - 1\n            @next.hide()\n        if !@properties.length\n            $(@dom).hide()\n\n        @prev.click () =>\n            @set(@properties.active - 1)\n        @next.click () =>\n            @set(@properties.active + 1)\n        @select.change () =>\n            idx = parseInt(@select.val()) - 1\n            console.log idx, @properties.active\n            if idx != @properties.active\n                @set(idx)\n        return this\n\n    set: (page) ->\n        @event('switch', page: page)\n\n\nclass window.Controls.pathbox extends window.Control\n    createDom: () ->\n        \"\"\"\n            <div class=\"control container pathbox --child-container\">\n                <children>\n            </div>\n        \"\"\"\n\n    setupDom: (dom) ->\n        super(dom)\n        @textbox = new Controls.textbox(@ui, value: @properties.value).setupDom()\n        @button = new Controls.button(\n            @ui, \n            style: 'mini'\n            icon: if @properties.directory then 'folder-close' else 'file'\n            text: ''\n        ).setupDom()\n        @append(@textbox)\n        @append(@button)\n\n        @button.on_click = () =>\n            @event('start', {})\n        return this\n\n    detectUpdates: () ->\n        return @textbox.detectUpdates()\n"], "filenames": ["ajenti/plugins/main/content/js/ajenti.coffee", "ajenti/plugins/main/content/js/controls.binding.coffee", "ajenti/plugins/main/content/js/controls.inputs.coffee"], "buggy_code_start_loc": [325, 9, 234], "buggy_code_end_loc": [327, 10, 235], "fixing_code_start_loc": [325, 9, 234], "fixing_code_end_loc": [331, 11, 235], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in plugins/main/content/js/ajenti.coffee in Eugene Pankov Ajenti 1.2.13 allows remote authenticated users to inject arbitrary web script or HTML via the command field in the Cron functionality.", "other": {"cve": {"id": "CVE-2014-2260", "sourceIdentifier": "cve@mitre.org", "published": "2014-04-30T23:58:26.733", "lastModified": "2014-05-01T15:42:19.917", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in plugins/main/content/js/ajenti.coffee in Eugene Pankov Ajenti 1.2.13 allows remote authenticated users to inject arbitrary web script or HTML via the command field in the Cron functionality."}, {"lang": "es", "value": "Vulnerabilidad de XSS en plugins/main/content/js/ajenti.coffee en Eugene Pankov Ajenti 1.2.13 permite a usuarios remotos autenticados inyectar script Web o HTML arbitrarios a trav\u00e9s del campo command en la funcionalidad Cron."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ajenti:ajenti:1.2.13:*:*:*:*:*:*:*", "matchCriteriaId": "D8585A18-570A-4F8A-8F25-7361AA034210"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/124804/Ajenti-1.2.13-Cross-Site-Scripting.html", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "http://www.securityfocus.com/bid/64982", "source": "cve@mitre.org"}, {"url": "https://github.com/Eugeny/ajenti/commit/3270fd1d78391bb847b4c9ce37cf921f485b1310", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/Eugeny/ajenti/issues/233", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/Eugeny/ajenti/commit/3270fd1d78391bb847b4c9ce37cf921f485b1310"}}