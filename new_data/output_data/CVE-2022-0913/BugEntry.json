{"buggy_code": ["<?php\nnamespace MicroweberPackages\\Checkout\\Http\\Controllers\\Traits;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\ntrait ShippingTrait {\n\n    public function shippingMethod() {\n\n        // Validate Contact Information\n        $validateContactInformation = $this->_validateContactInformation();;\n        if ($validateContactInformation['valid'] == false) {\n            session_set('errors', $validateContactInformation['errors']);\n            return redirect(route('checkout.contact_information'));\n        }\n\n        $data = [];\n        $data['errors'] = session_get('errors');\n        $data['checkout_session'] = session_get('checkout_v2');\n\n        session_del('errors');\n\n        return $this->_renderView('checkout::shipping_method', $data);\n    }\n\n    public function shippingMethodChange(Request $request) {\n\n        app()->shipping_manager->setDefaultDriver($request->get('shipping_gw'));\n\n        session_append_array('checkout_v2', [\n            'shipping_gw'=> $request->get('shipping_gw')\n        ]);\n        return ['success'=>true];\n    }\n\n    public function shippingMethodSave(Request $request) {\n\n        if (is_array($request->get('Address'))) {\n            $request->merge([\n               'city'=>$request->get('Address')['city'],\n               'zip'=>$request->get('Address')['zip'],\n               'state'=>$request->get('Address')['state'],\n               'address'=>$request->get('Address')['address'],\n            ]);\n        }\n\n        session_append_array('checkout_v2', [\n            'shipping_gw'=> $request->get('shipping_gw'),\n            'city'=> $request->get('city'),\n            'address'=> $request->get('address'),\n            'country'=> $request->get('country'),\n            'state'=> $request->get('state'),\n            'zip'=> $request->get('zip'),\n            'other_info'=> $request->get('other_info'),\n        ]);\n\n        $checkIfShippingEnabled = app()->shipping_manager->getShippingModules(true);\n        if ($checkIfShippingEnabled) {\n            $validate = $this->_validateShippingMethod();\n            if ($validate['valid'] == false) {\n                session_set('errors', $validate['errors']);\n                return redirect(route('checkout.shipping_method'));\n            }\n        }\n        // Success\n        return redirect(route('checkout.payment_method'));\n    }\n\n    private function _validateShippingMethod()\n    {\n        $checkout_session = session_get('checkout_v2');\n\n        try {\n            return app()->shipping_manager->driver($checkout_session['shipping_gw'])->validate($checkout_session);\n        } catch (\\Exception $e) {\n            return ['valid' => false, 'errors' => [\n                'payment_errors'=>['error'=>_e('Must select shipping method', true)]\n            ]];\n        }\n    }\n}\n"], "fixing_code": ["<?php\nnamespace MicroweberPackages\\Checkout\\Http\\Controllers\\Traits;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Validator;\n\ntrait ShippingTrait {\n\n    public function shippingMethod() {\n\n        // Validate Contact Information\n        $validateContactInformation = $this->_validateContactInformation();;\n        if ($validateContactInformation['valid'] == false) {\n            session_set('errors', $validateContactInformation['errors']);\n            return redirect(route('checkout.contact_information'));\n        }\n\n        $data = [];\n        $data['errors'] = session_get('errors');\n        $data['checkout_session'] = session_get('checkout_v2');\n\n        session_del('errors');\n\n        return $this->_renderView('checkout::shipping_method', $data);\n    }\n\n    public function shippingMethodChange(Request $request) {\n\n        app()->shipping_manager->setDefaultDriver($request->get('shipping_gw'));\n\n        session_append_array('checkout_v2', [\n            'shipping_gw'=> $request->get('shipping_gw')\n        ]);\n        return ['success'=>true];\n    }\n\n    public function shippingMethodSave(Request $request) {\n\n        if (is_array($request->get('Address'))) {\n            $request->merge([\n                'city'=>$request->get('Address')['city'],\n                'zip'=>$request->get('Address')['zip'],\n                'state'=>$request->get('Address')['state'],\n                'address'=>$request->get('Address')['address'],\n            ]);\n        }\n\n        $rules = [];\n        $rules['shipping_gw'] = 'max:500';\n        $rules['city'] = 'max:500';\n        $rules['address'] = 'max:500';\n        $rules['country'] = 'max:500';\n        $rules['state'] = 'max:500';\n        $rules['zip'] = 'max:500';\n        $rules['other_info'] = 'max:500';\n\n        $validator = Validator::make($request->all(), $rules);\n\n        if ($validator->fails()) {\n            $errors = $validator->messages()->toArray();\n            session_set('errors', $errors);\n            return redirect(route('checkout.shipping_method'));\n        }\n\n        session_append_array('checkout_v2', [\n            'shipping_gw'=> $request->get('shipping_gw'),\n            'city'=> $request->get('city'),\n            'address'=> $request->get('address'),\n            'country'=> $request->get('country'),\n            'state'=> $request->get('state'),\n            'zip'=> $request->get('zip'),\n            'other_info'=> $request->get('other_info'),\n        ]);\n\n        $checkIfShippingEnabled = app()->shipping_manager->getShippingModules(true);\n        if ($checkIfShippingEnabled) {\n            $validate = $this->_validateShippingMethod();\n            if ($validate['valid'] == false) {\n                session_set('errors', $validate['errors']);\n                return redirect(route('checkout.shipping_method'));\n            }\n        }\n        // Success\n        return redirect(route('checkout.payment_method'));\n    }\n\n    private function _validateShippingMethod()\n    {\n        $checkout_session = session_get('checkout_v2');\n\n        try {\n            return app()->shipping_manager->driver($checkout_session['shipping_gw'])->validate($checkout_session);\n        } catch (\\Exception $e) {\n            return ['valid' => false, 'errors' => [\n                'payment_errors'=>['error'=>_e('Must select shipping method', true)]\n            ]];\n        }\n    }\n}\n"], "filenames": ["src/MicroweberPackages/Checkout/Http/Controllers/Traits/ShippingTrait.php"], "buggy_code_start_loc": [41], "buggy_code_end_loc": [45], "fixing_code_start_loc": [41], "fixing_code_end_loc": [63], "type": "CWE-190", "message": "Integer Overflow or Wraparound in GitHub repository microweber/microweber prior to 1.3.", "other": {"cve": {"id": "CVE-2022-0913", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-11T10:15:08.053", "lastModified": "2022-03-18T19:49:07.507", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Integer Overflow or Wraparound in GitHub repository microweber/microweber prior to 1.3."}, {"lang": "es", "value": "Un Desbordamiento de Enteros o Wraparound en el repositorio de GitHub microweber/microweber versiones anteriores a 1.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.3}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.11", "matchCriteriaId": "27F18776-5929-46C8-A145-9CE23BB19915"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f5f3e468-663b-4df0-8340-a2d77e4cc75f", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/7559e141d0707f8eeff2f9aeaa5a0ca2e3fe6583"}}