{"buggy_code": ["<?php\n/*-------------------------------------------------------+\n| PHPFusion Content Management System\n| Copyright (C) PHP Fusion Inc\n| https://phpfusion.com/\n+--------------------------------------------------------+\n| Filename: core_functions_include.php\n| Author: Core Development Team (coredevs@phpfusion.com)\n+--------------------------------------------------------+\n| This program is released as free software under the\n| Affero GPL license. You can redistribute it and/or\n| modify it under the terms of this license which you\n| can read by viewing the included agpl.txt or online\n| at www.gnu.org/licenses/agpl.html. Removal of this\n| copyright header is strictly prohibited without\n| written permission from the original author(s).\n+--------------------------------------------------------*/\n(defined('IN_FUSION') || exit);\n\nuse PHPFusion\\Authenticate;\nuse PHPFusion\\OutputHandler;\n\n/**\n * Get currency symbol by using a 3-letter ISO 4217 currency code\n * Note that if INTL pecl package is not installed, signs will degrade to ISO4217 code itself\n *\n * @param string $iso         3-letter ISO 4217\n * @param bool   $description set to false for just symbol\n *\n * @return null\n */\nfunction fusion_get_currency($iso = NULL, $description = TRUE) {\n    $locale = fusion_get_locale('', LOCALE.LOCALESET.\"currency.php\");\n\n    static $__currency = [];\n\n    if (empty($__currency)) {\n        // Euro Exceptions list\n        $currency_exceptions = [\n            \"ADF\" => \"EUR\",\n            \"ATS\" => \"EUR\",\n            \"BEF\" => \"EUR\",\n            \"CYP\" => \"EUR\",\n            \"DEM\" => \"EUR\",\n            \"EEK\" => \"EUR\",\n            \"ESP\" => \"EUR\",\n            \"FIM\" => \"EUR\",\n            \"FRF\" => \"EUR\",\n            \"GRD\" => \"EUR\",\n            \"IEP\" => \"EUR\",\n            \"ITL\" => \"EUR\",\n            \"KZT\" => \"EUR\",\n            \"LTL\" => \"EUR\",\n            \"LUF\" => \"EUR\",\n            \"LVL\" => \"EUR\",\n            \"MCF\" => \"EUR\",\n            \"MTL\" => \"EUR\",\n            \"NLG\" => \"EUR\",\n            \"PTE\" => \"EUR\",\n            \"RUB\" => \"EUR\",\n            \"SIT\" => \"EUR\",\n            \"SKK\" => \"EUR\",\n            \"SML\" => \"EUR\",\n            \"VAL\" => \"EUR\",\n            \"DDM\" => \"EUR\",\n            \"ESA\" => \"EUR\",\n            \"ESB\" => \"EUR\",\n        ];\n        foreach (array_keys($locale['currency']) as $country_iso) {\n            $c_iso = !empty($currency_exceptions[$country_iso]) ? $currency_exceptions[$country_iso] : $country_iso;\n            $c_symbol = (!empty($locale['currency_symbol'][$c_iso]) ? html_entity_decode($locale['currency_symbol'][$c_iso], ENT_QUOTES, $locale['charset']) : $c_iso);\n            $c_text = $locale['currency'][$c_iso];\n            $__currency[$country_iso] = $description ? $c_text.\" ($c_symbol)\" : $c_symbol;\n        }\n    }\n\n    return $iso === NULL ? $__currency : (isset($__currency[$iso]) ? $__currency[$iso] : NULL);\n}\n\n/**\n * Check if a given theme exists and is valid\n *\n * @param string $theme\n *\n * @return bool\n */\nfunction theme_exists($theme) {\n    if ($theme == \"Default\") {\n        $theme = fusion_get_settings('theme');\n    }\n\n    return is_string($theme) and preg_match(\"/^([a-z0-9_-]){2,50}$/i\",\n            $theme) and file_exists(THEMES.$theme.\"/theme.php\") and file_exists(THEMES.$theme.\"/styles.css\");\n}\n\n/**\n * Set a valid theme\n *\n * @param string $theme\n */\nfunction set_theme($theme) {\n    $locale = fusion_get_locale();\n    if (defined(\"THEME\")) {\n        return;\n    }\n    if (theme_exists($theme)) {\n        define(\"THEME\", THEMES.($theme == \"Default\" ? fusion_get_settings('theme') : $theme).\"/\");\n\n        return;\n    }\n    foreach (new GlobIterator(THEMES.'*') as $dir) {\n        if ($dir->isDir() and theme_exists($dir->getBasename())) {\n            define(\"THEME\", $dir->getPathname().\"/\");\n\n            return;\n        }\n    }\n    // Don't stop if we are in admin panel since we use different themes now\n    $no_theme_message = str_replace(\"[SITE_EMAIL]\", fusion_get_settings(\"siteemail\"), $locale['global_301']);\n\n    if (preg_match(\"/\\/administration\\//i\", $_SERVER['PHP_SELF'])) {\n\n        addNotice('danger', \"<strong>\".$theme.\" - \".$locale['global_300'].\".</strong><br /><br />\\n\".$no_theme_message);\n\n    } else {\n\n        echo \"<strong>\".$theme.\" - \".$locale['global_300'].\".</strong><br /><br />\\n\";\n\n        echo $no_theme_message;\n\n        die();\n\n    }\n}\n\n/**\n * Set the admin password when needed\n *\n * @param string $password\n *\n * @return bool\n */\nfunction set_admin_pass($password) {\n    return Authenticate::setAdminCookie($password);\n}\n\n/**\n * Check if admin password matches userdata\n *\n * @param string $password\n *\n * @return bool\n */\nfunction check_admin_pass($password) {\n    return Authenticate::validateAuthAdmin($password);\n}\n\n/**\n * Redirect browser using header or script function\n *\n * @param string $location Desintation URL\n * @param bool   $delay    meta refresh delay\n * @param bool   $script   true if you want to redirect via javascript\n * @param int    $code\n */\nfunction redirect($location, $delay = FALSE, $script = FALSE, $code = 200) {\n    //define('STOP_REDIRECT', true);\n    //$location = fusion_get_settings('site_seo') && defined('IN_PERMALINK') ? FUSION_ROOT.$location : $location;\n    if (!defined('STOP_REDIRECT')) {\n        if (isnum($delay)) {\n            $ref = \"<meta http-equiv='refresh' content='$delay; url=\".$location.\"' />\";\n            add_to_head($ref);\n        } else {\n            if ($script == FALSE && !headers_sent()) {\n                set_status_header($code);\n                header(\"Location: \".str_replace(\"&amp;\", \"&\", $location));\n                exit;\n            } else {\n                echo \"<script type='text/javascript'>document.location.href='\".str_replace(\"&amp;\", \"&\", $location).\"'</script>\\n\";\n                exit;\n            }\n        }\n    }\n    //elseif (fusion_get_settings(\"devmode\")) {\n    //    debug_print_backtrace();\n    //    echo \"redirected to \".$location;\n    //}\n}\n\n/**\n * Set HTTP status header\n *\n * @param int $code status header code\n *\n * @return bool whether header was sent\n */\nfunction set_status_header($code = 200) {\n    if (headers_sent()) {\n        return FALSE;\n    }\n\n    $protocol = $_SERVER['SERVER_PROTOCOL'];\n\n    if ('HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol) {\n        $protocol = 'HTTP/1.0';\n    }\n\n    $desc = [\n        100 => 'Continue',\n        101 => 'Switching Protocols',\n        102 => 'Processing',\n        200 => 'OK',\n        201 => 'Created',\n        202 => 'Accepted',\n        203 => 'Non-Authoritative Information',\n        204 => 'No Content',\n        205 => 'Reset Content',\n        206 => 'Partial Content',\n        207 => 'Multi-Status',\n        226 => 'IM Used',\n        300 => 'Multiple Choices',\n        301 => 'Moved Permanently',\n        302 => 'Found',\n        303 => 'See Other',\n        304 => 'Not Modified',\n        305 => 'Use Proxy',\n        306 => 'Reserved',\n        307 => 'Temporary Redirect',\n        400 => 'Bad Request',\n        401 => 'Unauthorized',\n        402 => 'Payment Required',\n        403 => 'Forbidden',\n        404 => 'Not Found',\n        405 => 'Method Not Allowed',\n        406 => 'Not Acceptable',\n        407 => 'Proxy Authentication Required',\n        408 => 'Request Timeout',\n        409 => 'Conflict',\n        410 => 'Gone',\n        411 => 'Length Required',\n        412 => 'Precondition Failed',\n        413 => 'Request Entity Too Large',\n        414 => 'Request-URI Too Long',\n        415 => 'Unsupported Media Type',\n        416 => 'Requested Range Not Satisfiable',\n        417 => 'Expectation Failed',\n        422 => 'Unprocessable Entity',\n        423 => 'Locked',\n        424 => 'Failed Dependency',\n        426 => 'Upgrade Required',\n        500 => 'Internal Server Error',\n        501 => 'Not Implemented',\n        502 => 'Bad Gateway',\n        503 => 'Service Unavailable',\n        504 => 'Gateway Timeout',\n        505 => 'HTTP Version Not Supported',\n        506 => 'Variant Also Negotiates',\n        507 => 'Insufficient Storage',\n        510 => 'Not Extended'\n    ];\n\n    $desc = isset($desc[$code]) ? $desc[$code] : '';\n\n    header(\"$protocol $code $desc\");\n\n    return TRUE;\n}\n\n/**\n * Get HTTP response code\n *\n * @param $url\n *\n * @return false|string\n */\nfunction get_http_response_code($url) {\n    stream_context_set_default([\n        'ssl' => [\n            'verify_peer'      => FALSE,\n            'verify_peer_name' => FALSE\n        ],\n    ]);\n\n    $headers = get_headers($url);\n    return substr($headers[0], 9, 3);\n}\n\n/**\n * Clean URL Function, prevents entities in server globals\n *\n * @param string $url\n *\n * @return string\n */\nfunction cleanurl($url) {\n    $bad_entities = [\"&\", \"\\\"\", \"'\", '\\\"', \"\\'\", \"<\", \">\", \"\", \"\", \"*\"];\n    $safe_entities = [\"&amp;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\n    return str_replace($bad_entities, $safe_entities, $url);\n}\n\n/**\n * Strip Input Function, prevents HTML in unwanted places\n *\n * @param mixed $text\n *\n * @return mixed\n */\nfunction stripinput($text) {\n    if (!is_array($text)) {\n        return str_replace('\\\\', '&#092;', htmlspecialchars(stripslash(trim($text)), ENT_QUOTES));\n    }\n    foreach ($text as $i => $item) {\n        $text[$i] = stripinput($item);\n    }\n\n    return $text;\n}\n\n/**\n * Prevent any possible XSS attacks via $_GET\n *\n * @param string $check_url\n *\n * @return bool True if the URL is not secure\n */\nfunction stripget($check_url) {\n    if (is_array($check_url)) {\n        foreach ($check_url as $value) {\n            if (stripget($value) == TRUE) {\n                return TRUE;\n            }\n        }\n    } else {\n        $check_url = str_replace([\"\\\"\", \"\\'\"], [\"\", \"\"], urldecode($check_url));\n        if (preg_match(\"/<[^<>]+>/i\", $check_url)) {\n            return TRUE;\n        }\n    }\n    return FALSE;\n}\n\n/**\n * Strip file name\n *\n * @param string $filename\n *\n * @return string\n */\nfunction stripfilename($filename) {\n    $patterns = [\n        '/\\s+/'              => '_',\n        '/[^a-z0-9_-]|^\\W/i' => '',\n        '/([_-])\\1+/'        => '$1'\n    ];\n\n    return preg_replace(array_keys($patterns), $patterns, strtolower($filename)) ?: (string)time();\n}\n\n/**\n * Strip Slash Function, only stripslashes if magic_quotes_gpc is on\n *\n * @param string $text\n *\n * @return string\n */\nfunction stripslash($text) {\n    if (QUOTES_GPC) {\n        $text = stripslashes($text);\n    }\n\n    return $text;\n}\n\n/**\n * Add Slash Function, add correct number of slashes depending on quotes_gpc\n *\n * @param string $text\n *\n * @return string\n */\nfunction addslash($text) {\n    if (!QUOTES_GPC) {\n        $text = addslashes(addslashes($text));\n    } else {\n        $text = addslashes($text);\n    }\n\n    return $text;\n}\n\n/**\n * htmlentities is too agressive so we use this function\n *\n * @param string $text\n *\n * @return string\n */\nfunction phpentities($text) {\n    return str_replace('\\\\', '&#092;', htmlspecialchars($text, ENT_QUOTES));\n}\n\n/**\n * Trim a line of text to a preferred length\n *\n * @param string $text\n * @param int    $length\n *\n * @return string\n */\nfunction trimlink($text, $length) {\n    if (strlen($text) > $length) {\n        if (function_exists('mb_substr')) {\n            $text = mb_substr($text, 0, ($length - 3), 'UTF-8').\"...\";\n        } else {\n            $text = substr($text, 0, ($length - 3)).\"...\";\n        }\n    }\n\n    return $text;\n}\n\n/**\n * Trim a text to a number of words\n *\n * @param string $text\n * @param int    $limit  The number of words\n * @param string $suffix If $text is longer than $limit, $suffix will be appended.\n *                       Tip: You can pass an html link to the full content.\n *\n * @return string\n */\nfunction fusion_first_words($text, $limit, $suffix = '&hellip;') {\n    $text = preg_replace('/[\\r\\n]+/', '', $text);\n    return preg_replace('~^(\\s*\\w+'.str_repeat('\\W+\\w+', $limit - 1).'(?(?=[?!:;.])\n                [[:punct:]]\\s*\n        ))\\b(.+)$~isxu', '$1'.$suffix, strip_tags($text));\n}\n\n/**\n * Pure trim function\n *\n * @param string $str\n * @param int    $length\n *\n * @return string\n */\nfunction trim_text($str, $length = 300) {\n    for ($i = $length; $i <= strlen($str); $i++) {\n        $spacetest = substr(\"$str\", $i, 1);\n        if ($spacetest == \" \") {\n            $spaceok = substr(\"$str\", 0, $i);\n\n            return ($spaceok.\"...\");\n            break;\n        }\n    }\n\n    return ($str);\n}\n\n/**\n * Replaces special characters in a string with their \"non-special\" counterpart.\n *\n * @param $value\n *\n * @return string\n */\nfunction normalize($value) {\n    $table = [\n        '&amp;' => 'and', '@' => 'at', '\u00a9' => 'c', '\u00ae' => 'r', '\u00c0' => 'a', '(' => '', ')' => '', '.' => '',\n        '\u00c1'     => 'a', '\u00c2' => 'a', '\u00c4' => 'a', '\u00c5' => 'a', '\u00c6' => 'ae', '\u00c7' => 'c',\n        '\u00c8'     => 'e', '\u00c9' => 'e', '\u00cb' => 'e', '\u00cc' => 'i', '\u00cd' => 'i', '\u00ce' => 'i',\n        '\u00cf'     => 'i', '\u00d2' => 'o', '\u00d3' => 'o', '\u00d4' => 'o', '\u00d5' => 'o', '\u00d6' => 'o',\n        '\u00d8'     => 'o', '\u00d9' => 'u', '\u00da' => 'u', '\u00db' => 'u', '\u00dc' => 'u', '\u00dd' => 'y',\n        '\u00df'     => 'ss', '\u00e0' => 'a', '\u00e1' => 'a', '\u00e2' => 'a', '\u00e4' => 'a', '\u00e5' => 'a',\n        '\u00e6'     => 'ae', '\u00e7' => 'c', '\u00e8' => 'e', '\u00e9' => 'e', '\u00ea' => 'e', '\u00eb' => 'e',\n        '\u00ec'     => 'i', '\u00ed' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f2' => 'o', '\u00f3' => 'o',\n        '\u00f4'     => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00f9' => 'u', '\u00fa' => 'u',\n        '\u00fb'     => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u00fe' => 'p', '\u00ff' => 'y', '\u0100' => 'a',\n        '\u0101'     => 'a', '\u0102' => 'a', '\u0103' => 'a', '\u0104' => 'a', '\u0105' => 'a', '\u0106' => 'c',\n        '\u0107'     => 'c', '\u0108' => 'c', '\u0109' => 'c', '\u010a' => 'c', '\u010b' => 'c', '\u010c' => 'c',\n        '\u010d'     => 'c', '\u010e' => 'd', '\u010f' => 'd', '\u0110' => 'd', '\u0111' => 'd', '\u0112' => 'e',\n        '\u0113'     => 'e', '\u0114' => 'e', '\u0115' => 'e', '\u0116' => 'e', '\u0117' => 'e', '\u0118' => 'e',\n        '\u0119'     => 'e', '\u011a' => 'e', '\u011b' => 'e', '\u011c' => 'g', '\u011d' => 'g', '\u011e' => 'g',\n        '\u011f'     => 'g', '\u0120' => 'g', '\u0121' => 'g', '\u0122' => 'g', '\u0123' => 'g', '\u0124' => 'h',\n        '\u0125'     => 'h', '\u0126' => 'h', '\u0127' => 'h', '\u0128' => 'i', '\u0129' => 'i', '\u012a' => 'i',\n        '\u012b'     => 'i', '\u012c' => 'i', '\u012d' => 'i', '\u012e' => 'i', '\u012f' => 'i', '\u0130' => 'i',\n        '\u0131'     => 'i', '\u0132' => 'ij', '\u0133' => 'ij', '\u0134' => 'j', '\u0135' => 'j', '\u0136' => 'k',\n        '\u0137'     => 'k', '\u0138' => 'k', '\u0139' => 'l', '\u013a' => 'l', '\u013b' => 'l', '\u013c' => 'l',\n        '\u013d'     => 'l', '\u013e' => 'l', '\u013f' => 'l', '\u0140' => 'l', '\u0141' => 'l', '\u0142' => 'l',\n        '\u0143'     => 'n', '\u0144' => 'n', '\u0145' => 'n', '\u0146' => 'n', '\u0147' => 'n', '\u0148' => 'n',\n        '\u0149'     => 'n', '\u014a' => 'n', '\u014b' => 'n', '\u014c' => 'o', '\u014d' => 'o', '\u014e' => 'o',\n        '\u014f'     => 'o', '\u0150' => 'o', '\u0151' => 'o', '\u0152' => 'oe', '\u0153' => 'oe', '\u0154' => 'r',\n        '\u0155'     => 'r', '\u0156' => 'r', '\u0157' => 'r', '\u0158' => 'r', '\u0159' => 'r', '\u015a' => 's',\n        '\u015b'     => 's', '\u015c' => 's', '\u015d' => 's', '\u015e' => 's', '\u015f' => 's', '\u0160' => 's',\n        '\u0161'     => 's', '\u0162' => 't', '\u0163' => 't', '\u0164' => 't', '\u0165' => 't', '\u0166' => 't',\n        '\u0167'     => 't', '\u0168' => 'u', '\u0169' => 'u', '\u016a' => 'u', '\u016b' => 'u', '\u016c' => 'u',\n        '\u016d'     => 'u', '\u016e' => 'u', '\u016f' => 'u', '\u0170' => 'u', '\u0171' => 'u', '\u0172' => 'u',\n        '\u0173'     => 'u', '\u0174' => 'w', '\u0175' => 'w', '\u0176' => 'y', '\u0177' => 'y', '\u0178' => 'y',\n        '\u0179'     => 'z', '\u017a' => 'z', '\u017b' => 'z', '\u017c' => 'z', '\u017d' => 'z', '\u017e' => 'z',\n        '\u017f'     => 'z', '\u018f' => 'e', '\u0192' => 'f', '\u01a0' => 'o', '\u01a1' => 'o', '\u01af' => 'u',\n        '\u01b0'     => 'u', '\u01cd' => 'a', '\u01ce' => 'a', '\u01cf' => 'i', '\u01d0' => 'i', '\u01d1' => 'o',\n        '\u01d2'     => 'o', '\u01d3' => 'u', '\u01d4' => 'u', '\u01d5' => 'u', '\u01d6' => 'u', '\u01d7' => 'u',\n        '\u01d8'     => 'u', '\u01d9' => 'u', '\u01da' => 'u', '\u01db' => 'u', '\u01dc' => 'u', '\u01fa' => 'a',\n        '\u01fb'     => 'a', '\u01fc' => 'ae', '\u01fd' => 'ae', '\u01fe' => 'o', '\u01ff' => 'o', '\u0259' => 'e',\n        '\u0401'     => 'jo', '\u0404' => 'e', '\u0406' => 'i', '\u0407' => 'i', '\u0410' => 'a', '\u0411' => 'b',\n        '\u0412'     => 'v', '\u0413' => 'g', '\u0414' => 'd', '\u0415' => 'e', '\u0416' => 'zh', '\u0417' => 'z',\n        '\u0418'     => 'i', '\u0419' => 'j', '\u041a' => 'k', '\u041b' => 'l', '\u041c' => 'm', '\u041d' => 'n',\n        '\u041e'     => 'o', '\u041f' => 'p', '\u0420' => 'r', '\u0421' => 's', '\u0422' => 't', '\u0423' => 'u',\n        '\u0424'     => 'f', '\u0425' => 'h', '\u0426' => 'c', '\u0427' => 'ch', '\u0428' => 'sh', '\u0429' => 'sch',\n        '\u042a'     => '-', '\u042b' => 'y', '\u042c' => '-', '\u042d' => 'je', '\u042e' => 'ju', '\u042f' => 'ja',\n        '\u0430'     => 'a', '\u0431' => 'b', '\u0432' => 'v', '\u0433' => 'g', '\u0434' => 'd', '\u0435' => 'e',\n        '\u0436'     => 'zh', '\u0437' => 'z', '\u0438' => 'i', '\u0439' => 'j', '\u043a' => 'k', '\u043b' => 'l',\n        '\u043c'     => 'm', '\u043d' => 'n', '\u043e' => 'o', '\u043f' => 'p', '\u0440' => 'r', '\u0441' => 's',\n        '\u0442'     => 't', '\u0443' => 'u', '\u0444' => 'f', '\u0445' => 'h', '\u0446' => 'c', '\u0447' => 'ch',\n        '\u0448'     => 'sh', '\u0449' => 'sch', '\u044a' => '-', '\u044b' => 'y', '\u044c' => '-', '\u044d' => 'je',\n        '\u044e'     => 'ju', '\u044f' => 'ja', '\u0451' => 'jo', '\u0454' => 'e', '\u0456' => 'i', '\u0457' => 'i',\n        '\u0490'     => 'g', '\u0491' => 'g', '\u05d0' => 'a', '\u05d1' => 'b', '\u05d2' => 'g', '\u05d3' => 'd',\n        '\u05d4'     => 'h', '\u05d5' => 'v', '\u05d6' => 'z', '\u05d7' => 'h', '\u05d8' => 't', '\u05d9' => 'i',\n        '\u05da'     => 'k', '\u05db' => 'k', '\u05dc' => 'l', '\u05dd' => 'm', '\u05de' => 'm', '\u05df' => 'n',\n        '\u05e0'     => 'n', '\u05e1' => 's', '\u05e2' => 'e', '\u05e3' => 'p', '\u05e4' => 'p', '\u05e5' => 'C',\n        '\u05e6'     => 'c', '\u05e7' => 'q', '\u05e8' => 'r', '\u05e9' => 'w', '\u05ea' => 't', '\u2122' => 'tm',\n        '\u0621'     => 'a', '\u0627' => 'a', '\u0622' => 'a', '\u0628' => 'b', '\u067e' => 'p', '\u062a' => 't',\n        '\u062b'     => 's', '\u062c' => 'j', '\u0686' => 'ch', '\u062d' => 'h', '\u062e' => 'kh', '\u062f' => 'd',\n        '\u0631'     => 'r', '\u0632' => 'z', '\u0698' => 'zh', '\u0633' => 's', '\u0635' => 's', '\u0636' => 'z',\n        '\u0637'     => 't', '\u0638' => 'z', '\u063a' => 'gh', '\u0641' => 'f', '\u0642' => 'q', '\u06a9' => 'k',\n        '\u06af'     => 'g', '\u0644' => 'l', '\u0645' => 'm', '\u0646' => 'n', '\u0648' => 'w', '\u0647' => 'h', '\u06cc' => 'y ',\n    ];\n\n    return (string)strtr($value, $table);\n}\n\n/**\n * Generate random string numbers\n *\n * @param int     $length\n * @param boolean $alpha_only\n *\n * @return string\n */\nfunction random_string($length = 6, $alpha_only = FALSE) {\n    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    if ($alpha_only) {\n        $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n    $charactersLength = strlen($characters);\n    $randomString = '';\n    for ($i = 0; $i < $length; $i++) {\n        $randomString .= $characters[rand(0, $charactersLength - 1)];\n    }\n    return (string)$randomString;\n}\n\n/**\n * Validate numeric input\n *\n * @param      $value\n * @param bool $decimal\n * @param bool $negative\n *\n * @return bool\n */\nfunction isnum($value, $decimal = FALSE, $negative = FALSE) {\n    if ($negative == TRUE) {\n        return is_numeric($value);\n    } else {\n        $float = $decimal ? '(.{0,1})[0-9]*' : '';\n        return !is_array($value) and preg_match(\"/^[0-9]+\".$float.\"$/\", $value);\n    }\n}\n\n/**\n * Custom preg-match function\n *\n * @param string $expression\n * @param mixed  $value\n *\n * @return bool FALSE when $value is an array\n */\nfunction preg_check($expression, $value) {\n    return !is_array($value) and preg_match($expression, $value);\n}\n\n/**\n * Generate a clean Request URI\n *\n * @param mixed $request_addition 'page=1&ref=2' or array('page' => 1, 'ref' => 2)\n * @param array $filter_array     array('aid','page', ref')\n * @param bool  $keep_filtered    true to keep filter, false to remove filter from FUSION_REQUEST\n *                                If remove is true, to remove everything and keep $requests_array and $request\n *                                addition. If remove is false, to keep everything else except $requests_array\n *\n * @return string\n */\nfunction clean_request($request_addition = '', $filter_array = [], $keep_filtered = TRUE) {\n\n    $fusion_query = [];\n\n    if (fusion_get_settings(\"site_seo\") && defined('IN_PERMALINK') && !isset($_GET['aid'])) {\n        global $filepath;\n\n        $url['path'] = $filepath;\n        if (!empty($_GET)) {\n            $fusion_query = $_GET;\n        }\n    } else {\n\n        $url = ((array)parse_url(htmlspecialchars_decode($_SERVER['REQUEST_URI']))) + [\n                'path'  => '',\n                'query' => ''\n            ];\n\n        if ($url['query']) {\n            parse_str($url['query'], $fusion_query); // this is original.\n        }\n    }\n\n    if ($keep_filtered) {\n        $fusion_query = array_intersect_key($fusion_query, array_flip($filter_array));\n    } else {\n        $fusion_query = array_diff_key($fusion_query, array_flip($filter_array));\n    }\n\n    if ($request_addition) {\n\n        $request_addition_array = [];\n\n        if (is_array($request_addition)) {\n            $fusion_query = $fusion_query + $request_addition;\n        } else {\n            parse_str($request_addition, $request_addition_array);\n            $fusion_query = $fusion_query + $request_addition_array;\n        }\n    }\n\n    $prefix = $fusion_query ? '?' : '';\n    $query = $url['path'].$prefix.http_build_query($fusion_query, 'flags_', '&amp;');\n\n    return (string)$query;\n}\n\n/**\n * Cache smileys mysql\n *\n * @return array\n */\nfunction cache_smileys() {\n    return \\PHPFusion\\ImageRepo::cache_smileys();\n}\n\n/**\n * Parse smiley bbcode\n *\n * @param string $message\n *\n * @return string\n */\nfunction parsesmileys($message) {\n    if (!preg_match(\"#(\\[code\\](.*?)\\[/code\\]|\\[geshi=(.*?)\\](.*?)\\[/geshi\\]|\\[php\\](.*?)\\[/php\\])#si\", $message)) {\n        foreach (cache_smileys() as $smiley) {\n            $smiley_code = preg_quote($smiley['smiley_code'], '#');\n            $smiley_image = get_image(\"smiley_\".$smiley['smiley_text']);\n            $smiley_image = \"<img style='width:20px;height:20px;' src='$smiley_image' alt='\".$smiley['smiley_text'].\"' style='vertical-align:middle;' />\";\n            $message = preg_replace(\"#{$smiley_code}#s\", $smiley_image, $message);\n        }\n    }\n    return $message;\n}\n\n/**\n * Show smiley icons in comments, forum and other post pages\n *\n * @param string $textarea The name of the textarea\n * @param string $form     The name of the form\n *\n * @return string\n */\nfunction displaysmileys($textarea, $form = \"inputform\") {\n    $smileys = \"\";\n    $i = 0;\n    foreach (cache_smileys() as $smiley) {\n        if ($i != 0 && ($i % 10 == 0)) {\n            $smileys .= \"<br />\\n\";\n        }\n        $i++;\n        $img = get_image(\"smiley_\".$smiley['smiley_text']);\n        $smileys .= \"<img style='width:20px;height:20px;' src='\".$img.\"' alt='\".$smiley['smiley_text'].\"' title='\".$smiley['smiley_text'].\"' onclick=\\\"insertText('\".$textarea.\"', '\".$smiley['smiley_code'].\"', '\".$form.\"');\\\" />\\n\";\n    }\n    return $smileys;\n}\n\n/**\n * Tag a user by simply just posting his name like @Chan and if found, returns a tooltip.\n *\n * @param string $user_name @Chan\n * @param string $tooltip   ($userdata['user_lastvisit']-120 < TIME ? 'Onlin' : 'Offline')\n *\n * @return string\n */\nfunction fusion_parse_user($user_name, $tooltip = \"\") {\n    $user_regex = '@[-0-9A-Z_\\.]{1,50}';\n    return preg_replace_callback(\"#$user_regex#im\", function ($user_name) use ($tooltip) {\n        return render_user_tags($user_name, $tooltip);\n    }, $user_name);\n}\n\n/**\n * Cache all installed bbcodes\n *\n * @return array\n */\nfunction cache_bbcode() {\n    static $bbcode_cache = [];\n    if (empty($bbcode_cache)) {\n        $bbcode_cache = [];\n        $result = dbquery(\"SELECT bbcode_name FROM \".DB_BBCODES.\" ORDER BY bbcode_order ASC\");\n        while ($data = dbarray($result)) {\n            $bbcode_cache[] = $data['bbcode_name'];\n        }\n    }\n\n    return (array)$bbcode_cache;\n}\n\n/**\n * Parse and force image/ to IMAGES directory\n * Neutralize all image dir levels and convert image to pf image folder\n *\n * @param string $data\n * @param string $prefix_\n *\n * @return string\n */\nfunction parse_imageDir($data, $prefix_ = \"\") {\n    $str = str_replace(\"../\", \"\", $data);\n\n    return (string)$prefix_ ? str_replace(\"images/\", $prefix_, $str) : str_replace(\"images/\", IMAGES, $str);\n}\n\n/**\n * Interpret output to match input of textarea having both bbcode, html and tinymce buttons\n *\n * @param string $value\n * @param bool   $parse_smileys\n * @param bool   $parse_bbcode\n * @param bool   $decode\n * @param string $default_image_folder\n * @param bool   $add_line_breaks\n * @param bool   $descript\n *\n * @return string\n */\nfunction parse_textarea($value, $parse_smileys = TRUE, $parse_bbcode = TRUE, $decode = TRUE, $default_image_folder = IMAGES, $add_line_breaks = FALSE, $descript = TRUE) {\n    $charset = fusion_get_locale(\"charset\");\n    $value = stripslashes($value);\n    if ($descript === TRUE) {\n        $value = descript($value);\n        $value = htmlspecialchars_decode($value);\n    }\n    if ($default_image_folder) {\n        $value = parse_imageDir($value, $default_image_folder);\n    }\n    if ($parse_bbcode) {\n        $value = parseubb($value);\n    }\n    if ($parse_smileys) {\n        $value = parsesmileys($value);\n    }\n    $value = fusion_parse_user($value);\n    if ($add_line_breaks === TRUE) {\n        $value = nl2br($value);\n    }\n    if ($decode === TRUE) {\n        $value = html_entity_decode(html_entity_decode($value, ENT_QUOTES, $charset));\n        $value = encode_code($value);\n    }\n\n    return (string)$value;\n}\n\n/**\n * Parse bbcode\n *\n * @param string $text\n * @param string $selected The names of the required bbcodes to parse, separated by \"|\"\n * @param bool   $descript\n *\n * @return string\n */\nfunction parseubb($text, $selected = \"\", $descript = TRUE) {\n    if ($descript) {\n        $text = descript($text, FALSE);\n    }\n\n    $bbcode_cache = cache_bbcode();\n    $sel_bbcodes = [];\n\n    if ($selected) {\n        $sel_bbcodes = explode(\"|\", $selected);\n    }\n    foreach ($bbcode_cache as $bbcode) {\n        $locale_file = '';\n        if (file_exists(LOCALE.LOCALESET.\"bbcodes/\".$bbcode.\".php\")) {\n            $locale_file = LOCALE.LOCALESET.\"bbcodes/\".$bbcode.\".php\";\n        } else if (file_exists(LOCALE.\"English/bbcodes/\".$bbcode.\".php\")) {\n            $locale_file = LOCALE.\"English/bbcodes/\".$bbcode.\".php\";\n        }\n        if ($locale_file) {\n            \\PHPFusion\\Locale::setLocale($locale_file);\n        }\n    }\n\n    $locale = fusion_get_locale();\n\n    foreach ($bbcode_cache as $bbcode) {\n        if ($selected && in_array($bbcode, $sel_bbcodes)) {\n            if (file_exists(INCLUDES.\"bbcodes/\".$bbcode.\"_bbcode_include.php\")) {\n                include(INCLUDES.\"bbcodes/\".$bbcode.\"_bbcode_include.php\");\n            }\n        } else if (!$selected) {\n            if (file_exists(INCLUDES.\"bbcodes/\".$bbcode.\"_bbcode_include.php\")) {\n                include(INCLUDES.\"bbcodes/\".$bbcode.\"_bbcode_include.php\");\n            }\n        }\n    }\n\n    return $text;\n}\n\n/**\n * Javascript email encoder by Tyler Akins\n * Create a \"mailto\" link for the email address\n *\n * @param string $email\n * @param string $title   The text of the link\n * @param string $subject The subject of the message\n *\n * @return string\n */\nfunction hide_email($email, $title = \"\", $subject = \"\") {\n    if (preg_match(\"/^[-0-9A-Z_\\.]{1,50}@([-0-9A-Z_\\.]+\\.){1,50}([0-9A-Z]){2,4}$/i\", $email)) {\n        $enc_email = '';\n        $parts = explode(\"@\", $email);\n        $email = $parts[0].'@'.$parts[1];\n        for ($i = 0; $i < strlen($email); $i++) {\n            $enc_email .= '&#'.ord($email[$i]).';';\n        }\n\n        $MailLink = \"<a href='mailto:\".$enc_email;\n        if ($subject != \"\") {\n            $MailLink .= \"?subject=\".urlencode($subject);\n        }\n        $MailLink .= \"'>\".($title ? $title : $enc_email).\"</a>\";\n\n        $MailLetters = \"\";\n        for ($i = 0; $i < strlen($MailLink); $i++) {\n            $l = substr($MailLink, $i, 1);\n            if (strpos($MailLetters, $l) === FALSE) {\n                $p = rand(0, strlen($MailLetters));\n                $MailLetters = substr($MailLetters, 0, $p).$l.substr($MailLetters, $p, strlen($MailLetters));\n            }\n        }\n        $MailLettersEnc = str_replace(\"\\\\\", \"\\\\\\\\\", $MailLetters);\n        $MailLettersEnc = str_replace(\"\\\"\", \"\\\\\\\"\", $MailLettersEnc);\n        $MailIndexes = \"\";\n        for ($i = 0; $i < strlen($MailLink); $i++) {\n            $index = strpos($MailLetters, substr($MailLink, $i, 1));\n            $index += 48;\n            $MailIndexes .= chr($index);\n        }\n\n        $id = 'e'.rand(1, 99999999);\n\n        $MailIndexes = str_replace(\"\\\\\", \"\\\\\\\\\", $MailIndexes);\n        $MailIndexes = str_replace(\"\\\"\", \"\\\\\\\"\", $MailIndexes);\n        $res = \"<span id='\".$id.\"'></span>\";\n        $res .= \"<script type='text/javascript'>\";\n        $res .= \"ML=\\\"\".str_replace(\"<\", \"xxxx\", $MailLettersEnc).\"\\\";\";\n        $res .= \"MI=\\\"\".str_replace(\"<\", \"xxxx\", $MailIndexes).\"\\\";\";\n        $res .= \"ML=ML.replace(/xxxx/g, '<');\";\n        $res .= \"MI=MI.replace(/xxxx/g, '<');\";\n        $res .= \"OT=\\\"\\\";\";\n        $res .= \"for(j=0;j < MI.length;j++){\";\n        $res .= \"OT+=ML.charAt(MI.charCodeAt(j)-48);\";\n        $res .= \"}var e=document.getElementById('\".$id.\"');e.innerHTML += OT;\";\n        $res .= \"</script>\";\n\n        return $res;\n    } else {\n        return $email;\n    }\n}\n\n/**\n * Encode and format code inside <code> tag\n *\n * @param string $text\n *\n * @return string\n */\nfunction encode_code($text) {\n    preg_match_all(\"#<code>(.*?)</code>#is\", $text, $codes);\n    $replace = [];\n    foreach ($codes[1] as $key => $codeblock) {\n        $replace[$key] = htmlentities($codeblock, ENT_QUOTES, 'UTF-8', FALSE);\n    }\n    unset($key, $codeblock);\n\n    if (!empty($codes[0])) {\n        if (!defined('PRISMJS')) {\n            define('PRISMJS', TRUE);\n            add_to_head('<link rel=\"stylesheet\" href=\"'.INCLUDES.'bbcodes/code/prism.css\">');\n            add_to_footer('<script src=\"'.INCLUDES.'bbcodes/code/prism.js\"></script>');\n        }\n    }\n\n    foreach ($codes[0] as $key => $replacer) {\n        $code = str_replace('&lt;br /&gt;', '', $replace[$key]);\n        $code = formatcode($code);\n        $text = str_replace($replacer, '<pre><code class=\"language-php\">'.$code.'</code></pre>', $text);\n    }\n    unset($key, $replacer, $replace);\n\n    return $text;\n}\n\n/**\n * Format spaces and tabs in code tag\n *\n * @param string $text\n *\n * @return string\n */\nfunction format_code($text) {\n    $text = str_replace(\n        [\"  \", \"  \", \"\\t\"],\n        [\"&nbsp; \", \" &nbsp;\", \"&nbsp; &nbsp;\"],\n        $text\n    );\n    $text = preg_replace(\"/^ {1}/m\", \"&nbsp;\", $text);\n\n    return $text;\n}\n\n/**\n * @param $value\n *\n * @return string\n */\nfunction formatcode($value) {\n    return format_code($value);\n}\n\n/**\n * Formats a number in a numeric acronym, and rounding\n *\n * @param int      $value\n * @param int|null $decimals\n * @param string   $dec_point\n * @param string   $thousand_sep\n * @param bool     $round\n * @param bool     $acryonym\n *\n * @return string\n */\nfunction format_num($value = 0, $decimals = NULL, $dec_point = \".\", $thousand_sep = \",\", $round = TRUE, $acryonym = TRUE) {\n    $array = [\n        13 => $acryonym ? \"t\" : \"trillion\",\n        10 => $acryonym ? \"b\" : \"billion\",\n        7  => $acryonym ? \"m\" : \"million\",\n        4  => $acryonym ? \"k\" : \"thousand\" //2\n    ];\n\n    if (is_numeric($value)) {\n        if ($round === TRUE) {\n            foreach ($array as $length => $rounding) {\n                if (strlen($value) >= $length) {\n                    $power = pow(10, $length - 1);\n                    if ($value > $power && $length > 4 && $decimals === NULL) {\n                        $decimals = 2;\n                    }\n                    return number_format(($value / $power), $decimals, $dec_point, $thousand_sep).$rounding;\n                }\n            }\n        }\n\n        return number_format($value, $decimals, $dec_point, $thousand_sep);\n    }\n    return $value;\n}\n\n/**\n * Converts any formatted number back to float numbers in PHP\n *\n * @param $value\n *\n * @return float\n */\nfunction format_float($value) {\n    return floatval(preg_replace('/[^\\d.]/', '', $value));\n}\n\n\n/**\n * Highlights given words in subject\n *\n * @param array  $words   The highlighted word\n * @param string $subject The source text\n *\n * @return string\n */\nfunction highlight_words($words, $subject) {\n    for ($i = 0, $l = count($words); $i < $l; $i++) {\n        $word[$i] = str_replace([\n            \"\\\\\",\n            \"+\",\n            \"*\",\n            \"?\",\n            \"[\",\n            \"^\",\n            \"]\",\n            \"$\",\n            \"(\",\n            \")\",\n            \"{\",\n            \"}\",\n            \"=\",\n            \"!\",\n            \"<\",\n            \">\",\n            \"|\",\n            \":\",\n            \"#\",\n            \"-\",\n            \"_\"\n        ], \"\", $words[$i]);\n        if (!empty($words[$i])) {\n            $subject = preg_replace(\"#($words[$i])(?![^<]*>)#i\",\n                \"<span style='background-color:yellow;color:#333;font-weight:bold;padding-left:2px;padding-right:2px'>\\${1}</span>\",\n                $subject);\n        }\n    }\n\n    return $subject;\n}\n\n/**\n * This function sanitize text\n *\n * @param string $text\n * @param bool   $strip_tags False if you don't want to remove html tags. True by default\n * @param bool   $strip_scripts\n *\n * @return string\n */\nfunction descript($text, $strip_tags = TRUE, $strip_scripts = TRUE) {\n    if (is_array($text)) {\n        return $text;\n    }\n\n    $text = html_entity_decode($text, ENT_QUOTES, fusion_get_locale('charset'));\n    $text = preg_replace('/&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});/i', '', $text);\n\n    // Convert problematic ascii characters to their true values\n    $patterns = [\n        '#(&\\#x)([0-9A-F]+);*#si'                           => '',\n        '#(/\\bon\\w+=\\S+(?=.*>))#is'                         => '',\n        '#([a-z]*)=([\\`\\'\\\"]*)script:#iU'                   => '$1=$2nojscript...',\n        '#([a-z]*)=([\\`\\'\\\"]*)javascript:#iU'               => '$1=$2nojavascript...',\n        '#([a-z]*)=([\\'\\\"]*)vbscript:#iU'                   => '$1=$2novbscript...',\n        '#(<[^>]+)style=([\\`\\'\\\"]*).*expression\\([^>]*>#iU' => \"$1>\",\n        '#(<[^>]+)style=([\\`\\'\\\"]*).*behaviour\\([^>]*>#iU'  => \"$1>\"\n    ];\n\n    foreach (array_merge(['(', ')', ':'], range('A', 'Z'), range('a', 'z')) as $chr) {\n        $patterns[\"#(&\\#)(0*\".ord($chr).\"+);*#si\"] = $chr;\n    }\n\n    if ($strip_tags) {\n        do {\n            $count = 0;\n            //$iframe = !defined('ENABLE_IFRAME') ? 'embed|iframe|' : '';\n            $iframe = '';\n            $text = preg_replace('#</*(applet|meta|xml|blink|link|style|script|object|'.$iframe.'frame|frameset|ilayer|layer|bgsound|title|base)[^>]*>#i', \"\", $text, -1, $count);\n        } while ($count);\n    }\n\n    $text = preg_replace(array_keys($patterns), $patterns, $text);\n\n    $preg_patterns = [\n        // Fix &entity\\n\n        '!(&#0+[0-9]+)!'                                                                                                                                                                                => '$1;',\n        '/(&#*\\w+)[\\x00-\\x20]+;/u'                                                                                                                                                                      => '$1;>',\n        '/(&#x*[0-9A-F]+);*/iu'                                                                                                                                                                         => '$1;',\n        //any attribute starting with \"on\" or xml name space\n        '#(<[^>]+?[\\x00-\\x20\"\\'])(?:on|xmlns)[^>]*+>#iu'                                                                                                                                                => '$1>',\n        //javascript: and VB script: protocols\n        '#([a-z]*)[\\x00-\\x20]*=[\\x00-\\x20]*([`\\'\"]*)[\\x00-\\x20]*j[\\x00-\\x20]*a[\\x00-\\x20]*v[\\x00-\\x20]*a[\\x00-\\x20]*s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:#iu' => '$1=$2nojavascript...',\n        '#([a-z]*)[\\x00-\\x20]*=([\\'\"]*)[\\x00-\\x20]*v[\\x00-\\x20]*b[\\x00-\\x20]*s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:#iu'                                        => '$1=$2novbscript...',\n        '#([a-z]*)[\\x00-\\x20]*=([\\'\"]*)[\\x00-\\x20]*-moz-binding[\\x00-\\x20]*:#u'                                                                                                                         => '$1=$2nomozbinding...',\n        // Only works in IE: <span style=\"width: expression(alert('Ping!'));\"></span>\n        '#(<[^>]+?)style[\\x00-\\x20]*=[\\x00-\\x20]*[`\\'\"]*.*?expression[\\x00-\\x20]*\\([^>]*+>#i'                                                                                                           => '$1>',\n        '#(<[^>]+?)style[\\x00-\\x20]*=[\\x00-\\x20]*[`\\'\"]*.*?s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:*[^>]*+>#iu'                                                  => '$1>',\n        // namespace elements\n        '#</*\\w+:\\w[^>]*+>#i'                                                                                                                                                                           => ''\n    ];\n\n    if ($strip_scripts) {\n        $preg_patterns += [\n            '#<script(.*?)>(.*?)</script>#is' => ''\n        ];\n    }\n\n    foreach ($preg_patterns as $pattern => $replacement) {\n        $text = preg_replace($pattern, $replacement, $text);\n    }\n\n    return htmlspecialchars($text, ENT_QUOTES, 'UTF-8', FALSE);\n}\n\n/**\n * Scan image files for malicious code\n *\n * @param string $file\n *\n * @return boolean\n */\nfunction verify_image($file) {\n    $txt = file_get_contents($file);\n    $patterns = [\n        '#\\<\\?php#i',\n        '#&(quot|lt|gt|nbsp);#i',\n        '#&\\#x([0-9a-f]+);#i',\n        '#&\\#([0-9]+);#i',\n        \"#([a-z]*)=([\\`\\'\\\"]*)script:#iU\",\n        \"#([a-z]*)=([\\`\\'\\\"]*)javascript:#iU\",\n        \"#([a-z]*)=([\\'\\\"]*)vbscript:#iU\",\n        \"#(<[^>]+)style=([\\`\\'\\\"]*).*expression\\([^>]*>#iU\",\n        \"#(<[^>]+)style=([\\`\\'\\\"]*).*behaviour\\([^>]*>#iU\",\n        \"#</*(applet|link|style|script|iframe|frame|frameset)[^>]*>#i\"\n    ];\n    foreach ($patterns as $pattern) {\n        if (preg_match($pattern, $txt)) {\n            return FALSE;\n        }\n    }\n\n    return TRUE;\n}\n\n/**\n * Replace offensive words with the defined replacement word\n *\n * @param string $text\n *\n * @return string\n */\nfunction censorwords($text) {\n    $settings = fusion_get_settings();\n\n    if ($settings['bad_words_enabled'] && !empty($settings['bad_words'])) {\n        $words = preg_quote(trim($settings['bad_words']), \"/\");\n        $words = preg_replace(\"/\\\\s+/\", \"|\", $words);\n        $text = preg_replace(\"/\".$words.\"/si\", $settings['bad_word_replace'], $text);\n    }\n\n    return $text;\n}\n\n/**\n * Get a user level's name by the numeric code of level\n *\n * @param int $userlevel\n *\n * @return string\n */\nfunction getuserlevel($userlevel) {\n    $locale = fusion_get_locale();\n    $userlevels = [\n        USER_LEVEL_MEMBER      => $locale['user1'],\n        USER_LEVEL_ADMIN       => $locale['user2'],\n        USER_LEVEL_SUPER_ADMIN => $locale['user3']\n    ];\n\n    return isset($userlevels[$userlevel]) ? $userlevels[$userlevel] : NULL;\n}\n\n/**\n * Get a user status by the numeric code of the status\n *\n * @param int $userstatus\n *\n * @return string|null Null if the status does not exist\n */\nfunction getuserstatus($userstatus) {\n    $locale = fusion_get_locale();\n\n    return ($userstatus >= 0 and $userstatus <= 8) ? $locale['status'.$userstatus] : NULL;\n}\n\n/**\n * Check if Administrator has correct rights assigned\n *\n * @param string $rights The code of the right\n *\n * @return bool\n */\nfunction checkrights($rights) {\n    if (iADMIN && in_array($rights, explode(\".\", iUSER_RIGHTS))) {\n        return TRUE;\n    } else {\n        return FALSE;\n    }\n}\n\n/**\n * Function to redirect on invalid page access.\n *\n * @param string $rights\n * @param bool   $debug\n */\nfunction pageAccess($rights, $debug = FALSE) {\n    $error = [];\n    if ($debug) {\n        print_p('Admin Panel mode');\n    }\n    if (!defined('iAUTH')) {\n        $error[] = 'iAuth error';\n    }\n    if (!isset($_GET['aid'])) {\n        $error[] = 'Aid link error';\n    }\n    if (iADMIN && !empty($_GET['aid'])) {\n        if ($_GET['aid'] != iAUTH) {\n            $error[] = 'Aidlink mismatch. '.iAUTH.' != '.$_GET['aid'].\"<br/>\";\n            $error[] .= USER_IP;\n        }\n    } else {\n        $error[] = \"You are logged out while accessing admin panel\";\n    }\n    if (!checkrights($rights)) {\n        $error[] = 'Checkrights Error';\n    }\n    if (!empty($error)) {\n        if ($debug) {\n            print_p($error);\n        } else {\n            redirect(BASEDIR);\n        }\n    }\n}\n\n/**\n * Check if user is assigned to the specified user group\n *\n * @param int $group\n *\n * @return bool\n */\nfunction checkgroup($group) {\n    if (iSUPERADMIN) {\n        return TRUE;\n    } else if (iADMIN && ($group == \"0\" || $group == USER_LEVEL_MEMBER || $group == USER_LEVEL_ADMIN)) {\n        return TRUE;\n    } else if (iMEMBER && ($group == \"0\" || $group == USER_LEVEL_MEMBER)) {\n        return TRUE;\n    } else if (iGUEST && $group == \"0\") {\n        return TRUE;\n    } else if (iMEMBER && $group && in_array($group, explode(\".\", iUSER_GROUPS))) {\n        return TRUE;\n    } else {\n        return FALSE;\n    }\n}\n\n/**\n * Check access given a user level and user group\n *\n * @param int    $group\n * @param int    $user_level\n * @param string $user_groups\n *\n * @return bool\n */\nfunction checkusergroup($group, $user_level, $user_groups) {\n    if ($user_level == USER_LEVEL_SUPER_ADMIN) {\n        return TRUE;\n    } else if ($user_level == USER_LEVEL_ADMIN && ($group == 0 || $group == USER_LEVEL_MEMBER || $group == USER_LEVEL_ADMIN)) {\n        return TRUE;\n    } else if ($user_level == USER_LEVEL_MEMBER && ($group == 0 || $group == USER_LEVEL_MEMBER)) {\n        return TRUE;\n    } else if ($user_level == USER_LEVEL_PUBLIC && $group == 0) {\n        return TRUE;\n    } else if ($user_level == USER_LEVEL_MEMBER && $group && in_array($group, explode('.', $user_groups))) {\n        return TRUE;\n    }\n\n    return FALSE;\n}\n\n/**\n * Cache groups data into an array\n *\n * @return array\n */\nfunction cache_groups() {\n    static $groups_cache = NULL;\n    if ($groups_cache === NULL) {\n        $groups_cache = [];\n        $result = dbquery(\"SELECT * FROM \".DB_USER_GROUPS.\" ORDER BY group_id ASC\");\n        while ($data = dbarray($result)) {\n            $groups_cache[] = $data;\n        }\n    }\n\n    return $groups_cache;\n}\n\n/**\n * Compile access levels & user group array\n *\n * @return array structure of elements: array($levelOrGroupid, $levelnameOrGroupname, $levelGroupDescription,\n *               $levelGroupIcon)\n */\nfunction getusergroups() {\n    $locale = fusion_get_locale();\n    $groups_array = [\n        [USER_LEVEL_PUBLIC, $locale['user0'], $locale['user0'], 'fa fa-user'],\n        [USER_LEVEL_MEMBER, $locale['user1'], $locale['user1'], 'fa fa-user'],\n        [USER_LEVEL_ADMIN, $locale['user2'], $locale['user2'], 'fa fa-user'],\n        [USER_LEVEL_SUPER_ADMIN, $locale['user3'], $locale['user3'], 'fa fa-user']\n    ];\n    $groups_cache = cache_groups();\n    foreach ($groups_cache as $group) {\n        $group_icon = !empty($group['group_icon']) ? $group['group_icon'] : '';\n        array_push($groups_array, [$group['group_id'], $group['group_name'], $group['group_description'], $group_icon]);\n    }\n\n    return $groups_array;\n}\n\n/**\n * Get the name of the access level or user group\n *\n * @param int  $group_id\n * @param bool $return_desc If true, group_description will be returned instead of group_name\n * @param bool $return_icon If true, group_icon will be returned instead of group_icon group_name\n *\n * @return string\n */\nfunction getgroupname($group_id, $return_desc = FALSE, $return_icon = FALSE) {\n\n    foreach (getusergroups() as $group) {\n\n        if ($group_id == $group[0]) {\n            return ($return_desc ? ($group[2] ?: '-') : (!empty($group[3]) && $return_icon ? \"<i class='\".$group[3].\"'></i> \" : \"\").$group[1]);\n        }\n    }\n\n    return NULL;\n}\n\n/**\n * Get array of all groups\n *\n * @return array\n */\nfunction fusion_get_groups() {\n    $visibility_opts = [];\n    foreach (getusergroups() as $groups) {\n        $visibility_opts[$groups[0]] = $groups[1];\n    }\n\n    return $visibility_opts;\n}\n\n/**\n * Getting the real users_group access.\n *\n * @param int $group_id\n *\n * @return bool\n */\nfunction users_groupaccess($group_id) {\n    if (preg_match(\"(^\\.{$group_id}$|\\.{$group_id}\\.|\\.{$group_id}$)\", fusion_get_userdata('user_groups'))) {\n        return TRUE;\n    }\n\n    return FALSE;\n}\n\n/**\n * Getting the access levels used when asking the database for data\n *\n * @param string $field\n *\n * @return string The part of WHERE clause. Always returns a condition\n */\nfunction groupaccess($field) {\n    $res = '';\n    if (iGUEST) {\n        $res = $field.\" = \".USER_LEVEL_PUBLIC;\n    } else if (iSUPERADMIN) {\n        $res = \"1 = 1\";\n    } else if (iADMIN) {\n        $res = $field.\" in (\".USER_LEVEL_PUBLIC.\", \".USER_LEVEL_MEMBER.\", \".USER_LEVEL_ADMIN.\")\";\n    } else if (iMEMBER) {\n        $res = $field.\" in (\".USER_LEVEL_PUBLIC.\", \".USER_LEVEL_MEMBER.\")\";\n    }\n    if (iUSER_GROUPS != \"\" && !iSUPERADMIN) {\n        $res = \"(\".$res.\" OR $field='\".str_replace(\".\", \"' OR $field='\", iUSER_GROUPS).\"')\";\n    }\n\n    return $res;\n}\n\n/**\n * UF blacklist for SQL - same as groupaccess() but $field is the user_id column.\n *\n * @param string $field The name of the field\n *\n * @return string It can return an empty condition!\n */\nfunction blacklist($field) {\n    $userdata = fusion_get_userdata('user_id');\n    $blacklist = [];\n    if (in_array('user_blacklist', fieldgenerator(DB_USERS))) {\n        if (!empty($userdata['user_id'])) {\n            $result = dbquery(\"SELECT user_id, user_level FROM \".DB_USERS.\" WHERE user_blacklist REGEXP('^\\\\\\.{$userdata['user_id']}$|\\\\\\.{$userdata['user_id']}\\\\\\.|\\\\\\.{$userdata['user_id']}$')\");\n            if (dbrows($result) > 0) {\n                while ($data = dbarray($result)) {\n                    if ($data['user_level'] > USER_LEVEL_ADMIN) {\n                        $blacklist[] = $data['user_id']; // all users to filter\n                    }\n                }\n            }\n        }\n        $i = 0;\n        $sql = '';\n        foreach ($blacklist as $id) {\n            $sql .= ($i > 0) ? \"AND $field !='$id'\" : \"($field !='$id'\";\n            $i++;\n        }\n        $sql .= $sql ? \")\" : ' 1=1 ';\n\n        return \"$sql\";\n    } else {\n        return \"\";\n    }\n}\n\n/**\n * Check if user was blacklisted by a member\n *\n * @param int $user_id\n *\n * @return bool\n */\nfunction user_blacklisted($user_id) {\n    return in_array('user_blacklist', fieldgenerator(DB_USERS)) and in_array($user_id, explode('.', fusion_get_userdata('user_blacklist')));\n}\n\n/**\n * Create a list of files or folders and store them in an array\n *\n * @param string $folder\n * @param string $filter     The names of the filtered folder separated by \"|\", false to use default filter\n * @param bool   $sort       False if you don't want to sort the result. True by default\n * @param string $type       Possible values: 'files' to list files, 'folders' to list folders\n * @param string $ext_filter File extensions separated by \"|\". Only when $type is 'files'\n *\n * @return array\n */\nfunction makefilelist($folder, $filter = '', $sort = TRUE, $type = \"files\", $ext_filter = \"\") {\n    $res = [];\n\n    $default_filters = '.|..|.DS_Store';\n    if ($filter === FALSE) {\n        $filter = $default_filters;\n    }\n\n    $filter = explode(\"|\", $filter);\n    if ($type == \"files\" && !empty($ext_filter)) {\n        $ext_filter = explode(\"|\", strtolower($ext_filter));\n    }\n\n    if (file_exists($folder)) {\n        $temp = opendir($folder);\n        while ($file = readdir($temp)) {\n            if ($type == \"files\" && !in_array($file, $filter)) {\n                if (!empty($ext_filter)) {\n                    if (!in_array(substr(strtolower(stristr($file, '.')), +1), $ext_filter) && !is_dir($folder.$file)) {\n                        $res[] = $file;\n                    }\n                } else {\n                    if (is_file($folder.$file)) {\n                        $res[] = $file;\n                    }\n                }\n            } else if ($type == \"folders\" && !in_array($file, $filter)) {\n                if (is_dir($folder.$file)) {\n                    $res[] = $file;\n                }\n            }\n        }\n        closedir($temp);\n        if ($sort) {\n            sort($res);\n        }\n    } else {\n        $error_log = debug_backtrace()[1];\n        $function = (isset($error_log['class']) ? $error_log['class'] : '').(isset($error_log['type']) ? $error_log['type'] : '').(isset($error_log['function']) ? $error_log['function'] : '');\n        $error_log = strtr(fusion_get_locale('err_103', LOCALE.LOCALESET.'errors.php'), [\n            '{%folder%}'   => $folder,\n            '{%function%}' => (!empty($function) ? '<code class=\\'m-r-10\\'>'.$function.'</code>' : '')\n        ]);\n        setError(2, $error_log, debug_backtrace()[1]['file'], debug_backtrace()[1]['line']);\n    }\n\n    return $res;\n}\n\n/**\n * Create a selection list from an array created by makefilelist()\n *\n * @param array  $options\n * @param string $selected\n *\n * @return string\n */\nfunction makefileopts($options, $selected = \"\") {\n    $res = \"\";\n    foreach ($options as $item) {\n        $sel = ($selected == $item ? \" selected='selected'\" : \"\");\n        $res .= \"<option value='\".$item.\"' $sel>\".$item.\"</option>\\n\";\n    }\n\n    return $res;\n}\n\n/**\n * Making Page Navigation\n *\n * @param int    $rowstart The number of the first listed item - $_GET['rowstart']\n * @param int    $count    The number of displayed items - LIMIT on sql\n * @param int    $total    The number of all items - a dbcount of total\n * @param int    $range    The number of links before and after the current page\n * @param string $link     The base url before the appended part\n * @param string $getname  The variable name in the query string which stores the number of the current page\n * @param bool   $button   Displays as button\n *\n * @return bool|string False if $count is invalid\n */\nfunction makepagenav($rowstart, $count, $total, $range = 3, $link = \"\", $getname = \"rowstart\", $button = FALSE) {\n\n    $locale = fusion_get_locale();\n    /* Bootstrap may be disabled in theme (see Gillette for example) without settings change in DB.\n       In such case this function will not work properly.\n       With this fix (used $settings instead fusion_get_settings) function will work.*/\n    if (fusion_get_settings(\"bootstrap\") || defined('BOOTSTRAP')) {\n        $tpl_global = \"<nav>%s<div class='btn-group'>\\n%s</div></nav>\\n\";\n        $tpl_currpage = \"<a class='btn btn-sm btn-default active' href='%s=%d'><strong>%d</strong></a>\\n\";\n        $tpl_page = \"<a class='btn btn-sm btn-default' data-value='%d' href='%s=%d'>%s</a>\\n\";\n        $tpl_divider = \"</div>\\n<div class='btn-group'>\";\n        $tpl_firstpage = \"<a class='btn btn-sm btn-default' data-value='0' href='%s=0'>1</a>\\n\";\n        $tpl_lastpage = \"<a class='btn btn-sm btn-default' data-value='%d' href='%s=%d'>%s</a>\\n\";\n        $tpl_button = \"<a class='btn btn-primary btn-block btn-md' data-value='%d' href='%s=%d'>%s</a>\\n\";\n    } else {\n        $tpl_global = \"<div class='pagenav'>%s\\n%s</div>\\n\";\n        $tpl_currpage = \"<a class='pagenavlink active' href='%s=%d'>%d</a>\";\n        $tpl_page = \"<a class='pagenavlink' data-value='%d' href='%s=%d'>%s</a>\";\n        $tpl_divider = \"<span class='pagenavdivider'>...</span>\";\n        $tpl_firstpage = \"<a class='pagenavlink' data-value='0' href='%s=0'>1</a>\";\n        $tpl_lastpage = \"<a class='pagenavlink' data-value='%d' href='%s=%d'>%s</a>\\n\";\n        $tpl_button = \"<a class='pagenavlink' data-value='%d' href='%s=%d'>%s</a>\\n\";\n    }\n\n    if ($link == '') {\n        $link = FUSION_SELF.\"?\";\n        if (fusion_get_settings(\"site_seo\") && defined('IN_PERMALINK')) {\n            global $filepath;\n            $link = $filepath.\"?\";\n        }\n    }\n    if (!preg_match(\"#[0-9]+#\", $count) || $count == 0) {\n        return FALSE;\n    }\n    $pg_cnt = ceil($total / $count);\n    if ($pg_cnt <= 1) {\n        return \"\";\n    }\n    $idx_back = $rowstart - $count;\n    $idx_next = $rowstart + $count;\n    if ($button == TRUE) {\n        if ($idx_next >= $total) {\n            return sprintf($tpl_button, 0, $link.$getname, 0, $locale['load_end']);\n        } else {\n            return sprintf($tpl_button, $idx_next, $link.$getname, $idx_next, $locale['load_more']);\n        }\n    }\n    $cur_page = ceil(($rowstart + 1) / $count);\n    $res = \"\";\n    if ($idx_back >= 0) {\n        if ($cur_page > ($range + 1)) {\n            $res .= sprintf($tpl_firstpage, $link.$getname);\n            if ($cur_page != ($range + 2)) {\n                $res .= $tpl_divider;\n            }\n        }\n    }\n    $idx_fst = max($cur_page - $range, 1);\n    $idx_lst = min($cur_page + $range, $pg_cnt);\n    if ($range == 0) {\n        $idx_fst = 1;\n        $idx_lst = $pg_cnt;\n    }\n    for ($i = $idx_fst; $i <= $idx_lst; $i++) {\n        $offset_page = ($i - 1) * $count;\n        if ($i == $cur_page) {\n            $res .= sprintf($tpl_currpage, $link.$getname, $offset_page, $i);\n        } else {\n            $res .= sprintf($tpl_page, $offset_page, $link.$getname, $offset_page, $i);\n        }\n    }\n    if ($idx_next < $total) {\n        if ($cur_page < ($pg_cnt - $range)) {\n            if ($cur_page != ($pg_cnt - $range - 1)) {\n                $res .= $tpl_divider;\n            }\n            $res .= sprintf($tpl_lastpage, ($pg_cnt - 1) * $count, $link.$getname, ($pg_cnt - 1) * $count, $pg_cnt);\n        }\n    }\n\n    return sprintf($tpl_global, \"<small class='m-r-10'><span>\".$locale['global_092'].\"</span> \".$cur_page.$locale['global_093'].$pg_cnt.\"</small> \", $res);\n}\n\n/**\n * @param     $total\n * @param     $count\n * @param int $range\n *\n * @return float|int\n */\nfunction rowstart_count($total, $count, $range = 3) {\n    if ($total > $count) {\n        $cur_page = ceil(($total + 1) / $count);\n        $pg_cnt = ceil($total / $count);\n        if ($pg_cnt <= 1) {\n            return 0;\n        }\n        $row = min($cur_page + $range, $pg_cnt);\n        return ($row - 1) * $count;\n    }\n    return 0;\n}\n\n\n/**\n * Inifity sroll\n *\n * @param string $scroll_url The ajax script that loads the content\n * @param int    $rowstart   The number of the first listed item - $_GET['rowstart']\n * @param int    $count      The number of all items - a dbcount of total\n * @param string $getname    The variable name in the query string which stores the number of the current page\n * @param string $http_query '&section=some_section'\n *\n * @return string\n */\nfunction infinite_scroll($scroll_url, $rowstart, $count, $getname = 'rowstart', $http_query = '') {\n    $locale = fusion_get_locale();\n\n    add_to_jquery(\"\n        var count = $rowstart+1;\n        $(window).scroll(function(){\n          if ($(window).scrollTop() == ($(document).height() - $(window).height())) {\n            if (count <= '$count') {\n                loadInfinityContent(count);\n                count++;\n            }\n          }\n        });\n       function loadInfinityContent(pageNumber){\n           $('.infiniteLoader').show('fast');\n           $.ajax({\n                  url: '$scroll_url',\n                  type:'GET',\n                  data: 'action=infinite_scroll&$getname='+ pageNumber +'\".($http_query ? \"&\".$http_query : '').\"',\n                  success: function(html){\n                      $('.infiniteLoader').hide();\n                      $('#scroll_target').append(html);  // This will be the div where our content will be loaded\n                  }\n              });\n          return false;\n        }\n    \");\n\n    return \"\n    <div id='scroll_target'></div>\n    <div class='infiniteLoader panel panel-default' style='display:none;'><div class='panel-body text-center'>\".$locale['loading'].\"</div></div>\n    \";\n}\n\n/**\n * Hierarchy Page Breadcrumbs\n * This function generates breadcrumbs on all your category needs on $_GET['rownav'] as your cat_id\n *\n * @param array  $tree_index dbquery_tree(DB_NEWS_CATS, \"news_cat_id\", \"news_cat_parent\") / tree_index(dbquery_tree_full(DB_NEWS_CATS, \"news_cat_id\", \"news_cat_parent\"))\n * @param array  $tree_full  dbquery_tree_full(DB_NEWS_CATS, \"news_cat_id\", \"news_cat_parent\")\n * @param string $id_col     \"news_cat_id\",\n * @param string $title_col  \"news_cat_name\",\n * @param string $getname    cat_id for $_GET['cat_id']\n * @param string $key        key for breadcrumb instance\n */\nfunction make_page_breadcrumbs($tree_index, $tree_full, $id_col, $title_col, $getname = \"rownav\", $key = 'default') {\n\n    $_GET[$getname] = !empty($_GET[$getname]) && isnum($_GET[$getname]) ? $_GET[$getname] : 0;\n\n    // Recursive fatal protection\n    if (!function_exists('breadcrumb_page_arrays')) {\n        function breadcrumb_page_arrays($tree_index, $tree_full, $id_col, $title_col, $getname, $id) {\n            $crumb = [];\n            if (isset($tree_index[get_parent($tree_index, $id)])) {\n                $_name = get_parent_array($tree_full, $id);\n                $crumb = [\n                    'link'  => isset($_name[$id_col]) ? clean_request($getname.\"=\".$_name[$id_col], [\"aid\"], TRUE) : \"\",\n                    'title' => isset($_name[$title_col]) ? \\PHPFusion\\QuantumFields::parse_label($_name[$title_col]) : \"\",\n                ];\n                if (get_parent($tree_index, $id) == 0) {\n                    return $crumb;\n                }\n                $crumb_1 = breadcrumb_page_arrays($tree_index, $tree_full, $id_col, $title_col, $getname, get_parent($tree_index, $id));\n\n                if (!empty($crumb_1)) {\n                    $crumb = array_merge_recursive($crumb, $crumb_1);\n                }\n\n            }\n\n            return $crumb;\n        }\n    }\n\n    // then we make a infinity recursive function to loop/break it out.\n    $crumb = breadcrumb_page_arrays($tree_index, $tree_full, $id_col, $title_col, $getname, $_GET[$getname]);\n    // then we sort in reverse.\n    $title_count = !empty($crumb['title']) && is_array($crumb['title']) ? count($crumb['title']) > 1 : 0;\n    if ($title_count) {\n        krsort($crumb['title']);\n        krsort($crumb['link']);\n    }\n    if ($title_count) {\n        foreach ($crumb['title'] as $i => $value) {\n            \\PHPFusion\\BreadCrumbs::getInstance($key)->addBreadCrumb(['link' => $crumb['link'][$i], 'title' => $value]);\n            if ($i == count($crumb['title']) - 1) {\n                add_to_title($value);\n                OutputHandler::addToMeta($value);\n            }\n        }\n    } else if (isset($crumb['title'])) {\n        add_to_title($crumb['title']);\n        add_to_meta($crumb['title']);\n        add_breadcrumb(['link' => $crumb['link'], 'title' => $crumb['title']]);\n    }\n}\n\n/**\n * Format the date & time accordingly\n *\n * @param string $format shortdate, longdate, forumdate, newsdate or date pattern for the strftime\n * @param int    $val    unix timestamp\n * @param array  $options\n *\n * @return string\n */\nfunction showdate($format, $val, $options = []) {\n    $userdata = fusion_get_userdata();\n\n    if (isset($options['tz_override'])) {\n        $tz_client = $options['tz_override'];\n    } else {\n        if (!empty($userdata['user_timezone'])) {\n            $tz_client = $userdata['user_timezone'];\n        } else {\n            $tz_client = fusion_get_settings('timeoffset');\n        }\n    }\n\n    if (empty($tz_client)) {\n        $tz_client = 'Europe/London';\n    }\n\n    $client_dtz = new DateTimeZone($tz_client);\n    $client_dt = new DateTime('now', $client_dtz);\n    $offset = $client_dtz->getOffset($client_dt);\n\n    if (!empty($val)) {\n        if (in_array($format, ['shortdate', 'longdate', 'forumdate', 'newsdate'])) {\n            $format = fusion_get_settings($format);\n            $offset = intval($val) + $offset;\n\n            return strftime($format, $offset);\n        } else {\n            $offset = intval($val) + $offset;\n\n            return strftime($format, $offset);\n        }\n    } else {\n        $format = fusion_get_settings($format);\n        $offset = intval(TIME) + $offset;\n\n        return strftime($format, $offset);\n    }\n}\n\n/**\n * Translate bytes into kB, MB, GB or TB\n *\n * @param int  $size     The number of bytes\n * @param int  $decimals Precision\n * @param bool $dir      True if it is the size of a directory\n *\n * @return string\n */\nfunction parsebytesize($size, $decimals = 2, $dir = FALSE) {\n    $locale = fusion_get_locale();\n\n    $kb = 1024;\n    $mb = 1024 * $kb;\n    $gb = 1024 * $mb;\n    $tb = 1024 * $gb;\n\n    $size = (empty($size)) ? \"0\" : $size;\n\n    if (($size == 0) && ($dir)) {\n        return \"0 \".$locale['global_460'];\n    } else if ($size < $kb) {\n        return $size.$locale['global_461'];\n    } else if ($size < $mb) {\n        return round($size / $kb, $decimals).'kB';\n    } else if ($size < $gb) {\n        return round($size / $mb, $decimals).'MB';\n    } else if ($size < $tb) {\n        return round($size / $gb, $decimals).'GB';\n    } else {\n        return round($size / $tb, $decimals).'TB';\n    }\n}\n\n/**\n * User profile link\n *\n * @param int    $user_id\n * @param string $user_name\n * @param int    $user_status\n * @param string $class html class of link\n * @param bool   $display_link\n *\n * @return string\n */\nfunction profile_link($user_id, $user_name, $user_status, $class = \"profile-link\", $display_link = TRUE) {\n    $locale = fusion_get_locale();\n    $settings = fusion_get_settings();\n    $class = ($class ? \"class='$class'\" : \"\");\n\n    if ((in_array($user_status, [\n                0,\n                3,\n                7\n            ]) || checkrights(\"M\")) && (iMEMBER || $settings['hide_userprofiles'] == \"0\") && $display_link == TRUE\n    ) {\n        $link = \"<a href='\".BASEDIR.\"profile.php?lookup=\".$user_id.\"' \".$class.\">\".$user_name.\"</a>\";\n    } else if ($user_status == \"5\" || $user_status == \"6\") {\n        $link = $locale['user_anonymous'];\n    } else {\n        $link = $user_name;\n    }\n\n    return $link;\n}\n\n/**\n * Variable dump printer for debugging purposes\n *\n * @param mixed $data\n * @param bool  $modal\n * @param bool  $print\n *\n * @return string\n */\nfunction print_p($data, $modal = FALSE, $print = TRUE) {\n    ob_start();\n    echo htmlspecialchars(print_r($data, TRUE), ENT_QUOTES, 'utf-8');\n    $debug = ob_get_clean();\n    if ($modal == TRUE) {\n        $modal = openmodal('Debug', 'Debug');\n        $modal .= \"<pre class='printp' style='white-space:pre-wrap !important;'>\";\n        $modal .= $debug;\n        $modal .= \"</pre>\\n\";\n        $modal .= closemodal();\n        PHPFusion\\OutputHandler::addToFooter($modal);\n\n        return FALSE;\n    }\n    if ($print == TRUE) {\n        echo \"<pre class='printp' style='white-space:pre-wrap !important;'>\";\n        echo $debug;\n        echo \"</pre>\\n\";\n    }\n\n    return $debug;\n}\n\n/**\n * Fetch the settings from the database\n *\n * @param string $key The key of one setting\n *\n * @return string[]|string Associative array of settings or one setting by key if $key was given\n */\nfunction fusion_get_settings($key = NULL) {\n    // It is initialized only once because of 'static'\n    static $settings = [];\n    if (empty($settings) and defined('DB_SETTINGS') and dbconnection() && db_exists('settings')) {\n        $result = dbquery(\"SELECT * FROM \".DB_SETTINGS);\n        while ($data = dbarray($result)) {\n            $settings[$data['settings_name']] = $data['settings_value'];\n        }\n    }\n\n    return $key === NULL ? $settings : (isset($settings[$key]) ? $settings[$key] : NULL);\n}\n\n/**\n * Get Locale\n * Fetch a given locale key\n *\n * @param string       $key          The key of one locale\n * @param array|string $include_file The full path of the file which to be included\n *\n * @return string|array\n */\nfunction fusion_get_locale($key = NULL, $include_file = '') {\n    $locale = \\PHPFusion\\Locale::getInstance('default');\n    if ($include_file) {\n        $locale::setLocale($include_file);\n    }\n\n    return $locale->getLocale($key);\n}\n\n/**\n * Fetch username by id\n *\n * @param int $user_id\n *\n * @return string\n */\nfunction fusion_get_username($user_id) {\n    $result = NULL;\n    $result = (dbresult(dbquery(\"SELECT user_name FROM \".DB_USERS.\" WHERE user_id='\".intval($user_id).\"'\"), 0));\n\n    return ($result !== NULL) ? $result : fusion_get_locale(\"na\");\n}\n\n/**\n * Get a user own data\n *\n * @param string $key The column of one user information\n *\n * @return string|array\n */\nfunction fusion_get_userdata($key = NULL) {\n    global $userdata;\n    if (empty($userdata)) {\n        $userdata = [\"user_level\" => 0, \"user_rights\" => \"\", \"user_groups\" => \"\", \"user_theme\" => 'Default'];\n    }\n    $userdata = $userdata + [\n            \"user_id\"     => 0,\n            \"user_name\"   => fusion_get_locale(\"user_guest\"),\n            \"user_status\" => 1,\n            \"user_level\"  => 0,\n            \"user_rights\" => \"\",\n            \"user_groups\" => \"\",\n            \"user_theme\"  => fusion_get_settings(\"theme\"),\n        ];\n\n    return $key === NULL ? $userdata : (isset($userdata[$key]) ? $userdata[$key] : NULL);\n}\n\n/**\n * Get any users data\n *\n * @param int    $user_id The user id\n * @param string $key     The key of column\n *\n * @return string|array\n */\nfunction fusion_get_user($user_id, $key = NULL) {\n    static $user = [];\n    if (!isset($user[$user_id]) && isnum($user_id)) {\n        $user[$user_id] = dbarray(dbquery(\"SELECT * FROM \".DB_USERS.\" WHERE user_id='\".intval($user_id).\"'\"));\n    }\n    if (!isset($user[$user_id])) {\n        return NULL;\n    }\n\n    return $key === NULL ? $user[$user_id] : (isset($user[$user_id][$key]) ? $user[$user_id][$key] : NULL);\n}\n\n/**\n * Get Aidlink\n *\n * @return string\n */\nfunction fusion_get_aidlink() {\n    $aidlink = '';\n    if (defined('iADMIN') && iADMIN && defined('iAUTH')) {\n        $aidlink = '?aid='.iAUTH;\n    }\n\n    return (string)$aidlink;\n}\n\n/**\n * Get form tokens\n *\n * @param string $form_id\n * @param int    $max_tokens\n *\n * @return string\n */\nfunction fusion_get_token($form_id, $max_tokens = 5) {\n    return \\defender\\Token::generate_token($form_id, $max_tokens);\n}\n\n/**\n * Fetch PM Settings\n *\n * @param int    $user_id\n * @param string $key user_inbox, user_outbox, user_archive, user_pm_email_notify, user_pm_save_sent\n *\n * @return array|bool|null\n */\nfunction user_pm_settings($user_id, $key = NULL) {\n    return \\PHPFusion\\PrivateMessages::get_pm_settings($user_id, $key);\n}\n\n/**\n * Run the installer or halt the script\n */\nfunction fusion_run_installer() {\n    if (file_exists(\"install.php\")) {\n        redirect(\"install.php\");\n    } else {\n        die(\"No config.php or install.php files were found\");\n    }\n}\n\n/**\n * Define Site Language\n *\n * @param string $lang\n */\nfunction define_site_language($lang) {\n    if (valid_language($lang)) {\n        define('LANGUAGE', $lang);\n        define('LOCALESET', $lang.'/');\n    }\n}\n\n/**\n * Set the requested language\n *\n * @param string $lang\n */\nfunction set_language($lang) {\n    $userdata = fusion_get_userdata();\n    if (valid_language($lang)) {\n        if (iMEMBER) {\n            dbquery(\"UPDATE \".DB_USERS.\" SET user_language='\".$lang.\"' WHERE user_id='\".$userdata['user_id'].\"'\");\n        } else {\n            $rows = dbrows(dbquery(\"SELECT user_language FROM \".DB_LANGUAGE_SESSIONS.\" WHERE user_ip='\".USER_IP.\"'\"));\n            if ($rows != 0) {\n                dbquery(\"UPDATE \".DB_LANGUAGE_SESSIONS.\" SET user_language='\".$lang.\"', user_datestamp='\".time().\"' WHERE user_ip='\".USER_IP.\"'\");\n            } else {\n                dbquery(\"INSERT INTO \".DB_LANGUAGE_SESSIONS.\" (user_ip, user_language, user_datestamp) VALUES ('\".USER_IP.\"', '\".$lang.\"', '\".TIME.\"');\");\n            }\n            // Sanitize guest sessions occasionally\n            dbquery(\"DELETE FROM \".DB_LANGUAGE_SESSIONS.\" WHERE user_datestamp<'\".(TIME - (86400 * 60)).\"'\");\n        }\n    }\n}\n\n/**\n * Check if a given language is valid or if exists\n * Checks whether a language can be found in enabled languages array\n * Can also be used to check whether a language actually exists\n *\n * @param string $lang\n * @param bool   $file_check intended to be used when enabling languages in Admin Panel\n *\n * @return bool\n */\nfunction valid_language($lang, $file_check = FALSE) {\n    $enabled_languages = fusion_get_enabled_languages();\n    if (preg_match(\"/^([a-z0-9_-]){2,50}$/i\",\n            $lang) && ($file_check ? file_exists(LOCALE.$lang.\"/global.php\") : isset($enabled_languages[$lang]))\n    ) {\n        return TRUE;\n    } else {\n        return FALSE;\n    }\n}\n\n/**\n * Create a selection list of possible languages in list\n *\n * @param string $selected_language\n *\n * @return string\n * @todo rename it from get_available_languages_list to a more proper name\n */\nfunction get_available_languages_list($selected_language = \"\") {\n    $enabled_languages = fusion_get_enabled_languages();\n    $res = \"\";\n    foreach ($enabled_languages as $language) {\n        $sel = ($selected_language == $language ? \" selected='selected'\" : \"\");\n        $label = str_replace('_', ' ', $language);\n        $res .= \"<option value='\".$language.\"' $sel>\".$label.\"</option>\\n\";\n    }\n\n    return $res;\n}\n\n/**\n * Get Language Switch Arrays\n *\n * @return array\n */\nfunction fusion_get_language_switch() {\n    static $language_switch = [];\n    if (empty($language_link)) {\n        $enabled_languages = fusion_get_enabled_languages();\n        foreach ($enabled_languages as $language => $language_name) {\n            $link = clean_request('lang='.$language, ['lang'], FALSE);\n            $language_switch[$language] = [\n                \"language_name\"   => $language_name,\n                \"language_icon_s\" => BASEDIR.\"locale/$language/$language-s.png\",\n                \"language_icon\"   => BASEDIR.\"locale/$language/$language.png\",\n                \"language_link\"   => $link,\n            ];\n        }\n    }\n\n    return (array)$language_switch;\n}\n\n/**\n * Language switcher function\n *\n * @param bool $icon\n */\nfunction lang_switcher($icon = TRUE) {\n    $locale = fusion_get_locale();\n    $enabled_languages = fusion_get_enabled_languages();\n    if (count($enabled_languages) <= 1) {\n        return;\n    }\n    openside($locale['global_ML102']);\n    echo \"<h5><strong>\".$locale['UM101'].\"</strong></h5>\\n\";\n    if ($icon) {\n        $language_switch = fusion_get_language_switch();\n        if (!empty($language_switch)) {\n            $row = 0;\n            foreach ($language_switch as $folder => $langData) {\n                $icon = \"<img class='display-block img-responsive' alt='\".$langData['language_name'].\"' src='\".$langData['language_icon'].\"' title='\".$langData['language_name'].\"' style='min-width:20px;'/>\\n\";\n                if ($folder != LANGUAGE) {\n                    $icon = \"<a class='side pull-left display-block' href='\".$langData['language_link'].\"'>\".$icon.\"</a>\\n \";\n                }\n                echo(($row > 0 and $row % 4 === 0) ? '<br />' : '');\n                echo \"<div class='display-inline-block clearfix'>\\n\".$icon.\"</div>\\n\";\n                $row++;\n            }\n        }\n    } else {\n        include_once INCLUDES.\"translate_include.php\";\n        echo openform('lang_menu_form', 'post', FUSION_SELF);\n        echo form_select('lang_menu', '', fusion_get_settings('locale'), [\"options\" => fusion_get_enabled_languages(), \"width\" => \"100%\"]);\n        echo closeform();\n        add_to_jquery(\"\n            function showflag(item){\n                return '<div class=\\\"clearfix\\\" style=\\\"width:100%; padding-left:10px;\\\"><img style=\\\"height:20px; margin-top:3px !important;\\\" class=\\\"img-responsive pull-left\\\" src=\\\"\".LOCALE.\"' + item.text + '/'+item.text + '-s.png\\\" alt=\\\"'+item.text + '\\\"/><span class=\\\"p-l-10\\\">'+ item.text +'</span></div>';\n            }\n            $('#lang_menu').select2({\n            placeholder: '\".$locale['global_ML103'].\"',\n            formatSelection: showflag,\n            escapeMarkup: function(m) { return m; },\n            formatResult: showflag,\n            }).bind('change', function(item) {\n                window.location.href = '\".FUSION_REQUEST.\"?lang='+$(this).val();\n            });\n        \");\n    }\n    closeside();\n}\n\n/**\n * Detect whether the system is installed and return the config file path\n *\n * @return string\n */\nfunction fusion_detect_installation() {\n    $config_path = dirname(__DIR__).'/config.php';\n    if (!is_file($config_path) or !filesize($config_path)) {\n        fusion_run_installer();\n    }\n\n    return $config_path;\n}\n\n/**\n * Get the array of enabled languages\n *\n * @return string[]\n */\nfunction fusion_get_enabled_languages() {\n    $settings = fusion_get_settings();\n    static $enabled_languages = NULL;\n\n    if ($enabled_languages === NULL) {\n        if (isset($settings['enabled_languages'])) {\n            $values = explode('.', $settings['enabled_languages']);\n            foreach ($values as $language_name) {\n                $enabled_languages[$language_name] = translate_lang_names($language_name);\n            }\n        }\n    }\n\n    return (array)$enabled_languages;\n}\n\n/**\n * Get the array of detected languages\n *\n * @return array\n */\nfunction fusion_get_detected_language() {\n    static $detected_languages = NULL;\n    if ($detected_languages === NULL) {\n        $all_languages = makefilelist(LOCALE, \".svn|.|..\", TRUE, \"folders\");\n        foreach ($all_languages as $language_name) {\n            $detected_languages[$language_name] = translate_lang_names($language_name);\n        }\n    }\n\n    return (array)$detected_languages;\n}\n\n/**\n * Log user actions\n *\n * @param int    $user_id\n * @param string $column_name affected column\n * @param string $new_value\n * @param string $old_value\n */\nfunction save_user_log($user_id, $column_name, $new_value, $old_value) {\n    $data = [\n        \"userlog_id\"        => 0,\n        \"userlog_user_id\"   => $user_id,\n        \"userlog_field\"     => $column_name,\n        \"userlog_value_new\" => $new_value,\n        \"userlog_value_old\" => $old_value,\n        \"userlog_timestamp\" => time(),\n    ];\n    dbquery_insert(DB_USER_LOG, $data, \"save\", [\"keep_session\" => TRUE]);\n}\n\n/**\n * Minify JS Code\n *\n * @param string $code\n *\n * @return string\n */\nfunction jsminify($code) {\n    $minifier = new \\PHPFusion\\Minify\\JS($code);\n\n    return $minifier->minify();\n}\n\n/**\n * A wrapper function for file_put_contents with cache invalidation\n * If opcache is enabled on the server, this function will write the file\n * as the original file_put_contents and invalidate the cache of the file.\n * It is needed when you create a file dynamically and want to include it\n * before the cache is invalidated. Redirection does not matter.\n *\n * @param string          $file file path\n * @param string|string[] $data\n * @param int             $flags\n *\n * @return int Number of written bytes\n */\nfunction write_file($file, $data, $flags = NULL) {\n    $bytes = NULL;\n    if ($flags === NULL) {\n        $bytes = \\file_put_contents($file, $data);\n    } else {\n        $bytes = \\file_put_contents($file, $data, $flags);\n    }\n    if (function_exists('opcache_invalidate')) {\n        \\opcache_invalidate($file, TRUE);\n    }\n\n    return $bytes;\n}\n\n/**\n * Returns nearest data unit\n *\n * @param int $total_bit\n *\n * @return int\n */\nfunction calculate_byte($total_bit) {\n    $calc_opts = fusion_get_locale('1020', LOCALE.LOCALESET.\"admin/settings.php\");\n    foreach ($calc_opts as $byte => $val) {\n        if ($total_bit / $byte <= 999) {\n            return (int)$byte;\n        }\n    }\n\n    return 1048576;\n}\n\n/**\n * Remove folder and all files/subdirectories\n *\n * @param string $dir\n */\nfunction rrmdir($dir) {\n    if (is_dir($dir)) {\n        $objects = scandir($dir);\n        foreach ($objects as $object) {\n            if ($object != '.' && $object != '..') {\n                if (filetype($dir.'/'.$object) == 'dir') {\n                    rrmdir($dir.'/'.$object);\n                } else {\n                    unlink($dir.'/'.$object);\n                }\n            }\n        }\n        reset($objects);\n        rmdir($dir);\n    }\n}\n\n/**\n * Alternative to rename() that works on Windows\n *\n * @param string $origin\n * @param string $target\n */\nfunction fusion_rename($origin, $target) {\n    if ($origin != \".\" && $origin != \"..\" && !is_dir($origin)) {\n        if (TRUE !== @rename($origin, $target)) {\n            copy($origin, $target);\n            unlink($origin);\n        }\n    }\n}\n\n\n/**\n * cURL method to get any contents for Apache that does not support SSL for remote paths\n *\n * @param $url\n *\n * @return bool|string\n */\nfunction fusion_get_contents($url) {\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    $data = curl_exec($ch);\n    curl_close($ch);\n    return $data;\n}\n\n/**\n * Checks whether a string is JSON or not\n *\n * @param $string\n *\n * @return bool\n */\nfunction isJson($string) {\n    json_decode($string);\n    return (json_last_error() == JSON_ERROR_NONE);\n}\n\n/**\n * Cached script loader\n * This function will cache the path that has been added and avoid duplicates.\n *\n * @param string $file_path     source file\n * @param string $file_type     script, css\n * @param bool   $html          return as html tags instead add to output handler\n * @param bool   $cached        false to invalidate browser's cache\n * @param bool   $show_warnings true to show error notices\n *\n * @return string\n */\nfunction fusion_load_script(string $file_path, $file_type = \"script\", $html = FALSE, $cached = TRUE, $show_warnings = FALSE): string {\n    static $paths = [];\n    // v10\n    if (function_exists(\"auto_file\")) {\n        $file_path = auto_file($file_path, $show_warnings);\n    } else {\n        $file_info = pathinfo($file_path);\n        try {\n            if (isset($file_info['dirname']) && isset($file_info['basename']) && isset($file_info['extension']) && isset($file_info['filename'])) {\n                $file = $file_info['dirname'].DIRECTORY_SEPARATOR.$file_info['basename'];\n                $min_file = $file_info['dirname'].DIRECTORY_SEPARATOR.$file_info['filename'].'.min.'.$file_info['extension'];\n                $return_file = $file;\n                if (file_exists($min_file) && !fusion_get_settings(\"devmode\")) {\n                    $return_file = $min_file;\n                }\n                $mtime = filemtime($return_file);\n                $file_path = $return_file.\"?v=\".$mtime;\n                if (!$cached) {\n                    $file_path = $return_file;\n                }\n            }\n\n        } catch (Exception $e) {\n            setError(E_COMPILE_ERROR, $e->getMessage(), $e->getFile(), $e->getLine());\n        }\n    }\n\n    if (empty($paths[$file_path])) {\n\n        $paths[$file_path] = $file_path;\n\n        if ($file_type == \"script\") {\n\n            $html_tag = \"<script src='$file_path'></script>\\n\";\n            if ($html === TRUE) {\n                return $html_tag;\n            }\n            add_to_footer($html_tag);\n\n        } else if ($file_type == \"css\") {\n            $html_tag = \"<link rel='stylesheet' href='$file_path' />\\n\";\n            if ($html === TRUE) {\n                return $html_tag;\n            }\n            add_to_head($html_tag);\n        }\n    }\n\n    return \"\";\n}\n", "<?php\n/*-------------------------------------------------------+\n| PHPFusion Content Management System\n| Copyright (C) PHP Fusion Inc\n| https://phpfusion.com/\n+--------------------------------------------------------+\n| Filename: poll_classes.php\n| Author: Core Development Team (coredevs@phpfusion.com)\n+--------------------------------------------------------+\n| This program is released as free software under the\n| Affero GPL license. You can redistribute it and/or\n| modify it under the terms of this license which you\n| can read by viewing the included agpl.txt or online\n| at www.gnu.org/licenses/agpl.html. Removal of this\n| copyright header is strictly prohibited without\n| written permission from the original author(s).\n+--------------------------------------------------------*/\n\nuse PHPFusion\\QuantumFields;\n\n/**\n * Class MemberPoll\n */\nclass MemberPoll {\n    private static $instance = NULL;\n    private static $locale = [];\n    private static $limit = 4;\n    private $data = [\n        'poll_id'         => 0,\n        'poll_title'      => '',\n        'poll_opt'        => ['', ''],\n        'poll_started'    => '',\n        'poll_ended'      => '',\n        'poll_visibility' => ''\n    ];\n\n    public function __construct() {\n        self::$locale = fusion_get_locale(\"\", POLLS_LOCALE);\n\n        $_GET['action'] = isset($_GET['action']) ? $_GET['action'] : '';\n\n        switch ($_GET['action']) {\n            case 'delete':\n                self::delete_poll($_GET['poll_id']);\n                break;\n            case 'poll_add':\n                self::start_poll($_GET['poll_id']);\n                break;\n            case 'poll_lock':\n                self::poll_lock($_GET['poll_id']);\n                break;\n            case 'poll_unlock':\n                self::poll_unlock($_GET['poll_id']);\n                break;\n            default:\n                break;\n        }\n\n        self::set_polldb();\n        if (defined('ADMIN_PANEL')) {\n            add_to_title(self::$locale['POLL_001']);\n            self::set_admin_polldb();\n        }\n    }\n\n    private static function delete_poll($id) {\n        if (self::verify_poll($id)) {\n            dbquery(\"DELETE FROM \".DB_POLLS.\" WHERE poll_id='\".intval($id).\"'\");\n            addNotice('success', self::$locale['POLL_007']);\n            redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n        }\n    }\n\n    static function verify_poll($id) {\n        if (isnum($id)) {\n            return dbcount(\"(poll_id)\", DB_POLLS, \"poll_id='\".intval($id).\"'\");\n        }\n\n        return FALSE;\n    }\n\n    private static function start_poll($id) {\n        if (self::verify_poll($id)) {\n            dbquery(\"UPDATE \".DB_POLLS.\" SET poll_started='\".time().\"' WHERE poll_id='\".intval($id).\"'\");\n            addNotice('success', self::$locale['POLL_008']);\n            redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n        }\n    }\n\n    private static function poll_lock($id) {\n        if (self::verify_poll($id)) {\n            dbquery(\"UPDATE \".DB_POLLS.\" SET poll_ended='\".time().\"' WHERE poll_id='\".intval($id).\"'\");\n\n            addNotice('success', self::$locale['POLL_009']);\n            redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n        }\n    }\n\n    private static function poll_unlock($id) {\n        if (self::verify_poll($id)) {\n            dbquery(\"UPDATE \".DB_POLLS.\" SET poll_ended='0' WHERE poll_id='\".intval($id).\"'\");\n\n            addNotice('success', self::$locale['POLL_010']);\n            redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n        }\n    }\n\n    private function set_polldb() {\n\n        $_poll_id = post(\"poll_id\", FILTER_VALIDATE_INT);\n\n        if (check_post(\"cast_vote\") && check_post(\"check\") && $_poll_id) {\n\n            $result = dbquery(\"SELECT v.vote_user, v.vote_id, v.vote_user_ip, v.vote_user_ip_type, p.poll_id, p.poll_opt, p.poll_started, p.poll_ended\n                FROM \".DB_POLLS.\" p\n                LEFT JOIN \".DB_POLL_VOTES.\" v ON p.poll_id = v.poll_id\n                WHERE \".groupaccess('poll_visibility').\" AND p.poll_id=:pid\n                ORDER BY v.vote_id\n            \", [\":pid\" => $_poll_id]);\n\n            $data = [];\n\n            while ($pdata = dbarray($result)) {\n                $voters[] = iMEMBER ? $pdata['vote_user'] : $pdata['vote_user_ip'];\n                $data = $pdata;\n            }\n\n            if ($data['poll_started'] < time() && (empty($data['poll_ended']) or ($data['poll_ended'] > time())) && (empty($voters) || !empty($data[\"poll_opt\"]))) {\n                $vote_save = [\n                    'vote_user'         => iMEMBER ? fusion_get_userdata('user_id') : 0,\n                    'vote_user_ip'      => USER_IP,\n                    'vote_user_ip_type' => USER_IP_TYPE,\n                    'vote_opt'          => sanitizer('check', 0, 'check'),\n                    'poll_id'           => $_poll_id\n                ];\n\n                if (fusion_safe()) {\n\n                    dbquery_insert(DB_POLL_VOTES, $vote_save, \"save\");\n                    addNotice('success', \"<i class='fa fa-check-square-o fa-lg m-r-10'></i>\".self::$locale['POLL_013']);\n                }\n\n            } else {\n                addNotice('warning', \"<i class='fa fa-close fa-lg m-r-10'></i>\".self::$locale['POLL_014']);\n            }\n\n            redirect(clean_request());\n        }\n    }\n\n    private function set_admin_polldb() {\n        if (check_post(\"save\")) {\n\n            $poll_opt = [];\n            $i = 0;\n            while ($i < post(\"opt_count\")) {\n                foreach (post([\"poll_opt_\".$i]) as $key => $value) {\n                    if ($value != '') {\n                        $poll_opt[$i][$key] = $value;\n                    }\n                }\n                $i++;\n            }\n            $poll_option = array_filter($poll_opt);\n            $_poll_id = (int)get(\"poll_id\", FILTER_VALIDATE_INT);\n\n            $this->data = [\n                'poll_id'         => $_poll_id,\n                'poll_title'      => sanitizer([\"poll_title\"], \"\", 'poll_title', TRUE),\n                'poll_opt'        => htmlspecialchars_decode(descript(serialize($poll_option))),\n                'poll_visibility' => form_sanitizer($_POST['poll_visibility'], 0, 'poll_visibility'),\n                'poll_started'    => form_sanitizer($_POST['poll_started'], 0, 'poll_started'),\n                'poll_ended'      => (isset($_POST['poll_ended']) ? form_sanitizer($_POST['poll_ended'], 0, 'poll_ended') : 0)\n            ];\n            if (fusion_safe()) {\n\n                addNotice(\"success\", $this->data['poll_id'] == 0 ? self::$locale['POLL_005'] : self::$locale['POLL_006']);\n                dbquery_insert(DB_POLLS, $this->data, ($this->data['poll_id'] == 0 ? \"save\" : \"update\"));\n                redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n            }\n\n            $this->data[\"poll_opt\"] = $poll_option;\n        }\n    }\n\n    public static function getInstance(): ?MemberPoll {\n        if (self::$instance === NULL) {\n            self::$instance = new static();\n        }\n\n        return self::$instance;\n    }\n\n    public function display_admin() {\n        add_breadcrumb(['link' => INFUSIONS.'member_poll_panel/poll_admin.php'.fusion_get_aidlink(), 'title' => self::$locale['POLL_001']]);\n\n        if (check_post(\"cancel\")) {\n            redirect(clean_request('section=poll', ['aid'], TRUE));\n        }\n\n        $allowed_section = [\"poll\", \"poll_vote\"];\n        $_GET['section'] = isset($_GET['section']) && in_array($_GET['section'], $allowed_section) ? $_GET['section'] : 'poll';\n        $edit = (isset($_GET['action']) && $_GET['action'] == 'edit') && isset($_GET['poll_id']);\n        $_GET['poll_id'] = isset($_GET['poll_id']) && isnum($_GET['poll_id']) ? $_GET['poll_id'] : 0;\n        if (isset($_GET['section']) && $_GET['section'] == 'poll_vote') {\n            add_breadcrumb(['link' => FUSION_REQUEST, 'title' => $edit ? self::$locale['POLL_042'] : self::$locale['POLL_043']]);\n        }\n\n        opentable(self::$locale['POLL_001']);\n        $master_tab_title['title'][] = self::$locale['POLL_001'];\n        $master_tab_title['id'][] = \"poll\";\n        $master_tab_title['icon'][] = \"fa fa-bar-chart\";\n        $master_tab_title['title'][] = $edit ? self::$locale['POLL_042'] : self::$locale['POLL_043'];\n        $master_tab_title['id'][] = \"poll_vote\";\n        $master_tab_title['icon'][] = $edit ? 'fa fa-pencil' : 'fa fa-plus';\n\n        echo opentab($master_tab_title, $_GET['section'], \"poll\", TRUE);\n        switch ($_GET['section']) {\n            case \"poll_vote\":\n                $this->poll_form();\n                break;\n            default:\n                $this->poll_listing();\n                break;\n        }\n        echo closetab();\n        closetable();\n    }\n\n    public function poll_form() {\n        fusion_confirm_exit();\n\n        $this->data['poll_started'] = time();\n\n        $_poll_id = get(\"poll_id\", FILTER_VALIDATE_INT);\n        if (get(\"action\") === \"edit\" && $_poll_id) {\n            if (self::verify_poll($_poll_id)) {\n                $this->data = $this->_selectFormPoll($_poll_id);\n\n                $this->data['poll_title'] = unserialize($this->data['poll_title']);\n                $this->data['poll_opt'] = unserialize($this->data['poll_opt']);\n            }\n        }\n\n        if (check_post(\"addoption\")) {\n\n            $this->data['poll_title'] = stripinput($_POST['poll_title']);\n            $this->data['poll_visibility'] = stripinput($_POST['poll_visibility']);\n            $i = 0;\n            while ($i < $_POST['opt_count']) {\n                $opt_field = \"poll_opt_\".$i;\n                $this->data['poll_opt'][$i] = \\defender::sanitize_array($_POST[$opt_field]);\n                $i++;\n            }\n            // Add new selection\n            $this->data['poll_opt'][$i] = '';\n        }\n\n        $opt_count = count($this->data['poll_opt']);\n        echo openform('addcat', 'post', FORM_REQUEST, ['class' => 'spacer-sm']);\n        echo \"<div class='clearfix spacer-sm'>\\n\";\n        echo form_button('addoption', self::$locale['POLL_050'], self::$locale['POLL_050'], [\n            'class'    => 'btn-primary m-r-10',\n            'inline'   => TRUE,\n            'icon'     => 'fa fa-plus',\n            'input_id' => 'button_1'\n\n        ]);\n        echo form_button('save', self::$locale['POLL_052'], self::$locale['POLL_052'], [\n            'class'    => 'btn-success m-r-10',\n            'inline'   => TRUE,\n            'icon'     => 'fa fa-hdd-o',\n            'input_id' => 'button_2'\n        ]);\n        echo form_button('cancel', self::$locale['cancel'], self::$locale['cancel'], ['input_id' => 'button_3']);\n        echo \"</div>\\n\";\n\n        echo form_hidden('poll_id', '', $this->data['poll_id']);\n        echo form_hidden('opt_count', '', $opt_count);\n        echo \"<div class='row'>\\n\";\n        echo \"<div class='col-xs-12 col-sm-6 col-md-8 col-lg-9'>\\n\";\n        echo QuantumFields::quantum_multilocale_fields('poll_title', self::$locale['POLL_045'], $this->data['poll_title'], [\n            'required' => TRUE, 'inline' => FALSE, 'placeholder' => self::$locale['POLL_069']]);\n\n        echo \"<div class='panel panel-default'>\\n\";\n        echo \"<div class='panel-body'>\\n\";\n        $i = 1;\n        foreach ($this->data['poll_opt'] as $im1 => $data1) {\n            $nam = \"poll_opt_$im1\";\n            echo QuantumFields::quantum_multilocale_fields($nam, self::$locale['POLL_046'].' '.$im1, $data1, [\n                'required' => TRUE, 'inline' => TRUE, 'placeholder' => self::$locale['POLL_070']\n            ]);\n            echo($i < $opt_count ? \"<hr/>\\n\" : '');\n            $i++;\n        }\n        echo \"</div>\\n</div>\\n\";\n\n        echo \"</div><div class='col-xs-12 col-sm-6 col-md-4 col-lg-3'>\\n\";\n        openside('');\n        echo form_select('poll_visibility', self::$locale['POLL_044'], $this->data['poll_visibility'], [\n            \"inline\"      => FALSE,\n            'width'       => '100%',\n            'inner_width' => '100%',\n            'options'     => fusion_get_groups()\n        ]);\n        echo form_datepicker('poll_started', self::$locale['POLL_048'], $this->data['poll_started'], ['inline' => FALSE]);\n        echo form_datepicker('poll_ended', self::$locale['POLL_049'], $this->data['poll_ended'], ['inline' => FALSE]);\n        closeside();\n        echo \"</div>\\n</div>\\n\";\n\n        echo form_button('addoption', self::$locale['POLL_050'], self::$locale['POLL_050'], [\n            'class'  => 'btn-primary m-r-10',\n            'inline' => TRUE,\n            'icon'   => 'fa fa-plus'\n        ]);\n\n        echo form_button('save', self::$locale['POLL_052'], self::$locale['POLL_052'], [\n            'class'  => 'btn-success m-r-10',\n            'inline' => TRUE,\n            'icon'   => 'fa fa-hdd-o'\n        ]);\n        echo form_button('cancel', self::$locale['cancel'], self::$locale['cancel']);\n        echo closeform();\n    }\n\n    public function _selectFormPoll($id) {\n        $result = dbquery(\"SELECT poll_id, poll_title, poll_opt, poll_started, poll_ended, poll_visibility\n            FROM \".DB_POLLS.\"\n            WHERE poll_id='\".intval($id).\"'\n        \");\n        $list = [];\n        if (dbrows($result) > 0) {\n            $list = dbarray($result);\n        }\n\n        return $list;\n    }\n\n    public function poll_listing() {\n        $aidlink = fusion_get_aidlink();\n        $total_rows = dbcount(\"(poll_id)\", DB_POLLS, groupaccess('poll_visibility'));\n        $rowstart = isset($_GET['rowstart']) && isnum($_GET['rowstart']) && ($_GET['rowstart'] <= $total_rows) ? $_GET['rowstart'] : 0;\n        $result = $this->_selectDB($rowstart);\n        $rows = dbrows($result);\n\n        echo \"<div class='clearfix'>\\n\";\n        echo \"<span class='pull-right m-t-10'>\".sprintf(self::$locale['POLL_011'], $rows, $total_rows).\"</span>\\n\";\n        echo \"</div>\\n\";\n\n        echo ($total_rows > $rows) ? makepagenav($rowstart, self::$limit, $total_rows, self::$limit, clean_request(\"\", [\"aid\", \"section\"], TRUE).\"&amp;\") : \"\";\n\n        if ($rows > 0) {\n            echo \"<div class='row m-t-20'>\\n\";\n            while ($data = dbarray($result)) {\n                $title = unserialize($data['poll_title']);\n                $poll_opt = unserialize($data['poll_opt']);\n                echo \"<div class='col-xs-12 col-sm-3'>\\n\";\n                echo \"<div class='panel panel-default'>\\n\";\n                echo \"<div class='panel-heading text-left'>\\n\";\n                foreach ($title as $key => $info) {\n                    echo \"<p class='m-b-0'>\".(!empty($info) ? translate_lang_names($key).\": \".$info : $info).\"</p>\\n\";\n                }\n                echo '<hr>';\n                echo \"<span>\".self::$locale['POLL_048'].\" \".showdate(\"shortdate\", $data['poll_started']).\"</span>\\n\";\n                echo \"<span class='badge'>\".self::$locale['POLL_064'].' '.($data['poll_started'] > time() ? self::$locale['POLL_065'] : (!empty($data['poll_ended']) && ($data['poll_ended'] < time()) ? self::$locale['POLL_024'] : self::$locale['POLL_067'])).\"</span>\\n\";\n                if (!empty($data['poll_ended']) && $data['poll_ended'] < time()) {\n                    echo \"<p>\".self::$locale['POLL_024'].\": \".showdate(\"shortdate\", $data['poll_ended']).\"</p>\\n\";\n                }\n                echo \"</div>\\n\";\n\n                echo \"<div class='panel-body'>\\n\";\n                $db_info = dbcount(\"(vote_opt)\", DB_POLL_VOTES, \"poll_id='\".$data['poll_id'].\"'\");\n                foreach ($poll_opt as $keys => $data1) {\n                    $text = \"\";\n                    foreach ($data1 as $key => $inf) {\n                        $text .= \"<p>\".(!empty($inf) ? translate_lang_names($key).\": \".$inf : $inf).\"</p>\\n\";\n                    }\n                    $num_votes = dbcount(\"(vote_opt)\", DB_POLL_VOTES, \"vote_opt='\".$keys.\"' AND poll_id='\".$data['poll_id'].\"'\");\n                    $opt_votes = ($num_votes ? number_format(($num_votes / $db_info) * 100, 0) : number_format(0 * 100, 0));\n                    echo progress_bar($opt_votes, $text);\n                    echo \"<p><strong>\".$opt_votes.\"% [\".(format_word($num_votes, self::$locale['POLL_040'])).\"]</strong></p>\\n\";\n                }\n                echo \"<p><strong>\".self::$locale['POLL_060'].' '.$db_info.\"</strong></p>\\n\";\n                echo \"</div>\\n\";\n\n                echo \"<div class='panel-footer'>\\n\";\n                echo \"<div class='dropdown'>\\n\";\n                echo \"<button id='ddp\".$data['poll_id'].\"' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false' class='btn btn-default dropdown-toggle btn-block' type='button'>\".self::$locale['POLL_021'].\" <span class='caret'></span></button>\\n\";\n                echo \"<ul class='dropdown-menu' aria-labelledby='ddp\".$data['poll_id'].\"'>\\n\";\n                echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll_vote&amp;action=edit&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-edit fa-fw'></i> \".self::$locale['edit'].\"</a></li>\\n\";\n                if ($data['poll_started'] > time()) {\n                    echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll&amp;action=poll_add&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-play fa-fw'></i> \".self::$locale['POLL_022'].\"</a></li>\\n\";\n                }\n                if (!empty($data['poll_ended']) && ($data['poll_ended'] < time())) {\n                    echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll&amp;action=poll_unlock&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-refresh fa-fw'></i> \".self::$locale['POLL_023'].\"</a></li>\\n\";\n                }\n                if ($data['poll_started'] < time() && empty($data['poll_ended']) or $data['poll_ended'] > time()) {\n                    echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll&amp;action=poll_lock&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-times fa-fw'></i> \".self::$locale['POLL_024'].\"</a></li>\\n\";\n                }\n                echo \"<li class='divider'></li>\\n\";\n                echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll_vote&amp;action=delete&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-trash fa-fw'></i> \".self::$locale['delete'].\"</a></li>\\n\";\n                echo \"</ul>\\n\";\n                echo \"</div>\\n\";\n                echo \"</div>\\n\";\n\n                echo \"</div>\\n\";\n                echo \"</div>\\n\"; // .col-xs-12\n            }\n            echo \"</div>\\n\";\n        } else {\n            echo \"<div class='well text-center'>\".self::$locale['POLL_012'].\"</div>\\n\";\n        }\n    }\n\n    public function _selectDB($rows) {\n        return dbquery(\"SELECT poll_id, poll_title, poll_opt, poll_started, poll_ended, poll_visibility\n            FROM \".DB_POLLS.\"\n            WHERE \".groupaccess('poll_visibility').\"\n            ORDER BY poll_id DESC\n            LIMIT \".intval($rows).\", \".self::$limit\n        );\n    }\n\n    public function DisplayPoll() {\n\n        $res = $this->_selectPoll();\n        if (!$res) {\n            return;\n        }\n\n        $poll_title = unserialize($res['poll_title']);\n        $poll_opt = unserialize($res['poll_opt']);\n        $data = [\n            'poll_id'         => $res['poll_id'],\n            'poll_title'      => !empty($poll_title[LANGUAGE]) ? $poll_title[LANGUAGE] : \"\",\n            'poll_started'    => $res['poll_started'],\n            'poll_ended'      => $res['poll_ended'],\n            'poll_visibility' => $res['poll_visibility'],\n        ];\n\n        for ($i = 0; $i < count($poll_opt); $i++) {\n            $data['poll_option'][$i] = !empty($poll_opt[$i][LANGUAGE]) ? $poll_opt[$i][LANGUAGE] : \"\";\n        }\n\n        $render = [];\n\n        if (!empty($data)) {\n            $data_user = checkgroup($data['poll_visibility']) && !empty($data['poll_title']) && ($data['poll_ended'] == 0 || $data['poll_ended'] > time()) ? $this->_selectVote(fusion_get_userdata((iMEMBER ? 'user_id' : 'user_ip')), $data['poll_id']) : TRUE;\n\n            if ($data_user == FALSE) {\n                $render['poll_table'][0]['max_vote'] = $this->_countVote(\"poll_id='\".$data['poll_id'].\"'\");\n                $render['poll_table'][0]['poll_title'] = $data['poll_title'];\n\n                foreach ($data['poll_option'] as $im1 => $data1) {\n                    $render['poll_table'][0]['poll_option'][] = form_checkbox('check', $data1, '-1', ['reverse_label' => TRUE, 'type' => 'radio', 'value' => $im1, 'input_id' => 'check-'.$im1]);\n                }\n\n                $render['poll_table'][0]['openform'] = openform('voteform', 'post', clean_request(), ['enctype' => TRUE]).form_hidden('poll_id', '', $data['poll_id']);\n                $render['poll_table'][0]['button'] = form_button(\"cast_vote\", self::$locale['POLL_020'], self::$locale['POLL_020'], ['class' => 'btn-primary']);\n                $render['poll_table'][0]['closeform'] = closeform();\n            } else {\n                if (!empty($data['poll_title']) && $data['poll_started'] < time()) {\n                    $render['poll_table'][0]['max_vote'] = $this->_countVote(\"poll_id='\".$data['poll_id'].\"'\");\n                    $render['poll_table'][0]['poll_title'] = $data['poll_title'];\n\n                    foreach ($data['poll_option'] as $im1 => $data1) {\n                        $num_votes = $this->_countVote(\"vote_opt='\".$im1.\"' AND poll_id='\".$data['poll_id'].\"'\");\n                        $opt_votes = ($num_votes ? number_format(($num_votes / $render['poll_table'][0]['max_vote']) * 100, 0) : number_format(0 * 100, 0));\n                        $render['poll_table'][0]['poll_option'][] = progress_bar($opt_votes, $data1);\n                        $render['poll_table'][0]['poll_option'][] = $opt_votes.\"% [\".format_word($num_votes, self::$locale['POLL_040']).\"]\";\n                    }\n\n                    $render['poll_table'][0]['poll_foot'][] = self::$locale['POLL_060'].\" \".$render['poll_table'][0]['max_vote'];\n                    $render['poll_table'][0]['poll_foot'][] = self::$locale['POLL_048'].\" \".showdate(\"shortdate\", $data['poll_started']);\n\n                    if ($data['poll_started'] < time() && (!empty($data['poll_ended']) && ($data['poll_ended'] < time()))) {\n                        $render['poll_table'][0]['poll_foot'][] = self::$locale['POLL_049'].\": \".showdate(\"shortdate\", $data['poll_ended']);\n                    }\n                }\n            }\n\n            $render['poll_tablename'] = self::$locale['POLL_001'];\n\n            if (dbcount(\"(poll_id)\", DB_POLLS, groupaccess('poll_visibility')) > 1) {\n                $render['poll_arch'] = \"<a class='btn btn-default btn-sm' href='\".INFUSIONS.\"member_poll_panel/polls_archive.php'>\".self::$locale['POLL_063'].\"</a>\";\n            }\n\n            render_poll($render);\n        }\n    }\n\n    public function _selectPoll() {\n        $result = dbquery(\"SELECT poll_id, poll_title, poll_opt, poll_started, poll_ended, poll_visibility\n            FROM \".DB_POLLS.\"\n            WHERE poll_id=COALESCE(\n                (\n                    SELECT poll_id\n                    FROM \".DB_POLLS.\"\n                    WHERE \".groupaccess('poll_visibility').\" AND poll_started < \".time().\" AND (poll_ended=0 OR poll_ended > \".time().\")\n                    ORDER BY poll_started DESC\n                    LIMIT 1\n                ),\n                (\n                    SELECT poll_id\n                    FROM \".DB_POLLS.\"\n                    WHERE \".groupaccess('poll_visibility').\" AND poll_started < \".time().\"\n                    ORDER BY poll_started DESC\n                    LIMIT 1\n                )\n            )\n        \");\n\n        if (dbrows($result)) {\n            return dbarray($result);\n        } else {\n            return NULL;\n        }\n    }\n\n    public function _selectVote($user, $pollid) {\n        $whr = iMEMBER ? \"vote_user='\".$user.\"'\" : \"vote_user_ip='\".USER_IP.\"'\";\n        $result = dbquery(\"SELECT vote_id, vote_user, vote_opt, vote_user_ip, poll_id\n            FROM \".DB_POLL_VOTES.\"\n            WHERE poll_id='\".$pollid.\"' AND \".$whr\n        );\n\n        if (!dbrows($result)) {\n            return FALSE;\n        } else {\n            return TRUE;\n        }\n    }\n\n    public function _countVote($opt) {\n        return dbcount(\"(vote_id)\", DB_POLL_VOTES, $opt);\n    }\n\n    public function PollArchive() {\n        opentable(self::$locale['POLL_002']);\n        add_to_title(self::$locale['POLL_002']);\n\n        $total_rows = dbcount(\"(poll_id)\", DB_POLLS, groupaccess('poll_visibility'));\n        $rowstart = isset($_GET['rowstart']) && isnum($_GET['rowstart']) && ($_GET['rowstart'] <= $total_rows) ? $_GET['rowstart'] : 0;\n        $result = $this->_selectDB($rowstart);\n        $rows = dbrows($result);\n\n        if ($rows > 0) {\n            echo \"<div class='row m-t-20'>\\n\";\n            while ($data = dbarray($result)) {\n                $title = unserialize($data['poll_title']);\n                $poll_opt = unserialize($data['poll_opt']);\n\n                echo \"<div class='col-xs-12 col-sm-3'>\\n\";\n                echo \"<div class='panel panel-default'>\\n\";\n                echo \"<div class='panel-heading text-left'>\\n\";\n                echo !empty($title[LANGUAGE]) ? $title[LANGUAGE] : \"\";\n                echo \"</div>\\n\";\n\n                echo \"<div class='panel-body'>\\n\";\n                $db_info = dbcount(\"(vote_opt)\", DB_POLL_VOTES, \"poll_id='\".$data['poll_id'].\"'\");\n\n                foreach ($poll_opt as $keys => $data1) {\n                    $text = !empty($data1[LANGUAGE]) ? $data1[LANGUAGE] : \"\";\n                    $num_votes = dbcount(\"(vote_opt)\", DB_POLL_VOTES, \"vote_opt='\".$keys.\"' AND poll_id='\".$data['poll_id'].\"'\");\n                    $opt_votes = ($num_votes ? number_format(($num_votes / $db_info) * 100, 0) : number_format(0 * 100, 0));\n                    echo progress_bar($opt_votes, $text);\n                    echo \"<p><strong>\".$opt_votes.\"% [\".format_word($num_votes, self::$locale['POLL_040']).\"]</strong></p>\\n\";\n                }\n                echo \"</div>\\n\";\n\n                echo \"<div class='panel-footer'>\\n\";\n                echo \"<p class='m-b-0'><strong>\".self::$locale['POLL_060'].' '.$db_info.\"</strong></p>\\n\";\n                echo \"<span>\".self::$locale['POLL_048'].\" \".showdate(\"shortdate\", $data['poll_started']).\"</span>\\n\";\n                echo \"<span class='badge'>\".self::$locale['POLL_064'].' '.($data['poll_started'] > time() ? self::$locale['POLL_065'] : (!empty($data['poll_ended']) && ($data['poll_ended'] < time()) ? self::$locale['POLL_024'] : self::$locale['POLL_067'])).\"</span>\\n\";\n\n                if (!empty($data['poll_ended']) && $data['poll_ended'] < time()) {\n                    echo \"<p>\".self::$locale['POLL_024'].\": \".showdate(\"shortdate\", $data['poll_ended']).\"</p>\\n\";\n                }\n\n                echo \"</div>\\n\";\n                echo \"</div>\\n\";\n                echo \"</div>\\n\"; // .col-xs-12\n            }\n            echo \"</div>\\n\";\n            echo ($total_rows > $rows) ? '<div class=\"text-center\">'.makepagenav($rowstart, self::$limit, $total_rows, self::$limit, INFUSIONS.\"member_poll_panel/polls_archive.php?\").'</div>' : \"\";\n        } else {\n            echo \"<div class='well text-center'>\".self::$locale['POLL_012'].\"</div>\\n\";\n        }\n        closetable();\n    }\n}\n"], "fixing_code": ["<?php\n/*-------------------------------------------------------+\n| PHPFusion Content Management System\n| Copyright (C) PHP Fusion Inc\n| https://phpfusion.com/\n+--------------------------------------------------------+\n| Filename: core_functions_include.php\n| Author: Core Development Team (coredevs@phpfusion.com)\n+--------------------------------------------------------+\n| This program is released as free software under the\n| Affero GPL license. You can redistribute it and/or\n| modify it under the terms of this license which you\n| can read by viewing the included agpl.txt or online\n| at www.gnu.org/licenses/agpl.html. Removal of this\n| copyright header is strictly prohibited without\n| written permission from the original author(s).\n+--------------------------------------------------------*/\n(defined('IN_FUSION') || exit);\n\nuse PHPFusion\\Authenticate;\nuse PHPFusion\\OutputHandler;\n\n/**\n * Get currency symbol by using a 3-letter ISO 4217 currency code\n * Note that if INTL pecl package is not installed, signs will degrade to ISO4217 code itself\n *\n * @param string $iso         3-letter ISO 4217\n * @param bool   $description set to false for just symbol\n *\n * @return null\n */\nfunction fusion_get_currency($iso = NULL, $description = TRUE) {\n    $locale = fusion_get_locale('', LOCALE.LOCALESET.\"currency.php\");\n\n    static $__currency = [];\n\n    if (empty($__currency)) {\n        // Euro Exceptions list\n        $currency_exceptions = [\n            \"ADF\" => \"EUR\",\n            \"ATS\" => \"EUR\",\n            \"BEF\" => \"EUR\",\n            \"CYP\" => \"EUR\",\n            \"DEM\" => \"EUR\",\n            \"EEK\" => \"EUR\",\n            \"ESP\" => \"EUR\",\n            \"FIM\" => \"EUR\",\n            \"FRF\" => \"EUR\",\n            \"GRD\" => \"EUR\",\n            \"IEP\" => \"EUR\",\n            \"ITL\" => \"EUR\",\n            \"KZT\" => \"EUR\",\n            \"LTL\" => \"EUR\",\n            \"LUF\" => \"EUR\",\n            \"LVL\" => \"EUR\",\n            \"MCF\" => \"EUR\",\n            \"MTL\" => \"EUR\",\n            \"NLG\" => \"EUR\",\n            \"PTE\" => \"EUR\",\n            \"RUB\" => \"EUR\",\n            \"SIT\" => \"EUR\",\n            \"SKK\" => \"EUR\",\n            \"SML\" => \"EUR\",\n            \"VAL\" => \"EUR\",\n            \"DDM\" => \"EUR\",\n            \"ESA\" => \"EUR\",\n            \"ESB\" => \"EUR\",\n        ];\n        foreach (array_keys($locale['currency']) as $country_iso) {\n            $c_iso = !empty($currency_exceptions[$country_iso]) ? $currency_exceptions[$country_iso] : $country_iso;\n            $c_symbol = (!empty($locale['currency_symbol'][$c_iso]) ? html_entity_decode($locale['currency_symbol'][$c_iso], ENT_QUOTES, $locale['charset']) : $c_iso);\n            $c_text = $locale['currency'][$c_iso];\n            $__currency[$country_iso] = $description ? $c_text.\" ($c_symbol)\" : $c_symbol;\n        }\n    }\n\n    return $iso === NULL ? $__currency : (isset($__currency[$iso]) ? $__currency[$iso] : NULL);\n}\n\n/**\n * Check if a given theme exists and is valid\n *\n * @param string $theme\n *\n * @return bool\n */\nfunction theme_exists($theme) {\n    if ($theme == \"Default\") {\n        $theme = fusion_get_settings('theme');\n    }\n\n    return is_string($theme) and preg_match(\"/^([a-z0-9_-]){2,50}$/i\",\n            $theme) and file_exists(THEMES.$theme.\"/theme.php\") and file_exists(THEMES.$theme.\"/styles.css\");\n}\n\n/**\n * Set a valid theme\n *\n * @param string $theme\n */\nfunction set_theme($theme) {\n    $locale = fusion_get_locale();\n    if (defined(\"THEME\")) {\n        return;\n    }\n    if (theme_exists($theme)) {\n        define(\"THEME\", THEMES.($theme == \"Default\" ? fusion_get_settings('theme') : $theme).\"/\");\n\n        return;\n    }\n    foreach (new GlobIterator(THEMES.'*') as $dir) {\n        if ($dir->isDir() and theme_exists($dir->getBasename())) {\n            define(\"THEME\", $dir->getPathname().\"/\");\n\n            return;\n        }\n    }\n    // Don't stop if we are in admin panel since we use different themes now\n    $no_theme_message = str_replace(\"[SITE_EMAIL]\", fusion_get_settings(\"siteemail\"), $locale['global_301']);\n\n    if (preg_match(\"/\\/administration\\//i\", $_SERVER['PHP_SELF'])) {\n\n        addNotice('danger', \"<strong>\".$theme.\" - \".$locale['global_300'].\".</strong><br /><br />\\n\".$no_theme_message);\n\n    } else {\n\n        echo \"<strong>\".$theme.\" - \".$locale['global_300'].\".</strong><br /><br />\\n\";\n\n        echo $no_theme_message;\n\n        die();\n\n    }\n}\n\n/**\n * Set the admin password when needed\n *\n * @param string $password\n *\n * @return bool\n */\nfunction set_admin_pass($password) {\n    return Authenticate::setAdminCookie($password);\n}\n\n/**\n * Check if admin password matches userdata\n *\n * @param string $password\n *\n * @return bool\n */\nfunction check_admin_pass($password) {\n    return Authenticate::validateAuthAdmin($password);\n}\n\n/**\n * Redirect browser using header or script function\n *\n * @param string $location Desintation URL\n * @param bool   $delay    meta refresh delay\n * @param bool   $script   true if you want to redirect via javascript\n * @param int    $code\n */\nfunction redirect($location, $delay = FALSE, $script = FALSE, $code = 200) {\n    //define('STOP_REDIRECT', true);\n    //$location = fusion_get_settings('site_seo') && defined('IN_PERMALINK') ? FUSION_ROOT.$location : $location;\n    if (!defined('STOP_REDIRECT')) {\n        if (isnum($delay)) {\n            $ref = \"<meta http-equiv='refresh' content='$delay; url=\".$location.\"' />\";\n            add_to_head($ref);\n        } else {\n            if ($script == FALSE && !headers_sent()) {\n                set_status_header($code);\n                header(\"Location: \".str_replace(\"&amp;\", \"&\", $location));\n                exit;\n            } else {\n                echo \"<script type='text/javascript'>document.location.href='\".str_replace(\"&amp;\", \"&\", $location).\"'</script>\\n\";\n                exit;\n            }\n        }\n    }\n    //elseif (fusion_get_settings(\"devmode\")) {\n    //    debug_print_backtrace();\n    //    echo \"redirected to \".$location;\n    //}\n}\n\n/**\n * Set HTTP status header\n *\n * @param int $code status header code\n *\n * @return bool whether header was sent\n */\nfunction set_status_header($code = 200) {\n    if (headers_sent()) {\n        return FALSE;\n    }\n\n    $protocol = $_SERVER['SERVER_PROTOCOL'];\n\n    if ('HTTP/1.1' != $protocol && 'HTTP/1.0' != $protocol) {\n        $protocol = 'HTTP/1.0';\n    }\n\n    $desc = [\n        100 => 'Continue',\n        101 => 'Switching Protocols',\n        102 => 'Processing',\n        200 => 'OK',\n        201 => 'Created',\n        202 => 'Accepted',\n        203 => 'Non-Authoritative Information',\n        204 => 'No Content',\n        205 => 'Reset Content',\n        206 => 'Partial Content',\n        207 => 'Multi-Status',\n        226 => 'IM Used',\n        300 => 'Multiple Choices',\n        301 => 'Moved Permanently',\n        302 => 'Found',\n        303 => 'See Other',\n        304 => 'Not Modified',\n        305 => 'Use Proxy',\n        306 => 'Reserved',\n        307 => 'Temporary Redirect',\n        400 => 'Bad Request',\n        401 => 'Unauthorized',\n        402 => 'Payment Required',\n        403 => 'Forbidden',\n        404 => 'Not Found',\n        405 => 'Method Not Allowed',\n        406 => 'Not Acceptable',\n        407 => 'Proxy Authentication Required',\n        408 => 'Request Timeout',\n        409 => 'Conflict',\n        410 => 'Gone',\n        411 => 'Length Required',\n        412 => 'Precondition Failed',\n        413 => 'Request Entity Too Large',\n        414 => 'Request-URI Too Long',\n        415 => 'Unsupported Media Type',\n        416 => 'Requested Range Not Satisfiable',\n        417 => 'Expectation Failed',\n        422 => 'Unprocessable Entity',\n        423 => 'Locked',\n        424 => 'Failed Dependency',\n        426 => 'Upgrade Required',\n        500 => 'Internal Server Error',\n        501 => 'Not Implemented',\n        502 => 'Bad Gateway',\n        503 => 'Service Unavailable',\n        504 => 'Gateway Timeout',\n        505 => 'HTTP Version Not Supported',\n        506 => 'Variant Also Negotiates',\n        507 => 'Insufficient Storage',\n        510 => 'Not Extended'\n    ];\n\n    $desc = isset($desc[$code]) ? $desc[$code] : '';\n\n    header(\"$protocol $code $desc\");\n\n    return TRUE;\n}\n\n/**\n * Get HTTP response code\n *\n * @param $url\n *\n * @return false|string\n */\nfunction get_http_response_code($url) {\n    stream_context_set_default([\n        'ssl' => [\n            'verify_peer'      => FALSE,\n            'verify_peer_name' => FALSE\n        ],\n    ]);\n\n    $headers = get_headers($url);\n    return substr($headers[0], 9, 3);\n}\n\n/**\n * Clean URL Function, prevents entities in server globals\n *\n * @param string $url\n *\n * @return string\n */\nfunction cleanurl($url) {\n    $bad_entities = [\"&\", \"\\\"\", \"'\", '\\\"', \"\\'\", \"<\", \">\", \"\", \"\", \"*\"];\n    $safe_entities = [\"&amp;\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\n\n    return str_replace($bad_entities, $safe_entities, $url);\n}\n\n/**\n * Strip Input Function, prevents HTML in unwanted places\n *\n * @param mixed $text\n *\n * @return mixed\n */\nfunction stripinput($text) {\n    if (!is_array($text)) {\n        return str_replace('\\\\', '&#092;', htmlspecialchars(stripslash(trim($text)), ENT_QUOTES));\n    }\n    foreach ($text as $i => $item) {\n        $text[$i] = stripinput($item);\n    }\n\n    return $text;\n}\n\n/**\n * Prevent any possible XSS attacks via $_GET\n *\n * @param string $check_url\n *\n * @return bool True if the URL is not secure\n */\nfunction stripget($check_url) {\n    if (is_array($check_url)) {\n        foreach ($check_url as $value) {\n            if (stripget($value) == TRUE) {\n                return TRUE;\n            }\n        }\n    } else {\n        $check_url = str_replace([\"\\\"\", \"\\'\"], [\"\", \"\"], urldecode($check_url));\n        if (preg_match(\"/<[^<>]+>/i\", $check_url)) {\n            return TRUE;\n        }\n    }\n    return FALSE;\n}\n\n/**\n * Strip file name\n *\n * @param string $filename\n *\n * @return string\n */\nfunction stripfilename($filename) {\n    $patterns = [\n        '/\\s+/'              => '_',\n        '/[^a-z0-9_-]|^\\W/i' => '',\n        '/([_-])\\1+/'        => '$1'\n    ];\n\n    return preg_replace(array_keys($patterns), $patterns, strtolower($filename)) ?: (string)time();\n}\n\n/**\n * Strip Slash Function, only stripslashes if magic_quotes_gpc is on\n *\n * @param string $text\n *\n * @return string\n */\nfunction stripslash($text) {\n    if (QUOTES_GPC) {\n        $text = stripslashes($text);\n    }\n\n    return $text;\n}\n\n/**\n * Add Slash Function, add correct number of slashes depending on quotes_gpc\n *\n * @param string $text\n *\n * @return string\n */\nfunction addslash($text) {\n    if (!QUOTES_GPC) {\n        $text = addslashes(addslashes($text));\n    } else {\n        $text = addslashes($text);\n    }\n\n    return $text;\n}\n\n/**\n * htmlentities is too agressive so we use this function\n *\n * @param string $text\n *\n * @return string\n */\nfunction phpentities($text) {\n    return str_replace('\\\\', '&#092;', htmlspecialchars($text, ENT_QUOTES));\n}\n\n/**\n * Trim a line of text to a preferred length\n *\n * @param string $text\n * @param int    $length\n *\n * @return string\n */\nfunction trimlink($text, $length) {\n    if (strlen($text) > $length) {\n        if (function_exists('mb_substr')) {\n            $text = mb_substr($text, 0, ($length - 3), 'UTF-8').\"...\";\n        } else {\n            $text = substr($text, 0, ($length - 3)).\"...\";\n        }\n    }\n\n    return $text;\n}\n\n/**\n * Trim a text to a number of words\n *\n * @param string $text\n * @param int    $limit  The number of words\n * @param string $suffix If $text is longer than $limit, $suffix will be appended.\n *                       Tip: You can pass an html link to the full content.\n *\n * @return string\n */\nfunction fusion_first_words($text, $limit, $suffix = '&hellip;') {\n    $text = preg_replace('/[\\r\\n]+/', '', $text);\n    return preg_replace('~^(\\s*\\w+'.str_repeat('\\W+\\w+', $limit - 1).'(?(?=[?!:;.])\n                [[:punct:]]\\s*\n        ))\\b(.+)$~isxu', '$1'.$suffix, strip_tags($text));\n}\n\n/**\n * Pure trim function\n *\n * @param string $str\n * @param int    $length\n *\n * @return string\n */\nfunction trim_text($str, $length = 300) {\n    for ($i = $length; $i <= strlen($str); $i++) {\n        $spacetest = substr(\"$str\", $i, 1);\n        if ($spacetest == \" \") {\n            $spaceok = substr(\"$str\", 0, $i);\n\n            return ($spaceok.\"...\");\n            break;\n        }\n    }\n\n    return ($str);\n}\n\n/**\n * Replaces special characters in a string with their \"non-special\" counterpart.\n *\n * @param $value\n *\n * @return string\n */\nfunction normalize($value) {\n    $table = [\n        '&amp;' => 'and', '@' => 'at', '\u00a9' => 'c', '\u00ae' => 'r', '\u00c0' => 'a', '(' => '', ')' => '', '.' => '',\n        '\u00c1'     => 'a', '\u00c2' => 'a', '\u00c4' => 'a', '\u00c5' => 'a', '\u00c6' => 'ae', '\u00c7' => 'c',\n        '\u00c8'     => 'e', '\u00c9' => 'e', '\u00cb' => 'e', '\u00cc' => 'i', '\u00cd' => 'i', '\u00ce' => 'i',\n        '\u00cf'     => 'i', '\u00d2' => 'o', '\u00d3' => 'o', '\u00d4' => 'o', '\u00d5' => 'o', '\u00d6' => 'o',\n        '\u00d8'     => 'o', '\u00d9' => 'u', '\u00da' => 'u', '\u00db' => 'u', '\u00dc' => 'u', '\u00dd' => 'y',\n        '\u00df'     => 'ss', '\u00e0' => 'a', '\u00e1' => 'a', '\u00e2' => 'a', '\u00e4' => 'a', '\u00e5' => 'a',\n        '\u00e6'     => 'ae', '\u00e7' => 'c', '\u00e8' => 'e', '\u00e9' => 'e', '\u00ea' => 'e', '\u00eb' => 'e',\n        '\u00ec'     => 'i', '\u00ed' => 'i', '\u00ee' => 'i', '\u00ef' => 'i', '\u00f2' => 'o', '\u00f3' => 'o',\n        '\u00f4'     => 'o', '\u00f5' => 'o', '\u00f6' => 'o', '\u00f8' => 'o', '\u00f9' => 'u', '\u00fa' => 'u',\n        '\u00fb'     => 'u', '\u00fc' => 'u', '\u00fd' => 'y', '\u00fe' => 'p', '\u00ff' => 'y', '\u0100' => 'a',\n        '\u0101'     => 'a', '\u0102' => 'a', '\u0103' => 'a', '\u0104' => 'a', '\u0105' => 'a', '\u0106' => 'c',\n        '\u0107'     => 'c', '\u0108' => 'c', '\u0109' => 'c', '\u010a' => 'c', '\u010b' => 'c', '\u010c' => 'c',\n        '\u010d'     => 'c', '\u010e' => 'd', '\u010f' => 'd', '\u0110' => 'd', '\u0111' => 'd', '\u0112' => 'e',\n        '\u0113'     => 'e', '\u0114' => 'e', '\u0115' => 'e', '\u0116' => 'e', '\u0117' => 'e', '\u0118' => 'e',\n        '\u0119'     => 'e', '\u011a' => 'e', '\u011b' => 'e', '\u011c' => 'g', '\u011d' => 'g', '\u011e' => 'g',\n        '\u011f'     => 'g', '\u0120' => 'g', '\u0121' => 'g', '\u0122' => 'g', '\u0123' => 'g', '\u0124' => 'h',\n        '\u0125'     => 'h', '\u0126' => 'h', '\u0127' => 'h', '\u0128' => 'i', '\u0129' => 'i', '\u012a' => 'i',\n        '\u012b'     => 'i', '\u012c' => 'i', '\u012d' => 'i', '\u012e' => 'i', '\u012f' => 'i', '\u0130' => 'i',\n        '\u0131'     => 'i', '\u0132' => 'ij', '\u0133' => 'ij', '\u0134' => 'j', '\u0135' => 'j', '\u0136' => 'k',\n        '\u0137'     => 'k', '\u0138' => 'k', '\u0139' => 'l', '\u013a' => 'l', '\u013b' => 'l', '\u013c' => 'l',\n        '\u013d'     => 'l', '\u013e' => 'l', '\u013f' => 'l', '\u0140' => 'l', '\u0141' => 'l', '\u0142' => 'l',\n        '\u0143'     => 'n', '\u0144' => 'n', '\u0145' => 'n', '\u0146' => 'n', '\u0147' => 'n', '\u0148' => 'n',\n        '\u0149'     => 'n', '\u014a' => 'n', '\u014b' => 'n', '\u014c' => 'o', '\u014d' => 'o', '\u014e' => 'o',\n        '\u014f'     => 'o', '\u0150' => 'o', '\u0151' => 'o', '\u0152' => 'oe', '\u0153' => 'oe', '\u0154' => 'r',\n        '\u0155'     => 'r', '\u0156' => 'r', '\u0157' => 'r', '\u0158' => 'r', '\u0159' => 'r', '\u015a' => 's',\n        '\u015b'     => 's', '\u015c' => 's', '\u015d' => 's', '\u015e' => 's', '\u015f' => 's', '\u0160' => 's',\n        '\u0161'     => 's', '\u0162' => 't', '\u0163' => 't', '\u0164' => 't', '\u0165' => 't', '\u0166' => 't',\n        '\u0167'     => 't', '\u0168' => 'u', '\u0169' => 'u', '\u016a' => 'u', '\u016b' => 'u', '\u016c' => 'u',\n        '\u016d'     => 'u', '\u016e' => 'u', '\u016f' => 'u', '\u0170' => 'u', '\u0171' => 'u', '\u0172' => 'u',\n        '\u0173'     => 'u', '\u0174' => 'w', '\u0175' => 'w', '\u0176' => 'y', '\u0177' => 'y', '\u0178' => 'y',\n        '\u0179'     => 'z', '\u017a' => 'z', '\u017b' => 'z', '\u017c' => 'z', '\u017d' => 'z', '\u017e' => 'z',\n        '\u017f'     => 'z', '\u018f' => 'e', '\u0192' => 'f', '\u01a0' => 'o', '\u01a1' => 'o', '\u01af' => 'u',\n        '\u01b0'     => 'u', '\u01cd' => 'a', '\u01ce' => 'a', '\u01cf' => 'i', '\u01d0' => 'i', '\u01d1' => 'o',\n        '\u01d2'     => 'o', '\u01d3' => 'u', '\u01d4' => 'u', '\u01d5' => 'u', '\u01d6' => 'u', '\u01d7' => 'u',\n        '\u01d8'     => 'u', '\u01d9' => 'u', '\u01da' => 'u', '\u01db' => 'u', '\u01dc' => 'u', '\u01fa' => 'a',\n        '\u01fb'     => 'a', '\u01fc' => 'ae', '\u01fd' => 'ae', '\u01fe' => 'o', '\u01ff' => 'o', '\u0259' => 'e',\n        '\u0401'     => 'jo', '\u0404' => 'e', '\u0406' => 'i', '\u0407' => 'i', '\u0410' => 'a', '\u0411' => 'b',\n        '\u0412'     => 'v', '\u0413' => 'g', '\u0414' => 'd', '\u0415' => 'e', '\u0416' => 'zh', '\u0417' => 'z',\n        '\u0418'     => 'i', '\u0419' => 'j', '\u041a' => 'k', '\u041b' => 'l', '\u041c' => 'm', '\u041d' => 'n',\n        '\u041e'     => 'o', '\u041f' => 'p', '\u0420' => 'r', '\u0421' => 's', '\u0422' => 't', '\u0423' => 'u',\n        '\u0424'     => 'f', '\u0425' => 'h', '\u0426' => 'c', '\u0427' => 'ch', '\u0428' => 'sh', '\u0429' => 'sch',\n        '\u042a'     => '-', '\u042b' => 'y', '\u042c' => '-', '\u042d' => 'je', '\u042e' => 'ju', '\u042f' => 'ja',\n        '\u0430'     => 'a', '\u0431' => 'b', '\u0432' => 'v', '\u0433' => 'g', '\u0434' => 'd', '\u0435' => 'e',\n        '\u0436'     => 'zh', '\u0437' => 'z', '\u0438' => 'i', '\u0439' => 'j', '\u043a' => 'k', '\u043b' => 'l',\n        '\u043c'     => 'm', '\u043d' => 'n', '\u043e' => 'o', '\u043f' => 'p', '\u0440' => 'r', '\u0441' => 's',\n        '\u0442'     => 't', '\u0443' => 'u', '\u0444' => 'f', '\u0445' => 'h', '\u0446' => 'c', '\u0447' => 'ch',\n        '\u0448'     => 'sh', '\u0449' => 'sch', '\u044a' => '-', '\u044b' => 'y', '\u044c' => '-', '\u044d' => 'je',\n        '\u044e'     => 'ju', '\u044f' => 'ja', '\u0451' => 'jo', '\u0454' => 'e', '\u0456' => 'i', '\u0457' => 'i',\n        '\u0490'     => 'g', '\u0491' => 'g', '\u05d0' => 'a', '\u05d1' => 'b', '\u05d2' => 'g', '\u05d3' => 'd',\n        '\u05d4'     => 'h', '\u05d5' => 'v', '\u05d6' => 'z', '\u05d7' => 'h', '\u05d8' => 't', '\u05d9' => 'i',\n        '\u05da'     => 'k', '\u05db' => 'k', '\u05dc' => 'l', '\u05dd' => 'm', '\u05de' => 'm', '\u05df' => 'n',\n        '\u05e0'     => 'n', '\u05e1' => 's', '\u05e2' => 'e', '\u05e3' => 'p', '\u05e4' => 'p', '\u05e5' => 'C',\n        '\u05e6'     => 'c', '\u05e7' => 'q', '\u05e8' => 'r', '\u05e9' => 'w', '\u05ea' => 't', '\u2122' => 'tm',\n        '\u0621'     => 'a', '\u0627' => 'a', '\u0622' => 'a', '\u0628' => 'b', '\u067e' => 'p', '\u062a' => 't',\n        '\u062b'     => 's', '\u062c' => 'j', '\u0686' => 'ch', '\u062d' => 'h', '\u062e' => 'kh', '\u062f' => 'd',\n        '\u0631'     => 'r', '\u0632' => 'z', '\u0698' => 'zh', '\u0633' => 's', '\u0635' => 's', '\u0636' => 'z',\n        '\u0637'     => 't', '\u0638' => 'z', '\u063a' => 'gh', '\u0641' => 'f', '\u0642' => 'q', '\u06a9' => 'k',\n        '\u06af'     => 'g', '\u0644' => 'l', '\u0645' => 'm', '\u0646' => 'n', '\u0648' => 'w', '\u0647' => 'h', '\u06cc' => 'y ',\n    ];\n\n    return (string)strtr($value, $table);\n}\n\n/**\n * Generate random string numbers\n *\n * @param int     $length\n * @param boolean $alpha_only\n *\n * @return string\n */\nfunction random_string($length = 6, $alpha_only = FALSE) {\n    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    if ($alpha_only) {\n        $characters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n    $charactersLength = strlen($characters);\n    $randomString = '';\n    for ($i = 0; $i < $length; $i++) {\n        $randomString .= $characters[rand(0, $charactersLength - 1)];\n    }\n    return (string)$randomString;\n}\n\n/**\n * Validate numeric input\n *\n * @param      $value\n * @param bool $decimal\n * @param bool $negative\n *\n * @return bool\n */\nfunction isnum($value, $decimal = FALSE, $negative = FALSE) {\n    if ($negative == TRUE) {\n        return is_numeric($value);\n    } else {\n        $float = $decimal ? '(.{0,1})[0-9]*' : '';\n        return !is_array($value) and preg_match(\"/^[0-9]+\".$float.\"$/\", $value);\n    }\n}\n\n/**\n * Custom preg-match function\n *\n * @param string $expression\n * @param mixed  $value\n *\n * @return bool FALSE when $value is an array\n */\nfunction preg_check($expression, $value) {\n    return !is_array($value) and preg_match($expression, $value);\n}\n\n/**\n * Generate a clean Request URI\n *\n * @param mixed $request_addition 'page=1&ref=2' or array('page' => 1, 'ref' => 2)\n * @param array $filter_array     array('aid','page', ref')\n * @param bool  $keep_filtered    true to keep filter, false to remove filter from FUSION_REQUEST\n *                                If remove is true, to remove everything and keep $requests_array and $request\n *                                addition. If remove is false, to keep everything else except $requests_array\n *\n * @return string\n */\nfunction clean_request($request_addition = '', $filter_array = [], $keep_filtered = TRUE) {\n\n    $fusion_query = [];\n\n    if (fusion_get_settings(\"site_seo\") && defined('IN_PERMALINK') && !isset($_GET['aid'])) {\n        global $filepath;\n\n        $url['path'] = $filepath;\n        if (!empty($_GET)) {\n            $fusion_query = $_GET;\n        }\n    } else {\n\n        $url = ((array)parse_url(htmlspecialchars_decode($_SERVER['REQUEST_URI']))) + [\n                'path'  => '',\n                'query' => ''\n            ];\n\n        if ($url['query']) {\n            parse_str($url['query'], $fusion_query); // this is original.\n        }\n    }\n\n    if ($keep_filtered) {\n        $fusion_query = array_intersect_key($fusion_query, array_flip($filter_array));\n    } else {\n        $fusion_query = array_diff_key($fusion_query, array_flip($filter_array));\n    }\n\n    if ($request_addition) {\n\n        $request_addition_array = [];\n\n        if (is_array($request_addition)) {\n            $fusion_query = $fusion_query + $request_addition;\n        } else {\n            parse_str($request_addition, $request_addition_array);\n            $fusion_query = $fusion_query + $request_addition_array;\n        }\n    }\n\n    $prefix = $fusion_query ? '?' : '';\n    $query = $url['path'].$prefix.http_build_query($fusion_query, 'flags_', '&amp;');\n\n    return (string)$query;\n}\n\n/**\n * Cache smileys mysql\n *\n * @return array\n */\nfunction cache_smileys() {\n    return \\PHPFusion\\ImageRepo::cache_smileys();\n}\n\n/**\n * Parse smiley bbcode\n *\n * @param string $message\n *\n * @return string\n */\nfunction parsesmileys($message) {\n    if (!preg_match(\"#(\\[code\\](.*?)\\[/code\\]|\\[geshi=(.*?)\\](.*?)\\[/geshi\\]|\\[php\\](.*?)\\[/php\\])#si\", $message)) {\n        foreach (cache_smileys() as $smiley) {\n            $smiley_code = preg_quote($smiley['smiley_code'], '#');\n            $smiley_image = get_image(\"smiley_\".$smiley['smiley_text']);\n            $smiley_image = \"<img style='width:20px;height:20px;' src='$smiley_image' alt='\".$smiley['smiley_text'].\"' style='vertical-align:middle;' />\";\n            $message = preg_replace(\"#{$smiley_code}#s\", $smiley_image, $message);\n        }\n    }\n    return $message;\n}\n\n/**\n * Show smiley icons in comments, forum and other post pages\n *\n * @param string $textarea The name of the textarea\n * @param string $form     The name of the form\n *\n * @return string\n */\nfunction displaysmileys($textarea, $form = \"inputform\") {\n    $smileys = \"\";\n    $i = 0;\n    foreach (cache_smileys() as $smiley) {\n        if ($i != 0 && ($i % 10 == 0)) {\n            $smileys .= \"<br />\\n\";\n        }\n        $i++;\n        $img = get_image(\"smiley_\".$smiley['smiley_text']);\n        $smileys .= \"<img style='width:20px;height:20px;' src='\".$img.\"' alt='\".$smiley['smiley_text'].\"' title='\".$smiley['smiley_text'].\"' onclick=\\\"insertText('\".$textarea.\"', '\".$smiley['smiley_code'].\"', '\".$form.\"');\\\" />\\n\";\n    }\n    return $smileys;\n}\n\n/**\n * Tag a user by simply just posting his name like @Chan and if found, returns a tooltip.\n *\n * @param string $user_name @Chan\n * @param string $tooltip   ($userdata['user_lastvisit']-120 < TIME ? 'Onlin' : 'Offline')\n *\n * @return string\n */\nfunction fusion_parse_user($user_name, $tooltip = \"\") {\n    $user_regex = '@[-0-9A-Z_\\.]{1,50}';\n    return preg_replace_callback(\"#$user_regex#im\", function ($user_name) use ($tooltip) {\n        return render_user_tags($user_name, $tooltip);\n    }, $user_name);\n}\n\n/**\n * Cache all installed bbcodes\n *\n * @return array\n */\nfunction cache_bbcode() {\n    static $bbcode_cache = [];\n    if (empty($bbcode_cache)) {\n        $bbcode_cache = [];\n        $result = dbquery(\"SELECT bbcode_name FROM \".DB_BBCODES.\" ORDER BY bbcode_order ASC\");\n        while ($data = dbarray($result)) {\n            $bbcode_cache[] = $data['bbcode_name'];\n        }\n    }\n\n    return (array)$bbcode_cache;\n}\n\n/**\n * Parse and force image/ to IMAGES directory\n * Neutralize all image dir levels and convert image to pf image folder\n *\n * @param string $data\n * @param string $prefix_\n *\n * @return string\n */\nfunction parse_imageDir($data, $prefix_ = \"\") {\n    $str = str_replace(\"../\", \"\", $data);\n\n    return (string)$prefix_ ? str_replace(\"images/\", $prefix_, $str) : str_replace(\"images/\", IMAGES, $str);\n}\n\n/**\n * Interpret output to match input of textarea having both bbcode, html and tinymce buttons\n *\n * @param string $value\n * @param bool   $parse_smileys\n * @param bool   $parse_bbcode\n * @param bool   $decode\n * @param string $default_image_folder\n * @param bool   $add_line_breaks\n * @param bool   $descript\n *\n * @return string\n */\nfunction parse_textarea($value, $parse_smileys = TRUE, $parse_bbcode = TRUE, $decode = TRUE, $default_image_folder = IMAGES, $add_line_breaks = FALSE, $descript = TRUE) {\n    $charset = fusion_get_locale(\"charset\");\n    $value = stripslashes($value);\n    if ($descript === TRUE) {\n        $value = descript($value);\n        $value = htmlspecialchars_decode($value);\n    }\n    if ($default_image_folder) {\n        $value = parse_imageDir($value, $default_image_folder);\n    }\n    if ($parse_bbcode) {\n        $value = parseubb($value);\n    }\n    if ($parse_smileys) {\n        $value = parsesmileys($value);\n    }\n    $value = fusion_parse_user($value);\n    if ($add_line_breaks === TRUE) {\n        $value = nl2br($value);\n    }\n    if ($decode === TRUE) {\n        $value = html_entity_decode(html_entity_decode($value, ENT_QUOTES, $charset));\n        $value = encode_code($value);\n    }\n\n    return (string)$value;\n}\n\n/**\n * Parse bbcode\n *\n * @param string $text\n * @param string $selected The names of the required bbcodes to parse, separated by \"|\"\n * @param bool   $descript\n *\n * @return string\n */\nfunction parseubb($text, $selected = \"\", $descript = TRUE) {\n    if ($descript) {\n        $text = descript($text, FALSE);\n    }\n\n    $bbcode_cache = cache_bbcode();\n    $sel_bbcodes = [];\n\n    if ($selected) {\n        $sel_bbcodes = explode(\"|\", $selected);\n    }\n    foreach ($bbcode_cache as $bbcode) {\n        $locale_file = '';\n        if (file_exists(LOCALE.LOCALESET.\"bbcodes/\".$bbcode.\".php\")) {\n            $locale_file = LOCALE.LOCALESET.\"bbcodes/\".$bbcode.\".php\";\n        } else if (file_exists(LOCALE.\"English/bbcodes/\".$bbcode.\".php\")) {\n            $locale_file = LOCALE.\"English/bbcodes/\".$bbcode.\".php\";\n        }\n        if ($locale_file) {\n            \\PHPFusion\\Locale::setLocale($locale_file);\n        }\n    }\n\n    $locale = fusion_get_locale();\n\n    foreach ($bbcode_cache as $bbcode) {\n        if ($selected && in_array($bbcode, $sel_bbcodes)) {\n            if (file_exists(INCLUDES.\"bbcodes/\".$bbcode.\"_bbcode_include.php\")) {\n                include(INCLUDES.\"bbcodes/\".$bbcode.\"_bbcode_include.php\");\n            }\n        } else if (!$selected) {\n            if (file_exists(INCLUDES.\"bbcodes/\".$bbcode.\"_bbcode_include.php\")) {\n                include(INCLUDES.\"bbcodes/\".$bbcode.\"_bbcode_include.php\");\n            }\n        }\n    }\n\n    return $text;\n}\n\n/**\n * Javascript email encoder by Tyler Akins\n * Create a \"mailto\" link for the email address\n *\n * @param string $email\n * @param string $title   The text of the link\n * @param string $subject The subject of the message\n *\n * @return string\n */\nfunction hide_email($email, $title = \"\", $subject = \"\") {\n    if (preg_match(\"/^[-0-9A-Z_\\.]{1,50}@([-0-9A-Z_\\.]+\\.){1,50}([0-9A-Z]){2,4}$/i\", $email)) {\n        $enc_email = '';\n        $parts = explode(\"@\", $email);\n        $email = $parts[0].'@'.$parts[1];\n        for ($i = 0; $i < strlen($email); $i++) {\n            $enc_email .= '&#'.ord($email[$i]).';';\n        }\n\n        $MailLink = \"<a href='mailto:\".$enc_email;\n        if ($subject != \"\") {\n            $MailLink .= \"?subject=\".urlencode($subject);\n        }\n        $MailLink .= \"'>\".($title ? $title : $enc_email).\"</a>\";\n\n        $MailLetters = \"\";\n        for ($i = 0; $i < strlen($MailLink); $i++) {\n            $l = substr($MailLink, $i, 1);\n            if (strpos($MailLetters, $l) === FALSE) {\n                $p = rand(0, strlen($MailLetters));\n                $MailLetters = substr($MailLetters, 0, $p).$l.substr($MailLetters, $p, strlen($MailLetters));\n            }\n        }\n        $MailLettersEnc = str_replace(\"\\\\\", \"\\\\\\\\\", $MailLetters);\n        $MailLettersEnc = str_replace(\"\\\"\", \"\\\\\\\"\", $MailLettersEnc);\n        $MailIndexes = \"\";\n        for ($i = 0; $i < strlen($MailLink); $i++) {\n            $index = strpos($MailLetters, substr($MailLink, $i, 1));\n            $index += 48;\n            $MailIndexes .= chr($index);\n        }\n\n        $id = 'e'.rand(1, 99999999);\n\n        $MailIndexes = str_replace(\"\\\\\", \"\\\\\\\\\", $MailIndexes);\n        $MailIndexes = str_replace(\"\\\"\", \"\\\\\\\"\", $MailIndexes);\n        $res = \"<span id='\".$id.\"'></span>\";\n        $res .= \"<script type='text/javascript'>\";\n        $res .= \"ML=\\\"\".str_replace(\"<\", \"xxxx\", $MailLettersEnc).\"\\\";\";\n        $res .= \"MI=\\\"\".str_replace(\"<\", \"xxxx\", $MailIndexes).\"\\\";\";\n        $res .= \"ML=ML.replace(/xxxx/g, '<');\";\n        $res .= \"MI=MI.replace(/xxxx/g, '<');\";\n        $res .= \"OT=\\\"\\\";\";\n        $res .= \"for(j=0;j < MI.length;j++){\";\n        $res .= \"OT+=ML.charAt(MI.charCodeAt(j)-48);\";\n        $res .= \"}var e=document.getElementById('\".$id.\"');e.innerHTML += OT;\";\n        $res .= \"</script>\";\n\n        return $res;\n    } else {\n        return $email;\n    }\n}\n\n/**\n * Encode and format code inside <code> tag\n *\n * @param string $text\n *\n * @return string\n */\nfunction encode_code($text) {\n    preg_match_all(\"#<code>(.*?)</code>#is\", $text, $codes);\n    $replace = [];\n    foreach ($codes[1] as $key => $codeblock) {\n        $replace[$key] = htmlentities($codeblock, ENT_QUOTES, 'UTF-8', FALSE);\n    }\n    unset($key, $codeblock);\n\n    if (!empty($codes[0])) {\n        if (!defined('PRISMJS')) {\n            define('PRISMJS', TRUE);\n            add_to_head('<link rel=\"stylesheet\" href=\"'.INCLUDES.'bbcodes/code/prism.css\">');\n            add_to_footer('<script src=\"'.INCLUDES.'bbcodes/code/prism.js\"></script>');\n        }\n    }\n\n    foreach ($codes[0] as $key => $replacer) {\n        $code = str_replace('&lt;br /&gt;', '', $replace[$key]);\n        $code = formatcode($code);\n        $text = str_replace($replacer, '<pre><code class=\"language-php\">'.$code.'</code></pre>', $text);\n    }\n    unset($key, $replacer, $replace);\n\n    return $text;\n}\n\n/**\n * Format spaces and tabs in code tag\n *\n * @param string $text\n *\n * @return string\n */\nfunction format_code($text) {\n    $text = str_replace(\n        [\"  \", \"  \", \"\\t\"],\n        [\"&nbsp; \", \" &nbsp;\", \"&nbsp; &nbsp;\"],\n        $text\n    );\n    $text = preg_replace(\"/^ {1}/m\", \"&nbsp;\", $text);\n\n    return $text;\n}\n\n/**\n * @param $value\n *\n * @return string\n */\nfunction formatcode($value) {\n    return format_code($value);\n}\n\n/**\n * Formats a number in a numeric acronym, and rounding\n *\n * @param int      $value\n * @param int|null $decimals\n * @param string   $dec_point\n * @param string   $thousand_sep\n * @param bool     $round\n * @param bool     $acryonym\n *\n * @return string\n */\nfunction format_num($value = 0, $decimals = NULL, $dec_point = \".\", $thousand_sep = \",\", $round = TRUE, $acryonym = TRUE) {\n    $array = [\n        13 => $acryonym ? \"t\" : \"trillion\",\n        10 => $acryonym ? \"b\" : \"billion\",\n        7  => $acryonym ? \"m\" : \"million\",\n        4  => $acryonym ? \"k\" : \"thousand\" //2\n    ];\n\n    if (is_numeric($value)) {\n        if ($round === TRUE) {\n            foreach ($array as $length => $rounding) {\n                if (strlen($value) >= $length) {\n                    $power = pow(10, $length - 1);\n                    if ($value > $power && $length > 4 && $decimals === NULL) {\n                        $decimals = 2;\n                    }\n                    return number_format(($value / $power), $decimals, $dec_point, $thousand_sep).$rounding;\n                }\n            }\n        }\n\n        return number_format($value, $decimals, $dec_point, $thousand_sep);\n    }\n    return $value;\n}\n\n/**\n * Converts any formatted number back to float numbers in PHP\n *\n * @param $value\n *\n * @return float\n */\nfunction format_float($value) {\n    return floatval(preg_replace('/[^\\d.]/', '', $value));\n}\n\n\n/**\n * Highlights given words in subject\n *\n * @param array  $words   The highlighted word\n * @param string $subject The source text\n *\n * @return string\n */\nfunction highlight_words($words, $subject) {\n    for ($i = 0, $l = count($words); $i < $l; $i++) {\n        $word[$i] = str_replace([\n            \"\\\\\",\n            \"+\",\n            \"*\",\n            \"?\",\n            \"[\",\n            \"^\",\n            \"]\",\n            \"$\",\n            \"(\",\n            \")\",\n            \"{\",\n            \"}\",\n            \"=\",\n            \"!\",\n            \"<\",\n            \">\",\n            \"|\",\n            \":\",\n            \"#\",\n            \"-\",\n            \"_\"\n        ], \"\", $words[$i]);\n        if (!empty($words[$i])) {\n            $subject = preg_replace(\"#($words[$i])(?![^<]*>)#i\",\n                \"<span style='background-color:yellow;color:#333;font-weight:bold;padding-left:2px;padding-right:2px'>\\${1}</span>\",\n                $subject);\n        }\n    }\n\n    return $subject;\n}\n\n/**\n * This function sanitize text\n *\n * @param string $text\n * @param bool   $strip_tags False if you don't want to remove html tags. True by default\n * @param bool   $strip_scripts\n *\n * @return string\n */\nfunction descript($text, $strip_tags = TRUE, $strip_scripts = TRUE) {\n    if (is_array($text)) {\n        return $text;\n    }\n\n    $text = html_entity_decode($text, ENT_QUOTES, fusion_get_locale('charset'));\n    $text = preg_replace('/&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});/i', '', $text);\n\n    // Convert problematic ascii characters to their true values\n    $patterns = [\n        '#(&\\#x)([0-9A-F]+);*#si'                           => '',\n        '#(/\\bon\\w+=\\S+(?=.*>))#is'                         => '',\n        '#([a-z]*)=([\\`\\'\\\"]*)script:#iU'                   => '$1=$2nojscript...',\n        '#([a-z]*)=([\\`\\'\\\"]*)javascript:#iU'               => '$1=$2nojavascript...',\n        '#([a-z]*)=([\\'\\\"]*)vbscript:#iU'                   => '$1=$2novbscript...',\n        '#(<[^>]+)style=([\\`\\'\\\"]*).*expression\\([^>]*>#iU' => \"$1>\",\n        '#(<[^>]+)style=([\\`\\'\\\"]*).*behaviour\\([^>]*>#iU'  => \"$1>\"\n    ];\n\n    foreach (array_merge(['(', ')', ':'], range('A', 'Z'), range('a', 'z')) as $chr) {\n        $patterns[\"#(&\\#)(0*\".ord($chr).\"+);*#si\"] = $chr;\n    }\n\n    if ($strip_tags) {\n        do {\n            $count = 0;\n            //$iframe = !defined('ENABLE_IFRAME') ? 'embed|iframe|' : '';\n            $iframe = '';\n            $text = preg_replace('#</*(applet|meta|xml|blink|link|style|script|object|'.$iframe.'frame|frameset|ilayer|layer|bgsound|title|base)[^>]*>#i', \"\", $text, -1, $count);\n        } while ($count);\n    }\n\n    $text = preg_replace(array_keys($patterns), $patterns, $text);\n\n    $preg_patterns = [\n        // Fix &entity\\n\n        '!(&#0+[0-9]+)!'                                                                                                                                                                                => '$1;',\n        '/(&#*\\w+)[\\x00-\\x20]+;/u'                                                                                                                                                                      => '$1;>',\n        '/(&#x*[0-9A-F]+);*/iu'                                                                                                                                                                         => '$1;',\n        //any attribute starting with \"on\" or xml name space\n        '#(<[^>]+?[\\x00-\\x20\"\\'])(?:on|xmlns)[^>]*+>#iu'                                                                                                                                                => '$1>',\n        //javascript: and VB script: protocols\n        '#([a-z]*)[\\x00-\\x20]*=[\\x00-\\x20]*([`\\'\"]*)[\\x00-\\x20]*j[\\x00-\\x20]*a[\\x00-\\x20]*v[\\x00-\\x20]*a[\\x00-\\x20]*s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:#iu' => '$1=$2nojavascript...',\n        '#([a-z]*)[\\x00-\\x20]*=([\\'\"]*)[\\x00-\\x20]*v[\\x00-\\x20]*b[\\x00-\\x20]*s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:#iu'                                        => '$1=$2novbscript...',\n        '#([a-z]*)[\\x00-\\x20]*=([\\'\"]*)[\\x00-\\x20]*-moz-binding[\\x00-\\x20]*:#u'                                                                                                                         => '$1=$2nomozbinding...',\n        // Only works in IE: <span style=\"width: expression(alert('Ping!'));\"></span>\n        '#(<[^>]+?)style[\\x00-\\x20]*=[\\x00-\\x20]*[`\\'\"]*.*?expression[\\x00-\\x20]*\\([^>]*+>#i'                                                                                                           => '$1>',\n        '#(<[^>]+?)style[\\x00-\\x20]*=[\\x00-\\x20]*[`\\'\"]*.*?s[\\x00-\\x20]*c[\\x00-\\x20]*r[\\x00-\\x20]*i[\\x00-\\x20]*p[\\x00-\\x20]*t[\\x00-\\x20]*:*[^>]*+>#iu'                                                  => '$1>',\n        // namespace elements\n        '#</*\\w+:\\w[^>]*+>#i'                                                                                                                                                                           => ''\n    ];\n\n    if ($strip_scripts) {\n        $preg_patterns += [\n            '#<script(.*?)>(.*?)</script>#is' => ''\n        ];\n    }\n\n    foreach ($preg_patterns as $pattern => $replacement) {\n        $text = preg_replace($pattern, $replacement, $text);\n    }\n\n    return htmlspecialchars($text, ENT_QUOTES, 'UTF-8', FALSE);\n}\n\n/**\n * Scan image files for malicious code\n *\n * @param string $file\n *\n * @return boolean\n */\nfunction verify_image($file) {\n    $txt = file_get_contents($file);\n    $patterns = [\n        '#\\<\\?php#i',\n        '#&(quot|lt|gt|nbsp);#i',\n        '#&\\#x([0-9a-f]+);#i',\n        '#&\\#([0-9]+);#i',\n        \"#([a-z]*)=([\\`\\'\\\"]*)script:#iU\",\n        \"#([a-z]*)=([\\`\\'\\\"]*)javascript:#iU\",\n        \"#([a-z]*)=([\\'\\\"]*)vbscript:#iU\",\n        \"#(<[^>]+)style=([\\`\\'\\\"]*).*expression\\([^>]*>#iU\",\n        \"#(<[^>]+)style=([\\`\\'\\\"]*).*behaviour\\([^>]*>#iU\",\n        \"#</*(applet|link|style|script|iframe|frame|frameset)[^>]*>#i\"\n    ];\n    foreach ($patterns as $pattern) {\n        if (preg_match($pattern, $txt)) {\n            return FALSE;\n        }\n    }\n\n    return TRUE;\n}\n\n/**\n * Replace offensive words with the defined replacement word\n *\n * @param string $text\n *\n * @return string\n */\nfunction censorwords($text) {\n    $settings = fusion_get_settings();\n\n    if ($settings['bad_words_enabled'] && !empty($settings['bad_words'])) {\n        $words = preg_quote(trim($settings['bad_words']), \"/\");\n        $words = preg_replace(\"/\\\\s+/\", \"|\", $words);\n        $text = preg_replace(\"/\".$words.\"/si\", $settings['bad_word_replace'], $text);\n    }\n\n    return $text;\n}\n\n/**\n * Get a user level's name by the numeric code of level\n *\n * @param int $userlevel\n *\n * @return string\n */\nfunction getuserlevel($userlevel) {\n    $locale = fusion_get_locale();\n    $userlevels = [\n        USER_LEVEL_MEMBER      => $locale['user1'],\n        USER_LEVEL_ADMIN       => $locale['user2'],\n        USER_LEVEL_SUPER_ADMIN => $locale['user3']\n    ];\n\n    return isset($userlevels[$userlevel]) ? $userlevels[$userlevel] : NULL;\n}\n\n/**\n * Get a user status by the numeric code of the status\n *\n * @param int $userstatus\n *\n * @return string|null Null if the status does not exist\n */\nfunction getuserstatus($userstatus) {\n    $locale = fusion_get_locale();\n\n    return ($userstatus >= 0 and $userstatus <= 8) ? $locale['status'.$userstatus] : NULL;\n}\n\n/**\n * Check if Administrator has correct rights assigned\n *\n * @param string $rights The code of the right\n *\n * @return bool\n */\nfunction checkrights($rights) {\n    if (iADMIN && in_array($rights, explode(\".\", iUSER_RIGHTS))) {\n        return TRUE;\n    } else {\n        return FALSE;\n    }\n}\n\n/**\n * Function to redirect on invalid page access.\n *\n * @param string $rights\n * @param bool   $debug\n */\nfunction pageAccess($rights, $debug = FALSE) {\n    $error = [];\n    if ($debug) {\n        print_p('Admin Panel mode');\n    }\n    if (!defined('iAUTH')) {\n        $error[] = 'iAuth error';\n    }\n    if (!isset($_GET['aid'])) {\n        $error[] = 'Aid link error';\n    }\n    if (iADMIN && !empty($_GET['aid'])) {\n        if ($_GET['aid'] != iAUTH) {\n            $error[] = 'Aidlink mismatch. '.iAUTH.' != '.$_GET['aid'].\"<br/>\";\n            $error[] .= USER_IP;\n        }\n    } else {\n        $error[] = \"You are logged out while accessing admin panel\";\n    }\n    if (!checkrights($rights)) {\n        $error[] = 'Checkrights Error';\n    }\n    if (!empty($error)) {\n        if ($debug) {\n            print_p($error);\n        } else {\n            redirect(BASEDIR);\n        }\n    }\n}\n\n/**\n * Check if user is assigned to the specified user group\n *\n * @param int $group\n *\n * @return bool\n */\nfunction checkgroup($group) {\n    if (iSUPERADMIN) {\n        return TRUE;\n    } else if (iADMIN && ($group == \"0\" || $group == USER_LEVEL_MEMBER || $group == USER_LEVEL_ADMIN)) {\n        return TRUE;\n    } else if (iMEMBER && ($group == \"0\" || $group == USER_LEVEL_MEMBER)) {\n        return TRUE;\n    } else if (iGUEST && $group == \"0\") {\n        return TRUE;\n    } else if (iMEMBER && $group && in_array($group, explode(\".\", iUSER_GROUPS))) {\n        return TRUE;\n    } else {\n        return FALSE;\n    }\n}\n\n/**\n * Check access given a user level and user group\n *\n * @param int    $group\n * @param int    $user_level\n * @param string $user_groups\n *\n * @return bool\n */\nfunction checkusergroup($group, $user_level, $user_groups) {\n    if ($user_level == USER_LEVEL_SUPER_ADMIN) {\n        return TRUE;\n    } else if ($user_level == USER_LEVEL_ADMIN && ($group == 0 || $group == USER_LEVEL_MEMBER || $group == USER_LEVEL_ADMIN)) {\n        return TRUE;\n    } else if ($user_level == USER_LEVEL_MEMBER && ($group == 0 || $group == USER_LEVEL_MEMBER)) {\n        return TRUE;\n    } else if ($user_level == USER_LEVEL_PUBLIC && $group == 0) {\n        return TRUE;\n    } else if ($user_level == USER_LEVEL_MEMBER && $group && in_array($group, explode('.', $user_groups))) {\n        return TRUE;\n    }\n\n    return FALSE;\n}\n\n/**\n * Cache groups data into an array\n *\n * @return array\n */\nfunction cache_groups() {\n    static $groups_cache = NULL;\n    if ($groups_cache === NULL) {\n        $groups_cache = [];\n        $result = dbquery(\"SELECT * FROM \".DB_USER_GROUPS.\" ORDER BY group_id ASC\");\n        while ($data = dbarray($result)) {\n            $groups_cache[] = $data;\n        }\n    }\n\n    return $groups_cache;\n}\n\n/**\n * Compile access levels & user group array\n *\n * @return array structure of elements: array($levelOrGroupid, $levelnameOrGroupname, $levelGroupDescription,\n *               $levelGroupIcon)\n */\nfunction getusergroups() {\n    $locale = fusion_get_locale();\n    $groups_array = [\n        [USER_LEVEL_PUBLIC, $locale['user0'], $locale['user0'], 'fa fa-user'],\n        [USER_LEVEL_MEMBER, $locale['user1'], $locale['user1'], 'fa fa-user'],\n        [USER_LEVEL_ADMIN, $locale['user2'], $locale['user2'], 'fa fa-user'],\n        [USER_LEVEL_SUPER_ADMIN, $locale['user3'], $locale['user3'], 'fa fa-user']\n    ];\n    $groups_cache = cache_groups();\n    foreach ($groups_cache as $group) {\n        $group_icon = !empty($group['group_icon']) ? $group['group_icon'] : '';\n        array_push($groups_array, [$group['group_id'], $group['group_name'], $group['group_description'], $group_icon]);\n    }\n\n    return $groups_array;\n}\n\n/**\n * Get the name of the access level or user group\n *\n * @param int  $group_id\n * @param bool $return_desc If true, group_description will be returned instead of group_name\n * @param bool $return_icon If true, group_icon will be returned instead of group_icon group_name\n *\n * @return string\n */\nfunction getgroupname($group_id, $return_desc = FALSE, $return_icon = FALSE) {\n\n    foreach (getusergroups() as $group) {\n\n        if ($group_id == $group[0]) {\n            return ($return_desc ? ($group[2] ?: '-') : (!empty($group[3]) && $return_icon ? \"<i class='\".$group[3].\"'></i> \" : \"\").$group[1]);\n        }\n    }\n\n    return NULL;\n}\n\n/**\n * Get array of all groups\n *\n * @return array\n */\nfunction fusion_get_groups() {\n    $visibility_opts = [];\n    foreach (getusergroups() as $groups) {\n        $visibility_opts[$groups[0]] = $groups[1];\n    }\n\n    return $visibility_opts;\n}\n\n/**\n * Getting the real users_group access.\n *\n * @param int $group_id\n *\n * @return bool\n */\nfunction users_groupaccess($group_id) {\n    if (preg_match(\"(^\\.{$group_id}$|\\.{$group_id}\\.|\\.{$group_id}$)\", fusion_get_userdata('user_groups'))) {\n        return TRUE;\n    }\n\n    return FALSE;\n}\n\n/**\n * Getting the access levels used when asking the database for data\n *\n * @param string $field\n *\n * @return string The part of WHERE clause. Always returns a condition\n */\nfunction groupaccess($field) {\n    $res = '';\n    if (iGUEST) {\n        $res = $field.\" = \".USER_LEVEL_PUBLIC;\n    } else if (iSUPERADMIN) {\n        $res = \"1 = 1\";\n    } else if (iADMIN) {\n        $res = $field.\" in (\".USER_LEVEL_PUBLIC.\", \".USER_LEVEL_MEMBER.\", \".USER_LEVEL_ADMIN.\")\";\n    } else if (iMEMBER) {\n        $res = $field.\" in (\".USER_LEVEL_PUBLIC.\", \".USER_LEVEL_MEMBER.\")\";\n    }\n    if (iUSER_GROUPS != \"\" && !iSUPERADMIN) {\n        $res = \"(\".$res.\" OR $field='\".str_replace(\".\", \"' OR $field='\", iUSER_GROUPS).\"')\";\n    }\n\n    return $res;\n}\n\n/**\n * UF blacklist for SQL - same as groupaccess() but $field is the user_id column.\n *\n * @param string $field The name of the field\n *\n * @return string It can return an empty condition!\n */\nfunction blacklist($field) {\n    $userdata = fusion_get_userdata('user_id');\n    $blacklist = [];\n    if (in_array('user_blacklist', fieldgenerator(DB_USERS))) {\n        if (!empty($userdata['user_id'])) {\n            $result = dbquery(\"SELECT user_id, user_level FROM \".DB_USERS.\" WHERE user_blacklist REGEXP('^\\\\\\.{$userdata['user_id']}$|\\\\\\.{$userdata['user_id']}\\\\\\.|\\\\\\.{$userdata['user_id']}$')\");\n            if (dbrows($result) > 0) {\n                while ($data = dbarray($result)) {\n                    if ($data['user_level'] > USER_LEVEL_ADMIN) {\n                        $blacklist[] = $data['user_id']; // all users to filter\n                    }\n                }\n            }\n        }\n        $i = 0;\n        $sql = '';\n        foreach ($blacklist as $id) {\n            $sql .= ($i > 0) ? \"AND $field !='$id'\" : \"($field !='$id'\";\n            $i++;\n        }\n        $sql .= $sql ? \")\" : ' 1=1 ';\n\n        return \"$sql\";\n    } else {\n        return \"\";\n    }\n}\n\n/**\n * Check if user was blacklisted by a member\n *\n * @param int $user_id\n *\n * @return bool\n */\nfunction user_blacklisted($user_id) {\n    return in_array('user_blacklist', fieldgenerator(DB_USERS)) and in_array($user_id, explode('.', fusion_get_userdata('user_blacklist')));\n}\n\n/**\n * Create a list of files or folders and store them in an array\n *\n * @param string $folder\n * @param string $filter     The names of the filtered folder separated by \"|\", false to use default filter\n * @param bool   $sort       False if you don't want to sort the result. True by default\n * @param string $type       Possible values: 'files' to list files, 'folders' to list folders\n * @param string $ext_filter File extensions separated by \"|\". Only when $type is 'files'\n *\n * @return array\n */\nfunction makefilelist($folder, $filter = '', $sort = TRUE, $type = \"files\", $ext_filter = \"\") {\n    $res = [];\n\n    $default_filters = '.|..|.DS_Store';\n    if ($filter === FALSE) {\n        $filter = $default_filters;\n    }\n\n    $filter = explode(\"|\", $filter);\n    if ($type == \"files\" && !empty($ext_filter)) {\n        $ext_filter = explode(\"|\", strtolower($ext_filter));\n    }\n\n    if (file_exists($folder)) {\n        $temp = opendir($folder);\n        while ($file = readdir($temp)) {\n            if ($type == \"files\" && !in_array($file, $filter)) {\n                if (!empty($ext_filter)) {\n                    if (!in_array(substr(strtolower(stristr($file, '.')), +1), $ext_filter) && !is_dir($folder.$file)) {\n                        $res[] = $file;\n                    }\n                } else {\n                    if (is_file($folder.$file)) {\n                        $res[] = $file;\n                    }\n                }\n            } else if ($type == \"folders\" && !in_array($file, $filter)) {\n                if (is_dir($folder.$file)) {\n                    $res[] = $file;\n                }\n            }\n        }\n        closedir($temp);\n        if ($sort) {\n            sort($res);\n        }\n    } else {\n        $error_log = debug_backtrace()[1];\n        $function = (isset($error_log['class']) ? $error_log['class'] : '').(isset($error_log['type']) ? $error_log['type'] : '').(isset($error_log['function']) ? $error_log['function'] : '');\n        $error_log = strtr(fusion_get_locale('err_103', LOCALE.LOCALESET.'errors.php'), [\n            '{%folder%}'   => $folder,\n            '{%function%}' => (!empty($function) ? '<code class=\\'m-r-10\\'>'.$function.'</code>' : '')\n        ]);\n        setError(2, $error_log, debug_backtrace()[1]['file'], debug_backtrace()[1]['line']);\n    }\n\n    return $res;\n}\n\n/**\n * Create a selection list from an array created by makefilelist()\n *\n * @param array  $options\n * @param string $selected\n *\n * @return string\n */\nfunction makefileopts($options, $selected = \"\") {\n    $res = \"\";\n    foreach ($options as $item) {\n        $sel = ($selected == $item ? \" selected='selected'\" : \"\");\n        $res .= \"<option value='\".$item.\"' $sel>\".$item.\"</option>\\n\";\n    }\n\n    return $res;\n}\n\n/**\n * Making Page Navigation\n *\n * @param int    $rowstart The number of the first listed item - $_GET['rowstart']\n * @param int    $count    The number of displayed items - LIMIT on sql\n * @param int    $total    The number of all items - a dbcount of total\n * @param int    $range    The number of links before and after the current page\n * @param string $link     The base url before the appended part\n * @param string $getname  The variable name in the query string which stores the number of the current page\n * @param bool   $button   Displays as button\n *\n * @return bool|string False if $count is invalid\n */\nfunction makepagenav($rowstart, $count, $total, $range = 3, $link = \"\", $getname = \"rowstart\", $button = FALSE) {\n\n    $locale = fusion_get_locale();\n    /* Bootstrap may be disabled in theme (see Gillette for example) without settings change in DB.\n       In such case this function will not work properly.\n       With this fix (used $settings instead fusion_get_settings) function will work.*/\n    if (fusion_get_settings(\"bootstrap\") || defined('BOOTSTRAP')) {\n        $tpl_global = \"<nav>%s<div class='btn-group'>\\n%s</div></nav>\\n\";\n        $tpl_currpage = \"<a class='btn btn-sm btn-default active' href='%s=%d'><strong>%d</strong></a>\\n\";\n        $tpl_page = \"<a class='btn btn-sm btn-default' data-value='%d' href='%s=%d'>%s</a>\\n\";\n        $tpl_divider = \"</div>\\n<div class='btn-group'>\";\n        $tpl_firstpage = \"<a class='btn btn-sm btn-default' data-value='0' href='%s=0'>1</a>\\n\";\n        $tpl_lastpage = \"<a class='btn btn-sm btn-default' data-value='%d' href='%s=%d'>%s</a>\\n\";\n        $tpl_button = \"<a class='btn btn-primary btn-block btn-md' data-value='%d' href='%s=%d'>%s</a>\\n\";\n    } else {\n        $tpl_global = \"<div class='pagenav'>%s\\n%s</div>\\n\";\n        $tpl_currpage = \"<a class='pagenavlink active' href='%s=%d'>%d</a>\";\n        $tpl_page = \"<a class='pagenavlink' data-value='%d' href='%s=%d'>%s</a>\";\n        $tpl_divider = \"<span class='pagenavdivider'>...</span>\";\n        $tpl_firstpage = \"<a class='pagenavlink' data-value='0' href='%s=0'>1</a>\";\n        $tpl_lastpage = \"<a class='pagenavlink' data-value='%d' href='%s=%d'>%s</a>\\n\";\n        $tpl_button = \"<a class='pagenavlink' data-value='%d' href='%s=%d'>%s</a>\\n\";\n    }\n\n    if ($link == '') {\n        $link = FUSION_SELF.\"?\";\n        if (fusion_get_settings(\"site_seo\") && defined('IN_PERMALINK')) {\n            global $filepath;\n            $link = $filepath.\"?\";\n        }\n    }\n    if (!preg_match(\"#[0-9]+#\", $count) || $count == 0) {\n        return FALSE;\n    }\n    $pg_cnt = ceil($total / $count);\n    if ($pg_cnt <= 1) {\n        return \"\";\n    }\n    $idx_back = $rowstart - $count;\n    $idx_next = $rowstart + $count;\n    if ($button == TRUE) {\n        if ($idx_next >= $total) {\n            return sprintf($tpl_button, 0, $link.$getname, 0, $locale['load_end']);\n        } else {\n            return sprintf($tpl_button, $idx_next, $link.$getname, $idx_next, $locale['load_more']);\n        }\n    }\n    $cur_page = ceil(($rowstart + 1) / $count);\n    $res = \"\";\n    if ($idx_back >= 0) {\n        if ($cur_page > ($range + 1)) {\n            $res .= sprintf($tpl_firstpage, $link.$getname);\n            if ($cur_page != ($range + 2)) {\n                $res .= $tpl_divider;\n            }\n        }\n    }\n    $idx_fst = max($cur_page - $range, 1);\n    $idx_lst = min($cur_page + $range, $pg_cnt);\n    if ($range == 0) {\n        $idx_fst = 1;\n        $idx_lst = $pg_cnt;\n    }\n    for ($i = $idx_fst; $i <= $idx_lst; $i++) {\n        $offset_page = ($i - 1) * $count;\n        if ($i == $cur_page) {\n            $res .= sprintf($tpl_currpage, $link.$getname, $offset_page, $i);\n        } else {\n            $res .= sprintf($tpl_page, $offset_page, $link.$getname, $offset_page, $i);\n        }\n    }\n    if ($idx_next < $total) {\n        if ($cur_page < ($pg_cnt - $range)) {\n            if ($cur_page != ($pg_cnt - $range - 1)) {\n                $res .= $tpl_divider;\n            }\n            $res .= sprintf($tpl_lastpage, ($pg_cnt - 1) * $count, $link.$getname, ($pg_cnt - 1) * $count, $pg_cnt);\n        }\n    }\n\n    return sprintf($tpl_global, \"<small class='m-r-10'><span>\".$locale['global_092'].\"</span> \".$cur_page.$locale['global_093'].$pg_cnt.\"</small> \", $res);\n}\n\n/**\n * @param     $total\n * @param     $count\n * @param int $range\n *\n * @return float|int\n */\nfunction rowstart_count($total, $count, $range = 3) {\n    if ($total > $count) {\n        $cur_page = ceil(($total + 1) / $count);\n        $pg_cnt = ceil($total / $count);\n        if ($pg_cnt <= 1) {\n            return 0;\n        }\n        $row = min($cur_page + $range, $pg_cnt);\n        return ($row - 1) * $count;\n    }\n    return 0;\n}\n\n\n/**\n * Inifity sroll\n *\n * @param string $scroll_url The ajax script that loads the content\n * @param int    $rowstart   The number of the first listed item - $_GET['rowstart']\n * @param int    $count      The number of all items - a dbcount of total\n * @param string $getname    The variable name in the query string which stores the number of the current page\n * @param string $http_query '&section=some_section'\n *\n * @return string\n */\nfunction infinite_scroll($scroll_url, $rowstart, $count, $getname = 'rowstart', $http_query = '') {\n    $locale = fusion_get_locale();\n\n    add_to_jquery(\"\n        var count = $rowstart+1;\n        $(window).scroll(function(){\n          if ($(window).scrollTop() == ($(document).height() - $(window).height())) {\n            if (count <= '$count') {\n                loadInfinityContent(count);\n                count++;\n            }\n          }\n        });\n       function loadInfinityContent(pageNumber){\n           $('.infiniteLoader').show('fast');\n           $.ajax({\n                  url: '$scroll_url',\n                  type:'GET',\n                  data: 'action=infinite_scroll&$getname='+ pageNumber +'\".($http_query ? \"&\".$http_query : '').\"',\n                  success: function(html){\n                      $('.infiniteLoader').hide();\n                      $('#scroll_target').append(html);  // This will be the div where our content will be loaded\n                  }\n              });\n          return false;\n        }\n    \");\n\n    return \"\n    <div id='scroll_target'></div>\n    <div class='infiniteLoader panel panel-default' style='display:none;'><div class='panel-body text-center'>\".$locale['loading'].\"</div></div>\n    \";\n}\n\n/**\n * Hierarchy Page Breadcrumbs\n * This function generates breadcrumbs on all your category needs on $_GET['rownav'] as your cat_id\n *\n * @param array  $tree_index dbquery_tree(DB_NEWS_CATS, \"news_cat_id\", \"news_cat_parent\") / tree_index(dbquery_tree_full(DB_NEWS_CATS, \"news_cat_id\", \"news_cat_parent\"))\n * @param array  $tree_full  dbquery_tree_full(DB_NEWS_CATS, \"news_cat_id\", \"news_cat_parent\")\n * @param string $id_col     \"news_cat_id\",\n * @param string $title_col  \"news_cat_name\",\n * @param string $getname    cat_id for $_GET['cat_id']\n * @param string $key        key for breadcrumb instance\n */\nfunction make_page_breadcrumbs($tree_index, $tree_full, $id_col, $title_col, $getname = \"rownav\", $key = 'default') {\n\n    $_GET[$getname] = !empty($_GET[$getname]) && isnum($_GET[$getname]) ? $_GET[$getname] : 0;\n\n    // Recursive fatal protection\n    if (!function_exists('breadcrumb_page_arrays')) {\n        function breadcrumb_page_arrays($tree_index, $tree_full, $id_col, $title_col, $getname, $id) {\n            $crumb = [];\n            if (isset($tree_index[get_parent($tree_index, $id)])) {\n                $_name = get_parent_array($tree_full, $id);\n                $crumb = [\n                    'link'  => isset($_name[$id_col]) ? clean_request($getname.\"=\".$_name[$id_col], [\"aid\"], TRUE) : \"\",\n                    'title' => isset($_name[$title_col]) ? \\PHPFusion\\QuantumFields::parse_label($_name[$title_col]) : \"\",\n                ];\n                if (get_parent($tree_index, $id) == 0) {\n                    return $crumb;\n                }\n                $crumb_1 = breadcrumb_page_arrays($tree_index, $tree_full, $id_col, $title_col, $getname, get_parent($tree_index, $id));\n\n                if (!empty($crumb_1)) {\n                    $crumb = array_merge_recursive($crumb, $crumb_1);\n                }\n\n            }\n\n            return $crumb;\n        }\n    }\n\n    // then we make a infinity recursive function to loop/break it out.\n    $crumb = breadcrumb_page_arrays($tree_index, $tree_full, $id_col, $title_col, $getname, $_GET[$getname]);\n    // then we sort in reverse.\n    $title_count = !empty($crumb['title']) && is_array($crumb['title']) ? count($crumb['title']) > 1 : 0;\n    if ($title_count) {\n        krsort($crumb['title']);\n        krsort($crumb['link']);\n    }\n    if ($title_count) {\n        foreach ($crumb['title'] as $i => $value) {\n            \\PHPFusion\\BreadCrumbs::getInstance($key)->addBreadCrumb(['link' => $crumb['link'][$i], 'title' => $value]);\n            if ($i == count($crumb['title']) - 1) {\n                add_to_title($value);\n                OutputHandler::addToMeta($value);\n            }\n        }\n    } else if (isset($crumb['title'])) {\n        add_to_title($crumb['title']);\n        add_to_meta($crumb['title']);\n        add_breadcrumb(['link' => $crumb['link'], 'title' => $crumb['title']]);\n    }\n}\n\n/**\n * Format the date & time accordingly\n *\n * @param string $format shortdate, longdate, forumdate, newsdate or date pattern for the strftime\n * @param int    $val    unix timestamp\n * @param array  $options\n *\n * @return string\n */\nfunction showdate($format, $val, $options = []) {\n    $userdata = fusion_get_userdata();\n\n    if (isset($options['tz_override'])) {\n        $tz_client = $options['tz_override'];\n    } else {\n        if (!empty($userdata['user_timezone'])) {\n            $tz_client = $userdata['user_timezone'];\n        } else {\n            $tz_client = fusion_get_settings('timeoffset');\n        }\n    }\n\n    if (empty($tz_client)) {\n        $tz_client = 'Europe/London';\n    }\n\n    $client_dtz = new DateTimeZone($tz_client);\n    $client_dt = new DateTime('now', $client_dtz);\n    $offset = $client_dtz->getOffset($client_dt);\n\n    if (!empty($val)) {\n        if (in_array($format, ['shortdate', 'longdate', 'forumdate', 'newsdate'])) {\n            $format = fusion_get_settings($format);\n            $offset = intval($val) + $offset;\n\n            return strftime($format, $offset);\n        } else {\n            $offset = intval($val) + $offset;\n\n            return strftime($format, $offset);\n        }\n    } else {\n        $format = fusion_get_settings($format);\n        $offset = intval(TIME) + $offset;\n\n        return strftime($format, $offset);\n    }\n}\n\n/**\n * Translate bytes into kB, MB, GB or TB\n *\n * @param int  $size     The number of bytes\n * @param int  $decimals Precision\n * @param bool $dir      True if it is the size of a directory\n *\n * @return string\n */\nfunction parsebytesize($size, $decimals = 2, $dir = FALSE) {\n    $locale = fusion_get_locale();\n\n    $kb = 1024;\n    $mb = 1024 * $kb;\n    $gb = 1024 * $mb;\n    $tb = 1024 * $gb;\n\n    $size = (empty($size)) ? \"0\" : $size;\n\n    if (($size == 0) && ($dir)) {\n        return \"0 \".$locale['global_460'];\n    } else if ($size < $kb) {\n        return $size.$locale['global_461'];\n    } else if ($size < $mb) {\n        return round($size / $kb, $decimals).'kB';\n    } else if ($size < $gb) {\n        return round($size / $mb, $decimals).'MB';\n    } else if ($size < $tb) {\n        return round($size / $gb, $decimals).'GB';\n    } else {\n        return round($size / $tb, $decimals).'TB';\n    }\n}\n\n/**\n * User profile link\n *\n * @param int    $user_id\n * @param string $user_name\n * @param int    $user_status\n * @param string $class html class of link\n * @param bool   $display_link\n *\n * @return string\n */\nfunction profile_link($user_id, $user_name, $user_status, $class = \"profile-link\", $display_link = TRUE) {\n    $locale = fusion_get_locale();\n    $settings = fusion_get_settings();\n    $class = ($class ? \"class='$class'\" : \"\");\n\n    if ((in_array($user_status, [\n                0,\n                3,\n                7\n            ]) || checkrights(\"M\")) && (iMEMBER || $settings['hide_userprofiles'] == \"0\") && $display_link == TRUE\n    ) {\n        $link = \"<a href='\".BASEDIR.\"profile.php?lookup=\".$user_id.\"' \".$class.\">\".$user_name.\"</a>\";\n    } else if ($user_status == \"5\" || $user_status == \"6\") {\n        $link = $locale['user_anonymous'];\n    } else {\n        $link = $user_name;\n    }\n\n    return $link;\n}\n\n/**\n * Variable dump printer for debugging purposes\n *\n * @param mixed $data\n * @param bool  $modal\n * @param bool  $print\n *\n * @return string\n */\nfunction print_p($data, $modal = FALSE, $print = TRUE) {\n    ob_start();\n    echo htmlspecialchars(print_r($data, TRUE), ENT_QUOTES, 'utf-8');\n    $debug = ob_get_clean();\n    if ($modal == TRUE) {\n        $modal = openmodal('Debug', 'Debug');\n        $modal .= \"<pre class='printp' style='white-space:pre-wrap !important;'>\";\n        $modal .= $debug;\n        $modal .= \"</pre>\\n\";\n        $modal .= closemodal();\n        PHPFusion\\OutputHandler::addToFooter($modal);\n\n        return FALSE;\n    }\n    if ($print == TRUE) {\n        echo \"<pre class='printp' style='white-space:pre-wrap !important;'>\";\n        echo $debug;\n        echo \"</pre>\\n\";\n    }\n\n    return $debug;\n}\n\n/**\n * Fetch the settings from the database\n *\n * @param string $key The key of one setting\n *\n * @return string[]|string Associative array of settings or one setting by key if $key was given\n */\nfunction fusion_get_settings($key = NULL) {\n    // It is initialized only once because of 'static'\n    static $settings = [];\n    if (empty($settings) and defined('DB_SETTINGS') and dbconnection() && db_exists('settings')) {\n        $result = dbquery(\"SELECT * FROM \".DB_SETTINGS);\n        while ($data = dbarray($result)) {\n            $settings[$data['settings_name']] = $data['settings_value'];\n        }\n    }\n\n    return $key === NULL ? $settings : (isset($settings[$key]) ? $settings[$key] : NULL);\n}\n\n/**\n * Get Locale\n * Fetch a given locale key\n *\n * @param string       $key          The key of one locale\n * @param array|string $include_file The full path of the file which to be included\n *\n * @return string|array\n */\nfunction fusion_get_locale($key = NULL, $include_file = '') {\n    $locale = \\PHPFusion\\Locale::getInstance('default');\n    if ($include_file) {\n        $locale::setLocale($include_file);\n    }\n\n    return $locale->getLocale($key);\n}\n\n/**\n * Fetch username by id\n *\n * @param int $user_id\n *\n * @return string\n */\nfunction fusion_get_username($user_id) {\n    $result = NULL;\n    $result = (dbresult(dbquery(\"SELECT user_name FROM \".DB_USERS.\" WHERE user_id='\".intval($user_id).\"'\"), 0));\n\n    return ($result !== NULL) ? $result : fusion_get_locale(\"na\");\n}\n\n/**\n * Get a user own data\n *\n * @param string $key The column of one user information\n *\n * @return string|array\n */\nfunction fusion_get_userdata($key = NULL) {\n    global $userdata;\n    if (empty($userdata)) {\n        $userdata = [\"user_level\" => 0, \"user_rights\" => \"\", \"user_groups\" => \"\", \"user_theme\" => 'Default', \"user_ip\"=>USER_IP];\n    }\n    $userdata = $userdata + [\n            \"user_id\"     => 0,\n            \"user_name\"   => fusion_get_locale(\"user_guest\"),\n            \"user_status\" => 1,\n            \"user_level\"  => 0,\n            \"user_rights\" => \"\",\n            \"user_groups\" => \"\",\n            \"user_theme\"  => fusion_get_settings(\"theme\"),\n        ];\n\n    return $key === NULL ? $userdata : (isset($userdata[$key]) ? $userdata[$key] : NULL);\n}\n\n/**\n * Get any users data\n *\n * @param int    $user_id The user id\n * @param string $key     The key of column\n *\n * @return string|array\n */\nfunction fusion_get_user($user_id, $key = NULL) {\n    static $user = [];\n    if (!isset($user[$user_id]) && isnum($user_id)) {\n        $user[$user_id] = dbarray(dbquery(\"SELECT * FROM \".DB_USERS.\" WHERE user_id='\".intval($user_id).\"'\"));\n    }\n    if (!isset($user[$user_id])) {\n        return NULL;\n    }\n\n    return $key === NULL ? $user[$user_id] : (isset($user[$user_id][$key]) ? $user[$user_id][$key] : NULL);\n}\n\n/**\n * Get Aidlink\n *\n * @return string\n */\nfunction fusion_get_aidlink() {\n    $aidlink = '';\n    if (defined('iADMIN') && iADMIN && defined('iAUTH')) {\n        $aidlink = '?aid='.iAUTH;\n    }\n\n    return (string)$aidlink;\n}\n\n/**\n * Get form tokens\n *\n * @param string $form_id\n * @param int    $max_tokens\n *\n * @return string\n */\nfunction fusion_get_token($form_id, $max_tokens = 5) {\n    return \\defender\\Token::generate_token($form_id, $max_tokens);\n}\n\n/**\n * Fetch PM Settings\n *\n * @param int    $user_id\n * @param string $key user_inbox, user_outbox, user_archive, user_pm_email_notify, user_pm_save_sent\n *\n * @return array|bool|null\n */\nfunction user_pm_settings($user_id, $key = NULL) {\n    return \\PHPFusion\\PrivateMessages::get_pm_settings($user_id, $key);\n}\n\n/**\n * Run the installer or halt the script\n */\nfunction fusion_run_installer() {\n    if (file_exists(\"install.php\")) {\n        redirect(\"install.php\");\n    } else {\n        die(\"No config.php or install.php files were found\");\n    }\n}\n\n/**\n * Define Site Language\n *\n * @param string $lang\n */\nfunction define_site_language($lang) {\n    if (valid_language($lang)) {\n        define('LANGUAGE', $lang);\n        define('LOCALESET', $lang.'/');\n    }\n}\n\n/**\n * Set the requested language\n *\n * @param string $lang\n */\nfunction set_language($lang) {\n    $userdata = fusion_get_userdata();\n    if (valid_language($lang)) {\n        if (iMEMBER) {\n            dbquery(\"UPDATE \".DB_USERS.\" SET user_language='\".$lang.\"' WHERE user_id='\".$userdata['user_id'].\"'\");\n        } else {\n            $rows = dbrows(dbquery(\"SELECT user_language FROM \".DB_LANGUAGE_SESSIONS.\" WHERE user_ip='\".USER_IP.\"'\"));\n            if ($rows != 0) {\n                dbquery(\"UPDATE \".DB_LANGUAGE_SESSIONS.\" SET user_language='\".$lang.\"', user_datestamp='\".time().\"' WHERE user_ip='\".USER_IP.\"'\");\n            } else {\n                dbquery(\"INSERT INTO \".DB_LANGUAGE_SESSIONS.\" (user_ip, user_language, user_datestamp) VALUES ('\".USER_IP.\"', '\".$lang.\"', '\".TIME.\"');\");\n            }\n            // Sanitize guest sessions occasionally\n            dbquery(\"DELETE FROM \".DB_LANGUAGE_SESSIONS.\" WHERE user_datestamp<'\".(TIME - (86400 * 60)).\"'\");\n        }\n    }\n}\n\n/**\n * Check if a given language is valid or if exists\n * Checks whether a language can be found in enabled languages array\n * Can also be used to check whether a language actually exists\n *\n * @param string $lang\n * @param bool   $file_check intended to be used when enabling languages in Admin Panel\n *\n * @return bool\n */\nfunction valid_language($lang, $file_check = FALSE) {\n    $enabled_languages = fusion_get_enabled_languages();\n    if (preg_match(\"/^([a-z0-9_-]){2,50}$/i\",\n            $lang) && ($file_check ? file_exists(LOCALE.$lang.\"/global.php\") : isset($enabled_languages[$lang]))\n    ) {\n        return TRUE;\n    } else {\n        return FALSE;\n    }\n}\n\n/**\n * Create a selection list of possible languages in list\n *\n * @param string $selected_language\n *\n * @return string\n * @todo rename it from get_available_languages_list to a more proper name\n */\nfunction get_available_languages_list($selected_language = \"\") {\n    $enabled_languages = fusion_get_enabled_languages();\n    $res = \"\";\n    foreach ($enabled_languages as $language) {\n        $sel = ($selected_language == $language ? \" selected='selected'\" : \"\");\n        $label = str_replace('_', ' ', $language);\n        $res .= \"<option value='\".$language.\"' $sel>\".$label.\"</option>\\n\";\n    }\n\n    return $res;\n}\n\n/**\n * Get Language Switch Arrays\n *\n * @return array\n */\nfunction fusion_get_language_switch() {\n    static $language_switch = [];\n    if (empty($language_link)) {\n        $enabled_languages = fusion_get_enabled_languages();\n        foreach ($enabled_languages as $language => $language_name) {\n            $link = clean_request('lang='.$language, ['lang'], FALSE);\n            $language_switch[$language] = [\n                \"language_name\"   => $language_name,\n                \"language_icon_s\" => BASEDIR.\"locale/$language/$language-s.png\",\n                \"language_icon\"   => BASEDIR.\"locale/$language/$language.png\",\n                \"language_link\"   => $link,\n            ];\n        }\n    }\n\n    return (array)$language_switch;\n}\n\n/**\n * Language switcher function\n *\n * @param bool $icon\n */\nfunction lang_switcher($icon = TRUE) {\n    $locale = fusion_get_locale();\n    $enabled_languages = fusion_get_enabled_languages();\n    if (count($enabled_languages) <= 1) {\n        return;\n    }\n    openside($locale['global_ML102']);\n    echo \"<h5><strong>\".$locale['UM101'].\"</strong></h5>\\n\";\n    if ($icon) {\n        $language_switch = fusion_get_language_switch();\n        if (!empty($language_switch)) {\n            $row = 0;\n            foreach ($language_switch as $folder => $langData) {\n                $icon = \"<img class='display-block img-responsive' alt='\".$langData['language_name'].\"' src='\".$langData['language_icon'].\"' title='\".$langData['language_name'].\"' style='min-width:20px;'/>\\n\";\n                if ($folder != LANGUAGE) {\n                    $icon = \"<a class='side pull-left display-block' href='\".$langData['language_link'].\"'>\".$icon.\"</a>\\n \";\n                }\n                echo(($row > 0 and $row % 4 === 0) ? '<br />' : '');\n                echo \"<div class='display-inline-block clearfix'>\\n\".$icon.\"</div>\\n\";\n                $row++;\n            }\n        }\n    } else {\n        include_once INCLUDES.\"translate_include.php\";\n        echo openform('lang_menu_form', 'post', FUSION_SELF);\n        echo form_select('lang_menu', '', fusion_get_settings('locale'), [\"options\" => fusion_get_enabled_languages(), \"width\" => \"100%\"]);\n        echo closeform();\n        add_to_jquery(\"\n            function showflag(item){\n                return '<div class=\\\"clearfix\\\" style=\\\"width:100%; padding-left:10px;\\\"><img style=\\\"height:20px; margin-top:3px !important;\\\" class=\\\"img-responsive pull-left\\\" src=\\\"\".LOCALE.\"' + item.text + '/'+item.text + '-s.png\\\" alt=\\\"'+item.text + '\\\"/><span class=\\\"p-l-10\\\">'+ item.text +'</span></div>';\n            }\n            $('#lang_menu').select2({\n            placeholder: '\".$locale['global_ML103'].\"',\n            formatSelection: showflag,\n            escapeMarkup: function(m) { return m; },\n            formatResult: showflag,\n            }).bind('change', function(item) {\n                window.location.href = '\".FUSION_REQUEST.\"?lang='+$(this).val();\n            });\n        \");\n    }\n    closeside();\n}\n\n/**\n * Detect whether the system is installed and return the config file path\n *\n * @return string\n */\nfunction fusion_detect_installation() {\n    $config_path = dirname(__DIR__).'/config.php';\n    if (!is_file($config_path) or !filesize($config_path)) {\n        fusion_run_installer();\n    }\n\n    return $config_path;\n}\n\n/**\n * Get the array of enabled languages\n *\n * @return string[]\n */\nfunction fusion_get_enabled_languages() {\n    $settings = fusion_get_settings();\n    static $enabled_languages = NULL;\n\n    if ($enabled_languages === NULL) {\n        if (isset($settings['enabled_languages'])) {\n            $values = explode('.', $settings['enabled_languages']);\n            foreach ($values as $language_name) {\n                $enabled_languages[$language_name] = translate_lang_names($language_name);\n            }\n        }\n    }\n\n    return (array)$enabled_languages;\n}\n\n/**\n * Get the array of detected languages\n *\n * @return array\n */\nfunction fusion_get_detected_language() {\n    static $detected_languages = NULL;\n    if ($detected_languages === NULL) {\n        $all_languages = makefilelist(LOCALE, \".svn|.|..\", TRUE, \"folders\");\n        foreach ($all_languages as $language_name) {\n            $detected_languages[$language_name] = translate_lang_names($language_name);\n        }\n    }\n\n    return (array)$detected_languages;\n}\n\n/**\n * Log user actions\n *\n * @param int    $user_id\n * @param string $column_name affected column\n * @param string $new_value\n * @param string $old_value\n */\nfunction save_user_log($user_id, $column_name, $new_value, $old_value) {\n    $data = [\n        \"userlog_id\"        => 0,\n        \"userlog_user_id\"   => $user_id,\n        \"userlog_field\"     => $column_name,\n        \"userlog_value_new\" => $new_value,\n        \"userlog_value_old\" => $old_value,\n        \"userlog_timestamp\" => time(),\n    ];\n    dbquery_insert(DB_USER_LOG, $data, \"save\", [\"keep_session\" => TRUE]);\n}\n\n/**\n * Minify JS Code\n *\n * @param string $code\n *\n * @return string\n */\nfunction jsminify($code) {\n    $minifier = new \\PHPFusion\\Minify\\JS($code);\n\n    return $minifier->minify();\n}\n\n/**\n * A wrapper function for file_put_contents with cache invalidation\n * If opcache is enabled on the server, this function will write the file\n * as the original file_put_contents and invalidate the cache of the file.\n * It is needed when you create a file dynamically and want to include it\n * before the cache is invalidated. Redirection does not matter.\n *\n * @param string          $file file path\n * @param string|string[] $data\n * @param int             $flags\n *\n * @return int Number of written bytes\n */\nfunction write_file($file, $data, $flags = NULL) {\n    $bytes = NULL;\n    if ($flags === NULL) {\n        $bytes = \\file_put_contents($file, $data);\n    } else {\n        $bytes = \\file_put_contents($file, $data, $flags);\n    }\n    if (function_exists('opcache_invalidate')) {\n        \\opcache_invalidate($file, TRUE);\n    }\n\n    return $bytes;\n}\n\n/**\n * Returns nearest data unit\n *\n * @param int $total_bit\n *\n * @return int\n */\nfunction calculate_byte($total_bit) {\n    $calc_opts = fusion_get_locale('1020', LOCALE.LOCALESET.\"admin/settings.php\");\n    foreach ($calc_opts as $byte => $val) {\n        if ($total_bit / $byte <= 999) {\n            return (int)$byte;\n        }\n    }\n\n    return 1048576;\n}\n\n/**\n * Remove folder and all files/subdirectories\n *\n * @param string $dir\n */\nfunction rrmdir($dir) {\n    if (is_dir($dir)) {\n        $objects = scandir($dir);\n        foreach ($objects as $object) {\n            if ($object != '.' && $object != '..') {\n                if (filetype($dir.'/'.$object) == 'dir') {\n                    rrmdir($dir.'/'.$object);\n                } else {\n                    unlink($dir.'/'.$object);\n                }\n            }\n        }\n        reset($objects);\n        rmdir($dir);\n    }\n}\n\n/**\n * Alternative to rename() that works on Windows\n *\n * @param string $origin\n * @param string $target\n */\nfunction fusion_rename($origin, $target) {\n    if ($origin != \".\" && $origin != \"..\" && !is_dir($origin)) {\n        if (TRUE !== @rename($origin, $target)) {\n            copy($origin, $target);\n            unlink($origin);\n        }\n    }\n}\n\n\n/**\n * cURL method to get any contents for Apache that does not support SSL for remote paths\n *\n * @param $url\n *\n * @return bool|string\n */\nfunction fusion_get_contents($url) {\n    $ch = curl_init($url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n    $data = curl_exec($ch);\n    curl_close($ch);\n    return $data;\n}\n\n/**\n * Checks whether a string is JSON or not\n *\n * @param $string\n *\n * @return bool\n */\nfunction isJson($string) {\n    json_decode($string);\n    return (json_last_error() == JSON_ERROR_NONE);\n}\n\n/**\n * Cached script loader\n * This function will cache the path that has been added and avoid duplicates.\n *\n * @param string $file_path     source file\n * @param string $file_type     script, css\n * @param bool   $html          return as html tags instead add to output handler\n * @param bool   $cached        false to invalidate browser's cache\n * @param bool   $show_warnings true to show error notices\n *\n * @return string\n */\nfunction fusion_load_script(string $file_path, $file_type = \"script\", $html = FALSE, $cached = TRUE, $show_warnings = FALSE): string {\n    static $paths = [];\n    // v10\n    if (function_exists(\"auto_file\")) {\n        $file_path = auto_file($file_path, $show_warnings);\n    } else {\n        $file_info = pathinfo($file_path);\n        try {\n            if (isset($file_info['dirname']) && isset($file_info['basename']) && isset($file_info['extension']) && isset($file_info['filename'])) {\n                $file = $file_info['dirname'].DIRECTORY_SEPARATOR.$file_info['basename'];\n                $min_file = $file_info['dirname'].DIRECTORY_SEPARATOR.$file_info['filename'].'.min.'.$file_info['extension'];\n                $return_file = $file;\n                if (file_exists($min_file) && !fusion_get_settings(\"devmode\")) {\n                    $return_file = $min_file;\n                }\n                $mtime = filemtime($return_file);\n                $file_path = $return_file.\"?v=\".$mtime;\n                if (!$cached) {\n                    $file_path = $return_file;\n                }\n            }\n\n        } catch (Exception $e) {\n            setError(E_COMPILE_ERROR, $e->getMessage(), $e->getFile(), $e->getLine());\n        }\n    }\n\n    if (empty($paths[$file_path])) {\n\n        $paths[$file_path] = $file_path;\n\n        if ($file_type == \"script\") {\n\n            $html_tag = \"<script src='$file_path'></script>\\n\";\n            if ($html === TRUE) {\n                return $html_tag;\n            }\n            add_to_footer($html_tag);\n\n        } else if ($file_type == \"css\") {\n            $html_tag = \"<link rel='stylesheet' href='$file_path' />\\n\";\n            if ($html === TRUE) {\n                return $html_tag;\n            }\n            add_to_head($html_tag);\n        }\n    }\n\n    return \"\";\n}\n", "<?php\n/*-------------------------------------------------------+\n| PHPFusion Content Management System\n| Copyright (C) PHP Fusion Inc\n| https://phpfusion.com/\n+--------------------------------------------------------+\n| Filename: poll_classes.php\n| Author: Core Development Team (coredevs@phpfusion.com)\n+--------------------------------------------------------+\n| This program is released as free software under the\n| Affero GPL license. You can redistribute it and/or\n| modify it under the terms of this license which you\n| can read by viewing the included agpl.txt or online\n| at www.gnu.org/licenses/agpl.html. Removal of this\n| copyright header is strictly prohibited without\n| written permission from the original author(s).\n+--------------------------------------------------------*/\n\nuse PHPFusion\\QuantumFields;\n\n/**\n * Class MemberPoll\n */\nclass MemberPoll {\n    private static $instance = NULL;\n    private static $locale = [];\n    private static $limit = 4;\n    private $data = [\n        'poll_id'         => 0,\n        'poll_title'      => '',\n        'poll_opt'        => ['', ''],\n        'poll_started'    => '',\n        'poll_ended'      => '',\n        'poll_visibility' => ''\n    ];\n\n    public function __construct() {\n        self::$locale = fusion_get_locale(\"\", POLLS_LOCALE);\n\n        $_GET['action'] = isset($_GET['action']) ? $_GET['action'] : '';\n\n        switch ($_GET['action']) {\n            case 'delete':\n                self::delete_poll($_GET['poll_id']);\n                break;\n            case 'poll_add':\n                self::start_poll($_GET['poll_id']);\n                break;\n            case 'poll_lock':\n                self::poll_lock($_GET['poll_id']);\n                break;\n            case 'poll_unlock':\n                self::poll_unlock($_GET['poll_id']);\n                break;\n            default:\n                break;\n        }\n\n        self::set_polldb();\n        if (defined('ADMIN_PANEL')) {\n            add_to_title(self::$locale['POLL_001']);\n            self::set_admin_polldb();\n        }\n    }\n\n    private static function delete_poll($id) {\n        if (self::verify_poll($id)) {\n            dbquery(\"DELETE FROM \".DB_POLLS.\" WHERE poll_id='\".intval($id).\"'\");\n            addNotice('success', self::$locale['POLL_007']);\n            redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n        }\n    }\n\n    static function verify_poll($id) {\n        if (isnum($id)) {\n            return dbcount(\"(poll_id)\", DB_POLLS, \"poll_id='\".intval($id).\"'\");\n        }\n\n        return FALSE;\n    }\n\n    private static function start_poll($id) {\n        if (self::verify_poll($id)) {\n            dbquery(\"UPDATE \".DB_POLLS.\" SET poll_started='\".time().\"' WHERE poll_id='\".intval($id).\"'\");\n            addNotice('success', self::$locale['POLL_008']);\n            redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n        }\n    }\n\n    private static function poll_lock($id) {\n        if (self::verify_poll($id)) {\n            dbquery(\"UPDATE \".DB_POLLS.\" SET poll_ended='\".time().\"' WHERE poll_id='\".intval($id).\"'\");\n\n            addNotice('success', self::$locale['POLL_009']);\n            redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n        }\n    }\n\n    private static function poll_unlock($id) {\n        if (self::verify_poll($id)) {\n            dbquery(\"UPDATE \".DB_POLLS.\" SET poll_ended='0' WHERE poll_id='\".intval($id).\"'\");\n\n            addNotice('success', self::$locale['POLL_010']);\n            redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n        }\n    }\n\n    private function set_polldb() {\n\n        $_poll_id = post(\"poll_id\", FILTER_VALIDATE_INT);\n\n        if (check_post(\"cast_vote\") && check_post(\"check\") && $_poll_id) {\n\n            $result = dbquery(\"SELECT v.vote_user, v.vote_id, v.vote_user_ip, v.vote_user_ip_type, p.poll_id, p.poll_opt, p.poll_started, p.poll_ended\n                FROM \".DB_POLLS.\" p\n                LEFT JOIN \".DB_POLL_VOTES.\" v ON p.poll_id = v.poll_id\n                WHERE \".groupaccess('poll_visibility').\" AND p.poll_id=:pid\n                ORDER BY v.vote_id\n            \", [\":pid\" => $_poll_id]);\n\n            $data = [];\n\n            while ($pdata = dbarray($result)) {\n                $voters[] = iMEMBER ? $pdata['vote_user'] : $pdata['vote_user_ip'];\n                $data = $pdata;\n            }\n\n            if ($data['poll_started'] < time() && (empty($data['poll_ended']) or ($data['poll_ended'] > time())) && (empty($voters) || !empty($data[\"poll_opt\"]))) {\n                $vote_save = [\n                    'vote_user'         => iMEMBER ? fusion_get_userdata('user_id') : 0,\n                    'vote_user_ip'      => USER_IP,\n                    'vote_user_ip_type' => USER_IP_TYPE,\n                    'vote_opt'          => sanitizer('check', 0, 'check'),\n                    'poll_id'           => $_poll_id\n                ];\n\n                if (fusion_safe()) {\n\n                    dbquery_insert(DB_POLL_VOTES, $vote_save, \"save\");\n                    addNotice('success', \"<i class='fa fa-check-square-o fa-lg m-r-10'></i>\".self::$locale['POLL_013']);\n                }\n\n            } else {\n                addNotice('warning', \"<i class='fa fa-close fa-lg m-r-10'></i>\".self::$locale['POLL_014']);\n            }\n\n            redirect(clean_request());\n        }\n    }\n\n    private function set_admin_polldb() {\n        if (check_post(\"save\")) {\n\n            $poll_opt = [];\n            $i = 0;\n            while ($i < post(\"opt_count\")) {\n                foreach (post([\"poll_opt_\".$i]) as $key => $value) {\n                    if ($value != '') {\n                        $poll_opt[$i][$key] = $value;\n                    }\n                }\n                $i++;\n            }\n            $poll_option = array_filter($poll_opt);\n            $_poll_id = (int)get(\"poll_id\", FILTER_VALIDATE_INT);\n\n            $this->data = [\n                'poll_id'         => $_poll_id,\n                'poll_title'      => sanitizer([\"poll_title\"], \"\", 'poll_title', TRUE),\n                'poll_opt'        => htmlspecialchars_decode(descript(serialize($poll_option))),\n                'poll_visibility' => form_sanitizer($_POST['poll_visibility'], 0, 'poll_visibility'),\n                'poll_started'    => form_sanitizer($_POST['poll_started'], 0, 'poll_started'),\n                'poll_ended'      => (isset($_POST['poll_ended']) ? form_sanitizer($_POST['poll_ended'], 0, 'poll_ended') : 0)\n            ];\n            if (fusion_safe()) {\n\n                addNotice(\"success\", $this->data['poll_id'] == 0 ? self::$locale['POLL_005'] : self::$locale['POLL_006']);\n                dbquery_insert(DB_POLLS, $this->data, ($this->data['poll_id'] == 0 ? \"save\" : \"update\"));\n                redirect(clean_request(\"\", [\"section=poll\", \"aid\"], TRUE));\n            }\n\n            $this->data[\"poll_opt\"] = $poll_option;\n        }\n    }\n\n    public static function getInstance(): ?MemberPoll {\n        if (self::$instance === NULL) {\n            self::$instance = new static();\n        }\n\n        return self::$instance;\n    }\n\n    public function display_admin() {\n        add_breadcrumb(['link' => INFUSIONS.'member_poll_panel/poll_admin.php'.fusion_get_aidlink(), 'title' => self::$locale['POLL_001']]);\n\n        if (check_post(\"cancel\")) {\n            redirect(clean_request('section=poll', ['aid'], TRUE));\n        }\n\n        $allowed_section = [\"poll\", \"poll_vote\"];\n        $_GET['section'] = isset($_GET['section']) && in_array($_GET['section'], $allowed_section) ? $_GET['section'] : 'poll';\n        $edit = (isset($_GET['action']) && $_GET['action'] == 'edit') && isset($_GET['poll_id']);\n        $_GET['poll_id'] = isset($_GET['poll_id']) && isnum($_GET['poll_id']) ? $_GET['poll_id'] : 0;\n        if (isset($_GET['section']) && $_GET['section'] == 'poll_vote') {\n            add_breadcrumb(['link' => FUSION_REQUEST, 'title' => $edit ? self::$locale['POLL_042'] : self::$locale['POLL_043']]);\n        }\n\n        opentable(self::$locale['POLL_001']);\n        $master_tab_title['title'][] = self::$locale['POLL_001'];\n        $master_tab_title['id'][] = \"poll\";\n        $master_tab_title['icon'][] = \"fa fa-bar-chart\";\n        $master_tab_title['title'][] = $edit ? self::$locale['POLL_042'] : self::$locale['POLL_043'];\n        $master_tab_title['id'][] = \"poll_vote\";\n        $master_tab_title['icon'][] = $edit ? 'fa fa-pencil' : 'fa fa-plus';\n\n        echo opentab($master_tab_title, $_GET['section'], \"poll\", TRUE);\n        switch ($_GET['section']) {\n            case \"poll_vote\":\n                $this->poll_form();\n                break;\n            default:\n                $this->poll_listing();\n                break;\n        }\n        echo closetab();\n        closetable();\n    }\n\n    public function poll_form() {\n        fusion_confirm_exit();\n\n        $this->data['poll_started'] = time();\n\n        $_poll_id = get(\"poll_id\", FILTER_VALIDATE_INT);\n        if (get(\"action\") === \"edit\" && $_poll_id) {\n            if (self::verify_poll($_poll_id)) {\n                $this->data = $this->_selectFormPoll($_poll_id);\n\n                $this->data['poll_title'] = unserialize($this->data['poll_title']);\n                $this->data['poll_opt'] = unserialize($this->data['poll_opt']);\n            }\n        }\n\n        if (check_post(\"addoption\")) {\n\n            $this->data['poll_title'] = stripinput($_POST['poll_title']);\n            $this->data['poll_visibility'] = stripinput($_POST['poll_visibility']);\n            $i = 0;\n            while ($i < $_POST['opt_count']) {\n                $opt_field = \"poll_opt_\".$i;\n                $this->data['poll_opt'][$i] = \\defender::sanitize_array($_POST[$opt_field]);\n                $i++;\n            }\n            // Add new selection\n            $this->data['poll_opt'][$i] = '';\n        }\n\n        $opt_count = count($this->data['poll_opt']);\n        echo openform('addcat', 'post', FORM_REQUEST, ['class' => 'spacer-sm']);\n        echo \"<div class='clearfix spacer-sm'>\\n\";\n        echo form_button('addoption', self::$locale['POLL_050'], self::$locale['POLL_050'], [\n            'class'    => 'btn-primary m-r-10',\n            'inline'   => TRUE,\n            'icon'     => 'fa fa-plus',\n            'input_id' => 'button_1'\n\n        ]);\n        echo form_button('save', self::$locale['POLL_052'], self::$locale['POLL_052'], [\n            'class'    => 'btn-success m-r-10',\n            'inline'   => TRUE,\n            'icon'     => 'fa fa-hdd-o',\n            'input_id' => 'button_2'\n        ]);\n        echo form_button('cancel', self::$locale['cancel'], self::$locale['cancel'], ['input_id' => 'button_3']);\n        echo \"</div>\\n\";\n\n        echo form_hidden('poll_id', '', $this->data['poll_id']);\n        echo form_hidden('opt_count', '', $opt_count);\n        echo \"<div class='row'>\\n\";\n        echo \"<div class='col-xs-12 col-sm-6 col-md-8 col-lg-9'>\\n\";\n        echo QuantumFields::quantum_multilocale_fields('poll_title', self::$locale['POLL_045'], $this->data['poll_title'], [\n            'required' => TRUE, 'inline' => FALSE, 'placeholder' => self::$locale['POLL_069']]);\n\n        echo \"<div class='panel panel-default'>\\n\";\n        echo \"<div class='panel-body'>\\n\";\n        $i = 1;\n        foreach ($this->data['poll_opt'] as $im1 => $data1) {\n            $nam = \"poll_opt_$im1\";\n            echo QuantumFields::quantum_multilocale_fields($nam, self::$locale['POLL_046'].' '.$im1, $data1, [\n                'required' => TRUE, 'inline' => TRUE, 'placeholder' => self::$locale['POLL_070']\n            ]);\n            echo($i < $opt_count ? \"<hr/>\\n\" : '');\n            $i++;\n        }\n        echo \"</div>\\n</div>\\n\";\n\n        echo \"</div><div class='col-xs-12 col-sm-6 col-md-4 col-lg-3'>\\n\";\n        openside('');\n        echo form_select('poll_visibility', self::$locale['POLL_044'], $this->data['poll_visibility'], [\n            \"inline\"      => FALSE,\n            'width'       => '100%',\n            'inner_width' => '100%',\n            'options'     => fusion_get_groups()\n        ]);\n        echo form_datepicker('poll_started', self::$locale['POLL_048'], $this->data['poll_started'], ['inline' => FALSE]);\n        echo form_datepicker('poll_ended', self::$locale['POLL_049'], $this->data['poll_ended'], ['inline' => FALSE]);\n        closeside();\n        echo \"</div>\\n</div>\\n\";\n\n        echo form_button('addoption', self::$locale['POLL_050'], self::$locale['POLL_050'], [\n            'class'  => 'btn-primary m-r-10',\n            'inline' => TRUE,\n            'icon'   => 'fa fa-plus'\n        ]);\n\n        echo form_button('save', self::$locale['POLL_052'], self::$locale['POLL_052'], [\n            'class'  => 'btn-success m-r-10',\n            'inline' => TRUE,\n            'icon'   => 'fa fa-hdd-o'\n        ]);\n        echo form_button('cancel', self::$locale['cancel'], self::$locale['cancel']);\n        echo closeform();\n    }\n\n    public function _selectFormPoll($id) {\n        $result = dbquery(\"SELECT poll_id, poll_title, poll_opt, poll_started, poll_ended, poll_visibility\n            FROM \".DB_POLLS.\"\n            WHERE poll_id='\".intval($id).\"'\n        \");\n        $list = [];\n        if (dbrows($result) > 0) {\n            $list = dbarray($result);\n        }\n\n        return $list;\n    }\n\n    public function poll_listing() {\n        $aidlink = fusion_get_aidlink();\n        $total_rows = dbcount(\"(poll_id)\", DB_POLLS, groupaccess('poll_visibility'));\n        $rowstart = isset($_GET['rowstart']) && isnum($_GET['rowstart']) && ($_GET['rowstart'] <= $total_rows) ? $_GET['rowstart'] : 0;\n        $result = $this->_selectDB($rowstart);\n        $rows = dbrows($result);\n\n        echo \"<div class='clearfix'>\\n\";\n        echo \"<span class='pull-right m-t-10'>\".sprintf(self::$locale['POLL_011'], $rows, $total_rows).\"</span>\\n\";\n        echo \"</div>\\n\";\n\n        echo ($total_rows > $rows) ? makepagenav($rowstart, self::$limit, $total_rows, self::$limit, clean_request(\"\", [\"aid\", \"section\"], TRUE).\"&amp;\") : \"\";\n\n        if ($rows > 0) {\n            echo \"<div class='row m-t-20'>\\n\";\n            while ($data = dbarray($result)) {\n                $title = unserialize($data['poll_title']);\n                $poll_opt = unserialize($data['poll_opt']);\n                echo \"<div class='col-xs-12 col-sm-3'>\\n\";\n                echo \"<div class='panel panel-default'>\\n\";\n                echo \"<div class='panel-heading text-left'>\\n\";\n                foreach ($title as $key => $info) {\n                    echo \"<p class='m-b-0'>\".(!empty($info) ? translate_lang_names($key).\": \".$info : $info).\"</p>\\n\";\n                }\n                echo '<hr>';\n                echo \"<span>\".self::$locale['POLL_048'].\" \".showdate(\"shortdate\", $data['poll_started']).\"</span>\\n\";\n                echo \"<span class='badge'>\".self::$locale['POLL_064'].' '.($data['poll_started'] > time() ? self::$locale['POLL_065'] : (!empty($data['poll_ended']) && ($data['poll_ended'] < time()) ? self::$locale['POLL_024'] : self::$locale['POLL_067'])).\"</span>\\n\";\n                if (!empty($data['poll_ended']) && $data['poll_ended'] < time()) {\n                    echo \"<p>\".self::$locale['POLL_024'].\": \".showdate(\"shortdate\", $data['poll_ended']).\"</p>\\n\";\n                }\n                echo \"</div>\\n\";\n\n                echo \"<div class='panel-body'>\\n\";\n                $db_info = dbcount(\"(vote_opt)\", DB_POLL_VOTES, \"poll_id='\".$data['poll_id'].\"'\");\n                foreach ($poll_opt as $keys => $data1) {\n                    $text = \"\";\n                    foreach ($data1 as $key => $inf) {\n                        $text .= \"<p>\".(!empty($inf) ? translate_lang_names($key).\": \".$inf : $inf).\"</p>\\n\";\n                    }\n                    $num_votes = dbcount(\"(vote_opt)\", DB_POLL_VOTES, \"vote_opt='\".$keys.\"' AND poll_id='\".$data['poll_id'].\"'\");\n                    $opt_votes = ($num_votes ? number_format(($num_votes / $db_info) * 100, 0) : number_format(0 * 100, 0));\n                    echo progress_bar($opt_votes, $text);\n                    echo \"<p><strong>\".$opt_votes.\"% [\".(format_word($num_votes, self::$locale['POLL_040'])).\"]</strong></p>\\n\";\n                }\n                echo \"<p><strong>\".self::$locale['POLL_060'].' '.$db_info.\"</strong></p>\\n\";\n                echo \"</div>\\n\";\n\n                echo \"<div class='panel-footer'>\\n\";\n                echo \"<div class='dropdown'>\\n\";\n                echo \"<button id='ddp\".$data['poll_id'].\"' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false' class='btn btn-default dropdown-toggle btn-block' type='button'>\".self::$locale['POLL_021'].\" <span class='caret'></span></button>\\n\";\n                echo \"<ul class='dropdown-menu' aria-labelledby='ddp\".$data['poll_id'].\"'>\\n\";\n                echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll_vote&amp;action=edit&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-edit fa-fw'></i> \".self::$locale['edit'].\"</a></li>\\n\";\n                if ($data['poll_started'] > time()) {\n                    echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll&amp;action=poll_add&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-play fa-fw'></i> \".self::$locale['POLL_022'].\"</a></li>\\n\";\n                }\n                if (!empty($data['poll_ended']) && ($data['poll_ended'] < time())) {\n                    echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll&amp;action=poll_unlock&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-refresh fa-fw'></i> \".self::$locale['POLL_023'].\"</a></li>\\n\";\n                }\n                if ($data['poll_started'] < time() && empty($data['poll_ended']) or $data['poll_ended'] > time()) {\n                    echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll&amp;action=poll_lock&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-times fa-fw'></i> \".self::$locale['POLL_024'].\"</a></li>\\n\";\n                }\n                echo \"<li class='divider'></li>\\n\";\n                echo \"<li><a href='\".FUSION_SELF.$aidlink.\"&amp;section=poll_vote&amp;action=delete&amp;poll_id=\".$data['poll_id'].\"'><i class='fa fa-trash fa-fw'></i> \".self::$locale['delete'].\"</a></li>\\n\";\n                echo \"</ul>\\n\";\n                echo \"</div>\\n\";\n                echo \"</div>\\n\";\n\n                echo \"</div>\\n\";\n                echo \"</div>\\n\"; // .col-xs-12\n            }\n            echo \"</div>\\n\";\n        } else {\n            echo \"<div class='well text-center'>\".self::$locale['POLL_012'].\"</div>\\n\";\n        }\n    }\n\n    public function _selectDB($rows) {\n        return dbquery(\"SELECT poll_id, poll_title, poll_opt, poll_started, poll_ended, poll_visibility\n            FROM \".DB_POLLS.\"\n            WHERE \".groupaccess('poll_visibility').\"\n            ORDER BY poll_id DESC\n            LIMIT \".intval($rows).\", \".self::$limit\n        );\n    }\n\n    public function DisplayPoll() {\n\n        $res = $this->_selectPoll();\n        if (!$res) {\n            return;\n        }\n\n        $poll_title = unserialize($res['poll_title']);\n        $poll_opt = unserialize($res['poll_opt']);\n        $data = [\n            'poll_id'         => $res['poll_id'],\n            'poll_title'      => !empty($poll_title[LANGUAGE]) ? $poll_title[LANGUAGE] : \"\",\n            'poll_started'    => $res['poll_started'],\n            'poll_ended'      => $res['poll_ended'],\n            'poll_visibility' => $res['poll_visibility'],\n        ];\n\n        for ($i = 0; $i < count($poll_opt); $i++) {\n            $data['poll_option'][$i] = !empty($poll_opt[$i][LANGUAGE]) ? $poll_opt[$i][LANGUAGE] : \"\";\n        }\n\n        $render = [];\n\n        if (!empty($data)) {\n            $data_user = checkgroup($data['poll_visibility']) && !empty($data['poll_title']) && ($data['poll_ended'] == 0 || $data['poll_ended'] > time()) ? $this->_selectVote(fusion_get_userdata((iMEMBER ? 'user_id' : 'user_ip')), $data['poll_id']) : TRUE;\n\n            if ($data_user == FALSE) {\n                $render['poll_table'][0]['max_vote'] = $this->_countVote(\"poll_id='\".$data['poll_id'].\"'\");\n                $render['poll_table'][0]['poll_title'] = $data['poll_title'];\n\n                foreach ($data['poll_option'] as $im1 => $data1) {\n                    $render['poll_table'][0]['poll_option'][] = form_checkbox('check', $data1, '-1', ['reverse_label' => TRUE, 'type' => 'radio', 'value' => $im1, 'input_id' => 'check-'.$im1]);\n                }\n\n                $render['poll_table'][0]['openform'] = openform('voteform', 'post', clean_request(), ['max_tokens'=>1]).form_hidden('poll_id', '', $data['poll_id']);\n                $render['poll_table'][0]['button'] = form_button(\"cast_vote\", self::$locale['POLL_020'], self::$locale['POLL_020'], ['class' => 'btn-primary']);\n                $render['poll_table'][0]['closeform'] = closeform();\n\n            } else {\n                if (!empty($data['poll_title']) && $data['poll_started'] < time()) {\n                    $render['poll_table'][0]['max_vote'] = $this->_countVote(\"poll_id='\".$data['poll_id'].\"'\");\n                    $render['poll_table'][0]['poll_title'] = $data['poll_title'];\n\n                    foreach ($data['poll_option'] as $im1 => $data1) {\n                        $num_votes = $this->_countVote(\"vote_opt='\".$im1.\"' AND poll_id='\".$data['poll_id'].\"'\");\n                        $opt_votes = ($num_votes ? number_format(($num_votes / $render['poll_table'][0]['max_vote']) * 100, 0) : number_format(0 * 100, 0));\n                        $render['poll_table'][0]['poll_option'][] = progress_bar($opt_votes, $data1);\n                        $render['poll_table'][0]['poll_option'][] = $opt_votes.\"% [\".format_word($num_votes, self::$locale['POLL_040']).\"]\";\n                    }\n\n                    $render['poll_table'][0]['poll_foot'][] = self::$locale['POLL_060'].\" \".$render['poll_table'][0]['max_vote'];\n                    $render['poll_table'][0]['poll_foot'][] = self::$locale['POLL_048'].\" \".showdate(\"shortdate\", $data['poll_started']);\n\n                    if ($data['poll_started'] < time() && (!empty($data['poll_ended']) && ($data['poll_ended'] < time()))) {\n                        $render['poll_table'][0]['poll_foot'][] = self::$locale['POLL_049'].\": \".showdate(\"shortdate\", $data['poll_ended']);\n                    }\n                }\n            }\n\n            $render['poll_tablename'] = self::$locale['POLL_001'];\n\n            if (dbcount(\"(poll_id)\", DB_POLLS, groupaccess('poll_visibility')) > 1) {\n                $render['poll_arch'] = \"<a class='btn btn-default btn-sm' href='\".INFUSIONS.\"member_poll_panel/polls_archive.php'>\".self::$locale['POLL_063'].\"</a>\";\n            }\n\n            render_poll($render);\n        }\n    }\n\n    public function _selectPoll() {\n        $result = dbquery(\"SELECT poll_id, poll_title, poll_opt, poll_started, poll_ended, poll_visibility\n            FROM \".DB_POLLS.\"\n            WHERE poll_id=COALESCE(\n                (\n                    SELECT poll_id\n                    FROM \".DB_POLLS.\"\n                    WHERE \".groupaccess('poll_visibility').\" AND poll_started < \".time().\" AND (poll_ended=0 OR poll_ended > \".time().\")\n                    ORDER BY poll_started DESC\n                    LIMIT 1\n                ),\n                (\n                    SELECT poll_id\n                    FROM \".DB_POLLS.\"\n                    WHERE \".groupaccess('poll_visibility').\" AND poll_started < \".time().\"\n                    ORDER BY poll_started DESC\n                    LIMIT 1\n                )\n            )\n        \");\n\n        if (dbrows($result)) {\n            return dbarray($result);\n        } else {\n            return NULL;\n        }\n    }\n\n    public function _selectVote($user, $pollid) {\n        $whr = iMEMBER ? \"vote_user='\".$user.\"'\" : \"vote_user_ip='\".USER_IP.\"'\";\n        $result = dbquery(\"SELECT vote_id, vote_user, vote_opt, vote_user_ip, poll_id\n            FROM \".DB_POLL_VOTES.\"\n            WHERE poll_id='\".$pollid.\"' AND \".$whr\n        );\n\n        if (!dbrows($result)) {\n            return FALSE;\n        } else {\n            return TRUE;\n        }\n    }\n\n    public function _countVote($opt) {\n        return dbcount(\"(vote_id)\", DB_POLL_VOTES, $opt);\n    }\n\n    public function PollArchive() {\n        opentable(self::$locale['POLL_002']);\n        add_to_title(self::$locale['POLL_002']);\n\n        $total_rows = dbcount(\"(poll_id)\", DB_POLLS, groupaccess('poll_visibility'));\n        $rowstart = isset($_GET['rowstart']) && isnum($_GET['rowstart']) && ($_GET['rowstart'] <= $total_rows) ? $_GET['rowstart'] : 0;\n        $result = $this->_selectDB($rowstart);\n        $rows = dbrows($result);\n\n        if ($rows > 0) {\n            echo \"<div class='row m-t-20'>\\n\";\n            while ($data = dbarray($result)) {\n                $title = unserialize($data['poll_title']);\n                $poll_opt = unserialize($data['poll_opt']);\n\n                echo \"<div class='col-xs-12 col-sm-3'>\\n\";\n                echo \"<div class='panel panel-default'>\\n\";\n                echo \"<div class='panel-heading text-left'>\\n\";\n                echo !empty($title[LANGUAGE]) ? $title[LANGUAGE] : \"\";\n                echo \"</div>\\n\";\n\n                echo \"<div class='panel-body'>\\n\";\n                $db_info = dbcount(\"(vote_opt)\", DB_POLL_VOTES, \"poll_id='\".$data['poll_id'].\"'\");\n\n                foreach ($poll_opt as $keys => $data1) {\n                    $text = !empty($data1[LANGUAGE]) ? $data1[LANGUAGE] : \"\";\n                    $num_votes = dbcount(\"(vote_opt)\", DB_POLL_VOTES, \"vote_opt='\".$keys.\"' AND poll_id='\".$data['poll_id'].\"'\");\n                    $opt_votes = ($num_votes ? number_format(($num_votes / $db_info) * 100, 0) : number_format(0 * 100, 0));\n                    echo progress_bar($opt_votes, $text);\n                    echo \"<p><strong>\".$opt_votes.\"% [\".format_word($num_votes, self::$locale['POLL_040']).\"]</strong></p>\\n\";\n                }\n                echo \"</div>\\n\";\n\n                echo \"<div class='panel-footer'>\\n\";\n                echo \"<p class='m-b-0'><strong>\".self::$locale['POLL_060'].' '.$db_info.\"</strong></p>\\n\";\n                echo \"<span>\".self::$locale['POLL_048'].\" \".showdate(\"shortdate\", $data['poll_started']).\"</span>\\n\";\n                echo \"<span class='badge'>\".self::$locale['POLL_064'].' '.($data['poll_started'] > time() ? self::$locale['POLL_065'] : (!empty($data['poll_ended']) && ($data['poll_ended'] < time()) ? self::$locale['POLL_024'] : self::$locale['POLL_067'])).\"</span>\\n\";\n\n                if (!empty($data['poll_ended']) && $data['poll_ended'] < time()) {\n                    echo \"<p>\".self::$locale['POLL_024'].\": \".showdate(\"shortdate\", $data['poll_ended']).\"</p>\\n\";\n                }\n\n                echo \"</div>\\n\";\n                echo \"</div>\\n\";\n                echo \"</div>\\n\"; // .col-xs-12\n            }\n            echo \"</div>\\n\";\n            echo ($total_rows > $rows) ? '<div class=\"text-center\">'.makepagenav($rowstart, self::$limit, $total_rows, self::$limit, INFUSIONS.\"member_poll_panel/polls_archive.php?\").'</div>' : \"\";\n        } else {\n            echo \"<div class='well text-center'>\".self::$locale['POLL_012'].\"</div>\\n\";\n        }\n        closetable();\n    }\n}\n"], "filenames": ["includes/core_functions_include.php", "infusions/member_poll_panel/poll_classes.php"], "buggy_code_start_loc": [1976, 458], "buggy_code_end_loc": [1977, 460], "fixing_code_start_loc": [1976, 458], "fixing_code_end_loc": [1977, 462], "type": "CWE-732", "message": "An issue in Php-Fusion v9.03.90 fixed in v9.10.00 allows authenticated attackers to cause a Distributed Denial of Service via the Polling feature.", "other": {"cve": {"id": "CVE-2021-3172", "sourceIdentifier": "cve@mitre.org", "published": "2023-02-17T18:15:11.680", "lastModified": "2023-03-01T13:32:28.477", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue in Php-Fusion v9.03.90 fixed in v9.10.00 allows authenticated attackers to cause a Distributed Denial of Service via the Polling feature."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-732"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:php-fusion:php-fusion:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.03.90", "versionEndExcluding": "9.10.00", "matchCriteriaId": "E7BA6849-FDCE-4FD9-9ED9-B66B005F2945"}]}]}], "references": [{"url": "https://github.com/PHPFusion/PHPFusion/commit/7b8df6925cc7cfd8585d4f34d9120ff3a2e5753e", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/PHPFusion/PHPFusion/issues/2351", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PHPFusion/PHPFusion/commit/7b8df6925cc7cfd8585d4f34d9120ff3a2e5753e"}}