{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer;\n\nuse LogicException;\nuse TYPO3\\HtmlSanitizer\\Behavior\\CdataSection;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Comment;\nuse TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Tag;\n\n/**\n * Declares behavior used by node visitors\n * (and any component used during sanitization)\n */\nclass Behavior\n{\n    /**\n     * not having any behavioral capabilities\n     */\n    public const BLUNT = 0;\n\n    /**\n     * in case an unexpected tag was found, encode the whole tag as HTML\n     */\n    public const ENCODE_INVALID_TAG = 1;\n\n    /**\n     * in case an unexpected attribute was found, encode the whole tag as HTML\n     */\n    public const ENCODE_INVALID_ATTR = 2;\n\n    /**\n     * remove children at nodes that did not expect children\n     */\n    public const REMOVE_UNEXPECTED_CHILDREN = 4;\n\n    /**\n     * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * custom elements must contain a hyphen (`-`), start with ASCII lower alpha\n     */\n    public const ALLOW_CUSTOM_ELEMENTS = 8;\n\n    /**\n     * in case an unexpected comment was found, encode the whole comment as HTML\n     */\n    public const ENCODE_INVALID_COMMENT = 16;\n\n    /**\n     * in case an unexpected CDATA section was found, encode the whole CDATA section as HTML\n     */\n    public const ENCODE_INVALID_CDATA_SECTION = 32;\n\n    /**\n     * @var int\n     */\n    protected $flags = 0;\n\n    /**\n     * @var string\n     */\n    protected $name = 'undefined';\n\n    /**\n     * Node names as array index, e.g. `['strong' => new Tag('strong', '#comment' => new Comment()]`\n     * @var array<string, ?NodeInterface>\n     */\n    protected $nodes = [];\n\n    public function __construct()\n    {\n        // v2.1.0: adding `#comment` and `#cdata-section` hints for backward compatibility, will be removed with v3.0.0\n        $this->nodes = array_merge($this->nodes, [\n            '#comment' => new Comment(),\n            '#cdata-section' => new CdataSection(),\n        ]);\n    }\n\n    public function withFlags(int $flags): self\n    {\n        if ($flags === $this->flags) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->flags = $flags;\n        return $target;\n    }\n\n    public function withName(string $name): self\n    {\n        if ($name === $this->name) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->name = $name;\n        return $target;\n    }\n\n    /**\n     * @todo deprecate\n     */\n    public function withTags(Tag ...$tags): self\n    {\n        return $this->withNodes(...$tags);\n    }\n\n    /**\n     * @todo deprecate\n     */\n    public function withoutTags(Tag ...$tags): self\n    {\n        return $this->withoutNodes(...$tags);\n    }\n\n    public function withNodes(NodeInterface ...$nodes): self\n    {\n        $names = array_map([$this, 'getNodeName'], $nodes);\n        $this->assertScalarUniqueness($names);\n        // uses node name as array index, e.g. `['#comment' => new Comment()]`\n        $indexedNodes = array_combine($names, $nodes);\n        if (!is_array($indexedNodes)) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->nodes = array_merge($target->nodes, $indexedNodes);\n        return $target;\n    }\n\n    public function withoutNodes(NodeInterface ...$nodes): self\n    {\n        $names = array_map([$this, 'getNodeName'], $nodes);\n        $filteredNodes = array_filter(\n            $this->nodes,\n            static function (NodeInterface $node, string $name) use ($nodes, $names) {\n                return !in_array($name, $names, true) && !in_array($node, $nodes, true);\n            },\n            ARRAY_FILTER_USE_BOTH\n        );\n        if ($filteredNodes === $this->nodes) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->nodes = $filteredNodes;\n        return $target;\n    }\n\n    public function getFlags(): int\n    {\n        return $this->flags;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * @return list<Tag>\n     */\n    public function getTags(): array\n    {\n        return array_filter(\n            $this->nodes,\n            static function (NodeInterface $node) {\n                return $node instanceof Tag;\n            }\n        );\n    }\n\n    public function getTag(string $name): ?Tag\n    {\n        $name = strtolower($name);\n        $node = $this->nodes[$name] ?? null;\n        return $node instanceof Tag ? $node : null;\n    }\n\n    /**\n     * @return list<NodeInterface>\n     */\n    public function getNodes(): array\n    {\n        return $this->nodes;\n    }\n\n    public function getNode(string $name): ?NodeInterface\n    {\n        $name = strtolower($name);\n        return $this->nodes[$name] ?? null;\n    }\n\n    public function hasNode(string $name): bool\n    {\n        return array_key_exists($name, $this->nodes);\n    }\n\n    public function shallEncodeInvalidTag(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_TAG) === self::ENCODE_INVALID_TAG;\n    }\n\n    public function shallEncodeInvalidAttr(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_ATTR) === self::ENCODE_INVALID_ATTR;\n    }\n\n    public function shallEncodeInvalidComment(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_COMMENT) === self::ENCODE_INVALID_COMMENT;\n    }\n\n    public function shallEncodeInvalidCdataSection(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_CDATA_SECTION) === self::ENCODE_INVALID_CDATA_SECTION;\n    }\n\n    public function shallRemoveUnexpectedChildren(): bool\n    {\n        return ($this->flags & self::REMOVE_UNEXPECTED_CHILDREN) === self::REMOVE_UNEXPECTED_CHILDREN;\n    }\n\n    public function shallAllowCustomElements(): bool\n    {\n        return ($this->flags & self::ALLOW_CUSTOM_ELEMENTS) === self::ALLOW_CUSTOM_ELEMENTS;\n    }\n\n    /**\n     * @param list<string> $names\n     * @throws LogicException\n     */\n    protected function assertScalarUniqueness(array $names): void\n    {\n        $ambiguousNames = array_diff_assoc($names, array_unique($names));\n        if ($ambiguousNames !== []) {\n            throw new LogicException(\n                sprintf(\n                    'Ambiguous tag names %s.',\n                    implode(', ', $ambiguousNames)\n                ),\n                1625591503\n            );\n        }\n    }\n\n    protected function getNodeName(NodeInterface $node): string\n    {\n        return strtolower($node->getName());\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Builder;\n\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Attr\\UriAttrValueBuilder;\nuse TYPO3\\HtmlSanitizer\\Sanitizer;\nuse TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n\n/**\n * Builder, creating a `Sanitizer` instance with \"common\"\n * behavior for tags, attributes and values.\n */\nclass CommonBuilder implements BuilderInterface\n{\n    /**\n     * @var Behavior\\Attr[]\n     */\n    protected $globalAttrs;\n\n    /**\n     * @var Behavior\\Attr\n     */\n    protected $hrefAttr;\n\n    /**\n     * @var Behavior\\Attr\n     */\n    protected $srcAttr;\n\n    /**\n     * @var Behavior\\Attr\n     * @deprecated not used anymore\n     */\n    protected $srcsetAttr;\n\n    public function __construct()\n    {\n        $bluntUriAttrValueBuilder = new UriAttrValueBuilder();\n        $uriAttrValueBuilders = $this->createUriAttrValueBuilders();\n\n        $this->globalAttrs = $this->createGlobalAttrs();\n\n        $this->hrefAttr = (new Behavior\\Attr('href'))\n            ->addValues(...($uriAttrValueBuilders['href'] ?? $bluntUriAttrValueBuilder)->getValues());\n        $this->srcAttr = (new Behavior\\Attr('src'))\n            ->addValues(...($uriAttrValueBuilders['src'] ?? $bluntUriAttrValueBuilder)->getValues());\n\n        // @deprecated not used anymore\n        $srcsetAttrValueBuilder = (new UriAttrValueBuilder())\n            ->allowLocal(true)\n            ->allowSchemes('http', 'https');\n        $this->srcsetAttr = (new Behavior\\Attr('src'))\n            ->addValues(...$srcsetAttrValueBuilder->getValues());\n    }\n\n    public function build(): Sanitizer\n    {\n        $behavior = $this->createBehavior();\n        $visitor = new CommonVisitor($behavior);\n        return new Sanitizer($behavior, $visitor);\n    }\n\n    protected function createBehavior(): Behavior\n    {\n        return (new Behavior())\n            ->withFlags(Behavior::ENCODE_INVALID_TAG | Behavior::REMOVE_UNEXPECTED_CHILDREN)\n            ->withName('common')\n            ->withTags(...array_values($this->createBasicTags()))\n            ->withTags(...array_values($this->createMediaTags()))\n            ->withTags(...array_values($this->createTableTags()));\n    }\n\n    protected function createBasicTags(): array\n    {\n        $names = [\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#content_sectioning\n            'address', 'article', 'aside', 'footer', 'header',\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'main', 'nav', 'section',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#text_content\n            'blockquote', 'dd', 'div', 'dl', 'dt', 'figcaption', 'figure', 'li', 'ol', 'p', 'pre', 'ul',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#inline_text_semantics\n            'a', 'abbr',  'b', 'bdi', 'bdo', 'cite', 'code', 'data', 'dfn', 'em', 'i', 'kbd', 'mark',\n            'q', 'rb', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'small', 'span', 'strong', 'sub', 'sup',\n            'time', 'u', 'var', 'wbr',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#demarcating_edits\n            'del', 'ins',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#forms\n            'button', 'datalist', 'label', 'legend', 'meter', 'output', 'progress',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#interactive_elements\n            'details', 'dialog', 'menu', 'summary',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#web_components\n            // 'slot', 'template',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#obsolete_and_deprecated_elements\n            'acronym', 'big', 'center', 'font', 'nobr', 'strike', 'tt',\n        ];\n\n        $tags = [];\n        foreach ($names as $name) {\n            $tags[$name] = (new Behavior\\Tag($name, Behavior\\Tag::ALLOW_CHILDREN))\n                ->addAttrs(...$this->globalAttrs);\n        }\n        $tags['a']->addAttrs(\n            $this->hrefAttr,\n            ...$this->createAttrs(\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n                'download', 'hreflang', 'ping', 'rel', 'referrerpolicy', 'target', 'type',\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#deprecated_attributes\n                'charset', 'name', 'rev'\n            )\n        );\n        $tags['br'] = (new Behavior\\Tag('br'))->addAttrs(...$this->globalAttrs);\n        $tags['hr'] = (new Behavior\\Tag('hr'))->addAttrs(...$this->globalAttrs);\n        $tags['label']->addAttrs(...$this->createAttrs('for'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\n        $tags['li']->addAttrs(...$this->createAttrs('value', 'type'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\n        $tags['meta'] = (new Behavior\\Tag('meta', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs((new Behavior\\Attr('content'))->addValues(new Behavior\\RegExpAttrValue('#^[\\w]*$#')));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\n        $tags['ol']->addAttrs(...$this->createAttrs('reversed', 'start', 'type'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font\n        $tags['font']->addAttrs(...$this->createAttrs('color', 'face', 'size'));\n\n        return $tags;\n    }\n\n    protected function createMediaTags(): array\n    {\n        $tags = [];\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#image_and_multimedia\n        $tags['audio'] = (new Behavior\\Tag('audio', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('autoplay', 'controls', 'loop', 'muted', 'preload'));\n        $tags['video'] = (new Behavior\\Tag('video', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('autoplay', 'controls', 'height', 'loop', 'muted', 'playsinline', 'poster', 'preload', 'width'));\n        $tags['img'] = (new Behavior\\Tag('img', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('align', 'alt', 'border', 'decoding', 'fetchpriority', 'height', 'loading', 'name', 'sizes', 'srcset', 'width'));\n        $tags['track'] = (new Behavior\\Tag('track', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('default', 'kind', 'label', 'srclang'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#embedded_content\n        $tags['picture'] = (new Behavior\\Tag('picture', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(...$this->globalAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\n        $tags['source'] = (new Behavior\\Tag('source'))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('media', 'sizes', 'src', 'srcset', 'type'));\n        return $tags;\n    }\n\n    protected function createTableTags(): array\n    {\n        // // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#table_content\n        $tags = [];\n        // declarations related to <table> elements\n        $commonTableAttrs = $this->createAttrs('align', 'valign', 'bgcolor');\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\n        $tags['table'] = (new Behavior\\Tag('table', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('border', 'cellpadding', 'cellspacing', 'summary'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n        $tags['caption'] = (new Behavior\\Tag('caption', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('align'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\n        $tags['thead'] = (new Behavior\\Tag('thead', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\n        $tags['tbody'] = (new Behavior\\Tag('tbody', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\n        $tags['tfoot'] = (new Behavior\\Tag('tfoot', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        $tags['tr'] = (new Behavior\\Tag('tr', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n        $tags['td'] = (new Behavior\\Tag('td', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('abbr', 'axis', 'headers', 'colspan', 'rowspan', 'scope', 'width', 'height'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\n        $tags['th'] = (new Behavior\\Tag('th', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('colspan', 'rowspan', 'scope'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup\n        $tags['colgroup'] = (new Behavior\\Tag('colgroup', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('span'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col\n        $tags['col'] = (new Behavior\\Tag('col')) // no children here\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('span', 'width'));\n        return $tags;\n    }\n\n    /**\n     * @return Behavior\\Attr[]\n     */\n    protected function createGlobalAttrs(): array\n    {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\n        $attrs = $this->createAttrs(\n            'class',\n            'id',\n            'dir',\n            'lang',\n            'nonce',\n            'xml:lang',\n            'itemid',\n            'itemprop',\n            'itemref',\n            'itemscope',\n            'itemtype',\n            'role',\n            'tabindex',\n            'title',\n            'translate'\n        );\n        $attrs[] = new Behavior\\Attr('aria-', Behavior\\Attr::NAME_PREFIX);\n        $attrs[] = new Behavior\\Attr('data-', Behavior\\Attr::NAME_PREFIX);\n        return $attrs;\n    }\n\n    /**\n     * @return array<'href'|'src', UriAttrValueBuilder>\n     */\n    protected function createUriAttrValueBuilders(): array\n    {\n        return [\n            'href' => (new UriAttrValueBuilder())\n                ->allowLocal(true)\n                ->allowSchemes('http', 'https', 'mailto', 'tel')\n                // https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n                // + addressing files\n                ->allowSchemes('afp', 'file', 'ftp', 'git', 'nfs', 's3', 'sftp', 'smb', 'svn')\n                // + addressing resources\n                ->allowSchemes('geo', 'maps', 'news', 'snews', 'spotify', 'vnc', 'webcal')\n                // + addressing applications\n                ->allowSchemes('facetime', 'irc', 'ircs', 'jabber', 'skype', 'slack', 'sms', 'xmpp')\n                // emails, see https://datatracker.ietf.org/doc/html/rfc2392\n                ->allowSchemes('mid'),\n            'src' => (new UriAttrValueBuilder())\n                ->allowLocal(true)\n                ->allowSchemes('http', 'https')\n                // emails, see https://datatracker.ietf.org/doc/html/rfc2392\n                ->allowSchemes('cid')\n                ->allowDataMediaTypes('audio', 'image', 'video'),\n        ];\n    }\n\n    /**\n     * @param string ...$names\n     * @return Behavior\\Attr[]\n     */\n    protected function createAttrs(string ...$names): array\n    {\n        return array_map(\n            function (string $name) {\n                return new Behavior\\Attr($name);\n            },\n            $names\n        );\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Visitor;\n\nuse DOMAttr;\nuse DOMCdataSection;\nuse DOMComment;\nuse DOMElement;\nuse DOMNode;\nuse DOMText;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse Psr\\Log\\NullLogger;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Context;\n\n/**\n * Node visitor handling most common aspects for tag, attribute\n * and values as declared in provided `Behavior` instance.\n */\nclass CommonVisitor extends AbstractVisitor implements LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    /**\n     * @var Behavior\n     */\n    protected $behavior;\n\n    /**\n     * @var Context\n     */\n    protected $context;\n\n    public function __construct(Behavior $behavior)\n    {\n        $this->logger = new NullLogger();\n        $this->behavior = $behavior;\n    }\n\n    public function beforeTraverse(Context $context): void\n    {\n        $this->context = $context;\n        // v2.1.0: adding `#comment` and `#cdata-section` nodes for backward compatibility, will be removed with v3.0.0\n        if ($this->behavior->hasNode('#comment') && $this->behavior->getNode('#comment') === null) {\n            $this->behavior = $this->behavior->withNodes(new Behavior\\Comment());\n        }\n        if ($this->behavior->hasNode('#cdata-section') && $this->behavior->getNode('#cdata-section') === null) {\n            $this->behavior = $this->behavior->withNodes(new Behavior\\CdataSection());\n        }\n    }\n\n    public function enterNode(DOMNode $domNode): ?DOMNode\n    {\n        if (!$domNode instanceof DOMCdataSection\n            && !$domNode instanceof DOMComment\n            && !$domNode instanceof DOMElement\n        ) {\n            return $domNode;\n        }\n\n        $node = $this->behavior->getNode($domNode->nodeName);\n        if (!$node instanceof Behavior\\NodeInterface) {\n            return $this->handleInvalidNode($domNode);\n        }\n\n        if ($node instanceof Behavior\\NodeHandler) {\n            if ($node->shallHandleFirst()) {\n                $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n            }\n            if ($node->shallProcessDefaults() && $domNode instanceof DOMElement) {\n                $domNode = $this->enterDomElement($domNode, $node->getNode());\n            }\n            if (!$node->shallHandleFirst()) {\n                $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n            }\n        } elseif ($node instanceof Behavior\\HandlerInterface) {\n            $domNode = $node->handle($node, $domNode, $this->context, $this->behavior);\n            $domNode = $domNode instanceof DOMElement ? $this->enterDomElement($domNode, $node) : $domNode;\n        } elseif ($domNode instanceof DOMElement) {\n            $domNode = $this->enterDomElement($domNode, $node);\n        }\n        return $domNode;\n    }\n\n    protected function enterDomElement(?DOMNode $domNode, Behavior\\NodeInterface $node): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement || !$node instanceof Behavior\\Tag) {\n            return $domNode;\n        }\n        $domNode = $this->processAttributes($domNode, $node);\n        $domNode = $this->processChildren($domNode, $node);\n        // completely remove node, in case it is expected to exist with attributes only\n        if ($domNode instanceof DOMElement && $domNode->attributes->length === 0 && $node->shallPurgeWithoutAttrs()) {\n            return null;\n        }\n        return $this->handleMandatoryAttributes($domNode, $node);\n    }\n\n    public function leaveNode(DOMNode $domNode): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        $node = $this->behavior->getNode($domNode->nodeName);\n        if ($node === null) {\n            // pass custom elements, in case it has been declared\n            if ($this->behavior->shallAllowCustomElements() && $this->isCustomElement($domNode)) {\n                return $domNode;\n            }\n            // unexpected node, that should have been handled in `enterNode` already\n            return null;\n        }\n        // completely remove node, in case it is expected to exist with children only\n        if ($node instanceof Behavior\\Tag\n            && $node->shallPurgeWithoutChildren()\n            && !$this->hasNonEmptyChildren($domNode)\n        ) {\n            return null;\n        }\n        return $domNode;\n    }\n\n    protected function processAttributes(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        // reverse processing of attributes,\n        // allowing to directly remove attribute nodes\n        for ($i = $domNode->attributes->length - 1; $i >= 0; $i--) {\n            /** @var DOMAttr $attribute */\n            $attribute = $domNode->attributes->item($i);\n            try {\n                $this->processAttribute($domNode, $tag, $attribute);\n            } catch (Behavior\\NodeException $exception) {\n                return $exception->getDomNode();\n            }\n        }\n        return $domNode;\n    }\n\n    protected function processChildren(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        if (!$tag->shallAllowChildren()\n            && $domNode->childNodes->length > 0\n            && $this->behavior->shallRemoveUnexpectedChildren()\n        ) {\n            $this->log('Found unexpected children for {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeType' => $domNode->nodeType,\n                'nodeName' => $domNode->nodeName,\n            ]);\n            // reverse processing of children,\n            // allowing to directly remove child nodes\n            for ($i = $domNode->childNodes->length - 1; $i >= 0; $i--) {\n                /** @var DOMNode $child */\n                $child = $domNode->childNodes->item($i);\n                $domNode->removeChild($child);\n            }\n        }\n        return $domNode;\n    }\n\n    /**\n     * @throws Behavior\\NodeException\n     */\n    protected function processAttribute(DOMElement $domNode, Behavior\\Tag $tag, DOMAttr $attribute): void\n    {\n        $name = strtolower($attribute->name);\n        $attr = $tag->getAttr($name);\n        if ($attr === null || !$attr->matchesValue($attribute->value)) {\n            $this->log('Found invalid attribute {nodeName}.{attrName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeType' => $domNode->nodeType,\n                'nodeName' => $domNode->nodeName,\n                'attrName' => $attribute->nodeName,\n            ]);\n            $this->handleInvalidAttr($domNode, $name);\n        }\n    }\n\n    protected function handleMandatoryAttributes(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        foreach ($tag->getAttrs() as $attr) {\n            if ($attr->isMandatory() && !$domNode->hasAttribute($attr->getName())) {\n                $this->log('Missing mandatory attribute {nodeName}.{attrName}', [\n                    'behavior' => $this->behavior->getName(),\n                    'nodeType' => $domNode->nodeType,\n                    'nodeName' => $domNode->nodeName,\n                    'attrName' => $attr->getName(),\n                ]);\n                return $this->handleInvalidNode($domNode);\n            }\n        }\n        return $domNode;\n    }\n\n    protected function handleInvalidNode(DOMNode $domNode): ?DOMNode\n    {\n        if (\n            ($domNode instanceof DOMComment && $this->behavior->shallEncodeInvalidComment())\n            || ($domNode instanceof DOMCdataSection && $this->behavior->shallEncodeInvalidCdataSection())\n        ) {\n            $this->log('Found unexpected node {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeType' => $domNode->nodeType,\n                'nodeName' => $domNode->nodeName,\n            ]);\n            return $this->convertToText($domNode);\n        }\n        if ($domNode instanceof DOMElement) {\n            // pass custom elements, in case it has been declared\n            if ($this->behavior->shallAllowCustomElements() && $this->isCustomElement($domNode)) {\n                $this->log('Allowed custom element {nodeName}', [\n                    'behavior' => $this->behavior->getName(),\n                    'nodeType' => $domNode->nodeType,\n                    'nodeName' => $domNode->nodeName,\n                ]);\n                return $domNode;\n            }\n            $this->log('Found unexpected tag {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeType' => $domNode->nodeType,\n                'nodeName' => $domNode->nodeName,\n            ]);\n            if ($this->behavior->shallEncodeInvalidTag()) {\n                return $this->convertToText($domNode);\n            }\n        }\n        $this->log('Removed unexpected node {nodeName}', [\n            'behavior' => $this->behavior->getName(),\n            'nodeType' => $domNode->nodeType,\n            'nodeName' => $domNode->nodeName,\n        ]);\n        return null;\n    }\n\n    /**\n     * @throws Behavior\\NodeException\n     */\n    protected function handleInvalidAttr(DOMNode $domNode, string $name): void\n    {\n        if ($this->behavior->shallEncodeInvalidAttr()) {\n            throw Behavior\\NodeException::create()->withDomNode($this->convertToText($domNode));\n        }\n        if (!$domNode instanceof DOMElement) {\n            throw Behavior\\NodeException::create()->withDomNode(null);\n        }\n        $domNode->removeAttribute($name);\n    }\n\n    /**\n     * Converts node/element to text node, basically disarming tags.\n     * (`<script>` --> `&lt;script&gt;` when DOM is serialized as string)\n     */\n    protected function convertToText(DOMNode $domNode): DOMText\n    {\n        $text = new DOMText();\n        $text->nodeValue = $this->context->parser->saveHTML($domNode);\n        return $text;\n    }\n\n    /**\n     * Determines whether a node has children. This is a special\n     * handling for nodes that only allow text nodes that still can be empty.\n     *\n     * For instance `<script></script>` is considered empty,\n     * albeit `$domNode->childNodes->length === 1`.\n     */\n    protected function hasNonEmptyChildren(DOMNode $domNode): bool\n    {\n        if ($domNode->childNodes->length === 0) {\n            return false;\n        }\n        for ($i = $domNode->childNodes->length - 1; $i >= 0; $i--) {\n            $child = $domNode->childNodes->item($i);\n            if (!$child instanceof DOMText\n                || trim($child->textContent) !== ''\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Whether given node name can be considered as custom element.\n     * (see https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name)\n     */\n    protected function isCustomElement(DOMNode $domNode): bool\n    {\n        return $domNode instanceof DOMElement\n            && preg_match('#^[a-z][a-z0-9]*-.+#', $domNode->nodeName) > 0;\n    }\n\n    protected function log(string $message, array $context = [], $level = null): void\n    {\n        // @todo consider given minimum log-level\n        if (!isset($context['initiator'])) {\n            $context['initiator'] = (string)$this->context->initiator;\n        }\n        $this->logger->debug($message, $context);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Builder\\CommonBuilder;\n\nclass CommonBuilderTest extends TestCase\n{\n    public function isSanitizedDataProvider(): array\n    {\n        return [\n            '#010' => [\n                '<unknown unknown=\"unknown\">value</unknown>',\n                '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;',\n            ],\n            '#011' => [\n                '<div class=\"nested\"><unknown unknown=\"unknown\">value</unknown></div>',\n                '<div class=\"nested\">&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;</div>',\n            ],\n            '#012' => [\n                '&lt;script&gt;alert(1)&lt;/script&gt;',\n                '&lt;script&gt;alert(1)&lt;/script&gt;',\n            ],\n            '#013' => [\n                '<unknown unknown=\"unknown\">value</unknown>' .\n                    '<unknown unknown=\"unknown\">value</unknown>',\n                '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;' .\n                    '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;'\n            ],\n            '#014' => [\n                '<unknown>value</unknown><unknown>value</unknown>' .\n                    '<div unknown=\"unknown\">value</div>' .\n                    '<unknown>value</unknown><unknown>value</unknown>',\n                '&lt;unknown&gt;value&lt;/unknown&gt;&lt;unknown&gt;value&lt;/unknown&gt;' .\n                    '<div>value</div>' .\n                    '&lt;unknown&gt;value&lt;/unknown&gt;&lt;unknown&gt;value&lt;/unknown&gt;'\n            ],\n            '#015' => [\n                '<unknown unknown=\"unknown\" class=\"nested\"><div class=\"nested\">value</div></unknown>',\n                // '&lt;unknown unknown=\"unknown\" class=\"nested\"&gt;<div class=\"nested\">value</div>&lt;/unknown&gt;',\n                // @todo invalidating nested nodes due invalid parent node is currently expected - topic for discussion\n                '&lt;unknown unknown=\"unknown\" class=\"nested\"&gt;&lt;div class=\"nested\"&gt;value&lt;/div&gt;&lt;/unknown&gt;',\n            ],\n            // @todo bug in https://github.com/Masterminds/html5-php/issues\n            // '#013' => [\n            //    '<strong>Given that x < y and y > z...</strong>',\n            //    '<strong>Given that x &lt; y and y &gt; z...</strong>',\n            // ],\n            '#020' => [\n                '<div unknown=\"unknown\">value</div>',\n                '<div>value</div>',\n            ],\n            '#030' => [\n                '<div class=\"class\">value</div>',\n                '<div class=\"class\">value</div>',\n            ],\n            '#031' => [\n                '<div data-value=\"value\">value</div>',\n                '<div data-value=\"value\">value</div>',\n            ],\n            '#032' => [\n                '<div data-bool>value</div>',\n                '<div data-bool>value</div>',\n            ],\n            '#040' => [\n                '<img src=\"mailto:noreply@typo3.org\" onerror=\"alert(1)\">',\n                '',\n            ],\n            '#041' => [\n                '<img src=\"https://typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"https://typo3.org/logo.svg\">',\n            ],\n            '#042' => [\n                '<img src=\"http://typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"http://typo3.org/logo.svg\">',\n            ],\n            '#043' => [\n                '<img src=\"/typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"/typo3.org/logo.svg\">',\n            ],\n            '#044' => [\n                '<img src=\"typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"typo3.org/logo.svg\">',\n            ],\n            '#045' => [\n                '<img src=\"//typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '',\n            ],\n            '#046' => [\n                '<img src=\"/typo3.org/logo.svg\" alt=\"logo\" loading=\"lazy\" fetchpriority=\"low\" decoding=\"async\" width=\"100\" height=\"100\" sizes=\"33.3vw\" name=\"logo\" align=\"left\" border=\"0\">',\n                '<img src=\"/typo3.org/logo.svg\" alt=\"logo\" loading=\"lazy\" fetchpriority=\"low\" decoding=\"async\" width=\"100\" height=\"100\" sizes=\"33.3vw\" name=\"logo\" align=\"left\" border=\"0\">',\n            ],\n            '#047' => [\n                '<img src=\"data:text/html,<script>alert(1)</script>\">',\n                '',\n            ],\n            '#048' => [\n                '<img src=\"data:image/png,...\"><img src=\"data:image/png;,...\"><img src=\"data:image/png;base64,...\"><img src=\"data:image/svg+xml;base64,...\">',\n                '<img src=\"data:image/png,...\"><img src=\"data:image/png;,...\"><img src=\"data:image/png;base64,...\"><img src=\"data:image/svg+xml;base64,...\">',\n            ],\n            '#049' => [\n                '<a href=\"git://github.com/typo3/typo3\">GitHub</a>',\n                '<a href=\"git://github.com/typo3/typo3\">GitHub</a>',\n            ],\n            '#050' => [\n                '<a href=\"https://typo3.org/\" role=\"button\">value</a>',\n                '<a href=\"https://typo3.org/\" role=\"button\">value</a>',\n            ],\n            '#051' => [\n                '<a href=\"ssh://example.org/\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#052' => [\n                '<a href=\"javascript:alert(1)\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#053' => [\n                '<a href=\"data:text/html;...\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#054' => [\n                '<a href=\"#anchor\">anchor</a><a name=\"anchor\">content</a>',\n                '<a href=\"#anchor\">anchor</a><a name=\"anchor\">content</a>',\n            ],\n            '#055' => [\n                '<a href=\"tel:123456789\">anchor</a>',\n                '<a href=\"tel:123456789\">anchor</a>',\n            ],\n            '#090' => [\n                '<p data-bool><span data-bool><strong data-bool>value</strong></span></p>',\n                '<p data-bool><span data-bool><strong data-bool>value</strong></span></p>'\n            ],\n            '#100' => [\n                '<table><caption>c</caption><thead><tr><th>h</th></tr></thead><tbody><tr><td>b</td></tr></tbody><tfoot><tr><td>f</td></tr></tfoot></table>',\n                '<table><caption>c</caption><thead><tr><th>h</th></tr></thead><tbody><tr><td>b</td></tr></tbody><tfoot><tr><td>f</td></tr></tfoot></table>',\n            ],\n            '#101' => [\n                '<table align=\"left\" border=\"2\" cellpadding=\"2\" cellspacing=\"2\" class=\"table\" summary=\"summary\"></table>',\n                '<table align=\"left\" border=\"2\" cellpadding=\"2\" cellspacing=\"2\" class=\"table\" summary=\"summary\"></table>',\n            ],\n            '#102' => [\n                '<caption align=\"left\">caption</caption>',\n                '<caption align=\"left\">caption</caption>',\n            ],\n            '#104' => [\n                '<tr align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tr>',\n                '<tr align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tr>',\n            ],\n            '#105' => [\n                '<td abbr=\"abbr\" align=\"left\" valign=\"top\" colspan=\"2\" rowspan=\"2\" bgcolor=\"#cc0000\" axis=\"axis,axis\" headers=\"head,head\" scope=\"scope\" width=\"100\" height=\"100\">value</td>',\n                '<td abbr=\"abbr\" align=\"left\" valign=\"top\" colspan=\"2\" rowspan=\"2\" bgcolor=\"#cc0000\" axis=\"axis,axis\" headers=\"head,head\" scope=\"scope\" width=\"100\" height=\"100\">value</td>',\n            ],\n            '#106' => [\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n            ],\n            '#107' => [\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n            ],\n            '#108' => [\n                '<tfoot align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tfoot>',\n                '<tfoot align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tfoot>',\n            ],\n            '#109' => [\n                '<colgroup align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" span=\"1\"><col><col span=\"2\" align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" width=\"100\"></colgroup>',\n                '<colgroup align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" span=\"1\"><col><col span=\"2\" align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" width=\"100\"></colgroup>',\n            ],\n            '#120' => [\n                '<figure><img src=\"https://typo3.org/logo.svg\" alt=\"logo\"><figcaption>TYPO3 logo</figcaption></figure>',\n                '<figure><img src=\"https://typo3.org/logo.svg\" alt=\"logo\"><figcaption>TYPO3 logo</figcaption></figure>',\n            ],\n            '#121' => [\n                '<picture><source srcset=\"/logo-800.png\" media=\"(min-width: 800px)\" type=\"image/png\" sizes=\"33.3vw\"></picture>',\n                '<picture><source srcset=\"/logo-800.png\" media=\"(min-width: 800px)\" type=\"image/png\" sizes=\"33.3vw\"></picture>'\n            ],\n            '#122' => [\n                '<video controls src=\"/video.mp4\"><track default kind=\"captions\" srclang=\"en\" src=\"/video.vtt\"></video>',\n                '<video controls src=\"/video.mp4\"><track default kind=\"captions\" srclang=\"en\" src=\"/video.vtt\"></video>',\n            ],\n            '200' => [\n                '<ul><li>item</li><li>item</li></ul>',\n                '<ul><li>item</li><li>item</li></ul>',\n            ],\n            '201' => [\n                '<ol reversed start=\"3\" type=\"I\"><li>item</li><li value=\"13\">item</li></ol>',\n                '<ol reversed start=\"3\" type=\"I\"><li>item</li><li value=\"13\">item</li></ol>',\n            ],\n            '#900' => [\n                '<div id=\"main\">' .\n                    '<a href=\"https://typo3.org/\" data-type=\"url\" wrong-attr=\"is-removed\">TYPO3</a><br>' .\n                    '(the <script>alert(1)</script> tag shall be encoded to HTML entities)'.\n                '</div>',\n                '<div id=\"main\">' .\n                    '<a href=\"https://typo3.org/\" data-type=\"url\">TYPO3</a><br>' .\n                    '(the &lt;script&gt;alert(1)&lt;/script&gt; tag shall be encoded to HTML entities)'.\n                '</div>',\n            ],\n            '#901' => [\n                '<div itemprop=\"tel\" itemscope>' .\n                    '<span itemprop=\"value\">+1-234-56789</span>' .\n                    '<meta itemprop=\"type\" content=\"voice\">' .\n                '</div>',\n                '<div itemprop=\"tel\" itemscope>' .\n                    '<span itemprop=\"value\">+1-234-56789</span>' .\n                    '<meta itemprop=\"type\" content=\"voice\">' .\n                '</div>'\n            ],\n            '#902' => [\n                '<div><meta http-equiv=\"refresh\" content=\"1;https://evil.typo3.org/\" name=\"referrer\" charset=\"utf-8\"></div>',\n                '<div></div>'\n            ],\n            '#903' => [\n                '<font class=\"font\" color=\"#000000\" face=\"Verdana,Arial\" size=\"13\">value</font>',\n                '<font class=\"font\" color=\"#000000\" face=\"Verdana,Arial\" size=\"13\">value</font>'\n            ],\n            '#904' => [\n                '<img src=\"cid:DC117C9322DEB502C3B16769A8A64E08@example.test\">',\n                '<img src=\"cid:DC117C9322DEB502C3B16769A8A64E08@example.test\">',\n            ],\n            '#905' => [\n                '<a href=\"mid:D89CD33E-F9CF-4CA0-BCE3-AC89E5D41DE1@example.test/DC117C9322DEB502C3B16769A8A64E08@example.test\">see previous message</a>',\n                '<a href=\"mid:D89CD33E-F9CF-4CA0-BCE3-AC89E5D41DE1@example.test/DC117C9322DEB502C3B16769A8A64E08@example.test\">see previous message</a>',\n            ],\n            '#906' => [\n                '<center>value</center><strike>value</strike><nobr>value</nobr>',\n                '<center>value</center><strike>value</strike><nobr>value</nobr>',\n            ],\n            '#907' => [\n                '<script>alert(1)</script>'\n                . '<script type=\"application/javascript\">alert(2)</script>'\n                . '<script type=\"application/ecmascript\">alert(3)</script>',\n                '&lt;script&gt;alert(1)&lt;/script&gt;'\n                . '&lt;script type=\"application/javascript\"&gt;alert(2)&lt;/script&gt;'\n                . '&lt;script type=\"application/ecmascript\"&gt;alert(3)&lt;/script&gt;'\n            ],\n            '#908' => [\n                '<a href=\"xmpp:user@example.org?message\">value</a>',\n                '<a href=\"xmpp:user@example.org?message\">value</a>',\n            ],\n            '#909' => [\n                '<!-- #comment -->',\n                '<!-- #comment -->',\n            ],\n            '#910' => [\n                '<!-- <\"comment\"> -->',\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n            ],\n            '#911' => [\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n            ],\n            '#915' => [\n                '#text',\n                '#text',\n            ],\n            '#920' => [\n                '<![CDATA[ #cdata ]]>',\n                '#cdata',\n            ],\n            '#921' => [\n                '<![CDATA[<any><span data-value=\"value\"></any>*/]]>',\n                '&lt;any&gt;&lt;span data-value=\"value\"&gt;&lt;/any&gt;*/',\n            ],\n            '#930' => [\n                '<br><any>value</any></br>',\n                '<br>&lt;any&gt;value&lt;/any&gt;<br>',\n            ],\n            '#931' => [\n                '<hr><any>value</any></hr>',\n                '<hr>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#932' => [\n                '<wbr><any>value</any></wbr>',\n                '<wbr>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#933' => [\n                '<source><any>value</any></source>',\n                '<source>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#934' => [\n                '<img src=\"/typo3.org/logo.svg\"><any>value</any></img>',\n                '<img src=\"/typo3.org/logo.svg\">&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#935' => [\n                '<p class=\"</p><script>alert(1)\">value</p>',\n                '<p class=\"&lt;/p&gt;&lt;script&gt;alert(1)\">value</p>',\n            ],\n            '#936' => [\n                '<p class=\"{&quot;json&quot;:true}\">value</p>',\n                '<p class=\"{&quot;json&quot;:true}\">value</p>',\n            ],\n        ];\n    }\n\n    /**\n     * @param string $payload\n     * @param string $expectation\n     * @test\n     * @dataProvider isSanitizedDataProvider\n     */\n    public function isSanitized(string $payload, string $expectation): void\n    {\n        $builder = new CommonBuilder();\n        $sanitizer = $builder->build();\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer;\n\nuse LogicException;\nuse TYPO3\\HtmlSanitizer\\Behavior\\CdataSection;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Comment;\nuse TYPO3\\HtmlSanitizer\\Behavior\\NodeInterface;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Tag;\n\n/**\n * Declares behavior used by node visitors\n * (and any component used during sanitization)\n */\nclass Behavior\n{\n    /**\n     * not having any behavioral capabilities\n     */\n    public const BLUNT = 0;\n\n    /**\n     * in case an unexpected tag was found, encode the whole tag as HTML\n     */\n    public const ENCODE_INVALID_TAG = 1;\n\n    /**\n     * in case an unexpected attribute was found, encode the whole tag as HTML\n     */\n    public const ENCODE_INVALID_ATTR = 2;\n\n    /**\n     * remove children at nodes that did not expect children\n     */\n    public const REMOVE_UNEXPECTED_CHILDREN = 4;\n\n    /**\n     * https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\n     * custom elements must contain a hyphen (`-`), start with ASCII lower alpha\n     */\n    public const ALLOW_CUSTOM_ELEMENTS = 8;\n\n    /**\n     * in case an unexpected comment was found, encode the whole comment as HTML\n     */\n    public const ENCODE_INVALID_COMMENT = 16;\n\n    /**\n     * in case an unexpected CDATA section was found, encode the whole CDATA section as HTML\n     */\n    public const ENCODE_INVALID_CDATA_SECTION = 32;\n\n    /**\n     * in case an unexpected processing instruction (e.g. `<?xml>`) was found, encode the whole node as HTML\n     */\n    public const ENCODE_INVALID_PROCESSING_INSTRUCTION = 64;\n\n    /**\n     * @var int\n     */\n    protected $flags = 0;\n\n    /**\n     * @var string\n     */\n    protected $name = 'undefined';\n\n    /**\n     * Node names as array index, e.g. `['strong' => new Tag('strong', '#comment' => new Comment()]`\n     * @var array<string, ?NodeInterface>\n     */\n    protected $nodes = [];\n\n    public function __construct()\n    {\n        // v2.1.0: adding `#comment` and `#cdata-section` hints for backward compatibility, will be removed with v3.0.0\n        $this->nodes = array_merge($this->nodes, [\n            '#comment' => new Comment(),\n            '#cdata-section' => new CdataSection(),\n        ]);\n    }\n\n    public function withFlags(int $flags): self\n    {\n        if ($flags === $this->flags) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->flags = $flags;\n        return $target;\n    }\n\n    public function withName(string $name): self\n    {\n        if ($name === $this->name) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->name = $name;\n        return $target;\n    }\n\n    /**\n     * @todo deprecate\n     */\n    public function withTags(Tag ...$tags): self\n    {\n        return $this->withNodes(...$tags);\n    }\n\n    /**\n     * @todo deprecate\n     */\n    public function withoutTags(Tag ...$tags): self\n    {\n        return $this->withoutNodes(...$tags);\n    }\n\n    public function withNodes(NodeInterface ...$nodes): self\n    {\n        $names = array_map([$this, 'getNodeName'], $nodes);\n        $this->assertScalarUniqueness($names);\n        // uses node name as array index, e.g. `['#comment' => new Comment()]`\n        $indexedNodes = array_combine($names, $nodes);\n        if (!is_array($indexedNodes)) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->nodes = array_merge($target->nodes, $indexedNodes);\n        return $target;\n    }\n\n    public function withoutNodes(NodeInterface ...$nodes): self\n    {\n        $names = array_map([$this, 'getNodeName'], $nodes);\n        $filteredNodes = array_filter(\n            $this->nodes,\n            static function (NodeInterface $node, string $name) use ($nodes, $names) {\n                return !in_array($name, $names, true) && !in_array($node, $nodes, true);\n            },\n            ARRAY_FILTER_USE_BOTH\n        );\n        if ($filteredNodes === $this->nodes) {\n            return $this;\n        }\n        $target = clone $this;\n        $target->nodes = $filteredNodes;\n        return $target;\n    }\n\n    public function getFlags(): int\n    {\n        return $this->flags;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * @return list<Tag>\n     */\n    public function getTags(): array\n    {\n        return array_filter(\n            $this->nodes,\n            static function (NodeInterface $node) {\n                return $node instanceof Tag;\n            }\n        );\n    }\n\n    public function getTag(string $name): ?Tag\n    {\n        $name = strtolower($name);\n        $node = $this->nodes[$name] ?? null;\n        return $node instanceof Tag ? $node : null;\n    }\n\n    /**\n     * @return list<NodeInterface>\n     */\n    public function getNodes(): array\n    {\n        return $this->nodes;\n    }\n\n    public function getNode(string $name): ?NodeInterface\n    {\n        $name = strtolower($name);\n        return $this->nodes[$name] ?? null;\n    }\n\n    public function hasNode(string $name): bool\n    {\n        return array_key_exists($name, $this->nodes);\n    }\n\n    public function shallEncodeInvalidTag(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_TAG) === self::ENCODE_INVALID_TAG;\n    }\n\n    public function shallEncodeInvalidAttr(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_ATTR) === self::ENCODE_INVALID_ATTR;\n    }\n\n    public function shallEncodeInvalidComment(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_COMMENT) === self::ENCODE_INVALID_COMMENT;\n    }\n\n    public function shallEncodeInvalidCdataSection(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_CDATA_SECTION) === self::ENCODE_INVALID_CDATA_SECTION;\n    }\n\n    public function shallEncodeInvalidProcessingInstruction(): bool\n    {\n        return ($this->flags & self::ENCODE_INVALID_PROCESSING_INSTRUCTION) === self::ENCODE_INVALID_PROCESSING_INSTRUCTION;\n    }\n\n    public function shallRemoveUnexpectedChildren(): bool\n    {\n        return ($this->flags & self::REMOVE_UNEXPECTED_CHILDREN) === self::REMOVE_UNEXPECTED_CHILDREN;\n    }\n\n    public function shallAllowCustomElements(): bool\n    {\n        return ($this->flags & self::ALLOW_CUSTOM_ELEMENTS) === self::ALLOW_CUSTOM_ELEMENTS;\n    }\n\n    /**\n     * @param list<string> $names\n     * @throws LogicException\n     */\n    protected function assertScalarUniqueness(array $names): void\n    {\n        $ambiguousNames = array_diff_assoc($names, array_unique($names));\n        if ($ambiguousNames !== []) {\n            throw new LogicException(\n                sprintf(\n                    'Ambiguous tag names %s.',\n                    implode(', ', $ambiguousNames)\n                ),\n                1625591503\n            );\n        }\n    }\n\n    protected function getNodeName(NodeInterface $node): string\n    {\n        return strtolower($node->getName());\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Builder;\n\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Behavior\\Attr\\UriAttrValueBuilder;\nuse TYPO3\\HtmlSanitizer\\Sanitizer;\nuse TYPO3\\HtmlSanitizer\\Visitor\\CommonVisitor;\n\n/**\n * Builder, creating a `Sanitizer` instance with \"common\"\n * behavior for tags, attributes and values.\n */\nclass CommonBuilder implements BuilderInterface\n{\n    /**\n     * @var Behavior\\Attr[]\n     */\n    protected $globalAttrs;\n\n    /**\n     * @var Behavior\\Attr\n     */\n    protected $hrefAttr;\n\n    /**\n     * @var Behavior\\Attr\n     */\n    protected $srcAttr;\n\n    /**\n     * @var Behavior\\Attr\n     * @deprecated not used anymore\n     */\n    protected $srcsetAttr;\n\n    public function __construct()\n    {\n        $bluntUriAttrValueBuilder = new UriAttrValueBuilder();\n        $uriAttrValueBuilders = $this->createUriAttrValueBuilders();\n\n        $this->globalAttrs = $this->createGlobalAttrs();\n\n        $this->hrefAttr = (new Behavior\\Attr('href'))\n            ->addValues(...($uriAttrValueBuilders['href'] ?? $bluntUriAttrValueBuilder)->getValues());\n        $this->srcAttr = (new Behavior\\Attr('src'))\n            ->addValues(...($uriAttrValueBuilders['src'] ?? $bluntUriAttrValueBuilder)->getValues());\n\n        // @deprecated not used anymore\n        $srcsetAttrValueBuilder = (new UriAttrValueBuilder())\n            ->allowLocal(true)\n            ->allowSchemes('http', 'https');\n        $this->srcsetAttr = (new Behavior\\Attr('src'))\n            ->addValues(...$srcsetAttrValueBuilder->getValues());\n    }\n\n    public function build(): Sanitizer\n    {\n        $behavior = $this->createBehavior();\n        $visitor = new CommonVisitor($behavior);\n        return new Sanitizer($behavior, $visitor);\n    }\n\n    protected function createBehavior(): Behavior\n    {\n        return (new Behavior())\n            ->withFlags(\n                Behavior::ENCODE_INVALID_TAG\n                | Behavior::REMOVE_UNEXPECTED_CHILDREN\n                | Behavior::ENCODE_INVALID_PROCESSING_INSTRUCTION\n            )\n            ->withName('common')\n            ->withTags(...array_values($this->createBasicTags()))\n            ->withTags(...array_values($this->createMediaTags()))\n            ->withTags(...array_values($this->createTableTags()));\n    }\n\n    protected function createBasicTags(): array\n    {\n        $names = [\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#content_sectioning\n            'address', 'article', 'aside', 'footer', 'header',\n            'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'main', 'nav', 'section',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#text_content\n            'blockquote', 'dd', 'div', 'dl', 'dt', 'figcaption', 'figure', 'li', 'ol', 'p', 'pre', 'ul',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#inline_text_semantics\n            'a', 'abbr',  'b', 'bdi', 'bdo', 'cite', 'code', 'data', 'dfn', 'em', 'i', 'kbd', 'mark',\n            'q', 'rb', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'small', 'span', 'strong', 'sub', 'sup',\n            'time', 'u', 'var', 'wbr',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#demarcating_edits\n            'del', 'ins',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#forms\n            'button', 'datalist', 'label', 'legend', 'meter', 'output', 'progress',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#interactive_elements\n            'details', 'dialog', 'menu', 'summary',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#web_components\n            // 'slot', 'template',\n            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#obsolete_and_deprecated_elements\n            'acronym', 'big', 'center', 'font', 'nobr', 'strike', 'tt',\n        ];\n\n        $tags = [];\n        foreach ($names as $name) {\n            $tags[$name] = (new Behavior\\Tag($name, Behavior\\Tag::ALLOW_CHILDREN))\n                ->addAttrs(...$this->globalAttrs);\n        }\n        $tags['a']->addAttrs(\n            $this->hrefAttr,\n            ...$this->createAttrs(\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a\n                'download', 'hreflang', 'ping', 'rel', 'referrerpolicy', 'target', 'type',\n                // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#deprecated_attributes\n                'charset', 'name', 'rev'\n            )\n        );\n        $tags['br'] = (new Behavior\\Tag('br'))->addAttrs(...$this->globalAttrs);\n        $tags['hr'] = (new Behavior\\Tag('hr'))->addAttrs(...$this->globalAttrs);\n        $tags['label']->addAttrs(...$this->createAttrs('for'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\n        $tags['li']->addAttrs(...$this->createAttrs('value', 'type'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\n        $tags['meta'] = (new Behavior\\Tag('meta', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs((new Behavior\\Attr('content'))->addValues(new Behavior\\RegExpAttrValue('#^[\\w]*$#')));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol\n        $tags['ol']->addAttrs(...$this->createAttrs('reversed', 'start', 'type'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font\n        $tags['font']->addAttrs(...$this->createAttrs('color', 'face', 'size'));\n\n        return $tags;\n    }\n\n    protected function createMediaTags(): array\n    {\n        $tags = [];\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#image_and_multimedia\n        $tags['audio'] = (new Behavior\\Tag('audio', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('autoplay', 'controls', 'loop', 'muted', 'preload'));\n        $tags['video'] = (new Behavior\\Tag('video', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('autoplay', 'controls', 'height', 'loop', 'muted', 'playsinline', 'poster', 'preload', 'width'));\n        $tags['img'] = (new Behavior\\Tag('img', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('align', 'alt', 'border', 'decoding', 'fetchpriority', 'height', 'loading', 'name', 'sizes', 'srcset', 'width'));\n        $tags['track'] = (new Behavior\\Tag('track', Behavior\\Tag::PURGE_WITHOUT_ATTRS))\n            ->addAttrs($this->srcAttr, ...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('default', 'kind', 'label', 'srclang'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#embedded_content\n        $tags['picture'] = (new Behavior\\Tag('picture', Behavior\\Tag::ALLOW_CHILDREN))->addAttrs(...$this->globalAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source\n        $tags['source'] = (new Behavior\\Tag('source'))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('media', 'sizes', 'src', 'srcset', 'type'));\n        return $tags;\n    }\n\n    protected function createTableTags(): array\n    {\n        // // https://developer.mozilla.org/en-US/docs/Web/HTML/Element#table_content\n        $tags = [];\n        // declarations related to <table> elements\n        $commonTableAttrs = $this->createAttrs('align', 'valign', 'bgcolor');\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\n        $tags['table'] = (new Behavior\\Tag('table', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('border', 'cellpadding', 'cellspacing', 'summary'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n        $tags['caption'] = (new Behavior\\Tag('caption', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs)\n            ->addAttrs(...$this->createAttrs('align'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead\n        $tags['thead'] = (new Behavior\\Tag('thead', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody\n        $tags['tbody'] = (new Behavior\\Tag('tbody', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot\n        $tags['tfoot'] = (new Behavior\\Tag('tfoot', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        $tags['tr'] = (new Behavior\\Tag('tr', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs);\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td\n        $tags['td'] = (new Behavior\\Tag('td', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('abbr', 'axis', 'headers', 'colspan', 'rowspan', 'scope', 'width', 'height'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th\n        $tags['th'] = (new Behavior\\Tag('th', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('colspan', 'rowspan', 'scope'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup\n        $tags['colgroup'] = (new Behavior\\Tag('colgroup', Behavior\\Tag::ALLOW_CHILDREN))\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('span'));\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col\n        $tags['col'] = (new Behavior\\Tag('col')) // no children here\n            ->addAttrs(...$this->globalAttrs, ...$commonTableAttrs)\n            ->addAttrs(...$this->createAttrs('span', 'width'));\n        return $tags;\n    }\n\n    /**\n     * @return Behavior\\Attr[]\n     */\n    protected function createGlobalAttrs(): array\n    {\n        // https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\n        $attrs = $this->createAttrs(\n            'class',\n            'id',\n            'dir',\n            'lang',\n            'nonce',\n            'xml:lang',\n            'itemid',\n            'itemprop',\n            'itemref',\n            'itemscope',\n            'itemtype',\n            'role',\n            'tabindex',\n            'title',\n            'translate'\n        );\n        $attrs[] = new Behavior\\Attr('aria-', Behavior\\Attr::NAME_PREFIX);\n        $attrs[] = new Behavior\\Attr('data-', Behavior\\Attr::NAME_PREFIX);\n        return $attrs;\n    }\n\n    /**\n     * @return array<'href'|'src', UriAttrValueBuilder>\n     */\n    protected function createUriAttrValueBuilders(): array\n    {\n        return [\n            'href' => (new UriAttrValueBuilder())\n                ->allowLocal(true)\n                ->allowSchemes('http', 'https', 'mailto', 'tel')\n                // https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n                // + addressing files\n                ->allowSchemes('afp', 'file', 'ftp', 'git', 'nfs', 's3', 'sftp', 'smb', 'svn')\n                // + addressing resources\n                ->allowSchemes('geo', 'maps', 'news', 'snews', 'spotify', 'vnc', 'webcal')\n                // + addressing applications\n                ->allowSchemes('facetime', 'irc', 'ircs', 'jabber', 'skype', 'slack', 'sms', 'xmpp')\n                // emails, see https://datatracker.ietf.org/doc/html/rfc2392\n                ->allowSchemes('mid'),\n            'src' => (new UriAttrValueBuilder())\n                ->allowLocal(true)\n                ->allowSchemes('http', 'https')\n                // emails, see https://datatracker.ietf.org/doc/html/rfc2392\n                ->allowSchemes('cid')\n                ->allowDataMediaTypes('audio', 'image', 'video'),\n        ];\n    }\n\n    /**\n     * @param string ...$names\n     * @return Behavior\\Attr[]\n     */\n    protected function createAttrs(string ...$names): array\n    {\n        return array_map(\n            function (string $name) {\n                return new Behavior\\Attr($name);\n            },\n            $names\n        );\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Visitor;\n\nuse DOMAttr;\nuse DOMCdataSection;\nuse DOMComment;\nuse DOMElement;\nuse DOMNode;\nuse DOMProcessingInstruction;\nuse DOMText;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse Psr\\Log\\NullLogger;\nuse TYPO3\\HtmlSanitizer\\Behavior;\nuse TYPO3\\HtmlSanitizer\\Context;\n\n/**\n * Node visitor handling most common aspects for tag, attribute\n * and values as declared in provided `Behavior` instance.\n */\nclass CommonVisitor extends AbstractVisitor implements LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    /**\n     * @var Behavior\n     */\n    protected $behavior;\n\n    /**\n     * @var Context\n     */\n    protected $context;\n\n    public function __construct(Behavior $behavior)\n    {\n        $this->logger = new NullLogger();\n        $this->behavior = $behavior;\n    }\n\n    public function beforeTraverse(Context $context): void\n    {\n        $this->context = $context;\n        // v2.1.0: adding `#comment` and `#cdata-section` nodes for backward compatibility, will be removed with v3.0.0\n        if ($this->behavior->hasNode('#comment') && $this->behavior->getNode('#comment') === null) {\n            $this->behavior = $this->behavior->withNodes(new Behavior\\Comment());\n        }\n        if ($this->behavior->hasNode('#cdata-section') && $this->behavior->getNode('#cdata-section') === null) {\n            $this->behavior = $this->behavior->withNodes(new Behavior\\CdataSection());\n        }\n    }\n\n    public function enterNode(DOMNode $domNode): ?DOMNode\n    {\n        if ($domNode instanceof DOMProcessingInstruction) {\n            return $this->handleInvalidNode($domNode);\n        }\n\n        if (!$domNode instanceof DOMCdataSection\n            && !$domNode instanceof DOMComment\n            && !$domNode instanceof DOMElement\n        ) {\n            return $domNode;\n        }\n\n        $node = $this->behavior->getNode($domNode->nodeName);\n        if (!$node instanceof Behavior\\NodeInterface) {\n            return $this->handleInvalidNode($domNode);\n        }\n\n        if ($node instanceof Behavior\\NodeHandler) {\n            if ($node->shallHandleFirst()) {\n                $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n            }\n            if ($node->shallProcessDefaults() && $domNode instanceof DOMElement) {\n                $domNode = $this->enterDomElement($domNode, $node->getNode());\n            }\n            if (!$node->shallHandleFirst()) {\n                $domNode = $node->getHandler()->handle($node->getNode(), $domNode, $this->context, $this->behavior);\n            }\n        } elseif ($node instanceof Behavior\\HandlerInterface) {\n            $domNode = $node->handle($node, $domNode, $this->context, $this->behavior);\n            $domNode = $domNode instanceof DOMElement ? $this->enterDomElement($domNode, $node) : $domNode;\n        } elseif ($domNode instanceof DOMElement) {\n            $domNode = $this->enterDomElement($domNode, $node);\n        }\n        return $domNode;\n    }\n\n    protected function enterDomElement(?DOMNode $domNode, Behavior\\NodeInterface $node): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement || !$node instanceof Behavior\\Tag) {\n            return $domNode;\n        }\n        $domNode = $this->processAttributes($domNode, $node);\n        $domNode = $this->processChildren($domNode, $node);\n        // completely remove node, in case it is expected to exist with attributes only\n        if ($domNode instanceof DOMElement && $domNode->attributes->length === 0 && $node->shallPurgeWithoutAttrs()) {\n            return null;\n        }\n        return $this->handleMandatoryAttributes($domNode, $node);\n    }\n\n    public function leaveNode(DOMNode $domNode): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        $node = $this->behavior->getNode($domNode->nodeName);\n        if ($node === null) {\n            // pass custom elements, in case it has been declared\n            if ($this->behavior->shallAllowCustomElements() && $this->isCustomElement($domNode)) {\n                return $domNode;\n            }\n            // unexpected node, that should have been handled in `enterNode` already\n            return null;\n        }\n        // completely remove node, in case it is expected to exist with children only\n        if ($node instanceof Behavior\\Tag\n            && $node->shallPurgeWithoutChildren()\n            && !$this->hasNonEmptyChildren($domNode)\n        ) {\n            return null;\n        }\n        return $domNode;\n    }\n\n    protected function processAttributes(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        // reverse processing of attributes,\n        // allowing to directly remove attribute nodes\n        for ($i = $domNode->attributes->length - 1; $i >= 0; $i--) {\n            /** @var DOMAttr $attribute */\n            $attribute = $domNode->attributes->item($i);\n            try {\n                $this->processAttribute($domNode, $tag, $attribute);\n            } catch (Behavior\\NodeException $exception) {\n                return $exception->getDomNode();\n            }\n        }\n        return $domNode;\n    }\n\n    protected function processChildren(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        if (!$tag->shallAllowChildren()\n            && $domNode->childNodes->length > 0\n            && $this->behavior->shallRemoveUnexpectedChildren()\n        ) {\n            $this->log('Found unexpected children for {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeType' => $domNode->nodeType,\n                'nodeName' => $domNode->nodeName,\n            ]);\n            // reverse processing of children,\n            // allowing to directly remove child nodes\n            for ($i = $domNode->childNodes->length - 1; $i >= 0; $i--) {\n                /** @var DOMNode $child */\n                $child = $domNode->childNodes->item($i);\n                $domNode->removeChild($child);\n            }\n        }\n        return $domNode;\n    }\n\n    /**\n     * @throws Behavior\\NodeException\n     */\n    protected function processAttribute(DOMElement $domNode, Behavior\\Tag $tag, DOMAttr $attribute): void\n    {\n        $name = strtolower($attribute->name);\n        $attr = $tag->getAttr($name);\n        if ($attr === null || !$attr->matchesValue($attribute->value)) {\n            $this->log('Found invalid attribute {nodeName}.{attrName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeType' => $domNode->nodeType,\n                'nodeName' => $domNode->nodeName,\n                'attrName' => $attribute->nodeName,\n            ]);\n            $this->handleInvalidAttr($domNode, $name);\n        }\n    }\n\n    protected function handleMandatoryAttributes(?DOMNode $domNode, Behavior\\Tag $tag): ?DOMNode\n    {\n        if (!$domNode instanceof DOMElement) {\n            return $domNode;\n        }\n        foreach ($tag->getAttrs() as $attr) {\n            if ($attr->isMandatory() && !$domNode->hasAttribute($attr->getName())) {\n                $this->log('Missing mandatory attribute {nodeName}.{attrName}', [\n                    'behavior' => $this->behavior->getName(),\n                    'nodeType' => $domNode->nodeType,\n                    'nodeName' => $domNode->nodeName,\n                    'attrName' => $attr->getName(),\n                ]);\n                return $this->handleInvalidNode($domNode);\n            }\n        }\n        return $domNode;\n    }\n\n    protected function handleInvalidNode(DOMNode $domNode): ?DOMNode\n    {\n        if (\n            ($domNode instanceof DOMComment && $this->behavior->shallEncodeInvalidComment())\n            || ($domNode instanceof DOMCdataSection && $this->behavior->shallEncodeInvalidCdataSection())\n            || ($domNode instanceof DOMProcessingInstruction && $this->behavior->shallEncodeInvalidProcessingInstruction())\n        ) {\n            $this->log('Found unexpected node {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeType' => $domNode->nodeType,\n                'nodeName' => $domNode->nodeName,\n            ]);\n            return $this->convertToText($domNode);\n        }\n        if ($domNode instanceof DOMElement) {\n            // pass custom elements, in case it has been declared\n            if ($this->behavior->shallAllowCustomElements() && $this->isCustomElement($domNode)) {\n                $this->log('Allowed custom element {nodeName}', [\n                    'behavior' => $this->behavior->getName(),\n                    'nodeType' => $domNode->nodeType,\n                    'nodeName' => $domNode->nodeName,\n                ]);\n                return $domNode;\n            }\n            $this->log('Found unexpected tag {nodeName}', [\n                'behavior' => $this->behavior->getName(),\n                'nodeType' => $domNode->nodeType,\n                'nodeName' => $domNode->nodeName,\n            ]);\n            if ($this->behavior->shallEncodeInvalidTag()) {\n                return $this->convertToText($domNode);\n            }\n        }\n        $this->log('Removed unexpected node {nodeName}', [\n            'behavior' => $this->behavior->getName(),\n            'nodeType' => $domNode->nodeType,\n            'nodeName' => $domNode->nodeName,\n        ]);\n        return null;\n    }\n\n    /**\n     * @throws Behavior\\NodeException\n     */\n    protected function handleInvalidAttr(DOMNode $domNode, string $name): void\n    {\n        if ($this->behavior->shallEncodeInvalidAttr()) {\n            throw Behavior\\NodeException::create()->withDomNode($this->convertToText($domNode));\n        }\n        if (!$domNode instanceof DOMElement) {\n            throw Behavior\\NodeException::create()->withDomNode(null);\n        }\n        $domNode->removeAttribute($name);\n    }\n\n    /**\n     * Converts node/element to text node, basically disarming tags.\n     * (`<script>` --> `&lt;script&gt;` when DOM is serialized as string)\n     */\n    protected function convertToText(DOMNode $domNode): DOMText\n    {\n        $text = new DOMText();\n        $text->nodeValue = $this->context->parser->saveHTML($domNode);\n        return $text;\n    }\n\n    /**\n     * Determines whether a node has children. This is a special\n     * handling for nodes that only allow text nodes that still can be empty.\n     *\n     * For instance `<script></script>` is considered empty,\n     * albeit `$domNode->childNodes->length === 1`.\n     */\n    protected function hasNonEmptyChildren(DOMNode $domNode): bool\n    {\n        if ($domNode->childNodes->length === 0) {\n            return false;\n        }\n        for ($i = $domNode->childNodes->length - 1; $i >= 0; $i--) {\n            $child = $domNode->childNodes->item($i);\n            if (!$child instanceof DOMText\n                || trim($child->textContent) !== ''\n            ) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Whether given node name can be considered as custom element.\n     * (see https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name)\n     */\n    protected function isCustomElement(DOMNode $domNode): bool\n    {\n        return $domNode instanceof DOMElement\n            && preg_match('#^[a-z][a-z0-9]*-.+#', $domNode->nodeName) > 0;\n    }\n\n    protected function log(string $message, array $context = [], $level = null): void\n    {\n        // @todo consider given minimum log-level\n        if (!isset($context['initiator'])) {\n            $context['initiator'] = (string)$this->context->initiator;\n        }\n        $this->logger->debug($message, $context);\n    }\n}\n", "<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 project.\n *\n * It is free software; you can redistribute it and/or modify it under the terms\n * of the MIT License (MIT). For the full copyright and license information,\n * please read the LICENSE file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\HtmlSanitizer\\Tests;\n\nuse PHPUnit\\Framework\\TestCase;\nuse TYPO3\\HtmlSanitizer\\Builder\\CommonBuilder;\n\nclass CommonBuilderTest extends TestCase\n{\n    public function isSanitizedDataProvider(): array\n    {\n        return [\n            '#010' => [\n                '<unknown unknown=\"unknown\">value</unknown>',\n                '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;',\n            ],\n            '#011' => [\n                '<div class=\"nested\"><unknown unknown=\"unknown\">value</unknown></div>',\n                '<div class=\"nested\">&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;</div>',\n            ],\n            '#012' => [\n                '&lt;script&gt;alert(1)&lt;/script&gt;',\n                '&lt;script&gt;alert(1)&lt;/script&gt;',\n            ],\n            '#013' => [\n                '<unknown unknown=\"unknown\">value</unknown>' .\n                    '<unknown unknown=\"unknown\">value</unknown>',\n                '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;' .\n                    '&lt;unknown unknown=\"unknown\"&gt;value&lt;/unknown&gt;'\n            ],\n            '#014' => [\n                '<unknown>value</unknown><unknown>value</unknown>' .\n                    '<div unknown=\"unknown\">value</div>' .\n                    '<unknown>value</unknown><unknown>value</unknown>',\n                '&lt;unknown&gt;value&lt;/unknown&gt;&lt;unknown&gt;value&lt;/unknown&gt;' .\n                    '<div>value</div>' .\n                    '&lt;unknown&gt;value&lt;/unknown&gt;&lt;unknown&gt;value&lt;/unknown&gt;'\n            ],\n            '#015' => [\n                '<unknown unknown=\"unknown\" class=\"nested\"><div class=\"nested\">value</div></unknown>',\n                // '&lt;unknown unknown=\"unknown\" class=\"nested\"&gt;<div class=\"nested\">value</div>&lt;/unknown&gt;',\n                // @todo invalidating nested nodes due invalid parent node is currently expected - topic for discussion\n                '&lt;unknown unknown=\"unknown\" class=\"nested\"&gt;&lt;div class=\"nested\"&gt;value&lt;/div&gt;&lt;/unknown&gt;',\n            ],\n            // @todo bug in https://github.com/Masterminds/html5-php/issues\n            // '#013' => [\n            //    '<strong>Given that x < y and y > z...</strong>',\n            //    '<strong>Given that x &lt; y and y &gt; z...</strong>',\n            // ],\n            '#020' => [\n                '<div unknown=\"unknown\">value</div>',\n                '<div>value</div>',\n            ],\n            '#030' => [\n                '<div class=\"class\">value</div>',\n                '<div class=\"class\">value</div>',\n            ],\n            '#031' => [\n                '<div data-value=\"value\">value</div>',\n                '<div data-value=\"value\">value</div>',\n            ],\n            '#032' => [\n                '<div data-bool>value</div>',\n                '<div data-bool>value</div>',\n            ],\n            '#040' => [\n                '<img src=\"mailto:noreply@typo3.org\" onerror=\"alert(1)\">',\n                '',\n            ],\n            '#041' => [\n                '<img src=\"https://typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"https://typo3.org/logo.svg\">',\n            ],\n            '#042' => [\n                '<img src=\"http://typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"http://typo3.org/logo.svg\">',\n            ],\n            '#043' => [\n                '<img src=\"/typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"/typo3.org/logo.svg\">',\n            ],\n            '#044' => [\n                '<img src=\"typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '<img src=\"typo3.org/logo.svg\">',\n            ],\n            '#045' => [\n                '<img src=\"//typo3.org/logo.svg\" onerror=\"alert(1)\">',\n                '',\n            ],\n            '#046' => [\n                '<img src=\"/typo3.org/logo.svg\" alt=\"logo\" loading=\"lazy\" fetchpriority=\"low\" decoding=\"async\" width=\"100\" height=\"100\" sizes=\"33.3vw\" name=\"logo\" align=\"left\" border=\"0\">',\n                '<img src=\"/typo3.org/logo.svg\" alt=\"logo\" loading=\"lazy\" fetchpriority=\"low\" decoding=\"async\" width=\"100\" height=\"100\" sizes=\"33.3vw\" name=\"logo\" align=\"left\" border=\"0\">',\n            ],\n            '#047' => [\n                '<img src=\"data:text/html,<script>alert(1)</script>\">',\n                '',\n            ],\n            '#048' => [\n                '<img src=\"data:image/png,...\"><img src=\"data:image/png;,...\"><img src=\"data:image/png;base64,...\"><img src=\"data:image/svg+xml;base64,...\">',\n                '<img src=\"data:image/png,...\"><img src=\"data:image/png;,...\"><img src=\"data:image/png;base64,...\"><img src=\"data:image/svg+xml;base64,...\">',\n            ],\n            '#049' => [\n                '<a href=\"git://github.com/typo3/typo3\">GitHub</a>',\n                '<a href=\"git://github.com/typo3/typo3\">GitHub</a>',\n            ],\n            '#050' => [\n                '<a href=\"https://typo3.org/\" role=\"button\">value</a>',\n                '<a href=\"https://typo3.org/\" role=\"button\">value</a>',\n            ],\n            '#051' => [\n                '<a href=\"ssh://example.org/\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#052' => [\n                '<a href=\"javascript:alert(1)\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#053' => [\n                '<a href=\"data:text/html;...\" role=\"button\">value</a>',\n                '<a role=\"button\">value</a>',\n            ],\n            '#054' => [\n                '<a href=\"#anchor\">anchor</a><a name=\"anchor\">content</a>',\n                '<a href=\"#anchor\">anchor</a><a name=\"anchor\">content</a>',\n            ],\n            '#055' => [\n                '<a href=\"tel:123456789\">anchor</a>',\n                '<a href=\"tel:123456789\">anchor</a>',\n            ],\n            '#090' => [\n                '<p data-bool><span data-bool><strong data-bool>value</strong></span></p>',\n                '<p data-bool><span data-bool><strong data-bool>value</strong></span></p>'\n            ],\n            '#100' => [\n                '<table><caption>c</caption><thead><tr><th>h</th></tr></thead><tbody><tr><td>b</td></tr></tbody><tfoot><tr><td>f</td></tr></tfoot></table>',\n                '<table><caption>c</caption><thead><tr><th>h</th></tr></thead><tbody><tr><td>b</td></tr></tbody><tfoot><tr><td>f</td></tr></tfoot></table>',\n            ],\n            '#101' => [\n                '<table align=\"left\" border=\"2\" cellpadding=\"2\" cellspacing=\"2\" class=\"table\" summary=\"summary\"></table>',\n                '<table align=\"left\" border=\"2\" cellpadding=\"2\" cellspacing=\"2\" class=\"table\" summary=\"summary\"></table>',\n            ],\n            '#102' => [\n                '<caption align=\"left\">caption</caption>',\n                '<caption align=\"left\">caption</caption>',\n            ],\n            '#104' => [\n                '<tr align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tr>',\n                '<tr align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tr>',\n            ],\n            '#105' => [\n                '<td abbr=\"abbr\" align=\"left\" valign=\"top\" colspan=\"2\" rowspan=\"2\" bgcolor=\"#cc0000\" axis=\"axis,axis\" headers=\"head,head\" scope=\"scope\" width=\"100\" height=\"100\">value</td>',\n                '<td abbr=\"abbr\" align=\"left\" valign=\"top\" colspan=\"2\" rowspan=\"2\" bgcolor=\"#cc0000\" axis=\"axis,axis\" headers=\"head,head\" scope=\"scope\" width=\"100\" height=\"100\">value</td>',\n            ],\n            '#106' => [\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n            ],\n            '#107' => [\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n                '<thead align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></thead>',\n            ],\n            '#108' => [\n                '<tfoot align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tfoot>',\n                '<tfoot align=\"left\" valign=\"top\" bgcolor=\"#cc0000\"><td>td</td></tfoot>',\n            ],\n            '#109' => [\n                '<colgroup align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" span=\"1\"><col><col span=\"2\" align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" width=\"100\"></colgroup>',\n                '<colgroup align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" span=\"1\"><col><col span=\"2\" align=\"left\" valign=\"top\" bgcolor=\"#cc0000\" width=\"100\"></colgroup>',\n            ],\n            '#120' => [\n                '<figure><img src=\"https://typo3.org/logo.svg\" alt=\"logo\"><figcaption>TYPO3 logo</figcaption></figure>',\n                '<figure><img src=\"https://typo3.org/logo.svg\" alt=\"logo\"><figcaption>TYPO3 logo</figcaption></figure>',\n            ],\n            '#121' => [\n                '<picture><source srcset=\"/logo-800.png\" media=\"(min-width: 800px)\" type=\"image/png\" sizes=\"33.3vw\"></picture>',\n                '<picture><source srcset=\"/logo-800.png\" media=\"(min-width: 800px)\" type=\"image/png\" sizes=\"33.3vw\"></picture>'\n            ],\n            '#122' => [\n                '<video controls src=\"/video.mp4\"><track default kind=\"captions\" srclang=\"en\" src=\"/video.vtt\"></video>',\n                '<video controls src=\"/video.mp4\"><track default kind=\"captions\" srclang=\"en\" src=\"/video.vtt\"></video>',\n            ],\n            '200' => [\n                '<ul><li>item</li><li>item</li></ul>',\n                '<ul><li>item</li><li>item</li></ul>',\n            ],\n            '201' => [\n                '<ol reversed start=\"3\" type=\"I\"><li>item</li><li value=\"13\">item</li></ol>',\n                '<ol reversed start=\"3\" type=\"I\"><li>item</li><li value=\"13\">item</li></ol>',\n            ],\n            '#900' => [\n                '<div id=\"main\">' .\n                    '<a href=\"https://typo3.org/\" data-type=\"url\" wrong-attr=\"is-removed\">TYPO3</a><br>' .\n                    '(the <script>alert(1)</script> tag shall be encoded to HTML entities)'.\n                '</div>',\n                '<div id=\"main\">' .\n                    '<a href=\"https://typo3.org/\" data-type=\"url\">TYPO3</a><br>' .\n                    '(the &lt;script&gt;alert(1)&lt;/script&gt; tag shall be encoded to HTML entities)'.\n                '</div>',\n            ],\n            '#901' => [\n                '<div itemprop=\"tel\" itemscope>' .\n                    '<span itemprop=\"value\">+1-234-56789</span>' .\n                    '<meta itemprop=\"type\" content=\"voice\">' .\n                '</div>',\n                '<div itemprop=\"tel\" itemscope>' .\n                    '<span itemprop=\"value\">+1-234-56789</span>' .\n                    '<meta itemprop=\"type\" content=\"voice\">' .\n                '</div>'\n            ],\n            '#902' => [\n                '<div><meta http-equiv=\"refresh\" content=\"1;https://evil.typo3.org/\" name=\"referrer\" charset=\"utf-8\"></div>',\n                '<div></div>'\n            ],\n            '#903' => [\n                '<font class=\"font\" color=\"#000000\" face=\"Verdana,Arial\" size=\"13\">value</font>',\n                '<font class=\"font\" color=\"#000000\" face=\"Verdana,Arial\" size=\"13\">value</font>'\n            ],\n            '#904' => [\n                '<img src=\"cid:DC117C9322DEB502C3B16769A8A64E08@example.test\">',\n                '<img src=\"cid:DC117C9322DEB502C3B16769A8A64E08@example.test\">',\n            ],\n            '#905' => [\n                '<a href=\"mid:D89CD33E-F9CF-4CA0-BCE3-AC89E5D41DE1@example.test/DC117C9322DEB502C3B16769A8A64E08@example.test\">see previous message</a>',\n                '<a href=\"mid:D89CD33E-F9CF-4CA0-BCE3-AC89E5D41DE1@example.test/DC117C9322DEB502C3B16769A8A64E08@example.test\">see previous message</a>',\n            ],\n            '#906' => [\n                '<center>value</center><strike>value</strike><nobr>value</nobr>',\n                '<center>value</center><strike>value</strike><nobr>value</nobr>',\n            ],\n            '#907' => [\n                '<script>alert(1)</script>'\n                . '<script type=\"application/javascript\">alert(2)</script>'\n                . '<script type=\"application/ecmascript\">alert(3)</script>',\n                '&lt;script&gt;alert(1)&lt;/script&gt;'\n                . '&lt;script type=\"application/javascript\"&gt;alert(2)&lt;/script&gt;'\n                . '&lt;script type=\"application/ecmascript\"&gt;alert(3)&lt;/script&gt;'\n            ],\n            '#908' => [\n                '<a href=\"xmpp:user@example.org?message\">value</a>',\n                '<a href=\"xmpp:user@example.org?message\">value</a>',\n            ],\n            '#909' => [\n                '<!-- #comment -->',\n                '<!-- #comment -->',\n            ],\n            '#910' => [\n                '<!-- <\"comment\"> -->',\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n            ],\n            '#911' => [\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n                '<!-- &lt;&quot;comment&quot;&gt; -->',\n            ],\n            '#912' => [\n                '<!---><p>',\n                '<!---&gt;&lt;p&gt;-->',\n            ],\n            '#913' => [\n                '<!---!><p>',\n                '<!---!&gt;&lt;p&gt;-->',\n            ],\n            '#915' => [\n                '#text',\n                '#text',\n            ],\n            '#920' => [\n                '<![CDATA[ #cdata ]]>',\n                '#cdata',\n            ],\n            '#921' => [\n                '<![CDATA[<any><span data-value=\"value\"></any>*/]]>',\n                '&lt;any&gt;&lt;span data-value=\"value\"&gt;&lt;/any&gt;*/',\n            ],\n            '#930' => [\n                '<br><any>value</any></br>',\n                '<br>&lt;any&gt;value&lt;/any&gt;<br>',\n            ],\n            '#931' => [\n                '<hr><any>value</any></hr>',\n                '<hr>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#932' => [\n                '<wbr><any>value</any></wbr>',\n                '<wbr>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#933' => [\n                '<source><any>value</any></source>',\n                '<source>&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#934' => [\n                '<img src=\"/typo3.org/logo.svg\"><any>value</any></img>',\n                '<img src=\"/typo3.org/logo.svg\">&lt;any&gt;value&lt;/any&gt;',\n            ],\n            '#935' => [\n                '<p class=\"</p><script>alert(1)\">value</p>',\n                '<p class=\"&lt;/p&gt;&lt;script&gt;alert(1)\">value</p>',\n            ],\n            '#936' => [\n                '<p class=\"{&quot;json&quot;:true}\">value</p>',\n                '<p class=\"{&quot;json&quot;:true}\">value</p>',\n            ],\n            '#941' => [\n                '<?xml >s<img src=x onerror=alert(1)> ?>',\n                '&lt;?xml &gt;s&lt;img src=x onerror=alert(1)&gt; ?&gt;',\n            ],\n        ];\n    }\n\n    /**\n     * @param string $payload\n     * @param string $expectation\n     * @test\n     * @dataProvider isSanitizedDataProvider\n     */\n    public function isSanitized(string $payload, string $expectation): void\n    {\n        $builder = new CommonBuilder();\n        $sanitizer = $builder->build();\n        self::assertSame($expectation, $sanitizer->sanitize($payload));\n    }\n}\n"], "filenames": ["src/Behavior.php", "src/Builder/CommonBuilder.php", "src/Visitor/CommonVisitor.php", "tests/CommonBuilderTest.php"], "buggy_code_start_loc": [65, 79, 21, 265], "buggy_code_end_loc": [226, 80, 221, 304], "fixing_code_start_loc": [66, 79, 22, 266], "fixing_code_end_loc": [237, 84, 228, 317], "type": "CWE-79", "message": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. In affected versions DOM processing instructions are not handled correctly. This allows bypassing the cross-site scripting mechanism of typo3/html-sanitizer. This vulnerability has been addressed in versions 1.5.3 and 2.1.4. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-47125", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-14T20:15:07.837", "lastModified": "2023-11-21T02:58:51.787", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. In affected versions DOM processing instructions are not handled correctly. This allows bypassing the cross-site scripting mechanism of typo3/html-sanitizer. This vulnerability has been addressed in versions 1.5.3 and 2.1.4. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "TYPO3 es un sistema de gesti\u00f3n de contenido web basado en PHP de c\u00f3digo abierto publicado bajo GNU GPL. En las versiones afectadas, las instrucciones de procesamiento DOM no se manejan correctamente. Esto permite evitar el mecanismo de Cross-Site Scripting de typo3/html-sanitizer. Esta vulnerabilidad se ha solucionado en las versiones 1.5.3 y 2.1.4. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:html_sanitizer:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.0.0", "versionEndExcluding": "1.5.3", "matchCriteriaId": "FCFA3BD7-BF85-4D4F-B426-C5A97411A84A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:html_sanitizer:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "2.1.4", "matchCriteriaId": "99D32398-FC27-42F1-ABC1-146567AA7769"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:elts:*:*:*", "versionStartIncluding": "8.7.42", "versionEndExcluding": "8.7.55", "matchCriteriaId": "AD741CFE-BBE7-41AB-912B-6BB5A1CFD867"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:elts:*:*:*", "versionStartIncluding": "9.5.29", "versionEndExcluding": "9.5.44", "matchCriteriaId": "47F42BD3-0D7E-41D1-80D8-FB1B9CF30481"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:elts:*:*:*", "versionStartIncluding": "10.4.19", "versionEndExcluding": "10.4.41", "matchCriteriaId": "9ACC1D13-0C81-4ECF-B733-AAD45BF271D8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "11.3.2", "versionEndExcluding": "11.5.33", "matchCriteriaId": "2AB261F6-8F92-4313-8CA6-D77E18E2D125"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "12.0.0", "versionEndExcluding": "12.4.8", "matchCriteriaId": "A5B21F62-A105-487E-B52A-0E7501A4ADEA"}]}]}], "references": [{"url": "https://github.com/TYPO3/html-sanitizer/commit/b8f90717251d968c49dc77f8c1e5912e2fbe0dff", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/TYPO3/html-sanitizer/security/advisories/GHSA-mm79-jhqm-9j54", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://typo3.org/security/advisory/typo3-core-sa-2023-007", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/html-sanitizer/commit/b8f90717251d968c49dc77f8c1e5912e2fbe0dff"}}