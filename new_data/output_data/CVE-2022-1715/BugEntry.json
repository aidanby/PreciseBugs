{"buggy_code": ["<?php\n/**\n * This file is part of FacturaScripts\n * Copyright (C) 2017-2021 Carlos Garcia Gomez <carlos@facturascripts.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace FacturaScripts\\Core\\App;\n\nuse Exception;\nuse FacturaScripts\\Core\\Base\\Controller;\nuse FacturaScripts\\Core\\Base\\ControllerPermissions;\nuse FacturaScripts\\Core\\Base\\Debug\\DumbBar;\nuse FacturaScripts\\Core\\Base\\MenuManager;\nuse FacturaScripts\\Core\\Base\\ToolBox;\nuse FacturaScripts\\Dinamic\\Lib\\AssetManager;\nuse FacturaScripts\\Dinamic\\Model\\User;\nuse Symfony\\Component\\HttpFoundation\\Cookie;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class to manage selected controller.\n *\n * @author Carlos Garc\u00eda G\u00f3mez <carlos@facturascripts.com>\n */\nclass AppController extends App\n{\n\n    const USER_UPDATE_ACTIVITY_PERIOD = 3600;\n\n    /**\n     * Controller loaded\n     *\n     * @var Controller\n     */\n    private $controller;\n\n    /**\n     * Load user's menu\n     *\n     * @var MenuManager\n     */\n    private $menuManager;\n\n    /**\n     * Contains the page name.\n     *\n     * @var string\n     */\n    private $pageName;\n\n    /**\n     * @var User|false\n     */\n    private $user = false;\n\n    /**\n     * Initializes the app.\n     *\n     * @param string $uri\n     * @param string $pageName\n     */\n    public function __construct(string $uri = '/', string $pageName = '')\n    {\n        parent::__construct($uri);\n        $this->menuManager = new MenuManager();\n        $this->pageName = $pageName;\n    }\n\n    /**\n     * @return DumbBar\n     */\n    public function debugBar()\n    {\n        return new DumbBar();\n    }\n\n    /**\n     * Select and run the corresponding controller.\n     *\n     * @return bool\n     */\n    public function run(): bool\n    {\n        if (false === parent::run()) {\n            return false;\n        } elseif ($this->request->query->get('logout')) {\n            $this->userLogout();\n            $this->renderHtml('Login/Login.html.twig');\n            $route = empty(FS_ROUTE) ? 'index.php' : FS_ROUTE;\n            $this->response->headers->set('Refresh', '0; ' . $route);\n            return false;\n        } elseif ($this->request->request->get('fsNewUserPasswd')) {\n            $this->newUserPassword();\n        }\n\n        $this->user = $this->userAuth();\n\n        // returns the name of the controller to load\n        $pageName = $this->getPageName();\n        $this->loadController($pageName);\n\n        // returns true for testing purpose\n        return true;\n    }\n\n    /**\n     * @param int $status\n     * @param string $message\n     */\n    protected function die(int $status, string $message = '')\n    {\n        $content = ToolBox::i18n()->trans($message);\n        foreach (ToolBox::log()::read() as $log) {\n            $content .= empty($content) ? $log[\"message\"] : \"\\n\" . $log[\"message\"];\n        }\n\n        $this->response->setContent(nl2br($content));\n        $this->response->setStatusCode($status);\n    }\n\n    /**\n     * Returns the controllers full name\n     *\n     * @param string $pageName\n     *\n     * @return string\n     */\n    private function getControllerFullName(string $pageName): string\n    {\n        $controllerName = '\\\\FacturaScripts\\\\Dinamic\\\\Controller\\\\' . $pageName;\n        return class_exists($controllerName) ? $controllerName : '\\\\FacturaScripts\\\\Core\\\\Controller\\\\' . $pageName;\n    }\n\n    /**\n     * Returns the name of the default controller for the current user or for all users.\n     *\n     * @return string\n     */\n    private function getPageName(): string\n    {\n        if ($this->pageName !== '') {\n            return $this->pageName;\n        }\n\n        if ($this->getUriParam(0) !== 'index.php' && $this->getUriParam(0) !== '') {\n            return $this->getUriParam(0);\n        }\n\n        if ($this->user && !empty($this->user->homepage)) {\n            return $this->user->homepage;\n        }\n\n        return ToolBox::appSettings()->get('default', 'homepage', 'Wizard');\n    }\n\n    /**\n     * Load and process the $pageName controller.\n     *\n     * @param string $pageName\n     */\n    protected function loadController(string $pageName)\n    {\n        $controllerName = $this->getControllerFullName($pageName);\n        $template = 'Error/ControllerNotFound.html.twig';\n\n        // If we found a controller, load it\n        if (class_exists($controllerName)) {\n            ToolBox::i18nLog()->debug('loading-controller', ['%controllerName%' => $controllerName]);\n            $this->menuManager->setUser($this->user);\n            $permissions = new ControllerPermissions($this->user, $pageName);\n\n            $this->controller = new $controllerName($pageName, $this->uri);\n            if ($this->user === false) {\n                $this->controller->publicCore($this->response);\n                $template = $this->controller->getTemplate();\n            } elseif ($permissions->allowAccess) {\n                $this->menuManager->selectPage($this->controller->getPageData());\n                $this->controller->privateCore($this->response, $this->user, $permissions);\n                $template = $this->controller->getTemplate();\n            } else {\n                $template = 'Error/AccessDenied.html.twig';\n            }\n        } else {\n            ToolBox::i18nLog()->critical('controller-not-found');\n            $this->response->setStatusCode(Response::HTTP_NOT_FOUND);\n        }\n\n        if ($template) {\n            $this->renderHtml($template, $controllerName);\n        }\n    }\n\n    private function newUserPassword()\n    {\n        $user = new User();\n        $nick = $this->request->request->get('fsNewUserPasswd');\n        $pass = $this->request->request->get('fsNewPasswd');\n        $pass2 = $this->request->request->get('fsNewPasswd2');\n\n        if ($pass != $pass2) {\n            ToolBox::i18nLog()->warning('different-passwords', ['%userNick%' => $nick]);\n            return;\n        } elseif ($user->loadFromCode($nick) && $this->request->request->get('fsDbPasswd') == FS_DB_PASS) {\n            $user->setPassword($pass);\n            $user->save();\n            ToolBox::i18nLog()->notice('record-updated-correctly');\n            return;\n        }\n\n        $this->ipWarning();\n        ToolBox::i18nLog()->warning('login-password-fail');\n    }\n\n    /**\n     * Creates HTML with the selected template. The data will not be inserted in it\n     * until render() is executed\n     *\n     * @param string $template\n     * @param string $controllerName\n     */\n    protected function renderHtml(string $template, string $controllerName = '')\n    {\n        // HTML template variables\n        $templateVars = [\n            'appSettings' => ToolBox::appSettings(),\n            'assetManager' => new AssetManager(),\n            'controllerName' => $controllerName,\n            'debugBarRender' => $this->debugBar(),\n            'fsc' => $this->controller,\n            'menuManager' => $this->menuManager,\n            'template' => $template\n        ];\n\n        $webRender = new WebRender();\n        $webRender->loadPluginFolders();\n\n        try {\n            $this->response->setContent($webRender->render($template, $templateVars));\n        } catch (Exception $exc) {\n            ToolBox::log()->critical($exc->getMessage());\n            $this->response->setContent($webRender->render('Error/TemplateError.html.twig', $templateVars));\n            $this->response->setStatusCode(Response::HTTP_INTERNAL_SERVER_ERROR);\n        }\n    }\n\n    /**\n     * User authentication, returns the user when successful, or false when not.\n     *\n     * @return User|false\n     */\n    private function userAuth()\n    {\n        $user = new User();\n        $nick = $this->request->request->get('fsNick', '');\n        if ($nick === '') {\n            return $this->cookieAuth($user);\n        }\n\n        if ($user->loadFromCode($nick) && $user->enabled) {\n            if ($user->verifyPassword($this->request->request->get('fsPassword'))) {\n                // Execute actions from User model extensions\n                $user->pipe('login');\n\n                $this->updateCookies($user, true);\n                ToolBox::ipFilter()->clear();\n                ToolBox::i18nLog()->debug('login-ok', ['%nick%' => $user->nick]);\n                ToolBox::log()::setContext('nick', $user->nick);\n                return $user;\n            }\n\n            $this->ipWarning();\n            ToolBox::i18nLog()->warning('login-password-fail');\n            return false;\n        }\n\n        $this->ipWarning();\n        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => htmlspecialchars($nick)]);\n        return false;\n    }\n\n    /**\n     * Authenticate the user using the cookie.\n     *\n     * @param User $user\n     *\n     * @return User|bool\n     */\n    private function cookieAuth(User &$user)\n    {\n        $cookieNick = $this->request->cookies->get('fsNick', '');\n        if ($cookieNick === '') {\n            return false;\n        }\n\n        if ($user->loadFromCode($cookieNick) && $user->enabled) {\n            if ($user->verifyLogkey($this->request->cookies->get('fsLogkey'))) {\n                $this->updateCookies($user);\n                ToolBox::i18nLog()->debug('login-ok', ['%nick%' => $user->nick]);\n                ToolBox::log()::setContext('nick', $user->nick);\n                return $user;\n            }\n\n            ToolBox::i18nLog()->warning('login-cookie-fail');\n            $this->response->headers->clearCookie('fsNick');\n            return false;\n        }\n\n        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => htmlspecialchars($cookieNick)]);\n        return false;\n    }\n\n    /**\n     * Updates user cookies.\n     *\n     * @param User $user\n     * @param bool $force\n     */\n    private function updateCookies(User &$user, bool $force = false)\n    {\n        if ($force || time() - strtotime($user->lastactivity) > self::USER_UPDATE_ACTIVITY_PERIOD) {\n            $ipAddress = ToolBox::ipFilter()->getClientIp();\n            if ($force) {\n                $user->newLogkey($ipAddress);\n            } else {\n                $user->updateActivity($ipAddress);\n            }\n\n            $user->save();\n\n            $expire = time() + FS_COOKIES_EXPIRE;\n            $this->response->headers->setCookie(new Cookie('fsNick', $user->nick, $expire, FS_ROUTE));\n            $this->response->headers->setCookie(new Cookie('fsLogkey', $user->logkey, $expire, FS_ROUTE));\n            $this->response->headers->setCookie(new Cookie('fsLang', $user->langcode, $expire, FS_ROUTE));\n            $this->response->headers->setCookie(new Cookie('fsCompany', $user->idempresa, $expire, FS_ROUTE));\n        }\n    }\n\n    /**\n     * Log out the user.\n     */\n    private function userLogout()\n    {\n        $this->response->headers->clearCookie('fsNick', FS_ROUTE);\n        $this->response->headers->clearCookie('fsLogkey', FS_ROUTE);\n        $this->response->headers->clearCookie('fsCompany', FS_ROUTE);\n        ToolBox::i18nLog()->debug('logout-ok');\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * This file is part of FacturaScripts\n * Copyright (C) 2017-2021 Carlos Garcia Gomez <carlos@facturascripts.com>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n */\n\nnamespace FacturaScripts\\Core\\App;\n\nuse Exception;\nuse FacturaScripts\\Core\\Base\\Controller;\nuse FacturaScripts\\Core\\Base\\ControllerPermissions;\nuse FacturaScripts\\Core\\Base\\Debug\\DumbBar;\nuse FacturaScripts\\Core\\Base\\MenuManager;\nuse FacturaScripts\\Core\\Base\\ToolBox;\nuse FacturaScripts\\Dinamic\\Lib\\AssetManager;\nuse FacturaScripts\\Dinamic\\Model\\User;\nuse Symfony\\Component\\HttpFoundation\\Cookie;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\n/**\n * Class to manage selected controller.\n *\n * @author Carlos Garc\u00eda G\u00f3mez <carlos@facturascripts.com>\n */\nclass AppController extends App\n{\n\n    const USER_UPDATE_ACTIVITY_PERIOD = 3600;\n\n    /**\n     * Controller loaded\n     *\n     * @var Controller\n     */\n    private $controller;\n\n    /**\n     * Load user's menu\n     *\n     * @var MenuManager\n     */\n    private $menuManager;\n\n    /**\n     * Contains the page name.\n     *\n     * @var string\n     */\n    private $pageName;\n\n    /**\n     * @var User|false\n     */\n    private $user = false;\n\n    /**\n     * Initializes the app.\n     *\n     * @param string $uri\n     * @param string $pageName\n     */\n    public function __construct(string $uri = '/', string $pageName = '')\n    {\n        parent::__construct($uri);\n        $this->menuManager = new MenuManager();\n        $this->pageName = $pageName;\n    }\n\n    /**\n     * @return DumbBar\n     */\n    public function debugBar()\n    {\n        return new DumbBar();\n    }\n\n    /**\n     * Select and run the corresponding controller.\n     *\n     * @return bool\n     */\n    public function run(): bool\n    {\n        if (false === parent::run()) {\n            return false;\n        } elseif ($this->request->query->get('logout')) {\n            $this->userLogout();\n            $this->renderHtml('Login/Login.html.twig');\n            $route = empty(FS_ROUTE) ? 'index.php' : FS_ROUTE;\n            $this->response->headers->set('Refresh', '0; ' . $route);\n            return false;\n        } elseif ($this->request->request->get('fsNewUserPasswd')) {\n            $this->newUserPassword();\n        }\n\n        $this->user = $this->userAuth();\n\n        // returns the name of the controller to load\n        $pageName = $this->getPageName();\n        $this->loadController($pageName);\n\n        // returns true for testing purpose\n        return true;\n    }\n\n    /**\n     * @param int $status\n     * @param string $message\n     */\n    protected function die(int $status, string $message = '')\n    {\n        $content = ToolBox::i18n()->trans($message);\n        foreach (ToolBox::log()::read() as $log) {\n            $content .= empty($content) ? $log[\"message\"] : \"\\n\" . $log[\"message\"];\n        }\n\n        $this->response->setContent(nl2br($content));\n        $this->response->setStatusCode($status);\n    }\n\n    /**\n     * Returns the controllers full name\n     *\n     * @param string $pageName\n     *\n     * @return string\n     */\n    private function getControllerFullName(string $pageName): string\n    {\n        $controllerName = '\\\\FacturaScripts\\\\Dinamic\\\\Controller\\\\' . $pageName;\n        return class_exists($controllerName) ? $controllerName : '\\\\FacturaScripts\\\\Core\\\\Controller\\\\' . $pageName;\n    }\n\n    /**\n     * Returns the name of the default controller for the current user or for all users.\n     *\n     * @return string\n     */\n    private function getPageName(): string\n    {\n        if ($this->pageName !== '') {\n            return $this->pageName;\n        }\n\n        if ($this->getUriParam(0) !== 'index.php' && $this->getUriParam(0) !== '') {\n            return $this->getUriParam(0);\n        }\n\n        if ($this->user && !empty($this->user->homepage)) {\n            return $this->user->homepage;\n        }\n\n        return ToolBox::appSettings()->get('default', 'homepage', 'Wizard');\n    }\n\n    /**\n     * Load and process the $pageName controller.\n     *\n     * @param string $pageName\n     */\n    protected function loadController(string $pageName)\n    {\n        $controllerName = $this->getControllerFullName($pageName);\n        $template = 'Error/ControllerNotFound.html.twig';\n\n        // If we found a controller, load it\n        if (class_exists($controllerName)) {\n            ToolBox::i18nLog()->debug('loading-controller', ['%controllerName%' => $controllerName]);\n            $this->menuManager->setUser($this->user);\n            $permissions = new ControllerPermissions($this->user, $pageName);\n\n            $this->controller = new $controllerName($pageName, $this->uri);\n            if ($this->user === false) {\n                $this->controller->publicCore($this->response);\n                $template = $this->controller->getTemplate();\n            } elseif ($permissions->allowAccess) {\n                $this->menuManager->selectPage($this->controller->getPageData());\n                $this->controller->privateCore($this->response, $this->user, $permissions);\n                $template = $this->controller->getTemplate();\n            } else {\n                $template = 'Error/AccessDenied.html.twig';\n            }\n        } else {\n            ToolBox::i18nLog()->critical('controller-not-found');\n            $this->response->setStatusCode(Response::HTTP_NOT_FOUND);\n        }\n\n        if ($template) {\n            $this->renderHtml($template, $controllerName);\n        }\n    }\n\n    private function newUserPassword()\n    {\n        $user = new User();\n        $nick = $this->request->request->get('fsNewUserPasswd');\n        $pass = $this->request->request->get('fsNewPasswd');\n        $pass2 = $this->request->request->get('fsNewPasswd2');\n\n        if ($pass != $pass2) {\n            ToolBox::i18nLog()->warning('different-passwords', ['%userNick%' => htmlspecialchars($nick)]);\n            return;\n        } elseif ($user->loadFromCode($nick) && $this->request->request->get('fsDbPasswd') === FS_DB_PASS) {\n            $user->setPassword($pass);\n            $user->save();\n            ToolBox::i18nLog()->notice('record-updated-correctly');\n            return;\n        }\n\n        $this->ipWarning();\n        ToolBox::i18nLog()->warning('login-password-fail');\n    }\n\n    /**\n     * Creates HTML with the selected template. The data will not be inserted in it\n     * until render() is executed\n     *\n     * @param string $template\n     * @param string $controllerName\n     */\n    protected function renderHtml(string $template, string $controllerName = '')\n    {\n        // HTML template variables\n        $templateVars = [\n            'appSettings' => ToolBox::appSettings(),\n            'assetManager' => new AssetManager(),\n            'controllerName' => $controllerName,\n            'debugBarRender' => $this->debugBar(),\n            'fsc' => $this->controller,\n            'menuManager' => $this->menuManager,\n            'template' => $template\n        ];\n\n        $webRender = new WebRender();\n        $webRender->loadPluginFolders();\n\n        try {\n            $this->response->setContent($webRender->render($template, $templateVars));\n        } catch (Exception $exc) {\n            ToolBox::log()->critical($exc->getMessage());\n            $this->response->setContent($webRender->render('Error/TemplateError.html.twig', $templateVars));\n            $this->response->setStatusCode(Response::HTTP_INTERNAL_SERVER_ERROR);\n        }\n    }\n\n    /**\n     * User authentication, returns the user when successful, or false when not.\n     *\n     * @return User|false\n     */\n    private function userAuth()\n    {\n        $user = new User();\n        $nick = $this->request->request->get('fsNick', '');\n        if ($nick === '') {\n            return $this->cookieAuth($user);\n        }\n\n        if ($user->loadFromCode($nick) && $user->enabled) {\n            if ($user->verifyPassword($this->request->request->get('fsPassword'))) {\n                // Execute actions from User model extensions\n                $user->pipe('login');\n\n                $this->updateCookies($user, true);\n                ToolBox::ipFilter()->clear();\n                ToolBox::i18nLog()->debug('login-ok', ['%nick%' => $user->nick]);\n                ToolBox::log()::setContext('nick', $user->nick);\n                return $user;\n            }\n\n            $this->ipWarning();\n            ToolBox::i18nLog()->warning('login-password-fail');\n            return false;\n        }\n\n        $this->ipWarning();\n        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => htmlspecialchars($nick)]);\n        return false;\n    }\n\n    /**\n     * Authenticate the user using the cookie.\n     *\n     * @param User $user\n     *\n     * @return User|bool\n     */\n    private function cookieAuth(User &$user)\n    {\n        $cookieNick = $this->request->cookies->get('fsNick', '');\n        if ($cookieNick === '') {\n            return false;\n        }\n\n        if ($user->loadFromCode($cookieNick) && $user->enabled) {\n            if ($user->verifyLogkey($this->request->cookies->get('fsLogkey'))) {\n                $this->updateCookies($user);\n                ToolBox::i18nLog()->debug('login-ok', ['%nick%' => $user->nick]);\n                ToolBox::log()::setContext('nick', $user->nick);\n                return $user;\n            }\n\n            ToolBox::i18nLog()->warning('login-cookie-fail');\n            $this->response->headers->clearCookie('fsNick');\n            return false;\n        }\n\n        ToolBox::i18nLog()->warning('login-user-not-found', ['%nick%' => htmlspecialchars($cookieNick)]);\n        return false;\n    }\n\n    /**\n     * Updates user cookies.\n     *\n     * @param User $user\n     * @param bool $force\n     */\n    private function updateCookies(User &$user, bool $force = false)\n    {\n        if ($force || time() - strtotime($user->lastactivity) > self::USER_UPDATE_ACTIVITY_PERIOD) {\n            $ipAddress = ToolBox::ipFilter()->getClientIp();\n            if ($force) {\n                $user->newLogkey($ipAddress);\n            } else {\n                $user->updateActivity($ipAddress);\n            }\n\n            $user->save();\n\n            $expire = time() + FS_COOKIES_EXPIRE;\n            $this->response->headers->setCookie(new Cookie('fsNick', $user->nick, $expire, FS_ROUTE));\n            $this->response->headers->setCookie(new Cookie('fsLogkey', $user->logkey, $expire, FS_ROUTE));\n            $this->response->headers->setCookie(new Cookie('fsLang', $user->langcode, $expire, FS_ROUTE));\n            $this->response->headers->setCookie(new Cookie('fsCompany', $user->idempresa, $expire, FS_ROUTE));\n        }\n    }\n\n    /**\n     * Log out the user.\n     */\n    private function userLogout()\n    {\n        $this->response->headers->clearCookie('fsNick', FS_ROUTE);\n        $this->response->headers->clearCookie('fsLogkey', FS_ROUTE);\n        $this->response->headers->clearCookie('fsCompany', FS_ROUTE);\n        ToolBox::i18nLog()->debug('logout-ok');\n    }\n}\n"], "filenames": ["Core/App/AppController.php"], "buggy_code_start_loc": [214], "buggy_code_end_loc": [217], "fixing_code_start_loc": [214], "fixing_code_end_loc": [217], "type": "CWE-522", "message": "Account Takeover in GitHub repository neorazorx/facturascripts prior to 2022.07.", "other": {"cve": {"id": "CVE-2022-1715", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-13T17:15:07.657", "lastModified": "2022-05-26T15:19:00.120", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Account Takeover in GitHub repository neorazorx/facturascripts prior to 2022.07."}, {"lang": "es", "value": "Una Toma de control de la Cuenta en el repositorio de GitHub neorazorx/facturascripts versiones anteriores a 2022.07"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-522"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:facturascripts:facturascripts:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022.07", "matchCriteriaId": "9E4D15F9-24C7-490B-9DE0-71406995A06F"}]}]}], "references": [{"url": "https://github.com/neorazorx/facturascripts/commit/714bebf4c35e3eedda138f5ee912a8031bc8b1ab", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/58918962-ccb5-47f9-bb43-ffd8cae1ef24", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/neorazorx/facturascripts/commit/714bebf4c35e3eedda138f5ee912a8031bc8b1ab"}}