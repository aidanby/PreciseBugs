{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n\nclass UsersController extends AppController\n{\n    public $newkey;\n\n    public $components = array(\n            'Security',\n            'Email',\n            'RequestHandler'\n    );\n\n    public $paginate = array(\n            'limit' => 60,\n            'recursive' => -1,\n            'order' => array(\n                    'Organisation.name' => 'ASC'\n            ),\n            'contain' => array(\n                'Organisation' => array('id', 'name'),\n                'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n            )\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        // what pages are allowed for non-logged-in users\n        $this->Auth->allow('login', 'logout');\n    }\n\n    public function view($id = null)\n    {\n        if (\"me\" == $id) {\n            $id = $this->Auth->user('id');\n        }\n        if (!$this->_isSiteAdmin() && $this->Auth->user('id') != $id) {\n            throw new NotFoundException(__('Invalid user or not authorised.'));\n        }\n        if (!is_numeric($id) && !empty($id)) {\n            $userId = $this->User->find('first', array(\n                    'conditions' => array('email' => $id),\n                    'fields' => array('id')\n            ));\n            $id = $userid['User']['id'];\n        }\n        $user = $this->User->read(null, $id);\n        $user = $this->User->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('User.id' => $id),\n            'contain' => array(\n                'UserSetting',\n                'Role',\n                'Organisation'\n            )\n        ));\n        if (empty($user)) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        if (!empty($user['User']['gpgkey'])) {\n            $pgpDetails = $this->User->verifySingleGPG($user);\n            $user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n            $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n        }\n        if ($this->_isRest()) {\n            unset($user['User']['server_id']);\n            $user['User']['password'] = '*****';\n            $temp = array();\n            foreach ($user['UserSetting'] as $k => $v) {\n                $temp[$v['setting']] = $v['value'];\n            }\n            $user['UserSetting'] = $temp;\n            return $this->RestResponse->viewData($this->__massageUserObject($user), $this->response->type());\n        } else {\n            $this->set('user', $user);\n        }\n    }\n\n    private function __massageUserObject($user)\n    {\n        unset($user['User']['server_id']);\n        $user['User']['password'] = '*****';\n        $objectsToInclude = array('User', 'Role', 'UserSetting', 'Organisation');\n        foreach ($objectsToInclude as $objectToInclude) {\n            if (isset($user[$objectToInclude])) {\n                $temp[$objectToInclude] = $user[$objectToInclude];\n            }\n        }\n        return $temp;\n    }\n\n    public function request_API()\n    {\n        if (Configure::read('MISP.disable_emailing')) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'API access request failed. E-mailing is currently disabled on this instance.')), 'status'=>200, 'type' => 'json'));\n        }\n        $responsibleAdmin = $this->User->findAdminsResponsibleForUser($this->Auth->user());\n        if (isset($responsibleAdmin['email']) && !empty($responsibleAdmin['email'])) {\n            $subject = \"[MISP \" . Configure::read('MISP.org') . \"] User requesting API access\";\n            $body = \"A user (\" . $this->Auth->user('email') . \") has sent you a request to enable his/her API key access.\" . PHP_EOL;\n            $body .= \"You can edit the user's profile at \" . Configure::read('MISP.baseurl') . '/admin/users/edit/' . $this->Auth->user('id');\n            $user = $this->User->find('first', array('conditions' => array('User.id' => $responsibleAdmin['id'])));\n            $result = $this->User->sendEmail($user, $body, false, $subject);\n            if ($result) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'API access requested.')), 'status'=>200, 'type' => 'json'));\n            }\n        }\n        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, please try again later.')), 'status'=>200, 'type' => 'json'));\n    }\n\n    public function edit()\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        $currentUser = $this->User->find('first', array(\n            'conditions' => array('User.id' => $this->Auth->user('id')),\n            'recursive' => -1\n        ));\n        if (empty($currentUser)) {\n            throw new NotFoundException('Something went wrong. Your user account could not be accessed.');\n        }\n        $id = $currentUser['User']['id'];\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (empty($this->request->data['User'])) {\n                $this->request->data = array('User' => $this->request->data);\n            }\n            $abortPost = false;\n            if (!empty($this->request->data['User']['email']) && !$this->_isSiteAdmin()) {\n                $organisation = $this->User->Organisation->find('first', array(\n                    'conditions' => array('Organisation.id' => $this->Auth->user('org_id')),\n                    'recursive' => -1\n                ));\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $abortPost = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $abortPost = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $message = __('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']);\n                    }\n                }\n            }\n            if (!$abortPost && !$this->_isRest()) {\n                if (Configure::read('Security.require_password_confirmation')) {\n                    if (!empty($this->request->data['User']['current_password'])) {\n                        $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                        if (!$hashed) {\n                            $abortPost = true;\n                            $this->Flash->error('Invalid password. Please enter your current password to continue.');\n                        }\n                        unset($this->request->data['User']['current_password']);\n                    } else {\n                        $abortPost = true;\n                        $this->Flash->info('Please enter your current password to continue.');\n                    }\n                }\n            }\n            if (!$abortPost) {\n                // What fields should be saved (allowed to be saved)\n                $fieldList = array('email', 'autoalert', 'gpgkey', 'certif_public', 'nids_sid', 'contactalert', 'disabled');\n                if (!empty($this->request->data['User']['password'])) {\n                    $fieldList[] = 'password';\n                    $fieldList[] = 'confirm_password';\n                }\n                foreach ($this->request->data['User'] as $k => $v) {\n                    $currentUser['User'][$k] = $v;\n                }\n                // Save the data\n                if ($this->_isRest()) {\n                    if (!empty($this->request->data['User']['password'])) {\n                        if ($this->request->data['User']['password'] === '*****') {\n                            unset($this->request->data['User']['password']);\n                        } else {\n                            $currentUser['User']['confirm_password'] = $this->request->data['User']['password'];\n                        }\n                    }\n                }\n                if ($this->User->save($currentUser, true, $fieldList)) {\n                    if ($this->_isRest()) {\n                        $user = $this->User->find('first', array(\n                            'conditions' => array('User.id' => $id),\n                            'recursive' => -1,\n                            'contain' => array(\n                                'Organisation',\n                                'Role',\n                                'UserSetting'\n                            )\n                        ));\n                        return $this->RestResponse->viewData($this->__massageUserObject($user), $this->response->type());\n                    } else {\n                        $this->Flash->success(__('The profile has been updated'));\n                        $this->_refreshAuth();\n                        $this->redirect(array('action' => 'view', $id));\n                    }\n                } else {\n                    $message = __('The profile could not be updated. Please, try again.');\n                    $abortPost = true;\n                }\n            }\n            if ($abortPost) {\n                return $this->RestResponse->saveFailResponse('Users', 'edit', $id, $message, $this->response->type());\n            } else {\n                $this->Flash->error($message);\n            }\n        } else {\n            $this->User->set('password', '');\n            $this->request->data = $this->User->data;\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $roles = $this->User->Role->find('list');\n        $this->set(compact('roles'));\n        $this->set('id', $id);\n    }\n\n    public function change_pw()\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        $id = $this->Auth->user('id');\n        $user = $this->User->find('first', array(\n            'conditions' => array('User.id' => $id),\n            'recursive' => -1\n        ));\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data = array('User' => $this->request->data);\n            }\n            $abortPost = false;\n            if (Configure::read('Security.require_password_confirmation')) {\n                if (!empty($this->request->data['User']['current_password'])) {\n                    $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                    if (!$hashed) {\n                        $message = __('Invalid password. Please enter your current password to continue.');\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                        }\n                        $abortPost = true;\n                        $this->Flash->error($message);\n                    }\n                    unset($this->request->data['User']['current_password']);\n                } else if (!$this->_isRest()) {\n                    $message = __('Please enter your current password to continue.');\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                    }\n                    $abortPost = true;\n                    $this->Flash->info($message);\n                }\n            }\n            if (!$abortPost) {\n                // What fields should be saved (allowed to be saved)\n                $user['User']['change_pw'] = 0;\n                $user['User']['password'] = $this->request->data['User']['password'];\n                if ($this->_isRest()) {\n                    $user['User']['confirm_password'] = $this->request->data['User']['password'];\n                } else {\n                    $user['User']['confirm_password'] = $this->request->data['User']['confirm_password'];\n                }\n                $temp = $user['User']['password'];\n                // Save the data\n                if ($this->User->save($user)) {\n                    $message = __('Password Changed.');\n                    $this->User->extralog($this->Auth->user(), \"change_pw\", null, null, $user);\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveSuccessResponse('User', 'change_pw', false, $this->response->type(), $message);\n                    }\n                    $this->Flash->success($message);\n                    $this->_refreshAuth();\n                    $this->redirect(array('action' => 'view', $id));\n                } else {\n                    $message = __('The password could not be updated. Make sure you meet the minimum password length / complexity requirements.');\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                    }\n                    $this->Flash->error($message);\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'change_pw', false, $this->response->type());\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $this->User->recursive = 0;\n        $this->User->read(null, $id);\n        $this->User->set('password', '');\n        $this->request->data = $this->User->data;\n        $roles = $this->User->Role->find('list');\n        $this->set(compact('roles'));\n    }\n\n    public function admin_index()\n    {\n        if (!$this->_isAdmin()) {\n            throw new NotFoundException(__('Invalid user or not authorised.'));\n        }\n        $this->User->virtualFields['org_ci'] = 'UPPER(Organisation.name)';\n        $urlParams = \"\";\n        $passedArgsArray = array();\n        $booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n        $textFields = array('role', 'email', 'all', 'authkey');\n        // org admins can't see users of other orgs\n        if ($this->_isSiteAdmin()) {\n            $textFields[] = 'org';\n        }\n        $this->set('passedArgs', json_encode($this->passedArgs));\n        // check each of the passed arguments whether they're a filter (could also be a sort for example) and if yes, add it to the pagination conditions\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                if ($v != \"\") {\n                    if ($urlParams != \"\") {\n                        $urlParams .= \"/\";\n                    }\n                    $urlParams .= $k . \":\" . $v;\n                }\n                $searchTerm = substr($k, 6);\n                if (in_array($searchTerm, $booleanFields)) {\n                    if ($v != \"\") {\n                        $this->paginate['conditions'][] = array('User.' . $searchTerm => $v);\n                    }\n                } elseif (in_array($searchTerm, $textFields)) {\n                    if ($v != \"\") {\n                        if ($searchTerm == \"role\") {\n                            $searchTerm = \"role_id\";\n                        }\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                if ($searchTerm == 'email') {\n                                    $this->paginate['conditions']['AND'][] = array('LOWER(User.' . $searchTerm . ') NOT LIKE' => '%' . strtolower(substr($piece, 1)) . '%');\n                                } elseif ($searchTerm == 'org') {\n                                    $this->paginate['conditions']['AND'][] = array('User.org_id !=' => substr($piece, 1));\n                                } else {\n                                    $this->paginate['conditions']['AND'][] = array('User.' . $searchTerm => substr($piece, 1));\n                                }\n                            } else {\n                                if ($searchTerm == 'email') {\n                                    $test['OR'][] = array('LOWER(User.' . $searchTerm . ') LIKE' => '%' . strtolower($piece) . '%');\n                                } elseif ($searchTerm == 'org') {\n                                    $this->paginate['conditions']['OR'][] = array('User.org_id' => $piece);\n                                } elseif ($searchTerm == 'all') {\n                                    $this->paginate['conditions']['AND'][] = array(\n                                            'OR' => array(\n                                                    'UPPER(User.email) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(Organisation.name) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(Role.name) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(User.authkey) LIKE' => '%' . strtoupper($piece) . '%'\n                                            ),\n                                    );\n                                } else {\n                                    $test['OR'][] = array('User.' . $searchTerm => $piece);\n                                }\n                            }\n                        }\n                        if (!empty($test)) {\n                            $this->paginate['conditions']['AND'][] = $test;\n                        }\n                    }\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        if ($this->_isRest()) {\n            $conditions = array();\n            if (isset($this->paginate['conditions'])) {\n                $conditions = $this->paginate['conditions'];\n            }\n            if (!$this->_isSiteAdmin()) {\n                $conditions['User.org_id'] = $this->Auth->user('org_id');\n            }\n            $users = $this->User->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => -1,\n                    'fields' => array(\n                        'id',\n            'org_id',\n            'server_id',\n            'email',\n            'autoalert',\n            'authkey',\n            'invited_by',\n            'gpgkey',\n            'certif_public',\n            'nids_sid',\n            'termsaccepted',\n            'newsread',\n            'role_id',\n            'change_pw',\n            'contactalert',\n            'disabled',\n            'expiration',\n            'current_login',\n            'last_login',\n            'force_logout',\n            'date_created',\n            'date_modified'\n                    ),\n                    'contain' => array(\n                            'Organisation' => array('id', 'name'),\n                            'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n                    )\n            ));\n            foreach ($users as $key => $value) {\n                if (empty($this->Auth->user('Role')['perm_site_admin'])) {\n                    if ($value['Role']['perm_site_admin']) {\n                        $users[$key]['User']['authkey'] = __('Redacted');\n                    }\n                }\n                unset($users[$key]['User']['password']);\n            }\n            return $this->RestResponse->viewData($users, $this->response->type());\n        } else {\n            $this->set('urlparams', $urlParams);\n            $this->set('passedArgsArray', $passedArgsArray);\n            $conditions = array();\n            if ($this->_isSiteAdmin()) {\n                $this->set('users', $this->paginate());\n            } else {\n                $conditions['User.org_id'] = $this->Auth->user('org_id');\n                $this->paginate['conditions']['AND'][] = $conditions;\n                $users = $this->paginate();\n                foreach ($users as $key => $value) {\n                    if ($value['Role']['perm_site_admin']) {\n                        $users[$key]['User']['authkey'] = __('Redacted');\n                    }\n                }\n                $this->set('users', $users);\n            }\n            if ($this->request->is('ajax')) {\n                $this->autoRender = false;\n                $this->layout = false;\n                $this->render('ajax/admin_index');\n            }\n        }\n    }\n\n    public function admin_filterUserIndex()\n    {\n        if (!$this->_isAdmin() && !$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $passedArgsArray = array();\n        $booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n        $textFields = array('role', 'email', 'authkey');\n        $showOrg = 0;\n        // org admins can't see users of other orgs\n        if ($this->_isSiteAdmin()) {\n            $textFields[] = 'org';\n            $showOrg = 1;\n        }\n        $this->set('differentFilters', $booleanFields);\n        $this->set('simpleFilters', $textFields);\n        $rules = array_merge($booleanFields, $textFields);\n        $this->set('showorg', $showOrg);\n\n        $filtering = array();\n        foreach ($booleanFields as $b) {\n            $filtering[$b] = '';\n        }\n        foreach ($textFields as $t) {\n            $filtering[$t] = array('OR' => array(), 'NOT' => array());\n        }\n\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                $searchTerm = substr($k, 6);\n                if (in_array($searchTerm, $booleanFields)) {\n                    $filtering[$searchTerm] = $v;\n                } elseif (in_array($searchTerm, $textFields)) {\n                    $pieces = explode('|', $v);\n                    foreach ($pieces as $piece) {\n                        if ($piece[0] == '!') {\n                            $filtering[$searchTerm]['NOT'][] = substr($piece, 1);\n                        } else {\n                            $filtering[$searchTerm]['OR'][] = $piece;\n                        }\n                    }\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        $this->set('filtering', json_encode($filtering));\n\n        $roles = $this->User->Role->find('all', array('recursive' => -1));\n        $roleNames = array();\n        $roleJSON = array();\n        foreach ($roles as $k => $v) {\n            $roleNames[$v['Role']['id']] = $v['Role']['name'];\n            $roleJSON[] = array('id' => $v['Role']['id'], 'value' => $v['Role']['name']);\n        }\n        $temp = $this->User->Organisation->find('all', array(\n            'conditions' => array('local' => 1),\n            'recursive' => -1,\n            'fields' => array('id', 'name'),\n            'order' => array('LOWER(name) ASC')\n        ));\n        $orgs = array();\n        foreach ($temp as $org) {\n            $orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n        }\n        $this->set('orgs', $orgs);\n        $this->set('roles', $roleNames);\n        $this->set('roleJSON', json_encode($roleJSON));\n        $rules = $this->_arrayToValuesIndexArray($rules);\n        $this->set('rules', $rules);\n        $this->set('baseurl', Configure::read('MISP.baseurl'));\n        $this->layout = 'ajax';\n    }\n\n    public function admin_view($id = null)\n    {\n        $user = $this->User->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('User.id' => $id),\n            'contain' => array(\n                'UserSetting',\n                'Role',\n                'Organisation'\n            )\n        ));\n        if (empty($user)) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        if (!empty($user['User']['gpgkey'])) {\n            $pgpDetails = $this->User->verifySingleGPG($user);\n            $user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n            $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n        }\n        $user['User']['orgAdmins'] = $this->User->getOrgAdminsForOrg($user['User']['org_id'], $user['User']['id']);\n        if (empty($this->Auth->user('Role')['perm_site_admin']) && !(empty($user['Role']['perm_site_admin']))) {\n            $user['User']['authkey'] = __('Redacted');\n        }\n        $this->set('user', $user);\n        if (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $user['User']['org_id'])) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->_isRest()) {\n            $user['User']['password'] = '*****';\n            $temp = array();\n            foreach ($user['UserSetting'] as $k => $v) {\n                $temp[$v['setting']] = $v['value'];\n            }\n            $user['UserSetting'] = $temp;\n            return $this->RestResponse->viewData(array(\n                'User' => $user['User'],\n                'Role' => $user['Role'],\n                'UserSetting' => $user['UserSetting']\n            ), $this->response->type());\n            return $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n        } else {\n            $user2 = $this->User->find('first', array('conditions' => array('User.id' => $user['User']['invited_by']), 'recursive' => -1));\n            $this->set('id', $id);\n            $this->set('user2', $user2);\n        }\n    }\n\n    public function admin_add()\n    {\n        if (!$this->_isAdmin()) {\n            throw new Exception('Administrators only.');\n        }\n        $params = null;\n        if (!$this->_isSiteAdmin()) {\n            $params = array('conditions' => array('perm_site_admin !=' => 1, 'perm_sync !=' => 1, 'perm_regexp_access !=' => 1));\n        }\n        $this->loadModel('AdminSetting');\n        $default_role_id = $this->AdminSetting->getSetting('default_role');\n        $roles = $this->User->Role->find('list', $params);\n        $syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n        if ($this->request->is('post')) {\n            // In case we don't get the data encapsulated in a User object\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['User'])) {\n                    $this->request->data = array('User' => $this->request->data);\n                }\n                if (isset($this->request->data['User']['id'])) {\n                    unset($this->request->data['User']['id']);\n                }\n                $required_fields = array('role_id', 'email');\n                foreach ($required_fields as $field) {\n                    $set_field_via_other_means = false;\n                    if (empty($this->request->data['User'][$field])) {\n                        if ($field === 'role_id') {\n                            if (!empty($default_role_id)) {\n                                $this->request->data['User'][$field] = $default_role_id;\n                                $set_field_via_other_means = true;\n                            }\n                        }\n                        if (!$set_field_via_other_means) {\n                            return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array($field => 'Mandatory field not set.'), $this->response->type());\n                        }\n                    }\n                }\n                if (isset($this->request->data['User']['password'])) {\n                    $this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n                }\n                $defaults = array(\n                        'external_auth_required' => 0,\n                        'external_auth_key' => '',\n                        'server_id' => 0,\n                        'gpgkey' => '',\n                        'certif_public' => '',\n                        'autoalert' => 0,\n                        'contactalert' => 0,\n                        'disabled' => 0,\n                        'newsread' => 0,\n                        'change_pw' => 1,\n                        'authkey' => $this->User->generateAuthKey(),\n                        'termsaccepted' => 0,\n                        'org_id' => $this->Auth->user('org_id')\n                );\n                foreach ($defaults as $key => $value) {\n                    if (!isset($this->request->data['User'][$key])) {\n                        $this->request->data['User'][$key] = $value;\n                    }\n                }\n            }\n            $this->request->data['User']['date_created'] = time();\n            $this->request->data['User']['date_modified'] = time();\n            if (!array_key_exists($this->request->data['User']['role_id'], $syncRoles)) {\n                $this->request->data['User']['server_id'] = 0;\n            }\n            $this->User->create();\n            // set invited by\n            $this->loadModel('Role');\n            $this->Role->recursive = -1;\n            $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n            if (empty($chosenRole)) {\n                throw new MethodNotAllowedException('Invalid role');\n            }\n            $this->request->data['User']['invited_by'] = $this->Auth->user('id');\n            if (!$this->_isRest()) {\n                if ($chosenRole['Role']['perm_sync']) {\n                    $this->request->data['User']['change_pw'] = 0;\n                    $this->request->data['User']['termsaccepted'] = 1;\n                } else {\n                    $this->request->data['User']['change_pw'] = 1;\n                    $this->request->data['User']['termsaccepted'] = 0;\n                }\n            }\n            if (!isset($this->request->data['User']['disabled'])) {\n                $this->request->data['User']['disabled'] = false;\n            }\n            $this->request->data['User']['newsread'] = 0;\n            if (!$this->_isSiteAdmin()) {\n                $this->request->data['User']['org_id'] = $this->Auth->user('org_id');\n                $this->loadModel('Role');\n                $this->Role->recursive = -1;\n                $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n                if (\n                    $chosenRole['Role']['perm_site_admin'] == 1 ||\n                    $chosenRole['Role']['perm_regexp_access'] == 1 ||\n                    $chosenRole['Role']['perm_sync'] == 1 ||\n                    $chosenRole['Role']['restricted_to_site_admin'] == 1\n                ) {\n                    throw new Exception('You are not authorised to assign that role to a user.');\n                }\n            }\n            $organisation = $this->User->Organisation->find('first', array(\n                'conditions' => array('Organisation.id' => $this->request->data['User']['org_id']),\n                'recursive' => -1\n            ));\n            $fail = false;\n            if (!$this->_isSiteAdmin()) {\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $fail = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $fail = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$fail) {\n                if (empty($organisation)) {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array('Invalid organisation'), $this->response->type());\n                    } else {\n                        // reset auth key for a new user\n                        $this->set('authkey', $this->newkey);\n                        $this->Flash->error(__('The user could not be saved. Invalid organisation.'));\n                    }\n                } else {\n                    $fieldList = array('password', 'email', 'external_auth_required', 'external_auth_key', 'enable_password', 'confirm_password', 'org_id', 'role_id', 'authkey', 'nids_sid', 'server_id', 'gpgkey', 'certif_public', 'autoalert', 'contactalert', 'disabled', 'invited_by', 'change_pw', 'termsaccepted', 'newsread', 'date_created', 'date_modified');\n                    if ($this->User->save($this->request->data, true, $fieldList)) {\n                        $notification_message = '';\n                        if (!empty($this->request->data['User']['notify'])) {\n                            $user = $this->User->find('first', array('conditions' => array('User.id' => $this->User->id), 'recursive' => -1));\n                            $password = isset($this->request->data['User']['password']) ? $this->request->data['User']['password'] : false;\n                            $result = $this->User->initiatePasswordReset($user, true, true, $password);\n                            if ($result) {\n                                $notification_message .= ' User notified of new credentials.';\n                            }\n                        }\n                        if ($this->_isRest()) {\n                            $user = $this->User->find('first', array(\n                                    'conditions' => array('User.id' => $this->User->id),\n                                    'recursive' => -1\n                            ));\n                            $user['User']['password'] = '******';\n                            return $this->RestResponse->viewData($user, $this->response->type());\n                        } else {\n                            $this->Flash->success(__('The user has been saved.' . $notification_message));\n                            $this->redirect(array('action' => 'index'));\n                        }\n                    } else {\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, $this->User->validationErrors, $this->response->type());\n                        } else {\n                            // reset auth key for a new user\n                            $this->set('authkey', $this->newkey);\n                            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n                        }\n                    }\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->newkey = $this->User->generateAuthKey();\n            $this->set('authkey', $this->newkey);\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'admin_add', false, $this->response->type());\n        } else {\n            $orgs = $this->User->Organisation->find('list', array(\n                    'conditions' => array('local' => 1),\n                    'order' => array('lower(name) asc')\n            ));\n            $this->set('orgs', $orgs);\n            // generate auth key for a new user\n            $this->loadModel('Server');\n            $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n            $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n            }\n            $temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n            $servers = array(0 => 'Not bound to a server');\n            if (!empty($temp)) {\n                foreach ($temp as $t) {\n                    if (!empty($t['Server']['name'])) {\n                        $servers[$t['Server']['id']] = $t['Server']['name'];\n                    } else {\n                        $servers[$t['Server']['id']] = $t['Server']['url'];\n                    }\n                }\n            }\n            $this->set('currentOrg', $this->Auth->user('org_id'));\n            $this->set('isSiteAdmin', $this->_isSiteAdmin());\n            $this->set('default_role_id', $default_role_id);\n            $this->set('servers', $servers);\n            $this->set(compact('roles'));\n            $this->set(compact('syncRoles'));\n        }\n    }\n\n    public function admin_edit($id = null)\n    {\n        $this->set('currentOrg', $this->Auth->user('org_id'));\n        $this->User->id = $id;\n        if (!$this->User->exists()) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $params = array();\n        $allowedRole = '';\n        $userToEdit = $this->User->find('first', array(\n                'conditions' => array('User.id' => $id),\n                'recursive' => -1,\n                'fields' => array('User.id', 'User.role_id', 'User.email', 'User.org_id', 'Role.perm_site_admin'),\n                'contain' => array('Role')\n        ));\n        if (!$this->_isSiteAdmin()) {\n            // Org admins should be able to select the role that is already assigned to an org user when editing them.\n            // What happened previously:\n            // Org admin edits another org admin of the same org\n            // Org admin is not allowed to set privileged access roles (site_admin/sync/regex)\n            // MISP automatically chooses the first available option for the user as the selected setting (usually user)\n            // Org admin is downgraded to a user\n            // Now we make an exception for the already assigned role, both in the form and the actual edit.\n            if ($userToEdit['User']['org_id'] != $this->Auth->user('org_id') || !empty($userToEdit['Role']['perm_site_admin'])) {\n                throw new NotFoundException(__('Invalid user'));\n            }\n            $allowedRole = $userToEdit['User']['role_id'];\n            $params = array('conditions' => array(\n                    'OR' => array(\n                            'AND' => array(\n                                'perm_site_admin' => 0, 'perm_sync' => 0, 'perm_regexp_access' => 0, 'restricted_to_site_admin' => 0\n                            ),\n                            'id' => $allowedRole,\n                    )\n            ));\n        }\n        $roles = $this->User->Role->find('list', $params);\n        $syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n        $this->set('currentId', $id);\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data['User'] = $this->request->data;\n            }\n            $abortPost = false;\n            if (!$this->_isRest()) {\n                if (Configure::read('Security.require_password_confirmation')) {\n                    if (!empty($this->request->data['User']['current_password'])) {\n                        $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                        if (!$hashed) {\n                            $abortPost = true;\n                            $this->Flash->error('Invalid password. Please enter your current password to continue.');\n                        }\n                        unset($this->request->data['User']['current_password']);\n                    } else {\n                        $abortPost = true;\n                        $this->Flash->info('Please enter your current password to continue.');\n                    }\n                }\n            }\n            $fail = false;\n            if (!$this->_isSiteAdmin() && !$abortPost) {\n                $organisation = $this->User->Organisation->find('first', array(\n                    'conditions' => array('Organisation.id' => $userToEdit['User']['org_id']),\n                    'recursive' => -1\n                ));\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $abortPost = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $abortPost = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$abortPost) {\n                $this->request->data['User']['id'] = $id;\n                if (!isset($this->request->data['User']['email'])) {\n                    $this->request->data['User']['email'] = $userToEdit['User']['email'];\n                }\n                if (isset($this->request->data['User']['role_id']) && !array_key_exists($this->request->data['User']['role_id'], $syncRoles)) {\n                    $this->request->data['User']['server_id'] = 0;\n                }\n                $fields = array();\n                $blockedFields = array('id', 'invited_by');\n                if (!$this->_isSiteAdmin()) {\n                    $blockedFields[] = 'org_id';\n                }\n                foreach (array_keys($this->request->data['User']) as $field) {\n                    if (in_array($field, $blockedFields)) {\n                        continue;\n                    }\n                    if ($field != 'password') {\n                        array_push($fields, $field);\n                    }\n                }\n                $fieldsOldValues = array();\n                foreach ($fields as $field) {\n                    if ($field == 'enable_password') {\n                        continue;\n                    }\n                    if ($field != 'confirm_password') {\n                        $fieldsOldValues[$field] = $this->User->field($field);\n                    } else {\n                        $fieldsOldValues[$field] = $this->User->field('password');\n                    }\n                }\n                if (\n                    isset($this->request->data['User']['enable_password']) && $this->request->data['User']['enable_password'] != '0' &&\n                    isset($this->request->data['User']['password']) && \"\" != $this->request->data['User']['password']\n                ) {\n                    $fields[] = 'password';\n                    if ($this->_isRest() && !isset($this->request->data['User']['confirm_password'])) {\n                        $this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n                        $fields[] = 'confirm_password';\n                    }\n                }\n                if (!$this->_isRest()) {\n                    $fields[] = 'role_id';\n                }\n                if (!$this->_isSiteAdmin()) {\n                    $this->loadModel('Role');\n                    $this->Role->recursive = -1;\n                    $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n                    if (empty($chosenRole) || (($chosenRole['Role']['id'] != $allowedRole) && ($chosenRole['Role']['perm_site_admin'] == 1 || $chosenRole['Role']['perm_regexp_access'] == 1 || $chosenRole['Role']['perm_sync'] == 1))) {\n                        throw new Exception('You are not authorised to assign that role to a user.');\n                    }\n                }\n                if ($this->User->save($this->request->data, true, $fields)) {\n                    // newValues to array\n                    $fieldsNewValues = array();\n                    foreach ($fields as $field) {\n                        if ($field != 'confirm_password') {\n                            $newValue = $this->data['User'][$field];\n                            if (gettype($newValue) == 'array') {\n                                $newValueStr = '';\n                                $cP = 0;\n                                foreach ($newValue as $newValuePart) {\n                                    if ($cP < 2) {\n                                        $newValueStr .= '-' . $newValuePart;\n                                    } else {\n                                        $newValueStr = $newValuePart . $newValueStr;\n                                    }\n                                    $cP++;\n                                }\n                                $fieldsNewValues[$field] = $newValueStr;\n                            } else {\n                                $fieldsNewValues[$field] = $newValue;\n                            }\n                        } else {\n                            $fieldsNewValues[$field] = $this->data['User']['password'];\n                        }\n                    }\n                    // compare\n                    $fieldsResult = array();\n                    foreach ($fields as $field) {\n                        if (isset($fieldsOldValues[$field]) && $fieldsOldValues[$field] != $fieldsNewValues[$field]) {\n                            if ($field != 'confirm_password' && $field != 'enable_password') {\n                                $fieldsResult[$field] = array($fieldsOldValues[$field], $fieldsNewValues[$field]);\n                            }\n                        }\n                    }\n                    $user = $this->User->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('User.id' => $this->User->id)\n                    ));\n                    $this->User->extralog($this->Auth->user(), \"edit\", \"user\", $fieldsResult, $user);\n                    if ($this->_isRest()) {\n                        $user['User']['password'] = '******';\n                        return $this->RestResponse->viewData($user, $this->response->type());\n                    } else {\n                        $this->Flash->success(__('The user has been saved'));\n                        $this->_refreshAuth(); // in case we modify ourselves\n                        $this->redirect(array('action' => 'index'));\n                    }\n                } else {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'admin_edit', $id, $this->User->validationErrors, $this->response->type());\n                    } else {\n                        $this->Flash->error(__('The user could not be saved. Please, try again.'));\n                    }\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Users', 'admin_edit', $id, $this->response->type());\n            }\n            $this->User->read(null, $id);\n            if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $this->User->data['User']['org_id']) {\n                $this->redirect(array('controller' => 'users', 'action' => 'index', 'admin' => true));\n            }\n            $this->User->set('password', '');\n            $this->request->data = $this->User->data;\n        }\n        if ($this->_isSiteAdmin()) {\n            $orgs = $this->User->Organisation->find('list', array(\n                    'conditions' => array('local' => 1),\n                    'order' => array('lower(name) asc')\n            ));\n        } else {\n            $orgs = array();\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n        }\n        $temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n        $servers = array(0 => 'Not bound to a server');\n        foreach ($temp as $t) {\n            if (!empty($t['Server']['name'])) {\n                $servers[$t['Server']['id']] = $t['Server']['name'];\n            } else {\n                $servers[$t['Server']['id']] = $t['Server']['url'];\n            }\n        }\n        $this->set('servers', $servers);\n        $this->set('orgs', $orgs);\n        $this->set('id', $id);\n        $this->set(compact('roles'));\n        $this->set(compact('syncRoles'));\n    }\n\n    public function admin_delete($id = null)\n    {\n        if (!$this->request->is('post') && !$this->request->is('delete')) {\n            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));\n        }\n        if (!$this->_isAdmin()) {\n            throw new Exception('Administrators only.');\n        }\n        $this->User->id = $id;\n        $conditions = array('User.id' => $id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['org_id'] = $this->Auth->user('org_id');\n        }\n        $user = $this->User->find('first', array(\n                'conditions' => $conditions,\n                'recursive' => -1\n        ));\n        if (empty($user)) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $fieldsDescrStr = 'User (' . $id . '): ' . $user['User']['email'];\n        if ($this->User->delete($id)) {\n            $this->User->extralog($this->Auth->user(), \"delete\", $fieldsDescrStr, '');\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('User', 'admin_delete', $id, $this->response->type(), 'User deleted.');\n            } else {\n                $this->Flash->success(__('User deleted'));\n                $this->redirect(array('action' => 'index'));\n            }\n        }\n        $this->Flash->error(__('User was not deleted'));\n        $this->redirect(array('action' => 'index'));\n    }\n\n    public function updateLoginTime()\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This feature is only accessible via POST requests');\n        }\n        $user = $this->User->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('User.id' => $this->Auth->user('id'))\n        ));\n        $this->User->id = $this->Auth->user('id');\n        $this->User->saveField('last_login', time());\n        $this->User->saveField('current_login', time());\n        $user = $this->User->getAuthUser($user['User']['id']);\n        $this->Auth->login($user);\n        $this->redirect(array('Controller' => 'User', 'action' => 'dashboard'));\n    }\n\n    public function login()\n    {\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $this->Bruteforce = ClassRegistry::init('Bruteforce');\n            if (!empty($this->request->data['User']['email'])) {\n                if ($this->Bruteforce->isBlacklisted($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email'])) {\n                    throw new ForbiddenException('You have reached the maximum number of login attempts. Please wait ' . Configure::read('SecureAuth.expire') . ' seconds and try again.');\n                }\n            }\n            // Check the length of the user's authkey\n            $userPass = $this->User->find('first', array(\n                'conditions' => array('User.email' => $this->request->data['User']['email']),\n                'fields' => array('User.password'),\n                'recursive' => -1\n            ));\n            if (!empty($userPass) && strlen($userPass['User']['password']) == 40) {\n                $this->AdminSetting = ClassRegistry::init('AdminSetting');\n                $db_version = $this->AdminSetting->find('all', array('conditions' => array('setting' => 'db_version')));\n                $versionRequirementMet = $this->User->checkVersionRequirements($db_version[0]['AdminSetting']['value'], '2.4.77');\n                if ($versionRequirementMet) {\n                    $passwordToSave = $this->request->data['User']['password'];\n                }\n                unset($this->Auth->authenticate['Form']['passwordHasher']);\n                $this->Auth->constructAuthenticate();\n            }\n        }\n        if ($this->Auth->login()) {\n            $this->User->extralog($this->Auth->user(), \"login\");\n            $this->User->Behaviors->disable('SysLogLogable.SysLogLogable');\n            $this->User->id = $this->Auth->user('id');\n            $user = $this->User->find('first', array(\n                'conditions' => array(\n                    'User.id' => $this->Auth->user('id')\n                ),\n                'recursive' => -1\n            ));\n            unset($user['User']['password']);\n            $user['User']['action'] = 'login';\n            $user['User']['last_login'] = $this->Auth->user('current_login');\n            $user['User']['current_login'] = time();\n            $this->User->save($user['User'], true, array('id', 'last_login', 'current_login'));\n            if (empty($this->Auth->authenticate['Form']['passwordHasher']) && !empty($passwordToSave)) {\n                $this->User->saveField('password', $passwordToSave);\n            }\n            $this->User->Behaviors->enable('SysLogLogable.SysLogLogable');\n            // no state changes are ever done via GET requests, so it is safe to return to the original page:\n            $this->redirect($this->Auth->redirectUrl());\n        // $this->redirect(array('controller' => 'events', 'action' => 'index'));\n        } else {\n            $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n            $dataSource = $dataSourceConfig['datasource'];\n            // don't display authError before first login attempt\n            if (str_replace(\"//\", \"/\", $this->webroot . $this->Session->read('Auth.redirect')) == $this->webroot && $this->Session->read('Message.auth.message') == $this->Auth->authError) {\n                $this->Session->delete('Message.auth');\n            }\n            // don't display \"invalid user\" before first login attempt\n            if ($this->request->is('post')) {\n                $this->Flash->error(__('Invalid username or password, try again'));\n                if (isset($this->request->data['User']['email'])) {\n                    $this->Bruteforce->insert($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email']);\n                }\n            }\n            // populate the DB with the first role (site admin) if it's empty\n            $this->loadModel('Role');\n            if ($this->Role->find('count') == 0) {\n                $siteAdmin = array('Role' => array(\n                    'id' => 1,\n                    'name' => 'Site Admin',\n                    'permission' => 3,\n                    'perm_add' => 1,\n                    'perm_modify' => 1,\n                    'perm_modify_org' => 1,\n                    'perm_publish' => 1,\n                    'perm_sync' => 1,\n                    'perm_admin' => 1,\n                    'perm_audit' => 1,\n                    'perm_auth' => 1,\n                    'perm_site_admin' => 1,\n                    'perm_regexp_access' => 1,\n                    'perm_sharing_group' => 1,\n                    'perm_template' => 1,\n                    'perm_tagger' => 1,\n                ));\n                $this->Role->save($siteAdmin);\n                // PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n                if ($dataSource == 'Database/Postgres') {\n                    $sql = \"SELECT setval('roles_id_seq', (SELECT MAX(id) FROM roles));\";\n                    $this->Role->query($sql);\n                }\n            }\n            if ($this->User->Organisation->find('count', array('conditions' => array('Organisation.local' => true))) == 0) {\n                $this->User->runUpdates();\n                $date = date('Y-m-d H:i:s');\n                $org = array('Organisation' => array(\n                        'id' => 1,\n                        'name' => !empty(Configure::read('MISP.org')) ? Configure::read('MISP.org') : 'ADMIN',\n                        'description' => 'Automatically generated admin organisation',\n                        'type' => 'ADMIN',\n                        'uuid' => CakeText::uuid(),\n                        'local' => 1,\n                        'date_created' => $date,\n                        'sector' => '',\n                        'nationality' => ''\n                ));\n                $this->User->Organisation->save($org);\n                // PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n                if ($dataSource == 'Database/Postgres') {\n                    $sql = \"SELECT setval('organisations_id_seq', (SELECT MAX(id) FROM organisations));\";\n                    $this->User->Organisation->query($sql);\n                }\n                $org_id = $this->User->Organisation->id;\n            } else {\n                $hostOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.name' => Configure::read('MISP.org'), 'Organisation.local' => true), 'recursive' => -1));\n                if (!empty($hostOrg)) {\n                    $org_id = $hostOrg['Organisation']['id'];\n                } else {\n                    $firstOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.local' => true), 'order' => 'Organisation.id ASC'));\n                    $org_id = $firstOrg['Organisation']['id'];\n                }\n            }\n\n            // populate the DB with the first user if it's empty\n            if ($this->User->find('count') == 0) {\n                $this->User->runUpdates();\n                $this->User->createInitialUser($org_id);\n            }\n        }\n    }\n\n    public function routeafterlogin()\n    {\n        // Events list\n        $url = $this->Session->consume('pre_login_requested_url');\n        if (empty($url)) {\n            $url = array('controller' => 'events', 'action' => 'index');\n        }\n        $this->redirect($url);\n    }\n\n    public function logout()\n    {\n        if ($this->Session->check('Auth.User')) {\n            $this->User->extralog($this->Auth->user(), \"logout\");\n        }\n        $this->Flash->info(__('Good-Bye'));\n        $user = $this->User->find('first', array(\n            'conditions' => array(\n                'User.id' => $this->Auth->user('id')\n            ),\n            'recursive' => -1\n        ));\n        unset($user['User']['password']);\n        $user['User']['action'] = 'logout';\n        $this->User->save($user['User'], true, array('id'));\n        $this->redirect($this->Auth->logout());\n    }\n\n    public function resetauthkey($id = null, $alert = false)\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        if ($id == 'me') {\n            $id = $this->Auth->user('id');\n        }\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException(__('Invalid action.'));\n        }\n        $newkey = $this->User->resetauthkey($this->Auth->user(), $id, $alert);\n        if ($newkey === false) {\n            throw new MethodNotAllowedException(__('Invalid user.'));\n        }\n        if (!$this->_isRest()) {\n            $this->Flash->success(__('New authkey generated.', true));\n            $this->_refreshAuth();\n            $this->redirect($this->referer());\n        } else {\n            return $this->RestResponse->saveSuccessResponse('User', 'resetauthkey', $id, $this->response->type(), 'Authkey updated: ' . $newkey);\n        }\n    }\n\n    public function resetAllSyncAuthKeys()\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This functionality is only accessible via POST requests.'));\n        }\n        $results = $this->User->resetAllSyncAuthKeysRouter($this->Auth->user());\n        if ($results === true) {\n            $message = __('Job initiated.');\n        } else {\n            $message = __('%s authkeys reset, %s could not be reset.', $results['success'], $results['fails']);\n        }\n        if (!$this->_isRest()) {\n            $this->Flash->info($message);\n            $this->redirect($this->referer());\n        } else {\n            return $this->RestResponse->saveSuccessResponse('User', 'resetAllSyncAuthKeys', false, $this->response->type(), $message);\n        }\n    }\n\n    public function histogram($selected = null)\n    {\n        //if (!$this->request->is('ajax') && !$this->_isRest()) throw new MethodNotAllowedException('This function can only be accessed via AJAX or the API.');\n        if ($selected == '[]') {\n            $selected = null;\n        }\n        $selectedTypes = array();\n        if ($selected) {\n            $selectedTypes = json_decode($selected);\n        }\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            $org_ids = array($this->Auth->user('org_id'));\n        } else {\n            $org_ids = $this->User->Event->find('list', array(\n                'fields' => array('Event.orgc_id', 'Event.orgc_id'),\n                'group' => array('Event.orgc_id')\n            ));\n        }\n        $orgs_temp = $this->User->Organisation->find('list', array(\n            'fields' => array('Organisation.id', 'Organisation.name'),\n            'conditions' => array('Organisation.id' => $org_ids)\n        ));\n        $orgs = array(0 => 'All organisations');\n        foreach ($org_ids as $v) {\n            if (!empty($orgs_temp[$v])) {\n                $orgs[$v] = $orgs_temp[$v];\n            }\n        }\n        $data = array();\n        $max = 1;\n        foreach ($orgs as $org_id => $org_name) {\n            $conditions = array('Attribute.deleted' => 0);\n            if ($selected) {\n                $conditions['Attribute.type'] = $selectedTypes;\n            }\n            if ($org_id != 0) {\n                $conditions['Event.orgc_id'] = $org_id;\n            }\n            $params = array(\n                'recursive' => -1,\n                'fields' => array('Attribute.type', 'COUNT(*) as num_types'),\n                'group' => array('Attribute.type'),\n                'joins' => array(\n                    array(\n                        'table' => 'events',\n                        'alias' => 'Event',\n                        'type' => 'LEFT',\n                        'conditions' => array(\n                            'Attribute.event_id = Event.id'\n                        )\n                    )\n                ),\n                //'order' => array('num_types DESC'),\n                'conditions' => $conditions,\n                'order' => false\n            );\n            if ($org_id == 0) {\n                unset($params['joins']);\n            }\n            $temp = $this->User->Event->Attribute->find('all', $params);\n            $temp = Hash::combine($temp, '{n}.Attribute.type', '{n}.0.num_types');\n            $total = 0;\n            foreach ($temp as $k => $v) {\n                if (intval($v) > $max) {\n                    $max = intval($v);\n                }\n                $total += intval($v);\n            }\n            $data[$org_id]['data'] = $temp;\n            $data[$org_id]['org_name'] = $org_name;\n            $data[$org_id]['total'] = $total;\n        }\n        uasort($data, function ($a, $b) {\n            return $b['total'] - $a['total'];\n        });\n        $data = array_values($data);\n        $this->set('data', $data);\n        $this->set('max', $max);\n        $this->set('selectedTypes', $selectedTypes);\n\n        // Nice graphical histogram\n        $sigTypes = array_keys($this->User->Event->Attribute->typeDefinitions);\n        App::uses('ColourPaletteTool', 'Tools');\n        $paletteTool = new ColourPaletteTool();\n        $colours = $paletteTool->createColourPalette(count($sigTypes));\n        $typeDb = array();\n        foreach ($sigTypes as $k => $type) {\n            $typeDb[$type] = $colours[$k];\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('typeDb', $typeDb);\n            $this->set('sigTypes', $sigTypes);\n            $this->layout = 'ajax';\n        }\n    }\n\n    public function terms()\n    {\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $this->User->id = $this->Auth->user('id');\n            $this->User->saveField('termsaccepted', true);\n            $this->_refreshAuth(); // refresh auth info\n            $this->Flash->success(__('You accepted the Terms and Conditions.'));\n            $this->redirect(array('action' => 'routeafterlogin'));\n        }\n        $this->set('termsaccepted', $this->Auth->user('termsaccepted'));\n    }\n\n    public function downloadTerms()\n    {\n        if (!Configure::read('MISP.terms_file')) {\n            $termsFile = APP .\"View/Users/terms\";\n        } else {\n            $termsFile = APP . 'files' . DS . 'terms' . DS .  Configure::read('MISP.terms_file');\n        }\n        $this->response->file($termsFile, array('download' => true, 'name' => Configure::read('MISP.terms_file')));\n        return $this->response;\n    }\n\n    public function checkAndCorrectPgps()\n    {\n        if (!self::_isAdmin()) {\n            throw new NotFoundException();\n        }\n        $this->set('fails', $this->User->checkAndCorrectPgps());\n    }\n\n    public function admin_quickEmail($user_id)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $conditions = array('User.id' => $user_id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['User.org_id'] = $this->Auth->user('org_id');\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        $error = false;\n        if (empty($user)) {\n            $error = 'Invalid user.';\n        }\n        if (!$error && $user['User']['disabled']) {\n            $error = 'Cannot send an e-mail to this user as the account is disabled.';\n        }\n        $encryption = false;\n        if (!$error && !empty($user['User']['gpgkey'])) {\n            $encryption = 'PGP';\n        } elseif (!$error && !empty($user['User']['certif_public'])) {\n            $encryption = 'SMIME';\n        }\n        $this->set('encryption', $encryption);\n        if (!$error && !$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n            $error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n        }\n        if ($error) {\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $error, $this->response->type());\n            } else {\n                $this->Flash->error('Cannot send an e-mail to this user as the account is disabled.');\n                $this->redirect('/admin/users/view/' . $user_id);\n            }\n        }\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data['User'] = $this->request->data;\n            }\n            if (empty($this->request->data['User']['subject']) || empty($this->request->data['User']['body'])) {\n                $message = 'Both the subject and the body have to be set.';\n                if ($this->_isRest()) {\n                    throw new MethodNotAllowedException($message);\n                } else {\n                    $this->Flash->error($message);\n                    $this->redirect('/admin/users/quickEmail/' . $user_id);\n                }\n            }\n            $result = $this->User->sendEmail($user, $this->request->data['User']['body'], false, $this->request->data['User']['subject']);\n            if ($this->_isRest()) {\n                if ($result) {\n                    return $this->RestResponse->saveSuccessResponse('User', 'admin_quickEmail', $id, $this->response->type(), 'User deleted.');\n                } else {\n                    return $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $this->User->validationErrors, $this->response->type());\n                }\n            } else {\n                if ($result) {\n                    $this->Flash->success('Email sent.');\n                } else {\n                    $this->Flash->error('Could not send e-mail.');\n                }\n                $this->redirect('/admin/users/view/' . $user_id);\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'admin_quickEmail', false, $this->response->type());\n        }\n        $this->set('encryption', $encryption);\n        $this->set('user', $user);\n    }\n\n    public function admin_email($isPreview=false)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $isPostOrPut = $this->request->is('post') || $this->request->is('put');\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $conditions = array('org_id' => $this->Auth->user('org_id'));\n        }\n\n        // harvest parameters\n        if ($isPostOrPut) {\n            $recipient = $this->request->data['User']['recipient'];\n        } else {\n            $recipient = isset($this->request->query['recipient']) ? $this->request->query['recipient'] : null;\n        }\n        if ($isPostOrPut) {\n            $recipientEmailList = $this->request->data['User']['recipientEmailList'];\n        } else {\n            $recipientEmailList = isset($this->request->query['recipientEmailList']) ? $this->request->query['recipientEmailList'] : null;\n        }\n        if ($isPostOrPut) {\n            $orgNameList = $this->request->data['User']['orgNameList'];\n        } else {\n            $orgNameList = isset($this->request->query['orgNameList']) ? $this->request->query['orgNameList'] : null;\n        }\n\n        if (!is_null($recipient) && $recipient == 0) {\n            if (is_null($recipientEmailList)) {\n                throw new NotFoundException(__('Recipient email not provided'));\n            }\n            $conditions['id'] = $recipientEmailList;\n        } elseif (!is_null($recipient) && $recipient == 2) {\n            if (is_null($orgNameList)) {\n                throw new NotFoundException(__('Recipient organisation not provided'));\n            }\n            $conditions['org_id'] = $orgNameList;\n        }\n        $conditions['AND'][] = array('User.disabled' => 0);\n\n        // Allow to mimic real form post\n        if ($isPreview) {\n            $users = $this->User->find('list', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions, 'fields' => array('email')));\n            $this->set('emails', $users);\n            $this->set('emailsCount', count($users));\n            $this->render('ajax/emailConfirmTemplate');\n        } else {\n            $users = $this->User->find('all', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions));\n            // User has filled in his contact form, send out the email.\n            if ($isPostOrPut) {\n                $this->request->data['User']['message'] = $this->User->adminMessageResolve($this->request->data['User']['message']);\n                $failures = '';\n                foreach ($users as $user) {\n                    $password = $this->User->generateRandomPassword();\n                    $body = str_replace('$password', $password, $this->request->data['User']['message']);\n                    $body = str_replace('$username', $user['User']['email'], $body);\n                    $result = $this->User->sendEmail($user, $body, false, $this->request->data['User']['subject']);\n                    // if sending successful and action was a password change, update the user's password.\n                    if ($result && $this->request->data['User']['action'] != '0') {\n                        $this->User->id = $user['User']['id'];\n                        $this->User->saveField('password', $password);\n                        $this->User->saveField('change_pw', '1');\n                    }\n                    if (!$result) {\n                        if ($failures != '') {\n                            $failures .= ', ';\n                        }\n                        $failures .= $user['User']['email'];\n                    }\n                }\n                if ($failures != '') {\n                    $this->Flash->success(__('E-mails sent, but failed to deliver the messages to the following recipients: ' . $failures));\n                } else {\n                    $this->Flash->success(__('E-mails sent.'));\n                }\n            }\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions = array('org_id' => $this->Auth->user('org_id'));\n            }\n            $conditions['User.disabled'] = 0;\n            $temp = $this->User->find('all', array('recursive' => -1, 'fields' => array('id', 'email', 'Organisation.name'), 'order' => array('email ASC'), 'conditions' => $conditions, 'contain' => array('Organisation')));\n            $emails = array();\n            $orgName = array();\n            // save all the emails of the users and set it for the dropdown list in the form\n            foreach ($temp as $user) {\n                $emails[$user['User']['id']] = $user['User']['email'];\n                $orgName[$user['Organisation']['id']] = $user['Organisation']['name'];\n            }\n\n            $this->set('users', $temp);\n            $this->set('recipientEmail', $emails);\n            $this->set('orgName', $orgName);\n            $this->set('org', Configure::read('MISP.org'));\n            $textsToFetch = array('newUserText', 'passwordResetText');\n            $this->loadModel('Server');\n            foreach ($textsToFetch as $text) {\n                ${$text} = Configure::read('MISP.' . $text);\n                if (!${$text}) {\n                    ${$text} = $this->Server->serverSettings['MISP'][$text]['value'];\n                }\n                $this->set($text, ${$text});\n            }\n        }\n    }\n\n    public function initiatePasswordReset($id, $firstTime = false)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => array('id' => $id),\n            'recursive' => -1\n        ));\n        if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $user['User']['org_id']) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['User']['firstTime'])) {\n                $firstTime = $this->request->data['User']['firstTime'];\n            }\n            return new CakeResponse($this->User->initiatePasswordReset($user, $firstTime));\n        } else {\n            $error = false;\n            $encryption = false;\n            if (!empty($user['User']['gpgkey'])) {\n                $encryption = 'PGP';\n            } elseif (!$error && !empty($user['User']['certif_public'])) {\n                $encryption = 'SMIME';\n            }\n            $this->set('encryption', $encryption);\n            if (!$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n                $error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n            }\n            $this->set('error', $error);\n            $this->layout = 'ajax';\n            $this->set('user', $user);\n            $this->set('firstTime', $firstTime);\n            $this->render('ajax/passwordResetConfirmationForm');\n        }\n    }\n\n    // shows some statistics about the instance\n    public function statistics($page = 'data')\n    {\n        $this->set('page', $page);\n        $pages = array('data' => __('Usage data'),\n                       'orgs' => __('Organisations'),\n                       'users' => __('User and Organisation statistics'),\n                       'tags' => __('Tags'),\n                       'attributehistogram' => __('Attribute histogram'),\n                       'sightings' => __('Sightings toplists'),\n                       'galaxyMatrix' => __('Galaxy Matrix'));\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            unset($pages['orgs']);\n        }\n        $this->set('pages', $pages);\n        $result = array();\n        if ($page == 'data') {\n            $result = $this->__statisticsData($this->params['named']);\n        } elseif ($page == 'orgs') {\n            if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n                throw new MethodNotAllowedException('This feature is currently disabled.');\n            }\n            $result = $this->__statisticsOrgs($this->params['named']);\n        } elseif ($page == 'users') {\n            $result = $this->__statisticsUsers($this->params['named']);\n        } elseif ($page == 'tags') {\n            $result = $this->__statisticsTags($this->params['named']);\n        } elseif ($page == 'attributehistogram') {\n            if ($this->_isRest()) {\n                return $this->histogram($selected = null);\n            } else {\n                $this->render('statistics_histogram');\n            }\n        } elseif ($page == 'sightings') {\n            $result = $this->__statisticsSightings($this->params['named']);\n        } elseif ($page == 'galaxyMatrix') {\n            $result = $this->__statisticsGalaxyMatrix($this->params['named']);\n        }\n        if ($this->_isRest()) {\n            return $result;\n        }\n    }\n\n    private function __statisticsData($params = array())\n    {\n        // set all of the data up for the heatmaps\n        $params = array(\n            'fields' => array('name'),\n            'recursive' => -1,\n            'conditions' => array()\n        );\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            $params['conditions'] = array('Organisation.id' => $this->Auth->user('org_id'));\n        }\n        $orgs = $this->User->Organisation->find('all', $params);\n        $local_orgs_params = $params;\n        $local_orgs_params['conditions']['Organisation.local'] = 1;\n        $local_orgs = $this->User->Organisation->find('all', $local_orgs_params);\n        $this->loadModel('Log');\n        $year = date('Y');\n        $month = date('n');\n        $month = $month - 5;\n        if ($month < 1) {\n            $year--;\n            $month = 12 + $month;\n        }\n        // Some additional statistics\n        $this_month = strtotime('first day of this month');\n        $stats['event_count'] = $this->User->Event->find('count', array('recursive' => -1));\n        $stats['event_count_month'] = $this->User->Event->find('count', array('conditions' => array('Event.timestamp >' => $this_month), 'recursive' => -1));\n\n        $stats['attribute_count'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.deleted' => 0), 'recursive' => -1));\n        $stats['attribute_count_month'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.timestamp >' => $this_month, 'Attribute.deleted' => 0), 'recursive' => -1));\n        $stats['attributes_per_event'] = round($stats['attribute_count'] / $stats['event_count']);\n\n        $this->loadModel('Correlation');\n        $this->Correlation->recursive = -1;\n        $stats['correlation_count'] = $this->Correlation->find('count', array('recursive' => -1));\n        $stats['correlation_count'] = $stats['correlation_count'] / 2;\n\n        $stats['proposal_count'] = $this->User->Event->ShadowAttribute->find('count', array('recursive' => -1));\n\n        $stats['user_count'] = $this->User->find('count', array('recursive' => -1));\n        $stats['user_count_pgp'] = $this->User->find('count', array('recursive' => -1, 'conditions' => array('User.gpgkey !=' => '')));\n        $stats['org_count'] = count($orgs);\n        $stats['local_org_count'] = count($local_orgs);\n        $stats['average_user_per_org'] = round($stats['user_count'] / $stats['local_org_count'], 1);\n\n        $this->loadModel('Thread');\n        $stats['thread_count'] = $this->Thread->find('count', array('conditions' => array('Thread.post_count >' => 0), 'recursive' => -1));\n        $stats['thread_count_month'] = $this->Thread->find('count', array('conditions' => array('Thread.date_created >' => date(\"Y-m-d H:i:s\", $this_month), 'Thread.post_count >' => 0), 'recursive' => -1));\n\n        $stats['post_count'] = $this->Thread->Post->find('count', array('recursive' => -1));\n        $stats['post_count_month'] = $this->Thread->Post->find('count', array('conditions' => array('Post.date_created >' => date(\"Y-m-d H:i:s\", $this_month)), 'recursive' => -1));\n\n\n        if ($this->_isRest()) {\n            $data = array(\n                'stats' => $stats\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('stats', $stats);\n            $this->set('orgs', $orgs);\n            $this->set('start', strtotime(date('Y-m-d H:i:s') . ' -5 months'));\n            $this->set('end', strtotime(date('Y-m-d H:i:s')));\n            $this->set('startDateCal', $year . ', ' . $month . ', 01');\n            $range = '[5, 10, 50, 100]';\n            $this->set('range', $range);\n            $this->render('statistics_data');\n        }\n    }\n\n    private function __statisticsSightings($params = array())\n    {\n        $this->loadModel('Sighting');\n        $conditions = array('Sighting.org_id' => $this->Auth->user('org_id'));\n        if (isset($params['timestamp'])) {\n            $conditions['Sighting.date_sighting >'] = $params['timestamp'];\n        }\n        $sightings = $this->Sighting->find('all', array(\n            'conditions' => $conditions,\n            'fields' => array('Sighting.date_sighting', 'Sighting.type', 'Sighting.source', 'Sighting.event_id')\n        ));\n        $data = array();\n        $toplist = array();\n        $eventids = array();\n        foreach ($sightings as $k => $v) {\n            if ($v['Sighting']['source'] == '') {\n                $v['Sighting']['source'] = 'Undefined';\n            }\n            $v['Sighting']['type'] = array('sighting', 'false-positive', 'expiration')[$v['Sighting']['type']];\n            if (isset($data[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $data[$v['Sighting']['source']][$v['Sighting']['type']]++;\n            } else {\n                $data[$v['Sighting']['source']][$v['Sighting']['type']] = 1;\n            }\n            if (!isset($toplist[$v['Sighting']['source']])) {\n                $toplist[$v['Sighting']['source']] = 1;\n            } else {\n                $toplist[$v['Sighting']['source']]++;\n            }\n            if (!isset($eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $eventids[$v['Sighting']['source']][$v['Sighting']['type']] = array();\n            }\n            if (!in_array($v['Sighting']['event_id'], $eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $eventids[$v['Sighting']['source']][$v['Sighting']['type']][] = $v['Sighting']['event_id'];\n            }\n        }\n        arsort($toplist);\n        if ($this->_isRest()) {\n            $data = array(\n                'toplist' => $toplist,\n                'eventids' => $eventids\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('eventids', $eventids);\n            $this->set('toplist', $toplist);\n            $this->set('data', $data);\n            $this->render('statistics_sightings');\n        }\n    }\n\n    private function __statisticsOrgs($params = array())\n    {\n        $this->loadModel('Organisation');\n        $conditions = array();\n        if (!isset($params['scope']) || $params['scope'] == 'local') {\n            $params['scope'] = 'local';\n            $conditions['Organisation.local'] = 1;\n        } elseif ($params['scope'] == 'external') {\n            $conditions['Organisation.local'] = 0;\n        }\n        $orgs = array();\n        $orgs = $this->Organisation->find('all', array(\n                'recursive' => -1,\n                'conditions' => $conditions,\n                'fields' => array('id', 'name', 'description', 'local', 'contacts', 'type', 'sector', 'nationality'),\n        ));\n        $orgs = Set::combine($orgs, '{n}.Organisation.id', '{n}.Organisation');\n        $users = $this->User->find('all', array(\n            'group' => 'User.org_id',\n            'conditions' => array('User.org_id' => array_keys($orgs)),\n            'recursive' => -1,\n            'fields' => array('org_id', 'count(*)')\n        ));\n        foreach ($users as $user) {\n            $orgs[$user['User']['org_id']]['userCount'] = $user[0]['count(*)'];\n        }\n        unset($users);\n        $events = $this->User->Event->find('all', array(\n            'group' => 'Event.orgc_id',\n            'conditions' => array('Event.orgc_id' => array_keys($orgs)),\n            'recursive' => -1,\n            'fields' => array('Event.orgc_id', 'count(*)', 'sum(Event.attribute_count) as attributeCount')\n        ));\n        foreach ($events as $event) {\n            $orgs[$event['Event']['orgc_id']]['eventCount'] = $event[0]['count(*)'];\n            $orgs[$event['Event']['orgc_id']]['attributeCount'] = $event[0]['attributeCount'];\n            $orgs[$event['Event']['orgc_id']]['orgActivity'] = $this->User->getOrgActivity($event['Event']['orgc_id'], array('event_timestamp' => '365d'));\n        }\n        unset($events);\n        $orgs = Set::combine($orgs, '{n}.name', '{n}');\n        // f*** php\n        uksort($orgs, 'strcasecmp');\n        foreach ($orgs as $k => $value) {\n            if (file_exists(APP . 'webroot' . DS . 'img' . DS . 'orgs' . DS . $k . '.png')) {\n                $orgs[$k]['logo'] = true;\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($orgs, $this->response->type());\n        } else {\n            $this->set('scope', $params['scope']);\n            $this->set('orgs', $orgs);\n            $this->render('statistics_orgs');\n        }\n    }\n\n    private function __statisticsUsers($params = array())\n    {\n        $this->loadModel('Organisation');\n        $this->loadModel('User');\n        $this_month = strtotime(date('Y/m') . '/01');\n        $this_year = strtotime(date('Y') . '/01/01');\n        $ranges = array(\n            'total' => null,\n            'month' => $this_month,\n            'year' => $this_year\n        );\n        $scopes = array(\n            'user' => array(\n                'conditions' => array(),\n                'model' => 'User',\n                'date_created' => 'timestamp'\n            ),\n            'org_local' => array(\n                'conditions' => array('Organisation.local' => 1),\n                'model' => 'Organisation',\n                'date_created' => 'datetime'\n            ),\n            'org_external' => array(\n                'conditions' => array('Organisation.local' => 0),\n                'model' => 'Organisation',\n                'date_created' => 'datetime'\n            )\n        );\n        $statistics = array();\n        foreach ($scopes as $scope => $scope_data) {\n            foreach ($ranges as $range => $condition) {\n                $params = array(\n                    'recursive' => -1\n                );\n                $filter = array();\n                if (!empty($condition)) {\n                    if ($scope_data['date_created'] === 'datetime') {\n                        $condition = date('Y-m-d H:i:s', $condition);\n                    }\n                    $filter = array($scope_data['model'] . '.date_created >=' => $condition);\n                }\n                $params['conditions'] = array_merge($scopes[$scope]['conditions'], $filter);\n                $statistics[$scope]['data'][$range] = $this->{$scope_data['model']}->find('count', $params);\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($statistics, $this->response->type());\n        } else {\n            $this->set('statistics', $statistics);\n            $this->render('statistics_users');\n        }\n    }\n\n    public function tagStatisticsGraph()\n    {\n        $this->loadModel('EventTag');\n        $tags = $this->EventTag->getSortedTagList();\n        $this->loadModel('Taxonomy');\n        $taxonomies = $this->Taxonomy->find('list', array(\n                'conditions' => array('enabled' => true),\n                'fields' => array('Taxonomy.namespace')\n        ));\n        $flatData = array();\n        $tagIds = $this->EventTag->Tag->find('list', array('fields' => array('Tag.name', 'Tag.id')));\n        $this->set('tagIds', $tagIds);\n        foreach ($tags as $key => $value) {\n            $name = explode(':', $value['name']);\n            $tags[$key]['taxonomy'] = 'custom';\n            if (count($name) > 1) {\n                if (in_array($name[0], $taxonomies)) {\n                    $tags[$key]['taxonomy'] = $name[0];\n                }\n            }\n            $flatData[$tags[$key]['taxonomy']][$value['name']] = array('name' => $value['name'], 'size' => $value['eventCount']);\n        }\n        $treemap = array(\n                'name' => 'tags',\n                'children' => array()\n        );\n\n        foreach ($flatData as $key => $value) {\n            $newElement = array(\n                'name' => $key,\n                'children' => array()\n            );\n            foreach ($value as $tag) {\n                $newElement['children'][] = array('name' => $tag['name'], 'size' => $tag['size']);\n            }\n            $treemap['children'][] = $newElement;\n        }\n        $taxonomyColourCodes = array();\n        $taxonomies = array_merge(array('custom'), $taxonomies);\n        if ($this->_isRest()) {\n            $data = array(\n                'flatData' => $flatData,\n                'treemap' => $treemap\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('taxonomyColourCodes', $taxonomyColourCodes);\n            $this->set('taxonomies', $taxonomies);\n            $this->set('flatData', $flatData);\n            $this->set('treemap', $treemap);\n            $this->set('tags', $tags);\n            $this->layout = 'treemap';\n            $this->render('ajax/tag_statistics_graph');\n        }\n    }\n\n    private function __statisticsTags($params = array())\n    {\n        $trending_tags = array();\n        $all_tags = array();\n        if ($this->_isRest()) {\n            return $this->tagStatisticsGraph();\n        } else {\n            $this->render('statistics_tags');\n        }\n    }\n\n    private function __statisticsGalaxyMatrix($params = array())\n    {\n        $this->loadModel('Event');\n        $this->loadModel('Galaxy');\n        $mitre_galaxy_id = $this->Galaxy->getMitreAttackGalaxyId();\n        if (isset($params['galaxy_id'])) {\n            $galaxy_id = $params['galaxy_id'];\n        } else {\n            $galaxy_id = $mitre_galaxy_id;\n        }\n        $organisations = $this->User->Organisation->find('all', array(\n                'recursive' => -1,\n        ));\n        array_unshift($organisations, array('Organisation' => array('id' => 0, 'name' => 'All')));\n        $this->set('organisations', $organisations);\n        $picked_organisation = 0;\n        if (isset($params['organisation']) && $params['organisation'] != 0) {\n            $org = $this->User->Organisation->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('id' => $params['organisation']),\n            ));\n            if (!empty($org)) {\n                $picked_organisation = $org;\n                $this->set('picked_organisation', $picked_organisation);\n            } else {\n                $this->set('picked_organisation', array('Organisation' => array('id' => '')));\n            }\n        } else {\n            $this->set('picked_organisation', array('Organisation' => array('id' => '')));\n        }\n\n        $rest_response_empty = true;\n        $ignore_score = false;\n        if (\n            isset($params['dateFrom'])\n            || isset($params['dateTo'])\n            || isset($params['organisation']) && $params['organisation'] != 0\n        ) { // use restSearch\n            $ignore_score = true;\n            $filters = array();\n            if (isset($params['dateFrom'])) {\n                $filters['from'] = $params['dateFrom'];\n                $this->set('dateFrom', $params['dateFrom']);\n            }\n            if (isset($params['dateTo'])) {\n                $filters['to'] = $params['dateTo'];\n                $this->set('dateTo', $params['dateTo']);\n            }\n            if (isset($params['organisation'])) {\n                $filters['org'] = $params['organisation'];\n            }\n            $elementCounter = 0;\n            $renderView = '';\n            $final = $this->Event->restSearch($this->Auth->user(), 'attack', $filters, false, false, $elementCounter, $renderView);\n\n            $final = json_decode($final, true);\n            if (!empty($final)) {\n                $rest_response_empty = false;\n                foreach ($final as $key => $data) {\n                    $this->set($key, $data);\n                }\n            }\n        }\n\n        // No need for restSearch or result is empty\n        if ($rest_response_empty) {\n            $matrixData = $this->Galaxy->getMatrix($galaxy_id);\n            $tabs = $matrixData['tabs'];\n            $matrixTags = $matrixData['matrixTags'];\n            $killChainOrders = $matrixData['killChain'];\n            $instanceUUID = $matrixData['instance-uuid'];\n            if ($ignore_score) {\n                $scores_uniform = array('scores' => array(), 'maxScore' => 0);\n            } else {\n                $scores_uniform = $this->Event->EventTag->getTagScoresUniform(0, $matrixTags);\n            }\n            $scores = $scores_uniform['scores'];\n            $maxScore = $scores_uniform['maxScore'];\n            // FIXME: temporary fix: add the score of deprecated mitre galaxies to the new one (for the stats)\n            if ($matrixData['galaxy']['id'] == $mitre_galaxy_id) {\n                $mergedScore = array();\n                foreach ($scores as $tag => $v) {\n                    $predicateValue = explode(':', $tag, 2)[1];\n                    $predicateValue = explode('=', $predicateValue, 2);\n                    $predicate = $predicateValue[0];\n                    $clusterValue = $predicateValue[1];\n                    $mappedTag = '';\n                    $mappingWithoutExternalId = array();\n                    if ($predicate == 'mitre-attack-pattern') {\n                        $mappedTag = $tag;\n                        $name = explode(\" \", $tag);\n                        $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                        $mappingWithoutExternalId[$name] = $tag;\n                    } else {\n                        $name = explode(\" \", $clusterValue);\n                        $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                        if (isset($mappingWithoutExternalId[$name])) {\n                            $mappedTag = $mappingWithoutExternalId[$name];\n                        } else {\n                            $adjustedTagName = $this->Galaxy->GalaxyCluster->find('list', array(\n                                'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name'),\n                                'conditions' => array('GalaxyCluster.tag_name LIKE' => 'misp-galaxy:mitre-attack-pattern=' . $name . '% T%'),\n                                'fields' => array('GalaxyCluster.tag_name')\n                            ));\n                            if (!empty($adjustedTagName)) {\n                                $adjustedTagName = array_values($adjustedTagName)[0];\n                                $mappingWithoutExternalId[$name] = $adjustedTagName;\n                                $mappedTag = $mappingWithoutExternalId[$name];\n                            }\n                        }\n                    }\n                    if (isset($mergedScore[$mappedTag])) {\n                        $mergedScore[$mappedTag] += $v;\n                    } else {\n                        $mergedScore[$mappedTag] = $v;\n                    }\n                }\n                $scores = $mergedScore;\n                $maxScore = !empty($mergedScore) ? max(array_values($mergedScore)) : 0;\n            }\n            // end FIXME\n\n            $this->Galaxy->sortMatrixByScore($tabs, $scores);\n            if ($this->_isRest()) {\n                $json = array('matrix' => $tabs, 'scores' => $scores, 'instance-uuid' => $instanceUUID);\n                return $this->RestResponse->viewData($json, $this->response->type());\n            } else {\n                App::uses('ColourGradientTool', 'Tools');\n                $gradientTool = new ColourGradientTool();\n                $colours = $gradientTool->createGradientFromValues($scores);\n\n                $this->set('target_type', 'attribute');\n                $this->set('columnOrders', $killChainOrders);\n                $this->set('tabs', $tabs);\n                $this->set('scores', $scores);\n                $this->set('maxScore', $maxScore);\n                if (!empty($colours)) {\n                    $this->set('colours', $colours['mapping']);\n                    $this->set('interpolation', $colours['interpolation']);\n                }\n                $this->set('pickingMode', false);\n                if ($matrixData['galaxy']['id'] == $mitre_galaxy_id) {\n                    $this->set('defaultTabName', \"mitre-attack\");\n                    $this->set('removeTrailling', 2);\n                }\n\n                $this->set('galaxyName', $matrixData['galaxy']['name']);\n                $this->set('galaxyId', $matrixData['galaxy']['id']);\n                $matrixGalaxies = $this->Galaxy->getAllowedMatrixGalaxies();\n                $this->set('matrixGalaxies', $matrixGalaxies);\n            }\n        }\n        $this->render('statistics_galaxymatrix');\n    }\n\n    public function verifyGPG($full = false)\n    {\n        if (!self::_isSiteAdmin()) {\n            throw new NotFoundException();\n        }\n        $user_results = $this->User->verifyGPG($full);\n        $this->set('users', $user_results);\n    }\n\n    public function verifyCertificate()\n    {\n        $user_results = $this->User->verifyCertificate();\n        $this->set('users', $user_results);\n    }\n\n    // Refreshes the Auth session with new/updated data\n    protected function _refreshAuth()\n    {\n        $oldUser = $this->Auth->user();\n        $newUser = $this->User->find('first', array('conditions' => array('User.id' => $oldUser['id']), 'recursive' => -1,'contain' => array('Organisation', 'Role')));\n        // Rearrange it a bit to match the Auth object created during the login\n        $newUser['User']['Role'] = $newUser['Role'];\n        $newUser['User']['Organisation'] = $newUser['Organisation'];\n        unset($newUser['Organisation'], $newUser['Role']);\n        $this->Auth->login($newUser['User']);\n    }\n\n    public function fetchPGPKey($email = false)\n    {\n        if ($email == false) {\n            throw new NotFoundException('No email provided.');\n        }\n        $keys = $this->User->fetchPGPKey($email);\n        if (is_numeric($keys)) {\n            throw new NotFoundException('Could not retrieved any keys from the key server.');\n        }\n        $this->set('keys', $keys);\n        $this->autorender = false;\n        $this->layout = false;\n        $this->render('ajax/fetchpgpkey');\n    }\n\n    public function dashboard()\n    {\n        $events = array();\n        // the last login in the session is not updated after the login - only in the db, so let's fetch it.\n        $lastLogin = $this->Auth->user('last_login');\n        $this->loadModel('Event');\n        $events['changed'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, $lastLogin));\n        $events['published'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, false, $lastLogin));\n        $notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user());\n        $this->set('notifications', $notifications);\n        $this->set('events', $events);\n    }\n\n    public function checkIfLoggedIn()\n    {\n        return new CakeResponse(array('body'=> 'OK','status' => 200));\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\nApp::uses('ConnectionManager', 'Model');\nApp::uses('Sanitize', 'Utility');\n\nclass Bruteforce extends AppModel\n{\n    public function insert($ip, $username)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $expire = time() + Configure::read('SecureAuth.expire');\n        $expire = date('Y-m-d H:i:s', $expire);\n        $bruteforceEntry = array(\n            'ip' => $ip,\n            'username' => $username,\n            'expire' => $expire\n        );\n        $this->save($bruteforceEntry);\n        $title = 'Failed login attempt using username ' . $username . ' from IP: ' . $_SERVER['REMOTE_ADDR'] . '.';\n        if ($this->isBlacklisted($ip, $username)) {\n            $title .= 'This has tripped the bruteforce protection after  ' . Configure::read('SecureAuth.amount') . ' failed attempts. The user is now blacklisted for ' . Configure::read('SecureAuth.expire') . ' seconds.';\n        }\n        $log = array(\n                'org' => 'SYSTEM',\n                'model' => 'User',\n                'model_id' => 0,\n                'email' => $username,\n                'action' => 'login_fail',\n                'title' => $title\n        );\n        $this->Log->save($log);\n    }\n\n    public function clean()\n    {\n        $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n        $dataSource = $dataSourceConfig['datasource'];\n        if ($dataSource == 'Database/Mysql') {\n            $sql = 'DELETE FROM bruteforces WHERE `expire` <= NOW();';\n        } elseif ($dataSource == 'Database/Postgres') {\n            $sql = 'DELETE FROM bruteforces WHERE expire <= NOW();';\n        }\n        $this->query($sql);\n    }\n\n    public function isBlacklisted($ip, $username)\n    {\n        // first remove old expired rows\n        $this->clean();\n        // count\n        $params = array(\n            'conditions' => array(\n            'Bruteforce.ip' => $ip,\n            'LOWER(Bruteforce.username)' => trim(strtolower($username)))\n        );\n        $count = $this->find('count', $params);\n        $amount = Configure::check('SecureAuth.amount') ? Configure::read('SecureAuth.amount') : 5;\n        if ($count >= $amount) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n\nclass UsersController extends AppController\n{\n    public $newkey;\n\n    public $components = array(\n            'Security',\n            'Email',\n            'RequestHandler'\n    );\n\n    public $paginate = array(\n            'limit' => 60,\n            'recursive' => -1,\n            'order' => array(\n                    'Organisation.name' => 'ASC'\n            ),\n            'contain' => array(\n                'Organisation' => array('id', 'name'),\n                'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n            )\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n\n        // what pages are allowed for non-logged-in users\n        $this->Auth->allow('login', 'logout');\n    }\n\n    public function view($id = null)\n    {\n        if (\"me\" == $id) {\n            $id = $this->Auth->user('id');\n        }\n        if (!$this->_isSiteAdmin() && $this->Auth->user('id') != $id) {\n            throw new NotFoundException(__('Invalid user or not authorised.'));\n        }\n        if (!is_numeric($id) && !empty($id)) {\n            $userId = $this->User->find('first', array(\n                    'conditions' => array('email' => $id),\n                    'fields' => array('id')\n            ));\n            $id = $userid['User']['id'];\n        }\n        $user = $this->User->read(null, $id);\n        $user = $this->User->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('User.id' => $id),\n            'contain' => array(\n                'UserSetting',\n                'Role',\n                'Organisation'\n            )\n        ));\n        if (empty($user)) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        if (!empty($user['User']['gpgkey'])) {\n            $pgpDetails = $this->User->verifySingleGPG($user);\n            $user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n            $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n        }\n        if ($this->_isRest()) {\n            unset($user['User']['server_id']);\n            $user['User']['password'] = '*****';\n            $temp = array();\n            foreach ($user['UserSetting'] as $k => $v) {\n                $temp[$v['setting']] = $v['value'];\n            }\n            $user['UserSetting'] = $temp;\n            return $this->RestResponse->viewData($this->__massageUserObject($user), $this->response->type());\n        } else {\n            $this->set('user', $user);\n        }\n    }\n\n    private function __massageUserObject($user)\n    {\n        unset($user['User']['server_id']);\n        $user['User']['password'] = '*****';\n        $objectsToInclude = array('User', 'Role', 'UserSetting', 'Organisation');\n        foreach ($objectsToInclude as $objectToInclude) {\n            if (isset($user[$objectToInclude])) {\n                $temp[$objectToInclude] = $user[$objectToInclude];\n            }\n        }\n        return $temp;\n    }\n\n    public function request_API()\n    {\n        if (Configure::read('MISP.disable_emailing')) {\n            return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'API access request failed. E-mailing is currently disabled on this instance.')), 'status'=>200, 'type' => 'json'));\n        }\n        $responsibleAdmin = $this->User->findAdminsResponsibleForUser($this->Auth->user());\n        if (isset($responsibleAdmin['email']) && !empty($responsibleAdmin['email'])) {\n            $subject = \"[MISP \" . Configure::read('MISP.org') . \"] User requesting API access\";\n            $body = \"A user (\" . $this->Auth->user('email') . \") has sent you a request to enable his/her API key access.\" . PHP_EOL;\n            $body .= \"You can edit the user's profile at \" . Configure::read('MISP.baseurl') . '/admin/users/edit/' . $this->Auth->user('id');\n            $user = $this->User->find('first', array('conditions' => array('User.id' => $responsibleAdmin['id'])));\n            $result = $this->User->sendEmail($user, $body, false, $subject);\n            if ($result) {\n                return new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'API access requested.')), 'status'=>200, 'type' => 'json'));\n            }\n        }\n        return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, please try again later.')), 'status'=>200, 'type' => 'json'));\n    }\n\n    public function edit()\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        $currentUser = $this->User->find('first', array(\n            'conditions' => array('User.id' => $this->Auth->user('id')),\n            'recursive' => -1\n        ));\n        if (empty($currentUser)) {\n            throw new NotFoundException('Something went wrong. Your user account could not be accessed.');\n        }\n        $id = $currentUser['User']['id'];\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (empty($this->request->data['User'])) {\n                $this->request->data = array('User' => $this->request->data);\n            }\n            $abortPost = false;\n            if (!empty($this->request->data['User']['email']) && !$this->_isSiteAdmin()) {\n                $organisation = $this->User->Organisation->find('first', array(\n                    'conditions' => array('Organisation.id' => $this->Auth->user('org_id')),\n                    'recursive' => -1\n                ));\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $abortPost = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $abortPost = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $message = __('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']);\n                    }\n                }\n            }\n            if (!$abortPost && !$this->_isRest()) {\n                if (Configure::read('Security.require_password_confirmation')) {\n                    if (!empty($this->request->data['User']['current_password'])) {\n                        $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                        if (!$hashed) {\n                            $abortPost = true;\n                            $this->Flash->error('Invalid password. Please enter your current password to continue.');\n                        }\n                        unset($this->request->data['User']['current_password']);\n                    } else {\n                        $abortPost = true;\n                        $this->Flash->info('Please enter your current password to continue.');\n                    }\n                }\n            }\n            if (!$abortPost) {\n                // What fields should be saved (allowed to be saved)\n                $fieldList = array('email', 'autoalert', 'gpgkey', 'certif_public', 'nids_sid', 'contactalert', 'disabled');\n                if (!empty($this->request->data['User']['password'])) {\n                    $fieldList[] = 'password';\n                    $fieldList[] = 'confirm_password';\n                }\n                foreach ($this->request->data['User'] as $k => $v) {\n                    $currentUser['User'][$k] = $v;\n                }\n                // Save the data\n                if ($this->_isRest()) {\n                    if (!empty($this->request->data['User']['password'])) {\n                        if ($this->request->data['User']['password'] === '*****') {\n                            unset($this->request->data['User']['password']);\n                        } else {\n                            $currentUser['User']['confirm_password'] = $this->request->data['User']['password'];\n                        }\n                    }\n                }\n                if ($this->User->save($currentUser, true, $fieldList)) {\n                    if ($this->_isRest()) {\n                        $user = $this->User->find('first', array(\n                            'conditions' => array('User.id' => $id),\n                            'recursive' => -1,\n                            'contain' => array(\n                                'Organisation',\n                                'Role',\n                                'UserSetting'\n                            )\n                        ));\n                        return $this->RestResponse->viewData($this->__massageUserObject($user), $this->response->type());\n                    } else {\n                        $this->Flash->success(__('The profile has been updated'));\n                        $this->_refreshAuth();\n                        $this->redirect(array('action' => 'view', $id));\n                    }\n                } else {\n                    $message = __('The profile could not be updated. Please, try again.');\n                    $abortPost = true;\n                }\n            }\n            if ($abortPost) {\n                return $this->RestResponse->saveFailResponse('Users', 'edit', $id, $message, $this->response->type());\n            } else {\n                $this->Flash->error($message);\n            }\n        } else {\n            $this->User->set('password', '');\n            $this->request->data = $this->User->data;\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $roles = $this->User->Role->find('list');\n        $this->set(compact('roles'));\n        $this->set('id', $id);\n    }\n\n    public function change_pw()\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        $id = $this->Auth->user('id');\n        $user = $this->User->find('first', array(\n            'conditions' => array('User.id' => $id),\n            'recursive' => -1\n        ));\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data = array('User' => $this->request->data);\n            }\n            $abortPost = false;\n            if (Configure::read('Security.require_password_confirmation')) {\n                if (!empty($this->request->data['User']['current_password'])) {\n                    $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                    if (!$hashed) {\n                        $message = __('Invalid password. Please enter your current password to continue.');\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                        }\n                        $abortPost = true;\n                        $this->Flash->error($message);\n                    }\n                    unset($this->request->data['User']['current_password']);\n                } else if (!$this->_isRest()) {\n                    $message = __('Please enter your current password to continue.');\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                    }\n                    $abortPost = true;\n                    $this->Flash->info($message);\n                }\n            }\n            if (!$abortPost) {\n                // What fields should be saved (allowed to be saved)\n                $user['User']['change_pw'] = 0;\n                $user['User']['password'] = $this->request->data['User']['password'];\n                if ($this->_isRest()) {\n                    $user['User']['confirm_password'] = $this->request->data['User']['password'];\n                } else {\n                    $user['User']['confirm_password'] = $this->request->data['User']['confirm_password'];\n                }\n                $temp = $user['User']['password'];\n                // Save the data\n                if ($this->User->save($user)) {\n                    $message = __('Password Changed.');\n                    $this->User->extralog($this->Auth->user(), \"change_pw\", null, null, $user);\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveSuccessResponse('User', 'change_pw', false, $this->response->type(), $message);\n                    }\n                    $this->Flash->success($message);\n                    $this->_refreshAuth();\n                    $this->redirect(array('action' => 'view', $id));\n                } else {\n                    $message = __('The password could not be updated. Make sure you meet the minimum password length / complexity requirements.');\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'change_pw', false, $message, $this->response->type());\n                    }\n                    $this->Flash->error($message);\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'change_pw', false, $this->response->type());\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $this->User->recursive = 0;\n        $this->User->read(null, $id);\n        $this->User->set('password', '');\n        $this->request->data = $this->User->data;\n        $roles = $this->User->Role->find('list');\n        $this->set(compact('roles'));\n    }\n\n    public function admin_index()\n    {\n        if (!$this->_isAdmin()) {\n            throw new NotFoundException(__('Invalid user or not authorised.'));\n        }\n        $this->User->virtualFields['org_ci'] = 'UPPER(Organisation.name)';\n        $urlParams = \"\";\n        $passedArgsArray = array();\n        $booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n        $textFields = array('role', 'email', 'all', 'authkey');\n        // org admins can't see users of other orgs\n        if ($this->_isSiteAdmin()) {\n            $textFields[] = 'org';\n        }\n        $this->set('passedArgs', json_encode($this->passedArgs));\n        // check each of the passed arguments whether they're a filter (could also be a sort for example) and if yes, add it to the pagination conditions\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                if ($v != \"\") {\n                    if ($urlParams != \"\") {\n                        $urlParams .= \"/\";\n                    }\n                    $urlParams .= $k . \":\" . $v;\n                }\n                $searchTerm = substr($k, 6);\n                if (in_array($searchTerm, $booleanFields)) {\n                    if ($v != \"\") {\n                        $this->paginate['conditions'][] = array('User.' . $searchTerm => $v);\n                    }\n                } elseif (in_array($searchTerm, $textFields)) {\n                    if ($v != \"\") {\n                        if ($searchTerm == \"role\") {\n                            $searchTerm = \"role_id\";\n                        }\n                        $pieces = explode('|', $v);\n                        $test = array();\n                        foreach ($pieces as $piece) {\n                            if ($piece[0] == '!') {\n                                if ($searchTerm == 'email') {\n                                    $this->paginate['conditions']['AND'][] = array('LOWER(User.' . $searchTerm . ') NOT LIKE' => '%' . strtolower(substr($piece, 1)) . '%');\n                                } elseif ($searchTerm == 'org') {\n                                    $this->paginate['conditions']['AND'][] = array('User.org_id !=' => substr($piece, 1));\n                                } else {\n                                    $this->paginate['conditions']['AND'][] = array('User.' . $searchTerm => substr($piece, 1));\n                                }\n                            } else {\n                                if ($searchTerm == 'email') {\n                                    $test['OR'][] = array('LOWER(User.' . $searchTerm . ') LIKE' => '%' . strtolower($piece) . '%');\n                                } elseif ($searchTerm == 'org') {\n                                    $this->paginate['conditions']['OR'][] = array('User.org_id' => $piece);\n                                } elseif ($searchTerm == 'all') {\n                                    $this->paginate['conditions']['AND'][] = array(\n                                            'OR' => array(\n                                                    'UPPER(User.email) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(Organisation.name) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(Role.name) LIKE' => '%' . strtoupper($piece) . '%',\n                                                    'UPPER(User.authkey) LIKE' => '%' . strtoupper($piece) . '%'\n                                            ),\n                                    );\n                                } else {\n                                    $test['OR'][] = array('User.' . $searchTerm => $piece);\n                                }\n                            }\n                        }\n                        if (!empty($test)) {\n                            $this->paginate['conditions']['AND'][] = $test;\n                        }\n                    }\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        if ($this->_isRest()) {\n            $conditions = array();\n            if (isset($this->paginate['conditions'])) {\n                $conditions = $this->paginate['conditions'];\n            }\n            if (!$this->_isSiteAdmin()) {\n                $conditions['User.org_id'] = $this->Auth->user('org_id');\n            }\n            $users = $this->User->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => -1,\n                    'fields' => array(\n                        'id',\n            'org_id',\n            'server_id',\n            'email',\n            'autoalert',\n            'authkey',\n            'invited_by',\n            'gpgkey',\n            'certif_public',\n            'nids_sid',\n            'termsaccepted',\n            'newsread',\n            'role_id',\n            'change_pw',\n            'contactalert',\n            'disabled',\n            'expiration',\n            'current_login',\n            'last_login',\n            'force_logout',\n            'date_created',\n            'date_modified'\n                    ),\n                    'contain' => array(\n                            'Organisation' => array('id', 'name'),\n                            'Role' => array('id', 'name', 'perm_auth', 'perm_site_admin')\n                    )\n            ));\n            foreach ($users as $key => $value) {\n                if (empty($this->Auth->user('Role')['perm_site_admin'])) {\n                    if ($value['Role']['perm_site_admin']) {\n                        $users[$key]['User']['authkey'] = __('Redacted');\n                    }\n                }\n                unset($users[$key]['User']['password']);\n            }\n            return $this->RestResponse->viewData($users, $this->response->type());\n        } else {\n            $this->set('urlparams', $urlParams);\n            $this->set('passedArgsArray', $passedArgsArray);\n            $conditions = array();\n            if ($this->_isSiteAdmin()) {\n                $this->set('users', $this->paginate());\n            } else {\n                $conditions['User.org_id'] = $this->Auth->user('org_id');\n                $this->paginate['conditions']['AND'][] = $conditions;\n                $users = $this->paginate();\n                foreach ($users as $key => $value) {\n                    if ($value['Role']['perm_site_admin']) {\n                        $users[$key]['User']['authkey'] = __('Redacted');\n                    }\n                }\n                $this->set('users', $users);\n            }\n            if ($this->request->is('ajax')) {\n                $this->autoRender = false;\n                $this->layout = false;\n                $this->render('ajax/admin_index');\n            }\n        }\n    }\n\n    public function admin_filterUserIndex()\n    {\n        if (!$this->_isAdmin() && !$this->_isSiteAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $passedArgsArray = array();\n        $booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n        $textFields = array('role', 'email', 'authkey');\n        $showOrg = 0;\n        // org admins can't see users of other orgs\n        if ($this->_isSiteAdmin()) {\n            $textFields[] = 'org';\n            $showOrg = 1;\n        }\n        $this->set('differentFilters', $booleanFields);\n        $this->set('simpleFilters', $textFields);\n        $rules = array_merge($booleanFields, $textFields);\n        $this->set('showorg', $showOrg);\n\n        $filtering = array();\n        foreach ($booleanFields as $b) {\n            $filtering[$b] = '';\n        }\n        foreach ($textFields as $t) {\n            $filtering[$t] = array('OR' => array(), 'NOT' => array());\n        }\n\n        foreach ($this->passedArgs as $k => $v) {\n            if (substr($k, 0, 6) === 'search') {\n                $searchTerm = substr($k, 6);\n                if (in_array($searchTerm, $booleanFields)) {\n                    $filtering[$searchTerm] = $v;\n                } elseif (in_array($searchTerm, $textFields)) {\n                    $pieces = explode('|', $v);\n                    foreach ($pieces as $piece) {\n                        if ($piece[0] == '!') {\n                            $filtering[$searchTerm]['NOT'][] = substr($piece, 1);\n                        } else {\n                            $filtering[$searchTerm]['OR'][] = $piece;\n                        }\n                    }\n                }\n                $passedArgsArray[$searchTerm] = $v;\n            }\n        }\n        $this->set('filtering', json_encode($filtering));\n\n        $roles = $this->User->Role->find('all', array('recursive' => -1));\n        $roleNames = array();\n        $roleJSON = array();\n        foreach ($roles as $k => $v) {\n            $roleNames[$v['Role']['id']] = $v['Role']['name'];\n            $roleJSON[] = array('id' => $v['Role']['id'], 'value' => $v['Role']['name']);\n        }\n        $temp = $this->User->Organisation->find('all', array(\n            'conditions' => array('local' => 1),\n            'recursive' => -1,\n            'fields' => array('id', 'name'),\n            'order' => array('LOWER(name) ASC')\n        ));\n        $orgs = array();\n        foreach ($temp as $org) {\n            $orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n        }\n        $this->set('orgs', $orgs);\n        $this->set('roles', $roleNames);\n        $this->set('roleJSON', json_encode($roleJSON));\n        $rules = $this->_arrayToValuesIndexArray($rules);\n        $this->set('rules', $rules);\n        $this->set('baseurl', Configure::read('MISP.baseurl'));\n        $this->layout = 'ajax';\n    }\n\n    public function admin_view($id = null)\n    {\n        $user = $this->User->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('User.id' => $id),\n            'contain' => array(\n                'UserSetting',\n                'Role',\n                'Organisation'\n            )\n        ));\n        if (empty($user)) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        if (!empty($user['User']['gpgkey'])) {\n            $pgpDetails = $this->User->verifySingleGPG($user);\n            $user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n            $user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n        }\n        $user['User']['orgAdmins'] = $this->User->getOrgAdminsForOrg($user['User']['org_id'], $user['User']['id']);\n        if (empty($this->Auth->user('Role')['perm_site_admin']) && !(empty($user['Role']['perm_site_admin']))) {\n            $user['User']['authkey'] = __('Redacted');\n        }\n        $this->set('user', $user);\n        if (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $user['User']['org_id'])) {\n            throw new MethodNotAllowedException();\n        }\n        if ($this->_isRest()) {\n            $user['User']['password'] = '*****';\n            $temp = array();\n            foreach ($user['UserSetting'] as $k => $v) {\n                $temp[$v['setting']] = $v['value'];\n            }\n            $user['UserSetting'] = $temp;\n            return $this->RestResponse->viewData(array(\n                'User' => $user['User'],\n                'Role' => $user['Role'],\n                'UserSetting' => $user['UserSetting']\n            ), $this->response->type());\n            return $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n        } else {\n            $user2 = $this->User->find('first', array('conditions' => array('User.id' => $user['User']['invited_by']), 'recursive' => -1));\n            $this->set('id', $id);\n            $this->set('user2', $user2);\n        }\n    }\n\n    public function admin_add()\n    {\n        if (!$this->_isAdmin()) {\n            throw new Exception('Administrators only.');\n        }\n        $params = null;\n        if (!$this->_isSiteAdmin()) {\n            $params = array('conditions' => array('perm_site_admin !=' => 1, 'perm_sync !=' => 1, 'perm_regexp_access !=' => 1));\n        }\n        $this->loadModel('AdminSetting');\n        $default_role_id = $this->AdminSetting->getSetting('default_role');\n        $roles = $this->User->Role->find('list', $params);\n        $syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n        if ($this->request->is('post')) {\n            // In case we don't get the data encapsulated in a User object\n            if ($this->_isRest()) {\n                if (!isset($this->request->data['User'])) {\n                    $this->request->data = array('User' => $this->request->data);\n                }\n                if (isset($this->request->data['User']['id'])) {\n                    unset($this->request->data['User']['id']);\n                }\n                $required_fields = array('role_id', 'email');\n                foreach ($required_fields as $field) {\n                    $set_field_via_other_means = false;\n                    if (empty($this->request->data['User'][$field])) {\n                        if ($field === 'role_id') {\n                            if (!empty($default_role_id)) {\n                                $this->request->data['User'][$field] = $default_role_id;\n                                $set_field_via_other_means = true;\n                            }\n                        }\n                        if (!$set_field_via_other_means) {\n                            return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array($field => 'Mandatory field not set.'), $this->response->type());\n                        }\n                    }\n                }\n                if (isset($this->request->data['User']['password'])) {\n                    $this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n                }\n                $defaults = array(\n                        'external_auth_required' => 0,\n                        'external_auth_key' => '',\n                        'server_id' => 0,\n                        'gpgkey' => '',\n                        'certif_public' => '',\n                        'autoalert' => 0,\n                        'contactalert' => 0,\n                        'disabled' => 0,\n                        'newsread' => 0,\n                        'change_pw' => 1,\n                        'authkey' => $this->User->generateAuthKey(),\n                        'termsaccepted' => 0,\n                        'org_id' => $this->Auth->user('org_id')\n                );\n                foreach ($defaults as $key => $value) {\n                    if (!isset($this->request->data['User'][$key])) {\n                        $this->request->data['User'][$key] = $value;\n                    }\n                }\n            }\n            $this->request->data['User']['date_created'] = time();\n            $this->request->data['User']['date_modified'] = time();\n            if (!array_key_exists($this->request->data['User']['role_id'], $syncRoles)) {\n                $this->request->data['User']['server_id'] = 0;\n            }\n            $this->User->create();\n            // set invited by\n            $this->loadModel('Role');\n            $this->Role->recursive = -1;\n            $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n            if (empty($chosenRole)) {\n                throw new MethodNotAllowedException('Invalid role');\n            }\n            $this->request->data['User']['invited_by'] = $this->Auth->user('id');\n            if (!$this->_isRest()) {\n                if ($chosenRole['Role']['perm_sync']) {\n                    $this->request->data['User']['change_pw'] = 0;\n                    $this->request->data['User']['termsaccepted'] = 1;\n                } else {\n                    $this->request->data['User']['change_pw'] = 1;\n                    $this->request->data['User']['termsaccepted'] = 0;\n                }\n            }\n            if (!isset($this->request->data['User']['disabled'])) {\n                $this->request->data['User']['disabled'] = false;\n            }\n            $this->request->data['User']['newsread'] = 0;\n            if (!$this->_isSiteAdmin()) {\n                $this->request->data['User']['org_id'] = $this->Auth->user('org_id');\n                $this->loadModel('Role');\n                $this->Role->recursive = -1;\n                $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n                if (\n                    $chosenRole['Role']['perm_site_admin'] == 1 ||\n                    $chosenRole['Role']['perm_regexp_access'] == 1 ||\n                    $chosenRole['Role']['perm_sync'] == 1 ||\n                    $chosenRole['Role']['restricted_to_site_admin'] == 1\n                ) {\n                    throw new Exception('You are not authorised to assign that role to a user.');\n                }\n            }\n            $organisation = $this->User->Organisation->find('first', array(\n                'conditions' => array('Organisation.id' => $this->request->data['User']['org_id']),\n                'recursive' => -1\n            ));\n            $fail = false;\n            if (!$this->_isSiteAdmin()) {\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $fail = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $fail = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$fail) {\n                if (empty($organisation)) {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array('Invalid organisation'), $this->response->type());\n                    } else {\n                        // reset auth key for a new user\n                        $this->set('authkey', $this->newkey);\n                        $this->Flash->error(__('The user could not be saved. Invalid organisation.'));\n                    }\n                } else {\n                    $fieldList = array('password', 'email', 'external_auth_required', 'external_auth_key', 'enable_password', 'confirm_password', 'org_id', 'role_id', 'authkey', 'nids_sid', 'server_id', 'gpgkey', 'certif_public', 'autoalert', 'contactalert', 'disabled', 'invited_by', 'change_pw', 'termsaccepted', 'newsread', 'date_created', 'date_modified');\n                    if ($this->User->save($this->request->data, true, $fieldList)) {\n                        $notification_message = '';\n                        if (!empty($this->request->data['User']['notify'])) {\n                            $user = $this->User->find('first', array('conditions' => array('User.id' => $this->User->id), 'recursive' => -1));\n                            $password = isset($this->request->data['User']['password']) ? $this->request->data['User']['password'] : false;\n                            $result = $this->User->initiatePasswordReset($user, true, true, $password);\n                            if ($result) {\n                                $notification_message .= ' User notified of new credentials.';\n                            }\n                        }\n                        if ($this->_isRest()) {\n                            $user = $this->User->find('first', array(\n                                    'conditions' => array('User.id' => $this->User->id),\n                                    'recursive' => -1\n                            ));\n                            $user['User']['password'] = '******';\n                            return $this->RestResponse->viewData($user, $this->response->type());\n                        } else {\n                            $this->Flash->success(__('The user has been saved.' . $notification_message));\n                            $this->redirect(array('action' => 'index'));\n                        }\n                    } else {\n                        if ($this->_isRest()) {\n                            return $this->RestResponse->saveFailResponse('Users', 'admin_add', false, $this->User->validationErrors, $this->response->type());\n                        } else {\n                            // reset auth key for a new user\n                            $this->set('authkey', $this->newkey);\n                            $this->Flash->error(__('The user could not be saved. Please, try again.'));\n                        }\n                    }\n                }\n            }\n        }\n        if (!$this->_isRest()) {\n            $this->newkey = $this->User->generateAuthKey();\n            $this->set('authkey', $this->newkey);\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'admin_add', false, $this->response->type());\n        } else {\n            $orgs = $this->User->Organisation->find('list', array(\n                    'conditions' => array('local' => 1),\n                    'order' => array('lower(name) asc')\n            ));\n            $this->set('orgs', $orgs);\n            // generate auth key for a new user\n            $this->loadModel('Server');\n            $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n            $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n            }\n            $temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n            $servers = array(0 => 'Not bound to a server');\n            if (!empty($temp)) {\n                foreach ($temp as $t) {\n                    if (!empty($t['Server']['name'])) {\n                        $servers[$t['Server']['id']] = $t['Server']['name'];\n                    } else {\n                        $servers[$t['Server']['id']] = $t['Server']['url'];\n                    }\n                }\n            }\n            $this->set('currentOrg', $this->Auth->user('org_id'));\n            $this->set('isSiteAdmin', $this->_isSiteAdmin());\n            $this->set('default_role_id', $default_role_id);\n            $this->set('servers', $servers);\n            $this->set(compact('roles'));\n            $this->set(compact('syncRoles'));\n        }\n    }\n\n    public function admin_edit($id = null)\n    {\n        $this->set('currentOrg', $this->Auth->user('org_id'));\n        $this->User->id = $id;\n        if (!$this->User->exists()) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $params = array();\n        $allowedRole = '';\n        $userToEdit = $this->User->find('first', array(\n                'conditions' => array('User.id' => $id),\n                'recursive' => -1,\n                'fields' => array('User.id', 'User.role_id', 'User.email', 'User.org_id', 'Role.perm_site_admin'),\n                'contain' => array('Role')\n        ));\n        if (!$this->_isSiteAdmin()) {\n            // Org admins should be able to select the role that is already assigned to an org user when editing them.\n            // What happened previously:\n            // Org admin edits another org admin of the same org\n            // Org admin is not allowed to set privileged access roles (site_admin/sync/regex)\n            // MISP automatically chooses the first available option for the user as the selected setting (usually user)\n            // Org admin is downgraded to a user\n            // Now we make an exception for the already assigned role, both in the form and the actual edit.\n            if ($userToEdit['User']['org_id'] != $this->Auth->user('org_id') || !empty($userToEdit['Role']['perm_site_admin'])) {\n                throw new NotFoundException(__('Invalid user'));\n            }\n            $allowedRole = $userToEdit['User']['role_id'];\n            $params = array('conditions' => array(\n                    'OR' => array(\n                            'AND' => array(\n                                'perm_site_admin' => 0, 'perm_sync' => 0, 'perm_regexp_access' => 0, 'restricted_to_site_admin' => 0\n                            ),\n                            'id' => $allowedRole,\n                    )\n            ));\n        }\n        $roles = $this->User->Role->find('list', $params);\n        $syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n        $this->set('currentId', $id);\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data['User'] = $this->request->data;\n            }\n            $abortPost = false;\n            if (!$this->_isRest()) {\n                if (Configure::read('Security.require_password_confirmation')) {\n                    if (!empty($this->request->data['User']['current_password'])) {\n                        $hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n                        if (!$hashed) {\n                            $abortPost = true;\n                            $this->Flash->error('Invalid password. Please enter your current password to continue.');\n                        }\n                        unset($this->request->data['User']['current_password']);\n                    } else {\n                        $abortPost = true;\n                        $this->Flash->info('Please enter your current password to continue.');\n                    }\n                }\n            }\n            $fail = false;\n            if (!$this->_isSiteAdmin() && !$abortPost) {\n                $organisation = $this->User->Organisation->find('first', array(\n                    'conditions' => array('Organisation.id' => $userToEdit['User']['org_id']),\n                    'recursive' => -1\n                ));\n                if (!empty($organisation['Organisation']['restricted_to_domain'])) {\n                    $abortPost = true;\n                    foreach ($organisation['Organisation']['restricted_to_domain'] as $restriction) {\n                        if (\n                            strlen($this->request->data['User']['email']) > strlen($restriction) &&\n                            substr($this->request->data['User']['email'], (-1 * strlen($restriction))) === $restriction &&\n                            in_array($this->request->data['User']['email'][strlen($this->request->data['User']['email']) - strlen($restriction) -1], array('@', '.'))\n                        ) {\n                            $abortPost = false;\n                        }\n                    }\n                    if ($abortPost) {\n                        $this->Flash->error(__('Invalid e-mail domain. Your user is restricted to creating users for the following domain(s): ') . implode(', ', $organisation['Organisation']['restricted_to_domain']));\n                    }\n                }\n            }\n            if (!$abortPost) {\n                $this->request->data['User']['id'] = $id;\n                if (!isset($this->request->data['User']['email'])) {\n                    $this->request->data['User']['email'] = $userToEdit['User']['email'];\n                }\n                if (isset($this->request->data['User']['role_id']) && !array_key_exists($this->request->data['User']['role_id'], $syncRoles)) {\n                    $this->request->data['User']['server_id'] = 0;\n                }\n                $fields = array();\n                $blockedFields = array('id', 'invited_by');\n                if (!$this->_isSiteAdmin()) {\n                    $blockedFields[] = 'org_id';\n                }\n                foreach (array_keys($this->request->data['User']) as $field) {\n                    if (in_array($field, $blockedFields)) {\n                        continue;\n                    }\n                    if ($field != 'password') {\n                        array_push($fields, $field);\n                    }\n                }\n                $fieldsOldValues = array();\n                foreach ($fields as $field) {\n                    if ($field == 'enable_password') {\n                        continue;\n                    }\n                    if ($field != 'confirm_password') {\n                        $fieldsOldValues[$field] = $this->User->field($field);\n                    } else {\n                        $fieldsOldValues[$field] = $this->User->field('password');\n                    }\n                }\n                if (\n                    isset($this->request->data['User']['enable_password']) && $this->request->data['User']['enable_password'] != '0' &&\n                    isset($this->request->data['User']['password']) && \"\" != $this->request->data['User']['password']\n                ) {\n                    $fields[] = 'password';\n                    if ($this->_isRest() && !isset($this->request->data['User']['confirm_password'])) {\n                        $this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n                        $fields[] = 'confirm_password';\n                    }\n                }\n                if (!$this->_isRest()) {\n                    $fields[] = 'role_id';\n                }\n                if (!$this->_isSiteAdmin()) {\n                    $this->loadModel('Role');\n                    $this->Role->recursive = -1;\n                    $chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n                    if (empty($chosenRole) || (($chosenRole['Role']['id'] != $allowedRole) && ($chosenRole['Role']['perm_site_admin'] == 1 || $chosenRole['Role']['perm_regexp_access'] == 1 || $chosenRole['Role']['perm_sync'] == 1))) {\n                        throw new Exception('You are not authorised to assign that role to a user.');\n                    }\n                }\n                if ($this->User->save($this->request->data, true, $fields)) {\n                    // newValues to array\n                    $fieldsNewValues = array();\n                    foreach ($fields as $field) {\n                        if ($field != 'confirm_password') {\n                            $newValue = $this->data['User'][$field];\n                            if (gettype($newValue) == 'array') {\n                                $newValueStr = '';\n                                $cP = 0;\n                                foreach ($newValue as $newValuePart) {\n                                    if ($cP < 2) {\n                                        $newValueStr .= '-' . $newValuePart;\n                                    } else {\n                                        $newValueStr = $newValuePart . $newValueStr;\n                                    }\n                                    $cP++;\n                                }\n                                $fieldsNewValues[$field] = $newValueStr;\n                            } else {\n                                $fieldsNewValues[$field] = $newValue;\n                            }\n                        } else {\n                            $fieldsNewValues[$field] = $this->data['User']['password'];\n                        }\n                    }\n                    // compare\n                    $fieldsResult = array();\n                    foreach ($fields as $field) {\n                        if (isset($fieldsOldValues[$field]) && $fieldsOldValues[$field] != $fieldsNewValues[$field]) {\n                            if ($field != 'confirm_password' && $field != 'enable_password') {\n                                $fieldsResult[$field] = array($fieldsOldValues[$field], $fieldsNewValues[$field]);\n                            }\n                        }\n                    }\n                    $user = $this->User->find('first', array(\n                        'recursive' => -1,\n                        'conditions' => array('User.id' => $this->User->id)\n                    ));\n                    $this->User->extralog($this->Auth->user(), \"edit\", \"user\", $fieldsResult, $user);\n                    if ($this->_isRest()) {\n                        $user['User']['password'] = '******';\n                        return $this->RestResponse->viewData($user, $this->response->type());\n                    } else {\n                        $this->Flash->success(__('The user has been saved'));\n                        $this->_refreshAuth(); // in case we modify ourselves\n                        $this->redirect(array('action' => 'index'));\n                    }\n                } else {\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Users', 'admin_edit', $id, $this->User->validationErrors, $this->response->type());\n                    } else {\n                        $this->Flash->error(__('The user could not be saved. Please, try again.'));\n                    }\n                }\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Users', 'admin_edit', $id, $this->response->type());\n            }\n            $this->User->read(null, $id);\n            if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $this->User->data['User']['org_id']) {\n                $this->redirect(array('controller' => 'users', 'action' => 'index', 'admin' => true));\n            }\n            $this->User->set('password', '');\n            $this->request->data = $this->User->data;\n        }\n        if ($this->_isSiteAdmin()) {\n            $orgs = $this->User->Organisation->find('list', array(\n                    'conditions' => array('local' => 1),\n                    'order' => array('lower(name) asc')\n            ));\n        } else {\n            $orgs = array();\n        }\n        $this->loadModel('Server');\n        $this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n        $this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n        }\n        $temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n        $servers = array(0 => 'Not bound to a server');\n        foreach ($temp as $t) {\n            if (!empty($t['Server']['name'])) {\n                $servers[$t['Server']['id']] = $t['Server']['name'];\n            } else {\n                $servers[$t['Server']['id']] = $t['Server']['url'];\n            }\n        }\n        $this->set('servers', $servers);\n        $this->set('orgs', $orgs);\n        $this->set('id', $id);\n        $this->set(compact('roles'));\n        $this->set(compact('syncRoles'));\n    }\n\n    public function admin_delete($id = null)\n    {\n        if (!$this->request->is('post') && !$this->request->is('delete')) {\n            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));\n        }\n        if (!$this->_isAdmin()) {\n            throw new Exception('Administrators only.');\n        }\n        $this->User->id = $id;\n        $conditions = array('User.id' => $id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['org_id'] = $this->Auth->user('org_id');\n        }\n        $user = $this->User->find('first', array(\n                'conditions' => $conditions,\n                'recursive' => -1\n        ));\n        if (empty($user)) {\n            throw new NotFoundException(__('Invalid user'));\n        }\n        $fieldsDescrStr = 'User (' . $id . '): ' . $user['User']['email'];\n        if ($this->User->delete($id)) {\n            $this->User->extralog($this->Auth->user(), \"delete\", $fieldsDescrStr, '');\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('User', 'admin_delete', $id, $this->response->type(), 'User deleted.');\n            } else {\n                $this->Flash->success(__('User deleted'));\n                $this->redirect(array('action' => 'index'));\n            }\n        }\n        $this->Flash->error(__('User was not deleted'));\n        $this->redirect(array('action' => 'index'));\n    }\n\n    public function updateLoginTime()\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException('This feature is only accessible via POST requests');\n        }\n        $user = $this->User->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('User.id' => $this->Auth->user('id'))\n        ));\n        $this->User->id = $this->Auth->user('id');\n        $this->User->saveField('last_login', time());\n        $this->User->saveField('current_login', time());\n        $user = $this->User->getAuthUser($user['User']['id']);\n        $this->Auth->login($user);\n        $this->redirect(array('Controller' => 'User', 'action' => 'dashboard'));\n    }\n\n    public function login()\n    {\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $this->Bruteforce = ClassRegistry::init('Bruteforce');\n            if (!empty($this->request->data['User']['email'])) {\n                if ($this->Bruteforce->isBlacklisted($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email'])) {\n                    $expire = Configure::check('SecureAuth.expire') ? Configure::read('SecureAuth.expire') : 300;\n                    throw new ForbiddenException('You have reached the maximum number of login attempts. Please wait ' . Configure::read('SecureAuth.expire') . ' seconds and try again.');\n                }\n            }\n            // Check the length of the user's authkey\n            $userPass = $this->User->find('first', array(\n                'conditions' => array('User.email' => $this->request->data['User']['email']),\n                'fields' => array('User.password'),\n                'recursive' => -1\n            ));\n            if (!empty($userPass) && strlen($userPass['User']['password']) == 40) {\n                $this->AdminSetting = ClassRegistry::init('AdminSetting');\n                $db_version = $this->AdminSetting->find('all', array('conditions' => array('setting' => 'db_version')));\n                $versionRequirementMet = $this->User->checkVersionRequirements($db_version[0]['AdminSetting']['value'], '2.4.77');\n                if ($versionRequirementMet) {\n                    $passwordToSave = $this->request->data['User']['password'];\n                }\n                unset($this->Auth->authenticate['Form']['passwordHasher']);\n                $this->Auth->constructAuthenticate();\n            }\n        }\n        if ($this->Auth->login()) {\n            $this->User->extralog($this->Auth->user(), \"login\");\n            $this->User->Behaviors->disable('SysLogLogable.SysLogLogable');\n            $this->User->id = $this->Auth->user('id');\n            $user = $this->User->find('first', array(\n                'conditions' => array(\n                    'User.id' => $this->Auth->user('id')\n                ),\n                'recursive' => -1\n            ));\n            unset($user['User']['password']);\n            $user['User']['action'] = 'login';\n            $user['User']['last_login'] = $this->Auth->user('current_login');\n            $user['User']['current_login'] = time();\n            $this->User->save($user['User'], true, array('id', 'last_login', 'current_login'));\n            if (empty($this->Auth->authenticate['Form']['passwordHasher']) && !empty($passwordToSave)) {\n                $this->User->saveField('password', $passwordToSave);\n            }\n            $this->User->Behaviors->enable('SysLogLogable.SysLogLogable');\n            // no state changes are ever done via GET requests, so it is safe to return to the original page:\n            $this->redirect($this->Auth->redirectUrl());\n        // $this->redirect(array('controller' => 'events', 'action' => 'index'));\n        } else {\n            $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n            $dataSource = $dataSourceConfig['datasource'];\n            // don't display authError before first login attempt\n            if (str_replace(\"//\", \"/\", $this->webroot . $this->Session->read('Auth.redirect')) == $this->webroot && $this->Session->read('Message.auth.message') == $this->Auth->authError) {\n                $this->Session->delete('Message.auth');\n            }\n            // don't display \"invalid user\" before first login attempt\n            if ($this->request->is('post') || $this->request->is('put')) {\n                $this->Flash->error(__('Invalid username or password, try again'));\n                if (isset($this->request->data['User']['email'])) {\n                    $this->Bruteforce->insert($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email']);\n                }\n            }\n            // populate the DB with the first role (site admin) if it's empty\n            $this->loadModel('Role');\n            if ($this->Role->find('count') == 0) {\n                $siteAdmin = array('Role' => array(\n                    'id' => 1,\n                    'name' => 'Site Admin',\n                    'permission' => 3,\n                    'perm_add' => 1,\n                    'perm_modify' => 1,\n                    'perm_modify_org' => 1,\n                    'perm_publish' => 1,\n                    'perm_sync' => 1,\n                    'perm_admin' => 1,\n                    'perm_audit' => 1,\n                    'perm_auth' => 1,\n                    'perm_site_admin' => 1,\n                    'perm_regexp_access' => 1,\n                    'perm_sharing_group' => 1,\n                    'perm_template' => 1,\n                    'perm_tagger' => 1,\n                ));\n                $this->Role->save($siteAdmin);\n                // PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n                if ($dataSource == 'Database/Postgres') {\n                    $sql = \"SELECT setval('roles_id_seq', (SELECT MAX(id) FROM roles));\";\n                    $this->Role->query($sql);\n                }\n            }\n            if ($this->User->Organisation->find('count', array('conditions' => array('Organisation.local' => true))) == 0) {\n                $this->User->runUpdates();\n                $date = date('Y-m-d H:i:s');\n                $org = array('Organisation' => array(\n                        'id' => 1,\n                        'name' => !empty(Configure::read('MISP.org')) ? Configure::read('MISP.org') : 'ADMIN',\n                        'description' => 'Automatically generated admin organisation',\n                        'type' => 'ADMIN',\n                        'uuid' => CakeText::uuid(),\n                        'local' => 1,\n                        'date_created' => $date,\n                        'sector' => '',\n                        'nationality' => ''\n                ));\n                $this->User->Organisation->save($org);\n                // PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n                if ($dataSource == 'Database/Postgres') {\n                    $sql = \"SELECT setval('organisations_id_seq', (SELECT MAX(id) FROM organisations));\";\n                    $this->User->Organisation->query($sql);\n                }\n                $org_id = $this->User->Organisation->id;\n            } else {\n                $hostOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.name' => Configure::read('MISP.org'), 'Organisation.local' => true), 'recursive' => -1));\n                if (!empty($hostOrg)) {\n                    $org_id = $hostOrg['Organisation']['id'];\n                } else {\n                    $firstOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.local' => true), 'order' => 'Organisation.id ASC'));\n                    $org_id = $firstOrg['Organisation']['id'];\n                }\n            }\n\n            // populate the DB with the first user if it's empty\n            if ($this->User->find('count') == 0) {\n                $this->User->runUpdates();\n                $this->User->createInitialUser($org_id);\n            }\n        }\n    }\n\n    public function routeafterlogin()\n    {\n        // Events list\n        $url = $this->Session->consume('pre_login_requested_url');\n        if (empty($url)) {\n            $url = array('controller' => 'events', 'action' => 'index');\n        }\n        $this->redirect($url);\n    }\n\n    public function logout()\n    {\n        if ($this->Session->check('Auth.User')) {\n            $this->User->extralog($this->Auth->user(), \"logout\");\n        }\n        $this->Flash->info(__('Good-Bye'));\n        $user = $this->User->find('first', array(\n            'conditions' => array(\n                'User.id' => $this->Auth->user('id')\n            ),\n            'recursive' => -1\n        ));\n        unset($user['User']['password']);\n        $user['User']['action'] = 'logout';\n        $this->User->save($user['User'], true, array('id'));\n        $this->redirect($this->Auth->logout());\n    }\n\n    public function resetauthkey($id = null, $alert = false)\n    {\n        if (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n            throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n        }\n        if ($id == 'me') {\n            $id = $this->Auth->user('id');\n        }\n        if (!$this->userRole['perm_auth']) {\n            throw new MethodNotAllowedException(__('Invalid action.'));\n        }\n        $newkey = $this->User->resetauthkey($this->Auth->user(), $id, $alert);\n        if ($newkey === false) {\n            throw new MethodNotAllowedException(__('Invalid user.'));\n        }\n        if (!$this->_isRest()) {\n            $this->Flash->success(__('New authkey generated.', true));\n            $this->_refreshAuth();\n            $this->redirect($this->referer());\n        } else {\n            return $this->RestResponse->saveSuccessResponse('User', 'resetauthkey', $id, $this->response->type(), 'Authkey updated: ' . $newkey);\n        }\n    }\n\n    public function resetAllSyncAuthKeys()\n    {\n        if (!$this->request->is('post')) {\n            throw new MethodNotAllowedException(__('This functionality is only accessible via POST requests.'));\n        }\n        $results = $this->User->resetAllSyncAuthKeysRouter($this->Auth->user());\n        if ($results === true) {\n            $message = __('Job initiated.');\n        } else {\n            $message = __('%s authkeys reset, %s could not be reset.', $results['success'], $results['fails']);\n        }\n        if (!$this->_isRest()) {\n            $this->Flash->info($message);\n            $this->redirect($this->referer());\n        } else {\n            return $this->RestResponse->saveSuccessResponse('User', 'resetAllSyncAuthKeys', false, $this->response->type(), $message);\n        }\n    }\n\n    public function histogram($selected = null)\n    {\n        //if (!$this->request->is('ajax') && !$this->_isRest()) throw new MethodNotAllowedException('This function can only be accessed via AJAX or the API.');\n        if ($selected == '[]') {\n            $selected = null;\n        }\n        $selectedTypes = array();\n        if ($selected) {\n            $selectedTypes = json_decode($selected);\n        }\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            $org_ids = array($this->Auth->user('org_id'));\n        } else {\n            $org_ids = $this->User->Event->find('list', array(\n                'fields' => array('Event.orgc_id', 'Event.orgc_id'),\n                'group' => array('Event.orgc_id')\n            ));\n        }\n        $orgs_temp = $this->User->Organisation->find('list', array(\n            'fields' => array('Organisation.id', 'Organisation.name'),\n            'conditions' => array('Organisation.id' => $org_ids)\n        ));\n        $orgs = array(0 => 'All organisations');\n        foreach ($org_ids as $v) {\n            if (!empty($orgs_temp[$v])) {\n                $orgs[$v] = $orgs_temp[$v];\n            }\n        }\n        $data = array();\n        $max = 1;\n        foreach ($orgs as $org_id => $org_name) {\n            $conditions = array('Attribute.deleted' => 0);\n            if ($selected) {\n                $conditions['Attribute.type'] = $selectedTypes;\n            }\n            if ($org_id != 0) {\n                $conditions['Event.orgc_id'] = $org_id;\n            }\n            $params = array(\n                'recursive' => -1,\n                'fields' => array('Attribute.type', 'COUNT(*) as num_types'),\n                'group' => array('Attribute.type'),\n                'joins' => array(\n                    array(\n                        'table' => 'events',\n                        'alias' => 'Event',\n                        'type' => 'LEFT',\n                        'conditions' => array(\n                            'Attribute.event_id = Event.id'\n                        )\n                    )\n                ),\n                //'order' => array('num_types DESC'),\n                'conditions' => $conditions,\n                'order' => false\n            );\n            if ($org_id == 0) {\n                unset($params['joins']);\n            }\n            $temp = $this->User->Event->Attribute->find('all', $params);\n            $temp = Hash::combine($temp, '{n}.Attribute.type', '{n}.0.num_types');\n            $total = 0;\n            foreach ($temp as $k => $v) {\n                if (intval($v) > $max) {\n                    $max = intval($v);\n                }\n                $total += intval($v);\n            }\n            $data[$org_id]['data'] = $temp;\n            $data[$org_id]['org_name'] = $org_name;\n            $data[$org_id]['total'] = $total;\n        }\n        uasort($data, function ($a, $b) {\n            return $b['total'] - $a['total'];\n        });\n        $data = array_values($data);\n        $this->set('data', $data);\n        $this->set('max', $max);\n        $this->set('selectedTypes', $selectedTypes);\n\n        // Nice graphical histogram\n        $sigTypes = array_keys($this->User->Event->Attribute->typeDefinitions);\n        App::uses('ColourPaletteTool', 'Tools');\n        $paletteTool = new ColourPaletteTool();\n        $colours = $paletteTool->createColourPalette(count($sigTypes));\n        $typeDb = array();\n        foreach ($sigTypes as $k => $type) {\n            $typeDb[$type] = $colours[$k];\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('typeDb', $typeDb);\n            $this->set('sigTypes', $sigTypes);\n            $this->layout = 'ajax';\n        }\n    }\n\n    public function terms()\n    {\n        if ($this->request->is('post') || $this->request->is('put')) {\n            $this->User->id = $this->Auth->user('id');\n            $this->User->saveField('termsaccepted', true);\n            $this->_refreshAuth(); // refresh auth info\n            $this->Flash->success(__('You accepted the Terms and Conditions.'));\n            $this->redirect(array('action' => 'routeafterlogin'));\n        }\n        $this->set('termsaccepted', $this->Auth->user('termsaccepted'));\n    }\n\n    public function downloadTerms()\n    {\n        if (!Configure::read('MISP.terms_file')) {\n            $termsFile = APP .\"View/Users/terms\";\n        } else {\n            $termsFile = APP . 'files' . DS . 'terms' . DS .  Configure::read('MISP.terms_file');\n        }\n        $this->response->file($termsFile, array('download' => true, 'name' => Configure::read('MISP.terms_file')));\n        return $this->response;\n    }\n\n    public function checkAndCorrectPgps()\n    {\n        if (!self::_isAdmin()) {\n            throw new NotFoundException();\n        }\n        $this->set('fails', $this->User->checkAndCorrectPgps());\n    }\n\n    public function admin_quickEmail($user_id)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $conditions = array('User.id' => $user_id);\n        if (!$this->_isSiteAdmin()) {\n            $conditions['User.org_id'] = $this->Auth->user('org_id');\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        $error = false;\n        if (empty($user)) {\n            $error = 'Invalid user.';\n        }\n        if (!$error && $user['User']['disabled']) {\n            $error = 'Cannot send an e-mail to this user as the account is disabled.';\n        }\n        $encryption = false;\n        if (!$error && !empty($user['User']['gpgkey'])) {\n            $encryption = 'PGP';\n        } elseif (!$error && !empty($user['User']['certif_public'])) {\n            $encryption = 'SMIME';\n        }\n        $this->set('encryption', $encryption);\n        if (!$error && !$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n            $error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n        }\n        if ($error) {\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $error, $this->response->type());\n            } else {\n                $this->Flash->error('Cannot send an e-mail to this user as the account is disabled.');\n                $this->redirect('/admin/users/view/' . $user_id);\n            }\n        }\n        if ($this->request->is('post')) {\n            if (!isset($this->request->data['User'])) {\n                $this->request->data['User'] = $this->request->data;\n            }\n            if (empty($this->request->data['User']['subject']) || empty($this->request->data['User']['body'])) {\n                $message = 'Both the subject and the body have to be set.';\n                if ($this->_isRest()) {\n                    throw new MethodNotAllowedException($message);\n                } else {\n                    $this->Flash->error($message);\n                    $this->redirect('/admin/users/quickEmail/' . $user_id);\n                }\n            }\n            $result = $this->User->sendEmail($user, $this->request->data['User']['body'], false, $this->request->data['User']['subject']);\n            if ($this->_isRest()) {\n                if ($result) {\n                    return $this->RestResponse->saveSuccessResponse('User', 'admin_quickEmail', $id, $this->response->type(), 'User deleted.');\n                } else {\n                    return $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $this->User->validationErrors, $this->response->type());\n                }\n            } else {\n                if ($result) {\n                    $this->Flash->success('Email sent.');\n                } else {\n                    $this->Flash->error('Could not send e-mail.');\n                }\n                $this->redirect('/admin/users/view/' . $user_id);\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Users', 'admin_quickEmail', false, $this->response->type());\n        }\n        $this->set('encryption', $encryption);\n        $this->set('user', $user);\n    }\n\n    public function admin_email($isPreview=false)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException();\n        }\n        $isPostOrPut = $this->request->is('post') || $this->request->is('put');\n        $conditions = array();\n        if (!$this->_isSiteAdmin()) {\n            $conditions = array('org_id' => $this->Auth->user('org_id'));\n        }\n\n        // harvest parameters\n        if ($isPostOrPut) {\n            $recipient = $this->request->data['User']['recipient'];\n        } else {\n            $recipient = isset($this->request->query['recipient']) ? $this->request->query['recipient'] : null;\n        }\n        if ($isPostOrPut) {\n            $recipientEmailList = $this->request->data['User']['recipientEmailList'];\n        } else {\n            $recipientEmailList = isset($this->request->query['recipientEmailList']) ? $this->request->query['recipientEmailList'] : null;\n        }\n        if ($isPostOrPut) {\n            $orgNameList = $this->request->data['User']['orgNameList'];\n        } else {\n            $orgNameList = isset($this->request->query['orgNameList']) ? $this->request->query['orgNameList'] : null;\n        }\n\n        if (!is_null($recipient) && $recipient == 0) {\n            if (is_null($recipientEmailList)) {\n                throw new NotFoundException(__('Recipient email not provided'));\n            }\n            $conditions['id'] = $recipientEmailList;\n        } elseif (!is_null($recipient) && $recipient == 2) {\n            if (is_null($orgNameList)) {\n                throw new NotFoundException(__('Recipient organisation not provided'));\n            }\n            $conditions['org_id'] = $orgNameList;\n        }\n        $conditions['AND'][] = array('User.disabled' => 0);\n\n        // Allow to mimic real form post\n        if ($isPreview) {\n            $users = $this->User->find('list', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions, 'fields' => array('email')));\n            $this->set('emails', $users);\n            $this->set('emailsCount', count($users));\n            $this->render('ajax/emailConfirmTemplate');\n        } else {\n            $users = $this->User->find('all', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions));\n            // User has filled in his contact form, send out the email.\n            if ($isPostOrPut) {\n                $this->request->data['User']['message'] = $this->User->adminMessageResolve($this->request->data['User']['message']);\n                $failures = '';\n                foreach ($users as $user) {\n                    $password = $this->User->generateRandomPassword();\n                    $body = str_replace('$password', $password, $this->request->data['User']['message']);\n                    $body = str_replace('$username', $user['User']['email'], $body);\n                    $result = $this->User->sendEmail($user, $body, false, $this->request->data['User']['subject']);\n                    // if sending successful and action was a password change, update the user's password.\n                    if ($result && $this->request->data['User']['action'] != '0') {\n                        $this->User->id = $user['User']['id'];\n                        $this->User->saveField('password', $password);\n                        $this->User->saveField('change_pw', '1');\n                    }\n                    if (!$result) {\n                        if ($failures != '') {\n                            $failures .= ', ';\n                        }\n                        $failures .= $user['User']['email'];\n                    }\n                }\n                if ($failures != '') {\n                    $this->Flash->success(__('E-mails sent, but failed to deliver the messages to the following recipients: ' . $failures));\n                } else {\n                    $this->Flash->success(__('E-mails sent.'));\n                }\n            }\n            $conditions = array();\n            if (!$this->_isSiteAdmin()) {\n                $conditions = array('org_id' => $this->Auth->user('org_id'));\n            }\n            $conditions['User.disabled'] = 0;\n            $temp = $this->User->find('all', array('recursive' => -1, 'fields' => array('id', 'email', 'Organisation.name'), 'order' => array('email ASC'), 'conditions' => $conditions, 'contain' => array('Organisation')));\n            $emails = array();\n            $orgName = array();\n            // save all the emails of the users and set it for the dropdown list in the form\n            foreach ($temp as $user) {\n                $emails[$user['User']['id']] = $user['User']['email'];\n                $orgName[$user['Organisation']['id']] = $user['Organisation']['name'];\n            }\n\n            $this->set('users', $temp);\n            $this->set('recipientEmail', $emails);\n            $this->set('orgName', $orgName);\n            $this->set('org', Configure::read('MISP.org'));\n            $textsToFetch = array('newUserText', 'passwordResetText');\n            $this->loadModel('Server');\n            foreach ($textsToFetch as $text) {\n                ${$text} = Configure::read('MISP.' . $text);\n                if (!${$text}) {\n                    ${$text} = $this->Server->serverSettings['MISP'][$text]['value'];\n                }\n                $this->set($text, ${$text});\n            }\n        }\n    }\n\n    public function initiatePasswordReset($id, $firstTime = false)\n    {\n        if (!$this->_isAdmin()) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        $user = $this->User->find('first', array(\n            'conditions' => array('id' => $id),\n            'recursive' => -1\n        ));\n        if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $user['User']['org_id']) {\n            throw new MethodNotAllowedException('You are not authorised to do that.');\n        }\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['User']['firstTime'])) {\n                $firstTime = $this->request->data['User']['firstTime'];\n            }\n            return new CakeResponse($this->User->initiatePasswordReset($user, $firstTime));\n        } else {\n            $error = false;\n            $encryption = false;\n            if (!empty($user['User']['gpgkey'])) {\n                $encryption = 'PGP';\n            } elseif (!$error && !empty($user['User']['certif_public'])) {\n                $encryption = 'SMIME';\n            }\n            $this->set('encryption', $encryption);\n            if (!$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n                $error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n            }\n            $this->set('error', $error);\n            $this->layout = 'ajax';\n            $this->set('user', $user);\n            $this->set('firstTime', $firstTime);\n            $this->render('ajax/passwordResetConfirmationForm');\n        }\n    }\n\n    // shows some statistics about the instance\n    public function statistics($page = 'data')\n    {\n        $this->set('page', $page);\n        $pages = array('data' => __('Usage data'),\n                       'orgs' => __('Organisations'),\n                       'users' => __('User and Organisation statistics'),\n                       'tags' => __('Tags'),\n                       'attributehistogram' => __('Attribute histogram'),\n                       'sightings' => __('Sightings toplists'),\n                       'galaxyMatrix' => __('Galaxy Matrix'));\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            unset($pages['orgs']);\n        }\n        $this->set('pages', $pages);\n        $result = array();\n        if ($page == 'data') {\n            $result = $this->__statisticsData($this->params['named']);\n        } elseif ($page == 'orgs') {\n            if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n                throw new MethodNotAllowedException('This feature is currently disabled.');\n            }\n            $result = $this->__statisticsOrgs($this->params['named']);\n        } elseif ($page == 'users') {\n            $result = $this->__statisticsUsers($this->params['named']);\n        } elseif ($page == 'tags') {\n            $result = $this->__statisticsTags($this->params['named']);\n        } elseif ($page == 'attributehistogram') {\n            if ($this->_isRest()) {\n                return $this->histogram($selected = null);\n            } else {\n                $this->render('statistics_histogram');\n            }\n        } elseif ($page == 'sightings') {\n            $result = $this->__statisticsSightings($this->params['named']);\n        } elseif ($page == 'galaxyMatrix') {\n            $result = $this->__statisticsGalaxyMatrix($this->params['named']);\n        }\n        if ($this->_isRest()) {\n            return $result;\n        }\n    }\n\n    private function __statisticsData($params = array())\n    {\n        // set all of the data up for the heatmaps\n        $params = array(\n            'fields' => array('name'),\n            'recursive' => -1,\n            'conditions' => array()\n        );\n        if (!$this->_isSiteAdmin() && !empty(Configure::read('Security.hide_organisation_index_from_users'))) {\n            $params['conditions'] = array('Organisation.id' => $this->Auth->user('org_id'));\n        }\n        $orgs = $this->User->Organisation->find('all', $params);\n        $local_orgs_params = $params;\n        $local_orgs_params['conditions']['Organisation.local'] = 1;\n        $local_orgs = $this->User->Organisation->find('all', $local_orgs_params);\n        $this->loadModel('Log');\n        $year = date('Y');\n        $month = date('n');\n        $month = $month - 5;\n        if ($month < 1) {\n            $year--;\n            $month = 12 + $month;\n        }\n        // Some additional statistics\n        $this_month = strtotime('first day of this month');\n        $stats['event_count'] = $this->User->Event->find('count', array('recursive' => -1));\n        $stats['event_count_month'] = $this->User->Event->find('count', array('conditions' => array('Event.timestamp >' => $this_month), 'recursive' => -1));\n\n        $stats['attribute_count'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.deleted' => 0), 'recursive' => -1));\n        $stats['attribute_count_month'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.timestamp >' => $this_month, 'Attribute.deleted' => 0), 'recursive' => -1));\n        $stats['attributes_per_event'] = round($stats['attribute_count'] / $stats['event_count']);\n\n        $this->loadModel('Correlation');\n        $this->Correlation->recursive = -1;\n        $stats['correlation_count'] = $this->Correlation->find('count', array('recursive' => -1));\n        $stats['correlation_count'] = $stats['correlation_count'] / 2;\n\n        $stats['proposal_count'] = $this->User->Event->ShadowAttribute->find('count', array('recursive' => -1));\n\n        $stats['user_count'] = $this->User->find('count', array('recursive' => -1));\n        $stats['user_count_pgp'] = $this->User->find('count', array('recursive' => -1, 'conditions' => array('User.gpgkey !=' => '')));\n        $stats['org_count'] = count($orgs);\n        $stats['local_org_count'] = count($local_orgs);\n        $stats['average_user_per_org'] = round($stats['user_count'] / $stats['local_org_count'], 1);\n\n        $this->loadModel('Thread');\n        $stats['thread_count'] = $this->Thread->find('count', array('conditions' => array('Thread.post_count >' => 0), 'recursive' => -1));\n        $stats['thread_count_month'] = $this->Thread->find('count', array('conditions' => array('Thread.date_created >' => date(\"Y-m-d H:i:s\", $this_month), 'Thread.post_count >' => 0), 'recursive' => -1));\n\n        $stats['post_count'] = $this->Thread->Post->find('count', array('recursive' => -1));\n        $stats['post_count_month'] = $this->Thread->Post->find('count', array('conditions' => array('Post.date_created >' => date(\"Y-m-d H:i:s\", $this_month)), 'recursive' => -1));\n\n\n        if ($this->_isRest()) {\n            $data = array(\n                'stats' => $stats\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('stats', $stats);\n            $this->set('orgs', $orgs);\n            $this->set('start', strtotime(date('Y-m-d H:i:s') . ' -5 months'));\n            $this->set('end', strtotime(date('Y-m-d H:i:s')));\n            $this->set('startDateCal', $year . ', ' . $month . ', 01');\n            $range = '[5, 10, 50, 100]';\n            $this->set('range', $range);\n            $this->render('statistics_data');\n        }\n    }\n\n    private function __statisticsSightings($params = array())\n    {\n        $this->loadModel('Sighting');\n        $conditions = array('Sighting.org_id' => $this->Auth->user('org_id'));\n        if (isset($params['timestamp'])) {\n            $conditions['Sighting.date_sighting >'] = $params['timestamp'];\n        }\n        $sightings = $this->Sighting->find('all', array(\n            'conditions' => $conditions,\n            'fields' => array('Sighting.date_sighting', 'Sighting.type', 'Sighting.source', 'Sighting.event_id')\n        ));\n        $data = array();\n        $toplist = array();\n        $eventids = array();\n        foreach ($sightings as $k => $v) {\n            if ($v['Sighting']['source'] == '') {\n                $v['Sighting']['source'] = 'Undefined';\n            }\n            $v['Sighting']['type'] = array('sighting', 'false-positive', 'expiration')[$v['Sighting']['type']];\n            if (isset($data[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $data[$v['Sighting']['source']][$v['Sighting']['type']]++;\n            } else {\n                $data[$v['Sighting']['source']][$v['Sighting']['type']] = 1;\n            }\n            if (!isset($toplist[$v['Sighting']['source']])) {\n                $toplist[$v['Sighting']['source']] = 1;\n            } else {\n                $toplist[$v['Sighting']['source']]++;\n            }\n            if (!isset($eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $eventids[$v['Sighting']['source']][$v['Sighting']['type']] = array();\n            }\n            if (!in_array($v['Sighting']['event_id'], $eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n                $eventids[$v['Sighting']['source']][$v['Sighting']['type']][] = $v['Sighting']['event_id'];\n            }\n        }\n        arsort($toplist);\n        if ($this->_isRest()) {\n            $data = array(\n                'toplist' => $toplist,\n                'eventids' => $eventids\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('eventids', $eventids);\n            $this->set('toplist', $toplist);\n            $this->set('data', $data);\n            $this->render('statistics_sightings');\n        }\n    }\n\n    private function __statisticsOrgs($params = array())\n    {\n        $this->loadModel('Organisation');\n        $conditions = array();\n        if (!isset($params['scope']) || $params['scope'] == 'local') {\n            $params['scope'] = 'local';\n            $conditions['Organisation.local'] = 1;\n        } elseif ($params['scope'] == 'external') {\n            $conditions['Organisation.local'] = 0;\n        }\n        $orgs = array();\n        $orgs = $this->Organisation->find('all', array(\n                'recursive' => -1,\n                'conditions' => $conditions,\n                'fields' => array('id', 'name', 'description', 'local', 'contacts', 'type', 'sector', 'nationality'),\n        ));\n        $orgs = Set::combine($orgs, '{n}.Organisation.id', '{n}.Organisation');\n        $users = $this->User->find('all', array(\n            'group' => 'User.org_id',\n            'conditions' => array('User.org_id' => array_keys($orgs)),\n            'recursive' => -1,\n            'fields' => array('org_id', 'count(*)')\n        ));\n        foreach ($users as $user) {\n            $orgs[$user['User']['org_id']]['userCount'] = $user[0]['count(*)'];\n        }\n        unset($users);\n        $events = $this->User->Event->find('all', array(\n            'group' => 'Event.orgc_id',\n            'conditions' => array('Event.orgc_id' => array_keys($orgs)),\n            'recursive' => -1,\n            'fields' => array('Event.orgc_id', 'count(*)', 'sum(Event.attribute_count) as attributeCount')\n        ));\n        foreach ($events as $event) {\n            $orgs[$event['Event']['orgc_id']]['eventCount'] = $event[0]['count(*)'];\n            $orgs[$event['Event']['orgc_id']]['attributeCount'] = $event[0]['attributeCount'];\n            $orgs[$event['Event']['orgc_id']]['orgActivity'] = $this->User->getOrgActivity($event['Event']['orgc_id'], array('event_timestamp' => '365d'));\n        }\n        unset($events);\n        $orgs = Set::combine($orgs, '{n}.name', '{n}');\n        // f*** php\n        uksort($orgs, 'strcasecmp');\n        foreach ($orgs as $k => $value) {\n            if (file_exists(APP . 'webroot' . DS . 'img' . DS . 'orgs' . DS . $k . '.png')) {\n                $orgs[$k]['logo'] = true;\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($orgs, $this->response->type());\n        } else {\n            $this->set('scope', $params['scope']);\n            $this->set('orgs', $orgs);\n            $this->render('statistics_orgs');\n        }\n    }\n\n    private function __statisticsUsers($params = array())\n    {\n        $this->loadModel('Organisation');\n        $this->loadModel('User');\n        $this_month = strtotime(date('Y/m') . '/01');\n        $this_year = strtotime(date('Y') . '/01/01');\n        $ranges = array(\n            'total' => null,\n            'month' => $this_month,\n            'year' => $this_year\n        );\n        $scopes = array(\n            'user' => array(\n                'conditions' => array(),\n                'model' => 'User',\n                'date_created' => 'timestamp'\n            ),\n            'org_local' => array(\n                'conditions' => array('Organisation.local' => 1),\n                'model' => 'Organisation',\n                'date_created' => 'datetime'\n            ),\n            'org_external' => array(\n                'conditions' => array('Organisation.local' => 0),\n                'model' => 'Organisation',\n                'date_created' => 'datetime'\n            )\n        );\n        $statistics = array();\n        foreach ($scopes as $scope => $scope_data) {\n            foreach ($ranges as $range => $condition) {\n                $params = array(\n                    'recursive' => -1\n                );\n                $filter = array();\n                if (!empty($condition)) {\n                    if ($scope_data['date_created'] === 'datetime') {\n                        $condition = date('Y-m-d H:i:s', $condition);\n                    }\n                    $filter = array($scope_data['model'] . '.date_created >=' => $condition);\n                }\n                $params['conditions'] = array_merge($scopes[$scope]['conditions'], $filter);\n                $statistics[$scope]['data'][$range] = $this->{$scope_data['model']}->find('count', $params);\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($statistics, $this->response->type());\n        } else {\n            $this->set('statistics', $statistics);\n            $this->render('statistics_users');\n        }\n    }\n\n    public function tagStatisticsGraph()\n    {\n        $this->loadModel('EventTag');\n        $tags = $this->EventTag->getSortedTagList();\n        $this->loadModel('Taxonomy');\n        $taxonomies = $this->Taxonomy->find('list', array(\n                'conditions' => array('enabled' => true),\n                'fields' => array('Taxonomy.namespace')\n        ));\n        $flatData = array();\n        $tagIds = $this->EventTag->Tag->find('list', array('fields' => array('Tag.name', 'Tag.id')));\n        $this->set('tagIds', $tagIds);\n        foreach ($tags as $key => $value) {\n            $name = explode(':', $value['name']);\n            $tags[$key]['taxonomy'] = 'custom';\n            if (count($name) > 1) {\n                if (in_array($name[0], $taxonomies)) {\n                    $tags[$key]['taxonomy'] = $name[0];\n                }\n            }\n            $flatData[$tags[$key]['taxonomy']][$value['name']] = array('name' => $value['name'], 'size' => $value['eventCount']);\n        }\n        $treemap = array(\n                'name' => 'tags',\n                'children' => array()\n        );\n\n        foreach ($flatData as $key => $value) {\n            $newElement = array(\n                'name' => $key,\n                'children' => array()\n            );\n            foreach ($value as $tag) {\n                $newElement['children'][] = array('name' => $tag['name'], 'size' => $tag['size']);\n            }\n            $treemap['children'][] = $newElement;\n        }\n        $taxonomyColourCodes = array();\n        $taxonomies = array_merge(array('custom'), $taxonomies);\n        if ($this->_isRest()) {\n            $data = array(\n                'flatData' => $flatData,\n                'treemap' => $treemap\n            );\n            return $this->RestResponse->viewData($data, $this->response->type());\n        } else {\n            $this->set('taxonomyColourCodes', $taxonomyColourCodes);\n            $this->set('taxonomies', $taxonomies);\n            $this->set('flatData', $flatData);\n            $this->set('treemap', $treemap);\n            $this->set('tags', $tags);\n            $this->layout = 'treemap';\n            $this->render('ajax/tag_statistics_graph');\n        }\n    }\n\n    private function __statisticsTags($params = array())\n    {\n        $trending_tags = array();\n        $all_tags = array();\n        if ($this->_isRest()) {\n            return $this->tagStatisticsGraph();\n        } else {\n            $this->render('statistics_tags');\n        }\n    }\n\n    private function __statisticsGalaxyMatrix($params = array())\n    {\n        $this->loadModel('Event');\n        $this->loadModel('Galaxy');\n        $mitre_galaxy_id = $this->Galaxy->getMitreAttackGalaxyId();\n        if (isset($params['galaxy_id'])) {\n            $galaxy_id = $params['galaxy_id'];\n        } else {\n            $galaxy_id = $mitre_galaxy_id;\n        }\n        $organisations = $this->User->Organisation->find('all', array(\n                'recursive' => -1,\n        ));\n        array_unshift($organisations, array('Organisation' => array('id' => 0, 'name' => 'All')));\n        $this->set('organisations', $organisations);\n        $picked_organisation = 0;\n        if (isset($params['organisation']) && $params['organisation'] != 0) {\n            $org = $this->User->Organisation->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('id' => $params['organisation']),\n            ));\n            if (!empty($org)) {\n                $picked_organisation = $org;\n                $this->set('picked_organisation', $picked_organisation);\n            } else {\n                $this->set('picked_organisation', array('Organisation' => array('id' => '')));\n            }\n        } else {\n            $this->set('picked_organisation', array('Organisation' => array('id' => '')));\n        }\n\n        $rest_response_empty = true;\n        $ignore_score = false;\n        if (\n            isset($params['dateFrom'])\n            || isset($params['dateTo'])\n            || isset($params['organisation']) && $params['organisation'] != 0\n        ) { // use restSearch\n            $ignore_score = true;\n            $filters = array();\n            if (isset($params['dateFrom'])) {\n                $filters['from'] = $params['dateFrom'];\n                $this->set('dateFrom', $params['dateFrom']);\n            }\n            if (isset($params['dateTo'])) {\n                $filters['to'] = $params['dateTo'];\n                $this->set('dateTo', $params['dateTo']);\n            }\n            if (isset($params['organisation'])) {\n                $filters['org'] = $params['organisation'];\n            }\n            $elementCounter = 0;\n            $renderView = '';\n            $final = $this->Event->restSearch($this->Auth->user(), 'attack', $filters, false, false, $elementCounter, $renderView);\n\n            $final = json_decode($final, true);\n            if (!empty($final)) {\n                $rest_response_empty = false;\n                foreach ($final as $key => $data) {\n                    $this->set($key, $data);\n                }\n            }\n        }\n\n        // No need for restSearch or result is empty\n        if ($rest_response_empty) {\n            $matrixData = $this->Galaxy->getMatrix($galaxy_id);\n            $tabs = $matrixData['tabs'];\n            $matrixTags = $matrixData['matrixTags'];\n            $killChainOrders = $matrixData['killChain'];\n            $instanceUUID = $matrixData['instance-uuid'];\n            if ($ignore_score) {\n                $scores_uniform = array('scores' => array(), 'maxScore' => 0);\n            } else {\n                $scores_uniform = $this->Event->EventTag->getTagScoresUniform(0, $matrixTags);\n            }\n            $scores = $scores_uniform['scores'];\n            $maxScore = $scores_uniform['maxScore'];\n            // FIXME: temporary fix: add the score of deprecated mitre galaxies to the new one (for the stats)\n            if ($matrixData['galaxy']['id'] == $mitre_galaxy_id) {\n                $mergedScore = array();\n                foreach ($scores as $tag => $v) {\n                    $predicateValue = explode(':', $tag, 2)[1];\n                    $predicateValue = explode('=', $predicateValue, 2);\n                    $predicate = $predicateValue[0];\n                    $clusterValue = $predicateValue[1];\n                    $mappedTag = '';\n                    $mappingWithoutExternalId = array();\n                    if ($predicate == 'mitre-attack-pattern') {\n                        $mappedTag = $tag;\n                        $name = explode(\" \", $tag);\n                        $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                        $mappingWithoutExternalId[$name] = $tag;\n                    } else {\n                        $name = explode(\" \", $clusterValue);\n                        $name = join(\" \", array_slice($name, 0, -2)); // remove \" - external_id\"\n                        if (isset($mappingWithoutExternalId[$name])) {\n                            $mappedTag = $mappingWithoutExternalId[$name];\n                        } else {\n                            $adjustedTagName = $this->Galaxy->GalaxyCluster->find('list', array(\n                                'group' => array('GalaxyCluster.id', 'GalaxyCluster.tag_name'),\n                                'conditions' => array('GalaxyCluster.tag_name LIKE' => 'misp-galaxy:mitre-attack-pattern=' . $name . '% T%'),\n                                'fields' => array('GalaxyCluster.tag_name')\n                            ));\n                            if (!empty($adjustedTagName)) {\n                                $adjustedTagName = array_values($adjustedTagName)[0];\n                                $mappingWithoutExternalId[$name] = $adjustedTagName;\n                                $mappedTag = $mappingWithoutExternalId[$name];\n                            }\n                        }\n                    }\n                    if (isset($mergedScore[$mappedTag])) {\n                        $mergedScore[$mappedTag] += $v;\n                    } else {\n                        $mergedScore[$mappedTag] = $v;\n                    }\n                }\n                $scores = $mergedScore;\n                $maxScore = !empty($mergedScore) ? max(array_values($mergedScore)) : 0;\n            }\n            // end FIXME\n\n            $this->Galaxy->sortMatrixByScore($tabs, $scores);\n            if ($this->_isRest()) {\n                $json = array('matrix' => $tabs, 'scores' => $scores, 'instance-uuid' => $instanceUUID);\n                return $this->RestResponse->viewData($json, $this->response->type());\n            } else {\n                App::uses('ColourGradientTool', 'Tools');\n                $gradientTool = new ColourGradientTool();\n                $colours = $gradientTool->createGradientFromValues($scores);\n\n                $this->set('target_type', 'attribute');\n                $this->set('columnOrders', $killChainOrders);\n                $this->set('tabs', $tabs);\n                $this->set('scores', $scores);\n                $this->set('maxScore', $maxScore);\n                if (!empty($colours)) {\n                    $this->set('colours', $colours['mapping']);\n                    $this->set('interpolation', $colours['interpolation']);\n                }\n                $this->set('pickingMode', false);\n                if ($matrixData['galaxy']['id'] == $mitre_galaxy_id) {\n                    $this->set('defaultTabName', \"mitre-attack\");\n                    $this->set('removeTrailling', 2);\n                }\n\n                $this->set('galaxyName', $matrixData['galaxy']['name']);\n                $this->set('galaxyId', $matrixData['galaxy']['id']);\n                $matrixGalaxies = $this->Galaxy->getAllowedMatrixGalaxies();\n                $this->set('matrixGalaxies', $matrixGalaxies);\n            }\n        }\n        $this->render('statistics_galaxymatrix');\n    }\n\n    public function verifyGPG($full = false)\n    {\n        if (!self::_isSiteAdmin()) {\n            throw new NotFoundException();\n        }\n        $user_results = $this->User->verifyGPG($full);\n        $this->set('users', $user_results);\n    }\n\n    public function verifyCertificate()\n    {\n        $user_results = $this->User->verifyCertificate();\n        $this->set('users', $user_results);\n    }\n\n    // Refreshes the Auth session with new/updated data\n    protected function _refreshAuth()\n    {\n        $oldUser = $this->Auth->user();\n        $newUser = $this->User->find('first', array('conditions' => array('User.id' => $oldUser['id']), 'recursive' => -1,'contain' => array('Organisation', 'Role')));\n        // Rearrange it a bit to match the Auth object created during the login\n        $newUser['User']['Role'] = $newUser['Role'];\n        $newUser['User']['Organisation'] = $newUser['Organisation'];\n        unset($newUser['Organisation'], $newUser['Role']);\n        $this->Auth->login($newUser['User']);\n    }\n\n    public function fetchPGPKey($email = false)\n    {\n        if ($email == false) {\n            throw new NotFoundException('No email provided.');\n        }\n        $keys = $this->User->fetchPGPKey($email);\n        if (is_numeric($keys)) {\n            throw new NotFoundException('Could not retrieved any keys from the key server.');\n        }\n        $this->set('keys', $keys);\n        $this->autorender = false;\n        $this->layout = false;\n        $this->render('ajax/fetchpgpkey');\n    }\n\n    public function dashboard()\n    {\n        $events = array();\n        // the last login in the session is not updated after the login - only in the db, so let's fetch it.\n        $lastLogin = $this->Auth->user('last_login');\n        $this->loadModel('Event');\n        $events['changed'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, $lastLogin));\n        $events['published'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, false, $lastLogin));\n        $notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user());\n        $this->set('notifications', $notifications);\n        $this->set('events', $events);\n    }\n\n    public function checkIfLoggedIn()\n    {\n        return new CakeResponse(array('body'=> 'OK','status' => 200));\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\nApp::uses('ConnectionManager', 'Model');\nApp::uses('Sanitize', 'Utility');\n\nclass Bruteforce extends AppModel\n{\n    public function insert($ip, $username)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $expire = Configure::check('SecureAuth.expire') ? Configure::read('SecureAuth.expire') : 300;\n        $amount = Configure::check('SecureAuth.amount') ? Configure::read('SecureAuth.amount') : 5;\n        $expire = time() + $expire;\n        $expire = date('Y-m-d H:i:s', $expire);\n        $bruteforceEntry = array(\n            'ip' => $ip,\n            'username' => trim(strtolower($username)),\n            'expire' => $expire\n        );\n        $this->save($bruteforceEntry);\n        $title = 'Failed login attempt using username ' . $username . ' from IP: ' . $_SERVER['REMOTE_ADDR'] . '.';\n        if ($this->isBlacklisted($ip, $username)) {\n            $title .= 'This has tripped the bruteforce protection after  ' . $amount . ' failed attempts. The user is now blacklisted for ' . $expire . ' seconds.';\n        }\n        $log = array(\n                'org' => 'SYSTEM',\n                'model' => 'User',\n                'model_id' => 0,\n                'email' => $username,\n                'action' => 'login_fail',\n                'title' => $title\n        );\n        $this->Log->save($log);\n    }\n\n    public function clean()\n    {\n        $dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n        $dataSource = $dataSourceConfig['datasource'];\n        $expire = date('Y-m-d H:i:s', time());\n        if ($dataSource == 'Database/Mysql') {\n            $sql = 'DELETE FROM bruteforces WHERE `expire` <= \"' . $expire . '\";';\n        } elseif ($dataSource == 'Database/Postgres') {\n            $sql = 'DELETE FROM bruteforces WHERE expire <= \"' . $expire . '\";';\n        }\n        $this->query($sql);\n    }\n\n    public function isBlacklisted($ip, $username)\n    {\n        // first remove old expired rows\n        $this->clean();\n        // count\n        $params = array(\n            'conditions' => array(\n            'Bruteforce.ip' => $ip,\n            'LOWER(Bruteforce.username)' => trim(strtolower($username)))\n        );\n        $count = $this->find('count', $params);\n        $amount = Configure::check('SecureAuth.amount') ? Configure::read('SecureAuth.amount') : 5;\n        if ($count >= $amount) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"], "filenames": ["app/Controller/UsersController.php", "app/Model/Bruteforce.php"], "buggy_code_start_loc": [1068, 12], "buggy_code_end_loc": [1120, 43], "fixing_code_start_loc": [1069, 12], "fixing_code_end_loc": [1121, 46], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in MISP before 2.4.121. It did not canonicalize usernames when trying to block a brute-force series of invalid requests.", "other": {"cve": {"id": "CVE-2020-8891", "sourceIdentifier": "cve@mitre.org", "published": "2020-02-12T00:15:09.607", "lastModified": "2020-02-14T18:39:42.493", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP before 2.4.121. It did not canonicalize usernames when trying to block a brute-force series of invalid requests."}, {"lang": "es", "value": "Se detect\u00f3 un problema en MISP versiones anteriores a 2.4.121. No canonicaliz\u00f3 los nombres de usuario cuando intenta bloquear una serie de peticiones inv\u00e1lidas de fuerza bruta."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.121", "matchCriteriaId": "C4AE73C5-6FE2-4A7F-86F3-013F1D0A1AC8"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/934c82819237b4edf1da64587b72a87bec5dd520", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/MISP/MISP/commit/c1a0b3b2809b21b4df8c1efbc803aff700e262c3", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.120...v2.4.121", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/934c82819237b4edf1da64587b72a87bec5dd520"}}