{"buggy_code": ["<?php\nrequire_once(DIR_ROOT . '/include/rb.php');\nrequire_once(DIR_ROOT . '/include/libchart/classes/libchart.php');\nrequire_once(DIR_ROOT . '/include/misc/xss_clean.php');\n\nclass KippoInput\n{\n\n    function __construct()\n    {\n        //Let's connect to the database\n        R::setup('mysql:host=' . DB_HOST . ';port=' . DB_PORT . ';dbname=' . DB_NAME, DB_USER, DB_PASS);\n    }\n\n    function __destruct()\n    {\n        R::close();\n    }\n\n    public function printOverallHoneypotActivity()\n    {\n        echo '<h3>Overall post-compromise activity</h3>';\n\n        //TOTAL NUMBER OF COMMANDS\n        $db_query = \"SELECT COUNT(*) as total, COUNT(DISTINCT input) as uniq FROM input\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th colspan=\"2\">Post-compromise human activity</th>';\n            echo '</tr>';\n            echo '<tr class=\"dark\">';\n            echo '<th>Total number of commands</th>';\n            echo '<th>Distinct number of commands</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach ($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $row['total'] . '</td>';\n                echo '<td>' . $row['uniq'] . '</td>';\n                echo '</tr>';\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n        }\n\n        //TOTAL DOWNLOADED FILES\n        $db_query = \"SELECT COUNT(*) as files, COUNT(DISTINCT input) as uniq_files\n          FROM input WHERE input LIKE '%wget%' AND input NOT LIKE 'wget'\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th colspan=\"2\">Downloaded files</th>';\n            echo '</tr>';\n            echo '<tr class=\"dark\">';\n            echo '<th>Total number of downloads</th>';\n            echo '<th>Distinct number of downloads</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach ($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $row['files'] . '</td>';\n                echo '<td>' . $row['uniq_files'] . '</td>';\n                echo '</tr>';\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n        }\n\n        echo '<hr /><br />';\n    }\n\n    public function printHumanActivityBusiestDays()\n    {\n        $db_query = \"SELECT COUNT(input), timestamp\n          FROM input\n          GROUP BY DAYOFYEAR(timestamp)\n          ORDER BY COUNT(input) DESC\n          LIMIT 20 \";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new vertical bar chart and initialize the dataset\n            $chart_vertical = new VerticalBarChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //For every row returned from the database we add a new point to the dataset\n            foreach ($rows as $row) {\n                $dataSet->addPoint(new Point(date('d-m-Y', strtotime($row['timestamp'])), $row['COUNT(input)']));\n            }\n\n            //We set the vertical bar chart's dataset and render the graph\n            $chart_vertical->setDataSet($dataSet);\n            $chart_vertical->setTitle(HUMAN_ACTIVITY_BUSIEST_DAYS);\n            $chart_vertical->render(DIR_ROOT . \"/generated-graphs/human_activity_busiest_days.png\");\n            echo '<h3>Human activity inside the honeypot</h3>';\n            echo '<p>The following vertical bar chart visualizes the top 20 busiest days of real human activity, by counting the number of input to the system.</p>';\n            echo '<img src=\"generated-graphs/human_activity_busiest_days.png\">';\n            echo '<br />';\n        }\n    }\n\n    public function printHumanActivityPerDay()\n    {\n        $db_query = \"SELECT COUNT(input), timestamp\n          FROM input\n          GROUP BY DAYOFYEAR(timestamp)\n          ORDER BY timestamp ASC \";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new line chart and initialize the dataset\n            $chart = new LineChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //This graph gets messed up for large DBs, so here is a simple way to limit some of the input\n            $counter = 1;\n            //Display date legend only every $mod rows, 25 distinct values being the optimal for a graph\n            $mod = round(count($rows) / 25);\n            if ($mod == 0) $mod = 1; //otherwise a division by zero might happen below\n            //For every row returned from the database we add a new point to the dataset\n            foreach ($rows as $row) {\n                if ($counter % $mod == 0) {\n                    $dataSet->addPoint(new Point(date('d-m-Y', strtotime($row['timestamp'])), $row['COUNT(input)']));\n                } else {\n                    $dataSet->addPoint(new Point('', $row['COUNT(input)']));\n                }\n                $counter++;\n            }\n\n            //We set the line chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(HUMAN_ACTIVITY_PER_DAY);\n            $chart->render(DIR_ROOT . \"/generated-graphs/human_activity_per_day.png\");\n            echo '<p>The following line chart visualizes real human activity per day, by counting the number of input to the system for each day of operation.\n\t\t\t<br/><strong>Warning:</strong> Dates with zero input are not displayed.</p>';\n            echo '<img src=\"generated-graphs/human_activity_per_day.png\">';\n            echo '<br />';\n        }\n    }\n\n    public function printHumanActivityPerWeek()\n    {\n        $db_query = \"SELECT COUNT(input), MAKEDATE(\n          CASE\n          WHEN WEEKOFYEAR(timestamp) = 52\n          THEN YEAR(timestamp)-1\n          ELSE YEAR(timestamp)\n          END, (WEEKOFYEAR(timestamp) * 7)-4) AS DateOfWeek_Value\n          FROM input\n          GROUP BY WEEKOFYEAR(timestamp)\n          ORDER BY timestamp ASC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new line chart and initialize the dataset\n            $chart = new LineChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //This graph gets messed up for large DBs, so here is a simple way to limit some of the input\n            $counter = 1;\n            //Display date legend only every $mod rows, 25 distinct values being the optimal for a graph\n            $mod = round(count($rows) / 25);\n            if ($mod == 0) $mod = 1; //otherwise a division by zero might happen below\n            //For every row returned from the database we add a new point to the dataset\n            foreach ($rows as $row) {\n                if ($counter % $mod == 0) {\n                    $dataSet->addPoint(new Point(date('d-m-Y', strtotime($row['DateOfWeek_Value'])), $row['COUNT(input)']));\n                } else {\n                    $dataSet->addPoint(new Point('', $row['COUNT(input)']));\n                }\n                $counter++;\n\n                //We add 6 \"empty\" points to make a horizontal line representing a week\n                for ($i = 0; $i < 6; $i++) {\n                    $dataSet->addPoint(new Point('', $row['COUNT(input)']));\n                }\n            }\n\n            //We set the line chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(HUMAN_ACTIVITY_PER_WEEK);\n            $chart->render(DIR_ROOT . \"/generated-graphs/human_activity_per_week.png\");\n            echo '<p>The following line chart visualizes real human activity per week, by counting the number of input to the system for each day of operation.</p>';\n            echo '<img src=\"generated-graphs/human_activity_per_week.png\">';\n            echo '<br /><hr /><br />';\n        }\n    }\n\n    public function printTop10OverallInput()\n    {\n        $db_query = \"SELECT input, COUNT(input)\n          FROM input\n          GROUP BY input\n          ORDER BY COUNT(input) DESC\n          LIMIT 10\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new vertical bar chart and initialize the dataset\n            $chart = new VerticalBarChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Top 10 input (overall)</h3>';\n            echo '<p>The following table displays the top 10 commands (overall) entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=Input\">CSV of all input commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Input</th>';\n            echo '<th>Count</th>';\n            echo '</tr></thead><tbody>';\n\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach ($rows as $row) {\n                $dataSet->addPoint(new Point($row['input'], $row['COUNT(input)']));\n\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td>' . $row['COUNT(input)'] . '</td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n\n\n            //We set the bar chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(TOP_10_INPUT_OVERALL);\n            //For this particular graph we need to set the corrent padding\n            $chart->getPlot()->setGraphPadding(new Padding(5, 30, 90, 50)); //top, right, bottom, left | defaults: 5, 30, 50, 50\n            $chart->render(DIR_ROOT . \"/generated-graphs/top10_overall_input.png\");\n            echo '<p>This vertical bar chart visualizes the top 10 commands (overall) entered by attackers in the honeypot system.</p>';\n            echo '<img src=\"generated-graphs/top10_overall_input.png\">';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printTop10SuccessfulInput()\n    {\n        $db_query = \"SELECT input, COUNT(input)\n          FROM input\n          WHERE success = 1\n          GROUP BY input\n          ORDER BY COUNT(input) DESC\n          LIMIT 10\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new vertical bar chart and initialize the dataset\n            $chart = new VerticalBarChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Top 10 successful input</h3>';\n            echo '<p>The following table displays the top 10 successful commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=Successinput\">CSV of all successful commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Input (success)</th>';\n            echo '<th>Count</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach($rows as $row) {\n                $dataSet->addPoint(new Point($row['input'], $row['COUNT(input)']));\n\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td>' . $row['COUNT(input)'] . '</td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n\n            //We set the bar chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(TOP_10_SUCCESSFUL_INPUT);\n            //For this particular graph we need to set the corrent padding\n            $chart->getPlot()->setGraphPadding(new Padding(5, 30, 90, 50)); //top, right, bottom, left | defaults: 5, 30, 50, 50\n            $chart->render(DIR_ROOT . \"/generated-graphs/top10_successful_input.png\");\n            echo '<p>This vertical bar chart visualizes the top 10 successful commands entered by attackers in the honeypot system.</p>';\n            echo '<img src=\"generated-graphs/top10_successful_input.png\">';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printTop10FailedInput()\n    {\n        $db_query = \"SELECT input, COUNT(input)\n          FROM input\n          WHERE success = 0\n          GROUP BY input\n          ORDER BY COUNT(input) DESC\n          LIMIT 10\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new vertical bar chart and initialize the dataset\n            $chart = new VerticalBarChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Top 10 failed input</h3>';\n            echo '<p>The following table displays the top 10 failed commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=FailedInput\">CSV of all failed commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Input (fail)</th>';\n            echo '<th>Count</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach($rows as $row) {\n                $dataSet->addPoint(new Point($row['input'], $row['COUNT(input)']));\n\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td>' . $row['COUNT(input)'] . '</td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n\n            //We set the bar chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(TOP_10_FAILED_INPUT);\n            //For this particular graph we need to set the corrent padding\n            $chart->getPlot()->setGraphPadding(new Padding(5, 40, 120, 50)); //top, right, bottom, left | defaults: 5, 30, 50, 50\n            $chart->render(DIR_ROOT . \"/generated-graphs/top10_failed_input.png\");\n            echo '<p>This vertical bar chart visualizes the top 10 failed commands entered by attackers in the honeypot system.</p>';\n            echo '<img src=\"generated-graphs/top10_failed_input.png\">';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printPasswdCommands()\n    {\n        $db_query = \"SELECT timestamp, input, session\n          FROM input\n          WHERE realm like 'passwd'\n          GROUP BY input\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>passwd commands</h3>';\n            echo '<p>The following table displays the latest \"passwd\" commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=passwd\">CSV of all \"passwd\" commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>Play Log</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . date('l, d-M-Y, H:i A', strtotime($row['timestamp'])) . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printWgetCommands()\n    {\n        $db_query = \"SELECT input, TRIM(LEADING 'wget' FROM input) as file, timestamp, session\n          FROM input\n          WHERE input LIKE '%wget%' AND input NOT LIKE 'wget'\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>wget commands</h3>';\n            echo '<p>The following table displays the latest \"wget\" commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=wget\">CSV of all \"wget\" commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>File link</th>';\n            echo '<th>Play Log</th>';\n            echo '<th>Kippo-Scanner</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . $row['timestamp'] . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                $file_link = explode(\" \", trim($row['file']))[0];\n                // If the link has no \"http://\" in front, then add it\n                if (substr(strtolower($file_link), 0, 4) !== 'http') {\n                    $file_link = 'http://' . $file_link;\n                }\n                echo '<td><a href=\"http://anonym.to/?' . $file_link . '\" target=\"_blank\"><img class=\"icon\" src=\"images/warning.png\"/>http://anonym.to/?' . $file_link . '</a></td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '<td><a href=\"kippo-scanner.php?file_url=' . $file_link . '\" target=\"_blank\">Scan File</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printExecutedScripts()\n    {\n        $db_query = \"SELECT timestamp, input, session\n          FROM input\n          WHERE input like './%'\n          GROUP BY input\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Executed scripts</h3>';\n            echo '<p>The following table displays the latest executed scripts by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=Scripts\">CSV of all scripts executed</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>Play Log</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . date('l, d-M-Y, H:i A', strtotime($row['timestamp'])) . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printInterestingCommands()\n    {\n        $db_query = \"SELECT timestamp, input, session\n          FROM input\n          WHERE (input like '%cat%' OR input like '%dev%' OR input like '%man%' OR input like '%gpg%'\n          OR input like '%ping%' OR input like '%ssh%' OR input like '%scp%' OR input like '%whois%'\n          OR input like '%unset%' OR input like '%kill%' OR input like '%ifconfig%' OR input like '%iwconfig%'\n          OR input like '%traceroute%' OR input like '%screen%' OR input like '%user%')\n          AND input NOT like '%wget%' AND input NOT like '%apt-get%'\n          GROUP BY input\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Interesting commands</h3>';\n            echo '<p>The following table displays other interesting commands executed by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=Interesting\">CSV of all interesting commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>Play Log</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . date('l, d-M-Y, H:i A', strtotime($row['timestamp'])) . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printAptGetCommands()\n    {\n        $db_query = \"SELECT timestamp, input, session\n          FROM input\n          WHERE (input like '%apt-get install%' OR input like '%apt-get remove%'\n          OR input like '%aptitude install%' OR input like '%aptitude remove%')\n          AND input NOT LIKE 'apt-get' AND input NOT LIKE 'aptitude'\n          GROUP BY input\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>apt-get commands</h3>';\n            echo '<p>The following table displays the latest \"apt-get\"/\"aptitude\" commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=aptget\">CSV of all \"apt-get\"/\"aptitude\" commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>Play Log</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . date('l, d-M-Y, H:i A', strtotime($row['timestamp'])) . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n}\n\n?>\n", "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n    <title>Kippo-Graph | Fast Visualization for your Kippo SSH Honeypot Stats</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta http-equiv=\"imagetoolbar\" content=\"no\"/>\n    <link rel=\"stylesheet\" href=\"../styles/layout.css\" type=\"text/css\"/>\n    <link rel=\"stylesheet\" href=\"../styles/playlog.css\" type=\"text/css\">\n    <script type=\"text/javascript\" src=\"../scripts/jquery-1.4.4.min.js\"></script>\n    <script type=\"text/javascript\" src=\"../scripts/BinFileReader.js\"></script>\n    <script type=\"text/javascript\" src=\"../scripts/jquery.getUrlParam.js\"></script>\n</head>\n<body id=\"top\">\n<div class=\"wrapper\">\n    <div id=\"header\">\n        <h1><a href=\"../index.php\">Kippo-Graph</a></h1>\n        <br/>\n\n        <p>Fast Visualization for your Kippo SSH Honeypot Stats</p>\n    </div>\n</div>\n<!-- ####################################################################################################### -->\n<div class=\"wrapper\">\n    <div id=\"topbar\">\n        <div class=\"fl_left\">Version: 1.5 | Website: <a href=\"http://bruteforce.gr/kippo-graph\">bruteforce.gr/kippo-graph</a>\n        </div>\n        <br class=\"clear\"/>\n    </div>\n</div>\n<!-- ####################################################################################################### -->\n<div class=\"wrapper\">\n    <div id=\"topnav\">\n        <ul class=\"nav\">\n            <li><a href=\"../index.php\">Homepage</a></li>\n            <li><a href=\"../kippo-graph.php\">Kippo-Graph</a></li>\n            <li><a href=\"../kippo-input.php\">Kippo-Input</a></li>\n            <li class=\"active\"><a href=\"../kippo-playlog.php\">Kippo-PlayLog</a></li>\n            <li><a href=\"../kippo-ip.php\">Kippo-Ip</a></li>\n            <li><a href=\"../kippo-geo.php\">Kippo-Geo</a></li>\n            <li class=\"last\"><a href=\"../gallery.php\">Graph Gallery</a></li>\n        </ul>\n        <div class=\"clear\"></div>\n    </div>\n</div>\n<!-- ####################################################################################################### -->\n<div class=\"wrapper\">\n    <div class=\"container\">\n        <div class=\"whitebox\">\n            <!-- ####################################################################################################### -->\n            <h2>Kippo TTY log</h2>\n            <hr/>\n            <?php\n            # Author: ikoniaris, CCoffie\n\n            require_once('../config.php');\n            require_once(DIR_ROOT . '/include/rb.php');\n            require_once(DIR_ROOT . '/include/misc/xss_clean.php');\n            require_once(DIR_ROOT . '/include/maxmind/geoip2.phar');\n            require_once(DIR_ROOT . '/include/geoplugin/geoplugin.class.php');\n\n            R::setup('mysql:host=' . DB_HOST . ';port=' . DB_PORT . ';dbname=' . DB_NAME, DB_USER, DB_PASS);\n\n            $session = preg_replace('/[^-a-zA-Z0-9_]/', '', xss_clean($_GET['f']));\n\n            $db_query = \"SELECT ttylog, session FROM ttylog WHERE session='$session'\";\n\n            $rows = R::getAll($db_query);\n\n            foreach ($rows as $row) {\n                $log = base64_encode($row['ttylog']);\n            }\n\n            $db_query = \"SELECT ip, starttime FROM sessions WHERE id='$session'\";\n\n            $rows = R::getAll($db_query);\n\n            foreach ($rows as $row) {\n                $ip = $row['ip'];\n                $starttime = $row['starttime'];\n            }\n\n            echo \"IP: <b>\" . $ip . \"</b> on \" . str_replace(\".000000\", \"\", $starttime) . \"<br /><br />\";\n            ?>\n\n            <!-- Pass PHP variables to javascript - Please ignore the below section -->\n            <script type=\"text/javascript\">\n                var log = \"<?php echo $log; ?>\";\n            </script>\n            <script type=\"text/javascript\" src=\"../scripts/jspl.js\"></script>\n\n            <noscript>Please enable Javascript for log playback.<br/><br/></noscript>\n            <div id=\"description\">Error loading specified log.</div>\n            <br/>\n\n            <div id=\"playlog\"></div>\n            <br/><br/>\n\n            <h3>Downloaded files:</h3>\n            <?php\n\n            $db_query = \"SELECT input, TRIM(LEADING 'wget' FROM input) as file, timestamp, session\n\t\t\t\t  FROM input\n\t\t\t\t  WHERE input LIKE '%wget%' AND input NOT LIKE 'wget' AND session = '$session'\n\t\t\t\t  ORDER BY timestamp DESC\";\n\n            $rows = R::getAll($db_query);\n\n            if (count($rows)) {\n                //We create a skeleton for the table\n                $counter = 1;\n                echo '<table><thead>';\n                echo '<tr class=\"dark\">';\n                echo '<th>ID</th>';\n                echo '<th>Timestamp</th>';\n                echo '<th>Input</th>';\n                echo '<th>File link</th>';\n                echo '<th>Kippo-Scanner</th>';\n                echo '</tr></thead><tbody>';\n\n                //For every row returned from the database we create a new table row with the data as columns\n                foreach ($rows as $row) {\n                    echo '<tr class=\"light word-break\">';\n                    echo '<td>' . $counter . '</td>';\n                    echo '<td>' . $row['timestamp'] . '</td>';\n                    echo '<td>' . xss_clean($row['input']) . '</td>';\n                    $file_link = trim($row['file']);\n                    // If the link has no \"http://\" in front, then add it\n                    if (substr(strtolower($file_link), 0, 4) !== 'http') {\n                        $file_link = 'http://' . $file_link;\n                    }\n                    echo '<td><a href=\"http://anonym.to/?' . $file_link . '\" target=\"_blank\"><img class=\"icon\" src=\"../images/warning.png\"/>http://anonym.to/?' . $file_link . '</a></td>';\n                    echo '<td><a href=\"../kippo-scanner.php?file_url=' . $file_link . '\" target=\"_blank\">Scan File</a></td>';\n                    echo '</tr>';\n                    $counter++;\n                }\n\n                //Close tbody and table element, it's ready.\n                echo '</tbody></table>';\n                echo '<hr /><br />';\n            } else {\n                echo \"No files have been downloaded in this session.<br /><br />\";\n            }\n\n            R::close();\n\n            ?>\n            <?php\n            //Additional information about IP address\n            if (!empty($ip) && filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n                if (function_exists('exec')) {\n                    exec(\"dig -x \" . $ip . \" +additional @8.8.8.8 2>&1\", $dig, $returnValue);\n                    exec(\"host \" . $ip . \" 2>&1\", $host, $returnValue);\n                }\n\n                if (!empty($host) || !empty($dig)) {\n\n                    echo \"<h3>Additional information about IP:</h3>\";\n\n                    if (!empty($dig)) {\n                        echo \"<b>dig</b> data:<br />\\n\";\n                        echo \"<pre>\";\n                        foreach ($dig as $parse) {\n                            echo $parse . \"\\n\";\n                        }\n                        echo \"</pre>\\n\\n\";\n                    }\n                    if (!empty($host)) {\n                        echo \"<b>host</b> data:<br />\\n\";\n                        echo \"<pre>\";\n                        foreach ($host as $parse) {\n                            echo $parse . \"\\n\";\n                        }\n                        echo \"</pre>\\n\\n\";\n                    }\n                }\n\n                //Geolocate the IP\n                $latitude = NULL;\n                $longitude = NULL;\n                if (GEO_METHOD == 'LOCAL') {\n                    $maxmind = new \\GeoIp2\\Database\\Reader(DIR_ROOT . '/include/maxmind/GeoLite2-City.mmdb');\n                    try {\n                        $geodata = $maxmind->city($ip);\n                        $latitude = $geodata->location->latitude;\n                        $longitude = $geodata->location->longitude;\n                    } catch (\\GeoIp2\\Exception\\GeoIp2Exception $e) {\n                        echo \"<br />Unable to geolocate IP using MaxMind.\";\n                    }\n                } else if (GEO_METHOD == 'GEOPLUGIN') {\n                    $geoplugin = new geoPlugin();\n                    $geoplugin->locate($ip);\n                    $latitude = $geoplugin->latitude;\n                    $longitude = $geoplugin->longitude;\n                }\n\n                //If geolocation succeeded show Google Map\n                if ($latitude && $longitude) {\n                    ?>\n\n                    <br/>Google Map:<br/>\n\n                    <div id=\"map\" style=\"width:100%;height:400px;margin-top:10px;\"></div>\n\n                    <script type=\"text/javascript\" src=\"//maps.google.com/maps/api/js?sensor=false\"></script>\n                    <script type=\"text/javascript\">\n\n                        // Define the latitude and longitude positions\n                        var latitude = parseFloat(\"<?php echo $latitude; ?>\");\n                        var longitude = parseFloat(\"<?php echo $longitude; ?>\");\n                        var latlngPos = new google.maps.LatLng(latitude, longitude);\n\n                        // Set up options for the Google map\n                        var myOptions = {\n                            zoom: 8,\n                            center: latlngPos,\n                            mapTypeId: google.maps.MapTypeId.ROADMAP\n                        };\n\n                        // Define the map\n                        map = new google.maps.Map(document.getElementById(\"map\"), myOptions);\n\n                        // Add the marker\n                        var marker = new google.maps.Marker({\n                            position: latlngPos,\n                            map: map,\n                            title: \"Attacker\"\n                        });\n\n                    </script>\n                <?php\n                } //google map\n            } //additional IP info\n            ?>\n\n            <!-- ####################################################################################################### -->\n            <div class=\"clear\"></div>\n        </div>\n    </div>\n</div>\n<!-- ####################################################################################################### -->\n<div class=\"wrapper\">\n    <div id=\"copyright\">\n        <p class=\"fl_left\">Copyright &copy; 2011 - 2015 - All Rights Reserved - <a\n                href=\"http://bruteforce.gr/kippo-graph\">Kippo-Graph</a></p>\n\n        <p class=\"fl_right\">Thanks to <a href=\"http://www.os-templates.com/\" title=\"Free Website Templates\">OS\n                Templates</a></p>\n        <br class=\"clear\"/>\n    </div>\n</div>\n<script type=\"text/javascript\" src=\"../scripts/superfish.js\"></script>\n<script type=\"text/javascript\">\n    jQuery(function () {\n        {\n            {\n                jQuery('ul.nav').superfish();\n            }\n        }\n    }\n</script>\n</body>\n</html>\n"], "fixing_code": ["<?php\nrequire_once(DIR_ROOT . '/include/rb.php');\nrequire_once(DIR_ROOT . '/include/libchart/classes/libchart.php');\nrequire_once(DIR_ROOT . '/include/misc/xss_clean.php');\n\nclass KippoInput\n{\n\n    function __construct()\n    {\n        //Let's connect to the database\n        R::setup('mysql:host=' . DB_HOST . ';port=' . DB_PORT . ';dbname=' . DB_NAME, DB_USER, DB_PASS);\n    }\n\n    function __destruct()\n    {\n        R::close();\n    }\n\n    public function printOverallHoneypotActivity()\n    {\n        echo '<h3>Overall post-compromise activity</h3>';\n\n        //TOTAL NUMBER OF COMMANDS\n        $db_query = \"SELECT COUNT(*) as total, COUNT(DISTINCT input) as uniq FROM input\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th colspan=\"2\">Post-compromise human activity</th>';\n            echo '</tr>';\n            echo '<tr class=\"dark\">';\n            echo '<th>Total number of commands</th>';\n            echo '<th>Distinct number of commands</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach ($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $row['total'] . '</td>';\n                echo '<td>' . $row['uniq'] . '</td>';\n                echo '</tr>';\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n        }\n\n        //TOTAL DOWNLOADED FILES\n        $db_query = \"SELECT COUNT(*) as files, COUNT(DISTINCT input) as uniq_files\n          FROM input WHERE input LIKE '%wget%' AND input NOT LIKE 'wget'\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th colspan=\"2\">Downloaded files</th>';\n            echo '</tr>';\n            echo '<tr class=\"dark\">';\n            echo '<th>Total number of downloads</th>';\n            echo '<th>Distinct number of downloads</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach ($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $row['files'] . '</td>';\n                echo '<td>' . $row['uniq_files'] . '</td>';\n                echo '</tr>';\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n        }\n\n        echo '<hr /><br />';\n    }\n\n    public function printHumanActivityBusiestDays()\n    {\n        $db_query = \"SELECT COUNT(input), timestamp\n          FROM input\n          GROUP BY DAYOFYEAR(timestamp)\n          ORDER BY COUNT(input) DESC\n          LIMIT 20 \";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new vertical bar chart and initialize the dataset\n            $chart_vertical = new VerticalBarChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //For every row returned from the database we add a new point to the dataset\n            foreach ($rows as $row) {\n                $dataSet->addPoint(new Point(date('d-m-Y', strtotime($row['timestamp'])), $row['COUNT(input)']));\n            }\n\n            //We set the vertical bar chart's dataset and render the graph\n            $chart_vertical->setDataSet($dataSet);\n            $chart_vertical->setTitle(HUMAN_ACTIVITY_BUSIEST_DAYS);\n            $chart_vertical->render(DIR_ROOT . \"/generated-graphs/human_activity_busiest_days.png\");\n            echo '<h3>Human activity inside the honeypot</h3>';\n            echo '<p>The following vertical bar chart visualizes the top 20 busiest days of real human activity, by counting the number of input to the system.</p>';\n            echo '<img src=\"generated-graphs/human_activity_busiest_days.png\">';\n            echo '<br />';\n        }\n    }\n\n    public function printHumanActivityPerDay()\n    {\n        $db_query = \"SELECT COUNT(input), timestamp\n          FROM input\n          GROUP BY DAYOFYEAR(timestamp)\n          ORDER BY timestamp ASC \";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new line chart and initialize the dataset\n            $chart = new LineChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //This graph gets messed up for large DBs, so here is a simple way to limit some of the input\n            $counter = 1;\n            //Display date legend only every $mod rows, 25 distinct values being the optimal for a graph\n            $mod = round(count($rows) / 25);\n            if ($mod == 0) $mod = 1; //otherwise a division by zero might happen below\n            //For every row returned from the database we add a new point to the dataset\n            foreach ($rows as $row) {\n                if ($counter % $mod == 0) {\n                    $dataSet->addPoint(new Point(date('d-m-Y', strtotime($row['timestamp'])), $row['COUNT(input)']));\n                } else {\n                    $dataSet->addPoint(new Point('', $row['COUNT(input)']));\n                }\n                $counter++;\n            }\n\n            //We set the line chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(HUMAN_ACTIVITY_PER_DAY);\n            $chart->render(DIR_ROOT . \"/generated-graphs/human_activity_per_day.png\");\n            echo '<p>The following line chart visualizes real human activity per day, by counting the number of input to the system for each day of operation.\n\t\t\t<br/><strong>Warning:</strong> Dates with zero input are not displayed.</p>';\n            echo '<img src=\"generated-graphs/human_activity_per_day.png\">';\n            echo '<br />';\n        }\n    }\n\n    public function printHumanActivityPerWeek()\n    {\n        $db_query = \"SELECT COUNT(input), MAKEDATE(\n          CASE\n          WHEN WEEKOFYEAR(timestamp) = 52\n          THEN YEAR(timestamp)-1\n          ELSE YEAR(timestamp)\n          END, (WEEKOFYEAR(timestamp) * 7)-4) AS DateOfWeek_Value\n          FROM input\n          GROUP BY WEEKOFYEAR(timestamp)\n          ORDER BY timestamp ASC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new line chart and initialize the dataset\n            $chart = new LineChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //This graph gets messed up for large DBs, so here is a simple way to limit some of the input\n            $counter = 1;\n            //Display date legend only every $mod rows, 25 distinct values being the optimal for a graph\n            $mod = round(count($rows) / 25);\n            if ($mod == 0) $mod = 1; //otherwise a division by zero might happen below\n            //For every row returned from the database we add a new point to the dataset\n            foreach ($rows as $row) {\n                if ($counter % $mod == 0) {\n                    $dataSet->addPoint(new Point(date('d-m-Y', strtotime($row['DateOfWeek_Value'])), $row['COUNT(input)']));\n                } else {\n                    $dataSet->addPoint(new Point('', $row['COUNT(input)']));\n                }\n                $counter++;\n\n                //We add 6 \"empty\" points to make a horizontal line representing a week\n                for ($i = 0; $i < 6; $i++) {\n                    $dataSet->addPoint(new Point('', $row['COUNT(input)']));\n                }\n            }\n\n            //We set the line chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(HUMAN_ACTIVITY_PER_WEEK);\n            $chart->render(DIR_ROOT . \"/generated-graphs/human_activity_per_week.png\");\n            echo '<p>The following line chart visualizes real human activity per week, by counting the number of input to the system for each day of operation.</p>';\n            echo '<img src=\"generated-graphs/human_activity_per_week.png\">';\n            echo '<br /><hr /><br />';\n        }\n    }\n\n    public function printTop10OverallInput()\n    {\n        $db_query = \"SELECT input, COUNT(input)\n          FROM input\n          GROUP BY input\n          ORDER BY COUNT(input) DESC\n          LIMIT 10\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new vertical bar chart and initialize the dataset\n            $chart = new VerticalBarChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Top 10 input (overall)</h3>';\n            echo '<p>The following table displays the top 10 commands (overall) entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=Input\">CSV of all input commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Input</th>';\n            echo '<th>Count</th>';\n            echo '</tr></thead><tbody>';\n\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach ($rows as $row) {\n                $dataSet->addPoint(new Point($row['input'], $row['COUNT(input)']));\n\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td>' . $row['COUNT(input)'] . '</td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n\n\n            //We set the bar chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(TOP_10_INPUT_OVERALL);\n            //For this particular graph we need to set the corrent padding\n            $chart->getPlot()->setGraphPadding(new Padding(5, 30, 90, 50)); //top, right, bottom, left | defaults: 5, 30, 50, 50\n            $chart->render(DIR_ROOT . \"/generated-graphs/top10_overall_input.png\");\n            echo '<p>This vertical bar chart visualizes the top 10 commands (overall) entered by attackers in the honeypot system.</p>';\n            echo '<img src=\"generated-graphs/top10_overall_input.png\">';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printTop10SuccessfulInput()\n    {\n        $db_query = \"SELECT input, COUNT(input)\n          FROM input\n          WHERE success = 1\n          GROUP BY input\n          ORDER BY COUNT(input) DESC\n          LIMIT 10\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new vertical bar chart and initialize the dataset\n            $chart = new VerticalBarChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Top 10 successful input</h3>';\n            echo '<p>The following table displays the top 10 successful commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=Successinput\">CSV of all successful commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Input (success)</th>';\n            echo '<th>Count</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach($rows as $row) {\n                $dataSet->addPoint(new Point($row['input'], $row['COUNT(input)']));\n\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td>' . $row['COUNT(input)'] . '</td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n\n            //We set the bar chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(TOP_10_SUCCESSFUL_INPUT);\n            //For this particular graph we need to set the corrent padding\n            $chart->getPlot()->setGraphPadding(new Padding(5, 30, 90, 50)); //top, right, bottom, left | defaults: 5, 30, 50, 50\n            $chart->render(DIR_ROOT . \"/generated-graphs/top10_successful_input.png\");\n            echo '<p>This vertical bar chart visualizes the top 10 successful commands entered by attackers in the honeypot system.</p>';\n            echo '<img src=\"generated-graphs/top10_successful_input.png\">';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printTop10FailedInput()\n    {\n        $db_query = \"SELECT input, COUNT(input)\n          FROM input\n          WHERE success = 0\n          GROUP BY input\n          ORDER BY COUNT(input) DESC\n          LIMIT 10\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a new vertical bar chart and initialize the dataset\n            $chart = new VerticalBarChart(600, 300);\n            $dataSet = new XYDataSet();\n\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Top 10 failed input</h3>';\n            echo '<p>The following table displays the top 10 failed commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=FailedInput\">CSV of all failed commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Input (fail)</th>';\n            echo '<th>Count</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we add a new point to the dataset,\n            //and create a new table row with the data as columns\n            foreach($rows as $row) {\n                $dataSet->addPoint(new Point($row['input'], $row['COUNT(input)']));\n\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td>' . $row['COUNT(input)'] . '</td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n\n            //We set the bar chart's dataset and render the graph\n            $chart->setDataSet($dataSet);\n            $chart->setTitle(TOP_10_FAILED_INPUT);\n            //For this particular graph we need to set the corrent padding\n            $chart->getPlot()->setGraphPadding(new Padding(5, 40, 120, 50)); //top, right, bottom, left | defaults: 5, 30, 50, 50\n            $chart->render(DIR_ROOT . \"/generated-graphs/top10_failed_input.png\");\n            echo '<p>This vertical bar chart visualizes the top 10 failed commands entered by attackers in the honeypot system.</p>';\n            echo '<img src=\"generated-graphs/top10_failed_input.png\">';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printPasswdCommands()\n    {\n        $db_query = \"SELECT timestamp, input, session\n          FROM input\n          WHERE realm like 'passwd'\n          GROUP BY input\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>passwd commands</h3>';\n            echo '<p>The following table displays the latest \"passwd\" commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=passwd\">CSV of all \"passwd\" commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>Play Log</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . date('l, d-M-Y, H:i A', strtotime($row['timestamp'])) . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printWgetCommands()\n    {\n        $db_query = \"SELECT input, TRIM(LEADING 'wget' FROM input) as file, timestamp, session\n          FROM input\n          WHERE input LIKE '%wget%' AND input NOT LIKE 'wget'\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>wget commands</h3>';\n            echo '<p>The following table displays the latest \"wget\" commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=wget\">CSV of all \"wget\" commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>File link</th>';\n            echo '<th>Play Log</th>';\n            echo '<th>Kippo-Scanner</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . $row['timestamp'] . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                $file_link = explode(\" \", trim(xss_clean($row['file'])))[0];\n                // If the link has no \"http://\" in front, then add it\n                if (substr(strtolower($file_link), 0, 4) !== 'http') {\n                    $file_link = 'http://' . $file_link;\n                }\n                echo '<td><a href=\"http://anonym.to/?' . $file_link . '\" target=\"_blank\"><img class=\"icon\" src=\"images/warning.png\"/>http://anonym.to/?' . $file_link . '</a></td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '<td><a href=\"kippo-scanner.php?file_url=' . $file_link . '\" target=\"_blank\">Scan File</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printExecutedScripts()\n    {\n        $db_query = \"SELECT timestamp, input, session\n          FROM input\n          WHERE input like './%'\n          GROUP BY input\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Executed scripts</h3>';\n            echo '<p>The following table displays the latest executed scripts by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=Scripts\">CSV of all scripts executed</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>Play Log</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . date('l, d-M-Y, H:i A', strtotime($row['timestamp'])) . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printInterestingCommands()\n    {\n        $db_query = \"SELECT timestamp, input, session\n          FROM input\n          WHERE (input like '%cat%' OR input like '%dev%' OR input like '%man%' OR input like '%gpg%'\n          OR input like '%ping%' OR input like '%ssh%' OR input like '%scp%' OR input like '%whois%'\n          OR input like '%unset%' OR input like '%kill%' OR input like '%ifconfig%' OR input like '%iwconfig%'\n          OR input like '%traceroute%' OR input like '%screen%' OR input like '%user%')\n          AND input NOT like '%wget%' AND input NOT like '%apt-get%'\n          GROUP BY input\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>Interesting commands</h3>';\n            echo '<p>The following table displays other interesting commands executed by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=Interesting\">CSV of all interesting commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>Play Log</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . date('l, d-M-Y, H:i A', strtotime($row['timestamp'])) . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n    public function printAptGetCommands()\n    {\n        $db_query = \"SELECT timestamp, input, session\n          FROM input\n          WHERE (input like '%apt-get install%' OR input like '%apt-get remove%'\n          OR input like '%aptitude install%' OR input like '%aptitude remove%')\n          AND input NOT LIKE 'apt-get' AND input NOT LIKE 'aptitude'\n          GROUP BY input\n          ORDER BY timestamp DESC\";\n\n        $rows = R::getAll($db_query);\n\n        if (count($rows)) {\n            //We create a skeleton for the table\n            $counter = 1;\n            echo '<h3>apt-get commands</h3>';\n            echo '<p>The following table displays the latest \"apt-get\"/\"aptitude\" commands entered by attackers in the honeypot system.</p>';\n            echo '<p><a href=\"include/export.php?type=aptget\">CSV of all \"apt-get\"/\"aptitude\" commands</a><p>';\n            echo '<table><thead>';\n            echo '<tr class=\"dark\">';\n            echo '<th>ID</th>';\n            echo '<th>Timestamp</th>';\n            echo '<th>Input</th>';\n            echo '<th>Play Log</th>';\n            echo '</tr></thead><tbody>';\n\n            //For every row returned from the database we create a new table row with the data as columns\n            foreach($rows as $row) {\n                echo '<tr class=\"light word-break\">';\n                echo '<td>' . $counter . '</td>';\n                echo '<td>' . date('l, d-M-Y, H:i A', strtotime($row['timestamp'])) . '</td>';\n                echo '<td>' . xss_clean($row['input']) . '</td>';\n                echo '<td><a href=\"include/play.php?f=' . $row['session'] . '\" target=\"_blank\"><img class=\"icon\" src=\"images/play.ico\"/>Play</a></td>';\n                echo '</tr>';\n                $counter++;\n            }\n\n            //Close tbody and table element, it's ready.\n            echo '</tbody></table>';\n            echo '<hr /><br />';\n        }\n    }\n\n}\n\n?>\n", "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n<head profile=\"http://gmpg.org/xfn/11\">\n    <title>Kippo-Graph | Fast Visualization for your Kippo SSH Honeypot Stats</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\n    <meta http-equiv=\"imagetoolbar\" content=\"no\"/>\n    <link rel=\"stylesheet\" href=\"../styles/layout.css\" type=\"text/css\"/>\n    <link rel=\"stylesheet\" href=\"../styles/playlog.css\" type=\"text/css\">\n    <script type=\"text/javascript\" src=\"../scripts/jquery-1.4.4.min.js\"></script>\n    <script type=\"text/javascript\" src=\"../scripts/BinFileReader.js\"></script>\n    <script type=\"text/javascript\" src=\"../scripts/jquery.getUrlParam.js\"></script>\n</head>\n<body id=\"top\">\n<div class=\"wrapper\">\n    <div id=\"header\">\n        <h1><a href=\"../index.php\">Kippo-Graph</a></h1>\n        <br/>\n\n        <p>Fast Visualization for your Kippo SSH Honeypot Stats</p>\n    </div>\n</div>\n<!-- ####################################################################################################### -->\n<div class=\"wrapper\">\n    <div id=\"topbar\">\n        <div class=\"fl_left\">Version: 1.5 | Website: <a href=\"http://bruteforce.gr/kippo-graph\">bruteforce.gr/kippo-graph</a>\n        </div>\n        <br class=\"clear\"/>\n    </div>\n</div>\n<!-- ####################################################################################################### -->\n<div class=\"wrapper\">\n    <div id=\"topnav\">\n        <ul class=\"nav\">\n            <li><a href=\"../index.php\">Homepage</a></li>\n            <li><a href=\"../kippo-graph.php\">Kippo-Graph</a></li>\n            <li><a href=\"../kippo-input.php\">Kippo-Input</a></li>\n            <li class=\"active\"><a href=\"../kippo-playlog.php\">Kippo-PlayLog</a></li>\n            <li><a href=\"../kippo-ip.php\">Kippo-Ip</a></li>\n            <li><a href=\"../kippo-geo.php\">Kippo-Geo</a></li>\n            <li class=\"last\"><a href=\"../gallery.php\">Graph Gallery</a></li>\n        </ul>\n        <div class=\"clear\"></div>\n    </div>\n</div>\n<!-- ####################################################################################################### -->\n<div class=\"wrapper\">\n    <div class=\"container\">\n        <div class=\"whitebox\">\n            <!-- ####################################################################################################### -->\n            <h2>Kippo TTY log</h2>\n            <hr/>\n            <?php\n            # Author: ikoniaris, CCoffie\n\n            require_once('../config.php');\n            require_once(DIR_ROOT . '/include/rb.php');\n            require_once(DIR_ROOT . '/include/misc/xss_clean.php');\n            require_once(DIR_ROOT . '/include/maxmind/geoip2.phar');\n            require_once(DIR_ROOT . '/include/geoplugin/geoplugin.class.php');\n\n            R::setup('mysql:host=' . DB_HOST . ';port=' . DB_PORT . ';dbname=' . DB_NAME, DB_USER, DB_PASS);\n\n            $session = preg_replace('/[^-a-zA-Z0-9_]/', '', xss_clean($_GET['f']));\n\n            $db_query = \"SELECT ttylog, session FROM ttylog WHERE session='$session'\";\n\n            $rows = R::getAll($db_query);\n\n            foreach ($rows as $row) {\n                $log = base64_encode($row['ttylog']);\n            }\n\n            $db_query = \"SELECT ip, starttime FROM sessions WHERE id='$session'\";\n\n            $rows = R::getAll($db_query);\n\n            foreach ($rows as $row) {\n                $ip = $row['ip'];\n                $starttime = $row['starttime'];\n            }\n\n            echo \"IP: <b>\" . $ip . \"</b> on \" . str_replace(\".000000\", \"\", $starttime) . \"<br /><br />\";\n            ?>\n\n            <!-- Pass PHP variables to javascript - Please ignore the below section -->\n            <script type=\"text/javascript\">\n                var log = \"<?php echo $log; ?>\";\n            </script>\n            <script type=\"text/javascript\" src=\"../scripts/jspl.js\"></script>\n\n            <noscript>Please enable Javascript for log playback.<br/><br/></noscript>\n            <div id=\"description\">Error loading specified log.</div>\n            <br/>\n\n            <div id=\"playlog\"></div>\n            <br/><br/>\n\n            <h3>Downloaded files:</h3>\n            <?php\n\n            $db_query = \"SELECT input, TRIM(LEADING 'wget' FROM input) as file, timestamp, session\n\t\t\t\t  FROM input\n\t\t\t\t  WHERE input LIKE '%wget%' AND input NOT LIKE 'wget' AND session = '$session'\n\t\t\t\t  ORDER BY timestamp DESC\";\n\n            $rows = R::getAll($db_query);\n\n            if (count($rows)) {\n                //We create a skeleton for the table\n                $counter = 1;\n                echo '<table><thead>';\n                echo '<tr class=\"dark\">';\n                echo '<th>ID</th>';\n                echo '<th>Timestamp</th>';\n                echo '<th>Input</th>';\n                echo '<th>File link</th>';\n                echo '<th>Kippo-Scanner</th>';\n                echo '</tr></thead><tbody>';\n\n                //For every row returned from the database we create a new table row with the data as columns\n                foreach ($rows as $row) {\n                    echo '<tr class=\"light word-break\">';\n                    echo '<td>' . $counter . '</td>';\n                    echo '<td>' . $row['timestamp'] . '</td>';\n                    echo '<td>' . xss_clean($row['input']) . '</td>';\n                    $file_link = explode(\" \", trim(xss_clean($row['file'])))[0];\n                    // If the link has no \"http://\" in front, then add it\n                    if (substr(strtolower($file_link), 0, 4) !== 'http') {\n                        $file_link = 'http://' . $file_link;\n                    }\n                    echo '<td><a href=\"http://anonym.to/?' . $file_link . '\" target=\"_blank\"><img class=\"icon\" src=\"../images/warning.png\"/>http://anonym.to/?' . $file_link . '</a></td>';\n                    echo '<td><a href=\"../kippo-scanner.php?file_url=' . $file_link . '\" target=\"_blank\">Scan File</a></td>';\n                    echo '</tr>';\n                    $counter++;\n                }\n\n                //Close tbody and table element, it's ready.\n                echo '</tbody></table>';\n                echo '<hr /><br />';\n            } else {\n                echo \"No files have been downloaded in this session.<br /><br />\";\n            }\n\n            R::close();\n\n            ?>\n            <?php\n            //Additional information about IP address\n            if (!empty($ip) && filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n                if (function_exists('exec')) {\n                    exec(\"dig -x \" . $ip . \" +additional @8.8.8.8 2>&1\", $dig, $returnValue);\n                    exec(\"host \" . $ip . \" 2>&1\", $host, $returnValue);\n                }\n\n                if (!empty($host) || !empty($dig)) {\n\n                    echo \"<h3>Additional information about IP:</h3>\";\n\n                    if (!empty($dig)) {\n                        echo \"<b>dig</b> data:<br />\\n\";\n                        echo \"<pre>\";\n                        foreach ($dig as $parse) {\n                            echo $parse . \"\\n\";\n                        }\n                        echo \"</pre>\\n\\n\";\n                    }\n                    if (!empty($host)) {\n                        echo \"<b>host</b> data:<br />\\n\";\n                        echo \"<pre>\";\n                        foreach ($host as $parse) {\n                            echo $parse . \"\\n\";\n                        }\n                        echo \"</pre>\\n\\n\";\n                    }\n                }\n\n                //Geolocate the IP\n                $latitude = NULL;\n                $longitude = NULL;\n                if (GEO_METHOD == 'LOCAL') {\n                    $maxmind = new \\GeoIp2\\Database\\Reader(DIR_ROOT . '/include/maxmind/GeoLite2-City.mmdb');\n                    try {\n                        $geodata = $maxmind->city($ip);\n                        $latitude = $geodata->location->latitude;\n                        $longitude = $geodata->location->longitude;\n                    } catch (\\GeoIp2\\Exception\\GeoIp2Exception $e) {\n                        echo \"<br />Unable to geolocate IP using MaxMind.\";\n                    }\n                } else if (GEO_METHOD == 'GEOPLUGIN') {\n                    $geoplugin = new geoPlugin();\n                    $geoplugin->locate($ip);\n                    $latitude = $geoplugin->latitude;\n                    $longitude = $geoplugin->longitude;\n                }\n\n                //If geolocation succeeded show Google Map\n                if ($latitude && $longitude) {\n                    ?>\n\n                    <br/>Google Map:<br/>\n\n                    <div id=\"map\" style=\"width:100%;height:400px;margin-top:10px;\"></div>\n\n                    <script type=\"text/javascript\" src=\"//maps.google.com/maps/api/js?sensor=false\"></script>\n                    <script type=\"text/javascript\">\n\n                        // Define the latitude and longitude positions\n                        var latitude = parseFloat(\"<?php echo $latitude; ?>\");\n                        var longitude = parseFloat(\"<?php echo $longitude; ?>\");\n                        var latlngPos = new google.maps.LatLng(latitude, longitude);\n\n                        // Set up options for the Google map\n                        var myOptions = {\n                            zoom: 8,\n                            center: latlngPos,\n                            mapTypeId: google.maps.MapTypeId.ROADMAP\n                        };\n\n                        // Define the map\n                        map = new google.maps.Map(document.getElementById(\"map\"), myOptions);\n\n                        // Add the marker\n                        var marker = new google.maps.Marker({\n                            position: latlngPos,\n                            map: map,\n                            title: \"Attacker\"\n                        });\n\n                    </script>\n                <?php\n                } //google map\n            } //additional IP info\n            ?>\n\n            <!-- ####################################################################################################### -->\n            <div class=\"clear\"></div>\n        </div>\n    </div>\n</div>\n<!-- ####################################################################################################### -->\n<div class=\"wrapper\">\n    <div id=\"copyright\">\n        <p class=\"fl_left\">Copyright &copy; 2011 - 2015 - All Rights Reserved - <a\n                href=\"http://bruteforce.gr/kippo-graph\">Kippo-Graph</a></p>\n\n        <p class=\"fl_right\">Thanks to <a href=\"http://www.os-templates.com/\" title=\"Free Website Templates\">OS\n                Templates</a></p>\n        <br class=\"clear\"/>\n    </div>\n</div>\n<script type=\"text/javascript\" src=\"../scripts/superfish.js\"></script>\n<script type=\"text/javascript\">\n    jQuery(function () {\n        {\n            {\n                jQuery('ul.nav').superfish();\n            }\n        }\n    }\n</script>\n</body>\n</html>\n"], "filenames": ["class/KippoInput.class.php", "include/play.php"], "buggy_code_start_loc": [447, 126], "buggy_code_end_loc": [448, 127], "fixing_code_start_loc": [447, 126], "fixing_code_end_loc": [448, 127], "type": "CWE-79", "message": "In kippo-graph before version 1.5.1, there is a cross-site scripting vulnerability in $file_link in class/KippoInput.class.php.", "other": {"cve": {"id": "CVE-2016-2139", "sourceIdentifier": "secalert@redhat.com", "published": "2022-07-28T15:15:07.087", "lastModified": "2022-08-04T17:13:19.607", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In kippo-graph before version 1.5.1, there is a cross-site scripting vulnerability in $file_link in class/KippoInput.class.php."}, {"lang": "es", "value": "En kippo-graph versiones anteriores a 1.5.1, se presenta una vulnerabilidad de tipo cross-site scripting en la funci\u00f3n $file_link en el archivo class/KippoInput.class.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.1, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kippo-graph_project:kippo-graph:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.5.1", "matchCriteriaId": "B085FABC-D5D5-423A-AF92-860DCD72171D"}]}]}], "references": [{"url": "https://github.com/ikoniaris/kippo-graph/commit/e6587ec598902763110b70c8bd0a72f7951b4997", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ikoniaris/kippo-graph/issues/35", "source": "secalert@redhat.com", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ikoniaris/kippo-graph/commit/e6587ec598902763110b70c8bd0a72f7951b4997"}}