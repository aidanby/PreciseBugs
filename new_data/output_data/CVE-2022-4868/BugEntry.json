{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Cronjobs;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif ($page == 'cronjobs' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'viewed admin_cronjobs');\n\n\t\ttry {\n\t\t\t$cron_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.cronjobs.php';\n\t\t\t$collection = (new Collection(Cronjobs::class, $userinfo))\n\t\t\t\t->withPagination($cron_list_data['cron_list']['columns'], $cron_list_data['cron_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table-note.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $cron_list_data, 'cron_list'),\n\t\t\t// alert-box\n\t\t\t'type' => 'warning',\n\t\t\t'alert_msg' => lng('cron.changewarning')\n\t\t]);\n\t} elseif ($action == 'new') {\n\t\t/*\n\t\t * @TODO later\n\t\t */\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Cronjobs::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\tif ($result['cronfile'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCronjobs::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$cronjobs_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/cronjobs/formfield.cronjobs_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'cronjobs', 'id' => $id]),\n\t\t\t\t\t'formdata' => $cronjobs_edit_data['cronjobs_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\t/*\n\t\t * @TODO later\n\t\t */\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\IpsAndPorts;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif ($page == 'ipsandports' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_ipsandports\");\n\n\t\ttry {\n\t\t\t$ipsandports_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.ipsandports.php';\n\t\t\t$collection = (new Collection(IpsAndPorts::class, $userinfo))\n\t\t\t\t->withPagination($ipsandports_list_data['ipsandports_list']['columns'], $ipsandports_list_data['ipsandports_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $ipsandports_list_data, 'ipsandports_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'ipsandports', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.ipsandports.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = IpsAndPorts::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tIpsAndPorts::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_ip_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['ip'] . ':' . $result['port']);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tIpsAndPorts::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$ipsandports_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/ipsandports/formfield.ipsandports_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'ipsandports']),\n\t\t\t\t'formdata' => $ipsandports_add_data['ipsandports_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = IpsAndPorts::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['ip'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tIpsAndPorts::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$ipsandports_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/ipsandports/formfield.ipsandports_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'ipsandports', 'id' => $id]),\n\t\t\t\t\t'formdata' => $ipsandports_edit_data['ipsandports_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'jqCheckIP') {\n\t\t$ip = $_POST['ip'] ?? \"\";\n\t\tif ((filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) || filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) && filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE | FILTER_FLAG_NO_PRIV_RANGE) == false) {\n\t\t\t// returns notice if private network detected so we can display it\n\t\t\techo json_encode(lng('admin.ipsandports.ipnote'));\n\t\t} else {\n\t\t\techo 0;\n\t\t}\n\t\texit();\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif ($page == 'mysqlserver' || $page == 'overview') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_mysqlserver\");\n\n\t\ttry {\n\t\t\t$mysqlserver_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.mysqlserver.php';\n\t\t\t$collection = (new Collection(MysqlServer::class, $userinfo))\n\t\t\t\t->withPagination($mysqlserver_list_data['mysqlserver_list']['columns'], $mysqlserver_list_data['mysqlserver_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $mysqlserver_list_data, 'mysqlserver_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'mysqlserver', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.mysqlserver.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = MysqlServer::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqlServer::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_mysqlserver_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['caption'] . ' (' . $result['host'] . ')');\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tMysqlServer::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysqlserver_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/mysqlserver/formfield.mysqlserver_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysqlserver']),\n\t\t\t\t'formdata' => $mysqlserver_add_data['mysqlserver_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id >= 0) {\n\t\ttry {\n\t\t\t$json_result = MysqlServer::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqlServer::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$mysqlserver_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/mysqlserver/formfield.mysqlserver_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysqlserver', 'id' => $id]),\n\t\t\t\t\t'formdata' => $mysqlserver_edit_data['mysqlserver_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass IpsAndPorts extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * lists all ip/port entries\n\t *\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t *\n\t * @access admin\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') || !empty($this->getUserDetail('ip')))) {\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] list ips and ports\");\n\t\t\t$ip_where = \"\";\n\t\t\t$append_where = false;\n\t\t\tif (!empty($this->getUserDetail('ip')) && $this->getUserDetail('ip') != -1) {\n\t\t\t\t$ip_where = \"WHERE `id` IN (\" . implode(\", \", json_decode($this->getUserDetail('ip'), true)) . \")\";\n\t\t\t\t$append_where = true;\n\t\t\t}\n\t\t\t$query_fields = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` \" . $ip_where . $this->getSearchWhere($query_fields, $append_where) . $this->getOrderBy() . $this->getLimit());\n\t\t\tDatabase::pexecute($result_stmt, $query_fields, true, true);\n\t\t\t$result = [];\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response([\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t]);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of accessible ip/port entries\n\t *\n\t * @access admin\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') || !empty($this->getUserDetail('ip')))) {\n\t\t\t$ip_where = \"\";\n\t\t\tif (!empty($this->getUserDetail('ip')) && $this->getUserDetail('ip') != -1) {\n\t\t\t\t$ip_where = \"WHERE `id` IN (\" . implode(\", \", json_decode($this->getUserDetail('ip'), true)) . \")\";\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_ips FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` \" . $ip_where);\n\t\t\t$result = Database::pexecute_first($result_stmt, null, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response($result['num_ips']);\n\t\t\t}\n\t\t\treturn $this->response(0);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * create a new ip/port entry\n\t *\n\t * @param string $ip\n\t * @param int $port\n\t *            optional, default 80\n\t * @param bool $listen_statement\n\t *            optional, default 0 (false)\n\t * @param bool $namevirtualhost_statement\n\t *            optional, default 0 (false)\n\t * @param bool $vhostcontainer\n\t *            optional, default 0 (false)\n\t * @param string $specialsettings\n\t *            optional, default empty\n\t * @param bool $vhostcontainer_servername_statement\n\t *            optional, default 0 (false)\n\t * @param string $default_vhostconf_domain\n\t *            optional, defatul empty\n\t * @param string $docroot\n\t *            optional, default empty (point to froxlor)\n\t * @param bool $ssl\n\t *            optional, default 0 (false)\n\t * @param string $ssl_cert_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_key_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_ca_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_cert_chainfile\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_specialsettings\n\t *            optional, requires $ssl = 1, default empty\n\t * @param bool $include_specialsettings\n\t *            optional, requires $ssl = 1, whether or not to include non-ssl specialsettings, default false\n\t * @param string $ssl_default_vhostconf_domain\n\t *            optional, requires $ssl = 1, defatul empty\n\t * @param bool $include_default_vhostconf_domain\n\t *            optional, requires $ssl = 1, whether or not to include non-ssl default_vhostconf_domain, default false\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings')) {\n\t\t\t$ip = Validate::validate_ip2($this->getParam('ip'), false, 'invalidip', false, true, false, false, true);\n\t\t\t$port = Validate::validate($this->getParam('port', true, 80), 'port', Validate::REGEX_PORT, [\n\t\t\t\t'stringisempty',\n\t\t\t\t'myport'\n\t\t\t], [], true);\n\t\t\t$listen_statement = !empty($this->getBoolParam('listen_statement', true, 0)) ? 1 : 0;\n\t\t\t$namevirtualhost_statement = !empty($this->getBoolParam('namevirtualhost_statement', true, 0)) ? 1 : 0;\n\t\t\t$vhostcontainer = !empty($this->getBoolParam('vhostcontainer', true, 0)) ? 1 : 0;\n\t\t\t$ss = $this->getParam('specialsettings', true, '');\n\t\t\t$specialsettings = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $ss ?? \"\"), 'specialsettings', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t$vhostcontainer_servername_statement = !empty($this->getBoolParam('vhostcontainer_servername_statement', true, 1)) ? 1 : 0;\n\t\t\t$dvd = $this->getParam('default_vhostconf_domain', true, '');\n\t\t\t$default_vhostconf_domain = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $dvd), 'default_vhostconf_domain', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t$docroot = Validate::validate($this->getParam('docroot', true, ''), 'docroot', Validate::REGEX_DIR, '', [], true);\n\n\t\t\tif ((int)Settings::Get('system.use_ssl') == 1) {\n\t\t\t\t$ssl = !empty($this->getBoolParam('ssl', true, 0)) ? intval($this->getBoolParam('ssl', true, 0)) : 0;\n\t\t\t\t$ssl_cert_file = Validate::validate($this->getParam('ssl_cert_file', $ssl, ''), 'ssl_cert_file', '', '', [], true);\n\t\t\t\t$ssl_key_file = Validate::validate($this->getParam('ssl_key_file', $ssl, ''), 'ssl_key_file', '', '', [], true);\n\t\t\t\t$ssl_ca_file = Validate::validate($this->getParam('ssl_ca_file', true, ''), 'ssl_ca_file', '', '', [], true);\n\t\t\t\t$ssl_cert_chainfile = Validate::validate($this->getParam('ssl_cert_chainfile', true, ''), 'ssl_cert_chainfile', '', '', [], true);\n\t\t\t\t$sslss = $this->getParam('ssl_specialsettings', true, '');\n\t\t\t\t$ssl_specialsettings = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $sslss ?? \"\"), 'ssl_specialsettings', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$include_specialsettings = !empty($this->getBoolParam('include_specialsettings', true, 0)) ? 1 : 0;\n\t\t\t\t$ssldvd = $this->getParam('ssl_default_vhostconf_domain', true, '');\n\t\t\t\t$ssl_default_vhostconf_domain = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $ssldvd ?? \"\"), 'ssl_default_vhostconf_domain', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$include_default_vhostconf_domain = !empty($this->getBoolParam('include_default_vhostconf_domain', true, 0)) ? 1 : 0;\n\t\t\t} else {\n\t\t\t\t$ssl = 0;\n\t\t\t\t$ssl_cert_file = '';\n\t\t\t\t$ssl_key_file = '';\n\t\t\t\t$ssl_ca_file = '';\n\t\t\t\t$ssl_cert_chainfile = '';\n\t\t\t\t$ssl_specialsettings = '';\n\t\t\t\t$include_specialsettings = 0;\n\t\t\t\t$ssl_default_vhostconf_domain = '';\n\t\t\t\t$include_default_vhostconf_domain = 0;\n\t\t\t}\n\n\t\t\tif ($listen_statement != '1') {\n\t\t\t\t$listen_statement = '0';\n\t\t\t}\n\n\t\t\tif ($namevirtualhost_statement != '1') {\n\t\t\t\t$namevirtualhost_statement = '0';\n\t\t\t}\n\n\t\t\tif ($vhostcontainer != '1') {\n\t\t\t\t$vhostcontainer = '0';\n\t\t\t}\n\n\t\t\tif ($vhostcontainer_servername_statement != '1') {\n\t\t\t\t$vhostcontainer_servername_statement = '0';\n\t\t\t}\n\n\t\t\tif ($ssl != '1') {\n\t\t\t\t$ssl = '0';\n\t\t\t}\n\n\t\t\tif ($ssl_cert_file != '') {\n\t\t\t\t$ssl_cert_file = FileDir::makeCorrectFile($ssl_cert_file);\n\t\t\t}\n\n\t\t\tif ($ssl_key_file != '') {\n\t\t\t\t$ssl_key_file = FileDir::makeCorrectFile($ssl_key_file);\n\t\t\t}\n\n\t\t\tif ($ssl_ca_file != '') {\n\t\t\t\t$ssl_ca_file = FileDir::makeCorrectFile($ssl_ca_file);\n\t\t\t}\n\n\t\t\tif ($ssl_cert_chainfile != '') {\n\t\t\t\t$ssl_cert_chainfile = FileDir::makeCorrectFile($ssl_cert_chainfile);\n\t\t\t}\n\n\t\t\tif (strlen(trim($docroot)) > 0) {\n\t\t\t\t$docroot = FileDir::makeCorrectDir($docroot);\n\t\t\t} else {\n\t\t\t\t$docroot = '';\n\t\t\t}\n\n\t\t\t// always use compressed ipv6 format\n\t\t\t$ip = inet_ntop(inet_pton($ip));\n\n\t\t\t$result_checkfordouble_stmt = Database::prepare(\"\n\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\tWHERE `ip` = :ip AND `port` = :port\");\n\t\t\t$result_checkfordouble = Database::pexecute_first($result_checkfordouble_stmt, [\n\t\t\t\t'ip' => $ip,\n\t\t\t\t'port' => $port\n\t\t\t]);\n\n\t\t\tif ($result_checkfordouble && $result_checkfordouble['id'] != '') {\n\t\t\t\tResponse::standardError('myipnotdouble', '', true);\n\t\t\t}\n\n\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\tINSERT INTO `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\tSET\n\t\t\t\t`ip` = :ip, `port` = :port, `listen_statement` = :ls,\n\t\t\t\t`namevirtualhost_statement` = :nvhs, `vhostcontainer` = :vhc,\n\t\t\t\t`vhostcontainer_servername_statement` = :vhcss,\n\t\t\t\t`specialsettings` = :ss, `ssl` = :ssl,\n\t\t\t\t`ssl_cert_file` = :ssl_cert, `ssl_key_file` = :ssl_key,\n\t\t\t\t`ssl_ca_file` = :ssl_ca, `ssl_cert_chainfile` = :ssl_chain,\n\t\t\t\t`default_vhostconf_domain` = :dvhd, `docroot` = :docroot,\n\t\t\t\t`ssl_specialsettings` = :ssl_ss, `include_specialsettings` = :incss,\n\t\t\t\t`ssl_default_vhostconf_domain` = :ssl_dvhd, `include_default_vhostconf_domain` = :incdvhd;\n\t\t\t\");\n\t\t\t$ins_data = [\n\t\t\t\t'ip' => $ip,\n\t\t\t\t'port' => $port,\n\t\t\t\t'ls' => $listen_statement,\n\t\t\t\t'nvhs' => $namevirtualhost_statement,\n\t\t\t\t'vhc' => $vhostcontainer,\n\t\t\t\t'vhcss' => $vhostcontainer_servername_statement,\n\t\t\t\t'ss' => $specialsettings,\n\t\t\t\t'ssl' => $ssl,\n\t\t\t\t'ssl_cert' => $ssl_cert_file,\n\t\t\t\t'ssl_key' => $ssl_key_file,\n\t\t\t\t'ssl_ca' => $ssl_ca_file,\n\t\t\t\t'ssl_chain' => $ssl_cert_chainfile,\n\t\t\t\t'dvhd' => $default_vhostconf_domain,\n\t\t\t\t'docroot' => $docroot,\n\t\t\t\t'ssl_ss' => $ssl_specialsettings,\n\t\t\t\t'incss' => $include_specialsettings,\n\t\t\t\t'ssl_dvhd' => $ssl_default_vhostconf_domain,\n\t\t\t\t'incdvhd' => $include_default_vhostconf_domain\n\t\t\t];\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\t\t\t$ins_data['id'] = Database::lastInsertId();\n\n\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\tif (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t$ip = '[' . $ip . ']';\n\t\t\t}\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added IP/port '\" . $ip . \":\" . $port . \"'\");\n\t\t\t// get ip for return-array\n\t\t\t$result = $this->apiCall('IpsAndPorts.get', [\n\t\t\t\t'id' => $ins_data['id']\n\t\t\t]);\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return an ip/port entry by id\n\t *\n\t * @param int $id\n\t *            ip-port-id\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') || !empty($this->getUserDetail('ip')))) {\n\t\t\t$id = $this->getParam('id');\n\t\t\tif (!empty($this->getUserDetail('ip')) && $this->getUserDetail('ip') != -1) {\n\t\t\t\t$allowed_ips = json_decode($this->getUserDetail('ip'), true);\n\t\t\t\tif (!in_array($id, $allowed_ips)) {\n\t\t\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `id` = :id\n\t\t\t\");\n\t\t\t$result = Database::pexecute_first($result_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\tif ($result) {\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] get ip \" . $result['ip'] . \" \" . $result['port']);\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t\tthrow new Exception(\"IP/port with id #\" . $id . \" could not be found\", 404);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update ip/port entry by given id\n\t *\n\t * @param int $id\n\t * @param string $ip\n\t *            optional\n\t * @param int $port\n\t *            optional, default 80\n\t * @param bool $listen_statement\n\t *            optional, default 0 (false)\n\t * @param bool $namevirtualhost_statement\n\t *            optional, default 0 (false)\n\t * @param bool $vhostcontainer\n\t *            optional, default 0 (false)\n\t * @param string $specialsettings\n\t *            optional, default empty\n\t * @param bool $vhostcontainer_servername_statement\n\t *            optional, default 0 (false)\n\t * @param string $default_vhostconf_domain\n\t *            optional, defatul empty\n\t * @param string $docroot\n\t *            optional, default empty (point to froxlor)\n\t * @param bool $ssl\n\t *            optional, default 0 (false)\n\t * @param string $ssl_cert_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_key_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_ca_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_cert_chainfile\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_specialsettings\n\t *            optional, requires $ssl = 1, default empty\n\t * @param bool $include_specialsettings\n\t *            optional, requires $ssl = 1, whether or not to include non-ssl specialsettings, default false\n\t * @param string $ssl_default_vhostconf_domain\n\t *            optional, requires $ssl = 1, defatul empty\n\t * @param bool $include_default_vhostconf_domain\n\t *            optional, requires $ssl = 1, whether or not to include non-ssl default_vhostconf_domain, default false\n\t *\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') || !empty($this->getUserDetail('ip')))) {\n\t\t\t$id = $this->getParam('id');\n\n\t\t\t$result = $this->apiCall('IpsAndPorts.get', [\n\t\t\t\t'id' => $id\n\t\t\t]);\n\n\t\t\t$ip = Validate::validate_ip2($this->getParam('ip', true, $result['ip']), false, 'invalidip', false, true, false, false, true);\n\t\t\t$port = Validate::validate($this->getParam('port', true, $result['port']), 'port', Validate::REGEX_PORT, [\n\t\t\t\t'stringisempty',\n\t\t\t\t'myport'\n\t\t\t], [], true);\n\t\t\t$listen_statement = $this->getBoolParam('listen_statement', true, $result['listen_statement']);\n\t\t\t$namevirtualhost_statement = $this->getBoolParam('namevirtualhost_statement', true, $result['namevirtualhost_statement']);\n\t\t\t$vhostcontainer = $this->getBoolParam('vhostcontainer', true, $result['vhostcontainer']);\n\t\t\t$ss = $this->getParam('specialsettings', true, $result['specialsettings']);\n\t\t\t$specialsettings = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $ss ?? \"\"), 'specialsettings', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t$vhostcontainer_servername_statement = $this->getParam('vhostcontainer_servername_statement', true, $result['vhostcontainer_servername_statement']);\n\t\t\t$dvd = $this->getParam('default_vhostconf_domain', true, $result['default_vhostconf_domain']);\n\t\t\t$default_vhostconf_domain = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $dvd ?? \"\"), 'default_vhostconf_domain', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t$docroot = Validate::validate($this->getParam('docroot', true, $result['docroot']), 'docroot', Validate::REGEX_DIR, '', [], true);\n\n\t\t\tif ((int)Settings::Get('system.use_ssl') == 1) {\n\t\t\t\t$ssl = $this->getBoolParam('ssl', true, $result['ssl']);\n\t\t\t\t$ssl_cert_file = Validate::validate($this->getParam('ssl_cert_file', $ssl, $result['ssl_cert_file']), 'ssl_cert_file', '', '', [], true);\n\t\t\t\t$ssl_key_file = Validate::validate($this->getParam('ssl_key_file', $ssl, $result['ssl_key_file']), 'ssl_key_file', '', '', [], true);\n\t\t\t\t$ssl_ca_file = Validate::validate($this->getParam('ssl_ca_file', true, $result['ssl_ca_file']), 'ssl_ca_file', '', '', [], true);\n\t\t\t\t$ssl_cert_chainfile = Validate::validate($this->getParam('ssl_cert_chainfile', true, $result['ssl_cert_chainfile']), 'ssl_cert_chainfile', '', '', [], true);\n\t\t\t\t$sslss = $this->getParam('ssl_specialsettings', true, $result['ssl_specialsettings']);\n\t\t\t\t$ssl_specialsettings = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $sslss ?? \"\"), 'ssl_specialsettings', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$include_specialsettings = $this->getBoolParam('include_specialsettings', true, $result['include_specialsettings']);\n\t\t\t\t$ssldvd = $this->getParam('ssl_default_vhostconf_domain', true, $result['ssl_default_vhostconf_domain']);\n\t\t\t\t$ssl_default_vhostconf_domain = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $ssldvd ?? \"\"), 'ssl_default_vhostconf_domain', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$include_default_vhostconf_domain = $this->getBoolParam('include_default_vhostconf_domain', true, $result['include_default_vhostconf_domain']);\n\t\t\t} else {\n\t\t\t\t$ssl = 0;\n\t\t\t\t$ssl_cert_file = '';\n\t\t\t\t$ssl_key_file = '';\n\t\t\t\t$ssl_ca_file = '';\n\t\t\t\t$ssl_cert_chainfile = '';\n\t\t\t\t$ssl_specialsettings = '';\n\t\t\t\t$include_specialsettings = 0;\n\t\t\t\t$ssl_default_vhostconf_domain = '';\n\t\t\t\t$include_default_vhostconf_domain = 0;\n\t\t\t}\n\n\t\t\t$result_checkfordouble_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\tWHERE `ip` = :ip AND `port` = :port\n\t\t\t\");\n\t\t\t$result_checkfordouble = Database::pexecute_first($result_checkfordouble_stmt, [\n\t\t\t\t'ip' => $ip,\n\t\t\t\t'port' => $port\n\t\t\t]);\n\n\t\t\t$result_sameipotherport_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\tWHERE `ip` = :ip AND `id` <> :id\n\t\t\t\");\n\t\t\t$result_sameipotherport = Database::pexecute_first($result_sameipotherport_stmt, [\n\t\t\t\t'ip' => $ip,\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\tif ($listen_statement != '1') {\n\t\t\t\t$listen_statement = '0';\n\t\t\t}\n\n\t\t\tif ($namevirtualhost_statement != '1') {\n\t\t\t\t$namevirtualhost_statement = '0';\n\t\t\t}\n\n\t\t\tif ($vhostcontainer != '1') {\n\t\t\t\t$vhostcontainer = '0';\n\t\t\t}\n\n\t\t\tif ($vhostcontainer_servername_statement != '1') {\n\t\t\t\t$vhostcontainer_servername_statement = '0';\n\t\t\t}\n\n\t\t\tif ($ssl != '1') {\n\t\t\t\t$ssl = '0';\n\t\t\t}\n\n\t\t\tif ($ssl_cert_file != '') {\n\t\t\t\t$ssl_cert_file = FileDir::makeCorrectFile($ssl_cert_file);\n\t\t\t}\n\n\t\t\tif ($ssl_key_file != '') {\n\t\t\t\t$ssl_key_file = FileDir::makeCorrectFile($ssl_key_file);\n\t\t\t}\n\n\t\t\tif ($ssl_ca_file != '') {\n\t\t\t\t$ssl_ca_file = FileDir::makeCorrectFile($ssl_ca_file);\n\t\t\t}\n\n\t\t\tif ($ssl_cert_chainfile != '') {\n\t\t\t\t$ssl_cert_chainfile = FileDir::makeCorrectFile($ssl_cert_chainfile);\n\t\t\t}\n\n\t\t\tif (strlen(trim($docroot)) > 0) {\n\t\t\t\t$docroot = FileDir::makeCorrectDir($docroot);\n\t\t\t} else {\n\t\t\t\t$docroot = '';\n\t\t\t}\n\n\t\t\t// always use compressed ipv6 format\n\t\t\t$ip = inet_ntop(inet_pton($ip));\n\n\t\t\tif ($result['ip'] != $ip && $result['ip'] == Settings::Get('system.ipaddress') && $result_sameipotherport == false) {\n\t\t\t\tResponse::standardError('cantchangesystemip', '', true);\n\t\t\t} elseif ($result_checkfordouble && $result_checkfordouble['id'] != '' && $result_checkfordouble['id'] != $id) {\n\t\t\t\tResponse::standardError('myipnotdouble', '', true);\n\t\t\t} else {\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\tSET\n\t\t\t\t\t`ip` = :ip, `port` = :port, `listen_statement` = :ls,\n\t\t\t\t\t`namevirtualhost_statement` = :nvhs, `vhostcontainer` = :vhc,\n\t\t\t\t\t`vhostcontainer_servername_statement` = :vhcss,\n\t\t\t\t\t`specialsettings` = :ss, `ssl` = :ssl,\n\t\t\t\t\t`ssl_cert_file` = :ssl_cert, `ssl_key_file` = :ssl_key,\n\t\t\t\t\t`ssl_ca_file` = :ssl_ca, `ssl_cert_chainfile` = :ssl_chain,\n\t\t\t\t\t`default_vhostconf_domain` = :dvhd, `docroot` = :docroot,\n\t\t\t\t\t`ssl_specialsettings` = :ssl_ss, `include_specialsettings` = :incss,\n\t\t\t\t\t`ssl_default_vhostconf_domain` = :ssl_dvhd, `include_default_vhostconf_domain` = :incdvhd\n\t\t\t\t\tWHERE `id` = :id;\n\t\t\t\t\");\n\t\t\t\t$upd_data = [\n\t\t\t\t\t'ip' => $ip,\n\t\t\t\t\t'port' => $port,\n\t\t\t\t\t'ls' => $listen_statement,\n\t\t\t\t\t'nvhs' => $namevirtualhost_statement,\n\t\t\t\t\t'vhc' => $vhostcontainer,\n\t\t\t\t\t'vhcss' => $vhostcontainer_servername_statement,\n\t\t\t\t\t'ss' => $specialsettings,\n\t\t\t\t\t'ssl' => $ssl,\n\t\t\t\t\t'ssl_cert' => $ssl_cert_file,\n\t\t\t\t\t'ssl_key' => $ssl_key_file,\n\t\t\t\t\t'ssl_ca' => $ssl_ca_file,\n\t\t\t\t\t'ssl_chain' => $ssl_cert_chainfile,\n\t\t\t\t\t'dvhd' => $default_vhostconf_domain,\n\t\t\t\t\t'docroot' => $docroot,\n\t\t\t\t\t'ssl_ss' => $ssl_specialsettings,\n\t\t\t\t\t'incss' => $include_specialsettings,\n\t\t\t\t\t'ssl_dvhd' => $ssl_default_vhostconf_domain,\n\t\t\t\t\t'incdvhd' => $include_default_vhostconf_domain,\n\t\t\t\t\t'id' => $id\n\t\t\t\t];\n\t\t\t\tDatabase::pexecute($upd_stmt, $upd_data);\n\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] changed IP/port from '\" . $result['ip'] . \":\" . $result['port'] . \"' to '\" . $ip . \":\" . $port . \"'\");\n\n\t\t\t\t$result = $this->apiCall('IpsAndPorts.get', [\n\t\t\t\t\t'id' => $result['id']\n\t\t\t\t]);\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * delete an ip/port entry by id\n\t *\n\t * @param int $id\n\t *            ip-port-id\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings')) {\n\t\t\t$id = $this->getParam('id');\n\n\t\t\t$result = $this->apiCall('IpsAndPorts.get', [\n\t\t\t\t'id' => $id\n\t\t\t]);\n\n\t\t\t$result_checkdomain_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id_domain` FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_ipandports` = :id\n\t\t\t\");\n\t\t\t$result_checkdomain = Database::pexecute_first($result_checkdomain_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\tif (empty($result_checkdomain)) {\n\t\t\t\tif (!in_array($result['id'], explode(',', Settings::Get('system.defaultip'))) && !in_array($result['id'], explode(',', Settings::Get('system.defaultsslip')))) {\n\t\t\t\t\t// check whether there is the same IP with a different port\n\t\t\t\t\t// in case this ip-address is the system.ipaddress and therefore\n\t\t\t\t\t// when there is one - we have an alternative\n\t\t\t\t\t$result_sameipotherport_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\t\tWHERE `ip` = :ip AND `id` <> :id\");\n\t\t\t\t\t$result_sameipotherport = Database::pexecute_first($result_sameipotherport_stmt, [\n\t\t\t\t\t\t'id' => $id,\n\t\t\t\t\t\t'ip' => $result['ip']\n\t\t\t\t\t]);\n\n\t\t\t\t\tif (($result['ip'] != Settings::Get('system.ipaddress')) || ($result['ip'] == Settings::Get('system.ipaddress') && $result_sameipotherport != false)) {\n\t\t\t\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tDELETE FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\t\t\tWHERE `id` = :id\n\t\t\t\t\t\t\");\n\t\t\t\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t], true, true);\n\n\t\t\t\t\t\t// also, remove connections to domains (multi-stack)\n\t\t\t\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tDELETE FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_ipandports` = :id\n\t\t\t\t\t\t\");\n\t\t\t\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t], true, true);\n\n\t\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted IP/port '\" . $result['ip'] . \":\" . $result['port'] . \"'\");\n\t\t\t\t\t\treturn $this->response($result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tResponse::standardError('cantdeletesystemip', '', true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tResponse::standardError('cantdeletedefaultip', '', true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tResponse::standardError('ipstillhasdomains', '', true);\n\t\t\t}\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\Cronjobs;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif (($page == 'cronjobs' || $page == 'overview') && $userinfo['change_serversettings'] == '1') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, 'viewed admin_cronjobs');\n\n\t\ttry {\n\t\t\t$cron_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.cronjobs.php';\n\t\t\t$collection = (new Collection(Cronjobs::class, $userinfo))\n\t\t\t\t->withPagination($cron_list_data['cron_list']['columns'], $cron_list_data['cron_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table-note.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $cron_list_data, 'cron_list'),\n\t\t\t// alert-box\n\t\t\t'type' => 'warning',\n\t\t\t'alert_msg' => lng('cron.changewarning')\n\t\t]);\n\t} elseif ($action == 'new') {\n\t\t/*\n\t\t * @TODO later\n\t\t */\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = Cronjobs::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\t\tif ($result['cronfile'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tCronjobs::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$cronjobs_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/cronjobs/formfield.cronjobs_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'cronjobs', 'id' => $id]),\n\t\t\t\t\t'formdata' => $cronjobs_edit_data['cronjobs_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\t/*\n\t\t * @TODO later\n\t\t */\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\IpsAndPorts;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif (($page == 'ipsandports' || $page == 'overview') && $userinfo['change_serversettings'] == '1') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_ipsandports\");\n\n\t\ttry {\n\t\t\t$ipsandports_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.ipsandports.php';\n\t\t\t$collection = (new Collection(IpsAndPorts::class, $userinfo))\n\t\t\t\t->withPagination($ipsandports_list_data['ipsandports_list']['columns'], $ipsandports_list_data['ipsandports_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $ipsandports_list_data, 'ipsandports_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'ipsandports', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.ipsandports.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = IpsAndPorts::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tIpsAndPorts::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_ip_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['ip'] . ':' . $result['port']);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tIpsAndPorts::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$ipsandports_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/ipsandports/formfield.ipsandports_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'ipsandports']),\n\t\t\t\t'formdata' => $ipsandports_add_data['ipsandports_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = IpsAndPorts::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif ($result['ip'] != '') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tIpsAndPorts::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$ipsandports_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/ipsandports/formfield.ipsandports_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'ipsandports', 'id' => $id]),\n\t\t\t\t\t'formdata' => $ipsandports_edit_data['ipsandports_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'jqCheckIP') {\n\t\t$ip = $_POST['ip'] ?? \"\";\n\t\tif ((filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) || filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) && filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE | FILTER_FLAG_NO_PRIV_RANGE) == false) {\n\t\t\t// returns notice if private network detected so we can display it\n\t\t\techo json_encode(lng('admin.ipsandports.ipnote'));\n\t\t} else {\n\t\t\techo 0;\n\t\t}\n\t\texit();\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nconst AREA = 'admin';\nrequire __DIR__ . '/lib/init.php';\n\nuse Froxlor\\Api\\Commands\\MysqlServer;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\PhpHelper;\nuse Froxlor\\UI\\Collection;\nuse Froxlor\\UI\\HTML;\nuse Froxlor\\UI\\Listing;\nuse Froxlor\\UI\\Panel\\UI;\nuse Froxlor\\UI\\Request;\nuse Froxlor\\UI\\Response;\n\n$id = (int)Request::any('id');\n\nif (($page == 'mysqlserver' || $page == 'overview') && $userinfo['change_serversettings'] == '1') {\n\tif ($action == '') {\n\t\t$log->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"viewed admin_mysqlserver\");\n\n\t\ttry {\n\t\t\t$mysqlserver_list_data = include_once dirname(__FILE__) . '/lib/tablelisting/admin/tablelisting.mysqlserver.php';\n\t\t\t$collection = (new Collection(MysqlServer::class, $userinfo))\n\t\t\t\t->withPagination($mysqlserver_list_data['mysqlserver_list']['columns'], $mysqlserver_list_data['mysqlserver_list']['default_sorting']);\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\n\t\tUI::view('user/table.html.twig', [\n\t\t\t'listing' => Listing::format($collection, $mysqlserver_list_data, 'mysqlserver_list'),\n\t\t\t'actions_links' => [\n\t\t\t\t[\n\t\t\t\t\t'href' => $linker->getLink(['section' => 'mysqlserver', 'page' => $page, 'action' => 'add']),\n\t\t\t\t\t'label' => lng('admin.mysqlserver.add')\n\t\t\t\t]\n\t\t\t]\n\t\t]);\n\t} elseif ($action == 'delete' && $id != 0) {\n\t\ttry {\n\t\t\t$json_result = MysqlServer::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqlServer::getLocal($userinfo, [\n\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t])->delete();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tHTML::askYesNo('admin_mysqlserver_reallydelete', $filename, [\n\t\t\t\t\t'id' => $id,\n\t\t\t\t\t'page' => $page,\n\t\t\t\t\t'action' => $action\n\t\t\t\t], $result['caption'] . ' (' . $result['host'] . ')');\n\t\t\t}\n\t\t}\n\t} elseif ($action == 'add') {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\tMysqlServer::getLocal($userinfo, $_POST)->add();\n\t\t\t} catch (Exception $e) {\n\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t}\n\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t'page' => $page\n\t\t\t]);\n\t\t} else {\n\t\t\t$mysqlserver_add_data = include_once dirname(__FILE__) . '/lib/formfields/admin/mysqlserver/formfield.mysqlserver_add.php';\n\n\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysqlserver']),\n\t\t\t\t'formdata' => $mysqlserver_add_data['mysqlserver_add']\n\t\t\t]);\n\t\t}\n\t} elseif ($action == 'edit' && $id >= 0) {\n\t\ttry {\n\t\t\t$json_result = MysqlServer::getLocal($userinfo, [\n\t\t\t\t'id' => $id\n\t\t\t])->get();\n\t\t} catch (Exception $e) {\n\t\t\tResponse::dynamicError($e->getMessage());\n\t\t}\n\t\t$result = json_decode($json_result, true)['data'];\n\n\t\tif (isset($result['id']) && $result['id'] == $id) {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\ttry {\n\t\t\t\t\tMysqlServer::getLocal($userinfo, $_POST)->update();\n\t\t\t\t} catch (Exception $e) {\n\t\t\t\t\tResponse::dynamicError($e->getMessage());\n\t\t\t\t}\n\t\t\t\tResponse::redirectTo($filename, [\n\t\t\t\t\t'page' => $page\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t$result = PhpHelper::htmlentitiesArray($result);\n\n\t\t\t\t$mysqlserver_edit_data = include_once dirname(__FILE__) . '/lib/formfields/admin/mysqlserver/formfield.mysqlserver_edit.php';\n\n\t\t\t\tUI::view('user/form.html.twig', [\n\t\t\t\t\t'formaction' => $linker->getLink(['section' => 'mysqlserver', 'id' => $id]),\n\t\t\t\t\t'formdata' => $mysqlserver_edit_data['mysqlserver_edit'],\n\t\t\t\t\t'editid' => $id\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, you can also view it online at\n * https://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  the authors\n * @author     Froxlor team <team@froxlor.org>\n * @license    https://files.froxlor.org/misc/COPYING.txt GPLv2\n */\n\nnamespace Froxlor\\Api\\Commands;\n\nuse Exception;\nuse Froxlor\\Api\\ApiCommand;\nuse Froxlor\\Api\\ResourceEntity;\nuse Froxlor\\Cron\\TaskId;\nuse Froxlor\\Database\\Database;\nuse Froxlor\\FileDir;\nuse Froxlor\\FroxlorLogger;\nuse Froxlor\\Settings;\nuse Froxlor\\System\\Cronjob;\nuse Froxlor\\UI\\Response;\nuse Froxlor\\Validate\\Validate;\nuse PDO;\n\n/**\n * @since 0.10.0\n */\nclass IpsAndPorts extends ApiCommand implements ResourceEntity\n{\n\n\t/**\n\t * lists all ip/port entries\n\t *\n\t * @param array $sql_search\n\t *            optional array with index = fieldname, and value = array with 'op' => operator (one of <, > or =),\n\t *            LIKE is used if left empty and 'value' => searchvalue\n\t * @param int $sql_limit\n\t *            optional specify number of results to be returned\n\t * @param int $sql_offset\n\t *            optional specify offset for resultset\n\t * @param array $sql_orderby\n\t *            optional array with index = fieldname and value = ASC|DESC to order the resultset by one or more\n\t *            fields\n\t *\n\t * @access admin\n\t * @return string json-encoded array count|list\n\t * @throws Exception\n\t */\n\tpublic function listing()\n\t{\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') || !empty($this->getUserDetail('ip')))) {\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] list ips and ports\");\n\t\t\t$ip_where = \"\";\n\t\t\t$append_where = false;\n\t\t\tif (!empty($this->getUserDetail('ip')) && $this->getUserDetail('ip') != -1) {\n\t\t\t\t$ip_where = \"WHERE `id` IN (\" . implode(\", \", json_decode($this->getUserDetail('ip'), true)) . \")\";\n\t\t\t\t$append_where = true;\n\t\t\t}\n\t\t\t$query_fields = [];\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` \" . $ip_where . $this->getSearchWhere($query_fields, $append_where) . $this->getOrderBy() . $this->getLimit());\n\t\t\tDatabase::pexecute($result_stmt, $query_fields, true, true);\n\t\t\t$result = [];\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$result[] = $row;\n\t\t\t}\n\t\t\treturn $this->response([\n\t\t\t\t'count' => count($result),\n\t\t\t\t'list' => $result\n\t\t\t]);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * returns the total number of accessible ip/port entries\n\t *\n\t * @access admin\n\t * @return string json-encoded response message\n\t * @throws Exception\n\t */\n\tpublic function listingCount()\n\t{\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') || !empty($this->getUserDetail('ip')))) {\n\t\t\t$ip_where = \"\";\n\t\t\tif (!empty($this->getUserDetail('ip')) && $this->getUserDetail('ip') != -1) {\n\t\t\t\t$ip_where = \"WHERE `id` IN (\" . implode(\", \", json_decode($this->getUserDetail('ip'), true)) . \")\";\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(*) as num_ips FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` \" . $ip_where);\n\t\t\t$result = Database::pexecute_first($result_stmt, null, true, true);\n\t\t\tif ($result) {\n\t\t\t\treturn $this->response($result['num_ips']);\n\t\t\t}\n\t\t\treturn $this->response(0);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * create a new ip/port entry\n\t *\n\t * @param string $ip\n\t * @param int $port\n\t *            optional, default 80\n\t * @param bool $listen_statement\n\t *            optional, default 0 (false)\n\t * @param bool $namevirtualhost_statement\n\t *            optional, default 0 (false)\n\t * @param bool $vhostcontainer\n\t *            optional, default 0 (false)\n\t * @param string $specialsettings\n\t *            optional, default empty\n\t * @param bool $vhostcontainer_servername_statement\n\t *            optional, default 0 (false)\n\t * @param string $default_vhostconf_domain\n\t *            optional, defatul empty\n\t * @param string $docroot\n\t *            optional, default empty (point to froxlor)\n\t * @param bool $ssl\n\t *            optional, default 0 (false)\n\t * @param string $ssl_cert_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_key_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_ca_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_cert_chainfile\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_specialsettings\n\t *            optional, requires $ssl = 1, default empty\n\t * @param bool $include_specialsettings\n\t *            optional, requires $ssl = 1, whether or not to include non-ssl specialsettings, default false\n\t * @param string $ssl_default_vhostconf_domain\n\t *            optional, requires $ssl = 1, defatul empty\n\t * @param bool $include_default_vhostconf_domain\n\t *            optional, requires $ssl = 1, whether or not to include non-ssl default_vhostconf_domain, default false\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function add()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings')) {\n\t\t\t$ip = Validate::validate_ip2($this->getParam('ip'), false, 'invalidip', false, true, false, false, true);\n\t\t\t$port = Validate::validate($this->getParam('port', true, 80), 'port', Validate::REGEX_PORT, [\n\t\t\t\t'stringisempty',\n\t\t\t\t'myport'\n\t\t\t], [], true);\n\t\t\t$listen_statement = !empty($this->getBoolParam('listen_statement', true, 0)) ? 1 : 0;\n\t\t\t$namevirtualhost_statement = !empty($this->getBoolParam('namevirtualhost_statement', true, 0)) ? 1 : 0;\n\t\t\t$vhostcontainer = !empty($this->getBoolParam('vhostcontainer', true, 0)) ? 1 : 0;\n\t\t\t$ss = $this->getParam('specialsettings', true, '');\n\t\t\t$specialsettings = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $ss ?? \"\"), 'specialsettings', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t$vhostcontainer_servername_statement = !empty($this->getBoolParam('vhostcontainer_servername_statement', true, 1)) ? 1 : 0;\n\t\t\t$dvd = $this->getParam('default_vhostconf_domain', true, '');\n\t\t\t$default_vhostconf_domain = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $dvd), 'default_vhostconf_domain', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t$docroot = Validate::validate($this->getParam('docroot', true, ''), 'docroot', Validate::REGEX_DIR, '', [], true);\n\n\t\t\tif ((int)Settings::Get('system.use_ssl') == 1) {\n\t\t\t\t$ssl = !empty($this->getBoolParam('ssl', true, 0)) ? intval($this->getBoolParam('ssl', true, 0)) : 0;\n\t\t\t\t$ssl_cert_file = Validate::validate($this->getParam('ssl_cert_file', $ssl, ''), 'ssl_cert_file', '', '', [], true);\n\t\t\t\t$ssl_key_file = Validate::validate($this->getParam('ssl_key_file', $ssl, ''), 'ssl_key_file', '', '', [], true);\n\t\t\t\t$ssl_ca_file = Validate::validate($this->getParam('ssl_ca_file', true, ''), 'ssl_ca_file', '', '', [], true);\n\t\t\t\t$ssl_cert_chainfile = Validate::validate($this->getParam('ssl_cert_chainfile', true, ''), 'ssl_cert_chainfile', '', '', [], true);\n\t\t\t\t$sslss = $this->getParam('ssl_specialsettings', true, '');\n\t\t\t\t$ssl_specialsettings = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $sslss ?? \"\"), 'ssl_specialsettings', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$include_specialsettings = !empty($this->getBoolParam('include_specialsettings', true, 0)) ? 1 : 0;\n\t\t\t\t$ssldvd = $this->getParam('ssl_default_vhostconf_domain', true, '');\n\t\t\t\t$ssl_default_vhostconf_domain = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $ssldvd ?? \"\"), 'ssl_default_vhostconf_domain', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$include_default_vhostconf_domain = !empty($this->getBoolParam('include_default_vhostconf_domain', true, 0)) ? 1 : 0;\n\t\t\t} else {\n\t\t\t\t$ssl = 0;\n\t\t\t\t$ssl_cert_file = '';\n\t\t\t\t$ssl_key_file = '';\n\t\t\t\t$ssl_ca_file = '';\n\t\t\t\t$ssl_cert_chainfile = '';\n\t\t\t\t$ssl_specialsettings = '';\n\t\t\t\t$include_specialsettings = 0;\n\t\t\t\t$ssl_default_vhostconf_domain = '';\n\t\t\t\t$include_default_vhostconf_domain = 0;\n\t\t\t}\n\n\t\t\tif ($listen_statement != '1') {\n\t\t\t\t$listen_statement = '0';\n\t\t\t}\n\n\t\t\tif ($namevirtualhost_statement != '1') {\n\t\t\t\t$namevirtualhost_statement = '0';\n\t\t\t}\n\n\t\t\tif ($vhostcontainer != '1') {\n\t\t\t\t$vhostcontainer = '0';\n\t\t\t}\n\n\t\t\tif ($vhostcontainer_servername_statement != '1') {\n\t\t\t\t$vhostcontainer_servername_statement = '0';\n\t\t\t}\n\n\t\t\tif ($ssl != '1') {\n\t\t\t\t$ssl = '0';\n\t\t\t}\n\n\t\t\tif ($ssl_cert_file != '') {\n\t\t\t\t$ssl_cert_file = FileDir::makeCorrectFile($ssl_cert_file);\n\t\t\t}\n\n\t\t\tif ($ssl_key_file != '') {\n\t\t\t\t$ssl_key_file = FileDir::makeCorrectFile($ssl_key_file);\n\t\t\t}\n\n\t\t\tif ($ssl_ca_file != '') {\n\t\t\t\t$ssl_ca_file = FileDir::makeCorrectFile($ssl_ca_file);\n\t\t\t}\n\n\t\t\tif ($ssl_cert_chainfile != '') {\n\t\t\t\t$ssl_cert_chainfile = FileDir::makeCorrectFile($ssl_cert_chainfile);\n\t\t\t}\n\n\t\t\tif (strlen(trim($docroot)) > 0) {\n\t\t\t\t$docroot = FileDir::makeCorrectDir($docroot);\n\t\t\t} else {\n\t\t\t\t$docroot = '';\n\t\t\t}\n\n\t\t\t// always use compressed ipv6 format\n\t\t\t$ip = inet_ntop(inet_pton($ip));\n\n\t\t\t$result_checkfordouble_stmt = Database::prepare(\"\n\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\tWHERE `ip` = :ip AND `port` = :port\");\n\t\t\t$result_checkfordouble = Database::pexecute_first($result_checkfordouble_stmt, [\n\t\t\t\t'ip' => $ip,\n\t\t\t\t'port' => $port\n\t\t\t]);\n\n\t\t\tif ($result_checkfordouble && $result_checkfordouble['id'] != '') {\n\t\t\t\tResponse::standardError('myipnotdouble', '', true);\n\t\t\t}\n\n\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\tINSERT INTO `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\tSET\n\t\t\t\t`ip` = :ip, `port` = :port, `listen_statement` = :ls,\n\t\t\t\t`namevirtualhost_statement` = :nvhs, `vhostcontainer` = :vhc,\n\t\t\t\t`vhostcontainer_servername_statement` = :vhcss,\n\t\t\t\t`specialsettings` = :ss, `ssl` = :ssl,\n\t\t\t\t`ssl_cert_file` = :ssl_cert, `ssl_key_file` = :ssl_key,\n\t\t\t\t`ssl_ca_file` = :ssl_ca, `ssl_cert_chainfile` = :ssl_chain,\n\t\t\t\t`default_vhostconf_domain` = :dvhd, `docroot` = :docroot,\n\t\t\t\t`ssl_specialsettings` = :ssl_ss, `include_specialsettings` = :incss,\n\t\t\t\t`ssl_default_vhostconf_domain` = :ssl_dvhd, `include_default_vhostconf_domain` = :incdvhd;\n\t\t\t\");\n\t\t\t$ins_data = [\n\t\t\t\t'ip' => $ip,\n\t\t\t\t'port' => $port,\n\t\t\t\t'ls' => $listen_statement,\n\t\t\t\t'nvhs' => $namevirtualhost_statement,\n\t\t\t\t'vhc' => $vhostcontainer,\n\t\t\t\t'vhcss' => $vhostcontainer_servername_statement,\n\t\t\t\t'ss' => $specialsettings,\n\t\t\t\t'ssl' => $ssl,\n\t\t\t\t'ssl_cert' => $ssl_cert_file,\n\t\t\t\t'ssl_key' => $ssl_key_file,\n\t\t\t\t'ssl_ca' => $ssl_ca_file,\n\t\t\t\t'ssl_chain' => $ssl_cert_chainfile,\n\t\t\t\t'dvhd' => $default_vhostconf_domain,\n\t\t\t\t'docroot' => $docroot,\n\t\t\t\t'ssl_ss' => $ssl_specialsettings,\n\t\t\t\t'incss' => $include_specialsettings,\n\t\t\t\t'ssl_dvhd' => $ssl_default_vhostconf_domain,\n\t\t\t\t'incdvhd' => $include_default_vhostconf_domain\n\t\t\t];\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\t\t\t$ins_data['id'] = Database::lastInsertId();\n\n\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\tif (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n\t\t\t\t$ip = '[' . $ip . ']';\n\t\t\t}\n\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] added IP/port '\" . $ip . \":\" . $port . \"'\");\n\t\t\t// get ip for return-array\n\t\t\t$result = $this->apiCall('IpsAndPorts.get', [\n\t\t\t\t'id' => $ins_data['id']\n\t\t\t]);\n\t\t\treturn $this->response($result);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * return an ip/port entry by id\n\t *\n\t * @param int $id\n\t *            ip-port-id\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function get()\n\t{\n\t\tif ($this->isAdmin() && ($this->getUserDetail('change_serversettings') || !empty($this->getUserDetail('ip')))) {\n\t\t\t$id = $this->getParam('id');\n\t\t\tif (!empty($this->getUserDetail('ip')) && $this->getUserDetail('ip') != -1) {\n\t\t\t\t$allowed_ips = json_decode($this->getUserDetail('ip'), true);\n\t\t\t\tif (!in_array($id, $allowed_ips)) {\n\t\t\t\t\tthrow new Exception(\"You cannot access this resource\", 405);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT * FROM `\" . TABLE_PANEL_IPSANDPORTS . \"` WHERE `id` = :id\n\t\t\t\");\n\t\t\t$result = Database::pexecute_first($result_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\t\t\tif ($result) {\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_NOTICE, \"[API] get ip \" . $result['ip'] . \" \" . $result['port']);\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t\tthrow new Exception(\"IP/port with id #\" . $id . \" could not be found\", 404);\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * update ip/port entry by given id\n\t *\n\t * @param int $id\n\t * @param string $ip\n\t *            optional\n\t * @param int $port\n\t *            optional, default 80\n\t * @param bool $listen_statement\n\t *            optional, default 0 (false)\n\t * @param bool $namevirtualhost_statement\n\t *            optional, default 0 (false)\n\t * @param bool $vhostcontainer\n\t *            optional, default 0 (false)\n\t * @param string $specialsettings\n\t *            optional, default empty\n\t * @param bool $vhostcontainer_servername_statement\n\t *            optional, default 0 (false)\n\t * @param string $default_vhostconf_domain\n\t *            optional, defatul empty\n\t * @param string $docroot\n\t *            optional, default empty (point to froxlor)\n\t * @param bool $ssl\n\t *            optional, default 0 (false)\n\t * @param string $ssl_cert_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_key_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_ca_file\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_cert_chainfile\n\t *            optional, requires $ssl = 1, default empty\n\t * @param string $ssl_specialsettings\n\t *            optional, requires $ssl = 1, default empty\n\t * @param bool $include_specialsettings\n\t *            optional, requires $ssl = 1, whether or not to include non-ssl specialsettings, default false\n\t * @param string $ssl_default_vhostconf_domain\n\t *            optional, requires $ssl = 1, defatul empty\n\t * @param bool $include_default_vhostconf_domain\n\t *            optional, requires $ssl = 1, whether or not to include non-ssl default_vhostconf_domain, default false\n\t *\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function update()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings')) {\n\t\t\t$id = $this->getParam('id');\n\n\t\t\t$result = $this->apiCall('IpsAndPorts.get', [\n\t\t\t\t'id' => $id\n\t\t\t]);\n\n\t\t\t$ip = Validate::validate_ip2($this->getParam('ip', true, $result['ip']), false, 'invalidip', false, true, false, false, true);\n\t\t\t$port = Validate::validate($this->getParam('port', true, $result['port']), 'port', Validate::REGEX_PORT, [\n\t\t\t\t'stringisempty',\n\t\t\t\t'myport'\n\t\t\t], [], true);\n\t\t\t$listen_statement = $this->getBoolParam('listen_statement', true, $result['listen_statement']);\n\t\t\t$namevirtualhost_statement = $this->getBoolParam('namevirtualhost_statement', true, $result['namevirtualhost_statement']);\n\t\t\t$vhostcontainer = $this->getBoolParam('vhostcontainer', true, $result['vhostcontainer']);\n\t\t\t$ss = $this->getParam('specialsettings', true, $result['specialsettings']);\n\t\t\t$specialsettings = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $ss ?? \"\"), 'specialsettings', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t$vhostcontainer_servername_statement = $this->getParam('vhostcontainer_servername_statement', true, $result['vhostcontainer_servername_statement']);\n\t\t\t$dvd = $this->getParam('default_vhostconf_domain', true, $result['default_vhostconf_domain']);\n\t\t\t$default_vhostconf_domain = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $dvd ?? \"\"), 'default_vhostconf_domain', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t$docroot = Validate::validate($this->getParam('docroot', true, $result['docroot']), 'docroot', Validate::REGEX_DIR, '', [], true);\n\n\t\t\tif ((int)Settings::Get('system.use_ssl') == 1) {\n\t\t\t\t$ssl = $this->getBoolParam('ssl', true, $result['ssl']);\n\t\t\t\t$ssl_cert_file = Validate::validate($this->getParam('ssl_cert_file', $ssl, $result['ssl_cert_file']), 'ssl_cert_file', '', '', [], true);\n\t\t\t\t$ssl_key_file = Validate::validate($this->getParam('ssl_key_file', $ssl, $result['ssl_key_file']), 'ssl_key_file', '', '', [], true);\n\t\t\t\t$ssl_ca_file = Validate::validate($this->getParam('ssl_ca_file', true, $result['ssl_ca_file']), 'ssl_ca_file', '', '', [], true);\n\t\t\t\t$ssl_cert_chainfile = Validate::validate($this->getParam('ssl_cert_chainfile', true, $result['ssl_cert_chainfile']), 'ssl_cert_chainfile', '', '', [], true);\n\t\t\t\t$sslss = $this->getParam('ssl_specialsettings', true, $result['ssl_specialsettings']);\n\t\t\t\t$ssl_specialsettings = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $sslss ?? \"\"), 'ssl_specialsettings', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$include_specialsettings = $this->getBoolParam('include_specialsettings', true, $result['include_specialsettings']);\n\t\t\t\t$ssldvd = $this->getParam('ssl_default_vhostconf_domain', true, $result['ssl_default_vhostconf_domain']);\n\t\t\t\t$ssl_default_vhostconf_domain = Validate::validate(str_replace(\"\\r\\n\", \"\\n\", $ssldvd ?? \"\"), 'ssl_default_vhostconf_domain', Validate::REGEX_CONF_TEXT, '', [], true);\n\t\t\t\t$include_default_vhostconf_domain = $this->getBoolParam('include_default_vhostconf_domain', true, $result['include_default_vhostconf_domain']);\n\t\t\t} else {\n\t\t\t\t$ssl = 0;\n\t\t\t\t$ssl_cert_file = '';\n\t\t\t\t$ssl_key_file = '';\n\t\t\t\t$ssl_ca_file = '';\n\t\t\t\t$ssl_cert_chainfile = '';\n\t\t\t\t$ssl_specialsettings = '';\n\t\t\t\t$include_specialsettings = 0;\n\t\t\t\t$ssl_default_vhostconf_domain = '';\n\t\t\t\t$include_default_vhostconf_domain = 0;\n\t\t\t}\n\n\t\t\t$result_checkfordouble_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\tWHERE `ip` = :ip AND `port` = :port\n\t\t\t\");\n\t\t\t$result_checkfordouble = Database::pexecute_first($result_checkfordouble_stmt, [\n\t\t\t\t'ip' => $ip,\n\t\t\t\t'port' => $port\n\t\t\t]);\n\n\t\t\t$result_sameipotherport_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\tWHERE `ip` = :ip AND `id` <> :id\n\t\t\t\");\n\t\t\t$result_sameipotherport = Database::pexecute_first($result_sameipotherport_stmt, [\n\t\t\t\t'ip' => $ip,\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\tif ($listen_statement != '1') {\n\t\t\t\t$listen_statement = '0';\n\t\t\t}\n\n\t\t\tif ($namevirtualhost_statement != '1') {\n\t\t\t\t$namevirtualhost_statement = '0';\n\t\t\t}\n\n\t\t\tif ($vhostcontainer != '1') {\n\t\t\t\t$vhostcontainer = '0';\n\t\t\t}\n\n\t\t\tif ($vhostcontainer_servername_statement != '1') {\n\t\t\t\t$vhostcontainer_servername_statement = '0';\n\t\t\t}\n\n\t\t\tif ($ssl != '1') {\n\t\t\t\t$ssl = '0';\n\t\t\t}\n\n\t\t\tif ($ssl_cert_file != '') {\n\t\t\t\t$ssl_cert_file = FileDir::makeCorrectFile($ssl_cert_file);\n\t\t\t}\n\n\t\t\tif ($ssl_key_file != '') {\n\t\t\t\t$ssl_key_file = FileDir::makeCorrectFile($ssl_key_file);\n\t\t\t}\n\n\t\t\tif ($ssl_ca_file != '') {\n\t\t\t\t$ssl_ca_file = FileDir::makeCorrectFile($ssl_ca_file);\n\t\t\t}\n\n\t\t\tif ($ssl_cert_chainfile != '') {\n\t\t\t\t$ssl_cert_chainfile = FileDir::makeCorrectFile($ssl_cert_chainfile);\n\t\t\t}\n\n\t\t\tif (strlen(trim($docroot)) > 0) {\n\t\t\t\t$docroot = FileDir::makeCorrectDir($docroot);\n\t\t\t} else {\n\t\t\t\t$docroot = '';\n\t\t\t}\n\n\t\t\t// always use compressed ipv6 format\n\t\t\t$ip = inet_ntop(inet_pton($ip));\n\n\t\t\tif ($result['ip'] != $ip && $result['ip'] == Settings::Get('system.ipaddress') && $result_sameipotherport == false) {\n\t\t\t\tResponse::standardError('cantchangesystemip', '', true);\n\t\t\t} elseif ($result_checkfordouble && $result_checkfordouble['id'] != '' && $result_checkfordouble['id'] != $id) {\n\t\t\t\tResponse::standardError('myipnotdouble', '', true);\n\t\t\t} else {\n\t\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\t\tUPDATE `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\tSET\n\t\t\t\t\t`ip` = :ip, `port` = :port, `listen_statement` = :ls,\n\t\t\t\t\t`namevirtualhost_statement` = :nvhs, `vhostcontainer` = :vhc,\n\t\t\t\t\t`vhostcontainer_servername_statement` = :vhcss,\n\t\t\t\t\t`specialsettings` = :ss, `ssl` = :ssl,\n\t\t\t\t\t`ssl_cert_file` = :ssl_cert, `ssl_key_file` = :ssl_key,\n\t\t\t\t\t`ssl_ca_file` = :ssl_ca, `ssl_cert_chainfile` = :ssl_chain,\n\t\t\t\t\t`default_vhostconf_domain` = :dvhd, `docroot` = :docroot,\n\t\t\t\t\t`ssl_specialsettings` = :ssl_ss, `include_specialsettings` = :incss,\n\t\t\t\t\t`ssl_default_vhostconf_domain` = :ssl_dvhd, `include_default_vhostconf_domain` = :incdvhd\n\t\t\t\t\tWHERE `id` = :id;\n\t\t\t\t\");\n\t\t\t\t$upd_data = [\n\t\t\t\t\t'ip' => $ip,\n\t\t\t\t\t'port' => $port,\n\t\t\t\t\t'ls' => $listen_statement,\n\t\t\t\t\t'nvhs' => $namevirtualhost_statement,\n\t\t\t\t\t'vhc' => $vhostcontainer,\n\t\t\t\t\t'vhcss' => $vhostcontainer_servername_statement,\n\t\t\t\t\t'ss' => $specialsettings,\n\t\t\t\t\t'ssl' => $ssl,\n\t\t\t\t\t'ssl_cert' => $ssl_cert_file,\n\t\t\t\t\t'ssl_key' => $ssl_key_file,\n\t\t\t\t\t'ssl_ca' => $ssl_ca_file,\n\t\t\t\t\t'ssl_chain' => $ssl_cert_chainfile,\n\t\t\t\t\t'dvhd' => $default_vhostconf_domain,\n\t\t\t\t\t'docroot' => $docroot,\n\t\t\t\t\t'ssl_ss' => $ssl_specialsettings,\n\t\t\t\t\t'incss' => $include_specialsettings,\n\t\t\t\t\t'ssl_dvhd' => $ssl_default_vhostconf_domain,\n\t\t\t\t\t'incdvhd' => $include_default_vhostconf_domain,\n\t\t\t\t\t'id' => $id\n\t\t\t\t];\n\t\t\t\tDatabase::pexecute($upd_stmt, $upd_data);\n\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] changed IP/port from '\" . $result['ip'] . \":\" . $result['port'] . \"' to '\" . $ip . \":\" . $port . \"'\");\n\n\t\t\t\t$result = $this->apiCall('IpsAndPorts.get', [\n\t\t\t\t\t'id' => $result['id']\n\t\t\t\t]);\n\t\t\t\treturn $this->response($result);\n\t\t\t}\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n\n\t/**\n\t * delete an ip/port entry by id\n\t *\n\t * @param int $id\n\t *            ip-port-id\n\t *\n\t * @access admin\n\t * @return string json-encoded array\n\t * @throws Exception\n\t */\n\tpublic function delete()\n\t{\n\t\tif ($this->isAdmin() && $this->getUserDetail('change_serversettings')) {\n\t\t\t$id = $this->getParam('id');\n\n\t\t\t$result = $this->apiCall('IpsAndPorts.get', [\n\t\t\t\t'id' => $id\n\t\t\t]);\n\n\t\t\t$result_checkdomain_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id_domain` FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_ipandports` = :id\n\t\t\t\");\n\t\t\t$result_checkdomain = Database::pexecute_first($result_checkdomain_stmt, [\n\t\t\t\t'id' => $id\n\t\t\t], true, true);\n\n\t\t\tif (empty($result_checkdomain)) {\n\t\t\t\tif (!in_array($result['id'], explode(',', Settings::Get('system.defaultip'))) && !in_array($result['id'], explode(',', Settings::Get('system.defaultsslip')))) {\n\t\t\t\t\t// check whether there is the same IP with a different port\n\t\t\t\t\t// in case this ip-address is the system.ipaddress and therefore\n\t\t\t\t\t// when there is one - we have an alternative\n\t\t\t\t\t$result_sameipotherport_stmt = Database::prepare(\"\n\t\t\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\t\tWHERE `ip` = :ip AND `id` <> :id\");\n\t\t\t\t\t$result_sameipotherport = Database::pexecute_first($result_sameipotherport_stmt, [\n\t\t\t\t\t\t'id' => $id,\n\t\t\t\t\t\t'ip' => $result['ip']\n\t\t\t\t\t]);\n\n\t\t\t\t\tif (($result['ip'] != Settings::Get('system.ipaddress')) || ($result['ip'] == Settings::Get('system.ipaddress') && $result_sameipotherport != false)) {\n\t\t\t\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tDELETE FROM `\" . TABLE_PANEL_IPSANDPORTS . \"`\n\t\t\t\t\t\t\tWHERE `id` = :id\n\t\t\t\t\t\t\");\n\t\t\t\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t], true, true);\n\n\t\t\t\t\t\t// also, remove connections to domains (multi-stack)\n\t\t\t\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\t\t\t\tDELETE FROM `\" . TABLE_DOMAINTOIP . \"` WHERE `id_ipandports` = :id\n\t\t\t\t\t\t\");\n\t\t\t\t\t\tDatabase::pexecute($del_stmt, [\n\t\t\t\t\t\t\t'id' => $id\n\t\t\t\t\t\t], true, true);\n\n\t\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_VHOST);\n\t\t\t\t\t\t// Using nameserver, insert a task which rebuilds the server config\n\t\t\t\t\t\tCronjob::inserttask(TaskId::REBUILD_DNS);\n\n\t\t\t\t\t\t$this->logger()->logAction(FroxlorLogger::ADM_ACTION, LOG_WARNING, \"[API] deleted IP/port '\" . $result['ip'] . \":\" . $result['port'] . \"'\");\n\t\t\t\t\t\treturn $this->response($result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tResponse::standardError('cantdeletesystemip', '', true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tResponse::standardError('cantdeletedefaultip', '', true);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tResponse::standardError('ipstillhasdomains', '', true);\n\t\t\t}\n\t\t}\n\t\tthrow new Exception(\"Not allowed to execute given command.\", 403);\n\t}\n}\n"], "filenames": ["admin_cronjobs.php", "admin_ipsandports.php", "admin_mysqlserver.php", "lib/Froxlor/Api/Commands/IpsAndPorts.php"], "buggy_code_start_loc": [39, 41, 41, 394], "buggy_code_end_loc": [40, 42, 42, 395], "fixing_code_start_loc": [39, 41, 41, 394], "fixing_code_end_loc": [40, 42, 42, 395], "type": "CWE-285", "message": "Improper Authorization in GitHub repository froxlor/froxlor prior to 2.0.0-beta1.", "other": {"cve": {"id": "CVE-2022-4868", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-31T10:15:13.697", "lastModified": "2023-01-06T21:20:41.477", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authorization in GitHub repository froxlor/froxlor prior to 2.0.0-beta1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.10.38.3", "matchCriteriaId": "3C43AD25-CDFD-4230-8D94-3689ADAFF042"}]}]}], "references": [{"url": "https://github.com/froxlor/froxlor/commit/0527f22dc942483430f8449e25a096bb8d683a5d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3a8f36ac-5eda-41e7-a9c4-e0f3d63e6e3b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/froxlor/froxlor/commit/0527f22dc942483430f8449e25a096bb8d683a5d"}}