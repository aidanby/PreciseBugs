{"buggy_code": ["#!/usr/local/bin/perl\n# run.cgi\n# Run some command with the given parameters\n\nrequire './custom-lib.pl';\n$theme_no_table = 1;\nif ($ENV{'CONTENT_TYPE'} =~ /multipart\\/form-data/i) {\n\t&ReadParse(\\%getin, \"GET\");\n\t&ReadParseMime(undef, \\&read_parse_mime_callback, [ $getin{'id'} ]);\n\t}\nelse {\n\t&ReadParse();\n\t}\n$| = 1;\n&error_setup($text{'run_err'});\n$cmd = &get_command($in{'id'}, $in{'idx'});\n&can_run_command($cmd) || &error($text{'run_ecannot'});\nif (&supports_users()) {\n\t$user = $cmd->{'user'} eq '*' ? $remote_user : $cmd->{'user'};\n\t@user_info = getpwnam($user);\n\t@user_info || &error(&text('run_ecmduser', $user));\n\t}\nelse {\n\t@user_info = ( \"root\", undef, 0, 0 );\n\t}\n\n# substitute parameters into command\n($env, $export, $str, $displaystr) = &set_parameter_envs(\n\t\t\t\t\t$cmd, $cmd->{'cmd'}, \\@user_info);\n\n# work out hosts\n@hosts = @{$cmd->{'hosts'}};\n@hosts = ( 0 ) if (!@hosts);\n@servers = &list_servers();\n\n# Run and display output\nif ($cmd->{'format'} ne 'redirect' && $cmd->{'format'} ne 'form') {\n\tif ($cmd->{'format'}) {\n\t\tprint \"Content-type: \",$cmd->{'format'},\"\\n\";\n\t\tprint \"\\n\";\n\t\t}\n\telse {\n\t\t&ui_print_unbuffered_header($cmd->{'desc'}, $text{'run_title'},\n\t\t\t\t\t    \"\", -d \"help\" ? \"run\" : undef);\n\t\t}\n\t}\n\n&remote_error_setup(\\&remote_custom_handler);\n\nforeach $h (@hosts) {\n\t($server) = grep { $_->{'id'} eq $h } @servers;\n\tnext if (!$server);\n\t$txt = $cmd->{'noshow'} ? 'run_out2' : 'run_out';\n\tif (@{$cmd->{'hosts'}}) {\n\t\t$txt .= 'on';\n\t\t}\n\tif (!$cmd->{'format'}) {\n\t\tprint &text($txt, \"<tt>\".&html_escape($displaystr).\"</tt>\",\n\t\t    $server->{'desc'} || \"<tt>$server->{'host'}</tt>\"),\"\\n\";\n\t\tprint \"<pre>\" if (!$cmd->{'raw'});\n\t\t}\n\t$remote_custom_error = undef;\n\tif ($h == 0) {\n\t\t# Run locally\n\t\t($got, $out, $timeout) = &execute_custom_command(\n\t\t\t\t\t$cmd, $env, $export, $str,\n\t\t\t\t\t$cmd->{'format'} ne 'redirect' &&\n\t\t\t\t\t$cmd->{'format'} ne 'form');\n\t\t}\n\telse {\n\t\t# Remote foreign call\n\t\teval {\n\t\t\t$SIG{'ALRM'} = sub { die \"timeout\" };\n\t\t\talarm($cmd->{'timeout'} ? $cmd->{'timeout'} + 5 : 60);\n\t\t\t&remote_foreign_require($server->{'host'}, \"custom\",\n\t\t\t\t\t\t\"custom-lib.pl\");\n\t\t\t&remote_foreign_call($server->{'host'}, \"custom\",\n\t\t\t\t     \"set_parameter_envs\", $cmd, $cmd->{'cmd'},\n\t\t\t\t     \\@user_info, \\%in, 1);\n\t\t\t($got, $out, $timeout) = &remote_foreign_call(\n\t\t\t   $server->{'host'}, \"custom\",\n\t\t\t   \"execute_custom_command\", $cmd, $env, $export, $str);\n\t\t\t};\n\t\tif ($@ =~ /timeout/) {\n\t\t\t$timeout = 1;\n\t\t\t}\n\t\talarm(0);\n\t\t}\n\tif ($h == 0) {\n\t\t&additional_log('exec', undef, $displaystr);\n\t\t}\n\tif (!$remote_custom_error) {\n\t\tprint $out if ($h != 0 && $cmd->{'format'} ne 'redirect' &&\n\t\t\t\t\t  $cmd->{'format'} ne 'form');\n\t\tif (!$got && !$cmd->{'format'}) {\n\t\t\tprint \"<i>$text{'run_noout'}</i>\\n\";\n\t\t\t}\n\t\t}\n\n\tif (!$cmd->{'format'}) {\n\t\tprint \"</pre>\\n\" if (!$cmd->{'raw'});\n\t\tif ($remote_custom_error) {\n\t\t\tprint \"<b>$remote_custom_error</b><p>\\n\";\n\t\t\t}\n\t\telsif ($timeout) {\n\t\t\tprint \"<b>\",&text('run_timeout',\n\t\t\t\t\t  $cmd->{'timeout'} || 60),\"</b><p>\\n\";\n\t\t\t}\n\t\t}\n\n\t# Only log non-upload inputs\n\t%cmdin = ( %$cmd );\n\tforeach $i (keys %in) {\n\t\t($arg) = grep { $_->{'name'} eq $i } @{$cmd->{'args'}};\n\t\tif ($arg->{'type'} != 10) {\n\t\t\t$cmdin{$i} = $in{$i};\n\t\t\t}\n\t\t}\n\t}\n&webmin_log(\"exec\", \"command\", $cmd->{'id'}, \\%cmdin);\nunlink(@unlink) if (@unlink);\nif (!$cmd->{'format'}) {\n\t&ui_print_footer(\"\", $text{'index_return'});\n\t}\nelsif ($cmd->{'format'} eq 'redirect') {\n\t&redirect(\"\");\n\t}\nelsif ($cmd->{'format'} eq 'form') {\n\t&redirect(\"form.cgi?id=\".$in{'id'}.\"&idx=\".$in{'idx'});\n\t}\n\nsub remote_custom_handler\n{\n$remote_custom_error = join(\"\", @_);\n}\n\n"], "fixing_code": ["#!/usr/local/bin/perl\n# run.cgi\n# Run some command with the given parameters\n\nrequire './custom-lib.pl';\n$theme_no_table = 1;\nif ($ENV{'CONTENT_TYPE'} =~ /multipart\\/form-data/i) {\n\t&ReadParse(\\%getin, \"GET\");\n\t&ReadParseMime(undef, \\&read_parse_mime_callback, [ $getin{'id'} ]);\n\t}\nelse {\n\t&ReadParse();\n\t}\n$| = 1;\n&error_setup($text{'run_err'});\n$cmd = &get_command($in{'id'}, $in{'idx'});\n&can_run_command($cmd) || &error($text{'run_ecannot'});\nif (&supports_users()) {\n\t$user = $cmd->{'user'} eq '*' ? $remote_user : $cmd->{'user'};\n\t@user_info = getpwnam($user);\n\t@user_info || &error(&text('run_ecmduser', $user));\n\t}\nelse {\n\t@user_info = ( \"root\", undef, 0, 0 );\n\t}\n\n# substitute parameters into command\n($env, $export, $str, $displaystr) = &set_parameter_envs(\n\t\t\t\t\t$cmd, $cmd->{'cmd'}, \\@user_info);\n\n# work out hosts\n@hosts = @{$cmd->{'hosts'}};\n@hosts = ( 0 ) if (!@hosts);\n@servers = &list_servers();\n\n# Run and display output\nif ($cmd->{'format'} ne 'redirect' && $cmd->{'format'} ne 'form') {\n\tif ($cmd->{'format'}) {\n\t\tprint \"Content-type: \",$cmd->{'format'},\"\\n\";\n\t\tprint \"\\n\";\n\t\t}\n\telse {\n\t\t&ui_print_unbuffered_header(\n\t\t\t&html_escape($cmd->{'desc'}), $text{'run_title'},\n\t\t\t\"\", -d \"help\" ? \"run\" : undef);\n\t\t}\n\t}\n\n&remote_error_setup(\\&remote_custom_handler);\n\nforeach $h (@hosts) {\n\t($server) = grep { $_->{'id'} eq $h } @servers;\n\tnext if (!$server);\n\t$txt = $cmd->{'noshow'} ? 'run_out2' : 'run_out';\n\tif (@{$cmd->{'hosts'}}) {\n\t\t$txt .= 'on';\n\t\t}\n\tif (!$cmd->{'format'}) {\n\t\tprint &text($txt, \"<tt>\".&html_escape($displaystr).\"</tt>\",\n\t\t    $server->{'desc'} || \"<tt>$server->{'host'}</tt>\"),\"\\n\";\n\t\tprint \"<pre>\" if (!$cmd->{'raw'});\n\t\t}\n\t$remote_custom_error = undef;\n\tif ($h == 0) {\n\t\t# Run locally\n\t\t($got, $out, $timeout) = &execute_custom_command(\n\t\t\t\t\t$cmd, $env, $export, $str,\n\t\t\t\t\t$cmd->{'format'} ne 'redirect' &&\n\t\t\t\t\t$cmd->{'format'} ne 'form');\n\t\t}\n\telse {\n\t\t# Remote foreign call\n\t\teval {\n\t\t\t$SIG{'ALRM'} = sub { die \"timeout\" };\n\t\t\talarm($cmd->{'timeout'} ? $cmd->{'timeout'} + 5 : 60);\n\t\t\t&remote_foreign_require($server->{'host'}, \"custom\",\n\t\t\t\t\t\t\"custom-lib.pl\");\n\t\t\t&remote_foreign_call($server->{'host'}, \"custom\",\n\t\t\t\t     \"set_parameter_envs\", $cmd, $cmd->{'cmd'},\n\t\t\t\t     \\@user_info, \\%in, 1);\n\t\t\t($got, $out, $timeout) = &remote_foreign_call(\n\t\t\t   $server->{'host'}, \"custom\",\n\t\t\t   \"execute_custom_command\", $cmd, $env, $export, $str);\n\t\t\t};\n\t\tif ($@ =~ /timeout/) {\n\t\t\t$timeout = 1;\n\t\t\t}\n\t\talarm(0);\n\t\t}\n\tif ($h == 0) {\n\t\t&additional_log('exec', undef, $displaystr);\n\t\t}\n\tif (!$remote_custom_error) {\n\t\tprint $out if ($h != 0 && $cmd->{'format'} ne 'redirect' &&\n\t\t\t\t\t  $cmd->{'format'} ne 'form');\n\t\tif (!$got && !$cmd->{'format'}) {\n\t\t\tprint \"<i>$text{'run_noout'}</i>\\n\";\n\t\t\t}\n\t\t}\n\n\tif (!$cmd->{'format'}) {\n\t\tprint \"</pre>\\n\" if (!$cmd->{'raw'});\n\t\tif ($remote_custom_error) {\n\t\t\tprint \"<b>$remote_custom_error</b><p>\\n\";\n\t\t\t}\n\t\telsif ($timeout) {\n\t\t\tprint \"<b>\",&text('run_timeout',\n\t\t\t\t\t  $cmd->{'timeout'} || 60),\"</b><p>\\n\";\n\t\t\t}\n\t\t}\n\n\t# Only log non-upload inputs\n\t%cmdin = ( %$cmd );\n\tforeach $i (keys %in) {\n\t\t($arg) = grep { $_->{'name'} eq $i } @{$cmd->{'args'}};\n\t\tif ($arg->{'type'} != 10) {\n\t\t\t$cmdin{$i} = $in{$i};\n\t\t\t}\n\t\t}\n\t}\n&webmin_log(\"exec\", \"command\", $cmd->{'id'}, \\%cmdin);\nunlink(@unlink) if (@unlink);\nif (!$cmd->{'format'}) {\n\t&ui_print_footer(\"\", $text{'index_return'});\n\t}\nelsif ($cmd->{'format'} eq 'redirect') {\n\t&redirect(\"\");\n\t}\nelsif ($cmd->{'format'} eq 'form') {\n\t&redirect(\"form.cgi?id=\".$in{'id'}.\"&idx=\".$in{'idx'});\n\t}\n\nsub remote_custom_handler\n{\n$remote_custom_error = join(\"\", @_);\n}\n\n"], "filenames": ["custom/run.cgi"], "buggy_code_start_loc": [43], "buggy_code_end_loc": [45], "fixing_code_start_loc": [43], "fixing_code_end_loc": [46], "type": "CWE-79", "message": "custom/run.cgi in Webmin before 1.870 allows remote authenticated administrators to conduct XSS attacks via the description field in the custom command functionality.", "other": {"cve": {"id": "CVE-2017-17089", "sourceIdentifier": "cve@mitre.org", "published": "2017-12-30T17:29:00.263", "lastModified": "2018-01-12T12:55:45.607", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "custom/run.cgi in Webmin before 1.870 allows remote authenticated administrators to conduct XSS attacks via the description field in the custom command functionality."}, {"lang": "es", "value": "custom/run.cgi en Webmin en versiones anteriores a la 1.870 permite que los administradores autenticados remotos realicen ataques de Cross-Site Scripting (XSS) mediante el campo description en la funcionalidad de comando personalizado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:webmin:webmin:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.860", "matchCriteriaId": "EC6BA8D6-7E87-4C91-97C3-094D30EF55F7"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/102339", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/webmin/webmin/commit/a9c97eea6c268fb83d93a817d58bac75e0d2599e", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/webmin/webmin/commit/a9c97eea6c268fb83d93a817d58bac75e0d2599e"}}