{"buggy_code": ["<?php\n\nnamespace Pterodactyl\\Http;\n\nuse Pterodactyl\\Models\\ApiKey;\nuse Illuminate\\Auth\\Middleware\\Authorize;\nuse Illuminate\\Auth\\Middleware\\Authenticate;\nuse Pterodactyl\\Http\\Middleware\\TrimStrings;\nuse Pterodactyl\\Http\\Middleware\\TrustProxies;\nuse Illuminate\\Session\\Middleware\\StartSession;\nuse Pterodactyl\\Http\\Middleware\\EncryptCookies;\nuse Pterodactyl\\Http\\Middleware\\Api\\IsValidJson;\nuse Pterodactyl\\Http\\Middleware\\VerifyCsrfToken;\nuse Pterodactyl\\Http\\Middleware\\VerifyReCaptcha;\nuse Pterodactyl\\Http\\Middleware\\AdminAuthenticate;\nuse Illuminate\\Routing\\Middleware\\ThrottleRequests;\nuse Pterodactyl\\Http\\Middleware\\LanguageMiddleware;\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\nuse Pterodactyl\\Http\\Middleware\\Api\\AuthenticateKey;\nuse Illuminate\\Routing\\Middleware\\SubstituteBindings;\nuse Illuminate\\Session\\Middleware\\AuthenticateSession;\nuse Illuminate\\View\\Middleware\\ShareErrorsFromSession;\nuse Pterodactyl\\Http\\Middleware\\MaintenanceMiddleware;\nuse Pterodactyl\\Http\\Middleware\\RedirectIfAuthenticated;\nuse Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth;\nuse Pterodactyl\\Http\\Middleware\\Api\\AuthenticateIPAccess;\nuse Pterodactyl\\Http\\Middleware\\Api\\ApiSubstituteBindings;\nuse Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize;\nuse Pterodactyl\\Http\\Middleware\\Api\\HandleStatelessRequest;\nuse Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse;\nuse Pterodactyl\\Http\\Middleware\\Api\\Daemon\\DaemonAuthenticate;\nuse Pterodactyl\\Http\\Middleware\\RequireTwoFactorAuthentication;\nuse Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode;\nuse Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull;\nuse Pterodactyl\\Http\\Middleware\\Api\\Client\\SubstituteClientApiBindings;\nuse Pterodactyl\\Http\\Middleware\\Api\\Application\\AuthenticateApplicationUser;\n\nclass Kernel extends HttpKernel\n{\n    /**\n     * The application's global HTTP middleware stack.\n     *\n     * @var array\n     */\n    protected $middleware = [\n        CheckForMaintenanceMode::class,\n        EncryptCookies::class,\n        ValidatePostSize::class,\n        TrimStrings::class,\n        ConvertEmptyStringsToNull::class,\n        TrustProxies::class,\n    ];\n\n    /**\n     * The application's route middleware groups.\n     *\n     * @var array\n     */\n    protected $middlewareGroups = [\n        'web' => [\n            AddQueuedCookiesToResponse::class,\n            StartSession::class,\n            AuthenticateSession::class,\n            ShareErrorsFromSession::class,\n            VerifyCsrfToken::class,\n            SubstituteBindings::class,\n            LanguageMiddleware::class,\n            RequireTwoFactorAuthentication::class,\n        ],\n        'api' => [\n            HandleStatelessRequest::class,\n            IsValidJson::class,\n            StartSession::class,\n            AuthenticateSession::class,\n            ApiSubstituteBindings::class,\n            'api..key:' . ApiKey::TYPE_APPLICATION,\n            AuthenticateApplicationUser::class,\n            AuthenticateIPAccess::class,\n        ],\n        'client-api' => [\n            HandleStatelessRequest::class,\n            IsValidJson::class,\n            StartSession::class,\n            AuthenticateSession::class,\n            SubstituteClientApiBindings::class,\n            'api..key:' . ApiKey::TYPE_ACCOUNT,\n            AuthenticateIPAccess::class,\n            // This is perhaps a little backwards with the Client API, but logically you'd be unable\n            // to create/get an API key without first enabling 2FA on the account, so I suppose in the\n            // end it makes sense.\n            //\n            // You just wouldn't be authenticating with the API by providing a 2FA token.\n            RequireTwoFactorAuthentication::class,\n        ],\n        'daemon' => [\n            SubstituteBindings::class,\n            DaemonAuthenticate::class,\n        ],\n    ];\n\n    /**\n     * The application's route middleware.\n     *\n     * @var array\n     */\n    protected $routeMiddleware = [\n        'auth' => Authenticate::class,\n        'auth.basic' => AuthenticateWithBasicAuth::class,\n        'guest' => RedirectIfAuthenticated::class,\n        'admin' => AdminAuthenticate::class,\n        'csrf' => VerifyCsrfToken::class,\n        'throttle' => ThrottleRequests::class,\n        'can' => Authorize::class,\n        'bindings' => SubstituteBindings::class,\n        'recaptcha' => VerifyReCaptcha::class,\n        'node.maintenance' => MaintenanceMiddleware::class,\n        // API Specific Middleware\n        'api..key' => AuthenticateKey::class,\n    ];\n}\n", "<?php\n\nnamespace Pterodactyl\\Http\\Middleware\\Api;\n\nuse Closure;\nuse Carbon\\CarbonImmutable;\nuse Illuminate\\Http\\Request;\nuse Pterodactyl\\Models\\User;\nuse Pterodactyl\\Models\\ApiKey;\nuse Illuminate\\Auth\\AuthManager;\nuse Illuminate\\Contracts\\Encryption\\Encrypter;\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpException;\nuse Pterodactyl\\Exceptions\\Repository\\RecordNotFoundException;\nuse Pterodactyl\\Contracts\\Repository\\ApiKeyRepositoryInterface;\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\n\nclass AuthenticateKey\n{\n    /**\n     * @var \\Illuminate\\Auth\\AuthManager\n     */\n    private $auth;\n\n    /**\n     * @var \\Illuminate\\Contracts\\Encryption\\Encrypter\n     */\n    private $encrypter;\n\n    /**\n     * @var \\Pterodactyl\\Contracts\\Repository\\ApiKeyRepositoryInterface\n     */\n    private $repository;\n\n    /**\n     * AuthenticateKey constructor.\n     */\n    public function __construct(ApiKeyRepositoryInterface $repository, AuthManager $auth, Encrypter $encrypter)\n    {\n        $this->auth = $auth;\n        $this->encrypter = $encrypter;\n        $this->repository = $repository;\n    }\n\n    /**\n     * Handle an API request by verifying that the provided API key is in a valid\n     * format and exists in the database. If there is currently a user in the session\n     * do not even bother to look at the token (they provided a cookie for this to\n     * be the case).\n     *\n     * @return mixed\n     *\n     * @throws \\Pterodactyl\\Exceptions\\Model\\DataValidationException\n     * @throws \\Pterodactyl\\Exceptions\\Repository\\RecordNotFoundException\n     */\n    public function handle(Request $request, Closure $next, int $keyType)\n    {\n        if (is_null($request->bearerToken()) && is_null($request->user())) {\n            throw new HttpException(401, null, null, ['WWW-Authenticate' => 'Bearer']);\n        }\n\n        // This is a request coming through using cookies, we have an authenticated user\n        // not using an API key. Make some fake API key models and continue on through\n        // the process.\n        if ($request->user() instanceof User) {\n            $model = (new ApiKey())->forceFill([\n                'user_id' => $request->user()->id,\n                'key_type' => ApiKey::TYPE_ACCOUNT,\n            ]);\n        } else {\n            $model = $this->authenticateApiKey($request->bearerToken(), $keyType);\n\n            $this->auth->guard()->loginUsingId($model->user_id);\n        }\n\n        $request->attributes->set('api_key', $model);\n\n        return $next($request);\n    }\n\n    /**\n     * Authenticate an API key.\n     *\n     * @throws \\Pterodactyl\\Exceptions\\Model\\DataValidationException\n     * @throws \\Pterodactyl\\Exceptions\\Repository\\RecordNotFoundException\n     */\n    protected function authenticateApiKey(string $key, int $keyType): ApiKey\n    {\n        $identifier = substr($key, 0, ApiKey::IDENTIFIER_LENGTH);\n        $token = substr($key, ApiKey::IDENTIFIER_LENGTH);\n\n        try {\n            $model = $this->repository->findFirstWhere([\n                ['identifier', '=', $identifier],\n                ['key_type', '=', $keyType],\n            ]);\n        } catch (RecordNotFoundException $exception) {\n            throw new AccessDeniedHttpException();\n        }\n\n        if (!hash_equals($this->encrypter->decrypt($model->token), $token)) {\n            throw new AccessDeniedHttpException();\n        }\n\n        $this->repository->withoutFreshModel()->update($model->id, ['last_used_at' => CarbonImmutable::now()]);\n\n        return $model;\n    }\n}\n", "<?php\n\nnamespace Pterodactyl\\Http\\Middleware;\n\nuse Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as BaseVerifier;\n\nclass VerifyCsrfToken extends BaseVerifier\n{\n    /**\n     * The URIs that should be excluded from CSRF verification.\n     *\n     * @var array\n     */\n    protected $except = [\n        'remote/*',\n        'daemon/*',\n        'api/*',\n    ];\n}\n", "import axios, { AxiosInstance } from 'axios';\nimport { store } from '@/state';\n\nconst http: AxiosInstance = axios.create({\n    timeout: 20000,\n    headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        'X-CSRF-Token': (window as any).X_CSRF_TOKEN as string || '',\n    },\n});\n\nhttp.interceptors.request.use(req => {\n    if (!req.url?.endsWith('/resources') && (req.url?.indexOf('_debugbar') || -1) < 0) {\n        store.getActions().progress.startContinuous();\n    }\n\n    return req;\n});\n\nhttp.interceptors.response.use(resp => {\n    if (!resp.request?.url?.endsWith('/resources') && (resp.request?.url?.indexOf('_debugbar') || -1) < 0) {\n        store.getActions().progress.setComplete();\n    }\n\n    return resp;\n}, error => {\n    store.getActions().progress.setComplete();\n\n    throw error;\n});\n\n// If we have a phpdebugbar instance registered at this point in time go\n// ahead and route the response data through to it so things show up.\n// @ts-ignore\nif (typeof window.phpdebugbar !== 'undefined') {\n    http.interceptors.response.use(response => {\n        // @ts-ignore\n        window.phpdebugbar.ajaxHandler.handle(response.request);\n\n        return response;\n    });\n}\n\nexport default http;\n\n/**\n * Converts an error into a human readable response. Mostly just a generic helper to\n * make sure we display the message from the server back to the user if we can.\n */\nexport function httpErrorToHuman (error: any): string {\n    if (error.response && error.response.data) {\n        let { data } = error.response;\n\n        // Some non-JSON requests can still return the error as a JSON block. In those cases, attempt\n        // to parse it into JSON so we can display an actual error.\n        if (typeof data === 'string') {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                // do nothing, bad json\n            }\n        }\n\n        if (data.errors && data.errors[0] && data.errors[0].detail) {\n            return data.errors[0].detail;\n        }\n\n        // Errors from wings directory, mostly just for file uploads.\n        if (data.error && typeof data.error === 'string') {\n            return data.error;\n        }\n    }\n\n    return error.message;\n}\n\nexport interface FractalResponseData {\n    object: string;\n    attributes: {\n        [k: string]: any;\n        relationships?: Record<string, FractalResponseData | FractalResponseList>;\n    };\n}\n\nexport interface FractalResponseList {\n    object: 'list';\n    data: FractalResponseData[];\n}\n\nexport interface PaginatedResult<T> {\n    items: T[];\n    pagination: PaginationDataSet;\n}\n\ninterface PaginationDataSet {\n    total: number;\n    count: number;\n    perPage: number;\n    currentPage: number;\n    totalPages: number;\n}\n\nexport function getPaginationSet (data: any): PaginationDataSet {\n    return {\n        total: data.total,\n        count: data.count,\n        perPage: data.per_page,\n        currentPage: data.current_page,\n        totalPages: data.total_pages,\n    };\n}\n", "{{-- Pterodactyl - Panel --}}\n{{-- Copyright (c) 2015 - 2017 Dane Everitt <dane@daneeveritt.com> --}}\n\n{{-- This software is licensed under the terms of the MIT license. --}}\n{{-- https://opensource.org/licenses/MIT --}}\n@extends('layouts.admin')\n\n@section('title')\n    {{ $node->name }}: Configuration\n@endsection\n\n@section('content-header')\n    <h1>{{ $node->name }}<small>Your daemon configuration file.</small></h1>\n    <ol class=\"breadcrumb\">\n        <li><a href=\"{{ route('admin.index') }}\">Admin</a></li>\n        <li><a href=\"{{ route('admin.nodes') }}\">Nodes</a></li>\n        <li><a href=\"{{ route('admin.nodes.view', $node->id) }}\">{{ $node->name }}</a></li>\n        <li class=\"active\">Configuration</li>\n    </ol>\n@endsection\n\n@section('content')\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <div class=\"nav-tabs-custom nav-tabs-floating\">\n            <ul class=\"nav nav-tabs\">\n                <li><a href=\"{{ route('admin.nodes.view', $node->id) }}\">About</a></li>\n                <li><a href=\"{{ route('admin.nodes.view.settings', $node->id) }}\">Settings</a></li>\n                <li class=\"active\"><a href=\"{{ route('admin.nodes.view.configuration', $node->id) }}\">Configuration</a></li>\n                <li><a href=\"{{ route('admin.nodes.view.allocation', $node->id) }}\">Allocation</a></li>\n                <li><a href=\"{{ route('admin.nodes.view.servers', $node->id) }}\">Servers</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-sm-8\">\n        <div class=\"box box-primary\">\n            <div class=\"box-header with-border\">\n                <h3 class=\"box-title\">Configuration File</h3>\n            </div>\n            <div class=\"box-body\">\n                <pre class=\"no-margin\">{{ $node->getYamlConfiguration() }}</pre>\n            </div>\n            <div class=\"box-footer\">\n                <p class=\"no-margin\">This file should be placed in your daemon's root directory (usually <code>/etc/pterodactyl</code>) in a file called <code>config.yml</code>.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm-4\">\n        <div class=\"box box-success\">\n            <div class=\"box-header with-border\">\n                <h3 class=\"box-title\">Auto-Deploy</h3>\n            </div>\n            <div class=\"box-body\">\n                <p class=\"text-muted small\">\n                    Use the button below to generate a custom deployment command that can be used to configure\n                    wings on the target server with a single command.\n                </p>\n            </div>\n            <div class=\"box-footer\">\n                <button type=\"button\" id=\"configTokenBtn\" class=\"btn btn-sm btn-default\" style=\"width:100%;\">Generate Token</button>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n\n@section('footer-scripts')\n    @parent\n    <script>\n    $('#configTokenBtn').on('click', function (event) {\n        $.getJSON('{{ route('admin.nodes.view.configuration.token', $node->id) }}').done(function (data) {\n            swal({\n                type: 'success',\n                title: 'Token created.',\n                text: '<p>To auto-configure your node run the following command:<br /><small><pre>cd /etc/pterodactyl && sudo wings configure --panel-url {{ config('app.url') }} --token ' + data.token + ' --node ' + data.node + '{{ config('app.debug') ? ' --allow-insecure' : '' }}</pre></small></p>',\n                html: true\n            })\n        }).fail(function () {\n            swal({\n                title: 'Error',\n                text: 'Something went wrong creating your token.',\n                type: 'error'\n            });\n        });\n    });\n    </script>\n@endsection\n", "@extends('layouts.admin')\n@include('partials/admin.settings.nav', ['activeTab' => 'mail'])\n\n@section('title')\n    Mail Settings\n@endsection\n\n@section('content-header')\n    <h1>Mail Settings<small>Configure how Pterodactyl should handle sending emails.</small></h1>\n    <ol class=\"breadcrumb\">\n        <li><a href=\"{{ route('admin.index') }}\">Admin</a></li>\n        <li class=\"active\">Settings</li>\n    </ol>\n@endsection\n\n@section('content')\n    @yield('settings::nav')\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <div class=\"box\">\n                <div class=\"box-header with-border\">\n                    <h3 class=\"box-title\">Email Settings</h3>\n                </div>\n                @if($disabled)\n                    <div class=\"box-body\">\n                        <div class=\"row\">\n                            <div class=\"col-xs-12\">\n                                <div class=\"alert alert-info no-margin-bottom\">\n                                    This interface is limited to instances using SMTP as the mail driver. Please either use <code>php artisan p:environment:mail</code> command to update your email settings, or set <code>MAIL_DRIVER=smtp</code> in your environment file.\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                @else\n                    <form>\n                        <div class=\"box-body\">\n                            <div class=\"row\">\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">SMTP Host</label>\n                                    <div>\n                                        <input required type=\"text\" class=\"form-control\" name=\"mail:host\" value=\"{{ old('mail:host', config('mail.host')) }}\" />\n                                        <p class=\"text-muted small\">Enter the SMTP server address that mail should be sent through.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-2\">\n                                    <label class=\"control-label\">SMTP Port</label>\n                                    <div>\n                                        <input required type=\"number\" class=\"form-control\" name=\"mail:port\" value=\"{{ old('mail:port', config('mail.port')) }}\" />\n                                        <p class=\"text-muted small\">Enter the SMTP server port that mail should be sent through.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-4\">\n                                    <label class=\"control-label\">Encryption</label>\n                                    <div>\n                                        @php\n                                            $encryption = old('mail:encryption', config('mail.encryption'));\n                                        @endphp\n                                        <select name=\"mail:encryption\" class=\"form-control\">\n                                            <option value=\"\" @if($encryption === '') selected @endif>None</option>\n                                            <option value=\"tls\" @if($encryption === 'tls') selected @endif>Transport Layer Security (TLS)</option>\n                                            <option value=\"ssl\" @if($encryption === 'ssl') selected @endif>Secure Sockets Layer (SSL)</option>\n                                        </select>\n                                        <p class=\"text-muted small\">Select the type of encryption to use when sending mail.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">Username <span class=\"field-optional\"></span></label>\n                                    <div>\n                                        <input type=\"text\" class=\"form-control\" name=\"mail:username\" value=\"{{ old('mail:username', config('mail.username')) }}\" />\n                                        <p class=\"text-muted small\">The username to use when connecting to the SMTP server.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">Password <span class=\"field-optional\"></span></label>\n                                    <div>\n                                        <input type=\"password\" class=\"form-control\" name=\"mail:password\"/>\n                                        <p class=\"text-muted small\">The password to use in conjunction with the SMTP username. Leave blank to continue using the existing password. To set the password to an empty value enter <code>!e</code> into the field.</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <hr />\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">Mail From</label>\n                                    <div>\n                                        <input required type=\"email\" class=\"form-control\" name=\"mail:from:address\" value=\"{{ old('mail:from:address', config('mail.from.address')) }}\" />\n                                        <p class=\"text-muted small\">Enter an email address that all outgoing emails will originate from.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">Mail From Name <span class=\"field-optional\"></span></label>\n                                    <div>\n                                        <input type=\"text\" class=\"form-control\" name=\"mail:from:name\" value=\"{{ old('mail:from:name', config('mail.from.name')) }}\" />\n                                        <p class=\"text-muted small\">The name that emails should appear to come from.</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"box-footer\">\n                            {{ csrf_field() }}\n                            <div class=\"pull-right\">\n                                <button type=\"button\" id=\"testButton\" class=\"btn btn-sm btn-success\">Test</button>\n                                <button type=\"button\" id=\"saveButton\" class=\"btn btn-sm btn-primary\">Save</button>\n                            </div>\n                        </div>\n                    </form>\n                @endif\n            </div>\n        </div>\n    </div>\n@endsection\n\n@section('footer-scripts')\n    @parent\n\n    <script>\n        function saveSettings() {\n            return $.ajax({\n                method: 'PATCH',\n                url: '/admin/settings/mail',\n                contentType: 'application/json',\n                data: JSON.stringify({\n                    'mail:host': $('input[name=\"mail:host\"]').val(),\n                    'mail:port': $('input[name=\"mail:port\"]').val(),\n                    'mail:encryption': $('select[name=\"mail:encryption\"]').val(),\n                    'mail:username': $('input[name=\"mail:username\"]').val(),\n                    'mail:password': $('input[name=\"mail:password\"]').val(),\n                    'mail:from:address': $('input[name=\"mail:from:address\"]').val(),\n                    'mail:from:name': $('input[name=\"mail:from:name\"]').val()\n                }),\n                headers: { 'X-CSRF-Token': $('input[name=\"_token\"]').val() }\n            }).fail(function (jqXHR) {\n                showErrorDialog(jqXHR, 'save');\n            });\n        }\n\n        function testSettings() {\n            swal({\n                type: 'info',\n                title: 'Test Mail Settings',\n                text: 'Click \"Test\" to begin the test.',\n                showCancelButton: true,\n                confirmButtonText: 'Test',\n                closeOnConfirm: false,\n                showLoaderOnConfirm: true\n            }, function () {\n                $.ajax({\n                    method: 'GET',\n                    url: '/admin/settings/mail/test',\n                    headers: { 'X-CSRF-Token': $('input[name=\"_token\"]').val() }\n                }).fail(function (jqXHR) {\n                    showErrorDialog(jqXHR, 'test');\n                }).done(function () {\n                    swal({\n                        title: 'Success',\n                        text: 'The test message was sent successfully.',\n                        type: 'success'\n                    });\n                });\n            });\n        }\n\n        function saveAndTestSettings() {\n            saveSettings().done(testSettings);\n        }\n\n        function showErrorDialog(jqXHR, verb) {\n            console.error(jqXHR);\n            var errorText = '';\n            if (!jqXHR.responseJSON) {\n                errorText = jqXHR.responseText;\n            } else if (jqXHR.responseJSON.error) {\n                errorText = jqXHR.responseJSON.error;\n            } else if (jqXHR.responseJSON.errors) {\n                $.each(jqXHR.responseJSON.errors, function (i, v) {\n                    if (v.detail) {\n                        errorText += v.detail + ' ';\n                    }\n                });\n            }\n\n            swal({\n                title: 'Whoops!',\n                text: 'An error occurred while attempting to ' + verb + ' mail settings: ' + errorText,\n                type: 'error'\n            });\n        }\n\n        $(document).ready(function () {\n            $('#testButton').on('click', saveAndTestSettings);\n            $('#saveButton').on('click', function () {\n                saveSettings().done(function () {\n                    swal({\n                        title: 'Success',\n                        text: 'Mail settings have been updated successfully and the queue worker was restarted to apply these changes.',\n                        type: 'success'\n                    });\n                });\n            });\n        });\n    </script>\n@endsection\n", "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Pterodactyl\\Http\\Middleware\\Admin\\Servers\\ServerInstalled;\n\nRoute::get('/', 'BaseController@index')->name('admin.index');\n\n/*\n|--------------------------------------------------------------------------\n| Location Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/api\n|\n*/\nRoute::group(['prefix' => 'api'], function () {\n    Route::get('/', 'ApiController@index')->name('admin.api.index');\n    Route::get('/new', 'ApiController@create')->name('admin.api.new');\n\n    Route::post('/new', 'ApiController@store');\n\n    Route::delete('/revoke/{identifier}', 'ApiController@delete')->name('admin.api.delete');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Location Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/locations\n|\n*/\nRoute::group(['prefix' => 'locations'], function () {\n    Route::get('/', 'LocationController@index')->name('admin.locations');\n    Route::get('/view/{location}', 'LocationController@view')->name('admin.locations.view');\n\n    Route::post('/', 'LocationController@create');\n    Route::patch('/view/{location}', 'LocationController@update');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Database Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/databases\n|\n*/\nRoute::group(['prefix' => 'databases'], function () {\n    Route::get('/', 'DatabaseController@index')->name('admin.databases');\n    Route::get('/view/{host}', 'DatabaseController@view')->name('admin.databases.view');\n\n    Route::post('/', 'DatabaseController@create');\n    Route::patch('/view/{host}', 'DatabaseController@update');\n    Route::delete('/view/{host}', 'DatabaseController@delete');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Settings Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/settings\n|\n*/\nRoute::group(['prefix' => 'settings'], function () {\n    Route::get('/', 'Settings\\IndexController@index')->name('admin.settings');\n    Route::get('/mail', 'Settings\\MailController@index')->name('admin.settings.mail');\n    Route::get('/mail/test', 'Settings\\MailController@test')->name('admin.settings.mail.test');\n    Route::get('/advanced', 'Settings\\AdvancedController@index')->name('admin.settings.advanced');\n\n    Route::patch('/', 'Settings\\IndexController@update');\n    Route::patch('/mail', 'Settings\\MailController@update');\n    Route::patch('/advanced', 'Settings\\AdvancedController@update');\n});\n\n/*\n|--------------------------------------------------------------------------\n| User Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/users\n|\n*/\nRoute::group(['prefix' => 'users'], function () {\n    Route::get('/', 'UserController@index')->name('admin.users');\n    Route::get('/accounts.json', 'UserController@json')->name('admin.users.json');\n    Route::get('/new', 'UserController@create')->name('admin.users.new');\n    Route::get('/view/{user}', 'UserController@view')->name('admin.users.view');\n\n    Route::post('/new', 'UserController@store');\n    Route::patch('/view/{user}', 'UserController@update');\n\n    Route::delete('/view/{user}', 'UserController@delete');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Server Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/servers\n|\n*/\nRoute::group(['prefix' => 'servers'], function () {\n    Route::get('/', 'Servers\\ServerController@index')->name('admin.servers');\n    Route::get('/new', 'Servers\\CreateServerController@index')->name('admin.servers.new');\n    Route::get('/view/{server}', 'Servers\\ServerViewController@index')->name('admin.servers.view');\n\n    Route::group(['middleware' => [ServerInstalled::class]], function () {\n        Route::get('/view/{server}/details', 'Servers\\ServerViewController@details')->name('admin.servers.view.details');\n        Route::get('/view/{server}/build', 'Servers\\ServerViewController@build')->name('admin.servers.view.build');\n        Route::get('/view/{server}/startup', 'Servers\\ServerViewController@startup')->name('admin.servers.view.startup');\n        Route::get('/view/{server}/database', 'Servers\\ServerViewController@database')->name('admin.servers.view.database');\n        Route::get('/view/{server}/mounts', 'Servers\\ServerViewController@mounts')->name('admin.servers.view.mounts');\n    });\n\n    Route::get('/view/{server}/manage', 'Servers\\ServerViewController@manage')->name('admin.servers.view.manage');\n    Route::get('/view/{server}/delete', 'Servers\\ServerViewController@delete')->name('admin.servers.view.delete');\n\n    Route::post('/new', 'Servers\\CreateServerController@store');\n    Route::post('/view/{server}/build', 'ServersController@updateBuild');\n    Route::post('/view/{server}/startup', 'ServersController@saveStartup');\n    Route::post('/view/{server}/database', 'ServersController@newDatabase');\n    Route::post('/view/{server}/mounts/{mount}', 'ServersController@addMount')->name('admin.servers.view.mounts.toggle');\n    Route::post('/view/{server}/manage/toggle', 'ServersController@toggleInstall')->name('admin.servers.view.manage.toggle');\n    Route::post('/view/{server}/manage/suspension', 'ServersController@manageSuspension')->name('admin.servers.view.manage.suspension');\n    Route::post('/view/{server}/manage/reinstall', 'ServersController@reinstallServer')->name('admin.servers.view.manage.reinstall');\n    Route::post('/view/{server}/manage/transfer', 'Servers\\ServerTransferController@transfer')->name('admin.servers.view.manage.transfer');\n    Route::post('/view/{server}/delete', 'ServersController@delete');\n\n    Route::patch('/view/{server}/details', 'ServersController@setDetails');\n    Route::patch('/view/{server}/database', 'ServersController@resetDatabasePassword');\n\n    Route::delete('/view/{server}/database/{database}/delete', 'ServersController@deleteDatabase')->name('admin.servers.view.database.delete');\n    Route::delete('/view/{server}/mounts/{mount}', 'ServersController@deleteMount');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Node Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/nodes\n|\n*/\nRoute::group(['prefix' => 'nodes'], function () {\n    Route::get('/', 'Nodes\\NodeController@index')->name('admin.nodes');\n    Route::get('/new', 'NodesController@create')->name('admin.nodes.new');\n    Route::get('/view/{node}', 'Nodes\\NodeViewController@index')->name('admin.nodes.view');\n    Route::get('/view/{node}/settings', 'Nodes\\NodeViewController@settings')->name('admin.nodes.view.settings');\n    Route::get('/view/{node}/configuration', 'Nodes\\NodeViewController@configuration')->name('admin.nodes.view.configuration');\n    Route::get('/view/{node}/allocation', 'Nodes\\NodeViewController@allocations')->name('admin.nodes.view.allocation');\n    Route::get('/view/{node}/servers', 'Nodes\\NodeViewController@servers')->name('admin.nodes.view.servers');\n    Route::get('/view/{node}/system-information', 'Nodes\\SystemInformationController');\n    Route::get('/view/{node}/settings/token', 'NodeAutoDeployController')->name('admin.nodes.view.configuration.token');\n\n    Route::post('/new', 'NodesController@store');\n    Route::post('/view/{node}/allocation', 'NodesController@createAllocation');\n    Route::post('/view/{node}/allocation/remove', 'NodesController@allocationRemoveBlock')->name('admin.nodes.view.allocation.removeBlock');\n    Route::post('/view/{node}/allocation/alias', 'NodesController@allocationSetAlias')->name('admin.nodes.view.allocation.setAlias');\n\n    Route::patch('/view/{node}/settings', 'NodesController@updateSettings');\n\n    Route::delete('/view/{node}/delete', 'NodesController@delete')->name('admin.nodes.view.delete');\n    Route::delete('/view/{node}/allocation/remove/{allocation}', 'NodesController@allocationRemoveSingle')->name('admin.nodes.view.allocation.removeSingle');\n    Route::delete('/view/{node}/allocations', 'NodesController@allocationRemoveMultiple')->name('admin.nodes.view.allocation.removeMultiple');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Mount Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/mounts\n|\n*/\nRoute::group(['prefix' => 'mounts'], function () {\n    Route::get('/', 'MountController@index')->name('admin.mounts');\n    Route::get('/view/{mount}', 'MountController@view')->name('admin.mounts.view');\n\n    Route::post('/', 'MountController@create');\n    Route::post('/{mount}/eggs', 'MountController@addEggs')->name('admin.mounts.eggs');\n    Route::post('/{mount}/nodes', 'MountController@addNodes')->name('admin.mounts.nodes');\n\n    Route::patch('/view/{mount}', 'MountController@update');\n\n    Route::delete('/{mount}/eggs/{egg_id}', 'MountController@deleteEgg');\n    Route::delete('/{mount}/nodes/{node_id}', 'MountController@deleteNode');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Nest Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/nests\n|\n*/\nRoute::group(['prefix' => 'nests'], function () {\n    Route::get('/', 'Nests\\NestController@index')->name('admin.nests');\n    Route::get('/new', 'Nests\\NestController@create')->name('admin.nests.new');\n    Route::get('/view/{nest}', 'Nests\\NestController@view')->name('admin.nests.view');\n    Route::get('/egg/new', 'Nests\\EggController@create')->name('admin.nests.egg.new');\n    Route::get('/egg/{egg}', 'Nests\\EggController@view')->name('admin.nests.egg.view');\n    Route::get('/egg/{egg}/export', 'Nests\\EggShareController@export')->name('admin.nests.egg.export');\n    Route::get('/egg/{egg}/variables', 'Nests\\EggVariableController@view')->name('admin.nests.egg.variables');\n    Route::get('/egg/{egg}/scripts', 'Nests\\EggScriptController@index')->name('admin.nests.egg.scripts');\n\n    Route::post('/new', 'Nests\\NestController@store');\n    Route::post('/import', 'Nests\\EggShareController@import')->name('admin.nests.egg.import');\n    Route::post('/egg/new', 'Nests\\EggController@store');\n    Route::post('/egg/{egg}/variables', 'Nests\\EggVariableController@store');\n\n    Route::put('/egg/{egg}', 'Nests\\EggShareController@update');\n\n    Route::patch('/view/{nest}', 'Nests\\NestController@update');\n    Route::patch('/egg/{egg}', 'Nests\\EggController@update');\n    Route::patch('/egg/{egg}/scripts', 'Nests\\EggScriptController@update');\n    Route::patch('/egg/{egg}/variables/{variable}', 'Nests\\EggVariableController@update')->name('admin.nests.egg.variables.edit');\n\n    Route::delete('/view/{nest}', 'Nests\\NestController@destroy');\n    Route::delete('/egg/{egg}', 'Nests\\EggController@destroy');\n    Route::delete('/egg/{egg}/variables/{variable}', 'Nests\\EggVariableController@destroy');\n});\n"], "fixing_code": ["<?php\n\nnamespace Pterodactyl\\Http;\n\nuse Pterodactyl\\Models\\ApiKey;\nuse Illuminate\\Auth\\Middleware\\Authorize;\nuse Illuminate\\Auth\\Middleware\\Authenticate;\nuse Pterodactyl\\Http\\Middleware\\TrimStrings;\nuse Pterodactyl\\Http\\Middleware\\TrustProxies;\nuse Illuminate\\Session\\Middleware\\StartSession;\nuse Pterodactyl\\Http\\Middleware\\EncryptCookies;\nuse Pterodactyl\\Http\\Middleware\\Api\\IsValidJson;\nuse Pterodactyl\\Http\\Middleware\\VerifyCsrfToken;\nuse Pterodactyl\\Http\\Middleware\\VerifyReCaptcha;\nuse Pterodactyl\\Http\\Middleware\\AdminAuthenticate;\nuse Illuminate\\Routing\\Middleware\\ThrottleRequests;\nuse Pterodactyl\\Http\\Middleware\\LanguageMiddleware;\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\nuse Pterodactyl\\Http\\Middleware\\Api\\AuthenticateKey;\nuse Illuminate\\Routing\\Middleware\\SubstituteBindings;\nuse Illuminate\\Session\\Middleware\\AuthenticateSession;\nuse Illuminate\\View\\Middleware\\ShareErrorsFromSession;\nuse Pterodactyl\\Http\\Middleware\\MaintenanceMiddleware;\nuse Pterodactyl\\Http\\Middleware\\RedirectIfAuthenticated;\nuse Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth;\nuse Pterodactyl\\Http\\Middleware\\Api\\AuthenticateIPAccess;\nuse Pterodactyl\\Http\\Middleware\\Api\\ApiSubstituteBindings;\nuse Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize;\nuse Pterodactyl\\Http\\Middleware\\Api\\HandleStatelessRequest;\nuse Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse;\nuse Pterodactyl\\Http\\Middleware\\Api\\Daemon\\DaemonAuthenticate;\nuse Pterodactyl\\Http\\Middleware\\RequireTwoFactorAuthentication;\nuse Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode;\nuse Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull;\nuse Pterodactyl\\Http\\Middleware\\Api\\Client\\SubstituteClientApiBindings;\nuse Pterodactyl\\Http\\Middleware\\Api\\Application\\AuthenticateApplicationUser;\n\nclass Kernel extends HttpKernel\n{\n    /**\n     * The application's global HTTP middleware stack.\n     *\n     * @var array\n     */\n    protected $middleware = [\n        CheckForMaintenanceMode::class,\n        EncryptCookies::class,\n        ValidatePostSize::class,\n        TrimStrings::class,\n        ConvertEmptyStringsToNull::class,\n        TrustProxies::class,\n    ];\n\n    /**\n     * The application's route middleware groups.\n     *\n     * @var array\n     */\n    protected $middlewareGroups = [\n        'web' => [\n            AddQueuedCookiesToResponse::class,\n            StartSession::class,\n            AuthenticateSession::class,\n            ShareErrorsFromSession::class,\n            VerifyCsrfToken::class,\n            SubstituteBindings::class,\n            LanguageMiddleware::class,\n            RequireTwoFactorAuthentication::class,\n        ],\n        'api' => [\n            HandleStatelessRequest::class,\n            IsValidJson::class,\n            StartSession::class,\n            AuthenticateSession::class,\n            ApiSubstituteBindings::class,\n            'api..key:' . ApiKey::TYPE_APPLICATION,\n            AuthenticateApplicationUser::class,\n            VerifyCsrfToken::class,\n            AuthenticateIPAccess::class,\n        ],\n        'client-api' => [\n            HandleStatelessRequest::class,\n            IsValidJson::class,\n            StartSession::class,\n            AuthenticateSession::class,\n            SubstituteClientApiBindings::class,\n            'api..key:' . ApiKey::TYPE_ACCOUNT,\n            AuthenticateIPAccess::class,\n            VerifyCsrfToken::class,\n            // This is perhaps a little backwards with the Client API, but logically you'd be unable\n            // to create/get an API key without first enabling 2FA on the account, so I suppose in the\n            // end it makes sense.\n            //\n            // You just wouldn't be authenticating with the API by providing a 2FA token.\n            RequireTwoFactorAuthentication::class,\n        ],\n        'daemon' => [\n            SubstituteBindings::class,\n            DaemonAuthenticate::class,\n        ],\n    ];\n\n    /**\n     * The application's route middleware.\n     *\n     * @var array\n     */\n    protected $routeMiddleware = [\n        'auth' => Authenticate::class,\n        'auth.basic' => AuthenticateWithBasicAuth::class,\n        'guest' => RedirectIfAuthenticated::class,\n        'admin' => AdminAuthenticate::class,\n        'csrf' => VerifyCsrfToken::class,\n        'throttle' => ThrottleRequests::class,\n        'can' => Authorize::class,\n        'bindings' => SubstituteBindings::class,\n        'recaptcha' => VerifyReCaptcha::class,\n        'node.maintenance' => MaintenanceMiddleware::class,\n        // API Specific Middleware\n        'api..key' => AuthenticateKey::class,\n    ];\n}\n", "<?php\n\nnamespace Pterodactyl\\Http\\Middleware\\Api;\n\nuse Closure;\nuse Carbon\\CarbonImmutable;\nuse Illuminate\\Http\\Request;\nuse Pterodactyl\\Models\\User;\nuse Pterodactyl\\Models\\ApiKey;\nuse Illuminate\\Auth\\AuthManager;\nuse Illuminate\\Support\\Facades\\Session;\nuse Illuminate\\Contracts\\Encryption\\Encrypter;\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpException;\nuse Pterodactyl\\Exceptions\\Repository\\RecordNotFoundException;\nuse Pterodactyl\\Contracts\\Repository\\ApiKeyRepositoryInterface;\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\n\nclass AuthenticateKey\n{\n    /**\n     * @var \\Illuminate\\Auth\\AuthManager\n     */\n    private $auth;\n\n    /**\n     * @var \\Illuminate\\Contracts\\Encryption\\Encrypter\n     */\n    private $encrypter;\n\n    /**\n     * @var \\Pterodactyl\\Contracts\\Repository\\ApiKeyRepositoryInterface\n     */\n    private $repository;\n\n    /**\n     * AuthenticateKey constructor.\n     */\n    public function __construct(ApiKeyRepositoryInterface $repository, AuthManager $auth, Encrypter $encrypter)\n    {\n        $this->auth = $auth;\n        $this->encrypter = $encrypter;\n        $this->repository = $repository;\n    }\n\n    /**\n     * Handle an API request by verifying that the provided API key is in a valid\n     * format and exists in the database. If there is currently a user in the session\n     * do not even bother to look at the token (they provided a cookie for this to\n     * be the case).\n     *\n     * @return mixed\n     *\n     * @throws \\Pterodactyl\\Exceptions\\Model\\DataValidationException\n     * @throws \\Pterodactyl\\Exceptions\\Repository\\RecordNotFoundException\n     */\n    public function handle(Request $request, Closure $next, int $keyType)\n    {\n        if (is_null($request->bearerToken()) && is_null($request->user())) {\n            throw new HttpException(401, 'A bearer token or valid user session cookie must be provided to access this endpoint.', null, ['WWW-Authenticate' => 'Bearer']);\n        }\n\n        // This is a request coming through using cookies, we have an authenticated user\n        // not using an API key. Make some fake API key models and continue on through\n        // the process.\n        if ($request->user() instanceof User) {\n            $model = (new ApiKey())->forceFill([\n                'user_id' => $request->user()->id,\n                'key_type' => ApiKey::TYPE_ACCOUNT,\n            ]);\n        } else {\n            $model = $this->authenticateApiKey($request->bearerToken(), $keyType);\n\n            $this->auth->guard()->loginUsingId($model->user_id);\n        }\n\n        $request->attributes->set('api_key', $model);\n\n        return $next($request);\n    }\n\n    /**\n     * Authenticate an API key.\n     *\n     * @throws \\Pterodactyl\\Exceptions\\Model\\DataValidationException\n     * @throws \\Pterodactyl\\Exceptions\\Repository\\RecordNotFoundException\n     */\n    protected function authenticateApiKey(string $key, int $keyType): ApiKey\n    {\n        $identifier = substr($key, 0, ApiKey::IDENTIFIER_LENGTH);\n        $token = substr($key, ApiKey::IDENTIFIER_LENGTH);\n\n        try {\n            $model = $this->repository->findFirstWhere([\n                ['identifier', '=', $identifier],\n                ['key_type', '=', $keyType],\n            ]);\n        } catch (RecordNotFoundException $exception) {\n            throw new AccessDeniedHttpException();\n        }\n\n        if (!hash_equals($this->encrypter->decrypt($model->token), $token)) {\n            throw new AccessDeniedHttpException();\n        }\n\n        $this->repository->withoutFreshModel()->update($model->id, ['last_used_at' => CarbonImmutable::now()]);\n\n        return $model;\n    }\n}\n", "<?php\n\nnamespace Pterodactyl\\Http\\Middleware;\n\nuse Closure;\nuse Pterodactyl\\Models\\ApiKey;\nuse Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken as BaseVerifier;\n\nclass VerifyCsrfToken extends BaseVerifier\n{\n    /**\n     * The URIs that should be excluded from CSRF verification. These are\n     * never hit by the front-end, and require specific token validation\n     * to work.\n     *\n     * @var string[]\n     */\n    protected $except = ['remote/*', 'daemon/*'];\n\n    /**\n     * Manually apply CSRF protection to routes depending on the authentication\n     * mechanism being used. If the API request is using an API key that exists\n     * in the database we can safely ignore CSRF protections, since that would be\n     * a manually initiated request by a user or server.\n     *\n     * All other requests should go through the standard CSRF protections that\n     * Laravel affords us. This code will be removed in v2 since we have switched\n     * to using Sanctum for the API endpoints, which handles that for us automatically.\n     *\n     * @param \\Illuminate\\Http\\Request $request\n     * @param \\Closure $next\n     * @return mixed\n     *\n     * @throws \\Illuminate\\Session\\TokenMismatchException\n     */\n    public function handle($request, Closure $next)\n    {\n        $key = $request->attributes->get('api_key');\n\n        if ($key instanceof ApiKey && $key->exists) {\n            return $next($request);\n        }\n\n        return parent::handle($request, $next);\n    }\n}\n", "import axios, { AxiosInstance } from 'axios';\nimport { store } from '@/state';\n\nconst http: AxiosInstance = axios.create({\n    timeout: 20000,\n    headers: {\n        'X-Requested-With': 'XMLHttpRequest',\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n    },\n});\n\nhttp.interceptors.request.use(req => {\n    const cookies = document.cookie.split(';').reduce((obj, val) => {\n        const [ key, value ] = val.trim().split('=').map(decodeURIComponent);\n\n        return { ...obj, [key]: value };\n    }, {} as Record<string, string>);\n\n    req.headers['X-XSRF-TOKEN'] = cookies['XSRF-TOKEN'] || 'nil';\n\n    return req;\n});\n\nhttp.interceptors.request.use(req => {\n    if (!req.url?.endsWith('/resources') && (req.url?.indexOf('_debugbar') || -1) < 0) {\n        store.getActions().progress.startContinuous();\n    }\n\n    return req;\n});\n\nhttp.interceptors.response.use(resp => {\n    if (!resp.request?.url?.endsWith('/resources') && (resp.request?.url?.indexOf('_debugbar') || -1) < 0) {\n        store.getActions().progress.setComplete();\n    }\n\n    return resp;\n}, error => {\n    store.getActions().progress.setComplete();\n\n    throw error;\n});\n\n// If we have a phpdebugbar instance registered at this point in time go\n// ahead and route the response data through to it so things show up.\n// @ts-ignore\nif (typeof window.phpdebugbar !== 'undefined') {\n    http.interceptors.response.use(response => {\n        // @ts-ignore\n        window.phpdebugbar.ajaxHandler.handle(response.request);\n\n        return response;\n    });\n}\n\nexport default http;\n\n/**\n * Converts an error into a human readable response. Mostly just a generic helper to\n * make sure we display the message from the server back to the user if we can.\n */\nexport function httpErrorToHuman (error: any): string {\n    if (error.response && error.response.data) {\n        let { data } = error.response;\n\n        // Some non-JSON requests can still return the error as a JSON block. In those cases, attempt\n        // to parse it into JSON so we can display an actual error.\n        if (typeof data === 'string') {\n            try {\n                data = JSON.parse(data);\n            } catch (e) {\n                // do nothing, bad json\n            }\n        }\n\n        if (data.errors && data.errors[0] && data.errors[0].detail) {\n            return data.errors[0].detail;\n        }\n\n        // Errors from wings directory, mostly just for file uploads.\n        if (data.error && typeof data.error === 'string') {\n            return data.error;\n        }\n    }\n\n    return error.message;\n}\n\nexport interface FractalResponseData {\n    object: string;\n    attributes: {\n        [k: string]: any;\n        relationships?: Record<string, FractalResponseData | FractalResponseList>;\n    };\n}\n\nexport interface FractalResponseList {\n    object: 'list';\n    data: FractalResponseData[];\n}\n\nexport interface PaginatedResult<T> {\n    items: T[];\n    pagination: PaginationDataSet;\n}\n\ninterface PaginationDataSet {\n    total: number;\n    count: number;\n    perPage: number;\n    currentPage: number;\n    totalPages: number;\n}\n\nexport function getPaginationSet (data: any): PaginationDataSet {\n    return {\n        total: data.total,\n        count: data.count,\n        perPage: data.per_page,\n        currentPage: data.current_page,\n        totalPages: data.total_pages,\n    };\n}\n", "{{-- Pterodactyl - Panel --}}\n{{-- Copyright (c) 2015 - 2017 Dane Everitt <dane@daneeveritt.com> --}}\n\n{{-- This software is licensed under the terms of the MIT license. --}}\n{{-- https://opensource.org/licenses/MIT --}}\n@extends('layouts.admin')\n\n@section('title')\n    {{ $node->name }}: Configuration\n@endsection\n\n@section('content-header')\n    <h1>{{ $node->name }}<small>Your daemon configuration file.</small></h1>\n    <ol class=\"breadcrumb\">\n        <li><a href=\"{{ route('admin.index') }}\">Admin</a></li>\n        <li><a href=\"{{ route('admin.nodes') }}\">Nodes</a></li>\n        <li><a href=\"{{ route('admin.nodes.view', $node->id) }}\">{{ $node->name }}</a></li>\n        <li class=\"active\">Configuration</li>\n    </ol>\n@endsection\n\n@section('content')\n<div class=\"row\">\n    <div class=\"col-xs-12\">\n        <div class=\"nav-tabs-custom nav-tabs-floating\">\n            <ul class=\"nav nav-tabs\">\n                <li><a href=\"{{ route('admin.nodes.view', $node->id) }}\">About</a></li>\n                <li><a href=\"{{ route('admin.nodes.view.settings', $node->id) }}\">Settings</a></li>\n                <li class=\"active\"><a href=\"{{ route('admin.nodes.view.configuration', $node->id) }}\">Configuration</a></li>\n                <li><a href=\"{{ route('admin.nodes.view.allocation', $node->id) }}\">Allocation</a></li>\n                <li><a href=\"{{ route('admin.nodes.view.servers', $node->id) }}\">Servers</a></li>\n            </ul>\n        </div>\n    </div>\n</div>\n<div class=\"row\">\n    <div class=\"col-sm-8\">\n        <div class=\"box box-primary\">\n            <div class=\"box-header with-border\">\n                <h3 class=\"box-title\">Configuration File</h3>\n            </div>\n            <div class=\"box-body\">\n                <pre class=\"no-margin\">{{ $node->getYamlConfiguration() }}</pre>\n            </div>\n            <div class=\"box-footer\">\n                <p class=\"no-margin\">This file should be placed in your daemon's root directory (usually <code>/etc/pterodactyl</code>) in a file called <code>config.yml</code>.</p>\n            </div>\n        </div>\n    </div>\n    <div class=\"col-sm-4\">\n        <div class=\"box box-success\">\n            <div class=\"box-header with-border\">\n                <h3 class=\"box-title\">Auto-Deploy</h3>\n            </div>\n            <div class=\"box-body\">\n                <p class=\"text-muted small\">\n                    Use the button below to generate a custom deployment command that can be used to configure\n                    wings on the target server with a single command.\n                </p>\n            </div>\n            <div class=\"box-footer\">\n                <button type=\"button\" id=\"configTokenBtn\" class=\"btn btn-sm btn-default\" style=\"width:100%;\">Generate Token</button>\n            </div>\n        </div>\n    </div>\n</div>\n@endsection\n\n@section('footer-scripts')\n    @parent\n    <script>\n    $('#configTokenBtn').on('click', function (event) {\n        $.ajax({\n            method: 'POST',\n            url: '{{ route('admin.nodes.view.configuration.token', $node->id) }}',\n            headers: { 'X-CSRF-TOKEN': '{{ csrf_token() }}' },\n        }).done(function (data) {\n            swal({\n                type: 'success',\n                title: 'Token created.',\n                text: '<p>To auto-configure your node run the following command:<br /><small><pre>cd /etc/pterodactyl && sudo wings configure --panel-url {{ config('app.url') }} --token ' + data.token + ' --node ' + data.node + '{{ config('app.debug') ? ' --allow-insecure' : '' }}</pre></small></p>',\n                html: true\n            })\n        }).fail(function () {\n            swal({\n                title: 'Error',\n                text: 'Something went wrong creating your token.',\n                type: 'error'\n            });\n        });\n    });\n    </script>\n@endsection\n", "@extends('layouts.admin')\n@include('partials/admin.settings.nav', ['activeTab' => 'mail'])\n\n@section('title')\n    Mail Settings\n@endsection\n\n@section('content-header')\n    <h1>Mail Settings<small>Configure how Pterodactyl should handle sending emails.</small></h1>\n    <ol class=\"breadcrumb\">\n        <li><a href=\"{{ route('admin.index') }}\">Admin</a></li>\n        <li class=\"active\">Settings</li>\n    </ol>\n@endsection\n\n@section('content')\n    @yield('settings::nav')\n    <div class=\"row\">\n        <div class=\"col-xs-12\">\n            <div class=\"box\">\n                <div class=\"box-header with-border\">\n                    <h3 class=\"box-title\">Email Settings</h3>\n                </div>\n                @if($disabled)\n                    <div class=\"box-body\">\n                        <div class=\"row\">\n                            <div class=\"col-xs-12\">\n                                <div class=\"alert alert-info no-margin-bottom\">\n                                    This interface is limited to instances using SMTP as the mail driver. Please either use <code>php artisan p:environment:mail</code> command to update your email settings, or set <code>MAIL_DRIVER=smtp</code> in your environment file.\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                @else\n                    <form>\n                        <div class=\"box-body\">\n                            <div class=\"row\">\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">SMTP Host</label>\n                                    <div>\n                                        <input required type=\"text\" class=\"form-control\" name=\"mail:host\" value=\"{{ old('mail:host', config('mail.host')) }}\" />\n                                        <p class=\"text-muted small\">Enter the SMTP server address that mail should be sent through.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-2\">\n                                    <label class=\"control-label\">SMTP Port</label>\n                                    <div>\n                                        <input required type=\"number\" class=\"form-control\" name=\"mail:port\" value=\"{{ old('mail:port', config('mail.port')) }}\" />\n                                        <p class=\"text-muted small\">Enter the SMTP server port that mail should be sent through.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-4\">\n                                    <label class=\"control-label\">Encryption</label>\n                                    <div>\n                                        @php\n                                            $encryption = old('mail:encryption', config('mail.encryption'));\n                                        @endphp\n                                        <select name=\"mail:encryption\" class=\"form-control\">\n                                            <option value=\"\" @if($encryption === '') selected @endif>None</option>\n                                            <option value=\"tls\" @if($encryption === 'tls') selected @endif>Transport Layer Security (TLS)</option>\n                                            <option value=\"ssl\" @if($encryption === 'ssl') selected @endif>Secure Sockets Layer (SSL)</option>\n                                        </select>\n                                        <p class=\"text-muted small\">Select the type of encryption to use when sending mail.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">Username <span class=\"field-optional\"></span></label>\n                                    <div>\n                                        <input type=\"text\" class=\"form-control\" name=\"mail:username\" value=\"{{ old('mail:username', config('mail.username')) }}\" />\n                                        <p class=\"text-muted small\">The username to use when connecting to the SMTP server.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">Password <span class=\"field-optional\"></span></label>\n                                    <div>\n                                        <input type=\"password\" class=\"form-control\" name=\"mail:password\"/>\n                                        <p class=\"text-muted small\">The password to use in conjunction with the SMTP username. Leave blank to continue using the existing password. To set the password to an empty value enter <code>!e</code> into the field.</p>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <hr />\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">Mail From</label>\n                                    <div>\n                                        <input required type=\"email\" class=\"form-control\" name=\"mail:from:address\" value=\"{{ old('mail:from:address', config('mail.from.address')) }}\" />\n                                        <p class=\"text-muted small\">Enter an email address that all outgoing emails will originate from.</p>\n                                    </div>\n                                </div>\n                                <div class=\"form-group col-md-6\">\n                                    <label class=\"control-label\">Mail From Name <span class=\"field-optional\"></span></label>\n                                    <div>\n                                        <input type=\"text\" class=\"form-control\" name=\"mail:from:name\" value=\"{{ old('mail:from:name', config('mail.from.name')) }}\" />\n                                        <p class=\"text-muted small\">The name that emails should appear to come from.</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"box-footer\">\n                            {{ csrf_field() }}\n                            <div class=\"pull-right\">\n                                <button type=\"button\" id=\"testButton\" class=\"btn btn-sm btn-success\">Test</button>\n                                <button type=\"button\" id=\"saveButton\" class=\"btn btn-sm btn-primary\">Save</button>\n                            </div>\n                        </div>\n                    </form>\n                @endif\n            </div>\n        </div>\n    </div>\n@endsection\n\n@section('footer-scripts')\n    @parent\n\n    <script>\n        function saveSettings() {\n            return $.ajax({\n                method: 'PATCH',\n                url: '/admin/settings/mail',\n                contentType: 'application/json',\n                data: JSON.stringify({\n                    'mail:host': $('input[name=\"mail:host\"]').val(),\n                    'mail:port': $('input[name=\"mail:port\"]').val(),\n                    'mail:encryption': $('select[name=\"mail:encryption\"]').val(),\n                    'mail:username': $('input[name=\"mail:username\"]').val(),\n                    'mail:password': $('input[name=\"mail:password\"]').val(),\n                    'mail:from:address': $('input[name=\"mail:from:address\"]').val(),\n                    'mail:from:name': $('input[name=\"mail:from:name\"]').val()\n                }),\n                headers: { 'X-CSRF-Token': $('input[name=\"_token\"]').val() }\n            }).fail(function (jqXHR) {\n                showErrorDialog(jqXHR, 'save');\n            });\n        }\n\n        function testSettings() {\n            swal({\n                type: 'info',\n                title: 'Test Mail Settings',\n                text: 'Click \"Test\" to begin the test.',\n                showCancelButton: true,\n                confirmButtonText: 'Test',\n                closeOnConfirm: false,\n                showLoaderOnConfirm: true\n            }, function () {\n                $.ajax({\n                    method: 'POST',\n                    url: '/admin/settings/mail/test',\n                    headers: { 'X-CSRF-TOKEN': $('input[name=\"_token\"]').val() }\n                }).fail(function (jqXHR) {\n                    showErrorDialog(jqXHR, 'test');\n                }).done(function () {\n                    swal({\n                        title: 'Success',\n                        text: 'The test message was sent successfully.',\n                        type: 'success'\n                    });\n                });\n            });\n        }\n\n        function saveAndTestSettings() {\n            saveSettings().done(testSettings);\n        }\n\n        function showErrorDialog(jqXHR, verb) {\n            console.error(jqXHR);\n            var errorText = '';\n            if (!jqXHR.responseJSON) {\n                errorText = jqXHR.responseText;\n            } else if (jqXHR.responseJSON.error) {\n                errorText = jqXHR.responseJSON.error;\n            } else if (jqXHR.responseJSON.errors) {\n                $.each(jqXHR.responseJSON.errors, function (i, v) {\n                    if (v.detail) {\n                        errorText += v.detail + ' ';\n                    }\n                });\n            }\n\n            swal({\n                title: 'Whoops!',\n                text: 'An error occurred while attempting to ' + verb + ' mail settings: ' + errorText,\n                type: 'error'\n            });\n        }\n\n        $(document).ready(function () {\n            $('#testButton').on('click', saveAndTestSettings);\n            $('#saveButton').on('click', function () {\n                saveSettings().done(function () {\n                    swal({\n                        title: 'Success',\n                        text: 'Mail settings have been updated successfully and the queue worker was restarted to apply these changes.',\n                        type: 'success'\n                    });\n                });\n            });\n        });\n    </script>\n@endsection\n", "<?php\n\nuse Illuminate\\Support\\Facades\\Route;\nuse Pterodactyl\\Http\\Middleware\\Admin\\Servers\\ServerInstalled;\n\nRoute::get('/', 'BaseController@index')->name('admin.index');\n\n/*\n|--------------------------------------------------------------------------\n| Location Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/api\n|\n*/\nRoute::group(['prefix' => 'api'], function () {\n    Route::get('/', 'ApiController@index')->name('admin.api.index');\n    Route::get('/new', 'ApiController@create')->name('admin.api.new');\n\n    Route::post('/new', 'ApiController@store');\n\n    Route::delete('/revoke/{identifier}', 'ApiController@delete')->name('admin.api.delete');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Location Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/locations\n|\n*/\nRoute::group(['prefix' => 'locations'], function () {\n    Route::get('/', 'LocationController@index')->name('admin.locations');\n    Route::get('/view/{location}', 'LocationController@view')->name('admin.locations.view');\n\n    Route::post('/', 'LocationController@create');\n    Route::patch('/view/{location}', 'LocationController@update');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Database Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/databases\n|\n*/\nRoute::group(['prefix' => 'databases'], function () {\n    Route::get('/', 'DatabaseController@index')->name('admin.databases');\n    Route::get('/view/{host}', 'DatabaseController@view')->name('admin.databases.view');\n\n    Route::post('/', 'DatabaseController@create');\n    Route::patch('/view/{host}', 'DatabaseController@update');\n    Route::delete('/view/{host}', 'DatabaseController@delete');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Settings Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/settings\n|\n*/\nRoute::group(['prefix' => 'settings'], function () {\n    Route::get('/', 'Settings\\IndexController@index')->name('admin.settings');\n    Route::get('/mail', 'Settings\\MailController@index')->name('admin.settings.mail');\n    Route::get('/advanced', 'Settings\\AdvancedController@index')->name('admin.settings.advanced');\n    Route::post('/mail/test', 'Settings\\MailController@test')->name('admin.settings.mail.test');\n\n    Route::patch('/', 'Settings\\IndexController@update');\n    Route::patch('/mail', 'Settings\\MailController@update');\n    Route::patch('/advanced', 'Settings\\AdvancedController@update');\n});\n\n/*\n|--------------------------------------------------------------------------\n| User Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/users\n|\n*/\nRoute::group(['prefix' => 'users'], function () {\n    Route::get('/', 'UserController@index')->name('admin.users');\n    Route::get('/accounts.json', 'UserController@json')->name('admin.users.json');\n    Route::get('/new', 'UserController@create')->name('admin.users.new');\n    Route::get('/view/{user}', 'UserController@view')->name('admin.users.view');\n\n    Route::post('/new', 'UserController@store');\n    Route::patch('/view/{user}', 'UserController@update');\n\n    Route::delete('/view/{user}', 'UserController@delete');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Server Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/servers\n|\n*/\nRoute::group(['prefix' => 'servers'], function () {\n    Route::get('/', 'Servers\\ServerController@index')->name('admin.servers');\n    Route::get('/new', 'Servers\\CreateServerController@index')->name('admin.servers.new');\n    Route::get('/view/{server}', 'Servers\\ServerViewController@index')->name('admin.servers.view');\n\n    Route::group(['middleware' => [ServerInstalled::class]], function () {\n        Route::get('/view/{server}/details', 'Servers\\ServerViewController@details')->name('admin.servers.view.details');\n        Route::get('/view/{server}/build', 'Servers\\ServerViewController@build')->name('admin.servers.view.build');\n        Route::get('/view/{server}/startup', 'Servers\\ServerViewController@startup')->name('admin.servers.view.startup');\n        Route::get('/view/{server}/database', 'Servers\\ServerViewController@database')->name('admin.servers.view.database');\n        Route::get('/view/{server}/mounts', 'Servers\\ServerViewController@mounts')->name('admin.servers.view.mounts');\n    });\n\n    Route::get('/view/{server}/manage', 'Servers\\ServerViewController@manage')->name('admin.servers.view.manage');\n    Route::get('/view/{server}/delete', 'Servers\\ServerViewController@delete')->name('admin.servers.view.delete');\n\n    Route::post('/new', 'Servers\\CreateServerController@store');\n    Route::post('/view/{server}/build', 'ServersController@updateBuild');\n    Route::post('/view/{server}/startup', 'ServersController@saveStartup');\n    Route::post('/view/{server}/database', 'ServersController@newDatabase');\n    Route::post('/view/{server}/mounts/{mount}', 'ServersController@addMount')->name('admin.servers.view.mounts.toggle');\n    Route::post('/view/{server}/manage/toggle', 'ServersController@toggleInstall')->name('admin.servers.view.manage.toggle');\n    Route::post('/view/{server}/manage/suspension', 'ServersController@manageSuspension')->name('admin.servers.view.manage.suspension');\n    Route::post('/view/{server}/manage/reinstall', 'ServersController@reinstallServer')->name('admin.servers.view.manage.reinstall');\n    Route::post('/view/{server}/manage/transfer', 'Servers\\ServerTransferController@transfer')->name('admin.servers.view.manage.transfer');\n    Route::post('/view/{server}/delete', 'ServersController@delete');\n\n    Route::patch('/view/{server}/details', 'ServersController@setDetails');\n    Route::patch('/view/{server}/database', 'ServersController@resetDatabasePassword');\n\n    Route::delete('/view/{server}/database/{database}/delete', 'ServersController@deleteDatabase')->name('admin.servers.view.database.delete');\n    Route::delete('/view/{server}/mounts/{mount}', 'ServersController@deleteMount');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Node Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/nodes\n|\n*/\nRoute::group(['prefix' => 'nodes'], function () {\n    Route::get('/', 'Nodes\\NodeController@index')->name('admin.nodes');\n    Route::get('/new', 'NodesController@create')->name('admin.nodes.new');\n    Route::get('/view/{node}', 'Nodes\\NodeViewController@index')->name('admin.nodes.view');\n    Route::get('/view/{node}/settings', 'Nodes\\NodeViewController@settings')->name('admin.nodes.view.settings');\n    Route::get('/view/{node}/configuration', 'Nodes\\NodeViewController@configuration')->name('admin.nodes.view.configuration');\n    Route::get('/view/{node}/allocation', 'Nodes\\NodeViewController@allocations')->name('admin.nodes.view.allocation');\n    Route::get('/view/{node}/servers', 'Nodes\\NodeViewController@servers')->name('admin.nodes.view.servers');\n    Route::get('/view/{node}/system-information', 'Nodes\\SystemInformationController');\n\n    Route::post('/new', 'NodesController@store');\n    Route::post('/view/{node}/allocation', 'NodesController@createAllocation');\n    Route::post('/view/{node}/allocation/remove', 'NodesController@allocationRemoveBlock')->name('admin.nodes.view.allocation.removeBlock');\n    Route::post('/view/{node}/allocation/alias', 'NodesController@allocationSetAlias')->name('admin.nodes.view.allocation.setAlias');\n    Route::post('/view/{node}/settings/token', 'NodeAutoDeployController')->name('admin.nodes.view.configuration.token');\n\n    Route::patch('/view/{node}/settings', 'NodesController@updateSettings');\n\n    Route::delete('/view/{node}/delete', 'NodesController@delete')->name('admin.nodes.view.delete');\n    Route::delete('/view/{node}/allocation/remove/{allocation}', 'NodesController@allocationRemoveSingle')->name('admin.nodes.view.allocation.removeSingle');\n    Route::delete('/view/{node}/allocations', 'NodesController@allocationRemoveMultiple')->name('admin.nodes.view.allocation.removeMultiple');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Mount Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/mounts\n|\n*/\nRoute::group(['prefix' => 'mounts'], function () {\n    Route::get('/', 'MountController@index')->name('admin.mounts');\n    Route::get('/view/{mount}', 'MountController@view')->name('admin.mounts.view');\n\n    Route::post('/', 'MountController@create');\n    Route::post('/{mount}/eggs', 'MountController@addEggs')->name('admin.mounts.eggs');\n    Route::post('/{mount}/nodes', 'MountController@addNodes')->name('admin.mounts.nodes');\n\n    Route::patch('/view/{mount}', 'MountController@update');\n\n    Route::delete('/{mount}/eggs/{egg_id}', 'MountController@deleteEgg');\n    Route::delete('/{mount}/nodes/{node_id}', 'MountController@deleteNode');\n});\n\n/*\n|--------------------------------------------------------------------------\n| Nest Controller Routes\n|--------------------------------------------------------------------------\n|\n| Endpoint: /admin/nests\n|\n*/\nRoute::group(['prefix' => 'nests'], function () {\n    Route::get('/', 'Nests\\NestController@index')->name('admin.nests');\n    Route::get('/new', 'Nests\\NestController@create')->name('admin.nests.new');\n    Route::get('/view/{nest}', 'Nests\\NestController@view')->name('admin.nests.view');\n    Route::get('/egg/new', 'Nests\\EggController@create')->name('admin.nests.egg.new');\n    Route::get('/egg/{egg}', 'Nests\\EggController@view')->name('admin.nests.egg.view');\n    Route::get('/egg/{egg}/export', 'Nests\\EggShareController@export')->name('admin.nests.egg.export');\n    Route::get('/egg/{egg}/variables', 'Nests\\EggVariableController@view')->name('admin.nests.egg.variables');\n    Route::get('/egg/{egg}/scripts', 'Nests\\EggScriptController@index')->name('admin.nests.egg.scripts');\n\n    Route::post('/new', 'Nests\\NestController@store');\n    Route::post('/import', 'Nests\\EggShareController@import')->name('admin.nests.egg.import');\n    Route::post('/egg/new', 'Nests\\EggController@store');\n    Route::post('/egg/{egg}/variables', 'Nests\\EggVariableController@store');\n\n    Route::put('/egg/{egg}', 'Nests\\EggShareController@update');\n\n    Route::patch('/view/{nest}', 'Nests\\NestController@update');\n    Route::patch('/egg/{egg}', 'Nests\\EggController@update');\n    Route::patch('/egg/{egg}/scripts', 'Nests\\EggScriptController@update');\n    Route::patch('/egg/{egg}/variables/{variable}', 'Nests\\EggVariableController@update')->name('admin.nests.egg.variables.edit');\n\n    Route::delete('/view/{nest}', 'Nests\\NestController@destroy');\n    Route::delete('/egg/{egg}', 'Nests\\EggController@destroy');\n    Route::delete('/egg/{egg}/variables/{variable}', 'Nests\\EggVariableController@destroy');\n});\n"], "filenames": ["app/Http/Kernel.php", "app/Http/Middleware/Api/AuthenticateKey.php", "app/Http/Middleware/VerifyCsrfToken.php", "resources/scripts/api/http.ts", "resources/views/admin/nodes/view/configuration.blade.php", "resources/views/admin/settings/mail.blade.php", "routes/admin.php"], "buggy_code_start_loc": [77, 10, 4, 10, 73, 148, 69], "buggy_code_end_loc": [87, 59, 19, 11, 74, 151, 161], "fixing_code_start_loc": [78, 11, 5, 9, 73, 148, 68], "fixing_code_end_loc": [90, 60, 46, 23, 78, 151, 162], "type": "CWE-352", "message": "Pterodactyl is an open-source game server management panel built with PHP 7, React, and Go. Due to improperly configured CSRF protections on two routes, a malicious user could execute a CSRF-based attack against the following endpoints: Sending a test email and Generating a node auto-deployment token. At no point would any data be exposed to the malicious user, this would simply trigger email spam to an administrative user, or generate a single auto-deployment token unexpectedly. This token is not revealed to the malicious user, it is simply created unexpectedly in the system. This has been addressed in release `1.6.6`. Users may optionally manually apply the fixes released in v1.6.6 to patch their own systems.", "other": {"cve": {"id": "CVE-2021-41273", "sourceIdentifier": "security-advisories@github.com", "published": "2021-11-17T20:15:10.400", "lastModified": "2021-11-24T04:49:40.533", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pterodactyl is an open-source game server management panel built with PHP 7, React, and Go. Due to improperly configured CSRF protections on two routes, a malicious user could execute a CSRF-based attack against the following endpoints: Sending a test email and Generating a node auto-deployment token. At no point would any data be exposed to the malicious user, this would simply trigger email spam to an administrative user, or generate a single auto-deployment token unexpectedly. This token is not revealed to the malicious user, it is simply created unexpectedly in the system. This has been addressed in release `1.6.6`. Users may optionally manually apply the fixes released in v1.6.6 to patch their own systems."}, {"lang": "es", "value": "Pterodactyl es un panel de administraci\u00f3n de servidores de juegos de c\u00f3digo abierto construido con PHP 7, React y Go. Debido a protecciones de tipo CSRF configuradas inapropiadamente en dos rutas, un usuario malicioso podr\u00eda ejecutar un ataque basado en CSRF contra los siguientes endpoints: Env\u00edo de un correo electr\u00f3nico de prueba y Generaci\u00f3n de un token de autodespliegue de nodo. En ning\u00fan momento se expondr\u00eda ning\u00fan dato al usuario malicioso, esto simplemente desencadenar\u00eda el env\u00edo de correo electr\u00f3nico a un usuario administrativo, o generar\u00eda un \u00fanico token de auto-despliegue de forma inesperada. Este token no se revela al usuario malicioso, simplemente se crea inesperadamente en el sistema. Esto se ha abordado en la versi\u00f3n \"1.6.6\". Los usuarios pueden aplicar manualmente las correcciones publicadas en la versi\u00f3n v1.6.6 para parchear sus propios sistemas."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pterodactyl:panel:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.6.6", "matchCriteriaId": "4B4BD223-E350-4F4A-9F39-1B7EEFCB6E80"}]}]}], "references": [{"url": "https://github.com/pterodactyl/panel/commit/bf9cbe2c6d5266c6914223e067c56175de7fc3a5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pterodactyl/panel/security/advisories/GHSA-wwgq-9jhf-qgw6", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pterodactyl/panel/commit/bf9cbe2c6d5266c6914223e067c56175de7fc3a5"}}