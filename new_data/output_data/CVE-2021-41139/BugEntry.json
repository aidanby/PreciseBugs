{"buggy_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\ndefine(\"APP_VERSION\", \"1.19.29.5598\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\nrequire_once('initialize.php');\nimport('form.Form');\nimport('ttConfigHelper');\nimport('ttUserHelper');\nimport('ttGroupHelper');\nimport('ttClientHelper');\nimport('ttTimeHelper');\nimport('ttFileHelper');\nimport('DateAndTime');\n\n// Access checks.\nif (!(ttAccessAllowed('track_own_time') || ttAccessAllowed('track_time'))) {\n  header('Location: access_denied.php');\n  exit();\n}\nif ($user->behalf_id && (!$user->can('track_time') || !$user->checkBehalfId())) {\n  header('Location: access_denied.php'); // Trying on behalf, but no right or wrong user.\n  exit();\n}\nif (!$user->behalf_id && !$user->can('track_own_time') && !$user->adjustBehalfId()) {\n  header('Location: access_denied.php'); // Trying as self, but no right for self, and noone to work on behalf.\n  exit();\n}\nif ($request->isPost()) {\n  $userChanged = (bool)$request->getParameter('user_changed'); // Reused in multiple places below.\n  if ($userChanged && !($user->can('track_time') && $user->isUserValid((int)$request->getParameter('user')))) {\n    header('Location: access_denied.php'); // User changed, but no right or wrong user id.\n    exit();\n  }\n}\n// End of access checks.\n\n// Determine user for whom we display this page.\nif ($request->isPost() && $userChanged) {\n  $user_id = (int)$request->getParameter('user');\n  $user->setOnBehalfUser($user_id);\n} else {\n  $user_id = $user->getUser();\n}\n\n$group_id = $user->getGroup();\n$config = new ttConfigHelper($user->getConfig());\n\n$showClient = $user->isPluginEnabled('cl');\n$showBillable = $user->isPluginEnabled('iv');\n$trackingMode = $user->getTrackingMode();\n$showProject = MODE_PROJECTS == $trackingMode || MODE_PROJECTS_AND_TASKS == $trackingMode;\n$showTask = MODE_PROJECTS_AND_TASKS == $trackingMode;\n$taskRequired = false;\nif ($showTask) $taskRequired = $config->getDefinedValue('task_required');\n$recordType = $user->getRecordType();\n$showStart = TYPE_START_FINISH == $recordType || TYPE_ALL == $recordType;\n$showDuration = TYPE_DURATION == $recordType || TYPE_ALL == $recordType;\n$showFiles = $user->isPluginEnabled('at');\n$showRecordCustomFields = $user->isOptionEnabled('record_custom_fields');\n\n// Initialize and store date in session.\n$cl_date = $request->getParameter('date', @$_SESSION['date']);\n$selected_date = new DateAndTime(DB_DATEFORMAT, $cl_date);\nif($selected_date->isError())\n  $selected_date = new DateAndTime(DB_DATEFORMAT);\nif(!$cl_date)\n  $cl_date = $selected_date->toString(DB_DATEFORMAT);\n$_SESSION['date'] = $cl_date;\n\n// Use custom fields plugin if it is enabled.\nif ($user->isPluginEnabled('cf')) {\n  require_once('plugins/CustomFields.class.php');\n  $custom_fields = new CustomFields();\n  $smarty->assign('custom_fields', $custom_fields);\n}\n\n$showNoteColumn = !$config->getDefinedValue('time_note_on_separate_row');\n$showNoteRow = $config->getDefinedValue('time_note_on_separate_row');\nif ($showNoteRow) {\n  // Determine column span for note field.\n  $colspan = 0;\n  if ($showClient) $colspan++;\n  if ($showRecordCustomFields && isset($custom_fields) && $custom_fields->timeFields) {\n    foreach ($custom_fields->timeFields as $timeField) {\n      $colspan++;\n    }\n  }\n  if ($showProject) $colspan++;\n  if ($showTask) $colspan++;\n  if ($showStart) $colspan += 2; // Another for show finish.\n  $colspan++; // There is always a duration.\n  if ($showFiles) $colspan++;\n  $colspan++; // There is always an edit column.\n  // $colspan++; // There is always a delete column.\n  // $colspan--; // Remove one column for label.\n  $smarty->assign('colspan', $colspan);\n}\n\nif ($user->isPluginEnabled('mq')){\n  require_once('plugins/MonthlyQuota.class.php');\n  $quota = new MonthlyQuota();\n  $month_quota_minutes = $quota->getUserQuota($selected_date->mYear, $selected_date->mMonth);\n  $quota_minutes_from_1st = $quota->getUserQuotaFrom1st($selected_date);\n  $month_total = ttTimeHelper::getTimeForMonth($selected_date);\n  $month_total_minutes = ttTimeHelper::toMinutes($month_total);\n  $balance_left = $quota_minutes_from_1st - $month_total_minutes;\n  $minutes_left = $month_quota_minutes - $month_total_minutes;\n  \n  $smarty->assign('month_total', $month_total);\n  $smarty->assign('month_quota', ttTimeHelper::toAbsDuration($month_quota_minutes));\n  $smarty->assign('over_balance', $balance_left < 0);\n  $smarty->assign('balance_remaining', ttTimeHelper::toAbsDuration($balance_left));\n  $smarty->assign('over_quota', $minutes_left < 0);\n  $smarty->assign('quota_remaining', ttTimeHelper::toAbsDuration($minutes_left));\n}\n\n// Initialize variables.\n$cl_start = trim($request->getParameter('start'));\n$cl_finish = trim($request->getParameter('finish'));\n$cl_duration = trim($request->getParameter('duration'));\n$cl_note = trim($request->getParameter('note'));\n$cl_billable = 1;\nif ($showBillable) {\n  if ($request->isPost()) {\n    $cl_billable = $request->getParameter('billable');\n    $_SESSION['billable'] = (int) $cl_billable;\n  } else\n    if (isset($_SESSION['billable']))\n      $cl_billable = $_SESSION['billable'];\n}\n$cl_client = $request->getParameter('client', ($request->isPost() ? null : @$_SESSION['client']));\n$_SESSION['client'] = $cl_client;\n$cl_project = $request->getParameter('project', ($request->isPost() ? null : @$_SESSION['project']));\n$_SESSION['project'] = $cl_project;\n$cl_task = $request->getParameter('task', ($request->isPost() ? null : @$_SESSION['task']));\n$_SESSION['task'] = $cl_task;\n\n// Handle time custom fields.\n$timeCustomFields = array();\nif (isset($custom_fields) && $custom_fields->timeFields) {\n  foreach ($custom_fields->timeFields as $timeField) {\n    $control_name = 'time_field_'.$timeField['id'];\n    $cl_control_name = $request->getParameter($control_name, ($request->isPost() ? null : @$_SESSION[$control_name]));\n    $_SESSION[$control_name] = $cl_control_name;\n    $timeCustomFields[$timeField['id']] = array('field_id' => $timeField['id'],\n      'control_name' => $control_name,\n      'label' => $timeField['label'],\n      'type' => $timeField['type'],\n      'required' => $timeField['required'],\n      'value' => trim($cl_control_name));\n  }\n}\n\n// Elements of timeRecordForm.\n$form = new Form('timeRecordForm');\n$largeScreenCalendarRowSpan = 1; // Number of rows calendar spans on large screens.\n\n// Dropdown for user and a hidden control to indicate user change.\nif ($user->can('track_time')) {\n  $rank = $user->getMaxRankForGroup($group_id);\n  if ($user->can('track_own_time'))\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank,'include_self'=>true,'self_first'=>true);\n  else\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank);\n  $user_list = $user->getUsers($options);\n  if (count($user_list) >= 1) {\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'document.timeRecordForm.user_changed.value=1;document.timeRecordForm.submit();',\n      'name'=>'user',\n      'value'=>$user_id,\n      'data'=>$user_list,\n      'datakeys'=>array('id','name')));\n    $form->addInput(array('type'=>'hidden','name'=>'user_changed'));\n    $largeScreenCalendarRowSpan += 2;\n    $smarty->assign('user_dropdown', 1);\n  }\n}\n\n// Dropdown for clients in MODE_TIME. Use all active clients.\n// Note: for other tracking modes the control is added further below.\nif (MODE_TIME == $trackingMode && $showClient) {\n  $active_clients = ttGroupHelper::getActiveClients(true);\n  $form->addInput(array('type'=>'combobox',\n    'onchange'=>'fillProjectDropdown(this.value);',\n    'name'=>'client',\n    'value'=>$cl_client,\n    'data'=>$active_clients,\n    'datakeys'=>array('id', 'name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n  // Note: in other modes the client list is filtered to relevant clients only. See below.\n}\n\n// Billable checkbox.\nif ($showBillable) {\n  $form->addInput(array('type'=>'checkbox','name'=>'billable','value'=>$cl_billable));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// If we have time custom fields - add controls for them.\nif (isset($custom_fields) && $custom_fields->timeFields) {\n  foreach ($custom_fields->timeFields as $timeField) {\n    $field_name = 'time_field_'.$timeField['id'];\n    if ($timeField['type'] == CustomFields::TYPE_TEXT) {\n      $form->addInput(array('type'=>'text','name'=>$field_name,'value'=>$timeCustomFields[$timeField['id']]['value']));\n    } elseif ($timeField['type'] == CustomFields::TYPE_DROPDOWN) {\n      $form->addInput(array('type'=>'combobox','name'=>$field_name,\n      'data'=>CustomFields::getOptions($timeField['id']),\n      'value'=>$timeCustomFields[$timeField['id']]['value'],\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    }\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// If we show project dropdown, add controls for project and client.\n$project_list = $client_list = array();\nif ($showProject) {\n  // Dropdown for projects assigned to user.\n  $options['include_templates'] = $user->isPluginEnabled('tp') && $config->getDefinedValue('bind_templates_with_projects');\n  $project_list = $user->getAssignedProjects($options);\n  $form->addInput(array('type'=>'combobox',\n    'onchange'=>'fillTaskDropdown(this.value);fillTemplateDropdown(this.value);prepopulateNote();',\n    'name'=>'project',\n    'value'=>$cl_project,\n    'data'=>$project_list,\n    'datakeys'=>array('id','name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n\n  // Client dropdown.\n  if ($showClient) {\n    $active_clients = ttGroupHelper::getActiveClients(true);\n    // We need an array of assigned project ids to do some trimming.\n    foreach($project_list as $project)\n      $projects_assigned_to_user[] = $project['id'];\n\n    // Build a client list out of active clients. Use only clients that are relevant to user.\n    // Also trim their associated project list to only assigned projects (to user).\n    foreach($active_clients as $client) {\n      $projects_assigned_to_client = explode(',', $client['projects']);\n      if (is_array($projects_assigned_to_client) && is_array($projects_assigned_to_user))\n        $intersection = array_intersect($projects_assigned_to_client, $projects_assigned_to_user);\n      if ($intersection) {\n        $client['projects'] = implode(',', $intersection);\n        $client_list[] = $client;\n      }\n    }\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'fillProjectDropdown(this.value);',\n      'name'=>'client',\n      'value'=>$cl_client,\n      'data'=>$client_list,\n      'datakeys'=>array('id', 'name'),\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// Task dropdown.\n$task_list = array();\nif ($showTask) {\n  $task_list = ttGroupHelper::getActiveTasks();\n  $form->addInput(array('type'=>'combobox',\n    'name'=>'task',\n    'value'=>$cl_task,\n    'data'=>$task_list,\n    'datakeys'=>array('id','name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// Start and finish controls.\nif ($showStart) {\n  $form->addInput(array('type'=>'text','name'=>'start','value'=>$cl_start,'onchange'=>\"formDisable('start');\"));\n  $form->addInput(array('type'=>'text','name'=>'finish','value'=>$cl_finish,'onchange'=>\"formDisable('finish');\"));\n  if ($user->punch_mode && !$user->canOverridePunchMode()) {\n    // Make the start and finish fields read-only.\n    $form->getElement('start')->setEnabled(false);\n    $form->getElement('finish')->setEnabled(false);\n  }\n  $largeScreenCalendarRowSpan += 4;\n}\n\n// Duration control.\nif ($showDuration) {\n  $placeholder = $user->getDecimalMark() == ',' ? str_replace('.', ',', $i18n->get('form.time.duration_placeholder')) : $i18n->get('form.time.duration_placeholder');\n  $form->addInput(array('type'=>'text','name'=>'duration','placeholder'=>$placeholder,'value'=>$cl_duration,'onchange'=>\"formDisable('duration');\"));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// File upload control.\nif ($showFiles) {\n  $form->addInput(array('type'=>'upload','name'=>'newfile','value'=>$i18n->get('button.submit')));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// If we have templates, add a dropdown to select one.\nif ($user->isPluginEnabled('tp')){\n  $template_list = ttGroupHelper::getActiveTemplates();\n  if (count($template_list) >= 1) {\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'fillNote(this.value);',\n      'name'=>'template',\n      'data'=>$template_list,\n      'datakeys'=>array('id','name'),\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    $smarty->assign('template_dropdown', 1);\n    $smarty->assign('bind_templates_with_projects', $config->getDefinedValue('bind_templates_with_projects'));\n    $smarty->assign('prepopulate_note', $config->getDefinedValue('prepopulate_note'));\n    $smarty->assign('template_list', $template_list);\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// Note control.\n$form->addInput(array('type'=>'textarea','name'=>'note','value'=>$cl_note));\n\n// Calendar.\n$form->addInput(array('type'=>'calendar','name'=>'date','value'=>$cl_date)); // calendar\n\n// A hidden control for today's date from user's browser.\n$form->addInput(array('type'=>'hidden','name'=>'browser_today','value'=>'')); // User current date, which gets filled in on btn_submit click.\n\n// Submit button.\n$form->addInput(array('type'=>'submit','name'=>'btn_submit','onclick'=>'browser_today.value=get_date()','value'=>$i18n->get('button.submit')));\n\nif ($request->isPost()) {\n  if ($request->getParameter('btn_submit')) {\n    // Submit button clicked.\n    // Validate user input.\n    if ($showClient && $user->isOptionEnabled('client_required') && !$cl_client)\n      $err->add($i18n->get('error.client'));\n    // Validate input in time custom fields.\n    if (isset($custom_fields) && $custom_fields->timeFields) {\n      foreach ($timeCustomFields as $timeField) {\n        // Validation is the same for text and dropdown fields.\n        if (!ttValidString($timeField['value'], !$timeField['required'])) $err->add($i18n->get('error.field'), htmlspecialchars($timeField['label']));\n      }\n    }\n    if ($showProject) {\n      if (!$cl_project) $err->add($i18n->get('error.project'));\n    }\n    if ($showTask && $taskRequired) {\n      if (!$cl_task) $err->add($i18n->get('error.task'));\n    }\n    if (strlen($cl_duration) == 0) {\n      if ($cl_start || $cl_finish) {\n        if (!ttTimeHelper::isValidTime($cl_start))\n          $err->add($i18n->get('error.field'), $i18n->get('label.start'));\n        if ($cl_finish) {\n          if (!ttTimeHelper::isValidTime($cl_finish))\n            $err->add($i18n->get('error.field'), $i18n->get('label.finish'));\n          if (!ttTimeHelper::isValidInterval($cl_start, $cl_finish))\n            $err->add($i18n->get('error.interval'), $i18n->get('label.finish'), $i18n->get('label.start'));\n        }\n      } else {\n        if ($showStart) {\n          $err->add($i18n->get('error.empty'), $i18n->get('label.start'));\n          $err->add($i18n->get('error.empty'), $i18n->get('label.finish'));\n        }\n        if ($showDuration)\n          $err->add($i18n->get('error.empty'), $i18n->get('label.duration'));\n      }\n    } else {\n      if (false === ttTimeHelper::postedDurationToMinutes($cl_duration))\n        $err->add($i18n->get('error.field'), $i18n->get('label.duration'));\n    }\n    if (!ttValidString($cl_note, true)) $err->add($i18n->get('error.field'), $i18n->get('label.note'));\n    if ($user->isPluginEnabled('tp') && !ttValidTemplateText($cl_note)) {\n      $err->add($i18n->get('error.field'), $i18n->get('label.note'));\n    }\n    if (!ttTimeHelper::canAdd()) $err->add($i18n->get('error.expired'));\n    // Finished validating user input.\n\n    // Prohibit creating entries in future.\n    if (!$user->isOptionEnabled('future_entries')) {\n      $browser_today = new DateAndTime(DB_DATEFORMAT, $request->getParameter('browser_today', null));\n      if ($selected_date->after($browser_today))\n        $err->add($i18n->get('error.future_date'));\n    }\n\n    // Prohibit creating entries in locked range.\n    if ($user->isDateLocked($selected_date))\n      $err->add($i18n->get('error.range_locked'));\n\n    // Prohibit creating another uncompleted record.\n    if ($err->no()) {\n      if (($not_completed_rec = ttTimeHelper::getUncompleted($user_id)) && (($cl_finish == '') && ($cl_duration == '')))\n        $err->add($i18n->get('error.uncompleted_exists').\" <a href = 'time_edit.php?id=\".$not_completed_rec['id'].\"'>\".$i18n->get('error.goto_uncompleted').\"</a>\");\n    }\n\n    // Prohibit creating an overlapping record.\n    if ($err->no()) {\n      if (ttTimeHelper::overlaps($user_id, $cl_date, $cl_start, $cl_finish))\n        $err->add($i18n->get('error.overlap'));\n    }\n\n    // Insert record.\n    if ($err->no()) {\n      $id = ttTimeHelper::insert(array(\n        'date' => $cl_date,\n        'client' => $cl_client,\n        'project' => $cl_project,\n        'task' => $cl_task,\n        'start' => $cl_start,\n        'finish' => $cl_finish,\n        'duration' => $cl_duration,\n        'note' => $cl_note,\n        'billable' => $cl_billable));\n\n      // Insert time custom fields if we have them.\n      $result = true;\n      if ($id && isset($custom_fields) && $custom_fields->timeFields) {\n        $result = $custom_fields->insertTimeFields($id, $timeCustomFields);\n      }\n\n      // Put a new file in storage if we have it.\n      if ($id && $showFiles && $_FILES['newfile']['name']) {\n        $fileHelper = new ttFileHelper($err);\n        $fields = array('entity_type'=>'time',\n          'entity_id' => $id,\n          'file_name' => $_FILES['newfile']['name']);\n        $fileHelper->putFile($fields);\n      }\n\n      if ($id && $result && $err->no()) {\n        header('Location: time.php');\n        exit();\n      }\n      $err->add($i18n->get('error.db'));\n    }\n  } elseif ($request->getParameter('btn_stop')) {\n    // Stop button pressed to finish an uncompleted record.\n    $record_id = $request->getParameter('record_id');\n    $record = ttTimeHelper::getRecord($record_id);\n    $browser_date = $request->getParameter('browser_date');\n    $browser_time = $request->getParameter('browser_time');\n\n    // Can we complete this record?\n    if ($record['date'] == $browser_date                                // closing today's record\n      && ttTimeHelper::isValidInterval($record['start'], $browser_time) // finish time is greater than start time\n      && !ttTimeHelper::overlaps($user_id, $browser_date, $record['start'], $browser_time)) { // no overlap\n      $res = ttTimeHelper::update(array(\n          'id'=>$record['id'],\n          'date'=>$record['date'],\n          'client'=>$record['client_id'],\n          'project'=>$record['project_id'],\n          'task'=>$record['task_id'],\n          'start'=>$record['start'],\n          'finish'=>$browser_time,\n          'note'=>$record['comment'],\n          'billable'=>$record['billable']));\n      if (!$res)\n        $err->add($i18n->get('error.db'));\n    } else {\n      // Cannot complete, redirect for manual edit.\n      header('Location: time_edit.php?id='.$record_id);\n      exit();\n    }\n  }\n} // isPost\n\n$week_total = ttTimeHelper::getTimeForWeek($selected_date);\n$timeRecords = ttTimeHelper::getRecords($cl_date, $showFiles);\n$showNavigation = ($user->isPluginEnabled('wv') && !$user->isOptionEnabled('week_menu')) ||\n  ($user->isPluginEnabled('pu') && !$user->isOptionEnabled('puncher_menu'));\n\n$smarty->assign('large_screen_calendar_row_span', $largeScreenCalendarRowSpan);\n$smarty->assign('selected_date', $selected_date);\n$smarty->assign('week_total', $week_total);\n$smarty->assign('day_total', ttTimeHelper::getTimeForDay($cl_date));\n$smarty->assign('time_records', $timeRecords);\n$smarty->assign('show_record_custom_fields', $showRecordCustomFields);\n$smarty->assign('show_navigation', $showNavigation);\n$smarty->assign('show_client', $showClient);\n$smarty->assign('show_billable', $showBillable);\n$smarty->assign('show_project', $showProject);\n$smarty->assign('show_task', $showTask);\n$smarty->assign('task_required', $taskRequired);\n$smarty->assign('show_start', $showStart);\n$smarty->assign('show_duration', $showDuration);\n$smarty->assign('show_note_column', $showNoteColumn);\n$smarty->assign('show_note_row', $showNoteRow);\n$smarty->assign('show_files', $showFiles);\n$smarty->assign('client_list', $client_list);\n$smarty->assign('project_list', $project_list);\n$smarty->assign('task_list', $task_list);\n$smarty->assign('forms', array($form->getName()=>$form->toArray()));\n$smarty->assign('onload', 'onLoad=\"fillDropdowns();prepopulateNote();adjustTodayLinks()\"');\n$smarty->assign('timestring', $selected_date->toString($user->getDateFormat()));\n$smarty->assign('title', $i18n->get('title.time'));\n$smarty->assign('content_page_name', 'time.tpl');\n$smarty->display('index.tpl');\n"], "fixing_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\ndefine(\"APP_VERSION\", \"1.19.30.5599\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\nrequire_once('initialize.php');\nimport('form.Form');\nimport('ttConfigHelper');\nimport('ttUserHelper');\nimport('ttGroupHelper');\nimport('ttClientHelper');\nimport('ttTimeHelper');\nimport('ttFileHelper');\nimport('DateAndTime');\n\n// Access checks.\nif (!(ttAccessAllowed('track_own_time') || ttAccessAllowed('track_time'))) {\n  header('Location: access_denied.php');\n  exit();\n}\nif ($user->behalf_id && (!$user->can('track_time') || !$user->checkBehalfId())) {\n  header('Location: access_denied.php'); // Trying on behalf, but no right or wrong user.\n  exit();\n}\nif (!$user->behalf_id && !$user->can('track_own_time') && !$user->adjustBehalfId()) {\n  header('Location: access_denied.php'); // Trying as self, but no right for self, and noone to work on behalf.\n  exit();\n}\nif ($request->isPost()) {\n  $userChanged = (bool)$request->getParameter('user_changed'); // Reused in multiple places below.\n  if ($userChanged && !($user->can('track_time') && $user->isUserValid((int)$request->getParameter('user')))) {\n    header('Location: access_denied.php'); // User changed, but no right or wrong user id.\n    exit();\n  }\n}\n// If we are passed in a date, make sure it is in correct format.\n$date = $request->getParameter('date');\nif ($date && !ttValidDate($date)) {\n  header('Location: access_denied.php');\n  exit();\n}\n// End of access checks.\n\n// Determine user for whom we display this page.\nif ($request->isPost() && $userChanged) {\n  $user_id = (int)$request->getParameter('user');\n  $user->setOnBehalfUser($user_id);\n} else {\n  $user_id = $user->getUser();\n}\n\n$group_id = $user->getGroup();\n$config = new ttConfigHelper($user->getConfig());\n\n$showClient = $user->isPluginEnabled('cl');\n$showBillable = $user->isPluginEnabled('iv');\n$trackingMode = $user->getTrackingMode();\n$showProject = MODE_PROJECTS == $trackingMode || MODE_PROJECTS_AND_TASKS == $trackingMode;\n$showTask = MODE_PROJECTS_AND_TASKS == $trackingMode;\n$taskRequired = false;\nif ($showTask) $taskRequired = $config->getDefinedValue('task_required');\n$recordType = $user->getRecordType();\n$showStart = TYPE_START_FINISH == $recordType || TYPE_ALL == $recordType;\n$showDuration = TYPE_DURATION == $recordType || TYPE_ALL == $recordType;\n$showFiles = $user->isPluginEnabled('at');\n$showRecordCustomFields = $user->isOptionEnabled('record_custom_fields');\n\n// Initialize and store date in session.\n$cl_date = $request->getParameter('date', @$_SESSION['date']);\n$selected_date = new DateAndTime(DB_DATEFORMAT, $cl_date);\nif($selected_date->isError())\n  $selected_date = new DateAndTime(DB_DATEFORMAT);\nif(!$cl_date)\n  $cl_date = $selected_date->toString(DB_DATEFORMAT);\n$_SESSION['date'] = $cl_date;\n\n// Use custom fields plugin if it is enabled.\nif ($user->isPluginEnabled('cf')) {\n  require_once('plugins/CustomFields.class.php');\n  $custom_fields = new CustomFields();\n  $smarty->assign('custom_fields', $custom_fields);\n}\n\n$showNoteColumn = !$config->getDefinedValue('time_note_on_separate_row');\n$showNoteRow = $config->getDefinedValue('time_note_on_separate_row');\nif ($showNoteRow) {\n  // Determine column span for note field.\n  $colspan = 0;\n  if ($showClient) $colspan++;\n  if ($showRecordCustomFields && isset($custom_fields) && $custom_fields->timeFields) {\n    foreach ($custom_fields->timeFields as $timeField) {\n      $colspan++;\n    }\n  }\n  if ($showProject) $colspan++;\n  if ($showTask) $colspan++;\n  if ($showStart) $colspan += 2; // Another for show finish.\n  $colspan++; // There is always a duration.\n  if ($showFiles) $colspan++;\n  $colspan++; // There is always an edit column.\n  // $colspan++; // There is always a delete column.\n  // $colspan--; // Remove one column for label.\n  $smarty->assign('colspan', $colspan);\n}\n\nif ($user->isPluginEnabled('mq')){\n  require_once('plugins/MonthlyQuota.class.php');\n  $quota = new MonthlyQuota();\n  $month_quota_minutes = $quota->getUserQuota($selected_date->mYear, $selected_date->mMonth);\n  $quota_minutes_from_1st = $quota->getUserQuotaFrom1st($selected_date);\n  $month_total = ttTimeHelper::getTimeForMonth($selected_date);\n  $month_total_minutes = ttTimeHelper::toMinutes($month_total);\n  $balance_left = $quota_minutes_from_1st - $month_total_minutes;\n  $minutes_left = $month_quota_minutes - $month_total_minutes;\n  \n  $smarty->assign('month_total', $month_total);\n  $smarty->assign('month_quota', ttTimeHelper::toAbsDuration($month_quota_minutes));\n  $smarty->assign('over_balance', $balance_left < 0);\n  $smarty->assign('balance_remaining', ttTimeHelper::toAbsDuration($balance_left));\n  $smarty->assign('over_quota', $minutes_left < 0);\n  $smarty->assign('quota_remaining', ttTimeHelper::toAbsDuration($minutes_left));\n}\n\n// Initialize variables.\n$cl_start = trim($request->getParameter('start'));\n$cl_finish = trim($request->getParameter('finish'));\n$cl_duration = trim($request->getParameter('duration'));\n$cl_note = trim($request->getParameter('note'));\n$cl_billable = 1;\nif ($showBillable) {\n  if ($request->isPost()) {\n    $cl_billable = $request->getParameter('billable');\n    $_SESSION['billable'] = (int) $cl_billable;\n  } else\n    if (isset($_SESSION['billable']))\n      $cl_billable = $_SESSION['billable'];\n}\n$cl_client = $request->getParameter('client', ($request->isPost() ? null : @$_SESSION['client']));\n$_SESSION['client'] = $cl_client;\n$cl_project = $request->getParameter('project', ($request->isPost() ? null : @$_SESSION['project']));\n$_SESSION['project'] = $cl_project;\n$cl_task = $request->getParameter('task', ($request->isPost() ? null : @$_SESSION['task']));\n$_SESSION['task'] = $cl_task;\n\n// Handle time custom fields.\n$timeCustomFields = array();\nif (isset($custom_fields) && $custom_fields->timeFields) {\n  foreach ($custom_fields->timeFields as $timeField) {\n    $control_name = 'time_field_'.$timeField['id'];\n    $cl_control_name = $request->getParameter($control_name, ($request->isPost() ? null : @$_SESSION[$control_name]));\n    $_SESSION[$control_name] = $cl_control_name;\n    $timeCustomFields[$timeField['id']] = array('field_id' => $timeField['id'],\n      'control_name' => $control_name,\n      'label' => $timeField['label'],\n      'type' => $timeField['type'],\n      'required' => $timeField['required'],\n      'value' => trim($cl_control_name));\n  }\n}\n\n// Elements of timeRecordForm.\n$form = new Form('timeRecordForm');\n$largeScreenCalendarRowSpan = 1; // Number of rows calendar spans on large screens.\n\n// Dropdown for user and a hidden control to indicate user change.\nif ($user->can('track_time')) {\n  $rank = $user->getMaxRankForGroup($group_id);\n  if ($user->can('track_own_time'))\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank,'include_self'=>true,'self_first'=>true);\n  else\n    $options = array('status'=>ACTIVE,'max_rank'=>$rank);\n  $user_list = $user->getUsers($options);\n  if (count($user_list) >= 1) {\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'document.timeRecordForm.user_changed.value=1;document.timeRecordForm.submit();',\n      'name'=>'user',\n      'value'=>$user_id,\n      'data'=>$user_list,\n      'datakeys'=>array('id','name')));\n    $form->addInput(array('type'=>'hidden','name'=>'user_changed'));\n    $largeScreenCalendarRowSpan += 2;\n    $smarty->assign('user_dropdown', 1);\n  }\n}\n\n// Dropdown for clients in MODE_TIME. Use all active clients.\n// Note: for other tracking modes the control is added further below.\nif (MODE_TIME == $trackingMode && $showClient) {\n  $active_clients = ttGroupHelper::getActiveClients(true);\n  $form->addInput(array('type'=>'combobox',\n    'onchange'=>'fillProjectDropdown(this.value);',\n    'name'=>'client',\n    'value'=>$cl_client,\n    'data'=>$active_clients,\n    'datakeys'=>array('id', 'name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n  // Note: in other modes the client list is filtered to relevant clients only. See below.\n}\n\n// Billable checkbox.\nif ($showBillable) {\n  $form->addInput(array('type'=>'checkbox','name'=>'billable','value'=>$cl_billable));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// If we have time custom fields - add controls for them.\nif (isset($custom_fields) && $custom_fields->timeFields) {\n  foreach ($custom_fields->timeFields as $timeField) {\n    $field_name = 'time_field_'.$timeField['id'];\n    if ($timeField['type'] == CustomFields::TYPE_TEXT) {\n      $form->addInput(array('type'=>'text','name'=>$field_name,'value'=>$timeCustomFields[$timeField['id']]['value']));\n    } elseif ($timeField['type'] == CustomFields::TYPE_DROPDOWN) {\n      $form->addInput(array('type'=>'combobox','name'=>$field_name,\n      'data'=>CustomFields::getOptions($timeField['id']),\n      'value'=>$timeCustomFields[$timeField['id']]['value'],\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    }\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// If we show project dropdown, add controls for project and client.\n$project_list = $client_list = array();\nif ($showProject) {\n  // Dropdown for projects assigned to user.\n  $options['include_templates'] = $user->isPluginEnabled('tp') && $config->getDefinedValue('bind_templates_with_projects');\n  $project_list = $user->getAssignedProjects($options);\n  $form->addInput(array('type'=>'combobox',\n    'onchange'=>'fillTaskDropdown(this.value);fillTemplateDropdown(this.value);prepopulateNote();',\n    'name'=>'project',\n    'value'=>$cl_project,\n    'data'=>$project_list,\n    'datakeys'=>array('id','name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n\n  // Client dropdown.\n  if ($showClient) {\n    $active_clients = ttGroupHelper::getActiveClients(true);\n    // We need an array of assigned project ids to do some trimming.\n    foreach($project_list as $project)\n      $projects_assigned_to_user[] = $project['id'];\n\n    // Build a client list out of active clients. Use only clients that are relevant to user.\n    // Also trim their associated project list to only assigned projects (to user).\n    foreach($active_clients as $client) {\n      $projects_assigned_to_client = explode(',', $client['projects']);\n      if (is_array($projects_assigned_to_client) && is_array($projects_assigned_to_user))\n        $intersection = array_intersect($projects_assigned_to_client, $projects_assigned_to_user);\n      if ($intersection) {\n        $client['projects'] = implode(',', $intersection);\n        $client_list[] = $client;\n      }\n    }\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'fillProjectDropdown(this.value);',\n      'name'=>'client',\n      'value'=>$cl_client,\n      'data'=>$client_list,\n      'datakeys'=>array('id', 'name'),\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// Task dropdown.\n$task_list = array();\nif ($showTask) {\n  $task_list = ttGroupHelper::getActiveTasks();\n  $form->addInput(array('type'=>'combobox',\n    'name'=>'task',\n    'value'=>$cl_task,\n    'data'=>$task_list,\n    'datakeys'=>array('id','name'),\n    'empty'=>array(''=>$i18n->get('dropdown.select'))));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// Start and finish controls.\nif ($showStart) {\n  $form->addInput(array('type'=>'text','name'=>'start','value'=>$cl_start,'onchange'=>\"formDisable('start');\"));\n  $form->addInput(array('type'=>'text','name'=>'finish','value'=>$cl_finish,'onchange'=>\"formDisable('finish');\"));\n  if ($user->punch_mode && !$user->canOverridePunchMode()) {\n    // Make the start and finish fields read-only.\n    $form->getElement('start')->setEnabled(false);\n    $form->getElement('finish')->setEnabled(false);\n  }\n  $largeScreenCalendarRowSpan += 4;\n}\n\n// Duration control.\nif ($showDuration) {\n  $placeholder = $user->getDecimalMark() == ',' ? str_replace('.', ',', $i18n->get('form.time.duration_placeholder')) : $i18n->get('form.time.duration_placeholder');\n  $form->addInput(array('type'=>'text','name'=>'duration','placeholder'=>$placeholder,'value'=>$cl_duration,'onchange'=>\"formDisable('duration');\"));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// File upload control.\nif ($showFiles) {\n  $form->addInput(array('type'=>'upload','name'=>'newfile','value'=>$i18n->get('button.submit')));\n  $largeScreenCalendarRowSpan += 2;\n}\n\n// If we have templates, add a dropdown to select one.\nif ($user->isPluginEnabled('tp')){\n  $template_list = ttGroupHelper::getActiveTemplates();\n  if (count($template_list) >= 1) {\n    $form->addInput(array('type'=>'combobox',\n      'onchange'=>'fillNote(this.value);',\n      'name'=>'template',\n      'data'=>$template_list,\n      'datakeys'=>array('id','name'),\n      'empty'=>array(''=>$i18n->get('dropdown.select'))));\n    $smarty->assign('template_dropdown', 1);\n    $smarty->assign('bind_templates_with_projects', $config->getDefinedValue('bind_templates_with_projects'));\n    $smarty->assign('prepopulate_note', $config->getDefinedValue('prepopulate_note'));\n    $smarty->assign('template_list', $template_list);\n    $largeScreenCalendarRowSpan += 2;\n  }\n}\n\n// Note control.\n$form->addInput(array('type'=>'textarea','name'=>'note','value'=>$cl_note));\n\n// Calendar.\n$form->addInput(array('type'=>'calendar','name'=>'date','value'=>$cl_date)); // calendar\n\n// A hidden control for today's date from user's browser.\n$form->addInput(array('type'=>'hidden','name'=>'browser_today','value'=>'')); // User current date, which gets filled in on btn_submit click.\n\n// Submit button.\n$form->addInput(array('type'=>'submit','name'=>'btn_submit','onclick'=>'browser_today.value=get_date()','value'=>$i18n->get('button.submit')));\n\nif ($request->isPost()) {\n  if ($request->getParameter('btn_submit')) {\n    // Submit button clicked.\n    // Validate user input.\n    if ($showClient && $user->isOptionEnabled('client_required') && !$cl_client)\n      $err->add($i18n->get('error.client'));\n    // Validate input in time custom fields.\n    if (isset($custom_fields) && $custom_fields->timeFields) {\n      foreach ($timeCustomFields as $timeField) {\n        // Validation is the same for text and dropdown fields.\n        if (!ttValidString($timeField['value'], !$timeField['required'])) $err->add($i18n->get('error.field'), htmlspecialchars($timeField['label']));\n      }\n    }\n    if ($showProject) {\n      if (!$cl_project) $err->add($i18n->get('error.project'));\n    }\n    if ($showTask && $taskRequired) {\n      if (!$cl_task) $err->add($i18n->get('error.task'));\n    }\n    if (strlen($cl_duration) == 0) {\n      if ($cl_start || $cl_finish) {\n        if (!ttTimeHelper::isValidTime($cl_start))\n          $err->add($i18n->get('error.field'), $i18n->get('label.start'));\n        if ($cl_finish) {\n          if (!ttTimeHelper::isValidTime($cl_finish))\n            $err->add($i18n->get('error.field'), $i18n->get('label.finish'));\n          if (!ttTimeHelper::isValidInterval($cl_start, $cl_finish))\n            $err->add($i18n->get('error.interval'), $i18n->get('label.finish'), $i18n->get('label.start'));\n        }\n      } else {\n        if ($showStart) {\n          $err->add($i18n->get('error.empty'), $i18n->get('label.start'));\n          $err->add($i18n->get('error.empty'), $i18n->get('label.finish'));\n        }\n        if ($showDuration)\n          $err->add($i18n->get('error.empty'), $i18n->get('label.duration'));\n      }\n    } else {\n      if (false === ttTimeHelper::postedDurationToMinutes($cl_duration))\n        $err->add($i18n->get('error.field'), $i18n->get('label.duration'));\n    }\n    if (!ttValidString($cl_note, true)) $err->add($i18n->get('error.field'), $i18n->get('label.note'));\n    if ($user->isPluginEnabled('tp') && !ttValidTemplateText($cl_note)) {\n      $err->add($i18n->get('error.field'), $i18n->get('label.note'));\n    }\n    if (!ttTimeHelper::canAdd()) $err->add($i18n->get('error.expired'));\n    // Finished validating user input.\n\n    // Prohibit creating entries in future.\n    if (!$user->isOptionEnabled('future_entries')) {\n      $browser_today = new DateAndTime(DB_DATEFORMAT, $request->getParameter('browser_today', null));\n      if ($selected_date->after($browser_today))\n        $err->add($i18n->get('error.future_date'));\n    }\n\n    // Prohibit creating entries in locked range.\n    if ($user->isDateLocked($selected_date))\n      $err->add($i18n->get('error.range_locked'));\n\n    // Prohibit creating another uncompleted record.\n    if ($err->no()) {\n      if (($not_completed_rec = ttTimeHelper::getUncompleted($user_id)) && (($cl_finish == '') && ($cl_duration == '')))\n        $err->add($i18n->get('error.uncompleted_exists').\" <a href = 'time_edit.php?id=\".$not_completed_rec['id'].\"'>\".$i18n->get('error.goto_uncompleted').\"</a>\");\n    }\n\n    // Prohibit creating an overlapping record.\n    if ($err->no()) {\n      if (ttTimeHelper::overlaps($user_id, $cl_date, $cl_start, $cl_finish))\n        $err->add($i18n->get('error.overlap'));\n    }\n\n    // Insert record.\n    if ($err->no()) {\n      $id = ttTimeHelper::insert(array(\n        'date' => $cl_date,\n        'client' => $cl_client,\n        'project' => $cl_project,\n        'task' => $cl_task,\n        'start' => $cl_start,\n        'finish' => $cl_finish,\n        'duration' => $cl_duration,\n        'note' => $cl_note,\n        'billable' => $cl_billable));\n\n      // Insert time custom fields if we have them.\n      $result = true;\n      if ($id && isset($custom_fields) && $custom_fields->timeFields) {\n        $result = $custom_fields->insertTimeFields($id, $timeCustomFields);\n      }\n\n      // Put a new file in storage if we have it.\n      if ($id && $showFiles && $_FILES['newfile']['name']) {\n        $fileHelper = new ttFileHelper($err);\n        $fields = array('entity_type'=>'time',\n          'entity_id' => $id,\n          'file_name' => $_FILES['newfile']['name']);\n        $fileHelper->putFile($fields);\n      }\n\n      if ($id && $result && $err->no()) {\n        header('Location: time.php');\n        exit();\n      }\n      $err->add($i18n->get('error.db'));\n    }\n  } elseif ($request->getParameter('btn_stop')) {\n    // Stop button pressed to finish an uncompleted record.\n    $record_id = $request->getParameter('record_id');\n    $record = ttTimeHelper::getRecord($record_id);\n    $browser_date = $request->getParameter('browser_date');\n    $browser_time = $request->getParameter('browser_time');\n\n    // Can we complete this record?\n    if ($record['date'] == $browser_date                                // closing today's record\n      && ttTimeHelper::isValidInterval($record['start'], $browser_time) // finish time is greater than start time\n      && !ttTimeHelper::overlaps($user_id, $browser_date, $record['start'], $browser_time)) { // no overlap\n      $res = ttTimeHelper::update(array(\n          'id'=>$record['id'],\n          'date'=>$record['date'],\n          'client'=>$record['client_id'],\n          'project'=>$record['project_id'],\n          'task'=>$record['task_id'],\n          'start'=>$record['start'],\n          'finish'=>$browser_time,\n          'note'=>$record['comment'],\n          'billable'=>$record['billable']));\n      if (!$res)\n        $err->add($i18n->get('error.db'));\n    } else {\n      // Cannot complete, redirect for manual edit.\n      header('Location: time_edit.php?id='.$record_id);\n      exit();\n    }\n  }\n} // isPost\n\n$week_total = ttTimeHelper::getTimeForWeek($selected_date);\n$timeRecords = ttTimeHelper::getRecords($cl_date, $showFiles);\n$showNavigation = ($user->isPluginEnabled('wv') && !$user->isOptionEnabled('week_menu')) ||\n  ($user->isPluginEnabled('pu') && !$user->isOptionEnabled('puncher_menu'));\n\n$smarty->assign('large_screen_calendar_row_span', $largeScreenCalendarRowSpan);\n$smarty->assign('selected_date', $selected_date);\n$smarty->assign('week_total', $week_total);\n$smarty->assign('day_total', ttTimeHelper::getTimeForDay($cl_date));\n$smarty->assign('time_records', $timeRecords);\n$smarty->assign('show_record_custom_fields', $showRecordCustomFields);\n$smarty->assign('show_navigation', $showNavigation);\n$smarty->assign('show_client', $showClient);\n$smarty->assign('show_billable', $showBillable);\n$smarty->assign('show_project', $showProject);\n$smarty->assign('show_task', $showTask);\n$smarty->assign('task_required', $taskRequired);\n$smarty->assign('show_start', $showStart);\n$smarty->assign('show_duration', $showDuration);\n$smarty->assign('show_note_column', $showNoteColumn);\n$smarty->assign('show_note_row', $showNoteRow);\n$smarty->assign('show_files', $showFiles);\n$smarty->assign('client_list', $client_list);\n$smarty->assign('project_list', $project_list);\n$smarty->assign('task_list', $task_list);\n$smarty->assign('forms', array($form->getName()=>$form->toArray()));\n$smarty->assign('onload', 'onLoad=\"fillDropdowns();prepopulateNote();adjustTodayLinks()\"');\n$smarty->assign('timestring', $selected_date->toString($user->getDateFormat()));\n$smarty->assign('title', $i18n->get('title.time'));\n$smarty->assign('content_page_name', 'time.tpl');\n$smarty->display('index.tpl');\n"], "filenames": ["initialize.php", "time.php"], "buggy_code_start_loc": [15, 33], "buggy_code_end_loc": [16, 33], "fixing_code_start_loc": [15, 34], "fixing_code_end_loc": [16, 40], "type": "CWE-79", "message": "Anuko Time Tracker is an open source, web-based time tracking application written in PHP. When a logged on user selects a date in Time Tracker, it is being passed on via the date parameter in URI. Because of not checking this parameter for sanity in versions prior to 1.19.30.5600, it was possible to craft the URI with malicious JavaScript, use social engineering to convince logged on user to click on such link, and have the attacker-supplied JavaScript to be executed in user's browser. This issue is patched in version 1.19.30.5600. As a workaround, one may introduce `ttValidDbDateFormatDate` function as in the latest version and add a call to it within the access checks block in time.php.", "other": {"cve": {"id": "CVE-2021-41139", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-13T17:15:07.697", "lastModified": "2021-10-20T19:17:40.637", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Anuko Time Tracker is an open source, web-based time tracking application written in PHP. When a logged on user selects a date in Time Tracker, it is being passed on via the date parameter in URI. Because of not checking this parameter for sanity in versions prior to 1.19.30.5600, it was possible to craft the URI with malicious JavaScript, use social engineering to convince logged on user to click on such link, and have the attacker-supplied JavaScript to be executed in user's browser. This issue is patched in version 1.19.30.5600. As a workaround, one may introduce `ttValidDbDateFormatDate` function as in the latest version and add a call to it within the access checks block in time.php."}, {"lang": "es", "value": "Anuko Time Tracker es una aplicaci\u00f3n de seguimiento de tiempo de c\u00f3digo abierto, basada en la web y escrita en PHP. Cuando un usuario conectado selecciona una fecha en Time Tracker, se pasa por medio del par\u00e1metro de fecha en URI. Debido a que no se comprobaba este par\u00e1metro para saneo en las versiones anteriores a 1.19.30.5600, era posible dise\u00f1ar el URI con JavaScript malicioso, usar ingenier\u00eda social para convencer al usuario conectado de que hiciera clic en dicho enlace y hacer que el JavaScript suministrado por el atacante se ejecutara en el navegador del usuario. Este problema est\u00e1 parcheado en la versi\u00f3n 1.19.30.5600. Como soluci\u00f3n, es posible introducir la funci\u00f3n \"ttValidDbDateFormatDate\" como en la \u00faltima versi\u00f3n y a\u00f1adir una llamada a la misma dentro del bloque de comprobaci\u00f3n de acceso en el archivo time.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:anuko:time_tracker:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.19.30.5600", "matchCriteriaId": "C5A8B606-00BA-4ACD-8593-377DD978D2CE"}]}]}], "references": [{"url": "https://github.com/anuko/timetracker/commit/559906731f153c9b3a632c2839ed11669b76d593", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/anuko/timetracker/commit/d3f60bd3e3ea8ff8ec31a596baec6750af601b7c", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/anuko/timetracker/security/advisories/GHSA-h2v8-87c9-86cw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/anuko/timetracker/commit/559906731f153c9b3a632c2839ed11669b76d593"}}