{"buggy_code": ["using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Client;\nusing BTCPayServer.Data;\nusing BTCPayServer.Models.AppViewModels;\nusing BTCPayServer.Plugins.Crowdfund.Controllers;\nusing BTCPayServer.Plugins.PointOfSale.Controllers;\nusing BTCPayServer.Services.Apps;\nusing BTCPayServer.Services.Stores;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace BTCPayServer.Controllers\n{\n    [AutoValidateAntiforgeryToken]\n    [Route(\"apps\")]\n    public partial class UIAppsController : Controller\n    {\n        public UIAppsController(\n            UserManager<ApplicationUser> userManager,\n            StoreRepository storeRepository,\n            AppService appService)\n        {\n            _userManager = userManager;\n            _storeRepository = storeRepository;\n            _appService = appService;\n        }\n\n        private readonly UserManager<ApplicationUser> _userManager;\n        private readonly StoreRepository _storeRepository;\n        private readonly AppService _appService;\n\n        public string CreatedAppId { get; set; }\n\n        public class AppUpdated\n        {\n            public string AppId { get; set; }\n            public object Settings { get; set; }\n            public string StoreId { get; set; }\n            public override string ToString()\n            {\n                return string.Empty;\n            }\n        }\n\n        [HttpGet(\"/apps/{appId}\")]\n        public async Task<IActionResult> RedirectToApp(string appId)\n        {\n            var app = await _appService.GetApp(appId, null);\n            if (app is null)\n                return NotFound();\n\n            return app.AppType switch\n            {\n                nameof(AppType.Crowdfund) => RedirectToAction(nameof(UICrowdfundController.ViewCrowdfund), \"UICrowdfund\", new { appId }),\n                nameof(AppType.PointOfSale) => RedirectToAction(nameof(UIPointOfSaleController.ViewPointOfSale), \"UIPointOfSale\", new { appId }),\n                _ => NotFound()\n            };\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpGet(\"/stores/{storeId}/apps\")]\n        public async Task<IActionResult> ListApps(\n            string storeId,\n            string sortOrder = null,\n            string sortOrderColumn = null\n        )\n        {\n            var store = GetCurrentStore();\n            var apps = await _appService.GetAllApps(GetUserId(), false, store.Id);\n\n            if (sortOrder != null && sortOrderColumn != null)\n            {\n                apps = apps.OrderByDescending(app =>\n                {\n                    switch (sortOrderColumn)\n                    {\n                        case nameof(app.AppName):\n                            return app.AppName;\n                        case nameof(app.StoreName):\n                            return app.StoreName;\n                        case nameof(app.AppType):\n                            return app.AppType;\n                        default:\n                            return app.Id;\n                    }\n                }).ToArray();\n\n                switch (sortOrder)\n                {\n                    case \"desc\":\n                        ViewData[$\"{sortOrderColumn}SortOrder\"] = \"asc\";\n                        break;\n                    case \"asc\":\n                        apps = apps.Reverse().ToArray();\n                        ViewData[$\"{sortOrderColumn}SortOrder\"] = \"desc\";\n                        break;\n                }\n            }\n\n            return View(new ListAppsViewModel\n            {\n                Apps = apps\n            });\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpGet(\"/stores/{storeId}/apps/create\")]\n        public IActionResult CreateApp(string storeId)\n        {\n            return View(new CreateAppViewModel\n            {\n                StoreId = GetCurrentStore().Id\n            });\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpPost(\"/stores/{storeId}/apps/create\")]\n        public async Task<IActionResult> CreateApp(string storeId, CreateAppViewModel vm)\n        {\n            var store = GetCurrentStore();\n            vm.StoreId = store.Id;\n\n            if (!Enum.TryParse(vm.SelectedAppType, out AppType appType))\n                ModelState.AddModelError(nameof(vm.SelectedAppType), \"Invalid App Type\");\n\n            if (!ModelState.IsValid)\n            {\n                return View(vm);\n            }\n\n            var appData = new AppData\n            {\n                StoreDataId = store.Id,\n                Name = vm.AppName,\n                AppType = appType.ToString()\n            };\n\n            var defaultCurrency = await GetStoreDefaultCurrentIfEmpty(appData.StoreDataId, null);\n            switch (appType)\n            {\n                case AppType.Crowdfund:\n                    var emptyCrowdfund = new CrowdfundSettings { TargetCurrency = defaultCurrency };\n                    appData.SetSettings(emptyCrowdfund);\n                    break;\n                case AppType.PointOfSale:\n                    var empty = new PointOfSaleSettings { Currency = defaultCurrency };\n                    appData.SetSettings(empty);\n                    break;\n                default:\n                    throw new ArgumentOutOfRangeException();\n            }\n\n            await _appService.UpdateOrCreateApp(appData);\n            TempData[WellKnownTempData.SuccessMessage] = \"App successfully created\";\n            CreatedAppId = appData.Id;\n\n            return appType switch\n            {\n                AppType.PointOfSale => RedirectToAction(nameof(UIPointOfSaleController.UpdatePointOfSale), \"UIPointOfSale\", new { appId = appData.Id }),\n                AppType.Crowdfund => RedirectToAction(nameof(UICrowdfundController.UpdateCrowdfund), \"UICrowdfund\", new { appId = appData.Id }),\n                _ => throw new ArgumentOutOfRangeException()\n            };\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpGet(\"{appId}/delete\")]\n        public IActionResult DeleteApp(string appId)\n        {\n            var app = GetCurrentApp();\n            if (app == null)\n                return NotFound();\n\n            return View(\"Confirm\", new ConfirmModel(\"Delete app\", $\"The app <strong>{app.Name}</strong> and its settings will be permanently deleted. Are you sure?\", \"Delete\"));\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpPost(\"{appId}/delete\")]\n        public async Task<IActionResult> DeleteAppPost(string appId)\n        {\n            var app = GetCurrentApp();\n            if (app == null)\n                return NotFound();\n\n            if (await _appService.DeleteApp(app))\n                TempData[WellKnownTempData.SuccessMessage] = \"App deleted successfully.\";\n\n            return RedirectToAction(nameof(UIStoresController.Dashboard), \"UIStores\", new { storeId = app.StoreDataId });\n        }\n\n        async Task<string> GetStoreDefaultCurrentIfEmpty(string storeId, string currency)\n        {\n            if (string.IsNullOrWhiteSpace(currency))\n            {\n                currency = (await _storeRepository.FindStore(storeId)).GetStoreBlob().DefaultCurrency;\n            }\n            return currency.Trim().ToUpperInvariant();\n        }\n\n        private string GetUserId() => _userManager.GetUserId(User);\n\n        private StoreData GetCurrentStore() => HttpContext.GetStoreData();\n\n        private AppData GetCurrentApp() => HttpContext.GetAppData();\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Client;\nusing BTCPayServer.Data;\nusing BTCPayServer.Models;\nusing BTCPayServer.Security.Greenfield;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing NBitcoin;\nusing NBitcoin.DataEncoders;\n\nnamespace BTCPayServer.Controllers\n{\n    public partial class UIManageController\n    {\n        [HttpGet]\n        public async Task<IActionResult> APIKeys()\n        {\n            return View(new ApiKeysViewModel()\n            {\n                ApiKeyDatas = await _apiKeyRepository.GetKeys(new APIKeyRepository.APIKeyQuery()\n                {\n                    UserId = new[] { _userManager.GetUserId(User) }\n                })\n            });\n        }\n\n        [HttpGet(\"~/api-keys/{id}/delete\")]\n        public async Task<IActionResult> DeleteAPIKey(string id)\n        {\n            var key = await _apiKeyRepository.GetKey(id);\n            if (key == null || key.UserId != _userManager.GetUserId(User))\n            {\n                return NotFound();\n            }\n            return View(\"Confirm\", new ConfirmModel\n            {\n                Title = \"Delete API key\",\n                Description = $\"Any application using the API key <strong>{key.Label ?? key.Id}<strong> will immediately lose access.\",\n                Action = \"Delete\",\n                ActionName = nameof(DeleteAPIKeyPost)\n            });\n        }\n\n        [HttpPost(\"~/api-keys/{id}/delete\")]\n        public async Task<IActionResult> DeleteAPIKeyPost(string id)\n        {\n            var key = await _apiKeyRepository.GetKey(id);\n            if (key == null || key.UserId != _userManager.GetUserId(User))\n            {\n                return NotFound();\n            }\n            await _apiKeyRepository.Remove(id, _userManager.GetUserId(User));\n            TempData.SetStatusMessageModel(new StatusMessageModel()\n            {\n                Severity = StatusMessageModel.StatusSeverity.Success,\n                Message = \"API Key removed\"\n            });\n            return RedirectToAction(\"APIKeys\");\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> AddApiKey()\n        {\n            if (!_btcPayServerEnvironment.IsSecure(HttpContext))\n            {\n                TempData.SetStatusMessageModel(new StatusMessageModel()\n                {\n                    Severity = StatusMessageModel.StatusSeverity.Error,\n                    Message = \"Cannot generate api keys while not on https or tor\"\n                });\n                return RedirectToAction(\"APIKeys\");\n            }\n\n            return View(\"AddApiKey\", await SetViewModelValues(new AddApiKeyViewModel()));\n        }\n\n        [HttpGet(\"~/api-keys/authorize\")]\n        public async Task<IActionResult> AuthorizeAPIKey(string[] permissions, string applicationName = null, Uri redirect = null,\n            bool strict = true, bool selectiveStores = false, string applicationIdentifier = null)\n        {\n            if (!_btcPayServerEnvironment.IsSecure(HttpContext))\n            {\n                TempData.SetStatusMessageModel(new StatusMessageModel\n                {\n                    Severity = StatusMessageModel.StatusSeverity.Error,\n                    Message = \"Cannot generate API keys while not on https or using Tor\"\n                });\n                return RedirectToAction(\"APIKeys\");\n            }\n\n            permissions ??= Array.Empty<string>();\n\n            var requestPermissions = Permission.ToPermissions(permissions).ToList();\n\n            if (redirect?.IsAbsoluteUri is false)\n            {\n                redirect = null;\n            }\n\n            var vm = new AuthorizeApiKeysViewModel\n            {\n                RedirectUrl = redirect,\n                Label = applicationName,\n                ApplicationName = applicationName,\n                SelectiveStores = selectiveStores,\n                Strict = strict,\n                Permissions = string.Join(';', requestPermissions),\n                ApplicationIdentifier = applicationIdentifier\n            };\n\n            var existingApiKey = await CheckForMatchingApiKey(requestPermissions, vm);\n            if (existingApiKey != null)\n            {\n                vm.ApiKey = existingApiKey.Id;\n                return View(\"ConfirmAPIKey\", vm);\n            }\n\n            vm = await SetViewModelValues(vm);\n            AdjustVMForAuthorization(vm);\n\n            return View(vm);\n        }\n\n        [HttpPost(\"~/api-keys/authorize\")]\n        public async Task<IActionResult> AuthorizeAPIKey([FromForm] AuthorizeApiKeysViewModel viewModel)\n        {\n            viewModel = await SetViewModelValues(viewModel);\n            AdjustVMForAuthorization(viewModel);\n\n            var ar = HandleCommands(viewModel);\n            if (ar != null)\n            {\n                return ar;\n            }\n\n            for (int i = 0; i < viewModel.PermissionValues.Count; i++)\n            {\n                if (viewModel.PermissionValues[i].Forbidden && viewModel.Strict)\n                {\n                    viewModel.PermissionValues[i].Value = false;\n                    ModelState.AddModelError($\"{viewModel.PermissionValues}[{i}].Value\",\n                        $\"The permission '{viewModel.PermissionValues[i].Title}' is required for this application.\");\n                }\n\n                if (viewModel.PermissionValues[i].StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.Specific &&\n                    !viewModel.SelectiveStores)\n                {\n                    viewModel.PermissionValues[i].StoreMode = AddApiKeyViewModel.ApiKeyStoreMode.AllStores;\n                    ModelState.AddModelError($\"{viewModel.PermissionValues}[{i}].Value\",\n                        $\"The permission '{viewModel.PermissionValues[i].Title}' cannot be store specific for this application.\");\n                }\n            }\n\n            if (!ModelState.IsValid)\n            {\n                return View(viewModel);\n            }\n\n            var command = viewModel.Command.ToLowerInvariant();\n            switch (command)\n            {\n                case \"cancel\":\n                    return RedirectToAction(\"APIKeys\");\n\n                case \"authorize\":\n                case \"confirm\":\n                    var key = command == \"authorize\"\n                        ? await CreateKey(viewModel, (viewModel.ApplicationIdentifier, viewModel.RedirectUrl?.AbsoluteUri))\n                        : await _apiKeyRepository.GetKey(viewModel.ApiKey);\n\n                    if (viewModel.RedirectUrl != null)\n                    {\n                        var permissions = key.GetBlob().Permissions;\n                        var redirectVm = new PostRedirectViewModel()\n                        {\n                            FormUrl = viewModel.RedirectUrl.AbsoluteUri,\n                            FormParameters =\n                            {\n                                { \"apiKey\", key.Id },\n                                { \"userId\", key.UserId },\n                            },\n                        };\n                        foreach (var permission in permissions)\n                        {\n                            redirectVm.FormParameters.Add(\"permissions[]\", permission);\n                        }\n                        return View(\"PostRedirect\", redirectVm);\n                    }\n\n                    TempData.SetStatusMessageModel(new StatusMessageModel\n                    {\n                        Severity = StatusMessageModel.StatusSeverity.Success,\n                        Html = $\"API key generated! <code class='alert-link'>{key.Id}</code>\"\n                    });\n\n                    return RedirectToAction(\"APIKeys\", new { key = key.Id });\n\n                default:\n                    var perms = viewModel.Permissions?.Split(';').ToArray() ?? Array.Empty<string>();\n                    if (perms.Any())\n                    {\n                        var requestPermissions = Permission.ToPermissions(perms).ToList();\n                        var existingApiKey = await CheckForMatchingApiKey(requestPermissions, viewModel);\n                        if (existingApiKey != null)\n                        {\n                            viewModel.ApiKey = existingApiKey.Id;\n                            return View(\"ConfirmAPIKey\", viewModel);\n                        }\n                    }\n                    return View(viewModel);\n            }\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddApiKey(AddApiKeyViewModel viewModel)\n        {\n            await SetViewModelValues(viewModel);\n\n            var ar = HandleCommands(viewModel);\n\n            if (ar != null)\n            {\n                return ar;\n            }\n\n            if (!ModelState.IsValid)\n            {\n                return View(viewModel);\n            }\n\n            var key = await CreateKey(viewModel);\n\n            TempData.SetStatusMessageModel(new StatusMessageModel\n            {\n                Severity = StatusMessageModel.StatusSeverity.Success,\n                Html = $\"API key generated! <code class='alert-link'>{key.Id}</code>\"\n            });\n            return RedirectToAction(\"APIKeys\");\n        }\n\n        private async Task<APIKeyData> CheckForMatchingApiKey(IEnumerable<Permission> requestedPermissions, AuthorizeApiKeysViewModel vm)\n        {\n            if (string.IsNullOrEmpty(vm.ApplicationIdentifier) || vm.RedirectUrl == null)\n            {\n                return null;\n            }\n\n            //check if there is an app identifier that matches and belongs to the current user\n            var keys = await _apiKeyRepository.GetKeys(new APIKeyRepository.APIKeyQuery\n            {\n                UserId = new[] { _userManager.GetUserId(User) }\n            });\n            foreach (var key in keys)\n            {\n                var blob = key.GetBlob();\n                if (blob.ApplicationIdentifier != vm.ApplicationIdentifier || blob.ApplicationAuthority != vm.RedirectUrl.AbsoluteUri)\n                {\n                    continue;\n                }\n\n                var requestedGrouped = requestedPermissions.GroupBy(permission => permission.Policy);\n                var existingGrouped = Permission.ToPermissions(blob.Permissions).GroupBy(permission => permission.Policy);\n\n                //matched the identifier and authority, but we need to check if what the app is requesting in terms of permissions is enough\n                var fail = false;\n                foreach (var requested in requestedGrouped)\n                {\n                    var existing = existingGrouped.SingleOrDefault(grouping => requested.Key == grouping.Key);\n                    if (vm.Strict && existing == null)\n                    {\n                        fail = true;\n                        break;\n                    }\n\n                    if (Policies.IsStorePolicy(requested.Key))\n                    {\n                        if ((vm.SelectiveStores && !existing.Any(p => p.Scope == vm.StoreId)) ||\n                            (!vm.SelectiveStores && existing.Any(p => !string.IsNullOrEmpty(p.Scope))))\n                        {\n                            fail = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (fail)\n                {\n                    continue;\n                }\n\n                //we have a key that is sufficient, redirect to a page to confirm that it's ok to provide this key to the app.\n                return key;\n            }\n\n            return null;\n        }\n\n        private void AdjustVMForAuthorization(AuthorizeApiKeysViewModel vm)\n        {\n            var permissions = vm.Permissions?.Split(';') ?? Array.Empty<string>();\n            var permissionsWithStoreIDs = new List<string>();\n\n            vm.NeedsStorePermission = vm.SelectiveStores && (permissions.Any(Policies.IsStorePolicy) || !vm.Strict);\n\n            // Go over each permission and associated store IDs and join them\n            // so that permission for a specific store is parsed correctly\n            foreach (var permission in permissions)\n            {\n                if (!Policies.IsStorePolicy(permission) || string.IsNullOrEmpty(vm.StoreId))\n                {\n                    permissionsWithStoreIDs.Add(permission);\n                }\n                else\n                {\n                    permissionsWithStoreIDs.Add($\"{permission}:{vm.StoreId}\");\n                }\n            }\n\n            var parsedPermissions = Permission.ToPermissions(permissionsWithStoreIDs.ToArray()).GroupBy(permission => permission.Policy);\n\n            for (var index = vm.PermissionValues.Count - 1; index >= 0; index--)\n            {\n                var permissionValue = vm.PermissionValues[index];\n                var wanted = parsedPermissions.SingleOrDefault(permission =>\n                    permission.Key.Equals(permissionValue.Permission,\n                        StringComparison.InvariantCultureIgnoreCase));\n                if (vm.Strict && !(wanted?.Any() ?? false))\n                {\n                    vm.PermissionValues.RemoveAt(index);\n                    continue;\n                }\n                if (wanted?.Any() ?? false)\n                {\n                    var commandParts = vm.Command?.Split(':', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>();\n                    var command = commandParts.Length > 1 ? commandParts[1] : null;\n                    var isPerformingAnAction = command == \"change-store-mode\" || command == \"add-store\";\n\n                    // Don't want to accidentally change mode for the user if they are explicitly performing some action\n                    if (isPerformingAnAction)\n                    {\n                        continue;\n                    }\n\n                    // Set the value to true and adjust the other fields based on the policy type\n                    permissionValue.Value = true;\n\n                    if (vm.SelectiveStores && Policies.IsStorePolicy(permissionValue.Permission) &&\n                        wanted.Any(permission => !string.IsNullOrEmpty(permission.Scope)))\n                    {\n                        permissionValue.StoreMode = AddApiKeyViewModel.ApiKeyStoreMode.Specific;\n                        permissionValue.SpecificStores = wanted.Select(permission => permission.Scope).ToList();\n                    }\n                    else\n                    {\n                        permissionValue.StoreMode = AddApiKeyViewModel.ApiKeyStoreMode.AllStores;\n                        permissionValue.SpecificStores = new List<string>();\n                    }\n                }\n            }\n        }\n\n        private IActionResult HandleCommands(AddApiKeyViewModel viewModel)\n        {\n            if (string.IsNullOrEmpty(viewModel.Command))\n            {\n                return null;\n            }\n            var parts = viewModel.Command.Split(':', StringSplitOptions.RemoveEmptyEntries);\n            var permission = parts[0];\n            if (!Policies.IsStorePolicy(permission))\n            {\n                return null;\n            }\n            var permissionValueItem = viewModel.PermissionValues.Single(item => item.Permission == permission);\n            var command = parts[1];\n            var storeIndex = parts.Length == 3 ? parts[2] : null;\n\n            ModelState.Clear();\n            switch (command)\n            {\n                case \"change-store-mode\":\n                    permissionValueItem.StoreMode = permissionValueItem.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.Specific\n                        ? AddApiKeyViewModel.ApiKeyStoreMode.AllStores\n                        : AddApiKeyViewModel.ApiKeyStoreMode.Specific;\n                    // Reset values for \"all stores\" option to their original values\n                    if (permissionValueItem.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.AllStores)\n                    {\n                        permissionValueItem.SpecificStores = new List<string>();\n                        permissionValueItem.Value = true;\n                    }\n\n                    if (permissionValueItem.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.Specific &&\n                        !permissionValueItem.SpecificStores.Any() && viewModel.Stores.Any())\n                    {\n                        permissionValueItem.SpecificStores.Add(null);\n                    }\n                    return View(viewModel);\n\n                case \"add-store\":\n                    permissionValueItem.SpecificStores.Add(null);\n                    return View(viewModel);\n\n                case \"remove-store\":\n                    {\n                        if (storeIndex != null)\n                            permissionValueItem.SpecificStores.RemoveAt(int.Parse(storeIndex,\n                                CultureInfo.InvariantCulture));\n                        return View(viewModel);\n                    }\n            }\n\n            return null;\n        }\n\n        private async Task<APIKeyData> CreateKey(AddApiKeyViewModel viewModel, (string appIdentifier, string appAuthority) app = default)\n        {\n            var key = new APIKeyData\n            {\n                Id = Encoders.Hex.EncodeData(RandomUtils.GetBytes(20)),\n                Type = APIKeyType.Permanent,\n                UserId = _userManager.GetUserId(User),\n                Label = viewModel.Label,\n            };\n            key.SetBlob(new APIKeyBlob\n            {\n                Permissions = GetPermissionsFromViewModel(viewModel).Select(p => p.ToString()).Distinct().ToArray(),\n                ApplicationAuthority = app.appAuthority,\n                ApplicationIdentifier = app.appIdentifier\n            });\n            await _apiKeyRepository.CreateKey(key);\n            return key;\n        }\n\n        private IEnumerable<Permission> GetPermissionsFromViewModel(AddApiKeyViewModel viewModel)\n        {\n            var permissions = new List<Permission>();\n            foreach (var p in viewModel.PermissionValues.Where(tuple => !tuple.Forbidden))\n            {\n                if (Policies.IsStorePolicy(p.Permission))\n                {\n                    if (p.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.AllStores && p.Value)\n                    {\n                        permissions.Add(Permission.Create(p.Permission));\n                    }\n                    else if (p.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.Specific)\n                    {\n                        permissions.AddRange(p.SpecificStores.Select(s => Permission.Create(p.Permission, s)));\n                    }\n                }\n                else if (p.Value && Permission.TryCreatePermission(p.Permission, null, out var pp))\n                    permissions.Add(pp);\n            }\n\n\n            return permissions.Distinct();\n        }\n\n        private async Task<T> SetViewModelValues<T>(T viewModel) where T : AddApiKeyViewModel\n        {\n            viewModel.Stores = await _StoreRepository.GetStoresByUserId(_userManager.GetUserId(User));\n            var isAdmin = (await _authorizationService.AuthorizeAsync(User, Policies.CanModifyServerSettings))\n                .Succeeded;\n            viewModel.PermissionValues ??= Policies.AllPolicies\n                .Where(p => AddApiKeyViewModel.PermissionValueItem.PermissionDescriptions.ContainsKey(p))\n                .Select(s => new AddApiKeyViewModel.PermissionValueItem()\n                {\n                    Permission = s,\n                    Value = false,\n                    Forbidden = Policies.IsServerPolicy(s) && !isAdmin\n                }).ToList();\n\n            if (!isAdmin)\n            {\n                foreach (var p in viewModel.PermissionValues.Where(item => item.Permission is null || Policies.IsServerPolicy(item.Permission)))\n                {\n                    p.Forbidden = true;\n                }\n            }\n\n            return viewModel;\n        }\n\n        public class AddApiKeyViewModel\n        {\n            public string Label { get; set; }\n            public StoreData[] Stores { get; set; }\n            public string Command { get; set; }\n            public List<PermissionValueItem> PermissionValues { get; set; }\n\n            public enum ApiKeyStoreMode\n            {\n                AllStores,\n                Specific\n            }\n\n            public class PermissionValueItem\n            {\n                public static readonly Dictionary<string, (string Title, string Description)> PermissionDescriptions = new Dictionary<string, (string Title, string Description)>()\n                {\n                    {Policies.Unrestricted, (\"Unrestricted access\", \"The app will have unrestricted access to your account.\")},\n                    {Policies.CanViewUsers, (\"View users\", \"The app will be able to see all users on this server.\")},\n                    {Policies.CanCreateUser, (\"Create new users\", \"The app will be able to create new users on this server.\")},\n                    {Policies.CanDeleteUser, (\"Delete user\", \"The app will be able to delete the user to whom it is assigned. Admin users can delete any user without this permission.\")},\n                    {Policies.CanModifyStoreSettings, (\"Modify your stores\", \"The app will be able to manage invoices on all your stores and modify their settings.\")},\n                    {$\"{Policies.CanModifyStoreSettings}:\", (\"Manage selected stores\", \"The app will be able to manage invoices on the selected stores and modify their settings.\")},\n                    {Policies.CanViewCustodianAccounts, (\"View exchange accounts linked to your stores\", \"The app will be able to see exchange accounts linked to your stores.\")},\n                    {$\"{Policies.CanViewCustodianAccounts}:\", (\"View exchange accounts linked to selected stores\", \"The app will be able to see exchange accounts linked to the selected stores.\")},\n                    {Policies.CanManageCustodianAccounts, (\"Manage exchange accounts linked to your stores\", \"The app will be able to modify exchange accounts linked to your stores.\")},\n                    {$\"{Policies.CanManageCustodianAccounts}:\", (\"Manage exchange accounts linked to selected stores\", \"The app will be able to modify exchange accounts linked to selected stores.\")},\n                    {Policies.CanDepositToCustodianAccounts, (\"Deposit funds to exchange accounts linked to your stores\", \"The app will be able to deposit funds to your exchange accounts.\")},\n                    {$\"{Policies.CanDepositToCustodianAccounts}:\", (\"Deposit funds to exchange accounts linked to selected stores\", \"The app will be able to deposit funds to selected store's exchange accounts.\")},\n                    {Policies.CanWithdrawFromCustodianAccounts, (\"Withdraw funds from exchange accounts to your store\", \"The app will be able to withdraw funds from your exchange accounts to your store.\")},\n                    {$\"{Policies.CanWithdrawFromCustodianAccounts}:\", (\"Withdraw funds from selected store's exchange accounts\", \"The app will be able to withdraw funds from your selected store's exchange accounts.\")},\n                    {Policies.CanTradeCustodianAccount, (\"Trade funds on your store's exchange accounts\", \"The app will be able to trade funds on your store's exchange accounts.\")},\n                    {$\"{Policies.CanTradeCustodianAccount}:\", (\"Trade funds on selected store's exchange accounts\", \"The app will be able to trade funds on selected store's exchange accounts.\")},\n                    {Policies.CanModifyStoreWebhooks, (\"Modify stores webhooks\", \"The app will modify the webhooks of all your stores.\")},\n                    {$\"{Policies.CanModifyStoreWebhooks}:\", (\"Modify selected stores' webhooks\", \"The app will modify the webhooks of the selected stores.\")},\n                    {Policies.CanViewStoreSettings, (\"View your stores\", \"The app will be able to view stores settings.\")},\n                    {$\"{Policies.CanViewStoreSettings}:\", (\"View your stores\", \"The app will be able to view the selected stores' settings.\")},\n                    {Policies.CanModifyServerSettings, (\"Manage your server\", \"The app will have total control on the server settings of your server.\")},\n                    {Policies.CanViewProfile, (\"View your profile\", \"The app will be able to view your user profile.\")},\n                    {Policies.CanModifyProfile, (\"Manage your profile\", \"The app will be able to view and modify your user profile.\")},\n                    {Policies.CanManageNotificationsForUser, (\"Manage your notifications\", \"The app will be able to view and modify your user notifications.\")},\n                    {Policies.CanViewNotificationsForUser, (\"View your notifications\", \"The app will be able to view your user notifications.\")},\n                    {Policies.CanCreateInvoice, (\"Create an invoice\", \"The app will be able to create new invoices.\")},\n                    {$\"{Policies.CanCreateInvoice}:\", (\"Create an invoice\", \"The app will be able to create new invoices on the selected stores.\")},\n                    {Policies.CanViewInvoices, (\"View invoices\", \"The app will be able to view invoices.\")},\n                    {Policies.CanModifyInvoices, (\"Modify invoices\", \"The app will be able to modify and view invoices.\")},\n                    {$\"{Policies.CanViewInvoices}:\", (\"View invoices\", \"The app will be able to view invoices on the selected stores.\")},\n                    {$\"{Policies.CanModifyInvoices}:\", (\"Modify invoices\", \"The app will be able to modify and view invoices on the selected stores.\")},\n                    {Policies.CanModifyPaymentRequests, (\"Modify your payment requests\", \"The app will be able to view, modify, delete and create new payment requests on all your stores.\")},\n                    {$\"{Policies.CanModifyPaymentRequests}:\", (\"Manage selected stores' payment requests\", \"The app will be able to view, modify, delete and create new payment requests on the selected stores.\")},\n                    {Policies.CanViewPaymentRequests, (\"View your payment requests\", \"The app will be able to view payment requests.\")},\n                    {$\"{Policies.CanViewPaymentRequests}:\", (\"View your payment requests\", \"The app will be able to view the selected stores' payment requests.\")},\n                    {Policies.CanManagePullPayments, (\"Manage your pull payments\", \"The app will be able to view, modify, delete and create pull payments on all your stores.\")},\n                    {$\"{Policies.CanManagePullPayments}:\", (\"Manage selected stores' pull payments\", \"The app will be able to view, modify, delete and create new pull payments on the selected stores.\")},\n                    {Policies.CanUseInternalLightningNode, (\"Use the internal lightning node\", \"The app will be able to  use the internal BTCPay Server lightning node to create BOLT11 invoices, connect to other nodes, open new channels and pay BOLT11 invoices.\")},\n                    {Policies.CanViewLightningInvoiceInternalNode, (\"View invoices from internal lightning node\", \"The app will be able to use the internal BTCPay Server lightning node to view BOLT11 invoices.\")},\n                    {Policies.CanCreateLightningInvoiceInternalNode, (\"Create invoices with internal lightning node\", \"The app will be able to use the internal BTCPay Server lightning node to create BOLT11 invoices.\")},\n                    {Policies.CanUseLightningNodeInStore, (\"Use the lightning nodes associated with your stores\", \"The app will be able to use the lightning nodes connected to all your stores to create BOLT11 invoices, connect to other nodes, open new channels and pay BOLT11 invoices.\")},\n                    {Policies.CanViewLightningInvoiceInStore, (\"View the lightning invoices associated with your stores\", \"The app will be able to view the lightning invoices connected to all your stores.\")},\n                    {Policies.CanCreateLightningInvoiceInStore, (\"Create invoices from the lightning nodes associated with your stores\", \"The app will be able to use the lightning nodes connected to all your stores to create BOLT11 invoices.\")},\n                    {$\"{Policies.CanUseLightningNodeInStore}:\", (\"Use the lightning nodes associated with your stores\", \"The app will be able to use the lightning nodes connected to the selected stores to create BOLT11 invoices, connect to other nodes, open new channels and pay BOLT11 invoices.\")},\n                    {$\"{Policies.CanViewLightningInvoiceInStore}:\", (\"View the lightning invoices associated with your stores\", \"The app will be able to view the lightning invoices connected to the selected stores.\")},\n                    {$\"{Policies.CanCreateLightningInvoiceInStore}:\", (\"Create invoices from the lightning nodes associated with your stores\", \"The app will be able to use the lightning nodes connected to the selected stores to create BOLT11 invoices.\")},\n                };\n                public string Title\n                {\n                    get\n                    {\n                        return PermissionDescriptions[$\"{Permission}{(StoreMode == ApiKeyStoreMode.Specific ? \":\" : \"\")}\"].Title;\n                    }\n                }\n                public string Description\n                {\n                    get\n                    {\n                        return PermissionDescriptions[$\"{Permission}{(StoreMode == ApiKeyStoreMode.Specific ? \":\" : \"\")}\"].Description;\n                    }\n                }\n                public string Permission { get; set; }\n                public bool Value { get; set; }\n                public bool Forbidden { get; set; }\n\n                public ApiKeyStoreMode StoreMode { get; set; } = ApiKeyStoreMode.AllStores;\n                public List<string> SpecificStores { get; set; } = new();\n            }\n        }\n\n        public class AuthorizeApiKeysViewModel : AddApiKeyViewModel\n        {\n            public string ApplicationName { get; set; }\n            public string ApplicationIdentifier { get; set; }\n            public Uri RedirectUrl { get; set; }\n            public bool Strict { get; set; }\n            public bool SelectiveStores { get; set; }\n            public string Permissions { get; set; }\n            public string ApiKey { get; set; }\n            public bool NeedsStorePermission { get; set; }\n            public string StoreId { get; set; }\n        }\n\n        public class ApiKeysViewModel\n        {\n            public List<APIKeyData> ApiKeyDatas { get; set; }\n        }\n    }\n}\n", "using System;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Client;\nusing BTCPayServer.Data;\nusing BTCPayServer.Fido2;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.ManageViewModels;\nusing BTCPayServer.Security.Greenfield;\nusing BTCPayServer.Services;\nusing BTCPayServer.Services.Mails;\nusing BTCPayServer.Services.Stores;\nusing BTCPayServer.Services.Wallets;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Logging;\nusing MimeKit;\n\nnamespace BTCPayServer.Controllers\n{\n\n    [Authorize(AuthenticationSchemes = AuthenticationSchemes.Cookie, Policy = Policies.CanViewProfile)]\n    [Route(\"account/{action:lowercase=Index}\")]\n    public partial class UIManageController : Controller\n    {\n        private readonly UserManager<ApplicationUser> _userManager;\n        private readonly SignInManager<ApplicationUser> _signInManager;\n        private readonly EmailSenderFactory _EmailSenderFactory;\n        private readonly ILogger _logger;\n        private readonly UrlEncoder _urlEncoder;\n        private readonly BTCPayServerEnvironment _btcPayServerEnvironment;\n        private readonly APIKeyRepository _apiKeyRepository;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly Fido2Service _fido2Service;\n        private readonly LinkGenerator _linkGenerator;\n        private readonly UserLoginCodeService _userLoginCodeService;\n        private readonly UserService _userService;\n        readonly StoreRepository _StoreRepository;\n\n        public UIManageController(\n          UserManager<ApplicationUser> userManager,\n          SignInManager<ApplicationUser> signInManager,\n          EmailSenderFactory emailSenderFactory,\n          ILogger<UIManageController> logger,\n          UrlEncoder urlEncoder,\n          StoreRepository storeRepository,\n          BTCPayServerEnvironment btcPayServerEnvironment,\n          APIKeyRepository apiKeyRepository,\n          IAuthorizationService authorizationService,\n          Fido2Service fido2Service,\n          LinkGenerator linkGenerator,\n          UserService userService,\n          UserLoginCodeService userLoginCodeService\n          )\n        {\n            _userManager = userManager;\n            _signInManager = signInManager;\n            _EmailSenderFactory = emailSenderFactory;\n            _logger = logger;\n            _urlEncoder = urlEncoder;\n            _btcPayServerEnvironment = btcPayServerEnvironment;\n            _apiKeyRepository = apiKeyRepository;\n            _authorizationService = authorizationService;\n            _fido2Service = fido2Service;\n            _linkGenerator = linkGenerator;\n            _userLoginCodeService = userLoginCodeService;\n            _userService = userService;\n            _StoreRepository = storeRepository;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> Index()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var model = new IndexViewModel\n            {\n                Username = user.UserName,\n                Email = user.Email,\n                IsEmailConfirmed = user.EmailConfirmed\n            };\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> DisableShowInvoiceStatusChangeHint()\n        {\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var blob = user.GetBlob();\n            blob.ShowInvoiceStatusChangeHint = false;\n            if (user.SetBlob(blob))\n            {\n                await _userManager.UpdateAsync(user);\n            }\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> Index(IndexViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var email = user.Email;\n            if (model.Email != email)\n            {\n                if (!(await _userManager.FindByEmailAsync(model.Email) is null))\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = \"The email address is already in use with an other account.\";\n                    return RedirectToAction(nameof(Index));\n                }\n                var setUserResult = await _userManager.SetUserNameAsync(user, model.Email);\n                if (!setUserResult.Succeeded)\n                {\n                    throw new ApplicationException($\"Unexpected error occurred setting email for user with ID '{user.Id}'.\");\n                }\n                var setEmailResult = await _userManager.SetEmailAsync(user, model.Email);\n                if (!setEmailResult.Succeeded)\n                {\n                    throw new ApplicationException($\"Unexpected error occurred setting email for user with ID '{user.Id}'.\");\n                }\n            }\n            TempData[WellKnownTempData.SuccessMessage] = \"Your profile has been updated\";\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> SendVerificationEmail(IndexViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(nameof(Index), model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\n            var callbackUrl = _linkGenerator.EmailConfirmationLink(user.Id, code, Request.Scheme, Request.Host, Request.PathBase);\n            (await _EmailSenderFactory.GetEmailSender()).SendEmailConfirmation(user.GetMailboxAddress(), callbackUrl);\n            TempData[WellKnownTempData.SuccessMessage] = \"Verification email sent. Please check your email.\";\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> ChangePassword()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var hasPassword = await _userManager.HasPasswordAsync(user);\n            if (!hasPassword)\n            {\n                return RedirectToAction(nameof(SetPassword));\n            }\n\n            var model = new ChangePasswordViewModel();\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> ChangePassword(ChangePasswordViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var changePasswordResult = await _userManager.ChangePasswordAsync(user, model.OldPassword, model.NewPassword);\n            if (!changePasswordResult.Succeeded)\n            {\n                AddErrors(changePasswordResult);\n                return View(model);\n            }\n\n            await _signInManager.SignInAsync(user, isPersistent: false);\n            _logger.LogInformation(\"User changed their password successfully.\");\n            TempData[WellKnownTempData.SuccessMessage] = \"Your password has been changed.\";\n\n            return RedirectToAction(nameof(ChangePassword));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> SetPassword()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var hasPassword = await _userManager.HasPasswordAsync(user);\n\n            if (hasPassword)\n            {\n                return RedirectToAction(nameof(ChangePassword));\n            }\n\n            var model = new SetPasswordViewModel();\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> SetPassword(SetPasswordViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var addPasswordResult = await _userManager.AddPasswordAsync(user, model.NewPassword);\n            if (!addPasswordResult.Succeeded)\n            {\n                AddErrors(addPasswordResult);\n                return View(model);\n            }\n\n            await _signInManager.SignInAsync(user, isPersistent: false);\n            TempData[WellKnownTempData.SuccessMessage] = \"Your password has been set.\";\n\n            return RedirectToAction(nameof(SetPassword));\n        }\n\n        [HttpPost()]\n        public async Task<IActionResult> DeleteUserPost()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                return NotFound();\n            }\n\n            await _userService.DeleteUserAndAssociatedData(user);\n            TempData[WellKnownTempData.SuccessMessage] = \"Account successfully deleted.\";\n            await _signInManager.SignOutAsync();\n            return RedirectToAction(nameof(UIAccountController.Login), \"UIAccount\");\n        }\n\n\n        #region Helpers\n\n        private void AddErrors(IdentityResult result)\n        {\n            foreach (var error in result.Errors)\n            {\n                ModelState.AddModelError(string.Empty, error.Description);\n            }\n        }\n        #endregion\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Data;\nusing BTCPayServer.Events;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.ServerViewModels;\nusing BTCPayServer.Services;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.EntityFrameworkCore;\nusing MimeKit;\n\nnamespace BTCPayServer.Controllers\n{\n    public partial class UIServerController\n    {\n        [Route(\"server/users\")]\n        public async Task<IActionResult> ListUsers(\n            [FromServices] RoleManager<IdentityRole> roleManager,\n        UsersViewModel model,\n            string sortOrder = null\n        )\n        {\n            model = this.ParseListQuery(model ?? new UsersViewModel());\n\n            var usersQuery = _UserManager.Users;\n            if (!string.IsNullOrWhiteSpace(model.SearchTerm))\n            {\n#pragma warning disable CA1307 // Specify StringComparison\n                // Entity Framework don't support StringComparison\n                usersQuery = usersQuery.Where(u => u.Email.Contains(model.SearchTerm));\n#pragma warning restore CA1307 // Specify StringComparison\n            }\n\n            if (sortOrder != null)\n            {\n                switch (sortOrder)\n                {\n                    case \"desc\":\n                        ViewData[\"NextUserEmailSortOrder\"] = \"asc\";\n                        usersQuery = usersQuery.OrderByDescending(user => user.Email);\n                        break;\n                    case \"asc\":\n                        usersQuery = usersQuery.OrderBy(user => user.Email);\n                        ViewData[\"NextUserEmailSortOrder\"] = \"desc\";\n                        break;\n                }\n            }\n\n            model.Roles = roleManager.Roles.ToDictionary(role => role.Id, role => role.Name);\n            model.Users = await usersQuery\n                .Include(user => user.UserRoles)\n                .Skip(model.Skip)\n                .Take(model.Count)\n                .Select(u => new UsersViewModel.UserViewModel\n                {\n                    Name = u.UserName,\n                    Email = u.Email,\n                    Id = u.Id,\n                    Verified = u.EmailConfirmed || !u.RequiresEmailConfirmation,\n                    Created = u.Created,\n                    Roles = u.UserRoles.Select(role => role.RoleId),\n                    Disabled = u.LockoutEnabled && u.LockoutEnd != null && DateTimeOffset.UtcNow < u.LockoutEnd.Value.UtcDateTime\n                })\n                .ToListAsync();\n\n            return View(model);\n        }\n\n        [Route(\"server/users/{userId}\")]\n        public new async Task<IActionResult> User(string userId)\n        {\n            var user = await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n            var roles = await _UserManager.GetRolesAsync(user);\n            var userVM = new UsersViewModel.UserViewModel\n            {\n                Id = user.Id,\n                Email = user.Email,\n                Verified = user.EmailConfirmed || !user.RequiresEmailConfirmation,\n                IsAdmin = _userService.IsRoleAdmin(roles)\n            };\n            return View(userVM);\n        }\n\n        [Route(\"server/users/{userId}\")]\n        [HttpPost]\n        public new async Task<IActionResult> User(string userId, UsersViewModel.UserViewModel viewModel)\n        {\n            var user = await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            var admins = await _UserManager.GetUsersInRoleAsync(Roles.ServerAdmin);\n            var roles = await _UserManager.GetRolesAsync(user);\n            var wasAdmin = _userService.IsRoleAdmin(roles);\n            if (!viewModel.IsAdmin && admins.Count == 1 && wasAdmin)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"This is the only Admin, so their role can't be removed until another Admin is added.\";\n                return View(viewModel); // return\n            }\n\n            if (viewModel.IsAdmin != wasAdmin)\n            {\n                var success = await _userService.SetAdminUser(user.Id, viewModel.IsAdmin);\n                if (success)\n                {\n                    TempData[WellKnownTempData.SuccessMessage] = \"User successfully updated\";\n                }\n                else\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = \"Error updating user\";\n                }\n            }\n\n            return RedirectToAction(nameof(User), new { userId = userId });\n        }\n\n        [Route(\"server/users/new\")]\n        [HttpGet]\n        public IActionResult CreateUser()\n        {\n            ViewData[\"AllowRequestEmailConfirmation\"] = _policiesSettings.RequiresConfirmedEmail;\n            return View();\n        }\n\n        [Route(\"server/users/new\")]\n        [HttpPost]\n        public async Task<IActionResult> CreateUser(RegisterFromAdminViewModel model)\n        {\n            var requiresConfirmedEmail = _policiesSettings.RequiresConfirmedEmail;\n            ViewData[\"AllowRequestEmailConfirmation\"] = requiresConfirmedEmail;\n            if (!_Options.CheatMode)\n                model.IsAdmin = false;\n            if (ModelState.IsValid)\n            {\n                IdentityResult result;\n                var user = new ApplicationUser\n                {\n                    UserName = model.Email,\n                    Email = model.Email,\n                    EmailConfirmed = model.EmailConfirmed,\n                    RequiresEmailConfirmation = requiresConfirmedEmail,\n                    Created = DateTimeOffset.UtcNow\n                };\n\n                if (!string.IsNullOrEmpty(model.Password))\n                {\n                    result = await _UserManager.CreateAsync(user, model.Password);\n                }\n                else\n                {\n                    result = await _UserManager.CreateAsync(user);\n                }\n\n                if (result.Succeeded)\n                {\n                    if (model.IsAdmin && !(await _UserManager.AddToRoleAsync(user, Roles.ServerAdmin)).Succeeded)\n                        model.IsAdmin = false;\n\n                    var tcs = new TaskCompletionSource<Uri>();\n\n                    _eventAggregator.Publish(new UserRegisteredEvent()\n                    {\n                        RequestUri = Request.GetAbsoluteRootUri(),\n                        User = user,\n                        Admin = model.IsAdmin is true,\n                        CallbackUrlGenerated = tcs\n                    });\n                    var callbackUrl = await tcs.Task;\n\n                    if (user.RequiresEmailConfirmation && !user.EmailConfirmed)\n                    {\n\n                        TempData.SetStatusMessageModel(new StatusMessageModel()\n                        {\n                            Severity = StatusMessageModel.StatusSeverity.Success,\n                            AllowDismiss = false,\n                            Html =\n                                $\"Account created without a set password. An email will be sent (if configured) to set the password.<br/> You may alternatively share this link with them: <a class='alert-link' href='{callbackUrl}'>{callbackUrl}</a>\"\n                        });\n                    }\n                    else if (!await _UserManager.HasPasswordAsync(user))\n                    {\n                        TempData.SetStatusMessageModel(new StatusMessageModel()\n                        {\n                            Severity = StatusMessageModel.StatusSeverity.Success,\n                            AllowDismiss = false,\n                            Html =\n                                $\"Account created without a set password. An email will be sent (if configured) to set the password.<br/> You may alternatively share this link with them: <a class='alert-link' href='{callbackUrl}'>{callbackUrl}</a>\"\n                        });\n                    }\n                    return RedirectToAction(nameof(ListUsers));\n                }\n\n                foreach (var error in result.Errors)\n                {\n                    ModelState.AddModelError(string.Empty, error.Description);\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        [HttpGet(\"server/users/{userId}/delete\")]\n        public async Task<IActionResult> DeleteUser(string userId)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            var roles = await _UserManager.GetRolesAsync(user);\n            if (_userService.IsRoleAdmin(roles))\n            {\n                if (await _userService.IsUserTheOnlyOneAdmin(user))\n                {\n                    // return\n                    return View(\"Confirm\", new ConfirmModel(\"Delete admin\",\n                        $\"Unable to proceed: As the user <strong>{user.Email}</strong> is the last enabled admin, it cannot be removed.\"));\n                }\n\n                return View(\"Confirm\", new ConfirmModel(\"Delete admin\",\n                    $\"The admin <strong>{user.Email}</strong> will be permanently deleted. This action will also delete all accounts, users and data associated with the server account. Are you sure?\",\n                    \"Delete\"));\n            }\n\n            return View(\"Confirm\", new ConfirmModel(\"Delete user\", $\"The user <strong>{user.Email}</strong> will be permanently deleted. Are you sure?\", \"Delete\"));\n        }\n\n        [HttpPost(\"server/users/{userId}/delete\")]\n        public async Task<IActionResult> DeleteUserPost(string userId)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            await _userService.DeleteUserAndAssociatedData(user);\n\n            TempData[WellKnownTempData.SuccessMessage] = \"User deleted\";\n            return RedirectToAction(nameof(ListUsers));\n        }\n\n        [HttpGet(\"server/users/{userId}/toggle\")]\n        public async Task<IActionResult> ToggleUser(string userId, bool enable)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            if (!enable && await _userService.IsUserTheOnlyOneAdmin(user))\n            {\n                return View(\"Confirm\", new ConfirmModel(\"Disable admin\",\n                    $\"Unable to proceed: As the user <strong>{user.Email}</strong> is the last enabled admin, it cannot be disabled.\"));\n            }\n            return View(\"Confirm\", new ConfirmModel($\"{(enable ? \"Enable\" : \"Disable\")} user\", $\"The user <strong>{user.Email}</strong> will be {(enable ? \"enabled\" : \"disabled\")}. Are you sure?\", (enable ? \"Enable\" : \"Disable\")));\n        }\n\n        [HttpPost(\"server/users/{userId}/toggle\")]\n        public async Task<IActionResult> ToggleUserPost(string userId, bool enable)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n            if (!enable && await _userService.IsUserTheOnlyOneAdmin(user))\n            {\n                TempData[WellKnownTempData.SuccessMessage] = $\"User was the last enabled admin and could not be disabled.\";\n                return RedirectToAction(nameof(ListUsers));\n            }\n            await _userService.ToggleUser(userId, enable ? null : DateTimeOffset.MaxValue);\n\n            TempData[WellKnownTempData.SuccessMessage] = $\"User {(enable ? \"enabled\" : \"disabled\")}\";\n            return RedirectToAction(nameof(ListUsers));\n        }\n\n        [HttpGet(\"server/users/{userId}/verification-email\")]\n        public async Task<IActionResult> SendVerificationEmail(string userId)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            return View(\"Confirm\", new ConfirmModel(\"Send verification email\", $\"This will send a verification email to <strong>{user.Email}</strong>.\", \"Send\"));\n        }\n\n        [HttpPost(\"server/users/{userId}/verification-email\")]\n        public async Task<IActionResult> SendVerificationEmailPost(string userId)\n        {\n            var user = await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{userId}'.\");\n            }\n\n            var code = await _UserManager.GenerateEmailConfirmationTokenAsync(user);\n            var callbackUrl = _linkGenerator.EmailConfirmationLink(user.Id, code, Request.Scheme, Request.Host, Request.PathBase);\n\n            (await _emailSenderFactory.GetEmailSender()).SendEmailConfirmation(user.GetMailboxAddress(), callbackUrl);\n\n            TempData[WellKnownTempData.SuccessMessage] = \"Verification email sent\";\n            return RedirectToAction(nameof(ListUsers));\n        }\n    }\n\n    public class RegisterFromAdminViewModel\n    {\n        [Required]\n        [EmailAddress]\n        [Display(Name = \"Email\")]\n        public string Email { get; set; }\n\n        [StringLength(100, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\n        [DataType(DataType.Password)]\n        [Display(Name = \"Password (leave blank to generate invite-link)\")]\n        public string Password { get; set; }\n\n        [DataType(DataType.Password)]\n        [Display(Name = \"Confirm password\")]\n        [Compare(\"Password\", ErrorMessage = \"The password and confirmation password do not match.\")]\n        public string ConfirmPassword { get; set; }\n\n        [Display(Name = \"Is administrator?\")]\n        public bool IsAdmin { get; set; }\n\n        [Display(Name = \"Email confirmed?\")]\n        public bool EmailConfirmed { get; set; }\n    }\n}\n", "#nullable enable\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Contracts;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Configuration;\nusing BTCPayServer.Data;\nusing BTCPayServer.HostedServices;\nusing BTCPayServer.Hosting;\nusing BTCPayServer.Logging;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.ServerViewModels;\nusing BTCPayServer.Services;\nusing BTCPayServer.Services.Apps;\nusing BTCPayServer.Services.Mails;\nusing BTCPayServer.Services.Stores;\nusing BTCPayServer.Storage.Models;\nusing BTCPayServer.Storage.Services;\nusing BTCPayServer.Storage.Services.Providers;\nusing BTCPayServer.Validation;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing MimeKit;\nusing NBitcoin;\nusing NBitcoin.DataEncoders;\nusing Renci.SshNet;\nusing AuthenticationSchemes = BTCPayServer.Abstractions.Constants.AuthenticationSchemes;\n\nnamespace BTCPayServer.Controllers\n{\n    [Authorize(Policy = BTCPayServer.Client.Policies.CanModifyServerSettings,\n               AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n    public partial class UIServerController : Controller\n    {\n        private readonly UserManager<ApplicationUser> _UserManager;\n        private readonly UserService _userService;\n        readonly SettingsRepository _SettingsRepository;\n        readonly PoliciesSettings _policiesSettings;\n        private readonly NBXplorerDashboard _dashBoard;\n        private readonly StoreRepository _StoreRepository;\n        readonly LightningConfigurationProvider _LnConfigProvider;\n        private readonly TorServices _torServices;\n        private readonly BTCPayServerOptions _Options;\n        private readonly AppService _AppService;\n        private readonly CheckConfigurationHostedService _sshState;\n        private readonly EventAggregator _eventAggregator;\n        private readonly IOptions<ExternalServicesOptions> _externalServiceOptions;\n        private readonly Logs Logs;\n        private readonly StoredFileRepository _StoredFileRepository;\n        private readonly IFileService _fileService;\n        private readonly IEnumerable<IStorageProviderService> _StorageProviderServices;\n        private readonly LinkGenerator _linkGenerator;\n        private readonly EmailSenderFactory _emailSenderFactory;\n\n        public UIServerController(\n            UserManager<ApplicationUser> userManager,\n            UserService userService,\n            StoredFileRepository storedFileRepository,\n            IFileService fileService,\n            IEnumerable<IStorageProviderService> storageProviderServices,\n            BTCPayServerOptions options,\n            SettingsRepository settingsRepository,\n            PoliciesSettings policiesSettings,\n            NBXplorerDashboard dashBoard,\n            IHttpClientFactory httpClientFactory,\n            LightningConfigurationProvider lnConfigProvider,\n            TorServices torServices,\n            StoreRepository storeRepository,\n            AppService appService,\n            CheckConfigurationHostedService sshState,\n            EventAggregator eventAggregator,\n            IOptions<ExternalServicesOptions> externalServiceOptions,\n            Logs logs,\n            LinkGenerator linkGenerator,\n            EmailSenderFactory emailSenderFactory,\n            IHostApplicationLifetime applicationLifetime\n        )\n        {\n            _policiesSettings = policiesSettings;\n            _Options = options;\n            _StoredFileRepository = storedFileRepository;\n            _fileService = fileService;\n            _StorageProviderServices = storageProviderServices;\n            _UserManager = userManager;\n            _userService = userService;\n            _SettingsRepository = settingsRepository;\n            _dashBoard = dashBoard;\n            HttpClientFactory = httpClientFactory;\n            _StoreRepository = storeRepository;\n            _LnConfigProvider = lnConfigProvider;\n            _torServices = torServices;\n            _AppService = appService;\n            _sshState = sshState;\n            _eventAggregator = eventAggregator;\n            _externalServiceOptions = externalServiceOptions;\n            Logs = logs;\n            _linkGenerator = linkGenerator;\n            _emailSenderFactory = emailSenderFactory;\n            ApplicationLifetime = applicationLifetime;\n        }\n\n        [Route(\"server/maintenance\")]\n        public IActionResult Maintenance()\n        {\n            MaintenanceViewModel vm = new MaintenanceViewModel();\n            vm.CanUseSSH = _sshState.CanUseSSH;\n            if (!vm.CanUseSSH)\n                TempData[WellKnownTempData.ErrorMessage] = \"Maintenance feature requires access to SSH properly configured in BTCPay Server configuration.\";\n            vm.DNSDomain = this.Request.Host.Host;\n            if (IPAddress.TryParse(vm.DNSDomain, out var unused))\n                vm.DNSDomain = null;\n            return View(vm);\n        }\n\n        [Route(\"server/maintenance\")]\n        [HttpPost]\n        public async Task<IActionResult> Maintenance(MaintenanceViewModel vm, string command)\n        {\n            vm.CanUseSSH = _sshState.CanUseSSH;\n            if (command != \"soft-restart\" && !vm.CanUseSSH)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"Maintenance feature requires access to SSH properly configured in BTCPay Server configuration.\";\n                return View(vm);\n            }\n            if (!ModelState.IsValid)\n                return View(vm);\n            if (command == \"changedomain\")\n            {\n                if (string.IsNullOrWhiteSpace(vm.DNSDomain))\n                {\n                    ModelState.AddModelError(nameof(vm.DNSDomain), $\"Required field\");\n                    return View(vm);\n                }\n                vm.DNSDomain = vm.DNSDomain.Trim().ToLowerInvariant();\n                if (vm.DNSDomain.Equals(this.Request.Host.Host, StringComparison.OrdinalIgnoreCase))\n                    return View(vm);\n                if (IPAddress.TryParse(vm.DNSDomain, out var unused))\n                {\n                    ModelState.AddModelError(nameof(vm.DNSDomain), $\"This should be a domain name\");\n                    return View(vm);\n                }\n                if (vm.DNSDomain.Equals(this.Request.Host.Host, StringComparison.InvariantCultureIgnoreCase))\n                {\n                    ModelState.AddModelError(nameof(vm.DNSDomain), $\"The server is already set to use this domain\");\n                    return View(vm);\n                }\n                var builder = new UriBuilder();\n                using (var client = new HttpClient(new HttpClientHandler()\n                {\n                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator\n                }))\n                {\n                    try\n                    {\n                        builder.Scheme = this.Request.Scheme;\n                        builder.Host = vm.DNSDomain;\n                        var addresses1 = GetAddressAsync(this.Request.Host.Host);\n                        var addresses2 = GetAddressAsync(vm.DNSDomain);\n                        await Task.WhenAll(addresses1, addresses2);\n\n                        var addressesSet = addresses1.GetAwaiter().GetResult().Select(c => c.ToString()).ToHashSet();\n                        var hasCommonAddress = addresses2.GetAwaiter().GetResult().Select(c => c.ToString()).Any(s => addressesSet.Contains(s));\n                        if (!hasCommonAddress)\n                        {\n                            ModelState.AddModelError(nameof(vm.DNSDomain), $\"Invalid host ({vm.DNSDomain} is not pointing to this BTCPay instance)\");\n                            return View(vm);\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        var messages = new List<object>();\n                        messages.Add(ex.Message);\n                        if (ex.InnerException != null)\n                            messages.Add(ex.InnerException.Message);\n                        ModelState.AddModelError(nameof(vm.DNSDomain), $\"Invalid domain ({string.Join(\", \", messages.ToArray())})\");\n                        return View(vm);\n                    }\n                }\n\n                var error = await RunSSH(vm, $\"changedomain.sh {vm.DNSDomain}\");\n                if (error != null)\n                    return error;\n\n                builder.Path = null;\n                builder.Query = null;\n                TempData[WellKnownTempData.SuccessMessage] = $\"Domain name changing... the server will restart, please use \\\"{builder.Uri.AbsoluteUri}\\\" (this page won't reload automatically)\";\n            }\n            else if (command == \"update\")\n            {\n                var error = await RunSSH(vm, $\"btcpay-update.sh\");\n                if (error != null)\n                    return error;\n                TempData[WellKnownTempData.SuccessMessage] = $\"The server might restart soon if an update is available...  (this page won't reload automatically)\";\n            }\n            else if (command == \"clean\")\n            {\n                var error = await RunSSH(vm, $\"btcpay-clean.sh\");\n                if (error != null)\n                    return error;\n                TempData[WellKnownTempData.SuccessMessage] = $\"The old docker images will be cleaned soon...\";\n            }\n            else if (command == \"restart\")\n            {\n                var error = await RunSSH(vm, $\"btcpay-restart.sh\");\n                if (error != null)\n                    return error;\n                Logs.PayServer.LogInformation(\"A hard restart has been requested\");\n                TempData[WellKnownTempData.SuccessMessage] = $\"BTCPay will restart momentarily.\";\n            }\n            else if (command == \"soft-restart\")\n            {\n                TempData[WellKnownTempData.SuccessMessage] = $\"BTCPay will restart momentarily.\";\n                Logs.PayServer.LogInformation(\"A soft restart has been requested\");\n                _ = Task.Delay(3000).ContinueWith((t) => ApplicationLifetime.StopApplication());\n            }\n            else\n            {\n                return NotFound();\n            }\n            return RedirectToAction(nameof(Maintenance));\n        }\n\n        private Task<IPAddress[]> GetAddressAsync(string domainOrIP)\n        {\n            if (IPAddress.TryParse(domainOrIP, out var ip))\n                return Task.FromResult(new[] { ip });\n            return Dns.GetHostAddressesAsync(domainOrIP);\n        }\n\n        public static string RunId = Encoders.Hex.EncodeData(NBitcoin.RandomUtils.GetBytes(32));\n        [HttpGet]\n        [Route(\"runid\")]\n        [AllowAnonymous]\n        public IActionResult SeeRunId(string? expected = null)\n        {\n            if (expected == RunId)\n                return Ok();\n            return BadRequest();\n        }\n\n        private async Task<IActionResult?> RunSSH(MaintenanceViewModel vm, string command)\n        {\n            SshClient? sshClient = null;\n\n            try\n            {\n                sshClient = await _Options.SSHSettings.ConnectAsync();\n            }\n            catch (Exception ex)\n            {\n                var message = ex.Message;\n                if (ex is AggregateException aggrEx && aggrEx.InnerException?.Message != null)\n                {\n                    message = aggrEx.InnerException.Message;\n                }\n                ModelState.AddModelError(string.Empty, $\"Connection problem ({message})\");\n                return View(vm);\n            }\n            _ = RunSSHCore(sshClient, $\". /etc/profile.d/btcpay-env.sh && nohup {command} > /dev/null 2>&1 & disown\");\n            return null;\n        }\n\n        private async Task RunSSHCore(SshClient sshClient, string ssh)\n        {\n            try\n            {\n                Logs.PayServer.LogInformation(\"Running SSH command: \" + ssh);\n                var result = await sshClient.RunBash(ssh, TimeSpan.FromMinutes(1.0));\n                Logs.PayServer.LogInformation($\"SSH command executed with exit status {result.ExitStatus}. Output: {result.Output}\");\n            }\n            catch (Exception ex)\n            {\n                Logs.PayServer.LogWarning(\"Error while executing SSH command: \" + ex.Message);\n            }\n            finally\n            {\n                sshClient.Dispose();\n            }\n        }\n\n        public IHttpClientFactory HttpClientFactory { get; }\n        public IHostApplicationLifetime ApplicationLifetime { get; }\n\n        [Route(\"server/policies\")]\n        public async Task<IActionResult> Policies()\n        {\n            ViewBag.AppsList = await GetAppSelectList();\n            ViewBag.UpdateUrlPresent = _Options.UpdateUrl != null;\n            return View(_policiesSettings);\n        }\n\n        [HttpPost(\"server/policies\")]\n        public async Task<IActionResult> Policies([FromServices] BTCPayNetworkProvider btcPayNetworkProvider, PoliciesSettings settings, string command = \"\")\n        {\n            ViewBag.UpdateUrlPresent = _Options.UpdateUrl != null;\n            ViewBag.AppsList = await GetAppSelectList();\n\n            if (command == \"add-domain\")\n            {\n                ModelState.Clear();\n                settings.DomainToAppMapping.Add(new PoliciesSettings.DomainToAppMappingItem());\n                return View(settings);\n            }\n            if (command.StartsWith(\"remove-domain\", StringComparison.InvariantCultureIgnoreCase))\n            {\n                ModelState.Clear();\n                var index = int.Parse(command.Substring(command.IndexOf(\":\", StringComparison.InvariantCultureIgnoreCase) + 1), CultureInfo.InvariantCulture);\n                settings.DomainToAppMapping.RemoveAt(index);\n                return View(settings);\n            }\n\n            settings.BlockExplorerLinks = settings.BlockExplorerLinks.Where(tuple => btcPayNetworkProvider.GetNetwork(tuple.CryptoCode).BlockExplorerLinkDefault != tuple.Link).ToList();\n\n            if (!ModelState.IsValid)\n            {\n                return View(settings);\n            }\n            var appIdsToFetch = settings.DomainToAppMapping.Select(item => item.AppId).ToList();\n            if (!string.IsNullOrEmpty(settings.RootAppId))\n            {\n                appIdsToFetch.Add(settings.RootAppId);\n            }\n            else\n            {\n                settings.RootAppType = null;\n            }\n\n            if (appIdsToFetch.Any())\n            {\n                var apps = (await _AppService.GetApps(appIdsToFetch.ToArray()))\n                    .ToDictionary(data => data.Id, data => Enum.Parse<AppType>(data.AppType));\n                ;\n                if (!string.IsNullOrEmpty(settings.RootAppId))\n                {\n                    settings.RootAppType = apps[settings.RootAppId];\n                }\n\n                foreach (var domainToAppMappingItem in settings.DomainToAppMapping)\n                {\n                    domainToAppMappingItem.AppType = apps[domainToAppMappingItem.AppId];\n                }\n            }\n\n            await _SettingsRepository.UpdateSetting(settings);\n            BlockExplorerLinkStartupTask.SetLinkOnNetworks(settings.BlockExplorerLinks, btcPayNetworkProvider);\n            TempData[WellKnownTempData.SuccessMessage] = \"Policies updated successfully\";\n            return RedirectToAction(nameof(Policies));\n        }\n\n        [Route(\"server/services\")]\n        public IActionResult Services()\n        {\n            var result = new ServicesViewModel { ExternalServices = _externalServiceOptions.Value.ExternalServices.ToList() };\n\n            // other services\n            foreach (var externalService in _externalServiceOptions.Value.OtherExternalServices)\n            {\n                result.OtherExternalServices.Add(new ServicesViewModel.OtherExternalService()\n                {\n                    Name = externalService.Key,\n                    Link = Request.GetAbsoluteUriNoPathBase(externalService.Value).AbsoluteUri\n                });\n            }\n            if (CanShowSSHService())\n            {\n                result.OtherExternalServices.Add(new ServicesViewModel.OtherExternalService()\n                {\n                    Name = \"SSH\",\n                    Link = Url.Action(nameof(SSHService))\n                });\n            }\n            result.OtherExternalServices.Add(new ServicesViewModel.OtherExternalService()\n            {\n                Name = \"Dynamic DNS\",\n                Link = Url.Action(nameof(DynamicDnsServices))\n            });\n            foreach (var torService in _torServices.Services)\n            {\n                if (torService.VirtualPort == 80)\n                {\n                    result.TorHttpServices.Add(new ServicesViewModel.OtherExternalService()\n                    {\n                        Name = torService.Name,\n                        Link = $\"http://{torService.OnionHost}\"\n                    });\n                }\n                else if (TryParseAsExternalService(torService, out var externalService))\n                {\n                    result.ExternalServices.Add(externalService);\n                }\n                else\n                {\n                    result.TorOtherServices.Add(new ServicesViewModel.OtherExternalService()\n                    {\n                        Name = torService.Name,\n                        Link = $\"{torService.OnionHost}:{torService.VirtualPort}\"\n                    });\n                }\n            }\n\n            return View(result);\n        }\n\n        private async Task<List<SelectListItem>> GetAppSelectList()\n        {\n            var apps = (await _AppService.GetAllApps(null, true))\n                .Select(a => new SelectListItem($\"{typeof(AppType).DisplayName(a.AppType)} - {a.AppName} - {a.StoreName}\", a.Id)).ToList();\n            apps.Insert(0, new SelectListItem(\"(None)\", null));\n            return apps;\n        }\n\n        private static bool TryParseAsExternalService(TorService torService, [MaybeNullWhen(false)] out ExternalService externalService)\n        {\n            externalService = null;\n            if (torService.ServiceType == TorServiceType.P2P)\n            {\n                externalService = new ExternalService()\n                {\n                    CryptoCode = torService.Network.CryptoCode,\n                    DisplayName = \"Full node P2P\",\n                    Type = ExternalServiceTypes.P2P,\n                    ConnectionString = new ExternalConnectionString(new Uri($\"bitcoin-p2p://{torService.OnionHost}:{torService.VirtualPort}\", UriKind.Absolute)),\n                    ServiceName = torService.Name,\n                };\n            }\n            if (torService.ServiceType == TorServiceType.RPC)\n            {\n                externalService = new ExternalService()\n                {\n                    CryptoCode = torService.Network.CryptoCode,\n                    DisplayName = \"Full node RPC\",\n                    Type = ExternalServiceTypes.RPC,\n                    ConnectionString = new ExternalConnectionString(new Uri($\"btcrpc://btcrpc:btcpayserver4ever@{torService.OnionHost}:{torService.VirtualPort}?label=BTCPayNode\", UriKind.Absolute)),\n                    ServiceName = torService.Name\n                };\n            }\n            return externalService != null;\n        }\n\n        private ExternalService? GetService(string serviceName, string cryptoCode)\n        {\n            var result = _externalServiceOptions.Value.ExternalServices.GetService(serviceName, cryptoCode);\n            if (result != null)\n                return result;\n            foreach (var torService in _torServices.Services)\n            {\n                if (TryParseAsExternalService(torService, out var torExternalService) &&\n                    torExternalService.ServiceName == serviceName)\n                    return torExternalService;\n            }\n            return null;\n        }\n\n        [Route(\"server/services/{serviceName}/{cryptoCode?}\")]\n        public async Task<IActionResult> Service(string serviceName, string cryptoCode, bool showQR = false, ulong? nonce = null)\n        {\n            var service = GetService(serviceName, cryptoCode);\n            if (service == null)\n                return NotFound();\n            if (!string.IsNullOrEmpty(cryptoCode) && !_dashBoard.IsFullySynched(cryptoCode, out _) && service.Type != ExternalServiceTypes.RPC)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"{cryptoCode} is not fully synched\";\n                return RedirectToAction(nameof(Services));\n            }\n            try\n            {\n\n                if (service.Type == ExternalServiceTypes.P2P)\n                {\n                    return View(\"P2PService\", new LightningWalletServices()\n                    {\n                        ShowQR = showQR,\n                        WalletName = service.ServiceName,\n                        ServiceLink = service.ConnectionString.Server.AbsoluteUri.WithoutEndingSlash()\n                    });\n                }\n                if (service.Type == ExternalServiceTypes.LNDSeedBackup)\n                {\n                    var model = LndSeedBackupViewModel.Parse(service.ConnectionString.CookieFilePath);\n                    if (!model.IsWalletUnlockPresent)\n                    {\n                        TempData.SetStatusMessageModel(new StatusMessageModel()\n                        {\n                            Severity = StatusMessageModel.StatusSeverity.Warning,\n                            Html = \"Your LND does not seem to allow seed backup.<br />\" +\n                            \"It's recommended, but not required, that you migrate as instructed by <a href=\\\"https://blog.btcpayserver.org/btcpay-lnd-migration\\\">our migration blog post</a>.<br />\" +\n                            \"You will need to close all of your channels, and migrate your funds as <a href=\\\"https://blog.btcpayserver.org/btcpay-lnd-migration\\\">we documented</a>.\"\n                        });\n                    }\n                    return View(\"LndSeedBackup\", model);\n                }\n                if (service.Type == ExternalServiceTypes.RPC)\n                {\n                    return View(\"RPCService\", new LightningWalletServices()\n                    {\n                        ShowQR = showQR,\n                        WalletName = service.ServiceName,\n                        ServiceLink = service.ConnectionString.Server.AbsoluteUri.WithoutEndingSlash()\n                    });\n                }\n                var connectionString = await service.ConnectionString.Expand(this.Request.GetAbsoluteUriNoPathBase(), service.Type, _Options.NetworkType);\n                switch (service.Type)\n                {\n                    case ExternalServiceTypes.Charge:\n                        return LightningChargeServices(service, connectionString, showQR);\n                    case ExternalServiceTypes.RTL:\n                    case ExternalServiceTypes.ThunderHub:\n                    case ExternalServiceTypes.Spark:\n                    case ExternalServiceTypes.Torq:\n                        if (connectionString.AccessKey == null)\n                        {\n                            TempData[WellKnownTempData.ErrorMessage] = $\"The access key of the service is not set\";\n                            return RedirectToAction(nameof(Services));\n                        }\n                        LightningWalletServices vm = new LightningWalletServices();\n                        vm.ShowQR = showQR;\n                        vm.WalletName = service.DisplayName;\n                        string tokenParam = \"access-key\";\n                        if (service.Type == ExternalServiceTypes.ThunderHub)\n                            tokenParam = \"token\";\n                        vm.ServiceLink = $\"{connectionString.Server}?{tokenParam}={connectionString.AccessKey}\";\n                        return View(\"LightningWalletServices\", vm);\n                    case ExternalServiceTypes.CLightningRest:\n                        return LndServices(service, connectionString, nonce, \"CLightningRestServices\");\n                    case ExternalServiceTypes.LNDGRPC:\n                    case ExternalServiceTypes.LNDRest:\n                        return LndServices(service, connectionString, nonce);\n                    case ExternalServiceTypes.Configurator:\n                        return View(\"ConfiguratorService\",\n                            new LightningWalletServices()\n                            {\n                                ShowQR = showQR,\n                                WalletName = service.ServiceName,\n                                ServiceLink = $\"{connectionString.Server}?password={connectionString.AccessKey}\"\n                            });\n                    default:\n                        throw new NotSupportedException(service.Type.ToString());\n                }\n            }\n            catch (Exception ex)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = ex.Message;\n                return RedirectToAction(nameof(Services));\n            }\n        }\n\n        [HttpGet(\"server/services/{serviceName}/{cryptoCode}/removelndseed\")]\n        public IActionResult RemoveLndSeed(string serviceName, string cryptoCode)\n        {\n            return View(\"Confirm\", new ConfirmModel(\"Delete LND seed\", \"This action will permanently delete your LND seed and password. You will not be able to recover them if you don't have a backup. Are you sure?\", \"Delete\"));\n        }\n\n        [HttpPost(\"server/services/{serviceName}/{cryptoCode}/removelndseed\")]\n        public async Task<IActionResult> RemoveLndSeedPost(string serviceName, string cryptoCode)\n        {\n            var service = GetService(serviceName, cryptoCode);\n            if (service == null)\n                return NotFound();\n\n            var model = LndSeedBackupViewModel.Parse(service.ConnectionString.CookieFilePath);\n            if (!model.IsWalletUnlockPresent)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"File with wallet password and seed info not present\";\n                return RedirectToAction(nameof(Services));\n            }\n\n            if (string.IsNullOrEmpty(model.Seed))\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"Seed information was already removed\";\n                return RedirectToAction(nameof(Services));\n            }\n\n            if (await model.RemoveSeedAndWrite(service.ConnectionString.CookieFilePath))\n            {\n                TempData[WellKnownTempData.SuccessMessage] = $\"Seed successfully removed\";\n                return RedirectToAction(nameof(Service), new { serviceName, cryptoCode });\n            }\n            else\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"Seed removal failed\";\n                return RedirectToAction(nameof(Services));\n            }\n        }\n\n        private IActionResult LightningChargeServices(ExternalService service, ExternalConnectionString connectionString, bool showQR = false)\n        {\n            ChargeServiceViewModel vm = new ChargeServiceViewModel();\n            vm.Uri = connectionString.Server.AbsoluteUri;\n            vm.APIToken = connectionString.APIToken;\n            var builder = new UriBuilder(connectionString.Server);\n            builder.UserName = \"api-token\";\n            builder.Password = vm.APIToken;\n            vm.AuthenticatedUri = builder.ToString();\n            return View(nameof(LightningChargeServices), vm);\n        }\n\n        private IActionResult LndServices(ExternalService service, ExternalConnectionString connectionString, ulong? nonce, string view = nameof(LndServices))\n        {\n            var model = new LndServicesViewModel();\n            if (service.Type == ExternalServiceTypes.LNDGRPC)\n            {\n                model.Host = $\"{connectionString.Server.DnsSafeHost}:{connectionString.Server.Port}\";\n                model.SSL = connectionString.Server.Scheme == \"https\";\n                model.ConnectionType = \"GRPC\";\n                model.GRPCSSLCipherSuites = \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256\";\n            }\n            else if (service.Type == ExternalServiceTypes.LNDRest || service.Type == ExternalServiceTypes.CLightningRest)\n            {\n                model.Uri = connectionString.Server.AbsoluteUri;\n                model.ConnectionType = \"REST\";\n            }\n\n            if (connectionString.CertificateThumbprint != null)\n            {\n                model.CertificateThumbprint = connectionString.CertificateThumbprint;\n            }\n            if (connectionString.Macaroon != null)\n            {\n                model.Macaroon = Encoders.Hex.EncodeData(connectionString.Macaroon);\n            }\n            model.AdminMacaroon = connectionString.Macaroons?.AdminMacaroon?.Hex;\n            model.InvoiceMacaroon = connectionString.Macaroons?.InvoiceMacaroon?.Hex;\n            model.ReadonlyMacaroon = connectionString.Macaroons?.ReadonlyMacaroon?.Hex;\n\n            if (nonce != null)\n            {\n                var configKey = GetConfigKey(\"lnd\", service.ServiceName, service.CryptoCode, nonce.Value);\n                var lnConfig = _LnConfigProvider.GetConfig(configKey);\n                if (lnConfig != null)\n                {\n                    model.QRCodeLink = Request.GetAbsoluteUri(Url.Action(nameof(GetLNDConfig), new { configKey = configKey }));\n                    model.QRCode = $\"config={model.QRCodeLink}\";\n                }\n            }\n\n            return View(view, model);\n        }\n\n        private static ulong GetConfigKey(string type, string serviceName, string cryptoCode, ulong nonce)\n        {\n            return ((ulong)(uint)HashCode.Combine(type, serviceName, cryptoCode, nonce) | (nonce & 0xffffffff00000000UL));\n        }\n\n        [Route(\"lnd-config/{configKey}/lnd.config\")]\n        [AllowAnonymous]\n        public IActionResult GetLNDConfig(ulong configKey)\n        {\n            var conf = _LnConfigProvider.GetConfig(configKey);\n            if (conf == null)\n                return NotFound();\n            return Json(conf);\n        }\n\n        [Route(\"server/services/{serviceName}/{cryptoCode}\")]\n        [HttpPost]\n        public async Task<IActionResult> ServicePost(string serviceName, string cryptoCode)\n        {\n            if (!_dashBoard.IsFullySynched(cryptoCode, out var unusud))\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"{cryptoCode} is not fully synched\";\n                return RedirectToAction(nameof(Services));\n            }\n            var service = GetService(serviceName, cryptoCode);\n            if (service == null)\n                return NotFound();\n\n            ExternalConnectionString? connectionString = null;\n            try\n            {\n                connectionString = await service.ConnectionString.Expand(this.Request.GetAbsoluteUriNoPathBase(), service.Type, _Options.NetworkType);\n            }\n            catch (Exception ex)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = ex.Message;\n                return RedirectToAction(nameof(Services));\n            }\n\n            LightningConfigurations confs = new LightningConfigurations();\n            if (service.Type == ExternalServiceTypes.LNDGRPC)\n            {\n                LightningConfiguration grpcConf = new LightningConfiguration();\n                grpcConf.Type = \"grpc\";\n                grpcConf.Host = connectionString.Server.DnsSafeHost;\n                grpcConf.Port = connectionString.Server.Port;\n                grpcConf.SSL = connectionString.Server.Scheme == \"https\";\n                confs.Configurations.Add(grpcConf);\n            }\n            else if (service.Type == ExternalServiceTypes.LNDRest || service.Type == ExternalServiceTypes.CLightningRest)\n            {\n                var restconf = new LNDRestConfiguration();\n                restconf.Type = service.Type == ExternalServiceTypes.LNDRest ? \"lnd-rest\" : \"clightning-rest\";\n                restconf.Uri = connectionString.Server.AbsoluteUri;\n                confs.Configurations.Add(restconf);\n            }\n            else\n                throw new NotSupportedException(service.Type.ToString());\n            var commonConf = (LNDConfiguration)confs.Configurations[confs.Configurations.Count - 1];\n            commonConf.ChainType = _Options.NetworkType.ToString();\n            commonConf.CryptoCode = cryptoCode;\n            commonConf.Macaroon = connectionString.Macaroon == null ? null : Encoders.Hex.EncodeData(connectionString.Macaroon);\n            commonConf.CertificateThumbprint = connectionString.CertificateThumbprint == null ? null : connectionString.CertificateThumbprint;\n            commonConf.AdminMacaroon = connectionString.Macaroons?.AdminMacaroon?.Hex;\n            commonConf.ReadonlyMacaroon = connectionString.Macaroons?.ReadonlyMacaroon?.Hex;\n            commonConf.InvoiceMacaroon = connectionString.Macaroons?.InvoiceMacaroon?.Hex;\n\n            var nonce = RandomUtils.GetUInt64();\n            var configKey = GetConfigKey(\"lnd\", serviceName, cryptoCode, nonce);\n            _LnConfigProvider.KeepConfig(configKey, confs);\n            return RedirectToAction(nameof(Service), new { cryptoCode = cryptoCode, serviceName = serviceName, nonce = nonce });\n        }\n\n        [Route(\"server/services/dynamic-dns\")]\n        public async Task<IActionResult> DynamicDnsServices()\n        {\n            var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n            return View(settings.Services.Select(s => new DynamicDnsViewModel()\n            {\n                Settings = s\n            }).ToArray());\n        }\n        [Route(\"server/services/dynamic-dns/{hostname}\")]\n        public async Task<IActionResult> DynamicDnsServices(string hostname)\n        {\n            var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n            var service = settings.Services.FirstOrDefault(s => s.Hostname.Equals(hostname, StringComparison.OrdinalIgnoreCase));\n            if (service == null)\n                return NotFound();\n            var vm = new DynamicDnsViewModel();\n            vm.Modify = true;\n            vm.Settings = service;\n            return View(nameof(DynamicDnsService), vm);\n        }\n        [Route(\"server/services/dynamic-dns\")]\n        [HttpPost]\n        public async Task<IActionResult> DynamicDnsService(DynamicDnsViewModel viewModel, string? command = null)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(viewModel);\n            }\n            if (command == \"Save\")\n            {\n                var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n                var i = settings.Services.FindIndex(d => d.Hostname.Equals(viewModel.Settings.Hostname, StringComparison.OrdinalIgnoreCase));\n                if (i != -1)\n                {\n                    ModelState.AddModelError(nameof(viewModel.Settings.Hostname), \"This hostname already exists\");\n                    return View(viewModel);\n                }\n                if (viewModel.Settings.Hostname != null)\n                    viewModel.Settings.Hostname = viewModel.Settings.Hostname.Trim().ToLowerInvariant();\n                string errorMessage = await viewModel.Settings.SendUpdateRequest(HttpClientFactory.CreateClient());\n                if (errorMessage == null)\n                {\n                    TempData[WellKnownTempData.SuccessMessage] = $\"The Dynamic DNS has been successfully queried, your configuration is saved\";\n                    viewModel.Settings.LastUpdated = DateTimeOffset.UtcNow;\n                    settings.Services.Add(viewModel.Settings);\n                    await _SettingsRepository.UpdateSetting(settings);\n                    return RedirectToAction(nameof(DynamicDnsServices));\n                }\n                else\n                {\n                    ModelState.AddModelError(string.Empty, errorMessage);\n                    return View(viewModel);\n                }\n            }\n            else\n            {\n                return View(new DynamicDnsViewModel() { Settings = new DynamicDnsService() });\n            }\n        }\n        [Route(\"server/services/dynamic-dns/{hostname}\")]\n        [HttpPost]\n        public async Task<IActionResult> DynamicDnsService(DynamicDnsViewModel viewModel, string hostname, string? command = null)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(viewModel);\n            }\n            var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n\n            var i = settings.Services.FindIndex(d => d.Hostname.Equals(hostname, StringComparison.OrdinalIgnoreCase));\n            if (i == -1)\n                return NotFound();\n            if (viewModel.Settings.Password == null)\n                viewModel.Settings.Password = settings.Services[i].Password;\n            if (viewModel.Settings.Hostname != null)\n                viewModel.Settings.Hostname = viewModel.Settings.Hostname.Trim().ToLowerInvariant();\n            if (!viewModel.Settings.Enabled)\n            {\n                TempData[WellKnownTempData.SuccessMessage] = $\"The Dynamic DNS service has been disabled\";\n                viewModel.Settings.LastUpdated = null;\n            }\n            else\n            {\n                string errorMessage = await viewModel.Settings.SendUpdateRequest(HttpClientFactory.CreateClient());\n                if (errorMessage == null)\n                {\n                    TempData[WellKnownTempData.SuccessMessage] = $\"The Dynamic DNS has been successfully queried, your configuration is saved\";\n                    viewModel.Settings.LastUpdated = DateTimeOffset.UtcNow;\n                }\n                else\n                {\n                    ModelState.AddModelError(string.Empty, errorMessage);\n                    return View(viewModel);\n                }\n            }\n            settings.Services[i] = viewModel.Settings;\n            await _SettingsRepository.UpdateSetting(settings);\n            this.RouteData.Values.Remove(nameof(hostname));\n            return RedirectToAction(nameof(DynamicDnsServices));\n        }\n\n        [HttpGet(\"server/services/dynamic-dns/{hostname}/delete\")]\n        public async Task<IActionResult> DeleteDynamicDnsService(string hostname)\n        {\n            var settings = await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>() ?? new DynamicDnsSettings();\n            var i = settings.Services.FindIndex(d => d.Hostname.Equals(hostname, StringComparison.OrdinalIgnoreCase));\n            if (i == -1)\n                return NotFound();\n            return View(\"Confirm\",\n                new ConfirmModel(\"Delete dynamic DNS service\",\n                    $\"Deleting the dynamic DNS service for <strong>{hostname}</strong> means your BTCPay Server will stop updating the associated DNS record periodically.\", \"Delete\"));\n        }\n\n        [HttpPost(\"server/services/dynamic-dns/{hostname}/delete\")]\n        public async Task<IActionResult> DeleteDynamicDnsServicePost(string hostname)\n        {\n            var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n            var i = settings.Services.FindIndex(d => d.Hostname.Equals(hostname, StringComparison.OrdinalIgnoreCase));\n            if (i == -1)\n                return NotFound();\n            settings.Services.RemoveAt(i);\n            await _SettingsRepository.UpdateSetting(settings);\n            TempData[WellKnownTempData.SuccessMessage] = \"Dynamic DNS service successfully removed\";\n            RouteData.Values.Remove(nameof(hostname));\n            return RedirectToAction(nameof(DynamicDnsServices));\n        }\n\n        [HttpGet(\"server/services/ssh\")]\n        public async Task<IActionResult> SSHService()\n        {\n            if (!CanShowSSHService())\n                return NotFound();\n\n            var settings = _Options.SSHSettings;\n            var server = Extensions.IsLocalNetwork(settings.Server) ? this.Request.Host.Host : settings.Server;\n            SSHServiceViewModel vm = new SSHServiceViewModel();\n            string port = settings.Port == 22 ? \"\" : $\" -p {settings.Port}\";\n            vm.CommandLine = $\"ssh {settings.Username}@{server}{port}\";\n            vm.Password = settings.Password;\n            vm.KeyFilePassword = settings.KeyFilePassword;\n            vm.HasKeyFile = !string.IsNullOrEmpty(settings.KeyFile);\n\n            //  Let's try to just read the authorized key file\n            if (CanAccessAuthorizedKeyFile())\n            {\n                try\n                {\n                    vm.SSHKeyFileContent = await System.IO.File.ReadAllTextAsync(settings.AuthorizedKeysFile);\n                }\n                catch { }\n            }\n\n            // If that fail, just fallback to ssh\n            if (vm.SSHKeyFileContent == null && _sshState.CanUseSSH)\n            {\n                try\n                {\n                    using var sshClient = await _Options.SSHSettings.ConnectAsync();\n                    var result = await sshClient.RunBash(\"cat ~/.ssh/authorized_keys\", TimeSpan.FromSeconds(10));\n                    vm.SSHKeyFileContent = result.Output;\n                }\n                catch { }\n            }\n            return View(vm);\n        }\n\n        bool CanShowSSHService()\n        {\n            return !_policiesSettings.DisableSSHService &&\n                   _Options.SSHSettings != null && (_sshState.CanUseSSH || CanAccessAuthorizedKeyFile());\n        }\n\n        private bool CanAccessAuthorizedKeyFile()\n        {\n            return _Options.SSHSettings?.AuthorizedKeysFile != null && System.IO.File.Exists(_Options.SSHSettings.AuthorizedKeysFile);\n        }\n\n        [HttpPost(\"server/services/ssh\")]\n        public async Task<IActionResult> SSHService(SSHServiceViewModel viewModel, string? command = null)\n        {\n            if (!CanShowSSHService())\n                return NotFound();\n\n            if (command is \"Save\")\n            {\n                string newContent = viewModel?.SSHKeyFileContent ?? string.Empty;\n                newContent = newContent.Replace(\"\\r\\n\", \"\\n\", StringComparison.OrdinalIgnoreCase);\n\n                bool updated = false;\n                Exception? exception = null;\n                // Let's try to just write the file\n                if (CanAccessAuthorizedKeyFile())\n                {\n                    try\n                    {\n                        await System.IO.File.WriteAllTextAsync(_Options.SSHSettings.AuthorizedKeysFile, newContent);\n                        TempData[WellKnownTempData.SuccessMessage] = \"authorized_keys has been updated\";\n                        updated = true;\n                    }\n                    catch (Exception ex)\n                    {\n                        exception = ex;\n                    }\n                }\n\n                // If that fail, fallback to ssh\n                if (!updated && _sshState.CanUseSSH)\n                {\n                    try\n                    {\n                        using (var sshClient = await _Options.SSHSettings.ConnectAsync())\n                        {\n                            await sshClient.RunBash($\"mkdir -p ~/.ssh && echo '{newContent.EscapeSingleQuotes()}' > ~/.ssh/authorized_keys\", TimeSpan.FromSeconds(10));\n                        }\n                        updated = true;\n                        exception = null;\n                    }\n                    catch (Exception ex)\n                    {\n                        exception = ex;\n                    }\n                }\n\n                if (exception is null)\n                {\n                    TempData[WellKnownTempData.SuccessMessage] = \"authorized_keys has been updated\";\n                }\n                else\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = exception.Message;\n                }\n                return RedirectToAction(nameof(SSHService));\n            }\n\n            if (command is \"disable\")\n            {\n                return RedirectToAction(nameof(SSHServiceDisable));\n            }\n\n            return NotFound();\n        }\n\n        [HttpGet(\"server/services/ssh/disable\")]\n        public IActionResult SSHServiceDisable()\n        {\n            return View(\"Confirm\", new ConfirmModel(\"Disable modification of SSH settings\", \"This action is permanent and will remove the ability to change the SSH settings via the BTCPay Server user interface.\", \"Disable\"));\n        }\n\n        [HttpPost(\"server/services/ssh/disable\")]\n        public async Task<IActionResult> SSHServiceDisablePost()\n        {\n            var policies = await _SettingsRepository.GetSettingAsync<PoliciesSettings>() ?? new PoliciesSettings();\n            policies.DisableSSHService = true;\n            await _SettingsRepository.UpdateSetting(policies);\n            TempData[WellKnownTempData.SuccessMessage] = \"Changes to the SSH settings are now permanently disabled in the BTCPay Server user interface\";\n            return RedirectToAction(nameof(Services));\n        }\n\n        [HttpGet(\"server/theme\")]\n        public async Task<IActionResult> Theme()\n        {\n            var data = await _SettingsRepository.GetSettingAsync<ThemeSettings>() ?? new ThemeSettings();\n            return View(data);\n        }\n\n        [HttpPost(\"server/theme\")]\n        public async Task<IActionResult> Theme(\n            ThemeSettings model,\n            [FromForm] bool RemoveLogoFile,\n            [FromForm] bool RemoveCustomThemeFile)\n        {\n            var settingsChanged = false;\n            var settings = await _SettingsRepository.GetSettingAsync<ThemeSettings>() ?? new ThemeSettings();\n\n            var userId = GetUserId();\n            if (userId is null)\n                return NotFound();\n\n            if (model.CustomThemeFile != null)\n            {\n                if (model.CustomThemeFile.ContentType.Equals(\"text/css\", StringComparison.InvariantCulture))\n                {\n                    // delete existing file\n                    if (!string.IsNullOrEmpty(settings.CustomThemeFileId))\n                    {\n                        await _fileService.RemoveFile(settings.CustomThemeFileId, userId);\n                    }\n\n                    // add new file\n                    try\n                    {\n                        var storedFile = await _fileService.AddFile(model.CustomThemeFile, userId);\n                        settings.CustomThemeFileId = storedFile.Id;\n                        settingsChanged = true;\n                    }\n                    catch (Exception e)\n                    {\n                        ModelState.AddModelError(nameof(settings.CustomThemeFile), $\"Could not save theme file: {e.Message}\");\n                    }\n                }\n                else\n                {\n                    ModelState.AddModelError(nameof(settings.CustomThemeFile), \"The uploaded theme file needs to be a CSS file\");\n                }\n            }\n            else if (RemoveCustomThemeFile && !string.IsNullOrEmpty(settings.CustomThemeFileId))\n            {\n                await _fileService.RemoveFile(settings.CustomThemeFileId, userId);\n                settings.CustomThemeFileId = null;\n                settingsChanged = true;\n            }\n\n            if (model.LogoFile != null)\n            {\n                if (model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))\n                {\n                    // delete existing image\n                    if (!string.IsNullOrEmpty(settings.LogoFileId))\n                    {\n                        await _fileService.RemoveFile(settings.LogoFileId, userId);\n                    }\n\n                    // add new image\n                    try\n                    {\n                        var storedFile = await _fileService.AddFile(model.LogoFile, userId);\n                        settings.LogoFileId = storedFile.Id;\n                        settingsChanged = true;\n                    }\n                    catch (Exception e)\n                    {\n                        ModelState.AddModelError(nameof(settings.LogoFile), $\"Could not save logo: {e.Message}\");\n                    }\n                }\n                else\n                {\n                    ModelState.AddModelError(nameof(settings.LogoFile), \"The uploaded logo file needs to be an image\");\n                }\n            }\n            else if (RemoveLogoFile && !string.IsNullOrEmpty(settings.LogoFileId))\n            {\n                await _fileService.RemoveFile(settings.LogoFileId, userId);\n                settings.LogoFileId = null;\n                settingsChanged = true;\n            }\n\n            if (model.CustomTheme && !string.IsNullOrEmpty(model.CustomThemeCssUri) && !Uri.IsWellFormedUriString(model.CustomThemeCssUri, UriKind.RelativeOrAbsolute))\n            {\n                ModelState.AddModelError(nameof(settings.CustomThemeCssUri), \"Please provide a non-empty theme URI\");\n            }\n\n            if (settings.CustomThemeExtension != model.CustomThemeExtension)\n            {\n                // Require a custom theme to be defined in that case\n                if (string.IsNullOrEmpty(model.CustomThemeCssUri) && string.IsNullOrEmpty(settings.CustomThemeFileId))\n                {\n                    ModelState.AddModelError(nameof(settings.CustomThemeFile), \"Please provide a custom theme\");\n                }\n                else\n                {\n                    settings.CustomThemeExtension = model.CustomThemeExtension;\n                    settingsChanged = true;\n                }\n            }\n\n            if (settings.CustomTheme != model.CustomTheme)\n            {\n                settings.CustomTheme = model.CustomTheme;\n                settingsChanged = true;\n            }\n\n            if (settingsChanged)\n            {\n                await _SettingsRepository.UpdateSetting(settings);\n                TempData[WellKnownTempData.SuccessMessage] = \"Theme settings updated successfully\";\n            }\n\n            return View(settings);\n        }\n\n        [Route(\"server/emails\")]\n        public async Task<IActionResult> Emails()\n        {\n            var data = (await _SettingsRepository.GetSettingAsync<EmailSettings>()) ?? new EmailSettings();\n            return View(new EmailsViewModel(data));\n        }\n\n        [Route(\"server/emails\")]\n        [HttpPost]\n        public async Task<IActionResult> Emails(EmailsViewModel model, string command)\n        {\n            if (command == \"Test\")\n            {\n                try\n                {\n                    if (model.PasswordSet)\n                    {\n                        var settings = await _SettingsRepository.GetSettingAsync<EmailSettings>() ?? new EmailSettings();\n                        model.Settings.Password = settings.Password;\n                    }\n                    model.Settings.Validate(\"Settings.\", ModelState);\n                    if (string.IsNullOrEmpty(model.TestEmail))\n                        ModelState.AddModelError(nameof(model.TestEmail), new RequiredAttribute().FormatErrorMessage(nameof(model.TestEmail)));\n                    if (!ModelState.IsValid)\n                        return View(model);\n                    using (var client = await model.Settings.CreateSmtpClient())\n                    using (var message = model.Settings.CreateMailMessage(MailboxAddress.Parse(model.TestEmail), \"BTCPay test\", \"BTCPay test\", false))\n                    {\n                        await client.SendAsync(message);\n                        await client.DisconnectAsync(true);\n                    }\n                    TempData[WellKnownTempData.SuccessMessage] = $\"Email sent to {model.TestEmail}. Please verify you received it.\";\n                }\n                catch (Exception ex)\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = ex.Message;\n                }\n                return View(model);\n            }\n            if (command == \"ResetPassword\")\n            {\n                var settings = await _SettingsRepository.GetSettingAsync<EmailSettings>() ?? new EmailSettings();\n                settings.Password = null;\n                await _SettingsRepository.UpdateSetting(settings);\n                TempData[WellKnownTempData.SuccessMessage] = \"Email server password reset\";\n                return RedirectToAction(nameof(Emails));\n            }\n            else // if (command == \"Save\")\n            {\n                if (model.Settings.From is not null && !MailboxAddressValidator.IsMailboxAddress(model.Settings.From))\n                {\n                    ModelState.AddModelError(\"Settings.From\", \"Invalid email\");\n                    return View(model);\n                }\n                var oldSettings = await _SettingsRepository.GetSettingAsync<EmailSettings>() ?? new EmailSettings();\n                if (new EmailsViewModel(oldSettings).PasswordSet)\n                {\n                    model.Settings.Password = oldSettings.Password;\n                }\n                await _SettingsRepository.UpdateSetting(model.Settings);\n                TempData[WellKnownTempData.SuccessMessage] = \"Email settings saved\";\n                return RedirectToAction(nameof(Emails));\n            }\n        }\n\n        [Route(\"server/logs/{file?}\")]\n        public async Task<IActionResult> LogsView(string? file = null, int offset = 0)\n        {\n            if (offset < 0)\n            {\n                offset = 0;\n            }\n\n            var vm = new LogsViewModel();\n\n            if (string.IsNullOrEmpty(_Options.LogFile))\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"File Logging Option not specified. \" +\n                                   \"You need to set debuglog and optionally \" +\n                                   \"debugloglevel in the configuration or through runtime arguments\";\n            }\n            else\n            {\n                var di = Directory.GetParent(_Options.LogFile);\n                if (di is null)\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = \"Could not load log files\";\n                    return View(\"Logs\", vm);\n                }\n\n                var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(_Options.LogFile);\n                var fileExtension = Path.GetExtension(_Options.LogFile) ?? string.Empty;\n                // We are checking if \"di\" is null above yet accessing GetFiles on it, this could lead to an exception?\n                var logFiles = di.GetFiles($\"{fileNameWithoutExtension}*{fileExtension}\");\n                vm.LogFileCount = logFiles.Length;\n                vm.LogFiles = logFiles\n                    .OrderBy(info => info.LastWriteTime)\n                    .Skip(offset)\n                    .Take(5)\n                    .ToList();\n                vm.LogFileOffset = offset;\n\n                if (string.IsNullOrEmpty(file) || !file.EndsWith(fileExtension, StringComparison.Ordinal))\n                    return View(\"Logs\", vm);\n                vm.Log = \"\";\n                var fi = vm.LogFiles.FirstOrDefault(o => o.Name == file);\n                if (fi == null)\n                    return NotFound();\n                try\n                {\n                    using var fileStream = new FileStream(\n                        fi.FullName,\n                        FileMode.Open,\n                        FileAccess.Read,\n                        FileShare.ReadWrite);\n                    using var reader = new StreamReader(fileStream);\n                    vm.Log = await reader.ReadToEndAsync();\n                }\n                catch\n                {\n                    return NotFound();\n                }\n            }\n\n            return View(\"Logs\", vm);\n        }\n    }\n}\n", "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Data;\nusing BTCPayServer.Events;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.StoreViewModels;\nusing BTCPayServer.Payments;\nusing BTCPayServer.Services;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing NBitcoin;\nusing NBitcoin.DataEncoders;\nusing NBXplorer;\nusing NBXplorer.DerivationStrategy;\nusing NBXplorer.Models;\n\nnamespace BTCPayServer.Controllers\n{\n    public partial class UIStoresController\n    {\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}\")]\n        public ActionResult SetupWallet(WalletSetupViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out _);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(vm.CryptoCode, store);\n            vm.DerivationScheme = derivation?.AccountDerivation.ToString();\n\n            return View(vm);\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/import/{method?}\")]\n        public async Task<IActionResult> ImportWallet(WalletSetupViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out _, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var (hotWallet, rpcImport) = await CanUseHotWallet();\n            vm.Network = network;\n            vm.CanUseHotWallet = hotWallet;\n            vm.CanUseRPCImport = rpcImport;\n            vm.SupportTaproot = network.NBitcoinNetwork.Consensus.SupportTaproot;\n            vm.SupportSegwit = network.NBitcoinNetwork.Consensus.SupportSegwit;\n\n            if (vm.Method == null)\n            {\n                vm.Method = WalletSetupMethod.ImportOptions;\n            }\n            else if (vm.Method == WalletSetupMethod.Seed)\n            {\n                vm.SetupRequest = new WalletSetupRequest();\n            }\n\n            return View(vm.ViewName, vm);\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/modify\")]\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/import/{method}\")]\n        public async Task<IActionResult> UpdateWallet(WalletSetupViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            vm.Network = network;\n            DerivationSchemeSettings strategy = null;\n\n            var wallet = _WalletProvider.GetWallet(network);\n            if (wallet == null)\n            {\n                return NotFound();\n            }\n\n            if (vm.WalletFile != null)\n            {\n                if (!DerivationSchemeSettings.TryParseFromWalletFile(await ReadAllText(vm.WalletFile), network, out strategy, out var error))\n                {\n                    ModelState.AddModelError(nameof(vm.WalletFile), $\"Importing wallet failed: {error}\");\n                    return View(vm.ViewName, vm);\n                }\n            }\n            else if (!string.IsNullOrEmpty(vm.WalletFileContent))\n            {\n                if (!DerivationSchemeSettings.TryParseFromWalletFile(vm.WalletFileContent, network, out strategy, out var error))\n                {\n                    ModelState.AddModelError(nameof(vm.WalletFileContent), $\"QR import failed: {error}\");\n                    return View(vm.ViewName, vm);\n                }\n            }\n            else if (!string.IsNullOrEmpty(vm.DerivationScheme))\n            {\n                try\n                {\n                    strategy = ParseDerivationStrategy(vm.DerivationScheme, network);\n                    strategy.Source = \"ManualDerivationScheme\";\n                    if (!string.IsNullOrEmpty(vm.AccountKey))\n                    {\n                        var accountKey = new BitcoinExtPubKey(vm.AccountKey, network.NBitcoinNetwork);\n                        var accountSettings =\n                            strategy.AccountKeySettings.FirstOrDefault(a => a.AccountKey == accountKey);\n                        if (accountSettings != null)\n                        {\n                            accountSettings.AccountKeyPath =\n                                vm.KeyPath == null ? null : KeyPath.Parse(vm.KeyPath);\n                            accountSettings.RootFingerprint = string.IsNullOrEmpty(vm.RootFingerprint)\n                                ? null\n                                : new HDFingerprint(Encoders.Hex.DecodeData(vm.RootFingerprint));\n                        }\n                    }\n                    vm.DerivationScheme = strategy.AccountDerivation.ToString();\n                    ModelState.Remove(nameof(vm.DerivationScheme));\n                }\n                catch (Exception ex)\n                {\n                    ModelState.AddModelError(nameof(vm.DerivationScheme), $\"Invalid wallet format: {ex.Message}\");\n                    return View(vm.ViewName, vm);\n                }\n            }\n            else if (!string.IsNullOrEmpty(vm.Config))\n            {\n                if (!DerivationSchemeSettings.TryParseFromJson(UnprotectString(vm.Config), network, out strategy))\n                {\n                    ModelState.AddModelError(nameof(vm.Config), \"Config file was not in the correct format\");\n                    return View(vm.ViewName, vm);\n                }\n            }\n\n            if (strategy is null)\n            {\n                ModelState.AddModelError(nameof(vm.DerivationScheme), \"Please provide your extended public key\");\n                return View(vm.ViewName, vm);\n            }\n\n            vm.Config = ProtectString(strategy.ToJson());\n            ModelState.Remove(nameof(vm.Config));\n\n            PaymentMethodId paymentMethodId = new PaymentMethodId(network.CryptoCode, PaymentTypes.BTCLike);\n            var storeBlob = store.GetStoreBlob();\n            if (vm.Confirmation)\n            {\n                try\n                {\n                    await wallet.TrackAsync(strategy.AccountDerivation);\n                    store.SetSupportedPaymentMethod(paymentMethodId, strategy);\n                    storeBlob.SetExcluded(paymentMethodId, false);\n                    storeBlob.PayJoinEnabled = strategy.IsHotWallet && !(vm.SetupRequest?.PayJoinEnabled is false);\n                    store.SetStoreBlob(storeBlob);\n                }\n                catch\n                {\n                    ModelState.AddModelError(nameof(vm.DerivationScheme), \"Invalid derivation scheme\");\n                    return View(vm.ViewName, vm);\n                }\n                await _Repo.UpdateStore(store);\n                _EventAggregator.Publish(new WalletChangedEvent { WalletId = new WalletId(vm.StoreId, vm.CryptoCode) });\n\n                TempData[WellKnownTempData.SuccessMessage] = $\"Wallet settings for {network.CryptoCode} have been updated.\";\n\n                // This is success case when derivation scheme is added to the store\n                return RedirectToAction(nameof(WalletSettings), new { storeId = vm.StoreId, cryptoCode = vm.CryptoCode });\n            }\n            return ConfirmAddresses(vm, strategy);\n        }\n\n        private string ProtectString(string str)\n        {\n            return Convert.ToBase64String(DataProtector.Protect(Encoding.UTF8.GetBytes(str)));\n        }\n        private string UnprotectString(string str)\n        {\n            return Encoding.UTF8.GetString(DataProtector.Unprotect(Convert.FromBase64String(str)));\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/generate/{method?}\")]\n        public async Task<IActionResult> GenerateWallet(WalletSetupViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var isHotWallet = vm.Method == WalletSetupMethod.HotWallet;\n            var (hotWallet, rpcImport) = await CanUseHotWallet();\n            if (isHotWallet && !hotWallet)\n            {\n                return NotFound();\n            }\n\n            vm.CanUseHotWallet = hotWallet;\n            vm.CanUseRPCImport = rpcImport;\n            vm.SupportTaproot = network.NBitcoinNetwork.Consensus.SupportTaproot;\n            vm.SupportSegwit = network.NBitcoinNetwork.Consensus.SupportSegwit;\n            vm.Network = network;\n\n            if (vm.Method == null)\n            {\n                vm.Method = WalletSetupMethod.GenerateOptions;\n            }\n            else\n            {\n                var canUsePayJoin = hotWallet && isHotWallet && network.SupportPayJoin;\n                vm.SetupRequest = new WalletSetupRequest\n                {\n                    SavePrivateKeys = isHotWallet,\n                    CanUsePayJoin = canUsePayJoin,\n                    PayJoinEnabled = canUsePayJoin\n                };\n            }\n\n            return View(vm.ViewName, vm);\n        }\n        internal GenerateWalletResponse GenerateWalletResponse;\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/generate/{method}\")]\n        public async Task<IActionResult> GenerateWallet(string storeId, string cryptoCode, WalletSetupMethod method, WalletSetupRequest request)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var (hotWallet, rpcImport) = await CanUseHotWallet();\n            if (!hotWallet && request.SavePrivateKeys || !rpcImport && request.ImportKeysToRPC)\n            {\n                return NotFound();\n            }\n\n            var client = _ExplorerProvider.GetExplorerClient(cryptoCode);\n            var isImport = method == WalletSetupMethod.Seed;\n            var vm = new WalletSetupViewModel\n            {\n                StoreId = storeId,\n                CryptoCode = cryptoCode,\n                Method = method,\n                SetupRequest = request,\n                Confirmation = string.IsNullOrEmpty(request.ExistingMnemonic),\n                Network = network,\n                Source = isImport ? \"SeedImported\" : \"NBXplorerGenerated\",\n                IsHotWallet = isImport ? request.SavePrivateKeys : method == WalletSetupMethod.HotWallet,\n                DerivationSchemeFormat = \"BTCPay\",\n                CanUseHotWallet = hotWallet,\n                CanUseRPCImport = rpcImport,\n                SupportTaproot = network.NBitcoinNetwork.Consensus.SupportTaproot,\n                SupportSegwit = network.NBitcoinNetwork.Consensus.SupportSegwit\n            };\n\n            if (isImport && string.IsNullOrEmpty(request.ExistingMnemonic))\n            {\n                ModelState.AddModelError(nameof(request.ExistingMnemonic), \"Please provide your existing seed\");\n                return View(vm.ViewName, vm);\n            }\n\n            GenerateWalletResponse response;\n            try\n            {\n                response = await client.GenerateWalletAsync(request);\n                if (response == null)\n                {\n                    throw new Exception(\"Node unavailable\");\n                }\n            }\n            catch (Exception e)\n            {\n                TempData.SetStatusMessageModel(new StatusMessageModel\n                {\n                    Severity = StatusMessageModel.StatusSeverity.Error,\n                    Html = $\"There was an error generating your wallet: {e.Message}\"\n                });\n                return View(vm.ViewName, vm);\n            }\n\n            var derivationSchemeSettings = new DerivationSchemeSettings(response.DerivationScheme, network);\n            if (method == WalletSetupMethod.Seed)\n            {\n                derivationSchemeSettings.Source = \"ImportedSeed\";\n                derivationSchemeSettings.IsHotWallet = request.SavePrivateKeys;\n            }\n            else\n            {\n                derivationSchemeSettings.Source = \"NBXplorerGenerated\";\n                derivationSchemeSettings.IsHotWallet = method == WalletSetupMethod.HotWallet;\n            }\n\n            var accountSettings = derivationSchemeSettings.GetSigningAccountKeySettings();\n            accountSettings.AccountKeyPath = response.AccountKeyPath.KeyPath;\n            accountSettings.RootFingerprint = response.AccountKeyPath.MasterFingerprint;\n            derivationSchemeSettings.AccountOriginal = response.DerivationScheme.ToString();\n\n            // Set wallet properties from generate response\n            vm.RootFingerprint = response.AccountKeyPath.MasterFingerprint.ToString();\n            vm.AccountKey = response.AccountHDKey.Neuter().ToWif();\n            vm.KeyPath = response.AccountKeyPath.KeyPath.ToString();\n            vm.Config = ProtectString(derivationSchemeSettings.ToJson());\n\n            var result = await UpdateWallet(vm);\n\n            if (!ModelState.IsValid || !(result is RedirectToActionResult))\n                return result;\n\n            if (!isImport)\n            {\n                TempData.SetStatusMessageModel(new StatusMessageModel\n                {\n                    Severity = StatusMessageModel.StatusSeverity.Success,\n                    Html = \"<span class='text-centered'>Your wallet has been generated.</span>\"\n                });\n                var seedVm = new RecoverySeedBackupViewModel\n                {\n                    CryptoCode = cryptoCode,\n                    Mnemonic = response.Mnemonic,\n                    Passphrase = response.Passphrase,\n                    IsStored = request.SavePrivateKeys,\n                    ReturnUrl = Url.Action(nameof(GenerateWalletConfirm), new { storeId, cryptoCode })\n                };\n                if (_BTCPayEnv.IsDeveloping)\n                {\n                    GenerateWalletResponse = response;\n                }\n                return this.RedirectToRecoverySeedBackup(seedVm);\n            }\n\n            TempData.SetStatusMessageModel(new StatusMessageModel\n            {\n                Severity = StatusMessageModel.StatusSeverity.Warning,\n                Html = \"Please check your addresses and confirm.\"\n            });\n            return result;\n        }\n\n        // The purpose of this action is to show the user a success message, which confirms\n        // that the store settings have been updated after generating a new wallet.\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/generate/confirm\")]\n        public ActionResult GenerateWalletConfirm(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out _, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            TempData[WellKnownTempData.SuccessMessage] = $\"Wallet settings for {network.CryptoCode} have been updated.\";\n\n            var walletId = new WalletId(storeId, cryptoCode);\n            return RedirectToAction(nameof(UIWalletsController.WalletTransactions), \"UIWallets\", new { walletId });\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/settings\")]\n        public async Task<IActionResult> WalletSettings(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            var storeBlob = store.GetStoreBlob();\n            var excludeFilters = storeBlob.GetExcludedPaymentMethods();\n            (bool canUseHotWallet, bool rpcImport) = await CanUseHotWallet();\n            var client = _ExplorerProvider.GetExplorerClient(network);\n\n            var vm = new WalletSettingsViewModel\n            {\n                StoreId = storeId,\n                CryptoCode = cryptoCode,\n                WalletId = new WalletId(storeId, cryptoCode),\n                Enabled = !excludeFilters.Match(derivation.PaymentId),\n                Network = network,\n                IsHotWallet = derivation.IsHotWallet,\n                Source = derivation.Source,\n                RootFingerprint = derivation.GetSigningAccountKeySettings().RootFingerprint.ToString(),\n                DerivationScheme = derivation.AccountDerivation.ToString(),\n                DerivationSchemeInput = derivation.AccountOriginal,\n                KeyPath = derivation.GetSigningAccountKeySettings().AccountKeyPath?.ToString(),\n                UriScheme = derivation.Network.NBitcoinNetwork.UriScheme,\n                Label = derivation.Label,\n                SelectedSigningKey = derivation.SigningKey.ToString(),\n                NBXSeedAvailable = derivation.IsHotWallet &&\n                                   canUseHotWallet &&\n                                   !string.IsNullOrEmpty(await client.GetMetadataAsync<string>(derivation.AccountDerivation,\n                                       WellknownMetadataKeys.MasterHDKey)),\n                AccountKeys = derivation.AccountKeySettings\n                    .Select(e => new WalletSettingsAccountKeyViewModel\n                    {\n                        AccountKey = e.AccountKey.ToString(),\n                        MasterFingerprint = e.RootFingerprint is HDFingerprint fp ? fp.ToString() : null,\n                        AccountKeyPath = e.AccountKeyPath == null ? \"\" : $\"m/{e.AccountKeyPath}\"\n                    }).ToList(),\n                Config = ProtectString(derivation.ToJson()),\n                PayJoinEnabled = storeBlob.PayJoinEnabled,\n                MonitoringExpiration = (int)storeBlob.MonitoringExpiration.TotalMinutes,\n                SpeedPolicy = store.SpeedPolicy,\n                ShowRecommendedFee = storeBlob.ShowRecommendedFee,\n                RecommendedFeeBlockTarget = storeBlob.RecommendedFeeBlockTarget,\n                CanUseHotWallet = canUseHotWallet,\n                CanUseRPCImport = rpcImport,\n                CanUsePayJoin = canUseHotWallet && store\n                    .GetSupportedPaymentMethods(_NetworkProvider)\n                    .OfType<DerivationSchemeSettings>()\n                    .Any(settings => settings.Network.SupportPayJoin && settings.IsHotWallet),\n                StoreName = store.StoreName,\n\n            };\n\n            ViewData[\"ReplaceDescription\"] = WalletReplaceWarning(derivation.IsHotWallet);\n            ViewData[\"RemoveDescription\"] = WalletRemoveWarning(derivation.IsHotWallet, network.CryptoCode);\n\n            return View(vm);\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/settings/wallet\")]\n        public async Task<IActionResult> UpdateWalletSettings(WalletSettingsViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out _);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(vm.CryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            var storeBlob = store.GetStoreBlob();\n            var excludeFilters = storeBlob.GetExcludedPaymentMethods();\n            var currentlyEnabled = !excludeFilters.Match(derivation.PaymentId);\n            bool enabledChanged = currentlyEnabled != vm.Enabled;\n            bool needUpdate = enabledChanged;\n            string errorMessage = null;\n\n            if (enabledChanged)\n            {\n                storeBlob.SetExcluded(derivation.PaymentId, !vm.Enabled);\n                store.SetStoreBlob(storeBlob);\n            }\n\n            if (derivation.Label != vm.Label)\n            {\n                needUpdate = true;\n                derivation.Label = vm.Label;\n            }\n\n            var signingKey = string.IsNullOrEmpty(vm.SelectedSigningKey)\n                ? null\n                : new BitcoinExtPubKey(vm.SelectedSigningKey, derivation.Network.NBitcoinNetwork);\n            if (derivation.SigningKey != signingKey && signingKey != null)\n            {\n                needUpdate = true;\n                derivation.SigningKey = signingKey;\n            }\n\n            for (int i = 0; i < derivation.AccountKeySettings.Length; i++)\n            {\n                KeyPath accountKeyPath;\n                HDFingerprint? rootFingerprint;\n\n                try\n                {\n                    accountKeyPath = string.IsNullOrWhiteSpace(vm.AccountKeys[i].AccountKeyPath)\n                        ? null\n                        : new KeyPath(vm.AccountKeys[i].AccountKeyPath);\n\n                    if (accountKeyPath != null && derivation.AccountKeySettings[i].AccountKeyPath != accountKeyPath)\n                    {\n                        needUpdate = true;\n                        derivation.AccountKeySettings[i].AccountKeyPath = accountKeyPath;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    errorMessage = $\"{ex.Message}: {vm.AccountKeys[i].AccountKeyPath}\";\n                }\n\n                try\n                {\n                    rootFingerprint = string.IsNullOrWhiteSpace(vm.AccountKeys[i].MasterFingerprint)\n                        ? (HDFingerprint?)null\n                        : new HDFingerprint(Encoders.Hex.DecodeData(vm.AccountKeys[i].MasterFingerprint));\n\n                    if (rootFingerprint != null && derivation.AccountKeySettings[i].RootFingerprint != rootFingerprint)\n                    {\n                        needUpdate = true;\n                        derivation.AccountKeySettings[i].RootFingerprint = rootFingerprint;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    errorMessage = $\"{ex.Message}: {vm.AccountKeys[i].MasterFingerprint}\";\n                }\n            }\n\n            if (needUpdate)\n            {\n                store.SetSupportedPaymentMethod(derivation);\n\n                await _Repo.UpdateStore(store);\n\n                if (string.IsNullOrEmpty(errorMessage))\n                {\n                    var successMessage = \"Wallet settings successfully updated.\";\n                    if (enabledChanged)\n                    {\n                        _EventAggregator.Publish(new WalletChangedEvent { WalletId = new WalletId(vm.StoreId, vm.CryptoCode) });\n                        successMessage += $\" {vm.CryptoCode} on-chain payments are now {(vm.Enabled ? \"enabled\" : \"disabled\")} for this store.\";\n                    }\n\n                    TempData[WellKnownTempData.SuccessMessage] = successMessage;\n                }\n                else\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = errorMessage;\n                }\n            }\n\n            return RedirectToAction(nameof(WalletSettings), new { vm.StoreId, vm.CryptoCode });\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/settings/payment\")]\n        public async Task<IActionResult> UpdatePaymentSettings(WalletSettingsViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out _);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(vm.CryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            bool needUpdate = false;\n            if (store.SpeedPolicy != vm.SpeedPolicy)\n            {\n                needUpdate = true;\n                store.SpeedPolicy = vm.SpeedPolicy;\n            }\n\n            var blob = store.GetStoreBlob();\n            var payjoinChanged = blob.PayJoinEnabled != vm.PayJoinEnabled;\n            blob.MonitoringExpiration = TimeSpan.FromMinutes(vm.MonitoringExpiration);\n            blob.ShowRecommendedFee = vm.ShowRecommendedFee;\n            blob.RecommendedFeeBlockTarget = vm.RecommendedFeeBlockTarget;\n            blob.PayJoinEnabled = vm.PayJoinEnabled;\n\n            if (store.SetStoreBlob(blob))\n            {\n                needUpdate = true;\n            }\n\n            if (needUpdate)\n            {\n                await _Repo.UpdateStore(store);\n\n                TempData[WellKnownTempData.SuccessMessage] = \"Payment settings successfully updated\";\n\n                if (payjoinChanged && blob.PayJoinEnabled)\n                {\n                    var problematicPayjoinEnabledMethods = store.GetSupportedPaymentMethods(_NetworkProvider)\n                        .OfType<DerivationSchemeSettings>()\n                        .Where(settings => settings.Network.SupportPayJoin && !settings.IsHotWallet)\n                        .Select(settings => settings.PaymentId.CryptoCode)\n                        .ToArray();\n\n                    if (problematicPayjoinEnabledMethods.Any())\n                    {\n                        TempData.Remove(WellKnownTempData.SuccessMessage);\n                        TempData.SetStatusMessageModel(new StatusMessageModel()\n                        {\n                            Severity = StatusMessageModel.StatusSeverity.Warning,\n                            Html = $\"The payment settings were updated successfully. However, PayJoin will not work for {string.Join(\", \", problematicPayjoinEnabledMethods)} until you configure them to be a <a href='https://docs.btcpayserver.org/HotWallet/' class='alert-link' target='_blank'>hot wallet</a>.\"\n                        });\n                    }\n                }\n            }\n\n            return RedirectToAction(nameof(WalletSettings), new { vm.StoreId, vm.CryptoCode });\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/seed\")]\n        public async Task<IActionResult> WalletSeed(string storeId, string cryptoCode, CancellationToken cancellationToken = default)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            (bool canUseHotWallet, bool _) = await CanUseHotWallet();\n            if (!canUseHotWallet)\n            {\n                return NotFound();\n            }\n\n            var client = _ExplorerProvider.GetExplorerClient(network);\n            if (await GetSeed(client, derivation) != null)\n            {\n                var mnemonic = await client.GetMetadataAsync<string>(derivation.AccountDerivation,\n                    WellknownMetadataKeys.Mnemonic, cancellationToken);\n                var recoveryVm = new RecoverySeedBackupViewModel\n                {\n                    CryptoCode = cryptoCode,\n                    Mnemonic = mnemonic,\n                    IsStored = true,\n                    RequireConfirm = false,\n                    ReturnUrl = Url.Action(nameof(WalletSettings), new { storeId, cryptoCode })\n                };\n                return this.RedirectToRecoverySeedBackup(recoveryVm);\n            }\n\n            TempData.SetStatusMessageModel(new StatusMessageModel\n            {\n                Severity = StatusMessageModel.StatusSeverity.Error,\n                Message = \"The seed was not found\"\n            });\n\n            return RedirectToAction(nameof(WalletSettings));\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/replace\")]\n        public ActionResult ReplaceWallet(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n\n            return View(\"Confirm\", new ConfirmModel\n            {\n                Title = $\"Replace {network.CryptoCode} wallet\",\n                Description = WalletReplaceWarning(derivation.IsHotWallet),\n                Action = \"Setup new wallet\"\n            });\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/replace\")]\n        public IActionResult ConfirmReplaceWallet(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out _);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            return RedirectToAction(nameof(SetupWallet), new { storeId, cryptoCode });\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/delete\")]\n        public ActionResult DeleteWallet(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n\n            return View(\"Confirm\", new ConfirmModel\n            {\n                Title = $\"Remove {network.CryptoCode} wallet\",\n                Description = WalletRemoveWarning(derivation.IsHotWallet, network.CryptoCode),\n                Action = \"Remove\"\n            });\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/delete\")]\n        public async Task<IActionResult> ConfirmDeleteWallet(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            PaymentMethodId paymentMethodId = new PaymentMethodId(network.CryptoCode, PaymentTypes.BTCLike);\n            store.SetSupportedPaymentMethod(paymentMethodId, null);\n\n            await _Repo.UpdateStore(store);\n            _EventAggregator.Publish(new WalletChangedEvent { WalletId = new WalletId(storeId, cryptoCode) });\n\n            TempData[WellKnownTempData.SuccessMessage] =\n                $\"On-Chain payment for {network.CryptoCode} has been removed.\";\n\n            return RedirectToAction(nameof(GeneralSettings), new { storeId });\n        }\n\n        private IActionResult ConfirmAddresses(WalletSetupViewModel vm, DerivationSchemeSettings strategy)\n        {\n            vm.DerivationScheme = strategy.AccountDerivation.ToString();\n            var deposit = new KeyPathTemplates(null).GetKeyPathTemplate(DerivationFeature.Deposit);\n\n            if (!string.IsNullOrEmpty(vm.DerivationScheme))\n            {\n                var line = strategy.AccountDerivation.GetLineFor(deposit);\n\n                for (uint i = 0; i < 10; i++)\n                {\n                    var keyPath = deposit.GetKeyPath(i);\n                    var rootedKeyPath = vm.GetAccountKeypath()?.Derive(keyPath);\n                    var derivation = line.Derive(i);\n                    var address = strategy.Network.NBXplorerNetwork.CreateAddress(strategy.AccountDerivation,\n                        line.KeyPathTemplate.GetKeyPath(i),\n                        derivation.ScriptPubKey).ToString();\n                    vm.AddressSamples.Add((keyPath.ToString(), address, rootedKeyPath));\n                }\n            }\n\n            vm.Confirmation = true;\n            ModelState.Remove(nameof(vm.Config)); // Remove the cached value\n\n            return View(\"ImportWallet/ConfirmAddresses\", vm);\n        }\n\n        private ActionResult IsAvailable(string cryptoCode, out StoreData store, out BTCPayNetwork network)\n        {\n            store = HttpContext.GetStoreData();\n            network = cryptoCode == null ? null : _ExplorerProvider.GetNetwork(cryptoCode);\n\n            return store == null || network == null ? NotFound() : null;\n        }\n\n        private DerivationSchemeSettings GetExistingDerivationStrategy(string cryptoCode, StoreData store)\n        {\n            var id = new PaymentMethodId(cryptoCode, PaymentTypes.BTCLike);\n            var existing = store.GetSupportedPaymentMethods(_NetworkProvider)\n                .OfType<DerivationSchemeSettings>()\n                .FirstOrDefault(d => d.PaymentId == id);\n            return existing;\n        }\n\n        private async Task<string> GetSeed(ExplorerClient client, DerivationSchemeSettings derivation)\n        {\n            return derivation.IsHotWallet &&\n                   await client.GetMetadataAsync<string>(derivation.AccountDerivation, WellknownMetadataKeys.MasterHDKey) is string seed &&\n                   !string.IsNullOrEmpty(seed) ? seed : null;\n        }\n\n        private async Task<(bool HotWallet, bool RPCImport)> CanUseHotWallet()\n        {\n            return await _authorizationService.CanUseHotWallet(_policiesSettings, User);\n        }\n\n        private async Task<string> ReadAllText(IFormFile file)\n        {\n            using var stream = new StreamReader(file.OpenReadStream());\n            return await stream.ReadToEndAsync();\n        }\n\n        private string WalletWarning(bool isHotWallet, string info)\n        {\n            var walletType = isHotWallet ? \"hot\" : \"watch-only\";\n            var additionalText = isHotWallet\n                ? \"\"\n                : \" or imported it into an external wallet. If you no longer have access to your private key (recovery seed), immediately replace the wallet\";\n            return\n                $\"<p class=\\\"text-danger fw-bold\\\">Please note that this is a <strong>{walletType} wallet</strong>!</p>\" +\n                $\"<p class=\\\"text-danger fw-bold\\\">Do not proceed if you have not backed up the wallet{additionalText}.</p>\" +\n                $\"<p class=\\\"text-start mb-0\\\">This action will erase the current wallet data from the server. {info}</p>\";\n        }\n\n        private string WalletReplaceWarning(bool isHotWallet)\n        {\n            return WalletWarning(isHotWallet,\n                \"The current wallet will be replaced once you finish the setup of the new wallet. \" +\n                \"If you cancel the setup, the current wallet will stay active.\");\n        }\n\n        private string WalletRemoveWarning(bool isHotWallet, string cryptoCode)\n        {\n            return WalletWarning(isHotWallet,\n                $\"The store won't be able to receive {cryptoCode} onchain payments until a new wallet is set up.\");\n        }\n    }\n}\n", "#nullable enable\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Contracts;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Client;\nusing BTCPayServer.Configuration;\nusing BTCPayServer.Data;\nusing BTCPayServer.HostedServices;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.StoreViewModels;\nusing BTCPayServer.Payments;\nusing BTCPayServer.Payments.Lightning;\nusing BTCPayServer.Rating;\nusing BTCPayServer.Security.Bitpay;\nusing BTCPayServer.Services;\nusing BTCPayServer.Services.Apps;\nusing BTCPayServer.Services.Invoices;\nusing BTCPayServer.Services.Rates;\nusing BTCPayServer.Services.Stores;\nusing BTCPayServer.Services.Wallets;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.DataProtection;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.Extensions.Options;\nusing NBitcoin;\nusing NBitcoin.DataEncoders;\nusing StoreData = BTCPayServer.Data.StoreData;\n\nnamespace BTCPayServer.Controllers\n{\n    [Route(\"stores\")]\n    [Authorize(AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n    [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n    [AutoValidateAntiforgeryToken]\n    public partial class UIStoresController : Controller\n    {\n        public UIStoresController(\n            IServiceProvider serviceProvider,\n            BTCPayServerOptions btcpayServerOptions,\n            BTCPayServerEnvironment btcpayEnv,\n            StoreRepository repo,\n            TokenRepository tokenRepo,\n            UserManager<ApplicationUser> userManager,\n            BitpayAccessTokenController tokenController,\n            BTCPayWalletProvider walletProvider,\n            BTCPayNetworkProvider networkProvider,\n            RateFetcher rateFactory,\n            ExplorerClientProvider explorerProvider,\n            LanguageService langService,\n            PaymentMethodHandlerDictionary paymentMethodHandlerDictionary,\n            PoliciesSettings policiesSettings,\n            IAuthorizationService authorizationService,\n            EventAggregator eventAggregator,\n            AppService appService,\n            IFileService fileService,\n            WebhookSender webhookNotificationManager,\n            IDataProtectionProvider dataProtector,\n            IOptions<LightningNetworkOptions> lightningNetworkOptions,\n            IOptions<ExternalServicesOptions> externalServiceOptions)\n        {\n            _RateFactory = rateFactory;\n            _Repo = repo;\n            _TokenRepository = tokenRepo;\n            _UserManager = userManager;\n            _LangService = langService;\n            _TokenController = tokenController;\n            _WalletProvider = walletProvider;\n            _paymentMethodHandlerDictionary = paymentMethodHandlerDictionary;\n            _policiesSettings = policiesSettings;\n            _authorizationService = authorizationService;\n            _appService = appService;\n            _fileService = fileService;\n            DataProtector = dataProtector.CreateProtector(\"ConfigProtector\");\n            WebhookNotificationManager = webhookNotificationManager;\n            LightningNetworkOptions = lightningNetworkOptions.Value;\n            _EventAggregator = eventAggregator;\n            _NetworkProvider = networkProvider;\n            _ExplorerProvider = explorerProvider;\n            _ServiceProvider = serviceProvider;\n            _BtcpayServerOptions = btcpayServerOptions;\n            _BTCPayEnv = btcpayEnv;\n            _externalServiceOptions = externalServiceOptions;\n        }\n\n        readonly BTCPayServerOptions _BtcpayServerOptions;\n        readonly BTCPayServerEnvironment _BTCPayEnv;\n        readonly IServiceProvider _ServiceProvider;\n        readonly BTCPayNetworkProvider _NetworkProvider;\n        readonly BTCPayWalletProvider _WalletProvider;\n        readonly BitpayAccessTokenController _TokenController;\n        readonly StoreRepository _Repo;\n        readonly TokenRepository _TokenRepository;\n        readonly UserManager<ApplicationUser> _UserManager;\n        readonly RateFetcher _RateFactory;\n        private readonly ExplorerClientProvider _ExplorerProvider;\n        private readonly LanguageService _LangService;\n        private readonly PaymentMethodHandlerDictionary _paymentMethodHandlerDictionary;\n        private readonly PoliciesSettings _policiesSettings;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly AppService _appService;\n        private readonly IFileService _fileService;\n        private readonly EventAggregator _EventAggregator;\n        private readonly IOptions<ExternalServicesOptions> _externalServiceOptions;\n\n        public string? GeneratedPairingCode { get; set; }\n        public WebhookSender WebhookNotificationManager { get; }\n        public LightningNetworkOptions LightningNetworkOptions { get; }\n        public IDataProtector DataProtector { get; }\n\n        [TempData]\n        public bool StoreNotConfigured\n        {\n            get; set;\n        }\n\n        [HttpGet]\n        [Route(\"{storeId}/users\")]\n        public async Task<IActionResult> StoreUsers()\n        {\n            StoreUsersViewModel vm = new StoreUsersViewModel();\n            await FillUsers(vm);\n            return View(vm);\n        }\n\n        private async Task FillUsers(StoreUsersViewModel vm)\n        {\n            var users = await _Repo.GetStoreUsers(CurrentStore.Id);\n            vm.StoreId = CurrentStore.Id;\n            vm.Users = users.Select(u => new StoreUsersViewModel.StoreUserViewModel()\n            {\n                Email = u.Email,\n                Id = u.Id,\n                Role = u.Role\n            }).ToList();\n        }\n\n        public StoreData CurrentStore => HttpContext.GetStoreData();\n\n        [HttpPost]\n        [Route(\"{storeId}/users\")]\n        public async Task<IActionResult> StoreUsers(StoreUsersViewModel vm)\n        {\n            await FillUsers(vm);\n            if (!ModelState.IsValid)\n            {\n                return View(vm);\n            }\n            var user = await _UserManager.FindByEmailAsync(vm.Email);\n            if (user == null)\n            {\n                ModelState.AddModelError(nameof(vm.Email), \"User not found\");\n                return View(vm);\n            }\n            if (!StoreRoles.AllRoles.Contains(vm.Role))\n            {\n                ModelState.AddModelError(nameof(vm.Role), \"Invalid role\");\n                return View(vm);\n            }\n            if (!await _Repo.AddStoreUser(CurrentStore.Id, user.Id, vm.Role))\n            {\n                ModelState.AddModelError(nameof(vm.Email), \"The user already has access to this store\");\n                return View(vm);\n            }\n            TempData[WellKnownTempData.SuccessMessage] = \"User added successfully.\";\n            return RedirectToAction(nameof(StoreUsers));\n        }\n\n        [HttpGet(\"{storeId}/users/{userId}/delete\")]\n        public async Task<IActionResult> DeleteStoreUser(string userId)\n        {\n            var user = await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n            return View(\"Confirm\", new ConfirmModel(\"Remove store user\", $\"This action will prevent <strong>{user.Email}</strong> from accessing this store and its settings. Are you sure?\", \"Remove\"));\n        }\n\n        [HttpPost(\"{storeId}/users/{userId}/delete\")]\n        public async Task<IActionResult> DeleteStoreUserPost(string storeId, string userId)\n        {\n            if (await _Repo.RemoveStoreUser(storeId, userId))\n                TempData[WellKnownTempData.SuccessMessage] = \"User removed successfully.\";\n            else\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"Removing this user would result in the store having no owner.\";\n            }\n            return RedirectToAction(nameof(StoreUsers), new { storeId, userId });\n        }\n\n        [HttpGet(\"{storeId}/rates\")]\n        public IActionResult Rates()\n        {\n            var exchanges = GetSupportedExchanges();\n            var storeBlob = CurrentStore.GetStoreBlob();\n            var vm = new RatesViewModel();\n            vm.SetExchangeRates(exchanges, storeBlob.PreferredExchange ?? storeBlob.GetRecommendedExchange());\n            vm.Spread = (double)(storeBlob.Spread * 100m);\n            vm.StoreId = CurrentStore.Id;\n            vm.Script = storeBlob.GetRateRules(_NetworkProvider).ToString();\n            vm.DefaultScript = storeBlob.GetDefaultRateRules(_NetworkProvider).ToString();\n            vm.AvailableExchanges = exchanges;\n            vm.DefaultCurrencyPairs = storeBlob.GetDefaultCurrencyPairString();\n            vm.ShowScripting = storeBlob.RateScripting;\n            return View(vm);\n        }\n\n        [HttpPost(\"{storeId}/rates\")]\n        public async Task<IActionResult> Rates(RatesViewModel model, string? command = null, string? storeId = null, CancellationToken cancellationToken = default)\n        {\n            if (command == \"scripting-on\")\n            {\n                return RedirectToAction(nameof(ShowRateRules), new { scripting = true, storeId = model.StoreId });\n            }\n            else if (command == \"scripting-off\")\n            {\n                return RedirectToAction(nameof(ShowRateRules), new { scripting = false, storeId = model.StoreId });\n            }\n\n            var exchanges = GetSupportedExchanges();\n            model.SetExchangeRates(exchanges, model.PreferredExchange ?? this.HttpContext.GetStoreData().GetStoreBlob().GetRecommendedExchange());\n            model.StoreId = storeId ?? model.StoreId;\n            CurrencyPair[]? currencyPairs = null;\n            try\n            {\n                currencyPairs = model.DefaultCurrencyPairs?\n                     .Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)\n                     .Select(p => CurrencyPair.Parse(p))\n                     .ToArray();\n            }\n            catch\n            {\n                ModelState.AddModelError(nameof(model.DefaultCurrencyPairs), \"Invalid currency pairs (should be for example: BTC_USD,BTC_CAD,BTC_JPY)\");\n            }\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n            if (model.PreferredExchange != null)\n                model.PreferredExchange = model.PreferredExchange.Trim().ToLowerInvariant();\n\n            var blob = CurrentStore.GetStoreBlob();\n            model.DefaultScript = blob.GetDefaultRateRules(_NetworkProvider).ToString();\n            model.AvailableExchanges = exchanges;\n\n            blob.PreferredExchange = model.PreferredExchange;\n            blob.Spread = (decimal)model.Spread / 100.0m;\n            blob.DefaultCurrencyPairs = currencyPairs;\n            if (!model.ShowScripting)\n            {\n                if (!exchanges.Any(provider => provider.Id.Equals(model.PreferredExchange, StringComparison.InvariantCultureIgnoreCase)))\n                {\n                    ModelState.AddModelError(nameof(model.PreferredExchange), $\"Unsupported exchange ({model.RateSource})\");\n                    return View(model);\n                }\n            }\n            RateRules? rules = null;\n            if (model.ShowScripting)\n            {\n                if (!RateRules.TryParse(model.Script, out rules, out var errors))\n                {\n                    errors = errors ?? new List<RateRulesErrors>();\n                    var errorString = String.Join(\", \", errors.ToArray());\n                    ModelState.AddModelError(nameof(model.Script), $\"Parsing error ({errorString})\");\n                    return View(model);\n                }\n                else\n                {\n                    blob.RateScript = rules.ToString();\n                    ModelState.Remove(nameof(model.Script));\n                    model.Script = blob.RateScript;\n                }\n            }\n            rules = blob.GetRateRules(_NetworkProvider);\n\n            if (command == \"Test\")\n            {\n                if (string.IsNullOrWhiteSpace(model.ScriptTest))\n                {\n                    ModelState.AddModelError(nameof(model.ScriptTest), \"Fill out currency pair to test for (like BTC_USD,BTC_CAD)\");\n                    return View(model);\n                }\n                var splitted = model.ScriptTest.Split(',', StringSplitOptions.RemoveEmptyEntries);\n\n                var pairs = new List<CurrencyPair>();\n                foreach (var pair in splitted)\n                {\n                    if (!CurrencyPair.TryParse(pair, out var currencyPair))\n                    {\n                        ModelState.AddModelError(nameof(model.ScriptTest), $\"Invalid currency pair '{pair}' (it should be formatted like BTC_USD,BTC_CAD)\");\n                        return View(model);\n                    }\n                    pairs.Add(currencyPair);\n                }\n\n                var fetchs = _RateFactory.FetchRates(pairs.ToHashSet(), rules, cancellationToken);\n                var testResults = new List<RatesViewModel.TestResultViewModel>();\n                foreach (var fetch in fetchs)\n                {\n                    var testResult = await (fetch.Value);\n                    testResults.Add(new RatesViewModel.TestResultViewModel()\n                    {\n                        CurrencyPair = fetch.Key.ToString(),\n                        Error = testResult.Errors.Count != 0,\n                        Rule = testResult.Errors.Count == 0 ? testResult.Rule + \" = \" + testResult.BidAsk.Bid.ToString(CultureInfo.InvariantCulture)\n                                                            : testResult.EvaluatedRule\n                    });\n                }\n                model.TestRateRules = testResults;\n                return View(model);\n            }\n            else // command == Save\n            {\n                if (CurrentStore.SetStoreBlob(blob))\n                {\n                    await _Repo.UpdateStore(CurrentStore);\n                    TempData[WellKnownTempData.SuccessMessage] = \"Rate settings updated\";\n                }\n                return RedirectToAction(nameof(Rates), new\n                {\n                    storeId = CurrentStore.Id\n                });\n            }\n        }\n\n        [HttpGet(\"{storeId}/rates/confirm\")]\n        public IActionResult ShowRateRules(bool scripting)\n        {\n            return View(\"Confirm\", new ConfirmModel\n            {\n                Action = \"Continue\",\n                Title = \"Rate rule scripting\",\n                Description = scripting ?\n                                \"This action will modify your current rate sources. Are you sure to turn on rate rules scripting? (Advanced users)\"\n                                : \"This action will delete your rate script. Are you sure to turn off rate rules scripting?\",\n                ButtonClass = scripting ? \"btn-primary\" : \"btn-danger\"\n            });\n        }\n\n        [HttpPost(\"{storeId}/rates/confirm\")]\n        public async Task<IActionResult> ShowRateRulesPost(bool scripting)\n        {\n            var blob = CurrentStore.GetStoreBlob();\n            blob.RateScripting = scripting;\n            blob.RateScript = blob.GetDefaultRateRules(_NetworkProvider).ToString();\n            CurrentStore.SetStoreBlob(blob);\n            await _Repo.UpdateStore(CurrentStore);\n            TempData[WellKnownTempData.SuccessMessage] = \"Rate rules scripting \" + (scripting ? \"activated\" : \"deactivated\");\n            return RedirectToAction(nameof(Rates), new { storeId = CurrentStore.Id });\n        }\n\n        [HttpGet(\"{storeId}/checkout\")]\n        public IActionResult CheckoutAppearance()\n        {\n            var storeBlob = CurrentStore.GetStoreBlob();\n            var vm = new CheckoutAppearanceViewModel();\n            SetCryptoCurrencies(vm, CurrentStore);\n            vm.PaymentMethodCriteria = CurrentStore.GetSupportedPaymentMethods(_NetworkProvider)\n                                    .Where(s => !storeBlob.GetExcludedPaymentMethods().Match(s.PaymentId))\n                                    .Where(s => _NetworkProvider.GetNetwork(s.PaymentId.CryptoCode) != null)\n                                    .Where(s => s.PaymentId.PaymentType != PaymentTypes.LNURLPay)\n                                    .Select(method =>\n            {\n                var existing = storeBlob.PaymentMethodCriteria.SingleOrDefault(criteria =>\n                        criteria.PaymentMethod == method.PaymentId);\n                return existing is null\n                    ? new PaymentMethodCriteriaViewModel { PaymentMethod = method.PaymentId.ToString(), Value = \"\" }\n                    : new PaymentMethodCriteriaViewModel\n                    {\n                        PaymentMethod = existing.PaymentMethod.ToString(),\n                        Type = existing.Above\n                            ? PaymentMethodCriteriaViewModel.CriteriaType.GreaterThan\n                            : PaymentMethodCriteriaViewModel.CriteriaType.LessThan,\n                        Value = existing.Value?.ToString() ?? \"\"\n                    };\n            }).ToList();\n\n            vm.UseNewCheckout = storeBlob.CheckoutType == Client.Models.CheckoutType.V2;\n            vm.OnChainWithLnInvoiceFallback = storeBlob.OnChainWithLnInvoiceFallback;\n            vm.RequiresRefundEmail = storeBlob.RequiresRefundEmail;\n            vm.LazyPaymentMethods = storeBlob.LazyPaymentMethods;\n            vm.RedirectAutomatically = storeBlob.RedirectAutomatically;\n            vm.CustomCSS = storeBlob.CustomCSS;\n            vm.CustomLogo = storeBlob.CustomLogo;\n            vm.HtmlTitle = storeBlob.HtmlTitle;\n            vm.DisplayExpirationTimer = (int)storeBlob.DisplayExpirationTimer.TotalMinutes;\n            vm.ReceiptOptions = CheckoutAppearanceViewModel.ReceiptOptionsViewModel.Create(storeBlob.ReceiptOptions);\n            vm.AutoDetectLanguage = storeBlob.AutoDetectLanguage;\n            vm.SetLanguages(_LangService, storeBlob.DefaultLang);\n\n            return View(vm);\n        }\n\n        void SetCryptoCurrencies(CheckoutAppearanceViewModel vm, Data.StoreData storeData)\n        {\n            var choices = GetEnabledPaymentMethodChoices(storeData);\n            var chosen = GetDefaultPaymentMethodChoice(storeData);\n\n            vm.PaymentMethods = new SelectList(choices, nameof(chosen.Value), nameof(chosen.Name), chosen?.Value);\n            vm.DefaultPaymentMethod = chosen?.Value;\n        }\n\n        public PaymentMethodOptionViewModel.Format[] GetEnabledPaymentMethodChoices(StoreData storeData)\n        {\n            var enabled = storeData.GetEnabledPaymentIds(_NetworkProvider);\n\n            return enabled\n                .Select(o =>\n                    new PaymentMethodOptionViewModel.Format()\n                    {\n                        Name = o.ToPrettyString(),\n                        Value = o.ToString(),\n                        PaymentId = o\n                    }).ToArray();\n        }\n\n        PaymentMethodOptionViewModel.Format? GetDefaultPaymentMethodChoice(StoreData storeData)\n        {\n            var enabled = storeData.GetEnabledPaymentIds(_NetworkProvider);\n            var defaultPaymentId = storeData.GetDefaultPaymentId();\n            var defaultChoice = defaultPaymentId is not null ? defaultPaymentId.FindNearest(enabled) : null;\n            if (defaultChoice is null)\n            {\n                defaultChoice = enabled.FirstOrDefault(e => e.CryptoCode == _NetworkProvider.DefaultNetwork.CryptoCode && e.PaymentType == PaymentTypes.BTCLike) ??\n                                enabled.FirstOrDefault(e => e.CryptoCode == _NetworkProvider.DefaultNetwork.CryptoCode && e.PaymentType == PaymentTypes.LightningLike) ??\n                                enabled.FirstOrDefault();\n            }\n            var choices = GetEnabledPaymentMethodChoices(storeData);\n\n            return defaultChoice is null ? null : choices.FirstOrDefault(c => defaultChoice.ToString().Equals(c.Value, StringComparison.OrdinalIgnoreCase));\n        }\n\n        [HttpPost(\"{storeId}/checkout\")]\n        public async Task<IActionResult> CheckoutAppearance(CheckoutAppearanceViewModel model)\n        {\n            bool needUpdate = false;\n            var blob = CurrentStore.GetStoreBlob();\n            var defaultPaymentMethodId = model.DefaultPaymentMethod == null ? null : PaymentMethodId.Parse(model.DefaultPaymentMethod);\n            if (CurrentStore.GetDefaultPaymentId() != defaultPaymentMethodId)\n            {\n                needUpdate = true;\n                CurrentStore.SetDefaultPaymentId(defaultPaymentMethodId);\n            }\n            SetCryptoCurrencies(model, CurrentStore);\n            model.SetLanguages(_LangService, model.DefaultLang);\n            model.PaymentMethodCriteria ??= new List<PaymentMethodCriteriaViewModel>();\n            for (var index = 0; index < model.PaymentMethodCriteria.Count; index++)\n            {\n                var methodCriterion = model.PaymentMethodCriteria[index];\n                if (!string.IsNullOrWhiteSpace(methodCriterion.Value))\n                {\n                    if (!CurrencyValue.TryParse(methodCriterion.Value, out var value))\n                    {\n                        model.AddModelError(viewModel => viewModel.PaymentMethodCriteria[index].Value,\n                            $\"{methodCriterion.PaymentMethod}: Invalid format. Make sure to enter a valid amount and currency code. Examples: '5 USD', '0.001 BTC'\", this);\n                    }\n                }\n            }\n\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            // Payment criteria for Off-Chain should also affect LNUrl\n            foreach (var newCriteria in model.PaymentMethodCriteria.ToList())\n            {\n                var paymentMethodId = PaymentMethodId.Parse(newCriteria.PaymentMethod);\n                if (paymentMethodId.PaymentType == PaymentTypes.LightningLike)\n                    model.PaymentMethodCriteria.Add(new PaymentMethodCriteriaViewModel()\n                    {\n                        PaymentMethod = new PaymentMethodId(paymentMethodId.CryptoCode, PaymentTypes.LNURLPay).ToString(),\n                        Type = newCriteria.Type,\n                        Value = newCriteria.Value\n                    });\n                // Should not be able to set LNUrlPay criteria directly in UI\n                if (paymentMethodId.PaymentType == PaymentTypes.LNURLPay)\n                    model.PaymentMethodCriteria.Remove(newCriteria);\n            }\n            blob.PaymentMethodCriteria ??= new List<PaymentMethodCriteria>();\n            foreach (var newCriteria in model.PaymentMethodCriteria)\n            {\n                var paymentMethodId = PaymentMethodId.Parse(newCriteria.PaymentMethod);\n                var existingCriteria = blob.PaymentMethodCriteria.FirstOrDefault(c => c.PaymentMethod == paymentMethodId);\n                if (existingCriteria != null)\n                    blob.PaymentMethodCriteria.Remove(existingCriteria);\n                CurrencyValue.TryParse(newCriteria.Value, out var cv);\n                blob.PaymentMethodCriteria.Add(new PaymentMethodCriteria()\n                {\n                    Above = newCriteria.Type == PaymentMethodCriteriaViewModel.CriteriaType.GreaterThan,\n                    Value = cv,\n                    PaymentMethod = paymentMethodId\n                });\n            }\n\n            blob.CheckoutType = model.UseNewCheckout ? Client.Models.CheckoutType.V2 : Client.Models.CheckoutType.V1;\n            if (blob.CheckoutType == Client.Models.CheckoutType.V2)\n            {\n                blob.OnChainWithLnInvoiceFallback = model.OnChainWithLnInvoiceFallback;\n            }\n\n            blob.RequiresRefundEmail = model.RequiresRefundEmail;\n            blob.LazyPaymentMethods = model.LazyPaymentMethods;\n            blob.RedirectAutomatically = model.RedirectAutomatically;\n            blob.ReceiptOptions = model.ReceiptOptions.ToDTO();\n            blob.CustomLogo = model.CustomLogo;\n            blob.CustomCSS = model.CustomCSS;\n            blob.HtmlTitle = string.IsNullOrWhiteSpace(model.HtmlTitle) ? null : model.HtmlTitle;\n            blob.DisplayExpirationTimer = TimeSpan.FromMinutes(model.DisplayExpirationTimer);\n            blob.AutoDetectLanguage = model.AutoDetectLanguage;\n            blob.DefaultLang = model.DefaultLang;\n            blob.NormalizeToRelativeLinks(Request);\n            if (CurrentStore.SetStoreBlob(blob))\n            {\n                needUpdate = true;\n            }\n            if (needUpdate)\n            {\n                await _Repo.UpdateStore(CurrentStore);\n                TempData[WellKnownTempData.SuccessMessage] = \"Store successfully updated\";\n            }\n\n            return RedirectToAction(nameof(CheckoutAppearance), new\n            {\n                storeId = CurrentStore.Id\n            });\n        }\n\n        internal void AddPaymentMethods(StoreData store, StoreBlob storeBlob,\n            out List<StoreDerivationScheme> derivationSchemes, out List<StoreLightningNode> lightningNodes)\n        {\n            var excludeFilters = storeBlob.GetExcludedPaymentMethods();\n            var derivationByCryptoCode =\n                store\n                .GetSupportedPaymentMethods(_NetworkProvider)\n                .OfType<DerivationSchemeSettings>()\n                .ToDictionary(c => c.Network.CryptoCode.ToUpperInvariant());\n\n            var lightningByCryptoCode = store\n                .GetSupportedPaymentMethods(_NetworkProvider)\n                .OfType<LightningSupportedPaymentMethod>()\n                .Where(method => method.PaymentId.PaymentType == LightningPaymentType.Instance)\n                .ToDictionary(c => c.CryptoCode.ToUpperInvariant());\n\n            derivationSchemes = new List<StoreDerivationScheme>();\n            lightningNodes = new List<StoreLightningNode>();\n\n            foreach (var paymentMethodId in _paymentMethodHandlerDictionary.Distinct().SelectMany(handler => handler.GetSupportedPaymentMethods()))\n            {\n                switch (paymentMethodId.PaymentType)\n                {\n                    case BitcoinPaymentType _:\n                        var strategy = derivationByCryptoCode.TryGet(paymentMethodId.CryptoCode);\n                        var network = _NetworkProvider.GetNetwork<BTCPayNetwork>(paymentMethodId.CryptoCode);\n                        var value = strategy?.ToPrettyString() ?? string.Empty;\n\n                        derivationSchemes.Add(new StoreDerivationScheme\n                        {\n                            Crypto = paymentMethodId.CryptoCode,\n                            WalletSupported = network.WalletSupported,\n                            Value = value,\n                            WalletId = new WalletId(store.Id, paymentMethodId.CryptoCode),\n                            Enabled = !excludeFilters.Match(paymentMethodId) && strategy != null,\n#if ALTCOINS\n                            Collapsed = network is ElementsBTCPayNetwork elementsBTCPayNetwork && elementsBTCPayNetwork.NetworkCryptoCode != elementsBTCPayNetwork.CryptoCode && string.IsNullOrEmpty(value)\n#endif\n                        });\n                        break;\n\n                    case LNURLPayPaymentType lnurlPayPaymentType:\n                        break;\n\n                    case LightningPaymentType _:\n                        var lightning = lightningByCryptoCode.TryGet(paymentMethodId.CryptoCode);\n                        var isEnabled = !excludeFilters.Match(paymentMethodId) && lightning != null;\n                        lightningNodes.Add(new StoreLightningNode\n                        {\n                            CryptoCode = paymentMethodId.CryptoCode,\n                            Address = lightning?.GetDisplayableConnectionString(),\n                            Enabled = isEnabled\n                        });\n                        break;\n                }\n            }\n        }\n\n        [HttpGet(\"{storeId}/settings\")]\n        public IActionResult GeneralSettings()\n        {\n            var store = HttpContext.GetStoreData();\n            if (store == null)\n                return NotFound();\n\n            var storeBlob = store.GetStoreBlob();\n            var vm = new GeneralSettingsViewModel\n            {\n                Id = store.Id,\n                StoreName = store.StoreName,\n                StoreWebsite = store.StoreWebsite,\n                LogoFileId = storeBlob.LogoFileId,\n                BrandColor = storeBlob.BrandColor,\n                NetworkFeeMode = storeBlob.NetworkFeeMode,\n                AnyoneCanCreateInvoice = storeBlob.AnyoneCanInvoice,\n                PaymentTolerance = storeBlob.PaymentTolerance,\n                InvoiceExpiration = (int)storeBlob.InvoiceExpiration.TotalMinutes,\n                DefaultCurrency = storeBlob.DefaultCurrency,\n                BOLT11Expiration = (long)storeBlob.RefundBOLT11Expiration.TotalDays,\n                CanDelete = _Repo.CanDeleteStores()\n            };\n\n            return View(vm);\n        }\n\n        [HttpPost(\"{storeId}/settings\")]\n        public async Task<IActionResult> GeneralSettings(GeneralSettingsViewModel model, [FromForm] bool RemoveLogoFile = false)\n        {\n            bool needUpdate = false;\n            if (CurrentStore.StoreName != model.StoreName)\n            {\n                needUpdate = true;\n                CurrentStore.StoreName = model.StoreName;\n            }\n\n            if (CurrentStore.StoreWebsite != model.StoreWebsite)\n            {\n                needUpdate = true;\n                CurrentStore.StoreWebsite = model.StoreWebsite;\n            }\n\n            var blob = CurrentStore.GetStoreBlob();\n            blob.AnyoneCanInvoice = model.AnyoneCanCreateInvoice;\n            blob.NetworkFeeMode = model.NetworkFeeMode;\n            blob.PaymentTolerance = model.PaymentTolerance;\n            blob.DefaultCurrency = model.DefaultCurrency;\n            blob.InvoiceExpiration = TimeSpan.FromMinutes(model.InvoiceExpiration);\n            blob.RefundBOLT11Expiration = TimeSpan.FromDays(model.BOLT11Expiration);\n            if (!string.IsNullOrEmpty(model.BrandColor) && !ColorPalette.IsValid(model.BrandColor))\n            {\n                ModelState.AddModelError(nameof(model.BrandColor), \"Invalid color\");\n                return View(model);\n            }\n            blob.BrandColor = model.BrandColor;\n\n            var userId = GetUserId();\n            if (userId is null)\n                return NotFound();\n\n            if (model.LogoFile != null)\n            {\n                if (model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))\n                {\n                    // delete existing image\n                    if (!string.IsNullOrEmpty(blob.LogoFileId))\n                    {\n                        await _fileService.RemoveFile(blob.LogoFileId, userId);\n                    }\n\n                    // add new image\n                    try\n                    {\n                        var storedFile = await _fileService.AddFile(model.LogoFile, userId);\n                        blob.LogoFileId = storedFile.Id;\n                    }\n                    catch (Exception e)\n                    {\n                        TempData[WellKnownTempData.ErrorMessage] = $\"Could not save logo: {e.Message}\";\n                    }\n                }\n                else\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";\n                }\n            }\n            else if (RemoveLogoFile && !string.IsNullOrEmpty(blob.LogoFileId))\n            {\n                await _fileService.RemoveFile(blob.LogoFileId, userId);\n                blob.LogoFileId = null;\n                needUpdate = true;\n            }\n\n            if (CurrentStore.SetStoreBlob(blob))\n            {\n                needUpdate = true;\n            }\n\n            if (needUpdate)\n            {\n                await _Repo.UpdateStore(CurrentStore);\n\n                TempData[WellKnownTempData.SuccessMessage] = \"Store successfully updated\";\n            }\n\n            return RedirectToAction(nameof(GeneralSettings), new\n            {\n                storeId = CurrentStore.Id\n            });\n        }\n\n        [HttpGet(\"{storeId}/delete\")]\n        public IActionResult DeleteStore(string storeId)\n        {\n            return View(\"Confirm\", new ConfirmModel(\"Delete store\", \"The store will be permanently deleted. This action will also delete all invoices, apps and data associated with the store. Are you sure?\", \"Delete\"));\n        }\n\n        [HttpPost(\"{storeId}/delete\")]\n        public async Task<IActionResult> DeleteStorePost(string storeId)\n        {\n            await _Repo.DeleteStore(CurrentStore.Id);\n            TempData[WellKnownTempData.SuccessMessage] = \"Store successfully deleted.\";\n            return RedirectToAction(nameof(UIHomeController.Index), \"UIHome\");\n        }\n\n        private IEnumerable<AvailableRateProvider> GetSupportedExchanges()\n        {\n            var exchanges = _RateFactory.RateProviderFactory.GetSupportedExchanges();\n            return exchanges\n                .Where(r => !string.IsNullOrWhiteSpace(r.Name))\n                .OrderBy(s => s.Id, StringComparer.OrdinalIgnoreCase);\n\n        }\n\n        private DerivationSchemeSettings ParseDerivationStrategy(string derivationScheme, BTCPayNetwork network)\n        {\n            var parser = new DerivationSchemeParser(network);\n            var isOD = Regex.Match(derivationScheme, @\"\\(.*?\\)\");\n            if (isOD.Success)\n            {\n                var derivationSchemeSettings = new DerivationSchemeSettings { Network = network };\n                var result = parser.ParseOutputDescriptor(derivationScheme);\n                derivationSchemeSettings.AccountOriginal = derivationScheme.Trim();\n                derivationSchemeSettings.AccountDerivation = result.Item1;\n                derivationSchemeSettings.AccountKeySettings = result.Item2?.Select((path, i) => new AccountKeySettings()\n                {\n                    RootFingerprint = path?.MasterFingerprint,\n                    AccountKeyPath = path?.KeyPath,\n                    AccountKey = result.Item1.GetExtPubKeys().ElementAt(i).GetWif(parser.Network)\n                }).ToArray() ?? new AccountKeySettings[result.Item1.GetExtPubKeys().Count()];\n                return derivationSchemeSettings;\n            }\n\n            var strategy = parser.Parse(derivationScheme);\n            return new DerivationSchemeSettings(strategy, network);\n        }\n\n        [HttpGet(\"{storeId}/tokens\")]\n        public async Task<IActionResult> ListTokens()\n        {\n            var model = new TokensViewModel();\n            var tokens = await _TokenRepository.GetTokensByStoreIdAsync(CurrentStore.Id);\n            model.StoreNotConfigured = StoreNotConfigured;\n            model.Tokens = tokens.Select(t => new TokenViewModel()\n            {\n                Label = t.Label,\n                SIN = t.SIN,\n                Id = t.Value\n            }).ToArray();\n\n            model.ApiKey = (await _TokenRepository.GetLegacyAPIKeys(CurrentStore.Id)).FirstOrDefault();\n            if (model.ApiKey == null)\n                model.EncodedApiKey = \"*API Key*\";\n            else\n                model.EncodedApiKey = Encoders.Base64.EncodeData(Encoders.ASCII.DecodeData(model.ApiKey));\n            return View(model);\n        }\n\n        [HttpGet(\"{storeId}/tokens/{tokenId}/revoke\")]\n        public async Task<IActionResult> RevokeToken(string tokenId)\n        {\n            var token = await _TokenRepository.GetToken(tokenId);\n            if (token == null || token.StoreId != CurrentStore.Id)\n                return NotFound();\n            return View(\"Confirm\", new ConfirmModel(\"Revoke the token\", $\"The access token with the label <strong>{token.Label}</strong> will be revoked. Do you wish to continue?\", \"Revoke\"));\n        }\n\n        [HttpPost(\"{storeId}/tokens/{tokenId}/revoke\")]\n        public async Task<IActionResult> RevokeTokenConfirm(string tokenId)\n        {\n            var token = await _TokenRepository.GetToken(tokenId);\n            if (token == null ||\n                token.StoreId != CurrentStore.Id ||\n               !await _TokenRepository.DeleteToken(tokenId))\n                TempData[WellKnownTempData.ErrorMessage] = \"Failure to revoke this token.\";\n            else\n                TempData[WellKnownTempData.SuccessMessage] = \"Token revoked\";\n            return RedirectToAction(nameof(ListTokens), new { storeId = token?.StoreId });\n        }\n\n        [HttpGet(\"{storeId}/tokens/{tokenId}\")]\n        public async Task<IActionResult> ShowToken(string tokenId)\n        {\n            var token = await _TokenRepository.GetToken(tokenId);\n            if (token == null || token.StoreId != CurrentStore.Id)\n                return NotFound();\n            return View(token);\n        }\n\n        [HttpGet(\"{storeId}/tokens/create\")]\n        public IActionResult CreateToken(string storeId)\n        {\n            var model = new CreateTokenViewModel();\n            ViewBag.HidePublicKey = storeId == null;\n            ViewBag.ShowStores = storeId == null;\n            ViewBag.ShowMenu = storeId != null;\n            model.StoreId = storeId;\n            return View(model);\n        }\n\n        [HttpPost(\"{storeId}/tokens/create\")]\n        public async Task<IActionResult> CreateToken(string storeId, CreateTokenViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(nameof(CreateToken), model);\n            }\n            model.Label = model.Label ?? String.Empty;\n            var userId = GetUserId();\n            if (userId == null)\n                return Challenge(AuthenticationSchemes.Cookie);\n            storeId = model.StoreId;\n            var store = CurrentStore ?? await _Repo.FindStore(storeId, userId);\n            if (store == null)\n                return Challenge(AuthenticationSchemes.Cookie);\n            var tokenRequest = new TokenRequest()\n            {\n                Label = model.Label,\n                Id = model.PublicKey == null ? null : NBitpayClient.Extensions.BitIdExtensions.GetBitIDSIN(new PubKey(model.PublicKey).Compress())\n            };\n\n            string? pairingCode = null;\n            if (model.PublicKey == null)\n            {\n                tokenRequest.PairingCode = await _TokenRepository.CreatePairingCodeAsync();\n                await _TokenRepository.UpdatePairingCode(new PairingCodeEntity()\n                {\n                    Id = tokenRequest.PairingCode,\n                    Label = model.Label,\n                });\n                await _TokenRepository.PairWithStoreAsync(tokenRequest.PairingCode, storeId);\n                pairingCode = tokenRequest.PairingCode;\n            }\n            else\n            {\n                pairingCode = (await _TokenController.Tokens(tokenRequest)).Data[0].PairingCode;\n            }\n\n            GeneratedPairingCode = pairingCode;\n            return RedirectToAction(nameof(RequestPairing), new\n            {\n                pairingCode,\n                selectedStore = storeId\n            });\n        }\n\n        [HttpGet(\"/api-tokens\")]\n        [AllowAnonymous]\n        public async Task<IActionResult> CreateToken()\n        {\n            var userId = GetUserId();\n            if (string.IsNullOrWhiteSpace(userId))\n                return Challenge(AuthenticationSchemes.Cookie);\n            var model = new CreateTokenViewModel();\n            ViewBag.HidePublicKey = true;\n            ViewBag.ShowStores = true;\n            ViewBag.ShowMenu = false;\n            var stores = await _Repo.GetStoresByUserId(userId);\n            model.Stores = new SelectList(stores.Where(s => s.Role == StoreRoles.Owner), nameof(CurrentStore.Id), nameof(CurrentStore.StoreName));\n            if (!model.Stores.Any())\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"You need to be owner of at least one store before pairing\";\n                return RedirectToAction(nameof(UIHomeController.Index), \"UIHome\");\n            }\n            return View(model);\n        }\n\n        [HttpPost(\"/api-tokens\")]\n        [AllowAnonymous]\n        public Task<IActionResult> CreateToken2(CreateTokenViewModel model)\n        {\n            return CreateToken(model.StoreId, model);\n        }\n\n        [HttpPost(\"{storeId}/tokens/apikey\")]\n        public async Task<IActionResult> GenerateAPIKey(string storeId, string command = \"\")\n        {\n            var store = HttpContext.GetStoreData();\n            if (store == null)\n                return NotFound();\n            if (command == \"revoke\")\n            {\n                await _TokenRepository.RevokeLegacyAPIKeys(CurrentStore.Id);\n                TempData[WellKnownTempData.SuccessMessage] = \"API Key revoked\";\n            }\n            else\n            {\n                await _TokenRepository.GenerateLegacyAPIKey(CurrentStore.Id);\n                TempData[WellKnownTempData.SuccessMessage] = \"API Key re-generated\";\n            }\n\n            return RedirectToAction(nameof(ListTokens), new\n            {\n                storeId\n            });\n        }\n\n        [HttpGet(\"/api-access-request\")]\n        [AllowAnonymous]\n        public async Task<IActionResult> RequestPairing(string pairingCode, string? selectedStore = null)\n        {\n            var userId = GetUserId();\n            if (userId == null)\n                return Challenge(AuthenticationSchemes.Cookie);\n\n            if (pairingCode == null)\n                return NotFound();\n\n            if (selectedStore != null)\n            {\n                var store = await _Repo.FindStore(selectedStore, userId);\n                if (store == null)\n                    return NotFound();\n                HttpContext.SetStoreData(store);\n            }\n\n            var pairing = await _TokenRepository.GetPairingAsync(pairingCode);\n            if (pairing == null)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"Unknown pairing code\";\n                return RedirectToAction(nameof(UIHomeController.Index), \"UIHome\");\n            }\n\n            var stores = await _Repo.GetStoresByUserId(userId);\n            return View(new PairingModel\n            {\n                Id = pairing.Id,\n                Label = pairing.Label,\n                SIN = pairing.SIN ?? \"Server-Initiated Pairing\",\n                StoreId = selectedStore ?? stores.FirstOrDefault()?.Id,\n                Stores = stores.Where(u => u.Role == StoreRoles.Owner).Select(s => new PairingModel.StoreViewModel\n                {\n                    Id = s.Id,\n                    Name = string.IsNullOrEmpty(s.StoreName) ? s.Id : s.StoreName\n                }).ToArray()\n            });\n        }\n\n        [HttpPost(\"/api-access-request\")]\n        public async Task<IActionResult> Pair(string pairingCode, string storeId)\n        {\n            if (pairingCode == null)\n                return NotFound();\n            var store = CurrentStore;\n            var pairing = await _TokenRepository.GetPairingAsync(pairingCode);\n            if (store == null || pairing == null)\n                return NotFound();\n\n            var pairingResult = await _TokenRepository.PairWithStoreAsync(pairingCode, store.Id);\n            if (pairingResult == PairingResult.Complete || pairingResult == PairingResult.Partial)\n            {\n                var excludeFilter = store.GetStoreBlob().GetExcludedPaymentMethods();\n                StoreNotConfigured = !store.GetSupportedPaymentMethods(_NetworkProvider)\n                                          .Where(p => !excludeFilter.Match(p.PaymentId))\n                                          .Any();\n                TempData[WellKnownTempData.SuccessMessage] = \"Pairing is successful\";\n                if (pairingResult == PairingResult.Partial)\n                    TempData[WellKnownTempData.SuccessMessage] = \"Server initiated pairing code: \" + pairingCode;\n                return RedirectToAction(nameof(ListTokens), new\n                {\n                    storeId = store.Id,\n                    pairingCode = pairingCode\n                });\n            }\n            else\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"Pairing failed ({pairingResult})\";\n                return RedirectToAction(nameof(ListTokens), new\n                {\n                    storeId = store.Id\n                });\n            }\n        }\n\n        private string? GetUserId()\n        {\n            if (User.Identity?.AuthenticationType != AuthenticationSchemes.Cookie)\n                return null;\n            return _UserManager.GetUserId(User);\n        }\n    }\n}\n", "@using System.Globalization\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@using BTCPayServer.TagHelpers\n@using BTCPayServer.Views.Apps\n@using Microsoft.AspNetCore.Mvc.TagHelpers\n@model BTCPayServer.Plugins.Crowdfund.Models.UpdateCrowdfundViewModel\n@{\n    ViewData.SetActivePage(AppsNavPages.Update, \"Update Crowdfund\", Model.AppId);\n}\n\n@section PageHeadContent {\n    <link href=\"~/vendor/summernote/summernote-bs5.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n    <link href=\"~/main/template-editor.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n    <style>\n        .flatpickr-wrapper { flex-grow: 1; }\n    </style>\n}\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\" />\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/summernote/summernote-bs5.js\" asp-append-version=\"true\"></script>\n}\n\n<form method=\"post\">\n    <div class=\"sticky-header-setup\"></div>\n    <div class=\"sticky-header d-sm-flex align-items-center justify-content-between\">\n        <h2 class=\"mb-0\">@ViewData[\"Title\"]</h2>\n        <div class=\"d-flex gap-3 mt-3 mt-sm-0\">\n            <button type=\"submit\" class=\"btn btn-primary order-sm-1\" id=\"SaveSettings\">Save</button>   \n            @if (Model.ModelWithMinimumData)\n            {\n                <a class=\"btn btn-secondary\" asp-action=\"ViewCrowdfund\" asp-route-appId=\"@Model.AppId\" id=\"ViewApp\" target=\"_blank\">View</a>\n            }\n        </div>\n    </div>\n\n    <partial name=\"_StatusMessage\" />\n\n    <input type=\"hidden\" asp-for=\"StoreId\" />\n    <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div>\n\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <div class=\"form-group\">\n                <label asp-for=\"AppName\" class=\"form-label\" data-required></label>\n                <input asp-for=\"AppName\" class=\"form-control\" required />\n                <span asp-validation-for=\"AppName\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"Title\" class=\"form-label\" data-required></label>\n                <input asp-for=\"Title\" class=\"form-control\" required />\n                <span asp-validation-for=\"Title\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"Tagline\" class=\"form-label\"></label>\n                <input asp-for=\"Tagline\" class=\"form-control\" />\n                <span asp-validation-for=\"Tagline\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <div class=\"form-group\">\n                <label asp-for=\"Description\" class=\"form-label\" data-required></label>\n                <textarea asp-for=\"Description\" rows=\"20\" cols=\"40\" class=\"form-control richtext\"></textarea>\n                <span asp-validation-for=\"Description\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"d-flex align-items-center\">\n                    <input asp-for=\"Enabled\" type=\"checkbox\" class=\"btcpay-toggle me-3\"/>\n                    <div>\n                        <label asp-for=\"Enabled\" class=\"form-label mb-0\"></label>\n                        <span asp-validation-for=\"Enabled\" class=\"text-danger\"></span>\n                        <div class=\"text-muted\" hidden=\"@Model.Enabled\">The crowdfund is only visible to you. To make it visible to anyone else, enable this.</div>\n                        <div class=\"text-muted\" hidden=\"@(!Model.Enabled)\">The crowdfund is visible to anyone. To make it only visible to you, disable this.</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <h3 class=\"mt-5 mb-4\">Goal</h3>\n            <div class=\"d-flex flex-wrap gap-3 mb-3\">\n                <div class=\"form-group w-250px mb-0\">\n                    <label asp-for=\"TargetAmount\" class=\"form-label\"></label>\n                    <input inputmode=\"decimal\" asp-for=\"TargetAmount\" class=\"form-control\" />\n                    <span asp-validation-for=\"TargetAmount\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"TargetCurrency\" class=\"form-label\"></label>\n                    <input asp-for=\"TargetCurrency\" class=\"form-control w-auto\" currency-selection />\n                    <div class=\"form-text\">Uses the store's default currency (@Model.StoreDefaultCurrency) if empty.</div>\n                    <span asp-validation-for=\"TargetCurrency\" class=\"text-danger\"></span>\n                </div>\n            </div>\n            <div class=\"d-flex flex-wrap gap-3 align-items-center mb-4\">\n                <div class=\"form-group mb-0 w-250px\">\n                    <label asp-for=\"StartDate\" class=\"form-label\"></label>\n                    <div class=\"input-group flex-nowrap\">\n                        <input type=\"datetime-local\" asp-for=\"StartDate\"\n                               value=\"@(Model.StartDate?.ToString(\"u\", CultureInfo.InvariantCulture))\"\n                               class=\"form-control flatdtpicker\"\n                               placeholder=\"No start date has been set\" />\n                        <button class=\"btn btn-secondary input-group-clear px-3\" type=\"button\" title=\"Clear\">\n                            <vc:icon symbol=\"close\"/>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"form-group mb-0 w-250px\">\n                    <label asp-for=\"EndDate\" class=\"form-label\"></label>\n                    <div class=\"input-group flex-nowrap\">\n                        <input type=\"datetime-local\" asp-for=\"EndDate\"\n                               value=\"@(Model.EndDate?.ToString(\"u\", CultureInfo.InvariantCulture))\"\n                               class=\"form-control flatdtpicker\"\n                               placeholder=\"No end date has been set\" />\n                        <button class=\"btn btn-secondary input-group-clear px-3\" type=\"button\" title=\"Clear\">\n                            <vc:icon symbol=\"close\"/>\n                        </button>\n                    </div>\n                </div>\n                <span asp-validation-for=\"StartDate\" class=\"text-danger\"></span>\n                <span asp-validation-for=\"EndDate\" class=\"text-danger\"></span>\n            </div>\n            \n            <div class=\"form-group mt-4\" id=\"ResetRow\" hidden=\"@(Model.StartDate == null)\">\n                <div class=\"d-flex align-items-center mb-3\">\n                    <input asp-for=\"IsRecurring\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#ResetEverySettings\" aria-expanded=\"@(Model.IsRecurring)\" aria-controls=\"ResetEverySettings\" />\n                    <div>\n                        <label asp-for=\"IsRecurring\" class=\"form-label mb-0\">Recurring Goal</label>\n                        <span asp-validation-for=\"IsRecurring\" class=\"text-danger\"></span>\n                        <div class=\"text-muted\">Reset goal after a specific period of time, based on your crowdfund's start date.</div>\n                    </div>\n                </div>\n                \n                <div class=\"collapse @(Model.IsRecurring ? \"show\" : \"\")\" id=\"ResetEverySettings\">\n                    <div class=\"form-group mb-0 pt-2 w-250px\">\n                        <label asp-for=\"ResetEveryAmount\" class=\"form-label\"></label>\n                        <div class=\"d-flex align-items-center\">\n                            <input type=\"number\" inputmode=\"numeric\" asp-for=\"ResetEveryAmount\" placeholder=\"Amount\" class=\"form-control me-3\" min=\"0\">\n                            <select class=\"form-select w-auto\" asp-for=\"ResetEvery\">\n                                @foreach (var opt in Model.ResetEveryValues)\n                                {\n                                    <option value=\"@opt\">@opt</option>\n                                }\n                            </select>\n                        </div>\n                        <span asp-validation-for=\"ResetEveryAmount\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <partial name=\"TemplateEditor\" model=\"@(nameof(Model.PerksTemplate), \"Perks\", Model.TargetCurrency ?? Model.StoreDefaultCurrency)\" />\n        </div>\n    </div>\n    <div class=\"row collapse\" id=\"RawEditor\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <div class=\"form-group pt-3\">\n                <label asp-for=\"PerksTemplate\" class=\"form-label\"></label>\n                <textarea asp-for=\"PerksTemplate\" rows=\"10\" cols=\"40\" class=\"form-control\"></textarea>\n                <span asp-validation-for=\"PerksTemplate\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <h3 class=\"mt-5 mb-4\">Contributions</h3>\n            <div class=\"form-check mb-3\">\n                <input asp-for=\"SortPerksByPopularity\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"SortPerksByPopularity\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"SortPerksByPopularity\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-check mb-3\">\n                <input asp-for=\"DisplayPerksRanking\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"DisplayPerksRanking\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"DisplayPerksRanking\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-check mb-3\">\n                <input asp-for=\"DisplayPerksValue\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"DisplayPerksValue\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"DisplayPerksValue\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-check mb-3\">\n                <input asp-for=\"EnforceTargetAmount\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"EnforceTargetAmount\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"EnforceTargetAmount\" class=\"text-danger\"></span>\n            </div>\n            \n            <h3 class=\"mt-5 mb-4\">Crowdfund Behavior</h3>\n            <div class=\"form-check\">\n                <input asp-for=\"UseAllStoreInvoices\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"UseAllStoreInvoices\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"UseAllStoreInvoices\" class=\"text-danger\"></span>\n            </div>\n\n            <h3 class=\"mt-5 mb-2\">Additional Options</h3>\n            <div class=\"form-group\">\n                <div class=\"accordion\" id=\"additional\">\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-sound-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-sound\" aria-expanded=\"false\" aria-controls=\"additional-sound\">\n                                Sound\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-sound\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-sound-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group mb-0\">\n                                    <div class=\"d-flex align-items-center\">\n                                        <input asp-for=\"SoundsEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#SoundsEnabledSettings\" aria-expanded=\"@Model.SoundsEnabled\" aria-controls=\"SoundsEnabledSettings\"/>\n                                        <label asp-for=\"SoundsEnabled\" class=\"form-label mb-0\"></label>\n                                        <span asp-validation-for=\"SoundsEnabled\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                                <div class=\"collapse @(Model.SoundsEnabled ? \"show\" : \"\")\" id=\"SoundsEnabledSettings\">\n                                    <div class=\"form-group mb-0 pt-3\">\n                                        <label asp-for=\"Sounds\" class=\"form-label\"></label>\n                                        <textarea asp-for=\"Sounds\" class=\"form-control\" rows=\"5\"></textarea>\n                                        <span asp-validation-for=\"Sounds\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-animation-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-animation\" aria-expanded=\"false\" aria-controls=\"additional-animation\">\n                                Animation\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-animation\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-animation-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group mb-0\">\n                                    <div class=\"d-flex align-items-center\">\n                                        <input asp-for=\"AnimationsEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#AnimationsEnabledSettings\" aria-expanded=\"@Model.AnimationsEnabled\" aria-controls=\"AnimationsEnabledSettings\"/>\n                                        <label asp-for=\"AnimationsEnabled\" class=\"form-label mb-0\"></label>\n                                        <span asp-validation-for=\"AnimationsEnabled\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                                <div class=\"collapse @(Model.AnimationsEnabled ? \"show\" : \"\")\" id=\"AnimationsEnabledSettings\">\n                                    <div class=\"form-group mb-0 pt-3\">\n                                        <label asp-for=\"AnimationColors\" class=\"form-label\"></label>\n                                        <textarea asp-for=\"AnimationColors\" class=\"form-control\" rows=\"5\"></textarea>\n                                        <span asp-validation-for=\"AnimationColors\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-discussion-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-discussion\" aria-expanded=\"false\" aria-controls=\"additional-discussion\">\n                                Discussion\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-discussion\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-discussion-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group mb-0\">\n                                    <div class=\"d-flex align-items-center\">\n                                        <input asp-for=\"DisqusEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#DisqusEnabledSettings\" aria-expanded=\"@Model.DisqusEnabled\" aria-controls=\"DisqusEnabledSettings\"/>\n                                        <label asp-for=\"DisqusEnabled\" class=\"form-label mb-0\"></label>\n                                        <span asp-validation-for=\"DisqusEnabled\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                                <div class=\"collapse @(Model.DisqusEnabled ? \"show\" : \"\")\" id=\"DisqusEnabledSettings\">\n                                    <div class=\"form-group mb-0 pt-3\">\n                                        <label asp-for=\"DisqusShortname\" class=\"form-label\"></label>\n                                        <input asp-for=\"DisqusShortname\" class=\"form-control\" />\n                                        <span asp-validation-for=\"DisqusShortname\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-custom-css-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-custom-css\" aria-expanded=\"false\" aria-controls=\"additional-custom-css\">\n                                Custom CSS\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-custom-css\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-custom-css-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"MainImageUrl\" class=\"form-label\"></label>\n                                    <input asp-for=\"MainImageUrl\" class=\"form-control\" />\n                                    <span asp-validation-for=\"MainImageUrl\" class=\"text-danger\"></span>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label asp-for=\"CustomCSSLink\" class=\"form-label\"></label>\n                                    <a href=\"https://docs.btcpayserver.org/Development/Theme/#2-bootstrap-themes\" target=\"_blank\" rel=\"noreferrer noopener\">\n                                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                                    </a>\n                                    <input asp-for=\"CustomCSSLink\" class=\"form-control\" />\n                                    <span asp-validation-for=\"CustomCSSLink\" class=\"text-danger\"></span>\n                                </div>\n                                <div class=\"form-group mb-4\">\n                                    <label asp-for=\"EmbeddedCSS\" class=\"form-label\"></label>\n                                    <textarea asp-for=\"EmbeddedCSS\" rows=\"10\" cols=\"40\" class=\"form-control\"></textarea>\n                                    <span asp-validation-for=\"EmbeddedCSS\" class=\"text-danger\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-notification-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-notification\" aria-expanded=\"false\" aria-controls=\"additional-notification\">\n                                Notification URL Callbacks\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-notification\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-notification-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"NotificationUrl\" class=\"form-label\"></label>\n                                    <input asp-for=\"NotificationUrl\" class=\"form-control\" />\n                                    <span asp-validation-for=\"NotificationUrl\" class=\"text-danger\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n\n<div class=\"d-flex gap-3 mt-3\">\n    <a class=\"btn btn-secondary\" asp-action=\"ListInvoices\" asp-controller=\"UIInvoice\" asp-route-storeId=\"@Model.StoreId\" asp-route-searchterm=\"@Model.SearchTerm\">Invoices</a>\n    <a id=\"DeleteApp\" class=\"btn btn-outline-danger\" asp-controller=\"UIApps\" asp-action=\"DeleteApp\" asp-route-appId=\"@Model.AppId\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The app <strong>@Model.AppName</strong> and its settings will be permanently deleted.\" data-confirm-input=\"DELETE\">Delete this app</a>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete app\", \"This app will be removed from this store.\", \"Delete\"))\" />\n\n<script>\n    const resetRow = document.getElementById('ResetRow');\n    const startDateInputId = \"StartDate\";\n\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        setTimeout(() => {\n            flatpickrInstances.forEach((instance) => {\n                if (instance.element.id === startDateInputId) {\n                    instance.config.onChange.push((selectedDates) => {\n                        if (selectedDates.length) {\n                            // Show the reset row if start date is selected.\n                            // Since start date must be selected in order for the reset options to be set\n                            // we don't need to show it by default and can show it only when start date is selected\n                                resetRow.removeAttribute('hidden');\n                        }\n                    });\n                }\n            });\n        }, 0);\n\n        document.addEventListener('input-group-clear-input-value-cleared', ({ detail }) => {\n            const input = detail[0];\n            if (input.id === startDateInputId) {\n                resetRow.setAttribute('hidden', 'hidden');\n            }\n        });\n    });\n</script>\n", "@using BTCPayServer.Services.Apps\n@using BTCPayServer.Abstractions.Models\n@using BTCPayServer.Views.Apps\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Services.Stores\n@model BTCPayServer.Plugins.PointOfSale.Models.UpdatePointOfSaleViewModel\n@{\n    ViewData.SetActivePage(AppsNavPages.Update, \"Update Point of Sale\", Model.Id);\n    \n    var checkoutFormOptions = CheckoutFormSelectList.WithSelected(Model.FormId);\n}\n\n<form method=\"post\">\n    <div class=\"sticky-header-setup\"></div>\n    <div class=\"sticky-header d-sm-flex align-items-center justify-content-between\">\n        <h2 class=\"mb-0\">@ViewData[\"Title\"]</h2>\n        <div class=\"d-flex gap-3 mt-3 mt-sm-0\">\n            <button type=\"submit\" class=\"btn btn-primary order-sm-1\" id=\"SaveSettings\">Save</button>\n            <a class=\"btn btn-secondary\" asp-action=\"ViewPointOfSale\" asp-route-appId=\"@Model.Id\" id=\"ViewApp\" target=\"_blank\">View</a>\n        </div>\n    </div>\n\n    <partial name=\"_StatusMessage\" />\n\n    <input type=\"hidden\" asp-for=\"StoreId\" />\n    <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div>\n\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <div class=\"form-group\">\n                <label asp-for=\"AppName\" class=\"form-label\" data-required></label>\n                <input asp-for=\"AppName\" class=\"form-control\" required />\n                <span asp-validation-for=\"AppName\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"Title\" class=\"form-label\" data-required></label>\n                <input asp-for=\"Title\" class=\"form-control\" required />\n                <span asp-validation-for=\"Title\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"Currency\" class=\"form-label\"></label>\n                <input asp-for=\"Currency\" class=\"form-control w-auto\" currency-selection />\n                <div class=\"form-text\">Uses the store's default currency (@Model.StoreDefaultCurrency) if empty.</div>\n                <span asp-validation-for=\"Currency\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <div class=\"form-group mb-0\">\n                <label asp-for=\"Description\" class=\"form-label\"></label>\n                <textarea asp-for=\"Description\" rows=\"10\" cols=\"40\" class=\"form-control richtext\"></textarea>\n                <span asp-validation-for=\"Description\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xxl-constrain\">\n            <partial name=\"TemplateEditor\" model=\"@(nameof(Model.Template), \"Products\", Model.Currency ?? Model.StoreDefaultCurrency)\" />\n        </div>\n    </div>\n    <div class=\"row collapse\" id=\"RawEditor\">\n        <div class=\"col-xxl-constrain\">\n            <div class=\"form-group pt-3\">\n                <label asp-for=\"Template\" class=\"form-label\"></label>\n                <textarea asp-for=\"Template\" rows=\"10\" cols=\"40\" class=\"form-control\"></textarea>\n                <span asp-validation-for=\"Template\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <h3 class=\"mt-5 mb-4\">Appearance</h3>\n            <div class=\"form-group\">\n                <label asp-for=\"DefaultView\" class=\"form-label\" data-required></label>\n                <select asp-for=\"DefaultView\" asp-items=\"@Html.GetEnumSelectList<PosViewType>()\" class=\"form-select\" required></select>\n                <span asp-validation-for=\"DefaultView\" class=\"text-danger\"></span>\n                <div class=\"form-text\">Choose the point of sale style for your customers.</div>\n            </div>\n            <div class=\"form-group\" id=\"button-price-text\">\n                <label asp-for=\"ButtonText\" class=\"form-label\" data-required></label>\n                <input asp-for=\"ButtonText\" class=\"form-control\" required />\n                <span asp-validation-for=\"ButtonText\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"FormId\" class=\"form-label\"></label>\n                <select asp-for=\"FormId\" class=\"form-select w-auto\" asp-items=\"@checkoutFormOptions\"></select>\n                <span asp-validation-for=\"FormId\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"RequiresRefundEmail\" class=\"form-label\"></label>\n                <select asp-for=\"RequiresRefundEmail\" asp-items=\"@Html.GetEnumSelectList<RequiresRefundEmail>()\" class=\"form-select w-auto\"></select>\n                <span asp-validation-for=\"RequiresRefundEmail\" class=\"text-danger\"></span>\n            </div>\n            <section id=\"discounts\" class=\"p-0\">\n                <h3 class=\"mt-5 mb-4\">Discounts</h3>\n                <div class=\"form-group d-flex align-items-center\">\n                    <input asp-for=\"ShowDiscount\" type=\"checkbox\" class=\"btcpay-toggle me-3\" />\n                    <div>\n                        <label asp-for=\"ShowDiscount\" class=\"form-label mb-0\"></label>\n                        <div class=\"text-muted\">Not recommended for customer self-checkout.</div>\n                    </div>\n                    <span asp-validation-for=\"ShowDiscount\" class=\"text-danger\"></span>\n                </div>\n            </section>\n            <section id=\"custom-payments\" class=\"p-0\">\n                <h3 class=\"mt-5 mb-4\">Custom Payments</h3>\n                <div class=\"form-group mb-4 d-flex align-items-center\">\n                    <input asp-for=\"ShowCustomAmount\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#CustomAmountSettings\" aria-expanded=\"@Model.ShowCustomAmount\" aria-controls=\"CustomAmountSettings\"/>\n                    <label asp-for=\"ShowCustomAmount\" class=\"form-label mb-0\"></label>\n                    <span asp-validation-for=\"ShowCustomAmount\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"collapse @(Model.ShowCustomAmount ? \"show\" : \"\")\" id=\"CustomAmountSettings\">\n                    <div class=\"form-group mb-0 pb-3\">\n                        <label asp-for=\"CustomButtonText\" class=\"form-label\" data-required></label>\n                        <input asp-for=\"CustomButtonText\" class=\"form-control\" required />\n                        <span asp-validation-for=\"CustomButtonText\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            </section>\n            <section id=\"tips\" class=\"p-0\">\n                <h3 class=\"mt-5 mb-4\">Tips</h3>\n                <div class=\"form-group d-flex align-items-center\">\n                    <input asp-for=\"EnableTips\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#CustomTipsSettings\" aria-expanded=\"@Model.EnableTips\" aria-controls=\"CustomTipsSettings\" />\n                    <label asp-for=\"EnableTips\" class=\"form-label mb-0\"></label>\n                    <span asp-validation-for=\"EnableTips\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"collapse @(Model.EnableTips ? \"show\" : \"\")\" id=\"CustomTipsSettings\">\n                    <div class=\"form-group pt-3\">\n                        <label asp-for=\"CustomTipText\" class=\"form-label\" data-required></label>\n                        <input asp-for=\"CustomTipText\" class=\"form-control\" required />\n                        <span asp-validation-for=\"CustomTipText\" class=\"text-danger\"></span>\n                    </div>\n                    <div class=\"form-group mb-0\">\n                        <label asp-for=\"CustomTipPercentages\" class=\"form-label\"></label>\n                        <input asp-for=\"CustomTipPercentages\" class=\"form-control\" />\n                        <span asp-validation-for=\"CustomTipPercentages\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            </section>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <h3 class=\"mt-5 mb-2\">Additional Options</h3>\n            <div class=\"form-group\">\n                <div class=\"accordion\" id=\"additional\">\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-embed-payment-button-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-embed-payment-button\" aria-expanded=\"false\" aria-controls=\"additional-embed-payment-button\">\n                                Embed a payment button linking to POS item\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-embed-payment-button\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-embed-payment-button-header\">\n                            <div class=\"accordion-body\">\n                                <p>You can host point of sale buttons in an external website with the following code.</p>\n                                @if (Model.Example1 != null)\n                                {\n                                    <span>For anything with a custom amount</span>\n                                    <pre class=\"p-3\">@Model.Example1</pre>\n                                }\n                                @if (Model.Example2 != null)\n                                {\n                                    <span>For a specific item of your template</span>\n                                    <pre class=\"p-3\">@Model.Example2</pre>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-embed-pos-iframe-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-embed-pos-iframe\" aria-expanded=\"false\" aria-controls=\"additional-embed-pos-iframe\">\n                                Embed Point of Sale via Iframe\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-embed-pos-iframe\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-embed-pos-iframe-header\">\n                            <div class=\"accordion-body\">\n                                You can embed this POS via an iframe.\n                                @{\n                                    var iframe = $\"<iframe src='{Url.Action(\"ViewPointOfSale\", \"UIPointOfSale\", new { appId = Model.Id }, Context.Request.Scheme)}' style='max-width: 100%; border: 0;'></iframe>\";\n                                }\n                                <pre class=\"p-3\">@iframe</pre>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-redirect-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-redirect\" aria-expanded=\"false\" aria-controls=\"additional-redirect\">\n                                Redirects\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-redirect\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-redirect-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"RedirectUrl\" class=\"form-label\"></label>\n                                    <input asp-for=\"RedirectUrl\" class=\"form-control\" />\n                                    <span asp-validation-for=\"RedirectUrl\" class=\"text-danger\"></span>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label asp-for=\"RedirectAutomatically\" class=\"form-label\"></label>\n                                    <select asp-for=\"RedirectAutomatically\" asp-items=\"Model.RedirectAutomaticallySelectList\" class=\"form-select\"></select>\n                                    <span asp-validation-for=\"RedirectAutomatically\" class=\"text-danger\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-notification-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-notification\" aria-expanded=\"false\" aria-controls=\"additional-notification\">\n                                Notification URL Callbacks\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-notification\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-notification-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"NotificationUrl\" class=\"form-label\"></label>\n                                    <input asp-for=\"NotificationUrl\" class=\"form-control\" />\n                                    <span asp-validation-for=\"NotificationUrl\" class=\"text-danger\"></span>\n                                </div>\n                                <p>A <code>POST</code> callback will be sent to the specified <code>notificationUrl</code> (for on-chain transactions when there are sufficient confirmations):</p>\n                                <pre class=\"p-3\">@Model.ExampleCallback</pre>\n                                <p><strong>Never</strong> trust anything but <code>id</code>, <strong>ignore</strong> the other fields completely, an attacker can spoof those, they are present only for backward compatibility reason:</p>\n                                <ul>\n                                    <li>Send a <code>GET</code> request to <code>https://btcpay.example.com/invoices/{invoiceId}</code> with <code>Content-Type: application/json; Authorization: Basic YourLegacyAPIkey\"</code>, Legacy API key can be created with Access Tokens in Store settings</li>\n                                    <li>Verify that the <code>orderId</code> is from your backend, that the <code>price</code> is correct and that <code>status</code> is <code>settled</code></li>\n                                    <li>You can then ship your order</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-custom-css-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-custom-css\" aria-expanded=\"false\" aria-controls=\"additional-custom-css\">\n                                Custom CSS\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-custom-css\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-custom-css-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"CustomCSSLink\" class=\"form-label\"></label>\n                                    <a href=\"https://docs.btcpayserver.org/Development/Theme/#2-bootstrap-themes\" target=\"_blank\" rel=\"noreferrer noopener\">\n                                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                                    </a>\n                                    <input asp-for=\"CustomCSSLink\" class=\"form-control\" />\n                                    <span asp-validation-for=\"CustomCSSLink\" class=\"text-danger\"></span>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label asp-for=\"EmbeddedCSS\" class=\"form-label\"></label>\n                                    <textarea asp-for=\"EmbeddedCSS\" rows=\"10\" cols=\"40\" class=\"form-control\"></textarea>\n                                    <span asp-validation-for=\"EmbeddedCSS\" class=\"text-danger\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n\n<div class=\"d-flex gap-3 mt-3\">\n    <a class=\"btn btn-secondary\" asp-action=\"ListInvoices\" asp-controller=\"UIInvoice\" asp-route-storeId=\"@Model.StoreId\" asp-route-searchterm=\"@Model.SearchTerm\">Invoices</a>\n    <a id=\"DeleteApp\" class=\"btn btn-outline-danger\" asp-controller=\"UIApps\" asp-action=\"DeleteApp\" asp-route-appId=\"@Model.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The app <strong>@Model.AppName</strong> and its settings will be permanently deleted.\" data-confirm-input=\"DELETE\">Delete this app</a>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete app\", \"This app will be removed from this store.\", \"Delete\"))\" />\n\n@section PageHeadContent {\n    <link href=\"~/vendor/highlightjs/default.min.css\" rel=\"stylesheet\" asp-append-version=\"true\">\n    <link href=\"~/vendor/summernote/summernote-bs5.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n    <link href=\"~/main/template-editor.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n}\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\" />\n    <script id=\"template-product-item\" type=\"text/template\">\n        <div class=\"col-sm-4 col-md-3 mb-3\">\n            <div class=\"card\">\n                {image}\n                <div class=\"card-body\">\n                    <h6 class=\"card-title\">{title}</h6>\n                    <a href=\"#\" class=\"js-product-edit btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#product-modal\">Edit</a>\n                    <a href=\"#\" class=\"js-product-remove btn btn-danger\"><i class=\"fa fa-trash\"></i></a>\n                </div>\n            </div>\n        </div>\n    </script>\n    <script id=\"template-product-content\" type=\"text/template\">\n        <div class=\"mb-3\">\n            <input class=\"js-product-id\" type=\"hidden\" name=\"id\" value=\"{id}\">\n            <input class=\"js-product-index\" type=\"hidden\" name=\"index\" value=\"{index}\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-6\">\n                    <label class=\"form-label\" data-required>Title</label>\n                    <input type=\"text\" class=\"js-product-title form-control mb-2\" value=\"{title}\" autofocus required />\n                </div>\n                <div class=\"col-sm-3\">\n                    <label class=\"form-label\" data-required>Price</label>\n                    <input class=\"js-product-price form-control mb-2\"\n                           inputmode=\"decimal\"\n                           pattern=\"\\d*\"\n                           type=\"number\"\n                           value=\"{price}\"\n                           required />\n                </div>\n                <div class=\"col-sm-3\">\n                    <label class=\"form-label\">Custom price</label>\n                    <select class=\"js-product-custom form-select\">\n                        {custom}\n                    </select>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"form-label\">Image</label>\n                <input type=\"text\" class=\"js-product-image form-control mb-2\" value=\"{image}\" />\n            </div>\n            <div class=\"form-group\">\n                <label class=\"form-label\">Description</label>\n                <textarea rows=\"3\" cols=\"40\" class=\"js-product-description form-control mb-2\">{description}</textarea>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"form-label\">Inventory (leave blank to not use inventory feature)</label>\n                <input type=\"number\" inputmode=\"numeric\" step=\"1\" class=\"js-product-inventory form-control mb-2\" value=\"{inventory}\" />\n            </div>\n            <div class=\"form-group d-flex align-items-center\">\n                <input type=\"checkbox\" class=\"btcpay-toggle me-2\" value=\"{disabled}\" />\n                <label class=\"form-label mb-0\">Disabled</label>\n            </div>\n        </div>\n    </script>\n    <script>\n        const posStyleSelector = document.getElementById('DefaultView');\n        posStyleSelector.addEventListener('change', function(e) {\n            handleStyleSelected(e.target.value);\n        });\n\n        function handleStyleSelected(style) {\n            switch (style) {\n                case '0': // Item list only\n                case '3': // Print\n                    hideDiscountsSection();\n                    hideButtonPriceTextSection();\n                    showCustomPaymentAmountSection();\n                    hideTipsSection();\n                    break;\n                case '1': // Item list and cart\n                    showDiscountsSection();\n                    showButtonPriceTextSection();\n                    showCustomPaymentAmountSection();\n                    showTipsSection();\n                    break;\n                case '2': // Keypad only\n                    showDiscountsSection();\n                    hideButtonPriceTextSection();\n                    hideCustomPaymentAmountSection();\n                    showTipsSection();\n                    break;\n            }\n        }\n\n        /** Show/hide discounts section */\n\n        const discountsSection = document.getElementById('discounts');\n\n        function hideDiscountsSection() {\n            hideElement(discountsSection);\n        }\n\n        function showDiscountsSection() {\n            showElement(discountsSection);\n        }\n\n        /***************************************/\n\n        /** Show/hide button text section */\n\n        const buttonPriceTextSection = document.getElementById('button-price-text');\n\n        function hideButtonPriceTextSection() {\n            hideElement(buttonPriceTextSection);\n        }\n\n        function showButtonPriceTextSection() {\n            showElement(buttonPriceTextSection);\n        }\n\n        /***************************************/\n\n        /** Show/hide custom payments amount seciton */\n\n        const customPaymentAmountSection = document.getElementById('custom-payments');\n\n        function hideCustomPaymentAmountSection() {\n           hideElement(customPaymentAmountSection);\n        }\n\n        function showCustomPaymentAmountSection() {\n            showElement(customPaymentAmountSection);\n        }\n\n        /***************************************/\n\n        /** Show/hide tips seciton */\n\n        const tipsSection = document.getElementById('tips');\n\n        function hideTipsSection() {\n           hideElement(tipsSection);\n        }\n\n        function showTipsSection() {\n            showElement(tipsSection);\n        }\n\n        /***************************************/\n\n        function hideElement(el) {\n            el.setAttribute('hidden', true);\n        }\n\n        function showElement(el) {\n            el.removeAttribute('hidden');\n        }\n\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            handleStyleSelected(posStyleSelector.value);\n        });\n    </script>\n\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/summernote/summernote-bs5.js\" asp-append-version=\"true\"></script>\n}\n", "@using BTCPayServer.Services.Apps\n@using BTCPayServer.Abstractions.Models\n@model ListAppsViewModel\n@{\n    ViewData.SetActivePage(AppsNavPages.Index, \"Apps\");\n    var storeNameSortOrder = (string)ViewData[\"StoreNameSortOrder\"];\n    var appNameSortOrder = (string)ViewData[\"AppNameSortOrder\"];\n    var appTypeSortOrder = (string)ViewData[\"AppTypeSortOrder\"];\n    var sortByDesc = \"Sort by descending...\";\n    var sortByAsc = \"Sort by ascending...\";\n}\n\n<partial name=\"_StatusMessage\" />\n\n<div class=\"d-sm-flex align-items-center justify-content-between mb-2\">\n    <h2 class=\"mb-0\">\n        @ViewData[\"Title\"]\n        <small>\n            <a href=\"https://docs.btcpayserver.org/Apps/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n            </a>\n        </small>\n    </h2>\n    <a asp-action=\"CreateApp\" asp-route-storeId=\"@Context.GetStoreData().Id\" class=\"btn btn-primary mt-3 mt-sm-0\" role=\"button\" id=\"CreateNewApp\"><span class=\"fa fa-plus\"></span> Create a new app</a>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-lg-12\">\n        @if (Model.Apps.Any())\n        {\n            <table class=\"table table-hover table-responsive-md\">\n                <thead>\n                <tr>\n                    <th>\n                        <a\n                            asp-action=\"ListApps\"\n                            asp-route-storeId=\"@Context.GetStoreData().Id\"\n                            asp-route-sortOrder=\"@(storeNameSortOrder ?? \"asc\")\"\n                            asp-route-sortOrderColumn=\"StoreName\"\n                            class=\"text-nowrap\"\n                            title=\"@(storeNameSortOrder == \"desc\" ? sortByDesc : sortByAsc)\"\n                        >\n                            Store\n                            <span class=\"fa @(storeNameSortOrder == \"asc\" ? \"fa-sort-alpha-desc\" : storeNameSortOrder == \"desc\" ? \"fa-sort-alpha-asc\" : \"fa-sort\")\" />\n                        </a>\n                    </th>\n                    <th>\n                        <a\n                            asp-action=\"ListApps\"\n                            asp-route-storeId=\"@Context.GetStoreData().Id\"\n                            asp-route-sortOrder=\"@(appNameSortOrder ?? \"asc\")\"\n                            asp-route-sortOrderColumn=\"AppName\"\n                            class=\"text-nowrap\"\n                            title=\"@(appNameSortOrder == \"desc\" ? sortByDesc : sortByAsc)\"\n                        >\n                            Name\n                            <span class=\"fa @(appNameSortOrder == \"asc\" ? \"fa-sort-alpha-desc\" : appNameSortOrder == \"desc\" ? \"fa-sort-alpha-asc\" : \"fa-sort\")\" />\n                        </a>\n                    </th>\n                    <th>\n                        <a\n                            asp-action=\"ListApps\"\n                            asp-route-storeId=\"@Context.GetStoreData().Id\"\n                            asp-route-sortOrder=\"@(appTypeSortOrder ?? \"asc\")\"\n                            asp-route-sortOrderColumn=\"AppType\"\n                            class=\"text-nowrap\"\n                            title=\"@(appTypeSortOrder == \"desc\" ? sortByDesc : sortByAsc)\"\n                        >\n                            App Type\n                            <span class=\"fa @(appTypeSortOrder == \"asc\" ? \"fa-sort-alpha-desc\" : appTypeSortOrder == \"desc\" ? \"fa-sort-alpha-asc\" : \"fa-sort\")\" />\n                        </a>\n                    </th>\n                    <th style=\"text-align:right\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                @foreach (var app in Model.Apps)\n                {\n                    <tr>\n                        <td>\n                            @if (app.IsOwner)\n                            {\n                                <span><a asp-controller=\"UIStores\" asp-action=\"GeneralSettings\" asp-route-storeId=\"@app.StoreId\">@app.StoreName</a></span>\n                            }\n                            else\n                            {\n                                <span>@app.StoreName</span>\n                            }\n                        </td>\n                        <td>@app.AppName</td>\n                        <td>\n                            @typeof(AppType).DisplayName(app.AppType) \n                            @if (app.AppType != AppType.Crowdfund.ToString())\n                            {\n                                <span>-</span> \n                            }\n                            \n                            @app.ViewStyle\n                        </td>\n                        <td class=\"text-end\">\n                            @if (app.IsOwner)\n                            {\n                                <a asp-action=\"@app.UpdateAction\" asp-controller=\"UIApps\" asp-route-appId=\"@app.Id\" asp-route-storeId=\"@app.StoreId\">Settings</a>\n                                <span> - </span>\n                            }\n                            <a asp-action=\"DeleteApp\" asp-route-appId=\"@app.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The app <strong>@app.AppName</strong> and its settings will be permanently deleted from your store <strong>@app.StoreName</strong>.\" data-confirm-input=\"DELETE\">Delete</a>\n                        </td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n        }\n        else\n        {\n            <p class=\"text-secondary mt-3\">\n                There are no apps yet.\n            </p>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete app\", \"This app will be removed from this store.\", \"Delete\"))\" />\n", "@using BTCPayServer.Views.Apps\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@model BTCPayServer.Models.CustodianAccountViewModels.EditCustodianAccountViewModel\n@{\n    ViewData.SetActivePage(AppsNavPages.Update, \"Edit custodian account\");\n}\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\"/>\n}\n\n<partial name=\"_StatusMessage\"/>\n\n<h2 class=\"mt-1 mb-4\">@ViewData[\"Title\"]</h2>\n\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <form asp-action=\"EditCustodianAccount\" class=\"mb-5\">\n            @if (!ViewContext.ModelState.IsValid)\n            {\n                <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div>\n            }\n            <partial name=\"_FormTopMessages\" model=\"Model.ConfigForm\"/>\n\n            <div class=\"form-group\">\n                <label asp-for=\"CustodianAccount.Name\" class=\"form-label\" data-required></label>\n                <input asp-for=\"CustodianAccount.Name\" class=\"form-control\" required/>\n                <span asp-validation-for=\"CustodianAccount.Name\" class=\"text-danger\"></span>\n            </div>\n\n            <partial name=\"_Form\" model=\"Model.ConfigForm\"/>\n\n            <div class=\"form-group mt-4\">\n                <input type=\"submit\" value=\"Continue\" class=\"btn btn-primary\" id=\"Save\"/>\n            </div>\n        </form>\n        <a asp-action=\"DeleteCustodianAccount\" asp-route-storeId=\"@Model.CustodianAccount.StoreId\" asp-route-accountId=\"@Model.CustodianAccount.Id\" class=\"btn btn-outline-danger\" role=\"button\" id=\"DeleteCustodianAccountConfig\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The custodian account <strong>@Model.CustodianAccount.Name</strong> will be permanently deleted.\" data-confirm-input=\"DELETE\">\n            <span class=\"fa fa-trash\"></span> Delete this custodian account\n        </a>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete custodian account\", \"The custodian account will be permanently deleted.\", \"Delete\"))\" />\n", "@using BTCPayServer.Views.Stores\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@model UILNURLController.EditLightningAddressVM\n@{\n    ViewData.SetActivePage(\"LightningAddress\", nameof(StoreNavPages), \"Lightning Address\", Context.GetStoreData().Id);\n}\n\n@section PageHeadContent {\n    <style>\n        .settings-holder span:not(:last-child):after{\n            content: \" / \";\n        }\n    </style>\n}\n\n@section PageFootContent {\n    <script>\n        delegate('click', '.remove', event => { \n            event.preventDefault() \n            const { name, value } = event.target\n            const confirmButton = document.getElementById('ConfirmContinue')\n            confirmButton.setAttribute('name', name)\n            confirmButton.setAttribute('value', value)\n        })\n    </script>\n}\n\n<partial name=\"_StatusMessage\" />\n\n@if (Context.Request.PathBase.ToString() != string.Empty)\n{\n    <div class=\"alert alert-warning\" role=\"alert\">\n        Your BTCPay Server installation is using the root path <span class=\"fw-bold\">@Context.Request.PathBase</span>.<br /><br />\n        This is incompatible with wallets attempting to resolve <span class=\"fw-bold\">@Context.Request.GetAbsoluteUriNoPathBase(new Uri(\"/.well-known/lnurlp/{username}\", UriKind.Relative))</span> rather than <span class=\"fw-bold\">@Context.Request.GetAbsoluteUri(\"/.well-known/lnurlp/{username}\")</span>.<br /><br />\n        If the LN Address doesn't work, ask your integrator to redirect queries from <span class=\"fw-bold\">@Context.Request.GetAbsoluteUriNoPathBase(new Uri(\"/.well-known/lnurlp/{username}\", UriKind.Relative))</span> to <span class=\"fw-bold\">@Context.Request.GetAbsoluteUri(\"/.well-known/lnurlp/{username}\")</span>.\n    </div>\n}\n\n<div class=\"d-flex align-items-center justify-content-between mb-2\">\n    <h2 class=\"mb-0\">@ViewData[\"Title\"]</h2>\n    <a data-bs-toggle=\"collapse\" data-bs-target=\"#AddAddress\" class=\"btn btn-primary\" role=\"button\">\n        <span class=\"fa fa-plus\"></span>\n        Add Address\n    </a>\n</div>\n\n<form asp-action=\"EditLightningAddress\" method=\"post\">\n    @{\n        var showAddForm = !ViewContext.ViewData.ModelState.IsValid || !string.IsNullOrEmpty(Model.Add?.Username) || Model.Add?.Max != null || Model.Add?.Min != null || !string.IsNullOrEmpty(Model.Add?.CurrencyCode);\n        var showAdvancedOptions = !string.IsNullOrEmpty(Model.Add?.CurrencyCode) || Model.Add?.Min != null || Model.Add?.Max != null;\n     }\n    \n    <div class=\"collapse @(showAddForm ? \"show\": \"\")\" id=\"AddAddress\">\n        <div class=\"form-group pt-2\">\n            <label asp-for=\"Add.Username\" class=\"form-label\"></label>\n            <div class=\"input-group\">\n                <input asp-for=\"Add.Username\" class=\"form-control\"/>\n                <span class=\"input-group-text\">@@@Context.Request.Host.ToUriComponent()@Context.Request.PathBase</span>\n            </div>\n            <span asp-validation-for=\"Add.Username\" class=\"text-danger\"></span>\n        </div>\n        <button class=\"d-inline-flex align-items-center btn btn-link text-primary fw-semibold p-0 mb-3\" type=\"button\" id=\"AdvancedSettingsButton\" data-bs-toggle=\"collapse\" data-bs-target=\"#AdvancedSettings\" aria-expanded=\"false\" aria-controls=\"AdvancedSettings\">\n            <vc:icon symbol=\"caret-down\"/>\n            <span class=\"ms-1\">Advanced settings</span>\n        </button>\n        <div id=\"AdvancedSettings\" class=\"collapse @(showAdvancedOptions ? \"show\" : \"\")\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-auto\">\n                    <div class=\"form-group\">\n                        <label asp-for=\"Add.CurrencyCode\" class=\"form-label\"></label>\n                        <input asp-for=\"Add.CurrencyCode\" class=\"form-control\" style=\"max-width:16ch;\"/>\n                        <span asp-validation-for=\"Add.CurrencyCode\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-auto\">\n                    <div class=\"form-group\">\n                        <label asp-for=\"Add.Min\" class=\"form-label\"></label>\n                        <input asp-for=\"Add.Min\" class=\"form-control\" type=\"number\" inputmode=\"numeric\" min=\"1\" style=\"max-width:16ch;\"/>\n                        <span asp-validation-for=\"Add.Min\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-auto\">\n                    <div class=\"form-group\">\n                        <label asp-for=\"Add.Max\" class=\"form-label\"></label>\n                        <input asp-for=\"Add.Max\" class=\"form-control\" type=\"number\" inputmode=\"numeric\" min=\"1\" max=\"@int.MaxValue\" style=\"max-width:16ch;\"/>\n                        <span asp-validation-for=\"Add.Max\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    \n        <div class=\"form-group\">\n            <button type=\"submit\" name=\"command\" value=\"add\" class=\"btn btn-primary\">Save</button>\n        </div>\n    </div>\n    \n    @if (Model.Items.Any())\n    {\n        <div class=\"row\">\n            <div class=\"col\">\n                <table class=\"table table-hover\">\n                    <thead>\n                    <tr>\n                        <th>Address</th>\n                        <th>Settings</th>\n                        <th class=\"text-end\">Actions</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    @for (var index = 0; index < Model.Items.Count; index++)\n                    {\n                        <input asp-for=\"Items[index].CurrencyCode\" type=\"hidden\"/>\n                        <input asp-for=\"Items[index].Min\" type=\"hidden\"/>\n                        <input asp-for=\"Items[index].Max\" type=\"hidden\"/>\n                        <input asp-for=\"Items[index].Username\" type=\"hidden\"/>\n                        var address = $\"{Model.Items[index].Username}@{Context.Request.Host.ToUriComponent()}\";\n                        <tr>\n                            <td>\n                                <div class=\"input-group\" data-clipboard=\"@address\">\n                                    <input type=\"text\" class=\"form-control copy-cursor lightning-address-value\"  readonly=\"readonly\" value=\"@address\"/>\n                                    <button type=\"button\" class=\"btn btn-outline-secondary\" data-clipboard-confirm>Copy</button>\n                                </div>\n\n                            </td>\n                            <td class=\"settings-holder align-middle\">\n                                @if (Model.Items[index].Min.HasValue)\n                                {\n                                    <span>@Safe.Raw($\"{Model.Items[index].Min} min sats\")</span>\n                                }\n                                @if (Model.Items[index].Max.HasValue)\n                                {\n                                    <span> @Safe.Raw($\"{Model.Items[index].Max} max sats\")</span>\n                                }\n                                @if (!string.IsNullOrEmpty(Model.Items[index].CurrencyCode))\n                                {\n                                    <span> @Safe.Raw($\"tracked in {Model.Items[index].CurrencyCode}\")</span>\n                                }\n                            </td>\n                            <td class=\"text-end\">\n                                <button type=\"submit\" title=\"Remove\" name=\"command\" value=\"@($\"remove:{Model.Items[index].Username}\")\"\n                                        class=\"btn btn-link px-0 remove\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The Lightning Address <strong>@address</strong> will be removed.\" data-confirm-input=\"REMOVE\">\n                                    Remove\n                                </button>\n                            </td>\n                        </tr>\n                    }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    }\n    else\n    {\n        <p class=\"text-secondary mt-3\">\n            There are no Lightning Addresses yet.\n        </p>\n    }\n</form>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Remove Lightning Address\", \"This Lightning Address will be removed.\", \"Remove\"))\" />\n", "@namespace BTCPayServer.Client\n@using BTCPayServer.Abstractions.Models\n@model BTCPayServer.Controllers.UIManageController.ApiKeysViewModel\n@{\n    ViewData.SetActivePage(ManageNavPages.APIKeys, \"API Keys\");\n}\n\n<div class=\"row\">\n    <div class=\"col-xl-10 col-xxl-constrain\">\n        <div class=\"d-flex align-items-center justify-content-between mb-3\">\n            <h3 class=\"mb-0\">@ViewData[\"Title\"]</h3>\n            <a class=\"btn btn-primary\" asp-action=\"AddApiKey\" id=\"AddApiKey\">\n                <span class=\"fa fa-plus\"></span>\n                Generate Key\n            </a>\n        </div>\n        <p>\n            The <a asp-controller=\"UIHome\" asp-action=\"SwaggerDocs\" target=\"_blank\">BTCPay Server Greenfield API</a> offers programmatic access to your instance. You can manage your BTCPay\n            Server (e.g. stores, invoices, users) as well as automate workflows and integrations (see <a href=\"https://docs.btcpayserver.org/Development/GreenFieldExample/\" rel=\"noreferrer noopener\">use case examples</a>).\n            For that you need the API keys, which can be generated here. Find more information in the <a href=\"@Url.Action(\"SwaggerDocs\", \"UIHome\")#section/Authentication\" target=\"_blank\" rel=\"noreferrer noopener\">API authentication docs</a>.\n        </p>\n\n        @if (Model.ApiKeyDatas.Any())\n        {\n            <table class=\"table table-lg\">\n                <thead>\n                    <tr>\n                        <th>Label</th>\n                        <th class=\"w-125px\">Key</th>\n                        <th>Permissions</th>\n                        <th class=\"text-end\">Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    @{\n                        var index = 0;\n                    }\n                    @foreach (var keyData in Model.ApiKeyDatas)\n                    {\n                        <tr>\n                            <td>@keyData.Label</td>\n                            <td>\n                                <code class=\"hide-when-js\">@keyData.Id</code>\n                                <a class=\"only-for-js\" data-reveal-btn>Click to reveal</a>\n                                <div hidden>\n                                    <code data-api-key>@keyData.Id</code>\n                                    <a class=\"mt-2\" data-clipboard-confirm>\n                                        Copy to clipboard\n                                    </a>\n                                </div>\n                            </td>\n                            <td>\n                                @{\n                                    var permissions = keyData.GetBlob().Permissions;\n                                }\n                                @if (!permissions.Any())\n                                {\n                                    <span class=\"text-warning\">No permissions</span>\n                                }\n                                else\n                                {\n                                    <ul>\n                                        @foreach (var permission in Permission.ToPermissions(permissions).Select(c => c.ToString()).Distinct().ToArray())\n                                        {\n                                            <li>\n                                                <code class=\"text-break\">@permission</code>\n                                            </li>\n                                        }\n                                    </ul>\n                                }\n                            </td>\n                            <td class=\"text-end\">\n                                <a asp-action=\"DeleteAPIKey\" asp-route-id=\"@keyData.Id\" asp-controller=\"UIManage\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"Any application using the API key <strong>@(keyData.Label ?? keyData.Id)<strong> will immediately lose access.\" data-confirm-input=\"DELETE\">Delete</a>\n                                <span>-</span>\n                                <button type=\"button\" class=\"btn btn-link only-for-js p-0\" data-qr=\"@index\">Show QR</button>\n                            </td>\n                        </tr>\n                        index++;\n                    }\n                </tbody>\n            </table>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete API key\", \"Any application using the API key will immediately lose access.\", \"Delete\"))\" />\n\n<partial name=\"ShowQR\" />\n\n@section PageHeadContent {\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n}\n@section PageFootContent {\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <script>\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            $(\"[data-reveal-btn]\").on(\"click\", function (){\n                var $revealButton = $(this);\n                $revealButton.attr(\"hidden\", \"true\");\n\n                var $apiKeyContainer = $revealButton.next(\"[hidden]\");\n                $apiKeyContainer.removeAttr(\"hidden\");\n\n                (function setupCopyToClipboardButton() {\n                    var $clipboardBtn = $apiKeyContainer.children(\"[data-clipboard-confirm]\");\n                    var apiKey = $apiKeyContainer.children(\"[data-api-key]\").text().trim();\n                    $clipboardBtn.attr(\"data-clipboard\", apiKey);\n                    $clipboardBtn.click(window.copyToClipboard);\n                })();\n            });\n\n            const apiKeys = @Safe.Json(Model.ApiKeyDatas.Select(data => new\n                          {\n                              ApiKey = data.Id,\n                              Host = Context.Request.GetAbsoluteRoot()\n                          }));\n            const qrApp = initQRShow({ title: \"API Key QR\" });\n            delegate(\"click\", \"button[data-qr]\", e => {\n                e.preventDefault();\n                const { qr } = e.target.dataset;\n                const data = apiKeys[qr];\n                qrApp.showData(JSON.stringify(data));\n            });\n        });\n    </script>\n}\n", "@using Fido2NetLib\n@using BTCPayServer.Abstractions.Models\n@model TwoFactorAuthenticationViewModel\n@{\n    ViewData.SetActivePage(ManageNavPages.TwoFactorAuthentication, \"Two-Factor Authentication\");\n}\n<h3 class=\"mb-3\">@ViewData[\"Title\"]</h3>\n\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <p>\n            Two-Factor Authentication (2FA) is an additional measure to protect your account.\n            In addition to your password you will be asked for a second proof on login.\n            This can be provided by an app (such as Google or Microsoft Authenticator)\n            or a security device (like a Yubikey or your hardware wallet supporting FIDO2).\n        </p>\n\n        <h4 class=\"mb-3\">App-based 2FA</h4>\n\n        @if (Model.Is2faEnabled)\n        {\n            if (Model.RecoveryCodesLeft == 0)\n            {\n                <div class=\"alert alert-danger\">\n                    <h4 class=\"alert-heading mb-3\">\n                        <span class=\"fa fa-warning\"></span>\n                        You have no recovery codes left.\n                    </h4>\n                    <p class=\"mb-0\">You must <a asp-action=\"GenerateRecoveryCodes\" class=\"alert-link\">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>\n                </div>\n            }\n            else if (Model.RecoveryCodesLeft == 1)\n            {\n                <div class=\"alert alert-danger\">\n                    <h4 class=\"alert-heading mb-3\">\n                        <span class=\"fa fa-warning\"></span>\n                        You only have 1 recovery code left.\n                    </h4>\n                    <p class=\"mb-0\">You can <a asp-action=\"GenerateRecoveryCodes\" class=\"alert-link\">generate a new set of recovery codes</a>.</p>\n                </div>\n            }\n            else if (Model.RecoveryCodesLeft <= 3)\n            {\n                <div class=\"alert alert-warning\">\n                    <h4 class=\"alert-heading mb-3\">\n                        <span class=\"fa fa-warning\"></span>\n                        You only have @Model.RecoveryCodesLeft recovery codes left.\n                    </h4>\n                    <p class=\"mb-0\">You should <a asp-action=\"GenerateRecoveryCodes\" class=\"alert-link\">generate a new set of recovery codes</a>.</p>\n                </div>\n            }\n        }\n\n        <div class=\"list-group mb-3\">\n            @if (Model.Is2faEnabled)\n            {\n                <a asp-action=\"Disable2fa\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Disable two-factor authentication (2FA)\" data-description=\"Disabling 2FA does not change the keys used in the authenticator apps. If you wish to change the key used in an authenticator app you should reset your authenticator keys.\" data-confirm=\"Disable\" data-confirm-input=\"DISABLE\">\n                    <div>\n                        <h5>Disable 2FA</h5>\n                        <p class=\"mb-0 me-3\">Re-enabling will not require you to reconfigure your app.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n                <a asp-action=\"GenerateRecoveryCodes\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Reset recovery codes\" data-description=\"Your existing recovery codes will no longer be valid!\" data-confirm=\"Reset\" data-confirm-input=\"RESET\">\n                    <div>\n                        <h5>Reset recovery codes</h5>\n                        <p class=\"mb-0 me-3\">Regenerate your 2FA recovery codes.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n                <a asp-action=\"ResetAuthenticator\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Reset authenticator app\" data-description=\"This process disables 2FA until you verify your authenticator app and will also reset your 2FA recovery codes. If you do not complete your authenticator app configuration you may lose access to your account.\" data-confirm=\"Reset\" data-confirm-input=\"RESET\">\n                    <div>\n                        <h5>Reset app</h5>\n                        <p class=\"mb-0 me-3\">Invalidates the current authenticator configuration. Useful if you believe your authenticator settings were compromised.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n                <a asp-action=\"EnableAuthenticator\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\">\n                    <div>\n                        <h5>Configure app</h5>\n                        <p class=\"mb-0 me-3\">Display the key or QR code to configure an authenticator app with your current setup.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n            }\n            else\n            {\n                <a asp-action=\"EnableAuthenticator\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\">\n                    <div>\n                        <h5>Enable 2FA</h5>\n                        <p class=\"mb-0 me-3\">Using apps such as Google or Microsoft Authenticator.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n            }\n        </div>\n\n        <h4 class=\"mt-4 mb-3\">Security devices</h4>\n\n        @if (Model.Credentials.Any())\n        {\n            <div class=\"list-group mb-3\">\n                @foreach (var device in Model.Credentials)\n                {\n                    var name = string.IsNullOrEmpty(device.Name) ? \"Unnamed security device\" : device.Name;\n                    <div class=\"list-group-item d-flex justify-content-between align-items-center py-3\">\n                        <div class=\"mb-0\">\n                            <h5 class=\"mb-0 w-100\">@name</h5>\n                            @switch (device.Type)\n                            {\n                                case Fido2Credential.CredentialType.FIDO2:\n                                    <span class=\"text-muted\">Security device (FIDO2)</span>\n                                    break;\n                                case Fido2Credential.CredentialType.LNURLAuth:\n                                    <span class=\"text-muted\">Lightning node (LNURL Auth)</span>\n                                    break;\n                            }\n                        </div>\n\n                        @if (device.Type == Fido2Credential.CredentialType.FIDO2)\n                        {\n                            <a asp-controller=\"UIFido2\" asp-action=\"Remove\" asp-route-id=\"@device.Id\" class=\"btn btn-outline-danger\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Remove security device\" data-description=\"Your account will no longer have the security device <strong>@name</strong> as an option for two-factor authentication.\" data-confirm=\"Remove\" data-confirm-input=\"REMOVE\">Remove</a>\n                        }\n                        else if (device.Type == Fido2Credential.CredentialType.LNURLAuth)\n                        {\n                            <a asp-controller=\"UILNURLAuth\" asp-action=\"Remove\" asp-route-id=\"@device.Id\" class=\"btn btn-outline-danger\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Remove Lightning security\" data-description=\"Your account will no longer be linked to the lightning node <strong>@name</strong> as an option for two-factor authentication.\" data-confirm=\"Remove\" data-confirm-input=\"REMOVE\">Remove</a>\n                        }\n                    </div>\n                }\n            </div>\n        }\n\n        <form  asp-action=\"CreateCredential\">\n            <div class=\"input-group\">\n                <input type=\"text\" class=\"form-control\" name=\"Name\" placeholder=\"Security device name\"/>\n                <select asp-items=\"@Html.GetEnumSelectList<Fido2Credential.CredentialType>()\" class=\"form-select w-auto\" name=\"type\"></select>\n                <button id=\"btn-add\" type=\"submit\" class=\"btn btn-primary\">\n                    <span class=\"fa fa-plus\"></span>\n                    Add \n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Two-Factor Authentication\", \"Placeholder\", \"Placeholder\"))\"/>\n", "@using BTCPayServer.Views.Stores\n@using Microsoft.AspNetCore.Mvc.TagHelpers\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@model List<BTCPayServer.PayoutProcessors.UIPayoutProcessorsController.StorePayoutProcessorsView>\n@{\n    ViewData[\"NavPartialName\"] = \"../UIStores/_Nav\";\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    var storeId = Context.GetStoreData().Id;\n    ViewData.SetActivePage(StoreNavPages.PayoutProcessors, \"Payout Processors\", storeId);\n}\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <div class=\"d-flex align-items-center justify-content-between mb-3\">\n            <h3 class=\"mb-0\">@ViewData[\"Title\"]</h3>\n        </div>\n        <p>Payout Processors allow BTCPay Server to handle payouts in an automated way.</p>\n\n        @if (Model.Any())\n        {\n            foreach (var processorsView in Model)\n            {\n                <h4 class=\"mt-5\">@processorsView.Factory.FriendlyName</h4>\n                <table class=\"table table-hover mt-0\">\n                    <thead>\n                    <tr>\n                        <th>Payment Method</th>\n                        <th class=\"text-end\">Actions</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    @foreach (var conf in processorsView.Configured)\n                    {\n                        <tr>\n                            <td>\n                                @conf.Key.ToPrettyString()\n                            </td>\n                            <td class=\"text-end\">\n                                @if (conf.Value is null)\n                                {\n                                    <a href=\"@processorsView.Factory.ConfigureLink(storeId, conf.Key, Context.Request)\">Configure</a>\n                                }\n                                else\n                                {\n                                    <a href=\"@processorsView.Factory.ConfigureLink(storeId, conf.Key, Context.Request)\">Modify</a>\n                                    <span>-</span>\n                                    <a asp-action=\"Remove\" asp-route-storeId=\"@storeId\" asp-route-id=\"@conf.Value.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The @processorsView.Factory.FriendlyName for @conf.Key.CryptoCode will be removed from your store.\">Remove</a>\n                                }\n                            </td>\n                        </tr>\n                    }\n                    </tbody>\n                </table>\n            }\n        }\n        else\n        {\n            <p class=\"text-secondary mt-3\">\n                There are no processors available.\n            </p>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete payout processor\", \"This payout processor will be removed from this store.\", \"Delete\"))\" />\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\"/>\n}\n", "@using BTCPayServer.Abstractions.Models\n@model BTCPayServer.Models.ServerViewModels.DynamicDnsViewModel[]\n@{\n    ViewData.SetActivePage(ServerNavPages.Services, \"Dynamic DNS Settings\");\n}\n\n<div class=\"row\">\n    <div class=\"col-md-8\">\n        <div class=\"d-sm-flex align-items-center justify-content-between mb-3\">\n            <h3 class=\"mb-0\">\n                @ViewData[\"Title\"]\n                <small>\n                    <a href=\"https://docs.btcpayserver.org/Apps/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                </small>\n            </h3>\n            <form method=\"post\" asp-action=\"DynamicDnsService\">\n                <button id=\"AddDynamicDNS\" class=\"btn btn-primary mt-2\" type=\"submit\"><span class=\"fa fa-plus\"></span> Add service</button>\n            </form>\n        </div>\n\n        <div class=\"form-group\">\n            <p>\n                Dynamic DNS allows you to have a stable DNS name pointing to your server, even if your IP address changes regulary.\n                This is recommended if you are hosting BTCPay Server at home and wish to have a clearnet domain to access your server.\n            </p>\n            <p>\n                Note that you need to properly configure your NAT and BTCPay Server installation to get the HTTPS certificate. \n                See the documentation for <a href=\"https://docs.btcpayserver.org/Deployment/DynamicDNS/\" target=\"_blank\" rel=\"noreferrer noopener\">more information</a>.\n            </p>\n        </div>\n        \n        @if (Model.Any())\n        {\n            <table class=\"table table-sm table-responsive-md\">\n                <thead>\n                <tr>\n                    <th>Hostname</th>\n                    <th>Last updated</th>\n                    <th class=\"text-center\">Enabled</th>\n                    <th class=\"text-end\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                @foreach (var service in Model)\n                {\n                    <tr>\n                        <td>@service.Settings.Hostname</td>\n                        <td>@service.LastUpdated</td>\n                        <td class=\"text-center\">\n                            @if (service.Settings.Enabled)\n                            {\n                                <span class=\"text-success fa fa-check\"></span>\n                            }\n                            else\n                            {\n                                <span class=\"text-danger fa fa-times\"></span>\n                            }\n                        </td>\n                        <td class=\"text-end\">\n                            <a asp-action=\"DynamicDnsService\" asp-route-hostname=\"@service.Settings.Hostname\">Edit</a>\n                            <span> - </span>\n                            <a asp-action=\"DeleteDynamicDnsService\" asp-route-hostname=\"@service.Settings.Hostname\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"Deleting the dynamic DNS service for <strong>@service.Settings.Hostname</strong> means your BTCPay Server will stop updating the associated DNS record periodically.\" data-confirm-input=\"DELETE\">Delete</a>\n                        </td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n        }\n        else\n        {\n            <p class=\"text-secondary mt-3\">\n                There are no dynamic DNS services yet.\n            </p>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete dynamic DNS service\", \"Deleting the dynamic DNS service means your BTCPay Server will stop updating the associated DNS record periodically.\", \"Delete\"))\" />\n\n", "@using BTCPayServer.Abstractions.Models\n@model UsersViewModel\n@{\n    ViewData.SetActivePage(ServerNavPages.Users);\n    var nextUserEmailSortOrder = (string)ViewData[\"NextUserEmailSortOrder\"];\n    String userEmailSortOrder = null;\n    switch (nextUserEmailSortOrder)\n    {\n        case \"asc\":\n            userEmailSortOrder = \"desc\";\n            break;\n        case \"desc\":\n            userEmailSortOrder = \"asc\";\n            break;\n    }\n\n    var sortIconClass = \"fa-sort\";\n    if (userEmailSortOrder != null)\n    {\n        sortIconClass = $\"fa-sort-alpha-{userEmailSortOrder}\";\n    }\n\n    var sortByDesc = \"Sort by descending...\";\n    var sortByAsc = \"Sort by ascending...\";\n}\n\n<div class=\"d-flex align-items-center justify-content-between mb-3\">\n    <h3 class=\"mb-0\">@ViewData[\"Title\"]</h3>\n    <a asp-action=\"CreateUser\" class=\"btn btn-primary\" role=\"button\" id=\"CreateUser\">\n        <span class=\"fa fa-plus\"></span>\n        Add User\n    </a>\n</div>\n\n<form asp-action=\"ListUsers\" asp-route-sortOrder=\"@(userEmailSortOrder)\" style=\"max-width:640px\">\n    <div class=\"input-group\">\n        <input asp-for=\"SearchTerm\" class=\"form-control\" placeholder=\"Search by email...\" />\n        <button type=\"submit\" class=\"btn btn-secondary\" title=\"Search by email\">\n            <span class=\"fa fa-search\"></span> Search\n        </button>\n    </div>\n    <span asp-validation-for=\"SearchTerm\" class=\"text-danger\"></span>\n</form>\n\n<div class=\"table-responsive\">\n    <table class=\"table table-hover\">\n        <thead>\n        <tr>\n            <th>\n                <a\n                    asp-action=\"ListUsers\"\n                    asp-route-sortOrder=\"@(nextUserEmailSortOrder ?? \"asc\")\"\n                    class=\"text-nowrap\"\n                    title=\"@(nextUserEmailSortOrder == \"desc\" ? sortByAsc : sortByDesc)\"\n                >\n                    Email\n                    <span class=\"fa @(sortIconClass)\" />\n                </a>\n            </th>\n            <th >Created</th>\n            <th class=\"text-center\">Verified</th>\n            <th class=\"text-center\">Enabled</th>\n            <th class=\"text-end\">Actions</th>\n        </tr>\n        </thead>\n        <tbody>\n        @foreach (var user in Model.Users)\n        {\n            <tr>\n                <td class=\"d-flex align-items-center\">\n                    <span class=\"me-2\">@user.Email</span>\n                    @foreach (var role in user.Roles)\n                    {\n                        <span class=\"badge bg-info\">@Model.Roles[role]</span>\n                    }\n                </td>\n                <td>@user.Created?.ToBrowserDate()</td>\n                <td class=\"text-center\">\n                    @if (user.Verified)\n                    {\n                        <span class=\"text-success fa fa-check\"></span>\n                    }\n                    else\n                    {\n                        <span class=\"text-danger fa fa-times\"></span>\n                    }\n                </td>\n                <td class=\"text-center\">\n                    @if (!user.Disabled)\n                    {\n                        <span class=\"text-success fa fa-check\" title=\"User is enabled\"></span>\n                    }\n                    else\n                    {\n                        <span class=\"text-danger fa fa-times\" title=\"User is disabled\"></span>\n                    }\n                </td>\n                <td class=\"text-end\">\n                    @if (!user.Verified && !user.Disabled) {\n                        <a asp-action=\"SendVerificationEmail\" asp-route-userId=\"@user.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"This will send a verification email to <strong>@user.Email</strong>.\">Resend verification email</a>\n                        <span>-</span>\n                    }\n                    <a asp-action=\"User\" asp-route-userId=\"@user.Id\">Edit</a> <span> - </span> <a asp-action=\"DeleteUser\" asp-route-userId=\"@user.Id\">Remove</a>\n                    - <a asp-action=\"ToggleUser\"\n                         asp-route-enable=\"@user.Disabled\"\n                         asp-route-userId=\"@user.Id\">\n                        @(user.Disabled ? \"Enable\" : \"Disable\")\n                    </a>\n                </td>\n            </tr>\n        }\n        </tbody>\n    </table>\n</div>\n\n<vc:pager view-model=\"Model\"></vc:pager>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Send verification email\", $\"This will send a verification email to the user.\", \"Send\"))\" />\n", "@using BTCPayServer.Views.Stores\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@using BTCPayServer.Client\n@using BTCPayServer.Client.Models\n@using ExchangeSharp\n@model BTCPayServer.Models.WalletViewModels.PullPaymentsModel\n@{\n    ViewData.SetActivePage(StoreNavPages.PullPayments, \"Pull Payments\", Context.GetStoreData().Id);\n    var nextStartDateSortOrder = (string)ViewData[\"NextStartSortOrder\"];\n    string startDateSortOrder = null;\n    switch (nextStartDateSortOrder)\n    {\n        case \"asc\":\n            startDateSortOrder = \"desc\";\n            break;\n        case \"desc\":\n            startDateSortOrder = \"asc\";\n            break;\n    }\n\n    var sortIconClass = \"fa-sort\";\n    if (startDateSortOrder != null)\n    {\n        sortIconClass = $\"fa-sort-alpha-{startDateSortOrder}\";\n    }\n\n    var sortByDesc = \"Sort by descending...\";\n    var sortByAsc = \"Sort by ascending...\";\n}\n\n@section PageHeadContent {\n    <style>\n        .tooltip-inner {\n            text-align: left;\n        }\n    </style>\n}\n\n<div class=\"sticky-header-setup\"></div>\n<div class=\"sticky-header d-flex align-items-center justify-content-between\">\n    <h2 class=\"mb-0\">\n        @ViewData[\"Title\"]\n        <small>\n            <a href=\"https://docs.btcpayserver.org/PullPayments/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n            </a>\n        </small>\n    </h2>\n    <a permission=\"@Policies.CanModifyStoreSettings\" asp-action=\"NewPullPayment\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\" class=\"btn btn-primary\" role=\"button\" id=\"NewPullPayment\">\n        <span class=\"fa fa-plus\"></span> Create Pull Payment\n    </a>\n</div>\n\n<partial name=\"_StatusMessage\" />\n\n<nav id=\"SectionNav\" class=\"mb-3\">\n    <div class=\"nav\">\n        @foreach (var state in Enum.GetValues(typeof(PullPaymentState)).Cast<PullPaymentState>())\n        {\n            <a id=\"@state-view\"\n                asp-action=\"PullPayments\"\n                asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\"\n                asp-route-pullPaymentState=\"@state\"\n                class=\"nav-link @(state == Model.ActiveState ? \"active\" : \"\")\" role=\"tab\">@state</a>\n        }\n    </div>\n</nav>\n\n@if (Model.PullPayments.Any())\n{\n    @foreach (var pp in Model.PullPayments)\n    {\n        <script id=\"tooptip_template_@pp.Id\" type=\"text/template\">\n            <span>Awaiting:&nbsp;<span class=\"float-end\">@pp.Progress.AwaitingFormatted</span></span>\n            <br />\n            <span>Completed:&nbsp;<span class=\"float-end\">@pp.Progress.CompletedFormatted</span></span>\n            <br />\n            <span>Limit:&nbsp;<span class=\"float-end\">@pp.Progress.LimitFormatted</span></span>\n            @if (pp.Progress.ResetIn != null)\n            {\n                <br />\n                <span>Resets in:&nbsp;<span class=\"float-end\">@pp.Progress.ResetIn</span></span>\n            }\n            @if (pp.Progress.EndIn != null)\n            {\n                <br />\n                <span>Expires in:&nbsp;<span class=\"float-end\">@pp.Progress.EndIn</span></span>\n            }\n        </script>\n    }\n    <table class=\"table table-hover table-responsive-lg\">\n        <thead class=\"thead-inverse\">\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">\n                    <a asp-action=\"PullPayments\"\n                       asp-route-sortOrder=\"@(nextStartDateSortOrder ?? \"asc\")\"\n                       asp-route-pullPaymentState=\"@Model.ActiveState\"\n                       class=\"text-nowrap\"\n                       title=\"@(nextStartDateSortOrder == \"desc\" ? sortByAsc : sortByDesc)\">\n                        Start\n                        <span class=\"fa @(sortIconClass)\"></span>\n                    </a>\n                </th>\n                <th scope=\"col\">Automatically Approved</th>\n                <th scope=\"col\">Refunded</th>\n                <th scope=\"col\" class=\"text-end\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n        @foreach (var pp in Model.PullPayments)\n        {\n            <tr>\n                <td>\n                    <a asp-action=\"EditPullPayment\"\n                       asp-controller=\"UIPullPayment\"\n                       asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\"\n                       asp-route-pullPaymentId=\"@pp.Id\">\n                        @pp.Name\n                    </a>\n                </td>\n                <td>@pp.StartDate.ToBrowserDate()</td>\n                <td>@pp.AutoApproveClaims</td>\n                <td class=\"align-middle\">\n                    <div class=\"progress ppProgress\" data-pp=\"@pp.Id\" data-bs-toggle=\"tooltip\" data-bs-html=\"true\">\n                        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"@pp.Progress.CompletedPercent\"\n                             aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width:@(pp.Progress.CompletedPercent)%;\">\n                        </div>\n                        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"@pp.Progress.AwaitingPercent\"\n                             aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"background-color:orange; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width:@(pp.Progress.AwaitingPercent)%;\">\n                        </div>\n                    </div>\n                </td>\n                <td class=\"text-end\">\n                    <a class=\"pp-payout\"\n                       asp-action=\"Payouts\"\n                       asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\"\n                       asp-route-pullPaymentId=\"@pp.Id\">\n                        Payouts\n                    </a>\n                    @if (!pp.Archived)\n                    {\n                        <span permission=\"@Policies.CanModifyStoreSettings\"> - </span>\n                        <a asp-action=\"ArchivePullPayment\"\n                           permission=\"@Policies.CanModifyStoreSettings\"\n                           asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\"\n                           asp-route-pullPaymentId=\"@pp.Id\"\n                           data-bs-toggle=\"modal\"\n                           data-bs-target=\"#ConfirmModal\"\n                           data-description=\"Do you really want to archive the pull payment <strong>@pp.Name</strong>?\">\n                            Archive\n                        </a>\n                    }\n                    <span> - </span>\n                    <a asp-action=\"ViewPullPayment\"\n                       asp-controller=\"UIPullPayment\"\n                       asp-route-pullPaymentId=\"@pp.Id\">\n                        View\n                    </a>\n                </td>\n            </tr>\n        }\n        </tbody>\n    </table>\n\n    <vc:pager view-model=\"Model\"/>\n\n    <partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Archive pull payment\", \"Do you really want to archive the pull payment?\", \"Archive\"))\"/>\n\n    @section PageFootContent {\n        <script>\n         const ppProgresses = document.getElementsByClassName(\"ppProgress\");\n            for (var i = 0; i < ppProgresses.length; i++) {\n                var pp = ppProgresses[i];\n                var ppId = pp.getAttribute(\"data-pp\");\n                var template = document.getElementById(\"tooptip_template_\" + ppId);\n                pp.setAttribute(\"title\", template.innerHTML);\n            }\n        </script>\n    }\n}\nelse\n{\n    <p class=\"text-secondary mt-4\">\n        There are no @Model.ActiveState.ToStringLowerInvariant() pull payments yet.\n    </p>\n}\n", "@using BTCPayServer.Abstractions.Models\n@using BTCPayServer.TagHelpers\n@using Microsoft.AspNetCore.Mvc.TagHelpers\n@using BTCPayServer.Abstractions.Contracts\n@inject IFileService FileService;\n@model GeneralSettingsViewModel\n@{\n\tLayout = \"../Shared/_NavLayout.cshtml\";\n\tViewData.SetActivePage(StoreNavPages.General, \"General\", Context.GetStoreData().Id);\n\tvar canUpload = await FileService.IsAvailable();\n}\n\n<div class=\"row\">\n    <div class=\"col-xxl-constrain col-xl-8\">\n        @if (!ViewContext.ModelState.IsValid)\n        {\n            <div asp-validation-summary=\"All\" class=\"text-danger\"></div>\n        }\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            <h3 class=\"mb-3\">General</h3>\n            <div class=\"form-group\">\n                <label asp-for=\"Id\" class=\"form-label\"></label>\n                <input asp-for=\"Id\" readonly class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"StoreName\" class=\"form-label\"></label>\n                <input asp-for=\"StoreName\" class=\"form-control\" />\n                <span asp-validation-for=\"StoreName\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"StoreWebsite\" class=\"form-label\"></label>\n                <input asp-for=\"StoreWebsite\" class=\"form-control\" />\n                <span asp-validation-for=\"StoreWebsite\" class=\"text-danger\"></span>\n            </div>\n            \n            <h3 class=\"mt-5 mb-3\">Branding</h3>\n            <div class=\"form-group\">\n                <div class=\"d-flex align-items-center justify-content-between gap-2\">\n                    <label asp-for=\"LogoFile\" class=\"form-label\"></label>\n                    @if (!string.IsNullOrEmpty(Model.LogoFileId))\n                    {\n                        <button type=\"submit\" class=\"btn btn-link p-0 text-danger\" name=\"RemoveLogoFile\" value=\"true\">\n                            <span class=\"fa fa-times\"></span> Remove\n                        </button>\n                    }\n                </div>\n                @if (canUpload)\n                {\n                    <div class=\"d-flex align-items-center gap-3\">\n                        <input asp-for=\"LogoFile\" type=\"file\" class=\"form-control flex-grow\">\n                        @if (!string.IsNullOrEmpty(Model.LogoFileId))\n                        {\n                            <img src=\"@(await FileService.GetFileUrl(Context.Request.GetAbsoluteRootUri(), Model.LogoFileId))\" alt=\"@Model.StoreName\" class=\"rounded-circle\" style=\"width:2.1rem;height:2.1rem;\"/>\n                        }\n                    </div>\n                    <span asp-validation-for=\"LogoFile\" class=\"text-danger\"></span>\n                    <div class=\"form-text\">\n                        Please upload an image with square dimension, as it will be displayed in 1:1 format and circular.\n                        Size should be around 100\u2715100px.\n                    </div>\n                }\n                else\n                {\n                    <input asp-for=\"LogoFile\" type=\"file\" class=\"form-control\" disabled>\n                    <div class=\"form-text\">In order to upload a logo, a <a asp-controller=\"UIServer\" asp-action=\"Files\">file storage</a> must be configured.</div>\n                }\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"BrandColor\" class=\"form-label\"></label>\n                <div class=\"input-group\">\n                    <input id=\"BrandColorInput\" class=\"form-control form-control-color flex-grow-0\" type=\"color\" style=\"width:3rem\" aria-describedby=\"BrandColorValue\" value=\"@Model.BrandColor\" />\n                    <input asp-for=\"BrandColor\" class=\"form-control form-control-color flex-grow-0 font-monospace\" pattern=\"@ColorPalette.Pattern\" style=\"width:5.5rem\" />\n                </div>\n                <span asp-validation-for=\"BrandColor\" class=\"text-danger\"></span>\n            </div>\n            \n            <h3 class=\"mt-5 mb-3\">Payment</h3>\n            <div class=\"form-group\">\n                <label asp-for=\"DefaultCurrency\" class=\"form-label\"></label>\n                <input asp-for=\"DefaultCurrency\" class=\"form-control w-auto\" currency-selection />\n                <span asp-validation-for=\"DefaultCurrency\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group d-flex align-items-center\">\n                <input asp-for=\"AnyoneCanCreateInvoice\" type=\"checkbox\" class=\"btcpay-toggle me-3\"/>\n                <label asp-for=\"AnyoneCanCreateInvoice\" class=\"form-label mb-0 me-1\"></label>\n                <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#allow-anyone-to-create-invoice\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                </a>\n            </div>\n            <div class=\"form-group mt-4\">\n                <label asp-for=\"NetworkFeeMode\" class=\"form-label\"></label>\n                <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#add-network-fee-to-invoice-vary-with-mining-fees\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                </a>\n                @* For whatever reason wrapping the select with this div fixes this Safari bug: https://github.com/btcpayserver/btcpayserver/issues/3699 *@\n                <div class=\"overflow-hidden\">\n                    <select asp-for=\"NetworkFeeMode\" class=\"form-select w-auto\">\n                        <option value=\"MultiplePaymentsOnly\">... only if the customer makes more than one payment for the invoice</option>\n                        <option value=\"Always\">... on every payment</option>\n                        <option value=\"Never\">Never add network fee</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"InvoiceExpiration\" class=\"form-label\"></label>\n                <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#invoice-expires-if-the-full-amount-has-not-been-paid-after-minutes\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                </a>\n                <div class=\"input-group\">\n                    <input inputmode=\"numeric\" asp-for=\"InvoiceExpiration\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                    <span class=\"input-group-text\">minutes</span>\n                </div>\n                <span asp-validation-for=\"InvoiceExpiration\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"PaymentTolerance\" class=\"form-label\"></label>\n                <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#consider-the-invoice-paid-even-if-the-paid-amount-is-less-than-expected\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                </a>\n                <div class=\"input-group\">\n                    <input inputmode=\"decimal\" asp-for=\"PaymentTolerance\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                    <span class=\"input-group-text\">percent</span>\n                </div>\n                <span asp-validation-for=\"PaymentTolerance\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"BOLT11Expiration\" class=\"form-label\"></label>\n                <div class=\"input-group\">\n                    <input inputmode=\"numeric\" asp-for=\"BOLT11Expiration\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                    <span class=\"input-group-text\">days</span>\n                </div>\n                <span asp-validation-for=\"BOLT11Expiration\" class=\"text-danger\"></span>\n            </div>\n            \n            <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"Save\">Save</button>\n        </form>\n        @if (Model.CanDelete)\n        {\n            <h3 class=\"mt-5 mb-3\">Additional Actions</h3>\n            <div id=\"danger-zone\">\n                <a id=\"DeleteStore\" class=\"btn btn-outline-danger mb-5 mt-2\" asp-action=\"DeleteStore\" asp-route-storeId=\"@Model.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The store <strong>@Model.StoreName</strong> will be permanently deleted. This action will also delete all invoices, apps and data associated with the store.\" data-confirm-input=\"DELETE\">Delete this store</a>\n            </div>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete store\", \"The store will be permanently deleted. This action will also delete all invoices, apps and data associated with the store.\", \"Delete\"))\" />\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\"/>\n    <script>\n    (() => {\n        const $colorValue = document.getElementById('BrandColor');\n        const $colorInput = document.getElementById('BrandColorInput');\n        delegate('change', '#BrandColor', e => {\n            const value = e.target.value;\n\t\t\tif (value.match(@Safe.Json(@ColorPalette.Pattern)))\n\t\t\t\t$colorInput.value = value;\n        });\n        delegate('change', '#BrandColorInput', e => {\n            $colorValue.value = e.target.value;\n        });\n    })();\n    </script>\n}\n", "@using BTCPayServer.Abstractions.Models\n@model TokensViewModel\n@{\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    ViewData.SetActivePage(StoreNavPages.Tokens, \"Access Tokens\", Context.GetStoreData().Id);\n}\n\n@if (Model.StoreNotConfigured)\n{\n    <div class=\"alert alert-warning alert-dismissible mb-5\" role=\"alert\">\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\n            <vc:icon symbol=\"close\" />\n        </button>\n        Warning: No wallet has been linked to your BTCPay Store.<br/>\n        See <a href=\"https://docs.btcpayserver.org/WalletSetup/\" target=\"_blank\" class=\"alert-link\" rel=\"noreferrer noopener\">this link</a> for more information on how to connect your store and wallet.\n    </div>\n}\n\n<div class=\"row\">\n    <div class=\"col-xxl-constrain col-xl-8\">\n        <div class=\"d-flex align-items-center justify-content-between mb-3\">\n            <h3 class=\"mb-0\">@ViewData[\"Title\"]</h3>\n            <a id=\"CreateNewToken\" asp-action=\"CreateToken\" class=\"btn btn-primary\" role=\"button\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\">\n                <span class=\"fa fa-plus\"></span>\n                Create Token\n            </a>\n        </div>\n\n        <p>Authorize a public key to access Bitpay compatible Invoice API.\n            <a href=\"https://support.bitpay.com/hc/en-us/articles/115003001183-How-do-I-pair-my-client-and-create-a-token-\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n            </a>\n        </p>\n\n        @if (Model.Tokens.Any())\n        {\n            <table class=\"table table-hover table-responsive-md\">\n                <thead>\n                <tr>\n                    <th>Label</th>\n                    <th class=\"text-end\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                @foreach (var token in Model.Tokens)\n                {\n                    <tr>\n                        <td>@token.Label</td>\n                        <td class=\"text-end\">\n                            <a asp-action=\"ShowToken\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\" asp-route-tokenId=\"@token.Id\">See information</a> - \n                            <a asp-action=\"RevokeToken\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\" asp-route-tokenId=\"@token.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The access token with the label <strong>@token.Label</strong> will be revoked.\" data-confirm-input=\"REVOKE\">Revoke</a>\n                        </td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n        }\n        else\n        {\n            <p class=\"text-secondary mt-3\">\n                No access tokens yet.\n            </p>\n        }\n\n        <h3 class=\"mt-5 mb-3\">Legacy API Keys</h3>\n        <p>Alternatively, you can use the invoice API by including the following HTTP Header in your requests:</p>\n        <p><code>Authorization: Basic @Model.EncodedApiKey</code></p>\n\n        <form method=\"post\" asp-action=\"GenerateAPIKey\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\">\n            <div class=\"form-group\">\n                <label asp-for=\"ApiKey\" class=\"form-label\"></label>\n                <div class=\"d-flex\">\n                    <input asp-for=\"ApiKey\" readonly class=\"form-control\"/>\n                    @if (string.IsNullOrEmpty(Model.ApiKey))\n                    {\n                        <button class=\"btn btn-primary ms-3\" type=\"submit\">Generate</button>\n                    }\n                    else\n                    {\n                        <button class=\"btn btn-danger ms-3\" type=\"submit\" name=\"command\" value=\"revoke\">Revoke</button>\n                        <button class=\"btn btn-primary ms-3\" type=\"submit\">Regenerate</button>\n                    }\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Revoke access token\", \"The access token will be revoked. Do you wish to continue?\", \"Revoke\"))\" />\n", "@using BTCPayServer.Abstractions.Models\n@model StoreUsersViewModel\n@{\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    ViewData.SetActivePage(StoreNavPages.Users, \"Store Users\", Context.GetStoreData().Id);\n}\n\n<div class=\"row\">\n    <div class=\"col-xxl-constrain col-xl-8\">\n        <h3 class=\"mb-3\">@ViewData[\"Title\"]</h3>\n        <p>\n            Give other registered BTCPay Server users access to your store.<br />\n            Guests will not be able to see or modify the store settings.\n        </p>\n\n        @if (!ViewContext.ModelState.IsValid)\n        {\n            <div asp-validation-summary=\"All\" class=\"text-danger\"></div>\n        }\n\n        <form method=\"post\">\n            <div class=\"d-flex\">\n                <div class=\"flex-grow-1\">\n                    <input asp-for=\"Email\" type=\"text\" class=\"form-control\" placeholder=\"user@example.com\">\n                </div>\n                <div class=\"ms-3\">\n                    <select asp-for=\"Role\" class=\"form-select\">\n                        <option value=\"@StoreRoles.Owner\">Owner</option>\n                        <option value=\"@StoreRoles.Guest\">Guest</option>\n                    </select>\n                </div>\n                <div class=\"ms-3\">\n                    <button type=\"submit\" role=\"button\" class=\"btn btn-primary\"><span class=\"fa fa-plus\"></span> Add User</button>\n                </div>\n            </div>\n        </form>\n\n        <div class=\"form-group\">\n            <table class=\"table table-hover table-responsive-md\">\n                <thead>\n                <tr>\n                    <th>Email</th>\n                    <th>Role</th>\n                    <th style=\"text-align:right\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                @foreach (var user in Model.Users)\n                {\n                    <tr>\n                        <td>@user.Email</td>\n                        <td>@user.Role</td>\n                        <td style=\"text-align:right\">\n                            <a asp-action=\"DeleteStoreUser\" asp-route-storeId=\"@Model.StoreId\" asp-route-userId=\"@user.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"This action will prevent <strong>@user.Email</strong> from accessing this store and its settings.\" data-confirm-input=\"REMOVE\">Remove</a>\n                        </td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Remove store user\", \"This action will prevent the user from accessing this store and its settings. Are you sure?\", \"Delete\"))\" />\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\" />\n}\n", "@using NBitcoin.DataEncoders\n@using Newtonsoft.Json\n@using System.Text\n@using BTCPayServer.Abstractions.Models\n@model WalletSettingsViewModel\n@{\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    ViewData[\"NavPartialName\"] = \"../UIWallets/_Nav\";\n    ViewData.SetActivePage(StoreNavPages.OnchainSettings, $\"{Model.CryptoCode} Wallet Settings\", Context.GetStoreData().Id);\n}\n\n@section PageHeadContent {\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n}\n\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <div class=\"mb-5\">\n            <h3 class=\"mb-3\">@ViewData[\"Title\"]</h3>\n            <div class=\"mb-3 d-flex align-items-center\">\n                <span title=\"@Model.Source\" data-bs-toggle=\"tooltip\" class=\"me-3\">@(Model.IsHotWallet ? \"Hot wallet\" : \"Watch-only wallet\")</span>\n                <div class=\"dropdown\">\n                    <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"ActionsDropdownToggle\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Actions\n                    </button>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"ActionsDropdownToggle\">\n                        <a class=\"dropdown-item\" asp-controller=\"UIWallets\" asp-action=\"WalletRescan\" asp-route-walletId=\"@Model.WalletId\" id=\"Rescan\">Rescan wallet for missing transactions</a>\n                        <form method=\"post\" asp-controller=\"UIWallets\" asp-action=\"WalletActions\" asp-route-walletId=\"@Model.WalletId\">\n                            <button name=\"command\" type=\"submit\" class=\"dropdown-item\" value=\"prune\">Prune old transactions from history</button>\n                            @if (User.IsInRole(Roles.ServerAdmin))\n                            {\n                                <button name=\"command\" type=\"submit\" class=\"dropdown-item\" value=\"clear\">Clear all transactions from history</button>\n                            }\n                        </form>\n                        @if (Model.UriScheme == \"bitcoin\")\n                        {\n                            <button type=\"button\" class=\"dropdown-item\" id=\"RegisterWallet\" data-store=\"@Model.StoreName\" data-scheme=\"@Model.UriScheme\" data-url=\"@Url.Action(\"WalletSend\", \"UIWallets\", new {walletId = Model.WalletId, bip21 = \"%s\"})\" hidden>Register wallet for payment links</button>\n                        }\n                        <div class=\"dropdown-divider\"></div>\n                        @if (Model.NBXSeedAvailable)\n                        {\n                            <a asp-action=\"WalletSeed\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\" class=\"dropdown-item\" id=\"ViewSeed\">View seed</a>\n                        }\n                        <a asp-controller=\"UIStores\" asp-action=\"ReplaceWallet\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\"\n                           id=\"ChangeWalletLink\"\n                           class=\"dropdown-item\"\n                           data-bs-toggle=\"modal\"\n                           data-bs-target=\"#ConfirmModal\"\n                           data-title=\"Replace @Model.CryptoCode wallet\"\n                           data-description=\"@ViewData[\"ReplaceDescription\"]\"\n                           data-confirm=\"Setup new wallet\"\n                           data-confirm-input=\"REPLACE\">\n                            Replace wallet\n                        </a>\n                        <form method=\"get\" asp-action=\"DeleteWallet\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\" class=\"d-inline\">\n                            <button type=\"submit\"\n                                    id=\"Delete\"\n                                    class=\"dropdown-item\"\n                                    data-bs-toggle=\"modal\"\n                                    data-bs-target=\"#ConfirmModal\"\n                                    data-title=\"Remove @Model.CryptoCode wallet\"\n                                    data-description=\"@ViewData[\"RemoveDescription\"]\"\n                                    data-confirm=\"Remove\"\n                                    data-confirm-input=\"REMOVE\">Remove wallet</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            \n            <form method=\"post\" asp-action=\"UpdateWalletSettings\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\">\n                <div class=\"form-group my-4\">\n                    <div class=\"d-flex align-items-center\">\n                        <input asp-for=\"Enabled\" type=\"checkbox\" class=\"btcpay-toggle me-2\"/>\n                        <label asp-for=\"Enabled\" class=\"form-label mb-0 me-1\"></label>\n                    </div>\n                    <span asp-validation-for=\"PayJoinEnabled\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"Label\" class=\"form-label\"></label>\n                    <input asp-for=\"Label\" class=\"form-control\" style=\"max-width:24em;\" />\n                    <span asp-validation-for=\"Label\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"DerivationScheme\" class=\"form-label\"></label>\n                    <div class=\"input-group\" data-clipboard=\"@Model.DerivationScheme\">\n                        <input asp-for=\"DerivationScheme\" class=\"form-control\" style=\"cursor:copy\" readonly />\n                        <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                    </div>\n                </div>\n                @if (!string.IsNullOrEmpty(Model.DerivationSchemeInput) && Model.DerivationSchemeInput != Model.DerivationScheme)\n                {\n                    <div class=\"form-group\">\n                        <label asp-for=\"DerivationSchemeInput\" class=\"form-label\"></label>\n                        <div class=\"input-group\" data-clipboard=\"@Model.DerivationSchemeInput\">\n                            <input asp-for=\"DerivationSchemeInput\" class=\"form-control\" style=\"cursor:copy\" readonly/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                        </div>\n                    </div>\n                }\n                @for (var i = 0; i < Model.AccountKeys.Count; i++)\n                {\n                    <h4 class=\"mt-5 mb-3\">Account Key @i</h4>\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center justify-content-between\">\n                            <label asp-for=\"@Model.AccountKeys[i].AccountKey\" class=\"form-label\"></label>\n                            <button type=\"button\" class=\"d-inline-block ms-2 btn text-primary btn-link p-0 mb-2\" data-account-key=\"@i\" title=\"\">\n                                <span class=\"fa fa-qrcode\"></span> Show export QR\n                            </button>\n                        </div>\n                        <div class=\"input-group\" data-clipboard=\"@Model.AccountKeys[i].AccountKey\">\n                            <input asp-for=\"@Model.AccountKeys[i].AccountKey\" class=\"form-control\" style=\"cursor:copy\" readonly/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"form-group col-auto\">\n                            <label asp-for=\"@Model.AccountKeys[i].MasterFingerprint\" class=\"form-label\"></label>\n                            <input asp-for=\"@Model.AccountKeys[i].MasterFingerprint\" class=\"form-control\" style=\"max-width:16ch;\" />\n                        </div>\n                        <div class=\"form-group col-auto\">\n                            <label asp-for=\"@Model.AccountKeys[i].AccountKeyPath\" class=\"form-label\"></label>\n                            <input asp-for=\"@Model.AccountKeys[i].AccountKeyPath\" class=\"form-control\" style=\"max-width:16ch;\" />\n                        </div>\n                    </div>\n                    @if (Model.IsMultiSig)\n                    {\n                        <div class=\"form-check\">\n                            <input asp-for=\"SelectedSigningKey\" class=\"form-check-input\" type=\"radio\" value=\"@Model.AccountKeys[i].AccountKey\"/>\n                            <label asp-for=\"SelectedSigningKey\" class=\"form-check-label\"></label>\n                        </div>\n                    }\n                }\n                <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"SaveWalletSettings\">Save Wallet Settings</button>\n            </form>\n            \n            <h3 class=\"mt-5 mb-4\">Payment</h3>\n            <form method=\"post\" asp-action=\"UpdatePaymentSettings\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\">\n                @if (Model.CanUsePayJoin)\n                {\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center\">\n                            <input asp-for=\"PayJoinEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-2\"/>\n                            <label asp-for=\"PayJoinEnabled\" class=\"form-label mb-0 me-1\"></label>\n                            <a href=\"https://docs.btcpayserver.org/Payjoin/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                            </a>\n                        </div>\n                        <span asp-validation-for=\"PayJoinEnabled\" class=\"text-danger\"></span>\n                    </div>\n                }\n                <div class=\"form-group\">\n                    <label asp-for=\"MonitoringExpiration\" class=\"form-label\"></label>\n                    <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#payment-invalid-if-transactions-fails-to-confirm-minutes-after-invoice-expiration\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                    <div class=\"input-group\">\n                        <input inputmode=\"numeric\" asp-for=\"MonitoringExpiration\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                        <span class=\"input-group-text\">minutes</span>\n                    </div>\n                    <span asp-validation-for=\"MonitoringExpiration\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"SpeedPolicy\" class=\"form-label\"></label>\n                    <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#consider-the-invoice-confirmed-when-the-payment-transaction\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                    <select asp-for=\"SpeedPolicy\" class=\"form-select w-auto\" onchange=\"document.getElementById('unconfirmed-warning').hidden = this.value !== '0';\">\n                        <option value=\"0\">Is unconfirmed</option>\n                        <option value=\"1\">Has at least 1 confirmation</option>\n                        <option value=\"3\">Has at least 2 confirmations</option>\n                        <option value=\"2\">Has at least 6 confirmations</option>\n                    </select>\n                    <div class=\"alert alert-warning my-2\" hidden=\"@(Model.SpeedPolicy != 0)\" id=\"unconfirmed-warning\" role=\"alert\">\n                        Choosing to accept an unconfirmed invoice can lead to double-spending and is strongly discouraged.\n                    </div>\n                    <span asp-validation-for=\"SpeedPolicy\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-check my-1\">\n                    <input asp-for=\"ShowRecommendedFee\" type=\"checkbox\" class=\"form-check-input\"/>\n                    <label asp-for=\"ShowRecommendedFee\" class=\"form-check-label\"></label>\n                    <div class=\"form-text\">Fee will be shown for BTC and LTC onchain payments only.</div>\n                </div>\n                <div class=\"form-group mt-2\">\n                    <label asp-for=\"RecommendedFeeBlockTarget\" class=\"form-label\"></label>\n                    <input inputmode=\"numeric\" asp-for=\"RecommendedFeeBlockTarget\" class=\"form-control\" min=\"1\" style=\"width:8ch\" />\n                    <span asp-validation-for=\"RecommendedFeeBlockTarget\" class=\"text-danger\"></span>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"SavePaymentSettings\">Save Payment Settings</button>\n            </form>\n        </div>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel($\"{Model.CryptoCode} wallet\", \"Change\", \"Update\"))\" />\n<partial name=\"ShowQR\"/>\n\n@section PageFootContent {\n    <script>\n        const wallets = @Safe.Json(Model.AccountKeys.Select(model => Encoders.Hex.EncodeData(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(model, Formatting.None)))))\n        const qrApp = initQRShow({ title: \"Wallet QR\" })\n        \n        delegate('click', '#Delete', event => { event.preventDefault() })\n        \n        delegate('click', 'button[data-account-key]', event => {\n            const { accountKey } = event.target.dataset;\n            qrApp.showData(wallets[parseInt(accountKey)]);\n        })\n        \n        if (navigator.registerProtocolHandler) {\n            document.getElementById('RegisterWallet').removeAttribute('hidden');\n            delegate('click', '#RegisterWallet', event => {\n               const { store, scheme, url } = event.target.dataset\n               const uri = decodeURIComponent(url)\n               navigator.registerProtocolHandler(scheme, uri, `BTCPay Wallet: ${store}`)\n            })\n        } \n    </script>\n    <partial name=\"_ValidationScriptsPartial\"/>\n}\n"], "fixing_code": ["using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Client;\nusing BTCPayServer.Data;\nusing BTCPayServer.Models.AppViewModels;\nusing BTCPayServer.Plugins.Crowdfund.Controllers;\nusing BTCPayServer.Plugins.PointOfSale.Controllers;\nusing BTCPayServer.Services.Apps;\nusing BTCPayServer.Services.Stores;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Rendering;\n\nnamespace BTCPayServer.Controllers\n{\n    [AutoValidateAntiforgeryToken]\n    [Route(\"apps\")]\n    public partial class UIAppsController : Controller\n    {\n        public UIAppsController(\n            UserManager<ApplicationUser> userManager,\n            StoreRepository storeRepository,\n            AppService appService,\n            IHtmlHelper html)\n        {\n            _userManager = userManager;\n            _storeRepository = storeRepository;\n            _appService = appService;\n            Html = html;\n        }\n\n        private readonly UserManager<ApplicationUser> _userManager;\n        private readonly StoreRepository _storeRepository;\n        private readonly AppService _appService;\n\n        public string CreatedAppId { get; set; }\n        public IHtmlHelper Html { get; }\n\n        public class AppUpdated\n        {\n            public string AppId { get; set; }\n            public object Settings { get; set; }\n            public string StoreId { get; set; }\n            public override string ToString()\n            {\n                return string.Empty;\n            }\n        }\n\n        [HttpGet(\"/apps/{appId}\")]\n        public async Task<IActionResult> RedirectToApp(string appId)\n        {\n            var app = await _appService.GetApp(appId, null);\n            if (app is null)\n                return NotFound();\n\n            return app.AppType switch\n            {\n                nameof(AppType.Crowdfund) => RedirectToAction(nameof(UICrowdfundController.ViewCrowdfund), \"UICrowdfund\", new { appId }),\n                nameof(AppType.PointOfSale) => RedirectToAction(nameof(UIPointOfSaleController.ViewPointOfSale), \"UIPointOfSale\", new { appId }),\n                _ => NotFound()\n            };\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpGet(\"/stores/{storeId}/apps\")]\n        public async Task<IActionResult> ListApps(\n            string storeId,\n            string sortOrder = null,\n            string sortOrderColumn = null\n        )\n        {\n            var store = GetCurrentStore();\n            var apps = await _appService.GetAllApps(GetUserId(), false, store.Id);\n\n            if (sortOrder != null && sortOrderColumn != null)\n            {\n                apps = apps.OrderByDescending(app =>\n                {\n                    switch (sortOrderColumn)\n                    {\n                        case nameof(app.AppName):\n                            return app.AppName;\n                        case nameof(app.StoreName):\n                            return app.StoreName;\n                        case nameof(app.AppType):\n                            return app.AppType;\n                        default:\n                            return app.Id;\n                    }\n                }).ToArray();\n\n                switch (sortOrder)\n                {\n                    case \"desc\":\n                        ViewData[$\"{sortOrderColumn}SortOrder\"] = \"asc\";\n                        break;\n                    case \"asc\":\n                        apps = apps.Reverse().ToArray();\n                        ViewData[$\"{sortOrderColumn}SortOrder\"] = \"desc\";\n                        break;\n                }\n            }\n\n            return View(new ListAppsViewModel\n            {\n                Apps = apps\n            });\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpGet(\"/stores/{storeId}/apps/create\")]\n        public IActionResult CreateApp(string storeId)\n        {\n            return View(new CreateAppViewModel\n            {\n                StoreId = GetCurrentStore().Id\n            });\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpPost(\"/stores/{storeId}/apps/create\")]\n        public async Task<IActionResult> CreateApp(string storeId, CreateAppViewModel vm)\n        {\n            var store = GetCurrentStore();\n            vm.StoreId = store.Id;\n\n            if (!Enum.TryParse(vm.SelectedAppType, out AppType appType))\n                ModelState.AddModelError(nameof(vm.SelectedAppType), \"Invalid App Type\");\n\n            if (!ModelState.IsValid)\n            {\n                return View(vm);\n            }\n\n            var appData = new AppData\n            {\n                StoreDataId = store.Id,\n                Name = vm.AppName,\n                AppType = appType.ToString()\n            };\n\n            var defaultCurrency = await GetStoreDefaultCurrentIfEmpty(appData.StoreDataId, null);\n            switch (appType)\n            {\n                case AppType.Crowdfund:\n                    var emptyCrowdfund = new CrowdfundSettings { TargetCurrency = defaultCurrency };\n                    appData.SetSettings(emptyCrowdfund);\n                    break;\n                case AppType.PointOfSale:\n                    var empty = new PointOfSaleSettings { Currency = defaultCurrency };\n                    appData.SetSettings(empty);\n                    break;\n                default:\n                    throw new ArgumentOutOfRangeException();\n            }\n\n            await _appService.UpdateOrCreateApp(appData);\n            TempData[WellKnownTempData.SuccessMessage] = \"App successfully created\";\n            CreatedAppId = appData.Id;\n\n            return appType switch\n            {\n                AppType.PointOfSale => RedirectToAction(nameof(UIPointOfSaleController.UpdatePointOfSale), \"UIPointOfSale\", new { appId = appData.Id }),\n                AppType.Crowdfund => RedirectToAction(nameof(UICrowdfundController.UpdateCrowdfund), \"UICrowdfund\", new { appId = appData.Id }),\n                _ => throw new ArgumentOutOfRangeException()\n            };\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpGet(\"{appId}/delete\")]\n        public IActionResult DeleteApp(string appId)\n        {\n            var app = GetCurrentApp();\n            if (app == null)\n                return NotFound();\n\n            return View(\"Confirm\", new ConfirmModel(\"Delete app\", $\"The app <strong>{Html.Encode(app.Name)}</strong> and its settings will be permanently deleted. Are you sure?\", \"Delete\"));\n        }\n\n        [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n        [HttpPost(\"{appId}/delete\")]\n        public async Task<IActionResult> DeleteAppPost(string appId)\n        {\n            var app = GetCurrentApp();\n            if (app == null)\n                return NotFound();\n\n            if (await _appService.DeleteApp(app))\n                TempData[WellKnownTempData.SuccessMessage] = \"App deleted successfully.\";\n\n            return RedirectToAction(nameof(UIStoresController.Dashboard), \"UIStores\", new { storeId = app.StoreDataId });\n        }\n\n        async Task<string> GetStoreDefaultCurrentIfEmpty(string storeId, string currency)\n        {\n            if (string.IsNullOrWhiteSpace(currency))\n            {\n                currency = (await _storeRepository.FindStore(storeId)).GetStoreBlob().DefaultCurrency;\n            }\n            return currency.Trim().ToUpperInvariant();\n        }\n\n        private string GetUserId() => _userManager.GetUserId(User);\n\n        private StoreData GetCurrentStore() => HttpContext.GetStoreData();\n\n        private AppData GetCurrentApp() => HttpContext.GetAppData();\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Abstractions.Services;\nusing BTCPayServer.Client;\nusing BTCPayServer.Data;\nusing BTCPayServer.Models;\nusing BTCPayServer.Security.Greenfield;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc;\nusing NBitcoin;\nusing NBitcoin.DataEncoders;\n\nnamespace BTCPayServer.Controllers\n{\n    public partial class UIManageController\n    {\n        [HttpGet]\n        public async Task<IActionResult> APIKeys()\n        {\n            return View(new ApiKeysViewModel()\n            {\n                ApiKeyDatas = await _apiKeyRepository.GetKeys(new APIKeyRepository.APIKeyQuery()\n                {\n                    UserId = new[] { _userManager.GetUserId(User) }\n                })\n            });\n        }\n\n        [HttpGet(\"~/api-keys/{id}/delete\")]\n        public async Task<IActionResult> DeleteAPIKey(string id)\n        {\n            var key = await _apiKeyRepository.GetKey(id);\n            if (key == null || key.UserId != _userManager.GetUserId(User))\n            {\n                return NotFound();\n            }\n            return View(\"Confirm\", new ConfirmModel\n            {\n                Title = \"Delete API key\",\n                Description = $\"Any application using the API key <strong>{Html.Encode(key.Label ?? key.Id)}<strong> will immediately lose access.\",\n                Action = \"Delete\",\n                ActionName = nameof(DeleteAPIKeyPost)\n            });\n        }\n\n        [HttpPost(\"~/api-keys/{id}/delete\")]\n        public async Task<IActionResult> DeleteAPIKeyPost(string id)\n        {\n            var key = await _apiKeyRepository.GetKey(id);\n            if (key == null || key.UserId != _userManager.GetUserId(User))\n            {\n                return NotFound();\n            }\n            await _apiKeyRepository.Remove(id, _userManager.GetUserId(User));\n            TempData.SetStatusMessageModel(new StatusMessageModel()\n            {\n                Severity = StatusMessageModel.StatusSeverity.Success,\n                Message = \"API Key removed\"\n            });\n            return RedirectToAction(\"APIKeys\");\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> AddApiKey()\n        {\n            if (!_btcPayServerEnvironment.IsSecure(HttpContext))\n            {\n                TempData.SetStatusMessageModel(new StatusMessageModel()\n                {\n                    Severity = StatusMessageModel.StatusSeverity.Error,\n                    Message = \"Cannot generate api keys while not on https or tor\"\n                });\n                return RedirectToAction(\"APIKeys\");\n            }\n\n            return View(\"AddApiKey\", await SetViewModelValues(new AddApiKeyViewModel()));\n        }\n\n        [HttpGet(\"~/api-keys/authorize\")]\n        public async Task<IActionResult> AuthorizeAPIKey(string[] permissions, string applicationName = null, Uri redirect = null,\n            bool strict = true, bool selectiveStores = false, string applicationIdentifier = null)\n        {\n            if (!_btcPayServerEnvironment.IsSecure(HttpContext))\n            {\n                TempData.SetStatusMessageModel(new StatusMessageModel\n                {\n                    Severity = StatusMessageModel.StatusSeverity.Error,\n                    Message = \"Cannot generate API keys while not on https or using Tor\"\n                });\n                return RedirectToAction(\"APIKeys\");\n            }\n\n            permissions ??= Array.Empty<string>();\n\n            var requestPermissions = Permission.ToPermissions(permissions).ToList();\n\n            if (redirect?.IsAbsoluteUri is false)\n            {\n                redirect = null;\n            }\n\n            var vm = new AuthorizeApiKeysViewModel\n            {\n                RedirectUrl = redirect,\n                Label = applicationName,\n                ApplicationName = applicationName,\n                SelectiveStores = selectiveStores,\n                Strict = strict,\n                Permissions = string.Join(';', requestPermissions),\n                ApplicationIdentifier = applicationIdentifier\n            };\n\n            var existingApiKey = await CheckForMatchingApiKey(requestPermissions, vm);\n            if (existingApiKey != null)\n            {\n                vm.ApiKey = existingApiKey.Id;\n                return View(\"ConfirmAPIKey\", vm);\n            }\n\n            vm = await SetViewModelValues(vm);\n            AdjustVMForAuthorization(vm);\n\n            return View(vm);\n        }\n\n        [HttpPost(\"~/api-keys/authorize\")]\n        public async Task<IActionResult> AuthorizeAPIKey([FromForm] AuthorizeApiKeysViewModel viewModel)\n        {\n            viewModel = await SetViewModelValues(viewModel);\n            AdjustVMForAuthorization(viewModel);\n\n            var ar = HandleCommands(viewModel);\n            if (ar != null)\n            {\n                return ar;\n            }\n\n            for (int i = 0; i < viewModel.PermissionValues.Count; i++)\n            {\n                if (viewModel.PermissionValues[i].Forbidden && viewModel.Strict)\n                {\n                    viewModel.PermissionValues[i].Value = false;\n                    ModelState.AddModelError($\"{viewModel.PermissionValues}[{i}].Value\",\n                        $\"The permission '{viewModel.PermissionValues[i].Title}' is required for this application.\");\n                }\n\n                if (viewModel.PermissionValues[i].StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.Specific &&\n                    !viewModel.SelectiveStores)\n                {\n                    viewModel.PermissionValues[i].StoreMode = AddApiKeyViewModel.ApiKeyStoreMode.AllStores;\n                    ModelState.AddModelError($\"{viewModel.PermissionValues}[{i}].Value\",\n                        $\"The permission '{viewModel.PermissionValues[i].Title}' cannot be store specific for this application.\");\n                }\n            }\n\n            if (!ModelState.IsValid)\n            {\n                return View(viewModel);\n            }\n\n            var command = viewModel.Command.ToLowerInvariant();\n            switch (command)\n            {\n                case \"cancel\":\n                    return RedirectToAction(\"APIKeys\");\n\n                case \"authorize\":\n                case \"confirm\":\n                    var key = command == \"authorize\"\n                        ? await CreateKey(viewModel, (viewModel.ApplicationIdentifier, viewModel.RedirectUrl?.AbsoluteUri))\n                        : await _apiKeyRepository.GetKey(viewModel.ApiKey);\n\n                    if (viewModel.RedirectUrl != null)\n                    {\n                        var permissions = key.GetBlob().Permissions;\n                        var redirectVm = new PostRedirectViewModel()\n                        {\n                            FormUrl = viewModel.RedirectUrl.AbsoluteUri,\n                            FormParameters =\n                            {\n                                { \"apiKey\", key.Id },\n                                { \"userId\", key.UserId },\n                            },\n                        };\n                        foreach (var permission in permissions)\n                        {\n                            redirectVm.FormParameters.Add(\"permissions[]\", permission);\n                        }\n                        return View(\"PostRedirect\", redirectVm);\n                    }\n\n                    TempData.SetStatusMessageModel(new StatusMessageModel\n                    {\n                        Severity = StatusMessageModel.StatusSeverity.Success,\n                        Html = $\"API key generated! <code class='alert-link'>{key.Id}</code>\"\n                    });\n\n                    return RedirectToAction(\"APIKeys\", new { key = key.Id });\n\n                default:\n                    var perms = viewModel.Permissions?.Split(';').ToArray() ?? Array.Empty<string>();\n                    if (perms.Any())\n                    {\n                        var requestPermissions = Permission.ToPermissions(perms).ToList();\n                        var existingApiKey = await CheckForMatchingApiKey(requestPermissions, viewModel);\n                        if (existingApiKey != null)\n                        {\n                            viewModel.ApiKey = existingApiKey.Id;\n                            return View(\"ConfirmAPIKey\", viewModel);\n                        }\n                    }\n                    return View(viewModel);\n            }\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddApiKey(AddApiKeyViewModel viewModel)\n        {\n            await SetViewModelValues(viewModel);\n\n            var ar = HandleCommands(viewModel);\n\n            if (ar != null)\n            {\n                return ar;\n            }\n\n            if (!ModelState.IsValid)\n            {\n                return View(viewModel);\n            }\n\n            var key = await CreateKey(viewModel);\n\n            TempData.SetStatusMessageModel(new StatusMessageModel\n            {\n                Severity = StatusMessageModel.StatusSeverity.Success,\n                Html = $\"API key generated! <code class='alert-link'>{key.Id}</code>\"\n            });\n            return RedirectToAction(\"APIKeys\");\n        }\n\n        private async Task<APIKeyData> CheckForMatchingApiKey(IEnumerable<Permission> requestedPermissions, AuthorizeApiKeysViewModel vm)\n        {\n            if (string.IsNullOrEmpty(vm.ApplicationIdentifier) || vm.RedirectUrl == null)\n            {\n                return null;\n            }\n\n            //check if there is an app identifier that matches and belongs to the current user\n            var keys = await _apiKeyRepository.GetKeys(new APIKeyRepository.APIKeyQuery\n            {\n                UserId = new[] { _userManager.GetUserId(User) }\n            });\n            foreach (var key in keys)\n            {\n                var blob = key.GetBlob();\n                if (blob.ApplicationIdentifier != vm.ApplicationIdentifier || blob.ApplicationAuthority != vm.RedirectUrl.AbsoluteUri)\n                {\n                    continue;\n                }\n\n                var requestedGrouped = requestedPermissions.GroupBy(permission => permission.Policy);\n                var existingGrouped = Permission.ToPermissions(blob.Permissions).GroupBy(permission => permission.Policy);\n\n                //matched the identifier and authority, but we need to check if what the app is requesting in terms of permissions is enough\n                var fail = false;\n                foreach (var requested in requestedGrouped)\n                {\n                    var existing = existingGrouped.SingleOrDefault(grouping => requested.Key == grouping.Key);\n                    if (vm.Strict && existing == null)\n                    {\n                        fail = true;\n                        break;\n                    }\n\n                    if (Policies.IsStorePolicy(requested.Key))\n                    {\n                        if ((vm.SelectiveStores && !existing.Any(p => p.Scope == vm.StoreId)) ||\n                            (!vm.SelectiveStores && existing.Any(p => !string.IsNullOrEmpty(p.Scope))))\n                        {\n                            fail = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (fail)\n                {\n                    continue;\n                }\n\n                //we have a key that is sufficient, redirect to a page to confirm that it's ok to provide this key to the app.\n                return key;\n            }\n\n            return null;\n        }\n\n        private void AdjustVMForAuthorization(AuthorizeApiKeysViewModel vm)\n        {\n            var permissions = vm.Permissions?.Split(';') ?? Array.Empty<string>();\n            var permissionsWithStoreIDs = new List<string>();\n\n            vm.NeedsStorePermission = vm.SelectiveStores && (permissions.Any(Policies.IsStorePolicy) || !vm.Strict);\n\n            // Go over each permission and associated store IDs and join them\n            // so that permission for a specific store is parsed correctly\n            foreach (var permission in permissions)\n            {\n                if (!Policies.IsStorePolicy(permission) || string.IsNullOrEmpty(vm.StoreId))\n                {\n                    permissionsWithStoreIDs.Add(permission);\n                }\n                else\n                {\n                    permissionsWithStoreIDs.Add($\"{permission}:{vm.StoreId}\");\n                }\n            }\n\n            var parsedPermissions = Permission.ToPermissions(permissionsWithStoreIDs.ToArray()).GroupBy(permission => permission.Policy);\n\n            for (var index = vm.PermissionValues.Count - 1; index >= 0; index--)\n            {\n                var permissionValue = vm.PermissionValues[index];\n                var wanted = parsedPermissions.SingleOrDefault(permission =>\n                    permission.Key.Equals(permissionValue.Permission,\n                        StringComparison.InvariantCultureIgnoreCase));\n                if (vm.Strict && !(wanted?.Any() ?? false))\n                {\n                    vm.PermissionValues.RemoveAt(index);\n                    continue;\n                }\n                if (wanted?.Any() ?? false)\n                {\n                    var commandParts = vm.Command?.Split(':', StringSplitOptions.RemoveEmptyEntries) ?? Array.Empty<string>();\n                    var command = commandParts.Length > 1 ? commandParts[1] : null;\n                    var isPerformingAnAction = command == \"change-store-mode\" || command == \"add-store\";\n\n                    // Don't want to accidentally change mode for the user if they are explicitly performing some action\n                    if (isPerformingAnAction)\n                    {\n                        continue;\n                    }\n\n                    // Set the value to true and adjust the other fields based on the policy type\n                    permissionValue.Value = true;\n\n                    if (vm.SelectiveStores && Policies.IsStorePolicy(permissionValue.Permission) &&\n                        wanted.Any(permission => !string.IsNullOrEmpty(permission.Scope)))\n                    {\n                        permissionValue.StoreMode = AddApiKeyViewModel.ApiKeyStoreMode.Specific;\n                        permissionValue.SpecificStores = wanted.Select(permission => permission.Scope).ToList();\n                    }\n                    else\n                    {\n                        permissionValue.StoreMode = AddApiKeyViewModel.ApiKeyStoreMode.AllStores;\n                        permissionValue.SpecificStores = new List<string>();\n                    }\n                }\n            }\n        }\n\n        private IActionResult HandleCommands(AddApiKeyViewModel viewModel)\n        {\n            if (string.IsNullOrEmpty(viewModel.Command))\n            {\n                return null;\n            }\n            var parts = viewModel.Command.Split(':', StringSplitOptions.RemoveEmptyEntries);\n            var permission = parts[0];\n            if (!Policies.IsStorePolicy(permission))\n            {\n                return null;\n            }\n            var permissionValueItem = viewModel.PermissionValues.Single(item => item.Permission == permission);\n            var command = parts[1];\n            var storeIndex = parts.Length == 3 ? parts[2] : null;\n\n            ModelState.Clear();\n            switch (command)\n            {\n                case \"change-store-mode\":\n                    permissionValueItem.StoreMode = permissionValueItem.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.Specific\n                        ? AddApiKeyViewModel.ApiKeyStoreMode.AllStores\n                        : AddApiKeyViewModel.ApiKeyStoreMode.Specific;\n                    // Reset values for \"all stores\" option to their original values\n                    if (permissionValueItem.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.AllStores)\n                    {\n                        permissionValueItem.SpecificStores = new List<string>();\n                        permissionValueItem.Value = true;\n                    }\n\n                    if (permissionValueItem.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.Specific &&\n                        !permissionValueItem.SpecificStores.Any() && viewModel.Stores.Any())\n                    {\n                        permissionValueItem.SpecificStores.Add(null);\n                    }\n                    return View(viewModel);\n\n                case \"add-store\":\n                    permissionValueItem.SpecificStores.Add(null);\n                    return View(viewModel);\n\n                case \"remove-store\":\n                    {\n                        if (storeIndex != null)\n                            permissionValueItem.SpecificStores.RemoveAt(int.Parse(storeIndex,\n                                CultureInfo.InvariantCulture));\n                        return View(viewModel);\n                    }\n            }\n\n            return null;\n        }\n\n        private async Task<APIKeyData> CreateKey(AddApiKeyViewModel viewModel, (string appIdentifier, string appAuthority) app = default)\n        {\n            var key = new APIKeyData\n            {\n                Id = Encoders.Hex.EncodeData(RandomUtils.GetBytes(20)),\n                Type = APIKeyType.Permanent,\n                UserId = _userManager.GetUserId(User),\n                Label = viewModel.Label,\n            };\n            key.SetBlob(new APIKeyBlob\n            {\n                Permissions = GetPermissionsFromViewModel(viewModel).Select(p => p.ToString()).Distinct().ToArray(),\n                ApplicationAuthority = app.appAuthority,\n                ApplicationIdentifier = app.appIdentifier\n            });\n            await _apiKeyRepository.CreateKey(key);\n            return key;\n        }\n\n        private IEnumerable<Permission> GetPermissionsFromViewModel(AddApiKeyViewModel viewModel)\n        {\n            var permissions = new List<Permission>();\n            foreach (var p in viewModel.PermissionValues.Where(tuple => !tuple.Forbidden))\n            {\n                if (Policies.IsStorePolicy(p.Permission))\n                {\n                    if (p.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.AllStores && p.Value)\n                    {\n                        permissions.Add(Permission.Create(p.Permission));\n                    }\n                    else if (p.StoreMode == AddApiKeyViewModel.ApiKeyStoreMode.Specific)\n                    {\n                        permissions.AddRange(p.SpecificStores.Select(s => Permission.Create(p.Permission, s)));\n                    }\n                }\n                else if (p.Value && Permission.TryCreatePermission(p.Permission, null, out var pp))\n                    permissions.Add(pp);\n            }\n\n\n            return permissions.Distinct();\n        }\n\n        private async Task<T> SetViewModelValues<T>(T viewModel) where T : AddApiKeyViewModel\n        {\n            viewModel.Stores = await _StoreRepository.GetStoresByUserId(_userManager.GetUserId(User));\n            var isAdmin = (await _authorizationService.AuthorizeAsync(User, Policies.CanModifyServerSettings))\n                .Succeeded;\n            viewModel.PermissionValues ??= Policies.AllPolicies\n                .Where(p => AddApiKeyViewModel.PermissionValueItem.PermissionDescriptions.ContainsKey(p))\n                .Select(s => new AddApiKeyViewModel.PermissionValueItem()\n                {\n                    Permission = s,\n                    Value = false,\n                    Forbidden = Policies.IsServerPolicy(s) && !isAdmin\n                }).ToList();\n\n            if (!isAdmin)\n            {\n                foreach (var p in viewModel.PermissionValues.Where(item => item.Permission is null || Policies.IsServerPolicy(item.Permission)))\n                {\n                    p.Forbidden = true;\n                }\n            }\n\n            return viewModel;\n        }\n\n        public class AddApiKeyViewModel\n        {\n            public string Label { get; set; }\n            public StoreData[] Stores { get; set; }\n            public string Command { get; set; }\n            public List<PermissionValueItem> PermissionValues { get; set; }\n\n            public enum ApiKeyStoreMode\n            {\n                AllStores,\n                Specific\n            }\n\n            public class PermissionValueItem\n            {\n                public static readonly Dictionary<string, (string Title, string Description)> PermissionDescriptions = new Dictionary<string, (string Title, string Description)>()\n                {\n                    {Policies.Unrestricted, (\"Unrestricted access\", \"The app will have unrestricted access to your account.\")},\n                    {Policies.CanViewUsers, (\"View users\", \"The app will be able to see all users on this server.\")},\n                    {Policies.CanCreateUser, (\"Create new users\", \"The app will be able to create new users on this server.\")},\n                    {Policies.CanDeleteUser, (\"Delete user\", \"The app will be able to delete the user to whom it is assigned. Admin users can delete any user without this permission.\")},\n                    {Policies.CanModifyStoreSettings, (\"Modify your stores\", \"The app will be able to manage invoices on all your stores and modify their settings.\")},\n                    {$\"{Policies.CanModifyStoreSettings}:\", (\"Manage selected stores\", \"The app will be able to manage invoices on the selected stores and modify their settings.\")},\n                    {Policies.CanViewCustodianAccounts, (\"View exchange accounts linked to your stores\", \"The app will be able to see exchange accounts linked to your stores.\")},\n                    {$\"{Policies.CanViewCustodianAccounts}:\", (\"View exchange accounts linked to selected stores\", \"The app will be able to see exchange accounts linked to the selected stores.\")},\n                    {Policies.CanManageCustodianAccounts, (\"Manage exchange accounts linked to your stores\", \"The app will be able to modify exchange accounts linked to your stores.\")},\n                    {$\"{Policies.CanManageCustodianAccounts}:\", (\"Manage exchange accounts linked to selected stores\", \"The app will be able to modify exchange accounts linked to selected stores.\")},\n                    {Policies.CanDepositToCustodianAccounts, (\"Deposit funds to exchange accounts linked to your stores\", \"The app will be able to deposit funds to your exchange accounts.\")},\n                    {$\"{Policies.CanDepositToCustodianAccounts}:\", (\"Deposit funds to exchange accounts linked to selected stores\", \"The app will be able to deposit funds to selected store's exchange accounts.\")},\n                    {Policies.CanWithdrawFromCustodianAccounts, (\"Withdraw funds from exchange accounts to your store\", \"The app will be able to withdraw funds from your exchange accounts to your store.\")},\n                    {$\"{Policies.CanWithdrawFromCustodianAccounts}:\", (\"Withdraw funds from selected store's exchange accounts\", \"The app will be able to withdraw funds from your selected store's exchange accounts.\")},\n                    {Policies.CanTradeCustodianAccount, (\"Trade funds on your store's exchange accounts\", \"The app will be able to trade funds on your store's exchange accounts.\")},\n                    {$\"{Policies.CanTradeCustodianAccount}:\", (\"Trade funds on selected store's exchange accounts\", \"The app will be able to trade funds on selected store's exchange accounts.\")},\n                    {Policies.CanModifyStoreWebhooks, (\"Modify stores webhooks\", \"The app will modify the webhooks of all your stores.\")},\n                    {$\"{Policies.CanModifyStoreWebhooks}:\", (\"Modify selected stores' webhooks\", \"The app will modify the webhooks of the selected stores.\")},\n                    {Policies.CanViewStoreSettings, (\"View your stores\", \"The app will be able to view stores settings.\")},\n                    {$\"{Policies.CanViewStoreSettings}:\", (\"View your stores\", \"The app will be able to view the selected stores' settings.\")},\n                    {Policies.CanModifyServerSettings, (\"Manage your server\", \"The app will have total control on the server settings of your server.\")},\n                    {Policies.CanViewProfile, (\"View your profile\", \"The app will be able to view your user profile.\")},\n                    {Policies.CanModifyProfile, (\"Manage your profile\", \"The app will be able to view and modify your user profile.\")},\n                    {Policies.CanManageNotificationsForUser, (\"Manage your notifications\", \"The app will be able to view and modify your user notifications.\")},\n                    {Policies.CanViewNotificationsForUser, (\"View your notifications\", \"The app will be able to view your user notifications.\")},\n                    {Policies.CanCreateInvoice, (\"Create an invoice\", \"The app will be able to create new invoices.\")},\n                    {$\"{Policies.CanCreateInvoice}:\", (\"Create an invoice\", \"The app will be able to create new invoices on the selected stores.\")},\n                    {Policies.CanViewInvoices, (\"View invoices\", \"The app will be able to view invoices.\")},\n                    {Policies.CanModifyInvoices, (\"Modify invoices\", \"The app will be able to modify and view invoices.\")},\n                    {$\"{Policies.CanViewInvoices}:\", (\"View invoices\", \"The app will be able to view invoices on the selected stores.\")},\n                    {$\"{Policies.CanModifyInvoices}:\", (\"Modify invoices\", \"The app will be able to modify and view invoices on the selected stores.\")},\n                    {Policies.CanModifyPaymentRequests, (\"Modify your payment requests\", \"The app will be able to view, modify, delete and create new payment requests on all your stores.\")},\n                    {$\"{Policies.CanModifyPaymentRequests}:\", (\"Manage selected stores' payment requests\", \"The app will be able to view, modify, delete and create new payment requests on the selected stores.\")},\n                    {Policies.CanViewPaymentRequests, (\"View your payment requests\", \"The app will be able to view payment requests.\")},\n                    {$\"{Policies.CanViewPaymentRequests}:\", (\"View your payment requests\", \"The app will be able to view the selected stores' payment requests.\")},\n                    {Policies.CanManagePullPayments, (\"Manage your pull payments\", \"The app will be able to view, modify, delete and create pull payments on all your stores.\")},\n                    {$\"{Policies.CanManagePullPayments}:\", (\"Manage selected stores' pull payments\", \"The app will be able to view, modify, delete and create new pull payments on the selected stores.\")},\n                    {Policies.CanUseInternalLightningNode, (\"Use the internal lightning node\", \"The app will be able to  use the internal BTCPay Server lightning node to create BOLT11 invoices, connect to other nodes, open new channels and pay BOLT11 invoices.\")},\n                    {Policies.CanViewLightningInvoiceInternalNode, (\"View invoices from internal lightning node\", \"The app will be able to use the internal BTCPay Server lightning node to view BOLT11 invoices.\")},\n                    {Policies.CanCreateLightningInvoiceInternalNode, (\"Create invoices with internal lightning node\", \"The app will be able to use the internal BTCPay Server lightning node to create BOLT11 invoices.\")},\n                    {Policies.CanUseLightningNodeInStore, (\"Use the lightning nodes associated with your stores\", \"The app will be able to use the lightning nodes connected to all your stores to create BOLT11 invoices, connect to other nodes, open new channels and pay BOLT11 invoices.\")},\n                    {Policies.CanViewLightningInvoiceInStore, (\"View the lightning invoices associated with your stores\", \"The app will be able to view the lightning invoices connected to all your stores.\")},\n                    {Policies.CanCreateLightningInvoiceInStore, (\"Create invoices from the lightning nodes associated with your stores\", \"The app will be able to use the lightning nodes connected to all your stores to create BOLT11 invoices.\")},\n                    {$\"{Policies.CanUseLightningNodeInStore}:\", (\"Use the lightning nodes associated with your stores\", \"The app will be able to use the lightning nodes connected to the selected stores to create BOLT11 invoices, connect to other nodes, open new channels and pay BOLT11 invoices.\")},\n                    {$\"{Policies.CanViewLightningInvoiceInStore}:\", (\"View the lightning invoices associated with your stores\", \"The app will be able to view the lightning invoices connected to the selected stores.\")},\n                    {$\"{Policies.CanCreateLightningInvoiceInStore}:\", (\"Create invoices from the lightning nodes associated with your stores\", \"The app will be able to use the lightning nodes connected to the selected stores to create BOLT11 invoices.\")},\n                };\n                public string Title\n                {\n                    get\n                    {\n                        return PermissionDescriptions[$\"{Permission}{(StoreMode == ApiKeyStoreMode.Specific ? \":\" : \"\")}\"].Title;\n                    }\n                }\n                public string Description\n                {\n                    get\n                    {\n                        return PermissionDescriptions[$\"{Permission}{(StoreMode == ApiKeyStoreMode.Specific ? \":\" : \"\")}\"].Description;\n                    }\n                }\n                public string Permission { get; set; }\n                public bool Value { get; set; }\n                public bool Forbidden { get; set; }\n\n                public ApiKeyStoreMode StoreMode { get; set; } = ApiKeyStoreMode.AllStores;\n                public List<string> SpecificStores { get; set; } = new();\n            }\n        }\n\n        public class AuthorizeApiKeysViewModel : AddApiKeyViewModel\n        {\n            public string ApplicationName { get; set; }\n            public string ApplicationIdentifier { get; set; }\n            public Uri RedirectUrl { get; set; }\n            public bool Strict { get; set; }\n            public bool SelectiveStores { get; set; }\n            public string Permissions { get; set; }\n            public string ApiKey { get; set; }\n            public bool NeedsStorePermission { get; set; }\n            public string StoreId { get; set; }\n        }\n\n        public class ApiKeysViewModel\n        {\n            public List<APIKeyData> ApiKeyDatas { get; set; }\n        }\n    }\n}\n", "using System;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Client;\nusing BTCPayServer.Data;\nusing BTCPayServer.Fido2;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.ManageViewModels;\nusing BTCPayServer.Security.Greenfield;\nusing BTCPayServer.Services;\nusing BTCPayServer.Services.Mails;\nusing BTCPayServer.Services.Stores;\nusing BTCPayServer.Services.Wallets;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Logging;\nusing MimeKit;\n\nnamespace BTCPayServer.Controllers\n{\n\n    [Authorize(AuthenticationSchemes = AuthenticationSchemes.Cookie, Policy = Policies.CanViewProfile)]\n    [Route(\"account/{action:lowercase=Index}\")]\n    public partial class UIManageController : Controller\n    {\n        private readonly UserManager<ApplicationUser> _userManager;\n        private readonly SignInManager<ApplicationUser> _signInManager;\n        private readonly EmailSenderFactory _EmailSenderFactory;\n        private readonly ILogger _logger;\n        private readonly UrlEncoder _urlEncoder;\n        private readonly BTCPayServerEnvironment _btcPayServerEnvironment;\n        private readonly APIKeyRepository _apiKeyRepository;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly Fido2Service _fido2Service;\n        private readonly LinkGenerator _linkGenerator;\n        private readonly UserLoginCodeService _userLoginCodeService;\n        private readonly IHtmlHelper Html;\n        private readonly UserService _userService;\n        readonly StoreRepository _StoreRepository;\n\n        public UIManageController(\n          UserManager<ApplicationUser> userManager,\n          SignInManager<ApplicationUser> signInManager,\n          EmailSenderFactory emailSenderFactory,\n          ILogger<UIManageController> logger,\n          UrlEncoder urlEncoder,\n          StoreRepository storeRepository,\n          BTCPayServerEnvironment btcPayServerEnvironment,\n          APIKeyRepository apiKeyRepository,\n          IAuthorizationService authorizationService,\n          Fido2Service fido2Service,\n          LinkGenerator linkGenerator,\n          UserService userService,\n          UserLoginCodeService userLoginCodeService,\n          IHtmlHelper htmlHelper\n          )\n        {\n            _userManager = userManager;\n            _signInManager = signInManager;\n            _EmailSenderFactory = emailSenderFactory;\n            _logger = logger;\n            _urlEncoder = urlEncoder;\n            _btcPayServerEnvironment = btcPayServerEnvironment;\n            _apiKeyRepository = apiKeyRepository;\n            _authorizationService = authorizationService;\n            _fido2Service = fido2Service;\n            _linkGenerator = linkGenerator;\n            _userLoginCodeService = userLoginCodeService;\n            Html = htmlHelper;\n            _userService = userService;\n            _StoreRepository = storeRepository;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> Index()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var model = new IndexViewModel\n            {\n                Username = user.UserName,\n                Email = user.Email,\n                IsEmailConfirmed = user.EmailConfirmed\n            };\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> DisableShowInvoiceStatusChangeHint()\n        {\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var blob = user.GetBlob();\n            blob.ShowInvoiceStatusChangeHint = false;\n            if (user.SetBlob(blob))\n            {\n                await _userManager.UpdateAsync(user);\n            }\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> Index(IndexViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var email = user.Email;\n            if (model.Email != email)\n            {\n                if (!(await _userManager.FindByEmailAsync(model.Email) is null))\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = \"The email address is already in use with an other account.\";\n                    return RedirectToAction(nameof(Index));\n                }\n                var setUserResult = await _userManager.SetUserNameAsync(user, model.Email);\n                if (!setUserResult.Succeeded)\n                {\n                    throw new ApplicationException($\"Unexpected error occurred setting email for user with ID '{user.Id}'.\");\n                }\n                var setEmailResult = await _userManager.SetEmailAsync(user, model.Email);\n                if (!setEmailResult.Succeeded)\n                {\n                    throw new ApplicationException($\"Unexpected error occurred setting email for user with ID '{user.Id}'.\");\n                }\n            }\n            TempData[WellKnownTempData.SuccessMessage] = \"Your profile has been updated\";\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> SendVerificationEmail(IndexViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(nameof(Index), model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\n            var callbackUrl = _linkGenerator.EmailConfirmationLink(user.Id, code, Request.Scheme, Request.Host, Request.PathBase);\n            (await _EmailSenderFactory.GetEmailSender()).SendEmailConfirmation(user.GetMailboxAddress(), callbackUrl);\n            TempData[WellKnownTempData.SuccessMessage] = \"Verification email sent. Please check your email.\";\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> ChangePassword()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var hasPassword = await _userManager.HasPasswordAsync(user);\n            if (!hasPassword)\n            {\n                return RedirectToAction(nameof(SetPassword));\n            }\n\n            var model = new ChangePasswordViewModel();\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> ChangePassword(ChangePasswordViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var changePasswordResult = await _userManager.ChangePasswordAsync(user, model.OldPassword, model.NewPassword);\n            if (!changePasswordResult.Succeeded)\n            {\n                AddErrors(changePasswordResult);\n                return View(model);\n            }\n\n            await _signInManager.SignInAsync(user, isPersistent: false);\n            _logger.LogInformation(\"User changed their password successfully.\");\n            TempData[WellKnownTempData.SuccessMessage] = \"Your password has been changed.\";\n\n            return RedirectToAction(nameof(ChangePassword));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> SetPassword()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var hasPassword = await _userManager.HasPasswordAsync(user);\n\n            if (hasPassword)\n            {\n                return RedirectToAction(nameof(ChangePassword));\n            }\n\n            var model = new SetPasswordViewModel();\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> SetPassword(SetPasswordViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var addPasswordResult = await _userManager.AddPasswordAsync(user, model.NewPassword);\n            if (!addPasswordResult.Succeeded)\n            {\n                AddErrors(addPasswordResult);\n                return View(model);\n            }\n\n            await _signInManager.SignInAsync(user, isPersistent: false);\n            TempData[WellKnownTempData.SuccessMessage] = \"Your password has been set.\";\n\n            return RedirectToAction(nameof(SetPassword));\n        }\n\n        [HttpPost()]\n        public async Task<IActionResult> DeleteUserPost()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                return NotFound();\n            }\n\n            await _userService.DeleteUserAndAssociatedData(user);\n            TempData[WellKnownTempData.SuccessMessage] = \"Account successfully deleted.\";\n            await _signInManager.SignOutAsync();\n            return RedirectToAction(nameof(UIAccountController.Login), \"UIAccount\");\n        }\n\n\n        #region Helpers\n\n        private void AddErrors(IdentityResult result)\n        {\n            foreach (var error in result.Errors)\n            {\n                ModelState.AddModelError(string.Empty, error.Description);\n            }\n        }\n        #endregion\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Data;\nusing BTCPayServer.Events;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.ServerViewModels;\nusing BTCPayServer.Services;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.EntityFrameworkCore;\nusing MimeKit;\n\nnamespace BTCPayServer.Controllers\n{\n    public partial class UIServerController\n    {\n        [Route(\"server/users\")]\n        public async Task<IActionResult> ListUsers(\n            [FromServices] RoleManager<IdentityRole> roleManager,\n        UsersViewModel model,\n            string sortOrder = null\n        )\n        {\n            model = this.ParseListQuery(model ?? new UsersViewModel());\n\n            var usersQuery = _UserManager.Users;\n            if (!string.IsNullOrWhiteSpace(model.SearchTerm))\n            {\n#pragma warning disable CA1307 // Specify StringComparison\n                // Entity Framework don't support StringComparison\n                usersQuery = usersQuery.Where(u => u.Email.Contains(model.SearchTerm));\n#pragma warning restore CA1307 // Specify StringComparison\n            }\n\n            if (sortOrder != null)\n            {\n                switch (sortOrder)\n                {\n                    case \"desc\":\n                        ViewData[\"NextUserEmailSortOrder\"] = \"asc\";\n                        usersQuery = usersQuery.OrderByDescending(user => user.Email);\n                        break;\n                    case \"asc\":\n                        usersQuery = usersQuery.OrderBy(user => user.Email);\n                        ViewData[\"NextUserEmailSortOrder\"] = \"desc\";\n                        break;\n                }\n            }\n\n            model.Roles = roleManager.Roles.ToDictionary(role => role.Id, role => role.Name);\n            model.Users = await usersQuery\n                .Include(user => user.UserRoles)\n                .Skip(model.Skip)\n                .Take(model.Count)\n                .Select(u => new UsersViewModel.UserViewModel\n                {\n                    Name = u.UserName,\n                    Email = u.Email,\n                    Id = u.Id,\n                    Verified = u.EmailConfirmed || !u.RequiresEmailConfirmation,\n                    Created = u.Created,\n                    Roles = u.UserRoles.Select(role => role.RoleId),\n                    Disabled = u.LockoutEnabled && u.LockoutEnd != null && DateTimeOffset.UtcNow < u.LockoutEnd.Value.UtcDateTime\n                })\n                .ToListAsync();\n\n            return View(model);\n        }\n\n        [Route(\"server/users/{userId}\")]\n        public new async Task<IActionResult> User(string userId)\n        {\n            var user = await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n            var roles = await _UserManager.GetRolesAsync(user);\n            var userVM = new UsersViewModel.UserViewModel\n            {\n                Id = user.Id,\n                Email = user.Email,\n                Verified = user.EmailConfirmed || !user.RequiresEmailConfirmation,\n                IsAdmin = _userService.IsRoleAdmin(roles)\n            };\n            return View(userVM);\n        }\n\n        [Route(\"server/users/{userId}\")]\n        [HttpPost]\n        public new async Task<IActionResult> User(string userId, UsersViewModel.UserViewModel viewModel)\n        {\n            var user = await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            var admins = await _UserManager.GetUsersInRoleAsync(Roles.ServerAdmin);\n            var roles = await _UserManager.GetRolesAsync(user);\n            var wasAdmin = _userService.IsRoleAdmin(roles);\n            if (!viewModel.IsAdmin && admins.Count == 1 && wasAdmin)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"This is the only Admin, so their role can't be removed until another Admin is added.\";\n                return View(viewModel); // return\n            }\n\n            if (viewModel.IsAdmin != wasAdmin)\n            {\n                var success = await _userService.SetAdminUser(user.Id, viewModel.IsAdmin);\n                if (success)\n                {\n                    TempData[WellKnownTempData.SuccessMessage] = \"User successfully updated\";\n                }\n                else\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = \"Error updating user\";\n                }\n            }\n\n            return RedirectToAction(nameof(User), new { userId = userId });\n        }\n\n        [Route(\"server/users/new\")]\n        [HttpGet]\n        public IActionResult CreateUser()\n        {\n            ViewData[\"AllowRequestEmailConfirmation\"] = _policiesSettings.RequiresConfirmedEmail;\n            return View();\n        }\n\n        [Route(\"server/users/new\")]\n        [HttpPost]\n        public async Task<IActionResult> CreateUser(RegisterFromAdminViewModel model)\n        {\n            var requiresConfirmedEmail = _policiesSettings.RequiresConfirmedEmail;\n            ViewData[\"AllowRequestEmailConfirmation\"] = requiresConfirmedEmail;\n            if (!_Options.CheatMode)\n                model.IsAdmin = false;\n            if (ModelState.IsValid)\n            {\n                IdentityResult result;\n                var user = new ApplicationUser\n                {\n                    UserName = model.Email,\n                    Email = model.Email,\n                    EmailConfirmed = model.EmailConfirmed,\n                    RequiresEmailConfirmation = requiresConfirmedEmail,\n                    Created = DateTimeOffset.UtcNow\n                };\n\n                if (!string.IsNullOrEmpty(model.Password))\n                {\n                    result = await _UserManager.CreateAsync(user, model.Password);\n                }\n                else\n                {\n                    result = await _UserManager.CreateAsync(user);\n                }\n\n                if (result.Succeeded)\n                {\n                    if (model.IsAdmin && !(await _UserManager.AddToRoleAsync(user, Roles.ServerAdmin)).Succeeded)\n                        model.IsAdmin = false;\n\n                    var tcs = new TaskCompletionSource<Uri>();\n\n                    _eventAggregator.Publish(new UserRegisteredEvent()\n                    {\n                        RequestUri = Request.GetAbsoluteRootUri(),\n                        User = user,\n                        Admin = model.IsAdmin is true,\n                        CallbackUrlGenerated = tcs\n                    });\n                    var callbackUrl = await tcs.Task;\n\n                    if (user.RequiresEmailConfirmation && !user.EmailConfirmed)\n                    {\n\n                        TempData.SetStatusMessageModel(new StatusMessageModel()\n                        {\n                            Severity = StatusMessageModel.StatusSeverity.Success,\n                            AllowDismiss = false,\n                            Html =\n                                $\"Account created without a set password. An email will be sent (if configured) to set the password.<br/> You may alternatively share this link with them: <a class='alert-link' href='{callbackUrl}'>{callbackUrl}</a>\"\n                        });\n                    }\n                    else if (!await _UserManager.HasPasswordAsync(user))\n                    {\n                        TempData.SetStatusMessageModel(new StatusMessageModel()\n                        {\n                            Severity = StatusMessageModel.StatusSeverity.Success,\n                            AllowDismiss = false,\n                            Html =\n                                $\"Account created without a set password. An email will be sent (if configured) to set the password.<br/> You may alternatively share this link with them: <a class='alert-link' href='{callbackUrl}'>{callbackUrl}</a>\"\n                        });\n                    }\n                    return RedirectToAction(nameof(ListUsers));\n                }\n\n                foreach (var error in result.Errors)\n                {\n                    ModelState.AddModelError(string.Empty, error.Description);\n                }\n            }\n\n            // If we got this far, something failed, redisplay form\n            return View(model);\n        }\n\n        [HttpGet(\"server/users/{userId}/delete\")]\n        public async Task<IActionResult> DeleteUser(string userId)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            var roles = await _UserManager.GetRolesAsync(user);\n            if (_userService.IsRoleAdmin(roles))\n            {\n                if (await _userService.IsUserTheOnlyOneAdmin(user))\n                {\n                    // return\n                    return View(\"Confirm\", new ConfirmModel(\"Delete admin\",\n                        $\"Unable to proceed: As the user <strong>{Html.Encode(user.Email)}</strong> is the last enabled admin, it cannot be removed.\"));\n                }\n\n                return View(\"Confirm\", new ConfirmModel(\"Delete admin\",\n                    $\"The admin <strong>{Html.Encode(user.Email)}</strong> will be permanently deleted. This action will also delete all accounts, users and data associated with the server account. Are you sure?\",\n                    \"Delete\"));\n            }\n\n            return View(\"Confirm\", new ConfirmModel(\"Delete user\", $\"The user <strong>{Html.Encode(user.Email)}</strong> will be permanently deleted. Are you sure?\", \"Delete\"));\n        }\n\n        [HttpPost(\"server/users/{userId}/delete\")]\n        public async Task<IActionResult> DeleteUserPost(string userId)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            await _userService.DeleteUserAndAssociatedData(user);\n\n            TempData[WellKnownTempData.SuccessMessage] = \"User deleted\";\n            return RedirectToAction(nameof(ListUsers));\n        }\n\n        [HttpGet(\"server/users/{userId}/toggle\")]\n        public async Task<IActionResult> ToggleUser(string userId, bool enable)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            if (!enable && await _userService.IsUserTheOnlyOneAdmin(user))\n            {\n                return View(\"Confirm\", new ConfirmModel(\"Disable admin\",\n                    $\"Unable to proceed: As the user <strong>{Html.Encode(user.Email)}</strong> is the last enabled admin, it cannot be disabled.\"));\n            }\n            return View(\"Confirm\", new ConfirmModel($\"{(enable ? \"Enable\" : \"Disable\")} user\", $\"The user <strong>{Html.Encode(user.Email)}</strong> will be {(enable ? \"enabled\" : \"disabled\")}. Are you sure?\", (enable ? \"Enable\" : \"Disable\")));\n        }\n\n        [HttpPost(\"server/users/{userId}/toggle\")]\n        public async Task<IActionResult> ToggleUserPost(string userId, bool enable)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n            if (!enable && await _userService.IsUserTheOnlyOneAdmin(user))\n            {\n                TempData[WellKnownTempData.SuccessMessage] = $\"User was the last enabled admin and could not be disabled.\";\n                return RedirectToAction(nameof(ListUsers));\n            }\n            await _userService.ToggleUser(userId, enable ? null : DateTimeOffset.MaxValue);\n\n            TempData[WellKnownTempData.SuccessMessage] = $\"User {(enable ? \"enabled\" : \"disabled\")}\";\n            return RedirectToAction(nameof(ListUsers));\n        }\n\n        [HttpGet(\"server/users/{userId}/verification-email\")]\n        public async Task<IActionResult> SendVerificationEmail(string userId)\n        {\n            var user = userId == null ? null : await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n\n            return View(\"Confirm\", new ConfirmModel(\"Send verification email\", $\"This will send a verification email to <strong>{Html.Encode(user.Email)}</strong>.\", \"Send\"));\n        }\n\n        [HttpPost(\"server/users/{userId}/verification-email\")]\n        public async Task<IActionResult> SendVerificationEmailPost(string userId)\n        {\n            var user = await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{userId}'.\");\n            }\n\n            var code = await _UserManager.GenerateEmailConfirmationTokenAsync(user);\n            var callbackUrl = _linkGenerator.EmailConfirmationLink(user.Id, code, Request.Scheme, Request.Host, Request.PathBase);\n\n            (await _emailSenderFactory.GetEmailSender()).SendEmailConfirmation(user.GetMailboxAddress(), callbackUrl);\n\n            TempData[WellKnownTempData.SuccessMessage] = \"Verification email sent\";\n            return RedirectToAction(nameof(ListUsers));\n        }\n    }\n\n    public class RegisterFromAdminViewModel\n    {\n        [Required]\n        [EmailAddress]\n        [Display(Name = \"Email\")]\n        public string Email { get; set; }\n\n        [StringLength(100, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\n        [DataType(DataType.Password)]\n        [Display(Name = \"Password (leave blank to generate invite-link)\")]\n        public string Password { get; set; }\n\n        [DataType(DataType.Password)]\n        [Display(Name = \"Confirm password\")]\n        [Compare(\"Password\", ErrorMessage = \"The password and confirmation password do not match.\")]\n        public string ConfirmPassword { get; set; }\n\n        [Display(Name = \"Is administrator?\")]\n        public bool IsAdmin { get; set; }\n\n        [Display(Name = \"Email confirmed?\")]\n        public bool EmailConfirmed { get; set; }\n    }\n}\n", "#nullable enable\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Contracts;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Configuration;\nusing BTCPayServer.Data;\nusing BTCPayServer.HostedServices;\nusing BTCPayServer.Hosting;\nusing BTCPayServer.Logging;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.ServerViewModels;\nusing BTCPayServer.Services;\nusing BTCPayServer.Services.Apps;\nusing BTCPayServer.Services.Mails;\nusing BTCPayServer.Services.Stores;\nusing BTCPayServer.Storage.Models;\nusing BTCPayServer.Storage.Services;\nusing BTCPayServer.Storage.Services.Providers;\nusing BTCPayServer.Validation;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing MimeKit;\nusing NBitcoin;\nusing NBitcoin.DataEncoders;\nusing Renci.SshNet;\nusing AuthenticationSchemes = BTCPayServer.Abstractions.Constants.AuthenticationSchemes;\n\nnamespace BTCPayServer.Controllers\n{\n    [Authorize(Policy = BTCPayServer.Client.Policies.CanModifyServerSettings,\n               AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n    public partial class UIServerController : Controller\n    {\n        private readonly UserManager<ApplicationUser> _UserManager;\n        private readonly UserService _userService;\n        readonly SettingsRepository _SettingsRepository;\n        readonly PoliciesSettings _policiesSettings;\n        private readonly NBXplorerDashboard _dashBoard;\n        private readonly StoreRepository _StoreRepository;\n        readonly LightningConfigurationProvider _LnConfigProvider;\n        private readonly TorServices _torServices;\n        private readonly BTCPayServerOptions _Options;\n        private readonly AppService _AppService;\n        private readonly CheckConfigurationHostedService _sshState;\n        private readonly EventAggregator _eventAggregator;\n        private readonly IOptions<ExternalServicesOptions> _externalServiceOptions;\n        private readonly Logs Logs;\n        private readonly StoredFileRepository _StoredFileRepository;\n        private readonly IFileService _fileService;\n        private readonly IEnumerable<IStorageProviderService> _StorageProviderServices;\n        private readonly LinkGenerator _linkGenerator;\n        private readonly EmailSenderFactory _emailSenderFactory;\n\n        public UIServerController(\n            UserManager<ApplicationUser> userManager,\n            UserService userService,\n            StoredFileRepository storedFileRepository,\n            IFileService fileService,\n            IEnumerable<IStorageProviderService> storageProviderServices,\n            BTCPayServerOptions options,\n            SettingsRepository settingsRepository,\n            PoliciesSettings policiesSettings,\n            NBXplorerDashboard dashBoard,\n            IHttpClientFactory httpClientFactory,\n            LightningConfigurationProvider lnConfigProvider,\n            TorServices torServices,\n            StoreRepository storeRepository,\n            AppService appService,\n            CheckConfigurationHostedService sshState,\n            EventAggregator eventAggregator,\n            IOptions<ExternalServicesOptions> externalServiceOptions,\n            Logs logs,\n            LinkGenerator linkGenerator,\n            EmailSenderFactory emailSenderFactory,\n            IHostApplicationLifetime applicationLifetime,\n            IHtmlHelper html\n        )\n        {\n            _policiesSettings = policiesSettings;\n            _Options = options;\n            _StoredFileRepository = storedFileRepository;\n            _fileService = fileService;\n            _StorageProviderServices = storageProviderServices;\n            _UserManager = userManager;\n            _userService = userService;\n            _SettingsRepository = settingsRepository;\n            _dashBoard = dashBoard;\n            HttpClientFactory = httpClientFactory;\n            _StoreRepository = storeRepository;\n            _LnConfigProvider = lnConfigProvider;\n            _torServices = torServices;\n            _AppService = appService;\n            _sshState = sshState;\n            _eventAggregator = eventAggregator;\n            _externalServiceOptions = externalServiceOptions;\n            Logs = logs;\n            _linkGenerator = linkGenerator;\n            _emailSenderFactory = emailSenderFactory;\n            ApplicationLifetime = applicationLifetime;\n            Html = html;\n        }\n\n        [Route(\"server/maintenance\")]\n        public IActionResult Maintenance()\n        {\n            MaintenanceViewModel vm = new MaintenanceViewModel();\n            vm.CanUseSSH = _sshState.CanUseSSH;\n            if (!vm.CanUseSSH)\n                TempData[WellKnownTempData.ErrorMessage] = \"Maintenance feature requires access to SSH properly configured in BTCPay Server configuration.\";\n            vm.DNSDomain = this.Request.Host.Host;\n            if (IPAddress.TryParse(vm.DNSDomain, out var unused))\n                vm.DNSDomain = null;\n            return View(vm);\n        }\n\n        [Route(\"server/maintenance\")]\n        [HttpPost]\n        public async Task<IActionResult> Maintenance(MaintenanceViewModel vm, string command)\n        {\n            vm.CanUseSSH = _sshState.CanUseSSH;\n            if (command != \"soft-restart\" && !vm.CanUseSSH)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"Maintenance feature requires access to SSH properly configured in BTCPay Server configuration.\";\n                return View(vm);\n            }\n            if (!ModelState.IsValid)\n                return View(vm);\n            if (command == \"changedomain\")\n            {\n                if (string.IsNullOrWhiteSpace(vm.DNSDomain))\n                {\n                    ModelState.AddModelError(nameof(vm.DNSDomain), $\"Required field\");\n                    return View(vm);\n                }\n                vm.DNSDomain = vm.DNSDomain.Trim().ToLowerInvariant();\n                if (vm.DNSDomain.Equals(this.Request.Host.Host, StringComparison.OrdinalIgnoreCase))\n                    return View(vm);\n                if (IPAddress.TryParse(vm.DNSDomain, out var unused))\n                {\n                    ModelState.AddModelError(nameof(vm.DNSDomain), $\"This should be a domain name\");\n                    return View(vm);\n                }\n                if (vm.DNSDomain.Equals(this.Request.Host.Host, StringComparison.InvariantCultureIgnoreCase))\n                {\n                    ModelState.AddModelError(nameof(vm.DNSDomain), $\"The server is already set to use this domain\");\n                    return View(vm);\n                }\n                var builder = new UriBuilder();\n                using (var client = new HttpClient(new HttpClientHandler()\n                {\n                    ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator\n                }))\n                {\n                    try\n                    {\n                        builder.Scheme = this.Request.Scheme;\n                        builder.Host = vm.DNSDomain;\n                        var addresses1 = GetAddressAsync(this.Request.Host.Host);\n                        var addresses2 = GetAddressAsync(vm.DNSDomain);\n                        await Task.WhenAll(addresses1, addresses2);\n\n                        var addressesSet = addresses1.GetAwaiter().GetResult().Select(c => c.ToString()).ToHashSet();\n                        var hasCommonAddress = addresses2.GetAwaiter().GetResult().Select(c => c.ToString()).Any(s => addressesSet.Contains(s));\n                        if (!hasCommonAddress)\n                        {\n                            ModelState.AddModelError(nameof(vm.DNSDomain), $\"Invalid host ({vm.DNSDomain} is not pointing to this BTCPay instance)\");\n                            return View(vm);\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        var messages = new List<object>();\n                        messages.Add(ex.Message);\n                        if (ex.InnerException != null)\n                            messages.Add(ex.InnerException.Message);\n                        ModelState.AddModelError(nameof(vm.DNSDomain), $\"Invalid domain ({string.Join(\", \", messages.ToArray())})\");\n                        return View(vm);\n                    }\n                }\n\n                var error = await RunSSH(vm, $\"changedomain.sh {vm.DNSDomain}\");\n                if (error != null)\n                    return error;\n\n                builder.Path = null;\n                builder.Query = null;\n                TempData[WellKnownTempData.SuccessMessage] = $\"Domain name changing... the server will restart, please use \\\"{builder.Uri.AbsoluteUri}\\\" (this page won't reload automatically)\";\n            }\n            else if (command == \"update\")\n            {\n                var error = await RunSSH(vm, $\"btcpay-update.sh\");\n                if (error != null)\n                    return error;\n                TempData[WellKnownTempData.SuccessMessage] = $\"The server might restart soon if an update is available...  (this page won't reload automatically)\";\n            }\n            else if (command == \"clean\")\n            {\n                var error = await RunSSH(vm, $\"btcpay-clean.sh\");\n                if (error != null)\n                    return error;\n                TempData[WellKnownTempData.SuccessMessage] = $\"The old docker images will be cleaned soon...\";\n            }\n            else if (command == \"restart\")\n            {\n                var error = await RunSSH(vm, $\"btcpay-restart.sh\");\n                if (error != null)\n                    return error;\n                Logs.PayServer.LogInformation(\"A hard restart has been requested\");\n                TempData[WellKnownTempData.SuccessMessage] = $\"BTCPay will restart momentarily.\";\n            }\n            else if (command == \"soft-restart\")\n            {\n                TempData[WellKnownTempData.SuccessMessage] = $\"BTCPay will restart momentarily.\";\n                Logs.PayServer.LogInformation(\"A soft restart has been requested\");\n                _ = Task.Delay(3000).ContinueWith((t) => ApplicationLifetime.StopApplication());\n            }\n            else\n            {\n                return NotFound();\n            }\n            return RedirectToAction(nameof(Maintenance));\n        }\n\n        private Task<IPAddress[]> GetAddressAsync(string domainOrIP)\n        {\n            if (IPAddress.TryParse(domainOrIP, out var ip))\n                return Task.FromResult(new[] { ip });\n            return Dns.GetHostAddressesAsync(domainOrIP);\n        }\n\n        public static string RunId = Encoders.Hex.EncodeData(NBitcoin.RandomUtils.GetBytes(32));\n        [HttpGet]\n        [Route(\"runid\")]\n        [AllowAnonymous]\n        public IActionResult SeeRunId(string? expected = null)\n        {\n            if (expected == RunId)\n                return Ok();\n            return BadRequest();\n        }\n\n        private async Task<IActionResult?> RunSSH(MaintenanceViewModel vm, string command)\n        {\n            SshClient? sshClient = null;\n\n            try\n            {\n                sshClient = await _Options.SSHSettings.ConnectAsync();\n            }\n            catch (Exception ex)\n            {\n                var message = ex.Message;\n                if (ex is AggregateException aggrEx && aggrEx.InnerException?.Message != null)\n                {\n                    message = aggrEx.InnerException.Message;\n                }\n                ModelState.AddModelError(string.Empty, $\"Connection problem ({message})\");\n                return View(vm);\n            }\n            _ = RunSSHCore(sshClient, $\". /etc/profile.d/btcpay-env.sh && nohup {command} > /dev/null 2>&1 & disown\");\n            return null;\n        }\n\n        private async Task RunSSHCore(SshClient sshClient, string ssh)\n        {\n            try\n            {\n                Logs.PayServer.LogInformation(\"Running SSH command: \" + ssh);\n                var result = await sshClient.RunBash(ssh, TimeSpan.FromMinutes(1.0));\n                Logs.PayServer.LogInformation($\"SSH command executed with exit status {result.ExitStatus}. Output: {result.Output}\");\n            }\n            catch (Exception ex)\n            {\n                Logs.PayServer.LogWarning(\"Error while executing SSH command: \" + ex.Message);\n            }\n            finally\n            {\n                sshClient.Dispose();\n            }\n        }\n\n        public IHttpClientFactory HttpClientFactory { get; }\n        public IHostApplicationLifetime ApplicationLifetime { get; }\n        public IHtmlHelper Html { get; }\n\n        [Route(\"server/policies\")]\n        public async Task<IActionResult> Policies()\n        {\n            ViewBag.AppsList = await GetAppSelectList();\n            ViewBag.UpdateUrlPresent = _Options.UpdateUrl != null;\n            return View(_policiesSettings);\n        }\n\n        [HttpPost(\"server/policies\")]\n        public async Task<IActionResult> Policies([FromServices] BTCPayNetworkProvider btcPayNetworkProvider, PoliciesSettings settings, string command = \"\")\n        {\n            ViewBag.UpdateUrlPresent = _Options.UpdateUrl != null;\n            ViewBag.AppsList = await GetAppSelectList();\n\n            if (command == \"add-domain\")\n            {\n                ModelState.Clear();\n                settings.DomainToAppMapping.Add(new PoliciesSettings.DomainToAppMappingItem());\n                return View(settings);\n            }\n            if (command.StartsWith(\"remove-domain\", StringComparison.InvariantCultureIgnoreCase))\n            {\n                ModelState.Clear();\n                var index = int.Parse(command.Substring(command.IndexOf(\":\", StringComparison.InvariantCultureIgnoreCase) + 1), CultureInfo.InvariantCulture);\n                settings.DomainToAppMapping.RemoveAt(index);\n                return View(settings);\n            }\n\n            settings.BlockExplorerLinks = settings.BlockExplorerLinks.Where(tuple => btcPayNetworkProvider.GetNetwork(tuple.CryptoCode).BlockExplorerLinkDefault != tuple.Link).ToList();\n\n            if (!ModelState.IsValid)\n            {\n                return View(settings);\n            }\n            var appIdsToFetch = settings.DomainToAppMapping.Select(item => item.AppId).ToList();\n            if (!string.IsNullOrEmpty(settings.RootAppId))\n            {\n                appIdsToFetch.Add(settings.RootAppId);\n            }\n            else\n            {\n                settings.RootAppType = null;\n            }\n\n            if (appIdsToFetch.Any())\n            {\n                var apps = (await _AppService.GetApps(appIdsToFetch.ToArray()))\n                    .ToDictionary(data => data.Id, data => Enum.Parse<AppType>(data.AppType));\n                ;\n                if (!string.IsNullOrEmpty(settings.RootAppId))\n                {\n                    settings.RootAppType = apps[settings.RootAppId];\n                }\n\n                foreach (var domainToAppMappingItem in settings.DomainToAppMapping)\n                {\n                    domainToAppMappingItem.AppType = apps[domainToAppMappingItem.AppId];\n                }\n            }\n\n            await _SettingsRepository.UpdateSetting(settings);\n            BlockExplorerLinkStartupTask.SetLinkOnNetworks(settings.BlockExplorerLinks, btcPayNetworkProvider);\n            TempData[WellKnownTempData.SuccessMessage] = \"Policies updated successfully\";\n            return RedirectToAction(nameof(Policies));\n        }\n\n        [Route(\"server/services\")]\n        public IActionResult Services()\n        {\n            var result = new ServicesViewModel { ExternalServices = _externalServiceOptions.Value.ExternalServices.ToList() };\n\n            // other services\n            foreach (var externalService in _externalServiceOptions.Value.OtherExternalServices)\n            {\n                result.OtherExternalServices.Add(new ServicesViewModel.OtherExternalService()\n                {\n                    Name = externalService.Key,\n                    Link = Request.GetAbsoluteUriNoPathBase(externalService.Value).AbsoluteUri\n                });\n            }\n            if (CanShowSSHService())\n            {\n                result.OtherExternalServices.Add(new ServicesViewModel.OtherExternalService()\n                {\n                    Name = \"SSH\",\n                    Link = Url.Action(nameof(SSHService))\n                });\n            }\n            result.OtherExternalServices.Add(new ServicesViewModel.OtherExternalService()\n            {\n                Name = \"Dynamic DNS\",\n                Link = Url.Action(nameof(DynamicDnsServices))\n            });\n            foreach (var torService in _torServices.Services)\n            {\n                if (torService.VirtualPort == 80)\n                {\n                    result.TorHttpServices.Add(new ServicesViewModel.OtherExternalService()\n                    {\n                        Name = torService.Name,\n                        Link = $\"http://{torService.OnionHost}\"\n                    });\n                }\n                else if (TryParseAsExternalService(torService, out var externalService))\n                {\n                    result.ExternalServices.Add(externalService);\n                }\n                else\n                {\n                    result.TorOtherServices.Add(new ServicesViewModel.OtherExternalService()\n                    {\n                        Name = torService.Name,\n                        Link = $\"{torService.OnionHost}:{torService.VirtualPort}\"\n                    });\n                }\n            }\n\n            return View(result);\n        }\n\n        private async Task<List<SelectListItem>> GetAppSelectList()\n        {\n            var apps = (await _AppService.GetAllApps(null, true))\n                .Select(a => new SelectListItem($\"{typeof(AppType).DisplayName(a.AppType)} - {a.AppName} - {a.StoreName}\", a.Id)).ToList();\n            apps.Insert(0, new SelectListItem(\"(None)\", null));\n            return apps;\n        }\n\n        private static bool TryParseAsExternalService(TorService torService, [MaybeNullWhen(false)] out ExternalService externalService)\n        {\n            externalService = null;\n            if (torService.ServiceType == TorServiceType.P2P)\n            {\n                externalService = new ExternalService()\n                {\n                    CryptoCode = torService.Network.CryptoCode,\n                    DisplayName = \"Full node P2P\",\n                    Type = ExternalServiceTypes.P2P,\n                    ConnectionString = new ExternalConnectionString(new Uri($\"bitcoin-p2p://{torService.OnionHost}:{torService.VirtualPort}\", UriKind.Absolute)),\n                    ServiceName = torService.Name,\n                };\n            }\n            if (torService.ServiceType == TorServiceType.RPC)\n            {\n                externalService = new ExternalService()\n                {\n                    CryptoCode = torService.Network.CryptoCode,\n                    DisplayName = \"Full node RPC\",\n                    Type = ExternalServiceTypes.RPC,\n                    ConnectionString = new ExternalConnectionString(new Uri($\"btcrpc://btcrpc:btcpayserver4ever@{torService.OnionHost}:{torService.VirtualPort}?label=BTCPayNode\", UriKind.Absolute)),\n                    ServiceName = torService.Name\n                };\n            }\n            return externalService != null;\n        }\n\n        private ExternalService? GetService(string serviceName, string cryptoCode)\n        {\n            var result = _externalServiceOptions.Value.ExternalServices.GetService(serviceName, cryptoCode);\n            if (result != null)\n                return result;\n            foreach (var torService in _torServices.Services)\n            {\n                if (TryParseAsExternalService(torService, out var torExternalService) &&\n                    torExternalService.ServiceName == serviceName)\n                    return torExternalService;\n            }\n            return null;\n        }\n\n        [Route(\"server/services/{serviceName}/{cryptoCode?}\")]\n        public async Task<IActionResult> Service(string serviceName, string cryptoCode, bool showQR = false, ulong? nonce = null)\n        {\n            var service = GetService(serviceName, cryptoCode);\n            if (service == null)\n                return NotFound();\n            if (!string.IsNullOrEmpty(cryptoCode) && !_dashBoard.IsFullySynched(cryptoCode, out _) && service.Type != ExternalServiceTypes.RPC)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"{cryptoCode} is not fully synched\";\n                return RedirectToAction(nameof(Services));\n            }\n            try\n            {\n\n                if (service.Type == ExternalServiceTypes.P2P)\n                {\n                    return View(\"P2PService\", new LightningWalletServices()\n                    {\n                        ShowQR = showQR,\n                        WalletName = service.ServiceName,\n                        ServiceLink = service.ConnectionString.Server.AbsoluteUri.WithoutEndingSlash()\n                    });\n                }\n                if (service.Type == ExternalServiceTypes.LNDSeedBackup)\n                {\n                    var model = LndSeedBackupViewModel.Parse(service.ConnectionString.CookieFilePath);\n                    if (!model.IsWalletUnlockPresent)\n                    {\n                        TempData.SetStatusMessageModel(new StatusMessageModel()\n                        {\n                            Severity = StatusMessageModel.StatusSeverity.Warning,\n                            Html = \"Your LND does not seem to allow seed backup.<br />\" +\n                            \"It's recommended, but not required, that you migrate as instructed by <a href=\\\"https://blog.btcpayserver.org/btcpay-lnd-migration\\\">our migration blog post</a>.<br />\" +\n                            \"You will need to close all of your channels, and migrate your funds as <a href=\\\"https://blog.btcpayserver.org/btcpay-lnd-migration\\\">we documented</a>.\"\n                        });\n                    }\n                    return View(\"LndSeedBackup\", model);\n                }\n                if (service.Type == ExternalServiceTypes.RPC)\n                {\n                    return View(\"RPCService\", new LightningWalletServices()\n                    {\n                        ShowQR = showQR,\n                        WalletName = service.ServiceName,\n                        ServiceLink = service.ConnectionString.Server.AbsoluteUri.WithoutEndingSlash()\n                    });\n                }\n                var connectionString = await service.ConnectionString.Expand(this.Request.GetAbsoluteUriNoPathBase(), service.Type, _Options.NetworkType);\n                switch (service.Type)\n                {\n                    case ExternalServiceTypes.Charge:\n                        return LightningChargeServices(service, connectionString, showQR);\n                    case ExternalServiceTypes.RTL:\n                    case ExternalServiceTypes.ThunderHub:\n                    case ExternalServiceTypes.Spark:\n                    case ExternalServiceTypes.Torq:\n                        if (connectionString.AccessKey == null)\n                        {\n                            TempData[WellKnownTempData.ErrorMessage] = $\"The access key of the service is not set\";\n                            return RedirectToAction(nameof(Services));\n                        }\n                        LightningWalletServices vm = new LightningWalletServices();\n                        vm.ShowQR = showQR;\n                        vm.WalletName = service.DisplayName;\n                        string tokenParam = \"access-key\";\n                        if (service.Type == ExternalServiceTypes.ThunderHub)\n                            tokenParam = \"token\";\n                        vm.ServiceLink = $\"{connectionString.Server}?{tokenParam}={connectionString.AccessKey}\";\n                        return View(\"LightningWalletServices\", vm);\n                    case ExternalServiceTypes.CLightningRest:\n                        return LndServices(service, connectionString, nonce, \"CLightningRestServices\");\n                    case ExternalServiceTypes.LNDGRPC:\n                    case ExternalServiceTypes.LNDRest:\n                        return LndServices(service, connectionString, nonce);\n                    case ExternalServiceTypes.Configurator:\n                        return View(\"ConfiguratorService\",\n                            new LightningWalletServices()\n                            {\n                                ShowQR = showQR,\n                                WalletName = service.ServiceName,\n                                ServiceLink = $\"{connectionString.Server}?password={connectionString.AccessKey}\"\n                            });\n                    default:\n                        throw new NotSupportedException(service.Type.ToString());\n                }\n            }\n            catch (Exception ex)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = ex.Message;\n                return RedirectToAction(nameof(Services));\n            }\n        }\n\n        [HttpGet(\"server/services/{serviceName}/{cryptoCode}/removelndseed\")]\n        public IActionResult RemoveLndSeed(string serviceName, string cryptoCode)\n        {\n            return View(\"Confirm\", new ConfirmModel(\"Delete LND seed\", \"This action will permanently delete your LND seed and password. You will not be able to recover them if you don't have a backup. Are you sure?\", \"Delete\"));\n        }\n\n        [HttpPost(\"server/services/{serviceName}/{cryptoCode}/removelndseed\")]\n        public async Task<IActionResult> RemoveLndSeedPost(string serviceName, string cryptoCode)\n        {\n            var service = GetService(serviceName, cryptoCode);\n            if (service == null)\n                return NotFound();\n\n            var model = LndSeedBackupViewModel.Parse(service.ConnectionString.CookieFilePath);\n            if (!model.IsWalletUnlockPresent)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"File with wallet password and seed info not present\";\n                return RedirectToAction(nameof(Services));\n            }\n\n            if (string.IsNullOrEmpty(model.Seed))\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"Seed information was already removed\";\n                return RedirectToAction(nameof(Services));\n            }\n\n            if (await model.RemoveSeedAndWrite(service.ConnectionString.CookieFilePath))\n            {\n                TempData[WellKnownTempData.SuccessMessage] = $\"Seed successfully removed\";\n                return RedirectToAction(nameof(Service), new { serviceName, cryptoCode });\n            }\n            else\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"Seed removal failed\";\n                return RedirectToAction(nameof(Services));\n            }\n        }\n\n        private IActionResult LightningChargeServices(ExternalService service, ExternalConnectionString connectionString, bool showQR = false)\n        {\n            ChargeServiceViewModel vm = new ChargeServiceViewModel();\n            vm.Uri = connectionString.Server.AbsoluteUri;\n            vm.APIToken = connectionString.APIToken;\n            var builder = new UriBuilder(connectionString.Server);\n            builder.UserName = \"api-token\";\n            builder.Password = vm.APIToken;\n            vm.AuthenticatedUri = builder.ToString();\n            return View(nameof(LightningChargeServices), vm);\n        }\n\n        private IActionResult LndServices(ExternalService service, ExternalConnectionString connectionString, ulong? nonce, string view = nameof(LndServices))\n        {\n            var model = new LndServicesViewModel();\n            if (service.Type == ExternalServiceTypes.LNDGRPC)\n            {\n                model.Host = $\"{connectionString.Server.DnsSafeHost}:{connectionString.Server.Port}\";\n                model.SSL = connectionString.Server.Scheme == \"https\";\n                model.ConnectionType = \"GRPC\";\n                model.GRPCSSLCipherSuites = \"ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256\";\n            }\n            else if (service.Type == ExternalServiceTypes.LNDRest || service.Type == ExternalServiceTypes.CLightningRest)\n            {\n                model.Uri = connectionString.Server.AbsoluteUri;\n                model.ConnectionType = \"REST\";\n            }\n\n            if (connectionString.CertificateThumbprint != null)\n            {\n                model.CertificateThumbprint = connectionString.CertificateThumbprint;\n            }\n            if (connectionString.Macaroon != null)\n            {\n                model.Macaroon = Encoders.Hex.EncodeData(connectionString.Macaroon);\n            }\n            model.AdminMacaroon = connectionString.Macaroons?.AdminMacaroon?.Hex;\n            model.InvoiceMacaroon = connectionString.Macaroons?.InvoiceMacaroon?.Hex;\n            model.ReadonlyMacaroon = connectionString.Macaroons?.ReadonlyMacaroon?.Hex;\n\n            if (nonce != null)\n            {\n                var configKey = GetConfigKey(\"lnd\", service.ServiceName, service.CryptoCode, nonce.Value);\n                var lnConfig = _LnConfigProvider.GetConfig(configKey);\n                if (lnConfig != null)\n                {\n                    model.QRCodeLink = Request.GetAbsoluteUri(Url.Action(nameof(GetLNDConfig), new { configKey = configKey }));\n                    model.QRCode = $\"config={model.QRCodeLink}\";\n                }\n            }\n\n            return View(view, model);\n        }\n\n        private static ulong GetConfigKey(string type, string serviceName, string cryptoCode, ulong nonce)\n        {\n            return ((ulong)(uint)HashCode.Combine(type, serviceName, cryptoCode, nonce) | (nonce & 0xffffffff00000000UL));\n        }\n\n        [Route(\"lnd-config/{configKey}/lnd.config\")]\n        [AllowAnonymous]\n        public IActionResult GetLNDConfig(ulong configKey)\n        {\n            var conf = _LnConfigProvider.GetConfig(configKey);\n            if (conf == null)\n                return NotFound();\n            return Json(conf);\n        }\n\n        [Route(\"server/services/{serviceName}/{cryptoCode}\")]\n        [HttpPost]\n        public async Task<IActionResult> ServicePost(string serviceName, string cryptoCode)\n        {\n            if (!_dashBoard.IsFullySynched(cryptoCode, out var unusud))\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"{cryptoCode} is not fully synched\";\n                return RedirectToAction(nameof(Services));\n            }\n            var service = GetService(serviceName, cryptoCode);\n            if (service == null)\n                return NotFound();\n\n            ExternalConnectionString? connectionString = null;\n            try\n            {\n                connectionString = await service.ConnectionString.Expand(this.Request.GetAbsoluteUriNoPathBase(), service.Type, _Options.NetworkType);\n            }\n            catch (Exception ex)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = ex.Message;\n                return RedirectToAction(nameof(Services));\n            }\n\n            LightningConfigurations confs = new LightningConfigurations();\n            if (service.Type == ExternalServiceTypes.LNDGRPC)\n            {\n                LightningConfiguration grpcConf = new LightningConfiguration();\n                grpcConf.Type = \"grpc\";\n                grpcConf.Host = connectionString.Server.DnsSafeHost;\n                grpcConf.Port = connectionString.Server.Port;\n                grpcConf.SSL = connectionString.Server.Scheme == \"https\";\n                confs.Configurations.Add(grpcConf);\n            }\n            else if (service.Type == ExternalServiceTypes.LNDRest || service.Type == ExternalServiceTypes.CLightningRest)\n            {\n                var restconf = new LNDRestConfiguration();\n                restconf.Type = service.Type == ExternalServiceTypes.LNDRest ? \"lnd-rest\" : \"clightning-rest\";\n                restconf.Uri = connectionString.Server.AbsoluteUri;\n                confs.Configurations.Add(restconf);\n            }\n            else\n                throw new NotSupportedException(service.Type.ToString());\n            var commonConf = (LNDConfiguration)confs.Configurations[confs.Configurations.Count - 1];\n            commonConf.ChainType = _Options.NetworkType.ToString();\n            commonConf.CryptoCode = cryptoCode;\n            commonConf.Macaroon = connectionString.Macaroon == null ? null : Encoders.Hex.EncodeData(connectionString.Macaroon);\n            commonConf.CertificateThumbprint = connectionString.CertificateThumbprint == null ? null : connectionString.CertificateThumbprint;\n            commonConf.AdminMacaroon = connectionString.Macaroons?.AdminMacaroon?.Hex;\n            commonConf.ReadonlyMacaroon = connectionString.Macaroons?.ReadonlyMacaroon?.Hex;\n            commonConf.InvoiceMacaroon = connectionString.Macaroons?.InvoiceMacaroon?.Hex;\n\n            var nonce = RandomUtils.GetUInt64();\n            var configKey = GetConfigKey(\"lnd\", serviceName, cryptoCode, nonce);\n            _LnConfigProvider.KeepConfig(configKey, confs);\n            return RedirectToAction(nameof(Service), new { cryptoCode = cryptoCode, serviceName = serviceName, nonce = nonce });\n        }\n\n        [Route(\"server/services/dynamic-dns\")]\n        public async Task<IActionResult> DynamicDnsServices()\n        {\n            var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n            return View(settings.Services.Select(s => new DynamicDnsViewModel()\n            {\n                Settings = s\n            }).ToArray());\n        }\n        [Route(\"server/services/dynamic-dns/{hostname}\")]\n        public async Task<IActionResult> DynamicDnsServices(string hostname)\n        {\n            var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n            var service = settings.Services.FirstOrDefault(s => s.Hostname.Equals(hostname, StringComparison.OrdinalIgnoreCase));\n            if (service == null)\n                return NotFound();\n            var vm = new DynamicDnsViewModel();\n            vm.Modify = true;\n            vm.Settings = service;\n            return View(nameof(DynamicDnsService), vm);\n        }\n        [Route(\"server/services/dynamic-dns\")]\n        [HttpPost]\n        public async Task<IActionResult> DynamicDnsService(DynamicDnsViewModel viewModel, string? command = null)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(viewModel);\n            }\n            if (command == \"Save\")\n            {\n                var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n                var i = settings.Services.FindIndex(d => d.Hostname.Equals(viewModel.Settings.Hostname, StringComparison.OrdinalIgnoreCase));\n                if (i != -1)\n                {\n                    ModelState.AddModelError(nameof(viewModel.Settings.Hostname), \"This hostname already exists\");\n                    return View(viewModel);\n                }\n                if (viewModel.Settings.Hostname != null)\n                    viewModel.Settings.Hostname = viewModel.Settings.Hostname.Trim().ToLowerInvariant();\n                string errorMessage = await viewModel.Settings.SendUpdateRequest(HttpClientFactory.CreateClient());\n                if (errorMessage == null)\n                {\n                    TempData[WellKnownTempData.SuccessMessage] = $\"The Dynamic DNS has been successfully queried, your configuration is saved\";\n                    viewModel.Settings.LastUpdated = DateTimeOffset.UtcNow;\n                    settings.Services.Add(viewModel.Settings);\n                    await _SettingsRepository.UpdateSetting(settings);\n                    return RedirectToAction(nameof(DynamicDnsServices));\n                }\n                else\n                {\n                    ModelState.AddModelError(string.Empty, errorMessage);\n                    return View(viewModel);\n                }\n            }\n            else\n            {\n                return View(new DynamicDnsViewModel() { Settings = new DynamicDnsService() });\n            }\n        }\n        [Route(\"server/services/dynamic-dns/{hostname}\")]\n        [HttpPost]\n        public async Task<IActionResult> DynamicDnsService(DynamicDnsViewModel viewModel, string hostname, string? command = null)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(viewModel);\n            }\n            var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n\n            var i = settings.Services.FindIndex(d => d.Hostname.Equals(hostname, StringComparison.OrdinalIgnoreCase));\n            if (i == -1)\n                return NotFound();\n            if (viewModel.Settings.Password == null)\n                viewModel.Settings.Password = settings.Services[i].Password;\n            if (viewModel.Settings.Hostname != null)\n                viewModel.Settings.Hostname = viewModel.Settings.Hostname.Trim().ToLowerInvariant();\n            if (!viewModel.Settings.Enabled)\n            {\n                TempData[WellKnownTempData.SuccessMessage] = $\"The Dynamic DNS service has been disabled\";\n                viewModel.Settings.LastUpdated = null;\n            }\n            else\n            {\n                string errorMessage = await viewModel.Settings.SendUpdateRequest(HttpClientFactory.CreateClient());\n                if (errorMessage == null)\n                {\n                    TempData[WellKnownTempData.SuccessMessage] = $\"The Dynamic DNS has been successfully queried, your configuration is saved\";\n                    viewModel.Settings.LastUpdated = DateTimeOffset.UtcNow;\n                }\n                else\n                {\n                    ModelState.AddModelError(string.Empty, errorMessage);\n                    return View(viewModel);\n                }\n            }\n            settings.Services[i] = viewModel.Settings;\n            await _SettingsRepository.UpdateSetting(settings);\n            this.RouteData.Values.Remove(nameof(hostname));\n            return RedirectToAction(nameof(DynamicDnsServices));\n        }\n\n        [HttpGet(\"server/services/dynamic-dns/{hostname}/delete\")]\n        public async Task<IActionResult> DeleteDynamicDnsService(string hostname)\n        {\n            var settings = await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>() ?? new DynamicDnsSettings();\n            var i = settings.Services.FindIndex(d => d.Hostname.Equals(hostname, StringComparison.OrdinalIgnoreCase));\n            if (i == -1)\n                return NotFound();\n            return View(\"Confirm\",\n                new ConfirmModel(\"Delete dynamic DNS service\",\n                    $\"Deleting the dynamic DNS service for <strong>{Html.Encode(hostname)}</strong> means your BTCPay Server will stop updating the associated DNS record periodically.\", \"Delete\"));\n        }\n\n        [HttpPost(\"server/services/dynamic-dns/{hostname}/delete\")]\n        public async Task<IActionResult> DeleteDynamicDnsServicePost(string hostname)\n        {\n            var settings = (await _SettingsRepository.GetSettingAsync<DynamicDnsSettings>()) ?? new DynamicDnsSettings();\n            var i = settings.Services.FindIndex(d => d.Hostname.Equals(hostname, StringComparison.OrdinalIgnoreCase));\n            if (i == -1)\n                return NotFound();\n            settings.Services.RemoveAt(i);\n            await _SettingsRepository.UpdateSetting(settings);\n            TempData[WellKnownTempData.SuccessMessage] = \"Dynamic DNS service successfully removed\";\n            RouteData.Values.Remove(nameof(hostname));\n            return RedirectToAction(nameof(DynamicDnsServices));\n        }\n\n        [HttpGet(\"server/services/ssh\")]\n        public async Task<IActionResult> SSHService()\n        {\n            if (!CanShowSSHService())\n                return NotFound();\n\n            var settings = _Options.SSHSettings;\n            var server = Extensions.IsLocalNetwork(settings.Server) ? this.Request.Host.Host : settings.Server;\n            SSHServiceViewModel vm = new SSHServiceViewModel();\n            string port = settings.Port == 22 ? \"\" : $\" -p {settings.Port}\";\n            vm.CommandLine = $\"ssh {settings.Username}@{server}{port}\";\n            vm.Password = settings.Password;\n            vm.KeyFilePassword = settings.KeyFilePassword;\n            vm.HasKeyFile = !string.IsNullOrEmpty(settings.KeyFile);\n\n            //  Let's try to just read the authorized key file\n            if (CanAccessAuthorizedKeyFile())\n            {\n                try\n                {\n                    vm.SSHKeyFileContent = await System.IO.File.ReadAllTextAsync(settings.AuthorizedKeysFile);\n                }\n                catch { }\n            }\n\n            // If that fail, just fallback to ssh\n            if (vm.SSHKeyFileContent == null && _sshState.CanUseSSH)\n            {\n                try\n                {\n                    using var sshClient = await _Options.SSHSettings.ConnectAsync();\n                    var result = await sshClient.RunBash(\"cat ~/.ssh/authorized_keys\", TimeSpan.FromSeconds(10));\n                    vm.SSHKeyFileContent = result.Output;\n                }\n                catch { }\n            }\n            return View(vm);\n        }\n\n        bool CanShowSSHService()\n        {\n            return !_policiesSettings.DisableSSHService &&\n                   _Options.SSHSettings != null && (_sshState.CanUseSSH || CanAccessAuthorizedKeyFile());\n        }\n\n        private bool CanAccessAuthorizedKeyFile()\n        {\n            return _Options.SSHSettings?.AuthorizedKeysFile != null && System.IO.File.Exists(_Options.SSHSettings.AuthorizedKeysFile);\n        }\n\n        [HttpPost(\"server/services/ssh\")]\n        public async Task<IActionResult> SSHService(SSHServiceViewModel viewModel, string? command = null)\n        {\n            if (!CanShowSSHService())\n                return NotFound();\n\n            if (command is \"Save\")\n            {\n                string newContent = viewModel?.SSHKeyFileContent ?? string.Empty;\n                newContent = newContent.Replace(\"\\r\\n\", \"\\n\", StringComparison.OrdinalIgnoreCase);\n\n                bool updated = false;\n                Exception? exception = null;\n                // Let's try to just write the file\n                if (CanAccessAuthorizedKeyFile())\n                {\n                    try\n                    {\n                        await System.IO.File.WriteAllTextAsync(_Options.SSHSettings.AuthorizedKeysFile, newContent);\n                        TempData[WellKnownTempData.SuccessMessage] = \"authorized_keys has been updated\";\n                        updated = true;\n                    }\n                    catch (Exception ex)\n                    {\n                        exception = ex;\n                    }\n                }\n\n                // If that fail, fallback to ssh\n                if (!updated && _sshState.CanUseSSH)\n                {\n                    try\n                    {\n                        using (var sshClient = await _Options.SSHSettings.ConnectAsync())\n                        {\n                            await sshClient.RunBash($\"mkdir -p ~/.ssh && echo '{newContent.EscapeSingleQuotes()}' > ~/.ssh/authorized_keys\", TimeSpan.FromSeconds(10));\n                        }\n                        updated = true;\n                        exception = null;\n                    }\n                    catch (Exception ex)\n                    {\n                        exception = ex;\n                    }\n                }\n\n                if (exception is null)\n                {\n                    TempData[WellKnownTempData.SuccessMessage] = \"authorized_keys has been updated\";\n                }\n                else\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = exception.Message;\n                }\n                return RedirectToAction(nameof(SSHService));\n            }\n\n            if (command is \"disable\")\n            {\n                return RedirectToAction(nameof(SSHServiceDisable));\n            }\n\n            return NotFound();\n        }\n\n        [HttpGet(\"server/services/ssh/disable\")]\n        public IActionResult SSHServiceDisable()\n        {\n            return View(\"Confirm\", new ConfirmModel(\"Disable modification of SSH settings\", \"This action is permanent and will remove the ability to change the SSH settings via the BTCPay Server user interface.\", \"Disable\"));\n        }\n\n        [HttpPost(\"server/services/ssh/disable\")]\n        public async Task<IActionResult> SSHServiceDisablePost()\n        {\n            var policies = await _SettingsRepository.GetSettingAsync<PoliciesSettings>() ?? new PoliciesSettings();\n            policies.DisableSSHService = true;\n            await _SettingsRepository.UpdateSetting(policies);\n            TempData[WellKnownTempData.SuccessMessage] = \"Changes to the SSH settings are now permanently disabled in the BTCPay Server user interface\";\n            return RedirectToAction(nameof(Services));\n        }\n\n        [HttpGet(\"server/theme\")]\n        public async Task<IActionResult> Theme()\n        {\n            var data = await _SettingsRepository.GetSettingAsync<ThemeSettings>() ?? new ThemeSettings();\n            return View(data);\n        }\n\n        [HttpPost(\"server/theme\")]\n        public async Task<IActionResult> Theme(\n            ThemeSettings model,\n            [FromForm] bool RemoveLogoFile,\n            [FromForm] bool RemoveCustomThemeFile)\n        {\n            var settingsChanged = false;\n            var settings = await _SettingsRepository.GetSettingAsync<ThemeSettings>() ?? new ThemeSettings();\n\n            var userId = GetUserId();\n            if (userId is null)\n                return NotFound();\n\n            if (model.CustomThemeFile != null)\n            {\n                if (model.CustomThemeFile.ContentType.Equals(\"text/css\", StringComparison.InvariantCulture))\n                {\n                    // delete existing file\n                    if (!string.IsNullOrEmpty(settings.CustomThemeFileId))\n                    {\n                        await _fileService.RemoveFile(settings.CustomThemeFileId, userId);\n                    }\n\n                    // add new file\n                    try\n                    {\n                        var storedFile = await _fileService.AddFile(model.CustomThemeFile, userId);\n                        settings.CustomThemeFileId = storedFile.Id;\n                        settingsChanged = true;\n                    }\n                    catch (Exception e)\n                    {\n                        ModelState.AddModelError(nameof(settings.CustomThemeFile), $\"Could not save theme file: {e.Message}\");\n                    }\n                }\n                else\n                {\n                    ModelState.AddModelError(nameof(settings.CustomThemeFile), \"The uploaded theme file needs to be a CSS file\");\n                }\n            }\n            else if (RemoveCustomThemeFile && !string.IsNullOrEmpty(settings.CustomThemeFileId))\n            {\n                await _fileService.RemoveFile(settings.CustomThemeFileId, userId);\n                settings.CustomThemeFileId = null;\n                settingsChanged = true;\n            }\n\n            if (model.LogoFile != null)\n            {\n                if (model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))\n                {\n                    // delete existing image\n                    if (!string.IsNullOrEmpty(settings.LogoFileId))\n                    {\n                        await _fileService.RemoveFile(settings.LogoFileId, userId);\n                    }\n\n                    // add new image\n                    try\n                    {\n                        var storedFile = await _fileService.AddFile(model.LogoFile, userId);\n                        settings.LogoFileId = storedFile.Id;\n                        settingsChanged = true;\n                    }\n                    catch (Exception e)\n                    {\n                        ModelState.AddModelError(nameof(settings.LogoFile), $\"Could not save logo: {e.Message}\");\n                    }\n                }\n                else\n                {\n                    ModelState.AddModelError(nameof(settings.LogoFile), \"The uploaded logo file needs to be an image\");\n                }\n            }\n            else if (RemoveLogoFile && !string.IsNullOrEmpty(settings.LogoFileId))\n            {\n                await _fileService.RemoveFile(settings.LogoFileId, userId);\n                settings.LogoFileId = null;\n                settingsChanged = true;\n            }\n\n            if (model.CustomTheme && !string.IsNullOrEmpty(model.CustomThemeCssUri) && !Uri.IsWellFormedUriString(model.CustomThemeCssUri, UriKind.RelativeOrAbsolute))\n            {\n                ModelState.AddModelError(nameof(settings.CustomThemeCssUri), \"Please provide a non-empty theme URI\");\n            }\n\n            if (settings.CustomThemeExtension != model.CustomThemeExtension)\n            {\n                // Require a custom theme to be defined in that case\n                if (string.IsNullOrEmpty(model.CustomThemeCssUri) && string.IsNullOrEmpty(settings.CustomThemeFileId))\n                {\n                    ModelState.AddModelError(nameof(settings.CustomThemeFile), \"Please provide a custom theme\");\n                }\n                else\n                {\n                    settings.CustomThemeExtension = model.CustomThemeExtension;\n                    settingsChanged = true;\n                }\n            }\n\n            if (settings.CustomTheme != model.CustomTheme)\n            {\n                settings.CustomTheme = model.CustomTheme;\n                settingsChanged = true;\n            }\n\n            if (settingsChanged)\n            {\n                await _SettingsRepository.UpdateSetting(settings);\n                TempData[WellKnownTempData.SuccessMessage] = \"Theme settings updated successfully\";\n            }\n\n            return View(settings);\n        }\n\n        [Route(\"server/emails\")]\n        public async Task<IActionResult> Emails()\n        {\n            var data = (await _SettingsRepository.GetSettingAsync<EmailSettings>()) ?? new EmailSettings();\n            return View(new EmailsViewModel(data));\n        }\n\n        [Route(\"server/emails\")]\n        [HttpPost]\n        public async Task<IActionResult> Emails(EmailsViewModel model, string command)\n        {\n            if (command == \"Test\")\n            {\n                try\n                {\n                    if (model.PasswordSet)\n                    {\n                        var settings = await _SettingsRepository.GetSettingAsync<EmailSettings>() ?? new EmailSettings();\n                        model.Settings.Password = settings.Password;\n                    }\n                    model.Settings.Validate(\"Settings.\", ModelState);\n                    if (string.IsNullOrEmpty(model.TestEmail))\n                        ModelState.AddModelError(nameof(model.TestEmail), new RequiredAttribute().FormatErrorMessage(nameof(model.TestEmail)));\n                    if (!ModelState.IsValid)\n                        return View(model);\n                    using (var client = await model.Settings.CreateSmtpClient())\n                    using (var message = model.Settings.CreateMailMessage(MailboxAddress.Parse(model.TestEmail), \"BTCPay test\", \"BTCPay test\", false))\n                    {\n                        await client.SendAsync(message);\n                        await client.DisconnectAsync(true);\n                    }\n                    TempData[WellKnownTempData.SuccessMessage] = $\"Email sent to {model.TestEmail}. Please verify you received it.\";\n                }\n                catch (Exception ex)\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = ex.Message;\n                }\n                return View(model);\n            }\n            if (command == \"ResetPassword\")\n            {\n                var settings = await _SettingsRepository.GetSettingAsync<EmailSettings>() ?? new EmailSettings();\n                settings.Password = null;\n                await _SettingsRepository.UpdateSetting(settings);\n                TempData[WellKnownTempData.SuccessMessage] = \"Email server password reset\";\n                return RedirectToAction(nameof(Emails));\n            }\n            else // if (command == \"Save\")\n            {\n                if (model.Settings.From is not null && !MailboxAddressValidator.IsMailboxAddress(model.Settings.From))\n                {\n                    ModelState.AddModelError(\"Settings.From\", \"Invalid email\");\n                    return View(model);\n                }\n                var oldSettings = await _SettingsRepository.GetSettingAsync<EmailSettings>() ?? new EmailSettings();\n                if (new EmailsViewModel(oldSettings).PasswordSet)\n                {\n                    model.Settings.Password = oldSettings.Password;\n                }\n                await _SettingsRepository.UpdateSetting(model.Settings);\n                TempData[WellKnownTempData.SuccessMessage] = \"Email settings saved\";\n                return RedirectToAction(nameof(Emails));\n            }\n        }\n\n        [Route(\"server/logs/{file?}\")]\n        public async Task<IActionResult> LogsView(string? file = null, int offset = 0)\n        {\n            if (offset < 0)\n            {\n                offset = 0;\n            }\n\n            var vm = new LogsViewModel();\n\n            if (string.IsNullOrEmpty(_Options.LogFile))\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"File Logging Option not specified. \" +\n                                   \"You need to set debuglog and optionally \" +\n                                   \"debugloglevel in the configuration or through runtime arguments\";\n            }\n            else\n            {\n                var di = Directory.GetParent(_Options.LogFile);\n                if (di is null)\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = \"Could not load log files\";\n                    return View(\"Logs\", vm);\n                }\n\n                var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(_Options.LogFile);\n                var fileExtension = Path.GetExtension(_Options.LogFile) ?? string.Empty;\n                // We are checking if \"di\" is null above yet accessing GetFiles on it, this could lead to an exception?\n                var logFiles = di.GetFiles($\"{fileNameWithoutExtension}*{fileExtension}\");\n                vm.LogFileCount = logFiles.Length;\n                vm.LogFiles = logFiles\n                    .OrderBy(info => info.LastWriteTime)\n                    .Skip(offset)\n                    .Take(5)\n                    .ToList();\n                vm.LogFileOffset = offset;\n\n                if (string.IsNullOrEmpty(file) || !file.EndsWith(fileExtension, StringComparison.Ordinal))\n                    return View(\"Logs\", vm);\n                vm.Log = \"\";\n                var fi = vm.LogFiles.FirstOrDefault(o => o.Name == file);\n                if (fi == null)\n                    return NotFound();\n                try\n                {\n                    using var fileStream = new FileStream(\n                        fi.FullName,\n                        FileMode.Open,\n                        FileAccess.Read,\n                        FileShare.ReadWrite);\n                    using var reader = new StreamReader(fileStream);\n                    vm.Log = await reader.ReadToEndAsync();\n                }\n                catch\n                {\n                    return NotFound();\n                }\n            }\n\n            return View(\"Logs\", vm);\n        }\n    }\n}\n", "using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Extensions;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Data;\nusing BTCPayServer.Events;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.StoreViewModels;\nusing BTCPayServer.Payments;\nusing BTCPayServer.Services;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing NBitcoin;\nusing NBitcoin.DataEncoders;\nusing NBXplorer;\nusing NBXplorer.DerivationStrategy;\nusing NBXplorer.Models;\n\nnamespace BTCPayServer.Controllers\n{\n    public partial class UIStoresController\n    {\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}\")]\n        public ActionResult SetupWallet(WalletSetupViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out _);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(vm.CryptoCode, store);\n            vm.DerivationScheme = derivation?.AccountDerivation.ToString();\n\n            return View(vm);\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/import/{method?}\")]\n        public async Task<IActionResult> ImportWallet(WalletSetupViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out _, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var (hotWallet, rpcImport) = await CanUseHotWallet();\n            vm.Network = network;\n            vm.CanUseHotWallet = hotWallet;\n            vm.CanUseRPCImport = rpcImport;\n            vm.SupportTaproot = network.NBitcoinNetwork.Consensus.SupportTaproot;\n            vm.SupportSegwit = network.NBitcoinNetwork.Consensus.SupportSegwit;\n\n            if (vm.Method == null)\n            {\n                vm.Method = WalletSetupMethod.ImportOptions;\n            }\n            else if (vm.Method == WalletSetupMethod.Seed)\n            {\n                vm.SetupRequest = new WalletSetupRequest();\n            }\n\n            return View(vm.ViewName, vm);\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/modify\")]\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/import/{method}\")]\n        public async Task<IActionResult> UpdateWallet(WalletSetupViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            vm.Network = network;\n            DerivationSchemeSettings strategy = null;\n\n            var wallet = _WalletProvider.GetWallet(network);\n            if (wallet == null)\n            {\n                return NotFound();\n            }\n\n            if (vm.WalletFile != null)\n            {\n                if (!DerivationSchemeSettings.TryParseFromWalletFile(await ReadAllText(vm.WalletFile), network, out strategy, out var error))\n                {\n                    ModelState.AddModelError(nameof(vm.WalletFile), $\"Importing wallet failed: {error}\");\n                    return View(vm.ViewName, vm);\n                }\n            }\n            else if (!string.IsNullOrEmpty(vm.WalletFileContent))\n            {\n                if (!DerivationSchemeSettings.TryParseFromWalletFile(vm.WalletFileContent, network, out strategy, out var error))\n                {\n                    ModelState.AddModelError(nameof(vm.WalletFileContent), $\"QR import failed: {error}\");\n                    return View(vm.ViewName, vm);\n                }\n            }\n            else if (!string.IsNullOrEmpty(vm.DerivationScheme))\n            {\n                try\n                {\n                    strategy = ParseDerivationStrategy(vm.DerivationScheme, network);\n                    strategy.Source = \"ManualDerivationScheme\";\n                    if (!string.IsNullOrEmpty(vm.AccountKey))\n                    {\n                        var accountKey = new BitcoinExtPubKey(vm.AccountKey, network.NBitcoinNetwork);\n                        var accountSettings =\n                            strategy.AccountKeySettings.FirstOrDefault(a => a.AccountKey == accountKey);\n                        if (accountSettings != null)\n                        {\n                            accountSettings.AccountKeyPath =\n                                vm.KeyPath == null ? null : KeyPath.Parse(vm.KeyPath);\n                            accountSettings.RootFingerprint = string.IsNullOrEmpty(vm.RootFingerprint)\n                                ? null\n                                : new HDFingerprint(Encoders.Hex.DecodeData(vm.RootFingerprint));\n                        }\n                    }\n                    vm.DerivationScheme = strategy.AccountDerivation.ToString();\n                    ModelState.Remove(nameof(vm.DerivationScheme));\n                }\n                catch (Exception ex)\n                {\n                    ModelState.AddModelError(nameof(vm.DerivationScheme), $\"Invalid wallet format: {ex.Message}\");\n                    return View(vm.ViewName, vm);\n                }\n            }\n            else if (!string.IsNullOrEmpty(vm.Config))\n            {\n                if (!DerivationSchemeSettings.TryParseFromJson(UnprotectString(vm.Config), network, out strategy))\n                {\n                    ModelState.AddModelError(nameof(vm.Config), \"Config file was not in the correct format\");\n                    return View(vm.ViewName, vm);\n                }\n            }\n\n            if (strategy is null)\n            {\n                ModelState.AddModelError(nameof(vm.DerivationScheme), \"Please provide your extended public key\");\n                return View(vm.ViewName, vm);\n            }\n\n            vm.Config = ProtectString(strategy.ToJson());\n            ModelState.Remove(nameof(vm.Config));\n\n            PaymentMethodId paymentMethodId = new PaymentMethodId(network.CryptoCode, PaymentTypes.BTCLike);\n            var storeBlob = store.GetStoreBlob();\n            if (vm.Confirmation)\n            {\n                try\n                {\n                    await wallet.TrackAsync(strategy.AccountDerivation);\n                    store.SetSupportedPaymentMethod(paymentMethodId, strategy);\n                    storeBlob.SetExcluded(paymentMethodId, false);\n                    storeBlob.PayJoinEnabled = strategy.IsHotWallet && !(vm.SetupRequest?.PayJoinEnabled is false);\n                    store.SetStoreBlob(storeBlob);\n                }\n                catch\n                {\n                    ModelState.AddModelError(nameof(vm.DerivationScheme), \"Invalid derivation scheme\");\n                    return View(vm.ViewName, vm);\n                }\n                await _Repo.UpdateStore(store);\n                _EventAggregator.Publish(new WalletChangedEvent { WalletId = new WalletId(vm.StoreId, vm.CryptoCode) });\n\n                TempData[WellKnownTempData.SuccessMessage] = $\"Wallet settings for {network.CryptoCode} have been updated.\";\n\n                // This is success case when derivation scheme is added to the store\n                return RedirectToAction(nameof(WalletSettings), new { storeId = vm.StoreId, cryptoCode = vm.CryptoCode });\n            }\n            return ConfirmAddresses(vm, strategy);\n        }\n\n        private string ProtectString(string str)\n        {\n            return Convert.ToBase64String(DataProtector.Protect(Encoding.UTF8.GetBytes(str)));\n        }\n        private string UnprotectString(string str)\n        {\n            return Encoding.UTF8.GetString(DataProtector.Unprotect(Convert.FromBase64String(str)));\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/generate/{method?}\")]\n        public async Task<IActionResult> GenerateWallet(WalletSetupViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var isHotWallet = vm.Method == WalletSetupMethod.HotWallet;\n            var (hotWallet, rpcImport) = await CanUseHotWallet();\n            if (isHotWallet && !hotWallet)\n            {\n                return NotFound();\n            }\n\n            vm.CanUseHotWallet = hotWallet;\n            vm.CanUseRPCImport = rpcImport;\n            vm.SupportTaproot = network.NBitcoinNetwork.Consensus.SupportTaproot;\n            vm.SupportSegwit = network.NBitcoinNetwork.Consensus.SupportSegwit;\n            vm.Network = network;\n\n            if (vm.Method == null)\n            {\n                vm.Method = WalletSetupMethod.GenerateOptions;\n            }\n            else\n            {\n                var canUsePayJoin = hotWallet && isHotWallet && network.SupportPayJoin;\n                vm.SetupRequest = new WalletSetupRequest\n                {\n                    SavePrivateKeys = isHotWallet,\n                    CanUsePayJoin = canUsePayJoin,\n                    PayJoinEnabled = canUsePayJoin\n                };\n            }\n\n            return View(vm.ViewName, vm);\n        }\n        internal GenerateWalletResponse GenerateWalletResponse;\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/generate/{method}\")]\n        public async Task<IActionResult> GenerateWallet(string storeId, string cryptoCode, WalletSetupMethod method, WalletSetupRequest request)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var (hotWallet, rpcImport) = await CanUseHotWallet();\n            if (!hotWallet && request.SavePrivateKeys || !rpcImport && request.ImportKeysToRPC)\n            {\n                return NotFound();\n            }\n\n            var client = _ExplorerProvider.GetExplorerClient(cryptoCode);\n            var isImport = method == WalletSetupMethod.Seed;\n            var vm = new WalletSetupViewModel\n            {\n                StoreId = storeId,\n                CryptoCode = cryptoCode,\n                Method = method,\n                SetupRequest = request,\n                Confirmation = string.IsNullOrEmpty(request.ExistingMnemonic),\n                Network = network,\n                Source = isImport ? \"SeedImported\" : \"NBXplorerGenerated\",\n                IsHotWallet = isImport ? request.SavePrivateKeys : method == WalletSetupMethod.HotWallet,\n                DerivationSchemeFormat = \"BTCPay\",\n                CanUseHotWallet = hotWallet,\n                CanUseRPCImport = rpcImport,\n                SupportTaproot = network.NBitcoinNetwork.Consensus.SupportTaproot,\n                SupportSegwit = network.NBitcoinNetwork.Consensus.SupportSegwit\n            };\n\n            if (isImport && string.IsNullOrEmpty(request.ExistingMnemonic))\n            {\n                ModelState.AddModelError(nameof(request.ExistingMnemonic), \"Please provide your existing seed\");\n                return View(vm.ViewName, vm);\n            }\n\n            GenerateWalletResponse response;\n            try\n            {\n                response = await client.GenerateWalletAsync(request);\n                if (response == null)\n                {\n                    throw new Exception(\"Node unavailable\");\n                }\n            }\n            catch (Exception e)\n            {\n                TempData.SetStatusMessageModel(new StatusMessageModel\n                {\n                    Severity = StatusMessageModel.StatusSeverity.Error,\n                    Html = $\"There was an error generating your wallet: {e.Message}\"\n                });\n                return View(vm.ViewName, vm);\n            }\n\n            var derivationSchemeSettings = new DerivationSchemeSettings(response.DerivationScheme, network);\n            if (method == WalletSetupMethod.Seed)\n            {\n                derivationSchemeSettings.Source = \"ImportedSeed\";\n                derivationSchemeSettings.IsHotWallet = request.SavePrivateKeys;\n            }\n            else\n            {\n                derivationSchemeSettings.Source = \"NBXplorerGenerated\";\n                derivationSchemeSettings.IsHotWallet = method == WalletSetupMethod.HotWallet;\n            }\n\n            var accountSettings = derivationSchemeSettings.GetSigningAccountKeySettings();\n            accountSettings.AccountKeyPath = response.AccountKeyPath.KeyPath;\n            accountSettings.RootFingerprint = response.AccountKeyPath.MasterFingerprint;\n            derivationSchemeSettings.AccountOriginal = response.DerivationScheme.ToString();\n\n            // Set wallet properties from generate response\n            vm.RootFingerprint = response.AccountKeyPath.MasterFingerprint.ToString();\n            vm.AccountKey = response.AccountHDKey.Neuter().ToWif();\n            vm.KeyPath = response.AccountKeyPath.KeyPath.ToString();\n            vm.Config = ProtectString(derivationSchemeSettings.ToJson());\n\n            var result = await UpdateWallet(vm);\n\n            if (!ModelState.IsValid || !(result is RedirectToActionResult))\n                return result;\n\n            if (!isImport)\n            {\n                TempData.SetStatusMessageModel(new StatusMessageModel\n                {\n                    Severity = StatusMessageModel.StatusSeverity.Success,\n                    Html = \"<span class='text-centered'>Your wallet has been generated.</span>\"\n                });\n                var seedVm = new RecoverySeedBackupViewModel\n                {\n                    CryptoCode = cryptoCode,\n                    Mnemonic = response.Mnemonic,\n                    Passphrase = response.Passphrase,\n                    IsStored = request.SavePrivateKeys,\n                    ReturnUrl = Url.Action(nameof(GenerateWalletConfirm), new { storeId, cryptoCode })\n                };\n                if (_BTCPayEnv.IsDeveloping)\n                {\n                    GenerateWalletResponse = response;\n                }\n                return this.RedirectToRecoverySeedBackup(seedVm);\n            }\n\n            TempData.SetStatusMessageModel(new StatusMessageModel\n            {\n                Severity = StatusMessageModel.StatusSeverity.Warning,\n                Html = \"Please check your addresses and confirm.\"\n            });\n            return result;\n        }\n\n        // The purpose of this action is to show the user a success message, which confirms\n        // that the store settings have been updated after generating a new wallet.\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/generate/confirm\")]\n        public ActionResult GenerateWalletConfirm(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out _, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            TempData[WellKnownTempData.SuccessMessage] = $\"Wallet settings for {network.CryptoCode} have been updated.\";\n\n            var walletId = new WalletId(storeId, cryptoCode);\n            return RedirectToAction(nameof(UIWalletsController.WalletTransactions), \"UIWallets\", new { walletId });\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/settings\")]\n        public async Task<IActionResult> WalletSettings(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            var storeBlob = store.GetStoreBlob();\n            var excludeFilters = storeBlob.GetExcludedPaymentMethods();\n            (bool canUseHotWallet, bool rpcImport) = await CanUseHotWallet();\n            var client = _ExplorerProvider.GetExplorerClient(network);\n\n            var vm = new WalletSettingsViewModel\n            {\n                StoreId = storeId,\n                CryptoCode = cryptoCode,\n                WalletId = new WalletId(storeId, cryptoCode),\n                Enabled = !excludeFilters.Match(derivation.PaymentId),\n                Network = network,\n                IsHotWallet = derivation.IsHotWallet,\n                Source = derivation.Source,\n                RootFingerprint = derivation.GetSigningAccountKeySettings().RootFingerprint.ToString(),\n                DerivationScheme = derivation.AccountDerivation.ToString(),\n                DerivationSchemeInput = derivation.AccountOriginal,\n                KeyPath = derivation.GetSigningAccountKeySettings().AccountKeyPath?.ToString(),\n                UriScheme = derivation.Network.NBitcoinNetwork.UriScheme,\n                Label = derivation.Label,\n                SelectedSigningKey = derivation.SigningKey.ToString(),\n                NBXSeedAvailable = derivation.IsHotWallet &&\n                                   canUseHotWallet &&\n                                   !string.IsNullOrEmpty(await client.GetMetadataAsync<string>(derivation.AccountDerivation,\n                                       WellknownMetadataKeys.MasterHDKey)),\n                AccountKeys = derivation.AccountKeySettings\n                    .Select(e => new WalletSettingsAccountKeyViewModel\n                    {\n                        AccountKey = e.AccountKey.ToString(),\n                        MasterFingerprint = e.RootFingerprint is HDFingerprint fp ? fp.ToString() : null,\n                        AccountKeyPath = e.AccountKeyPath == null ? \"\" : $\"m/{e.AccountKeyPath}\"\n                    }).ToList(),\n                Config = ProtectString(derivation.ToJson()),\n                PayJoinEnabled = storeBlob.PayJoinEnabled,\n                MonitoringExpiration = (int)storeBlob.MonitoringExpiration.TotalMinutes,\n                SpeedPolicy = store.SpeedPolicy,\n                ShowRecommendedFee = storeBlob.ShowRecommendedFee,\n                RecommendedFeeBlockTarget = storeBlob.RecommendedFeeBlockTarget,\n                CanUseHotWallet = canUseHotWallet,\n                CanUseRPCImport = rpcImport,\n                CanUsePayJoin = canUseHotWallet && store\n                    .GetSupportedPaymentMethods(_NetworkProvider)\n                    .OfType<DerivationSchemeSettings>()\n                    .Any(settings => settings.Network.SupportPayJoin && settings.IsHotWallet),\n                StoreName = store.StoreName,\n\n            };\n\n            ViewData[\"ReplaceDescription\"] = WalletReplaceWarning(derivation.IsHotWallet);\n            ViewData[\"RemoveDescription\"] = WalletRemoveWarning(derivation.IsHotWallet, network.CryptoCode);\n\n            return View(vm);\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/settings/wallet\")]\n        public async Task<IActionResult> UpdateWalletSettings(WalletSettingsViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out _);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(vm.CryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            var storeBlob = store.GetStoreBlob();\n            var excludeFilters = storeBlob.GetExcludedPaymentMethods();\n            var currentlyEnabled = !excludeFilters.Match(derivation.PaymentId);\n            bool enabledChanged = currentlyEnabled != vm.Enabled;\n            bool needUpdate = enabledChanged;\n            string errorMessage = null;\n\n            if (enabledChanged)\n            {\n                storeBlob.SetExcluded(derivation.PaymentId, !vm.Enabled);\n                store.SetStoreBlob(storeBlob);\n            }\n\n            if (derivation.Label != vm.Label)\n            {\n                needUpdate = true;\n                derivation.Label = vm.Label;\n            }\n\n            var signingKey = string.IsNullOrEmpty(vm.SelectedSigningKey)\n                ? null\n                : new BitcoinExtPubKey(vm.SelectedSigningKey, derivation.Network.NBitcoinNetwork);\n            if (derivation.SigningKey != signingKey && signingKey != null)\n            {\n                needUpdate = true;\n                derivation.SigningKey = signingKey;\n            }\n\n            for (int i = 0; i < derivation.AccountKeySettings.Length; i++)\n            {\n                KeyPath accountKeyPath;\n                HDFingerprint? rootFingerprint;\n\n                try\n                {\n                    accountKeyPath = string.IsNullOrWhiteSpace(vm.AccountKeys[i].AccountKeyPath)\n                        ? null\n                        : new KeyPath(vm.AccountKeys[i].AccountKeyPath);\n\n                    if (accountKeyPath != null && derivation.AccountKeySettings[i].AccountKeyPath != accountKeyPath)\n                    {\n                        needUpdate = true;\n                        derivation.AccountKeySettings[i].AccountKeyPath = accountKeyPath;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    errorMessage = $\"{ex.Message}: {vm.AccountKeys[i].AccountKeyPath}\";\n                }\n\n                try\n                {\n                    rootFingerprint = string.IsNullOrWhiteSpace(vm.AccountKeys[i].MasterFingerprint)\n                        ? (HDFingerprint?)null\n                        : new HDFingerprint(Encoders.Hex.DecodeData(vm.AccountKeys[i].MasterFingerprint));\n\n                    if (rootFingerprint != null && derivation.AccountKeySettings[i].RootFingerprint != rootFingerprint)\n                    {\n                        needUpdate = true;\n                        derivation.AccountKeySettings[i].RootFingerprint = rootFingerprint;\n                    }\n                }\n                catch (Exception ex)\n                {\n                    errorMessage = $\"{ex.Message}: {vm.AccountKeys[i].MasterFingerprint}\";\n                }\n            }\n\n            if (needUpdate)\n            {\n                store.SetSupportedPaymentMethod(derivation);\n\n                await _Repo.UpdateStore(store);\n\n                if (string.IsNullOrEmpty(errorMessage))\n                {\n                    var successMessage = \"Wallet settings successfully updated.\";\n                    if (enabledChanged)\n                    {\n                        _EventAggregator.Publish(new WalletChangedEvent { WalletId = new WalletId(vm.StoreId, vm.CryptoCode) });\n                        successMessage += $\" {vm.CryptoCode} on-chain payments are now {(vm.Enabled ? \"enabled\" : \"disabled\")} for this store.\";\n                    }\n\n                    TempData[WellKnownTempData.SuccessMessage] = successMessage;\n                }\n                else\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = errorMessage;\n                }\n            }\n\n            return RedirectToAction(nameof(WalletSettings), new { vm.StoreId, vm.CryptoCode });\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/settings/payment\")]\n        public async Task<IActionResult> UpdatePaymentSettings(WalletSettingsViewModel vm)\n        {\n            var checkResult = IsAvailable(vm.CryptoCode, out var store, out _);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(vm.CryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            bool needUpdate = false;\n            if (store.SpeedPolicy != vm.SpeedPolicy)\n            {\n                needUpdate = true;\n                store.SpeedPolicy = vm.SpeedPolicy;\n            }\n\n            var blob = store.GetStoreBlob();\n            var payjoinChanged = blob.PayJoinEnabled != vm.PayJoinEnabled;\n            blob.MonitoringExpiration = TimeSpan.FromMinutes(vm.MonitoringExpiration);\n            blob.ShowRecommendedFee = vm.ShowRecommendedFee;\n            blob.RecommendedFeeBlockTarget = vm.RecommendedFeeBlockTarget;\n            blob.PayJoinEnabled = vm.PayJoinEnabled;\n\n            if (store.SetStoreBlob(blob))\n            {\n                needUpdate = true;\n            }\n\n            if (needUpdate)\n            {\n                await _Repo.UpdateStore(store);\n\n                TempData[WellKnownTempData.SuccessMessage] = \"Payment settings successfully updated\";\n\n                if (payjoinChanged && blob.PayJoinEnabled)\n                {\n                    var problematicPayjoinEnabledMethods = store.GetSupportedPaymentMethods(_NetworkProvider)\n                        .OfType<DerivationSchemeSettings>()\n                        .Where(settings => settings.Network.SupportPayJoin && !settings.IsHotWallet)\n                        .Select(settings => settings.PaymentId.CryptoCode)\n                        .ToArray();\n\n                    if (problematicPayjoinEnabledMethods.Any())\n                    {\n                        TempData.Remove(WellKnownTempData.SuccessMessage);\n                        TempData.SetStatusMessageModel(new StatusMessageModel()\n                        {\n                            Severity = StatusMessageModel.StatusSeverity.Warning,\n                            Html = $\"The payment settings were updated successfully. However, PayJoin will not work for {string.Join(\", \", problematicPayjoinEnabledMethods)} until you configure them to be a <a href='https://docs.btcpayserver.org/HotWallet/' class='alert-link' target='_blank'>hot wallet</a>.\"\n                        });\n                    }\n                }\n            }\n\n            return RedirectToAction(nameof(WalletSettings), new { vm.StoreId, vm.CryptoCode });\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/seed\")]\n        public async Task<IActionResult> WalletSeed(string storeId, string cryptoCode, CancellationToken cancellationToken = default)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            (bool canUseHotWallet, bool _) = await CanUseHotWallet();\n            if (!canUseHotWallet)\n            {\n                return NotFound();\n            }\n\n            var client = _ExplorerProvider.GetExplorerClient(network);\n            if (await GetSeed(client, derivation) != null)\n            {\n                var mnemonic = await client.GetMetadataAsync<string>(derivation.AccountDerivation,\n                    WellknownMetadataKeys.Mnemonic, cancellationToken);\n                var recoveryVm = new RecoverySeedBackupViewModel\n                {\n                    CryptoCode = cryptoCode,\n                    Mnemonic = mnemonic,\n                    IsStored = true,\n                    RequireConfirm = false,\n                    ReturnUrl = Url.Action(nameof(WalletSettings), new { storeId, cryptoCode })\n                };\n                return this.RedirectToRecoverySeedBackup(recoveryVm);\n            }\n\n            TempData.SetStatusMessageModel(new StatusMessageModel\n            {\n                Severity = StatusMessageModel.StatusSeverity.Error,\n                Message = \"The seed was not found\"\n            });\n\n            return RedirectToAction(nameof(WalletSettings));\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/replace\")]\n        public ActionResult ReplaceWallet(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n\n            return View(\"Confirm\", new ConfirmModel\n            {\n                Title = $\"Replace {network.CryptoCode} wallet\",\n                Description = WalletReplaceWarning(derivation.IsHotWallet),\n                Action = \"Setup new wallet\"\n            });\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/replace\")]\n        public IActionResult ConfirmReplaceWallet(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out _);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            return RedirectToAction(nameof(SetupWallet), new { storeId, cryptoCode });\n        }\n\n        [HttpGet(\"{storeId}/onchain/{cryptoCode}/delete\")]\n        public ActionResult DeleteWallet(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n\n            return View(\"Confirm\", new ConfirmModel\n            {\n                Title = $\"Remove {network.CryptoCode} wallet\",\n                Description = WalletRemoveWarning(derivation.IsHotWallet, network.CryptoCode),\n                Action = \"Remove\"\n            });\n        }\n\n        [HttpPost(\"{storeId}/onchain/{cryptoCode}/delete\")]\n        public async Task<IActionResult> ConfirmDeleteWallet(string storeId, string cryptoCode)\n        {\n            var checkResult = IsAvailable(cryptoCode, out var store, out var network);\n            if (checkResult != null)\n            {\n                return checkResult;\n            }\n\n            var derivation = GetExistingDerivationStrategy(cryptoCode, store);\n            if (derivation == null)\n            {\n                return NotFound();\n            }\n\n            PaymentMethodId paymentMethodId = new PaymentMethodId(network.CryptoCode, PaymentTypes.BTCLike);\n            store.SetSupportedPaymentMethod(paymentMethodId, null);\n\n            await _Repo.UpdateStore(store);\n            _EventAggregator.Publish(new WalletChangedEvent { WalletId = new WalletId(storeId, cryptoCode) });\n\n            TempData[WellKnownTempData.SuccessMessage] =\n                $\"On-Chain payment for {network.CryptoCode} has been removed.\";\n\n            return RedirectToAction(nameof(GeneralSettings), new { storeId });\n        }\n\n        private IActionResult ConfirmAddresses(WalletSetupViewModel vm, DerivationSchemeSettings strategy)\n        {\n            vm.DerivationScheme = strategy.AccountDerivation.ToString();\n            var deposit = new KeyPathTemplates(null).GetKeyPathTemplate(DerivationFeature.Deposit);\n\n            if (!string.IsNullOrEmpty(vm.DerivationScheme))\n            {\n                var line = strategy.AccountDerivation.GetLineFor(deposit);\n\n                for (uint i = 0; i < 10; i++)\n                {\n                    var keyPath = deposit.GetKeyPath(i);\n                    var rootedKeyPath = vm.GetAccountKeypath()?.Derive(keyPath);\n                    var derivation = line.Derive(i);\n                    var address = strategy.Network.NBXplorerNetwork.CreateAddress(strategy.AccountDerivation,\n                        line.KeyPathTemplate.GetKeyPath(i),\n                        derivation.ScriptPubKey).ToString();\n                    vm.AddressSamples.Add((keyPath.ToString(), address, rootedKeyPath));\n                }\n            }\n\n            vm.Confirmation = true;\n            ModelState.Remove(nameof(vm.Config)); // Remove the cached value\n\n            return View(\"ImportWallet/ConfirmAddresses\", vm);\n        }\n\n        private ActionResult IsAvailable(string cryptoCode, out StoreData store, out BTCPayNetwork network)\n        {\n            store = HttpContext.GetStoreData();\n            network = cryptoCode == null ? null : _ExplorerProvider.GetNetwork(cryptoCode);\n\n            return store == null || network == null ? NotFound() : null;\n        }\n\n        private DerivationSchemeSettings GetExistingDerivationStrategy(string cryptoCode, StoreData store)\n        {\n            var id = new PaymentMethodId(cryptoCode, PaymentTypes.BTCLike);\n            var existing = store.GetSupportedPaymentMethods(_NetworkProvider)\n                .OfType<DerivationSchemeSettings>()\n                .FirstOrDefault(d => d.PaymentId == id);\n            return existing;\n        }\n\n        private async Task<string> GetSeed(ExplorerClient client, DerivationSchemeSettings derivation)\n        {\n            return derivation.IsHotWallet &&\n                   await client.GetMetadataAsync<string>(derivation.AccountDerivation, WellknownMetadataKeys.MasterHDKey) is string seed &&\n                   !string.IsNullOrEmpty(seed) ? seed : null;\n        }\n\n        private async Task<(bool HotWallet, bool RPCImport)> CanUseHotWallet()\n        {\n            return await _authorizationService.CanUseHotWallet(_policiesSettings, User);\n        }\n\n        private async Task<string> ReadAllText(IFormFile file)\n        {\n            using var stream = new StreamReader(file.OpenReadStream());\n            return await stream.ReadToEndAsync();\n        }\n\n        private string WalletWarning(bool isHotWallet, string info)\n        {\n            var walletType = isHotWallet ? \"hot\" : \"watch-only\";\n            var additionalText = isHotWallet\n                ? \"\"\n                : \" or imported it into an external wallet. If you no longer have access to your private key (recovery seed), immediately replace the wallet\";\n            return\n                $\"<p class=\\\"text-danger fw-bold\\\">Please note that this is a <strong>{Html.Encode(walletType)} wallet</strong>!</p>\" +\n                $\"<p class=\\\"text-danger fw-bold\\\">Do not proceed if you have not backed up the wallet{Html.Encode(additionalText)}.</p>\" +\n                $\"<p class=\\\"text-start mb-0\\\">This action will erase the current wallet data from the server. {Html.Encode(info)}</p>\";\n        }\n\n        private string WalletReplaceWarning(bool isHotWallet)\n        {\n            return WalletWarning(isHotWallet,\n                \"The current wallet will be replaced once you finish the setup of the new wallet. \" +\n                \"If you cancel the setup, the current wallet will stay active.\");\n        }\n\n        private string WalletRemoveWarning(bool isHotWallet, string cryptoCode)\n        {\n            return WalletWarning(isHotWallet,\n                $\"The store won't be able to receive {cryptoCode} onchain payments until a new wallet is set up.\");\n        }\n    }\n}\n", "#nullable enable\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing BTCPayServer.Abstractions.Constants;\nusing BTCPayServer.Abstractions.Contracts;\nusing BTCPayServer.Abstractions.Models;\nusing BTCPayServer.Client;\nusing BTCPayServer.Configuration;\nusing BTCPayServer.Data;\nusing BTCPayServer.HostedServices;\nusing BTCPayServer.Models;\nusing BTCPayServer.Models.StoreViewModels;\nusing BTCPayServer.Payments;\nusing BTCPayServer.Payments.Lightning;\nusing BTCPayServer.Rating;\nusing BTCPayServer.Security.Bitpay;\nusing BTCPayServer.Services;\nusing BTCPayServer.Services.Apps;\nusing BTCPayServer.Services.Invoices;\nusing BTCPayServer.Services.Rates;\nusing BTCPayServer.Services.Stores;\nusing BTCPayServer.Services.Wallets;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.DataProtection;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Rendering;\nusing Microsoft.Extensions.Options;\nusing NBitcoin;\nusing NBitcoin.DataEncoders;\nusing StoreData = BTCPayServer.Data.StoreData;\n\nnamespace BTCPayServer.Controllers\n{\n    [Route(\"stores\")]\n    [Authorize(AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n    [Authorize(Policy = Policies.CanModifyStoreSettings, AuthenticationSchemes = AuthenticationSchemes.Cookie)]\n    [AutoValidateAntiforgeryToken]\n    public partial class UIStoresController : Controller\n    {\n        public UIStoresController(\n            IServiceProvider serviceProvider,\n            BTCPayServerOptions btcpayServerOptions,\n            BTCPayServerEnvironment btcpayEnv,\n            StoreRepository repo,\n            TokenRepository tokenRepo,\n            UserManager<ApplicationUser> userManager,\n            BitpayAccessTokenController tokenController,\n            BTCPayWalletProvider walletProvider,\n            BTCPayNetworkProvider networkProvider,\n            RateFetcher rateFactory,\n            ExplorerClientProvider explorerProvider,\n            LanguageService langService,\n            PaymentMethodHandlerDictionary paymentMethodHandlerDictionary,\n            PoliciesSettings policiesSettings,\n            IAuthorizationService authorizationService,\n            EventAggregator eventAggregator,\n            AppService appService,\n            IFileService fileService,\n            WebhookSender webhookNotificationManager,\n            IDataProtectionProvider dataProtector,\n            IOptions<LightningNetworkOptions> lightningNetworkOptions,\n            IOptions<ExternalServicesOptions> externalServiceOptions,\n            IHtmlHelper html)\n        {\n            _RateFactory = rateFactory;\n            _Repo = repo;\n            _TokenRepository = tokenRepo;\n            _UserManager = userManager;\n            _LangService = langService;\n            _TokenController = tokenController;\n            _WalletProvider = walletProvider;\n            _paymentMethodHandlerDictionary = paymentMethodHandlerDictionary;\n            _policiesSettings = policiesSettings;\n            _authorizationService = authorizationService;\n            _appService = appService;\n            _fileService = fileService;\n            DataProtector = dataProtector.CreateProtector(\"ConfigProtector\");\n            WebhookNotificationManager = webhookNotificationManager;\n            LightningNetworkOptions = lightningNetworkOptions.Value;\n            _EventAggregator = eventAggregator;\n            _NetworkProvider = networkProvider;\n            _ExplorerProvider = explorerProvider;\n            _ServiceProvider = serviceProvider;\n            _BtcpayServerOptions = btcpayServerOptions;\n            _BTCPayEnv = btcpayEnv;\n            _externalServiceOptions = externalServiceOptions;\n            Html = html;\n        }\n\n        readonly BTCPayServerOptions _BtcpayServerOptions;\n        readonly BTCPayServerEnvironment _BTCPayEnv;\n        readonly IServiceProvider _ServiceProvider;\n        readonly BTCPayNetworkProvider _NetworkProvider;\n        readonly BTCPayWalletProvider _WalletProvider;\n        readonly BitpayAccessTokenController _TokenController;\n        readonly StoreRepository _Repo;\n        readonly TokenRepository _TokenRepository;\n        readonly UserManager<ApplicationUser> _UserManager;\n        readonly RateFetcher _RateFactory;\n        private readonly ExplorerClientProvider _ExplorerProvider;\n        private readonly LanguageService _LangService;\n        private readonly PaymentMethodHandlerDictionary _paymentMethodHandlerDictionary;\n        private readonly PoliciesSettings _policiesSettings;\n        private readonly IAuthorizationService _authorizationService;\n        private readonly AppService _appService;\n        private readonly IFileService _fileService;\n        private readonly EventAggregator _EventAggregator;\n        private readonly IOptions<ExternalServicesOptions> _externalServiceOptions;\n\n        public string? GeneratedPairingCode { get; set; }\n        public WebhookSender WebhookNotificationManager { get; }\n        public IHtmlHelper Html { get; }\n        public LightningNetworkOptions LightningNetworkOptions { get; }\n        public IDataProtector DataProtector { get; }\n\n        [TempData]\n        public bool StoreNotConfigured\n        {\n            get; set;\n        }\n\n        [HttpGet]\n        [Route(\"{storeId}/users\")]\n        public async Task<IActionResult> StoreUsers()\n        {\n            StoreUsersViewModel vm = new StoreUsersViewModel();\n            await FillUsers(vm);\n            return View(vm);\n        }\n\n        private async Task FillUsers(StoreUsersViewModel vm)\n        {\n            var users = await _Repo.GetStoreUsers(CurrentStore.Id);\n            vm.StoreId = CurrentStore.Id;\n            vm.Users = users.Select(u => new StoreUsersViewModel.StoreUserViewModel()\n            {\n                Email = u.Email,\n                Id = u.Id,\n                Role = u.Role\n            }).ToList();\n        }\n\n        public StoreData CurrentStore => HttpContext.GetStoreData();\n\n        [HttpPost]\n        [Route(\"{storeId}/users\")]\n        public async Task<IActionResult> StoreUsers(StoreUsersViewModel vm)\n        {\n            await FillUsers(vm);\n            if (!ModelState.IsValid)\n            {\n                return View(vm);\n            }\n            var user = await _UserManager.FindByEmailAsync(vm.Email);\n            if (user == null)\n            {\n                ModelState.AddModelError(nameof(vm.Email), \"User not found\");\n                return View(vm);\n            }\n            if (!StoreRoles.AllRoles.Contains(vm.Role))\n            {\n                ModelState.AddModelError(nameof(vm.Role), \"Invalid role\");\n                return View(vm);\n            }\n            if (!await _Repo.AddStoreUser(CurrentStore.Id, user.Id, vm.Role))\n            {\n                ModelState.AddModelError(nameof(vm.Email), \"The user already has access to this store\");\n                return View(vm);\n            }\n            TempData[WellKnownTempData.SuccessMessage] = \"User added successfully.\";\n            return RedirectToAction(nameof(StoreUsers));\n        }\n\n        [HttpGet(\"{storeId}/users/{userId}/delete\")]\n        public async Task<IActionResult> DeleteStoreUser(string userId)\n        {\n            var user = await _UserManager.FindByIdAsync(userId);\n            if (user == null)\n                return NotFound();\n            return View(\"Confirm\", new ConfirmModel(\"Remove store user\", $\"This action will prevent <strong>{Html.Encode(user.Email)}</strong> from accessing this store and its settings. Are you sure?\", \"Remove\"));\n        }\n\n        [HttpPost(\"{storeId}/users/{userId}/delete\")]\n        public async Task<IActionResult> DeleteStoreUserPost(string storeId, string userId)\n        {\n            if (await _Repo.RemoveStoreUser(storeId, userId))\n                TempData[WellKnownTempData.SuccessMessage] = \"User removed successfully.\";\n            else\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"Removing this user would result in the store having no owner.\";\n            }\n            return RedirectToAction(nameof(StoreUsers), new { storeId, userId });\n        }\n\n        [HttpGet(\"{storeId}/rates\")]\n        public IActionResult Rates()\n        {\n            var exchanges = GetSupportedExchanges();\n            var storeBlob = CurrentStore.GetStoreBlob();\n            var vm = new RatesViewModel();\n            vm.SetExchangeRates(exchanges, storeBlob.PreferredExchange ?? storeBlob.GetRecommendedExchange());\n            vm.Spread = (double)(storeBlob.Spread * 100m);\n            vm.StoreId = CurrentStore.Id;\n            vm.Script = storeBlob.GetRateRules(_NetworkProvider).ToString();\n            vm.DefaultScript = storeBlob.GetDefaultRateRules(_NetworkProvider).ToString();\n            vm.AvailableExchanges = exchanges;\n            vm.DefaultCurrencyPairs = storeBlob.GetDefaultCurrencyPairString();\n            vm.ShowScripting = storeBlob.RateScripting;\n            return View(vm);\n        }\n\n        [HttpPost(\"{storeId}/rates\")]\n        public async Task<IActionResult> Rates(RatesViewModel model, string? command = null, string? storeId = null, CancellationToken cancellationToken = default)\n        {\n            if (command == \"scripting-on\")\n            {\n                return RedirectToAction(nameof(ShowRateRules), new { scripting = true, storeId = model.StoreId });\n            }\n            else if (command == \"scripting-off\")\n            {\n                return RedirectToAction(nameof(ShowRateRules), new { scripting = false, storeId = model.StoreId });\n            }\n\n            var exchanges = GetSupportedExchanges();\n            model.SetExchangeRates(exchanges, model.PreferredExchange ?? this.HttpContext.GetStoreData().GetStoreBlob().GetRecommendedExchange());\n            model.StoreId = storeId ?? model.StoreId;\n            CurrencyPair[]? currencyPairs = null;\n            try\n            {\n                currencyPairs = model.DefaultCurrencyPairs?\n                     .Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries)\n                     .Select(p => CurrencyPair.Parse(p))\n                     .ToArray();\n            }\n            catch\n            {\n                ModelState.AddModelError(nameof(model.DefaultCurrencyPairs), \"Invalid currency pairs (should be for example: BTC_USD,BTC_CAD,BTC_JPY)\");\n            }\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n            if (model.PreferredExchange != null)\n                model.PreferredExchange = model.PreferredExchange.Trim().ToLowerInvariant();\n\n            var blob = CurrentStore.GetStoreBlob();\n            model.DefaultScript = blob.GetDefaultRateRules(_NetworkProvider).ToString();\n            model.AvailableExchanges = exchanges;\n\n            blob.PreferredExchange = model.PreferredExchange;\n            blob.Spread = (decimal)model.Spread / 100.0m;\n            blob.DefaultCurrencyPairs = currencyPairs;\n            if (!model.ShowScripting)\n            {\n                if (!exchanges.Any(provider => provider.Id.Equals(model.PreferredExchange, StringComparison.InvariantCultureIgnoreCase)))\n                {\n                    ModelState.AddModelError(nameof(model.PreferredExchange), $\"Unsupported exchange ({model.RateSource})\");\n                    return View(model);\n                }\n            }\n            RateRules? rules = null;\n            if (model.ShowScripting)\n            {\n                if (!RateRules.TryParse(model.Script, out rules, out var errors))\n                {\n                    errors = errors ?? new List<RateRulesErrors>();\n                    var errorString = String.Join(\", \", errors.ToArray());\n                    ModelState.AddModelError(nameof(model.Script), $\"Parsing error ({errorString})\");\n                    return View(model);\n                }\n                else\n                {\n                    blob.RateScript = rules.ToString();\n                    ModelState.Remove(nameof(model.Script));\n                    model.Script = blob.RateScript;\n                }\n            }\n            rules = blob.GetRateRules(_NetworkProvider);\n\n            if (command == \"Test\")\n            {\n                if (string.IsNullOrWhiteSpace(model.ScriptTest))\n                {\n                    ModelState.AddModelError(nameof(model.ScriptTest), \"Fill out currency pair to test for (like BTC_USD,BTC_CAD)\");\n                    return View(model);\n                }\n                var splitted = model.ScriptTest.Split(',', StringSplitOptions.RemoveEmptyEntries);\n\n                var pairs = new List<CurrencyPair>();\n                foreach (var pair in splitted)\n                {\n                    if (!CurrencyPair.TryParse(pair, out var currencyPair))\n                    {\n                        ModelState.AddModelError(nameof(model.ScriptTest), $\"Invalid currency pair '{pair}' (it should be formatted like BTC_USD,BTC_CAD)\");\n                        return View(model);\n                    }\n                    pairs.Add(currencyPair);\n                }\n\n                var fetchs = _RateFactory.FetchRates(pairs.ToHashSet(), rules, cancellationToken);\n                var testResults = new List<RatesViewModel.TestResultViewModel>();\n                foreach (var fetch in fetchs)\n                {\n                    var testResult = await (fetch.Value);\n                    testResults.Add(new RatesViewModel.TestResultViewModel()\n                    {\n                        CurrencyPair = fetch.Key.ToString(),\n                        Error = testResult.Errors.Count != 0,\n                        Rule = testResult.Errors.Count == 0 ? testResult.Rule + \" = \" + testResult.BidAsk.Bid.ToString(CultureInfo.InvariantCulture)\n                                                            : testResult.EvaluatedRule\n                    });\n                }\n                model.TestRateRules = testResults;\n                return View(model);\n            }\n            else // command == Save\n            {\n                if (CurrentStore.SetStoreBlob(blob))\n                {\n                    await _Repo.UpdateStore(CurrentStore);\n                    TempData[WellKnownTempData.SuccessMessage] = \"Rate settings updated\";\n                }\n                return RedirectToAction(nameof(Rates), new\n                {\n                    storeId = CurrentStore.Id\n                });\n            }\n        }\n\n        [HttpGet(\"{storeId}/rates/confirm\")]\n        public IActionResult ShowRateRules(bool scripting)\n        {\n            return View(\"Confirm\", new ConfirmModel\n            {\n                Action = \"Continue\",\n                Title = \"Rate rule scripting\",\n                Description = scripting ?\n                                \"This action will modify your current rate sources. Are you sure to turn on rate rules scripting? (Advanced users)\"\n                                : \"This action will delete your rate script. Are you sure to turn off rate rules scripting?\",\n                ButtonClass = scripting ? \"btn-primary\" : \"btn-danger\"\n            });\n        }\n\n        [HttpPost(\"{storeId}/rates/confirm\")]\n        public async Task<IActionResult> ShowRateRulesPost(bool scripting)\n        {\n            var blob = CurrentStore.GetStoreBlob();\n            blob.RateScripting = scripting;\n            blob.RateScript = blob.GetDefaultRateRules(_NetworkProvider).ToString();\n            CurrentStore.SetStoreBlob(blob);\n            await _Repo.UpdateStore(CurrentStore);\n            TempData[WellKnownTempData.SuccessMessage] = \"Rate rules scripting \" + (scripting ? \"activated\" : \"deactivated\");\n            return RedirectToAction(nameof(Rates), new { storeId = CurrentStore.Id });\n        }\n\n        [HttpGet(\"{storeId}/checkout\")]\n        public IActionResult CheckoutAppearance()\n        {\n            var storeBlob = CurrentStore.GetStoreBlob();\n            var vm = new CheckoutAppearanceViewModel();\n            SetCryptoCurrencies(vm, CurrentStore);\n            vm.PaymentMethodCriteria = CurrentStore.GetSupportedPaymentMethods(_NetworkProvider)\n                                    .Where(s => !storeBlob.GetExcludedPaymentMethods().Match(s.PaymentId))\n                                    .Where(s => _NetworkProvider.GetNetwork(s.PaymentId.CryptoCode) != null)\n                                    .Where(s => s.PaymentId.PaymentType != PaymentTypes.LNURLPay)\n                                    .Select(method =>\n            {\n                var existing = storeBlob.PaymentMethodCriteria.SingleOrDefault(criteria =>\n                        criteria.PaymentMethod == method.PaymentId);\n                return existing is null\n                    ? new PaymentMethodCriteriaViewModel { PaymentMethod = method.PaymentId.ToString(), Value = \"\" }\n                    : new PaymentMethodCriteriaViewModel\n                    {\n                        PaymentMethod = existing.PaymentMethod.ToString(),\n                        Type = existing.Above\n                            ? PaymentMethodCriteriaViewModel.CriteriaType.GreaterThan\n                            : PaymentMethodCriteriaViewModel.CriteriaType.LessThan,\n                        Value = existing.Value?.ToString() ?? \"\"\n                    };\n            }).ToList();\n\n            vm.UseNewCheckout = storeBlob.CheckoutType == Client.Models.CheckoutType.V2;\n            vm.OnChainWithLnInvoiceFallback = storeBlob.OnChainWithLnInvoiceFallback;\n            vm.RequiresRefundEmail = storeBlob.RequiresRefundEmail;\n            vm.LazyPaymentMethods = storeBlob.LazyPaymentMethods;\n            vm.RedirectAutomatically = storeBlob.RedirectAutomatically;\n            vm.CustomCSS = storeBlob.CustomCSS;\n            vm.CustomLogo = storeBlob.CustomLogo;\n            vm.HtmlTitle = storeBlob.HtmlTitle;\n            vm.DisplayExpirationTimer = (int)storeBlob.DisplayExpirationTimer.TotalMinutes;\n            vm.ReceiptOptions = CheckoutAppearanceViewModel.ReceiptOptionsViewModel.Create(storeBlob.ReceiptOptions);\n            vm.AutoDetectLanguage = storeBlob.AutoDetectLanguage;\n            vm.SetLanguages(_LangService, storeBlob.DefaultLang);\n\n            return View(vm);\n        }\n\n        void SetCryptoCurrencies(CheckoutAppearanceViewModel vm, Data.StoreData storeData)\n        {\n            var choices = GetEnabledPaymentMethodChoices(storeData);\n            var chosen = GetDefaultPaymentMethodChoice(storeData);\n\n            vm.PaymentMethods = new SelectList(choices, nameof(chosen.Value), nameof(chosen.Name), chosen?.Value);\n            vm.DefaultPaymentMethod = chosen?.Value;\n        }\n\n        public PaymentMethodOptionViewModel.Format[] GetEnabledPaymentMethodChoices(StoreData storeData)\n        {\n            var enabled = storeData.GetEnabledPaymentIds(_NetworkProvider);\n\n            return enabled\n                .Select(o =>\n                    new PaymentMethodOptionViewModel.Format()\n                    {\n                        Name = o.ToPrettyString(),\n                        Value = o.ToString(),\n                        PaymentId = o\n                    }).ToArray();\n        }\n\n        PaymentMethodOptionViewModel.Format? GetDefaultPaymentMethodChoice(StoreData storeData)\n        {\n            var enabled = storeData.GetEnabledPaymentIds(_NetworkProvider);\n            var defaultPaymentId = storeData.GetDefaultPaymentId();\n            var defaultChoice = defaultPaymentId is not null ? defaultPaymentId.FindNearest(enabled) : null;\n            if (defaultChoice is null)\n            {\n                defaultChoice = enabled.FirstOrDefault(e => e.CryptoCode == _NetworkProvider.DefaultNetwork.CryptoCode && e.PaymentType == PaymentTypes.BTCLike) ??\n                                enabled.FirstOrDefault(e => e.CryptoCode == _NetworkProvider.DefaultNetwork.CryptoCode && e.PaymentType == PaymentTypes.LightningLike) ??\n                                enabled.FirstOrDefault();\n            }\n            var choices = GetEnabledPaymentMethodChoices(storeData);\n\n            return defaultChoice is null ? null : choices.FirstOrDefault(c => defaultChoice.ToString().Equals(c.Value, StringComparison.OrdinalIgnoreCase));\n        }\n\n        [HttpPost(\"{storeId}/checkout\")]\n        public async Task<IActionResult> CheckoutAppearance(CheckoutAppearanceViewModel model)\n        {\n            bool needUpdate = false;\n            var blob = CurrentStore.GetStoreBlob();\n            var defaultPaymentMethodId = model.DefaultPaymentMethod == null ? null : PaymentMethodId.Parse(model.DefaultPaymentMethod);\n            if (CurrentStore.GetDefaultPaymentId() != defaultPaymentMethodId)\n            {\n                needUpdate = true;\n                CurrentStore.SetDefaultPaymentId(defaultPaymentMethodId);\n            }\n            SetCryptoCurrencies(model, CurrentStore);\n            model.SetLanguages(_LangService, model.DefaultLang);\n            model.PaymentMethodCriteria ??= new List<PaymentMethodCriteriaViewModel>();\n            for (var index = 0; index < model.PaymentMethodCriteria.Count; index++)\n            {\n                var methodCriterion = model.PaymentMethodCriteria[index];\n                if (!string.IsNullOrWhiteSpace(methodCriterion.Value))\n                {\n                    if (!CurrencyValue.TryParse(methodCriterion.Value, out var value))\n                    {\n                        model.AddModelError(viewModel => viewModel.PaymentMethodCriteria[index].Value,\n                            $\"{methodCriterion.PaymentMethod}: Invalid format. Make sure to enter a valid amount and currency code. Examples: '5 USD', '0.001 BTC'\", this);\n                    }\n                }\n            }\n\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            // Payment criteria for Off-Chain should also affect LNUrl\n            foreach (var newCriteria in model.PaymentMethodCriteria.ToList())\n            {\n                var paymentMethodId = PaymentMethodId.Parse(newCriteria.PaymentMethod);\n                if (paymentMethodId.PaymentType == PaymentTypes.LightningLike)\n                    model.PaymentMethodCriteria.Add(new PaymentMethodCriteriaViewModel()\n                    {\n                        PaymentMethod = new PaymentMethodId(paymentMethodId.CryptoCode, PaymentTypes.LNURLPay).ToString(),\n                        Type = newCriteria.Type,\n                        Value = newCriteria.Value\n                    });\n                // Should not be able to set LNUrlPay criteria directly in UI\n                if (paymentMethodId.PaymentType == PaymentTypes.LNURLPay)\n                    model.PaymentMethodCriteria.Remove(newCriteria);\n            }\n            blob.PaymentMethodCriteria ??= new List<PaymentMethodCriteria>();\n            foreach (var newCriteria in model.PaymentMethodCriteria)\n            {\n                var paymentMethodId = PaymentMethodId.Parse(newCriteria.PaymentMethod);\n                var existingCriteria = blob.PaymentMethodCriteria.FirstOrDefault(c => c.PaymentMethod == paymentMethodId);\n                if (existingCriteria != null)\n                    blob.PaymentMethodCriteria.Remove(existingCriteria);\n                CurrencyValue.TryParse(newCriteria.Value, out var cv);\n                blob.PaymentMethodCriteria.Add(new PaymentMethodCriteria()\n                {\n                    Above = newCriteria.Type == PaymentMethodCriteriaViewModel.CriteriaType.GreaterThan,\n                    Value = cv,\n                    PaymentMethod = paymentMethodId\n                });\n            }\n\n            blob.CheckoutType = model.UseNewCheckout ? Client.Models.CheckoutType.V2 : Client.Models.CheckoutType.V1;\n            if (blob.CheckoutType == Client.Models.CheckoutType.V2)\n            {\n                blob.OnChainWithLnInvoiceFallback = model.OnChainWithLnInvoiceFallback;\n            }\n\n            blob.RequiresRefundEmail = model.RequiresRefundEmail;\n            blob.LazyPaymentMethods = model.LazyPaymentMethods;\n            blob.RedirectAutomatically = model.RedirectAutomatically;\n            blob.ReceiptOptions = model.ReceiptOptions.ToDTO();\n            blob.CustomLogo = model.CustomLogo;\n            blob.CustomCSS = model.CustomCSS;\n            blob.HtmlTitle = string.IsNullOrWhiteSpace(model.HtmlTitle) ? null : model.HtmlTitle;\n            blob.DisplayExpirationTimer = TimeSpan.FromMinutes(model.DisplayExpirationTimer);\n            blob.AutoDetectLanguage = model.AutoDetectLanguage;\n            blob.DefaultLang = model.DefaultLang;\n            blob.NormalizeToRelativeLinks(Request);\n            if (CurrentStore.SetStoreBlob(blob))\n            {\n                needUpdate = true;\n            }\n            if (needUpdate)\n            {\n                await _Repo.UpdateStore(CurrentStore);\n                TempData[WellKnownTempData.SuccessMessage] = \"Store successfully updated\";\n            }\n\n            return RedirectToAction(nameof(CheckoutAppearance), new\n            {\n                storeId = CurrentStore.Id\n            });\n        }\n\n        internal void AddPaymentMethods(StoreData store, StoreBlob storeBlob,\n            out List<StoreDerivationScheme> derivationSchemes, out List<StoreLightningNode> lightningNodes)\n        {\n            var excludeFilters = storeBlob.GetExcludedPaymentMethods();\n            var derivationByCryptoCode =\n                store\n                .GetSupportedPaymentMethods(_NetworkProvider)\n                .OfType<DerivationSchemeSettings>()\n                .ToDictionary(c => c.Network.CryptoCode.ToUpperInvariant());\n\n            var lightningByCryptoCode = store\n                .GetSupportedPaymentMethods(_NetworkProvider)\n                .OfType<LightningSupportedPaymentMethod>()\n                .Where(method => method.PaymentId.PaymentType == LightningPaymentType.Instance)\n                .ToDictionary(c => c.CryptoCode.ToUpperInvariant());\n\n            derivationSchemes = new List<StoreDerivationScheme>();\n            lightningNodes = new List<StoreLightningNode>();\n\n            foreach (var paymentMethodId in _paymentMethodHandlerDictionary.Distinct().SelectMany(handler => handler.GetSupportedPaymentMethods()))\n            {\n                switch (paymentMethodId.PaymentType)\n                {\n                    case BitcoinPaymentType _:\n                        var strategy = derivationByCryptoCode.TryGet(paymentMethodId.CryptoCode);\n                        var network = _NetworkProvider.GetNetwork<BTCPayNetwork>(paymentMethodId.CryptoCode);\n                        var value = strategy?.ToPrettyString() ?? string.Empty;\n\n                        derivationSchemes.Add(new StoreDerivationScheme\n                        {\n                            Crypto = paymentMethodId.CryptoCode,\n                            WalletSupported = network.WalletSupported,\n                            Value = value,\n                            WalletId = new WalletId(store.Id, paymentMethodId.CryptoCode),\n                            Enabled = !excludeFilters.Match(paymentMethodId) && strategy != null,\n#if ALTCOINS\n                            Collapsed = network is ElementsBTCPayNetwork elementsBTCPayNetwork && elementsBTCPayNetwork.NetworkCryptoCode != elementsBTCPayNetwork.CryptoCode && string.IsNullOrEmpty(value)\n#endif\n                        });\n                        break;\n\n                    case LNURLPayPaymentType lnurlPayPaymentType:\n                        break;\n\n                    case LightningPaymentType _:\n                        var lightning = lightningByCryptoCode.TryGet(paymentMethodId.CryptoCode);\n                        var isEnabled = !excludeFilters.Match(paymentMethodId) && lightning != null;\n                        lightningNodes.Add(new StoreLightningNode\n                        {\n                            CryptoCode = paymentMethodId.CryptoCode,\n                            Address = lightning?.GetDisplayableConnectionString(),\n                            Enabled = isEnabled\n                        });\n                        break;\n                }\n            }\n        }\n\n        [HttpGet(\"{storeId}/settings\")]\n        public IActionResult GeneralSettings()\n        {\n            var store = HttpContext.GetStoreData();\n            if (store == null)\n                return NotFound();\n\n            var storeBlob = store.GetStoreBlob();\n            var vm = new GeneralSettingsViewModel\n            {\n                Id = store.Id,\n                StoreName = store.StoreName,\n                StoreWebsite = store.StoreWebsite,\n                LogoFileId = storeBlob.LogoFileId,\n                BrandColor = storeBlob.BrandColor,\n                NetworkFeeMode = storeBlob.NetworkFeeMode,\n                AnyoneCanCreateInvoice = storeBlob.AnyoneCanInvoice,\n                PaymentTolerance = storeBlob.PaymentTolerance,\n                InvoiceExpiration = (int)storeBlob.InvoiceExpiration.TotalMinutes,\n                DefaultCurrency = storeBlob.DefaultCurrency,\n                BOLT11Expiration = (long)storeBlob.RefundBOLT11Expiration.TotalDays,\n                CanDelete = _Repo.CanDeleteStores()\n            };\n\n            return View(vm);\n        }\n\n        [HttpPost(\"{storeId}/settings\")]\n        public async Task<IActionResult> GeneralSettings(GeneralSettingsViewModel model, [FromForm] bool RemoveLogoFile = false)\n        {\n            bool needUpdate = false;\n            if (CurrentStore.StoreName != model.StoreName)\n            {\n                needUpdate = true;\n                CurrentStore.StoreName = model.StoreName;\n            }\n\n            if (CurrentStore.StoreWebsite != model.StoreWebsite)\n            {\n                needUpdate = true;\n                CurrentStore.StoreWebsite = model.StoreWebsite;\n            }\n\n            var blob = CurrentStore.GetStoreBlob();\n            blob.AnyoneCanInvoice = model.AnyoneCanCreateInvoice;\n            blob.NetworkFeeMode = model.NetworkFeeMode;\n            blob.PaymentTolerance = model.PaymentTolerance;\n            blob.DefaultCurrency = model.DefaultCurrency;\n            blob.InvoiceExpiration = TimeSpan.FromMinutes(model.InvoiceExpiration);\n            blob.RefundBOLT11Expiration = TimeSpan.FromDays(model.BOLT11Expiration);\n            if (!string.IsNullOrEmpty(model.BrandColor) && !ColorPalette.IsValid(model.BrandColor))\n            {\n                ModelState.AddModelError(nameof(model.BrandColor), \"Invalid color\");\n                return View(model);\n            }\n            blob.BrandColor = model.BrandColor;\n\n            var userId = GetUserId();\n            if (userId is null)\n                return NotFound();\n\n            if (model.LogoFile != null)\n            {\n                if (model.LogoFile.ContentType.StartsWith(\"image/\", StringComparison.InvariantCulture))\n                {\n                    // delete existing image\n                    if (!string.IsNullOrEmpty(blob.LogoFileId))\n                    {\n                        await _fileService.RemoveFile(blob.LogoFileId, userId);\n                    }\n\n                    // add new image\n                    try\n                    {\n                        var storedFile = await _fileService.AddFile(model.LogoFile, userId);\n                        blob.LogoFileId = storedFile.Id;\n                    }\n                    catch (Exception e)\n                    {\n                        TempData[WellKnownTempData.ErrorMessage] = $\"Could not save logo: {e.Message}\";\n                    }\n                }\n                else\n                {\n                    TempData[WellKnownTempData.ErrorMessage] = \"The uploaded logo file needs to be an image\";\n                }\n            }\n            else if (RemoveLogoFile && !string.IsNullOrEmpty(blob.LogoFileId))\n            {\n                await _fileService.RemoveFile(blob.LogoFileId, userId);\n                blob.LogoFileId = null;\n                needUpdate = true;\n            }\n\n            if (CurrentStore.SetStoreBlob(blob))\n            {\n                needUpdate = true;\n            }\n\n            if (needUpdate)\n            {\n                await _Repo.UpdateStore(CurrentStore);\n\n                TempData[WellKnownTempData.SuccessMessage] = \"Store successfully updated\";\n            }\n\n            return RedirectToAction(nameof(GeneralSettings), new\n            {\n                storeId = CurrentStore.Id\n            });\n        }\n\n        [HttpGet(\"{storeId}/delete\")]\n        public IActionResult DeleteStore(string storeId)\n        {\n            return View(\"Confirm\", new ConfirmModel(\"Delete store\", \"The store will be permanently deleted. This action will also delete all invoices, apps and data associated with the store. Are you sure?\", \"Delete\"));\n        }\n\n        [HttpPost(\"{storeId}/delete\")]\n        public async Task<IActionResult> DeleteStorePost(string storeId)\n        {\n            await _Repo.DeleteStore(CurrentStore.Id);\n            TempData[WellKnownTempData.SuccessMessage] = \"Store successfully deleted.\";\n            return RedirectToAction(nameof(UIHomeController.Index), \"UIHome\");\n        }\n\n        private IEnumerable<AvailableRateProvider> GetSupportedExchanges()\n        {\n            var exchanges = _RateFactory.RateProviderFactory.GetSupportedExchanges();\n            return exchanges\n                .Where(r => !string.IsNullOrWhiteSpace(r.Name))\n                .OrderBy(s => s.Id, StringComparer.OrdinalIgnoreCase);\n\n        }\n\n        private DerivationSchemeSettings ParseDerivationStrategy(string derivationScheme, BTCPayNetwork network)\n        {\n            var parser = new DerivationSchemeParser(network);\n            var isOD = Regex.Match(derivationScheme, @\"\\(.*?\\)\");\n            if (isOD.Success)\n            {\n                var derivationSchemeSettings = new DerivationSchemeSettings { Network = network };\n                var result = parser.ParseOutputDescriptor(derivationScheme);\n                derivationSchemeSettings.AccountOriginal = derivationScheme.Trim();\n                derivationSchemeSettings.AccountDerivation = result.Item1;\n                derivationSchemeSettings.AccountKeySettings = result.Item2?.Select((path, i) => new AccountKeySettings()\n                {\n                    RootFingerprint = path?.MasterFingerprint,\n                    AccountKeyPath = path?.KeyPath,\n                    AccountKey = result.Item1.GetExtPubKeys().ElementAt(i).GetWif(parser.Network)\n                }).ToArray() ?? new AccountKeySettings[result.Item1.GetExtPubKeys().Count()];\n                return derivationSchemeSettings;\n            }\n\n            var strategy = parser.Parse(derivationScheme);\n            return new DerivationSchemeSettings(strategy, network);\n        }\n\n        [HttpGet(\"{storeId}/tokens\")]\n        public async Task<IActionResult> ListTokens()\n        {\n            var model = new TokensViewModel();\n            var tokens = await _TokenRepository.GetTokensByStoreIdAsync(CurrentStore.Id);\n            model.StoreNotConfigured = StoreNotConfigured;\n            model.Tokens = tokens.Select(t => new TokenViewModel()\n            {\n                Label = t.Label,\n                SIN = t.SIN,\n                Id = t.Value\n            }).ToArray();\n\n            model.ApiKey = (await _TokenRepository.GetLegacyAPIKeys(CurrentStore.Id)).FirstOrDefault();\n            if (model.ApiKey == null)\n                model.EncodedApiKey = \"*API Key*\";\n            else\n                model.EncodedApiKey = Encoders.Base64.EncodeData(Encoders.ASCII.DecodeData(model.ApiKey));\n            return View(model);\n        }\n\n        [HttpGet(\"{storeId}/tokens/{tokenId}/revoke\")]\n        public async Task<IActionResult> RevokeToken(string tokenId)\n        {\n            var token = await _TokenRepository.GetToken(tokenId);\n            if (token == null || token.StoreId != CurrentStore.Id)\n                return NotFound();\n            return View(\"Confirm\", new ConfirmModel(\"Revoke the token\", $\"The access token with the label <strong>{Html.Encode(token.Label)}</strong> will be revoked. Do you wish to continue?\", \"Revoke\"));\n        }\n\n        [HttpPost(\"{storeId}/tokens/{tokenId}/revoke\")]\n        public async Task<IActionResult> RevokeTokenConfirm(string tokenId)\n        {\n            var token = await _TokenRepository.GetToken(tokenId);\n            if (token == null ||\n                token.StoreId != CurrentStore.Id ||\n               !await _TokenRepository.DeleteToken(tokenId))\n                TempData[WellKnownTempData.ErrorMessage] = \"Failure to revoke this token.\";\n            else\n                TempData[WellKnownTempData.SuccessMessage] = \"Token revoked\";\n            return RedirectToAction(nameof(ListTokens), new { storeId = token?.StoreId });\n        }\n\n        [HttpGet(\"{storeId}/tokens/{tokenId}\")]\n        public async Task<IActionResult> ShowToken(string tokenId)\n        {\n            var token = await _TokenRepository.GetToken(tokenId);\n            if (token == null || token.StoreId != CurrentStore.Id)\n                return NotFound();\n            return View(token);\n        }\n\n        [HttpGet(\"{storeId}/tokens/create\")]\n        public IActionResult CreateToken(string storeId)\n        {\n            var model = new CreateTokenViewModel();\n            ViewBag.HidePublicKey = storeId == null;\n            ViewBag.ShowStores = storeId == null;\n            ViewBag.ShowMenu = storeId != null;\n            model.StoreId = storeId;\n            return View(model);\n        }\n\n        [HttpPost(\"{storeId}/tokens/create\")]\n        public async Task<IActionResult> CreateToken(string storeId, CreateTokenViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(nameof(CreateToken), model);\n            }\n            model.Label = model.Label ?? String.Empty;\n            var userId = GetUserId();\n            if (userId == null)\n                return Challenge(AuthenticationSchemes.Cookie);\n            storeId = model.StoreId;\n            var store = CurrentStore ?? await _Repo.FindStore(storeId, userId);\n            if (store == null)\n                return Challenge(AuthenticationSchemes.Cookie);\n            var tokenRequest = new TokenRequest()\n            {\n                Label = model.Label,\n                Id = model.PublicKey == null ? null : NBitpayClient.Extensions.BitIdExtensions.GetBitIDSIN(new PubKey(model.PublicKey).Compress())\n            };\n\n            string? pairingCode = null;\n            if (model.PublicKey == null)\n            {\n                tokenRequest.PairingCode = await _TokenRepository.CreatePairingCodeAsync();\n                await _TokenRepository.UpdatePairingCode(new PairingCodeEntity()\n                {\n                    Id = tokenRequest.PairingCode,\n                    Label = model.Label,\n                });\n                await _TokenRepository.PairWithStoreAsync(tokenRequest.PairingCode, storeId);\n                pairingCode = tokenRequest.PairingCode;\n            }\n            else\n            {\n                pairingCode = (await _TokenController.Tokens(tokenRequest)).Data[0].PairingCode;\n            }\n\n            GeneratedPairingCode = pairingCode;\n            return RedirectToAction(nameof(RequestPairing), new\n            {\n                pairingCode,\n                selectedStore = storeId\n            });\n        }\n\n        [HttpGet(\"/api-tokens\")]\n        [AllowAnonymous]\n        public async Task<IActionResult> CreateToken()\n        {\n            var userId = GetUserId();\n            if (string.IsNullOrWhiteSpace(userId))\n                return Challenge(AuthenticationSchemes.Cookie);\n            var model = new CreateTokenViewModel();\n            ViewBag.HidePublicKey = true;\n            ViewBag.ShowStores = true;\n            ViewBag.ShowMenu = false;\n            var stores = await _Repo.GetStoresByUserId(userId);\n            model.Stores = new SelectList(stores.Where(s => s.Role == StoreRoles.Owner), nameof(CurrentStore.Id), nameof(CurrentStore.StoreName));\n            if (!model.Stores.Any())\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"You need to be owner of at least one store before pairing\";\n                return RedirectToAction(nameof(UIHomeController.Index), \"UIHome\");\n            }\n            return View(model);\n        }\n\n        [HttpPost(\"/api-tokens\")]\n        [AllowAnonymous]\n        public Task<IActionResult> CreateToken2(CreateTokenViewModel model)\n        {\n            return CreateToken(model.StoreId, model);\n        }\n\n        [HttpPost(\"{storeId}/tokens/apikey\")]\n        public async Task<IActionResult> GenerateAPIKey(string storeId, string command = \"\")\n        {\n            var store = HttpContext.GetStoreData();\n            if (store == null)\n                return NotFound();\n            if (command == \"revoke\")\n            {\n                await _TokenRepository.RevokeLegacyAPIKeys(CurrentStore.Id);\n                TempData[WellKnownTempData.SuccessMessage] = \"API Key revoked\";\n            }\n            else\n            {\n                await _TokenRepository.GenerateLegacyAPIKey(CurrentStore.Id);\n                TempData[WellKnownTempData.SuccessMessage] = \"API Key re-generated\";\n            }\n\n            return RedirectToAction(nameof(ListTokens), new\n            {\n                storeId\n            });\n        }\n\n        [HttpGet(\"/api-access-request\")]\n        [AllowAnonymous]\n        public async Task<IActionResult> RequestPairing(string pairingCode, string? selectedStore = null)\n        {\n            var userId = GetUserId();\n            if (userId == null)\n                return Challenge(AuthenticationSchemes.Cookie);\n\n            if (pairingCode == null)\n                return NotFound();\n\n            if (selectedStore != null)\n            {\n                var store = await _Repo.FindStore(selectedStore, userId);\n                if (store == null)\n                    return NotFound();\n                HttpContext.SetStoreData(store);\n            }\n\n            var pairing = await _TokenRepository.GetPairingAsync(pairingCode);\n            if (pairing == null)\n            {\n                TempData[WellKnownTempData.ErrorMessage] = \"Unknown pairing code\";\n                return RedirectToAction(nameof(UIHomeController.Index), \"UIHome\");\n            }\n\n            var stores = await _Repo.GetStoresByUserId(userId);\n            return View(new PairingModel\n            {\n                Id = pairing.Id,\n                Label = pairing.Label,\n                SIN = pairing.SIN ?? \"Server-Initiated Pairing\",\n                StoreId = selectedStore ?? stores.FirstOrDefault()?.Id,\n                Stores = stores.Where(u => u.Role == StoreRoles.Owner).Select(s => new PairingModel.StoreViewModel\n                {\n                    Id = s.Id,\n                    Name = string.IsNullOrEmpty(s.StoreName) ? s.Id : s.StoreName\n                }).ToArray()\n            });\n        }\n\n        [HttpPost(\"/api-access-request\")]\n        public async Task<IActionResult> Pair(string pairingCode, string storeId)\n        {\n            if (pairingCode == null)\n                return NotFound();\n            var store = CurrentStore;\n            var pairing = await _TokenRepository.GetPairingAsync(pairingCode);\n            if (store == null || pairing == null)\n                return NotFound();\n\n            var pairingResult = await _TokenRepository.PairWithStoreAsync(pairingCode, store.Id);\n            if (pairingResult == PairingResult.Complete || pairingResult == PairingResult.Partial)\n            {\n                var excludeFilter = store.GetStoreBlob().GetExcludedPaymentMethods();\n                StoreNotConfigured = !store.GetSupportedPaymentMethods(_NetworkProvider)\n                                          .Where(p => !excludeFilter.Match(p.PaymentId))\n                                          .Any();\n                TempData[WellKnownTempData.SuccessMessage] = \"Pairing is successful\";\n                if (pairingResult == PairingResult.Partial)\n                    TempData[WellKnownTempData.SuccessMessage] = \"Server initiated pairing code: \" + pairingCode;\n                return RedirectToAction(nameof(ListTokens), new\n                {\n                    storeId = store.Id,\n                    pairingCode = pairingCode\n                });\n            }\n            else\n            {\n                TempData[WellKnownTempData.ErrorMessage] = $\"Pairing failed ({pairingResult})\";\n                return RedirectToAction(nameof(ListTokens), new\n                {\n                    storeId = store.Id\n                });\n            }\n        }\n\n        private string? GetUserId()\n        {\n            if (User.Identity?.AuthenticationType != AuthenticationSchemes.Cookie)\n                return null;\n            return _UserManager.GetUserId(User);\n        }\n    }\n}\n", "@using System.Globalization\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@using BTCPayServer.TagHelpers\n@using BTCPayServer.Views.Apps\n@using Microsoft.AspNetCore.Mvc.TagHelpers\n@model BTCPayServer.Plugins.Crowdfund.Models.UpdateCrowdfundViewModel\n@{\n    ViewData.SetActivePage(AppsNavPages.Update, \"Update Crowdfund\", Model.AppId);\n}\n\n@section PageHeadContent {\n    <link href=\"~/vendor/summernote/summernote-bs5.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n    <link href=\"~/main/template-editor.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n    <style>\n        .flatpickr-wrapper { flex-grow: 1; }\n    </style>\n}\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\" />\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/summernote/summernote-bs5.js\" asp-append-version=\"true\"></script>\n}\n\n<form method=\"post\">\n    <div class=\"sticky-header-setup\"></div>\n    <div class=\"sticky-header d-sm-flex align-items-center justify-content-between\">\n        <h2 class=\"mb-0\">@ViewData[\"Title\"]</h2>\n        <div class=\"d-flex gap-3 mt-3 mt-sm-0\">\n            <button type=\"submit\" class=\"btn btn-primary order-sm-1\" id=\"SaveSettings\">Save</button>   \n            @if (Model.ModelWithMinimumData)\n            {\n                <a class=\"btn btn-secondary\" asp-action=\"ViewCrowdfund\" asp-route-appId=\"@Model.AppId\" id=\"ViewApp\" target=\"_blank\">View</a>\n            }\n        </div>\n    </div>\n\n    <partial name=\"_StatusMessage\" />\n\n    <input type=\"hidden\" asp-for=\"StoreId\" />\n    <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div>\n\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <div class=\"form-group\">\n                <label asp-for=\"AppName\" class=\"form-label\" data-required></label>\n                <input asp-for=\"AppName\" class=\"form-control\" required />\n                <span asp-validation-for=\"AppName\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"Title\" class=\"form-label\" data-required></label>\n                <input asp-for=\"Title\" class=\"form-control\" required />\n                <span asp-validation-for=\"Title\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"Tagline\" class=\"form-label\"></label>\n                <input asp-for=\"Tagline\" class=\"form-control\" />\n                <span asp-validation-for=\"Tagline\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <div class=\"form-group\">\n                <label asp-for=\"Description\" class=\"form-label\" data-required></label>\n                <textarea asp-for=\"Description\" rows=\"20\" cols=\"40\" class=\"form-control richtext\"></textarea>\n                <span asp-validation-for=\"Description\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <div class=\"d-flex align-items-center\">\n                    <input asp-for=\"Enabled\" type=\"checkbox\" class=\"btcpay-toggle me-3\"/>\n                    <div>\n                        <label asp-for=\"Enabled\" class=\"form-label mb-0\"></label>\n                        <span asp-validation-for=\"Enabled\" class=\"text-danger\"></span>\n                        <div class=\"text-muted\" hidden=\"@Model.Enabled\">The crowdfund is only visible to you. To make it visible to anyone else, enable this.</div>\n                        <div class=\"text-muted\" hidden=\"@(!Model.Enabled)\">The crowdfund is visible to anyone. To make it only visible to you, disable this.</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <h3 class=\"mt-5 mb-4\">Goal</h3>\n            <div class=\"d-flex flex-wrap gap-3 mb-3\">\n                <div class=\"form-group w-250px mb-0\">\n                    <label asp-for=\"TargetAmount\" class=\"form-label\"></label>\n                    <input inputmode=\"decimal\" asp-for=\"TargetAmount\" class=\"form-control\" />\n                    <span asp-validation-for=\"TargetAmount\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"TargetCurrency\" class=\"form-label\"></label>\n                    <input asp-for=\"TargetCurrency\" class=\"form-control w-auto\" currency-selection />\n                    <div class=\"form-text\">Uses the store's default currency (@Model.StoreDefaultCurrency) if empty.</div>\n                    <span asp-validation-for=\"TargetCurrency\" class=\"text-danger\"></span>\n                </div>\n            </div>\n            <div class=\"d-flex flex-wrap gap-3 align-items-center mb-4\">\n                <div class=\"form-group mb-0 w-250px\">\n                    <label asp-for=\"StartDate\" class=\"form-label\"></label>\n                    <div class=\"input-group flex-nowrap\">\n                        <input type=\"datetime-local\" asp-for=\"StartDate\"\n                               value=\"@(Model.StartDate?.ToString(\"u\", CultureInfo.InvariantCulture))\"\n                               class=\"form-control flatdtpicker\"\n                               placeholder=\"No start date has been set\" />\n                        <button class=\"btn btn-secondary input-group-clear px-3\" type=\"button\" title=\"Clear\">\n                            <vc:icon symbol=\"close\"/>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"form-group mb-0 w-250px\">\n                    <label asp-for=\"EndDate\" class=\"form-label\"></label>\n                    <div class=\"input-group flex-nowrap\">\n                        <input type=\"datetime-local\" asp-for=\"EndDate\"\n                               value=\"@(Model.EndDate?.ToString(\"u\", CultureInfo.InvariantCulture))\"\n                               class=\"form-control flatdtpicker\"\n                               placeholder=\"No end date has been set\" />\n                        <button class=\"btn btn-secondary input-group-clear px-3\" type=\"button\" title=\"Clear\">\n                            <vc:icon symbol=\"close\"/>\n                        </button>\n                    </div>\n                </div>\n                <span asp-validation-for=\"StartDate\" class=\"text-danger\"></span>\n                <span asp-validation-for=\"EndDate\" class=\"text-danger\"></span>\n            </div>\n            \n            <div class=\"form-group mt-4\" id=\"ResetRow\" hidden=\"@(Model.StartDate == null)\">\n                <div class=\"d-flex align-items-center mb-3\">\n                    <input asp-for=\"IsRecurring\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#ResetEverySettings\" aria-expanded=\"@(Model.IsRecurring)\" aria-controls=\"ResetEverySettings\" />\n                    <div>\n                        <label asp-for=\"IsRecurring\" class=\"form-label mb-0\">Recurring Goal</label>\n                        <span asp-validation-for=\"IsRecurring\" class=\"text-danger\"></span>\n                        <div class=\"text-muted\">Reset goal after a specific period of time, based on your crowdfund's start date.</div>\n                    </div>\n                </div>\n                \n                <div class=\"collapse @(Model.IsRecurring ? \"show\" : \"\")\" id=\"ResetEverySettings\">\n                    <div class=\"form-group mb-0 pt-2 w-250px\">\n                        <label asp-for=\"ResetEveryAmount\" class=\"form-label\"></label>\n                        <div class=\"d-flex align-items-center\">\n                            <input type=\"number\" inputmode=\"numeric\" asp-for=\"ResetEveryAmount\" placeholder=\"Amount\" class=\"form-control me-3\" min=\"0\">\n                            <select class=\"form-select w-auto\" asp-for=\"ResetEvery\">\n                                @foreach (var opt in Model.ResetEveryValues)\n                                {\n                                    <option value=\"@opt\">@opt</option>\n                                }\n                            </select>\n                        </div>\n                        <span asp-validation-for=\"ResetEveryAmount\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <partial name=\"TemplateEditor\" model=\"@(nameof(Model.PerksTemplate), \"Perks\", Model.TargetCurrency ?? Model.StoreDefaultCurrency)\" />\n        </div>\n    </div>\n    <div class=\"row collapse\" id=\"RawEditor\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <div class=\"form-group pt-3\">\n                <label asp-for=\"PerksTemplate\" class=\"form-label\"></label>\n                <textarea asp-for=\"PerksTemplate\" rows=\"10\" cols=\"40\" class=\"form-control\"></textarea>\n                <span asp-validation-for=\"PerksTemplate\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <h3 class=\"mt-5 mb-4\">Contributions</h3>\n            <div class=\"form-check mb-3\">\n                <input asp-for=\"SortPerksByPopularity\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"SortPerksByPopularity\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"SortPerksByPopularity\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-check mb-3\">\n                <input asp-for=\"DisplayPerksRanking\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"DisplayPerksRanking\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"DisplayPerksRanking\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-check mb-3\">\n                <input asp-for=\"DisplayPerksValue\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"DisplayPerksValue\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"DisplayPerksValue\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-check mb-3\">\n                <input asp-for=\"EnforceTargetAmount\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"EnforceTargetAmount\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"EnforceTargetAmount\" class=\"text-danger\"></span>\n            </div>\n            \n            <h3 class=\"mt-5 mb-4\">Crowdfund Behavior</h3>\n            <div class=\"form-check\">\n                <input asp-for=\"UseAllStoreInvoices\" type=\"checkbox\" class=\"form-check-input\" />\n                <label asp-for=\"UseAllStoreInvoices\" class=\"form-check-label\"></label>\n                <span asp-validation-for=\"UseAllStoreInvoices\" class=\"text-danger\"></span>\n            </div>\n\n            <h3 class=\"mt-5 mb-2\">Additional Options</h3>\n            <div class=\"form-group\">\n                <div class=\"accordion\" id=\"additional\">\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-sound-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-sound\" aria-expanded=\"false\" aria-controls=\"additional-sound\">\n                                Sound\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-sound\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-sound-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group mb-0\">\n                                    <div class=\"d-flex align-items-center\">\n                                        <input asp-for=\"SoundsEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#SoundsEnabledSettings\" aria-expanded=\"@Model.SoundsEnabled\" aria-controls=\"SoundsEnabledSettings\"/>\n                                        <label asp-for=\"SoundsEnabled\" class=\"form-label mb-0\"></label>\n                                        <span asp-validation-for=\"SoundsEnabled\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                                <div class=\"collapse @(Model.SoundsEnabled ? \"show\" : \"\")\" id=\"SoundsEnabledSettings\">\n                                    <div class=\"form-group mb-0 pt-3\">\n                                        <label asp-for=\"Sounds\" class=\"form-label\"></label>\n                                        <textarea asp-for=\"Sounds\" class=\"form-control\" rows=\"5\"></textarea>\n                                        <span asp-validation-for=\"Sounds\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-animation-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-animation\" aria-expanded=\"false\" aria-controls=\"additional-animation\">\n                                Animation\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-animation\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-animation-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group mb-0\">\n                                    <div class=\"d-flex align-items-center\">\n                                        <input asp-for=\"AnimationsEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#AnimationsEnabledSettings\" aria-expanded=\"@Model.AnimationsEnabled\" aria-controls=\"AnimationsEnabledSettings\"/>\n                                        <label asp-for=\"AnimationsEnabled\" class=\"form-label mb-0\"></label>\n                                        <span asp-validation-for=\"AnimationsEnabled\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                                <div class=\"collapse @(Model.AnimationsEnabled ? \"show\" : \"\")\" id=\"AnimationsEnabledSettings\">\n                                    <div class=\"form-group mb-0 pt-3\">\n                                        <label asp-for=\"AnimationColors\" class=\"form-label\"></label>\n                                        <textarea asp-for=\"AnimationColors\" class=\"form-control\" rows=\"5\"></textarea>\n                                        <span asp-validation-for=\"AnimationColors\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-discussion-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-discussion\" aria-expanded=\"false\" aria-controls=\"additional-discussion\">\n                                Discussion\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-discussion\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-discussion-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group mb-0\">\n                                    <div class=\"d-flex align-items-center\">\n                                        <input asp-for=\"DisqusEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#DisqusEnabledSettings\" aria-expanded=\"@Model.DisqusEnabled\" aria-controls=\"DisqusEnabledSettings\"/>\n                                        <label asp-for=\"DisqusEnabled\" class=\"form-label mb-0\"></label>\n                                        <span asp-validation-for=\"DisqusEnabled\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                                <div class=\"collapse @(Model.DisqusEnabled ? \"show\" : \"\")\" id=\"DisqusEnabledSettings\">\n                                    <div class=\"form-group mb-0 pt-3\">\n                                        <label asp-for=\"DisqusShortname\" class=\"form-label\"></label>\n                                        <input asp-for=\"DisqusShortname\" class=\"form-control\" />\n                                        <span asp-validation-for=\"DisqusShortname\" class=\"text-danger\"></span>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-custom-css-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-custom-css\" aria-expanded=\"false\" aria-controls=\"additional-custom-css\">\n                                Custom CSS\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-custom-css\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-custom-css-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"MainImageUrl\" class=\"form-label\"></label>\n                                    <input asp-for=\"MainImageUrl\" class=\"form-control\" />\n                                    <span asp-validation-for=\"MainImageUrl\" class=\"text-danger\"></span>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label asp-for=\"CustomCSSLink\" class=\"form-label\"></label>\n                                    <a href=\"https://docs.btcpayserver.org/Development/Theme/#2-bootstrap-themes\" target=\"_blank\" rel=\"noreferrer noopener\">\n                                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                                    </a>\n                                    <input asp-for=\"CustomCSSLink\" class=\"form-control\" />\n                                    <span asp-validation-for=\"CustomCSSLink\" class=\"text-danger\"></span>\n                                </div>\n                                <div class=\"form-group mb-4\">\n                                    <label asp-for=\"EmbeddedCSS\" class=\"form-label\"></label>\n                                    <textarea asp-for=\"EmbeddedCSS\" rows=\"10\" cols=\"40\" class=\"form-control\"></textarea>\n                                    <span asp-validation-for=\"EmbeddedCSS\" class=\"text-danger\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-notification-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-notification\" aria-expanded=\"false\" aria-controls=\"additional-notification\">\n                                Notification URL Callbacks\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-notification\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-notification-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"NotificationUrl\" class=\"form-label\"></label>\n                                    <input asp-for=\"NotificationUrl\" class=\"form-control\" />\n                                    <span asp-validation-for=\"NotificationUrl\" class=\"text-danger\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n\n<div class=\"d-flex gap-3 mt-3\">\n    <a class=\"btn btn-secondary\" asp-action=\"ListInvoices\" asp-controller=\"UIInvoice\" asp-route-storeId=\"@Model.StoreId\" asp-route-searchterm=\"@Model.SearchTerm\">Invoices</a>\n    <a id=\"DeleteApp\" class=\"btn btn-outline-danger\" asp-controller=\"UIApps\" asp-action=\"DeleteApp\" asp-route-appId=\"@Model.AppId\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The app <strong>@Html.Encode(Model.AppName)</strong> and its settings will be permanently deleted.\" data-confirm-input=\"DELETE\">Delete this app</a>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete app\", \"This app will be removed from this store.\", \"Delete\"))\" />\n\n<script>\n    const resetRow = document.getElementById('ResetRow');\n    const startDateInputId = \"StartDate\";\n\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        setTimeout(() => {\n            flatpickrInstances.forEach((instance) => {\n                if (instance.element.id === startDateInputId) {\n                    instance.config.onChange.push((selectedDates) => {\n                        if (selectedDates.length) {\n                            // Show the reset row if start date is selected.\n                            // Since start date must be selected in order for the reset options to be set\n                            // we don't need to show it by default and can show it only when start date is selected\n                                resetRow.removeAttribute('hidden');\n                        }\n                    });\n                }\n            });\n        }, 0);\n\n        document.addEventListener('input-group-clear-input-value-cleared', ({ detail }) => {\n            const input = detail[0];\n            if (input.id === startDateInputId) {\n                resetRow.setAttribute('hidden', 'hidden');\n            }\n        });\n    });\n</script>\n", "@using BTCPayServer.Services.Apps\n@using BTCPayServer.Abstractions.Models\n@using BTCPayServer.Views.Apps\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Services.Stores\n@model BTCPayServer.Plugins.PointOfSale.Models.UpdatePointOfSaleViewModel\n@{\n    ViewData.SetActivePage(AppsNavPages.Update, \"Update Point of Sale\", Model.Id);\n    \n    var checkoutFormOptions = CheckoutFormSelectList.WithSelected(Model.FormId);\n}\n\n<form method=\"post\">\n    <div class=\"sticky-header-setup\"></div>\n    <div class=\"sticky-header d-sm-flex align-items-center justify-content-between\">\n        <h2 class=\"mb-0\">@ViewData[\"Title\"]</h2>\n        <div class=\"d-flex gap-3 mt-3 mt-sm-0\">\n            <button type=\"submit\" class=\"btn btn-primary order-sm-1\" id=\"SaveSettings\">Save</button>\n            <a class=\"btn btn-secondary\" asp-action=\"ViewPointOfSale\" asp-route-appId=\"@Model.Id\" id=\"ViewApp\" target=\"_blank\">View</a>\n        </div>\n    </div>\n\n    <partial name=\"_StatusMessage\" />\n\n    <input type=\"hidden\" asp-for=\"StoreId\" />\n    <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div>\n\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <div class=\"form-group\">\n                <label asp-for=\"AppName\" class=\"form-label\" data-required></label>\n                <input asp-for=\"AppName\" class=\"form-control\" required />\n                <span asp-validation-for=\"AppName\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"Title\" class=\"form-label\" data-required></label>\n                <input asp-for=\"Title\" class=\"form-control\" required />\n                <span asp-validation-for=\"Title\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"Currency\" class=\"form-label\"></label>\n                <input asp-for=\"Currency\" class=\"form-control w-auto\" currency-selection />\n                <div class=\"form-text\">Uses the store's default currency (@Model.StoreDefaultCurrency) if empty.</div>\n                <span asp-validation-for=\"Currency\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-10 col-xxl-constrain\">\n            <div class=\"form-group mb-0\">\n                <label asp-for=\"Description\" class=\"form-label\"></label>\n                <textarea asp-for=\"Description\" rows=\"10\" cols=\"40\" class=\"form-control richtext\"></textarea>\n                <span asp-validation-for=\"Description\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xxl-constrain\">\n            <partial name=\"TemplateEditor\" model=\"@(nameof(Model.Template), \"Products\", Model.Currency ?? Model.StoreDefaultCurrency)\" />\n        </div>\n    </div>\n    <div class=\"row collapse\" id=\"RawEditor\">\n        <div class=\"col-xxl-constrain\">\n            <div class=\"form-group pt-3\">\n                <label asp-for=\"Template\" class=\"form-label\"></label>\n                <textarea asp-for=\"Template\" rows=\"10\" cols=\"40\" class=\"form-control\"></textarea>\n                <span asp-validation-for=\"Template\" class=\"text-danger\"></span>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <h3 class=\"mt-5 mb-4\">Appearance</h3>\n            <div class=\"form-group\">\n                <label asp-for=\"DefaultView\" class=\"form-label\" data-required></label>\n                <select asp-for=\"DefaultView\" asp-items=\"@Html.GetEnumSelectList<PosViewType>()\" class=\"form-select\" required></select>\n                <span asp-validation-for=\"DefaultView\" class=\"text-danger\"></span>\n                <div class=\"form-text\">Choose the point of sale style for your customers.</div>\n            </div>\n            <div class=\"form-group\" id=\"button-price-text\">\n                <label asp-for=\"ButtonText\" class=\"form-label\" data-required></label>\n                <input asp-for=\"ButtonText\" class=\"form-control\" required />\n                <span asp-validation-for=\"ButtonText\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"FormId\" class=\"form-label\"></label>\n                <select asp-for=\"FormId\" class=\"form-select w-auto\" asp-items=\"@checkoutFormOptions\"></select>\n                <span asp-validation-for=\"FormId\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"RequiresRefundEmail\" class=\"form-label\"></label>\n                <select asp-for=\"RequiresRefundEmail\" asp-items=\"@Html.GetEnumSelectList<RequiresRefundEmail>()\" class=\"form-select w-auto\"></select>\n                <span asp-validation-for=\"RequiresRefundEmail\" class=\"text-danger\"></span>\n            </div>\n            <section id=\"discounts\" class=\"p-0\">\n                <h3 class=\"mt-5 mb-4\">Discounts</h3>\n                <div class=\"form-group d-flex align-items-center\">\n                    <input asp-for=\"ShowDiscount\" type=\"checkbox\" class=\"btcpay-toggle me-3\" />\n                    <div>\n                        <label asp-for=\"ShowDiscount\" class=\"form-label mb-0\"></label>\n                        <div class=\"text-muted\">Not recommended for customer self-checkout.</div>\n                    </div>\n                    <span asp-validation-for=\"ShowDiscount\" class=\"text-danger\"></span>\n                </div>\n            </section>\n            <section id=\"custom-payments\" class=\"p-0\">\n                <h3 class=\"mt-5 mb-4\">Custom Payments</h3>\n                <div class=\"form-group mb-4 d-flex align-items-center\">\n                    <input asp-for=\"ShowCustomAmount\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#CustomAmountSettings\" aria-expanded=\"@Model.ShowCustomAmount\" aria-controls=\"CustomAmountSettings\"/>\n                    <label asp-for=\"ShowCustomAmount\" class=\"form-label mb-0\"></label>\n                    <span asp-validation-for=\"ShowCustomAmount\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"collapse @(Model.ShowCustomAmount ? \"show\" : \"\")\" id=\"CustomAmountSettings\">\n                    <div class=\"form-group mb-0 pb-3\">\n                        <label asp-for=\"CustomButtonText\" class=\"form-label\" data-required></label>\n                        <input asp-for=\"CustomButtonText\" class=\"form-control\" required />\n                        <span asp-validation-for=\"CustomButtonText\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            </section>\n            <section id=\"tips\" class=\"p-0\">\n                <h3 class=\"mt-5 mb-4\">Tips</h3>\n                <div class=\"form-group d-flex align-items-center\">\n                    <input asp-for=\"EnableTips\" type=\"checkbox\" class=\"btcpay-toggle me-3\" data-bs-toggle=\"collapse\" data-bs-target=\"#CustomTipsSettings\" aria-expanded=\"@Model.EnableTips\" aria-controls=\"CustomTipsSettings\" />\n                    <label asp-for=\"EnableTips\" class=\"form-label mb-0\"></label>\n                    <span asp-validation-for=\"EnableTips\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"collapse @(Model.EnableTips ? \"show\" : \"\")\" id=\"CustomTipsSettings\">\n                    <div class=\"form-group pt-3\">\n                        <label asp-for=\"CustomTipText\" class=\"form-label\" data-required></label>\n                        <input asp-for=\"CustomTipText\" class=\"form-control\" required />\n                        <span asp-validation-for=\"CustomTipText\" class=\"text-danger\"></span>\n                    </div>\n                    <div class=\"form-group mb-0\">\n                        <label asp-for=\"CustomTipPercentages\" class=\"form-label\"></label>\n                        <input asp-for=\"CustomTipPercentages\" class=\"form-control\" />\n                        <span asp-validation-for=\"CustomTipPercentages\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            </section>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-xl-8 col-xxl-constrain\">\n            <h3 class=\"mt-5 mb-2\">Additional Options</h3>\n            <div class=\"form-group\">\n                <div class=\"accordion\" id=\"additional\">\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-embed-payment-button-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-embed-payment-button\" aria-expanded=\"false\" aria-controls=\"additional-embed-payment-button\">\n                                Embed a payment button linking to POS item\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-embed-payment-button\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-embed-payment-button-header\">\n                            <div class=\"accordion-body\">\n                                <p>You can host point of sale buttons in an external website with the following code.</p>\n                                @if (Model.Example1 != null)\n                                {\n                                    <span>For anything with a custom amount</span>\n                                    <pre class=\"p-3\">@Model.Example1</pre>\n                                }\n                                @if (Model.Example2 != null)\n                                {\n                                    <span>For a specific item of your template</span>\n                                    <pre class=\"p-3\">@Model.Example2</pre>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-embed-pos-iframe-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-embed-pos-iframe\" aria-expanded=\"false\" aria-controls=\"additional-embed-pos-iframe\">\n                                Embed Point of Sale via Iframe\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-embed-pos-iframe\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-embed-pos-iframe-header\">\n                            <div class=\"accordion-body\">\n                                You can embed this POS via an iframe.\n                                @{\n                                    var iframe = $\"<iframe src='{Url.Action(\"ViewPointOfSale\", \"UIPointOfSale\", new { appId = Model.Id }, Context.Request.Scheme)}' style='max-width: 100%; border: 0;'></iframe>\";\n                                }\n                                <pre class=\"p-3\">@iframe</pre>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-redirect-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-redirect\" aria-expanded=\"false\" aria-controls=\"additional-redirect\">\n                                Redirects\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-redirect\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-redirect-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"RedirectUrl\" class=\"form-label\"></label>\n                                    <input asp-for=\"RedirectUrl\" class=\"form-control\" />\n                                    <span asp-validation-for=\"RedirectUrl\" class=\"text-danger\"></span>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label asp-for=\"RedirectAutomatically\" class=\"form-label\"></label>\n                                    <select asp-for=\"RedirectAutomatically\" asp-items=\"Model.RedirectAutomaticallySelectList\" class=\"form-select\"></select>\n                                    <span asp-validation-for=\"RedirectAutomatically\" class=\"text-danger\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-notification-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-notification\" aria-expanded=\"false\" aria-controls=\"additional-notification\">\n                                Notification URL Callbacks\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-notification\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-notification-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"NotificationUrl\" class=\"form-label\"></label>\n                                    <input asp-for=\"NotificationUrl\" class=\"form-control\" />\n                                    <span asp-validation-for=\"NotificationUrl\" class=\"text-danger\"></span>\n                                </div>\n                                <p>A <code>POST</code> callback will be sent to the specified <code>notificationUrl</code> (for on-chain transactions when there are sufficient confirmations):</p>\n                                <pre class=\"p-3\">@Model.ExampleCallback</pre>\n                                <p><strong>Never</strong> trust anything but <code>id</code>, <strong>ignore</strong> the other fields completely, an attacker can spoof those, they are present only for backward compatibility reason:</p>\n                                <ul>\n                                    <li>Send a <code>GET</code> request to <code>https://btcpay.example.com/invoices/{invoiceId}</code> with <code>Content-Type: application/json; Authorization: Basic YourLegacyAPIkey\"</code>, Legacy API key can be created with Access Tokens in Store settings</li>\n                                    <li>Verify that the <code>orderId</code> is from your backend, that the <code>price</code> is correct and that <code>status</code> is <code>settled</code></li>\n                                    <li>You can then ship your order</li>\n                                </ul>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"accordion-item\">\n                        <h2 class=\"accordion-header\" id=\"additional-custom-css-header\">\n                            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#additional-custom-css\" aria-expanded=\"false\" aria-controls=\"additional-custom-css\">\n                                Custom CSS\n                                <vc:icon symbol=\"caret-down\" />\n                            </button>\n                        </h2>\n                        <div id=\"additional-custom-css\" class=\"accordion-collapse collapse\" aria-labelledby=\"additional-custom-css-header\">\n                            <div class=\"accordion-body\">\n                                <div class=\"form-group\">\n                                    <label asp-for=\"CustomCSSLink\" class=\"form-label\"></label>\n                                    <a href=\"https://docs.btcpayserver.org/Development/Theme/#2-bootstrap-themes\" target=\"_blank\" rel=\"noreferrer noopener\">\n                                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                                    </a>\n                                    <input asp-for=\"CustomCSSLink\" class=\"form-control\" />\n                                    <span asp-validation-for=\"CustomCSSLink\" class=\"text-danger\"></span>\n                                </div>\n                                <div class=\"form-group\">\n                                    <label asp-for=\"EmbeddedCSS\" class=\"form-label\"></label>\n                                    <textarea asp-for=\"EmbeddedCSS\" rows=\"10\" cols=\"40\" class=\"form-control\"></textarea>\n                                    <span asp-validation-for=\"EmbeddedCSS\" class=\"text-danger\"></span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n\n<div class=\"d-flex gap-3 mt-3\">\n    <a class=\"btn btn-secondary\" asp-action=\"ListInvoices\" asp-controller=\"UIInvoice\" asp-route-storeId=\"@Model.StoreId\" asp-route-searchterm=\"@Model.SearchTerm\">Invoices</a>\n  <a id=\"DeleteApp\" class=\"btn btn-outline-danger\" asp-controller=\"UIApps\" asp-action=\"DeleteApp\" asp-route-appId=\"@Model.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The app <strong>@Html.Encode(Model.AppName)</strong> and its settings will be permanently deleted.\" data-confirm-input=\"DELETE\">Delete this app</a>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete app\", \"This app will be removed from this store.\", \"Delete\"))\" />\n\n@section PageHeadContent {\n    <link href=\"~/vendor/highlightjs/default.min.css\" rel=\"stylesheet\" asp-append-version=\"true\">\n    <link href=\"~/vendor/summernote/summernote-bs5.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n    <link href=\"~/main/template-editor.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n}\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\" />\n    <script id=\"template-product-item\" type=\"text/template\">\n        <div class=\"col-sm-4 col-md-3 mb-3\">\n            <div class=\"card\">\n                {image}\n                <div class=\"card-body\">\n                    <h6 class=\"card-title\">{title}</h6>\n                    <a href=\"#\" class=\"js-product-edit btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#product-modal\">Edit</a>\n                    <a href=\"#\" class=\"js-product-remove btn btn-danger\"><i class=\"fa fa-trash\"></i></a>\n                </div>\n            </div>\n        </div>\n    </script>\n    <script id=\"template-product-content\" type=\"text/template\">\n        <div class=\"mb-3\">\n            <input class=\"js-product-id\" type=\"hidden\" name=\"id\" value=\"{id}\">\n            <input class=\"js-product-index\" type=\"hidden\" name=\"index\" value=\"{index}\">\n            <div class=\"form-group row\">\n                <div class=\"col-sm-6\">\n                    <label class=\"form-label\" data-required>Title</label>\n                    <input type=\"text\" class=\"js-product-title form-control mb-2\" value=\"{title}\" autofocus required />\n                </div>\n                <div class=\"col-sm-3\">\n                    <label class=\"form-label\" data-required>Price</label>\n                    <input class=\"js-product-price form-control mb-2\"\n                           inputmode=\"decimal\"\n                           pattern=\"\\d*\"\n                           type=\"number\"\n                           value=\"{price}\"\n                           required />\n                </div>\n                <div class=\"col-sm-3\">\n                    <label class=\"form-label\">Custom price</label>\n                    <select class=\"js-product-custom form-select\">\n                        {custom}\n                    </select>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"form-label\">Image</label>\n                <input type=\"text\" class=\"js-product-image form-control mb-2\" value=\"{image}\" />\n            </div>\n            <div class=\"form-group\">\n                <label class=\"form-label\">Description</label>\n                <textarea rows=\"3\" cols=\"40\" class=\"js-product-description form-control mb-2\">{description}</textarea>\n            </div>\n            <div class=\"form-group\">\n                <label class=\"form-label\">Inventory (leave blank to not use inventory feature)</label>\n                <input type=\"number\" inputmode=\"numeric\" step=\"1\" class=\"js-product-inventory form-control mb-2\" value=\"{inventory}\" />\n            </div>\n            <div class=\"form-group d-flex align-items-center\">\n                <input type=\"checkbox\" class=\"btcpay-toggle me-2\" value=\"{disabled}\" />\n                <label class=\"form-label mb-0\">Disabled</label>\n            </div>\n        </div>\n    </script>\n    <script>\n        const posStyleSelector = document.getElementById('DefaultView');\n        posStyleSelector.addEventListener('change', function(e) {\n            handleStyleSelected(e.target.value);\n        });\n\n        function handleStyleSelected(style) {\n            switch (style) {\n                case '0': // Item list only\n                case '3': // Print\n                    hideDiscountsSection();\n                    hideButtonPriceTextSection();\n                    showCustomPaymentAmountSection();\n                    hideTipsSection();\n                    break;\n                case '1': // Item list and cart\n                    showDiscountsSection();\n                    showButtonPriceTextSection();\n                    showCustomPaymentAmountSection();\n                    showTipsSection();\n                    break;\n                case '2': // Keypad only\n                    showDiscountsSection();\n                    hideButtonPriceTextSection();\n                    hideCustomPaymentAmountSection();\n                    showTipsSection();\n                    break;\n            }\n        }\n\n        /** Show/hide discounts section */\n\n        const discountsSection = document.getElementById('discounts');\n\n        function hideDiscountsSection() {\n            hideElement(discountsSection);\n        }\n\n        function showDiscountsSection() {\n            showElement(discountsSection);\n        }\n\n        /***************************************/\n\n        /** Show/hide button text section */\n\n        const buttonPriceTextSection = document.getElementById('button-price-text');\n\n        function hideButtonPriceTextSection() {\n            hideElement(buttonPriceTextSection);\n        }\n\n        function showButtonPriceTextSection() {\n            showElement(buttonPriceTextSection);\n        }\n\n        /***************************************/\n\n        /** Show/hide custom payments amount seciton */\n\n        const customPaymentAmountSection = document.getElementById('custom-payments');\n\n        function hideCustomPaymentAmountSection() {\n           hideElement(customPaymentAmountSection);\n        }\n\n        function showCustomPaymentAmountSection() {\n            showElement(customPaymentAmountSection);\n        }\n\n        /***************************************/\n\n        /** Show/hide tips seciton */\n\n        const tipsSection = document.getElementById('tips');\n\n        function hideTipsSection() {\n           hideElement(tipsSection);\n        }\n\n        function showTipsSection() {\n            showElement(tipsSection);\n        }\n\n        /***************************************/\n\n        function hideElement(el) {\n            el.setAttribute('hidden', true);\n        }\n\n        function showElement(el) {\n            el.removeAttribute('hidden');\n        }\n\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            handleStyleSelected(posStyleSelector.value);\n        });\n    </script>\n\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/summernote/summernote-bs5.js\" asp-append-version=\"true\"></script>\n}\n", "@using BTCPayServer.Services.Apps\n@using BTCPayServer.Abstractions.Models\n@model ListAppsViewModel\n@{\n    ViewData.SetActivePage(AppsNavPages.Index, \"Apps\");\n    var storeNameSortOrder = (string)ViewData[\"StoreNameSortOrder\"];\n    var appNameSortOrder = (string)ViewData[\"AppNameSortOrder\"];\n    var appTypeSortOrder = (string)ViewData[\"AppTypeSortOrder\"];\n    var sortByDesc = \"Sort by descending...\";\n    var sortByAsc = \"Sort by ascending...\";\n}\n\n<partial name=\"_StatusMessage\" />\n\n<div class=\"d-sm-flex align-items-center justify-content-between mb-2\">\n    <h2 class=\"mb-0\">\n        @ViewData[\"Title\"]\n        <small>\n            <a href=\"https://docs.btcpayserver.org/Apps/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n            </a>\n        </small>\n    </h2>\n    <a asp-action=\"CreateApp\" asp-route-storeId=\"@Context.GetStoreData().Id\" class=\"btn btn-primary mt-3 mt-sm-0\" role=\"button\" id=\"CreateNewApp\"><span class=\"fa fa-plus\"></span> Create a new app</a>\n</div>\n\n<div class=\"row\">\n    <div class=\"col-lg-12\">\n        @if (Model.Apps.Any())\n        {\n            <table class=\"table table-hover table-responsive-md\">\n                <thead>\n                <tr>\n                    <th>\n                        <a\n                            asp-action=\"ListApps\"\n                            asp-route-storeId=\"@Context.GetStoreData().Id\"\n                            asp-route-sortOrder=\"@(storeNameSortOrder ?? \"asc\")\"\n                            asp-route-sortOrderColumn=\"StoreName\"\n                            class=\"text-nowrap\"\n                            title=\"@(storeNameSortOrder == \"desc\" ? sortByDesc : sortByAsc)\"\n                        >\n                            Store\n                            <span class=\"fa @(storeNameSortOrder == \"asc\" ? \"fa-sort-alpha-desc\" : storeNameSortOrder == \"desc\" ? \"fa-sort-alpha-asc\" : \"fa-sort\")\" />\n                        </a>\n                    </th>\n                    <th>\n                        <a\n                            asp-action=\"ListApps\"\n                            asp-route-storeId=\"@Context.GetStoreData().Id\"\n                            asp-route-sortOrder=\"@(appNameSortOrder ?? \"asc\")\"\n                            asp-route-sortOrderColumn=\"AppName\"\n                            class=\"text-nowrap\"\n                            title=\"@(appNameSortOrder == \"desc\" ? sortByDesc : sortByAsc)\"\n                        >\n                            Name\n                            <span class=\"fa @(appNameSortOrder == \"asc\" ? \"fa-sort-alpha-desc\" : appNameSortOrder == \"desc\" ? \"fa-sort-alpha-asc\" : \"fa-sort\")\" />\n                        </a>\n                    </th>\n                    <th>\n                        <a\n                            asp-action=\"ListApps\"\n                            asp-route-storeId=\"@Context.GetStoreData().Id\"\n                            asp-route-sortOrder=\"@(appTypeSortOrder ?? \"asc\")\"\n                            asp-route-sortOrderColumn=\"AppType\"\n                            class=\"text-nowrap\"\n                            title=\"@(appTypeSortOrder == \"desc\" ? sortByDesc : sortByAsc)\"\n                        >\n                            App Type\n                            <span class=\"fa @(appTypeSortOrder == \"asc\" ? \"fa-sort-alpha-desc\" : appTypeSortOrder == \"desc\" ? \"fa-sort-alpha-asc\" : \"fa-sort\")\" />\n                        </a>\n                    </th>\n                    <th style=\"text-align:right\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                @foreach (var app in Model.Apps)\n                {\n                    <tr>\n                        <td>\n                            @if (app.IsOwner)\n                            {\n                                <span><a asp-controller=\"UIStores\" asp-action=\"GeneralSettings\" asp-route-storeId=\"@app.StoreId\">@app.StoreName</a></span>\n                            }\n                            else\n                            {\n                                <span>@app.StoreName</span>\n                            }\n                        </td>\n                        <td>@app.AppName</td>\n                        <td>\n                            @typeof(AppType).DisplayName(app.AppType) \n                            @if (app.AppType != AppType.Crowdfund.ToString())\n                            {\n                                <span>-</span> \n                            }\n                            \n                            @app.ViewStyle\n                        </td>\n                        <td class=\"text-end\">\n                            @if (app.IsOwner)\n                            {\n                                <a asp-action=\"@app.UpdateAction\" asp-controller=\"UIApps\" asp-route-appId=\"@app.Id\" asp-route-storeId=\"@app.StoreId\">Settings</a>\n                                <span> - </span>\n                            }\n\t\t\t\t\t<a asp-action=\"DeleteApp\" asp-route-appId=\"@app.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The app <strong>@Html.Encode(app.AppName)</strong> and its settings will be permanently deleted from your store <strong>@Html.Encode(app.StoreName)</strong>.\" data-confirm-input=\"DELETE\">Delete</a>\n                        </td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n        }\n        else\n        {\n            <p class=\"text-secondary mt-3\">\n                There are no apps yet.\n            </p>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete app\", \"This app will be removed from this store.\", \"Delete\"))\" />\n", "@using BTCPayServer.Views.Apps\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@model BTCPayServer.Models.CustodianAccountViewModels.EditCustodianAccountViewModel\n@{\n    ViewData.SetActivePage(AppsNavPages.Update, \"Edit custodian account\");\n}\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\"/>\n}\n\n<partial name=\"_StatusMessage\"/>\n\n<h2 class=\"mt-1 mb-4\">@ViewData[\"Title\"]</h2>\n\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <form asp-action=\"EditCustodianAccount\" class=\"mb-5\">\n            @if (!ViewContext.ModelState.IsValid)\n            {\n                <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div>\n            }\n            <partial name=\"_FormTopMessages\" model=\"Model.ConfigForm\"/>\n\n            <div class=\"form-group\">\n                <label asp-for=\"CustodianAccount.Name\" class=\"form-label\" data-required></label>\n                <input asp-for=\"CustodianAccount.Name\" class=\"form-control\" required/>\n                <span asp-validation-for=\"CustodianAccount.Name\" class=\"text-danger\"></span>\n            </div>\n\n            <partial name=\"_Form\" model=\"Model.ConfigForm\"/>\n\n            <div class=\"form-group mt-4\">\n                <input type=\"submit\" value=\"Continue\" class=\"btn btn-primary\" id=\"Save\"/>\n            </div>\n        </form>\n        <a asp-action=\"DeleteCustodianAccount\" asp-route-storeId=\"@Model.CustodianAccount.StoreId\" asp-route-accountId=\"@Model.CustodianAccount.Id\" class=\"btn btn-outline-danger\" role=\"button\" id=\"DeleteCustodianAccountConfig\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The custodian account <strong>@Html.Encode(Model.CustodianAccount.Name)</strong> will be permanently deleted.\" data-confirm-input=\"DELETE\">\n            <span class=\"fa fa-trash\"></span> Delete this custodian account\n        </a>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete custodian account\", \"The custodian account will be permanently deleted.\", \"Delete\"))\" />\n", "@using BTCPayServer.Views.Stores\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@model UILNURLController.EditLightningAddressVM\n@{\n    ViewData.SetActivePage(\"LightningAddress\", nameof(StoreNavPages), \"Lightning Address\", Context.GetStoreData().Id);\n}\n\n@section PageHeadContent {\n    <style>\n        .settings-holder span:not(:last-child):after{\n            content: \" / \";\n        }\n    </style>\n}\n\n@section PageFootContent {\n    <script>\n        delegate('click', '.remove', event => { \n            event.preventDefault() \n            const { name, value } = event.target\n            const confirmButton = document.getElementById('ConfirmContinue')\n            confirmButton.setAttribute('name', name)\n            confirmButton.setAttribute('value', value)\n        })\n    </script>\n}\n\n<partial name=\"_StatusMessage\" />\n\n@if (Context.Request.PathBase.ToString() != string.Empty)\n{\n    <div class=\"alert alert-warning\" role=\"alert\">\n        Your BTCPay Server installation is using the root path <span class=\"fw-bold\">@Context.Request.PathBase</span>.<br /><br />\n        This is incompatible with wallets attempting to resolve <span class=\"fw-bold\">@Context.Request.GetAbsoluteUriNoPathBase(new Uri(\"/.well-known/lnurlp/{username}\", UriKind.Relative))</span> rather than <span class=\"fw-bold\">@Context.Request.GetAbsoluteUri(\"/.well-known/lnurlp/{username}\")</span>.<br /><br />\n        If the LN Address doesn't work, ask your integrator to redirect queries from <span class=\"fw-bold\">@Context.Request.GetAbsoluteUriNoPathBase(new Uri(\"/.well-known/lnurlp/{username}\", UriKind.Relative))</span> to <span class=\"fw-bold\">@Context.Request.GetAbsoluteUri(\"/.well-known/lnurlp/{username}\")</span>.\n    </div>\n}\n\n<div class=\"d-flex align-items-center justify-content-between mb-2\">\n    <h2 class=\"mb-0\">@ViewData[\"Title\"]</h2>\n    <a data-bs-toggle=\"collapse\" data-bs-target=\"#AddAddress\" class=\"btn btn-primary\" role=\"button\">\n        <span class=\"fa fa-plus\"></span>\n        Add Address\n    </a>\n</div>\n\n<form asp-action=\"EditLightningAddress\" method=\"post\">\n    @{\n        var showAddForm = !ViewContext.ViewData.ModelState.IsValid || !string.IsNullOrEmpty(Model.Add?.Username) || Model.Add?.Max != null || Model.Add?.Min != null || !string.IsNullOrEmpty(Model.Add?.CurrencyCode);\n        var showAdvancedOptions = !string.IsNullOrEmpty(Model.Add?.CurrencyCode) || Model.Add?.Min != null || Model.Add?.Max != null;\n     }\n    \n    <div class=\"collapse @(showAddForm ? \"show\": \"\")\" id=\"AddAddress\">\n        <div class=\"form-group pt-2\">\n            <label asp-for=\"Add.Username\" class=\"form-label\"></label>\n            <div class=\"input-group\">\n                <input asp-for=\"Add.Username\" class=\"form-control\"/>\n                <span class=\"input-group-text\">@@@Context.Request.Host.ToUriComponent()@Context.Request.PathBase</span>\n            </div>\n            <span asp-validation-for=\"Add.Username\" class=\"text-danger\"></span>\n        </div>\n        <button class=\"d-inline-flex align-items-center btn btn-link text-primary fw-semibold p-0 mb-3\" type=\"button\" id=\"AdvancedSettingsButton\" data-bs-toggle=\"collapse\" data-bs-target=\"#AdvancedSettings\" aria-expanded=\"false\" aria-controls=\"AdvancedSettings\">\n            <vc:icon symbol=\"caret-down\"/>\n            <span class=\"ms-1\">Advanced settings</span>\n        </button>\n        <div id=\"AdvancedSettings\" class=\"collapse @(showAdvancedOptions ? \"show\" : \"\")\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-auto\">\n                    <div class=\"form-group\">\n                        <label asp-for=\"Add.CurrencyCode\" class=\"form-label\"></label>\n                        <input asp-for=\"Add.CurrencyCode\" class=\"form-control\" style=\"max-width:16ch;\"/>\n                        <span asp-validation-for=\"Add.CurrencyCode\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-auto\">\n                    <div class=\"form-group\">\n                        <label asp-for=\"Add.Min\" class=\"form-label\"></label>\n                        <input asp-for=\"Add.Min\" class=\"form-control\" type=\"number\" inputmode=\"numeric\" min=\"1\" style=\"max-width:16ch;\"/>\n                        <span asp-validation-for=\"Add.Min\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-auto\">\n                    <div class=\"form-group\">\n                        <label asp-for=\"Add.Max\" class=\"form-label\"></label>\n                        <input asp-for=\"Add.Max\" class=\"form-control\" type=\"number\" inputmode=\"numeric\" min=\"1\" max=\"@int.MaxValue\" style=\"max-width:16ch;\"/>\n                        <span asp-validation-for=\"Add.Max\" class=\"text-danger\"></span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    \n        <div class=\"form-group\">\n            <button type=\"submit\" name=\"command\" value=\"add\" class=\"btn btn-primary\">Save</button>\n        </div>\n    </div>\n    \n    @if (Model.Items.Any())\n    {\n        <div class=\"row\">\n            <div class=\"col\">\n                <table class=\"table table-hover\">\n                    <thead>\n                    <tr>\n                        <th>Address</th>\n                        <th>Settings</th>\n                        <th class=\"text-end\">Actions</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    @for (var index = 0; index < Model.Items.Count; index++)\n                    {\n                        <input asp-for=\"Items[index].CurrencyCode\" type=\"hidden\"/>\n                        <input asp-for=\"Items[index].Min\" type=\"hidden\"/>\n                        <input asp-for=\"Items[index].Max\" type=\"hidden\"/>\n                        <input asp-for=\"Items[index].Username\" type=\"hidden\"/>\n                        var address = $\"{Model.Items[index].Username}@{Context.Request.Host.ToUriComponent()}\";\n                        <tr>\n                            <td>\n                                <div class=\"input-group\" data-clipboard=\"@address\">\n                                    <input type=\"text\" class=\"form-control copy-cursor lightning-address-value\"  readonly=\"readonly\" value=\"@address\"/>\n                                    <button type=\"button\" class=\"btn btn-outline-secondary\" data-clipboard-confirm>Copy</button>\n                                </div>\n\n                            </td>\n                            <td class=\"settings-holder align-middle\">\n                                @if (Model.Items[index].Min.HasValue)\n                                {\n                                    <span>@Safe.Raw($\"{Model.Items[index].Min} min sats\")</span>\n                                }\n                                @if (Model.Items[index].Max.HasValue)\n                                {\n                                    <span> @Safe.Raw($\"{Model.Items[index].Max} max sats\")</span>\n                                }\n                                @if (!string.IsNullOrEmpty(Model.Items[index].CurrencyCode))\n                                {\n                                    <span> @Safe.Raw($\"tracked in {Model.Items[index].CurrencyCode}\")</span>\n                                }\n                            </td>\n                            <td class=\"text-end\">\n                                <button type=\"submit\" title=\"Remove\" name=\"command\" value=\"@($\"remove:{Model.Items[index].Username}\")\"\n\t\t\t\tclass=\"btn btn-link px-0 remove\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The Lightning Address <strong>@Html.Encode(address)</strong> will be removed.\" data-confirm-input=\"REMOVE\">\n                                    Remove\n                                </button>\n                            </td>\n                        </tr>\n                    }\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    }\n    else\n    {\n        <p class=\"text-secondary mt-3\">\n            There are no Lightning Addresses yet.\n        </p>\n    }\n</form>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Remove Lightning Address\", \"This Lightning Address will be removed.\", \"Remove\"))\" />\n", "@namespace BTCPayServer.Client\n@using BTCPayServer.Abstractions.Models\n@model BTCPayServer.Controllers.UIManageController.ApiKeysViewModel\n@{\n    ViewData.SetActivePage(ManageNavPages.APIKeys, \"API Keys\");\n}\n\n<div class=\"row\">\n    <div class=\"col-xl-10 col-xxl-constrain\">\n        <div class=\"d-flex align-items-center justify-content-between mb-3\">\n            <h3 class=\"mb-0\">@ViewData[\"Title\"]</h3>\n            <a class=\"btn btn-primary\" asp-action=\"AddApiKey\" id=\"AddApiKey\">\n                <span class=\"fa fa-plus\"></span>\n                Generate Key\n            </a>\n        </div>\n        <p>\n            The <a asp-controller=\"UIHome\" asp-action=\"SwaggerDocs\" target=\"_blank\">BTCPay Server Greenfield API</a> offers programmatic access to your instance. You can manage your BTCPay\n            Server (e.g. stores, invoices, users) as well as automate workflows and integrations (see <a href=\"https://docs.btcpayserver.org/Development/GreenFieldExample/\" rel=\"noreferrer noopener\">use case examples</a>).\n            For that you need the API keys, which can be generated here. Find more information in the <a href=\"@Url.Action(\"SwaggerDocs\", \"UIHome\")#section/Authentication\" target=\"_blank\" rel=\"noreferrer noopener\">API authentication docs</a>.\n        </p>\n\n        @if (Model.ApiKeyDatas.Any())\n        {\n            <table class=\"table table-lg\">\n                <thead>\n                    <tr>\n                        <th>Label</th>\n                        <th class=\"w-125px\">Key</th>\n                        <th>Permissions</th>\n                        <th class=\"text-end\">Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    @{\n                        var index = 0;\n                    }\n                    @foreach (var keyData in Model.ApiKeyDatas)\n                    {\n                        <tr>\n                            <td>@keyData.Label</td>\n                            <td>\n                                <code class=\"hide-when-js\">@keyData.Id</code>\n                                <a class=\"only-for-js\" data-reveal-btn>Click to reveal</a>\n                                <div hidden>\n                                    <code data-api-key>@keyData.Id</code>\n                                    <a class=\"mt-2\" data-clipboard-confirm>\n                                        Copy to clipboard\n                                    </a>\n                                </div>\n                            </td>\n                            <td>\n                                @{\n                                    var permissions = keyData.GetBlob().Permissions;\n                                }\n                                @if (!permissions.Any())\n                                {\n                                    <span class=\"text-warning\">No permissions</span>\n                                }\n                                else\n                                {\n                                    <ul>\n                                        @foreach (var permission in Permission.ToPermissions(permissions).Select(c => c.ToString()).Distinct().ToArray())\n                                        {\n                                            <li>\n                                                <code class=\"text-break\">@permission</code>\n                                            </li>\n                                        }\n                                    </ul>\n                                }\n                            </td>\n                            <td class=\"text-end\">\n\t\t\t\t\t\t\t\t<a asp-action=\"DeleteAPIKey\" asp-route-id=\"@keyData.Id\" asp-controller=\"UIManage\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"Any application using the API key <strong>@Html.Encode(keyData.Label ?? keyData.Id)</strong> will immediately lose access.\" data-confirm-input=\"DELETE\">Delete</a>\n                                <span>-</span>\n                                <button type=\"button\" class=\"btn btn-link only-for-js p-0\" data-qr=\"@index\">Show QR</button>\n                            </td>\n                        </tr>\n                        index++;\n                    }\n                </tbody>\n            </table>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete API key\", \"Any application using the API key will immediately lose access.\", \"Delete\"))\" />\n\n<partial name=\"ShowQR\" />\n\n@section PageHeadContent {\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\" />\n}\n@section PageFootContent {\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <script>\n        document.addEventListener(\"DOMContentLoaded\", function () {\n            $(\"[data-reveal-btn]\").on(\"click\", function (){\n                var $revealButton = $(this);\n                $revealButton.attr(\"hidden\", \"true\");\n\n                var $apiKeyContainer = $revealButton.next(\"[hidden]\");\n                $apiKeyContainer.removeAttr(\"hidden\");\n\n                (function setupCopyToClipboardButton() {\n                    var $clipboardBtn = $apiKeyContainer.children(\"[data-clipboard-confirm]\");\n                    var apiKey = $apiKeyContainer.children(\"[data-api-key]\").text().trim();\n                    $clipboardBtn.attr(\"data-clipboard\", apiKey);\n                    $clipboardBtn.click(window.copyToClipboard);\n                })();\n            });\n\n            const apiKeys = @Safe.Json(Model.ApiKeyDatas.Select(data => new\n                          {\n                              ApiKey = data.Id,\n                              Host = Context.Request.GetAbsoluteRoot()\n                          }));\n            const qrApp = initQRShow({ title: \"API Key QR\" });\n            delegate(\"click\", \"button[data-qr]\", e => {\n                e.preventDefault();\n                const { qr } = e.target.dataset;\n                const data = apiKeys[qr];\n                qrApp.showData(JSON.stringify(data));\n            });\n        });\n    </script>\n}\n", "@using Fido2NetLib\n@using BTCPayServer.Abstractions.Models\n@model TwoFactorAuthenticationViewModel\n@{\n    ViewData.SetActivePage(ManageNavPages.TwoFactorAuthentication, \"Two-Factor Authentication\");\n}\n<h3 class=\"mb-3\">@ViewData[\"Title\"]</h3>\n\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <p>\n            Two-Factor Authentication (2FA) is an additional measure to protect your account.\n            In addition to your password you will be asked for a second proof on login.\n            This can be provided by an app (such as Google or Microsoft Authenticator)\n            or a security device (like a Yubikey or your hardware wallet supporting FIDO2).\n        </p>\n\n        <h4 class=\"mb-3\">App-based 2FA</h4>\n\n        @if (Model.Is2faEnabled)\n        {\n            if (Model.RecoveryCodesLeft == 0)\n            {\n                <div class=\"alert alert-danger\">\n                    <h4 class=\"alert-heading mb-3\">\n                        <span class=\"fa fa-warning\"></span>\n                        You have no recovery codes left.\n                    </h4>\n                    <p class=\"mb-0\">You must <a asp-action=\"GenerateRecoveryCodes\" class=\"alert-link\">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>\n                </div>\n            }\n            else if (Model.RecoveryCodesLeft == 1)\n            {\n                <div class=\"alert alert-danger\">\n                    <h4 class=\"alert-heading mb-3\">\n                        <span class=\"fa fa-warning\"></span>\n                        You only have 1 recovery code left.\n                    </h4>\n                    <p class=\"mb-0\">You can <a asp-action=\"GenerateRecoveryCodes\" class=\"alert-link\">generate a new set of recovery codes</a>.</p>\n                </div>\n            }\n            else if (Model.RecoveryCodesLeft <= 3)\n            {\n                <div class=\"alert alert-warning\">\n                    <h4 class=\"alert-heading mb-3\">\n                        <span class=\"fa fa-warning\"></span>\n                        You only have @Model.RecoveryCodesLeft recovery codes left.\n                    </h4>\n                    <p class=\"mb-0\">You should <a asp-action=\"GenerateRecoveryCodes\" class=\"alert-link\">generate a new set of recovery codes</a>.</p>\n                </div>\n            }\n        }\n\n        <div class=\"list-group mb-3\">\n            @if (Model.Is2faEnabled)\n            {\n                <a asp-action=\"Disable2fa\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Disable two-factor authentication (2FA)\" data-description=\"Disabling 2FA does not change the keys used in the authenticator apps. If you wish to change the key used in an authenticator app you should reset your authenticator keys.\" data-confirm=\"Disable\" data-confirm-input=\"DISABLE\">\n                    <div>\n                        <h5>Disable 2FA</h5>\n                        <p class=\"mb-0 me-3\">Re-enabling will not require you to reconfigure your app.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n                <a asp-action=\"GenerateRecoveryCodes\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Reset recovery codes\" data-description=\"Your existing recovery codes will no longer be valid!\" data-confirm=\"Reset\" data-confirm-input=\"RESET\">\n                    <div>\n                        <h5>Reset recovery codes</h5>\n                        <p class=\"mb-0 me-3\">Regenerate your 2FA recovery codes.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n                <a asp-action=\"ResetAuthenticator\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Reset authenticator app\" data-description=\"This process disables 2FA until you verify your authenticator app and will also reset your 2FA recovery codes. If you do not complete your authenticator app configuration you may lose access to your account.\" data-confirm=\"Reset\" data-confirm-input=\"RESET\">\n                    <div>\n                        <h5>Reset app</h5>\n                        <p class=\"mb-0 me-3\">Invalidates the current authenticator configuration. Useful if you believe your authenticator settings were compromised.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n                <a asp-action=\"EnableAuthenticator\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\">\n                    <div>\n                        <h5>Configure app</h5>\n                        <p class=\"mb-0 me-3\">Display the key or QR code to configure an authenticator app with your current setup.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n            }\n            else\n            {\n                <a asp-action=\"EnableAuthenticator\" class=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action py-3\">\n                    <div>\n                        <h5>Enable 2FA</h5>\n                        <p class=\"mb-0 me-3\">Using apps such as Google or Microsoft Authenticator.</p>\n                    </div>\n                    <vc:icon symbol=\"caret-right\"/>\n                </a>\n            }\n        </div>\n\n        <h4 class=\"mt-4 mb-3\">Security devices</h4>\n\n        @if (Model.Credentials.Any())\n        {\n            <div class=\"list-group mb-3\">\n                @foreach (var device in Model.Credentials)\n                {\n                    var name = string.IsNullOrEmpty(device.Name) ? \"Unnamed security device\" : device.Name;\n                    <div class=\"list-group-item d-flex justify-content-between align-items-center py-3\">\n                        <div class=\"mb-0\">\n                            <h5 class=\"mb-0 w-100\">@name</h5>\n                            @switch (device.Type)\n                            {\n                                case Fido2Credential.CredentialType.FIDO2:\n                                    <span class=\"text-muted\">Security device (FIDO2)</span>\n                                    break;\n                                case Fido2Credential.CredentialType.LNURLAuth:\n                                    <span class=\"text-muted\">Lightning node (LNURL Auth)</span>\n                                    break;\n                            }\n                        </div>\n\n                        @if (device.Type == Fido2Credential.CredentialType.FIDO2)\n                        {\n                            <a asp-controller=\"UIFido2\" asp-action=\"Remove\" asp-route-id=\"@device.Id\" class=\"btn btn-outline-danger\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Remove security device\" data-description=\"Your account will no longer have the security device <strong>@Html.Encode(name)</strong> as an option for two-factor authentication.\" data-confirm=\"Remove\" data-confirm-input=\"REMOVE\">Remove</a>\n                        }\n                        else if (device.Type == Fido2Credential.CredentialType.LNURLAuth)\n                        {\n                            <a asp-controller=\"UILNURLAuth\" asp-action=\"Remove\" asp-route-id=\"@device.Id\" class=\"btn btn-outline-danger\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-title=\"Remove Lightning security\" data-description=\"Your account will no longer be linked to the lightning node <strong>@Html.Encode(name)</strong> as an option for two-factor authentication.\" data-confirm=\"Remove\" data-confirm-input=\"REMOVE\">Remove</a>\n                        }\n                    </div>\n                }\n            </div>\n        }\n\n        <form  asp-action=\"CreateCredential\">\n            <div class=\"input-group\">\n                <input type=\"text\" class=\"form-control\" name=\"Name\" placeholder=\"Security device name\"/>\n                <select asp-items=\"@Html.GetEnumSelectList<Fido2Credential.CredentialType>()\" class=\"form-select w-auto\" name=\"type\"></select>\n                <button id=\"btn-add\" type=\"submit\" class=\"btn btn-primary\">\n                    <span class=\"fa fa-plus\"></span>\n                    Add \n                </button>\n            </div>\n        </form>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Two-Factor Authentication\", \"Placeholder\", \"Placeholder\"))\"/>\n", "@using BTCPayServer.Views.Stores\n@using Microsoft.AspNetCore.Mvc.TagHelpers\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@model List<BTCPayServer.PayoutProcessors.UIPayoutProcessorsController.StorePayoutProcessorsView>\n@{\n    ViewData[\"NavPartialName\"] = \"../UIStores/_Nav\";\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    var storeId = Context.GetStoreData().Id;\n    ViewData.SetActivePage(StoreNavPages.PayoutProcessors, \"Payout Processors\", storeId);\n}\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <div class=\"d-flex align-items-center justify-content-between mb-3\">\n            <h3 class=\"mb-0\">@ViewData[\"Title\"]</h3>\n        </div>\n        <p>Payout Processors allow BTCPay Server to handle payouts in an automated way.</p>\n\n        @if (Model.Any())\n        {\n            foreach (var processorsView in Model)\n            {\n                <h4 class=\"mt-5\">@processorsView.Factory.FriendlyName</h4>\n                <table class=\"table table-hover mt-0\">\n                    <thead>\n                    <tr>\n                        <th>Payment Method</th>\n                        <th class=\"text-end\">Actions</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    @foreach (var conf in processorsView.Configured)\n                    {\n                        <tr>\n                            <td>\n                                @conf.Key.ToPrettyString()\n                            </td>\n                            <td class=\"text-end\">\n                                @if (conf.Value is null)\n                                {\n                                    <a href=\"@processorsView.Factory.ConfigureLink(storeId, conf.Key, Context.Request)\">Configure</a>\n                                }\n                                else\n                                {\n                                    <a href=\"@processorsView.Factory.ConfigureLink(storeId, conf.Key, Context.Request)\">Modify</a>\n                                    <span>-</span>\n                                    <a asp-action=\"Remove\" asp-route-storeId=\"@storeId\" asp-route-id=\"@conf.Value.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The @Html.Encode(processorsView.Factory.FriendlyName) for @Html.Encode(conf.Key.CryptoCode) will be removed from your store.\">Remove</a>\n                                }\n                            </td>\n                        </tr>\n                    }\n                    </tbody>\n                </table>\n            }\n        }\n        else\n        {\n            <p class=\"text-secondary mt-3\">\n                There are no processors available.\n            </p>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete payout processor\", \"This payout processor will be removed from this store.\", \"Delete\"))\" />\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\"/>\n}\n", "@using BTCPayServer.Abstractions.Models\n@model BTCPayServer.Models.ServerViewModels.DynamicDnsViewModel[]\n@{\n    ViewData.SetActivePage(ServerNavPages.Services, \"Dynamic DNS Settings\");\n}\n\n<div class=\"row\">\n    <div class=\"col-md-8\">\n        <div class=\"d-sm-flex align-items-center justify-content-between mb-3\">\n            <h3 class=\"mb-0\">\n                @ViewData[\"Title\"]\n                <small>\n                    <a href=\"https://docs.btcpayserver.org/Apps/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                </small>\n            </h3>\n            <form method=\"post\" asp-action=\"DynamicDnsService\">\n                <button id=\"AddDynamicDNS\" class=\"btn btn-primary mt-2\" type=\"submit\"><span class=\"fa fa-plus\"></span> Add service</button>\n            </form>\n        </div>\n\n        <div class=\"form-group\">\n            <p>\n                Dynamic DNS allows you to have a stable DNS name pointing to your server, even if your IP address changes regulary.\n                This is recommended if you are hosting BTCPay Server at home and wish to have a clearnet domain to access your server.\n            </p>\n            <p>\n                Note that you need to properly configure your NAT and BTCPay Server installation to get the HTTPS certificate. \n                See the documentation for <a href=\"https://docs.btcpayserver.org/Deployment/DynamicDNS/\" target=\"_blank\" rel=\"noreferrer noopener\">more information</a>.\n            </p>\n        </div>\n        \n        @if (Model.Any())\n        {\n            <table class=\"table table-sm table-responsive-md\">\n                <thead>\n                <tr>\n                    <th>Hostname</th>\n                    <th>Last updated</th>\n                    <th class=\"text-center\">Enabled</th>\n                    <th class=\"text-end\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                @foreach (var service in Model)\n                {\n                    <tr>\n                        <td>@service.Settings.Hostname</td>\n                        <td>@service.LastUpdated</td>\n                        <td class=\"text-center\">\n                            @if (service.Settings.Enabled)\n                            {\n                                <span class=\"text-success fa fa-check\"></span>\n                            }\n                            else\n                            {\n                                <span class=\"text-danger fa fa-times\"></span>\n                            }\n                        </td>\n                        <td class=\"text-end\">\n                            <a asp-action=\"DynamicDnsService\" asp-route-hostname=\"@service.Settings.Hostname\">Edit</a>\n                            <span> - </span>\n                            <a asp-action=\"DeleteDynamicDnsService\" asp-route-hostname=\"@service.Settings.Hostname\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"Deleting the dynamic DNS service for <strong>@Html.Encode(service.Settings.Hostname)</strong> means your BTCPay Server will stop updating the associated DNS record periodically.\" data-confirm-input=\"DELETE\">Delete</a>\n                        </td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n        }\n        else\n        {\n            <p class=\"text-secondary mt-3\">\n                There are no dynamic DNS services yet.\n            </p>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete dynamic DNS service\", \"Deleting the dynamic DNS service means your BTCPay Server will stop updating the associated DNS record periodically.\", \"Delete\"))\" />\n\n", "@using BTCPayServer.Abstractions.Models\n@model UsersViewModel\n@{\n    ViewData.SetActivePage(ServerNavPages.Users);\n    var nextUserEmailSortOrder = (string)ViewData[\"NextUserEmailSortOrder\"];\n    String userEmailSortOrder = null;\n    switch (nextUserEmailSortOrder)\n    {\n        case \"asc\":\n            userEmailSortOrder = \"desc\";\n            break;\n        case \"desc\":\n            userEmailSortOrder = \"asc\";\n            break;\n    }\n\n    var sortIconClass = \"fa-sort\";\n    if (userEmailSortOrder != null)\n    {\n        sortIconClass = $\"fa-sort-alpha-{userEmailSortOrder}\";\n    }\n\n    var sortByDesc = \"Sort by descending...\";\n    var sortByAsc = \"Sort by ascending...\";\n}\n\n<div class=\"d-flex align-items-center justify-content-between mb-3\">\n    <h3 class=\"mb-0\">@ViewData[\"Title\"]</h3>\n    <a asp-action=\"CreateUser\" class=\"btn btn-primary\" role=\"button\" id=\"CreateUser\">\n        <span class=\"fa fa-plus\"></span>\n        Add User\n    </a>\n</div>\n\n<form asp-action=\"ListUsers\" asp-route-sortOrder=\"@(userEmailSortOrder)\" style=\"max-width:640px\">\n    <div class=\"input-group\">\n        <input asp-for=\"SearchTerm\" class=\"form-control\" placeholder=\"Search by email...\" />\n        <button type=\"submit\" class=\"btn btn-secondary\" title=\"Search by email\">\n            <span class=\"fa fa-search\"></span> Search\n        </button>\n    </div>\n    <span asp-validation-for=\"SearchTerm\" class=\"text-danger\"></span>\n</form>\n\n<div class=\"table-responsive\">\n    <table class=\"table table-hover\">\n        <thead>\n        <tr>\n            <th>\n                <a\n                    asp-action=\"ListUsers\"\n                    asp-route-sortOrder=\"@(nextUserEmailSortOrder ?? \"asc\")\"\n                    class=\"text-nowrap\"\n                    title=\"@(nextUserEmailSortOrder == \"desc\" ? sortByAsc : sortByDesc)\"\n                >\n                    Email\n                    <span class=\"fa @(sortIconClass)\" />\n                </a>\n            </th>\n            <th >Created</th>\n            <th class=\"text-center\">Verified</th>\n            <th class=\"text-center\">Enabled</th>\n            <th class=\"text-end\">Actions</th>\n        </tr>\n        </thead>\n        <tbody>\n        @foreach (var user in Model.Users)\n        {\n            <tr>\n                <td class=\"d-flex align-items-center\">\n                    <span class=\"me-2\">@user.Email</span>\n                    @foreach (var role in user.Roles)\n                    {\n                        <span class=\"badge bg-info\">@Model.Roles[role]</span>\n                    }\n                </td>\n                <td>@user.Created?.ToBrowserDate()</td>\n                <td class=\"text-center\">\n                    @if (user.Verified)\n                    {\n                        <span class=\"text-success fa fa-check\"></span>\n                    }\n                    else\n                    {\n                        <span class=\"text-danger fa fa-times\"></span>\n                    }\n                </td>\n                <td class=\"text-center\">\n                    @if (!user.Disabled)\n                    {\n                        <span class=\"text-success fa fa-check\" title=\"User is enabled\"></span>\n                    }\n                    else\n                    {\n                        <span class=\"text-danger fa fa-times\" title=\"User is disabled\"></span>\n                    }\n                </td>\n                <td class=\"text-end\">\n                    @if (!user.Verified && !user.Disabled) {\n                        <a asp-action=\"SendVerificationEmail\" asp-route-userId=\"@user.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"This will send a verification email to <strong>@Html.Encode(user.Email)</strong>.\">Resend verification email</a>\n                        <span>-</span>\n                    }\n                    <a asp-action=\"User\" asp-route-userId=\"@user.Id\">Edit</a> <span> - </span> <a asp-action=\"DeleteUser\" asp-route-userId=\"@user.Id\">Remove</a>\n                    - <a asp-action=\"ToggleUser\"\n                         asp-route-enable=\"@user.Disabled\"\n                         asp-route-userId=\"@user.Id\">\n                        @(user.Disabled ? \"Enable\" : \"Disable\")\n                    </a>\n                </td>\n            </tr>\n        }\n        </tbody>\n    </table>\n</div>\n\n<vc:pager view-model=\"Model\"></vc:pager>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Send verification email\", $\"This will send a verification email to the user.\", \"Send\"))\" />\n", "@using BTCPayServer.Views.Stores\n@using BTCPayServer.Abstractions.Extensions\n@using BTCPayServer.Abstractions.Models\n@using BTCPayServer.Client\n@using BTCPayServer.Client.Models\n@using ExchangeSharp\n@model BTCPayServer.Models.WalletViewModels.PullPaymentsModel\n@{\n    ViewData.SetActivePage(StoreNavPages.PullPayments, \"Pull Payments\", Context.GetStoreData().Id);\n    var nextStartDateSortOrder = (string)ViewData[\"NextStartSortOrder\"];\n    string startDateSortOrder = null;\n    switch (nextStartDateSortOrder)\n    {\n        case \"asc\":\n            startDateSortOrder = \"desc\";\n            break;\n        case \"desc\":\n            startDateSortOrder = \"asc\";\n            break;\n    }\n\n    var sortIconClass = \"fa-sort\";\n    if (startDateSortOrder != null)\n    {\n        sortIconClass = $\"fa-sort-alpha-{startDateSortOrder}\";\n    }\n\n    var sortByDesc = \"Sort by descending...\";\n    var sortByAsc = \"Sort by ascending...\";\n}\n\n@section PageHeadContent {\n    <style>\n        .tooltip-inner {\n            text-align: left;\n        }\n    </style>\n}\n\n<div class=\"sticky-header-setup\"></div>\n<div class=\"sticky-header d-flex align-items-center justify-content-between\">\n    <h2 class=\"mb-0\">\n        @ViewData[\"Title\"]\n        <small>\n            <a href=\"https://docs.btcpayserver.org/PullPayments/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n            </a>\n        </small>\n    </h2>\n    <a permission=\"@Policies.CanModifyStoreSettings\" asp-action=\"NewPullPayment\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\" class=\"btn btn-primary\" role=\"button\" id=\"NewPullPayment\">\n        <span class=\"fa fa-plus\"></span> Create Pull Payment\n    </a>\n</div>\n\n<partial name=\"_StatusMessage\" />\n\n<nav id=\"SectionNav\" class=\"mb-3\">\n    <div class=\"nav\">\n        @foreach (var state in Enum.GetValues(typeof(PullPaymentState)).Cast<PullPaymentState>())\n        {\n            <a id=\"@state-view\"\n                asp-action=\"PullPayments\"\n                asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\"\n                asp-route-pullPaymentState=\"@state\"\n                class=\"nav-link @(state == Model.ActiveState ? \"active\" : \"\")\" role=\"tab\">@state</a>\n        }\n    </div>\n</nav>\n\n@if (Model.PullPayments.Any())\n{\n    @foreach (var pp in Model.PullPayments)\n    {\n        <script id=\"tooptip_template_@pp.Id\" type=\"text/template\">\n            <span>Awaiting:&nbsp;<span class=\"float-end\">@pp.Progress.AwaitingFormatted</span></span>\n            <br />\n            <span>Completed:&nbsp;<span class=\"float-end\">@pp.Progress.CompletedFormatted</span></span>\n            <br />\n            <span>Limit:&nbsp;<span class=\"float-end\">@pp.Progress.LimitFormatted</span></span>\n            @if (pp.Progress.ResetIn != null)\n            {\n                <br />\n                <span>Resets in:&nbsp;<span class=\"float-end\">@pp.Progress.ResetIn</span></span>\n            }\n            @if (pp.Progress.EndIn != null)\n            {\n                <br />\n                <span>Expires in:&nbsp;<span class=\"float-end\">@pp.Progress.EndIn</span></span>\n            }\n        </script>\n    }\n    <table class=\"table table-hover table-responsive-lg\">\n        <thead class=\"thead-inverse\">\n            <tr>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">\n                    <a asp-action=\"PullPayments\"\n                       asp-route-sortOrder=\"@(nextStartDateSortOrder ?? \"asc\")\"\n                       asp-route-pullPaymentState=\"@Model.ActiveState\"\n                       class=\"text-nowrap\"\n                       title=\"@(nextStartDateSortOrder == \"desc\" ? sortByAsc : sortByDesc)\">\n                        Start\n                        <span class=\"fa @(sortIconClass)\"></span>\n                    </a>\n                </th>\n                <th scope=\"col\">Automatically Approved</th>\n                <th scope=\"col\">Refunded</th>\n                <th scope=\"col\" class=\"text-end\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n        @foreach (var pp in Model.PullPayments)\n        {\n            <tr>\n                <td>\n                    <a asp-action=\"EditPullPayment\"\n                       asp-controller=\"UIPullPayment\"\n                       asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\"\n                       asp-route-pullPaymentId=\"@pp.Id\">\n                        @pp.Name\n                    </a>\n                </td>\n                <td>@pp.StartDate.ToBrowserDate()</td>\n                <td>@pp.AutoApproveClaims</td>\n                <td class=\"align-middle\">\n                    <div class=\"progress ppProgress\" data-pp=\"@pp.Id\" data-bs-toggle=\"tooltip\" data-bs-html=\"true\">\n                        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"@pp.Progress.CompletedPercent\"\n                             aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width:@(pp.Progress.CompletedPercent)%;\">\n                        </div>\n                        <div class=\"progress-bar\" role=\"progressbar\" aria-valuenow=\"@pp.Progress.AwaitingPercent\"\n                             aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"background-color:orange; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; width:@(pp.Progress.AwaitingPercent)%;\">\n                        </div>\n                    </div>\n                </td>\n                <td class=\"text-end\">\n                    <a class=\"pp-payout\"\n                       asp-action=\"Payouts\"\n                       asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\"\n                       asp-route-pullPaymentId=\"@pp.Id\">\n                        Payouts\n                    </a>\n                    @if (!pp.Archived)\n                    {\n                        <span permission=\"@Policies.CanModifyStoreSettings\"> - </span>\n                        <a asp-action=\"ArchivePullPayment\"\n                           permission=\"@Policies.CanModifyStoreSettings\"\n                           asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\"\n                           asp-route-pullPaymentId=\"@pp.Id\"\n                           data-bs-toggle=\"modal\"\n                           data-bs-target=\"#ConfirmModal\"\n                           data-description=\"Do you really want to archive the pull payment <strong>@Html.Encode(pp.Name)</strong>?\">\n                            Archive\n                        </a>\n                    }\n                    <span> - </span>\n                    <a asp-action=\"ViewPullPayment\"\n                       asp-controller=\"UIPullPayment\"\n                       asp-route-pullPaymentId=\"@pp.Id\">\n                        View\n                    </a>\n                </td>\n            </tr>\n        }\n        </tbody>\n    </table>\n\n    <vc:pager view-model=\"Model\"/>\n\n    <partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Archive pull payment\", \"Do you really want to archive the pull payment?\", \"Archive\"))\"/>\n\n    @section PageFootContent {\n        <script>\n         const ppProgresses = document.getElementsByClassName(\"ppProgress\");\n            for (var i = 0; i < ppProgresses.length; i++) {\n                var pp = ppProgresses[i];\n                var ppId = pp.getAttribute(\"data-pp\");\n                var template = document.getElementById(\"tooptip_template_\" + ppId);\n                pp.setAttribute(\"title\", template.innerHTML);\n            }\n        </script>\n    }\n}\nelse\n{\n    <p class=\"text-secondary mt-4\">\n        There are no @Model.ActiveState.ToStringLowerInvariant() pull payments yet.\n    </p>\n}\n", "@using BTCPayServer.Abstractions.Models\n@using BTCPayServer.TagHelpers\n@using Microsoft.AspNetCore.Mvc.TagHelpers\n@using BTCPayServer.Abstractions.Contracts\n@inject IFileService FileService;\n@model GeneralSettingsViewModel\n@{\n\tLayout = \"../Shared/_NavLayout.cshtml\";\n\tViewData.SetActivePage(StoreNavPages.General, \"General\", Context.GetStoreData().Id);\n\tvar canUpload = await FileService.IsAvailable();\n}\n\n<div class=\"row\">\n    <div class=\"col-xxl-constrain col-xl-8\">\n        @if (!ViewContext.ModelState.IsValid)\n        {\n            <div asp-validation-summary=\"All\" class=\"text-danger\"></div>\n        }\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            <h3 class=\"mb-3\">General</h3>\n            <div class=\"form-group\">\n                <label asp-for=\"Id\" class=\"form-label\"></label>\n                <input asp-for=\"Id\" readonly class=\"form-control\" />\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"StoreName\" class=\"form-label\"></label>\n                <input asp-for=\"StoreName\" class=\"form-control\" />\n                <span asp-validation-for=\"StoreName\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"StoreWebsite\" class=\"form-label\"></label>\n                <input asp-for=\"StoreWebsite\" class=\"form-control\" />\n                <span asp-validation-for=\"StoreWebsite\" class=\"text-danger\"></span>\n            </div>\n            \n            <h3 class=\"mt-5 mb-3\">Branding</h3>\n            <div class=\"form-group\">\n                <div class=\"d-flex align-items-center justify-content-between gap-2\">\n                    <label asp-for=\"LogoFile\" class=\"form-label\"></label>\n                    @if (!string.IsNullOrEmpty(Model.LogoFileId))\n                    {\n                        <button type=\"submit\" class=\"btn btn-link p-0 text-danger\" name=\"RemoveLogoFile\" value=\"true\">\n                            <span class=\"fa fa-times\"></span> Remove\n                        </button>\n                    }\n                </div>\n                @if (canUpload)\n                {\n                    <div class=\"d-flex align-items-center gap-3\">\n                        <input asp-for=\"LogoFile\" type=\"file\" class=\"form-control flex-grow\">\n                        @if (!string.IsNullOrEmpty(Model.LogoFileId))\n                        {\n                            <img src=\"@(await FileService.GetFileUrl(Context.Request.GetAbsoluteRootUri(), Model.LogoFileId))\" alt=\"@Model.StoreName\" class=\"rounded-circle\" style=\"width:2.1rem;height:2.1rem;\"/>\n                        }\n                    </div>\n                    <span asp-validation-for=\"LogoFile\" class=\"text-danger\"></span>\n                    <div class=\"form-text\">\n                        Please upload an image with square dimension, as it will be displayed in 1:1 format and circular.\n                        Size should be around 100\u2715100px.\n                    </div>\n                }\n                else\n                {\n                    <input asp-for=\"LogoFile\" type=\"file\" class=\"form-control\" disabled>\n                    <div class=\"form-text\">In order to upload a logo, a <a asp-controller=\"UIServer\" asp-action=\"Files\">file storage</a> must be configured.</div>\n                }\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"BrandColor\" class=\"form-label\"></label>\n                <div class=\"input-group\">\n                    <input id=\"BrandColorInput\" class=\"form-control form-control-color flex-grow-0\" type=\"color\" style=\"width:3rem\" aria-describedby=\"BrandColorValue\" value=\"@Model.BrandColor\" />\n                    <input asp-for=\"BrandColor\" class=\"form-control form-control-color flex-grow-0 font-monospace\" pattern=\"@ColorPalette.Pattern\" style=\"width:5.5rem\" />\n                </div>\n                <span asp-validation-for=\"BrandColor\" class=\"text-danger\"></span>\n            </div>\n            \n            <h3 class=\"mt-5 mb-3\">Payment</h3>\n            <div class=\"form-group\">\n                <label asp-for=\"DefaultCurrency\" class=\"form-label\"></label>\n                <input asp-for=\"DefaultCurrency\" class=\"form-control w-auto\" currency-selection />\n                <span asp-validation-for=\"DefaultCurrency\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group d-flex align-items-center\">\n                <input asp-for=\"AnyoneCanCreateInvoice\" type=\"checkbox\" class=\"btcpay-toggle me-3\"/>\n                <label asp-for=\"AnyoneCanCreateInvoice\" class=\"form-label mb-0 me-1\"></label>\n                <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#allow-anyone-to-create-invoice\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                </a>\n            </div>\n            <div class=\"form-group mt-4\">\n                <label asp-for=\"NetworkFeeMode\" class=\"form-label\"></label>\n                <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#add-network-fee-to-invoice-vary-with-mining-fees\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                </a>\n                @* For whatever reason wrapping the select with this div fixes this Safari bug: https://github.com/btcpayserver/btcpayserver/issues/3699 *@\n                <div class=\"overflow-hidden\">\n                    <select asp-for=\"NetworkFeeMode\" class=\"form-select w-auto\">\n                        <option value=\"MultiplePaymentsOnly\">... only if the customer makes more than one payment for the invoice</option>\n                        <option value=\"Always\">... on every payment</option>\n                        <option value=\"Never\">Never add network fee</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"InvoiceExpiration\" class=\"form-label\"></label>\n                <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#invoice-expires-if-the-full-amount-has-not-been-paid-after-minutes\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                </a>\n                <div class=\"input-group\">\n                    <input inputmode=\"numeric\" asp-for=\"InvoiceExpiration\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                    <span class=\"input-group-text\">minutes</span>\n                </div>\n                <span asp-validation-for=\"InvoiceExpiration\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"PaymentTolerance\" class=\"form-label\"></label>\n                <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#consider-the-invoice-paid-even-if-the-paid-amount-is-less-than-expected\" target=\"_blank\" rel=\"noreferrer noopener\">\n                    <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                </a>\n                <div class=\"input-group\">\n                    <input inputmode=\"decimal\" asp-for=\"PaymentTolerance\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                    <span class=\"input-group-text\">percent</span>\n                </div>\n                <span asp-validation-for=\"PaymentTolerance\" class=\"text-danger\"></span>\n            </div>\n            <div class=\"form-group\">\n                <label asp-for=\"BOLT11Expiration\" class=\"form-label\"></label>\n                <div class=\"input-group\">\n                    <input inputmode=\"numeric\" asp-for=\"BOLT11Expiration\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                    <span class=\"input-group-text\">days</span>\n                </div>\n                <span asp-validation-for=\"BOLT11Expiration\" class=\"text-danger\"></span>\n            </div>\n            \n            <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"Save\">Save</button>\n        </form>\n        @if (Model.CanDelete)\n        {\n            <h3 class=\"mt-5 mb-3\">Additional Actions</h3>\n            <div id=\"danger-zone\">\n                <a id=\"DeleteStore\" class=\"btn btn-outline-danger mb-5 mt-2\" asp-action=\"DeleteStore\" asp-route-storeId=\"@Model.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The store <strong>@Html.Encode(Model.StoreName)</strong> will be permanently deleted. This action will also delete all invoices, apps and data associated with the store.\" data-confirm-input=\"DELETE\">Delete this store</a>\n            </div>\n        }\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Delete store\", \"The store will be permanently deleted. This action will also delete all invoices, apps and data associated with the store.\", \"Delete\"))\" />\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\"/>\n    <script>\n    (() => {\n        const $colorValue = document.getElementById('BrandColor');\n        const $colorInput = document.getElementById('BrandColorInput');\n        delegate('change', '#BrandColor', e => {\n            const value = e.target.value;\n\t\t\tif (value.match(@Safe.Json(@ColorPalette.Pattern)))\n\t\t\t\t$colorInput.value = value;\n        });\n        delegate('change', '#BrandColorInput', e => {\n            $colorValue.value = e.target.value;\n        });\n    })();\n    </script>\n}\n", "@using BTCPayServer.Abstractions.Models\n@model TokensViewModel\n@{\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    ViewData.SetActivePage(StoreNavPages.Tokens, \"Access Tokens\", Context.GetStoreData().Id);\n}\n\n@if (Model.StoreNotConfigured)\n{\n    <div class=\"alert alert-warning alert-dismissible mb-5\" role=\"alert\">\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\">\n            <vc:icon symbol=\"close\" />\n        </button>\n        Warning: No wallet has been linked to your BTCPay Store.<br/>\n        See <a href=\"https://docs.btcpayserver.org/WalletSetup/\" target=\"_blank\" class=\"alert-link\" rel=\"noreferrer noopener\">this link</a> for more information on how to connect your store and wallet.\n    </div>\n}\n\n<div class=\"row\">\n    <div class=\"col-xxl-constrain col-xl-8\">\n        <div class=\"d-flex align-items-center justify-content-between mb-3\">\n            <h3 class=\"mb-0\">@ViewData[\"Title\"]</h3>\n            <a id=\"CreateNewToken\" asp-action=\"CreateToken\" class=\"btn btn-primary\" role=\"button\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\">\n                <span class=\"fa fa-plus\"></span>\n                Create Token\n            </a>\n        </div>\n\n        <p>Authorize a public key to access Bitpay compatible Invoice API.\n            <a href=\"https://support.bitpay.com/hc/en-us/articles/115003001183-How-do-I-pair-my-client-and-create-a-token-\" target=\"_blank\" rel=\"noreferrer noopener\">\n                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n            </a>\n        </p>\n\n        @if (Model.Tokens.Any())\n        {\n            <table class=\"table table-hover table-responsive-md\">\n                <thead>\n                <tr>\n                    <th>Label</th>\n                    <th class=\"text-end\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                @foreach (var token in Model.Tokens)\n                {\n                    <tr>\n                        <td>@token.Label</td>\n                        <td class=\"text-end\">\n                            <a asp-action=\"ShowToken\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\" asp-route-tokenId=\"@token.Id\">See information</a> - \n                            <a asp-action=\"RevokeToken\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\" asp-route-tokenId=\"@token.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"The access token with the label <strong>@Html.Encode(token.Label)</strong> will be revoked.\" data-confirm-input=\"REVOKE\">Revoke</a>\n                        </td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n        }\n        else\n        {\n            <p class=\"text-secondary mt-3\">\n                No access tokens yet.\n            </p>\n        }\n\n        <h3 class=\"mt-5 mb-3\">Legacy API Keys</h3>\n        <p>Alternatively, you can use the invoice API by including the following HTTP Header in your requests:</p>\n        <p><code>Authorization: Basic @Model.EncodedApiKey</code></p>\n\n        <form method=\"post\" asp-action=\"GenerateAPIKey\" asp-route-storeId=\"@Context.GetRouteValue(\"storeId\")\">\n            <div class=\"form-group\">\n                <label asp-for=\"ApiKey\" class=\"form-label\"></label>\n                <div class=\"d-flex\">\n                    <input asp-for=\"ApiKey\" readonly class=\"form-control\"/>\n                    @if (string.IsNullOrEmpty(Model.ApiKey))\n                    {\n                        <button class=\"btn btn-primary ms-3\" type=\"submit\">Generate</button>\n                    }\n                    else\n                    {\n                        <button class=\"btn btn-danger ms-3\" type=\"submit\" name=\"command\" value=\"revoke\">Revoke</button>\n                        <button class=\"btn btn-primary ms-3\" type=\"submit\">Regenerate</button>\n                    }\n                </div>\n            </div>\n        </form>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Revoke access token\", \"The access token will be revoked. Do you wish to continue?\", \"Revoke\"))\" />\n", "@using BTCPayServer.Abstractions.Models\n@model StoreUsersViewModel\n@{\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    ViewData.SetActivePage(StoreNavPages.Users, \"Store Users\", Context.GetStoreData().Id);\n}\n\n<div class=\"row\">\n    <div class=\"col-xxl-constrain col-xl-8\">\n        <h3 class=\"mb-3\">@ViewData[\"Title\"]</h3>\n        <p>\n            Give other registered BTCPay Server users access to your store.<br />\n            Guests will not be able to see or modify the store settings.\n        </p>\n\n        @if (!ViewContext.ModelState.IsValid)\n        {\n            <div asp-validation-summary=\"All\" class=\"text-danger\"></div>\n        }\n\n        <form method=\"post\">\n            <div class=\"d-flex\">\n                <div class=\"flex-grow-1\">\n                    <input asp-for=\"Email\" type=\"text\" class=\"form-control\" placeholder=\"user@example.com\">\n                </div>\n                <div class=\"ms-3\">\n                    <select asp-for=\"Role\" class=\"form-select\">\n                        <option value=\"@StoreRoles.Owner\">Owner</option>\n                        <option value=\"@StoreRoles.Guest\">Guest</option>\n                    </select>\n                </div>\n                <div class=\"ms-3\">\n                    <button type=\"submit\" role=\"button\" class=\"btn btn-primary\"><span class=\"fa fa-plus\"></span> Add User</button>\n                </div>\n            </div>\n        </form>\n\n        <div class=\"form-group\">\n            <table class=\"table table-hover table-responsive-md\">\n                <thead>\n                <tr>\n                    <th>Email</th>\n                    <th>Role</th>\n                    <th style=\"text-align:right\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                @foreach (var user in Model.Users)\n                {\n                    <tr>\n                        <td>@user.Email</td>\n                        <td>@user.Role</td>\n                        <td style=\"text-align:right\">\n                            <a asp-action=\"DeleteStoreUser\" asp-route-storeId=\"@Model.StoreId\" asp-route-userId=\"@user.Id\" data-bs-toggle=\"modal\" data-bs-target=\"#ConfirmModal\" data-description=\"This action will prevent <strong>@Html.Encode(user.Email)</strong> from accessing this store and its settings.\" data-confirm-input=\"REMOVE\">Remove</a>\n                        </td>\n                    </tr>\n                }\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel(\"Remove store user\", \"This action will prevent the user from accessing this store and its settings. Are you sure?\", \"Delete\"))\" />\n\n@section PageFootContent {\n    <partial name=\"_ValidationScriptsPartial\" />\n}\n", "@using NBitcoin.DataEncoders\n@using Newtonsoft.Json\n@using System.Text\n@using BTCPayServer.Abstractions.Models\n@model WalletSettingsViewModel\n@{\n    Layout = \"../Shared/_NavLayout.cshtml\";\n    ViewData[\"NavPartialName\"] = \"../UIWallets/_Nav\";\n    ViewData.SetActivePage(StoreNavPages.OnchainSettings, $\"{Model.CryptoCode} Wallet Settings\", Context.GetStoreData().Id);\n}\n\n@section PageHeadContent {\n    <script src=\"~/vendor/vuejs/vue.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode/vue-qrcode.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/ur-registry/urlib.min.js\" asp-append-version=\"true\"></script>\n    <script src=\"~/vendor/vue-qrcode-reader/VueQrcodeReader.umd.min.js\" asp-append-version=\"true\"></script>\n\n    <link href=\"~/vendor/vue-qrcode-reader/vue-qrcode-reader.css\" rel=\"stylesheet\" asp-append-version=\"true\"/>\n}\n\n<div class=\"row\">\n    <div class=\"col-xl-8 col-xxl-constrain\">\n        <div class=\"mb-5\">\n            <h3 class=\"mb-3\">@ViewData[\"Title\"]</h3>\n            <div class=\"mb-3 d-flex align-items-center\">\n                <span title=\"@Model.Source\" data-bs-toggle=\"tooltip\" class=\"me-3\">@(Model.IsHotWallet ? \"Hot wallet\" : \"Watch-only wallet\")</span>\n                <div class=\"dropdown\">\n                    <button class=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"ActionsDropdownToggle\" data-bs-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                        Actions\n                    </button>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"ActionsDropdownToggle\">\n                        <a class=\"dropdown-item\" asp-controller=\"UIWallets\" asp-action=\"WalletRescan\" asp-route-walletId=\"@Model.WalletId\" id=\"Rescan\">Rescan wallet for missing transactions</a>\n                        <form method=\"post\" asp-controller=\"UIWallets\" asp-action=\"WalletActions\" asp-route-walletId=\"@Model.WalletId\">\n                            <button name=\"command\" type=\"submit\" class=\"dropdown-item\" value=\"prune\">Prune old transactions from history</button>\n                            @if (User.IsInRole(Roles.ServerAdmin))\n                            {\n                                <button name=\"command\" type=\"submit\" class=\"dropdown-item\" value=\"clear\">Clear all transactions from history</button>\n                            }\n                        </form>\n                        @if (Model.UriScheme == \"bitcoin\")\n                        {\n                            <button type=\"button\" class=\"dropdown-item\" id=\"RegisterWallet\" data-store=\"@Model.StoreName\" data-scheme=\"@Model.UriScheme\" data-url=\"@Url.Action(\"WalletSend\", \"UIWallets\", new {walletId = Model.WalletId, bip21 = \"%s\"})\" hidden>Register wallet for payment links</button>\n                        }\n                        <div class=\"dropdown-divider\"></div>\n                        @if (Model.NBXSeedAvailable)\n                        {\n                            <a asp-action=\"WalletSeed\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\" class=\"dropdown-item\" id=\"ViewSeed\">View seed</a>\n                        }\n                        <a asp-controller=\"UIStores\" asp-action=\"ReplaceWallet\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\"\n                           id=\"ChangeWalletLink\"\n                           class=\"dropdown-item\"\n                           data-bs-toggle=\"modal\"\n                           data-bs-target=\"#ConfirmModal\"\n                           data-title=\"Replace @Model.CryptoCode wallet\"\n                           data-description=\"@Html.Encode(ViewData[\"ReplaceDescription\"])\"\n                           data-confirm=\"Setup new wallet\"\n                           data-confirm-input=\"REPLACE\">\n                            Replace wallet\n                        </a>\n                        <form method=\"get\" asp-action=\"DeleteWallet\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\" class=\"d-inline\">\n                            <button type=\"submit\"\n                                    id=\"Delete\"\n                                    class=\"dropdown-item\"\n                                    data-bs-toggle=\"modal\"\n                                    data-bs-target=\"#ConfirmModal\"\n                                    data-title=\"Remove @Model.CryptoCode wallet\"\n                                    data-description=\"@Html.Encode(ViewData[\"RemoveDescription\"])\"\n                                    data-confirm=\"Remove\"\n                                    data-confirm-input=\"REMOVE\">Remove wallet</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n            \n            <form method=\"post\" asp-action=\"UpdateWalletSettings\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\">\n                <div class=\"form-group my-4\">\n                    <div class=\"d-flex align-items-center\">\n                        <input asp-for=\"Enabled\" type=\"checkbox\" class=\"btcpay-toggle me-2\"/>\n                        <label asp-for=\"Enabled\" class=\"form-label mb-0 me-1\"></label>\n                    </div>\n                    <span asp-validation-for=\"PayJoinEnabled\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"Label\" class=\"form-label\"></label>\n                    <input asp-for=\"Label\" class=\"form-control\" style=\"max-width:24em;\" />\n                    <span asp-validation-for=\"Label\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"DerivationScheme\" class=\"form-label\"></label>\n                    <div class=\"input-group\" data-clipboard=\"@Model.DerivationScheme\">\n                        <input asp-for=\"DerivationScheme\" class=\"form-control\" style=\"cursor:copy\" readonly />\n                        <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                    </div>\n                </div>\n                @if (!string.IsNullOrEmpty(Model.DerivationSchemeInput) && Model.DerivationSchemeInput != Model.DerivationScheme)\n                {\n                    <div class=\"form-group\">\n                        <label asp-for=\"DerivationSchemeInput\" class=\"form-label\"></label>\n                        <div class=\"input-group\" data-clipboard=\"@Model.DerivationSchemeInput\">\n                            <input asp-for=\"DerivationSchemeInput\" class=\"form-control\" style=\"cursor:copy\" readonly/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                        </div>\n                    </div>\n                }\n                @for (var i = 0; i < Model.AccountKeys.Count; i++)\n                {\n                    <h4 class=\"mt-5 mb-3\">Account Key @i</h4>\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center justify-content-between\">\n                            <label asp-for=\"@Model.AccountKeys[i].AccountKey\" class=\"form-label\"></label>\n                            <button type=\"button\" class=\"d-inline-block ms-2 btn text-primary btn-link p-0 mb-2\" data-account-key=\"@i\" title=\"\">\n                                <span class=\"fa fa-qrcode\"></span> Show export QR\n                            </button>\n                        </div>\n                        <div class=\"input-group\" data-clipboard=\"@Model.AccountKeys[i].AccountKey\">\n                            <input asp-for=\"@Model.AccountKeys[i].AccountKey\" class=\"form-control\" style=\"cursor:copy\" readonly/>\n                            <button type=\"button\" class=\"input-group-text btn btn-outline-secondary\" data-clipboard-confirm style=\"min-width:8em;\">Copy</button>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"form-group col-auto\">\n                            <label asp-for=\"@Model.AccountKeys[i].MasterFingerprint\" class=\"form-label\"></label>\n                            <input asp-for=\"@Model.AccountKeys[i].MasterFingerprint\" class=\"form-control\" style=\"max-width:16ch;\" />\n                        </div>\n                        <div class=\"form-group col-auto\">\n                            <label asp-for=\"@Model.AccountKeys[i].AccountKeyPath\" class=\"form-label\"></label>\n                            <input asp-for=\"@Model.AccountKeys[i].AccountKeyPath\" class=\"form-control\" style=\"max-width:16ch;\" />\n                        </div>\n                    </div>\n                    @if (Model.IsMultiSig)\n                    {\n                        <div class=\"form-check\">\n                            <input asp-for=\"SelectedSigningKey\" class=\"form-check-input\" type=\"radio\" value=\"@Model.AccountKeys[i].AccountKey\"/>\n                            <label asp-for=\"SelectedSigningKey\" class=\"form-check-label\"></label>\n                        </div>\n                    }\n                }\n                <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"SaveWalletSettings\">Save Wallet Settings</button>\n            </form>\n            \n            <h3 class=\"mt-5 mb-4\">Payment</h3>\n            <form method=\"post\" asp-action=\"UpdatePaymentSettings\" asp-route-storeId=\"@Model.StoreId\" asp-route-cryptoCode=\"@Model.CryptoCode\">\n                @if (Model.CanUsePayJoin)\n                {\n                    <div class=\"form-group\">\n                        <div class=\"d-flex align-items-center\">\n                            <input asp-for=\"PayJoinEnabled\" type=\"checkbox\" class=\"btcpay-toggle me-2\"/>\n                            <label asp-for=\"PayJoinEnabled\" class=\"form-label mb-0 me-1\"></label>\n                            <a href=\"https://docs.btcpayserver.org/Payjoin/\" target=\"_blank\" rel=\"noreferrer noopener\">\n                                <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                            </a>\n                        </div>\n                        <span asp-validation-for=\"PayJoinEnabled\" class=\"text-danger\"></span>\n                    </div>\n                }\n                <div class=\"form-group\">\n                    <label asp-for=\"MonitoringExpiration\" class=\"form-label\"></label>\n                    <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#payment-invalid-if-transactions-fails-to-confirm-minutes-after-invoice-expiration\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                    <div class=\"input-group\">\n                        <input inputmode=\"numeric\" asp-for=\"MonitoringExpiration\" class=\"form-control\" style=\"max-width:10ch;\"/>\n                        <span class=\"input-group-text\">minutes</span>\n                    </div>\n                    <span asp-validation-for=\"MonitoringExpiration\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-group\">\n                    <label asp-for=\"SpeedPolicy\" class=\"form-label\"></label>\n                    <a href=\"https://docs.btcpayserver.org/FAQ/Stores/#consider-the-invoice-confirmed-when-the-payment-transaction\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <span class=\"fa fa-question-circle-o text-secondary\" title=\"More information...\"></span>\n                    </a>\n                    <select asp-for=\"SpeedPolicy\" class=\"form-select w-auto\" onchange=\"document.getElementById('unconfirmed-warning').hidden = this.value !== '0';\">\n                        <option value=\"0\">Is unconfirmed</option>\n                        <option value=\"1\">Has at least 1 confirmation</option>\n                        <option value=\"3\">Has at least 2 confirmations</option>\n                        <option value=\"2\">Has at least 6 confirmations</option>\n                    </select>\n                    <div class=\"alert alert-warning my-2\" hidden=\"@(Model.SpeedPolicy != 0)\" id=\"unconfirmed-warning\" role=\"alert\">\n                        Choosing to accept an unconfirmed invoice can lead to double-spending and is strongly discouraged.\n                    </div>\n                    <span asp-validation-for=\"SpeedPolicy\" class=\"text-danger\"></span>\n                </div>\n                <div class=\"form-check my-1\">\n                    <input asp-for=\"ShowRecommendedFee\" type=\"checkbox\" class=\"form-check-input\"/>\n                    <label asp-for=\"ShowRecommendedFee\" class=\"form-check-label\"></label>\n                    <div class=\"form-text\">Fee will be shown for BTC and LTC onchain payments only.</div>\n                </div>\n                <div class=\"form-group mt-2\">\n                    <label asp-for=\"RecommendedFeeBlockTarget\" class=\"form-label\"></label>\n                    <input inputmode=\"numeric\" asp-for=\"RecommendedFeeBlockTarget\" class=\"form-control\" min=\"1\" style=\"width:8ch\" />\n                    <span asp-validation-for=\"RecommendedFeeBlockTarget\" class=\"text-danger\"></span>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary mt-2\" id=\"SavePaymentSettings\">Save Payment Settings</button>\n            </form>\n        </div>\n    </div>\n</div>\n\n<partial name=\"_Confirm\" model=\"@(new ConfirmModel($\"{Model.CryptoCode} wallet\", \"Change\", \"Update\"))\" />\n<partial name=\"ShowQR\"/>\n\n@section PageFootContent {\n    <script>\n        const wallets = @Safe.Json(Model.AccountKeys.Select(model => Encoders.Hex.EncodeData(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(model, Formatting.None)))))\n        const qrApp = initQRShow({ title: \"Wallet QR\" })\n        \n        delegate('click', '#Delete', event => { event.preventDefault() })\n        \n        delegate('click', 'button[data-account-key]', event => {\n            const { accountKey } = event.target.dataset;\n            qrApp.showData(wallets[parseInt(accountKey)]);\n        })\n        \n        if (navigator.registerProtocolHandler) {\n            document.getElementById('RegisterWallet').removeAttribute('hidden');\n            delegate('click', '#RegisterWallet', event => {\n               const { store, scheme, url } = event.target.dataset\n               const uri = decodeURIComponent(url)\n               navigator.registerProtocolHandler(scheme, uri, `BTCPay Wallet: ${store}`)\n            })\n        } \n    </script>\n    <partial name=\"_ValidationScriptsPartial\"/>\n}\n"], "filenames": ["BTCPayServer/Controllers/UIAppsController.cs", "BTCPayServer/Controllers/UIManageController.APIKeys.cs", "BTCPayServer/Controllers/UIManageController.cs", "BTCPayServer/Controllers/UIServerController.Users.cs", "BTCPayServer/Controllers/UIServerController.cs", "BTCPayServer/Controllers/UIStoresController.Onchain.cs", "BTCPayServer/Controllers/UIStoresController.cs", "BTCPayServer/Views/Shared/Crowdfund/UpdateCrowdfund.cshtml", "BTCPayServer/Views/Shared/PointOfSale/UpdatePointOfSale.cshtml", "BTCPayServer/Views/UIApps/ListApps.cshtml", "BTCPayServer/Views/UICustodianAccounts/EditCustodianAccount.cshtml", "BTCPayServer/Views/UILNURL/EditLightningAddress.cshtml", "BTCPayServer/Views/UIManage/APIKeys.cshtml", "BTCPayServer/Views/UIManage/TwoFactorAuthentication.cshtml", "BTCPayServer/Views/UIPayoutProcessors/ConfigureStorePayoutProcessors.cshtml", "BTCPayServer/Views/UIServer/DynamicDnsServices.cshtml", "BTCPayServer/Views/UIServer/ListUsers.cshtml", "BTCPayServer/Views/UIStorePullPayments/PullPayments.cshtml", "BTCPayServer/Views/UIStores/GeneralSettings.cshtml", "BTCPayServer/Views/UIStores/ListTokens.cshtml", "BTCPayServer/Views/UIStores/StoreUsers.cshtml", "BTCPayServer/Views/UIStores/WalletSettings.cshtml"], "buggy_code_start_loc": [15, 4, 18, 228, 92, 803, 68, 337, 268, 106, 38, 142, 73, 122, 47, 64, 100, 151, 141, 51, 54, 55], "buggy_code_end_loc": [179, 45, 70, 292, 840, 806, 780, 338, 269, 107, 39, 143, 74, 127, 48, 65, 101, 152, 142, 52, 55, 68], "fixing_code_start_loc": [16, 5, 19, 228, 92, 803, 68, 337, 268, 106, 38, 142, 73, 122, 47, 64, 100, 151, 141, 51, 54, 55], "fixing_code_end_loc": [183, 47, 75, 292, 843, 806, 783, 338, 269, 107, 39, 143, 74, 127, 48, 65, 101, 152, 142, 52, 55, 68], "type": "CWE-76", "message": "Improper Neutralization of Equivalent Special Elements in GitHub repository btcpayserver/btcpayserver prior to 1.7.5.", "other": {"cve": {"id": "CVE-2023-0493", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-26T23:15:15.920", "lastModified": "2023-04-06T17:15:09.957", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Improper Neutralization of Equivalent Special Elements in GitHub repository btcpayserver/btcpayserver prior to 1.7.5."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-76"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:btcpayserver:btcpay_server:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.5", "matchCriteriaId": "10680F85-A173-4539-965D-2181DC3C4347"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/171732/BTCPay-Server-1.7.4-HTML-Injection.html", "source": "security@huntr.dev"}, {"url": "https://github.com/btcpayserver/btcpayserver/commit/02070d65836cd24627929b3403efbae8de56039a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3a73b45c-6f3e-4536-a327-cdfdbc59896f", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/btcpayserver/btcpayserver/commit/02070d65836cd24627929b3403efbae8de56039a"}}