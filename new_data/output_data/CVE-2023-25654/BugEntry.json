{"buggy_code": ["<?php\n/**\n * baserCMS :  Based Website Development Project <https://basercms.net>\n * Copyright (c) baserCMS Users Community <https://basercms.net/community/>\n *\n * @copyright       Copyright (c) baserCMS Users Community\n * @link            https://basercms.net baserCMS Project\n * @package         Baser.Model\n * @since           baserCMS v 0.1.0\n * @license         https://basercms.net/license/index.html\n */\n\nApp::uses('Sanitize', 'Utility');\nApp::uses('Folder', 'Utility');\nApp::uses('Model', 'Model');\nApp::uses('Dblog', 'Model');\nApp::uses('AppController', 'Controller');\n\n/**\n * Class BcAppModel\n *\n * Model \u62e1\u5f35\u30af\u30e9\u30b9\n *\n * \u65e2\u5b58\u306eCakePHP\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3001\u8a2d\u7f6e\u6e08\u306eAppModel\u3068\u5171\u5b58\u3067\u304d\u308b\u3088\u3046\u306b\u3001AppModel\u3068\u306f\u5225\u306b\u3057\u305f\u3002\n *\n * @package Baser.Model\n * @property Content $Content\n * @property BehaviorCollection $Behaviors\n */\nclass BcAppModel extends Model\n{\n\n\t/**\n\t * DB\u63a5\u7d9a\u8a2d\u5b9a\u540d\n\t *\n\t * @var string\n\t */\n\tpublic $useDbConfig = 'default';\n\n\t/**\n\t * \u516c\u958b\u72b6\u614b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\n\t * BcAppModel::getConditionAllowPublish() \u3067\u5229\u7528\n\t * @var string\n\t */\n\tpublic $publishStatusField = 'status';\n\t/**\n\t * \u516c\u958b\u958b\u59cb\u65e5\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\n\t * BcAppModel::getConditionAllowPublish() \u3067\u5229\u7528\n\t * @var string\n\t */\n\tpublic $publishBeginField = 'publish_begin';\n\n\t/**\n\t * \u516c\u958b\u7d42\u4e86\u65e5\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\n\t * BcAppModel::getConditionAllowPublish() \u3067\u5229\u7528\n\t * @var string\n\t */\n\tpublic $publishEndField = 'publish_end';\n\n\t/**\n\t * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\t *\n\t * @return    void\n\t */\n\tpublic function __construct($id = false, $table = null, $ds = null)\n\t{\n\t\t$db = ConnectionManager::getDataSource('default');\n\t\tif (Configure::read('BcRequest.asset')) {\n\t\t\tparent::__construct($id, $table, $ds);\n\t\t\treturn;\n\t\t}\n\t\t$request = new CakeRequest();\n\t\tif (isset($db->config['datasource'])) {\n\t\t\tif ($db->config['datasource'] != '') {\n\t\t\t\t// @deprecated 5.0.0 since 4.0.0\n\t\t\t\tif ($this->useDbConfig == 'plugin') {\n\t\t\t\t\t$this->useDbConfig = 'default';\n\t\t\t\t\t$this->log(sprintf(__d('baser', '\u30e2\u30c7\u30eb\uff1a%s BcPluginAppModel\u306e \u7d99\u627f\u306f\u3001\u30d0\u30fc\u30b8\u30e7\u30f3 4.0.0 \u3088\u308a\u975e\u63a8\u5968\u3068\u306a\u308a\u307e\u3057\u305f\u3002\u30d0\u30fc\u30b8\u30e7\u30f3 5.0.0 \u3067 BcPluginAppModel \u306f\u524a\u9664\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002\u30d7\u30e9\u30b0\u30a4\u30f3\u306f AppModel \u3092\u76f4\u63a5\u7d99\u627f\u3057\u3066\u304f\u3060\u3055\u3044\u3002'), $this->name), LOG_ALERT);\n\t\t\t\t}\n\t\t\t\tparent::__construct($id, $table, $ds);\n\t\t\t} elseif ($db->config['login'] == 'dummy' &&\n\t\t\t\t$db->config['password'] == 'dummy' &&\n\t\t\t\t$db->config['database'] == 'dummy' &&\n\t\t\t\t$request->url === false) {\n\t\t\t\t// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6bb5\u968e\u306e\u72b6\u614b\u3067\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306e\u5834\u5408\u3001\n\t\t\t\t// \u521d\u671f\u5316\u30da\u30fc\u30b8\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\n\t\t\t\t$AppController = new AppController();\n\t\t\t\tsession_start();\n\t\t\t\t$_SESSION['Message']['flash'] = ['message' => __d('baser', '\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u5931\u6557\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002<br />\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u6700\u521d\u304b\u3089\u3084\u308a\u76f4\u3059\u306b\u306fbaserCMS\u3092\u521d\u671f\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002'), 'layout' => 'default'];\n\t\t\t\t$AppController->redirect(BC_BASE_URL . 'installations/reset');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * beforeSave\n\t *\n\t * @return    boolean\n\t */\n\tpublic function beforeSave($options = [])\n\t{\n\t\t$result = parent::beforeSave($options);\n\t\t// \u65e5\u4ed8\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u7a7a\u306e\u5834\u5408\u3001null\u3092\u4fdd\u5b58\u3059\u308b\n\t\tforeach($this->_schema as $key => $field) {\n\t\t\tif (('date' == $field['type'] ||\n\t\t\t\t\t'datetime' == $field['type'] ||\n\t\t\t\t\t'time' == $field['type']) &&\n\t\t\t\tisset($this->data[$this->name][$key])) {\n\t\t\t\tif ($this->data[$this->name][$key] == '') {\n\t\t\t\t\t$this->data[$this->name][$key] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Saves model data to the database. By default, validation occurs before save.\n\t *\n\t * @param array $data Data to save.\n\t * @param boolean $validate If set, validation will be done before the save\n\t * @param array $fieldList List of fields to allow to be written\n\t * @return    mixed    On success Model::$data if its not empty or true, false on failure\n\t */\n\tpublic function save($data = null, $validate = true, $fieldList = [])\n\t{\n\t\tif (!$data) {\n\t\t\t$data = $this->data;\n\t\t}\n\n\t\t// created,modified\u304c\u66f4\u65b0\u3055\u308c\u306a\u3044\u30d0\u30b0\uff1f\u5bfe\u5fdc\n\t\tif (!$this->exists()) {\n\t\t\tif (isset($data[$this->alias])) {\n\t\t\t\t$data[$this->alias]['created'] = null;\n\t\t\t} else {\n\t\t\t\t$data['created'] = null;\n\t\t\t}\n\t\t}\n\t\tif (isset($data[$this->alias])) {\n\t\t\t$data[$this->alias]['modified'] = null;\n\t\t} else {\n\t\t\t$data['modified'] = null;\n\t\t}\n\n\t\treturn parent::save($data, $validate, $fieldList);\n\t}\n\n\t/**\n\t * \u914d\u5217\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u5909\u63db\u3059\u308b\n\t *\n\t * TODO GLOBAL \u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u95a2\u6570\u3068\u3057\u3066\u518d\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u3042\u308a\n\t *\n\t * @param array $data \u5909\u63db\u524d\u306e\u30c7\u30fc\u30bf\n\t * @param string $outenc \u5909\u63db\u5f8c\u306e\u6587\u5b57\u30b3\u30fc\u30c9\n\t * @param string $inenc \u5909\u63db\u5143\u306e\u6587\u5b57\u30b3\u30fc\u30c9\n\t * @return array \u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\n\t */\n\tpublic function convertEncodingByArray($data, $outenc, $inenc)\n\t{\n\t\tforeach($data as $key => $value) {\n\t\t\tif (is_array($value)) {\n\t\t\t\t$data[$key] = $this->convertEncodingByArray($value, $outenc, $inenc);\n\t\t\t} else {\n\t\t\t\tif (mb_detect_encoding($value) <> $outenc) {\n\t\t\t\t\t$data[$key] = mb_convert_encoding($value, $outenc, $inenc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30ed\u30b0\u3092\u8a18\u9332\u3059\u308b\n\t *\n\t * @param string $message\n\t * @return    boolean\n\t */\n\tpublic function saveDbLog($message)\n\t{\n\t\t// \u30ed\u30b0\u3092\u8a18\u9332\u3059\u308b\n\t\t$Dblog = ClassRegistry::init('Dblog');\n\t\t$logdata['Dblog']['name'] = $message;\n\t\t$userId = null;\n\t\tif (!empty($_SESSION['Auth'][Configure::read('BcAuthPrefix.admin.sessionKey')]['id'])) {\n\t\t\t$userId = $_SESSION['Auth'][Configure::read('BcAuthPrefix.admin.sessionKey')]['id'];\n\t\t}\n\t\t$logdata['Dblog']['user_id'] = $userId;\n\t\treturn $Dblog->save($logdata);\n\t}\n\n\t/**\n\t * \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3059\u308b\n\t *\n\t * \u7d99\u627f\u5148\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u4e8b\n\t *\n\t * @return    array\n\t */\n\tpublic function getControlSource($field)\n\t{\n\t\treturn [];\n\t}\n\n\t/**\n\t * \u5b50\u30ab\u30c6\u30b4\u30ea\u306eID\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\n\t *\n\t * tree\u30d3\u30d8\u30a4\u30d3\u30a2\u8981\n\t *\n\t * @param mixed $id \u30da\u30fc\u30b8\u30ab\u30c6\u30b4\u30ea\u30fcID\n\t * @return    array\n\t */\n\tpublic function getChildIdsList($id)\n\t{\n\t\t$ids = [];\n\t\tif ($this->childCount($id)) {\n\t\t\t$children = $this->children($id);\n\t\t\tforeach($children as $child) {\n\t\t\t\t$ids[] = (int)$child[$this->name]['id'];\n\t\t\t}\n\t\t}\n\t\treturn $ids;\n\t}\n\n\t/**\n\t * \u6a5f\u7a2e\u4f9d\u5b58\u6587\u5b57\u306e\u5909\u63db\u51e6\u7406\n\t *\n\t * \u5185\u90e8\u6587\u5b57\u30b3\u30fc\u30c9\u304cUTF-8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\t * \u591a\u6b21\u5143\u914d\u5217\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3002\n\t *\n\t * @param string    \u5909\u63db\u5bfe\u8c61\u6587\u5b57\u5217\n\t * @return    string    \u5909\u63db\u5f8c\u6587\u5b57\u5217\n\t * TODO AppExMode\u306b\u79fb\u884c\u3059\u3079\u304d\u304b\u3082\n\t */\n\tpublic function replaceText($str)\n\t{\n\t\t$ret = $str;\n\t\t$arr = [\n\t\t\t\"\\xE2\\x85\\xA0\" => \"I\",\n\t\t\t\"\\xE2\\x85\\xA1\" => \"II\",\n\t\t\t\"\\xE2\\x85\\xA2\" => \"III\",\n\t\t\t\"\\xE2\\x85\\xA3\" => \"IV\",\n\t\t\t\"\\xE2\\x85\\xA4\" => \"V\",\n\t\t\t\"\\xE2\\x85\\xA5\" => \"VI\",\n\t\t\t\"\\xE2\\x85\\xA6\" => \"VII\",\n\t\t\t\"\\xE2\\x85\\xA7\" => \"VIII\",\n\t\t\t\"\\xE2\\x85\\xA8\" => \"IX\",\n\t\t\t\"\\xE2\\x85\\xA9\" => \"X\",\n\t\t\t\"\\xE2\\x85\\xB0\" => \"i\",\n\t\t\t\"\\xE2\\x85\\xB1\" => \"ii\",\n\t\t\t\"\\xE2\\x85\\xB2\" => \"iii\",\n\t\t\t\"\\xE2\\x85\\xB3\" => \"iv\",\n\t\t\t\"\\xE2\\x85\\xB4\" => \"v\",\n\t\t\t\"\\xE2\\x85\\xB5\" => \"vi\",\n\t\t\t\"\\xE2\\x85\\xB6\" => \"vii\",\n\t\t\t\"\\xE2\\x85\\xB7\" => \"viii\",\n\t\t\t\"\\xE2\\x85\\xB8\" => \"ix\",\n\t\t\t\"\\xE2\\x85\\xB9\" => \"x\",\n\t\t\t\"\\xE2\\x91\\xA0\" => \"(1)\",\n\t\t\t\"\\xE2\\x91\\xA1\" => \"(2)\",\n\t\t\t\"\\xE2\\x91\\xA2\" => \"(3)\",\n\t\t\t\"\\xE2\\x91\\xA3\" => \"(4)\",\n\t\t\t\"\\xE2\\x91\\xA4\" => \"(5)\",\n\t\t\t\"\\xE2\\x91\\xA5\" => \"(6)\",\n\t\t\t\"\\xE2\\x91\\xA6\" => \"(7)\",\n\t\t\t\"\\xE2\\x91\\xA7\" => \"(8)\",\n\t\t\t\"\\xE2\\x91\\xA8\" => \"(9)\",\n\t\t\t\"\\xE2\\x91\\xA9\" => \"(10)\",\n\t\t\t\"\\xE2\\x91\\xAA\" => \"(11)\",\n\t\t\t\"\\xE2\\x91\\xAB\" => \"(12)\",\n\t\t\t\"\\xE2\\x91\\xAC\" => \"(13)\",\n\t\t\t\"\\xE2\\x91\\xAD\" => \"(14)\",\n\t\t\t\"\\xE2\\x91\\xAE\" => \"(15)\",\n\t\t\t\"\\xE2\\x91\\xAF\" => \"(16)\",\n\t\t\t\"\\xE2\\x91\\xB0\" => \"(17)\",\n\t\t\t\"\\xE2\\x91\\xB1\" => \"(18)\",\n\t\t\t\"\\xE2\\x91\\xB2\" => \"(19)\",\n\t\t\t\"\\xE2\\x91\\xB3\" => \"(20)\",\n\t\t\t\"\\xE3\\x8A\\xA4\" => \"(\u4e0a)\",\n\t\t\t\"\\xE3\\x8A\\xA5\" => \"(\u4e2d)\",\n\t\t\t\"\\xE3\\x8A\\xA6\" => \"(\u4e0b)\",\n\t\t\t\"\\xE3\\x8A\\xA7\" => \"(\u5de6)\",\n\t\t\t\"\\xE3\\x8A\\xA8\" => \"(\u53f3)\",\n\t\t\t\"\\xE3\\x8D\\x89\" => \"\u30df\u30ea\",\n\t\t\t\"\\xE3\\x8D\\x8D\" => \"\u30e1\u30fc\u30c8\u30eb\",\n\t\t\t\"\\xE3\\x8C\\x94\" => \"\u30ad\u30ed\",\n\t\t\t\"\\xE3\\x8C\\x98\" => \"\u30b0\u30e9\u30e0\",\n\t\t\t\"\\xE3\\x8C\\xA7\" => \"\u30c8\u30f3\",\n\t\t\t\"\\xE3\\x8C\\xA6\" => \"\u30c9\u30eb\",\n\t\t\t\"\\xE3\\x8D\\x91\" => \"\u30ea\u30c3\u30c8\u30eb\",\n\t\t\t\"\\xE3\\x8C\\xAB\" => \"\u30d1\u30fc\u30bb\u30f3\u30c8\",\n\t\t\t\"\\xE3\\x8C\\xA2\" => \"\u30bb\u30f3\u30c1\",\n\t\t\t\"\\xE3\\x8E\\x9D\" => \"cm\",\n\t\t\t\"\\xE3\\x8E\\x8F\" => \"kg\",\n\t\t\t\"\\xE3\\x8E\\xA1\" => \"m2\",\n\t\t\t\"\\xE3\\x8F\\x8D\" => \"K.K.\",\n\t\t\t\"\\xE2\\x84\\xA1\" => \"TEL\",\n\t\t\t\"\\xE2\\x84\\x96\" => \"No.\",\n\t\t\t\"\\xE3\\x8B\\xBF\" => \"\u4ee4\u548c\",\n\t\t\t\"\\xE3\\x8D\\xBB\" => \"\u5e73\u6210\",\n\t\t\t\"\\xE3\\x8D\\xBC\" => \"\u662d\u548c\",\n\t\t\t\"\\xE3\\x8D\\xBD\" => \"\u5927\u6b63\",\n\t\t\t\"\\xE3\\x8D\\xBE\" => \"\u660e\u6cbb\",\n\t\t\t\"\\xE3\\x88\\xB1\" => \"(\u682a)\",\n\t\t\t\"\\xE3\\x88\\xB2\" => \"(\u6709)\",\n\t\t\t\"\\xE3\\x88\\xB9\" => \"(\u4ee3)\",\n\t\t];\n\n\t\treturn str_replace(array_keys($arr), array_values($arr), $str);\n\t}\n\n\t/**\n\t * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u521d\u671f\u5316\n\t *\n\t * \u65e2\u306b\u5b58\u5728\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306f\u4e0a\u66f8\u304d\u3057\u306a\u3044\n\t *\n\t * @param array    \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u540d\n\t * @param string    \u30d7\u30e9\u30b0\u30a4\u30f3\u540d\n\t * @return    boolean\n\t */\n\tpublic function initDb($pluginName = '', $options = [])\n\t{\n\t\t$options = array_merge([\n\t\t\t'loadCsv' => true,\n\t\t\t'filterTable' => '',\n\t\t\t'filterType' => '',\n\t\t\t'dbDataPattern' => ''\n\t\t], $options);\n\n\t\t// \u521d\u671f\u30c7\u30fc\u30bf\u30d5\u30a9\u30eb\u30c0\u3092\u8d70\u67fb\n\t\tif (!$pluginName) {\n\t\t\t$path = BASER_CONFIGS . 'Schema';\n\t\t} else {\n\t\t\t$path = BcUtil::getSchemaPath($pluginName);\n\t\t\tif (!$path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t$dbDataPattern = null;\n\t\tif (!empty($options['dbDataPattern'])) {\n\t\t\t$dbDataPattern = $options['dbDataPattern'];\n\t\t} elseif (!empty($_SESSION['dbDataPattern'])) {\n\t\t\t$dbDataPattern = $_SESSION['dbDataPattern'];\n\t\t\tunset($_SESSION['dbDataPattern']);\n\t\t}\n\t\tif ($this->loadSchema($this->useDbConfig, $path, $options['filterTable'], $options['filterType'], [], $dropField = false)) {\n\t\t\tif ($options['loadCsv']) {\n\t\t\t\t$theme = $pattern = null;\n\t\t\t\tif ($dbDataPattern) {\n\t\t\t\t\tlist($theme, $pattern) = explode('.', $dbDataPattern);\n\t\t\t\t}\n\t\t\t\t$path = BcUtil::getDefaultDataPath($pluginName, $theme, $pattern);\n\t\t\t\tif ($path) {\n\t\t\t\t\treturn $this->loadCsv($this->useDbConfig, $path);\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u69cb\u9020\u3092\u5909\u66f4\u3059\u308b\n\t *\n\t * @param array    \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u540d\n\t * @param string    \u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\n\t * @param string    \u30c6\u30fc\u30d6\u30eb\u6307\u5b9a\n\t * @param string    \u66f4\u65b0\u30bf\u30a4\u30d7\u6307\u5b9a\n\t * @return    boolean\n\t */\n\tpublic function loadSchema($dbConfigName, $path, $filterTable = '', $filterType = '', $excludePath = [], $dropField = true)\n\t{\n\t\t// \u30c6\u30fc\u30d6\u30eb\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n\t\t$db = ConnectionManager::getDataSource($dbConfigName);\n\t\t$db->cacheSources = false;\n\t\t$listSources = $db->listSources();\n\t\t$prefix = $db->config['prefix'];\n\t\t$Folder = new Folder($path);\n\t\t$files = $Folder->read(true, true);\n\n\t\t$result = true;\n\n\t\tforeach($files[1] as $file) {\n\t\t\tif (in_array($file, $excludePath)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/^(.*?)\\.php$/', $file, $matches)) {\n\t\t\t\t$type = 'create';\n\t\t\t\t$table = $matches[1];\n\t\t\t\tif (preg_match('/^create_(.*?)\\.php$/', $file, $matches)) {\n\t\t\t\t\t$type = 'create';\n\t\t\t\t\t$table = $matches[1];\n\t\t\t\t\tif (in_array($prefix . $table, $listSources)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} elseif (preg_match('/^alter_(.*?)\\.php$/', $file, $matches)) {\n\t\t\t\t\t$type = 'alter';\n\t\t\t\t\t$table = $matches[1];\n\t\t\t\t\tif (!in_array($prefix . $table, $listSources)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} elseif (preg_match('/^drop_(.*?)\\.php$/', $file, $matches)) {\n\t\t\t\t\t$type = 'drop';\n\t\t\t\t\t$table = $matches[1];\n\t\t\t\t\tif (!in_array($prefix . $table, $listSources)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (in_array($prefix . $table, $listSources)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($filterTable && $filterTable != $table) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ($filterType && $filterType != $type) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$tmpdir = TMP . 'schemas' . DS;\n\t\t\t\tcopy($path . DS . $file, $tmpdir . $table . '.php');\n\t\t\t\tif (!$db->loadSchema(['type' => $type, 'path' => $tmpdir, 'file' => $table . '.php', 'dropField' => $dropField])) {\n\t\t\t\t\t$result = false;\n\t\t\t\t}\n\t\t\t\t@unlink($tmpdir . $table . '.php');\n\t\t\t}\n\t\t}\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\tclearAllCache();\n\t\treturn $result;\n\t}\n\n\t/**\n\t * CSV\u3092\u8aad\u307f\u8fbc\u3080\n\t *\n\t * @param array    \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u540d\n\t * @param string    CSV\u30d1\u30b9\n\t * @param string    \u30c6\u30fc\u30d6\u30eb\u6307\u5b9a\n\t * @return    boolean\n\t */\n\tpublic function loadCsv($dbConfigName, $path, $options = [])\n\t{\n\t\t$options = array_merge([\n\t\t\t'filterTable' => ''\n\t\t], $options);\n\n\t\t// \u30c6\u30fc\u30d6\u30eb\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n\t\t$db = ConnectionManager::getDataSource($dbConfigName);\n\t\t$db->cacheSources = false;\n\t\t$listSources = $db->listSources();\n\t\t$prefix = $db->config['prefix'];\n\t\t$Folder = new Folder($path);\n\t\t$files = $Folder->read(true, true);\n\t\t$result = true;\n\t\tforeach($files[1] as $file) {\n\t\t\tif (preg_match('/^(.*?)\\.csv$/', $file, $matches)) {\n\t\t\t\t$table = $matches[1];\n\t\t\t\tif (in_array($prefix . $table, $listSources)) {\n\t\t\t\t\tif ($options['filterTable'] && $options['filterTable'] != $table) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!$db->loadCsv(['path' => $path . DS . $file, 'encoding' => 'auto'])) {\n\t\t\t\t\t\t$result = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\tclearAllCache();\n\t\treturn $result;\n\t}\n\n\t/**\n\t * \u6700\u77ed\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af\n\t * - \u5bfe\u8c61\u3068\u306a\u308b\u5024\u306e\u9577\u3055\u304c\u3001\u6307\u5b9a\u3057\u305f\u6700\u77ed\u5024\u3088\u308a\u9577\u3044\u5834\u5408\u3001true\u3092\u8fd4\u3059\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $min \u5024\u306e\u6700\u77ed\u5024\n\t * @return boolean\n\t */\n\tpublic function minLength($check, $min)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\t$length = mb_strlen($check, Configure::read('App.encoding'));\n\t\treturn ($length >= $min);\n\t}\n\n\t/**\n\t * \u6700\u9577\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af\n\t * - \u5bfe\u8c61\u3068\u306a\u308b\u5024\u306e\u9577\u3055\u304c\u3001\u6307\u5b9a\u3057\u305f\u6700\u9577\u5024\u3088\u308a\u77ed\u3044\u5834\u5408\u3001true\u3092\u8fd4\u3059\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $max \u5024\u306e\u6700\u9577\u5024\n\t * @param boolean\n\t */\n\tpublic function maxLength($check, $max)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\t$length = mb_strlen($check, Configure::read('App.encoding'));\n\t\treturn ($length <= $max);\n\t}\n\n\t/**\n\t * \u6700\u5927\u306e\u30d0\u30a4\u30c8\u6570\u30c1\u30a7\u30c3\u30af\n\t * - \u5bfe\u8c61\u3068\u306a\u308b\u5024\u306e\u30b5\u30a4\u30ba\u304c\u3001\u6307\u5b9a\u3057\u305f\u6700\u5927\u5024\u3088\u308a\u77ed\u3044\u5834\u5408\u3001true \u3092\u8fd4\u3059\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $max \u30d0\u30a4\u30c8\u6570\u306e\u6700\u5927\u5024\n\t * @return boolean\n\t */\n\tpublic function maxByte($check, $max)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\t$byte = strlen($check);\n\t\treturn ($byte <= $max);\n\t}\n\n\t/**\n\t * \u6700\u5927\u306e\u30d0\u30a4\u30c8\u6570\u30c1\u30a7\u30c3\u30af\n\t * - \u5bfe\u8c61\u3068\u306a\u308b\u5024\u306e\u30b5\u30a4\u30ba\u304c\u3001\u6307\u5b9a\u3057\u305f\u6700\u5927\u5024\u3088\u308a\u77ed\u3044\u5834\u5408\u3001true \u3092\u8fd4\u3059\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $max \u30d0\u30a4\u30c8\u6570\u306e\u6700\u5927\u5024\n\t * @return boolean\n\t */\n\tpublic function checkDateRenge($check, $begin, $end)\n\t{\n\t\tif (!empty($this->data[$this->alias][$begin]) &&\n\t\t\t!empty($this->data[$this->alias][$end])) {\n\t\t\tif (strtotime($this->data[$this->alias][$begin]) >=\n\t\t\t\tstrtotime($this->data[$this->alias][$end])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $min \u5024\u306e\u6700\u77ed\u5024\n\t * @param int $max \u5024\u306e\u6700\u9577\u5024\n\t * @param boolean\n\t */\n\tpublic function between($check, $min, $max)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\t$length = mb_strlen($check, Configure::read('App.encoding'));\n\t\treturn ($length >= $min && $length <= $max);\n\t}\n\n\t/**\n\t * \u6307\u5b9a\u30d5\u30a3\u30fc\u30eb\u30c9\u306eMAX\u5024\u3092\u53d6\u5f97\u3059\u308b\n\t *\n\t * \u73fe\u5728\u6570\u5024\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u307f\u5bfe\u5fdc\n\t *\n\t * @param string $field\n\t * @param array $conditions\n\t * @return int\n\t */\n\tpublic function getMax($field, $conditions = [])\n\t{\n\t\tif (strpos($field, '.') === false) {\n\t\t\t$modelName = $this->alias;\n\t\t} else {\n\t\t\tlist($modelName, $field) = explode('\\.', $field);\n\t\t}\n\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$this->recursive = -1;\n\t\tif ($db->config['datasource'] == 'Database/BcCsv') {\n\t\t\t// CSVDB\u306e\u5834\u5408\u306fMAX\u95a2\u6570\u304c\u5229\u7528\u3067\u304d\u306a\u3044\u70ba\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u51e6\u7406\u3059\u308b\n\t\t\t// TODO dbo\u3067MAX\u95a2\u6570\u306e\u5b9f\u88c5\u3067\u304d\u305f\u3089\u3053\u3053\u3082\u5909\u66f4\u3059\u308b\n\t\t\t$this->cacheQueries = false;\n\t\t\t$dbDatas = $this->find('all', ['conditions' => $conditions, 'fields' => [$modelName . '.' . $field]]);\n\t\t\t$this->cacheQueries = true;\n\t\t\t$max = 0;\n\t\t\tif ($dbDatas) {\n\t\t\t\tforeach($dbDatas as $dbData) {\n\t\t\t\t\tif ($max < $dbData[$modelName][$field]) {\n\t\t\t\t\t\t$max = $dbData[$modelName][$field];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $max;\n\t\t} else {\n\t\t\t$this->cacheQueries = false;\n\t\t\t// SQLite\u306e\u5834\u5408\u3001Max\u95a2\u6570\u306bmodel\u540d\u3092\u542b\u3080\u3068\u3001\u623b\u308a\u5024\u306e\u6dfb\u5b57\u304c\u5d29\u308c\u308b\uff08CakePHP\u306e\u30d0\u30b0\uff09\n\t\t\t$dbData = $this->find('all', ['conditions' => $conditions, 'fields' => ['MAX(' . $modelName . '.' . $field . ') AS max']]);\n\t\t\t$this->cacheQueries = true;\n\t\t\tif (isset($dbData[0][0]['max'])) {\n\t\t\t\treturn $dbData[0][0]['max'];\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \u30c6\u30fc\u30d6\u30eb\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8ffd\u52a0\u3059\u308b\n\t *\n\t * @param array $options [ field / column / table ]\n\t * @return    boolean\n\t */\n\tpublic function addField($options)\n\t{\n\t\textract($options);\n\n\t\tif (!isset($field) || !isset($column)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!isset($table)) {\n\t\t\t$table = $this->useTable;\n\t\t}\n\n\t\t$this->_schema = null;\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$options = ['field' => $field, 'table' => $table, 'column' => $column];\n\t\t$ret = $db->addColumn($options);\n\t\t$this->deleteModelCache();\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \u30d5\u30a3\u30fc\u30eb\u30c9\u69cb\u9020\u3092\u5909\u66f4\u3059\u308b\n\t *\n\t * @param array $options [ field / column / table ]\n\t * @return    boolean\n\t */\n\tpublic function editField($options)\n\t{\n\t\textract($options);\n\n\t\tif (!isset($field) || !isset($column)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!isset($table)) {\n\t\t\t$table = $this->useTable;\n\t\t}\n\n\t\t$this->_schema = null;\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$options = ['field' => $field, 'table' => $table, 'column' => $column];\n\t\t$ret = $db->changeColumn($options);\n\t\t$this->deleteModelCache();\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u524a\u9664\u3059\u308b\n\t *\n\t * @param array $options [ field / table ]\n\t * @return    boolean\n\t */\n\tpublic function delField($options)\n\t{\n\t\textract($options);\n\n\t\tif (!isset($field)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!isset($table)) {\n\t\t\t$table = $this->useTable;\n\t\t}\n\n\t\t$this->_schema = null;\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$options = ['field' => $field, 'table' => $table];\n\t\t$ret = $db->dropColumn($options);\n\t\t$this->deleteModelCache();\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u5909\u66f4\u3059\u308b\n\t *\n\t * @param array $options [ new / old / table ]\n\t * @param array $column\n\t * @return boolean\n\t */\n\tpublic function renameField($options)\n\t{\n\t\textract($options);\n\n\t\tif (!isset($new) || !isset($old)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!isset($table)) {\n\t\t\t$table = $this->useTable;\n\t\t}\n\n\t\t$this->_schema = null;\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$options = ['new' => $new, 'old' => $old, 'table' => $table];\n\t\t$ret = $db->renameColumn($options);\n\t\t$this->deleteModelCache();\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t * @param string $tableName\n\t * @return boolean\n\t */\n\tpublic function tableExists($tableName)\n\t{\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$db->cacheSources = false;\n\t\t$tables = $db->listSources();\n\t\treturn in_array($tableName, $tables);\n\t}\n\n\t/**\n\t * \u82f1\u6570\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param string    \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u6587\u5b57\u5217\n\t * @return    boolean\n\t */\n\tpublic function alphaNumeric($check)\n\t{\n\t\tif (!$check[key($check)]) {\n\t\t\treturn true;\n\t\t}\n\t\tif (preg_match(\"/^[a-zA-Z0-9]+$/\", $check[key($check)])) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u82f1\u6570\u30c1\u30a7\u30c3\u30af\u30d7\u30e9\u30b9\n\t *\n\t * \u30cf\u30a4\u30d5\u30f3\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3092\u8a31\u5bb9\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u6587\u5b57\u5217\n\t * @param array $options \u4ed6\u306b\u8a31\u5bb9\u3059\u308b\u6587\u5b57\u5217\n\t * @return boolean\n\t */\n\tpublic function alphaNumericPlus($check, $options = [])\n\t{\n\t\tif (!$check[key($check)]) {\n\t\t\treturn true;\n\t\t}\n\t\tif ($options && !array_key_exists('rule', $options)) {\n\t\t\tif (!is_array($options)) {\n\t\t\t\t$options = [$options];\n\t\t\t}\n\t\t\t$options = preg_quote(implode('', $options), '/');\n\t\t} else {\n\t\t\t$options = '';\n\t\t}\n\n\t\tif (preg_match(\"/^[a-zA-Z0-9\\-_\" . $options . \"]+$/\", $check[key($check)])) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u524a\u9664\u6587\u5b57\u30c1\u30a7\u30c3\u30af\n\t *\n\t * BcUtile::urlencode \u3067\u3001\u524a\u9664\u3055\u308c\u308b\u6587\u5b57\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af(\u7d50\u679c\u30d6\u30e9\u30f3\u30af\u306b\u306a\u308b\u305f\u3081notBlank\u306b\u306a\u308b\u78ba\u8a8d)\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u6587\u5b57\u5217\n\t * @return boolean\n\t */\n\tpublic function bcUtileUrlencodeBlank($check)\n\t{\n\t\tif (!$check[key($check)]) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (preg_match(\"/^[\\\\'\\|`\\^\\\"\\(\\)\\{\\}\\[\\];\\/\\?:@&=\\+\\$,%<>#! \u3000]+$/\", $check[key($check)])) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * \u30c7\u30fc\u30bf\u306e\u91cd\u8907\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t * @param array $check\n\t * @return boolean false \u91cd\u8907\u3042\u308a / true \u91cd\u8907\u306a\u3057\n\t */\n\tpublic function duplicate($check)\n\t{\n\t\t$conditions = [$this->alias . '.' . key($check) => $check[key($check)]];\n\t\tif ($this->exists()) {\n\t\t\t$conditions['NOT'] = [$this->alias . '.' . $this->primaryKey => $this->id];\n\t\t}\n\t\t$ret = $this->find('first', ['conditions' => $conditions]);\n\t\tif ($ret) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30c7\u30fc\u30bf\n\t * @param int $size \u6700\u5927\u306e\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\n\t * @deprecated 5.0.0 since 4.1.0.2 \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\u306b\u52a0\u3048\u3066\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6642\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u30ed\u30b0\u306b\u53d6\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\n\t */\n\tpublic function fileSize($check, $size)\n\t{\n\n\t\t$this->log(deprecatedMessage(\n\t\t\t__d('baser', '\u30e1\u30bd\u30c3\u30c9\uff1aBcAppModel::fileSize()'), '4.1.0.2', '5.0.0', __d('baser', 'BcAppModel::fileCheck() \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002')\n\t\t), LOG_ALERT);\n\t\t$file = $check[key($check)];\n\t\tif (!empty($file['name'])) {\n\t\t\t// \u30b5\u30a4\u30ba\u304c\u7a7a\u306e\u5834\u5408\u306f\u3001HTML\u306eMAX_FILE_SIZE\u306e\u5236\u9650\u306b\u3088\u308a\u30b5\u30a4\u30ba\u30aa\u30fc\u30d0\u30fc\n\t\t\t// \u3060\u304c\u3001post_max_size \u3092\u8d85\u3048\u305f\u5834\u5408\u306f\u3001\u3053\u3053\u307e\u3067\u51e6\u7406\u304c\u3053\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\n\t\t\tif (!$file['size']) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($file['size'] > $size) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30c7\u30fc\u30bf\n\t * @param int $size \u6700\u5927\u306e\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\n\t * @link http://php.net/manual/ja/features.file-upload.errors.php\n\t */\n\tpublic function fileCheck($check, $size)\n\t{\n\t\t// post_max_size \u30aa\u30fc\u30d0\u30fc\u30c1\u30a7\u30c3\u30af\n\t\t// POST\u3092\u524d\u63d0\u306e\u691c\u8a3c\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u5168\u3066\u306e\u53d7\u4fe1\u30c7\u30fc\u30bf\u3092\u691c\u8a3c\n\t\t// \u30c7\u30fc\u30bf\u306e\u66f4\u65b0\u6642\u306f\u5fc5\u305a$_POST\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3059\u308b\n\t\tif (!isConsole() && empty($_POST)) {\n\t\t\t$this->log('\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001PHP\u306e\u8a2d\u5b9a post_max_size \u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u306e\u5024\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002');\n\t\t\treturn false;\n\t\t}\n\t\t$file = $check[key($check)];\n\t\t// input[type=file] \u81ea\u4f53\u304c\u9001\u4fe1\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u30b5\u30a4\u30ba\u691c\u8a3c\u3092\u7d42\u4e86\n\t\tif ($file === null || !is_array($file)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// upload_max_filesize\u3068$size\u3092\u6bd4\u8f03\u3057\u5c0f\u3055\u3044\u6570\u5024\u3067\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\n\t\t$uploadMaxSize = $this->convertSize(ini_get('upload_max_filesize'));\n\t\t$size = min([$size, $uploadMaxSize]);\n\n\t\t$fileErrorCode = Hash::get($file, 'error');\n\t\tif ($fileErrorCode) {\n\t\t\t// \u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6642\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\n\t\t\tswitch($fileErrorCode) {\n\t\t\t\t// \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6210\u529f\n\t\t\t\tcase 0:\n\t\t\t\t\t// UPLOAD_ERR_OK\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\t// UPLOAD_ERR_INI_SIZE\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001php.ini \u306e upload_max_filesize \u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u306e\u5024\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002');\n\t\t\t\t\treturn __('\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002 %s MB\u4ee5\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002', $this->convertSize($size, 'M'));\n\t\t\t\tcase 2:\n\t\t\t\t\t// UPLOAD_ERR_FORM_SIZE\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001HTML\u3067\u6307\u5b9a\u3055\u308c\u305f MAX_FILE_SIZE \u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002');\n\t\t\t\t\treturn __('\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002 %s MB\u4ee5\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002', $this->convertSize($size, 'M'));\n\t\t\t\tcase 3:\n\t\t\t\t\t// UPLOAD_ERR_PARTIAL\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u4e0d\u5b8c\u5168\u3067\u3059\u3002');\n\t\t\t\t\treturn __('\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Web\u30b5\u30a4\u30c8\u306e\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\t// \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u691c\u8a3c\u306f\u5fc5\u9808\u30c1\u30a7\u30c3\u30af\u3092\u4ed5\u69d8\u3059\u308b\u3053\u3068\n\t\t\t\tcase 4:\n\t\t\t\t\t// UPLOAD_ERR_NO_FILE\n\t\t\t\t\t// \t$this->log('CODE: ' . $fileErrorCode . ' \u30d5\u30a1\u30a4\u30eb\u304c\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\t// UPLOAD_ERR_NO_TMP_DIR\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u4e00\u6642\u66f8\u8fbc\u307f\u7528\u306e\u30d5\u30a9\u30eb\u30c0\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u30c6\u30f3\u30dd\u30e9\u30ea\u30d5\u30a9\u30eb\u30c0\u306e\u66f8\u8fbc\u307f\u6a29\u9650\u3092\u898b\u76f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\t\treturn __('\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Web\u30b5\u30a4\u30c8\u306e\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\tcase 7:\n\t\t\t\t\t// UPLOAD_ERR_CANT_WRITE\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u30c7\u30a3\u30b9\u30af\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002');\n\t\t\t\t\treturn __('\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Web\u30b5\u30a4\u30c8\u306e\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\tcase 8:\n\t\t\t\t\t// UPLOAD_ERR_EXTENSION\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' PHP\u306e\u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3092\u4e2d\u6b62\u3057\u307e\u3057\u305f\u3002');\n\t\t\t\t\treturn __('\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Web\u30b5\u30a4\u30c8\u306e\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($file['name'])) {\n\t\t\t// \u30b5\u30a4\u30ba\u304c\u7a7a\u306e\u5834\u5408\u306f\u3001HTML\u306eMAX_FILE_SIZE\u306e\u5236\u9650\u306b\u3088\u308a\u30b5\u30a4\u30ba\u30aa\u30fc\u30d0\u30fc\n\t\t\tif (!$file['size']) {\n\t\t\t\treturn __('\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002 %s MB\u4ee5\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002', $this->convertSize($size, 'M'));\n\t\t\t}\n\t\t\tif ($file['size'] > $size) {\n\t\t\t\treturn __('\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002 %s MB\u4ee5\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002', $this->convertSize($size, 'M'));\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30c7\u30fc\u30bf\n\t * @param string $ext \u8a31\u53ef\u3059\u308b\u62e1\u5f35\u5b50\n\t */\n\tpublic function fileExt($check, $exts)\n\t{\n\t\t$file = $check[key($check)];\n\t\tif (!is_array($exts)) {\n\t\t\t$exts = explode(',', $exts);\n\t\t}\n\n\t\t// FILES\u5f62\u5f0f\u306e\u30c1\u30a7\u30c3\u30af\n\t\tif (!empty($file['name'])) {\n\t\t\t$ext = decodeContent($file['type'], $file['name']);\n\t\t\tif (!in_array($ext, $exts)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// \u66f4\u65b0\u6642\u306e\u6587\u5b57\u5217\u30c1\u30a7\u30c3\u30af\n\t\tif (is_string($file)) {\n\t\t\t$ext = pathinfo($file, PATHINFO_EXTENSION);\n\t\t\tif (!in_array($ext, $exts)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u534a\u89d2\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u78ba\u8a8d\u3059\u308b\u5024\u3092\u542b\u3080\u914d\u5217\u3002\u5148\u982d\u306e\u8981\u7d20\u306e\u307f\u30c1\u30a7\u30c3\u30af\u3055\u308c\u308b\n\t * @return boolean\n\t */\n\tpublic function halfText($check)\n\t{\n\t\t$value = $check[key($check)];\n\t\t$len = strlen($value);\n\t\t$mblen = mb_strlen($value, 'UTF-8');\n\t\tif ($len != $mblen) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u534a\u89d2\u82f1\u6570\u5b57+\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\uff0b\u30cf\u30a4\u30d5\u30f3\u306e\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u78ba\u8a8d\u3059\u308b\u5024\u3092\u542b\u3080\u914d\u5217\u3002\u5148\u982d\u306e\u8981\u7d20\u306e\u307f\u30c1\u30a7\u30c3\u30af\u3055\u308c\u308b\n\t * @return boolean\n\t */\n\tpublic function alphaNumericDashUnderscore($check)\n\t{\n\t\t$value = array_values($check);\n\t\t$value = $value[0];\n\n\t\treturn preg_match('|^[0-9a-zA-Z_-]*$|', $value);\n\t}\n\n\t/**\n\t * \u4e00\u3064\u4f4d\u7f6e\u3092\u4e0a\u3052\u308b\n\t * @param string $id\n\t * @param array $conditions\n\t * @return boolean\n\t */\n\tpublic function sortup($id, $conditions)\n\t{\n\t\treturn $this->changeSort($id, -1, $conditions);\n\t}\n\n\t/**\n\t * \u4e00\u3064\u4f4d\u7f6e\u3092\u4e0b\u3052\u308b\n\t * @param string $id\n\t * @param array $conditions\n\t * @return boolean\n\t */\n\tpublic function sortdown($id, $conditions)\n\t{\n\t\treturn $this->changeSort($id, 1, $conditions);\n\t}\n\n\t/**\n\t * \u4e26\u3073\u9806\u3092\u5909\u66f4\u3059\u308b\n\t * @param string $id\n\t * @param int $offset\n\t * @param array $conditions\n\t * @return boolean\n\t */\n\tpublic function changeSort($id, $offset, $conditions = [])\n\t{\n\t\tif ($conditions) {\n\t\t\t$_conditions = $conditions;\n\t\t} else {\n\t\t\t$_conditions = [];\n\t\t}\n\n\t\t// \u4e00\u6642\u7684\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092OFF\u3059\u308b\n\t\t$this->cacheQueries = false;\n\n\t\t$current = $this->find('first', [\n\t\t\t'conditions' => [$this->alias . '.id' => $id],\n\t\t\t'fields' => [$this->alias . '.id', $this->alias . '.sort']\n\t\t]);\n\t\tif (!$current) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// \u5909\u66f4\u76f8\u624b\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\t\tif ($offset > 0) { // DOWN\n\t\t\t$order = [$this->alias . '.sort'];\n\t\t\t$limit = $offset;\n\t\t\t$conditions[$this->alias . '.sort >'] = $current[$this->alias]['sort'];\n\t\t} elseif ($offset < 0) { // UP\n\t\t\t$order = [$this->alias . '.sort DESC'];\n\t\t\t$limit = $offset * -1;\n\t\t\t$conditions[$this->alias . '.sort <'] = $current[$this->alias]['sort'];\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\n\t\t$conditions = array_merge($conditions, $_conditions);\n\t\t$target = $this->find('all', [\n\t\t\t'conditions' => $conditions,\n\t\t\t'fields' => [$this->alias . '.id', $this->alias . '.sort'],\n\t\t\t'order' => $order,\n\t\t\t'limit' => $limit,\n\t\t\t'recursive' => -1\n\t\t]);\n\n\t\tif (!isset($target[count($target) - 1])) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$currentSort = $current[$this->alias]['sort'];\n\t\t$targetSort = $target[count($target) - 1][$this->alias]['sort'];\n\n\t\t// current \u304b\u3089 target \u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092sort\u3067\u7bc4\u56f2\u6307\u5b9a\u3057\u3066\u53d6\u5f97\n\t\t$conditions = [];\n\t\tif ($offset > 0) { // DOWN\n\t\t\t$conditions[$this->alias . '.sort >='] = $currentSort;\n\t\t\t$conditions[$this->alias . '.sort <='] = $targetSort;\n\t\t} elseif ($offset < 0) { // UP\n\t\t\t$conditions[$this->alias . '.sort <='] = $currentSort;\n\t\t\t$conditions[$this->alias . '.sort >='] = $targetSort;\n\t\t}\n\n\t\t$conditions = array_merge($conditions, $_conditions);\n\t\t$datas = $this->find('all', [\n\t\t\t'conditions' => $conditions,\n\t\t\t'fields' => [$this->alias . '.id', $this->alias . '.sort'],\n\t\t\t'order' => $order,\n\t\t\t'recursive' => -1\n\t\t]);\n\n\t\t// \u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\n\t\tforeach($datas as $data) {\n\t\t\tif ($data[$this->alias]['sort'] == $currentSort) {\n\t\t\t\t$data[$this->alias]['sort'] = $targetSort;\n\t\t\t} else {\n\t\t\t\tif ($offset > 0) {\n\t\t\t\t\t$data[$this->alias]['sort']--;\n\t\t\t\t} elseif ($offset < 0) {\n\t\t\t\t\t$data[$this->alias]['sort']++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$this->save($data, false)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Model\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u524a\u9664\u3059\u308b\n\t * @return void\n\t */\n\tpublic function deleteModelCache()\n\t{\n\t\t$this->_schema = null;\n\t\t$folder = new Folder(CACHE . 'models' . DS);\n\t\t$caches = $folder->read(true, true);\n\t\tforeach($caches[1] as $cache) {\n\t\t\tif (basename($cache) != 'empty') {\n\t\t\t\t@unlink(CACHE . 'models' . DS . $cache);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Key Value \u5f62\u5f0f\u306e\u30c6\u30fc\u30d6\u30eb\u3088\u308a\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\n\t * \uff11\u30ec\u30b3\u30fc\u30c9\u3068\u3057\u3066\u30c7\u30fc\u30bf\u3092\u5c55\u958b\u3059\u308b\n\t * @return array\n\t */\n\tpublic function findExpanded()\n\t{\n\t\t$dbDatas = $this->find('all', ['fields' => ['name', 'value']]);\n\t\t$expandedData = [];\n\t\tif ($dbDatas) {\n\t\t\tforeach($dbDatas as $dbData) {\n\t\t\t\t$expandedData[$dbData[$this->alias]['name']] = $dbData[$this->alias]['value'];\n\t\t\t}\n\t\t}\n\t\treturn $expandedData;\n\t}\n\n\t/**\n\t * Key Value \u5f62\u5f0f\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\n\t * @param array $data\n\t * @return    boolean\n\t */\n\tpublic function saveKeyValue($data)\n\t{\n\t\tif (isset($data[$this->alias])) {\n\t\t\t$data = $data[$this->alias];\n\t\t}\n\n\t\tif ($this->Behaviors->loaded('BcCache')) {\n\t\t\t$this->Behaviors->disable('BcCache');\n\t\t}\n\n\t\t$result = true;\n\t\tforeach($data as $key => $value) {\n\n\t\t\tif ($this->find('count', ['conditions' => ['name' => $key]]) > 1) {\n\t\t\t\t$this->deleteAll(['name' => $key]);\n\t\t\t}\n\n\t\t\t$dbData = $this->find('first', ['conditions' => ['name' => $key]]);\n\n\t\t\tif (!$dbData) {\n\t\t\t\t$dbData = [];\n\t\t\t\t$dbData[$this->alias]['name'] = $key;\n\t\t\t\t$dbData[$this->alias]['value'] = $value;\n\t\t\t\t$this->create($dbData);\n\t\t\t} else {\n\t\t\t\t$dbData[$this->alias]['value'] = $value;\n\t\t\t\t$this->set($dbData);\n\t\t\t}\n\n\t\t\t// SQlite\u306e\u5834\u5408\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7528\u306e\u95a2\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\n\t\t\t// \u500b\u5225\u306b\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\t\t\tif (!$this->save(null, false)) {\n\t\t\t\t$result = false;\n\t\t\t}\n\t\t}\n\n\t\tif ($this->Behaviors->loaded('BcCache')) {\n\t\t\t$this->Behaviors->enable('BcCache');\n\t\t\t$this->delCache();\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t * \u30ea\u30b9\u30c8\u30c1\u30a7\u30c3\u30af\n\t * \u5bfe\u8c61\u3068\u306a\u308b\u5024\u304c\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u30a8\u30e9\u30fc\n\t *\n\t * @param array $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param array $list \u30ea\u30b9\u30c8\n\t * @return boolean Succcess\n\t */\n\tpublic function notInList($check, $list)\n\t{\n\t\treturn !in_array($check[key($check)], $list);\n\t}\n\n\t/**\n\t * Deconstructs a complex data type (array or object) into a single field value.\n\t *\n\t * @param string $field The name of the field to be deconstructed\n\t * @param mixed $data An array or object to be deconstructed into a field\n\t * @return mixed The resulting data that should be assigned to a field\n\t */\n\tpublic function deconstruct($field, $data)\n\t{\n\t\tif (!is_array($data)) {\n\t\t\treturn $data;\n\t\t}\n\n\t\t$type = $this->getColumnType($field);\n\n\t\t// >>> CUSTOMIZE MODIFY 2013/11/10 ryuring \u548c\u66a6\u5bfe\u5fdc\n\t\t/* if (!in_array($type, array('datetime', 'timestamp', 'date', 'time'))) { */\n\t\t// ---\n\t\tif (!in_array($type, ['string', 'text', 'datetime', 'timestamp', 'date', 'time'])) {\n\t\t\t// <<<\n\t\t\treturn $data;\n\t\t}\n\n\t\t$useNewDate = (isset($data['year']) || isset($data['month']) ||\n\t\t\tisset($data['day']) || isset($data['hour']) || isset($data['minute']));\n\n\t\t// >>> CUSTOMIZE MODIFY 2013/11/10 ryuring \u548c\u66a6\u5bfe\u5fdc\n\t\t/* $dateFields = array('Y' => 'year', 'm' => 'month', 'd' => 'day', 'H' => 'hour', 'i' => 'min', 's' => 'sec'); */\n\t\t// ---\n\t\t$dateFields = ['W' => 'wareki', 'Y' => 'year', 'm' => 'month', 'd' => 'day', 'H' => 'hour', 'i' => 'min', 's' => 'sec'];\n\t\t// <<<\n\t\t$timeFields = ['H' => 'hour', 'i' => 'min', 's' => 'sec'];\n\t\t$date = [];\n\n\t\tif (isset($data['meridian']) && empty($data['meridian'])) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (isset($data['hour']) &&\n\t\t\tisset($data['meridian']) &&\n\t\t\t!empty($data['hour']) &&\n\t\t\t$data['hour'] != 12 &&\n\t\t\t$data['meridian'] === 'pm'\n\t\t) {\n\t\t\t$data['hour'] = $data['hour'] + 12;\n\t\t}\n\t\tif (isset($data['hour']) && isset($data['meridian']) && $data['hour'] == 12 && $data['meridian'] === 'am') {\n\t\t\t$data['hour'] = '00';\n\t\t}\n\t\tif ($type === 'time') {\n\t\t\tforeach($timeFields as $key => $val) {\n\t\t\t\tif (!isset($data[$val]) || $data[$val] === '0' || $data[$val] === '00') {\n\t\t\t\t\t$data[$val] = '00';\n\t\t\t\t} elseif ($data[$val] !== '') {\n\t\t\t\t\t$data[$val] = sprintf('%02d', $data[$val]);\n\t\t\t\t}\n\t\t\t\tif (!empty($data[$val])) {\n\t\t\t\t\t$date[$key] = $data[$val];\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// >>> CUSTOMIZE MODIFY 2013/11/10 ryuring \u548c\u66a6\u5bfe\u5fdc\n\t\t/* if ($type === 'datetime' || $type === 'timestamp' || $type === 'date') { */\n\t\t// ---\n\t\tif ($type == 'text' || $type == 'string' || $type === 'datetime' || $type === 'timestamp' || $type === 'date') {\n\t\t\t// <<<\n\t\t\tforeach($dateFields as $key => $val) {\n\t\t\t\tif ($val === 'hour' || $val === 'min' || $val === 'sec') {\n\t\t\t\t\tif (!isset($data[$val]) || $data[$val] === '0' || $data[$val] === '00') {\n\t\t\t\t\t\t$data[$val] = '00';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$data[$val] = sprintf('%02d', $data[$val]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// >>> CUSTOMIZE ADD 2013/11/10 ryuring\t\u548c\u66a6\u5bfe\u5fdc\n\t\t\t\tif ($val == 'wareki' && !empty($data['wareki'])) {\n\t\t\t\t\t$warekis = ['m' => 1867, 't' => 1911, 's' => 1925, 'h' => 1988, 'r' => 2018];\n\t\t\t\t\tif (!empty($data['year'])) {\n\t\t\t\t\t\tlist($wareki, $year) = explode('-', $data['year']);\n\t\t\t\t\t\t$data['year'] = $year + $warekis[$wareki];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// <<<\n\t\t\t\t// >>> CUSTOMIZE ADD 2013/11/10 ryuring\t\u548c\u66a6\u5bfe\u5fdc\n\t\t\t\t/* if (!isset($data[$val]) || isset($data[$val]) && (empty($data[$val]) || $data[$val][0] === '-')) {\n\t\t\t\t  return null; */\n\t\t\t\t// ---\n\t\t\t\tif ($val != 'wareki' && !isset($data[$val]) || isset($data[$val]) && (empty($data[$val]) || (isset($data[$val][0]) && $data[$val][0] === '-'))) {\n\t\t\t\t\tif ($type == 'text' || $type == 'string') {\n\t\t\t\t\t\treturn $data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($data[$val]) && !empty($data[$val])) {\n\t\t\t\t\t$date[$key] = $data[$val];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($useNewDate && !empty($date)) {\n\t\t\t// >>> CUSTOMIZE MODIFY 2013/11/10 ryuring \u548c\u66a6\u5bfe\u5fdc\n\t\t\t/* $format = $this->getDataSource()->columns[$type]['format']; */\n\t\t\t// ---\n\t\t\tif ($type == 'text' || $type == 'string') {\n\t\t\t\t$format = 'Y-m-d H:i:s';\n\t\t\t} else {\n\t\t\t\t$format = $this->getDataSource()->columns[$type]['format'];\n\t\t\t}\n\t\t\t// <<<\n\n\t\t\tforeach(['m', 'd', 'H', 'i', 's'] as $index) {\n\t\t\t\tif (isset($date[$index])) {\n\t\t\t\t\t$date[$index] = sprintf('%02d', $date[$index]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str_replace(array_keys($date), array_values($date), $format);\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * \uff12\u3064\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u78ba\u8a8d\u3059\u308b\n\t *\n\t * @param array $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param mixed $fields \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\n\t * @return    boolean\n\t */\n\tpublic function confirm($check, $fields)\n\t{\n\t\t$value1 = $value2 = '';\n\t\tif (is_array($fields) && count($fields) > 1) {\n\t\t\tif (isset($this->data[$this->alias][$fields[0]]) &&\n\t\t\t\tisset($this->data[$this->alias][$fields[1]])) {\n\t\t\t\t$value1 = $this->data[$this->alias][$fields[0]];\n\t\t\t\t$value2 = $this->data[$this->alias][$fields[1]];\n\t\t\t}\n\t\t} elseif ($fields) {\n\t\t\tif (isset($check[key($check)]) && isset($this->data[$this->alias][$fields])) {\n\t\t\t\t$value1 = $check[key($check)];\n\t\t\t\t$value2 = $this->data[$this->alias][$fields];\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif ($value1 != $value2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u6307\u5b9a\u3057\u305f\u30e2\u30c7\u30eb\u4ee5\u5916\u306e\u30a2\u30bd\u30b7\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u9664\u5916\u3059\u308b\n\t *\n\t * @param array $auguments \u30a2\u30bd\u30b7\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u9664\u5916\u3057\u306a\u3044\u30e2\u30c7\u30eb\u3002\n\t * \u3000\u300c.\uff08\u30c9\u30c3\u30c8\uff09\u300d\u3067\u533a\u5207\u308b\u4e8b\u306b\u3088\u308a\u3001\u5bfe\u8c61\u30e2\u30c7\u30eb\u306b\u30a2\u30bd\u30b7\u30a8\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\u304c\u3055\u3089\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u30a2\u30bd\u30b7\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u5bfe\u8c61\u3068\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\n\t * \u3000\uff08\u4f8b\uff09UserGroup.Permission\n\t * @param boolean $reset \u30d0\u30a4\u30f3\u30c9\u6642\u306b\uff11\u56de\u306e find \u3067\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u304b\u3069\u3046\u304b\n\t * @return void\n\t */\n\tpublic function reduceAssociations($arguments, $reset = true)\n\t{\n\t\t$models = [];\n\n\t\tforeach($arguments as $index => $argument) {\n\t\t\tif (is_array($argument)) {\n\t\t\t\tif (count($argument) > 0) {\n\t\t\t\t\t$arguments = am($arguments, $argument);\n\t\t\t\t}\n\t\t\t\tunset($arguments[$index]);\n\t\t\t}\n\t\t}\n\n\t\tforeach($arguments as $index => $argument) {\n\t\t\tif (!is_string($argument)) {\n\t\t\t\tunset($arguments[$index]);\n\t\t\t}\n\t\t}\n\n\t\tif (count($arguments) == 0) {\n\t\t\t$models[$this->name] = [];\n\t\t} else {\n\t\t\tforeach($arguments as $argument) {\n\t\t\t\tif (strpos($argument, '.') !== false) {\n\t\t\t\t\t$model = substr($argument, 0, strpos($argument, '.'));\n\t\t\t\t\t$child = substr($argument, strpos($argument, '.') + 1);\n\n\t\t\t\t\tif ($child == $model) {\n\t\t\t\t\t\t$models[$model] = [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$models[$model][] = $child;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$models[$this->name][] = $argument;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$relationTypes = ['belongsTo', 'hasOne', 'hasMany', 'hasAndBelongsToMany'];\n\n\t\tforeach($models as $bindingName => $children) {\n\t\t\t$model = null;\n\n\t\t\tforeach($relationTypes as $relationType) {\n\t\t\t\t$currentRelation = (isset($this->$relationType)? $this->$relationType : null);\n\t\t\t\tif (isset($currentRelation) && isset($currentRelation[$bindingName]) &&\n\t\t\t\t\tis_array($currentRelation[$bindingName]) && isset($currentRelation[$bindingName]['className'])) {\n\t\t\t\t\t$model = $currentRelation[$bindingName]['className'];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isset($model)) {\n\t\t\t\t$model = $bindingName;\n\t\t\t}\n\n\t\t\tif (isset($model) && $model != $this->name && isset($this->$model)) {\n\t\t\t\tif (!isset($this->__backInnerAssociation)) {\n\t\t\t\t\t$this->__backInnerAssociation = [];\n\t\t\t\t}\n\t\t\t\t$this->__backInnerAssociation[] = $model;\n\t\t\t\t$this->$model->reduceAssociations($children, $reset);\n\t\t\t}\n\t\t}\n\n\t\tif (isset($models[$this->name])) {\n\t\t\tforeach($models as $model => $children) {\n\t\t\t\tif ($model != $this->name) {\n\t\t\t\t\t$models[$this->name][] = $model;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$models = array_unique($models[$this->name]);\n\t\t\t$unbind = [];\n\n\t\t\tforeach($relationTypes as $relation) {\n\t\t\t\tif (isset($this->$relation)) {\n\t\t\t\t\tforeach($this->$relation as $bindingName => $bindingData) {\n\t\t\t\t\t\tif (!in_array($bindingName, $models)) {\n\t\t\t\t\t\t\t$unbind[$relation][] = $bindingName;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count($unbind) > 0) {\n\t\t\t\t$this->unbindModel($unbind, $reset);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \u8907\u6570\u306eE\u30e1\u30fc\u30eb\u30c1\u30a7\u30c3\u30af\uff08\u30ab\u30f3\u30de\u533a\u5207\u308a\uff09\n\t *\n\t * @param array $check \u8907\u6570\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\n\t * @return boolean\n\t */\n\tpublic function emails($check)\n\t{\n\t\t$emails = [];\n\t\tif (strpos($check[key($check)], ',') !== false) {\n\t\t\t$emails = explode(',', $check[key($check)]);\n\t\t}\n\t\tif (!$emails) {\n\t\t\t$emails = [$check[key($check)]];\n\t\t}\n\t\t$result = true;\n\t\tforeach($emails as $email) {\n\t\t\tif (!Validation::email($email)) {\n\t\t\t\t$result = false;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Deletes multiple model records based on a set of conditions.\n\t *\n\t * @param mixed $conditions Conditions to match\n\t * @param boolean $cascade Set to true to delete records that depend on this record\n\t * @param boolean $callbacks Run callbacks (not being used)\n\t * @return boolean True on success, false on failure\n\t * @link http://book.cakephp.org/view/692/deleteAll\n\t */\n\tpublic function deleteAll($conditions, $cascade = true, $callbacks = false)\n\t{\n\t\t$result = parent::deleteAll($conditions, $cascade, $callbacks);\n\t\tif ($result) {\n\t\t\tif ($this->Behaviors->attached('BcCache') && $this->Behaviors->enabled('BcCache')) {\n\t\t\t\t$this->delCache($this);\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Updates multiple model records based on a set of conditions.\n\t *\n\t * @param array $fields Set of fields and values, indexed by fields.\n\t *    Fields are treated as SQL snippets, to insert literal values manually escape your data.\n\t * @param mixed $conditions Conditions to match, true for all records\n\t * @return boolean True on success, false on failure\n\t * @link http://book.cakephp.org/view/75/Saving-Your-Data\n\t */\n\tpublic function updateAll($fields, $conditions = true)\n\t{\n\t\t$result = parent::updateAll($fields, $conditions);\n\t\tif ($result) {\n\t\t\tif ($this->Behaviors->attached('BcCache') && $this->Behaviors->enabled('BcCache')) {\n\t\t\t\t$this->delCache($this);\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Used to report user friendly errors.\n\t * If there is a file app/error.php or app/app_error.php this file will be loaded\n\t * error.php is the AppError class it should extend ErrorHandler class.\n\t *\n\t * @param string $method Method to be called in the error class (AppError or ErrorHandler classes)\n\t * @param array $messages Message that is to be displayed by the error class\n\t */\n\tpublic function cakeError($method, $messages = [])\n\t{\n\t\t//======================================================================\n\t\t// router.php \u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u524d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\uff08bootstrap.php\uff09\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\n\t\t// AppController\u306a\u3069\u304c\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u306a\u3044\u70ba\u3001Object::cakeError() \u3092\u5b9f\u884c\u3059\u308b\u4e8b\u304c\u3067\u304d\u306a\u3044\u3002\n\t\t// router.php \u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u524d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u3001\u901a\u5e38\u306e\u30a8\u30e9\u30fc\u8868\u793a\u3092\u884c\u3046\n\t\t//======================================================================\n\t\tif (!Configure::read('BcRequest.routerLoaded')) {\n\t\t\ttrigger_error($method, E_USER_ERROR);\n\t\t} else {\n\t\t\tparent::cakeError($method, $messages);\n\t\t}\n\t}\n\n\t/**\n\t * Queries the datasource and returns a result set array.\n\t *\n\t * Used to perform find operations, where the first argument is type of find operation to perform\n\t * (all / first / count / neighbors / list / threaded),\n\t * second parameter options for finding (indexed array, including: 'conditions', 'limit',\n\t * 'recursive', 'page', 'fields', 'offset', 'order', 'callbacks')\n\t *\n\t * Eg:\n\t * {{{\n\t * $model->find('all', array(\n\t *   'conditions' => array('name' => 'Thomas Anderson'),\n\t *   'fields' => array('name', 'email'),\n\t *   'order' => 'field3 DESC',\n\t *   'recursive' => 2,\n\t *   'group' => 'type',\n\t *   'callbacks' => false,\n\t * ));\n\t * }}}\n\t *\n\t * In addition to the standard query keys above, you can provide Datasource, and behavior specific\n\t * keys. For example, when using a SQL based datasource you can use the joins key to specify additional\n\t * joins that should be part of the query.\n\t *\n\t * {{{\n\t * $model->find('all', array(\n\t *   'conditions' => array('name' => 'Thomas Anderson'),\n\t *   'joins' => array(\n\t *     array(\n\t *       'alias' => 'Thought',\n\t *       'table' => 'thoughts',\n\t *       'type' => 'LEFT',\n\t *       'conditions' => '`Thought`.`person_id` = `Person`.`id`'\n\t *     )\n\t *   )\n\t * ));\n\t * }}}\n\t *\n\t * ### Disabling callbacks\n\t *\n\t * The `callbacks` key allows you to disable or specify the callbacks that should be run. To\n\t * disable beforeFind & afterFind callbacks set `'callbacks' => false` in your options. You can\n\t * also set the callbacks option to 'before' or 'after' to enable only the specified callback.\n\t *\n\t * ### Adding new find types\n\t *\n\t * Behaviors and find types can also define custom finder keys which are passed into find().\n\t * See the documentation for custom find types\n\t * (http://book.cakephp.org/2.0/en/models/retrieving-your-data.html#creating-custom-find-types)\n\t * for how to implement custom find types.\n\t *\n\t * Specifying 'fields' for notation 'list':\n\t *\n\t * - If no fields are specified, then 'id' is used for key and 'model->displayField' is used for value.\n\t * - If a single field is specified, 'id' is used for key and specified field is used for value.\n\t * - If three fields are specified, they are used (in order) for key, value and group.\n\t * - Otherwise, first and second fields are used for key and value.\n\t *\n\t * Note: find(list) + database views have issues with MySQL 5.0. Try upgrading to MySQL 5.1 if you\n\t * have issues with database views.\n\t *\n\t * Note: find(count) has its own return values.\n\t *\n\t * @param string $type Type of find operation (all / first / count / neighbors / list / threaded)\n\t * @param array $query Option fields (conditions / fields / joins / limit / offset / order / page / group / callbacks)\n\t * @return array|null Array of records, or Null on failure.\n\t * @link http://book.cakephp.org/2.0/en/models/retrieving-your-data.html\n\t */\n\tpublic function find($type = 'first', $query = [])\n\t{\n\t\t$this->findQueryType = $type;\n\t\t$this->id = $this->getID();\n\n\t\t$query = $this->buildQuery($type, $query);\n\t\tif (is_null($query)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// CUSTOMIZE MODIFY 2012/04/23 ryuring\n\t\t// \u30ad\u30e3\u30c3\u30b7\u30e5\u30d3\u30d8\u30a4\u30d3\u30a2\u304c\u5229\u7528\u72b6\u614b\u306e\u5834\u5408\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u8aad\u307f\u8fbc\u3080\n\t\t//\n\t\t// \u3010AppModel\u3067\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5b9a\u7fa9\u3057\u306a\u3044\u4e8b\u3011\n\t\t// \u81ea\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u308b\u30af\u30e9\u30b9\u5b9a\u7fa9\u306e\u306a\u3044\u95a2\u9023\u30e2\u30c7\u30eb\u306e\u51e6\u7406\u3067\u52dd\u624b\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5229\u7528\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u70ba\n\t\t// \uff08HABTM\u306e\u66f4\u65b0\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u306e\u3067\uff09\n\t\t// >>>\n\t\t//$results = $this->getDataSource()->read($this, $query);\n\t\t// ---\n\t\t$cache = true;\n\t\tif (isset($query['cache']) && is_bool($query['cache'])) {\n\t\t\t$cache = $query['cache'];\n\t\t\tunset($query['cache']);\n\t\t}\n\t\tif (BC_INSTALLED && isset($this->Behaviors) && $this->Behaviors->attached('BcCache') &&\n\t\t\t$this->Behaviors->enabled('BcCache') && Configure::read('debug') == 0) {\n\t\t\t// ===========================================================================================\n\t\t\t// 2016/09/22 ryuring\n\t\t\t// PHP 7.0.8 \u74b0\u5883\u306b\u3066\u3001\u30b3\u30f3\u30c6\u30f3\u30c4\u4e00\u89a7\u8ffd\u52a0\u6642\u3001\u691c\u7d22\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4f5c\u6210\u306e\u70ba\u3001BcContentsComponent \u7d4c\u7531\u3067\n\t\t\t// \u547c\u3073\u51fa\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u969b\u3060\u3051\u3001\u30e2\u30c7\u30eb\u306e\u30de\u30b8\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3092\u8fd4\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u304c\u30b9\u30c8\u30c3\u30d7\u3057\u3066\u3057\u307e\u3046\u3002\n\t\t\t// \u305d\u306e\u70ba\u3001\u30d3\u30d8\u30a4\u30d3\u30a2\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u76f4\u63a5\u5b9f\u884c\u3057\u3066\u5bfe\u51e6\u3057\u305f\u3002\n\t\t\t// CakePHP\u3082\u3001PHP\u81ea\u4f53\u306e\u30a8\u30e9\u30fc\u3082\u767a\u751f\u305b\u305a\u3001\u305f\u3060\u6b62\u307e\u308b\u3002PHP7\u306e\u30d0\u30b0\uff1fPHP\u5074\u306e\u30e1\u30e2\u30ea\u30fc\u3092256M\u306b\u3057\u3066\u3082\u5909\u308f\u3089\u305a\u3002\n\t\t\t// ===========================================================================================\n\t\t\t$results = $this->Behaviors->BcCache->readCache($this, $cache, $type, $query);\n\t\t} else {\n\t\t\t$results = $this->getDataSource()->read($this, $query);\n\t\t}\n\t\t// <<<\n\n\t\t$this->resetAssociations();\n\n\t\tif ($query['callbacks'] === true || $query['callbacks'] === 'after') {\n\t\t\t$results = $this->_filterResults($results);\n\t\t}\n\n\t\t$this->findQueryType = null;\n\n\t\tif ($type === 'all') {\n\t\t\treturn $results;\n\t\t} else {\n\t\t\tif ($this->findMethods[$type] === true) {\n\t\t\t\treturn $this->{'_find' . ucfirst($type)}('after', $query, $results);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \u30a4\u30d9\u30f3\u30c8\u3092\u767a\u706b\n\t *\n\t * @param string $name\n\t * @param array $params\n\t * @return mixed\n\t */\n\tpublic function dispatchEvent($name, $params = [], $options = [])\n\t{\n\t\t$options = array_merge([\n\t\t\t'modParams' => 0,\n\t\t\t'plugin' => $this->plugin,\n\t\t\t'layer' => 'Model',\n\t\t\t'class' => $this->name\n\t\t], $options);\n\n\t\tApp::uses('BcEventDispatcher', 'Event');\n\t\treturn BcEventDispatcher::dispatch($name, $this, $params, $options);\n\t}\n\n\t/**\n\t * \u30c7\u30fc\u30bf\u304c\u516c\u958b\u6e08\u307f\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\t *\n\t * @param boolean $status \u516c\u958b\u30b9\u30c6\u30fc\u30bf\u30b9\n\t * @param string $publishBegin \u516c\u958b\u958b\u59cb\u65e5\u6642\n\t * @param string $publishEnd \u516c\u958b\u7d42\u4e86\u65e5\u6642\n\t * @return bool\n\t */\n\tpublic function isPublish($status, $publishBegin, $publishEnd)\n\t{\n\t\t$Content = ClassRegistry::init('Content');\n\t\treturn $Content->isPublish($status, $publishBegin, $publishEnd);\n\t}\n\n\t/**\n\t * \u65e5\u4ed8\u306e\u6b63\u5f53\u6027\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u78ba\u8a8d\u3059\u308b\u5024\n\t * @return boolean\n\t */\n\tpublic function checkDate($check)\n\t{\n\t\t$value = $check[key($check)];\n\t\tif (!$value) {\n\t\t\treturn true;\n\t\t}\n\t\t$time = '';\n\t\tif (strpos($value, ' ') !== false) {\n\t\t\tlist($date, $time) = explode(' ', $value);\n\t\t} else {\n\t\t\t$date = $value;\n\t\t}\n\t\tif (DS != '\\\\') {\n\t\t\tif ($time) {\n\t\t\t\tif (!strptime($value, '%Y-%m-%d %H:%M')) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!strptime($value, '%Y-%m-%d')) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlist($Y, $m, $d) = explode('-', $date);\n\t\tif (checkdate($m, $d, $Y) !== true) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($time) {\n\t\t\tif (strpos($value, ':') !== false) {\n\t\t\t\tlist($H, $i) = explode(':', $time);\n\t\t\t\tif (checktime($H, $i) !== true) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (date('Y-m-d H:i:s', strtotime($value)) == '1970-01-01 09:00:00') {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30c4\u30ea\u30fc\u3088\u308a\u518d\u5e30\u7684\u306b\u524a\u9664\u3059\u308b\n\t *\n\t * @param int $id\n\t * @return boolean\n\t */\n\tpublic function removeFromTreeRecursive($id)\n\t{\n\t\tif (!$this->Behaviors->enabled('Tree')) {\n\t\t\treturn false;\n\t\t}\n\t\t$children = $this->children($id);\n\t\tforeach($children as $child) {\n\t\t\t$this->removeFromTree($child[$this->alias]['id'], true);\n\t\t}\n\t\treturn $this->removeFromTree($id, true);\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u304c\u9001\u4fe1\u3055\u308c\u305f\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n\t *\n\t * @param array $check\n\t * @return boolean\n\t */\n\tpublic function notFileEmpty($check)\n\t{\n\t\tif (empty($check[key($check)]) || (is_array($check[key($check)]) && $check[key($check)]['size'] === 0)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function exists($id = null)\n\t{\n\t\tif ($this->Behaviors->loaded('SoftDelete')) {\n\t\t\treturn $this->existsAndNotDeleted($id);\n\t\t} else {\n\t\t\treturn parent::exists($id);\n\t\t}\n\t}\n\n\tpublic function delete($id = null, $cascade = true)\n\t{\n\t\t$result = parent::delete($id, $cascade);\n\t\tif ($result === false && $this->Behaviors->enabled('SoftDelete')) {\n\t\t\t$this->getEventManager()->dispatch(new CakeEvent('Model.afterDelete', $this));\n\t\t\treturn (bool)$this->field('deleted', ['deleted' => 1]);\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function dataIter(&$results, $callback)\n\t{\n\t\tif (!$isVector = isset($results[0])) {\n\t\t\t$results = [$results];\n\t\t}\n\t\t$modeled = array_key_exists($this->alias, $results[0]);\n\t\tforeach($results as &$value) {\n\t\t\tif (!$modeled) {\n\t\t\t\t$value = [$this->alias => $value];\n\t\t\t}\n\t\t\t$continue = $callback($value, $this);\n\t\t\tif (!$modeled) {\n\t\t\t\t$value = $value[$this->alias];\n\t\t\t}\n\t\t\tif (!is_null($continue) && !$continue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$isVector) {\n\t\t\t$results = $results[0];\n\t\t}\n\t}\n\n\t/**\n\t * \u6307\u5b9a\u3057\u305f\u65e5\u4ed8\u3088\u308a\u3082\u65b0\u3057\u3044\u65e5\u4ed8\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\t *\n\t * @param $check\n\t * @param $target\n\t * @return bool\n\t * @unittest yet\n\t */\n\tpublic function checkDateAfterThan($check, $target)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\tif ($check && !empty($this->data[$this->alias][$target])) {\n\t\t\tif (strtotime($check) <= strtotime($this->data[$this->alias][$target])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30b3\u30f3\u30c6\u30f3\u30c4\u306eURL\u306b\u30de\u30c3\u30c1\u3059\u308b\u5019\u88dc\u3092\u53d6\u5f97\u3059\u308b\n\t *\n\t * @param $url\n\t * @return array\n\t */\n\tpublic function getUrlPattern($url)\n\t{\n\t\t$parameter = preg_replace('/^\\//', '', $url);\n\t\t$paths = [];\n\t\t$paths[] = '/' . $parameter;\n\t\tif (preg_match('/\\/$/', $paths[0])) {\n\t\t\t$paths[] = $paths[0] . 'index';\n\t\t} elseif (preg_match('/^(.*?\\/)index$/', $paths[0], $matches)) {\n\t\t\t$paths[] = $matches[1];\n\t\t} elseif (preg_match('/^(.+?)\\.html$/', $paths[0], $matches)) {\n\t\t\t$paths[] = $matches[1];\n\t\t\tif (preg_match('/^(.*?\\/)index$/', $matches[1], $matches)) {\n\t\t\t\t$paths[] = $matches[1];\n\t\t\t}\n\t\t}\n\t\treturn $paths;\n\t}\n\n\t/**\n\t * \u30ec\u30b3\u30fc\u30c9\u30c7\u30fc\u30bf\u306e\u6d88\u6bd2\u3092\u304a\u3053\u306a\u3046\n\t * @return array\n\t * @deprecated 5.0.0 since 4.1.3 htmlspecialchars \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\t */\n\tpublic function sanitizeRecord($record)\n\t{\n\t\ttrigger_error(deprecatedMessage('\u30e1\u30bd\u30c3\u30c9\uff1aBcAppModel::sanitizeRecord()', '4.0.0', '5.0.0', 'htmlspecialchars \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002'), E_USER_DEPRECATED);\n\t\tforeach($record as $key => $value) {\n\t\t\t$record[$key] = $this->sanitize($value);\n\t\t}\n\t\treturn $record;\n\t}\n\n\t/**\n\t * \u5358\u4f53\u30c7\u30fc\u30bf\u306e\u6d88\u6bd2\u3092\u884c\u3046\n\t * \u914d\u5217\u306b\u306f\u5bfe\u5fdc\u3057\u306a\u3044\n\t * @param $data\n\t * @return mixed|string\n\t * @deprecated 5.0.0 since 4.1.3 htmlspecialchars \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\t */\n\tpublic function sanitize($value)\n\t{\n\t\ttrigger_error(deprecatedMessage('\u30e1\u30bd\u30c3\u30c9\uff1aBcAppModel::sanitizeRecord()', '4.0.0', '5.0.0', 'htmlspecialchars \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002'), E_USER_DEPRECATED);\n\t\tif (!is_array($value)) {\n\t\t\t// \u65e2\u306b htmlspecialchars \u3092\u5b9f\u884c\u6e08\u306e\u3082\u306e\u306b\u3064\u3044\u3066\u4e00\u65e6\u5143\u306e\u5f62\u5f0f\u306b\u5fa9\u5143\u3057\u305f\u4e0a\u3067\u518d\u5ea6\u30b5\u30a4\u30cb\u30bf\u30a4\u30ba\u51e6\u7406\u3092\u304b\u3051\u308b\u3002\n\t\t\t$value = str_replace(\"&lt;!--\", \"<!--\", $value);\n\t\t\t$value = htmlspecialchars($value);\n\t\t\treturn $value;\n\t\t} else {\n\t\t\treturn $value;\n\t\t}\n\t}\n\n\t/**\n\t * \u30b9\u30af\u30ea\u30d7\u30c8\u304c\u304c\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\t * - \u7ba1\u7406\u30b0\u30eb\u30fc\u30d7\u306e\u5834\u5408\u306f\u7121\u6761\u4ef6\u306b true \u3092\u8fd4\u5374\n\t * - \u7ba1\u7406\u30b0\u30eb\u30fc\u30d7\u4ee5\u5916\u306e\u5834\u5408\u306b\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u7121\u6761\u4ef6\u306b true \u3092\u8fd4\u5374\n\t * @param array $check\n\t * @return bool\n\t */\n\tpublic function containsScript($check)\n\t{\n\t\t$events = ['onclick', 'ondblclick', 'onmousedown', 'onmouseup', 'onmouseover', 'onmousemove',\n\t\t\t'onmouseout', 'onkeypress', 'onkeydown', 'onkeyup', 'onload', 'onunload',\n\t\t\t'onfocus', 'onblur', 'onsubmit', 'onreset', 'onselect', 'onchange'];\n\t\tif (BcUtil::isAdminUser() || Configure::read('BcApp.allowedPhpOtherThanAdmins')) {\n\t\t\treturn true;\n\t\t}\n\t\t$value = $check[key($check)];\n\t\tif (preg_match('/(<\\?=|<\\?php|<script)/i', $value)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (preg_match('/<[^>]+?(' . implode('|', $events) . ')\\s*=[^<>]*?>/i', $value)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (preg_match('/href\\s*=\\s*[^>]*?javascript\\s*?:/i', $value)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30b5\u30a4\u30ba\u306e\u5358\u4f4d\u3092\u5909\u63db\u3059\u308b\n\t * @param string $size \u5909\u63db\u524d\u306e\u30b5\u30a4\u30ba\n\t * @param string $outExt \u5909\u63db\u5f8c\u306e\u5358\u4f4d\n\t * @param string $inExt \u5909\u63db\u5143\u306e\u5358\u4f4d\n\t * @return int            \u5909\u63db\u5f8c\u306e\u30b5\u30a4\u30ba\n\t */\n\tpublic function convertSize($size, $outExt = 'B', $inExt = null)\n\t{\n\t\tpreg_match('/\\A\\d+(\\.\\d+)?/', $size, $num);\n\t\t$sizeNum = (isset($num[0]))? $num[0] : 0;\n\n\t\t$extArray = ['B', 'K', 'M', 'G', 'T'];\n\t\t$extRegex = implode('|', $extArray);\n\t\tif (empty($inExt)) {\n\t\t\t$inExt = (preg_match(\"/($extRegex)B?\\z/i\", $size, $ext))? strtoupper($ext[1]) : 'B';\n\t\t}\n\t\t$inExt = (preg_match(\"/\\A($extRegex)B?\\z/i\", $inExt, $ext))? strtoupper($ext[1]) : 'B';\n\t\t$outExt = (preg_match(\"/\\A($extRegex)B?\\z/i\", $outExt, $ext))? strtoupper($ext[1]) : 'B';\n\n\t\t$index = array_search($inExt, $extArray) - array_search($outExt, $extArray);\n\n\t\t$outSize = pow(1024, $index) * $sizeNum;\n\t\treturn $outSize;\n\t}\n\n\t/**\n\t * \u9001\u4fe1\u3055\u308c\u305fPOST\u304cpost_max_size\u3092\u8d85\u3048\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\t * @return boolean\n\t */\n\tpublic function isOverPostSize()\n\t{\n\t\tif (empty($_POST) &&\n\t\t\tenv('REQUEST_METHOD') === 'POST' &&\n\t\t\tenv('CONTENT_LENGTH') > $this->convertSize(ini_get('post_max_size'))) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u516c\u958b\u6e08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e conditions \u3092\u751f\u6210\u53d6\u5f97\n\t *\n\t * @return array array\n\t */\n\tpublic function getConditionAllowPublish()\n\t{\n\t\t$conditions[$this->alias . '.' . $this->publishStatusField] = true;\n\t\t$conditions[] = ['or' => [[$this->alias . '.' . $this->publishBeginField . ' <=' => date('Y-m-d H:i:s')],\n\t\t\t[$this->alias . '.' . $this->publishBeginField => null]]];\n\t\t$conditions[] = ['or' => [[$this->alias . '.' . $this->publishEndField . ' >=' => date('Y-m-d H:i:s')],\n\t\t\t[$this->alias . '.' . $this->publishEndField => null]]];\n\t\treturn $conditions;\n\t}\n\n}\n"], "fixing_code": ["<?php\n/**\n * baserCMS :  Based Website Development Project <https://basercms.net>\n * Copyright (c) baserCMS Users Community <https://basercms.net/community/>\n *\n * @copyright       Copyright (c) baserCMS Users Community\n * @link            https://basercms.net baserCMS Project\n * @package         Baser.Model\n * @since           baserCMS v 0.1.0\n * @license         https://basercms.net/license/index.html\n */\n\nApp::uses('Sanitize', 'Utility');\nApp::uses('Folder', 'Utility');\nApp::uses('Model', 'Model');\nApp::uses('Dblog', 'Model');\nApp::uses('AppController', 'Controller');\n\n/**\n * Class BcAppModel\n *\n * Model \u62e1\u5f35\u30af\u30e9\u30b9\n *\n * \u65e2\u5b58\u306eCakePHP\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3001\u8a2d\u7f6e\u6e08\u306eAppModel\u3068\u5171\u5b58\u3067\u304d\u308b\u3088\u3046\u306b\u3001AppModel\u3068\u306f\u5225\u306b\u3057\u305f\u3002\n *\n * @package Baser.Model\n * @property Content $Content\n * @property BehaviorCollection $Behaviors\n */\nclass BcAppModel extends Model\n{\n\n\t/**\n\t * DB\u63a5\u7d9a\u8a2d\u5b9a\u540d\n\t *\n\t * @var string\n\t */\n\tpublic $useDbConfig = 'default';\n\n\t/**\n\t * \u516c\u958b\u72b6\u614b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\n\t * BcAppModel::getConditionAllowPublish() \u3067\u5229\u7528\n\t * @var string\n\t */\n\tpublic $publishStatusField = 'status';\n\t/**\n\t * \u516c\u958b\u958b\u59cb\u65e5\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\n\t * BcAppModel::getConditionAllowPublish() \u3067\u5229\u7528\n\t * @var string\n\t */\n\tpublic $publishBeginField = 'publish_begin';\n\n\t/**\n\t * \u516c\u958b\u7d42\u4e86\u65e5\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\n\t * BcAppModel::getConditionAllowPublish() \u3067\u5229\u7528\n\t * @var string\n\t */\n\tpublic $publishEndField = 'publish_end';\n\n\t/**\n\t * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\t *\n\t * @return    void\n\t */\n\tpublic function __construct($id = false, $table = null, $ds = null)\n\t{\n\t\t$db = ConnectionManager::getDataSource('default');\n\t\tif (Configure::read('BcRequest.asset')) {\n\t\t\tparent::__construct($id, $table, $ds);\n\t\t\treturn;\n\t\t}\n\t\t$request = new CakeRequest();\n\t\tif (isset($db->config['datasource'])) {\n\t\t\tif ($db->config['datasource'] != '') {\n\t\t\t\t// @deprecated 5.0.0 since 4.0.0\n\t\t\t\tif ($this->useDbConfig == 'plugin') {\n\t\t\t\t\t$this->useDbConfig = 'default';\n\t\t\t\t\t$this->log(sprintf(__d('baser', '\u30e2\u30c7\u30eb\uff1a%s BcPluginAppModel\u306e \u7d99\u627f\u306f\u3001\u30d0\u30fc\u30b8\u30e7\u30f3 4.0.0 \u3088\u308a\u975e\u63a8\u5968\u3068\u306a\u308a\u307e\u3057\u305f\u3002\u30d0\u30fc\u30b8\u30e7\u30f3 5.0.0 \u3067 BcPluginAppModel \u306f\u524a\u9664\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002\u30d7\u30e9\u30b0\u30a4\u30f3\u306f AppModel \u3092\u76f4\u63a5\u7d99\u627f\u3057\u3066\u304f\u3060\u3055\u3044\u3002'), $this->name), LOG_ALERT);\n\t\t\t\t}\n\t\t\t\tparent::__construct($id, $table, $ds);\n\t\t\t} elseif ($db->config['login'] == 'dummy' &&\n\t\t\t\t$db->config['password'] == 'dummy' &&\n\t\t\t\t$db->config['database'] == 'dummy' &&\n\t\t\t\t$request->url === false) {\n\t\t\t\t// \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6bb5\u968e\u306e\u72b6\u614b\u3067\u30c8\u30c3\u30d7\u30da\u30fc\u30b8\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306e\u5834\u5408\u3001\n\t\t\t\t// \u521d\u671f\u5316\u30da\u30fc\u30b8\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\n\t\t\t\t$AppController = new AppController();\n\t\t\t\tsession_start();\n\t\t\t\t$_SESSION['Message']['flash'] = ['message' => __d('baser', '\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u5931\u6557\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002<br />\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u6700\u521d\u304b\u3089\u3084\u308a\u76f4\u3059\u306b\u306fbaserCMS\u3092\u521d\u671f\u5316\u3057\u3066\u304f\u3060\u3055\u3044\u3002'), 'layout' => 'default'];\n\t\t\t\t$AppController->redirect(BC_BASE_URL . 'installations/reset');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * beforeSave\n\t *\n\t * @return    boolean\n\t */\n\tpublic function beforeSave($options = [])\n\t{\n\t\t$result = parent::beforeSave($options);\n\t\t// \u65e5\u4ed8\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u7a7a\u306e\u5834\u5408\u3001null\u3092\u4fdd\u5b58\u3059\u308b\n\t\tforeach($this->_schema as $key => $field) {\n\t\t\tif (('date' == $field['type'] ||\n\t\t\t\t\t'datetime' == $field['type'] ||\n\t\t\t\t\t'time' == $field['type']) &&\n\t\t\t\tisset($this->data[$this->name][$key])) {\n\t\t\t\tif ($this->data[$this->name][$key] == '') {\n\t\t\t\t\t$this->data[$this->name][$key] = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Saves model data to the database. By default, validation occurs before save.\n\t *\n\t * @param array $data Data to save.\n\t * @param boolean $validate If set, validation will be done before the save\n\t * @param array $fieldList List of fields to allow to be written\n\t * @return    mixed    On success Model::$data if its not empty or true, false on failure\n\t */\n\tpublic function save($data = null, $validate = true, $fieldList = [])\n\t{\n\t\tif (!$data) {\n\t\t\t$data = $this->data;\n\t\t}\n\n\t\t// created,modified\u304c\u66f4\u65b0\u3055\u308c\u306a\u3044\u30d0\u30b0\uff1f\u5bfe\u5fdc\n\t\tif (!$this->exists()) {\n\t\t\tif (isset($data[$this->alias])) {\n\t\t\t\t$data[$this->alias]['created'] = null;\n\t\t\t} else {\n\t\t\t\t$data['created'] = null;\n\t\t\t}\n\t\t}\n\t\tif (isset($data[$this->alias])) {\n\t\t\t$data[$this->alias]['modified'] = null;\n\t\t} else {\n\t\t\t$data['modified'] = null;\n\t\t}\n\n\t\treturn parent::save($data, $validate, $fieldList);\n\t}\n\n\t/**\n\t * \u914d\u5217\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u5909\u63db\u3059\u308b\n\t *\n\t * TODO GLOBAL \u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u95a2\u6570\u3068\u3057\u3066\u518d\u914d\u7f6e\u3059\u308b\u5fc5\u8981\u3042\u308a\n\t *\n\t * @param array $data \u5909\u63db\u524d\u306e\u30c7\u30fc\u30bf\n\t * @param string $outenc \u5909\u63db\u5f8c\u306e\u6587\u5b57\u30b3\u30fc\u30c9\n\t * @param string $inenc \u5909\u63db\u5143\u306e\u6587\u5b57\u30b3\u30fc\u30c9\n\t * @return array \u5909\u63db\u5f8c\u306e\u30c7\u30fc\u30bf\n\t */\n\tpublic function convertEncodingByArray($data, $outenc, $inenc)\n\t{\n\t\tforeach($data as $key => $value) {\n\t\t\tif (is_array($value)) {\n\t\t\t\t$data[$key] = $this->convertEncodingByArray($value, $outenc, $inenc);\n\t\t\t} else {\n\t\t\t\tif (mb_detect_encoding($value) <> $outenc) {\n\t\t\t\t\t$data[$key] = mb_convert_encoding($value, $outenc, $inenc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30ed\u30b0\u3092\u8a18\u9332\u3059\u308b\n\t *\n\t * @param string $message\n\t * @return    boolean\n\t */\n\tpublic function saveDbLog($message)\n\t{\n\t\t// \u30ed\u30b0\u3092\u8a18\u9332\u3059\u308b\n\t\t$Dblog = ClassRegistry::init('Dblog');\n\t\t$logdata['Dblog']['name'] = $message;\n\t\t$userId = null;\n\t\tif (!empty($_SESSION['Auth'][Configure::read('BcAuthPrefix.admin.sessionKey')]['id'])) {\n\t\t\t$userId = $_SESSION['Auth'][Configure::read('BcAuthPrefix.admin.sessionKey')]['id'];\n\t\t}\n\t\t$logdata['Dblog']['user_id'] = $userId;\n\t\treturn $Dblog->save($logdata);\n\t}\n\n\t/**\n\t * \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3059\u308b\n\t *\n\t * \u7d99\u627f\u5148\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u4e8b\n\t *\n\t * @return    array\n\t */\n\tpublic function getControlSource($field)\n\t{\n\t\treturn [];\n\t}\n\n\t/**\n\t * \u5b50\u30ab\u30c6\u30b4\u30ea\u306eID\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\n\t *\n\t * tree\u30d3\u30d8\u30a4\u30d3\u30a2\u8981\n\t *\n\t * @param mixed $id \u30da\u30fc\u30b8\u30ab\u30c6\u30b4\u30ea\u30fcID\n\t * @return    array\n\t */\n\tpublic function getChildIdsList($id)\n\t{\n\t\t$ids = [];\n\t\tif ($this->childCount($id)) {\n\t\t\t$children = $this->children($id);\n\t\t\tforeach($children as $child) {\n\t\t\t\t$ids[] = (int)$child[$this->name]['id'];\n\t\t\t}\n\t\t}\n\t\treturn $ids;\n\t}\n\n\t/**\n\t * \u6a5f\u7a2e\u4f9d\u5b58\u6587\u5b57\u306e\u5909\u63db\u51e6\u7406\n\t *\n\t * \u5185\u90e8\u6587\u5b57\u30b3\u30fc\u30c9\u304cUTF-8\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\t * \u591a\u6b21\u5143\u914d\u5217\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3002\n\t *\n\t * @param string    \u5909\u63db\u5bfe\u8c61\u6587\u5b57\u5217\n\t * @return    string    \u5909\u63db\u5f8c\u6587\u5b57\u5217\n\t * TODO AppExMode\u306b\u79fb\u884c\u3059\u3079\u304d\u304b\u3082\n\t */\n\tpublic function replaceText($str)\n\t{\n\t\t$ret = $str;\n\t\t$arr = [\n\t\t\t\"\\xE2\\x85\\xA0\" => \"I\",\n\t\t\t\"\\xE2\\x85\\xA1\" => \"II\",\n\t\t\t\"\\xE2\\x85\\xA2\" => \"III\",\n\t\t\t\"\\xE2\\x85\\xA3\" => \"IV\",\n\t\t\t\"\\xE2\\x85\\xA4\" => \"V\",\n\t\t\t\"\\xE2\\x85\\xA5\" => \"VI\",\n\t\t\t\"\\xE2\\x85\\xA6\" => \"VII\",\n\t\t\t\"\\xE2\\x85\\xA7\" => \"VIII\",\n\t\t\t\"\\xE2\\x85\\xA8\" => \"IX\",\n\t\t\t\"\\xE2\\x85\\xA9\" => \"X\",\n\t\t\t\"\\xE2\\x85\\xB0\" => \"i\",\n\t\t\t\"\\xE2\\x85\\xB1\" => \"ii\",\n\t\t\t\"\\xE2\\x85\\xB2\" => \"iii\",\n\t\t\t\"\\xE2\\x85\\xB3\" => \"iv\",\n\t\t\t\"\\xE2\\x85\\xB4\" => \"v\",\n\t\t\t\"\\xE2\\x85\\xB5\" => \"vi\",\n\t\t\t\"\\xE2\\x85\\xB6\" => \"vii\",\n\t\t\t\"\\xE2\\x85\\xB7\" => \"viii\",\n\t\t\t\"\\xE2\\x85\\xB8\" => \"ix\",\n\t\t\t\"\\xE2\\x85\\xB9\" => \"x\",\n\t\t\t\"\\xE2\\x91\\xA0\" => \"(1)\",\n\t\t\t\"\\xE2\\x91\\xA1\" => \"(2)\",\n\t\t\t\"\\xE2\\x91\\xA2\" => \"(3)\",\n\t\t\t\"\\xE2\\x91\\xA3\" => \"(4)\",\n\t\t\t\"\\xE2\\x91\\xA4\" => \"(5)\",\n\t\t\t\"\\xE2\\x91\\xA5\" => \"(6)\",\n\t\t\t\"\\xE2\\x91\\xA6\" => \"(7)\",\n\t\t\t\"\\xE2\\x91\\xA7\" => \"(8)\",\n\t\t\t\"\\xE2\\x91\\xA8\" => \"(9)\",\n\t\t\t\"\\xE2\\x91\\xA9\" => \"(10)\",\n\t\t\t\"\\xE2\\x91\\xAA\" => \"(11)\",\n\t\t\t\"\\xE2\\x91\\xAB\" => \"(12)\",\n\t\t\t\"\\xE2\\x91\\xAC\" => \"(13)\",\n\t\t\t\"\\xE2\\x91\\xAD\" => \"(14)\",\n\t\t\t\"\\xE2\\x91\\xAE\" => \"(15)\",\n\t\t\t\"\\xE2\\x91\\xAF\" => \"(16)\",\n\t\t\t\"\\xE2\\x91\\xB0\" => \"(17)\",\n\t\t\t\"\\xE2\\x91\\xB1\" => \"(18)\",\n\t\t\t\"\\xE2\\x91\\xB2\" => \"(19)\",\n\t\t\t\"\\xE2\\x91\\xB3\" => \"(20)\",\n\t\t\t\"\\xE3\\x8A\\xA4\" => \"(\u4e0a)\",\n\t\t\t\"\\xE3\\x8A\\xA5\" => \"(\u4e2d)\",\n\t\t\t\"\\xE3\\x8A\\xA6\" => \"(\u4e0b)\",\n\t\t\t\"\\xE3\\x8A\\xA7\" => \"(\u5de6)\",\n\t\t\t\"\\xE3\\x8A\\xA8\" => \"(\u53f3)\",\n\t\t\t\"\\xE3\\x8D\\x89\" => \"\u30df\u30ea\",\n\t\t\t\"\\xE3\\x8D\\x8D\" => \"\u30e1\u30fc\u30c8\u30eb\",\n\t\t\t\"\\xE3\\x8C\\x94\" => \"\u30ad\u30ed\",\n\t\t\t\"\\xE3\\x8C\\x98\" => \"\u30b0\u30e9\u30e0\",\n\t\t\t\"\\xE3\\x8C\\xA7\" => \"\u30c8\u30f3\",\n\t\t\t\"\\xE3\\x8C\\xA6\" => \"\u30c9\u30eb\",\n\t\t\t\"\\xE3\\x8D\\x91\" => \"\u30ea\u30c3\u30c8\u30eb\",\n\t\t\t\"\\xE3\\x8C\\xAB\" => \"\u30d1\u30fc\u30bb\u30f3\u30c8\",\n\t\t\t\"\\xE3\\x8C\\xA2\" => \"\u30bb\u30f3\u30c1\",\n\t\t\t\"\\xE3\\x8E\\x9D\" => \"cm\",\n\t\t\t\"\\xE3\\x8E\\x8F\" => \"kg\",\n\t\t\t\"\\xE3\\x8E\\xA1\" => \"m2\",\n\t\t\t\"\\xE3\\x8F\\x8D\" => \"K.K.\",\n\t\t\t\"\\xE2\\x84\\xA1\" => \"TEL\",\n\t\t\t\"\\xE2\\x84\\x96\" => \"No.\",\n\t\t\t\"\\xE3\\x8B\\xBF\" => \"\u4ee4\u548c\",\n\t\t\t\"\\xE3\\x8D\\xBB\" => \"\u5e73\u6210\",\n\t\t\t\"\\xE3\\x8D\\xBC\" => \"\u662d\u548c\",\n\t\t\t\"\\xE3\\x8D\\xBD\" => \"\u5927\u6b63\",\n\t\t\t\"\\xE3\\x8D\\xBE\" => \"\u660e\u6cbb\",\n\t\t\t\"\\xE3\\x88\\xB1\" => \"(\u682a)\",\n\t\t\t\"\\xE3\\x88\\xB2\" => \"(\u6709)\",\n\t\t\t\"\\xE3\\x88\\xB9\" => \"(\u4ee3)\",\n\t\t];\n\n\t\treturn str_replace(array_keys($arr), array_values($arr), $str);\n\t}\n\n\t/**\n\t * \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u521d\u671f\u5316\n\t *\n\t * \u65e2\u306b\u5b58\u5728\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306f\u4e0a\u66f8\u304d\u3057\u306a\u3044\n\t *\n\t * @param array    \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u540d\n\t * @param string    \u30d7\u30e9\u30b0\u30a4\u30f3\u540d\n\t * @return    boolean\n\t */\n\tpublic function initDb($pluginName = '', $options = [])\n\t{\n\t\t$options = array_merge([\n\t\t\t'loadCsv' => true,\n\t\t\t'filterTable' => '',\n\t\t\t'filterType' => '',\n\t\t\t'dbDataPattern' => ''\n\t\t], $options);\n\n\t\t// \u521d\u671f\u30c7\u30fc\u30bf\u30d5\u30a9\u30eb\u30c0\u3092\u8d70\u67fb\n\t\tif (!$pluginName) {\n\t\t\t$path = BASER_CONFIGS . 'Schema';\n\t\t} else {\n\t\t\t$path = BcUtil::getSchemaPath($pluginName);\n\t\t\tif (!$path) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t$dbDataPattern = null;\n\t\tif (!empty($options['dbDataPattern'])) {\n\t\t\t$dbDataPattern = $options['dbDataPattern'];\n\t\t} elseif (!empty($_SESSION['dbDataPattern'])) {\n\t\t\t$dbDataPattern = $_SESSION['dbDataPattern'];\n\t\t\tunset($_SESSION['dbDataPattern']);\n\t\t}\n\t\tif ($this->loadSchema($this->useDbConfig, $path, $options['filterTable'], $options['filterType'], [], $dropField = false)) {\n\t\t\tif ($options['loadCsv']) {\n\t\t\t\t$theme = $pattern = null;\n\t\t\t\tif ($dbDataPattern) {\n\t\t\t\t\tlist($theme, $pattern) = explode('.', $dbDataPattern);\n\t\t\t\t}\n\t\t\t\t$path = BcUtil::getDefaultDataPath($pluginName, $theme, $pattern);\n\t\t\t\tif ($path) {\n\t\t\t\t\treturn $this->loadCsv($this->useDbConfig, $path);\n\t\t\t\t} else {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u69cb\u9020\u3092\u5909\u66f4\u3059\u308b\n\t *\n\t * @param array    \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u540d\n\t * @param string    \u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\n\t * @param string    \u30c6\u30fc\u30d6\u30eb\u6307\u5b9a\n\t * @param string    \u66f4\u65b0\u30bf\u30a4\u30d7\u6307\u5b9a\n\t * @return    boolean\n\t */\n\tpublic function loadSchema($dbConfigName, $path, $filterTable = '', $filterType = '', $excludePath = [], $dropField = true)\n\t{\n\t\t// \u30c6\u30fc\u30d6\u30eb\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n\t\t$db = ConnectionManager::getDataSource($dbConfigName);\n\t\t$db->cacheSources = false;\n\t\t$listSources = $db->listSources();\n\t\t$prefix = $db->config['prefix'];\n\t\t$Folder = new Folder($path);\n\t\t$files = $Folder->read(true, true);\n\n\t\t$result = true;\n\n\t\tforeach($files[1] as $file) {\n\t\t\tif (in_array($file, $excludePath)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/^(.*?)\\.php$/', $file, $matches)) {\n\t\t\t\t$type = 'create';\n\t\t\t\t$table = $matches[1];\n\t\t\t\tif (preg_match('/^create_(.*?)\\.php$/', $file, $matches)) {\n\t\t\t\t\t$type = 'create';\n\t\t\t\t\t$table = $matches[1];\n\t\t\t\t\tif (in_array($prefix . $table, $listSources)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} elseif (preg_match('/^alter_(.*?)\\.php$/', $file, $matches)) {\n\t\t\t\t\t$type = 'alter';\n\t\t\t\t\t$table = $matches[1];\n\t\t\t\t\tif (!in_array($prefix . $table, $listSources)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} elseif (preg_match('/^drop_(.*?)\\.php$/', $file, $matches)) {\n\t\t\t\t\t$type = 'drop';\n\t\t\t\t\t$table = $matches[1];\n\t\t\t\t\tif (!in_array($prefix . $table, $listSources)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (in_array($prefix . $table, $listSources)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($filterTable && $filterTable != $table) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif ($filterType && $filterType != $type) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$tmpdir = TMP . 'schemas' . DS;\n\t\t\t\tcopy($path . DS . $file, $tmpdir . $table . '.php');\n\t\t\t\tif (!$db->loadSchema(['type' => $type, 'path' => $tmpdir, 'file' => $table . '.php', 'dropField' => $dropField])) {\n\t\t\t\t\t$result = false;\n\t\t\t\t}\n\t\t\t\t@unlink($tmpdir . $table . '.php');\n\t\t\t}\n\t\t}\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\tclearAllCache();\n\t\treturn $result;\n\t}\n\n\t/**\n\t * CSV\u3092\u8aad\u307f\u8fbc\u3080\n\t *\n\t * @param array    \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u8a2d\u5b9a\u540d\n\t * @param string    CSV\u30d1\u30b9\n\t * @param string    \u30c6\u30fc\u30d6\u30eb\u6307\u5b9a\n\t * @return    boolean\n\t */\n\tpublic function loadCsv($dbConfigName, $path, $options = [])\n\t{\n\t\t$options = array_merge([\n\t\t\t'filterTable' => ''\n\t\t], $options);\n\n\t\t// \u30c6\u30fc\u30d6\u30eb\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n\t\t$db = ConnectionManager::getDataSource($dbConfigName);\n\t\t$db->cacheSources = false;\n\t\t$listSources = $db->listSources();\n\t\t$prefix = $db->config['prefix'];\n\t\t$Folder = new Folder($path);\n\t\t$files = $Folder->read(true, true);\n\t\t$result = true;\n\t\tforeach($files[1] as $file) {\n\t\t\tif (preg_match('/^(.*?)\\.csv$/', $file, $matches)) {\n\t\t\t\t$table = $matches[1];\n\t\t\t\tif (in_array($prefix . $table, $listSources)) {\n\t\t\t\t\tif ($options['filterTable'] && $options['filterTable'] != $table) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!$db->loadCsv(['path' => $path . DS . $file, 'encoding' => 'auto'])) {\n\t\t\t\t\t\t$result = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\tclearAllCache();\n\t\treturn $result;\n\t}\n\n\t/**\n\t * \u6700\u77ed\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af\n\t * - \u5bfe\u8c61\u3068\u306a\u308b\u5024\u306e\u9577\u3055\u304c\u3001\u6307\u5b9a\u3057\u305f\u6700\u77ed\u5024\u3088\u308a\u9577\u3044\u5834\u5408\u3001true\u3092\u8fd4\u3059\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $min \u5024\u306e\u6700\u77ed\u5024\n\t * @return boolean\n\t */\n\tpublic function minLength($check, $min)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\t$length = mb_strlen($check, Configure::read('App.encoding'));\n\t\treturn ($length >= $min);\n\t}\n\n\t/**\n\t * \u6700\u9577\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af\n\t * - \u5bfe\u8c61\u3068\u306a\u308b\u5024\u306e\u9577\u3055\u304c\u3001\u6307\u5b9a\u3057\u305f\u6700\u9577\u5024\u3088\u308a\u77ed\u3044\u5834\u5408\u3001true\u3092\u8fd4\u3059\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $max \u5024\u306e\u6700\u9577\u5024\n\t * @param boolean\n\t */\n\tpublic function maxLength($check, $max)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\t$length = mb_strlen($check, Configure::read('App.encoding'));\n\t\treturn ($length <= $max);\n\t}\n\n\t/**\n\t * \u6700\u5927\u306e\u30d0\u30a4\u30c8\u6570\u30c1\u30a7\u30c3\u30af\n\t * - \u5bfe\u8c61\u3068\u306a\u308b\u5024\u306e\u30b5\u30a4\u30ba\u304c\u3001\u6307\u5b9a\u3057\u305f\u6700\u5927\u5024\u3088\u308a\u77ed\u3044\u5834\u5408\u3001true \u3092\u8fd4\u3059\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $max \u30d0\u30a4\u30c8\u6570\u306e\u6700\u5927\u5024\n\t * @return boolean\n\t */\n\tpublic function maxByte($check, $max)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\t$byte = strlen($check);\n\t\treturn ($byte <= $max);\n\t}\n\n\t/**\n\t * \u6700\u5927\u306e\u30d0\u30a4\u30c8\u6570\u30c1\u30a7\u30c3\u30af\n\t * - \u5bfe\u8c61\u3068\u306a\u308b\u5024\u306e\u30b5\u30a4\u30ba\u304c\u3001\u6307\u5b9a\u3057\u305f\u6700\u5927\u5024\u3088\u308a\u77ed\u3044\u5834\u5408\u3001true \u3092\u8fd4\u3059\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $max \u30d0\u30a4\u30c8\u6570\u306e\u6700\u5927\u5024\n\t * @return boolean\n\t */\n\tpublic function checkDateRenge($check, $begin, $end)\n\t{\n\t\tif (!empty($this->data[$this->alias][$begin]) &&\n\t\t\t!empty($this->data[$this->alias][$end])) {\n\t\t\tif (strtotime($this->data[$this->alias][$begin]) >=\n\t\t\t\tstrtotime($this->data[$this->alias][$end])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param mixed $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param int $min \u5024\u306e\u6700\u77ed\u5024\n\t * @param int $max \u5024\u306e\u6700\u9577\u5024\n\t * @param boolean\n\t */\n\tpublic function between($check, $min, $max)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\t$length = mb_strlen($check, Configure::read('App.encoding'));\n\t\treturn ($length >= $min && $length <= $max);\n\t}\n\n\t/**\n\t * \u6307\u5b9a\u30d5\u30a3\u30fc\u30eb\u30c9\u306eMAX\u5024\u3092\u53d6\u5f97\u3059\u308b\n\t *\n\t * \u73fe\u5728\u6570\u5024\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u307f\u5bfe\u5fdc\n\t *\n\t * @param string $field\n\t * @param array $conditions\n\t * @return int\n\t */\n\tpublic function getMax($field, $conditions = [])\n\t{\n\t\tif (strpos($field, '.') === false) {\n\t\t\t$modelName = $this->alias;\n\t\t} else {\n\t\t\tlist($modelName, $field) = explode('\\.', $field);\n\t\t}\n\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$this->recursive = -1;\n\t\tif ($db->config['datasource'] == 'Database/BcCsv') {\n\t\t\t// CSVDB\u306e\u5834\u5408\u306fMAX\u95a2\u6570\u304c\u5229\u7528\u3067\u304d\u306a\u3044\u70ba\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u51e6\u7406\u3059\u308b\n\t\t\t// TODO dbo\u3067MAX\u95a2\u6570\u306e\u5b9f\u88c5\u3067\u304d\u305f\u3089\u3053\u3053\u3082\u5909\u66f4\u3059\u308b\n\t\t\t$this->cacheQueries = false;\n\t\t\t$dbDatas = $this->find('all', ['conditions' => $conditions, 'fields' => [$modelName . '.' . $field]]);\n\t\t\t$this->cacheQueries = true;\n\t\t\t$max = 0;\n\t\t\tif ($dbDatas) {\n\t\t\t\tforeach($dbDatas as $dbData) {\n\t\t\t\t\tif ($max < $dbData[$modelName][$field]) {\n\t\t\t\t\t\t$max = $dbData[$modelName][$field];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $max;\n\t\t} else {\n\t\t\t$this->cacheQueries = false;\n\t\t\t// SQLite\u306e\u5834\u5408\u3001Max\u95a2\u6570\u306bmodel\u540d\u3092\u542b\u3080\u3068\u3001\u623b\u308a\u5024\u306e\u6dfb\u5b57\u304c\u5d29\u308c\u308b\uff08CakePHP\u306e\u30d0\u30b0\uff09\n\t\t\t$dbData = $this->find('all', ['conditions' => $conditions, 'fields' => ['MAX(' . $modelName . '.' . $field . ') AS max']]);\n\t\t\t$this->cacheQueries = true;\n\t\t\tif (isset($dbData[0][0]['max'])) {\n\t\t\t\treturn $dbData[0][0]['max'];\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \u30c6\u30fc\u30d6\u30eb\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u8ffd\u52a0\u3059\u308b\n\t *\n\t * @param array $options [ field / column / table ]\n\t * @return    boolean\n\t */\n\tpublic function addField($options)\n\t{\n\t\textract($options);\n\n\t\tif (!isset($field) || !isset($column)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!isset($table)) {\n\t\t\t$table = $this->useTable;\n\t\t}\n\n\t\t$this->_schema = null;\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$options = ['field' => $field, 'table' => $table, 'column' => $column];\n\t\t$ret = $db->addColumn($options);\n\t\t$this->deleteModelCache();\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \u30d5\u30a3\u30fc\u30eb\u30c9\u69cb\u9020\u3092\u5909\u66f4\u3059\u308b\n\t *\n\t * @param array $options [ field / column / table ]\n\t * @return    boolean\n\t */\n\tpublic function editField($options)\n\t{\n\t\textract($options);\n\n\t\tif (!isset($field) || !isset($column)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!isset($table)) {\n\t\t\t$table = $this->useTable;\n\t\t}\n\n\t\t$this->_schema = null;\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$options = ['field' => $field, 'table' => $table, 'column' => $column];\n\t\t$ret = $db->changeColumn($options);\n\t\t$this->deleteModelCache();\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u524a\u9664\u3059\u308b\n\t *\n\t * @param array $options [ field / table ]\n\t * @return    boolean\n\t */\n\tpublic function delField($options)\n\t{\n\t\textract($options);\n\n\t\tif (!isset($field)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!isset($table)) {\n\t\t\t$table = $this->useTable;\n\t\t}\n\n\t\t$this->_schema = null;\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$options = ['field' => $field, 'table' => $table];\n\t\t$ret = $db->dropColumn($options);\n\t\t$this->deleteModelCache();\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u5909\u66f4\u3059\u308b\n\t *\n\t * @param array $options [ new / old / table ]\n\t * @param array $column\n\t * @return boolean\n\t */\n\tpublic function renameField($options)\n\t{\n\t\textract($options);\n\n\t\tif (!isset($new) || !isset($old)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!isset($table)) {\n\t\t\t$table = $this->useTable;\n\t\t}\n\n\t\t$this->_schema = null;\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$options = ['new' => $new, 'old' => $old, 'table' => $table];\n\t\t$ret = $db->renameColumn($options);\n\t\t$this->deleteModelCache();\n\t\tClassRegistry::flush();\n\t\tBcSite::flash();\n\t\treturn $ret;\n\t}\n\n\t/**\n\t * \u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t * @param string $tableName\n\t * @return boolean\n\t */\n\tpublic function tableExists($tableName)\n\t{\n\t\t$db = ConnectionManager::getDataSource($this->useDbConfig);\n\t\t$db->cacheSources = false;\n\t\t$tables = $db->listSources();\n\t\treturn in_array($tableName, $tables);\n\t}\n\n\t/**\n\t * \u82f1\u6570\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param string    \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u6587\u5b57\u5217\n\t * @return    boolean\n\t */\n\tpublic function alphaNumeric($check)\n\t{\n\t\tif (!$check[key($check)]) {\n\t\t\treturn true;\n\t\t}\n\t\tif (preg_match(\"/^[a-zA-Z0-9]+$/\", $check[key($check)])) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u82f1\u6570\u30c1\u30a7\u30c3\u30af\u30d7\u30e9\u30b9\n\t *\n\t * \u30cf\u30a4\u30d5\u30f3\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3092\u8a31\u5bb9\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u6587\u5b57\u5217\n\t * @param array $options \u4ed6\u306b\u8a31\u5bb9\u3059\u308b\u6587\u5b57\u5217\n\t * @return boolean\n\t */\n\tpublic function alphaNumericPlus($check, $options = [])\n\t{\n\t\tif (!$check[key($check)]) {\n\t\t\treturn true;\n\t\t}\n\t\tif ($options && !array_key_exists('rule', $options)) {\n\t\t\tif (!is_array($options)) {\n\t\t\t\t$options = [$options];\n\t\t\t}\n\t\t\t$options = preg_quote(implode('', $options), '/');\n\t\t} else {\n\t\t\t$options = '';\n\t\t}\n\n\t\tif (preg_match(\"/^[a-zA-Z0-9\\-_\" . $options . \"]+$/\", $check[key($check)])) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u524a\u9664\u6587\u5b57\u30c1\u30a7\u30c3\u30af\n\t *\n\t * BcUtile::urlencode \u3067\u3001\u524a\u9664\u3055\u308c\u308b\u6587\u5b57\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af(\u7d50\u679c\u30d6\u30e9\u30f3\u30af\u306b\u306a\u308b\u305f\u3081notBlank\u306b\u306a\u308b\u78ba\u8a8d)\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u6587\u5b57\u5217\n\t * @return boolean\n\t */\n\tpublic function bcUtileUrlencodeBlank($check)\n\t{\n\t\tif (!$check[key($check)]) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (preg_match(\"/^[\\\\'\\|`\\^\\\"\\(\\)\\{\\}\\[\\];\\/\\?:@&=\\+\\$,%<>#! \u3000]+$/\", $check[key($check)])) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * \u30c7\u30fc\u30bf\u306e\u91cd\u8907\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\n\t * @param array $check\n\t * @return boolean false \u91cd\u8907\u3042\u308a / true \u91cd\u8907\u306a\u3057\n\t */\n\tpublic function duplicate($check)\n\t{\n\t\t$conditions = [$this->alias . '.' . key($check) => $check[key($check)]];\n\t\tif ($this->exists()) {\n\t\t\t$conditions['NOT'] = [$this->alias . '.' . $this->primaryKey => $this->id];\n\t\t}\n\t\t$ret = $this->find('first', ['conditions' => $conditions]);\n\t\tif ($ret) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30c7\u30fc\u30bf\n\t * @param int $size \u6700\u5927\u306e\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\n\t * @deprecated 5.0.0 since 4.1.0.2 \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\u306b\u52a0\u3048\u3066\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6642\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u30ed\u30b0\u306b\u53d6\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\n\t */\n\tpublic function fileSize($check, $size)\n\t{\n\n\t\t$this->log(deprecatedMessage(\n\t\t\t__d('baser', '\u30e1\u30bd\u30c3\u30c9\uff1aBcAppModel::fileSize()'), '4.1.0.2', '5.0.0', __d('baser', 'BcAppModel::fileCheck() \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002')\n\t\t), LOG_ALERT);\n\t\t$file = $check[key($check)];\n\t\tif (!empty($file['name'])) {\n\t\t\t// \u30b5\u30a4\u30ba\u304c\u7a7a\u306e\u5834\u5408\u306f\u3001HTML\u306eMAX_FILE_SIZE\u306e\u5236\u9650\u306b\u3088\u308a\u30b5\u30a4\u30ba\u30aa\u30fc\u30d0\u30fc\n\t\t\t// \u3060\u304c\u3001post_max_size \u3092\u8d85\u3048\u305f\u5834\u5408\u306f\u3001\u3053\u3053\u307e\u3067\u51e6\u7406\u304c\u3053\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308b\n\t\t\tif (!$file['size']) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif ($file['size'] > $size) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30c7\u30fc\u30bf\n\t * @param int $size \u6700\u5927\u306e\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\n\t * @link http://php.net/manual/ja/features.file-upload.errors.php\n\t */\n\tpublic function fileCheck($check, $size)\n\t{\n\t\t// post_max_size \u30aa\u30fc\u30d0\u30fc\u30c1\u30a7\u30c3\u30af\n\t\t// POST\u3092\u524d\u63d0\u306e\u691c\u8a3c\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u5168\u3066\u306e\u53d7\u4fe1\u30c7\u30fc\u30bf\u3092\u691c\u8a3c\n\t\t// \u30c7\u30fc\u30bf\u306e\u66f4\u65b0\u6642\u306f\u5fc5\u305a$_POST\u306b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3059\u308b\n\t\tif (!isConsole() && empty($_POST)) {\n\t\t\t$this->log('\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001PHP\u306e\u8a2d\u5b9a post_max_size \u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u306e\u5024\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002');\n\t\t\treturn false;\n\t\t}\n\t\t$file = $check[key($check)];\n\t\t// input[type=file] \u81ea\u4f53\u304c\u9001\u4fe1\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u30b5\u30a4\u30ba\u691c\u8a3c\u3092\u7d42\u4e86\n\t\tif ($file === null || !is_array($file)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// upload_max_filesize\u3068$size\u3092\u6bd4\u8f03\u3057\u5c0f\u3055\u3044\u6570\u5024\u3067\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\n\t\t$uploadMaxSize = $this->convertSize(ini_get('upload_max_filesize'));\n\t\t$size = min([$size, $uploadMaxSize]);\n\n\t\t$fileErrorCode = Hash::get($file, 'error');\n\t\tif ($fileErrorCode) {\n\t\t\t// \u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6642\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\n\t\t\tswitch($fileErrorCode) {\n\t\t\t\t// \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6210\u529f\n\t\t\t\tcase 0:\n\t\t\t\t\t// UPLOAD_ERR_OK\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\t// UPLOAD_ERR_INI_SIZE\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001php.ini \u306e upload_max_filesize \u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u306e\u5024\u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002');\n\t\t\t\t\treturn __('\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002 %s MB\u4ee5\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002', $this->convertSize($size, 'M'));\n\t\t\t\tcase 2:\n\t\t\t\t\t// UPLOAD_ERR_FORM_SIZE\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306f\u3001HTML\u3067\u6307\u5b9a\u3055\u308c\u305f MAX_FILE_SIZE \u3092\u8d85\u3048\u3066\u3044\u307e\u3059\u3002');\n\t\t\t\t\treturn __('\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002 %s MB\u4ee5\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002', $this->convertSize($size, 'M'));\n\t\t\t\tcase 3:\n\t\t\t\t\t// UPLOAD_ERR_PARTIAL\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u4e0d\u5b8c\u5168\u3067\u3059\u3002');\n\t\t\t\t\treturn __('\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Web\u30b5\u30a4\u30c8\u306e\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\t// \u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u691c\u8a3c\u306f\u5fc5\u9808\u30c1\u30a7\u30c3\u30af\u3092\u4ed5\u69d8\u3059\u308b\u3053\u3068\n\t\t\t\tcase 4:\n\t\t\t\t\t// UPLOAD_ERR_NO_FILE\n\t\t\t\t\t// \t$this->log('CODE: ' . $fileErrorCode . ' \u30d5\u30a1\u30a4\u30eb\u304c\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3055\u308c\u307e\u305b\u3093\u3067\u3057\u305f\u3002');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\t// UPLOAD_ERR_NO_TMP_DIR\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u4e00\u6642\u66f8\u8fbc\u307f\u7528\u306e\u30d5\u30a9\u30eb\u30c0\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u30c6\u30f3\u30dd\u30e9\u30ea\u30d5\u30a9\u30eb\u30c0\u306e\u66f8\u8fbc\u307f\u6a29\u9650\u3092\u898b\u76f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\t\treturn __('\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Web\u30b5\u30a4\u30c8\u306e\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\tcase 7:\n\t\t\t\t\t// UPLOAD_ERR_CANT_WRITE\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' \u30c7\u30a3\u30b9\u30af\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002');\n\t\t\t\t\treturn __('\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Web\u30b5\u30a4\u30c8\u306e\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\tcase 8:\n\t\t\t\t\t// UPLOAD_ERR_EXTENSION\n\t\t\t\t\t$this->log('CODE: ' . $fileErrorCode . ' PHP\u306e\u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30d5\u30a1\u30a4\u30eb\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3092\u4e2d\u6b62\u3057\u307e\u3057\u305f\u3002');\n\t\t\t\t\treturn __('\u4f55\u3089\u304b\u306e\u539f\u56e0\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002Web\u30b5\u30a4\u30c8\u306e\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002');\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!empty($file['name'])) {\n\t\t\t// \u30b5\u30a4\u30ba\u304c\u7a7a\u306e\u5834\u5408\u306f\u3001HTML\u306eMAX_FILE_SIZE\u306e\u5236\u9650\u306b\u3088\u308a\u30b5\u30a4\u30ba\u30aa\u30fc\u30d0\u30fc\n\t\t\tif (!$file['size']) {\n\t\t\t\treturn __('\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002 %s MB\u4ee5\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002', $this->convertSize($size, 'M'));\n\t\t\t}\n\t\t\tif ($file['size'] > $size) {\n\t\t\t\treturn __('\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u304c\u30aa\u30fc\u30d0\u30fc\u3057\u3066\u3044\u307e\u3059\u3002 %s MB\u4ee5\u5185\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002', $this->convertSize($size, 'M'));\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30c7\u30fc\u30bf\n\t * @param string $ext \u8a31\u53ef\u3059\u308b\u62e1\u5f35\u5b50\n\t */\n\tpublic function fileExt($check, $exts)\n\t{\n\t\t$file = $check[key($check)];\n\t\tif (!is_array($exts)) {\n\t\t\t$exts = explode(',', $exts);\n\t\t}\n\n\t\t// FILES\u5f62\u5f0f\u306e\u30c1\u30a7\u30c3\u30af\n\t\tif (!empty($file['name'])) {\n\t\t\t$ext = decodeContent($file['type'], $file['name']);\n\t\t\tif (!in_array($ext, $exts)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// \u66f4\u65b0\u6642\u306e\u6587\u5b57\u5217\u30c1\u30a7\u30c3\u30af\n\t\tif (!empty($file) && is_string($file)) {\n\t\t\t$ext = pathinfo($file, PATHINFO_EXTENSION);\n\t\t\tif (!in_array($ext, $exts)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u534a\u89d2\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u78ba\u8a8d\u3059\u308b\u5024\u3092\u542b\u3080\u914d\u5217\u3002\u5148\u982d\u306e\u8981\u7d20\u306e\u307f\u30c1\u30a7\u30c3\u30af\u3055\u308c\u308b\n\t * @return boolean\n\t */\n\tpublic function halfText($check)\n\t{\n\t\t$value = $check[key($check)];\n\t\t$len = strlen($value);\n\t\t$mblen = mb_strlen($value, 'UTF-8');\n\t\tif ($len != $mblen) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u534a\u89d2\u82f1\u6570\u5b57+\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\uff0b\u30cf\u30a4\u30d5\u30f3\u306e\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u78ba\u8a8d\u3059\u308b\u5024\u3092\u542b\u3080\u914d\u5217\u3002\u5148\u982d\u306e\u8981\u7d20\u306e\u307f\u30c1\u30a7\u30c3\u30af\u3055\u308c\u308b\n\t * @return boolean\n\t */\n\tpublic function alphaNumericDashUnderscore($check)\n\t{\n\t\t$value = array_values($check);\n\t\t$value = $value[0];\n\n\t\treturn preg_match('|^[0-9a-zA-Z_-]*$|', $value);\n\t}\n\n\t/**\n\t * \u4e00\u3064\u4f4d\u7f6e\u3092\u4e0a\u3052\u308b\n\t * @param string $id\n\t * @param array $conditions\n\t * @return boolean\n\t */\n\tpublic function sortup($id, $conditions)\n\t{\n\t\treturn $this->changeSort($id, -1, $conditions);\n\t}\n\n\t/**\n\t * \u4e00\u3064\u4f4d\u7f6e\u3092\u4e0b\u3052\u308b\n\t * @param string $id\n\t * @param array $conditions\n\t * @return boolean\n\t */\n\tpublic function sortdown($id, $conditions)\n\t{\n\t\treturn $this->changeSort($id, 1, $conditions);\n\t}\n\n\t/**\n\t * \u4e26\u3073\u9806\u3092\u5909\u66f4\u3059\u308b\n\t * @param string $id\n\t * @param int $offset\n\t * @param array $conditions\n\t * @return boolean\n\t */\n\tpublic function changeSort($id, $offset, $conditions = [])\n\t{\n\t\tif ($conditions) {\n\t\t\t$_conditions = $conditions;\n\t\t} else {\n\t\t\t$_conditions = [];\n\t\t}\n\n\t\t// \u4e00\u6642\u7684\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092OFF\u3059\u308b\n\t\t$this->cacheQueries = false;\n\n\t\t$current = $this->find('first', [\n\t\t\t'conditions' => [$this->alias . '.id' => $id],\n\t\t\t'fields' => [$this->alias . '.id', $this->alias . '.sort']\n\t\t]);\n\t\tif (!$current) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// \u5909\u66f4\u76f8\u624b\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\t\tif ($offset > 0) { // DOWN\n\t\t\t$order = [$this->alias . '.sort'];\n\t\t\t$limit = $offset;\n\t\t\t$conditions[$this->alias . '.sort >'] = $current[$this->alias]['sort'];\n\t\t} elseif ($offset < 0) { // UP\n\t\t\t$order = [$this->alias . '.sort DESC'];\n\t\t\t$limit = $offset * -1;\n\t\t\t$conditions[$this->alias . '.sort <'] = $current[$this->alias]['sort'];\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\n\t\t$conditions = array_merge($conditions, $_conditions);\n\t\t$target = $this->find('all', [\n\t\t\t'conditions' => $conditions,\n\t\t\t'fields' => [$this->alias . '.id', $this->alias . '.sort'],\n\t\t\t'order' => $order,\n\t\t\t'limit' => $limit,\n\t\t\t'recursive' => -1\n\t\t]);\n\n\t\tif (!isset($target[count($target) - 1])) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$currentSort = $current[$this->alias]['sort'];\n\t\t$targetSort = $target[count($target) - 1][$this->alias]['sort'];\n\n\t\t// current \u304b\u3089 target \u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092sort\u3067\u7bc4\u56f2\u6307\u5b9a\u3057\u3066\u53d6\u5f97\n\t\t$conditions = [];\n\t\tif ($offset > 0) { // DOWN\n\t\t\t$conditions[$this->alias . '.sort >='] = $currentSort;\n\t\t\t$conditions[$this->alias . '.sort <='] = $targetSort;\n\t\t} elseif ($offset < 0) { // UP\n\t\t\t$conditions[$this->alias . '.sort <='] = $currentSort;\n\t\t\t$conditions[$this->alias . '.sort >='] = $targetSort;\n\t\t}\n\n\t\t$conditions = array_merge($conditions, $_conditions);\n\t\t$datas = $this->find('all', [\n\t\t\t'conditions' => $conditions,\n\t\t\t'fields' => [$this->alias . '.id', $this->alias . '.sort'],\n\t\t\t'order' => $order,\n\t\t\t'recursive' => -1\n\t\t]);\n\n\t\t// \u5168\u3066\u306e\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\n\t\tforeach($datas as $data) {\n\t\t\tif ($data[$this->alias]['sort'] == $currentSort) {\n\t\t\t\t$data[$this->alias]['sort'] = $targetSort;\n\t\t\t} else {\n\t\t\t\tif ($offset > 0) {\n\t\t\t\t\t$data[$this->alias]['sort']--;\n\t\t\t\t} elseif ($offset < 0) {\n\t\t\t\t\t$data[$this->alias]['sort']++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$this->save($data, false)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Model\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u524a\u9664\u3059\u308b\n\t * @return void\n\t */\n\tpublic function deleteModelCache()\n\t{\n\t\t$this->_schema = null;\n\t\t$folder = new Folder(CACHE . 'models' . DS);\n\t\t$caches = $folder->read(true, true);\n\t\tforeach($caches[1] as $cache) {\n\t\t\tif (basename($cache) != 'empty') {\n\t\t\t\t@unlink(CACHE . 'models' . DS . $cache);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Key Value \u5f62\u5f0f\u306e\u30c6\u30fc\u30d6\u30eb\u3088\u308a\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\n\t * \uff11\u30ec\u30b3\u30fc\u30c9\u3068\u3057\u3066\u30c7\u30fc\u30bf\u3092\u5c55\u958b\u3059\u308b\n\t * @return array\n\t */\n\tpublic function findExpanded()\n\t{\n\t\t$dbDatas = $this->find('all', ['fields' => ['name', 'value']]);\n\t\t$expandedData = [];\n\t\tif ($dbDatas) {\n\t\t\tforeach($dbDatas as $dbData) {\n\t\t\t\t$expandedData[$dbData[$this->alias]['name']] = $dbData[$this->alias]['value'];\n\t\t\t}\n\t\t}\n\t\treturn $expandedData;\n\t}\n\n\t/**\n\t * Key Value \u5f62\u5f0f\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\n\t * @param array $data\n\t * @return    boolean\n\t */\n\tpublic function saveKeyValue($data)\n\t{\n\t\tif (isset($data[$this->alias])) {\n\t\t\t$data = $data[$this->alias];\n\t\t}\n\n\t\tif ($this->Behaviors->loaded('BcCache')) {\n\t\t\t$this->Behaviors->disable('BcCache');\n\t\t}\n\n\t\t$result = true;\n\t\tforeach($data as $key => $value) {\n\n\t\t\tif ($this->find('count', ['conditions' => ['name' => $key]]) > 1) {\n\t\t\t\t$this->deleteAll(['name' => $key]);\n\t\t\t}\n\n\t\t\t$dbData = $this->find('first', ['conditions' => ['name' => $key]]);\n\n\t\t\tif (!$dbData) {\n\t\t\t\t$dbData = [];\n\t\t\t\t$dbData[$this->alias]['name'] = $key;\n\t\t\t\t$dbData[$this->alias]['value'] = $value;\n\t\t\t\t$this->create($dbData);\n\t\t\t} else {\n\t\t\t\t$dbData[$this->alias]['value'] = $value;\n\t\t\t\t$this->set($dbData);\n\t\t\t}\n\n\t\t\t// SQlite\u306e\u5834\u5408\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7528\u306e\u95a2\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\n\t\t\t// \u500b\u5225\u306b\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\t\t\tif (!$this->save(null, false)) {\n\t\t\t\t$result = false;\n\t\t\t}\n\t\t}\n\n\t\tif ($this->Behaviors->loaded('BcCache')) {\n\t\t\t$this->Behaviors->enable('BcCache');\n\t\t\t$this->delCache();\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t * \u30ea\u30b9\u30c8\u30c1\u30a7\u30c3\u30af\n\t * \u5bfe\u8c61\u3068\u306a\u308b\u5024\u304c\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u30a8\u30e9\u30fc\n\t *\n\t * @param array $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param array $list \u30ea\u30b9\u30c8\n\t * @return boolean Succcess\n\t */\n\tpublic function notInList($check, $list)\n\t{\n\t\treturn !in_array($check[key($check)], $list);\n\t}\n\n\t/**\n\t * Deconstructs a complex data type (array or object) into a single field value.\n\t *\n\t * @param string $field The name of the field to be deconstructed\n\t * @param mixed $data An array or object to be deconstructed into a field\n\t * @return mixed The resulting data that should be assigned to a field\n\t */\n\tpublic function deconstruct($field, $data)\n\t{\n\t\tif (!is_array($data)) {\n\t\t\treturn $data;\n\t\t}\n\n\t\t$type = $this->getColumnType($field);\n\n\t\t// >>> CUSTOMIZE MODIFY 2013/11/10 ryuring \u548c\u66a6\u5bfe\u5fdc\n\t\t/* if (!in_array($type, array('datetime', 'timestamp', 'date', 'time'))) { */\n\t\t// ---\n\t\tif (!in_array($type, ['string', 'text', 'datetime', 'timestamp', 'date', 'time'])) {\n\t\t\t// <<<\n\t\t\treturn $data;\n\t\t}\n\n\t\t$useNewDate = (isset($data['year']) || isset($data['month']) ||\n\t\t\tisset($data['day']) || isset($data['hour']) || isset($data['minute']));\n\n\t\t// >>> CUSTOMIZE MODIFY 2013/11/10 ryuring \u548c\u66a6\u5bfe\u5fdc\n\t\t/* $dateFields = array('Y' => 'year', 'm' => 'month', 'd' => 'day', 'H' => 'hour', 'i' => 'min', 's' => 'sec'); */\n\t\t// ---\n\t\t$dateFields = ['W' => 'wareki', 'Y' => 'year', 'm' => 'month', 'd' => 'day', 'H' => 'hour', 'i' => 'min', 's' => 'sec'];\n\t\t// <<<\n\t\t$timeFields = ['H' => 'hour', 'i' => 'min', 's' => 'sec'];\n\t\t$date = [];\n\n\t\tif (isset($data['meridian']) && empty($data['meridian'])) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (isset($data['hour']) &&\n\t\t\tisset($data['meridian']) &&\n\t\t\t!empty($data['hour']) &&\n\t\t\t$data['hour'] != 12 &&\n\t\t\t$data['meridian'] === 'pm'\n\t\t) {\n\t\t\t$data['hour'] = $data['hour'] + 12;\n\t\t}\n\t\tif (isset($data['hour']) && isset($data['meridian']) && $data['hour'] == 12 && $data['meridian'] === 'am') {\n\t\t\t$data['hour'] = '00';\n\t\t}\n\t\tif ($type === 'time') {\n\t\t\tforeach($timeFields as $key => $val) {\n\t\t\t\tif (!isset($data[$val]) || $data[$val] === '0' || $data[$val] === '00') {\n\t\t\t\t\t$data[$val] = '00';\n\t\t\t\t} elseif ($data[$val] !== '') {\n\t\t\t\t\t$data[$val] = sprintf('%02d', $data[$val]);\n\t\t\t\t}\n\t\t\t\tif (!empty($data[$val])) {\n\t\t\t\t\t$date[$key] = $data[$val];\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// >>> CUSTOMIZE MODIFY 2013/11/10 ryuring \u548c\u66a6\u5bfe\u5fdc\n\t\t/* if ($type === 'datetime' || $type === 'timestamp' || $type === 'date') { */\n\t\t// ---\n\t\tif ($type == 'text' || $type == 'string' || $type === 'datetime' || $type === 'timestamp' || $type === 'date') {\n\t\t\t// <<<\n\t\t\tforeach($dateFields as $key => $val) {\n\t\t\t\tif ($val === 'hour' || $val === 'min' || $val === 'sec') {\n\t\t\t\t\tif (!isset($data[$val]) || $data[$val] === '0' || $data[$val] === '00') {\n\t\t\t\t\t\t$data[$val] = '00';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$data[$val] = sprintf('%02d', $data[$val]);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// >>> CUSTOMIZE ADD 2013/11/10 ryuring\t\u548c\u66a6\u5bfe\u5fdc\n\t\t\t\tif ($val == 'wareki' && !empty($data['wareki'])) {\n\t\t\t\t\t$warekis = ['m' => 1867, 't' => 1911, 's' => 1925, 'h' => 1988, 'r' => 2018];\n\t\t\t\t\tif (!empty($data['year'])) {\n\t\t\t\t\t\tlist($wareki, $year) = explode('-', $data['year']);\n\t\t\t\t\t\t$data['year'] = $year + $warekis[$wareki];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// <<<\n\t\t\t\t// >>> CUSTOMIZE ADD 2013/11/10 ryuring\t\u548c\u66a6\u5bfe\u5fdc\n\t\t\t\t/* if (!isset($data[$val]) || isset($data[$val]) && (empty($data[$val]) || $data[$val][0] === '-')) {\n\t\t\t\t  return null; */\n\t\t\t\t// ---\n\t\t\t\tif ($val != 'wareki' && !isset($data[$val]) || isset($data[$val]) && (empty($data[$val]) || (isset($data[$val][0]) && $data[$val][0] === '-'))) {\n\t\t\t\t\tif ($type == 'text' || $type == 'string') {\n\t\t\t\t\t\treturn $data;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($data[$val]) && !empty($data[$val])) {\n\t\t\t\t\t$date[$key] = $data[$val];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($useNewDate && !empty($date)) {\n\t\t\t// >>> CUSTOMIZE MODIFY 2013/11/10 ryuring \u548c\u66a6\u5bfe\u5fdc\n\t\t\t/* $format = $this->getDataSource()->columns[$type]['format']; */\n\t\t\t// ---\n\t\t\tif ($type == 'text' || $type == 'string') {\n\t\t\t\t$format = 'Y-m-d H:i:s';\n\t\t\t} else {\n\t\t\t\t$format = $this->getDataSource()->columns[$type]['format'];\n\t\t\t}\n\t\t\t// <<<\n\n\t\t\tforeach(['m', 'd', 'H', 'i', 's'] as $index) {\n\t\t\t\tif (isset($date[$index])) {\n\t\t\t\t\t$date[$index] = sprintf('%02d', $date[$index]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn str_replace(array_keys($date), array_values($date), $format);\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * \uff12\u3064\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u78ba\u8a8d\u3059\u308b\n\t *\n\t * @param array $check \u5bfe\u8c61\u3068\u306a\u308b\u5024\n\t * @param mixed $fields \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\n\t * @return    boolean\n\t */\n\tpublic function confirm($check, $fields)\n\t{\n\t\t$value1 = $value2 = '';\n\t\tif (is_array($fields) && count($fields) > 1) {\n\t\t\tif (isset($this->data[$this->alias][$fields[0]]) &&\n\t\t\t\tisset($this->data[$this->alias][$fields[1]])) {\n\t\t\t\t$value1 = $this->data[$this->alias][$fields[0]];\n\t\t\t\t$value2 = $this->data[$this->alias][$fields[1]];\n\t\t\t}\n\t\t} elseif ($fields) {\n\t\t\tif (isset($check[key($check)]) && isset($this->data[$this->alias][$fields])) {\n\t\t\t\t$value1 = $check[key($check)];\n\t\t\t\t$value2 = $this->data[$this->alias][$fields];\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif ($value1 != $value2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u6307\u5b9a\u3057\u305f\u30e2\u30c7\u30eb\u4ee5\u5916\u306e\u30a2\u30bd\u30b7\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u9664\u5916\u3059\u308b\n\t *\n\t * @param array $auguments \u30a2\u30bd\u30b7\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u9664\u5916\u3057\u306a\u3044\u30e2\u30c7\u30eb\u3002\n\t * \u3000\u300c.\uff08\u30c9\u30c3\u30c8\uff09\u300d\u3067\u533a\u5207\u308b\u4e8b\u306b\u3088\u308a\u3001\u5bfe\u8c61\u30e2\u30c7\u30eb\u306b\u30a2\u30bd\u30b7\u30a8\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\u304c\u3055\u3089\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u30a2\u30bd\u30b7\u30a8\u30fc\u30b7\u30e7\u30f3\u3092\u5bfe\u8c61\u3068\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\n\t * \u3000\uff08\u4f8b\uff09UserGroup.Permission\n\t * @param boolean $reset \u30d0\u30a4\u30f3\u30c9\u6642\u306b\uff11\u56de\u306e find \u3067\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u304b\u3069\u3046\u304b\n\t * @return void\n\t */\n\tpublic function reduceAssociations($arguments, $reset = true)\n\t{\n\t\t$models = [];\n\n\t\tforeach($arguments as $index => $argument) {\n\t\t\tif (is_array($argument)) {\n\t\t\t\tif (count($argument) > 0) {\n\t\t\t\t\t$arguments = am($arguments, $argument);\n\t\t\t\t}\n\t\t\t\tunset($arguments[$index]);\n\t\t\t}\n\t\t}\n\n\t\tforeach($arguments as $index => $argument) {\n\t\t\tif (!is_string($argument)) {\n\t\t\t\tunset($arguments[$index]);\n\t\t\t}\n\t\t}\n\n\t\tif (count($arguments) == 0) {\n\t\t\t$models[$this->name] = [];\n\t\t} else {\n\t\t\tforeach($arguments as $argument) {\n\t\t\t\tif (strpos($argument, '.') !== false) {\n\t\t\t\t\t$model = substr($argument, 0, strpos($argument, '.'));\n\t\t\t\t\t$child = substr($argument, strpos($argument, '.') + 1);\n\n\t\t\t\t\tif ($child == $model) {\n\t\t\t\t\t\t$models[$model] = [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$models[$model][] = $child;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$models[$this->name][] = $argument;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$relationTypes = ['belongsTo', 'hasOne', 'hasMany', 'hasAndBelongsToMany'];\n\n\t\tforeach($models as $bindingName => $children) {\n\t\t\t$model = null;\n\n\t\t\tforeach($relationTypes as $relationType) {\n\t\t\t\t$currentRelation = (isset($this->$relationType)? $this->$relationType : null);\n\t\t\t\tif (isset($currentRelation) && isset($currentRelation[$bindingName]) &&\n\t\t\t\t\tis_array($currentRelation[$bindingName]) && isset($currentRelation[$bindingName]['className'])) {\n\t\t\t\t\t$model = $currentRelation[$bindingName]['className'];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isset($model)) {\n\t\t\t\t$model = $bindingName;\n\t\t\t}\n\n\t\t\tif (isset($model) && $model != $this->name && isset($this->$model)) {\n\t\t\t\tif (!isset($this->__backInnerAssociation)) {\n\t\t\t\t\t$this->__backInnerAssociation = [];\n\t\t\t\t}\n\t\t\t\t$this->__backInnerAssociation[] = $model;\n\t\t\t\t$this->$model->reduceAssociations($children, $reset);\n\t\t\t}\n\t\t}\n\n\t\tif (isset($models[$this->name])) {\n\t\t\tforeach($models as $model => $children) {\n\t\t\t\tif ($model != $this->name) {\n\t\t\t\t\t$models[$this->name][] = $model;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$models = array_unique($models[$this->name]);\n\t\t\t$unbind = [];\n\n\t\t\tforeach($relationTypes as $relation) {\n\t\t\t\tif (isset($this->$relation)) {\n\t\t\t\t\tforeach($this->$relation as $bindingName => $bindingData) {\n\t\t\t\t\t\tif (!in_array($bindingName, $models)) {\n\t\t\t\t\t\t\t$unbind[$relation][] = $bindingName;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count($unbind) > 0) {\n\t\t\t\t$this->unbindModel($unbind, $reset);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \u8907\u6570\u306eE\u30e1\u30fc\u30eb\u30c1\u30a7\u30c3\u30af\uff08\u30ab\u30f3\u30de\u533a\u5207\u308a\uff09\n\t *\n\t * @param array $check \u8907\u6570\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\n\t * @return boolean\n\t */\n\tpublic function emails($check)\n\t{\n\t\t$emails = [];\n\t\tif (strpos($check[key($check)], ',') !== false) {\n\t\t\t$emails = explode(',', $check[key($check)]);\n\t\t}\n\t\tif (!$emails) {\n\t\t\t$emails = [$check[key($check)]];\n\t\t}\n\t\t$result = true;\n\t\tforeach($emails as $email) {\n\t\t\tif (!Validation::email($email)) {\n\t\t\t\t$result = false;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Deletes multiple model records based on a set of conditions.\n\t *\n\t * @param mixed $conditions Conditions to match\n\t * @param boolean $cascade Set to true to delete records that depend on this record\n\t * @param boolean $callbacks Run callbacks (not being used)\n\t * @return boolean True on success, false on failure\n\t * @link http://book.cakephp.org/view/692/deleteAll\n\t */\n\tpublic function deleteAll($conditions, $cascade = true, $callbacks = false)\n\t{\n\t\t$result = parent::deleteAll($conditions, $cascade, $callbacks);\n\t\tif ($result) {\n\t\t\tif ($this->Behaviors->attached('BcCache') && $this->Behaviors->enabled('BcCache')) {\n\t\t\t\t$this->delCache($this);\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Updates multiple model records based on a set of conditions.\n\t *\n\t * @param array $fields Set of fields and values, indexed by fields.\n\t *    Fields are treated as SQL snippets, to insert literal values manually escape your data.\n\t * @param mixed $conditions Conditions to match, true for all records\n\t * @return boolean True on success, false on failure\n\t * @link http://book.cakephp.org/view/75/Saving-Your-Data\n\t */\n\tpublic function updateAll($fields, $conditions = true)\n\t{\n\t\t$result = parent::updateAll($fields, $conditions);\n\t\tif ($result) {\n\t\t\tif ($this->Behaviors->attached('BcCache') && $this->Behaviors->enabled('BcCache')) {\n\t\t\t\t$this->delCache($this);\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Used to report user friendly errors.\n\t * If there is a file app/error.php or app/app_error.php this file will be loaded\n\t * error.php is the AppError class it should extend ErrorHandler class.\n\t *\n\t * @param string $method Method to be called in the error class (AppError or ErrorHandler classes)\n\t * @param array $messages Message that is to be displayed by the error class\n\t */\n\tpublic function cakeError($method, $messages = [])\n\t{\n\t\t//======================================================================\n\t\t// router.php \u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u524d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\uff08bootstrap.php\uff09\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\n\t\t// AppController\u306a\u3069\u304c\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u306a\u3044\u70ba\u3001Object::cakeError() \u3092\u5b9f\u884c\u3059\u308b\u4e8b\u304c\u3067\u304d\u306a\u3044\u3002\n\t\t// router.php \u304c\u30ed\u30fc\u30c9\u3055\u308c\u308b\u524d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u3001\u901a\u5e38\u306e\u30a8\u30e9\u30fc\u8868\u793a\u3092\u884c\u3046\n\t\t//======================================================================\n\t\tif (!Configure::read('BcRequest.routerLoaded')) {\n\t\t\ttrigger_error($method, E_USER_ERROR);\n\t\t} else {\n\t\t\tparent::cakeError($method, $messages);\n\t\t}\n\t}\n\n\t/**\n\t * Queries the datasource and returns a result set array.\n\t *\n\t * Used to perform find operations, where the first argument is type of find operation to perform\n\t * (all / first / count / neighbors / list / threaded),\n\t * second parameter options for finding (indexed array, including: 'conditions', 'limit',\n\t * 'recursive', 'page', 'fields', 'offset', 'order', 'callbacks')\n\t *\n\t * Eg:\n\t * {{{\n\t * $model->find('all', array(\n\t *   'conditions' => array('name' => 'Thomas Anderson'),\n\t *   'fields' => array('name', 'email'),\n\t *   'order' => 'field3 DESC',\n\t *   'recursive' => 2,\n\t *   'group' => 'type',\n\t *   'callbacks' => false,\n\t * ));\n\t * }}}\n\t *\n\t * In addition to the standard query keys above, you can provide Datasource, and behavior specific\n\t * keys. For example, when using a SQL based datasource you can use the joins key to specify additional\n\t * joins that should be part of the query.\n\t *\n\t * {{{\n\t * $model->find('all', array(\n\t *   'conditions' => array('name' => 'Thomas Anderson'),\n\t *   'joins' => array(\n\t *     array(\n\t *       'alias' => 'Thought',\n\t *       'table' => 'thoughts',\n\t *       'type' => 'LEFT',\n\t *       'conditions' => '`Thought`.`person_id` = `Person`.`id`'\n\t *     )\n\t *   )\n\t * ));\n\t * }}}\n\t *\n\t * ### Disabling callbacks\n\t *\n\t * The `callbacks` key allows you to disable or specify the callbacks that should be run. To\n\t * disable beforeFind & afterFind callbacks set `'callbacks' => false` in your options. You can\n\t * also set the callbacks option to 'before' or 'after' to enable only the specified callback.\n\t *\n\t * ### Adding new find types\n\t *\n\t * Behaviors and find types can also define custom finder keys which are passed into find().\n\t * See the documentation for custom find types\n\t * (http://book.cakephp.org/2.0/en/models/retrieving-your-data.html#creating-custom-find-types)\n\t * for how to implement custom find types.\n\t *\n\t * Specifying 'fields' for notation 'list':\n\t *\n\t * - If no fields are specified, then 'id' is used for key and 'model->displayField' is used for value.\n\t * - If a single field is specified, 'id' is used for key and specified field is used for value.\n\t * - If three fields are specified, they are used (in order) for key, value and group.\n\t * - Otherwise, first and second fields are used for key and value.\n\t *\n\t * Note: find(list) + database views have issues with MySQL 5.0. Try upgrading to MySQL 5.1 if you\n\t * have issues with database views.\n\t *\n\t * Note: find(count) has its own return values.\n\t *\n\t * @param string $type Type of find operation (all / first / count / neighbors / list / threaded)\n\t * @param array $query Option fields (conditions / fields / joins / limit / offset / order / page / group / callbacks)\n\t * @return array|null Array of records, or Null on failure.\n\t * @link http://book.cakephp.org/2.0/en/models/retrieving-your-data.html\n\t */\n\tpublic function find($type = 'first', $query = [])\n\t{\n\t\t$this->findQueryType = $type;\n\t\t$this->id = $this->getID();\n\n\t\t$query = $this->buildQuery($type, $query);\n\t\tif (is_null($query)) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// CUSTOMIZE MODIFY 2012/04/23 ryuring\n\t\t// \u30ad\u30e3\u30c3\u30b7\u30e5\u30d3\u30d8\u30a4\u30d3\u30a2\u304c\u5229\u7528\u72b6\u614b\u306e\u5834\u5408\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u8aad\u307f\u8fbc\u3080\n\t\t//\n\t\t// \u3010AppModel\u3067\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5b9a\u7fa9\u3057\u306a\u3044\u4e8b\u3011\n\t\t// \u81ea\u52d5\u7684\u306b\u751f\u6210\u3055\u308c\u308b\u30af\u30e9\u30b9\u5b9a\u7fa9\u306e\u306a\u3044\u95a2\u9023\u30e2\u30c7\u30eb\u306e\u51e6\u7406\u3067\u52dd\u624b\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5229\u7528\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u70ba\n\t\t// \uff08HABTM\u306e\u66f4\u65b0\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u306e\u3067\uff09\n\t\t// >>>\n\t\t//$results = $this->getDataSource()->read($this, $query);\n\t\t// ---\n\t\t$cache = true;\n\t\tif (isset($query['cache']) && is_bool($query['cache'])) {\n\t\t\t$cache = $query['cache'];\n\t\t\tunset($query['cache']);\n\t\t}\n\t\tif (BC_INSTALLED && isset($this->Behaviors) && $this->Behaviors->attached('BcCache') &&\n\t\t\t$this->Behaviors->enabled('BcCache') && Configure::read('debug') == 0) {\n\t\t\t// ===========================================================================================\n\t\t\t// 2016/09/22 ryuring\n\t\t\t// PHP 7.0.8 \u74b0\u5883\u306b\u3066\u3001\u30b3\u30f3\u30c6\u30f3\u30c4\u4e00\u89a7\u8ffd\u52a0\u6642\u3001\u691c\u7d22\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4f5c\u6210\u306e\u70ba\u3001BcContentsComponent \u7d4c\u7531\u3067\n\t\t\t// \u547c\u3073\u51fa\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u969b\u3060\u3051\u3001\u30e2\u30c7\u30eb\u306e\u30de\u30b8\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3092\u8fd4\u3059\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u51e6\u7406\u304c\u30b9\u30c8\u30c3\u30d7\u3057\u3066\u3057\u307e\u3046\u3002\n\t\t\t// \u305d\u306e\u70ba\u3001\u30d3\u30d8\u30a4\u30d3\u30a2\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u76f4\u63a5\u5b9f\u884c\u3057\u3066\u5bfe\u51e6\u3057\u305f\u3002\n\t\t\t// CakePHP\u3082\u3001PHP\u81ea\u4f53\u306e\u30a8\u30e9\u30fc\u3082\u767a\u751f\u305b\u305a\u3001\u305f\u3060\u6b62\u307e\u308b\u3002PHP7\u306e\u30d0\u30b0\uff1fPHP\u5074\u306e\u30e1\u30e2\u30ea\u30fc\u3092256M\u306b\u3057\u3066\u3082\u5909\u308f\u3089\u305a\u3002\n\t\t\t// ===========================================================================================\n\t\t\t$results = $this->Behaviors->BcCache->readCache($this, $cache, $type, $query);\n\t\t} else {\n\t\t\t$results = $this->getDataSource()->read($this, $query);\n\t\t}\n\t\t// <<<\n\n\t\t$this->resetAssociations();\n\n\t\tif ($query['callbacks'] === true || $query['callbacks'] === 'after') {\n\t\t\t$results = $this->_filterResults($results);\n\t\t}\n\n\t\t$this->findQueryType = null;\n\n\t\tif ($type === 'all') {\n\t\t\treturn $results;\n\t\t} else {\n\t\t\tif ($this->findMethods[$type] === true) {\n\t\t\t\treturn $this->{'_find' . ucfirst($type)}('after', $query, $results);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \u30a4\u30d9\u30f3\u30c8\u3092\u767a\u706b\n\t *\n\t * @param string $name\n\t * @param array $params\n\t * @return mixed\n\t */\n\tpublic function dispatchEvent($name, $params = [], $options = [])\n\t{\n\t\t$options = array_merge([\n\t\t\t'modParams' => 0,\n\t\t\t'plugin' => $this->plugin,\n\t\t\t'layer' => 'Model',\n\t\t\t'class' => $this->name\n\t\t], $options);\n\n\t\tApp::uses('BcEventDispatcher', 'Event');\n\t\treturn BcEventDispatcher::dispatch($name, $this, $params, $options);\n\t}\n\n\t/**\n\t * \u30c7\u30fc\u30bf\u304c\u516c\u958b\u6e08\u307f\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\t *\n\t * @param boolean $status \u516c\u958b\u30b9\u30c6\u30fc\u30bf\u30b9\n\t * @param string $publishBegin \u516c\u958b\u958b\u59cb\u65e5\u6642\n\t * @param string $publishEnd \u516c\u958b\u7d42\u4e86\u65e5\u6642\n\t * @return bool\n\t */\n\tpublic function isPublish($status, $publishBegin, $publishEnd)\n\t{\n\t\t$Content = ClassRegistry::init('Content');\n\t\treturn $Content->isPublish($status, $publishBegin, $publishEnd);\n\t}\n\n\t/**\n\t * \u65e5\u4ed8\u306e\u6b63\u5f53\u6027\u30c1\u30a7\u30c3\u30af\n\t *\n\t * @param array $check \u78ba\u8a8d\u3059\u308b\u5024\n\t * @return boolean\n\t */\n\tpublic function checkDate($check)\n\t{\n\t\t$value = $check[key($check)];\n\t\tif (!$value) {\n\t\t\treturn true;\n\t\t}\n\t\t$time = '';\n\t\tif (strpos($value, ' ') !== false) {\n\t\t\tlist($date, $time) = explode(' ', $value);\n\t\t} else {\n\t\t\t$date = $value;\n\t\t}\n\t\tif (DS != '\\\\') {\n\t\t\tif ($time) {\n\t\t\t\tif (!strptime($value, '%Y-%m-%d %H:%M')) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!strptime($value, '%Y-%m-%d')) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlist($Y, $m, $d) = explode('-', $date);\n\t\tif (checkdate($m, $d, $Y) !== true) {\n\t\t\treturn false;\n\t\t}\n\t\tif ($time) {\n\t\t\tif (strpos($value, ':') !== false) {\n\t\t\t\tlist($H, $i) = explode(':', $time);\n\t\t\t\tif (checktime($H, $i) !== true) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (date('Y-m-d H:i:s', strtotime($value)) == '1970-01-01 09:00:00') {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30c4\u30ea\u30fc\u3088\u308a\u518d\u5e30\u7684\u306b\u524a\u9664\u3059\u308b\n\t *\n\t * @param int $id\n\t * @return boolean\n\t */\n\tpublic function removeFromTreeRecursive($id)\n\t{\n\t\tif (!$this->Behaviors->enabled('Tree')) {\n\t\t\treturn false;\n\t\t}\n\t\t$children = $this->children($id);\n\t\tforeach($children as $child) {\n\t\t\t$this->removeFromTree($child[$this->alias]['id'], true);\n\t\t}\n\t\treturn $this->removeFromTree($id, true);\n\t}\n\n\t/**\n\t * \u30d5\u30a1\u30a4\u30eb\u304c\u9001\u4fe1\u3055\u308c\u305f\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n\t *\n\t * @param array $check\n\t * @return boolean\n\t */\n\tpublic function notFileEmpty($check)\n\t{\n\t\tif (empty($check[key($check)]) || (is_array($check[key($check)]) && $check[key($check)]['size'] === 0)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic function exists($id = null)\n\t{\n\t\tif ($this->Behaviors->loaded('SoftDelete')) {\n\t\t\treturn $this->existsAndNotDeleted($id);\n\t\t} else {\n\t\t\treturn parent::exists($id);\n\t\t}\n\t}\n\n\tpublic function delete($id = null, $cascade = true)\n\t{\n\t\t$result = parent::delete($id, $cascade);\n\t\tif ($result === false && $this->Behaviors->enabled('SoftDelete')) {\n\t\t\t$this->getEventManager()->dispatch(new CakeEvent('Model.afterDelete', $this));\n\t\t\treturn (bool)$this->field('deleted', ['deleted' => 1]);\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function dataIter(&$results, $callback)\n\t{\n\t\tif (!$isVector = isset($results[0])) {\n\t\t\t$results = [$results];\n\t\t}\n\t\t$modeled = array_key_exists($this->alias, $results[0]);\n\t\tforeach($results as &$value) {\n\t\t\tif (!$modeled) {\n\t\t\t\t$value = [$this->alias => $value];\n\t\t\t}\n\t\t\t$continue = $callback($value, $this);\n\t\t\tif (!$modeled) {\n\t\t\t\t$value = $value[$this->alias];\n\t\t\t}\n\t\t\tif (!is_null($continue) && !$continue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!$isVector) {\n\t\t\t$results = $results[0];\n\t\t}\n\t}\n\n\t/**\n\t * \u6307\u5b9a\u3057\u305f\u65e5\u4ed8\u3088\u308a\u3082\u65b0\u3057\u3044\u65e5\u4ed8\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\t *\n\t * @param $check\n\t * @param $target\n\t * @return bool\n\t * @unittest yet\n\t */\n\tpublic function checkDateAfterThan($check, $target)\n\t{\n\t\t$check = (is_array($check))? current($check) : $check;\n\t\tif ($check && !empty($this->data[$this->alias][$target])) {\n\t\t\tif (strtotime($check) <= strtotime($this->data[$this->alias][$target])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30b3\u30f3\u30c6\u30f3\u30c4\u306eURL\u306b\u30de\u30c3\u30c1\u3059\u308b\u5019\u88dc\u3092\u53d6\u5f97\u3059\u308b\n\t *\n\t * @param $url\n\t * @return array\n\t */\n\tpublic function getUrlPattern($url)\n\t{\n\t\t$parameter = preg_replace('/^\\//', '', $url);\n\t\t$paths = [];\n\t\t$paths[] = '/' . $parameter;\n\t\tif (preg_match('/\\/$/', $paths[0])) {\n\t\t\t$paths[] = $paths[0] . 'index';\n\t\t} elseif (preg_match('/^(.*?\\/)index$/', $paths[0], $matches)) {\n\t\t\t$paths[] = $matches[1];\n\t\t} elseif (preg_match('/^(.+?)\\.html$/', $paths[0], $matches)) {\n\t\t\t$paths[] = $matches[1];\n\t\t\tif (preg_match('/^(.*?\\/)index$/', $matches[1], $matches)) {\n\t\t\t\t$paths[] = $matches[1];\n\t\t\t}\n\t\t}\n\t\treturn $paths;\n\t}\n\n\t/**\n\t * \u30ec\u30b3\u30fc\u30c9\u30c7\u30fc\u30bf\u306e\u6d88\u6bd2\u3092\u304a\u3053\u306a\u3046\n\t * @return array\n\t * @deprecated 5.0.0 since 4.1.3 htmlspecialchars \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\t */\n\tpublic function sanitizeRecord($record)\n\t{\n\t\ttrigger_error(deprecatedMessage('\u30e1\u30bd\u30c3\u30c9\uff1aBcAppModel::sanitizeRecord()', '4.0.0', '5.0.0', 'htmlspecialchars \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002'), E_USER_DEPRECATED);\n\t\tforeach($record as $key => $value) {\n\t\t\t$record[$key] = $this->sanitize($value);\n\t\t}\n\t\treturn $record;\n\t}\n\n\t/**\n\t * \u5358\u4f53\u30c7\u30fc\u30bf\u306e\u6d88\u6bd2\u3092\u884c\u3046\n\t * \u914d\u5217\u306b\u306f\u5bfe\u5fdc\u3057\u306a\u3044\n\t * @param $data\n\t * @return mixed|string\n\t * @deprecated 5.0.0 since 4.1.3 htmlspecialchars \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\t */\n\tpublic function sanitize($value)\n\t{\n\t\ttrigger_error(deprecatedMessage('\u30e1\u30bd\u30c3\u30c9\uff1aBcAppModel::sanitizeRecord()', '4.0.0', '5.0.0', 'htmlspecialchars \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002'), E_USER_DEPRECATED);\n\t\tif (!is_array($value)) {\n\t\t\t// \u65e2\u306b htmlspecialchars \u3092\u5b9f\u884c\u6e08\u306e\u3082\u306e\u306b\u3064\u3044\u3066\u4e00\u65e6\u5143\u306e\u5f62\u5f0f\u306b\u5fa9\u5143\u3057\u305f\u4e0a\u3067\u518d\u5ea6\u30b5\u30a4\u30cb\u30bf\u30a4\u30ba\u51e6\u7406\u3092\u304b\u3051\u308b\u3002\n\t\t\t$value = str_replace(\"&lt;!--\", \"<!--\", $value);\n\t\t\t$value = htmlspecialchars($value);\n\t\t\treturn $value;\n\t\t} else {\n\t\t\treturn $value;\n\t\t}\n\t}\n\n\t/**\n\t * \u30b9\u30af\u30ea\u30d7\u30c8\u304c\u304c\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\t * - \u7ba1\u7406\u30b0\u30eb\u30fc\u30d7\u306e\u5834\u5408\u306f\u7121\u6761\u4ef6\u306b true \u3092\u8fd4\u5374\n\t * - \u7ba1\u7406\u30b0\u30eb\u30fc\u30d7\u4ee5\u5916\u306e\u5834\u5408\u306b\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u7121\u6761\u4ef6\u306b true \u3092\u8fd4\u5374\n\t * @param array $check\n\t * @return bool\n\t */\n\tpublic function containsScript($check)\n\t{\n\t\t$events = ['onclick', 'ondblclick', 'onmousedown', 'onmouseup', 'onmouseover', 'onmousemove',\n\t\t\t'onmouseout', 'onkeypress', 'onkeydown', 'onkeyup', 'onload', 'onunload',\n\t\t\t'onfocus', 'onblur', 'onsubmit', 'onreset', 'onselect', 'onchange'];\n\t\tif (BcUtil::isAdminUser() || Configure::read('BcApp.allowedPhpOtherThanAdmins')) {\n\t\t\treturn true;\n\t\t}\n\t\t$value = $check[key($check)];\n\t\tif (preg_match('/(<\\?=|<\\?php|<script)/i', $value)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (preg_match('/<[^>]+?(' . implode('|', $events) . ')\\s*=[^<>]*?>/i', $value)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (preg_match('/href\\s*=\\s*[^>]*?javascript\\s*?:/i', $value)) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * \u30b5\u30a4\u30ba\u306e\u5358\u4f4d\u3092\u5909\u63db\u3059\u308b\n\t * @param string $size \u5909\u63db\u524d\u306e\u30b5\u30a4\u30ba\n\t * @param string $outExt \u5909\u63db\u5f8c\u306e\u5358\u4f4d\n\t * @param string $inExt \u5909\u63db\u5143\u306e\u5358\u4f4d\n\t * @return int            \u5909\u63db\u5f8c\u306e\u30b5\u30a4\u30ba\n\t */\n\tpublic function convertSize($size, $outExt = 'B', $inExt = null)\n\t{\n\t\tpreg_match('/\\A\\d+(\\.\\d+)?/', $size, $num);\n\t\t$sizeNum = (isset($num[0]))? $num[0] : 0;\n\n\t\t$extArray = ['B', 'K', 'M', 'G', 'T'];\n\t\t$extRegex = implode('|', $extArray);\n\t\tif (empty($inExt)) {\n\t\t\t$inExt = (preg_match(\"/($extRegex)B?\\z/i\", $size, $ext))? strtoupper($ext[1]) : 'B';\n\t\t}\n\t\t$inExt = (preg_match(\"/\\A($extRegex)B?\\z/i\", $inExt, $ext))? strtoupper($ext[1]) : 'B';\n\t\t$outExt = (preg_match(\"/\\A($extRegex)B?\\z/i\", $outExt, $ext))? strtoupper($ext[1]) : 'B';\n\n\t\t$index = array_search($inExt, $extArray) - array_search($outExt, $extArray);\n\n\t\t$outSize = pow(1024, $index) * $sizeNum;\n\t\treturn $outSize;\n\t}\n\n\t/**\n\t * \u9001\u4fe1\u3055\u308c\u305fPOST\u304cpost_max_size\u3092\u8d85\u3048\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\t * @return boolean\n\t */\n\tpublic function isOverPostSize()\n\t{\n\t\tif (empty($_POST) &&\n\t\t\tenv('REQUEST_METHOD') === 'POST' &&\n\t\t\tenv('CONTENT_LENGTH') > $this->convertSize(ini_get('post_max_size'))) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * \u516c\u958b\u6e08\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e conditions \u3092\u751f\u6210\u53d6\u5f97\n\t *\n\t * @return array array\n\t */\n\tpublic function getConditionAllowPublish()\n\t{\n\t\t$conditions[$this->alias . '.' . $this->publishStatusField] = true;\n\t\t$conditions[] = ['or' => [[$this->alias . '.' . $this->publishBeginField . ' <=' => date('Y-m-d H:i:s')],\n\t\t\t[$this->alias . '.' . $this->publishBeginField => null]]];\n\t\t$conditions[] = ['or' => [[$this->alias . '.' . $this->publishEndField . ' >=' => date('Y-m-d H:i:s')],\n\t\t\t[$this->alias . '.' . $this->publishEndField => null]]];\n\t\treturn $conditions;\n\t}\n\n}\n"], "filenames": ["lib/Baser/Model/BcAppModel.php"], "buggy_code_start_loc": [948], "buggy_code_end_loc": [949], "fixing_code_start_loc": [948], "fixing_code_end_loc": [949], "type": "CWE-434", "message": "baserCMS is a Content Management system. Prior to version 4.7.5, there is a Remote Code Execution (RCE) Vulnerability in the management system of baserCMS. Version 4.7.5 contains a patch.", "other": {"cve": {"id": "CVE-2023-25654", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-23T20:15:14.960", "lastModified": "2023-03-28T15:01:44.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "baserCMS is a Content Management system. Prior to version 4.7.5, there is a Remote Code Execution (RCE) Vulnerability in the management system of baserCMS. Version 4.7.5 contains a patch."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:basercms:basercms:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.7.5", "matchCriteriaId": "8E320A5C-F148-4B1C-A910-EE042EBD72E7"}]}]}], "references": [{"url": "https://github.com/baserproject/basercms/commit/002886be0998c74c386e04f0b43688a8a45d7a96", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/baserproject/basercms/commit/08247f0a633d8e836ce2e5cd2d53aa19901a1359", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/baserproject/basercms/commit/60f83054d8131b0ace60716cec7e629b5eb3a8f0", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/baserproject/basercms/releases/tag/basercms-4.7.5", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/baserproject/basercms/security/advisories/GHSA-h4cc-fxpp-pgw9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/baserproject/basercms/commit/002886be0998c74c386e04f0b43688a8a45d7a96"}}