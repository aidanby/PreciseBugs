{"buggy_code": ["<?php\n/*********************************************************************\n    ajax.orgs.php\n\n    Peter Rotich <peter@osticket.com>\n    Jared Hancock <jared@osticket.com>\n    Copyright (c)  2014 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nif(!defined('INCLUDE_DIR')) die('403');\n\nrequire_once INCLUDE_DIR . 'class.organization.php';\ninclude_once(INCLUDE_DIR.'class.ticket.php');\nrequire_once INCLUDE_DIR.'ajax.tickets.php';\n\nclass OrgsAjaxAPI extends AjaxController {\n\n    function search($type = null) {\n\n        if(!isset($_REQUEST['q'])) {\n            Http::response(400, 'Query argument is required');\n        }\n\n        if (!$_REQUEST['q'])\n            return $this->json_encode(array());\n\n        $q = $_REQUEST['q'];\n        $limit = isset($_REQUEST['limit']) ? (int) $_REQUEST['limit']:25;\n\n        if (strlen(Format::searchable($q)) < 3)\n            return $this->encode(array());\n\n        $orgs = Organization::objects()\n            ->values_flat('id', 'name')\n            ->limit($limit);\n\n        global $ost;\n        $orgs = $ost->searcher->find($q, $orgs);\n        $orgs->order_by(new SqlCode('__relevance__'), QuerySet::DESC)\n            ->distinct('id');\n\n        if (!count($orgs) && preg_match('`\\w$`u', $q)) {\n            // Do wildcard full-text search\n            $_REQUEST['q'] = $q.\"*\";\n            return $this->search($type);\n        }\n\n        $matched = array();\n        foreach ($orgs as $O) {\n            list($id, $name) = $O;\n            $matched[] = array('name' => Format::htmlchars($name), 'info' => $name,\n                'id' => $id, '/bin/true' => $_REQUEST['q']);\n        }\n\n        return $this->json_encode(array_values($matched));\n\n    }\n\n    function editOrg($id) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(Organization::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif(!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        $info = array(\n            'title' => sprintf(__('Update %s'), $org->getName())\n        );\n\n        $forms = $org->getForms();\n        $action = \"#orgs/{$org->id}/profile\";\n\n        include(STAFFINC_DIR . 'templates/org-profile.tmpl.php');\n    }\n\n    function updateOrg($id, $profile=false) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(Organization::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif(!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        $errors = array();\n        if ($profile) {\n            if ($org->updateProfile($_POST, $errors))\n                Http::response(201, $org->to_json(), 'application/json');\n        } elseif ($org->update($_POST, $errors))\n             Http::response(201, $org->to_json(), 'application/json');\n\n        $forms = $org->getForms();\n\n        if ($profile) {\n            $action = \"#orgs/{$org->id}/profile\";\n            include(STAFFINC_DIR . 'templates/org-profile.tmpl.php');\n        }\n        else {\n            $action = \"#orgs/{$org->id}\";\n            include(STAFFINC_DIR . 'templates/org.tmpl.php');\n        }\n    }\n\n\n    function delete($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(Organization::PERM_DELETE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        $info = array();\n        if ($_SERVER['REQUEST_METHOD'] == 'DELETE') {\n            if ($org->delete())\n                 Http::response(204, 'Organization deleted successfully');\n            else\n                $info['error'] = sprintf('%s - %s', __('Unable to delete organization'), __('Please try again!'));\n        }\n\n        include(STAFFINC_DIR . 'templates/org-delete.tmpl.php');\n    }\n\n    function addUser($id, $userId=0, $remote=false) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif (!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        $info = array();\n        $info['title'] = __('Add User');\n        $info['action'] = '#orgs/'.$org->getId().'/add-user';\n        $info['onselect'] = 'ajax.php/orgs/'.$org->getId().'/add-user/';\n\n        if (!AuthenticationBackend::getSearchDirectories())\n            $info['lookup'] = 'local';\n\n        if ($_POST) {\n            if ($_POST['id']) { //Existing useer\n                if (!($user = User::lookup($_POST['id'])))\n                    $info['error'] = __('Unknown user selected');\n                elseif ($user->getOrgId() == $org->getId())\n                    $info['error'] = sprintf('%s already belongs to the organization',\n                            Format::htmlchars($user->getName()));\n            } else { //Creating new  user\n                $form = UserForm::getUserForm()->getForm($_POST);\n                $can_create = $thisstaff->hasPerm(User::PERM_CREATE);\n                if (!($user = User::fromForm($form, $can_create)))\n                    $info['error'] = sprintf('%s - %s', __('Error adding user'), __('Please try again!'));\n            }\n\n            if (!$info['error'] && $user && $user->setOrganization($org))\n                Http::response(201, $user->to_json(), 'application/json');\n            elseif (!$info['error'])\n                $info['error'] = sprintf('%s - %s', __('Unable to add user to the organization'), __('Please try again!'));\n\n        } elseif ($remote && $userId) {\n            list($bk, $userId) = explode(':', $userId, 2);\n            if (!($backend = AuthenticationBackend::getSearchDirectoryBackend($bk))\n                    || !($user_info = $backend->lookup($userId)))\n                Http::response(404, 'User not found');\n\n            $form = UserForm::getUserForm()->getForm($user_info);\n        } elseif ($userId) //Selected local user\n            $user = User::lookup($userId);\n\n        if ($user && $user->getOrgId()) {\n            if ($user->getOrgId() == $org->getId())\n                $info['warn'] = __('User already belongs to this organization!');\n            else\n                $info['warn'] = __(\"Are you sure you want to change the user's organization?\");\n        }\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/user-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n        return $resp;\n    }\n\n    function importUsers($org_id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(Organization::PERM_CREATE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($org = Organization::lookup($org_id)))\n            Http::response(404, 'No such organization');\n\n        $info = array(\n            'title' => __('Import Users'),\n            'action' => \"#orgs/$org_id/import-users\",\n            'upload_url' => \"orgs.php?a=import-users\",\n        );\n\n        if ($_POST) {\n            $status = User::importFromPost($_POST['pasted'],\n                array('org_id'=>$org_id));\n            if (is_string($status))\n                $info['error'] = $status;\n            else\n                Http::response(201, \"{\\\"count\\\": $status}\");\n        }\n        $info += Format::input($_POST);\n\n        include STAFFINC_DIR . 'templates/user-import.tmpl.php';\n    }\n\n    function addOrg() {\n        global $thisstaff;\n\n        if (!$thisstaff->hasPerm(Organization::PERM_CREATE))\n            Http::response(403, 'Permission Denied');\n\n        $info = array();\n\n        if ($_POST) {\n            $form = OrganizationForm::getDefaultForm()->getForm($_POST);\n            if (($org = Organization::fromForm($form)))\n                Http::response(201, $org->to_json(), 'application/json');\n\n            $info = array('error' =>sprintf('%s - %s', __('Error adding organization'), __('Please try again!')));\n        }\n\n        $info['title'] = __('Add New Organization');\n        $info['search'] = false;\n\n        return $this->_lookupform($form, $info);\n    }\n\n    function lookup() {\n        return $this->_lookupform();\n    }\n\n    function selectOrg($id) {\n\n        if ($id) $org = Organization::lookup($id);\n\n        $info = array('title' => __('Select Organization'));\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/org-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n        return $resp;\n\n    }\n\n    function createNote($id) {\n        if (!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        require_once INCLUDE_DIR . 'ajax.note.php';\n        $ajax = new NoteAjaxAPI();\n        return $ajax->createNote('O'.$id);\n    }\n\n    function _lookupform($form=null, $info=array()) {\n\n        if (!$info or !$info['title'])\n            $info += array('title' => __('Organization Lookup'));\n\n        if ($_POST && ($org = Organization::lookup($_POST['orgid']))) {\n            Http::response(201, $org->to_json(), 'application/json');\n        }\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/org-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n\n        return $resp;\n    }\n\n    function manageForms($org_id) {\n        $forms = DynamicFormEntry::forObject($org_id, 'O');\n        $info = array('action' => '#orgs/'.Format::htmlchars($org_id).'/forms/manage');\n        include(STAFFINC_DIR . 'templates/form-manage.tmpl.php');\n    }\n\n    function updateForms($org_id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, \"Login required\");\n        elseif (!$thisstaff->hasPerm(Organization::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif (!($org = Organization::lookup($org_id)))\n            Http::response(404, \"No such ticket\");\n        elseif (!isset($_POST['forms']))\n            Http::response(422, \"Send updated forms list\");\n\n        // Add new forms\n        $forms = DynamicFormEntry::forObject($org_id, 'O');\n        foreach ($_POST['forms'] as $sort => $id) {\n            $found = false;\n            foreach ($forms as $e) {\n                if ($e->get('form_id') == $id) {\n                    $e->set('sort', $sort);\n                    $e->save();\n                    $found = true;\n                    break;\n                }\n            }\n            // New form added\n            if (!$found && ($new = DynamicForm::lookup($id))) {\n                $org->addForm($new, $sort);\n            }\n        }\n\n        // Deleted forms\n        foreach ($forms as $idx => $e) {\n            if (!in_array($e->get('form_id'), $_POST['forms']))\n                $e->delete();\n        }\n\n        Http::response(201, 'Successfully managed');\n    }\n\n    function exportTickets($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$id)\n            Http::response(403, __('Organization ID Required'));\n\n        $org = Organization::lookup($id);\n        if (!$org)\n            Http::response(403, __('Organization Not Found'));\n\n        $queue = $org->getTicketsQueue();\n\n        if ($_POST) {\n            $api = new TicketsAjaxAPI();\n            return $api->queueExport($queue);\n        }\n\n        $info = array('action' => \"#orgs/$id/tickets/export\");\n\n        include STAFFINC_DIR . 'templates/queue-export.tmpl.php';\n    }\n}\n?>\n"], "fixing_code": ["<?php\n/*********************************************************************\n    ajax.orgs.php\n\n    Peter Rotich <peter@osticket.com>\n    Jared Hancock <jared@osticket.com>\n    Copyright (c)  2014 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\n\nif(!defined('INCLUDE_DIR')) die('403');\n\nrequire_once INCLUDE_DIR . 'class.organization.php';\ninclude_once(INCLUDE_DIR.'class.ticket.php');\nrequire_once INCLUDE_DIR.'ajax.tickets.php';\n\nclass OrgsAjaxAPI extends AjaxController {\n\n    function search($type = null) {\n\n        if(!isset($_REQUEST['q'])) {\n            Http::response(400, 'Query argument is required');\n        }\n\n        if (!$_REQUEST['q'])\n            return $this->json_encode(array());\n\n        $q = Format::sanitize($_REQUEST['q']);\n        $limit = isset($_REQUEST['limit']) ? (int) $_REQUEST['limit']:25;\n\n        if (strlen(Format::searchable($q)) < 3)\n            return $this->encode(array());\n\n        $orgs = Organization::objects()\n            ->values_flat('id', 'name')\n            ->limit($limit);\n\n        global $ost;\n        $orgs = $ost->searcher->find($q, $orgs);\n        $orgs->order_by(new SqlCode('__relevance__'), QuerySet::DESC)\n            ->distinct('id');\n\n        if (!count($orgs) && preg_match('`\\w$`u', $q)) {\n            // Do wildcard full-text search\n            $_REQUEST['q'] = $q.\"*\";\n            return $this->search($type);\n        }\n\n        $matched = array();\n        foreach ($orgs as $O) {\n            list($id, $name) = $O;\n            $matched[] = array('name' => Format::htmlchars($name), 'info' => $name,\n                'id' => $id, '/bin/true' => Format::htmlchars($q));\n        }\n\n        return $this->json_encode(array_values($matched));\n\n    }\n\n    function editOrg($id) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(Organization::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif(!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        $info = array(\n            'title' => sprintf(__('Update %s'), $org->getName())\n        );\n\n        $forms = $org->getForms();\n        $action = \"#orgs/{$org->id}/profile\";\n\n        include(STAFFINC_DIR . 'templates/org-profile.tmpl.php');\n    }\n\n    function updateOrg($id, $profile=false) {\n        global $thisstaff;\n\n        if(!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(Organization::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif(!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        $errors = array();\n        if ($profile) {\n            if ($org->updateProfile($_POST, $errors))\n                Http::response(201, $org->to_json(), 'application/json');\n        } elseif ($org->update($_POST, $errors))\n             Http::response(201, $org->to_json(), 'application/json');\n\n        $forms = $org->getForms();\n\n        if ($profile) {\n            $action = \"#orgs/{$org->id}/profile\";\n            include(STAFFINC_DIR . 'templates/org-profile.tmpl.php');\n        }\n        else {\n            $action = \"#orgs/{$org->id}\";\n            include(STAFFINC_DIR . 'templates/org.tmpl.php');\n        }\n    }\n\n\n    function delete($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(Organization::PERM_DELETE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        $info = array();\n        if ($_SERVER['REQUEST_METHOD'] == 'DELETE') {\n            if ($org->delete())\n                 Http::response(204, 'Organization deleted successfully');\n            else\n                $info['error'] = sprintf('%s - %s', __('Unable to delete organization'), __('Please try again!'));\n        }\n\n        include(STAFFINC_DIR . 'templates/org-delete.tmpl.php');\n    }\n\n    function addUser($id, $userId=0, $remote=false) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(User::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif (!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        $info = array();\n        $info['title'] = __('Add User');\n        $info['action'] = '#orgs/'.$org->getId().'/add-user';\n        $info['onselect'] = 'ajax.php/orgs/'.$org->getId().'/add-user/';\n\n        if (!AuthenticationBackend::getSearchDirectories())\n            $info['lookup'] = 'local';\n\n        if ($_POST) {\n            if ($_POST['id']) { //Existing useer\n                if (!($user = User::lookup($_POST['id'])))\n                    $info['error'] = __('Unknown user selected');\n                elseif ($user->getOrgId() == $org->getId())\n                    $info['error'] = sprintf('%s already belongs to the organization',\n                            Format::htmlchars($user->getName()));\n            } else { //Creating new  user\n                $form = UserForm::getUserForm()->getForm($_POST);\n                $can_create = $thisstaff->hasPerm(User::PERM_CREATE);\n                if (!($user = User::fromForm($form, $can_create)))\n                    $info['error'] = sprintf('%s - %s', __('Error adding user'), __('Please try again!'));\n            }\n\n            if (!$info['error'] && $user && $user->setOrganization($org))\n                Http::response(201, $user->to_json(), 'application/json');\n            elseif (!$info['error'])\n                $info['error'] = sprintf('%s - %s', __('Unable to add user to the organization'), __('Please try again!'));\n\n        } elseif ($remote && $userId) {\n            list($bk, $userId) = explode(':', $userId, 2);\n            if (!($backend = AuthenticationBackend::getSearchDirectoryBackend($bk))\n                    || !($user_info = $backend->lookup($userId)))\n                Http::response(404, 'User not found');\n\n            $form = UserForm::getUserForm()->getForm($user_info);\n        } elseif ($userId) //Selected local user\n            $user = User::lookup($userId);\n\n        if ($user && $user->getOrgId()) {\n            if ($user->getOrgId() == $org->getId())\n                $info['warn'] = __('User already belongs to this organization!');\n            else\n                $info['warn'] = __(\"Are you sure you want to change the user's organization?\");\n        }\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/user-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n        return $resp;\n    }\n\n    function importUsers($org_id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Login Required');\n        elseif (!$thisstaff->hasPerm(Organization::PERM_CREATE))\n            Http::response(403, 'Permission Denied');\n        elseif (!($org = Organization::lookup($org_id)))\n            Http::response(404, 'No such organization');\n\n        $info = array(\n            'title' => __('Import Users'),\n            'action' => \"#orgs/$org_id/import-users\",\n            'upload_url' => \"orgs.php?a=import-users\",\n        );\n\n        if ($_POST) {\n            $status = User::importFromPost($_POST['pasted'],\n                array('org_id'=>$org_id));\n            if (is_string($status))\n                $info['error'] = $status;\n            else\n                Http::response(201, \"{\\\"count\\\": $status}\");\n        }\n        $info += Format::input($_POST);\n\n        include STAFFINC_DIR . 'templates/user-import.tmpl.php';\n    }\n\n    function addOrg() {\n        global $thisstaff;\n\n        if (!$thisstaff->hasPerm(Organization::PERM_CREATE))\n            Http::response(403, 'Permission Denied');\n\n        $info = array();\n\n        if ($_POST) {\n            $form = OrganizationForm::getDefaultForm()->getForm($_POST);\n            if (($org = Organization::fromForm($form)))\n                Http::response(201, $org->to_json(), 'application/json');\n\n            $info = array('error' =>sprintf('%s - %s', __('Error adding organization'), __('Please try again!')));\n        }\n\n        $info['title'] = __('Add New Organization');\n        $info['search'] = false;\n\n        return $this->_lookupform($form, $info);\n    }\n\n    function lookup() {\n        return $this->_lookupform();\n    }\n\n    function selectOrg($id) {\n\n        if ($id) $org = Organization::lookup($id);\n\n        $info = array('title' => __('Select Organization'));\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/org-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n        return $resp;\n\n    }\n\n    function createNote($id) {\n        if (!($org = Organization::lookup($id)))\n            Http::response(404, 'Unknown organization');\n\n        require_once INCLUDE_DIR . 'ajax.note.php';\n        $ajax = new NoteAjaxAPI();\n        return $ajax->createNote('O'.$id);\n    }\n\n    function _lookupform($form=null, $info=array()) {\n\n        if (!$info or !$info['title'])\n            $info += array('title' => __('Organization Lookup'));\n\n        if ($_POST && ($org = Organization::lookup($_POST['orgid']))) {\n            Http::response(201, $org->to_json(), 'application/json');\n        }\n\n        ob_start();\n        include(STAFFINC_DIR . 'templates/org-lookup.tmpl.php');\n        $resp = ob_get_contents();\n        ob_end_clean();\n\n        return $resp;\n    }\n\n    function manageForms($org_id) {\n        $forms = DynamicFormEntry::forObject($org_id, 'O');\n        $info = array('action' => '#orgs/'.Format::htmlchars($org_id).'/forms/manage');\n        include(STAFFINC_DIR . 'templates/form-manage.tmpl.php');\n    }\n\n    function updateForms($org_id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, \"Login required\");\n        elseif (!$thisstaff->hasPerm(Organization::PERM_EDIT))\n            Http::response(403, 'Permission Denied');\n        elseif (!($org = Organization::lookup($org_id)))\n            Http::response(404, \"No such ticket\");\n        elseif (!isset($_POST['forms']))\n            Http::response(422, \"Send updated forms list\");\n\n        // Add new forms\n        $forms = DynamicFormEntry::forObject($org_id, 'O');\n        foreach ($_POST['forms'] as $sort => $id) {\n            $found = false;\n            foreach ($forms as $e) {\n                if ($e->get('form_id') == $id) {\n                    $e->set('sort', $sort);\n                    $e->save();\n                    $found = true;\n                    break;\n                }\n            }\n            // New form added\n            if (!$found && ($new = DynamicForm::lookup($id))) {\n                $org->addForm($new, $sort);\n            }\n        }\n\n        // Deleted forms\n        foreach ($forms as $idx => $e) {\n            if (!in_array($e->get('form_id'), $_POST['forms']))\n                $e->delete();\n        }\n\n        Http::response(201, 'Successfully managed');\n    }\n\n    function exportTickets($id) {\n        global $thisstaff;\n\n        if (!$thisstaff)\n            Http::response(403, 'Agent login is required');\n        elseif (!$id)\n            Http::response(403, __('Organization ID Required'));\n\n        $org = Organization::lookup($id);\n        if (!$org)\n            Http::response(403, __('Organization Not Found'));\n\n        $queue = $org->getTicketsQueue();\n\n        if ($_POST) {\n            $api = new TicketsAjaxAPI();\n            return $api->queueExport($queue);\n        }\n\n        $info = array('action' => \"#orgs/$id/tickets/export\");\n\n        include STAFFINC_DIR . 'templates/queue-export.tmpl.php';\n    }\n}\n?>\n"], "filenames": ["include/ajax.orgs.php"], "buggy_code_start_loc": [33], "buggy_code_end_loc": [59], "fixing_code_start_loc": [33], "fixing_code_end_loc": [59], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository osticket/osticket prior to v1.16.6.", "other": {"cve": {"id": "CVE-2023-1317", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-10T16:15:10.777", "lastModified": "2023-03-13T03:46:38.000", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository osticket/osticket prior to v1.16.6."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enhancesoft:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.6", "matchCriteriaId": "2B613AD0-4A4B-4AE9-8971-66464AEE67B6"}]}]}], "references": [{"url": "https://github.com/osticket/osticket/commit/daee20fdd8ac926d9aee700b201ac2cb35d448ca", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/c3e27af2-358b-490b-9baf-e451663e4e5f", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osticket/osticket/commit/daee20fdd8ac926d9aee700b201ac2cb35d448ca"}}