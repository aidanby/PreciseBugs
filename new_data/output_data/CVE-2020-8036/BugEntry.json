{"buggy_code": ["/*\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that: (1) source code\n * distributions retain the above copyright notice and this paragraph\n * in its entirety, and (2) distributions including binary code include\n * the above copyright notice and this paragraph in its entirety in\n * the documentation or other materials provided with the distribution.\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND\n * WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT\n * LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n * FOR A PARTICULAR PURPOSE.\n *\n * Original code by Francesco Fondelli (francesco dot fondelli, gmail dot com)\n */\n\n/* \\summary: Autosar SOME/IP Protocol printer */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"netdissect-stdinc.h\"\n#include \"netdissect.h\"\n#include \"extract.h\"\n#include \"udp.h\"\n\n/*\n * SOMEIP Header (R19-11)\n *\n *     0                   1                   2                   3\n *     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    |               Message ID (Service ID/Method ID)               |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    |                           Length                              |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    |               Request ID (Client ID/Session ID)               |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    | Protocol Ver  | Interface Ver | Message Type  |  Return Code  |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    |                            Payload                            |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n */\n\nstruct tok message_type_values[] = {\n    { 0x00, \"REQUEST\" },\n    { 0x01, \"REQUEST_NO_RETURN\" },\n    { 0x02, \"NOTIFICATION\" },\n    { 0x80, \"RESPONSE\" },\n    { 0x81, \"ERROR\" },\n    { 0x20, \"TP_REQUEST\" },\n    { 0x21, \"TP_REQUEST_NO_RETURN\" },\n    { 0x22, \"TP_NOTIFICATION\" },\n    { 0xa0, \"TP_RESPONSE\" },\n    { 0xa1, \"TP_ERROR\" },\n    { 0, NULL }\n};\n\nstruct tok return_code_values[] = {\n    { 0x00, \"E_OK\" },\n    { 0x01, \"E_NOT_OK\" },\n    { 0x02, \"E_UNKNOWN_SERVICE\" },\n    { 0x03, \"E_UNKNOWN_METHOD\" },\n    { 0x04, \"E_NOT_READY\" },\n    { 0x05, \"E_NOT_REACHABLE\" },\n    { 0x06, \"E_TIMEOUT\" },\n    { 0x07, \"E_WRONG_PROTOCOL_VERSION\" },\n    { 0x08, \"E_WRONG_INTERFACE_VERSION\" },\n    { 0x09, \"E_MALFORMED_MESSAGE\" },\n    { 0x0a, \"E_WRONG_MESSAGE_TYPE\" },\n    { 0x0b, \"E_E2E_REPEATED\" },\n    { 0x0c, \"E_E2E_WRONG_SEQUENCE\" },\n    { 0x0d, \"E_E2E\" },\n    { 0x0e, \"E_E2E_NOT_AVAILABLE\" },\n    { 0x0f, \"E_E2E_NO_NEW_DATA\" },\n};\n\nvoid\nsomeip_print(netdissect_options *ndo, const u_char *bp, u_int len)\n{\n    uint32_t message_id;\n    uint16_t service_id;\n    uint16_t method_or_event_id;\n    uint8_t event_flag;\n    uint32_t message_len;\n    uint32_t request_id;\n    uint16_t client_id;\n    uint16_t session_id;\n    uint8_t protocol_version;\n    uint8_t interface_version;\n    uint8_t message_type;\n    uint8_t return_code;\n\n    ndo->ndo_protocol = \"someip\";\n\n    if (len < 16) {\n        nd_print_trunc(ndo);\n        return;\n    }\n\n    message_id = GET_BE_U_4(bp);\n    service_id = message_id >> 16;\n    event_flag = (message_id & 0x00008000) >> 15;\n    method_or_event_id = message_id & 0x00007FFF;\n    bp += 4;\n\n    message_len = GET_BE_U_4(bp);\n    bp += 4;\n\n    request_id = GET_BE_U_4(bp);\n    client_id = request_id >> 16;\n    session_id = request_id & 0x0000FFFF;\n    bp += 4;\n\n    protocol_version = GET_U_1(bp);\n    bp += 1;\n\n    interface_version = GET_U_1(bp);\n    bp += 1;\n\n    message_type = GET_U_1(bp);\n    bp += 1;\n\n    return_code = GET_U_1(bp);\n    bp += 1;\n\n    ND_PRINT(\"SOMEIP, service %u, %s %u, len %u, client %u, session %u, \"\n\t     \"pver %u, iver %u, msgtype %s, retcode %s\\n\",\n\t     service_id, event_flag ? \"event\" : \"method\", method_or_event_id,\n\t     message_len, client_id, session_id, protocol_version,\n\t     interface_version,\n\t     tok2str(message_type_values, \"Unknown\", message_type),\n\t     tok2str(return_code_values, \"Unknown\", return_code));\n    return;\n}\n"], "fixing_code": ["/*\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that: (1) source code\n * distributions retain the above copyright notice and this paragraph\n * in its entirety, and (2) distributions including binary code include\n * the above copyright notice and this paragraph in its entirety in\n * the documentation or other materials provided with the distribution.\n * THIS SOFTWARE IS PROVIDED ``AS IS'' AND\n * WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, WITHOUT\n * LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n * FOR A PARTICULAR PURPOSE.\n *\n * Original code by Francesco Fondelli (francesco dot fondelli, gmail dot com)\n */\n\n/* \\summary: Autosar SOME/IP Protocol printer */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"netdissect-stdinc.h\"\n#include \"netdissect.h\"\n#include \"extract.h\"\n#include \"udp.h\"\n\n/*\n * SOMEIP Header (R19-11)\n *\n *     0                   1                   2                   3\n *     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    |               Message ID (Service ID/Method ID)               |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    |                           Length                              |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    |               Request ID (Client ID/Session ID)               |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    | Protocol Ver  | Interface Ver | Message Type  |  Return Code  |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *    |                            Payload                            |\n *    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n */\n\nstatic const struct tok message_type_values[] = {\n    { 0x00, \"REQUEST\" },\n    { 0x01, \"REQUEST_NO_RETURN\" },\n    { 0x02, \"NOTIFICATION\" },\n    { 0x80, \"RESPONSE\" },\n    { 0x81, \"ERROR\" },\n    { 0x20, \"TP_REQUEST\" },\n    { 0x21, \"TP_REQUEST_NO_RETURN\" },\n    { 0x22, \"TP_NOTIFICATION\" },\n    { 0xa0, \"TP_RESPONSE\" },\n    { 0xa1, \"TP_ERROR\" },\n    { 0, NULL }\n};\n\nstatic const struct tok return_code_values[] = {\n    { 0x00, \"E_OK\" },\n    { 0x01, \"E_NOT_OK\" },\n    { 0x02, \"E_UNKNOWN_SERVICE\" },\n    { 0x03, \"E_UNKNOWN_METHOD\" },\n    { 0x04, \"E_NOT_READY\" },\n    { 0x05, \"E_NOT_REACHABLE\" },\n    { 0x06, \"E_TIMEOUT\" },\n    { 0x07, \"E_WRONG_PROTOCOL_VERSION\" },\n    { 0x08, \"E_WRONG_INTERFACE_VERSION\" },\n    { 0x09, \"E_MALFORMED_MESSAGE\" },\n    { 0x0a, \"E_WRONG_MESSAGE_TYPE\" },\n    { 0x0b, \"E_E2E_REPEATED\" },\n    { 0x0c, \"E_E2E_WRONG_SEQUENCE\" },\n    { 0x0d, \"E_E2E\" },\n    { 0x0e, \"E_E2E_NOT_AVAILABLE\" },\n    { 0x0f, \"E_E2E_NO_NEW_DATA\" },\n    { 0, NULL }\n};\n\nvoid\nsomeip_print(netdissect_options *ndo, const u_char *bp, u_int len)\n{\n    uint32_t message_id;\n    uint16_t service_id;\n    uint16_t method_or_event_id;\n    uint8_t event_flag;\n    uint32_t message_len;\n    uint32_t request_id;\n    uint16_t client_id;\n    uint16_t session_id;\n    uint8_t protocol_version;\n    uint8_t interface_version;\n    uint8_t message_type;\n    uint8_t return_code;\n\n    ndo->ndo_protocol = \"someip\";\n\n    if (len < 16) {\n        nd_print_trunc(ndo);\n        return;\n    }\n\n    message_id = GET_BE_U_4(bp);\n    service_id = message_id >> 16;\n    event_flag = (message_id & 0x00008000) >> 15;\n    method_or_event_id = message_id & 0x00007FFF;\n    bp += 4;\n\n    message_len = GET_BE_U_4(bp);\n    bp += 4;\n\n    request_id = GET_BE_U_4(bp);\n    client_id = request_id >> 16;\n    session_id = request_id & 0x0000FFFF;\n    bp += 4;\n\n    protocol_version = GET_U_1(bp);\n    bp += 1;\n\n    interface_version = GET_U_1(bp);\n    bp += 1;\n\n    message_type = GET_U_1(bp);\n    bp += 1;\n\n    return_code = GET_U_1(bp);\n    bp += 1;\n\n    ND_PRINT(\"SOMEIP, service %u, %s %u, len %u, client %u, session %u, \"\n\t     \"pver %u, iver %u, msgtype %s, retcode %s\\n\",\n\t     service_id, event_flag ? \"event\" : \"method\", method_or_event_id,\n\t     message_len, client_id, session_id, protocol_version,\n\t     interface_version,\n\t     tok2str(message_type_values, \"Unknown\", message_type),\n\t     tok2str(return_code_values, \"Unknown\", return_code));\n    return;\n}\n"], "filenames": ["print-someip.c"], "buggy_code_start_loc": [45], "buggy_code_end_loc": [75], "fixing_code_start_loc": [45], "fixing_code_end_loc": [77], "type": "CWE-125", "message": "The tok2strbuf() function in tcpdump 4.10.0-PRE-GIT was used by the SOME/IP dissector in an unsafe way.", "other": {"cve": {"id": "CVE-2020-8036", "sourceIdentifier": "security@tcpdump.org", "published": "2020-11-04T18:15:20.047", "lastModified": "2020-11-25T18:45:11.950", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The tok2strbuf() function in tcpdump 4.10.0-PRE-GIT was used by the SOME/IP dissector in an unsafe way."}, {"lang": "es", "value": "La funci\u00f3n tok2strbuf() en tcpdump versi\u00f3n 4.10.0-PRE-GIT, fue usada por el disector SOME/IP en una manera no segura"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tcpdump:tcpdump:4.10.0:*:*:*:*:*:*:*", "matchCriteriaId": "FA8D860A-596B-48C1-AB87-3EAA74A725E1"}]}]}], "references": [{"url": "https://github.com/the-tcpdump-group/tcpdump/commit/e2256b4f2506102be2c6f7976f84f0d607c53d43", "source": "security@tcpdump.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/the-tcpdump-group/tcpdump/commit/e2256b4f2506102be2c6f7976f84f0d607c53d43"}}