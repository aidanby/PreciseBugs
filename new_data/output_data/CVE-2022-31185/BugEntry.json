{"buggy_code": ["import copy\nimport hashlib\nimport math\nimport secrets\nimport typing\nfrom http import HTTPStatus\n\nimport orjson\nfrom fastapi import APIRouter, Form, Request\nfrom fastapi.responses import HTMLResponse, RedirectResponse, Response\nfrom sqlalchemy import and_, or_\n\nimport aurweb.config\nfrom aurweb import cookies, db, defaults, l10n, logging, models, util\nfrom aurweb.auth import account_type_required, requires_auth, requires_guest\nfrom aurweb.captcha import get_captcha_salts\nfrom aurweb.exceptions import ValidationError\nfrom aurweb.l10n import get_translator_for_request\nfrom aurweb.models import account_type as at\nfrom aurweb.models.api_key import ApiKey\nfrom aurweb.models.ssh_pub_key import get_fingerprint\nfrom aurweb.models.user import generate_resetkey\nfrom aurweb.scripts.notify import ResetKeyNotification, WelcomeNotification\nfrom aurweb.templates import make_context, make_variable_context, render_template\nfrom aurweb.users import update, validate\nfrom aurweb.users.util import get_user_by_name\n\nrouter = APIRouter()\nlogger = logging.get_logger(__name__)\n\n\n@router.get(\"/passreset\", response_class=HTMLResponse)\n@requires_guest\nasync def passreset(request: Request):\n    context = await make_variable_context(request, \"Password Reset\")\n    return render_template(request, \"passreset.html\", context)\n\n\n@router.post(\"/passreset\", response_class=HTMLResponse)\n@requires_guest\nasync def passreset_post(\n    request: Request,\n    user: str = Form(...),\n    resetkey: str = Form(default=None),\n    password: str = Form(default=None),\n    confirm: str = Form(default=None),\n):\n    context = await make_variable_context(request, \"Password Reset\")\n\n    # The user parameter being required, we can match against\n    user = db.query(\n        models.User, or_(models.User.Username == user, models.User.Email == user)\n    ).first()\n    if not user:\n        context[\"errors\"] = [\"Invalid e-mail.\"]\n        return render_template(\n            request, \"passreset.html\", context, status_code=HTTPStatus.NOT_FOUND\n        )\n\n    db.refresh(user)\n    if resetkey:\n        context[\"resetkey\"] = resetkey\n\n        if not user.ResetKey or resetkey != user.ResetKey:\n            context[\"errors\"] = [\"Invalid e-mail.\"]\n            return render_template(\n                request, \"passreset.html\", context, status_code=HTTPStatus.NOT_FOUND\n            )\n\n        if not user or not password:\n            context[\"errors\"] = [\"Missing a required field.\"]\n            return render_template(\n                request, \"passreset.html\", context, status_code=HTTPStatus.BAD_REQUEST\n            )\n\n        if password != confirm:\n            # If the provided password does not match the provided confirm.\n            context[\"errors\"] = [\"Password fields do not match.\"]\n            return render_template(\n                request, \"passreset.html\", context, status_code=HTTPStatus.BAD_REQUEST\n            )\n\n        if len(password) < models.User.minimum_passwd_length():\n            # Translate the error here, which simplifies error output\n            # in the jinja2 template.\n            _ = get_translator_for_request(request)\n            context[\"errors\"] = [\n                _(\"Your password must be at least %s characters.\")\n                % (str(models.User.minimum_passwd_length()))\n            ]\n            return render_template(\n                request, \"passreset.html\", context, status_code=HTTPStatus.BAD_REQUEST\n            )\n\n        # We got to this point; everything matched up. Update the password\n        # and remove the ResetKey.\n        with db.begin():\n            user.ResetKey = str()\n            if user.session:\n                db.delete(user.session)\n            user.update_password(password)\n\n        # Render ?step=complete.\n        return RedirectResponse(\n            url=\"/passreset?step=complete\", status_code=HTTPStatus.SEE_OTHER\n        )\n\n    # If we got here, we continue with issuing a resetkey for the user.\n    resetkey = generate_resetkey()\n    with db.begin():\n        user.ResetKey = resetkey\n\n    ResetKeyNotification(user.ID).send()\n\n    # Render ?step=confirm.\n    return RedirectResponse(\n        url=\"/passreset?step=confirm\", status_code=HTTPStatus.SEE_OTHER\n    )\n\n\ndef process_account_form(request: Request, user: models.User, args: dict):\n    \"\"\"Process an account form. All fields are optional and only checks\n    requirements in the case they are present.\n\n    ```\n    context = await make_variable_context(request, \"Accounts\")\n    ok, errors = process_account_form(request, user, **kwargs)\n    if not ok:\n        context[\"errors\"] = errors\n        return render_template(request, \"some_account_template.html\", context)\n    ```\n\n    :param request: An incoming FastAPI request\n    :param user: The user model of the account being processed\n    :param args: A dictionary of arguments generated via request.form()\n    :return: A (passed processing boolean, list of errors) tuple\n    \"\"\"\n\n    # Get a local translator.\n    _ = get_translator_for_request(request)\n\n    checks = [\n        validate.is_banned,\n        validate.invalid_user_password,\n        validate.invalid_fields,\n        validate.invalid_suspend_permission,\n        validate.invalid_username,\n        validate.invalid_password,\n        validate.invalid_email,\n        validate.invalid_backup_email,\n        validate.invalid_homepage,\n        validate.invalid_pgp_key,\n        validate.invalid_ssh_pubkey,\n        validate.invalid_language,\n        validate.invalid_timezone,\n        validate.username_in_use,\n        validate.email_in_use,\n        validate.invalid_account_type,\n        validate.invalid_captcha,\n    ]\n\n    try:\n        for check in checks:\n            check(**args, request=request, user=user, _=_)\n    except ValidationError as exc:\n        return (False, exc.data)\n\n    return (True, [])\n\n\ndef make_account_form_context(\n    context: dict, request: Request, user: models.User, args: dict\n):\n    \"\"\"Modify a FastAPI context and add attributes for the account form.\n\n    :param context: FastAPI context\n    :param request: FastAPI request\n    :param user: Target user\n    :param args: Persistent arguments: request.form()\n    :return: FastAPI context adjusted for account form\n    \"\"\"\n    # Do not modify the original context.\n    context = copy.copy(context)\n\n    context[\"account_types\"] = list(\n        filter(\n            lambda e: request.user.AccountTypeID >= e[0],\n            [\n                (at.USER_ID, f\"Normal {at.USER}\"),\n                (at.TRUSTED_USER_ID, at.TRUSTED_USER),\n                (at.DEVELOPER_ID, at.DEVELOPER),\n                (at.TRUSTED_USER_AND_DEV_ID, at.TRUSTED_USER_AND_DEV),\n            ],\n        )\n    )\n\n    if request.user.is_authenticated():\n        context[\"username\"] = args.get(\"U\", user.Username)\n        context[\"account_type\"] = args.get(\"T\", user.AccountType.ID)\n        context[\"suspended\"] = args.get(\"S\", user.Suspended)\n        context[\"email\"] = args.get(\"E\", user.Email)\n        context[\"hide_email\"] = args.get(\"H\", user.HideEmail)\n        context[\"backup_email\"] = args.get(\"BE\", user.BackupEmail)\n        context[\"realname\"] = args.get(\"R\", user.RealName)\n        context[\"homepage\"] = args.get(\"HP\", user.Homepage or str())\n        context[\"ircnick\"] = args.get(\"I\", user.IRCNick)\n        context[\"pgp\"] = args.get(\"K\", user.PGPKey or str())\n        context[\"lang\"] = args.get(\"L\", user.LangPreference)\n        context[\"tz\"] = args.get(\"TZ\", user.Timezone)\n        ssh_pk = user.ssh_pub_key.PubKey if user.ssh_pub_key else str()\n        context[\"ssh_pk\"] = args.get(\"PK\", ssh_pk)\n        context[\"cn\"] = args.get(\"CN\", user.CommentNotify)\n        context[\"un\"] = args.get(\"UN\", user.UpdateNotify)\n        context[\"on\"] = args.get(\"ON\", user.OwnershipNotify)\n        context[\"inactive\"] = args.get(\"J\", user.InactivityTS != 0)\n    else:\n        context[\"username\"] = args.get(\"U\", str())\n        context[\"account_type\"] = args.get(\"T\", at.USER_ID)\n        context[\"suspended\"] = args.get(\"S\", False)\n        context[\"email\"] = args.get(\"E\", str())\n        context[\"hide_email\"] = args.get(\"H\", False)\n        context[\"backup_email\"] = args.get(\"BE\", str())\n        context[\"realname\"] = args.get(\"R\", str())\n        context[\"homepage\"] = args.get(\"HP\", str())\n        context[\"ircnick\"] = args.get(\"I\", str())\n        context[\"pgp\"] = args.get(\"K\", str())\n        context[\"lang\"] = args.get(\"L\", context.get(\"language\"))\n        context[\"tz\"] = args.get(\"TZ\", context.get(\"timezone\"))\n        context[\"ssh_pk\"] = args.get(\"PK\", str())\n        context[\"cn\"] = args.get(\"CN\", True)\n        context[\"un\"] = args.get(\"UN\", False)\n        context[\"on\"] = args.get(\"ON\", True)\n        context[\"inactive\"] = args.get(\"J\", False)\n\n    context[\"password\"] = args.get(\"P\", str())\n    context[\"confirm\"] = args.get(\"C\", str())\n\n    return context\n\n\n@router.get(\"/register\", response_class=HTMLResponse)\n@requires_guest\nasync def account_register(\n    request: Request,\n    U: str = Form(default=str()),  # Username\n    E: str = Form(default=str()),  # Email\n    H: str = Form(default=False),  # Hide Email\n    BE: str = Form(default=None),  # Backup Email\n    R: str = Form(default=None),  # Real Name\n    HP: str = Form(default=None),  # Homepage\n    I: str = Form(default=None),  # IRC Nick # noqa: E741\n    K: str = Form(default=None),  # PGP Key FP\n    L: str = Form(default=aurweb.config.get(\"options\", \"default_lang\")),\n    TZ: str = Form(default=aurweb.config.get(\"options\", \"default_timezone\")),\n    PK: str = Form(default=None),\n    CN: bool = Form(default=False),  # Comment Notify\n    CU: bool = Form(default=False),  # Update Notify\n    CO: bool = Form(default=False),  # Owner Notify\n    captcha: str = Form(default=str()),\n):\n    context = await make_variable_context(request, \"Register\")\n    context[\"captcha_salt\"] = get_captcha_salts()[0]\n    context = make_account_form_context(context, request, None, dict())\n    return render_template(request, \"register.html\", context)\n\n\n@router.post(\"/register\", response_class=HTMLResponse)\n@requires_guest\nasync def account_register_post(\n    request: Request,\n    U: str = Form(default=str()),  # Username\n    E: str = Form(default=str()),  # Email\n    H: str = Form(default=False),  # Hide Email\n    BE: str = Form(default=None),  # Backup Email\n    R: str = Form(default=\"\"),  # Real Name\n    HP: str = Form(default=None),  # Homepage\n    I: str = Form(default=None),  # IRC Nick # noqa: E741\n    K: str = Form(default=None),  # PGP Key\n    L: str = Form(default=aurweb.config.get(\"options\", \"default_lang\")),\n    TZ: str = Form(default=aurweb.config.get(\"options\", \"default_timezone\")),\n    PK: str = Form(default=None),  # SSH PubKey\n    CN: bool = Form(default=False),\n    UN: bool = Form(default=False),\n    ON: bool = Form(default=False),\n    captcha: str = Form(default=None),\n    captcha_salt: str = Form(...),\n):\n    context = await make_variable_context(request, \"Register\")\n    args = dict(await request.form())\n\n    context = make_account_form_context(context, request, None, args)\n    ok, errors = process_account_form(request, request.user, args)\n    if not ok:\n        # If the field values given do not meet the requirements,\n        # return HTTP 400 with an error.\n        context[\"errors\"] = errors\n        return render_template(\n            request, \"register.html\", context, status_code=HTTPStatus.BAD_REQUEST\n        )\n\n    if not captcha:\n        context[\"errors\"] = [\"The CAPTCHA is missing.\"]\n        return render_template(\n            request, \"register.html\", context, status_code=HTTPStatus.BAD_REQUEST\n        )\n\n    # Create a user with no password with a resetkey, then send\n    # an email off about it.\n    resetkey = generate_resetkey()\n\n    # By default, we grab the User account type to associate with.\n    atype = db.query(\n        models.AccountType, models.AccountType.AccountType == \"User\"\n    ).first()\n\n    # Create a user given all parameters available.\n    with db.begin():\n        user = db.create(\n            models.User,\n            Username=U,\n            Email=E,\n            HideEmail=H,\n            BackupEmail=BE,\n            RealName=R,\n            Homepage=HP,\n            IRCNick=I,\n            PGPKey=K,\n            LangPreference=L,\n            Timezone=TZ,\n            CommentNotify=CN,\n            UpdateNotify=UN,\n            OwnershipNotify=ON,\n            ResetKey=resetkey,\n            AccountType=atype,\n        )\n\n    # If a PK was given and either one does not exist or the given\n    # PK mismatches the existing user's SSHPubKey.PubKey.\n    if PK:\n        # Get the second element in the PK, which is the actual key.\n        pubkey = PK.strip().rstrip()\n        parts = pubkey.split(\" \")\n        if len(parts) == 3:\n            # Remove the host part.\n            pubkey = parts[0] + \" \" + parts[1]\n        fingerprint = get_fingerprint(pubkey)\n        with db.begin():\n            user.ssh_pub_key = models.SSHPubKey(\n                UserID=user.ID, PubKey=pubkey, Fingerprint=fingerprint\n            )\n\n    # Send a reset key notification to the new user.\n    WelcomeNotification(user.ID).send()\n\n    context[\"complete\"] = True\n    context[\"user\"] = user\n    return render_template(request, \"register.html\", context)\n\n\ndef cannot_edit(\n    request: Request, user: models.User\n) -> typing.Optional[RedirectResponse]:\n    \"\"\"\n    Decide if `request.user` cannot edit `user`.\n\n    If the request user can edit the target user, None is returned.\n    Otherwise, a redirect is returned to /account/{user.Username}.\n\n    :param request: FastAPI request\n    :param user: Target user to be edited\n    :return: RedirectResponse if approval != granted else None\n    \"\"\"\n    approved = request.user.can_edit_user(user)\n    if not approved and (to := \"/\"):\n        if user:\n            to = f\"/account/{user.Username}\"\n        return RedirectResponse(to, status_code=HTTPStatus.SEE_OTHER)\n    return None\n\n\n@router.get(\"/account/{username}/edit\", response_class=HTMLResponse)\n@requires_auth\nasync def account_edit(request: Request, username: str):\n    user = db.query(models.User, models.User.Username == username).first()\n\n    response = cannot_edit(request, user)\n    if response:\n        return response\n\n    context = await make_variable_context(request, \"Accounts\")\n    context[\"user\"] = db.refresh(user)\n\n    context = make_account_form_context(context, request, user, dict())\n    return render_template(request, \"account/edit.html\", context)\n\n\n@router.post(\"/account/{username}/edit\", response_class=HTMLResponse)\n@requires_auth\nasync def account_edit_post(\n    request: Request,\n    username: str,\n    U: str = Form(default=str()),  # Username\n    J: bool = Form(default=False),\n    E: str = Form(default=str()),  # Email\n    H: str = Form(default=False),  # Hide Email\n    BE: str = Form(default=None),  # Backup Email\n    R: str = Form(default=None),  # Real Name\n    HP: str = Form(default=None),  # Homepage\n    I: str = Form(default=None),  # IRC Nick # noqa: E741\n    K: str = Form(default=None),  # PGP Key\n    L: str = Form(aurweb.config.get(\"options\", \"default_lang\")),\n    TZ: str = Form(aurweb.config.get(\"options\", \"default_timezone\")),\n    P: str = Form(default=str()),  # New Password\n    C: str = Form(default=None),  # Password Confirm\n    PK: str = Form(default=None),  # PubKey\n    CN: bool = Form(default=False),  # Comment Notify\n    UN: bool = Form(default=False),  # Update Notify\n    ON: bool = Form(default=False),  # Owner Notify\n    T: int = Form(default=None),\n    passwd: str = Form(default=str()),\n):\n    user = db.query(models.User).filter(models.User.Username == username).first()\n    response = cannot_edit(request, user)\n    if response:\n        return response\n\n    context = await make_variable_context(request, \"Accounts\")\n    context[\"user\"] = db.refresh(user)\n\n    args = dict(await request.form())\n    context = make_account_form_context(context, request, user, args)\n    ok, errors = process_account_form(request, user, args)\n\n    if not passwd:\n        context[\"errors\"] = [\"Invalid password.\"]\n        return render_template(\n            request, \"account/edit.html\", context, status_code=HTTPStatus.BAD_REQUEST\n        )\n\n    if not ok:\n        context[\"errors\"] = errors\n        return render_template(\n            request, \"account/edit.html\", context, status_code=HTTPStatus.BAD_REQUEST\n        )\n\n    updates = [\n        update.simple,\n        update.language,\n        update.timezone,\n        update.ssh_pubkey,\n        update.account_type,\n        update.password,\n    ]\n\n    for f in updates:\n        f(**args, request=request, user=user, context=context)\n\n    if not errors:\n        context[\"complete\"] = True\n\n    # Update cookies with requests, in case they were changed.\n    response = render_template(request, \"account/edit.html\", context)\n    return cookies.update_response_cookies(request, response, aurtz=TZ, aurlang=L)\n\n\n@router.get(\"/account/{username}\")\nasync def account(request: Request, username: str):\n    _ = l10n.get_translator_for_request(request)\n    context = await make_variable_context(request, _(\"Account\") + \" \" + username)\n    if not request.user.is_authenticated():\n        return render_template(\n            request, \"account/show.html\", context, status_code=HTTPStatus.UNAUTHORIZED\n        )\n\n    # Get related User record, if possible.\n    user = get_user_by_name(username)\n    context[\"user\"] = user\n\n    # Format PGPKey for display with a space between each 4 characters.\n    k = user.PGPKey or str()\n    context[\"pgp_key\"] = \" \".join([k[i : i + 4] for i in range(0, len(k), 4)])\n\n    login_ts = None\n    session = db.query(models.Session).filter(models.Session.UsersID == user.ID).first()\n    if session:\n        login_ts = user.session.LastUpdateTS\n    context[\"login_ts\"] = login_ts\n\n    # Render the template.\n    return render_template(request, \"account/show.html\", context)\n\n\n@router.get(\"/account/{username}/comments\")\n@requires_auth\nasync def account_comments(request: Request, username: str):\n    user = get_user_by_name(username)\n    context = make_context(request, \"Accounts\")\n    context[\"username\"] = username\n    context[\"comments\"] = user.package_comments.order_by(\n        models.PackageComment.CommentTS.desc()\n    )\n    return render_template(request, \"account/comments.html\", context)\n\n\n@router.get(\"/account/{username}/api-keys\")\n@requires_auth\nasync def api_keys(request: Request, username: str):\n    user = get_user_by_name(username)\n    context = make_context(request, \"API Keys\")\n\n    if user != request.user:\n        return RedirectResponse(\n            f\"/account/{username}\", status_code=HTTPStatus.SEE_OTHER\n        )\n\n    context[\"user\"] = user\n    context[\"api_keys\"] = db.query(ApiKey).filter(ApiKey.UserID == user.ID).all()\n\n    return render_template(request, \"account/api-keys.html\", context)\n\n\n@router.post(\"/api-keys/delete/{api_key_id}\")\n@requires_auth\nasync def api_key_delete(request: Request, api_key_id: int):\n    api_key = (\n        db.query(ApiKey)\n        .filter(ApiKey.ID == api_key_id)\n        .filter(ApiKey.UserID == request.user.ID)\n        .first()\n    )\n\n    if api_key is None:\n        return Response(status_code=HTTPStatus.FORBIDDEN)\n\n    with db.begin():\n        db.delete(api_key)\n\n\n@router.post(\"/api-keys/create\")\n@requires_auth\nasync def api_key_create(request: Request):\n    body = orjson.loads(await request.body())\n    note = body[\"note\"]\n    expiration_time = math.floor(float(body[\"expirationDate\"]))\n\n    with db.begin():\n        secret = secrets.token_hex(32)\n        secret_hashed = hashlib.sha256(secret.encode()).hexdigest()\n        db.create(\n            ApiKey,\n            UserID=request.user.ID,\n            KeyHash=secret_hashed,\n            Note=note,\n            ExpireTS=expiration_time,\n        )\n\n    return Response(content=secret)\n\n\n@router.get(\"/accounts\")\n@requires_auth\n@account_type_required({at.TRUSTED_USER, at.DEVELOPER, at.TRUSTED_USER_AND_DEV})\nasync def accounts_post(request: Request):\n\n    context = await make_variable_context(request, \"Accounts\")\n\n    offset, per_page = util.sanitize_params(\n        request.query_params.get(\"O\", defaults.O),\n        request.query_params.get(\"PP\", defaults.PP),\n    )\n\n    offset = max(offset, 0)  # Minimize offset at 0.\n\n    context[\"PP\"] = per_page\n    context[\"O\"] = offset\n    context[\"U\"] = U = request.query_params.get(\"U\")\n    context[\"T\"] = T = request.query_params.get(\"T\")\n    context[\"S\"] = S = request.query_params.get(\"S\")\n    context[\"E\"] = E = request.query_params.get(\"E\")\n    context[\"R\"] = R = request.query_params.get(\"R\")\n    context[\"I\"] = I = request.query_params.get(\"I\")  # noqa: E741\n    context[\"SB\"] = SB = request.query_params.get(\"SB\")\n\n    # Setup order by criteria based on SB.\n    order_by_columns = {\n        \"t\": (models.AccountType.ID.asc(), models.User.Username.asc()),\n        \"r\": (models.User.RealName.asc(), models.AccountType.ID.asc()),\n        \"i\": (models.User.IRCNick.asc(), models.AccountType.ID.asc()),\n    }\n    default_order = (models.User.Username.asc(), models.AccountType.ID.asc())\n    order_by = order_by_columns.get(SB, default_order)\n\n    # Convert parameter T to an AccountType ID.\n    account_types = {\n        \"u\": at.USER_ID,\n        \"t\": at.TRUSTED_USER_ID,\n        \"d\": at.DEVELOPER_ID,\n        \"td\": at.TRUSTED_USER_AND_DEV_ID,\n    }\n    account_type_id = account_types.get(T, None)\n\n    # Get a query handle to users, populate the total user\n    # count into a jinja2 context variable.\n    query = db.query(models.User).join(models.AccountType)\n\n    # Populate this list with any additional statements to\n    # be ANDed together.\n    statements = [\n        v\n        for k, v in [\n            (account_type_id is not None, models.AccountType.ID == account_type_id),\n            (bool(U), models.User.Username.like(f\"%{U}%\")),\n            (bool(S), models.User.Suspended == S),\n            (bool(E), models.User.Email.like(f\"%{E}%\")),\n            (bool(R), models.User.RealName.like(f\"%{R}%\")),\n            (bool(I), models.User.IRCNick.like(f\"%{I}%\")),\n        ]\n        if k\n    ]\n\n    # Filter the query by coe-mbining all statements added above into\n    # an AND statement, unless there's just one statement, which\n    # we pass on to filter() as args.\n    if statements:\n        query = query.filter(and_(*statements))\n\n    context[\"total_users\"] = query.count()\n\n    # Finally, order and truncate our users for the current page.\n    users = query.order_by(*order_by).limit(per_page).offset(offset).all()\n    context[\"users\"] = util.apply_all(users, db.refresh)\n\n    return render_template(request, \"account/search.html\", context)\n\n\ndef render_terms_of_service(request: Request, context: dict, terms: typing.Iterable):\n    if not terms:\n        return RedirectResponse(\"/\", status_code=HTTPStatus.SEE_OTHER)\n    context[\"unaccepted_terms\"] = terms\n    return render_template(request, \"tos/index.html\", context)\n\n\n@router.get(\"/tos\")\n@requires_auth\nasync def terms_of_service(request: Request):\n    # Query the database for terms that were previously accepted,\n    # but now have a bumped Revision that needs to be accepted.\n    diffs = (\n        db.query(models.Term)\n        .join(models.AcceptedTerm)\n        .filter(models.AcceptedTerm.Revision < models.Term.Revision)\n        .all()\n    )\n\n    # Query the database for any terms that have not yet been accepted.\n    unaccepted = (\n        db.query(models.Term)\n        .filter(~models.Term.ID.in_(db.query(models.AcceptedTerm.TermsID)))\n        .all()\n    )\n\n    for record in diffs + unaccepted:\n        db.refresh(record)\n\n    # Translate the 'Terms of Service' part of our page title.\n    _ = l10n.get_translator_for_request(request)\n    title = f\"AUR {_('Terms of Service')}\"\n    context = await make_variable_context(request, title)\n\n    accept_needed = sorted(unaccepted + diffs)\n    return render_terms_of_service(request, context, accept_needed)\n\n\n@router.post(\"/tos\")\n@requires_auth\nasync def terms_of_service_post(request: Request, accept: bool = Form(default=False)):\n    # Query the database for terms that were previously accepted,\n    # but now have a bumped Revision that needs to be accepted.\n    diffs = (\n        db.query(models.Term)\n        .join(models.AcceptedTerm)\n        .filter(models.AcceptedTerm.Revision < models.Term.Revision)\n        .all()\n    )\n\n    # Query the database for any terms that have not yet been accepted.\n    unaccepted = (\n        db.query(models.Term)\n        .filter(~models.Term.ID.in_(db.query(models.AcceptedTerm.TermsID)))\n        .all()\n    )\n\n    if not accept:\n        # Translate the 'Terms of Service' part of our page title.\n        _ = l10n.get_translator_for_request(request)\n        title = f\"AUR {_('Terms of Service')}\"\n        context = await make_variable_context(request, title)\n\n        # We already did the database filters here, so let's just use\n        # them instead of reiterating the process in terms_of_service.\n        accept_needed = sorted(unaccepted + diffs)\n        return render_terms_of_service(\n            request, context, util.apply_all(accept_needed, db.refresh)\n        )\n\n    with db.begin():\n        # For each term we found, query for the matching accepted term\n        # and update its Revision to the term's current Revision.\n        for term in diffs:\n            db.refresh(term)\n            accepted_term = request.user.accepted_terms.filter(\n                models.AcceptedTerm.TermsID == term.ID\n            ).first()\n            accepted_term.Revision = term.Revision\n\n        # For each term that was never accepted, accept it!\n        for term in unaccepted:\n            db.refresh(term)\n            db.create(\n                models.AcceptedTerm,\n                User=request.user,\n                Term=term,\n                Revision=term.Revision,\n            )\n\n    return RedirectResponse(\"/\", status_code=HTTPStatus.SEE_OTHER)\n", "#!/bin/bash\nset -eou pipefail\n\nsed -ri 's/^bind .*$/bind 0.0.0.0 -::1/g' /etc/redis/redis.conf\n\nexec \"$@\"\n", "{% extends \"partials/layout.html\" %}\n{% block body %}\n    <div class=\"box\">\n\t{% if not request.user.is_authenticated() %}\n            <h2>{% trans %}Accounts{% endtrans %}</h2>\n\t    <hr>\n\t    {% trans %}You must log in to view user information.{% endtrans %}\n\t{% else %}\n\t    <h2>{% trans %}Accounts{% endtrans %} - {{ user.Username }}</h2>\n\t    <hr>\n            <div class=\"arch-bio-entry\">\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Username{% endtrans %}:</p>\n\t\t    <p class=\"data\">{{ user.Username }}</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Account Type{% endtrans %}:</p>\n\t\t    <p class=\"data\">{{ user.AccountType }}</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Email Address{% endtrans %}:</p>\n\t\t    <p class=\"data\"><a href=\"mailto:{{ user.Email }}\">{{ user.Email }}</a></p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Real Name{% endtrans %}:</p>\n\t\t    {% if user.Realname != \"\" %}\n\t\t        <p class=\"data\">{{ user.Realname }}</p>\n\t\t    {% else %}\n\t\t\t<p class=\"data\">None</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Homepage{% endtrans %}:</p>\n\t\t    {% if user.Homepage %}\n\t\t        <p class=\"data\"><a href=\"{{ user.Homepage }}\" rel=\"nofollow\">{{ user.Homepage }}</a></p>\n\t\t    {% else %}\n\t\t\t<p class=\"data\">None</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}IRC Nick{% endtrans %}:</p>\n\t\t    {% if user.IRCNick %}\n\t\t\t<p class=\"data\">{{ user.IRCNick }}</p>\n\t\t    {% else %}\n\t\t\t<p class=\"data\">None</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}PGP Key Fingerprint{% endtrans %}:</p>\n\t\t    {% if pgp_key != \"\" %}\n\t\t\t<p class=\"data\">{{ pgp_key }}</p>\n\t\t    {% else %}\n\t\t\t<p class=\"data\">None</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Status{% endtrans %}:</p>\n\t\t    {% if not user.InactivityTS %}\n\t\t\t<p class=\"data\">{{ \"Active\" | tr }}</p>\n\t\t    {% else %}\n\t\t        {% set inactive_ds = user.InactivityTS | dt | as_timezone(timezone) %}\n\t\t\t<p class=\"data\">{{ \"Inactive since %s\" | tr | format(inactive_ds.strftime(\"%Y-%m-%d %H:%M\")) }}</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Registration date{% endtrans %}:</p>\n\t\t    <p class=\"data\">{{ user.RegistrationTS.strftime(\"%Y-%m-%d\") }}</p>\n\t\t</div>\n\t\t{% if login_ts %}\n\t\t    <div class=\"item\">\n\t\t\t<p class=\"caption\">{% trans %}Last Login{% endtrans %}:</p>\n\t\t\t{% set login_ds = login_ts | dt | as_timezone(timezone) %}\n\t\t\t<p class=\"data\">{{ login_ds.strftime(\"%Y-%m-%d\") }}</p>\n\t\t    </div>\n\t\t{% endif %}\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Links{% endtrans %}:</p>\n\t\t    <div class=\"multidata\">\n\t\t\t<p class=\"data\">{{ \"%sView this user's packages%s\" | tr | format('<a href=\"/packages/?K=%s&SeB=m\">' | format(user.Username), \"</a>\") | safe }}</p>\n\t\t\t{% if request.user.can_edit_user(user) %}\n\t\t\t    <p class=\"data\">{{ \"%sEdit this user's account%s\" | tr | format('<a href=\"/account/%s/edit\">' | format(user.Username), \"</a>\") | safe }}</p>\n\t\t\t{% endif %}\n\t\t\t{% if request.user.has_credential(creds.ACCOUNT_LIST_COMMENTS, approved=[user]) %}\n\t\t\t    <p class=\"data\">{{ \"%sList this user's comments%s\" | tr | format('<a href=\"/account/%s/comments\">' | format(user.Username), \"</a>\") | safe }}</p>\n\t\t\t{% endif %}\n\t\t    </div>\n\t        </div>\n\t    </div>\n\t{% endif %}\n    </div>\n{% endblock %}\n</html>\n{# vim: set sw=4 expandtab: #}\n", "<!--\n    This partial requires a few variables to render properly.\n\n    First off, we can render either a new account form or an\n    update account form.\n\n    (1)\n    To render an update account form, supply `form_type = \"UpdateAccount\"`.\n    To render a new account form, either omit a `form_type` or set it to\n    anything else (should actually be \"NewAccount\" based on the PHP impl).\n\n    (2)\n    Furthermore, when rendering an update form, if the request user\n    is authenticated, there **must** be a `user` supplied, pointing\n    to the user being edited.\n-->\n<form id=\"edit-profile-form\" method=\"post\" {% if action %}action=\"{{ action }}\"{% endif %}>\n    <fieldset>\n        <input type=\"hidden\" name=\"Action\" value=\"{{ form_type }}\">\n    </fieldset>\n\n    <fieldset>\n        <!-- Username -->\n        <div class=\"item\">\n\t\t<label for=\"id_username\">\n            <h2>{% trans %}Username{% endtrans %} <em>({% trans %}required{% endtrans %})</em>:</h2>\n        </label>\n\n        <input id=\"id_username\" type=\"text\" maxlength=\"16\" name=\"U\" value=\"{{ username }}\">\n        <p class=\"comment\">\n            <em>{{ \"Your user name is the name you will use to login. It is visible to the general public, even if your account is inactive.\" | tr }}</em>\n        </p>\n        </div>\n\n        {% if request.user.has_credential(creds.ACCOUNT_CHANGE_TYPE) %}\n            <div class=\"item\">\n                <label for=\"id_type\">\n                    <h2>{% trans %}Account Type{% endtrans %}:</h2>\n                </label>\n                <select name=\"T\" id=\"id_type\">\n                    {% for value, type in account_types %}\n                        <option value=\"{{ value }}\" {% if user.AccountType.ID == value %}selected=\"selected\"{% endif %}>\n                            {{ type | tr }}\n                        </option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div class=\"item\">\n                <label for=\"id_suspended\">\n                    {% trans %}Account Suspended{% endtrans %}:\n                </label>\n\n                <input class=\"checkbox\" id=\"suspended\" type=\"checkbox\" name=\"S\" {% if suspended %}checked=\"checked\"{% endif %}>\n            </div>\n        {% endif %}\n\n        {% if request.user.has_credential(creds.ACCOUNT_EDIT, approved=[user]) %}\n            <div class=\"item\">\n                <div>\n                    <label for=\"id_inactive\">{% trans %}Inactive{% endtrans %}:</label>\n                    <input class=\"checkbox\" id=\"id_inactive\" type=\"checkbox\" name=\"J\" {% if inactive %}checked=\"checked\"{% endif %}>\n                </div>\n            </div>\n        {% endif %}\n\n        <!-- Email -->\n        <div class=\"item\">\n\t    <label for=\"id_email\"><h2>\n                {% trans %}Email Address{% endtrans %} <em>({% trans %}required{% endtrans %})</em>:\n            </h2></label>\n\n            <input id=\"id_email\" type=\"email\" maxlength=\"254\" name=\"E\" value=\"{{ email or '' }}\">\n            <p class=\"comment\"><em>{{ \"Please ensure you correctly entered your email \"\n                      \"address, otherwise you will be locked out.\" | tr }}</em></p>\n        </div>\n\n        <!-- Hide Email -->\n        <div class=\"item\">\n            <div>\n                <label for=\"id_hide\">\n                    {% trans %}Hide Email Address{% endtrans %}:\n                </label>\n\n                <input class=\"checkbox\" id=\"id_hide\" type=\"checkbox\" name=\"H\" {% if H %}checked=\"checked\"{% endif %}>\n            </div>\n            <p class=\"comment\"><em>{{ \"If you do not hide your email address, it is \"\n            \"visible to all registered MPR users. If you hide your \"\n            \"email address, it is visible to MPR \"\n            \"Trusted Users only.\" | tr }}</em></p>\n        </div>\n\n        <!-- Backup Email -->\n        <div class=\"item\">\n            <label for=\"id_backup_email\"><h2>\n                {% trans %}Backup Email Address{% endtrans %}:\n            </h4></label>\n\n            <input id=\"id_backup_email\" type=\"email\" maxlength=\"254\" name=\"BE\" value=\"{{ backup_email or '' }}\">\n            <p class=\"comment\"><em>\n            {{ \"Optionally provide a secondary email address that \"\n            \"can be used to restore your account in case you lose \"\n            \"access to your primary email address.\" | tr }}\n            {{ \"Password reset links are always sent to both your \"\n            \"primary and your backup email address.\" | tr }}\n            {{ \"Your backup email address is always only visible to \"\n            \"MPR Trusted Users, independent of the %s \"\n            \"setting.\" | tr\n            | format(\"<em>%s</em>\" | format(\"Hide Email Address\" | tr))\n            | safe }}\n            </em></p>\n        </div>\n\n        <!-- Real Name -->\n        <div class=\"item\">\n            <label for=\"id_realname\"><h2>\n                {% trans %}Real Name{% endtrans %}:\n            </h2></label>\n\n            <input id=\"id_realname\" type=\"text\" maxlength=\"32\" name=\"R\" value=\"{{ realname }}\">\n        </div>\n\n        <!-- Homepage -->\n        <div class=\"item\">\n            <label for=\"id_homepage\"><h2>\n                {% trans %}Homepage{% endtrans %}:\n            </h2></label>\n\n            <input id=\"id_homepage\" type=\"text\" name=\"HP\" value=\"{{ homepage }}\">\n        </div>\n\n        <!-- IRC Nick -->\n        <div class=\"item\">\n            <label for=\"id_irc\"><h2>\n                {% trans %}IRC Nick{% endtrans %}:\n            </h2></label>\n\n            <input id=\"id_irc\" type=\"text\" maxlength=\"32\" name=\"I\" value=\"{{ ircnick }}\">\n        </div>\n\n        <!-- PGP Key Fingerprint -->\n        <div class=\"item\">\n            <label for=\"id_pgp\"><h2>\n                {% trans %}PGP Key Fingerprint{% endtrans %}:\n            </h2></label>\n\n            <input id=\"id_pgp\" type=\"text\" maxlength=\"50\" name=\"K\" value=\"{{ pgp }}\">\n        </div>\n\n        <hr>\n\n        <!-- Homepage -->\n        <div class=\"item\">\n            <label for=\"id_language\"><h2>\n                {% trans %}Language{% endtrans %}:\n            </h2></label>\n\n            <select id=\"id_language\" name=\"L\">\n                {% for domain, display in languages.items() %}\n                    <option\n                        value=\"{{ domain }}\"\n                        {% if lang == domain %}\n                        selected=\"selected\"\n                        {% endif %}\n                    >\n                        {{ display }}\n                    </option>\n                {% endfor %}\n            </select>\n        </div>\n\n        <!-- Homepage -->\n        <div class=\"item\">\n            <label for=\"id_timezone\"><h2>\n                {% trans %}Timezone{% endtrans %}\n            </h2></label>\n\n            <select id=\"id_timezone\" name=\"TZ\">\n                {% for current, offset in timezones.items() %}\n                    <option value=\"{{ current }}\"\n                        {% if current == tz  %}\n                            selected=\"selected\"\n                        {% endif %}\n                    >{{ offset }}</option>\n                {% endfor %}\n            </select>\n        </div>\n\n    </fieldset>\n    <hr>\n\n    {% if form_type == \"UpdateAccount\" %}\n        <fieldset>\n            <p class=\"overhead-comment\">\n            {{ \"If you want to change the password, enter a new password \"\n               \"and confirm the new password by entering it again.\" | tr\n            }}\n            </p>\n            <div class=\"item\">\n                <label for=\"id_passwd1\"><h2>\n                    {% trans %}Password{% endtrans %}:\n                </h2></label>\n                <input id=\"id_passwd1\" type=\"password\" name=\"P\" value=\"{{ P or '' }}\">\n            </div>\n\n            <div class=\"item\">\n                <label for=\"id_passwd2\"><h2>\n                    {% trans %}Re-type password{% endtrans %}:\n                </h2></label>\n\n                <input id=\"id_passwd2\" type=\"password\" name=\"C\" value=\"{{ C or '' }}\">\n            </div>\n        </fieldset>\n    {% endif %}\n    <hr>\n    <fieldset>\n        <p class=\"overhead-comment\">\n            {{\n            \"The following information is only required if you \"\n            \"want to submit packages to the makedeb Package Repository.\" | tr\n            }}\n        </p>\n        <div class=\"item\">\n            <label for=\"id_ssh\"><h2>\n                {% trans %}SSH Public Key{% endtrans %}:\n            </h2></label>\n\n            <!-- Only set PK auto-fill when we've got a NewAccount form. -->\n            <textarea id=\"id_ssh\" name=\"PK\"\n                      rows=\"5\">{{ ssh_pk }}</textarea>\n        </div>\n    </fieldset>\n    <hr>\n    <fieldset class=\"notify-item\">\n        <legend><h2>{% trans%}Notification settings{% endtrans %}:</h2></legend>\n        <div class=\"item\">\n            <label for=\"id_commentnotify\">\n                {% trans %}Notify of new comments{% endtrans %}:\n            </label>\n\n            <input class=\"checkbox\" id=\"id_commentnotify\" type=\"checkbox\" name=\"CN\" {% if cn %}checked=\"checked\"{% endif %}>\n        </div>\n\n        <div class=\"item\">\n            <label for=\"id_updatenotify\">\n                {% trans %}Notify of package updates{% endtrans %}:\n            </label>\n\n            <input class=\"checkbox\" id=\"id_updatenotify\" type=\"checkbox\" name=\"UN\" {% if un %}checked=\"checked\"{% endif %}>\n        </div>\n\n        <div class=\"item\">\n            <label for=\"id_ownershipnotify\">\n                {% trans %}Notify of ownership updates{% endtrans %}:\n            </label>\n\n            <input class=\"checkbox\" id=\"id_ownershipnotify\" type=\"checkbox\" name=\"ON\" {% if on %}checked=\"checked\"{% endif %}>\n        </div>\n    </fieldset>\n    <hr>\n    <fieldset class=\"confirm-password\">\n        {% if form_type == \"UpdateAccount\" %}\n            <legend>\n                {{ \"To confirm the profile changes, please enter \"\n                \"your current password:\" | tr }}\n            </legend>\n            <div class=\"item\">\n                <label for=\"id_passwd_current\"><h2>{% trans %}Your current password{% endtrans %}:</h2></label>\n                <input id=\"id_passwd_current\" type=\"password\" name=\"passwd\" id=\"id_passwd_current\">\n            </div>\n        {% else %}\n            <!-- Otherwise, form_type is assumed that it's NewAccount. -->\n            <div class=\"item\">\n\t\t        <p>{{ \"To protect the MPR against automated account creation, \"\n                      \"we kindly ask you to provide the output of the following \"\n\t\t              \"command\" | tr }} <em>({% trans %}required{% endtrans %})</em>:</p>\n\n                <div class=\"code-block\">\n                    {% include \"partials/clipboard_icons.html\" %}\n                    <pre><code>{{ captcha_salt | captcha_cmdline }}</code></pre>\n                </div>\n                <div class=\"item\">\n                    <label for=\"id_captcha\">\n                        <h2>{% trans %}Answer{% endtrans %}:</h2>\n                    </label>\n                    <input id=\"id_captcha\" type=\"text\" maxlength=\"6\" name=\"captcha\">\n                    <input type=\"hidden\" name=\"captcha_salt\" value=\"{{ captcha_salt }}\">\n                </div>\n            </div>\n        {% endif %}\n    </fieldset>\n\n    <fieldset>\n        <div class=\"item\">\n        <label></label>\n            {% if form_type == \"UpdateAccount\" %}\n                <input class=\"button\" type=\"submit\"\n                                      value=\"{{ 'Update' | tr }}\"> &nbsp;\n            {% else %}\n                <input class=\"button\" type=\"submit\"\n                                      value=\"{{ 'Create' | tr }}\"> &nbsp;\n            {% endif %}\n            <input class=\"button\" type=\"reset\"\n                                  value=\"{{ 'Reset' | tr }}\">\n        </div>\n    </fieldset>\n</form>\n\n{# vim: set ts=4 sw=4 expandtab: #}\n"], "fixing_code": ["import copy\nimport hashlib\nimport math\nimport secrets\nimport typing\nfrom http import HTTPStatus\n\nimport orjson\nfrom fastapi import APIRouter, Form, Request\nfrom fastapi.responses import HTMLResponse, RedirectResponse, Response\nfrom sqlalchemy import and_, or_\n\nimport aurweb.config\nfrom aurweb import cookies, db, defaults, l10n, logging, models, util\nfrom aurweb.auth import account_type_required, requires_auth, requires_guest\nfrom aurweb.captcha import get_captcha_salts\nfrom aurweb.exceptions import ValidationError\nfrom aurweb.l10n import get_translator_for_request\nfrom aurweb.models import account_type as at\nfrom aurweb.models.api_key import ApiKey\nfrom aurweb.models.ssh_pub_key import get_fingerprint\nfrom aurweb.models.user import generate_resetkey\nfrom aurweb.scripts.notify import ResetKeyNotification, WelcomeNotification\nfrom aurweb.templates import make_context, make_variable_context, render_template\nfrom aurweb.users import update, validate\nfrom aurweb.users.util import get_user_by_name\n\nrouter = APIRouter()\nlogger = logging.get_logger(__name__)\n\n\n@router.get(\"/passreset\", response_class=HTMLResponse)\n@requires_guest\nasync def passreset(request: Request):\n    context = await make_variable_context(request, \"Password Reset\")\n    return render_template(request, \"passreset.html\", context)\n\n\n@router.post(\"/passreset\", response_class=HTMLResponse)\n@requires_guest\nasync def passreset_post(\n    request: Request,\n    user: str = Form(...),\n    resetkey: str = Form(default=None),\n    password: str = Form(default=None),\n    confirm: str = Form(default=None),\n):\n    context = await make_variable_context(request, \"Password Reset\")\n\n    # The user parameter being required, we can match against\n    user = db.query(\n        models.User, or_(models.User.Username == user, models.User.Email == user)\n    ).first()\n    if not user:\n        context[\"errors\"] = [\"Invalid e-mail.\"]\n        return render_template(\n            request, \"passreset.html\", context, status_code=HTTPStatus.NOT_FOUND\n        )\n\n    db.refresh(user)\n    if resetkey:\n        context[\"resetkey\"] = resetkey\n\n        if not user.ResetKey or resetkey != user.ResetKey:\n            context[\"errors\"] = [\"Invalid e-mail.\"]\n            return render_template(\n                request, \"passreset.html\", context, status_code=HTTPStatus.NOT_FOUND\n            )\n\n        if not user or not password:\n            context[\"errors\"] = [\"Missing a required field.\"]\n            return render_template(\n                request, \"passreset.html\", context, status_code=HTTPStatus.BAD_REQUEST\n            )\n\n        if password != confirm:\n            # If the provided password does not match the provided confirm.\n            context[\"errors\"] = [\"Password fields do not match.\"]\n            return render_template(\n                request, \"passreset.html\", context, status_code=HTTPStatus.BAD_REQUEST\n            )\n\n        if len(password) < models.User.minimum_passwd_length():\n            # Translate the error here, which simplifies error output\n            # in the jinja2 template.\n            _ = get_translator_for_request(request)\n            context[\"errors\"] = [\n                _(\"Your password must be at least %s characters.\")\n                % (str(models.User.minimum_passwd_length()))\n            ]\n            return render_template(\n                request, \"passreset.html\", context, status_code=HTTPStatus.BAD_REQUEST\n            )\n\n        # We got to this point; everything matched up. Update the password\n        # and remove the ResetKey.\n        with db.begin():\n            user.ResetKey = str()\n            if user.session:\n                db.delete(user.session)\n            user.update_password(password)\n\n        # Render ?step=complete.\n        return RedirectResponse(\n            url=\"/passreset?step=complete\", status_code=HTTPStatus.SEE_OTHER\n        )\n\n    # If we got here, we continue with issuing a resetkey for the user.\n    resetkey = generate_resetkey()\n    with db.begin():\n        user.ResetKey = resetkey\n\n    ResetKeyNotification(user.ID).send()\n\n    # Render ?step=confirm.\n    return RedirectResponse(\n        url=\"/passreset?step=confirm\", status_code=HTTPStatus.SEE_OTHER\n    )\n\n\ndef process_account_form(request: Request, user: models.User, args: dict):\n    \"\"\"Process an account form. All fields are optional and only checks\n    requirements in the case they are present.\n\n    ```\n    context = await make_variable_context(request, \"Accounts\")\n    ok, errors = process_account_form(request, user, **kwargs)\n    if not ok:\n        context[\"errors\"] = errors\n        return render_template(request, \"some_account_template.html\", context)\n    ```\n\n    :param request: An incoming FastAPI request\n    :param user: The user model of the account being processed\n    :param args: A dictionary of arguments generated via request.form()\n    :return: A (passed processing boolean, list of errors) tuple\n    \"\"\"\n\n    # Get a local translator.\n    _ = get_translator_for_request(request)\n\n    checks = [\n        validate.is_banned,\n        validate.invalid_user_password,\n        validate.invalid_fields,\n        validate.invalid_suspend_permission,\n        validate.invalid_username,\n        validate.invalid_password,\n        validate.invalid_email,\n        validate.invalid_backup_email,\n        validate.invalid_homepage,\n        validate.invalid_pgp_key,\n        validate.invalid_ssh_pubkey,\n        validate.invalid_language,\n        validate.invalid_timezone,\n        validate.username_in_use,\n        validate.email_in_use,\n        validate.invalid_account_type,\n        validate.invalid_captcha,\n    ]\n\n    try:\n        for check in checks:\n            check(**args, request=request, user=user, _=_)\n    except ValidationError as exc:\n        return (False, exc.data)\n\n    return (True, [])\n\n\ndef make_account_form_context(\n    context: dict, request: Request, user: models.User, args: dict\n):\n    \"\"\"Modify a FastAPI context and add attributes for the account form.\n\n    :param context: FastAPI context\n    :param request: FastAPI request\n    :param user: Target user\n    :param args: Persistent arguments: request.form()\n    :return: FastAPI context adjusted for account form\n    \"\"\"\n    # Do not modify the original context.\n    context = copy.copy(context)\n\n    context[\"account_types\"] = list(\n        filter(\n            lambda e: request.user.AccountTypeID >= e[0],\n            [\n                (at.USER_ID, f\"Normal {at.USER}\"),\n                (at.TRUSTED_USER_ID, at.TRUSTED_USER),\n                (at.DEVELOPER_ID, at.DEVELOPER),\n                (at.TRUSTED_USER_AND_DEV_ID, at.TRUSTED_USER_AND_DEV),\n            ],\n        )\n    )\n\n    if request.user.is_authenticated():\n        context[\"username\"] = args.get(\"U\", user.Username)\n        context[\"account_type\"] = args.get(\"T\", user.AccountType.ID)\n        context[\"suspended\"] = args.get(\"S\", user.Suspended)\n        context[\"email\"] = args.get(\"E\", user.Email)\n        context[\"hide_email\"] = args.get(\"H\", user.HideEmail)\n        context[\"backup_email\"] = args.get(\"BE\", user.BackupEmail)\n        context[\"realname\"] = args.get(\"R\", user.RealName)\n        context[\"homepage\"] = args.get(\"HP\", user.Homepage or str())\n        context[\"ircnick\"] = args.get(\"I\", user.IRCNick)\n        context[\"pgp\"] = args.get(\"K\", user.PGPKey or str())\n        context[\"lang\"] = args.get(\"L\", user.LangPreference)\n        context[\"tz\"] = args.get(\"TZ\", user.Timezone)\n        ssh_pk = user.ssh_pub_key.PubKey if user.ssh_pub_key else str()\n        context[\"ssh_pk\"] = args.get(\"PK\", ssh_pk)\n        context[\"cn\"] = args.get(\"CN\", user.CommentNotify)\n        context[\"un\"] = args.get(\"UN\", user.UpdateNotify)\n        context[\"on\"] = args.get(\"ON\", user.OwnershipNotify)\n        context[\"inactive\"] = args.get(\"J\", user.InactivityTS != 0)\n    else:\n        context[\"username\"] = args.get(\"U\", str())\n        context[\"account_type\"] = args.get(\"T\", at.USER_ID)\n        context[\"suspended\"] = args.get(\"S\", False)\n        context[\"email\"] = args.get(\"E\", str())\n        context[\"hide_email\"] = args.get(\"H\", False)\n        context[\"backup_email\"] = args.get(\"BE\", str())\n        context[\"realname\"] = args.get(\"R\", str())\n        context[\"homepage\"] = args.get(\"HP\", str())\n        context[\"ircnick\"] = args.get(\"I\", str())\n        context[\"pgp\"] = args.get(\"K\", str())\n        context[\"lang\"] = args.get(\"L\", context.get(\"language\"))\n        context[\"tz\"] = args.get(\"TZ\", context.get(\"timezone\"))\n        context[\"ssh_pk\"] = args.get(\"PK\", str())\n        context[\"cn\"] = args.get(\"CN\", True)\n        context[\"un\"] = args.get(\"UN\", False)\n        context[\"on\"] = args.get(\"ON\", True)\n        context[\"inactive\"] = args.get(\"J\", False)\n\n    context[\"password\"] = args.get(\"P\", str())\n    context[\"confirm\"] = args.get(\"C\", str())\n\n    return context\n\n\n@router.get(\"/register\", response_class=HTMLResponse)\n@requires_guest\nasync def account_register(\n    request: Request,\n    U: str = Form(default=str()),  # Username\n    E: str = Form(default=str()),  # Email\n    H: str = Form(default=False),  # Hide Email\n    BE: str = Form(default=None),  # Backup Email\n    R: str = Form(default=None),  # Real Name\n    HP: str = Form(default=None),  # Homepage\n    I: str = Form(default=None),  # IRC Nick # noqa: E741\n    K: str = Form(default=None),  # PGP Key FP\n    L: str = Form(default=aurweb.config.get(\"options\", \"default_lang\")),\n    TZ: str = Form(default=aurweb.config.get(\"options\", \"default_timezone\")),\n    PK: str = Form(default=None),\n    CN: bool = Form(default=False),  # Comment Notify\n    CU: bool = Form(default=False),  # Update Notify\n    CO: bool = Form(default=False),  # Owner Notify\n    captcha: str = Form(default=str()),\n):\n    context = await make_variable_context(request, \"Register\")\n    context[\"captcha_salt\"] = get_captcha_salts()[0]\n    context = make_account_form_context(context, request, None, dict())\n    return render_template(request, \"register.html\", context)\n\n\n@router.post(\"/register\", response_class=HTMLResponse)\n@requires_guest\nasync def account_register_post(\n    request: Request,\n    U: str = Form(default=str()),  # Username\n    E: str = Form(default=str()),  # Email\n    H: str = Form(default=\"off\"),  # Hide Email\n    BE: str = Form(default=None),  # Backup Email\n    R: str = Form(default=\"\"),  # Real Name\n    HP: str = Form(default=None),  # Homepage\n    I: str = Form(default=None),  # IRC Nick # noqa: E741\n    K: str = Form(default=None),  # PGP Key\n    L: str = Form(default=aurweb.config.get(\"options\", \"default_lang\")),\n    TZ: str = Form(default=aurweb.config.get(\"options\", \"default_timezone\")),\n    PK: str = Form(default=None),  # SSH PubKey\n    CN: bool = Form(default=False),\n    UN: bool = Form(default=False),\n    ON: bool = Form(default=False),\n    captcha: str = Form(default=None),\n    captcha_salt: str = Form(...),\n):\n    context = await make_variable_context(request, \"Register\")\n    args = dict(await request.form())\n\n    context = make_account_form_context(context, request, None, args)\n    ok, errors = process_account_form(request, request.user, args)\n    if not ok:\n        # If the field values given do not meet the requirements,\n        # return HTTP 400 with an error.\n        context[\"errors\"] = errors\n        return render_template(\n            request, \"register.html\", context, status_code=HTTPStatus.BAD_REQUEST\n        )\n\n    if not captcha:\n        context[\"errors\"] = [\"The CAPTCHA is missing.\"]\n        return render_template(\n            request, \"register.html\", context, status_code=HTTPStatus.BAD_REQUEST\n        )\n\n    # Create a user with no password with a resetkey, then send\n    # an email off about it.\n    resetkey = generate_resetkey()\n\n    # By default, we grab the User account type to associate with.\n    atype = db.query(\n        models.AccountType, models.AccountType.AccountType == \"User\"\n    ).first()\n\n    # Check if we should turn on HideEmail.\n    if H == \"on\":\n        hide_email = 1\n    else:\n        hide_email = 0\n\n    # Create a user given all parameters available.\n    with db.begin():\n        user = db.create(\n            models.User,\n            Username=U,\n            Email=E,\n            HideEmail=hide_email,\n            BackupEmail=BE,\n            RealName=R,\n            Homepage=HP,\n            IRCNick=I,\n            PGPKey=K,\n            LangPreference=L,\n            Timezone=TZ,\n            CommentNotify=CN,\n            UpdateNotify=UN,\n            OwnershipNotify=ON,\n            ResetKey=resetkey,\n            AccountType=atype,\n        )\n\n    # If a PK was given and either one does not exist or the given\n    # PK mismatches the existing user's SSHPubKey.PubKey.\n    if PK:\n        # Get the second element in the PK, which is the actual key.\n        pubkey = PK.strip().rstrip()\n        parts = pubkey.split(\" \")\n        if len(parts) == 3:\n            # Remove the host part.\n            pubkey = parts[0] + \" \" + parts[1]\n        fingerprint = get_fingerprint(pubkey)\n        with db.begin():\n            user.ssh_pub_key = models.SSHPubKey(\n                UserID=user.ID, PubKey=pubkey, Fingerprint=fingerprint\n            )\n\n    # Send a reset key notification to the new user.\n    WelcomeNotification(user.ID).send()\n\n    context[\"complete\"] = True\n    context[\"user\"] = user\n    return render_template(request, \"register.html\", context)\n\n\ndef cannot_edit(\n    request: Request, user: models.User\n) -> typing.Optional[RedirectResponse]:\n    \"\"\"\n    Decide if `request.user` cannot edit `user`.\n\n    If the request user can edit the target user, None is returned.\n    Otherwise, a redirect is returned to /account/{user.Username}.\n\n    :param request: FastAPI request\n    :param user: Target user to be edited\n    :return: RedirectResponse if approval != granted else None\n    \"\"\"\n    approved = request.user.can_edit_user(user)\n    if not approved and (to := \"/\"):\n        if user:\n            to = f\"/account/{user.Username}\"\n        return RedirectResponse(to, status_code=HTTPStatus.SEE_OTHER)\n    return None\n\n\n@router.get(\"/account/{username}/edit\", response_class=HTMLResponse)\n@requires_auth\nasync def account_edit(request: Request, username: str):\n    user = db.query(models.User, models.User.Username == username).first()\n\n    response = cannot_edit(request, user)\n    if response:\n        return response\n\n    context = await make_variable_context(request, \"Accounts\")\n    context[\"user\"] = db.refresh(user)\n\n    context = make_account_form_context(context, request, user, dict())\n    return render_template(request, \"account/edit.html\", context)\n\n\n@router.post(\"/account/{username}/edit\", response_class=HTMLResponse)\n@requires_auth\nasync def account_edit_post(\n    request: Request,\n    username: str,\n    U: str = Form(default=str()),  # Username\n    J: bool = Form(default=False),\n    E: str = Form(default=str()),  # Email\n    H: str = Form(default=False),  # Hide Email\n    BE: str = Form(default=None),  # Backup Email\n    R: str = Form(default=None),  # Real Name\n    HP: str = Form(default=None),  # Homepage\n    I: str = Form(default=None),  # IRC Nick # noqa: E741\n    K: str = Form(default=None),  # PGP Key\n    L: str = Form(aurweb.config.get(\"options\", \"default_lang\")),\n    TZ: str = Form(aurweb.config.get(\"options\", \"default_timezone\")),\n    P: str = Form(default=str()),  # New Password\n    C: str = Form(default=None),  # Password Confirm\n    PK: str = Form(default=None),  # PubKey\n    CN: bool = Form(default=False),  # Comment Notify\n    UN: bool = Form(default=False),  # Update Notify\n    ON: bool = Form(default=False),  # Owner Notify\n    T: int = Form(default=None),\n    passwd: str = Form(default=str()),\n):\n    user = db.query(models.User).filter(models.User.Username == username).first()\n    response = cannot_edit(request, user)\n    if response:\n        return response\n\n    context = await make_variable_context(request, \"Accounts\")\n    context[\"user\"] = db.refresh(user)\n\n    args = dict(await request.form())\n    context = make_account_form_context(context, request, user, args)\n    ok, errors = process_account_form(request, user, args)\n\n    if not passwd:\n        context[\"errors\"] = [\"Invalid password.\"]\n        return render_template(\n            request, \"account/edit.html\", context, status_code=HTTPStatus.BAD_REQUEST\n        )\n\n    if not ok:\n        context[\"errors\"] = errors\n        return render_template(\n            request, \"account/edit.html\", context, status_code=HTTPStatus.BAD_REQUEST\n        )\n\n    updates = [\n        update.simple,\n        update.language,\n        update.timezone,\n        update.ssh_pubkey,\n        update.account_type,\n        update.password,\n    ]\n\n    for f in updates:\n        f(**args, request=request, user=user, context=context)\n\n    if not errors:\n        context[\"complete\"] = True\n\n    # Update cookies with requests, in case they were changed.\n    response = render_template(request, \"account/edit.html\", context)\n    return cookies.update_response_cookies(request, response, aurtz=TZ, aurlang=L)\n\n\n@router.get(\"/account/{username}\")\nasync def account(request: Request, username: str):\n    _ = l10n.get_translator_for_request(request)\n    context = await make_variable_context(request, _(\"Account\") + \" \" + username)\n    if not request.user.is_authenticated():\n        return render_template(\n            request, \"account/show.html\", context, status_code=HTTPStatus.UNAUTHORIZED\n        )\n\n    # Get related User record, if possible.\n    user = get_user_by_name(username)\n    context[\"user\"] = user\n\n    # Format PGPKey for display with a space between each 4 characters.\n    k = user.PGPKey or str()\n    context[\"pgp_key\"] = \" \".join([k[i : i + 4] for i in range(0, len(k), 4)])\n\n    login_ts = None\n    session = db.query(models.Session).filter(models.Session.UsersID == user.ID).first()\n    if session:\n        login_ts = user.session.LastUpdateTS\n    context[\"login_ts\"] = login_ts\n\n    # Render the template.\n    return render_template(request, \"account/show.html\", context)\n\n\n@router.get(\"/account/{username}/comments\")\n@requires_auth\nasync def account_comments(request: Request, username: str):\n    user = get_user_by_name(username)\n    context = make_context(request, \"Accounts\")\n    context[\"username\"] = username\n    context[\"comments\"] = user.package_comments.order_by(\n        models.PackageComment.CommentTS.desc()\n    )\n    return render_template(request, \"account/comments.html\", context)\n\n\n@router.get(\"/account/{username}/api-keys\")\n@requires_auth\nasync def api_keys(request: Request, username: str):\n    user = get_user_by_name(username)\n    context = make_context(request, \"API Keys\")\n\n    if user != request.user:\n        return RedirectResponse(\n            f\"/account/{username}\", status_code=HTTPStatus.SEE_OTHER\n        )\n\n    context[\"user\"] = user\n    context[\"api_keys\"] = db.query(ApiKey).filter(ApiKey.UserID == user.ID).all()\n\n    return render_template(request, \"account/api-keys.html\", context)\n\n\n@router.post(\"/api-keys/delete/{api_key_id}\")\n@requires_auth\nasync def api_key_delete(request: Request, api_key_id: int):\n    api_key = (\n        db.query(ApiKey)\n        .filter(ApiKey.ID == api_key_id)\n        .filter(ApiKey.UserID == request.user.ID)\n        .first()\n    )\n\n    if api_key is None:\n        return Response(status_code=HTTPStatus.FORBIDDEN)\n\n    with db.begin():\n        db.delete(api_key)\n\n\n@router.post(\"/api-keys/create\")\n@requires_auth\nasync def api_key_create(request: Request):\n    body = orjson.loads(await request.body())\n    note = body[\"note\"]\n    expiration_time = math.floor(float(body[\"expirationDate\"]))\n\n    with db.begin():\n        secret = secrets.token_hex(32)\n        secret_hashed = hashlib.sha256(secret.encode()).hexdigest()\n        db.create(\n            ApiKey,\n            UserID=request.user.ID,\n            KeyHash=secret_hashed,\n            Note=note,\n            ExpireTS=expiration_time,\n        )\n\n    return Response(content=secret)\n\n\n@router.get(\"/accounts\")\n@requires_auth\n@account_type_required({at.TRUSTED_USER, at.DEVELOPER, at.TRUSTED_USER_AND_DEV})\nasync def accounts_post(request: Request):\n\n    context = await make_variable_context(request, \"Accounts\")\n\n    offset, per_page = util.sanitize_params(\n        request.query_params.get(\"O\", defaults.O),\n        request.query_params.get(\"PP\", defaults.PP),\n    )\n\n    offset = max(offset, 0)  # Minimize offset at 0.\n\n    context[\"PP\"] = per_page\n    context[\"O\"] = offset\n    context[\"U\"] = U = request.query_params.get(\"U\")\n    context[\"T\"] = T = request.query_params.get(\"T\")\n    context[\"S\"] = S = request.query_params.get(\"S\")\n    context[\"E\"] = E = request.query_params.get(\"E\")\n    context[\"R\"] = R = request.query_params.get(\"R\")\n    context[\"I\"] = I = request.query_params.get(\"I\")  # noqa: E741\n    context[\"SB\"] = SB = request.query_params.get(\"SB\")\n\n    # Setup order by criteria based on SB.\n    order_by_columns = {\n        \"t\": (models.AccountType.ID.asc(), models.User.Username.asc()),\n        \"r\": (models.User.RealName.asc(), models.AccountType.ID.asc()),\n        \"i\": (models.User.IRCNick.asc(), models.AccountType.ID.asc()),\n    }\n    default_order = (models.User.Username.asc(), models.AccountType.ID.asc())\n    order_by = order_by_columns.get(SB, default_order)\n\n    # Convert parameter T to an AccountType ID.\n    account_types = {\n        \"u\": at.USER_ID,\n        \"t\": at.TRUSTED_USER_ID,\n        \"d\": at.DEVELOPER_ID,\n        \"td\": at.TRUSTED_USER_AND_DEV_ID,\n    }\n    account_type_id = account_types.get(T, None)\n\n    # Get a query handle to users, populate the total user\n    # count into a jinja2 context variable.\n    query = db.query(models.User).join(models.AccountType)\n\n    # Populate this list with any additional statements to\n    # be ANDed together.\n    statements = [\n        v\n        for k, v in [\n            (account_type_id is not None, models.AccountType.ID == account_type_id),\n            (bool(U), models.User.Username.like(f\"%{U}%\")),\n            (bool(S), models.User.Suspended == S),\n            (bool(E), models.User.Email.like(f\"%{E}%\")),\n            (bool(R), models.User.RealName.like(f\"%{R}%\")),\n            (bool(I), models.User.IRCNick.like(f\"%{I}%\")),\n        ]\n        if k\n    ]\n\n    # Filter the query by coe-mbining all statements added above into\n    # an AND statement, unless there's just one statement, which\n    # we pass on to filter() as args.\n    if statements:\n        query = query.filter(and_(*statements))\n\n    context[\"total_users\"] = query.count()\n\n    # Finally, order and truncate our users for the current page.\n    users = query.order_by(*order_by).limit(per_page).offset(offset).all()\n    context[\"users\"] = util.apply_all(users, db.refresh)\n\n    return render_template(request, \"account/search.html\", context)\n\n\ndef render_terms_of_service(request: Request, context: dict, terms: typing.Iterable):\n    if not terms:\n        return RedirectResponse(\"/\", status_code=HTTPStatus.SEE_OTHER)\n    context[\"unaccepted_terms\"] = terms\n    return render_template(request, \"tos/index.html\", context)\n\n\n@router.get(\"/tos\")\n@requires_auth\nasync def terms_of_service(request: Request):\n    # Query the database for terms that were previously accepted,\n    # but now have a bumped Revision that needs to be accepted.\n    diffs = (\n        db.query(models.Term)\n        .join(models.AcceptedTerm)\n        .filter(models.AcceptedTerm.Revision < models.Term.Revision)\n        .all()\n    )\n\n    # Query the database for any terms that have not yet been accepted.\n    unaccepted = (\n        db.query(models.Term)\n        .filter(~models.Term.ID.in_(db.query(models.AcceptedTerm.TermsID)))\n        .all()\n    )\n\n    for record in diffs + unaccepted:\n        db.refresh(record)\n\n    # Translate the 'Terms of Service' part of our page title.\n    _ = l10n.get_translator_for_request(request)\n    title = f\"AUR {_('Terms of Service')}\"\n    context = await make_variable_context(request, title)\n\n    accept_needed = sorted(unaccepted + diffs)\n    return render_terms_of_service(request, context, accept_needed)\n\n\n@router.post(\"/tos\")\n@requires_auth\nasync def terms_of_service_post(request: Request, accept: bool = Form(default=False)):\n    # Query the database for terms that were previously accepted,\n    # but now have a bumped Revision that needs to be accepted.\n    diffs = (\n        db.query(models.Term)\n        .join(models.AcceptedTerm)\n        .filter(models.AcceptedTerm.Revision < models.Term.Revision)\n        .all()\n    )\n\n    # Query the database for any terms that have not yet been accepted.\n    unaccepted = (\n        db.query(models.Term)\n        .filter(~models.Term.ID.in_(db.query(models.AcceptedTerm.TermsID)))\n        .all()\n    )\n\n    if not accept:\n        # Translate the 'Terms of Service' part of our page title.\n        _ = l10n.get_translator_for_request(request)\n        title = f\"AUR {_('Terms of Service')}\"\n        context = await make_variable_context(request, title)\n\n        # We already did the database filters here, so let's just use\n        # them instead of reiterating the process in terms_of_service.\n        accept_needed = sorted(unaccepted + diffs)\n        return render_terms_of_service(\n            request, context, util.apply_all(accept_needed, db.refresh)\n        )\n\n    with db.begin():\n        # For each term we found, query for the matching accepted term\n        # and update its Revision to the term's current Revision.\n        for term in diffs:\n            db.refresh(term)\n            accepted_term = request.user.accepted_terms.filter(\n                models.AcceptedTerm.TermsID == term.ID\n            ).first()\n            accepted_term.Revision = term.Revision\n\n        # For each term that was never accepted, accept it!\n        for term in unaccepted:\n            db.refresh(term)\n            db.create(\n                models.AcceptedTerm,\n                User=request.user,\n                Term=term,\n                Revision=term.Revision,\n            )\n\n    return RedirectResponse(\"/\", status_code=HTTPStatus.SEE_OTHER)\n", "#!/bin/bash\nset -eou pipefail\n\nsed -ri -e 's/^bind .*$/bind 0.0.0.0 -::1/g' -e 's/^protected-mode .*$/protected-mode no/g' /etc/redis/redis.conf\n\nexec \"$@\"\n", "{% extends \"partials/layout.html\" %}\n{% block body %}\n    <div class=\"box\">\n\t{% if not request.user.is_authenticated() %}\n            <h2>{% trans %}Accounts{% endtrans %}</h2>\n\t    <hr>\n\t    {% trans %}You must log in to view user information.{% endtrans %}\n\t{% else %}\n\t    <h2>{% trans %}Accounts{% endtrans %} - {{ user.Username }}</h2>\n\t    <hr>\n            <div class=\"arch-bio-entry\">\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Username{% endtrans %}:</p>\n\t\t    <p class=\"data\">{{ user.Username }}</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Account Type{% endtrans %}:</p>\n\t\t    <p class=\"data\">{{ user.AccountType }}</p>\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Email Address{% endtrans %}:</p>\n                    {% if request.user != user and user.HideEmail == 1 %}\n\t\t    <p class=\"data\">None</a></p>\n                    {% else %}\n\t\t    <p class=\"data\"><a href=\"mailto:{{ user.Email }}\">{{ user.Email }}</a></p>\n                    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Real Name{% endtrans %}:</p>\n\t\t    {% if user.Realname != \"\" %}\n\t\t        <p class=\"data\">{{ user.Realname }}</p>\n\t\t    {% else %}\n\t\t\t<p class=\"data\">None</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Homepage{% endtrans %}:</p>\n\t\t    {% if user.Homepage %}\n\t\t        <p class=\"data\"><a href=\"{{ user.Homepage }}\" rel=\"nofollow\">{{ user.Homepage }}</a></p>\n\t\t    {% else %}\n\t\t\t<p class=\"data\">None</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}IRC Nick{% endtrans %}:</p>\n\t\t    {% if user.IRCNick %}\n\t\t\t<p class=\"data\">{{ user.IRCNick }}</p>\n\t\t    {% else %}\n\t\t\t<p class=\"data\">None</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}PGP Key Fingerprint{% endtrans %}:</p>\n\t\t    {% if pgp_key != \"\" %}\n\t\t\t<p class=\"data\">{{ pgp_key }}</p>\n\t\t    {% else %}\n\t\t\t<p class=\"data\">None</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Status{% endtrans %}:</p>\n\t\t    {% if not user.InactivityTS %}\n\t\t\t<p class=\"data\">{{ \"Active\" | tr }}</p>\n\t\t    {% else %}\n\t\t        {% set inactive_ds = user.InactivityTS | dt | as_timezone(timezone) %}\n\t\t\t<p class=\"data\">{{ \"Inactive since %s\" | tr | format(inactive_ds.strftime(\"%Y-%m-%d %H:%M\")) }}</p>\n\t\t    {% endif %}\n\t\t</div>\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Registration date{% endtrans %}:</p>\n\t\t    <p class=\"data\">{{ user.RegistrationTS.strftime(\"%Y-%m-%d\") }}</p>\n\t\t</div>\n\t\t{% if login_ts %}\n\t\t    <div class=\"item\">\n\t\t\t<p class=\"caption\">{% trans %}Last Login{% endtrans %}:</p>\n\t\t\t{% set login_ds = login_ts | dt | as_timezone(timezone) %}\n\t\t\t<p class=\"data\">{{ login_ds.strftime(\"%Y-%m-%d\") }}</p>\n\t\t    </div>\n\t\t{% endif %}\n\t\t<div class=\"item\">\n\t\t    <p class=\"caption\">{% trans %}Links{% endtrans %}:</p>\n\t\t    <div class=\"multidata\">\n\t\t\t<p class=\"data\">{{ \"%sView this user's packages%s\" | tr | format('<a href=\"/packages/?K=%s&SeB=m\">' | format(user.Username), \"</a>\") | safe }}</p>\n\t\t\t{% if request.user.can_edit_user(user) %}\n\t\t\t    <p class=\"data\">{{ \"%sEdit this user's account%s\" | tr | format('<a href=\"/account/%s/edit\">' | format(user.Username), \"</a>\") | safe }}</p>\n\t\t\t{% endif %}\n\t\t\t{% if request.user.has_credential(creds.ACCOUNT_LIST_COMMENTS, approved=[user]) %}\n\t\t\t    <p class=\"data\">{{ \"%sList this user's comments%s\" | tr | format('<a href=\"/account/%s/comments\">' | format(user.Username), \"</a>\") | safe }}</p>\n\t\t\t{% endif %}\n\t\t    </div>\n\t        </div>\n\t    </div>\n\t{% endif %}\n    </div>\n{% endblock %}\n</html>\n{# vim: set sw=4 expandtab: #}\n", "<!--\n    This partial requires a few variables to render properly.\n\n    First off, we can render either a new account form or an\n    update account form.\n\n    (1)\n    To render an update account form, supply `form_type = \"UpdateAccount\"`.\n    To render a new account form, either omit a `form_type` or set it to\n    anything else (should actually be \"NewAccount\" based on the PHP impl).\n\n    (2)\n    Furthermore, when rendering an update form, if the request user\n    is authenticated, there **must** be a `user` supplied, pointing\n    to the user being edited.\n-->\n<form id=\"edit-profile-form\" method=\"post\" {% if action %}action=\"{{ action }}\"{% endif %}>\n    <fieldset>\n        <input type=\"hidden\" name=\"Action\" value=\"{{ form_type }}\">\n    </fieldset>\n\n    <fieldset>\n        <!-- Username -->\n        <div class=\"item\">\n\t\t<label for=\"id_username\">\n            <h2>{% trans %}Username{% endtrans %} <em>({% trans %}required{% endtrans %})</em>:</h2>\n        </label>\n\n        <input id=\"id_username\" type=\"text\" maxlength=\"16\" name=\"U\" value=\"{{ username }}\">\n        <p class=\"comment\">\n            <em>{{ \"Your user name is the name you will use to login. It is visible to the general public, even if your account is inactive.\" | tr }}</em>\n        </p>\n        </div>\n\n        {% if request.user.has_credential(creds.ACCOUNT_CHANGE_TYPE) %}\n            <div class=\"item\">\n                <label for=\"id_type\">\n                    <h2>{% trans %}Account Type{% endtrans %}:</h2>\n                </label>\n                <select name=\"T\" id=\"id_type\">\n                    {% for value, type in account_types %}\n                        <option value=\"{{ value }}\" {% if user.AccountType.ID == value %}selected=\"selected\"{% endif %}>\n                            {{ type | tr }}\n                        </option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div class=\"item\">\n                <label for=\"id_suspended\">\n                    {% trans %}Account Suspended{% endtrans %}:\n                </label>\n\n                <input class=\"checkbox\" id=\"suspended\" type=\"checkbox\" name=\"S\" {% if suspended %}checked=\"checked\"{% endif %}>\n            </div>\n        {% endif %}\n\n        {% if request.user.has_credential(creds.ACCOUNT_EDIT, approved=[user]) %}\n            <div class=\"item\">\n                <div>\n                    <label for=\"id_inactive\">{% trans %}Inactive{% endtrans %}:</label>\n                    <input class=\"checkbox\" id=\"id_inactive\" type=\"checkbox\" name=\"J\" {% if inactive %}checked=\"checked\"{% endif %}>\n                </div>\n            </div>\n        {% endif %}\n\n        <!-- Email -->\n        <div class=\"item\">\n\t    <label for=\"id_email\"><h2>\n                {% trans %}Email Address{% endtrans %} <em>({% trans %}required{% endtrans %})</em>:\n            </h2></label>\n\n            <input id=\"id_email\" type=\"email\" maxlength=\"254\" name=\"E\" value=\"{{ email or '' }}\">\n            <p class=\"comment\"><em>{{ \"Please ensure you correctly entered your email \"\n                      \"address, otherwise you will be locked out.\" | tr }}</em></p>\n        </div>\n\n        <!-- Hide Email -->\n        <div class=\"item\">\n            <div>\n                <label for=\"id_hide\">\n                    {% trans %}Hide Email Address{% endtrans %}:\n                </label>\n\n                <input class=\"checkbox\" id=\"id_hide\" type=\"checkbox\" name=\"H\" value=\"on\" {% if H or request.user.HideEmail == 1 %}checked=\"checked\"{% endif %}>\n            </div>\n            <p class=\"comment\"><em>{{ \"If you do not hide your email address, it is \"\n            \"visible to all registered MPR users. If you hide your \"\n            \"email address, it is visible to MPR \"\n            \"Trusted Users only.\" | tr }}</em></p>\n        </div>\n\n        <!-- Backup Email -->\n        <div class=\"item\">\n            <label for=\"id_backup_email\"><h2>\n                {% trans %}Backup Email Address{% endtrans %}:\n            </h4></label>\n\n            <input id=\"id_backup_email\" type=\"email\" maxlength=\"254\" name=\"BE\" value=\"{{ backup_email or '' }}\">\n            <p class=\"comment\"><em>\n            {{ \"Optionally provide a secondary email address that \"\n            \"can be used to restore your account in case you lose \"\n            \"access to your primary email address.\" | tr }}\n            {{ \"Password reset links are always sent to both your \"\n            \"primary and your backup email address.\" | tr }}\n            {{ \"Your backup email address is always only visible to \"\n            \"MPR Trusted Users, independent of the %s \"\n            \"setting.\" | tr\n            | format(\"<em>%s</em>\" | format(\"Hide Email Address\" | tr))\n            | safe }}\n            </em></p>\n        </div>\n\n        <!-- Real Name -->\n        <div class=\"item\">\n            <label for=\"id_realname\"><h2>\n                {% trans %}Real Name{% endtrans %}:\n            </h2></label>\n\n            <input id=\"id_realname\" type=\"text\" maxlength=\"32\" name=\"R\" value=\"{{ realname }}\">\n        </div>\n\n        <!-- Homepage -->\n        <div class=\"item\">\n            <label for=\"id_homepage\"><h2>\n                {% trans %}Homepage{% endtrans %}:\n            </h2></label>\n\n            <input id=\"id_homepage\" type=\"text\" name=\"HP\" value=\"{{ homepage }}\">\n        </div>\n\n        <!-- IRC Nick -->\n        <div class=\"item\">\n            <label for=\"id_irc\"><h2>\n                {% trans %}IRC Nick{% endtrans %}:\n            </h2></label>\n\n            <input id=\"id_irc\" type=\"text\" maxlength=\"32\" name=\"I\" value=\"{{ ircnick }}\">\n        </div>\n\n        <!-- PGP Key Fingerprint -->\n        <div class=\"item\">\n            <label for=\"id_pgp\"><h2>\n                {% trans %}PGP Key Fingerprint{% endtrans %}:\n            </h2></label>\n\n            <input id=\"id_pgp\" type=\"text\" maxlength=\"50\" name=\"K\" value=\"{{ pgp }}\">\n        </div>\n\n        <hr>\n\n        <!-- Homepage -->\n        <div class=\"item\">\n            <label for=\"id_language\"><h2>\n                {% trans %}Language{% endtrans %}:\n            </h2></label>\n\n            <select id=\"id_language\" name=\"L\">\n                {% for domain, display in languages.items() %}\n                    <option\n                        value=\"{{ domain }}\"\n                        {% if lang == domain %}\n                        selected=\"selected\"\n                        {% endif %}\n                    >\n                        {{ display }}\n                    </option>\n                {% endfor %}\n            </select>\n        </div>\n\n        <!-- Homepage -->\n        <div class=\"item\">\n            <label for=\"id_timezone\"><h2>\n                {% trans %}Timezone{% endtrans %}\n            </h2></label>\n\n            <select id=\"id_timezone\" name=\"TZ\">\n                {% for current, offset in timezones.items() %}\n                    <option value=\"{{ current }}\"\n                        {% if current == tz  %}\n                            selected=\"selected\"\n                        {% endif %}\n                    >{{ offset }}</option>\n                {% endfor %}\n            </select>\n        </div>\n\n    </fieldset>\n    <hr>\n\n    {% if form_type == \"UpdateAccount\" %}\n        <fieldset>\n            <p class=\"overhead-comment\">\n            {{ \"If you want to change the password, enter a new password \"\n               \"and confirm the new password by entering it again.\" | tr\n            }}\n            </p>\n            <div class=\"item\">\n                <label for=\"id_passwd1\"><h2>\n                    {% trans %}Password{% endtrans %}:\n                </h2></label>\n                <input id=\"id_passwd1\" type=\"password\" name=\"P\" value=\"{{ P or '' }}\">\n            </div>\n\n            <div class=\"item\">\n                <label for=\"id_passwd2\"><h2>\n                    {% trans %}Re-type password{% endtrans %}:\n                </h2></label>\n\n                <input id=\"id_passwd2\" type=\"password\" name=\"C\" value=\"{{ C or '' }}\">\n            </div>\n        </fieldset>\n    {% endif %}\n    <hr>\n    <fieldset>\n        <p class=\"overhead-comment\">\n            {{\n            \"The following information is only required if you \"\n            \"want to submit packages to the makedeb Package Repository.\" | tr\n            }}\n        </p>\n        <div class=\"item\">\n            <label for=\"id_ssh\"><h2>\n                {% trans %}SSH Public Key{% endtrans %}:\n            </h2></label>\n\n            <!-- Only set PK auto-fill when we've got a NewAccount form. -->\n            <textarea id=\"id_ssh\" name=\"PK\"\n                      rows=\"5\">{{ ssh_pk }}</textarea>\n        </div>\n    </fieldset>\n    <hr>\n    <fieldset class=\"notify-item\">\n        <legend><h2>{% trans%}Notification settings{% endtrans %}:</h2></legend>\n        <div class=\"item\">\n            <label for=\"id_commentnotify\">\n                {% trans %}Notify of new comments{% endtrans %}:\n            </label>\n\n            <input class=\"checkbox\" id=\"id_commentnotify\" type=\"checkbox\" name=\"CN\" {% if cn %}checked=\"checked\"{% endif %}>\n        </div>\n\n        <div class=\"item\">\n            <label for=\"id_updatenotify\">\n                {% trans %}Notify of package updates{% endtrans %}:\n            </label>\n\n            <input class=\"checkbox\" id=\"id_updatenotify\" type=\"checkbox\" name=\"UN\" {% if un %}checked=\"checked\"{% endif %}>\n        </div>\n\n        <div class=\"item\">\n            <label for=\"id_ownershipnotify\">\n                {% trans %}Notify of ownership updates{% endtrans %}:\n            </label>\n\n            <input class=\"checkbox\" id=\"id_ownershipnotify\" type=\"checkbox\" name=\"ON\" {% if on %}checked=\"checked\"{% endif %}>\n        </div>\n    </fieldset>\n    <hr>\n    <fieldset class=\"confirm-password\">\n        {% if form_type == \"UpdateAccount\" %}\n            <legend>\n                {{ \"To confirm the profile changes, please enter \"\n                \"your current password:\" | tr }}\n            </legend>\n            <div class=\"item\">\n                <label for=\"id_passwd_current\"><h2>{% trans %}Your current password{% endtrans %}:</h2></label>\n                <input id=\"id_passwd_current\" type=\"password\" name=\"passwd\" id=\"id_passwd_current\">\n            </div>\n        {% else %}\n            <!-- Otherwise, form_type is assumed that it's NewAccount. -->\n            <div class=\"item\">\n\t\t        <p>{{ \"To protect the MPR against automated account creation, \"\n                      \"we kindly ask you to provide the output of the following \"\n\t\t              \"command\" | tr }} <em>({% trans %}required{% endtrans %})</em>:</p>\n\n                <div class=\"code-block\">\n                    {% include \"partials/clipboard_icons.html\" %}\n                    <pre><code>{{ captcha_salt | captcha_cmdline }}</code></pre>\n                </div>\n                <div class=\"item\">\n                    <label for=\"id_captcha\">\n                        <h2>{% trans %}Answer{% endtrans %}:</h2>\n                    </label>\n                    <input id=\"id_captcha\" type=\"text\" maxlength=\"6\" name=\"captcha\">\n                    <input type=\"hidden\" name=\"captcha_salt\" value=\"{{ captcha_salt }}\">\n                </div>\n            </div>\n        {% endif %}\n    </fieldset>\n\n    <fieldset>\n        <div class=\"item\">\n        <label></label>\n            {% if form_type == \"UpdateAccount\" %}\n                <input class=\"button\" type=\"submit\"\n                                      value=\"{{ 'Update' | tr }}\"> &nbsp;\n            {% else %}\n                <input class=\"button\" type=\"submit\"\n                                      value=\"{{ 'Create' | tr }}\"> &nbsp;\n            {% endif %}\n            <input class=\"button\" type=\"reset\"\n                                  value=\"{{ 'Reset' | tr }}\">\n        </div>\n    </fieldset>\n</form>\n\n{# vim: set ts=4 sw=4 expandtab: #}\n"], "filenames": ["aurweb/routers/accounts.py", "docker/redis-entrypoint.sh", "templates/account/show.html", "templates/partials/account_form.html"], "buggy_code_start_loc": [273, 4, 21, 85], "buggy_code_end_loc": [323, 5, 22, 86], "fixing_code_start_loc": [273, 4, 22, 85], "fixing_code_end_loc": [329, 5, 27, 86], "type": "CWE-200", "message": "mprweb is a hosting platform for the makedeb Package Repository. Email addresses were found to not have been hidden, even if a user had clicked the `Hide Email Address` checkbox on their account page, or during signup. This could lead to an account's email being leaked, which may be problematic if your email needs to remain private for any reason. Users hosting their own mprweb instance will need to upgrade to the latest commit to get this fixed. Users on the official instance will already have this issue fixed.", "other": {"cve": {"id": "CVE-2022-31185", "sourceIdentifier": "security-advisories@github.com", "published": "2022-08-01T20:15:08.527", "lastModified": "2022-08-09T18:41:06.327", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "mprweb is a hosting platform for the makedeb Package Repository. Email addresses were found to not have been hidden, even if a user had clicked the `Hide Email Address` checkbox on their account page, or during signup. This could lead to an account's email being leaked, which may be problematic if your email needs to remain private for any reason. Users hosting their own mprweb instance will need to upgrade to the latest commit to get this fixed. Users on the official instance will already have this issue fixed."}, {"lang": "es", "value": "mprweb es una plataforma de alojamiento para el repositorio de paquetes makedeb. Ha sido encontrado que las direcciones de correo electr\u00f3nico no han sido ocultado, incluso si un usuario ha hecho clic en la casilla \"Hide Email Address\" en su p\u00e1gina de cuenta, o durante el registro. Esto puede conllevar a que el correo electr\u00f3nico de una cuenta sea filtrado, lo que puede ser problem\u00e1tico si su correo electr\u00f3nico necesita permanecer privado por alguna raz\u00f3n. Los usuarios que alojen su propia instancia de mprweb tendr\u00e1n que actualizar a la \u00faltima confirmaci\u00f3n para que esto sea solucionado. Los usuarios de la instancia oficial ya presentan este problema solucionado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:makedp:mprweb:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.0.0", "matchCriteriaId": "E50F5AA7-7D45-46A4-86EF-C1328A8EED58"}]}]}], "references": [{"url": "https://github.com/makedeb/mprweb/commit/d13e3f2f5a9c0b0f6782f35d837090732026ad77", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/makedeb/mprweb/security/advisories/GHSA-jm39-h693-678g", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/makedeb/mprweb/commit/d13e3f2f5a9c0b0f6782f35d837090732026ad77"}}