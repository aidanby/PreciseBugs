{"buggy_code": ["<?php namespace BookStack\\Http\\Controllers;\n\nuse BookStack\\Entities\\Repos\\PageRepo;\nuse BookStack\\Exceptions\\FileUploadException;\nuse BookStack\\Exceptions\\NotFoundException;\nuse BookStack\\Uploads\\Attachment;\nuse BookStack\\Uploads\\AttachmentService;\nuse Exception;\nuse Illuminate\\Contracts\\Filesystem\\FileNotFoundException;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\MessageBag;\nuse Illuminate\\Validation\\ValidationException;\n\nclass AttachmentController extends Controller\n{\n    protected $attachmentService;\n    protected $attachment;\n    protected $pageRepo;\n\n    /**\n     * AttachmentController constructor.\n     */\n    public function __construct(AttachmentService $attachmentService, Attachment $attachment, PageRepo $pageRepo)\n    {\n        $this->attachmentService = $attachmentService;\n        $this->attachment = $attachment;\n        $this->pageRepo = $pageRepo;\n        parent::__construct();\n    }\n\n\n    /**\n     * Endpoint at which attachments are uploaded to.\n     * @throws ValidationException\n     * @throws NotFoundException\n     */\n    public function upload(Request $request)\n    {\n        $this->validate($request, [\n            'uploaded_to' => 'required|integer|exists:pages,id',\n            'file' => 'required|file'\n        ]);\n\n        $pageId = $request->get('uploaded_to');\n        $page = $this->pageRepo->getById($pageId);\n\n        $this->checkPermission('attachment-create-all');\n        $this->checkOwnablePermission('page-update', $page);\n\n        $uploadedFile = $request->file('file');\n\n        try {\n            $attachment = $this->attachmentService->saveNewUpload($uploadedFile, $pageId);\n        } catch (FileUploadException $e) {\n            return response($e->getMessage(), 500);\n        }\n\n        return response()->json($attachment);\n    }\n\n    /**\n     * Update an uploaded attachment.\n     * @throws ValidationException\n     */\n    public function uploadUpdate(Request $request, $attachmentId)\n    {\n        $this->validate($request, [\n            'file' => 'required|file'\n        ]);\n\n        $attachment = $this->attachment->newQuery()->findOrFail($attachmentId);\n        $this->checkOwnablePermission('view', $attachment->page);\n        $this->checkOwnablePermission('page-update', $attachment->page);\n        $this->checkOwnablePermission('attachment-create', $attachment);\n\n        $uploadedFile = $request->file('file');\n\n        try {\n            $attachment = $this->attachmentService->saveUpdatedUpload($uploadedFile, $attachment);\n        } catch (FileUploadException $e) {\n            return response($e->getMessage(), 500);\n        }\n\n        return response()->json($attachment);\n    }\n\n    /**\n     * Get the update form for an attachment.\n     * @return \\Illuminate\\Contracts\\Foundation\\Application|\\Illuminate\\Contracts\\View\\Factory|\\Illuminate\\View\\View\n     */\n    public function getUpdateForm(string $attachmentId)\n    {\n        $attachment = $this->attachment->findOrFail($attachmentId);\n\n        $this->checkOwnablePermission('page-update', $attachment->page);\n        $this->checkOwnablePermission('attachment-create', $attachment);\n\n        return view('attachments.manager-edit-form', [\n            'attachment' => $attachment,\n        ]);\n    }\n\n    /**\n     * Update the details of an existing file.\n     */\n    public function update(Request $request, string $attachmentId)\n    {\n        $attachment = $this->attachment->newQuery()->findOrFail($attachmentId);\n\n        try {\n            $this->validate($request, [\n                'attachment_edit_name' => 'required|string|min:1|max:255',\n                'attachment_edit_url' =>  'string|min:1|max:255'\n            ]);\n        } catch (ValidationException $exception) {\n            return response()->view('attachments.manager-edit-form', array_merge($request->only(['attachment_edit_name', 'attachment_edit_url']), [\n                'attachment' => $attachment,\n                'errors' => new MessageBag($exception->errors()),\n            ]), 422);\n        }\n\n        $this->checkOwnablePermission('view', $attachment->page);\n        $this->checkOwnablePermission('page-update', $attachment->page);\n        $this->checkOwnablePermission('attachment-create', $attachment);\n\n        $attachment = $this->attachmentService->updateFile($attachment, [\n            'name' => $request->get('attachment_edit_name'),\n            'link' => $request->get('attachment_edit_url'),\n        ]);\n\n        return view('attachments.manager-edit-form', [\n            'attachment' => $attachment,\n        ]);\n    }\n\n    /**\n     * Attach a link to a page.\n     * @throws NotFoundException\n     */\n    public function attachLink(Request $request)\n    {\n        $pageId = $request->get('attachment_link_uploaded_to');\n\n        try {\n            $this->validate($request, [\n                'attachment_link_uploaded_to' => 'required|integer|exists:pages,id',\n                'attachment_link_name' => 'required|string|min:1|max:255',\n                'attachment_link_url' =>  'required|string|min:1|max:255'\n            ]);\n        } catch (ValidationException $exception) {\n            return response()->view('attachments.manager-link-form', array_merge($request->only(['attachment_link_name', 'attachment_link_url']), [\n                'pageId' => $pageId,\n                'errors' => new MessageBag($exception->errors()),\n            ]), 422);\n        }\n\n        $page = $this->pageRepo->getById($pageId);\n\n        $this->checkPermission('attachment-create-all');\n        $this->checkOwnablePermission('page-update', $page);\n\n        $attachmentName = $request->get('attachment_link_name');\n        $link = $request->get('attachment_link_url');\n        $attachment = $this->attachmentService->saveNewFromLink($attachmentName, $link, $pageId);\n\n        return view('attachments.manager-link-form', [\n            'pageId' => $pageId,\n        ]);\n    }\n\n    /**\n     * Get the attachments for a specific page.\n     */\n    public function listForPage(int $pageId)\n    {\n        $page = $this->pageRepo->getById($pageId);\n        $this->checkOwnablePermission('page-view', $page);\n        return view('attachments.manager-list', [\n            'attachments' => $page->attachments->all(),\n        ]);\n    }\n\n    /**\n     * Update the attachment sorting.\n     * @throws ValidationException\n     * @throws NotFoundException\n     */\n    public function sortForPage(Request $request, int $pageId)\n    {\n        $this->validate($request, [\n            'order' => 'required|array',\n        ]);\n        $page = $this->pageRepo->getById($pageId);\n        $this->checkOwnablePermission('page-update', $page);\n\n        $attachmentOrder = $request->get('order');\n        $this->attachmentService->updateFileOrderWithinPage($attachmentOrder, $pageId);\n        return response()->json(['message' => trans('entities.attachments_order_updated')]);\n    }\n\n    /**\n     * Get an attachment from storage.\n     * @throws FileNotFoundException\n     * @throws NotFoundException\n     */\n    public function get(string $attachmentId)\n    {\n        $attachment = $this->attachment->findOrFail($attachmentId);\n        try {\n            $page = $this->pageRepo->getById($attachment->uploaded_to);\n        } catch (NotFoundException $exception) {\n            throw new NotFoundException(trans('errors.attachment_not_found'));\n        }\n\n        $this->checkOwnablePermission('page-view', $page);\n\n        if ($attachment->external) {\n            return redirect($attachment->path);\n        }\n\n        $attachmentContents = $this->attachmentService->getAttachmentFromStorage($attachment);\n        return $this->downloadResponse($attachmentContents, $attachment->getFileName());\n    }\n\n    /**\n     * Delete a specific attachment in the system.\n     * @throws Exception\n     */\n    public function delete(string $attachmentId)\n    {\n        $attachment = $this->attachment->findOrFail($attachmentId);\n        $this->checkOwnablePermission('attachment-delete', $attachment);\n        $this->attachmentService->deleteFile($attachment);\n        return response()->json(['message' => trans('entities.attachments_deleted')]);\n    }\n}\n", "<?php namespace BookStack\\Providers;\n\nuse Blade;\nuse BookStack\\Entities\\Book;\nuse BookStack\\Entities\\Bookshelf;\nuse BookStack\\Entities\\BreadcrumbsViewComposer;\nuse BookStack\\Entities\\Chapter;\nuse BookStack\\Entities\\Page;\nuse BookStack\\Settings\\Setting;\nuse BookStack\\Settings\\SettingService;\nuse Illuminate\\Database\\Eloquent\\Relations\\Relation;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\ServiceProvider;\nuse Schema;\nuse URL;\nuse Validator;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        // Set root URL\n        $appUrl = config('app.url');\n        if ($appUrl) {\n            $isHttps = (strpos($appUrl, 'https://') === 0);\n            URL::forceRootUrl($appUrl);\n            URL::forceScheme($isHttps ? 'https' : 'http');\n        }\n\n        // Custom validation methods\n        Validator::extend('image_extension', function ($attribute, $value, $parameters, $validator) {\n            $validImageExtensions = ['png', 'jpg', 'jpeg', 'gif', 'webp'];\n            return in_array(strtolower($value->getClientOriginalExtension()), $validImageExtensions);\n        });\n\n        Validator::extend('no_double_extension', function ($attribute, $value, $parameters, $validator) {\n            $uploadName = $value->getClientOriginalName();\n            return substr_count($uploadName, '.') < 2;\n        });\n\n        // Custom blade view directives\n        Blade::directive('icon', function ($expression) {\n            return \"<?php echo icon($expression); ?>\";\n        });\n\n        Blade::directive('exposeTranslations', function ($expression) {\n            return \"<?php \\$__env->startPush('translations'); ?>\" .\n                \"<?php foreach({$expression} as \\$key): ?>\" .\n                '<meta name=\"translation\" key=\"<?php echo e($key); ?>\" value=\"<?php echo e(trans($key)); ?>\">' . \"\\n\" .\n                \"<?php endforeach; ?>\" .\n                '<?php $__env->stopPush(); ?>';\n        });\n\n        // Allow longer string lengths after upgrade to utf8mb4\n        Schema::defaultStringLength(191);\n\n        // Set morph-map due to namespace changes\n        Relation::morphMap([\n            'BookStack\\\\Bookshelf' => Bookshelf::class,\n            'BookStack\\\\Book' => Book::class,\n            'BookStack\\\\Chapter' => Chapter::class,\n            'BookStack\\\\Page' => Page::class,\n        ]);\n\n        // View Composers\n        View::composer('partials.breadcrumbs', BreadcrumbsViewComposer::class);\n    }\n\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        $this->app->singleton(SettingService::class, function ($app) {\n            return new SettingService($app->make(Setting::class), $app->make('Illuminate\\Contracts\\Cache\\Repository'));\n        });\n    }\n}\n", "<?php namespace BookStack\\Uploads;\n\nuse BookStack\\Exceptions\\FileUploadException;\nuse Exception;\nuse Illuminate\\Support\\Str;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n\nclass AttachmentService extends UploadService\n{\n\n    /**\n     * Get the storage that will be used for storing files.\n     * @return \\Illuminate\\Contracts\\Filesystem\\Filesystem\n     */\n    protected function getStorage()\n    {\n        $storageType = config('filesystems.attachments');\n\n        // Override default location if set to local public to ensure not visible.\n        if ($storageType === 'local') {\n            $storageType = 'local_secure';\n        }\n\n        return $this->fileSystem->disk($storageType);\n    }\n\n    /**\n     * Get an attachment from storage.\n     * @param Attachment $attachment\n     * @return string\n     * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n     */\n    public function getAttachmentFromStorage(Attachment $attachment)\n    {\n        return $this->getStorage()->get($attachment->path);\n    }\n\n    /**\n     * Store a new attachment upon user upload.\n     * @param UploadedFile $uploadedFile\n     * @param int $page_id\n     * @return Attachment\n     * @throws FileUploadException\n     */\n    public function saveNewUpload(UploadedFile $uploadedFile, $page_id)\n    {\n        $attachmentName = $uploadedFile->getClientOriginalName();\n        $attachmentPath = $this->putFileInStorage($uploadedFile);\n        $largestExistingOrder = Attachment::where('uploaded_to', '=', $page_id)->max('order');\n\n        $attachment = Attachment::forceCreate([\n            'name' => $attachmentName,\n            'path' => $attachmentPath,\n            'extension' => $uploadedFile->getClientOriginalExtension(),\n            'uploaded_to' => $page_id,\n            'created_by' => user()->id,\n            'updated_by' => user()->id,\n            'order' => $largestExistingOrder + 1\n        ]);\n\n        return $attachment;\n    }\n\n    /**\n     * Store a upload, saving to a file and deleting any existing uploads\n     * attached to that file.\n     * @param UploadedFile $uploadedFile\n     * @param Attachment $attachment\n     * @return Attachment\n     * @throws FileUploadException\n     */\n    public function saveUpdatedUpload(UploadedFile $uploadedFile, Attachment $attachment)\n    {\n        if (!$attachment->external) {\n            $this->deleteFileInStorage($attachment);\n        }\n\n        $attachmentName = $uploadedFile->getClientOriginalName();\n        $attachmentPath = $this->putFileInStorage($uploadedFile);\n\n        $attachment->name = $attachmentName;\n        $attachment->path = $attachmentPath;\n        $attachment->external = false;\n        $attachment->extension = $uploadedFile->getClientOriginalExtension();\n        $attachment->save();\n        return $attachment;\n    }\n\n    /**\n     * Save a new File attachment from a given link and name.\n     * @param string $name\n     * @param string $link\n     * @param int $page_id\n     * @return Attachment\n     */\n    public function saveNewFromLink($name, $link, $page_id)\n    {\n        $largestExistingOrder = Attachment::where('uploaded_to', '=', $page_id)->max('order');\n        return Attachment::forceCreate([\n            'name' => $name,\n            'path' => $link,\n            'external' => true,\n            'extension' => '',\n            'uploaded_to' => $page_id,\n            'created_by' => user()->id,\n            'updated_by' => user()->id,\n            'order' => $largestExistingOrder + 1\n        ]);\n    }\n\n    /**\n     * Updates the ordering for a listing of attached files.\n     */\n    public function updateFileOrderWithinPage(array $attachmentOrder, string $pageId)\n    {\n        foreach ($attachmentOrder as $index => $attachmentId) {\n            Attachment::query()->where('uploaded_to', '=', $pageId)\n                ->where('id', '=', $attachmentId)\n                ->update(['order' => $index]);\n        }\n    }\n\n\n    /**\n     * Update the details of a file.\n     * @param Attachment $attachment\n     * @param $requestData\n     * @return Attachment\n     */\n    public function updateFile(Attachment $attachment, $requestData)\n    {\n        $attachment->name = $requestData['name'];\n        if (isset($requestData['link']) && trim($requestData['link']) !== '') {\n            $attachment->path = $requestData['link'];\n            if (!$attachment->external) {\n                $this->deleteFileInStorage($attachment);\n                $attachment->external = true;\n            }\n        }\n        $attachment->save();\n        return $attachment;\n    }\n\n    /**\n     * Delete a File from the database and storage.\n     * @param Attachment $attachment\n     * @throws Exception\n     */\n    public function deleteFile(Attachment $attachment)\n    {\n        if ($attachment->external) {\n            $attachment->delete();\n            return;\n        }\n        \n        $this->deleteFileInStorage($attachment);\n        $attachment->delete();\n    }\n\n    /**\n     * Delete a file from the filesystem it sits on.\n     * Cleans any empty leftover folders.\n     * @param Attachment $attachment\n     */\n    protected function deleteFileInStorage(Attachment $attachment)\n    {\n        $storage = $this->getStorage();\n        $dirPath = dirname($attachment->path);\n\n        $storage->delete($attachment->path);\n        if (count($storage->allFiles($dirPath)) === 0) {\n            $storage->deleteDirectory($dirPath);\n        }\n    }\n\n    /**\n     * Store a file in storage with the given filename\n     * @param UploadedFile $uploadedFile\n     * @return string\n     * @throws FileUploadException\n     */\n    protected function putFileInStorage(UploadedFile $uploadedFile)\n    {\n        $attachmentData = file_get_contents($uploadedFile->getRealPath());\n\n        $storage = $this->getStorage();\n        $basePath = 'uploads/files/' . Date('Y-m-M') . '/';\n\n        $uploadFileName = Str::random(16) . '.' . $uploadedFile->getClientOriginalExtension();\n        while ($storage->exists($basePath . $uploadFileName)) {\n            $uploadFileName = Str::random(3) . $uploadFileName;\n        }\n\n        $attachmentPath = $basePath . $uploadFileName;\n        try {\n            $storage->put($attachmentPath, $attachmentData);\n        } catch (Exception $e) {\n            throw new FileUploadException(trans('errors.path_not_writable', ['filePath' => $attachmentPath]));\n        }\n\n        return $attachmentPath;\n    }\n}\n", "<?php\n/**\n * Validation Lines\n * The following language lines contain the default error messages used by\n * the validator class. Some of these rules have multiple versions such\n * as the size rules. Feel free to tweak each of these messages here.\n */\nreturn [\n\n    // Standard laravel validation lines\n    'accepted'             => 'The :attribute must be accepted.',\n    'active_url'           => 'The :attribute is not a valid URL.',\n    'after'                => 'The :attribute must be a date after :date.',\n    'alpha'                => 'The :attribute may only contain letters.',\n    'alpha_dash'           => 'The :attribute may only contain letters, numbers, dashes and underscores.',\n    'alpha_num'            => 'The :attribute may only contain letters and numbers.',\n    'array'                => 'The :attribute must be an array.',\n    'before'               => 'The :attribute must be a date before :date.',\n    'between'              => [\n        'numeric' => 'The :attribute must be between :min and :max.',\n        'file'    => 'The :attribute must be between :min and :max kilobytes.',\n        'string'  => 'The :attribute must be between :min and :max characters.',\n        'array'   => 'The :attribute must have between :min and :max items.',\n    ],\n    'boolean'              => 'The :attribute field must be true or false.',\n    'confirmed'            => 'The :attribute confirmation does not match.',\n    'date'                 => 'The :attribute is not a valid date.',\n    'date_format'          => 'The :attribute does not match the format :format.',\n    'different'            => 'The :attribute and :other must be different.',\n    'digits'               => 'The :attribute must be :digits digits.',\n    'digits_between'       => 'The :attribute must be between :min and :max digits.',\n    'email'                => 'The :attribute must be a valid email address.',\n    'ends_with' => 'The :attribute must end with one of the following: :values',\n    'filled'               => 'The :attribute field is required.',\n    'gt'                   => [\n        'numeric' => 'The :attribute must be greater than :value.',\n        'file'    => 'The :attribute must be greater than :value kilobytes.',\n        'string'  => 'The :attribute must be greater than :value characters.',\n        'array'   => 'The :attribute must have more than :value items.',\n    ],\n    'gte'                  => [\n        'numeric' => 'The :attribute must be greater than or equal :value.',\n        'file'    => 'The :attribute must be greater than or equal :value kilobytes.',\n        'string'  => 'The :attribute must be greater than or equal :value characters.',\n        'array'   => 'The :attribute must have :value items or more.',\n    ],\n    'exists'               => 'The selected :attribute is invalid.',\n    'image'                => 'The :attribute must be an image.',\n    'image_extension'      => 'The :attribute must have a valid & supported image extension.',\n    'in'                   => 'The selected :attribute is invalid.',\n    'integer'              => 'The :attribute must be an integer.',\n    'ip'                   => 'The :attribute must be a valid IP address.',\n    'ipv4'                 => 'The :attribute must be a valid IPv4 address.',\n    'ipv6'                 => 'The :attribute must be a valid IPv6 address.',\n    'json'                 => 'The :attribute must be a valid JSON string.',\n    'lt'                   => [\n        'numeric' => 'The :attribute must be less than :value.',\n        'file'    => 'The :attribute must be less than :value kilobytes.',\n        'string'  => 'The :attribute must be less than :value characters.',\n        'array'   => 'The :attribute must have less than :value items.',\n    ],\n    'lte'                  => [\n        'numeric' => 'The :attribute must be less than or equal :value.',\n        'file'    => 'The :attribute must be less than or equal :value kilobytes.',\n        'string'  => 'The :attribute must be less than or equal :value characters.',\n        'array'   => 'The :attribute must not have more than :value items.',\n    ],\n    'max'                  => [\n        'numeric' => 'The :attribute may not be greater than :max.',\n        'file'    => 'The :attribute may not be greater than :max kilobytes.',\n        'string'  => 'The :attribute may not be greater than :max characters.',\n        'array'   => 'The :attribute may not have more than :max items.',\n    ],\n    'mimes'                => 'The :attribute must be a file of type: :values.',\n    'min'                  => [\n        'numeric' => 'The :attribute must be at least :min.',\n        'file'    => 'The :attribute must be at least :min kilobytes.',\n        'string'  => 'The :attribute must be at least :min characters.',\n        'array'   => 'The :attribute must have at least :min items.',\n    ],\n    'no_double_extension'  => 'The :attribute must only have a single file extension.',\n    'not_in'               => 'The selected :attribute is invalid.',\n    'not_regex'            => 'The :attribute format is invalid.',\n    'numeric'              => 'The :attribute must be a number.',\n    'regex'                => 'The :attribute format is invalid.',\n    'required'             => 'The :attribute field is required.',\n    'required_if'          => 'The :attribute field is required when :other is :value.',\n    'required_with'        => 'The :attribute field is required when :values is present.',\n    'required_with_all'    => 'The :attribute field is required when :values is present.',\n    'required_without'     => 'The :attribute field is required when :values is not present.',\n    'required_without_all' => 'The :attribute field is required when none of :values are present.',\n    'same'                 => 'The :attribute and :other must match.',\n    'size'                 => [\n        'numeric' => 'The :attribute must be :size.',\n        'file'    => 'The :attribute must be :size kilobytes.',\n        'string'  => 'The :attribute must be :size characters.',\n        'array'   => 'The :attribute must contain :size items.',\n    ],\n    'string'               => 'The :attribute must be a string.',\n    'timezone'             => 'The :attribute must be a valid zone.',\n    'unique'               => 'The :attribute has already been taken.',\n    'url'                  => 'The :attribute format is invalid.',\n    'uploaded'             => 'The file could not be uploaded. The server may not accept files of this size.',\n\n    // Custom validation lines\n    'custom' => [\n        'password-confirm' => [\n            'required_with' => 'Password confirmation required',\n        ],\n    ],\n\n    // Custom validation attributes\n    'attributes' => [],\n];\n", "<?php namespace Tests\\Uploads;\n\nuse BookStack\\Uploads\\Attachment;\nuse BookStack\\Entities\\Page;\nuse BookStack\\Auth\\Permissions\\PermissionService;\nuse Tests\\TestCase;\n\nclass AttachmentTest extends TestCase\n{\n    /**\n     * Get a test file that can be uploaded\n     * @param $fileName\n     * @return \\Illuminate\\Http\\UploadedFile\n     */\n    protected function getTestFile($fileName)\n    {\n        return new \\Illuminate\\Http\\UploadedFile(base_path('tests/test-data/test-file.txt'), $fileName, 'text/plain', 55, null, true);\n    }\n\n    /**\n     * Uploads a file with the given name.\n     * @param $name\n     * @param int $uploadedTo\n     * @return \\Illuminate\\Foundation\\Testing\\TestResponse\n     */\n    protected function uploadFile($name, $uploadedTo = 0)\n    {\n        $file = $this->getTestFile($name);\n        return $this->call('POST', '/attachments/upload', ['uploaded_to' => $uploadedTo], [], ['file' => $file], []);\n    }\n\n    /**\n     * Delete all uploaded files.\n     * To assist with cleanup.\n     */\n    protected function deleteUploads()\n    {\n        $fileService = $this->app->make(\\BookStack\\Uploads\\AttachmentService::class);\n        foreach (Attachment::all() as $file) {\n            $fileService->deleteFile($file);\n        }\n    }\n\n    public function test_file_upload()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n        $admin = $this->getAdmin();\n        $fileName = 'upload_test_file.txt';\n\n        $expectedResp = [\n            'name' => $fileName,\n            'uploaded_to'=> $page->id,\n            'extension' => 'txt',\n            'order' => 1,\n            'created_by' => $admin->id,\n            'updated_by' => $admin->id,\n        ];\n\n        $upload = $this->uploadFile($fileName, $page->id);\n        $upload->assertStatus(200);\n\n        $attachment = Attachment::query()->orderBy('id', 'desc')->first();\n        $expectedResp['path'] = $attachment->path;\n\n        $upload->assertJson($expectedResp);\n        $this->assertDatabaseHas('attachments', $expectedResp);\n\n        $this->deleteUploads();\n    }\n\n    public function test_file_upload_does_not_use_filename()\n    {\n        $page = Page::first();\n        $fileName = 'upload_test_file.txt';\n\n\n        $upload = $this->asAdmin()->uploadFile($fileName, $page->id);\n        $upload->assertStatus(200);\n\n        $attachment = Attachment::query()->orderBy('id', 'desc')->first();\n        $this->assertStringNotContainsString($fileName, $attachment->path);\n        $this->assertStringEndsWith('.txt', $attachment->path);\n    }\n\n    public function test_file_display_and_access()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n        $fileName = 'upload_test_file.txt';\n\n        $upload = $this->uploadFile($fileName, $page->id);\n        $upload->assertStatus(200);\n        $attachment = Attachment::orderBy('id', 'desc')->take(1)->first();\n\n        $pageGet = $this->get($page->getUrl());\n        $pageGet->assertSeeText($fileName);\n        $pageGet->assertSee($attachment->getUrl());\n\n        $attachmentGet = $this->get($attachment->getUrl());\n        $attachmentGet->assertSee('Hi, This is a test file for testing the upload process.');\n\n        $this->deleteUploads();\n    }\n\n    public function test_attaching_link_to_page()\n    {\n        $page = Page::first();\n        $admin = $this->getAdmin();\n        $this->asAdmin();\n\n        $linkReq = $this->call('POST', 'attachments/link', [\n            'attachment_link_url' => 'https://example.com',\n            'attachment_link_name' => 'Example Attachment Link',\n            'attachment_link_uploaded_to' => $page->id,\n        ]);\n\n        $expectedData = [\n            'path' => 'https://example.com',\n            'name' => 'Example Attachment Link',\n            'uploaded_to' => $page->id,\n            'created_by' => $admin->id,\n            'updated_by' => $admin->id,\n            'external' => true,\n            'order' => 1,\n            'extension' => ''\n        ];\n\n        $linkReq->assertStatus(200);\n        $this->assertDatabaseHas('attachments', $expectedData);\n        $attachment = Attachment::orderBy('id', 'desc')->take(1)->first();\n\n        $pageGet = $this->get($page->getUrl());\n        $pageGet->assertSeeText('Example Attachment Link');\n        $pageGet->assertSee($attachment->getUrl());\n\n        $attachmentGet = $this->get($attachment->getUrl());\n        $attachmentGet->assertRedirect('https://example.com');\n\n        $this->deleteUploads();\n    }\n\n    public function test_attachment_updating()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n\n        $this->call('POST', 'attachments/link', [\n            'attachment_link_url' => 'https://example.com',\n            'attachment_link_name' => 'Example Attachment Link',\n            'attachment_link_uploaded_to' => $page->id,\n        ]);\n\n        $attachmentId = Attachment::first()->id;\n\n        $update = $this->call('PUT', 'attachments/' . $attachmentId, [\n            'attachment_edit_name' => 'My new attachment name',\n            'attachment_edit_url' => 'https://test.example.com'\n        ]);\n\n        $expectedData = [\n            'id' => $attachmentId,\n            'path' => 'https://test.example.com',\n            'name' => 'My new attachment name',\n            'uploaded_to' => $page->id\n        ];\n\n        $update->assertStatus(200);\n        $this->assertDatabaseHas('attachments', $expectedData);\n\n        $this->deleteUploads();\n    }\n\n    public function test_file_deletion()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n        $fileName = 'deletion_test.txt';\n        $this->uploadFile($fileName, $page->id);\n\n        $attachment = Attachment::query()->orderBy('id', 'desc')->first();\n        $filePath = storage_path($attachment->path);\n        $this->assertTrue(file_exists($filePath), 'File at path ' . $filePath . ' does not exist');\n\n        $attachment = Attachment::first();\n        $this->delete($attachment->getUrl());\n\n        $this->assertDatabaseMissing('attachments', [\n            'name' => $fileName\n        ]);\n        $this->assertFalse(file_exists($filePath), 'File at path ' . $filePath . ' was not deleted as expected');\n\n        $this->deleteUploads();\n    }\n\n    public function test_attachment_deletion_on_page_deletion()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n        $fileName = 'deletion_test.txt';\n        $this->uploadFile($fileName, $page->id);\n\n        $attachment = Attachment::query()->orderBy('id', 'desc')->first();\n        $filePath = storage_path($attachment->path);\n\n        $this->assertTrue(file_exists($filePath), 'File at path ' . $filePath . ' does not exist');\n        $this->assertDatabaseHas('attachments', [\n            'name' => $fileName\n        ]);\n\n        $this->call('DELETE', $page->getUrl());\n\n        $this->assertDatabaseMissing('attachments', [\n            'name' => $fileName\n        ]);\n        $this->assertFalse(file_exists($filePath), 'File at path ' . $filePath . ' was not deleted as expected');\n\n        $this->deleteUploads();\n    }\n\n    public function test_attachment_access_without_permission_shows_404()\n    {\n        $admin = $this->getAdmin();\n        $viewer = $this->getViewer();\n        $page = Page::first(); /** @var Page $page */\n\n        $this->actingAs($admin);\n        $fileName = 'permission_test.txt';\n        $this->uploadFile($fileName, $page->id);\n        $attachment = Attachment::orderBy('id', 'desc')->take(1)->first();\n\n        $page->restricted = true;\n        $page->permissions()->delete();\n        $page->save();\n        $page->rebuildPermissions();\n        $page->load('jointPermissions');\n\n        $this->actingAs($viewer);\n        $attachmentGet = $this->get($attachment->getUrl());\n        $attachmentGet->assertStatus(404);\n        $attachmentGet->assertSee(\"Attachment not found\");\n\n        $this->deleteUploads();\n    }\n}\n"], "fixing_code": ["<?php namespace BookStack\\Http\\Controllers;\n\nuse BookStack\\Entities\\Repos\\PageRepo;\nuse BookStack\\Exceptions\\FileUploadException;\nuse BookStack\\Exceptions\\NotFoundException;\nuse BookStack\\Uploads\\Attachment;\nuse BookStack\\Uploads\\AttachmentService;\nuse Exception;\nuse Illuminate\\Contracts\\Filesystem\\FileNotFoundException;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\MessageBag;\nuse Illuminate\\Validation\\ValidationException;\n\nclass AttachmentController extends Controller\n{\n    protected $attachmentService;\n    protected $attachment;\n    protected $pageRepo;\n\n    /**\n     * AttachmentController constructor.\n     */\n    public function __construct(AttachmentService $attachmentService, Attachment $attachment, PageRepo $pageRepo)\n    {\n        $this->attachmentService = $attachmentService;\n        $this->attachment = $attachment;\n        $this->pageRepo = $pageRepo;\n        parent::__construct();\n    }\n\n\n    /**\n     * Endpoint at which attachments are uploaded to.\n     * @throws ValidationException\n     * @throws NotFoundException\n     */\n    public function upload(Request $request)\n    {\n        $this->validate($request, [\n            'uploaded_to' => 'required|integer|exists:pages,id',\n            'file' => 'required|file'\n        ]);\n\n        $pageId = $request->get('uploaded_to');\n        $page = $this->pageRepo->getById($pageId);\n\n        $this->checkPermission('attachment-create-all');\n        $this->checkOwnablePermission('page-update', $page);\n\n        $uploadedFile = $request->file('file');\n\n        try {\n            $attachment = $this->attachmentService->saveNewUpload($uploadedFile, $pageId);\n        } catch (FileUploadException $e) {\n            return response($e->getMessage(), 500);\n        }\n\n        return response()->json($attachment);\n    }\n\n    /**\n     * Update an uploaded attachment.\n     * @throws ValidationException\n     */\n    public function uploadUpdate(Request $request, $attachmentId)\n    {\n        $this->validate($request, [\n            'file' => 'required|file'\n        ]);\n\n        $attachment = $this->attachment->newQuery()->findOrFail($attachmentId);\n        $this->checkOwnablePermission('view', $attachment->page);\n        $this->checkOwnablePermission('page-update', $attachment->page);\n        $this->checkOwnablePermission('attachment-create', $attachment);\n\n        $uploadedFile = $request->file('file');\n\n        try {\n            $attachment = $this->attachmentService->saveUpdatedUpload($uploadedFile, $attachment);\n        } catch (FileUploadException $e) {\n            return response($e->getMessage(), 500);\n        }\n\n        return response()->json($attachment);\n    }\n\n    /**\n     * Get the update form for an attachment.\n     * @return \\Illuminate\\Contracts\\Foundation\\Application|\\Illuminate\\Contracts\\View\\Factory|\\Illuminate\\View\\View\n     */\n    public function getUpdateForm(string $attachmentId)\n    {\n        $attachment = $this->attachment->findOrFail($attachmentId);\n\n        $this->checkOwnablePermission('page-update', $attachment->page);\n        $this->checkOwnablePermission('attachment-create', $attachment);\n\n        return view('attachments.manager-edit-form', [\n            'attachment' => $attachment,\n        ]);\n    }\n\n    /**\n     * Update the details of an existing file.\n     */\n    public function update(Request $request, string $attachmentId)\n    {\n        $attachment = $this->attachment->newQuery()->findOrFail($attachmentId);\n\n        try {\n            $this->validate($request, [\n                'attachment_edit_name' => 'required|string|min:1|max:255',\n                'attachment_edit_url' =>  'string|min:1|max:255|safe_url'\n            ]);\n        } catch (ValidationException $exception) {\n            return response()->view('attachments.manager-edit-form', array_merge($request->only(['attachment_edit_name', 'attachment_edit_url']), [\n                'attachment' => $attachment,\n                'errors' => new MessageBag($exception->errors()),\n            ]), 422);\n        }\n\n        $this->checkOwnablePermission('view', $attachment->page);\n        $this->checkOwnablePermission('page-update', $attachment->page);\n        $this->checkOwnablePermission('attachment-create', $attachment);\n\n        $attachment = $this->attachmentService->updateFile($attachment, [\n            'name' => $request->get('attachment_edit_name'),\n            'link' => $request->get('attachment_edit_url'),\n        ]);\n\n        return view('attachments.manager-edit-form', [\n            'attachment' => $attachment,\n        ]);\n    }\n\n    /**\n     * Attach a link to a page.\n     * @throws NotFoundException\n     */\n    public function attachLink(Request $request)\n    {\n        $pageId = $request->get('attachment_link_uploaded_to');\n\n        try {\n            $this->validate($request, [\n                'attachment_link_uploaded_to' => 'required|integer|exists:pages,id',\n                'attachment_link_name' => 'required|string|min:1|max:255',\n                'attachment_link_url' =>  'required|string|min:1|max:255|safe_url'\n            ]);\n        } catch (ValidationException $exception) {\n            return response()->view('attachments.manager-link-form', array_merge($request->only(['attachment_link_name', 'attachment_link_url']), [\n                'pageId' => $pageId,\n                'errors' => new MessageBag($exception->errors()),\n            ]), 422);\n        }\n\n        $page = $this->pageRepo->getById($pageId);\n\n        $this->checkPermission('attachment-create-all');\n        $this->checkOwnablePermission('page-update', $page);\n\n        $attachmentName = $request->get('attachment_link_name');\n        $link = $request->get('attachment_link_url');\n        $attachment = $this->attachmentService->saveNewFromLink($attachmentName, $link, intval($pageId));\n\n        return view('attachments.manager-link-form', [\n            'pageId' => $pageId,\n        ]);\n    }\n\n    /**\n     * Get the attachments for a specific page.\n     */\n    public function listForPage(int $pageId)\n    {\n        $page = $this->pageRepo->getById($pageId);\n        $this->checkOwnablePermission('page-view', $page);\n        return view('attachments.manager-list', [\n            'attachments' => $page->attachments->all(),\n        ]);\n    }\n\n    /**\n     * Update the attachment sorting.\n     * @throws ValidationException\n     * @throws NotFoundException\n     */\n    public function sortForPage(Request $request, int $pageId)\n    {\n        $this->validate($request, [\n            'order' => 'required|array',\n        ]);\n        $page = $this->pageRepo->getById($pageId);\n        $this->checkOwnablePermission('page-update', $page);\n\n        $attachmentOrder = $request->get('order');\n        $this->attachmentService->updateFileOrderWithinPage($attachmentOrder, $pageId);\n        return response()->json(['message' => trans('entities.attachments_order_updated')]);\n    }\n\n    /**\n     * Get an attachment from storage.\n     * @throws FileNotFoundException\n     * @throws NotFoundException\n     */\n    public function get(string $attachmentId)\n    {\n        $attachment = $this->attachment->findOrFail($attachmentId);\n        try {\n            $page = $this->pageRepo->getById($attachment->uploaded_to);\n        } catch (NotFoundException $exception) {\n            throw new NotFoundException(trans('errors.attachment_not_found'));\n        }\n\n        $this->checkOwnablePermission('page-view', $page);\n\n        if ($attachment->external) {\n            return redirect($attachment->path);\n        }\n\n        $attachmentContents = $this->attachmentService->getAttachmentFromStorage($attachment);\n        return $this->downloadResponse($attachmentContents, $attachment->getFileName());\n    }\n\n    /**\n     * Delete a specific attachment in the system.\n     * @throws Exception\n     */\n    public function delete(string $attachmentId)\n    {\n        $attachment = $this->attachment->findOrFail($attachmentId);\n        $this->checkOwnablePermission('attachment-delete', $attachment);\n        $this->attachmentService->deleteFile($attachment);\n        return response()->json(['message' => trans('entities.attachments_deleted')]);\n    }\n}\n", "<?php namespace BookStack\\Providers;\n\nuse Blade;\nuse BookStack\\Entities\\Book;\nuse BookStack\\Entities\\Bookshelf;\nuse BookStack\\Entities\\BreadcrumbsViewComposer;\nuse BookStack\\Entities\\Chapter;\nuse BookStack\\Entities\\Page;\nuse BookStack\\Settings\\Setting;\nuse BookStack\\Settings\\SettingService;\nuse Illuminate\\Database\\Eloquent\\Relations\\Relation;\nuse Illuminate\\Support\\Facades\\View;\nuse Illuminate\\Support\\ServiceProvider;\nuse Schema;\nuse URL;\nuse Validator;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        // Set root URL\n        $appUrl = config('app.url');\n        if ($appUrl) {\n            $isHttps = (strpos($appUrl, 'https://') === 0);\n            URL::forceRootUrl($appUrl);\n            URL::forceScheme($isHttps ? 'https' : 'http');\n        }\n\n        // Custom validation methods\n        Validator::extend('image_extension', function ($attribute, $value, $parameters, $validator) {\n            $validImageExtensions = ['png', 'jpg', 'jpeg', 'gif', 'webp'];\n            return in_array(strtolower($value->getClientOriginalExtension()), $validImageExtensions);\n        });\n\n        Validator::extend('no_double_extension', function ($attribute, $value, $parameters, $validator) {\n            $uploadName = $value->getClientOriginalName();\n            return substr_count($uploadName, '.') < 2;\n        });\n\n        Validator::extend('safe_url', function ($attribute, $value, $parameters, $validator) {\n            $cleanLinkName = strtolower(trim($value));\n            $isJs = strpos($cleanLinkName, 'javascript:') === 0;\n            $isData = strpos($cleanLinkName, 'data:') === 0;\n            return !$isJs && !$isData;\n        });\n\n        // Custom blade view directives\n        Blade::directive('icon', function ($expression) {\n            return \"<?php echo icon($expression); ?>\";\n        });\n\n        Blade::directive('exposeTranslations', function ($expression) {\n            return \"<?php \\$__env->startPush('translations'); ?>\" .\n                \"<?php foreach({$expression} as \\$key): ?>\" .\n                '<meta name=\"translation\" key=\"<?php echo e($key); ?>\" value=\"<?php echo e(trans($key)); ?>\">' . \"\\n\" .\n                \"<?php endforeach; ?>\" .\n                '<?php $__env->stopPush(); ?>';\n        });\n\n        // Allow longer string lengths after upgrade to utf8mb4\n        Schema::defaultStringLength(191);\n\n        // Set morph-map due to namespace changes\n        Relation::morphMap([\n            'BookStack\\\\Bookshelf' => Bookshelf::class,\n            'BookStack\\\\Book' => Book::class,\n            'BookStack\\\\Chapter' => Chapter::class,\n            'BookStack\\\\Page' => Page::class,\n        ]);\n\n        // View Composers\n        View::composer('partials.breadcrumbs', BreadcrumbsViewComposer::class);\n    }\n\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n        $this->app->singleton(SettingService::class, function ($app) {\n            return new SettingService($app->make(Setting::class), $app->make('Illuminate\\Contracts\\Cache\\Repository'));\n        });\n    }\n}\n", "<?php namespace BookStack\\Uploads;\n\nuse BookStack\\Exceptions\\FileUploadException;\nuse Exception;\nuse Illuminate\\Support\\Str;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n\nclass AttachmentService extends UploadService\n{\n\n    /**\n     * Get the storage that will be used for storing files.\n     * @return \\Illuminate\\Contracts\\Filesystem\\Filesystem\n     */\n    protected function getStorage()\n    {\n        $storageType = config('filesystems.attachments');\n\n        // Override default location if set to local public to ensure not visible.\n        if ($storageType === 'local') {\n            $storageType = 'local_secure';\n        }\n\n        return $this->fileSystem->disk($storageType);\n    }\n\n    /**\n     * Get an attachment from storage.\n     * @param Attachment $attachment\n     * @return string\n     * @throws \\Illuminate\\Contracts\\Filesystem\\FileNotFoundException\n     */\n    public function getAttachmentFromStorage(Attachment $attachment)\n    {\n        return $this->getStorage()->get($attachment->path);\n    }\n\n    /**\n     * Store a new attachment upon user upload.\n     * @param UploadedFile $uploadedFile\n     * @param int $page_id\n     * @return Attachment\n     * @throws FileUploadException\n     */\n    public function saveNewUpload(UploadedFile $uploadedFile, $page_id)\n    {\n        $attachmentName = $uploadedFile->getClientOriginalName();\n        $attachmentPath = $this->putFileInStorage($uploadedFile);\n        $largestExistingOrder = Attachment::where('uploaded_to', '=', $page_id)->max('order');\n\n        $attachment = Attachment::forceCreate([\n            'name' => $attachmentName,\n            'path' => $attachmentPath,\n            'extension' => $uploadedFile->getClientOriginalExtension(),\n            'uploaded_to' => $page_id,\n            'created_by' => user()->id,\n            'updated_by' => user()->id,\n            'order' => $largestExistingOrder + 1\n        ]);\n\n        return $attachment;\n    }\n\n    /**\n     * Store a upload, saving to a file and deleting any existing uploads\n     * attached to that file.\n     * @param UploadedFile $uploadedFile\n     * @param Attachment $attachment\n     * @return Attachment\n     * @throws FileUploadException\n     */\n    public function saveUpdatedUpload(UploadedFile $uploadedFile, Attachment $attachment)\n    {\n        if (!$attachment->external) {\n            $this->deleteFileInStorage($attachment);\n        }\n\n        $attachmentName = $uploadedFile->getClientOriginalName();\n        $attachmentPath = $this->putFileInStorage($uploadedFile);\n\n        $attachment->name = $attachmentName;\n        $attachment->path = $attachmentPath;\n        $attachment->external = false;\n        $attachment->extension = $uploadedFile->getClientOriginalExtension();\n        $attachment->save();\n        return $attachment;\n    }\n\n    /**\n     * Save a new File attachment from a given link and name.\n     */\n    public function saveNewFromLink(string $name, string $link, int $page_id): Attachment\n    {\n        $largestExistingOrder = Attachment::where('uploaded_to', '=', $page_id)->max('order');\n        return Attachment::forceCreate([\n            'name' => $name,\n            'path' => $link,\n            'external' => true,\n            'extension' => '',\n            'uploaded_to' => $page_id,\n            'created_by' => user()->id,\n            'updated_by' => user()->id,\n            'order' => $largestExistingOrder + 1\n        ]);\n    }\n\n    /**\n     * Updates the ordering for a listing of attached files.\n     */\n    public function updateFileOrderWithinPage(array $attachmentOrder, string $pageId)\n    {\n        foreach ($attachmentOrder as $index => $attachmentId) {\n            Attachment::query()->where('uploaded_to', '=', $pageId)\n                ->where('id', '=', $attachmentId)\n                ->update(['order' => $index]);\n        }\n    }\n\n\n    /**\n     * Update the details of a file.\n     */\n    public function updateFile(Attachment $attachment, array $requestData): Attachment\n    {\n        $attachment->name = $requestData['name'];\n\n        if (isset($requestData['link']) && trim($requestData['link']) !== '') {\n            $attachment->path = $requestData['link'];\n            if (!$attachment->external) {\n                $this->deleteFileInStorage($attachment);\n                $attachment->external = true;\n            }\n        }\n\n        $attachment->save();\n        return $attachment;\n    }\n\n    /**\n     * Delete a File from the database and storage.\n     * @param Attachment $attachment\n     * @throws Exception\n     */\n    public function deleteFile(Attachment $attachment)\n    {\n        if ($attachment->external) {\n            $attachment->delete();\n            return;\n        }\n        \n        $this->deleteFileInStorage($attachment);\n        $attachment->delete();\n    }\n\n    /**\n     * Delete a file from the filesystem it sits on.\n     * Cleans any empty leftover folders.\n     * @param Attachment $attachment\n     */\n    protected function deleteFileInStorage(Attachment $attachment)\n    {\n        $storage = $this->getStorage();\n        $dirPath = dirname($attachment->path);\n\n        $storage->delete($attachment->path);\n        if (count($storage->allFiles($dirPath)) === 0) {\n            $storage->deleteDirectory($dirPath);\n        }\n    }\n\n    /**\n     * Store a file in storage with the given filename\n     * @param UploadedFile $uploadedFile\n     * @return string\n     * @throws FileUploadException\n     */\n    protected function putFileInStorage(UploadedFile $uploadedFile)\n    {\n        $attachmentData = file_get_contents($uploadedFile->getRealPath());\n\n        $storage = $this->getStorage();\n        $basePath = 'uploads/files/' . Date('Y-m-M') . '/';\n\n        $uploadFileName = Str::random(16) . '.' . $uploadedFile->getClientOriginalExtension();\n        while ($storage->exists($basePath . $uploadFileName)) {\n            $uploadFileName = Str::random(3) . $uploadFileName;\n        }\n\n        $attachmentPath = $basePath . $uploadFileName;\n        try {\n            $storage->put($attachmentPath, $attachmentData);\n        } catch (Exception $e) {\n            throw new FileUploadException(trans('errors.path_not_writable', ['filePath' => $attachmentPath]));\n        }\n\n        return $attachmentPath;\n    }\n}\n", "<?php\n/**\n * Validation Lines\n * The following language lines contain the default error messages used by\n * the validator class. Some of these rules have multiple versions such\n * as the size rules. Feel free to tweak each of these messages here.\n */\nreturn [\n\n    // Standard laravel validation lines\n    'accepted'             => 'The :attribute must be accepted.',\n    'active_url'           => 'The :attribute is not a valid URL.',\n    'after'                => 'The :attribute must be a date after :date.',\n    'alpha'                => 'The :attribute may only contain letters.',\n    'alpha_dash'           => 'The :attribute may only contain letters, numbers, dashes and underscores.',\n    'alpha_num'            => 'The :attribute may only contain letters and numbers.',\n    'array'                => 'The :attribute must be an array.',\n    'before'               => 'The :attribute must be a date before :date.',\n    'between'              => [\n        'numeric' => 'The :attribute must be between :min and :max.',\n        'file'    => 'The :attribute must be between :min and :max kilobytes.',\n        'string'  => 'The :attribute must be between :min and :max characters.',\n        'array'   => 'The :attribute must have between :min and :max items.',\n    ],\n    'boolean'              => 'The :attribute field must be true or false.',\n    'confirmed'            => 'The :attribute confirmation does not match.',\n    'date'                 => 'The :attribute is not a valid date.',\n    'date_format'          => 'The :attribute does not match the format :format.',\n    'different'            => 'The :attribute and :other must be different.',\n    'digits'               => 'The :attribute must be :digits digits.',\n    'digits_between'       => 'The :attribute must be between :min and :max digits.',\n    'email'                => 'The :attribute must be a valid email address.',\n    'ends_with' => 'The :attribute must end with one of the following: :values',\n    'filled'               => 'The :attribute field is required.',\n    'gt'                   => [\n        'numeric' => 'The :attribute must be greater than :value.',\n        'file'    => 'The :attribute must be greater than :value kilobytes.',\n        'string'  => 'The :attribute must be greater than :value characters.',\n        'array'   => 'The :attribute must have more than :value items.',\n    ],\n    'gte'                  => [\n        'numeric' => 'The :attribute must be greater than or equal :value.',\n        'file'    => 'The :attribute must be greater than or equal :value kilobytes.',\n        'string'  => 'The :attribute must be greater than or equal :value characters.',\n        'array'   => 'The :attribute must have :value items or more.',\n    ],\n    'exists'               => 'The selected :attribute is invalid.',\n    'image'                => 'The :attribute must be an image.',\n    'image_extension'      => 'The :attribute must have a valid & supported image extension.',\n    'in'                   => 'The selected :attribute is invalid.',\n    'integer'              => 'The :attribute must be an integer.',\n    'ip'                   => 'The :attribute must be a valid IP address.',\n    'ipv4'                 => 'The :attribute must be a valid IPv4 address.',\n    'ipv6'                 => 'The :attribute must be a valid IPv6 address.',\n    'json'                 => 'The :attribute must be a valid JSON string.',\n    'lt'                   => [\n        'numeric' => 'The :attribute must be less than :value.',\n        'file'    => 'The :attribute must be less than :value kilobytes.',\n        'string'  => 'The :attribute must be less than :value characters.',\n        'array'   => 'The :attribute must have less than :value items.',\n    ],\n    'lte'                  => [\n        'numeric' => 'The :attribute must be less than or equal :value.',\n        'file'    => 'The :attribute must be less than or equal :value kilobytes.',\n        'string'  => 'The :attribute must be less than or equal :value characters.',\n        'array'   => 'The :attribute must not have more than :value items.',\n    ],\n    'max'                  => [\n        'numeric' => 'The :attribute may not be greater than :max.',\n        'file'    => 'The :attribute may not be greater than :max kilobytes.',\n        'string'  => 'The :attribute may not be greater than :max characters.',\n        'array'   => 'The :attribute may not have more than :max items.',\n    ],\n    'mimes'                => 'The :attribute must be a file of type: :values.',\n    'min'                  => [\n        'numeric' => 'The :attribute must be at least :min.',\n        'file'    => 'The :attribute must be at least :min kilobytes.',\n        'string'  => 'The :attribute must be at least :min characters.',\n        'array'   => 'The :attribute must have at least :min items.',\n    ],\n    'no_double_extension'  => 'The :attribute must only have a single file extension.',\n    'not_in'               => 'The selected :attribute is invalid.',\n    'not_regex'            => 'The :attribute format is invalid.',\n    'numeric'              => 'The :attribute must be a number.',\n    'regex'                => 'The :attribute format is invalid.',\n    'required'             => 'The :attribute field is required.',\n    'required_if'          => 'The :attribute field is required when :other is :value.',\n    'required_with'        => 'The :attribute field is required when :values is present.',\n    'required_with_all'    => 'The :attribute field is required when :values is present.',\n    'required_without'     => 'The :attribute field is required when :values is not present.',\n    'required_without_all' => 'The :attribute field is required when none of :values are present.',\n    'same'                 => 'The :attribute and :other must match.',\n    'safe_url'             => 'The provided link may not be safe.',\n    'size'                 => [\n        'numeric' => 'The :attribute must be :size.',\n        'file'    => 'The :attribute must be :size kilobytes.',\n        'string'  => 'The :attribute must be :size characters.',\n        'array'   => 'The :attribute must contain :size items.',\n    ],\n    'string'               => 'The :attribute must be a string.',\n    'timezone'             => 'The :attribute must be a valid zone.',\n    'unique'               => 'The :attribute has already been taken.',\n    'url'                  => 'The :attribute format is invalid.',\n    'uploaded'             => 'The file could not be uploaded. The server may not accept files of this size.',\n\n    // Custom validation lines\n    'custom' => [\n        'password-confirm' => [\n            'required_with' => 'Password confirmation required',\n        ],\n    ],\n\n    // Custom validation attributes\n    'attributes' => [],\n];\n", "<?php namespace Tests\\Uploads;\n\nuse BookStack\\Uploads\\Attachment;\nuse BookStack\\Entities\\Page;\nuse BookStack\\Auth\\Permissions\\PermissionService;\nuse BookStack\\Uploads\\AttachmentService;\nuse Illuminate\\Http\\UploadedFile;\nuse Tests\\TestCase;\nuse Tests\\TestResponse;\n\nclass AttachmentTest extends TestCase\n{\n    /**\n     * Get a test file that can be uploaded\n     */\n    protected function getTestFile(string $fileName): UploadedFile\n    {\n        return new UploadedFile(base_path('tests/test-data/test-file.txt'), $fileName, 'text/plain', 55, null, true);\n    }\n\n    /**\n     * Uploads a file with the given name.\n     */\n    protected function uploadFile(string $name, int $uploadedTo = 0): \\Illuminate\\Foundation\\Testing\\TestResponse\n    {\n        $file = $this->getTestFile($name);\n        return $this->call('POST', '/attachments/upload', ['uploaded_to' => $uploadedTo], [], ['file' => $file], []);\n    }\n\n    /**\n     * Create a new attachment\n     */\n    protected function createAttachment(Page $page): Attachment\n    {\n        $this->post('attachments/link', [\n            'attachment_link_url' => 'https://example.com',\n            'attachment_link_name' => 'Example Attachment Link',\n            'attachment_link_uploaded_to' => $page->id,\n        ]);\n\n        return Attachment::query()->latest()->first();\n    }\n\n    /**\n     * Delete all uploaded files.\n     * To assist with cleanup.\n     */\n    protected function deleteUploads()\n    {\n        $fileService = $this->app->make(AttachmentService::class);\n        foreach (Attachment::all() as $file) {\n            $fileService->deleteFile($file);\n        }\n    }\n\n    public function test_file_upload()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n        $admin = $this->getAdmin();\n        $fileName = 'upload_test_file.txt';\n\n        $expectedResp = [\n            'name' => $fileName,\n            'uploaded_to'=> $page->id,\n            'extension' => 'txt',\n            'order' => 1,\n            'created_by' => $admin->id,\n            'updated_by' => $admin->id,\n        ];\n\n        $upload = $this->uploadFile($fileName, $page->id);\n        $upload->assertStatus(200);\n\n        $attachment = Attachment::query()->orderBy('id', 'desc')->first();\n        $expectedResp['path'] = $attachment->path;\n\n        $upload->assertJson($expectedResp);\n        $this->assertDatabaseHas('attachments', $expectedResp);\n\n        $this->deleteUploads();\n    }\n\n    public function test_file_upload_does_not_use_filename()\n    {\n        $page = Page::first();\n        $fileName = 'upload_test_file.txt';\n\n\n        $upload = $this->asAdmin()->uploadFile($fileName, $page->id);\n        $upload->assertStatus(200);\n\n        $attachment = Attachment::query()->orderBy('id', 'desc')->first();\n        $this->assertStringNotContainsString($fileName, $attachment->path);\n        $this->assertStringEndsWith('.txt', $attachment->path);\n    }\n\n    public function test_file_display_and_access()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n        $fileName = 'upload_test_file.txt';\n\n        $upload = $this->uploadFile($fileName, $page->id);\n        $upload->assertStatus(200);\n        $attachment = Attachment::orderBy('id', 'desc')->take(1)->first();\n\n        $pageGet = $this->get($page->getUrl());\n        $pageGet->assertSeeText($fileName);\n        $pageGet->assertSee($attachment->getUrl());\n\n        $attachmentGet = $this->get($attachment->getUrl());\n        $attachmentGet->assertSee('Hi, This is a test file for testing the upload process.');\n\n        $this->deleteUploads();\n    }\n\n    public function test_attaching_link_to_page()\n    {\n        $page = Page::first();\n        $admin = $this->getAdmin();\n        $this->asAdmin();\n\n        $linkReq = $this->call('POST', 'attachments/link', [\n            'attachment_link_url' => 'https://example.com',\n            'attachment_link_name' => 'Example Attachment Link',\n            'attachment_link_uploaded_to' => $page->id,\n        ]);\n\n        $expectedData = [\n            'path' => 'https://example.com',\n            'name' => 'Example Attachment Link',\n            'uploaded_to' => $page->id,\n            'created_by' => $admin->id,\n            'updated_by' => $admin->id,\n            'external' => true,\n            'order' => 1,\n            'extension' => ''\n        ];\n\n        $linkReq->assertStatus(200);\n        $this->assertDatabaseHas('attachments', $expectedData);\n        $attachment = Attachment::orderBy('id', 'desc')->take(1)->first();\n\n        $pageGet = $this->get($page->getUrl());\n        $pageGet->assertSeeText('Example Attachment Link');\n        $pageGet->assertSee($attachment->getUrl());\n\n        $attachmentGet = $this->get($attachment->getUrl());\n        $attachmentGet->assertRedirect('https://example.com');\n\n        $this->deleteUploads();\n    }\n\n    public function test_attachment_updating()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n\n        $attachment = $this->createAttachment($page);\n        $update = $this->call('PUT', 'attachments/' . $attachment->id, [\n            'attachment_edit_name' => 'My new attachment name',\n            'attachment_edit_url' => 'https://test.example.com'\n        ]);\n\n        $expectedData = [\n            'id' => $attachment->id,\n            'path' => 'https://test.example.com',\n            'name' => 'My new attachment name',\n            'uploaded_to' => $page->id\n        ];\n\n        $update->assertStatus(200);\n        $this->assertDatabaseHas('attachments', $expectedData);\n\n        $this->deleteUploads();\n    }\n\n    public function test_file_deletion()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n        $fileName = 'deletion_test.txt';\n        $this->uploadFile($fileName, $page->id);\n\n        $attachment = Attachment::query()->orderBy('id', 'desc')->first();\n        $filePath = storage_path($attachment->path);\n        $this->assertTrue(file_exists($filePath), 'File at path ' . $filePath . ' does not exist');\n\n        $attachment = Attachment::first();\n        $this->delete($attachment->getUrl());\n\n        $this->assertDatabaseMissing('attachments', [\n            'name' => $fileName\n        ]);\n        $this->assertFalse(file_exists($filePath), 'File at path ' . $filePath . ' was not deleted as expected');\n\n        $this->deleteUploads();\n    }\n\n    public function test_attachment_deletion_on_page_deletion()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n        $fileName = 'deletion_test.txt';\n        $this->uploadFile($fileName, $page->id);\n\n        $attachment = Attachment::query()->orderBy('id', 'desc')->first();\n        $filePath = storage_path($attachment->path);\n\n        $this->assertTrue(file_exists($filePath), 'File at path ' . $filePath . ' does not exist');\n        $this->assertDatabaseHas('attachments', [\n            'name' => $fileName\n        ]);\n\n        $this->call('DELETE', $page->getUrl());\n\n        $this->assertDatabaseMissing('attachments', [\n            'name' => $fileName\n        ]);\n        $this->assertFalse(file_exists($filePath), 'File at path ' . $filePath . ' was not deleted as expected');\n\n        $this->deleteUploads();\n    }\n\n    public function test_attachment_access_without_permission_shows_404()\n    {\n        $admin = $this->getAdmin();\n        $viewer = $this->getViewer();\n        $page = Page::first(); /** @var Page $page */\n\n        $this->actingAs($admin);\n        $fileName = 'permission_test.txt';\n        $this->uploadFile($fileName, $page->id);\n        $attachment = Attachment::orderBy('id', 'desc')->take(1)->first();\n\n        $page->restricted = true;\n        $page->permissions()->delete();\n        $page->save();\n        $page->rebuildPermissions();\n        $page->load('jointPermissions');\n\n        $this->actingAs($viewer);\n        $attachmentGet = $this->get($attachment->getUrl());\n        $attachmentGet->assertStatus(404);\n        $attachmentGet->assertSee(\"Attachment not found\");\n\n        $this->deleteUploads();\n    }\n\n    public function test_data_and_js_links_cannot_be_attached_to_a_page()\n    {\n        $page = Page::first();\n        $this->asAdmin();\n\n        $badLinks = [\n            'javascript:alert(\"bunny\")',\n            ' javascript:alert(\"bunny\")',\n            'JavaScript:alert(\"bunny\")',\n            \"\\t\\n\\t\\nJavaScript:alert(\\\"bunny\\\")\",\n            \"data:text/html;<a></a>\",\n            \"Data:text/html;<a></a>\",\n            \"Data:text/html;<a></a>\",\n        ];\n\n        foreach ($badLinks as $badLink) {\n            $linkReq = $this->post('attachments/link', [\n                'attachment_link_url' => $badLink,\n                'attachment_link_name' => 'Example Attachment Link',\n                'attachment_link_uploaded_to' => $page->id,\n            ]);\n            $linkReq->assertStatus(422);\n            $this->assertDatabaseMissing('attachments', [\n                'path' => $badLink,\n            ]);\n        }\n\n        $attachment = $this->createAttachment($page);\n\n        foreach ($badLinks as $badLink) {\n            $linkReq = $this->put('attachments/' . $attachment->id, [\n                'attachment_edit_url' => $badLink,\n                'attachment_edit_name' => 'Example Attachment Link',\n            ]);\n            $linkReq->assertStatus(422);\n            $this->assertDatabaseMissing('attachments', [\n                'path' => $badLink,\n            ]);\n        }\n    }\n}\n"], "filenames": ["app/Http/Controllers/AttachmentController.php", "app/Providers/AppServiceProvider.php", "app/Uploads/AttachmentService.php", "resources/lang/en/validation.php", "tests/Uploads/AttachmentTest.php"], "buggy_code_start_loc": [113, 45, 91, 92, 5], "buggy_code_end_loc": [165, 45, 139, 92, 244], "fixing_code_start_loc": [113, 46, 90, 93, 6], "fixing_code_end_loc": [165, 53, 135, 94, 291], "type": "CWE-79", "message": "In BookStack before version 0.30.4, a user with permissions to edit a page could add an attached link which would execute untrusted JavaScript code when clicked by a viewer of the page. Dangerous content may remain in the database after this update. If you think this could have been exploited the linked advisory provides a SQL query to test. As a workaround, page edit permissions could be limited to only those that are trusted until you can upgrade although this will not address existing exploitation of this vulnerability. The issue is fixed in version 0.30.4.", "other": {"cve": {"id": "CVE-2020-26210", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-03T19:15:13.157", "lastModified": "2020-11-16T16:14:37.913", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In BookStack before version 0.30.4, a user with permissions to edit a page could add an attached link which would execute untrusted JavaScript code when clicked by a viewer of the page. Dangerous content may remain in the database after this update. If you think this could have been exploited the linked advisory provides a SQL query to test. As a workaround, page edit permissions could be limited to only those that are trusted until you can upgrade although this will not address existing exploitation of this vulnerability. The issue is fixed in version 0.30.4."}, {"lang": "es", "value": "En BookStack anterior a la versi\u00f3n 0.30.4, un usuario con permisos para editar una p\u00e1gina pod\u00eda agregar un enlace adjunto que ejecutar\u00eda c\u00f3digo JavaScript no confiable cuando un visualizador de la p\u00e1gina hiciera clic en \u00e9l.&#xa0;El contenido peligroso puede permanecer en la base de datos despu\u00e9s de esta actualizaci\u00f3n.&#xa0;Si cree que esto podr\u00eda haber sido explotado, el aviso vinculado proporciona una consulta SQL para probar.&#xa0;Como soluci\u00f3n alternativa, los permisos de edici\u00f3n de p\u00e1gina podr\u00edan ser limitados solo para aquellos en los que se conf\u00eda hasta que pueda actualizar, aunque esto no solucionar\u00e1 la explotaci\u00f3n existente de esta vulnerabilidad.&#xa0;El problema se corrigi\u00f3 en la versi\u00f3n 0.30.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bookstackapp:bookstack:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.30.4", "matchCriteriaId": "D6DF38A5-A44D-4308-933A-A1288591B880"}]}]}], "references": [{"url": "https://bookstackapp.com/blog/beta-release-v0-30-4/", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}, {"url": "https://github.com/BookStackApp/BookStack/commit/349162ea139556b2d25e09e155cec84e21cc9227", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/BookStackApp/BookStack/releases/tag/v0.30.4", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/BookStackApp/BookStack/security/advisories/GHSA-7p2j-4h6p-cq3h", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/BookStackApp/BookStack/commit/349162ea139556b2d25e09e155cec84e21cc9227"}}