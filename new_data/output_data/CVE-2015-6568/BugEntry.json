{"buggy_code": ["<?php\n\n/*\n * Wolf CMS - Content Management Simplified. <http://www.wolfcms.org>\n * Copyright (C) 2008-2010 Martijn van der Kleijn <martijn.niji@gmail.com>\n *\n * This file is part of Wolf CMS. Wolf CMS is licensed under the GNU GPLv3 license.\n * Please see license.txt for the full license text.\n */\n\n/**\n * The FileManager allows users to upload and manipulate files.\n *\n * Note - Mostly rewritten since Wolf CMS 0.6.0\n *\n * @package Plugins\n * @subpackage file-manager\n *\n * @author Martijn van der Kleijn <martijn.niji@gmail.com>\n * @copyright Martijn van der Kleijn, 2008-2010\n * @license http://www.gnu.org/licenses/gpl.html GPLv3 license\n *\n * @todo Starting from PHP 5.3, use FileInfo\n */\n\n/* Security measure */\nif (!defined('IN_CMS')) { exit(); }\n\n/**\n * \n */\nclass FileManagerController extends PluginController {\n\n    var $path;\n    var $fullpath;\n\n    public static function _checkPermission() {\n        AuthUser::load();\n        if (!AuthUser::isLoggedIn()) {\n            redirect(get_url('login'));\n        } else if (!AuthUser::hasPermission('file_manager_view')) {\n            Flash::set('error', __('You do not have permission to access the requested page!'));\n            redirect(get_url());\n        }\n    }\n\n    public function __construct() {\n        self::_checkPermission();\n\n        $this->setLayout('backend');\n        $this->assignToLayout('sidebar', new View('../../plugins/file_manager/views/sidebar'));\n    }\n\n    public function index() {\n        $this->browse();\n    }\n\n    public function browse() {\n        $params = func_get_args();\n\n        $this->path = join('/', $params);\n        // make sure there's a / at the end\n        if (substr($this->path, -1, 1) != '/')\n            $this->path .= '/';\n\n        //security\n        // we dont allow back link\n        if (strpos($this->path, '..') !== false) {\n            /*\n            if (Plugin::isEnabled('statistics_api')) {\n                $user = null;\n                if (AuthUser::isLoggedIn())\n                    $user = AuthUser::getUserName();\n                $ip = isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : ($_SERVER['REMOTE_ADDR']);\n                $event = array('event_type' => 'hack_attempt', // simple event type identifier\n                    'description' => __('A possible hack attempt was detected.'), // translatable description\n                    'ipaddress' => $ip,\n                    'username' => $user);\n                Observer::notify('stats_file_manager_hack_attempt', $event);\n            }\n             */\n        }\n        $this->path = str_replace('..', '', $this->path);\n\n        // clean up nicely\n        $this->path = str_replace('//', '', $this->path);\n\n        // we dont allow leading slashes\n        $this->path = preg_replace('/^\\//', '', $this->path);\n\n        $this->fullpath = FILES_DIR . '/' . $this->path;\n\n        // clean up nicely\n        $this->fullpath = preg_replace('/\\/\\//', '/', $this->fullpath);\n\n        $this->display('file_manager/views/index', array(\n            'dir' => $this->path,\n            //'files' => $this->_getListFiles()\n            'files' => $this->_listFiles()\n        ));\n    }\n\n// browse\n\n\n    public function view() {\n        $params = func_get_args();\n        $content = '';\n\n        $filename = urldecode(join('/', $params));\n\n        // Sanitize filename for securtiy\n        // We don't allow backlinks\n        if (strpos($filename, '..') !== false) {\n            /*\n            if (Plugin::isEnabled('statistics_api')) {\n                $user = null;\n                if (AuthUser::isLoggedIn())\n                    $user = AuthUser::getUserName();\n                $ip = isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : ($_SERVER['REMOTE_ADDR']);\n                $event = array('event_type' => 'hack_attempt', // simple event type identifier\n                    'description' => __('A possible hack attempt was detected.'), // translatable description\n                    'ipaddress' => $ip,\n                    'username' => $user);\n                Observer::notify('stats_file_manager_hack_attempt', $event);\n            }\n             */\n        }\n        $filename = str_replace('..', '', $filename);\n\n        // Clean up nicely\n        $filename = str_replace('//', '', $filename);\n\n        // We don't allow leading slashes\n        $filename = preg_replace('/^\\//', '', $filename);\n        \n        // Check if file had URL_SUFFIX - if so, append it to filename\n        $filename .= (isset($_GET['has_url_suffix']) && $_GET['has_url_suffix']==='1') ? URL_SUFFIX : '';\n        \n        $file = FILES_DIR . '/' . $filename;\n        if (!$this->_isImage($file) && file_exists($file)) {\n            $content = file_get_contents($file);\n        }\n        \n        $this->display('file_manager/views/view', array(\n            'csrf_token' => SecureToken::generateToken(BASE_URL.'plugin/file_manager/save/'.$filename),\n            'is_image' => $this->_isImage($file),\n            'filename' => $filename,\n            'content' => $content\n        ));\n    }\n\n    public function save() {\n        $data = $_POST['file'];\n\n        // security (remove all ..)\n        $data['name'] = str_replace('..', '', $data['name']);\n        $file = FILES_DIR . DS . $data['name'];\n        \n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/save/'.$data['name'])) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/view/'.$data['name']));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/view/'.$data['name']));\n        }\n        \n        if (file_exists($file)) {\n            if (file_put_contents($file, $data['content']) !== false) {\n                Flash::set('success', __('File has been saved with success!'));\n            } else {\n                Flash::set('error', __('File is not writable! File has not been saved!'));\n            }\n        } else {\n            if (file_put_contents($file, $data['content'])) {\n                Flash::set('success', __('File :name has been created with success!', array(':name' => $data['name'])));\n            } else {\n                Flash::set('error', __('Directory is not writable! File has not been saved!'));\n            }\n        }\n\n        // save and quit or save and continue editing ?\n        if (isset($_POST['commit'])) {\n            redirect(get_url('plugin/file_manager/browse/' . substr($data['name'], 0, strrpos($data['name'], '/'))));\n        } else {\n            redirect(get_url('plugin/file_manager/view/' . $data['name'] . (endsWith($data['name'], URL_SUFFIX) ? '?has_url_suffix=1' : '')));\n        }\n    }\n\n    public function create_file() {\n        if (!AuthUser::hasPermission('file_manager_mkfile')) {\n            Flash::set('error', __('You do not have sufficient permissions to create a file.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n        \n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/create_file')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $data = $_POST['file'];\n\n        $path = str_replace('..', '', $data['path']);\n        $filename = str_replace('..', '', $data['name']);\n        $file = FILES_DIR . DS . $path . DS . $filename;\n\n        if (file_put_contents($file, '') !== false) {\n            $mode = Plugin::getSetting('filemode', 'file_manager');\n            chmod($file, octdec($mode));\n        } else {\n            Flash::set('error', __('File :name has not been created!', array(':name' => $filename)));\n        }\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    public function create_directory() {\n        if (!AuthUser::hasPermission('file_manager_mkdir')) {\n            Flash::set('error', __('You do not have sufficient permissions to create a directory.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n        \n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/create_directory')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $data = $_POST['directory'];\n\n        $path = str_replace('..', '', $data['path']);\n        $dirname = str_replace('..', '', $data['name']);\n        $dir = FILES_DIR . \"/{$path}/{$dirname}\";\n\n        if (mkdir($dir)) {\n            $mode = Plugin::getSetting('dirmode', 'file_manager');\n            chmod($dir, octdec($mode));\n        } else {\n            Flash::set('error', __('Directory :name has not been created!', array(':name' => $dirname)));\n        }\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    public function delete() {\n        if (!AuthUser::hasPermission('file_manager_delete')) {\n            Flash::set('error', __('You do not have sufficient permissions to delete a file or directory.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $paths = func_get_args();\n\n        $file = urldecode(join('/', $paths));\n        \n        // CSRF checks\n        if (isset($_GET['csrf_token'])) {\n            $csrf_token = $_GET['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/delete/'.$file)) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $file = FILES_DIR . '/' . str_replace('..', '', $file);\n        $filename = array_pop($paths);\n        $paths = join('/', $paths);\n\n        if (is_file($file)) {\n            if (!unlink($file))\n                Flash::set('error', __('Permission denied!'));\n        }\n        else {\n            if (!$this->_rrmdir($file))\n                Flash::set('error', __('Permission denied!'));\n        }\n\n        redirect(get_url('plugin/file_manager/browse/' . $paths));\n    }\n\n    public function upload() {\n        if (!AuthUser::hasPermission('file_manager_upload')) {\n            Flash::set('error', __('You do not have sufficient permissions to upload a file.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n        \n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/upload')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n        \n        $mask = Plugin::getSetting('umask', 'file_manager');\n        umask(octdec($mask));\n\n        $data = $_POST['upload'];\n        $path = str_replace('..', '', $data['path']);\n        $overwrite = isset($data['overwrite']) ? true : false;\n\n        // Clean filenames\n        $filename = preg_replace('/ /', '_', $_FILES['upload_file']['name']);\n        $filename = preg_replace('/[^a-z0-9_\\-\\.]/i', '', $filename);\n\n        if (isset($_FILES)) {\n            $file = $this->_upload_file($filename, FILES_DIR . '/' . $path . '/', $_FILES['upload_file']['tmp_name'], $overwrite);\n\n            if ($file === false)\n                Flash::set('error', __('File has not been uploaded!'));\n        }\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    public function chmod() {\n        if (!AuthUser::hasPermission('file_manager_chmod')) {\n            Flash::set('error', __('You do not have sufficient permissions to change the permissions on a file or directory.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/chmod')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n        \n        $data = $_POST['file'];\n        $data['name'] = str_replace('..', '', $data['name']);\n        $file = FILES_DIR . '/' . $data['name'];\n\n        if (file_exists($file)) {\n            if (@!chmod($file, octdec($data['mode'])))\n                Flash::set('error', __('Permission denied!'));\n        }\n        else {\n            Flash::set('error', __('File or directory not found!'));\n        }\n\n        $path = substr($data['name'], 0, strrpos($data['name'], '/'));\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    public function rename() {\n        if (!AuthUser::hasPermission('file_manager_rename')) {\n            Flash::set('error', __('You do not have sufficient permissions to rename this file or directory.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n        \n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/rename')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $data = $_POST['file'];\n\n        $data['current_name'] = str_replace('..', '', $data['current_name']);\n        $data['new_name'] = str_replace('..', '', $data['new_name']);\n\n        // Clean filenames\n        $data['new_name'] = preg_replace('/ /', '_', $data['new_name']);\n        $data['new_name'] = preg_replace('/[^a-z0-9_\\-\\.]/i', '', $data['new_name']);\n\n        $path = substr($data['current_name'], 0, strrpos($data['current_name'], '/'));\n        $file = FILES_DIR . '/' . $data['current_name'];\n\n        // Check another file doesn't already exist with same name\n        if (file_exists(FILES_DIR . '/' . $path . '/' . $data['new_name'])) {\n            Flash::set('error', __('A file or directory with that name already exists!'));\n            redirect(get_url('plugin/file_manager/browse/' . $path));\n        }\n\n        if (file_exists($file)) {\n            if (!rename($file, FILES_DIR . '/' . $path . '/' . $data['new_name']))\n                Flash::set('error', __('Permission denied!'));\n        }\n        else {\n            Flash::set('error', __('File or directory not found!' . $file));\n        }\n\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    //\n    // Privates\n    //\n\n    public function _getPath() {\n        $path = join('/', get_params());\n        return str_replace('..', '', $path);\n    }\n\n    private function _listFiles() {\n        if (is_dir($this->fullpath)) {\n            $files = array();\n            $root = new DirectoryIterator($this->fullpath);\n\n            foreach ($root as $cur) {\n                if ($cur->isDot() || $cur->isLink())\n                    continue;\n\n                $name = $cur->getFilename();\n                if (Plugin::getSetting('show_hidden', 'file_manager') == '0' && $name[0] === '.')\n                    continue;\n                \n                if (Plugin::getSetting('show_backups', 'file_manager') == '0' && $name[strlen($name)-1] === '~')\n                    continue;\n\n                $object = new stdClass;\n                $object->name = $cur->getFilename();\n                $object->is_dir = $cur->isDir();\n                $object->is_file = $cur->isFile();\n                $object->size = convert_size($cur->getSize());\n                $object->mtime = date('D, j M, Y', $cur->getMTime());\n                list($object->perms, $object->chmod) = $this->_getPermissions($cur->getPerms());\n                \n                // Find the file type\n                $object->type = $this->_getFileType($cur);\n\n                // make the link depending on if it's a file or a dir\n                if ($cur->isDir()) {\n                    $object->link = '<a href=\"' . get_url('plugin/file_manager/browse/' . $this->path . $object->name) . '\">' . $object->name . '</a>';\n                } else {\n                    $object->link = '<a href=\"' . get_url('plugin/file_manager/view/' . $this->path . $object->name . (endsWith($object->name, URL_SUFFIX) ? '?has_url_suffix=1' : '')) . '\">' . $object->name . '</a>';\n                }\n\n                $files[$object->name] = $object;\n            }\n\n            // note - uses anonymous function so PHP 5.3+ required\n            uasort($files, function($a, $b) {\n                if ($a->is_dir && !$b->is_dir) {\n                    return 0;\n                } elseif ($b->is_dir && !$a->is_dir) {\n                    return 1;\n                } else {\n                    return strnatcmp($a->name, $b->name);\n                }\n            });\n            \n            return $files;\n        }\n\n        return array();\n    }\n    \n    private function _getFileType($file) {\n        $default = 'unknown';\n\n        $types = array(\n            'png'   => 'image',\n            'jpg'   => 'image',\n            'jpeg'  => 'image',\n            'gif'   => 'image',\n            'ico'   => 'image',\n\n            'zip'   => 'archive',\n            'gzip'  => 'archive',\n            'gz'    => 'archive',\n            'tar'   => 'archive',\n            'bz2'   => 'archive',\n\n            'php'   => 'php',\n        );\n\n        if ($file->isDir()) {\n          return 'folder';\n        }\n\n        $filename = $file->getFilename();\n        $pos = strrpos($filename, '.');\n\n        // The file has no extention, so use default\n        if ($pos === false) {\n          return $default;\n        }\n\n        // Check if the file is a known type based on the extention\n        $extn = substr($filename, $pos + 1);\n\n        if (isset($types[$extn])) {\n          return $types[$extn];\n        } else {\n          return $default;\n        }\n    }\n\n    private function _getPermissions($perms) {\n        //$perms = fileperms($file);\n\n        if (($perms & 0xC000) == 0xC000) {\n            // Socket\n            $info = 's';\n        } elseif (($perms & 0xA000) == 0xA000) {\n            // Symbolic Link\n            $info = 'l';\n        } elseif (($perms & 0x8000) == 0x8000) {\n            // Regular\n            $info = '-';\n        } elseif (($perms & 0x6000) == 0x6000) {\n            // Block special\n            $info = 'b';\n        } elseif (($perms & 0x4000) == 0x4000) {\n            // Directory\n            $info = 'd';\n        } elseif (($perms & 0x2000) == 0x2000) {\n            // Character special\n            $info = 'c';\n        } elseif (($perms & 0x1000) == 0x1000) {\n            // FIFO pipe\n            $info = 'p';\n        } else {\n            // Unknown\n            $info = 'u';\n        }\n\n        // Owner\n        $info .= ( ($perms & 0x0100) ? 'r' : '-');\n        $info .= ( ($perms & 0x0080) ? 'w' : '-');\n        $info .= ( ($perms & 0x0040) ?\n                        (($perms & 0x0800) ? 's' : 'x' ) :\n                        (($perms & 0x0800) ? 'S' : '-'));\n\n        // Group\n        $info .= ( ($perms & 0x0020) ? 'r' : '-');\n        $info .= ( ($perms & 0x0010) ? 'w' : '-');\n        $info .= ( ($perms & 0x0008) ?\n                        (($perms & 0x0400) ? 's' : 'x' ) :\n                        (($perms & 0x0400) ? 'S' : '-'));\n\n        // World\n        $info .= ( ($perms & 0x0004) ? 'r' : '-');\n        $info .= ( ($perms & 0x0002) ? 'w' : '-');\n        $info .= ( ($perms & 0x0001) ?\n                        (($perms & 0x0200) ? 't' : 'x' ) :\n                        (($perms & 0x0200) ? 'T' : '-'));\n\n        return array($info, substr(sprintf('%o', $perms), -4, 4)); // (perm, chmod)\n    }\n\n    public function _isImage($file) {\n        if (!@is_file($file))\n            return false;\n        else if (!preg_match('/^(.*).(jpe?g|gif|png|ico|svg)$/i', $file))\n            return false;\n\n        return true;\n    }\n\n    // Usage: upload_file($_FILE['file']['name'],'temp/',$_FILE['file']['tmp_name'])\n    private function _upload_file($origin, $dest, $tmp_name, $overwrite=false) {\n        FileManagerController::_checkPermission();\n        AuthUser::load();\n        if (!AuthUser::hasPermission('file_manager_upload')) {\n            return false;\n        }\n\n        $origin = basename($origin);\n        $full_dest = $dest . $origin;\n        $file_name = $origin;\n        for ($i = 1; file_exists($full_dest); $i++) {\n            if ($overwrite) {\n                unlink($full_dest);\n                continue;\n            }\n\n            $file_ext = (strpos($origin, '.') === false ? '' : '.' . substr(strrchr($origin, '.'), 1));\n            $file_name = substr($origin, 0, strlen($origin) - strlen($file_ext)) . '_' . $i . $file_ext;\n            $full_dest = $dest . $file_name;\n        }\n\n        if (move_uploaded_file($tmp_name, $full_dest)) {\n            // change mode of the uploaded file\n            $mode = Plugin::getSetting('filemode', 'file_manager');\n            chmod($full_dest, octdec($mode));\n            return $file_name;\n        }\n\n        return false;\n    }\n\n    // recursiv rmdir\n    private function _rrmdir($dirname) {\n        FileManagerController::_checkPermission();\n        AuthUser::load();\n        if (!AuthUser::hasPermission('file_manager_delete')) {\n            return false;\n        }\n\n        if (is_dir($dirname)) {\n            // Append slash if necessary\n            if (substr($dirname, -1) != '/')\n                $dirname.='/';\n\n            $handle = opendir($dirname);\n            while (false !== ($file = readdir($handle))) {\n                if ($file != '.' && $file != '..') {\n                    $path = $dirname . $file;\n                    if (is_dir($path)) {\n                        $this->_rrmdir($path);\n                    } else {\n                        unlink($path);\n                    }\n                }\n            }\n            closedir($handle);\n            rmdir($dirname); // Remove dir\n            return true; // Return array of deleted items\n        } else {\n            return false; // Return false if attempting to operate on a file\n        }\n    }\n\n    public function settings() {\n        AuthUser::load();\n        if (!AuthUser::isLoggedIn()) {\n            redirect(get_url('login'));\n        } else if (!AuthUser::hasPermission('admin_edit')) {\n            Flash::set('error', __('You do not have permission to access the requested page!'));\n            redirect(get_url());\n        }\n        \n        $settings = Plugin::getAllSettings('file_manager');\n\n        if (!$settings) {\n            Flash::set('error', 'Files - ' . __('unable to retrieve plugin settings.'));\n            return;\n        }\n\n        $this->display('file_manager/views/settings', array('settings' => $settings));\n    }\n\n    public function settings_save() {\n        AuthUser::load();\n        if (!AuthUser::isLoggedIn()) {\n            redirect(get_url('login'));\n        } else if (!AuthUser::hasPermission('admin_edit')) {\n            Flash::set('error', __('You do not have permission to access the requested page!'));\n            redirect(get_url());\n        }\n        \n        if (!isset($_POST['settings'])) {\n            Flash::set('error', 'File Manager - ' . __('form was not posted.'));\n            redirect(get_url('plugin/file_manager/settings'));\n        } else {\n            $settings = $_POST['settings'];\n\n            if ($settings['umask'] == 0)\n                $settings['umask'] = 0;\n            elseif (!preg_match('/^0?[0-7]{3}$/', $settings['umask']))\n                $settings['umask'] = 0;\n            if (strlen($settings['umask']) === 3)\n                $settings['umask'] = '0' . $settings['umask'];\n            elseif (strlen($settings['umask']) !== 4 && $settings['umask'] != 0)\n                $settings['umask'] = 0;\n\n            if (!preg_match('/^0?[0-7]{3}$/', $settings['dirmode']))\n                $settings['dirmode'] = '0755';\n            if (strlen($settings['dirmode']) === 3)\n                $settings['dirmode'] = '0' . $settings['dirmode'];\n\n            if (!preg_match('/^0?[0-7]{3}$/', $settings['filemode']))\n                $settings['filemode'] = '0755';\n            if (strlen($settings['filemode']) === 3)\n                $settings['filemode'] = '0' . $settings['filemode'];\n        }\n\n        if (Plugin::setAllSettings($settings, 'file_manager'))\n            Flash::setNow('success', 'File Manager - ' . __('plugin settings saved.'));\n        else\n            Flash::setNow('error', 'File Manager - ' . __('plugin settings not saved!'));\n\n        $this->display('file_manager/views/settings', array('settings' => $settings));\n    }\n\n}\n", "<?php\n\n/**\n * Wolf CMS file_manager plugin language file\n *\n * @package Translations\n */\n\nreturn array(\n    'A file or directory with that name already exists!' => 'A file or directory with that name already exists!',\n    'A possible hack attempt was detected.' => 'A possible hack attempt was detected.',\n    'Are you sure you wish to delete?' => 'Are you sure you wish to delete?',\n    'Cancel' => 'Cancel',\n    'Change mode' => 'Change mode',\n    'Close' => 'Close',\n    'Create' => 'Create',\n    'Create new directory' => 'Create new directory',\n    'Create new file' => 'Create new file',\n    'Default PHP directory creation mode; see <a href=\"http://php.net/manual/en/function.chmod.php\">chmod()</a>' => 'Default PHP directory creation mode; see <a href=\"http://php.net/manual/en/function.chmod.php\">chmod()</a>',\n    'Default PHP file creation mode; see <a href=\"http://php.net/manual/en/function.chmod.php\">chmod()</a>' => 'Default PHP file creation mode; see <a href=\"http://php.net/manual/en/function.chmod.php\">chmod()</a>',\n    'Default PHP umask; see <a href=\"http://php.net/manual/en/function.umask.php\">umask()</a>' => 'Default PHP umask; see <a href=\"http://php.net/manual/en/function.umask.php\">umask()</a>',\n    'Delete file' => 'Delete file',\n    'Directory :name has not been created!' => 'Directory :name has not been created!',\n    'Directory Creation Mode:' => 'Directory Creation Mode:',\n    'Directory is not writable! File has not been saved!' => 'Directory is not writable! File has not been saved!',\n    'Do you want to display hidden files on unix systems? <br/> If you select no, all files starting with \".\" will not be displayed.' => 'Do you want to display hidden files on unix systems? <br/> If you select no, all files starting with \".\" will not be displayed.',\n    'Do you want to show backup files? If you select no, all files ending with \"~\" will not be displayed.' => 'Do you want to show backup files? If you select no, all files ending with \"~\" will not be displayed.',\n    'File' => 'File',\n    'File :name has been created with success!' => 'File :name has been created with success!',\n    'File :name has not been created!' => 'File :name has not been created!',\n    'File Creation Defaults' => 'File Creation Defaults',\n    'File Creation Mode:' => 'File Creation Mode:',\n    'File Manager' => 'File Manager',\n    'File Manager Settings' => 'File Manager Settings',\n    'File has been saved with success!' => 'File has been saved with success!',\n    'File has not been uploaded!' => 'File has not been uploaded!',\n    'File is not writable! File has not been saved!' => 'File is not writable! File has not been saved!',\n    'File or directory not found!' => 'File or directory not found!',\n    'Files' => 'Files',\n    'General settings' => 'General settings',\n    'Modified' => 'Modified',\n    'Modify' => 'Modify',\n    'No' => 'No',\n    'Permission denied!' => 'Permission denied!',\n    'Permissions' => 'Permissions',\n    'Provides interface to manage files from the administration.' => 'Provides interface to manage files from the administration.',\n    'Rename' => 'Rename',\n    'Save' => 'Save',\n    'Save and Continue Editing' => 'Save and Continue Editing',\n    'Show backup files' => 'Show backup files',\n    'Show hidden files' => 'Show hidden files',\n    'Size' => 'Size',\n    'Umask:' => 'Umask:',\n    'Upload' => 'Upload',\n    'Upload file' => 'Upload file',\n    'Yes' => 'Yes',\n    'You do not have permission to access the requested page!' => 'You do not have permission to access the requested page!',\n    'You do not have sufficient permissions to change the permissions on a file or directory.' => 'You do not have sufficient permissions to change the permissions on a file or directory.',\n    'You do not have sufficient permissions to create a directory.' => 'You do not have sufficient permissions to create a directory.',\n    'You do not have sufficient permissions to create a file.' => 'You do not have sufficient permissions to create a file.',\n    'You do not have sufficient permissions to delete a file or directory.' => 'You do not have sufficient permissions to delete a file or directory.',\n    'You do not have sufficient permissions to rename this file or directory.' => 'You do not have sufficient permissions to rename this file or directory.',\n    'You do not have sufficient permissions to upload a file.' => 'You do not have sufficient permissions to upload a file.',\n    'delete file icon' => 'delete file icon',\n    'form was not posted.' => 'form was not posted.',\n    'or' => 'or',\n    'overwrite it?' => 'overwrite it?',\n    'plugin settings initialized.' => 'plugin settings initialized.',\n    'plugin settings not saved!' => 'plugin settings not saved!',\n    'plugin settings saved.' => 'plugin settings saved.',\n    'unable to remove stored settings!' => 'unable to remove stored settings!',\n    'unable to retrieve plugin settings.' => 'unable to retrieve plugin settings.',\n    'unable to store plugin settings!' => 'unable to store plugin settings!',\n    'uninstalled.' => 'uninstalled.'\n);", "<?php\n/*\n * Wolf CMS - Content Management Simplified. <http://www.wolfcms.org>\n * Copyright (C) 2008-2010 Martijn van der Kleijn <martijn.niji@gmail.com>\n * Copyright (C) 2008 Philippe Archambault <philippe.archambault@gmail.com>\n *\n * This file is part of Wolf CMS. Wolf CMS is licensed under the GNU GPLv3 license.\n * Please see license.txt for the full license text.\n */\n\n/**\n * The FileManager allows users to upload and manipulate files.\n *\n * @package Plugins\n * @subpackage file-manager\n *\n * @author Philippe Archambault <philippe.archambault@gmail.com>\n * @author Martijn van der Kleijn <martijn.niji@gmail.com>\n * @copyright Philippe Archambault & Martijn van der Kleijn, 2008\n * @license http://www.gnu.org/licenses/gpl.html GPLv3 license\n */\n\n/* Security measure */\nif (!defined('IN_CMS')) { exit(); }\n\n  $out = '';\n  $progres_path = '';\n  $paths = explode('/', $dir); \n  $nb_path = count($paths)-1; // -1 to didn't display current dir as a link\n  foreach ($paths as $i => $path) {\n    if ($i+1 == $nb_path) {\n      $out .= $path;\n    } else if ($path != '') {\n      $progres_path .= $path.'/';\n      $out .= '<a href=\"'.get_url('plugin/file_manager/browse/'.rtrim($progres_path, '/')).'\">'.$path.'</a>/';\n    }\n  }\n?>\n<h1><a href=\"<?php echo get_url('plugin/file_manager'); ?>\">public</a>/<?php echo $out; ?></h1>\n<table id=\"files-list\" class=\"index\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <thead>\n    <tr>\n      <th class=\"files\"><?php echo __('File'); ?></th>\n      <th class=\"size\"><?php echo __('Size'); ?></th>\n      <th class=\"permissions\"><?php echo __('Permissions'); ?></th>\n      <th class=\"mtime\"><?php echo __('Modified'); ?></th>\n      <th class=\"modify\"><?php echo __('Modify'); ?></th>\n    </tr>\n  </thead>\n  <tbody>\n<?php foreach ($files as $file): ?>\n    <tr class=\"<?php echo odd_even(); ?>\">\n      <td>\n          <?php if (preg_match('/\\.(jpg|jpeg|pjpeg|png|gif|ico)$/i', $file->name)) { ?>\n          <img class=\"thumb\" src=\"<?php echo PATH_PUBLIC;?>public/<?php echo $dir.$file->name; ?>\" align=\"middle\" />\n          <?php } else { ?>\n          <img src=\"<?php echo ICONS_PATH;?>file-<?php echo $file->type ?>-16.png\" align=\"top\" />\n          <?php } ?>\n          <?php echo $file->link; ?>\n      </td>\n      <td><code><?php echo $file->size; ?></code></td>\n      <td><code><?php echo $file->perms; ?> (<a href=\"#\" onclick=\"toggle_chmod_popup('<?php echo $dir.$file->name; ?>', '<?php echo $file->chmod; ?>'); return false;\" title=\"<?php echo __('Change mode'); ?>\"><?php echo $file->chmod; ?></a>)</code></td>\n      <td><code><?php echo $file->mtime; ?></code></td>\n      <td>\n        <a href=\"#\" onclick=\"toggle_rename_popup('<?php echo $dir.$file->name; ?>', '<?php echo $file->name; ?>'); return false;\" title=\"<?php echo __('Rename'); ?>\"><img src=\"<?php echo ICONS_PATH;?>action-rename-16.png\" alt=\"rename icon\" /></a>\n        <a href=\"<?php echo get_url('plugin/file_manager/delete/'.$dir.$file->name.'?csrf_token='.SecureToken::generateToken(BASE_URL.'plugin/file_manager/delete/'.$dir.$file->name)); ?>\" onclick=\"return confirm('<?php echo __('Are you sure you wish to delete?'); ?> <?php echo $file->name; ?>?');\"><img src=\"<?php echo ICONS_PATH;?>action-delete-16.png\" alt=\"<?php echo __('delete file icon'); ?>\" title=\"<?php echo __('Delete file'); ?>\" /></a>\n      </td>\n    </tr>\n<?php endforeach; ?>\n  </tbody>\n</table>\n\n<div id=\"popups\">\n\n  <div class=\"popup\" id=\"chmod-popup\" style=\"display:none;\">\n    <h3><?php echo __('Change mode'); ?></h3>\n    <form action=\"<?php echo get_url('plugin/file_manager/chmod'); ?>\" method=\"post\"> \n      <div>\n        <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/chmod'); ?>\" />\n        <input id=\"chmod_file_name\" name=\"file[name]\" type=\"hidden\" value=\"\" />\n        <input id=\"chmod_file_mode\" maxlength=\"4\" name=\"file[mode]\" type=\"text\" value=\"\" /> \n        <input id=\"chmod_file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Change mode'); ?>\" />\n      </div>\n      <p><a class=\"close-link\" href=\"#\" onclick=\"toggle_chmod_popup(); return false;\"><?php echo __('Close'); ?></a></p>\n    </form>\n  </div>\n  <div class=\"popup\" id=\"rename-popup\" style=\"display:none;\">\n      <h3><?php echo __('Rename'); ?></h3>\n      <form action=\"<?php echo get_url('plugin/file_manager/rename'); ?>\" method=\"post\"> \n        <div>\n          <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/rename'); ?>\" />\n          <input id=\"rename_file_current_name\" name=\"file[current_name]\" type=\"hidden\" value=\"\" />\n          <input id=\"rename_file_new_name\" maxlength=\"50\" name=\"file[new_name]\" type=\"text\" value=\"\" /> \n          <input id=\"rename_file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Rename'); ?>\" />\n        </div>\n        <p><a class=\"close-link\" href=\"#\" onclick=\"toggle_rename_popup(); return false;\"><?php echo __('Close'); ?></a></p>\n      </form>\n    </div>\n</div>\n\n<div id=\"boxes\">\n\t<!-- #Demo dialog -->\n\t<div id=\"dialog\" class=\"window\">\n\t\t<div class=\"titlebar\">\n            Demo dialog\n            <a href=\"#\" class=\"close\"><img src=\"<?php echo ICONS_PATH;?>action-delete-disabled-16.png\"/></a>\n        </div>\n        <div class=\"content\">\n            <p>This is just a demo.</p>\n        </div>\n\t</div>\n\n    <div id=\"create-file-popup\" class=\"window\">\n\t\t<div class=\"titlebar\">\n            <?php echo __('Create new file'); ?>\n            <a href=\"#\" class=\"close\"><img src=\"<?php echo ICONS_PATH;?>action-delete-disabled-16.png\"/></a>\n        </div>\n        <div class=\"content\">\n            <form action=\"<?php echo get_url('plugin/file_manager/create_file'); ?>\" method=\"post\">\n                <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/create_file'); ?>\" />\n                <input id=\"create_file_path\" name=\"file[path]\" type=\"hidden\" value=\"<?php echo ($dir == '') ? '/': $dir; ?>\" />\n                <input id=\"create_file_name\" maxlength=\"255\" name=\"file[name]\" type=\"text\" value=\"\" />\n                <input id=\"create_file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Create'); ?>\" />\n            </form>\n        </div>\n    </div>\n\n    <div id=\"create-directory-popup\" class=\"window\">\n\t\t<div class=\"titlebar\">\n            <?php echo __('Create new directory'); ?>\n            <a href=\"#\" class=\"close\"><img src=\"<?php echo ICONS_PATH;?>action-delete-disabled-16.png\"/></a>\n        </div>\n        <div class=\"content\">\n            <form action=\"<?php echo get_url('plugin/file_manager/create_directory'); ?>\" method=\"post\">\n                <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/create_directory'); ?>\" />\n                <input id=\"create_directory_path\" name=\"directory[path]\" type=\"hidden\" value=\"<?php echo ($dir == '') ? '/': $dir; ?>\" />\n                <input id=\"create_directory_name\" maxlength=\"255\" name=\"directory[name]\" type=\"text\" value=\"\" />\n                <input id=\"file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Create'); ?>\" />\n            </form>\n        </div>\n    </div>\n\n    <div id=\"upload-file-popup\" class=\"window\">\n\t\t<div class=\"titlebar\">\n            <?php echo __('Upload file'); ?>\n            <a href=\"#\" class=\"close\"><img src=\"<?php echo ICONS_PATH;?>action-delete-disabled-16.png\"/></a>\n        </div>\n        <div class=\"content\">\n            <form action=\"<?php echo get_url('plugin/file_manager/upload'); ?>\" method=\"post\" enctype=\"multipart/form-data\">\n                <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/upload'); ?>\" />\n                <input id=\"upload_overwrite\" name=\"upload[overwrite]\" type=\"checkbox\" value=\"1\" /> <label for=\"upload_overwrite\"><small><?php echo __('overwrite it?'); ?></small></label><br />\n                <input id=\"upload_path\" name=\"upload[path]\" type=\"hidden\" value=\"<?php echo ($dir == '') ? '/': $dir; ?>\" />\n                <input id=\"upload_file\" name=\"upload_file\" type=\"file\" />\n                <input id=\"upload_file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Upload'); ?>\" />\n            </form>\n        </div>\n    </div>\n\n\n\n    <!-- Do not remove div#mask, because you'll need it to fill the whole screen -->\n \t<div id=\"mask\"></div>\n\n</div>\n", "<?php\n/*\n * Wolf CMS - Content Management Simplified. <http://www.wolfcms.org>\n * Copyright (C) 2008-2010 Martijn van der Kleijn <martijn.niji@gmail.com>\n * Copyright (C) 2008 Philippe Archambault <philippe.archambault@gmail.com>\n *\n * This file is part of Wolf CMS. Wolf CMS is licensed under the GNU GPLv3 license.\n * Please see license.txt for the full license text.\n */\n\n/**\n * The FileManager allows users to upload and manipulate files.\n *\n * @package Plugins\n * @subpackage file-manager\n *\n * @author Philippe Archambault <philippe.archambault@gmail.com>\n * @author Martijn van der Kleijn <martijn.niji@gmail.com>\n * @copyright Philippe Archambault & Martijn van der Kleijn, 2008\n * @license http://www.gnu.org/licenses/gpl.html GPLv3 license\n */\n\n/* Security measure */\nif (!defined('IN_CMS')) { exit(); }\n\n  $out = '';\n  $progres_path = '';\n  $paths = explode('/', $filename); \n  $nb_path = count($paths);\n  foreach ($paths as $i => $path) {\n    if ($i+1 == $nb_path) {\n      $out .= $path;\n    } else {\n      $progres_path .= $path.'/';\n      $out .= '<a href=\"'.get_url('plugin/file_manager/browse/'.rtrim($progres_path, '/')).'\">'.$path.'</a>/';\n    }\n  }\n?>\n<h1><a href=\"<?php echo get_url('plugin/file_manager'); ?>\">public</a>/<?php echo $out; ?></h1>\n<?php if ($is_image) { ?>\n  <img src=\"<?php echo BASE_FILES_DIR.'/'.$filename; ?>\" />\n<?php } else { ?>\n<form method=\"post\" action=\"<?php echo get_url('plugin/file_manager/save'); ?>\">\n    <div class=\"form-area\">\n        <p class=\"content\">\n            <label for=\"file_filter_id\"><?php echo __('Filter'); ?></label>\n            <select id=\"file_filter_id\" class=\"filter-selector\" name=\"file[filter_id]\">\n                <option value=\"\">&#8212; <?php echo __('none'); ?> &#8212;</option>\n                <?php foreach (Filter::findAll() as $filter): ?>\n                    <option value=\"<?php echo $filter; ?>\"><?php echo Inflector::humanize($filter); ?></option>\n                <?php endforeach; ?>\n            </select>\n            <input type=\"hidden\" name=\"file[name]\" value=\"<?php echo $filename; ?>\" />\n            <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo $csrf_token; ?>\" />\n            <textarea class=\"textarea\" id=\"file_content\" name=\"file[content]\" style=\"width: 100%; height: 400px;\" rows=\"20\" cols=\"40\"><?php echo htmlentities($content, ENT_COMPAT, 'UTF-8'); ?></textarea><br />\n        </p>\n    </div>\n    <p class=\"buttons\">\n        <input class=\"button\" name=\"commit\" type=\"submit\" accesskey=\"s\" value=\"<?php echo __('Save'); ?>\" />\n        <input class=\"button\" name=\"continue\" type=\"submit\" accesskey=\"e\" value=\"<?php echo __('Save and Continue Editing'); ?>\" />\n        <?php echo __('or'); ?> <a href=\"<?php echo get_url('plugin/file_manager/browse/'.$progres_path); ?>\"><?php echo __('Cancel'); ?></a>\n    </p>\n</form>\n<?php } ?>\n"], "fixing_code": ["<?php\n\n/*\n * Wolf CMS - Content Management Simplified. <http://www.wolfcms.org>\n * Copyright (C) 2008-2010 Martijn van der Kleijn <martijn.niji@gmail.com>\n *\n * This file is part of Wolf CMS. Wolf CMS is licensed under the GNU GPLv3 license.\n * Please see license.txt for the full license text.\n */\n\n/**\n * The FileManager allows users to upload and manipulate files.\n *\n * Note - Mostly rewritten since Wolf CMS 0.6.0\n *\n * @package Plugins\n * @subpackage file-manager\n *\n * @author Martijn van der Kleijn <martijn.niji@gmail.com>\n * @copyright Martijn van der Kleijn, 2008-2010\n * @license http://www.gnu.org/licenses/gpl.html GPLv3 license\n *\n * @todo Starting from PHP 5.3, use FileInfo\n */\n\n/* Security measure */\nif (!defined('IN_CMS')) { exit(); }\n\n/**\n *\n */\nclass FileManagerController extends PluginController {\n\n    var $path;\n    var $fullpath;\n\n    public static function _checkPermission() {\n        AuthUser::load();\n        if (!AuthUser::isLoggedIn()) {\n            redirect(get_url('login'));\n        } else if (!AuthUser::hasPermission('file_manager_view')) {\n            Flash::set('error', __('You do not have permission to access the requested page!'));\n            redirect(get_url());\n        }\n    }\n\n    public function __construct() {\n        self::_checkPermission();\n\n        $this->setLayout('backend');\n        $this->assignToLayout('sidebar', new View('../../plugins/file_manager/views/sidebar'));\n    }\n\n    public function index() {\n        $this->browse();\n    }\n\n    static function htmlContextCleaner($input) {\n        $bad_chars = array(\"<\", \">\");\n        $safe_chars = array(\"&lt;\", \"&gt;\");\n        $output = str_replace($bad_chars, $safe_chars, $input);\n\n        return stripslashes($output);\n    }\n\n    public function browse() {\n        $params = func_get_args();\n\n        $this->path = join('/', $params);\n        // make sure there's a / at the end\n        if (substr($this->path, -1, 1) != '/')\n            $this->path .= '/';\n\n        //security\n        // we dont allow back link\n        if (strpos($this->path, '..') !== false) {\n            /*\n            if (Plugin::isEnabled('statistics_api')) {\n                $user = null;\n                if (AuthUser::isLoggedIn())\n                    $user = AuthUser::getUserName();\n                $ip = isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : ($_SERVER['REMOTE_ADDR']);\n                $event = array('event_type' => 'hack_attempt', // simple event type identifier\n                    'description' => __('A possible hack attempt was detected.'), // translatable description\n                    'ipaddress' => $ip,\n                    'username' => $user);\n                Observer::notify('stats_file_manager_hack_attempt', $event);\n            }\n             */\n        }\n        $this->path = str_replace('..', '', $this->path);\n\n        // clean up nicely\n        $this->path = str_replace('//', '', $this->path);\n\n        // we dont allow leading slashes\n        $this->path = preg_replace('/^\\//', '', $this->path);\n\n        $this->fullpath = FILES_DIR . '/' . $this->path;\n\n        // clean up nicely\n        $this->fullpath = preg_replace('/\\/\\//', '/', $this->fullpath);\n\n        $this->display('file_manager/views/index', array(\n            'dir' => htmlContextCleaner($this->path),\n            //'files' => $this->_getListFiles()\n            'files' => $this->_listFiles()\n        ));\n    }\n\n// browse\n\n\n    public function view() {\n        $params = func_get_args();\n        $content = '';\n\n        $filename = urldecode(join('/', $params));\n\n        // Sanitize filename for securtiy\n        // We don't allow backlinks\n        if (strpos($filename, '..') !== false) {\n            /*\n            if (Plugin::isEnabled('statistics_api')) {\n                $user = null;\n                if (AuthUser::isLoggedIn())\n                    $user = AuthUser::getUserName();\n                $ip = isset($_SERVER['HTTP_X_FORWARDED_FOR']) ? $_SERVER['HTTP_X_FORWARDED_FOR'] : ($_SERVER['REMOTE_ADDR']);\n                $event = array('event_type' => 'hack_attempt', // simple event type identifier\n                    'description' => __('A possible hack attempt was detected.'), // translatable description\n                    'ipaddress' => $ip,\n                    'username' => $user);\n                Observer::notify('stats_file_manager_hack_attempt', $event);\n            }\n             */\n        }\n        $filename = str_replace('..', '', $filename);\n\n        // Clean up nicely\n        $filename = str_replace('//', '', $filename);\n\n        // We don't allow leading slashes\n        $filename = preg_replace('/^\\//', '', $filename);\n\n        // Check if file had URL_SUFFIX - if so, append it to filename\n        $filename .= (isset($_GET['has_url_suffix']) && $_GET['has_url_suffix']==='1') ? URL_SUFFIX : '';\n\n        $file = FILES_DIR . '/' . $filename;\n        if (!$this->_isImage($file) && file_exists($file)) {\n            $content = file_get_contents($file);\n        }\n\n        $this->display('file_manager/views/view', array(\n            'csrf_token' => SecureToken::generateToken(BASE_URL.'plugin/file_manager/save/'.$filename),\n            'is_image' => $this->_isImage($file),\n            'filename' => $filename,\n            'content' => $content\n        ));\n    }\n\n    public function save() {\n        $data = $_POST['file'];\n\n        // security (remove all ..)\n        $data['name'] = str_replace('..', '', $data['name']);\n        $file = FILES_DIR . DS . $data['name'];\n\n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/save/'.$data['name'])) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/view/'.$data['name']));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/view/'.$data['name']));\n        }\n\n        if (file_exists($file)) {\n            if (file_put_contents($file, $data['content']) !== false) {\n                Flash::set('success', __('File has been saved with success!'));\n            } else {\n                Flash::set('error', __('File is not writable! File has not been saved!'));\n            }\n        } else {\n            if (file_put_contents($file, $data['content'])) {\n                Flash::set('success', __('File :name has been created with success!', array(':name' => $data['name'])));\n            } else {\n                Flash::set('error', __('Directory is not writable! File has not been saved!'));\n            }\n        }\n\n        // save and quit or save and continue editing ?\n        if (isset($_POST['commit'])) {\n            redirect(get_url('plugin/file_manager/browse/' . substr($data['name'], 0, strrpos($data['name'], '/'))));\n        } else {\n            redirect(get_url('plugin/file_manager/view/' . $data['name'] . (endsWith($data['name'], URL_SUFFIX) ? '?has_url_suffix=1' : '')));\n        }\n    }\n\n    public function create_file() {\n        if (!AuthUser::hasPermission('file_manager_mkfile')) {\n            Flash::set('error', __('You do not have sufficient permissions to create a file.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/create_file')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $data = $_POST['file'];\n\n        $path = str_replace('..', '', $data['path']);\n        $filename = str_replace('..', '', $data['name']);\n        $file = FILES_DIR . DS . $path . DS . $filename;\n\n        if (file_put_contents($file, '') !== false) {\n            $mode = Plugin::getSetting('filemode', 'file_manager');\n            chmod($file, octdec($mode));\n        } else {\n            Flash::set('error', __('File :name has not been created!', array(':name' => $filename)));\n        }\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    public function create_directory() {\n        if (!AuthUser::hasPermission('file_manager_mkdir')) {\n            Flash::set('error', __('You do not have sufficient permissions to create a directory.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/create_directory')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $data = $_POST['directory'];\n\n        $path = str_replace('..', '', $data['path']);\n        $dirname = str_replace('..', '', $data['name']);\n        $dir = FILES_DIR . \"/{$path}/{$dirname}\";\n\n        if (mkdir($dir)) {\n            $mode = Plugin::getSetting('dirmode', 'file_manager');\n            chmod($dir, octdec($mode));\n        } else {\n            Flash::set('error', __('Directory :name has not been created!', array(':name' => $dirname)));\n        }\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    public function delete() {\n        if (!AuthUser::hasPermission('file_manager_delete')) {\n            Flash::set('error', __('You do not have sufficient permissions to delete a file or directory.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $paths = func_get_args();\n\n        $file = urldecode(join('/', $paths));\n\n        // CSRF checks\n        if (isset($_GET['csrf_token'])) {\n            $csrf_token = $_GET['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/delete/'.$file)) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $file = FILES_DIR . '/' . str_replace('..', '', $file);\n        $filename = array_pop($paths);\n        $paths = join('/', $paths);\n\n        if (is_file($file)) {\n            if (!unlink($file))\n                Flash::set('error', __('Permission denied!'));\n        }\n        else {\n            if (!$this->_rrmdir($file))\n                Flash::set('error', __('Permission denied!'));\n        }\n\n        redirect(get_url('plugin/file_manager/browse/' . $paths));\n    }\n\n    public function upload() {\n        if (!AuthUser::hasPermission('file_manager_upload')) {\n            Flash::set('error', __('You do not have sufficient permissions to upload a file.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/upload')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $mask = Plugin::getSetting('umask', 'file_manager');\n        umask(octdec($mask));\n\n        $data = $_POST['upload'];\n        $path = str_replace('..', '', $data['path']);\n        $overwrite = isset($data['overwrite']) ? true : false;\n\n        // Clean filenames\n        $filename = preg_replace('/ /', '_', $_FILES['upload_file']['name']);\n        $filename = preg_replace('/[^a-z0-9_\\-\\.]/i', '', $filename);\n\n        $ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\n        if (in_array($ext, ['php', 'php3', 'php4', 'inc'])) {\n            Flash::set('error', __('Not allowed to upload files with extension :ext', $ext));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        if (isset($_FILES)) {\n            $file = $this->_upload_file($filename, FILES_DIR . '/' . $path . '/', $_FILES['upload_file']['tmp_name'], $overwrite);\n\n            if ($file === false)\n                Flash::set('error', __('File has not been uploaded!'));\n        }\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    public function chmod() {\n        if (!AuthUser::hasPermission('file_manager_chmod')) {\n            Flash::set('error', __('You do not have sufficient permissions to change the permissions on a file or directory.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/chmod')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $data = $_POST['file'];\n        $data['name'] = str_replace('..', '', $data['name']);\n        $file = FILES_DIR . '/' . $data['name'];\n\n        if (file_exists($file)) {\n            if (@!chmod($file, octdec($data['mode'])))\n                Flash::set('error', __('Permission denied!'));\n        }\n        else {\n            Flash::set('error', __('File or directory not found!'));\n        }\n\n        $path = substr($data['name'], 0, strrpos($data['name'], '/'));\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    public function rename() {\n        if (!AuthUser::hasPermission('file_manager_rename')) {\n            Flash::set('error', __('You do not have sufficient permissions to rename this file or directory.'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        // CSRF checks\n        if (isset($_POST['csrf_token'])) {\n            $csrf_token = $_POST['csrf_token'];\n            if (!SecureToken::validateToken($csrf_token, BASE_URL.'plugin/file_manager/rename')) {\n                Flash::set('error', __('Invalid CSRF token found!'));\n                redirect(get_url('plugin/file_manager/browse/'));\n            }\n        }\n        else {\n            Flash::set('error', __('No CSRF token found!'));\n            redirect(get_url('plugin/file_manager/browse/'));\n        }\n\n        $data = $_POST['file'];\n\n        $data['current_name'] = str_replace('..', '', $data['current_name']);\n        $data['new_name'] = str_replace('..', '', $data['new_name']);\n\n        // Clean filenames\n        $data['new_name'] = preg_replace('/ /', '_', $data['new_name']);\n        $data['new_name'] = preg_replace('/[^a-z0-9_\\-\\.]/i', '', $data['new_name']);\n\n        $path = substr($data['current_name'], 0, strrpos($data['current_name'], '/'));\n        $file = FILES_DIR . '/' . $data['current_name'];\n\n        // Check if trying to rename to php file (.php / .php3 etc)\n        $ext = strtolower(pathinfo($data['new_name'], PATHINFO_EXTENSION));\n\n        if (in_array($ext, ['php', 'php3', 'php4', 'inc'])) {\n            Flash::set('error', __('Not allowed to rename to :ext', $ext));\n            redirect(get_url('plugin/file_manager/browse/' . $path));\n        }\n\n        // Check another file doesn't already exist with same name\n        if (file_exists(FILES_DIR . '/' . $path . '/' . $data['new_name'])) {\n            Flash::set('error', __('A file or directory with that name already exists!'));\n            redirect(get_url('plugin/file_manager/browse/' . $path));\n        }\n\n        if (file_exists($file)) {\n            if (!rename($file, FILES_DIR . '/' . $path . '/' . $data['new_name']))\n                Flash::set('error', __('Permission denied!'));\n        }\n        else {\n            Flash::set('error', __('File or directory not found!' . $file));\n        }\n\n        redirect(get_url('plugin/file_manager/browse/' . $path));\n    }\n\n    //\n    // Privates\n    //\n\n    public function _getPath() {\n        $path = join('/', get_params());\n        return str_replace('..', '', $path);\n    }\n\n    private function _listFiles() {\n        if (is_dir($this->fullpath)) {\n            $files = array();\n            $root = new DirectoryIterator($this->fullpath);\n\n            foreach ($root as $cur) {\n                if ($cur->isDot() || $cur->isLink())\n                    continue;\n\n                $name = $cur->getFilename();\n                if (Plugin::getSetting('show_hidden', 'file_manager') == '0' && $name[0] === '.')\n                    continue;\n\n                if (Plugin::getSetting('show_backups', 'file_manager') == '0' && $name[strlen($name)-1] === '~')\n                    continue;\n\n                $object = new stdClass;\n                $object->name = $cur->getFilename();\n                $object->is_dir = $cur->isDir();\n                $object->is_file = $cur->isFile();\n                $object->size = convert_size($cur->getSize());\n                $object->mtime = date('D, j M, Y', $cur->getMTime());\n                list($object->perms, $object->chmod) = $this->_getPermissions($cur->getPerms());\n\n                // Find the file type\n                $object->type = $this->_getFileType($cur);\n\n                // make the link depending on if it's a file or a dir\n                if ($cur->isDir()) {\n                    $object->link = '<a href=\"' . get_url('plugin/file_manager/browse/' . $this->path . $object->name) . '\">' . $object->name . '</a>';\n                } else {\n                    $object->link = '<a href=\"' . get_url('plugin/file_manager/view/' . $this->path . $object->name . (endsWith($object->name, URL_SUFFIX) ? '?has_url_suffix=1' : '')) . '\">' . $object->name . '</a>';\n                }\n\n                $files[$object->name] = $object;\n            }\n\n            // note - uses anonymous function so PHP 5.3+ required\n            uasort($files, function($a, $b) {\n                if ($a->is_dir && !$b->is_dir) {\n                    return 0;\n                } elseif ($b->is_dir && !$a->is_dir) {\n                    return 1;\n                } else {\n                    return strnatcmp($a->name, $b->name);\n                }\n            });\n\n            return $files;\n        }\n\n        return array();\n    }\n\n    private function _getFileType($file) {\n        $default = 'unknown';\n\n        $types = array(\n            'png'   => 'image',\n            'jpg'   => 'image',\n            'jpeg'  => 'image',\n            'gif'   => 'image',\n            'ico'   => 'image',\n\n            'zip'   => 'archive',\n            'gzip'  => 'archive',\n            'gz'    => 'archive',\n            'tar'   => 'archive',\n            'bz2'   => 'archive',\n\n            'php'   => 'php',\n        );\n\n        if ($file->isDir()) {\n          return 'folder';\n        }\n\n        $filename = $file->getFilename();\n        $pos = strrpos($filename, '.');\n\n        // The file has no extention, so use default\n        if ($pos === false) {\n          return $default;\n        }\n\n        // Check if the file is a known type based on the extention\n        $extn = substr($filename, $pos + 1);\n\n        if (isset($types[$extn])) {\n          return $types[$extn];\n        } else {\n          return $default;\n        }\n    }\n\n    private function _getPermissions($perms) {\n        //$perms = fileperms($file);\n\n        if (($perms & 0xC000) == 0xC000) {\n            // Socket\n            $info = 's';\n        } elseif (($perms & 0xA000) == 0xA000) {\n            // Symbolic Link\n            $info = 'l';\n        } elseif (($perms & 0x8000) == 0x8000) {\n            // Regular\n            $info = '-';\n        } elseif (($perms & 0x6000) == 0x6000) {\n            // Block special\n            $info = 'b';\n        } elseif (($perms & 0x4000) == 0x4000) {\n            // Directory\n            $info = 'd';\n        } elseif (($perms & 0x2000) == 0x2000) {\n            // Character special\n            $info = 'c';\n        } elseif (($perms & 0x1000) == 0x1000) {\n            // FIFO pipe\n            $info = 'p';\n        } else {\n            // Unknown\n            $info = 'u';\n        }\n\n        // Owner\n        $info .= ( ($perms & 0x0100) ? 'r' : '-');\n        $info .= ( ($perms & 0x0080) ? 'w' : '-');\n        $info .= ( ($perms & 0x0040) ?\n                        (($perms & 0x0800) ? 's' : 'x' ) :\n                        (($perms & 0x0800) ? 'S' : '-'));\n\n        // Group\n        $info .= ( ($perms & 0x0020) ? 'r' : '-');\n        $info .= ( ($perms & 0x0010) ? 'w' : '-');\n        $info .= ( ($perms & 0x0008) ?\n                        (($perms & 0x0400) ? 's' : 'x' ) :\n                        (($perms & 0x0400) ? 'S' : '-'));\n\n        // World\n        $info .= ( ($perms & 0x0004) ? 'r' : '-');\n        $info .= ( ($perms & 0x0002) ? 'w' : '-');\n        $info .= ( ($perms & 0x0001) ?\n                        (($perms & 0x0200) ? 't' : 'x' ) :\n                        (($perms & 0x0200) ? 'T' : '-'));\n\n        return array($info, substr(sprintf('%o', $perms), -4, 4)); // (perm, chmod)\n    }\n\n    public function _isImage($file) {\n        if (!@is_file($file))\n            return false;\n        else if (!preg_match('/^(.*).(jpe?g|gif|png|ico|svg)$/i', $file))\n            return false;\n\n        return true;\n    }\n\n    // Usage: upload_file($_FILE['file']['name'],'temp/',$_FILE['file']['tmp_name'])\n    private function _upload_file($origin, $dest, $tmp_name, $overwrite=false) {\n        FileManagerController::_checkPermission();\n        AuthUser::load();\n        if (!AuthUser::hasPermission('file_manager_upload')) {\n            return false;\n        }\n\n        $origin = basename($origin);\n        $full_dest = $dest . $origin;\n        $file_name = $origin;\n        for ($i = 1; file_exists($full_dest); $i++) {\n            if ($overwrite) {\n                unlink($full_dest);\n                continue;\n            }\n\n            $file_ext = (strpos($origin, '.') === false ? '' : '.' . substr(strrchr($origin, '.'), 1));\n            $file_name = substr($origin, 0, strlen($origin) - strlen($file_ext)) . '_' . $i . $file_ext;\n            $full_dest = $dest . $file_name;\n        }\n\n        if (move_uploaded_file($tmp_name, $full_dest)) {\n            // change mode of the uploaded file\n            $mode = Plugin::getSetting('filemode', 'file_manager');\n            chmod($full_dest, octdec($mode));\n            return $file_name;\n        }\n\n        return false;\n    }\n\n    // recursiv rmdir\n    private function _rrmdir($dirname) {\n        FileManagerController::_checkPermission();\n        AuthUser::load();\n        if (!AuthUser::hasPermission('file_manager_delete')) {\n            return false;\n        }\n\n        if (is_dir($dirname)) {\n            // Append slash if necessary\n            if (substr($dirname, -1) != '/')\n                $dirname.='/';\n\n            $handle = opendir($dirname);\n            while (false !== ($file = readdir($handle))) {\n                if ($file != '.' && $file != '..') {\n                    $path = $dirname . $file;\n                    if (is_dir($path)) {\n                        $this->_rrmdir($path);\n                    } else {\n                        unlink($path);\n                    }\n                }\n            }\n            closedir($handle);\n            rmdir($dirname); // Remove dir\n            return true; // Return array of deleted items\n        } else {\n            return false; // Return false if attempting to operate on a file\n        }\n    }\n\n    public function settings() {\n        AuthUser::load();\n        if (!AuthUser::isLoggedIn()) {\n            redirect(get_url('login'));\n        } else if (!AuthUser::hasPermission('admin_edit')) {\n            Flash::set('error', __('You do not have permission to access the requested page!'));\n            redirect(get_url());\n        }\n\n        $settings = Plugin::getAllSettings('file_manager');\n\n        if (!$settings) {\n            Flash::set('error', 'Files - ' . __('unable to retrieve plugin settings.'));\n            return;\n        }\n\n        $this->display('file_manager/views/settings', array('settings' => $settings));\n    }\n\n    public function settings_save() {\n        AuthUser::load();\n        if (!AuthUser::isLoggedIn()) {\n            redirect(get_url('login'));\n        } else if (!AuthUser::hasPermission('admin_edit')) {\n            Flash::set('error', __('You do not have permission to access the requested page!'));\n            redirect(get_url());\n        }\n\n        if (!isset($_POST['settings'])) {\n            Flash::set('error', 'File Manager - ' . __('form was not posted.'));\n            redirect(get_url('plugin/file_manager/settings'));\n        } else {\n            $settings = $_POST['settings'];\n\n            if ($settings['umask'] == 0)\n                $settings['umask'] = 0;\n            elseif (!preg_match('/^0?[0-7]{3}$/', $settings['umask']))\n                $settings['umask'] = 0;\n            if (strlen($settings['umask']) === 3)\n                $settings['umask'] = '0' . $settings['umask'];\n            elseif (strlen($settings['umask']) !== 4 && $settings['umask'] != 0)\n                $settings['umask'] = 0;\n\n            if (!preg_match('/^0?[0-7]{3}$/', $settings['dirmode']))\n                $settings['dirmode'] = '0755';\n            if (strlen($settings['dirmode']) === 3)\n                $settings['dirmode'] = '0' . $settings['dirmode'];\n\n            if (!preg_match('/^0?[0-7]{3}$/', $settings['filemode']))\n                $settings['filemode'] = '0755';\n            if (strlen($settings['filemode']) === 3)\n                $settings['filemode'] = '0' . $settings['filemode'];\n        }\n\n        if (Plugin::setAllSettings($settings, 'file_manager'))\n            Flash::setNow('success', 'File Manager - ' . __('plugin settings saved.'));\n        else\n            Flash::setNow('error', 'File Manager - ' . __('plugin settings not saved!'));\n\n        $this->display('file_manager/views/settings', array('settings' => $settings));\n    }\n\n}\n", "<?php\n\n/**\n * Wolf CMS file_manager plugin language file\n *\n * @package Translations\n */\n\nreturn array(\n    'A file or directory with that name already exists!' => 'A file or directory with that name already exists!',\n    'A possible hack attempt was detected.' => 'A possible hack attempt was detected.',\n    'Are you sure you wish to delete?' => 'Are you sure you wish to delete?',\n    'Cancel' => 'Cancel',\n    'Change mode' => 'Change mode',\n    'Close' => 'Close',\n    'Create' => 'Create',\n    'Create new directory' => 'Create new directory',\n    'Create new file' => 'Create new file',\n    'Default PHP directory creation mode; see <a href=\"http://php.net/manual/en/function.chmod.php\">chmod()</a>' => 'Default PHP directory creation mode; see <a href=\"http://php.net/manual/en/function.chmod.php\">chmod()</a>',\n    'Default PHP file creation mode; see <a href=\"http://php.net/manual/en/function.chmod.php\">chmod()</a>' => 'Default PHP file creation mode; see <a href=\"http://php.net/manual/en/function.chmod.php\">chmod()</a>',\n    'Default PHP umask; see <a href=\"http://php.net/manual/en/function.umask.php\">umask()</a>' => 'Default PHP umask; see <a href=\"http://php.net/manual/en/function.umask.php\">umask()</a>',\n    'Delete file' => 'Delete file',\n    'Directory :name has not been created!' => 'Directory :name has not been created!',\n    'Directory Creation Mode:' => 'Directory Creation Mode:',\n    'Directory is not writable! File has not been saved!' => 'Directory is not writable! File has not been saved!',\n    'Do you want to display hidden files on unix systems? <br/> If you select no, all files starting with \".\" will not be displayed.' => 'Do you want to display hidden files on unix systems? <br/> If you select no, all files starting with \".\" will not be displayed.',\n    'Do you want to show backup files? If you select no, all files ending with \"~\" will not be displayed.' => 'Do you want to show backup files? If you select no, all files ending with \"~\" will not be displayed.',\n    'File' => 'File',\n    'File :name has been created with success!' => 'File :name has been created with success!',\n    'File :name has not been created!' => 'File :name has not been created!',\n    'File Creation Defaults' => 'File Creation Defaults',\n    'File Creation Mode:' => 'File Creation Mode:',\n    'File Manager' => 'File Manager',\n    'File Manager Settings' => 'File Manager Settings',\n    'File has been saved with success!' => 'File has been saved with success!',\n    'File has not been uploaded!' => 'File has not been uploaded!',\n    'File is not writable! File has not been saved!' => 'File is not writable! File has not been saved!',\n    'File or directory not found!' => 'File or directory not found!',\n    'Files' => 'Files',\n    'General settings' => 'General settings',\n    'Modified' => 'Modified',\n    'Modify' => 'Modify',\n    'No' => 'No',\n    'Not allowed to upload files with extension :ext' => 'Not allowed to upload files with extension :ext',\n    'Not allowed to rename to :ext' => 'Not allowed to rename to :ext',\n    'Permission denied!' => 'Permission denied!',\n    'Permissions' => 'Permissions',\n    'Provides interface to manage files from the administration.' => 'Provides interface to manage files from the administration.',\n    'Rename' => 'Rename',\n    'Save' => 'Save',\n    'Save and Continue Editing' => 'Save and Continue Editing',\n    'Show backup files' => 'Show backup files',\n    'Show hidden files' => 'Show hidden files',\n    'Size' => 'Size',\n    'Umask:' => 'Umask:',\n    'Upload' => 'Upload',\n    'Upload file' => 'Upload file',\n    'Yes' => 'Yes',\n    'You do not have permission to access the requested page!' => 'You do not have permission to access the requested page!',\n    'You do not have sufficient permissions to change the permissions on a file or directory.' => 'You do not have sufficient permissions to change the permissions on a file or directory.',\n    'You do not have sufficient permissions to create a directory.' => 'You do not have sufficient permissions to create a directory.',\n    'You do not have sufficient permissions to create a file.' => 'You do not have sufficient permissions to create a file.',\n    'You do not have sufficient permissions to delete a file or directory.' => 'You do not have sufficient permissions to delete a file or directory.',\n    'You do not have sufficient permissions to rename this file or directory.' => 'You do not have sufficient permissions to rename this file or directory.',\n    'You do not have sufficient permissions to upload a file.' => 'You do not have sufficient permissions to upload a file.',\n    'delete file icon' => 'delete file icon',\n    'form was not posted.' => 'form was not posted.',\n    'or' => 'or',\n    'overwrite it?' => 'overwrite it?',\n    'plugin settings initialized.' => 'plugin settings initialized.',\n    'plugin settings not saved!' => 'plugin settings not saved!',\n    'plugin settings saved.' => 'plugin settings saved.',\n    'unable to remove stored settings!' => 'unable to remove stored settings!',\n    'unable to retrieve plugin settings.' => 'unable to retrieve plugin settings.',\n    'unable to store plugin settings!' => 'unable to store plugin settings!',\n    'uninstalled.' => 'uninstalled.'\n);\n", "<?php\n/*\n * Wolf CMS - Content Management Simplified. <http://www.wolfcms.org>\n * Copyright (C) 2008-2010 Martijn van der Kleijn <martijn.niji@gmail.com>\n * Copyright (C) 2008 Philippe Archambault <philippe.archambault@gmail.com>\n *\n * This file is part of Wolf CMS. Wolf CMS is licensed under the GNU GPLv3 license.\n * Please see license.txt for the full license text.\n */\n\n/**\n * The FileManager allows users to upload and manipulate files.\n *\n * @package Plugins\n * @subpackage file-manager\n *\n * @author Philippe Archambault <philippe.archambault@gmail.com>\n * @author Martijn van der Kleijn <martijn.niji@gmail.com>\n * @copyright Philippe Archambault & Martijn van der Kleijn, 2008\n * @license http://www.gnu.org/licenses/gpl.html GPLv3 license\n */\n\n/* Security measure */\nif (!defined('IN_CMS')) { exit(); }\n\nfunction htmlContextCleaner($input) {\n    $bad_chars = array(\"<\", \">\");\n    $safe_chars = array(\"&lt;\", \"&gt;\");\n    $output = str_replace($bad_chars, $safe_chars, $input);\n\n    return stripslashes($output);\n}\n\n  $out = '';\n  $progres_path = '';\n  $paths = explode('/', $dir);\n  $nb_path = count($paths)-1; // -1 to didn't display current dir as a link\n  foreach ($paths as $i => $path) {\n    if ($i+1 == $nb_path) {\n      $out .= $path;\n    } else if ($path != '') {\n      $path = preg_replace('/.*:\\/\\/[^\\/]+\\//', '/', $path);\n      $progres_path .= $path.'/';\n      $out .= '<a href=\"'.get_url('plugin/file_manager/browse/'.rtrim($progres_path, '/')).'\">'.htmlContextCleaner($path).'</a>/';\n    }\n  }\n?>\n<h1><a href=\"<?php echo get_url('plugin/file_manager'); ?>\">public</a>/<?php echo $out; ?></h1>\n<table id=\"files-list\" class=\"index\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\">\n  <thead>\n    <tr>\n      <th class=\"files\"><?php echo __('File'); ?></th>\n      <th class=\"size\"><?php echo __('Size'); ?></th>\n      <th class=\"permissions\"><?php echo __('Permissions'); ?></th>\n      <th class=\"mtime\"><?php echo __('Modified'); ?></th>\n      <th class=\"modify\"><?php echo __('Modify'); ?></th>\n    </tr>\n  </thead>\n  <tbody>\n<?php foreach ($files as $file): ?>\n    <tr class=\"<?php echo odd_even(); ?>\">\n      <td>\n          <?php if (preg_match('/\\.(jpg|jpeg|pjpeg|png|gif|ico)$/i', $file->name)) { ?>\n          <img class=\"thumb\" src=\"<?php echo PATH_PUBLIC;?>public/<?php echo $dir.$file->name; ?>\" align=\"middle\" />\n          <?php } else { ?>\n          <img src=\"<?php echo ICONS_PATH;?>file-<?php echo $file->type ?>-16.png\" align=\"top\" />\n          <?php } ?>\n          <?php echo $file->link; ?>\n      </td>\n      <td><code><?php echo $file->size; ?></code></td>\n      <td><code><?php echo $file->perms; ?> (<a href=\"#\" onclick=\"toggle_chmod_popup('<?php echo $dir.$file->name; ?>', '<?php echo $file->chmod; ?>'); return false;\" title=\"<?php echo __('Change mode'); ?>\"><?php echo $file->chmod; ?></a>)</code></td>\n      <td><code><?php echo $file->mtime; ?></code></td>\n      <td>\n        <a href=\"#\" onclick=\"toggle_rename_popup('<?php echo $dir.$file->name; ?>', '<?php echo $file->name; ?>'); return false;\" title=\"<?php echo __('Rename'); ?>\"><img src=\"<?php echo ICONS_PATH;?>action-rename-16.png\" alt=\"rename icon\" /></a>\n        <a href=\"<?php echo get_url('plugin/file_manager/delete/'.$dir.$file->name.'?csrf_token='.SecureToken::generateToken(BASE_URL.'plugin/file_manager/delete/'.$dir.$file->name)); ?>\" onclick=\"return confirm('<?php echo __('Are you sure you wish to delete?'); ?> <?php echo $file->name; ?>?');\"><img src=\"<?php echo ICONS_PATH;?>action-delete-16.png\" alt=\"<?php echo __('delete file icon'); ?>\" title=\"<?php echo __('Delete file'); ?>\" /></a>\n      </td>\n    </tr>\n<?php endforeach; ?>\n  </tbody>\n</table>\n\n<div id=\"popups\">\n\n  <div class=\"popup\" id=\"chmod-popup\" style=\"display:none;\">\n    <h3><?php echo __('Change mode'); ?></h3>\n    <form action=\"<?php echo get_url('plugin/file_manager/chmod'); ?>\" method=\"post\">\n      <div>\n        <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/chmod'); ?>\" />\n        <input id=\"chmod_file_name\" name=\"file[name]\" type=\"hidden\" value=\"\" />\n        <input id=\"chmod_file_mode\" maxlength=\"4\" name=\"file[mode]\" type=\"text\" value=\"\" />\n        <input id=\"chmod_file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Change mode'); ?>\" />\n      </div>\n      <p><a class=\"close-link\" href=\"#\" onclick=\"toggle_chmod_popup(); return false;\"><?php echo __('Close'); ?></a></p>\n    </form>\n  </div>\n  <div class=\"popup\" id=\"rename-popup\" style=\"display:none;\">\n      <h3><?php echo __('Rename'); ?></h3>\n      <form action=\"<?php echo get_url('plugin/file_manager/rename'); ?>\" method=\"post\">\n        <div>\n          <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/rename'); ?>\" />\n          <input id=\"rename_file_current_name\" name=\"file[current_name]\" type=\"hidden\" value=\"\" />\n          <input id=\"rename_file_new_name\" maxlength=\"50\" name=\"file[new_name]\" type=\"text\" value=\"\" />\n          <input id=\"rename_file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Rename'); ?>\" />\n        </div>\n        <p><a class=\"close-link\" href=\"#\" onclick=\"toggle_rename_popup(); return false;\"><?php echo __('Close'); ?></a></p>\n      </form>\n    </div>\n</div>\n\n<div id=\"boxes\">\n\t<!-- #Demo dialog -->\n\t<div id=\"dialog\" class=\"window\">\n\t\t<div class=\"titlebar\">\n            Demo dialog\n            <a href=\"#\" class=\"close\"><img src=\"<?php echo ICONS_PATH;?>action-delete-disabled-16.png\"/></a>\n        </div>\n        <div class=\"content\">\n            <p>This is just a demo.</p>\n        </div>\n\t</div>\n\n    <div id=\"create-file-popup\" class=\"window\">\n\t\t<div class=\"titlebar\">\n            <?php echo __('Create new file'); ?>\n            <a href=\"#\" class=\"close\"><img src=\"<?php echo ICONS_PATH;?>action-delete-disabled-16.png\"/></a>\n        </div>\n        <div class=\"content\">\n            <form action=\"<?php echo get_url('plugin/file_manager/create_file'); ?>\" method=\"post\">\n                <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/create_file'); ?>\" />\n                <input id=\"create_file_path\" name=\"file[path]\" type=\"hidden\" value=\"<?php echo ($dir == '') ? '/': $dir; ?>\" />\n                <input id=\"create_file_name\" maxlength=\"255\" name=\"file[name]\" type=\"text\" value=\"\" />\n                <input id=\"create_file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Create'); ?>\" />\n            </form>\n        </div>\n    </div>\n\n    <div id=\"create-directory-popup\" class=\"window\">\n\t\t<div class=\"titlebar\">\n            <?php echo __('Create new directory'); ?>\n            <a href=\"#\" class=\"close\"><img src=\"<?php echo ICONS_PATH;?>action-delete-disabled-16.png\"/></a>\n        </div>\n        <div class=\"content\">\n            <form action=\"<?php echo get_url('plugin/file_manager/create_directory'); ?>\" method=\"post\">\n                <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/create_directory'); ?>\" />\n                <input id=\"create_directory_path\" name=\"directory[path]\" type=\"hidden\" value=\"<?php echo ($dir == '') ? '/': $dir; ?>\" />\n                <input id=\"create_directory_name\" maxlength=\"255\" name=\"directory[name]\" type=\"text\" value=\"\" />\n                <input id=\"file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Create'); ?>\" />\n            </form>\n        </div>\n    </div>\n\n    <div id=\"upload-file-popup\" class=\"window\">\n\t\t<div class=\"titlebar\">\n            <?php echo __('Upload file'); ?>\n            <a href=\"#\" class=\"close\"><img src=\"<?php echo ICONS_PATH;?>action-delete-disabled-16.png\"/></a>\n        </div>\n        <div class=\"content\">\n            <form action=\"<?php echo get_url('plugin/file_manager/upload'); ?>\" method=\"post\" enctype=\"multipart/form-data\">\n                <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo SecureToken::generateToken(BASE_URL.'plugin/file_manager/upload'); ?>\" />\n                <input id=\"upload_overwrite\" name=\"upload[overwrite]\" type=\"checkbox\" value=\"1\" /> <label for=\"upload_overwrite\"><small><?php echo __('overwrite it?'); ?></small></label><br />\n                <input id=\"upload_path\" name=\"upload[path]\" type=\"hidden\" value=\"<?php echo ($dir == '') ? '/': $dir; ?>\" />\n                <input id=\"upload_file\" name=\"upload_file\" type=\"file\" />\n                <input id=\"upload_file_button\" name=\"commit\" type=\"submit\" value=\"<?php echo __('Upload'); ?>\" />\n            </form>\n        </div>\n    </div>\n\n\n\n    <!-- Do not remove div#mask, because you'll need it to fill the whole screen -->\n \t<div id=\"mask\"></div>\n\n</div>\n", "<?php\n/*\n * Wolf CMS - Content Management Simplified. <http://www.wolfcms.org>\n * Copyright (C) 2008-2010 Martijn van der Kleijn <martijn.niji@gmail.com>\n * Copyright (C) 2008 Philippe Archambault <philippe.archambault@gmail.com>\n *\n * This file is part of Wolf CMS. Wolf CMS is licensed under the GNU GPLv3 license.\n * Please see license.txt for the full license text.\n */\n\n/**\n * The FileManager allows users to upload and manipulate files.\n *\n * @package Plugins\n * @subpackage file-manager\n *\n * @author Philippe Archambault <philippe.archambault@gmail.com>\n * @author Martijn van der Kleijn <martijn.niji@gmail.com>\n * @copyright Philippe Archambault & Martijn van der Kleijn, 2008\n * @license http://www.gnu.org/licenses/gpl.html GPLv3 license\n */\n\n/* Security measure */\nif (!defined('IN_CMS')) { exit(); }\n\nfunction htmlContextCleaner($input) {\n    $bad_chars = array(\"<\", \">\");\n    $safe_chars = array(\"&lt;\", \"&gt;\");\n    $output = str_replace($bad_chars, $safe_chars, $input);\n\n    return stripslashes($output);\n}\n\n\n  $out = '';\n  $progres_path = '';\n  $paths = explode('/', $filename);\n  $nb_path = count($paths);\n  foreach ($paths as $i => $path) {\n    if ($i+1 == $nb_path) {\n      $out .= $path;\n    } else {\n      $path = preg_replace('/.*:\\/\\/[^\\/]+\\//', '/', $path);\n      $progres_path .= $path.'/';\n      $out .= '<a href=\"'.get_url('plugin/file_manager/browse/'.rtrim($progres_path, '/')).'\">'.htmlContextCleaner($path).'</a>/';\n    }\n  }\n?>\n<h1><a href=\"<?php echo get_url('plugin/file_manager'); ?>\">public</a>/<?php echo $out; ?></h1>\n<?php if ($is_image) { ?>\n  <img src=\"<?php echo BASE_FILES_DIR.'/'.$filename; ?>\" />\n<?php } else { ?>\n<form method=\"post\" action=\"<?php echo get_url('plugin/file_manager/save'); ?>\">\n    <div class=\"form-area\">\n        <p class=\"content\">\n            <label for=\"file_filter_id\"><?php echo __('Filter'); ?></label>\n            <select id=\"file_filter_id\" class=\"filter-selector\" name=\"file[filter_id]\">\n                <option value=\"\">&#8212; <?php echo __('none'); ?> &#8212;</option>\n                <?php foreach (Filter::findAll() as $filter): ?>\n                    <option value=\"<?php echo $filter; ?>\"><?php echo Inflector::humanize($filter); ?></option>\n                <?php endforeach; ?>\n            </select>\n            <input type=\"hidden\" name=\"file[name]\" value=\"<?php echo $filename; ?>\" />\n            <input id=\"csrf_token\" name=\"csrf_token\" type=\"hidden\" value=\"<?php echo $csrf_token; ?>\" />\n            <textarea class=\"textarea\" id=\"file_content\" name=\"file[content]\" style=\"width: 100%; height: 400px;\" rows=\"20\" cols=\"40\"><?php echo htmlentities($content, ENT_COMPAT, 'UTF-8'); ?></textarea><br />\n        </p>\n    </div>\n    <p class=\"buttons\">\n        <input class=\"button\" name=\"commit\" type=\"submit\" accesskey=\"s\" value=\"<?php echo __('Save'); ?>\" />\n        <input class=\"button\" name=\"continue\" type=\"submit\" accesskey=\"e\" value=\"<?php echo __('Save and Continue Editing'); ?>\" />\n        <?php echo __('or'); ?> <a href=\"<?php echo get_url('plugin/file_manager/browse/'.$progres_path); ?>\"><?php echo __('Cancel'); ?></a>\n    </p>\n</form>\n<?php } ?>\n"], "filenames": ["wolf/plugins/file_manager/FileManagerController.php", "wolf/plugins/file_manager/i18n/en-message.php", "wolf/plugins/file_manager/views/index.php", "wolf/plugins/file_manager/views/view.php"], "buggy_code_start_loc": [30, 43, 25, 25], "buggy_code_end_loc": [682, 76, 94, 36], "fixing_code_start_loc": [30, 44, 26, 26], "fixing_code_end_loc": [704, 78, 103, 46], "type": "CWE-20", "message": "Wolf CMS before 0.8.3.1 allows unrestricted file rename and PHP Code Execution because admin/plugin/file_manager/browse/ (aka the filemanager) does not prevent a change of a file extension to \".php\" after originally using the parameter \"filename\" for uploading a JPEG image. Exploitation requires a registered user who has access to upload functionality.", "other": {"cve": {"id": "CVE-2015-6568", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-14T16:59:00.203", "lastModified": "2017-09-17T01:29:05.310", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Wolf CMS before 0.8.3.1 allows unrestricted file rename and PHP Code Execution because admin/plugin/file_manager/browse/ (aka the filemanager) does not prevent a change of a file extension to \".php\" after originally using the parameter \"filename\" for uploading a JPEG image. Exploitation requires a registered user who has access to upload functionality."}, {"lang": "es", "value": "Wolf CMS en versiones anteriores a 0.8.3.1 permite el cambio de nombre de archivo sin restricciones y la ejecuci\u00f3n de c\u00f3digo PHP porque admin/plugin/file_manager/browse/ (tambi\u00e9n conocido como filemanager) no impide el cambio de una extensi\u00f3n de archivo a \".php\" despu\u00e9s de usar originalmente el par\u00e1metro \"nombre de archivo\" Para cargar una imagen JPEG. La explotaci\u00f3n requiere un usuario registrado que tenga acceso a la funcionalidad de carga."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wolfcms:wolf_cms:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.8.3", "matchCriteriaId": "CD17D757-AE5E-443A-8BD9-A9A21CD2C6F8"}]}]}], "references": [{"url": "http://www.websecgeeks.com/2015/08/wolf-cms-arbitrary-file-upload-to.html", "source": "cve@mitre.org", "tags": ["Exploit", "Technical Description", "Third Party Advisory"]}, {"url": "https://github.com/wolfcms/wolfcms/commit/2160275b60736f706dfda132c7c46728c5b255fa", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wolfcms/wolfcms/issues/625", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/wolfcms/wolfcms/releases/tag/0.8.3.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/38000/", "source": "cve@mitre.org"}, {"url": "https://www.exploit-db.com/exploits/40004/", "source": "cve@mitre.org"}, {"url": "https://www.wolfcms.org/blog/2015/08/10/releasing-wolf-cms-0-8-3-1.html", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wolfcms/wolfcms/commit/2160275b60736f706dfda132c7c46728c5b255fa"}}