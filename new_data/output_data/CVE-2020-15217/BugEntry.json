{"buggy_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Event;\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n * KnowbaseItem Class\n**/\nclass KnowbaseItem extends CommonDBVisible implements ExtraVisibilityCriteria {\n\n\n   // From CommonDBTM\n   public $dohistory    = true;\n\n   // For visibility checks\n   protected $users     = [];\n   protected $groups    = [];\n   protected $profiles  = [];\n   protected $entities  = [];\n   protected $items     = [];\n\n   const KNOWBASEADMIN = 1024;\n   const READFAQ       = 2048;\n   const PUBLISHFAQ    = 4096;\n   const COMMENTS      = 8192;\n\n   static $rightname   = 'knowbase';\n\n\n   static function getTypeName($nb = 0) {\n      return __('Knowledge base');\n   }\n\n\n   /**\n    * @see CommonGLPI::getMenuShorcut()\n    *\n    * @since 0.85\n   **/\n   static function getMenuShorcut() {\n      return 'b';\n   }\n\n\n   function getName($options = []) {\n      if (KnowbaseItemTranslation::canBeTranslated($this)) {\n         return KnowbaseItemTranslation::getTranslatedValue($this);\n      }\n\n      return parent::getName();\n   }\n\n\n   /**\n    * @see CommonGLPI::getMenuName()\n    *\n    * @since 0.85\n   **/\n   static function getMenuName() {\n      if (!Session::haveRight('knowbase', READ)) {\n         return __('FAQ');\n      } else {\n         return static::getTypeName(Session::getPluralNumber());\n      }\n   }\n\n\n   static function canCreate() {\n\n      return Session::haveRightsOr(self::$rightname, [CREATE, self::PUBLISHFAQ]);\n   }\n\n\n   /**\n    * @since 0.85\n   **/\n   static function canUpdate() {\n      return Session::haveRightsOr(self::$rightname, [UPDATE, self::KNOWBASEADMIN]);\n   }\n\n\n   static function canView() {\n      global $CFG_GLPI;\n\n      return (Session::haveRightsOr(self::$rightname, [READ, self::READFAQ])\n              || ((Session::getLoginUserID() === false) && $CFG_GLPI[\"use_public_faq\"]));\n   }\n\n\n   function canViewItem() {\n      if ($this->fields['users_id'] == Session::getLoginUserID()) {\n         return true;\n      }\n      if (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n         return true;\n      }\n\n      if ($this->fields[\"is_faq\"]) {\n         return ((Session::haveRightsOr(self::$rightname, [READ, self::READFAQ])\n                  && $this->haveVisibilityAccess())\n                 || ((Session::getLoginUserID() === false) && $this->isPubliclyVisible()));\n      }\n      return (Session::haveRight(self::$rightname, READ) && $this->haveVisibilityAccess());\n   }\n\n\n   function canUpdateItem() {\n      // Personal knowbase or visibility and write access\n      return (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)\n              || (Session::getCurrentInterface() == \"central\"\n                  && $this->fields['users_id'] == Session::getLoginUserID())\n              || ((($this->fields[\"is_faq\"] && Session::haveRight(self::$rightname, self::PUBLISHFAQ))\n                   || (!$this->fields[\"is_faq\"]\n                       && Session::haveRight(self::$rightname, UPDATE)))\n                  && $this->haveVisibilityAccess()));\n   }\n\n   /**\n    * Check if current user can comment on KB entries\n    *\n    * @return boolean\n    */\n   public function canComment() {\n      return $this->canViewItem() && Session::haveRight(self::$rightname, self::COMMENTS);\n   }\n\n   /**\n    * Get the search page URL for the current classe\n    *\n    * @since 0.84\n    *\n    * @param boolean $full  path or relative one\n   **/\n   static function getSearchURL($full = true) {\n      global $CFG_GLPI;\n\n      $dir = ($full ? $CFG_GLPI['root_doc'] : '');\n\n      if (Session::getCurrentInterface() == \"central\") {\n         return \"$dir/front/knowbaseitem.php\";\n      }\n      return \"$dir/front/helpdesk.faq.php\";\n   }\n\n   /**\n    * Get the form page URL for the current classe\n    *\n    * @param boolean $full  path or relative one\n   **/\n   static function getFormURL($full = true) {\n      global $CFG_GLPI;\n\n      $dir = ($full ? $CFG_GLPI['root_doc'] : '');\n\n      if (Session::getCurrentInterface() == \"central\") {\n         return \"$dir/front/knowbaseitem.form.php\";\n      }\n      return \"$dir/front/helpdesk.faq.php\";\n   }\n\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addStandardTab(__CLASS__, $ong, $options);\n      $this->addStandardTab('KnowbaseItem_Item', $ong, $options);\n      $this->addStandardTab('Document_Item', $ong, $options);\n\n      $this->addStandardTab('KnowbaseItemTranslation', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n      $this->addStandardTab('KnowbaseItem_Revision', $ong, $options);\n      $this->addStandardTab('KnowbaseItem_Comment', $ong, $options);\n\n      return $ong;\n   }\n\n\n   function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {\n\n      if (!$withtemplate) {\n         $nb = 0;\n         switch ($item->getType()) {\n            case __CLASS__ :\n               $ong[1] = $this->getTypeName(1);\n               if ($item->canUpdateItem()) {\n                  if ($_SESSION['glpishow_count_on_tabs']) {\n                     $nb = $item->countVisibilities();\n                  }\n                  $ong[2] = self::createTabEntry(_n('Target', 'Targets', Session::getPluralNumber()),\n                                                    $nb);\n                  $ong[3] = __('Edit');\n               }\n               return $ong;\n         }\n      }\n      return '';\n   }\n\n\n   static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {\n\n      if ($item->getType() == __CLASS__) {\n         switch ($tabnum) {\n            case 1 :\n               $item->showFull();\n               break;\n\n            case 2 :\n               $item->showVisibility();\n               break;\n\n            case 3 :\n               $item->showForm($item->getID());\n               break;\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Actions done at the end of the getEmpty function\n    *\n    *@return void\n   **/\n   function post_getEmpty() {\n\n      if (Session::haveRight(self::$rightname, self::PUBLISHFAQ)\n          && !Session::haveRight(\"knowbase\", UPDATE)) {\n         $this->fields[\"is_faq\"] = 1;\n      }\n   }\n\n\n   /**\n    * @since 0.85\n    * @see CommonDBTM::post_addItem()\n   **/\n   function post_addItem() {\n\n      // add screenshots\n      $this->input = $this->addFiles(\n         $this->input, [\n            'force_update'  => true,\n            'content_field' => 'answer',\n            'name'          => 'answer',\n         ]\n      );\n\n      // Add documents\n      $this->input = $this->addFiles($this->input, ['force_update' => true]);\n\n      if (isset($this->input[\"_visibility\"])\n          && isset($this->input[\"_visibility\"]['_type'])\n          && !empty($this->input[\"_visibility\"][\"_type\"])) {\n\n         $this->input[\"_visibility\"]['knowbaseitems_id'] = $this->getID();\n         $item                                           = null;\n\n         switch ($this->input[\"_visibility\"]['_type']) {\n            case 'User' :\n               if (isset($this->input[\"_visibility\"]['users_id'])\n                   && $this->input[\"_visibility\"]['users_id']) {\n                  $item = new KnowbaseItem_User();\n               }\n               break;\n\n            case 'Group' :\n               if (isset($this->input[\"_visibility\"]['groups_id'])\n                   && $this->input[\"_visibility\"]['groups_id']) {\n                  $item = new Group_KnowbaseItem();\n               }\n               break;\n\n            case 'Profile' :\n               if (isset($this->input[\"_visibility\"]['profiles_id'])\n                   && $this->input[\"_visibility\"]['profiles_id']) {\n                  $item = new KnowbaseItem_Profile();\n               }\n               break;\n\n            case 'Entity' :\n               $item = new Entity_KnowbaseItem();\n               break;\n         }\n         if (!is_null($item)) {\n            $item->add($this->input[\"_visibility\"]);\n            Event::log($this->getID(), \"knowbaseitem\", 4, \"tools\",\n                     //TRANS: %s is the user login\n                     sprintf(__('%s adds a target'), $_SESSION[\"glpiname\"]));\n         }\n      }\n\n      if (isset($this->input['_do_item_link']) && $this->input['_do_item_link'] == 1) {\n         $params = [\n            'knowbaseitems_id' => $this->getID(),\n            'itemtype'         => $this->input['_itemtype'],\n            'items_id'         => $this->input['_items_id']\n         ];\n         $kb_item_item = new KnowbaseItem_Item();\n         $kb_item_item->add($params);\n      }\n   }\n\n\n   /**\n    * @since 0.83\n   **/\n   function post_getFromDB() {\n\n      // Users\n      $this->users    = KnowbaseItem_User::getUsers($this->fields['id']);\n\n      // Entities\n      $this->entities = Entity_KnowbaseItem::getEntities($this->fields['id']);\n\n      // Group / entities\n      $this->groups   = Group_KnowbaseItem::getGroups($this->fields['id']);\n\n      // Profile / entities\n      $this->profiles = KnowbaseItem_Profile::getProfiles($this->fields['id']);\n\n      //Linked kb items\n      $this->knowbase_items = KnowbaseItem_Item::getItems($this);\n   }\n\n\n   /**\n    * @see CommonDBTM::cleanDBonPurge()\n    *\n    * @since 0.83.1\n   **/\n   function cleanDBonPurge() {\n\n      $this->deleteChildrenAndRelationsFromDb(\n         [\n            Entity_KnowbaseItem::class,\n            Group_KnowbaseItem::class,\n            KnowbaseItem_Item::class,\n            KnowbaseItem_Profile::class,\n            KnowbaseItem_User::class,\n            KnowbaseItemTranslation::class,\n         ]\n      );\n\n      /// KnowbaseItem_Comment does not extends CommonDBConnexity\n      $kbic = new KnowbaseItem_Comment();\n      $kbic->deleteByCriteria(['knowbaseitems_id' => $this->fields['id']]);\n\n      /// KnowbaseItem_Revision does not extends CommonDBConnexity\n      $kbir = new KnowbaseItem_Revision();\n      $kbir->deleteByCriteria(['knowbaseitems_id' => $this->fields['id']]);\n   }\n\n   /**\n    * Check is this item if visible to everybody (anonymous users)\n    *\n    * @since 0.83\n    *\n    * @return Boolean\n   **/\n   function isPubliclyVisible() {\n      global $CFG_GLPI;\n\n      if (!$CFG_GLPI['use_public_faq']) {\n         return false;\n      }\n\n      if (isset($this->entities[0])) { // Browse root entity rights\n         foreach ($this->entities[0] as $entity) {\n            if ($entity['is_recursive']) {\n               return true;\n            }\n         }\n      }\n      return false;\n   }\n\n   public function haveVisibilityAccess() {\n      // No public knowbaseitem right : no visibility check\n      if (!Session::haveRightsOr(self::$rightname, [self::READFAQ, READ])) {\n         return false;\n      }\n\n      // KB Admin\n      if (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n         return true;\n      }\n\n      return parent::haveVisibilityAccess();\n   }\n\n   /**\n   * Return visibility joins to add to SQL\n   *\n   * @since 0.83\n   *\n   * @param boolean $forceall  force all joins\n   *\n   * @return string joins to add\n   **/\n   static function addVisibilityJoins($forceall = false) {\n      //not deprecated because used in self::getListRequest and self::showRecentPopular\n\n      global $DB;\n\n      //get and clean criteria\n      $criteria = self::getVisibilityCriteria($forceall);\n      unset($criteria['WHERE']);\n      $criteria['FROM'] = self::getTable();\n\n      $it = new \\DBmysqlIterator(null);\n      $it->buildQuery($criteria);\n      $sql = $it->getSql();\n      $sql = str_replace(\n         'SELECT * FROM '.$DB->quoteName(self::getTable()).'',\n         '',\n         $sql\n      );\n      return $sql;\n   }\n\n   /**\n    * Return visibility SQL restriction to add\n    *\n    * @since 0.83\n    *\n    * @return string restrict to add\n   **/\n   static function addVisibilityRestrict() {\n      //not deprecated because used in self::getListRequest and self::showRecentPopular\n\n      global $DB;\n\n      //get and clean criteria\n      $criteria = self::getVisibilityCriteria();\n      unset($criteria['LEFT JOIN']);\n      $criteria['FROM'] = self::getTable();\n\n      $it = new \\DBmysqlIterator(null);\n      $it->buildQuery($criteria);\n      $sql = $it->getSql();\n      $sql = str_replace(\n         'SELECT * FROM '.$DB->quoteName(self::getTable()).'',\n         '',\n         $sql\n      );\n      $sql = preg_replace('/.*WHERE /', '', $sql);\n\n      //No where restrictions. Add a placeholder for compatibility with later restrictions\n      if (strlen(trim($sql)) == 0) {\n         $sql = \"1\";\n      }\n      return $sql;\n   }\n\n   /**\n    * Return visibility joins to add to DBIterator parameters\n    *\n    * @since 9.2\n    *\n    * @param boolean $forceall force all joins (false by default)\n    *\n    * @return array\n    */\n   static public function getVisibilityCriteria(bool $forceall = false): array {\n      global $CFG_GLPI;\n\n      $is_public_faq_context = !Session::getLoginUserID() && $CFG_GLPI[\"use_public_faq\"];\n      $has_session_groups = isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"]);\n      $has_active_profile = isset($_SESSION[\"glpiactiveprofile\"])\n         && isset($_SESSION[\"glpiactiveprofile\"]['id']);\n      $has_active_entity = isset($_SESSION[\"glpiactiveentities\"])\n         && count($_SESSION[\"glpiactiveentities\"]);\n\n      $where = [];\n      $join = [\n         'glpi_knowbaseitems_users' => [\n            'ON' => [\n               'glpi_knowbaseitems_users' => 'knowbaseitems_id',\n               'glpi_knowbaseitems'       => 'id'\n            ]\n         ]\n      ];\n      if ($forceall || $has_session_groups) {\n         $join['glpi_groups_knowbaseitems'] = [\n            'ON' => [\n               'glpi_groups_knowbaseitems' => 'knowbaseitems_id',\n               'glpi_knowbaseitems'       => 'id'\n            ]\n         ];\n      }\n      if ($forceall || $has_active_profile) {\n         $join['glpi_knowbaseitems_profiles'] = [\n            'ON' => [\n               'glpi_knowbaseitems_profiles' => 'knowbaseitems_id',\n               'glpi_knowbaseitems'       => 'id'\n            ]\n         ];\n      }\n      if ($forceall || $has_active_entity || $is_public_faq_context) {\n         $join['glpi_entities_knowbaseitems'] = [\n            'ON' => [\n               'glpi_entities_knowbaseitems' => 'knowbaseitems_id',\n               'glpi_knowbaseitems'       => 'id'\n            ]\n         ];\n      }\n\n      if (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n         return [\n            'LEFT JOIN' => $join,\n            'WHERE' => [],\n         ];\n      }\n\n      // Users\n      if (Session::getLoginUserID()) {\n         $where['OR'] = [\n               'glpi_knowbaseitems.users_id'       => Session::getLoginUserID(),\n               'glpi_knowbaseitems_users.users_id' => Session::getLoginUserID(),\n         ];\n\n         // public faq\n         if (!Session::haveRight(self::$rightname, READ)) {\n            $where['AND']['glpi_knowbaseitems.is_faq'] = 1;\n         }\n      } else if ($is_public_faq_context) {\n         $where = [\n            \"glpi_knowbaseitems.is_faq\" => 1,\n         ];\n         if (Session::isMultiEntitiesMode()) {\n            $where += [\n               \"glpi_entities_knowbaseitems.entities_id\" => 0,\n               \"glpi_entities_knowbaseitems.is_recursive\" => 1,\n            ];\n         }\n      } else {\n         $where = [\n            0\n         ];\n      }\n      // Groups\n      if ($forceall || $has_session_groups) {\n         if (Session::getLoginUserID()) {\n            $restrict = getEntitiesRestrictCriteria('glpi_groups_knowbaseitems', '', '', true, true);\n            $where['OR'][] = [\n               'glpi_groups_knowbaseitems.groups_id' => count($_SESSION[\"glpigroups\"])\n                                                         ? $_SESSION[\"glpigroups\"]\n                                                         : [-1],\n               'OR' => [\n                  'glpi_groups_knowbaseitems.entities_id' => ['<', '0'],\n               ] + $restrict\n            ];\n         }\n      }\n\n      // Profiles\n      if ($forceall || $has_active_profile) {\n         if (Session::getLoginUserID()) {\n            $where['OR'][] = [\n               'glpi_knowbaseitems_profiles.profiles_id' => $_SESSION[\"glpiactiveprofile\"]['id'],\n               'OR' => [\n                  'glpi_knowbaseitems_profiles.entities_id' => ['<', '0'],\n                  getEntitiesRestrictCriteria('glpi_knowbaseitems_profiles', '', '', true, true)\n               ]\n            ];\n         }\n      }\n\n      // Entities\n      if ($forceall || $has_active_entity) {\n         if (Session::getLoginUserID()) {\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_knowbaseitems', '', '', true, true);\n            if (count($restrict)) {\n               $where['OR'] = $where['OR'] + $restrict;\n            } else {\n               $where['glpi_entities_knowbaseitems.entities_id'] = null;\n            }\n         }\n      }\n\n      $criteria = ['LEFT JOIN' => $join];\n      if (count($where)) {\n         $criteria['WHERE'] = $where;\n      }\n\n      return $criteria;\n   }\n\n   function prepareInputForAdd($input) {\n\n      // set new date if not exists\n      if (!isset($input[\"date\"]) || empty($input[\"date\"])) {\n         $input[\"date\"] = $_SESSION[\"glpi_currenttime\"];\n      }\n      // set users_id\n\n      // set title for question if empty\n      if (isset($input[\"name\"]) && empty($input[\"name\"])) {\n         $input[\"name\"] = __('New item');\n      }\n\n      if (Session::haveRight(self::$rightname, self::PUBLISHFAQ)\n          && !Session::haveRight(self::$rightname, UPDATE)) {\n         $input[\"is_faq\"] = 1;\n      }\n      if (!Session::haveRight(self::$rightname, self::PUBLISHFAQ)\n          && Session::haveRight(self::$rightname, UPDATE)) {\n         $input[\"is_faq\"] = 0;\n      }\n      return $input;\n   }\n\n\n   function prepareInputForUpdate($input) {\n      // set title for question if empty\n      if (isset($input[\"name\"]) && empty($input[\"name\"])) {\n         $input[\"name\"] = __('New item');\n      }\n      return $input;\n   }\n\n   function post_updateItem($history = 1) {\n      // Update screenshots\n      $this->input = $this->addFiles(\n         $this->input,\n         [\n            'force_update'  => true,\n            'content_field' => 'answer',\n            'name'          => 'answer',\n         ]\n      );\n\n      // add uploaded documents\n      $this->input = $this->addFiles(\n         $this->input,\n         [\n            'force_update'  => true,\n         ]\n      );\n   }\n\n\n   /**\n    * Print out an HTML \"<form>\" for knowbase item\n    *\n    * @param $ID\n    * @param $options array\n    *     - target for the Form\n    *\n    * @return void\n   **/\n   function showForm($ID, $options = []) {\n      global $CFG_GLPI;\n\n      // show kb item form\n      if (!Session::haveRightsOr(self::$rightname,\n                                 [UPDATE, self::PUBLISHFAQ, self::KNOWBASEADMIN])) {\n         return false;\n      }\n\n      $canedit = $this->can($ID, UPDATE);\n\n      $item = null;\n      // Load ticket solution\n      if (empty($ID)\n          && isset($options['item_itemtype']) && !empty($options['item_itemtype'])\n          && isset($options['item_items_id']) && !empty($options['item_items_id'])) {\n\n         if ($item = getItemForItemtype($options['item_itemtype'])) {\n            if ($item->getFromDB($options['item_items_id'])) {\n               $this->fields['name']   = $item->getField('name');\n               $solution = new ITILSolution();\n               $solution->getFromDBByCrit([\n                  'itemtype'     => $item->getType(),\n                  'items_id'     => $item->getID(),\n                  [\n                     'NOT' => ['status'       => CommonITILValidation::REFUSED]\n                  ]\n               ]);\n               $this->fields['answer'] = $solution->getField('content');\n               if ($item->isField('itilcategories_id')) {\n                  $ic = new ITILCategory();\n                  if ($ic->getFromDB($item->getField('itilcategories_id'))) {\n                     $this->fields['knowbaseitemcategories_id']\n                           = $ic->getField('knowbaseitemcategories_id');\n                  }\n               }\n            }\n         }\n      }\n      $rand = mt_rand();\n\n      $this->initForm($ID, $options);\n      $options['formoptions'] = \"data-track-changes=true\";\n      $this->showFormHeader($options);\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Category name').\"</td>\";\n      echo \"<td>\";\n      echo \"<input type='hidden' name='users_id' value=\\\"\".Session::getLoginUserID().\"\\\">\";\n      KnowbaseItemCategory::dropdown(['value' => $this->fields[\"knowbaseitemcategories_id\"]]);\n      echo \"</td>\";\n      echo \"<td>\";\n      if ($this->fields[\"date\"]) {\n         //TRANS: %s is the datetime of insertion\n         printf(__('Created on %s'), Html::convDateTime($this->fields[\"date\"]));\n      }\n      echo \"</td><td>\";\n      if ($this->fields[\"date_mod\"]) {\n         //TRANS: %s is the datetime of update\n         printf(__('Last update on %s'), Html::convDateTime($this->fields[\"date_mod\"]));\n      }\n      echo \"</td>\";\n      echo \"</tr>\\n\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (Session::haveRight(self::$rightname, self::PUBLISHFAQ)) {\n         echo \"<td>\".__('Put this item in the FAQ').\"</td>\";\n         echo \"<td>\";\n         Dropdown::showYesNo('is_faq', $this->fields[\"is_faq\"]);\n         echo \"</td>\";\n      } else {\n         echo \"<td colspan='2'>\";\n         if ($this->fields[\"is_faq\"]) {\n            echo __('This item is part of the FAQ');\n         } else {\n            echo __('This item is not part of the FAQ');\n         }\n         echo \"</td>\";\n      }\n      echo \"<td>\";\n      $showuserlink = 0;\n      if (Session::haveRight('user', READ)) {\n         $showuserlink = 1;\n      }\n      if ($this->fields[\"users_id\"]) {\n         //TRANS: %s is the writer name\n         printf(__('%1$s: %2$s'), __('Writer'), getUserName($this->fields[\"users_id\"],\n                                                            $showuserlink));\n      }\n      echo \"</td><td>\";\n      //TRANS: %d is the number of view\n      if ($ID) {\n         printf(_n('%d view', '%d views', $this->fields[\"view\"]), $this->fields[\"view\"]);\n      }\n      echo \"</td>\";\n      echo \"</tr>\\n\";\n\n      //Link with solution\n      if ($item != null) {\n\n         if ($item = getItemForItemtype($options['item_itemtype'])) {\n            if ($item->getFromDB($options['item_items_id'])) {\n               echo \"<tr>\";\n               echo \"<td>\".__('Add link').\"</td>\";\n               echo \"<td colspan='3'>\";\n               echo \"<input type='checkbox' name='_do_item_link' value='1' checked='checked'/> \";\n               echo Html::hidden('_itemtype', ['value' => $item->getType()]);\n               echo Html::hidden('_items_id', ['value' => $item->getID()]);\n               echo sprintf(\n                  __('link with %1$s'),\n                  $item->getLink()\n               );\n               echo \"</td>\";\n               echo \"</tr>\\n\";\n            }\n         }\n      }\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Visible since').\"</td><td>\";\n      Html::showDateTimeField(\"begin_date\", ['value'       => $this->fields[\"begin_date\"],\n                                                  'maybeempty' => true,\n                                                  'canedit'    => $canedit]);\n      echo \"</td>\";\n      echo \"<td>\".__('Visible until').\"</td><td>\";\n      Html::showDateTimeField(\"end_date\", ['value'       => $this->fields[\"end_date\"],\n                                                'maybeempty' => true,\n                                                'canedit'    => $canedit]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Subject').\"</td>\";\n      echo \"<td colspan='3'>\";\n      echo \"<textarea cols='100' rows='1' name='name'>\".$this->fields[\"name\"].\"</textarea>\";\n      echo \"</td>\";\n      echo \"</tr>\\n\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Content').\"</td>\";\n      echo \"<td colspan='3'>\";\n\n      $cols = 100;\n      $rows = 30;\n      if (isset($options['_in_modal']) && $options['_in_modal']) {\n         $rows = 15;\n         echo Html::hidden('_in_modal', ['value' => 1]);\n      }\n      Html::textarea(['name'              => 'answer',\n                      'value'             => $this->fields[\"answer\"],\n                      'enable_fileupload' => true,\n                      'enable_richtext'   => true,\n                      'cols'              => $cols,\n                      'rows'              => $rows]);\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      if ($this->isNewID($ID)) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td>\"._n('Target', 'Targets', 1).\"</td>\";\n         echo \"<td>\";\n         $types   = ['Entity', 'Group', 'Profile', 'User'];\n         $addrand = Dropdown::showItemTypes('_visibility[_type]', $types);\n         echo \"</td><td colspan='2'>\";\n         $params  = ['type'     => '__VALUE__',\n                          'right'    => 'knowbase',\n                          'prefix'   => '_visibility',\n                          'nobutton' => 1];\n\n         Ajax::updateItemOnSelectEvent(\"dropdown__visibility__type_\".$addrand, \"visibility$rand\",\n                                       $CFG_GLPI[\"root_doc\"].\"/ajax/visibility.php\",\n                                       $params);\n         echo \"<span id='visibility$rand'></span>\";\n         echo \"</td></tr>\\n\";\n      }\n\n      $this->showFormButtons($options);\n      return true;\n   } // function showForm\n\n\n   /**\n    * Add kb item to the public FAQ\n    *\n    * @return void\n   **/\n   function addToFaq() {\n      global $DB;\n\n      $DB->update(\n         $this->getTable(), [\n            'is_faq' => 1\n         ], [\n            'id' => $this->fields['id']\n         ]\n      );\n   }\n\n   /**\n    * Increase the view counter of the current knowbaseitem\n    *\n    * @since 0.83\n    */\n   function updateCounter() {\n      global $DB;\n\n      //update counter view\n      $DB->update(\n         'glpi_knowbaseitems', [\n            'view'   => new \\QueryExpression($DB->quoteName('view') . ' + 1')\n         ], [\n            'id' => $this->getID()\n         ]\n      );\n   }\n\n\n   /**\n    * Print out (html) show item : question and answer\n    *\n    * @param $options      array of options\n    *\n    * @return void|string\n    *    void if option display=true\n    *    string if option display=false (HTML code)\n   **/\n   function showFull($options = []) {\n      global $CFG_GLPI;\n\n      if (!$this->can($this->fields['id'], READ)) {\n         return false;\n      }\n\n      $default_options = [\n         'display' => true,\n      ];\n      $options = array_merge($default_options, $options);\n\n      $out = \"\";\n\n      $linkusers_id = true;\n      // show item : question and answer\n      if (((Session::getLoginUserID() === false) && $CFG_GLPI[\"use_public_faq\"])\n          || (Session::getCurrentInterface() == \"helpdesk\")\n          || !User::canView()) {\n         $linkusers_id = false;\n      }\n\n      $this->updateCounter();\n\n      $knowbaseitemcategories_id = $this->fields[\"knowbaseitemcategories_id\"];\n      $fullcategoryname          = getTreeValueCompleteName(\"glpi_knowbaseitemcategories\",\n                                                            $knowbaseitemcategories_id);\n\n      $tmp = \"<a href='\".$this->getSearchURL().\n             \"?knowbaseitemcategories_id=$knowbaseitemcategories_id&forcetab=Knowbase$2'>\".\n             $fullcategoryname.\"</a>\";\n      $out.= \"<table class='tab_cadre_fixe'>\";\n      $out.= \"<tr><th colspan='4'>\".sprintf(__('%1$s: %2$s'), __('Category'), $tmp);\n      $out.= \"</th></tr>\";\n\n      $out.= \"<tr><td class='left' colspan='4'><h2>\".__('Subject').\"</h2>\";\n      if (KnowbaseItemTranslation::canBeTranslated($this)) {\n         $out.= KnowbaseItemTranslation::getTranslatedValue($this, 'name');\n      } else {\n         $out.= $this->fields[\"name\"];\n      }\n\n      $out.= \"</td></tr>\";\n      $out.= \"<tr><td class='left' colspan='4'><h2>\".__('Content').\"</h2>\\n\";\n\n      $out.= \"<div id='kbanswer'>\";\n      $out.= $this->getAnswer();\n      $out.= \"</div>\";\n      $out.= \"</td></tr>\";\n\n      $out.= \"<tr><th class='tdkb'  colspan='2'>\";\n      if ($this->fields[\"users_id\"]) {\n         // Integer because true may be 2 and getUserName return array\n         if ($linkusers_id) {\n            $linkusers_id = 1;\n         } else {\n            $linkusers_id = 0;\n         }\n\n         $out.= sprintf(__('%1$s: %2$s'), __('Writer'), getUserName($this->fields[\"users_id\"],\n                $linkusers_id));\n         $out.= \"<br>\";\n      }\n\n      if ($this->fields[\"date\"]) {\n         //TRANS: %s is the datetime of update\n         $out.= sprintf(__('Created on %s'), Html::convDateTime($this->fields[\"date\"]));\n         $out.= \"<br>\";\n      }\n      if ($this->fields[\"date_mod\"]) {\n         //TRANS: %s is the datetime of update\n         $out.= sprintf(__('Last update on %s'), Html::convDateTime($this->fields[\"date_mod\"]));\n      }\n\n      $out.= \"</th>\";\n      $out.= \"<th class='tdkb' colspan='2'>\";\n      if ($this->countVisibilities() == 0) {\n         $out.= \"<span class='red'>\".__('Unpublished').\"</span><br>\";\n      }\n\n      $out.= sprintf(_n('%d view', '%d views', $this->fields[\"view\"]), $this->fields[\"view\"]);\n      $out.= \"<br>\";\n      if ($this->fields[\"is_faq\"]) {\n         $out.= __('This item is part of the FAQ');\n      } else {\n         $out.= __('This item is not part of the FAQ');\n      }\n      $out.= \"</th></tr>\";\n      $out.= \"</table>\";\n\n      if ($options['display']) {\n         echo $out;\n      } else {\n         return $out;\n      }\n\n      return true;\n   }\n\n\n   /**\n    * Print out an HTML form for Search knowbase item\n    *\n    * @param $options   $_GET\n    *\n    * @return void\n   **/\n   function searchForm($options) {\n      global $CFG_GLPI;\n\n      if (!$CFG_GLPI[\"use_public_faq\"]\n          && !Session::haveRightsOr(self::$rightname, [READ, self::READFAQ])) {\n         return false;\n      }\n\n      // Default values of parameters\n      $params[\"contains\"]                  = \"\";\n      $params[\"target\"]                    = $_SERVER['PHP_SELF'];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      echo \"<div>\";\n      echo \"<form method='get' action='\".$this->getSearchURL().\"'>\";\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr class='tab_bg_2'><td class='right' width='50%'>\";\n      echo \"<input type='text' size='50' name='contains' value=\\\"\".\n             Html::cleanInputText(stripslashes($params[\"contains\"])).\"\\\"></td>\";\n      echo \"<td class='left'>\";\n      echo \"<input type='submit' value=\\\"\"._sx('button', 'Search').\"\\\" class='submit'></td></tr>\";\n      echo \"</table>\";\n      if (isset($options['item_itemtype'])\n          && isset($options['item_items_id'])) {\n         echo \"<input type='hidden' name='item_itemtype' value='\".$options['item_itemtype'].\"'>\";\n         echo \"<input type='hidden' name='item_items_id' value='\".$options['item_items_id'].\"'>\";\n      }\n      Html::closeForm();\n\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Print out an HTML \"<form>\" for Search knowbase item\n    *\n    * @since 0.84\n    *\n    * @param $options   $_GET\n    *\n    * @return void\n   **/\n   function showBrowseForm($options) {\n      global $CFG_GLPI;\n\n      if (!$CFG_GLPI[\"use_public_faq\"]\n          && !Session::haveRightsOr(self::$rightname, [READ, self::READFAQ])) {\n         return false;\n      }\n\n      // Default values of parameters\n      $params[\"knowbaseitemcategories_id\"] = \"\";\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n      $faq = !Session::haveRight(self::$rightname, READ);\n\n      // Category select not for anonymous FAQ\n      if (Session::getLoginUserID()\n          && !$faq) {\n         echo \"<div>\";\n         echo \"<form method='get' action='\".$this->getSearchURL().\"'>\";\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr class='tab_bg_2'><td class='right' width='50%'>\".__('Category').\"&nbsp;\";\n         KnowbaseItemCategory::dropdown(['value' => $params[\"knowbaseitemcategories_id\"]]);\n         echo \"</td><td class='left'>\";\n         echo \"<input type='submit' value=\\\"\"._sx('button', 'Post').\"\\\" class='submit'></td>\";\n         echo \"</tr></table>\";\n         if (isset($options['item_itemtype'])\n             && isset($options['item_items_id'])) {\n            echo \"<input type='hidden' name='item_itemtype' value='\".$options['item_itemtype'].\"'>\";\n            echo \"<input type='hidden' name='item_items_id' value='\".$options['item_items_id'].\"'>\";\n         }\n         Html::closeForm();\n         echo \"</div>\";\n      }\n   }\n\n\n   /**\n    * Print out an HTML form for Search knowbase item\n    *\n    * @since 0.84\n    *\n    * @param $options   $_GET\n    *\n    * @return void\n   **/\n   function showManageForm($options) {\n      if (!Session::haveRightsOr(self::$rightname,\n                                 [UPDATE, self::PUBLISHFAQ, self::KNOWBASEADMIN])) {\n         return false;\n      }\n      $params['unpublished'] = 'my';\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      echo \"<div>\";\n      echo \"<form method='get' action='\".$this->getSearchURL().\"'>\";\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr class='tab_bg_2'><td class='right' width='50%'>\";\n      $values = ['myunpublished' => __('My unpublished articles'),\n                      'allmy'         => __('All my articles')];\n      if (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n         $values['allunpublished'] = __('All unpublished articles');\n         $values['allpublished'] = __('All published articles');\n      }\n      Dropdown::showFromArray('unpublished', $values, ['value' => $params['unpublished']]);\n      echo \"</td><td class='left'>\";\n      echo \"<input type='submit' value=\\\"\"._sx('button', 'Post').\"\\\" class='submit'></td>\";\n      echo \"</tr></table>\";\n      Html::closeForm();\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Build request for showList\n    *\n    * @since 0.83\n    *\n    * @param $params array  (contains, knowbaseitemcategories_id, faq)\n    * @param $type   string search type : browse / search (default search)\n    *\n    * @return String : SQL request\n   **/\n   static function getListRequest(array $params, $type = 'search') {\n      global $DB;\n\n      $criteria = [\n         'SELECT' => [\n            'glpi_knowbaseitems.*',\n            'glpi_knowbaseitemcategories.completename AS category',\n            new QueryExpression(\n               'COUNT(' . $DB->quoteName('glpi_knowbaseitems_users.id') . ')' .\n                  ' + COUNT(' . $DB->quoteName('glpi_groups_knowbaseitems.id') . ')' .\n                  ' + COUNT(' . $DB->quoteName('glpi_knowbaseitems_profiles.id') . ')' .\n                  ' + COUNT(' . $DB->quoteName('glpi_entities_knowbaseitems.id') .') AS ' .\n                  $DB->quoteName('visibility_count')\n            )\n         ],\n         'FROM'   => 'glpi_knowbaseitems',\n         'WHERE'     => [], //to be filled\n         'LEFT JOIN' => [], //to be filled\n         'GROUPBY'   => ['glpi_knowbaseitems.id', 'glpi_knowbaseitemcategories.completename']\n      ];\n\n      // Lists kb Items\n      $restrict = self::getVisibilityCriteria(true);\n      $restrict_where = $restrict['WHERE'];\n      unset($restrict['WHERE']);\n      unset($restrict['SELECT']);\n      $criteria = array_merge_recursive($criteria, $restrict);\n\n      switch ($type) {\n         case 'myunpublished':\n         case 'allmy':\n         case 'allunpublished':\n            break;\n\n         default:\n            // Build query\n            if (Session::getLoginUserID()) {\n               $criteria['WHERE'] = array_merge(\n                  $criteria['WHERE'],\n                  $restrict_where\n               );\n            } else {\n               // Anonymous access\n               if (Session::isMultiEntitiesMode()) {\n                  $criteria['WHERE']['glpi_entities_knowbaseitems.entities_id'] = 0;\n                  $criteria['WHERE']['glpi_entities_knowbaseitems.is_recursive'] = 1;\n               }\n            }\n            break;\n      }\n\n      if ($params['faq']) { // helpdesk\n         $criteria['WHERE']['glpi_knowbaseitems.is_faq'] = 1;\n      }\n\n      if (KnowbaseItemTranslation::isKbTranslationActive()\n          && (countElementsInTable('glpi_knowbaseitemtranslations') > 0)) {\n         $criteria['LEFT JOIN']['glpi_knowbaseitemtranslations'] = [\n            'ON'  => [\n               'glpi_knowbaseitems'             => 'id',\n               'glpi_knowbaseitemtranslations'  => 'knowbaseitems_id', [\n                  'AND'                            => [\n                     'glpi_knowbaseitemtranslations.language' => $_SESSION['glpilanguage']\n                  ]\n               ]\n            ]\n         ];\n         $criteria['SELECT'][] = 'glpi_knowbaseitemtranslations.name AS transname';\n         $criteria['SELECT'][] = 'glpi_knowbaseitemtranslations.answer AS transanswer';\n      }\n\n      // a search with $contains\n      switch ($type) {\n         case 'allmy' :\n            $criteria['WHERE']['glpi_knowbaseitems.users_id'] = Session::getLoginUserID();\n            break;\n\n         case 'myunpublished' :\n            $criteria['WHERE']['glpi_knowbaseitems.users_id'] = Session::getLoginUserID();\n            $criteria['WHERE']['glpi_entities_knowbaseitems.entities_id'] = null;\n            $criteria['WHERE']['glpi_knowbaseitems_profiles.profiles_id'] = null;\n            $criteria['WHERE']['glpi_groups_knowbaseitems.groups_id'] = null;\n            $criteria['WHERE']['glpi_knowbaseitems_users.users_id'] = null;\n            break;\n\n         case 'allunpublished' :\n            // Only published\n            $criteria['WHERE']['glpi_entities_knowbaseitems.entities_id'] = null;\n            $criteria['WHERE']['glpi_knowbaseitems_profiles.profiles_id'] = null;\n            $criteria['WHERE']['glpi_groups_knowbaseitems.groups_id'] = null;\n            $criteria['WHERE']['glpi_knowbaseitems_users.users_id'] = null;\n            break;\n\n         case 'search' :\n            if (strlen($params[\"contains\"]) > 0) {\n               $search  = Toolbox::unclean_cross_side_scripting_deep($params[\"contains\"]);\n               $search_wilcard = explode(' ', $search);\n               $search_wilcard = implode('* ', $search_wilcard).'*';\n\n               $addscore = [];\n               if (KnowbaseItemTranslation::isKbTranslationActive()\n                   && (countElementsInTable('glpi_knowbaseitemtranslations') > 0)) {\n                  $addscore = [\n                     'glpi_knowbaseitemtranslations.name',\n                     'glpi_knowbaseitemtranslations.answer'\n                  ];\n               }\n\n               $expr = \"(MATCH(\" . $DB->quoteName('glpi_knowbaseitems.name') . \", \" . $DB->quoteName('glpi_knowbaseitems.answer') . \")\n                           AGAINST(\" . $DB->quote($search_wilcard) . \" IN BOOLEAN MODE)\";\n\n               if (!empty($addscore)) {\n                  foreach ($addscore as $addscore_field) {\n                     $expr .= \" + MATCH(\" . $DB->quoteName($addscore_field) . \")\n                                        AGAINST(\" . $DB->quote($search_wilcard) . \" IN BOOLEAN MODE)\";\n                  }\n               }\n               $expr .=\" ) AS SCORE \";\n               $criteria['SELECT'][] = new QueryExpression($expr);\n\n               $ors = [\n                  new QueryExpression(\n                     \"MATCH(\" . $DB->quoteName('glpi_knowbaseitems.name') .\",\n                        \" . $DB->quoteName('glpi_knowbaseitems.answer') .\")\n                        AGAINST(\" . $DB->quote($search_wilcard) . \" IN BOOLEAN MODE)\"\n                  )\n               ];\n\n               if (!empty($addscore)) {\n                  foreach ($addscore as $addscore_field) {\n                     $ors[] = [\n                        'NOT' => [$addscore_field => null],\n                        new QueryExpression(\n                           \"MATCH(\" . $DB->quoteName($addscore_field) . \")\n                              AGAINST(\" . $DB->quote($search_wilcard) . \" IN BOOLEAN MODE)\"\n                        )\n                     ];\n                  }\n\n               }\n\n               $search_where = ['OR' => $ors];\n\n               // Add visibility date\n               $visibility_crit = [\n                  [\n                     'OR'  => [\n                        ['glpi_knowbaseitems.begin_date'  => null],\n                        ['glpi_knowbaseitems.begin_date'  => ['<', new QueryExpression('NOW()')]]\n                     ]\n                  ], [\n                     'OR'  => [\n                        ['glpi_knowbaseitems.end_date'    => null],\n                        ['glpi_knowbaseitems.end_date'    => ['>', new QueryExpression('NOW()')]]\n                     ]\n                  ]\n               ];\n               $search_where[] = $visibility_crit;\n\n               $criteria['ORDERBY'] = ['SCORE DESC'];\n\n               // preliminar query to allow alternate search if no result with fulltext\n               $search_criteria = [\n                  'COUNT'     => 'cpt',\n                  'LEFT JOIN' => $criteria['LEFT JOIN'],\n                  'FROM'      => 'glpi_knowbaseitems',\n                  'WHERE'     => $search_where\n               ];\n               $search_iterator = $DB->request($search_criteria);\n               $numrows_search = $search_iterator->next()['cpt'];\n\n               if ($numrows_search <= 0) {// not result this fulltext try with alternate search\n                  $search1 = [/* 1 */   '/\\\\\\\"/',\n                                   /* 2 */   \"/\\+/\",\n                                   /* 3 */   \"/\\*/\",\n                                   /* 4 */   \"/~/\",\n                                   /* 5 */   \"/</\",\n                                   /* 6 */   \"/>/\",\n                                   /* 7 */   \"/\\(/\",\n                                   /* 8 */   \"/\\)/\",\n                                   /* 9 */   \"/\\-/\"];\n                  $contains = preg_replace($search1, \"\", $params[\"contains\"]);\n                  $ors = [\n                     [\"glpi_knowbaseitems.name\"     => ['LIKE', Search::makeTextSearchValue($contains)]],\n                     [\"glpi_knowbaseitems.answer\"   => ['LIKE', Search::makeTextSearchValue($contains)]]\n                  ];\n                  if (KnowbaseItemTranslation::isKbTranslationActive()\n                      && (countElementsInTable('glpi_knowbaseitemtranslations') > 0)) {\n                     $ors[] = [\"glpi_knowbaseitemtranslations.name\"   => ['LIKE', Search::makeTextSearchValue($contains)]];\n                     $ors[] = [\"glpi_knowbaseitemtranslations.answer\" => ['LIKE', Search::makeTextSearchValue($contains)]];\n                  }\n                  $criteria['WHERE'][] = ['OR' => $ors];\n                  // Add visibility date\n                  $criteria['WHERE'][] = $visibility_crit;\n               } else {\n                  $criteria['WHERE'] = $search_where;\n               }\n            }\n            break;\n\n         case 'browse' :\n            $criteria['WHERE']['glpi_knowbaseitems.knowbaseitemcategories_id'] = $params['knowbaseitemcategories_id'];\n\n            if (!Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n               // Add visibility date\n               $criteria['WHERE'][] = [\n                  'OR'  => [\n                     ['glpi_knowbaseitems.begin_date' => null],\n                     ['glpi_knowbaseitems.begin_date' => ['<', new QueryExpression('NOW()')]]\n                  ]\n               ];\n               $criteria['WHERE'][] = [\n                  'OR'  => [\n                     ['glpi_knowbaseitems.end_date' => null],\n                     ['glpi_knowbaseitems.end_date' => ['>', new QueryExpression('NOW()')]]\n                  ]\n               ];\n            }\n\n            $criteria['ORDERBY'] = ['glpi_knowbaseitems.name ASC'];\n            break;\n      }\n\n      $criteria['LEFT JOIN']['glpi_knowbaseitemcategories'] = [\n         'ON'  => [\n            'glpi_knowbaseitemcategories' => 'id',\n            'glpi_knowbaseitems'          => 'knowbaseitemcategories_id'\n         ]\n      ];\n\n      return $criteria;\n   }\n\n\n   /**\n    * Print out list kb item\n    *\n    * @param $options            $_GET\n    * @param $type      string   search type : browse / search (default search)\n   **/\n   static function showList($options, $type = 'search') {\n      global $CFG_GLPI;\n\n      $DBread = DBConnection::getReadConnection();\n\n      // Default values of parameters\n      $params['faq']                       = !Session::haveRight(self::$rightname, READ);\n      $params[\"start\"]                     = \"0\";\n      $params[\"knowbaseitemcategories_id\"] = \"0\";\n      $params[\"contains\"]                  = \"\";\n      $params[\"target\"]                    = $_SERVER['PHP_SELF'];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n      $ki = new self();\n      switch ($type) {\n         case 'myunpublished' :\n            if (!Session::haveRightsOr(self::$rightname, [UPDATE, self::PUBLISHFAQ])) {\n               return false;\n            }\n            break;\n\n         case 'allunpublished' :\n            if (!Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n               return false;\n            }\n            break;\n\n         default :\n            break;\n      }\n\n      if (!$params[\"start\"]) {\n         $params[\"start\"] = 0;\n      }\n\n      $criteria = self::getListRequest($params, $type);\n\n      $main_iterator = $DBread->request($criteria);\n      $rows = count($main_iterator);\n      $numrows = $rows;\n\n      // Get it from database\n      $KbCategory = new KnowbaseItemCategory();\n      $title      = \"\";\n      if ($KbCategory->getFromDB($params[\"knowbaseitemcategories_id\"])) {\n         $title = (empty($KbCategory->fields['name']) ?\"(\".$params['knowbaseitemcategories_id'].\")\"\n                                                      : $KbCategory->fields['name']);\n         $title = sprintf(__('%1$s: %2$s'), __('Category'), $title);\n      }\n\n      Session::initNavigateListItems('KnowbaseItem', $title);\n      // force using getSearchUrl on list icon (when viewing a single article)\n      $_SESSION['glpilisturl']['KnowbaseItem'] = '';\n\n      $list_limit = $_SESSION['glpilist_limit'];\n\n      $showwriter = in_array($type, ['myunpublished', 'allunpublished', 'allmy']);\n\n      // Limit the result, if no limit applies, use prior result\n      if (($rows > $list_limit)\n         && !isset($_GET['export_all'])) {\n         $criteria['START'] = (int)$params['start'];\n         $criteria['LIMIT'] = (int)$list_limit;\n         $main_iterator = $DBread->request($criteria);\n         $numrows = count($main_iterator);\n      }\n\n      if ($numrows > 0) {\n         // Set display type for export if define\n         $output_type = Search::HTML_OUTPUT;\n\n         if (isset($_GET[\"display_type\"])) {\n            $output_type = $_GET[\"display_type\"];\n         }\n\n         // Pager\n         $parameters = \"start=\".$params[\"start\"].\"&amp;knowbaseitemcategories_id=\".\n                        $params['knowbaseitemcategories_id'].\"&amp;contains=\".\n                        $params[\"contains\"].\"&amp;is_faq=\".$params['faq'];\n\n         if (isset($options['item_itemtype'])\n               && isset($options['item_items_id'])) {\n            $parameters .= \"&amp;item_items_id=\".$options['item_items_id'].\"&amp;item_itemtype=\".\n                              $options['item_itemtype'];\n         }\n\n         $pager_url = \"\";\n         if ($output_type == Search::HTML_OUTPUT) {\n            $pager_url = Toolbox::getItemTypeSearchURL('KnowbaseItem');\n            if (!Session::getLoginUserID()) {\n               $pager_url = $CFG_GLPI['root_doc'].\"/front/helpdesk.faq.php\";\n            }\n            Html::printPager($params['start'], $rows, $pager_url, $parameters, 'KnowbaseItem');\n         }\n\n         $nbcols = 1;\n         // Display List Header\n         echo Search::showHeader($output_type, $numrows+1, $nbcols);\n\n         echo Search::showNewLine($output_type);\n         $header_num = 1;\n         echo Search::showHeaderItem($output_type, __('Subject'), $header_num);\n\n         if ($output_type != Search::HTML_OUTPUT) {\n            echo Search::showHeaderItem($output_type, __('Content'), $header_num);\n         }\n\n         if ($showwriter) {\n            echo Search::showHeaderItem($output_type, __('Writer'), $header_num);\n         }\n         echo Search::showHeaderItem($output_type, __('Category'), $header_num);\n\n         if ($output_type == Search::HTML_OUTPUT) {\n            echo Search::showHeaderItem($output_type, _n('Associated element', 'Associated elements', Session::getPluralNumber()), $header_num);\n         }\n\n         if (isset($options['item_itemtype'])\n               && isset($options['item_items_id'])\n               && ($output_type == Search::HTML_OUTPUT)) {\n            echo Search::showHeaderItem($output_type, '&nbsp;', $header_num);\n         }\n\n         // Num of the row (1=header_line)\n         $row_num = 1;\n         while ($data = $main_iterator->next()) {\n            Session::addToNavigateListItems('KnowbaseItem', $data[\"id\"]);\n            // Column num\n            $item_num = 1;\n            echo Search::showNewLine($output_type, ($row_num - 1)%2);\n            $row_num++;\n\n            $item = new self;\n            $item->getFromDB($data[\"id\"]);\n            $name   = $data[\"name\"];\n            $answer = $data[\"answer\"];\n            // Manage translations\n            if (isset($data['transname']) && !empty($data['transname'])) {\n               $name   = $data[\"transname\"];\n            }\n            if (isset($data['transanswer']) && !empty($data['transanswer'])) {\n               $answer = $data[\"transanswer\"];\n            }\n\n            if ($output_type == Search::HTML_OUTPUT) {\n               $toadd = '';\n               if (isset($options['item_itemtype'])\n                     && isset($options['item_items_id'])) {\n                  $href  = \" href='#' onClick=\\\"\".Html::jsGetElementbyID('kbshow'.$data[\"id\"]).\".dialog('open'); return false;\\\"\";\n                  $toadd = Ajax::createIframeModalWindow('kbshow'.$data[\"id\"],\n                                                         KnowbaseItem::getFormURLWithID($data[\"id\"]),\n                                                         ['display' => false]);\n               } else {\n                  $href = \" href=\\\"\".KnowbaseItem::getFormURLWithID($data[\"id\"]).\"\\\" \";\n               }\n\n               $fa_class = \"\";\n               $fa_title = \"\";\n               if ($data['is_faq']\n                     && (!Session::isMultiEntitiesMode()\n                        || isset($data['visibility_count'])\n                           && $data['visibility_count'] > 0)) {\n                  $fa_class = \"fa-question-circle faq\";\n                  $fa_title = __s(\"This item is part of the FAQ\");\n               } else if (isset($data['visibility_count'])\n                  && $data['visibility_count'] <= 0) {\n                  $fa_class = \"fa-eye-slash not-published\";\n                  $fa_title = __s(\"This item is not published yet\");\n               }\n               echo Search::showItem($output_type,\n                                       \"<div class='kb'>$toadd <i class='fa fa-fw $fa_class' title='$fa_title'></i> <a $href>\".Html::resume_text($name, 80).\"</a></div>\n                                       <div class='kb_resume'>\".\n                                       Html::resume_text(Html::clean(Toolbox::unclean_cross_side_scripting_deep($answer)),\n                                                         600).\"</div>\",\n                                       $item_num, $row_num);\n            } else {\n               echo Search::showItem($output_type, $name, $item_num, $row_num);\n               echo Search::showItem($output_type,\n                  Html::clean(Toolbox::unclean_cross_side_scripting_deep(html_entity_decode($answer,\n                                                                                             ENT_QUOTES,\n                                                                                             \"UTF-8\"))),\n                              $item_num, $row_num);\n            }\n\n            $showuserlink = 0;\n            if (Session::haveRight('user', READ)) {\n               $showuserlink = 1;\n            }\n            if ($showwriter) {\n               echo Search::showItem($output_type, getUserName($data[\"users_id\"], $showuserlink),\n                                          $item_num, $row_num);\n            }\n\n            $categ = $data[\"category\"];\n            $inst = new KnowbaseItemCategory;\n            if (DropdownTranslation::canBeTranslated($inst)) {\n               $tcateg = DropdownTranslation::getTranslatedValue(\n                  $data[\"knowbaseitemcategories_id\"],\n                  $inst->getType()\n               );\n               if (!empty($tcateg)) {\n                  $categ = $tcateg;\n               }\n            }\n\n            if ($output_type == Search::HTML_OUTPUT) {\n               $cathref = $ki->getSearchURL().\"?knowbaseitemcategories_id=\".\n                           $data[\"knowbaseitemcategories_id\"].'&amp;forcetab=Knowbase$2';\n               $categ   = \"<a class='kb-category'\"\n                  . \" href='$cathref'\"\n                  . \" data-category-id='\" . $data[\"knowbaseitemcategories_id\"] . \"'\"\n                  . \">\".$categ.'</a>';\n            }\n            echo Search::showItem($output_type, $categ, $item_num, $row_num);\n\n            if ($output_type == Search::HTML_OUTPUT) {\n               echo \"<td class='center'>\";\n               $j=0;\n               $iterator = $DBread->request([\n                  'FIELDS' => 'documents_id',\n                  'FROM'   => 'glpi_documents_items',\n                  'WHERE'  => [\n                     'items_id'  => $data[\"id\"],\n                     'itemtype'  => 'KnowbaseItem'\n                  ]\n               ]);\n               while ($docs = $iterator->next()) {\n                  $doc = new Document();\n                  $doc->getFromDB($docs[\"documents_id\"]);\n                  echo $doc->getDownloadLink();\n                  $j++;\n                  if ($j > 1) {\n                     echo \"<br>\";\n                  }\n               }\n               echo \"</td>\";\n            }\n\n            if (isset($options['item_itemtype'])\n                  && isset($options['item_items_id'])\n                  && ($output_type == Search::HTML_OUTPUT)) {\n\n               $forcetab = $options['item_itemtype'] . '$1';\n               $item_itemtype = $options['item_itemtype'];\n               $content = \"<a href='\".$item_itemtype::getFormURLWithID($options['item_items_id']).\n                              \"&amp;load_kb_sol=\".$data['id'].\n                              \"&amp;forcetab=\".$forcetab.\"'>\".\n                              __('Use as a solution').\"</a>\";\n               echo Search::showItem($output_type, $content, $item_num, $row_num);\n            }\n\n            // End Line\n            echo Search::showEndLine($output_type);\n         }\n\n         // Display footer\n         if (($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n               || ($output_type == Search::PDF_OUTPUT_PORTRAIT)) {\n            echo Search::showFooter($output_type,\n                                    Dropdown::getDropdownName(\"glpi_knowbaseitemcategories\",\n                                                               $params['knowbaseitemcategories_id']),\n                                    $numrows);\n         } else {\n            echo Search::showFooter($output_type, '', $numrows);\n         }\n         echo \"<br>\";\n         if ($output_type == Search::HTML_OUTPUT) {\n            Html::printPager($params['start'], $rows, $pager_url, $parameters, 'KnowbaseItem');\n         }\n\n      } else {\n         echo \"<div class='center b'>\".__('No item found').\"</div>\";\n      }\n   }\n\n\n   /**\n    * Print out list recent or popular kb/faq\n    *\n    * @param string $type  type : recent / popular / not published\n    *\n    * @return void\n   **/\n   static function showRecentPopular($type) {\n      global $DB;\n\n      $faq = !Session::haveRight(self::$rightname, READ);\n\n      $criteria = [\n         'SELECT'    => ['glpi_knowbaseitems.*'],\n         'DISTINCT'  => true,\n         'FROM'      => self::getTable(),\n         'WHERE'     => [],\n         'LIMIT'     => 10\n      ];\n\n      if ($type == \"recent\") {\n         $criteria['ORDERBY'] = 'date DESC';\n         $title   = __('Recent entries');\n      } else if ($type == 'lastupdate') {\n         $criteria['ORDERBY'] = 'date_mod DESC';\n         $title   = __('Last updated entries');\n      } else {\n         $criteria['ORDERBY'] = 'view DESC';\n         $title   = __('Most popular questions');\n      }\n\n      // Force all joins for not published to verify no visibility set\n      $restrict = self::getVisibilityCriteria(true);\n      unset($restrict['WHERE']);\n      unset($restrict['SELECT']);\n      $criteria = array_merge($criteria, $restrict);\n\n      if (Session::getLoginUserID()) {\n         $restrict = self::getVisibilityCriteria();\n         $criteria['WHERE'] = array_merge($criteria['WHERE'], $restrict['WHERE']);\n      } else {\n         // Anonymous access\n         if (Session::isMultiEntitiesMode()) {\n            $criteria['WHERE']['glpi_entities_knowbaseitems.entities_id'] = 0;\n            $criteria['WHERE']['glpi_entities_knowbaseitems.is_recursive'] = 1;\n         }\n      }\n\n      // Only published\n      $criteria['WHERE'][] = [\n         'NOT'  => [\n            'glpi_entities_knowbaseitems.entities_id' => null,\n            'glpi_knowbaseitems_profiles.profiles_id' => null,\n            'glpi_groups_knowbaseitems.groups_id'     => null,\n            'glpi_knowbaseitems_users.users_id'       => null\n         ]\n      ];\n\n      // Add visibility date\n      $criteria['WHERE'][] = [\n         'OR'  => [\n            ['glpi_knowbaseitems.begin_date' => null],\n            ['glpi_knowbaseitems.begin_date' => ['<', new QueryExpression('NOW()')]]\n         ]\n      ];\n      $criteria['WHERE'][] = [\n         'OR'  => [\n            ['glpi_knowbaseitems.end_date'   => null],\n            ['glpi_knowbaseitems.end_date'   => ['>', new QueryExpression('NOW()')]]\n         ]\n      ];\n\n      if ($faq) { // FAQ\n         $criteria['WHERE']['glpi_knowbaseitems.is_faq'] = 1;\n      }\n\n      if (KnowbaseItemTranslation::isKbTranslationActive()\n          && (countElementsInTable('glpi_knowbaseitemtranslations') > 0)) {\n         $criteria['LEFT JOIN']['glpi_knowbaseitemtranslations'] = [\n            'ON'  => [\n               'glpi_knowbaseitems'             => 'id',\n               'glpi_knowbaseitemtranslations'  => 'knowbaseitems_id', [\n                  'AND'                            => [\n                     'glpi_knowbaseitemtranslations.language' => $_SESSION['glpilanguage']\n                  ]\n               ]\n            ]\n         ];\n         $criteria['SELECT'][] = 'glpi_knowbaseitemtranslations.name AS transname';\n         $criteria['SELECT'][] = 'glpi_knowbaseitemtranslations.answer AS transanswer';\n      }\n\n      $iterator = $DB->request($criteria);\n\n      if (count($iterator)) {\n         echo \"<table class='tab_cadrehov'>\";\n         echo \"<tr class='noHover'><th>\".$title.\"</th></tr>\";\n         while ($data = $iterator->next()) {\n            $name = $data['name'];\n\n            if (isset($data['transname']) && !empty($data['transname'])) {\n               $name = $data['transname'];\n            }\n            echo \"<tr class='tab_bg_2'><td class='left'><div class='kb'>\";\n            if ($data['is_faq']) {\n               echo \"<i class='fa fa-fw fa-question-circle faq' title='\".__(\"This item is part of the FAQ\").\"'></i>\";\n            }\n            echo Html::link(Html::resume_text($name, 80), KnowbaseItem::getFormURLWithID($data[\"id\"]), [\n               'class' => $data['is_faq'] ? 'faq' : 'knowbase',\n               'title' => $data['is_faq'] ? __s(\"This item is part of the FAQ\") : ''\n            ]);\n            echo \"</div></td></tr>\";\n         }\n         echo \"</table>\";\n      }\n   }\n\n\n   function rawSearchOptions() {\n      $tab = [];\n\n      $tab[] = [\n         'id'                 => 'common',\n         'name'               => __('Characteristics')\n      ];\n\n      $tab[] = [\n         'id'                 => '2',\n         'table'              => $this->getTable(),\n         'field'              => 'id',\n         'name'               => __('ID'),\n         'massiveaction'      => false,\n         'datatype'           => 'number'\n      ];\n\n      $tab[] = [\n         'id'                 => '4',\n         'table'              => 'glpi_knowbaseitemcategories',\n         'field'              => 'name',\n         'name'               => __('Category'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '5',\n         'table'              => $this->getTable(),\n         'field'              => 'date',\n         'name'               => _n('Date', 'Dates', 1),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '6',\n         'table'              => $this->getTable(),\n         'field'              => 'name',\n         'name'               => __('Subject'),\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '7',\n         'table'              => $this->getTable(),\n         'field'              => 'answer',\n         'name'               => __('Content'),\n         'datatype'           => 'text',\n         'htmltext'           => true\n      ];\n\n      $tab[] = [\n         'id'                 => '8',\n         'table'              => $this->getTable(),\n         'field'              => 'is_faq',\n         'name'               => __('FAQ item'),\n         'datatype'           => 'bool'\n      ];\n\n      $tab[] = [\n         'id'                 => '9',\n         'table'              => $this->getTable(),\n         'field'              => 'view',\n         'name'               => _n('View', 'Views', Session::getPluralNumber()),\n         'datatype'           => 'integer',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '10',\n         'table'              => $this->getTable(),\n         'field'              => 'begin_date',\n         'name'               => __('Visibility start date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '11',\n         'table'              => $this->getTable(),\n         'field'              => 'end_date',\n         'name'               => __('Visibility end date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => $this->getTable(),\n         'field'              => 'date_mod',\n         'name'               => __('Last update'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '70',\n         'table'              => 'glpi_users',\n         'field'              => 'name',\n         'name'               => User::getTypeName(1),\n         'massiveaction'      => false,\n         'datatype'           => 'dropdown',\n         'right'              => 'all'\n      ];\n\n      // add objectlock search options\n      $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n      return $tab;\n   }\n\n   function getRights($interface = 'central') {\n\n      if ($interface == 'central') {\n         $values = parent::getRights();\n         $values[self::KNOWBASEADMIN] = __('Knowledge base administration');\n         $values[self::PUBLISHFAQ]    = __('Publish in the FAQ');\n         $values[self::COMMENTS]      = __('Comment KB entries');\n      }\n      $values[self::READFAQ]       = __('Read the FAQ');\n      return $values;\n   }\n\n   function pre_updateInDB() {\n      $revision = new KnowbaseItem_Revision();\n      $kb = new KnowbaseItem();\n      $kb->getFromDB($this->getID());\n      $revision->createNew($kb);\n   }\n\n   /**\n    * Get KB answer, with id on titles to set anchors\n    *\n    * @return string\n    */\n   public function getAnswer() {\n      if (KnowbaseItemTranslation::canBeTranslated($this)) {\n         $answer = KnowbaseItemTranslation::getTranslatedValue($this, 'answer');\n      } else {\n         $answer = $this->fields[\"answer\"];\n      }\n      $answer = html_entity_decode($answer);\n      $answer = Toolbox::unclean_html_cross_side_scripting_deep($answer);\n\n      $callback = function ($matches) {\n         //1 => tag name, 2 => existing attributes, 3 => title contents\n         $tpl = '<%tag%attrs id=\"%slug\"><a href=\"#%slug\">%icon</a>%title</%tag>';\n\n         $title = str_replace(\n            ['%tag', '%attrs', '%slug', '%title', '%icon'],\n            [\n               $matches[1],\n               $matches[2],\n               Toolbox::slugify($matches[3]),\n               $matches[3],\n               '<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg>'\n            ],\n            $tpl\n         );\n\n         return $title;\n      };\n      $pattern = '|<(h[1-6]{1})(.?[^>])?>(.+)</h[1-6]{1}>|';\n      $answer = preg_replace_callback($pattern, $callback, $answer);\n\n      return $answer;\n   }\n\n   /**\n    * Get dropdown parameters from showVisibility method\n    *\n    * @return array\n    */\n   protected function getShowVisibilityDropdownParams() {\n      $params = parent::getShowVisibilityDropdownParams();\n      $params['right'] = ($this->getField('is_faq') ? 'faq' : 'knowbase');\n      return $params;\n   }\n\n   /**\n    * Reverts item contents to specified revision\n    *\n    * @param integer $revid Revision ID\n    *\n    * @return boolean\n    */\n   public function revertTo($revid) {\n      $revision = new KnowbaseItem_Revision();\n      $revision->getFromDB($revid);\n\n      $values = [\n         'id'     => $this->getID(),\n         'name'   => addslashes($revision->fields['name']),\n         'answer' => addslashes($revision->fields['answer'])\n      ];\n\n      if ($this->update($values)) {\n         Event::log($this->getID(), \"knowbaseitem\", 5, \"tools\",\n                    //TRANS: %1$s is the user login, %2$s the revision number\n                    sprintf(__('%1$s reverts item to revision %2$s'), $_SESSION[\"glpiname\"], $revid));\n         return true;\n      } else {\n         return false;\n      }\n   }\n\n   /**\n    * Get ids of KBI in given category\n    *\n    * @param int           $category_id   id of the parent category\n    * @param KnowbaseItem  $kbi           used only for unit tests\n    *\n    * @return array        Array of ids\n    */\n   public static function getForCategory($category_id, $kbi = null) {\n      global $DB;\n\n      if ($kbi === null) {\n         $kbi = new self();\n      }\n\n      $ids = $DB->request([\n         'SELECT' => 'id',\n         'FROM'   => self::getTable(),\n         'WHERE'  => ['knowbaseitemcategories_id' => $category_id],\n      ]);\n\n      // Get array of ids\n      $ids = array_map(function($row){\n         return $row['id'];\n      }, iterator_to_array($ids, false));\n\n      // Filter on canViewItem\n      $ids = array_filter($ids, function($id) use ($kbi) {\n         $kbi->getFromDB($id);\n         return $kbi->canViewItem();\n      });\n\n      // Avoid empty IN\n      if (count($ids) === 0) {\n         $ids[] = -1;\n      }\n\n      return $ids;\n   }\n\n\n   static function getIcon() {\n      return \"fas fa-question\";\n   }\n}\n"], "fixing_code": ["<?php\n/**\n * ---------------------------------------------------------------------\n * GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2015-2020 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on GLPI - Gestionnaire Libre de Parc Informatique\n * Copyright (C) 2003-2014 by the INDEPNET Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * GLPI is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * GLPI is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with GLPI. If not, see <http://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Event;\n\nif (!defined('GLPI_ROOT')) {\n   die(\"Sorry. You can't access this file directly\");\n}\n\n/**\n * KnowbaseItem Class\n**/\nclass KnowbaseItem extends CommonDBVisible implements ExtraVisibilityCriteria {\n\n\n   // From CommonDBTM\n   public $dohistory    = true;\n\n   // For visibility checks\n   protected $users     = [];\n   protected $groups    = [];\n   protected $profiles  = [];\n   protected $entities  = [];\n   protected $items     = [];\n\n   const KNOWBASEADMIN = 1024;\n   const READFAQ       = 2048;\n   const PUBLISHFAQ    = 4096;\n   const COMMENTS      = 8192;\n\n   static $rightname   = 'knowbase';\n\n\n   static function getTypeName($nb = 0) {\n      return __('Knowledge base');\n   }\n\n\n   /**\n    * @see CommonGLPI::getMenuShorcut()\n    *\n    * @since 0.85\n   **/\n   static function getMenuShorcut() {\n      return 'b';\n   }\n\n\n   function getName($options = []) {\n      if (KnowbaseItemTranslation::canBeTranslated($this)) {\n         return KnowbaseItemTranslation::getTranslatedValue($this);\n      }\n\n      return parent::getName();\n   }\n\n\n   /**\n    * @see CommonGLPI::getMenuName()\n    *\n    * @since 0.85\n   **/\n   static function getMenuName() {\n      if (!Session::haveRight('knowbase', READ)) {\n         return __('FAQ');\n      } else {\n         return static::getTypeName(Session::getPluralNumber());\n      }\n   }\n\n\n   static function canCreate() {\n\n      return Session::haveRightsOr(self::$rightname, [CREATE, self::PUBLISHFAQ]);\n   }\n\n\n   /**\n    * @since 0.85\n   **/\n   static function canUpdate() {\n      return Session::haveRightsOr(self::$rightname, [UPDATE, self::KNOWBASEADMIN]);\n   }\n\n\n   static function canView() {\n      global $CFG_GLPI;\n\n      return (Session::haveRightsOr(self::$rightname, [READ, self::READFAQ])\n              || ((Session::getLoginUserID() === false) && $CFG_GLPI[\"use_public_faq\"]));\n   }\n\n\n   function canViewItem() {\n      if ($this->fields['users_id'] == Session::getLoginUserID()) {\n         return true;\n      }\n      if (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n         return true;\n      }\n\n      if ($this->fields[\"is_faq\"]) {\n         return ((Session::haveRightsOr(self::$rightname, [READ, self::READFAQ])\n                  && $this->haveVisibilityAccess())\n                 || ((Session::getLoginUserID() === false) && $this->isPubliclyVisible()));\n      }\n      return (Session::haveRight(self::$rightname, READ) && $this->haveVisibilityAccess());\n   }\n\n\n   function canUpdateItem() {\n      // Personal knowbase or visibility and write access\n      return (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)\n              || (Session::getCurrentInterface() == \"central\"\n                  && $this->fields['users_id'] == Session::getLoginUserID())\n              || ((($this->fields[\"is_faq\"] && Session::haveRight(self::$rightname, self::PUBLISHFAQ))\n                   || (!$this->fields[\"is_faq\"]\n                       && Session::haveRight(self::$rightname, UPDATE)))\n                  && $this->haveVisibilityAccess()));\n   }\n\n   /**\n    * Check if current user can comment on KB entries\n    *\n    * @return boolean\n    */\n   public function canComment() {\n      return $this->canViewItem() && Session::haveRight(self::$rightname, self::COMMENTS);\n   }\n\n   /**\n    * Get the search page URL for the current classe\n    *\n    * @since 0.84\n    *\n    * @param boolean $full  path or relative one\n   **/\n   static function getSearchURL($full = true) {\n      global $CFG_GLPI;\n\n      $dir = ($full ? $CFG_GLPI['root_doc'] : '');\n\n      if (Session::getCurrentInterface() == \"central\") {\n         return \"$dir/front/knowbaseitem.php\";\n      }\n      return \"$dir/front/helpdesk.faq.php\";\n   }\n\n   /**\n    * Get the form page URL for the current classe\n    *\n    * @param boolean $full  path or relative one\n   **/\n   static function getFormURL($full = true) {\n      global $CFG_GLPI;\n\n      $dir = ($full ? $CFG_GLPI['root_doc'] : '');\n\n      if (Session::getCurrentInterface() == \"central\") {\n         return \"$dir/front/knowbaseitem.form.php\";\n      }\n      return \"$dir/front/helpdesk.faq.php\";\n   }\n\n   function defineTabs($options = []) {\n\n      $ong = [];\n      $this->addStandardTab(__CLASS__, $ong, $options);\n      $this->addStandardTab('KnowbaseItem_Item', $ong, $options);\n      $this->addStandardTab('Document_Item', $ong, $options);\n\n      $this->addStandardTab('KnowbaseItemTranslation', $ong, $options);\n      $this->addStandardTab('Log', $ong, $options);\n      $this->addStandardTab('KnowbaseItem_Revision', $ong, $options);\n      $this->addStandardTab('KnowbaseItem_Comment', $ong, $options);\n\n      return $ong;\n   }\n\n\n   function getTabNameForItem(CommonGLPI $item, $withtemplate = 0) {\n\n      if (!$withtemplate) {\n         $nb = 0;\n         switch ($item->getType()) {\n            case __CLASS__ :\n               $ong[1] = $this->getTypeName(1);\n               if ($item->canUpdateItem()) {\n                  if ($_SESSION['glpishow_count_on_tabs']) {\n                     $nb = $item->countVisibilities();\n                  }\n                  $ong[2] = self::createTabEntry(_n('Target', 'Targets', Session::getPluralNumber()),\n                                                    $nb);\n                  $ong[3] = __('Edit');\n               }\n               return $ong;\n         }\n      }\n      return '';\n   }\n\n\n   static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0) {\n\n      if ($item->getType() == __CLASS__) {\n         switch ($tabnum) {\n            case 1 :\n               $item->showFull();\n               break;\n\n            case 2 :\n               $item->showVisibility();\n               break;\n\n            case 3 :\n               $item->showForm($item->getID());\n               break;\n         }\n      }\n      return true;\n   }\n\n\n   /**\n    * Actions done at the end of the getEmpty function\n    *\n    *@return void\n   **/\n   function post_getEmpty() {\n\n      if (Session::haveRight(self::$rightname, self::PUBLISHFAQ)\n          && !Session::haveRight(\"knowbase\", UPDATE)) {\n         $this->fields[\"is_faq\"] = 1;\n      }\n   }\n\n\n   /**\n    * @since 0.85\n    * @see CommonDBTM::post_addItem()\n   **/\n   function post_addItem() {\n\n      // add screenshots\n      $this->input = $this->addFiles(\n         $this->input, [\n            'force_update'  => true,\n            'content_field' => 'answer',\n            'name'          => 'answer',\n         ]\n      );\n\n      // Add documents\n      $this->input = $this->addFiles($this->input, ['force_update' => true]);\n\n      if (isset($this->input[\"_visibility\"])\n          && isset($this->input[\"_visibility\"]['_type'])\n          && !empty($this->input[\"_visibility\"][\"_type\"])) {\n\n         $this->input[\"_visibility\"]['knowbaseitems_id'] = $this->getID();\n         $item                                           = null;\n\n         switch ($this->input[\"_visibility\"]['_type']) {\n            case 'User' :\n               if (isset($this->input[\"_visibility\"]['users_id'])\n                   && $this->input[\"_visibility\"]['users_id']) {\n                  $item = new KnowbaseItem_User();\n               }\n               break;\n\n            case 'Group' :\n               if (isset($this->input[\"_visibility\"]['groups_id'])\n                   && $this->input[\"_visibility\"]['groups_id']) {\n                  $item = new Group_KnowbaseItem();\n               }\n               break;\n\n            case 'Profile' :\n               if (isset($this->input[\"_visibility\"]['profiles_id'])\n                   && $this->input[\"_visibility\"]['profiles_id']) {\n                  $item = new KnowbaseItem_Profile();\n               }\n               break;\n\n            case 'Entity' :\n               $item = new Entity_KnowbaseItem();\n               break;\n         }\n         if (!is_null($item)) {\n            $item->add($this->input[\"_visibility\"]);\n            Event::log($this->getID(), \"knowbaseitem\", 4, \"tools\",\n                     //TRANS: %s is the user login\n                     sprintf(__('%s adds a target'), $_SESSION[\"glpiname\"]));\n         }\n      }\n\n      if (isset($this->input['_do_item_link']) && $this->input['_do_item_link'] == 1) {\n         $params = [\n            'knowbaseitems_id' => $this->getID(),\n            'itemtype'         => $this->input['_itemtype'],\n            'items_id'         => $this->input['_items_id']\n         ];\n         $kb_item_item = new KnowbaseItem_Item();\n         $kb_item_item->add($params);\n      }\n   }\n\n\n   /**\n    * @since 0.83\n   **/\n   function post_getFromDB() {\n\n      // Users\n      $this->users    = KnowbaseItem_User::getUsers($this->fields['id']);\n\n      // Entities\n      $this->entities = Entity_KnowbaseItem::getEntities($this->fields['id']);\n\n      // Group / entities\n      $this->groups   = Group_KnowbaseItem::getGroups($this->fields['id']);\n\n      // Profile / entities\n      $this->profiles = KnowbaseItem_Profile::getProfiles($this->fields['id']);\n\n      //Linked kb items\n      $this->knowbase_items = KnowbaseItem_Item::getItems($this);\n   }\n\n\n   /**\n    * @see CommonDBTM::cleanDBonPurge()\n    *\n    * @since 0.83.1\n   **/\n   function cleanDBonPurge() {\n\n      $this->deleteChildrenAndRelationsFromDb(\n         [\n            Entity_KnowbaseItem::class,\n            Group_KnowbaseItem::class,\n            KnowbaseItem_Item::class,\n            KnowbaseItem_Profile::class,\n            KnowbaseItem_User::class,\n            KnowbaseItemTranslation::class,\n         ]\n      );\n\n      /// KnowbaseItem_Comment does not extends CommonDBConnexity\n      $kbic = new KnowbaseItem_Comment();\n      $kbic->deleteByCriteria(['knowbaseitems_id' => $this->fields['id']]);\n\n      /// KnowbaseItem_Revision does not extends CommonDBConnexity\n      $kbir = new KnowbaseItem_Revision();\n      $kbir->deleteByCriteria(['knowbaseitems_id' => $this->fields['id']]);\n   }\n\n   /**\n    * Check is this item if visible to everybody (anonymous users)\n    *\n    * @since 0.83\n    *\n    * @return Boolean\n   **/\n   function isPubliclyVisible() {\n      global $CFG_GLPI;\n\n      if (!$CFG_GLPI['use_public_faq']) {\n         return false;\n      }\n\n      if (isset($this->entities[0])) { // Browse root entity rights\n         foreach ($this->entities[0] as $entity) {\n            if ($entity['is_recursive']) {\n               return true;\n            }\n         }\n      }\n      return false;\n   }\n\n   public function haveVisibilityAccess() {\n      // No public knowbaseitem right : no visibility check\n      if (!Session::haveRightsOr(self::$rightname, [self::READFAQ, READ])) {\n         return false;\n      }\n\n      // KB Admin\n      if (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n         return true;\n      }\n\n      return parent::haveVisibilityAccess();\n   }\n\n   /**\n   * Return visibility joins to add to SQL\n   *\n   * @since 0.83\n   *\n   * @param boolean $forceall  force all joins\n   *\n   * @return string joins to add\n   **/\n   static function addVisibilityJoins($forceall = false) {\n      //not deprecated because used in self::getListRequest and self::showRecentPopular\n\n      global $DB;\n\n      //get and clean criteria\n      $criteria = self::getVisibilityCriteria($forceall);\n      unset($criteria['WHERE']);\n      $criteria['FROM'] = self::getTable();\n\n      $it = new \\DBmysqlIterator(null);\n      $it->buildQuery($criteria);\n      $sql = $it->getSql();\n      $sql = str_replace(\n         'SELECT * FROM '.$DB->quoteName(self::getTable()).'',\n         '',\n         $sql\n      );\n      return $sql;\n   }\n\n   /**\n    * Return visibility SQL restriction to add\n    *\n    * @since 0.83\n    *\n    * @return string restrict to add\n   **/\n   static function addVisibilityRestrict() {\n      //not deprecated because used in self::getListRequest and self::showRecentPopular\n\n      global $DB;\n\n      //get and clean criteria\n      $criteria = self::getVisibilityCriteria();\n      unset($criteria['LEFT JOIN']);\n      $criteria['FROM'] = self::getTable();\n\n      $it = new \\DBmysqlIterator(null);\n      $it->buildQuery($criteria);\n      $sql = $it->getSql();\n      $sql = str_replace(\n         'SELECT * FROM '.$DB->quoteName(self::getTable()).'',\n         '',\n         $sql\n      );\n      $sql = preg_replace('/.*WHERE /', '', $sql);\n\n      //No where restrictions. Add a placeholder for compatibility with later restrictions\n      if (strlen(trim($sql)) == 0) {\n         $sql = \"1\";\n      }\n      return $sql;\n   }\n\n   /**\n    * Return visibility joins to add to DBIterator parameters\n    *\n    * @since 9.2\n    *\n    * @param boolean $forceall force all joins (false by default)\n    *\n    * @return array\n    */\n   static public function getVisibilityCriteria(bool $forceall = false): array {\n      global $CFG_GLPI;\n\n      $is_public_faq_context = !Session::getLoginUserID() && $CFG_GLPI[\"use_public_faq\"];\n      $has_session_groups = isset($_SESSION[\"glpigroups\"]) && count($_SESSION[\"glpigroups\"]);\n      $has_active_profile = isset($_SESSION[\"glpiactiveprofile\"])\n         && isset($_SESSION[\"glpiactiveprofile\"]['id']);\n      $has_active_entity = isset($_SESSION[\"glpiactiveentities\"])\n         && count($_SESSION[\"glpiactiveentities\"]);\n\n      $where = [];\n      $join = [\n         'glpi_knowbaseitems_users' => [\n            'ON' => [\n               'glpi_knowbaseitems_users' => 'knowbaseitems_id',\n               'glpi_knowbaseitems'       => 'id'\n            ]\n         ]\n      ];\n      if ($forceall || $has_session_groups) {\n         $join['glpi_groups_knowbaseitems'] = [\n            'ON' => [\n               'glpi_groups_knowbaseitems' => 'knowbaseitems_id',\n               'glpi_knowbaseitems'       => 'id'\n            ]\n         ];\n      }\n      if ($forceall || $has_active_profile) {\n         $join['glpi_knowbaseitems_profiles'] = [\n            'ON' => [\n               'glpi_knowbaseitems_profiles' => 'knowbaseitems_id',\n               'glpi_knowbaseitems'       => 'id'\n            ]\n         ];\n      }\n      if ($forceall || $has_active_entity || $is_public_faq_context) {\n         $join['glpi_entities_knowbaseitems'] = [\n            'ON' => [\n               'glpi_entities_knowbaseitems' => 'knowbaseitems_id',\n               'glpi_knowbaseitems'       => 'id'\n            ]\n         ];\n      }\n\n      if (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n         return [\n            'LEFT JOIN' => $join,\n            'WHERE' => [],\n         ];\n      }\n\n      // Users\n      if (Session::getLoginUserID()) {\n         $where['OR'] = [\n               'glpi_knowbaseitems.users_id'       => Session::getLoginUserID(),\n               'glpi_knowbaseitems_users.users_id' => Session::getLoginUserID(),\n         ];\n\n         // public faq\n         if (!Session::haveRight(self::$rightname, READ)) {\n            $where['AND']['glpi_knowbaseitems.is_faq'] = 1;\n         }\n      } else if ($is_public_faq_context) {\n         $where = [\n            \"glpi_knowbaseitems.is_faq\" => 1,\n         ];\n         if (Session::isMultiEntitiesMode()) {\n            $where += [\n               \"glpi_entities_knowbaseitems.entities_id\" => 0,\n               \"glpi_entities_knowbaseitems.is_recursive\" => 1,\n            ];\n         }\n      } else {\n         $where = [\n            0\n         ];\n      }\n      // Groups\n      if ($forceall || $has_session_groups) {\n         if (Session::getLoginUserID()) {\n            $restrict = getEntitiesRestrictCriteria('glpi_groups_knowbaseitems', '', '', true, true);\n            $where['OR'][] = [\n               'glpi_groups_knowbaseitems.groups_id' => count($_SESSION[\"glpigroups\"])\n                                                         ? $_SESSION[\"glpigroups\"]\n                                                         : [-1],\n               'OR' => [\n                  'glpi_groups_knowbaseitems.entities_id' => ['<', '0'],\n               ] + $restrict\n            ];\n         }\n      }\n\n      // Profiles\n      if ($forceall || $has_active_profile) {\n         if (Session::getLoginUserID()) {\n            $where['OR'][] = [\n               'glpi_knowbaseitems_profiles.profiles_id' => $_SESSION[\"glpiactiveprofile\"]['id'],\n               'OR' => [\n                  'glpi_knowbaseitems_profiles.entities_id' => ['<', '0'],\n                  getEntitiesRestrictCriteria('glpi_knowbaseitems_profiles', '', '', true, true)\n               ]\n            ];\n         }\n      }\n\n      // Entities\n      if ($forceall || $has_active_entity) {\n         if (Session::getLoginUserID()) {\n            $restrict = getEntitiesRestrictCriteria('glpi_entities_knowbaseitems', '', '', true, true);\n            if (count($restrict)) {\n               $where['OR'] = $where['OR'] + $restrict;\n            } else {\n               $where['glpi_entities_knowbaseitems.entities_id'] = null;\n            }\n         }\n      }\n\n      $criteria = ['LEFT JOIN' => $join];\n      if (count($where)) {\n         $criteria['WHERE'] = $where;\n      }\n\n      return $criteria;\n   }\n\n   function prepareInputForAdd($input) {\n\n      // set new date if not exists\n      if (!isset($input[\"date\"]) || empty($input[\"date\"])) {\n         $input[\"date\"] = $_SESSION[\"glpi_currenttime\"];\n      }\n      // set users_id\n\n      // set title for question if empty\n      if (isset($input[\"name\"]) && empty($input[\"name\"])) {\n         $input[\"name\"] = __('New item');\n      }\n\n      if (Session::haveRight(self::$rightname, self::PUBLISHFAQ)\n          && !Session::haveRight(self::$rightname, UPDATE)) {\n         $input[\"is_faq\"] = 1;\n      }\n      if (!Session::haveRight(self::$rightname, self::PUBLISHFAQ)\n          && Session::haveRight(self::$rightname, UPDATE)) {\n         $input[\"is_faq\"] = 0;\n      }\n      return $input;\n   }\n\n\n   function prepareInputForUpdate($input) {\n      // set title for question if empty\n      if (isset($input[\"name\"]) && empty($input[\"name\"])) {\n         $input[\"name\"] = __('New item');\n      }\n      return $input;\n   }\n\n   function post_updateItem($history = 1) {\n      // Update screenshots\n      $this->input = $this->addFiles(\n         $this->input,\n         [\n            'force_update'  => true,\n            'content_field' => 'answer',\n            'name'          => 'answer',\n         ]\n      );\n\n      // add uploaded documents\n      $this->input = $this->addFiles(\n         $this->input,\n         [\n            'force_update'  => true,\n         ]\n      );\n   }\n\n\n   /**\n    * Print out an HTML \"<form>\" for knowbase item\n    *\n    * @param $ID\n    * @param $options array\n    *     - target for the Form\n    *\n    * @return void\n   **/\n   function showForm($ID, $options = []) {\n      global $CFG_GLPI;\n\n      // show kb item form\n      if (!Session::haveRightsOr(self::$rightname,\n                                 [UPDATE, self::PUBLISHFAQ, self::KNOWBASEADMIN])) {\n         return false;\n      }\n\n      $canedit = $this->can($ID, UPDATE);\n\n      $item = null;\n      // Load ticket solution\n      if (empty($ID)\n          && isset($options['item_itemtype']) && !empty($options['item_itemtype'])\n          && isset($options['item_items_id']) && !empty($options['item_items_id'])) {\n\n         if ($item = getItemForItemtype($options['item_itemtype'])) {\n            if ($item->getFromDB($options['item_items_id'])) {\n               $this->fields['name']   = $item->getField('name');\n               $solution = new ITILSolution();\n               $solution->getFromDBByCrit([\n                  'itemtype'     => $item->getType(),\n                  'items_id'     => $item->getID(),\n                  [\n                     'NOT' => ['status'       => CommonITILValidation::REFUSED]\n                  ]\n               ]);\n               $this->fields['answer'] = $solution->getField('content');\n               if ($item->isField('itilcategories_id')) {\n                  $ic = new ITILCategory();\n                  if ($ic->getFromDB($item->getField('itilcategories_id'))) {\n                     $this->fields['knowbaseitemcategories_id']\n                           = $ic->getField('knowbaseitemcategories_id');\n                  }\n               }\n            }\n         }\n      }\n      $rand = mt_rand();\n\n      $this->initForm($ID, $options);\n      $options['formoptions'] = \"data-track-changes=true\";\n      $this->showFormHeader($options);\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Category name').\"</td>\";\n      echo \"<td>\";\n      echo \"<input type='hidden' name='users_id' value=\\\"\".Session::getLoginUserID().\"\\\">\";\n      KnowbaseItemCategory::dropdown(['value' => $this->fields[\"knowbaseitemcategories_id\"]]);\n      echo \"</td>\";\n      echo \"<td>\";\n      if ($this->fields[\"date\"]) {\n         //TRANS: %s is the datetime of insertion\n         printf(__('Created on %s'), Html::convDateTime($this->fields[\"date\"]));\n      }\n      echo \"</td><td>\";\n      if ($this->fields[\"date_mod\"]) {\n         //TRANS: %s is the datetime of update\n         printf(__('Last update on %s'), Html::convDateTime($this->fields[\"date_mod\"]));\n      }\n      echo \"</td>\";\n      echo \"</tr>\\n\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      if (Session::haveRight(self::$rightname, self::PUBLISHFAQ)) {\n         echo \"<td>\".__('Put this item in the FAQ').\"</td>\";\n         echo \"<td>\";\n         Dropdown::showYesNo('is_faq', $this->fields[\"is_faq\"]);\n         echo \"</td>\";\n      } else {\n         echo \"<td colspan='2'>\";\n         if ($this->fields[\"is_faq\"]) {\n            echo __('This item is part of the FAQ');\n         } else {\n            echo __('This item is not part of the FAQ');\n         }\n         echo \"</td>\";\n      }\n      echo \"<td>\";\n      $showuserlink = 0;\n      if (Session::haveRight('user', READ)) {\n         $showuserlink = 1;\n      }\n      if ($this->fields[\"users_id\"]) {\n         //TRANS: %s is the writer name\n         printf(__('%1$s: %2$s'), __('Writer'), getUserName($this->fields[\"users_id\"],\n                                                            $showuserlink));\n      }\n      echo \"</td><td>\";\n      //TRANS: %d is the number of view\n      if ($ID) {\n         printf(_n('%d view', '%d views', $this->fields[\"view\"]), $this->fields[\"view\"]);\n      }\n      echo \"</td>\";\n      echo \"</tr>\\n\";\n\n      //Link with solution\n      if ($item != null) {\n\n         if ($item = getItemForItemtype($options['item_itemtype'])) {\n            if ($item->getFromDB($options['item_items_id'])) {\n               echo \"<tr>\";\n               echo \"<td>\".__('Add link').\"</td>\";\n               echo \"<td colspan='3'>\";\n               echo \"<input type='checkbox' name='_do_item_link' value='1' checked='checked'/> \";\n               echo Html::hidden('_itemtype', ['value' => $item->getType()]);\n               echo Html::hidden('_items_id', ['value' => $item->getID()]);\n               echo sprintf(\n                  __('link with %1$s'),\n                  $item->getLink()\n               );\n               echo \"</td>\";\n               echo \"</tr>\\n\";\n            }\n         }\n      }\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Visible since').\"</td><td>\";\n      Html::showDateTimeField(\"begin_date\", ['value'       => $this->fields[\"begin_date\"],\n                                                  'maybeempty' => true,\n                                                  'canedit'    => $canedit]);\n      echo \"</td>\";\n      echo \"<td>\".__('Visible until').\"</td><td>\";\n      Html::showDateTimeField(\"end_date\", ['value'       => $this->fields[\"end_date\"],\n                                                'maybeempty' => true,\n                                                'canedit'    => $canedit]);\n      echo \"</td></tr>\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Subject').\"</td>\";\n      echo \"<td colspan='3'>\";\n      echo \"<textarea cols='100' rows='1' name='name'>\".$this->fields[\"name\"].\"</textarea>\";\n      echo \"</td>\";\n      echo \"</tr>\\n\";\n\n      echo \"<tr class='tab_bg_1'>\";\n      echo \"<td>\".__('Content').\"</td>\";\n      echo \"<td colspan='3'>\";\n\n      $cols = 100;\n      $rows = 30;\n      if (isset($options['_in_modal']) && $options['_in_modal']) {\n         $rows = 15;\n         echo Html::hidden('_in_modal', ['value' => 1]);\n      }\n      Html::textarea(['name'              => 'answer',\n                      'value'             => $this->fields[\"answer\"],\n                      'enable_fileupload' => true,\n                      'enable_richtext'   => true,\n                      'cols'              => $cols,\n                      'rows'              => $rows]);\n      echo \"</td>\";\n      echo \"</tr>\";\n\n      if ($this->isNewID($ID)) {\n         echo \"<tr class='tab_bg_1'>\";\n         echo \"<td>\"._n('Target', 'Targets', 1).\"</td>\";\n         echo \"<td>\";\n         $types   = ['Entity', 'Group', 'Profile', 'User'];\n         $addrand = Dropdown::showItemTypes('_visibility[_type]', $types);\n         echo \"</td><td colspan='2'>\";\n         $params  = ['type'     => '__VALUE__',\n                          'right'    => 'knowbase',\n                          'prefix'   => '_visibility',\n                          'nobutton' => 1];\n\n         Ajax::updateItemOnSelectEvent(\"dropdown__visibility__type_\".$addrand, \"visibility$rand\",\n                                       $CFG_GLPI[\"root_doc\"].\"/ajax/visibility.php\",\n                                       $params);\n         echo \"<span id='visibility$rand'></span>\";\n         echo \"</td></tr>\\n\";\n      }\n\n      $this->showFormButtons($options);\n      return true;\n   } // function showForm\n\n\n   /**\n    * Add kb item to the public FAQ\n    *\n    * @return void\n   **/\n   function addToFaq() {\n      global $DB;\n\n      $DB->update(\n         $this->getTable(), [\n            'is_faq' => 1\n         ], [\n            'id' => $this->fields['id']\n         ]\n      );\n   }\n\n   /**\n    * Increase the view counter of the current knowbaseitem\n    *\n    * @since 0.83\n    */\n   function updateCounter() {\n      global $DB;\n\n      //update counter view\n      $DB->update(\n         'glpi_knowbaseitems', [\n            'view'   => new \\QueryExpression($DB->quoteName('view') . ' + 1')\n         ], [\n            'id' => $this->getID()\n         ]\n      );\n   }\n\n\n   /**\n    * Print out (html) show item : question and answer\n    *\n    * @param $options      array of options\n    *\n    * @return void|string\n    *    void if option display=true\n    *    string if option display=false (HTML code)\n   **/\n   function showFull($options = []) {\n      global $CFG_GLPI;\n\n      if (!$this->can($this->fields['id'], READ)) {\n         return false;\n      }\n\n      $default_options = [\n         'display' => true,\n      ];\n      $options = array_merge($default_options, $options);\n\n      $out = \"\";\n\n      $linkusers_id = true;\n      // show item : question and answer\n      if (((Session::getLoginUserID() === false) && $CFG_GLPI[\"use_public_faq\"])\n          || (Session::getCurrentInterface() == \"helpdesk\")\n          || !User::canView()) {\n         $linkusers_id = false;\n      }\n\n      $this->updateCounter();\n\n      $knowbaseitemcategories_id = $this->fields[\"knowbaseitemcategories_id\"];\n      $fullcategoryname          = getTreeValueCompleteName(\"glpi_knowbaseitemcategories\",\n                                                            $knowbaseitemcategories_id);\n\n      $tmp = \"<a href='\".$this->getSearchURL().\n             \"?knowbaseitemcategories_id=$knowbaseitemcategories_id&forcetab=Knowbase$2'>\".\n             $fullcategoryname.\"</a>\";\n      $out.= \"<table class='tab_cadre_fixe'>\";\n      $out.= \"<tr><th colspan='4'>\".sprintf(__('%1$s: %2$s'), __('Category'), $tmp);\n      $out.= \"</th></tr>\";\n\n      $out.= \"<tr><td class='left' colspan='4'><h2>\".__('Subject').\"</h2>\";\n      if (KnowbaseItemTranslation::canBeTranslated($this)) {\n         $out.= KnowbaseItemTranslation::getTranslatedValue($this, 'name');\n      } else {\n         $out.= $this->fields[\"name\"];\n      }\n\n      $out.= \"</td></tr>\";\n      $out.= \"<tr><td class='left' colspan='4'><h2>\".__('Content').\"</h2>\\n\";\n\n      $out.= \"<div id='kbanswer'>\";\n      $out.= $this->getAnswer();\n      $out.= \"</div>\";\n      $out.= \"</td></tr>\";\n\n      $out.= \"<tr><th class='tdkb'  colspan='2'>\";\n      if ($this->fields[\"users_id\"]) {\n         // Integer because true may be 2 and getUserName return array\n         if ($linkusers_id) {\n            $linkusers_id = 1;\n         } else {\n            $linkusers_id = 0;\n         }\n\n         $out.= sprintf(__('%1$s: %2$s'), __('Writer'), getUserName($this->fields[\"users_id\"],\n                $linkusers_id));\n         $out.= \"<br>\";\n      }\n\n      if ($this->fields[\"date\"]) {\n         //TRANS: %s is the datetime of update\n         $out.= sprintf(__('Created on %s'), Html::convDateTime($this->fields[\"date\"]));\n         $out.= \"<br>\";\n      }\n      if ($this->fields[\"date_mod\"]) {\n         //TRANS: %s is the datetime of update\n         $out.= sprintf(__('Last update on %s'), Html::convDateTime($this->fields[\"date_mod\"]));\n      }\n\n      $out.= \"</th>\";\n      $out.= \"<th class='tdkb' colspan='2'>\";\n      if ($this->countVisibilities() == 0) {\n         $out.= \"<span class='red'>\".__('Unpublished').\"</span><br>\";\n      }\n\n      $out.= sprintf(_n('%d view', '%d views', $this->fields[\"view\"]), $this->fields[\"view\"]);\n      $out.= \"<br>\";\n      if ($this->fields[\"is_faq\"]) {\n         $out.= __('This item is part of the FAQ');\n      } else {\n         $out.= __('This item is not part of the FAQ');\n      }\n      $out.= \"</th></tr>\";\n      $out.= \"</table>\";\n\n      if ($options['display']) {\n         echo $out;\n      } else {\n         return $out;\n      }\n\n      return true;\n   }\n\n\n   /**\n    * Print out an HTML form for Search knowbase item\n    *\n    * @param $options   $_GET\n    *\n    * @return void\n   **/\n   function searchForm($options) {\n      global $CFG_GLPI;\n\n      if (!$CFG_GLPI[\"use_public_faq\"]\n          && !Session::haveRightsOr(self::$rightname, [READ, self::READFAQ])) {\n         return false;\n      }\n\n      // Default values of parameters\n      $params[\"contains\"]                  = \"\";\n      $params[\"target\"]                    = $_SERVER['PHP_SELF'];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      echo \"<div>\";\n      echo \"<form method='get' action='\".$this->getSearchURL().\"'>\";\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr class='tab_bg_2'><td class='right' width='50%'>\";\n      echo \"<input type='text' size='50' name='contains' value=\\\"\".\n             Html::cleanInputText(stripslashes($params[\"contains\"])).\"\\\"></td>\";\n      echo \"<td class='left'>\";\n      echo \"<input type='submit' value=\\\"\"._sx('button', 'Search').\"\\\" class='submit'></td></tr>\";\n      echo \"</table>\";\n      if (isset($options['item_itemtype'])\n          && isset($options['item_items_id'])) {\n         echo \"<input type='hidden' name='item_itemtype' value='\".$options['item_itemtype'].\"'>\";\n         echo \"<input type='hidden' name='item_items_id' value='\".$options['item_items_id'].\"'>\";\n      }\n      Html::closeForm();\n\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Print out an HTML \"<form>\" for Search knowbase item\n    *\n    * @since 0.84\n    *\n    * @param $options   $_GET\n    *\n    * @return void\n   **/\n   function showBrowseForm($options) {\n      global $CFG_GLPI;\n\n      if (!$CFG_GLPI[\"use_public_faq\"]\n          && !Session::haveRightsOr(self::$rightname, [READ, self::READFAQ])) {\n         return false;\n      }\n\n      // Default values of parameters\n      $params[\"knowbaseitemcategories_id\"] = \"\";\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n      $faq = !Session::haveRight(self::$rightname, READ);\n\n      // Category select not for anonymous FAQ\n      if (Session::getLoginUserID()\n          && !$faq) {\n         echo \"<div>\";\n         echo \"<form method='get' action='\".$this->getSearchURL().\"'>\";\n         echo \"<table class='tab_cadre_fixe'>\";\n         echo \"<tr class='tab_bg_2'><td class='right' width='50%'>\".__('Category').\"&nbsp;\";\n         KnowbaseItemCategory::dropdown(['value' => $params[\"knowbaseitemcategories_id\"]]);\n         echo \"</td><td class='left'>\";\n         echo \"<input type='submit' value=\\\"\"._sx('button', 'Post').\"\\\" class='submit'></td>\";\n         echo \"</tr></table>\";\n         if (isset($options['item_itemtype'])\n             && isset($options['item_items_id'])) {\n            echo \"<input type='hidden' name='item_itemtype' value='\".$options['item_itemtype'].\"'>\";\n            echo \"<input type='hidden' name='item_items_id' value='\".$options['item_items_id'].\"'>\";\n         }\n         Html::closeForm();\n         echo \"</div>\";\n      }\n   }\n\n\n   /**\n    * Print out an HTML form for Search knowbase item\n    *\n    * @since 0.84\n    *\n    * @param $options   $_GET\n    *\n    * @return void\n   **/\n   function showManageForm($options) {\n      if (!Session::haveRightsOr(self::$rightname,\n                                 [UPDATE, self::PUBLISHFAQ, self::KNOWBASEADMIN])) {\n         return false;\n      }\n      $params['unpublished'] = 'my';\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n\n      echo \"<div>\";\n      echo \"<form method='get' action='\".$this->getSearchURL().\"'>\";\n      echo \"<table class='tab_cadre_fixe'>\";\n      echo \"<tr class='tab_bg_2'><td class='right' width='50%'>\";\n      $values = ['myunpublished' => __('My unpublished articles'),\n                      'allmy'         => __('All my articles')];\n      if (Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n         $values['allunpublished'] = __('All unpublished articles');\n         $values['allpublished'] = __('All published articles');\n      }\n      Dropdown::showFromArray('unpublished', $values, ['value' => $params['unpublished']]);\n      echo \"</td><td class='left'>\";\n      echo \"<input type='submit' value=\\\"\"._sx('button', 'Post').\"\\\" class='submit'></td>\";\n      echo \"</tr></table>\";\n      Html::closeForm();\n      echo \"</div>\";\n   }\n\n\n   /**\n    * Build request for showList\n    *\n    * @since 0.83\n    *\n    * @param $params array  (contains, knowbaseitemcategories_id, faq)\n    * @param $type   string search type : browse / search (default search)\n    *\n    * @return String : SQL request\n   **/\n   static function getListRequest(array $params, $type = 'search') {\n      global $DB;\n\n      $criteria = [\n         'SELECT' => [\n            'glpi_knowbaseitems.*',\n            'glpi_knowbaseitemcategories.completename AS category',\n            new QueryExpression(\n               'COUNT(' . $DB->quoteName('glpi_knowbaseitems_users.id') . ')' .\n                  ' + COUNT(' . $DB->quoteName('glpi_groups_knowbaseitems.id') . ')' .\n                  ' + COUNT(' . $DB->quoteName('glpi_knowbaseitems_profiles.id') . ')' .\n                  ' + COUNT(' . $DB->quoteName('glpi_entities_knowbaseitems.id') .') AS ' .\n                  $DB->quoteName('visibility_count')\n            )\n         ],\n         'FROM'   => 'glpi_knowbaseitems',\n         'WHERE'     => [], //to be filled\n         'LEFT JOIN' => [], //to be filled\n         'GROUPBY'   => ['glpi_knowbaseitems.id', 'glpi_knowbaseitemcategories.completename']\n      ];\n\n      // Lists kb Items\n      $restrict = self::getVisibilityCriteria(true);\n      $restrict_where = $restrict['WHERE'];\n      unset($restrict['WHERE']);\n      unset($restrict['SELECT']);\n      $criteria = array_merge_recursive($criteria, $restrict);\n\n      switch ($type) {\n         case 'myunpublished':\n         case 'allmy':\n         case 'allunpublished':\n            break;\n\n         default:\n            // Build query\n            if (Session::getLoginUserID()) {\n               $criteria['WHERE'] = array_merge(\n                  $criteria['WHERE'],\n                  $restrict_where\n               );\n            } else {\n               // Anonymous access\n               if (Session::isMultiEntitiesMode()) {\n                  $criteria['WHERE']['glpi_entities_knowbaseitems.entities_id'] = 0;\n                  $criteria['WHERE']['glpi_entities_knowbaseitems.is_recursive'] = 1;\n               }\n            }\n            break;\n      }\n\n      if ($params['faq']) { // helpdesk\n         $criteria['WHERE']['glpi_knowbaseitems.is_faq'] = 1;\n      }\n\n      if (KnowbaseItemTranslation::isKbTranslationActive()\n          && (countElementsInTable('glpi_knowbaseitemtranslations') > 0)) {\n         $criteria['LEFT JOIN']['glpi_knowbaseitemtranslations'] = [\n            'ON'  => [\n               'glpi_knowbaseitems'             => 'id',\n               'glpi_knowbaseitemtranslations'  => 'knowbaseitems_id', [\n                  'AND'                            => [\n                     'glpi_knowbaseitemtranslations.language' => $_SESSION['glpilanguage']\n                  ]\n               ]\n            ]\n         ];\n         $criteria['SELECT'][] = 'glpi_knowbaseitemtranslations.name AS transname';\n         $criteria['SELECT'][] = 'glpi_knowbaseitemtranslations.answer AS transanswer';\n      }\n\n      // a search with $contains\n      switch ($type) {\n         case 'allmy' :\n            $criteria['WHERE']['glpi_knowbaseitems.users_id'] = Session::getLoginUserID();\n            break;\n\n         case 'myunpublished' :\n            $criteria['WHERE']['glpi_knowbaseitems.users_id'] = Session::getLoginUserID();\n            $criteria['WHERE']['glpi_entities_knowbaseitems.entities_id'] = null;\n            $criteria['WHERE']['glpi_knowbaseitems_profiles.profiles_id'] = null;\n            $criteria['WHERE']['glpi_groups_knowbaseitems.groups_id'] = null;\n            $criteria['WHERE']['glpi_knowbaseitems_users.users_id'] = null;\n            break;\n\n         case 'allunpublished' :\n            // Only published\n            $criteria['WHERE']['glpi_entities_knowbaseitems.entities_id'] = null;\n            $criteria['WHERE']['glpi_knowbaseitems_profiles.profiles_id'] = null;\n            $criteria['WHERE']['glpi_groups_knowbaseitems.groups_id'] = null;\n            $criteria['WHERE']['glpi_knowbaseitems_users.users_id'] = null;\n            break;\n\n         case 'search' :\n            if (strlen($params[\"contains\"]) > 0) {\n               $search  = Toolbox::unclean_cross_side_scripting_deep($params[\"contains\"]);\n               $search_wilcard = explode(' ', $search);\n               $search_wilcard = implode('* ', $search_wilcard).'*';\n\n               $addscore = [];\n               if (KnowbaseItemTranslation::isKbTranslationActive()\n                   && (countElementsInTable('glpi_knowbaseitemtranslations') > 0)) {\n                  $addscore = [\n                     'glpi_knowbaseitemtranslations.name',\n                     'glpi_knowbaseitemtranslations.answer'\n                  ];\n               }\n\n               $expr = \"(MATCH(\" . $DB->quoteName('glpi_knowbaseitems.name') . \", \" . $DB->quoteName('glpi_knowbaseitems.answer') . \")\n                           AGAINST(\" . $DB->quote($search_wilcard) . \" IN BOOLEAN MODE)\";\n\n               if (!empty($addscore)) {\n                  foreach ($addscore as $addscore_field) {\n                     $expr .= \" + MATCH(\" . $DB->quoteName($addscore_field) . \")\n                                        AGAINST(\" . $DB->quote($search_wilcard) . \" IN BOOLEAN MODE)\";\n                  }\n               }\n               $expr .=\" ) AS SCORE \";\n               $criteria['SELECT'][] = new QueryExpression($expr);\n\n               $ors = [\n                  new QueryExpression(\n                     \"MATCH(\" . $DB->quoteName('glpi_knowbaseitems.name') .\",\n                        \" . $DB->quoteName('glpi_knowbaseitems.answer') .\")\n                        AGAINST(\" . $DB->quote($search_wilcard) . \" IN BOOLEAN MODE)\"\n                  )\n               ];\n\n               if (!empty($addscore)) {\n                  foreach ($addscore as $addscore_field) {\n                     $ors[] = [\n                        'NOT' => [$addscore_field => null],\n                        new QueryExpression(\n                           \"MATCH(\" . $DB->quoteName($addscore_field) . \")\n                              AGAINST(\" . $DB->quote($search_wilcard) . \" IN BOOLEAN MODE)\"\n                        )\n                     ];\n                  }\n\n               }\n\n               $search_where =  $criteria['WHERE']; // Visibility restrict criteria\n\n               $search_where[] = ['OR' => $ors];\n\n               // Add visibility date\n               $visibility_crit = [\n                  [\n                     'OR'  => [\n                        ['glpi_knowbaseitems.begin_date'  => null],\n                        ['glpi_knowbaseitems.begin_date'  => ['<', new QueryExpression('NOW()')]]\n                     ]\n                  ], [\n                     'OR'  => [\n                        ['glpi_knowbaseitems.end_date'    => null],\n                        ['glpi_knowbaseitems.end_date'    => ['>', new QueryExpression('NOW()')]]\n                     ]\n                  ]\n               ];\n               $search_where[] = $visibility_crit;\n\n               $criteria['ORDERBY'] = ['SCORE DESC'];\n\n               // preliminar query to allow alternate search if no result with fulltext\n               $search_criteria = [\n                  'COUNT'     => 'cpt',\n                  'LEFT JOIN' => $criteria['LEFT JOIN'],\n                  'FROM'      => 'glpi_knowbaseitems',\n                  'WHERE'     => $search_where\n               ];\n               $search_iterator = $DB->request($search_criteria);\n               $numrows_search = $search_iterator->next()['cpt'];\n\n               if ($numrows_search <= 0) {// not result this fulltext try with alternate search\n                  $search1 = [/* 1 */   '/\\\\\\\"/',\n                                   /* 2 */   \"/\\+/\",\n                                   /* 3 */   \"/\\*/\",\n                                   /* 4 */   \"/~/\",\n                                   /* 5 */   \"/</\",\n                                   /* 6 */   \"/>/\",\n                                   /* 7 */   \"/\\(/\",\n                                   /* 8 */   \"/\\)/\",\n                                   /* 9 */   \"/\\-/\"];\n                  $contains = preg_replace($search1, \"\", $params[\"contains\"]);\n                  $ors = [\n                     [\"glpi_knowbaseitems.name\"     => ['LIKE', Search::makeTextSearchValue($contains)]],\n                     [\"glpi_knowbaseitems.answer\"   => ['LIKE', Search::makeTextSearchValue($contains)]]\n                  ];\n                  if (KnowbaseItemTranslation::isKbTranslationActive()\n                      && (countElementsInTable('glpi_knowbaseitemtranslations') > 0)) {\n                     $ors[] = [\"glpi_knowbaseitemtranslations.name\"   => ['LIKE', Search::makeTextSearchValue($contains)]];\n                     $ors[] = [\"glpi_knowbaseitemtranslations.answer\" => ['LIKE', Search::makeTextSearchValue($contains)]];\n                  }\n                  $criteria['WHERE'][] = ['OR' => $ors];\n                  // Add visibility date\n                  $criteria['WHERE'][] = $visibility_crit;\n               } else {\n                  $criteria['WHERE'] = $search_where;\n               }\n            }\n            break;\n\n         case 'browse' :\n            $criteria['WHERE']['glpi_knowbaseitems.knowbaseitemcategories_id'] = $params['knowbaseitemcategories_id'];\n\n            if (!Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n               // Add visibility date\n               $criteria['WHERE'][] = [\n                  'OR'  => [\n                     ['glpi_knowbaseitems.begin_date' => null],\n                     ['glpi_knowbaseitems.begin_date' => ['<', new QueryExpression('NOW()')]]\n                  ]\n               ];\n               $criteria['WHERE'][] = [\n                  'OR'  => [\n                     ['glpi_knowbaseitems.end_date' => null],\n                     ['glpi_knowbaseitems.end_date' => ['>', new QueryExpression('NOW()')]]\n                  ]\n               ];\n            }\n\n            $criteria['ORDERBY'] = ['glpi_knowbaseitems.name ASC'];\n            break;\n      }\n\n      $criteria['LEFT JOIN']['glpi_knowbaseitemcategories'] = [\n         'ON'  => [\n            'glpi_knowbaseitemcategories' => 'id',\n            'glpi_knowbaseitems'          => 'knowbaseitemcategories_id'\n         ]\n      ];\n\n      return $criteria;\n   }\n\n\n   /**\n    * Print out list kb item\n    *\n    * @param $options            $_GET\n    * @param $type      string   search type : browse / search (default search)\n   **/\n   static function showList($options, $type = 'search') {\n      global $CFG_GLPI;\n\n      $DBread = DBConnection::getReadConnection();\n\n      // Default values of parameters\n      $params['faq']                       = !Session::haveRight(self::$rightname, READ);\n      $params[\"start\"]                     = \"0\";\n      $params[\"knowbaseitemcategories_id\"] = \"0\";\n      $params[\"contains\"]                  = \"\";\n      $params[\"target\"]                    = $_SERVER['PHP_SELF'];\n\n      if (is_array($options) && count($options)) {\n         foreach ($options as $key => $val) {\n            $params[$key] = $val;\n         }\n      }\n      $ki = new self();\n      switch ($type) {\n         case 'myunpublished' :\n            if (!Session::haveRightsOr(self::$rightname, [UPDATE, self::PUBLISHFAQ])) {\n               return false;\n            }\n            break;\n\n         case 'allunpublished' :\n            if (!Session::haveRight(self::$rightname, self::KNOWBASEADMIN)) {\n               return false;\n            }\n            break;\n\n         default :\n            break;\n      }\n\n      if (!$params[\"start\"]) {\n         $params[\"start\"] = 0;\n      }\n\n      $criteria = self::getListRequest($params, $type);\n\n      $main_iterator = $DBread->request($criteria);\n      $rows = count($main_iterator);\n      $numrows = $rows;\n\n      // Get it from database\n      $KbCategory = new KnowbaseItemCategory();\n      $title      = \"\";\n      if ($KbCategory->getFromDB($params[\"knowbaseitemcategories_id\"])) {\n         $title = (empty($KbCategory->fields['name']) ?\"(\".$params['knowbaseitemcategories_id'].\")\"\n                                                      : $KbCategory->fields['name']);\n         $title = sprintf(__('%1$s: %2$s'), __('Category'), $title);\n      }\n\n      Session::initNavigateListItems('KnowbaseItem', $title);\n      // force using getSearchUrl on list icon (when viewing a single article)\n      $_SESSION['glpilisturl']['KnowbaseItem'] = '';\n\n      $list_limit = $_SESSION['glpilist_limit'];\n\n      $showwriter = in_array($type, ['myunpublished', 'allunpublished', 'allmy']);\n\n      // Limit the result, if no limit applies, use prior result\n      if (($rows > $list_limit)\n         && !isset($_GET['export_all'])) {\n         $criteria['START'] = (int)$params['start'];\n         $criteria['LIMIT'] = (int)$list_limit;\n         $main_iterator = $DBread->request($criteria);\n         $numrows = count($main_iterator);\n      }\n\n      if ($numrows > 0) {\n         // Set display type for export if define\n         $output_type = Search::HTML_OUTPUT;\n\n         if (isset($_GET[\"display_type\"])) {\n            $output_type = $_GET[\"display_type\"];\n         }\n\n         // Pager\n         $parameters = \"start=\".$params[\"start\"].\"&amp;knowbaseitemcategories_id=\".\n                        $params['knowbaseitemcategories_id'].\"&amp;contains=\".\n                        $params[\"contains\"].\"&amp;is_faq=\".$params['faq'];\n\n         if (isset($options['item_itemtype'])\n               && isset($options['item_items_id'])) {\n            $parameters .= \"&amp;item_items_id=\".$options['item_items_id'].\"&amp;item_itemtype=\".\n                              $options['item_itemtype'];\n         }\n\n         $pager_url = \"\";\n         if ($output_type == Search::HTML_OUTPUT) {\n            $pager_url = Toolbox::getItemTypeSearchURL('KnowbaseItem');\n            if (!Session::getLoginUserID()) {\n               $pager_url = $CFG_GLPI['root_doc'].\"/front/helpdesk.faq.php\";\n            }\n            Html::printPager($params['start'], $rows, $pager_url, $parameters, 'KnowbaseItem');\n         }\n\n         $nbcols = 1;\n         // Display List Header\n         echo Search::showHeader($output_type, $numrows+1, $nbcols);\n\n         echo Search::showNewLine($output_type);\n         $header_num = 1;\n         echo Search::showHeaderItem($output_type, __('Subject'), $header_num);\n\n         if ($output_type != Search::HTML_OUTPUT) {\n            echo Search::showHeaderItem($output_type, __('Content'), $header_num);\n         }\n\n         if ($showwriter) {\n            echo Search::showHeaderItem($output_type, __('Writer'), $header_num);\n         }\n         echo Search::showHeaderItem($output_type, __('Category'), $header_num);\n\n         if ($output_type == Search::HTML_OUTPUT) {\n            echo Search::showHeaderItem($output_type, _n('Associated element', 'Associated elements', Session::getPluralNumber()), $header_num);\n         }\n\n         if (isset($options['item_itemtype'])\n               && isset($options['item_items_id'])\n               && ($output_type == Search::HTML_OUTPUT)) {\n            echo Search::showHeaderItem($output_type, '&nbsp;', $header_num);\n         }\n\n         // Num of the row (1=header_line)\n         $row_num = 1;\n         while ($data = $main_iterator->next()) {\n            Session::addToNavigateListItems('KnowbaseItem', $data[\"id\"]);\n            // Column num\n            $item_num = 1;\n            echo Search::showNewLine($output_type, ($row_num - 1)%2);\n            $row_num++;\n\n            $item = new self;\n            $item->getFromDB($data[\"id\"]);\n            $name   = $data[\"name\"];\n            $answer = $data[\"answer\"];\n            // Manage translations\n            if (isset($data['transname']) && !empty($data['transname'])) {\n               $name   = $data[\"transname\"];\n            }\n            if (isset($data['transanswer']) && !empty($data['transanswer'])) {\n               $answer = $data[\"transanswer\"];\n            }\n\n            if ($output_type == Search::HTML_OUTPUT) {\n               $toadd = '';\n               if (isset($options['item_itemtype'])\n                     && isset($options['item_items_id'])) {\n                  $href  = \" href='#' onClick=\\\"\".Html::jsGetElementbyID('kbshow'.$data[\"id\"]).\".dialog('open'); return false;\\\"\";\n                  $toadd = Ajax::createIframeModalWindow('kbshow'.$data[\"id\"],\n                                                         KnowbaseItem::getFormURLWithID($data[\"id\"]),\n                                                         ['display' => false]);\n               } else {\n                  $href = \" href=\\\"\".KnowbaseItem::getFormURLWithID($data[\"id\"]).\"\\\" \";\n               }\n\n               $fa_class = \"\";\n               $fa_title = \"\";\n               if ($data['is_faq']\n                     && (!Session::isMultiEntitiesMode()\n                        || isset($data['visibility_count'])\n                           && $data['visibility_count'] > 0)) {\n                  $fa_class = \"fa-question-circle faq\";\n                  $fa_title = __s(\"This item is part of the FAQ\");\n               } else if (isset($data['visibility_count'])\n                  && $data['visibility_count'] <= 0) {\n                  $fa_class = \"fa-eye-slash not-published\";\n                  $fa_title = __s(\"This item is not published yet\");\n               }\n               echo Search::showItem($output_type,\n                                       \"<div class='kb'>$toadd <i class='fa fa-fw $fa_class' title='$fa_title'></i> <a $href>\".Html::resume_text($name, 80).\"</a></div>\n                                       <div class='kb_resume'>\".\n                                       Html::resume_text(Html::clean(Toolbox::unclean_cross_side_scripting_deep($answer)),\n                                                         600).\"</div>\",\n                                       $item_num, $row_num);\n            } else {\n               echo Search::showItem($output_type, $name, $item_num, $row_num);\n               echo Search::showItem($output_type,\n                  Html::clean(Toolbox::unclean_cross_side_scripting_deep(html_entity_decode($answer,\n                                                                                             ENT_QUOTES,\n                                                                                             \"UTF-8\"))),\n                              $item_num, $row_num);\n            }\n\n            $showuserlink = 0;\n            if (Session::haveRight('user', READ)) {\n               $showuserlink = 1;\n            }\n            if ($showwriter) {\n               echo Search::showItem($output_type, getUserName($data[\"users_id\"], $showuserlink),\n                                          $item_num, $row_num);\n            }\n\n            $categ = $data[\"category\"];\n            $inst = new KnowbaseItemCategory;\n            if (DropdownTranslation::canBeTranslated($inst)) {\n               $tcateg = DropdownTranslation::getTranslatedValue(\n                  $data[\"knowbaseitemcategories_id\"],\n                  $inst->getType()\n               );\n               if (!empty($tcateg)) {\n                  $categ = $tcateg;\n               }\n            }\n\n            if ($output_type == Search::HTML_OUTPUT) {\n               $cathref = $ki->getSearchURL().\"?knowbaseitemcategories_id=\".\n                           $data[\"knowbaseitemcategories_id\"].'&amp;forcetab=Knowbase$2';\n               $categ   = \"<a class='kb-category'\"\n                  . \" href='$cathref'\"\n                  . \" data-category-id='\" . $data[\"knowbaseitemcategories_id\"] . \"'\"\n                  . \">\".$categ.'</a>';\n            }\n            echo Search::showItem($output_type, $categ, $item_num, $row_num);\n\n            if ($output_type == Search::HTML_OUTPUT) {\n               echo \"<td class='center'>\";\n               $j=0;\n               $iterator = $DBread->request([\n                  'FIELDS' => 'documents_id',\n                  'FROM'   => 'glpi_documents_items',\n                  'WHERE'  => [\n                     'items_id'  => $data[\"id\"],\n                     'itemtype'  => 'KnowbaseItem'\n                  ]\n               ]);\n               while ($docs = $iterator->next()) {\n                  $doc = new Document();\n                  $doc->getFromDB($docs[\"documents_id\"]);\n                  echo $doc->getDownloadLink();\n                  $j++;\n                  if ($j > 1) {\n                     echo \"<br>\";\n                  }\n               }\n               echo \"</td>\";\n            }\n\n            if (isset($options['item_itemtype'])\n                  && isset($options['item_items_id'])\n                  && ($output_type == Search::HTML_OUTPUT)) {\n\n               $forcetab = $options['item_itemtype'] . '$1';\n               $item_itemtype = $options['item_itemtype'];\n               $content = \"<a href='\".$item_itemtype::getFormURLWithID($options['item_items_id']).\n                              \"&amp;load_kb_sol=\".$data['id'].\n                              \"&amp;forcetab=\".$forcetab.\"'>\".\n                              __('Use as a solution').\"</a>\";\n               echo Search::showItem($output_type, $content, $item_num, $row_num);\n            }\n\n            // End Line\n            echo Search::showEndLine($output_type);\n         }\n\n         // Display footer\n         if (($output_type == Search::PDF_OUTPUT_LANDSCAPE)\n               || ($output_type == Search::PDF_OUTPUT_PORTRAIT)) {\n            echo Search::showFooter($output_type,\n                                    Dropdown::getDropdownName(\"glpi_knowbaseitemcategories\",\n                                                               $params['knowbaseitemcategories_id']),\n                                    $numrows);\n         } else {\n            echo Search::showFooter($output_type, '', $numrows);\n         }\n         echo \"<br>\";\n         if ($output_type == Search::HTML_OUTPUT) {\n            Html::printPager($params['start'], $rows, $pager_url, $parameters, 'KnowbaseItem');\n         }\n\n      } else {\n         echo \"<div class='center b'>\".__('No item found').\"</div>\";\n      }\n   }\n\n\n   /**\n    * Print out list recent or popular kb/faq\n    *\n    * @param string $type  type : recent / popular / not published\n    *\n    * @return void\n   **/\n   static function showRecentPopular($type) {\n      global $DB;\n\n      $faq = !Session::haveRight(self::$rightname, READ);\n\n      $criteria = [\n         'SELECT'    => ['glpi_knowbaseitems.*'],\n         'DISTINCT'  => true,\n         'FROM'      => self::getTable(),\n         'WHERE'     => [],\n         'LIMIT'     => 10\n      ];\n\n      if ($type == \"recent\") {\n         $criteria['ORDERBY'] = 'date DESC';\n         $title   = __('Recent entries');\n      } else if ($type == 'lastupdate') {\n         $criteria['ORDERBY'] = 'date_mod DESC';\n         $title   = __('Last updated entries');\n      } else {\n         $criteria['ORDERBY'] = 'view DESC';\n         $title   = __('Most popular questions');\n      }\n\n      // Force all joins for not published to verify no visibility set\n      $restrict = self::getVisibilityCriteria(true);\n      unset($restrict['WHERE']);\n      unset($restrict['SELECT']);\n      $criteria = array_merge($criteria, $restrict);\n\n      if (Session::getLoginUserID()) {\n         $restrict = self::getVisibilityCriteria();\n         $criteria['WHERE'] = array_merge($criteria['WHERE'], $restrict['WHERE']);\n      } else {\n         // Anonymous access\n         if (Session::isMultiEntitiesMode()) {\n            $criteria['WHERE']['glpi_entities_knowbaseitems.entities_id'] = 0;\n            $criteria['WHERE']['glpi_entities_knowbaseitems.is_recursive'] = 1;\n         }\n      }\n\n      // Only published\n      $criteria['WHERE'][] = [\n         'NOT'  => [\n            'glpi_entities_knowbaseitems.entities_id' => null,\n            'glpi_knowbaseitems_profiles.profiles_id' => null,\n            'glpi_groups_knowbaseitems.groups_id'     => null,\n            'glpi_knowbaseitems_users.users_id'       => null\n         ]\n      ];\n\n      // Add visibility date\n      $criteria['WHERE'][] = [\n         'OR'  => [\n            ['glpi_knowbaseitems.begin_date' => null],\n            ['glpi_knowbaseitems.begin_date' => ['<', new QueryExpression('NOW()')]]\n         ]\n      ];\n      $criteria['WHERE'][] = [\n         'OR'  => [\n            ['glpi_knowbaseitems.end_date'   => null],\n            ['glpi_knowbaseitems.end_date'   => ['>', new QueryExpression('NOW()')]]\n         ]\n      ];\n\n      if ($faq) { // FAQ\n         $criteria['WHERE']['glpi_knowbaseitems.is_faq'] = 1;\n      }\n\n      if (KnowbaseItemTranslation::isKbTranslationActive()\n          && (countElementsInTable('glpi_knowbaseitemtranslations') > 0)) {\n         $criteria['LEFT JOIN']['glpi_knowbaseitemtranslations'] = [\n            'ON'  => [\n               'glpi_knowbaseitems'             => 'id',\n               'glpi_knowbaseitemtranslations'  => 'knowbaseitems_id', [\n                  'AND'                            => [\n                     'glpi_knowbaseitemtranslations.language' => $_SESSION['glpilanguage']\n                  ]\n               ]\n            ]\n         ];\n         $criteria['SELECT'][] = 'glpi_knowbaseitemtranslations.name AS transname';\n         $criteria['SELECT'][] = 'glpi_knowbaseitemtranslations.answer AS transanswer';\n      }\n\n      $iterator = $DB->request($criteria);\n\n      if (count($iterator)) {\n         echo \"<table class='tab_cadrehov'>\";\n         echo \"<tr class='noHover'><th>\".$title.\"</th></tr>\";\n         while ($data = $iterator->next()) {\n            $name = $data['name'];\n\n            if (isset($data['transname']) && !empty($data['transname'])) {\n               $name = $data['transname'];\n            }\n            echo \"<tr class='tab_bg_2'><td class='left'><div class='kb'>\";\n            if ($data['is_faq']) {\n               echo \"<i class='fa fa-fw fa-question-circle faq' title='\".__(\"This item is part of the FAQ\").\"'></i>\";\n            }\n            echo Html::link(Html::resume_text($name, 80), KnowbaseItem::getFormURLWithID($data[\"id\"]), [\n               'class' => $data['is_faq'] ? 'faq' : 'knowbase',\n               'title' => $data['is_faq'] ? __s(\"This item is part of the FAQ\") : ''\n            ]);\n            echo \"</div></td></tr>\";\n         }\n         echo \"</table>\";\n      }\n   }\n\n\n   function rawSearchOptions() {\n      $tab = [];\n\n      $tab[] = [\n         'id'                 => 'common',\n         'name'               => __('Characteristics')\n      ];\n\n      $tab[] = [\n         'id'                 => '2',\n         'table'              => $this->getTable(),\n         'field'              => 'id',\n         'name'               => __('ID'),\n         'massiveaction'      => false,\n         'datatype'           => 'number'\n      ];\n\n      $tab[] = [\n         'id'                 => '4',\n         'table'              => 'glpi_knowbaseitemcategories',\n         'field'              => 'name',\n         'name'               => __('Category'),\n         'datatype'           => 'dropdown'\n      ];\n\n      $tab[] = [\n         'id'                 => '5',\n         'table'              => $this->getTable(),\n         'field'              => 'date',\n         'name'               => _n('Date', 'Dates', 1),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '6',\n         'table'              => $this->getTable(),\n         'field'              => 'name',\n         'name'               => __('Subject'),\n         'datatype'           => 'text'\n      ];\n\n      $tab[] = [\n         'id'                 => '7',\n         'table'              => $this->getTable(),\n         'field'              => 'answer',\n         'name'               => __('Content'),\n         'datatype'           => 'text',\n         'htmltext'           => true\n      ];\n\n      $tab[] = [\n         'id'                 => '8',\n         'table'              => $this->getTable(),\n         'field'              => 'is_faq',\n         'name'               => __('FAQ item'),\n         'datatype'           => 'bool'\n      ];\n\n      $tab[] = [\n         'id'                 => '9',\n         'table'              => $this->getTable(),\n         'field'              => 'view',\n         'name'               => _n('View', 'Views', Session::getPluralNumber()),\n         'datatype'           => 'integer',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '10',\n         'table'              => $this->getTable(),\n         'field'              => 'begin_date',\n         'name'               => __('Visibility start date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '11',\n         'table'              => $this->getTable(),\n         'field'              => 'end_date',\n         'name'               => __('Visibility end date'),\n         'datatype'           => 'datetime'\n      ];\n\n      $tab[] = [\n         'id'                 => '19',\n         'table'              => $this->getTable(),\n         'field'              => 'date_mod',\n         'name'               => __('Last update'),\n         'datatype'           => 'datetime',\n         'massiveaction'      => false\n      ];\n\n      $tab[] = [\n         'id'                 => '70',\n         'table'              => 'glpi_users',\n         'field'              => 'name',\n         'name'               => User::getTypeName(1),\n         'massiveaction'      => false,\n         'datatype'           => 'dropdown',\n         'right'              => 'all'\n      ];\n\n      // add objectlock search options\n      $tab = array_merge($tab, ObjectLock::rawSearchOptionsToAdd(get_class($this)));\n\n      return $tab;\n   }\n\n   function getRights($interface = 'central') {\n\n      if ($interface == 'central') {\n         $values = parent::getRights();\n         $values[self::KNOWBASEADMIN] = __('Knowledge base administration');\n         $values[self::PUBLISHFAQ]    = __('Publish in the FAQ');\n         $values[self::COMMENTS]      = __('Comment KB entries');\n      }\n      $values[self::READFAQ]       = __('Read the FAQ');\n      return $values;\n   }\n\n   function pre_updateInDB() {\n      $revision = new KnowbaseItem_Revision();\n      $kb = new KnowbaseItem();\n      $kb->getFromDB($this->getID());\n      $revision->createNew($kb);\n   }\n\n   /**\n    * Get KB answer, with id on titles to set anchors\n    *\n    * @return string\n    */\n   public function getAnswer() {\n      if (KnowbaseItemTranslation::canBeTranslated($this)) {\n         $answer = KnowbaseItemTranslation::getTranslatedValue($this, 'answer');\n      } else {\n         $answer = $this->fields[\"answer\"];\n      }\n      $answer = html_entity_decode($answer);\n      $answer = Toolbox::unclean_html_cross_side_scripting_deep($answer);\n\n      $callback = function ($matches) {\n         //1 => tag name, 2 => existing attributes, 3 => title contents\n         $tpl = '<%tag%attrs id=\"%slug\"><a href=\"#%slug\">%icon</a>%title</%tag>';\n\n         $title = str_replace(\n            ['%tag', '%attrs', '%slug', '%title', '%icon'],\n            [\n               $matches[1],\n               $matches[2],\n               Toolbox::slugify($matches[3]),\n               $matches[3],\n               '<svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"/></svg>'\n            ],\n            $tpl\n         );\n\n         return $title;\n      };\n      $pattern = '|<(h[1-6]{1})(.?[^>])?>(.+)</h[1-6]{1}>|';\n      $answer = preg_replace_callback($pattern, $callback, $answer);\n\n      return $answer;\n   }\n\n   /**\n    * Get dropdown parameters from showVisibility method\n    *\n    * @return array\n    */\n   protected function getShowVisibilityDropdownParams() {\n      $params = parent::getShowVisibilityDropdownParams();\n      $params['right'] = ($this->getField('is_faq') ? 'faq' : 'knowbase');\n      return $params;\n   }\n\n   /**\n    * Reverts item contents to specified revision\n    *\n    * @param integer $revid Revision ID\n    *\n    * @return boolean\n    */\n   public function revertTo($revid) {\n      $revision = new KnowbaseItem_Revision();\n      $revision->getFromDB($revid);\n\n      $values = [\n         'id'     => $this->getID(),\n         'name'   => addslashes($revision->fields['name']),\n         'answer' => addslashes($revision->fields['answer'])\n      ];\n\n      if ($this->update($values)) {\n         Event::log($this->getID(), \"knowbaseitem\", 5, \"tools\",\n                    //TRANS: %1$s is the user login, %2$s the revision number\n                    sprintf(__('%1$s reverts item to revision %2$s'), $_SESSION[\"glpiname\"], $revid));\n         return true;\n      } else {\n         return false;\n      }\n   }\n\n   /**\n    * Get ids of KBI in given category\n    *\n    * @param int           $category_id   id of the parent category\n    * @param KnowbaseItem  $kbi           used only for unit tests\n    *\n    * @return array        Array of ids\n    */\n   public static function getForCategory($category_id, $kbi = null) {\n      global $DB;\n\n      if ($kbi === null) {\n         $kbi = new self();\n      }\n\n      $ids = $DB->request([\n         'SELECT' => 'id',\n         'FROM'   => self::getTable(),\n         'WHERE'  => ['knowbaseitemcategories_id' => $category_id],\n      ]);\n\n      // Get array of ids\n      $ids = array_map(function($row){\n         return $row['id'];\n      }, iterator_to_array($ids, false));\n\n      // Filter on canViewItem\n      $ids = array_filter($ids, function($id) use ($kbi) {\n         $kbi->getFromDB($id);\n         return $kbi->canViewItem();\n      });\n\n      // Avoid empty IN\n      if (count($ids) === 0) {\n         $ids[] = -1;\n      }\n\n      return $ids;\n   }\n\n\n   static function getIcon() {\n      return \"fas fa-question\";\n   }\n}\n"], "filenames": ["inc/knowbaseitem.class.php"], "buggy_code_start_loc": [1295], "buggy_code_end_loc": [1296], "fixing_code_start_loc": [1295], "fixing_code_end_loc": [1298], "type": "CWE-79", "message": "In GLPI before version 9.5.2, there is a leakage of user information through the public FAQ. The issue was introduced in version 9.5.0 and patched in 9.5.2. As a workaround, disable public access to the FAQ.", "other": {"cve": {"id": "CVE-2020-15217", "sourceIdentifier": "security-advisories@github.com", "published": "2020-10-07T19:15:12.907", "lastModified": "2020-10-16T15:19:52.210", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In GLPI before version 9.5.2, there is a leakage of user information through the public FAQ. The issue was introduced in version 9.5.0 and patched in 9.5.2. As a workaround, disable public access to the FAQ."}, {"lang": "es", "value": "En GLPI versiones anteriores a 9.5.2, se presenta un filtrado de informaci\u00f3n del usuario por medio de las FAQ p\u00fablicas .&#xa0;El problema fue introducido en la versi\u00f3n 9.5.0 y fue parcheado en la versi\u00f3n 9.5.2.&#xa0;Como una soluci\u00f3n alternativa, desactive el acceso p\u00fablico a las FAQ"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.5.0", "versionEndExcluding": "9.5.2", "matchCriteriaId": "3413FC50-D17F-49F2-9612-58C184E38410"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/39e25591efddc560e3679ab07e443ee6198705e2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-x9hg-j29f-wvvv", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/39e25591efddc560e3679ab07e443ee6198705e2"}}