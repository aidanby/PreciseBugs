{"buggy_code": ["<?php\n/*\n* LimeSurvey\n* Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*\n* Surveys Groups Controller\n*/\n\nif (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n\n\nclass SurveysGroupsController extends Survey_Common_Action\n{\n\n    /**\n     * Displays a particular model.\n     * @param integer $id the ID of the model to be displayed\n     */\n    public function view($id)\n    {\n        $this->render('view', array(\n            'model'=>$this->loadModel($id),\n        ));\n    }\n\n    /**\n     * Creates a new model.\n     * If creation is successful, the browser will be redirected to the 'view' page.\n     */\n    public function create()\n    {\n        $model = new SurveysGroups;\n\n        // Uncomment the following line if AJAX validation is needed\n        // $this->performAjaxValidation($model);\n\n        if (Yii::app()->getRequest()->getPost('SurveysGroups')) {\n            $model->attributes = Yii::app()->getRequest()->getPost('SurveysGroups');\n            $model->created_by = $model->owner_id = Yii::app()->user->id;\n            if ($model->save()) {\n                $this->getController()->redirect($this->getController()->createUrl('admin/survey/sa/listsurveys').'#surveygroups');\n            }\n        }\n\n        $aData['model'] = $model;\n        $aData['fullpagebar']['savebutton']['form'] = 'surveys-groups-form';\n        $aData['fullpagebar']['returnbutton'] = array(\n            'url'=>'admin/survey/sa/listsurveys#surveygroups',\n            'text'=>gT('Close'),\n        );\n\n        $this->_renderWrappedTemplate('surveysgroups', 'create', $aData);\n    }\n\n    /**\n     * Updates a particular model.\n     * If update is successful, the browser will be redirected to the 'view' page.\n     * @param integer $id the ID of the model to be updated\n     */\n    public function update($id)\n    {\n        $model = $this->loadModel($id);\n\n        if (isset($_POST['SurveysGroups'])) {\n            $model->attributes = $_POST['SurveysGroups'];\n\n\n                // prevent loop\n                if (!empty($_POST['SurveysGroups']['parent_id'])){\n                    $sgid = $_POST['SurveysGroups']['parent_id'] ;\n                    $ParentSurveyGroup = $this->loadModel($sgid);\n                    $aParentsGsid = $ParentSurveyGroup->getAllParents(true);\n\n                    if ( in_array( $model->gsid, $aParentsGsid  ) ) {\n                        Yii::app()->setFlashMessage(gT(\"A child group can't be set as parent group\"), 'error');\n                        $this->getController()->redirect($this->getController()->createUrl('admin/survey/sa/listsurveys').'#surveygroups');\n                    }\n                }\n\n            if ($model->save()) {\n                    $this->getController()->redirect($this->getController()->createUrl('admin/survey/sa/listsurveys').'#surveygroups');\n            }\n        }\n\n        $aData['model'] = $model;\n        $oSurveySearch = new Survey('search');\n        $oSurveySearch->gsid = $model->gsid;\n        $aData['oSurveySearch'] = $oSurveySearch;\n\n        $oTemplateOptions           = new TemplateConfiguration();\n        $oTemplateOptions->scenario = 'surveygroup';\n        $aData['templateOptionsModel'] = $oTemplateOptions;\n\n        // Page size\n        if (Yii::app()->request->getParam('pageSize')) {\n            Yii::app()->user->setState('pageSizeTemplateView', (int) Yii::app()->request->getParam('pageSize'));\n        }\n        $aData['pageSize'] = Yii::app()->user->getState('pageSizeTemplateView', Yii::app()->params['defaultPageSize']); // Page size\n\n        $this->_renderWrappedTemplate('surveysgroups', 'update', $aData);\n    }\n\n    /**\n     * Deletes a particular model.\n     * If deletion is successful, the browser will be redirected to the 'admin' page.\n     * @param integer $id the ID of the model to be deleted\n     */\n    public function delete($id)\n    {\n        $oGroupToDelete = $this->loadModel($id);\n        $sGroupTitle    = $oGroupToDelete->title;\n\n        if ($oGroupToDelete->hasSurveys) {\n            Yii::app()->setFlashMessage(gT(\"You can't delete a group if it's not empty!\"), 'error');\n            $this->getController()->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin/survey/sa/listsurveys '));\n        } elseif ($oGroupToDelete->hasChildGroups) {\n            Yii::app()->setFlashMessage(gT(\"You can't delete a group because one or more groups depend on it as parent!\"), 'error');\n            $this->getController()->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin/survey/sa/listsurveys '));\n        } else {\n            $oGroupToDelete->delete();\n\n            // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser\n            if (!isset($_GET['ajax'])) {\n                Yii::app()->setFlashMessage(sprintf(gT(\"The survey group '%s' was deleted.\"), $sGroupTitle), 'success');\n                $this->getController()->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin/survey/sa/listsurveys '));\n            }\n        }\n    }\n\n    /**\n     * Lists all models.\n     */\n    public function index()\n    {\n        $model = new SurveysGroups('search');\n        $aData['model'] = $model;\n        $this->_renderWrappedTemplate('surveysgroups', 'index', $aData);\n    }\n\n    /**\n     * Manages all models.\n     */\n    public function admin()\n    {\n        $model = new SurveysGroups('search');\n        $model->unsetAttributes(); // clear any default values\n        if (isset($_GET['SurveysGroups'])) {\n                    $model->attributes = $_GET['SurveysGroups'];\n        }\n\n        $this->render('admin', array(\n            'model'=>$model,\n        ));\n    }\n\n\n    /**\n     * Returns the data model based on the primary key given in the GET variable.\n     * If the data model is not found, an HTTP exception will be raised.\n     * @param integer $id the ID of the model to be loaded\n     * @return SurveysGroups the loaded model\n     * @throws CHttpException\n     */\n    public function loadModel($id)\n    {\n        $model = SurveysGroups::model()->findByPk($id);\n        if ($model === null) {\n                    throw new CHttpException(404, 'The requested page does not exist.');\n        }\n        return $model;\n    }\n\n    /**\n     * Performs the AJAX validation.\n     * @param SurveysGroups $model the model to be validated\n     */\n    protected function performAjaxValidation($model)\n    {\n        if (isset($_POST['ajax']) && $_POST['ajax'] === 'surveys-groups-form') {\n            echo CActiveForm::validate($model);\n            Yii::app()->end();\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/*\n* LimeSurvey\n* Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*\n* Surveys Groups Controller\n*/\n\nif (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n\n\nclass SurveysGroupsController extends Survey_Common_Action\n{\n\n    /**\n     * Displays a particular model.\n     * @param integer $id the ID of the model to be displayed\n     */\n    public function view($id)\n    {\n        $this->render('view', array(\n            'model'=>$this->loadModel($id),\n        ));\n    }\n\n    /**\n     * Creates a new model.\n     * If creation is successful, the browser will be redirected to the 'view' page.\n     */\n    public function create()\n    {\n        $model = new SurveysGroups;\n\n        // Uncomment the following line if AJAX validation is needed\n        // $this->performAjaxValidation($model);\n\n        if (Yii::app()->getRequest()->getPost('SurveysGroups')) {\n            $model->attributes = Yii::app()->getRequest()->getPost('SurveysGroups');\n            $model->created_by = $model->owner_id = Yii::app()->user->id;\n            if ($model->save()) {\n                $this->getController()->redirect($this->getController()->createUrl('admin/survey/sa/listsurveys').'#surveygroups');\n            }\n        }\n\n        $aData['model'] = $model;\n        $aData['fullpagebar']['savebutton']['form'] = 'surveys-groups-form';\n        $aData['fullpagebar']['returnbutton'] = array(\n            'url'=>'admin/survey/sa/listsurveys#surveygroups',\n            'text'=>gT('Close'),\n        );\n\n        $this->_renderWrappedTemplate('surveysgroups', 'create', $aData);\n    }\n\n    /**\n     * Updates a particular model.\n     * If update is successful, the browser will be redirected to the 'view' page.\n     * @param integer $id the ID of the model to be updated\n     */\n    public function update($id)\n    {\n        $model = $this->loadModel($id);\n\n        if (isset($_POST['SurveysGroups'])) {\n            $model->attributes = $_POST['SurveysGroups'];\n\n\n                // prevent loop\n                if (!empty($_POST['SurveysGroups']['parent_id'])){\n                    $sgid = $_POST['SurveysGroups']['parent_id'] ;\n                    $ParentSurveyGroup = $this->loadModel($sgid);\n                    $aParentsGsid = $ParentSurveyGroup->getAllParents(true);\n\n                    if ( in_array( $model->gsid, $aParentsGsid  ) ) {\n                        Yii::app()->setFlashMessage(gT(\"A child group can't be set as parent group\"), 'error');\n                        $this->getController()->redirect($this->getController()->createUrl('admin/survey/sa/listsurveys').'#surveygroups');\n                    }\n                }\n\n            if ($model->save()) {\n                    $this->getController()->redirect($this->getController()->createUrl('admin/survey/sa/listsurveys').'#surveygroups');\n            }\n        }\n\n        $aData['model'] = $model;\n        $oSurveySearch = new Survey('search');\n        $oSurveySearch->gsid = $model->gsid;\n        $aData['oSurveySearch'] = $oSurveySearch;\n\n        $oTemplateOptions           = new TemplateConfiguration();\n        $oTemplateOptions->scenario = 'surveygroup';\n        $aData['templateOptionsModel'] = $oTemplateOptions;\n\n        // Page size\n        if (Yii::app()->request->getParam('pageSize')) {\n            Yii::app()->user->setState('pageSizeTemplateView', (int) Yii::app()->request->getParam('pageSize'));\n        }\n        $aData['pageSize'] = Yii::app()->user->getState('pageSizeTemplateView', Yii::app()->params['defaultPageSize']); // Page size\n\n        $this->_renderWrappedTemplate('surveysgroups', 'update', $aData);\n    }\n\n    /**\n     * Deletes a particular model.\n     * If deletion is successful, the browser will be redirected to the 'admin' page.\n     * @param integer $id the ID of the model to be deleted\n     */\n    public function delete($id)\n    {\n        $oGroupToDelete = $this->loadModel($id);\n        $sGroupTitle    = $oGroupToDelete->title;\n\n        if ($oGroupToDelete->hasSurveys) {\n            Yii::app()->setFlashMessage(gT(\"You can't delete a group if it's not empty!\"), 'error');\n            $this->getController()->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin/survey/sa/listsurveys '));\n        } elseif ($oGroupToDelete->hasChildGroups) {\n            Yii::app()->setFlashMessage(gT(\"You can't delete a group because one or more groups depend on it as parent!\"), 'error');\n            $this->getController()->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin/survey/sa/listsurveys '));\n        } else {\n            $oGroupToDelete->delete();\n\n            // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser\n            if (!isset($_GET['ajax'])) {\n                Yii::app()->setFlashMessage(sprintf(gT(\"The survey group '%s' was deleted.\"), CHtml::encode($sGroupTitle)), 'success');\n                $this->getController()->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin/survey/sa/listsurveys '));\n            }\n        }\n    }\n\n    /**\n     * Lists all models.\n     */\n    public function index()\n    {\n        $model = new SurveysGroups('search');\n        $aData['model'] = $model;\n        $this->_renderWrappedTemplate('surveysgroups', 'index', $aData);\n    }\n\n    /**\n     * Manages all models.\n     */\n    public function admin()\n    {\n        $model = new SurveysGroups('search');\n        $model->unsetAttributes(); // clear any default values\n        if (isset($_GET['SurveysGroups'])) {\n                    $model->attributes = $_GET['SurveysGroups'];\n        }\n\n        $this->render('admin', array(\n            'model'=>$model,\n        ));\n    }\n\n\n    /**\n     * Returns the data model based on the primary key given in the GET variable.\n     * If the data model is not found, an HTTP exception will be raised.\n     * @param integer $id the ID of the model to be loaded\n     * @return SurveysGroups the loaded model\n     * @throws CHttpException\n     */\n    public function loadModel($id)\n    {\n        $model = SurveysGroups::model()->findByPk($id);\n        if ($model === null) {\n                    throw new CHttpException(404, 'The requested page does not exist.');\n        }\n        return $model;\n    }\n\n    /**\n     * Performs the AJAX validation.\n     * @param SurveysGroups $model the model to be validated\n     */\n    protected function performAjaxValidation($model)\n    {\n        if (isset($_POST['ajax']) && $_POST['ajax'] === 'surveys-groups-form') {\n            echo CActiveForm::validate($model);\n            Yii::app()->end();\n        }\n    }\n}\n"], "filenames": ["application/controllers/admin/SurveysGroupsController.php"], "buggy_code_start_loc": [133], "buggy_code_end_loc": [134], "fixing_code_start_loc": [133], "fixing_code_end_loc": [134], "type": "CWE-79", "message": "LimeSurvey before v3.17.14 allows stored XSS for escalating privileges from a low-privileged account to, for example, SuperAdmin. The attack uses a survey group in which the title contains JavaScript that is mishandled upon group deletion.", "other": {"cve": {"id": "CVE-2019-16172", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-09T19:15:11.190", "lastModified": "2023-02-13T19:21:06.603", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LimeSurvey before v3.17.14 allows stored XSS for escalating privileges from a low-privileged account to, for example, SuperAdmin. The attack uses a survey group in which the title contains JavaScript that is mishandled upon group deletion."}, {"lang": "es", "value": "LimeSurvey versiones anteriores a v3.17.14, permite un ataque de tipo XSS almacenado para escalar los privilegios desde una cuenta con pocos privilegios para, por ejemplo, SuperAdmin. El ataque utiliza un grupo de encuesta en el que el t\u00edtulo contiene JavaScript que es manejado inapropiadamente tras eliminar el grupo."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.17.4", "matchCriteriaId": "84F3FE51-7F29-4A18-B111-278E2DBCD753"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/154479/LimeSurvey-3.17.13-Cross-Site-Scripting.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2019/Sep/22", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/LimeSurvey/LimeSurvey/commit/32d6a5224327b246ee3a2a08500544e4f80f9a9a", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://seclists.org/bugtraq/2019/Sep/27", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://www.limesurvey.org/limesurvey-updates/2188-limesurvey-3-17-14-build-190902-released", "source": "cve@mitre.org", "tags": ["Broken Link"]}]}, "github_commit_url": "https://github.com/LimeSurvey/LimeSurvey/commit/32d6a5224327b246ee3a2a08500544e4f80f9a9a"}}