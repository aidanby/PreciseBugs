{"buggy_code": ["            Allow Crypto SHA1 without SHA256/512 (for Original & ESP8266 where flash is scarce)\n            Add better docs for the form of Wifi callback functions\n            Modify ESP8266/ESP32 callbacks to match the node.js style used elsewhere\n            nRF52: fix pin.toggle() on software-negated pins\n            Pixl.js: Reorder pins so 0..13 are also D0..13 for better Arduino compatibility\n            Fix dump() when used with code written using E.setBootCode(..), (fix #1398)\n            Allow parseInt/parseFloat to be used on very large strings if the number doesn't extend right to the end (fix #1397)\n            nRF5x: Fix memory leak on NRF.connect\n            Fix memory leak if an exception is thrown within a rejected promise\n            ESP8266: rewrite wifi.save and restore to use the storage lib (imp #1380)\n\t    ESP8266: Add missing option ssid_hidden for Wifi.startAP() (imp #1358)\n            Fixed double-connect issue for TCP sockets\n            Pixl.js: Ensure Pixl.menu changes to bitmap fonts\n            Pixl.js: tweaked bias/contrast to improve display quality\n            ESP32: update esp-idf to v3.0. BLE support - thanks to @jumjum. Erase flash before flashing. vars now 2500\n            ESP8266: rearange rf_cal_sector (fix #1294)\n            ESP8266: Wifi.scan() now return authmode as text \n            ESP32: Fix accidental initialisation of UART3 when switching to Telnet (fix #1362)\n            nRF52: Added `NRF.setAddress` to allow the MAC address to be changed\n            Added Graphics.setFontAlign for font alignment and rotation\n            Make software I2C bitrate and waveform more accurate\n            Move default I2C bitrate to 100kbit/sec\n            Linux: don't create a espruino.flash file if we're not writing to flash\n\n     1v97 : nRF52: fix NRF.on('connect',...) issue\n            STM32: Fix setDeviceClockCmd error for USB.setConsole()\n            nRF5x: Fix getPinMode, which fixes SW I2C after save()\n            Thingy52: Don't report contents of 'Thingy' in 'dump()'\n            Thingy52: Allow multiple sounds to play at once\n            nRF5x: Ensure Waveform triggers a finished event\n            Thingy52: Enable simple bootloader, add travis build for DFU\n            Add Serial.inject to allow data to be added as if it was received from that device\n            Fix UDP handling so that it copes with packets not all being received in one go\n            STM32L496: increase variables - use full 320kB of RAM as it is contiguous\n            Add a maximum time for setTimeout/setInterval (100 years)\n            Fix Storage.write when writing partial file of the same length and initial contents\n            Fix corrupted timer channels returned by Pin.getInfo\n            Add command history to debugger\n            Remove process.env.EXPORTS (EXPTR does the same but takes less space)\n            Thingy52: Add 9 axis MPU support\n            Errors now store message in 'message', not 'msg' (fix #1366)\n            Ensure 'in' operator checks the prototype chain (fix #1365)\n            Promise.resolve now handles promises/thenables as arguments (fix #1363)\n            try..catch now creates exception in its own scope (fix #1367)\n            Thingy52,Pixl.js: add default NFC URL of the Espruino IDE \n            Add ArrayBuffer.byteLength property (fix #1374)\n            setWatch(..., {edge:\"rising\",debounce:25}) is now default for built-in buttons\n            Pixl.js: add Pixl.menu function for easy menus, build in graphical_menu.js\n            Fix regression in MDBT42Q advertised name\n            nRF52: Add E.getBattery as a more global battery percentage function, deprecate `Puck.getBatteryPercentage`\n            Fix '.buffer' regression in 'JSON.stringify(new Uint8Array([1,2,3,4]).buffer)'\n            Allow `typeof 123 .testing` without an exception (fix #1351)\n            Add crypto.AES to Puck.js and other nRF52 Espruino devices\n\n     1v96 : ESP8266: no callback if SSID is not available (fix #1297)\n            ESP8266: esp8266 wifi getStatus doesn't show savedMode (fix #752)\n            ESP8266: cleanup defines WIFI_DBG and NET_DBG for RELEASE\n            ESP8266: switch to single ld file eagle.app.v6.new.2048.ld for ESP8266_4MB board\n            Allow JS modules to be built-in by adding files to JSMODULESOURCES\n            Fix slow/hacky handling of 7 bit serial data for STM32\n            Add more stack checks so invalid code `typeof typeof typeof x100` can't break stack (fix #1310)\n            nRF5x: Fix PWM output via Waveform class\n            Fix free stack checking on ARM\n            nRF52: Make slightly more space available for stack\n            nRF5x: Move to SDK 12.3\n            Stop stack traces from being gathered in functions for Ctrl-C (fix #1313)\n            nRF5x: Fix crash if I2C is used before being initialised (fix #1301)\n            Internal printf can now pad with spaces\n            Add `E.dumpFreeList` in non-release builds to help with debugging\n            Fix mild memory leak in jsvMakeIntoVariableName that caused GC to run more often than normal\n            E.toString now tries harder to allocate a Flat String, and works with no-alloc for Uint8Array/FlatStrings\n            WIO_LTE fix SD card initialisation\n            Improve SD card reliability on all boards by trying to initialise multiple times before failing\n            Remove forced inlining in variable inspection functions (reduces flash usage by ~10k)\n            Remove un-needed DNS lookup for localhost\n            Add WIZnet UDP support\n            Tidying up build to avoid making un-needed bin, hex or lst files\n            Simplify flash save (and help debugging) by using the 'fake flash' implementation on Linux builds\n            Added Graphics.scroll command to scroll graphics contents\n            Added 'Terminal' class with built-in VT100 terminal\n            Tweak Espruino logo to be exactly 32 chars wide\n            Improved code for returning console device to the most useful place\n            Fix pinToString for devices with port A but no port B\n            Speed improvements for ArrayBuffer Graphics\n            Tidied up bootloader - devices with one LED now flash LED when button pressed\n            Simplify data returned by process.env\n            Add process.env.MODULES - to contain a list of the libraries provided in the firmware by require\n            Include WiFi and AT libraries inside Espruino WiFi builds\n            Add 'E.asm' placeholder to detect E.asm calls that haven't been replaced by the IDE\n            Add process.env.EXPTR to link to table of functions - will work better for compiled code over BLE\n            Added SAVE_ON_FLASH_EXTREME for HYSTM32_28, where we're now cutting out some Math.X functionality to keep builds going \n            Added `jshFlashGetMemMapAddress` to allow remapping of addresses for ESP8266/ESP32 without loads of code duplication\n            Remap peek8/16/32 addresses on ESP32/ESP8266 so it can be used on flash memory\n            Swapped save/load/E.setBootCode to use the flash library\n            Allow STM32LL port to write 32 bits to flash at a time to bring it in line with other ports\n            Allow flash writes *from* unaligned addresses on nRF52 and ESP8266 (previously this crashed the ESP8266)\n            Update process.ENV.EXPORTS to bring it in line with what the compiler uses\n            Now set 'this' correctly for Arrow Functions\n            Add ES6 classes and 'super'\n            nRF5x: Move all bluetooth events to event queue (removing MEMORY_BUSY issues)\n            Fix potential issue where EV_TYPE_MASK enum could be set incorrectly  \n            setWatch's edge argument can also be an integer now\n            Add 'data' option to setWatch to allow clocked data to be decoded easily\n            nRF52: Increase flash available for stored code from 12kB for 40kB\n            Now store/display appreviated commit in process.env, remove build date\n  \n     1v95 : nRF5x: Swap to UART fifo to avoid overrun errors at high baud rates\n            Ensure Exceptions/errors are reported on a blank line\n            Internal: Added initialiser argument to jsvNewStringOfLength\n            Internal: Added jsvObjectSetChildVar/jsvObjectSetChildVar/jsvObjectSetChildVar\n            Internal: Fix jsvCopy if given a NAME_INT/etc\n            Added ES6's Object.assign\n            nRF5x: NRF.setScan now reads service data automatically\n            nRF5x: NRF.findDevices aggregates data from multiple advertising packets\n            nRF5x: Remove app_uart and use nrf_drv_uart with double buffering - fix uart overflow errors (fix #1238)\n            nRF5x: Fix issue with findDevices/setScan servicedata when all digits of service are numbers (eg \"1809\")\n            Fix memory leak in tab completion code\n            Add `E.errorFlag` event to allow JS to respond to internal errors\n            Use Esc[J VT100 code when cycling through command history (much faster REPL on low bandwidth connections)\n            ESP8266: Remove debugger again as it will never work on 8266\n            ESP8266: Enable unaligned reads for ESP8266_4MB (fix #1240,#837)\n            ESP8266: move code save section to fist partition for memory mapping for ESP8266_4MB (fix #1240)\n            ESP8266: Add GPIO16 as D16 without watch (#1206) but soft PWM/I2C/SPI/etc \n            ESP8266: Remove osprintf for RELEASE=1 \n            Internal: Networkjs now forwards `socketType` - laying groundwork for UDP over AT command (#1232)\n            Added simple RegExp implemention (partial fix #256)\n            Speed up JSON.stringify for Arrays, and output non-numeric array elements in REPL (fix #64)\n            nRF5x: Bump nRF52-based boards variable count from 2000 to 2500 (fix #1215)\n            Ensure Ctrl-C doesn't redraw the input line if it's already empty\n            Added String.replace(regex, function) (fix #1256)\n            With E.setFlags({pretokenise:1}), ensure stack traces are not tokenised (fix #1258)\n            Allow digitalWrite/Read to take an object as an argument (calling .write and .read on it)\n            Add `E.getAddressOf` to allow embedded targets to get memory addresses for DMA/etc\n            nRF5x: Fix issue where doing a soft reset in the middle of some BLE ops could cause an assert in debug builds\n            nRF5x: Manufacturer Data is now decoded in advertising packets\n            Fix memory leak when allocating DataViews\n            nRF5x: Fix memory leak on BLE notifications\n            Ensure net/http .listen return the server instance (fix #1276)\n            nRF5x: Allow Manufacturer Data to be specified with setAdvertising\n            Internal: Fix memory leak in jsvArrayPushAll\n            nRF5x: jsvArrayPushAll memory leak fixes NRF.findDevices memory leak when services present\n            Internal: jsvNewIterator now has an option to iterate over sparse arrays as if they weren't sparse\n            Fixed some built-in functions that misbehaved when given sparse arrays\n            Puck.js: Allow flash memory protection to be overwridden with E.setFlags\n            Fix lexing of '/*/' as a complete block comment\n            nRF5x: Add support for negating pins in software (eg. buttons/LEDs)\n            Add `E.setFlags({unsyncFiles:1}` which doesn't sync the file to the SD card after each write - it's *much* faster\n            Filesystem API now uses flat strings (avoiding the 512 byte copy for each call)\n            Increase default internal SD card bitrate to 4MHz (from 100k)\n            nRF5x: Handle promise completions and advertising using IO queue, to avoid MEMORY_BUSY messages (#1277)\n            Allow E.HSBtoRGB to wrap 'hue' value, and allow it to return an array of [r,g,b] (fix #1283)\n            Remove spikes when changing pin state (fix #1274)\n            Changes to reduce code duplication in jswrapper.c\n            Fix `E.setBootCode` when no argument is supplied\n            Add WIZnet W5500 support to Espruino WiFi build\n\n     1v94 : Allow Espruino boards to reset straight out of the DFU Bootloader             \n            Improvements in handling errors in code running in IRQs\n             - if writing to disconnected Bluetooth device, throw data away immediately\n             - Drop chars if output buffer is full while waiting in an IRQ\n             - Handle out of memory errors in jsvCreateNewChild\n             - Do not garbage collect inside an IRQ\n            On nRF52 devices, allow button press at boot to clear out peer manager data\n            Work out length of typed array with offset correctly (fix #1204)\n            nRF5x: Add Watchdog timer handling\n            nRF52: start new connections on idle to ease memory allocation conflicts between code execution & IRQs\n            nRF52: Ignore INVALID_STATE from CONN_PARAM_UPDATE_REQUEST (it can happen if we disconnect and then SD requests an update)\n            Fix Date.toString for dates before 1970\n            STM32: Fix handling of months when setting the internal RTC\n            Move to a faster jsvNewFlatStringOfLength which avoids blocking memory allocation\n            nRF5x: If a task is in progress, report the task ID (BleTask enum)\n            nRF52: Report central mode promise errors correctly if returned by softdevice\n            Remove 'out of memory' warning messages (it's stored as a flag anyway)\n            nRF5x: Don't disable IRQs completely for some things - only disable Espruino ones\n            Fix tab complete for Pins (fix #1213)\n            ESP8266: Fix load() causes endless loops (fix #1037)\n            ESP8266: Wifi library doesn't handle {password: null} (fix #753)\n            ESP8266: make topstrings and topreadonly work on Mac OS X (fix #1210)\n            Change order of execution for init - E.on('init',...) now executed before onInit\n            Added Error flag to show if a UART overflow has occurred\n            Change more instances of jsWarn to jsException\n            Avoid printing error messages during execution, and report to console on idle when if errors were flagged (fix #766)\n            Increase HTTP server and client version from 1.0 to 1.1 (needed for Websockets on Safari)\n            Stop 'require' creating an undefined Module entry in the modules list (fix #1218)\n            Stop require dumping filesystem errors as well as 'module not found'\n            Now throw an exception when writing to a closed socket (fix #1220)\n            Set the internal 'conn' variable to false when a connection closes to avoid confusion\n            nRF5x: Fix typo so we wake every 4 min for RTC, not 0.25 sec!\n            process.memory() now reports time taken for GC and vars GC'd\n            Slightly more aggressive idle GC on most platforms (at 5% free)\n            Don't warn the user when we had to run a GC pass during execution\n            Fix issue drawing on right-hand side of rotated graphics where H>W (regression in 1v93) \n            If >1 button, set pin state correctly at boot/reset\n            Add an argument to `reset`. `reset(true)` will now cause all Flash memory to be cleared as well.\n            Puck.js: Holding down the button while booting (past the the 5 LED flashes) will now cause data saved in Flash to be cleared\n            STM32: Remove the 'utility timer' from the list of available PWM pins, fixing A0/1/2 PWM on F4 (fix #1229)\n            Disable Graphics.createCallback on devices with small amounts of flash memory - rarely used on those devices and fixes HYSTM32_28 build\n\n     1v93 : Ensure that specifying too many advertising UUIDs causes an exception, not a reboot\n            nRF5x: Fix for time jump caused by reentrancy in jshGetSystemTime\n            Fix regression causing multiple end/close callbacks when using standard TCP/IP socket client/server\n            Ensure NetworkJS reports receive errors back correctly\n            nRF5x: Fix issue where connect and immediate disconnect could in some cases trigger an error from nordic's libraries that'd cause a reboot\n            Fix regression that caused Original Espruino to have lost Filesystem/hashlib/neopixel support in 1v92\n\t    Re-add TV output to Original Espruino\n            Fix some stack overflow bugs on Linux found by fuzzing (#1147)\n            Remove un-needed code for parsing '.' in var statement (#1147)\n            Add autocomplete for pin names (fix #1124)\n            Add Array.indexOf fromIndex support (fix #162)\n            Puck.js: Add BluetoothRemoteGATTServer.startBonding to allow bonding to be initiated when Puck.js is a central\n            Fat FS: closedir after readdir, FS errors should be catchable (#1164), fs.statSync (#1163)\n            Allow hardware (CTS) flow control (fix #1165)\n            nRF52: Add AntiCat's patch to Nordic's NFC library to cope with malformed NFC requests\n            Puck.js: Fix increased battery drain after NFC usage (fix #1171)\n            Puck.js: Fix WS2811 output library that would output bad data after neopixel waveform (fix #1154)\n            nRF52: Seed random number generator at boot (fix #1166)\n            Stop trailing decimal point if there are no digits after it - which could cause issues in JSON\n            Don't enter debugger if we're in the middle of uploading (echo_off_for_line) (fix #644)\n            Added Date setters (fix #504)\n            Allow Timezone to be set for Date with E.setTimeZone(...) (fix #530)\n            Added RegEx lexing (part of #256)\n            Puck.js: fix error 8 from NRF.sleep during an active connection \n            nRF5x: Fix `NRF.updateServices` when a 128 bit service shares the same 16 bit UUID\n            Add 'errors' option when using `Serial.setup` to enable error handling (and turn it off by default as it can fill the input queue)\n            nRF52: Re-initialise services and HID after a `save()` (fix #1185)\n            nRF5x: Add NRF.getAdvertisingData\n            nRF5x: Allow array of objects in NRF.setAdvertising (fix #1188)\n            Fix internal vcbprintf JSON dumping\n            nRF5x: NRF.findDevices will now throw an exception if no callback is supplied\n            nRF52: Added BluetoothRemoteGATTServer.getSecurityStatus to check the status of the link\n            nRF52: Disable auto-whitelisting by default, add with `NRF.setWhitelist` (fix #1187)\n            nRF52: Allow secure Bluetooth LE connections\n            Don't draw font characters that are off the edge of the screen\n            Make atob and btoa use flat string for larger amounts of data (faster & more memory efficient) (fix #1192)\n            nRF52: Pull in Nordic SDK13 code to crash caused by writing large characteristic (fix #1181)\n            Puck.js: Added Puck.magTemp() function to get the magnetometer's temperature as well\n            nRF5x: Fix issue where 'NRF.sleep()' called while a connection was active could cause Espruino to go into a high power draw mode\n            Fix Object.setPrototypeOf when called on undefined (fix #1194)\n            Fix dumping of an ArrayBuffer containing data (new ArrayBuffer([1,2,3]) isn't valid)\n            Fix setAdvertising regression where name would be lost after save() (fix #1193)\n            Add `E.set/getFlags` to allow interpreter state to be controlled from one place\n            Add `E.setFlags({pretokenise:1})` to dynamically turn on pretokenisation (fix #1178)\n\n     1v92 : nRF5x: Fix issue where Espruino could crash during save() if the flash got into a strange state\n            Added Pin.toggle() function\n            Fix implicit casting to bool/number on ArrayBuffers (fix #1030)\n            Fix jstExecuteTaskChecker bug, and allow jstExecuteFn to take a userdata argument\n            Puck.js: Reduce IR LED to 10% duty cycle\n            Puck.js: Allow Puck.IR to take pins for external IR LED (fix #927)\n            nRF52: Allow arbitrary NFC data to be specified (fix #1021)\n            nRF5x: Allow multiple advertising packets to be set at once with NRF.setAdvertising\n            nRF52: Add 'properties' object to BluetoothRemoteGATTCharacteristic\n            nRF52: Perform write without response if that is what is required \n            Pico/WiFi: Allow USB HID to work on Windows (from @nailxx)\n            Allow Puck.js/nRF52 devices to drive Neopixel/WS281x/APA10x LEDs with require(\"neopixel\").write (fix #1023)\n            Fix crash in JSON.stringify for zero-length typed arrays\n            Fix precedence of 'void' keyword (fix #1079)\n            nRF52: Add BluetoothRemoteGATTCharacteristic.startNotifications (fix #959)\n            nRF52: Added BluetoothDevice.gattserverdisconnected event\n            nRF5x: Report back reason codes for BLE disconnect\n            Added DataView class\n            nRF52: char.readValue now returns DataView to be more Web Bluetooth compliant (fix #1091)\n            nRF5x: Fix explicit disconnect being able to reboot Puck (fix #1088)\n            nRF5x: Respond to conn_params update request, fix puck-puck disconnection after ~65 sec (fix #1089)\n            nRF52: Change connection params for central mode so NRF.setLowPowerConnection affects connection speed\n            Un-inlining jsvGet*AndUnLock functions to give us a little more free flash\n\t    ESP8266: RELEASE=1 sets WIFI_DBG and NET_DBG to 0 to shrink firmware size\n\t    ESP8266: Add Wifi.setAPIP() and Wifi.setIP\n\t    ESP8266: Add i2c clock stretch (#1097)\n\t    Fix E.FFT output (enable magnitude when one array specified)\n            Puck.js: Correct reading if using analogWrite to red LED and *then* using Puck.light()\n            Improved build process for all boards\n            Pin.toggle now returns a boolean (fix #1111)\n            nRF52: Now use 'high drive' mode for GPIOs\n            Puck.js: tweak IR duty cycle, with high drive GPIO range is ~3x more\n            nRF52: switch compilation to size optimisation, not speed\n            nRF5x: Allow services to be advertised (fix #996)\n            JSON.parse now throws an exception if an incorrect value type is found (fix #1117)\n            Pipe close event handlers now use 'this' arg - solves auto-closing pipe when piping from HTTP\n            nRF5x: stop app_timer NRF_ERROR_INVALID_PARAM errors (trying to sleep for too little time)\n            Added flash emulation to Linux port\n            Increase max graphics size from 1023 to 32767\n\t    Add Fat File System to boards with large Flash (ESP32)\n            nRF52: Don't get stuck in 'HID Busy' state if a HID send failed\n            Change name of socket close internal variable so it doesn't conflict with Pipe's close call\n            Stop pipe from causing errors if fields of the requested names exist but aren't functions\n            nRF52: Fix upgrade from older firmwares if saved code is in flash, reduce virtual pages to 2\n            Fix segfault detected by fuzzing (#1133)\n            Fix File.read so that end of file triggers pipe.end event\n            ESP8266: Add BOARD ESP8266_4M with 1600 vars, 64K save area and GRAPHICS (#1110)\n            ESP8266: Add ESP8266.deepSleep(micros, option) (#1102)\n\n     1v91 : Fix recent regression if no Boot Code defined at startup\n            Fix handling of return of rejected promise within a promise\n            Fix regression where HTTPS without cert/ca or key failed\n            nRF52: Making NRF.getPrimaryService/etc more robust\n            nRF5x: Add NRF.getAddress() - fix #1001\n            Fix bug that caused load() not to clear memory if only E.setBootCode was used\n            microbit: Update Espruino with pin polarity, so saved code gets loaded without BTN1 pressed\n            Fix bug that caused Bluetooth/TV/USB objects to be added in devices that didn't support them (fix #832)\n            nRF52: Increase custom UUID count from 3 to 10\n            Adding Global built-in objects like SPI1/Serial1 and Bluetooth to the docs\n            Puck.js: Tweak battery percentage calculation to try and make it more linear\n            Puck.js: Adjust Puck.light() levels based on battery percentage (and add comments)\n            nRF5x: Fix E.hwRand() (fix #1010)\n            Ensure tab complete/others include the Object proto even on functions/strings\n            nRF5x: Add NRF.restart() to force the restart of the Bluetooth Softdevice if required\n            nRF5x: Add E.setLowPowerConnection(bool) to allow continuous connections to Puck.js (fix #995)\n            Allow implicit conversion of hexadecimal strings to numbers (fix #1016)\n            Allow arrow functions inside nonexecuting functions (fix #1011)\n\n     1v90 : Fixes for Promise.all (passing in non-promises, pre-resolved, and ordering) (fix #976)\n            Fix arrow function bug when parsing multiple arguments\n            Added more helpful error messages for TLS\n            Allow `Modules.addCached` to take a function (makes module loading more memory efficient)\n            Re-add Espruino's old `rand` function (so no malloc, and ~1kB RAM, ~3kB ROM saved)\n            nRF5x: Ensure 'NRF.sleep' works even when connected\n            Fix bug when using >32 bit integers as array indices (fix #984)\n            Fix bug when parsing '.catch' while not executing (fix #989)\n            Stop PWM 'glitching' when moving from a nonzero value down to 0 (partial #991)\n            nRF5x: Add multi-channel hardware PWM (fix #991, fix #972)\n            'dump()' now outputs code written with E.setBootCode as well (fix #999)\n            nRF5x: Remember advertising information even after softdevice reboot  (fix #997)\n            nRF51: Remove heap placeholder on nRF51 as not needed since no malloc. Increase nRF51 var count (fix #985)\n            nRF5x: 'connect' event now contains address of device that has connected, and fix docs\n            nRF5x: Add a 'NRF.disconnect' function to disconnect a client that has connected to Puck.js\n            nRF5x: Fix timing accuracy problems with setWatch\n\n     1v89 : Allow entering of multi-line Templated Literals on the command-line (fix #970)\n            Make lexer fail when parsing non-templated strings with newlines in \n            Add 'let' and 'const' keywords - treat them like 'var' for now\n            Increased findDevices timeout to 2 seconds\n            Allowed 16 bit UUIDs to be specified as simply \"ABCD\" (no \"0x\")\n            Improved BLE error messages (especially from Promises)\n            Fix STM32F1 regression caused by F4 LSE fixes\n            Fix comma operator regression caused by recent arrow functions addition\n            Remove RTC changes for STM32F1\n            nRF5x: Make sure that updateServices(notify) on a non-notifyable service will just error, rather than reset (fix #973)\n            nRF5x: Ensure setWatch doesn't reset pin state\n            nRF5x: Reset pin states to default on 'reset()'\n            nRF5x: Move advertising back to 375ms (more reliable connections)\n            Puck: allow Puck.mag to work while magnetometer is on\n\n     1v88 : jshSetEventCallback callbacks now get an argument with the channel number\n            Tab complete now offers a much better set of completions (fix #926)\n            Fix emitting of events with long names (fix #906)\n            Ensure 'af_opendrain' pin mode gets remembered when saving (fix #890)\n            Add second Promise.then argument (fix #869)\n            Fix 'chained' promises (fix #894)\n            Fixed memory leak when automatically converting a simple object to a String\n            Added ES6 Template Literals\n            Initial commit of ES6 arrow functions\n            Add 'opendrain_pullup' pinMode (including emulation on STM32F1)\n            Make OneWire use opendrain_pullup (no resistor needed for short runs now)\n            Add Software I2C (with opendrain_pullup) (ref #549, fix #29)\n            Cope with new escape codes for home and end on Ubuntu 16.04 (27,91,70/72)\n            Tweak VGA output back porch to 2ms (so leftmost pixels always on screen)\n            Fix regression with 2 concurrent waveforms on different pins (fix #930)\n            nRF5x: add updateServices, and allow setServices to be called multiple times (partial #936)\n            Added Puck.getBatteryPercentage() utility function\n            nRF5x: setServices can now uninitialise SD in order to remove added services\n            Added E.lockConsole() for use with E.setPassword()\n            Calling jsvRemoveChild at end of array now updates the length (fix #946)\n            Allow padding to be specified as 3rd argument of JSON.stringify\n            JSON.stringify now dumps typed arrays as arrays (fix #489)\n            nRF52: BLE HID support and switchable Nordic UART\n            Fix STM32 regression where pinMode was set when it shouldn't have been\n            Add Third option to pinMode to allow the pin mode to be set while keeping it 'unforced'\n            Save and dump now keep track of whether pin mode had been forced or not\n            readFile (and File.read) now uses Flat Strings to allow more memory efficient reads (fix #932)\n            nRF5x: Add ability to get RSSI of current connection (fix #928)\n            More STM32 changes to LSI->LSE clock switchover to fix RTC misconfiguration on Espruino WiFi\n            Move LED + BTN definitions to Symbol Table (allows autocomplete)\n            When moving console before printing has started, move all buffer contents as well\n            Fix regression where replacing a function starting with 'return' with another would cause errors\n            Fix potential issues with Telnet server and return values from netCreateSocket/netAccept on some platforms (fix #931)\n            nRF5x: Add Puck.js self-test code, fix issue where analogRead reset pin state\n            nRF5x: Change central mode API to mirror Web Bluetooth\n            Fix switch fall-through to default (fix #964)\n            Started using jsvObjectRemoveChild to remove some internal object properties that are undefined (frees some variables)\n            Added E.dumpLockedVars() in non-release builds to help debug memory leaks in libraries\n            nRF5x: Added NRF.findDevices as a helper function to easily list BT devices in range\n            Console now prints the type of Objects if their constructor is in the root scope\n            nRF5x: setScan/findDevices now parses advertising data\n            nRF5x: Added Web Bluetooth style requestDevice function\n            Add spaces between large tab completes\n            Correct the handling of exceptions in promises\n            Ensure that exceptions have a 'stack' attribute if they can have children\n            nRF5x: Added list of free flash areas\n            Make sure Puck.js users can't overwrite bootloader/softdevice (doing so would brick the board)\n            Fix micro:bit/nRF51 ctrl-c behaviour (fix #905)\n            Simplified process.env on devices with little memory\n            nRF5x: fixed serial number reporting\n            Move button state setup to jshResetDevices\n            Had to remove 'dump()' and SW I2C on devices with very little flash memory (Olimexino/Micro:bit)\n\n     1v87 : Add support for compiling with float-abi=hard (even if it doesn't give us real-world benefits)\n            Add shortcut for quick execution of common call types\n            Fix BBC micro:bit save() regression from 1v86\n            Fix 'lock overflow' when calling methods with 'this' bound (fix #870, fix #885)\n            Fix jsvStringIteratorGetCharOrMinusOne for zero-length strings\n            Allow tab-completion straight after '.'\n            Make sure execution stops for native functions if there's an error when parsing arguments\n            NRF5x: remove setName and add functionality to setAdvertising, along with advertising interval\n            NRF5x: allow raw advertising data in setAdvertising\n            Add E.setPassword - allows Espruino console to be locked\n            Fix pin header numbering for BBC micro:bit (it changed for the production version) (fix #896)\n            Allow Magnetometer speed to be specified for Puck.js\n            Fix out of memory when appending a string to itself\n            Allow members of the same name as function arguments to be added to a function (fix #913)\n            Fix STM32F4 RTC stopping if reset during first 1 sec of boot, also fix Espruino WiFi board clock startup\n            Fix issue where native functions couldn't be replaced by non-native fns (fix #879)\n            If statements now return values (fix #909)\n            Fix >8 bit SPI when sending single elements with SPI.send (fix #897)\n            Sockets now fire 'end' events (fix #886)\n            Added Graphics.draw/fillCircle (fix #920)\n\n     1v86 : Compile Telnet server into linux by default, Add '--telnet' command-line option to enable it\n            Fix lock 'leak' in Telnet when Telnet is turned off\n            Add Telnet serial device to allow redirection\n            Create errors for unterminated expressions (fix #814)\n            Remove Espruino's built-in strcpy/etc\n            Remove Espruino's built-in maths\n            Add basic Taylor series sin and atan for when we're trying to save memory\n            Refactoring to use global var for lexer - save some memory and increase parse speed\n            Add .removeListener (fix #30)\n            Added better micro:bit `show()` that works well with Graphics\n            Add `require(\"Flash\").getFree()` as multiplatform way to find free flash pages (fix #815)\n            Add the ability to set clock frequencies on STM32F4 chips (like Pico) with E.setClock (fix #52)\n            `jsvEvaluate` now uses memory area for execution of JS strings (fix #817)\n            Add `E.setBootCode` to allow JS scripts to be run without being in RAM (fix #740)\n            'Expecting a number or something iterable, got X' changed to exception rather than warning (gives stack trace)\n            Drop '.init' and '.fini' symbols, allowing GCC 5.x compilation on STM32\n            Ensure that pinMode/digitalWrite is re-constituted properly by dump() and save() (fix #833)\n            ESP8266: add stack dump on fatal exception, ./targets/esp8266/printstack can extract a backtrace\n            ESP8266: move JswSymPtr and JswSymList to flash to free up gobs of RAM, bump jsvars to 1600\n            Fix write to flash when BLE connected on nRF51/2\n            Fix potential variable corruption issue when copying objects/arrays containing packed ints\n            Fix ESP8266 printLog memory leak (fix #852)\n            When parsing from a Native String (E.memoryArea), use Native String for function code too.\n            Added built-in Promise implementation\n            Fix broken Object.keys/getOwnPropertyNames caused by ESP8266 RAM saving tweaks\n            Add Object.g/setPrototypeOf (fix #856)\n            Fix memory leak when executing bound function with 'this'\n            Fix missing PBKDF2 & AES libs on Pico + Linux caused by an untested ESP8266 commit\n            Fix negative Date to string code (fix #854)\n            Convert type warnings to exceptions (to provide stack traces for problems)\n            Add uncaughtException event (fix #846)\n            Stop eval in a switch statement from confusing parsing (Fix #845)\n            Fix regression in 'mode' argument of SPI.setup (allows custom CC3000 pins to work)\n            Fix '.on' with long event names\n            Enable F4Discovery button pull-down. Newer boards don't seem to have one fitted\n            Add 'force' to 'Serial.setConsole' - you can force the console to stay in one place\n            Fix micro:bit compass problems (fix #864)\n            Ensure that Pico can properly enter deep sleep even if USB is never used\n            Only inline the very basic variable iterator functions (save enough space to allow Espruino board build again)\n            Don't include Promises on devices where flash memory of Scarce (fix Olimexino compile)\n            Fix glitches in PWM output when updating Software PWM quickly (fix #865)\n            Added `E.kickWatchdog()` to allow you to keep your JavaScript running - not just the interpreter (fix #859)\n            Ensure all pins set to AIN on startup\n            Fix regression where setWatch would remove pulldown from button if called after reset()\n            Reduce amount of flash available for saved code on Original Espruino (until we can get code size down)\n\n     1v85 : Ensure HttpServerResponse.writeHead actually sends the header right away\n             - enables WebSocket Server support from JS\n            Fix issue where GC'd objects referencing non-GC'd data wouldn't unreference it\n            Add E.memoryArea to allow memory addresses to be treated as variables\n            Fix STM32F4 LSI clock frequency - should make the Pico's RTC a lot more accurate (fix #776)\n            Added HeatShrink compression to saved code (instead of RLE)\n            If saving fails, delete command history and try again.\n            Make sure `reset()` resets the sleep and busy indicator pins\n            Now escape characters >=127 as well (fix #780)\n            Add decodeURIComponent (fix #779)\n            Allow reset();save() on one line\n            Fix potential issue parsing HTTP headers when more data is sent after the header (fix #783)\n            Fix broken storage of floating point values when <255 variables\n            Fix regression where DACs didn't work on Original Espruino Board\n            Improve tab complete's memopry usage\n            Added Tab complete and Debug to low-end Nordic uCs\n            Limit the number of events processed each time around the idle loop to the number that were in it at the start\n             - helps to fix issues with out of memory when receiving big files over ESP8266 serial connection\n            Allow different types of network to have different buffer sizes - enlarge JS, Linux and WIZnet buffers\n            Fix bug where clearInterval() and setWatch with debounce could cause setWatch to momentarily stop working\n            Make HTTP server only close connection after Content-Length bytes received\n            Speed up jsvNewFlatStringOfLength by combining it with updating the free var list\n            Update the free var list when garbage collecting (makes allocation at the start of memory more likely)\n            Don't zero the contents of memory when freeing - speeds up deallocation\n            Removal of un-needed zero initialisations for variables\n            Only garbage collect on idle if we're low on memory (fix #767)\n            Improve malloc behaviour for crypto lib (try and free all command history is first alloc fails)\n            Improve HTTPS error messages\n            Add READ_FLASH_UINT8, allowing ESP8266 to read&exec strings stored in Flash with E.memoryArea\n            Start the RTC up running off LSI, and switch after a few seconds if the LSE has started correctly\n            Allow JSV_GET_AS_CHAR_ARRAY to get a pointer to memory in ArrayBuffers or memoryAreas\n            Reset PinStateIsManual in reset (fix #765)\n\n     1v84 : Fix device initialisation flags not working when the device number is above 32 (fix #751, #748)\n             - this fixes broken SPI when not on standard pins\n\n     1v83 : Moved to size optimisation for Pico (needed to get HTTPS into 384kB)\n            Ensure Modules.addCached doesn't reset parse state (fix #723)\n            dump() in Espruino Pico now ignored the pull-down for the button (fix #731)\n            Warn when \"compiled\" functions gets into Espruiono (fix #707)\n            Fix lost character on Espruino Startup (fix #704)\n            Fix duplicated characters when USB+USART IRQs fire at the same time  (fix #635)\n            Fixed Serial.find(...)\n            Detect UART framing and parity errors and emit them as events on the Serial object\n            Fix [] instanceof Object (fix #737)\n            Fix regression in jsvCopyNameOnly (Object.getOwnPropertyNames when names are >8 characters long)\n            HTTP requests (and sockets) can now emit 'error' event (fix #706)\n            Add optional `ca`,`key`, and `cert` for server public key when using HTTPS or TLS (fix #736)\n\n     1v82 : Fix debugger regression (where quit/reset/etc don't exit properly)\n            Fix wakeup when setDeepSleep used at startup (fix #645)\n            Add `shiftOut` function (fix #631)\n            Store line numbers for functions (via `Esc [ 1234 d` escape code before decl) and use in debug + stack traces\n            Allow Ctrl-C to break out of tight loops with function calls in\n            Add tab -> autocomplete in Console (fix #677)\n            Fix I2C repeated start (#390)\n            Fix regression in Math.random() - now back between 0 and 1 (fix #656)\n            Fix `var a=0;typeof a -> \"undefined\"` (fix #683)\n            Don't store brackets in functions (fix #204)\n            Store functions as 'flat strings' if long enough (fix #467)\n            Move most functions out of jsvar.h header file - improves code size on devices where they're not inlined\n            Fix parse error for switch statements which meant that `switch (a,b)` caused an error\n            Fix error message when `LoopbackA.setConsole()` called\n            Move SPI/I2C/Serial initialisers to jsvReadConfigObject, will now error on invalid args (fix #413)\n            Fix issue where double-buffered waveforms would use the wrong buffer in the callback\n            Fix memory leak in tab autocomplete on objects\n            Added AES crypto library (Pico only)\n            Fix `typeof (new Uint8Array([1, 2, 3, 4]))`\n            Store `function(){return ...}` without the return (fix #700)\n            Increased simple string usage from 4 chars up to 8\n            Swap order of JsVar internals, string usage up to 10 chars\n            Add handling for uint32_t,uint64_t,uint32_t case for Raspberry Pi\n            Add startup sanity checks for jsnative.c (in non-release builds)\n            Added fix for returning floats on Raspberry Pi\n            When <1024 JsVars, `lastChild`'s top bits are stored in `flags`, and pack\n               is moved such that we get 1 extra character in StringExts\n            Allow events of >12 characters length\n            Fix regression in flash memory write (introduced via AES merge)\n            Fixed instability when resetting after using SD card on non-standard pins\n            HTTPS support on Pico (when compiled in)\n            Rename USE_HTTPS to USE_TLS, and enable by default for Pico + Linux\n            Add 'tls' module with 'connect' - for TLS Socket connections\n\n     1v81 : Fix regression on UART4/5 (bug #559)\n            Fix Serial3 on C10/C11 for F103 boards (fix #409)\n            Remove Graphics.setColorHSV, add E.HSBtoRGB (fix #554)\n            Make jsiDumpState/jsiAppendHardwareInitialisation use callbacks (fix #398)\n            Add `E.dumpStr()` to dump current state of interpreter as a string\n            Add ReferenceError, and ensure that TypeError gets converted to a string properly\n            Actually create ReferenceError for undefined variables\n            Fix Object constructor behaviour (fix #561)\n            Now remove intervals/watches if they occur within 0.1s of a Ctrl-C on a blank line\n            Fix parsing of trailing commas [,,1,,,]\n            Treat vertical tab as whitespace\n            Make sure we ReferenceError on '+='/etc\n            Allow reserved words in record access and structure definitions\n            Add Object.defineProperty/defineProperties (even if they ignore most args)\n            Fix value returned when redefining an existing function\n            Ensure Pico powers down USB in deep sleep - now down to 20uA!\n            Fix Exception throw within catch block (fix #566)\n            Fix issue where new Array(3.0) wouldn't produce a 3 element array\n            Keep track of modified area in Graphics (so modules with `.flip()` can be speeded up)\n            Fix `new Date('December 17, 1995 03:24:00')` - check only first 3 chars of month\n            Allow Software PWM via `analogWrite(..., {soft:true})`\n            Add `encodeURIComponent`\n            Make sure `typeof unknown` doesn't ReferenceError\n            Fix isNaN behaviour for 2 element array\n            Fix jshPopIOEventOfType when element is at the top of queue anyway\n            Produce more reasonable behaviour when converting very long strings to ints/floats\n            Added built-in JavaScript debugger! See espruino.com/Debugger for details (fix #37)\n            Fix crash when using E.getSizeOf() in some cases\n            Make sure a TCPIP connection closes even if no data sent\n            Make `flash.erasePage` safe if called without arguments (fix #586)\n            Add `Pin.getInfo` to see what a Pin can do (for #93)\n            Move Pin function code out of jshardware\n            Add `E.on('init', ...)` - like `onInit` but allows multiple handlers\n            Make sure `dump()` and `E.dumpStr()` dump the contents of Serial as well as events for other objects\n            `E.getSizeOf(.., 1)` can now recurse into objects showing the sizes of all their children (fix #579)\n            Fix bug when appending to a flat string (fix #614)\n            Add `Serial/SPI/I2C.find(pin)` - so we can figure out what device to use based on the pin\n            Ensure that when uploading, each command gets checked for errors (rather than right at the end)\n            Fix writes on HTTP requests after a timeout, and add chunked encoding if the header is set.\n            Added pin info for bit-banded pin addresses (and jshGetPinAddress).\n\n     1v80 : Fix SD card IO that can corrupt SD card on file append since 1v73 (fix #536)\n            Fix some potential pointer issues in hashlib\n            Make debounced setWatch output state+time information (regression fix #537)\n            Shorten some internal property names (faster/less mem is 4 chars or under)\n            Change 'internal property' prefix from '>' (fix #540)\n            Duplicate properties in an object defn. now cause second to be used (fix #495)\n            Make sure `E.unmountSD` doesn't forget custom SD card configs from `E.connectSDCard`\n            Added support for USB CK pin (fix #544)\n            ES5 parseInt behaviour - don't treat numbers beginning with 0 as octals (fix #538)\n            SPI.send now returns Uint8Array when passed an array. Also takes `{data:X, count:Y}` as argument (fix #485)\n            Fix `parseFloat(Infinity)` (fix #314)\n            Speed up jsvIterateCallback for arraybuffers\n            SPI speed improvements, esp for SPI.write (fix #547)\n            TV out tidyup, and VGA output can now do line doubling\n            Merge in USB HID support for STM32F4 (keeping old USB for the F1)\n            Add built-in 'Flash' module to allow Flash memory to be accessed from user code\n            Pulled load/save code out of jshardware into jswrap_flash.c\n            Remove jsiOneSecondAfterStartup from Linux builds (fix #551)\n            Add RLE compression when saving to flash, increase Pico RAM from 3000 to 5000 vars (fix #543)\n            Fix `JSON.parse` when not given strings (fix #546)\n            Tweak Olimexino board - 700->1k vars, but lowered code flash to 6k\n            Disable flash prefetch on Pico (~1% slower, but less power and way more accurate ADC readings) (fix #545)\n            Now throw errors when 'in' is used on an invalid datatype (fix #550)\n            Updated (inaccurate) docs for Serial.write/print and removed duplicated code\n            Changed Pico's device class to 0x02 - now works on older Mac OS 10.6.8\n            Change reported USB HID type to 0, from 2 (mouse)\n            Improve digitalWrite/etc documentation\n            Add `pin.mode` and `pin.getMode` functions (mirroring `pinMode`)\n            `Serial.setup` now remembers options if none specified (fix #557)\n\n     1v79 : Fix Mac address parsing for top nibbles\n            Make bind reference function internals not copy them. Fix scoped vars in bind (fix #533)\n            Use jsvUnlockMany to tidy up code and save some space\n            jsiExecuteEventCallback can now take an arbitrary number of arguments\n            Allow setTimeout/setInterval to take extra arguments (fix #532)\n            Ensure HTTP is closed even when no data handler (fix #535)\n            Seed random number from analog input, add W.hwRand and E.srand (fix #534)\n            Fix timing bug when setting timeouts from intervals in Deep Sleep\n            Reduce timeout for IO (eg. I2C write) on F401 and F4\n            Tweaks to keep code size low enough for Olimexino\n\n     1v78 : Fix regression where SPI2/3 weren't working on most pins (fix #525)\n            Allow MAC address to be set for WIZnet (fix #527)\n            Ensure res.on('close') is called for empty HTTP requests (fix #528)\n            Ensure that A9 is never the default pin for USART1 output (fix #526)\n\n     1v77 : Add E.mapInPlace\n            Allowed ArrayBuffer Graphics to store pixels MSB-first\n            Added faster software SPI path for simple writes\n            Make sure filesystem support gets compiled into Espruino Pico\n            Fix jsvGetFlatStringPointer to return the correct address\n            Fix I2C2/I2C3 on Pico\n            Fix issue where garbage collect of a Flat String corrupted the free variable list\n            Fix issue where Array.sort on big array with identical elements failed (#515)\n            Add 'modules' variable, and set 'this' to 'exports' when parsing a module (fix #520)\n            Fix instanceof implementation (and fix mem leak) (fix #523)\n\n     1v76 : Merged in NetworkJS library (for JS networking implementations)\n            Ensure that 'wrapped' libraries are killed before timers/watches\n            Made 'Field or method doesn't exist' report back the field that doesn't exist\n            Added quick and dirty scripts/test262.js runner script\n            Fix propogation of Errors and Exceptions through function calls\n            Allow parsing of integers > base 16\n            Now allow functions with >16 arguments (fix #490)\n            Fix assert fail for syntax error in do or while loop\n            Maths operations now call Object.valueOf if it's needed\n            Fix assert fail when jswrap_object_getOwnPropertyDescriptor called with non-string\n            Fix Array.indexOf when array contains non-basic values\n            valueOf returns a type error when called on undefined\n            Make sure analogRead doesn't overwrite pin state if it was set previously with pinMode\n            Make sure pinMode works with ADC input mode\n            Tweak event handling - events such as `Serial.on('data'` now set `this` to `Serial`\n            Add Function.bind (fix #318)\n            Fix SPI.setup memory leak (fix #496)\n            Fix assert fail on debug builds on Waveform output (fix #511)\n            Added more allowed types of whitespace\n            Added String.prototype.trim() (fix #507)\n            Allow argument lists in Function() (fix #505)\n            Propagate `this` into eval (fix #513)\n\n     1v75 : Fixed issue with Pins/Bools as Array indices\n            Fix crash when out of memory while creating built-in object\n            Fix continue statement in nested loops (fix #501)\n            On Linux, Exit nonzero when an error occurs (fix #499)\n            Ensure that pipes 'complete' if the source closes (was previously only the destination)\n            Make HTTP/Sockets throttle reads so internal buffers don't get full when piping\n            Added http statusCode, statusMessage, and httpVersion\n\n     1v74 : On Espruino Board, allow setTime to use full 64 bits so setTime(Date.parse(\"...\")/1000) works\n            Fixed issues with Waveform after 1v72 update to flat strings\n            Added 'global' built-in value\n            Fix inaccuracy of 'Date.now()' on STM32\n            Improve jsvIteratorGetIntegerValue speed for arrays (fix #493)\n            Change process.env.EXPORTS to something more useful for compiler\n            Fix issue with graphics fill on PCD8544 LCD\n            Add TypedArray.slice (from ES6) to help modules that use I2C\n\n     1v73 : Add Uint8ClampedArray, remove code duplication in ArrayBuffer (fix #486)\n            Fix regression where accessing certain member names of an undefined variable would cause a crash (fix #488)\n            Fix behaviour of char code 16 at beginning of the line (it now doesn't re-add the prompt after processing the line)\n            Added jspGetNamedVariable for use in compiled JS\n            Fix glitchy time values on the Espruino Board (fix #394)\n            Fix getTime()==0 in onInit, which could break timeouts in onInit after a reset (fix #462)\n            Refactor Software SPI code into jsspi.c\n            Allow filesystem to work on user-defined pins (fix #427)\n\n     1v72 : Stop RTC being reset by hard reset (getTime will now be time since power first applied) (fix #412)\n            Allow Function.apply to take typed arrays (fix #442)\n            Allow arrays to be passed to digitalPulse so square waves can be created easily\n            Force inlining of jsvLock/UnLock on most systems - improves performance a lot\n            Fix issues with SPI.write, CS, and out of sync receive bytes\n            Fix do..while without trailing semi-colon\n            Ensure that &,|,^,etc all have different precedences (without extra recursion)\n            Used new semi-recursive parse for expressions\n            Fix filled column when fillpoly is off the end of the screen\n            Fixed reporting of Serial RX pullup in `dump()`\n            Add input thread on Linux, and fix idle and Ctrl+C behaviour (fix #451)\n            Stop huge amounts of input events blocking Espruino's timers (fix #452)\n            Add ability to use serial ports on Linux with Serial1.setup({path:\"/dev/ttyUSB0\"})\n            Started ability to use SPI from Linux\n            Added 'net' library with support for sockets\n            Fix JSON parse of negative numbers (fix #456)\n            Only keep RTC settings if the relevant oscillator is running (fix #444)\n            Finally fixed sporadic compilation problems with '-Os'\n            Fixed issues with intervals in onInit (#462)\n            Remove libraries from root scope (fix #463)\n            Fix pin namings on Nucleo boards\n            Fix addition of stdlib's exit on Nucleo debug\n            Allow setWatch to execute native functions inside the IRQ\n            When dumping typed arrays, use the size if all elements are 0 (fix #448)\n            eval() can now access local variables and function arguments (fix #460)\n            Added 'flat strings' for typed arrays.\n              - these use a continuous chunk of memory so are much faster\n            Ensure that we only create as many Serial/I2C/etc items in Symbol table as we need (fix #453)\n            Allow modules to return whatever was assigned to exports - not just the original object\n            Allowed E.nativeCall (assembler/compiled functions) to execute directly from a flat string\n            Working F401 USB VCP bootloader\n            Make Press-poweron-release-press boot back into Espruino (this may confuse your OS)\n            Assert failures (in non-release builds) now reboot the system on ARM\n            Fix issues with freeing of variables not clearing the lock flags (fix #474)\n            Make Uint32Array actually return uints (even if they're so big they have to be represented as doubles)\n            Allow peek/poke to read and write arrays of values\n            Add Boolean constructor (fix #311)\n            Fix difference between String() and String(undefined) (fix #312)\n            Fix I2C/SPI on F401/F411-based boards (fix #470, fix #473)\n            Improved ArrayBuffer write performance\n            Massively improved ArrayBuffer Graphics fill performance for bpp<8\n            Fix issues with floating point on devices with <1024 vars (using 12 byte JsVar)\n            Add ability to change I2C bit rate from I2C.setup\n            Added VGA TV output\n            Added E.toString (for converting anything into a string)\n            Pulled Typed Array creation into its own function\n            Added E.toString and E.toUint8Array\n            Made I2C.readFrom return a Uint8Array (fix #479)\n            Allow multiple byte OneWire reads and writes\n            Fix setWatch on F3Discovery (fix #183)\n            Ensure that E.getSizeOf() works for ArrayBuffers (fix #484)\n            Don't allocate Flat Strings if we can get away with 2 normal string blocks\n              - it's actually faster to allocate and uses less memory\n\n     1v71 : Allowed WIZnet + CC3000 to be instantiated on any pins\n            Fix break inside loop inside case inside function (fix 428)\n            Added fs.stat and File.seek (fix #429, fix #430)\n            Allow use of DLE (char 16) on an empty line to turn echo off for *just that line*\n            Add XON/XOFF flow control on Serial + USB. This is enabled by default for Serial (fix #20)\n            Fix irregular timing on Espruino boards with clock crystal (inc rev 1v4)\n            Sort out 'Number()' constructor not being picky enough - parseFloat now parses 'Infinity' (Fix #325, mostly fix #322)\n            Stop iterator in FOR loop being called once more after a break\n            Fix bug allObjects found with iterating over undefined\n            Fix ArrayBuffer.sort issue with element size >1\n            Fix network de-initialisation on Linux\n            Fix reference count issue caused by removing a timer that had already been removed\n            Power up SYSCFG on F2/3/4 parts, allowing watch to work on ports other than A\n            Wait after setting the RTC time, to allow registers to update (fix #438, fix #441)\n            Now using gcc-arm-none-eabi-4_8-2014q3 for compilation - CodeSourcery stopped being supported\n\n     1v70 : Make pipe remove its drain/close listeners. Stops out of memory for repeated piping.\n            Fix parseInt for values too large to go in an int (#406)\n            Fix integer maths when result is too large for an integer\n            Fix mod operator with NaN/Infinity (fix #315)\n            Fix signed array values in PACKED_BIT devices\n            Drop JsVar size from 20 bytes to 16, increase Espruino variable count accordingly\n            Fix Array.fill on sparse arrays (fix #410)\n            Allow I2C repeated start (fixes some odd I2C devices, fix #390)\n            Refactoring to use iterators wherever possible\n            Merge fs_kill and file_kill to ensure that files always die before the filesystem\n            Add `E.unmountSD()` to allow SD cards to be removed once they have been used\n            Stop String.split(\"\") adding an empty elementy to the array\n            Tidy up linker script, allow F401 to use 3x16kB pages for storing program data\n            Fix regression in long timeouts (fix #416)\n            Use 'interval' var to specify if we're an interval or not (don't use 'recur' var)\n            Stop while/for/etc resetting exception state (fix #419)\n            Add  E.getSizeOf (fix #421)\n            Fix jsvCountJsVarsUsed for names with values\n            Make hidden names smaller to save a few JsVars\n            If there's only one function scope, don't define an array and save 2 JsVars\n            Fix setInterval on non-F1 boards (fix #415)\n            Fix issue where large doubles (> +/- 2^31) were converted to -1 rather than truncated ints\n            Fix E.getSizeOf (fix #424)\n            Fixed JSON indentation issue\n            Made 'pretty' JSON output look a bit better\n\n     1v69 : Fix 1v67's regression of digitalPulse when doing lots of pulses\n            Add configurable OneWire search command (for finding DS18B20s with alarm set)\n\n     1v68 : Fix memory leak in String.split\n            Fix references to `this` - you can now write `this[\"LED1\"]`\n            Fix memory leak when calling toString on a normal object\n            Fix memory leak in Graphics.createArrayBuffer\n            Fix memory leak when joining arrays containing null\n            Fix memory leak when syntax error while getting function arguments\n            Fix memory leak test when running on Linux\n            Fix memory leak in filesystem file open (when failure)\n            Fix memory leak on Syntax error\n            Stop multiple exceptions from being reported (eg. Syntax Errors)\n            Fix parsing of '!!' when not executing\n            Improve Error.toString, and fix bug when an exception was thrown from a function\n            Improve jsvObjectGetChild when out of memory\n            Switch native function decls from 32 bits to 16\n            Swap HY2.4 board to software LCD driver as well, work out pin mappings from PY file\n            Fix inaccuracy in setInterval, which had started since 32 bit switch in 1v65\n            Store JSWAT_EXECUTE_IMMEDIATELY in a way that will fit in 16 bit function decls\n            Allow bit-packing of refs for low memory boards (fix #145)\n            Now dump 'debounce' for setWatch\n            Make sure that dump() outputs correct JS for undefined variables\n            Allow pin counts per port of >31 on Linux-based systems\n            Fix issue with lost high-speed events when using setWatch with small debounce\n            Fix HTTP client regression\n            Fix Date constructor issue (uninitialised variable) (fix #408)\n            Fix invalid conversion of large ints to floats on ARM\n            Fix reset behaviour for non-standard default Serial ports\n\n     1v67 : Lower size of timer task array of devices with little RAM (fix #401)\n            Move hidden lists out of the root scope (fix #357)\n            Fixed exception catching\n            Fix Serial1 initialisation after 'reset()'\n            Fix parsing of try..catch when a serious error (not an exception) occurred\n            Stop the utility timer queue filling with WAKEUP tasks if Espruino gets woken up early\n            Add ability to specify default Serial TX and RX pins in BOARD.py\n            Reduce how many digits of floating point values are normally displayed\n            Fixed PWM output on B4 + B5\n            Fix regression when using pins as array indices\n            Remove negation for CHxN outputs - it seems they don't negate after all. Fixes PWM polarity on A7,B1,B13,B14,B15\n            Add pullup to USART RX. Reduces wakeups and random characters on Serial1.\n            Add error flags and E.getErrorFlags to report possible issues like buffer overflows and low memory (fix #136)\n            I2C timeouts now throw exceptions (fix #403)\n            Fix String.prototype.split with non-string args\n            Add fake digital pins D0..D7 under linux (helps with testing)\n            Rewrite ff_wtoupper and save 650 bytes \\o/ (fix #368)\n            Update Makefile to make it easier to cross-compile RPi->Espruino board\n            Fix HYSTM32_32 LCD at the expense of a bit of speed (fix #137, fix #327)\n\n     1v66 : Ensure that analogWrite(pin,1) works on negated outputs\n            Allow multiple Waveform playback on one pin (+ wave fixes)\n            Improve dump() for objects and Serial.on('data') (part of #397)\n            Fix Date.getSeconds,Milliseconds, and documentation on getMonth (#399)\n            Fix memory leak on Serial receive\n            Fix all Serial receive characters being 0 if no bytesize is specified\n\n     1v65 : SPI.send/I2C.write/Serial.write can now take variable number of arguments (fix #370)\n            Don't check for token matches where we already know what it should be (fix #280)\n            Improve file read speed for large reads\n            Waveform stability improvements\n            Fix Float32Array.set (and improve speed for non-float arrays)\n            OneWire library now uses hex strings for addresses rather than 64 bit ints\n            Fix issue with uninitialised function arguments (fix #391)\n            Fix parseURL for numeric keys in query string (fix #388)\n            When running JS files under Linux, do two parses to ensure that Functions are 'hoisted'\n            Add Object.create()\n            Add Function constructor\n            Add Object.getOwnPropertyDescriptor (although it won't return spec-compliant values)\n            Add some Stubs for inbuilt Date and Error classes\n            Added throw and try..catch..finally (see #40)\n            Fixed overriding of builtins with other Builtins\n            Added Date.valueOf\n            Stop warning about break at the end of 'default' in switch statement\n            Switch to 32 bit ints (fix #324)\n            Added Array.prototype.reverse, and also for ArrayBuffers (fix #389)\n            Swap JsVar fields around so everything is aligned on the correct boundaries\n            Merge jsvNewWithFlags and jsvNew - making variable allocation a bit faster\n            Fix changeInterval regression after int32 changes\n            Remove JSV_NAME flag - paving the way for more efficient variable storage\n            Store only 32 bit time for events (work out full 64 bits in event loop)\n            Increase event buffer size to 128 (from 64)\n            Enabled Graphics + CC3k support in the F3Discovery\n            Make `Serial.onData` call back with >1 char (#383)\n            Move `Serial.onData(...)` to `Serial.on('data',...)`\n            Add Serial.read/available/pipe (fix #383)\n            Add HTTP client/server read/available/pipe\n            Add documentation for events (and tidy it up for constructors)\n            Stop HTTP server closing before all data has been read\n            Fixed parsing of multiple shifts\n            setWatch now reports the pin back (fix #275)\n            Fixed memory leak in g.getPixel with arraybuffers\n            Fixed memory leak in \"\".indexOf(\".\")\n            Fixed ArrayBuffer Graphics where width*height*bpp&7!=0\n            Converted parse errors to throw exceptions\n            Added Date.parse and Date.toString\n            Fix parsing of integers that are too big to fit in an int32 (they're stored as doubles)\n            Fix Linux Espruino when no tty is present\n            Shave a few bytes off size of jsiDumpState using printf\n            url.parse now unescapes the query string (fix #227)\n\n     1v64 : Fix 'a=[2,3,4];delete a[1];'\n            Make sure parseInt(\"0x01\",16)==1 and parseInt(\"0x01\")==1 but parseInt(\"0b01\",16)==0\n            Fix equality check used in switch, so false !== 0\n            Improve Math.pow accuracy for small integer powers (fix #374)\n            Make Ctrl-C only interrupt code if it has been running for too long (fix Ctrl-C -> CC3000 restart issues)\n            Removed duplication in symbol lookup (fix #372, fix #323, fix #343)\n            Fix JSON.stringify with circular references (fix #378)\n            Fix String.indexOf when search string is bigger than the string being searched (fix #377)\n            Add String.prototype.slice() (fix #376)\n            Changed to more compact binary search symbol table (fix #278)\n            hasOwnProperty now doesn't check prototypes #24\n            Added Object.getOwnPropertyNames (fix #79, fix #158)\n            Move 'constructor' into the correct place, be more aware of builtins in prototypes (helps #380)\n            Handle __proto__ on builtin object types (eg. [].__proto__) (fix #381)\n            Remove indirection of __proto__ (fix #102)\n            Properly fix Object.getOwnPropertyNames (fix #380)\n            Remove jsvFindChild*Ref (fix #375)\n            Added LoopbackA/LoopbackB serial ports (fix #61)\n            Fix slowdown when lexing long strings\n            Remove Lock/UnLock in jslGetNextCh - should speed it up\n            fs.appendFile() now works even if the file doesn't exist (fix #385)\n            Support unicode escape sequence (\\uXXXX) but crop to 8 bits (fix #386)\n            Stop setInterval/etc increasing index numbers (fix #382)\n            Clear existing digitalWrites on reset() (fix #231)\n            Stop setWatch getting invalid data on load/save/reset (fix #254)\n\n     1v63 : Memory leak when defining functions (fix #359)\n            Fix Instance properties overwrite prototype (fix #360)\n            Fix `edit(functionName)` without quotes (fix #356)\n            Fix 'Uint32Array is not unsigned' (fix #330)\n            Ensure Object.keys([9,,undefined,9])==[0,2,3] (partial #349)\n            Store array length in the array root node rather than the last element (fix #351 #361)\n            Object.keys on array now returns strings (fix #348)\n            Remove jsvArrayGetLast (fix #363)\n            Fix issue parsing `function() { return }`\n            Stop jspNewObject creating a new object name if one already exists\n            startup_stm32f10x_hd.s now explicitly sets the stack pointer. Allows Espruino images to use more RAM\n            Add BusFault hander, to allow peek and poke to unmapped addresses without HardFaulting the ARM\n            Fix edit(...) so that functions themselves (not just the variable) are updated (fix #366)\n            Crop lines in errors when > 60 chars (fix #364)\n            Improve when stack traces happen for error reporting\n            Better error messages, and more efficient handler\n            Improving Util Timer rescheduling to try and avoid 64 bit divisions\n            Fix a lot of WIZnet W5500 issues (thanks @mgg1010!)\n            Add E.reverseByte\n            Add HIGH and LOW (fix #371)\n            Improve docs for SPI/I2C/Serial.setup\n            Force reconnect on CC3000 disconnect (fix #373)\n            Added cephdon's streaming file API (fix #12)\n            More WIZnet W5500 stability fixes - try and ensure that HTTP server never goes down\n            Fix HTTP client Host header when accessing ports!=80\n\n     1v62 : Added ArrayBufferView functions as per ES6 spec (fix #310)\n            Added Graphics.setRotation (fix #321)\n            Added Graphics.drawImage (fix #198)\n            Added E.toArrayBuffer for fast string->array conversion\n            Accessing an undefined array/object element now doesn't create it (fix #63)\n            Fix fs.unlink returns true if the file does not exist (fix #331)\n            Try and improve timer overlays by reordering the alternate function list\n            Ensure that PWM output doesn't enable negated/non-negated outputs when it doesn't have to\n            Improve console performance when sending long strings\n            Initialise Graphics flags Graphics.createCallback - could have caused all kinds of issues\n            Now make setInterval > 5s less accurate when setDeepSleep is on (saves ~0.5 sec of non-sleep time)\n            Fixed problem when accessing an array with a string in a variable\n            Fix issues with `\"0\" in {0:1}` (and hasOwnProperty)\n            Improved interpolate function, and moved it out of ArrayBufferView into E\n            Fix Problem with Object.keys on a string (fix #347)\n            Fix assert fail when deleting a property that doesn't exist (fix #344)\n            Ensure that dump remembers function names if they were in the root scope (fix #338)\n            Fix memory leak in fs.readdir\n            Ensure that abbreviations in console's '=...' output appear on newline if needed\n            Add String.replace (fix #334)\n            Make Graphics.drawImage draw bottom line of pixels (fix #329)\n            Add Array.shift/unshift (fix #342)\n            Fix Defining function after return causes error (fix #326)\n            Fix deleting the last element in array (fix #346)\n            More helpful I2C error messages (fix #10)\n            Fix overriding built-in functions (fix #202)\n            Add ES6 Array.prototype.fill (fix #317)\n            Modified jsiQueueObjectCallbacks (and Object.emit) to support >2 args\n            Added support for SPI LSB-first\n            WIZnet improvements (specifically on HTTP server)\n            Added WLAN.setIP for CC3000\n            Fix String.split issue with last element (fix #352)\n            Remove order warning for SPI if no order given (fix #353)\n            process.env will now contain the git commit\n            Move setInterval/Timeout implementations into jswrap_interactive (makes more sense)\n            Add setWatch warning if it's not possible (fix #337)\n\n     1v61 : Fix toString crash for large numbers\n            Support floating-point literals without a leading 0 - eg '.5' (fix #296)\n            Fix array access with booleans (fix #290)\n            Fix \"==\" issues where only one argument is an array (fix #283)\n            Make Array.join ignore null values (fix #289)\n            Callback graphics now works even without a fillRect implementation (fix #295)\n            ArrayBuffer Graphics now supports 2 and 4 bits as well as 1,8,16,24,32 (fix #301)\n            Allowed array.splice to as many arguments as needed\n            Make Array.sort() use string compare by default (fix #291, fix #292)\n            Allow [,] and [1,2,,4] - (fix #287)\n            Stop JSON.stringify using 'undefined' (fix #286)\n            function.call can now have more than 4 arguments\n            Rewrite native function caller (fix #277)\n            Fix conversion of floats to booleans (fix #307)\n            Fix parseInt of NaN/Infinity (fix #309)\n            Add extra escape codes in strings (fix #304)\n            Ensure String.charAt returns empty string for out of range (fix #305)\n            Make REPL faster when receiving large amounts of data (fix #303)\n            Improved jspeFunctionCall speed, added Named functions (fix #77)\n            Allow Array.map.forEach to be applied to Strings and ArrayBuffers (for #310)\n            Tweaks to make more Array functions work on non-arrays\n            Added Array.reduce\n            Allow commas in expressions at end of for loop - `for (;;i++,j++)`\n            Fix SPI send with a single number\n\n     1v60 : Fix unary plug on variable not working (fix #268)\n            Added DNS with eth.setIP() for W5500\n            Fix lock 'leak' when creating Graphics with callbacks\n            Small fixes for trigger/timer\n            Make dump() + console aware of built-in SPI/I2C/etc\n            Add Pin constructor for converting numbers into a pin object\n            Added getPinMode\n            Fixed I2C saving state (fix #270)\n            Add JTAG to ignore list for some boards\n            Fix LCD FSMC formatting and report if LCD is unknown\n            You can now reference built-in functions. eg. [1,2,3].map(Math.sqrt)\n            Add Object.valueOf - help with #187\n            Add Object.hasOwnProperty (although it does have some false positives) - #24\n            Add software SPI - fix #41\n            Fix issue when constructing an ArrayBuffer with a floating point length\n            Fix Math.round regression and add checks to ensure it can't happen again\n            Fix DEVICE_IS_XXX defines (fix SW SPI regression)\n            Fix hardware SPI regression (getting out of sync after ArrayBuffer write)\n            Removed non-standard Integer.valueOf - use \"A\".charCodeAt(0)\n            Fix non-standard ArrayBuffer behaviour when constructing an ArrayBuffer from an ArrayBufferView\n            Fix `1 in [2,3,4]` behaviour - it searches keys, not values\n            Make parseInt(..., >36) return NaN\n            Make Number.toString() use lowercase chars for hex\n            Fix issues with NaN, negative zero, and Math.round\n            Fix equality checks with null\n            Fix comparison of integers with empty string/whitespace+number\n            Added nativeCall, which allows C/Assembler to be called from JavaScript\n            Fix custom font memory leak\n\n     1v59 : (function(){})?1:0 should == 1 (fix #261)\n            Fix Math.pow (Fix #260)\n            Fix String.split() (Fix #259)\n            Added Array.concat (Fix #262)\n            Increase RTC/getTime reliability by ensuring overflow can't happen\n            Added Math.min/max\n            Allow jswrapper to wrap objects with a name >8 characters long (fix #264)\n            dump() now doesn't print 'var X = undefined;' - just 'var X;'\n\n     1v58 : Fix Serial.parity\n            Fix glitches in jshGetSystemTime\n            Added Graphics.setFontCustom for custom fonts\n            Added String.lastIndexOf, and made String.indexOf with fromIndex work\n            Used non-bold vector font, improve alignment, and make curves lower quality\n            I2C can now write any size (as long as it fits on the stack!)\n            Try and enlarge fillRects caused by polygons\n            Fix === issues, fix #257\n            Add Graphics.getColor/getBgColor for Juergen\n            Added E.convolve for doing fast calculations with Waveforms\n            Allow String.fromCharCode with multiple arguments\n            Add builtin_modules to board's JSON\n            Added E.FFT for Fast Fourier Transforms\n            Added 16 bit read/write to Waveform (and speed up utility timer)\n            Fix utility timer - now interrupts just in time\n\n     1v57 : Tweak IRQ priorities to try and make SPI RX more reliable\n            Make http default to port 80 if no port is specified in options\n            Try and stop issue with System Time suddenly jumping forwards\n            Fix assert fail when clearing and adding timeouts from within a timeout\n            Fix modulo (actually remainder) operator for floating point values :/\n\n     1v56 : Added atob and btoa (for base64 encode/decode) - fix #244\n            Added Array.sort() - fix #220\n            fs.writeFile/appendFile now return false if they fail for some reason\n            Move Graphics init and idle functions out of jsinterface.c\n            Add HttpServer.close\n            Ensure that Linux command-line tests keep running if there's something to do\n            Epic networking refactor - it should now be possible to support multiple network devices in a single binary\n            Now only remove the interval/timeout/watch that's causing the error - not every one\n            Change names of functions in callback-based Graphics so they don't conflict with the real ones\n            More CC300 reliability - now range check the return value from send+recv, because if there's a timeout it can be wrong\n            Fix memory leak in setWatch with debounce\n            Fix 'repeat:false' in debounced setWatch\n            Make sure 'repeat:false' disables the hardware watch\n            Initialise RTC roughly 1 sec after reset, and use external 32kHz oscillator if it exists\n            Added E.enableWatchdog (fix #252)\n            Fix negative start value for String.substr()\n            Fix problem where the RTC's full 32 bits weren't combined properly\n\n     1v55 : Add String.toUpperCase/LowerCase\n            Fix E.getAnalogVRef() regression\n            Add Math.tan()\n            Ensure Double/Integer have Number as a prototype (fixes: Number.prototype.n=function();(5.0).n() )\n            ||/&& now doesn't use booleans (fix #251)\n            More resilient parseInt behaviour\n            Allow data listener for HTTP POST (fix #226)\n            Stop JSON.parse using eval (fix #249, fix #208)\n            `.toString` is now called when a String is needed from an Object (fix #57)\n            Fixed reference count error when looking for functions in an Object's prototype\n            Fix issues with Numbers as Strings in maths (eg. '-5'|0)\n            Make sure NaN|0 == 0 (and not some huge number)\n            Ensure that [1.23]*1.0 == 1.23 (fix #91)\n            Don't pull in cos (use sin(x+PI/2))\n            Try and save flash memory on Olimexino board\n\n     1v54 : Add 4x6 font (instead of 8x8)\n            Fix occasional instability with Waveform read/write\n            Refactor JSON to improve speed and code size (using cbprintf)\n            Now print special 'short' JSON for console.log (and the REPL) (fix #47)\n            JSON.stringify now doesn't print functions (fix #207)\n            Refectoring jsparse.c to name functions after their JS Grammar names\n            IF statement now accepts commas\n            Ensure that undefined+0 == NaN (only worked for floats previously)\n            Fix assert fail (issue unlocking when executing built-in functions)\n            Fix setInterval regression in dump (and tidy up code)\n            FS lib now resets when issuing the reset() command (fix #200)\n\n     1v53 : Attempt to deal with the case where CC3000 crashes on initialization\n            Fix regression with setInterval/timeout and saving\n            Fix issue with saving Serial baud rates\n            Added ArrayBuffer.set\n            Use jswrapper.c for executing idle/init/kill events for libraries (cleans up jsinteractive.c)\n            Added beta 'Waveform' API to allow simple audio output\n            Improved non-deep-sleep power draw by allowing Espruino to wake itself on the Utility timer (rather than SysTick)\n            Allowed Waveform API to output on both DAC and PWM\n            Improve auto-generated documentation\n            Speed up ArrayBuffer.set and allow Strings to be used properly\n            Fix jsvArrayJoin if memory runs out\n            Added E.sum and E.variance array operations\n            Added Waveform Analog Input\n\n     1v52 : Fix memory leak in Array.slice\n            Fix broken Serial initialisation (partial fix for #241)\n            Add fs.unlink (for deleting files)\n            Fix url parsing when there are two slashes\n            Fix recent changeInterval regression\n            Making CC3000 recover properly in the case of repeated HTTP GET\n            Add alternate function remapping for Serial and improve Serial.setup error reporting, fix #241\n            Added preliminary WIZnet W5500 support (see http://www.espruino.com/WIZnet)\n            Alt Enter (27 + 10) now always inserts a newline: (eg. for `if (X) \\n Y`)\n            Fix digitalPulse with not a number\n            Make digitalPulse(... 0) wait until the last pulse is complete\n            Stop Espruino sending out so many carriage return characters (fix #243)\n            Added 'delete' keyword (fix #39)\n\n     1v51 : Added debounce to setWatch (fix #14)\n            Tidy up timeout/watch code and now store an integer for interval\n            Fix crash in url.parse (string free)\n            Fix Modules.addCached bug which means that Modules.removeAllModules created a memory leak\n            Fix regression introducted by fix for #199\n            Added 'Esc,[,2,K' escape sequence for clearing lines. Much safer than Ctrl+C which tends to break out of execution.\n            Fix bootloader (broken by LTO in 1v49)\n            Added Number.toFixed\n            Make number.toString(base) work for floating point (fix #232)\n            Fix Linux jshSleep so that timeouts are handled at <10ms if required (fixes test056)\n            Now use jshardware's SPI for SD filesystems - more multiplatform\n            Now ref thisVar, which stops it being repurposed into a Name for array accesses (fix #233)\n            Fix Linux halting when there is one long timeout but no other activity\n            fs.readFile returns 'undefined' if file is not found. Also make readdir return undefined on failure (fix #229)\n            Remove disk_timerproc in SD card implementation\n            Upgrade fatfs to R0.10a\n            Tweak jsinteractive.c to help reduce code size\n            Finally added Long filename support for FatFS (fix #78)\n            Epic refactor to remove JsParse (fix #17)\n            Implement faster Graphics ArrayBuffer fill (affects vector fonts + clear)\n            Stop repeated analogWrite with messing up PWM waveform (fix #56)\n            Swap open and close brackets in bitmap font (fix #191)\n            Graphics arraybuffer/callback now accepts 16bpp\n            Added ability to specify a JS function for Graphics fillRect\n            Graphics setPixel(x,y,undefined) to use foreground colour (fix #215)\n            Make sure that interruptions are handled better while drawing to graphics\n            Make sure that stack overflow errors are handled more tidily (and increase limit for warning)\n            Increase available stack on Espruino Board\n            Stop FatFS using insane amounts of RAM\n            High res timer (now to 1/2^23) using SysTick with RTC as a base (fix #168)\n            Added 'Infinity' constant\n            Fixed type equality check between int and float (should treat them as the same)\n            Fix parsing of '018' - it's not Octal after all (but 017 is)\n            More accurate values for PI and E\n            Fix charCodeAt being signed (should be unsigned)\n            When casting Strings to booleans, so s.length!=0\n            Guess initial values for average SysTick time - means that getTime is more accurate for the first 1-2 seconds after startup\n            setWatch now reports lastTime - time of last state change #238\n            analogWrite now respects pinMode (fix #234)\n            Add Open Drain support to pinMode (fix #225)\n            Fix calling Number([value]) always returns undefined (fix #186)\n            When disconnected from the net, make sure we free all HTTP clients/servers\n            Completely remove IRQs from CC3k code\n            Speed up CC3k code, try and make it automatically power cycle it on timeouts\n            Fix SPI MISO on F4 board\n            Move CC3000 to SPI3 (same pins) so SPI1 can be used for other things\n            Compile CC3000 support in for the F4 (untested)\n            Process.env now reports board serial # and current console device (se we can throttle for Bluetooth) (fix #219)\n            General bugfixing for low memory situations\n            Make string free non-recursive\n            Fix issue where fs.readFile of a big file would cause Espruino to crash\n            Fix memory test harness\n\n     1v50 : Fix broken Web IDE caused by change to printing JSON for console.log (part of #206)\n            Fix bug when trying to stringify {5:5}\n            Allow {1:2} to be parsed (fix #199)\n            Added SPI RX IRQ. Caved in and used a few bytes for buffers, made SPI significantly more reliable\n\n     1v49 : Change compiler flags to allow link-time optimisation\n            Increase buffer sizes on Linux\n            Increase buffer sizes on boards with >= 20kB RAM\n            Made Startup banner smaller\n            Less printing when loading from flash\n            Don't display startup banner if loading from flash (an easy way to fix #213)\n            Fix HTTP response code of 0 (fix #212)\n            Add timeouts to TI's CC3000 driver\n            Add timeouts for SPI, and other timeouts now interrupt execution\n            Lower USB interrupt priority, remove pesky PriorityGroupConfig that was breaking other IRQ priorities\n            Until we sort out SPI RX and IRQs, lower default SPI baud rate to stop timeouts\n            console.log and print output JSON now (part of #206)\n            Added handling of query in url.parse - still not fully compatible though (fix #205)\n\n     1v48 : Fix issue where the size of command history is being reported wrong and so process.memory().free is reported wrong too\n            We now loop without a seek to position inside the string (much faster if loop is not near the start of a fn) (fix #53)\n            Faster string iteration which doesn't involve incrementing it->index\n            Swapped to jumptable to lexer (should be a bit faster)\n            Added the 'E' class, with getAnalogVRef and getTemperature (fix #60)\n            Deprecated Math.clip (not in spec) and introduced E.clip\n            Fixed bug in common.py that meant that ifndefs in JSON were sometimes not obeyed (better mem usage on small chips)\n            Fix deep sleep breaking ADCs\n\n     1v47 : Fix issue with dump() and input_pullup not being quoted\n            Fix regression that broke OneWire in Espruino Board (#197)\n            Fix clock speed issue on SPI1 (https://github.com/espruino/EspruinoDocs/issues/18)\n            Don't interrupt on USB ESOF or ERR  - allows 'normal' sleep without interrupting every 1ms (fix #195)\n            Remove pointless KickStarter line printed on startup\n            Added bootloader hack to Python bootloader\n\n     1v46 : Fix parseFloat(\"\") not returning NaN, and parseFloat(\" \\t 5 \u00a3$%^&(*$\") returning NaN\n            Added isNaN() function (fix #184)\n            Fix parse order for 'typeof' (fix #172)\n            Added Number object (fix #165)\n            Bounded ftoa (stops crash when printing Number.MAX_VALUE) - helps with #185\n            Added Array.isArray() (fix #160)\n            Add do...while (fix #151)\n            Stop Espruino board from crashing if you try to create a web server without a connected CC3k (fix #182)\n            Remove Array.contains as it's not in the spec (use indexOf instead if you need it) (fix #161)\n            Fix nasty bug where adding/removing intervals/timeouts while in one could cause issues\n            Fix bug when printing 1.999999999 and similar (fix #190)\n            Remove need for pow for exponentiation. Not great but it fixes some tests that failed on FP inaccuracies\n            Change polarity of setSleepIndicator (fix #194)\n            Allow array.push with multiple arguments (fix #189)\n            Speed up array access by searching from the end backwards if we think the number is in the last half (fix #46)\n\n     1v45 : Fix parseFloat(\"foo\") not returning NaN (and assert) - fix #149\n            Remove Integer.parseInt\n            Fix parseInt(\"bar\") - fix #150\n            Ensure that maths ops with null do treat it as 0 rather than a string - fix #156\n            Fix digitalPulse length (properly!) - fix #154\n            Making sure that undefined gets cast to NaN\n            Fix Array.indexOf() returns undefined instead of -1 - fix #155\n            Moved memory() to process.memory() - added more info too\n            Try and improve handling of PWM timer speeds\n            Fixed varying SPI baud rates depending on device\n            Makefile changes for OSX compile\n\n     1v44 : Modified build system to store binary names in the python definition\n            Fix nasty regression involving losing code at the end of Strings\n            Fix segfault when pinMode is called on an invalid pin\n            Now disable interrupts during 4 bit SPI send - it's just too much otherwise\n            Detect unfinished block comments in console (fix #138)\n            Fix flash write on most 10XxB boards\n            Fix PWM output on all STM32 boards\n            General hardware tidy in prep for more intelligent device management\n            Run initialisation code before setWatch, to make sure pullup/down is set beforehand\n            Change 'Pin' datatype to be an unsigned char - makes tests easier\n            Now use the hardware RTC for keeping system time. Allows proper deep sleep on Espruino board\n            FINALLY - fix the USB VCP lost characters issue (#94)\n\n     1v43 : Added 'Modules' object with support for adding/removing cached modules\n            Allow product ID to be changed via Makefile\n            Fix documentation (and old-fashined Parsing style) for JSON\n            build_jswrapper now outputs errors to stderr (more compatible with default (silent) build process)\n            Fix issue when parsing quotes in strings\n            Added void operator for closure minification compatibility\n            Ensure that return takes the comma operator\n            Fix issue where printing Infinity would crash Espruino (fix #129)\n            Finally some working (extremely beta) cc3000 code\n            Added jsvObjectGet/SetChild to simplify some wrappers\n            'http' now uses JsVars for storage (so is suitable for non-linux devices)\n            Turned 'http' into a library\n            Added process.version and process.env (fix #131)\n            Changed handling of 2nd arg of << so that precedence is correct\n            Fixed handling of 'for (;;)'\n            Fix lock leak in Module handling\n            Update ST's library for the STM32F1\n            Update ST's VCP implementation\n            Added prefix operator (fix #130)\n            Allow espruino for linux to be run with '#!' in scripts\n            Fix indexOf on final element of strings (fix #133)\n            Remove JSV_PARENTINFO, as it turns out JS doesn't keep track of function scopes anyway (fix #109)\n            Make 'this' a keyword (now faster, more memory efficient)\n            Make 'Hardware' (root) the default value of 'this'\n            Add jsvArrayPushAndUnLock and modified code to use it (fix #135)\n            Now remember I2C state (partial fix for #13)\n            Replace 'pow' function with a smaller version - save ~2kb\n            Shaved another 1200 bytes off jslTokenAsString\n            Now store Pin state (fix for #13 on F1 parts, F4 still looks broken)\n            Added Graphics.stringWidth\n            Added internal Printf function\n\t           Misc speed and code size improvements\n            This version has gone to Seeed for use on the KickStarter boards\n\n     1v42 : [ebirger] allowing 'new' with no brackets\n            Allow built-in functions with variable numbers of arguments (fix #83)\n            Implement 'String' constructor in the normal way (fix #110)\n            Fix regression with parsing constructors while not executing\n            Allow multiple arguments to print and console.log (fix #92)\n            Make 'arguments' array available in functions (fix #100)\n            Fix an assert fail, and handle some potential memory leaks\n            Don't show __proto__ and constructor with for..in, keys(), or JSON.stringify\n            Make 'trace()' output more readable debug data for complex structures\n            Fix memory leak whe parsing functions iwht variable numbers of arguments - fix #115\n            Defined NaN\n            Stop 'new undefined()' crashing Espruino - fix #120\n            Get A13/A14 working on Espruino board (these were JTAG)\n            Get bootloader size direct from Python (remove hard-coding)\n\t           Fix '~' operator when acting on variables\n            Made bootloader a bit more error tolerate (CRC on write)\n            Added %=, /=, and *= operators (fix #121)\n            Allowed Object.toString() to take a radix argument for integers (fix #125)\n            Fix error message issue - broken strncat (fix #124)\n            Add comma operator (fix #122)\n            Added some basic code for STM32F429IDISCOVERY - not currently working though\n            This version is the one sent off on the Test Harness (so will probably appear on boards)\n\n     1v41 : Fix Olimexino compile (https://github.com/espruino/Espruino/issues/6)\n            [ebirger] Member constructors (eg. new a.b() )\n            [ebirger] Ensuring integers with radix specifiers can still be parsed if a radix is specified\n            Fix for tests/test_json_arraybuffer_001.js - iteration of arraybuffers of length==1\n            Add Object.keys(...)\n            More arraybuffer iteration fixes\n            On linux, use built-in stringToFloat to aid debugging. Handle exponentials, fix #31\n            'make serialflash' is now works correctly for Espruino Boards with bootloader\n            setWatch(..A0);setWatch(..A0);clearWatch(1) does not now kill the other watch, fix #25\n            One-based setTimeout/setWatch, fix #3\n            Added Function.call and Function.apply, fix #54\n            'http' and 'fs' are now libraries that need to be 'require'd, fix #8\n            Updated pin info for STM32F103xC/D/E chips, fix #84\n            Fixed linker script for STM32F4 (discovery board now works)\n            Object prototypes are now Objects, fix #101\n            Board docs now specify '3.3v' only pins fix #104\n            Add Array.forEach\n            Fix searching down >1 prototype to find functions (one more issue posted in #99)\n            Fix \"12345\"/5 type issues (fix #90)\n            'Consting' some string functions\n            Fixing arrays with string indices that are actually numbers \\o/ (fix #19)\n            Released onto website\n\n     1v40 : Ensure that LCD.prototype.setPixel = function actually works\n            Refactor LCD driver code to allow lcdInit (and start of making it non-platform-specific)\n            Built 'LCD' support into linux/raspi/carambola\n            Add initial SPI.send(ArrayBuffer) support - even if NO VALUES RETURNED\n            Start of built-in Nokia 5110 LCD support\n            Remove GPIO clock removal on sleep for now (it kills setWatch)\n            Fix (sub)ArrayBuffer problems (test100.js)\n            Added setDeepSleep - still beta put power consumption drops to 1mA\n            Fix broken name for httpCRq.write\n            Changed LCD to Graphics - added ability to render to ArrayBuffer\n            Fix 8 char built-in class names\n            Adding preliminary Sony SmartWatch support\n            Adding preliminary support for completely bare 36 pin chip\n            Fixing pin defs for Espruino board rev 1v1\n            Added proper SDL/ArrayBuffer and JS Callback graphics support\n            Added \"ifdef\" ability in build_jswrapper\n            Take JSVAR_CACHE_SIZE out of jsutils and put it in the board config file\n            Added JSV_PARENTINFO which will allow us to do things like setTimeout(foo.bar,10)\n            Fixed arrays in non-executes streams - 'if (0) print([1,2,3]);'\n            Added 'require' function loading modules from node_modules on SD card\n            Added module cache to stop modules being re-loaded\n            Renamed internal vars to start with '>' - much easier to distinguish for 'dump'/etc\n            Only use parentInfo on functions\n            Load all tests in test dir - don't do them by number\n            Added 'zigzag' ordering for ArrayBuffer Graphics\n            Added 'vertical_byte' ordering for ArrayBuffer Graphics\n            toJSON now ignores 'hidden' object elements\n            Special-case jsvArrayBufferIteratorSetIntegerValue\n            Make SPI output an ArrayBuffer\n            Use best out of 3 for DelayMicroseconds calibration - something seems flaky right after bootup\n\t           Lines now drawn from p1 to p2 inclusive\n\t           Events now use jshPushIOWatchEvent (should cut down on code) also fixed bug with watching pin #11\n\t           Now remember if pinMode was set or not\n       \t    Transform ```code``` in JSON into a code tag in the documentation\n            Graphics now supports FSMC for HY boards again\n            Drawing vector fonts is now roughly the right size and position (still not 100%)\n            Remove registration code\n            Adding MPL licence\n            Remove Arduino bit manipulation functions - nobody seems to use them anyway\n            # of flash pages/etc now comes from board info\n            [ebirger] Supply the correct arguments to Array.map\n            [ebirger] Method calls and membership evaluation should be done on all factors (ee. [1,2,3].foo())\n            [ebirger] When running multiple tests, only set up terminal once or it breaks the terminal window on exit\n            Added STM32-style USB CDC bootloader for Espruino Boards\n            Added scripts/create_espruino_image.sh to package up bootloader and espruino into one binary\n            SHIPPED on Impatient developer boards\n\n     1v39 : Added Bitwise NOT operator\n            Added Raspberry Pi version to ZIP (with HTTP support)\n            Fixed load/save on Linux Devices\n            Added pinMode function (to allow pull-ups/pull-downs to be turned on)\n            SPI.send4bit/send8bit will now not mess up the final element\n            changeInterval now clears up stored up callbacks (eg, setInterval(.., 0.01)...wait...changeInterval(...,20)\n            Ctrl-C no longer prints anything, which avoids lockups\n            No longer print \"Execution Interrupted\" if nothing was interrupted!\n            Added >>>= >>= and <<=\n            When entering text interactively, ensure that there are no trailing spaces\n\n     1v38 : Tweaks for Arduino IDE compile\n            Removed '(char #)' from stack trace, as a bit pointless now\n            Added better reporting of execution location when Ctrl-C pressed\n            Urgent fix for non-working Olimexino since 1v33\n            Fix string comparison when strings contain \"\\0\"\n            Added LED1/2/OSC/SD/etc to Olimexino Board docs\n\n     1v37 : Urgent fix - power saving code made it difficult to re-flash Espruino (now only apply this to Espruino Board)\n\n     1v36 : Fix documentation for Array.pop()\n            Added some much better board documentation\n            Fixed DAC output on F3\n            Fixed DAC output on devices where PWM is also available and the alternate function is less than the DAC's\n\n     1v35 : Attempt to reduce power consumption when sleeping by turning off GPIO, and setting GPIOs to AIN on reset\n            Fix F3 issue where ADC/DAC weren't picked up properly\n            Tidy up register text and add KickStarter mention\n            var a = {}; a[LED1]=0; - not converted to String\n            JSON (and hence dump()) now dumps ArrayBuffer correctly\n\n     1v34 : Faster jshFromDeviceString\n            Preliminary support for flow control on Serial receive\n            Speed improvements by removing jsvGetRef from jsvUnLock\n            fast 4 byte pre-check in jsvFindChildFromString\n            Skip lock/unlock in FindChildFromString to help increase speed\n            When we unplug USB, only go to the default console device IF that is the device we're currently on\n            Support for custom Espruino board\n            Added ArrayBufferView.interpolate\n            16 bit SPI send for send4bit/sevrnd8bit (better reliability on low-end chips)\n            Fix JSON dump of typed array\n            Added Math.clip(x, min, max)\n            When saving on flash, don't do jslTokenAsString properly\n            B3/B4 move from alternate fn\n            Fix incorrect reporting of analog pins\n            Fix I2C.readFrom on STM32F1/4\n            Make 1/2 == 0.5 (was being sensible before, but now follow JS spec)\n            Ctrl-C while in timer fn clears timers (but not outside it)\n            Fixed broken clearInterval from within setInterval\n            Hopefully fixed issue on SSD1289 LCD controller\n            Trigger wheel handler to use interrupts\n            2D arraybuffer interpolation\n            Added Math.wrap, fixed a lot of trigger issues\n            Fixed SysTick priority/preempt problems\n            Slowed the SysTick timer back down for everything\n            Fix Int8Array signedness on F4 boards\n            Refactored source code tree\n\n     1v33 : fix character encoding issue of \"\\16\"+\"1\" != \"\\161\"\n            Refactoring of ArrayBuffer into iterator, and addition of a general purpose iterator\n            Fancier assert for debugging\n            jsvArrayJoin to use new iterator\n            for (i in ...) to use new iterator\n            I2C and SPI use new iterator\n            Serial.write() - to allow single ints to easily be written\n            changeInterval assert fail when given a function by accident\n            added peek8/poke8/peek16/poke16\n            memory() now takes account of command history size\n            memory() on ARM reports the end address of the stack - so it can be used as a scratchpad with peek and poke\n            Try and reduce code size by not inlining several functions\n            No refs for StringExts - so we get one more byte per JsVar (~5%) more storage efficiency\n            Move from jsvIsBuiltInFunction to computer-generated jswIsBuiltInFunction\n            When creating Objects, check for built-in function BEFORE creating an Object class for it\n            Built process now checks that flash usage is under the allowed value\n            Added short compare to jswHandleFunctionCall to reduce code size\n            Added 3 byte compare (4 byte read and AND off top byte) - faster, less code\n            Auto-generate jsvGetBasicObjectName from docs\n            No longer using refs for storing whether free or not - use flags with JSV_UNUSED and get one extra var with 8 bit refs\n            Switch to using STRING_0...STRING_MAX in flags, rather than specific bits in JsVarFlags - allows more that 15 chars to be used per JsVar\n            Make ArrayBuffers actually be ArrayBufferViews - saves on extra string-handling code at expense of one var\n            Make sure Uint8Array,etc inherits from ArrayBufferView\n            Fix issue where a '\\0' coming in from serial was not put in e.data properly\n            Don't inline some functions when we're trying to save on flash\n            Re-use sin for cos, pow for sqrt to reduce code size\n\n     1v32 : Fixed embarassing issue with 0.999==\"0.A\"\n            Added and checked Pin.writeAtTime on STM32\n            Now don't allocate events array - just allocate directly, which saves memory and is faster (although slighty out of order)\n            Docs: now Alphabetically sorted, and class instances not listed by accident\n            Fix issue where Ctrl-C on ANY Serial port caused execution to be interrupted\n            Updated busy indicator to cope with recent change to not allocate events in an array\n            Fixed I2C on HY 2.4 board - I2C needed hard reset\n            Added basic ArrayBuffers/TypedArray support\n            Fix memory leak when error created with [] on a non-array/object\n            Improved hyperlinking in documentation\n            Fix I2C receive bug on F4\n            Increased VL board's input buffer size\n\n     1v31 : Fix PWM output on TIMER1/8 pins of the STM32F4\n            Fix PWM output for negated timers\n            memory() now runs a GC pass\n            Fixed multiple occurrence of functions in reference\n\n     1v30 : STM32F1: fixed AF issue meant peripherals would never return from AF mode\n            STM32F1: When given an invalid pin, now reports if pins are 'af' or not\n            Updated SPI.setup docs to mention that you can't mix AF and non-AF\n            If one SPI pin is specified but others aren't, only that pin will be set up\n            Added Olimexino hack so SPI1.setup works as expected\n            Allow using [] on a function\n            Fix precedence issue, so var a = function() { return 1; }(); works\n            Update SPI documentation\n            for (i in f) can now iterate over functions\n            Optional argument to trace() for object to start tracing from\n            Small steps towards ArrayBuffers\n            Added smart edit that checks for internal functions, and uses Function.replaceWith\n            Added Function.replaceWith to replace the internals of a function while keeping the scope\n\n     1v29 : Some hacky sysfs-based IO for running on Linux\n            HTTP Callbacks are now stored as names so they can be changed on the fly (Linux only)\n            Successful compile for Carambola\n            Filesystem support on Linux\n            Switch to variable size ref counter (marginally more efficient on very small devices, safe on Linux)\n            Linux now has unlimited memory available\n            Added linux/sysfs 'setWatch' (non-irq driven, so very noddy)\n            Checked jswrapper check from using multi-char constants to a #define\n            Improve pin suggestions for SPI/I2C/USART\n            Auto-initialise USART with default values when setConsole is used\n            Support for new Graphics LCD types\n            3.2\" VCT6 board support\n\n     1v28 : Faster LCD fillrect for HY 2.8\n            Fix for multi-byte SPI writes on HY board at 1Mhz (touchscreen control bug)\n            Fix issue with delayMicrosecond calibration on HY (and hence OneWire)\n            Fixed digitalPulse on STM32VLDISCOVERY\n\n     1v27 : Fixed problem with OneWire constructor execution\n            Added |=, &= and ^=\n            Added Array.splice()\n            Faster, more ROM-efficient built-in symbol table\n            Fix for potential issue when using field accessor on an undefined var\n\n     1v26 : I2C Support on STM32F1 and STM32F4 boards too\n            Emergency cut in variables for Olimexino with bootloader (as flash usage has got too high for save to flash!)\n\n     1v25 : http.writeHead to accept an empty header\n            Fixed issue finding methods on built in classes (0 termination)\n            make sure http server with no data still sends headers...\n            Start of MINI-HY-2.8\" support (all ok, but no SD card yet)\n            Reduce RAM usage by consting some arrays that are not modified\n            Vector fonts now use polys - 8kb less ROM, and faster rendering\n            Start of LCD 'driver' code\n            Standard way of handling events, Object.on/emit/removeAllListeners - like Node.js's EventEmitter\n            Self-calibrating Microsecond delay (for intermal OneWire/etc)\n            OneWire class\n            Correct handling of built-in class constructors\n            Fix error when parsing a zero-argument function that has been given arguments\n            I2C support - currently ONLY tested on STM32F3 board\n\n     1v24 : SDIO-based fat driver on the HY STM32 board\n            Added DAC to the HY boards (103xE-based)\n            Re-named the fileSystem functions to make them more compatible with node.js (readFile/writeFile/etc)\n            Added fs.appendFile\n            Removed HTTP from the reference until it is included in some boards\n\n     1v23 : Fix 'ERROR: INTERNAL: stmADCChannel' on STM32VLDISCOVERY/F1 boards when accessing PA0\n            Reference now mentions which Espruino version it is for\n\n     1v22 : Important fix - Events got executed in the wrong order if they got queued up\n\n     1v21 : Ensure SPI clock does not stop between bytes\n            Added SPI.send4bit and SPI.send8bit\n            Made sure the VL board's code fits into available flash\n            Smart += that can append to a string rather than cloning it\n            dump() prints functions properly, rather than 'var f = function() {}'\n            Pageup/down move the cursor to the beginning/end of input\n            LCD draw/fill with negative x and y\n\n     1v20 : Add console.log\n            Fix automatic usleep for Linux\n            Added node.js-style HTTP server for Linux version\n            Fixed null-pointer issue when accessing something that doesn't exist on an object\n            Added node.js-style HTTP client for Linux version\n            Start of bit bashing functionality\n            for (i in \"ABCD\") console.log(i) -> 0,1,2,3\n            String array access (but not for writing - doesn't work in JS anyway)\n            String String.fromCharCode / charCodeAt\n            Added SPI baud rate setting\n            Vector font chars 'a' and '4' now work ok\n            Fix numeric exception when rendering a poly that has some identical points\n            Better digitalPulse (uses timer + interrupts)\n            analogWrite can now take an object with a 'frequency' argument for PWM\n\n     1v19 : Fixed issue where var M=Math;M.random() failed\n            Fixed issue with var U=USB;U.print(\"Hello\");\n            Remove loop iteration limit\n            Fix memory leak when a syntax error is in for '(i in arr)'\n            Save state of pin on setWatch interrupt (e.state)\n            Change setWatch to allow only on rise or fall as an option\n            clearWatch() clears all watches\n\n     1v18 : DAC support on F3/F4\n            Serial.setup() can also take a second parameter of an object {tx,rx}\n            Better support for dump() with echo/setBusyIndicator/etc\n            Better dumping of prototypes on built-in vars\n            Don't add chars<32 (Except tab) to the input line\n            SPI1/2/3/4.setup() to take an object {baud,sck,miso,mosi}\n            Better hardware initialisation code (not UARTS auto-init if they are used)\n            Fix issues with prototypes\n            Peek/poke instructions\n            Start of I2C support (not usable yet)\n            Added Math. ceil/floor/exp/log\n\n     1v17 : Support for running alongside the Maple bootloader\n            Fix parsing of numbers beginning with 0 when forceRadix!=8\n            Fixed USART1 on Maple/Olimexino devices\n\n     1v16 : Inlining of jsvLock/UnLock in jsvar.h to improve speed\n            Move non-hardware-dependent stuff into jsdevices\n            Move jshardware.c into targets/stm32/jshardware.c, create 'targets/linux' and use a single makefile\n            For + While loops work without reallocating lex\n            Fix AddNativeFunction when function already exists (and tests + saved state)\n            Change jsvFindChildFromX to use JsVar* from JsVarRef - saves a lot of lock/unlock\n            Handle new Foo() as per spec (return value + init of this+prototype) - still does not cope with non-object prototype\n            Beginning of SD card support (works on Olimexino, but not very flexible)\n            Fix for parse/eval when given non-strings\n            Strings can now contain '\\0'\n            Jumptable-friendly reserved word check\n            Jumptable-friendly builtin functions (massive refactor)\n            SPI support\n            HY board support, and graphics LCD\n            Added fillPoly, and Vector fonts\n            Added Registration code\n            Fixed some undefined function/array warnings\n            Much better HTML function documentation\n            Fixed edit() function\n            STM32F3 support, and now peripheral stuff is done with a script\n            explain what pins are available if a pin is not capable of requested fn\n            power on ADCs only when needed\n            LCD fillPoly speed improvements, + drawLine\n            Add datatype for Pin, so pins written to console by pin name rather than integer value.\n            Added Pin.set/Pin.reset\n            Change warning about 'undefined.' into an error (foo.reset() had unexpected consequences!)\n            Fix parsing of '1.0/-3'!\n            Add typeof and instanceof operators\n            Ensure that Serial1/SPI1/etc are objects of type 'Serial'/'SPI' - so prototypes can be added\n\n     1v15 : Escaping JSON strings\n            Fix parsing of octal numbers in strings (so don't have to be 3 chars long)\n            Drastically improved stack usage using small stub functions (at expense of a bit of speed)\n            dump() also dumps out prototypes for functions\n\n     1v14 : Fix complaint about pins during setBusyIndicator()\n            Increase available memory on OLIMEXINO\n            Added function memory() to return memory usage\n            setWatch now links to function names (rather than just functions)\n            dump() also handles Serial.onData(...)\n            Fix issue with JSON printing functions with arguments to console\n            prefix builtin variables with '_'\n            fix ArrayIndexOf when array contains undefineds\n            move all devices into one git repository\n            USB on F4\n            call onInit function/string if it exists when Espruino powers on\n            Compile F4 with -O2 - as we have the program memory for it\n            Serial3/4/5/6 on F4\n            Serial3 on Olimexino\n            Make Serial.onData() clear onData handler\n\n     1v13 : Operations like + on Object/Array convert them to strings rather than error\n            var now doesn't error if there is no semi-colon\n            Allow new line or line delete in multi-line editing\n            add edit(functionName) - which copies function definition into inputline so it can be updated\n            When printing lines, delete current inputline and then put it back in idle loop (only if echo=1)\n            Support *,/ etc on numpad\n\n     1v12 : Issue when printing lots of data and then disconnect USB\n            Hide USB/Serial in Dump()\n            add Array.map(fn(x), thisArg)\n            For newline, count [] and () (as well as {}) - also knows about comments/strings/etc\n            Fix assert fail is setTimeout with non-function\n            If space at end of input line, enter still executes\n            Removed some hard-coded arrays in favour of JsVar strings\n            Fix confusion with jsvIsName/jsvIsString\n            Handle numpad end key\n            Add code to check stack and stop stack overflow if too much recursion\n            Ensure that setTimeout/setWatch store the link to a function, not the function\n            Fix nasty ref loop in ref loop GC issue\n            Add dotty output\n            Fix memory leak when error in jspParseSingleFunction\n            Now run Garbage collection if we're idle, and we know we have a few ms spare\n            Added setSleepIndicator\n            Fix line/col indicator in errors/warnings\n            Fix JSON parsing and printing when 'undefined' encountered\n            Rewritten object handling code to be way more standard JavaScript compliant\n            Array initialisation with 'new Array()', also for Strings\n            Added a few more built in functions\n            Nice error reporting with line + pointer\n            fixed Math.random\n            Binary style ops on doubles now work - they are just converted to ints\n            Added boolean datatype\n\n     1v11 : Add Math functions\n            Add command history (and dynamic history free if low memory)\n            Fix broken jsvArrayPop\n            Add tests for and fix Array.indexOf\n            In-line editing for commands\n            Fix bug in basicVarEquals for big strings\n            More fixes for low memory conditions\n            Multi-line edit for commands (but no newline or line delete yet)\n            Handle Home, End + reverse delete keys\n            Fix nested for loops not handling interrupts correctly\n            Fix AppendString issue when given start value greater than string\n            Add 'changeInterval' to allow things created with setInterval to have the frequency changed (eg. stepper motor control)\n            Now puts itself to sleep to save power, when it knows nothing is required and it'll be woken up by SysTick before\n            Change Math library to avoid putting constants in RAM\n\n     1v10 : Increase FIFO size for VL\n            Marginally decrease amount of F4 vars to ensure they all fit in one flash sector\n            Allow strings to be longer than the max token size\n            '\"key\" in obj' syntax\n            Detect if in FOR or WHILE loop, and if not, disallow break and continue\n            Change min setInterval time to 0.1ms - F4 can get close to this\n            Better analog pin error message\n            USB support on Olimexino/Maple\n            Start of multiple COM port support (ioEvent queue)\n            Ctrl-C now clears the input line\n            Save state of 'echo' into flash with save()\n            Add 'setBusyIndicator(pin)' to set pin high when Espruino is busy\n            Inbuilt function handling speed improvements\n            Allow Serial comms via other UARTS. Serial1/2.onData and print/println\n            now inserts elements into arrays in the correct order (GetLength can be (is) now much faster)\n            Faster code to work out pins from strings\n            Automatically convert IDs in form A#,A##,B#,B## etc into numbers.\n            Built-in constants for LED1/BTN/etc.\n\n     1v09 : Enabled 'abs' by default\n            Added flash programming to STM32F4\n            analogWrite now working!\n\n     1v08 : Add preliminary STM32F4 support\n            Allowed test cases to test timers - eg. code in jsinteractive.c\n            Fix memory leak for timer\n            Fix memory leak for digitalWrite\n\n     1v07 : Fix string charAt\n            Fix watch on different pin\n            Pass arguments to event handlers - eg. time\n            digitalWrite/Read to take arrays of pins, and int for value\n\n     1v06 : Add break + continue\n            Add switch statement\n            Handle /r, /r/n or just /n for newlines - phone compatible\n            Handle different type of delete\n\n     1v05 : Allow setWatch/setTimeout/setInterval with a string\n            Handle adding Open bracket then deleting it\n            When calling a NAMED function, zero the scopes - this stops scope table overflow\n\n     1v04 : Renamed to Espruino\n            Fixed issue with event add when out of memory\n            If out of memory happens during a timer, kill all timers\n", "/*\n * This file is part of Espruino, a JavaScript interpreter for Microcontrollers\n *\n * Copyright (C) 2013 Gordon Williams <gw@pur3.co.uk>\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * ----------------------------------------------------------------------------\n * This file is designed to be parsed during the build process\n *\n * Contains JavaScript Graphics Draw Functions\n * ----------------------------------------------------------------------------\n */\n#include \"jswrap_graphics.h\"\n#include \"jsutils.h\"\n#include \"jsinteractive.h\"\n\n#include \"lcd_arraybuffer.h\"\n#include \"lcd_js.h\"\n#ifdef USE_LCD_SDL\n#include \"lcd_sdl.h\"\n#endif\n#ifdef USE_LCD_FSMC\n#include \"lcd_fsmc.h\"\n#endif\n\n\n/*JSON{\n  \"type\" : \"class\",\n  \"class\" : \"Graphics\"\n}\nThis class provides Graphics operations that can be applied to a surface.\n\nUse Graphics.createXXX to create a graphics object that renders in the way you want. See [the Graphics page](/Graphics) for more information.\n\n**Note:** On boards that contain an LCD, there is a built-in 'LCD' object of type Graphics. For instance to draw a line you'd type: ```LCD.drawLine(0,0,100,100)```\n*/\n\n/*JSON{\n  \"type\" : \"idle\",\n  \"generate\" : \"jswrap_graphics_idle\"\n}*/\nbool jswrap_graphics_idle() {\n  graphicsIdle();\n  return false;\n}\n\n/*JSON{\n  \"type\" : \"init\",\n  \"generate\" : \"jswrap_graphics_init\"\n}*/\nvoid jswrap_graphics_init() {\n#ifdef USE_LCD_FSMC\n  JsVar *parent = jspNewObject(\"LCD\", \"Graphics\");\n  if (parent) {\n    JsVar *parentObj = jsvSkipName(parent);\n    JsGraphics gfx;\n    graphicsStructInit(&gfx);\n    gfx.data.type = JSGRAPHICSTYPE_FSMC;\n    gfx.graphicsVar = parentObj;\n    gfx.data.width = 320;\n    gfx.data.height = 240;\n    gfx.data.bpp = 16;\n    lcdInit_FSMC(&gfx);\n    lcdSetCallbacks_FSMC(&gfx);\n    graphicsSplash(&gfx);\n    graphicsSetVar(&gfx);\n    jsvUnLock2(parentObj, parent);\n  }\n#endif\n}\n\n\nstatic bool isValidBPP(int bpp) {\n  return bpp==1 || bpp==2 || bpp==4 || bpp==8 || bpp==16 || bpp==24 || bpp==32; // currently one colour can't ever be spread across multiple bytes\n}\n\n/*JSON{\n  \"type\" : \"staticmethod\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"createArrayBuffer\",\n  \"generate\" : \"jswrap_graphics_createArrayBuffer\",\n  \"params\" : [\n    [\"width\",\"int32\",\"Pixels wide\"],\n    [\"height\",\"int32\",\"Pixels high\"],\n    [\"bpp\",\"int32\",\"Number of bits per pixel\"],\n    [\"options\",\"JsVar\",[\n      \"An object of other options. ```{ zigzag : true/false(default), vertical_byte : true/false(default), msb : true/false(default), color_order: 'rgb'(default),'bgr',etc }```\",\n      \"zigzag = whether to alternate the direction of scanlines for rows\",\n      \"vertical_byte = whether to align bits in a byte vertically or not\",\n      \"msb = when bits<8, store pixels msb first\",\n      \"color_order = re-orders the colour values that are supplied via setColor\"\n    ]]\n  ],\n  \"return\" : [\"JsVar\",\"The new Graphics object\"],\n  \"return_object\" : \"Graphics\"\n}\nCreate a Graphics object that renders to an Array Buffer. This will have a field called 'buffer' that can get used to get at the buffer itself\n*/\nJsVar *jswrap_graphics_createArrayBuffer(int width, int height, int bpp, JsVar *options) {\n  if (width<=0 || height<=0 || width>32767 || height>32767) {\n    jsExceptionHere(JSET_ERROR, \"Invalid Size\");\n    return 0;\n  }\n  if (!isValidBPP(bpp)) {\n    jsExceptionHere(JSET_ERROR, \"Invalid BPP\");\n    return 0;\n  }\n\n  JsVar *parent = jspNewObject(0, \"Graphics\");\n  if (!parent) return 0; // low memory\n\n  JsGraphics gfx;\n  graphicsStructInit(&gfx);\n  gfx.data.type = JSGRAPHICSTYPE_ARRAYBUFFER;\n  gfx.data.flags = JSGRAPHICSFLAGS_NONE;\n  gfx.graphicsVar = parent;\n  gfx.data.width = (unsigned short)width;\n  gfx.data.height = (unsigned short)height;\n  gfx.data.bpp = (unsigned char)bpp;\n\n  if (jsvIsObject(options)) {\n    if (jsvGetBoolAndUnLock(jsvObjectGetChild(options, \"zigzag\", 0)))\n      gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_ARRAYBUFFER_ZIGZAG);\n    if (jsvGetBoolAndUnLock(jsvObjectGetChild(options, \"msb\", 0)))\n      gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_ARRAYBUFFER_MSB);\n    if (jsvGetBoolAndUnLock(jsvObjectGetChild(options, \"vertical_byte\", 0))) {\n      if (gfx.data.bpp==1)\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE);\n      else\n        jsWarn(\"vertical_byte only works for 1bpp ArrayBuffers\\n\");\n    }\n    JsVar *colorv = jsvObjectGetChild(options, \"color_order\", 0);\n    if (colorv) {\n      if (jsvIsStringEqual(colorv, \"rgb\")) ; // The default\n      else if (!jsvIsStringEqual(colorv, \"brg\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_BRG);\n      else if (!jsvIsStringEqual(colorv, \"bgr\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_BGR);\n      else if (!jsvIsStringEqual(colorv, \"gbr\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_GBR);\n      else if (!jsvIsStringEqual(colorv, \"grb\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_GRB);\n      else if (!jsvIsStringEqual(colorv, \"rbg\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_RBG);\n      else\n        jsWarn(\"color_order must be 3 characters\");\n      jsvUnLock(colorv);\n    }\n  }\n\n  lcdInit_ArrayBuffer(&gfx);\n  graphicsSetVar(&gfx);\n  return parent;\n}\n\n/*JSON{\n  \"type\" : \"staticmethod\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"createCallback\",\n  \"ifndef\" : \"SAVE_ON_FLASH\",\n  \"generate\" : \"jswrap_graphics_createCallback\",\n  \"params\" : [\n    [\"width\",\"int32\",\"Pixels wide\"],\n    [\"height\",\"int32\",\"Pixels high\"],\n    [\"bpp\",\"int32\",\"Number of bits per pixel\"],\n    [\"callback\",\"JsVar\",\"A function of the form ```function(x,y,col)``` that is called whenever a pixel needs to be drawn, or an object with: ```{setPixel:function(x,y,col),fillRect:function(x1,y1,x2,y2,col)}```. All arguments are already bounds checked.\"]\n  ],\n  \"return\" : [\"JsVar\",\"The new Graphics object\"],\n  \"return_object\" : \"Graphics\"\n}\nCreate a Graphics object that renders by calling a JavaScript callback function to draw pixels\n*/\nJsVar *jswrap_graphics_createCallback(int width, int height, int bpp, JsVar *callback) {\n  if (width<=0 || height<=0 || width>32767 || height>32767) {\n    jsExceptionHere(JSET_ERROR, \"Invalid Size\");\n    return 0;\n  }\n  if (!isValidBPP(bpp)) {\n    jsExceptionHere(JSET_ERROR, \"Invalid BPP\");\n    return 0;\n  }\n  JsVar *callbackSetPixel = 0;\n  JsVar *callbackFillRect = 0;\n  if (jsvIsObject(callback)) {\n    jsvUnLock(callbackSetPixel);\n    callbackSetPixel = jsvObjectGetChild(callback, \"setPixel\", 0);\n    callbackFillRect = jsvObjectGetChild(callback, \"fillRect\", 0);\n  } else\n    callbackSetPixel = jsvLockAgain(callback);\n  if (!jsvIsFunction(callbackSetPixel)) {\n    jsExceptionHere(JSET_ERROR, \"Expecting Callback Function or an Object but got %t\", callbackSetPixel);\n    jsvUnLock2(callbackSetPixel, callbackFillRect);\n    return 0;\n  }\n  if (!jsvIsUndefined(callbackFillRect) && !jsvIsFunction(callbackFillRect)) {\n    jsExceptionHere(JSET_ERROR, \"Expecting Callback Function or an Object but got %t\", callbackFillRect);\n    jsvUnLock2(callbackSetPixel, callbackFillRect);\n    return 0;\n  }\n\n  JsVar *parent = jspNewObject(0, \"Graphics\");\n  if (!parent) return 0; // low memory\n\n  JsGraphics gfx;\n  graphicsStructInit(&gfx);\n  gfx.data.type = JSGRAPHICSTYPE_JS;\n  gfx.graphicsVar = parent;\n  gfx.data.width = (unsigned short)width;\n  gfx.data.height = (unsigned short)height;\n  gfx.data.bpp = (unsigned char)bpp;\n  lcdInit_JS(&gfx, callbackSetPixel, callbackFillRect);\n  graphicsSetVar(&gfx);\n  jsvUnLock2(callbackSetPixel, callbackFillRect);\n  return parent;\n}\n\n#ifdef USE_LCD_SDL\n/*JSON{\n  \"type\" : \"staticmethod\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"createSDL\",\n  \"ifdef\" : \"USE_LCD_SDL\",\n  \"generate\" : \"jswrap_graphics_createSDL\",\n  \"params\" : [\n    [\"width\",\"int32\",\"Pixels wide\"],\n    [\"height\",\"int32\",\"Pixels high\"]\n  ],\n  \"return\" : [\"JsVar\",\"The new Graphics object\"],\n  \"return_object\" : \"Graphics\"\n}\nCreate a Graphics object that renders to SDL window (Linux-based devices only)\n*/\nJsVar *jswrap_graphics_createSDL(int width, int height) {\n  if (width<=0 || height<=0 || width>32767 || height>32767) {\n    jsExceptionHere(JSET_ERROR, \"Invalid Size\");\n    return 0;\n  }\n\n  JsVar *parent = jspNewObject(0, \"Graphics\");\n  if (!parent) return 0; // low memory\n  JsGraphics gfx;\n  graphicsStructInit(&gfx);\n  gfx.data.type = JSGRAPHICSTYPE_SDL;\n  gfx.graphicsVar = parent;\n  gfx.data.width = (unsigned short)width;\n  gfx.data.height = (unsigned short)height;\n  gfx.data.bpp = 32;\n  lcdInit_SDL(&gfx);\n  graphicsSetVar(&gfx);\n  return parent;\n}\n#endif\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getWidth\",\n  \"generate_full\" : \"jswrap_graphics_getWidthOrHeight(parent, false)\",\n  \"return\" : [\"int\",\"The width of the LCD\"]\n}\nThe width of the LCD\n*/\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getHeight\",\n  \"generate_full\" : \"jswrap_graphics_getWidthOrHeight(parent, true)\",\n  \"return\" : [\"int\",\"The height of the LCD\"]\n}\nThe height of the LCD\n*/\nint jswrap_graphics_getWidthOrHeight(JsVar *parent, bool height) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n  if (gfx.data.flags & JSGRAPHICSFLAGS_SWAP_XY)\n    height=!height;\n  return height ? gfx.data.height : gfx.data.width;\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"clear\",\n  \"generate\" : \"jswrap_graphics_clear\"\n}\nClear the LCD with the Background Color\n*/\nvoid jswrap_graphics_clear(JsVar *parent) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsClear(&gfx);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"fillRect\",\n  \"generate\" : \"jswrap_graphics_fillRect\",\n  \"params\" : [\n    [\"x1\",\"int32\",\"The left\"],\n    [\"y1\",\"int32\",\"The top\"],\n    [\"x2\",\"int32\",\"The right\"],\n    [\"y2\",\"int32\",\"The bottom\"]\n  ]\n}\nFill a rectangular area in the Foreground Color\n*/\nvoid jswrap_graphics_fillRect(JsVar *parent, int x1, int y1, int x2, int y2) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsFillRect(&gfx, (short)x1,(short)y1,(short)x2,(short)y2);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawRect\",\n  \"generate\" : \"jswrap_graphics_drawRect\",\n  \"params\" : [\n    [\"x1\",\"int32\",\"The left\"],\n    [\"y1\",\"int32\",\"The top\"],\n    [\"x2\",\"int32\",\"The right\"],\n    [\"y2\",\"int32\",\"The bottom\"]\n  ]\n}\nDraw an unfilled rectangle 1px wide in the Foreground Color\n*/\nvoid jswrap_graphics_drawRect(JsVar *parent, int x1, int y1, int x2, int y2) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsDrawRect(&gfx, (short)x1,(short)y1,(short)x2,(short)y2);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"fillCircle\",\n  \"generate\" : \"jswrap_graphics_fillCircle\",\n  \"params\" : [\n    [\"x\",\"int32\",\"The X axis\"],\n    [\"y\",\"int32\",\"The Y axis\"],\n    [\"rad\",\"int32\",\"The circle radius\"]\n  ]\n}\nDraw a filled circle in the Foreground Color\n*/\n void jswrap_graphics_fillCircle(JsVar *parent, int x, int y, int rad) {\n   JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n   graphicsFillCircle(&gfx, (short)x,(short)y,(short)rad);\n   graphicsSetVar(&gfx); // gfx data changed because modified area\n }\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawCircle\",\n  \"generate\" : \"jswrap_graphics_drawCircle\",\n  \"params\" : [\n    [\"x\",\"int32\",\"The X axis\"],\n    [\"y\",\"int32\",\"The Y axis\"],\n    [\"rad\",\"int32\",\"The circle radius\"]\n  ]\n}\nDraw an unfilled circle 1px wide in the Foreground Color\n*/\nvoid jswrap_graphics_drawCircle(JsVar *parent, int x, int y, int rad) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsDrawCircle(&gfx, (short)x,(short)y,(short)rad);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getPixel\",\n  \"generate\" : \"jswrap_graphics_getPixel\",\n  \"params\" : [\n    [\"x\",\"int32\",\"The left\"],\n    [\"y\",\"int32\",\"The top\"]\n  ],\n  \"return\" : [\"int32\",\"The color\"]\n}\nGet a pixel's color\n*/\nint jswrap_graphics_getPixel(JsVar *parent, int x, int y) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n  return (int)graphicsGetPixel(&gfx, (short)x, (short)y);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setPixel\",\n  \"generate\" : \"jswrap_graphics_setPixel\",\n  \"params\" : [\n    [\"x\",\"int32\",\"The left\"],\n    [\"y\",\"int32\",\"The top\"],\n    [\"col\",\"JsVar\",\"The color\"]\n  ]\n}\nSet a pixel's color\n*/\nvoid jswrap_graphics_setPixel(JsVar *parent, int x, int y, JsVar *color) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  unsigned int col = gfx.data.fgColor;\n  if (!jsvIsUndefined(color))\n    col = (unsigned int)jsvGetInteger(color);\n  graphicsSetPixel(&gfx, (short)x, (short)y, col);\n  gfx.data.cursorX = (short)x;\n  gfx.data.cursorY = (short)y;\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setColor\",\n  \"generate_full\" : \"jswrap_graphics_setColorX(parent, r,g,b, true)\",\n  \"params\" : [\n    [\"r\",\"JsVar\",\"Red (between 0 and 1) OR an integer representing the color in the current bit depth and color order\"],\n    [\"g\",\"JsVar\",\"Green (between 0 and 1)\"],\n    [\"b\",\"JsVar\",\"Blue (between 0 and 1)\"]\n  ]\n}\nSet the color to use for subsequent drawing operations\n*/\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setBgColor\",\n  \"generate_full\" : \"jswrap_graphics_setColorX(parent, r,g,b, false)\",\n  \"params\" : [\n    [\"r\",\"JsVar\",\"Red (between 0 and 1) OR an integer representing the color in the current bit depth and color order\"],\n    [\"g\",\"JsVar\",\"Green (between 0 and 1)\"],\n    [\"b\",\"JsVar\",\"Blue (between 0 and 1)\"]\n  ]\n}\nSet the background color to use for subsequent drawing operations\n*/\nvoid jswrap_graphics_setColorX(JsVar *parent, JsVar *r, JsVar *g, JsVar *b, bool isForeground) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  unsigned int color = 0;\n  JsVarFloat rf, gf, bf;\n  rf = jsvGetFloat(r);\n  gf = jsvGetFloat(g);\n  bf = jsvGetFloat(b);\n  if (!jsvIsUndefined(g) && !jsvIsUndefined(b)) {\n    int ri = (int)(rf*256);\n    int gi = (int)(gf*256);\n    int bi = (int)(bf*256);\n    if (ri>255) ri=255;\n    if (gi>255) gi=255;\n    if (bi>255) bi=255;\n    if (ri<0) ri=0;\n    if (gi<0) gi=0;\n    if (bi<0) bi=0;\n    // Check if we need to twiddle colors\n    int colorMask = gfx.data.flags & JSGRAPHICSFLAGS_COLOR_MASK;\n    if (colorMask) {\n      int tmpr, tmpg, tmpb;\n      tmpr = ri;\n      tmpg = gi;\n      tmpb = bi;\n      switch (colorMask) {\n        case JSGRAPHICSFLAGS_COLOR_BRG:\n          ri = tmpb;\n          gi = tmpr;\n          bi = tmpg;\n          break;\n        case JSGRAPHICSFLAGS_COLOR_BGR:\n          ri = tmpb;\n          bi = tmpr;\n          break;\n        case JSGRAPHICSFLAGS_COLOR_GBR:\n          ri = tmpg;\n          gi = tmpb;\n          bi = tmpr;\n          break;\n        case JSGRAPHICSFLAGS_COLOR_GRB:\n          ri = tmpg;\n          gi = tmpr;\n          break;\n        case JSGRAPHICSFLAGS_COLOR_RBG:\n          gi = tmpb;\n          bi = tmpg;\n          break;\n        default: break;\n      }\n    }\n    if (gfx.data.bpp==16) {\n      color = (unsigned int)((bi>>3) | (gi>>2)<<5 | (ri>>3)<<11);\n    } else if (gfx.data.bpp==32) {\n      color = 0xFF000000 | (unsigned int)(bi | (gi<<8) | (ri<<16));\n    } else if (gfx.data.bpp==24) {\n      color = (unsigned int)(bi | (gi<<8) | (ri<<16));\n    } else\n      color = (unsigned int)(((ri+gi+bi)>=384) ? 0xFFFFFFFF : 0);\n  } else {\n    // just rgb\n    color = (unsigned int)jsvGetInteger(r);\n  }\n  if (isForeground)\n    gfx.data.fgColor = color;\n  else\n    gfx.data.bgColor = color;\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getColor\",\n  \"generate_full\" : \"jswrap_graphics_getColorX(parent, true)\",\n  \"return\" : [\"int\",\"The integer value of the colour\"]\n}\nGet the color to use for subsequent drawing operations\n*/\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getBgColor\",\n  \"generate_full\" : \"jswrap_graphics_getColorX(parent, false)\",\n  \"return\" : [\"int\",\"The integer value of the colour\"]\n}\nGet the background color to use for subsequent drawing operations\n*/\nJsVarInt jswrap_graphics_getColorX(JsVar *parent, bool isForeground) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n  return (JsVarInt)((isForeground ? gfx.data.fgColor : gfx.data.bgColor) & ((1UL<<gfx.data.bpp)-1));\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setFontBitmap\",\n  \"generate_full\" : \"jswrap_graphics_setFontSizeX(parent, JSGRAPHICS_FONTSIZE_4X6, false)\"\n}\nMake subsequent calls to `drawString` use the built-in 4x6 pixel bitmapped Font\n*/\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setFontVector\",\n  \"ifndef\" : \"SAVE_ON_FLASH\",\n  \"generate_full\" : \"jswrap_graphics_setFontSizeX(parent, size, true)\",\n  \"params\" : [\n    [\"size\",\"int32\",\"The height of the font, as an integer\"]\n  ]\n}\nMake subsequent calls to `drawString` use a Vector Font of the given height\n*/\nvoid jswrap_graphics_setFontSizeX(JsVar *parent, int size, bool checkValid) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n\n  if (checkValid) {\n    if (size<1) size=1;\n    if (size>1023) size=1023;\n  }\n  if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n    jsvObjectRemoveChild(parent, JSGRAPHICS_CUSTOMFONT_BMP);\n    jsvObjectRemoveChild(parent, JSGRAPHICS_CUSTOMFONT_WIDTH);\n    jsvObjectRemoveChild(parent, JSGRAPHICS_CUSTOMFONT_HEIGHT);\n    jsvObjectRemoveChild(parent, JSGRAPHICS_CUSTOMFONT_FIRSTCHAR);\n  }\n  gfx.data.fontSize = (short)size;\n  graphicsSetVar(&gfx);\n}\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setFontCustom\",\n  \"generate\" : \"jswrap_graphics_setFontCustom\",\n  \"params\" : [\n    [\"bitmap\",\"JsVar\",\"A column-first, MSB-first, 1bpp bitmap containing the font bitmap\"],\n    [\"firstChar\",\"int32\",\"The first character in the font - usually 32 (space)\"],\n    [\"width\",\"JsVar\",\"The width of each character in the font. Either an integer, or a string where each character represents the width\"],\n    [\"height\",\"int32\",\"The height as an integer\"]\n  ]\n}\nMake subsequent calls to `drawString` use a Custom Font of the given height. See the [Fonts page](http://www.espruino.com/Fonts) for more\ninformation about custom fonts and how to create them.\n*/\nvoid jswrap_graphics_setFontCustom(JsVar *parent, JsVar *bitmap, int firstChar, JsVar *width, int height) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n\n  if (!jsvIsString(bitmap)) {\n    jsExceptionHere(JSET_ERROR, \"Font bitmap must be a String\");\n    return;\n  }\n  if (firstChar<0 || firstChar>255) {\n    jsExceptionHere(JSET_ERROR, \"First character out of range\");\n    return;\n  }\n  if (!jsvIsString(width) && !jsvIsInt(width)) {\n    jsExceptionHere(JSET_ERROR, \"Font width must be a String or an integer\");\n    return;\n  }\n  if (height<=0 || height>255) {\n   jsExceptionHere(JSET_ERROR, \"Invalid height\");\n   return;\n }\n  jsvObjectSetChild(parent, JSGRAPHICS_CUSTOMFONT_BMP, bitmap);\n  jsvObjectSetChild(parent, JSGRAPHICS_CUSTOMFONT_WIDTH, width);\n  jsvObjectSetChildAndUnLock(parent, JSGRAPHICS_CUSTOMFONT_HEIGHT, jsvNewFromInteger(height));\n  jsvObjectSetChildAndUnLock(parent, JSGRAPHICS_CUSTOMFONT_FIRSTCHAR, jsvNewFromInteger(firstChar));\n  gfx.data.fontSize = JSGRAPHICS_FONTSIZE_CUSTOM;\n  graphicsSetVar(&gfx);\n}\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setFontAlign\",\n  \"generate\" : \"jswrap_graphics_setFontAlign\",\n  \"params\" : [\n    [\"x\",\"int32\",\"X alignment. -1=left (default), 0=center, 1=right\"],\n    [\"y\",\"int32\",\"Y alignment. -1=top (default), 0=center, 1=bottom\"],\n    [\"rotation\",\"int32\",\"Rotation of the text. 0=normal, 1=90 degrees clockwise, 2=180, 3=270\"]\n  ]\n}\nSet the alignment for subsequent calls to `drawString`\n*/\nvoid jswrap_graphics_setFontAlign(JsVar *parent, int x, int y, int r) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  if (x<-1) x=-1;\n  if (x>1) x=1;\n  if (y<-1) y=-1;\n  if (y>1) y=1;\n  if (r<0) r=0;\n  if (r>3) r=3;\n  gfx.data.fontAlignX = x;\n  gfx.data.fontAlignY = y;\n  gfx.data.fontRotate = r;\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawString\",\n  \"generate\" : \"jswrap_graphics_drawString\",\n  \"params\" : [\n    [\"str\",\"JsVar\",\"The string\"],\n    [\"x\",\"int32\",\"The X position of the leftmost pixel\"],\n    [\"y\",\"int32\",\"The Y position of the topmost pixel\"]\n  ]\n}\nDraw a string of text in the current font\n*/\nvoid jswrap_graphics_drawString(JsVar *parent, JsVar *var, int x, int y) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n\n  JsVar *customBitmap = 0, *customWidth = 0;\n  int customHeight = 0, customFirstChar = 0;\n  if (gfx.data.fontSize>0) {\n    customHeight = gfx.data.fontSize;\n  } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_4X6) {\n    customHeight = 6;\n  } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n    customBitmap = jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_BMP, 0);\n    customWidth = jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_WIDTH, 0);\n    customHeight = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_HEIGHT, 0));\n    customFirstChar = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_FIRSTCHAR, 0));\n  }\n\n  // Handle text rotation\n  JsGraphicsFlags oldFlags = gfx.data.flags;\n  if (gfx.data.fontRotate==1) {\n    gfx.data.flags ^= JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_X;\n    int t = gfx.data.width - (x+1);\n    x = y;\n    y = t;\n  } else if (gfx.data.fontRotate==2) {\n    gfx.data.flags ^= JSGRAPHICSFLAGS_INVERT_X | JSGRAPHICSFLAGS_INVERT_Y;\n    x = gfx.data.width - (x+1);\n    y = gfx.data.height - (y+1);\n  } else if (gfx.data.fontRotate==3) {\n    gfx.data.flags ^= JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_Y;\n    int t = gfx.data.height - (y+1);\n    y = x;\n    x = t;\n  }\n  // Handle font alignment\n  if (gfx.data.fontAlignX>=0)\n    x -= jswrap_graphics_stringWidth(parent, var) * (gfx.data.fontAlignX+1)/2;\n  if (gfx.data.fontAlignY>=0)\n    y -= customHeight * (gfx.data.fontAlignX+1)/2;\n\n  int maxX = (gfx.data.flags & JSGRAPHICSFLAGS_SWAP_XY) ? gfx.data.height : gfx.data.width;\n  int maxY = (gfx.data.flags & JSGRAPHICSFLAGS_SWAP_XY) ? gfx.data.width : gfx.data.height;\n  int startx = x;\n  JsVar *str = jsvAsString(var, false);\n  JsvStringIterator it;\n  jsvStringIteratorNew(&it, str, 0);\n  while (jsvStringIteratorHasChar(&it)) {\n    char ch = jsvStringIteratorGetChar(&it);\n    if (ch=='\\n') {\n      x = startx;\n      y += customHeight;\n      jsvStringIteratorNext(&it);\n      continue;\n    }\n    if (gfx.data.fontSize>0) {\n#ifndef SAVE_ON_FLASH\n      int w = (int)graphicsVectorCharWidth(&gfx, gfx.data.fontSize, ch);\n      if (x>-w && x<maxX  && y>-gfx.data.fontSize && y<maxY)\n        graphicsFillVectorChar(&gfx, (short)x, (short)y, gfx.data.fontSize, ch);\n      x+=w;\n#endif\n    } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_4X6) {\n      if (x>-4 && x<maxX && y>-6 && y<maxY)\n        graphicsDrawChar4x6(&gfx, (short)x, (short)y, ch);\n      x+=4;\n    } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n      // get char width and offset in string\n      int width = 0, bmpOffset = 0;\n      if (jsvIsString(customWidth)) {\n        if (ch>=customFirstChar) {\n          JsvStringIterator wit;\n          jsvStringIteratorNew(&wit, customWidth, 0);\n          while (jsvStringIteratorHasChar(&wit) && (int)jsvStringIteratorGetIndex(&wit)<(ch-customFirstChar)) {\n            bmpOffset += (unsigned char)jsvStringIteratorGetChar(&wit);\n            jsvStringIteratorNext(&wit);\n          }\n          width = (unsigned char)jsvStringIteratorGetChar(&wit);\n          jsvStringIteratorFree(&wit);\n        }\n      } else {\n        width = (int)jsvGetInteger(customWidth);\n        bmpOffset = width*(ch-customFirstChar);\n      }\n      if (ch>=customFirstChar && (x>-width) && (x<maxX) && (y>-customHeight) && y<maxY) {\n        bmpOffset *= customHeight;\n        // now render character\n        JsvStringIterator cit;\n        jsvStringIteratorNew(&cit, customBitmap, (size_t)bmpOffset>>3);\n        bmpOffset &= 7;\n        int cx,cy;\n        for (cx=0;cx<width;cx++) {\n          for (cy=0;cy<customHeight;cy++) {\n            if ((jsvStringIteratorGetChar(&cit)<<bmpOffset)&128)\n              graphicsSetPixel(&gfx, (short)(cx+x), (short)(cy+y), gfx.data.fgColor);\n            bmpOffset++;\n            if (bmpOffset==8) {\n              bmpOffset=0;\n              jsvStringIteratorNext(&cit);\n            }\n          }\n        }\n        jsvStringIteratorFree(&cit);\n      }\n      x += width;\n    }\n    if (jspIsInterrupted()) break;\n    jsvStringIteratorNext(&it);\n  }\n  jsvStringIteratorFree(&it);\n  jsvUnLock3(str, customBitmap, customWidth);\n  gfx.data.flags = oldFlags; // restore flags because of text rotation\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"stringWidth\",\n  \"generate\" : \"jswrap_graphics_stringWidth\",\n  \"params\" : [\n    [\"str\",\"JsVar\",\"The string\"]\n  ],\n  \"return\" : [\"int\",\"The length of the string in pixels\"]\n}\nReturn the size in pixels of a string of text in the current font\n*/\nJsVarInt jswrap_graphics_stringWidth(JsVar *parent, JsVar *var) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n\n  JsVar *customWidth = 0;\n  int customFirstChar = 0;\n  if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n    customWidth = jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_WIDTH, 0);\n    customFirstChar = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_FIRSTCHAR, 0));\n  }\n\n  JsVar *str = jsvAsString(var, false);\n  JsvStringIterator it;\n  jsvStringIteratorNew(&it, str, 0);\n  int width = 0;\n  while (jsvStringIteratorHasChar(&it)) {\n    char ch = jsvStringIteratorGetChar(&it);\n    if (gfx.data.fontSize>0) {\n#ifndef SAVE_ON_FLASH\n      width += (int)graphicsVectorCharWidth(&gfx, gfx.data.fontSize, ch);\n#endif\n    } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_4X6) {\n      width += 4;\n    } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n      if (jsvIsString(customWidth)) {\n        if (ch>=customFirstChar)\n          width += (unsigned char)jsvGetCharInString(customWidth, (size_t)(ch-customFirstChar));\n      } else\n        width += (int)jsvGetInteger(customWidth);\n    }\n    jsvStringIteratorNext(&it);\n  }\n  jsvStringIteratorFree(&it);\n  jsvUnLock2(str, customWidth);\n  return width;\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawLine\",\n  \"generate\" : \"jswrap_graphics_drawLine\",\n  \"params\" : [\n    [\"x1\",\"int32\",\"The left\"],\n    [\"y1\",\"int32\",\"The top\"],\n    [\"x2\",\"int32\",\"The right\"],\n    [\"y2\",\"int32\",\"The bottom\"]\n  ]\n}\nDraw a line between x1,y1 and x2,y2 in the current foreground color\n*/\nvoid jswrap_graphics_drawLine(JsVar *parent, int x1, int y1, int x2, int y2) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsDrawLine(&gfx, (short)x1,(short)y1,(short)x2,(short)y2);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"lineTo\",\n  \"generate\" : \"jswrap_graphics_lineTo\",\n  \"params\" : [\n    [\"x\",\"int32\",\"X value\"],\n    [\"y\",\"int32\",\"Y value\"]\n  ]\n}\nDraw a line from the last position of lineTo or moveTo to this position\n*/\nvoid jswrap_graphics_lineTo(JsVar *parent, int x, int y) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsDrawLine(&gfx, gfx.data.cursorX, gfx.data.cursorY, (short)x, (short)y);\n  gfx.data.cursorX = (short)x;\n  gfx.data.cursorY = (short)y;\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"moveTo\",\n  \"generate\" : \"jswrap_graphics_moveTo\",\n  \"params\" : [\n    [\"x\",\"int32\",\"X value\"],\n    [\"y\",\"int32\",\"Y value\"]\n  ]\n}\nMove the cursor to a position - see lineTo\n*/\nvoid jswrap_graphics_moveTo(JsVar *parent, int x, int y) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  gfx.data.cursorX = (short)x;\n  gfx.data.cursorY = (short)y;\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"fillPoly\",\n  \"generate\" : \"jswrap_graphics_fillPoly\",\n  \"params\" : [\n    [\"poly\",\"JsVar\",\"An array of vertices, of the form ```[x1,y1,x2,y2,x3,y3,etc]```\"]\n  ]\n}\nDraw a filled polygon in the current foreground color\n*/\nvoid jswrap_graphics_fillPoly(JsVar *parent, JsVar *poly) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  if (!jsvIsIterable(poly)) return;\n  const int maxVerts = 128;\n  short verts[maxVerts];\n  int idx = 0;\n  JsvIterator it;\n  jsvIteratorNew(&it, poly, JSIF_EVERY_ARRAY_ELEMENT);\n  while (jsvIteratorHasElement(&it) && idx<maxVerts) {\n    verts[idx++] = (short)jsvIteratorGetIntegerValue(&it);\n    jsvIteratorNext(&it);\n  }\n  jsvIteratorFree(&it);\n  if (idx==maxVerts) {\n    jsWarn(\"Maximum number of points (%d) exceeded for fillPoly\", maxVerts/2);\n  }\n  graphicsFillPoly(&gfx, idx/2, verts);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setRotation\",\n  \"generate\" : \"jswrap_graphics_setRotation\",\n  \"params\" : [\n    [\"rotation\",\"int32\",\"The clockwise rotation. 0 for no rotation, 1 for 90 degrees, 2 for 180, 3 for 270\"],\n    [\"reflect\",\"bool\",\"Whether to reflect the image\"]\n  ]\n}\nSet the current rotation of the graphics device.\n*/\nvoid jswrap_graphics_setRotation(JsVar *parent, int rotation, bool reflect) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n\n  // clear flags\n  gfx.data.flags &= (JsGraphicsFlags)~(JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_X | JSGRAPHICSFLAGS_INVERT_Y);\n  // set flags\n  switch (rotation) {\n    case 0:\n      break;\n    case 1:\n      gfx.data.flags |= JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_X;\n      break;\n    case 2:\n      gfx.data.flags |= JSGRAPHICSFLAGS_INVERT_X | JSGRAPHICSFLAGS_INVERT_Y;\n      break;\n    case 3:\n      gfx.data.flags |= JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_Y;\n      break;\n  }\n\n  if (reflect) {\n    if (gfx.data.flags & JSGRAPHICSFLAGS_SWAP_XY)\n      gfx.data.flags ^= JSGRAPHICSFLAGS_INVERT_Y;\n    else\n      gfx.data.flags ^= JSGRAPHICSFLAGS_INVERT_X;\n  }\n\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawImage\",\n  \"generate\" : \"jswrap_graphics_drawImage\",\n  \"params\" : [\n    [\"image\",\"JsVar\",\"An object with the following fields `{ width : int, height : int, bpp : int, buffer : ArrayBuffer, transparent: optional int }`. bpp = bits per pixel, transparent (if defined) is the colour that will be treated as transparent\"],\n    [\"x\",\"int32\",\"The X offset to draw the image\"],\n    [\"y\",\"int32\",\"The Y offset to draw the image\"]\n  ]\n}\nDraw an image at the specified position. If the image is 1 bit, the graphics foreground/background colours will be used. Otherwise color data will be copied as-is. Bitmaps are rendered MSB-first\n*/\nvoid jswrap_graphics_drawImage(JsVar *parent, JsVar *image, int xPos, int yPos) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  if (!jsvIsObject(image)) {\n    jsExceptionHere(JSET_ERROR, \"Expecting first argument to be an object\");\n    return;\n  }\n  int imageWidth = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(image, \"width\", 0));\n  int imageHeight = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(image, \"height\", 0));\n  int imageBpp = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(image, \"bpp\", 0));\n  unsigned int imageBitMask = (unsigned int)((1L<<imageBpp)-1L);\n  JsVar *transpVar = jsvObjectGetChild(image, \"transparent\", 0);\n  bool imageIsTransparent = transpVar!=0;\n  unsigned int imageTransparentCol = (unsigned int)jsvGetInteger(transpVar);\n  jsvUnLock(transpVar);\n  JsVar *imageBuffer = jsvObjectGetChild(image, \"buffer\", 0);\n  if (!(jsvIsArrayBuffer(imageBuffer) && imageWidth>0 && imageHeight>0 && imageBpp>0 && imageBpp<=32)) {\n    jsExceptionHere(JSET_ERROR, \"Expecting first argument to a valid Image\");\n    jsvUnLock(imageBuffer);\n    return;\n  }\n  JsVar *imageBufferString = jsvGetArrayBufferBackingString(imageBuffer);\n  jsvUnLock(imageBuffer);\n\n\n  int x=0, y=0;\n  int bits=0;\n  unsigned int colData = 0;\n  JsvStringIterator it;\n  jsvStringIteratorNew(&it, imageBufferString, 0);\n  while ((bits>=imageBpp || jsvStringIteratorHasChar(&it)) && y<imageHeight) {\n    // Get the data we need...\n    while (bits < imageBpp) {\n      colData = (colData<<8) | ((unsigned char)jsvStringIteratorGetChar(&it));\n      jsvStringIteratorNext(&it);\n      bits += 8;\n    }\n    // extract just the bits we want\n    unsigned int col = (colData>>(bits-imageBpp))&imageBitMask;\n    bits -= imageBpp;\n    // Try and write pixel!\n    if (!imageIsTransparent || imageTransparentCol!=col) {\n      if (imageBpp==1)\n        col = col ? gfx.data.fgColor : gfx.data.bgColor;\n      graphicsSetPixel(&gfx, (short)(x+xPos), (short)(y+yPos), col);\n    }\n    // Go to next pixel\n    x++;\n    if (x>=imageWidth) {\n      x=0;\n      y++;\n      // we don't care about image height - we'll stop next time...\n    }\n\n  }\n  jsvStringIteratorFree(&it);\n  jsvUnLock(imageBufferString);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getModified\",\n  \"generate\" : \"jswrap_graphics_getModified\",\n  \"params\" : [\n    [\"reset\",\"bool\",\"Whether to reset the modified area or not\"]\n  ],\n  \"return\" : [\"JsVar\",\"An object {x1,y1,x2,y2} containing the modified area, or undefined if not modified\"]\n}\nReturn the area of the Graphics canvas that has been modified, and optionally clear\nthe modified area to 0.\n\nFor instance if `g.setPixel(10,20)` was called, this would return `{x1:10, y1:20, x2:10, y2:20}`\n*/\nJsVar *jswrap_graphics_getModified(JsVar *parent, bool reset) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n  JsVar *obj = 0;\n  if (gfx.data.modMinX <= gfx.data.modMaxX) { // do we have a rect?\n    obj = jsvNewObject();\n    if (obj) {\n      jsvObjectSetChildAndUnLock(obj, \"x1\", jsvNewFromInteger(gfx.data.modMinX));\n      jsvObjectSetChildAndUnLock(obj, \"y1\", jsvNewFromInteger(gfx.data.modMinY));\n      jsvObjectSetChildAndUnLock(obj, \"x2\", jsvNewFromInteger(gfx.data.modMaxX));\n      jsvObjectSetChildAndUnLock(obj, \"y2\", jsvNewFromInteger(gfx.data.modMaxY));\n    }\n  }\n  if (reset) {\n    gfx.data.modMaxX = -32768;\n    gfx.data.modMaxY = -32768;\n    gfx.data.modMinX = 32767;\n    gfx.data.modMinY = 32767;\n    graphicsSetVar(&gfx);\n  }\n  return obj;\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"scroll\",\n  \"generate\" : \"jswrap_graphics_scroll\",\n  \"params\" : [\n    [\"x\",\"int32\",\"X direction. >0 = to right\"],\n    [\"y\",\"int32\",\"Y direction. >0 = down\"]\n  ]\n}\nScroll the contents of this graphics in a certain direction. The remaining area\nis filled with the background color.\n\nNote: This uses repeated pixel reads and writes, so will not work on platforms that\ndon't support pixel reads.\n*/\nvoid jswrap_graphics_scroll(JsVar *parent, int xdir, int ydir) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsScroll(&gfx, xdir, ydir);\n  // update modified area\n  graphicsSetVar(&gfx);\n}\n", "/*\n * This file is part of Espruino, a JavaScript interpreter for Microcontrollers\n *\n * Copyright (C) 2013 Gordon Williams <gw@pur3.co.uk>\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * ----------------------------------------------------------------------------\n * Graphics Backend for drawing to ArrayBuffer\n * ----------------------------------------------------------------------------\n */\n#include \"jswrap_arraybuffer.h\"\n#include \"lcd_arraybuffer.h\"\n#include \"jsvar.h\"\n#include \"jsvariterator.h\"\n\n// returns the BIT index, so the bottom 3 bits specify the bit in the byte\nunsigned int lcdGetPixelIndex_ArrayBuffer(JsGraphics *gfx, int x, int y, int pixelCount) {\n  if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_ZIGZAG) {\n    if (y&1) x = gfx->data.width - (x+pixelCount);\n  }\n  if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE)\n    return (unsigned int)(((x + (y>>3)*gfx->data.width)<<3) | (y&7));\n  else\n    return (unsigned int)((x + y*gfx->data.width)*gfx->data.bpp);\n}\n\nunsigned int lcdGetPixel_ArrayBuffer(JsGraphics *gfx, short x, short y) {\n  unsigned int col = 0;\n  JsVar *buf = (JsVar*)gfx->backendData;\n  unsigned int idx = lcdGetPixelIndex_ArrayBuffer(gfx,x,y,1);\n  JsvArrayBufferIterator it;\n  jsvArrayBufferIteratorNew(&it, buf, idx>>3 );\n  if (gfx->data.bpp&7/*not a multiple of one byte*/) {\n    idx = idx & 7;\n    unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;\n    unsigned int existing = (unsigned int)jsvArrayBufferIteratorGetIntegerValue(&it);\n    unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;\n    col = ((existing>>bitIdx)&mask);\n  } else {\n    int i;\n    for (i=0;i<gfx->data.bpp;i+=8) {\n      col |= ((unsigned int)jsvArrayBufferIteratorGetIntegerValue(&it)) << i;\n      jsvArrayBufferIteratorNext(&it);\n    }\n  }\n  jsvArrayBufferIteratorFree(&it);\n  return col;\n}\n\n// set pixelCount pixels starting at x,y\nvoid lcdSetPixels_ArrayBuffer(JsGraphics *gfx, short x, short y, short pixelCount, unsigned int col) {\n  JsVar *buf = (JsVar*)gfx->backendData;\n  unsigned int idx = lcdGetPixelIndex_ArrayBuffer(gfx,x,y,pixelCount);\n  JsvArrayBufferIterator it;\n  jsvArrayBufferIteratorNew(&it, buf, idx>>3 );\n\n  unsigned int whiteMask = (1U<<gfx->data.bpp)-1;\n  bool shortCut = (col==0 || (col&whiteMask)==whiteMask) && (!(gfx->data.flags&JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE)); // simple black or white fill\n\n  while (pixelCount--) { // writing individual bits\n    if (gfx->data.bpp&7/*not a multiple of one byte*/) {\n      idx = idx & 7;\n      if (shortCut && idx==0) {\n        // Basically, if we're aligned and we're filling all 0 or all 1\n        // then we can go really quickly and can just fill\n        int wholeBytes = (gfx->data.bpp*(pixelCount+1)) >> 3;\n        if (wholeBytes) {\n          char c = (char)(col?0xFF:0);\n          pixelCount = (short)(pixelCount+1 - (wholeBytes*8/gfx->data.bpp));\n          while (wholeBytes--) {\n            jsvArrayBufferIteratorSetByteValue(&it,  c);\n            jsvArrayBufferIteratorNext(&it);\n          }\n          continue;\n        }\n      }\n      unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;\n      unsigned int existing = (unsigned int)jsvArrayBufferIteratorGetIntegerValue(&it);\n      unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;\n      jsvArrayBufferIteratorSetByteValue(&it, (char)((existing&~(mask<<bitIdx)) | ((col&mask)<<bitIdx)));\n      if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE) {\n        jsvArrayBufferIteratorNext(&it);\n      } else {\n        idx += gfx->data.bpp;\n        if (idx>=8) jsvArrayBufferIteratorNext(&it);\n      }\n    } else { // we're writing whole bytes\n      int i;\n      for (i=0;i<gfx->data.bpp;i+=8) {\n        jsvArrayBufferIteratorSetByteValue(&it, (char)(col >> i));\n        jsvArrayBufferIteratorNext(&it);\n      }\n    }\n  }\n  jsvArrayBufferIteratorFree(&it);\n}\n\nvoid lcdSetPixel_ArrayBuffer(JsGraphics *gfx, short x, short y, unsigned int col) {\n  lcdSetPixels_ArrayBuffer(gfx, x, y, 1, col);\n}\n\nvoid  lcdFillRect_ArrayBuffer(struct JsGraphics *gfx, short x1, short y1, short x2, short y2) {\n  short y;\n  for (y=y1;y<=y2;y++)\n    lcdSetPixels_ArrayBuffer(gfx, x1, y, (short)(1+x2-x1), gfx->data.fgColor);\n}\n\n#ifndef SAVE_ON_FLASH\n// Faster implementation for where we have a flat memory area\nunsigned int lcdGetPixel_ArrayBuffer_flat(JsGraphics *gfx, short x, short y) {\n  unsigned int col = 0;\n  unsigned char *ptr = (unsigned char*)gfx->backendData;\n  unsigned int idx = lcdGetPixelIndex_ArrayBuffer(gfx,x,y,1);\n  ptr += idx>>3;\n  if (gfx->data.bpp&7/*not a multiple of one byte*/) {\n    idx = idx & 7;\n    unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;\n    unsigned int existing = (unsigned int)*ptr;\n    unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;\n    col = ((existing>>bitIdx)&mask);\n  } else {\n    int i;\n    for (i=0;i<gfx->data.bpp;i+=8) {\n      col |= ((unsigned int)*ptr) << i;\n      ptr++;\n    }\n  }\n  return col;\n}\n\n// set pixelCount pixels starting at x,y\n// Faster implementation for where we have a flat memory area\nvoid lcdSetPixels_ArrayBuffer_flat(JsGraphics *gfx, short x, short y, short pixelCount, unsigned int col) {\n  unsigned char *ptr = (unsigned char*)gfx->backendData;\n  unsigned int idx = lcdGetPixelIndex_ArrayBuffer(gfx,x,y,pixelCount);\n  ptr += idx>>3;\n\n  unsigned int whiteMask = (1U<<gfx->data.bpp)-1;\n  bool shortCut = (col==0 || (col&whiteMask)==whiteMask) && (!(gfx->data.flags&JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE)); // simple black or white fill\n\n  while (pixelCount--) { // writing individual bits\n    if (gfx->data.bpp&7/*not a multiple of one byte*/) {\n      idx = idx & 7;\n      if (shortCut && idx==0) {\n        // Basically, if we're aligned and we're filling all 0 or all 1\n        // then we can go really quickly and can just fill\n        int wholeBytes = (gfx->data.bpp*(pixelCount+1)) >> 3;\n        if (wholeBytes) {\n          char c = (char)(col?0xFF:0);\n          pixelCount = (short)(pixelCount+1 - (wholeBytes*8/gfx->data.bpp));\n          while (wholeBytes--) {\n            *ptr = c;\n            ptr++;\n          }\n          continue;\n        }\n      }\n      unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;\n      unsigned int existing = (unsigned int)*ptr;\n      unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;\n      *ptr = (char)((existing&~(mask<<bitIdx)) | ((col&mask)<<bitIdx));\n      if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE) {\n        ptr++;\n      } else {\n        idx += gfx->data.bpp;\n        if (idx>=8) ptr++;\n      }\n    } else { // we're writing whole bytes\n      int i;\n      for (i=0;i<gfx->data.bpp;i+=8) {\n        *ptr = (char)(col >> i);\n        ptr++;\n      }\n    }\n  }\n}\n\n// Faster implementation for where we have a flat memory area\nvoid lcdSetPixel_ArrayBuffer_flat(JsGraphics *gfx, short x, short y, unsigned int col) {\n  lcdSetPixels_ArrayBuffer_flat(gfx, x, y, 1, col);\n}\n\n// Faster implementation for where we have a flat memory area\nvoid  lcdFillRect_ArrayBuffer_flat(struct JsGraphics *gfx, short x1, short y1, short x2, short y2) {\n  short y;\n  for (y=y1;y<=y2;y++)\n    lcdSetPixels_ArrayBuffer_flat(gfx, x1, y, (short)(1+x2-x1), gfx->data.fgColor);\n}\n#endif // SAVE_ON_FLASH\n\nvoid lcdInit_ArrayBuffer(JsGraphics *gfx) {\n  // create buffer\n  JsVar *buf = jswrap_arraybuffer_constructor(graphicsGetMemoryRequired(gfx));\n  jsvUnLock2(jsvAddNamedChild(gfx->graphicsVar, buf, \"buffer\"), buf);\n}\n\nvoid lcdSetCallbacks_ArrayBuffer(JsGraphics *gfx) {\n  JsVar *buf = jsvObjectGetChild(gfx->graphicsVar, \"buffer\", 0);\n#ifndef SAVE_ON_FLASH\n  size_t len = 0;\n  char *dataPtr = jsvGetDataPointer(buf, &len);\n#endif\n  jsvUnLock(buf);\n#ifndef SAVE_ON_FLASH\n  if (dataPtr && len>=graphicsGetMemoryRequired(gfx)) {\n    // nice fast mode\n    gfx->backendData = dataPtr;\n    gfx->setPixel = lcdSetPixel_ArrayBuffer_flat;\n    gfx->getPixel = lcdGetPixel_ArrayBuffer_flat;\n    gfx->fillRect = lcdFillRect_ArrayBuffer_flat;\n#else\n  if (false) {\n#endif\n  } else if (jsvIsArrayBuffer(buf)) {\n    /* NOTE: This is nasty as 'buf' is not locked. HOWEVER we know that\n     gfx->graphicsVar IS locked, so 'buf' isn't going anywhere */\n    gfx->backendData = buf;\n    gfx->setPixel = lcdSetPixel_ArrayBuffer;\n    gfx->getPixel = lcdGetPixel_ArrayBuffer;\n    gfx->fillRect = lcdFillRect_ArrayBuffer;\n  }\n}\n"], "fixing_code": ["            Allow Crypto SHA1 without SHA256/512 (for Original & ESP8266 where flash is scarce)\n            Add better docs for the form of Wifi callback functions\n            Modify ESP8266/ESP32 callbacks to match the node.js style used elsewhere\n            nRF52: fix pin.toggle() on software-negated pins\n            Pixl.js: Reorder pins so 0..13 are also D0..13 for better Arduino compatibility\n            Fix dump() when used with code written using E.setBootCode(..), (fix #1398)\n            Allow parseInt/parseFloat to be used on very large strings if the number doesn't extend right to the end (fix #1397)\n            nRF5x: Fix memory leak on NRF.connect\n            Fix memory leak if an exception is thrown within a rejected promise\n            ESP8266: rewrite wifi.save and restore to use the storage lib (imp #1380)\n\t    ESP8266: Add missing option ssid_hidden for Wifi.startAP() (imp #1358)\n            Fixed double-connect issue for TCP sockets\n            Pixl.js: Ensure Pixl.menu changes to bitmap fonts\n            Pixl.js: tweaked bias/contrast to improve display quality\n            ESP32: update esp-idf to v3.0. BLE support - thanks to @jumjum. Erase flash before flashing. vars now 2500\n            ESP8266: rearange rf_cal_sector (fix #1294)\n            ESP8266: Wifi.scan() now return authmode as text \n            ESP32: Fix accidental initialisation of UART3 when switching to Telnet (fix #1362)\n            nRF52: Added `NRF.setAddress` to allow the MAC address to be changed\n            Added Graphics.setFontAlign for font alignment and rotation\n            Make software I2C bitrate and waveform more accurate\n            Move default I2C bitrate to 100kbit/sec\n            Linux: don't create a espruino.flash file if we're not writing to flash\n            Add height check for Graphics.createArrayBuffer(...vertical_byte:true) (fix #1421)\n\n     1v97 : nRF52: fix NRF.on('connect',...) issue\n            STM32: Fix setDeviceClockCmd error for USB.setConsole()\n            nRF5x: Fix getPinMode, which fixes SW I2C after save()\n            Thingy52: Don't report contents of 'Thingy' in 'dump()'\n            Thingy52: Allow multiple sounds to play at once\n            nRF5x: Ensure Waveform triggers a finished event\n            Thingy52: Enable simple bootloader, add travis build for DFU\n            Add Serial.inject to allow data to be added as if it was received from that device\n            Fix UDP handling so that it copes with packets not all being received in one go\n            STM32L496: increase variables - use full 320kB of RAM as it is contiguous\n            Add a maximum time for setTimeout/setInterval (100 years)\n            Fix Storage.write when writing partial file of the same length and initial contents\n            Fix corrupted timer channels returned by Pin.getInfo\n            Add command history to debugger\n            Remove process.env.EXPORTS (EXPTR does the same but takes less space)\n            Thingy52: Add 9 axis MPU support\n            Errors now store message in 'message', not 'msg' (fix #1366)\n            Ensure 'in' operator checks the prototype chain (fix #1365)\n            Promise.resolve now handles promises/thenables as arguments (fix #1363)\n            try..catch now creates exception in its own scope (fix #1367)\n            Thingy52,Pixl.js: add default NFC URL of the Espruino IDE \n            Add ArrayBuffer.byteLength property (fix #1374)\n            setWatch(..., {edge:\"rising\",debounce:25}) is now default for built-in buttons\n            Pixl.js: add Pixl.menu function for easy menus, build in graphical_menu.js\n            Fix regression in MDBT42Q advertised name\n            nRF52: Add E.getBattery as a more global battery percentage function, deprecate `Puck.getBatteryPercentage`\n            Fix '.buffer' regression in 'JSON.stringify(new Uint8Array([1,2,3,4]).buffer)'\n            Allow `typeof 123 .testing` without an exception (fix #1351)\n            Add crypto.AES to Puck.js and other nRF52 Espruino devices\n\n     1v96 : ESP8266: no callback if SSID is not available (fix #1297)\n            ESP8266: esp8266 wifi getStatus doesn't show savedMode (fix #752)\n            ESP8266: cleanup defines WIFI_DBG and NET_DBG for RELEASE\n            ESP8266: switch to single ld file eagle.app.v6.new.2048.ld for ESP8266_4MB board\n            Allow JS modules to be built-in by adding files to JSMODULESOURCES\n            Fix slow/hacky handling of 7 bit serial data for STM32\n            Add more stack checks so invalid code `typeof typeof typeof x100` can't break stack (fix #1310)\n            nRF5x: Fix PWM output via Waveform class\n            Fix free stack checking on ARM\n            nRF52: Make slightly more space available for stack\n            nRF5x: Move to SDK 12.3\n            Stop stack traces from being gathered in functions for Ctrl-C (fix #1313)\n            nRF5x: Fix crash if I2C is used before being initialised (fix #1301)\n            Internal printf can now pad with spaces\n            Add `E.dumpFreeList` in non-release builds to help with debugging\n            Fix mild memory leak in jsvMakeIntoVariableName that caused GC to run more often than normal\n            E.toString now tries harder to allocate a Flat String, and works with no-alloc for Uint8Array/FlatStrings\n            WIO_LTE fix SD card initialisation\n            Improve SD card reliability on all boards by trying to initialise multiple times before failing\n            Remove forced inlining in variable inspection functions (reduces flash usage by ~10k)\n            Remove un-needed DNS lookup for localhost\n            Add WIZnet UDP support\n            Tidying up build to avoid making un-needed bin, hex or lst files\n            Simplify flash save (and help debugging) by using the 'fake flash' implementation on Linux builds\n            Added Graphics.scroll command to scroll graphics contents\n            Added 'Terminal' class with built-in VT100 terminal\n            Tweak Espruino logo to be exactly 32 chars wide\n            Improved code for returning console device to the most useful place\n            Fix pinToString for devices with port A but no port B\n            Speed improvements for ArrayBuffer Graphics\n            Tidied up bootloader - devices with one LED now flash LED when button pressed\n            Simplify data returned by process.env\n            Add process.env.MODULES - to contain a list of the libraries provided in the firmware by require\n            Include WiFi and AT libraries inside Espruino WiFi builds\n            Add 'E.asm' placeholder to detect E.asm calls that haven't been replaced by the IDE\n            Add process.env.EXPTR to link to table of functions - will work better for compiled code over BLE\n            Added SAVE_ON_FLASH_EXTREME for HYSTM32_28, where we're now cutting out some Math.X functionality to keep builds going \n            Added `jshFlashGetMemMapAddress` to allow remapping of addresses for ESP8266/ESP32 without loads of code duplication\n            Remap peek8/16/32 addresses on ESP32/ESP8266 so it can be used on flash memory\n            Swapped save/load/E.setBootCode to use the flash library\n            Allow STM32LL port to write 32 bits to flash at a time to bring it in line with other ports\n            Allow flash writes *from* unaligned addresses on nRF52 and ESP8266 (previously this crashed the ESP8266)\n            Update process.ENV.EXPORTS to bring it in line with what the compiler uses\n            Now set 'this' correctly for Arrow Functions\n            Add ES6 classes and 'super'\n            nRF5x: Move all bluetooth events to event queue (removing MEMORY_BUSY issues)\n            Fix potential issue where EV_TYPE_MASK enum could be set incorrectly  \n            setWatch's edge argument can also be an integer now\n            Add 'data' option to setWatch to allow clocked data to be decoded easily\n            nRF52: Increase flash available for stored code from 12kB for 40kB\n            Now store/display appreviated commit in process.env, remove build date\n  \n     1v95 : nRF5x: Swap to UART fifo to avoid overrun errors at high baud rates\n            Ensure Exceptions/errors are reported on a blank line\n            Internal: Added initialiser argument to jsvNewStringOfLength\n            Internal: Added jsvObjectSetChildVar/jsvObjectSetChildVar/jsvObjectSetChildVar\n            Internal: Fix jsvCopy if given a NAME_INT/etc\n            Added ES6's Object.assign\n            nRF5x: NRF.setScan now reads service data automatically\n            nRF5x: NRF.findDevices aggregates data from multiple advertising packets\n            nRF5x: Remove app_uart and use nrf_drv_uart with double buffering - fix uart overflow errors (fix #1238)\n            nRF5x: Fix issue with findDevices/setScan servicedata when all digits of service are numbers (eg \"1809\")\n            Fix memory leak in tab completion code\n            Add `E.errorFlag` event to allow JS to respond to internal errors\n            Use Esc[J VT100 code when cycling through command history (much faster REPL on low bandwidth connections)\n            ESP8266: Remove debugger again as it will never work on 8266\n            ESP8266: Enable unaligned reads for ESP8266_4MB (fix #1240,#837)\n            ESP8266: move code save section to fist partition for memory mapping for ESP8266_4MB (fix #1240)\n            ESP8266: Add GPIO16 as D16 without watch (#1206) but soft PWM/I2C/SPI/etc \n            ESP8266: Remove osprintf for RELEASE=1 \n            Internal: Networkjs now forwards `socketType` - laying groundwork for UDP over AT command (#1232)\n            Added simple RegExp implemention (partial fix #256)\n            Speed up JSON.stringify for Arrays, and output non-numeric array elements in REPL (fix #64)\n            nRF5x: Bump nRF52-based boards variable count from 2000 to 2500 (fix #1215)\n            Ensure Ctrl-C doesn't redraw the input line if it's already empty\n            Added String.replace(regex, function) (fix #1256)\n            With E.setFlags({pretokenise:1}), ensure stack traces are not tokenised (fix #1258)\n            Allow digitalWrite/Read to take an object as an argument (calling .write and .read on it)\n            Add `E.getAddressOf` to allow embedded targets to get memory addresses for DMA/etc\n            nRF5x: Fix issue where doing a soft reset in the middle of some BLE ops could cause an assert in debug builds\n            nRF5x: Manufacturer Data is now decoded in advertising packets\n            Fix memory leak when allocating DataViews\n            nRF5x: Fix memory leak on BLE notifications\n            Ensure net/http .listen return the server instance (fix #1276)\n            nRF5x: Allow Manufacturer Data to be specified with setAdvertising\n            Internal: Fix memory leak in jsvArrayPushAll\n            nRF5x: jsvArrayPushAll memory leak fixes NRF.findDevices memory leak when services present\n            Internal: jsvNewIterator now has an option to iterate over sparse arrays as if they weren't sparse\n            Fixed some built-in functions that misbehaved when given sparse arrays\n            Puck.js: Allow flash memory protection to be overwridden with E.setFlags\n            Fix lexing of '/*/' as a complete block comment\n            nRF5x: Add support for negating pins in software (eg. buttons/LEDs)\n            Add `E.setFlags({unsyncFiles:1}` which doesn't sync the file to the SD card after each write - it's *much* faster\n            Filesystem API now uses flat strings (avoiding the 512 byte copy for each call)\n            Increase default internal SD card bitrate to 4MHz (from 100k)\n            nRF5x: Handle promise completions and advertising using IO queue, to avoid MEMORY_BUSY messages (#1277)\n            Allow E.HSBtoRGB to wrap 'hue' value, and allow it to return an array of [r,g,b] (fix #1283)\n            Remove spikes when changing pin state (fix #1274)\n            Changes to reduce code duplication in jswrapper.c\n            Fix `E.setBootCode` when no argument is supplied\n            Add WIZnet W5500 support to Espruino WiFi build\n\n     1v94 : Allow Espruino boards to reset straight out of the DFU Bootloader             \n            Improvements in handling errors in code running in IRQs\n             - if writing to disconnected Bluetooth device, throw data away immediately\n             - Drop chars if output buffer is full while waiting in an IRQ\n             - Handle out of memory errors in jsvCreateNewChild\n             - Do not garbage collect inside an IRQ\n            On nRF52 devices, allow button press at boot to clear out peer manager data\n            Work out length of typed array with offset correctly (fix #1204)\n            nRF5x: Add Watchdog timer handling\n            nRF52: start new connections on idle to ease memory allocation conflicts between code execution & IRQs\n            nRF52: Ignore INVALID_STATE from CONN_PARAM_UPDATE_REQUEST (it can happen if we disconnect and then SD requests an update)\n            Fix Date.toString for dates before 1970\n            STM32: Fix handling of months when setting the internal RTC\n            Move to a faster jsvNewFlatStringOfLength which avoids blocking memory allocation\n            nRF5x: If a task is in progress, report the task ID (BleTask enum)\n            nRF52: Report central mode promise errors correctly if returned by softdevice\n            Remove 'out of memory' warning messages (it's stored as a flag anyway)\n            nRF5x: Don't disable IRQs completely for some things - only disable Espruino ones\n            Fix tab complete for Pins (fix #1213)\n            ESP8266: Fix load() causes endless loops (fix #1037)\n            ESP8266: Wifi library doesn't handle {password: null} (fix #753)\n            ESP8266: make topstrings and topreadonly work on Mac OS X (fix #1210)\n            Change order of execution for init - E.on('init',...) now executed before onInit\n            Added Error flag to show if a UART overflow has occurred\n            Change more instances of jsWarn to jsException\n            Avoid printing error messages during execution, and report to console on idle when if errors were flagged (fix #766)\n            Increase HTTP server and client version from 1.0 to 1.1 (needed for Websockets on Safari)\n            Stop 'require' creating an undefined Module entry in the modules list (fix #1218)\n            Stop require dumping filesystem errors as well as 'module not found'\n            Now throw an exception when writing to a closed socket (fix #1220)\n            Set the internal 'conn' variable to false when a connection closes to avoid confusion\n            nRF5x: Fix typo so we wake every 4 min for RTC, not 0.25 sec!\n            process.memory() now reports time taken for GC and vars GC'd\n            Slightly more aggressive idle GC on most platforms (at 5% free)\n            Don't warn the user when we had to run a GC pass during execution\n            Fix issue drawing on right-hand side of rotated graphics where H>W (regression in 1v93) \n            If >1 button, set pin state correctly at boot/reset\n            Add an argument to `reset`. `reset(true)` will now cause all Flash memory to be cleared as well.\n            Puck.js: Holding down the button while booting (past the the 5 LED flashes) will now cause data saved in Flash to be cleared\n            STM32: Remove the 'utility timer' from the list of available PWM pins, fixing A0/1/2 PWM on F4 (fix #1229)\n            Disable Graphics.createCallback on devices with small amounts of flash memory - rarely used on those devices and fixes HYSTM32_28 build\n\n     1v93 : Ensure that specifying too many advertising UUIDs causes an exception, not a reboot\n            nRF5x: Fix for time jump caused by reentrancy in jshGetSystemTime\n            Fix regression causing multiple end/close callbacks when using standard TCP/IP socket client/server\n            Ensure NetworkJS reports receive errors back correctly\n            nRF5x: Fix issue where connect and immediate disconnect could in some cases trigger an error from nordic's libraries that'd cause a reboot\n            Fix regression that caused Original Espruino to have lost Filesystem/hashlib/neopixel support in 1v92\n\t    Re-add TV output to Original Espruino\n            Fix some stack overflow bugs on Linux found by fuzzing (#1147)\n            Remove un-needed code for parsing '.' in var statement (#1147)\n            Add autocomplete for pin names (fix #1124)\n            Add Array.indexOf fromIndex support (fix #162)\n            Puck.js: Add BluetoothRemoteGATTServer.startBonding to allow bonding to be initiated when Puck.js is a central\n            Fat FS: closedir after readdir, FS errors should be catchable (#1164), fs.statSync (#1163)\n            Allow hardware (CTS) flow control (fix #1165)\n            nRF52: Add AntiCat's patch to Nordic's NFC library to cope with malformed NFC requests\n            Puck.js: Fix increased battery drain after NFC usage (fix #1171)\n            Puck.js: Fix WS2811 output library that would output bad data after neopixel waveform (fix #1154)\n            nRF52: Seed random number generator at boot (fix #1166)\n            Stop trailing decimal point if there are no digits after it - which could cause issues in JSON\n            Don't enter debugger if we're in the middle of uploading (echo_off_for_line) (fix #644)\n            Added Date setters (fix #504)\n            Allow Timezone to be set for Date with E.setTimeZone(...) (fix #530)\n            Added RegEx lexing (part of #256)\n            Puck.js: fix error 8 from NRF.sleep during an active connection \n            nRF5x: Fix `NRF.updateServices` when a 128 bit service shares the same 16 bit UUID\n            Add 'errors' option when using `Serial.setup` to enable error handling (and turn it off by default as it can fill the input queue)\n            nRF52: Re-initialise services and HID after a `save()` (fix #1185)\n            nRF5x: Add NRF.getAdvertisingData\n            nRF5x: Allow array of objects in NRF.setAdvertising (fix #1188)\n            Fix internal vcbprintf JSON dumping\n            nRF5x: NRF.findDevices will now throw an exception if no callback is supplied\n            nRF52: Added BluetoothRemoteGATTServer.getSecurityStatus to check the status of the link\n            nRF52: Disable auto-whitelisting by default, add with `NRF.setWhitelist` (fix #1187)\n            nRF52: Allow secure Bluetooth LE connections\n            Don't draw font characters that are off the edge of the screen\n            Make atob and btoa use flat string for larger amounts of data (faster & more memory efficient) (fix #1192)\n            nRF52: Pull in Nordic SDK13 code to crash caused by writing large characteristic (fix #1181)\n            Puck.js: Added Puck.magTemp() function to get the magnetometer's temperature as well\n            nRF5x: Fix issue where 'NRF.sleep()' called while a connection was active could cause Espruino to go into a high power draw mode\n            Fix Object.setPrototypeOf when called on undefined (fix #1194)\n            Fix dumping of an ArrayBuffer containing data (new ArrayBuffer([1,2,3]) isn't valid)\n            Fix setAdvertising regression where name would be lost after save() (fix #1193)\n            Add `E.set/getFlags` to allow interpreter state to be controlled from one place\n            Add `E.setFlags({pretokenise:1})` to dynamically turn on pretokenisation (fix #1178)\n\n     1v92 : nRF5x: Fix issue where Espruino could crash during save() if the flash got into a strange state\n            Added Pin.toggle() function\n            Fix implicit casting to bool/number on ArrayBuffers (fix #1030)\n            Fix jstExecuteTaskChecker bug, and allow jstExecuteFn to take a userdata argument\n            Puck.js: Reduce IR LED to 10% duty cycle\n            Puck.js: Allow Puck.IR to take pins for external IR LED (fix #927)\n            nRF52: Allow arbitrary NFC data to be specified (fix #1021)\n            nRF5x: Allow multiple advertising packets to be set at once with NRF.setAdvertising\n            nRF52: Add 'properties' object to BluetoothRemoteGATTCharacteristic\n            nRF52: Perform write without response if that is what is required \n            Pico/WiFi: Allow USB HID to work on Windows (from @nailxx)\n            Allow Puck.js/nRF52 devices to drive Neopixel/WS281x/APA10x LEDs with require(\"neopixel\").write (fix #1023)\n            Fix crash in JSON.stringify for zero-length typed arrays\n            Fix precedence of 'void' keyword (fix #1079)\n            nRF52: Add BluetoothRemoteGATTCharacteristic.startNotifications (fix #959)\n            nRF52: Added BluetoothDevice.gattserverdisconnected event\n            nRF5x: Report back reason codes for BLE disconnect\n            Added DataView class\n            nRF52: char.readValue now returns DataView to be more Web Bluetooth compliant (fix #1091)\n            nRF5x: Fix explicit disconnect being able to reboot Puck (fix #1088)\n            nRF5x: Respond to conn_params update request, fix puck-puck disconnection after ~65 sec (fix #1089)\n            nRF52: Change connection params for central mode so NRF.setLowPowerConnection affects connection speed\n            Un-inlining jsvGet*AndUnLock functions to give us a little more free flash\n\t    ESP8266: RELEASE=1 sets WIFI_DBG and NET_DBG to 0 to shrink firmware size\n\t    ESP8266: Add Wifi.setAPIP() and Wifi.setIP\n\t    ESP8266: Add i2c clock stretch (#1097)\n\t    Fix E.FFT output (enable magnitude when one array specified)\n            Puck.js: Correct reading if using analogWrite to red LED and *then* using Puck.light()\n            Improved build process for all boards\n            Pin.toggle now returns a boolean (fix #1111)\n            nRF52: Now use 'high drive' mode for GPIOs\n            Puck.js: tweak IR duty cycle, with high drive GPIO range is ~3x more\n            nRF52: switch compilation to size optimisation, not speed\n            nRF5x: Allow services to be advertised (fix #996)\n            JSON.parse now throws an exception if an incorrect value type is found (fix #1117)\n            Pipe close event handlers now use 'this' arg - solves auto-closing pipe when piping from HTTP\n            nRF5x: stop app_timer NRF_ERROR_INVALID_PARAM errors (trying to sleep for too little time)\n            Added flash emulation to Linux port\n            Increase max graphics size from 1023 to 32767\n\t    Add Fat File System to boards with large Flash (ESP32)\n            nRF52: Don't get stuck in 'HID Busy' state if a HID send failed\n            Change name of socket close internal variable so it doesn't conflict with Pipe's close call\n            Stop pipe from causing errors if fields of the requested names exist but aren't functions\n            nRF52: Fix upgrade from older firmwares if saved code is in flash, reduce virtual pages to 2\n            Fix segfault detected by fuzzing (#1133)\n            Fix File.read so that end of file triggers pipe.end event\n            ESP8266: Add BOARD ESP8266_4M with 1600 vars, 64K save area and GRAPHICS (#1110)\n            ESP8266: Add ESP8266.deepSleep(micros, option) (#1102)\n\n     1v91 : Fix recent regression if no Boot Code defined at startup\n            Fix handling of return of rejected promise within a promise\n            Fix regression where HTTPS without cert/ca or key failed\n            nRF52: Making NRF.getPrimaryService/etc more robust\n            nRF5x: Add NRF.getAddress() - fix #1001\n            Fix bug that caused load() not to clear memory if only E.setBootCode was used\n            microbit: Update Espruino with pin polarity, so saved code gets loaded without BTN1 pressed\n            Fix bug that caused Bluetooth/TV/USB objects to be added in devices that didn't support them (fix #832)\n            nRF52: Increase custom UUID count from 3 to 10\n            Adding Global built-in objects like SPI1/Serial1 and Bluetooth to the docs\n            Puck.js: Tweak battery percentage calculation to try and make it more linear\n            Puck.js: Adjust Puck.light() levels based on battery percentage (and add comments)\n            nRF5x: Fix E.hwRand() (fix #1010)\n            Ensure tab complete/others include the Object proto even on functions/strings\n            nRF5x: Add NRF.restart() to force the restart of the Bluetooth Softdevice if required\n            nRF5x: Add E.setLowPowerConnection(bool) to allow continuous connections to Puck.js (fix #995)\n            Allow implicit conversion of hexadecimal strings to numbers (fix #1016)\n            Allow arrow functions inside nonexecuting functions (fix #1011)\n\n     1v90 : Fixes for Promise.all (passing in non-promises, pre-resolved, and ordering) (fix #976)\n            Fix arrow function bug when parsing multiple arguments\n            Added more helpful error messages for TLS\n            Allow `Modules.addCached` to take a function (makes module loading more memory efficient)\n            Re-add Espruino's old `rand` function (so no malloc, and ~1kB RAM, ~3kB ROM saved)\n            nRF5x: Ensure 'NRF.sleep' works even when connected\n            Fix bug when using >32 bit integers as array indices (fix #984)\n            Fix bug when parsing '.catch' while not executing (fix #989)\n            Stop PWM 'glitching' when moving from a nonzero value down to 0 (partial #991)\n            nRF5x: Add multi-channel hardware PWM (fix #991, fix #972)\n            'dump()' now outputs code written with E.setBootCode as well (fix #999)\n            nRF5x: Remember advertising information even after softdevice reboot  (fix #997)\n            nRF51: Remove heap placeholder on nRF51 as not needed since no malloc. Increase nRF51 var count (fix #985)\n            nRF5x: 'connect' event now contains address of device that has connected, and fix docs\n            nRF5x: Add a 'NRF.disconnect' function to disconnect a client that has connected to Puck.js\n            nRF5x: Fix timing accuracy problems with setWatch\n\n     1v89 : Allow entering of multi-line Templated Literals on the command-line (fix #970)\n            Make lexer fail when parsing non-templated strings with newlines in \n            Add 'let' and 'const' keywords - treat them like 'var' for now\n            Increased findDevices timeout to 2 seconds\n            Allowed 16 bit UUIDs to be specified as simply \"ABCD\" (no \"0x\")\n            Improved BLE error messages (especially from Promises)\n            Fix STM32F1 regression caused by F4 LSE fixes\n            Fix comma operator regression caused by recent arrow functions addition\n            Remove RTC changes for STM32F1\n            nRF5x: Make sure that updateServices(notify) on a non-notifyable service will just error, rather than reset (fix #973)\n            nRF5x: Ensure setWatch doesn't reset pin state\n            nRF5x: Reset pin states to default on 'reset()'\n            nRF5x: Move advertising back to 375ms (more reliable connections)\n            Puck: allow Puck.mag to work while magnetometer is on\n\n     1v88 : jshSetEventCallback callbacks now get an argument with the channel number\n            Tab complete now offers a much better set of completions (fix #926)\n            Fix emitting of events with long names (fix #906)\n            Ensure 'af_opendrain' pin mode gets remembered when saving (fix #890)\n            Add second Promise.then argument (fix #869)\n            Fix 'chained' promises (fix #894)\n            Fixed memory leak when automatically converting a simple object to a String\n            Added ES6 Template Literals\n            Initial commit of ES6 arrow functions\n            Add 'opendrain_pullup' pinMode (including emulation on STM32F1)\n            Make OneWire use opendrain_pullup (no resistor needed for short runs now)\n            Add Software I2C (with opendrain_pullup) (ref #549, fix #29)\n            Cope with new escape codes for home and end on Ubuntu 16.04 (27,91,70/72)\n            Tweak VGA output back porch to 2ms (so leftmost pixels always on screen)\n            Fix regression with 2 concurrent waveforms on different pins (fix #930)\n            nRF5x: add updateServices, and allow setServices to be called multiple times (partial #936)\n            Added Puck.getBatteryPercentage() utility function\n            nRF5x: setServices can now uninitialise SD in order to remove added services\n            Added E.lockConsole() for use with E.setPassword()\n            Calling jsvRemoveChild at end of array now updates the length (fix #946)\n            Allow padding to be specified as 3rd argument of JSON.stringify\n            JSON.stringify now dumps typed arrays as arrays (fix #489)\n            nRF52: BLE HID support and switchable Nordic UART\n            Fix STM32 regression where pinMode was set when it shouldn't have been\n            Add Third option to pinMode to allow the pin mode to be set while keeping it 'unforced'\n            Save and dump now keep track of whether pin mode had been forced or not\n            readFile (and File.read) now uses Flat Strings to allow more memory efficient reads (fix #932)\n            nRF5x: Add ability to get RSSI of current connection (fix #928)\n            More STM32 changes to LSI->LSE clock switchover to fix RTC misconfiguration on Espruino WiFi\n            Move LED + BTN definitions to Symbol Table (allows autocomplete)\n            When moving console before printing has started, move all buffer contents as well\n            Fix regression where replacing a function starting with 'return' with another would cause errors\n            Fix potential issues with Telnet server and return values from netCreateSocket/netAccept on some platforms (fix #931)\n            nRF5x: Add Puck.js self-test code, fix issue where analogRead reset pin state\n            nRF5x: Change central mode API to mirror Web Bluetooth\n            Fix switch fall-through to default (fix #964)\n            Started using jsvObjectRemoveChild to remove some internal object properties that are undefined (frees some variables)\n            Added E.dumpLockedVars() in non-release builds to help debug memory leaks in libraries\n            nRF5x: Added NRF.findDevices as a helper function to easily list BT devices in range\n            Console now prints the type of Objects if their constructor is in the root scope\n            nRF5x: setScan/findDevices now parses advertising data\n            nRF5x: Added Web Bluetooth style requestDevice function\n            Add spaces between large tab completes\n            Correct the handling of exceptions in promises\n            Ensure that exceptions have a 'stack' attribute if they can have children\n            nRF5x: Added list of free flash areas\n            Make sure Puck.js users can't overwrite bootloader/softdevice (doing so would brick the board)\n            Fix micro:bit/nRF51 ctrl-c behaviour (fix #905)\n            Simplified process.env on devices with little memory\n            nRF5x: fixed serial number reporting\n            Move button state setup to jshResetDevices\n            Had to remove 'dump()' and SW I2C on devices with very little flash memory (Olimexino/Micro:bit)\n\n     1v87 : Add support for compiling with float-abi=hard (even if it doesn't give us real-world benefits)\n            Add shortcut for quick execution of common call types\n            Fix BBC micro:bit save() regression from 1v86\n            Fix 'lock overflow' when calling methods with 'this' bound (fix #870, fix #885)\n            Fix jsvStringIteratorGetCharOrMinusOne for zero-length strings\n            Allow tab-completion straight after '.'\n            Make sure execution stops for native functions if there's an error when parsing arguments\n            NRF5x: remove setName and add functionality to setAdvertising, along with advertising interval\n            NRF5x: allow raw advertising data in setAdvertising\n            Add E.setPassword - allows Espruino console to be locked\n            Fix pin header numbering for BBC micro:bit (it changed for the production version) (fix #896)\n            Allow Magnetometer speed to be specified for Puck.js\n            Fix out of memory when appending a string to itself\n            Allow members of the same name as function arguments to be added to a function (fix #913)\n            Fix STM32F4 RTC stopping if reset during first 1 sec of boot, also fix Espruino WiFi board clock startup\n            Fix issue where native functions couldn't be replaced by non-native fns (fix #879)\n            If statements now return values (fix #909)\n            Fix >8 bit SPI when sending single elements with SPI.send (fix #897)\n            Sockets now fire 'end' events (fix #886)\n            Added Graphics.draw/fillCircle (fix #920)\n\n     1v86 : Compile Telnet server into linux by default, Add '--telnet' command-line option to enable it\n            Fix lock 'leak' in Telnet when Telnet is turned off\n            Add Telnet serial device to allow redirection\n            Create errors for unterminated expressions (fix #814)\n            Remove Espruino's built-in strcpy/etc\n            Remove Espruino's built-in maths\n            Add basic Taylor series sin and atan for when we're trying to save memory\n            Refactoring to use global var for lexer - save some memory and increase parse speed\n            Add .removeListener (fix #30)\n            Added better micro:bit `show()` that works well with Graphics\n            Add `require(\"Flash\").getFree()` as multiplatform way to find free flash pages (fix #815)\n            Add the ability to set clock frequencies on STM32F4 chips (like Pico) with E.setClock (fix #52)\n            `jsvEvaluate` now uses memory area for execution of JS strings (fix #817)\n            Add `E.setBootCode` to allow JS scripts to be run without being in RAM (fix #740)\n            'Expecting a number or something iterable, got X' changed to exception rather than warning (gives stack trace)\n            Drop '.init' and '.fini' symbols, allowing GCC 5.x compilation on STM32\n            Ensure that pinMode/digitalWrite is re-constituted properly by dump() and save() (fix #833)\n            ESP8266: add stack dump on fatal exception, ./targets/esp8266/printstack can extract a backtrace\n            ESP8266: move JswSymPtr and JswSymList to flash to free up gobs of RAM, bump jsvars to 1600\n            Fix write to flash when BLE connected on nRF51/2\n            Fix potential variable corruption issue when copying objects/arrays containing packed ints\n            Fix ESP8266 printLog memory leak (fix #852)\n            When parsing from a Native String (E.memoryArea), use Native String for function code too.\n            Added built-in Promise implementation\n            Fix broken Object.keys/getOwnPropertyNames caused by ESP8266 RAM saving tweaks\n            Add Object.g/setPrototypeOf (fix #856)\n            Fix memory leak when executing bound function with 'this'\n            Fix missing PBKDF2 & AES libs on Pico + Linux caused by an untested ESP8266 commit\n            Fix negative Date to string code (fix #854)\n            Convert type warnings to exceptions (to provide stack traces for problems)\n            Add uncaughtException event (fix #846)\n            Stop eval in a switch statement from confusing parsing (Fix #845)\n            Fix regression in 'mode' argument of SPI.setup (allows custom CC3000 pins to work)\n            Fix '.on' with long event names\n            Enable F4Discovery button pull-down. Newer boards don't seem to have one fitted\n            Add 'force' to 'Serial.setConsole' - you can force the console to stay in one place\n            Fix micro:bit compass problems (fix #864)\n            Ensure that Pico can properly enter deep sleep even if USB is never used\n            Only inline the very basic variable iterator functions (save enough space to allow Espruino board build again)\n            Don't include Promises on devices where flash memory of Scarce (fix Olimexino compile)\n            Fix glitches in PWM output when updating Software PWM quickly (fix #865)\n            Added `E.kickWatchdog()` to allow you to keep your JavaScript running - not just the interpreter (fix #859)\n            Ensure all pins set to AIN on startup\n            Fix regression where setWatch would remove pulldown from button if called after reset()\n            Reduce amount of flash available for saved code on Original Espruino (until we can get code size down)\n\n     1v85 : Ensure HttpServerResponse.writeHead actually sends the header right away\n             - enables WebSocket Server support from JS\n            Fix issue where GC'd objects referencing non-GC'd data wouldn't unreference it\n            Add E.memoryArea to allow memory addresses to be treated as variables\n            Fix STM32F4 LSI clock frequency - should make the Pico's RTC a lot more accurate (fix #776)\n            Added HeatShrink compression to saved code (instead of RLE)\n            If saving fails, delete command history and try again.\n            Make sure `reset()` resets the sleep and busy indicator pins\n            Now escape characters >=127 as well (fix #780)\n            Add decodeURIComponent (fix #779)\n            Allow reset();save() on one line\n            Fix potential issue parsing HTTP headers when more data is sent after the header (fix #783)\n            Fix broken storage of floating point values when <255 variables\n            Fix regression where DACs didn't work on Original Espruino Board\n            Improve tab complete's memopry usage\n            Added Tab complete and Debug to low-end Nordic uCs\n            Limit the number of events processed each time around the idle loop to the number that were in it at the start\n             - helps to fix issues with out of memory when receiving big files over ESP8266 serial connection\n            Allow different types of network to have different buffer sizes - enlarge JS, Linux and WIZnet buffers\n            Fix bug where clearInterval() and setWatch with debounce could cause setWatch to momentarily stop working\n            Make HTTP server only close connection after Content-Length bytes received\n            Speed up jsvNewFlatStringOfLength by combining it with updating the free var list\n            Update the free var list when garbage collecting (makes allocation at the start of memory more likely)\n            Don't zero the contents of memory when freeing - speeds up deallocation\n            Removal of un-needed zero initialisations for variables\n            Only garbage collect on idle if we're low on memory (fix #767)\n            Improve malloc behaviour for crypto lib (try and free all command history is first alloc fails)\n            Improve HTTPS error messages\n            Add READ_FLASH_UINT8, allowing ESP8266 to read&exec strings stored in Flash with E.memoryArea\n            Start the RTC up running off LSI, and switch after a few seconds if the LSE has started correctly\n            Allow JSV_GET_AS_CHAR_ARRAY to get a pointer to memory in ArrayBuffers or memoryAreas\n            Reset PinStateIsManual in reset (fix #765)\n\n     1v84 : Fix device initialisation flags not working when the device number is above 32 (fix #751, #748)\n             - this fixes broken SPI when not on standard pins\n\n     1v83 : Moved to size optimisation for Pico (needed to get HTTPS into 384kB)\n            Ensure Modules.addCached doesn't reset parse state (fix #723)\n            dump() in Espruino Pico now ignored the pull-down for the button (fix #731)\n            Warn when \"compiled\" functions gets into Espruiono (fix #707)\n            Fix lost character on Espruino Startup (fix #704)\n            Fix duplicated characters when USB+USART IRQs fire at the same time  (fix #635)\n            Fixed Serial.find(...)\n            Detect UART framing and parity errors and emit them as events on the Serial object\n            Fix [] instanceof Object (fix #737)\n            Fix regression in jsvCopyNameOnly (Object.getOwnPropertyNames when names are >8 characters long)\n            HTTP requests (and sockets) can now emit 'error' event (fix #706)\n            Add optional `ca`,`key`, and `cert` for server public key when using HTTPS or TLS (fix #736)\n\n     1v82 : Fix debugger regression (where quit/reset/etc don't exit properly)\n            Fix wakeup when setDeepSleep used at startup (fix #645)\n            Add `shiftOut` function (fix #631)\n            Store line numbers for functions (via `Esc [ 1234 d` escape code before decl) and use in debug + stack traces\n            Allow Ctrl-C to break out of tight loops with function calls in\n            Add tab -> autocomplete in Console (fix #677)\n            Fix I2C repeated start (#390)\n            Fix regression in Math.random() - now back between 0 and 1 (fix #656)\n            Fix `var a=0;typeof a -> \"undefined\"` (fix #683)\n            Don't store brackets in functions (fix #204)\n            Store functions as 'flat strings' if long enough (fix #467)\n            Move most functions out of jsvar.h header file - improves code size on devices where they're not inlined\n            Fix parse error for switch statements which meant that `switch (a,b)` caused an error\n            Fix error message when `LoopbackA.setConsole()` called\n            Move SPI/I2C/Serial initialisers to jsvReadConfigObject, will now error on invalid args (fix #413)\n            Fix issue where double-buffered waveforms would use the wrong buffer in the callback\n            Fix memory leak in tab autocomplete on objects\n            Added AES crypto library (Pico only)\n            Fix `typeof (new Uint8Array([1, 2, 3, 4]))`\n            Store `function(){return ...}` without the return (fix #700)\n            Increased simple string usage from 4 chars up to 8\n            Swap order of JsVar internals, string usage up to 10 chars\n            Add handling for uint32_t,uint64_t,uint32_t case for Raspberry Pi\n            Add startup sanity checks for jsnative.c (in non-release builds)\n            Added fix for returning floats on Raspberry Pi\n            When <1024 JsVars, `lastChild`'s top bits are stored in `flags`, and pack\n               is moved such that we get 1 extra character in StringExts\n            Allow events of >12 characters length\n            Fix regression in flash memory write (introduced via AES merge)\n            Fixed instability when resetting after using SD card on non-standard pins\n            HTTPS support on Pico (when compiled in)\n            Rename USE_HTTPS to USE_TLS, and enable by default for Pico + Linux\n            Add 'tls' module with 'connect' - for TLS Socket connections\n\n     1v81 : Fix regression on UART4/5 (bug #559)\n            Fix Serial3 on C10/C11 for F103 boards (fix #409)\n            Remove Graphics.setColorHSV, add E.HSBtoRGB (fix #554)\n            Make jsiDumpState/jsiAppendHardwareInitialisation use callbacks (fix #398)\n            Add `E.dumpStr()` to dump current state of interpreter as a string\n            Add ReferenceError, and ensure that TypeError gets converted to a string properly\n            Actually create ReferenceError for undefined variables\n            Fix Object constructor behaviour (fix #561)\n            Now remove intervals/watches if they occur within 0.1s of a Ctrl-C on a blank line\n            Fix parsing of trailing commas [,,1,,,]\n            Treat vertical tab as whitespace\n            Make sure we ReferenceError on '+='/etc\n            Allow reserved words in record access and structure definitions\n            Add Object.defineProperty/defineProperties (even if they ignore most args)\n            Fix value returned when redefining an existing function\n            Ensure Pico powers down USB in deep sleep - now down to 20uA!\n            Fix Exception throw within catch block (fix #566)\n            Fix issue where new Array(3.0) wouldn't produce a 3 element array\n            Keep track of modified area in Graphics (so modules with `.flip()` can be speeded up)\n            Fix `new Date('December 17, 1995 03:24:00')` - check only first 3 chars of month\n            Allow Software PWM via `analogWrite(..., {soft:true})`\n            Add `encodeURIComponent`\n            Make sure `typeof unknown` doesn't ReferenceError\n            Fix isNaN behaviour for 2 element array\n            Fix jshPopIOEventOfType when element is at the top of queue anyway\n            Produce more reasonable behaviour when converting very long strings to ints/floats\n            Added built-in JavaScript debugger! See espruino.com/Debugger for details (fix #37)\n            Fix crash when using E.getSizeOf() in some cases\n            Make sure a TCPIP connection closes even if no data sent\n            Make `flash.erasePage` safe if called without arguments (fix #586)\n            Add `Pin.getInfo` to see what a Pin can do (for #93)\n            Move Pin function code out of jshardware\n            Add `E.on('init', ...)` - like `onInit` but allows multiple handlers\n            Make sure `dump()` and `E.dumpStr()` dump the contents of Serial as well as events for other objects\n            `E.getSizeOf(.., 1)` can now recurse into objects showing the sizes of all their children (fix #579)\n            Fix bug when appending to a flat string (fix #614)\n            Add `Serial/SPI/I2C.find(pin)` - so we can figure out what device to use based on the pin\n            Ensure that when uploading, each command gets checked for errors (rather than right at the end)\n            Fix writes on HTTP requests after a timeout, and add chunked encoding if the header is set.\n            Added pin info for bit-banded pin addresses (and jshGetPinAddress).\n\n     1v80 : Fix SD card IO that can corrupt SD card on file append since 1v73 (fix #536)\n            Fix some potential pointer issues in hashlib\n            Make debounced setWatch output state+time information (regression fix #537)\n            Shorten some internal property names (faster/less mem is 4 chars or under)\n            Change 'internal property' prefix from '>' (fix #540)\n            Duplicate properties in an object defn. now cause second to be used (fix #495)\n            Make sure `E.unmountSD` doesn't forget custom SD card configs from `E.connectSDCard`\n            Added support for USB CK pin (fix #544)\n            ES5 parseInt behaviour - don't treat numbers beginning with 0 as octals (fix #538)\n            SPI.send now returns Uint8Array when passed an array. Also takes `{data:X, count:Y}` as argument (fix #485)\n            Fix `parseFloat(Infinity)` (fix #314)\n            Speed up jsvIterateCallback for arraybuffers\n            SPI speed improvements, esp for SPI.write (fix #547)\n            TV out tidyup, and VGA output can now do line doubling\n            Merge in USB HID support for STM32F4 (keeping old USB for the F1)\n            Add built-in 'Flash' module to allow Flash memory to be accessed from user code\n            Pulled load/save code out of jshardware into jswrap_flash.c\n            Remove jsiOneSecondAfterStartup from Linux builds (fix #551)\n            Add RLE compression when saving to flash, increase Pico RAM from 3000 to 5000 vars (fix #543)\n            Fix `JSON.parse` when not given strings (fix #546)\n            Tweak Olimexino board - 700->1k vars, but lowered code flash to 6k\n            Disable flash prefetch on Pico (~1% slower, but less power and way more accurate ADC readings) (fix #545)\n            Now throw errors when 'in' is used on an invalid datatype (fix #550)\n            Updated (inaccurate) docs for Serial.write/print and removed duplicated code\n            Changed Pico's device class to 0x02 - now works on older Mac OS 10.6.8\n            Change reported USB HID type to 0, from 2 (mouse)\n            Improve digitalWrite/etc documentation\n            Add `pin.mode` and `pin.getMode` functions (mirroring `pinMode`)\n            `Serial.setup` now remembers options if none specified (fix #557)\n\n     1v79 : Fix Mac address parsing for top nibbles\n            Make bind reference function internals not copy them. Fix scoped vars in bind (fix #533)\n            Use jsvUnlockMany to tidy up code and save some space\n            jsiExecuteEventCallback can now take an arbitrary number of arguments\n            Allow setTimeout/setInterval to take extra arguments (fix #532)\n            Ensure HTTP is closed even when no data handler (fix #535)\n            Seed random number from analog input, add W.hwRand and E.srand (fix #534)\n            Fix timing bug when setting timeouts from intervals in Deep Sleep\n            Reduce timeout for IO (eg. I2C write) on F401 and F4\n            Tweaks to keep code size low enough for Olimexino\n\n     1v78 : Fix regression where SPI2/3 weren't working on most pins (fix #525)\n            Allow MAC address to be set for WIZnet (fix #527)\n            Ensure res.on('close') is called for empty HTTP requests (fix #528)\n            Ensure that A9 is never the default pin for USART1 output (fix #526)\n\n     1v77 : Add E.mapInPlace\n            Allowed ArrayBuffer Graphics to store pixels MSB-first\n            Added faster software SPI path for simple writes\n            Make sure filesystem support gets compiled into Espruino Pico\n            Fix jsvGetFlatStringPointer to return the correct address\n            Fix I2C2/I2C3 on Pico\n            Fix issue where garbage collect of a Flat String corrupted the free variable list\n            Fix issue where Array.sort on big array with identical elements failed (#515)\n            Add 'modules' variable, and set 'this' to 'exports' when parsing a module (fix #520)\n            Fix instanceof implementation (and fix mem leak) (fix #523)\n\n     1v76 : Merged in NetworkJS library (for JS networking implementations)\n            Ensure that 'wrapped' libraries are killed before timers/watches\n            Made 'Field or method doesn't exist' report back the field that doesn't exist\n            Added quick and dirty scripts/test262.js runner script\n            Fix propogation of Errors and Exceptions through function calls\n            Allow parsing of integers > base 16\n            Now allow functions with >16 arguments (fix #490)\n            Fix assert fail for syntax error in do or while loop\n            Maths operations now call Object.valueOf if it's needed\n            Fix assert fail when jswrap_object_getOwnPropertyDescriptor called with non-string\n            Fix Array.indexOf when array contains non-basic values\n            valueOf returns a type error when called on undefined\n            Make sure analogRead doesn't overwrite pin state if it was set previously with pinMode\n            Make sure pinMode works with ADC input mode\n            Tweak event handling - events such as `Serial.on('data'` now set `this` to `Serial`\n            Add Function.bind (fix #318)\n            Fix SPI.setup memory leak (fix #496)\n            Fix assert fail on debug builds on Waveform output (fix #511)\n            Added more allowed types of whitespace\n            Added String.prototype.trim() (fix #507)\n            Allow argument lists in Function() (fix #505)\n            Propagate `this` into eval (fix #513)\n\n     1v75 : Fixed issue with Pins/Bools as Array indices\n            Fix crash when out of memory while creating built-in object\n            Fix continue statement in nested loops (fix #501)\n            On Linux, Exit nonzero when an error occurs (fix #499)\n            Ensure that pipes 'complete' if the source closes (was previously only the destination)\n            Make HTTP/Sockets throttle reads so internal buffers don't get full when piping\n            Added http statusCode, statusMessage, and httpVersion\n\n     1v74 : On Espruino Board, allow setTime to use full 64 bits so setTime(Date.parse(\"...\")/1000) works\n            Fixed issues with Waveform after 1v72 update to flat strings\n            Added 'global' built-in value\n            Fix inaccuracy of 'Date.now()' on STM32\n            Improve jsvIteratorGetIntegerValue speed for arrays (fix #493)\n            Change process.env.EXPORTS to something more useful for compiler\n            Fix issue with graphics fill on PCD8544 LCD\n            Add TypedArray.slice (from ES6) to help modules that use I2C\n\n     1v73 : Add Uint8ClampedArray, remove code duplication in ArrayBuffer (fix #486)\n            Fix regression where accessing certain member names of an undefined variable would cause a crash (fix #488)\n            Fix behaviour of char code 16 at beginning of the line (it now doesn't re-add the prompt after processing the line)\n            Added jspGetNamedVariable for use in compiled JS\n            Fix glitchy time values on the Espruino Board (fix #394)\n            Fix getTime()==0 in onInit, which could break timeouts in onInit after a reset (fix #462)\n            Refactor Software SPI code into jsspi.c\n            Allow filesystem to work on user-defined pins (fix #427)\n\n     1v72 : Stop RTC being reset by hard reset (getTime will now be time since power first applied) (fix #412)\n            Allow Function.apply to take typed arrays (fix #442)\n            Allow arrays to be passed to digitalPulse so square waves can be created easily\n            Force inlining of jsvLock/UnLock on most systems - improves performance a lot\n            Fix issues with SPI.write, CS, and out of sync receive bytes\n            Fix do..while without trailing semi-colon\n            Ensure that &,|,^,etc all have different precedences (without extra recursion)\n            Used new semi-recursive parse for expressions\n            Fix filled column when fillpoly is off the end of the screen\n            Fixed reporting of Serial RX pullup in `dump()`\n            Add input thread on Linux, and fix idle and Ctrl+C behaviour (fix #451)\n            Stop huge amounts of input events blocking Espruino's timers (fix #452)\n            Add ability to use serial ports on Linux with Serial1.setup({path:\"/dev/ttyUSB0\"})\n            Started ability to use SPI from Linux\n            Added 'net' library with support for sockets\n            Fix JSON parse of negative numbers (fix #456)\n            Only keep RTC settings if the relevant oscillator is running (fix #444)\n            Finally fixed sporadic compilation problems with '-Os'\n            Fixed issues with intervals in onInit (#462)\n            Remove libraries from root scope (fix #463)\n            Fix pin namings on Nucleo boards\n            Fix addition of stdlib's exit on Nucleo debug\n            Allow setWatch to execute native functions inside the IRQ\n            When dumping typed arrays, use the size if all elements are 0 (fix #448)\n            eval() can now access local variables and function arguments (fix #460)\n            Added 'flat strings' for typed arrays.\n              - these use a continuous chunk of memory so are much faster\n            Ensure that we only create as many Serial/I2C/etc items in Symbol table as we need (fix #453)\n            Allow modules to return whatever was assigned to exports - not just the original object\n            Allowed E.nativeCall (assembler/compiled functions) to execute directly from a flat string\n            Working F401 USB VCP bootloader\n            Make Press-poweron-release-press boot back into Espruino (this may confuse your OS)\n            Assert failures (in non-release builds) now reboot the system on ARM\n            Fix issues with freeing of variables not clearing the lock flags (fix #474)\n            Make Uint32Array actually return uints (even if they're so big they have to be represented as doubles)\n            Allow peek/poke to read and write arrays of values\n            Add Boolean constructor (fix #311)\n            Fix difference between String() and String(undefined) (fix #312)\n            Fix I2C/SPI on F401/F411-based boards (fix #470, fix #473)\n            Improved ArrayBuffer write performance\n            Massively improved ArrayBuffer Graphics fill performance for bpp<8\n            Fix issues with floating point on devices with <1024 vars (using 12 byte JsVar)\n            Add ability to change I2C bit rate from I2C.setup\n            Added VGA TV output\n            Added E.toString (for converting anything into a string)\n            Pulled Typed Array creation into its own function\n            Added E.toString and E.toUint8Array\n            Made I2C.readFrom return a Uint8Array (fix #479)\n            Allow multiple byte OneWire reads and writes\n            Fix setWatch on F3Discovery (fix #183)\n            Ensure that E.getSizeOf() works for ArrayBuffers (fix #484)\n            Don't allocate Flat Strings if we can get away with 2 normal string blocks\n              - it's actually faster to allocate and uses less memory\n\n     1v71 : Allowed WIZnet + CC3000 to be instantiated on any pins\n            Fix break inside loop inside case inside function (fix 428)\n            Added fs.stat and File.seek (fix #429, fix #430)\n            Allow use of DLE (char 16) on an empty line to turn echo off for *just that line*\n            Add XON/XOFF flow control on Serial + USB. This is enabled by default for Serial (fix #20)\n            Fix irregular timing on Espruino boards with clock crystal (inc rev 1v4)\n            Sort out 'Number()' constructor not being picky enough - parseFloat now parses 'Infinity' (Fix #325, mostly fix #322)\n            Stop iterator in FOR loop being called once more after a break\n            Fix bug allObjects found with iterating over undefined\n            Fix ArrayBuffer.sort issue with element size >1\n            Fix network de-initialisation on Linux\n            Fix reference count issue caused by removing a timer that had already been removed\n            Power up SYSCFG on F2/3/4 parts, allowing watch to work on ports other than A\n            Wait after setting the RTC time, to allow registers to update (fix #438, fix #441)\n            Now using gcc-arm-none-eabi-4_8-2014q3 for compilation - CodeSourcery stopped being supported\n\n     1v70 : Make pipe remove its drain/close listeners. Stops out of memory for repeated piping.\n            Fix parseInt for values too large to go in an int (#406)\n            Fix integer maths when result is too large for an integer\n            Fix mod operator with NaN/Infinity (fix #315)\n            Fix signed array values in PACKED_BIT devices\n            Drop JsVar size from 20 bytes to 16, increase Espruino variable count accordingly\n            Fix Array.fill on sparse arrays (fix #410)\n            Allow I2C repeated start (fixes some odd I2C devices, fix #390)\n            Refactoring to use iterators wherever possible\n            Merge fs_kill and file_kill to ensure that files always die before the filesystem\n            Add `E.unmountSD()` to allow SD cards to be removed once they have been used\n            Stop String.split(\"\") adding an empty elementy to the array\n            Tidy up linker script, allow F401 to use 3x16kB pages for storing program data\n            Fix regression in long timeouts (fix #416)\n            Use 'interval' var to specify if we're an interval or not (don't use 'recur' var)\n            Stop while/for/etc resetting exception state (fix #419)\n            Add  E.getSizeOf (fix #421)\n            Fix jsvCountJsVarsUsed for names with values\n            Make hidden names smaller to save a few JsVars\n            If there's only one function scope, don't define an array and save 2 JsVars\n            Fix setInterval on non-F1 boards (fix #415)\n            Fix issue where large doubles (> +/- 2^31) were converted to -1 rather than truncated ints\n            Fix E.getSizeOf (fix #424)\n            Fixed JSON indentation issue\n            Made 'pretty' JSON output look a bit better\n\n     1v69 : Fix 1v67's regression of digitalPulse when doing lots of pulses\n            Add configurable OneWire search command (for finding DS18B20s with alarm set)\n\n     1v68 : Fix memory leak in String.split\n            Fix references to `this` - you can now write `this[\"LED1\"]`\n            Fix memory leak when calling toString on a normal object\n            Fix memory leak in Graphics.createArrayBuffer\n            Fix memory leak when joining arrays containing null\n            Fix memory leak when syntax error while getting function arguments\n            Fix memory leak test when running on Linux\n            Fix memory leak in filesystem file open (when failure)\n            Fix memory leak on Syntax error\n            Stop multiple exceptions from being reported (eg. Syntax Errors)\n            Fix parsing of '!!' when not executing\n            Improve Error.toString, and fix bug when an exception was thrown from a function\n            Improve jsvObjectGetChild when out of memory\n            Switch native function decls from 32 bits to 16\n            Swap HY2.4 board to software LCD driver as well, work out pin mappings from PY file\n            Fix inaccuracy in setInterval, which had started since 32 bit switch in 1v65\n            Store JSWAT_EXECUTE_IMMEDIATELY in a way that will fit in 16 bit function decls\n            Allow bit-packing of refs for low memory boards (fix #145)\n            Now dump 'debounce' for setWatch\n            Make sure that dump() outputs correct JS for undefined variables\n            Allow pin counts per port of >31 on Linux-based systems\n            Fix issue with lost high-speed events when using setWatch with small debounce\n            Fix HTTP client regression\n            Fix Date constructor issue (uninitialised variable) (fix #408)\n            Fix invalid conversion of large ints to floats on ARM\n            Fix reset behaviour for non-standard default Serial ports\n\n     1v67 : Lower size of timer task array of devices with little RAM (fix #401)\n            Move hidden lists out of the root scope (fix #357)\n            Fixed exception catching\n            Fix Serial1 initialisation after 'reset()'\n            Fix parsing of try..catch when a serious error (not an exception) occurred\n            Stop the utility timer queue filling with WAKEUP tasks if Espruino gets woken up early\n            Add ability to specify default Serial TX and RX pins in BOARD.py\n            Reduce how many digits of floating point values are normally displayed\n            Fixed PWM output on B4 + B5\n            Fix regression when using pins as array indices\n            Remove negation for CHxN outputs - it seems they don't negate after all. Fixes PWM polarity on A7,B1,B13,B14,B15\n            Add pullup to USART RX. Reduces wakeups and random characters on Serial1.\n            Add error flags and E.getErrorFlags to report possible issues like buffer overflows and low memory (fix #136)\n            I2C timeouts now throw exceptions (fix #403)\n            Fix String.prototype.split with non-string args\n            Add fake digital pins D0..D7 under linux (helps with testing)\n            Rewrite ff_wtoupper and save 650 bytes \\o/ (fix #368)\n            Update Makefile to make it easier to cross-compile RPi->Espruino board\n            Fix HYSTM32_32 LCD at the expense of a bit of speed (fix #137, fix #327)\n\n     1v66 : Ensure that analogWrite(pin,1) works on negated outputs\n            Allow multiple Waveform playback on one pin (+ wave fixes)\n            Improve dump() for objects and Serial.on('data') (part of #397)\n            Fix Date.getSeconds,Milliseconds, and documentation on getMonth (#399)\n            Fix memory leak on Serial receive\n            Fix all Serial receive characters being 0 if no bytesize is specified\n\n     1v65 : SPI.send/I2C.write/Serial.write can now take variable number of arguments (fix #370)\n            Don't check for token matches where we already know what it should be (fix #280)\n            Improve file read speed for large reads\n            Waveform stability improvements\n            Fix Float32Array.set (and improve speed for non-float arrays)\n            OneWire library now uses hex strings for addresses rather than 64 bit ints\n            Fix issue with uninitialised function arguments (fix #391)\n            Fix parseURL for numeric keys in query string (fix #388)\n            When running JS files under Linux, do two parses to ensure that Functions are 'hoisted'\n            Add Object.create()\n            Add Function constructor\n            Add Object.getOwnPropertyDescriptor (although it won't return spec-compliant values)\n            Add some Stubs for inbuilt Date and Error classes\n            Added throw and try..catch..finally (see #40)\n            Fixed overriding of builtins with other Builtins\n            Added Date.valueOf\n            Stop warning about break at the end of 'default' in switch statement\n            Switch to 32 bit ints (fix #324)\n            Added Array.prototype.reverse, and also for ArrayBuffers (fix #389)\n            Swap JsVar fields around so everything is aligned on the correct boundaries\n            Merge jsvNewWithFlags and jsvNew - making variable allocation a bit faster\n            Fix changeInterval regression after int32 changes\n            Remove JSV_NAME flag - paving the way for more efficient variable storage\n            Store only 32 bit time for events (work out full 64 bits in event loop)\n            Increase event buffer size to 128 (from 64)\n            Enabled Graphics + CC3k support in the F3Discovery\n            Make `Serial.onData` call back with >1 char (#383)\n            Move `Serial.onData(...)` to `Serial.on('data',...)`\n            Add Serial.read/available/pipe (fix #383)\n            Add HTTP client/server read/available/pipe\n            Add documentation for events (and tidy it up for constructors)\n            Stop HTTP server closing before all data has been read\n            Fixed parsing of multiple shifts\n            setWatch now reports the pin back (fix #275)\n            Fixed memory leak in g.getPixel with arraybuffers\n            Fixed memory leak in \"\".indexOf(\".\")\n            Fixed ArrayBuffer Graphics where width*height*bpp&7!=0\n            Converted parse errors to throw exceptions\n            Added Date.parse and Date.toString\n            Fix parsing of integers that are too big to fit in an int32 (they're stored as doubles)\n            Fix Linux Espruino when no tty is present\n            Shave a few bytes off size of jsiDumpState using printf\n            url.parse now unescapes the query string (fix #227)\n\n     1v64 : Fix 'a=[2,3,4];delete a[1];'\n            Make sure parseInt(\"0x01\",16)==1 and parseInt(\"0x01\")==1 but parseInt(\"0b01\",16)==0\n            Fix equality check used in switch, so false !== 0\n            Improve Math.pow accuracy for small integer powers (fix #374)\n            Make Ctrl-C only interrupt code if it has been running for too long (fix Ctrl-C -> CC3000 restart issues)\n            Removed duplication in symbol lookup (fix #372, fix #323, fix #343)\n            Fix JSON.stringify with circular references (fix #378)\n            Fix String.indexOf when search string is bigger than the string being searched (fix #377)\n            Add String.prototype.slice() (fix #376)\n            Changed to more compact binary search symbol table (fix #278)\n            hasOwnProperty now doesn't check prototypes #24\n            Added Object.getOwnPropertyNames (fix #79, fix #158)\n            Move 'constructor' into the correct place, be more aware of builtins in prototypes (helps #380)\n            Handle __proto__ on builtin object types (eg. [].__proto__) (fix #381)\n            Remove indirection of __proto__ (fix #102)\n            Properly fix Object.getOwnPropertyNames (fix #380)\n            Remove jsvFindChild*Ref (fix #375)\n            Added LoopbackA/LoopbackB serial ports (fix #61)\n            Fix slowdown when lexing long strings\n            Remove Lock/UnLock in jslGetNextCh - should speed it up\n            fs.appendFile() now works even if the file doesn't exist (fix #385)\n            Support unicode escape sequence (\\uXXXX) but crop to 8 bits (fix #386)\n            Stop setInterval/etc increasing index numbers (fix #382)\n            Clear existing digitalWrites on reset() (fix #231)\n            Stop setWatch getting invalid data on load/save/reset (fix #254)\n\n     1v63 : Memory leak when defining functions (fix #359)\n            Fix Instance properties overwrite prototype (fix #360)\n            Fix `edit(functionName)` without quotes (fix #356)\n            Fix 'Uint32Array is not unsigned' (fix #330)\n            Ensure Object.keys([9,,undefined,9])==[0,2,3] (partial #349)\n            Store array length in the array root node rather than the last element (fix #351 #361)\n            Object.keys on array now returns strings (fix #348)\n            Remove jsvArrayGetLast (fix #363)\n            Fix issue parsing `function() { return }`\n            Stop jspNewObject creating a new object name if one already exists\n            startup_stm32f10x_hd.s now explicitly sets the stack pointer. Allows Espruino images to use more RAM\n            Add BusFault hander, to allow peek and poke to unmapped addresses without HardFaulting the ARM\n            Fix edit(...) so that functions themselves (not just the variable) are updated (fix #366)\n            Crop lines in errors when > 60 chars (fix #364)\n            Improve when stack traces happen for error reporting\n            Better error messages, and more efficient handler\n            Improving Util Timer rescheduling to try and avoid 64 bit divisions\n            Fix a lot of WIZnet W5500 issues (thanks @mgg1010!)\n            Add E.reverseByte\n            Add HIGH and LOW (fix #371)\n            Improve docs for SPI/I2C/Serial.setup\n            Force reconnect on CC3000 disconnect (fix #373)\n            Added cephdon's streaming file API (fix #12)\n            More WIZnet W5500 stability fixes - try and ensure that HTTP server never goes down\n            Fix HTTP client Host header when accessing ports!=80\n\n     1v62 : Added ArrayBufferView functions as per ES6 spec (fix #310)\n            Added Graphics.setRotation (fix #321)\n            Added Graphics.drawImage (fix #198)\n            Added E.toArrayBuffer for fast string->array conversion\n            Accessing an undefined array/object element now doesn't create it (fix #63)\n            Fix fs.unlink returns true if the file does not exist (fix #331)\n            Try and improve timer overlays by reordering the alternate function list\n            Ensure that PWM output doesn't enable negated/non-negated outputs when it doesn't have to\n            Improve console performance when sending long strings\n            Initialise Graphics flags Graphics.createCallback - could have caused all kinds of issues\n            Now make setInterval > 5s less accurate when setDeepSleep is on (saves ~0.5 sec of non-sleep time)\n            Fixed problem when accessing an array with a string in a variable\n            Fix issues with `\"0\" in {0:1}` (and hasOwnProperty)\n            Improved interpolate function, and moved it out of ArrayBufferView into E\n            Fix Problem with Object.keys on a string (fix #347)\n            Fix assert fail when deleting a property that doesn't exist (fix #344)\n            Ensure that dump remembers function names if they were in the root scope (fix #338)\n            Fix memory leak in fs.readdir\n            Ensure that abbreviations in console's '=...' output appear on newline if needed\n            Add String.replace (fix #334)\n            Make Graphics.drawImage draw bottom line of pixels (fix #329)\n            Add Array.shift/unshift (fix #342)\n            Fix Defining function after return causes error (fix #326)\n            Fix deleting the last element in array (fix #346)\n            More helpful I2C error messages (fix #10)\n            Fix overriding built-in functions (fix #202)\n            Add ES6 Array.prototype.fill (fix #317)\n            Modified jsiQueueObjectCallbacks (and Object.emit) to support >2 args\n            Added support for SPI LSB-first\n            WIZnet improvements (specifically on HTTP server)\n            Added WLAN.setIP for CC3000\n            Fix String.split issue with last element (fix #352)\n            Remove order warning for SPI if no order given (fix #353)\n            process.env will now contain the git commit\n            Move setInterval/Timeout implementations into jswrap_interactive (makes more sense)\n            Add setWatch warning if it's not possible (fix #337)\n\n     1v61 : Fix toString crash for large numbers\n            Support floating-point literals without a leading 0 - eg '.5' (fix #296)\n            Fix array access with booleans (fix #290)\n            Fix \"==\" issues where only one argument is an array (fix #283)\n            Make Array.join ignore null values (fix #289)\n            Callback graphics now works even without a fillRect implementation (fix #295)\n            ArrayBuffer Graphics now supports 2 and 4 bits as well as 1,8,16,24,32 (fix #301)\n            Allowed array.splice to as many arguments as needed\n            Make Array.sort() use string compare by default (fix #291, fix #292)\n            Allow [,] and [1,2,,4] - (fix #287)\n            Stop JSON.stringify using 'undefined' (fix #286)\n            function.call can now have more than 4 arguments\n            Rewrite native function caller (fix #277)\n            Fix conversion of floats to booleans (fix #307)\n            Fix parseInt of NaN/Infinity (fix #309)\n            Add extra escape codes in strings (fix #304)\n            Ensure String.charAt returns empty string for out of range (fix #305)\n            Make REPL faster when receiving large amounts of data (fix #303)\n            Improved jspeFunctionCall speed, added Named functions (fix #77)\n            Allow Array.map.forEach to be applied to Strings and ArrayBuffers (for #310)\n            Tweaks to make more Array functions work on non-arrays\n            Added Array.reduce\n            Allow commas in expressions at end of for loop - `for (;;i++,j++)`\n            Fix SPI send with a single number\n\n     1v60 : Fix unary plug on variable not working (fix #268)\n            Added DNS with eth.setIP() for W5500\n            Fix lock 'leak' when creating Graphics with callbacks\n            Small fixes for trigger/timer\n            Make dump() + console aware of built-in SPI/I2C/etc\n            Add Pin constructor for converting numbers into a pin object\n            Added getPinMode\n            Fixed I2C saving state (fix #270)\n            Add JTAG to ignore list for some boards\n            Fix LCD FSMC formatting and report if LCD is unknown\n            You can now reference built-in functions. eg. [1,2,3].map(Math.sqrt)\n            Add Object.valueOf - help with #187\n            Add Object.hasOwnProperty (although it does have some false positives) - #24\n            Add software SPI - fix #41\n            Fix issue when constructing an ArrayBuffer with a floating point length\n            Fix Math.round regression and add checks to ensure it can't happen again\n            Fix DEVICE_IS_XXX defines (fix SW SPI regression)\n            Fix hardware SPI regression (getting out of sync after ArrayBuffer write)\n            Removed non-standard Integer.valueOf - use \"A\".charCodeAt(0)\n            Fix non-standard ArrayBuffer behaviour when constructing an ArrayBuffer from an ArrayBufferView\n            Fix `1 in [2,3,4]` behaviour - it searches keys, not values\n            Make parseInt(..., >36) return NaN\n            Make Number.toString() use lowercase chars for hex\n            Fix issues with NaN, negative zero, and Math.round\n            Fix equality checks with null\n            Fix comparison of integers with empty string/whitespace+number\n            Added nativeCall, which allows C/Assembler to be called from JavaScript\n            Fix custom font memory leak\n\n     1v59 : (function(){})?1:0 should == 1 (fix #261)\n            Fix Math.pow (Fix #260)\n            Fix String.split() (Fix #259)\n            Added Array.concat (Fix #262)\n            Increase RTC/getTime reliability by ensuring overflow can't happen\n            Added Math.min/max\n            Allow jswrapper to wrap objects with a name >8 characters long (fix #264)\n            dump() now doesn't print 'var X = undefined;' - just 'var X;'\n\n     1v58 : Fix Serial.parity\n            Fix glitches in jshGetSystemTime\n            Added Graphics.setFontCustom for custom fonts\n            Added String.lastIndexOf, and made String.indexOf with fromIndex work\n            Used non-bold vector font, improve alignment, and make curves lower quality\n            I2C can now write any size (as long as it fits on the stack!)\n            Try and enlarge fillRects caused by polygons\n            Fix === issues, fix #257\n            Add Graphics.getColor/getBgColor for Juergen\n            Added E.convolve for doing fast calculations with Waveforms\n            Allow String.fromCharCode with multiple arguments\n            Add builtin_modules to board's JSON\n            Added E.FFT for Fast Fourier Transforms\n            Added 16 bit read/write to Waveform (and speed up utility timer)\n            Fix utility timer - now interrupts just in time\n\n     1v57 : Tweak IRQ priorities to try and make SPI RX more reliable\n            Make http default to port 80 if no port is specified in options\n            Try and stop issue with System Time suddenly jumping forwards\n            Fix assert fail when clearing and adding timeouts from within a timeout\n            Fix modulo (actually remainder) operator for floating point values :/\n\n     1v56 : Added atob and btoa (for base64 encode/decode) - fix #244\n            Added Array.sort() - fix #220\n            fs.writeFile/appendFile now return false if they fail for some reason\n            Move Graphics init and idle functions out of jsinterface.c\n            Add HttpServer.close\n            Ensure that Linux command-line tests keep running if there's something to do\n            Epic networking refactor - it should now be possible to support multiple network devices in a single binary\n            Now only remove the interval/timeout/watch that's causing the error - not every one\n            Change names of functions in callback-based Graphics so they don't conflict with the real ones\n            More CC300 reliability - now range check the return value from send+recv, because if there's a timeout it can be wrong\n            Fix memory leak in setWatch with debounce\n            Fix 'repeat:false' in debounced setWatch\n            Make sure 'repeat:false' disables the hardware watch\n            Initialise RTC roughly 1 sec after reset, and use external 32kHz oscillator if it exists\n            Added E.enableWatchdog (fix #252)\n            Fix negative start value for String.substr()\n            Fix problem where the RTC's full 32 bits weren't combined properly\n\n     1v55 : Add String.toUpperCase/LowerCase\n            Fix E.getAnalogVRef() regression\n            Add Math.tan()\n            Ensure Double/Integer have Number as a prototype (fixes: Number.prototype.n=function();(5.0).n() )\n            ||/&& now doesn't use booleans (fix #251)\n            More resilient parseInt behaviour\n            Allow data listener for HTTP POST (fix #226)\n            Stop JSON.parse using eval (fix #249, fix #208)\n            `.toString` is now called when a String is needed from an Object (fix #57)\n            Fixed reference count error when looking for functions in an Object's prototype\n            Fix issues with Numbers as Strings in maths (eg. '-5'|0)\n            Make sure NaN|0 == 0 (and not some huge number)\n            Ensure that [1.23]*1.0 == 1.23 (fix #91)\n            Don't pull in cos (use sin(x+PI/2))\n            Try and save flash memory on Olimexino board\n\n     1v54 : Add 4x6 font (instead of 8x8)\n            Fix occasional instability with Waveform read/write\n            Refactor JSON to improve speed and code size (using cbprintf)\n            Now print special 'short' JSON for console.log (and the REPL) (fix #47)\n            JSON.stringify now doesn't print functions (fix #207)\n            Refectoring jsparse.c to name functions after their JS Grammar names\n            IF statement now accepts commas\n            Ensure that undefined+0 == NaN (only worked for floats previously)\n            Fix assert fail (issue unlocking when executing built-in functions)\n            Fix setInterval regression in dump (and tidy up code)\n            FS lib now resets when issuing the reset() command (fix #200)\n\n     1v53 : Attempt to deal with the case where CC3000 crashes on initialization\n            Fix regression with setInterval/timeout and saving\n            Fix issue with saving Serial baud rates\n            Added ArrayBuffer.set\n            Use jswrapper.c for executing idle/init/kill events for libraries (cleans up jsinteractive.c)\n            Added beta 'Waveform' API to allow simple audio output\n            Improved non-deep-sleep power draw by allowing Espruino to wake itself on the Utility timer (rather than SysTick)\n            Allowed Waveform API to output on both DAC and PWM\n            Improve auto-generated documentation\n            Speed up ArrayBuffer.set and allow Strings to be used properly\n            Fix jsvArrayJoin if memory runs out\n            Added E.sum and E.variance array operations\n            Added Waveform Analog Input\n\n     1v52 : Fix memory leak in Array.slice\n            Fix broken Serial initialisation (partial fix for #241)\n            Add fs.unlink (for deleting files)\n            Fix url parsing when there are two slashes\n            Fix recent changeInterval regression\n            Making CC3000 recover properly in the case of repeated HTTP GET\n            Add alternate function remapping for Serial and improve Serial.setup error reporting, fix #241\n            Added preliminary WIZnet W5500 support (see http://www.espruino.com/WIZnet)\n            Alt Enter (27 + 10) now always inserts a newline: (eg. for `if (X) \\n Y`)\n            Fix digitalPulse with not a number\n            Make digitalPulse(... 0) wait until the last pulse is complete\n            Stop Espruino sending out so many carriage return characters (fix #243)\n            Added 'delete' keyword (fix #39)\n\n     1v51 : Added debounce to setWatch (fix #14)\n            Tidy up timeout/watch code and now store an integer for interval\n            Fix crash in url.parse (string free)\n            Fix Modules.addCached bug which means that Modules.removeAllModules created a memory leak\n            Fix regression introducted by fix for #199\n            Added 'Esc,[,2,K' escape sequence for clearing lines. Much safer than Ctrl+C which tends to break out of execution.\n            Fix bootloader (broken by LTO in 1v49)\n            Added Number.toFixed\n            Make number.toString(base) work for floating point (fix #232)\n            Fix Linux jshSleep so that timeouts are handled at <10ms if required (fixes test056)\n            Now use jshardware's SPI for SD filesystems - more multiplatform\n            Now ref thisVar, which stops it being repurposed into a Name for array accesses (fix #233)\n            Fix Linux halting when there is one long timeout but no other activity\n            fs.readFile returns 'undefined' if file is not found. Also make readdir return undefined on failure (fix #229)\n            Remove disk_timerproc in SD card implementation\n            Upgrade fatfs to R0.10a\n            Tweak jsinteractive.c to help reduce code size\n            Finally added Long filename support for FatFS (fix #78)\n            Epic refactor to remove JsParse (fix #17)\n            Implement faster Graphics ArrayBuffer fill (affects vector fonts + clear)\n            Stop repeated analogWrite with messing up PWM waveform (fix #56)\n            Swap open and close brackets in bitmap font (fix #191)\n            Graphics arraybuffer/callback now accepts 16bpp\n            Added ability to specify a JS function for Graphics fillRect\n            Graphics setPixel(x,y,undefined) to use foreground colour (fix #215)\n            Make sure that interruptions are handled better while drawing to graphics\n            Make sure that stack overflow errors are handled more tidily (and increase limit for warning)\n            Increase available stack on Espruino Board\n            Stop FatFS using insane amounts of RAM\n            High res timer (now to 1/2^23) using SysTick with RTC as a base (fix #168)\n            Added 'Infinity' constant\n            Fixed type equality check between int and float (should treat them as the same)\n            Fix parsing of '018' - it's not Octal after all (but 017 is)\n            More accurate values for PI and E\n            Fix charCodeAt being signed (should be unsigned)\n            When casting Strings to booleans, so s.length!=0\n            Guess initial values for average SysTick time - means that getTime is more accurate for the first 1-2 seconds after startup\n            setWatch now reports lastTime - time of last state change #238\n            analogWrite now respects pinMode (fix #234)\n            Add Open Drain support to pinMode (fix #225)\n            Fix calling Number([value]) always returns undefined (fix #186)\n            When disconnected from the net, make sure we free all HTTP clients/servers\n            Completely remove IRQs from CC3k code\n            Speed up CC3k code, try and make it automatically power cycle it on timeouts\n            Fix SPI MISO on F4 board\n            Move CC3000 to SPI3 (same pins) so SPI1 can be used for other things\n            Compile CC3000 support in for the F4 (untested)\n            Process.env now reports board serial # and current console device (se we can throttle for Bluetooth) (fix #219)\n            General bugfixing for low memory situations\n            Make string free non-recursive\n            Fix issue where fs.readFile of a big file would cause Espruino to crash\n            Fix memory test harness\n\n     1v50 : Fix broken Web IDE caused by change to printing JSON for console.log (part of #206)\n            Fix bug when trying to stringify {5:5}\n            Allow {1:2} to be parsed (fix #199)\n            Added SPI RX IRQ. Caved in and used a few bytes for buffers, made SPI significantly more reliable\n\n     1v49 : Change compiler flags to allow link-time optimisation\n            Increase buffer sizes on Linux\n            Increase buffer sizes on boards with >= 20kB RAM\n            Made Startup banner smaller\n            Less printing when loading from flash\n            Don't display startup banner if loading from flash (an easy way to fix #213)\n            Fix HTTP response code of 0 (fix #212)\n            Add timeouts to TI's CC3000 driver\n            Add timeouts for SPI, and other timeouts now interrupt execution\n            Lower USB interrupt priority, remove pesky PriorityGroupConfig that was breaking other IRQ priorities\n            Until we sort out SPI RX and IRQs, lower default SPI baud rate to stop timeouts\n            console.log and print output JSON now (part of #206)\n            Added handling of query in url.parse - still not fully compatible though (fix #205)\n\n     1v48 : Fix issue where the size of command history is being reported wrong and so process.memory().free is reported wrong too\n            We now loop without a seek to position inside the string (much faster if loop is not near the start of a fn) (fix #53)\n            Faster string iteration which doesn't involve incrementing it->index\n            Swapped to jumptable to lexer (should be a bit faster)\n            Added the 'E' class, with getAnalogVRef and getTemperature (fix #60)\n            Deprecated Math.clip (not in spec) and introduced E.clip\n            Fixed bug in common.py that meant that ifndefs in JSON were sometimes not obeyed (better mem usage on small chips)\n            Fix deep sleep breaking ADCs\n\n     1v47 : Fix issue with dump() and input_pullup not being quoted\n            Fix regression that broke OneWire in Espruino Board (#197)\n            Fix clock speed issue on SPI1 (https://github.com/espruino/EspruinoDocs/issues/18)\n            Don't interrupt on USB ESOF or ERR  - allows 'normal' sleep without interrupting every 1ms (fix #195)\n            Remove pointless KickStarter line printed on startup\n            Added bootloader hack to Python bootloader\n\n     1v46 : Fix parseFloat(\"\") not returning NaN, and parseFloat(\" \\t 5 \u00a3$%^&(*$\") returning NaN\n            Added isNaN() function (fix #184)\n            Fix parse order for 'typeof' (fix #172)\n            Added Number object (fix #165)\n            Bounded ftoa (stops crash when printing Number.MAX_VALUE) - helps with #185\n            Added Array.isArray() (fix #160)\n            Add do...while (fix #151)\n            Stop Espruino board from crashing if you try to create a web server without a connected CC3k (fix #182)\n            Remove Array.contains as it's not in the spec (use indexOf instead if you need it) (fix #161)\n            Fix nasty bug where adding/removing intervals/timeouts while in one could cause issues\n            Fix bug when printing 1.999999999 and similar (fix #190)\n            Remove need for pow for exponentiation. Not great but it fixes some tests that failed on FP inaccuracies\n            Change polarity of setSleepIndicator (fix #194)\n            Allow array.push with multiple arguments (fix #189)\n            Speed up array access by searching from the end backwards if we think the number is in the last half (fix #46)\n\n     1v45 : Fix parseFloat(\"foo\") not returning NaN (and assert) - fix #149\n            Remove Integer.parseInt\n            Fix parseInt(\"bar\") - fix #150\n            Ensure that maths ops with null do treat it as 0 rather than a string - fix #156\n            Fix digitalPulse length (properly!) - fix #154\n            Making sure that undefined gets cast to NaN\n            Fix Array.indexOf() returns undefined instead of -1 - fix #155\n            Moved memory() to process.memory() - added more info too\n            Try and improve handling of PWM timer speeds\n            Fixed varying SPI baud rates depending on device\n            Makefile changes for OSX compile\n\n     1v44 : Modified build system to store binary names in the python definition\n            Fix nasty regression involving losing code at the end of Strings\n            Fix segfault when pinMode is called on an invalid pin\n            Now disable interrupts during 4 bit SPI send - it's just too much otherwise\n            Detect unfinished block comments in console (fix #138)\n            Fix flash write on most 10XxB boards\n            Fix PWM output on all STM32 boards\n            General hardware tidy in prep for more intelligent device management\n            Run initialisation code before setWatch, to make sure pullup/down is set beforehand\n            Change 'Pin' datatype to be an unsigned char - makes tests easier\n            Now use the hardware RTC for keeping system time. Allows proper deep sleep on Espruino board\n            FINALLY - fix the USB VCP lost characters issue (#94)\n\n     1v43 : Added 'Modules' object with support for adding/removing cached modules\n            Allow product ID to be changed via Makefile\n            Fix documentation (and old-fashined Parsing style) for JSON\n            build_jswrapper now outputs errors to stderr (more compatible with default (silent) build process)\n            Fix issue when parsing quotes in strings\n            Added void operator for closure minification compatibility\n            Ensure that return takes the comma operator\n            Fix issue where printing Infinity would crash Espruino (fix #129)\n            Finally some working (extremely beta) cc3000 code\n            Added jsvObjectGet/SetChild to simplify some wrappers\n            'http' now uses JsVars for storage (so is suitable for non-linux devices)\n            Turned 'http' into a library\n            Added process.version and process.env (fix #131)\n            Changed handling of 2nd arg of << so that precedence is correct\n            Fixed handling of 'for (;;)'\n            Fix lock leak in Module handling\n            Update ST's library for the STM32F1\n            Update ST's VCP implementation\n            Added prefix operator (fix #130)\n            Allow espruino for linux to be run with '#!' in scripts\n            Fix indexOf on final element of strings (fix #133)\n            Remove JSV_PARENTINFO, as it turns out JS doesn't keep track of function scopes anyway (fix #109)\n            Make 'this' a keyword (now faster, more memory efficient)\n            Make 'Hardware' (root) the default value of 'this'\n            Add jsvArrayPushAndUnLock and modified code to use it (fix #135)\n            Now remember I2C state (partial fix for #13)\n            Replace 'pow' function with a smaller version - save ~2kb\n            Shaved another 1200 bytes off jslTokenAsString\n            Now store Pin state (fix for #13 on F1 parts, F4 still looks broken)\n            Added Graphics.stringWidth\n            Added internal Printf function\n\t           Misc speed and code size improvements\n            This version has gone to Seeed for use on the KickStarter boards\n\n     1v42 : [ebirger] allowing 'new' with no brackets\n            Allow built-in functions with variable numbers of arguments (fix #83)\n            Implement 'String' constructor in the normal way (fix #110)\n            Fix regression with parsing constructors while not executing\n            Allow multiple arguments to print and console.log (fix #92)\n            Make 'arguments' array available in functions (fix #100)\n            Fix an assert fail, and handle some potential memory leaks\n            Don't show __proto__ and constructor with for..in, keys(), or JSON.stringify\n            Make 'trace()' output more readable debug data for complex structures\n            Fix memory leak whe parsing functions iwht variable numbers of arguments - fix #115\n            Defined NaN\n            Stop 'new undefined()' crashing Espruino - fix #120\n            Get A13/A14 working on Espruino board (these were JTAG)\n            Get bootloader size direct from Python (remove hard-coding)\n\t           Fix '~' operator when acting on variables\n            Made bootloader a bit more error tolerate (CRC on write)\n            Added %=, /=, and *= operators (fix #121)\n            Allowed Object.toString() to take a radix argument for integers (fix #125)\n            Fix error message issue - broken strncat (fix #124)\n            Add comma operator (fix #122)\n            Added some basic code for STM32F429IDISCOVERY - not currently working though\n            This version is the one sent off on the Test Harness (so will probably appear on boards)\n\n     1v41 : Fix Olimexino compile (https://github.com/espruino/Espruino/issues/6)\n            [ebirger] Member constructors (eg. new a.b() )\n            [ebirger] Ensuring integers with radix specifiers can still be parsed if a radix is specified\n            Fix for tests/test_json_arraybuffer_001.js - iteration of arraybuffers of length==1\n            Add Object.keys(...)\n            More arraybuffer iteration fixes\n            On linux, use built-in stringToFloat to aid debugging. Handle exponentials, fix #31\n            'make serialflash' is now works correctly for Espruino Boards with bootloader\n            setWatch(..A0);setWatch(..A0);clearWatch(1) does not now kill the other watch, fix #25\n            One-based setTimeout/setWatch, fix #3\n            Added Function.call and Function.apply, fix #54\n            'http' and 'fs' are now libraries that need to be 'require'd, fix #8\n            Updated pin info for STM32F103xC/D/E chips, fix #84\n            Fixed linker script for STM32F4 (discovery board now works)\n            Object prototypes are now Objects, fix #101\n            Board docs now specify '3.3v' only pins fix #104\n            Add Array.forEach\n            Fix searching down >1 prototype to find functions (one more issue posted in #99)\n            Fix \"12345\"/5 type issues (fix #90)\n            'Consting' some string functions\n            Fixing arrays with string indices that are actually numbers \\o/ (fix #19)\n            Released onto website\n\n     1v40 : Ensure that LCD.prototype.setPixel = function actually works\n            Refactor LCD driver code to allow lcdInit (and start of making it non-platform-specific)\n            Built 'LCD' support into linux/raspi/carambola\n            Add initial SPI.send(ArrayBuffer) support - even if NO VALUES RETURNED\n            Start of built-in Nokia 5110 LCD support\n            Remove GPIO clock removal on sleep for now (it kills setWatch)\n            Fix (sub)ArrayBuffer problems (test100.js)\n            Added setDeepSleep - still beta put power consumption drops to 1mA\n            Fix broken name for httpCRq.write\n            Changed LCD to Graphics - added ability to render to ArrayBuffer\n            Fix 8 char built-in class names\n            Adding preliminary Sony SmartWatch support\n            Adding preliminary support for completely bare 36 pin chip\n            Fixing pin defs for Espruino board rev 1v1\n            Added proper SDL/ArrayBuffer and JS Callback graphics support\n            Added \"ifdef\" ability in build_jswrapper\n            Take JSVAR_CACHE_SIZE out of jsutils and put it in the board config file\n            Added JSV_PARENTINFO which will allow us to do things like setTimeout(foo.bar,10)\n            Fixed arrays in non-executes streams - 'if (0) print([1,2,3]);'\n            Added 'require' function loading modules from node_modules on SD card\n            Added module cache to stop modules being re-loaded\n            Renamed internal vars to start with '>' - much easier to distinguish for 'dump'/etc\n            Only use parentInfo on functions\n            Load all tests in test dir - don't do them by number\n            Added 'zigzag' ordering for ArrayBuffer Graphics\n            Added 'vertical_byte' ordering for ArrayBuffer Graphics\n            toJSON now ignores 'hidden' object elements\n            Special-case jsvArrayBufferIteratorSetIntegerValue\n            Make SPI output an ArrayBuffer\n            Use best out of 3 for DelayMicroseconds calibration - something seems flaky right after bootup\n\t           Lines now drawn from p1 to p2 inclusive\n\t           Events now use jshPushIOWatchEvent (should cut down on code) also fixed bug with watching pin #11\n\t           Now remember if pinMode was set or not\n       \t    Transform ```code``` in JSON into a code tag in the documentation\n            Graphics now supports FSMC for HY boards again\n            Drawing vector fonts is now roughly the right size and position (still not 100%)\n            Remove registration code\n            Adding MPL licence\n            Remove Arduino bit manipulation functions - nobody seems to use them anyway\n            # of flash pages/etc now comes from board info\n            [ebirger] Supply the correct arguments to Array.map\n            [ebirger] Method calls and membership evaluation should be done on all factors (ee. [1,2,3].foo())\n            [ebirger] When running multiple tests, only set up terminal once or it breaks the terminal window on exit\n            Added STM32-style USB CDC bootloader for Espruino Boards\n            Added scripts/create_espruino_image.sh to package up bootloader and espruino into one binary\n            SHIPPED on Impatient developer boards\n\n     1v39 : Added Bitwise NOT operator\n            Added Raspberry Pi version to ZIP (with HTTP support)\n            Fixed load/save on Linux Devices\n            Added pinMode function (to allow pull-ups/pull-downs to be turned on)\n            SPI.send4bit/send8bit will now not mess up the final element\n            changeInterval now clears up stored up callbacks (eg, setInterval(.., 0.01)...wait...changeInterval(...,20)\n            Ctrl-C no longer prints anything, which avoids lockups\n            No longer print \"Execution Interrupted\" if nothing was interrupted!\n            Added >>>= >>= and <<=\n            When entering text interactively, ensure that there are no trailing spaces\n\n     1v38 : Tweaks for Arduino IDE compile\n            Removed '(char #)' from stack trace, as a bit pointless now\n            Added better reporting of execution location when Ctrl-C pressed\n            Urgent fix for non-working Olimexino since 1v33\n            Fix string comparison when strings contain \"\\0\"\n            Added LED1/2/OSC/SD/etc to Olimexino Board docs\n\n     1v37 : Urgent fix - power saving code made it difficult to re-flash Espruino (now only apply this to Espruino Board)\n\n     1v36 : Fix documentation for Array.pop()\n            Added some much better board documentation\n            Fixed DAC output on F3\n            Fixed DAC output on devices where PWM is also available and the alternate function is less than the DAC's\n\n     1v35 : Attempt to reduce power consumption when sleeping by turning off GPIO, and setting GPIOs to AIN on reset\n            Fix F3 issue where ADC/DAC weren't picked up properly\n            Tidy up register text and add KickStarter mention\n            var a = {}; a[LED1]=0; - not converted to String\n            JSON (and hence dump()) now dumps ArrayBuffer correctly\n\n     1v34 : Faster jshFromDeviceString\n            Preliminary support for flow control on Serial receive\n            Speed improvements by removing jsvGetRef from jsvUnLock\n            fast 4 byte pre-check in jsvFindChildFromString\n            Skip lock/unlock in FindChildFromString to help increase speed\n            When we unplug USB, only go to the default console device IF that is the device we're currently on\n            Support for custom Espruino board\n            Added ArrayBufferView.interpolate\n            16 bit SPI send for send4bit/sevrnd8bit (better reliability on low-end chips)\n            Fix JSON dump of typed array\n            Added Math.clip(x, min, max)\n            When saving on flash, don't do jslTokenAsString properly\n            B3/B4 move from alternate fn\n            Fix incorrect reporting of analog pins\n            Fix I2C.readFrom on STM32F1/4\n            Make 1/2 == 0.5 (was being sensible before, but now follow JS spec)\n            Ctrl-C while in timer fn clears timers (but not outside it)\n            Fixed broken clearInterval from within setInterval\n            Hopefully fixed issue on SSD1289 LCD controller\n            Trigger wheel handler to use interrupts\n            2D arraybuffer interpolation\n            Added Math.wrap, fixed a lot of trigger issues\n            Fixed SysTick priority/preempt problems\n            Slowed the SysTick timer back down for everything\n            Fix Int8Array signedness on F4 boards\n            Refactored source code tree\n\n     1v33 : fix character encoding issue of \"\\16\"+\"1\" != \"\\161\"\n            Refactoring of ArrayBuffer into iterator, and addition of a general purpose iterator\n            Fancier assert for debugging\n            jsvArrayJoin to use new iterator\n            for (i in ...) to use new iterator\n            I2C and SPI use new iterator\n            Serial.write() - to allow single ints to easily be written\n            changeInterval assert fail when given a function by accident\n            added peek8/poke8/peek16/poke16\n            memory() now takes account of command history size\n            memory() on ARM reports the end address of the stack - so it can be used as a scratchpad with peek and poke\n            Try and reduce code size by not inlining several functions\n            No refs for StringExts - so we get one more byte per JsVar (~5%) more storage efficiency\n            Move from jsvIsBuiltInFunction to computer-generated jswIsBuiltInFunction\n            When creating Objects, check for built-in function BEFORE creating an Object class for it\n            Built process now checks that flash usage is under the allowed value\n            Added short compare to jswHandleFunctionCall to reduce code size\n            Added 3 byte compare (4 byte read and AND off top byte) - faster, less code\n            Auto-generate jsvGetBasicObjectName from docs\n            No longer using refs for storing whether free or not - use flags with JSV_UNUSED and get one extra var with 8 bit refs\n            Switch to using STRING_0...STRING_MAX in flags, rather than specific bits in JsVarFlags - allows more that 15 chars to be used per JsVar\n            Make ArrayBuffers actually be ArrayBufferViews - saves on extra string-handling code at expense of one var\n            Make sure Uint8Array,etc inherits from ArrayBufferView\n            Fix issue where a '\\0' coming in from serial was not put in e.data properly\n            Don't inline some functions when we're trying to save on flash\n            Re-use sin for cos, pow for sqrt to reduce code size\n\n     1v32 : Fixed embarassing issue with 0.999==\"0.A\"\n            Added and checked Pin.writeAtTime on STM32\n            Now don't allocate events array - just allocate directly, which saves memory and is faster (although slighty out of order)\n            Docs: now Alphabetically sorted, and class instances not listed by accident\n            Fix issue where Ctrl-C on ANY Serial port caused execution to be interrupted\n            Updated busy indicator to cope with recent change to not allocate events in an array\n            Fixed I2C on HY 2.4 board - I2C needed hard reset\n            Added basic ArrayBuffers/TypedArray support\n            Fix memory leak when error created with [] on a non-array/object\n            Improved hyperlinking in documentation\n            Fix I2C receive bug on F4\n            Increased VL board's input buffer size\n\n     1v31 : Fix PWM output on TIMER1/8 pins of the STM32F4\n            Fix PWM output for negated timers\n            memory() now runs a GC pass\n            Fixed multiple occurrence of functions in reference\n\n     1v30 : STM32F1: fixed AF issue meant peripherals would never return from AF mode\n            STM32F1: When given an invalid pin, now reports if pins are 'af' or not\n            Updated SPI.setup docs to mention that you can't mix AF and non-AF\n            If one SPI pin is specified but others aren't, only that pin will be set up\n            Added Olimexino hack so SPI1.setup works as expected\n            Allow using [] on a function\n            Fix precedence issue, so var a = function() { return 1; }(); works\n            Update SPI documentation\n            for (i in f) can now iterate over functions\n            Optional argument to trace() for object to start tracing from\n            Small steps towards ArrayBuffers\n            Added smart edit that checks for internal functions, and uses Function.replaceWith\n            Added Function.replaceWith to replace the internals of a function while keeping the scope\n\n     1v29 : Some hacky sysfs-based IO for running on Linux\n            HTTP Callbacks are now stored as names so they can be changed on the fly (Linux only)\n            Successful compile for Carambola\n            Filesystem support on Linux\n            Switch to variable size ref counter (marginally more efficient on very small devices, safe on Linux)\n            Linux now has unlimited memory available\n            Added linux/sysfs 'setWatch' (non-irq driven, so very noddy)\n            Checked jswrapper check from using multi-char constants to a #define\n            Improve pin suggestions for SPI/I2C/USART\n            Auto-initialise USART with default values when setConsole is used\n            Support for new Graphics LCD types\n            3.2\" VCT6 board support\n\n     1v28 : Faster LCD fillrect for HY 2.8\n            Fix for multi-byte SPI writes on HY board at 1Mhz (touchscreen control bug)\n            Fix issue with delayMicrosecond calibration on HY (and hence OneWire)\n            Fixed digitalPulse on STM32VLDISCOVERY\n\n     1v27 : Fixed problem with OneWire constructor execution\n            Added |=, &= and ^=\n            Added Array.splice()\n            Faster, more ROM-efficient built-in symbol table\n            Fix for potential issue when using field accessor on an undefined var\n\n     1v26 : I2C Support on STM32F1 and STM32F4 boards too\n            Emergency cut in variables for Olimexino with bootloader (as flash usage has got too high for save to flash!)\n\n     1v25 : http.writeHead to accept an empty header\n            Fixed issue finding methods on built in classes (0 termination)\n            make sure http server with no data still sends headers...\n            Start of MINI-HY-2.8\" support (all ok, but no SD card yet)\n            Reduce RAM usage by consting some arrays that are not modified\n            Vector fonts now use polys - 8kb less ROM, and faster rendering\n            Start of LCD 'driver' code\n            Standard way of handling events, Object.on/emit/removeAllListeners - like Node.js's EventEmitter\n            Self-calibrating Microsecond delay (for intermal OneWire/etc)\n            OneWire class\n            Correct handling of built-in class constructors\n            Fix error when parsing a zero-argument function that has been given arguments\n            I2C support - currently ONLY tested on STM32F3 board\n\n     1v24 : SDIO-based fat driver on the HY STM32 board\n            Added DAC to the HY boards (103xE-based)\n            Re-named the fileSystem functions to make them more compatible with node.js (readFile/writeFile/etc)\n            Added fs.appendFile\n            Removed HTTP from the reference until it is included in some boards\n\n     1v23 : Fix 'ERROR: INTERNAL: stmADCChannel' on STM32VLDISCOVERY/F1 boards when accessing PA0\n            Reference now mentions which Espruino version it is for\n\n     1v22 : Important fix - Events got executed in the wrong order if they got queued up\n\n     1v21 : Ensure SPI clock does not stop between bytes\n            Added SPI.send4bit and SPI.send8bit\n            Made sure the VL board's code fits into available flash\n            Smart += that can append to a string rather than cloning it\n            dump() prints functions properly, rather than 'var f = function() {}'\n            Pageup/down move the cursor to the beginning/end of input\n            LCD draw/fill with negative x and y\n\n     1v20 : Add console.log\n            Fix automatic usleep for Linux\n            Added node.js-style HTTP server for Linux version\n            Fixed null-pointer issue when accessing something that doesn't exist on an object\n            Added node.js-style HTTP client for Linux version\n            Start of bit bashing functionality\n            for (i in \"ABCD\") console.log(i) -> 0,1,2,3\n            String array access (but not for writing - doesn't work in JS anyway)\n            String String.fromCharCode / charCodeAt\n            Added SPI baud rate setting\n            Vector font chars 'a' and '4' now work ok\n            Fix numeric exception when rendering a poly that has some identical points\n            Better digitalPulse (uses timer + interrupts)\n            analogWrite can now take an object with a 'frequency' argument for PWM\n\n     1v19 : Fixed issue where var M=Math;M.random() failed\n            Fixed issue with var U=USB;U.print(\"Hello\");\n            Remove loop iteration limit\n            Fix memory leak when a syntax error is in for '(i in arr)'\n            Save state of pin on setWatch interrupt (e.state)\n            Change setWatch to allow only on rise or fall as an option\n            clearWatch() clears all watches\n\n     1v18 : DAC support on F3/F4\n            Serial.setup() can also take a second parameter of an object {tx,rx}\n            Better support for dump() with echo/setBusyIndicator/etc\n            Better dumping of prototypes on built-in vars\n            Don't add chars<32 (Except tab) to the input line\n            SPI1/2/3/4.setup() to take an object {baud,sck,miso,mosi}\n            Better hardware initialisation code (not UARTS auto-init if they are used)\n            Fix issues with prototypes\n            Peek/poke instructions\n            Start of I2C support (not usable yet)\n            Added Math. ceil/floor/exp/log\n\n     1v17 : Support for running alongside the Maple bootloader\n            Fix parsing of numbers beginning with 0 when forceRadix!=8\n            Fixed USART1 on Maple/Olimexino devices\n\n     1v16 : Inlining of jsvLock/UnLock in jsvar.h to improve speed\n            Move non-hardware-dependent stuff into jsdevices\n            Move jshardware.c into targets/stm32/jshardware.c, create 'targets/linux' and use a single makefile\n            For + While loops work without reallocating lex\n            Fix AddNativeFunction when function already exists (and tests + saved state)\n            Change jsvFindChildFromX to use JsVar* from JsVarRef - saves a lot of lock/unlock\n            Handle new Foo() as per spec (return value + init of this+prototype) - still does not cope with non-object prototype\n            Beginning of SD card support (works on Olimexino, but not very flexible)\n            Fix for parse/eval when given non-strings\n            Strings can now contain '\\0'\n            Jumptable-friendly reserved word check\n            Jumptable-friendly builtin functions (massive refactor)\n            SPI support\n            HY board support, and graphics LCD\n            Added fillPoly, and Vector fonts\n            Added Registration code\n            Fixed some undefined function/array warnings\n            Much better HTML function documentation\n            Fixed edit() function\n            STM32F3 support, and now peripheral stuff is done with a script\n            explain what pins are available if a pin is not capable of requested fn\n            power on ADCs only when needed\n            LCD fillPoly speed improvements, + drawLine\n            Add datatype for Pin, so pins written to console by pin name rather than integer value.\n            Added Pin.set/Pin.reset\n            Change warning about 'undefined.' into an error (foo.reset() had unexpected consequences!)\n            Fix parsing of '1.0/-3'!\n            Add typeof and instanceof operators\n            Ensure that Serial1/SPI1/etc are objects of type 'Serial'/'SPI' - so prototypes can be added\n\n     1v15 : Escaping JSON strings\n            Fix parsing of octal numbers in strings (so don't have to be 3 chars long)\n            Drastically improved stack usage using small stub functions (at expense of a bit of speed)\n            dump() also dumps out prototypes for functions\n\n     1v14 : Fix complaint about pins during setBusyIndicator()\n            Increase available memory on OLIMEXINO\n            Added function memory() to return memory usage\n            setWatch now links to function names (rather than just functions)\n            dump() also handles Serial.onData(...)\n            Fix issue with JSON printing functions with arguments to console\n            prefix builtin variables with '_'\n            fix ArrayIndexOf when array contains undefineds\n            move all devices into one git repository\n            USB on F4\n            call onInit function/string if it exists when Espruino powers on\n            Compile F4 with -O2 - as we have the program memory for it\n            Serial3/4/5/6 on F4\n            Serial3 on Olimexino\n            Make Serial.onData() clear onData handler\n\n     1v13 : Operations like + on Object/Array convert them to strings rather than error\n            var now doesn't error if there is no semi-colon\n            Allow new line or line delete in multi-line editing\n            add edit(functionName) - which copies function definition into inputline so it can be updated\n            When printing lines, delete current inputline and then put it back in idle loop (only if echo=1)\n            Support *,/ etc on numpad\n\n     1v12 : Issue when printing lots of data and then disconnect USB\n            Hide USB/Serial in Dump()\n            add Array.map(fn(x), thisArg)\n            For newline, count [] and () (as well as {}) - also knows about comments/strings/etc\n            Fix assert fail is setTimeout with non-function\n            If space at end of input line, enter still executes\n            Removed some hard-coded arrays in favour of JsVar strings\n            Fix confusion with jsvIsName/jsvIsString\n            Handle numpad end key\n            Add code to check stack and stop stack overflow if too much recursion\n            Ensure that setTimeout/setWatch store the link to a function, not the function\n            Fix nasty ref loop in ref loop GC issue\n            Add dotty output\n            Fix memory leak when error in jspParseSingleFunction\n            Now run Garbage collection if we're idle, and we know we have a few ms spare\n            Added setSleepIndicator\n            Fix line/col indicator in errors/warnings\n            Fix JSON parsing and printing when 'undefined' encountered\n            Rewritten object handling code to be way more standard JavaScript compliant\n            Array initialisation with 'new Array()', also for Strings\n            Added a few more built in functions\n            Nice error reporting with line + pointer\n            fixed Math.random\n            Binary style ops on doubles now work - they are just converted to ints\n            Added boolean datatype\n\n     1v11 : Add Math functions\n            Add command history (and dynamic history free if low memory)\n            Fix broken jsvArrayPop\n            Add tests for and fix Array.indexOf\n            In-line editing for commands\n            Fix bug in basicVarEquals for big strings\n            More fixes for low memory conditions\n            Multi-line edit for commands (but no newline or line delete yet)\n            Handle Home, End + reverse delete keys\n            Fix nested for loops not handling interrupts correctly\n            Fix AppendString issue when given start value greater than string\n            Add 'changeInterval' to allow things created with setInterval to have the frequency changed (eg. stepper motor control)\n            Now puts itself to sleep to save power, when it knows nothing is required and it'll be woken up by SysTick before\n            Change Math library to avoid putting constants in RAM\n\n     1v10 : Increase FIFO size for VL\n            Marginally decrease amount of F4 vars to ensure they all fit in one flash sector\n            Allow strings to be longer than the max token size\n            '\"key\" in obj' syntax\n            Detect if in FOR or WHILE loop, and if not, disallow break and continue\n            Change min setInterval time to 0.1ms - F4 can get close to this\n            Better analog pin error message\n            USB support on Olimexino/Maple\n            Start of multiple COM port support (ioEvent queue)\n            Ctrl-C now clears the input line\n            Save state of 'echo' into flash with save()\n            Add 'setBusyIndicator(pin)' to set pin high when Espruino is busy\n            Inbuilt function handling speed improvements\n            Allow Serial comms via other UARTS. Serial1/2.onData and print/println\n            now inserts elements into arrays in the correct order (GetLength can be (is) now much faster)\n            Faster code to work out pins from strings\n            Automatically convert IDs in form A#,A##,B#,B## etc into numbers.\n            Built-in constants for LED1/BTN/etc.\n\n     1v09 : Enabled 'abs' by default\n            Added flash programming to STM32F4\n            analogWrite now working!\n\n     1v08 : Add preliminary STM32F4 support\n            Allowed test cases to test timers - eg. code in jsinteractive.c\n            Fix memory leak for timer\n            Fix memory leak for digitalWrite\n\n     1v07 : Fix string charAt\n            Fix watch on different pin\n            Pass arguments to event handlers - eg. time\n            digitalWrite/Read to take arrays of pins, and int for value\n\n     1v06 : Add break + continue\n            Add switch statement\n            Handle /r, /r/n or just /n for newlines - phone compatible\n            Handle different type of delete\n\n     1v05 : Allow setWatch/setTimeout/setInterval with a string\n            Handle adding Open bracket then deleting it\n            When calling a NAMED function, zero the scopes - this stops scope table overflow\n\n     1v04 : Renamed to Espruino\n            Fixed issue with event add when out of memory\n            If out of memory happens during a timer, kill all timers\n", "/*\n * This file is part of Espruino, a JavaScript interpreter for Microcontrollers\n *\n * Copyright (C) 2013 Gordon Williams <gw@pur3.co.uk>\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * ----------------------------------------------------------------------------\n * This file is designed to be parsed during the build process\n *\n * Contains JavaScript Graphics Draw Functions\n * ----------------------------------------------------------------------------\n */\n#include \"jswrap_graphics.h\"\n#include \"jsutils.h\"\n#include \"jsinteractive.h\"\n\n#include \"lcd_arraybuffer.h\"\n#include \"lcd_js.h\"\n#ifdef USE_LCD_SDL\n#include \"lcd_sdl.h\"\n#endif\n#ifdef USE_LCD_FSMC\n#include \"lcd_fsmc.h\"\n#endif\n\n\n/*JSON{\n  \"type\" : \"class\",\n  \"class\" : \"Graphics\"\n}\nThis class provides Graphics operations that can be applied to a surface.\n\nUse Graphics.createXXX to create a graphics object that renders in the way you want. See [the Graphics page](/Graphics) for more information.\n\n**Note:** On boards that contain an LCD, there is a built-in 'LCD' object of type Graphics. For instance to draw a line you'd type: ```LCD.drawLine(0,0,100,100)```\n*/\n\n/*JSON{\n  \"type\" : \"idle\",\n  \"generate\" : \"jswrap_graphics_idle\"\n}*/\nbool jswrap_graphics_idle() {\n  graphicsIdle();\n  return false;\n}\n\n/*JSON{\n  \"type\" : \"init\",\n  \"generate\" : \"jswrap_graphics_init\"\n}*/\nvoid jswrap_graphics_init() {\n#ifdef USE_LCD_FSMC\n  JsVar *parent = jspNewObject(\"LCD\", \"Graphics\");\n  if (parent) {\n    JsVar *parentObj = jsvSkipName(parent);\n    JsGraphics gfx;\n    graphicsStructInit(&gfx);\n    gfx.data.type = JSGRAPHICSTYPE_FSMC;\n    gfx.graphicsVar = parentObj;\n    gfx.data.width = 320;\n    gfx.data.height = 240;\n    gfx.data.bpp = 16;\n    lcdInit_FSMC(&gfx);\n    lcdSetCallbacks_FSMC(&gfx);\n    graphicsSplash(&gfx);\n    graphicsSetVar(&gfx);\n    jsvUnLock2(parentObj, parent);\n  }\n#endif\n}\n\n\nstatic bool isValidBPP(int bpp) {\n  return bpp==1 || bpp==2 || bpp==4 || bpp==8 || bpp==16 || bpp==24 || bpp==32; // currently one colour can't ever be spread across multiple bytes\n}\n\n/*JSON{\n  \"type\" : \"staticmethod\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"createArrayBuffer\",\n  \"generate\" : \"jswrap_graphics_createArrayBuffer\",\n  \"params\" : [\n    [\"width\",\"int32\",\"Pixels wide\"],\n    [\"height\",\"int32\",\"Pixels high\"],\n    [\"bpp\",\"int32\",\"Number of bits per pixel\"],\n    [\"options\",\"JsVar\",[\n      \"An object of other options. ```{ zigzag : true/false(default), vertical_byte : true/false(default), msb : true/false(default), color_order: 'rgb'(default),'bgr',etc }```\",\n      \"zigzag = whether to alternate the direction of scanlines for rows\",\n      \"vertical_byte = whether to align bits in a byte vertically or not\",\n      \"msb = when bits<8, store pixels msb first\",\n      \"color_order = re-orders the colour values that are supplied via setColor\"\n    ]]\n  ],\n  \"return\" : [\"JsVar\",\"The new Graphics object\"],\n  \"return_object\" : \"Graphics\"\n}\nCreate a Graphics object that renders to an Array Buffer. This will have a field called 'buffer' that can get used to get at the buffer itself\n*/\nJsVar *jswrap_graphics_createArrayBuffer(int width, int height, int bpp, JsVar *options) {\n  if (width<=0 || height<=0 || width>32767 || height>32767) {\n    jsExceptionHere(JSET_ERROR, \"Invalid Size\");\n    return 0;\n  }\n  if (!isValidBPP(bpp)) {\n    jsExceptionHere(JSET_ERROR, \"Invalid BPP\");\n    return 0;\n  }\n\n  JsVar *parent = jspNewObject(0, \"Graphics\");\n  if (!parent) return 0; // low memory\n\n  JsGraphics gfx;\n  graphicsStructInit(&gfx);\n  gfx.data.type = JSGRAPHICSTYPE_ARRAYBUFFER;\n  gfx.data.flags = JSGRAPHICSFLAGS_NONE;\n  gfx.graphicsVar = parent;\n  gfx.data.width = (unsigned short)width;\n  gfx.data.height = (unsigned short)height;\n  gfx.data.bpp = (unsigned char)bpp;\n\n  if (jsvIsObject(options)) {\n    if (jsvGetBoolAndUnLock(jsvObjectGetChild(options, \"zigzag\", 0)))\n      gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_ARRAYBUFFER_ZIGZAG);\n    if (jsvGetBoolAndUnLock(jsvObjectGetChild(options, \"msb\", 0)))\n      gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_ARRAYBUFFER_MSB);\n    if (jsvGetBoolAndUnLock(jsvObjectGetChild(options, \"vertical_byte\", 0))) {\n      if (gfx.data.bpp==1)\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE);\n      else {\n        jsExceptionHere(JSET_ERROR, \"vertical_byte only works for 1bpp ArrayBuffers\\n\");\n        return 0;\n      }\n      if (gfx.data.height&7) {\n        jsExceptionHere(JSET_ERROR, \"height must be a multiple of 8 when using vertical_byte\\n\");\n        return 0;\n      }\n    }\n    JsVar *colorv = jsvObjectGetChild(options, \"color_order\", 0);\n    if (colorv) {\n      if (jsvIsStringEqual(colorv, \"rgb\")) ; // The default\n      else if (!jsvIsStringEqual(colorv, \"brg\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_BRG);\n      else if (!jsvIsStringEqual(colorv, \"bgr\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_BGR);\n      else if (!jsvIsStringEqual(colorv, \"gbr\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_GBR);\n      else if (!jsvIsStringEqual(colorv, \"grb\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_GRB);\n      else if (!jsvIsStringEqual(colorv, \"rbg\"))\n        gfx.data.flags = (JsGraphicsFlags)(gfx.data.flags | JSGRAPHICSFLAGS_COLOR_RBG);\n      else\n        jsWarn(\"color_order must be 3 characters\");\n      jsvUnLock(colorv);\n    }\n  }\n\n  lcdInit_ArrayBuffer(&gfx);\n  graphicsSetVar(&gfx);\n  return parent;\n}\n\n/*JSON{\n  \"type\" : \"staticmethod\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"createCallback\",\n  \"ifndef\" : \"SAVE_ON_FLASH\",\n  \"generate\" : \"jswrap_graphics_createCallback\",\n  \"params\" : [\n    [\"width\",\"int32\",\"Pixels wide\"],\n    [\"height\",\"int32\",\"Pixels high\"],\n    [\"bpp\",\"int32\",\"Number of bits per pixel\"],\n    [\"callback\",\"JsVar\",\"A function of the form ```function(x,y,col)``` that is called whenever a pixel needs to be drawn, or an object with: ```{setPixel:function(x,y,col),fillRect:function(x1,y1,x2,y2,col)}```. All arguments are already bounds checked.\"]\n  ],\n  \"return\" : [\"JsVar\",\"The new Graphics object\"],\n  \"return_object\" : \"Graphics\"\n}\nCreate a Graphics object that renders by calling a JavaScript callback function to draw pixels\n*/\nJsVar *jswrap_graphics_createCallback(int width, int height, int bpp, JsVar *callback) {\n  if (width<=0 || height<=0 || width>32767 || height>32767) {\n    jsExceptionHere(JSET_ERROR, \"Invalid Size\");\n    return 0;\n  }\n  if (!isValidBPP(bpp)) {\n    jsExceptionHere(JSET_ERROR, \"Invalid BPP\");\n    return 0;\n  }\n  JsVar *callbackSetPixel = 0;\n  JsVar *callbackFillRect = 0;\n  if (jsvIsObject(callback)) {\n    jsvUnLock(callbackSetPixel);\n    callbackSetPixel = jsvObjectGetChild(callback, \"setPixel\", 0);\n    callbackFillRect = jsvObjectGetChild(callback, \"fillRect\", 0);\n  } else\n    callbackSetPixel = jsvLockAgain(callback);\n  if (!jsvIsFunction(callbackSetPixel)) {\n    jsExceptionHere(JSET_ERROR, \"Expecting Callback Function or an Object but got %t\", callbackSetPixel);\n    jsvUnLock2(callbackSetPixel, callbackFillRect);\n    return 0;\n  }\n  if (!jsvIsUndefined(callbackFillRect) && !jsvIsFunction(callbackFillRect)) {\n    jsExceptionHere(JSET_ERROR, \"Expecting Callback Function or an Object but got %t\", callbackFillRect);\n    jsvUnLock2(callbackSetPixel, callbackFillRect);\n    return 0;\n  }\n\n  JsVar *parent = jspNewObject(0, \"Graphics\");\n  if (!parent) return 0; // low memory\n\n  JsGraphics gfx;\n  graphicsStructInit(&gfx);\n  gfx.data.type = JSGRAPHICSTYPE_JS;\n  gfx.graphicsVar = parent;\n  gfx.data.width = (unsigned short)width;\n  gfx.data.height = (unsigned short)height;\n  gfx.data.bpp = (unsigned char)bpp;\n  lcdInit_JS(&gfx, callbackSetPixel, callbackFillRect);\n  graphicsSetVar(&gfx);\n  jsvUnLock2(callbackSetPixel, callbackFillRect);\n  return parent;\n}\n\n#ifdef USE_LCD_SDL\n/*JSON{\n  \"type\" : \"staticmethod\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"createSDL\",\n  \"ifdef\" : \"USE_LCD_SDL\",\n  \"generate\" : \"jswrap_graphics_createSDL\",\n  \"params\" : [\n    [\"width\",\"int32\",\"Pixels wide\"],\n    [\"height\",\"int32\",\"Pixels high\"]\n  ],\n  \"return\" : [\"JsVar\",\"The new Graphics object\"],\n  \"return_object\" : \"Graphics\"\n}\nCreate a Graphics object that renders to SDL window (Linux-based devices only)\n*/\nJsVar *jswrap_graphics_createSDL(int width, int height) {\n  if (width<=0 || height<=0 || width>32767 || height>32767) {\n    jsExceptionHere(JSET_ERROR, \"Invalid Size\");\n    return 0;\n  }\n\n  JsVar *parent = jspNewObject(0, \"Graphics\");\n  if (!parent) return 0; // low memory\n  JsGraphics gfx;\n  graphicsStructInit(&gfx);\n  gfx.data.type = JSGRAPHICSTYPE_SDL;\n  gfx.graphicsVar = parent;\n  gfx.data.width = (unsigned short)width;\n  gfx.data.height = (unsigned short)height;\n  gfx.data.bpp = 32;\n  lcdInit_SDL(&gfx);\n  graphicsSetVar(&gfx);\n  return parent;\n}\n#endif\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getWidth\",\n  \"generate_full\" : \"jswrap_graphics_getWidthOrHeight(parent, false)\",\n  \"return\" : [\"int\",\"The width of the LCD\"]\n}\nThe width of the LCD\n*/\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getHeight\",\n  \"generate_full\" : \"jswrap_graphics_getWidthOrHeight(parent, true)\",\n  \"return\" : [\"int\",\"The height of the LCD\"]\n}\nThe height of the LCD\n*/\nint jswrap_graphics_getWidthOrHeight(JsVar *parent, bool height) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n  if (gfx.data.flags & JSGRAPHICSFLAGS_SWAP_XY)\n    height=!height;\n  return height ? gfx.data.height : gfx.data.width;\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"clear\",\n  \"generate\" : \"jswrap_graphics_clear\"\n}\nClear the LCD with the Background Color\n*/\nvoid jswrap_graphics_clear(JsVar *parent) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsClear(&gfx);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"fillRect\",\n  \"generate\" : \"jswrap_graphics_fillRect\",\n  \"params\" : [\n    [\"x1\",\"int32\",\"The left\"],\n    [\"y1\",\"int32\",\"The top\"],\n    [\"x2\",\"int32\",\"The right\"],\n    [\"y2\",\"int32\",\"The bottom\"]\n  ]\n}\nFill a rectangular area in the Foreground Color\n*/\nvoid jswrap_graphics_fillRect(JsVar *parent, int x1, int y1, int x2, int y2) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsFillRect(&gfx, (short)x1,(short)y1,(short)x2,(short)y2);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawRect\",\n  \"generate\" : \"jswrap_graphics_drawRect\",\n  \"params\" : [\n    [\"x1\",\"int32\",\"The left\"],\n    [\"y1\",\"int32\",\"The top\"],\n    [\"x2\",\"int32\",\"The right\"],\n    [\"y2\",\"int32\",\"The bottom\"]\n  ]\n}\nDraw an unfilled rectangle 1px wide in the Foreground Color\n*/\nvoid jswrap_graphics_drawRect(JsVar *parent, int x1, int y1, int x2, int y2) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsDrawRect(&gfx, (short)x1,(short)y1,(short)x2,(short)y2);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"fillCircle\",\n  \"generate\" : \"jswrap_graphics_fillCircle\",\n  \"params\" : [\n    [\"x\",\"int32\",\"The X axis\"],\n    [\"y\",\"int32\",\"The Y axis\"],\n    [\"rad\",\"int32\",\"The circle radius\"]\n  ]\n}\nDraw a filled circle in the Foreground Color\n*/\n void jswrap_graphics_fillCircle(JsVar *parent, int x, int y, int rad) {\n   JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n   graphicsFillCircle(&gfx, (short)x,(short)y,(short)rad);\n   graphicsSetVar(&gfx); // gfx data changed because modified area\n }\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawCircle\",\n  \"generate\" : \"jswrap_graphics_drawCircle\",\n  \"params\" : [\n    [\"x\",\"int32\",\"The X axis\"],\n    [\"y\",\"int32\",\"The Y axis\"],\n    [\"rad\",\"int32\",\"The circle radius\"]\n  ]\n}\nDraw an unfilled circle 1px wide in the Foreground Color\n*/\nvoid jswrap_graphics_drawCircle(JsVar *parent, int x, int y, int rad) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsDrawCircle(&gfx, (short)x,(short)y,(short)rad);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getPixel\",\n  \"generate\" : \"jswrap_graphics_getPixel\",\n  \"params\" : [\n    [\"x\",\"int32\",\"The left\"],\n    [\"y\",\"int32\",\"The top\"]\n  ],\n  \"return\" : [\"int32\",\"The color\"]\n}\nGet a pixel's color\n*/\nint jswrap_graphics_getPixel(JsVar *parent, int x, int y) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n  return (int)graphicsGetPixel(&gfx, (short)x, (short)y);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setPixel\",\n  \"generate\" : \"jswrap_graphics_setPixel\",\n  \"params\" : [\n    [\"x\",\"int32\",\"The left\"],\n    [\"y\",\"int32\",\"The top\"],\n    [\"col\",\"JsVar\",\"The color\"]\n  ]\n}\nSet a pixel's color\n*/\nvoid jswrap_graphics_setPixel(JsVar *parent, int x, int y, JsVar *color) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  unsigned int col = gfx.data.fgColor;\n  if (!jsvIsUndefined(color))\n    col = (unsigned int)jsvGetInteger(color);\n  graphicsSetPixel(&gfx, (short)x, (short)y, col);\n  gfx.data.cursorX = (short)x;\n  gfx.data.cursorY = (short)y;\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setColor\",\n  \"generate_full\" : \"jswrap_graphics_setColorX(parent, r,g,b, true)\",\n  \"params\" : [\n    [\"r\",\"JsVar\",\"Red (between 0 and 1) OR an integer representing the color in the current bit depth and color order\"],\n    [\"g\",\"JsVar\",\"Green (between 0 and 1)\"],\n    [\"b\",\"JsVar\",\"Blue (between 0 and 1)\"]\n  ]\n}\nSet the color to use for subsequent drawing operations\n*/\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setBgColor\",\n  \"generate_full\" : \"jswrap_graphics_setColorX(parent, r,g,b, false)\",\n  \"params\" : [\n    [\"r\",\"JsVar\",\"Red (between 0 and 1) OR an integer representing the color in the current bit depth and color order\"],\n    [\"g\",\"JsVar\",\"Green (between 0 and 1)\"],\n    [\"b\",\"JsVar\",\"Blue (between 0 and 1)\"]\n  ]\n}\nSet the background color to use for subsequent drawing operations\n*/\nvoid jswrap_graphics_setColorX(JsVar *parent, JsVar *r, JsVar *g, JsVar *b, bool isForeground) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  unsigned int color = 0;\n  JsVarFloat rf, gf, bf;\n  rf = jsvGetFloat(r);\n  gf = jsvGetFloat(g);\n  bf = jsvGetFloat(b);\n  if (!jsvIsUndefined(g) && !jsvIsUndefined(b)) {\n    int ri = (int)(rf*256);\n    int gi = (int)(gf*256);\n    int bi = (int)(bf*256);\n    if (ri>255) ri=255;\n    if (gi>255) gi=255;\n    if (bi>255) bi=255;\n    if (ri<0) ri=0;\n    if (gi<0) gi=0;\n    if (bi<0) bi=0;\n    // Check if we need to twiddle colors\n    int colorMask = gfx.data.flags & JSGRAPHICSFLAGS_COLOR_MASK;\n    if (colorMask) {\n      int tmpr, tmpg, tmpb;\n      tmpr = ri;\n      tmpg = gi;\n      tmpb = bi;\n      switch (colorMask) {\n        case JSGRAPHICSFLAGS_COLOR_BRG:\n          ri = tmpb;\n          gi = tmpr;\n          bi = tmpg;\n          break;\n        case JSGRAPHICSFLAGS_COLOR_BGR:\n          ri = tmpb;\n          bi = tmpr;\n          break;\n        case JSGRAPHICSFLAGS_COLOR_GBR:\n          ri = tmpg;\n          gi = tmpb;\n          bi = tmpr;\n          break;\n        case JSGRAPHICSFLAGS_COLOR_GRB:\n          ri = tmpg;\n          gi = tmpr;\n          break;\n        case JSGRAPHICSFLAGS_COLOR_RBG:\n          gi = tmpb;\n          bi = tmpg;\n          break;\n        default: break;\n      }\n    }\n    if (gfx.data.bpp==16) {\n      color = (unsigned int)((bi>>3) | (gi>>2)<<5 | (ri>>3)<<11);\n    } else if (gfx.data.bpp==32) {\n      color = 0xFF000000 | (unsigned int)(bi | (gi<<8) | (ri<<16));\n    } else if (gfx.data.bpp==24) {\n      color = (unsigned int)(bi | (gi<<8) | (ri<<16));\n    } else\n      color = (unsigned int)(((ri+gi+bi)>=384) ? 0xFFFFFFFF : 0);\n  } else {\n    // just rgb\n    color = (unsigned int)jsvGetInteger(r);\n  }\n  if (isForeground)\n    gfx.data.fgColor = color;\n  else\n    gfx.data.bgColor = color;\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getColor\",\n  \"generate_full\" : \"jswrap_graphics_getColorX(parent, true)\",\n  \"return\" : [\"int\",\"The integer value of the colour\"]\n}\nGet the color to use for subsequent drawing operations\n*/\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getBgColor\",\n  \"generate_full\" : \"jswrap_graphics_getColorX(parent, false)\",\n  \"return\" : [\"int\",\"The integer value of the colour\"]\n}\nGet the background color to use for subsequent drawing operations\n*/\nJsVarInt jswrap_graphics_getColorX(JsVar *parent, bool isForeground) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n  return (JsVarInt)((isForeground ? gfx.data.fgColor : gfx.data.bgColor) & ((1UL<<gfx.data.bpp)-1));\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setFontBitmap\",\n  \"generate_full\" : \"jswrap_graphics_setFontSizeX(parent, JSGRAPHICS_FONTSIZE_4X6, false)\"\n}\nMake subsequent calls to `drawString` use the built-in 4x6 pixel bitmapped Font\n*/\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setFontVector\",\n  \"ifndef\" : \"SAVE_ON_FLASH\",\n  \"generate_full\" : \"jswrap_graphics_setFontSizeX(parent, size, true)\",\n  \"params\" : [\n    [\"size\",\"int32\",\"The height of the font, as an integer\"]\n  ]\n}\nMake subsequent calls to `drawString` use a Vector Font of the given height\n*/\nvoid jswrap_graphics_setFontSizeX(JsVar *parent, int size, bool checkValid) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n\n  if (checkValid) {\n    if (size<1) size=1;\n    if (size>1023) size=1023;\n  }\n  if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n    jsvObjectRemoveChild(parent, JSGRAPHICS_CUSTOMFONT_BMP);\n    jsvObjectRemoveChild(parent, JSGRAPHICS_CUSTOMFONT_WIDTH);\n    jsvObjectRemoveChild(parent, JSGRAPHICS_CUSTOMFONT_HEIGHT);\n    jsvObjectRemoveChild(parent, JSGRAPHICS_CUSTOMFONT_FIRSTCHAR);\n  }\n  gfx.data.fontSize = (short)size;\n  graphicsSetVar(&gfx);\n}\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setFontCustom\",\n  \"generate\" : \"jswrap_graphics_setFontCustom\",\n  \"params\" : [\n    [\"bitmap\",\"JsVar\",\"A column-first, MSB-first, 1bpp bitmap containing the font bitmap\"],\n    [\"firstChar\",\"int32\",\"The first character in the font - usually 32 (space)\"],\n    [\"width\",\"JsVar\",\"The width of each character in the font. Either an integer, or a string where each character represents the width\"],\n    [\"height\",\"int32\",\"The height as an integer\"]\n  ]\n}\nMake subsequent calls to `drawString` use a Custom Font of the given height. See the [Fonts page](http://www.espruino.com/Fonts) for more\ninformation about custom fonts and how to create them.\n*/\nvoid jswrap_graphics_setFontCustom(JsVar *parent, JsVar *bitmap, int firstChar, JsVar *width, int height) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n\n  if (!jsvIsString(bitmap)) {\n    jsExceptionHere(JSET_ERROR, \"Font bitmap must be a String\");\n    return;\n  }\n  if (firstChar<0 || firstChar>255) {\n    jsExceptionHere(JSET_ERROR, \"First character out of range\");\n    return;\n  }\n  if (!jsvIsString(width) && !jsvIsInt(width)) {\n    jsExceptionHere(JSET_ERROR, \"Font width must be a String or an integer\");\n    return;\n  }\n  if (height<=0 || height>255) {\n   jsExceptionHere(JSET_ERROR, \"Invalid height\");\n   return;\n }\n  jsvObjectSetChild(parent, JSGRAPHICS_CUSTOMFONT_BMP, bitmap);\n  jsvObjectSetChild(parent, JSGRAPHICS_CUSTOMFONT_WIDTH, width);\n  jsvObjectSetChildAndUnLock(parent, JSGRAPHICS_CUSTOMFONT_HEIGHT, jsvNewFromInteger(height));\n  jsvObjectSetChildAndUnLock(parent, JSGRAPHICS_CUSTOMFONT_FIRSTCHAR, jsvNewFromInteger(firstChar));\n  gfx.data.fontSize = JSGRAPHICS_FONTSIZE_CUSTOM;\n  graphicsSetVar(&gfx);\n}\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setFontAlign\",\n  \"generate\" : \"jswrap_graphics_setFontAlign\",\n  \"params\" : [\n    [\"x\",\"int32\",\"X alignment. -1=left (default), 0=center, 1=right\"],\n    [\"y\",\"int32\",\"Y alignment. -1=top (default), 0=center, 1=bottom\"],\n    [\"rotation\",\"int32\",\"Rotation of the text. 0=normal, 1=90 degrees clockwise, 2=180, 3=270\"]\n  ]\n}\nSet the alignment for subsequent calls to `drawString`\n*/\nvoid jswrap_graphics_setFontAlign(JsVar *parent, int x, int y, int r) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  if (x<-1) x=-1;\n  if (x>1) x=1;\n  if (y<-1) y=-1;\n  if (y>1) y=1;\n  if (r<0) r=0;\n  if (r>3) r=3;\n  gfx.data.fontAlignX = x;\n  gfx.data.fontAlignY = y;\n  gfx.data.fontRotate = r;\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawString\",\n  \"generate\" : \"jswrap_graphics_drawString\",\n  \"params\" : [\n    [\"str\",\"JsVar\",\"The string\"],\n    [\"x\",\"int32\",\"The X position of the leftmost pixel\"],\n    [\"y\",\"int32\",\"The Y position of the topmost pixel\"]\n  ]\n}\nDraw a string of text in the current font\n*/\nvoid jswrap_graphics_drawString(JsVar *parent, JsVar *var, int x, int y) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n\n  JsVar *customBitmap = 0, *customWidth = 0;\n  int customHeight = 0, customFirstChar = 0;\n  if (gfx.data.fontSize>0) {\n    customHeight = gfx.data.fontSize;\n  } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_4X6) {\n    customHeight = 6;\n  } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n    customBitmap = jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_BMP, 0);\n    customWidth = jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_WIDTH, 0);\n    customHeight = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_HEIGHT, 0));\n    customFirstChar = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_FIRSTCHAR, 0));\n  }\n\n  // Handle text rotation\n  JsGraphicsFlags oldFlags = gfx.data.flags;\n  if (gfx.data.fontRotate==1) {\n    gfx.data.flags ^= JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_X;\n    int t = gfx.data.width - (x+1);\n    x = y;\n    y = t;\n  } else if (gfx.data.fontRotate==2) {\n    gfx.data.flags ^= JSGRAPHICSFLAGS_INVERT_X | JSGRAPHICSFLAGS_INVERT_Y;\n    x = gfx.data.width - (x+1);\n    y = gfx.data.height - (y+1);\n  } else if (gfx.data.fontRotate==3) {\n    gfx.data.flags ^= JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_Y;\n    int t = gfx.data.height - (y+1);\n    y = x;\n    x = t;\n  }\n  // Handle font alignment\n  if (gfx.data.fontAlignX>=0)\n    x -= jswrap_graphics_stringWidth(parent, var) * (gfx.data.fontAlignX+1)/2;\n  if (gfx.data.fontAlignY>=0)\n    y -= customHeight * (gfx.data.fontAlignX+1)/2;\n\n  int maxX = (gfx.data.flags & JSGRAPHICSFLAGS_SWAP_XY) ? gfx.data.height : gfx.data.width;\n  int maxY = (gfx.data.flags & JSGRAPHICSFLAGS_SWAP_XY) ? gfx.data.width : gfx.data.height;\n  int startx = x;\n  JsVar *str = jsvAsString(var, false);\n  JsvStringIterator it;\n  jsvStringIteratorNew(&it, str, 0);\n  while (jsvStringIteratorHasChar(&it)) {\n    char ch = jsvStringIteratorGetChar(&it);\n    if (ch=='\\n') {\n      x = startx;\n      y += customHeight;\n      jsvStringIteratorNext(&it);\n      continue;\n    }\n    if (gfx.data.fontSize>0) {\n#ifndef SAVE_ON_FLASH\n      int w = (int)graphicsVectorCharWidth(&gfx, gfx.data.fontSize, ch);\n      if (x>-w && x<maxX  && y>-gfx.data.fontSize && y<maxY)\n        graphicsFillVectorChar(&gfx, (short)x, (short)y, gfx.data.fontSize, ch);\n      x+=w;\n#endif\n    } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_4X6) {\n      if (x>-4 && x<maxX && y>-6 && y<maxY)\n        graphicsDrawChar4x6(&gfx, (short)x, (short)y, ch);\n      x+=4;\n    } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n      // get char width and offset in string\n      int width = 0, bmpOffset = 0;\n      if (jsvIsString(customWidth)) {\n        if (ch>=customFirstChar) {\n          JsvStringIterator wit;\n          jsvStringIteratorNew(&wit, customWidth, 0);\n          while (jsvStringIteratorHasChar(&wit) && (int)jsvStringIteratorGetIndex(&wit)<(ch-customFirstChar)) {\n            bmpOffset += (unsigned char)jsvStringIteratorGetChar(&wit);\n            jsvStringIteratorNext(&wit);\n          }\n          width = (unsigned char)jsvStringIteratorGetChar(&wit);\n          jsvStringIteratorFree(&wit);\n        }\n      } else {\n        width = (int)jsvGetInteger(customWidth);\n        bmpOffset = width*(ch-customFirstChar);\n      }\n      if (ch>=customFirstChar && (x>-width) && (x<maxX) && (y>-customHeight) && y<maxY) {\n        bmpOffset *= customHeight;\n        // now render character\n        JsvStringIterator cit;\n        jsvStringIteratorNew(&cit, customBitmap, (size_t)bmpOffset>>3);\n        bmpOffset &= 7;\n        int cx,cy;\n        for (cx=0;cx<width;cx++) {\n          for (cy=0;cy<customHeight;cy++) {\n            if ((jsvStringIteratorGetChar(&cit)<<bmpOffset)&128)\n              graphicsSetPixel(&gfx, (short)(cx+x), (short)(cy+y), gfx.data.fgColor);\n            bmpOffset++;\n            if (bmpOffset==8) {\n              bmpOffset=0;\n              jsvStringIteratorNext(&cit);\n            }\n          }\n        }\n        jsvStringIteratorFree(&cit);\n      }\n      x += width;\n    }\n    if (jspIsInterrupted()) break;\n    jsvStringIteratorNext(&it);\n  }\n  jsvStringIteratorFree(&it);\n  jsvUnLock3(str, customBitmap, customWidth);\n  gfx.data.flags = oldFlags; // restore flags because of text rotation\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"stringWidth\",\n  \"generate\" : \"jswrap_graphics_stringWidth\",\n  \"params\" : [\n    [\"str\",\"JsVar\",\"The string\"]\n  ],\n  \"return\" : [\"int\",\"The length of the string in pixels\"]\n}\nReturn the size in pixels of a string of text in the current font\n*/\nJsVarInt jswrap_graphics_stringWidth(JsVar *parent, JsVar *var) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n\n  JsVar *customWidth = 0;\n  int customFirstChar = 0;\n  if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n    customWidth = jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_WIDTH, 0);\n    customFirstChar = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(parent, JSGRAPHICS_CUSTOMFONT_FIRSTCHAR, 0));\n  }\n\n  JsVar *str = jsvAsString(var, false);\n  JsvStringIterator it;\n  jsvStringIteratorNew(&it, str, 0);\n  int width = 0;\n  while (jsvStringIteratorHasChar(&it)) {\n    char ch = jsvStringIteratorGetChar(&it);\n    if (gfx.data.fontSize>0) {\n#ifndef SAVE_ON_FLASH\n      width += (int)graphicsVectorCharWidth(&gfx, gfx.data.fontSize, ch);\n#endif\n    } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_4X6) {\n      width += 4;\n    } else if (gfx.data.fontSize == JSGRAPHICS_FONTSIZE_CUSTOM) {\n      if (jsvIsString(customWidth)) {\n        if (ch>=customFirstChar)\n          width += (unsigned char)jsvGetCharInString(customWidth, (size_t)(ch-customFirstChar));\n      } else\n        width += (int)jsvGetInteger(customWidth);\n    }\n    jsvStringIteratorNext(&it);\n  }\n  jsvStringIteratorFree(&it);\n  jsvUnLock2(str, customWidth);\n  return width;\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawLine\",\n  \"generate\" : \"jswrap_graphics_drawLine\",\n  \"params\" : [\n    [\"x1\",\"int32\",\"The left\"],\n    [\"y1\",\"int32\",\"The top\"],\n    [\"x2\",\"int32\",\"The right\"],\n    [\"y2\",\"int32\",\"The bottom\"]\n  ]\n}\nDraw a line between x1,y1 and x2,y2 in the current foreground color\n*/\nvoid jswrap_graphics_drawLine(JsVar *parent, int x1, int y1, int x2, int y2) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsDrawLine(&gfx, (short)x1,(short)y1,(short)x2,(short)y2);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"lineTo\",\n  \"generate\" : \"jswrap_graphics_lineTo\",\n  \"params\" : [\n    [\"x\",\"int32\",\"X value\"],\n    [\"y\",\"int32\",\"Y value\"]\n  ]\n}\nDraw a line from the last position of lineTo or moveTo to this position\n*/\nvoid jswrap_graphics_lineTo(JsVar *parent, int x, int y) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsDrawLine(&gfx, gfx.data.cursorX, gfx.data.cursorY, (short)x, (short)y);\n  gfx.data.cursorX = (short)x;\n  gfx.data.cursorY = (short)y;\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"moveTo\",\n  \"generate\" : \"jswrap_graphics_moveTo\",\n  \"params\" : [\n    [\"x\",\"int32\",\"X value\"],\n    [\"y\",\"int32\",\"Y value\"]\n  ]\n}\nMove the cursor to a position - see lineTo\n*/\nvoid jswrap_graphics_moveTo(JsVar *parent, int x, int y) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  gfx.data.cursorX = (short)x;\n  gfx.data.cursorY = (short)y;\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"fillPoly\",\n  \"generate\" : \"jswrap_graphics_fillPoly\",\n  \"params\" : [\n    [\"poly\",\"JsVar\",\"An array of vertices, of the form ```[x1,y1,x2,y2,x3,y3,etc]```\"]\n  ]\n}\nDraw a filled polygon in the current foreground color\n*/\nvoid jswrap_graphics_fillPoly(JsVar *parent, JsVar *poly) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  if (!jsvIsIterable(poly)) return;\n  const int maxVerts = 128;\n  short verts[maxVerts];\n  int idx = 0;\n  JsvIterator it;\n  jsvIteratorNew(&it, poly, JSIF_EVERY_ARRAY_ELEMENT);\n  while (jsvIteratorHasElement(&it) && idx<maxVerts) {\n    verts[idx++] = (short)jsvIteratorGetIntegerValue(&it);\n    jsvIteratorNext(&it);\n  }\n  jsvIteratorFree(&it);\n  if (idx==maxVerts) {\n    jsWarn(\"Maximum number of points (%d) exceeded for fillPoly\", maxVerts/2);\n  }\n  graphicsFillPoly(&gfx, idx/2, verts);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"setRotation\",\n  \"generate\" : \"jswrap_graphics_setRotation\",\n  \"params\" : [\n    [\"rotation\",\"int32\",\"The clockwise rotation. 0 for no rotation, 1 for 90 degrees, 2 for 180, 3 for 270\"],\n    [\"reflect\",\"bool\",\"Whether to reflect the image\"]\n  ]\n}\nSet the current rotation of the graphics device.\n*/\nvoid jswrap_graphics_setRotation(JsVar *parent, int rotation, bool reflect) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n\n  // clear flags\n  gfx.data.flags &= (JsGraphicsFlags)~(JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_X | JSGRAPHICSFLAGS_INVERT_Y);\n  // set flags\n  switch (rotation) {\n    case 0:\n      break;\n    case 1:\n      gfx.data.flags |= JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_X;\n      break;\n    case 2:\n      gfx.data.flags |= JSGRAPHICSFLAGS_INVERT_X | JSGRAPHICSFLAGS_INVERT_Y;\n      break;\n    case 3:\n      gfx.data.flags |= JSGRAPHICSFLAGS_SWAP_XY | JSGRAPHICSFLAGS_INVERT_Y;\n      break;\n  }\n\n  if (reflect) {\n    if (gfx.data.flags & JSGRAPHICSFLAGS_SWAP_XY)\n      gfx.data.flags ^= JSGRAPHICSFLAGS_INVERT_Y;\n    else\n      gfx.data.flags ^= JSGRAPHICSFLAGS_INVERT_X;\n  }\n\n  graphicsSetVar(&gfx);\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"drawImage\",\n  \"generate\" : \"jswrap_graphics_drawImage\",\n  \"params\" : [\n    [\"image\",\"JsVar\",\"An object with the following fields `{ width : int, height : int, bpp : int, buffer : ArrayBuffer, transparent: optional int }`. bpp = bits per pixel, transparent (if defined) is the colour that will be treated as transparent\"],\n    [\"x\",\"int32\",\"The X offset to draw the image\"],\n    [\"y\",\"int32\",\"The Y offset to draw the image\"]\n  ]\n}\nDraw an image at the specified position. If the image is 1 bit, the graphics foreground/background colours will be used. Otherwise color data will be copied as-is. Bitmaps are rendered MSB-first\n*/\nvoid jswrap_graphics_drawImage(JsVar *parent, JsVar *image, int xPos, int yPos) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  if (!jsvIsObject(image)) {\n    jsExceptionHere(JSET_ERROR, \"Expecting first argument to be an object\");\n    return;\n  }\n  int imageWidth = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(image, \"width\", 0));\n  int imageHeight = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(image, \"height\", 0));\n  int imageBpp = (int)jsvGetIntegerAndUnLock(jsvObjectGetChild(image, \"bpp\", 0));\n  unsigned int imageBitMask = (unsigned int)((1L<<imageBpp)-1L);\n  JsVar *transpVar = jsvObjectGetChild(image, \"transparent\", 0);\n  bool imageIsTransparent = transpVar!=0;\n  unsigned int imageTransparentCol = (unsigned int)jsvGetInteger(transpVar);\n  jsvUnLock(transpVar);\n  JsVar *imageBuffer = jsvObjectGetChild(image, \"buffer\", 0);\n  if (!(jsvIsArrayBuffer(imageBuffer) && imageWidth>0 && imageHeight>0 && imageBpp>0 && imageBpp<=32)) {\n    jsExceptionHere(JSET_ERROR, \"Expecting first argument to a valid Image\");\n    jsvUnLock(imageBuffer);\n    return;\n  }\n  JsVar *imageBufferString = jsvGetArrayBufferBackingString(imageBuffer);\n  jsvUnLock(imageBuffer);\n\n\n  int x=0, y=0;\n  int bits=0;\n  unsigned int colData = 0;\n  JsvStringIterator it;\n  jsvStringIteratorNew(&it, imageBufferString, 0);\n  while ((bits>=imageBpp || jsvStringIteratorHasChar(&it)) && y<imageHeight) {\n    // Get the data we need...\n    while (bits < imageBpp) {\n      colData = (colData<<8) | ((unsigned char)jsvStringIteratorGetChar(&it));\n      jsvStringIteratorNext(&it);\n      bits += 8;\n    }\n    // extract just the bits we want\n    unsigned int col = (colData>>(bits-imageBpp))&imageBitMask;\n    bits -= imageBpp;\n    // Try and write pixel!\n    if (!imageIsTransparent || imageTransparentCol!=col) {\n      if (imageBpp==1)\n        col = col ? gfx.data.fgColor : gfx.data.bgColor;\n      graphicsSetPixel(&gfx, (short)(x+xPos), (short)(y+yPos), col);\n    }\n    // Go to next pixel\n    x++;\n    if (x>=imageWidth) {\n      x=0;\n      y++;\n      // we don't care about image height - we'll stop next time...\n    }\n\n  }\n  jsvStringIteratorFree(&it);\n  jsvUnLock(imageBufferString);\n  graphicsSetVar(&gfx); // gfx data changed because modified area\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"getModified\",\n  \"generate\" : \"jswrap_graphics_getModified\",\n  \"params\" : [\n    [\"reset\",\"bool\",\"Whether to reset the modified area or not\"]\n  ],\n  \"return\" : [\"JsVar\",\"An object {x1,y1,x2,y2} containing the modified area, or undefined if not modified\"]\n}\nReturn the area of the Graphics canvas that has been modified, and optionally clear\nthe modified area to 0.\n\nFor instance if `g.setPixel(10,20)` was called, this would return `{x1:10, y1:20, x2:10, y2:20}`\n*/\nJsVar *jswrap_graphics_getModified(JsVar *parent, bool reset) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return 0;\n  JsVar *obj = 0;\n  if (gfx.data.modMinX <= gfx.data.modMaxX) { // do we have a rect?\n    obj = jsvNewObject();\n    if (obj) {\n      jsvObjectSetChildAndUnLock(obj, \"x1\", jsvNewFromInteger(gfx.data.modMinX));\n      jsvObjectSetChildAndUnLock(obj, \"y1\", jsvNewFromInteger(gfx.data.modMinY));\n      jsvObjectSetChildAndUnLock(obj, \"x2\", jsvNewFromInteger(gfx.data.modMaxX));\n      jsvObjectSetChildAndUnLock(obj, \"y2\", jsvNewFromInteger(gfx.data.modMaxY));\n    }\n  }\n  if (reset) {\n    gfx.data.modMaxX = -32768;\n    gfx.data.modMaxY = -32768;\n    gfx.data.modMinX = 32767;\n    gfx.data.modMinY = 32767;\n    graphicsSetVar(&gfx);\n  }\n  return obj;\n}\n\n/*JSON{\n  \"type\" : \"method\",\n  \"class\" : \"Graphics\",\n  \"name\" : \"scroll\",\n  \"generate\" : \"jswrap_graphics_scroll\",\n  \"params\" : [\n    [\"x\",\"int32\",\"X direction. >0 = to right\"],\n    [\"y\",\"int32\",\"Y direction. >0 = down\"]\n  ]\n}\nScroll the contents of this graphics in a certain direction. The remaining area\nis filled with the background color.\n\nNote: This uses repeated pixel reads and writes, so will not work on platforms that\ndon't support pixel reads.\n*/\nvoid jswrap_graphics_scroll(JsVar *parent, int xdir, int ydir) {\n  JsGraphics gfx; if (!graphicsGetFromVar(&gfx, parent)) return;\n  graphicsScroll(&gfx, xdir, ydir);\n  // update modified area\n  graphicsSetVar(&gfx);\n}\n", "/*\n * This file is part of Espruino, a JavaScript interpreter for Microcontrollers\n *\n * Copyright (C) 2013 Gordon Williams <gw@pur3.co.uk>\n *\n * This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n *\n * ----------------------------------------------------------------------------\n * Graphics Backend for drawing to ArrayBuffer\n * ----------------------------------------------------------------------------\n */\n#include \"jswrap_arraybuffer.h\"\n#include \"lcd_arraybuffer.h\"\n#include \"jsvar.h\"\n#include \"jsvariterator.h\"\n\n// returns the BIT index, so the bottom 3 bits specify the bit in the byte\nunsigned int lcdGetPixelIndex_ArrayBuffer(JsGraphics *gfx, int x, int y, int pixelCount) {\n  if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_ZIGZAG) {\n    if (y&1) x = gfx->data.width - (x+pixelCount);\n  }\n  if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE)\n    return (unsigned int)(((x + (y>>3)*gfx->data.width)<<3) | (y&7));\n  else\n    return (unsigned int)((x + y*gfx->data.width)*gfx->data.bpp);\n}\n\nunsigned int lcdGetPixel_ArrayBuffer(JsGraphics *gfx, short x, short y) {\n  unsigned int col = 0;\n  JsVar *buf = (JsVar*)gfx->backendData;\n  unsigned int idx = lcdGetPixelIndex_ArrayBuffer(gfx,x,y,1);\n  JsvArrayBufferIterator it;\n  jsvArrayBufferIteratorNew(&it, buf, idx>>3 );\n  if (gfx->data.bpp&7/*not a multiple of one byte*/) {\n    idx = idx & 7;\n    unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;\n    unsigned int existing = (unsigned int)jsvArrayBufferIteratorGetIntegerValue(&it);\n    unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;\n    col = ((existing>>bitIdx)&mask);\n  } else {\n    int i;\n    for (i=0;i<gfx->data.bpp;i+=8) {\n      col |= ((unsigned int)jsvArrayBufferIteratorGetIntegerValue(&it)) << i;\n      jsvArrayBufferIteratorNext(&it);\n    }\n  }\n  jsvArrayBufferIteratorFree(&it);\n  return col;\n}\n\n// set pixelCount pixels starting at x,y\nvoid lcdSetPixels_ArrayBuffer(JsGraphics *gfx, short x, short y, short pixelCount, unsigned int col) {\n  JsVar *buf = (JsVar*)gfx->backendData;\n  unsigned int idx = lcdGetPixelIndex_ArrayBuffer(gfx,x,y,pixelCount);\n  JsvArrayBufferIterator it;\n  jsvArrayBufferIteratorNew(&it, buf, idx>>3 );\n\n  unsigned int whiteMask = (1U<<gfx->data.bpp)-1;\n  bool shortCut = (col==0 || (col&whiteMask)==whiteMask) && (!(gfx->data.flags&JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE)); // simple black or white fill\n\n  while (pixelCount--) { // writing individual bits\n    if (gfx->data.bpp&7/*not a multiple of one byte*/) {\n      idx = idx & 7;\n      if (shortCut && idx==0) {\n        // Basically, if we're aligned and we're filling all 0 or all 1\n        // then we can go really quickly and can just fill\n        int wholeBytes = (gfx->data.bpp*(pixelCount+1)) >> 3;\n        if (wholeBytes) {\n          char c = (char)(col?0xFF:0);\n          pixelCount = (short)(pixelCount+1 - (wholeBytes*8/gfx->data.bpp));\n          while (wholeBytes--) {\n            jsvArrayBufferIteratorSetByteValue(&it,  c);\n            jsvArrayBufferIteratorNext(&it);\n          }\n          continue;\n        }\n      }\n      unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;\n      unsigned int existing = (unsigned int)jsvArrayBufferIteratorGetIntegerValue(&it);\n      unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;\n      jsvArrayBufferIteratorSetByteValue(&it, (char)((existing&~(mask<<bitIdx)) | ((col&mask)<<bitIdx)));\n      if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE) {\n        jsvArrayBufferIteratorNext(&it);\n      } else {\n        idx += gfx->data.bpp;\n        if (idx>=8) jsvArrayBufferIteratorNext(&it);\n      }\n    } else { // we're writing whole bytes\n      int i;\n      for (i=0;i<gfx->data.bpp;i+=8) {\n        jsvArrayBufferIteratorSetByteValue(&it, (char)(col >> i));\n        jsvArrayBufferIteratorNext(&it);\n      }\n    }\n  }\n  jsvArrayBufferIteratorFree(&it);\n}\n\nvoid lcdSetPixel_ArrayBuffer(JsGraphics *gfx, short x, short y, unsigned int col) {\n  lcdSetPixels_ArrayBuffer(gfx, x, y, 1, col);\n}\n\nvoid  lcdFillRect_ArrayBuffer(struct JsGraphics *gfx, short x1, short y1, short x2, short y2) {\n  short y;\n  for (y=y1;y<=y2;y++)\n    lcdSetPixels_ArrayBuffer(gfx, x1, y, (short)(1+x2-x1), gfx->data.fgColor);\n}\n\n#ifndef SAVE_ON_FLASH\n// Faster implementation for where we have a flat memory area\nunsigned int lcdGetPixel_ArrayBuffer_flat(JsGraphics *gfx, short x, short y) {\n  unsigned int col = 0;\n  unsigned char *ptr = (unsigned char*)gfx->backendData;\n  unsigned int idx = lcdGetPixelIndex_ArrayBuffer(gfx,x,y,1);\n  ptr += idx>>3;\n  if (gfx->data.bpp&7/*not a multiple of one byte*/) {\n    idx = idx & 7;\n    unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;\n    unsigned int existing = (unsigned int)*ptr;\n    unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;\n    col = ((existing>>bitIdx)&mask);\n  } else {\n    int i;\n    for (i=0;i<gfx->data.bpp;i+=8) {\n      col |= ((unsigned int)*ptr) << i;\n      ptr++;\n    }\n  }\n  return col;\n}\n\n// set pixelCount pixels starting at x,y\n// Faster implementation for where we have a flat memory area\nvoid lcdSetPixels_ArrayBuffer_flat(JsGraphics *gfx, short x, short y, short pixelCount, unsigned int col) {\n  unsigned char *ptr = (unsigned char*)gfx->backendData;\n  unsigned int idx = lcdGetPixelIndex_ArrayBuffer(gfx,x,y,pixelCount);\n  ptr += idx>>3;\n\n  unsigned int whiteMask = (1U<<gfx->data.bpp)-1;\n  bool shortCut = (col==0 || (col&whiteMask)==whiteMask) && (!(gfx->data.flags&JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE)); // simple black or white fill\n\n  while (pixelCount--) { // writing individual bits\n    if (gfx->data.bpp&7/*not a multiple of one byte*/) {\n      idx = idx & 7;\n      if (shortCut && idx==0) {\n        // Basically, if we're aligned and we're filling all 0 or all 1\n        // then we can go really quickly and can just fill\n        int wholeBytes = (gfx->data.bpp*(pixelCount+1)) >> 3;\n        if (wholeBytes) {\n          char c = (char)(col?0xFF:0);\n          pixelCount = (short)(pixelCount+1 - (wholeBytes*8/gfx->data.bpp));\n          while (wholeBytes--) {\n            *ptr = c;\n            ptr++;\n          }\n          continue;\n        }\n      }\n      unsigned int mask = (unsigned int)(1<<gfx->data.bpp)-1;\n      unsigned int existing = (unsigned int)*ptr;\n      unsigned int bitIdx = (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_MSB) ? 8-(idx+gfx->data.bpp) : idx;\n      assert(ptr>=gfx->backendData && ptr<((char*)gfx->backendData + graphicsGetMemoryRequired(gfx)));\n      *ptr = (char)((existing&~(mask<<bitIdx)) | ((col&mask)<<bitIdx));\n      if (gfx->data.flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE) {\n        ptr++;\n      } else {\n        idx += gfx->data.bpp;\n        if (idx>=8) ptr++;\n      }\n    } else { // we're writing whole bytes\n      int i;\n      for (i=0;i<gfx->data.bpp;i+=8) {\n        *ptr = (char)(col >> i);\n        ptr++;\n      }\n    }\n  }\n}\n\n// Faster implementation for where we have a flat memory area\nvoid lcdSetPixel_ArrayBuffer_flat(JsGraphics *gfx, short x, short y, unsigned int col) {\n  lcdSetPixels_ArrayBuffer_flat(gfx, x, y, 1, col);\n}\n\n// Faster implementation for where we have a flat memory area\nvoid  lcdFillRect_ArrayBuffer_flat(struct JsGraphics *gfx, short x1, short y1, short x2, short y2) {\n  short y;\n  for (y=y1;y<=y2;y++)\n    lcdSetPixels_ArrayBuffer_flat(gfx, x1, y, (short)(1+x2-x1), gfx->data.fgColor);\n}\n#endif // SAVE_ON_FLASH\n\nvoid lcdInit_ArrayBuffer(JsGraphics *gfx) {\n  // create buffer\n  JsVar *buf = jswrap_arraybuffer_constructor(graphicsGetMemoryRequired(gfx));\n  jsvUnLock2(jsvAddNamedChild(gfx->graphicsVar, buf, \"buffer\"), buf);\n}\n\nvoid lcdSetCallbacks_ArrayBuffer(JsGraphics *gfx) {\n  JsVar *buf = jsvObjectGetChild(gfx->graphicsVar, \"buffer\", 0);\n#ifndef SAVE_ON_FLASH\n  size_t len = 0;\n  char *dataPtr = jsvGetDataPointer(buf, &len);\n#endif\n  jsvUnLock(buf);\n#ifndef SAVE_ON_FLASH\n  if (dataPtr && len>=graphicsGetMemoryRequired(gfx)) {\n    // nice fast mode\n    gfx->backendData = dataPtr;\n    gfx->setPixel = lcdSetPixel_ArrayBuffer_flat;\n    gfx->getPixel = lcdGetPixel_ArrayBuffer_flat;\n    gfx->fillRect = lcdFillRect_ArrayBuffer_flat;\n#else\n  if (false) {\n#endif\n  } else if (jsvIsArrayBuffer(buf)) {\n    /* NOTE: This is nasty as 'buf' is not locked. HOWEVER we know that\n     gfx->graphicsVar IS locked, so 'buf' isn't going anywhere */\n    gfx->backendData = buf;\n    gfx->setPixel = lcdSetPixel_ArrayBuffer;\n    gfx->getPixel = lcdGetPixel_ArrayBuffer;\n    gfx->fillRect = lcdFillRect_ArrayBuffer;\n  }\n}\n"], "filenames": ["ChangeLog", "libs/graphics/jswrap_graphics.c", "libs/graphics/lcd_arraybuffer.c"], "buggy_code_start_loc": [23, 132, 163], "buggy_code_end_loc": [23, 134, 163], "fixing_code_start_loc": [24, 132, 164], "fixing_code_end_loc": [25, 140, 165], "type": "CWE-125", "message": "Espruino before 1.98 allows attackers to cause a denial of service (application crash) with a user crafted input file via an Out-of-bounds Read during syntax parsing in which certain height validation is missing in libs/graphics/jswrap_graphics.c.", "other": {"cve": {"id": "CVE-2018-11592", "sourceIdentifier": "cve@mitre.org", "published": "2018-05-31T16:29:00.330", "lastModified": "2018-06-08T16:16:49.873", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Espruino before 1.98 allows attackers to cause a denial of service (application crash) with a user crafted input file via an Out-of-bounds Read during syntax parsing in which certain height validation is missing in libs/graphics/jswrap_graphics.c."}, {"lang": "es", "value": "Espruino en versiones anteriores a la 1.98 permite que los atacantes provoquen una denegaci\u00f3n de servicio (cierre inesperado de la aplicaci\u00f3n) con un archivo de entrada manipulado por el usuario mediante una lectura fuera de l\u00edmites durante el an\u00e1lisis sint\u00e1ctico en el que faltan determinadas validaciones de valores height en libs/graphics/jswrap_graphics.c."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:espruino:espruino:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.98", "matchCriteriaId": "713130C9-A6CC-45EB-86C5-CE529C04B50B"}]}]}], "references": [{"url": "https://github.com/espruino/Espruino/commit/8a44b04b584b3d3ab1cb68fed410f7ecb165e50e", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/espruino/Espruino/files/2015630/test_0.txt", "source": "cve@mitre.org", "tags": ["Exploit", "Vendor Advisory"]}, {"url": "https://github.com/espruino/Espruino/issues/1421", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/espruino/Espruino/commit/8a44b04b584b3d3ab1cb68fed410f7ecb165e50e"}}