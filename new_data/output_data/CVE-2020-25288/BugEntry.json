{"buggy_code": ["<?php\n/**\n * MantisBT - A PHP based bugtracking system\n *\n * MantisBT is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2 of the License, or\n * (at your option) any later version.\n *\n * MantisBT is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n * @package MantisBT\n */\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_STRING] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t# MySQL 4-bytes UTF-8 chars workaround #21101\n\t'#function_value_to_database' => 'db_mysql_fix_utf8',\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textbox',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_string',\n\t'#function_string_value_for_email' => null,\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_TEXTAREA] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t# MySQL 4-bytes UTF-8 chars workaround #21101\n\t'#function_value_to_database' => 'db_mysql_fix_utf8',\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textarea',\n\t'#function_print_value' => 'cfdef_print_textarea',\n\t'#function_string_value' => 'cfdef_prepare_string',\n\t'#function_string_value_for_email' => null,\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_NUMERIC] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textbox',\n\t'#function_print_value' => 'cfdef_print_numeric',\n\t'#function_string_value' => 'cfdef_prepare_numeric',\n\t'#function_string_value_for_email' => null,\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_FLOAT] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textbox',\n\t'#function_print_value' => 'cfdef_print_float',\n\t'#function_string_value' => 'cfdef_prepare_float',\n\t'#function_string_value_for_email' => null,\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_ENUM] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_list',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_EMAIL] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textbox',\n\t'#function_print_value' => 'cfdef_print_email_value',\n\t'#function_string_value' => 'cfdef_prepare_email_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_email_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_CHECKBOX] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => 'cfdef_prepare_list_value_to_database',\n\t'#function_database_to_value' => 'cfdef_prepare_list_database_to_value',\n\t'#function_print_input' => 'cfdef_input_checkbox',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_RADIO] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => false,\n\t'#display_length_min' => false,\n\t'#display_length_max' => false,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_radio',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_LIST] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_list',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_MULTILIST] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => 'cfdef_prepare_list_value_to_database',\n\t'#function_database_to_value' => 'cfdef_prepare_list_database_to_value',\n\t'#function_print_input' => 'cfdef_input_list',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_DATE] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_default_to_value' => 'cfdef_prepare_date_default',\n\t'#function_print_input' => 'cfdef_input_date',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_date_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_date_value_for_email',\n);\n\n/**\n * Prepare List Value for database storage\n * @param string $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_list_database_to_value( $p_value ) {\n\treturn rtrim( ltrim( $p_value, '|' ), '|' );\n}\n\n/**\n * Print value of text area custom field with sanitization and link processing.\n * @param string $p_value The custom field value.\n */\nfunction cfdef_print_textarea( $p_value ) {\n\techo string_display_links( $p_value );\n}\n\n/**\n * Print value of numeric custom field with sanitization and link processing.\n * @param string $p_value The custom field value.\n */\nfunction cfdef_print_numeric( $p_value ) {\n\techo is_numeric( $p_value ) ? (int)$p_value : '';\n}\n\n/**\n * Print value of float custom field with sanitization and link processing.\n * @param string $p_value The custom field value.\n */\nfunction cfdef_print_float( $p_value ) {\n\techo is_numeric( $p_value ) ? (float)$p_value : '';\n}\n\n/**\n * Prepare value for custom fields of type numeric.\n * @param string $p_value The string value.\n * @return int The numeric value.\n */\nfunction cfdef_prepare_numeric( $p_value ) {\n\t$t_value = (int)$p_value;\n\treturn $t_value;\n}\n\n/**\n * Prepare value for custom fields of type float.\n * @param string $p_value The string value.\n * @return float The float value.\n */\nfunction cfdef_prepare_float( $p_value ) {\n\t$t_value = (float)$p_value;\n\treturn $t_value;\n}\n\n/**\n * Prepare value for custom fields of type string.\n * @param string $p_value The string value.\n * @return string The string value.\n */\nfunction cfdef_prepare_string( $p_value ) {\n\treturn $p_value;\n}\n\n/**\n * Prepare List Value for email\n * @param string $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_list_value_for_email( $p_value ) {\n\t# strip start and end markers before converting markers to commas\n\treturn str_replace( '|', ', ', mb_substr( str_replace( '||', '|', '|' . $p_value . '|' ), 1, -1 ) );\n}\n\n/**\n * Print the value of the email custom field.\n * @param string $p_value The database value\n * @return void\n */\nfunction cfdef_print_email_value( $p_value ) {\n\tif( !is_blank( $p_value ) ) {\n\t\tprint_email_link( $p_value, $p_value );\n\t}\n}\n\n/**\n * Format email address for text email\n * @param string $p_value The database value.\n * @return string The plain text value\n */\nfunction cfdef_prepare_email_value_for_email( $p_value ) {\n\treturn is_null( $p_value ) ? '' : $p_value;\n}\n\n/**\n * format date value for email\n * @param integer $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_date_value_for_email( $p_value ) {\n\treturn cfdef_prepare_date_value( $p_value );\n}\n\n/**\n * Translates the default date value entered by the creator of the custom\n * field into a date value.  For example, translate '=tomorrow' to tomorrow's\n * date.\n * @param string $p_value The default date string.\n * @return string The calculated default date value if $p_value starts with '=', otherwise, returns $p_value.\n */\nfunction cfdef_prepare_date_default( $p_value ) {\n\tif( is_blank( $p_value ) ) {\n\t\treturn '';\n\t}\n\n\t$t_value = trim( $p_value );\n\t$t_value_length = mb_strlen( $t_value );\n\n\t# We are expanding {tomorrow}, {yesterday}, {+3 days}, {-7 days}, {next week}\n\t# See strtotime() for more details about supported formats.\n\tif( $t_value_length >= 3 && $t_value[0] == '{' && $t_value[$t_value_length - 1] == '}' ) {\n\t\t$t_value = mb_substr( $t_value, 1, $t_value_length - 2 );\n\t\t$t_value = @strtotime( $t_value );\n\n\t\t# Different versions of PHP return different values in case of error.\n\t\tif( $t_value == -1 || $t_value === false ) {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\treturn $t_value;\n}\n\n/**\n * string_custom_field_value\n * @param string $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_list_value( $p_value ) {\n\t# strip start and end markers before converting markers to commas\n\treturn string_display_line( str_replace( '|', ', ', mb_substr( str_replace( '||', '|', '|' . $p_value . '|' ), 1, -1 ) ) );\n}\n\n/**\n * Get the value for the email custom field.\n * @param string $p_value The database value\n * @return string The email value.\n */\nfunction cfdef_prepare_email_value( $p_value ) {\n\treturn $p_value;\n}\n\n/**\n * Prepare date value\n * @param integer $p_value Date timestamp.\n * @return string\n */\nfunction cfdef_prepare_date_value( $p_value ) {\n\tif( $p_value != null ) {\n\t\tif( is_numeric( $p_value ) ) {\n\t\t\treturn date( config_get( 'short_date_format' ), $p_value );\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_list( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\t$t_values = explode( '|', custom_field_prepare_possible_values( $p_field_def['possible_values'] ) );\n\t$t_list_size = $t_possible_values_count = count( $t_values );\n\n\tif( $t_possible_values_count > 5 ) {\n\t\t$t_list_size = 5;\n\t}\n\n\tif( $p_field_def['type'] == CUSTOM_FIELD_TYPE_ENUM ) {\n\t\t$t_list_size = 0;\t# for enums the size is 0\n\t}\n\n\tif( $p_field_def['type'] == CUSTOM_FIELD_TYPE_MULTILIST ) {\n\t\techo '<select ' . helper_get_tab_index() . ' id=\"custom_field_' . $p_field_def['id'] . '\" name=\"custom_field_' . $p_field_def['id'] . '[]\" size=\"' . $t_list_size . '\" multiple=\"multiple\"' . $p_required .'>';\n\t} else {\n\t\techo '<select ' . helper_get_tab_index() . ' id=\"custom_field_' . $p_field_def['id'] . '\" name=\"custom_field_' . $p_field_def['id'] . '\" size=\"' . $t_list_size . '\"' . $p_required .'>';\n\t}\n\n\t$t_selected_values = explode( '|', $p_custom_field_value );\n\tforeach( $t_values as $t_option ) {\n\t\tif( in_array( $t_option, $t_selected_values, true ) ) {\n\t\t\techo '<option value=\"' . string_attribute( $t_option ) . '\" selected=\"selected\"> ' . string_display_line( $t_option ) . '</option>';\n\t\t} else {\n\t\t\techo '<option value=\"' . string_attribute( $t_option ) . '\">' . string_display_line( $t_option ) . '</option>';\n\t\t}\n\t}\n\techo '</select>';\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_checkbox( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\t$t_values = explode( '|', custom_field_prepare_possible_values( $p_field_def['possible_values'] ) );\n\t$t_checked_values = explode( '|', $p_custom_field_value );\n\tfor( $i = 0; $i < count( $t_values ); $i++ ) {\n\t\t$t_input_id = 'custom_field_' . $p_field_def['id'] . '_value_' . $i;\n\t\t$t_input_name = 'custom_field_' . $p_field_def['id'] . '[]';\n\t\techo '<label for=\"' . $t_input_id . '\">' . \"\\n\";\n\t\techo '<input class=\"ace\" id=\"' . $t_input_id . '\" ' . helper_get_tab_index() . ' type=\"checkbox\" name=\"' . $t_input_name . '\" value=\"' . string_attribute( $t_values[$i] ) . '\"';\n\t\tcheck_checked( $t_checked_values, $t_values[$i] );\n\t\techo \" />\\n\";\n\t\techo '<span class=\"lbl\">&#160;' . string_display_line( $t_values[$i] ) . '</label>' . \"\\n\";\n\t\techo '</label>&#160;&#160;&#160;&#160;' . \"\\n\";\n\t}\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_radio( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\t$t_values = explode( '|', custom_field_prepare_possible_values( $p_field_def['possible_values'] ) );\n\n\t$t_len = strlen( $p_custom_field_value );\n\tif( $t_len >= 2 && ( $p_custom_field_value[0] == '|' ) && ( $p_custom_field_value[$t_len-1] == '|' ) ) {\n\t\t$t_checked_value = substr( $p_custom_field_value, 1, $t_len - 2 );\n\t} else {\n\t\t$t_checked_value = $p_custom_field_value;\n\t}\n\n\tfor( $i = 0; $i < count( $t_values ); $i++ ) {\n\t\t$t_input_id = 'custom_field_' . $p_field_def['id'] . '_value_' . $i;\n\t\t$t_input_name = 'custom_field_' . $p_field_def['id'];\n\t\techo '<label for=\"' . $t_input_id . '\">';\n\t\techo '<input class=\"ace\" id=\"' . $t_input_id . '\" ' . helper_get_tab_index() . ' type=\"radio\" name=\"' . $t_input_name . '\" value=\"' . string_attribute( $t_values[$i] ) . '\"' . $p_required;\n\t\tcheck_checked( $t_checked_value, $t_values[$i] );\n\t\techo \" />\\n\";\n\t\techo '<span class=\"lbl\">&#160;' . string_display_line( $t_values[$i] ) . '</span>' . \"\\n\";\n\t\techo '</label>&#160;&#160;&#160;&#160;' . \"\\n\";\n\t}\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_textbox( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\techo '<input ', helper_get_tab_index(), ' type=\"text\" id=\"custom_field_', $p_field_def['id']\n\t\t\t, '\" name=\"custom_field_', $p_field_def['id'], '\" ', $p_required;\n\tif( $p_field_def['length_max'] > 0 ) {\n\t\techo ' maxlength=\"' . $p_field_def['length_max'] . '\"'\n\t\t\t\t, ' size=\"' .  min( 80, $p_field_def['length_max'] ) . '\"';\n\t} else {\n\t\techo ' maxlength=\"255\" size=\"80\"';\n\t}\n\tif( !empty( $p_field_def['valid_regexp'] ) ) {\n\t\t# the custom field regex is evaluated with preg_match and looks for a partial match in the string\n\t\t# however, the html property is matched for the whole string.\n\t\t# unless we have explicit start and end tokens, adapt the html regex to allow a substring match.\n\t\t$t_cf_regex = $p_field_def['valid_regexp'];\n\t\tif( substr( $t_cf_regex, 0, 1 ) != '^' ) {\n\t\t\t$t_cf_regex = '.*' . $t_cf_regex;\n\t\t}\n\t\tif( substr( $t_cf_regex, -1 ) != '$' ) {\n\t\t\t$t_cf_regex .= '.*';\n\t\t}\n\t\techo ' pattern=\"' . $t_cf_regex . '\"';\n\t}\n\techo ' value=\"' . string_attribute( $p_custom_field_value ) .'\" />';\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_textarea( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\techo '<textarea class=\"form-control\" ', helper_get_tab_index(), ' id=\"custom_field_' . $p_field_def['id']\n\t\t\t, '\" name=\"custom_field_', $p_field_def['id'], '\"', $p_required;\n\tif( $p_field_def['length_max'] > 0 ) {\n\t\techo ' maxlength=\"', $p_field_def['length_max'], '\"';\n\t}\n\techo ' cols=\"70\" rows=\"8\">', $p_custom_field_value, '</textarea>';\n}\n\n/**\n * Prints the controls for the date selector.\n *\n * @param string $p_field_def          The custom field definition.\n * @param string $p_custom_field_value The custom field value to print.\n * @param string $p_required           The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_date( $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\tprint_date_selection_set( 'custom_field_' . $p_field_def['id'], config_get( 'short_date_format' ), $p_custom_field_value, false, true, 0, 0, 'input-sm', $p_required );\n}\n\n/**\n * value to database\n * @param string $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_list_value_to_database( $p_value ) {\n\tif( '' == $p_value ) {\n\t\treturn '';\n\t} else {\n\t\treturn '|' . $p_value . '|';\n\t}\n}\n\n/**\n * Prepare possible values for option list\n * @param array $p_field_def Custom field definition.\n * @return array|boolean\n */\nfunction cfdef_prepare_list_distinct_values( array $p_field_def ) {\n\tdb_param_push();\n\t$t_query = 'SELECT possible_values FROM {custom_field} WHERE id=' . db_param();\n\t$t_result = db_query( $t_query, array( $p_field_def['id'] ) );\n\n\t$t_row = db_fetch_array( $t_result );\n\tif( !$t_row ) {\n\t\treturn false;\n\t}\n\n\t$t_possible_values = custom_field_prepare_possible_values( $t_row['possible_values'] );\n\t$t_values_arr = explode( '|', $t_possible_values );\n\t$t_return_arr = array();\n\n\tforeach( $t_values_arr as $t_option ) {\n\t\tarray_push( $t_return_arr, $t_option );\n\t}\n\treturn $t_return_arr;\n}\n"], "fixing_code": ["<?php\n/**\n * MantisBT - A PHP based bugtracking system\n *\n * MantisBT is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 2 of the License, or\n * (at your option) any later version.\n *\n * MantisBT is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n * @package MantisBT\n */\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_STRING] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t# MySQL 4-bytes UTF-8 chars workaround #21101\n\t'#function_value_to_database' => 'db_mysql_fix_utf8',\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textbox',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_string',\n\t'#function_string_value_for_email' => null,\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_TEXTAREA] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t# MySQL 4-bytes UTF-8 chars workaround #21101\n\t'#function_value_to_database' => 'db_mysql_fix_utf8',\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textarea',\n\t'#function_print_value' => 'cfdef_print_textarea',\n\t'#function_string_value' => 'cfdef_prepare_string',\n\t'#function_string_value_for_email' => null,\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_NUMERIC] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textbox',\n\t'#function_print_value' => 'cfdef_print_numeric',\n\t'#function_string_value' => 'cfdef_prepare_numeric',\n\t'#function_string_value_for_email' => null,\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_FLOAT] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textbox',\n\t'#function_print_value' => 'cfdef_print_float',\n\t'#function_string_value' => 'cfdef_prepare_float',\n\t'#function_string_value_for_email' => null,\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_ENUM] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_list',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_EMAIL] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_textbox',\n\t'#function_print_value' => 'cfdef_print_email_value',\n\t'#function_string_value' => 'cfdef_prepare_email_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_email_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_CHECKBOX] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => 'cfdef_prepare_list_value_to_database',\n\t'#function_database_to_value' => 'cfdef_prepare_list_database_to_value',\n\t'#function_print_input' => 'cfdef_input_checkbox',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_RADIO] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => false,\n\t'#display_length_min' => false,\n\t'#display_length_max' => false,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_radio',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_LIST] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_print_input' => 'cfdef_input_list',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_MULTILIST] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => 'cfdef_prepare_list_distinct_values',\n\t'#function_value_to_database' => 'cfdef_prepare_list_value_to_database',\n\t'#function_database_to_value' => 'cfdef_prepare_list_database_to_value',\n\t'#function_print_input' => 'cfdef_input_list',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_list_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_list_value_for_email',\n);\n\n$g_custom_field_type_definition[CUSTOM_FIELD_TYPE_DATE] = array (\n\t'#display_possible_values' => true,\n\t'#display_valid_regexp' => true,\n\t'#display_length_min' => true,\n\t'#display_length_max' => true,\n\t'#display_default_value' => true,\n\t'#function_return_distinct_values' => null,\n\t'#function_value_to_database' => null,\n\t'#function_database_to_value' => null,\n\t'#function_default_to_value' => 'cfdef_prepare_date_default',\n\t'#function_print_input' => 'cfdef_input_date',\n\t'#function_print_value' => null,\n\t'#function_string_value' => 'cfdef_prepare_date_value',\n\t'#function_string_value_for_email' => 'cfdef_prepare_date_value_for_email',\n);\n\n/**\n * Prepare List Value for database storage\n * @param string $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_list_database_to_value( $p_value ) {\n\treturn rtrim( ltrim( $p_value, '|' ), '|' );\n}\n\n/**\n * Print value of text area custom field with sanitization and link processing.\n * @param string $p_value The custom field value.\n */\nfunction cfdef_print_textarea( $p_value ) {\n\techo string_display_links( $p_value );\n}\n\n/**\n * Print value of numeric custom field with sanitization and link processing.\n * @param string $p_value The custom field value.\n */\nfunction cfdef_print_numeric( $p_value ) {\n\techo is_numeric( $p_value ) ? (int)$p_value : '';\n}\n\n/**\n * Print value of float custom field with sanitization and link processing.\n * @param string $p_value The custom field value.\n */\nfunction cfdef_print_float( $p_value ) {\n\techo is_numeric( $p_value ) ? (float)$p_value : '';\n}\n\n/**\n * Prepare value for custom fields of type numeric.\n * @param string $p_value The string value.\n * @return int The numeric value.\n */\nfunction cfdef_prepare_numeric( $p_value ) {\n\t$t_value = (int)$p_value;\n\treturn $t_value;\n}\n\n/**\n * Prepare value for custom fields of type float.\n * @param string $p_value The string value.\n * @return float The float value.\n */\nfunction cfdef_prepare_float( $p_value ) {\n\t$t_value = (float)$p_value;\n\treturn $t_value;\n}\n\n/**\n * Prepare value for custom fields of type string.\n * @param string $p_value The string value.\n * @return string The string value.\n */\nfunction cfdef_prepare_string( $p_value ) {\n\treturn $p_value;\n}\n\n/**\n * Prepare List Value for email\n * @param string $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_list_value_for_email( $p_value ) {\n\t# strip start and end markers before converting markers to commas\n\treturn str_replace( '|', ', ', mb_substr( str_replace( '||', '|', '|' . $p_value . '|' ), 1, -1 ) );\n}\n\n/**\n * Print the value of the email custom field.\n * @param string $p_value The database value\n * @return void\n */\nfunction cfdef_print_email_value( $p_value ) {\n\tif( !is_blank( $p_value ) ) {\n\t\tprint_email_link( $p_value, $p_value );\n\t}\n}\n\n/**\n * Format email address for text email\n * @param string $p_value The database value.\n * @return string The plain text value\n */\nfunction cfdef_prepare_email_value_for_email( $p_value ) {\n\treturn is_null( $p_value ) ? '' : $p_value;\n}\n\n/**\n * format date value for email\n * @param integer $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_date_value_for_email( $p_value ) {\n\treturn cfdef_prepare_date_value( $p_value );\n}\n\n/**\n * Translates the default date value entered by the creator of the custom\n * field into a date value.  For example, translate '=tomorrow' to tomorrow's\n * date.\n * @param string $p_value The default date string.\n * @return string The calculated default date value if $p_value starts with '=', otherwise, returns $p_value.\n */\nfunction cfdef_prepare_date_default( $p_value ) {\n\tif( is_blank( $p_value ) ) {\n\t\treturn '';\n\t}\n\n\t$t_value = trim( $p_value );\n\t$t_value_length = mb_strlen( $t_value );\n\n\t# We are expanding {tomorrow}, {yesterday}, {+3 days}, {-7 days}, {next week}\n\t# See strtotime() for more details about supported formats.\n\tif( $t_value_length >= 3 && $t_value[0] == '{' && $t_value[$t_value_length - 1] == '}' ) {\n\t\t$t_value = mb_substr( $t_value, 1, $t_value_length - 2 );\n\t\t$t_value = @strtotime( $t_value );\n\n\t\t# Different versions of PHP return different values in case of error.\n\t\tif( $t_value == -1 || $t_value === false ) {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\treturn $t_value;\n}\n\n/**\n * string_custom_field_value\n * @param string $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_list_value( $p_value ) {\n\t# strip start and end markers before converting markers to commas\n\treturn string_display_line( str_replace( '|', ', ', mb_substr( str_replace( '||', '|', '|' . $p_value . '|' ), 1, -1 ) ) );\n}\n\n/**\n * Get the value for the email custom field.\n * @param string $p_value The database value\n * @return string The email value.\n */\nfunction cfdef_prepare_email_value( $p_value ) {\n\treturn $p_value;\n}\n\n/**\n * Prepare date value\n * @param integer $p_value Date timestamp.\n * @return string\n */\nfunction cfdef_prepare_date_value( $p_value ) {\n\tif( $p_value != null ) {\n\t\tif( is_numeric( $p_value ) ) {\n\t\t\treturn date( config_get( 'short_date_format' ), $p_value );\n\t\t}\n\t}\n\n\treturn '';\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_list( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\t$t_values = explode( '|', custom_field_prepare_possible_values( $p_field_def['possible_values'] ) );\n\t$t_list_size = $t_possible_values_count = count( $t_values );\n\n\tif( $t_possible_values_count > 5 ) {\n\t\t$t_list_size = 5;\n\t}\n\n\tif( $p_field_def['type'] == CUSTOM_FIELD_TYPE_ENUM ) {\n\t\t$t_list_size = 0;\t# for enums the size is 0\n\t}\n\n\tif( $p_field_def['type'] == CUSTOM_FIELD_TYPE_MULTILIST ) {\n\t\techo '<select ' . helper_get_tab_index() . ' id=\"custom_field_' . $p_field_def['id'] . '\" name=\"custom_field_' . $p_field_def['id'] . '[]\" size=\"' . $t_list_size . '\" multiple=\"multiple\"' . $p_required .'>';\n\t} else {\n\t\techo '<select ' . helper_get_tab_index() . ' id=\"custom_field_' . $p_field_def['id'] . '\" name=\"custom_field_' . $p_field_def['id'] . '\" size=\"' . $t_list_size . '\"' . $p_required .'>';\n\t}\n\n\t$t_selected_values = explode( '|', $p_custom_field_value );\n\tforeach( $t_values as $t_option ) {\n\t\tif( in_array( $t_option, $t_selected_values, true ) ) {\n\t\t\techo '<option value=\"' . string_attribute( $t_option ) . '\" selected=\"selected\"> ' . string_display_line( $t_option ) . '</option>';\n\t\t} else {\n\t\t\techo '<option value=\"' . string_attribute( $t_option ) . '\">' . string_display_line( $t_option ) . '</option>';\n\t\t}\n\t}\n\techo '</select>';\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_checkbox( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\t$t_values = explode( '|', custom_field_prepare_possible_values( $p_field_def['possible_values'] ) );\n\t$t_checked_values = explode( '|', $p_custom_field_value );\n\tfor( $i = 0; $i < count( $t_values ); $i++ ) {\n\t\t$t_input_id = 'custom_field_' . $p_field_def['id'] . '_value_' . $i;\n\t\t$t_input_name = 'custom_field_' . $p_field_def['id'] . '[]';\n\t\techo '<label for=\"' . $t_input_id . '\">' . \"\\n\";\n\t\techo '<input class=\"ace\" id=\"' . $t_input_id . '\" ' . helper_get_tab_index() . ' type=\"checkbox\" name=\"' . $t_input_name . '\" value=\"' . string_attribute( $t_values[$i] ) . '\"';\n\t\tcheck_checked( $t_checked_values, $t_values[$i] );\n\t\techo \" />\\n\";\n\t\techo '<span class=\"lbl\">&#160;' . string_display_line( $t_values[$i] ) . '</label>' . \"\\n\";\n\t\techo '</label>&#160;&#160;&#160;&#160;' . \"\\n\";\n\t}\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_radio( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\t$t_values = explode( '|', custom_field_prepare_possible_values( $p_field_def['possible_values'] ) );\n\n\t$t_len = strlen( $p_custom_field_value );\n\tif( $t_len >= 2 && ( $p_custom_field_value[0] == '|' ) && ( $p_custom_field_value[$t_len-1] == '|' ) ) {\n\t\t$t_checked_value = substr( $p_custom_field_value, 1, $t_len - 2 );\n\t} else {\n\t\t$t_checked_value = $p_custom_field_value;\n\t}\n\n\tfor( $i = 0; $i < count( $t_values ); $i++ ) {\n\t\t$t_input_id = 'custom_field_' . $p_field_def['id'] . '_value_' . $i;\n\t\t$t_input_name = 'custom_field_' . $p_field_def['id'];\n\t\techo '<label for=\"' . $t_input_id . '\">';\n\t\techo '<input class=\"ace\" id=\"' . $t_input_id . '\" ' . helper_get_tab_index() . ' type=\"radio\" name=\"' . $t_input_name . '\" value=\"' . string_attribute( $t_values[$i] ) . '\"' . $p_required;\n\t\tcheck_checked( $t_checked_value, $t_values[$i] );\n\t\techo \" />\\n\";\n\t\techo '<span class=\"lbl\">&#160;' . string_display_line( $t_values[$i] ) . '</span>' . \"\\n\";\n\t\techo '</label>&#160;&#160;&#160;&#160;' . \"\\n\";\n\t}\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_textbox( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\techo '<input ', helper_get_tab_index(), ' type=\"text\" id=\"custom_field_', $p_field_def['id']\n\t\t\t, '\" name=\"custom_field_', $p_field_def['id'], '\" ', $p_required;\n\tif( $p_field_def['length_max'] > 0 ) {\n\t\techo ' maxlength=\"' . $p_field_def['length_max'] . '\"'\n\t\t\t\t, ' size=\"' .  min( 80, $p_field_def['length_max'] ) . '\"';\n\t} else {\n\t\techo ' maxlength=\"255\" size=\"80\"';\n\t}\n\tif( !empty( $p_field_def['valid_regexp'] ) ) {\n\t\t# the custom field regex is evaluated with preg_match and looks for a partial match in the string\n\t\t# however, the html property is matched for the whole string.\n\t\t# unless we have explicit start and end tokens, adapt the html regex to allow a substring match.\n\t\t$t_cf_regex = $p_field_def['valid_regexp'];\n\t\tif( substr( $t_cf_regex, 0, 1 ) != '^' ) {\n\t\t\t$t_cf_regex = '.*' . $t_cf_regex;\n\t\t}\n\t\tif( substr( $t_cf_regex, -1 ) != '$' ) {\n\t\t\t$t_cf_regex .= '.*';\n\t\t}\n\t\techo ' pattern=\"' . string_attribute( $t_cf_regex ) . '\"';\n\t}\n\techo ' value=\"' . string_attribute( $p_custom_field_value ) .'\" />';\n}\n\n/**\n * print_custom_field_input\n * @param array $p_field_def          Custom field definition.\n * @param mixed $p_custom_field_value Custom field value.\n * @param string $p_required          The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_textarea( array $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\techo '<textarea class=\"form-control\" ', helper_get_tab_index(), ' id=\"custom_field_' . $p_field_def['id']\n\t\t\t, '\" name=\"custom_field_', $p_field_def['id'], '\"', $p_required;\n\tif( $p_field_def['length_max'] > 0 ) {\n\t\techo ' maxlength=\"', $p_field_def['length_max'], '\"';\n\t}\n\techo ' cols=\"70\" rows=\"8\">', $p_custom_field_value, '</textarea>';\n}\n\n/**\n * Prints the controls for the date selector.\n *\n * @param string $p_field_def          The custom field definition.\n * @param string $p_custom_field_value The custom field value to print.\n * @param string $p_required           The \"required\" attribute to add to the field\n * @return void\n */\nfunction cfdef_input_date( $p_field_def, $p_custom_field_value, $p_required = '' ) {\n\tprint_date_selection_set( 'custom_field_' . $p_field_def['id'], config_get( 'short_date_format' ), $p_custom_field_value, false, true, 0, 0, 'input-sm', $p_required );\n}\n\n/**\n * value to database\n * @param string $p_value Value.\n * @return string\n */\nfunction cfdef_prepare_list_value_to_database( $p_value ) {\n\tif( '' == $p_value ) {\n\t\treturn '';\n\t} else {\n\t\treturn '|' . $p_value . '|';\n\t}\n}\n\n/**\n * Prepare possible values for option list\n * @param array $p_field_def Custom field definition.\n * @return array|boolean\n */\nfunction cfdef_prepare_list_distinct_values( array $p_field_def ) {\n\tdb_param_push();\n\t$t_query = 'SELECT possible_values FROM {custom_field} WHERE id=' . db_param();\n\t$t_result = db_query( $t_query, array( $p_field_def['id'] ) );\n\n\t$t_row = db_fetch_array( $t_result );\n\tif( !$t_row ) {\n\t\treturn false;\n\t}\n\n\t$t_possible_values = custom_field_prepare_possible_values( $t_row['possible_values'] );\n\t$t_values_arr = explode( '|', $t_possible_values );\n\t$t_return_arr = array();\n\n\tforeach( $t_values_arr as $t_option ) {\n\t\tarray_push( $t_return_arr, $t_option );\n\t}\n\treturn $t_return_arr;\n}\n"], "filenames": ["core/cfdefs/cfdef_standard.php"], "buggy_code_start_loc": [470], "buggy_code_end_loc": [471], "fixing_code_start_loc": [470], "fixing_code_end_loc": [471], "type": "CWE-79", "message": "An issue was discovered in MantisBT before 2.24.3. When editing an Issue in a Project where a Custom Field with a crafted Regular Expression property is used, improper escaping of the corresponding form input's pattern attribute allows HTML injection and, if CSP settings permit, execution of arbitrary JavaScript.", "other": {"cve": {"id": "CVE-2020-25288", "sourceIdentifier": "cve@mitre.org", "published": "2020-09-30T21:15:13.167", "lastModified": "2020-10-13T17:47:38.790", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MantisBT before 2.24.3. When editing an Issue in a Project where a Custom Field with a crafted Regular Expression property is used, improper escaping of the corresponding form input's pattern attribute allows HTML injection and, if CSP settings permit, execution of arbitrary JavaScript."}, {"lang": "es", "value": "Se detect\u00f3 un problema en MantisBT versiones anteriores a 2.24.3.&#xa0;Cuando se edita un problema en un proyecto donde se usa un campo personalizado con una propiedad de expresi\u00f3n regular dise\u00f1ada, el escape incorrecto del atributo de patr\u00f3n de entrada del formulario correspondiente permite la inyecci\u00f3n de HTML y, si la configuraci\u00f3n de CSP lo permite, una ejecuci\u00f3n de JavaScript arbitrario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.24.3", "matchCriteriaId": "AAC99001-43F4-461D-9C3A-AB33CA4B9F94"}]}]}], "references": [{"url": "http://github.com/mantisbt/mantisbt/commit/221cf323f16a9738a5b27aaba94758f11281d85c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://mantisbt.org/bugs/view.php?id=27275", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "http://github.com/mantisbt/mantisbt/commit/221cf323f16a9738a5b27aaba94758f11281d85c"}}