{"buggy_code": ["'use strict';\n'require baseclass';\n'require view';\n'require fs';\n'require ui';\n\nvar isReadonlyView = !L.hasViewPermission() || null;\n\nvar SSHPubkeyDecoder = baseclass.singleton({\n\tlengthDecode: function(s, off)\n\t{\n\t\tvar l = (s.charCodeAt(off++) << 24) |\n\t\t\t\t(s.charCodeAt(off++) << 16) |\n\t\t\t\t(s.charCodeAt(off++) <<  8) |\n\t\t\t\t s.charCodeAt(off++);\n\n\t\tif (l < 0 || (off + l) > s.length)\n\t\t\treturn -1;\n\n\t\treturn l;\n\t},\n\n\tdecode: function(s)\n\t{\n\t\tvar parts = s.trim().match(/^((?:(?:^|,)[^ =,]+(?:=(?:[^ \",]+|\"(?:[^\"\\\\]|\\\\.)*\"))?)+ +)?(ssh-dss|ssh-rsa|ssh-ed25519|ecdsa-sha2-nistp[0-9]+|sk-ecdsa-sha2-nistp256@openssh\\.com|sk-ssh-ed25519@openssh\\.com) +([^ ]+)( +.*)?$/);\n\n\t\tif (!parts)\n\t\t\treturn null;\n\n\t\tvar key = null;\n\t\ttry { key = atob(parts[3]); } catch(e) {}\n\t\tif (!key)\n\t\t\treturn null;\n\n\t\tvar off, len;\n\n\t\toff = 0;\n\t\tlen = this.lengthDecode(key, off);\n\n\t\tif (len <= 0)\n\t\t\treturn null;\n\n\t\tvar type = key.substr(off + 4, len);\n\t\tif (type !== parts[2])\n\t\t\treturn null;\n\n\t\toff += 4 + len;\n\n\t\tvar len1 = off < key.length ? this.lengthDecode(key, off) : 0;\n\t\tif (len1 <= 0)\n\t\t\treturn null;\n\n\t\tvar curve = null;\n\t\tif (type.indexOf('ecdsa-sha2-') === 0) {\n\t\t\tcurve = key.substr(off + 4, len1);\n\n\t\t\tif (!len1 || type.substr(11) !== curve)\n\t\t\t\treturn null;\n\n\t\t\ttype = 'ecdsa-sha2';\n\t\t\tcurve = curve.replace(/^nistp(\\d+)$/, 'NIST P-$1');\n\t\t}\n\n\t\toff += 4 + len1;\n\n\t\tvar len2 = off < key.length ? this.lengthDecode(key, off) : 0;\n\t\tif (len2 < 0)\n\t\t\treturn null;\n\n\t\tif (len1 & 1)\n\t\t\tlen1--;\n\n\t\tif (len2 & 1)\n\t\t\tlen2--;\n\n\t\tvar comment = (parts[4] || '').trim(),\n\t\t    fprint = parts[3].length > 68 ? parts[3].substr(0, 33) + '\u2026' + parts[3].substr(-34) : parts[3];\n\n\t\tvar options = null;\n\t\t(parts[1] || '').trim().replace(/(?:^|,)([^ =,]+)(?:=(?:([^ \",]+)|\"((?:[^\"\\\\]|\\\\.)*)\"))?/g, function(m, k, p, q) {\n\t\t\toptions = options || {};\n\n\t\t\tif (options.hasOwnProperty(k))\n\t\t\t\toptions[k] += ',' + (q || p || true);\n\t\t\telse\n\t\t\t\toptions[k] = (q || p || true);\n\t\t});\n\n\t\tswitch (type)\n\t\t{\n\t\tcase 'ssh-rsa':\n\t\t\treturn { type: 'RSA', bits: len2 * 8, comment: comment, options: options, fprint: fprint, src: s };\n\n\t\tcase 'ssh-dss':\n\t\t\treturn { type: 'DSA', bits: len1 * 8, comment: comment, options: options, fprint: fprint, src: s };\n\n\t\tcase 'ssh-ed25519':\n\t\t\treturn { type: 'EdDSA', curve: 'Curve25519', comment: comment, options: options, fprint: fprint, src: s };\n\n\t\tcase 'ecdsa-sha2':\n\t\t\treturn { type: 'ECDSA', curve: curve, comment: comment, options: options, fprint: fprint, src: s };\n\t\t\n\t\tcase 'sk-ecdsa-sha2-nistp256@openssh.com':\n\t\t\treturn { type: 'ECDSA-SK', curve: 'NIST P-256', comment: comment, options: options, fprint: fprint, src: s };\n\t\t\n\t\tcase 'sk-ssh-ed25519@openssh.com':\n\t\t\treturn { type: 'EdDSA-SK', curve: 'Curve25519', comment: comment, options: options, fprint: fprint, src: s };\n\n\t\tdefault:\n\t\t\treturn null;\n\t\t}\n\t}\n});\n\nfunction renderKeyItem(pubkey) {\n\treturn E('div', {\n\t\tclass: 'item',\n\t\tclick: isReadonlyView ? null : removeKey,\n\t\t'data-key': pubkey.src\n\t}, [\n\t\tE('strong', [ pubkey.comment || _('Unnamed key') ]), E('br'),\n\t\tE('small', [\n\t\t\t'%s, %s'.format(pubkey.type, pubkey.curve || _('%d Bit').format(pubkey.bits)),\n\t\t\tpubkey.options ? E([], [\n\t\t\t\t' / ', _('Options:'), ' ',\n\t\t\t\tE('code', Object.keys(pubkey.options).sort().join(', '))\n\t\t\t]) : '',\n\t\t\tE('br'), E('code', pubkey.fprint)\n\t\t])\n\t]);\n}\n\nfunction renderKeys(keys) {\n\tvar list = document.querySelector('.cbi-dynlist');\n\n\twhile (!matchesElem(list.firstElementChild, '.add-item'))\n\t\tlist.removeChild(list.firstElementChild);\n\n\tkeys.forEach(function(key) {\n\t\tvar pubkey = SSHPubkeyDecoder.decode(key);\n\t\tif (pubkey)\n\t\t\tlist.insertBefore(renderKeyItem(pubkey), list.lastElementChild);\n\t});\n\n\tif (list.firstElementChild === list.lastElementChild)\n\t\tlist.insertBefore(E('p', _('No public keys present yet.')), list.lastElementChild);\n}\n\nfunction saveKeys(keys) {\n\treturn fs.write('/etc/dropbear/authorized_keys', keys.join('\\n') + '\\n', 384 /* 0600 */)\n\t\t.then(renderKeys.bind(this, keys))\n\t\t.catch(function(e) { ui.addNotification(null, E('p', e.message)) })\n\t\t.finally(ui.hideModal);\n}\n\nfunction addKey(ev) {\n\tvar list = findParent(ev.target, '.cbi-dynlist'),\n\t    input = list.querySelector('input[type=\"text\"]'),\n\t    key = input.value.trim(),\n\t    pubkey = SSHPubkeyDecoder.decode(key),\n\t    keys = [];\n\n\tif (!key.length)\n\t\treturn;\n\n\tlist.querySelectorAll('.item').forEach(function(item) {\n\t\tkeys.push(item.getAttribute('data-key'));\n\t});\n\n\tif (keys.indexOf(key) !== -1) {\n\t\tui.showModal(_('Add key'), [\n\t\t\tE('div', { class: 'alert-message warning' }, _('The given SSH public key has already been added.')),\n\t\t\tE('div', { class: 'right' }, E('div', { class: 'btn', click: L.hideModal }, _('Close')))\n\t\t]);\n\t}\n\telse if (!pubkey) {\n\t\tui.showModal(_('Add key'), [\n\t\t\tE('div', { class: 'alert-message warning' }, _('The given SSH public key is invalid. Please supply proper public RSA, ED25519 or ECDSA keys.')),\n\t\t\tE('div', { class: 'right' }, E('div', { class: 'btn', click: L.hideModal }, _('Close')))\n\t\t]);\n\t}\n\telse {\n\t\tkeys.push(key);\n\t\tinput.value = '';\n\n\t\treturn saveKeys(keys).then(function() {\n\t\t\tvar added = list.querySelector('[data-key=\"%s\"]'.format(key.replace(/[\"\\\\]/g, '\\\\$&')));\n\t\t\tif (added)\n\t\t\t\tadded.classList.add('flash');\n\t\t});\n\t}\n}\n\nfunction removeKey(ev) {\n\tvar list = findParent(ev.target, '.cbi-dynlist'),\n\t    delkey = ev.target.getAttribute('data-key'),\n\t    keys = [];\n\n\tlist.querySelectorAll('.item').forEach(function(item) {\n\t\tvar key = item.getAttribute('data-key');\n\t\tif (key !== delkey)\n\t\t\tkeys.push(key);\n\t});\n\n\tL.showModal(_('Delete key'), [\n\t\tE('div', _('Do you really want to delete the following SSH key?')),\n\t\tE('pre', delkey),\n\t\tE('div', { class: 'right' }, [\n\t\t\tE('div', { class: 'btn', click: L.hideModal }, _('Cancel')),\n\t\t\t' ',\n\t\t\tE('div', { class: 'btn danger', click: ui.createHandlerFn(this, saveKeys, keys) }, _('Delete key')),\n\t\t])\n\t]);\n}\n\nfunction dragKey(ev) {\n\tev.stopPropagation();\n\tev.preventDefault();\n\tev.dataTransfer.dropEffect = 'copy';\n}\n\nfunction dropKey(ev) {\n\tvar file = ev.dataTransfer.files[0],\n\t    input = ev.currentTarget.querySelector('input[type=\"text\"]'),\n\t    reader = new FileReader();\n\n\tif (file) {\n\t\treader.onload = function(rev) {\n\t\t\tinput.value = rev.target.result.trim();\n\t\t\taddKey(ev);\n\t\t\tinput.value = '';\n\t\t};\n\n\t\treader.readAsText(file);\n\t}\n\n\tev.stopPropagation();\n\tev.preventDefault();\n}\n\nfunction handleWindowDragDropIgnore(ev) {\n\tev.preventDefault()\n}\n\nreturn view.extend({\n\tload: function() {\n\t\treturn fs.lines('/etc/dropbear/authorized_keys').then(function(lines) {\n\t\t\treturn lines.map(function(line) {\n\t\t\t\treturn SSHPubkeyDecoder.decode(line);\n\t\t\t}).filter(function(line) {\n\t\t\t\treturn line != null;\n\t\t\t});\n\t\t});\n\t},\n\n\trender: function(keys) {\n\t\tvar list = E('div', {\n\t\t\t'class': 'cbi-dynlist',\n\t\t\t'dragover': isReadonlyView ? null : dragKey,\n\t\t\t'drop': isReadonlyView ? null : dropKey\n\t\t}, [\n\t\t\tE('div', { 'class': 'add-item' }, [\n\t\t\t\tE('input', {\n\t\t\t\t\t'class': 'cbi-input-text',\n\t\t\t\t\t'type': 'text',\n\t\t\t\t\t'placeholder': _('Paste or drag SSH key file\u2026') ,\n\t\t\t\t\t'keydown': function(ev) { if (ev.keyCode === 13) addKey(ev) },\n\t\t\t\t\t'disabled': isReadonlyView\n\t\t\t\t}),\n\t\t\t\tE('button', {\n\t\t\t\t\t'class': 'cbi-button',\n\t\t\t\t\t'click': ui.createHandlerFn(this, addKey),\n\t\t\t\t\t'disabled': isReadonlyView\n\t\t\t\t}, _('Add key'))\n\t\t\t])\n\t\t]);\n\n\t\tkeys.forEach(L.bind(function(pubkey) {\n\t\t\tlist.insertBefore(renderKeyItem(pubkey), list.lastElementChild);\n\t\t}, this));\n\n\t\tif (list.firstElementChild === list.lastElementChild)\n\t\t\tlist.insertBefore(E('p', _('No public keys present yet.')), list.lastElementChild);\n\n\t\twindow.addEventListener('dragover', handleWindowDragDropIgnore);\n\t\twindow.addEventListener('drop', handleWindowDragDropIgnore);\n\n\t\treturn E('div', {}, [\n\t\t\tE('h2', _('SSH-Keys')),\n\t\t\tE('div', { 'class': 'cbi-section-descr' }, _('Public keys allow for the passwordless SSH logins with a higher security compared to the use of plain passwords. In order to upload a new key to the device, paste an OpenSSH compatible public key line or drag a <code>.pub</code> file into the input field.')),\n\t\t\tE('div', { 'class': 'cbi-section-node' }, list)\n\t\t]);\n\t},\n\n\thandleSaveApply: null,\n\thandleSave: null,\n\thandleReset: null\n});\n"], "fixing_code": ["'use strict';\n'require baseclass';\n'require view';\n'require fs';\n'require ui';\n\nvar isReadonlyView = !L.hasViewPermission() || null;\n\nvar SSHPubkeyDecoder = baseclass.singleton({\n\tlengthDecode: function(s, off)\n\t{\n\t\tvar l = (s.charCodeAt(off++) << 24) |\n\t\t\t\t(s.charCodeAt(off++) << 16) |\n\t\t\t\t(s.charCodeAt(off++) <<  8) |\n\t\t\t\t s.charCodeAt(off++);\n\n\t\tif (l < 0 || (off + l) > s.length)\n\t\t\treturn -1;\n\n\t\treturn l;\n\t},\n\n\tdecode: function(s)\n\t{\n\t\tvar parts = s.trim().match(/^((?:(?:^|,)[^ =,]+(?:=(?:[^ \",]+|\"(?:[^\"\\\\]|\\\\.)*\"))?)+ +)?(ssh-dss|ssh-rsa|ssh-ed25519|ecdsa-sha2-nistp[0-9]+|sk-ecdsa-sha2-nistp256@openssh\\.com|sk-ssh-ed25519@openssh\\.com) +([^ ]+)( +.*)?$/);\n\n\t\tif (!parts)\n\t\t\treturn null;\n\n\t\tvar key = null;\n\t\ttry { key = atob(parts[3]); } catch(e) {}\n\t\tif (!key)\n\t\t\treturn null;\n\n\t\tvar off, len;\n\n\t\toff = 0;\n\t\tlen = this.lengthDecode(key, off);\n\n\t\tif (len <= 0)\n\t\t\treturn null;\n\n\t\tvar type = key.substr(off + 4, len);\n\t\tif (type !== parts[2])\n\t\t\treturn null;\n\n\t\toff += 4 + len;\n\n\t\tvar len1 = off < key.length ? this.lengthDecode(key, off) : 0;\n\t\tif (len1 <= 0)\n\t\t\treturn null;\n\n\t\tvar curve = null;\n\t\tif (type.indexOf('ecdsa-sha2-') === 0) {\n\t\t\tcurve = key.substr(off + 4, len1);\n\n\t\t\tif (!len1 || type.substr(11) !== curve)\n\t\t\t\treturn null;\n\n\t\t\ttype = 'ecdsa-sha2';\n\t\t\tcurve = curve.replace(/^nistp(\\d+)$/, 'NIST P-$1');\n\t\t}\n\n\t\toff += 4 + len1;\n\n\t\tvar len2 = off < key.length ? this.lengthDecode(key, off) : 0;\n\t\tif (len2 < 0)\n\t\t\treturn null;\n\n\t\tif (len1 & 1)\n\t\t\tlen1--;\n\n\t\tif (len2 & 1)\n\t\t\tlen2--;\n\n\t\tvar comment = (parts[4] || '').trim(),\n\t\t    fprint = parts[3].length > 68 ? parts[3].substr(0, 33) + '\u2026' + parts[3].substr(-34) : parts[3];\n\n\t\tvar options = null;\n\t\t(parts[1] || '').trim().replace(/(?:^|,)([^ =,]+)(?:=(?:([^ \",]+)|\"((?:[^\"\\\\]|\\\\.)*)\"))?/g, function(m, k, p, q) {\n\t\t\toptions = options || {};\n\n\t\t\tif (options.hasOwnProperty(k))\n\t\t\t\toptions[k] += ',' + (q || p || true);\n\t\t\telse\n\t\t\t\toptions[k] = (q || p || true);\n\t\t});\n\n\t\tswitch (type)\n\t\t{\n\t\tcase 'ssh-rsa':\n\t\t\treturn { type: 'RSA', bits: len2 * 8, comment: comment, options: options, fprint: fprint, src: s };\n\n\t\tcase 'ssh-dss':\n\t\t\treturn { type: 'DSA', bits: len1 * 8, comment: comment, options: options, fprint: fprint, src: s };\n\n\t\tcase 'ssh-ed25519':\n\t\t\treturn { type: 'EdDSA', curve: 'Curve25519', comment: comment, options: options, fprint: fprint, src: s };\n\n\t\tcase 'ecdsa-sha2':\n\t\t\treturn { type: 'ECDSA', curve: curve, comment: comment, options: options, fprint: fprint, src: s };\n\t\t\n\t\tcase 'sk-ecdsa-sha2-nistp256@openssh.com':\n\t\t\treturn { type: 'ECDSA-SK', curve: 'NIST P-256', comment: comment, options: options, fprint: fprint, src: s };\n\t\t\n\t\tcase 'sk-ssh-ed25519@openssh.com':\n\t\t\treturn { type: 'EdDSA-SK', curve: 'Curve25519', comment: comment, options: options, fprint: fprint, src: s };\n\n\t\tdefault:\n\t\t\treturn null;\n\t\t}\n\t}\n});\n\nfunction renderKeyItem(pubkey) {\n\treturn E('div', {\n\t\tclass: 'item',\n\t\tclick: isReadonlyView ? null : removeKey,\n\t\t'data-key': pubkey.src\n\t}, [\n\t\tE('strong', [ pubkey.comment || _('Unnamed key') ]), E('br'),\n\t\tE('small', [\n\t\t\t'%s, %s'.format(pubkey.type, pubkey.curve || _('%d Bit').format(pubkey.bits)),\n\t\t\tpubkey.options ? E([], [\n\t\t\t\t' / ', _('Options:'), ' ',\n\t\t\t\tE('code', Object.keys(pubkey.options).sort().join(', '))\n\t\t\t]) : '',\n\t\t\tE('br'), E('code', pubkey.fprint)\n\t\t])\n\t]);\n}\n\nfunction renderKeys(keys) {\n\tvar list = document.querySelector('.cbi-dynlist');\n\n\twhile (!matchesElem(list.firstElementChild, '.add-item'))\n\t\tlist.removeChild(list.firstElementChild);\n\n\tkeys.forEach(function(key) {\n\t\tvar pubkey = SSHPubkeyDecoder.decode(key);\n\t\tif (pubkey)\n\t\t\tlist.insertBefore(renderKeyItem(pubkey), list.lastElementChild);\n\t});\n\n\tif (list.firstElementChild === list.lastElementChild)\n\t\tlist.insertBefore(E('p', _('No public keys present yet.')), list.lastElementChild);\n}\n\nfunction saveKeys(keys) {\n\treturn fs.write('/etc/dropbear/authorized_keys', keys.join('\\n') + '\\n', 384 /* 0600 */)\n\t\t.then(renderKeys.bind(this, keys))\n\t\t.catch(function(e) { ui.addNotification(null, E('p', e.message)) })\n\t\t.finally(ui.hideModal);\n}\n\nfunction addKey(ev) {\n\tvar list = findParent(ev.target, '.cbi-dynlist'),\n\t    input = list.querySelector('input[type=\"text\"]'),\n\t    key = input.value.trim(),\n\t    pubkey = SSHPubkeyDecoder.decode(key),\n\t    keys = [];\n\n\tif (!key.length)\n\t\treturn;\n\n\tlist.querySelectorAll('.item').forEach(function(item) {\n\t\tkeys.push(item.getAttribute('data-key'));\n\t});\n\n\tif (keys.indexOf(key) !== -1) {\n\t\tui.showModal(_('Add key'), [\n\t\t\tE('div', { class: 'alert-message warning' }, _('The given SSH public key has already been added.')),\n\t\t\tE('div', { class: 'right' }, E('div', { class: 'btn', click: L.hideModal }, _('Close')))\n\t\t]);\n\t}\n\telse if (!pubkey) {\n\t\tui.showModal(_('Add key'), [\n\t\t\tE('div', { class: 'alert-message warning' }, _('The given SSH public key is invalid. Please supply proper public RSA, ED25519 or ECDSA keys.')),\n\t\t\tE('div', { class: 'right' }, E('div', { class: 'btn', click: L.hideModal }, _('Close')))\n\t\t]);\n\t}\n\telse {\n\t\tkeys.push(key);\n\t\tinput.value = '';\n\n\t\treturn saveKeys(keys).then(function() {\n\t\t\tvar added = list.querySelector('[data-key=\"%s\"]'.format(key.replace(/[\"\\\\]/g, '\\\\$&')));\n\t\t\tif (added)\n\t\t\t\tadded.classList.add('flash');\n\t\t});\n\t}\n}\n\nfunction removeKey(ev) {\n\tvar list = findParent(ev.target, '.cbi-dynlist'),\n\t    delkey = ev.target.getAttribute('data-key'),\n\t    keys = [];\n\n\tlist.querySelectorAll('.item').forEach(function(item) {\n\t\tvar key = item.getAttribute('data-key');\n\t\tif (key !== delkey)\n\t\t\tkeys.push(key);\n\t});\n\n\tL.showModal(_('Delete key'), [\n\t\tE('div', _('Do you really want to delete the following SSH key?')),\n\t\tE('pre', [ delkey ]),\n\t\tE('div', { class: 'right' }, [\n\t\t\tE('div', { class: 'btn', click: L.hideModal }, _('Cancel')),\n\t\t\t' ',\n\t\t\tE('div', { class: 'btn danger', click: ui.createHandlerFn(this, saveKeys, keys) }, _('Delete key')),\n\t\t])\n\t]);\n}\n\nfunction dragKey(ev) {\n\tev.stopPropagation();\n\tev.preventDefault();\n\tev.dataTransfer.dropEffect = 'copy';\n}\n\nfunction dropKey(ev) {\n\tvar file = ev.dataTransfer.files[0],\n\t    input = ev.currentTarget.querySelector('input[type=\"text\"]'),\n\t    reader = new FileReader();\n\n\tif (file) {\n\t\treader.onload = function(rev) {\n\t\t\tinput.value = rev.target.result.trim();\n\t\t\taddKey(ev);\n\t\t\tinput.value = '';\n\t\t};\n\n\t\treader.readAsText(file);\n\t}\n\n\tev.stopPropagation();\n\tev.preventDefault();\n}\n\nfunction handleWindowDragDropIgnore(ev) {\n\tev.preventDefault()\n}\n\nreturn view.extend({\n\tload: function() {\n\t\treturn fs.lines('/etc/dropbear/authorized_keys').then(function(lines) {\n\t\t\treturn lines.map(function(line) {\n\t\t\t\treturn SSHPubkeyDecoder.decode(line);\n\t\t\t}).filter(function(line) {\n\t\t\t\treturn line != null;\n\t\t\t});\n\t\t});\n\t},\n\n\trender: function(keys) {\n\t\tvar list = E('div', {\n\t\t\t'class': 'cbi-dynlist',\n\t\t\t'dragover': isReadonlyView ? null : dragKey,\n\t\t\t'drop': isReadonlyView ? null : dropKey\n\t\t}, [\n\t\t\tE('div', { 'class': 'add-item' }, [\n\t\t\t\tE('input', {\n\t\t\t\t\t'class': 'cbi-input-text',\n\t\t\t\t\t'type': 'text',\n\t\t\t\t\t'placeholder': _('Paste or drag SSH key file\u2026') ,\n\t\t\t\t\t'keydown': function(ev) { if (ev.keyCode === 13) addKey(ev) },\n\t\t\t\t\t'disabled': isReadonlyView\n\t\t\t\t}),\n\t\t\t\tE('button', {\n\t\t\t\t\t'class': 'cbi-button',\n\t\t\t\t\t'click': ui.createHandlerFn(this, addKey),\n\t\t\t\t\t'disabled': isReadonlyView\n\t\t\t\t}, _('Add key'))\n\t\t\t])\n\t\t]);\n\n\t\tkeys.forEach(L.bind(function(pubkey) {\n\t\t\tlist.insertBefore(renderKeyItem(pubkey), list.lastElementChild);\n\t\t}, this));\n\n\t\tif (list.firstElementChild === list.lastElementChild)\n\t\t\tlist.insertBefore(E('p', _('No public keys present yet.')), list.lastElementChild);\n\n\t\twindow.addEventListener('dragover', handleWindowDragDropIgnore);\n\t\twindow.addEventListener('drop', handleWindowDragDropIgnore);\n\n\t\treturn E('div', {}, [\n\t\t\tE('h2', _('SSH-Keys')),\n\t\t\tE('div', { 'class': 'cbi-section-descr' }, _('Public keys allow for the passwordless SSH logins with a higher security compared to the use of plain passwords. In order to upload a new key to the device, paste an OpenSSH compatible public key line or drag a <code>.pub</code> file into the input field.')),\n\t\t\tE('div', { 'class': 'cbi-section-node' }, list)\n\t\t]);\n\t},\n\n\thandleSaveApply: null,\n\thandleSave: null,\n\thandleReset: null\n});\n"], "filenames": ["modules/luci-mod-system/htdocs/luci-static/resources/view/system/sshkeys.js"], "buggy_code_start_loc": [207], "buggy_code_end_loc": [208], "fixing_code_start_loc": [207], "fixing_code_end_loc": [208], "type": "CWE-79", "message": "LuCI openwrt-22.03 branch git-22.361.69894-438c598 was discovered to contain a stored cross-site scripting (XSS) vulnerability via the component /system/sshkeys.js.", "other": {"cve": {"id": "CVE-2023-24182", "sourceIdentifier": "cve@mitre.org", "published": "2023-04-11T01:15:07.030", "lastModified": "2023-05-24T15:01:02.763", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LuCI openwrt-22.03 branch git-22.361.69894-438c598 was discovered to contain a stored cross-site scripting (XSS) vulnerability via the component /system/sshkeys.js."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:openwrt:openwrt:22.03.3:*:*:*:*:*:*:*", "matchCriteriaId": "19481FF4-3DF2-4BC0-9D38-619C80F8C1E6"}]}]}], "references": [{"url": "https://github.com/ABB-EL/external-vulnerability-disclosures/security/advisories/GHSA-7vqh-2r8q-rjg2", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/openwrt/luci/commit/0186d7eae0e123a409e9919a83fdfecc7945c984", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/openwrt/luci/commit/588381e2111079265cc3b20af33507052f1b58cb", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/openwrt/luci/commit/aa7938d4cb3a3f889dead894ea19334ad07ade51", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/openwrt/luci/commit/0186d7eae0e123a409e9919a83fdfecc7945c984"}}