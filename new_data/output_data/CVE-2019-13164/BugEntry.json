{"buggy_code": ["/*\n * QEMU Bridge Helper\n *\n * Copyright IBM, Corp. 2011\n *\n * Authors:\n * Anthony Liguori   <aliguori@us.ibm.com>\n * Richa Marwaha     <rmarwah@linux.vnet.ibm.com>\n * Corey Bryant      <coreyb@linux.vnet.ibm.com>\n *\n * This work is licensed under the terms of the GNU GPL, version 2.  See\n * the COPYING file in the top-level directory.\n *\n */\n\n#include \"qemu/osdep.h\"\n\n\n#include <sys/ioctl.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <sys/prctl.h>\n\n#include <net/if.h>\n\n#include <linux/sockios.h>\n\n#ifndef SIOCBRADDIF\n#include <linux/if_bridge.h>\n#endif\n\n#include \"qemu/queue.h\"\n\n#include \"net/tap-linux.h\"\n\n#ifdef CONFIG_LIBCAP\n#include <cap-ng.h>\n#endif\n\n#define DEFAULT_ACL_FILE CONFIG_QEMU_CONFDIR \"/bridge.conf\"\n\nenum {\n    ACL_ALLOW = 0,\n    ACL_ALLOW_ALL,\n    ACL_DENY,\n    ACL_DENY_ALL,\n};\n\ntypedef struct ACLRule {\n    int type;\n    char iface[IFNAMSIZ];\n    QSIMPLEQ_ENTRY(ACLRule) entry;\n} ACLRule;\n\ntypedef QSIMPLEQ_HEAD(ACLList, ACLRule) ACLList;\n\nstatic void usage(void)\n{\n    fprintf(stderr,\n            \"Usage: qemu-bridge-helper [--use-vnet] --br=bridge --fd=unixfd\\n\");\n}\n\nstatic int parse_acl_file(const char *filename, ACLList *acl_list)\n{\n    FILE *f;\n    char line[4096];\n    ACLRule *acl_rule;\n\n    f = fopen(filename, \"r\");\n    if (f == NULL) {\n        return -1;\n    }\n\n    while (fgets(line, sizeof(line), f) != NULL) {\n        char *ptr = line;\n        char *cmd, *arg, *argend;\n\n        while (isspace(*ptr)) {\n            ptr++;\n        }\n\n        /* skip comments and empty lines */\n        if (*ptr == '#' || *ptr == 0) {\n            continue;\n        }\n\n        cmd = ptr;\n        arg = strchr(cmd, ' ');\n        if (arg == NULL) {\n            arg = strchr(cmd, '\\t');\n        }\n\n        if (arg == NULL) {\n            fprintf(stderr, \"Invalid config line:\\n  %s\\n\", line);\n            fclose(f);\n            errno = EINVAL;\n            return -1;\n        }\n\n        *arg = 0;\n        arg++;\n        while (isspace(*arg)) {\n            arg++;\n        }\n\n        argend = arg + strlen(arg);\n        while (arg != argend && isspace(*(argend - 1))) {\n            argend--;\n        }\n        *argend = 0;\n\n        if (strcmp(cmd, \"deny\") == 0) {\n            acl_rule = g_malloc(sizeof(*acl_rule));\n            if (strcmp(arg, \"all\") == 0) {\n                acl_rule->type = ACL_DENY_ALL;\n            } else {\n                acl_rule->type = ACL_DENY;\n                snprintf(acl_rule->iface, IFNAMSIZ, \"%s\", arg);\n            }\n            QSIMPLEQ_INSERT_TAIL(acl_list, acl_rule, entry);\n        } else if (strcmp(cmd, \"allow\") == 0) {\n            acl_rule = g_malloc(sizeof(*acl_rule));\n            if (strcmp(arg, \"all\") == 0) {\n                acl_rule->type = ACL_ALLOW_ALL;\n            } else {\n                acl_rule->type = ACL_ALLOW;\n                snprintf(acl_rule->iface, IFNAMSIZ, \"%s\", arg);\n            }\n            QSIMPLEQ_INSERT_TAIL(acl_list, acl_rule, entry);\n        } else if (strcmp(cmd, \"include\") == 0) {\n            /* ignore errors */\n            parse_acl_file(arg, acl_list);\n        } else {\n            fprintf(stderr, \"Unknown command `%s'\\n\", cmd);\n            fclose(f);\n            errno = EINVAL;\n            return -1;\n        }\n    }\n\n    fclose(f);\n\n    return 0;\n}\n\nstatic bool has_vnet_hdr(int fd)\n{\n    unsigned int features = 0;\n\n    if (ioctl(fd, TUNGETFEATURES, &features) == -1) {\n        return false;\n    }\n\n    if (!(features & IFF_VNET_HDR)) {\n        return false;\n    }\n\n    return true;\n}\n\nstatic void prep_ifreq(struct ifreq *ifr, const char *ifname)\n{\n    memset(ifr, 0, sizeof(*ifr));\n    snprintf(ifr->ifr_name, IFNAMSIZ, \"%s\", ifname);\n}\n\nstatic int send_fd(int c, int fd)\n{\n    char msgbuf[CMSG_SPACE(sizeof(fd))];\n    struct msghdr msg = {\n        .msg_control = msgbuf,\n        .msg_controllen = sizeof(msgbuf),\n    };\n    struct cmsghdr *cmsg;\n    struct iovec iov;\n    char req[1] = { 0x00 };\n\n    cmsg = CMSG_FIRSTHDR(&msg);\n    cmsg->cmsg_level = SOL_SOCKET;\n    cmsg->cmsg_type = SCM_RIGHTS;\n    cmsg->cmsg_len = CMSG_LEN(sizeof(fd));\n    msg.msg_controllen = cmsg->cmsg_len;\n\n    iov.iov_base = req;\n    iov.iov_len = sizeof(req);\n\n    msg.msg_iov = &iov;\n    msg.msg_iovlen = 1;\n    memcpy(CMSG_DATA(cmsg), &fd, sizeof(fd));\n\n    return sendmsg(c, &msg, 0);\n}\n\n#ifdef CONFIG_LIBCAP\nstatic int drop_privileges(void)\n{\n    /* clear all capabilities */\n    capng_clear(CAPNG_SELECT_BOTH);\n\n    if (capng_update(CAPNG_ADD, CAPNG_EFFECTIVE | CAPNG_PERMITTED,\n                     CAP_NET_ADMIN) < 0) {\n        return -1;\n    }\n\n    /* change to calling user's real uid and gid, retaining supplemental\n     * groups and CAP_NET_ADMIN */\n    if (capng_change_id(getuid(), getgid(), CAPNG_CLEAR_BOUNDING)) {\n        return -1;\n    }\n\n    return 0;\n}\n#endif\n\nint main(int argc, char **argv)\n{\n    struct ifreq ifr;\n#ifndef SIOCBRADDIF\n    unsigned long ifargs[4];\n#endif\n    int ifindex;\n    int fd = -1, ctlfd = -1, unixfd = -1;\n    int use_vnet = 0;\n    int mtu;\n    const char *bridge = NULL;\n    char iface[IFNAMSIZ];\n    int index;\n    ACLRule *acl_rule;\n    ACLList acl_list;\n    int access_allowed, access_denied;\n    int ret = EXIT_SUCCESS;\n\n#ifdef CONFIG_LIBCAP\n    /* if we're run from an suid binary, immediately drop privileges preserving\n     * cap_net_admin */\n    if (geteuid() == 0 && getuid() != geteuid()) {\n        if (drop_privileges() == -1) {\n            fprintf(stderr, \"failed to drop privileges\\n\");\n            return 1;\n        }\n    }\n#endif\n\n    /* parse arguments */\n    for (index = 1; index < argc; index++) {\n        if (strcmp(argv[index], \"--use-vnet\") == 0) {\n            use_vnet = 1;\n        } else if (strncmp(argv[index], \"--br=\", 5) == 0) {\n            bridge = &argv[index][5];\n        } else if (strncmp(argv[index], \"--fd=\", 5) == 0) {\n            unixfd = atoi(&argv[index][5]);\n        } else {\n            usage();\n            return EXIT_FAILURE;\n        }\n    }\n\n    if (bridge == NULL || unixfd == -1) {\n        usage();\n        return EXIT_FAILURE;\n    }\n\n    /* parse default acl file */\n    QSIMPLEQ_INIT(&acl_list);\n    if (parse_acl_file(DEFAULT_ACL_FILE, &acl_list) == -1) {\n        fprintf(stderr, \"failed to parse default acl file `%s'\\n\",\n                DEFAULT_ACL_FILE);\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* validate bridge against acl -- default policy is to deny\n     * according acl policy if we have a deny and allow both\n     * then deny should always win over allow\n     */\n    access_allowed = 0;\n    access_denied = 0;\n    QSIMPLEQ_FOREACH(acl_rule, &acl_list, entry) {\n        switch (acl_rule->type) {\n        case ACL_ALLOW_ALL:\n            access_allowed = 1;\n            break;\n        case ACL_ALLOW:\n            if (strcmp(bridge, acl_rule->iface) == 0) {\n                access_allowed = 1;\n            }\n            break;\n        case ACL_DENY_ALL:\n            access_denied = 1;\n            break;\n        case ACL_DENY:\n            if (strcmp(bridge, acl_rule->iface) == 0) {\n                access_denied = 1;\n            }\n            break;\n        }\n    }\n\n    if ((access_allowed == 0) || (access_denied == 1)) {\n        fprintf(stderr, \"access denied by acl file\\n\");\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* open a socket to use to control the network interfaces */\n    ctlfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (ctlfd == -1) {\n        fprintf(stderr, \"failed to open control socket: %s\\n\", strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* open the tap device */\n    fd = open(\"/dev/net/tun\", O_RDWR);\n    if (fd == -1) {\n        fprintf(stderr, \"failed to open /dev/net/tun: %s\\n\", strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* request a tap device, disable PI, and add vnet header support if\n     * requested and it's available. */\n    prep_ifreq(&ifr, \"tap%d\");\n    ifr.ifr_flags = IFF_TAP|IFF_NO_PI;\n    if (use_vnet && has_vnet_hdr(fd)) {\n        ifr.ifr_flags |= IFF_VNET_HDR;\n    }\n\n    if (ioctl(fd, TUNSETIFF, &ifr) == -1) {\n        fprintf(stderr, \"failed to create tun device: %s\\n\", strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* save tap device name */\n    snprintf(iface, sizeof(iface), \"%s\", ifr.ifr_name);\n\n    /* get the mtu of the bridge */\n    prep_ifreq(&ifr, bridge);\n    if (ioctl(ctlfd, SIOCGIFMTU, &ifr) == -1) {\n        fprintf(stderr, \"failed to get mtu of bridge `%s': %s\\n\",\n                bridge, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* save mtu */\n    mtu = ifr.ifr_mtu;\n\n    /* set the mtu of the interface based on the bridge */\n    prep_ifreq(&ifr, iface);\n    ifr.ifr_mtu = mtu;\n    if (ioctl(ctlfd, SIOCSIFMTU, &ifr) == -1) {\n        fprintf(stderr, \"failed to set mtu of device `%s' to %d: %s\\n\",\n                iface, mtu, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* Linux uses the lowest enslaved MAC address as the MAC address of\n     * the bridge.  Set MAC address to a high value so that it doesn't\n     * affect the MAC address of the bridge.\n     */\n    if (ioctl(ctlfd, SIOCGIFHWADDR, &ifr) < 0) {\n        fprintf(stderr, \"failed to get MAC address of device `%s': %s\\n\",\n                iface, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n    ifr.ifr_hwaddr.sa_data[0] = 0xFE;\n    if (ioctl(ctlfd, SIOCSIFHWADDR, &ifr) < 0) {\n        fprintf(stderr, \"failed to set MAC address of device `%s': %s\\n\",\n                iface, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* add the interface to the bridge */\n    prep_ifreq(&ifr, bridge);\n    ifindex = if_nametoindex(iface);\n#ifndef SIOCBRADDIF\n    ifargs[0] = BRCTL_ADD_IF;\n    ifargs[1] = ifindex;\n    ifargs[2] = 0;\n    ifargs[3] = 0;\n    ifr.ifr_data = (void *)ifargs;\n    ret = ioctl(ctlfd, SIOCDEVPRIVATE, &ifr);\n#else\n    ifr.ifr_ifindex = ifindex;\n    ret = ioctl(ctlfd, SIOCBRADDIF, &ifr);\n#endif\n    if (ret == -1) {\n        fprintf(stderr, \"failed to add interface `%s' to bridge `%s': %s\\n\",\n                iface, bridge, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* bring the interface up */\n    prep_ifreq(&ifr, iface);\n    if (ioctl(ctlfd, SIOCGIFFLAGS, &ifr) == -1) {\n        fprintf(stderr, \"failed to get interface flags for `%s': %s\\n\",\n                iface, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    ifr.ifr_flags |= IFF_UP;\n    if (ioctl(ctlfd, SIOCSIFFLAGS, &ifr) == -1) {\n        fprintf(stderr, \"failed to bring up interface `%s': %s\\n\",\n                iface, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* write fd to the domain socket */\n    if (send_fd(unixfd, fd) == -1) {\n        fprintf(stderr, \"failed to write fd to unix socket: %s\\n\",\n                strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* ... */\n\n    /* profit! */\n\ncleanup:\n    if (fd >= 0) {\n        close(fd);\n    }\n    if (ctlfd >= 0) {\n        close(ctlfd);\n    }\n    while ((acl_rule = QSIMPLEQ_FIRST(&acl_list)) != NULL) {\n        QSIMPLEQ_REMOVE_HEAD(&acl_list, entry);\n        g_free(acl_rule);\n    }\n\n    return ret;\n}\n"], "fixing_code": ["/*\n * QEMU Bridge Helper\n *\n * Copyright IBM, Corp. 2011\n *\n * Authors:\n * Anthony Liguori   <aliguori@us.ibm.com>\n * Richa Marwaha     <rmarwah@linux.vnet.ibm.com>\n * Corey Bryant      <coreyb@linux.vnet.ibm.com>\n *\n * This work is licensed under the terms of the GNU GPL, version 2.  See\n * the COPYING file in the top-level directory.\n *\n */\n\n#include \"qemu/osdep.h\"\n\n\n#include <sys/ioctl.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <sys/prctl.h>\n\n#include <net/if.h>\n\n#include <linux/sockios.h>\n\n#ifndef SIOCBRADDIF\n#include <linux/if_bridge.h>\n#endif\n\n#include \"qemu/queue.h\"\n\n#include \"net/tap-linux.h\"\n\n#ifdef CONFIG_LIBCAP\n#include <cap-ng.h>\n#endif\n\n#define DEFAULT_ACL_FILE CONFIG_QEMU_CONFDIR \"/bridge.conf\"\n\nenum {\n    ACL_ALLOW = 0,\n    ACL_ALLOW_ALL,\n    ACL_DENY,\n    ACL_DENY_ALL,\n};\n\ntypedef struct ACLRule {\n    int type;\n    char iface[IFNAMSIZ];\n    QSIMPLEQ_ENTRY(ACLRule) entry;\n} ACLRule;\n\ntypedef QSIMPLEQ_HEAD(ACLList, ACLRule) ACLList;\n\nstatic void usage(void)\n{\n    fprintf(stderr,\n            \"Usage: qemu-bridge-helper [--use-vnet] --br=bridge --fd=unixfd\\n\");\n}\n\nstatic int parse_acl_file(const char *filename, ACLList *acl_list)\n{\n    FILE *f;\n    char line[4096];\n    ACLRule *acl_rule;\n\n    f = fopen(filename, \"r\");\n    if (f == NULL) {\n        return -1;\n    }\n\n    while (fgets(line, sizeof(line), f) != NULL) {\n        char *ptr = line;\n        char *cmd, *arg, *argend;\n\n        while (isspace(*ptr)) {\n            ptr++;\n        }\n\n        /* skip comments and empty lines */\n        if (*ptr == '#' || *ptr == 0) {\n            continue;\n        }\n\n        cmd = ptr;\n        arg = strchr(cmd, ' ');\n        if (arg == NULL) {\n            arg = strchr(cmd, '\\t');\n        }\n\n        if (arg == NULL) {\n            fprintf(stderr, \"Invalid config line:\\n  %s\\n\", line);\n            fclose(f);\n            errno = EINVAL;\n            return -1;\n        }\n\n        *arg = 0;\n        arg++;\n        while (isspace(*arg)) {\n            arg++;\n        }\n\n        argend = arg + strlen(arg);\n        while (arg != argend && isspace(*(argend - 1))) {\n            argend--;\n        }\n        *argend = 0;\n\n        if (!g_str_equal(cmd, \"include\") && strlen(arg) >= IFNAMSIZ) {\n            fprintf(stderr, \"name `%s' too long: %zu\\n\", arg, strlen(arg));\n            fclose(f);\n            errno = EINVAL;\n            return -1;\n        }\n\n        if (strcmp(cmd, \"deny\") == 0) {\n            acl_rule = g_malloc(sizeof(*acl_rule));\n            if (strcmp(arg, \"all\") == 0) {\n                acl_rule->type = ACL_DENY_ALL;\n            } else {\n                acl_rule->type = ACL_DENY;\n                snprintf(acl_rule->iface, IFNAMSIZ, \"%s\", arg);\n            }\n            QSIMPLEQ_INSERT_TAIL(acl_list, acl_rule, entry);\n        } else if (strcmp(cmd, \"allow\") == 0) {\n            acl_rule = g_malloc(sizeof(*acl_rule));\n            if (strcmp(arg, \"all\") == 0) {\n                acl_rule->type = ACL_ALLOW_ALL;\n            } else {\n                acl_rule->type = ACL_ALLOW;\n                snprintf(acl_rule->iface, IFNAMSIZ, \"%s\", arg);\n            }\n            QSIMPLEQ_INSERT_TAIL(acl_list, acl_rule, entry);\n        } else if (strcmp(cmd, \"include\") == 0) {\n            /* ignore errors */\n            parse_acl_file(arg, acl_list);\n        } else {\n            fprintf(stderr, \"Unknown command `%s'\\n\", cmd);\n            fclose(f);\n            errno = EINVAL;\n            return -1;\n        }\n    }\n\n    fclose(f);\n\n    return 0;\n}\n\nstatic bool has_vnet_hdr(int fd)\n{\n    unsigned int features = 0;\n\n    if (ioctl(fd, TUNGETFEATURES, &features) == -1) {\n        return false;\n    }\n\n    if (!(features & IFF_VNET_HDR)) {\n        return false;\n    }\n\n    return true;\n}\n\nstatic void prep_ifreq(struct ifreq *ifr, const char *ifname)\n{\n    memset(ifr, 0, sizeof(*ifr));\n    snprintf(ifr->ifr_name, IFNAMSIZ, \"%s\", ifname);\n}\n\nstatic int send_fd(int c, int fd)\n{\n    char msgbuf[CMSG_SPACE(sizeof(fd))];\n    struct msghdr msg = {\n        .msg_control = msgbuf,\n        .msg_controllen = sizeof(msgbuf),\n    };\n    struct cmsghdr *cmsg;\n    struct iovec iov;\n    char req[1] = { 0x00 };\n\n    cmsg = CMSG_FIRSTHDR(&msg);\n    cmsg->cmsg_level = SOL_SOCKET;\n    cmsg->cmsg_type = SCM_RIGHTS;\n    cmsg->cmsg_len = CMSG_LEN(sizeof(fd));\n    msg.msg_controllen = cmsg->cmsg_len;\n\n    iov.iov_base = req;\n    iov.iov_len = sizeof(req);\n\n    msg.msg_iov = &iov;\n    msg.msg_iovlen = 1;\n    memcpy(CMSG_DATA(cmsg), &fd, sizeof(fd));\n\n    return sendmsg(c, &msg, 0);\n}\n\n#ifdef CONFIG_LIBCAP\nstatic int drop_privileges(void)\n{\n    /* clear all capabilities */\n    capng_clear(CAPNG_SELECT_BOTH);\n\n    if (capng_update(CAPNG_ADD, CAPNG_EFFECTIVE | CAPNG_PERMITTED,\n                     CAP_NET_ADMIN) < 0) {\n        return -1;\n    }\n\n    /* change to calling user's real uid and gid, retaining supplemental\n     * groups and CAP_NET_ADMIN */\n    if (capng_change_id(getuid(), getgid(), CAPNG_CLEAR_BOUNDING)) {\n        return -1;\n    }\n\n    return 0;\n}\n#endif\n\nint main(int argc, char **argv)\n{\n    struct ifreq ifr;\n#ifndef SIOCBRADDIF\n    unsigned long ifargs[4];\n#endif\n    int ifindex;\n    int fd = -1, ctlfd = -1, unixfd = -1;\n    int use_vnet = 0;\n    int mtu;\n    const char *bridge = NULL;\n    char iface[IFNAMSIZ];\n    int index;\n    ACLRule *acl_rule;\n    ACLList acl_list;\n    int access_allowed, access_denied;\n    int ret = EXIT_SUCCESS;\n\n#ifdef CONFIG_LIBCAP\n    /* if we're run from an suid binary, immediately drop privileges preserving\n     * cap_net_admin */\n    if (geteuid() == 0 && getuid() != geteuid()) {\n        if (drop_privileges() == -1) {\n            fprintf(stderr, \"failed to drop privileges\\n\");\n            return 1;\n        }\n    }\n#endif\n\n    /* parse arguments */\n    for (index = 1; index < argc; index++) {\n        if (strcmp(argv[index], \"--use-vnet\") == 0) {\n            use_vnet = 1;\n        } else if (strncmp(argv[index], \"--br=\", 5) == 0) {\n            bridge = &argv[index][5];\n        } else if (strncmp(argv[index], \"--fd=\", 5) == 0) {\n            unixfd = atoi(&argv[index][5]);\n        } else {\n            usage();\n            return EXIT_FAILURE;\n        }\n    }\n\n    if (bridge == NULL || unixfd == -1) {\n        usage();\n        return EXIT_FAILURE;\n    }\n    if (strlen(bridge) >= IFNAMSIZ) {\n        fprintf(stderr, \"name `%s' too long: %zu\\n\", bridge, strlen(bridge));\n        return EXIT_FAILURE;\n    }\n\n    /* parse default acl file */\n    QSIMPLEQ_INIT(&acl_list);\n    if (parse_acl_file(DEFAULT_ACL_FILE, &acl_list) == -1) {\n        fprintf(stderr, \"failed to parse default acl file `%s'\\n\",\n                DEFAULT_ACL_FILE);\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* validate bridge against acl -- default policy is to deny\n     * according acl policy if we have a deny and allow both\n     * then deny should always win over allow\n     */\n    access_allowed = 0;\n    access_denied = 0;\n    QSIMPLEQ_FOREACH(acl_rule, &acl_list, entry) {\n        switch (acl_rule->type) {\n        case ACL_ALLOW_ALL:\n            access_allowed = 1;\n            break;\n        case ACL_ALLOW:\n            if (strcmp(bridge, acl_rule->iface) == 0) {\n                access_allowed = 1;\n            }\n            break;\n        case ACL_DENY_ALL:\n            access_denied = 1;\n            break;\n        case ACL_DENY:\n            if (strcmp(bridge, acl_rule->iface) == 0) {\n                access_denied = 1;\n            }\n            break;\n        }\n    }\n\n    if ((access_allowed == 0) || (access_denied == 1)) {\n        fprintf(stderr, \"access denied by acl file\\n\");\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* open a socket to use to control the network interfaces */\n    ctlfd = socket(AF_INET, SOCK_STREAM, 0);\n    if (ctlfd == -1) {\n        fprintf(stderr, \"failed to open control socket: %s\\n\", strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* open the tap device */\n    fd = open(\"/dev/net/tun\", O_RDWR);\n    if (fd == -1) {\n        fprintf(stderr, \"failed to open /dev/net/tun: %s\\n\", strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* request a tap device, disable PI, and add vnet header support if\n     * requested and it's available. */\n    prep_ifreq(&ifr, \"tap%d\");\n    ifr.ifr_flags = IFF_TAP|IFF_NO_PI;\n    if (use_vnet && has_vnet_hdr(fd)) {\n        ifr.ifr_flags |= IFF_VNET_HDR;\n    }\n\n    if (ioctl(fd, TUNSETIFF, &ifr) == -1) {\n        fprintf(stderr, \"failed to create tun device: %s\\n\", strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* save tap device name */\n    snprintf(iface, sizeof(iface), \"%s\", ifr.ifr_name);\n\n    /* get the mtu of the bridge */\n    prep_ifreq(&ifr, bridge);\n    if (ioctl(ctlfd, SIOCGIFMTU, &ifr) == -1) {\n        fprintf(stderr, \"failed to get mtu of bridge `%s': %s\\n\",\n                bridge, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* save mtu */\n    mtu = ifr.ifr_mtu;\n\n    /* set the mtu of the interface based on the bridge */\n    prep_ifreq(&ifr, iface);\n    ifr.ifr_mtu = mtu;\n    if (ioctl(ctlfd, SIOCSIFMTU, &ifr) == -1) {\n        fprintf(stderr, \"failed to set mtu of device `%s' to %d: %s\\n\",\n                iface, mtu, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* Linux uses the lowest enslaved MAC address as the MAC address of\n     * the bridge.  Set MAC address to a high value so that it doesn't\n     * affect the MAC address of the bridge.\n     */\n    if (ioctl(ctlfd, SIOCGIFHWADDR, &ifr) < 0) {\n        fprintf(stderr, \"failed to get MAC address of device `%s': %s\\n\",\n                iface, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n    ifr.ifr_hwaddr.sa_data[0] = 0xFE;\n    if (ioctl(ctlfd, SIOCSIFHWADDR, &ifr) < 0) {\n        fprintf(stderr, \"failed to set MAC address of device `%s': %s\\n\",\n                iface, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* add the interface to the bridge */\n    prep_ifreq(&ifr, bridge);\n    ifindex = if_nametoindex(iface);\n#ifndef SIOCBRADDIF\n    ifargs[0] = BRCTL_ADD_IF;\n    ifargs[1] = ifindex;\n    ifargs[2] = 0;\n    ifargs[3] = 0;\n    ifr.ifr_data = (void *)ifargs;\n    ret = ioctl(ctlfd, SIOCDEVPRIVATE, &ifr);\n#else\n    ifr.ifr_ifindex = ifindex;\n    ret = ioctl(ctlfd, SIOCBRADDIF, &ifr);\n#endif\n    if (ret == -1) {\n        fprintf(stderr, \"failed to add interface `%s' to bridge `%s': %s\\n\",\n                iface, bridge, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* bring the interface up */\n    prep_ifreq(&ifr, iface);\n    if (ioctl(ctlfd, SIOCGIFFLAGS, &ifr) == -1) {\n        fprintf(stderr, \"failed to get interface flags for `%s': %s\\n\",\n                iface, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    ifr.ifr_flags |= IFF_UP;\n    if (ioctl(ctlfd, SIOCSIFFLAGS, &ifr) == -1) {\n        fprintf(stderr, \"failed to bring up interface `%s': %s\\n\",\n                iface, strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* write fd to the domain socket */\n    if (send_fd(unixfd, fd) == -1) {\n        fprintf(stderr, \"failed to write fd to unix socket: %s\\n\",\n                strerror(errno));\n        ret = EXIT_FAILURE;\n        goto cleanup;\n    }\n\n    /* ... */\n\n    /* profit! */\n\ncleanup:\n    if (fd >= 0) {\n        close(fd);\n    }\n    if (ctlfd >= 0) {\n        close(ctlfd);\n    }\n    while ((acl_rule = QSIMPLEQ_FIRST(&acl_list)) != NULL) {\n        QSIMPLEQ_REMOVE_HEAD(&acl_list, entry);\n        g_free(acl_rule);\n    }\n\n    return ret;\n}\n"], "filenames": ["qemu-bridge-helper.c"], "buggy_code_start_loc": [110], "buggy_code_end_loc": [261], "fixing_code_start_loc": [111], "fixing_code_end_loc": [273], "type": "NVD-CWE-noinfo", "message": "qemu-bridge-helper.c in QEMU 3.1 and 4.0.0 does not ensure that a network interface name (obtained from bridge.conf or a --br=bridge option) is limited to the IFNAMSIZ size, which can lead to an ACL bypass.", "other": {"cve": {"id": "CVE-2019-13164", "sourceIdentifier": "cve@mitre.org", "published": "2019-07-03T14:15:10.370", "lastModified": "2022-10-06T19:51:02.317", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "qemu-bridge-helper.c in QEMU 3.1 and 4.0.0 does not ensure that a network interface name (obtained from bridge.conf or a --br=bridge option) is limited to the IFNAMSIZ size, which can lead to an ACL bypass."}, {"lang": "es", "value": "qemu-bridge-helper.c en QEMU versi\u00f3n 3.1 y 4.0.0 no garantiza que un nombre de interfaz de red (obtenido de bridge.conf o una opci\u00f3n --br = bridge) est\u00e9 limitado al tama\u00f1o de IFNAMSIZ, lo que puede llevar a una derivaci\u00f3n de ACL."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:qemu:qemu:3.1:*:*:*:*:*:*:*", "matchCriteriaId": "79138E4B-9AB9-44D0-B9E4-0912695DBE6F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:qemu:qemu:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "22ACD7F6-8BB8-4B86-94D0-1C584AB87EEF"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "F1E78106-58E6-4D59-990F-75DA575BFAD9"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:15.1:*:*:*:*:*:*:*", "matchCriteriaId": "B620311B-34A3-48A6-82DF-6F078D7A4493"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:esm:*:*:*", "matchCriteriaId": "815D70A8-47D3-459C-A32C-9FEACA0659D1"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:16.04:*:*:*:esm:*:*:*", "matchCriteriaId": "7A5301BF-1402-4BE0-A0F8-69FBE79BC6D6"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:18.04:*:*:*:lts:*:*:*", "matchCriteriaId": "23A7C53F-B80F-4E6A-AFA9-58EEA84BE11D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:19.04:*:*:*:*:*:*:*", "matchCriteriaId": "CD783B0C-9246-47D9-A937-6144FE8BFF0F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:19.10:*:*:*:*:*:*:*", "matchCriteriaId": "A31C8344-3E02-4EB8-8BD8-4C84B7959624"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00000.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00008.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2019/07/02/2", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/109054", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "https://github.com/qemu/qemu/commit/03d7712b4bcd47bfe0fe14ba2fffa87e111fa086", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/09/msg00021.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.gnu.org/archive/html/qemu-devel/2019-07/msg00145.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Vendor Advisory"]}, {"url": "https://seclists.org/bugtraq/2019/Aug/41", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://seclists.org/bugtraq/2019/Sep/3", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202003-66", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4191-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4191-2/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2019/dsa-4506", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2019/dsa-4512", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/qemu/qemu/commit/03d7712b4bcd47bfe0fe14ba2fffa87e111fa086"}}