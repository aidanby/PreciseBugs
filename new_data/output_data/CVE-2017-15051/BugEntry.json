{"buggy_code": ["<?php\n/**\n *\n * @file          index.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nheader(\"X-XSS-Protection: 1; mode=block\");\nheader(\"X-Frame-Option: SameOrigin\");\n\n// **PREVENTING SESSION HIJACKING**\n// Prevents javascript XSS attacks aimed to steal the session ID\nini_set('session.cookie_httponly', 1);\n\n// **PREVENTING SESSION FIXATION**\n// Session ID cannot be passed through URLs\nini_set('session.use_only_cookies', 1);\n\n// Uses a secure connection (HTTPS) if possible\nini_set('session.cookie_secure', 0);\n\n// Before we start processing, we should abort no install is present\nif (!file_exists('includes/config/settings.php')) {\n    // This should never happen, but in case it does\n    // this means if headers are sent, redirect will fallback to JS\n    if (headers_sent()) {\n        echo '<script language=\"javascript\" type=\"text/javascript\">document.location.replace(\"install/install.php\");</script>';\n    } else {\n        header('Location: install/install.php');\n    }\n    // Now either way, we should stop processing further\n    exit();\n}\n\n// initialise CSRFGuard library\nrequire_once('./includes/libraries/csrfp/libs/csrf/csrfprotector.php');\ncsrfProtector::init();\n//session_destroy();\nsession_id();\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// Include files\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n\n// initialize session\n$_SESSION['CPM'] = 1;\nif (isset($SETTINGS['cpassman_dir']) === false || $SETTINGS['cpassman_dir'] === \"\") {\n    $SETTINGS['cpassman_dir'] = \".\";\n    $SETTINGS['cpassman_url'] = $superGlobal->get(\"REQUEST_URI\", \"SERVER\");\n}\n\n// Include files\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n\n// Open MYSQL database connection\nrequire_once './includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n\n// Load Core library\nrequire_once $SETTINGS['cpassman_dir'].'/sources/core.php';\n\n\n// Prepare POST variables\n$post_language =        filter_input(INPUT_POST, 'language', FILTER_SANITIZE_STRING);\n$post_sig_response =    filter_input(INPUT_POST, 'sig_response', FILTER_SANITIZE_STRING);\n$post_duo_login =       filter_input(INPUT_POST, 'duo_login', FILTER_SANITIZE_STRING);\n$post_duo_data =        filter_input(INPUT_POST, 'duo_data', FILTER_SANITIZE_STRING);\n\n// Prepare superGlobal variables\n$session_user_language =        $superGlobal->get(\"user_language\", \"SESSION\");\n$session_user_id =              $superGlobal->get(\"user_id\", \"SESSION\");\n$session_user_flag =            $superGlobal->get(\"user_language_flag\", \"SESSION\");\n$session_user_admin =           $superGlobal->get(\"user_admin\", \"SESSION\");\n$session_user_avatar_thumb =    $superGlobal->get(\"user_avatar_thumb\", \"SESSION\");\n$session_name =                 $superGlobal->get(\"name\", \"SESSION\");\n$session_lastname =             $superGlobal->get(\"lastname\", \"SESSION\");\n$session_user_manager =         $superGlobal->get(\"user_manager\", \"SESSION\");\n$session_user_read_only =       $superGlobal->get(\"user_read_only\", \"SESSION\");\n$session_is_admin =             $superGlobal->get(\"is_admin\", \"SESSION\");\n$session_login =                $superGlobal->get(\"login\", \"SESSION\");\n$session_validite_pw =          $superGlobal->get(\"validite_pw\", \"SESSION\");\n$session_nb_folders =           $superGlobal->get(\"nb_folders\", \"SESSION\");\n$session_nb_roles =             $superGlobal->get(\"nb_roles\", \"SESSION\");\n$session_autoriser =            $superGlobal->get(\"autoriser\", \"SESSION\");\n$session_hide_maintenance =     $superGlobal->get(\"hide_maintenance\", \"SESSION\");\n$session_initial_url =          $superGlobal->get(\"initial_url\", \"SESSION\");\n$server_request_uri =           $superGlobal->get(\"REQUEST_URI\", \"SERVER\");\n\n\n/* DEFINE WHAT LANGUAGE TO USE */\nif (isset($_GET['language']) === true) {\n    // case of user has change language in the login page\n    $dataLanguage = DB::queryFirstRow(\n        \"SELECT flag, name\n        FROM \".prefix_table(\"languages\").\"\n        WHERE name = %s\",\n        filter_var($_GET['language'], FILTER_SANITIZE_STRING)\n    );\n    $superGlobal->put(\"user_language\", $dataLanguage['name'], \"SESSION\");\n    $superGlobal->put(\"user_language_flag\", $dataLanguage['flag'], \"SESSION\");\n} elseif ($session_user_id === null && null === $post_language && $session_user_language === null) {\n    //get default language\n    $dataLanguage = DB::queryFirstRow(\n        \"SELECT m.valeur AS valeur, l.flag AS flag\n        FROM \".prefix_table(\"misc\").\" AS m\n        INNER JOIN \".prefix_table(\"languages\").\" AS l ON (m.valeur = l.name)\n        WHERE m.type=%s_type AND m.intitule=%s_intitule\",\n        array(\n            'type' => \"admin\",\n            'intitule' => \"default_language\"\n        )\n    );\n    if (empty($dataLanguage['valeur'])) {\n        $superGlobal->put(\"user_language\", \"english\", \"SESSION\");\n        $superGlobal->put(\"user_language_flag\", \"us.png\", \"SESSION\");\n        $session_user_language = \"english\";\n    } else {\n        $superGlobal->put(\"user_language\", $dataLanguage['valeur'], \"SESSION\");\n        $superGlobal->put(\"user_language_flag\", $dataLanguage['flag'], \"SESSION\");\n        $session_user_language = $dataLanguage['valeur'];\n    }\n} elseif (isset($SETTINGS['default_language']) === true && $session_user_language === null) {\n    $superGlobal->put(\"user_language\", $SETTINGS['default_language'], \"SESSION\");\n    $session_user_language = $SETTINGS['default_language'];\n} elseif (null !== $post_language) {\n    $superGlobal->put(\"user_language\", $post_language, \"SESSION\");\n    $session_user_language = $post_language;\n} elseif ($session_user_language === null || empty($session_user_language) === true) {\n    if (null !== $post_language) {\n        $superGlobal->put(\"user_language\", $post_language, \"SESSION\");\n        $session_user_language = $post_language;\n    } elseif ($session_user_language !== null) {\n        $superGlobal->put(\"user_language\", $SETTINGS['default_language'], \"SESSION\");\n        $session_user_language = $SETTINGS['default_language'];\n    }\n} elseif ($session_user_language === '0') {\n    $superGlobal->put(\"user_language\", $SETTINGS['default_language'], \"SESSION\");\n    $session_user_language = $SETTINGS['default_language'];\n}\n\nif (isset($SETTINGS['cpassman_dir']) === false || $SETTINGS['cpassman_dir'] === \"\") {\n    $SETTINGS['cpassman_dir'] = \".\";\n    $SETTINGS['cpassman_url'] = (string) $server_request_uri;\n}\n\n// Load user languages files\nif (in_array($session_user_language, $languagesList) === true) {\n    require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$session_user_language.'.php';\n} else {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n}\n\n// load 2FA Google\nif (isset($SETTINGS['google_authentication']) === true && $SETTINGS['google_authentication'] === \"1\") {\n    include_once($SETTINGS['cpassman_dir'].\"/includes/libraries/Authentication/TwoFactorAuth/TwoFactorAuth.php\");\n}\n\n// Load links, css and javascripts\nif (isset($_SESSION['CPM']) === true && isset($SETTINGS['cpassman_dir']) === true) {\n    require_once $SETTINGS['cpassman_dir'].'/load.php';\n}\n\n?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<title>Teampass</title>\n<script type=\"text/javascript\">\n    //<![CDATA[\n    if (window.location.href.indexOf(\"page=\") == -1 && (window.location.href.indexOf(\"otv=\") == -1 && window.location.href.indexOf(\"action=\") == -1)) {\n        if (window.location.href.indexOf(\"session_over=true\") == -1) {\n            //location.replace(\"./index.php?page=items\");\n        } else {\n            location.replace(\"./logout.php\");\n        }\n    }\n    //]]>\n</script>\n<?php\n\n// load HEADERS\nif (isset($_SESSION['CPM'])) {\n    echo $htmlHeaders;\n}\n?>\n    </head>\n\n<body>\n    <?php\n\n/* HEADER */\n    echo '\n    <div id=\"top\">\n        <div id=\"logo\"><img src=\"includes/images/canevas/logo.png\" alt=\"\" /></div>';\n    // Display menu\n    if (empty($session_login) === false) {\n        // welcome message\n        echo '\n        <div style=\"float:right; margin:-10px 5px 0 0; color:#FFF;\">'\n            .$LANG['index_welcome'].'&nbsp;<b>'.$session_name.'&nbsp;'.$session_lastname\n            .'&nbsp;['.$session_login.']</b>&nbsp;-&nbsp;'\n            , $session_user_admin === '1' ? $LANG['god'] :\n                ($session_user_manager === '1' ? $LANG['gestionnaire'] :\n                    ($session_user_read_only === '1' ? $LANG['read_only_account'] : $LANG['user'])\n                ), '&nbsp;'.strtolower($LANG['index_login']).'</div>';\n\n        echo '\n        <div id=\"menu_top\">\n            <div style=\"margin-left:20px; margin-top:2px;width:710px;\" id=\"main_menu\">';\n        if ($session_user_admin === '0' || $SETTINGS_EXT['admin_full_right'] == 0) {\n            echo '\n                <a class=\"btn btn-default\" href=\"#\"',\n                ($session_nb_folders !== null && intval($session_nb_folders) === 0)\n                || ($session_nb_roles !== null && intval($session_nb_roles) === 0) ? '' : ' onclick=\"MenuAction(\\'items\\')\"',\n                '>\n                    <i class=\"fa fa-key fa-2x tip\" title=\"'.$LANG['pw'].'\"></i>\n                </a>\n\n                <a class=\"btn btn-default\" href=\"#\"',\n                ($session_nb_folders !== null && intval($session_nb_folders) === 0)\n                || ($session_nb_roles !== null && intval($session_nb_roles) === 0) ? '' : ' onclick=\"MenuAction(\\'find\\')\"',\n                '>\n                    <i class=\"fa fa-binoculars fa-2x tip\" title=\"'.$LANG['find'].'\"></i>\n                </a>';\n        }\n\n        // Favourites menu\n        if (isset($SETTINGS['enable_favourites'])\n            && $SETTINGS['enable_favourites'] == 1\n            &&\n            ($session_user_admin === '0' || ($session_user_admin === '1' && $SETTINGS_EXT['admin_full_right'] === false))\n        ) {\n            echo '\n                    <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'favourites\\')\">\n                        <i class=\"fa fa-star fa-2x tip\" title=\"'.$LANG['my_favourites'].'\"></i>\n                    </a>';\n        }\n        // KB menu\n        if (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1) {\n            echo '\n                    <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'kb\\')\">\n                        <i class=\"fa fa-map-signs fa-2x tip\" title=\"'.$LANG['kb_menu'].'\"></i>\n                    </a>';\n        }\n        echo '\n        <span id=\"menu_suggestion_position\">';\n        // SUGGESTION menu\n        if (isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] === '1'\n            && ($session_user_read_only === '1' || $session_user_admin === '1' || $session_user_manager === '1')\n        ) {\n            echo '\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'suggestion\\')\">\n                    <i class=\"fa fa-lightbulb-o fa-2x tip\" id=\"menu_icon_suggestions\" title=\"'.$LANG['suggestion_menu'].'\"></i>\n                </a>';\n        }\n        echo '\n        </span>';\n        // Admin menu\n        if ($session_user_admin === '1') {\n            echo '\n                    &nbsp;\n                    <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_main\\')\">\n                        <i class=\"fa fa-info fa-2x tip\" title=\"'.$LANG['admin_main'].'\"></i>\n                    </a>\n                    <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_settings\\')\">\n                        <i class=\"fa fa-wrench fa-2x tip\" title=\"'.$LANG['admin_settings'].'\"></i>\n                    </a>';\n        }\n\n        if ($session_user_admin === '1' || $session_user_manager === '1') {\n            echo '\n                &nbsp;\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_folders\\')\">\n                    <i class=\"fa fa-folder-open fa-2x tip\" title=\"'.$LANG['admin_groups'].'\"></i>\n                </a>\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_roles\\')\">\n                    <i class=\"fa fa-graduation-cap fa-2x tip\" title=\"'.$LANG['admin_functions'].'\"></i>\n                </a>\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_users\\')\">\n                    <i class=\"fa fa-users fa-2x tip\" title=\"'.$LANG['admin_users'].'\"></i>\n                </a>\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_views\\')\">\n                    <i class=\"fa fa-cubes fa-2x tip\" title=\"'.$LANG['admin_views'].'\"></i>\n                </a>';\n        }\n\n        echo '\n                <div style=\"float:right;\">\n                    <ul class=\"menu\" style=\"\">\n                        <li class=\"\" style=\"padding:4px;width:40px; text-align:center;\"><i class=\"fa fa-dashboard fa-fw\"></i>&nbsp;\n                            <ul class=\"menu_200\" style=\"text-align:left;\">',\n                                ($session_user_admin === '1' && $SETTINGS_EXT['admin_full_right'] === true) ? '' : isset($SETTINGS['enable_pf_feature']) === true && $SETTINGS['enable_pf_feature'] == 1 ? '\n                                <li onclick=\"$(\\'#div_set_personal_saltkey\\').dialog(\\'open\\')\">\n                                    <i class=\"fa fa-key fa-fw\"></i> &nbsp;'.$LANG['home_personal_saltkey_button'].'\n                                </li>' : '', '\n                                <li onclick=\"$(\\'#div_increase_session_time\\').dialog(\\'open\\')\">\n                                    <i class=\"fa fa-clock-o fa-fw\"></i> &nbsp;'.$LANG['index_add_one_hour'].'\n                                </li>\n                                <li onclick=\"loadProfileDialog()\">\n                                    <i class=\"fa fa-user fa-fw\"></i> &nbsp;'.$LANG['my_profile'].'\n                                </li>\n                                <li onclick=\"MenuAction(\\'deconnexion\\', \\''.$session_user_id.'\\')\">\n                                    <i class=\"fa fa-sign-out fa-fw\"></i> &nbsp;'.$LANG['disconnect'].'\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>';\n\n        if ($session_user_admin !== '1' || ($session_user_admin === '1' && $SETTINGS_EXT['admin_full_right'] === false)) {\n            echo '\n                <div style=\"float:right; margin-right:10px;\">\n                    <ul class=\"menu\" id=\"menu_last_seen_items\">\n                        <li class=\"\" style=\"padding:4px;width:40px; text-align:center;\"><i class=\"fa fa-map fa-fw\"></i>&nbsp;&nbsp;\n                            <ul class=\"menu_200\" id=\"last_seen_items_list\" style=\"text-align:left;\">\n                                <li>'.$LANG['please_wait'].'</li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>';\n        }\n\n        // show avatar\n        if ($session_user_avatar_thumb !== null && empty($session_user_avatar_thumb) === false) {\n            if (file_exists('includes/avatars/'.$session_user_avatar_thumb)) {\n                $avatar = $SETTINGS['cpassman_url'].'/includes/avatars/'.$session_user_avatar_thumb;\n            } else {\n                $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n            }\n        } else {\n            $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n        }\n        echo '\n                <div style=\"float:right; margin-right:10px;\">\n                    <img src=\"'.$avatar.'\" style=\"border-radius:10px; height:28px; cursor:pointer;\" onclick=\"loadProfileDialog()\" alt=\"photo\" id=\"user_avatar_thumb\" />\n                </div>';\n\n        echo '\n            </div>';\n\n        echo '\n        </div>';\n    }\n\n    echo '\n    </div>';\n\n    echo '\n<div id=\"main_info_box\" style=\"display:none; z-index:99999; position:absolute; width:400px; height:40px;\" class=\"ui-widget ui-state-active ui-color\">\n    <div id=\"main_info_box_text\" style=\"text-align:center;margin-top:10px;\"></div>\n</div>';\n\n/* MAIN PAGE */\n    echo '\n        <input type=\"hidden\" id=\"temps_restant\" value=\"', isset($_SESSION['fin_session']) ? $_SESSION['fin_session'] : '', '\" />\n        <input type=\"hidden\" name=\"language\" id=\"language\" value=\"\" />\n        <input type=\"hidden\" name=\"user_pw_complexity\" id=\"user_pw_complexity\" value=\"', isset($_SESSION['user_pw_complexity']) ? $_SESSION['user_pw_complexity'] : '', '\" />\n        <input type=\"hidden\" name=\"user_session\" id=\"user_session\" value=\"\"/>\n        <input type=\"hidden\" name=\"encryptClientServer\" id=\"encryptClientServer\" value=\"', isset($SETTINGS['encryptClientServer']) ? $SETTINGS['encryptClientServer'] : '1', '\" />\n        <input type=\"hidden\" name=\"please_login\" id=\"please_login\" value=\"\" />\n        <input type=\"hidden\" name=\"disabled_action_on_going\" id=\"disabled_action_on_going\" value=\"\" />\n        <input type=\"hidden\" id=\"duo_sig_response\" value=\"', null !== $post_sig_response ? intval($post_sig_response) : '', '\" />';\n\n// SENDING STATISTICS?\n    if (isset($SETTINGS['send_stats']) && $SETTINGS['send_stats'] === \"1\"\n        && (!isset($_SESSION['temporary']['send_stats_done']) || $_SESSION['temporary']['send_stats_done'] !== \"1\")\n    ) {\n        echo '\n            <input type=\"hidden\" name=\"send_statistics\" id=\"send_statistics\" value=\"1\" />';\n    } else {\n        echo '\n        <input type=\"hidden\" name=\"send_statistics\" id=\"send_statistics\" value=\"0\" />';\n    }\n\n    echo '\n    <div id=\"', (isset($_GET['page']) && filter_var($_GET['page'], FILTER_SANITIZE_STRING) === \"items\" && $session_user_id !== null) ? \"main_simple\" : \"main\", '\">';\n// MESSAGE BOX\n    echo '\n            <div style=\"\" class=\"div_center\">\n                <div id=\"message_box\" style=\"display:none;width:200px;padding:5px;text-align:center; z-index:999999;\" class=\"ui-widget-content ui-state-error ui-corner-all\"></div>\n            </div>';\n    // Main page\n    if ($session_autoriser !== null && $session_autoriser === true) {\n        // Show menu\n        echo '\n            <form method=\"post\" name=\"main_form\" action=\"\">\n                <input type=\"hidden\" name=\"menu_action\" id=\"menu_action\" value=\"\" />\n                <input type=\"hidden\" name=\"changer_pw\" id=\"changer_pw\" value=\"\" />\n                <input type=\"hidden\" name=\"form_user_id\" id=\"form_user_id\" value=\"', $session_user_id !== null ? $session_user_id : '', '\" />\n                <input type=\"hidden\" name=\"is_admin\" id=\"is_admin\" value=\"', $session_is_admin !== null ? $session_is_admin : '', '\" />\n                <input type=\"hidden\" name=\"personal_saltkey_set\" id=\"personal_saltkey_set\" value=\"', isset($_SESSION['user_settings']['clear_psk']) ? true : false, '\" />\n            </form>';\n    }\n// ---------\n// Display a help to admin\n    $errorAdmin = \"\";\n\n// error nb folders\n    if ($session_nb_folders !== null && intval($session_nb_folders) === 0) {\n        $errorAdmin = '<span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_no_folders'].'<br />';\n    }\n// error nb roles\n    if ($session_nb_roles !== null && intval($session_nb_roles) === 0) {\n        if (empty($errorAdmin)) {\n            $errorAdmin = '<span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_no_roles'];\n        } else {\n            $errorAdmin .= '<br /><span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_no_roles'];\n        }\n    }\n\n    if ($session_validite_pw !== null && empty($session_validite_pw) === false) {\n        // error cpassman dir\n        if (isset($SETTINGS['cpassman_dir']) && empty($SETTINGS['cpassman_dir']) || !isset($SETTINGS['cpassman_dir'])) {\n            if (empty($errorAdmin)) {\n                $errorAdmin = '<span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_cpassman_dir'];\n            } else {\n                $errorAdmin .= '<br /><span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_cpassman_dir'];\n            }\n        }\n        // error cpassman url\n        if ($session_validite_pw !== null && (isset($SETTINGS['cpassman_url']) && empty($SETTINGS['cpassman_url']) || !isset($SETTINGS['cpassman_url']))) {\n            if (empty($errorAdmin)) {\n                $errorAdmin = '<span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_cpassman_url'];\n            } else {\n                $errorAdmin .= '<br /><span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_cpassman_url'];\n            }\n        }\n    }\n// Display help\n    if (!empty($errorAdmin)) {\n        echo '\n                <div style=\"margin:10px;padding:10px;\" class=\"ui-state-error ui-corner-all\">\n                '.$errorAdmin.'\n                </div>';\n    }\n// -----------\n// Display Maintenance mode information\n    if (isset($SETTINGS['maintenance_mode']) === true && $SETTINGS['maintenance_mode'] === '1'\n            && $session_user_admin !== null && $session_user_admin === '1'\n        ) {\n        echo '\n            <div style=\"text-align:center;margin-bottom:5px;padding:10px;\" class=\"ui-state-highlight ui-corner-all\">\n                <b>'.$LANG['index_maintenance_mode_admin'].'</b>\n            </div>';\n    }\n// Display UPDATE NEEDED information\n    if (isset($SETTINGS['update_needed']) && $SETTINGS['update_needed'] === true\n            && $session_user_admin !== null && $session_user_admin === '1'\n            && (($session_hide_maintenance !== null && $session_hide_maintenance === '0')\n            || $session_hide_maintenance === null)\n        ) {\n        echo '\n            <div style=\"text-align:center;margin-bottom:5px;padding:10px;\"\n                class=\"ui-state-highlight ui-corner-all\" id=\"div_maintenance\">\n                <b>'.$LANG['update_needed_mode_admin'].'</b>\n                <span style=\"float:right;cursor:pointer;\">\n                    <span class=\"fa fa-close mi-red\" onclick=\"toggleDiv(\\'div_maintenance\\')\"></span>\n                </span>\n            </div>';\n    }\n\n// display an item in the context of OTV link\n    if (($session_validite_pw === null || empty($session_validite_pw) === true || empty($session_user_id) === true) &&\n        isset($_GET['otv']) && filter_var($_GET['otv'], FILTER_SANITIZE_STRING) === 'true'\n    ) {\n        // case where one-shot viewer\n        if (isset($_GET['code']) && !empty($_GET['code'])\n            && isset($_GET['stamp']) && !empty($_GET['stamp'])\n        ) {\n            include 'otv.php';\n        } else {\n            $_SESSION['error']['code'] = ERR_VALID_SESSION;\n            $superGlobal->put(\n                \"initial_url\",\n                filter_var(\n                    substr($server_request_uri, strpos($server_request_uri, \"index.php?\")),\n                    FILTER_SANITIZE_URL\n                ),\n                \"SESSION\"\n            );\n            include $SETTINGS['cpassman_dir'].'/error.php';\n        }\n    // Ask the user to change his password\n    } elseif (($session_validite_pw === null || $session_validite_pw === false)\n        && empty($session_user_id) === false\n    ) {\n        //Check if password is valid\n        echo '\n        <div style=\"margin:auto; padding:20px; width:500px;\" class=\"ui-state-focus ui-corner-all\">\n            <h3>'.$LANG['index_change_pw'].'</h3>\n            <div style=\"height:20px;text-align:center;margin:2px;display:none;\" id=\"change_pwd_error\" class=\"\"></div>\n            <div style=\"text-align:center;margin:5px;padding:3px;\" id=\"change_pwd_complexPw\" class=\"ui-widget ui-state-active ui-corner-all\">'.\n            $LANG['complex_asked'].' : '.$SETTINGS_EXT['pwComplexity'][$_SESSION['user_pw_complexity']][1].\n            '</div>\n            <div id=\"pw_strength\" style=\"margin:0 0 10px 140px;\"></div>\n            <table>\n                <tr>\n                    <td>'.$LANG['index_new_pw'].' :</td><td><input type=\"password\" size=\"15\" name=\"new_pw\" id=\"new_pw\"/></td>\n                </tr>\n                <tr><td>'.$LANG['index_change_pw_confirmation'].' :</td><td><input type=\"password\" size=\"15\" name=\"new_pw2\" id=\"new_pw2\" onkeypress=\"if (event.keyCode == 13) ChangeMyPass();\" /></td></tr>\n            </table>\n            <input type=\"hidden\" id=\"pw_strength_value\" />\n            <div style=\"width:420px; text-align:center; margin:15px 0 10px 0;\">\n                <input type=\"button\" onClick=\"ChangeMyPass()\" onkeypress=\"if (event.keyCode == 13) ChangeMyPass();\" class=\"ui-state-default ui-corner-all\" style=\"padding:4px;width:150px;margin:10px 0 0 80px;\" value=\"'.$LANG['index_change_pw_button'].'\" />\n            </div>\n        </div>\n        <script type=\"text/javascript\">\n            $(\"#new_pw\").focus();\n        </script>';\n    // Display pages\n    } elseif ($session_validite_pw !== null\n        && $session_validite_pw === true\n        && empty($_GET['page']) === false\n        && empty($session_user_id) === false\n    ) {\n        if (!extension_loaded('mcrypt')) {\n            $_SESSION['error']['code'] = ERR_NO_MCRYPT;\n            include $SETTINGS['cpassman_dir'].'/error.php';\n        } elseif ($session_initial_url !== null && empty($session_initial_url) === false) {\n            include $session_initial_url;\n        } elseif ($_GET['page'] == \"items\") {\n            // SHow page with Items\n            if (($session_user_admin !== '1')\n                ||\n                ($session_user_admin === '1' && $SETTINGS_EXT['admin_full_right'] === false)\n            ) {\n                include 'items.php';\n            } else {\n                $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                include $SETTINGS['cpassman_dir'].'/error.php';\n            }\n        } elseif ($_GET['page'] == \"find\") {\n            // Show page for items findind\n            include 'find.php';\n        } elseif ($_GET['page'] == \"favourites\") {\n            // Show page for user favourites\n            include 'favorites.php';\n        } elseif ($_GET['page'] == \"kb\") {\n            // Show page KB\n            if (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1) {\n                include 'kb.php';\n            } else {\n                $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                include $SETTINGS['cpassman_dir'].'/error.php';\n            }\n        } elseif ($_GET['page'] == \"suggestion\") {\n            // Show page KB\n            if (isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1) {\n                include 'suggestion.php';\n            } else {\n                $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                include $SETTINGS['cpassman_dir'].'/error.php';\n            }\n        } elseif (in_array($_GET['page'], array_keys($mngPages))) {\n            // Define if user is allowed to see management pages\n            if ($session_user_admin === '1') {\n                include($mngPages[$_GET['page']]);\n            } elseif ($session_user_manager === '1') {\n                if (($_GET['page'] != \"manage_main\" && $_GET['page'] != \"manage_settings\")) {\n                    include($mngPages[$_GET['page']]);\n                } else {\n                    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                    include $SETTINGS['cpassman_dir'].'/error.php';\n                }\n            } else {\n                $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                include $SETTINGS['cpassman_dir'].'/error.php';\n            }\n        } else {\n            $_SESSION['error']['code'] = ERR_NOT_EXIST; //page doesn't exist\n            include $SETTINGS['cpassman_dir'].'/error.php';\n        }\n    // Case of password recovery\n    } elseif (isset($_GET['action']) && $_GET['action'] === \"password_recovery\") {\n        // Case where user has asked new PW\n        echo '\n            <div style=\"width:400px;margin:50px auto 50px auto;padding:25px;\" class=\"ui-state-highlight ui-corner-all\">\n                <div style=\"text-align:center;font-weight:bold;margin-bottom:20px;\">\n                    '.$LANG['pw_recovery_asked'].'\n                </div>\n                <div id=\"generate_new_pw_error\" style=\"color:red;display:none;text-align:center;margin:5px;\"></div>\n                <div style=\"margin-bottom:3px;\">\n                    '.$LANG['pw_recovery_info'].'\n                </div>\n                <div style=\"margin:15px; text-align:center;\">\n                    <input type=\"button\" id=\"but_generate_new_password\" onclick=\"GenerateNewPassword(\\''.htmlspecialchars($_GET['key'], ENT_QUOTES).'\\',\\''.htmlspecialchars($_GET['login'], ENT_QUOTES).'\\')\" style=\"padding:3px;cursor:pointer;\" class=\"ui-state-default ui-corner-all\" value=\"'.$LANG['pw_recovery_button'].'\" />\n                    <br /><br />\n                    <div id=\"ajax_loader_send_mail\" style=\"display:none; margin: 20px;\"><span class=\"fa fa-cog fa-spin fa-2x\"></span></div>\n                </div>\n                <div style=\"margin-top:30px; text-align:center;\">\n                    <a href=\"index.php\" class=\"tip\" title=\"'.$LANG['home'].'\"><span class=\"fa fa-home fa-lg\"></span></a>\n                </div>\n            </div>';\n    } elseif (empty($session_user_id) === false && $session_user_id !== null) {\n        // Page doesn't exist\n        $_SESSION['error']['code'] = ERR_NOT_EXIST;\n        include $SETTINGS['cpassman_dir'].'/error.php';\n        // When user is not identified\n    } else {\n        // Automatic redirection\n        if (strpos($server_request_uri, \"?\") > 0) {\n            $nextUrl = filter_var(substr($server_request_uri, strpos($server_request_uri, \"?\")), FILTER_SANITIZE_URL);\n        } else {\n            $nextUrl = \"\";\n        }\n        // MAINTENANCE MODE\n        if (isset($SETTINGS['maintenance_mode']) === true && $SETTINGS['maintenance_mode'] === '1') {\n            echo '\n                <div style=\"text-align:center;margin-top:30px;margin-bottom:20px;padding:10px;\"\n                    class=\"ui-state-error ui-corner-all\">\n                    <b>'.addslashes($LANG['index_maintenance_mode']).'</b>\n                </div>';\n        } elseif (isset($_GET['session_over']) && $_GET['session_over'] === 'true') {\n            // SESSION FINISHED => RECONNECTION ASKED\n            echo '\n                    <div style=\"text-align:center;margin-top:30px;margin-bottom:20px;padding:10px;\"\n                        class=\"ui-state-error ui-corner-all\">\n                        <b>'.addslashes($LANG['index_session_expired']).'</b>\n                    </div>';\n        }\n\n        // case where user not logged and can't access a direct link\n        if (empty($_GET['page']) === false) {\n            $superGlobal->put(\n                \"initial_url\",\n                filter_var(\n                    substr($server_request_uri, strpos($server_request_uri, \"index.php?\")),\n                    FILTER_SANITIZE_URL\n                ),\n                \"SESSION\"\n            );\n            // REDIRECTION PAGE ERREUR\n            echo '\n            <script language=\"javascript\" type=\"text/javascript\">\n            <!--\n                sessionStorage.clear();\n                window.location.href = \"index.php\";\n            -->\n            </script>';\n            exit;\n        } else {\n            $superGlobal->put(\"initial_url\", '', \"SESSION\");\n        }\n\n        // CONNECTION FORM\n        echo '\n                <form method=\"post\" name=\"form_identify\" id=\"form_identify\" action=\"\">\n                    <div style=\"width:480px;margin:10px auto 10px auto;padding:25px;\" class=\"ui-state-highlight ui-corner-all\">\n                        <div style=\"text-align:center;font-weight:bold;margin-bottom:20px;\">',\n        isset($SETTINGS['custom_logo']) && !empty($SETTINGS['custom_logo']) ? '<img src=\"'.(string) $SETTINGS['custom_logo'].'\" alt=\"\" style=\"margin-bottom:40px;\" />' : '', '<br />\n                            '.$LANG['index_get_identified'].'\n                            <span id=\"ajax_loader_connexion\" style=\"display:none;margin-left:10px;\"><span class=\"fa fa-cog fa-spin fa-1x\"></span></span>\n                        </div>\n                        <div id=\"connection_error\" style=\"display:none;text-align:center;margin:5px; padding:3px;\" class=\"ui-state-error ui-corner-all\">&nbsp;<i class=\"fa fa-warning\"></i>&nbsp;'.$LANG['index_bas_pw'].'</div>';\n        echo '\n                        <div style=\"margin-bottom:3px;\">\n                            <label for=\"login\" class=\"form_label\">', isset($SETTINGS['custom_login_text']) && !empty($SETTINGS['custom_login_text']) ? (string) $SETTINGS['custom_login_text'] : $LANG['index_login'], '</label>\n                            <input type=\"text\" size=\"10\" id=\"login\" name=\"login\" class=\"input_text text ui-widget-content ui-corner-all\" />\n                            <span id=\"login_check_wait\" style=\"display:none; float:right;\"><i class=\"fa fa-cog fa-spin fa-1x\"></i></span>\n                        </div>';\n\n        // AGSES\n        if (isset($SETTINGS['agses_authentication_enabled']) && $SETTINGS['agses_authentication_enabled'] == 1) {\n            echo '\n                        <div id=\"agses_cardid_div\" style=\"text-align:center; display:none; padding:5px; width:454px; margin-bottom:5px;\" class=\"ui-state-active ui-corner-all\">\n                            '.$LANG['user_profile_agses_card_id'].': &nbsp;\n                            <input type=\"text\" size=\"12\" id=\"agses_cardid\">\n                        </div>\n                        <div id=\"agses_flickercode_div\" style=\"text-align:center; display:none;\">\n                            <canvas id=\"axs_canvas\"></canvas>\n                        </div>';\n        }\n\n                        echo '\n                        <div id=\"connect_pw\" style=\"margin-bottom:3px;\">\n                            <label for=\"pw\" class=\"form_label\" id=\"user_pwd\">'.$LANG['index_password'].'</label>\n                            <input type=\"password\" size=\"10\" id=\"pw\" name=\"pw\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\', \\'', isset($SETTINGS['google_authentication']) && $SETTINGS['google_authentication'] === \"1\" ? 1 : '', '\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />\n                        </div>';\n\n        // Personal salt key\n        if (isset($SETTINGS['psk_authentication']) && $SETTINGS['psk_authentication'] === \"1\") {\n            echo '\n                        <div id=\"connect_psk\" style=\"margin-bottom:3px;\">\n                            <label for=\"personal_psk\" class=\"form_label\">'.$LANG['home_personal_saltkey'].'</label>\n                            <input type=\"password\" size=\"10\" id=\"psk\" name=\"psk\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\', \\'', isset($SETTINGS['psk_authentication']) && $SETTINGS['psk_authentication'] === \"1\" ? 1 : '', '\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />\n                        </div>\n                        <div id=\"connect_psk_confirm\" style=\"margin-bottom:3px; display:none;\">\n                            <label for=\"psk_confirm\" class=\"form_label\">'.$LANG['home_personal_saltkey_confirm'].'</label>\n                            <input type=\"password\" size=\"10\" id=\"psk_confirm\" name=\"psk_confirm\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\', \\'', isset($SETTINGS['psk_authentication']) && $SETTINGS['psk_authentication'] === \"1\" ? 1 : '', '\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />\n                        </div>';\n        }\n\n        // Google Authenticator code\n        if (isset($SETTINGS['google_authentication']) && $SETTINGS['google_authentication'] === \"1\") {\n            echo '\n                        <div id=\"ga_code_div\" style=\"margin-bottom:10px;\">\n                            '.$LANG['ga_identification_code'].'\n                            <input type=\"text\" size=\"4\" id=\"ga_code\" name=\"ga_code\" style=\"margin:0px;\" class=\"input_text text ui-widget-content ui-corner-all numeric_only\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\')\" />\n                        <div id=\"2fa_new_code_div\" style=\"text-align:center; display:none; margin-top:5px; padding:5px;\" class=\"ui-state-default ui-corner-all\"></div>\n                        <div style=\"margin-top:2px; font-size:10px; text-align:center; cursor:pointer;\" onclick=\"send_user_new_temporary_ga_code()\">'.$LANG['i_need_to_generate_new_ga_code'].'</div>\n                        </div>';\n        }\n        echo '\n                        <div style=\"margin-bottom:3px;\">\n                            <label for=\"duree_session\" class=\"\">'.$LANG['index_session_duration'].'&nbsp;('.$LANG['minutes'].') </label>\n                            <input type=\"text\" size=\"4\" id=\"duree_session\" name=\"duree_session\" value=\"', isset($SETTINGS['default_session_expiration_time']) ? $SETTINGS['default_session_expiration_time'] : \"60\", '\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\')\" class=\"input_text text ui-widget-content ui-corner-all numeric_only\" />\n                        </div>\n\n                        <div style=\"text-align:center;margin-top:5px;font-size:10pt;\">\n                            <span onclick=\"OpenDialog(\\'div_forgot_pw\\')\" style=\"padding:3px;cursor:pointer;\">'.$LANG['forgot_my_pw'].'</span>\n                        </div>\n                        <div style=\"text-align:center;margin-top:15px;\">\n                            <input type=\"button\" id=\"but_identify_user\" onclick=\"launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\', \\'', isset($SETTINGS['psk_authentication']) && $SETTINGS['psk_authentication'] === \"1\" ? 1 : '', '\\')\" style=\"padding:3px;cursor:pointer;\" class=\"ui-state-default ui-corner-all\" value=\"'.$LANG['index_identify_button'].'\" />\n                        </div>\n                    </div>\n                </form>\n                <script type=\"text/javascript\">\n                    $(\"#login\").focus();\n                </script>';\n        // DIV for forgotten password\n        echo '\n                <div id=\"div_forgot_pw\" style=\"display:none;\">\n                    <div style=\"margin:5px auto 5px auto;\" id=\"div_forgot_pw_alert\"></div>\n                    <div style=\"margin:5px auto 5px auto;\">'.$LANG['forgot_my_pw_text'].'</div>\n                    <label for=\"forgot_pw_email\">'.$LANG['email'].'</label>\n                    <input type=\"text\" size=\"40\" name=\"forgot_pw_email\" id=\"forgot_pw_email\" />\n                    <br />\n                    <label for=\"forgot_pw_login\">'.$LANG['login'].'</label>\n                    <input type=\"text\" size=\"20\" name=\"forgot_pw_login\" id=\"forgot_pw_login\" />\n                    <div id=\"div_forgot_pw_status\" style=\"text-align:center;margin-top:15px;display:none; padding:5px;\" class=\"ui-corner-all\">\n                        <i class=\"fa fa-cog fa-spin fa-2x\"></i>&nbsp;<b>'.$LANG['please_wait'].'</b>\n                    </div>\n                </div>';\n    }\n    echo '\n    </div>';\n// FOOTER\n/* DON'T MODIFY THE FOOTER ... MANY THANKS TO YOU */\n    echo '\n    <div id=\"footer\">\n        <div style=\"float:left;width:32%;\">\n            <a href=\"http://teampass.net\" target=\"_blank\" style=\"color:#F0F0F0;\">'.$SETTINGS_EXT['tool_name'].'&nbsp;'.$SETTINGS_EXT['version'].'&nbsp;<i class=\"fa fa-copyright\"></i>&nbsp;'.$SETTINGS_EXT['copyright'].'</a>\n            &nbsp;|&nbsp;\n            <a href=\"http://teampass.readthedocs.io/en/latest/\" target=\"_blank\" style=\"color:#F0F0F0;\" class=\"tip\" title=\"'.addslashes($LANG['documentation_canal']).' ReadTheDocs\"><i class=\"fa fa-book\"></i></a>\n            &nbsp;\n            <a href=\"https://www.reddit.com/r/TeamPass/\" target=\"_blank\" style=\"color:#F0F0F0;\" class=\"tip\" title=\"'.addslashes($LANG['admin_help']).'\"><i class=\"fa fa-reddit-alien\"></i></a>\n        </div>\n        <div style=\"float:left;width:32%;text-align:center;\">\n            ', ($session_user_id !== null && empty($session_user_id) === false) ? '<i class=\"fa fa-users\"></i>&nbsp;'.$_SESSION['nb_users_online'].'&nbsp;'.$LANG['users_online'].'&nbsp;|&nbsp;<i class=\"fa fa-hourglass-end\"></i>&nbsp;'.$LANG['index_expiration_in'].'&nbsp;<div style=\"display:inline;\" id=\"countdown\"></div>' : '', '\n        </div><div id=\"countdown2\"></div>\n        <div style=\"float:right;text-align:right;\">\n            <i class=\"fa fa-clock-o\"></i>&nbsp;'. $LANG['server_time'].\" : \".@date($SETTINGS['date_format'], (string) $_SERVER['REQUEST_TIME']).\" - \".@date($SETTINGS['time_format'], (string) $_SERVER['REQUEST_TIME']).'\n        </div>\n    </div>';\n// PAGE LOADING\n    echo '\n    <div id=\"div_loading\" class=\"hidden\">\n        <div style=\"padding:5px; z-index:9999999;\" class=\"ui-widget-content ui-state-focus ui-corner-all\">\n            <i class=\"fa fa-cog fa-spin fa-2x\"></i>\n        </div>\n    </div>';\n// Alert BOX\n    echo '\n    <div id=\"div_dialog_message\" style=\"display:none;\">\n        <div id=\"div_dialog_message_text\" style=\"text-align:center; padding:4px; font-size:12px; margin-top:10px;\"></div>\n    </div>';\n\n// WARNING FOR QUERY ERROR\n    echo '\n    <div id=\"div_mysql_error\" style=\"display:none;\">\n        <div style=\"padding:10px;text-align:center;\" id=\"mysql_error_warning\"></div>\n    </div>';\n\n\n//Personnal SALTKEY\n    if (isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] === \"1\") {\n        echo '\n        <div id=\"div_set_personal_saltkey\" style=\"display:none;padding:4px;\">\n            <i class=\"fa fa-key\"></i> <b>'.$LANG['home_personal_saltkey'].'</b>\n            <input type=\"password\" name=\"input_personal_saltkey\" id=\"input_personal_saltkey\" style=\"width:200px;padding:5px;margin-left:30px;\" class=\"text ui-widget-content ui-corner-all text_without_symbols tip\" value=\"', isset($_SESSION['user_settings']['clear_psk']) ? (string) $_SESSION['user_settings']['clear_psk'] : '', '\" title=\"<i class=\\'fa fa-bullhorn\\'></i>&nbsp;'.$LANG['text_without_symbols'].'\" />\n            <span id=\"set_personal_saltkey_last_letter\" style=\"font-weight:bold;font-size:20px;\"></span>\n            <div style=\"display:none;margin-top:5px;text-align:center;padding:4px;\" id=\"set_personal_saltkey_warning\" class=\"ui-widget-content ui-state-error ui-corner-all\"></div>\n        </div>';\n    }\n\n// user profile\n    echo '\n<div id=\"dialog_user_profil\" style=\"display:none;padding:4px;\">\n    <div id=\"div_user_profil\">\n        <i class=\"fa fa-cog fa-spin fa-2x\"></i>&nbsp;<b>'.$LANG['please_wait'].'</b>\n    </div>\n</div>';\n\n// DUO box\n    echo '\n<div id=\"dialog_duo\" style=\"display:none;padding:4px;\">\n    <div id=\"div_duo\"></div>\n    '.$LANG['duo_loading_iframe'].'\n    <form method=\"post\" id=\"duo_form\" action=\"#\">\n        <input type=\"hidden\" id=\"duo_login\" name=\"duo_login\" value=\"', null !== $post_duo_login ? $post_duo_login : '', '\" />\n        <input type=\"hidden\" id=\"duo_data\" name=\"duo_data\" value=\"', null !== $post_duo_data ? htmlentities(base64_decode($post_duo_data)) : '', '\" />\n    </form>\n</div>';\n\n// INCREASE session time\n    echo '\n<div id=\"div_increase_session_time\" style=\"display:none;padding:4px;\">\n    <b>'.$LANG['index_session_duration'].':</b>\n    <input type=\"text\" id=\"input_session_duration\" style=\"width:50px;padding:5px;margin:0 10px 0 10px;\" class=\"text ui-widget-content ui-corner-all\" value=\"', isset($_SESSION['user_settings']['session_duration']) ? (int) $_SESSION['user_settings']['session_duration'] / 60 : 60, '\" />\n    <b>'.$LANG['minutes'].'</b>\n    <div style=\"display:none;margin-top:5px;text-align:center;padding:4px;\" id=\"input_session_duration_warning\" class=\"ui-widget-content ui-state-error ui-corner-all\"></div>\n</div>';\n\n    closelog();\n\n?>\n<script type=\"text/javascript\">NProgress.start();</script>\n    </body>\n</html>", "<?php\n/**\n * @file          items.load.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n$var['hidden_asterisk'] = '<i class=\"fa fa-eye fa-border fa-sm tip\" title=\"'.$LANG['show_password'].'\"></i>&nbsp;&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>';\n\n// load csrfprotector\n$csrfp_config = include $SETTINGS['cpassman_dir'].'/includes/libraries/csrfp/libs/csrfp.config.php';\n?>\n\n<script type=\"text/javascript\">\n//<![CDATA[\n    var query_in_progress = 0;\n\n    $(document).on('focusin', function(e) {e.stopImmediatePropagation();});\n\n//  Part of Safari 6 OS X fix\n    //  clean up HTML for sending via JSON to PHP code\n    function clean_up_html_safari(input)\n    {\n        //  applies to Safari 6 on OS X only, so check for that\n        user_agent = navigator.userAgent;\n        if (/Mac OS X.+6\\.\\d\\.\\d\\sSafari/.test(user_agent))\n        {\n            // remove strange divs\n            input = input.replace(/<\\/*div.+>\\n/g, '');\n            /**/\n            //  remove other strange tags\n            allowed_tags = '<strong><em><strike><ol><li><ul><a><br>';\n            input = strip_tags(input, allowed_tags);\n\n            //  replace special characters\n            input = input.replace(/(\\r\\n|\\n|\\r)/gm, '<br>')\n                                                .replace(/\\t/g, '')\n                                                .replace(/\\f/g, '')\n                                                .replace(/\\v/g, '')\n                                                .replace(/\\r/g, '');\n        }\n        return input;\n    }/* */\n\n    function AddNewNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).addNode(1,'A New Node')\n    }\n\n    function EditNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).addNode(1,'A New Node')\n    }\n\n    function DeleteNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).delNode()\n    }\n\n    //FUNCTION mask/unmask passwords characters\n    function ShowPassword(pw)\n    {\n        if ($(\"#selected_items\").val() == \"\") return;\n\n        if ($('#id_pw').html().indexOf(\"fa-asterisk\") != -1) {\n            itemLog(\"item_password_shown\");\n            $('#id_pw').text($('#hid_pw').val());\n        } else {\n            $('#id_pw').html('<?php echo $var[\"hidden_asterisk\"]; ?>');\n        }\n    }\n\n    $(\"#tabs-02\").on(\n        \"change\",\n        \"#pw1\",\n        function() {\n            $('#visible_pw').val($('#pw1').val());\n        }\n    );\n\n    function ShowPasswords_EditForm()\n    {\n        if ($('#edit_visible_pw').is(\":visible\")) {\n            $('#edit_visible_pw').addClass(\"hidden\");\n        } else {\n            $('#edit_visible_pw').show();\n        }\n    }\n\n    $(\"#edit_pw1\").keyup(function() {\n        $(\"#edit_visible_pw\").text( this.value );\n    });\n\n    $(\"#pw1\").keyup(function() {\n        $(\"#visible_pw\").text( this.value );\n    });\n\n\n\n    /**\n     * Open a dialogbox\n     * @access public\n     * @return void\n     **/\n    function OpenDialog(id, modal)\n    {\n        if ($(\"#selected_items\").val() == \"\") return;\n\n        if (modal == \"false\") {\n            $(\"#\"+id).dialog(\"option\", \"modal\", false);\n        } else {\n            $(\"#\"+id).dialog(\"option\", \"modal\", true);\n        }\n        $(\"#\"+id).dialog(\"open\");\n    }\n\n/*\n*\n*/\nfunction LoadTreeNode(node_id)\n{\n\n}\n\n//###########\n//## FUNCTION : Launch the listing of all items of one category\n//###########\nvar requestRunning = false;\nfunction ListerItems(groupe_id, restricted, start, stop_listing_current_folder)\n{\n    var me = $(this);\n    stop_listing_current_folder = stop_listing_current_folder || \"0\";\n\n    // case where we should stop listing the items\n    if ($(\"#items_listing_should_stop\").val() === \"1\") {\n        requestRunning = false;\n        $(\"#items_listing_should_stop\").val(\"0\");\n        return false;\n    }\n\n    if (stop_listing_current_folder === 1) {\n        me.data('requestRunning', false);\n        $(\"#new_listing_characteristics\").val(groupe_id+\",\"+restricted+\",\"+start+\",0\");\n    } else {\n        $(\"#new_listing_characteristics\").val(\"\");\n    }\n\n\n    // prevent launch of similar query in case of doubleclick\n    if (requestRunning === true) {\n        return false;\n    }\n    requestRunning = true;\n\n    $(\"#request_lastItem, #selected_items\").val(\"\");\n\n    if (groupe_id != undefined) {\n        //refreshTree(groupe_id);\n        if (query_in_progress != 0 && query_in_progress != groupe_id) {\n            request.abort();    //kill previous query if needed\n        }\n        query_in_progress = groupe_id;\n        //LoadingPage();\n        $(\"#items_list_loader\").removeClass(\"hidden\");\n        if (start == 0) {\n            //clean form\n            $('#id_label, #id_pw, #id_email, #id_url, #id_desc, #id_login, #id_info, #id_restricted_to, #id_files, #id_tags, #id_kbs, #item_extra_info, #item_viewed_x_times').html(\"\");\n            $(\"#items_list\").html(\"<ul class='liste_items 'id='full_items_list'></ul>\");\n        }\n        $(\"#items_list\").css(\"display\", \"\");\n\n        $(\"#hid_cat\").val(groupe_id);\n        if ($(\".tr_fields\") != undefined) $(\".tr_fields, .newItemCat, .editItemCat\").addClass(\"hidden\");\n\n        //Disable menu buttons\n        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n\n        $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;<?php echo addslashes($LANG[\"opening_folder\"]); ?>');\n\n        //ajax query\n        request = $.post(\"sources/items.queries.php\",\n            {\n                type        : \"lister_items_groupe\",\n                id          : groupe_id,\n                restricted  : restricted,\n                start       : start,\n                uniqueLoadData : $(\"#uniqueLoadData\").val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\",\n                nb_items_to_display_once : $(\"#nb_items_to_display_once\").val()\n            },\n            function(data) {\n                if (data == \"Hacking attempt...\") {\n                    alert(\"Hacking attempt...\");\n                    return false;\n                }\n                //get data\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                // reset doubleclick prevention\n                requestRunning = false;\n\n                // manage not allowed\n                if (data.error == \"not_allowed\") {\n                   $(\"#div_dialog_message_text\").html(data.error_text);\n                   $(\"#div_dialog_message\").dialog(\"open\");\n                   $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;Error');\n                   $(\"#items_list_loader\").addClass(\"hidden\");\n                   return false;\n                }\n\n                // to be done only in 1st list load\n                if (data.list_to_be_continued === \"end\") {\n                    $(\"#pf_selected\").val(data.IsPersonalFolder);\n\n                    // display path of folders\n                    if (data.arborescence != undefined) {\n                        var path_maxlength = 420;\n                        if ($(\"#path_fontsize\").val() != \"\") $(\"#items_path_var\").css('font-size', $(\"#path_fontsize\").val());\n                        if (data.IsPersonalFolder === 0) {\n                            $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;' + data.arborescence);\n                        } else {\n                            $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;<?php echo addslashes($LANG['personal_folder']); ?>&nbsp;:&nbsp;' + data.arborescence);\n                        }\n                        var path_levels = data.arborescence.split('&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;').length;\n                        if ($(\"#items_path_var\").width() > path_maxlength) {\n                            $(\"#path_fontsize\").val($(\"#items_path_var\").css('font-size'));\n                            // start reducing size of font\n                            $(\"#items_path_var\").css('font-size', parseInt($(\"#items_path_var\").css('font-size'))-1);\n                            if ($(\"#items_path_var\").width() > path_maxlength && path_levels < 2) {\n                                while ($(\"#items_path_var\").width() > path_maxlength) {\n                                    $(\"#items_path_var\").css('font-size', parseInt($(\"#items_path_var\").css('font-size')) - 1);\n                                }\n                            }\n\n                            if ($(\"#items_path_var\").width() > path_maxlength && path_levels >= 2) {\n                                // only take first and last\n                                var nb = 1;\n                                var totalPathLength = occupedWidth = 0;\n                                $(\".path_element\").each(function () {\n                                    totalPathLength += $(this).width();\n                                    if (nb != 1 && nb != (path_levels-1) && nb != path_levels) {\n                                        $(this).html(\"<span class='tip' title='\"+$(this).html()+\"'>...</span>\");\n                                    } else if (nb == path_levels) {\n                                        // next condition occurs if lasst folder name is too long\n                                        if (totalPathLength > path_maxlength) {\n                                            var lastTxt = $(this).html();\n                                            while ($(this).width() > (path_maxlength - occupedWidth)) {\n                                                lastTxt = lastTxt.slice(0, -1);\n                                                $(this).html(lastTxt);\n                                            }\n                                            $(this).html(lastTxt+\"...\");\n                                        }\n                                    }\n                                    occupedWidth += $(this).width()+15; // 15 pixels corresponds to the small right triangle\n                                    nb++;\n                                });\n                            }\n                        }\n                    } else {\n                        $(\"#items_path_var\").html('');\n                    }\n\n                    // store the categories to be displayed\n                    $(\"#display_categories\").val(data.displayCategories);\n\n                    // store type of access on folder\n                    $(\"#access_level\").val(data.access_level);\n\n                    // warn about a required change of personal SK\n                    if ($(\"#personal_upgrade_needed\").val() == \"1\" && data.recherche_group_pf === 1) {\n                        $(\"#dialog_upgrade_personal_passwords\").dialog(\"open\");\n                    }\n\n                    $(\"#items_loading_progress\").remove();\n\n                    // show correct fodler in Tree\n                    $(\"#jstree\").jstree(\"deselect_all\");\n                    $('#jstree').jstree(\"select_node\", \"#li_\"+groupe_id);\n                } else {\n                    $(\"#uniqueLoadData\").val(data.uniqueLoadData);\n                    if ($(\"#items_loading_progress\").length == 0) {\n                        $(\"#items_list_loader\").after('<span id=\"items_loading_progress\">' + Math.round(data.next_start*100/data.counter_full, 0) + '%</span>');\n                    } else {\n                        $(\"#items_loading_progress\").html(Math.round(data.next_start*100/data.counter_full, 0) + '%');\n                    }\n                }\n\n\n                if (data.array_items == \"\" && data.items_count == \"0\") {\n                    $(\"#items_list\").html('<div style=\"text-align:center;margin-top:30px;\"><b><i class=\"fa fa-info-circle\"></i>&nbsp;<?php echo addslashes($LANG['no_item_to_display']); ?></b></div>');\n                }\n\n                if (data.error == \"is_pf_but_no_saltkey\") {\n                    //warn user about his saltkey\n                    $(\"#item_details_no_personal_saltkey\").show();\n                    $(\"#item_details_ok, #item_details_nok\").addClass(\"hidden\");\n\n                    $('#menu_button_add_item').prop('disabled', 'true');\n                    $(\"#items_list_loader, #div_loading\").addClass(\"hidden\");\n                } else if (data.error == \"not_authorized\" || data.access_level === \"\") {\n                    //warn user\n                    $(\"#hid_cat\").val(\"\");\n                    //$(\"#menu_button_copy_item, #menu_button_add_group, #menu_button_edit_group, #menu_button_del_group, #menu_button_add_item, #menu_button_edit_item, #menu_button_del_item, #menu_button_history, #menu_button_share, #menu_button_otv\").prop('disabled', 'true');\n                    $(\"#item_details_nok\").removeClass(\"hidden\");\n                    $(\"#item_details_ok, #item_details_no_personal_saltkey\").addClass(\"hidden\");\n                    $(\"#items_list_loader\").addClass(\"hidden\");\n                } else if (($(\"#user_is_read_only\").val() == 1 && data.recherche_group_pf == 0) || data.access_level == 1) {\n                    //readonly user\n                    $(\"#recherche_group_pf\").val(data.saltkey_is_required);\n                    $(\"#item_details_no_personal_saltkey, #item_details_nok\").addClass(\"hidden\");\n                    $(\"#item_details_ok, #items_list\").removeClass(\"hidden\");\n\n                    $(\"#more_items\").remove();\n\n                    // show items\n                    $(\"#full_items_list\").append(data.items_html);\n                    if (data.list_to_be_continued === \"yes\") {\n                        //set next start for query\n                        $(\"#query_next_start\").val(data.next_start);\n                    } else {\n                        $(\"#query_next_start\").val(data.list_to_be_continued);\n\n                        // display Categories if needed\n                        if ($(\".tr_fields\") != undefined && data.displayCategories != \"\") {\n                            var liste = data.displayCategories.split(';');\n                            for (var i=0; i<liste.length; i++) {\n                                $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n                            }\n                        }\n                        if (data.saltkey_is_required == 1) {\n                            if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n                        }\n                    }\n\n                    proceed_list_update(stop_listing_current_folder);\n                } else {\n                    $(\"#recherche_group_pf\").val(data.saltkey_is_required);\n                    //Display items\n                    $(\"#item_details_no_personal_saltkey, #item_details_nok\").addClass(\"hidden\");\n                    $(\"#item_details_ok, #items_list\").removeClass(\"hidden\");\n\n                    $('#complexite_groupe').val(data.folder_complexity);\n                    $('#bloquer_creation_complexite').val(data.bloquer_creation_complexite);\n                    $('#bloquer_modification_complexite').val(data.bloquer_modification_complexite);\n\n                    // show items\n                    $(\"#full_items_list\").append(data.items_html);\n\n                    if (data.list_to_be_continued === \"yes\") {\n                        //set next start for query\n                        $(\"#query_next_start\").val(data.next_start);\n                    } else {\n                        $(\"#query_next_start\").val(data.list_to_be_continued);\n\n                        // display Categories if needed\n                        if ($(\".tr_fields\") != undefined && data.displayCategories != \"\") {\n                            var liste = data.displayCategories.split(';');\n                            for (var i=0; i<liste.length; i++) {\n                                $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n                            }\n                        }\n                        if (data.saltkey_is_required == 1) {\n                            if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n                        }\n                    }\n\n                    //If no data then empty\n                    if (data.array_items != null) {\n                        $(\".item_draggable\").draggable({\n                            handle: '.grippy',\n                            cursor: \"move\",\n                            opacity: 0.4,\n                            appendTo: 'body',\n                            stop: function(event, ui) {\n                                $(this).removeClass(\"ui-state-highlight\");\n                            },\n                            start: function(event, ui) {\n                                $(this).addClass(\"ui-state-highlight\");\n                            },\n                            helper: function(event) {\n                                return $(\"<div class='ui-widget-header' id='drop_helper'>\"+\"<?php echo addslashes($LANG['drag_drop_helper']); ?>\"+\"</div>\");\n                            }\n                        });\n                        $(\".folder\").droppable({\n                            hoverClass: \"ui-state-error\",\n                            tolerance: 'pointer',\n                            drop: function(event, ui) {\n                                ui.draggable.addClass(\"hidden\");\n                                LoadingPage();\n                                //move item\n                                $.post(\n                                    \"sources/items.queries.php\",\n                                    {\n                                        type     : \"move_item\",\n                                        item_id : ui.draggable.attr(\"id\"),\n                                        folder_id : $(this).attr(\"id\").substring(4),\n                                        key        : \"<?php echo $_SESSION['key']; ?>\"\n                                    },\n                                    function(data) {\n                                        //increment / decrement number of items in folders\n                                        $(\"#itcount_\"+data[0].from_folder).text(Math.floor($(\"#itcount_\"+data[0].from_folder).text())-1);\n                                        $(\"#itcount_\"+data[0].to_folder).text(Math.floor($(\"#itcount_\"+data[0].to_folder).text())+1);\n                                        $(\"#id_label, #item_viewed_x_times, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to, #id_tags, #id_kbs\").html(\"\");\n                                        LoadingPage();\n                                        displayMessage(\"<?php echo addslashes($LANG['alert_message_done']); ?>\");\n                                    },\n                                    \"json\"\n                               );\n                            }\n                        });\n                    }\n\n                    proceed_list_update(stop_listing_current_folder);\n                }\n            }\n        );\n    }\n}\n\nfunction pwGenerate(elem)\n{\n    if (elem != \"\") elem = elem+\"_\";\n    $(\"#\"+elem+\"pw1\").show().focus();\n\n    //show ajax image\n    $(\"#\"+elem+\"pw_wait\").removeClass(\"hidden\");\n\n    $.post(\n        \"sources/main.queries.php\",\n        {\n            type    : \"generate_a_password\",\n            size      : $(\"#\"+elem + 'pw_size').val(),\n            numerals      : $(\"#\"+elem + 'pw_numerics').prop(\"checked\"),\n            capitalize      : $(\"#\"+elem + 'pw_maj').prop(\"checked\"),\n            symbols      : $(\"#\"+elem + 'pw_symbols').prop(\"checked\"),\n            secure  : $(\"#\"+elem + 'pw_secure').prop(\"checked\"),\n            elem      : elem,\n            force      : \"false\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n               if (data.error == \"true\") {\n                   $(\"#div_dialog_message_text\").html(data.error_msg);\n                   $(\"#div_dialog_message\").dialog(\"open\");\n               } else {\n                $(\"#\"+elem+\"visible_pw\").text(data.key);\n                   $(\"#\"+elem+\"pw1, #\"+elem+\"pw2\").val(data.key);\n                $(\"#\"+elem+\"pw1\").focus();\n               }\n            //$(\"#\"+elem+\"pw1\").show().blur();\n            $(\"#\"+elem+\"pw_wait\").addClass(\"hidden\");\n        }\n   );\n}\n\nfunction pwCopy(elem)\n{\n    if (elem != \"\") elem = elem+\"_\";\n    $(\"#\"+elem + 'pw2').val($(\"#\"+elem + 'pw1').val());\n}\n\nfunction catSelected(val)\n{\n    $(\"#hid_cat\").val(val);\n}\n\n/**\n* Get Item complexity\n*/\nfunction RecupComplexite(val, edit, context)\n{\n    context = context || \"\";    // make context optional\n\n    var funcReturned = null;\n    $.ajaxSetup({async: false});\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"get_complixity_level\",\n            groupe  : val,\n            context : context,\n            item_id : $(\"#selected_items\").val()\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            funcReturned = 1;\n            if (data.error == undefined || data.error == 0) {\n                $(\"#complexite_groupe\").val(data.val);\n                $(\"#selected_folder_is_personal\").val(data.personal);\n                if (edit == 1) {\n                    $(\"#edit_complex_attendue\").html(\"<b>\"+data.complexity+\"</b>\");\n                    $(\"#edit_afficher_visibilite\").html(\"<span class='fa fa-users'></span>&nbsp;<b>\"+data.visibility+\"</b>\");\n                } else {\n                    $(\"#complex_attendue\").html(\"<b>\"+data.complexity+\"</b>\");\n                    $(\"#afficher_visibilite\").html(\"<span class='fa fa-users'></span>&nbsp;<b>\"+data.visibility+\"</b>\");\n                }\n            } else if (data.error == \"no_edition_possible\") {\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n                funcReturned = 0;\n            } else if (data.error == \"user_is_readonly\") {\n                displayMessage(data.message);\n                funcReturned = 0;\n            } else if (data.error == \"no_folder_creation_possible\" || data.error == \"no_folder_edition_possible\"  || data.error == \"delete_folder\") {\n                displayMessage('<i class=\"fa fa-warning\"></i>&nbsp;' + data.error_msg);\n                $(\"#div_loading\").addClass(\"hidden\");\n                funcReturned = 0;\n            } else {\n                $(\"#div_formulaire_edition_item\").dialog(\"close\");\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n            }\n            $(\"#div_loading\").addClass(\"hidden\");\n        }\n   );\n    $.ajaxSetup({async: true});\n    return funcReturned;\n}\n\n/**\n* Check if Item has been changed since loaded\n*/\nfunction CheckIfItemChanged()\n{\n    var funcReturned = null;\n    $.ajaxSetup({async: false});\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type        : \"is_item_changed\",\n            timestamp   : $(\"#timestamp_item_displayed\").val(),\n            item_id     : $(\"#selected_items\").val()\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            if (data.modified == 1) {\n                funcReturned = 1;\n            } else {\n                funcReturned = 0;\n            }\n        }\n   );\n    $.ajaxSetup({async: true});\n    return funcReturned;\n}\n\nfunction AjouterItem()\n{\n    $(\"#div_formulaire_saisi_info\").show().html(\"<?php echo \"<i class='fa fa-cog fa-spin fa-lg'></i>&nbsp;\".addslashes($LANG['please_wait']).\"...\"; ?>\");\n    LoadingPage();\n    $(\"#error_detected\").val('');   //Refresh error foolowup\n    var erreur = \"\";\n    var  reg=new RegExp(\"[.|;|:|!|=|+|-|*|/|#|\\\"|'|&|]\");\n\n    //Complete url format\n    var url = $(\"#url\").val();\n    if (url.substring(0,7) != \"http://\" && url!=\"\" && url.substring(0,8) != \"https://\" && url.substring(0,6) != \"ftp://\" && url.substring(0,6) != \"ssh://\") {\n        url = \"http://\"+url;\n    }\n\n    // do checks\n    if ($(\"#label\").val() == \"\") erreur = \"<?php echo addslashes($LANG['error_label']); ?>\";\n    else if ($(\"#pw1\").val() === \"\" && $(\"#create_item_without_password\").val() !== \"1\") erreur = \"<?php echo addslashes($LANG['error_pw']); ?>\";\n    else if ($(\"#categorie\").val() == \"na\") erreur = \"<?php echo addslashes($LANG['error_group']); ?>\";\n    else if ($(\"#pw1\").val() != $(\"#pw2\").val()) erreur = \"<?php echo addslashes($LANG['error_confirm']); ?>\";\n    else if ($(\"#enable_delete_after_consultation\").is(':checked') && (($(\"#times_before_deletion\").val() < 1 && $(\"#deletion_after_date\").val() == \"\") || ($(\"#times_before_deletion\").val() == \"\" && $(\"#deletion_after_date\").val() == \"\"))) erreur = \"<?php echo addslashes($LANG['error_times_before_deletion']); ?>\";\n    else if ($(\"#item_tags\").val() != \"\" && reg.test($(\"#item_tags\").val())) erreur = \"<?php echo addslashes($LANG['error_tags']); ?>\";\n    else if (($('#recherche_group_pf').val() === \"1\" || $('#selected_folder_is_personal').val() === \"1\") && $('#personal_sk_set').val() === \"0\") {\n        erreur = \"<?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?>\";\n    } else{\n        //Check pw complexity level\n        if (\n            ($(\"#bloquer_creation_complexite\").val() == 0 && parseInt($(\"#mypassword_complex\").val()) >= parseInt($(\"#complexite_groupe\").val()))\n            ||\n            ($(\"#bloquer_creation_complexite\").val() == 1)\n            ||\n            ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)\n            ||\n            $(\"#create_item_without_password\").val() === \"1\"\n      ) {\n            //Manage restrictions\n            var restriction = restriction_role = \"\";\n            $(\"#restricted_to_list option:selected\").each(function () {\n                //check if it's a role\n                if ($(this).val().indexOf('role_') != -1) {\n                    restriction_role += $(this).val().substring(5) + \";\";\n                } else {\n                    restriction += $(this).val() + \";\";\n                }\n            });\n            if (restriction != \"\" && restriction.indexOf($('#form_user_id').val()) == \"-1\")\n                restriction = $('#form_user_id').val()+\";\"+restriction\n            if (restriction == \";\") restriction = \"\";\n\n            //Manage diffusion list\n            var diffusion = \"\";\n            $(\"#annonce_liste_destinataires option:selected\").each(function () {\n                diffusion += $(this).val() + \";\";\n            });\n            if (diffusion == \";\") diffusion = \"\";\n\n            //Manage description\n            if (CKEDITOR.instances && CKEDITOR.instances[\"edit_desc\"]) {\n                CKEDITOR.instances[\"edit_desc\"].destroy();\n            }\n            if (CKEDITOR.instances && CKEDITOR.instances[\"desc\"]) {\n                var description = sanitizeString(CKEDITOR.instances[\"desc\"].getData()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            } else {\n                var description = sanitizeString($(\"#desc\").val()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            // Sanitize description with Safari\n            description = clean_up_html_safari(description);\n\n            //Is PF\n            if ($('#selected_folder_is_personal').val() == 1 && $('#personal_sk_set').val() == 1) {\n                var is_pf = 1;\n            } else {\n                var is_pf = 0;\n            }\n\n            //To be deleted\n            if ($(\"#enable_delete_after_consultation\").is(':checked') && ($(\"#times_before_deletion\").val() >= 1 || $(\"#deletion_after_date\").val() != \"\")) {\n                if ($(\"#times_before_deletion\").val() >= 1) {\n                    var to_be_deleted = $(\"#times_before_deletion\").val();\n                } else if ($(\"#deletion_after_date\").val() != \"\") {\n                    var to_be_deleted = $(\"#deletion_after_date\").val();\n                }\n            } else {\n                var to_be_deleted = \"\";\n            }\n\n            // get item field values\n            var fields = \"\";\n            $('.item_field').each(function(i){\n                id = $(this).attr('id').split('_');\n                if (fields == \"\") fields = id[1] + '~~' + $(this).val() + '~~' + id[2];\n                else fields += '_|_' + id[1] + '~~' + $(this).val() + '~~' + id[2];\n            });\n\n            // check if a folder is selected\n            var selected_folder;\n            if ($('#categorie').val() === \"\" || $('#categorie').val() === null) {\n                selected_folder = $('#hid_cat').val();\n            } else {\n                selected_folder = $('#categorie').val();\n            }\n\n            //prepare data\n            var data = {\"pw\": sanitizeString($('#pw1').val()) , \"label\": sanitizeString($('#label').val()) ,\n                \"login\": sanitizeString($('#item_login').val()) , \"is_pf\": is_pf.toString() ,\n                \"description\": (description) , \"email\": $('#email').val() , \"url\": url , \"categorie\": selected_folder ,\n                \"restricted_to\": restriction , \"restricted_to_roles\": restriction_role ,\n                \"salt_key_set\": $('#personal_sk_set').val() , \"diffusion\": diffusion , \"id\": $('#id_item').val() ,\n                \"anyone_can_modify\": $('#anyone_can_modify:checked').val() , \"tags\": sanitizeString($('#item_tags').val()) ,\n                \"random_id_from_files\": $('#random_id').val() , \"to_be_deleted\": to_be_deleted ,\n                \"fields\": sanitizeString(fields) , \"complexity_level\": parseInt($(\"#mypassword_complex\").val())};\n\n            //Send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"new_item\",\n                    data     : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").dialog(\"open\");\n\n                        return;\n                    }\n\n                    //Check errors\n                    if (data.error === \"item_exists\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('<?php echo addslashes($LANG['error_item_exists']); ?>');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_KEY_NOT_CORRECT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Key verification for Query is not correct!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_FOLDER_NOT_ALLOWED\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('User not allowed to access this folder!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_TOO_LONG\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('<?php echo addslashes($LANG['error_pw_too_long']); ?>');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Item password could not be correctly encrypted!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_EMPTY\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Item password is empty!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_ENCRYPTION\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html(data.msg);\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.new_id != \"\") {\n                        $(\"#new_show_error\").addClass(\"hidden\");\n\n                        //add new line directly in list of items\n                        $(\"#full_items_list\").append(data.new_entry);\n\n                        //Increment counter\n                        $(\"#itcount_\"+$(\"#hid_cat\").val()).text(Math.floor($(\"#itcount_\"+$(\"#hid_cat\").val()).text())+1);\n\n                        // prepare the display of the new item\n                        AfficherDetailsItem(data.new_id);\n\n                        // refresh list of items\n                        ListerItems($('#categorie').val(), \"\", 0)\n\n                        refreshTree($('#categorie').val());\n\n                        //empty form\n                        $(\"#label, #item_login, #email, #url, #pw1, #visible_pw, #pw2, #item_tags, #deletion_after_date, #times_before_deletion, #mypassword_complex\").val(\"\");\n                        CKEDITOR.instances[\"desc\"].setData(\"\");\n\n                        $(\"#item_tabs\").tabs({selected: 0});\n                        $('ul#full_items_list>li').tsort(\"\",{order:\"asc\",attr:\"name\"});\n                        $(\".fields, .item_field, #categorie, #random_id\").val(\"\");\n                        $(\".fields_div, #item_file_queue, #display_title, #visible_pw\").html(\"\");\n\n                        $(\"#div_formulaire_saisi\").dialog('close');\n                        $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                    }\n                    $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n                    $(\"#div_loading\").addClass(\"hidden\");\n                }\n           );\n        } else {\n            $('#new_show_error').html(\"<?php echo addslashes($LANG['error_complex_not_enought']); ?>\").show();\n            $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n            $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n        }\n    }\n    if (erreur != \"\") {\n        $('#new_show_error').html(erreur).show();\n        $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n    }\n}\n\nfunction EditerItem()\n{\n    $(\"#div_formulaire_edition_item_info\").html(\"<?php echo \"<i class='fa fa-cog fa-spin fa-lg'></i>&nbsp;\".addslashes($LANG['please_wait']).\"...\"; ?>\").show();\n    $(\"#item_detail_zone_loader\").addClass(\"hidden\");\n    var erreur = \"\";\n    var  reg=new RegExp(\"[.|,|;|:|!|=|+|-|*|/|#|\\\"|'|&]\");\n\n    //Complete url format\n    var url = $(\"#edit_url\").val();\n    if (url.substring(0,7) != \"http://\" && url!=\"\" && url.substring(0,8) != \"https://\" && url.substring(0,6) != \"ftp://\" && url.substring(0,6) != \"ssh://\") {\n        url = \"http://\"+url;\n    }\n\n    // do checks\n    if ($('#edit_label').val() == \"\") erreur = \"<?php echo addslashes($LANG['error_label']); ?>\";\n    else if ($(\"#edit_pw1\").val() === \"\" && $(\"#create_item_without_password\").val() !== \"1\") erreur = \"<?php echo addslashes($LANG['error_pw']); ?>\";\n    else if ($(\"#edit_pw1\").val() != $(\"#edit_pw2\").val()) erreur = \"<?php echo addslashes($LANG['error_confirm']); ?>\";\n    else if ($(\"#edit_tags\").val() != \"\" && reg.test($(\"#edit_tags\").val())) erreur = \"<?php echo addslashes($LANG['error_tags']); ?>\";\n    else if ($(\"#edit_categorie option:selected\").val() == \"\" || typeof  $(\"#edit_categorie option:selected\").val() === \"undefined\")  erreur = \"<?php echo addslashes($LANG['error_no_selected_folder']); ?>\";\n    else{\n        //Check pw complexity level\n        if ((\n                $(\"#bloquer_modification_complexite\").val() == 0 &&\n                parseInt($(\"#edit_mypassword_complex\").val()) >= parseInt($(\"#complexite_groupe\").val())\n           )\n            ||\n            ($(\"#bloquer_modification_complexite\").val() == 1)\n            ||\n            ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)\n            ||\n            $(\"#create_item_without_password\").val() === \"1\"\n      ) {\n            LoadingPage();  //afficher image de chargement\n            var annonce = 0;\n            if ($('#edit_annonce').attr('checked')) annonce = 1;\n            $(\"#item_detail_zone_loader\").show();\n\n\n            //Manage restriction\n            var restriction = restriction_role = \"\";\n            $(\"#edit_restricted_to_list option:selected\").each(function () {\n                if ($(this).val().indexOf('role_') != -1) {\n                    restriction_role += $(this).val() + \";\";\n                } else {\n                    restriction += $(this).val() + \";\";\n                }\n            });\n            if (restriction != \"\" && restriction.indexOf($('#form_user_id').val()) == \"-1\")\n                restriction = $('#form_user_id').val()+\";\"+restriction\n            if (restriction == \";\") restriction = \"\";\n\n\n            //Manage diffusion list\n            var myselect = document.getElementById('edit_annonce_liste_destinataires');\n            var diffusion = \"\";\n            for (var loop=0; loop < myselect.options.length; loop++) {\n                if (myselect.options[loop].selected === true) diffusion = diffusion + myselect.options[loop].value + \";\";\n            }\n            if (diffusion == \";\") {\n                diffusion = \"\";\n            }\n\n            //Manage description\n            if (CKEDITOR.instances[\"edit_desc\"]) {\n                var description = sanitizeString(CKEDITOR.instances[\"edit_desc\"].getData()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            } else {\n                var description = sanitizeString($(\"#edit_desc\").val()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            // Sanitize description with Safari\n            description = clean_up_html_safari(description);\n\n            //Is PF\n            if ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1) {\n                var is_pf = 1;\n            } else {\n                var is_pf = 0;\n            }\n\n          //To be deleted\n            if ($(\"#edit_enable_delete_after_consultation\").is(':checked')\n                && ($(\"#edit_times_before_deletion\").val() >= 1 || $(\"#edit_deletion_after_date\").val() != \"\")\n            ) {\n                if ($(\"#edit_times_before_deletion\").val() >= 1) {\n                    var to_be_deleted = $(\"#edit_times_before_deletion\").val();\n                    //var to_be_deleted_after_date = \"\";\n                } else if ($(\"#edit_deletion_after_date\").val() != \"\") {\n                    //var to_be_deleted = \"0\";\n                    var to_be_deleted = $(\"#edit_deletion_after_date\").val();\n                }\n            } else {\n                var to_be_deleted = \"\";\n                //var to_be_deleted_after_date = \"\";\n            }\n\n            // get item field values\n            var fields = \"\";\n            $('.edit_item_field').each(function(i){\n                id = $(this).attr('id').split('_');\n                if (fields == \"\") fields = id[2] + '~~' + $(this).val();\n                else fields += '_|_' + id[2] + '~~' + $(this).val();\n            });\n\n              //prepare data\n            var data = {\"pw\": sanitizeString($('#edit_pw1').val()) , \"label\": sanitizeString($('#edit_label').val()) ,\n                \"login\": sanitizeString($('#edit_item_login').val()) , \"is_pf\": is_pf ,\n                \"description\": description , \"email\": $('#edit_email').val() , \"url\": url ,\n                \"categorie\": $(\"#edit_categorie option:selected\").val() , \"restricted_to\": restriction ,\n                \"restricted_to_roles\": restriction_role , \"salt_key_set\": $('#personal_sk_set').val() ,\n                \"is_pf\": $('#recherche_group_pf').val() , \"annonce\": annonce , \"diffusion\": diffusion ,\n                \"id\": $('#id_item').val() , \"anyone_can_modify\": $('#edit_anyone_can_modify:checked').val() ,\n                \"tags\": sanitizeString($('#edit_tags').val()) , \"to_be_deleted\": to_be_deleted ,\n                \"fields\": sanitizeString(fields) , \"complexity_level\": parseInt($(\"#edit_mypassword_complex\").val())};\n\n            //send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"update_item\",\n                    data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\")\n                            .html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+\n                            data);\n                        $(\"#div_dialog_message\").dialog(\"open\");\n                        return;\n                    }\n\n                    //check if format error\n                    if (data.error == \"ERR_JSON_FORMAT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\").html(data.error + ' ERROR (JSON is broken)!!!!!');\n                        $(\"#edit_show_error\").show();\n                    } else if (data.error == \"ERR_KEY_NOT_CORRECT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\").html('Key verification for Query is not correct!');\n                        $(\"#edit_show_error\").show();\n                        LoadingPage();\n                    }else if (data.error == \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\").html('Item password could not be correctly encrypted!');\n                        $(\"#edit_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_TOO_LONG\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\").html('<?php echo addslashes($LANG['error_pw_too_long']); ?>');\n                        $(\"#edit_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_NOT_ALLOWED_TO_EDIT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('User not allowed to edit this Item!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error != \"\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\").html('<?php echo addslashes($LANG['error_not_allowed_to']); ?>');\n                        $(\"#edit_show_error\").show();\n                        LoadingPage();\n                    } else {\n                        //refresh item in list\n                        $(\"#fileclass\"+data.id).text($('#edit_label').val());\n\n                        //Refresh form\n                        $(\"#id_label\").text($('#edit_label').val());\n                        //$(\"#id_pw\").text($('#edit_pw1').val());\n                        $(\"#id_email\").html($('#edit_email').val());\n                        $(\"#id_url\").html($('#edit_url').val().escapeHTML());\n                        $(\"#id_desc\").html(description);\n                        $(\"#id_login\").html($('#edit_item_login').val());\n                        $(\"#id_restricted_to\").html(data.list_of_restricted);\n                        $(\"#id_tags\").html(data.tags);\n                        $(\"#id_files\").html(unsanitizeString(data.files));\n                        $(\"#item_edit_list_files\").html(data.files_edit);\n                        $(\"#id_info\").html(unsanitizeString(data.history));\n                        $('#id_pw').html('<?php echo $var['hidden_asterisk']; ?>');\n\n                        //Refresh hidden data\n                        $(\"#hid_label\").val($('#edit_label').val());\n                        $(\"#hid_pw\").val($('#edit_pw1').val());\n                        $(\"#hid_email\").val($('#edit_email').val());\n                        $(\"#hid_url\").val($('#edit_url').val().escapeHTML());\n                        $(\"#hid_desc\").val(description);\n                        $(\"#hid_login\").val($('#edit_item_login').val());\n                        $(\"#hid_restricted_to\").val(restriction);\n                        $(\"#hid_restricted_to_roles\").val(restriction_role);\n                        $(\"#hid_tags\").val($('#edit_tags').val());\n                        $(\"#hid_files\").val(data.files);\n                        /*$(\"#id_categorie\").html(data.id_tree);\n                        $(\"#id_item\").html(data.id);*/\n\n                        // refresh fields\n                        if ($('.edit_item_field').val() != undefined) {\n                            $('.tr_fields').addClass(\"hidden\");\n                            $('.edit_item_field').each(function(i){\n                                id = $(this).attr('id').split('_');\n                                if ($(this).val() !== \"\") {\n                                    // copy data from form to Item Div\n                                    $('#id_field_' + id[2]).html($(this).val());\n                                    $('#hid_field_' + id[2] + '_' + id[3]).val($(this).val());\n                                    $('#cf_tr_' + id[2] + ', .editItemCatName_' + id[3] + ', #tr_catfield_' + id[3]).show()\n                                } else {\n                                    $('#hid_field_' + id[2] + '_' + id[3]).val('');\n                                }\n                                // clear form\n                                $(this).val(\"\");\n                            });\n                        }\n                        $(\"#edit_display_title, #edit_visible_pw\").html(\"\");\n\n                        //calling image lightbox when clicking on link\n                        $(\"a.image_dialog\").click(function(event) {\n                            event.preventDefault();\n                            PreviewImage($(this).attr(\"href\"),$(this).attr(\"title\"));\n                        });\n\n                        //Change title in \"last items list\"\n                        $(\"#last_items_\"+data.id).text($('#edit_label').val());\n\n                        //Clear upload queue\n                        $('#item_edit_file_queue').html('');\n                        //Select 1st tab\n                        $(\"#item_edit_tabs\").tabs({ selected: 0 });\n\n                        //if reload page is needed\n                        if (data.reload_page == \"1\") {\n                            //reload list\n                            ListerItems($('#hid_cat').val(), \"\", 0)\n                            //increment / decrement number of items in folders\n                            $(\"#itcount_\"+$('#hid_cat').val()).text(Math.floor($(\"#itcount_\"+$('#hid_cat').val()).text())-1);\n                            $(\"#itcount_\"+$('#edit_categorie').val()).text(Math.floor($(\"#itcount_\"+$('#edit_categorie').val()).text())+1);\n                        }\n\n                        // tags\n                        $(\".round-grey\").addClass(\"ui-state-highlight ui-corner-all\");\n\n                        //Prepare clipboard copies\n                        if ($('#edit_pw1').val() != \"\") {\n                            new Clipboard(\"#menu_button_copy_pw, #button_quick_pw_copy\", {\n                                text: function() {\n                                    return unsanitizeString($('#edit_pw1').val());\n                                }\n                            });\n\n                            $(\"#button_quick_pw_copy\").show();\n                        } else {\n                            $(\"#button_quick_pw_copy\").addClass(\"hidden\");\n                        }\n                        if ($('#edit_item_login').val() != \"\") {\n                            var clipboard_elogin = new Clipboard(\"#menu_button_copy_login, #button_quick_login_copy\", {\n                                text: function() {\n                                    return unsanitizeString($('#edit_item_login').val());\n                                }\n                            });\n                            $(\"#button_quick_login_copy\").show();\n                        } else {\n                            $(\"#button_quick_login_copy\").addClass(\"hidden\");\n                        }\n\n\n                        $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        //Close dialogbox\n                        $(\"#div_formulaire_edition_item\").dialog('close');\n                        $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        //hide loader\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n                }\n           );\n\n           // statistic\n           /*$.post(\n                \"sources/main.queries.php\",\n                {\n                    type                : 'item_stat',\n                    id                  : $('#id_item').val(),\n                    stat_action                : \"item\"\n                },\n                function(data) {\n\n                }\n            );*/\n\n        } else {\n            $('#edit_show_error').html(\"<?php echo addslashes($LANG['error_complex_not_enought']); ?>\").show();\n            $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n            $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n        }\n    }\n\n    if (erreur != \"\") {\n        $('#edit_show_error').html(erreur).show();\n        $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n        $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n    }\n}\n\nfunction AddNewFolder()\n{\n    if ($(\"#new_rep_titre\").val() == \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_label']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#new_rep_groupe\").val() === \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_noparent']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#new_rep_complexite\").val() == \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_complex']); ?>\").removeClass(\"hidden\");\n    } else if (/^\\d+$/.test($(\"#new_rep_titre\").val())) {\n        // check if folder title contains only numbers\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#user_ongoing_action\").val() == \"\") {\n        $(\"#add_folder_loader\").removeClass(\"hidden\");\n        $(\"#user_ongoing_action\").val(\"true\");\n        $(\"#new_rep_show_error\").addClass(\"hidden\");\n        if ($(\"#new_rep_role\").val() == undefined) {\n            role_id = \"<?php echo $_SESSION['fonction_id']; ?>\";\n        } else {\n            role_id = $(\"#new_rep_role\").val();\n        }\n\n        //prepare data\n        var data = {\"title\": sanitizeString($('#new_rep_titre').val()),\n            \"complexity\": sanitizeString($('#new_rep_complexite').val()), \"is_pf\": $('#pf_selected').val(),\n            \"parent_id\": $(\"#new_rep_groupe option:selected\").val(), \"renewal_period\":\"0\"};\n\n        //send query\n        $.post(\n            \"sources/folders.queries.php\",\n            {\n                type   : \"add_folder\",\n                data   : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key    : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#user_ongoing_action\").val(\"\");\n                //Check errors\n                if (data[0].error == \"error_group_exist\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_exist']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error == \"error_html_codes\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_html_codes']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error == \"error_title_only_with_numbers\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error != \"\") {\n                    $(\"#new_rep_show_error\").html(data[0].error).removeClass(\"hidden\");\n                } else {\n                    $(\"#new_rep_titre\").val(\"\");\n                    refreshTree(data[0].newid);\n                    $(\"#div_ajout_rep\").dialog(\"close\");\n                }\n                $(\"#add_folder_loader\").addClass(\"hidden\");\n            },\n            \"json\"\n           );\n    }\n}\n\n\nfunction SupprimerFolder()\n{\n    if ($(\"#delete_rep_groupe_validate\").is(':checked') === false) {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['please_confirm']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else if ($(\"#delete_rep_groupe\").val() === \"0\") {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_group']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else if ($(\"#delete_rep_groupe option:selected\").text() === \"<?php echo $_SESSION['login']; ?>\") {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_not_allowed_to']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else {\n        $(\"#del_folder_loader\").show();\n        $.post(\n            \"sources/folders.queries.php\",\n            {\n                type    : \"delete_folder\",\n                id      : $(\"#delete_rep_groupe\").val(),\n                key        : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#del_folder_loader\").addClass(\"hidden\");\n\n                //decrypt data\n                try {\n                    data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                } catch (e) {\n                    // error\n                    $(\"#div_loading\").addClass(\"hidden\");\n                    $(\"#div_dialog_message_text\")\n                        .html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+\n                        data);\n                    $(\"#div_dialog_message\").dialog(\"open\");\n                    return;\n                }\n\n                if (data.error !== \"\") {\n                    if (data.error === \"ERR_SUB_FOLDERS_EXIST\") {\n                        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_cannot_delete_subfolders_exist']); ?>\").show(1).delay(3000).fadeOut(1000);\n\n                    } else if (data.error === \"ERR_FOLDER_NOT_ALLOWED\") {\n                        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_not_allowed_to']); ?>\").show(1).delay(3000).fadeOut(1000);\n                    }\n                } else {\n                    refreshTree(data.parent_id);\n                    ListerItems(data.parent_id,'', 0);\n                    $(\"#div_supprimer_rep\").dialog(\"close\");\n                }\n            }\n       );\n    }\n}\n\nfunction AfficherDetailsItem(id, salt_key_required, expired_item, restricted, display, open_edit, reload, id_tree)\n{\n    // If a request is already launched, then kill new.\n    if ($(\"#request_ongoing\").val() !== \"\") {\n        request.abort();\n        return;\n    }\n    id_tree = id_tree || \"\";\n    salt_key_required = salt_key_required || 0;\n    id_tree = id_tree || \"\";\n    id_tree = id_tree || \"\";\n\n    // Store status query running\n    $(\"#request_ongoing\").val(\"1\");\n\n    // If opening new item, reinit hidden fields\n    if ($(\"#request_lastItem\").val() != id) {\n        $(\"#request_lastItem\").val(\"\");\n        $(\"#item_editable\").val(\"\");\n    }\n\n    // Don't show details\n    if (display === \"no_display\") {\n        $(\"#item_details_nok\").removeClass(\"hidden\");\n        $(\"#item_details_ok\").addClass(\"hidden\");\n        $(\"#item_details_expired\").addClass(\"hidden\");\n        $(\"#item_details_expired_full\").addClass(\"hidden\");\n        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_url, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n        $(\"#request_ongoing\").val(\"\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n    if ($(\"#is_admin\").val() == \"1\") {\n        $('#menu_button_edit_item,#menu_button_del_item,#menu_button_copy_item').attr('disabled', 'disabled');\n    }\n\n    if ($(\"#edit_restricted_to\") != undefined) {\n        $(\"#edit_restricted_to\").val(\"\");\n    }\n\n    // Check if personal SK is needed and set\n    if (($('#recherche_group_pf').val() === \"1\" && $('#personal_sk_set').val() === \"0\") && salt_key_required === \"1\") {\n        $(\"#set_personal_saltkey_warning\").html(\"<div style='font-size:16px;'><span class='fa fa-warning fa-lg'></span>&nbsp;</span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?></div>\").show(1).delay(2500).fadeOut(1000);\n        $('#div_set_personal_saltkey').dialog('open');\n\n        //$(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='fa fa-warning fa-lg mi-red'></span>&nbsp;<\\/span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?><\\/div>\");\n        $(\"#div_loading\").addClass(\"hidden\");\n        //$(\"#div_dialog_message\").dialog(\"open\");\n        $(\"#request_ongoing\").val(\"\");\n        return false;\n    } else if ($('#recherche_group_pf').val() === \"0\" || ($('#recherche_group_pf').val() === \"1\" && $('#personal_sk_set').val() === \"1\")) {\n        // Double click\n        if (open_edit == 1 && $(\"#item_editable\").val() == 1 && reload != 1) {\n            $(\"#request_ongoing\").val(\"\");\n            open_edit_item_div(\n                <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === \"1\") {\n    echo 1;\n} else {\n    echo 0;\n}?>\n            );\n        } else if ($(\"#request_lastItem\").val() == id && reload != 1) {\n            $(\"#request_ongoing\").val(\"\");\n            LoadingPage();\n            return;\n        } else {\n            $(\"#timestamp_item_displayed\").val(\"\");\n            //Send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type                : 'show_details_item',\n                    id                  : id,\n                    folder_id           : $('#hid_cat').val(),\n                    salt_key_required   : $('#recherche_group_pf').val(),\n                    salt_key_set        : $('#personal_sk_set').val(),\n                    expired_item        : expired_item,\n                    restricted          : restricted,\n                    page                : \"items\",\n                    key                 : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data_raw) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data_raw , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data_raw);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error != \"\") {\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data.error);\n                        $(\"#div_dialog_message\").show();\n                    }\n\n                    // reset password shown info\n                    $(\"#pw_shown\").val(\"0\");\n\n                    // show some info on top\n                    if (data.auto_update_pwd_frequency != \"0\") var auto_update_pwd = \"<i class='fa fa-shield tip' title='<?php echo addslashes($LANG['server_auto_update_password_enabled_tip']); ?>'></i>&nbsp;<b>\"+data.auto_update_pwd_frequency+\"</b>&nbsp;|&nbsp;\";\n                    else var auto_update_pwd = \"\";\n                    $(\"#item_viewed_x_times\").html(auto_update_pwd+\"&nbsp;<i class='fa fa-sticky-note-o tip' title='Number of times item was displayed'></i>&nbsp;<b>\"+data.viewed_no+\"</b>\");\n\n                    // Show timestamp\n                    $(\"#timestamp_item_displayed\").val(data.timestamp);\n\n                    //Change the class of this selected item\n                    if ($(\"#selected_items\").val() != \"\") {\n                        $(\"#fileclass\"+$(\"#selected_items\").val()).removeClass(\"fileselected\");\n                    }\n                    $(\"#selected_items\").val(data.id);\n\n                    //Show saltkey\n                    if (data.edit_item_salt_key == \"1\") {\n                        $(\"#edit_item_salt_key\").show();\n                    } else {\n                        $(\"#edit_item_salt_key\").addClass(\"hidden\");\n                    }\n\n                    // clean some not used fields\n                    //$(\"#item_history_log, #edit_past_pwds, #hid_files, #item_edit_list_files\").html(\"\");\n\n                    //Show detail item\n                    if (data.show_detail_option == \"0\") {\n                        $(\"#item_details_ok\").removeClass(\"hidden\");\n                        $(\"#item_details_expired, #item_details_expired_full\").addClass(\"hidden\");\n                    }if (data.show_detail_option == \"1\") {\n                        $(\"#item_details_ok, #item_details_expired\").removeClass(\"hidden\");\n                        $(\"#item_details_expired_full\").addClass(\"hidden\");\n                    } else if (data.show_detail_option == \"2\") {\n                        $(\"#item_details_ok, #item_details_expired, #item_details_expired_full\").addClass(\"hidden\");\n                    }\n                    $(\"#item_details_nok\").addClass(\"hidden\");\n                    $(\"#fileclass\"+data.id).addClass(\"fileselected\");\n                    $(\"item_editable\").val(0);\n\n                    if (data.show_details == \"1\" && data.show_detail_option != \"2\") {\n                        //unprotect data\n                        data.login = unsanitizeString(data.login);\n\n                        $(\"#id_files\").html(\"\");\n\n                        //Display details\n                        $(\"#id_label\").html(data.label);\n                        $(\"#hid_label\").val(unsanitizeString(data.label));\n                        if (data.pw === \"\") {\n                            $(\"#id_pw\").html(\"\");\n                        } else {\n                            $(\"#id_pw\").html('<?php echo $var['hidden_asterisk']; ?>');\n                        }\n                        $(\"#hid_pw\").val(unsanitizeString(data.pw));\n                        if (data.url != \"\") {\n                            $(\"#id_url\").html(data.url+data.link);\n                            $(\"#hid_url\").val(data.url);\n                        } else {\n                            $(\"#id_url\").html(\"\");\n                            $(\"#hid_url\").val(\"\");\n                        }\n                        $(\"#id_desc\").html(data.description);\n                        $(\"#hid_desc\").val(data.description);\n                        $(\"#id_login\").html(data.login);\n                        $(\"#hid_login\").val(data.login);\n                        $(\"#id_email\").html(data.email);\n                        $(\"#hid_email\").val(data.email);\n                        //prepare nice list of users / groups\n                        var tmp_arr = data.id_restricted_to.split(\";\");\n                        var html_users = \"\";\n                        for (var i=0; i<tmp_arr.length; i++) {\n                            if (tmp_arr[i] !== \"\") html_users += \"<span class='round-grey'><i style='margin-right:2px;' class='fa fa-user fa-sm'></i>\"+tmp_arr[i]+\"</span>\";\n                        }\n                        var tmp_arr = data.id_restricted_to_roles.split(\";\");\n                        var html_groups = \"\";\n                        for (var i=0; i<tmp_arr.length; i++) {\n                            if (tmp_arr[i] !== \"\") html_groups += \"<span class='round-grey'><i style='margin-right:2px;' class='fa fa-group fa-sm'></i>\"+tmp_arr[i]+\"</span>\";\n                        }\n                        $(\"#id_restricted_to\").html(\n                            html_users+\n                            html_groups\n                        );\n                        $(\"#hid_restricted_to\").val(data.id_restricted_to);\n                        $(\"#hid_restricted_to_roles\").val(data.id_restricted_to_roles);\n                        $(\"#id_tags\").html(data.tags);\n                        // extract real tags list\n                        var item_tag = \"\";\n                        $(\"span.item_tag\").each(function(){\n                            if (item_tag == \"\") item_tag = $(this).text();\n                            else item_tag += \" \"+$(this).text();\n                        });\n                        $(\"#hid_tags\").val(item_tag);\n                        $(\"#hid_anyone_can_modify\").val(data.anyone_can_modify);\n                        $(\"#id_categorie\").val(data.folder);\n                        $(\"#id_item\").val(data.id);\n                        $(\"#id_kbs\").html(data.links_to_kbs);\n                        $(\".tip\").tooltipster({\n                            maxWidth: 400,\n                            contentAsHTML: true,\n                            multiple: true\n                        });\n\n                        // ---\n                        // Show Field values\n                        $(\".fields\").val(\"\");\n                        $(\".fields_div\").html(\"\");\n                        // If no CF then hide\n                        if (data.fields === \"\") {\n                            $(\".tr_fields\").addClass(\"hidden\");\n                        } else {\n                            $(\".tr_cf, .tr_fields\").removeClass(\"hidden\");\n                            var liste = data.fields.split('_|_');\n                            for (var i=0; i<liste.length; i++) {\n                                var field = liste[i].split('~~');\n                                $(\"#cf_tr_\" + field[0] + \", #tr_catfield_\" + field[2]).show();\n                                $('#hid_field_' + field[0] + '_' + field[2]).val(field[1]);\n                                if (field[3] === \"masked\") {\n                                    $('#id_field_' + field[0] + '_' + field[2])\n                                        .html('<?php echo $var['hidden_asterisk']; ?>');\n                                } else {\n                                    $('#id_field_' + field[0] + '_' + field[2])\n                                        .html(field[1]);\n                                }\n                            }\n                        }\n\n                        //Anyone can modify button\n                        if (data.anyone_can_modify == \"1\") {\n                            $(\"#edit_anyone_can_modify\").attr('checked', true);\n                            $(\"#new_history_entry_form\").show();\n                        } else {\n                            $(\"#edit_anyone_can_modify\").attr('checked', false);\n                            $(\"#new_history_entry_form\").addClass(\"hidden\");\n                        }\n\n                        //Show to be deleted in case activated\n                        if (data.to_be_deleted == \"not_enabled\") {\n                            $(\"#edit_to_be_deleted\").addClass(\"hidden\");\n                        } else {\n                            $(\"#edit_to_be_deleted\").show();\n                            if (data.to_be_deleted != \"\") {\n                                $(\"#edit_enable_delete_after_consultation\").attr(\"checked\",true);\n                                if (data.to_be_deleted_type == 2) {\n                                    $(\"#edit_times_before_deletion\").val(\"\");\n                                    $(\"#edit_deletion_after_date\").val(data.to_be_deleted);\n                                } else {\n                                    $(\"#edit_times_before_deletion\").val(data.to_be_deleted);\n                                    $(\"#edit_deletion_after_date\").val(\"\");\n                                }\n                            } else {\n                                $(\"#edit_enable_delete_after_consultation\").attr(\"checked\",false);\n                                $(\"#edit_times_before_deletion, #edit_deletion_after_date\").val(\"\");\n                            }\n                        }\n\n                        //manage buttons\n                        if ($(\"#user_is_read_only\").val() == 1) {\n                            $('#menu_button_add_item, #menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item').attr('disabled', 'disabled');\n                        } else if (data.user_can_modify == 0) {\n                            $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item').attr('disabled', 'disabled');\n                        } else if (data.restricted == \"1\" || data.user_can_modify == \"1\") {\n                            //$(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item\").prop(\"disabled\", false);\n                            var param = \"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item\";\n                            $(\"#new_history_entry_form\").show();\n                        } else {\n                            //$(\"#menu_button_add_item, #menu_button_copy_item\").prop(\"disabled\", false);\n                            var param = \"#menu_button_del_item, #menu_button_copy_item\";\n                            $(\"#new_history_entry_form\").show();\n                        }\n                        //$(\"#menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link, #menu_button_history\").prop(\"disabled\", false);\n\n                        // disable share button for personal folder\n                        if ($(\"#recherche_group_pf\").val() == 1) {\n                            $(\"#menu_button_share, #menu_button_otv\").attr('disabled', 'disabled');\n                        } else {\n                            $(\"#menu_button_share, #menu_button_otv\").prop(\"disabled\", false);\n                        }\n\n                        //Manage to deleted information\n                        if (data.to_be_deleted != 0 && data.to_be_deleted != null && data.to_be_deleted != \"not_enabled\") {\n                            $('#item_extra_info')\n                                .html(\"<b><i class='fa fa-bell-o mi-red'></i></b>&nbsp;\")\n                                .attr(\"title\", \"<?php echo addslashes($LANG['automatic_deletion_activated']); ?>\");\n                            $('#item_extra_info').tooltipster({multiple: true});\n                        } else {\n                            $('#item_extra_info').html(\"\");\n                        }\n\n                        if (data.notification_status == 0 && data.id_user == <?php echo $_SESSION['user_id']; ?>) {\n                            $('#menu_button_notify')\n                                .prop(\"disabled\", false)\n                                .attr('title','<?php echo addslashes($LANG['enable_notify']); ?>')\n                                .attr('onclick','notify_click(\\'true\\')');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                        } else if (data.notification_status == 1 && data.id_user == <?php echo $_SESSION['user_id']; ?>) {\n                            $('#menu_button_notify')\n                                .prop(\"disabled\", false)\n                                .attr('title','<?php echo addslashes($LANG['disable_notify']); ?>')\n                                .attr('onclick','notify_click(\\'false\\')');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell-slash mi-red\"></i>&nbsp;');\n                            $('#item_extra_info').html(\"<i><i class=\\'fa fa-bell mi-green\\'></i>&nbsp;<?php echo addslashes($LANG['notify_activated']); ?></i>\");\n                        } else {\n                            $('#menu_button_notify').attr('disabled', 'disabled');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                        }\n\n                        //Prepare clipboard copies\n                        if (data.pw != \"\") {\n                            var clipboard_pw = new Clipboard(\"#menu_button_copy_pw, #button_quick_pw_copy\", {\n                                text: function() {\n                                    return (unsanitizeString(data.pw));\n                                }\n                            });\n                            clipboard_pw.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['pw_copied_clipboard']); ?>\").show().fadeOut(1000);\n                                itemLog(\"item_password_copied\");\n\n                                e.clearSelection();\n                            });\n\n                            $(\"#button_quick_pw_copy\").show();\n                        } else {\n                            $(\"#button_quick_pw_copy\").addClass(\"hidden\");\n                        }\n                        if (data.login != \"\") {\n                            var clipboard_login = new Clipboard(\"#menu_button_copy_login, #button_quick_login_copy\", {\n                                text: function() {\n                                    return (data.login);\n                                }\n                            });\n                            clipboard_login.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['login_copied_clipboard']); ?>\").show().fadeOut(1000);\n\n                                e.clearSelection();\n                            });\n                            $(\"#button_quick_login_copy\").show();\n                        } else {\n                            $(\"#button_quick_login_copy\").addClass(\"hidden\");\n                        }\n                        // #525\n                        if (data.url != \"\") {\n                            var clipboard_url = new Clipboard(\"#menu_button_copy_url\", {\n                                text: function() {\n                                    return unsanitizeString(data.url);\n                                }\n                            });\n                            clipboard_url.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['url_copied_clipboard']); ?>\").show().fadeOut(1000);\n\n                                e.clearSelection();\n                            });\n                        }\n\n                        //prepare link to clipboard\n                        var clipboard_link = new Clipboard(\"#menu_button_copy_link\", {\n                            text: function() {\n                                return \"<?php echo $SETTINGS['cpassman_url']; ?>\"+\"/index.php?page=items&group=\"+data.folder+\"&id=\"+data.id;\n                            }\n                        });\n                        clipboard_link.on('success', function(e) {\n                            $(\"#message_box\").html(\"<?php echo addslashes($LANG['url_copied']); ?>\").show().fadeOut(1000);\n\n                            e.clearSelection();\n                        });\n\n\n                        //set if user can edit\n                        if (data.restricted == \"1\" || data.user_can_modify == \"1\") {\n                            $(\"#item_editable\").val(1);\n                        }\n\n                        //Manage double click\n                        if (open_edit === true && (data.restricted == \"1\" || data.user_can_modify == \"1\")) {\n                            open_edit_item_div(\n                            <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1) {\n    echo 1;\n} else {\n    echo 0;\n}?>);\n                        }\n\n                        // tags\n                        $(\".round-grey\").addClass(\"ui-state-highlight ui-corner-all\");\n\n                        // continue loading data\n                        showDetailsStep2(id, param);\n\n                    } else if (data.show_details == \"1\" && data.show_detail_option == \"2\") {\n                        $(\"#item_details_nok\").addClass(\"hidden\");\n                        $(\"#item_details_ok\").addClass(\"hidden\");\n                        $(\"#item_details_expired_full\").show();\n                        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    } else {\n                        //Dont show details\n                        $(\"#item_details_nok\").removeClass(\"hidden\");\n                        $(\"#item_details_nok_restriction_list\").html('<div style=\"margin:10px 0 0 20px;\"><b><?php echo addslashes($LANG['author']); ?>: </b>' + data.author + '<br /><b><?php echo addslashes($LANG['restricted_to']); ?>: </b>' + data.restricted_to + '<br /><br /><u><a href=\"#\" onclick=\"SendMail(\\'request_access_to_author\\',\\'' + data.id + ',' + data.id_user + '\\',\\'<?php echo $_SESSION['key']; ?>\\',\\'<?php echo addslashes($LANG['forgot_my_pw_email_sent']); ?>\\')\"><?php echo addslashes($LANG['request_access_ot_item']); ?></a></u></div>');\n                        $(\"#item_details_ok\").addClass(\"hidden\");\n                        $(\"#item_details_expired\").addClass(\"hidden\");\n                        $(\"#item_details_expired_full\").addClass(\"hidden\");\n                        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n                    $(\"#request_ongoing\").val(\"\");\n                }\n           );\n\n            if (id_tree != \"\" && id_tree != $(\"#hid_cat\").val()) {\n                refreshTree(id_tree, \"0\");\n            }\n\n           // statistic\n           /*$.post(\n                \"sources/main.queries.php\",\n                {\n                    type                : 'item_stat',\n                    id                  : id,\n                    scope                : \"item\"\n                },\n                function(data) {\n\n                }\n            );*/\n       }\n    //Store Item id shown\n    $(\"#request_lastItem\").val(id);\n    }\n}\n\n\n/*\n* Loading Item details step 2\n*/\nfunction showDetailsStep2(id, param)\n{\n    $(\"#div_loading\").removeClass(\"hidden\");\n    $.post(\n        \"sources/items.queries.php\",\n        {\n        type     : \"showDetailsStep2\",\n        id         : id\n        },\n        function(data) {\n            //decrypt data\n            try {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            } catch (e) {\n                // error\n                $(\"#div_loading\").addClass(\"hidden\");\n                $(\"#request_ongoing\").val(\"\");\n                $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data);\n                $(\"#div_dialog_message\").dialog(\"open\");\n\n                return;\n            }\n\n            $(\"#item_history_log\").html(htmlspecialchars_decode(data.history));\n            $(\"#edit_past_pwds\").attr('title', htmlspecialchars_decode(data.history_of_pwds));\n            $(\"#edit_past_pwds_div\").html(htmlspecialchars_decode(data.history_of_pwds));\n\n            $(\"#id_files\").html(data.files_id);\n            $(\"#hid_files\").val(data.files_id);\n            $(\"#item_edit_list_files\").html(data.files_edit);\n\n            //$(\"#div_last_items\").html(htmlspecialchars_decode(data.div_last_items));\n\n            // function calling image lightbox when clicking on link\n            $(\"a.image_dialog\").click(function(event) {\n                event.preventDefault();\n                PreviewImage($(this).attr(\"href\"),$(this).attr(\"title\"));\n            });\n\n            //Set favourites icon\n            if (data.favourite == \"1\") {\n                $(\"#menu_button_add_fav\").attr(\"disabled\",\"disabled\");\n                $(\"#menu_button_del_fav\").prop(\"disabled\", false);\n            } else {\n                $(\"#menu_button_add_fav\").prop(\"disabled\", false);\n                $(\"#menu_button_del_fav\").attr(\"disabled\",\"disabled\");\n            }\n\n            // set indicator if item has change proposal\n            if (data.has_change_proposal !== 0) {\n                $(\"#item_extra_info\").prepend('<i class=\"fa fa-lightbulb-o fa-sm mi-yellow tip\" title=\"<?php echo addslashes($LANG['item_has_change_proposal']); ?>\" onclick=\"\"></i>&nbsp;');\n            }\n\n            $(param).prop(\"disabled\", false);\n            $(\"#menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link, #menu_button_history\").prop(\"disabled\", false);\n            $(\"#div_loading\").addClass(\"hidden\");\n\n            $(\".tip\").tooltipster({multiple: true});\n\n            // refresh\n            if ($(\"#hid_cat\").val() !== \"\") {\n                refreshListLastSeenItems();\n            }\n         }\n     );\n};\n\n/*\n   * FUNCTION\n   * Launch an action when clicking on a quick icon\n   * $action = 0 => Make not favorite\n   * $action = 1 => Make favorite\n*/\nfunction ActionOnQuickIcon(id, action)\n{\n    //change quick icon\n    if (action == 1) {\n        $(\"#quick_icon_fav_\"+id).html(\"<i class='fa fa-sm fa-star mi-yellow' onclick='ActionOnQuickIcon(\"+id+\",0)'></i>\");\n    } else if (action == 0) {\n        $(\"#quick_icon_fav_\"+id).html(\"<i class='fa fa-sm fa-star-o' onclick='ActionOnQuickIcon(\"+id+\",1)'></i>\");\n    }\n\n    //Send query\n    LoadingPage();\n    $.post(\"sources/items.queries.php\",\n        {\n            type    : 'action_on_quick_icon',\n            id      : id,\n            action  : action\n        },\n        function(data) {\n            LoadingPage();\n            displayMessage(\"<?php echo addslashes($LANG['alert_message_done']); ?>\");\n        }\n   );\n}\n\n//###########\n//## FUNCTION : prepare new folder dialogbox\n//###########\nfunction open_add_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"create_folder\") == 0) {\n        return false;\n    }\n\n    //Select the actual folder in the dialogbox\n    $('#new_rep_groupe option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#div_ajout_rep').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare editing folder dialogbox\n//###########\nfunction open_edit_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"edit_folder\") == 0) {\n        return false;\n    }\n\n    //Select the actual forlder in the dialogbox\n    $('#edit_folder_folder option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#edit_folder_title').val($.trim($('#edit_folder_folder :selected').text()));\n    $('#edit_folder_complexity').val($('#complexite_groupe').val());\n    $('#div_editer_rep').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare moving folder dialogbox\n//###########\nfunction open_move_group_div()\n{\n    if ($.inArray($(\"#hid_cat\").val(), $(\"#personal_visible_groups_list\").val().split(',')) != -1 && $(\"#personal_sk_set\").val() === \"0\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_personal_sk_expected']); ?>\");\n        return false;\n    }\n\n    if ($(\"#hid_cat\").val() == \"<?php if (isset($_SESSION['personal_folders'][0])) {\n    echo $_SESSION['personal_folders'][0];\n} else {\n    echo \"\";\n}\n?>\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0) == 0) return false;\n\n    //Select the actual folder in the dialogbox\n    //$('#move_folder_id option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#move_folder_title').html($.trim($('#move_folder_id :selected').text())+\" [id\"+$('#hid_cat').val()+\"]\");\n    $('#move_folder_id').val(0);\n    $('#div_move_folder').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare delete folder dialogbox\n//###########\nfunction open_del_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"delete_folder\") == 0) {\n        return false;\n    } else {\n        $('#div_supprimer_rep').dialog('open');\n        $('#delete_rep_groupe option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n        $(\"#div_loading\").addClass(\"hidden\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare new item dialogbox\n//###########\nfunction open_add_item_div()\n{\n    LoadingPage();\n\n    //Check if personal SK is needed and set\n    if ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 0) {\n        $(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'><\\/span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?><\\/div>\");\n        LoadingPage();\n        $(\"#div_dialog_message\").dialog(\"open\");\n    } else if ($(\"#hid_cat\").val() == \"\") {\n        LoadingPage();\n        $(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'><\\/span><?php echo addslashes($LANG['error_no_selected_folder']); ?><\\/div>\").dialog(\"open\");\n    } else if ($('#recherche_group_pf').val() == 0 || ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)) {\n        // is user read only and it is not a personal folder\n        if ($('#recherche_group_pf').val() == 0 && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == \"1\") {\n            displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n            LoadingPage();\n            return false;\n        }\n\n        //Select the actual forlder in the dialogbox\n        $('#categorie').val($('#hid_cat').val());\n\n        //Get the associated complexity level\n        var compReturn = RecupComplexite($('#hid_cat').val(), 0);\n\n        // exclude because user is read only\n        if (compReturn == 0) {\n            $(\"#div_loading\").addClass(\"hidden\");\n            return false;\n        }\n\n        //Show WYGIWYS editor\n        CKEDITOR.replace(\n            \"desc\",\n            {\n                toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]],\n                height: 100,\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            }\n        );\n\n        // prepare select2 for users\n        $(\"#annonce_liste_destinataires\").select2({\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        });\n\n        if ($(\"#recherche_group_pf\").val() == 1) {\n            $(\"#div_editRestricted\").addClass(\"hidden\");\n        } else {\n            $(\"#div_editRestricted\").show();\n        }\n\n        //open dialog\n        $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n        $(\"#div_formulaire_saisi\").dialog(\"open\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare editing item dialogbox\n//###########\nfunction open_edit_item_div(restricted_to_roles)\n{\n    // is user read only and it is not a personal folder\n    if (\n        ($('#recherche_group_pf').val() === \"0\" && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() === \"1\")\n        || (\n            ($(\"#access_level\").val() === \"1\" || $(\"#access_level\").val() === \"3\")\n            && $('#recherche_group_pf').val() === \"0\"\n        )\n    ) {\n        // Exclude the case where the user is in his PF with PSK set\n        if ($('#recherche_group_pf').val() === \"1\" && $(\"#personal_sk_set\").val() === \"1\") {\n            // do nothing\n        } else {\n            displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n            return false;\n        }\n    }\n\n    // If no Item selected, no edition possible\n    if ($(\"#selected_items\").val() == \"\") {\n        displayMessage(\"<?php echo addslashes($LANG['none_selected_text']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // Get complexity level for this folder\n    // and stop edition if Item edited by another user\n    var compReturn = RecupComplexite($('#hid_cat').val(), 1);\n\n    if (compReturn == 0) {\n        if (CKEDITOR.instances[\"edit_desc\"]) {\n            CKEDITOR.instances[\"edit_desc\"].destroy();\n        }\n        if (CKEDITOR.instances[\"desc\"]) {\n            CKEDITOR.instances[\"desc\"].destroy();\n        }\n        $(\"#div_loading\").addClass(\"hidden\");\n        return;\n    }\n\n    // Check if Item has changed since loaded\n    if (CheckIfItemChanged() == 1) {\n        var tmp = $(\"#\"+$(\"#selected_items\").val()).attr(\"ondblclick\");\n        tmp = tmp.substring(20,tmp.indexOf(\")\"));\n        tmp = tmp.replace(/'/g, \"\").split(',');\n        AfficherDetailsItem(tmp[0], tmp[1], tmp[2], tmp[3], tmp[4], 1, 1);\n        $(\"#div_loading\").addClass(\"hidden\");\n        return;\n    }\n\n    // Show WYGIWYG editor\n    CKEDITOR.replace(\n        \"edit_desc\",\n        {\n            toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]],\n            height: 100,\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        }\n   );\n    CKEDITOR.instances[\"edit_desc\"].setData($('#hid_desc').val());\n\n    $('#edit_display_title').html($('#hid_label').val());\n    $('#edit_label').val($('#hid_label').val());\n    $('#edit_desc').html($('#hid_desc').val());\n    $('#edit_pw1, #edit_pw2').val($('#hid_pw').val());\n    $(\"#edit_visible_pw\").text($('#hid_pw').val());\n    $('#edit_item_login').val($('#hid_login').val());\n    $('#edit_email').val($('#hid_email').val());\n    $('#edit_url').val($('#hid_url').val());\n    $('#edit_categorie').val($('#id_categorie').val());\n    if ($('#edit_restricted_to').val() != undefined) {\n        $('#edit_restricted_to').val($('#hid_restricted_to').val());\n    }\n    if ($('#edit_restricted_to_roles').val() != undefined) {\n        $('#edit_restricted_to_roles').val($('#hid_restricted_to_roles').val());\n    }\n    $('#edit_tags').val($('#hid_tags').val());\n    if ($('#hid_anyone_can_modify').val() == \"1\") {\n        $('#edit_anyone_can_modify').attr(\"checked\",\"checked\");\n        $('#edit_anyone_can_modify').button(\"refresh\");\n    } else {\n        $('#edit_anyone_can_modify').attr(\"checked\",false);\n        $('#edit_anyone_can_modify').button(\"refresh\");\n    }\n    // fields display\n    if ($('.fields').val() != undefined && $(\"#display_categories\").val() != \"\") {\n        $('.fields').each(function(i){\n            id = $(this).attr('id').split('_');\n            $('#edit_field_' + id[2] + '_' + id[3]).val(htmlspecialchars_decode($('#hid_field_' + id[2] + '_' + id[3]).val()));\n        });\n    }\n\n    //Get list of people in restriction list\n    if ($(\"#recherche_group_pf\").val() == 1) {\n        $(\"#div_editRestricted\").addClass(\"hidden\");\n    } else {\n        $(\"#div_editRestricted\").show();\n        // tick selected users / roles\n        if ($('#edit_restricted_to').val() != undefined) {\n            var list = $('#hid_restricted_to').val().split(';');\n            for (var i=0; i<list.length; i++) {\n                var elem = list[i];\n                if (elem != \"\") {\n                    $(\".folder_rights_user_edit\").each(function() {\n                        if ($(this).attr(\"id\") == elem) {\n                            $(this).prop(\"checked\", true);\n                            exit;\n                        }\n                    });\n                }\n            }\n        }\n\n        if ($('#edit_restricted_to').val() != undefined) {\n            $('#edit_restricted_to_list').empty();\n            if (restricted_to_roles == 1) {\n                //add optgroup\n                var optgroup = $('<optgroup>');\n                optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                $(\"#edit_restricted_to_list option:last\").wrapAll(optgroup);\n            }\n            var liste = $('#input_liste_utilisateurs').val().split(';');\n            for (var i=0; i<liste.length; i++) {\n                var elem = liste[i].split('#');\n                if (elem[0] != \"\") {\n                    $(\"#edit_restricted_to_list\").append(\"<option value='\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                    var index = $('#edit_restricted_to').val().lastIndexOf(elem[1]+\";\");\n                    if (index != -1) {\n                        $(\"#edit_restricted_to_list option[value=\"+elem[0]+\"]\").attr('selected', true);\n                    }\n                }\n            }\n        }\n\n        //Add list of roles if option is set\n        if (restricted_to_roles == 1 && $('#edit_restricted_to').val() != undefined) {\n            var j = i;\n            //add optgroup\n            var optgroup = $('<optgroup>');\n            optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n\n            var liste = $('#input_list_roles').val().split(';');\n            for (var i=0; i<liste.length; i++) {\n                var elem = liste[i].split('#');\n                if (elem[0] != \"\") {\n                    $(\"#edit_restricted_to_list\").append(\"<option value='role_\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                    var index = $('#edit_restricted_to_roles').val().lastIndexOf(elem[1]+\";\");\n                    if (index != -1) {\n                        $(\"#edit_restricted_to_list option[value='role_\"+elem[0]+\"']\").attr('selected', true);\n                    }\n                    if (i==0) $(\"#edit_restricted_to_list option:last\").wrapAll(optgroup);\n                }\n                j++;\n            }\n        }\n    }\n\n    // prepare select2 for users\n    $(\"#edit_annonce_liste_destinataires\").select2({\n        language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n    });\n\n    // disable folder selection if PF\n    if ($('#recherche_group_pf').val() == \"1\") {\n        $(\"#edit_categorie\").prop(\"disabled\", true);\n    } else {\n        $(\"#edit_categorie\").prop(\"disabled\", false);\n    }\n\n    //open dialog\n    $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n    $(\"#div_formulaire_edition_item\").dialog(\"open\");\n}\n\n//###########\n//## FUNCTION : prepare new item dialogbox\n//###########\nfunction open_del_item_div()\n{\n    // is user read only\n    if (\n        ($('#recherche_group_pf').val() === \"0\" && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() === \"1\")\n        || (\n            ($(\"#access_level\").val() === \"1\" || $(\"#access_level\").val() === \"2\" || $(\"#access_level\").val() === \"3\")\n            && $('#recherche_group_pf').val() === \"0\"\n        )\n    ) {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    if ($(\"#selected_items\").val() != \"\") {\n        $(\"#div_loading\").removeClass(\"hidden\");\n        //Get the associated complexity level\n        var compReturn = RecupComplexite($('#hid_cat').val(), 0);\n\n        // exclude because user is read only\n        if (compReturn == 0) {\n            return false;\n        }\n\n        $(\"#div_loading\").addClass(\"hidden\");\n        $('#div_del_item').dialog('open');\n    } else {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['none_selected_text']); ?>\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare copy item dialogbox\n//###########\nfunction open_copy_item_to_folder_div()\n{\n    // is user read only\n    if ($('#recherche_group_pf').val() == 0 && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == \"1\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    if ($(\"#selected_items\").val() != \"\") {\n        $('#copy_in_folder').val($(\"#hid_cat\").val());\n        $('#div_copy_item_to_folder').dialog('open');\n    } else {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['none_selected_text']); ?>\");\n    }\n}\n\n\n//###########\n//## FUNCTION : Clear HTML tags from a string\n//###########\nfunction clear_html_tags()\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"clear_html_tags\",\n            id_item  : $(\"#id_item\").val()\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            $(\"#edit_desc\").val(data.description);\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Permits to delete an attached file\n//###########\nfunction delete_attached_file(file_id)\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"delete_attached_file\",\n            file_id : file_id,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            $(\"#span_edit_file_\"+file_id).css(\"textDecoration\", \"line-through\");\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Permits to preview an attached image\n//###########\nPreviewImage = function(uri,title) {\n    $(\"#div_loading\").removeClass(\"hidden\");\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"image_preview_preparation\",\n            uri     : uri,\n            title   : title,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n            $(\"#dialog_files\").html('<img id=\"image_files\" src=\"\" />');\n            //Get the HTML Elements\n            imageDialog = $(\"#dialog_files\");\n            imageTag = $('#image_files');\n\n            //Set the image src\n            imageTag.attr(\"src\", data.new_file);\n\n            //When the image has loaded, display the dialog\n            imageTag\n            .error(function() {\n                $(\"#div_loading\").addClass(\"hidden\");\n                displayMessage(\"<?php echo \"<i class='fa fa-exclamation-triangle fa-2x'></i>  \".addslashes($LANG['error_file_is_missing']); ?>\");\n            })\n            .load(function() {\n                $(\"#div_loading\").addClass(\"hidden\");\n                imageDialog.dialog({\n                    modal: true,\n                    resizable: false,\n                    draggable: false,\n                    width: 'auto',\n                    title: title,\n                    open: function( event, ui ) {\n                        // nothing to do\n                    },\n                    close: function (event, ui) {\n                        // delete file\n                        $.post(\n                            \"sources/main.queries.php\",\n                            {\n                                type    : \"file_deletion\",\n                                filename: data.file_path,\n                                key     : \"<?php echo $_SESSION['key']; ?>\"\n                            }\n                        );\n                    }\n                });\n            });\n        }\n    );\n}\n\nfunction notify_click(status)\n{\n    $.post(\"sources/items.queries.php\",\n    {\n        type     : \"notify_a_user\",\n        user_id : <?php echo $_SESSION['user_id']; ?>,\n        status    : status,\n        notify_type : 'on_show',\n        notify_role : '',\n        item_id : $('#id_item').val(),\n        key        : \"<?php echo $_SESSION['key']; ?>\"\n    },\n    function(data) {\n        if (data[0].error == \"something_wrong\") {\n            $(\"#new_show_error\").html('ERROR!!');\n            $(\"#new_show_error\").show();\n        } else {\n            $(\"#new_show_error\").addClass(\"hidden\");\n            if (data[0].new_status == \"true\") {\n                $('#menu_button_notify')\n                    .attr('title','<?php echo addslashes($LANG['disable_notify']); ?>')\n                    .attr('onclick','notify_click(\\'false\\')');\n                $('#div_notify').attr('class', '<i class=\"fa fa-bell-slash mi-green\"></i>&nbsp;');\n                $('#item_extra_info').html(\"<?php echo addslashes($LANG['notify_activated']); ?>\");\n            } else if (data[0].new_status == \"false\") {\n                $('#menu_button_notify')\n                    .attr('title','<?php echo addslashes($LANG['enable_notify']); ?>')\n                    .attr('onclick','notify_click(\\'true\\')');\n                $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                $('#item_extra_info').html(\"\");\n            }\n        }\n    },\n    \"json\"\n    );\n}\n\n/*\n** Checks if current item title is a duplicate in current folder\n*/\nfunction checkTitleDuplicate(itemTitle, checkInCurrentFolder, checkInAllFolders, textFieldId)\n{\n    $(\"#new_show_error\").html(\"\").addClass(\"hidden\");\n    $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n    if (itemTitle != \"\") {\n        if (checkInCurrentFolder == \"1\" || checkInAllFolders == \"1\") {\n            //prepare data\n            var data = {\"label\": itemTitle.replace(/\"/g,'&quot;') , \"idFolder\": $('#hid_cat').val()};\n\n            if (checkInCurrentFolder == \"1\") {\n                var typeOfCheck = \"same_folder\";\n            } else {\n                var typeOfCheck = \"all_folders\";\n            }\n\n            // disable Save button\n            $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"disable\");\n\n            // send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"check_for_title_duplicate\",\n                    option  : typeOfCheck,\n                    data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data[0].duplicate != \"1\") {\n                        $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n                        // display title\n                        $(\"#\"+textFieldId).html(itemTitle.escapeHTML());\n                    } else {\n                        $(\"#label\").focus();\n                        $(\"#new_show_error\").html(\"<?php echo addslashes($LANG['duplicate_title_in_same_folder']); ?>\").show();\n                    }\n                }\n            );\n        } else {\n            // display title\n            $(\"#\"+textFieldId).html(itemTitle.escapeHTML());\n        }\n    }\n}\n\n/*\n* builds the folders tree\n*/\nfunction refreshTree(node_to_select, do_refresh, refresh_visible_folders)\n{\n    do_refresh = do_refresh || \"\"\n    node_to_select = node_to_select || \"\";\n    refresh_visible_folders = refresh_visible_folders || 1;\n\n    if (refresh_visible_folders !== 1) {\n        $(\"#jstree\").jstree(\"deselect_all\");\n        $('#jstree').jstree(\"select_node\", \"#li_\"+groupe_id);\n        return false;\n    }\n\n    if (do_refresh !== \"0\") {\n        $('#jstree').jstree(true).refresh();\n    }\n\n    if (node_to_select !== \"\") {\n        $(\"#hid_cat\").val(node_to_select);\n        $(\"#jstree\").jstree(\"deselect_all\");\n\n        $('#jstree')\n        .one(\"refresh.jstree\", function (e, data) {\n            data.instance.select_node(\"#li_\"+node_to_select);\n        });\n        //.jstree(\"select_node\", \"#li_\"+node_to_select);\n\n    }\n\n    if (refresh_visible_folders === 1) {\n        refreshVisibleFolders();\n    }\n}\n\n/*\n* refreshes the various lists of folders used in dialogboxes\n*/\nfunction refreshVisibleFolders()\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"refresh_visible_folders\",\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            //check if format error\n            if (data.error == \"\") {\n                // append new list\n                $(\"#categorie, #edit_categorie, #new_rep_groupe, #edit_folder_folder, #delete_rep_groupe\").find('option').remove().end().append(data.selectVisibleFoldersOptions);\n                $(\"#move_folder_id\").find('option').remove().end().append(data.selectFullVisibleFoldersOptions);\n                $(\"#copy_in_folder\").find('option').remove().end().append(data.selectVisibleActiveFoldersOptions);\n\n                // remove ROOT option if exists\n                $('#edit_folder_folder option[value=\"0\"]').remove();\n                $('#delete_rep_groupe option[value=\"0\"]').remove();\n            }\n        }\n   );\n}\n\n\n//###########\n//## EXECUTE WHEN PAGE IS LOADED\n//###########\n$(function() {\n\n    var clear_tp_clipboard = new Clipboard(\"#but_empty_clipboard\", {\n        text: function() {\n            return \"cleared\";\n        }\n    });\n    clear_tp_clipboard.on('success', function(e) {\n        $(\"#message_box\").html(\"super\").show().fadeOut(1000);\n\n        e.clearSelection();\n    });\n\n    $.ajaxSetup({\n        error: function(jqXHR, exception) {\n            if (jqXHR.status === 0) {\n                console.log('Not connect.\\nVerify Network.');\n            } else if (jqXHR.status == 404) {\n                alert('Requested page not found. [404]');\n            } else if (jqXHR.status == 500) {\n                alert('Internal Server Error [500].');\n            } else if (exception === 'parsererror') {\n                alert('Requested JSON parse failed.');\n            } else if (exception === 'timeout') {\n                alert('Time out error.');\n            } else if (exception === 'abort') {\n                alert('Ajax request aborted.');\n            } else {\n                alert('Uncaught Error.n' + jqXHR.responseText);\n            }\n        }\n    });\n\n    // manage item div resize\n    $( \"#item_details_scroll\" ).resizable({handles: {'s': '#handle'}});\n    $(\"#handle\").dblclick(function() {\n        var inner = $(\"#item_details_scroll\").find('table');\n        var current_height = $(\"#item_details_scroll\").height();\n        $(\"#item_details_scroll\").animate({top:'+='+(current_height-inner.height())}, 0);\n        $(\"#item_details_scroll\").height(inner.outerHeight(true));\n    });\n\n    $('#toppathwrap').addClass(\"hidden\");\n    if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n    //Expend/Collapse jstree\n    $(\"#jstree_close\").click(function() {\n        $(\"#jstree\").jstree(\"close_all\");\n    });\n    $(\"#jstree_open\").click(function() {\n        $(\"#jstree\").jstree(\"open_all\");\n    });\n    $(\"#jstree_search\").keypress(function(e) {\n        if (e.keyCode == 13) {\n            $(\"#jstree\").jstree(\"search\",$(\"#jstree_search\").val());\n        }\n    });\n\n    $(\".quick_menu\").menu({\n        icons: { submenu: \"no-icon\" }\n    });\n    $(\".quick_menu_left\").menu({\n        position: {\n            my : \"right top\",\n            at : \"left top\"\n        }\n    });\n\n    $('.menu_200, .menu_150').on('blur', function () {\n        $(this).addClass(\"hidden\");\n    });\n\n    $(\"#pw_size, #edit_pw_size\").spinner({\n        min:   3,\n        step:  1,\n        numberFormat: \"n\"\n    });\n\n    //Disable menu buttons\n    $('#menu_button_edit_item,#menu_button_del_item,#menu_button_add_fav,#menu_button_del_fav').attr('disabled', 'disabled');\n\n    //DIsable more buttons if read only user\n    if ($(\"#user_is_read_only\").val() == 1) {\n        $('#menu_button_add_item, #menu_button_add_group, #menu_button_edit_group, #menu_button_del_group').attr('disabled', 'disabled');\n    }\n\n    // Autoresize Textareas\n    $(\".items_tree, #items_content\").addClass(\"ui-corner-all\");\n\n    //automatic height\n    var window_height = $(window).height();\n    $(\"#div_items, #content\").height(window_height-170);\n    $(\"#items_center\").height(window_height-390);\n    $(\"#items_list\").height(window_height-440);\n    $(\".items_tree\").height(window_height-160);\n    $(\"#jstree\").height(window_height-185);\n\n    //warning if screen height too short\n    if (parseInt(window_height-440) <= 30) {\n        $(\"#div_dialog_message_text\").html(\"<?php echo addslashes($LANG['warning_screen_height']); ?>\");\n        $(\"#div_dialog_message\").dialog('open');\n    }\n\n    //Evaluate number of items to display - depends on screen height\n    if (parseInt($(\"#nb_items_to_display_once\").val()) || $(\"#nb_items_to_display_once\").val() == \"max\") {\n        //do nothing ... good value\n    } else {\n        //adapt to the screen height\n        $(\"#nb_items_to_display_once\").val(Math.max(Math.round((window_height-450)/23),2));\n    }\n\n    // Build buttons\n    $(\"#custom_pw, #edit_custom_pw\").buttonset();\n    $(\".cpm_button, #anyone_can_modify, #annonce, #edit_anyone_can_modify, #edit_annonce, .button\").button();\n\n    //Build multiselect box\n\n    //Build tree\n    $('#jstree').jstree({\n        \"core\" : {\n            \"animation\" : 0,\n            \"check_callback\" : true,\n            'data' : {\n                'url' : \"./sources/tree.php\",\n                \"dataType\" : \"json\",\n                \"async\" : true,\n                'data' : function (node) {\n                    return { 'id' : node.id.split('_')[1] };\n                }\n            },\n            \"strings\" : {\n                \"Loading ...\" : \"<?php echo addslashes($LANG['loading']); ?>...\"\n            },\n            \"error\" : {\n\n            }\n        },\n        \"plugins\" : [\n            \"state\", \"search\"\n        ]\n    })\n    //search in tree\n    .bind(\"search.jstree\", function (e, data) {\n        if (data.nodes.length == 1) {\n            //open the folder\n            ListerItems($(\"#jstree li>a.jstree-search\").attr('id').split('_')[1], '', 0);\n        }\n    });\n\n    // load list of visible folders for current user\n    refreshVisibleFolders();\n\n    $(\"#add_folder\").click(function() {\n        var posit = $('#item_selected').val();\n        //alert($(\"ul\").text());\n    });\n\n    $(\"#for_searchtext\").addClass(\"hidden\");\n    $(\"#copy_pw_done\").addClass(\"hidden\");\n    $(\"#copy_login_done\").addClass(\"hidden\");\n\n    //PREPARE DIALOGBOXES\n    //=> ADD A NEW GROUP\n    $(\"#div_ajout_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 280,\n        title: \"<?php echo addslashes($LANG['item_menu_add_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                AddNewFolder();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#new_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#new_rep_show_error\").addClass(\"hidden\");\n            $(\"#new_rep_show_error\").html(\"\");\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> EDIT A GROUP\n    $(\"#div_editer_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 490,\n        height: 280,\n        title: \"<?php echo addslashes($LANG['item_menu_edi_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                $(\"#edit_rep_show_error\").addClass(\"hidden\");\n                if ($(\"#edit_folder_title\").val() == \"\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_label']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if ($(\"#edit_folder_folder\").val() == \"0\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if ($(\"#edit_folder_complexity\").val() == \"\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_complex']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if (/^\\d+$/.test($(\"#edit_folder_title\").val())) {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else {\n                    $(\"#edit_folder_loader\").show();\n                    $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", true);\n\n                    //prepare data\n                    var data = {\"title\": $('#edit_folder_title').val().replace(/\"/g,'&quot;'),\n                        \"complexity\": $('#edit_folder_complexity').val(),\n                        \"folder\": $('#edit_folder_folder').val()};\n\n                    //Send query\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"update_rep\",\n                            data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key        : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //check if format error\n                            if (data[0].error == \"\") {\n                                refreshTree($('#edit_folder_folder').val());\n                                $(\"#folder_name_\"+$('#edit_folder_folder').val()).text($('#edit_folder_title').val());\n                                $(\"#path_elem_\"+$('#edit_folder_folder').val()).text($('#edit_folder_title').val());\n                                $(\"#fld_\"+$('#edit_folder_folder').val()).html($('#edit_folder_title').val());\n                                $(\"#edit_folder_title\").val($('#edit_folder_title').val());\n                                $(\"#div_editer_rep\").dialog(\"close\");\n                            } else {\n                                if (data[0].error === \"ERR_TITLE_ONLY_WITH_NUMBERS\") {\n                                    $(\"#edit_rep_show_error\").html('<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>').show();\n                                } else {\n                                    $(\"#edit_rep_show_error\").html(data[0].error).show();\n                                }\n\n                            }\n                            $(\"#edit_folder_loader\").addClass(\"hidden\");\n                            $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        },\n                        \"json\"\n                   );\n                }\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#edit_folder_loader\").addClass(\"hidden\");\n                $(\"#edit_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n\n    // =>\n    $(\"#div_copy_item_to_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 250,\n        title: \"<?php echo addslashes($LANG['item_menu_copy_elem']); ?>\",\n        open: function( event, ui ) {\n            $(\"#copy_in_folder\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n            $(\":button:contains('<?php echo addslashes($LANG['ok']); ?>')\").prop(\"disabled\", false);\n            $(\"#copy_item_info\").addClass(\"ui-state-highlight ui-corner-all\").addClass(\"hidden\");\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n            $(\"#div_copy_item_to_folder_item\").html(\"<center>\"+$(\"#id_label\").html()+\"</center>\");\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n                $(\"#copy_item_info\").addClass(\"ui-state-highlight ui-corner-all\").show().html(\"<span><?php echo addslashes($LANG['please_wait']).\" <i class=\\'fa fa-cog fa-spin'></i>\"; ?></span>\");\n                $(\":button:contains('<?php echo addslashes($LANG['ok']); ?>')\").prop(\"disabled\", true);\n                //Send query\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type        : \"copy_item\",\n                        item_id     : $('#id_item').val(),\n                        source_id   : $('#hid_cat').val(),\n                        dest_id     : $('#copy_in_folder').val(),\n                        key         : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //check if format error\n                        if (data[0].error !== \"\") {\n                            $(\"#copy_item_to_folder_show_error\").html(data[1].error_text).show(1).delay(2000).fadeOut(1000);\n                        }\n                        //if OK\n                        if (data[0].status == \"ok\") {\n                            //window.location.href = \"index.php?page=items&group=\"+$('#copy_in_folder').val()+\"&id=\"+data[1].new_id;\n                            ListerItems($('#copy_in_folder').val(),'', 0);\n                            AfficherDetailsItem(data[1].new_id);\n                            refreshTree($('#copy_in_folder').val());\n                            $(\"#copy_in_folder\").val(\"\");\n                            $(\"#div_copy_item_to_folder\").dialog('close');\n                        }\n                        $(\"#copy_item_info\").addClass(\"hidden\");\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#copy_item_to_folder_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_copy_item_to_folder\").dialog('close');\n            }\n        }\n    });\n    // <=\n\n    //=> MOVE A GROUP\n    $(\"#div_move_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 350,\n        height: 250,\n        title: \"<?php echo addslashes($LANG['item_menu_mov_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                $(\"#move_rep_show_error\").addClass(\"hidden\");\n                if ($(\"#move_folder_id\").val() == \"0\") {\n                    $(\"#move_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group']); ?>\");\n                    $(\"#move_rep_show_error\").show();\n                } else if($('#hid_cat').val() === $('#move_folder_id').val()) {\n                    // do not move to itself\n                    $(\"#move_rep_show_error\").html(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n                    $(\"#move_rep_show_error\").show();\n                } else {\n                    $(\"#move_folder_loader\").show();\n                    $(\"#div_editer_rep ~ .ui-dialog-buttonpane\")\n                        .find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\")\n                        .prop(\"disabled\", true);\n\n                    //prepare data\n                    var data = {\"source_folder_id\": $('#hid_cat').val(),\n                        \"target_folder_id\": $('#move_folder_id').val()};\n\n                    //Send query\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"move_folder\",\n                            data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key     : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //check if format error\n                            if (data[0].error == \"\") {\n                                $(\"#div_move_folder ~ .ui-dialog-buttonpane\")\n                                    .find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                                ListerItems($('#hid_cat').val(), \"\", 0);\n                                $(\"#move_folder_loader\").addClass(\"hidden\");\n                                refreshTree();\n                                $(\"#div_move_folder\").dialog(\"close\");\n                            } else {\n                                $(\"#move_rep_show_error\").html(data[0].error).show();\n                            }\n                            $(\"#move_folder_loader\").addClass(\"hidden\");\n                        },\n                        \"json\"\n                   );\n                }\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#edit_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(\"#move_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n\n\n    //=> COPY OF FOLDER\n    $(\"#div_copy_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 290,\n        title: \"<?php echo addslashes($LANG['copy_folder']); ?>\",\n        close: function () {\n            $(\"#copy_folder_source_id, #copy_folder_destination_id\").children('option').remove();\n            $(\"#div_copy_folder_msg\")\n                .html('')\n                .removeClass(\"ui-state-highlight\")\n                .addClass(\"hidden\");\n        },\n        open: function(event,ui) {\n            $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n\n            // get list of folders\n                $.post(\n                    \"sources/folders.queries.php\",\n                    {\n                        type    : \"get_list_of_folders\",\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#div_loading\").addClass(\"hidden\");\n\n                        //display to user\n                        $(\"#copy_folder_source_id, #copy_folder_destination_id\").append(data[0].list_folders);\n\n                        $(\"#copy_folder_source_id\").val($(\"#hid_cat\").val());\n                    },\n                    \"json\"\n                );\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                if ($(\"#copy_folder_source_id\").val() === \"\" || $(\"#copy_folder_destination_id\").val() === \"\") {\n                    $(\"#div_copy_folder_msg\")\n                        .html('<i class=\"fa fa-warning\"></i>&nbsp;<?php echo addslashes($LANG['error_must_enter_all_fields']); ?>')\n                        .addClass(\"ui-state-error\")\n                        .show().delay(2000).fadeOut(1000);\n                        return false;\n                }\n\n                if ($(\"#copy_folder_source_id\").val() === $(\"#copy_folder_destination_id\").val()) {\n                    $(\"#div_copy_folder_msg\")\n                        .html('<i class=\"fa fa-warning\"></i>&nbsp;<?php echo addslashes($LANG['error_source_and_destination_are_equal']); ?>')\n                        .addClass(\"ui-state-error\")\n                        .show().delay(2000).fadeOut(1000);\n                        return false;\n                }\n\n\n                $(\"#div_copy_folder_msg\")\n                    .html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>')\n                    .addClass(\"ui-state-highlight\")\n                    .show();\n\n                //prepare data\n                var data = {\"source_folder_id\": $('#copy_folder_source_id').val(),\n                    \"target_folder_id\": $('#copy_folder_destination_id').val()};\n\n                //Send query\n                $.post(\n                    \"sources/folders.queries.php\",\n                    {\n                        type    : \"copy_folder\",\n                        data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //check if format error\n                        if (data[0].error == \"\") {\n                            $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                            refreshTree();\n                            $(\"#div_copy_folder\").dialog(\"close\");\n                        } else {\n                            $(\"#div_copy_folder_msg\").html(data[0].error).show().delay(2000).fadeOut(1000);\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#div_copy_folder_msg\").html(\"\").addClass(\"hidden\");\n                $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(this).dialog('close');\n            }\n        }\n    });\n    //<=\n\n    //=> DELETE A GROUP\n    $(\"#div_supprimer_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 230,\n        title: \"<?php echo addslashes($LANG['item_menu_del_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['delete']); ?>\": function() {\n                SupprimerFolder();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        },\n        close: function() {\n            $(\"#delete_rep_groupe_validate\").prop(\"checked\", false);\n            $(\"#del_rep_show_error\").html(\"\").addClass(\"hidden\");\n        }\n    });\n    //<=\n    //=> ADD A NEW ITEM\n    $(\"#div_formulaire_saisi\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 505,\n        height: 680,\n        title: \"<?php echo addslashes($LANG['item_menu_add_elem']); ?>\",\n        open: function( event, ui ) {\n            $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"disabled\");\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                $(\"#div_loading\").removeClass(\"hidden\");\n                $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n                AjouterItem();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                //Clear upload queue\n                $('#item_file_queue').html('');\n                //Select 1st tab\n                $(\"#item_tabs\").tabs({ selected: 0 });\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#label\").focus();\n            $(\"#visible_pw\").html(\"\");\n            $(\"#item_tabs\").tabs(\"option\", \"active\", 0);\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // show tab fields ? Not if PersonalFolder\n            if ($(\"#recherche_group_pf\").val() == 1) {\n                if ($(\"#form_tab_fields\") != undefined)\n                    $(\"#item_tabs\").tabs(\"option\", \"hidden\", 3);\n            } else {\n                if ($(\"#form_tab_fields\") != undefined && $(\"#display_categories\").val() != 1)\n                    $(\"#item_tabs\").tabs(\"option\", \"show\", 3);\n            }\n\n            // hide complexity if PF\n            if ($(\"#pf_selected\").val() == 1) {\n                $(\"#expected_complexity\").addClass(\"hidden\");\n            } else {\n                $(\"#expected_complexity\").show();\n            }\n\n            $(\"#categorie\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n        },\n        close: function(event,ui) {\n            if (CKEDITOR.instances[\"desc\"]) {\n                CKEDITOR.instances[\"desc\"].destroy();\n            }\n            $(\"#item_upload_list\").html(\"\");\n            $(\".item_field\").val(\"\");  // clean values in Fields\n            $(\"#pw1\").focus();\n            $(\"#new_show_error\").html(\"\").addClass(\"hidden\");\n            $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n            $(\"#div_loading\").addClass(\"hidden\");\n        }\n    });\n    //<=\n    //=> EDITER UN ELEMENT\n    $(\"#div_formulaire_edition_item\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 505,\n        height: 680,\n        title: \"<?php echo addslashes($LANG['item_menu_edi_elem']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", true);\n                EditerItem();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                //Clear upload queue\n                $('#item_edit_file_queue').html('');\n                //Select 1st tab\n                $(\"#item_edit_tabs\").tabs({ selected: 0 });\n                $(\"#div_loading\").addClass(\"hidden\");\n                //Close dialog box\n                $(this).dialog('close');\n            }\n        },\n        close: function(event,ui) {\n            if (CKEDITOR.instances[\"edit_desc\"]) {\n                CKEDITOR.instances[\"edit_desc\"].destroy();\n            }\n            if (CKEDITOR.instances[\"desc\"]) {\n                CKEDITOR.instances[\"desc\"].destroy();\n            }\n            $(\"#div_loading, #edit_show_error\").addClass(\"hidden\");\n            $(\"#item_edit_upload_list\").html(\"\");\n            $(\".edit_item_field\").val(\"\");  // clean values in Fields\n            //Unlock the Item\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"free_item_for_edition\",\n                    id      : $(\"#id_item\").val(),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n            $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n        },\n        open: function(event,ui) {\n            //refresh pw complexity\n            $(\"#item_edit_tabs\").tabs( \"option\", \"active\",1  );\n            $(\"#edit_pw1\").first().focus();\n            $(\"#item_edit_tabs\").tabs( \"option\", \"active\",0  );\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // show tab fields ? Not if PersonalFolder\n            if ($(\"#recherche_group_pf\").val() == 1) {\n                if ($(\"#edit_item_more\") != undefined) $(\"#edit_item_more\").addClass(\"hidden\");\n            } else {\n                if ($(\"#edit_item_more\") != undefined && $(\"#display_categories\").val() != 1)\n                    $(\"#edit_item_more\").show();\n            }\n            $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n\n            // hide complexity if PF\n            if ($(\"#pf_selected\").val() == 1) {\n                $(\"#edit_expected_complexity\").addClass(\"hidden\");\n            } else {\n                $(\"#edit_expected_complexity\").show();\n            }\n\n            $(\"#edit_categorie\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n        }\n    });\n    //<=\n    //=> SUPPRIMER UN ELEMENT\n    $(\"#div_del_item\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 220,\n        title: \"<?php echo addslashes($LANG['item_menu_del_elem']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['del_button']); ?>\": function() {\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type        : \"del_item\",\n                        id          : $(\"#id_item\").val(),\n                        categorie   : $('#hid_cat').val(),\n                        label       : $(\"#hid_label\").val(),\n                        key         : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#div_loading\").removeClass(\"hidden\");\n\n                        // refresh list of items\n                        $(\"#full_items_list\").html(\"\");\n                        ListerItems($('#hid_cat').val(), \"\", 0)\n\n                        // reload tree\n                        refreshTree($('#hid_cat').val());\n\n                        // clean fields\n                        $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs\").html(\"\");\n                        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n                        $(\"#selected_items\").val(\"\");\n\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n               );\n                $(this).dialog('close');\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n            $(\"#div_del_item_selection\").html(\"<center>\"+$(\"#id_label\").html()+\"</center>\");\n        }\n    });\n    //<=\n    //=> SHOW LINK COPIED DIALOG\n    $(\"#div_item_copied\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 200,\n        title: \"<?php echo addslashes($LANG['admin_main']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW HISTORY DIALOG\n    $(\"#div_item_history\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 650,\n        height: 400,\n        title: \"<?php echo addslashes($LANG['history']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // load content\n            const data = {\"id\":$(\"#id_item\").val()};\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"load_item_history\",\n                    data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error === \"\") {\n                        $(\"#item_history_log\").html(data.new_html);\n                    }\n                }\n           );\n        }\n    });\n    //<=\n    //=> SHOW SHARE DIALOG\n    $(\"#div_item_share\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 200,\n        title: \"<?php echo addslashes($LANG['share']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['send']); ?>\": function() {\n                $(\"#div_item_share_error\").addClass(\"hidden\");\n                if (IsValidEmail($(\"#item_share_email\").val())) {    //check if email format is ok\n                    $(\"#div_item_share_status\").show();\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"send_email\",\n                            id      : $(\"#id_item\").val(),\n                            receipt    : $(\"#item_share_email\").val(),\n                            cat      : \"share_this_item\",\n                            key        : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            $(\"#div_item_share_status\").html(\"\").addClass(\"hidden\");\n                            if (data[0].error == \"\") {\n                                $(\"#div_item_share_error\").html(\"<?php echo addslashes($LANG['share_sent_ok']); ?>\").show();\n                            } else {\n                                $(\"#div_item_share_error\").html(data[0].message).show();\n                            }\n                        },\n                        \"json\"\n                   );\n                } else {\n                    $(\"#div_item_share_error\").html(\"<?php echo addslashes($LANG['bad_email_format']); ?>\").show();\n                }\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW ITEM UPDATED DIALOG\n    $(\"#div_item_updated\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 300,\n        height: 100,\n        title: \"<?php echo addslashes($LANG['share']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW SHARE DIALOG\n    $(\"#div_suggest_change\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 750,\n        height: 450,\n        title: \"<?php echo addslashes($LANG['suggest_password_change']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n                $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-cog fa-spin fa-2x\"></i>').show().removeClass(\"ui-state-error\");\n\n                // do checks\n                if (!IsValidEmail($(\"#email_change\").val()) && $(\"#email_change\").val() !== \"\") {\n                    $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-warning fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['email_format_is_not_correct']); ?>').show(1).delay(2000).fadeOut(1000).addClass(\"ui-state-error\");\n                    return false;\n                }\n                if (!validateURL($(\"#url_change\").val()) && $(\"#url_change\").val() !== \"\") {\n                    $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-warning fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['url_format_is_not_correct']); ?>').show(1).delay(2000).fadeOut(1000).addClass(\"ui-state-error\");\n                    return false;\n                }\n\n                // prepare changes\n                var data = {\"label\": $(\"#label_change\").val(), \"pwd\": $(\"#pwd_change\").val(),\n                    \"url\": $(\"#url_change\").val(), \"login\": $(\"#login_change\").val(),\n                    \"email\": $(\"#email_change\").val(), \"folder\": $(\"#hid_cat\").val(),\n                    \"comment\": $(\"#comment_change\").val(), \"item_id\": $(\"#id_item\").val()};\n\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type    : \"suggest_item_change\",\n                        data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        id      : $(\"#id_item\").val(),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error === \"\") {\n                            $(\"#div_suggest_change_wait\").html(\"<?php echo addslashes($LANG['suggestion_done']); ?>\").show(1).delay(1500).fadeOut(1000);\n                            setTimeout(\n                                function() {\n                                    $(\"#div_suggest_change\").dialog(\"close\");\n                                },\n                                500\n                            );\n                        }\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#div_suggest_change_html\")\n            .html(\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['label']); ?></label><input type=\"text\" id=\"label_change\" value=\"'+$(\"#hid_label\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['pw']); ?></label><input type=\"text\" id=\"pwd_change\" value=\"\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '&nbsp;<i class=\"fa fa-info-circle fa-lg tip\" title=\"<?php echo addslashes($LANG['suggest_change_password_blank']); ?>\"></i>' +\n                //'<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['description']); ?></label><textarea id=\"description_change_change\" class=\"input_text_80 ui-widget-content ui-corner-all\">'+$(\"#hid_desc\").val()+'</textarea>' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['index_login']); ?></label><input type=\"text\" id=\"login_change\" value=\"'+$(\"#hid_login\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['email']); ?></label><input type=\"text\" id=\"email_change\" value=\"'+$(\"#hid_email\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['url']); ?></label><input type=\"text\" id=\"url_change\" value=\"'+$(\"#hid_url\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['comment']); ?></label><input type=\"text\" id=\"comment_change\" value=\"\" class=\"input_text_80 ui-widget-content ui-corner-all\">'\n            )\n            .show();\n            $(\".tip\").tooltipster({multiple: true});\n        }\n    });\n    //<=\n\n    // => ATTACHMENTS INIT\n    var uploader_attachments = new plupload.Uploader({\n        runtimes : \"html5,flash,silverlight,html4\",\n        browse_button : \"item_attach_pickfiles\",\n        container : \"item_upload\",\n        max_file_size : \"<?php\nif (strrpos($SETTINGS['upload_maxfilesize'], \"mb\") === false) {\n    echo $SETTINGS['upload_maxfilesize'].\"mb\";\n} else {\n    echo $SETTINGS['upload_maxfilesize'];\n}\n?>\",\n        chunk_size : \"1mb\",\n        dragdrop : true,\n        url : \"sources/upload/upload.attachments.php\",\n        flash_swf_url : \"includes/libraries/Plupload/Moxie.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/Moxie.xap\",\n        filters : [\n            {title : \"Image files\", extensions : \"<?php echo $SETTINGS['upload_imagesext']; ?>\"},\n            {title : \"Package files\", extensions : \"<?php echo $SETTINGS['upload_pkgext']; ?>\"},\n            {title : \"Documents files\", extensions : \"<?php echo $SETTINGS['upload_docext']; ?>\"},\n            {title : \"Other files\", extensions : \"<?php echo $SETTINGS['upload_otherext']; ?>\"}\n        ],<?php\nif ($SETTINGS['upload_imageresize_options'] == 1) {\n?>\n        resize : {\n            width : <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n            height : <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n            quality : <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n        },\n<?php\n}\n?>\n        init: {\n            BeforeUpload: function (up, file) {\n                $(\"#item_upload_wait\").show();\n\n                if ($(\"#random_id\").val() == \"\") {\n                    var post_id = CreateRandomString(9,\"num_no_0\");\n                    $(\"#random_id\").val(post_id);\n                }\n\n                up.setOption('multipart_params', {\n                    PHPSESSID : \"<?php echo $_SESSION['user_id']; ?>\",\n                    itemId : $(\"#random_id\").val(),\n                    type_upload : \"item_attachments\",\n                    edit_item : false,\n                    user_token: $(\"#item_user_token\").val(),\n                    files_number: $(\"#files_number\").val()\n                });\n            },\n            UploadComplete: function(up, files) {\n                $(\"#item_upload_wait\").addClass(\"hidden\");\n                $(\"#files_number\").val(0);\n            }\n        }\n    });\n\n    // Uploader options\n    uploader_attachments.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        $(\"#remove_\" + file.id).remove();\n    });\n    uploader_attachments.bind(\"Error\", function(up, err) {\n        $(\"#item_upload_list\").html(\n            \"<div class=\\'ui-state-error ui-corner-all\\' style=\\'padding:2px;\\'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    uploader_attachments.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n    });\n\n    // Load edit uploaded click\n    $(\"#item_attach_uploadfiles\").click(function(e) {\n        // generate and save token\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type : \"save_token\",\n                size : 25,\n                capital: true,\n                numeric: true,\n                ambiguous: true,\n                reason: \"item_attachments\",\n                duration: 10\n            },\n            function(data) {\n                $(\"#item_user_token\").val(data[0].token);\n                uploader_attachments.start();\n            },\n            \"json\"\n        );\n        e.preventDefault();\n    });\n    uploader_attachments.init();\n    uploader_attachments.bind('FilesAdded', function(up, files) {\n        $.each(files, function(i, file) {\n            $('#item_upload_list').append(\n                '<div id= file.id><span id=\"remove_' + file.id + '>[<a href=\\'#\\' onclick=\\'$(\\\"#' + file.id + '\\\").remove();\\'>-</a>]</span> ' +\n                file.name + ' (' + plupload.formatSize(file.size) + ')' +\n            '</div>');\n            $(\"#files_number\").val(parseInt($(\"#files_number\").val())+1);\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    // Prepare uplupload object for attachments upload\n    var edit_uploader_attachments = new plupload.Uploader({\n        runtimes : \"html5,flash,silverlight,html4\",\n        browse_button : \"item_edit_attach_pickfiles\",\n        container : \"item_edit_upload\",\n        max_file_size : \"<?php\nif (strrpos($SETTINGS['upload_maxfilesize'], \"mb\") === false) {\n    echo $SETTINGS['upload_maxfilesize'].\"mb\";\n} else {\n    echo $SETTINGS['upload_maxfilesize'];\n}\n?>\",\n        chunk_size : \"1mb\",\n        dragdrop : true,\n        url : \"sources/upload/upload.attachments.php\",\n        flash_swf_url : \"includes/libraries/Plupload/Moxie.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/Moxie.xap\",\n        filters : [\n            {title : \"Image files\", extensions : \"<?php echo $SETTINGS['upload_imagesext']; ?>\"},\n            {title : \"Package files\", extensions : \"<?php echo $SETTINGS['upload_pkgext']; ?>\"},\n            {title : \"Documents files\", extensions : \"<?php echo $SETTINGS['upload_docext']; ?>\"},\n            {title : \"Other files\", extensions : \"<?php echo $SETTINGS['upload_otherext']; ?>\"}\n        ],<?php\nif ($SETTINGS['upload_imageresize_options'] == 1) {\n        ?>\n        resize : {\n            width : <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n            height : <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n            quality : <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n        },<?php\n}\n?>\n        init: {\n            BeforeUpload: function (up, file) {\n                $(\"#item_edit_upload_wait\").show();\n\n                up.setOption('multipart_params', {\n                    PHPSESSID : \"<?php echo $_SESSION['user_id']; ?>\",\n                    itemId : $('#selected_items').val(),\n                    type_upload : \"item_attachments\",\n                    edit_item : true,\n                    user_token: $(\"#item_user_token\").val(),\n                    files_number: $(\"#edit_files_number\").val()\n                });\n            },\n            UploadComplete: function(up, files) {\n                $(\"#item_edit_upload_wait\").addClass(\"hidden\");\n                $(\"#edit_files_number\").val(0);\n            }\n        }\n    });\n\n    // Uploader options\n    edit_uploader_attachments.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        $(\"#edit_remove_\" + file.id).remove();\n    });\n    edit_uploader_attachments.bind(\"Error\", function(up, err) {\n        $(\"#item_edit_upload_list\").html(\n            \"<div class=\\'ui-state-error ui-corner-all\\' style=\\'padding:2px;\\'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    edit_uploader_attachments.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n        $(\"#edit_remove_\" + file.id).remove();\n    });\n\n    // Load edit uploaded click\n    $(\"#item_edit_attach_uploadfiles\").click(function(e) {\n        // generate and save token\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type : \"save_token\",\n                size : 25,\n                capital: true,\n                numeric: true,\n                ambiguous: true,\n                reason: \"item_attachments\",\n                duration: 30\n            },\n            function(data) {\n                $(\"#item_user_token\").val(data[0].token);\n                edit_uploader_attachments.start();\n            },\n            \"json\"\n        );\n\n        e.preventDefault();\n    });\n    edit_uploader_attachments.init();\n    edit_uploader_attachments.bind('FilesAdded', function(up, files) {\n        $.each(files, function(i, file) {\n            $('#item_edit_upload_list').append(\n                '<div id= file.id><span id=\"edit_remove_' + file.id + '>[<a href=\\'#\\' onclick=\\'$(\\\"#' + file.id + '\\\").remove();\\'>-</a>]</span> ' +\n                file.name + ' (' + plupload.formatSize(file.size) + ')' +\n            '</div>');\n            $(\"#edit_files_number\").val(parseInt($(\"#edit_files_number\").val())+1);\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    //Launch items loading\n    if ($(\"#jstree_group_selected\").val() == \"\") {\n        var first_group = 1;\n    } else {\n        var first_group = $(\"#jstree_group_selected\").val();\n    }\n\n    if ($(\"#hid_cat\").val() != \"\") {\n        first_group = $(\"#hid_cat\").val();\n    }\n\n    //load items\n    if (parseInt($(\"#query_next_start\").val()) > 0) start = parseInt($(\"#query_next_start\").val());\n    else start = 0;\n\n    // load list of items\n    if (first_group !== \"\") {\n        ListerItems(first_group,'', start);\n    }\n\n    //Load item if needed and display items list\n    if ($(\"#open_id\").val() !== \"\") {\n        AfficherDetailsItem($(\"#open_id\").val());\n        //refreshTree($(\"#hid_cat\").val(), \"0\");\n        $(\"#open_item_by_get\").val(\"\");\n    }\n\n    //Password meter for item creation\n    $(\"#pw1\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#pw_strength\",\n        \"defaultText\" : \"<?php echo addslashes($LANG['index_pw_level_txt']); ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level0']); ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level1']); ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level2']); ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level3']); ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level4']); ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level5']); ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level6']); ?>\"\n            }\n        ]\n    });\n    $('#pw1').bind({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    });\n\n    $(\"#tabs-02\").on(\n        \"score.simplePassMeter\",\n        \"#pw1\",\n        function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    );\n\n\n    //Password meter for item update\n    $(\"#edit_pw1\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#edit_pw_strength\",\n        \"defaultText\" : \"<?php echo addslashes($LANG['index_pw_level_txt']); ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level0']); ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level1']); ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level2']); ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level3']); ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level4']); ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level5']); ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level6']); ?>\"\n            }\n        ]\n    });\n    $('#edit_pw1').on(\n        \"score.simplePassMeter\", function(jQEvent, score) {\n            $(\"#edit_mypassword_complex\").val(score);\n        }\n    );\n\n    //Text search watermark\n    var tbval = $('#jstree_search').val();\n    $('#jstree_search').focus(function() { $(this).val('');});\n    $('#jstree_search').blur(function() { $(this).val(tbval);});\n    $('#search_item').focus(function() { $(this).val('');});\n    $('#search_item').blur(function() { $(this).val(tbval);});\n\n    //add date selector\n    $(\".datepicker\").datepicker({\n        dateFormat:\"<?php echo str_replace(array(\"Y\", \"M\"), array(\"yy\", \"mm\"), $SETTINGS['date_format']); ?>\",\n        changeMonth: true,\n        changeYear: true\n    });\n\n    //autocomplete for TAGS\n    $(\"#item_tags, #edit_tags\")\n        .focus()\n        .bind( \"keydown\", function( event ) {\n            if ( event.keyCode === $.ui.keyCode.TAB &&\n                    $( this ).data( \"autocomplete\" ).menu.active ) {\n                event.preventDefault();\n            }\n        })\n        .autocomplete({\n            //source: 'sources/items.queries.php?type=autocomplete_tags',\n            source: function( request, response ) {\n                $.getJSON( \"sources/items.queries.php?type=autocomplete_tags&t=1\", {\n                    term: extractLast( request.term )\n                }, response );\n            },\n            focus: function() {\n                // prevent value inserted on focus\n                return false;\n            },\n            search: function() {\n                var term = extractLast( this.value );\n            },\n            select: function( event, ui ) {\n                var terms = split( this.value );\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push( ui.item.value );\n                // add placeholder to get the comma-and-space at the end\n                terms.push( \"\" );\n                this.value = terms.join( \" \" );\n\n                return false;\n            }\n        }\n    );\n\n    //DIALOG FOR OFFLINE MODE\n    $(\"#dialog_offline_mode\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 350,\n        title: \"<?php echo addslashes($LANG['offline_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['button_offline_generate']); ?>\": function() {\n                generateOfflineFile();\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_offline_mode\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n    //DIALOG FOR EXPORT FILE\n    $(\"#dialog_export_file\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 350,\n        title: \"<?php echo addslashes($LANG['print_out_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['button_export_file']); ?>\": function() {\n                exportItemsToFile();\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_export_file\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n    //DIALOG FOR IMPORT FILE\n    $(\"#dialog_import_file\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 500,\n        title: \"<?php echo addslashes($LANG['import_csv_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_import_file\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n\n    // DIALOG BOX FOR PERSONAL PASSWORDS UPGRADE\n    $(\"#dialog_upgrade_personal_passwords\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 300,\n        title: \"<?php echo addslashes($LANG['upgrade_needed']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['admin_action_db_backup_start_tip']); ?>\": function() {\n                $(\"#dialog_upgrade_personal_passwords_status\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>&nbsp;...&nbsp;<span id=\"reencryption_progress\">0%</span>').attr(\"class\",\"\").show();\n                $.post(\n                    \"sources/utils.queries.php\",\n                    {\n                        type    : \"reencrypt_personal_pwd_start\",\n                        user_id : \"<?php echo $_SESSION['user_id']; ?>\",\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error != \"\") {\n                            $(\"#dialog_upgrade_personal_passwords_status\").html(data[0].error).addClass(\"ui-state-error\").show();\n                        } else {\n                            reEncryptPersonalPwds(data[0].pws_list, data[0].currentId, data[0].nb);\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    //DIALOG FOR SSH\n    $(\"#dialog_ssh\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 620,\n        height: 500,\n        title: \"<?php echo addslashes($LANG['update_server_password']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_ssh\").html(\"<i class=\\'fa fa-cog fa-spin fa-2x\\'></i>&nbsp;<b><?php echo addslashes($LANG['please_wait']); ?></b>\");\n        }\n    });\n\n    //Simulate a CRON activity (only 8 secs after page loading)\n    setTimeout(\n        function() {\n            // send email\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                    type : \"send_waiting_emails\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n\n            // send statistics\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                    type : \"sending_statistics\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n        },\n        8000\n    );\n\n    NProgress.done();\n});\n\n// show password during longpress\nvar mouseStillDown = false;\n$('#item_details_ok').on('mousedown', '.unhide_masked_data', function(event) {\n    mouseStillDown = true;\n     showPwdContinuous($(this).attr('id'));\n}).on('mouseup', '.unhide_masked_data', function(event) {\n     mouseStillDown = false;\n}).on('mouseleave', '.unhide_masked_data', function(event) {\n     mouseStillDown = false;\n});\nvar showPwdContinuous = function(elem_id){\n    if(mouseStillDown){\n        $('#'+elem_id).text($('#h'+elem_id).val());\n        setTimeout(\"showPwdContinuous('\"+elem_id+\"')\", 50);\n        // log password is shown\n        if (elem_id === \"id_pw\" && $(\"#pw_shown\").val() == \"0\") {\n            itemLog(\"item_password_shown\");\n            $(\"#pw_shown\").val(\"1\");\n        }\n    } else {\n        $('#'+elem_id).html('<?php echo $var['hidden_asterisk']; ?>');\n        $('.tip').tooltipster({multiple: true});\n    }\n}\n\nvar showPwd = function(){\n    $(\"#visible_pw, #edit_visible_pw\").toggle();\n}\n\n/*\n* permits to save\n*/\nfunction itemLog(log_case)\n{\n    $.post(\n        \"sources/items.logs.php\",\n        {\n            type        : log_case,\n            id_item     : $('#id_item').val(),\n            folder_id   : $('#hid_cat').val(),\n        hid_label   : $('#hid_label').val(),\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        }\n    );\n}\n\nfunction htmlspecialchars_decode (string, quote_style)\n{\n    if (string != null && string != \"\") {\n        // Convert special HTML entities back to characters\n        var optTemp = 0, i = 0, noquotes= false;\n        if (typeof quote_style === 'undefined') {        quote_style = 2;\n        }\n        string = string.toString().replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n        var OPTS = {\n            'ENT_NOQUOTES': 0,\n            'ENT_HTML_QUOTE_SINGLE' : 1,\n            'ENT_HTML_QUOTE_DOUBLE' : 2,\n            'ENT_COMPAT': 2,\n            'ENT_QUOTES': 3,\n            'ENT_IGNORE' : 4\n        };\n        if (quote_style === 0) {\n            noquotes = true;\n        }\n        if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags\n            quote_style = [].concat(quote_style);\n            for (i=0; i < quote_style.length; i++) {\n                // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n                if (OPTS[quote_style[i]] === 0) {\n                    noquotes = true;\n                } else if (OPTS[quote_style[i]]) {\n                    optTemp = optTemp | OPTS[quote_style[i]];\n                }\n            }\n            quote_style = optTemp;\n        }\n        if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {\n            string = string.replace(/&#0*39;/g, \"'\"); // PHP doesn't currently escape if more than one 0, but it should\n            // string = string.replace(/&apos;|&#x0*27;/g, \"'\"); // This would also be useful here, but not a part of PHP\n        }\n        if (!noquotes) {\n            string = string.replace(/&quot;/g, '\"');\n        }\n\n        string = string.replace(/&nbsp;/g, ' ');\n\n        // Put this in last place to avoid escape being double-decoded    string = string.replace(/&amp;/g, '&');\n    }\n    return string;\n}\n\n/**\n * Permit to load dynamically the list of Items\n */\nfunction proceed_list_update(stop_proceeding)\n{\n    stop_proceeding = stop_proceeding || \"\";\n\n    if (stop_proceeding === \"1\" || ($(\"#new_listing_characteristics\").val() !== \"\" && $(\"#query_next_start\").val() !== \"end\")) {\n        var tmp = $(\"#new_listing_characteristics\").val().split(',');\n        $(\"#new_listing_characteristics\").val(\"\");\n        ListerItems(tmp[0], tmp[1], tmp[2], tmp[3]);\n        return false;\n    }\n\n    if ($(\"#query_next_start\").val() !== \"end\") {\n        //Check if nb of items do display > to 0\n        if ($(\"#nb_items_to_display_once\").val() > 0) {\n            ListerItems($(\"#hid_cat\").val(),'', parseInt($(\"#query_next_start\").val()));\n        }\n    } else {\n        $('ul#full_items_list>li').tsort(\"\",{order:\"asc\",attr:\"name\"});\n        $(\"#items_list_loader\").addClass(\"hidden\");\n\n        // prepare clipboard items\n        var clipboard = new Clipboard('.mini_login');\n        clipboard.on('success', function(e) {\n            $(\"#message_box\").html(\"<?php echo addslashes($LANG['login_copied_clipboard']); ?>\").show().fadeOut(1000);\n            e.clearSelection();\n        });\n\n        var clipboard = new Clipboard('.mini_pw');\n        clipboard.on('success', function(e) {\n            $(\"#message_box\").html(\"<?php echo addslashes($LANG['pw_copied_clipboard']); ?>\").show().fadeOut(1000);\n            itemLog(\"item_password_copied\");\n            e.clearSelection();\n        });\n\n        $(\".tip\").tooltipster({multiple: true});\n        $(\".mini_login, .mini_pw\").css(\"cursor\", \"pointer\");\n\n        var restricted_to_roles = <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1) {\n    echo 1;\n} else {\n    echo 0;\n}\n?>;\n\n        // refine users list to the related roles\n        $.post(\n            \"sources/items.queries.php\",\n            {\n                type        : \"get_refined_list_of_users\",\n                iFolderId   : $('#hid_cat').val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                // *** restricted_to_list ***\n                $(\"#restricted_to_list\").empty();\n                // add list of users\n                if ($('#restricted_to').val() != undefined) {\n                    $(\"#restricted_to_list\").append(data.selOptionsUsers);\n                    if (restricted_to_roles == 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup>');\n                        optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                        $(\".folder_rights_user\").wrapAll(optgroup);\n                    }\n                }\n                //Add list of roles if option is set\n                if (restricted_to_roles == 1 && $('#restricted_to').val() != undefined) {\n                    //add optgroup\n                    var optgroup = $('<optgroup>');\n                    optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n                    $(\"#restricted_to_list\").append(data.selOptionsRoles);\n                    $(\".folder_rights_role\").wrapAll(optgroup);\n                }\n                //Prepare multiselect widget\n                $(\"#restricted_to_list\").select2({\n                    language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                });\n\n                // *** edit_restricted_to_list ***\n                $(\"#edit_restricted_to_list\").empty();\n                if ($('#edit_restricted_to').val() != undefined) {\n                    $(\"#edit_restricted_to_list\").append(data.selEOptionsUsers);\n                    if (restricted_to_roles == 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup>');\n                        optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                        $(\".folder_rights_user_edit\").wrapAll(optgroup);\n                    }\n                }\n                //Add list of roles if option is set\n                if (restricted_to_roles == 1 && $('#edit_restricted_to').val() != undefined) {\n                    //add optgroup\n                    var optgroup = $('<optgroup>');\n                    optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n                    $(\"#edit_restricted_to_list\").append(data.selEOptionsRoles);\n                    $(\".folder_rights_role_edit\").wrapAll(optgroup);\n                }\n                //Prepare multiselect widget\n                $(\"#edit_restricted_to_list\").select2({\n                    language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                });\n            }\n       );\n    }\n}\n\n/**\n *\n * @access public\n * @return void\n **/\nfunction items_list_filter(id)\n{\n    $(\"#full_items_list\").find(\"li\").show();\n    if (id) {\n        $(\"#full_items_list\").find(\"a:not(:contains(\" + id + \"))\").parent().addClass(\"hidden\");\n        $(\"#full_items_list\").find(\"a:contains(\" + id + \")\").parent().show();\n    }\n}\n\n\nfunction manage_history_entry(type, id)\n{\n    var data = {\"item_id\": $(\"#id_item\").val(), \"label\": sanitizeString($('#add_history_entry_label').val())};\n\n    //Send query\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type      : \"history_entry_add\",\n            folder_id : $('#hid_cat').val(),\n            data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n            key       : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            //check if format error\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            if (data.error == \"\") {\n                $(\"#item_history_log_error\").html(\"\").addClass(\"hidden\");\n                $(\"#add_history_entry_label\").val(\"\");\n                $(\"#item_history_log\").append(htmlspecialchars_decode(data.new_line));\n            } else {\n                $(\"#item_history_log_error\").html(data.error).show();\n            }\n            $(\"#div_item_history\").dialog(\"open\");\n        }\n   );\n}\n\n\n/*\n* Launch the redirection to OTV page\n*/\nfunction prepareOneTimeView()\n{\n    if ($(\"#selected_items\").val() == \"\") return;\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    //Send query\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"generate_OTV_url\",\n            id      : $(\"#id_item\").val(),\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            //check if format error\n            if (data.error == \"\") {\n                $(\"#div_dialog_message\").dialog({height:300,minWidth:750});\n                $(\"#div_dialog_message\").dialog('open');\n                $(\"#div_dialog_message_text\").html(data.url+\n                    '<div style=\"margin-top:30px;font-size:13px;text-align:center;\"><span id=\"show_otv_copied\" class=\"ui-state-focus ui-corner-all\" style=\"padding:10px;display:none;\"></span></div>'\n                );\n\n                // prepare clipboard\n                var clipboard = new Clipboard(\"#button_copy_otv_link\", {\n                    text: function() {\n                        return unsanitizeString($('#otv_link').text());\n                    }\n                });\n                clipboard.on('success', function(e) {\n                    $(\"#show_otv_copied\").html(\"<?php echo addslashes($LANG['link_is_copied']); ?>\").show().fadeOut(2000);\n\n                    e.clearSelection();\n                });\n\n                $(\".tip\").tooltipster({multiple: true});\n            } else {\n                $(\"#item_history_log_error\").html(data.error).show();\n            }\n            $(\"#div_loading\").addClass(\"hidden\");\n        },\n        \"json\"\n   );\n}\n\nfunction globalItemsSearch()\n{\n    if ($(\"#search_item\").val() != \"\") {\n        // stop items loading (if on-going)\n        $(\"#items_listing_should_stop\").val(\"1\");\n\n        // wait\n        $(\"#items_list_loader\").removeClass(\"hidden\");\n        $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['searching']); ?>');\n\n        // clean\n        $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs, .fields_div, #item_extra_info\").html(\"\");\n        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n        $(\"#full_items_list\").html(\"\");\n        $(\"#selected_items\").val(\"\");\n\n        // send query\n        $.get(\n            \"sources/find.queries.php\",\n            {\n                type        : \"search_for_items\",\n                sSearch     : $(\"#search_item\").val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                displayMessage(data.message);\n                $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['search_results']); ?>');\n                $(\"#items_list\").html(\"<ul class='liste_items 'id='full_items_list'></ul>\");\n                $(\"#full_items_list\").html(data.items_html);\n                $(\"#items_list_loader\").addClass(\"hidden\");\n            }\n        );\n    }\n}\n\n/*\n*\n*/\nfunction searchItemsWithTags(tag)\n{\n    //console.log(\">\"+tag);\n    if (tag == \"\") return false\n\n    // wait\n    $(\"#items_list_loader\").removeClass(\"hidden\");\n    $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['searching_tag']); ?>&nbsp;<b>' + tag + '</b> ...');\n\n    // clean\n    $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs\").html(\"\");\n    $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n    $(\"#full_items_list\").html(\"\");\n    $(\"#selected_items\").val(\"\");\n\n    // send query\n    $.get(\n        \"sources/find.queries.php\",\n        {\n            type        : \"search_for_items_with_tags\",\n            tagSearch   : tag,\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            displayMessage(data.message);\n            $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['search_results']); ?>&nbsp;<b>' + tag + '</b>');\n            $(\"#full_items_list\").html(data.items_html);\n            $(\"#items_list_loader\").addClass(\"hidden\");\n        }\n    );\n}\n\nfunction loadOfflineDialog()\n{\n    $(\"#dialog_offline_mode\").dialog({\n        open: function(event, ui) {\n            $(\"#div_offline_mode\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.offline.php?key=<?php echo $_SESSION['key']; ?>\", function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction loadExportDialog()\n{\n    $(\"#dialog_export_file\").dialog({\n        open: function(event, ui) {\n            $(\"#div_export_file\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.export.php?key=<?php echo $_SESSION['key']; ?>\", function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction loadImportDialog()\n{\n    $(\"#dialog_import_file\").dialog({\n        open: function(event, ui) {\n            $(\"#div_import_file\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.import.php?key=<?php echo $_SESSION['key']; ?>&folder_id=\"+$(\"#hid_cat\").val(), function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction reEncryptPersonalPwds(remainingIds, currentId, nb)\n{\n    //console.log(remainingIds+\";\"+currentId+\";\"+nb);\n    $(\"#dialog_upgrade_personal_passwords_status\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>&nbsp;...&nbsp;<span id=\"reencryption_progress\">0%</span>').attr(\"class\",\"\").show();\n\n    $.ajax({\n        url: \"sources/utils.queries.php\",\n        type : 'POST',\n        dataType : \"json\",\n        data : {\n            type        : \"reencrypt_personal_pwd\",\n            currentId   : currentId,\n            user_id     : \"<?php echo $_SESSION['user_id']; ?>\",\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        complete : function(data, statut){\n            var aIds = remainingIds.split(\",\");\n            var currentID = aIds[0];\n            aIds.shift();\n            var nb2 = aIds.length;\n            aIds = aIds.toString();\n            if (nb == 0)\n                $(\"#reencryption_progress\").html(\"100%\");\n            else\n                $(\"#reencryption_progress\").html(Math.floor(((nb-nb2) / nb) * 100)+\"%\");\n\n            if (nb2 != \"0\" || (nb2 == \"\" && currentID != \"\")) {\n                reEncryptPersonalPwds(aIds, currentID, nb);\n            } else {\n                $(\"#dialog_upgrade_personal_passwords\").html('<i class=\"fa fa-info\"></i>&nbsp;<?php echo addslashes($LANG['operation_encryption_done']); ?>');\n\n                // ensure that no upgrade popup is shown\n                $(\"#personal_upgrade_needed\").val(\"\");\n            }\n        }\n    });\n}\n\n function serverAutoChangePwd()\n {\n    //console.log(\"opening\");\n    $(\"#dialog_ssh\").dialog({\n        open: function(event, ui) {\n            $(\"#div_ssh\").load(\n                \"<?php echo $SETTINGS['cpassman_url'].'/ssh.php?key='.$_SESSION['key']; ?>&id=\"+$(\"#selected_items\").val(), function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\n/*\n**\n*/\nfunction showPasswordsHistory() {\n    if ($('#edit_past_pwds_div').text() !== \"\") {\n        $('#edit_past_pwds_div').toggle();\n    }\n}\n\n$.fn.simulateClick = function() {\n    return this.each(function() {\n        if('createEvent' in document) {\n            var doc = this.ownerDocument,\n                evt = doc.createEvent('MouseEvents');\n            evt.initMouseEvent('click', true, true, doc.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n            this.dispatchEvent(evt);\n        } else {\n            this.click(); // IE Boss!\n        }\n    });\n}\n\n\n// escape HTML characters\nString.prototype.escapeHTML = function() {\n    return this.replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n//]]>\n</script>\n", "<?php\n/**\n * @file          core.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Please login...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/**\n * redirection management\n * @param  [string] $url new url\n * @return refresh page to url\n */\nfunction redirect($url)\n{\n    // Load AntiXSS\n    require_once '../includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    if (!headers_sent()) {    //If headers not sent yet... then do php redirect\n        header('Location: '.$antiXss->xss_clean($url));\n        exit();\n    }\n\n    //If headers are sent... do java redirect... if java disabled, do html redirect.\n    echo '<script type=\"text/javascript\">';\n    echo 'window.location.href=\"'.$antiXss->xss_clean($url).'\";';\n    echo '</script>';\n    echo '<noscript>';\n    echo '<meta http-equiv=\"refresh\" content=\"0;url='.$antiXss->xss_clean($url).'\" />';\n    echo '</noscript>';\n}\n\n// Include files\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare GET variables\n$get_group = $superGlobal->get(\"group\", \"GET\");\n\n// Redirect needed?\nif (isset($_SERVER['HTTPS']) === true\n    && $_SERVER['HTTPS'] !== 'on'\n    && isset($SETTINGS['enable_sts']) === true\n    && $SETTINGS['enable_sts'] === \"1\"\n) {\n    redirect(\"https://\".$superGlobal->get(\"HTTP_HOST\", \"SERVER\").$superGlobal->get(\"REQUEST_URI\", \"SERVER\"));\n}\n\n\n// Load pwComplexity\nif (isset($SETTINGS_EXT['pwComplexity']) === false) {\n    // Pw complexity levels\n    if (isset($_SESSION['user_language']) === true && $_SESSION['user_language'] !== \"0\") {\n        require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\n        $SETTINGS_EXT['pwComplexity'] = array(\n            0=>array(0, $LANG['complex_level0']),\n            25=>array(25, $LANG['complex_level1']),\n            50=>array(50, $LANG['complex_level2']),\n            60=>array(60, $LANG['complex_level3']),\n            70=>array(70, $LANG['complex_level4']),\n            80=>array(80, $LANG['complex_level5']),\n            90=>array(90, $LANG['complex_level6'])\n        );\n    }\n}\n\n\n// LOAD CPASSMAN SETTINGS\nif (isset($SETTINGS_EXT['loaded']) === false || $SETTINGS_EXT['loaded'] !== \"1\") {\n    $SETTINGS_EXT['loaded'] = 1;\n\n    // Should we delete folder INSTALL?\n    $row = DB::queryFirstRow(\n        \"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type=%s AND intitule=%s\",\n        \"install\",\n        \"clear_install_folder\"\n    );\n    if ($row['valeur'] === \"true\") {\n        /**\n        * Permits to delete files and folders recursively\n        */\n        function delTree($dir)\n        {\n            $files = array_diff(scandir($dir), array('.', '..'));\n\n            foreach ($files as $file) {\n                if (is_dir($dir.'/'.$file)) {\n                    delTree($dir.'/'.$file);\n                } else {\n                    @unlink($dir.'/'.$file);\n                }\n            }\n            return @rmdir($dir);\n        }\n\n        $result = true;\n        if (is_dir($SETTINGS['cpassman_dir'].'/install')) {\n            // Set the permissions on the install directory and delete\n            // is server Windows or Linux?\n            if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {\n                chmodRecursive($SETTINGS['cpassman_dir'].'/install', 0755, 0440);\n            }\n            $result = delTree($SETTINGS['cpassman_dir'].'/install');\n        }\n\n        // Delete temporary install table\n        DB::query(\"DROP TABLE IF EXISTS `_install`\");\n\n        // Delete tag\n        DB::delete(\n            $pre.\"misc\",\n            \"type=%s AND intitule=%s\",\n            \"install\",\n            \"clear_install_folder\"\n        );\n    }\n}\n\n\nif (isset($_SESSION['user_settings']['usertimezone']) === true && $_SESSION['user_settings']['usertimezone'] !== \"not_defined\") {\n    // use user timezone\n    date_default_timezone_set($_SESSION['user_settings']['usertimezone']);\n} elseif (isset($SETTINGS['timezone']) === false || $SETTINGS['timezone'] === null) {\n    // use server timezone\n    date_default_timezone_set('UTC');\n    $SETTINGS['timezone'] = \"UTC\";\n} else {\n    // use server timezone\n    date_default_timezone_set($SETTINGS['timezone']);\n}\n\n\n// Load Languages stuff\nif (empty($languagesDropmenu) === true) {\n    $languagesList = array();\n    $rows = DB::query(\"SELECT * FROM \".prefix_table(\"languages\").\" GROUP BY name, label, code, flag, id ORDER BY name ASC\");\n    foreach ($rows as $record) {\n        array_push($languagesList, $record['name']);\n        if (isset($_SESSION['user_language']) && $record['name'] == $_SESSION['user_language']) {\n            $_SESSION['user_language_flag'] = $record['flag'];\n            $_SESSION['user_language_code'] = $record['code'];\n            $_SESSION['user_language_label'] = $record['label'];\n            $_SESSION['user_language_id'] = $record['id'];\n        }\n    }\n}\n\n// CHECK IF LOGOUT IS ASKED OR IF SESSION IS EXPIRED\nif ((isset($_GET['session']) === true && $_GET['session'] == \"expired\")\n    || (null !== filter_input(INPUT_POST, 'session', FILTER_SANITIZE_STRING) && filter_input(INPUT_POST, 'session', FILTER_SANITIZE_STRING) === \"expired\")\n) {\n    // Clear User tempo key\n    if (isset($_SESSION['user_id']) === true) {\n        DB::update(\n            prefix_table(\"users\"),\n            array(\n                'key_tempo' => '',\n                'timestamp' => '',\n                'session_end' => ''\n            ),\n            \"id=%i\",\n            $_SESSION['user_id']\n        );\n    }\n\n    // REDIRECTION PAGE ERREUR\n    echo '\n    <script language=\"javascript\" type=\"text/javascript\">\n    <!--\n        sessionStorage.clear();\n        window.location.href = \"logout.php\";\n    -->\n    </script>';\n    exit;\n}\n\n// CHECK IF SESSION EXISTS AND IF SESSION IS VALID\nif (empty($_SESSION['fin_session']) === false) {\n    $dataSession = DB::queryFirstRow(\n        \"SELECT key_tempo FROM \".prefix_table(\"users\").\" WHERE id=%i\",\n        $_SESSION['user_id']\n    );\n} else {\n    $dataSession['key_tempo'] = \"\";\n}\n\nif (isset($_SESSION['user_id']) === true && isset($_GET['type']) === false && isset($_GET['action']) === false && $_SESSION['user_id'] !== \"0\" && (\n        empty($_SESSION['fin_session']) === true\n        || $_SESSION['fin_session'] < time() || empty($_SESSION['key'])\n        || empty($dataSession['key_tempo']) === true\n    )\n) {\n    // Update table by deleting ID\n    DB::update(\n        prefix_table(\"users\"),\n        array(\n            'key_tempo' => '',\n            'timestamp' => '',\n            'session_end' => ''\n        ),\n        \"id=%i\",\n        $_SESSION['user_id']\n    );\n\n    //Log into DB the user's disconnection\n    if (isset($SETTINGS['log_connections']) === true\n        && $SETTINGS['log_connections'] === '1'\n        && isset($_SESSION['login']) === true\n        && empty($_SESSION['login']) === false\n    ) {\n        logEvents('user_connection', 'disconnection', $_SESSION['user_id'], $_SESSION['login']);\n    }\n\n    // erase session table\n    session_destroy();\n    $_SESSION = array();\n    unset($_SESSION);\n\n    //Redirection\n    echo '\n    <script language=\"javascript\" type=\"text/javascript\">\n    <!--\n    setTimeout(function(){document.location.href=\"index.php\"}, 1);\n    -->\n    </script>';\n}\n\n// CHECK IF UPDATE IS NEEDED\nif ((isset($SETTINGS['update_needed']) === true && ($SETTINGS['update_needed'] !== false\n    || empty($SETTINGS['update_needed']) === true))\n    && (isset($_SESSION['user_admin']) === true && $_SESSION['user_admin'] == 1)\n) {\n    $row = DB::queryFirstRow(\n        \"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type=%s_type AND intitule=%s_intitule\",\n        array(\n            \"type\" => \"admin\",\n            \"intitule\" => \"cpassman_version\"\n        )\n    );\n    if ($row['valeur'] != $SETTINGS_EXT['version']) {\n        $SETTINGS['update_needed'] = true;\n    } else {\n        $SETTINGS['update_needed'] = false;\n    }\n}\n\n/**\n * Set the personal SaltKey if authorized\n */\nif (isset($SETTINGS['enable_personal_saltkey_cookie']) === true\n    && $SETTINGS['enable_personal_saltkey_cookie'] == 1\n    && isset($_SESSION['user_id']) === true\n    && isset($_COOKIE['TeamPass_PFSK_'.md5($_SESSION['user_id'])]) === true\n) {\n    $_SESSION['user_settings']['clear_psk'] = decrypt($_COOKIE['TeamPass_PFSK_'.md5($_SESSION['user_id'])], '');\n}\n\n/* CHECK IF MAINTENANCE MODE\n* IF yes then authorize all ADMIN connections and\n* reject all others\n*/\nif (isset($SETTINGS['maintenance_mode']) === true && $SETTINGS['maintenance_mode'] == 1) {\n    if (isset($_SESSION['user_admin']) === true && $_SESSION['user_admin'] != 1) {\n        // Update table by deleting ID\n        if (isset($_SESSION['user_id']) === true) {\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'key_tempo' => '',\n                    'timestamp' => '',\n                    'session_end' => ''\n                ),\n                \"id=%i\",\n                $_SESSION['user_id']\n            );\n        }\n\n        //Log into DB the user's disconnection\n        if (isset($SETTINGS['log_connections']) === true && $SETTINGS['log_connections'] == 1) {\n            logEvents('user_connection', 'disconnection', $_SESSION['user_id'], $_SESSION['login']);\n        }\n\n        syslog(\n            LOG_WARNING,\n            \"Unlog user: \".date(\"Y/m/d H:i:s\").\" {$_SERVER['REMOTE_ADDR']} ({$_SERVER['HTTP_USER_AGENT']})\"\n        );\n\n        // erase session table\n        $_SESSION = array();\n\n        setcookie('pma_end_session');\n\n        // REDIRECTION PAGE ERREUR\n        echo '\n        <script language=\"javascript\" type=\"text/javascript\">\n        <!--\n        setTimeout(function(){document.location.href=\"logout.php\"}, 10);\n        -->\n        </script>';\n        exit;\n    }\n}\n\n/* Force HTTPS Strict Transport Security */\nif (isset($SETTINGS['enable_sts']) === true\n    && $SETTINGS['enable_sts'] === '1'\n    && isset($_SERVER['SSL_SERVER_CERT']) === true\n) {\n    // do a check to make sure that the certificate is not self signed.\n    // In apache's SSL configuration make sure \"SSLOptions +ExportCertData\" in enabled\n    $server_cert = openssl_x509_parse($_SERVER['SSL_SERVER_CERT']);\n    $cert_name = $server_cert['name'];\n    $cert_issuer = \"\";\n    foreach ($server_cert['issuer'] as $key => $value) {\n        if (is_array($value) === false) {\n            $cert_issuer .= \"/$key=$value\";\n        }\n    }\n    if (isset($cert_name) === true && empty($cert_name) === false && $cert_name != $cert_issuer) {\n        if (isset($_SERVER['HTTPS'])) {\n            header('Strict-Transport-Security: max-age=500');\n            $_SESSION['error']['sts'] = 0;\n        }\n    } elseif ($cert_name == $cert_issuer) {\n        $_SESSION['error']['sts'] = 1;\n    }\n}\n\n/* LOAD INFORMATION CONCERNING USER */\nif (isset($_SESSION['user_id']) === true && empty($_SESSION['user_id']) === false) {\n    // query on user\n    $data = DB::queryfirstrow(\n        \"SELECT admin, gestionnaire, can_manage_all_users, groupes_visibles, groupes_interdits, fonction_id FROM \".prefix_table(\"users\").\" WHERE id=%i\",\n        $_SESSION['user_id']\n    );\n\n    //Check if user has been deleted or unlogged\n    if (empty($data) === true) {\n        // erase session table\n        $_SESSION = array();\n\n        // Kill session\n        session_destroy();\n\n        //redirection to index\n        echo '\n        <script language=\"javascript\" type=\"text/javascript\">\n        <!--\n        setTimeout(function(){document.location.href=\"index.php\"}, 10);\n        -->\n        </script>';\n    } else {\n        // update user's rights\n        $_SESSION['user_admin'] = $data['admin'];\n        $_SESSION['user_manager'] = $data['gestionnaire'];\n        $_SESSION['user_can_manage_all_users'] = $data['can_manage_all_users'];\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        if (empty($data['groupes_visibles']) === false) {\n            $_SESSION['groupes_visibles'] = @implode(';', $data['groupes_visibles']);\n        }\n        if (empty($data['groupes_interdits']) === false) {\n            $_SESSION['groupes_interdits'] = @implode(';', $data['groupes_interdits']);\n        }\n\n        if (isset($_SESSION['fin_session']) === false) {\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'timestamp'=>time()\n                ),\n                \"id=%i\",\n                $_SESSION['user_id']\n            );\n        }\n\n        // get access rights\n        identifyUserRights(\n            $data['groupes_visibles'],\n            $data['groupes_interdits'],\n            $data['admin'],\n            $data['fonction_id']\n        );\n\n        // user type\n        if (isset($LANG) === true) {\n            if ($_SESSION['user_admin'] === '1') {\n                $_SESSION['user_privilege'] = $LANG['god'];\n            } elseif ($_SESSION['user_manager'] === '1') {\n                $_SESSION['user_privilege'] = $LANG['gestionnaire'];\n            } elseif ($_SESSION['user_read_only'] === '1') {\n                $_SESSION['user_privilege'] = $LANG['read_only_account'];\n            } else {\n                $_SESSION['user_privilege'] = $LANG['user'];\n            }\n        }\n\n        /*\n        * LOAD CATEGORIES\n        */\n        if (isset($SETTINGS['item_extra_fields']) === true\n            && $SETTINGS['item_extra_fields'] == 1\n            && empty($_SESSION['item_fields']) === true\n        ) {\n            $_SESSION['item_fields'] = array();\n            $rows = DB::query(\n                \"SELECT *\n                FROM \".prefix_table(\"categories\").\"\n                WHERE level=%i\",\n                \"0\"\n            );\n            foreach ($rows as $record) {\n                $arrFields = array();\n\n                // get each field\n                $rows2 = DB::query(\n                    \"SELECT *\n                    FROM \".prefix_table(\"categories\").\"\n                    WHERE parent_id=%i\n                    ORDER BY `order` ASC\",\n                    $record['id']\n                );\n                if (DB::count() > 0) {\n                    foreach ($rows2 as $field) {\n                        array_push(\n                            $arrFields,\n                            array(\n                                $field['id'],\n                                addslashes($field['title']),\n                                $field['encrypted_data'],\n                                $field['type']\n                            )\n                        );\n                    }\n                }\n\n                // store the categories\n                array_push(\n                    $_SESSION['item_fields'],\n                    array(\n                        $record['id'],\n                        addslashes($record['title']),\n                        $arrFields\n                    )\n                );\n            }\n        }\n    }\n}\n\n/*\n* CHECK PASSWORD VALIDITY\n* Don't take into consideration if LDAP in use\n*/\n$_SESSION['numDaysBeforePwExpiration'] = \"\"; //initiliaze variable\nif (isset($SETTINGS['ldap_mode']) === true && $SETTINGS['ldap_mode'] === \"1\") {\n    $_SESSION['validite_pw'] = true;\n    $_SESSION['last_pw_change'] = true;\n} else {\n    if (isset($_SESSION['last_pw_change']) === true) {\n        if ($SETTINGS['pw_life_duration'] === \"0\") {\n            $_SESSION['numDaysBeforePwExpiration'] = \"infinite\";\n            $_SESSION['validite_pw'] = true;\n        } else {\n            $_SESSION['numDaysBeforePwExpiration'] = $SETTINGS['pw_life_duration'] - round(\n                (mktime(0, 0, 0, date('m'), date('d'), date('y')) - $_SESSION['last_pw_change']) / (24 * 60 * 60)\n            );\n            if ($_SESSION['numDaysBeforePwExpiration'] <= 0) {\n                $_SESSION['validite_pw'] = false;\n            } else {\n                $_SESSION['validite_pw'] = true;\n            }\n        }\n    } else {\n        $_SESSION['validite_pw'] = false;\n    }\n}\n\n/*\n**\n*/\n$_SESSION['temporary']['user_can_printout'] = false;\nif (isset($SETTINGS['roles_allowed_to_print']) === true\n    && isset($_SESSION['user_roles']) === true\n    && (!isset($_SESSION['temporary']['user_can_printout']) || empty($_SESSION['temporary']['user_can_printout']))\n) {\n    foreach (explode(\";\", $SETTINGS['roles_allowed_to_print']) as $role) {\n        if (in_array($role, $_SESSION['user_roles']) === true) {\n            $_SESSION['temporary']['user_can_printout'] = true;\n        }\n    }\n}\n\n\n/* CHECK NUMBER OF USER ONLINE */\nDB::query(\"SELECT * FROM \".prefix_table(\"users\").\" WHERE timestamp>=%i\", time() - 600);\n$_SESSION['nb_users_online'] = DB::count();\n", "<?php\n/**\n * @file          items.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] === false || !isset($_SESSION['key']) || empty($_SESSION['key'])) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// Do checks\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'home') === false) {\n    // Not allowed page\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\n/**\n * Define Timezone\n**/\nif (isset($SETTINGS['timezone']) === true) {\n    date_default_timezone_set($SETTINGS['timezone']);\n} else {\n    date_default_timezone_set('UTC');\n}\n\nrequire_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nheader('Content-type: text/html; charset=utf-8');\nheader('Cache-Control: no-cache, must-revalidate');\nheader('Pragma: no-cache');\nrequire_once 'main.functions.php';\n\n// Ensure Complexity levels are translated\nif (isset($SETTINGS_EXT['pwComplexity']) === false) {\n    $SETTINGS_EXT['pwComplexity'] = array(\n        0=>array(0, $LANG['complex_level0']),\n        25=>array(25, $LANG['complex_level1']),\n        50=>array(50, $LANG['complex_level2']),\n        60=>array(60, $LANG['complex_level3']),\n        70=>array(70, $LANG['complex_level4']),\n        80=>array(80, $LANG['complex_level5']),\n        90=>array(90, $LANG['complex_level6'])\n    );\n}\n\n// Class loader\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// Connect to mysql server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n// phpcrypt\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/phpcrypt/phpCrypt.php';\nuse PHP_Crypt\\PHP_Crypt as PHP_Crypt;\n\n// Prepare POST variables\n$post_page = filter_input(INPUT_POST, 'page', FILTER_SANITIZE_STRING);\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING);\n$post_key = filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING);\n$post_label = filter_input(INPUT_POST, 'label', FILTER_SANITIZE_STRING);\n$post_status = filter_input(INPUT_POST, 'status', FILTER_SANITIZE_STRING);\n$post_cat = filter_input(INPUT_POST, 'cat', FILTER_SANITIZE_STRING);\n$post_receipt = filter_input(INPUT_POST, 'receipt', FILTER_SANITIZE_STRING);\n$post_item_id = filter_input(INPUT_POST, 'item_id', FILTER_SANITIZE_NUMBER_INT);\n$post_id_tree = filter_input(INPUT_POST, 'id_tree', FILTER_SANITIZE_NUMBER_INT);\n$post_folder_id = filter_input(INPUT_POST, 'folder_id', FILTER_SANITIZE_NUMBER_INT);\n$post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n$post_destination = filter_input(INPUT_POST, 'destination', FILTER_SANITIZE_NUMBER_INT);\n$post_source = filter_input(INPUT_POST, 'source', FILTER_SANITIZE_NUMBER_INT);\n$post_user_id = filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT);\n$post_iFolderId = filter_input(INPUT_POST, 'iFolderId', FILTER_SANITIZE_NUMBER_INT);\n\n// Do asked action\nif (null !== $post_type) {\n    switch ($post_type) {\n        /*\n        * CASE\n        * creating a new ITEM\n        */\n        case \"new_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                $post_data,\n                \"decode\"\n            );\n\n            // Prepare variables\n            $label = noHTML(htmlspecialchars_decode($dataReceived['label']));\n            $url = htmlspecialchars_decode($dataReceived['url']);\n            $pw = htmlspecialchars_decode($dataReceived['pw']);\n            $login = htmlspecialchars_decode($dataReceived['login']);\n            $tags = htmlspecialchars_decode($dataReceived['tags']);\n\n            // is author authorized to create in this folder\n            if (count($_SESSION['list_folders_limited']) > 0) {\n                if (!in_array($dataReceived['categorie'], array_keys($_SESSION['list_folders_limited']))\n                    && !in_array($dataReceived['categorie'], $_SESSION['groupes_visibles'])\n                    && !in_array($dataReceived['categorie'], $_SESSION['personal_visible_groups_list'])\n                ) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n            } else {\n                if (!in_array($dataReceived['categorie'], $_SESSION['groupes_visibles'])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true &&\n                !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            // is pwd empty?\n            if (empty($pw) &&\n                isset($_SESSION['user_settings']['create_item_without_password']) &&\n                $_SESSION['user_settings']['create_item_without_password'] !== '1'\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_PWD_EMPTY\"), \"encode\");\n                break;\n            }\n\n            // Check length\n            if (strlen($pw) > $SETTINGS['pwd_maximum_length']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_PWD_TOO_LONG\"), \"encode\");\n                break;\n            }\n            // check if element doesn't already exist\n            $itemExists = 0;\n            $newID = \"\";\n            $data = DB::queryfirstrow(\n                \"SELECT * FROM \".prefix_table(\"items\").\"\n                WHERE label = %s AND inactif = %i\",\n                $label,\n                0\n            );\n            $counter = DB::count();\n            if ($counter != 0) {\n                $itemExists = 1;\n            } else {\n                $itemExists = 0;\n            }\n\n            // Manage case where item is personal.\n            // In this case, duplication is allowed\n            if (isset($SETTINGS['duplicate_item'])\n                && $SETTINGS['duplicate_item'] === '0'\n                && $dataReceived['salt_key_set'] === '1'\n                && isset($dataReceived['salt_key_set'])\n                && $dataReceived['is_pf'] === '1'\n                && isset($dataReceived['is_pf'])\n            ) {\n                $itemExists = 0;\n            }\n\n            if ((isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '0' && $itemExists === 0)\n                ||\n                (isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '1')\n            ) {\n                // Handle case where pw is empty\n                // if not allowed then warn user\n                if ((isset($_SESSION['user_settings']['create_item_without_password'])\n                    && $_SESSION['user_settings']['create_item_without_password'] !== '1'\n                    ) ||\n                    !empty($pw)\n                ) {\n                    // encrypt PW\n                    if ($dataReceived['salt_key_set'] === '1' &&\n                        isset($dataReceived['salt_key_set']) &&\n                        $dataReceived['is_pf'] === '1' &&\n                        isset($dataReceived['is_pf'])\n                    ) {\n                        $passwd = cryption(\n                            $pw,\n                            $_SESSION['user_settings']['session_psk'],\n                            \"encrypt\"\n                        );\n                        $restictedTo = $_SESSION['user_id'];\n                    } else {\n                        $passwd = cryption(\n                            $pw,\n                            \"\",\n                            \"encrypt\"\n                        );\n                    }\n                } else {\n                    $passwd['string'] = '';\n                }\n\n                if (!empty($passwd[\"error\"])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_ENCRYPTION\", \"msg\" => $passwd[\"error\"]), \"encode\");\n                    break;\n                }\n\n                // ADD item\n                DB::insert(\n                    prefix_table(\"items\"),\n                    array(\n                        'label' => $label,\n                        'description' => $dataReceived['description'],\n                        'pw' => $passwd['string'],\n                        'pw_iv' => \"\",\n                        'email' => noHTML($dataReceived['email']),\n                        'url' => noHTML($url),\n                        'id_tree' => $dataReceived['categorie'],\n                        'login' => noHTML($login),\n                        'inactif' => '0',\n                        'restricted_to' => isset($dataReceived['restricted_to']) ? $dataReceived['restricted_to'] : '0',\n                        'perso' => (isset($dataReceived['salt_key_set']) && $dataReceived['salt_key_set'] === '1' && isset($dataReceived['is_pf']) && $dataReceived['is_pf'] === '1') ? '1' : '0',\n                        'anyone_can_modify' => (isset($dataReceived['anyone_can_modify']) && $dataReceived['anyone_can_modify'] === \"on\") ? '1' : '0',\n                        'complexity_level' => $dataReceived['complexity_level']\n                        )\n                );\n                $newID = DB::insertId();\n                $pw = $passwd['string'];\n\n                // update fields\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                    foreach (explode(\"_|_\", $dataReceived['fields']) as $field) {\n                        $field_data = explode(\"~~\", $field);\n                        if (count($field_data) > 1 && !empty($field_data[1])) {\n                            // should we encrypt the data\n                            $dataTmp = DB::queryFirstRow(\n                                \"SELECT encrypted_data\n                                FROM \".prefix_table(\"categories\").\"\n                                WHERE id = %i\",\n                                $field_data[0]\n                            );\n                            if ($dataTmp['encrypted_data'] === '1') {\n                                $encrypt = cryption(\n                                    $field_data[1],\n                                    \"\",\n                                    \"encrypt\"\n                                );\n                                $enc_type = \"defuse\";\n                            } else {\n                                $encrypt['string'] = $field_data[1];\n                                $enc_type = \"not_set\";\n                            }\n\n\n                            DB::insert(\n                                prefix_table('categories_items'),\n                                array(\n                                    'item_id' => $newID,\n                                    'field_id' => $field_data[0],\n                                    'data' => $encrypt['string'],\n                                    'data_iv' => \"\",\n                                    'encryption_type' => $enc_type\n                                )\n                            );\n                        }\n                    }\n                }\n\n                // If automatic deletion asked\n                if ($dataReceived['to_be_deleted'] != 0 && !empty($dataReceived['to_be_deleted'])) {\n                    $date_stamp = dateToStamp($dataReceived['to_be_deleted']);\n                    DB::insert(\n                        prefix_table('automatic_del'),\n                        array(\n                            'item_id' => $newID,\n                            'del_enabled' => 1, /* Possible values: 0=deactivated;1=activated */\n                            'del_type' => $date_stamp !== false ? 2 : 1, /* Possible values:  1=counter;2=date */\n                            'del_value' => $date_stamp !== false ? $date_stamp : $dataReceived['to_be_deleted']\n                            )\n                    );\n                }\n\n                // Manage retriction_to_roles\n                if (isset($dataReceived['restricted_to_roles'])) {\n                    foreach (array_filter(explode(';', $dataReceived['restricted_to_roles'])) as $role) {\n                        DB::insert(\n                            prefix_table('restriction_to_roles'),\n                            array(\n                                'role_id' => $role,\n                                'item_id' => $newID\n                                )\n                        );\n                    }\n                }\n                // log\n                logItems($newID, $label, $_SESSION['user_id'], 'at_creation', $_SESSION['login']);\n                // Add tags\n                $tags = explode(' ', $tags);\n                foreach ($tags as $tag) {\n                    if (!empty($tag)) {\n                        DB::insert(\n                            prefix_table('tags'),\n                            array(\n                                'item_id' => $newID,\n                                'tag' => strtolower($tag)\n                                )\n                        );\n                    }\n                }\n                // Check if any files have been added\n                if (!empty($dataReceived['random_id_from_files'])) {\n                    $rows = DB::query(\n                        \"SELECT id\n                        FROM \".prefix_table(\"files\").\"\n                        WHERE id_item = %s\",\n                        $dataReceived['random_id_from_files']\n                    );\n                    foreach ($rows as $record) {\n                        // update item_id in files table\n                        DB::update(\n                            prefix_table('files'),\n                            array(\n                                'id_item' => $newID\n                                ),\n                            \"id=%i\",\n                            $record['id']\n                        );\n                    }\n                }\n\n                // Announce by email?\n                if (!empty($dataReceived['diffusion'])) {\n                    // get links url\n                    if (empty($SETTINGS['email_server_url'])) {\n                        $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                    }\n                    // send email\n                    foreach (explode(';', $dataReceived['diffusion']) as $emailAddress) {\n                        if (!empty($emailAddress)) {\n                            // send it\n                            sendEmail(\n                                $LANG['email_subject'],\n                                str_replace(\n                                    array(\"#label\", \"#link\"),\n                                    array(stripslashes($label), $SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataReceived['categorie'].'&id='.$newID.$txt['email_body3']),\n                                    $LANG['new_item_email_body']\n                                ),\n                                $emailAddress,\n                                str_replace(\n                                    array(\"#label\", \"#link\"),\n                                    array(stripslashes($label), $SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataReceived['categorie'].'&id='.$newID.$txt['email_body3']),\n                                    $LANG['new_item_email_body']\n                                )\n                            );\n                        }\n                    }\n                }\n                // Get Expiration date\n                $expirationFlag = '';\n                if ($SETTINGS['activate_expiration'] === '1') {\n                    $expirationFlag = '<i class=\"fa fa-flag mi-green\"></i>&nbsp;';\n                }\n                // Prepare full line\n                $html = '<li class=\"item_draggable'\n                .'\" id=\"'.$newID.'\" style=\"margin-left:-30px;\">'\n                .'<span style=\"cursor:hand;\" class=\"grippy\"><i class=\"fa fa-sm fa-arrows mi-grey-1\"></i>&nbsp;</span>'\n                .$expirationFlag.'<i class=\"fa fa-sm fa-warning mi-yellow\"></i>&nbsp;'.\n                '&nbsp;<a id=\"fileclass'.$newID.'\" class=\"file\" onclick=\"AfficherDetailsItem(\\''.$newID.'\\', \\'0\\', \\'\\', \\'\\', \\'\\', \\'\\', \\'\\')\" ondblclick=\"AfficherDetailsItem(\\''.$newID.'\\', \\'0\\', \\'\\', \\'\\', \\'\\', true, \\'\\')\">'.\n                stripslashes($dataReceived['label']);\n                if (!empty($dataReceived['description']) && isset($SETTINGS['show_description']) && $SETTINGS['show_description'] === '1') {\n                    $html .= '&nbsp;<font size=2px>['.strip_tags(stripslashes(substr(cleanString($dataReceived['description']), 0, 30))).']</font>';\n                }\n                $html .= '</a><span style=\"float:right;margin:2px 10px 0px 0px;\">';\n                // mini icon for collab\n                if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                    if ($dataReceived['anyone_can_modify'] === '1') {\n                        $itemCollab = '<i class=\"fa fa-pencil fa-sm mi-grey-1 tip\" title=\"'.$LANG['item_menu_collab_enable'].'\"></i>&nbsp;&nbsp;';\n                    }\n                }\n                // display quick icon shortcuts ?\n                if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                    $itemLogin = $itemPw = \"\";\n\n                    if (!empty($dataReceived['login'])) {\n                        $itemLogin = '<span id=\"iconlogin_'.$newID.'\" class=\"copy_clipboard tip\" title=\"'.$LANG['item_menu_copy_login'].'\"><i class=\"fa fa-sm fa-user mi-black\"></i>&nbsp;</span>';\n                    }\n                    if (!empty($dataReceived['pw'])) {\n                        $itemPw = '<span id=\"iconpw_'.$newID.'\" class=\"copy_clipboard tip\" title=\"'.$LANG['item_menu_copy_login'].'\"><i class=\"fa fa-sm fa-lock mi-black\"></i>&nbsp;</span>';\n                    }\n                    $html .= $itemLogin.'&nbsp;'.$itemPw;\n                }\n                // Prepare make Favorite small icon\n                $html .= '&nbsp;<span id=\"quick_icon_fav_'.$newID.'\" title=\"Manage Favorite\" class=\"cursor\">';\n                if (in_array($newID, $_SESSION['favourites'])) {\n                    $html .= '<i class=\"fa fa-sm fa-star mi-yellow\" onclick=\"ActionOnQuickIcon('.$newID.',0)\" class=\"tip\"></i>';\n                } else {\n                    $html .= '<i class=\"fa fa-sm fa-star-o mi-black\" onclick=\"ActionOnQuickIcon('.$newID.',1)\" class=\"tip\"></i>';\n                }\n\n                $html .= '</span></li>';\n                // Build array with items\n                $itemsIDList = array($newID, $dataReceived['pw'], $login);\n\n                $returnValues = array(\n                    \"item_exists\" => $itemExists,\n                    \"error\" => \"no\",\n                    \"new_id\" => $newID,\n                    \"new_pw\" => $dataReceived['pw'],\n                    \"new_login\" => $login,\n                    \"new_entry\" => $html,\n                    \"array_items\" => $itemsIDList,\n                    \"show_clipboard_small_icons\" => (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') ? 1 : 0\n                    );\n            } elseif (isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '0' && (int) $itemExists === 1) {\n                // Encrypt data to return\n                echo prepareExchangedData(array(\"error\" => \"item_exists\"), \"encode\");\n                break;\n            }\n\n            // Update CACHE table\n            updateCacheTable(\"add_value\", $newID);\n\n            // Encrypt data to return\n            echo prepareExchangedData($returnValues, \"encode\");\n            break;\n\n        /*\n        * CASE\n        * update an ITEM\n        */\n        case \"update_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // init\n            $reloadPage = false;\n            $returnValues = array();\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                $post_data,\n                \"decode\"\n            );\n\n            if (count($dataReceived) > 0) {\n                // Prepare variables\n                $label = noHTML(($dataReceived['label']));\n                $url = noHTML(htmlspecialchars_decode($dataReceived['url']));\n                $pw = $original_pw = $sentPw = htmlspecialchars_decode($dataReceived['pw']);\n                $login = noHTML(htmlspecialchars_decode($dataReceived['login']));\n                $tags = htmlspecialchars_decode($dataReceived['tags']);\n                $email = noHTML(htmlspecialchars_decode($dataReceived['email']));\n\n                // perform a check in case of Read-Only user creating an item in his PF\n                if ($_SESSION['user_read_only'] === true && (!in_array($dataReceived['categorie'], $_SESSION['personal_folders']) || $dataReceived['is_pf'] !== '1')) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n\n                // Get all informations for this item\n                $dataItem = DB::queryfirstrow(\n                    \"SELECT *\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                    WHERE i.id=%i AND l.action = %s\",\n                    $dataReceived['id'],\n                    \"at_creation\"\n                );\n                // check that actual user can access this item\n                $restrictionActive = true;\n                $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n                if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                    $restrictionActive = false;\n                }\n                if (empty($dataItem['restricted_to'])) {\n                    $restrictionActive = false;\n                }\n\n                // perform a check in case of Read-Only user creating an item in his PF\n                if ($_SESSION['user_read_only'] === true && !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n\n                if ((\n                        in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])\n                        && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id']))\n                        && $restrictionActive === false\n                    )\n                    ||\n                    (\n                        isset($SETTINGS['anyone_can_modify'])\n                        && $SETTINGS['anyone_can_modify'] === '1'\n                        && $dataItem['anyone_can_modify'] === '1'\n                        && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1')\n                        && $restrictionActive === false\n                    )\n                    ||\n                    (@in_array(\n                        $post_id,\n                        $_SESSION['list_folders_limited'][$post_folder_id]\n                    ))\n                ) {\n                    // Is pwd empty?\n                    if (empty($pw) && isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_PWD_EMPTY\"), \"encode\");\n                        break;\n                    }\n\n                    // Check length\n                    if (strlen($pw) > $SETTINGS['pwd_maximum_length']) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_PWD_TOO_LONG\"), \"encode\");\n                        break;\n                    }\n                    // Get existing values\n                    $data = DB::queryfirstrow(\n                        \"SELECT i.id as id, i.label as label, i.description as description, i.pw as pw, i.url as url, i.id_tree as id_tree, i.perso as perso, i.login as login,\n                        i.inactif as inactif, i.restricted_to as restricted_to, i.anyone_can_modify as anyone_can_modify, i.email as email, i.notification as notification,\n                        u.login as user_login, u.email as user_email\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"log_items\").\" as l ON (i.id=l.id_item)\n                        INNER JOIN \".prefix_table(\"users\").\" as u ON (u.id=l.id_user)\n                        WHERE i.id=%i\",\n                        $dataReceived['id']\n                    );\n                    // encrypt PW\n                    if ((isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') || !empty($pw)) {\n                        if ($dataReceived['salt_key_set'] === '1' && isset($dataReceived['salt_key_set']) && $dataReceived['is_pf'] === '1' && isset($dataReceived['is_pf'])) {\n                            $sentPw = $pw;\n                            $passwd = cryption(\n                                $pw,\n                                $_SESSION['user_settings']['session_psk'],\n                                \"encrypt\"\n                            );\n                            $restictedTo = $_SESSION['user_id'];\n                        } else {\n                            $passwd = cryption(\n                                $pw,\n                                \"\",\n                                \"encrypt\"\n                            );\n                        }\n\n                        if (!empty($passwd[\"error\"])) {\n                            echo prepareExchangedData(array(\"error\" => $passwd[\"error\"]), \"encode\");\n                            break;\n                        }\n                    } else {\n                        $passwd['string'] = \"\";\n                    }\n\n                    // ---Manage tags\n                    // deleting existing tags for this item\n                    DB::delete($pre.\"tags\", \"item_id = %i\", $dataReceived['id']);\n\n                    // Add new tags\n                    $return_tags = \"\";\n                    $tags = explode(' ', $tags);\n                    foreach ($tags as $tag) {\n                        if (!empty($tag)) {\n                            // save in DB\n                            DB::insert(\n                                prefix_table('tags'),\n                                array(\n                                    'item_id' => $dataReceived['id'],\n                                    'tag' => strtolower($tag)\n                                )\n                            );\n                            // prepare display\n                            if (empty($tags)) {\n                                $return_tags = \"<span class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".strtolower($tag).\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".strtolower($tag).\"</span></span>\";\n                            } else {\n                                $return_tags .= \"&nbsp;&nbsp;<span class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".strtolower($tag).\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".strtolower($tag).\"</span></span>\";\n                            }\n                        }\n                    }\n\n                    // update item\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'label' => $label,\n                            'description' => $dataReceived['description'],\n                            'pw' => $passwd['string'],\n                            'pw_iv' => \"\",\n                            'email' => $email,\n                            'login' => $login,\n                            'url' => $url,\n                            'id_tree' => (!isset($dataReceived['categorie']) || $dataReceived['categorie'] === \"undefined\") ? $dataItem['id_tree'] : $dataReceived['categorie'],\n                            'restricted_to' => isset($dataReceived['restricted_to']) ? $dataReceived['restricted_to'] : '0',\n                            'anyone_can_modify' => (isset($dataReceived['anyone_can_modify']) && $dataReceived['anyone_can_modify'] === \"on\") ? '1' : '0',\n                            'complexity_level' => $dataReceived['complexity_level']\n                            ),\n                        \"id=%i\",\n                        $dataReceived['id']\n                    );\n                    // update fields\n                    if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                        foreach (explode(\"_|_\", $dataReceived['fields']) as $field) {\n                            $field_data = explode(\"~~\", $field);\n                            if (count($field_data) > 1 && !empty($field_data[1])) {\n                                $dataTmpCat = DB::queryFirstRow(\n                                    \"SELECT c.title AS title, i.data AS data, i.data_iv AS data_iv, i.encryption_type AS encryption_type, c.encrypted_data AS encrypted_data\n                                    FROM \".prefix_table(\"categories_items\").\" AS i\n                                    INNER JOIN \".prefix_table(\"categories\").\" AS c ON (i.field_id=c.id)\n                                    WHERE i.field_id = %i AND i.item_id = %i\",\n                                    $field_data[0],\n                                    $dataReceived['id']\n                                );\n                                // store Field text in DB\n                                if (count($dataTmpCat['title']) === 0) {\n                                    // get info about this custom field\n                                    $dataTmpCat = DB::queryFirstRow(\n                                        \"SELECT title, encrypted_data\n                                        FROM \".prefix_table(\"categories\").\"\n                                        WHERE id = %i\",\n                                        $field_data[0]\n                                    );\n\n                                    // should we encrypt the data\n                                    if ($dataTmpCat['encrypted_data'] === '1') {\n                                        $encrypt = cryption(\n                                            $field_data[1],\n                                            \"\",\n                                            \"encrypt\"\n                                        );\n                                        $enc_type = \"defuse\";\n                                    } else {\n                                        $encrypt['string'] = $field_data[1];\n                                        $enc_type = \"not_set\";\n                                    }\n\n                                    // store field text\n                                    DB::insert(\n                                        prefix_table('categories_items'),\n                                        array(\n                                            'item_id' => $dataReceived['id'],\n                                            'field_id' => $field_data[0],\n                                            'data' => $encrypt['string'],\n                                            'data_iv' => \"\",\n                                            'encryption_type' => $enc_type\n                                        )\n                                    );\n\n                                    // update LOG\n                                    logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_field : '.$dataTmpCat['title'].' : '.$field_data[1]);\n                                } else {\n                                    // compare the old and new value\n                                    if ($dataTmpCat['encryption_type'] === \"defuse\") {\n                                        $oldVal = cryption(\n                                            $dataTmpCat['data'],\n                                            \"\",\n                                            \"decrypt\"\n                                        );\n                                    } else {\n                                        $oldVal['string'] = $dataTmpCat['data'];\n                                    }\n\n                                    if ($field_data[1] !== $oldVal['string']) {\n                                        // should we encrypt the data\n                                        if ($dataTmpCat['encrypted_data'] === '1') {\n                                            $encrypt = cryption(\n                                                $field_data[1],\n                                                \"\",\n                                                \"encrypt\"\n                                            );\n                                            $enc_type = \"defuse\";\n                                        } else {\n                                            $encrypt['string'] = $field_data[1];\n                                            $enc_type = \"not_set\";\n                                        }\n\n                                        // update value\n                                        DB::update(\n                                            prefix_table('categories_items'),\n                                            array(\n                                                'data' => $encrypt['string'],\n                                                'data_iv' => \"\",\n                                                'encryption_type' => $enc_type\n                                            ),\n                                            \"item_id = %i AND field_id = %i\",\n                                            $dataReceived['id'],\n                                            $field_data[0]\n                                        );\n\n                                        // update LOG\n                                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_field : '.$dataTmpCat['title'].' => '.$oldVal['string']);\n                                    }\n                                }\n                            } else {\n                                if (empty($field_data[1])) {\n                                    DB::delete(\n                                        $pre.\"categories_items\",\n                                        \"item_id = %i AND field_id = %s\",\n                                        $dataReceived['id'],\n                                        $field_data[0]\n                                    );\n                                }\n                            }\n                        }\n                    }\n\n                    // Update automatic deletion - Only by the creator of the Item\n                    if (isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] === '1') {\n                        // check if elem exists in Table. If not add it or update it.\n                        DB::query(\"SELECT * FROM \".prefix_table(\"automatic_del\").\" WHERE item_id = %i\", $dataReceived['id']);\n                        if (DB::count() === 0) {\n                            // No automatic deletion for this item\n                            if (!empty($dataReceived['to_be_deleted']) || ($dataReceived['to_be_deleted'] > 0 && is_numeric($dataReceived['to_be_deleted']))) {\n                                // Automatic deletion to be added\n                                DB::insert(\n                                    prefix_table('automatic_del'),\n                                    array(\n                                        'item_id' => $dataReceived['id'],\n                                        'del_enabled' => 1,\n                                        'del_type' => is_numeric($dataReceived['to_be_deleted']) ? 1 : 2,\n                                        'del_value' => is_numeric($dataReceived['to_be_deleted']) ? $dataReceived['to_be_deleted'] : dateToStamp($dataReceived['to_be_deleted'])\n                                        )\n                                );\n                                // update LOG\n                                logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_automatic_del : '.$dataReceived['to_be_deleted']);\n                            }\n                        } else {\n                            // Automatic deletion exists for this item\n                            if (!empty($dataReceived['to_be_deleted']) || ($dataReceived['to_be_deleted'] > 0 && is_numeric($dataReceived['to_be_deleted']))) {\n                                // Update automatic deletion\n                                DB::update(\n                                    $pre.\"automatic_del\",\n                                    array(\n                                        'del_type' => is_numeric($dataReceived['to_be_deleted']) ? 1 : 2,\n                                        'del_value' => is_numeric($dataReceived['to_be_deleted']) ? $dataReceived['to_be_deleted'] : dateToStamp($dataReceived['to_be_deleted'])\n                                        ),\n                                    \"item_id = %i\",\n                                    $dataReceived['id']\n                                );\n                            } else {\n                                // delete automatic deleteion for this item\n                                DB::delete($pre.\"automatic_del\", \"item_id = %i\", $dataReceived['id']);\n                            }\n                            // update LOG\n                            logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_automatic_del : '.$dataReceived['to_be_deleted']);\n                        }\n                    }\n\n                    // get readable list of restriction\n                    $listOfRestricted = $oldRestrictionList = \"\";\n                    if (!empty($dataReceived['restricted_to']) && $SETTINGS['restricted_to'] === '1') {\n                        foreach (explode(';', $dataReceived['restricted_to']) as $userRest) {\n                            if (!empty($userRest)) {\n                                $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= %i\", $userRest);\n                                if (empty($listOfRestricted)) {\n                                    $listOfRestricted = $dataTmp['login'];\n                                } else {\n                                    $listOfRestricted .= \";\".$dataTmp['login'];\n                                }\n                            }\n                        }\n                    }\n                    if ($data['restricted_to'] != $dataReceived['restricted_to'] && $SETTINGS['restricted_to'] === '1') {\n                        if (!empty($data['restricted_to'])) {\n                            foreach (explode(';', $data['restricted_to']) as $userRest) {\n                                if (!empty($userRest)) {\n                                    $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= \".$userRest);\n                                    if (empty($oldRestrictionList)) {\n                                        $oldRestrictionList = $dataTmp['login'];\n                                    } else {\n                                        $oldRestrictionList .= \";\".$dataTmp['login'];\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // Manage retriction_to_roles\n                    if (isset($dataReceived['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1') {\n                        // get values before deleting them\n                        $rows = DB::query(\n                            \"SELECT t.title\n                            FROM \".prefix_table(\"roles_title\").\" as t\n                            INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (t.id=r.role_id)\n                            WHERE r.item_id = %i\n                            ORDER BY t.title ASC\",\n                            $dataReceived['id']\n                        );\n                        foreach ($rows as $record) {\n                            if (empty($oldRestrictionList)) {\n                                $oldRestrictionList = $record['title'];\n                            } else {\n                                $oldRestrictionList .= \";\".$record['title'];\n                            }\n                        }\n                        // delete previous values\n                        DB::delete(prefix_table(\"restriction_to_roles\"), \"item_id = %i\", $dataReceived['id']);\n                        // add roles for item\n                        foreach (array_filter(explode(';', $dataReceived['restricted_to_roles'])) as $role) {\n                            $role = explode(\"role_\", $role);\n                            if (count($role) > 1) {\n                                $role = $role[1];\n                            } else {\n                                $role = $role[0];\n                            }\n                            DB::insert(\n                                prefix_table('restriction_to_roles'),\n                                array(\n                                    'role_id' => $role,\n                                    'item_id' => $dataReceived['id']\n                                    )\n                            );\n                            $dataTmp = DB::queryfirstrow(\"SELECT title FROM \".prefix_table(\"roles_title\").\" WHERE id= \".$role);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['title'];\n                            } else {\n                                $listOfRestricted .= \";\".$dataTmp['title'];\n                            }\n                        }\n                    }\n                    // Update CACHE table\n                    updateCacheTable(\"update_value\", $dataReceived['id']);\n                    // Log all modifications done\n                    /*LABEL */\n                    if ($data['label'] != $label) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_label : '.$data['label'].' => '.$label);\n                    }\n                    /*LOGIN */\n                    if ($data['login'] != $login) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_login : '.$data['login'].' => '.$login);\n                    }\n                    /*EMAIL */\n                    if ($data['email'] != $dataReceived['email']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_email : '.$data['email'].' => '.$dataReceived['email']);\n                    }\n                    /*URL */\n                    if ($data['url'] != $url && $url != \"http://\") {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_url : '.$data['url'].' => '.$url);\n                    }\n                    /*DESCRIPTION */\n                    if ($data['description'] != $dataReceived['description']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_description');\n                    }\n                    /*FOLDER */\n                    if ($data['id_tree'] != $dataReceived['categorie']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_category : '.$data['id_tree'].' => '.$dataReceived['categorie']);\n                        // ask for page reloading\n                        $reloadPage = true;\n                    }\n                    /*PASSWORD */\n                    if ($dataReceived['salt_key_set'] === '1' && isset($dataReceived['salt_key_set']) && $dataReceived['is_pf'] === '1' && isset($dataReceived['is_pf'])) {\n                        $oldPw = $data['pw'];\n                        $oldPwClear = cryption(\n                            $oldPw,\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    } else {\n                        $oldPw = $data['pw'];\n                        $oldPwClear = cryption(\n                            $oldPw,\n                            \"\",\n                            \"decrypt\"\n                        );\n                    }\n                    if ($sentPw != $oldPwClear['string']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_pw :'.$oldPw, \"\", \"defuse\");\n                    }\n                    /*RESTRICTIONS */\n                    if ($data['restricted_to'] != $dataReceived['restricted_to']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_restriction : '.$oldRestrictionList.' => '.$listOfRestricted);\n                    }\n                    // Reload new values\n                    $dataItem = DB::queryfirstrow(\n                        \"SELECT *\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                        WHERE i.id = %i AND l.action = %s\",\n                        $dataReceived['id'],\n                        \"at_creation\"\n                    );\n                    // Reload History\n                    $history = \"\";\n                    $rows = DB::query(\n                        \"SELECT l.date as date, l.action as action, l.raison as raison, u.login as login\n                        FROM \".prefix_table(\"log_items\").\" as l\n                        LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                        WHERE l.action <> %s AND id_item=%s\",\n                        \"at_shown\",\n                        $dataReceived['id']\n                    );\n                    foreach ($rows as $record) {\n                        $reason = explode(':', $record['raison']);\n                        if (empty($history)) {\n                            $history = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).\" - \".$record['login'].\" - \".$LANG[$record['action']].\n                            \" - \".(!empty($record['raison']) ? (count($reason) > 1 ? $LANG[trim($reason[0])].' : '.$reason[1] : $LANG[trim($reason[0])]) : '');\n                        } else {\n                            $history .= \"<br />\".date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).\" - \".\n                            $record['login'].\" - \".$LANG[$record['action']].\" - \".\n                            (!empty($record['raison']) ? (count($reason) > 1 ? $LANG[trim($reason[0])].' => '.$reason[1] : ($record['action'] != \"at_manual\" ? $LANG[trim($reason[0])] : trim($reason[0]))) : '');\n                        }\n                    }\n                    // decrypt PW\n                    if (empty($dataReceived['salt_key'])) {\n                        $encrypt = cryption(\n                            $dataItem['pw'],\n                            \"\",\n                            \"encrypt\"\n                        );\n                    } else {\n                        $encrypt = cryption(\n                            $dataItem['pw'],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"encrypt\"\n                        );\n                    }\n\n                    $pw = cleanString($encrypt['string']);\n                    // generate 2d key\n                    $_SESSION['key_tmp'] = bin2hex(PHP_Crypt::createKey(PHP_Crypt::RAND, 16));\n\n                    // Prepare files listing\n                    $files = $filesEdit = \"\";\n                    // launch query\n                    $rows = DB::query(\"SELECT id, name, file, extension FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $dataReceived['id']);\n                    foreach ($rows as $record) {\n                        // get icon image depending on file format\n                        $iconImage = fileFormatImage($record['extension']);\n\n                        // If file is an image, then prepare lightbox. If not image, then prepare donwload\n                        if (in_array($record['extension'], $SETTINGS_EXT['image_file_ext'])) {\n                            $files .= '<i class=\\'fa fa-file-image-o\\' /></i>&nbsp;<a class=\"image_dialog\" href=\"#'.$record['id'].'\" title=\"'.$record['name'].'\">'.$record['name'].'</a><br />';\n                        } else {\n                            $files .= '<i class=\\'fa fa-file-text-o\\' /></i>&nbsp;<a href=\\'sources/downloadFile.php?name='.urlencode($record['name']).'&type=sub&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&fileid='.$record['id'].'\\' target=\\'_blank\\'>'.$record['name'].'</a><br />';\n                        }\n                        // Prepare list of files for edit dialogbox\n                        $filesEdit .= '<span id=\"span_edit_file_'.$record['id'].'\"><span class=\"fa fa-'.$iconImage.'\"></span>&nbsp;<span class=\"fa fa-eraser tip\" style=\"cursor:pointer;\"  onclick=\"delete_attached_file(\\\"'.$record['id'].'\\\")\" title=\"'.$LANG['at_delete'].'\"></span>&nbsp;'.$record['name'].\"</span><br />\";\n                    }\n                    // Send email\n                    if (!empty($dataReceived['diffusion'])) {\n                        foreach (explode(';', $dataReceived['diffusion']) as $emailAddress) {\n                            if (!empty($emailAddress)) {\n                                sendEmail(\n                                    $LANG['email_subject_item_updated'],\n                                    str_replace(\n                                        array(\"#item_label#\", \"#item_category#\", \"#item_id#\", \"#url#\"),\n                                        array($label, $dataReceived['categorie'], $dataReceived['id'], $SETTINGS['cpassman_url']),\n                                        $LANG['email_body_item_updated']\n                                    ),\n                                    $emailAddress,\n                                    str_replace(\"#item_label#\", $label, $LANG['email_bodyalt_item_updated'])\n                                );\n                            }\n                        }\n                    }\n\n                    // send email to user that whant to be notified\n                    if ($dataItem['notification'] !== null && !empty($dataItem['notification'])) {\n                        $users_to_be_notified = array_filter(explode(\";\", $dataItem['notification']));\n\n                        // perform query to get emails\n                        $users_email = DB::QUERY(\n                            \"SELECT id, email\n                            FROM \".prefix_table(\"users\").\"\n                            WHERE id IN %li\",\n                            $users_to_be_notified\n                        );\n\n                        // build emails list\n                        $mailing = \"\";\n                        foreach ($users_email as $record) {\n                            if (empty($mailing)) {\n                                $mailing = $record['email'];\n                            } else {\n                                $mailing = \",\".$record['email'];\n                            }\n                        }\n\n                        // send email\n                        DB::insert(\n                            prefix_table('emails'),\n                            array(\n                                'timestamp' => time(),\n                                'subject' => $LANG['email_subject_item_updated'],\n                                'body' =>\n                                    str_replace(\n                                        array(\"#item_label#\", \"#item_category#\", \"#item_id#\", \"#url#\"),\n                                        array($label, $dataReceived['categorie'], $dataReceived['id'], $SETTINGS['cpassman_url']),\n                                        $LANG['email_body_item_updated']\n                                    ),\n                                'receivers' => $mailing,\n                                'status' => ''\n                                )\n                        );\n                    }\n\n                    // Prepare some stuff to return\n                    $arrData = array(\n                        \"files\" => $files,\n                        \"history\" => str_replace('\"', '&quot;', $history),\n                        \"files_edit\" => $filesEdit,\n                        \"id_tree\" => $dataItem['id_tree'],\n                        \"id\" => $dataItem['id'],\n                        \"reload_page\" => $reloadPage,\n                        \"restriction_to\" => $dataReceived['restricted_to'].$dataReceived['restricted_to_roles'],\n                        \"list_of_restricted\" => $listOfRestricted,\n                        \"tags\" => $return_tags,\n                        \"error\" => \"\"\n                        );\n                } else {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_NOT_ALLOWED_TO_EDIT\"), \"encode\");\n                    break;\n                }\n            } else {\n                // an error appears on JSON format\n                $arrData = array(\"error\" => \"ERR_JSON_FORMAT\");\n            }\n            // return data\n            echo prepareExchangedData($arrData, \"encode\");\n            break;\n\n        /*\"..\"\n          * CASE\n          * Copy an Item\n        */\n        case \"copy_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"1'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // Prepare POST variables\n            $post_source_id = filter_input(INPUT_POST, 'source_id', FILTER_SANITIZE_NUMBER_INT);\n            $post_dest_id = filter_input(INPUT_POST, 'dest_id', FILTER_SANITIZE_NUMBER_INT);\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === '1'\n                && (!in_array($post_source_id, $_SESSION['personal_folders'])\n                    || !in_array($post_dest_id, $_SESSION['personal_folders']))\n            ) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"2'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            $returnValues = $pw = \"\";\n            $is_perso = 0;\n\n            if (null !== $post_item_id\n                && empty($post_item_id) === false\n                && empty($post_dest_id) === false\n            ) {\n                // load the original record into an array\n                $originalRecord = DB::queryfirstrow(\n                    \"SELECT * FROM \".prefix_table(\"items\").\"\n                    WHERE id=%i\",\n                    $post_item_id\n                );\n                $dataDestination = DB::queryfirstrow(\n                    \"SELECT personal_folder FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE id=%i\",\n                    $post_dest_id\n                );\n\n                // previous is personal folder and public one\n                if ($originalRecord['perso'] === '1' && $dataDestination['personal_folder'] === '0') {\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        \"\",\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now public\n                    $is_perso = 0;\n                // previous is public folder and personal one\n                } elseif ($originalRecord['perso'] === '0' && $dataDestination['personal_folder'] === '1') {\n                    // check if PSK is set\n                    if (!isset($_SESSION['user_settings']['session_psk']) || empty($_SESSION['user_settings']['session_psk'])) {\n                        $returnValues = '[{\"error\" : \"no_psk\"}, {\"error_text\" : \"'.addslashes($LANG['alert_message_personal_sk_missing']).'\"}]';\n                        echo $returnValues;\n                        break;\n                    }\n\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now private\n                    $is_perso = 1;\n                } elseif ($originalRecord['perso'] === '1' && $dataDestination['personal_folder'] === '1') {\n                // previous is public folder and personal one\n                    // check if PSK is set\n                    if (!isset($_SESSION['user_settings']['session_psk']) || empty($_SESSION['user_settings']['session_psk'])) {\n                        $returnValues = '[{\"error\" : \"no_psk\"}, {\"error_text\" : \"'.addslashes($LANG['alert_message_personal_sk_missing']).'\"}]';\n                        echo $returnValues;\n                        break;\n                    }\n\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now private\n                    $is_perso = 1;\n                } elseif ($originalRecord['perso'] === '0' && $dataDestination['personal_folder'] === '0') {\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        \"\",\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // is public item\n                    $is_perso = 0;\n                } else {\n                    $returnValues = '[{\"error\" : \"case_not_managed\"}, {\"error_text\" : \"ERROR - case is not managed\"}]';\n                        echo $returnValues;\n                        break;\n                }\n\n                // insert the new record and get the new auto_increment id\n                DB::insert(\n                    prefix_table(\"items\"),\n                    array(\n                        'label' => \"duplicate\"\n                    )\n                );\n                $newID = DB::insertId();\n                // generate the query to update the new record with the previous values\n                $aSet = array();\n                foreach ($originalRecord as $key => $value) {\n                    if ($key === \"id_tree\") {\n                        array_push($aSet, array(\"id_tree\" => $post_dest_id));\n                    } elseif ($key === \"viewed_no\") {\n                        array_push($aSet, array(\"viewed_no\" => \"0\"));\n                    } elseif ($key === \"pw\" && !empty($pw)) {\n                        array_push($aSet, array(\"pw\" => $originalRecord['pw']));\n                        array_push($aSet, array(\"pw_iv\" => \"\"));\n                    } elseif ($key === \"perso\") {\n                        array_push($aSet, array(\"perso\" => $is_perso));\n                    } elseif ($key != \"id\" && $key != \"key\") {\n                        array_push($aSet, array($key => $value));\n                    }\n                }\n\n                DB::update(\n                    prefix_table(\"items\"),\n                    $aSet,\n                    \"id = %i\",\n                    $newID\n                );\n                // Add attached itms\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $post_item_id);\n                foreach ($rows as $record) {\n                    // duplicate file\n                    $fileRandomId = md5($record['name'].time());\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].DIRECTORY_SEPARATOR.$record['file'],\n                        $SETTINGS['path_to_upload_folder'].DIRECTORY_SEPARATOR.$fileRandomId\n                    );\n\n                    // store in DB\n                    DB::insert(\n                        prefix_table('files'),\n                        array(\n                            'id_item' => $newID,\n                            'name' => $record['name'],\n                            'size' => $record['size'],\n                            'extension' => $record['extension'],\n                            'type' => $record['type'],\n                            'file' => $fileRandomId,\n                            'status' => $record['status']\n                        )\n                    );\n                }\n\n                // Add specific restrictions\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id = %i\", $post_item_id);\n                foreach ($rows as $record) {\n                    DB::insert(\n                        prefix_table('restriction_to_roles'),\n                        array(\n                            'item_id' => $newID,\n                            'role_id' => $record['role_id']\n                            )\n                    );\n                }\n\n                // Add Tags\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"tags\").\" WHERE item_id = %i\", $post_item_id);\n                foreach ($rows as $record) {\n                    DB::insert(\n                        prefix_table('tags'),\n                        array(\n                            'item_id' => $newID,\n                            'tag' => $record['tag']\n                            )\n                    );\n                }\n\n                // Add custom fields\n\n\n                // Add this duplicate in logs\n                logItems($newID, $originalRecord['label'], $_SESSION['user_id'], 'at_creation', $_SESSION['login']);\n                // Add the fact that item has been copied in logs\n                logItems($newID, $originalRecord['label'], $_SESSION['user_id'], 'at_copy', $_SESSION['login']);\n                // reload cache table\n                require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n                updateCacheTable(\"reload\", \"\");\n\n                $returnValues = '[{\"status\" : \"ok\"}, {\"new_id\" : \"'.$newID.'\"}]';\n            } else {\n                // no item\n                $returnValues = '[{\"error\" : \"no_item\"}, {\"error_text\" : \"No item ID\"}]';\n            }\n            // return data\n            echo $returnValues;\n            break;\n\n        /*\n          * CASE\n          * Display informations of selected item\n        */\n        case \"show_details_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            $arrData = array();\n            // return ID\n            $arrData['id'] = $post_id;\n            $arrData['id_user'] = API_USER_ID;\n            $arrData['author'] = \"API\";\n\n            // Check if item is deleted\n            // taking into account that item can be restored.\n            // so if restoration timestamp is higher than the deletion one\n            // then we can show it\n            $item_deleted = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"log_items\").\"\n                WHERE id_item = %i AND action = %s\n                ORDER BY date DESC\n                LIMIT 0, 1\",\n                $post_id,\n                \"at_delete\"\n            );\n            $dataDeleted = DB::count();\n\n            $item_restored = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"log_items\").\"\n                WHERE id_item = %i AND action = %s\n                ORDER BY date DESC\n                LIMIT 0, 1\",\n                $post_id,\n                \"at_restored\"\n            );\n\n            if ($dataDeleted != 0 && intval($item_deleted['date']) > intval($item_restored['date'])) {\n                // This item is deleted => exit\n                echo prepareExchangedData(array('show_detail_option' => 2), \"encode\");\n                break;\n            }\n\n            // Get all informations for this item\n            $dataItem = DB::queryfirstrow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\" as i\n                INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                WHERE i.id = %i AND l.action = %s\",\n                $post_id,\n                \"at_creation\"\n            );\n            // LEFT JOIN \".$pre.\"categories_items as c ON (c.id_item = i.id)\n            // INNER JOIN \".$pre.\"automatic_del as d ON (d.item_id = i.id)\n            // Get all USERS infos\n            $listNotif = array_filter(explode(\";\", $dataItem['notification']));\n            $listRest = array_filter(explode(\";\", $dataItem['restricted_to']));\n            $listeRestriction = $listNotification = $listNotificationEmails = \"\";\n            $rows = DB::query(\"SELECT id, login, email FROM \".prefix_table(\"users\"));\n            foreach ($rows as $record) {\n                // Get auhtor\n                if ($record['id'] === $dataItem['id_user']) {\n                    $arrData['author'] = $record['login'];\n                    $arrData['author_email'] = $record['email'];\n                    $arrData['id_user'] = $dataItem['id_user'];\n                    if (in_array($record['id'], $listNotif)) {\n                        $arrData['notification_status'] = true;\n                    } else {\n                        $arrData['notification_status'] = false;\n                    }\n                }\n\n                // Get restriction list for users\n                if (in_array($record['id'], $listRest)) {\n                    $listeRestriction .= $record['login'].\";\";\n                }\n                // Get notification list for users\n                if (in_array($record['id'], $listNotif)) {\n                    $listNotification .= $record['login'].\";\";\n                    $listNotificationEmails .= $record['email'].\",\";\n                }\n            }\n            // manage case of API user\n            if ($dataItem['id_user'] === API_USER_ID) {\n                $arrData['author'] = \"API [\".$dataItem['description'].\"]\";\n                $arrData['id_user'] = API_USER_ID;\n                $arrData['author_email'] = \"\";\n                $arrData['notification_status'] = false;\n            }\n\n            // Get all tags for this item\n            $tags = \"\";\n            $rows = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE item_id=%i\", $post_id);\n            foreach ($rows as $record) {\n                if (empty($tags)) {\n                    $tags = \"<span style='' class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".$record['tag'].\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".$record['tag'].\"</span></span>\";\n                } else {\n                    $tags .= \"&nbsp;&nbsp;<span style='' class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".$record['tag'].\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".$record['tag'].\"</span></span>\";\n                }\n            }\n\n            // TODO -> improve this check\n            // check that actual user can access this item\n            $restrictionActive = true;\n            $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n            if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                $restrictionActive = false;\n            }\n            if (empty($dataItem['restricted_to'])) {\n                $restrictionActive = false;\n            }\n            // Check if user has a role that is accepted\n            $rows_tmp = DB::query(\"SELECT role_id FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id=%i\", $post_id);\n            $myTest = 0;\n            if (in_array($_SESSION['user_id'], $rows_tmp)) {\n                $myTest = 1;\n            }\n\n            // Uncrypt PW\n            if (null !== filter_input(INPUT_POST, 'salt_key_required', FILTER_SANITIZE_STRING)\n                && filter_input(INPUT_POST, 'salt_key_required', FILTER_SANITIZE_STRING) === '1'\n                && null !== filter_input(INPUT_POST, 'salt_key_set', FILTER_SANITIZE_STRING)\n                && filter_input(INPUT_POST, 'salt_key_set', FILTER_SANITIZE_STRING) === '1'\n            ) {\n                $pw = cryption(\n                    $dataItem['pw'],\n                    $_SESSION['user_settings']['session_psk'],\n                    \"decrypt\"\n                );\n                $arrData['edit_item_salt_key'] = 1;\n            } else {\n                $pw = cryption(\n                    $dataItem['pw'],\n                    \"\",\n                    \"decrypt\"\n                );\n                $arrData['edit_item_salt_key'] = 0;\n            }\n\n            $pw = @$pw['string'];\n            if (!isUTF8($pw)) {\n                $pw = '';\n            }\n\n            // check if item is expired\n            if (null !== filter_input(INPUT_POST, 'expired_item', FILTER_SANITIZE_STRING)\n                && filter_input(INPUT_POST, 'expired_item', FILTER_SANITIZE_STRING) === '1'\n            ) {\n                $item_is_expired = true;\n            } else {\n                $item_is_expired = false;\n            }\n            // check user is admin\n            if ($_SESSION['user_admin'] === '1' && $dataItem['perso'] != 1 && (isset($SETTINGS_EXT['admin_full_right']) && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $arrData['show_details'] = 0;\n            // Check if actual USER can see this ITEM\n            } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false)\n                ||\n                (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false)\n                ||\n                (null !== $post_folder_id\n                    && isset($_SESSION['list_folders_limited'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_folders_limited'][$post_folder_id]))\n            ) {\n                // Allow show details\n                $arrData['show_details'] = 1;\n                // Display menu icon for deleting if user is allowed\n                if ($dataItem['id_user'] == $_SESSION['user_id']\n                    || $_SESSION['is_admin'] === '1'\n                    || ($_SESSION['user_manager'] === '1' && $SETTINGS['manager_edit'] === '1')\n                    || $dataItem['anyone_can_modify'] === '1'\n                    || in_array($dataItem['id_tree'], $_SESSION['list_folders_editable_by_role'])\n                    || in_array($_SESSION['user_id'], $restrictedTo)\n                ) {\n                    $arrData['user_can_modify'] = 1;\n                    $user_is_allowed_to_modify = true;\n                } else {\n                    $arrData['user_can_modify'] = 0;\n                    $user_is_allowed_to_modify = false;\n                }\n\n                // Get restriction list for roles\n                $listRestrictionRoles = array();\n                if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1') {\n                    // Add restriction if item is restricted to roles\n                    $rows = DB::query(\n                        \"SELECT t.title\n                        FROM \".prefix_table(\"roles\").\"_title as t\n                        INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (t.id=r.role_id)\n                        WHERE r.item_id = %i\n                        ORDER BY t.title ASC\",\n                        $post_id\n                    );\n                    foreach ($rows as $record) {\n                        if (!in_array($record['title'], $listRestrictionRoles)) {\n                            array_push($listRestrictionRoles, $record['title']);\n                        }\n                    }\n                }\n                // Check if any KB is linked to this item\n                if (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] === '1') {\n                    $tmp = \"\";\n                    $rows = DB::query(\n                        \"SELECT k.label, k.id\n                        FROM \".prefix_table(\"kb_items\").\" as i\n                        INNER JOIN \".prefix_table(\"kb\").\" as k ON (i.kb_id=k.id)\n                        WHERE i.item_id = %i\n                        ORDER BY k.label ASC\",\n                        $post_id\n                    );\n                    foreach ($rows as $record) {\n                        if (empty($tmp)) {\n                            $tmp = \"<a class='round-grey' href='\".$SETTINGS['cpassman_url'].\"/index.php?page=kb&id=\".$record['id'].\"'><i class='fa fa-map-pin fa-sm'></i>&nbsp;\".$record['label'].\"</a>\";\n                        } else {\n                            $tmp .= \"&nbsp;<a class='round-grey' href='\".$SETTINGS['cpassman_url'].\"/index.php?page=kb&id=\".$record['id'].\"'><i class='fa fa-map-pin fa-sm'></i>&nbsp;\".$record['label'].\"</a>\";\n                        }\n                    }\n                    $arrData['links_to_kbs'] = $tmp;\n                }\n                // Prepare DIalogBox data\n                if ($item_is_expired === false) {\n                    $arrData['show_detail_option'] = 0;\n                } elseif ($user_is_allowed_to_modify === true && $item_is_expired === true) {\n                    $arrData['show_detail_option'] = 1;\n                } else {\n                    $arrData['show_detail_option'] = 2;\n                }\n\n                $arrData['label'] = htmlspecialchars_decode($dataItem['label']);\n                $arrData['pw'] = $pw;\n                $arrData['email'] = $dataItem['email'];\n                $arrData['url'] = htmlspecialchars_decode($dataItem['url']);\n                $arrData['folder'] = $dataItem['id_tree'];\n                if (!empty($dataItem['url'])) {\n                    $arrData['link'] = \"&nbsp;<a href='\".$dataItem['url'].\"' target='_blank'>&nbsp;<i class='fa fa-link tip' title='\".$LANG['open_url_link'].\"'></i></a>\";\n                }\n\n                $arrData['description'] = preg_replace('/(?<!\\\\r)\\\\n+(?!\\\\r)/', '', strip_tags($dataItem['description'], $SETTINGS_EXT['allowedTags']));\n                $arrData['login'] = htmlspecialchars_decode(str_replace(array('\"'), array('&quot;'), $dataItem['login']));\n                $arrData['id_restricted_to'] = $listeRestriction;\n                $arrData['id_restricted_to_roles'] = count($listRestrictionRoles) > 0 ? implode(\";\", $listRestrictionRoles).\";\" : \"\";\n                $arrData['tags'] = $tags;\n                $arrData['folder'] = $dataItem['id_tree'];\n\n                if (isset($SETTINGS['enable_server_password_change'])\n                    && $SETTINGS['enable_server_password_change'] === '1') {\n                    $arrData['auto_update_pwd_frequency'] = $dataItem['auto_update_pwd_frequency'];\n                } else {\n                    $arrData['auto_update_pwd_frequency'] = \"0\";\n                }\n\n                if (isset($SETTINGS['anyone_can_modify_bydefault'])\n                    && $SETTINGS['anyone_can_modify_bydefault'] === '1') {\n                    $arrData['anyone_can_modify'] = 1;\n                } else {\n                    $arrData['anyone_can_modify'] = $dataItem['anyone_can_modify'];\n                }\n\n                // statistics\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'viewed_no' => $dataItem['viewed_no'] + 1,\n                    ),\n                    \"id = %i\",\n                    $post_id\n                );\n                $arrData['viewed_no'] = $dataItem['viewed_no'] + 1;\n\n                // get fields\n                $fieldsTmp = $arrCatList = \"\";\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1'\n                    && null !== $post_page && $post_page === \"items\"\n                ) {\n                    // get list of associated Categories\n                    $arrCatList = array();\n                    $rows_tmp = DB::query(\n                        \"SELECT id_category\n                        FROM \".prefix_table(\"categories_folders\").\"\n                        WHERE id_folder=%i\",\n                        $post_folder_id\n                    );\n                    if (DB::count() > 0) {\n                        foreach ($rows_tmp as $row) {\n                            array_push($arrCatList, $row['id_category']);\n                        }\n\n                        // get fields for this Item\n                        $rows_tmp = DB::query(\n                            \"SELECT i.field_id AS field_id, i.data AS data, i.data_iv AS data_iv,\n                            i.encryption_type AS encryption_type, c.encrypted_data, c.parent_id AS parent_id,\n                            c.type as field_type\n                            FROM \".prefix_table(\"categories_items\").\" AS i\n                            INNER JOIN \".prefix_table(\"categories\").\" AS c ON (i.field_id=c.id)\n                            WHERE i.item_id=%i AND c.parent_id IN %ls\",\n                            $post_id,\n                            $arrCatList\n                        );\n                        foreach ($rows_tmp as $row) {\n                            // Uncrypt data\n                            if ($row['encryption_type'] === \"defuse\") {\n                                $fieldText = cryption(\n                                    $row['data'],\n                                    \"\",\n                                    \"decrypt\"\n                                );\n                                $fieldText = $fieldText['string'];\n                            } else {\n                                $fieldText = $row['data'];\n                            }\n\n                            // build returned list of Fields text\n                            if (empty($fieldsTmp)) {\n                                $fieldsTmp = $row['field_id'].\n                                    \"~~\".str_replace('\"', '&quot;', $fieldText).\"~~\".$row['parent_id'].\n                                    \"~~\".$row['field_type'];\n                            } else {\n                                $fieldsTmp .= \"_|_\".$row['field_id'].\n                                \"~~\".str_replace('\"', '&quot;', $fieldText).\"~~\".$row['parent_id'].\n                                \"~~\".$row['field_type'];\n                            }\n                        }\n                    }\n                }\n                $arrData['fields'] = $fieldsTmp;\n                $arrData['categories'] = $arrCatList;\n\n                // Manage user restriction\n                if (null !== filter_input(INPUT_POST, 'restricted', FILTER_SANITIZE_STRING)) {\n                    $arrData['restricted'] = filter_input(INPUT_POST, 'restricted', FILTER_SANITIZE_STRING);\n                } else {\n                    $arrData['restricted'] = \"\";\n                }\n                // Decrement the number before being deleted\n                $dataDelete = DB::queryfirstrow(\"SELECT * FROM \".prefix_table(\"automatic_del\").\" WHERE item_id=%i\", $post_id);\n                $arrData['to_be_deleted'] = $dataDelete['del_value'];\n                $arrData['to_be_deleted_type'] = $dataDelete['del_type'];\n                if (isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] === '1') {\n                    if ($dataDelete['del_enabled'] === '1' || $arrData['id_user'] != $_SESSION['user_id']) {\n                        if ($dataDelete['del_type'] === '1' && $dataDelete['del_value'] >= 1) {\n                            // decrease counter\n                            DB::update(\n                                $pre.\"automatic_del\",\n                                array(\n                                    'del_value' => $dataDelete['del_value'] - 1\n                                    ),\n                                \"item_id = %i\",\n                                $post_id\n                            );\n                            // store value\n                            $arrData['to_be_deleted'] = $dataDelete['del_value'] - 1;\n                        } elseif ($dataDelete['del_type'] === '1' && $dataDelete['del_value'] <= 1 || $dataDelete['del_type'] === '2' && $dataDelete['del_value'] < time()\n                        ) {\n                            $arrData['show_details'] = 0;\n                            // delete item\n                            DB::delete($pre.\"automatic_del\", \"item_id = %i\", $post_id);\n                            // make inactive object\n                            DB::update(\n                                prefix_table(\"items\"),\n                                array(\n                                    'inactif' => '1',\n                                    ),\n                                \"id = %i\",\n                                $post_id\n                            );\n                            // log\n                            logItems($post_id, $dataItem['label'], $_SESSION['user_id'], 'at_delete', $_SESSION['login'], 'at_automatically_deleted');\n                            $arrData['to_be_deleted'] = 0;\n                        } elseif ($dataDelete['del_type'] === '2') {\n                            $arrData['to_be_deleted'] = date($SETTINGS['date_format'], $dataDelete['del_value']);\n                        }\n                    } else {\n                        $arrData['to_be_deleted'] = \"\";\n                    }\n                } else {\n                    $arrData['to_be_deleted'] = \"not_enabled\";\n                }\n                // send notification if enabled\n                if (isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] === '1') {\n                    // send back infos\n                    DB::insert(\n                        prefix_table('emails'),\n                        array(\n                            'timestamp' => time(),\n                            'subject' => $LANG['email_on_open_notification_subject'],\n                            'body' => str_replace(array('#tp_item_author#', '#tp_user#', '#tp_item#'), array(\" \".addslashes($arrData['author']), addslashes($_SESSION['login']), addslashes($dataItem['label'])), $LANG['email_on_open_notification_mail']),\n                            'receivers' => $listNotificationEmails,\n                            'status' => ''\n                            )\n                    );\n                } else {\n                    $arrData['notification_list'] = \"\";\n                    $arrData['notification_status'] = \"\";\n                }\n            } else {\n                $arrData['show_details'] = 0;\n                // get readable list of restriction\n                $listOfRestricted = \"\";\n                if (!empty($dataItem['restricted_to'])) {\n                    foreach (explode(';', $dataItem['restricted_to']) as $userRest) {\n                        if (!empty($userRest)) {\n                            $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= \".$userRest);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['login'];\n                            } else {\n                                $listOfRestricted .= \";\".$dataTmp['login'];\n                            }\n                        }\n                    }\n                }\n                $arrData['restricted_to'] = $listOfRestricted;\n            }\n            $arrData['timestamp'] = time();\n\n            // Encrypt data to return\n            echo prepareExchangedData($arrData, \"encode\");\n            break;\n\n        /*\n           * CASE\n           * Display History of the selected Item\n        */\n        case \"showDetailsStep2\":\n            // get Item info\n            $dataItem = DB::queryfirstrow(\"SELECT * FROM \".prefix_table(\"items\").\" WHERE id=%i\", $post_id);\n\n            // GET Audit trail\n            $history = \"\";\n            $historyOfPws = \"\";\n            $rows = DB::query(\n                \"SELECT l.date as date, l.action as action, l.raison as raison, u.login as login, l.raison_iv AS raison_iv\n                FROM \".prefix_table(\"log_items\").\" as l\n                LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                WHERE id_item=%i AND action <> %s\n                ORDER BY date ASC\",\n                $post_id,\n                \"at_shown\"\n            );\n            foreach ($rows as $record) {\n                $reason = explode(':', $record['raison']);\n                if ($record['action'] === \"at_modification\" && $reason[0] === \"at_pw \") {\n                    // check if item is PF\n                    if ($dataItem['perso'] != 1) {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            \"\",\n                            \"decrypt\"\n                        );\n                    } else {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    }\n                    $reason[1] = @$reason[1]['string'];\n                    // if not UTF8 then cleanup and inform that something is wrong with encrytion/decryption\n                    if (!isUTF8($reason[1]) || is_array($reason[1])) {\n                        $reason[1] = \"\";\n                    }\n                }\n                // imported via API\n                if (empty($record['login'])) {\n                    $record['login'] = $LANG['imported_via_api'];\n                }\n\n                if (!empty($reason[1]) || $record['action'] === \"at_copy\" || $record['action'] === \"at_creation\" || $record['action'] === \"at_manual\" || $record['action'] === \"at_modification\" || $record['action'] === \"at_delete\" || $record['action'] === \"at_restored\") {\n                    if (trim($reason[0]) === \"at_pw\" && empty($reason[1]) === false) {\n                        if (empty($historyOfPws)) {\n                            $historyOfPws = $LANG['previous_pw'].\"\\n\".$reason[1];\n                        } else {\n                            $historyOfPws .= \"\\n\".$reason[1];\n                        }\n                    }\n                }\n            }\n\n            // generate 2d key\n            $_SESSION['key_tmp'] = bin2hex(PHP_Crypt::createKey(PHP_Crypt::RAND, 16));\n\n            // Prepare files listing\n            $files = $filesEdit = \"\";\n            // launch query\n            $rows = DB::query(\"SELECT id, name, file, extension FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $post_id);\n            foreach ($rows as $record) {\n                // get icon image depending on file format\n                $iconImage = fileFormatImage($record['extension']);\n\n                // prepare text to display\n                if (strlen($record['name']) > 60 && strrpos($record['name'], \".\") >= 56) {\n                    $filename = substr($record['name'], 0, 50).\"(...)\".substr($record['name'], strrpos($record['name'], \".\"));\n                } else {\n                    $filename = $record['name'];\n                }\n\n                // If file is an image, then prepare lightbox. If not image, then prepare donwload\n                if (in_array($record['extension'], $SETTINGS_EXT['image_file_ext'])) {\n                    $files .= '<div class=\\'small_spacing\\'><i class=\\'fa fa-file-image-o\\' /></i>&nbsp;<a class=\\'image_dialog\\' href=\\'#'.$record['id'].'\\' title=\\''.$record['name'].'\\'>'.$filename.'</a></div>';\n                } else {\n                    $files .= '<div class=\\'small_spacing\\'><i class=\\'fa fa-file-text-o\\' /></i>&nbsp;<a href=\\'sources/downloadFile.php?name='.urlencode($record['name']).'&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&fileid='.$record['id'].'\\' class=\\'small_spacing\\'>'.$filename.'</a></div>';\n                }\n                // Prepare list of files for edit dialogbox\n                $filesEdit .= '<span id=\\'span_edit_file_'.$record['id'].'\\'><span class=\\'fa fa-'.$iconImage.'\\'></span>&nbsp;<span class=\\'fa fa-eraser tip\\' style=\\'cursor:pointer;\\' onclick=\\'delete_attached_file(\"'.$record['id'].'\")\\' title=\\''.$LANG['at_delete'].'\\'></span>&nbsp;'.$filename.\"</span><br />\";\n            }\n            // display lists\n            $filesEdit = str_replace('\"', '&quot;', $filesEdit);\n            $files_id = $files;\n\n            // disable add bookmark if alread bookmarked\n            if (in_array($post_id, $_SESSION['favourites'])) {\n                $favourite = 1;\n            } else {\n                $favourite = 0;\n            }\n\n            // Add the fact that item has been viewed in logs\n            if (isset($SETTINGS['log_accessed']) && $SETTINGS['log_accessed'] === '1') {\n                logItems($post_id, $dataItem['label'], $_SESSION['user_id'], 'at_shown', $_SESSION['login']);\n            }\n\n            // Add this item to the latests list\n            if (isset($_SESSION['latest_items']) && isset($SETTINGS['max_latest_items']) && !in_array($dataItem['id'], $_SESSION['latest_items'])) {\n                if (count($_SESSION['latest_items']) >= $SETTINGS['max_latest_items']) {\n                    array_pop($_SESSION['latest_items']); //delete last items\n                }\n                array_unshift($_SESSION['latest_items'], $dataItem['id']);\n                // update DB\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'latest_items' => implode(';', $_SESSION['latest_items'])\n                        ),\n                    \"id=\".$_SESSION['user_id']\n                );\n            }\n\n            // has this item a change proposal\n            DB::query(\"SELECT * FROM \".$pre.\"items_change WHERE item_id = %i\", $post_id);\n\n            echo prepareExchangedData(\n                array(\n                    \"history\" => htmlspecialchars($history, ENT_QUOTES, 'UTF-8'),\n                    \"history_of_pwds\" => htmlspecialchars($historyOfPws, ENT_QUOTES, 'UTF-8'),\n                    \"favourite\" => $favourite,\n                    \"files_edit\" => $filesEdit,\n                    \"files_id\" => $files_id,\n                    \"has_change_proposal\" => DB::count()\n                ),\n                \"encode\"\n            );\n            break;\n\n        /*\n         * CASE\n         * Delete an item\n        */\n        case \"del_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true && !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            // delete item consists in disabling it\n            DB::update(\n                prefix_table(\"items\"),\n                array(\n                    'inactif' => '1',\n                    ),\n                \"id = %i\",\n                $post_id\n            );\n            // log\n            logItems($post_id, $post_label, $_SESSION['user_id'], 'at_delete', $_SESSION['login']);\n            // Update CACHE table\n            updateCacheTable(\"delete_value\", $post_id);\n            break;\n\n        /*\n        * CASE\n        * Update a Group\n        */\n        case \"update_rep\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            // Prepare variables\n            $title = htmlspecialchars_decode($dataReceived['title']);\n            // Check if title doesn't contains html codes\n            if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $title, $out)) {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_html_codes']).'\" } ]';\n                break;\n            }\n            // check that title is not numeric\n            if (is_numeric($title) === true) {\n                echo '[{\"error\" : \"ERR_TITLE_ONLY_WITH_NUMBERS\"}]';\n                break;\n            }\n\n            // Check if duplicate folders name are allowed\n            $createNewFolder = true;\n            if (isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] === '0') {\n                $data = DB::queryFirstRow(\"SELECT id, title FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $title);\n                if (!empty($data['id']) && $dataReceived['folder'] != $data['id']) {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_group_exist']).'\" } ]';\n                    break;\n                }\n            }\n\n            // query on folder\n            $data = DB::queryfirstrow(\n                \"SELECT parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $dataReceived['folder']\n            );\n\n            // check if complexity level is good\n            // if manager or admin don't care\n            if ($_SESSION['is_admin'] != 1 && $_SESSION['user_manager'] != 1 && $data['personal_folder'] === '0') {\n                $data = DB::queryfirstrow(\n                    \"SELECT valeur\n                    FROM \".prefix_table(\"misc\").\"\n                    WHERE intitule = %i AND type = %s\",\n                    $data['parent_id'],\n                    \"complex\"\n                );\n                if (intval($dataReceived['complexity']) < intval($data['valeur'])) {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_folder_complexity_lower_than_top_folder'].\" [<b>\".$SETTINGS_EXT['pwComplexity'][$data['valeur']][1]).'</b>]\"} ]';\n                    break;\n                }\n            }\n\n            // update Folders table\n            $tmp = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $dataReceived['folder']\n            );\n            if ($tmp['parent_id'] != 0 || $tmp['title'] != $_SESSION['user_id'] || $tmp['personal_folder'] != 1) {\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'title' => $title\n                        ),\n                    'id=%s',\n                    $dataReceived['folder']\n                );\n                // update complixity value\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => $dataReceived['complexity']\n                        ),\n                    'intitule = %s AND type = %s',\n                    $dataReceived['folder'],\n                    \"complex\"\n                );\n                // rebuild fuild tree folder\n                $tree->rebuild();\n            }\n            // send data\n            echo '[{\"error\" : \"\"}]';\n            break;\n\n        /*\n        * CASE\n        * Move a Group including sub-folders\n        */\n        case \"move_folder\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                $returnValues = '[{\"error\" :  \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            $tmp_source = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $dataReceived['source_folder_id']\n            );\n\n            $tmp_target = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $dataReceived['target_folder_id']\n            );\n\n            // check if target is not a child of source\n            if ($tree->isChildOf($dataReceived['target_folder_id'], $dataReceived['source_folder_id']) === true) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // check if source or target folder is PF. If Yes, then cancel operation\n            if ($tmp_source['personal_folder'] === '1' || $tmp_target['personal_folder'] === '1') {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // check if source or target folder is PF. If Yes, then cancel operation\n            if ($tmp_source['title'] === $_SESSION['user_id'] || $tmp_target['title'] === $_SESSION['user_id']) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            if ($tmp_source['parent_id'] !== \"0\") {\n                // moving SOURCE folder\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'parent_id' => $dataReceived['target_folder_id']\n                        ),\n                    'id=%s',\n                    $dataReceived['source_folder_id']\n                );\n                $tree->rebuild();\n            }\n\n\n            // send data\n            echo '[{\"error\" : \"\"}]';\n            break;\n\n        /*\n        * CASE\n        * Store hierarchic position of Group\n        */\n        case 'save_position':\n            DB::update(\n                prefix_table(\"nested_tree\"),\n                array(\n                    'parent_id' => $post_destination\n                    ),\n                'id = %i',\n                $post_source\n            );\n            $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            break;\n\n        /*\n        * CASE\n        * List items of a group\n        */\n        case 'lister_items_groupe':\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.str_replace('\"', '\\\"', $LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Prepare POST variables\n            $post_restricted = filter_input(INPUT_POST, 'restricted', FILTER_SANITIZE_NUMBER_INT);\n            $post_start = filter_input(INPUT_POST, 'start', FILTER_SANITIZE_NUMBER_INT);\n            $post_nb_items_to_display_once = filter_input(INPUT_POST, 'nb_items_to_display_once', FILTER_SANITIZE_NUMBER_INT);\n\n            $arboHtml = $html = \"\";\n            $folderIsPf = false;\n            $showError = 0;\n            $itemsIDList = $rights = $returnedData = $uniqueLoadData = array();\n            // Build query limits\n            if (empty($post_start) === true) {\n                $start = 0;\n            } else {\n                $start = $post_start;\n            }\n\n            // to do only on 1st iteration\n            if (intval($start) === 0) {\n                // Prepare tree\n                $arbo = $tree->getPath($post_id, true);\n                foreach ($arbo as $elem) {\n                    if ($elem->title == $_SESSION['user_id'] && $elem->nlevel === '1') {\n                        $elem->title = $_SESSION['login'];\n                        $folderIsPf = true;\n                    }\n                    $arboHtml_tmp = '<a class=\"path_element\" id=\"path_elem_'.$elem->id.'\"';\n                    if (in_array($elem->id, $_SESSION['groupes_visibles'])) {\n                        $arboHtml_tmp .= ' style=\"cursor:pointer;\" onclick=\"ListerItems('.$elem->id.', \\'\\', 0)\"';\n                    }\n                    $arboHtml_tmp .= '>'.htmlspecialchars(stripslashes($elem->title), ENT_QUOTES).'</a>';\n                    if (empty($arboHtml)) {\n                        $arboHtml = $arboHtml_tmp;\n                    } else {\n                        $arboHtml .= '&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;'.$arboHtml_tmp;\n                    }\n                }\n                $uniqueLoadData['arboHtml'] = $arboHtml;\n\n                // store last folder accessed in cookie\n                setcookie(\n                    \"jstree_select\",\n                    $post_id,\n                    time() + 60 * 60 * 24 * $SETTINGS['personal_saltkey_cookie_duration'],\n                    '/'\n                );\n\n                // check role access on this folder (get the most restrictive) (2.1.23)\n                $accessLevel = 2;\n                $arrTmp = [];\n                foreach (explode(';', $_SESSION['fonction_id']) as $role) {\n                    $access = DB::queryFirstRow(\n                        \"SELECT type FROM \".prefix_table(\"roles_values\").\" WHERE role_id = %i AND folder_id = %i\",\n                        $role,\n                        $post_id\n                    );\n                    if ($access['type'] === \"R\") {\n                        array_push($arrTmp, 1);\n                    } elseif ($access['type'] === \"W\") {\n                        array_push($arrTmp, 0);\n                    } elseif ($access['type'] === \"ND\") {\n                        array_push($arrTmp, 2);\n                    } else {\n                        array_push($arrTmp, 3);\n                    }\n                }\n                $accessLevel = min($arrTmp);\n                $uniqueLoadData['accessLevel'] = $accessLevel;\n\n                // check if this folder is a PF. If yes check if saltket is set\n                if ((!isset($_SESSION['user_settings']['encrypted_psk']) || empty($_SESSION['user_settings']['encrypted_psk'])) && $folderIsPf === true) {\n                    $showError = \"is_pf_but_no_saltkey\";\n                }\n                $uniqueLoadData['showError'] = $showError;\n\n                // check if items exist\n                $where = new WhereClause('and');\n                if (null !== $post_restricted && $post_restricted === 1 && !empty($_SESSION['list_folders_limited'][$post_id])) {\n                    $counter = count($_SESSION['list_folders_limited'][$post_id]);\n                    $uniqueLoadData['counter'] = $counter;\n                // check if this folder is visible\n                } elseif (!in_array(\n                    $post_id,\n                    array_merge(\n                        $_SESSION['groupes_visibles'],\n                        @array_keys($_SESSION['list_restricted_folders_for_items']),\n                        @array_keys($_SESSION['list_folders_limited'])\n                    )\n                )) {\n                    echo prepareExchangedData(array(\"error\" => \"not_authorized\"), \"encode\");\n                    break;\n                } else {\n                    DB::query(\"SELECT * FROM \".prefix_table(\"items\").\" WHERE inactif = %i\", 0);\n                    $counter = DB::count();\n                    $uniqueLoadData['counter'] = $counter;\n                }\n\n\n                // Identify if it is a personal folder\n                if (in_array($post_id, $_SESSION['personal_visible_groups'])) {\n                    $findPfGroup = 1;\n                } else {\n                    $findPfGroup = \"\";\n                }\n                $uniqueLoadData['findPfGroup'] = $findPfGroup;\n\n\n                // Get folder complexity\n                $folderComplexity = DB::queryFirstRow(\n                    \"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %i\",\n                    \"complex\",\n                    $post_id\n                );\n                $folderComplexity = $folderComplexity['valeur'];\n                $uniqueLoadData['folderComplexity'] = $folderComplexity;\n\n                // Has this folder some categories to be displayed?\n                $displayCategories = \"\";\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                    $catRow = DB::query(\n                        \"SELECT id_category FROM \".prefix_table(\"categories_folders\").\" WHERE id_folder = %i\",\n                        $post_id\n                    );\n                    if (count($catRow) > 0) {\n                        foreach ($catRow as $cat) {\n                            if (empty($displayCategories)) {\n                                $displayCategories = $cat['id_category'];\n                            } else {\n                                $displayCategories .= \";\".$cat['id_category'];\n                            }\n                        }\n                    }\n                }\n                $uniqueLoadData['displayCategories'] = $displayCategories;\n\n                // is this folder a personal one\n                $folder_is_personal = in_array($post_id, $_SESSION['personal_folders']);\n                $uniqueLoadData['folder_is_personal'] = $folder_is_personal;\n\n                //\n                $folder_is_in_personal = in_array($post_id, array_merge($_SESSION['personal_visible_groups'], $_SESSION['personal_folders']));\n                $uniqueLoadData['folder_is_in_personal'] = $folder_is_in_personal;\n\n                //\n                if (isset($_SESSION['list_folders_editable_by_role'])) {\n                    $list_folders_editable_by_role = in_array($post_id, $_SESSION['list_folders_editable_by_role']);\n                } else {\n                    $list_folders_editable_by_role = \"\";\n                }\n                $uniqueLoadData['list_folders_editable_by_role'] = $list_folders_editable_by_role;\n            } else {\n                // get preloaded data\n                $uniqueLoadData = json_decode(\n                    filter_input(INPUT_POST, 'uniqueLoadData', FILTER_UNSAFE_RAW),\n                    true\n                );\n\n                // initialize main variables\n                $showError = $uniqueLoadData['showError'];\n                $accessLevel = $uniqueLoadData['accessLevel'];\n                $counter = $uniqueLoadData['counter'];\n                $findPfGroup = $uniqueLoadData['findPfGroup'];\n                $counter_full = $uniqueLoadData['counter_full'];\n                $displayCategories = $uniqueLoadData['displayCategories'];\n                $folderComplexity = $uniqueLoadData['folderComplexity'];\n                $arboHtml = $uniqueLoadData['arboHtml'];\n                $folder_is_personal = $uniqueLoadData['folder_is_personal'];\n                $folder_is_in_personal = $uniqueLoadData['folder_is_in_personal'];\n                $list_folders_editable_by_role = $uniqueLoadData['list_folders_editable_by_role'];\n            }\n\n            // prepare query WHere conditions\n            $where = new WhereClause('and');\n            if (null !== $post_restricted && $post_restricted === 1 && !empty($_SESSION['list_folders_limited'][$post_id])) {\n                $where->add('i.id IN %ls', $_SESSION['list_folders_limited'][$post_id]);\n            } else {\n                $where->add('i.id_tree=%i', $post_id);\n            }\n\n            // build the HTML for this set of Items\n            if ($counter > 0 && empty($showError)) {\n                // init variables\n                $init_personal_folder = false;\n                $expired_item = false;\n                $limited_to_items = \"\";\n\n                // List all ITEMS\n                if ($folderIsPf === false) {\n                    $where->add('i.inactif=%i', 0);\n                    $where->add('l.date=%l', \"(SELECT date FROM \".prefix_table(\"log_items\").\" WHERE action IN ('at_creation', 'at_modification') AND id_item=i.id ORDER BY date DESC LIMIT 1)\");\n                    if (!empty($limited_to_items)) {\n                        $where->add('i.id IN %ls', explode(\",\", $limited_to_items));\n                    }\n\n                    $query_limit = \" LIMIT \".\n                        $start.\",\".\n                        $post_nb_items_to_display_once;\n\n                    $rows = DB::query(\n                        \"SELECT i.id AS id, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                        MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                        MIN(i.anyone_can_modify) AS anyone_can_modify, l.date AS date,\n                        MIN(n.renewal_period) AS renewal_period,\n                        MIN(l.action) AS log_action, l.id_user AS log_user\n                        FROM \".prefix_table(\"items\").\" AS i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (i.id_tree = n.id)\n                        INNER JOIN \".prefix_table(\"log_items\").\" AS l ON (i.id = l.id_item)\n                        WHERE %l\n                        GROUP BY i.id, l.date, l.id_user, l.action\n                        ORDER BY i.label ASC, l.date DESC\".$query_limit, //\n                        $where\n                    );\n                } else {\n                    $post_nb_items_to_display_once = \"max\";\n                    $where->add('i.inactif=%i', 0);\n\n                    $rows = DB::query(\n                        \"SELECT i.id AS id, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                        MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                        MIN(i.anyone_can_modify) AS anyone_can_modify,l.date AS date,\n                        MIN(n.renewal_period) AS renewal_period,\n                        MIN(l.action) AS log_action, l.id_user AS log_user\n                        FROM \".prefix_table(\"items\").\" AS i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (i.id_tree = n.id)\n                        INNER JOIN \".prefix_table(\"log_items\").\" AS l ON (i.id = l.id_item)\n                        WHERE %l\n                        GROUP BY i.id, l.date, l.id_user, l.action\n                        ORDER BY i.label ASC, l.date DESC\",\n                        $where\n                    );\n                }\n\n                $idManaged = '';\n                $i = 0;\n                $arr_items_html = array();\n\n                foreach ($rows as $record) {\n                    // exclude all results except the first one returned by query\n                    if (empty($idManaged) || $idManaged != $record['id']) {\n                        $new_line = '';\n\n                        // Get Expiration date\n                        $expirationFlag = '';\n                        $expired_item = 0;\n                        if ($SETTINGS['activate_expiration'] === '1') {\n                            if ($record['renewal_period'] > 0 &&\n                                ($record['date'] + ($record['renewal_period'] * $SETTINGS_EXT['one_month_seconds'])) < time()\n                            ) {\n                                $expirationFlag = '<i class=\"fa fa-flag mi-red fa-sm\"></i>&nbsp;';\n                                $expired_item = 1;\n                            } else {\n                                $expirationFlag = '<i class=\"fa fa-flag mi-green fa-sm\"></i>&nbsp;';\n                            }\n                        }\n                        // list of restricted users\n                        $is_user_in_restricted_list = in_array($_SESSION['user_id'], explode(';', $record['restricted_to']));\n\n                        $itemPw = $itemLogin = \"\";\n                        $displayItem = false;\n                        $need_sk = false;\n                        $canMove = false;\n                        $item_is_restricted_to_role = false;\n                        // TODO: Element is restricted to a group. Check if element can be seen by user\n                        // => r\u00e9cup\u00e9rer un tableau contenant les roles associ\u00e9s \u00e0 cet ID (a partir table restriction_to_roles)\n                        $user_is_included_in_role = false;\n                        $roles = DB::query(\n                            \"SELECT role_id FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id=%i\",\n                            $record['id']\n                        );\n\n                        if (DB::count() > 0) {\n                            $item_is_restricted_to_role = true;\n                            foreach ($roles as $val) {\n                                if (in_array($val['role_id'], $_SESSION['user_roles'])) {\n                                    $user_is_included_in_role = true;\n                                    break;\n                                }\n                            }\n                        }\n                        // Manage the restricted_to variable\n                        if (null !== $post_restricted) {\n                            $restrictedTo = $post_restricted;\n                        } else {\n                            $restrictedTo = \"\";\n                        }\n\n                        if ($list_folders_editable_by_role === '1') {\n                            if (empty($restrictedTo)) {\n                                $restrictedTo = $_SESSION['user_id'];\n                            } else {\n                                $restrictedTo .= ','.$_SESSION['user_id'];\n                            }\n                        }\n\n                        // Can user modify it?\n                        if ($record['anyone_can_modify'] === '1'\n                            || $_SESSION['user_id'] === $record['log_user']\n                            || ($_SESSION['user_read_only'] === '1' && $folderIsPf === false)\n                            || (isset($SETTINGS['manager_edit']) && $SETTINGS['manager_edit'] === '1') // force draggable if user is manager\n                        ) {\n                            $canMove = true;\n                        }\n\n                        // Fix a bug on Personal Item creation - field `perso` must be set to `1`\n                        if ($record['perso'] !== '1' && (int) $folder_is_personal === 1) {\n                            DB::update(\n                                prefix_table(\"items\"),\n                                array(\n                                    'perso' => 1\n                                ),\n                                \"id=%i\",\n                                $record['id']\n                            );\n                            $record['perso'] = '1';\n                        }\n\n\n                        // CASE where item is restricted to a role to which the user is not associated\n                        if (isset($user_is_included_in_role)\n                            && $user_is_included_in_role === false\n                            && isset($item_is_restricted_to_role)\n                            && $item_is_restricted_to_role === true\n                            && (int) $is_user_in_restricted_list !== 1\n                            && (int) $folder_is_personal !== 1\n                        ) {\n                            $perso = '<i class=\"fa fa-tag mi-red fa-sm\"></i>&nbsp';\n                            $findPfGroup = 0;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'0\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', true, \\'\\')';\n                            $displayItem = false;\n                            $need_sk = false;\n                            $canMove = false;\n                        // Case where item is in own personal folder\n                        } elseif ((int) $folder_is_in_personal === 1\n                            && (int) $record['perso'] === 1\n                        ) {\n                            $perso = '<i class=\"fa fa-user-secret mi-grey-1 fa-sm\"></i>&nbsp';\n                            $findPfGroup = 1;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'1\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'1\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            $need_sk = true;\n                            $canMove = true;\n                        // CAse where item is restricted to a group of users included user\n                        } elseif (!empty($record['restricted_to'])\n                            || (int) $list_folders_editable_by_role === 1\n                            && (int) $is_user_in_restricted_list === 1\n                        ) {\n                            $perso = '<i class=\"fa fa-tag mi-yellow fa-sm\"></i>&nbsp';\n                            $findPfGroup = 0;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            $canMove = true;\n                        // CAse where item is restricted to a group of users not including user\n                        } elseif ((int) $record['perso'] === 1\n                            ||\n                            (\n                                !empty($record['restricted_to'])\n                                && (int) $is_user_in_restricted_list !== 1\n                            )\n                            ||\n                            (\n                                isset($user_is_included_in_role)\n                                && isset($item_is_restricted_to_role)\n                                && $user_is_included_in_role === false\n                                && $item_is_restricted_to_role === true\n                            )\n                        ) {\n                            if (isset($user_is_included_in_role)\n                                && isset($item_is_restricted_to_role)\n                                && $user_is_included_in_role === false\n                                && $item_is_restricted_to_role === true\n                            ) {\n                                $perso = '<i class=\"fa fa-tag mi-red fa-sm\"></i>&nbsp';\n                                $findPfGroup = 0;\n                                $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'0\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\',\\'\\', \\'\\')';\n                                $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', true, \\'\\')';\n                                $displayItem = false;\n                                $need_sk = true;\n                                $canMove = false;\n                            } else {\n                                $perso = '<i class=\"fa fa-tag mi-yellow fa-sm\"></i>&nbsp';\n                                $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\',\\'\\',\\'\\', \\'\\')';\n                                $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                                // reinit in case of not personal group\n                                if ($init_personal_folder === false) {\n                                    $findPfGroup = \"\";\n                                    $init_personal_folder = true;\n                                }\n\n                                if (!empty($record['restricted_to']) && $is_user_in_restricted_list === '1') {\n                                    $displayItem = true;\n                                }\n                            }\n                        } else {\n                            $perso = '<i class=\"fa fa-tag mi-green fa-sm\"></i>&nbsp';\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\',\\'\\',\\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            // reinit in case of not personal group\n                            if ($init_personal_folder === false) {\n                                $findPfGroup = \"\";\n                                $init_personal_folder = true;\n                            }\n                        }\n                        // Prepare full line\n                        $new_line .= '<li name=\"'.strip_tags(htmlentities(cleanString($record['label']))).'\" ondblclick=\"'.$action_dbl.'\" class=\"';\n                        if ($canMove === true && $accessLevel == 0) {\n                            $new_line .= 'item_draggable';\n                        } else {\n                            $new_line .= 'item';\n                        }\n\n                        $new_line .= ' trunc_line\" id=\"'.$record['id'].'\" style=\"\">';\n\n                        if ($canMove === true && $accessLevel == 0) {\n                            $new_line .= '<span style=\"cursor:hand;\" class=\"grippy\"><i class=\"fa fa-sm fa-arrows mi-grey-1\"></i>&nbsp;</span>';\n                        } else {\n                            $new_line .= '<span style=\"margin-left:11px;\"></span>';\n                        }\n\n\n                        $label = stripslashes(handleBackslash($record['label']));\n                        $new_line .= $expirationFlag.''.$perso.'&nbsp;<a id=\"fileclass'.$record['id'].'\" class=\"file \" onclick=\"'.$action.'\"><div class=\"truncate\">'.$label.'&nbsp;<font size=\"1px\">';\n\n                        // manage desc to show\n                        if (!empty($record['description']) && isset($SETTINGS['show_description']) && $SETTINGS['show_description'] === '1') {\n                            $desc = explode(\"<br>\", $record['description']);\n                            $new_line .= '['.strip_tags(stripslashes(cleanString($desc[0]))).']';\n                        }\n\n                        $new_line .= '</div></font>';\n\n                        $new_line .= '</a>';\n\n                        //\n                        $new_line .= '<span style=\"float:right;margin-top:2px;\">';\n\n                        // increment array for icons shortcuts (don't do if option is not enabled)\n                        if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                            if ($need_sk === true && isset($_SESSION['user_settings']['session_psk'])) {\n                                $pw = cryption(\n                                    $record['pw'],\n                                    $_SESSION['user_settings']['session_psk'],\n                                    \"decrypt\"\n                                );\n                            } else {\n                                $pw = cryption(\n                                    $record['pw'],\n                                    \"\",\n                                    \"decrypt\"\n                                );\n                            }\n\n                            // test charset => may cause a json error if is not utf8\n                            $pw = $pw['string'];\n                            if (!isUTF8($pw)) {\n                                $pw = \"\";\n                                $new_line .= '<i class=\"fa fa-warning fa-sm mi-red tip\" title=\"'.$LANG['pw_encryption_error'].'\"></i>&nbsp;';\n                            } elseif (empty($pw) === true) {\n                                $new_line .= '&nbsp;<i class=\"fa fa-exclamation-circle fa-sm mi-yellow tip\" title=\"'.$LANG['password_is_empty'].'\"></i>&nbsp;';\n                            }\n                        } else {\n                            $pw = \"\";\n                        }\n\n                        // mini icon for collab\n                        if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                            if ($record['anyone_can_modify'] === '1') {\n                                $new_line .= '<i class=\"fa fa-pencil fa-sm mi-grey-1 tip\" title=\"'.$LANG['item_menu_collab_enable'].'\"></i>&nbsp;&nbsp;';\n                            }\n                        }\n\n                        // display quick icon shortcuts ?\n                        if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                            if ($displayItem === true) {\n                                if (!empty($record['login'])) {\n                                    $new_line .= '<i class=\"fa fa-sm fa-user mi-black mini_login\" data-clipboard-text=\"'.strtr($record['login'], '\"', \"&quot;\").'\" title=\"'.$LANG['item_menu_copy_login'].'\"></i>&nbsp;';\n                                }\n                                if (!empty($pw)) {\n                                    $new_line .= '<i class=\"fa fa-sm fa-lock mi-black mini_pw\" data-clipboard-text=\"'.strtr($pw, '\"', \"&quot;\").'\" title=\"'.$LANG['item_menu_copy_pw'].'\"></i>&nbsp;';\n                                }\n                            }\n                        }\n                        // Prepare make Favorite small icon\n                        $new_line .= '<span id=\"quick_icon_fav_'.$record['id'].'\" title=\"Manage Favorite\" class=\"cursor tip\">';\n                        if (in_array($record['id'], $_SESSION['favourites'])) {\n                            $new_line .= '<i class=\"fa fa-sm fa-star mi-yellow\" onclick=\"ActionOnQuickIcon('.$record['id'].',0)\" class=\"tip\"></i>';\n                        } else {\n                            $new_line .= '<i class=\"fa fa-sm fa-star-o mi-black\" onclick=\"ActionOnQuickIcon('.$record['id'].',1)\" class=\"tip\"></i>';\n                        }\n\n                        $new_line .= '</span></li>';\n                        // Build array with items\n                        array_push($itemsIDList, array($record['id'], $pw, $record['login'], $displayItem));\n\n                        // build full html\n                        $html .= $new_line;\n\n                        $i++;\n                    }\n                    $idManaged = $record['id'];\n                }\n\n                $rights = recupDroitCreationSansComplexite($post_id);\n            }\n\n            // DELETE - 2.1.19 - AND (l.action = 'at_creation' OR (l.action = 'at_modification' AND l.raison LIKE 'at_pw :%'))\n            // count\n            if (intval($start) === 0) {\n                DB::query(\n                    \"SELECT i.id\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"nested_tree\").\" as n ON (i.id_tree = n.id)\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (i.id = l.id_item)\n                    WHERE %l\n                    ORDER BY i.label ASC, l.date DESC\",\n                    $where\n                );\n                $counter_full = DB::count();\n                $uniqueLoadData['counter_full'] = $counter_full;\n            }\n\n            // Check list to be continued status\n            if ($post_nb_items_to_display_once !== 'max' && ($post_nb_items_to_display_once + $start) < $counter_full) {\n                $listToBeContinued = \"yes\";\n            } else {\n                $listToBeContinued = \"end\";\n            }\n\n            //  Fixing items not being displayed\n            $html = iconv(\n                'UTF-8',\n                'UTF-8//IGNORE',\n                mb_convert_encoding(\n                    $html,\n                    \"UTF-8\",\n                    \"UTF-8\"\n                )\n            );\n\n\n            // Prepare returned values\n            $returnValues = array(\n                \"recherche_group_pf\" => $findPfGroup,\n                \"arborescence\" => $arboHtml,\n                \"array_items\" => $itemsIDList,\n                \"items_html\" => $html,\n                \"error\" => $showError,\n                \"saltkey_is_required\" => $folderIsPf === true ? 1 : 0,\n                \"show_clipboard_small_icons\" => isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1' ? 1 : 0,\n                \"next_start\" => intval($post_nb_items_to_display_once) + intval($start),\n                \"list_to_be_continued\" => $listToBeContinued,\n                \"items_count\" => $counter,\n                \"counter_full\" => $counter_full,\n                'folder_complexity' => $folderComplexity,\n                'displayCategories' => $displayCategories,\n                'access_level' => $accessLevel,\n                'IsPersonalFolder' => $folderIsPf === true ? 1 : 0,\n                'uniqueLoadData' => json_encode($uniqueLoadData)\n            );\n            // Check if $rights is not null\n            if (count($rights) > 0) {\n                $returnValues = array_merge($returnValues, $rights);\n            }\n            // Encrypt data to return\n            echo prepareExchangedData($returnValues, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Get complexity level of a group\n        */\n        case \"get_complixity_level\":\n            // Prepare POST variables\n            $post_groupe = filter_input(INPUT_POST, 'groupe', FILTER_SANITIZE_STRING);\n            $post_context = filter_input(INPUT_POST, 'context', FILTER_SANITIZE_STRING);\n\n            // get some info about ITEM\n            $dataItem = DB::queryfirstrow(\n                \"SELECT perso, anyone_can_modify\n                FROM \".prefix_table(\"items\").\"\n                WHERE id=%i\",\n                $post_item_id\n            );\n            // is user allowed to access this folder - readonly\n            if (null !== $post_groupe && empty($post_groupe) === false) {\n                if (in_array($post_groupe, $_SESSION['read_only_folders']) || !in_array($post_groupe, $_SESSION['groupes_visibles'])) {\n                    // check if this item can be modified by anyone\n                    if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                        if ($dataItem['anyone_can_modify'] != 1) {\n                            // else return not authorized\n                            $returnValues = array(\n                                \"error\" => \"user_is_readonly\",\n                                \"message\" => $LANG['error_not_allowed_to']\n                            );\n                            echo prepareExchangedData($returnValues, \"encode\");\n                            break;\n                        }\n                    } else {\n                        // else return not authorized\n                        $returnValues = array(\n                            \"error\" => \"user_is_readonly\",\n                            \"message\" => $LANG['error_not_allowed_to']\n                        );\n                        echo prepareExchangedData($returnValues, \"encode\");\n                        break;\n                    }\n                }\n            }\n\n            if (null !== $post_item_id && empty($post_item_id) === false) {\n                // Lock Item (if already locked), go back and warn\n                $dataTmp = DB::queryFirstRow(\"SELECT timestamp, user_id FROM \".prefix_table(\"items_edition\").\" WHERE item_id = %i\", $post_item_id);\n\n                // If token is taken for this Item and delay is passed then delete it.\n                if (isset($SETTINGS['delay_item_edition']) &&\n                    $SETTINGS['delay_item_edition'] > 0 && !empty($dataTmp['timestamp']) &&\n                    round(abs(time() - $dataTmp['timestamp']) / 60, 2) > $SETTINGS['delay_item_edition']\n                ) {\n                    DB::delete(prefix_table(\"items_edition\"), \"item_id = %i\", $post_item_id);\n                    //reload the previous data\n                    $dataTmp = DB::queryFirstRow(\n                        \"SELECT timestamp, user_id FROM \".prefix_table(\"items_edition\").\" WHERE item_id = %i\",\n                        $post_item_id\n                    );\n                }\n\n                // If edition by same user (and token not freed before for any reason, then update timestamp)\n                if (!empty($dataTmp['timestamp']) && $dataTmp['user_id'] == $_SESSION['user_id']) {\n                    DB::update(\n                        prefix_table(\"items_edition\"),\n                        array(\n                            \"timestamp\" => time()\n                        ),\n                        \"user_id = %i AND item_id = %i\",\n                        $_SESSION['user_id'],\n                        $post_item_id\n                    );\n                    // If no token for this Item, then initialize one\n                } elseif (empty($dataTmp[0])) {\n                    DB::insert(\n                        prefix_table(\"items_edition\"),\n                        array(\n                            'timestamp' => time(),\n                            'item_id' => $post_item_id,\n                            'user_id' => $_SESSION['user_id']\n                        )\n                    );\n                    // Edition not possible\n                } else {\n                    $returnValues = array(\n                        \"error\" => \"no_edition_possible\",\n                        \"error_msg\" => addslashes($LANG['error_no_edition_possible_locked'])\n                    );\n                    echo prepareExchangedData($returnValues, \"encode\");\n                    break;\n                }\n            }\n\n            // do query on this folder\n            $data_this_folder = DB::queryFirstRow(\n                \"SELECT id, personal_folder, title\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %s\",\n                $post_groupe\n            );\n\n            // check if user can perform this action\n            if (null !== $post_context && empty($post_context) === false) {\n                if ($post_context === \"create_folder\" || $post_context === \"edit_folder\" || $post_context === \"delete_folder\") {\n                    if ($_SESSION['is_admin'] !== '1'\n                        && ($_SESSION['user_manager'] !== '1')\n                        && (\n                            isset($SETTINGS['enable_user_can_create_folders'])\n                           && $SETTINGS['enable_user_can_create_folders'] !== '1'\n                        )\n                        && (\n                            $data_this_folder['personal_folder'] !== '1' && $data_this_folder['title'] !== $_SESSION['user_id']\n                        )   // take into consideration if this is a personal folder\n                    ) {\n                        $returnValues = array(\n                            \"error\" => \"no_folder_creation_possible\",\n                            \"error_msg\" => addslashes($LANG['error_not_allowed_to'])\n                        );\n                        echo prepareExchangedData($returnValues, \"encode\");\n                        break;\n                    }\n                }\n            }\n\n            // Get required Complexity for this Folder\n            $data = DB::queryFirstRow(\n                \"SELECT m.valeur, n.personal_folder\n                FROM \".prefix_table(\"misc\").\" AS m\n                INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (m.intitule = n.id)\n                WHERE type=%s AND intitule = %s\",\n                \"complex\",\n                $post_groupe\n            );\n\n            if (isset($data['valeur']) && (!empty($data['valeur']) || $data['valeur'] === '0')) {\n                $complexity = $SETTINGS_EXT['pwComplexity'][$data['valeur']][1];\n                $folder_is_personal = $data['personal_folder'];\n            } else {\n                $complexity = $LANG['not_defined'];\n\n                // if not defined, then previous query failed and personal_folder is null\n                // do new query to know if current folder is pf\n                $data_pf = DB::queryFirstRow(\n                    \"SELECT personal_folder\n                    FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE id = %s\",\n                    $post_groupe\n                );\n                $folder_is_personal = $data_pf['personal_folder'];\n            }\n            // Prepare Item actual visibility (what Users/Roles can see it)\n            $visibilite = \"\";\n            if (empty($dataPf[0]) === false) {\n                $visibilite = $_SESSION['login'];\n            } else {\n                $rows = DB::query(\n                    \"SELECT t.title\n                    FROM \".prefix_table(\"roles_values\").\" as v\n                    INNER JOIN \".prefix_table(\"roles_title\").\" as t ON (v.role_id = t.id)\n                    WHERE v.folder_id = %i\n                    GROUP BY title\",\n                    $post_groupe\n                );\n                foreach ($rows as $record) {\n                    if (empty($visibilite)) {\n                        $visibilite = $record['title'];\n                    } else {\n                        $visibilite .= \" - \".$record['title'];\n                    }\n                }\n            }\n\n            recupDroitCreationSansComplexite($post_groupe);\n\n            $returnValues = array(\n                \"val\" => $data['valeur'],\n                \"visibility\" => $visibilite,\n                \"complexity\" => $complexity,\n                \"personal\" => $folder_is_personal\n            );\n            echo prepareExchangedData($returnValues, \"encode\");\n            break;\n\n        /*\n          * CASE\n          * WANT TO CLIPBOARD PW/LOGIN OF ITEM\n        */\n        case \"get_clipboard_item\":\n            $dataItem = DB::queryfirstrow(\n                \"SELECT pw,login,perso FROM \".prefix_table(\"items\").\" WHERE id=%i\",\n                $post_id\n            );\n\n            if (filter_input(INPUT_POST, 'field', FILTER_SANITIZE_STRING) === \"pw\") {\n                if ($dataItem['perso'] === '1') {\n                    $data = cryption(\n                        $dataItem['pw'],\n                        $_SESSION['user_settings']['session_psk'],\n                        \"decrypt\"\n                    );\n                } else {\n                    $data = cryption(\n                        $dataItem['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                }\n            } else {\n                $data = $dataItem['login'];\n            }\n            // Encrypt data to return\n            echo prepareExchangedData($data, \"encode\");\n            break;\n\n        /*\n        * CASE\n        * DELETE attached file from an item\n        */\n        case \"delete_attached_file\":\n            // Get some info before deleting\n            $data = DB::queryFirstRow(\n                \"SELECT name,id_item,file\n                FROM \".prefix_table(\"files\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n            );\n            if (!empty($data['id_item'])) {\n                // Delete from FILES table\n                DB::delete(\n                    prefix_table(\"files\"),\n                    \"id = %i\",\n                    filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n                );\n                // Update the log\n                logItems($data['id_item'], $data['name'], $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_del_file : '.$data['name']);\n                // Delete file from server\n                fileDelete($SETTINGS['path_to_upload_folder'].\"/\".$data['file']);\n            }\n            break;\n\n        /*\n        * CASE\n        * REBUILD the description editor\n        */\n        case \"rebuild_description_textarea\":\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING);\n\n            $returnValues = array();\n            if (isset($SETTINGS['richtext']) && $SETTINGS['richtext'] === '1') {\n                if ($post_id === \"desc\") {\n                    $returnValues['desc'] = '$(\"#desc\").ckeditor({toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]], height: 100,language: \"'.$SETTINGS_EXT['langs'][$_SESSION['user_language']].'\"});';\n                } elseif ($post_id === \"edit_desc\") {\n                    $returnValues['desc'] = 'CKEDITOR.replace(\"edit_desc\",{toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]], height: 100,language: \"'.$SETTINGS_EXT['langs'][$_SESSION['user_language']].'\"});';\n                }\n            }\n            // Multselect\n            $returnValues['multi_select'] = '$(\"#edit_restricted_to_list\").multiselect({selectedList: 7, minWidth: 430, height: 145, checkAllText: \"'.$LANG['check_all_text'].'\", uncheckAllText: \"'.$LANG['uncheck_all_text'].'\",noneSelectedText: \"'.$LANG['none_selected_text'].'\"});';\n            // Display popup\n            if ($post_id === \"edit_desc\") {\n                $returnValues['dialog'] = '$(\"#div_formulaire_edition_item\").dialog(\"open\");';\n            } else {\n                $returnValues['dialog'] = '$(\"#div_formulaire_saisi\").dialog(\"open\");';\n            }\n            echo $returnValues;\n            break;\n\n        /*\n        * CASE\n        * Clear HTML tags\n        */\n        case \"clear_html_tags\":\n            // Get information for this item\n            $dataItem = DB::queryfirstrow(\n                \"SELECT description FROM \".prefix_table(\"items\").\" WHERE id=%i\",\n                filter_input(INPUT_POST, 'id_item', FILTER_SANITIZE_NUMBER_INT)\n            );\n            // Clean up the string\n            echo json_encode(array(\"description\" => strip_tags($dataItem['description'])), JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            break;\n\n        /*\n        * FUNCTION\n        * Launch an action when clicking on a quick icon\n        * $action = 0 => Make not favorite\n        * $action = 1 => Make favorite\n        */\n        case \"action_on_quick_icon\":\n            if (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) === '1') {\n                // Add new favourite\n                array_push($_SESSION['favourites'], $post_id);\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'favourites' => implode(';', $_SESSION['favourites'])\n                        ),\n                    'id = %i',\n                    $_SESSION['user_id']\n                );\n                // Update SESSION with this new favourite\n                $data = DB::queryfirstrow(\n                    \"SELECT label,id_tree\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE id = \".mysqli_real_escape_string($link, $post_id)\n                );\n                $_SESSION['favourites_tab'][$post_id] = array(\n                    'label' => $data['label'],\n                    'url' => 'index.php?page=items&amp;group='.$data['id_tree'].'&amp;id='.$post_id\n                    );\n            } elseif (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) === '0') {\n                // delete from session\n                foreach ($_SESSION['favourites'] as $key => $value) {\n                    if ($_SESSION['favourites'][$key] === $post_id) {\n                        unset($_SESSION['favourites'][$key]);\n                        break;\n                    }\n                }\n                // delete from DB\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        \"favourites\" =>implode(';', $_SESSION['favourites'])\n                    ),\n                    \"id = %i\",\n                    $_SESSION['user_id']\n                );\n                // refresh session fav list\n                if (isset($_SESSION['favourites_tab'])) {\n                    foreach ($_SESSION['favourites_tab'] as $key => $value) {\n                        if ($key == $post_id) {\n                            unset($_SESSION['favourites_tab'][$key]);\n                            break;\n                        }\n                    }\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Move an ITEM\n        */\n        case \"move_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']\n                || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])\n            ) {\n                // error\n                exit();\n            }\n            // get data about item\n            $dataSource = DB::queryfirstrow(\n                \"SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                FROM \".prefix_table(\"items\").\" as i\n                INNER JOIN \".prefix_table(\"nested_tree\").\" as f ON (i.id_tree=f.id)\n                WHERE i.id=%i\",\n                $post_item_id\n            );\n            // get data about new folder\n            $dataDestination = DB::queryfirstrow(\n                \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $post_folder_id\n            );\n\n            // previous is non personal folder and new too\n            if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                // just update is needed. Item key is the same\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id\n                        ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            } elseif ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '1') {\n                $decrypt = cryption(\n                    $dataSource['pw'],\n                    \"\",\n                    \"decrypt\"\n                );\n                $encrypt = cryption(\n                    $decrypt['string'],\n                    mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                    \"encrypt\"\n                );\n                // update pw\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id,\n                        'pw' => $encrypt['string'],\n                        'pw_iv' => \"\",\n                        'perso' => 1\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            // If previous is personal folder and new is personal folder too => no key exist on item\n            } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '1') {\n                // just update is needed. Item key is the same\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            // If previous is personal folder and new is not personal folder => no key exist on item => add new\n            } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '0') {\n                $decrypt = cryption(\n                    $dataSource['pw'],\n                    mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                    \"decrypt\"\n                );\n                $encrypt = cryption(\n                    $decrypt['string'],\n                    \"\",\n                    \"encrypt\"\n                );\n\n                // update item\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id,\n                        'pw' => $encrypt['string'],\n                        'pw_iv' => \"\",\n                        'perso' => 0\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            }\n            // Log item moved\n            logItems(\n                $post_item_id,\n                $dataSource['label'],\n                $_SESSION['user_id'],\n                'at_modification',\n                $_SESSION['login'],\n                'at_moved : '.$dataSource['title'].' -> '.$dataDestination['title']\n            );\n\n            echo '[{\"from_folder\":\"'.$dataSource['id_tree'].'\" , \"to_folder\":\"'.$post_folder_id.'\"}]';\n            break;\n\n        /*\n        * CASE\n        * MASSIVE Move an ITEM\n        */\n        case \"mass_move_items\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])) {\n                // error\n                exit();\n            }\n\n            // loop on items to move\n            foreach (explode(\";\", filter_input(INPUT_POST, 'item_ids', FILTER_SANITIZE_STRING)) as $item_id) {\n                if (!empty($item_id)) {\n                    // get data about item\n                    $dataSource = DB::queryfirstrow(\n                        \"SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" as f ON (i.id_tree=f.id)\n                        WHERE i.id=%i\",\n                        $item_id\n                    );\n                    // get data about new folder\n                    $dataDestination = DB::queryfirstrow(\n                        \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                        $post_folder_id\n                    );\n\n                    // previous is non personal folder and new too\n                    if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                        // just update is needed. Item key is the same\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                    } elseif ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '1') {\n                        $decrypt = cryption(\n                            $dataSource['pw'],\n                            \"\",\n                            \"decrypt\"\n                        );\n                        $encrypt = cryption(\n                            $decrypt['string'],\n                            mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                            \"encrypt\"\n                        );\n                        // update pw\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id,\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'perso' => 1\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    // If previous is personal folder and new is personal folder too => no key exist on item\n                    } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '1') {\n                        // just update is needed. Item key is the same\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    // If previous is personal folder and new is not personal folder => no key exist on item => add new\n                    } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '0') {\n                        $decrypt = cryption(\n                            $dataSource['pw'],\n                            mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                            \"decrypt\"\n                        );\n                        $encrypt = cryption(\n                            $decrypt['string'],\n                            \"\",\n                            \"encrypt\"\n                        );\n\n                        // update item\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id,\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'perso' => 0\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    }\n                    // Log item moved\n                    logItems(\n                        $item_id,\n                        $dataSource['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_moved : '.$dataSource['title'].' -> '.$dataDestination['title']\n                    );\n                }\n            }\n\n            // reload cache table\n            require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n            updateCacheTable(\"reload\", \"\");\n\n            echo '[{\"error\":\"\" , \"status\":\"ok\"}]';\n            break;\n\n        /*\n         * CASE\n         * MASSIVE Delete an item\n        */\n        case \"mass_delete_items\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // loop on items to move\n            foreach (explode(\";\", filter_input(INPUT_POST, 'item_ids', FILTER_SANITIZE_STRING)) as $item_id) {\n                if (!empty($item_id)) {\n                    // get info\n                    $dataSource = DB::queryfirstrow(\n                        \"SELECT label, id_tree\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id=%i\",\n                        $item_id\n                    );\n\n                    // perform a check in case of Read-Only user creating an item in his PF\n                    if ($_SESSION['user_read_only'] === true) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                        break;\n                    }\n\n                    // delete item consists in disabling it\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'inactif' => '1',\n                            ),\n                        \"id = %i\",\n                        $item_id\n                    );\n                    // log\n                    logItems($item_id, $dataSource['label'], $_SESSION['user_id'], 'at_delete', $_SESSION['login']);\n                    // Update CACHE table\n                    updateCacheTable(\"delete_value\", $item_id);\n                }\n            }\n\n            echo '[{\"error\":\"\" , \"status\":\"ok\"}]';\n\n            break;\n\n            /*\n           * CASE\n           * Send email\n        */\n        case \"send_email\":\n            if ($post_key !== $_SESSION['key']) {\n                echo '[{\"error\" : \"something_wrong\"}]';\n                break;\n            } else {\n                if (empty(filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING)) === false) {\n                    $content = explode(',', filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING));\n                }\n                // get links url\n                if (empty($SETTINGS['email_server_url'])) {\n                    $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                }\n                if ($post_cat === \"request_access_to_author\") {\n                    $dataAuthor = DB::queryfirstrow(\"SELECT email,login FROM \".prefix_table(\"users\").\" WHERE id= \".$content[1]);\n                    $dataItem = DB::queryfirstrow(\"SELECT label FROM \".prefix_table(\"items\").\" WHERE id= \".$content[0]);\n                    $ret = sendEmail(\n                        $LANG['email_request_access_subject'],\n                        str_replace(array('#tp_item_author#', '#tp_user#', '#tp_item#'), array(\" \".addslashes($dataAuthor['login']), addslashes($_SESSION['login']), addslashes($dataItem['label'])), $LANG['email_request_access_mail']),\n                        $dataAuthor['email']\n                    );\n                } elseif ($post_cat === \"share_this_item\") {\n                    $dataItem = DB::queryfirstrow(\n                        \"SELECT label,id_tree\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id= %i\",\n                        $post_id\n                    );\n                    // send email\n                    $ret = sendEmail(\n                        $LANG['email_share_item_subject'],\n                        str_replace(\n                            array('#tp_link#', '#tp_user#', '#tp_item#'),\n                            array($SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataItem['id_tree'].'&id='.$post_id, addslashes($_SESSION['login']), addslashes($dataItem['label'])),\n                            $LANG['email_share_item_mail']\n                        ),\n                        $post_receipt\n                    );\n                }\n                echo '[{'.$ret.'}]';\n            }\n            break;\n\n        /*\n           * CASE\n           * manage notification of an Item\n        */\n        case \"notify_a_user\":\n            if ($post_key !== $_SESSION['key']) {\n                echo '[{\"error\" : \"something_wrong\"}]';\n                break;\n            } else {\n                if (filter_input(INPUT_POST, 'notify_type', FILTER_SANITIZE_STRING) === \"on_show\") {\n                    // Check if values already exist\n                    $data = DB::queryfirstrow(\n                        \"SELECT notification FROM \".prefix_table(\"items\").\" WHERE id = %i\",\n                        $post_item_id\n                    );\n                    $notifiedUsers = explode(';', $data['notification']);\n                    // User is not in actual notification list\n                    if ($post_status === \"true\" && !in_array($post_user_id, $notifiedUsers)) {\n                        // User is not in actual notification list and wants to be notified\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'notification' => empty($data['notification']) ?\n                                    filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT).\";\"\n                                    : $data['notification'].filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                        echo '[{\"error\" : \"\", \"new_status\":\"true\"}]';\n                        break;\n                    } elseif ($post_status === false && in_array($post_user_id, $notifiedUsers)) {\n                        // TODO : delete user from array and store in DB\n                        // User is in actual notification list and doesn't want to be notified\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'notification' => empty($data['notification']) ?\n                                    filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                    : $data['notification'].\";\".filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                    }\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Item History Log - add new entry\n        */\n        case \"history_entry_add\":\n            if ($post_key !== $_SESSION['key']) {\n                $data = array(\"error\" => \"key_is_wrong\");\n                echo prepareExchangedData($data, \"encode\");\n                break;\n            } else {\n                // decrypt and retreive data in JSON format\n                $dataReceived = prepareExchangedData($post_data, \"decode\");\n                // Get all informations for this item\n                $dataItem = DB::queryfirstrow(\n                    \"SELECT *\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                    WHERE i.id=%i AND l.action = %s\",\n                    $dataReceived['item_id'],\n                    \"at_creation\"\n                );\n                // check that actual user can access this item\n                $restrictionActive = true;\n                $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n                if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                    $restrictionActive = false;\n                }\n                if (empty($dataItem['restricted_to'])) {\n                    $restrictionActive = false;\n                }\n\n                if ((\n                        (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])) && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false\n                    )\n                    ||\n                    (\n                        isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false\n                    )\n                    ||\n                    (@in_array(\n                        $post_id,\n                        $_SESSION['list_folders_limited'][$post_folder_id]\n                    ))\n                ) {\n                    $error = \"\";\n                    // Query\n                    logItems($dataReceived['item_id'], $dataItem['label'], $_SESSION['user_id'], 'at_manual', $_SESSION['login'], htmlspecialchars_decode($dataReceived['label']));\n                    // Prepare new line\n                    $data = DB::queryfirstrow(\n                        \"SELECT * FROM \".prefix_table(\"log_items\").\" WHERE id_item = %i ORDER BY date DESC\",\n                        $dataReceived['item_id']\n                    );\n                    $historic = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $data['date']).\" - \".$_SESSION['login'].\" - \".$LANG[$data['action']].\" - \".$data['raison'];\n                    // send back\n                    $data = array(\n                        \"error\" => \"\",\n                        \"new_line\" => \"<br>\".addslashes($historic)\n                    );\n                    echo prepareExchangedData($data, \"encode\");\n                } else {\n                    $data = array(\"error\" => \"something_wrong\");\n                    echo prepareExchangedData($data, \"encode\");\n                    break;\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"free_item_for_edition\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // Do\n            DB::delete(\n                prefix_table(\"items_edition\"),\n                \"item_id = %i\",\n                $post_id\n            );\n            break;\n\n        /*\n        * CASE\n        * Check if Item has been changed since loaded\n        */\n        case \"is_item_changed\":\n            $data = DB::queryFirstRow(\n                \"SELECT date FROM \".prefix_table(\"log_items\").\" WHERE action = %s AND id_item = %i ORDER BY date DESC\",\n                \"at_modification\",\n                $post_item_id\n            );\n            // Check if it's in a personal folder. If yes, then force complexity overhead.\n            if ($data['date'] > filter_input(INPUT_POST, 'timestamp', FILTER_SANITIZE_STRING)) {\n                echo '{ \"modified\" : \"1\" }';\n            } else {\n                echo '{ \"modified\" : \"0\" }';\n            }\n            break;\n\n        /*\n        * CASE\n        * Check if Item has been changed since loaded\n        */\n        case \"generate_OTV_url\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // delete all existing old otv codes\n            $rows = DB::query(\"SELECT id FROM \".prefix_table(\"otv\").\" WHERE timestamp < \".(time() - $SETTINGS['otv_expiration_period'] * 86400));\n            foreach ($rows as $record) {\n                DB::delete(prefix_table('otv'), \"id=%i\", $record['id']);\n            }\n\n            // generate session\n            $otv_code = GenerateCryptKey(32, false, true, true, true, false);\n\n            DB::insert(\n                prefix_table(\"otv\"),\n                array(\n                    'id' => null,\n                    'item_id' => $post_id,\n                    'timestamp' => time(),\n                    'originator' => intval($_SESSION['user_id']),\n                    'code' => $otv_code\n                    )\n            );\n            $newID = DB::insertId();\n\n            $otv_session = array(\n                \"code\"      => $otv_code,\n                \"stamp\" => time()\n            );\n\n            if (!isset($SETTINGS['otv_expiration_period'])) {\n                $SETTINGS['otv_expiration_period'] = 7;\n            }\n            $url = $SETTINGS['cpassman_url'].\"/index.php?otv=true&\".http_build_query($otv_session);\n            $exp_date = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], time() + (intval($SETTINGS['otv_expiration_period']) * 86400));\n\n            echo json_encode(\n                array(\n                    \"error\" => \"\",\n                    \"url\" => str_replace(\n                        array(\"#URL#\", \"#DAY#\"),\n                        array('<span id=\\'otv_link\\'>'.$url.'</span>&nbsp;<span class=\\'fa-stack tip\" title=\\''.addslashes($LANG['copy']).'\\' style=\\'cursor:pointer;\\' id=\\'button_copy_otv_link\\'><span class=\\'fa fa-square fa-stack-2x\\'></span><span class=\\'fa fa-clipboard fa-stack-1x fa-inverse\\'></span></span>', $exp_date),\n                        $LANG['one_time_view_item_url_box']\n                    )\n                )\n            );\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"image_preview_preparation\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // get file info\n            $file_info = DB::queryfirstrow(\n                \"SELECT file, status FROM \".prefix_table(\"files\").\" WHERE id=%i\",\n                intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_STRING), 1))\n            );\n\n            // prepare image info\n            $post_title = filter_input(INPUT_POST, 'title', FILTER_SANITIZE_STRING);\n            $image_code = $file_info['file'];\n            $extension = substr($post_title, strrpos($post_title, '.') + 1);\n            $file_to_display = $SETTINGS['url_to_upload_folder'].'/'.$image_code;\n            $file_suffix = \"\";\n\n            // should we encrypt/decrypt the file\n            encrypt_or_decrypt_file($file_info['file'], $file_info['status']);\n\n            // should we decrypt the attachment?\n            if (isset($file_info['status']) && $file_info['status'] === \"encrypted\") {\n                // Delete the file as viewed\n                fileDelete($SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension);\n\n                // Open the file\n                if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$image_code)) {\n                    // Should we encrypt or decrypt?\n                    prepareFileWithDefuse(\n                        'decrypt',\n                        $SETTINGS['path_to_upload_folder'].'/'.$image_code,\n                        $SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension\n                    );\n\n                    // prepare variable\n                    $file_to_display = $file_to_display.\"_delete.\".$extension;\n                    $file_suffix = \"_delete.\".$extension;\n                }\n            }\n\n            // Encrypt data to return\n            echo prepareExchangedData(\n                array(\n                    \"error\" => \"\",\n                    \"new_file\" => $file_to_display,\n                    \"file_suffix\" => $file_suffix,\n                    \"file_path\" => $SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension\n                ),\n                \"encode\"\n            );\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"delete_file\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // get file info\n            $result = DB::queryfirstrow(\n                \"SELECT file FROM \".prefix_table(\"files\").\" WHERE id=%i\",\n                intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_STRING), 1))\n            );\n\n            fileDelete($SETTINGS['path_to_upload_folder'].'/'.$result['file'].filter_input(INPUT_POST, 'file_suffix', FILTER_SANITIZE_STRING));\n\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"get_refined_list_of_users\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            $error = \"\";\n\n            // get list of users\n            $aList = array();\n            $selOptionsUsers = \"\";\n            $selOptionsRoles = \"\";\n            $selEOptionsUsers = \"\";\n            $selEOptionsRoles = \"\";\n            $rows = DB::query(\n                \"SELECT r.role_id AS role_id, t.title AS title\n                FROM \".prefix_table(\"roles_values\").\" AS r\n                INNER JOIN \".prefix_table(\"roles_title\").\" AS t ON (r.role_id = t.id)\n                WHERE r.folder_id = %i\",\n                $post_iFolderId\n            );\n            foreach ($rows as $record) {\n                $selOptionsRoles .= '<option value=\"role_'.$record['role_id'].'\" class=\"folder_rights_role\">'.$record['title'].'</option>';\n                $selEOptionsRoles .= '<option value=\"role_'.$record['role_id'].'\" class=\"folder_rights_role_edit\">'.$record['title'].'</option>';\n                $rows2 = DB::query(\"SELECT id, login, fonction_id FROM \".prefix_table(\"users\").\" WHERE fonction_id LIKE '%\".$record['role_id'].\"%'\");\n                foreach ($rows2 as $record2) {\n                    foreach (explode(\";\", $record2['fonction_id']) as $role) {\n                        if (!in_array($record2['id'], $aList) && $role == $record['role_id']) {\n                            array_push($aList, $record2['id']);\n                            $selOptionsUsers .= '<option value=\"'.$record2['id'].'\" class=\"folder_rights_user\">'.$record2['login'].'</option>';\n                            $selEOptionsUsers .= '<option value=\"'.$record2['id'].'\" class=\"folder_rights_user_edit\">'.$record2['login'].'</option>';\n                        }\n                    }\n                }\n            }\n\n            // export data\n            $data = array(\n                'error' => $error,\n                'selOptionsUsers' => $selOptionsUsers,\n                'selOptionsRoles' => $selOptionsRoles,\n                'selEOptionsUsers' => $selEOptionsUsers,\n                'selEOptionsRoles' => $selEOptionsRoles\n            );\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"check_for_title_duplicate\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            $error = \"\";\n            $duplicate = 0;\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            // Prepare variables\n            $label = htmlspecialchars_decode($dataReceived['label']);\n            $idFolder = $dataReceived['idFolder'];\n\n            // don't check if Personal Folder\n            $data = DB::queryFirstRow(\"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\", $idFolder);\n            if ($data['title'] == $_SESSION['user_id']) {\n                // send data\n                echo '[{\"duplicate\" : \"'.$duplicate.'\" , error\" : \"\"}]';\n            } else {\n                if (filter_input(INPUT_POST, 'option', FILTER_SANITIZE_STRING) === \"same_folder\") {\n                // case unique folder\n                    DB::query(\n                        \"SELECT label\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id_tree = %i AND label = %s\",\n                        $idFolder,\n                        $label\n                    );\n                } else {\n                // case complete database\n\n                    //get list of personal folders\n                    $arrayPf = array();\n                    $listPf = \"\";\n                    if (!empty($row['id'])) {\n                        $rows = DB::query(\n                            \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n                            \"1\"\n                        );\n                        foreach ($rows as $record) {\n                            if (!in_array($record['id'], $arrayPf)) {\n                                array_push($arrayPf, $record['id']);\n                            }\n                        }\n                    }\n\n                    // build WHERE condition\n                    $where = new WhereClause('and');\n                    $where->add('id_tree = %i', $idFolder);\n                    $where->add('label = %s', $label);\n                    if (!empty($arrayPf)) {\n                        $where->add(\"id_tree NOT IN (\".implode(',', $arrayPf).\")\");\n                    }\n\n                    DB::query(\n                        \"SELECT label\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE %l\",\n                        $where\n                    );\n                }\n\n                // count results\n                if (DB::count() > 0) {\n                    $duplicate = 1;\n                }\n\n                // send data\n                echo '[{\"duplicate\" : \"'.$duplicate.'\" , \"error\" : \"\"}]';\n            }\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"refresh_visible_folders\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Build list of visible folders\n            $selectVisibleFoldersOptions = $selectVisibleNonPersonalFoldersOptions = $selectVisibleActiveFoldersOptions = \"\";\n            if (isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] === '1') {\n                $selectVisibleFoldersOptions = '<option value=\"0\">'.$LANG['root'].'</option>';\n            }\n\n            if ($_SESSION['user_admin'] === '1' && (isset($SETTINGS_EXT['admin_full_right'])\n                && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n                $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n            }\n\n            if (isset($_SESSION['list_folders_limited']) && count($_SESSION['list_folders_limited']) > 0) {\n                $listFoldersLimitedKeys = @array_keys($_SESSION['list_folders_limited']);\n            } else {\n                $listFoldersLimitedKeys = array();\n            }\n            // list of items accessible but not in an allowed folder\n            if (isset($_SESSION['list_restricted_folders_for_items'])\n                && count($_SESSION['list_restricted_folders_for_items']) > 0) {\n                $listRestrictedFoldersForItemsKeys = @array_keys($_SESSION['list_restricted_folders_for_items']);\n            } else {\n                $listRestrictedFoldersForItemsKeys = array();\n            }\n\n\n            //Build tree\n            $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n            $tree->register();\n            $tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            $folders = $tree->getDescendants();\n\n            foreach ($folders as $folder) {\n                // Be sure that user can only see folders he/she is allowed to\n                if (!in_array($folder->id, $_SESSION['forbiden_pfs'])\n                    || in_array($folder->id, $_SESSION['groupes_visibles'])\n                    || in_array($folder->id, $listFoldersLimitedKeys)\n                    || in_array($folder->id, $listRestrictedFoldersForItemsKeys)\n                ) {\n                    $displayThisNode = false;\n                    $hide_node = false;\n                    $nbChildrenItems = 0;\n                    // Check if any allowed folder is part of the descendants of this node\n                    $nodeDescendants = $tree->getDescendants($folder->id, true, false, true);\n                    foreach ($nodeDescendants as $node) {\n                        // manage tree counters\n                        if (isset($SETTINGS['tree_counters']) && $SETTINGS['tree_counters'] === '1') {\n                            DB::query(\n                                \"SELECT * FROM \".prefix_table(\"items\").\"\n                                WHERE inactif=%i AND id_tree = %i\",\n                                0,\n                                $node\n                            );\n                            $nbChildrenItems += DB::count();\n                        }\n                        if (in_array($node, array_merge($_SESSION['groupes_visibles'], $_SESSION['list_restricted_folders_for_items']))\n                            || @in_array($node, $listFoldersLimitedKeys)\n                            || @in_array($node, $listRestrictedFoldersForItemsKeys)\n                        ) {\n                            $displayThisNode = true;\n                            //break;\n                        }\n                    }\n\n                    if ($displayThisNode === true) {\n                        $ident = \"\";\n                        for ($x = 1; $x < $folder->nlevel; $x++) {\n                            $ident .= \"&nbsp;&nbsp;\";\n                        }\n\n                        // resize title if necessary\n                        $fldTitle = str_replace(\"&\", \"&amp;\", $folder->title);\n\n                        // rename personal folder with user login\n                        if ($folder->title == $_SESSION['user_id'] && $folder->nlevel === '1') {\n                            $fldTitle = $_SESSION['login'];\n                        }\n\n                        // build select for all visible folders\n                        if (in_array($folder->id, $_SESSION['groupes_visibles']) && !in_array($folder->id, $_SESSION['read_only_folders'])) {\n                            if ($_SESSION['user_read_only'] === '0' || ($_SESSION['user_read_only'] === '1' && in_array($folder->id, $_SESSION['personal_visible_groups']))) {\n                                if (($folder->title == $_SESSION['user_id'] && $folder->nlevel === '1')) { //\n                                    $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" >'.$ident.$fldTitle.'</option>';\n                                } else {\n                                    $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                                }\n                            } else {\n                                $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                            }\n                        } else {\n                            $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                        // build select for non personal visible folders\n                        if (isset($_SESSION['all_non_personal_folders']) && in_array($folder->id, $_SESSION['all_non_personal_folders'])) {\n                            $selectVisibleNonPersonalFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                        } else {\n                            $selectVisibleNonPersonalFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                        // build select for active folders (where user can do something)\n                        if (isset($_SESSION['list_restricted_folders_for_items']) && !in_array($folder->id, $_SESSION['read_only_folders'])) {\n                            $selectVisibleActiveFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                        } else {\n                            $selectVisibleActiveFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                    }\n                }\n            }\n\n            $data = array(\n                'error' => \"\",\n                'selectVisibleFoldersOptions' => ($selectVisibleFoldersOptions),\n                'selectVisibleNonPersonalFoldersOptions' => ($selectVisibleNonPersonalFoldersOptions),\n                'selectVisibleActiveFoldersOptions' => ($selectVisibleActiveFoldersOptions),\n                'selectFullVisibleFoldersOptions' => str_replace('disabled=\"disabled\"', \"\", $selectVisibleFoldersOptions)\n            );\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Load item history\n        */\n        case \"load_item_history\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            // Prepare variables\n            $id = noHTML(htmlspecialchars_decode($dataReceived['id']));\n\n            // get item info\n            $dataItem = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\"\n                WHERE id=%i\",\n                $id\n            );\n\n            // get item history\n            $history = '<table style=\"margin:0px; width:100%; border-collapse: collapse; background-color:#D4D5D5;\" cellspacing=\"0\" cellpadding=\"1\">';\n            $rows = DB::query(\n                \"SELECT l.date as date, l.action as action, l.raison as raison, l.raison_iv AS raison_iv,\n                u.login as login, u.avatar_thumb as avatar_thumb\n                FROM \".prefix_table(\"log_items\").\" as l\n                LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                WHERE id_item=%i AND action <> %s\n                ORDER BY date ASC\",\n                $id,\n                \"at_shown\"\n            );\n            foreach ($rows as $record) {\n                $reason = explode(':', $record['raison']);\n                if ($record['action'] === \"at_modification\" && $reason[0] === \"at_pw \") {\n                    // check if item is PF\n                    if ($dataItem['perso'] != 1) {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            \"\",\n                            \"decrypt\"\n                        );\n                    } else {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    }\n                    $reason[1] = @$reason[1]['string'];\n                    // if not UTF8 then cleanup and inform that something is wrong with encrytion/decryption\n                    if (!isUTF8($reason[1]) || is_array($reason[1])) {\n                        $reason[1] = \"\";\n                    }\n                }\n                // imported via API\n                if (empty($record['login'])) {\n                    $record['login'] = $LANG['imported_via_api'].\" [\".$record['raison'].\"]\";\n                }\n\n                if (!empty($reason[1])\n                    || $record['action'] === \"at_copy\"\n                    || $record['action'] === \"at_creation\"\n                    || $record['action'] === \"at_manual\"\n                    || $record['action'] === \"at_modification\"\n                    || $record['action'] === \"at_delete\"\n                    || $record['action'] === \"at_restored\") {\n                    // Prepare avatar\n                    if (isset($record['avatar_thumb']) && !empty($record['avatar_thumb'])) {\n                        if (file_exists($SETTINGS['cpassman_dir'].'/includes/avatars/'.$record['avatar_thumb'])) {\n                            $avatar = $SETTINGS['cpassman_url'].'/includes/avatars/'.$record['avatar_thumb'];\n                        } else {\n                            $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n                        }\n                    } else {\n                        $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n                    }\n\n                    $history .= '<tr style=\"\">'.\n                        '<td rowspan=\"2\" style=\"width:40px;\"><img src=\"'.$avatar.'\" style=\"border-radius:20px; height:35px;\"></td>'.\n                        '<td colspan=\"2\" style=\"font-size:11px;\"><i>'.$LANG['by'].' '.$record['login'].' '.$LANG['at'].' '.date($SETTINGS['date_format'].' '.$SETTINGS['time_format'], $record['date']).'</i></td></tr>'.\n                        '<tr style=\"border-bottom:3px solid #C9C9C9;\"><td style=\"width:100px;\"><b>'.$LANG[$record['action']].'</b></td>'.\n                        '<td style=\"\">'.(!empty($record['raison']) && $record['action'] !== \"at_creation\" ? (count($reason) > 1 ? $LANG[trim($reason[0])].' : '.handleBackslash($reason[1]) : ($record['action'] === \"at_manual\" ? $reason[0] : $LANG[trim($reason[0])])) : '').'</td>'.\n                        '</tr>'.\n                        '<tr></tr>';\n                }\n            }\n            $history .= \"</table>\";\n\n            $data = array(\n                'error' => \"\",\n                'new_html' => $history\n            );\n\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        case \"suggest_item_change\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // decrypt and retrieve data in JSON format\n            $data_received = prepareExchangedData($post_data, \"decode\");\n\n            // prepare variables\n            $label = htmlspecialchars_decode($data_received['label']);\n            $pwd = htmlspecialchars_decode($data_received['pwd']);\n            $login = htmlspecialchars_decode($data_received['login']);\n            $email = htmlspecialchars_decode($data_received['email']);\n            $url = htmlspecialchars_decode($data_received['url']);\n            $folder = htmlspecialchars_decode($data_received['folder']);\n            $comment = htmlspecialchars_decode($data_received['comment']);\n            $item_id = htmlspecialchars_decode($data_received['item_id']);\n\n            if (empty($pwd)) {\n                $encrypt['string'] = \"\";\n            } else {\n                $encrypt = cryption($pwd, \"\", \"encrypt\");\n            }\n\n            // query\n            DB::insert(\n                prefix_table(\"items_change\"),\n                array(\n                    'item_id' => $item_id,\n                    'label' => $label,\n                    'pw' => $encrypt['string'],\n                    'login' => $login,\n                    'email' => $email,\n                    'url' => $url,\n                    'description' => \"\",\n                    'comment' => $comment,\n                    'folder_id' => $folder,\n                    'user_id' => $_SESSION['user_id'],\n                    'timestamp' => time()\n                )\n            );\n            $newID = DB::insertId();\n\n            // get some info to add to the notification email\n            $resp_user = DB::queryfirstrow(\n                \"SELECT login FROM \".prefix_table(\"users\").\" WHERE id = %i\",\n                $_SESSION['user_id']\n            );\n            $resp_folder = DB::queryfirstrow(\n                \"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $folder\n            );\n\n            // notify Managers\n            $rows = DB::query(\n                \"SELECT email\n                FROM \".prefix_table(\"users\").\"\n                WHERE `gestionnaire` = %i AND `email` IS NOT NULL\",\n                1\n            );\n            foreach ($rows as $record) {\n                sendEmail(\n                    $LANG['suggestion_notify_subject'],\n                    str_replace(array('#tp_label#', '#tp_user#', '#tp_folder#'), array(addslashes($label), addslashes($resp_user['login']), addslashes($resp_folder['title'])), $LANG['suggestion_notify_body']),\n                    $record['email']\n                );\n            }\n\n            echo '[ { \"error\" : \"\" } ]';\n            break;\n    }\n}\n// Build the QUERY in case of GET\nif (isset($_GET['type'])) {\n    switch ($_GET['type']) {\n        /*\n        * CASE\n        * Autocomplet for TAGS\n        */\n        case \"autocomplete_tags\":\n            // Get a list off all existing TAGS\n            $listOfTags = \"\";\n            $rows = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE tag LIKE %ss GROUP BY tag\", $_GET['term']);\n            foreach ($rows as $record) {\n                if (empty($listOfTags)) {\n                    $listOfTags = '\"'.$record['tag'].'\"';\n                } else {\n                    $listOfTags .= ', \"'.$record['tag'].'\"';\n                }\n            }\n            echo \"[\".$listOfTags.\"]\";\n            break;\n    }\n}\n\n/*\n* FUNCTION\n* Identify if this group authorize creation of item without the complexit level reached\n*/\nfunction recupDroitCreationSansComplexite($groupe)\n{\n    $data = DB::queryFirstRow(\n        \"SELECT bloquer_creation, bloquer_modification, personal_folder FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n        $groupe\n    );\n    // Check if it's in a personal folder. If yes, then force complexity overhead.\n    if ($data['personal_folder'] === '1') {\n        return array(\"bloquer_modification_complexite\" => 1, \"bloquer_creation_complexite\" => 1);\n    }\n\n    return array(\"bloquer_modification_complexite\" => $data['bloquer_modification'], \"bloquer_creation_complexite\" => $data['bloquer_creation']);\n}\n\n/*\n* FUNCTION\n* permits to identify what icon to display depending on file extension\n*/\nfunction fileFormatImage($ext)\n{\n    global $SETTINGS_EXT;\n    if (in_array($ext, $SETTINGS_EXT['office_file_ext'])) {\n        $image = \"file-word-o\";\n    } elseif ($ext === \"pdf\") {\n        $image = \"file-pdf-o\";\n    } elseif (in_array($ext, $SETTINGS_EXT['image_file_ext'])) {\n        $image = \"file-image-o\";\n    } elseif ($ext === \"txt\") {\n        $image = \"file-text-o\";\n    } else {\n        $image = \"file-o\";\n    }\n\n    return $image;\n}\n\n/*\n* FUNCTION\n* permits to remplace some specific characters in password\n*/\nfunction passwordReplacement($pwd)\n{\n    $pwPatterns = array('/ETCOMMERCIAL/', '/SIGNEPLUS/');\n    $pwRemplacements = array('&', '+');\n\n    return preg_replace($pwPatterns, $pwRemplacements, $pwd);\n}\n", "<?php\n/**\n *\n * @file          main.functions.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link\n */\n\n//define pbkdf2 iteration count\ndefine('ITCOUNT', '2072');\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} elseif (file_exists('../../includes/config/tp.config.php')) {\n    require_once '../../includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// load phpCrypt\nif (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n    require_once '../includes/libraries/phpcrypt/phpCrypt.php';\n    require_once '../includes/config/settings.php';\n} else {\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/phpcrypt/phpCrypt.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n}\n\n// Prepare PHPCrypt class calls\nuse PHP_Crypt\\PHP_Crypt as PHP_Crypt;\n\n// Prepare Encryption class calls\nuse \\Defuse\\Crypto\\Crypto;\nuse \\Defuse\\Crypto\\Exception as Ex;\n\n//Generate N# of random bits for use as salt\n/**\n * @param integer $size\n */\nfunction getBits($size)\n{\n    $str = '';\n    $var_x = $size + 10;\n    for ($var_i = 0; $var_i < $var_x; $var_i++) {\n        $str .= base_convert(mt_rand(1, 36), 10, 36);\n    }\n    return substr($str, 0, $size);\n}\n\n//generate pbkdf2 compliant hash\nfunction strHashPbkdf2($var_p, $var_s, $var_c, $var_kl, $var_a = 'sha256', $var_st = 0)\n{\n    $var_kb = $var_st + $var_kl; // Key blocks to compute\n    $var_dk = ''; // Derived key\n\n    for ($block = 1; $block <= $var_kb; $block++) { // Create key\n        $var_ib = $var_h = hash_hmac($var_a, $var_s.pack('N', $block), $var_p, true); // Initial hash for this block\n        for ($var_i = 1; $var_i < $var_c; $var_i++) { // Perform block iterations\n            $var_ib ^= ($var_h = hash_hmac($var_a, $var_h, $var_p, true)); // XOR each iterate\n        }\n        $var_dk .= $var_ib; // Append iterated block\n    }\n    return substr($var_dk, $var_st, $var_kl); // Return derived key of correct length\n}\n\n/**\n * stringUtf8Decode()\n *\n * utf8_decode\n */\nfunction stringUtf8Decode($string)\n{\n    return str_replace(\" \", \"+\", utf8_decode($string));\n}\n\n/**\n * encryptOld()\n *\n * crypt a string\n * @param string $text\n */\nfunction encryptOld($text, $personalSalt = \"\")\n{\n    if (empty($personalSalt) === false) {\n        return trim(\n            base64_encode(\n                mcrypt_encrypt(\n                    MCRYPT_RIJNDAEL_256,\n                    $personalSalt,\n                    $text,\n                    MCRYPT_MODE_ECB,\n                    mcrypt_create_iv(\n                        mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                        MCRYPT_RAND\n                    )\n                )\n            )\n        );\n    }\n\n    // If $personalSalt is not empty\n    return trim(\n        base64_encode(\n            mcrypt_encrypt(\n                MCRYPT_RIJNDAEL_256,\n                SALT,\n                $text,\n                MCRYPT_MODE_ECB,\n                mcrypt_create_iv(\n                    mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                    MCRYPT_RAND\n                )\n            )\n        )\n    );\n}\n\n/**\n * decryptOld()\n *\n * decrypt a crypted string\n */\nfunction decryptOld($text, $personalSalt = \"\")\n{\n    if (!empty($personalSalt)) {\n        return trim(\n            mcrypt_decrypt(\n                MCRYPT_RIJNDAEL_256,\n                $personalSalt,\n                base64_decode($text),\n                MCRYPT_MODE_ECB,\n                mcrypt_create_iv(\n                    mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                    MCRYPT_RAND\n                )\n            )\n        );\n    }\n\n    // No personal SK\n    return trim(\n        mcrypt_decrypt(\n            MCRYPT_RIJNDAEL_256,\n            SALT,\n            base64_decode($text),\n            MCRYPT_MODE_ECB,\n            mcrypt_create_iv(\n                mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                MCRYPT_RAND\n            )\n        )\n    );\n}\n\n/**\n * encrypt()\n *\n * crypt a string\n * @param string $decrypted\n */\nfunction encrypt($decrypted, $personalSalt = \"\")\n{\n    global $SETTINGS;\n\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        require_once '../includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    } else {\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    }\n\n    if (!empty($personalSalt)) {\n        $staticSalt = $personalSalt;\n    } else {\n        $staticSalt = SALT;\n    }\n\n    //set our salt to a variable\n    // Get 64 random bits for the salt for pbkdf2\n    $pbkdf2Salt = getBits(64);\n    // generate a pbkdf2 key to use for the encryption.\n    $key = substr(pbkdf2('sha256', $staticSalt, $pbkdf2Salt, ITCOUNT, 16 + 32, true), 32, 16);\n    // Build $init_vect and $ivBase64.  We use a block size of 256 bits (AES compliant)\n    // and CTR mode.  (Note: ECB mode is inadequate as IV is not used.)\n    $init_vect = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, 'ctr'), MCRYPT_RAND);\n\n    //base64 trim\n    if (strlen($ivBase64 = rtrim(base64_encode($init_vect), '=')) != 43) {\n        return false;\n    }\n    // Encrypt $decrypted\n    $encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $decrypted, 'ctr', $init_vect);\n    // MAC the encrypted text\n    $mac = hash_hmac('sha256', $encrypted, $staticSalt);\n    // We're done!\n    return base64_encode($ivBase64.$encrypted.$mac.$pbkdf2Salt);\n}\n\n/**\n * decrypt()\n *\n * decrypt a crypted string\n */\nfunction decrypt($encrypted, $personalSalt = \"\")\n{\n    global $SETTINGS;\n\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        require_once '../includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    } else {\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    }\n\n    if (!empty($personalSalt)) {\n        $staticSalt = $personalSalt;\n    } else {\n        $staticSalt = SALT;\n    }\n    //base64 decode the entire payload\n    $encrypted = base64_decode($encrypted);\n    // get the salt\n    $pbkdf2Salt = substr($encrypted, -64);\n    //remove the salt from the string\n    $encrypted = substr($encrypted, 0, -64);\n    $key = substr(pbkdf2('sha256', $staticSalt, $pbkdf2Salt, ITCOUNT, 16 + 32, true), 32, 16);\n    // Retrieve $init_vect which is the first 22 characters plus ==, base64_decoded.\n    $init_vect = base64_decode(substr($encrypted, 0, 43).'==');\n    // Remove $init_vect from $encrypted.\n    $encrypted = substr($encrypted, 43);\n    // Retrieve $mac which is the last 64 characters of $encrypted.\n    $mac = substr($encrypted, -64);\n    // Remove the last 64 chars from encrypted (remove MAC)\n    $encrypted = substr($encrypted, 0, -64);\n    //verify the sha256hmac from the encrypted data before even trying to decrypt it\n    if (hash_hmac('sha256', $encrypted, $staticSalt) != $mac) {\n        return false;\n    }\n    // Decrypt the data.\n    $decrypted = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $encrypted, 'ctr', $init_vect), \"\\0\\4\");\n    // Yay!\n    return $decrypted;\n}\n\n\n/**\n * genHash()\n *\n * Generate a hash for user login\n * @param string $password\n */\nfunction bCrypt($password, $cost)\n{\n    $salt = sprintf('$2y$%02d$', $cost);\n    if (function_exists('openssl_random_pseudo_bytes')) {\n        $salt .= bin2hex(openssl_random_pseudo_bytes(11));\n    } else {\n        $chars = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for ($i = 0; $i < 22; $i++) {\n            $salt .= $chars[mt_rand(0, 63)];\n        }\n    }\n    return crypt($password, $salt);\n}\n\nfunction cryption_before_defuse($message, $saltkey, $init_vect, $type = null, $scope = \"public\")\n{\n    if (DEFUSE_ENCRYPTION === true) {\n        if ($scope === \"perso\") {\n            return defuse_crypto(\n                $message,\n                $saltkey,\n                $type\n            );\n        } else {\n            return defuse_crypto(\n                $message,\n                file_get_contents(SECUREPATH.\"/teampass-seckey.txt\"),\n                $type\n            );\n        }\n    } else {\n        return cryption_phpCrypt($message, $saltkey, $init_vect, $type);\n    }\n}\n\n/*\n * cryption() - Encrypt and decrypt string based upon phpCrypt library\n *\n * Using AES_128 and mode CBC\n *\n * $key and $init_vect have to be given in hex format\n */\nfunction cryption_phpCrypt($string, $key, $init_vect, $type)\n{\n    // manage key origin\n    if (null != SALT && $key != SALT) {\n        // check key (AES-128 requires a 16 bytes length key)\n        if (strlen($key) < 16) {\n            for ($inc = strlen($key) + 1; $inc <= 16; $inc++) {\n                $key .= chr(0);\n            }\n        } elseif (strlen($key) > 16) {\n            $key = substr($key, 16);\n        }\n    }\n\n    // load crypt\n    $crypt = new PHP_Crypt($key, PHP_Crypt::CIPHER_AES_128, PHP_Crypt::MODE_CBC);\n\n    if ($type == \"encrypt\") {\n        // generate IV and encrypt\n        $init_vect = $crypt->createIV();\n        $encrypt = $crypt->encrypt($string);\n        // return\n        return array(\n            \"string\" => bin2hex($encrypt),\n            \"iv\" => bin2hex($init_vect),\n            \"error\" => empty($encrypt) ? \"ERR_ENCRYPTION_NOT_CORRECT\" : \"\"\n        );\n    } elseif ($type == \"decrypt\") {\n        // case if IV is empty\n        if (empty($init_vect)) {\n                    return array(\n                'string' => \"\",\n                'error' => \"ERR_ENCRYPTION_NOT_CORRECT\"\n            );\n        }\n\n        // convert\n        try {\n            $string = testHex2Bin(trim($string));\n            $init_vect = testHex2Bin($init_vect);\n        } catch (Exception $e) {\n            return array(\n                'string' => \"\",\n                'error' => \"ERR_ENCRYPTION_NOT_CORRECT\"\n            );\n        }\n\n        // load IV\n        $crypt->IV($init_vect);\n        // decrypt\n        $decrypt = $crypt->decrypt($string);\n        // return\n        return array(\n            'string' => str_replace(chr(0), \"\", $decrypt),\n            'error' => \"\"\n        );\n    }\n}\n\nfunction testHex2Bin($val)\n{\n    if (!@hex2bin($val)) {\n        throw new Exception(\"ERROR\");\n    }\n    return hex2bin($val);\n}\n\n/**\n * @param string $ascii_key\n * @param string $type\n */\nfunction cryption($message, $ascii_key, $type) //defuse_crypto\n{\n    global $SETTINGS;\n\n    // load PhpEncryption library\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/';\n    }\n\n    require_once $path.'Crypto.php';\n    require_once $path.'Encoding.php';\n    require_once $path.'DerivedKeys.php';\n    require_once $path.'Key.php';\n    require_once $path.'KeyOrPassword.php';\n    require_once $path.'File.php';\n    require_once $path.'RuntimeTests.php';\n    require_once $path.'KeyProtectedByPassword.php';\n    require_once $path.'Core.php';\n\n    // init\n    $err = '';\n    if (empty($ascii_key)) {\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n    }\n\n    // convert KEY\n    $key = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n\n    try {\n        if ($type === \"encrypt\") {\n            $text = \\Defuse\\Crypto\\Crypto::encrypt($message, $key);\n        } elseif ($type === \"decrypt\") {\n            $text = \\Defuse\\Crypto\\Crypto::decrypt($message, $key);\n        }\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = \"an attack! either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n    } catch (Defuse\\Crypto\\Exception\\BadFormatException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\CryptoException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    return array(\n        'string' => isset($text) ? $text : \"\",\n        'error' => $err\n    );\n}\n\nfunction defuse_generate_key()\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    $key = \\Defuse\\Crypto\\Key::createNewRandomKey();\n    $key = $key->saveToAsciiSafeString();\n    return $key;\n}\n\nfunction defuse_generate_personal_key($psk)\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::createRandomPasswordProtectedKey($psk);\n    $protected_key_encoded = $protected_key->saveToAsciiSafeString();\n\n    return $protected_key_encoded; // save this in user table\n}\n\n/**\n * @param string $psk\n */\nfunction defuse_validate_personal_key($psk, $protected_key_encoded)\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    try {\n        $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::loadFromAsciiSafeString($protected_key_encoded);\n        $user_key = $protected_key->unlockKey($psk);\n        $user_key_encoded = $user_key->saveToAsciiSafeString();\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        return \"Error - Major issue as the encryption is broken.\";\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        return \"Error - The saltkey is not the correct one.\";\n    }\n\n    return $user_key_encoded; // store it in session once user has entered his psk\n}\n\n/**\n * Decrypt a defuse string if encrypted\n * @param  [type] $value Encrypted string\n * @return [type]        Decrypted string\n */\nfunction defuse_return_decrypted($value)\n{\n    if (substr($value, 0, 3) === \"def\") {\n        $value = cryption($value, \"\", \"decrypt\")['string'];\n    }\n    return $value;\n}\n\n/**\n * trimElement()\n *\n * trim a string depending on a specific string\n * @param string $element\n * @return string\n */\nfunction trimElement($chaine, $element)\n{\n    if (!empty($chaine)) {\n        $chaine = trim($chaine);\n        if (substr($chaine, 0, 1) == $element) {\n            $chaine = substr($chaine, 1);\n        }\n        if (substr($chaine, strlen($chaine) - 1, 1) == $element) {\n            $chaine = substr($chaine, 0, strlen($chaine) - 1);\n        }\n    }\n    return $chaine;\n}\n\n/**\n * cleanString()\n *\n * permits to suppress all \"special\" characters from string\n */\nfunction cleanString($string, $special = false)\n{\n    // Create temporary table for special characters escape\n    $tabSpecialChar = array();\n    for ($i = 0; $i <= 31; $i++) {\n        $tabSpecialChar[] = chr($i);\n    }\n    array_push($tabSpecialChar, \"<br />\");\n    if ($special == \"1\") {\n        $tabSpecialChar = array_merge($tabSpecialChar, array(\"</li>\", \"<ul>\", \"<ol>\"));\n    }\n\n    return str_replace($tabSpecialChar, \"\\n\", $string);\n}\n\nfunction db_error_handler($params)\n{\n    echo \"Error: \".$params['error'].\"<br>\\n\";\n    echo \"Query: \".$params['query'].\"<br>\\n\";\n    throw new Exception(\"Error - Query\", 1);\n}\n\n/**\n * [identifyUserRights description]\n * @param  string $groupesVisiblesUser  [description]\n * @param  string $groupesInterditsUser [description]\n * @param  string $isAdmin              [description]\n * @param  string $idFonctions          [description]\n * @return string                       [description]\n */\nfunction identifyUserRights($groupesVisiblesUser, $groupesInterditsUser, $isAdmin, $idFonctions)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    //load ClassLoader\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    //Connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    //Build tree\n    $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n    // Check if user is ADMINISTRATOR\n    if ($isAdmin == 1) {\n        $groupesVisibles = array();\n        $_SESSION['personal_folders'] = array();\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        $_SESSION['personal_visible_groups'] = array();\n        $_SESSION['read_only_folders'] = array();\n        $_SESSION['list_restricted_folders_for_items'] = array();\n        $_SESSION['list_folders_editable_by_role'] = array();\n        $_SESSION['list_folders_limited'] = array();\n        $_SESSION['groupes_visibles_list'] = \"\";\n        $_SESSION['list_folders_limited'] = \"\";\n        $rows = DB::query(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\", 0);\n        foreach ($rows as $record) {\n            array_push($groupesVisibles, $record['id']);\n        }\n        $_SESSION['groupes_visibles'] = $groupesVisibles;\n        $_SESSION['all_non_personal_folders'] = $groupesVisibles;\n        // Exclude all PF\n        $_SESSION['forbiden_pfs'] = array();\n        $where = new WhereClause('and'); // create a WHERE statement of pieces joined by ANDs\n        $where->add('personal_folder=%i', 1);\n        if (isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1) {\n            $where->add('title=%s', $_SESSION['user_id']);\n            $where->negateLast();\n        }\n        // Get ID of personal folder\n        $persfld = DB::queryfirstrow(\n            \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\",\n            $_SESSION['user_id']\n        );\n        if (!empty($persfld['id'])) {\n            if (!in_array($persfld['id'], $_SESSION['groupes_visibles'])) {\n                array_push($_SESSION['groupes_visibles'], $persfld['id']);\n                array_push($_SESSION['personal_visible_groups'], $persfld['id']);\n                // get all descendants\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n                $tree->rebuild();\n                $tst = $tree->getDescendants($persfld['id']);\n                foreach ($tst as $t) {\n                    array_push($_SESSION['groupes_visibles'], $t->id);\n                    array_push($_SESSION['personal_visible_groups'], $t->id);\n                }\n            }\n        }\n\n        // get complete list of ROLES\n        $tmp = explode(\";\", $_SESSION['fonction_id']);\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"roles_title\").\"\n            ORDER BY title ASC\"\n        );\n        foreach ($rows as $record) {\n            if (!empty($record['id']) && !in_array($record['id'], $tmp)) {\n                array_push($tmp, $record['id']);\n            }\n        }\n        $_SESSION['fonction_id'] = implode(\";\", $tmp);\n\n        $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n        $_SESSION['is_admin'] = $isAdmin;\n        // Check if admin has created Folders and Roles\n        DB::query(\"SELECT * FROM \".prefix_table(\"nested_tree\").\"\");\n        $_SESSION['nb_folders'] = DB::count();\n        DB::query(\"SELECT * FROM \".prefix_table(\"roles_title\"));\n        $_SESSION['nb_roles'] = DB::count();\n    } else {\n        // init\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['personal_folders'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        $_SESSION['personal_visible_groups'] = array();\n        $_SESSION['read_only_folders'] = array();\n        $groupesInterdits = array();\n        if (!is_array($groupesInterditsUser)) {\n            $groupesInterditsUser = explode(';', trimElement($groupesInterditsUser, \";\"));\n        }\n        if (!empty($groupesInterditsUser) && count($groupesInterditsUser) > 0) {\n            $groupesInterdits = $groupesInterditsUser;\n        }\n        $_SESSION['is_admin'] = $isAdmin;\n        $fonctionsAssociees = explode(';', trimElement($idFonctions, \";\"));\n\n        $listAllowedFolders = $listFoldersLimited = $listFoldersEditableByRole = $listRestrictedFoldersForItems = $listReadOnlyFolders = array();\n\n        // rechercher tous les groupes visibles en fonction des roles de l'utilisateur\n        foreach ($fonctionsAssociees as $roleId) {\n            if (!empty($roleId)) {\n                // Get allowed folders for each Role\n                $rows = DB::query(\"SELECT folder_id FROM \".prefix_table(\"roles_values\").\" WHERE role_id=%i\", $roleId);\n\n                if (DB::count() > 0) {\n                    $tmp = DB::queryfirstrow(\"SELECT allow_pw_change FROM \".prefix_table(\"roles_title\").\" WHERE id = %i\", $roleId);\n                    foreach ($rows as $record) {\n                        if (isset($record['folder_id']) && !in_array($record['folder_id'], $listAllowedFolders)) {\n                            array_push($listAllowedFolders, $record['folder_id']);\n                        }\n                        // Check if this group is allowed to modify any pw in allowed folders\n                        if ($tmp['allow_pw_change'] == 1 && !in_array($record['folder_id'], $listFoldersEditableByRole)) {\n                            array_push($listFoldersEditableByRole, $record['folder_id']);\n                        }\n                    }\n                    // Check for the users roles if some specific rights exist on items\n                    $rows = DB::query(\n                        \"SELECT i.id_tree, r.item_id\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (r.item_id=i.id)\n                        WHERE r.role_id=%i\n                        ORDER BY i.id_tree ASC\",\n                        $roleId\n                    );\n                    $inc = 0;\n                    foreach ($rows as $record) {\n                        if (isset($record['id_tree'])) {\n                            $listFoldersLimited[$record['id_tree']][$inc] = $record['item_id'];\n                            $inc++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Does this user is allowed to see other items\n        $inc = 0;\n        $rows = DB::query(\n            \"SELECT id, id_tree FROM \".prefix_table(\"items\").\"\n            WHERE restricted_to LIKE %ss AND inactif=%s\",\n            $_SESSION['user_id'].';',\n            '0'\n        );\n        foreach ($rows as $record) {\n            $listRestrictedFoldersForItems[$record['id_tree']][$inc] = $record['id'];\n            $inc++;\n        }\n        // => Build final lists\n        // Clean arrays\n        $listAllowedFolders = array_unique($listAllowedFolders);\n        $groupesVisiblesUser = explode(';', trimElement($groupesVisiblesUser, \";\"));\n        // Add user allowed folders\n        $allowedFoldersTmp = array_unique(\n            array_merge($listAllowedFolders, $groupesVisiblesUser)\n        );\n        // Exclude from allowed folders all the specific user forbidden folders\n        $allowedFolders = array();\n        foreach ($allowedFoldersTmp as $ident) {\n            if (!in_array($ident, $groupesInterditsUser) && !empty($ident)) {\n                array_push($allowedFolders, $ident);\n            }\n        }\n\n        // Clean array\n        $listAllowedFolders = array_filter(array_unique($allowedFolders));\n\n        // Exclude all PF\n        $_SESSION['forbiden_pfs'] = array();\n\n        $where = new WhereClause('and');\n        $where->add('personal_folder=%i', 1);\n        if (isset($SETTINGS['enable_pf_feature']) &&\n            $SETTINGS['enable_pf_feature'] == 1 &&\n            isset($_SESSION['personal_folder']) &&\n            $_SESSION['personal_folder'] == 1\n        ) {\n            $where->add('title=%s', $_SESSION['user_id']);\n            $where->negateLast();\n        }\n\n        $persoFlds = DB::query(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE %l\", $where);\n        foreach ($persoFlds as $persoFldId) {\n            array_push($_SESSION['forbiden_pfs'], $persoFldId['id']);\n        }\n        // Get IDs of personal folders\n        if (isset($SETTINGS['enable_pf_feature']) &&\n            $SETTINGS['enable_pf_feature'] == 1 &&\n            isset($_SESSION['personal_folder']) &&\n            $_SESSION['personal_folder'] == 1\n        ) {\n            $persoFld = DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $_SESSION['user_id']);\n            if (!empty($persoFld['id'])) {\n                if (!in_array($persoFld['id'], $listAllowedFolders)) {\n                    array_push($_SESSION['personal_folders'], $persoFld['id']);\n                    // get all descendants\n                    $ids = $tree->getDescendants($persoFld['id'], true, false);\n                    foreach ($ids as $ident) {\n                        array_push($listAllowedFolders, $ident->id);\n                        array_push($_SESSION['personal_visible_groups'], $ident->id);\n                        array_push($_SESSION['personal_folders'], $ident->id);\n                    }\n                }\n            }\n            // get list of readonly folders when pf is disabled.\n            // rule - if one folder is set as W or N in one of the Role, then User has access as W\n            foreach ($listAllowedFolders as $folderId) {\n                if (!in_array($folderId, array_unique(array_merge($listReadOnlyFolders, $_SESSION['personal_folders'])))) {   //\n                    DB::query(\n                        \"SELECT *\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE folder_id = %i AND role_id IN %li AND type IN %ls\",\n                        $folderId,\n                        $fonctionsAssociees,\n                        array(\"W\", \"ND\", \"NE\", \"NDNE\")\n                    );\n                    if (DB::count() == 0 && in_array($folderId, $groupesVisiblesUser) === false) {\n                        array_push($listReadOnlyFolders, $folderId);\n                    }\n                }\n            }\n        } else {\n            // get list of readonly folders when pf is disabled.\n            // rule - if one folder is set as W in one of the Role, then User has access as W\n            foreach ($listAllowedFolders as $folderId) {\n                if (!in_array($folderId, $listReadOnlyFolders)) {\n                    DB::query(\n                        \"SELECT *\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE folder_id = %i AND role_id IN %li AND type IN %ls\",\n                        $folderId,\n                        $fonctionsAssociees,\n                        array(\"W\", \"ND\", \"NE\", \"NDNE\")\n                    );\n                    if (DB::count() == 0 && !in_array($folderId, $groupesVisiblesUser)) {\n                        array_push($listReadOnlyFolders, $folderId);\n                    }\n                }\n            }\n        }\n\n        // check if change proposals on User's items\n        if (isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1) {\n            DB::query(\n                \"SELECT *\n                FROM \".prefix_table(\"items_change\").\" AS c\n                LEFT JOIN \".prefix_table(\"log_items\").\" AS i ON (c.item_id = i.id_item)\n                WHERE i.action = %s AND i.id_user = %i\",\n                \"at_creation\",\n                $_SESSION['user_id']\n            );\n            $_SESSION['nb_item_change_proposals'] = DB::count();\n        } else {\n            $_SESSION['nb_item_change_proposals'] = 0;\n        }\n\n        $_SESSION['all_non_personal_folders'] = $listAllowedFolders;\n        $_SESSION['groupes_visibles'] = $listAllowedFolders;\n        $_SESSION['groupes_visibles_list'] = implode(',', $listAllowedFolders);\n        $_SESSION['personal_visible_groups_list'] = implode(',', $_SESSION['personal_visible_groups']);\n        $_SESSION['read_only_folders'] = $listReadOnlyFolders;\n        $_SESSION['no_access_folders'] = $groupesInterdits;\n\n        $_SESSION['list_folders_limited'] = $listFoldersLimited;\n        $_SESSION['list_folders_editable_by_role'] = $listFoldersEditableByRole;\n        $_SESSION['list_restricted_folders_for_items'] = $listRestrictedFoldersForItems;\n        // Folders and Roles numbers\n        DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"nested_tree\").\"\");\n        $_SESSION['nb_folders'] = DB::count();\n        DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"roles_title\"));\n        $_SESSION['nb_roles'] = DB::count();\n    }\n\n    // update user's timestamp\n    DB::update(\n        prefix_table('users'),\n        array(\n            'timestamp' => time()\n        ),\n        \"id=%i\",\n        $_SESSION['user_id']\n    );\n}\n\n/**\n * updateCacheTable()\n *\n * Update the CACHE table\n * @param string $action\n */\nfunction updateCacheTable($action, $ident = \"\")\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    //Connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n    // Rebuild full cache table\n    if ($action === \"reload\") {\n        // truncate table\n        DB::query(\"TRUNCATE TABLE \".prefix_table(\"cache\"));\n\n        // reload date\n        $rows = DB::query(\n            \"SELECT *\n            FROM \".prefix_table('items').\" as i\n            INNER JOIN \".prefix_table('log_items').\" as l ON (l.id_item = i.id)\n            AND l.action = %s\n            AND i.inactif = %i\",\n            'at_creation',\n            0\n        );\n        foreach ($rows as $record) {\n            // Get all TAGS\n            $tags = \"\";\n            $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id=%i\", $record['id']);\n            foreach ($itemTags as $itemTag) {\n                if (!empty($itemTag['tag'])) {\n                    $tags .= $itemTag['tag'].\" \";\n                }\n            }\n            // Get renewal period\n            $resNT = DB::queryfirstrow(\"SELECT renewal_period FROM \".prefix_table('nested_tree').\" WHERE id=%i\", $record['id_tree']);\n\n            // form id_tree to full foldername\n            $folder = \"\";\n            $arbo = $tree->getPath($record['id_tree'], true);\n            foreach ($arbo as $elem) {\n                if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                    $elem->title = $_SESSION['login'];\n                }\n                if (empty($folder)) {\n                    $folder = stripslashes($elem->title);\n                } else {\n                    $folder .= \" \u00bb \".stripslashes($elem->title);\n                }\n            }\n            // store data\n            DB::insert(\n                prefix_table('cache'),\n                array(\n                    'id' => $record['id'],\n                    'label' => $record['label'],\n                    'description' => isset($record['description']) ? $record['description'] : \"\",\n                    'url' => (isset($record['url']) && !empty($record['url'])) ? $record['url'] : \"0\",\n                    'tags' => $tags,\n                    'id_tree' => $record['id_tree'],\n                    'perso' => $record['perso'],\n                    'restricted_to' => (isset($record['restricted_to']) && !empty($record['restricted_to'])) ? $record['restricted_to'] : \"0\",\n                    'login' => isset($record['login']) ? $record['login'] : \"\",\n                    'folder' => $folder,\n                    'author' => $record['id_user'],\n                    'renewal_period' => isset($resNT['renewal_period']) ? $resNT['renewal_period'] : \"0\",\n                    'timestamp' => $record['date']\n                    )\n            );\n        }\n        // UPDATE an item\n    } elseif ($action === \"update_value\") {\n        // get new value from db\n        $data = DB::queryfirstrow(\n            \"SELECT label, description, id_tree, perso, restricted_to, login, url\n            FROM \".prefix_table('items').\"\n            WHERE id=%i\",\n            $ident\n        );\n        // Get all TAGS\n        $tags = \"\";\n        $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id=%i\", $ident);\n        foreach ($itemTags as $itemTag) {\n            if (!empty($itemTag['tag'])) {\n                $tags .= $itemTag['tag'].\" \";\n            }\n        }\n        // form id_tree to full foldername\n        $folder = \"\";\n        $arbo = $tree->getPath($data['id_tree'], true);\n        foreach ($arbo as $elem) {\n            if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                $elem->title = $_SESSION['login'];\n            }\n            if (empty($folder)) {\n                $folder = stripslashes($elem->title);\n            } else {\n                $folder .= \" \u00bb \".stripslashes($elem->title);\n            }\n        }\n        // finaly update\n        DB::update(\n            prefix_table('cache'),\n            array(\n                'label' => $data['label'],\n                'description' => $data['description'],\n                'tags' => $tags,\n                'url' => (isset($data['url']) && !empty($data['url'])) ? $data['url'] : \"0\",\n                'id_tree' => $data['id_tree'],\n                'perso' => $data['perso'],\n                'restricted_to' => (isset($data['restricted_to']) && !empty($data['restricted_to'])) ? $data['restricted_to'] : \"0\",\n                'login' => isset($data['login']) ? $data['login'] : \"\",\n                'folder' => $folder,\n                'author' => $_SESSION['user_id'],\n                ),\n            \"id = %i\",\n            $ident\n        );\n        // ADD an item\n    } elseif ($action === \"add_value\") {\n        // get new value from db\n        $data = DB::queryFirstRow(\n            \"SELECT i.label, i.description, i.id_tree as id_tree, i.perso, i.restricted_to, i.id, i.login, i.url, l.date\n            FROM \".prefix_table('items').\" as i\n            INNER JOIN \".prefix_table('log_items').\" as l ON (l.id_item = i.id)\n            WHERE i.id = %i\n            AND l.action = %s\",\n            $ident,\n            'at_creation'\n        );\n        // Get all TAGS\n        $tags = \"\";\n        $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id = %i\", $ident);\n        foreach ($itemTags as $itemTag) {\n            if (!empty($itemTag['tag'])) {\n                $tags .= $itemTag['tag'].\" \";\n            }\n        }\n        // form id_tree to full foldername\n        $folder = \"\";\n        $arbo = $tree->getPath($data['id_tree'], true);\n        foreach ($arbo as $elem) {\n            if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                $elem->title = $_SESSION['login'];\n            }\n            if (empty($folder)) {\n                $folder = stripslashes($elem->title);\n            } else {\n                $folder .= \" \u00bb \".stripslashes($elem->title);\n            }\n        }\n        // finaly update\n        DB::insert(\n            prefix_table('cache'),\n            array(\n                'id' => $data['id'],\n                'label' => $data['label'],\n                'description' => $data['description'],\n                'tags' => (isset($tags) && !empty($tags)) ? $tags : \"None\",\n                'url' => (isset($data['url']) && !empty($data['url'])) ? $data['url'] : \"0\",\n                'id_tree' => $data['id_tree'],\n                'perso' => (isset($data['perso']) && !empty($data['perso']) && $data['perso'] !== \"None\") ? $data['perso'] : \"0\",\n                'restricted_to' => (isset($data['restricted_to']) && !empty($data['restricted_to'])) ? $data['restricted_to'] : \"None\",\n                'login' => isset($data['login']) ? $data['login'] : \"\",\n                'folder' => $folder,\n                'author' => $_SESSION['user_id'],\n                'timestamp' => $data['date']\n            )\n        );\n\n        // DELETE an item\n    } elseif ($action === \"delete_value\") {\n        DB::delete(prefix_table('cache'), \"id = %i\", $ident);\n    }\n}\n\n/*\n*\n*/\nfunction getStatisticsData()\n{\n    global $SETTINGS;\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n        0\n    );\n    $counter_folders = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n        1\n    );\n    $counter_folders_perso = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\",\n        0\n    );\n    $counter_items = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\",\n        1\n    );\n    $counter_items_perso = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\"\"\n    );\n    $counter_users = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE admin = %i\",\n        1\n    );\n    $admins = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE gestionnaire = %i\",\n        1\n    );\n    $managers = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE read_only = %i\",\n        1\n    );\n    $readOnly = DB::count();\n\n    // list the languages\n    $usedLang = [];\n    $tp_languages = DB::query(\n        \"SELECT name FROM \".prefix_table(\"languages\")\n    );\n    foreach ($tp_languages as $tp_language) {\n        DB::query(\n            \"SELECT * FROM \".prefix_table(\"users\").\" WHERE user_language = %s\",\n            $tp_language['name']\n        );\n        $usedLang[$tp_language['name']] = round((DB::count() * 100 / $counter_users), 0);\n    }\n\n    // get list of ips\n    $usedIp = [];\n    $tp_ips = DB::query(\n        \"SELECT user_ip FROM \".prefix_table(\"users\")\n    );\n    foreach ($tp_ips as $ip) {\n        if (array_key_exists($ip['user_ip'], $usedIp)) {\n            $usedIp[$ip['user_ip']] = $usedIp[$ip['user_ip']] + 1;\n        } elseif (!empty($ip['user_ip']) && $ip['user_ip'] !== \"none\") {\n            $usedIp[$ip['user_ip']] = 1;\n        }\n    }\n\n    return array(\n        \"error\" => \"\",\n        \"stat_phpversion\" => phpversion(),\n        \"stat_folders\" => $counter_folders,\n        \"stat_folders_shared\" => intval($counter_folders) - intval($counter_folders_perso),\n        \"stat_items\" => $counter_items,\n        \"stat_items_shared\" => intval($counter_items) - intval($counter_items_perso),\n        \"stat_users\" => $counter_users,\n        \"stat_admins\" => $admins,\n        \"stat_managers\" => $managers,\n        \"stat_ro\" => $readOnly,\n        \"stat_kb\" => $SETTINGS['enable_kb'],\n        \"stat_pf\" => $SETTINGS['enable_pf_feature'],\n        \"stat_fav\" => $SETTINGS['enable_favourites'],\n        \"stat_teampassversion\" => $SETTINGS['cpassman_version'],\n        \"stat_ldap\" => $SETTINGS['ldap_mode'],\n        \"stat_agses\" => $SETTINGS['agses_authentication_enabled'],\n        \"stat_duo\" => $SETTINGS['duo'],\n        \"stat_suggestion\" => $SETTINGS['enable_suggestion'],\n        \"stat_api\" => $SETTINGS['api'],\n        \"stat_customfields\" => $SETTINGS['item_extra_fields'],\n        \"stat_syslog\" => $SETTINGS['syslog_enable'],\n        \"stat_2fa\" => $SETTINGS['google_authentication'],\n        \"stat_stricthttps\" => $SETTINGS['enable_sts'],\n        \"stat_mysqlversion\" => DB::serverVersion(),\n        \"stat_languages\" => $usedLang,\n        \"stat_country\" => $usedIp\n    );\n}\n\n/**\n * sendEmail()\n *\n * @return\n */\nfunction sendEmail($subject, $textMail, $email, $textMailAlt = \"\")\n{\n    global $LANG;\n    global $SETTINGS;\n\n    // CAse where email not defined\n    if ($email === \"none\") {\n        return '\"error\":\"\" , \"message\":\"'.$LANG['forgot_my_pw_email_sent'].'\"';\n    }\n\n    include $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n    //load library\n    $user_language = isset($_SESSION['user_language']) ? $_SESSION['user_language'] : \"english\";\n    require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$user_language.'.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Email/Phpmailer/PHPMailerAutoload.php';\n\n    // load PHPMailer\n    $mail = new PHPMailer();\n\n    // send to user\n    $mail->setLanguage(\"en\", \"../includes/libraries/Email/Phpmailer/language/\");\n    $mail->SMTPDebug = 0; //value 1 can be used to debug\n    $mail->Port = $SETTINGS['email_port']; //COULD BE USED\n    $mail->CharSet = \"utf-8\";\n    if ($SETTINGS['email_security'] === \"tls\" || $SETTINGS['email_security'] === \"ssl\") {\n        $mail->SMTPSecure = $SETTINGS['email_security'];\n    }\n    $mail->isSmtp(); // send via SMTP\n    $mail->Host = $SETTINGS['email_smtp_server']; // SMTP servers\n    $mail->SMTPAuth = $SETTINGS['email_smtp_auth'] == '1' ? true : false; // turn on SMTP authentication\n    $mail->Username = $SETTINGS['email_auth_username']; // SMTP username\n    $mail->Password = $SETTINGS['email_auth_pwd']; // SMTP password\n    $mail->From = $SETTINGS['email_from'];\n    $mail->FromName = $SETTINGS['email_from_name'];\n    $mail->addAddress($email); //Destinataire\n    $mail->WordWrap = 80; // set word wrap\n    $mail->isHtml(true); // send as HTML\n    $mail->Subject = $subject;\n    $mail->Body = $textMail;\n    $mail->AltBody = $textMailAlt;\n    // send email\n    if (!$mail->send()) {\n        return '\"error\":\"error_mail_not_send\" , \"message\":\"'.str_replace(array(\"\\n\", \"\\t\", \"\\r\"), '', $mail->ErrorInfo).'\"';\n    } else {\n        return '\"error\":\"\" , \"message\":\"'.$LANG['forgot_my_pw_email_sent'].'\"';\n    }\n}\n\n/**\n * generateKey()\n *\n * @return\n */\nfunction generateKey()\n{\n    return substr(md5(rand().rand()), 0, 15);\n}\n\n/**\n * dateToStamp()\n *\n * @return\n */\nfunction dateToStamp($date)\n{\n    global $SETTINGS;\n\n    $date = date_parse_from_format($SETTINGS['date_format'], $date);\n    if ($date['warning_count'] == 0 && $date['error_count'] == 0) {\n        return mktime(23, 59, 59, $date['month'], $date['day'], $date['year']);\n    } else {\n        return false;\n    }\n}\n\nfunction isDate($date)\n{\n    return (strtotime($date) !== false);\n}\n\n/**\n * isUTF8()\n *\n * @return integer is the string in UTF8 format.\n */\n\nfunction isUTF8($string)\n{\n    if (is_array($string) === true) {\n        $string = $string['string'];\n    }\n    return preg_match(\n        '%^(?:\n        [\\x09\\x0A\\x0D\\x20-\\x7E] # ASCII\n        | [\\xC2-\\xDF][\\x80-\\xBF] # non-overlong 2-byte\n        | \\xE0[\\xA0-\\xBF][\\x80-\\xBF] # excluding overlongs\n        | [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2} # straight 3-byte\n        | \\xED[\\x80-\\x9F][\\x80-\\xBF] # excluding surrogates\n        | \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # planes 1-3\n        | [\\xF1-\\xF3][\\x80-\\xBF]{3} # planes 4-15\n        | \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2} # plane 16\n        )*$%xs',\n        $string\n    );\n}\n\n/*\n* FUNCTION\n* permits to prepare data to be exchanged\n*/\n/**\n * @param string $type\n */\nfunction prepareExchangedData($data, $type)\n{\n    global $SETTINGS;\n\n    //load ClassLoader\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n    //Load AES\n    $aes = new SplClassLoader('Encryption\\Crypt', '../includes/libraries');\n    $aes->register();\n\n    if ($type == \"encode\") {\n        if (isset($SETTINGS['encryptClientServer'])\n            && $SETTINGS['encryptClientServer'] === \"0\"\n        ) {\n            return json_encode(\n                $data,\n                JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n            );\n        } else {\n            return Encryption\\Crypt\\aesctr::encrypt(\n                json_encode(\n                    $data,\n                    JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n                ),\n                $_SESSION['key'],\n                256\n            );\n        }\n    } elseif ($type == \"decode\") {\n        if (isset($SETTINGS['encryptClientServer'])\n            && $SETTINGS['encryptClientServer'] === \"0\"\n        ) {\n            return json_decode(\n                $data,\n                true\n            );\n        } else {\n            return json_decode(\n                Encryption\\Crypt\\aesctr::decrypt(\n                    $data,\n                    $_SESSION['key'],\n                    256\n                ),\n                true\n            );\n        }\n    }\n}\n\nfunction make_thumb($src, $dest, $desired_width)\n{\n    /* read the source image */\n    $source_image = imagecreatefrompng($src);\n    $width = imagesx($source_image);\n    $height = imagesy($source_image);\n\n    /* find the \"desired height\" of this thumbnail, relative to the desired width  */\n    $desired_height = floor($height * ($desired_width / $width));\n\n    /* create a new, \"virtual\" image */\n    $virtual_image = imagecreatetruecolor($desired_width, $desired_height);\n\n    /* copy source image at a resized size */\n    imagecopyresampled($virtual_image, $source_image, 0, 0, 0, 0, $desired_width, $desired_height, $width, $height);\n\n    /* create the physical thumbnail image to its destination */\n    imagejpeg($virtual_image, $dest);\n}\n\n/*\n** check table prefix in SQL query\n*/\n/**\n * @param string $table\n */\nfunction prefix_table($table)\n{\n    global $pre;\n    $safeTable = htmlspecialchars($pre.$table);\n    if (!empty($safeTable)) {\n        // sanitize string\n        return $safeTable;\n    } else {\n        // stop error no table\n        return \"table_not_exists\";\n    }\n}\n\n/*\n * Creates a KEY using PasswordLib\n */\nfunction GenerateCryptKey($size = \"\", $secure = false, $numerals = false, $capitalize = false, $ambiguous = false, $symbols = false)\n{\n    // load library\n    $pwgen = new SplClassLoader('Encryption\\PwGen', '../includes/libraries');\n    $pwgen->register();\n    $pwgen = new Encryption\\PwGen\\pwgen();\n\n    // init\n    if (!empty($size)) {\n        $pwgen->setLength($size);\n    }\n    if (!empty($secure)) {\n        $pwgen->setSecure($secure);\n    }\n    if (!empty($numerals)) {\n        $pwgen->setNumerals($numerals);\n    }\n    if (!empty($capitalize)) {\n        $pwgen->setCapitalize($capitalize);\n    }\n    if (!empty($ambiguous)) {\n        $pwgen->setAmbiguous($ambiguous);\n    }\n    if (!empty($symbols)) {\n        $pwgen->setSymbols($symbols);\n    }\n\n    // generate and send back\n    return $pwgen->generate();\n}\n\n/*\n* Send sysLOG message\n* @param string $message\n* @param string $host\n*/\nfunction send_syslog($message, $host, $port, $component = \"teampass\")\n{\n    $sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n    $syslog_message = \"<123>\".date('M d H:i:s ').$component.\": \".$message;\n    socket_sendto($sock, $syslog_message, strlen($syslog_message), 0, $host, $port);\n    socket_close($sock);\n}\n\n\n\n/**\n * logEvents()\n *\n * permits to log events into DB\n * @param string $type\n * @param string $label\n * @param string $field_1\n */\nfunction logEvents($type, $label, $who, $login = \"\", $field_1 = null)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    if (empty($who)) {\n        $who = get_client_ip_server();\n    }\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    DB::insert(\n        prefix_table(\"log_system\"),\n        array(\n            'type' => $type,\n            'date' => time(),\n            'label' => $label,\n            'qui' => $who,\n            'field_1' => $field_1 === null ? \"\" : $field_1\n        )\n    );\n    if (isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1) {\n        if ($type == \"user_mngt\") {\n            send_syslog(\n                \"The User \".$login.\" performed the action of \".$label.\" to the user \".$field_1.\" - \".$type,\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                \"teampass\"\n            );\n        } else {\n            send_syslog(\n                \"The User \".$login.\" performed the action of \".$label.\" - \".$type,\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                \"teampass\"\n            );\n        }\n    }\n}\n\n/**\n * @param string $item\n * @param string $action\n */\nfunction logItems($ident, $item, $id_user, $action, $login = \"\", $raison = null, $raison_iv = null, $encryption_type = \"\")\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n    DB::insert(\n        prefix_table(\"log_items\"),\n        array(\n            'id_item' => $ident,\n            'date' => time(),\n            'id_user' => $id_user,\n            'action' => $action,\n            'raison' => $raison,\n            'raison_iv' => $raison_iv,\n            'encryption_type' => $encryption_type\n        )\n    );\n    if (isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1) {\n        send_syslog(\n            \"The Item \".$item.\" was \".$action.\" by \".$login.\" \".$raison,\n            $SETTINGS['syslog_host'],\n            $SETTINGS['syslog_port'],\n            \"teampass\"\n        );\n    }\n}\n\n/*\n* Function to get the client ip address\n */\nfunction get_client_ip_server()\n{\n    if (getenv('HTTP_CLIENT_IP')) {\n            $ipaddress = getenv('HTTP_CLIENT_IP');\n    } elseif (getenv('HTTP_X_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED_FOR');\n    } elseif (getenv('HTTP_X_FORWARDED')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED');\n    } elseif (getenv('HTTP_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_FORWARDED_FOR');\n    } elseif (getenv('HTTP_FORWARDED')) {\n            $ipaddress = getenv('HTTP_FORWARDED');\n    } elseif (getenv('REMOTE_ADDR')) {\n            $ipaddress = getenv('REMOTE_ADDR');\n    } else {\n            $ipaddress = 'UNKNOWN';\n    }\n\n    return $ipaddress;\n}\n\n/**\n * Escape all HTML, JavaScript, and CSS\n *\n * @param string $input The input string\n * @param string $encoding Which character encoding are we using?\n * @return string\n */\nfunction noHTML($input, $encoding = 'UTF-8')\n{\n    return htmlspecialchars($input, ENT_QUOTES | ENT_XHTML, $encoding, false);\n}\n\n/**\n * handleConfigFile()\n *\n * permits to handle the Teampass config file\n * $action accepts \"rebuild\" and \"update\"\n */\nfunction handleConfigFile($action, $field = null, $value = null)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    $tp_config_file = \"../includes/config/tp.config.php\";\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    if (!file_exists($tp_config_file) || $action == \"rebuild\") {\n        // perform a copy\n        if (file_exists($tp_config_file)) {\n            if (!copy($tp_config_file, $tp_config_file.'.'.date(\"Y_m_d_His\", time()))) {\n                return \"ERROR: Could not copy file '\".$tp_config_file.\"'\";\n            }\n        }\n\n        // regenerate\n        $data = array();\n        $data[0] = \"<?php\\n\";\n        $data[1] = \"global \\$SETTINGS;\\n\";\n        $data[2] = \"\\$SETTINGS = array (\\n\";\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type=%s\",\n            \"admin\"\n        );\n        foreach ($rows as $record) {\n            array_push($data, \"    '\".$record['intitule'].\"' => '\".$record['valeur'].\"',\\n\");\n        }\n        array_push($data, \");\");\n        $data = array_unique($data);\n    } elseif ($action == \"update\" && !empty($field)) {\n        $data = file($tp_config_file);\n        $inc = 0;\n        $bFound = false;\n        foreach ($data as $line) {\n            if (stristr($line, \");\")) {\n                break;\n            }\n\n            //\n            if (stristr($line, \"'\".$field.\"' => '\")) {\n                $data[$inc] = \"    '\".$field.\"' => '\".$antiXss->xss_clean($value).\"',\\n\";\n                $bFound = true;\n                break;\n            }\n            $inc++;\n        }\n        if ($bFound === false) {\n            $data[($inc - 1)] = \"    '\".$field.\"' => '\".$antiXss->xss_clean($value).\"',\\n\";\n        }\n    }\n\n    // update file\n    file_put_contents($tp_config_file, implode('', isset($data) ? $data : array()));\n\n    return true;\n}\n\n/*\n** Permits to replace &#92; to permit correct display\n*/\n/**\n * @param string $input\n */\nfunction handleBackslash($input)\n{\n    return str_replace(\"&amp;#92;\", \"&#92;\", $input);\n}\n\n/*\n** Permits to loas settings\n*/\nfunction loadSettings()\n{\n    global $SETTINGS;\n\n    /* LOAD CPASSMAN SETTINGS */\n    if (!isset($SETTINGS['loaded']) || $SETTINGS['loaded'] != 1) {\n        $SETTINGS['duplicate_folder'] = 0; //by default, this is set to 0;\n        $SETTINGS['duplicate_item'] = 0; //by default, this is set to 0;\n        $SETTINGS['number_of_used_pw'] = 5; //by default, this value is set to 5;\n        $settings = array();\n\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type=%s_type OR type=%s_type2\",\n            array(\n                'type' => \"admin\",\n                'type2' => \"settings\"\n            )\n        );\n        foreach ($rows as $record) {\n            if ($record['type'] == 'admin') {\n                $SETTINGS[$record['intitule']] = $record['valeur'];\n            } else {\n                $settings[$record['intitule']] = $record['valeur'];\n            }\n        }\n        $SETTINGS['loaded'] = 1;\n        $SETTINGS['default_session_expiration_time'] = 5;\n    }\n}\n\n/*\n** check if folder has custom fields.\n** Ensure that target one also has same custom fields\n*/\nfunction checkCFconsistency($source_id, $target_id)\n{\n    $source_cf = array();\n    $rows = DB::QUERY(\n        \"SELECT id_category\n        FROM \".prefix_table(\"categories_folders\").\"\n        WHERE id_folder = %i\",\n        $source_id\n    );\n    foreach ($rows as $record) {\n        array_push($source_cf, $record['id_category']);\n    }\n\n    $target_cf = array();\n    $rows = DB::QUERY(\n        \"SELECT id_category\n        FROM \".prefix_table(\"categories_folders\").\"\n        WHERE id_folder = %i\",\n        $target_id\n    );\n    foreach ($rows as $record) {\n        array_push($target_cf, $record['id_category']);\n    }\n\n    $cf_diff = array_diff($source_cf, $target_cf);\n    if (count($cf_diff) > 0) {\n        return false;\n    }\n\n    return true;\n}\n\n/*\n*\n*/\nfunction encrypt_or_decrypt_file($filename_to_rework, $filename_status)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    // Include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    // Get file info in DB\n    $fileInfo = DB::queryfirstrow(\n        \"SELECT id FROM \".prefix_table(\"files\").\" WHERE file = %s\",\n        filter_var($filename_to_rework, FILTER_SANITIZE_STRING)\n    );\n    if (empty($fileInfo['id']) === false) {\n        // Load PhpEncryption library\n        $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Crypto.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Encoding.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'DerivedKeys.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Key.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyOrPassword.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'File.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'RuntimeTests.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyProtectedByPassword.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Core.php';\n\n        // Get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        if (isset($SETTINGS['enable_attachment_encryption'])\n            && $SETTINGS['enable_attachment_encryption'] === \"1\" &&\n            isset($filename_status)\n            && ($filename_status === \"clear\"\n                || $filename_status === \"0\")\n        ) {\n            // File needs to be encrypted\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework)) {\n                // Make a copy of file\n                if (!copy(\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\"\n                )) {\n                    exit;\n                } else {\n                    // Do a bck\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".bck\"\n                    );\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework);\n\n                // Now encrypt the file with saltkey\n                $err = '';\n                try {\n                    \\Defuse\\Crypto\\File::encryptFile(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\",\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                    $err = $ex;\n                } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                    $err = $ex;\n                }\n                if (empty($err) === false) {\n                    echo $err;\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\");\n\n                // update table\n                DB::update(\n                    prefix_table('files'),\n                    array(\n                        'status' => 'encrypted'\n                        ),\n                    \"id = %i\",\n                    $fileInfo['id']\n                );\n            }\n        } elseif (isset($SETTINGS['enable_attachment_encryption'])\n            && $SETTINGS['enable_attachment_encryption'] === \"0\"\n            && isset($filename_status)\n            && $filename_status === \"encrypted\"\n        ) {\n            // file needs to be decrypted\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework)) {\n                // make a copy of file\n                if (!copy(\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\"\n                )) {\n                    exit;\n                } else {\n                    // do a bck\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".bck\"\n                    );\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework);\n\n                // Now encrypt the file with saltkey\n                $err = '';\n                try {\n                    \\Defuse\\Crypto\\File::decryptFile(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\",\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                    $err = $ex;\n                } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                    $err = $ex;\n                }\n                if (empty($err) === false) {\n                    echo $err;\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\");\n\n                // update table\n                DB::update(\n                    prefix_table('files'),\n                    array(\n                        'status' => 'clear'\n                        ),\n                    \"id = %i\",\n                    $fileInfo['id']\n                );\n            }\n        }\n    }\n\n    // Exit\n    return false;\n}\n\n/**\n * Will encrypte/decrypt a fil eusing Defuse\n * @param  string $type        can be either encrypt or decrypt\n * @param  string $source_file path to source file\n * @param  string $target_file path to target file\n * @return string              'true' is success or error message\n */\nfunction prepareFileWithDefuse($type, $source_file, $target_file, $password = '')\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    // Protect against bad inputs\n    if (is_array($source_file) ||is_array($target_file)) {\n        return 'error_cannot_be_array';\n    }\n\n    // Sanitize\n    $source_file = $antiXss->xss_clean($source_file);\n    $target_file = $antiXss->xss_clean($target_file);\n\n    // load PhpEncryption library\n    $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Crypto.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Encoding.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'DerivedKeys.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Key.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyOrPassword.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'File.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'RuntimeTests.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyProtectedByPassword.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Core.php';\n\n    if (empty($password) === true) {\n    /*\n    File encryption/decryption is done with the SALTKEY\n     */\n\n        // get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        // Now perform action on the file\n        $err = '';\n        if ($type === 'decrypt') {\n            try {\n                \\Defuse\\Crypto\\File::decryptFile(\n                    $source_file,\n                    $target_file,\n                    \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"decryption_not_possible\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        } elseif ($type === 'encrypt') {\n            try {\n                \\Defuse\\Crypto\\File::encryptFile(\n                    $source_file,\n                    $target_file,\n                    \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"encryption_not_possible\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        }\n    } else {\n    /*\n    File encryption/decryption is done with special password and not the SALTKEY\n     */\n\n        $err = '';\n        if ($type === 'decrypt') {\n            try {\n                \\Defuse\\Crypto\\File::decryptFileWithPassword(\n                    $source_file,\n                    $target_file,\n                    $password\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"wrong_key\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        } elseif ($type === 'encrypt') {\n            try {\n                \\Defuse\\Crypto\\File::encryptFileWithPassword(\n                    $source_file,\n                    $target_file,\n                    $password\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"wrong_key\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        }\n    }\n\n    // return error\n    if (empty($err) === false) {\n        return $err;\n    } else {\n        return true;\n    }\n}\n\n/*\n* NOT TO BE USED\n*/\nfunction debugTeampass($text)\n{\n    $debugFile = fopen('D:/wamp64/www/TeamPass/debug.txt', 'r+');\n    fputs($debugFile, $text);\n    fclose($debugFile);\n}\n\n\n/**\n * DELETE the file with expected command depending on server type\n * @param  string $file Path to file\n * @return              Nothing\n */\nfunction fileDelete($file)\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    $file = $antiXss->xss_clean($file);\n    if (is_file($file)) {\n        unlink($file);\n    }\n}\n\n/*\n* Permits to extract the file extension\n*/\nfunction getFileExtension($file)\n{\n    if (strpos($file, '.') === false) {\n        return $file;\n    }\n\n    return substr($file, strrpos($file, '.') + 1);\n}\n\n/**\n * array_map\n * @param  [type] $func [description]\n * @param  [type] $arr  [description]\n * @return [type]       [description]\n */\nfunction array_map_r($func, $arr)\n{\n    $newArr = array();\n\n    foreach ($arr as $key => $value) {\n        $newArr[ $key ] = (is_array($value) ? array_map_r($func, $value) : ( is_array($func) ? call_user_func_array($func, $value) : $func( $value )));\n    }\n\n    return $newArr;\n}\n\n/**\n * Permits to clean and sanitize text to be displayed\n * @param  string $text text to clean\n * @param  string $type what clean to perform\n * @return string       text cleaned up\n */\nfunction cleanText($string, $type = \"\")\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    if ($type === \"css\") {\n        // Escape text and quotes in UTF8 format\n        return htmlentities($string, ENT_QUOTES | ENT_HTML5, 'UTF-8');\n    } elseif ($type === \"html\" || empty($type)) {\n        // Html cleaner\n        return $antiXss->xss_clean($string);\n    }\n}\n\n/**\n * Performs chmod operation on subfolders\n * @param  string  $dir             Parent folder\n * @param  integer $dirPermissions  New permission on folders\n * @param  integer $filePermissions New permission on files\n * @return boolean                  Success/Failure\n */\nfunction chmodRecursive($dir, $dirPermissions, $filePermissions)\n{\n    $pointer_dir = opendir($dir);\n    $res = true;\n    while ($file = readdir($pointer_dir)) {\n        if (($file == \".\") || ($file == \"..\")) {\n            continue;\n        }\n\n        $fullPath = $dir.\"/\".$file;\n\n        if (is_dir($fullPath)) {\n            if ($res = @chmod($fullPath, $dirPermissions)) {\n                $res = @chmodRecursive($fullPath, $dirPermissions, $filePermissions);\n            }\n        } else {\n            $res = chmod($fullPath, $filePermissions);\n        }\n        if (!$res) {\n            closedir($pointer_dir);\n            return false;\n        }\n    }\n    closedir($pointer_dir);\n    if (is_dir($dir) && $res) {\n        $res = @chmod($dir, $dirPermissions);\n    }\n\n    return $res;\n}\n"], "fixing_code": ["<?php\n/**\n *\n * @file          index.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nheader(\"X-XSS-Protection: 1; mode=block\");\nheader(\"X-Frame-Option: SameOrigin\");\n\n// **PREVENTING SESSION HIJACKING**\n// Prevents javascript XSS attacks aimed to steal the session ID\nini_set('session.cookie_httponly', 1);\n\n// **PREVENTING SESSION FIXATION**\n// Session ID cannot be passed through URLs\nini_set('session.use_only_cookies', 1);\n\n// Uses a secure connection (HTTPS) if possible\nini_set('session.cookie_secure', 0);\n\n// Before we start processing, we should abort no install is present\nif (!file_exists('includes/config/settings.php')) {\n    // This should never happen, but in case it does\n    // this means if headers are sent, redirect will fallback to JS\n    if (headers_sent()) {\n        echo '<script language=\"javascript\" type=\"text/javascript\">document.location.replace(\"install/install.php\");</script>';\n    } else {\n        header('Location: install/install.php');\n    }\n    // Now either way, we should stop processing further\n    exit();\n}\n\n// initialise CSRFGuard library\nrequire_once('./includes/libraries/csrfp/libs/csrf/csrfprotector.php');\ncsrfProtector::init();\n//session_destroy();\nsession_id();\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// Include files\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n\n// initialize session\n$_SESSION['CPM'] = 1;\nif (isset($SETTINGS['cpassman_dir']) === false || $SETTINGS['cpassman_dir'] === \"\") {\n    $SETTINGS['cpassman_dir'] = \".\";\n    $SETTINGS['cpassman_url'] = $superGlobal->get(\"REQUEST_URI\", \"SERVER\");\n}\n\n// Include files\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n\n\n// Open MYSQL database connection\nrequire_once './includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n\n// Load Core library\nrequire_once $SETTINGS['cpassman_dir'].'/sources/core.php';\n\n\n// Prepare POST variables\n$post_language =        filter_input(INPUT_POST, 'language', FILTER_SANITIZE_STRING);\n$post_sig_response =    filter_input(INPUT_POST, 'sig_response', FILTER_SANITIZE_STRING);\n$post_duo_login =       filter_input(INPUT_POST, 'duo_login', FILTER_SANITIZE_STRING);\n$post_duo_data =        filter_input(INPUT_POST, 'duo_data', FILTER_SANITIZE_STRING);\n\n// Prepare superGlobal variables\n$session_user_language =        $superGlobal->get(\"user_language\", \"SESSION\");\n$session_user_id =              $superGlobal->get(\"user_id\", \"SESSION\");\n$session_user_flag =            $superGlobal->get(\"user_language_flag\", \"SESSION\");\n$session_user_admin =           $superGlobal->get(\"user_admin\", \"SESSION\");\n$session_user_avatar_thumb =    $superGlobal->get(\"user_avatar_thumb\", \"SESSION\");\n$session_name =                 $superGlobal->get(\"name\", \"SESSION\");\n$session_lastname =             $superGlobal->get(\"lastname\", \"SESSION\");\n$session_user_manager =         $superGlobal->get(\"user_manager\", \"SESSION\");\n$session_user_read_only =       $superGlobal->get(\"user_read_only\", \"SESSION\");\n$session_is_admin =             $superGlobal->get(\"is_admin\", \"SESSION\");\n$session_login =                $superGlobal->get(\"login\", \"SESSION\");\n$session_validite_pw =          $superGlobal->get(\"validite_pw\", \"SESSION\");\n$session_nb_folders =           $superGlobal->get(\"nb_folders\", \"SESSION\");\n$session_nb_roles =             $superGlobal->get(\"nb_roles\", \"SESSION\");\n$session_autoriser =            $superGlobal->get(\"autoriser\", \"SESSION\");\n$session_hide_maintenance =     $superGlobal->get(\"hide_maintenance\", \"SESSION\");\n$session_initial_url =          $superGlobal->get(\"initial_url\", \"SESSION\");\n$server_request_uri =           $superGlobal->get(\"REQUEST_URI\", \"SERVER\");\n\n\n/* DEFINE WHAT LANGUAGE TO USE */\nif (isset($_GET['language']) === true) {\n    // case of user has change language in the login page\n    $dataLanguage = DB::queryFirstRow(\n        \"SELECT flag, name\n        FROM \".prefix_table(\"languages\").\"\n        WHERE name = %s\",\n        filter_var($_GET['language'], FILTER_SANITIZE_STRING)\n    );\n    $superGlobal->put(\"user_language\", $dataLanguage['name'], \"SESSION\");\n    $superGlobal->put(\"user_language_flag\", $dataLanguage['flag'], \"SESSION\");\n} elseif ($session_user_id === null && null === $post_language && $session_user_language === null) {\n    //get default language\n    $dataLanguage = DB::queryFirstRow(\n        \"SELECT m.valeur AS valeur, l.flag AS flag\n        FROM \".prefix_table(\"misc\").\" AS m\n        INNER JOIN \".prefix_table(\"languages\").\" AS l ON (m.valeur = l.name)\n        WHERE m.type=%s_type AND m.intitule=%s_intitule\",\n        array(\n            'type' => \"admin\",\n            'intitule' => \"default_language\"\n        )\n    );\n    if (empty($dataLanguage['valeur'])) {\n        $superGlobal->put(\"user_language\", \"english\", \"SESSION\");\n        $superGlobal->put(\"user_language_flag\", \"us.png\", \"SESSION\");\n        $session_user_language = \"english\";\n    } else {\n        $superGlobal->put(\"user_language\", $dataLanguage['valeur'], \"SESSION\");\n        $superGlobal->put(\"user_language_flag\", $dataLanguage['flag'], \"SESSION\");\n        $session_user_language = $dataLanguage['valeur'];\n    }\n} elseif (isset($SETTINGS['default_language']) === true && $session_user_language === null) {\n    $superGlobal->put(\"user_language\", $SETTINGS['default_language'], \"SESSION\");\n    $session_user_language = $SETTINGS['default_language'];\n} elseif (null !== $post_language) {\n    $superGlobal->put(\"user_language\", $post_language, \"SESSION\");\n    $session_user_language = $post_language;\n} elseif ($session_user_language === null || empty($session_user_language) === true) {\n    if (null !== $post_language) {\n        $superGlobal->put(\"user_language\", $post_language, \"SESSION\");\n        $session_user_language = $post_language;\n    } elseif ($session_user_language !== null) {\n        $superGlobal->put(\"user_language\", $SETTINGS['default_language'], \"SESSION\");\n        $session_user_language = $SETTINGS['default_language'];\n    }\n} elseif ($session_user_language === '0') {\n    $superGlobal->put(\"user_language\", $SETTINGS['default_language'], \"SESSION\");\n    $session_user_language = $SETTINGS['default_language'];\n}\n\nif (isset($SETTINGS['cpassman_dir']) === false || $SETTINGS['cpassman_dir'] === \"\") {\n    $SETTINGS['cpassman_dir'] = \".\";\n    $SETTINGS['cpassman_url'] = (string) $server_request_uri;\n}\n\n// Load user languages files\nif (in_array($session_user_language, $languagesList) === true) {\n    if (file_exists($SETTINGS['cpassman_dir'].'/includes/language/'.$session_user_language.'.php') === true) {\n        require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$session_user_language.'.php';\n    }\n} else {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n    include $SETTINGS['cpassman_dir'].'/error.php';\n}\n\n// load 2FA Google\nif (isset($SETTINGS['google_authentication']) === true && $SETTINGS['google_authentication'] === \"1\") {\n    include_once($SETTINGS['cpassman_dir'].\"/includes/libraries/Authentication/TwoFactorAuth/TwoFactorAuth.php\");\n}\n\n// Load links, css and javascripts\nif (isset($_SESSION['CPM']) === true && isset($SETTINGS['cpassman_dir']) === true) {\n    require_once $SETTINGS['cpassman_dir'].'/load.php';\n}\n\n?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" />\n<title>Teampass</title>\n<script type=\"text/javascript\">\n    //<![CDATA[\n    if (window.location.href.indexOf(\"page=\") == -1 && (window.location.href.indexOf(\"otv=\") == -1 && window.location.href.indexOf(\"action=\") == -1)) {\n        if (window.location.href.indexOf(\"session_over=true\") == -1) {\n            //location.replace(\"./index.php?page=items\");\n        } else {\n            location.replace(\"./logout.php\");\n        }\n    }\n    //]]>\n</script>\n<?php\n\n// load HEADERS\nif (isset($_SESSION['CPM'])) {\n    echo $htmlHeaders;\n}\n?>\n    </head>\n\n<body>\n    <?php\n\n/* HEADER */\n    echo '\n    <div id=\"top\">\n        <div id=\"logo\"><img src=\"includes/images/canevas/logo.png\" alt=\"\" /></div>';\n    // Display menu\n    if (empty($session_login) === false) {\n        // welcome message\n        echo '\n        <div style=\"float:right; margin:-10px 5px 0 0; color:#FFF;\">'\n            .$LANG['index_welcome'].'&nbsp;<b>'.$session_name.'&nbsp;'.$session_lastname\n            .'&nbsp;['.$session_login.']</b>&nbsp;-&nbsp;'\n            , $session_user_admin === '1' ? $LANG['god'] :\n                ($session_user_manager === '1' ? $LANG['gestionnaire'] :\n                    ($session_user_read_only === '1' ? $LANG['read_only_account'] : $LANG['user'])\n                ), '&nbsp;'.strtolower($LANG['index_login']).'</div>';\n\n        echo '\n        <div id=\"menu_top\">\n            <div style=\"margin-left:20px; margin-top:2px;width:710px;\" id=\"main_menu\">';\n        if ($session_user_admin === '0' || $SETTINGS_EXT['admin_full_right'] == 0) {\n            echo '\n                <a class=\"btn btn-default\" href=\"#\"',\n                ($session_nb_folders !== null && intval($session_nb_folders) === 0)\n                || ($session_nb_roles !== null && intval($session_nb_roles) === 0) ? '' : ' onclick=\"MenuAction(\\'items\\')\"',\n                '>\n                    <i class=\"fa fa-key fa-2x tip\" title=\"'.$LANG['pw'].'\"></i>\n                </a>\n\n                <a class=\"btn btn-default\" href=\"#\"',\n                ($session_nb_folders !== null && intval($session_nb_folders) === 0)\n                || ($session_nb_roles !== null && intval($session_nb_roles) === 0) ? '' : ' onclick=\"MenuAction(\\'find\\')\"',\n                '>\n                    <i class=\"fa fa-binoculars fa-2x tip\" title=\"'.$LANG['find'].'\"></i>\n                </a>';\n        }\n\n        // Favourites menu\n        if (isset($SETTINGS['enable_favourites'])\n            && $SETTINGS['enable_favourites'] == 1\n            &&\n            ($session_user_admin === '0' || ($session_user_admin === '1' && $SETTINGS_EXT['admin_full_right'] === false))\n        ) {\n            echo '\n                    <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'favourites\\')\">\n                        <i class=\"fa fa-star fa-2x tip\" title=\"'.$LANG['my_favourites'].'\"></i>\n                    </a>';\n        }\n        // KB menu\n        if (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1) {\n            echo '\n                    <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'kb\\')\">\n                        <i class=\"fa fa-map-signs fa-2x tip\" title=\"'.$LANG['kb_menu'].'\"></i>\n                    </a>';\n        }\n        echo '\n        <span id=\"menu_suggestion_position\">';\n        // SUGGESTION menu\n        if (isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] === '1'\n            && ($session_user_read_only === '1' || $session_user_admin === '1' || $session_user_manager === '1')\n        ) {\n            echo '\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'suggestion\\')\">\n                    <i class=\"fa fa-lightbulb-o fa-2x tip\" id=\"menu_icon_suggestions\" title=\"'.$LANG['suggestion_menu'].'\"></i>\n                </a>';\n        }\n        echo '\n        </span>';\n        // Admin menu\n        if ($session_user_admin === '1') {\n            echo '\n                    &nbsp;\n                    <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_main\\')\">\n                        <i class=\"fa fa-info fa-2x tip\" title=\"'.$LANG['admin_main'].'\"></i>\n                    </a>\n                    <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_settings\\')\">\n                        <i class=\"fa fa-wrench fa-2x tip\" title=\"'.$LANG['admin_settings'].'\"></i>\n                    </a>';\n        }\n\n        if ($session_user_admin === '1' || $session_user_manager === '1') {\n            echo '\n                &nbsp;\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_folders\\')\">\n                    <i class=\"fa fa-folder-open fa-2x tip\" title=\"'.$LANG['admin_groups'].'\"></i>\n                </a>\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_roles\\')\">\n                    <i class=\"fa fa-graduation-cap fa-2x tip\" title=\"'.$LANG['admin_functions'].'\"></i>\n                </a>\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_users\\')\">\n                    <i class=\"fa fa-users fa-2x tip\" title=\"'.$LANG['admin_users'].'\"></i>\n                </a>\n                <a class=\"btn btn-default\" href=\"#\" onclick=\"MenuAction(\\'manage_views\\')\">\n                    <i class=\"fa fa-cubes fa-2x tip\" title=\"'.$LANG['admin_views'].'\"></i>\n                </a>';\n        }\n\n        echo '\n                <div style=\"float:right;\">\n                    <ul class=\"menu\" style=\"\">\n                        <li class=\"\" style=\"padding:4px;width:40px; text-align:center;\"><i class=\"fa fa-dashboard fa-fw\"></i>&nbsp;\n                            <ul class=\"menu_200\" style=\"text-align:left;\">',\n                                ($session_user_admin === '1' && $SETTINGS_EXT['admin_full_right'] === true) ? '' : isset($SETTINGS['enable_pf_feature']) === true && $SETTINGS['enable_pf_feature'] == 1 ? '\n                                <li onclick=\"$(\\'#div_set_personal_saltkey\\').dialog(\\'open\\')\">\n                                    <i class=\"fa fa-key fa-fw\"></i> &nbsp;'.$LANG['home_personal_saltkey_button'].'\n                                </li>' : '', '\n                                <li onclick=\"$(\\'#div_increase_session_time\\').dialog(\\'open\\')\">\n                                    <i class=\"fa fa-clock-o fa-fw\"></i> &nbsp;'.$LANG['index_add_one_hour'].'\n                                </li>\n                                <li onclick=\"loadProfileDialog()\">\n                                    <i class=\"fa fa-user fa-fw\"></i> &nbsp;'.$LANG['my_profile'].'\n                                </li>\n                                <li onclick=\"MenuAction(\\'deconnexion\\', \\''.$session_user_id.'\\')\">\n                                    <i class=\"fa fa-sign-out fa-fw\"></i> &nbsp;'.$LANG['disconnect'].'\n                                </li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>';\n\n        if ($session_user_admin !== '1' || ($session_user_admin === '1' && $SETTINGS_EXT['admin_full_right'] === false)) {\n            echo '\n                <div style=\"float:right; margin-right:10px;\">\n                    <ul class=\"menu\" id=\"menu_last_seen_items\">\n                        <li class=\"\" style=\"padding:4px;width:40px; text-align:center;\"><i class=\"fa fa-map fa-fw\"></i>&nbsp;&nbsp;\n                            <ul class=\"menu_200\" id=\"last_seen_items_list\" style=\"text-align:left;\">\n                                <li>'.$LANG['please_wait'].'</li>\n                            </ul>\n                        </li>\n                    </ul>\n                </div>';\n        }\n\n        // show avatar\n        if ($session_user_avatar_thumb !== null && empty($session_user_avatar_thumb) === false) {\n            if (file_exists('includes/avatars/'.$session_user_avatar_thumb)) {\n                $avatar = $SETTINGS['cpassman_url'].'/includes/avatars/'.$session_user_avatar_thumb;\n            } else {\n                $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n            }\n        } else {\n            $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n        }\n        echo '\n                <div style=\"float:right; margin-right:10px;\">\n                    <img src=\"'.$avatar.'\" style=\"border-radius:10px; height:28px; cursor:pointer;\" onclick=\"loadProfileDialog()\" alt=\"photo\" id=\"user_avatar_thumb\" />\n                </div>';\n\n        echo '\n            </div>';\n\n        echo '\n        </div>';\n    }\n\n    echo '\n    </div>';\n\n    echo '\n<div id=\"main_info_box\" style=\"display:none; z-index:99999; position:absolute; width:400px; height:40px;\" class=\"ui-widget ui-state-active ui-color\">\n    <div id=\"main_info_box_text\" style=\"text-align:center;margin-top:10px;\"></div>\n</div>';\n\n/* MAIN PAGE */\n    echo '\n        <input type=\"hidden\" id=\"temps_restant\" value=\"', isset($_SESSION['fin_session']) ? $_SESSION['fin_session'] : '', '\" />\n        <input type=\"hidden\" name=\"language\" id=\"language\" value=\"\" />\n        <input type=\"hidden\" name=\"user_pw_complexity\" id=\"user_pw_complexity\" value=\"', isset($_SESSION['user_pw_complexity']) ? $_SESSION['user_pw_complexity'] : '', '\" />\n        <input type=\"hidden\" name=\"user_session\" id=\"user_session\" value=\"\"/>\n        <input type=\"hidden\" name=\"encryptClientServer\" id=\"encryptClientServer\" value=\"', isset($SETTINGS['encryptClientServer']) ? $SETTINGS['encryptClientServer'] : '1', '\" />\n        <input type=\"hidden\" name=\"please_login\" id=\"please_login\" value=\"\" />\n        <input type=\"hidden\" name=\"disabled_action_on_going\" id=\"disabled_action_on_going\" value=\"\" />\n        <input type=\"hidden\" id=\"duo_sig_response\" value=\"', null !== $post_sig_response ? intval($post_sig_response) : '', '\" />';\n\n// SENDING STATISTICS?\n    if (isset($SETTINGS['send_stats']) && $SETTINGS['send_stats'] === \"1\"\n        && (!isset($_SESSION['temporary']['send_stats_done']) || $_SESSION['temporary']['send_stats_done'] !== \"1\")\n    ) {\n        echo '\n            <input type=\"hidden\" name=\"send_statistics\" id=\"send_statistics\" value=\"1\" />';\n    } else {\n        echo '\n        <input type=\"hidden\" name=\"send_statistics\" id=\"send_statistics\" value=\"0\" />';\n    }\n\n    echo '\n    <div id=\"', (isset($_GET['page']) && filter_var($_GET['page'], FILTER_SANITIZE_STRING) === \"items\" && $session_user_id !== null) ? \"main_simple\" : \"main\", '\">';\n// MESSAGE BOX\n    echo '\n            <div style=\"\" class=\"div_center\">\n                <div id=\"message_box\" style=\"display:none;width:200px;padding:5px;text-align:center; z-index:999999;\" class=\"ui-widget-content ui-state-error ui-corner-all\"></div>\n            </div>';\n    // Main page\n    if ($session_autoriser !== null && $session_autoriser === true) {\n        // Show menu\n        echo '\n            <form method=\"post\" name=\"main_form\" action=\"\">\n                <input type=\"hidden\" name=\"menu_action\" id=\"menu_action\" value=\"\" />\n                <input type=\"hidden\" name=\"changer_pw\" id=\"changer_pw\" value=\"\" />\n                <input type=\"hidden\" name=\"form_user_id\" id=\"form_user_id\" value=\"', $session_user_id !== null ? $session_user_id : '', '\" />\n                <input type=\"hidden\" name=\"is_admin\" id=\"is_admin\" value=\"', $session_is_admin !== null ? $session_is_admin : '', '\" />\n                <input type=\"hidden\" name=\"personal_saltkey_set\" id=\"personal_saltkey_set\" value=\"', isset($_SESSION['user_settings']['clear_psk']) ? true : false, '\" />\n            </form>';\n    }\n// ---------\n// Display a help to admin\n    $errorAdmin = \"\";\n\n// error nb folders\n    if ($session_nb_folders !== null && intval($session_nb_folders) === 0) {\n        $errorAdmin = '<span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_no_folders'].'<br />';\n    }\n// error nb roles\n    if ($session_nb_roles !== null && intval($session_nb_roles) === 0) {\n        if (empty($errorAdmin)) {\n            $errorAdmin = '<span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_no_roles'];\n        } else {\n            $errorAdmin .= '<br /><span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_no_roles'];\n        }\n    }\n\n    if ($session_validite_pw !== null && empty($session_validite_pw) === false) {\n        // error cpassman dir\n        if (isset($SETTINGS['cpassman_dir']) && empty($SETTINGS['cpassman_dir']) || !isset($SETTINGS['cpassman_dir'])) {\n            if (empty($errorAdmin)) {\n                $errorAdmin = '<span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_cpassman_dir'];\n            } else {\n                $errorAdmin .= '<br /><span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_cpassman_dir'];\n            }\n        }\n        // error cpassman url\n        if ($session_validite_pw !== null && (isset($SETTINGS['cpassman_url']) && empty($SETTINGS['cpassman_url']) || !isset($SETTINGS['cpassman_url']))) {\n            if (empty($errorAdmin)) {\n                $errorAdmin = '<span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_cpassman_url'];\n            } else {\n                $errorAdmin .= '<br /><span class=\"ui-icon ui-icon-lightbulb\" style=\"float: left; margin-right: .3em;\">&nbsp;</span>'.$LANG['error_cpassman_url'];\n            }\n        }\n    }\n// Display help\n    if (!empty($errorAdmin)) {\n        echo '\n                <div style=\"margin:10px;padding:10px;\" class=\"ui-state-error ui-corner-all\">\n                '.$errorAdmin.'\n                </div>';\n    }\n// -----------\n// Display Maintenance mode information\n    if (isset($SETTINGS['maintenance_mode']) === true && $SETTINGS['maintenance_mode'] === '1'\n            && $session_user_admin !== null && $session_user_admin === '1'\n        ) {\n        echo '\n            <div style=\"text-align:center;margin-bottom:5px;padding:10px;\" class=\"ui-state-highlight ui-corner-all\">\n                <b>'.$LANG['index_maintenance_mode_admin'].'</b>\n            </div>';\n    }\n// Display UPDATE NEEDED information\n    if (isset($SETTINGS['update_needed']) && $SETTINGS['update_needed'] === true\n            && $session_user_admin !== null && $session_user_admin === '1'\n            && (($session_hide_maintenance !== null && $session_hide_maintenance === '0')\n            || $session_hide_maintenance === null)\n        ) {\n        echo '\n            <div style=\"text-align:center;margin-bottom:5px;padding:10px;\"\n                class=\"ui-state-highlight ui-corner-all\" id=\"div_maintenance\">\n                <b>'.$LANG['update_needed_mode_admin'].'</b>\n                <span style=\"float:right;cursor:pointer;\">\n                    <span class=\"fa fa-close mi-red\" onclick=\"toggleDiv(\\'div_maintenance\\')\"></span>\n                </span>\n            </div>';\n    }\n\n// display an item in the context of OTV link\n    if (($session_validite_pw === null || empty($session_validite_pw) === true || empty($session_user_id) === true) &&\n        isset($_GET['otv']) && filter_var($_GET['otv'], FILTER_SANITIZE_STRING) === 'true'\n    ) {\n        // case where one-shot viewer\n        if (isset($_GET['code']) && !empty($_GET['code'])\n            && isset($_GET['stamp']) && !empty($_GET['stamp'])\n        ) {\n            include 'otv.php';\n        } else {\n            $_SESSION['error']['code'] = ERR_VALID_SESSION;\n            $superGlobal->put(\n                \"initial_url\",\n                filter_var(\n                    substr($server_request_uri, strpos($server_request_uri, \"index.php?\")),\n                    FILTER_SANITIZE_URL\n                ),\n                \"SESSION\"\n            );\n            include $SETTINGS['cpassman_dir'].'/error.php';\n        }\n    // Ask the user to change his password\n    } elseif (($session_validite_pw === null || $session_validite_pw === false)\n        && empty($session_user_id) === false\n    ) {\n        //Check if password is valid\n        echo '\n        <div style=\"margin:auto; padding:20px; width:500px;\" class=\"ui-state-focus ui-corner-all\">\n            <h3>'.$LANG['index_change_pw'].'</h3>\n            <div style=\"height:20px;text-align:center;margin:2px;display:none;\" id=\"change_pwd_error\" class=\"\"></div>\n            <div style=\"text-align:center;margin:5px;padding:3px;\" id=\"change_pwd_complexPw\" class=\"ui-widget ui-state-active ui-corner-all\">'.\n            $LANG['complex_asked'].' : '.$SETTINGS_EXT['pwComplexity'][$_SESSION['user_pw_complexity']][1].\n            '</div>\n            <div id=\"pw_strength\" style=\"margin:0 0 10px 140px;\"></div>\n            <table>\n                <tr>\n                    <td>'.$LANG['index_new_pw'].' :</td><td><input type=\"password\" size=\"15\" name=\"new_pw\" id=\"new_pw\"/></td>\n                </tr>\n                <tr><td>'.$LANG['index_change_pw_confirmation'].' :</td><td><input type=\"password\" size=\"15\" name=\"new_pw2\" id=\"new_pw2\" onkeypress=\"if (event.keyCode == 13) ChangeMyPass();\" /></td></tr>\n            </table>\n            <input type=\"hidden\" id=\"pw_strength_value\" />\n            <div style=\"width:420px; text-align:center; margin:15px 0 10px 0;\">\n                <input type=\"button\" onClick=\"ChangeMyPass()\" onkeypress=\"if (event.keyCode == 13) ChangeMyPass();\" class=\"ui-state-default ui-corner-all\" style=\"padding:4px;width:150px;margin:10px 0 0 80px;\" value=\"'.$LANG['index_change_pw_button'].'\" />\n            </div>\n        </div>\n        <script type=\"text/javascript\">\n            $(\"#new_pw\").focus();\n        </script>';\n    // Display pages\n    } elseif ($session_validite_pw !== null\n        && $session_validite_pw === true\n        && empty($_GET['page']) === false\n        && empty($session_user_id) === false\n    ) {\n        if (!extension_loaded('mcrypt')) {\n            $_SESSION['error']['code'] = ERR_NO_MCRYPT;\n            include $SETTINGS['cpassman_dir'].'/error.php';\n        } elseif ($session_initial_url !== null && empty($session_initial_url) === false) {\n            include $session_initial_url;\n        } elseif ($_GET['page'] == \"items\") {\n            // SHow page with Items\n            if (($session_user_admin !== '1')\n                ||\n                ($session_user_admin === '1' && $SETTINGS_EXT['admin_full_right'] === false)\n            ) {\n                include 'items.php';\n            } else {\n                $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                include $SETTINGS['cpassman_dir'].'/error.php';\n            }\n        } elseif ($_GET['page'] == \"find\") {\n            // Show page for items findind\n            include 'find.php';\n        } elseif ($_GET['page'] == \"favourites\") {\n            // Show page for user favourites\n            include 'favorites.php';\n        } elseif ($_GET['page'] == \"kb\") {\n            // Show page KB\n            if (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] == 1) {\n                include 'kb.php';\n            } else {\n                $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                include $SETTINGS['cpassman_dir'].'/error.php';\n            }\n        } elseif ($_GET['page'] == \"suggestion\") {\n            // Show page KB\n            if (isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1) {\n                include 'suggestion.php';\n            } else {\n                $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                include $SETTINGS['cpassman_dir'].'/error.php';\n            }\n        } elseif (in_array($_GET['page'], array_keys($mngPages))) {\n            // Define if user is allowed to see management pages\n            if ($session_user_admin === '1') {\n                include($mngPages[$_GET['page']]);\n            } elseif ($session_user_manager === '1') {\n                if (($_GET['page'] != \"manage_main\" && $_GET['page'] != \"manage_settings\")) {\n                    include($mngPages[$_GET['page']]);\n                } else {\n                    $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                    include $SETTINGS['cpassman_dir'].'/error.php';\n                }\n            } else {\n                $_SESSION['error']['code'] = ERR_NOT_ALLOWED; //not allowed page\n                include $SETTINGS['cpassman_dir'].'/error.php';\n            }\n        } else {\n            $_SESSION['error']['code'] = ERR_NOT_EXIST; //page doesn't exist\n            include $SETTINGS['cpassman_dir'].'/error.php';\n        }\n    // Case of password recovery\n    } elseif (isset($_GET['action']) && $_GET['action'] === \"password_recovery\") {\n        // Case where user has asked new PW\n        echo '\n            <div style=\"width:400px;margin:50px auto 50px auto;padding:25px;\" class=\"ui-state-highlight ui-corner-all\">\n                <div style=\"text-align:center;font-weight:bold;margin-bottom:20px;\">\n                    '.$LANG['pw_recovery_asked'].'\n                </div>\n                <div id=\"generate_new_pw_error\" style=\"color:red;display:none;text-align:center;margin:5px;\"></div>\n                <div style=\"margin-bottom:3px;\">\n                    '.$LANG['pw_recovery_info'].'\n                </div>\n                <div style=\"margin:15px; text-align:center;\">\n                    <input type=\"button\" id=\"but_generate_new_password\" onclick=\"GenerateNewPassword(\\''.htmlspecialchars($_GET['key'], ENT_QUOTES).'\\',\\''.htmlspecialchars($_GET['login'], ENT_QUOTES).'\\')\" style=\"padding:3px;cursor:pointer;\" class=\"ui-state-default ui-corner-all\" value=\"'.$LANG['pw_recovery_button'].'\" />\n                    <br /><br />\n                    <div id=\"ajax_loader_send_mail\" style=\"display:none; margin: 20px;\"><span class=\"fa fa-cog fa-spin fa-2x\"></span></div>\n                </div>\n                <div style=\"margin-top:30px; text-align:center;\">\n                    <a href=\"index.php\" class=\"tip\" title=\"'.$LANG['home'].'\"><span class=\"fa fa-home fa-lg\"></span></a>\n                </div>\n            </div>';\n    } elseif (empty($session_user_id) === false && $session_user_id !== null) {\n        // Page doesn't exist\n        $_SESSION['error']['code'] = ERR_NOT_EXIST;\n        include $SETTINGS['cpassman_dir'].'/error.php';\n        // When user is not identified\n    } else {\n        // Automatic redirection\n        if (strpos($server_request_uri, \"?\") > 0) {\n            $nextUrl = filter_var(substr($server_request_uri, strpos($server_request_uri, \"?\")), FILTER_SANITIZE_URL);\n        } else {\n            $nextUrl = \"\";\n        }\n        // MAINTENANCE MODE\n        if (isset($SETTINGS['maintenance_mode']) === true && $SETTINGS['maintenance_mode'] === '1') {\n            echo '\n                <div style=\"text-align:center;margin-top:30px;margin-bottom:20px;padding:10px;\"\n                    class=\"ui-state-error ui-corner-all\">\n                    <b>'.addslashes($LANG['index_maintenance_mode']).'</b>\n                </div>';\n        } elseif (isset($_GET['session_over']) && $_GET['session_over'] === 'true') {\n            // SESSION FINISHED => RECONNECTION ASKED\n            echo '\n                    <div style=\"text-align:center;margin-top:30px;margin-bottom:20px;padding:10px;\"\n                        class=\"ui-state-error ui-corner-all\">\n                        <b>'.addslashes($LANG['index_session_expired']).'</b>\n                    </div>';\n        }\n\n        // case where user not logged and can't access a direct link\n        if (empty($_GET['page']) === false) {\n            $superGlobal->put(\n                \"initial_url\",\n                filter_var(\n                    substr($server_request_uri, strpos($server_request_uri, \"index.php?\")),\n                    FILTER_SANITIZE_URL\n                ),\n                \"SESSION\"\n            );\n            // REDIRECTION PAGE ERREUR\n            echo '\n            <script language=\"javascript\" type=\"text/javascript\">\n            <!--\n                sessionStorage.clear();\n                window.location.href = \"index.php\";\n            -->\n            </script>';\n            exit;\n        } else {\n            $superGlobal->put(\"initial_url\", '', \"SESSION\");\n        }\n\n        // CONNECTION FORM\n        echo '\n                <form method=\"post\" name=\"form_identify\" id=\"form_identify\" action=\"\">\n                    <div style=\"width:480px;margin:10px auto 10px auto;padding:25px;\" class=\"ui-state-highlight ui-corner-all\">\n                        <div style=\"text-align:center;font-weight:bold;margin-bottom:20px;\">',\n        isset($SETTINGS['custom_logo']) && !empty($SETTINGS['custom_logo']) ? '<img src=\"'.(string) $SETTINGS['custom_logo'].'\" alt=\"\" style=\"margin-bottom:40px;\" />' : '', '<br />\n                            '.$LANG['index_get_identified'].'\n                            <span id=\"ajax_loader_connexion\" style=\"display:none;margin-left:10px;\"><span class=\"fa fa-cog fa-spin fa-1x\"></span></span>\n                        </div>\n                        <div id=\"connection_error\" style=\"display:none;text-align:center;margin:5px; padding:3px;\" class=\"ui-state-error ui-corner-all\">&nbsp;<i class=\"fa fa-warning\"></i>&nbsp;'.$LANG['index_bas_pw'].'</div>';\n        echo '\n                        <div style=\"margin-bottom:3px;\">\n                            <label for=\"login\" class=\"form_label\">', isset($SETTINGS['custom_login_text']) && !empty($SETTINGS['custom_login_text']) ? (string) $SETTINGS['custom_login_text'] : $LANG['index_login'], '</label>\n                            <input type=\"text\" size=\"10\" id=\"login\" name=\"login\" class=\"input_text text ui-widget-content ui-corner-all\" />\n                            <span id=\"login_check_wait\" style=\"display:none; float:right;\"><i class=\"fa fa-cog fa-spin fa-1x\"></i></span>\n                        </div>';\n\n        // AGSES\n        if (isset($SETTINGS['agses_authentication_enabled']) && $SETTINGS['agses_authentication_enabled'] == 1) {\n            echo '\n                        <div id=\"agses_cardid_div\" style=\"text-align:center; display:none; padding:5px; width:454px; margin-bottom:5px;\" class=\"ui-state-active ui-corner-all\">\n                            '.$LANG['user_profile_agses_card_id'].': &nbsp;\n                            <input type=\"text\" size=\"12\" id=\"agses_cardid\">\n                        </div>\n                        <div id=\"agses_flickercode_div\" style=\"text-align:center; display:none;\">\n                            <canvas id=\"axs_canvas\"></canvas>\n                        </div>';\n        }\n\n                        echo '\n                        <div id=\"connect_pw\" style=\"margin-bottom:3px;\">\n                            <label for=\"pw\" class=\"form_label\" id=\"user_pwd\">'.$LANG['index_password'].'</label>\n                            <input type=\"password\" size=\"10\" id=\"pw\" name=\"pw\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\', \\'', isset($SETTINGS['google_authentication']) && $SETTINGS['google_authentication'] === \"1\" ? 1 : '', '\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />\n                        </div>';\n\n        // Personal salt key\n        if (isset($SETTINGS['psk_authentication']) && $SETTINGS['psk_authentication'] === \"1\") {\n            echo '\n                        <div id=\"connect_psk\" style=\"margin-bottom:3px;\">\n                            <label for=\"personal_psk\" class=\"form_label\">'.$LANG['home_personal_saltkey'].'</label>\n                            <input type=\"password\" size=\"10\" id=\"psk\" name=\"psk\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\', \\'', isset($SETTINGS['psk_authentication']) && $SETTINGS['psk_authentication'] === \"1\" ? 1 : '', '\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />\n                        </div>\n                        <div id=\"connect_psk_confirm\" style=\"margin-bottom:3px; display:none;\">\n                            <label for=\"psk_confirm\" class=\"form_label\">'.$LANG['home_personal_saltkey_confirm'].'</label>\n                            <input type=\"password\" size=\"10\" id=\"psk_confirm\" name=\"psk_confirm\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\', \\'', isset($SETTINGS['psk_authentication']) && $SETTINGS['psk_authentication'] === \"1\" ? 1 : '', '\\')\" class=\"input_text text ui-widget-content ui-corner-all\" />\n                        </div>';\n        }\n\n        // Google Authenticator code\n        if (isset($SETTINGS['google_authentication']) && $SETTINGS['google_authentication'] === \"1\") {\n            echo '\n                        <div id=\"ga_code_div\" style=\"margin-bottom:10px;\">\n                            '.$LANG['ga_identification_code'].'\n                            <input type=\"text\" size=\"4\" id=\"ga_code\" name=\"ga_code\" style=\"margin:0px;\" class=\"input_text text ui-widget-content ui-corner-all numeric_only\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\')\" />\n                        <div id=\"2fa_new_code_div\" style=\"text-align:center; display:none; margin-top:5px; padding:5px;\" class=\"ui-state-default ui-corner-all\"></div>\n                        <div style=\"margin-top:2px; font-size:10px; text-align:center; cursor:pointer;\" onclick=\"send_user_new_temporary_ga_code()\">'.$LANG['i_need_to_generate_new_ga_code'].'</div>\n                        </div>';\n        }\n        echo '\n                        <div style=\"margin-bottom:3px;\">\n                            <label for=\"duree_session\" class=\"\">'.$LANG['index_session_duration'].'&nbsp;('.$LANG['minutes'].') </label>\n                            <input type=\"text\" size=\"4\" id=\"duree_session\" name=\"duree_session\" value=\"', isset($SETTINGS['default_session_expiration_time']) ? $SETTINGS['default_session_expiration_time'] : \"60\", '\" onkeypress=\"if (event.keyCode == 13) launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\')\" class=\"input_text text ui-widget-content ui-corner-all numeric_only\" />\n                        </div>\n\n                        <div style=\"text-align:center;margin-top:5px;font-size:10pt;\">\n                            <span onclick=\"OpenDialog(\\'div_forgot_pw\\')\" style=\"padding:3px;cursor:pointer;\">'.$LANG['forgot_my_pw'].'</span>\n                        </div>\n                        <div style=\"text-align:center;margin-top:15px;\">\n                            <input type=\"button\" id=\"but_identify_user\" onclick=\"launchIdentify(\\'', isset($SETTINGS['duo']) && $SETTINGS['duo'] === \"1\" ? 1 : '', '\\', \\''.$nextUrl.'\\', \\'', isset($SETTINGS['psk_authentication']) && $SETTINGS['psk_authentication'] === \"1\" ? 1 : '', '\\')\" style=\"padding:3px;cursor:pointer;\" class=\"ui-state-default ui-corner-all\" value=\"'.$LANG['index_identify_button'].'\" />\n                        </div>\n                    </div>\n                </form>\n                <script type=\"text/javascript\">\n                    $(\"#login\").focus();\n                </script>';\n        // DIV for forgotten password\n        echo '\n                <div id=\"div_forgot_pw\" style=\"display:none;\">\n                    <div style=\"margin:5px auto 5px auto;\" id=\"div_forgot_pw_alert\"></div>\n                    <div style=\"margin:5px auto 5px auto;\">'.$LANG['forgot_my_pw_text'].'</div>\n                    <label for=\"forgot_pw_email\">'.$LANG['email'].'</label>\n                    <input type=\"text\" size=\"40\" name=\"forgot_pw_email\" id=\"forgot_pw_email\" />\n                    <br />\n                    <label for=\"forgot_pw_login\">'.$LANG['login'].'</label>\n                    <input type=\"text\" size=\"20\" name=\"forgot_pw_login\" id=\"forgot_pw_login\" />\n                    <div id=\"div_forgot_pw_status\" style=\"text-align:center;margin-top:15px;display:none; padding:5px;\" class=\"ui-corner-all\">\n                        <i class=\"fa fa-cog fa-spin fa-2x\"></i>&nbsp;<b>'.$LANG['please_wait'].'</b>\n                    </div>\n                </div>';\n    }\n    echo '\n    </div>';\n// FOOTER\n/* DON'T MODIFY THE FOOTER ... MANY THANKS TO YOU */\n    echo '\n    <div id=\"footer\">\n        <div style=\"float:left;width:32%;\">\n            <a href=\"http://teampass.net\" target=\"_blank\" style=\"color:#F0F0F0;\">'.$SETTINGS_EXT['tool_name'].'&nbsp;'.$SETTINGS_EXT['version'].'&nbsp;<i class=\"fa fa-copyright\"></i>&nbsp;'.$SETTINGS_EXT['copyright'].'</a>\n            &nbsp;|&nbsp;\n            <a href=\"http://teampass.readthedocs.io/en/latest/\" target=\"_blank\" style=\"color:#F0F0F0;\" class=\"tip\" title=\"'.addslashes($LANG['documentation_canal']).' ReadTheDocs\"><i class=\"fa fa-book\"></i></a>\n            &nbsp;\n            <a href=\"https://www.reddit.com/r/TeamPass/\" target=\"_blank\" style=\"color:#F0F0F0;\" class=\"tip\" title=\"'.addslashes($LANG['admin_help']).'\"><i class=\"fa fa-reddit-alien\"></i></a>\n        </div>\n        <div style=\"float:left;width:32%;text-align:center;\">\n            ', ($session_user_id !== null && empty($session_user_id) === false) ? '<i class=\"fa fa-users\"></i>&nbsp;'.$_SESSION['nb_users_online'].'&nbsp;'.$LANG['users_online'].'&nbsp;|&nbsp;<i class=\"fa fa-hourglass-end\"></i>&nbsp;'.$LANG['index_expiration_in'].'&nbsp;<div style=\"display:inline;\" id=\"countdown\"></div>' : '', '\n        </div><div id=\"countdown2\"></div>\n        <div style=\"float:right;text-align:right;\">\n            <i class=\"fa fa-clock-o\"></i>&nbsp;'. $LANG['server_time'].\" : \".@date($SETTINGS['date_format'], (string) $_SERVER['REQUEST_TIME']).\" - \".@date($SETTINGS['time_format'], (string) $_SERVER['REQUEST_TIME']).'\n        </div>\n    </div>';\n// PAGE LOADING\n    echo '\n    <div id=\"div_loading\" class=\"hidden\">\n        <div style=\"padding:5px; z-index:9999999;\" class=\"ui-widget-content ui-state-focus ui-corner-all\">\n            <i class=\"fa fa-cog fa-spin fa-2x\"></i>\n        </div>\n    </div>';\n// Alert BOX\n    echo '\n    <div id=\"div_dialog_message\" style=\"display:none;\">\n        <div id=\"div_dialog_message_text\" style=\"text-align:center; padding:4px; font-size:12px; margin-top:10px;\"></div>\n    </div>';\n\n// WARNING FOR QUERY ERROR\n    echo '\n    <div id=\"div_mysql_error\" style=\"display:none;\">\n        <div style=\"padding:10px;text-align:center;\" id=\"mysql_error_warning\"></div>\n    </div>';\n\n\n//Personnal SALTKEY\n    if (isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] === \"1\") {\n        echo '\n        <div id=\"div_set_personal_saltkey\" style=\"display:none;padding:4px;\">\n            <i class=\"fa fa-key\"></i> <b>'.$LANG['home_personal_saltkey'].'</b>\n            <input type=\"password\" name=\"input_personal_saltkey\" id=\"input_personal_saltkey\" style=\"width:200px;padding:5px;margin-left:30px;\" class=\"text ui-widget-content ui-corner-all text_without_symbols tip\" value=\"', isset($_SESSION['user_settings']['clear_psk']) ? (string) $_SESSION['user_settings']['clear_psk'] : '', '\" title=\"<i class=\\'fa fa-bullhorn\\'></i>&nbsp;'.$LANG['text_without_symbols'].'\" />\n            <span id=\"set_personal_saltkey_last_letter\" style=\"font-weight:bold;font-size:20px;\"></span>\n            <div style=\"display:none;margin-top:5px;text-align:center;padding:4px;\" id=\"set_personal_saltkey_warning\" class=\"ui-widget-content ui-state-error ui-corner-all\"></div>\n        </div>';\n    }\n\n// user profile\n    echo '\n<div id=\"dialog_user_profil\" style=\"display:none;padding:4px;\">\n    <div id=\"div_user_profil\">\n        <i class=\"fa fa-cog fa-spin fa-2x\"></i>&nbsp;<b>'.$LANG['please_wait'].'</b>\n    </div>\n</div>';\n\n// DUO box\n    echo '\n<div id=\"dialog_duo\" style=\"display:none;padding:4px;\">\n    <div id=\"div_duo\"></div>\n    '.$LANG['duo_loading_iframe'].'\n    <form method=\"post\" id=\"duo_form\" action=\"#\">\n        <input type=\"hidden\" id=\"duo_login\" name=\"duo_login\" value=\"', null !== $post_duo_login ? $post_duo_login : '', '\" />\n        <input type=\"hidden\" id=\"duo_data\" name=\"duo_data\" value=\"', null !== $post_duo_data ? htmlentities(base64_decode($post_duo_data)) : '', '\" />\n    </form>\n</div>';\n\n// INCREASE session time\n    echo '\n<div id=\"div_increase_session_time\" style=\"display:none;padding:4px;\">\n    <b>'.$LANG['index_session_duration'].':</b>\n    <input type=\"text\" id=\"input_session_duration\" style=\"width:50px;padding:5px;margin:0 10px 0 10px;\" class=\"text ui-widget-content ui-corner-all\" value=\"', isset($_SESSION['user_settings']['session_duration']) ? (int) $_SESSION['user_settings']['session_duration'] / 60 : 60, '\" />\n    <b>'.$LANG['minutes'].'</b>\n    <div style=\"display:none;margin-top:5px;text-align:center;padding:4px;\" id=\"input_session_duration_warning\" class=\"ui-widget-content ui-state-error ui-corner-all\"></div>\n</div>';\n\n    closelog();\n\n?>\n<script type=\"text/javascript\">NProgress.start();</script>\n    </body>\n</html>", "<?php\n/**\n * @file          items.load.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n$var['hidden_asterisk'] = '<i class=\"fa fa-eye fa-border fa-sm tip\" title=\"'.$LANG['show_password'].'\"></i>&nbsp;&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>&nbsp;<i class=\"fa fa-asterisk\"></i>';\n\n// load csrfprotector\n$csrfp_config = include $SETTINGS['cpassman_dir'].'/includes/libraries/csrfp/libs/csrfp.config.php';\n?>\n\n<script type=\"text/javascript\">\n//<![CDATA[\n    var query_in_progress = 0;\n\n    $(document).on('focusin', function(e) {e.stopImmediatePropagation();});\n\n//  Part of Safari 6 OS X fix\n    //  clean up HTML for sending via JSON to PHP code\n    function clean_up_html_safari(input)\n    {\n        //  applies to Safari 6 on OS X only, so check for that\n        user_agent = navigator.userAgent;\n        if (/Mac OS X.+6\\.\\d\\.\\d\\sSafari/.test(user_agent))\n        {\n            // remove strange divs\n            input = input.replace(/<\\/*div.+>\\n/g, '');\n            /**/\n            //  remove other strange tags\n            allowed_tags = '<strong><em><strike><ol><li><ul><a><br>';\n            input = strip_tags(input, allowed_tags);\n\n            //  replace special characters\n            input = input.replace(/(\\r\\n|\\n|\\r)/gm, '<br>')\n                                                .replace(/\\t/g, '')\n                                                .replace(/\\f/g, '')\n                                                .replace(/\\v/g, '')\n                                                .replace(/\\r/g, '');\n        }\n        return input;\n    }/* */\n\n    function AddNewNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).addNode(1,'A New Node')\n    }\n\n    function EditNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).addNode(1,'A New Node')\n    }\n\n    function DeleteNode()\n    {\n        //Select first child node in tree\n        $('#2').click();\n        //Add new node to selected node\n        simpleTreeCollection.get(0).delNode()\n    }\n\n    //FUNCTION mask/unmask passwords characters\n    function ShowPassword(pw)\n    {\n        if ($(\"#selected_items\").val() == \"\") return;\n\n        if ($('#id_pw').html().indexOf(\"fa-asterisk\") != -1) {\n            itemLog(\"item_password_shown\");\n            $('#id_pw').text($('#hid_pw').val());\n        } else {\n            $('#id_pw').html('<?php echo $var[\"hidden_asterisk\"]; ?>');\n        }\n    }\n\n    $(\"#tabs-02\").on(\n        \"change\",\n        \"#pw1\",\n        function() {\n            $('#visible_pw').val($('#pw1').val());\n        }\n    );\n\n    function ShowPasswords_EditForm()\n    {\n        if ($('#edit_visible_pw').is(\":visible\")) {\n            $('#edit_visible_pw').addClass(\"hidden\");\n        } else {\n            $('#edit_visible_pw').show();\n        }\n    }\n\n    $(\"#edit_pw1\").keyup(function() {\n        $(\"#edit_visible_pw\").text( this.value );\n    });\n\n    $(\"#pw1\").keyup(function() {\n        $(\"#visible_pw\").text( this.value );\n    });\n\n\n\n    /**\n     * Open a dialogbox\n     * @access public\n     * @return void\n     **/\n    function OpenDialog(id, modal)\n    {\n        if ($(\"#selected_items\").val() == \"\") return;\n\n        if (modal == \"false\") {\n            $(\"#\"+id).dialog(\"option\", \"modal\", false);\n        } else {\n            $(\"#\"+id).dialog(\"option\", \"modal\", true);\n        }\n        $(\"#\"+id).dialog(\"open\");\n    }\n\n/*\n*\n*/\nfunction LoadTreeNode(node_id)\n{\n\n}\n\n//###########\n//## FUNCTION : Launch the listing of all items of one category\n//###########\nvar requestRunning = false;\nfunction ListerItems(groupe_id, restricted, start, stop_listing_current_folder)\n{\n    var me = $(this);\n    stop_listing_current_folder = stop_listing_current_folder || \"0\";\n\n    // case where we should stop listing the items\n    if ($(\"#items_listing_should_stop\").val() === \"1\") {\n        requestRunning = false;\n        $(\"#items_listing_should_stop\").val(\"0\");\n        return false;\n    }\n\n    if (stop_listing_current_folder === 1) {\n        me.data('requestRunning', false);\n        $(\"#new_listing_characteristics\").val(groupe_id+\",\"+restricted+\",\"+start+\",0\");\n    } else {\n        $(\"#new_listing_characteristics\").val(\"\");\n    }\n\n\n    // prevent launch of similar query in case of doubleclick\n    if (requestRunning === true) {\n        return false;\n    }\n    requestRunning = true;\n\n    $(\"#request_lastItem, #selected_items\").val(\"\");\n\n    if (groupe_id != undefined) {\n        //refreshTree(groupe_id);\n        if (query_in_progress != 0 && query_in_progress != groupe_id) {\n            request.abort();    //kill previous query if needed\n        }\n        query_in_progress = groupe_id;\n        //LoadingPage();\n        $(\"#items_list_loader\").removeClass(\"hidden\");\n        if (start == 0) {\n            //clean form\n            $('#id_label, #id_pw, #id_email, #id_url, #id_desc, #id_login, #id_info, #id_restricted_to, #id_files, #id_tags, #id_kbs, #item_extra_info, #item_viewed_x_times').html(\"\");\n            $(\"#items_list\").html(\"<ul class='liste_items 'id='full_items_list'></ul>\");\n        }\n        $(\"#items_list\").css(\"display\", \"\");\n\n        $(\"#hid_cat\").val(groupe_id);\n        if ($(\".tr_fields\") != undefined) $(\".tr_fields, .newItemCat, .editItemCat\").addClass(\"hidden\");\n\n        //Disable menu buttons\n        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n\n        $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;<?php echo addslashes($LANG[\"opening_folder\"]); ?>');\n\n        //ajax query\n        request = $.post(\"sources/items.queries.php\",\n            {\n                type        : \"lister_items_groupe\",\n                id          : groupe_id,\n                restricted  : restricted,\n                start       : start,\n                uniqueLoadData : $(\"#uniqueLoadData\").val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\",\n                nb_items_to_display_once : $(\"#nb_items_to_display_once\").val()\n            },\n            function(data) {\n                if (data == \"Hacking attempt...\") {\n                    alert(\"Hacking attempt...\");\n                    return false;\n                }\n                //get data\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                // reset doubleclick prevention\n                requestRunning = false;\n\n                // manage not allowed\n                if (data.error == \"not_allowed\") {\n                   $(\"#div_dialog_message_text\").html(data.error_text);\n                   $(\"#div_dialog_message\").dialog(\"open\");\n                   $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;Error');\n                   $(\"#items_list_loader\").addClass(\"hidden\");\n                   return false;\n                }\n\n                // to be done only in 1st list load\n                if (data.list_to_be_continued === \"end\") {\n                    $(\"#pf_selected\").val(data.IsPersonalFolder);\n\n                    // display path of folders\n                    if (data.arborescence != undefined) {\n                        var path_maxlength = 420;\n                        if ($(\"#path_fontsize\").val() != \"\") $(\"#items_path_var\").css('font-size', $(\"#path_fontsize\").val());\n                        if (data.IsPersonalFolder === 0) {\n                            $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;' + data.arborescence);\n                        } else {\n                            $(\"#items_path_var\").html('<i class=\"fa fa-folder-open-o\"></i>&nbsp;<?php echo addslashes($LANG['personal_folder']); ?>&nbsp;:&nbsp;' + data.arborescence);\n                        }\n                        var path_levels = data.arborescence.split('&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;').length;\n                        if ($(\"#items_path_var\").width() > path_maxlength) {\n                            $(\"#path_fontsize\").val($(\"#items_path_var\").css('font-size'));\n                            // start reducing size of font\n                            $(\"#items_path_var\").css('font-size', parseInt($(\"#items_path_var\").css('font-size'))-1);\n                            if ($(\"#items_path_var\").width() > path_maxlength && path_levels < 2) {\n                                while ($(\"#items_path_var\").width() > path_maxlength) {\n                                    $(\"#items_path_var\").css('font-size', parseInt($(\"#items_path_var\").css('font-size')) - 1);\n                                }\n                            }\n\n                            if ($(\"#items_path_var\").width() > path_maxlength && path_levels >= 2) {\n                                // only take first and last\n                                var nb = 1;\n                                var totalPathLength = occupedWidth = 0;\n                                $(\".path_element\").each(function () {\n                                    totalPathLength += $(this).width();\n                                    if (nb != 1 && nb != (path_levels-1) && nb != path_levels) {\n                                        $(this).html(\"<span class='tip' title='\"+$(this).html()+\"'>...</span>\");\n                                    } else if (nb == path_levels) {\n                                        // next condition occurs if lasst folder name is too long\n                                        if (totalPathLength > path_maxlength) {\n                                            var lastTxt = $(this).html();\n                                            while ($(this).width() > (path_maxlength - occupedWidth)) {\n                                                lastTxt = lastTxt.slice(0, -1);\n                                                $(this).html(lastTxt);\n                                            }\n                                            $(this).html(lastTxt+\"...\");\n                                        }\n                                    }\n                                    occupedWidth += $(this).width()+15; // 15 pixels corresponds to the small right triangle\n                                    nb++;\n                                });\n                            }\n                        }\n                    } else {\n                        $(\"#items_path_var\").html('');\n                    }\n\n                    // store the categories to be displayed\n                    if (data.displayCategories !== undefined) {\n                        $(\"#display_categories\").val(data.displayCategories);\n                    }\n\n                    // store type of access on folder\n                    $(\"#access_level\").val(data.access_level);\n\n                    // warn about a required change of personal SK\n                    if ($(\"#personal_upgrade_needed\").val() == \"1\" && data.recherche_group_pf === 1) {\n                        $(\"#dialog_upgrade_personal_passwords\").dialog(\"open\");\n                    }\n\n                    $(\"#items_loading_progress\").remove();\n\n                    // show correct fodler in Tree\n                    $(\"#jstree\").jstree(\"deselect_all\");\n                    $('#jstree').jstree(\"select_node\", \"#li_\"+groupe_id);\n                } else {\n                    $(\"#uniqueLoadData\").val(data.uniqueLoadData);\n                    if ($(\"#items_loading_progress\").length == 0) {\n                        $(\"#items_list_loader\").after('<span id=\"items_loading_progress\">' + Math.round(data.next_start*100/data.counter_full, 0) + '%</span>');\n                    } else {\n                        $(\"#items_loading_progress\").html(Math.round(data.next_start*100/data.counter_full, 0) + '%');\n                    }\n                }\n\n\n                if (data.array_items == \"\" && data.items_count == \"0\") {\n                    $(\"#items_list\").html('<div style=\"text-align:center;margin-top:30px;\"><b><i class=\"fa fa-info-circle\"></i>&nbsp;<?php echo addslashes($LANG['no_item_to_display']); ?></b></div>');\n                }\n\n                if (data.error == \"is_pf_but_no_saltkey\") {\n                    //warn user about his saltkey\n                    $(\"#item_details_no_personal_saltkey\").show();\n                    $(\"#item_details_ok, #item_details_nok\").addClass(\"hidden\");\n\n                    $('#menu_button_add_item').prop('disabled', 'true');\n                    $(\"#items_list_loader, #div_loading\").addClass(\"hidden\");\n                } else if (data.error == \"not_authorized\" || data.access_level === \"\") {\n                    //warn user\n                    $(\"#hid_cat\").val(\"\");\n                    //$(\"#menu_button_copy_item, #menu_button_add_group, #menu_button_edit_group, #menu_button_del_group, #menu_button_add_item, #menu_button_edit_item, #menu_button_del_item, #menu_button_history, #menu_button_share, #menu_button_otv\").prop('disabled', 'true');\n                    $(\"#item_details_nok\").removeClass(\"hidden\");\n                    $(\"#item_details_ok, #item_details_no_personal_saltkey\").addClass(\"hidden\");\n                    $(\"#items_list_loader\").addClass(\"hidden\");\n                } else if (($(\"#user_is_read_only\").val() == 1 && data.recherche_group_pf == 0) || data.access_level == 1) {\n                    //readonly user\n                    $(\"#recherche_group_pf\").val(data.saltkey_is_required);\n                    $(\"#item_details_no_personal_saltkey, #item_details_nok\").addClass(\"hidden\");\n                    $(\"#item_details_ok, #items_list\").removeClass(\"hidden\");\n\n                    $(\"#more_items\").remove();\n\n                    // show items\n                    $(\"#full_items_list\").append(data.items_html);\n                    if (data.list_to_be_continued === \"yes\") {\n                        //set next start for query\n                        $(\"#query_next_start\").val(data.next_start);\n                    } else {\n                        $(\"#query_next_start\").val(data.list_to_be_continued);\n\n                        // display Categories if needed\n                        if ($(\".tr_fields\") !== undefined && data.displayCategories !== undefined && data.displayCategories !== \"\") {\n                            var liste = data.displayCategories.split(';');\n                            for (var i=0; i<liste.length; i++) {\n                                $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n                            }\n                        }\n                        if (data.saltkey_is_required == 1) {\n                            if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n                        }\n                    }\n\n                    proceed_list_update(stop_listing_current_folder);\n                } else {\n                    $(\"#recherche_group_pf\").val(data.saltkey_is_required);\n                    //Display items\n                    $(\"#item_details_no_personal_saltkey, #item_details_nok\").addClass(\"hidden\");\n                    $(\"#item_details_ok, #items_list\").removeClass(\"hidden\");\n\n                    $('#complexite_groupe').val(data.folder_complexity);\n                    $('#bloquer_creation_complexite').val(data.bloquer_creation_complexite);\n                    $('#bloquer_modification_complexite').val(data.bloquer_modification_complexite);\n\n                    // show items\n                    $(\"#full_items_list\").append(data.items_html);\n\n                    if (data.list_to_be_continued === \"yes\") {\n                        //set next start for query\n                        $(\"#query_next_start\").val(data.next_start);\n                    } else {\n                        $(\"#query_next_start\").val(data.list_to_be_continued);\n\n                        // display Categories if needed\n                        if ($(\".tr_fields\") != undefined && data.displayCategories !== undefined && data.displayCategories != \"\") {\n                            var liste = data.displayCategories.split(';');\n                            for (var i=0; i<liste.length; i++) {\n                                $(\".itemCatName_\"+liste[i]+\", #newItemCatName_\"+liste[i]+\", #editItemCatName_\"+liste[i]).show();\n                            }\n                        }\n                        if (data.saltkey_is_required == 1) {\n                            if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n                        }\n                    }\n\n                    //If no data then empty\n                    if (data.array_items != null) {\n                        $(\".item_draggable\").draggable({\n                            handle: '.grippy',\n                            cursor: \"move\",\n                            opacity: 0.4,\n                            appendTo: 'body',\n                            stop: function(event, ui) {\n                                $(this).removeClass(\"ui-state-highlight\");\n                            },\n                            start: function(event, ui) {\n                                $(this).addClass(\"ui-state-highlight\");\n                            },\n                            helper: function(event) {\n                                return $(\"<div class='ui-widget-header' id='drop_helper'>\"+\"<?php echo addslashes($LANG['drag_drop_helper']); ?>\"+\"</div>\");\n                            }\n                        });\n                        $(\".folder\").droppable({\n                            hoverClass: \"ui-state-error\",\n                            tolerance: 'pointer',\n                            drop: function(event, ui) {\n                                ui.draggable.addClass(\"hidden\");\n                                LoadingPage();\n                                //move item\n                                $.post(\n                                    \"sources/items.queries.php\",\n                                    {\n                                        type      : \"move_item\",\n                                        item_id   : ui.draggable.attr(\"id\"),\n                                        folder_id : $(this).attr(\"id\").substring(4),\n                                        key       : \"<?php echo $_SESSION['key']; ?>\"\n                                    },\n                                    function(data) {\n                                        //increment / decrement number of items in folders\n                                        $(\"#itcount_\"+data[0].from_folder).text(Math.floor($(\"#itcount_\"+data[0].from_folder).text())-1);\n                                        $(\"#itcount_\"+data[0].to_folder).text(Math.floor($(\"#itcount_\"+data[0].to_folder).text())+1);\n                                        $(\"#id_label, #item_viewed_x_times, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to, #id_tags, #id_kbs\").html(\"\");\n                                        LoadingPage();\n                                        displayMessage(\"<?php echo addslashes($LANG['alert_message_done']); ?>\");\n                                    },\n                                    \"json\"\n                               );\n                            }\n                        });\n                    }\n\n                    proceed_list_update(stop_listing_current_folder);\n                }\n            }\n        );\n    }\n}\n\nfunction pwGenerate(elem)\n{\n    if (elem != \"\") elem = elem+\"_\";\n    $(\"#\"+elem+\"pw1\").show().focus();\n\n    //show ajax image\n    $(\"#\"+elem+\"pw_wait\").removeClass(\"hidden\");\n\n    $.post(\n        \"sources/main.queries.php\",\n        {\n            type    : \"generate_a_password\",\n            size      : $(\"#\"+elem + 'pw_size').val(),\n            numerals      : $(\"#\"+elem + 'pw_numerics').prop(\"checked\"),\n            capitalize      : $(\"#\"+elem + 'pw_maj').prop(\"checked\"),\n            symbols      : $(\"#\"+elem + 'pw_symbols').prop(\"checked\"),\n            secure  : $(\"#\"+elem + 'pw_secure').prop(\"checked\"),\n            elem      : elem,\n            force      : \"false\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n               if (data.error == \"true\") {\n                   $(\"#div_dialog_message_text\").html(data.error_msg);\n                   $(\"#div_dialog_message\").dialog(\"open\");\n               } else {\n                $(\"#\"+elem+\"visible_pw\").text(data.key);\n                   $(\"#\"+elem+\"pw1, #\"+elem+\"pw2\").val(data.key);\n                $(\"#\"+elem+\"pw1\").focus();\n               }\n            //$(\"#\"+elem+\"pw1\").show().blur();\n            $(\"#\"+elem+\"pw_wait\").addClass(\"hidden\");\n        }\n   );\n}\n\nfunction pwCopy(elem)\n{\n    if (elem != \"\") elem = elem+\"_\";\n    $(\"#\"+elem + 'pw2').val($(\"#\"+elem + 'pw1').val());\n}\n\nfunction catSelected(val)\n{\n    $(\"#hid_cat\").val(val);\n}\n\n/**\n* Get Item complexity\n*/\nfunction RecupComplexite(val, edit, context)\n{\n    context = context || \"\";    // make context optional\n\n    var funcReturned = null;\n    $.ajaxSetup({async: false});\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"get_complixity_level\",\n            groupe  : val,\n            context : context,\n            item_id : $(\"#selected_items\").val()\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            funcReturned = 1;\n            if (data.error == undefined || data.error == 0) {\n                $(\"#complexite_groupe\").val(data.val);\n                $(\"#selected_folder_is_personal\").val(data.personal);\n                if (edit == 1) {\n                    $(\"#edit_complex_attendue\").html(\"<b>\"+data.complexity+\"</b>\");\n                    $(\"#edit_afficher_visibilite\").html(\"<span class='fa fa-users'></span>&nbsp;<b>\"+data.visibility+\"</b>\");\n                } else {\n                    $(\"#complex_attendue\").html(\"<b>\"+data.complexity+\"</b>\");\n                    $(\"#afficher_visibilite\").html(\"<span class='fa fa-users'></span>&nbsp;<b>\"+data.visibility+\"</b>\");\n                }\n            } else if (data.error == \"no_edition_possible\") {\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n                funcReturned = 0;\n            } else if (data.error == \"user_is_readonly\") {\n                displayMessage(data.message);\n                funcReturned = 0;\n            } else if (data.error == \"no_folder_creation_possible\" || data.error == \"no_folder_edition_possible\"  || data.error == \"delete_folder\") {\n                displayMessage('<i class=\"fa fa-warning\"></i>&nbsp;' + data.error_msg);\n                $(\"#div_loading\").addClass(\"hidden\");\n                funcReturned = 0;\n            } else {\n                $(\"#div_formulaire_edition_item\").dialog(\"close\");\n                $(\"#div_dialog_message_text\").html(data.error_msg);\n                $(\"#div_dialog_message\").dialog(\"open\");\n            }\n            $(\"#div_loading\").addClass(\"hidden\");\n        }\n   );\n    $.ajaxSetup({async: true});\n    return funcReturned;\n}\n\n/**\n* Check if Item has been changed since loaded\n*/\nfunction CheckIfItemChanged()\n{\n    var funcReturned = null;\n    $.ajaxSetup({async: false});\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type        : \"is_item_changed\",\n            timestamp   : $(\"#timestamp_item_displayed\").val(),\n            item_id     : $(\"#selected_items\").val()\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            if (data.modified == 1) {\n                funcReturned = 1;\n            } else {\n                funcReturned = 0;\n            }\n        }\n   );\n    $.ajaxSetup({async: true});\n    return funcReturned;\n}\n\nfunction AjouterItem()\n{\n    $(\"#div_formulaire_saisi_info\").show().html(\"<?php echo \"<i class='fa fa-cog fa-spin fa-lg'></i>&nbsp;\".addslashes($LANG['please_wait']).\"...\"; ?>\");\n    LoadingPage();\n    $(\"#error_detected\").val('');   //Refresh error foolowup\n    var erreur = \"\";\n    var  reg=new RegExp(\"[.|;|:|!|=|+|-|*|/|#|\\\"|'|&|]\");\n\n    //Complete url format\n    var url = $(\"#url\").val();\n    if (url.substring(0,7) != \"http://\" && url!=\"\" && url.substring(0,8) != \"https://\" && url.substring(0,6) != \"ftp://\" && url.substring(0,6) != \"ssh://\") {\n        url = \"http://\"+url;\n    }\n\n    // do checks\n    if ($(\"#label\").val() == \"\") erreur = \"<?php echo addslashes($LANG['error_label']); ?>\";\n    else if ($(\"#pw1\").val() === \"\" && $(\"#create_item_without_password\").val() !== \"1\") erreur = \"<?php echo addslashes($LANG['error_pw']); ?>\";\n    else if ($(\"#categorie\").val() == \"na\") erreur = \"<?php echo addslashes($LANG['error_group']); ?>\";\n    else if ($(\"#pw1\").val() != $(\"#pw2\").val()) erreur = \"<?php echo addslashes($LANG['error_confirm']); ?>\";\n    else if ($(\"#enable_delete_after_consultation\").is(':checked') && (($(\"#times_before_deletion\").val() < 1 && $(\"#deletion_after_date\").val() == \"\") || ($(\"#times_before_deletion\").val() == \"\" && $(\"#deletion_after_date\").val() == \"\"))) erreur = \"<?php echo addslashes($LANG['error_times_before_deletion']); ?>\";\n    else if ($(\"#item_tags\").val() != \"\" && reg.test($(\"#item_tags\").val())) erreur = \"<?php echo addslashes($LANG['error_tags']); ?>\";\n    else if (($('#recherche_group_pf').val() === \"1\" || $('#selected_folder_is_personal').val() === \"1\") && $('#personal_sk_set').val() === \"0\") {\n        erreur = \"<?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?>\";\n    } else{\n        //Check pw complexity level\n        if (\n            ($(\"#bloquer_creation_complexite\").val() == 0 && parseInt($(\"#mypassword_complex\").val()) >= parseInt($(\"#complexite_groupe\").val()))\n            ||\n            ($(\"#bloquer_creation_complexite\").val() == 1)\n            ||\n            ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)\n            ||\n            $(\"#create_item_without_password\").val() === \"1\"\n      ) {\n            //Manage restrictions\n            var restriction = restriction_role = \"\";\n            $(\"#restricted_to_list option:selected\").each(function () {\n                //check if it's a role\n                if ($(this).val().indexOf('role_') != -1) {\n                    restriction_role += $(this).val().substring(5) + \";\";\n                } else {\n                    restriction += $(this).val() + \";\";\n                }\n            });\n            if (restriction != \"\" && restriction.indexOf($('#form_user_id').val()) == \"-1\")\n                restriction = $('#form_user_id').val()+\";\"+restriction\n            if (restriction == \";\") restriction = \"\";\n\n            //Manage diffusion list\n            var diffusion = \"\";\n            $(\"#annonce_liste_destinataires option:selected\").each(function () {\n                diffusion += $(this).val() + \";\";\n            });\n            if (diffusion == \";\") diffusion = \"\";\n\n            //Manage description\n            if (CKEDITOR.instances && CKEDITOR.instances[\"edit_desc\"]) {\n                CKEDITOR.instances[\"edit_desc\"].destroy();\n            }\n            if (CKEDITOR.instances && CKEDITOR.instances[\"desc\"]) {\n                var description = sanitizeString(CKEDITOR.instances[\"desc\"].getData()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            } else {\n                var description = sanitizeString($(\"#desc\").val()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            // Sanitize description with Safari\n            description = clean_up_html_safari(description);\n\n            //Is PF\n            if ($('#selected_folder_is_personal').val() == 1 && $('#personal_sk_set').val() == 1) {\n                var is_pf = 1;\n            } else {\n                var is_pf = 0;\n            }\n\n            //To be deleted\n            if ($(\"#enable_delete_after_consultation\").is(':checked') && ($(\"#times_before_deletion\").val() >= 1 || $(\"#deletion_after_date\").val() != \"\")) {\n                if ($(\"#times_before_deletion\").val() >= 1) {\n                    var to_be_deleted = $(\"#times_before_deletion\").val();\n                } else if ($(\"#deletion_after_date\").val() != \"\") {\n                    var to_be_deleted = $(\"#deletion_after_date\").val();\n                }\n            } else {\n                var to_be_deleted = \"\";\n            }\n\n            // get item field values\n            var fields = \"\";\n            $('.item_field').each(function(i){\n                id = $(this).attr('id').split('_');\n                if (fields == \"\") fields = id[1] + '~~' + $(this).val() + '~~' + id[2];\n                else fields += '_|_' + id[1] + '~~' + $(this).val() + '~~' + id[2];\n            });\n\n            // check if a folder is selected\n            var selected_folder;\n            if ($('#categorie').val() === \"\" || $('#categorie').val() === null) {\n                selected_folder = $('#hid_cat').val();\n            } else {\n                selected_folder = $('#categorie').val();\n            }\n\n            //prepare data\n            var data = {\"pw\": sanitizeString($('#pw1').val()) , \"label\": sanitizeString($('#label').val()) ,\n                \"login\": sanitizeString($('#item_login').val()) , \"is_pf\": is_pf.toString() ,\n                \"description\": (description) , \"email\": $('#email').val() , \"url\": url , \"categorie\": selected_folder ,\n                \"restricted_to\": restriction , \"restricted_to_roles\": restriction_role ,\n                \"salt_key_set\": $('#personal_sk_set').val() , \"diffusion\": diffusion , \"id\": $('#id_item').val() ,\n                \"anyone_can_modify\": $('#anyone_can_modify:checked').val() , \"tags\": sanitizeString($('#item_tags').val()) ,\n                \"random_id_from_files\": $('#random_id').val() , \"to_be_deleted\": to_be_deleted ,\n                \"fields\": sanitizeString(fields) , \"complexity_level\": parseInt($(\"#mypassword_complex\").val())};\n\n            //Send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"new_item\",\n                    data     : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").dialog(\"open\");\n\n                        return;\n                    }\n\n                    //Check errors\n                    if (data.error === \"item_exists\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('<?php echo addslashes($LANG['error_item_exists']); ?>');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_KEY_NOT_CORRECT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Key verification for Query is not correct!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_FOLDER_NOT_ALLOWED\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('User not allowed to access this folder!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_TOO_LONG\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('<?php echo addslashes($LANG['error_pw_too_long']); ?>');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Item password could not be correctly encrypted!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_PWD_EMPTY\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html('Item password is empty!');\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.error == \"ERR_ENCRYPTION\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\").html(data.msg);\n                        $(\"#new_show_error\").show();\n                        LoadingPage();\n                    } else if (data.new_id != \"\") {\n                        $(\"#new_show_error\").addClass(\"hidden\");\n\n                        //add new line directly in list of items\n                        $(\"#full_items_list\").append(data.new_entry);\n\n                        //Increment counter\n                        $(\"#itcount_\"+$(\"#hid_cat\").val()).text(Math.floor($(\"#itcount_\"+$(\"#hid_cat\").val()).text())+1);\n\n                        // prepare the display of the new item\n                        AfficherDetailsItem(data.new_id);\n\n                        // refresh list of items\n                        ListerItems($('#categorie').val(), \"\", 0)\n\n                        refreshTree($('#categorie').val());\n\n                        //empty form\n                        $(\"#label, #item_login, #email, #url, #pw1, #visible_pw, #pw2, #item_tags, #deletion_after_date, #times_before_deletion, #mypassword_complex\").val(\"\");\n                        CKEDITOR.instances[\"desc\"].setData(\"\");\n\n                        $(\"#item_tabs\").tabs({selected: 0});\n                        $('ul#full_items_list>li').tsort(\"\",{order:\"asc\",attr:\"name\"});\n                        $(\".fields, .item_field, #categorie, #random_id\").val(\"\");\n                        $(\".fields_div, #item_file_queue, #display_title, #visible_pw\").html(\"\");\n\n                        $(\"#div_formulaire_saisi\").dialog('close');\n                        $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                    }\n                    $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n                    $(\"#div_loading\").addClass(\"hidden\");\n                }\n           );\n        } else {\n            $('#new_show_error').html(\"<?php echo addslashes($LANG['error_complex_not_enought']); ?>\").show();\n            $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n            $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n        }\n    }\n    if (erreur != \"\") {\n        $('#new_show_error').html(erreur).show();\n        $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n    }\n}\n\nfunction EditerItem()\n{\n    $(\"#div_formulaire_edition_item_info\").html(\"<?php echo \"<i class='fa fa-cog fa-spin fa-lg'></i>&nbsp;\".addslashes($LANG['please_wait']).\"...\"; ?>\").show();\n    $(\"#item_detail_zone_loader\").addClass(\"hidden\");\n    var erreur = \"\";\n    var  reg=new RegExp(\"[.|,|;|:|!|=|+|-|*|/|#|\\\"|'|&]\");\n\n    //Complete url format\n    var url = $(\"#edit_url\").val();\n    if (url.substring(0,7) != \"http://\" && url!=\"\" && url.substring(0,8) != \"https://\" && url.substring(0,6) != \"ftp://\" && url.substring(0,6) != \"ssh://\") {\n        url = \"http://\"+url;\n    }\n\n    // do checks\n    if ($('#edit_label').val() == \"\") erreur = \"<?php echo addslashes($LANG['error_label']); ?>\";\n    else if ($(\"#edit_pw1\").val() === \"\" && $(\"#create_item_without_password\").val() !== \"1\") erreur = \"<?php echo addslashes($LANG['error_pw']); ?>\";\n    else if ($(\"#edit_pw1\").val() != $(\"#edit_pw2\").val()) erreur = \"<?php echo addslashes($LANG['error_confirm']); ?>\";\n    else if ($(\"#edit_tags\").val() != \"\" && reg.test($(\"#edit_tags\").val())) erreur = \"<?php echo addslashes($LANG['error_tags']); ?>\";\n    else if ($(\"#edit_categorie option:selected\").val() == \"\" || typeof  $(\"#edit_categorie option:selected\").val() === \"undefined\")  erreur = \"<?php echo addslashes($LANG['error_no_selected_folder']); ?>\";\n    else{\n        //Check pw complexity level\n        if ((\n                $(\"#bloquer_modification_complexite\").val() == 0 &&\n                parseInt($(\"#edit_mypassword_complex\").val()) >= parseInt($(\"#complexite_groupe\").val())\n           )\n            ||\n            ($(\"#bloquer_modification_complexite\").val() == 1)\n            ||\n            ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)\n            ||\n            $(\"#create_item_without_password\").val() === \"1\"\n      ) {\n            LoadingPage();  //afficher image de chargement\n            var annonce = 0;\n            if ($('#edit_annonce').attr('checked')) annonce = 1;\n            $(\"#item_detail_zone_loader\").show();\n\n\n            //Manage restriction\n            var restriction = restriction_role = \"\";\n            $(\"#edit_restricted_to_list option:selected\").each(function () {\n                if ($(this).val().indexOf('role_') != -1) {\n                    restriction_role += $(this).val() + \";\";\n                } else {\n                    restriction += $(this).val() + \";\";\n                }\n            });\n            if (restriction != \"\" && restriction.indexOf($('#form_user_id').val()) == \"-1\")\n                restriction = $('#form_user_id').val()+\";\"+restriction\n            if (restriction == \";\") restriction = \"\";\n\n\n            //Manage diffusion list\n            var myselect = document.getElementById('edit_annonce_liste_destinataires');\n            var diffusion = \"\";\n            for (var loop=0; loop < myselect.options.length; loop++) {\n                if (myselect.options[loop].selected === true) diffusion = diffusion + myselect.options[loop].value + \";\";\n            }\n            if (diffusion == \";\") {\n                diffusion = \"\";\n            }\n\n            //Manage description\n            if (CKEDITOR.instances[\"edit_desc\"]) {\n                var description = sanitizeString(CKEDITOR.instances[\"edit_desc\"].getData()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            } else {\n                var description = sanitizeString($(\"#edit_desc\").val()).replace(/\\n/g, '<br />').replace(/\\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;');\n            }\n\n            // Sanitize description with Safari\n            description = clean_up_html_safari(description);\n\n            //Is PF\n            if ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1) {\n                var is_pf = 1;\n            } else {\n                var is_pf = 0;\n            }\n\n          //To be deleted\n            if ($(\"#edit_enable_delete_after_consultation\").is(':checked')\n                && ($(\"#edit_times_before_deletion\").val() >= 1 || $(\"#edit_deletion_after_date\").val() != \"\")\n            ) {\n                if ($(\"#edit_times_before_deletion\").val() >= 1) {\n                    var to_be_deleted = $(\"#edit_times_before_deletion\").val();\n                    //var to_be_deleted_after_date = \"\";\n                } else if ($(\"#edit_deletion_after_date\").val() != \"\") {\n                    //var to_be_deleted = \"0\";\n                    var to_be_deleted = $(\"#edit_deletion_after_date\").val();\n                }\n            } else {\n                var to_be_deleted = \"\";\n                //var to_be_deleted_after_date = \"\";\n            }\n\n            // get item field values\n            var fields = \"\";\n            $('.edit_item_field').each(function(i){\n                id = $(this).attr('id').split('_');\n                if (fields == \"\") fields = id[2] + '~~' + $(this).val();\n                else fields += '_|_' + id[2] + '~~' + $(this).val();\n            });\n\n              //prepare data\n            var data = {\"pw\": sanitizeString($('#edit_pw1').val()) , \"label\": sanitizeString($('#edit_label').val()) ,\n                \"login\": sanitizeString($('#edit_item_login').val()) , \"is_pf\": is_pf ,\n                \"description\": description , \"email\": $('#edit_email').val() , \"url\": url ,\n                \"categorie\": $(\"#edit_categorie option:selected\").val() , \"restricted_to\": restriction ,\n                \"restricted_to_roles\": restriction_role , \"salt_key_set\": $('#personal_sk_set').val() ,\n                \"is_pf\": $('#recherche_group_pf').val() , \"annonce\": annonce , \"diffusion\": diffusion ,\n                \"id\": $('#id_item').val() , \"anyone_can_modify\": $('#edit_anyone_can_modify:checked').val() ,\n                \"tags\": sanitizeString($('#edit_tags').val()) , \"to_be_deleted\": to_be_deleted ,\n                \"fields\": sanitizeString(fields) , \"complexity_level\": parseInt($(\"#edit_mypassword_complex\").val())};\n\n            //send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"update_item\",\n                    data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\")\n                            .html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+\n                            data);\n                        $(\"#div_dialog_message\").dialog(\"open\");\n                        return;\n                    }\n\n                    //check if format error\n                    if (data.error === \"ERR_JSON_FORMAT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html(data.error + ' ERROR (JSON is broken)!!!!!')\n                            .show();\n                    } else if (data.error === \"ERR_KEY_NOT_CORRECT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('Key verification for Query is not correct!')\n                            .show();\n                        LoadingPage();\n                    }else if (data.error === \"ERR_ENCRYPTION_NOT_CORRECT\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('Item password could not be correctly encrypted!')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error === \"ERR_PWD_TOO_LONG\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('<?php echo addslashes($LANG['error_pw_too_long']); ?>')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error === \"ERR_NOT_ALLOWED_TO_EDIT\") {\n                        $(\"#div_formulaire_saisi\").dialog(\"open\");\n                        $(\"#new_show_error\")\n                            .html('User not allowed to edit this Item!')\n                            .show();\n                        LoadingPage();\n                    } else if (data.error !== \"\") {\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#edit_show_error\")\n                            .html('<?php echo addslashes($LANG['error_not_allowed_to']); ?>')\n                            .show();\n                        LoadingPage();\n                    } else {\n                        //refresh item in list\n                        $(\"#fileclass\"+data.id).text($('#edit_label').val());\n\n                        //Refresh form\n                        $(\"#id_label\").text($('#edit_label').val());\n                        //$(\"#id_pw\").text($('#edit_pw1').val());\n                        $(\"#id_email\").html($('#edit_email').val());\n                        $(\"#id_url\").html($('#edit_url').val().escapeHTML());\n                        $(\"#id_desc\").html(description);\n                        $(\"#id_login\").html($('#edit_item_login').val());\n                        $(\"#id_restricted_to\").html(data.list_of_restricted);\n                        $(\"#id_tags\").html(data.tags);\n                        $(\"#id_files\").html(unsanitizeString(data.files));\n                        $(\"#item_edit_list_files\").html(data.files_edit);\n                        $(\"#id_info\").html(unsanitizeString(data.history));\n                        $('#id_pw').html('<?php echo $var['hidden_asterisk']; ?>');\n\n                        //Refresh hidden data\n                        $(\"#hid_label\").val($('#edit_label').val());\n                        $(\"#hid_pw\").val($('#edit_pw1').val());\n                        $(\"#hid_email\").val($('#edit_email').val());\n                        $(\"#hid_url\").val($('#edit_url').val().escapeHTML());\n                        $(\"#hid_desc\").val(description);\n                        $(\"#hid_login\").val($('#edit_item_login').val());\n                        $(\"#hid_restricted_to\").val(restriction);\n                        $(\"#hid_restricted_to_roles\").val(restriction_role);\n                        $(\"#hid_tags\").val($('#edit_tags').val());\n                        $(\"#hid_files\").val(data.files);\n                        /*$(\"#id_categorie\").html(data.id_tree);\n                        $(\"#id_item\").html(data.id);*/\n\n                        // refresh fields\n                        if ($('.edit_item_field').val() != undefined) {\n                            $('.tr_fields').addClass(\"hidden\");\n                            $('.edit_item_field').each(function(i){\n                                id = $(this).attr('id').split('_');\n                                if ($(this).val() !== \"\") {\n                                    // copy data from form to Item Div\n                                    $('#id_field_' + id[2]).html($(this).val());\n                                    $('#hid_field_' + id[2] + '_' + id[3]).val($(this).val());\n                                    $('#cf_tr_' + id[2] + ', .editItemCatName_' + id[3] + ', #tr_catfield_' + id[3]).show()\n                                } else {\n                                    $('#hid_field_' + id[2] + '_' + id[3]).val('');\n                                }\n                                // clear form\n                                $(this).val(\"\");\n                            });\n                        }\n                        $(\"#edit_display_title, #edit_visible_pw\").html(\"\");\n\n                        //calling image lightbox when clicking on link\n                        $(\"a.image_dialog\").click(function(event) {\n                            event.preventDefault();\n                            PreviewImage($(this).attr(\"href\"),$(this).attr(\"title\"));\n                        });\n\n                        //Change title in \"last items list\"\n                        $(\"#last_items_\"+data.id).text($('#edit_label').val());\n\n                        //Clear upload queue\n                        $('#item_edit_file_queue').html('');\n                        //Select 1st tab\n                        $(\"#item_edit_tabs\").tabs({ selected: 0 });\n\n                        //if reload page is needed\n                        if (data.reload_page == \"1\") {\n                            //reload list\n                            ListerItems($('#hid_cat').val(), \"\", 0)\n                            //increment / decrement number of items in folders\n                            $(\"#itcount_\"+$('#hid_cat').val()).text(Math.floor($(\"#itcount_\"+$('#hid_cat').val()).text())-1);\n                            $(\"#itcount_\"+$('#edit_categorie').val()).text(Math.floor($(\"#itcount_\"+$('#edit_categorie').val()).text())+1);\n                        }\n\n                        // tags\n                        $(\".round-grey\").addClass(\"ui-state-highlight ui-corner-all\");\n\n                        //Prepare clipboard copies\n                        if ($('#edit_pw1').val() != \"\") {\n                            new Clipboard(\"#menu_button_copy_pw, #button_quick_pw_copy\", {\n                                text: function() {\n                                    return unsanitizeString($('#edit_pw1').val());\n                                }\n                            });\n\n                            $(\"#button_quick_pw_copy\").show();\n                        } else {\n                            $(\"#button_quick_pw_copy\").addClass(\"hidden\");\n                        }\n                        if ($('#edit_item_login').val() != \"\") {\n                            var clipboard_elogin = new Clipboard(\"#menu_button_copy_login, #button_quick_login_copy\", {\n                                text: function() {\n                                    return unsanitizeString($('#edit_item_login').val());\n                                }\n                            });\n                            $(\"#button_quick_login_copy\").show();\n                        } else {\n                            $(\"#button_quick_login_copy\").addClass(\"hidden\");\n                        }\n\n\n                        $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        //Close dialogbox\n                        $(\"#div_formulaire_edition_item\").dialog('close');\n                        $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        //hide loader\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n                }\n           );\n\n           // statistic\n           /*$.post(\n                \"sources/main.queries.php\",\n                {\n                    type                : 'item_stat',\n                    id                  : $('#id_item').val(),\n                    stat_action                : \"item\"\n                },\n                function(data) {\n\n                }\n            );*/\n\n        } else {\n            $('#edit_show_error').html(\"<?php echo addslashes($LANG['error_complex_not_enought']); ?>\").show();\n            $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n            $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n        }\n    }\n\n    if (erreur != \"\") {\n        $('#edit_show_error').html(erreur).show();\n        $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n        $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n    }\n}\n\nfunction AddNewFolder()\n{\n    if ($(\"#new_rep_titre\").val() == \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_label']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#new_rep_groupe\").val() === \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_noparent']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#new_rep_complexite\").val() == \"\") {\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_complex']); ?>\").removeClass(\"hidden\");\n    } else if (/^\\d+$/.test($(\"#new_rep_titre\").val())) {\n        // check if folder title contains only numbers\n        $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\").removeClass(\"hidden\");\n    } else if ($(\"#user_ongoing_action\").val() == \"\") {\n        $(\"#add_folder_loader\").removeClass(\"hidden\");\n        $(\"#user_ongoing_action\").val(\"true\");\n        $(\"#new_rep_show_error\").addClass(\"hidden\");\n        if ($(\"#new_rep_role\").val() == undefined) {\n            role_id = \"<?php echo $_SESSION['fonction_id']; ?>\";\n        } else {\n            role_id = $(\"#new_rep_role\").val();\n        }\n\n        //prepare data\n        var data = {\"title\": sanitizeString($('#new_rep_titre').val()),\n            \"complexity\": sanitizeString($('#new_rep_complexite').val()), \"is_pf\": $('#pf_selected').val(),\n            \"parent_id\": $(\"#new_rep_groupe option:selected\").val(), \"renewal_period\":\"0\"};\n\n        //send query\n        $.post(\n            \"sources/folders.queries.php\",\n            {\n                type   : \"add_folder\",\n                data   : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key    : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#user_ongoing_action\").val(\"\");\n                //Check errors\n                if (data[0].error == \"error_group_exist\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_exist']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error == \"error_html_codes\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_html_codes']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error == \"error_title_only_with_numbers\") {\n                    $(\"#new_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\").removeClass(\"hidden\");\n                } else if (data[0].error != \"\") {\n                    $(\"#new_rep_show_error\").html(data[0].error).removeClass(\"hidden\");\n                } else {\n                    $(\"#new_rep_titre\").val(\"\");\n                    refreshTree(data[0].newid);\n                    $(\"#div_ajout_rep\").dialog(\"close\");\n                }\n                $(\"#add_folder_loader\").addClass(\"hidden\");\n            },\n            \"json\"\n           );\n    }\n}\n\n\nfunction SupprimerFolder()\n{\n    if ($(\"#delete_rep_groupe_validate\").is(':checked') === false) {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['please_confirm']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else if ($(\"#delete_rep_groupe\").val() === \"0\") {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_group']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else if ($(\"#delete_rep_groupe option:selected\").text() === \"<?php echo $_SESSION['login']; ?>\") {\n        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_not_allowed_to']); ?>\").show(1).delay(2000).fadeOut(1000);\n    } else {\n        $(\"#del_folder_loader\").show();\n        $.post(\n            \"sources/folders.queries.php\",\n            {\n                type    : \"delete_folder\",\n                id      : $(\"#delete_rep_groupe\").val(),\n                key        : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                $(\"#del_folder_loader\").addClass(\"hidden\");\n\n                //decrypt data\n                try {\n                    data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                } catch (e) {\n                    // error\n                    $(\"#div_loading\").addClass(\"hidden\");\n                    $(\"#div_dialog_message_text\")\n                        .html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+\n                        data);\n                    $(\"#div_dialog_message\").dialog(\"open\");\n                    return;\n                }\n\n                if (data.error !== \"\") {\n                    if (data.error === \"ERR_SUB_FOLDERS_EXIST\") {\n                        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_cannot_delete_subfolders_exist']); ?>\").show(1).delay(3000).fadeOut(1000);\n\n                    } else if (data.error === \"ERR_FOLDER_NOT_ALLOWED\") {\n                        $(\"#del_rep_show_error\").html(\"<?php echo '<span class=\\\"fa fa-warning fa-lg\\\"></span>&nbsp;<\\span>'.addslashes($LANG['error_not_allowed_to']); ?>\").show(1).delay(3000).fadeOut(1000);\n                    }\n                } else {\n                    refreshTree(data.parent_id);\n                    ListerItems(data.parent_id,'', 0);\n                    $(\"#div_supprimer_rep\").dialog(\"close\");\n                }\n            }\n       );\n    }\n}\n\nfunction AfficherDetailsItem(id, salt_key_required, expired_item, restricted, display, open_edit, reload, id_tree)\n{\n    // If a request is already launched, then kill new.\n    if ($(\"#request_ongoing\").val() !== \"\") {\n        request.abort();\n        return;\n    }\n    id_tree = id_tree || \"\";\n    salt_key_required = salt_key_required || 0;\n    id_tree = id_tree || \"\";\n    id_tree = id_tree || \"\";\n\n    // Store status query running\n    $(\"#request_ongoing\").val(\"1\");\n\n    // If opening new item, reinit hidden fields\n    if ($(\"#request_lastItem\").val() != id) {\n        $(\"#request_lastItem\").val(\"\");\n        $(\"#item_editable\").val(\"\");\n    }\n\n    // Don't show details\n    if (display === \"no_display\") {\n        $(\"#item_details_nok\").removeClass(\"hidden\");\n        $(\"#item_details_ok\").addClass(\"hidden\");\n        $(\"#item_details_expired\").addClass(\"hidden\");\n        $(\"#item_details_expired_full\").addClass(\"hidden\");\n        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_url, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n        $(\"#request_ongoing\").val(\"\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n    if ($(\"#is_admin\").val() == \"1\") {\n        $('#menu_button_edit_item,#menu_button_del_item,#menu_button_copy_item').attr('disabled', 'disabled');\n    }\n\n    if ($(\"#edit_restricted_to\") != undefined) {\n        $(\"#edit_restricted_to\").val(\"\");\n    }\n\n    // Check if personal SK is needed and set\n    if (($('#recherche_group_pf').val() === \"1\" && $('#personal_sk_set').val() === \"0\") && salt_key_required === \"1\") {\n        $(\"#set_personal_saltkey_warning\").html(\"<div style='font-size:16px;'><span class='fa fa-warning fa-lg'></span>&nbsp;</span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?></div>\").show(1).delay(2500).fadeOut(1000);\n        $('#div_set_personal_saltkey').dialog('open');\n\n        //$(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='fa fa-warning fa-lg mi-red'></span>&nbsp;<\\/span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?><\\/div>\");\n        $(\"#div_loading\").addClass(\"hidden\");\n        //$(\"#div_dialog_message\").dialog(\"open\");\n        $(\"#request_ongoing\").val(\"\");\n        return false;\n    } else if ($('#recherche_group_pf').val() === \"0\" || ($('#recherche_group_pf').val() === \"1\" && $('#personal_sk_set').val() === \"1\")) {\n        // Double click\n        if (open_edit == 1 && $(\"#item_editable\").val() == 1 && reload != 1) {\n            $(\"#request_ongoing\").val(\"\");\n            open_edit_item_div(\n                <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === \"1\") {\n    echo 1;\n} else {\n    echo 0;\n}?>\n            );\n        } else if ($(\"#request_lastItem\").val() == id && reload != 1) {\n            $(\"#request_ongoing\").val(\"\");\n            LoadingPage();\n            return;\n        } else {\n            $(\"#timestamp_item_displayed\").val(\"\");\n            var data = {\n                \"id\" : id,\n                \"folder_id\" : $('#hid_cat').val(),\n                \"salt_key_required\" : $('#recherche_group_pf').val(),\n                \"salt_key_set\" : $('#personal_sk_set').val(),\n                \"expired_item\" : expired_item,\n                \"restricted\" : restricted,\n                \"page\" : \"items\"\n            };\n\n            //Send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type : 'show_details_item',\n                    data : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key  : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data_raw) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data_raw , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#request_ongoing\").val(\"\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data_raw);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error != \"\") {\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data.error);\n                        $(\"#div_dialog_message\").show();\n                    }\n\n                    // reset password shown info\n                    $(\"#pw_shown\").val(\"0\");\n\n                    // show some info on top\n                    if (data.auto_update_pwd_frequency != \"0\") var auto_update_pwd = \"<i class='fa fa-shield tip' title='<?php echo addslashes($LANG['server_auto_update_password_enabled_tip']); ?>'></i>&nbsp;<b>\"+data.auto_update_pwd_frequency+\"</b>&nbsp;|&nbsp;\";\n                    else var auto_update_pwd = \"\";\n                    $(\"#item_viewed_x_times\").html(auto_update_pwd+\"&nbsp;<i class='fa fa-sticky-note-o tip' title='Number of times item was displayed'></i>&nbsp;<b>\"+data.viewed_no+\"</b>\");\n\n                    // Show timestamp\n                    $(\"#timestamp_item_displayed\").val(data.timestamp);\n\n                    //Change the class of this selected item\n                    if ($(\"#selected_items\").val() != \"\") {\n                        $(\"#fileclass\"+$(\"#selected_items\").val()).removeClass(\"fileselected\");\n                    }\n                    $(\"#selected_items\").val(data.id);\n\n                    //Show saltkey\n                    if (data.edit_item_salt_key == \"1\") {\n                        $(\"#edit_item_salt_key\").show();\n                    } else {\n                        $(\"#edit_item_salt_key\").addClass(\"hidden\");\n                    }\n\n                    // clean some not used fields\n                    //$(\"#item_history_log, #edit_past_pwds, #hid_files, #item_edit_list_files\").html(\"\");\n\n                    //Show detail item\n                    if (data.show_detail_option == \"0\") {\n                        $(\"#item_details_ok\").removeClass(\"hidden\");\n                        $(\"#item_details_expired, #item_details_expired_full\").addClass(\"hidden\");\n                    }if (data.show_detail_option == \"1\") {\n                        $(\"#item_details_ok, #item_details_expired\").removeClass(\"hidden\");\n                        $(\"#item_details_expired_full\").addClass(\"hidden\");\n                    } else if (data.show_detail_option == \"2\") {\n                        $(\"#item_details_ok, #item_details_expired, #item_details_expired_full\").addClass(\"hidden\");\n                    }\n                    $(\"#item_details_nok\").addClass(\"hidden\");\n                    $(\"#fileclass\"+data.id).addClass(\"fileselected\");\n                    $(\"item_editable\").val(0);\n\n                    if (data.show_details == \"1\" && data.show_detail_option != \"2\") {\n                        //unprotect data\n                        data.login = unsanitizeString(data.login);\n\n                        $(\"#id_files\").html(\"\");\n\n                        //Display details\n                        $(\"#id_label\").html(data.label);\n                        $(\"#hid_label\").val(unsanitizeString(data.label));\n                        if (data.pw === \"\") {\n                            $(\"#id_pw\").html(\"\");\n                        } else {\n                            $(\"#id_pw\").html('<?php echo $var['hidden_asterisk']; ?>');\n                        }\n                        $(\"#hid_pw\").val(unsanitizeString(data.pw));\n                        if (data.url != \"\") {\n                            $(\"#id_url\").html(data.url+data.link);\n                            $(\"#hid_url\").val(data.url);\n                        } else {\n                            $(\"#id_url\").html(\"\");\n                            $(\"#hid_url\").val(\"\");\n                        }\n                        $(\"#id_desc\").html(data.description);\n                        $(\"#hid_desc\").val(data.description);\n                        $(\"#id_login\").html(data.login);\n                        $(\"#hid_login\").val(data.login);\n                        $(\"#id_email\").html(data.email);\n                        $(\"#hid_email\").val(data.email);\n                        //prepare nice list of users / groups\n                        var tmp_arr = data.id_restricted_to.split(\";\");\n                        var html_users = \"\";\n                        for (var i=0; i<tmp_arr.length; i++) {\n                            if (tmp_arr[i] !== \"\") html_users += \"<span class='round-grey'><i style='margin-right:2px;' class='fa fa-user fa-sm'></i>\"+tmp_arr[i]+\"</span>\";\n                        }\n                        var tmp_arr = data.id_restricted_to_roles.split(\";\");\n                        var html_groups = \"\";\n                        for (var i=0; i<tmp_arr.length; i++) {\n                            if (tmp_arr[i] !== \"\") html_groups += \"<span class='round-grey'><i style='margin-right:2px;' class='fa fa-group fa-sm'></i>\"+tmp_arr[i]+\"</span>\";\n                        }\n                        $(\"#id_restricted_to\").html(\n                            html_users+\n                            html_groups\n                        );\n                        $(\"#hid_restricted_to\").val(data.id_restricted_to);\n                        $(\"#hid_restricted_to_roles\").val(data.id_restricted_to_roles);\n                        $(\"#id_tags\").html(data.tags);\n                        // extract real tags list\n                        var item_tag = \"\";\n                        $(\"span.item_tag\").each(function(){\n                            if (item_tag == \"\") item_tag = $(this).text();\n                            else item_tag += \" \"+$(this).text();\n                        });\n                        $(\"#hid_tags\").val(item_tag);\n                        $(\"#hid_anyone_can_modify\").val(data.anyone_can_modify);\n                        $(\"#id_categorie\").val(data.folder);\n                        $(\"#id_item\").val(data.id);\n                        $(\"#id_kbs\").html(data.links_to_kbs);\n                        $(\".tip\").tooltipster({\n                            maxWidth: 400,\n                            contentAsHTML: true,\n                            multiple: true\n                        });\n\n                        // ---\n                        // Show Field values\n                        $(\".fields\").val(\"\");\n                        $(\".fields_div\").html(\"\");\n                        // If no CF then hide\n                        if (data.fields === \"\") {\n                            $(\".tr_fields\").addClass(\"hidden\");\n                        } else {\n                            $(\".tr_cf, .tr_fields\").removeClass(\"hidden\");\n                            var liste = data.fields.split('_|_');\n                            for (var i=0; i<liste.length; i++) {\n                                var field = liste[i].split('~~');\n                                $(\"#cf_tr_\" + field[0] + \", #tr_catfield_\" + field[2]).show();\n                                $('#hid_field_' + field[0] + '_' + field[2]).val(field[1]);\n                                if (field[3] === \"masked\") {\n                                    $('#id_field_' + field[0] + '_' + field[2])\n                                        .html('<?php echo $var['hidden_asterisk']; ?>');\n                                } else {\n                                    $('#id_field_' + field[0] + '_' + field[2])\n                                        .html(field[1]);\n                                }\n                            }\n                        }\n\n                        //Anyone can modify button\n                        if (data.anyone_can_modify == \"1\") {\n                            $(\"#edit_anyone_can_modify\").attr('checked', true);\n                            $(\"#new_history_entry_form\").show();\n                        } else {\n                            $(\"#edit_anyone_can_modify\").attr('checked', false);\n                            $(\"#new_history_entry_form\").addClass(\"hidden\");\n                        }\n\n                        //Show to be deleted in case activated\n                        if (data.to_be_deleted == \"not_enabled\") {\n                            $(\"#edit_to_be_deleted\").addClass(\"hidden\");\n                        } else {\n                            $(\"#edit_to_be_deleted\").show();\n                            if (data.to_be_deleted != \"\") {\n                                $(\"#edit_enable_delete_after_consultation\").attr(\"checked\",true);\n                                if (data.to_be_deleted_type == 2) {\n                                    $(\"#edit_times_before_deletion\").val(\"\");\n                                    $(\"#edit_deletion_after_date\").val(data.to_be_deleted);\n                                } else {\n                                    $(\"#edit_times_before_deletion\").val(data.to_be_deleted);\n                                    $(\"#edit_deletion_after_date\").val(\"\");\n                                }\n                            } else {\n                                $(\"#edit_enable_delete_after_consultation\").attr(\"checked\",false);\n                                $(\"#edit_times_before_deletion, #edit_deletion_after_date\").val(\"\");\n                            }\n                        }\n\n                        //manage buttons\n                        if ($(\"#user_is_read_only\").val() == 1) {\n                            $('#menu_button_add_item, #menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item').attr('disabled', 'disabled');\n                        } else if (data.user_can_modify == 0) {\n                            $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item').attr('disabled', 'disabled');\n                        } else if (data.restricted == \"1\" || data.user_can_modify == \"1\") {\n                            //$(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item\").prop(\"disabled\", false);\n                            var param = \"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item\";\n                            $(\"#new_history_entry_form\").show();\n                        } else {\n                            //$(\"#menu_button_add_item, #menu_button_copy_item\").prop(\"disabled\", false);\n                            var param = \"#menu_button_del_item, #menu_button_copy_item\";\n                            $(\"#new_history_entry_form\").show();\n                        }\n                        //$(\"#menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link, #menu_button_history\").prop(\"disabled\", false);\n\n                        // disable share button for personal folder\n                        if ($(\"#recherche_group_pf\").val() == 1) {\n                            $(\"#menu_button_share, #menu_button_otv\").attr('disabled', 'disabled');\n                        } else {\n                            $(\"#menu_button_share, #menu_button_otv\").prop(\"disabled\", false);\n                        }\n\n                        //Manage to deleted information\n                        if (data.to_be_deleted != 0 && data.to_be_deleted != null && data.to_be_deleted != \"not_enabled\") {\n                            $('#item_extra_info')\n                                .html(\"<b><i class='fa fa-bell-o mi-red'></i></b>&nbsp;\")\n                                .attr(\"title\", \"<?php echo addslashes($LANG['automatic_deletion_activated']); ?>\");\n                            $('#item_extra_info').tooltipster({multiple: true});\n                        } else {\n                            $('#item_extra_info').html(\"\");\n                        }\n\n                        if (data.notification_status == 0 && data.id_user == <?php echo $_SESSION['user_id']; ?>) {\n                            $('#menu_button_notify')\n                                .prop(\"disabled\", false)\n                                .attr('title','<?php echo addslashes($LANG['enable_notify']); ?>')\n                                .attr('onclick','notify_click(\\'true\\')');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                        } else if (data.notification_status == 1 && data.id_user == <?php echo $_SESSION['user_id']; ?>) {\n                            $('#menu_button_notify')\n                                .prop(\"disabled\", false)\n                                .attr('title','<?php echo addslashes($LANG['disable_notify']); ?>')\n                                .attr('onclick','notify_click(\\'false\\')');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell-slash mi-red\"></i>&nbsp;');\n                            $('#item_extra_info').html(\"<i><i class=\\'fa fa-bell mi-green\\'></i>&nbsp;<?php echo addslashes($LANG['notify_activated']); ?></i>\");\n                        } else {\n                            $('#menu_button_notify').attr('disabled', 'disabled');\n                            $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                        }\n\n                        //Prepare clipboard copies\n                        if (data.pw != \"\") {\n                            var clipboard_pw = new Clipboard(\"#menu_button_copy_pw, #button_quick_pw_copy\", {\n                                text: function() {\n                                    return (unsanitizeString(data.pw));\n                                }\n                            });\n                            clipboard_pw.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['pw_copied_clipboard']); ?>\").show().fadeOut(1000);\n                                itemLog(\"item_password_copied\");\n\n                                e.clearSelection();\n                            });\n\n                            $(\"#button_quick_pw_copy\").show();\n                        } else {\n                            $(\"#button_quick_pw_copy\").addClass(\"hidden\");\n                        }\n                        if (data.login != \"\") {\n                            var clipboard_login = new Clipboard(\"#menu_button_copy_login, #button_quick_login_copy\", {\n                                text: function() {\n                                    return (data.login);\n                                }\n                            });\n                            clipboard_login.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['login_copied_clipboard']); ?>\").show().fadeOut(1000);\n\n                                e.clearSelection();\n                            });\n                            $(\"#button_quick_login_copy\").show();\n                        } else {\n                            $(\"#button_quick_login_copy\").addClass(\"hidden\");\n                        }\n                        // #525\n                        if (data.url != \"\") {\n                            var clipboard_url = new Clipboard(\"#menu_button_copy_url\", {\n                                text: function() {\n                                    return unsanitizeString(data.url);\n                                }\n                            });\n                            clipboard_url.on('success', function(e) {\n                                $(\"#message_box\").html(\"<?php echo addslashes($LANG['url_copied_clipboard']); ?>\").show().fadeOut(1000);\n\n                                e.clearSelection();\n                            });\n                        }\n\n                        //prepare link to clipboard\n                        var clipboard_link = new Clipboard(\"#menu_button_copy_link\", {\n                            text: function() {\n                                return \"<?php echo $SETTINGS['cpassman_url']; ?>\"+\"/index.php?page=items&group=\"+data.folder+\"&id=\"+data.id;\n                            }\n                        });\n                        clipboard_link.on('success', function(e) {\n                            $(\"#message_box\").html(\"<?php echo addslashes($LANG['url_copied']); ?>\").show().fadeOut(1000);\n\n                            e.clearSelection();\n                        });\n\n\n                        //set if user can edit\n                        if (data.restricted == \"1\" || data.user_can_modify == \"1\") {\n                            $(\"#item_editable\").val(1);\n                        }\n\n                        //Manage double click\n                        if (open_edit === true && (data.restricted == \"1\" || data.user_can_modify == \"1\")) {\n                            open_edit_item_div(\n                            <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1) {\n    echo 1;\n} else {\n    echo 0;\n}?>);\n                        }\n\n                        // tags\n                        $(\".round-grey\").addClass(\"ui-state-highlight ui-corner-all\");\n\n                        // continue loading data\n                        showDetailsStep2(id, param);\n\n                    } else if (data.show_details === \"1\" && data.show_detail_option === \"2\") {\n                        $(\"#item_details_nok\").addClass(\"hidden\");\n                        $(\"#item_details_ok\").addClass(\"hidden\");\n                        $(\"#item_details_expired_full\").show();\n                        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    } else {\n                        //Dont show details\n                        $(\"#item_details_nok\").removeClass(\"hidden\");\n                        $(\"#item_details_nok_restriction_list\").html('<div style=\"margin:10px 0 0 20px;\"><b><?php echo addslashes($LANG['author']); ?>: </b>' + data.author + '<br /><b><?php echo addslashes($LANG['restricted_to']); ?>: </b>' + data.restricted_to + '<br /><br /><u><a href=\"#\" onclick=\"SendMail(\\'request_access_to_author\\',\\'' + data.id + ',' + data.id_user + '\\',\\'<?php echo $_SESSION['key']; ?>\\',\\'<?php echo addslashes($LANG['forgot_my_pw_email_sent']); ?>\\')\"><?php echo addslashes($LANG['request_access_ot_item']); ?></a></u></div>');\n                        $(\"#item_details_ok\").addClass(\"hidden\");\n                        $(\"#item_details_expired\").addClass(\"hidden\");\n                        $(\"#item_details_expired_full\").addClass(\"hidden\");\n                        $(\"#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link\").attr(\"disabled\",\"disabled\");\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n                    $(\"#request_ongoing\").val(\"\");\n                }\n           );\n\n            if (id_tree != \"\" && id_tree != $(\"#hid_cat\").val()) {\n                refreshTree(id_tree, \"0\");\n            }\n\n           // statistic\n           /*$.post(\n                \"sources/main.queries.php\",\n                {\n                    type                : 'item_stat',\n                    id                  : id,\n                    scope                : \"item\"\n                },\n                function(data) {\n\n                }\n            );*/\n       }\n    //Store Item id shown\n    $(\"#request_lastItem\").val(id);\n    }\n}\n\n\n/*\n* Loading Item details step 2\n*/\nfunction showDetailsStep2(id, param)\n{\n    $(\"#div_loading\").removeClass(\"hidden\");\n    $.post(\n        \"sources/items.queries.php\",\n        {\n        type     : \"showDetailsStep2\",\n        id         : id\n        },\n        function(data) {\n            //decrypt data\n            try {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            } catch (e) {\n                // error\n                $(\"#div_loading\").addClass(\"hidden\");\n                $(\"#request_ongoing\").val(\"\");\n                $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\"+data);\n                $(\"#div_dialog_message\").dialog(\"open\");\n\n                return;\n            }\n\n            if (data.error !== \"\") {\n                $(\"#div_dialog_message_text\").html(data.error_text);\n                $(\"#div_dialog_message\").show();\n            }\n\n            $(\"#item_history_log\").html(htmlspecialchars_decode(data.history));\n            $(\"#edit_past_pwds\").attr('title', htmlspecialchars_decode(data.history_of_pwds));\n            $(\"#edit_past_pwds_div\").html(htmlspecialchars_decode(data.history_of_pwds));\n\n            $(\"#id_files\").html(data.files_id);\n            $(\"#hid_files\").val(data.files_id);\n            $(\"#item_edit_list_files\").html(data.files_edit);\n\n            //$(\"#div_last_items\").html(htmlspecialchars_decode(data.div_last_items));\n\n            // function calling image lightbox when clicking on link\n            $(\"a.image_dialog\").click(function(event) {\n                event.preventDefault();\n                PreviewImage($(this).attr(\"href\"),$(this).attr(\"title\"));\n            });\n\n            //Set favourites icon\n            if (data.favourite == \"1\") {\n                $(\"#menu_button_add_fav\").attr(\"disabled\",\"disabled\");\n                $(\"#menu_button_del_fav\").prop(\"disabled\", false);\n            } else {\n                $(\"#menu_button_add_fav\").prop(\"disabled\", false);\n                $(\"#menu_button_del_fav\").attr(\"disabled\",\"disabled\");\n            }\n\n            // set indicator if item has change proposal\n            if (data.has_change_proposal !== 0) {\n                $(\"#item_extra_info\").prepend('<i class=\"fa fa-lightbulb-o fa-sm mi-yellow tip\" title=\"<?php echo addslashes($LANG['item_has_change_proposal']); ?>\" onclick=\"\"></i>&nbsp;');\n            }\n\n            $(param).prop(\"disabled\", false);\n            $(\"#menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link, #menu_button_history\").prop(\"disabled\", false);\n            $(\"#div_loading\").addClass(\"hidden\");\n\n            $(\".tip\").tooltipster({multiple: true});\n\n            // refresh\n            if ($(\"#hid_cat\").val() !== \"\") {\n                refreshListLastSeenItems();\n            }\n         }\n     );\n};\n\n/*\n   * FUNCTION\n   * Launch an action when clicking on a quick icon\n   * $action = 0 => Make not favorite\n   * $action = 1 => Make favorite\n*/\nfunction ActionOnQuickIcon(id, action)\n{\n    //change quick icon\n    if (action == 1) {\n        $(\"#quick_icon_fav_\"+id).html(\"<i class='fa fa-sm fa-star mi-yellow' onclick='ActionOnQuickIcon(\"+id+\",0)'></i>\");\n    } else if (action == 0) {\n        $(\"#quick_icon_fav_\"+id).html(\"<i class='fa fa-sm fa-star-o' onclick='ActionOnQuickIcon(\"+id+\",1)'></i>\");\n    }\n\n    //Send query\n    LoadingPage();\n    $.post(\"sources/items.queries.php\",\n        {\n            type    : 'action_on_quick_icon',\n            id      : id,\n            action  : action\n        },\n        function(data) {\n            LoadingPage();\n            displayMessage(\"<?php echo addslashes($LANG['alert_message_done']); ?>\");\n        }\n   );\n}\n\n//###########\n//## FUNCTION : prepare new folder dialogbox\n//###########\nfunction open_add_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"create_folder\") == 0) {\n        return false;\n    }\n\n    //Select the actual folder in the dialogbox\n    $('#new_rep_groupe option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#div_ajout_rep').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare editing folder dialogbox\n//###########\nfunction open_edit_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"edit_folder\") == 0) {\n        return false;\n    }\n\n    //Select the actual forlder in the dialogbox\n    $('#edit_folder_folder option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#edit_folder_title').val($.trim($('#edit_folder_folder :selected').text()));\n    $('#edit_folder_complexity').val($('#complexite_groupe').val());\n    $('#div_editer_rep').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare moving folder dialogbox\n//###########\nfunction open_move_group_div()\n{\n    if ($.inArray($(\"#hid_cat\").val(), $(\"#personal_visible_groups_list\").val().split(',')) != -1 && $(\"#personal_sk_set\").val() === \"0\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_personal_sk_expected']); ?>\");\n        return false;\n    }\n\n    if ($(\"#hid_cat\").val() == \"<?php if (isset($_SESSION['personal_folders'][0])) {\n    echo $_SESSION['personal_folders'][0];\n} else {\n    echo \"\";\n}\n?>\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0) == 0) return false;\n\n    //Select the actual folder in the dialogbox\n    //$('#move_folder_id option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n    $('#move_folder_title').html($.trim($('#move_folder_id :selected').text())+\" [id\"+$('#hid_cat').val()+\"]\");\n    $('#move_folder_id').val(0);\n    $('#div_move_folder').dialog('open');\n    $(\"#div_loading\").addClass(\"hidden\");\n}\n\n//###########\n//## FUNCTION : prepare delete folder dialogbox\n//###########\nfunction open_del_group_div()\n{\n    if ($(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == 1) {\n        displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n\n    // check if read only or forbidden\n    if (RecupComplexite($('#hid_cat').val(), 0, \"delete_folder\") == 0) {\n        return false;\n    } else {\n        $('#div_supprimer_rep').dialog('open');\n        $('#delete_rep_groupe option[value=' + $('#hid_cat').val() + ']').prop('selected', true);\n        $(\"#div_loading\").addClass(\"hidden\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare new item dialogbox\n//###########\nfunction open_add_item_div()\n{\n    LoadingPage();\n\n    //Check if personal SK is needed and set\n    if ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 0) {\n        $(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'><\\/span><?php echo addslashes($LANG['alert_message_personal_sk_missing']); ?><\\/div>\");\n        LoadingPage();\n        $(\"#div_dialog_message\").dialog(\"open\");\n    } else if ($(\"#hid_cat\").val() == \"\") {\n        LoadingPage();\n        $(\"#div_dialog_message_text\").html(\"<div style='font-size:16px;'><span class='ui-icon ui-icon-alert' style='float: left; margin-right: .3em;'><\\/span><?php echo addslashes($LANG['error_no_selected_folder']); ?><\\/div>\").dialog(\"open\");\n    } else if ($('#recherche_group_pf').val() == 0 || ($('#recherche_group_pf').val() == 1 && $('#personal_sk_set').val() == 1)) {\n        // is user read only and it is not a personal folder\n        if ($('#recherche_group_pf').val() == 0 && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == \"1\") {\n            displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n            LoadingPage();\n            return false;\n        }\n\n        //Select the actual forlder in the dialogbox\n        $('#categorie').val($('#hid_cat').val());\n\n        //Get the associated complexity level\n        var compReturn = RecupComplexite($('#hid_cat').val(), 0);\n\n        // exclude because user is read only\n        if (compReturn == 0) {\n            $(\"#div_loading\").addClass(\"hidden\");\n            return false;\n        }\n\n        //Show WYGIWYS editor\n        CKEDITOR.replace(\n            \"desc\",\n            {\n                toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]],\n                height: 100,\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            }\n        );\n\n        // prepare select2 for users\n        $(\"#annonce_liste_destinataires\").select2({\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        });\n\n        if ($(\"#recherche_group_pf\").val() == 1) {\n            $(\"#div_editRestricted\").addClass(\"hidden\");\n        } else {\n            $(\"#div_editRestricted\").show();\n        }\n\n        //open dialog\n        $(\"#div_formulaire_saisi_info\").addClass(\"hidden\").html(\"\");\n        $(\"#div_formulaire_saisi\").dialog(\"open\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare editing item dialogbox\n//###########\nfunction open_edit_item_div(restricted_to_roles)\n{\n    // is user read only and it is not a personal folder\n    if (\n        ($('#recherche_group_pf').val() === \"0\" && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() === \"1\")\n        || (\n            ($(\"#access_level\").val() === \"1\" || $(\"#access_level\").val() === \"3\")\n            && $('#recherche_group_pf').val() === \"0\"\n        )\n    ) {\n        // Exclude the case where the user is in his PF with PSK set\n        if ($('#recherche_group_pf').val() === \"1\" && $(\"#personal_sk_set\").val() === \"1\") {\n            // do nothing\n        } else {\n            displayMessage(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n            return false;\n        }\n    }\n\n    // If no Item selected, no edition possible\n    if ($(\"#selected_items\").val() == \"\") {\n        displayMessage(\"<?php echo addslashes($LANG['none_selected_text']); ?>\");\n        return false;\n    }\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    // Get complexity level for this folder\n    // and stop edition if Item edited by another user\n    var compReturn = RecupComplexite($('#hid_cat').val(), 1);\n\n    if (compReturn == 0) {\n        if (CKEDITOR.instances[\"edit_desc\"]) {\n            CKEDITOR.instances[\"edit_desc\"].destroy();\n        }\n        if (CKEDITOR.instances[\"desc\"]) {\n            CKEDITOR.instances[\"desc\"].destroy();\n        }\n        $(\"#div_loading\").addClass(\"hidden\");\n        return;\n    }\n\n    // Check if Item has changed since loaded\n    if (CheckIfItemChanged() == 1) {\n        var tmp = $(\"#\"+$(\"#selected_items\").val()).attr(\"ondblclick\");\n        tmp = tmp.substring(20,tmp.indexOf(\")\"));\n        tmp = tmp.replace(/'/g, \"\").split(',');\n        AfficherDetailsItem(tmp[0], tmp[1], tmp[2], tmp[3], tmp[4], 1, 1);\n        $(\"#div_loading\").addClass(\"hidden\");\n        return;\n    }\n\n    // Show WYGIWYG editor\n    CKEDITOR.replace(\n        \"edit_desc\",\n        {\n            toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]],\n            height: 100,\n            language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n        }\n   );\n    CKEDITOR.instances[\"edit_desc\"].setData($('#hid_desc').val());\n\n    $('#edit_display_title').html($('#hid_label').val());\n    $('#edit_label').val($('#hid_label').val());\n    $('#edit_desc').html($('#hid_desc').val());\n    $('#edit_pw1, #edit_pw2').val($('#hid_pw').val());\n    $(\"#edit_visible_pw\").text($('#hid_pw').val());\n    $('#edit_item_login').val($('#hid_login').val());\n    $('#edit_email').val($('#hid_email').val());\n    $('#edit_url').val($('#hid_url').val());\n    $('#edit_categorie').val($('#id_categorie').val());\n    if ($('#edit_restricted_to').val() != undefined) {\n        $('#edit_restricted_to').val($('#hid_restricted_to').val());\n    }\n    if ($('#edit_restricted_to_roles').val() != undefined) {\n        $('#edit_restricted_to_roles').val($('#hid_restricted_to_roles').val());\n    }\n    $('#edit_tags').val($('#hid_tags').val());\n    if ($('#hid_anyone_can_modify').val() == \"1\") {\n        $('#edit_anyone_can_modify').attr(\"checked\",\"checked\");\n        $('#edit_anyone_can_modify').button(\"refresh\");\n    } else {\n        $('#edit_anyone_can_modify').attr(\"checked\",false);\n        $('#edit_anyone_can_modify').button(\"refresh\");\n    }\n    // fields display\n    if ($('.fields').val() != undefined && $(\"#display_categories\").val() != \"\") {\n        $('.fields').each(function(i){\n            id = $(this).attr('id').split('_');\n            $('#edit_field_' + id[2] + '_' + id[3]).val(htmlspecialchars_decode($('#hid_field_' + id[2] + '_' + id[3]).val()));\n        });\n    }\n\n    //Get list of people in restriction list\n    if ($(\"#recherche_group_pf\").val() == 1) {\n        $(\"#div_editRestricted\").addClass(\"hidden\");\n    } else {\n        $(\"#div_editRestricted\").show();\n        // tick selected users / roles\n        if ($('#edit_restricted_to').val() != undefined) {\n            var list = $('#hid_restricted_to').val().split(';');\n            for (var i=0; i<list.length; i++) {\n                var elem = list[i];\n                if (elem != \"\") {\n                    $(\".folder_rights_user_edit\").each(function() {\n                        if ($(this).attr(\"id\") == elem) {\n                            $(this).prop(\"checked\", true);\n                            exit;\n                        }\n                    });\n                }\n            }\n        }\n\n        if ($('#edit_restricted_to').val() != undefined) {\n            $('#edit_restricted_to_list').empty();\n            if (restricted_to_roles == 1) {\n                //add optgroup\n                var optgroup = $('<optgroup>');\n                optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                $(\"#edit_restricted_to_list option:last\").wrapAll(optgroup);\n            }\n            var liste = $('#input_liste_utilisateurs').val().split(';');\n            for (var i=0; i<liste.length; i++) {\n                var elem = liste[i].split('#');\n                if (elem[0] != \"\") {\n                    $(\"#edit_restricted_to_list\").append(\"<option value='\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                    var index = $('#edit_restricted_to').val().lastIndexOf(elem[1]+\";\");\n                    if (index != -1) {\n                        $(\"#edit_restricted_to_list option[value=\"+elem[0]+\"]\").attr('selected', true);\n                    }\n                }\n            }\n        }\n\n        //Add list of roles if option is set\n        if (restricted_to_roles == 1 && $('#edit_restricted_to').val() != undefined) {\n            var j = i;\n            //add optgroup\n            var optgroup = $('<optgroup>');\n            optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n\n            var liste = $('#input_list_roles').val().split(';');\n            for (var i=0; i<liste.length; i++) {\n                var elem = liste[i].split('#');\n                if (elem[0] != \"\") {\n                    $(\"#edit_restricted_to_list\").append(\"<option value='role_\"+elem[0]+\"'>\"+elem[1]+\"</option>\");\n                    var index = $('#edit_restricted_to_roles').val().lastIndexOf(elem[1]+\";\");\n                    if (index != -1) {\n                        $(\"#edit_restricted_to_list option[value='role_\"+elem[0]+\"']\").attr('selected', true);\n                    }\n                    if (i==0) $(\"#edit_restricted_to_list option:last\").wrapAll(optgroup);\n                }\n                j++;\n            }\n        }\n    }\n\n    // prepare select2 for users\n    $(\"#edit_annonce_liste_destinataires\").select2({\n        language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n    });\n\n    // disable folder selection if PF\n    if ($('#recherche_group_pf').val() == \"1\") {\n        $(\"#edit_categorie\").prop(\"disabled\", true);\n    } else {\n        $(\"#edit_categorie\").prop(\"disabled\", false);\n    }\n\n    //open dialog\n    $(\"#div_formulaire_edition_item_info\").addClass(\"hidden\").html(\"\");\n    $(\"#div_formulaire_edition_item\").dialog(\"open\");\n}\n\n//###########\n//## FUNCTION : prepare new item dialogbox\n//###########\nfunction open_del_item_div()\n{\n    // is user read only\n    if (\n        ($('#recherche_group_pf').val() === \"0\" && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() === \"1\")\n        || (\n            ($(\"#access_level\").val() === \"1\" || $(\"#access_level\").val() === \"2\" || $(\"#access_level\").val() === \"3\")\n            && $('#recherche_group_pf').val() === \"0\"\n        )\n    ) {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    if ($(\"#selected_items\").val() != \"\") {\n        $(\"#div_loading\").removeClass(\"hidden\");\n        //Get the associated complexity level\n        var compReturn = RecupComplexite($('#hid_cat').val(), 0);\n\n        // exclude because user is read only\n        if (compReturn == 0) {\n            return false;\n        }\n\n        $(\"#div_loading\").addClass(\"hidden\");\n        $('#div_del_item').dialog('open');\n    } else {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['none_selected_text']); ?>\");\n    }\n}\n\n//###########\n//## FUNCTION : prepare copy item dialogbox\n//###########\nfunction open_copy_item_to_folder_div()\n{\n    // is user read only\n    if ($('#recherche_group_pf').val() == 0 && $(\"#user_is_read_only\").length && $(\"#user_is_read_only\").val() == \"1\") {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n        return false;\n    }\n\n    if ($(\"#selected_items\").val() != \"\") {\n        $('#copy_in_folder').val($(\"#hid_cat\").val());\n        $('#div_copy_item_to_folder').dialog('open');\n    } else {\n        displayMessage(\"<i class='fa fa-warning'></i>&nbsp;<?php echo addslashes($LANG['none_selected_text']); ?>\");\n    }\n}\n\n\n//###########\n//## FUNCTION : Clear HTML tags from a string\n//###########\nfunction clear_html_tags()\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"clear_html_tags\",\n            id_item  : $(\"#id_item\").val()\n        },\n        function(data) {\n            data = $.parseJSON(data);\n            $(\"#edit_desc\").val(data.description);\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Permits to delete an attached file\n//###########\nfunction delete_attached_file(file_id)\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"delete_attached_file\",\n            file_id : file_id,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            $(\"#span_edit_file_\"+file_id).css(\"textDecoration\", \"line-through\");\n        }\n   );\n}\n\n//###########\n//## FUNCTION : Permits to preview an attached image\n//###########\nPreviewImage = function(uri,title) {\n    $(\"#div_loading\").removeClass(\"hidden\");\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"image_preview_preparation\",\n            uri     : uri,\n            title   : title,\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n            $(\"#dialog_files\").html('<img id=\"image_files\" src=\"\" />');\n            //Get the HTML Elements\n            imageDialog = $(\"#dialog_files\");\n            imageTag = $('#image_files');\n\n            //Set the image src\n            imageTag.attr(\"src\", data.new_file);\n\n            //When the image has loaded, display the dialog\n            imageTag\n            .error(function() {\n                $(\"#div_loading\").addClass(\"hidden\");\n                displayMessage(\"<?php echo \"<i class='fa fa-exclamation-triangle fa-2x'></i>  \".addslashes($LANG['error_file_is_missing']); ?>\");\n            })\n            .load(function() {\n                $(\"#div_loading\").addClass(\"hidden\");\n                imageDialog.dialog({\n                    modal: true,\n                    resizable: false,\n                    draggable: false,\n                    width: 'auto',\n                    title: title,\n                    open: function( event, ui ) {\n                        // nothing to do\n                    },\n                    close: function (event, ui) {\n                        // delete file\n                        $.post(\n                            \"sources/main.queries.php\",\n                            {\n                                type    : \"file_deletion\",\n                                filename: data.file_path,\n                                key     : \"<?php echo $_SESSION['key']; ?>\"\n                            }\n                        );\n                    }\n                });\n            });\n        }\n    );\n}\n\nfunction notify_click(status)\n{\n    $.post(\"sources/items.queries.php\",\n    {\n        type     : \"notify_a_user\",\n        user_id : <?php echo $_SESSION['user_id']; ?>,\n        status    : status,\n        notify_type : 'on_show',\n        notify_role : '',\n        item_id : $('#id_item').val(),\n        key        : \"<?php echo $_SESSION['key']; ?>\"\n    },\n    function(data) {\n        if (data[0].error == \"something_wrong\") {\n            $(\"#new_show_error\").html('ERROR!!');\n            $(\"#new_show_error\").show();\n        } else {\n            $(\"#new_show_error\").addClass(\"hidden\");\n            if (data[0].new_status == \"true\") {\n                $('#menu_button_notify')\n                    .attr('title','<?php echo addslashes($LANG['disable_notify']); ?>')\n                    .attr('onclick','notify_click(\\'false\\')');\n                $('#div_notify').attr('class', '<i class=\"fa fa-bell-slash mi-green\"></i>&nbsp;');\n                $('#item_extra_info').html(\"<?php echo addslashes($LANG['notify_activated']); ?>\");\n            } else if (data[0].new_status == \"false\") {\n                $('#menu_button_notify')\n                    .attr('title','<?php echo addslashes($LANG['enable_notify']); ?>')\n                    .attr('onclick','notify_click(\\'true\\')');\n                $('#div_notify').attr('class', '<i class=\"fa fa-bell mi-green\"></i>&nbsp;');\n                $('#item_extra_info').html(\"\");\n            }\n        }\n    },\n    \"json\"\n    );\n}\n\n/*\n** Checks if current item title is a duplicate in current folder\n*/\nfunction checkTitleDuplicate(itemTitle, checkInCurrentFolder, checkInAllFolders, textFieldId)\n{\n    $(\"#new_show_error\").html(\"\").addClass(\"hidden\");\n    $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n    if (itemTitle != \"\") {\n        if (checkInCurrentFolder == \"1\" || checkInAllFolders == \"1\") {\n            //prepare data\n            var data = {\"label\": itemTitle.replace(/\"/g,'&quot;') , \"idFolder\": $('#hid_cat').val()};\n\n            if (checkInCurrentFolder == \"1\") {\n                var typeOfCheck = \"same_folder\";\n            } else {\n                var typeOfCheck = \"all_folders\";\n            }\n\n            // disable Save button\n            $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"disable\");\n\n            // send query\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"check_for_title_duplicate\",\n                    option  : typeOfCheck,\n                    data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data[0].duplicate != \"1\") {\n                        $(\"#div_formulaire_saisi ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n                        // display title\n                        $(\"#\"+textFieldId).html(itemTitle.escapeHTML());\n                    } else {\n                        $(\"#label\").focus();\n                        $(\"#new_show_error\").html(\"<?php echo addslashes($LANG['duplicate_title_in_same_folder']); ?>\").show();\n                    }\n                }\n            );\n        } else {\n            // display title\n            $(\"#\"+textFieldId).html(itemTitle.escapeHTML());\n        }\n    }\n}\n\n/*\n* builds the folders tree\n*/\nfunction refreshTree(node_to_select, do_refresh, refresh_visible_folders)\n{\n    do_refresh = do_refresh || \"\"\n    node_to_select = node_to_select || \"\";\n    refresh_visible_folders = refresh_visible_folders || 1;\n\n    if (refresh_visible_folders !== 1) {\n        $(\"#jstree\").jstree(\"deselect_all\");\n        $('#jstree').jstree(\"select_node\", \"#li_\"+groupe_id);\n        return false;\n    }\n\n    if (do_refresh !== \"0\") {\n        $('#jstree').jstree(true).refresh();\n    }\n\n    if (node_to_select !== \"\") {\n        $(\"#hid_cat\").val(node_to_select);\n        $(\"#jstree\").jstree(\"deselect_all\");\n\n        $('#jstree')\n        .one(\"refresh.jstree\", function (e, data) {\n            data.instance.select_node(\"#li_\"+node_to_select);\n        });\n        //.jstree(\"select_node\", \"#li_\"+node_to_select);\n\n    }\n\n    if (refresh_visible_folders === 1) {\n        refreshVisibleFolders();\n    }\n}\n\n/*\n* refreshes the various lists of folders used in dialogboxes\n*/\nfunction refreshVisibleFolders()\n{\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"refresh_visible_folders\",\n            key        : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            //check if format error\n            if (data.error == \"\") {\n                // append new list\n                $(\"#categorie, #edit_categorie, #new_rep_groupe, #edit_folder_folder, #delete_rep_groupe\").find('option').remove().end().append(data.selectVisibleFoldersOptions);\n                $(\"#move_folder_id\").find('option').remove().end().append(data.selectFullVisibleFoldersOptions);\n                $(\"#copy_in_folder\").find('option').remove().end().append(data.selectVisibleActiveFoldersOptions);\n\n                // remove ROOT option if exists\n                $('#edit_folder_folder option[value=\"0\"]').remove();\n                $('#delete_rep_groupe option[value=\"0\"]').remove();\n            }\n        }\n   );\n}\n\n\n//###########\n//## EXECUTE WHEN PAGE IS LOADED\n//###########\n$(function() {\n\n    var clear_tp_clipboard = new Clipboard(\"#but_empty_clipboard\", {\n        text: function() {\n            return \"cleared\";\n        }\n    });\n    clear_tp_clipboard.on('success', function(e) {\n        $(\"#message_box\").html(\"super\").show().fadeOut(1000);\n\n        e.clearSelection();\n    });\n\n    $.ajaxSetup({\n        error: function(jqXHR, exception) {\n            if (jqXHR.status === 0) {\n                console.log('Not connect.\\nVerify Network.');\n            } else if (jqXHR.status == 404) {\n                alert('Requested page not found. [404]');\n            } else if (jqXHR.status == 500) {\n                alert('Internal Server Error [500].');\n            } else if (exception === 'parsererror') {\n                alert('Requested JSON parse failed.');\n            } else if (exception === 'timeout') {\n                alert('Time out error.');\n            } else if (exception === 'abort') {\n                alert('Ajax request aborted.');\n            } else {\n                alert('Uncaught Error.n' + jqXHR.responseText);\n            }\n        }\n    });\n\n    // manage item div resize\n    $( \"#item_details_scroll\" ).resizable({handles: {'s': '#handle'}});\n    $(\"#handle\").dblclick(function() {\n        var inner = $(\"#item_details_scroll\").find('table');\n        var current_height = $(\"#item_details_scroll\").height();\n        $(\"#item_details_scroll\").animate({top:'+='+(current_height-inner.height())}, 0);\n        $(\"#item_details_scroll\").height(inner.outerHeight(true));\n    });\n\n    $('#toppathwrap').addClass(\"hidden\");\n    if ($(\".tr_fields\") != undefined) $(\".tr_fields\").addClass(\"hidden\");\n    //Expend/Collapse jstree\n    $(\"#jstree_close\").click(function() {\n        $(\"#jstree\").jstree(\"close_all\");\n    });\n    $(\"#jstree_open\").click(function() {\n        $(\"#jstree\").jstree(\"open_all\");\n    });\n    $(\"#jstree_search\").keypress(function(e) {\n        if (e.keyCode == 13) {\n            $(\"#jstree\").jstree(\"search\",$(\"#jstree_search\").val());\n        }\n    });\n\n    $(\".quick_menu\").menu({\n        icons: { submenu: \"no-icon\" }\n    });\n    $(\".quick_menu_left\").menu({\n        position: {\n            my : \"right top\",\n            at : \"left top\"\n        }\n    });\n\n    $('.menu_200, .menu_150').on('blur', function () {\n        $(this).addClass(\"hidden\");\n    });\n\n    $(\"#pw_size, #edit_pw_size\").spinner({\n        min:   3,\n        step:  1,\n        numberFormat: \"n\"\n    });\n\n    //Disable menu buttons\n    $('#menu_button_edit_item,#menu_button_del_item,#menu_button_add_fav,#menu_button_del_fav').attr('disabled', 'disabled');\n\n    //DIsable more buttons if read only user\n    if ($(\"#user_is_read_only\").val() == 1) {\n        $('#menu_button_add_item, #menu_button_add_group, #menu_button_edit_group, #menu_button_del_group').attr('disabled', 'disabled');\n    }\n\n    // Autoresize Textareas\n    $(\".items_tree, #items_content\").addClass(\"ui-corner-all\");\n\n    //automatic height\n    var window_height = $(window).height();\n    $(\"#div_items, #content\").height(window_height-170);\n    $(\"#items_center\").height(window_height-390);\n    $(\"#items_list\").height(window_height-440);\n    $(\".items_tree\").height(window_height-160);\n    $(\"#jstree\").height(window_height-185);\n\n    //warning if screen height too short\n    if (parseInt(window_height-440) <= 30) {\n        $(\"#div_dialog_message_text\").html(\"<?php echo addslashes($LANG['warning_screen_height']); ?>\");\n        $(\"#div_dialog_message\").dialog('open');\n    }\n\n    //Evaluate number of items to display - depends on screen height\n    if (parseInt($(\"#nb_items_to_display_once\").val()) || $(\"#nb_items_to_display_once\").val() == \"max\") {\n        //do nothing ... good value\n    } else {\n        //adapt to the screen height\n        $(\"#nb_items_to_display_once\").val(Math.max(Math.round((window_height-450)/23),2));\n    }\n\n    // Build buttons\n    $(\"#custom_pw, #edit_custom_pw\").buttonset();\n    $(\".cpm_button, #anyone_can_modify, #annonce, #edit_anyone_can_modify, #edit_annonce, .button\").button();\n\n    //Build multiselect box\n\n    //Build tree\n    $('#jstree').jstree({\n        \"core\" : {\n            \"animation\" : 0,\n            \"check_callback\" : true,\n            'data' : {\n                'url' : \"./sources/tree.php\",\n                \"dataType\" : \"json\",\n                \"async\" : true,\n                'data' : function (node) {\n                    return { 'id' : node.id.split('_')[1] };\n                }\n            },\n            \"strings\" : {\n                \"Loading ...\" : \"<?php echo addslashes($LANG['loading']); ?>...\"\n            },\n            \"error\" : {\n\n            }\n        },\n        \"plugins\" : [\n            \"state\", \"search\"\n        ]\n    })\n    //search in tree\n    .bind(\"search.jstree\", function (e, data) {\n        if (data.nodes.length == 1) {\n            //open the folder\n            ListerItems($(\"#jstree li>a.jstree-search\").attr('id').split('_')[1], '', 0);\n        }\n    });\n\n    // load list of visible folders for current user\n    refreshVisibleFolders();\n\n    $(\"#add_folder\").click(function() {\n        var posit = $('#item_selected').val();\n        //alert($(\"ul\").text());\n    });\n\n    $(\"#for_searchtext\").addClass(\"hidden\");\n    $(\"#copy_pw_done\").addClass(\"hidden\");\n    $(\"#copy_login_done\").addClass(\"hidden\");\n\n    //PREPARE DIALOGBOXES\n    //=> ADD A NEW GROUP\n    $(\"#div_ajout_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 280,\n        title: \"<?php echo addslashes($LANG['item_menu_add_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                AddNewFolder();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#new_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#new_rep_show_error\").addClass(\"hidden\");\n            $(\"#new_rep_show_error\").html(\"\");\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> EDIT A GROUP\n    $(\"#div_editer_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 490,\n        height: 280,\n        title: \"<?php echo addslashes($LANG['item_menu_edi_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                $(\"#edit_rep_show_error\").addClass(\"hidden\");\n                if ($(\"#edit_folder_title\").val() == \"\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_label']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if ($(\"#edit_folder_folder\").val() == \"0\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if ($(\"#edit_folder_complexity\").val() == \"\") {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group_complex']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else if (/^\\d+$/.test($(\"#edit_folder_title\").val())) {\n                    $(\"#edit_rep_show_error\").html(\"<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>\");\n                    $(\"#edit_rep_show_error\").show();\n                } else {\n                    $(\"#edit_folder_loader\").show();\n                    $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", true);\n\n                    //prepare data\n                    var data = {\"title\": $('#edit_folder_title').val().replace(/\"/g,'&quot;'),\n                        \"complexity\": $('#edit_folder_complexity').val(),\n                        \"folder\": $('#edit_folder_folder').val()};\n\n                    //Send query\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"update_folder\",\n                            data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key        : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //check if format error\n                            if (data[0].error == \"\") {\n                                refreshTree($('#edit_folder_folder').val());\n                                $(\"#folder_name_\"+$('#edit_folder_folder').val()).text($('#edit_folder_title').val());\n                                $(\"#path_elem_\"+$('#edit_folder_folder').val()).text($('#edit_folder_title').val());\n                                $(\"#fld_\"+$('#edit_folder_folder').val()).html($('#edit_folder_title').val());\n                                $(\"#edit_folder_title\").val($('#edit_folder_title').val());\n                                $(\"#div_editer_rep\").dialog(\"close\");\n                            } else {\n                                if (data[0].error === \"ERR_TITLE_ONLY_WITH_NUMBERS\") {\n                                    $(\"#edit_rep_show_error\").html('<?php echo addslashes($LANG['error_only_numbers_in_folder_name']); ?>').show();\n                                } else {\n                                    $(\"#edit_rep_show_error\").html(data[0].error).show();\n                                }\n\n                            }\n                            $(\"#edit_folder_loader\").addClass(\"hidden\");\n                            $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                        },\n                        \"json\"\n                   );\n                }\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#edit_folder_loader\").addClass(\"hidden\");\n                $(\"#edit_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n\n    // =>\n    $(\"#div_copy_item_to_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 250,\n        title: \"<?php echo addslashes($LANG['item_menu_copy_elem']); ?>\",\n        open: function( event, ui ) {\n            $(\"#copy_in_folder\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n            $(\":button:contains('<?php echo addslashes($LANG['ok']); ?>')\").prop(\"disabled\", false);\n            $(\"#copy_item_info\").addClass(\"ui-state-highlight ui-corner-all\").addClass(\"hidden\");\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n            $(\"#div_copy_item_to_folder_item\").html(\"<center>\"+$(\"#id_label\").html()+\"</center>\");\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n                $(\"#copy_item_info\").addClass(\"ui-state-highlight ui-corner-all\").show().html(\"<span><?php echo addslashes($LANG['please_wait']).\" <i class=\\'fa fa-cog fa-spin'></i>\"; ?></span>\");\n                $(\":button:contains('<?php echo addslashes($LANG['ok']); ?>')\").prop(\"disabled\", true);\n                //Send query\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type        : \"copy_item\",\n                        item_id     : $('#id_item').val(),\n                        source_id   : $('#hid_cat').val(),\n                        dest_id     : $('#copy_in_folder').val(),\n                        key         : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //check if format error\n                        if (data[0].error !== \"\") {\n                            $(\"#copy_item_to_folder_show_error\").html(data[1].error_text).show(1).delay(2000).fadeOut(1000);\n                        }\n                        //if OK\n                        if (data[0].status == \"ok\") {\n                            //window.location.href = \"index.php?page=items&group=\"+$('#copy_in_folder').val()+\"&id=\"+data[1].new_id;\n                            ListerItems($('#copy_in_folder').val(),'', 0);\n                            AfficherDetailsItem(data[1].new_id);\n                            refreshTree($('#copy_in_folder').val());\n                            $(\"#copy_in_folder\").val(\"\");\n                            $(\"#div_copy_item_to_folder\").dialog('close');\n                        }\n                        $(\"#copy_item_info\").addClass(\"hidden\");\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#copy_item_to_folder_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_copy_item_to_folder\").dialog('close');\n            }\n        }\n    });\n    // <=\n\n    //=> MOVE A GROUP\n    $(\"#div_move_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 350,\n        height: 250,\n        title: \"<?php echo addslashes($LANG['item_menu_mov_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                $(\"#move_rep_show_error\").addClass(\"hidden\");\n                if ($(\"#move_folder_id\").val() == \"0\") {\n                    $(\"#move_rep_show_error\").html(\"<?php echo addslashes($LANG['error_group']); ?>\");\n                    $(\"#move_rep_show_error\").show();\n                } else if($('#hid_cat').val() === $('#move_folder_id').val()) {\n                    // do not move to itself\n                    $(\"#move_rep_show_error\").html(\"<?php echo addslashes($LANG['error_not_allowed_to']); ?>\");\n                    $(\"#move_rep_show_error\").show();\n                } else {\n                    $(\"#move_folder_loader\").show();\n                    $(\"#div_editer_rep ~ .ui-dialog-buttonpane\")\n                        .find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\")\n                        .prop(\"disabled\", true);\n\n                    //prepare data\n                    var data = {\"source_folder_id\": $('#hid_cat').val(),\n                        \"target_folder_id\": $('#move_folder_id').val()};\n\n                    //Send query\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"move_folder\",\n                            data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key     : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //check if format error\n                            if (data[0].error == \"\") {\n                                $(\"#div_move_folder ~ .ui-dialog-buttonpane\")\n                                    .find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                                ListerItems($('#hid_cat').val(), \"\", 0);\n                                $(\"#move_folder_loader\").addClass(\"hidden\");\n                                refreshTree();\n                                $(\"#div_move_folder\").dialog(\"close\");\n                            } else {\n                                $(\"#move_rep_show_error\").html(data[0].error).show();\n                            }\n                            $(\"#move_folder_loader\").addClass(\"hidden\");\n                        },\n                        \"json\"\n                   );\n                }\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#edit_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(\"#div_editer_rep ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(\"#move_rep_show_error\").html(\"\").addClass(\"hidden\");\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n\n\n    //=> COPY OF FOLDER\n    $(\"#div_copy_folder\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 290,\n        title: \"<?php echo addslashes($LANG['copy_folder']); ?>\",\n        close: function () {\n            $(\"#copy_folder_source_id, #copy_folder_destination_id\").children('option').remove();\n            $(\"#div_copy_folder_msg\")\n                .html('')\n                .removeClass(\"ui-state-highlight\")\n                .addClass(\"hidden\");\n        },\n        open: function(event,ui) {\n            $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n\n            // get list of folders\n                $.post(\n                    \"sources/folders.queries.php\",\n                    {\n                        type    : \"get_list_of_folders\",\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#div_loading\").addClass(\"hidden\");\n\n                        //display to user\n                        $(\"#copy_folder_source_id, #copy_folder_destination_id\").append(data[0].list_folders);\n\n                        $(\"#copy_folder_source_id\").val($(\"#hid_cat\").val());\n                    },\n                    \"json\"\n                );\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                //Do some checks\n                if ($(\"#copy_folder_source_id\").val() === \"\" || $(\"#copy_folder_destination_id\").val() === \"\") {\n                    $(\"#div_copy_folder_msg\")\n                        .html('<i class=\"fa fa-warning\"></i>&nbsp;<?php echo addslashes($LANG['error_must_enter_all_fields']); ?>')\n                        .addClass(\"ui-state-error\")\n                        .show().delay(2000).fadeOut(1000);\n                        return false;\n                }\n\n                if ($(\"#copy_folder_source_id\").val() === $(\"#copy_folder_destination_id\").val()) {\n                    $(\"#div_copy_folder_msg\")\n                        .html('<i class=\"fa fa-warning\"></i>&nbsp;<?php echo addslashes($LANG['error_source_and_destination_are_equal']); ?>')\n                        .addClass(\"ui-state-error\")\n                        .show().delay(2000).fadeOut(1000);\n                        return false;\n                }\n\n\n                $(\"#div_copy_folder_msg\")\n                    .html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>')\n                    .addClass(\"ui-state-highlight\")\n                    .show();\n\n                //prepare data\n                var data = {\"source_folder_id\": $('#copy_folder_source_id').val(),\n                    \"target_folder_id\": $('#copy_folder_destination_id').val()};\n\n                //Send query\n                $.post(\n                    \"sources/folders.queries.php\",\n                    {\n                        type    : \"copy_folder\",\n                        data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //check if format error\n                        if (data[0].error == \"\") {\n                            $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                            refreshTree();\n                            $(\"#div_copy_folder\").dialog(\"close\");\n                        } else {\n                            $(\"#div_copy_folder_msg\").html(data[0].error).show().delay(2000).fadeOut(1000);\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(\"#div_copy_folder_msg\").html(\"\").addClass(\"hidden\");\n                $(\"#div_copy_folder ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n                $(this).dialog('close');\n            }\n        }\n    });\n    //<=\n\n    //=> DELETE A GROUP\n    $(\"#div_supprimer_rep\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 230,\n        title: \"<?php echo addslashes($LANG['item_menu_del_rep']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['delete']); ?>\": function() {\n                SupprimerFolder();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        },\n        close: function() {\n            $(\"#delete_rep_groupe_validate\").prop(\"checked\", false);\n            $(\"#del_rep_show_error\").html(\"\").addClass(\"hidden\");\n        }\n    });\n    //<=\n    //=> ADD A NEW ITEM\n    $(\"#div_formulaire_saisi\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 505,\n        height: 680,\n        title: \"<?php echo addslashes($LANG['item_menu_add_elem']); ?>\",\n        open: function( event, ui ) {\n            $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"disabled\");\n        },\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                $(\"#div_loading\").removeClass(\"hidden\");\n                $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n                AjouterItem();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                //Clear upload queue\n                $('#item_file_queue').html('');\n                //Select 1st tab\n                $(\"#item_tabs\").tabs({ selected: 0 });\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#label\").focus();\n            $(\"#visible_pw\").html(\"\");\n            $(\"#item_tabs\").tabs(\"option\", \"active\", 0);\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // show tab fields ? Not if PersonalFolder\n            if ($(\"#recherche_group_pf\").val() == 1) {\n                if ($(\"#form_tab_fields\") != undefined)\n                    $(\"#item_tabs\").tabs(\"option\", \"hidden\", 3);\n            } else {\n                if ($(\"#form_tab_fields\") != undefined && $(\"#display_categories\").val() != 1)\n                    $(\"#item_tabs\").tabs(\"option\", \"show\", 3);\n            }\n\n            // hide complexity if PF\n            if ($(\"#pf_selected\").val() == 1) {\n                $(\"#expected_complexity\").addClass(\"hidden\");\n            } else {\n                $(\"#expected_complexity\").show();\n            }\n\n            $(\"#categorie\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n        },\n        close: function(event,ui) {\n            if (CKEDITOR.instances[\"desc\"]) {\n                CKEDITOR.instances[\"desc\"].destroy();\n            }\n            $(\"#item_upload_list\").html(\"\");\n            $(\".item_field\").val(\"\");  // clean values in Fields\n            $(\"#pw1\").focus();\n            $(\"#new_show_error\").html(\"\").addClass(\"hidden\");\n            $(\".ui-dialog-buttonpane button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").button(\"enable\");\n            $(\"#div_loading\").addClass(\"hidden\");\n        }\n    });\n    //<=\n    //=> EDITER UN ELEMENT\n    $(\"#div_formulaire_edition_item\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 505,\n        height: 680,\n        title: \"<?php echo addslashes($LANG['item_menu_edi_elem']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['save_button']); ?>\": function() {\n                $(\"#div_formulaire_edition_item ~ .ui-dialog-buttonpane\").find(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", true);\n                EditerItem();\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                //Clear upload queue\n                $('#item_edit_file_queue').html('');\n                //Select 1st tab\n                $(\"#item_edit_tabs\").tabs({ selected: 0 });\n                $(\"#div_loading\").addClass(\"hidden\");\n                //Close dialog box\n                $(this).dialog('close');\n            }\n        },\n        close: function(event,ui) {\n            if (CKEDITOR.instances[\"edit_desc\"]) {\n                CKEDITOR.instances[\"edit_desc\"].destroy();\n            }\n            if (CKEDITOR.instances[\"desc\"]) {\n                CKEDITOR.instances[\"desc\"].destroy();\n            }\n            $(\"#div_loading, #edit_show_error\").addClass(\"hidden\");\n            $(\"#item_edit_upload_list\").html(\"\");\n            $(\".edit_item_field\").val(\"\");  // clean values in Fields\n            //Unlock the Item\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"free_item_for_edition\",\n                    id      : $(\"#id_item\").val(),\n                    key        : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n            $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n        },\n        open: function(event,ui) {\n            //refresh pw complexity\n            $(\"#item_edit_tabs\").tabs( \"option\", \"active\",1  );\n            $(\"#edit_pw1\").first().focus();\n            $(\"#item_edit_tabs\").tabs( \"option\", \"active\",0  );\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // show tab fields ? Not if PersonalFolder\n            if ($(\"#recherche_group_pf\").val() == 1) {\n                if ($(\"#edit_item_more\") != undefined) $(\"#edit_item_more\").addClass(\"hidden\");\n            } else {\n                if ($(\"#edit_item_more\") != undefined && $(\"#display_categories\").val() != 1)\n                    $(\"#edit_item_more\").show();\n            }\n            $(\"button:contains('<?php echo addslashes($LANG['save_button']); ?>')\").prop(\"disabled\", false);\n\n            // hide complexity if PF\n            if ($(\"#pf_selected\").val() == 1) {\n                $(\"#edit_expected_complexity\").addClass(\"hidden\");\n            } else {\n                $(\"#edit_expected_complexity\").show();\n            }\n\n            $(\"#edit_categorie\").select2({\n                language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n            });\n        }\n    });\n    //<=\n    //=> SUPPRIMER UN ELEMENT\n    $(\"#div_del_item\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 400,\n        height: 220,\n        title: \"<?php echo addslashes($LANG['item_menu_del_elem']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['del_button']); ?>\": function() {\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type        : \"del_item\",\n                        id          : $(\"#id_item\").val(),\n                        categorie   : $('#hid_cat').val(),\n                        label       : $(\"#hid_label\").val(),\n                        key         : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        $(\"#div_loading\").removeClass(\"hidden\");\n\n                        // refresh list of items\n                        $(\"#full_items_list\").html(\"\");\n                        ListerItems($('#hid_cat').val(), \"\", 0)\n\n                        // reload tree\n                        refreshTree($('#hid_cat').val());\n\n                        // clean fields\n                        $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs\").html(\"\");\n                        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n                        $(\"#selected_items\").val(\"\");\n\n                        $(\"#div_loading\").addClass(\"hidden\");\n                    }\n               );\n                $(this).dialog('close');\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n            $(\"#div_del_item_selection\").html(\"<center>\"+$(\"#id_label\").html()+\"</center>\");\n        }\n    });\n    //<=\n    //=> SHOW LINK COPIED DIALOG\n    $(\"#div_item_copied\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 200,\n        title: \"<?php echo addslashes($LANG['admin_main']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW HISTORY DIALOG\n    $(\"#div_item_history\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 650,\n        height: 400,\n        title: \"<?php echo addslashes($LANG['history']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n\n            // load content\n            const data = {\"id\":$(\"#id_item\").val()};\n            $.post(\n                \"sources/items.queries.php\",\n                {\n                    type    : \"load_item_history\",\n                    data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    try {\n                        data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    } catch (e) {\n                        // error\n                        $(\"#div_loading\").addClass(\"hidden\");\n                        $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br /><br />Returned data:<br />\"+data);\n                        $(\"#div_dialog_message\").show();\n                        return;\n                    }\n\n                    if (data.error === \"\") {\n                        $(\"#item_history_log\").html(data.new_html);\n                    }\n                }\n           );\n        }\n    });\n    //<=\n    //=> SHOW SHARE DIALOG\n    $(\"#div_item_share\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 200,\n        title: \"<?php echo addslashes($LANG['share']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['send']); ?>\": function() {\n                $(\"#div_item_share_error\").addClass(\"hidden\");\n                if (IsValidEmail($(\"#item_share_email\").val())) {    //check if email format is ok\n                    $(\"#div_item_share_status\").show();\n                    $.post(\n                        \"sources/items.queries.php\",\n                        {\n                            type    : \"send_email\",\n                            id      : $(\"#id_item\").val(),\n                            receipt    : $(\"#item_share_email\").val(),\n                            cat      : \"share_this_item\",\n                            key        : \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            $(\"#div_item_share_status\").html(\"\").addClass(\"hidden\");\n                            if (data[0].error == \"\") {\n                                $(\"#div_item_share_error\").html(\"<?php echo addslashes($LANG['share_sent_ok']); ?>\").show();\n                            } else {\n                                $(\"#div_item_share_error\").html(data[0].message).show();\n                            }\n                        },\n                        \"json\"\n                   );\n                } else {\n                    $(\"#div_item_share_error\").html(\"<?php echo addslashes($LANG['bad_email_format']); ?>\").show();\n                }\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW ITEM UPDATED DIALOG\n    $(\"#div_item_updated\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 300,\n        height: 100,\n        title: \"<?php echo addslashes($LANG['share']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n\n            }\n        },\n        open: function(event,ui) {\n            $(\".ui-tooltip\").siblings(\".tooltip\").remove();\n        }\n    });\n    //<=\n    //=> SHOW SHARE DIALOG\n    $(\"#div_suggest_change\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 750,\n        height: 450,\n        title: \"<?php echo addslashes($LANG['suggest_password_change']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['ok']); ?>\": function() {\n                $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-cog fa-spin fa-2x\"></i>').show().removeClass(\"ui-state-error\");\n\n                // do checks\n                if (!IsValidEmail($(\"#email_change\").val()) && $(\"#email_change\").val() !== \"\") {\n                    $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-warning fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['email_format_is_not_correct']); ?>').show(1).delay(2000).fadeOut(1000).addClass(\"ui-state-error\");\n                    return false;\n                }\n                if (!validateURL($(\"#url_change\").val()) && $(\"#url_change\").val() !== \"\") {\n                    $(\"#div_suggest_change_wait\").html('<i class=\"fa fa-warning fa-lg\"></i>&nbsp;<?php echo addslashes($LANG['url_format_is_not_correct']); ?>').show(1).delay(2000).fadeOut(1000).addClass(\"ui-state-error\");\n                    return false;\n                }\n\n                // prepare changes\n                var data = {\"label\": $(\"#label_change\").val(), \"pwd\": $(\"#pwd_change\").val(),\n                    \"url\": $(\"#url_change\").val(), \"login\": $(\"#login_change\").val(),\n                    \"email\": $(\"#email_change\").val(), \"folder\": $(\"#hid_cat\").val(),\n                    \"comment\": $(\"#comment_change\").val(), \"item_id\": $(\"#id_item\").val()};\n\n                $.post(\n                    \"sources/items.queries.php\",\n                    {\n                        type    : \"suggest_item_change\",\n                        data    : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        id      : $(\"#id_item\").val(),\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error === \"\") {\n                            $(\"#div_suggest_change_wait\").html(\"<?php echo addslashes($LANG['suggestion_done']); ?>\").show(1).delay(1500).fadeOut(1000);\n                            setTimeout(\n                                function() {\n                                    $(\"#div_suggest_change\").dialog(\"close\");\n                                },\n                                500\n                            );\n                        }\n                    },\n                    \"json\"\n               );\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog('close');\n            }\n        },\n        open: function(event,ui) {\n            $(\"#div_suggest_change_html\")\n            .html(\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['label']); ?></label><input type=\"text\" id=\"label_change\" value=\"'+$(\"#hid_label\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['pw']); ?></label><input type=\"text\" id=\"pwd_change\" value=\"\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '&nbsp;<i class=\"fa fa-info-circle fa-lg tip\" title=\"<?php echo addslashes($LANG['suggest_change_password_blank']); ?>\"></i>' +\n                //'<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['description']); ?></label><textarea id=\"description_change_change\" class=\"input_text_80 ui-widget-content ui-corner-all\">'+$(\"#hid_desc\").val()+'</textarea>' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['index_login']); ?></label><input type=\"text\" id=\"login_change\" value=\"'+$(\"#hid_login\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['email']); ?></label><input type=\"text\" id=\"email_change\" value=\"'+$(\"#hid_email\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['url']); ?></label><input type=\"text\" id=\"url_change\" value=\"'+$(\"#hid_url\").val()+'\" class=\"input_text_80 ui-widget-content ui-corner-all\">' +\n                '<label class=\"form_label_100\" style=\"padding:4px;\"><?php echo addslashes($LANG['comment']); ?></label><input type=\"text\" id=\"comment_change\" value=\"\" class=\"input_text_80 ui-widget-content ui-corner-all\">'\n            )\n            .show();\n            $(\".tip\").tooltipster({multiple: true});\n        }\n    });\n    //<=\n\n    // => ATTACHMENTS INIT\n    var uploader_attachments = new plupload.Uploader({\n        runtimes : \"html5,flash,silverlight,html4\",\n        browse_button : \"item_attach_pickfiles\",\n        container : \"item_upload\",\n        max_file_size : \"<?php\nif (strrpos($SETTINGS['upload_maxfilesize'], \"mb\") === false) {\n    echo $SETTINGS['upload_maxfilesize'].\"mb\";\n} else {\n    echo $SETTINGS['upload_maxfilesize'];\n}\n?>\",\n        chunk_size : \"1mb\",\n        dragdrop : true,\n        url : \"sources/upload/upload.attachments.php\",\n        flash_swf_url : \"includes/libraries/Plupload/Moxie.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/Moxie.xap\",\n        filters : [\n            {title : \"Image files\", extensions : \"<?php echo $SETTINGS['upload_imagesext']; ?>\"},\n            {title : \"Package files\", extensions : \"<?php echo $SETTINGS['upload_pkgext']; ?>\"},\n            {title : \"Documents files\", extensions : \"<?php echo $SETTINGS['upload_docext']; ?>\"},\n            {title : \"Other files\", extensions : \"<?php echo $SETTINGS['upload_otherext']; ?>\"}\n        ],<?php\nif ($SETTINGS['upload_imageresize_options'] == 1) {\n?>\n        resize : {\n            width : <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n            height : <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n            quality : <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n        },\n<?php\n}\n?>\n        init: {\n            BeforeUpload: function (up, file) {\n                $(\"#item_upload_wait\").show();\n\n                if ($(\"#random_id\").val() == \"\") {\n                    var post_id = CreateRandomString(9,\"num_no_0\");\n                    $(\"#random_id\").val(post_id);\n                }\n\n                up.setOption('multipart_params', {\n                    PHPSESSID : \"<?php echo $_SESSION['user_id']; ?>\",\n                    itemId : $(\"#random_id\").val(),\n                    type_upload : \"item_attachments\",\n                    edit_item : false,\n                    user_token: $(\"#item_user_token\").val(),\n                    files_number: $(\"#files_number\").val()\n                });\n            },\n            UploadComplete: function(up, files) {\n                $(\"#item_upload_wait\").addClass(\"hidden\");\n                $(\"#files_number\").val(0);\n            }\n        }\n    });\n\n    // Uploader options\n    uploader_attachments.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        $(\"#remove_\" + file.id).remove();\n    });\n    uploader_attachments.bind(\"Error\", function(up, err) {\n        $(\"#item_upload_list\").html(\n            \"<div class=\\'ui-state-error ui-corner-all\\' style=\\'padding:2px;\\'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    uploader_attachments.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n    });\n\n    // Load edit uploaded click\n    $(\"#item_attach_uploadfiles\").click(function(e) {\n        // generate and save token\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type : \"save_token\",\n                size : 25,\n                capital: true,\n                numeric: true,\n                ambiguous: true,\n                reason: \"item_attachments\",\n                duration: 10\n            },\n            function(data) {\n                $(\"#item_user_token\").val(data[0].token);\n                uploader_attachments.start();\n            },\n            \"json\"\n        );\n        e.preventDefault();\n    });\n    uploader_attachments.init();\n    uploader_attachments.bind('FilesAdded', function(up, files) {\n        $.each(files, function(i, file) {\n            $('#item_upload_list').append(\n                '<div id= file.id><span id=\"remove_' + file.id + '>[<a href=\\'#\\' onclick=\\'$(\\\"#' + file.id + '\\\").remove();\\'>-</a>]</span> ' +\n                file.name + ' (' + plupload.formatSize(file.size) + ')' +\n            '</div>');\n            $(\"#files_number\").val(parseInt($(\"#files_number\").val())+1);\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    // Prepare uplupload object for attachments upload\n    var edit_uploader_attachments = new plupload.Uploader({\n        runtimes : \"html5,flash,silverlight,html4\",\n        browse_button : \"item_edit_attach_pickfiles\",\n        container : \"item_edit_upload\",\n        max_file_size : \"<?php\nif (strrpos($SETTINGS['upload_maxfilesize'], \"mb\") === false) {\n    echo $SETTINGS['upload_maxfilesize'].\"mb\";\n} else {\n    echo $SETTINGS['upload_maxfilesize'];\n}\n?>\",\n        chunk_size : \"1mb\",\n        dragdrop : true,\n        url : \"sources/upload/upload.attachments.php\",\n        flash_swf_url : \"includes/libraries/Plupload/Moxie.swf\",\n        silverlight_xap_url : \"includes/libraries/Plupload/Moxie.xap\",\n        filters : [\n            {title : \"Image files\", extensions : \"<?php echo $SETTINGS['upload_imagesext']; ?>\"},\n            {title : \"Package files\", extensions : \"<?php echo $SETTINGS['upload_pkgext']; ?>\"},\n            {title : \"Documents files\", extensions : \"<?php echo $SETTINGS['upload_docext']; ?>\"},\n            {title : \"Other files\", extensions : \"<?php echo $SETTINGS['upload_otherext']; ?>\"}\n        ],<?php\nif ($SETTINGS['upload_imageresize_options'] == 1) {\n        ?>\n        resize : {\n            width : <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n            height : <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n            quality : <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n        },<?php\n}\n?>\n        init: {\n            BeforeUpload: function (up, file) {\n                $(\"#item_edit_upload_wait\").show();\n\n                up.setOption('multipart_params', {\n                    PHPSESSID : \"<?php echo $_SESSION['user_id']; ?>\",\n                    itemId : $('#selected_items').val(),\n                    type_upload : \"item_attachments\",\n                    edit_item : true,\n                    user_token: $(\"#item_user_token\").val(),\n                    files_number: $(\"#edit_files_number\").val()\n                });\n            },\n            UploadComplete: function(up, files) {\n                $(\"#item_edit_upload_wait\").addClass(\"hidden\");\n                $(\"#edit_files_number\").val(0);\n            }\n        }\n    });\n\n    // Uploader options\n    edit_uploader_attachments.bind(\"UploadProgress\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(file.percent + \"%\");\n        $(\"#edit_remove_\" + file.id).remove();\n    });\n    edit_uploader_attachments.bind(\"Error\", function(up, err) {\n        $(\"#item_edit_upload_list\").html(\n            \"<div class=\\'ui-state-error ui-corner-all\\' style=\\'padding:2px;\\'>Error: \" + err.code +\n            \", Message: \" + err.message +\n            (err.file ? \", File: \" + err.file.name : \"\") +\n            \"</div>\"\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    edit_uploader_attachments.bind(\"+\", function(up, file) {\n        $(\"#\" + file.id + \" b\").html(\"100%\");\n        $(\"#edit_remove_\" + file.id).remove();\n    });\n\n    // Load edit uploaded click\n    $(\"#item_edit_attach_uploadfiles\").click(function(e) {\n        // generate and save token\n        $.post(\n            \"sources/main.queries.php\",\n            {\n                type : \"save_token\",\n                size : 25,\n                capital: true,\n                numeric: true,\n                ambiguous: true,\n                reason: \"item_attachments\",\n                duration: 30\n            },\n            function(data) {\n                $(\"#item_user_token\").val(data[0].token);\n                edit_uploader_attachments.start();\n            },\n            \"json\"\n        );\n\n        e.preventDefault();\n    });\n    edit_uploader_attachments.init();\n    edit_uploader_attachments.bind('FilesAdded', function(up, files) {\n        $.each(files, function(i, file) {\n            $('#item_edit_upload_list').append(\n                '<div id= file.id><span id=\"edit_remove_' + file.id + '>[<a href=\\'#\\' onclick=\\'$(\\\"#' + file.id + '\\\").remove();\\'>-</a>]</span> ' +\n                file.name + ' (' + plupload.formatSize(file.size) + ')' +\n            '</div>');\n            $(\"#edit_files_number\").val(parseInt($(\"#edit_files_number\").val())+1);\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    //Launch items loading\n    if ($(\"#jstree_group_selected\").val() == \"\") {\n        var first_group = 1;\n    } else {\n        var first_group = $(\"#jstree_group_selected\").val();\n    }\n\n    if ($(\"#hid_cat\").val() != \"\") {\n        first_group = $(\"#hid_cat\").val();\n    }\n\n    //load items\n    if (parseInt($(\"#query_next_start\").val()) > 0) start = parseInt($(\"#query_next_start\").val());\n    else start = 0;\n\n    // load list of items\n    if (first_group !== \"\") {\n        ListerItems(first_group,'', start);\n    }\n\n    //Load item if needed and display items list\n    if ($(\"#open_id\").val() !== \"\") {\n        AfficherDetailsItem($(\"#open_id\").val());\n        //refreshTree($(\"#hid_cat\").val(), \"0\");\n        $(\"#open_item_by_get\").val(\"\");\n    }\n\n    //Password meter for item creation\n    $(\"#pw1\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#pw_strength\",\n        \"defaultText\" : \"<?php echo addslashes($LANG['index_pw_level_txt']); ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level0']); ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level1']); ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level2']); ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level3']); ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level4']); ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level5']); ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level6']); ?>\"\n            }\n        ]\n    });\n    $('#pw1').bind({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\" : function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    });\n\n    $(\"#tabs-02\").on(\n        \"score.simplePassMeter\",\n        \"#pw1\",\n        function(jQEvent, score) {\n            $(\"#mypassword_complex\").val(score);\n        }\n    );\n\n\n    //Password meter for item update\n    $(\"#edit_pw1\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#edit_pw_strength\",\n        \"defaultText\" : \"<?php echo addslashes($LANG['index_pw_level_txt']); ?>\",\n        \"ratings\": [\n            {\"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level0']); ?>\"\n            },\n            {\"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level1']); ?>\"\n            },\n            {\"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level2']); ?>\"\n            },\n            {\"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level3']); ?>\"\n            },\n            {\"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level4']); ?>\"\n            },\n            {\"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level5']); ?>\"\n            },\n            {\"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo addslashes($LANG['complex_level6']); ?>\"\n            }\n        ]\n    });\n    $('#edit_pw1').on(\n        \"score.simplePassMeter\", function(jQEvent, score) {\n            $(\"#edit_mypassword_complex\").val(score);\n        }\n    );\n\n    //Text search watermark\n    var tbval = $('#jstree_search').val();\n    $('#jstree_search').focus(function() { $(this).val('');});\n    $('#jstree_search').blur(function() { $(this).val(tbval);});\n    $('#search_item').focus(function() { $(this).val('');});\n    $('#search_item').blur(function() { $(this).val(tbval);});\n\n    //add date selector\n    $(\".datepicker\").datepicker({\n        dateFormat:\"<?php echo str_replace(array(\"Y\", \"M\"), array(\"yy\", \"mm\"), $SETTINGS['date_format']); ?>\",\n        changeMonth: true,\n        changeYear: true\n    });\n\n    //autocomplete for TAGS\n    $(\"#item_tags, #edit_tags\")\n        .focus()\n        .bind( \"keydown\", function( event ) {\n            if ( event.keyCode === $.ui.keyCode.TAB &&\n                    $( this ).data( \"autocomplete\" ).menu.active ) {\n                event.preventDefault();\n            }\n        })\n        .autocomplete({\n            //source: 'sources/items.queries.php?type=autocomplete_tags',\n            source: function( request, response ) {\n                $.getJSON( \"sources/items.queries.php?type=autocomplete_tags&t=1\", {\n                    term: extractLast( request.term )\n                }, response );\n            },\n            focus: function() {\n                // prevent value inserted on focus\n                return false;\n            },\n            search: function() {\n                var term = extractLast( this.value );\n            },\n            select: function( event, ui ) {\n                var terms = split( this.value );\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push( ui.item.value );\n                // add placeholder to get the comma-and-space at the end\n                terms.push( \"\" );\n                this.value = terms.join( \" \" );\n\n                return false;\n            }\n        }\n    );\n\n    //DIALOG FOR OFFLINE MODE\n    $(\"#dialog_offline_mode\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 350,\n        title: \"<?php echo addslashes($LANG['offline_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['button_offline_generate']); ?>\": function() {\n                generateOfflineFile();\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_offline_mode\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n    //DIALOG FOR EXPORT FILE\n    $(\"#dialog_export_file\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 350,\n        title: \"<?php echo addslashes($LANG['print_out_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['button_export_file']); ?>\": function() {\n                exportItemsToFile();\n            },\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_export_file\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n    //DIALOG FOR IMPORT FILE\n    $(\"#dialog_import_file\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 600,\n        height: 500,\n        title: \"<?php echo addslashes($LANG['import_csv_menu_title']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_import_file\").html(\"<i class=\\\"fa fa-cog fa-spin fa-2x\\\"></i>\");\n        }\n    });\n\n\n    // DIALOG BOX FOR PERSONAL PASSWORDS UPGRADE\n    $(\"#dialog_upgrade_personal_passwords\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 500,\n        height: 300,\n        title: \"<?php echo addslashes($LANG['upgrade_needed']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['admin_action_db_backup_start_tip']); ?>\": function() {\n                $(\"#dialog_upgrade_personal_passwords_status\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>&nbsp;...&nbsp;<span id=\"reencryption_progress\">0%</span>').attr(\"class\",\"\").show();\n                $.post(\n                    \"sources/utils.queries.php\",\n                    {\n                        type    : \"reencrypt_personal_pwd_start\",\n                        user_id : \"<?php echo $_SESSION['user_id']; ?>\",\n                        key     : \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        if (data[0].error != \"\") {\n                            $(\"#dialog_upgrade_personal_passwords_status\").html(data[0].error).addClass(\"ui-state-error\").show();\n                        } else {\n                            reEncryptPersonalPwds(data[0].pws_list, data[0].currentId, data[0].nb);\n                        }\n                    },\n                    \"json\"\n                );\n            },\n            \"<?php echo addslashes($LANG['cancel_button']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        }\n    });\n\n    //DIALOG FOR SSH\n    $(\"#dialog_ssh\").dialog({\n        bgiframe: true,\n        modal: true,\n        autoOpen: false,\n        width: 620,\n        height: 500,\n        title: \"<?php echo addslashes($LANG['update_server_password']); ?>\",\n        buttons: {\n            \"<?php echo addslashes($LANG['close']); ?>\": function() {\n                $(this).dialog(\"close\");\n            }\n        },\n        close: function() {\n            $(\"#div_ssh\").html(\"<i class=\\'fa fa-cog fa-spin fa-2x\\'></i>&nbsp;<b><?php echo addslashes($LANG['please_wait']); ?></b>\");\n        }\n    });\n\n    //Simulate a CRON activity (only 8 secs after page loading)\n    setTimeout(\n        function() {\n            // send email\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                    type : \"send_waiting_emails\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n\n            // send statistics\n            $.post(\n                \"sources/main.queries.php\",\n                {\n                    type : \"sending_statistics\",\n                    key     : \"<?php echo $_SESSION['key']; ?>\"\n                }\n            );\n        },\n        8000\n    );\n\n    NProgress.done();\n});\n\n// show password during longpress\nvar mouseStillDown = false;\n$('#item_details_ok').on('mousedown', '.unhide_masked_data', function(event) {\n    mouseStillDown = true;\n     showPwdContinuous($(this).attr('id'));\n}).on('mouseup', '.unhide_masked_data', function(event) {\n     mouseStillDown = false;\n}).on('mouseleave', '.unhide_masked_data', function(event) {\n     mouseStillDown = false;\n});\nvar showPwdContinuous = function(elem_id){\n    if(mouseStillDown){\n        $('#'+elem_id).text($('#h'+elem_id).val());\n        setTimeout(\"showPwdContinuous('\"+elem_id+\"')\", 50);\n        // log password is shown\n        if (elem_id === \"id_pw\" && $(\"#pw_shown\").val() == \"0\") {\n            itemLog(\"item_password_shown\");\n            $(\"#pw_shown\").val(\"1\");\n        }\n    } else {\n        $('#'+elem_id).html('<?php echo $var['hidden_asterisk']; ?>');\n        $('.tip').tooltipster({multiple: true});\n    }\n}\n\nvar showPwd = function(){\n    $(\"#visible_pw, #edit_visible_pw\").toggle();\n}\n\n/*\n* permits to save\n*/\nfunction itemLog(log_case)\n{\n    $.post(\n        \"sources/items.logs.php\",\n        {\n            type        : log_case,\n            id_item     : $('#id_item').val(),\n            folder_id   : $('#hid_cat').val(),\n        hid_label   : $('#hid_label').val(),\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        }\n    );\n}\n\nfunction htmlspecialchars_decode (string, quote_style)\n{\n    if (string != null && string != \"\") {\n        // Convert special HTML entities back to characters\n        var optTemp = 0, i = 0, noquotes= false;\n        if (typeof quote_style === 'undefined') {        quote_style = 2;\n        }\n        string = string.toString().replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n        var OPTS = {\n            'ENT_NOQUOTES': 0,\n            'ENT_HTML_QUOTE_SINGLE' : 1,\n            'ENT_HTML_QUOTE_DOUBLE' : 2,\n            'ENT_COMPAT': 2,\n            'ENT_QUOTES': 3,\n            'ENT_IGNORE' : 4\n        };\n        if (quote_style === 0) {\n            noquotes = true;\n        }\n        if (typeof quote_style !== 'number') { // Allow for a single string or an array of string flags\n            quote_style = [].concat(quote_style);\n            for (i=0; i < quote_style.length; i++) {\n                // Resolve string input to bitwise e.g. 'PATHINFO_EXTENSION' becomes 4\n                if (OPTS[quote_style[i]] === 0) {\n                    noquotes = true;\n                } else if (OPTS[quote_style[i]]) {\n                    optTemp = optTemp | OPTS[quote_style[i]];\n                }\n            }\n            quote_style = optTemp;\n        }\n        if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {\n            string = string.replace(/&#0*39;/g, \"'\"); // PHP doesn't currently escape if more than one 0, but it should\n            // string = string.replace(/&apos;|&#x0*27;/g, \"'\"); // This would also be useful here, but not a part of PHP\n        }\n        if (!noquotes) {\n            string = string.replace(/&quot;/g, '\"');\n        }\n\n        string = string.replace(/&nbsp;/g, ' ');\n\n        // Put this in last place to avoid escape being double-decoded    string = string.replace(/&amp;/g, '&');\n    }\n    return string;\n}\n\n/**\n * Permit to load dynamically the list of Items\n */\nfunction proceed_list_update(stop_proceeding)\n{\n    stop_proceeding = stop_proceeding || \"\";\n\n    if (stop_proceeding === \"1\" || ($(\"#new_listing_characteristics\").val() !== \"\" && $(\"#query_next_start\").val() !== \"end\")) {\n        var tmp = $(\"#new_listing_characteristics\").val().split(',');\n        $(\"#new_listing_characteristics\").val(\"\");\n        ListerItems(tmp[0], tmp[1], tmp[2], tmp[3]);\n        return false;\n    }\n\n    if ($(\"#query_next_start\").val() !== \"end\") {\n        //Check if nb of items do display > to 0\n        if ($(\"#nb_items_to_display_once\").val() > 0) {\n            ListerItems($(\"#hid_cat\").val(),'', parseInt($(\"#query_next_start\").val()));\n        }\n    } else {\n        $('ul#full_items_list>li').tsort(\"\",{order:\"asc\",attr:\"name\"});\n        $(\"#items_list_loader\").addClass(\"hidden\");\n\n        // prepare clipboard items\n        var clipboard = new Clipboard('.mini_login');\n        clipboard.on('success', function(e) {\n            $(\"#message_box\").html(\"<?php echo addslashes($LANG['login_copied_clipboard']); ?>\").show().fadeOut(1000);\n            e.clearSelection();\n        });\n\n        var clipboard = new Clipboard('.mini_pw');\n        clipboard.on('success', function(e) {\n            $(\"#message_box\").html(\"<?php echo addslashes($LANG['pw_copied_clipboard']); ?>\").show().fadeOut(1000);\n            itemLog(\"item_password_copied\");\n            e.clearSelection();\n        });\n\n        $(\".tip\").tooltipster({multiple: true});\n        $(\".mini_login, .mini_pw\").css(\"cursor\", \"pointer\");\n\n        var restricted_to_roles = <?php if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] == 1) {\n    echo 1;\n} else {\n    echo 0;\n}\n?>;\n\n        // refine users list to the related roles\n        $.post(\n            \"sources/items.queries.php\",\n            {\n                type        : \"get_refined_list_of_users\",\n                iFolderId   : $('#hid_cat').val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                // *** restricted_to_list ***\n                $(\"#restricted_to_list\").empty();\n                // add list of users\n                if ($('#restricted_to').val() != undefined) {\n                    $(\"#restricted_to_list\").append(data.selOptionsUsers);\n                    if (restricted_to_roles == 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup>');\n                        optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                        $(\".folder_rights_user\").wrapAll(optgroup);\n                    }\n                }\n                //Add list of roles if option is set\n                if (restricted_to_roles == 1 && $('#restricted_to').val() != undefined) {\n                    //add optgroup\n                    var optgroup = $('<optgroup>');\n                    optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n                    $(\"#restricted_to_list\").append(data.selOptionsRoles);\n                    $(\".folder_rights_role\").wrapAll(optgroup);\n                }\n                //Prepare multiselect widget\n                $(\"#restricted_to_list\").select2({\n                    language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                });\n\n                // *** edit_restricted_to_list ***\n                $(\"#edit_restricted_to_list\").empty();\n                if ($('#edit_restricted_to').val() != undefined) {\n                    $(\"#edit_restricted_to_list\").append(data.selEOptionsUsers);\n                    if (restricted_to_roles == 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup>');\n                        optgroup.attr('label', \"<?php echo addslashes($LANG['users']); ?>\");\n                        $(\".folder_rights_user_edit\").wrapAll(optgroup);\n                    }\n                }\n                //Add list of roles if option is set\n                if (restricted_to_roles == 1 && $('#edit_restricted_to').val() != undefined) {\n                    //add optgroup\n                    var optgroup = $('<optgroup>');\n                    optgroup.attr('label', \"<?php echo addslashes($LANG['roles']); ?>\");\n                    $(\"#edit_restricted_to_list\").append(data.selEOptionsRoles);\n                    $(\".folder_rights_role_edit\").wrapAll(optgroup);\n                }\n                //Prepare multiselect widget\n                $(\"#edit_restricted_to_list\").select2({\n                    language: \"<?php echo $_SESSION['user_language_code']; ?>\"\n                });\n            }\n       );\n    }\n}\n\n/**\n *\n * @access public\n * @return void\n **/\nfunction items_list_filter(id)\n{\n    $(\"#full_items_list\").find(\"li\").show();\n    if (id) {\n        $(\"#full_items_list\").find(\"a:not(:contains(\" + id + \"))\").parent().addClass(\"hidden\");\n        $(\"#full_items_list\").find(\"a:contains(\" + id + \")\").parent().show();\n    }\n}\n\n\nfunction manage_history_entry(type, id)\n{\n    var data = {\"item_id\": $(\"#id_item\").val(), \"label\": sanitizeString($('#add_history_entry_label').val())};\n\n    //Send query\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type      : \"history_entry_add\",\n            folder_id : $('#hid_cat').val(),\n            data      : prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n            key       : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            //check if format error\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            if (data.error == \"\") {\n                $(\"#item_history_log_error\").html(\"\").addClass(\"hidden\");\n                $(\"#add_history_entry_label\").val(\"\");\n                $(\"#item_history_log\").append(htmlspecialchars_decode(data.new_line));\n            } else {\n                $(\"#item_history_log_error\").html(data.error).show();\n            }\n            $(\"#div_item_history\").dialog(\"open\");\n        }\n   );\n}\n\n\n/*\n* Launch the redirection to OTV page\n*/\nfunction prepareOneTimeView()\n{\n    if ($(\"#selected_items\").val() == \"\") return;\n    $(\"#div_loading\").removeClass(\"hidden\");\n\n    //Send query\n    $.post(\n        \"sources/items.queries.php\",\n        {\n            type    : \"generate_OTV_url\",\n            id      : $(\"#id_item\").val(),\n            key     : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            //check if format error\n            if (data.error == \"\") {\n                $(\"#div_dialog_message\").dialog({height:300,minWidth:750});\n                $(\"#div_dialog_message\").dialog('open');\n                $(\"#div_dialog_message_text\").html(data.url+\n                    '<div style=\"margin-top:30px;font-size:13px;text-align:center;\"><span id=\"show_otv_copied\" class=\"ui-state-focus ui-corner-all\" style=\"padding:10px;display:none;\"></span></div>'\n                );\n\n                // prepare clipboard\n                var clipboard = new Clipboard(\"#button_copy_otv_link\", {\n                    text: function() {\n                        return unsanitizeString($('#otv_link').text());\n                    }\n                });\n                clipboard.on('success', function(e) {\n                    $(\"#show_otv_copied\").html(\"<?php echo addslashes($LANG['link_is_copied']); ?>\").show().fadeOut(2000);\n\n                    e.clearSelection();\n                });\n\n                $(\".tip\").tooltipster({multiple: true});\n            } else {\n                $(\"#item_history_log_error\").html(data.error).show();\n            }\n            $(\"#div_loading\").addClass(\"hidden\");\n        },\n        \"json\"\n   );\n}\n\nfunction globalItemsSearch()\n{\n    if ($(\"#search_item\").val() != \"\") {\n        // stop items loading (if on-going)\n        $(\"#items_listing_should_stop\").val(\"1\");\n\n        // wait\n        $(\"#items_list_loader\").removeClass(\"hidden\");\n        $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['searching']); ?>');\n\n        // clean\n        $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs, .fields_div, #item_extra_info\").html(\"\");\n        $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n        $(\"#full_items_list\").html(\"\");\n        $(\"#selected_items\").val(\"\");\n\n        // send query\n        $.get(\n            \"sources/find.queries.php\",\n            {\n                type        : \"search_for_items\",\n                sSearch     : $(\"#search_item\").val(),\n                key         : \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                displayMessage(data.message);\n                $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['search_results']); ?>');\n                $(\"#items_list\").html(\"<ul class='liste_items 'id='full_items_list'></ul>\");\n                $(\"#full_items_list\").html(data.items_html);\n                $(\"#items_list_loader\").addClass(\"hidden\");\n            }\n        );\n    }\n}\n\n/*\n*\n*/\nfunction searchItemsWithTags(tag)\n{\n    //console.log(\">\"+tag);\n    if (tag == \"\") return false\n\n    // wait\n    $(\"#items_list_loader\").removeClass(\"hidden\");\n    $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['searching_tag']); ?>&nbsp;<b>' + tag + '</b> ...');\n\n    // clean\n    $(\"#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs\").html(\"\");\n    $(\"#button_quick_login_copy, #button_quick_pw_copy\").addClass(\"hidden\");\n    $(\"#full_items_list\").html(\"\");\n    $(\"#selected_items\").val(\"\");\n\n    // send query\n    $.get(\n        \"sources/find.queries.php\",\n        {\n            type        : \"search_for_items_with_tags\",\n            tagSearch   : tag,\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        function(data) {\n            data = prepareExchangedData(data , \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n            displayMessage(data.message);\n            $(\"#items_path_var\").html('<i class=\"fa fa-filter\"></i>&nbsp;<?php echo addslashes($LANG['search_results']); ?>&nbsp;<b>' + tag + '</b>');\n            $(\"#full_items_list\").html(data.items_html);\n            $(\"#items_list_loader\").addClass(\"hidden\");\n        }\n    );\n}\n\nfunction loadOfflineDialog()\n{\n    $(\"#dialog_offline_mode\").dialog({\n        open: function(event, ui) {\n            $(\"#div_offline_mode\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.offline.php?key=<?php echo $_SESSION['key']; ?>\", function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction loadExportDialog()\n{\n    $(\"#dialog_export_file\").dialog({\n        open: function(event, ui) {\n            $(\"#div_export_file\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.export.php?key=<?php echo $_SESSION['key']; ?>\", function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction loadImportDialog()\n{\n    $(\"#dialog_import_file\").dialog({\n        open: function(event, ui) {\n            $(\"#div_import_file\").load(\n                \"<?php echo $SETTINGS['cpassman_url']; ?>/items.import.php?key=<?php echo $_SESSION['key']; ?>&folder_id=\"+$(\"#hid_cat\").val(), function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\nfunction reEncryptPersonalPwds(remainingIds, currentId, nb)\n{\n    //console.log(remainingIds+\";\"+currentId+\";\"+nb);\n    $(\"#dialog_upgrade_personal_passwords_status\").html('<i class=\"fa fa-cog fa-spin\"></i>&nbsp;<?php echo addslashes($LANG['please_wait']); ?>&nbsp;...&nbsp;<span id=\"reencryption_progress\">0%</span>').attr(\"class\",\"\").show();\n\n    $.ajax({\n        url: \"sources/utils.queries.php\",\n        type : 'POST',\n        dataType : \"json\",\n        data : {\n            type        : \"reencrypt_personal_pwd\",\n            currentId   : currentId,\n            user_id     : \"<?php echo $_SESSION['user_id']; ?>\",\n            key         : \"<?php echo $_SESSION['key']; ?>\"\n        },\n        complete : function(data, statut){\n            var aIds = remainingIds.split(\",\");\n            var currentID = aIds[0];\n            aIds.shift();\n            var nb2 = aIds.length;\n            aIds = aIds.toString();\n            if (nb == 0)\n                $(\"#reencryption_progress\").html(\"100%\");\n            else\n                $(\"#reencryption_progress\").html(Math.floor(((nb-nb2) / nb) * 100)+\"%\");\n\n            if (nb2 != \"0\" || (nb2 == \"\" && currentID != \"\")) {\n                reEncryptPersonalPwds(aIds, currentID, nb);\n            } else {\n                $(\"#dialog_upgrade_personal_passwords\").html('<i class=\"fa fa-info\"></i>&nbsp;<?php echo addslashes($LANG['operation_encryption_done']); ?>');\n\n                // ensure that no upgrade popup is shown\n                $(\"#personal_upgrade_needed\").val(\"\");\n            }\n        }\n    });\n}\n\n function serverAutoChangePwd()\n {\n    //console.log(\"opening\");\n    $(\"#dialog_ssh\").dialog({\n        open: function(event, ui) {\n            $(\"#div_ssh\").load(\n                \"<?php echo $SETTINGS['cpassman_url'].'/ssh.php?key='.$_SESSION['key']; ?>&id=\"+$(\"#selected_items\").val(), function(){}\n            );\n        }\n    }).dialog(\"open\");\n}\n\n/*\n**\n*/\nfunction showPasswordsHistory() {\n    if ($('#edit_past_pwds_div').text() !== \"\") {\n        $('#edit_past_pwds_div').toggle();\n    }\n}\n\n$.fn.simulateClick = function() {\n    return this.each(function() {\n        if('createEvent' in document) {\n            var doc = this.ownerDocument,\n                evt = doc.createEvent('MouseEvents');\n            evt.initMouseEvent('click', true, true, doc.defaultView, 1, 0, 0, 0, 0, false, false, false, false, 0, null);\n            this.dispatchEvent(evt);\n        } else {\n            this.click(); // IE Boss!\n        }\n    });\n}\n\n\n// escape HTML characters\nString.prototype.escapeHTML = function() {\n    return this.replace(/&/g, \"&amp;\")\n        .replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\"/g, \"&quot;\")\n        .replace(/'/g, \"&#039;\");\n}\n//]]>\n</script>\n", "<?php\n/**\n * @file          core.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Please login...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n/**\n * redirection management\n * @param  [string] $url new url\n * @return refresh page to url\n */\nfunction redirect($url)\n{\n    // Load AntiXSS\n    require_once '../includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    if (!headers_sent()) {    //If headers not sent yet... then do php redirect\n        header('Location: '.$antiXss->xss_clean($url));\n        exit();\n    }\n\n    //If headers are sent... do java redirect... if java disabled, do html redirect.\n    echo '<script type=\"text/javascript\">';\n    echo 'window.location.href=\"'.$antiXss->xss_clean($url).'\";';\n    echo '</script>';\n    echo '<noscript>';\n    echo '<meta http-equiv=\"refresh\" content=\"0;url='.$antiXss->xss_clean($url).'\" />';\n    echo '</noscript>';\n}\n\n// Include files\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare GET variables\n$get_group = $superGlobal->get(\"group\", \"GET\");\n\n// Redirect needed?\nif (isset($_SERVER['HTTPS']) === true\n    && $_SERVER['HTTPS'] !== 'on'\n    && isset($SETTINGS['enable_sts']) === true\n    && $SETTINGS['enable_sts'] === \"1\"\n) {\n    redirect(\"https://\".$superGlobal->get(\"HTTP_HOST\", \"SERVER\").$superGlobal->get(\"REQUEST_URI\", \"SERVER\"));\n}\n\n\n// Load pwComplexity\nif (isset($SETTINGS_EXT['pwComplexity']) === false) {\n    // Pw complexity levels\n    if (isset($_SESSION['user_language']) === true && $_SESSION['user_language'] !== \"0\") {\n        if (file_exists($SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php') === true) {\n            require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\n        }\n        $SETTINGS_EXT['pwComplexity'] = array(\n            0=>array(0, $LANG['complex_level0']),\n            25=>array(25, $LANG['complex_level1']),\n            50=>array(50, $LANG['complex_level2']),\n            60=>array(60, $LANG['complex_level3']),\n            70=>array(70, $LANG['complex_level4']),\n            80=>array(80, $LANG['complex_level5']),\n            90=>array(90, $LANG['complex_level6'])\n        );\n    }\n}\n\n\n// LOAD CPASSMAN SETTINGS\nif (isset($SETTINGS_EXT['loaded']) === false || $SETTINGS_EXT['loaded'] !== \"1\") {\n    $SETTINGS_EXT['loaded'] = 1;\n\n    // Should we delete folder INSTALL?\n    $row = DB::queryFirstRow(\n        \"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type=%s AND intitule=%s\",\n        \"install\",\n        \"clear_install_folder\"\n    );\n    if ($row['valeur'] === \"true\") {\n        /**\n        * Permits to delete files and folders recursively\n        */\n        function delTree($dir)\n        {\n            $files = array_diff(scandir($dir), array('.', '..'));\n\n            foreach ($files as $file) {\n                if (is_dir($dir.'/'.$file)) {\n                    delTree($dir.'/'.$file);\n                } else {\n                    @unlink($dir.'/'.$file);\n                }\n            }\n            return @rmdir($dir);\n        }\n\n        $result = true;\n        if (is_dir($SETTINGS['cpassman_dir'].'/install')) {\n            // Set the permissions on the install directory and delete\n            // is server Windows or Linux?\n            if (strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {\n                chmodRecursive($SETTINGS['cpassman_dir'].'/install', 0755, 0440);\n            }\n            $result = delTree($SETTINGS['cpassman_dir'].'/install');\n        }\n\n        // Delete temporary install table\n        DB::query(\"DROP TABLE IF EXISTS `_install`\");\n\n        // Delete tag\n        DB::delete(\n            $pre.\"misc\",\n            \"type=%s AND intitule=%s\",\n            \"install\",\n            \"clear_install_folder\"\n        );\n    }\n}\n\n\nif (isset($_SESSION['user_settings']['usertimezone']) === true && $_SESSION['user_settings']['usertimezone'] !== \"not_defined\") {\n    // use user timezone\n    date_default_timezone_set($_SESSION['user_settings']['usertimezone']);\n} elseif (isset($SETTINGS['timezone']) === false || $SETTINGS['timezone'] === null) {\n    // use server timezone\n    date_default_timezone_set('UTC');\n    $SETTINGS['timezone'] = \"UTC\";\n} else {\n    // use server timezone\n    date_default_timezone_set($SETTINGS['timezone']);\n}\n\n\n// Load Languages stuff\nif (empty($languagesDropmenu) === true) {\n    $languagesList = array();\n    $rows = DB::query(\"SELECT * FROM \".prefix_table(\"languages\").\" GROUP BY name, label, code, flag, id ORDER BY name ASC\");\n    foreach ($rows as $record) {\n        array_push($languagesList, $record['name']);\n        if (isset($_SESSION['user_language']) && $record['name'] == $_SESSION['user_language']) {\n            $_SESSION['user_language_flag'] = $record['flag'];\n            $_SESSION['user_language_code'] = $record['code'];\n            $_SESSION['user_language_label'] = $record['label'];\n            $_SESSION['user_language_id'] = $record['id'];\n        }\n    }\n}\n\n// CHECK IF LOGOUT IS ASKED OR IF SESSION IS EXPIRED\nif ((isset($_GET['session']) === true && $_GET['session'] == \"expired\")\n    || (null !== filter_input(INPUT_POST, 'session', FILTER_SANITIZE_STRING) && filter_input(INPUT_POST, 'session', FILTER_SANITIZE_STRING) === \"expired\")\n) {\n    // Clear User tempo key\n    if (isset($_SESSION['user_id']) === true) {\n        DB::update(\n            prefix_table(\"users\"),\n            array(\n                'key_tempo' => '',\n                'timestamp' => '',\n                'session_end' => ''\n            ),\n            \"id=%i\",\n            $_SESSION['user_id']\n        );\n    }\n\n    // REDIRECTION PAGE ERREUR\n    echo '\n    <script language=\"javascript\" type=\"text/javascript\">\n    <!--\n        sessionStorage.clear();\n        window.location.href = \"logout.php\";\n    -->\n    </script>';\n    exit;\n}\n\n// CHECK IF SESSION EXISTS AND IF SESSION IS VALID\nif (empty($_SESSION['fin_session']) === false) {\n    $dataSession = DB::queryFirstRow(\n        \"SELECT key_tempo FROM \".prefix_table(\"users\").\" WHERE id=%i\",\n        $_SESSION['user_id']\n    );\n} else {\n    $dataSession['key_tempo'] = \"\";\n}\n\nif (isset($_SESSION['user_id']) === true && isset($_GET['type']) === false && isset($_GET['action']) === false && $_SESSION['user_id'] !== \"0\" && (\n        empty($_SESSION['fin_session']) === true\n        || $_SESSION['fin_session'] < time() || empty($_SESSION['key'])\n        || empty($dataSession['key_tempo']) === true\n    )\n) {\n    // Update table by deleting ID\n    DB::update(\n        prefix_table(\"users\"),\n        array(\n            'key_tempo' => '',\n            'timestamp' => '',\n            'session_end' => ''\n        ),\n        \"id=%i\",\n        $_SESSION['user_id']\n    );\n\n    //Log into DB the user's disconnection\n    if (isset($SETTINGS['log_connections']) === true\n        && $SETTINGS['log_connections'] === '1'\n        && isset($_SESSION['login']) === true\n        && empty($_SESSION['login']) === false\n    ) {\n        logEvents('user_connection', 'disconnection', $_SESSION['user_id'], $_SESSION['login']);\n    }\n\n    // erase session table\n    session_destroy();\n    $_SESSION = array();\n    unset($_SESSION);\n\n    //Redirection\n    echo '\n    <script language=\"javascript\" type=\"text/javascript\">\n    <!--\n    setTimeout(function(){document.location.href=\"index.php\"}, 1);\n    -->\n    </script>';\n}\n\n// CHECK IF UPDATE IS NEEDED\nif ((isset($SETTINGS['update_needed']) === true && ($SETTINGS['update_needed'] !== false\n    || empty($SETTINGS['update_needed']) === true))\n    && (isset($_SESSION['user_admin']) === true && $_SESSION['user_admin'] == 1)\n) {\n    $row = DB::queryFirstRow(\n        \"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type=%s_type AND intitule=%s_intitule\",\n        array(\n            \"type\" => \"admin\",\n            \"intitule\" => \"cpassman_version\"\n        )\n    );\n    if ($row['valeur'] != $SETTINGS_EXT['version']) {\n        $SETTINGS['update_needed'] = true;\n    } else {\n        $SETTINGS['update_needed'] = false;\n    }\n}\n\n/**\n * Set the personal SaltKey if authorized\n */\nif (isset($SETTINGS['enable_personal_saltkey_cookie']) === true\n    && $SETTINGS['enable_personal_saltkey_cookie'] == 1\n    && isset($_SESSION['user_id']) === true\n    && isset($_COOKIE['TeamPass_PFSK_'.md5($_SESSION['user_id'])]) === true\n) {\n    $_SESSION['user_settings']['clear_psk'] = decrypt($_COOKIE['TeamPass_PFSK_'.md5($_SESSION['user_id'])], '');\n}\n\n/* CHECK IF MAINTENANCE MODE\n* IF yes then authorize all ADMIN connections and\n* reject all others\n*/\nif (isset($SETTINGS['maintenance_mode']) === true && $SETTINGS['maintenance_mode'] == 1) {\n    if (isset($_SESSION['user_admin']) === true && $_SESSION['user_admin'] != 1) {\n        // Update table by deleting ID\n        if (isset($_SESSION['user_id']) === true) {\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'key_tempo' => '',\n                    'timestamp' => '',\n                    'session_end' => ''\n                ),\n                \"id=%i\",\n                $_SESSION['user_id']\n            );\n        }\n\n        //Log into DB the user's disconnection\n        if (isset($SETTINGS['log_connections']) === true && $SETTINGS['log_connections'] == 1) {\n            logEvents('user_connection', 'disconnection', $_SESSION['user_id'], $_SESSION['login']);\n        }\n\n        syslog(\n            LOG_WARNING,\n            \"Unlog user: \".date(\"Y/m/d H:i:s\").\" {$_SERVER['REMOTE_ADDR']} ({$_SERVER['HTTP_USER_AGENT']})\"\n        );\n\n        // erase session table\n        $_SESSION = array();\n\n        setcookie('pma_end_session');\n\n        // REDIRECTION PAGE ERREUR\n        echo '\n        <script language=\"javascript\" type=\"text/javascript\">\n        <!--\n        setTimeout(function(){document.location.href=\"logout.php\"}, 10);\n        -->\n        </script>';\n        exit;\n    }\n}\n\n/* Force HTTPS Strict Transport Security */\nif (isset($SETTINGS['enable_sts']) === true\n    && $SETTINGS['enable_sts'] === '1'\n    && isset($_SERVER['SSL_SERVER_CERT']) === true\n) {\n    // do a check to make sure that the certificate is not self signed.\n    // In apache's SSL configuration make sure \"SSLOptions +ExportCertData\" in enabled\n    $server_cert = openssl_x509_parse($_SERVER['SSL_SERVER_CERT']);\n    $cert_name = $server_cert['name'];\n    $cert_issuer = \"\";\n    foreach ($server_cert['issuer'] as $key => $value) {\n        if (is_array($value) === false) {\n            $cert_issuer .= \"/$key=$value\";\n        }\n    }\n    if (isset($cert_name) === true && empty($cert_name) === false && $cert_name != $cert_issuer) {\n        if (isset($_SERVER['HTTPS'])) {\n            header('Strict-Transport-Security: max-age=500');\n            $_SESSION['error']['sts'] = 0;\n        }\n    } elseif ($cert_name == $cert_issuer) {\n        $_SESSION['error']['sts'] = 1;\n    }\n}\n\n/* LOAD INFORMATION CONCERNING USER */\nif (isset($_SESSION['user_id']) === true && empty($_SESSION['user_id']) === false) {\n    // query on user\n    $data = DB::queryfirstrow(\n        \"SELECT admin, gestionnaire, can_manage_all_users, groupes_visibles, groupes_interdits, fonction_id FROM \".prefix_table(\"users\").\" WHERE id=%i\",\n        $_SESSION['user_id']\n    );\n\n    //Check if user has been deleted or unlogged\n    if (empty($data) === true) {\n        // erase session table\n        $_SESSION = array();\n\n        // Kill session\n        session_destroy();\n\n        //redirection to index\n        echo '\n        <script language=\"javascript\" type=\"text/javascript\">\n        <!--\n        setTimeout(function(){document.location.href=\"index.php\"}, 10);\n        -->\n        </script>';\n    } else {\n        // update user's rights\n        $_SESSION['user_admin'] = $data['admin'];\n        $_SESSION['user_manager'] = $data['gestionnaire'];\n        $_SESSION['user_can_manage_all_users'] = $data['can_manage_all_users'];\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        if (empty($data['groupes_visibles']) === false) {\n            $_SESSION['groupes_visibles'] = @implode(';', $data['groupes_visibles']);\n        }\n        if (empty($data['groupes_interdits']) === false) {\n            $_SESSION['groupes_interdits'] = @implode(';', $data['groupes_interdits']);\n        }\n\n        if (isset($_SESSION['fin_session']) === false) {\n            DB::update(\n                prefix_table(\"users\"),\n                array(\n                    'timestamp'=>time()\n                ),\n                \"id=%i\",\n                $_SESSION['user_id']\n            );\n        }\n\n        // get access rights\n        identifyUserRights(\n            $data['groupes_visibles'],\n            $data['groupes_interdits'],\n            $data['admin'],\n            $data['fonction_id']\n        );\n\n        // user type\n        if (isset($LANG) === true) {\n            if ($_SESSION['user_admin'] === '1') {\n                $_SESSION['user_privilege'] = $LANG['god'];\n            } elseif ($_SESSION['user_manager'] === '1') {\n                $_SESSION['user_privilege'] = $LANG['gestionnaire'];\n            } elseif ($_SESSION['user_read_only'] === '1') {\n                $_SESSION['user_privilege'] = $LANG['read_only_account'];\n            } else {\n                $_SESSION['user_privilege'] = $LANG['user'];\n            }\n        }\n\n        /*\n        * LOAD CATEGORIES\n        */\n        if (isset($SETTINGS['item_extra_fields']) === true\n            && $SETTINGS['item_extra_fields'] == 1\n            && empty($_SESSION['item_fields']) === true\n        ) {\n            $_SESSION['item_fields'] = array();\n            $rows = DB::query(\n                \"SELECT *\n                FROM \".prefix_table(\"categories\").\"\n                WHERE level=%i\",\n                \"0\"\n            );\n            foreach ($rows as $record) {\n                $arrFields = array();\n\n                // get each field\n                $rows2 = DB::query(\n                    \"SELECT *\n                    FROM \".prefix_table(\"categories\").\"\n                    WHERE parent_id=%i\n                    ORDER BY `order` ASC\",\n                    $record['id']\n                );\n                if (DB::count() > 0) {\n                    foreach ($rows2 as $field) {\n                        array_push(\n                            $arrFields,\n                            array(\n                                $field['id'],\n                                addslashes($field['title']),\n                                $field['encrypted_data'],\n                                $field['type']\n                            )\n                        );\n                    }\n                }\n\n                // store the categories\n                array_push(\n                    $_SESSION['item_fields'],\n                    array(\n                        $record['id'],\n                        addslashes($record['title']),\n                        $arrFields\n                    )\n                );\n            }\n        }\n    }\n}\n\n/*\n* CHECK PASSWORD VALIDITY\n* Don't take into consideration if LDAP in use\n*/\n$_SESSION['numDaysBeforePwExpiration'] = \"\"; //initiliaze variable\nif (isset($SETTINGS['ldap_mode']) === true && $SETTINGS['ldap_mode'] === \"1\") {\n    $_SESSION['validite_pw'] = true;\n    $_SESSION['last_pw_change'] = true;\n} else {\n    if (isset($_SESSION['last_pw_change']) === true) {\n        if ($SETTINGS['pw_life_duration'] === \"0\") {\n            $_SESSION['numDaysBeforePwExpiration'] = \"infinite\";\n            $_SESSION['validite_pw'] = true;\n        } else {\n            $_SESSION['numDaysBeforePwExpiration'] = $SETTINGS['pw_life_duration'] - round(\n                (mktime(0, 0, 0, date('m'), date('d'), date('y')) - $_SESSION['last_pw_change']) / (24 * 60 * 60)\n            );\n            if ($_SESSION['numDaysBeforePwExpiration'] <= 0) {\n                $_SESSION['validite_pw'] = false;\n            } else {\n                $_SESSION['validite_pw'] = true;\n            }\n        }\n    } else {\n        $_SESSION['validite_pw'] = false;\n    }\n}\n\n/*\n**\n*/\n$_SESSION['temporary']['user_can_printout'] = false;\nif (isset($SETTINGS['roles_allowed_to_print']) === true\n    && isset($_SESSION['user_roles']) === true\n    && (!isset($_SESSION['temporary']['user_can_printout']) || empty($_SESSION['temporary']['user_can_printout']))\n) {\n    foreach (explode(\";\", $SETTINGS['roles_allowed_to_print']) as $role) {\n        if (in_array($role, $_SESSION['user_roles']) === true) {\n            $_SESSION['temporary']['user_can_printout'] = true;\n        }\n    }\n}\n\n\n/* CHECK NUMBER OF USER ONLINE */\nDB::query(\"SELECT * FROM \".prefix_table(\"users\").\" WHERE timestamp>=%i\", time() - 600);\n$_SESSION['nb_users_online'] = DB::count();\n", "<?php\n/**\n * @file          items.queries.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link          http://www.teampass.net\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n */\nrequire_once 'SecureHandler.php';\nsession_start();\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] === false || !isset($_SESSION['key']) || empty($_SESSION['key'])) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// Do checks\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'].'/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'home') === false) {\n    // Not allowed page\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    include $SETTINGS['cpassman_dir'].'/error.php';\n    exit();\n}\n\n/**\n * Define Timezone\n**/\nif (isset($SETTINGS['timezone']) === true) {\n    date_default_timezone_set($SETTINGS['timezone']);\n} else {\n    date_default_timezone_set('UTC');\n}\n\nrequire_once $SETTINGS['cpassman_dir'].'/includes/language/'.$_SESSION['user_language'].'.php';\nrequire_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\nheader('Content-type: text/html; charset=utf-8');\nheader('Cache-Control: no-cache, must-revalidate');\nheader('Pragma: no-cache');\nrequire_once 'main.functions.php';\n\n// Ensure Complexity levels are translated\nif (isset($SETTINGS_EXT['pwComplexity']) === false) {\n    $SETTINGS_EXT['pwComplexity'] = array(\n        0=>array(0, $LANG['complex_level0']),\n        25=>array(25, $LANG['complex_level1']),\n        50=>array(50, $LANG['complex_level2']),\n        60=>array(60, $LANG['complex_level3']),\n        70=>array(70, $LANG['complex_level4']),\n        80=>array(80, $LANG['complex_level5']),\n        90=>array(90, $LANG['complex_level6'])\n    );\n}\n\n// Class loader\nrequire_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n// Connect to mysql server\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n$pass = defuse_return_decrypted($pass);\nDB::$host = $server;\nDB::$user = $user;\nDB::$password = $pass;\nDB::$dbName = $database;\nDB::$port = $port;\nDB::$encoding = $encoding;\nDB::$error_handler = true;\n$link = mysqli_connect($server, $user, $pass, $database, $port);\n$link->set_charset($encoding);\n\n//Load Tree\n$tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n$tree->register();\n$tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n// phpcrypt\nrequire_once $SETTINGS['cpassman_dir'].'/includes/libraries/phpcrypt/phpCrypt.php';\nuse PHP_Crypt\\PHP_Crypt as PHP_Crypt;\n\n// Prepare POST variables\n$post_page = filter_input(INPUT_POST, 'page', FILTER_SANITIZE_STRING);\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_STRING);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_STRING);\n$post_key = filter_input(INPUT_POST, 'key', FILTER_SANITIZE_STRING);\n$post_label = filter_input(INPUT_POST, 'label', FILTER_SANITIZE_STRING);\n$post_status = filter_input(INPUT_POST, 'status', FILTER_SANITIZE_STRING);\n$post_cat = filter_input(INPUT_POST, 'cat', FILTER_SANITIZE_STRING);\n$post_receipt = filter_input(INPUT_POST, 'receipt', FILTER_SANITIZE_STRING);\n$post_item_id = filter_input(INPUT_POST, 'item_id', FILTER_SANITIZE_NUMBER_INT);\n$post_id_tree = filter_input(INPUT_POST, 'id_tree', FILTER_SANITIZE_NUMBER_INT);\n$post_folder_id = filter_input(INPUT_POST, 'folder_id', FILTER_SANITIZE_NUMBER_INT);\n$post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_NUMBER_INT);\n$post_destination = filter_input(INPUT_POST, 'destination', FILTER_SANITIZE_NUMBER_INT);\n$post_source = filter_input(INPUT_POST, 'source', FILTER_SANITIZE_NUMBER_INT);\n$post_user_id = filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT);\n$post_iFolderId = filter_input(INPUT_POST, 'iFolderId', FILTER_SANITIZE_NUMBER_INT);\n\n// Do asked action\nif (null !== $post_type) {\n    switch ($post_type) {\n        /*\n        * CASE\n        * creating a new ITEM\n        */\n        case \"new_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                $post_data,\n                \"decode\"\n            );\n\n            // Prepare variables\n            $label = filter_var(htmlspecialchars_decode($dataReceived['label']), FILTER_SANITIZE_STRING);\n            $url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_STRING);\n            $pw = htmlspecialchars_decode($dataReceived['pw']);\n            $login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n            $tags = htmlspecialchars_decode($dataReceived['tags']);\n\n            // is author authorized to create in this folder\n            if (count($_SESSION['list_folders_limited']) > 0) {\n                if (!in_array($dataReceived['categorie'], array_keys($_SESSION['list_folders_limited']))\n                    && !in_array($dataReceived['categorie'], $_SESSION['groupes_visibles'])\n                    && !in_array($dataReceived['categorie'], $_SESSION['personal_visible_groups_list'])\n                ) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n            } else {\n                if (!in_array($dataReceived['categorie'], $_SESSION['groupes_visibles'])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true &&\n                !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            // is pwd empty?\n            if (empty($pw) &&\n                isset($_SESSION['user_settings']['create_item_without_password']) &&\n                $_SESSION['user_settings']['create_item_without_password'] !== '1'\n            ) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_PWD_EMPTY\"), \"encode\");\n                break;\n            }\n\n            // Check length\n            if (strlen($pw) > $SETTINGS['pwd_maximum_length']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_PWD_TOO_LONG\"), \"encode\");\n                break;\n            }\n            // check if element doesn't already exist\n            $itemExists = 0;\n            $newID = \"\";\n            $data = DB::queryfirstrow(\n                \"SELECT * FROM \".prefix_table(\"items\").\"\n                WHERE label = %s AND inactif = %i\",\n                $label,\n                0\n            );\n            $counter = DB::count();\n            if ($counter != 0) {\n                $itemExists = 1;\n            } else {\n                $itemExists = 0;\n            }\n\n            // Manage case where item is personal.\n            // In this case, duplication is allowed\n            if (isset($SETTINGS['duplicate_item'])\n                && $SETTINGS['duplicate_item'] === '0'\n                && $dataReceived['salt_key_set'] === '1'\n                && isset($dataReceived['salt_key_set'])\n                && $dataReceived['is_pf'] === '1'\n                && isset($dataReceived['is_pf'])\n            ) {\n                $itemExists = 0;\n            }\n\n            if ((isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '0' && $itemExists === 0)\n                ||\n                (isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '1')\n            ) {\n                // Handle case where pw is empty\n                // if not allowed then warn user\n                if ((isset($_SESSION['user_settings']['create_item_without_password'])\n                    && $_SESSION['user_settings']['create_item_without_password'] !== '1'\n                    ) ||\n                    !empty($pw)\n                ) {\n                    // encrypt PW\n                    if ($dataReceived['salt_key_set'] === '1' &&\n                        isset($dataReceived['salt_key_set']) &&\n                        $dataReceived['is_pf'] === '1' &&\n                        isset($dataReceived['is_pf'])\n                    ) {\n                        $passwd = cryption(\n                            $pw,\n                            $_SESSION['user_settings']['session_psk'],\n                            \"encrypt\"\n                        );\n                        $restictedTo = $_SESSION['user_id'];\n                    } else {\n                        $passwd = cryption(\n                            $pw,\n                            \"\",\n                            \"encrypt\"\n                        );\n                    }\n                } else {\n                    $passwd['string'] = '';\n                }\n\n                if (!empty($passwd[\"error\"])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_ENCRYPTION\", \"msg\" => $passwd[\"error\"]), \"encode\");\n                    break;\n                }\n\n                // ADD item\n                DB::insert(\n                    prefix_table(\"items\"),\n                    array(\n                        'label' => $label,\n                        'description' => $dataReceived['description'],\n                        'pw' => $passwd['string'],\n                        'pw_iv' => \"\",\n                        'email' => noHTML($dataReceived['email']),\n                        'url' => noHTML($url),\n                        'id_tree' => $dataReceived['categorie'],\n                        'login' => noHTML($login),\n                        'inactif' => '0',\n                        'restricted_to' => isset($dataReceived['restricted_to']) ? $dataReceived['restricted_to'] : '0',\n                        'perso' => (isset($dataReceived['salt_key_set']) && $dataReceived['salt_key_set'] === '1' && isset($dataReceived['is_pf']) && $dataReceived['is_pf'] === '1') ? '1' : '0',\n                        'anyone_can_modify' => (isset($dataReceived['anyone_can_modify']) && $dataReceived['anyone_can_modify'] === \"on\") ? '1' : '0',\n                        'complexity_level' => $dataReceived['complexity_level']\n                        )\n                );\n                $newID = DB::insertId();\n                $pw = $passwd['string'];\n\n                // update fields\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                    foreach (explode(\"_|_\", $dataReceived['fields']) as $field) {\n                        $field_data = explode(\"~~\", $field);\n                        if (count($field_data) > 1 && !empty($field_data[1])) {\n                            // should we encrypt the data\n                            $dataTmp = DB::queryFirstRow(\n                                \"SELECT encrypted_data\n                                FROM \".prefix_table(\"categories\").\"\n                                WHERE id = %i\",\n                                $field_data[0]\n                            );\n                            if ($dataTmp['encrypted_data'] === '1') {\n                                $encrypt = cryption(\n                                    $field_data[1],\n                                    \"\",\n                                    \"encrypt\"\n                                );\n                                $enc_type = \"defuse\";\n                            } else {\n                                $encrypt['string'] = $field_data[1];\n                                $enc_type = \"not_set\";\n                            }\n\n\n                            DB::insert(\n                                prefix_table('categories_items'),\n                                array(\n                                    'item_id' => $newID,\n                                    'field_id' => $field_data[0],\n                                    'data' => $encrypt['string'],\n                                    'data_iv' => \"\",\n                                    'encryption_type' => $enc_type\n                                )\n                            );\n                        }\n                    }\n                }\n\n                // If automatic deletion asked\n                if ($dataReceived['to_be_deleted'] != 0 && !empty($dataReceived['to_be_deleted'])) {\n                    $date_stamp = dateToStamp($dataReceived['to_be_deleted']);\n                    DB::insert(\n                        prefix_table('automatic_del'),\n                        array(\n                            'item_id' => $newID,\n                            'del_enabled' => 1, /* Possible values: 0=deactivated;1=activated */\n                            'del_type' => $date_stamp !== false ? 2 : 1, /* Possible values:  1=counter;2=date */\n                            'del_value' => $date_stamp !== false ? $date_stamp : $dataReceived['to_be_deleted']\n                            )\n                    );\n                }\n\n                // Manage retriction_to_roles\n                if (isset($dataReceived['restricted_to_roles'])) {\n                    foreach (array_filter(explode(';', $dataReceived['restricted_to_roles'])) as $role) {\n                        DB::insert(\n                            prefix_table('restriction_to_roles'),\n                            array(\n                                'role_id' => $role,\n                                'item_id' => $newID\n                                )\n                        );\n                    }\n                }\n                // log\n                logItems($newID, $label, $_SESSION['user_id'], 'at_creation', $_SESSION['login']);\n                // Add tags\n                $tags = explode(' ', $tags);\n                foreach ($tags as $tag) {\n                    if (!empty($tag)) {\n                        DB::insert(\n                            prefix_table('tags'),\n                            array(\n                                'item_id' => $newID,\n                                'tag' => strtolower($tag)\n                                )\n                        );\n                    }\n                }\n                // Check if any files have been added\n                if (!empty($dataReceived['random_id_from_files'])) {\n                    $rows = DB::query(\n                        \"SELECT id\n                        FROM \".prefix_table(\"files\").\"\n                        WHERE id_item = %s\",\n                        $dataReceived['random_id_from_files']\n                    );\n                    foreach ($rows as $record) {\n                        // update item_id in files table\n                        DB::update(\n                            prefix_table('files'),\n                            array(\n                                'id_item' => $newID\n                                ),\n                            \"id=%i\",\n                            $record['id']\n                        );\n                    }\n                }\n\n                // Announce by email?\n                if (!empty($dataReceived['diffusion'])) {\n                    // get links url\n                    if (empty($SETTINGS['email_server_url'])) {\n                        $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                    }\n                    // send email\n                    foreach (explode(';', $dataReceived['diffusion']) as $emailAddress) {\n                        if (!empty($emailAddress)) {\n                            // send it\n                            sendEmail(\n                                $LANG['email_subject'],\n                                str_replace(\n                                    array(\"#label\", \"#link\"),\n                                    array(stripslashes($label), $SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataReceived['categorie'].'&id='.$newID.$txt['email_body3']),\n                                    $LANG['new_item_email_body']\n                                ),\n                                $emailAddress,\n                                str_replace(\n                                    array(\"#label\", \"#link\"),\n                                    array(stripslashes($label), $SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataReceived['categorie'].'&id='.$newID.$txt['email_body3']),\n                                    $LANG['new_item_email_body']\n                                )\n                            );\n                        }\n                    }\n                }\n                // Get Expiration date\n                $expirationFlag = '';\n                if ($SETTINGS['activate_expiration'] === '1') {\n                    $expirationFlag = '<i class=\"fa fa-flag mi-green\"></i>&nbsp;';\n                }\n                // Prepare full line\n                $html = '<li class=\"item_draggable'\n                .'\" id=\"'.$newID.'\" style=\"margin-left:-30px;\">'\n                .'<span style=\"cursor:hand;\" class=\"grippy\"><i class=\"fa fa-sm fa-arrows mi-grey-1\"></i>&nbsp;</span>'\n                .$expirationFlag.'<i class=\"fa fa-sm fa-warning mi-yellow\"></i>&nbsp;'.\n                '&nbsp;<a id=\"fileclass'.$newID.'\" class=\"file\" onclick=\"AfficherDetailsItem(\\''.$newID.'\\', \\'0\\', \\'\\', \\'\\', \\'\\', \\'\\', \\'\\')\" ondblclick=\"AfficherDetailsItem(\\''.$newID.'\\', \\'0\\', \\'\\', \\'\\', \\'\\', true, \\'\\')\">'.\n                stripslashes($dataReceived['label']);\n                if (!empty($dataReceived['description']) && isset($SETTINGS['show_description']) && $SETTINGS['show_description'] === '1') {\n                    $html .= '&nbsp;<font size=2px>['.strip_tags(stripslashes(substr(cleanString($dataReceived['description']), 0, 30))).']</font>';\n                }\n                $html .= '</a><span style=\"float:right;margin:2px 10px 0px 0px;\">';\n                // mini icon for collab\n                if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                    if ($dataReceived['anyone_can_modify'] === '1') {\n                        $itemCollab = '<i class=\"fa fa-pencil fa-sm mi-grey-1 tip\" title=\"'.$LANG['item_menu_collab_enable'].'\"></i>&nbsp;&nbsp;';\n                    }\n                }\n                // display quick icon shortcuts ?\n                if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                    $itemLogin = $itemPw = \"\";\n\n                    if (!empty($dataReceived['login'])) {\n                        $itemLogin = '<span id=\"iconlogin_'.$newID.'\" class=\"copy_clipboard tip\" title=\"'.$LANG['item_menu_copy_login'].'\"><i class=\"fa fa-sm fa-user mi-black\"></i>&nbsp;</span>';\n                    }\n                    if (!empty($dataReceived['pw'])) {\n                        $itemPw = '<span id=\"iconpw_'.$newID.'\" class=\"copy_clipboard tip\" title=\"'.$LANG['item_menu_copy_login'].'\"><i class=\"fa fa-sm fa-lock mi-black\"></i>&nbsp;</span>';\n                    }\n                    $html .= $itemLogin.'&nbsp;'.$itemPw;\n                }\n                // Prepare make Favorite small icon\n                $html .= '&nbsp;<span id=\"quick_icon_fav_'.$newID.'\" title=\"Manage Favorite\" class=\"cursor\">';\n                if (in_array($newID, $_SESSION['favourites'])) {\n                    $html .= '<i class=\"fa fa-sm fa-star mi-yellow\" onclick=\"ActionOnQuickIcon('.$newID.',0)\" class=\"tip\"></i>';\n                } else {\n                    $html .= '<i class=\"fa fa-sm fa-star-o mi-black\" onclick=\"ActionOnQuickIcon('.$newID.',1)\" class=\"tip\"></i>';\n                }\n\n                $html .= '</span></li>';\n                // Build array with items\n                $itemsIDList = array($newID, $dataReceived['pw'], $login);\n\n                $returnValues = array(\n                    \"item_exists\" => $itemExists,\n                    \"error\" => \"no\",\n                    \"new_id\" => $newID,\n                    \"new_pw\" => $dataReceived['pw'],\n                    \"new_login\" => $login,\n                    \"new_entry\" => $html,\n                    \"array_items\" => $itemsIDList,\n                    \"show_clipboard_small_icons\" => (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') ? 1 : 0\n                    );\n            } elseif (isset($SETTINGS['duplicate_item']) && $SETTINGS['duplicate_item'] === '0' && (int) $itemExists === 1) {\n                // Encrypt data to return\n                echo prepareExchangedData(array(\"error\" => \"item_exists\"), \"encode\");\n                break;\n            }\n\n            // Update CACHE table\n            updateCacheTable(\"add_value\", $newID);\n\n            // Encrypt data to return\n            echo prepareExchangedData($returnValues, \"encode\");\n            break;\n\n        /*\n        * CASE\n        * update an ITEM\n        */\n        case \"update_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // init\n            $reloadPage = false;\n            $returnValues = array();\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData(\n                $post_data,\n                \"decode\"\n            );\n\n            if (count($dataReceived) > 0) {\n                // Prepare variables\n                $label = filter_var(($dataReceived['label']), FILTER_SANITIZE_STRING);\n                $url = filter_var(htmlspecialchars_decode($dataReceived['url']), FILTER_SANITIZE_STRING);\n                $pw = $original_pw = $sentPw = htmlspecialchars_decode($dataReceived['pw']);\n                $login = filter_var(htmlspecialchars_decode($dataReceived['login']), FILTER_SANITIZE_STRING);\n                $tags = htmlspecialchars_decode($dataReceived['tags']);\n                $email = filter_var(htmlspecialchars_decode($dataReceived['email']), FILTER_SANITIZE_STRING);\n\n                // perform a check in case of Read-Only user creating an item in his PF\n                if ($_SESSION['user_read_only'] === true && (!in_array($dataReceived['categorie'], $_SESSION['personal_folders']) || $dataReceived['is_pf'] !== '1')) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n\n                // Get all informations for this item\n                $dataItem = DB::queryfirstrow(\n                    \"SELECT *\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                    WHERE i.id=%i AND l.action = %s\",\n                    $dataReceived['id'],\n                    \"at_creation\"\n                );\n                // check that actual user can access this item\n                $restrictionActive = true;\n                $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n                if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                    $restrictionActive = false;\n                }\n                if (empty($dataItem['restricted_to'])) {\n                    $restrictionActive = false;\n                }\n\n                // perform a check in case of Read-Only user creating an item in his PF\n                if ($_SESSION['user_read_only'] === true && !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])) {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                    break;\n                }\n\n                if ((\n                        in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])\n                        && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id']))\n                        && $restrictionActive === false\n                    )\n                    ||\n                    (\n                        isset($SETTINGS['anyone_can_modify'])\n                        && $SETTINGS['anyone_can_modify'] === '1'\n                        && $dataItem['anyone_can_modify'] === '1'\n                        && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1')\n                        && $restrictionActive === false\n                    )\n                    ||\n                    (null !== $post_folder_id\n                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && $post_restricted === '1'\n                    && $restrictionActive === false)\n                ) {\n                    // Is pwd empty?\n                    if (empty($pw) && isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_PWD_EMPTY\"), \"encode\");\n                        break;\n                    }\n\n                    // Check length\n                    if (strlen($pw) > $SETTINGS['pwd_maximum_length']) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_PWD_TOO_LONG\"), \"encode\");\n                        break;\n                    }\n                    // Get existing values\n                    $data = DB::queryfirstrow(\n                        \"SELECT i.id as id, i.label as label, i.description as description, i.pw as pw, i.url as url, i.id_tree as id_tree, i.perso as perso, i.login as login,\n                        i.inactif as inactif, i.restricted_to as restricted_to, i.anyone_can_modify as anyone_can_modify, i.email as email, i.notification as notification,\n                        u.login as user_login, u.email as user_email\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"log_items\").\" as l ON (i.id=l.id_item)\n                        INNER JOIN \".prefix_table(\"users\").\" as u ON (u.id=l.id_user)\n                        WHERE i.id=%i\",\n                        $dataReceived['id']\n                    );\n                    // encrypt PW\n                    if ((isset($_SESSION['user_settings']['create_item_without_password']) && $_SESSION['user_settings']['create_item_without_password'] !== '1') || !empty($pw)) {\n                        if ($dataReceived['salt_key_set'] === '1' && isset($dataReceived['salt_key_set']) && $dataReceived['is_pf'] === '1' && isset($dataReceived['is_pf'])) {\n                            $sentPw = $pw;\n                            $passwd = cryption(\n                                $pw,\n                                $_SESSION['user_settings']['session_psk'],\n                                \"encrypt\"\n                            );\n                            $restictedTo = $_SESSION['user_id'];\n                        } else {\n                            $passwd = cryption(\n                                $pw,\n                                \"\",\n                                \"encrypt\"\n                            );\n                        }\n\n                        if (!empty($passwd[\"error\"])) {\n                            echo prepareExchangedData(array(\"error\" => $passwd[\"error\"]), \"encode\");\n                            break;\n                        }\n                    } else {\n                        $passwd['string'] = \"\";\n                    }\n\n                    // ---Manage tags\n                    // deleting existing tags for this item\n                    DB::delete($pre.\"tags\", \"item_id = %i\", $dataReceived['id']);\n\n                    // Add new tags\n                    $return_tags = \"\";\n                    $tags = explode(' ', $tags);\n                    foreach ($tags as $tag) {\n                        if (!empty($tag)) {\n                            // save in DB\n                            DB::insert(\n                                prefix_table('tags'),\n                                array(\n                                    'item_id' => $dataReceived['id'],\n                                    'tag' => strtolower($tag)\n                                )\n                            );\n                            // prepare display\n                            if (empty($tags)) {\n                                $return_tags = \"<span class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".strtolower($tag).\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".strtolower($tag).\"</span></span>\";\n                            } else {\n                                $return_tags .= \"&nbsp;&nbsp;<span class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".strtolower($tag).\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".strtolower($tag).\"</span></span>\";\n                            }\n                        }\n                    }\n\n                    // update item\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'label' => $label,\n                            'description' => $dataReceived['description'],\n                            'pw' => $passwd['string'],\n                            'pw_iv' => \"\",\n                            'email' => $email,\n                            'login' => $login,\n                            'url' => $url,\n                            'id_tree' => (!isset($dataReceived['categorie']) || $dataReceived['categorie'] === \"undefined\") ? $dataItem['id_tree'] : $dataReceived['categorie'],\n                            'restricted_to' => isset($dataReceived['restricted_to']) ? $dataReceived['restricted_to'] : '0',\n                            'anyone_can_modify' => (isset($dataReceived['anyone_can_modify']) && $dataReceived['anyone_can_modify'] === \"on\") ? '1' : '0',\n                            'complexity_level' => $dataReceived['complexity_level']\n                            ),\n                        \"id=%i\",\n                        $dataReceived['id']\n                    );\n                    // update fields\n                    if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                        foreach (explode(\"_|_\", $dataReceived['fields']) as $field) {\n                            $field_data = explode(\"~~\", $field);\n                            if (count($field_data) > 1 && !empty($field_data[1])) {\n                                $dataTmpCat = DB::queryFirstRow(\n                                    \"SELECT c.title AS title, i.data AS data, i.data_iv AS data_iv, i.encryption_type AS encryption_type, c.encrypted_data AS encrypted_data\n                                    FROM \".prefix_table(\"categories_items\").\" AS i\n                                    INNER JOIN \".prefix_table(\"categories\").\" AS c ON (i.field_id=c.id)\n                                    WHERE i.field_id = %i AND i.item_id = %i\",\n                                    $field_data[0],\n                                    $dataReceived['id']\n                                );\n                                // store Field text in DB\n                                if (count($dataTmpCat['title']) === 0) {\n                                    // get info about this custom field\n                                    $dataTmpCat = DB::queryFirstRow(\n                                        \"SELECT title, encrypted_data\n                                        FROM \".prefix_table(\"categories\").\"\n                                        WHERE id = %i\",\n                                        $field_data[0]\n                                    );\n\n                                    // should we encrypt the data\n                                    if ($dataTmpCat['encrypted_data'] === '1') {\n                                        $encrypt = cryption(\n                                            $field_data[1],\n                                            \"\",\n                                            \"encrypt\"\n                                        );\n                                        $enc_type = \"defuse\";\n                                    } else {\n                                        $encrypt['string'] = $field_data[1];\n                                        $enc_type = \"not_set\";\n                                    }\n\n                                    // store field text\n                                    DB::insert(\n                                        prefix_table('categories_items'),\n                                        array(\n                                            'item_id' => $dataReceived['id'],\n                                            'field_id' => $field_data[0],\n                                            'data' => $encrypt['string'],\n                                            'data_iv' => \"\",\n                                            'encryption_type' => $enc_type\n                                        )\n                                    );\n\n                                    // update LOG\n                                    logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_field : '.$dataTmpCat['title'].' : '.$field_data[1]);\n                                } else {\n                                    // compare the old and new value\n                                    if ($dataTmpCat['encryption_type'] === \"defuse\") {\n                                        $oldVal = cryption(\n                                            $dataTmpCat['data'],\n                                            \"\",\n                                            \"decrypt\"\n                                        );\n                                    } else {\n                                        $oldVal['string'] = $dataTmpCat['data'];\n                                    }\n\n                                    if ($field_data[1] !== $oldVal['string']) {\n                                        // should we encrypt the data\n                                        if ($dataTmpCat['encrypted_data'] === '1') {\n                                            $encrypt = cryption(\n                                                $field_data[1],\n                                                \"\",\n                                                \"encrypt\"\n                                            );\n                                            $enc_type = \"defuse\";\n                                        } else {\n                                            $encrypt['string'] = $field_data[1];\n                                            $enc_type = \"not_set\";\n                                        }\n\n                                        // update value\n                                        DB::update(\n                                            prefix_table('categories_items'),\n                                            array(\n                                                'data' => $encrypt['string'],\n                                                'data_iv' => \"\",\n                                                'encryption_type' => $enc_type\n                                            ),\n                                            \"item_id = %i AND field_id = %i\",\n                                            $dataReceived['id'],\n                                            $field_data[0]\n                                        );\n\n                                        // update LOG\n                                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_field : '.$dataTmpCat['title'].' => '.$oldVal['string']);\n                                    }\n                                }\n                            } else {\n                                if (empty($field_data[1])) {\n                                    DB::delete(\n                                        $pre.\"categories_items\",\n                                        \"item_id = %i AND field_id = %s\",\n                                        $dataReceived['id'],\n                                        $field_data[0]\n                                    );\n                                }\n                            }\n                        }\n                    }\n\n                    // Update automatic deletion - Only by the creator of the Item\n                    if (isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] === '1') {\n                        // check if elem exists in Table. If not add it or update it.\n                        DB::query(\"SELECT * FROM \".prefix_table(\"automatic_del\").\" WHERE item_id = %i\", $dataReceived['id']);\n                        if (DB::count() === 0) {\n                            // No automatic deletion for this item\n                            if (!empty($dataReceived['to_be_deleted']) || ($dataReceived['to_be_deleted'] > 0 && is_numeric($dataReceived['to_be_deleted']))) {\n                                // Automatic deletion to be added\n                                DB::insert(\n                                    prefix_table('automatic_del'),\n                                    array(\n                                        'item_id' => $dataReceived['id'],\n                                        'del_enabled' => 1,\n                                        'del_type' => is_numeric($dataReceived['to_be_deleted']) ? 1 : 2,\n                                        'del_value' => is_numeric($dataReceived['to_be_deleted']) ? $dataReceived['to_be_deleted'] : dateToStamp($dataReceived['to_be_deleted'])\n                                        )\n                                );\n                                // update LOG\n                                logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_automatic_del : '.$dataReceived['to_be_deleted']);\n                            }\n                        } else {\n                            // Automatic deletion exists for this item\n                            if (!empty($dataReceived['to_be_deleted']) || ($dataReceived['to_be_deleted'] > 0 && is_numeric($dataReceived['to_be_deleted']))) {\n                                // Update automatic deletion\n                                DB::update(\n                                    $pre.\"automatic_del\",\n                                    array(\n                                        'del_type' => is_numeric($dataReceived['to_be_deleted']) ? 1 : 2,\n                                        'del_value' => is_numeric($dataReceived['to_be_deleted']) ? $dataReceived['to_be_deleted'] : dateToStamp($dataReceived['to_be_deleted'])\n                                        ),\n                                    \"item_id = %i\",\n                                    $dataReceived['id']\n                                );\n                            } else {\n                                // delete automatic deleteion for this item\n                                DB::delete($pre.\"automatic_del\", \"item_id = %i\", $dataReceived['id']);\n                            }\n                            // update LOG\n                            logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_automatic_del : '.$dataReceived['to_be_deleted']);\n                        }\n                    }\n\n                    // get readable list of restriction\n                    $listOfRestricted = $oldRestrictionList = \"\";\n                    if (!empty($dataReceived['restricted_to']) && $SETTINGS['restricted_to'] === '1') {\n                        foreach (explode(';', $dataReceived['restricted_to']) as $userRest) {\n                            if (!empty($userRest)) {\n                                $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= %i\", $userRest);\n                                if (empty($listOfRestricted)) {\n                                    $listOfRestricted = $dataTmp['login'];\n                                } else {\n                                    $listOfRestricted .= \";\".$dataTmp['login'];\n                                }\n                            }\n                        }\n                    }\n                    if ($data['restricted_to'] != $dataReceived['restricted_to'] && $SETTINGS['restricted_to'] === '1') {\n                        if (!empty($data['restricted_to'])) {\n                            foreach (explode(';', $data['restricted_to']) as $userRest) {\n                                if (!empty($userRest)) {\n                                    $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= \".$userRest);\n                                    if (empty($oldRestrictionList)) {\n                                        $oldRestrictionList = $dataTmp['login'];\n                                    } else {\n                                        $oldRestrictionList .= \";\".$dataTmp['login'];\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // Manage retriction_to_roles\n                    if (isset($dataReceived['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1') {\n                        // get values before deleting them\n                        $rows = DB::query(\n                            \"SELECT t.title\n                            FROM \".prefix_table(\"roles_title\").\" as t\n                            INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (t.id=r.role_id)\n                            WHERE r.item_id = %i\n                            ORDER BY t.title ASC\",\n                            $dataReceived['id']\n                        );\n                        foreach ($rows as $record) {\n                            if (empty($oldRestrictionList)) {\n                                $oldRestrictionList = $record['title'];\n                            } else {\n                                $oldRestrictionList .= \";\".$record['title'];\n                            }\n                        }\n                        // delete previous values\n                        DB::delete(prefix_table(\"restriction_to_roles\"), \"item_id = %i\", $dataReceived['id']);\n                        // add roles for item\n                        foreach (array_filter(explode(';', $dataReceived['restricted_to_roles'])) as $role) {\n                            $role = explode(\"role_\", $role);\n                            if (count($role) > 1) {\n                                $role = $role[1];\n                            } else {\n                                $role = $role[0];\n                            }\n                            DB::insert(\n                                prefix_table('restriction_to_roles'),\n                                array(\n                                    'role_id' => $role,\n                                    'item_id' => $dataReceived['id']\n                                    )\n                            );\n                            $dataTmp = DB::queryfirstrow(\"SELECT title FROM \".prefix_table(\"roles_title\").\" WHERE id= \".$role);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['title'];\n                            } else {\n                                $listOfRestricted .= \";\".$dataTmp['title'];\n                            }\n                        }\n                    }\n                    // Update CACHE table\n                    updateCacheTable(\"update_value\", $dataReceived['id']);\n                    // Log all modifications done\n                    /*LABEL */\n                    if ($data['label'] != $label) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_label : '.$data['label'].' => '.$label);\n                    }\n                    /*LOGIN */\n                    if ($data['login'] != $login) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_login : '.$data['login'].' => '.$login);\n                    }\n                    /*EMAIL */\n                    if ($data['email'] != $dataReceived['email']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_email : '.$data['email'].' => '.$dataReceived['email']);\n                    }\n                    /*URL */\n                    if ($data['url'] != $url && $url != \"http://\") {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_url : '.$data['url'].' => '.$url);\n                    }\n                    /*DESCRIPTION */\n                    if ($data['description'] != $dataReceived['description']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_description');\n                    }\n                    /*FOLDER */\n                    if ($data['id_tree'] != $dataReceived['categorie']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_category : '.$data['id_tree'].' => '.$dataReceived['categorie']);\n                        // ask for page reloading\n                        $reloadPage = true;\n                    }\n                    /*PASSWORD */\n                    if ($dataReceived['salt_key_set'] === '1' && isset($dataReceived['salt_key_set']) && $dataReceived['is_pf'] === '1' && isset($dataReceived['is_pf'])) {\n                        $oldPw = $data['pw'];\n                        $oldPwClear = cryption(\n                            $oldPw,\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    } else {\n                        $oldPw = $data['pw'];\n                        $oldPwClear = cryption(\n                            $oldPw,\n                            \"\",\n                            \"decrypt\"\n                        );\n                    }\n                    if ($sentPw != $oldPwClear['string']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_pw :'.$oldPw, \"\", \"defuse\");\n                    }\n                    /*RESTRICTIONS */\n                    if ($data['restricted_to'] != $dataReceived['restricted_to']) {\n                        logItems($dataReceived['id'], $label, $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_restriction : '.$oldRestrictionList.' => '.$listOfRestricted);\n                    }\n                    // Reload new values\n                    $dataItem = DB::queryfirstrow(\n                        \"SELECT *\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                        WHERE i.id = %i AND l.action = %s\",\n                        $dataReceived['id'],\n                        \"at_creation\"\n                    );\n                    // Reload History\n                    $history = \"\";\n                    $rows = DB::query(\n                        \"SELECT l.date as date, l.action as action, l.raison as raison, u.login as login\n                        FROM \".prefix_table(\"log_items\").\" as l\n                        LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                        WHERE l.action <> %s AND id_item=%s\",\n                        \"at_shown\",\n                        $dataReceived['id']\n                    );\n                    foreach ($rows as $record) {\n                        $reason = explode(':', $record['raison']);\n                        if (empty($history)) {\n                            $history = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).\" - \".$record['login'].\" - \".$LANG[$record['action']].\n                            \" - \".(!empty($record['raison']) ? (count($reason) > 1 ? $LANG[trim($reason[0])].' : '.$reason[1] : $LANG[trim($reason[0])]) : '');\n                        } else {\n                            $history .= \"<br />\".date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $record['date']).\" - \".\n                            $record['login'].\" - \".$LANG[$record['action']].\" - \".\n                            (!empty($record['raison']) ? (count($reason) > 1 ? $LANG[trim($reason[0])].' => '.$reason[1] : ($record['action'] != \"at_manual\" ? $LANG[trim($reason[0])] : trim($reason[0]))) : '');\n                        }\n                    }\n                    // decrypt PW\n                    if (empty($dataReceived['salt_key'])) {\n                        $encrypt = cryption(\n                            $dataItem['pw'],\n                            \"\",\n                            \"encrypt\"\n                        );\n                    } else {\n                        $encrypt = cryption(\n                            $dataItem['pw'],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"encrypt\"\n                        );\n                    }\n\n                    $pw = cleanString($encrypt['string']);\n                    // generate 2d key\n                    $_SESSION['key_tmp'] = bin2hex(PHP_Crypt::createKey(PHP_Crypt::RAND, 16));\n\n                    // Prepare files listing\n                    $files = $filesEdit = \"\";\n                    // launch query\n                    $rows = DB::query(\"SELECT id, name, file, extension FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $dataReceived['id']);\n                    foreach ($rows as $record) {\n                        // get icon image depending on file format\n                        $iconImage = fileFormatImage($record['extension']);\n\n                        // If file is an image, then prepare lightbox. If not image, then prepare donwload\n                        if (in_array($record['extension'], $SETTINGS_EXT['image_file_ext'])) {\n                            $files .= '<i class=\\'fa fa-file-image-o\\' /></i>&nbsp;<a class=\"image_dialog\" href=\"#'.$record['id'].'\" title=\"'.$record['name'].'\">'.$record['name'].'</a><br />';\n                        } else {\n                            $files .= '<i class=\\'fa fa-file-text-o\\' /></i>&nbsp;<a href=\\'sources/downloadFile.php?name='.urlencode($record['name']).'&type=sub&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&fileid='.$record['id'].'\\' target=\\'_blank\\'>'.$record['name'].'</a><br />';\n                        }\n                        // Prepare list of files for edit dialogbox\n                        $filesEdit .= '<span id=\"span_edit_file_'.$record['id'].'\"><span class=\"fa fa-'.$iconImage.'\"></span>&nbsp;<span class=\"fa fa-eraser tip\" style=\"cursor:pointer;\"  onclick=\"delete_attached_file(\\\"'.$record['id'].'\\\")\" title=\"'.$LANG['at_delete'].'\"></span>&nbsp;'.$record['name'].\"</span><br />\";\n                    }\n                    // Send email\n                    if (!empty($dataReceived['diffusion'])) {\n                        foreach (explode(';', $dataReceived['diffusion']) as $emailAddress) {\n                            if (!empty($emailAddress)) {\n                                sendEmail(\n                                    $LANG['email_subject_item_updated'],\n                                    str_replace(\n                                        array(\"#item_label#\", \"#item_category#\", \"#item_id#\", \"#url#\"),\n                                        array($label, $dataReceived['categorie'], $dataReceived['id'], $SETTINGS['cpassman_url']),\n                                        $LANG['email_body_item_updated']\n                                    ),\n                                    $emailAddress,\n                                    str_replace(\"#item_label#\", $label, $LANG['email_bodyalt_item_updated'])\n                                );\n                            }\n                        }\n                    }\n\n                    // send email to user that whant to be notified\n                    if ($dataItem['notification'] !== null && !empty($dataItem['notification'])) {\n                        $users_to_be_notified = array_filter(explode(\";\", $dataItem['notification']));\n\n                        // perform query to get emails\n                        $users_email = DB::QUERY(\n                            \"SELECT id, email\n                            FROM \".prefix_table(\"users\").\"\n                            WHERE id IN %li\",\n                            $users_to_be_notified\n                        );\n\n                        // build emails list\n                        $mailing = \"\";\n                        foreach ($users_email as $record) {\n                            if (empty($mailing)) {\n                                $mailing = $record['email'];\n                            } else {\n                                $mailing = \",\".$record['email'];\n                            }\n                        }\n\n                        // send email\n                        DB::insert(\n                            prefix_table('emails'),\n                            array(\n                                'timestamp' => time(),\n                                'subject' => $LANG['email_subject_item_updated'],\n                                'body' =>\n                                    str_replace(\n                                        array(\"#item_label#\", \"#item_category#\", \"#item_id#\", \"#url#\"),\n                                        array($label, $dataReceived['categorie'], $dataReceived['id'], $SETTINGS['cpassman_url']),\n                                        $LANG['email_body_item_updated']\n                                    ),\n                                'receivers' => $mailing,\n                                'status' => ''\n                                )\n                        );\n                    }\n\n                    // Prepare some stuff to return\n                    $arrData = array(\n                        \"files\" => $files,\n                        \"history\" => str_replace('\"', '&quot;', $history),\n                        \"files_edit\" => $filesEdit,\n                        \"id_tree\" => $dataItem['id_tree'],\n                        \"id\" => $dataItem['id'],\n                        \"reload_page\" => $reloadPage,\n                        \"restriction_to\" => $dataReceived['restricted_to'].$dataReceived['restricted_to_roles'],\n                        \"list_of_restricted\" => $listOfRestricted,\n                        \"tags\" => $return_tags,\n                        \"error\" => \"\"\n                        );\n                } else {\n                    echo prepareExchangedData(array(\"error\" => \"ERR_NOT_ALLOWED_TO_EDIT\"), \"encode\");\n                    break;\n                }\n            } else {\n                // an error appears on JSON format\n                $arrData = array(\"error\" => \"ERR_JSON_FORMAT\");\n            }\n            // return data\n            echo prepareExchangedData($arrData, \"encode\");\n            break;\n\n        /*\"..\"\n          * CASE\n          * Copy an Item\n        */\n        case \"copy_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"1'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // Prepare POST variables\n            $post_source_id = filter_input(INPUT_POST, 'source_id', FILTER_SANITIZE_NUMBER_INT);\n            $post_dest_id = filter_input(INPUT_POST, 'dest_id', FILTER_SANITIZE_NUMBER_INT);\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === '1'\n                && (!in_array($post_source_id, $_SESSION['personal_folders'])\n                    || !in_array($post_dest_id, $_SESSION['personal_folders']))\n            ) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            $returnValues = $pw = \"\";\n            $is_perso = 0;\n\n            if (empty($post_item_id) === false\n                && empty($post_dest_id) === false\n            ) {\n                // load the original record into an array\n                $originalRecord = DB::queryfirstrow(\n                    \"SELECT * FROM \".prefix_table(\"items\").\"\n                    WHERE id=%i\",\n                    $post_item_id\n                );\n\n                // Check if the folder where this item is, is accessible to the user\n                if (in_array($originalRecord['id_tree'], $_SESSION['groupes_visibles'])) {\n                    $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                    echo $returnValues;\n                    break;\n                }\n\n                // Load the destination folder record into an array\n                $dataDestination = DB::queryfirstrow(\n                    \"SELECT personal_folder FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE id=%i\",\n                    $post_dest_id\n                );\n\n                // previous is personal folder and public one\n                if ($originalRecord['perso'] === '1' && $dataDestination['personal_folder'] === '0') {\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        \"\",\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now public\n                    $is_perso = 0;\n                // previous is public folder and personal one\n                } elseif ($originalRecord['perso'] === '0' && $dataDestination['personal_folder'] === '1') {\n                    // check if PSK is set\n                    if (!isset($_SESSION['user_settings']['session_psk']) || empty($_SESSION['user_settings']['session_psk'])) {\n                        $returnValues = '[{\"error\" : \"no_psk\"}, {\"error_text\" : \"'.addslashes($LANG['alert_message_personal_sk_missing']).'\"}]';\n                        echo $returnValues;\n                        break;\n                    }\n\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now private\n                    $is_perso = 1;\n                } elseif ($originalRecord['perso'] === '1' && $dataDestination['personal_folder'] === '1') {\n                // previous is public folder and personal one\n                    // check if PSK is set\n                    if (!isset($_SESSION['user_settings']['session_psk']) || empty($_SESSION['user_settings']['session_psk'])) {\n                        $returnValues = '[{\"error\" : \"no_psk\"}, {\"error_text\" : \"'.addslashes($LANG['alert_message_personal_sk_missing']).'\"}]';\n                        echo $returnValues;\n                        break;\n                    }\n\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // this item is now private\n                    $is_perso = 1;\n                } elseif ($originalRecord['perso'] === '0' && $dataDestination['personal_folder'] === '0') {\n                    // decrypt and re-encrypt password\n                    $decrypt = cryption(\n                        $originalRecord['pw'],\n                        \"\",\n                        \"decrypt\"\n                    );\n                    $encrypt = cryption(\n                        $decrypt['string'],\n                        \"\",\n                        \"encrypt\"\n                    );\n\n                    // reaffect pw\n                    $originalRecord['pw'] = $encrypt['string'];\n\n                    // is public item\n                    $is_perso = 0;\n                } else {\n                    $returnValues = '[{\"error\" : \"case_not_managed\"}, {\"error_text\" : \"ERROR - case is not managed\"}]';\n                        echo $returnValues;\n                        break;\n                }\n\n                // insert the new record and get the new auto_increment id\n                DB::insert(\n                    prefix_table(\"items\"),\n                    array(\n                        'label' => \"duplicate\"\n                    )\n                );\n                $newID = DB::insertId();\n                // generate the query to update the new record with the previous values\n                $aSet = array();\n                foreach ($originalRecord as $key => $value) {\n                    if ($key === \"id_tree\") {\n                        array_push($aSet, array(\"id_tree\" => $post_dest_id));\n                    } elseif ($key === \"viewed_no\") {\n                        array_push($aSet, array(\"viewed_no\" => \"0\"));\n                    } elseif ($key === \"pw\" && !empty($pw)) {\n                        array_push($aSet, array(\"pw\" => $originalRecord['pw']));\n                        array_push($aSet, array(\"pw_iv\" => \"\"));\n                    } elseif ($key === \"perso\") {\n                        array_push($aSet, array(\"perso\" => $is_perso));\n                    } elseif ($key != \"id\" && $key != \"key\") {\n                        array_push($aSet, array($key => $value));\n                    }\n                }\n\n                DB::update(\n                    prefix_table(\"items\"),\n                    $aSet,\n                    \"id = %i\",\n                    $newID\n                );\n                // Add attached itms\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $post_item_id);\n                foreach ($rows as $record) {\n                    // duplicate file\n                    $fileRandomId = md5($record['name'].time());\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].DIRECTORY_SEPARATOR.$record['file'],\n                        $SETTINGS['path_to_upload_folder'].DIRECTORY_SEPARATOR.$fileRandomId\n                    );\n\n                    // store in DB\n                    DB::insert(\n                        prefix_table('files'),\n                        array(\n                            'id_item' => $newID,\n                            'name' => $record['name'],\n                            'size' => $record['size'],\n                            'extension' => $record['extension'],\n                            'type' => $record['type'],\n                            'file' => $fileRandomId,\n                            'status' => $record['status']\n                        )\n                    );\n                }\n\n                // Add specific restrictions\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id = %i\", $post_item_id);\n                foreach ($rows as $record) {\n                    DB::insert(\n                        prefix_table('restriction_to_roles'),\n                        array(\n                            'item_id' => $newID,\n                            'role_id' => $record['role_id']\n                            )\n                    );\n                }\n\n                // Add Tags\n                $rows = DB::query(\"SELECT * FROM \".prefix_table(\"tags\").\" WHERE item_id = %i\", $post_item_id);\n                foreach ($rows as $record) {\n                    DB::insert(\n                        prefix_table('tags'),\n                        array(\n                            'item_id' => $newID,\n                            'tag' => $record['tag']\n                            )\n                    );\n                }\n\n                // Add custom fields\n\n\n                // Add this duplicate in logs\n                logItems($newID, $originalRecord['label'], $_SESSION['user_id'], 'at_creation', $_SESSION['login']);\n                // Add the fact that item has been copied in logs\n                logItems($newID, $originalRecord['label'], $_SESSION['user_id'], 'at_copy', $_SESSION['login']);\n                // reload cache table\n                require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n                updateCacheTable(\"reload\", \"\");\n\n                $returnValues = '[{\"status\" : \"ok\"}, {\"new_id\" : \"'.$newID.'\"}]';\n            } else {\n                // no item\n                $returnValues = '[{\"error\" : \"no_item\"}, {\"error_text\" : \"No item ID\"}]';\n            }\n            // return data\n            echo $returnValues;\n            break;\n\n        /*\n          * CASE\n          * Display informations of selected item\n        */\n        case \"show_details_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            // Init post variables\n            $post_id = filter_var(htmlspecialchars_decode($dataReceived['id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_folder_id = filter_var(htmlspecialchars_decode($dataReceived['folder_id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_salt_key_required = filter_var(htmlspecialchars_decode($dataReceived['salt_key_required']), FILTER_SANITIZE_STRING);\n            $post_salt_key_set = filter_var(htmlspecialchars_decode($dataReceived['salt_key_set']), FILTER_SANITIZE_STRING);\n            $post_expired_item = filter_var(htmlspecialchars_decode($dataReceived['expired_item']), FILTER_SANITIZE_STRING);\n            $post_restricted = filter_var(htmlspecialchars_decode($dataReceived['restricted']), FILTER_SANITIZE_STRING);\n            $post_page = filter_var(htmlspecialchars_decode($dataReceived['page']), FILTER_SANITIZE_STRING);\n\n            $arrData = array();\n            // return ID\n            $arrData['id'] = $post_id;\n            $arrData['id_user'] = API_USER_ID;\n            $arrData['author'] = \"API\";\n\n            // Check if item is deleted\n            // taking into account that item can be restored.\n            // so if restoration timestamp is higher than the deletion one\n            // then we can show it\n            $item_deleted = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"log_items\").\"\n                WHERE id_item = %i AND action = %s\n                ORDER BY date DESC\n                LIMIT 0, 1\",\n                $post_id,\n                \"at_delete\"\n            );\n            $dataDeleted = DB::count();\n\n            $item_restored = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"log_items\").\"\n                WHERE id_item = %i AND action = %s\n                ORDER BY date DESC\n                LIMIT 0, 1\",\n                $post_id,\n                \"at_restored\"\n            );\n\n            if ($dataDeleted != 0 && intval($item_deleted['date']) > intval($item_restored['date'])) {\n                // This item is deleted => exit\n                echo prepareExchangedData(array('show_detail_option' => 2), \"encode\");\n                break;\n            }\n\n            // Get all informations for this item\n            $dataItem = DB::queryfirstrow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\" as i\n                INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                WHERE i.id = %i AND l.action = %s\",\n                $post_id,\n                \"at_creation\"\n            );\n            // LEFT JOIN \".$pre.\"categories_items as c ON (c.id_item = i.id)\n            // INNER JOIN \".$pre.\"automatic_del as d ON (d.item_id = i.id)\n            // Get all USERS infos\n            $listNotif = array_filter(explode(\";\", $dataItem['notification']));\n            $listRest = array_filter(explode(\";\", $dataItem['restricted_to']));\n            $listeRestriction = $listNotification = $listNotificationEmails = \"\";\n            $user_in_restricted_list_of_item = false;\n            $rows = DB::query(\"SELECT id, login, email FROM \".prefix_table(\"users\"));\n            foreach ($rows as $record) {\n                // Get auhtor\n                if ($record['id'] === $dataItem['id_user']) {\n                    $arrData['author'] = $record['login'];\n                    $arrData['author_email'] = $record['email'];\n                    $arrData['id_user'] = $dataItem['id_user'];\n                    if (in_array($record['id'], $listNotif)) {\n                        $arrData['notification_status'] = true;\n                    } else {\n                        $arrData['notification_status'] = false;\n                    }\n                }\n\n                // Get restriction list for users\n                if (in_array($record['id'], $listRest)) {\n                    $listeRestriction .= $record['login'].\";\";\n                    if ($_SESSION['user_id'] === $record['id']) {\n                        $user_in_restricted_list_of_item = true;\n                    }\n                }\n                // Get notification list for users\n                if (in_array($record['id'], $listNotif)) {\n                    $listNotification .= $record['login'].\";\";\n                    $listNotificationEmails .= $record['email'].\",\";\n                }\n            }\n            // manage case of API user\n            if ($dataItem['id_user'] === API_USER_ID) {\n                $arrData['author'] = \"API [\".$dataItem['description'].\"]\";\n                $arrData['id_user'] = API_USER_ID;\n                $arrData['author_email'] = \"\";\n                $arrData['notification_status'] = false;\n            }\n\n            // Get all tags for this item\n            $tags = \"\";\n            $rows = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE item_id=%i\", $post_id);\n            foreach ($rows as $record) {\n                if (empty($tags)) {\n                    $tags = \"<span style='' class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".$record['tag'].\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".$record['tag'].\"</span></span>\";\n                } else {\n                    $tags .= \"&nbsp;&nbsp;<span style='' class='round-grey pointer tip' title='\".addslashes($LANG['list_items_with_tag']).\"' onclick='searchItemsWithTags(\\\"\".$record['tag'].\"\\\")'><i class='fa fa-tag fa-sm'></i>&nbsp;<span class=\\\"item_tag\\\">\".$record['tag'].\"</span></span>\";\n                }\n            }\n\n            // TODO -> improve this check\n            // check that actual user can access this item\n            $restrictionActive = true;\n            $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n            if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                $restrictionActive = false;\n            }\n            if (empty($dataItem['restricted_to'])) {\n                $restrictionActive = false;\n            }\n\n\n            // Check if user has a role that is accepted\n            $rows_tmp = DB::query(\n                \"SELECT role_id\n                FROM \".prefix_table(\"restriction_to_roles\").\"\n                WHERE item_id=%i\",\n                $post_id\n            );\n            foreach ($rows_tmp as $rec_tmp) {\n                if (in_array($rec_tmp['role_id'], explode(';', $_SESSION['fonction_id']))) {\n                    $restrictionActive = false;\n                }\n            }\n\n            // Uncrypt PW\n            if (null !== $post_salt_key_required\n                && $post_salt_key_required === '1'\n                && null !== $post_salt_key_set\n                && $post_salt_key_set === '1'\n            ) {\n                $pw = cryption(\n                    $dataItem['pw'],\n                    $_SESSION['user_settings']['session_psk'],\n                    \"decrypt\"\n                );\n                $arrData['edit_item_salt_key'] = 1;\n            } else {\n                $pw = cryption(\n                    $dataItem['pw'],\n                    \"\",\n                    \"decrypt\"\n                );\n                $arrData['edit_item_salt_key'] = 0;\n            }\n\n            $pw = @$pw['string'];\n            if (!isUTF8($pw)) {\n                $pw = '';\n            }\n\n            // check if item is expired\n            if (null !== $post_expired_item\n                && $post_expired_item === '1'\n            ) {\n                $item_is_expired = true;\n            } else {\n                $item_is_expired = false;\n            }\n\n\n            // check user is admin\n            if ($_SESSION['user_admin'] === '1' && $dataItem['perso'] != 1 && (isset($SETTINGS_EXT['admin_full_right']) && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $arrData['show_details'] = 0;\n            // Check if actual USER can see this ITEM\n            } elseif ((\n                (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false)\n                ||\n                (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false)\n                ||\n                (null !== $post_folder_id\n                    && isset($_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && in_array($post_id, $_SESSION['list_restricted_folders_for_items'][$post_folder_id])\n                    && $post_restricted === '1'\n                    && $user_in_restricted_list_of_item === true)\n                ||\n                (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1'\n                    && $restrictionActive === false\n                )\n            ) {\n                // Allow show details\n                $arrData['show_details'] = 1;\n                // Display menu icon for deleting if user is allowed\n                if ($dataItem['id_user'] == $_SESSION['user_id']\n                    || $_SESSION['is_admin'] === '1'\n                    || ($_SESSION['user_manager'] === '1' && $SETTINGS['manager_edit'] === '1')\n                    || $dataItem['anyone_can_modify'] === '1'\n                    || in_array($dataItem['id_tree'], $_SESSION['list_folders_editable_by_role'])\n                    || in_array($_SESSION['user_id'], $restrictedTo)\n                ) {\n                    $arrData['user_can_modify'] = 1;\n                    $user_is_allowed_to_modify = true;\n                } else {\n                    $arrData['user_can_modify'] = 0;\n                    $user_is_allowed_to_modify = false;\n                }\n\n                // Get restriction list for roles\n                $listRestrictionRoles = array();\n                if (isset($SETTINGS['restricted_to_roles']) && $SETTINGS['restricted_to_roles'] === '1') {\n                    // Add restriction if item is restricted to roles\n                    $rows = DB::query(\n                        \"SELECT t.title\n                        FROM \".prefix_table(\"roles\").\"_title as t\n                        INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (t.id=r.role_id)\n                        WHERE r.item_id = %i\n                        ORDER BY t.title ASC\",\n                        $post_id\n                    );\n                    foreach ($rows as $record) {\n                        if (!in_array($record['title'], $listRestrictionRoles)) {\n                            array_push($listRestrictionRoles, $record['title']);\n                        }\n                    }\n                }\n                // Check if any KB is linked to this item\n                if (isset($SETTINGS['enable_kb']) && $SETTINGS['enable_kb'] === '1') {\n                    $tmp = \"\";\n                    $rows = DB::query(\n                        \"SELECT k.label, k.id\n                        FROM \".prefix_table(\"kb_items\").\" as i\n                        INNER JOIN \".prefix_table(\"kb\").\" as k ON (i.kb_id=k.id)\n                        WHERE i.item_id = %i\n                        ORDER BY k.label ASC\",\n                        $post_id\n                    );\n                    foreach ($rows as $record) {\n                        if (empty($tmp)) {\n                            $tmp = \"<a class='round-grey' href='\".$SETTINGS['cpassman_url'].\"/index.php?page=kb&id=\".$record['id'].\"'><i class='fa fa-map-pin fa-sm'></i>&nbsp;\".$record['label'].\"</a>\";\n                        } else {\n                            $tmp .= \"&nbsp;<a class='round-grey' href='\".$SETTINGS['cpassman_url'].\"/index.php?page=kb&id=\".$record['id'].\"'><i class='fa fa-map-pin fa-sm'></i>&nbsp;\".$record['label'].\"</a>\";\n                        }\n                    }\n                    $arrData['links_to_kbs'] = $tmp;\n                }\n                // Prepare DIalogBox data\n                if ($item_is_expired === false) {\n                    $arrData['show_detail_option'] = 0;\n                } elseif ($user_is_allowed_to_modify === true && $item_is_expired === true) {\n                    $arrData['show_detail_option'] = 1;\n                } else {\n                    $arrData['show_detail_option'] = 2;\n                }\n\n                $arrData['label'] = htmlspecialchars_decode($dataItem['label']);\n                $arrData['pw'] = $pw;\n                $arrData['email'] = $dataItem['email'];\n                $arrData['url'] = htmlspecialchars_decode($dataItem['url']);\n                $arrData['folder'] = $dataItem['id_tree'];\n                if (!empty($dataItem['url'])) {\n                    $arrData['link'] = \"&nbsp;<a href='\".$dataItem['url'].\"' target='_blank'>&nbsp;<i class='fa fa-link tip' title='\".$LANG['open_url_link'].\"'></i></a>\";\n                }\n\n                $arrData['description'] = preg_replace('/(?<!\\\\r)\\\\n+(?!\\\\r)/', '', strip_tags($dataItem['description'], $SETTINGS_EXT['allowedTags']));\n                $arrData['login'] = htmlspecialchars_decode(str_replace(array('\"'), array('&quot;'), $dataItem['login']));\n                $arrData['id_restricted_to'] = $listeRestriction;\n                $arrData['id_restricted_to_roles'] = count($listRestrictionRoles) > 0 ? implode(\";\", $listRestrictionRoles).\";\" : \"\";\n                $arrData['tags'] = $tags;\n                $arrData['folder'] = $dataItem['id_tree'];\n\n                if (isset($SETTINGS['enable_server_password_change'])\n                    && $SETTINGS['enable_server_password_change'] === '1') {\n                    $arrData['auto_update_pwd_frequency'] = $dataItem['auto_update_pwd_frequency'];\n                } else {\n                    $arrData['auto_update_pwd_frequency'] = \"0\";\n                }\n\n                if (isset($SETTINGS['anyone_can_modify_bydefault'])\n                    && $SETTINGS['anyone_can_modify_bydefault'] === '1') {\n                    $arrData['anyone_can_modify'] = 1;\n                } else {\n                    $arrData['anyone_can_modify'] = $dataItem['anyone_can_modify'];\n                }\n\n                // statistics\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'viewed_no' => $dataItem['viewed_no'] + 1,\n                    ),\n                    \"id = %i\",\n                    $post_id\n                );\n                $arrData['viewed_no'] = $dataItem['viewed_no'] + 1;\n\n                // get fields\n                $fieldsTmp = $arrCatList = \"\";\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1'\n                    && null !== $post_page && $post_page === \"items\"\n                ) {\n                    // get list of associated Categories\n                    $arrCatList = array();\n                    $rows_tmp = DB::query(\n                        \"SELECT id_category\n                        FROM \".prefix_table(\"categories_folders\").\"\n                        WHERE id_folder=%i\",\n                        $post_folder_id\n                    );\n                    if (DB::count() > 0) {\n                        foreach ($rows_tmp as $row) {\n                            array_push($arrCatList, $row['id_category']);\n                        }\n\n                        // get fields for this Item\n                        $rows_tmp = DB::query(\n                            \"SELECT i.field_id AS field_id, i.data AS data, i.data_iv AS data_iv,\n                            i.encryption_type AS encryption_type, c.encrypted_data, c.parent_id AS parent_id,\n                            c.type as field_type\n                            FROM \".prefix_table(\"categories_items\").\" AS i\n                            INNER JOIN \".prefix_table(\"categories\").\" AS c ON (i.field_id=c.id)\n                            WHERE i.item_id=%i AND c.parent_id IN %ls\",\n                            $post_id,\n                            $arrCatList\n                        );\n                        foreach ($rows_tmp as $row) {\n                            // Uncrypt data\n                            if ($row['encryption_type'] === \"defuse\") {\n                                $fieldText = cryption(\n                                    $row['data'],\n                                    \"\",\n                                    \"decrypt\"\n                                );\n                                $fieldText = $fieldText['string'];\n                            } else {\n                                $fieldText = $row['data'];\n                            }\n\n                            // build returned list of Fields text\n                            if (empty($fieldsTmp)) {\n                                $fieldsTmp = $row['field_id'].\n                                    \"~~\".str_replace('\"', '&quot;', $fieldText).\"~~\".$row['parent_id'].\n                                    \"~~\".$row['field_type'];\n                            } else {\n                                $fieldsTmp .= \"_|_\".$row['field_id'].\n                                \"~~\".str_replace('\"', '&quot;', $fieldText).\"~~\".$row['parent_id'].\n                                \"~~\".$row['field_type'];\n                            }\n                        }\n                    }\n                }\n                $arrData['fields'] = $fieldsTmp;\n                $arrData['categories'] = $arrCatList;\n\n                // Manage user restriction\n                if (null !== $post_restricted) {\n                    $arrData['restricted'] = $post_restricted;\n                } else {\n                    $arrData['restricted'] = \"\";\n                }\n                // Decrement the number before being deleted\n                $dataDelete = DB::queryfirstrow(\"SELECT * FROM \".prefix_table(\"automatic_del\").\" WHERE item_id=%i\", $post_id);\n                $arrData['to_be_deleted'] = $dataDelete['del_value'];\n                $arrData['to_be_deleted_type'] = $dataDelete['del_type'];\n                if (isset($SETTINGS['enable_delete_after_consultation']) && $SETTINGS['enable_delete_after_consultation'] === '1') {\n                    if ($dataDelete['del_enabled'] === '1' || $arrData['id_user'] != $_SESSION['user_id']) {\n                        if ($dataDelete['del_type'] === '1' && $dataDelete['del_value'] >= 1) {\n                            // decrease counter\n                            DB::update(\n                                $pre.\"automatic_del\",\n                                array(\n                                    'del_value' => $dataDelete['del_value'] - 1\n                                    ),\n                                \"item_id = %i\",\n                                $post_id\n                            );\n                            // store value\n                            $arrData['to_be_deleted'] = $dataDelete['del_value'] - 1;\n                        } elseif ($dataDelete['del_type'] === '1' && $dataDelete['del_value'] <= 1 || $dataDelete['del_type'] === '2' && $dataDelete['del_value'] < time()\n                        ) {\n                            $arrData['show_details'] = 0;\n                            // delete item\n                            DB::delete($pre.\"automatic_del\", \"item_id = %i\", $post_id);\n                            // make inactive object\n                            DB::update(\n                                prefix_table(\"items\"),\n                                array(\n                                    'inactif' => '1',\n                                    ),\n                                \"id = %i\",\n                                $post_id\n                            );\n                            // log\n                            logItems($post_id, $dataItem['label'], $_SESSION['user_id'], 'at_delete', $_SESSION['login'], 'at_automatically_deleted');\n                            $arrData['to_be_deleted'] = 0;\n                        } elseif ($dataDelete['del_type'] === '2') {\n                            $arrData['to_be_deleted'] = date($SETTINGS['date_format'], $dataDelete['del_value']);\n                        }\n                    } else {\n                        $arrData['to_be_deleted'] = \"\";\n                    }\n                } else {\n                    $arrData['to_be_deleted'] = \"not_enabled\";\n                }\n                // send notification if enabled\n                if (isset($SETTINGS['enable_email_notification_on_item_shown']) && $SETTINGS['enable_email_notification_on_item_shown'] === '1') {\n                    // send back infos\n                    DB::insert(\n                        prefix_table('emails'),\n                        array(\n                            'timestamp' => time(),\n                            'subject' => $LANG['email_on_open_notification_subject'],\n                            'body' => str_replace(array('#tp_item_author#', '#tp_user#', '#tp_item#'), array(\" \".addslashes($arrData['author']), addslashes($_SESSION['login']), addslashes($dataItem['label'])), $LANG['email_on_open_notification_mail']),\n                            'receivers' => $listNotificationEmails,\n                            'status' => ''\n                            )\n                    );\n                } else {\n                    $arrData['notification_list'] = \"\";\n                    $arrData['notification_status'] = \"\";\n                }\n            } else {\n                $arrData['show_details'] = 0;\n                // get readable list of restriction\n                $listOfRestricted = \"\";\n                if (!empty($dataItem['restricted_to'])) {\n                    foreach (explode(';', $dataItem['restricted_to']) as $userRest) {\n                        if (!empty($userRest)) {\n                            $dataTmp = DB::queryfirstrow(\"SELECT login FROM \".prefix_table(\"users\").\" WHERE id= \".$userRest);\n                            if (empty($listOfRestricted)) {\n                                $listOfRestricted = $dataTmp['login'];\n                            } else {\n                                $listOfRestricted .= \";\".$dataTmp['login'];\n                            }\n                        }\n                    }\n                }\n                $arrData['restricted_to'] = $listOfRestricted;\n            }\n            $arrData['timestamp'] = time();\n\n            // Encrypt data to return\n            echo prepareExchangedData($arrData, \"encode\");\n            break;\n\n        /*\n           * CASE\n           * Display History of the selected Item\n        */\n        case \"showDetailsStep2\":\n            // get Item info\n            $dataItem = DB::queryfirstrow(\"SELECT * FROM \".prefix_table(\"items\").\" WHERE id=%i\", $post_id);\n\n            // Check if the folder where this item is, is accessible to the user\n            if (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // GET Audit trail\n            $history = \"\";\n            $historyOfPws = \"\";\n            $rows = DB::query(\n                \"SELECT l.date as date, l.action as action, l.raison as raison, u.login as login, l.raison_iv AS raison_iv\n                FROM \".prefix_table(\"log_items\").\" as l\n                LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                WHERE id_item=%i AND action <> %s\n                ORDER BY date ASC\",\n                $post_id,\n                \"at_shown\"\n            );\n            foreach ($rows as $record) {\n                $reason = explode(':', $record['raison']);\n                if ($record['action'] === \"at_modification\" && $reason[0] === \"at_pw \") {\n                    // check if item is PF\n                    if ($dataItem['perso'] != 1) {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            \"\",\n                            \"decrypt\"\n                        );\n                    } else {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    }\n                    $reason[1] = @$reason[1]['string'];\n                    // if not UTF8 then cleanup and inform that something is wrong with encrytion/decryption\n                    if (!isUTF8($reason[1]) || is_array($reason[1])) {\n                        $reason[1] = \"\";\n                    }\n                }\n                // imported via API\n                if (empty($record['login'])) {\n                    $record['login'] = $LANG['imported_via_api'];\n                }\n\n                if (!empty($reason[1]) || $record['action'] === \"at_copy\" || $record['action'] === \"at_creation\" || $record['action'] === \"at_manual\" || $record['action'] === \"at_modification\" || $record['action'] === \"at_delete\" || $record['action'] === \"at_restored\") {\n                    if (trim($reason[0]) === \"at_pw\" && empty($reason[1]) === false) {\n                        if (empty($historyOfPws)) {\n                            $historyOfPws = $LANG['previous_pw'].\"\\n\".$reason[1];\n                        } else {\n                            $historyOfPws .= \"\\n\".$reason[1];\n                        }\n                    }\n                }\n            }\n\n            // generate 2d key\n            $_SESSION['key_tmp'] = bin2hex(PHP_Crypt::createKey(PHP_Crypt::RAND, 16));\n\n            // Prepare files listing\n            $files = $filesEdit = \"\";\n            // launch query\n            $rows = DB::query(\"SELECT id, name, file, extension FROM \".prefix_table(\"files\").\" WHERE id_item=%i\", $post_id);\n            foreach ($rows as $record) {\n                // get icon image depending on file format\n                $iconImage = fileFormatImage($record['extension']);\n\n                // prepare text to display\n                if (strlen($record['name']) > 60 && strrpos($record['name'], \".\") >= 56) {\n                    $filename = substr($record['name'], 0, 50).\"(...)\".substr($record['name'], strrpos($record['name'], \".\"));\n                } else {\n                    $filename = $record['name'];\n                }\n\n                // If file is an image, then prepare lightbox. If not image, then prepare donwload\n                if (in_array($record['extension'], $SETTINGS_EXT['image_file_ext'])) {\n                    $files .= '<div class=\\'small_spacing\\'><i class=\\'fa fa-file-image-o\\' /></i>&nbsp;<a class=\\'image_dialog\\' href=\\'#'.$record['id'].'\\' title=\\''.$record['name'].'\\'>'.$filename.'</a></div>';\n                } else {\n                    $files .= '<div class=\\'small_spacing\\'><i class=\\'fa fa-file-text-o\\' /></i>&nbsp;<a href=\\'sources/downloadFile.php?name='.urlencode($record['name']).'&key='.$_SESSION['key'].'&key_tmp='.$_SESSION['key_tmp'].'&fileid='.$record['id'].'\\' class=\\'small_spacing\\'>'.$filename.'</a></div>';\n                }\n                // Prepare list of files for edit dialogbox\n                $filesEdit .= '<span id=\\'span_edit_file_'.$record['id'].'\\'><span class=\\'fa fa-'.$iconImage.'\\'></span>&nbsp;<span class=\\'fa fa-eraser tip\\' style=\\'cursor:pointer;\\' onclick=\\'delete_attached_file(\"'.$record['id'].'\")\\' title=\\''.$LANG['at_delete'].'\\'></span>&nbsp;'.$filename.\"</span><br />\";\n            }\n            // display lists\n            $filesEdit = str_replace('\"', '&quot;', $filesEdit);\n            $files_id = $files;\n\n            // disable add bookmark if alread bookmarked\n            if (in_array($post_id, $_SESSION['favourites'])) {\n                $favourite = 1;\n            } else {\n                $favourite = 0;\n            }\n\n            // Add the fact that item has been viewed in logs\n            if (isset($SETTINGS['log_accessed']) && $SETTINGS['log_accessed'] === '1') {\n                logItems($post_id, $dataItem['label'], $_SESSION['user_id'], 'at_shown', $_SESSION['login']);\n            }\n\n            // Add this item to the latests list\n            if (isset($_SESSION['latest_items']) && isset($SETTINGS['max_latest_items']) && !in_array($dataItem['id'], $_SESSION['latest_items'])) {\n                if (count($_SESSION['latest_items']) >= $SETTINGS['max_latest_items']) {\n                    array_pop($_SESSION['latest_items']); //delete last items\n                }\n                array_unshift($_SESSION['latest_items'], $dataItem['id']);\n                // update DB\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'latest_items' => implode(';', $_SESSION['latest_items'])\n                        ),\n                    \"id=\".$_SESSION['user_id']\n                );\n            }\n\n            // has this item a change proposal\n            DB::query(\"SELECT * FROM \".$pre.\"items_change WHERE item_id = %i\", $post_id);\n\n            echo prepareExchangedData(\n                array(\n                    \"history\" => htmlspecialchars($history, ENT_QUOTES, 'UTF-8'),\n                    \"history_of_pwds\" => htmlspecialchars($historyOfPws, ENT_QUOTES, 'UTF-8'),\n                    \"favourite\" => $favourite,\n                    \"files_edit\" => $filesEdit,\n                    \"files_id\" => $files_id,\n                    \"has_change_proposal\" => DB::count(),\n                    \"error\" => \"\"\n                ),\n                \"encode\"\n            );\n            break;\n\n        /*\n         * CASE\n         * Delete an item\n        */\n        case \"del_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // perform a check in case of Read-Only user creating an item in his PF\n            if ($_SESSION['user_read_only'] === true && !in_array($dataReceived['categorie'], $_SESSION['personal_folders'])) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            // Check that user can access this item\n            $granted = accessToItemIsGranted($post_id);\n            if ($granted !== true) {\n                echo prepareExchangedData(array(\"error\" => $granted), \"encode\");\n                break;\n            }\n\n            // Load item data\n            $data = DB::queryFirstRow(\n                \"SELECT id_tree\n                FROM \".prefix_table(\"items\").\"\n                WHERE id = %i\",\n                $post_id\n            );\n\n            // delete item consists in disabling it\n            DB::update(\n                prefix_table(\"items\"),\n                array(\n                    'inactif' => '1',\n                    ),\n                \"id = %i\",\n                $post_id\n            );\n            // log\n            logItems($post_id, $post_label, $_SESSION['user_id'], 'at_delete', $_SESSION['login']);\n            // Update CACHE table\n            updateCacheTable(\"delete_value\", $post_id);\n            break;\n\n        /*\n        * CASE\n        * Update a Group\n        */\n        case \"update_folder\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            // Prepare variables\n            $title = filter_var(htmlspecialchars_decode($dataReceived['title']), FILTER_SANITIZE_STRING);\n            $post_folder_id = filter_var(htmlspecialchars_decode($dataReceived['folder']), FILTER_SANITIZE_NUMBER_INT);\n\n            // Check if user is allowed to access this folder\n            if (!in_array($post_folder_id, $_SESSION['groupes_visibles'])) {\n                echo '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                break;\n            }\n\n            // Check if title doesn't contains html codes\n            if (preg_match_all(\"|<[^>]+>(.*)</[^>]+>|U\", $title, $out)) {\n                echo '[ { \"error\" : \"'.addslashes($LANG['error_html_codes']).'\" } ]';\n                break;\n            }\n            // check that title is not numeric\n            if (is_numeric($title) === true) {\n                echo '[{\"error\" : \"ERR_TITLE_ONLY_WITH_NUMBERS\"}]';\n                break;\n            }\n\n            // Check if duplicate folders name are allowed\n            $createNewFolder = true;\n            if (isset($SETTINGS['duplicate_folder']) && $SETTINGS['duplicate_folder'] === '0') {\n                $data = DB::queryFirstRow(\"SELECT id, title FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $title);\n                if (!empty($data['id']) && $dataReceived['folder'] != $data['id']) {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_group_exist']).'\" } ]';\n                    break;\n                }\n            }\n\n            // query on folder\n            $data = DB::queryfirstrow(\n                \"SELECT parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_folder_id\n            );\n\n            // check if complexity level is good\n            // if manager or admin don't care\n            if ($_SESSION['is_admin'] != 1 && $_SESSION['user_manager'] != 1 && $data['personal_folder'] === '0') {\n                $data = DB::queryfirstrow(\n                    \"SELECT valeur\n                    FROM \".prefix_table(\"misc\").\"\n                    WHERE intitule = %i AND type = %s\",\n                    $data['parent_id'],\n                    \"complex\"\n                );\n                if (intval($dataReceived['complexity']) < intval($data['valeur'])) {\n                    echo '[ { \"error\" : \"'.addslashes($LANG['error_folder_complexity_lower_than_top_folder'].\" [<b>\".$SETTINGS_EXT['pwComplexity'][$data['valeur']][1]).'</b>]\"} ]';\n                    break;\n                }\n            }\n\n            // update Folders table\n            $tmp = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $dataReceived['folder']\n            );\n            if ($tmp['parent_id'] != 0 || $tmp['title'] != $_SESSION['user_id'] || $tmp['personal_folder'] != 1) {\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'title' => $title\n                        ),\n                    'id=%s',\n                    $post_folder_id\n                );\n                // update complixity value\n                DB::update(\n                    prefix_table(\"misc\"),\n                    array(\n                        'valeur' => $dataReceived['complexity']\n                        ),\n                    'intitule = %s AND type = %s',\n                    $post_folder_id,\n                    \"complex\"\n                );\n                // rebuild fuild tree folder\n                $tree->rebuild();\n            }\n            // send data\n            echo '[{\"error\" : \"\"}]';\n            break;\n\n        /*\n        * CASE\n        * Move a Group including sub-folders\n        */\n        case \"move_folder\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true) {\n                $returnValues = '[{\"error\" :  \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            $post_source_folder_id = filter_var(htmlspecialchars_decode($dataReceived['source_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n            $post_target_folder_id = filter_var(htmlspecialchars_decode($dataReceived['target_folder_id']), FILTER_SANITIZE_NUMBER_INT);\n\n            // Check that user can access this folder\n            if (!in_array($post_source_folder_id, $_SESSION['groupes_visibles'])\n                || !in_array($post_target_folder_id, $_SESSION['groupes_visibles'])\n            ) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            $tmp_source = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_source_folder_id\n            );\n\n            $tmp_target = DB::queryFirstRow(\n                \"SELECT title, parent_id, personal_folder\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %i\",\n                $post_target_folder_id\n            );\n\n            // check if target is not a child of source\n            if ($tree->isChildOf($post_target_folder_id, $post_source_folder_id) === true) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // check if source or target folder is PF. If Yes, then cancel operation\n            if ($tmp_source['personal_folder'] === '1' || $tmp_target['personal_folder'] === '1') {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // check if source or target folder is PF. If Yes, then cancel operation\n            if ($tmp_source['title'] === $_SESSION['user_id'] || $tmp_target['title'] === $_SESSION['user_id']) {\n                $returnValues = '[{\"error\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            if ($tmp_source['parent_id'] !== \"0\") {\n                // moving SOURCE folder\n                DB::update(\n                    prefix_table(\"nested_tree\"),\n                    array(\n                        'parent_id' => $post_target_folder_id\n                        ),\n                    'id=%s',\n                    $post_source_folder_id\n                );\n                $tree->rebuild();\n            }\n\n\n            // send data\n            echo '[{\"error\" : \"\"}]';\n            break;\n\n        /*\n        * CASE\n        * Store hierarchic position of Group\n        */\n        case 'save_position':\n            DB::update(\n                prefix_table(\"nested_tree\"),\n                array(\n                    'parent_id' => $post_destination\n                    ),\n                'id = %i',\n                $post_source\n            );\n            $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            break;\n\n        /*\n        * CASE\n        * List items of a group\n        */\n        case 'lister_items_groupe':\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.str_replace('\"', '\\\"', $LANG['error_not_allowed_to']).'\"}]';\n                echo prepareExchangedData($returnValues, \"encode\");\n                break;\n            }\n\n            // Prepare POST variables\n            $post_restricted = filter_input(INPUT_POST, 'restricted', FILTER_SANITIZE_NUMBER_INT);\n            $post_start = filter_input(INPUT_POST, 'start', FILTER_SANITIZE_NUMBER_INT);\n            $post_nb_items_to_display_once = filter_input(INPUT_POST, 'nb_items_to_display_once', FILTER_SANITIZE_NUMBER_INT);\n\n            $arboHtml = $html = \"\";\n            $folderIsPf = false;\n            $showError = 0;\n            $itemsIDList = $rights = $returnedData = $uniqueLoadData = array();\n            // Build query limits\n            if (empty($post_start) === true) {\n                $start = 0;\n            } else {\n                $start = $post_start;\n            }\n\n            // to do only on 1st iteration\n            if (intval($start) === 0) {\n                // Prepare tree\n                $arbo = $tree->getPath($post_id, true);\n                foreach ($arbo as $elem) {\n                    if ($elem->title == $_SESSION['user_id'] && $elem->nlevel === '1') {\n                        $elem->title = $_SESSION['login'];\n                        $folderIsPf = true;\n                    }\n                    $arboHtml_tmp = '<a class=\"path_element\" id=\"path_elem_'.$elem->id.'\"';\n                    if (in_array($elem->id, $_SESSION['groupes_visibles'])) {\n                        $arboHtml_tmp .= ' style=\"cursor:pointer;\" onclick=\"ListerItems('.$elem->id.', \\'\\', 0)\"';\n                    }\n                    $arboHtml_tmp .= '>'.htmlspecialchars(stripslashes($elem->title), ENT_QUOTES).'</a>';\n                    if (empty($arboHtml)) {\n                        $arboHtml = $arboHtml_tmp;\n                    } else {\n                        $arboHtml .= '&nbsp;<i class=\"fa fa-caret-right\"></i>&nbsp;'.$arboHtml_tmp;\n                    }\n                }\n                $uniqueLoadData['arboHtml'] = $arboHtml;\n\n                // store last folder accessed in cookie\n                setcookie(\n                    \"jstree_select\",\n                    $post_id,\n                    time() + 60 * 60 * 24 * $SETTINGS['personal_saltkey_cookie_duration'],\n                    '/'\n                );\n\n                // check role access on this folder (get the most restrictive) (2.1.23)\n                $accessLevel = 2;\n                $arrTmp = [];\n                foreach (explode(';', $_SESSION['fonction_id']) as $role) {\n                    $access = DB::queryFirstRow(\n                        \"SELECT type FROM \".prefix_table(\"roles_values\").\" WHERE role_id = %i AND folder_id = %i\",\n                        $role,\n                        $post_id\n                    );\n                    if ($access['type'] === \"R\") {\n                        array_push($arrTmp, 1);\n                    } elseif ($access['type'] === \"W\") {\n                        array_push($arrTmp, 0);\n                    } elseif ($access['type'] === \"ND\") {\n                        array_push($arrTmp, 2);\n                    } else {\n                        array_push($arrTmp, 3);\n                    }\n                }\n                $accessLevel = min($arrTmp);\n                $uniqueLoadData['accessLevel'] = $accessLevel;\n\n                // check if this folder is a PF. If yes check if saltket is set\n                if ((!isset($_SESSION['user_settings']['encrypted_psk']) || empty($_SESSION['user_settings']['encrypted_psk'])) && $folderIsPf === true) {\n                    $showError = \"is_pf_but_no_saltkey\";\n                }\n                $uniqueLoadData['showError'] = $showError;\n\n                // check if items exist\n                $where = new WhereClause('and');\n                if (null !== $post_restricted && $post_restricted === 1 && !empty($_SESSION['list_folders_limited'][$post_id])) {\n                    $counter = count($_SESSION['list_folders_limited'][$post_id]);\n                    $uniqueLoadData['counter'] = $counter;\n                // check if this folder is visible\n                } elseif (!in_array(\n                    $post_id,\n                    array_merge(\n                        $_SESSION['groupes_visibles'],\n                        @array_keys($_SESSION['list_restricted_folders_for_items']),\n                        @array_keys($_SESSION['list_folders_limited'])\n                    )\n                )) {\n                    echo prepareExchangedData(array(\"error\" => \"not_authorized\"), \"encode\");\n                    break;\n                } else {\n                    DB::query(\"SELECT * FROM \".prefix_table(\"items\").\" WHERE inactif = %i\", 0);\n                    $counter = DB::count();\n                    $uniqueLoadData['counter'] = $counter;\n                }\n\n\n                // Identify if it is a personal folder\n                if (in_array($post_id, $_SESSION['personal_visible_groups'])) {\n                    $findPfGroup = 1;\n                } else {\n                    $findPfGroup = \"\";\n                }\n                $uniqueLoadData['findPfGroup'] = $findPfGroup;\n\n\n                // Get folder complexity\n                $folderComplexity = DB::queryFirstRow(\n                    \"SELECT valeur FROM \".prefix_table(\"misc\").\" WHERE type = %s AND intitule = %i\",\n                    \"complex\",\n                    $post_id\n                );\n                $folderComplexity = $folderComplexity['valeur'];\n                $uniqueLoadData['folderComplexity'] = $folderComplexity;\n\n                // Has this folder some categories to be displayed?\n                $displayCategories = \"\";\n                if (isset($SETTINGS['item_extra_fields']) && $SETTINGS['item_extra_fields'] === '1') {\n                    $catRow = DB::query(\n                        \"SELECT id_category FROM \".prefix_table(\"categories_folders\").\" WHERE id_folder = %i\",\n                        $post_id\n                    );\n                    if (count($catRow) > 0) {\n                        foreach ($catRow as $cat) {\n                            if (empty($displayCategories)) {\n                                $displayCategories = $cat['id_category'];\n                            } else {\n                                $displayCategories .= \";\".$cat['id_category'];\n                            }\n                        }\n                    }\n                }\n                $uniqueLoadData['displayCategories'] = $displayCategories;\n\n                // is this folder a personal one\n                $folder_is_personal = in_array($post_id, $_SESSION['personal_folders']);\n                $uniqueLoadData['folder_is_personal'] = $folder_is_personal;\n\n                //\n                $folder_is_in_personal = in_array($post_id, array_merge($_SESSION['personal_visible_groups'], $_SESSION['personal_folders']));\n                $uniqueLoadData['folder_is_in_personal'] = $folder_is_in_personal;\n\n                //\n                if (isset($_SESSION['list_folders_editable_by_role'])) {\n                    $list_folders_editable_by_role = in_array($post_id, $_SESSION['list_folders_editable_by_role']);\n                } else {\n                    $list_folders_editable_by_role = \"\";\n                }\n                $uniqueLoadData['list_folders_editable_by_role'] = $list_folders_editable_by_role;\n            } else {\n                // get preloaded data\n                $uniqueLoadData = json_decode(\n                    filter_input(INPUT_POST, 'uniqueLoadData', FILTER_UNSAFE_RAW),\n                    true\n                );\n\n                // initialize main variables\n                $showError = $uniqueLoadData['showError'];\n                $accessLevel = $uniqueLoadData['accessLevel'];\n                $counter = $uniqueLoadData['counter'];\n                $findPfGroup = $uniqueLoadData['findPfGroup'];\n                $counter_full = $uniqueLoadData['counter_full'];\n                $displayCategories = $uniqueLoadData['displayCategories'];\n                $folderComplexity = $uniqueLoadData['folderComplexity'];\n                $arboHtml = $uniqueLoadData['arboHtml'];\n                $folder_is_personal = $uniqueLoadData['folder_is_personal'];\n                $folder_is_in_personal = $uniqueLoadData['folder_is_in_personal'];\n                $list_folders_editable_by_role = $uniqueLoadData['list_folders_editable_by_role'];\n            }\n\n            // prepare query WHere conditions\n            $where = new WhereClause('and');\n            if (null !== $post_restricted && $post_restricted === 1 && !empty($_SESSION['list_folders_limited'][$post_id])) {\n                $where->add('i.id IN %ls', $_SESSION['list_folders_limited'][$post_id]);\n            } else {\n                $where->add('i.id_tree=%i', $post_id);\n            }\n\n            // build the HTML for this set of Items\n            if ($counter > 0 && empty($showError)) {\n                // init variables\n                $init_personal_folder = false;\n                $expired_item = false;\n                $limited_to_items = \"\";\n\n                // List all ITEMS\n                if ($folderIsPf === false) {\n                    $where->add('i.inactif=%i', 0);\n                    $where->add('l.date=%l', \"(SELECT date FROM \".prefix_table(\"log_items\").\" WHERE action IN ('at_creation', 'at_modification') AND id_item=i.id ORDER BY date DESC LIMIT 1)\");\n                    if (!empty($limited_to_items)) {\n                        $where->add('i.id IN %ls', explode(\",\", $limited_to_items));\n                    }\n\n                    $query_limit = \" LIMIT \".\n                        $start.\",\".\n                        $post_nb_items_to_display_once;\n\n                    $rows = DB::query(\n                        \"SELECT i.id AS id, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                        MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                        MIN(i.anyone_can_modify) AS anyone_can_modify, l.date AS date,\n                        MIN(n.renewal_period) AS renewal_period,\n                        MIN(l.action) AS log_action, l.id_user AS log_user\n                        FROM \".prefix_table(\"items\").\" AS i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (i.id_tree = n.id)\n                        INNER JOIN \".prefix_table(\"log_items\").\" AS l ON (i.id = l.id_item)\n                        WHERE %l\n                        GROUP BY i.id, l.date, l.id_user, l.action\n                        ORDER BY i.label ASC, l.date DESC\".$query_limit, //\n                        $where\n                    );\n                } else {\n                    $post_nb_items_to_display_once = \"max\";\n                    $where->add('i.inactif=%i', 0);\n\n                    $rows = DB::query(\n                        \"SELECT i.id AS id, MIN(i.restricted_to) AS restricted_to, MIN(i.perso) AS perso,\n                        MIN(i.label) AS label, MIN(i.description) AS description, MIN(i.pw) AS pw, MIN(i.login) AS login,\n                        MIN(i.anyone_can_modify) AS anyone_can_modify,l.date AS date,\n                        MIN(n.renewal_period) AS renewal_period,\n                        MIN(l.action) AS log_action, l.id_user AS log_user\n                        FROM \".prefix_table(\"items\").\" AS i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (i.id_tree = n.id)\n                        INNER JOIN \".prefix_table(\"log_items\").\" AS l ON (i.id = l.id_item)\n                        WHERE %l\n                        GROUP BY i.id, l.date, l.id_user, l.action\n                        ORDER BY i.label ASC, l.date DESC\",\n                        $where\n                    );\n                }\n\n                $idManaged = '';\n                $i = 0;\n                $arr_items_html = array();\n\n                foreach ($rows as $record) {\n                    // exclude all results except the first one returned by query\n                    if (empty($idManaged) || $idManaged != $record['id']) {\n                        $new_line = '';\n\n                        // Get Expiration date\n                        $expirationFlag = '';\n                        $expired_item = 0;\n                        if ($SETTINGS['activate_expiration'] === '1') {\n                            if ($record['renewal_period'] > 0 &&\n                                ($record['date'] + ($record['renewal_period'] * $SETTINGS_EXT['one_month_seconds'])) < time()\n                            ) {\n                                $expirationFlag = '<i class=\"fa fa-flag mi-red fa-sm\"></i>&nbsp;';\n                                $expired_item = 1;\n                            } else {\n                                $expirationFlag = '<i class=\"fa fa-flag mi-green fa-sm\"></i>&nbsp;';\n                            }\n                        }\n                        // list of restricted users\n                        $is_user_in_restricted_list = in_array($_SESSION['user_id'], explode(';', $record['restricted_to']));\n\n                        $itemPw = $itemLogin = \"\";\n                        $displayItem = false;\n                        $need_sk = false;\n                        $canMove = false;\n                        $item_is_restricted_to_role = false;\n                        // TODO: Element is restricted to a group. Check if element can be seen by user\n                        // => r\u00e9cup\u00e9rer un tableau contenant les roles associ\u00e9s \u00e0 cet ID (a partir table restriction_to_roles)\n                        $user_is_included_in_role = false;\n                        $roles = DB::query(\n                            \"SELECT role_id FROM \".prefix_table(\"restriction_to_roles\").\" WHERE item_id=%i\",\n                            $record['id']\n                        );\n\n                        if (DB::count() > 0) {\n                            $item_is_restricted_to_role = true;\n                            foreach ($roles as $val) {\n                                if (in_array($val['role_id'], $_SESSION['user_roles'])) {\n                                    $user_is_included_in_role = true;\n                                    break;\n                                }\n                            }\n                        }\n                        // Manage the restricted_to variable\n                        if (null !== $post_restricted) {\n                            $restrictedTo = $post_restricted;\n                        } else {\n                            $restrictedTo = \"\";\n                        }\n\n                        if ($list_folders_editable_by_role === '1') {\n                            if (empty($restrictedTo)) {\n                                $restrictedTo = $_SESSION['user_id'];\n                            } else {\n                                $restrictedTo .= ','.$_SESSION['user_id'];\n                            }\n                        }\n\n                        // Can user modify it?\n                        if ($record['anyone_can_modify'] === '1'\n                            || $_SESSION['user_id'] === $record['log_user']\n                            || ($_SESSION['user_read_only'] === '1' && $folderIsPf === false)\n                            || (isset($SETTINGS['manager_edit']) && $SETTINGS['manager_edit'] === '1') // force draggable if user is manager\n                        ) {\n                            $canMove = true;\n                        }\n\n                        // Fix a bug on Personal Item creation - field `perso` must be set to `1`\n                        if ($record['perso'] !== '1' && (int) $folder_is_personal === 1) {\n                            DB::update(\n                                prefix_table(\"items\"),\n                                array(\n                                    'perso' => 1\n                                ),\n                                \"id=%i\",\n                                $record['id']\n                            );\n                            $record['perso'] = '1';\n                        }\n\n\n                        // CASE where item is restricted to a role to which the user is not associated\n                        if (isset($user_is_included_in_role)\n                            && $user_is_included_in_role === false\n                            && isset($item_is_restricted_to_role)\n                            && $item_is_restricted_to_role === true\n                            && (int) $is_user_in_restricted_list !== 1\n                            && (int) $folder_is_personal !== 1\n                        ) {\n                            $perso = '<i class=\"fa fa-tag mi-red fa-sm\"></i>&nbsp';\n                            $findPfGroup = 0;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'0\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', true, \\'\\')';\n                            $displayItem = false;\n                            $need_sk = false;\n                            $canMove = false;\n                        // Case where item is in own personal folder\n                        } elseif ((int) $folder_is_in_personal === 1\n                            && (int) $record['perso'] === 1\n                        ) {\n                            $perso = '<i class=\"fa fa-user-secret mi-grey-1 fa-sm\"></i>&nbsp';\n                            $findPfGroup = 1;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'1\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'1\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            $need_sk = true;\n                            $canMove = true;\n                        // CAse where item is restricted to a group of users included user\n                        } elseif (!empty($record['restricted_to'])\n                            || (int) $list_folders_editable_by_role === 1\n                            && (int) $is_user_in_restricted_list === 1\n                        ) {\n                            $perso = '<i class=\"fa fa-tag mi-yellow fa-sm\"></i>&nbsp';\n                            $findPfGroup = 0;\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', \\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            $canMove = true;\n                        // CAse where item is restricted to a group of users not including user\n                        } elseif ((int) $record['perso'] === 1\n                            ||\n                            (\n                                !empty($record['restricted_to'])\n                                && (int) $is_user_in_restricted_list !== 1\n                            )\n                            ||\n                            (\n                                isset($user_is_included_in_role)\n                                && isset($item_is_restricted_to_role)\n                                && $user_is_included_in_role === false\n                                && $item_is_restricted_to_role === true\n                            )\n                        ) {\n                            if (isset($user_is_included_in_role)\n                                && isset($item_is_restricted_to_role)\n                                && $user_is_included_in_role === false\n                                && $item_is_restricted_to_role === true\n                            ) {\n                                $perso = '<i class=\"fa fa-tag mi-red fa-sm\"></i>&nbsp';\n                                $findPfGroup = 0;\n                                $action = 'AfficherDetailsItem(\\''.$record['id'].'\\', \\'0\\', \\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\',\\'\\', \\'\\')';\n                                $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'no_display\\', true, \\'\\')';\n                                $displayItem = false;\n                                $need_sk = true;\n                                $canMove = false;\n                            } else {\n                                $perso = '<i class=\"fa fa-tag mi-yellow fa-sm\"></i>&nbsp';\n                                $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\',\\'\\',\\'\\', \\'\\')';\n                                $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                                // reinit in case of not personal group\n                                if ($init_personal_folder === false) {\n                                    $findPfGroup = \"\";\n                                    $init_personal_folder = true;\n                                }\n\n                                if (!empty($record['restricted_to']) && $is_user_in_restricted_list === '1') {\n                                    $displayItem = true;\n                                }\n                            }\n                        } else {\n                            $perso = '<i class=\"fa fa-tag mi-green fa-sm\"></i>&nbsp';\n                            $action = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\',\\'\\',\\'\\', \\'\\')';\n                            $action_dbl = 'AfficherDetailsItem(\\''.$record['id'].'\\',\\'0\\',\\''.$expired_item.'\\', \\''.$restrictedTo.'\\', \\'\\', true, \\'\\')';\n                            $displayItem = true;\n                            // reinit in case of not personal group\n                            if ($init_personal_folder === false) {\n                                $findPfGroup = \"\";\n                                $init_personal_folder = true;\n                            }\n                        }\n                        // Prepare full line\n                        $new_line .= '<li name=\"'.strip_tags(htmlentities(cleanString($record['label']))).'\" ondblclick=\"'.$action_dbl.'\" class=\"';\n                        if ($canMove === true && $accessLevel == 0) {\n                            $new_line .= 'item_draggable';\n                        } else {\n                            $new_line .= 'item';\n                        }\n\n                        $new_line .= ' trunc_line\" id=\"'.$record['id'].'\" style=\"\">';\n\n                        if ($canMove === true && $accessLevel == 0) {\n                            $new_line .= '<span style=\"cursor:hand;\" class=\"grippy\"><i class=\"fa fa-sm fa-arrows mi-grey-1\"></i>&nbsp;</span>';\n                        } else {\n                            $new_line .= '<span style=\"margin-left:11px;\"></span>';\n                        }\n\n\n                        $label = stripslashes(handleBackslash($record['label']));\n                        $new_line .= $expirationFlag.''.$perso.'&nbsp;<a id=\"fileclass'.$record['id'].'\" class=\"file \" onclick=\"'.$action.'\"><div class=\"truncate\">'.$label.'&nbsp;<font size=\"1px\">';\n\n                        // manage desc to show\n                        if (!empty($record['description']) && isset($SETTINGS['show_description']) && $SETTINGS['show_description'] === '1') {\n                            $desc = explode(\"<br>\", $record['description']);\n                            $new_line .= '['.strip_tags(stripslashes(cleanString($desc[0]))).']';\n                        }\n\n                        $new_line .= '</div></font>';\n\n                        $new_line .= '</a>';\n\n                        //\n                        $new_line .= '<span style=\"float:right;margin-top:2px;\">';\n\n                        // increment array for icons shortcuts (don't do if option is not enabled)\n                        if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                            if ($need_sk === true && isset($_SESSION['user_settings']['session_psk'])) {\n                                $pw = cryption(\n                                    $record['pw'],\n                                    $_SESSION['user_settings']['session_psk'],\n                                    \"decrypt\"\n                                );\n                            } else {\n                                $pw = cryption(\n                                    $record['pw'],\n                                    \"\",\n                                    \"decrypt\"\n                                );\n                            }\n\n                            // test charset => may cause a json error if is not utf8\n                            $pw = $pw['string'];\n                            if (!isUTF8($pw)) {\n                                $pw = \"\";\n                                $new_line .= '<i class=\"fa fa-warning fa-sm mi-red tip\" title=\"'.$LANG['pw_encryption_error'].'\"></i>&nbsp;';\n                            } elseif (empty($pw) === true) {\n                                $new_line .= '&nbsp;<i class=\"fa fa-exclamation-circle fa-sm mi-yellow tip\" title=\"'.$LANG['password_is_empty'].'\"></i>&nbsp;';\n                            }\n                        } else {\n                            $pw = \"\";\n                        }\n\n                        // mini icon for collab\n                        if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                            if ($record['anyone_can_modify'] === '1') {\n                                $new_line .= '<i class=\"fa fa-pencil fa-sm mi-grey-1 tip\" title=\"'.$LANG['item_menu_collab_enable'].'\"></i>&nbsp;&nbsp;';\n                            }\n                        }\n\n                        // display quick icon shortcuts ?\n                        if (isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1') {\n                            if ($displayItem === true) {\n                                if (!empty($record['login'])) {\n                                    $new_line .= '<i class=\"fa fa-sm fa-user mi-black mini_login\" data-clipboard-text=\"'.strtr($record['login'], '\"', \"&quot;\").'\" title=\"'.$LANG['item_menu_copy_login'].'\"></i>&nbsp;';\n                                }\n                                if (!empty($pw)) {\n                                    $new_line .= '<i class=\"fa fa-sm fa-lock mi-black mini_pw\" data-clipboard-text=\"'.strtr($pw, '\"', \"&quot;\").'\" title=\"'.$LANG['item_menu_copy_pw'].'\"></i>&nbsp;';\n                                }\n                            }\n                        }\n                        // Prepare make Favorite small icon\n                        $new_line .= '<span id=\"quick_icon_fav_'.$record['id'].'\" title=\"Manage Favorite\" class=\"cursor tip\">';\n                        if (in_array($record['id'], $_SESSION['favourites'])) {\n                            $new_line .= '<i class=\"fa fa-sm fa-star mi-yellow\" onclick=\"ActionOnQuickIcon('.$record['id'].',0)\" class=\"tip\"></i>';\n                        } else {\n                            $new_line .= '<i class=\"fa fa-sm fa-star-o mi-black\" onclick=\"ActionOnQuickIcon('.$record['id'].',1)\" class=\"tip\"></i>';\n                        }\n\n                        $new_line .= '</span></li>';\n                        // Build array with items\n                        array_push($itemsIDList, array($record['id'], $pw, $record['login'], $displayItem));\n\n                        // build full html\n                        $html .= $new_line;\n\n                        $i++;\n                    }\n                    $idManaged = $record['id'];\n                }\n\n                $rights = recupDroitCreationSansComplexite($post_id);\n            }\n\n            // DELETE - 2.1.19 - AND (l.action = 'at_creation' OR (l.action = 'at_modification' AND l.raison LIKE 'at_pw :%'))\n            // count\n            if (intval($start) === 0) {\n                DB::query(\n                    \"SELECT i.id\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"nested_tree\").\" as n ON (i.id_tree = n.id)\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (i.id = l.id_item)\n                    WHERE %l\n                    ORDER BY i.label ASC, l.date DESC\",\n                    $where\n                );\n                $counter_full = DB::count();\n                $uniqueLoadData['counter_full'] = $counter_full;\n            }\n\n            // Check list to be continued status\n            if ($post_nb_items_to_display_once !== 'max' && ($post_nb_items_to_display_once + $start) < $counter_full) {\n                $listToBeContinued = \"yes\";\n            } else {\n                $listToBeContinued = \"end\";\n            }\n\n            //  Fixing items not being displayed\n            $html = iconv(\n                'UTF-8',\n                'UTF-8//IGNORE',\n                mb_convert_encoding(\n                    $html,\n                    \"UTF-8\",\n                    \"UTF-8\"\n                )\n            );\n\n\n            // Prepare returned values\n            $returnValues = array(\n                \"recherche_group_pf\" => $findPfGroup,\n                \"arborescence\" => $arboHtml,\n                \"array_items\" => $itemsIDList,\n                \"items_html\" => $html,\n                \"error\" => $showError,\n                \"saltkey_is_required\" => $folderIsPf === true ? 1 : 0,\n                \"show_clipboard_small_icons\" => isset($SETTINGS['copy_to_clipboard_small_icons']) && $SETTINGS['copy_to_clipboard_small_icons'] === '1' ? 1 : 0,\n                \"next_start\" => intval($post_nb_items_to_display_once) + intval($start),\n                \"list_to_be_continued\" => $listToBeContinued,\n                \"items_count\" => $counter,\n                \"counter_full\" => $counter_full,\n                'folder_complexity' => $folderComplexity,\n                'displayCategories' => $displayCategories,\n                'access_level' => $accessLevel,\n                'IsPersonalFolder' => $folderIsPf === true ? 1 : 0,\n                'uniqueLoadData' => json_encode($uniqueLoadData)\n            );\n            // Check if $rights is not null\n            if (count($rights) > 0) {\n                $returnValues = array_merge($returnValues, $rights);\n            }\n            // Encrypt data to return\n            echo prepareExchangedData($returnValues, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Get complexity level of a group\n        */\n        case \"get_complixity_level\":\n            // Prepare POST variables\n            $post_groupe = filter_input(INPUT_POST, 'groupe', FILTER_SANITIZE_STRING);\n            $post_context = filter_input(INPUT_POST, 'context', FILTER_SANITIZE_STRING);\n\n            // get some info about ITEM\n            $dataItem = DB::queryfirstrow(\n                \"SELECT perso, anyone_can_modify\n                FROM \".prefix_table(\"items\").\"\n                WHERE id=%i\",\n                $post_item_id\n            );\n            // is user allowed to access this folder - readonly\n            if (null !== $post_groupe && empty($post_groupe) === false) {\n                if (in_array($post_groupe, $_SESSION['read_only_folders']) || !in_array($post_groupe, $_SESSION['groupes_visibles'])) {\n                    // check if this item can be modified by anyone\n                    if (isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1') {\n                        if ($dataItem['anyone_can_modify'] != 1) {\n                            // else return not authorized\n                            $returnValues = array(\n                                \"error\" => \"user_is_readonly\",\n                                \"message\" => $LANG['error_not_allowed_to']\n                            );\n                            echo prepareExchangedData($returnValues, \"encode\");\n                            break;\n                        }\n                    } else {\n                        // else return not authorized\n                        $returnValues = array(\n                            \"error\" => \"user_is_readonly\",\n                            \"message\" => $LANG['error_not_allowed_to']\n                        );\n                        echo prepareExchangedData($returnValues, \"encode\");\n                        break;\n                    }\n                }\n            }\n\n            if (null !== $post_item_id && empty($post_item_id) === false) {\n                // Lock Item (if already locked), go back and warn\n                $dataTmp = DB::queryFirstRow(\"SELECT timestamp, user_id FROM \".prefix_table(\"items_edition\").\" WHERE item_id = %i\", $post_item_id);\n\n                // If token is taken for this Item and delay is passed then delete it.\n                if (isset($SETTINGS['delay_item_edition']) &&\n                    $SETTINGS['delay_item_edition'] > 0 && !empty($dataTmp['timestamp']) &&\n                    round(abs(time() - $dataTmp['timestamp']) / 60, 2) > $SETTINGS['delay_item_edition']\n                ) {\n                    DB::delete(prefix_table(\"items_edition\"), \"item_id = %i\", $post_item_id);\n                    //reload the previous data\n                    $dataTmp = DB::queryFirstRow(\n                        \"SELECT timestamp, user_id FROM \".prefix_table(\"items_edition\").\" WHERE item_id = %i\",\n                        $post_item_id\n                    );\n                }\n\n                // If edition by same user (and token not freed before for any reason, then update timestamp)\n                if (!empty($dataTmp['timestamp']) && $dataTmp['user_id'] == $_SESSION['user_id']) {\n                    DB::update(\n                        prefix_table(\"items_edition\"),\n                        array(\n                            \"timestamp\" => time()\n                        ),\n                        \"user_id = %i AND item_id = %i\",\n                        $_SESSION['user_id'],\n                        $post_item_id\n                    );\n                    // If no token for this Item, then initialize one\n                } elseif (empty($dataTmp[0])) {\n                    DB::insert(\n                        prefix_table(\"items_edition\"),\n                        array(\n                            'timestamp' => time(),\n                            'item_id' => $post_item_id,\n                            'user_id' => $_SESSION['user_id']\n                        )\n                    );\n                    // Edition not possible\n                } else {\n                    $returnValues = array(\n                        \"error\" => \"no_edition_possible\",\n                        \"error_msg\" => addslashes($LANG['error_no_edition_possible_locked'])\n                    );\n                    echo prepareExchangedData($returnValues, \"encode\");\n                    break;\n                }\n            }\n\n            // do query on this folder\n            $data_this_folder = DB::queryFirstRow(\n                \"SELECT id, personal_folder, title\n                FROM \".prefix_table(\"nested_tree\").\"\n                WHERE id = %s\",\n                $post_groupe\n            );\n\n            // check if user can perform this action\n            if (null !== $post_context && empty($post_context) === false) {\n                if ($post_context === \"create_folder\" || $post_context === \"edit_folder\" || $post_context === \"delete_folder\") {\n                    if ($_SESSION['is_admin'] !== '1'\n                        && ($_SESSION['user_manager'] !== '1')\n                        && (\n                            isset($SETTINGS['enable_user_can_create_folders'])\n                           && $SETTINGS['enable_user_can_create_folders'] !== '1'\n                        )\n                        && (\n                            $data_this_folder['personal_folder'] !== '1' && $data_this_folder['title'] !== $_SESSION['user_id']\n                        )   // take into consideration if this is a personal folder\n                    ) {\n                        $returnValues = array(\n                            \"error\" => \"no_folder_creation_possible\",\n                            \"error_msg\" => addslashes($LANG['error_not_allowed_to'])\n                        );\n                        echo prepareExchangedData($returnValues, \"encode\");\n                        break;\n                    }\n                }\n            }\n\n            // Get required Complexity for this Folder\n            $data = DB::queryFirstRow(\n                \"SELECT m.valeur, n.personal_folder\n                FROM \".prefix_table(\"misc\").\" AS m\n                INNER JOIN \".prefix_table(\"nested_tree\").\" AS n ON (m.intitule = n.id)\n                WHERE type=%s AND intitule = %s\",\n                \"complex\",\n                $post_groupe\n            );\n\n            if (isset($data['valeur']) && (!empty($data['valeur']) || $data['valeur'] === '0')) {\n                $complexity = $SETTINGS_EXT['pwComplexity'][$data['valeur']][1];\n                $folder_is_personal = $data['personal_folder'];\n            } else {\n                $complexity = $LANG['not_defined'];\n\n                // if not defined, then previous query failed and personal_folder is null\n                // do new query to know if current folder is pf\n                $data_pf = DB::queryFirstRow(\n                    \"SELECT personal_folder\n                    FROM \".prefix_table(\"nested_tree\").\"\n                    WHERE id = %s\",\n                    $post_groupe\n                );\n                $folder_is_personal = $data_pf['personal_folder'];\n            }\n            // Prepare Item actual visibility (what Users/Roles can see it)\n            $visibilite = \"\";\n            if (empty($dataPf[0]) === false) {\n                $visibilite = $_SESSION['login'];\n            } else {\n                $rows = DB::query(\n                    \"SELECT t.title\n                    FROM \".prefix_table(\"roles_values\").\" as v\n                    INNER JOIN \".prefix_table(\"roles_title\").\" as t ON (v.role_id = t.id)\n                    WHERE v.folder_id = %i\n                    GROUP BY title\",\n                    $post_groupe\n                );\n                foreach ($rows as $record) {\n                    if (empty($visibilite)) {\n                        $visibilite = $record['title'];\n                    } else {\n                        $visibilite .= \" - \".$record['title'];\n                    }\n                }\n            }\n\n            recupDroitCreationSansComplexite($post_groupe);\n\n            $returnValues = array(\n                \"val\" => $data['valeur'],\n                \"visibility\" => $visibilite,\n                \"complexity\" => $complexity,\n                \"personal\" => $folder_is_personal\n            );\n            echo prepareExchangedData($returnValues, \"encode\");\n            break;\n\n        /*\n        * CASE\n        * DELETE attached file from an item\n        */\n        case \"delete_attached_file\":\n            // Get some info before deleting\n            $data = DB::queryFirstRow(\n                \"SELECT name, id_item, file\n                FROM \".prefix_table(\"files\").\"\n                WHERE id = %i\",\n                filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n            );\n\n            // Load item data\n            $data_item = DB::queryFirstRow(\n                \"SELECT id_tree\n                FROM \".prefix_table(\"items\").\"\n                WHERE id = %i\",\n                $data['id_item']\n            );\n\n            // Check that user can access this folder\n            if (!in_array($data_item['id_tree'], $_SESSION['groupes_visibles'])) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                break;\n            }\n\n            if (!empty($data['id_item'])) {\n                // Delete from FILES table\n                DB::delete(\n                    prefix_table(\"files\"),\n                    \"id = %i\",\n                    filter_input(INPUT_POST, 'file_id', FILTER_SANITIZE_NUMBER_INT)\n                );\n                // Update the log\n                logItems($data['id_item'], $data['name'], $_SESSION['user_id'], 'at_modification', $_SESSION['login'], 'at_del_file : '.$data['name']);\n                // Delete file from server\n                fileDelete($SETTINGS['path_to_upload_folder'].\"/\".$data['file']);\n            }\n            break;\n\n        /*\n        * CASE\n        * REBUILD the description editor\n        */\n        case \"rebuild_description_textarea\":\n            $post_id = filter_input(INPUT_POST, 'id', FILTER_SANITIZE_STRING);\n\n            $returnValues = array();\n            if (isset($SETTINGS['richtext']) && $SETTINGS['richtext'] === '1') {\n                if ($post_id === \"desc\") {\n                    $returnValues['desc'] = '$(\"#desc\").ckeditor({toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]], height: 100,language: \"'.$SETTINGS_EXT['langs'][$_SESSION['user_language']].'\"});';\n                } elseif ($post_id === \"edit_desc\") {\n                    $returnValues['desc'] = 'CKEDITOR.replace(\"edit_desc\",{toolbar :[[\"Bold\", \"Italic\", \"Strike\", \"-\", \"NumberedList\", \"BulletedList\", \"-\", \"Link\",\"Unlink\",\"-\",\"RemoveFormat\"]], height: 100,language: \"'.$SETTINGS_EXT['langs'][$_SESSION['user_language']].'\"});';\n                }\n            }\n            // Multselect\n            $returnValues['multi_select'] = '$(\"#edit_restricted_to_list\").multiselect({selectedList: 7, minWidth: 430, height: 145, checkAllText: \"'.$LANG['check_all_text'].'\", uncheckAllText: \"'.$LANG['uncheck_all_text'].'\",noneSelectedText: \"'.$LANG['none_selected_text'].'\"});';\n            // Display popup\n            if ($post_id === \"edit_desc\") {\n                $returnValues['dialog'] = '$(\"#div_formulaire_edition_item\").dialog(\"open\");';\n            } else {\n                $returnValues['dialog'] = '$(\"#div_formulaire_saisi\").dialog(\"open\");';\n            }\n            echo $returnValues;\n            break;\n\n        /*\n        * CASE\n        * Clear HTML tags\n        */\n        case \"clear_html_tags\":\n            // Get information for this item\n            $dataItem = DB::queryfirstrow(\n                \"SELECT description FROM \".prefix_table(\"items\").\" WHERE id=%i\",\n                filter_input(INPUT_POST, 'id_item', FILTER_SANITIZE_NUMBER_INT)\n            );\n            // Clean up the string\n            echo json_encode(array(\"description\" => strip_tags($dataItem['description'])), JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP);\n            break;\n\n        /*\n        * FUNCTION\n        * Launch an action when clicking on a quick icon\n        * $action = 0 => Make not favorite\n        * $action = 1 => Make favorite\n        */\n        case \"action_on_quick_icon\":\n            if (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) === '1') {\n                // Add new favourite\n                array_push($_SESSION['favourites'], $post_id);\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        'favourites' => implode(';', $_SESSION['favourites'])\n                        ),\n                    'id = %i',\n                    $_SESSION['user_id']\n                );\n                // Update SESSION with this new favourite\n                $data = DB::queryfirstrow(\n                    \"SELECT label,id_tree\n                    FROM \".prefix_table(\"items\").\"\n                    WHERE id = \".mysqli_real_escape_string($link, $post_id)\n                );\n                $_SESSION['favourites_tab'][$post_id] = array(\n                    'label' => $data['label'],\n                    'url' => 'index.php?page=items&amp;group='.$data['id_tree'].'&amp;id='.$post_id\n                    );\n            } elseif (filter_input(INPUT_POST, 'action', FILTER_SANITIZE_STRING) === '0') {\n                // delete from session\n                foreach ($_SESSION['favourites'] as $key => $value) {\n                    if ($_SESSION['favourites'][$key] === $post_id) {\n                        unset($_SESSION['favourites'][$key]);\n                        break;\n                    }\n                }\n                // delete from DB\n                DB::update(\n                    prefix_table(\"users\"),\n                    array(\n                        \"favourites\" =>implode(';', $_SESSION['favourites'])\n                    ),\n                    \"id = %i\",\n                    $_SESSION['user_id']\n                );\n                // refresh session fav list\n                if (isset($_SESSION['favourites_tab'])) {\n                    foreach ($_SESSION['favourites_tab'] as $key => $value) {\n                        if ($key == $post_id) {\n                            unset($_SESSION['favourites_tab'][$key]);\n                            break;\n                        }\n                    }\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Move an ITEM\n        */\n        case \"move_item\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']\n                || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])\n            ) {\n                // error\n                exit();\n            }\n            // get data about item\n            $dataSource = DB::queryfirstrow(\n                \"SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                FROM \".prefix_table(\"items\").\" as i\n                INNER JOIN \".prefix_table(\"nested_tree\").\" as f ON (i.id_tree=f.id)\n                WHERE i.id=%i\",\n                $post_item_id\n            );\n            // get data about new folder\n            $dataDestination = DB::queryfirstrow(\n                \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $post_folder_id\n            );\n\n            // Check that user can access this folder\n            if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n            ) {\n                echo '[{\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"}]';\n                break;\n            }\n\n            // previous is non personal folder and new too\n            if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                // just update is needed. Item key is the same\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id\n                        ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            } elseif ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '1') {\n                $decrypt = cryption(\n                    $dataSource['pw'],\n                    \"\",\n                    \"decrypt\"\n                );\n                $encrypt = cryption(\n                    $decrypt['string'],\n                    mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                    \"encrypt\"\n                );\n                // update pw\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id,\n                        'pw' => $encrypt['string'],\n                        'pw_iv' => \"\",\n                        'perso' => 1\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            // If previous is personal folder and new is personal folder too => no key exist on item\n            } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '1') {\n                // just update is needed. Item key is the same\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            // If previous is personal folder and new is not personal folder => no key exist on item => add new\n            } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '0') {\n                $decrypt = cryption(\n                    $dataSource['pw'],\n                    mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                    \"decrypt\"\n                );\n                $encrypt = cryption(\n                    $decrypt['string'],\n                    \"\",\n                    \"encrypt\"\n                );\n\n                // update item\n                DB::update(\n                    prefix_table(\"items\"),\n                    array(\n                        'id_tree' => $post_folder_id,\n                        'pw' => $encrypt['string'],\n                        'pw_iv' => \"\",\n                        'perso' => 0\n                    ),\n                    \"id=%i\",\n                    $post_item_id\n                );\n            }\n            // Log item moved\n            logItems(\n                $post_item_id,\n                $dataSource['label'],\n                $_SESSION['user_id'],\n                'at_modification',\n                $_SESSION['login'],\n                'at_moved : '.$dataSource['title'].' -> '.$dataDestination['title']\n            );\n\n            echo '[{\"from_folder\":\"'.$dataSource['id_tree'].'\" , \"to_folder\":\"'.$post_folder_id.'\"}]';\n            break;\n\n        /*\n        * CASE\n        * MASSIVE Move an ITEM\n        */\n        case \"mass_move_items\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key'] || $_SESSION['user_read_only'] === true || !isset($SETTINGS['pwd_maximum_length'])) {\n                // error\n                exit();\n            }\n\n            // loop on items to move\n            foreach (explode(\";\", filter_input(INPUT_POST, 'item_ids', FILTER_SANITIZE_STRING)) as $item_id) {\n                if (!empty($item_id)) {\n                    // get data about item\n                    $dataSource = DB::queryfirstrow(\n                        \"SELECT i.pw, f.personal_folder,i.id_tree, f.title,i.label\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"nested_tree\").\" as f ON (i.id_tree=f.id)\n                        WHERE i.id=%i\",\n                        $item_id\n                    );\n\n                    // Check that user can access this folder\n                    if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                        || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n                    ) {\n                        echo '[{\"error\":\"not_allowed\" , \"status\":\"ok\"}]';\n                        break;\n                    }\n\n                    // get data about new folder\n                    $dataDestination = DB::queryfirstrow(\n                        \"SELECT personal_folder, title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                        $post_folder_id\n                    );\n\n                    // previous is non personal folder and new too\n                    if ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '0') {\n                        // just update is needed. Item key is the same\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                    } elseif ($dataSource['personal_folder'] === '0' && $dataDestination['personal_folder'] === '1') {\n                        $decrypt = cryption(\n                            $dataSource['pw'],\n                            \"\",\n                            \"decrypt\"\n                        );\n                        $encrypt = cryption(\n                            $decrypt['string'],\n                            mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                            \"encrypt\"\n                        );\n                        // update pw\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id,\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'perso' => 1\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    // If previous is personal folder and new is personal folder too => no key exist on item\n                    } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '1') {\n                        // just update is needed. Item key is the same\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    // If previous is personal folder and new is not personal folder => no key exist on item => add new\n                    } elseif ($dataSource['personal_folder'] === '1' && $dataDestination['personal_folder'] === '0') {\n                        $decrypt = cryption(\n                            $dataSource['pw'],\n                            mysqli_escape_string($link, stripslashes($_SESSION['user_settings']['session_psk'])),\n                            \"decrypt\"\n                        );\n                        $encrypt = cryption(\n                            $decrypt['string'],\n                            \"\",\n                            \"encrypt\"\n                        );\n\n                        // update item\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'id_tree' => $post_folder_id,\n                                'pw' => $encrypt['string'],\n                                'pw_iv' => \"\",\n                                'perso' => 0\n                            ),\n                            \"id=%i\",\n                            $item_id\n                        );\n                    }\n                    // Log item moved\n                    logItems(\n                        $item_id,\n                        $dataSource['label'],\n                        $_SESSION['user_id'],\n                        'at_modification',\n                        $_SESSION['login'],\n                        'at_moved : '.$dataSource['title'].' -> '.$dataDestination['title']\n                    );\n                }\n            }\n\n            // reload cache table\n            require_once $SETTINGS['cpassman_dir'].'/sources/main.functions.php';\n            updateCacheTable(\"reload\", \"\");\n\n            echo '[{\"error\":\"\" , \"status\":\"ok\"}]';\n            break;\n\n        /*\n         * CASE\n         * MASSIVE Delete an item\n        */\n        case \"mass_delete_items\":\n            // Check KEY and rights\n            if ($post_key !== $_SESSION['key']) {\n                $returnValues = '[{\"error\" : \"not_allowed\"}, {\"error_text\" : \"'.addslashes($LANG['error_not_allowed_to']).'\"}]';\n                echo $returnValues;\n                break;\n            }\n\n            // loop on items to move\n            foreach (explode(\";\", filter_input(INPUT_POST, 'item_ids', FILTER_SANITIZE_STRING)) as $item_id) {\n                if (!empty($item_id)) {\n                    // get info\n                    $dataSource = DB::queryfirstrow(\n                        \"SELECT label, id_tree\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id=%i\",\n                        $item_id\n                    );\n\n                    // Check that user can access this folder\n                    if (!in_array($dataSource['id_tree'], $_SESSION['groupes_visibles'])\n                        || !in_array($post_folder_id, $_SESSION['groupes_visibles'])\n                    ) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                        break;\n                    }\n\n                    // perform a check in case of Read-Only user creating an item in his PF\n                    if ($_SESSION['user_read_only'] === true) {\n                        echo prepareExchangedData(array(\"error\" => \"ERR_FOLDER_NOT_ALLOWED\"), \"encode\");\n                        break;\n                    }\n\n                    // delete item consists in disabling it\n                    DB::update(\n                        prefix_table(\"items\"),\n                        array(\n                            'inactif' => '1',\n                            ),\n                        \"id = %i\",\n                        $item_id\n                    );\n                    // log\n                    logItems($item_id, $dataSource['label'], $_SESSION['user_id'], 'at_delete', $_SESSION['login']);\n                    // Update CACHE table\n                    updateCacheTable(\"delete_value\", $item_id);\n                }\n            }\n\n            echo '[{\"error\":\"\" , \"status\":\"ok\"}]';\n\n            break;\n\n            /*\n           * CASE\n           * Send email\n        */\n        case \"send_email\":\n            if ($post_key !== $_SESSION['key']) {\n                echo '[{\"error\" : \"something_wrong\"}]';\n                break;\n            } else {\n                if (empty(filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING)) === false) {\n                    $content = explode(',', filter_input(INPUT_POST, 'content', FILTER_SANITIZE_STRING));\n                }\n                // get links url\n                if (empty($SETTINGS['email_server_url'])) {\n                    $SETTINGS['email_server_url'] = $SETTINGS['cpassman_url'];\n                }\n                if ($post_cat === \"request_access_to_author\") {\n                    $dataAuthor = DB::queryfirstrow(\"SELECT email,login FROM \".prefix_table(\"users\").\" WHERE id= \".$content[1]);\n                    $dataItem = DB::queryfirstrow(\"SELECT label FROM \".prefix_table(\"items\").\" WHERE id= \".$content[0]);\n                    $ret = sendEmail(\n                        $LANG['email_request_access_subject'],\n                        str_replace(array('#tp_item_author#', '#tp_user#', '#tp_item#'), array(\" \".addslashes($dataAuthor['login']), addslashes($_SESSION['login']), addslashes($dataItem['label'])), $LANG['email_request_access_mail']),\n                        $dataAuthor['email']\n                    );\n                } elseif ($post_cat === \"share_this_item\") {\n                    $dataItem = DB::queryfirstrow(\n                        \"SELECT label,id_tree\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id= %i\",\n                        $post_id\n                    );\n                    // send email\n                    $ret = sendEmail(\n                        $LANG['email_share_item_subject'],\n                        str_replace(\n                            array('#tp_link#', '#tp_user#', '#tp_item#'),\n                            array($SETTINGS['email_server_url'].'/index.php?page=items&group='.$dataItem['id_tree'].'&id='.$post_id, addslashes($_SESSION['login']), addslashes($dataItem['label'])),\n                            $LANG['email_share_item_mail']\n                        ),\n                        $post_receipt\n                    );\n                }\n                echo '[{'.$ret.'}]';\n            }\n            break;\n\n        /*\n           * CASE\n           * manage notification of an Item\n        */\n        case \"notify_a_user\":\n            if ($post_key !== $_SESSION['key']) {\n                echo '[{\"error\" : \"something_wrong\"}]';\n                break;\n            } else {\n                if (filter_input(INPUT_POST, 'notify_type', FILTER_SANITIZE_STRING) === \"on_show\") {\n                    // Check if values already exist\n                    $data = DB::queryfirstrow(\n                        \"SELECT notification FROM \".prefix_table(\"items\").\" WHERE id = %i\",\n                        $post_item_id\n                    );\n                    $notifiedUsers = explode(';', $data['notification']);\n                    // User is not in actual notification list\n                    if ($post_status === \"true\" && !in_array($post_user_id, $notifiedUsers)) {\n                        // User is not in actual notification list and wants to be notified\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'notification' => empty($data['notification']) ?\n                                    filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT).\";\"\n                                    : $data['notification'].filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                        echo '[{\"error\" : \"\", \"new_status\":\"true\"}]';\n                        break;\n                    } elseif ($post_status === false && in_array($post_user_id, $notifiedUsers)) {\n                        // TODO : delete user from array and store in DB\n                        // User is in actual notification list and doesn't want to be notified\n                        DB::update(\n                            prefix_table(\"items\"),\n                            array(\n                                'notification' => empty($data['notification']) ?\n                                    filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                    : $data['notification'].\";\".filter_input(INPUT_POST, 'user_id', FILTER_SANITIZE_NUMBER_INT)\n                                ),\n                            \"id=%i\",\n                            $post_item_id\n                        );\n                    }\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Item History Log - add new entry\n        */\n        case \"history_entry_add\":\n            if ($post_key !== $_SESSION['key']) {\n                $data = array(\"error\" => \"key_is_wrong\");\n                echo prepareExchangedData($data, \"encode\");\n                break;\n            } else {\n                // decrypt and retreive data in JSON format\n                $dataReceived = prepareExchangedData($post_data, \"decode\");\n                // Get all informations for this item\n                $dataItem = DB::queryfirstrow(\n                    \"SELECT *\n                    FROM \".prefix_table(\"items\").\" as i\n                    INNER JOIN \".prefix_table(\"log_items\").\" as l ON (l.id_item = i.id)\n                    WHERE i.id=%i AND l.action = %s\",\n                    $dataReceived['item_id'],\n                    \"at_creation\"\n                );\n                // check that actual user can access this item\n                $restrictionActive = true;\n                $restrictedTo = array_filter(explode(';', $dataItem['restricted_to']));\n                if (in_array($_SESSION['user_id'], $restrictedTo)) {\n                    $restrictionActive = false;\n                }\n                if (empty($dataItem['restricted_to'])) {\n                    $restrictionActive = false;\n                }\n\n                if ((\n                        (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles'])) && ($dataItem['perso'] === '0' || ($dataItem['perso'] === '1' && $dataItem['id_user'] == $_SESSION['user_id'])) && $restrictionActive === false\n                    )\n                    ||\n                    (\n                        isset($SETTINGS['anyone_can_modify']) && $SETTINGS['anyone_can_modify'] === '1' && $dataItem['anyone_can_modify'] === '1' && (in_array($dataItem['id_tree'], $_SESSION['groupes_visibles']) || $_SESSION['is_admin'] === '1') && $restrictionActive === false\n                    )\n                    ||\n                    (@in_array(\n                        $post_id,\n                        $_SESSION['list_folders_limited'][$post_folder_id]\n                    ))\n                ) {\n                    $error = \"\";\n                    // Query\n                    logItems($dataReceived['item_id'], $dataItem['label'], $_SESSION['user_id'], 'at_manual', $_SESSION['login'], htmlspecialchars_decode($dataReceived['label']));\n                    // Prepare new line\n                    $data = DB::queryfirstrow(\n                        \"SELECT * FROM \".prefix_table(\"log_items\").\" WHERE id_item = %i ORDER BY date DESC\",\n                        $dataReceived['item_id']\n                    );\n                    $historic = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], $data['date']).\" - \".$_SESSION['login'].\" - \".$LANG[$data['action']].\" - \".$data['raison'];\n                    // send back\n                    $data = array(\n                        \"error\" => \"\",\n                        \"new_line\" => \"<br>\".addslashes($historic)\n                    );\n                    echo prepareExchangedData($data, \"encode\");\n                } else {\n                    $data = array(\"error\" => \"something_wrong\");\n                    echo prepareExchangedData($data, \"encode\");\n                    break;\n                }\n            }\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"free_item_for_edition\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // Do\n            DB::delete(\n                prefix_table(\"items_edition\"),\n                \"item_id = %i\",\n                $post_id\n            );\n            break;\n\n        /*\n        * CASE\n        * Check if Item has been changed since loaded\n        */\n        case \"is_item_changed\":\n            $data = DB::queryFirstRow(\n                \"SELECT date FROM \".prefix_table(\"log_items\").\" WHERE action = %s AND id_item = %i ORDER BY date DESC\",\n                \"at_modification\",\n                $post_item_id\n            );\n            // Check if it's in a personal folder. If yes, then force complexity overhead.\n            if ($data['date'] > filter_input(INPUT_POST, 'timestamp', FILTER_SANITIZE_STRING)) {\n                echo '{ \"modified\" : \"1\" }';\n            } else {\n                echo '{ \"modified\" : \"0\" }';\n            }\n            break;\n\n        /*\n        * CASE\n        * Check if Item has been changed since loaded\n        */\n        case \"generate_OTV_url\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // delete all existing old otv codes\n            $rows = DB::query(\"SELECT id FROM \".prefix_table(\"otv\").\" WHERE timestamp < \".(time() - $SETTINGS['otv_expiration_period'] * 86400));\n            foreach ($rows as $record) {\n                DB::delete(prefix_table('otv'), \"id=%i\", $record['id']);\n            }\n\n            // generate session\n            $otv_code = GenerateCryptKey(32, false, true, true, true, false);\n\n            DB::insert(\n                prefix_table(\"otv\"),\n                array(\n                    'id' => null,\n                    'item_id' => $post_id,\n                    'timestamp' => time(),\n                    'originator' => intval($_SESSION['user_id']),\n                    'code' => $otv_code\n                    )\n            );\n            $newID = DB::insertId();\n\n            $otv_session = array(\n                \"code\"      => $otv_code,\n                \"stamp\" => time()\n            );\n\n            if (!isset($SETTINGS['otv_expiration_period'])) {\n                $SETTINGS['otv_expiration_period'] = 7;\n            }\n            $url = $SETTINGS['cpassman_url'].\"/index.php?otv=true&\".http_build_query($otv_session);\n            $exp_date = date($SETTINGS['date_format'].\" \".$SETTINGS['time_format'], time() + (intval($SETTINGS['otv_expiration_period']) * 86400));\n\n            echo json_encode(\n                array(\n                    \"error\" => \"\",\n                    \"url\" => str_replace(\n                        array(\"#URL#\", \"#DAY#\"),\n                        array('<span id=\\'otv_link\\'>'.$url.'</span>&nbsp;<span class=\\'fa-stack tip\" title=\\''.addslashes($LANG['copy']).'\\' style=\\'cursor:pointer;\\' id=\\'button_copy_otv_link\\'><span class=\\'fa fa-square fa-stack-2x\\'></span><span class=\\'fa fa-clipboard fa-stack-1x fa-inverse\\'></span></span>', $exp_date),\n                        $LANG['one_time_view_item_url_box']\n                    )\n                )\n            );\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"image_preview_preparation\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // get file info\n            $file_info = DB::queryfirstrow(\n                \"SELECT file, status FROM \".prefix_table(\"files\").\" WHERE id=%i\",\n                intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_STRING), 1))\n            );\n\n            // prepare image info\n            $post_title = filter_input(INPUT_POST, 'title', FILTER_SANITIZE_STRING);\n            $image_code = $file_info['file'];\n            $extension = substr($post_title, strrpos($post_title, '.') + 1);\n            $file_to_display = $SETTINGS['url_to_upload_folder'].'/'.$image_code;\n            $file_suffix = \"\";\n\n            // should we encrypt/decrypt the file\n            encrypt_or_decrypt_file($file_info['file'], $file_info['status']);\n\n            // should we decrypt the attachment?\n            if (isset($file_info['status']) && $file_info['status'] === \"encrypted\") {\n                // Delete the file as viewed\n                fileDelete($SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension);\n\n                // Open the file\n                if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$image_code)) {\n                    // Should we encrypt or decrypt?\n                    prepareFileWithDefuse(\n                        'decrypt',\n                        $SETTINGS['path_to_upload_folder'].'/'.$image_code,\n                        $SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension\n                    );\n\n                    // prepare variable\n                    $file_to_display = $file_to_display.\"_delete.\".$extension;\n                    $file_suffix = \"_delete.\".$extension;\n                }\n            }\n\n            // Encrypt data to return\n            echo prepareExchangedData(\n                array(\n                    \"error\" => \"\",\n                    \"new_file\" => $file_to_display,\n                    \"file_suffix\" => $file_suffix,\n                    \"file_path\" => $SETTINGS['path_to_upload_folder'].'/'.$image_code.\"_delete.\".$extension\n                ),\n                \"encode\"\n            );\n            break;\n\n        /*\n        * CASE\n        * Free Item for Edition\n        */\n        case \"delete_file\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // get file info\n            $result = DB::queryfirstrow(\n                \"SELECT file FROM \".prefix_table(\"files\").\" WHERE id=%i\",\n                intval(substr(filter_input(INPUT_POST, 'uri', FILTER_SANITIZE_STRING), 1))\n            );\n\n            fileDelete($SETTINGS['path_to_upload_folder'].'/'.$result['file'].filter_input(INPUT_POST, 'file_suffix', FILTER_SANITIZE_STRING));\n\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"get_refined_list_of_users\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            $error = \"\";\n\n            // get list of users\n            $aList = array();\n            $selOptionsUsers = \"\";\n            $selOptionsRoles = \"\";\n            $selEOptionsUsers = \"\";\n            $selEOptionsRoles = \"\";\n            $rows = DB::query(\n                \"SELECT r.role_id AS role_id, t.title AS title\n                FROM \".prefix_table(\"roles_values\").\" AS r\n                INNER JOIN \".prefix_table(\"roles_title\").\" AS t ON (r.role_id = t.id)\n                WHERE r.folder_id = %i\",\n                $post_iFolderId\n            );\n            foreach ($rows as $record) {\n                $selOptionsRoles .= '<option value=\"role_'.$record['role_id'].'\" class=\"folder_rights_role\">'.$record['title'].'</option>';\n                $selEOptionsRoles .= '<option value=\"role_'.$record['role_id'].'\" class=\"folder_rights_role_edit\">'.$record['title'].'</option>';\n                $rows2 = DB::query(\"SELECT id, login, fonction_id FROM \".prefix_table(\"users\").\" WHERE fonction_id LIKE '%\".$record['role_id'].\"%'\");\n                foreach ($rows2 as $record2) {\n                    foreach (explode(\";\", $record2['fonction_id']) as $role) {\n                        if (!in_array($record2['id'], $aList) && $role == $record['role_id']) {\n                            array_push($aList, $record2['id']);\n                            $selOptionsUsers .= '<option value=\"'.$record2['id'].'\" class=\"folder_rights_user\">'.$record2['login'].'</option>';\n                            $selEOptionsUsers .= '<option value=\"'.$record2['id'].'\" class=\"folder_rights_user_edit\">'.$record2['login'].'</option>';\n                        }\n                    }\n                }\n            }\n\n            // export data\n            $data = array(\n                'error' => $error,\n                'selOptionsUsers' => $selOptionsUsers,\n                'selOptionsRoles' => $selOptionsRoles,\n                'selEOptionsUsers' => $selEOptionsUsers,\n                'selEOptionsRoles' => $selEOptionsRoles\n            );\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"check_for_title_duplicate\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            $error = \"\";\n            $duplicate = 0;\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n            // Prepare variables\n            $label = htmlspecialchars_decode($dataReceived['label']);\n            $idFolder = $dataReceived['idFolder'];\n\n            // don't check if Personal Folder\n            $data = DB::queryFirstRow(\"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\", $idFolder);\n            if ($data['title'] == $_SESSION['user_id']) {\n                // send data\n                echo '[{\"duplicate\" : \"'.$duplicate.'\" , error\" : \"\"}]';\n            } else {\n                if (filter_input(INPUT_POST, 'option', FILTER_SANITIZE_STRING) === \"same_folder\") {\n                // case unique folder\n                    DB::query(\n                        \"SELECT label\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE id_tree = %i AND label = %s\",\n                        $idFolder,\n                        $label\n                    );\n                } else {\n                // case complete database\n\n                    //get list of personal folders\n                    $arrayPf = array();\n                    $listPf = \"\";\n                    if (!empty($row['id'])) {\n                        $rows = DB::query(\n                            \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n                            \"1\"\n                        );\n                        foreach ($rows as $record) {\n                            if (!in_array($record['id'], $arrayPf)) {\n                                array_push($arrayPf, $record['id']);\n                            }\n                        }\n                    }\n\n                    // build WHERE condition\n                    $where = new WhereClause('and');\n                    $where->add('id_tree = %i', $idFolder);\n                    $where->add('label = %s', $label);\n                    if (!empty($arrayPf)) {\n                        $where->add(\"id_tree NOT IN (\".implode(',', $arrayPf).\")\");\n                    }\n\n                    DB::query(\n                        \"SELECT label\n                        FROM \".prefix_table(\"items\").\"\n                        WHERE %l\",\n                        $where\n                    );\n                }\n\n                // count results\n                if (DB::count() > 0) {\n                    $duplicate = 1;\n                }\n\n                // send data\n                echo '[{\"duplicate\" : \"'.$duplicate.'\" , \"error\" : \"\"}]';\n            }\n            break;\n\n        /*\n        * CASE\n        * Get list of users that have access to the folder\n        */\n        case \"refresh_visible_folders\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n\n            // Build list of visible folders\n            $selectVisibleFoldersOptions = $selectVisibleNonPersonalFoldersOptions = $selectVisibleActiveFoldersOptions = \"\";\n            if (isset($SETTINGS['can_create_root_folder']) && $SETTINGS['can_create_root_folder'] === '1') {\n                $selectVisibleFoldersOptions = '<option value=\"0\">'.$LANG['root'].'</option>';\n            }\n\n            if ($_SESSION['user_admin'] === '1' && (isset($SETTINGS_EXT['admin_full_right'])\n                && $SETTINGS_EXT['admin_full_right'] === true) || !isset($SETTINGS_EXT['admin_full_right'])) {\n                $_SESSION['groupes_visibles'] = $_SESSION['personal_visible_groups'];\n                $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n            }\n\n            if (isset($_SESSION['list_folders_limited']) && count($_SESSION['list_folders_limited']) > 0) {\n                $listFoldersLimitedKeys = @array_keys($_SESSION['list_folders_limited']);\n            } else {\n                $listFoldersLimitedKeys = array();\n            }\n            // list of items accessible but not in an allowed folder\n            if (isset($_SESSION['list_restricted_folders_for_items'])\n                && count($_SESSION['list_restricted_folders_for_items']) > 0) {\n                $listRestrictedFoldersForItemsKeys = @array_keys($_SESSION['list_restricted_folders_for_items']);\n            } else {\n                $listRestrictedFoldersForItemsKeys = array();\n            }\n\n\n            //Build tree\n            $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n            $tree->register();\n            $tree = new Tree\\NestedTree\\NestedTree($pre.'nested_tree', 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            $folders = $tree->getDescendants();\n\n            foreach ($folders as $folder) {\n                // Be sure that user can only see folders he/she is allowed to\n                if (!in_array($folder->id, $_SESSION['forbiden_pfs'])\n                    || in_array($folder->id, $_SESSION['groupes_visibles'])\n                    || in_array($folder->id, $listFoldersLimitedKeys)\n                    || in_array($folder->id, $listRestrictedFoldersForItemsKeys)\n                ) {\n                    $displayThisNode = false;\n                    $hide_node = false;\n                    $nbChildrenItems = 0;\n                    // Check if any allowed folder is part of the descendants of this node\n                    $nodeDescendants = $tree->getDescendants($folder->id, true, false, true);\n                    foreach ($nodeDescendants as $node) {\n                        // manage tree counters\n                        if (isset($SETTINGS['tree_counters']) && $SETTINGS['tree_counters'] === '1') {\n                            DB::query(\n                                \"SELECT * FROM \".prefix_table(\"items\").\"\n                                WHERE inactif=%i AND id_tree = %i\",\n                                0,\n                                $node\n                            );\n                            $nbChildrenItems += DB::count();\n                        }\n                        if (in_array($node, array_merge($_SESSION['groupes_visibles'], $_SESSION['list_restricted_folders_for_items']))\n                            || @in_array($node, $listFoldersLimitedKeys)\n                            || @in_array($node, $listRestrictedFoldersForItemsKeys)\n                        ) {\n                            $displayThisNode = true;\n                            //break;\n                        }\n                    }\n\n                    if ($displayThisNode === true) {\n                        $ident = \"\";\n                        for ($x = 1; $x < $folder->nlevel; $x++) {\n                            $ident .= \"&nbsp;&nbsp;\";\n                        }\n\n                        // resize title if necessary\n                        $fldTitle = str_replace(\"&\", \"&amp;\", $folder->title);\n\n                        // rename personal folder with user login\n                        if ($folder->title == $_SESSION['user_id'] && $folder->nlevel === '1') {\n                            $fldTitle = $_SESSION['login'];\n                        }\n\n                        // build select for all visible folders\n                        if (in_array($folder->id, $_SESSION['groupes_visibles']) && !in_array($folder->id, $_SESSION['read_only_folders'])) {\n                            if ($_SESSION['user_read_only'] === '0' || ($_SESSION['user_read_only'] === '1' && in_array($folder->id, $_SESSION['personal_visible_groups']))) {\n                                if (($folder->title == $_SESSION['user_id'] && $folder->nlevel === '1')) { //\n                                    $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" >'.$ident.$fldTitle.'</option>';\n                                } else {\n                                    $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                                }\n                            } else {\n                                $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                            }\n                        } else {\n                            $selectVisibleFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                        // build select for non personal visible folders\n                        if (isset($_SESSION['all_non_personal_folders']) && in_array($folder->id, $_SESSION['all_non_personal_folders'])) {\n                            $selectVisibleNonPersonalFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                        } else {\n                            $selectVisibleNonPersonalFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                        // build select for active folders (where user can do something)\n                        if (isset($_SESSION['list_restricted_folders_for_items']) && !in_array($folder->id, $_SESSION['read_only_folders'])) {\n                            $selectVisibleActiveFoldersOptions .= '<option value=\"'.$folder->id.'\">'.$ident.$fldTitle.'</option>';\n                        } else {\n                            $selectVisibleActiveFoldersOptions .= '<option value=\"'.$folder->id.'\" disabled=\"disabled\">'.$ident.$fldTitle.'</option>';\n                        }\n                    }\n                }\n            }\n\n            $data = array(\n                'error' => \"\",\n                'selectVisibleFoldersOptions' => ($selectVisibleFoldersOptions),\n                'selectVisibleNonPersonalFoldersOptions' => ($selectVisibleNonPersonalFoldersOptions),\n                'selectVisibleActiveFoldersOptions' => ($selectVisibleActiveFoldersOptions),\n                'selectFullVisibleFoldersOptions' => str_replace('disabled=\"disabled\"', \"\", $selectVisibleFoldersOptions)\n            );\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        /*\n        * CASE\n        * Load item history\n        */\n        case \"load_item_history\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo prepareExchangedData(array(\"error\" => \"ERR_KEY_NOT_CORRECT\"), \"encode\");\n                break;\n            }\n\n            // decrypt and retreive data in JSON format\n            $dataReceived = prepareExchangedData($post_data, \"decode\");\n\n            // Prepare variables\n            $id = noHTML(htmlspecialchars_decode($dataReceived['id']));\n\n            // get item info\n            $dataItem = DB::queryFirstRow(\n                \"SELECT *\n                FROM \".prefix_table(\"items\").\"\n                WHERE id=%i\",\n                $id\n            );\n\n            // get item history\n            $history = '<table style=\"margin:0px; width:100%; border-collapse: collapse; background-color:#D4D5D5;\" cellspacing=\"0\" cellpadding=\"1\">';\n            $rows = DB::query(\n                \"SELECT l.date as date, l.action as action, l.raison as raison, l.raison_iv AS raison_iv,\n                u.login as login, u.avatar_thumb as avatar_thumb\n                FROM \".prefix_table(\"log_items\").\" as l\n                LEFT JOIN \".prefix_table(\"users\").\" as u ON (l.id_user=u.id)\n                WHERE id_item=%i AND action <> %s\n                ORDER BY date ASC\",\n                $id,\n                \"at_shown\"\n            );\n            foreach ($rows as $record) {\n                $reason = explode(':', $record['raison']);\n                if ($record['action'] === \"at_modification\" && $reason[0] === \"at_pw \") {\n                    // check if item is PF\n                    if ($dataItem['perso'] != 1) {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            \"\",\n                            \"decrypt\"\n                        );\n                    } else {\n                        $reason[1] = cryption(\n                            $reason[1],\n                            $_SESSION['user_settings']['session_psk'],\n                            \"decrypt\"\n                        );\n                    }\n                    $reason[1] = @$reason[1]['string'];\n                    // if not UTF8 then cleanup and inform that something is wrong with encrytion/decryption\n                    if (!isUTF8($reason[1]) || is_array($reason[1])) {\n                        $reason[1] = \"\";\n                    }\n                }\n                // imported via API\n                if (empty($record['login'])) {\n                    $record['login'] = $LANG['imported_via_api'].\" [\".$record['raison'].\"]\";\n                }\n\n                if (!empty($reason[1])\n                    || $record['action'] === \"at_copy\"\n                    || $record['action'] === \"at_creation\"\n                    || $record['action'] === \"at_manual\"\n                    || $record['action'] === \"at_modification\"\n                    || $record['action'] === \"at_delete\"\n                    || $record['action'] === \"at_restored\") {\n                    // Prepare avatar\n                    if (isset($record['avatar_thumb']) && !empty($record['avatar_thumb'])) {\n                        if (file_exists($SETTINGS['cpassman_dir'].'/includes/avatars/'.$record['avatar_thumb'])) {\n                            $avatar = $SETTINGS['cpassman_url'].'/includes/avatars/'.$record['avatar_thumb'];\n                        } else {\n                            $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n                        }\n                    } else {\n                        $avatar = $SETTINGS['cpassman_url'].'/includes/images/photo.jpg';\n                    }\n\n                    $history .= '<tr style=\"\">'.\n                        '<td rowspan=\"2\" style=\"width:40px;\"><img src=\"'.$avatar.'\" style=\"border-radius:20px; height:35px;\"></td>'.\n                        '<td colspan=\"2\" style=\"font-size:11px;\"><i>'.$LANG['by'].' '.$record['login'].' '.$LANG['at'].' '.date($SETTINGS['date_format'].' '.$SETTINGS['time_format'], $record['date']).'</i></td></tr>'.\n                        '<tr style=\"border-bottom:3px solid #C9C9C9;\"><td style=\"width:100px;\"><b>'.$LANG[$record['action']].'</b></td>'.\n                        '<td style=\"\">'.(!empty($record['raison']) && $record['action'] !== \"at_creation\" ? (count($reason) > 1 ? $LANG[trim($reason[0])].' : '.handleBackslash($reason[1]) : ($record['action'] === \"at_manual\" ? $reason[0] : $LANG[trim($reason[0])])) : '').'</td>'.\n                        '</tr>'.\n                        '<tr></tr>';\n                }\n            }\n            $history .= \"</table>\";\n\n            $data = array(\n                'error' => \"\",\n                'new_html' => $history\n            );\n\n            // send data\n            echo prepareExchangedData($data, \"encode\");\n\n            break;\n\n        case \"suggest_item_change\":\n            // Check KEY\n            if ($post_key !== $_SESSION['key']) {\n                echo '[ { \"error\" : \"key_not_conform\" } ]';\n                break;\n            }\n            // decrypt and retrieve data in JSON format\n            $data_received = prepareExchangedData($post_data, \"decode\");\n\n            // prepare variables\n            $label = htmlspecialchars_decode($data_received['label']);\n            $pwd = htmlspecialchars_decode($data_received['pwd']);\n            $login = htmlspecialchars_decode($data_received['login']);\n            $email = htmlspecialchars_decode($data_received['email']);\n            $url = htmlspecialchars_decode($data_received['url']);\n            $folder = htmlspecialchars_decode($data_received['folder']);\n            $comment = htmlspecialchars_decode($data_received['comment']);\n            $item_id = htmlspecialchars_decode($data_received['item_id']);\n\n            if (empty($pwd)) {\n                $encrypt['string'] = \"\";\n            } else {\n                $encrypt = cryption($pwd, \"\", \"encrypt\");\n            }\n\n            // query\n            DB::insert(\n                prefix_table(\"items_change\"),\n                array(\n                    'item_id' => $item_id,\n                    'label' => $label,\n                    'pw' => $encrypt['string'],\n                    'login' => $login,\n                    'email' => $email,\n                    'url' => $url,\n                    'description' => \"\",\n                    'comment' => $comment,\n                    'folder_id' => $folder,\n                    'user_id' => $_SESSION['user_id'],\n                    'timestamp' => time()\n                )\n            );\n            $newID = DB::insertId();\n\n            // get some info to add to the notification email\n            $resp_user = DB::queryfirstrow(\n                \"SELECT login FROM \".prefix_table(\"users\").\" WHERE id = %i\",\n                $_SESSION['user_id']\n            );\n            $resp_folder = DB::queryfirstrow(\n                \"SELECT title FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n                $folder\n            );\n\n            // notify Managers\n            $rows = DB::query(\n                \"SELECT email\n                FROM \".prefix_table(\"users\").\"\n                WHERE `gestionnaire` = %i AND `email` IS NOT NULL\",\n                1\n            );\n            foreach ($rows as $record) {\n                sendEmail(\n                    $LANG['suggestion_notify_subject'],\n                    str_replace(array('#tp_label#', '#tp_user#', '#tp_folder#'), array(addslashes($label), addslashes($resp_user['login']), addslashes($resp_folder['title'])), $LANG['suggestion_notify_body']),\n                    $record['email']\n                );\n            }\n\n            echo '[ { \"error\" : \"\" } ]';\n            break;\n    }\n}\n// Build the QUERY in case of GET\nif (isset($_GET['type'])) {\n    switch ($_GET['type']) {\n        /*\n        * CASE\n        * Autocomplet for TAGS\n        */\n        case \"autocomplete_tags\":\n            // Get a list off all existing TAGS\n            $listOfTags = \"\";\n            $rows = DB::query(\"SELECT tag FROM \".prefix_table(\"tags\").\" WHERE tag LIKE %ss GROUP BY tag\", $_GET['term']);\n            foreach ($rows as $record) {\n                if (empty($listOfTags)) {\n                    $listOfTags = '\"'.$record['tag'].'\"';\n                } else {\n                    $listOfTags .= ', \"'.$record['tag'].'\"';\n                }\n            }\n            echo \"[\".$listOfTags.\"]\";\n            break;\n    }\n}\n\n/*\n* FUNCTION\n* Identify if this group authorize creation of item without the complexit level reached\n*/\nfunction recupDroitCreationSansComplexite($groupe)\n{\n    $data = DB::queryFirstRow(\n        \"SELECT bloquer_creation, bloquer_modification, personal_folder FROM \".prefix_table(\"nested_tree\").\" WHERE id = %i\",\n        $groupe\n    );\n    // Check if it's in a personal folder. If yes, then force complexity overhead.\n    if ($data['personal_folder'] === '1') {\n        return array(\"bloquer_modification_complexite\" => 1, \"bloquer_creation_complexite\" => 1);\n    }\n\n    return array(\"bloquer_modification_complexite\" => $data['bloquer_modification'], \"bloquer_creation_complexite\" => $data['bloquer_creation']);\n}\n\n/*\n* FUNCTION\n* permits to identify what icon to display depending on file extension\n*/\nfunction fileFormatImage($ext)\n{\n    global $SETTINGS_EXT;\n    if (in_array($ext, $SETTINGS_EXT['office_file_ext'])) {\n        $image = \"file-word-o\";\n    } elseif ($ext === \"pdf\") {\n        $image = \"file-pdf-o\";\n    } elseif (in_array($ext, $SETTINGS_EXT['image_file_ext'])) {\n        $image = \"file-image-o\";\n    } elseif ($ext === \"txt\") {\n        $image = \"file-text-o\";\n    } else {\n        $image = \"file-o\";\n    }\n\n    return $image;\n}\n\n/*\n* FUNCTION\n* permits to remplace some specific characters in password\n*/\nfunction passwordReplacement($pwd)\n{\n    $pwPatterns = array('/ETCOMMERCIAL/', '/SIGNEPLUS/');\n    $pwRemplacements = array('&', '+');\n\n    return preg_replace($pwPatterns, $pwRemplacements, $pwd);\n}\n", "<?php\n/**\n *\n * @file          main.functions.php\n * @author        Nils Laumaill\u00e9\n * @version       2.1.27\n * @copyright     (c) 2009-2017 Nils Laumaill\u00e9\n * @licensing     GNU AFFERO GPL 3.0\n * @link\n */\n\n//define pbkdf2 iteration count\ndefine('ITCOUNT', '2072');\n\nif (!isset($_SESSION['CPM']) || $_SESSION['CPM'] != 1) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    require_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    require_once './includes/config/tp.config.php';\n} elseif (file_exists('../../includes/config/tp.config.php')) {\n    require_once '../../includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\n// load phpCrypt\nif (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n    require_once '../includes/libraries/phpcrypt/phpCrypt.php';\n    require_once '../includes/config/settings.php';\n} else {\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/phpcrypt/phpCrypt.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n}\n\n// Prepare PHPCrypt class calls\nuse PHP_Crypt\\PHP_Crypt as PHP_Crypt;\n\n// Prepare Encryption class calls\nuse \\Defuse\\Crypto\\Crypto;\nuse \\Defuse\\Crypto\\Exception as Ex;\n\n//Generate N# of random bits for use as salt\n/**\n * @param integer $size\n */\nfunction getBits($size)\n{\n    $str = '';\n    $var_x = $size + 10;\n    for ($var_i = 0; $var_i < $var_x; $var_i++) {\n        $str .= base_convert(mt_rand(1, 36), 10, 36);\n    }\n    return substr($str, 0, $size);\n}\n\n//generate pbkdf2 compliant hash\nfunction strHashPbkdf2($var_p, $var_s, $var_c, $var_kl, $var_a = 'sha256', $var_st = 0)\n{\n    $var_kb = $var_st + $var_kl; // Key blocks to compute\n    $var_dk = ''; // Derived key\n\n    for ($block = 1; $block <= $var_kb; $block++) { // Create key\n        $var_ib = $var_h = hash_hmac($var_a, $var_s.pack('N', $block), $var_p, true); // Initial hash for this block\n        for ($var_i = 1; $var_i < $var_c; $var_i++) { // Perform block iterations\n            $var_ib ^= ($var_h = hash_hmac($var_a, $var_h, $var_p, true)); // XOR each iterate\n        }\n        $var_dk .= $var_ib; // Append iterated block\n    }\n    return substr($var_dk, $var_st, $var_kl); // Return derived key of correct length\n}\n\n/**\n * stringUtf8Decode()\n *\n * utf8_decode\n */\nfunction stringUtf8Decode($string)\n{\n    return str_replace(\" \", \"+\", utf8_decode($string));\n}\n\n/**\n * encryptOld()\n *\n * crypt a string\n * @param string $text\n */\nfunction encryptOld($text, $personalSalt = \"\")\n{\n    if (empty($personalSalt) === false) {\n        return trim(\n            base64_encode(\n                mcrypt_encrypt(\n                    MCRYPT_RIJNDAEL_256,\n                    $personalSalt,\n                    $text,\n                    MCRYPT_MODE_ECB,\n                    mcrypt_create_iv(\n                        mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                        MCRYPT_RAND\n                    )\n                )\n            )\n        );\n    }\n\n    // If $personalSalt is not empty\n    return trim(\n        base64_encode(\n            mcrypt_encrypt(\n                MCRYPT_RIJNDAEL_256,\n                SALT,\n                $text,\n                MCRYPT_MODE_ECB,\n                mcrypt_create_iv(\n                    mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                    MCRYPT_RAND\n                )\n            )\n        )\n    );\n}\n\n/**\n * decryptOld()\n *\n * decrypt a crypted string\n */\nfunction decryptOld($text, $personalSalt = \"\")\n{\n    if (!empty($personalSalt)) {\n        return trim(\n            mcrypt_decrypt(\n                MCRYPT_RIJNDAEL_256,\n                $personalSalt,\n                base64_decode($text),\n                MCRYPT_MODE_ECB,\n                mcrypt_create_iv(\n                    mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                    MCRYPT_RAND\n                )\n            )\n        );\n    }\n\n    // No personal SK\n    return trim(\n        mcrypt_decrypt(\n            MCRYPT_RIJNDAEL_256,\n            SALT,\n            base64_decode($text),\n            MCRYPT_MODE_ECB,\n            mcrypt_create_iv(\n                mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, MCRYPT_MODE_ECB),\n                MCRYPT_RAND\n            )\n        )\n    );\n}\n\n/**\n * encrypt()\n *\n * crypt a string\n * @param string $decrypted\n */\nfunction encrypt($decrypted, $personalSalt = \"\")\n{\n    global $SETTINGS;\n\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        require_once '../includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    } else {\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    }\n\n    if (!empty($personalSalt)) {\n        $staticSalt = $personalSalt;\n    } else {\n        $staticSalt = SALT;\n    }\n\n    //set our salt to a variable\n    // Get 64 random bits for the salt for pbkdf2\n    $pbkdf2Salt = getBits(64);\n    // generate a pbkdf2 key to use for the encryption.\n    $key = substr(pbkdf2('sha256', $staticSalt, $pbkdf2Salt, ITCOUNT, 16 + 32, true), 32, 16);\n    // Build $init_vect and $ivBase64.  We use a block size of 256 bits (AES compliant)\n    // and CTR mode.  (Note: ECB mode is inadequate as IV is not used.)\n    $init_vect = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_256, 'ctr'), MCRYPT_RAND);\n\n    //base64 trim\n    if (strlen($ivBase64 = rtrim(base64_encode($init_vect), '=')) != 43) {\n        return false;\n    }\n    // Encrypt $decrypted\n    $encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_256, $key, $decrypted, 'ctr', $init_vect);\n    // MAC the encrypted text\n    $mac = hash_hmac('sha256', $encrypted, $staticSalt);\n    // We're done!\n    return base64_encode($ivBase64.$encrypted.$mac.$pbkdf2Salt);\n}\n\n/**\n * decrypt()\n *\n * decrypt a crypted string\n */\nfunction decrypt($encrypted, $personalSalt = \"\")\n{\n    global $SETTINGS;\n\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        require_once '../includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    } else {\n        require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/PBKDF2/PasswordHash.php';\n    }\n\n    if (!empty($personalSalt)) {\n        $staticSalt = $personalSalt;\n    } else {\n        $staticSalt = SALT;\n    }\n    //base64 decode the entire payload\n    $encrypted = base64_decode($encrypted);\n    // get the salt\n    $pbkdf2Salt = substr($encrypted, -64);\n    //remove the salt from the string\n    $encrypted = substr($encrypted, 0, -64);\n    $key = substr(pbkdf2('sha256', $staticSalt, $pbkdf2Salt, ITCOUNT, 16 + 32, true), 32, 16);\n    // Retrieve $init_vect which is the first 22 characters plus ==, base64_decoded.\n    $init_vect = base64_decode(substr($encrypted, 0, 43).'==');\n    // Remove $init_vect from $encrypted.\n    $encrypted = substr($encrypted, 43);\n    // Retrieve $mac which is the last 64 characters of $encrypted.\n    $mac = substr($encrypted, -64);\n    // Remove the last 64 chars from encrypted (remove MAC)\n    $encrypted = substr($encrypted, 0, -64);\n    //verify the sha256hmac from the encrypted data before even trying to decrypt it\n    if (hash_hmac('sha256', $encrypted, $staticSalt) != $mac) {\n        return false;\n    }\n    // Decrypt the data.\n    $decrypted = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, $key, $encrypted, 'ctr', $init_vect), \"\\0\\4\");\n    // Yay!\n    return $decrypted;\n}\n\n\n/**\n * genHash()\n *\n * Generate a hash for user login\n * @param string $password\n */\nfunction bCrypt($password, $cost)\n{\n    $salt = sprintf('$2y$%02d$', $cost);\n    if (function_exists('openssl_random_pseudo_bytes')) {\n        $salt .= bin2hex(openssl_random_pseudo_bytes(11));\n    } else {\n        $chars = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for ($i = 0; $i < 22; $i++) {\n            $salt .= $chars[mt_rand(0, 63)];\n        }\n    }\n    return crypt($password, $salt);\n}\n\nfunction cryption_before_defuse($message, $saltkey, $init_vect, $type = null, $scope = \"public\")\n{\n    if (DEFUSE_ENCRYPTION === true) {\n        if ($scope === \"perso\") {\n            return defuse_crypto(\n                $message,\n                $saltkey,\n                $type\n            );\n        } else {\n            return defuse_crypto(\n                $message,\n                file_get_contents(SECUREPATH.\"/teampass-seckey.txt\"),\n                $type\n            );\n        }\n    } else {\n        return cryption_phpCrypt($message, $saltkey, $init_vect, $type);\n    }\n}\n\n/*\n * cryption() - Encrypt and decrypt string based upon phpCrypt library\n *\n * Using AES_128 and mode CBC\n *\n * $key and $init_vect have to be given in hex format\n */\nfunction cryption_phpCrypt($string, $key, $init_vect, $type)\n{\n    // manage key origin\n    if (null != SALT && $key != SALT) {\n        // check key (AES-128 requires a 16 bytes length key)\n        if (strlen($key) < 16) {\n            for ($inc = strlen($key) + 1; $inc <= 16; $inc++) {\n                $key .= chr(0);\n            }\n        } elseif (strlen($key) > 16) {\n            $key = substr($key, 16);\n        }\n    }\n\n    // load crypt\n    $crypt = new PHP_Crypt($key, PHP_Crypt::CIPHER_AES_128, PHP_Crypt::MODE_CBC);\n\n    if ($type == \"encrypt\") {\n        // generate IV and encrypt\n        $init_vect = $crypt->createIV();\n        $encrypt = $crypt->encrypt($string);\n        // return\n        return array(\n            \"string\" => bin2hex($encrypt),\n            \"iv\" => bin2hex($init_vect),\n            \"error\" => empty($encrypt) ? \"ERR_ENCRYPTION_NOT_CORRECT\" : \"\"\n        );\n    } elseif ($type == \"decrypt\") {\n        // case if IV is empty\n        if (empty($init_vect)) {\n                    return array(\n                'string' => \"\",\n                'error' => \"ERR_ENCRYPTION_NOT_CORRECT\"\n            );\n        }\n\n        // convert\n        try {\n            $string = testHex2Bin(trim($string));\n            $init_vect = testHex2Bin($init_vect);\n        } catch (Exception $e) {\n            return array(\n                'string' => \"\",\n                'error' => \"ERR_ENCRYPTION_NOT_CORRECT\"\n            );\n        }\n\n        // load IV\n        $crypt->IV($init_vect);\n        // decrypt\n        $decrypt = $crypt->decrypt($string);\n        // return\n        return array(\n            'string' => str_replace(chr(0), \"\", $decrypt),\n            'error' => \"\"\n        );\n    }\n}\n\nfunction testHex2Bin($val)\n{\n    if (!@hex2bin($val)) {\n        throw new Exception(\"ERROR\");\n    }\n    return hex2bin($val);\n}\n\n/**\n * @param string $ascii_key\n * @param string $type\n */\nfunction cryption($message, $ascii_key, $type) //defuse_crypto\n{\n    global $SETTINGS;\n\n    // load PhpEncryption library\n    if (!isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir'])) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = $SETTINGS['cpassman_dir'].'/includes/libraries/Encryption/Encryption/';\n    }\n\n    require_once $path.'Crypto.php';\n    require_once $path.'Encoding.php';\n    require_once $path.'DerivedKeys.php';\n    require_once $path.'Key.php';\n    require_once $path.'KeyOrPassword.php';\n    require_once $path.'File.php';\n    require_once $path.'RuntimeTests.php';\n    require_once $path.'KeyProtectedByPassword.php';\n    require_once $path.'Core.php';\n\n    // init\n    $err = '';\n    if (empty($ascii_key)) {\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n    }\n\n    // convert KEY\n    $key = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n\n    try {\n        if ($type === \"encrypt\") {\n            $text = \\Defuse\\Crypto\\Crypto::encrypt($message, $key);\n        } elseif ($type === \"decrypt\") {\n            $text = \\Defuse\\Crypto\\Crypto::decrypt($message, $key);\n        }\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = \"an attack! either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n    } catch (Defuse\\Crypto\\Exception\\BadFormatException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\CryptoException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    return array(\n        'string' => isset($text) ? $text : \"\",\n        'error' => $err\n    );\n}\n\nfunction defuse_generate_key()\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    $key = \\Defuse\\Crypto\\Key::createNewRandomKey();\n    $key = $key->saveToAsciiSafeString();\n    return $key;\n}\n\nfunction defuse_generate_personal_key($psk)\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::createRandomPasswordProtectedKey($psk);\n    $protected_key_encoded = $protected_key->saveToAsciiSafeString();\n\n    return $protected_key_encoded; // save this in user table\n}\n\n/**\n * @param string $psk\n */\nfunction defuse_validate_personal_key($psk, $protected_key_encoded)\n{\n    require_once '../includes/libraries/Encryption/Encryption/Crypto.php';\n    require_once '../includes/libraries/Encryption/Encryption/Encoding.php';\n    require_once '../includes/libraries/Encryption/Encryption/DerivedKeys.php';\n    require_once '../includes/libraries/Encryption/Encryption/Key.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyOrPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/File.php';\n    require_once '../includes/libraries/Encryption/Encryption/RuntimeTests.php';\n    require_once '../includes/libraries/Encryption/Encryption/KeyProtectedByPassword.php';\n    require_once '../includes/libraries/Encryption/Encryption/Core.php';\n\n    try {\n        $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::loadFromAsciiSafeString($protected_key_encoded);\n        $user_key = $protected_key->unlockKey($psk);\n        $user_key_encoded = $user_key->saveToAsciiSafeString();\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        return \"Error - Major issue as the encryption is broken.\";\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        return \"Error - The saltkey is not the correct one.\";\n    }\n\n    return $user_key_encoded; // store it in session once user has entered his psk\n}\n\n/**\n * Decrypt a defuse string if encrypted\n * @param  [type] $value Encrypted string\n * @return [type]        Decrypted string\n */\nfunction defuse_return_decrypted($value)\n{\n    if (substr($value, 0, 3) === \"def\") {\n        $value = cryption($value, \"\", \"decrypt\")['string'];\n    }\n    return $value;\n}\n\n/**\n * trimElement()\n *\n * trim a string depending on a specific string\n * @param string $element\n * @return string\n */\nfunction trimElement($chaine, $element)\n{\n    if (!empty($chaine)) {\n        $chaine = trim($chaine);\n        if (substr($chaine, 0, 1) == $element) {\n            $chaine = substr($chaine, 1);\n        }\n        if (substr($chaine, strlen($chaine) - 1, 1) == $element) {\n            $chaine = substr($chaine, 0, strlen($chaine) - 1);\n        }\n    }\n    return $chaine;\n}\n\n/**\n * cleanString()\n *\n * permits to suppress all \"special\" characters from string\n */\nfunction cleanString($string, $special = false)\n{\n    // Create temporary table for special characters escape\n    $tabSpecialChar = array();\n    for ($i = 0; $i <= 31; $i++) {\n        $tabSpecialChar[] = chr($i);\n    }\n    array_push($tabSpecialChar, \"<br />\");\n    if ($special == \"1\") {\n        $tabSpecialChar = array_merge($tabSpecialChar, array(\"</li>\", \"<ul>\", \"<ol>\"));\n    }\n\n    return str_replace($tabSpecialChar, \"\\n\", $string);\n}\n\nfunction db_error_handler($params)\n{\n    echo \"Error: \".$params['error'].\"<br>\\n\";\n    echo \"Query: \".$params['query'].\"<br>\\n\";\n    throw new Exception(\"Error - Query\", 1);\n}\n\n/**\n * [identifyUserRights description]\n * @param  string $groupesVisiblesUser  [description]\n * @param  string $groupesInterditsUser [description]\n * @param  string $isAdmin              [description]\n * @param  string $idFonctions          [description]\n * @return string                       [description]\n */\nfunction identifyUserRights($groupesVisiblesUser, $groupesInterditsUser, $isAdmin, $idFonctions)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    //load ClassLoader\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    //Connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    //Build tree\n    $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'].'/includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n    // Check if user is ADMINISTRATOR\n    if ($isAdmin == 1) {\n        $groupesVisibles = array();\n        $_SESSION['personal_folders'] = array();\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        $_SESSION['personal_visible_groups'] = array();\n        $_SESSION['read_only_folders'] = array();\n        $_SESSION['list_restricted_folders_for_items'] = array();\n        $_SESSION['list_folders_editable_by_role'] = array();\n        $_SESSION['list_folders_limited'] = array();\n        $_SESSION['groupes_visibles_list'] = \"\";\n        $_SESSION['list_folders_limited'] = \"\";\n        $rows = DB::query(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\", 0);\n        foreach ($rows as $record) {\n            array_push($groupesVisibles, $record['id']);\n        }\n        $_SESSION['groupes_visibles'] = $groupesVisibles;\n        $_SESSION['all_non_personal_folders'] = $groupesVisibles;\n        // Exclude all PF\n        $_SESSION['forbiden_pfs'] = array();\n        $where = new WhereClause('and'); // create a WHERE statement of pieces joined by ANDs\n        $where->add('personal_folder=%i', 1);\n        if (isset($SETTINGS['enable_pf_feature']) && $SETTINGS['enable_pf_feature'] == 1) {\n            $where->add('title=%s', $_SESSION['user_id']);\n            $where->negateLast();\n        }\n        // Get ID of personal folder\n        $persfld = DB::queryfirstrow(\n            \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\",\n            $_SESSION['user_id']\n        );\n        if (!empty($persfld['id'])) {\n            if (!in_array($persfld['id'], $_SESSION['groupes_visibles'])) {\n                array_push($_SESSION['groupes_visibles'], $persfld['id']);\n                array_push($_SESSION['personal_visible_groups'], $persfld['id']);\n                // get all descendants\n                $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n                $tree->rebuild();\n                $tst = $tree->getDescendants($persfld['id']);\n                foreach ($tst as $t) {\n                    array_push($_SESSION['groupes_visibles'], $t->id);\n                    array_push($_SESSION['personal_visible_groups'], $t->id);\n                }\n            }\n        }\n\n        // get complete list of ROLES\n        $tmp = explode(\";\", $idFonctions);\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"roles_title\").\"\n            ORDER BY title ASC\"\n        );\n        foreach ($rows as $record) {\n            if (!empty($record['id']) && !in_array($record['id'], $tmp)) {\n                array_push($tmp, $record['id']);\n            }\n        }\n        $_SESSION['fonction_id'] = implode(\";\", $tmp);\n\n        $_SESSION['groupes_visibles_list'] = implode(',', $_SESSION['groupes_visibles']);\n        $_SESSION['is_admin'] = $isAdmin;\n        // Check if admin has created Folders and Roles\n        DB::query(\"SELECT * FROM \".prefix_table(\"nested_tree\").\"\");\n        $_SESSION['nb_folders'] = DB::count();\n        DB::query(\"SELECT * FROM \".prefix_table(\"roles_title\"));\n        $_SESSION['nb_roles'] = DB::count();\n    } else {\n        // init\n        $_SESSION['groupes_visibles'] = array();\n        $_SESSION['personal_folders'] = array();\n        $_SESSION['groupes_interdits'] = array();\n        $_SESSION['personal_visible_groups'] = array();\n        $_SESSION['read_only_folders'] = array();\n        $_SESSION['fonction_id'] = $idFonctions;\n        $groupesInterdits = array();\n        if (!is_array($groupesInterditsUser)) {\n            $groupesInterditsUser = explode(';', trimElement($groupesInterditsUser, \";\"));\n        }\n        if (!empty($groupesInterditsUser) && count($groupesInterditsUser) > 0) {\n            $groupesInterdits = $groupesInterditsUser;\n        }\n        $_SESSION['is_admin'] = $isAdmin;\n        $fonctionsAssociees = explode(';', trimElement($idFonctions, \";\"));\n\n        $listAllowedFolders = $listFoldersLimited = $listFoldersEditableByRole = $listRestrictedFoldersForItems = $listReadOnlyFolders = array();\n\n        // rechercher tous les groupes visibles en fonction des roles de l'utilisateur\n        foreach ($fonctionsAssociees as $roleId) {\n            if (!empty($roleId)) {\n                // Get allowed folders for each Role\n                $rows = DB::query(\"SELECT folder_id FROM \".prefix_table(\"roles_values\").\" WHERE role_id=%i\", $roleId);\n\n                if (DB::count() > 0) {\n                    $tmp = DB::queryfirstrow(\"SELECT allow_pw_change FROM \".prefix_table(\"roles_title\").\" WHERE id = %i\", $roleId);\n                    foreach ($rows as $record) {\n                        if (isset($record['folder_id']) && !in_array($record['folder_id'], $listAllowedFolders)) {\n                            array_push($listAllowedFolders, $record['folder_id']);\n                        }\n                        // Check if this group is allowed to modify any pw in allowed folders\n                        if ($tmp['allow_pw_change'] == 1 && !in_array($record['folder_id'], $listFoldersEditableByRole)) {\n                            array_push($listFoldersEditableByRole, $record['folder_id']);\n                        }\n                    }\n                    // Check for the users roles if some specific rights exist on items\n                    $rows = DB::query(\n                        \"SELECT i.id_tree, r.item_id\n                        FROM \".prefix_table(\"items\").\" as i\n                        INNER JOIN \".prefix_table(\"restriction_to_roles\").\" as r ON (r.item_id=i.id)\n                        WHERE r.role_id=%i\n                        ORDER BY i.id_tree ASC\",\n                        $roleId\n                    );\n                    $inc = 0;\n                    foreach ($rows as $record) {\n                        if (isset($record['id_tree'])) {\n                            $listFoldersLimited[$record['id_tree']][$inc] = $record['item_id'];\n                            $inc++;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Does this user is allowed to see other items\n        $inc = 0;\n        $rows = DB::query(\n            \"SELECT id, id_tree FROM \".prefix_table(\"items\").\"\n            WHERE restricted_to LIKE %ss AND inactif=%s\",\n            $_SESSION['user_id'].';',\n            '0'\n        );\n        foreach ($rows as $record) {\n            $listRestrictedFoldersForItems[$record['id_tree']][$inc] = $record['id'];\n            $inc++;\n        }\n        // => Build final lists\n        // Clean arrays\n        $listAllowedFolders = array_unique($listAllowedFolders);\n        $groupesVisiblesUser = explode(';', trimElement($groupesVisiblesUser, \";\"));\n        // Add user allowed folders\n        $allowedFoldersTmp = array_unique(\n            array_merge($listAllowedFolders, $groupesVisiblesUser)\n        );\n        // Exclude from allowed folders all the specific user forbidden folders\n        $allowedFolders = array();\n        foreach ($allowedFoldersTmp as $ident) {\n            if (!in_array($ident, $groupesInterditsUser) && !empty($ident)) {\n                array_push($allowedFolders, $ident);\n            }\n        }\n\n        // Clean array\n        $listAllowedFolders = array_filter(array_unique($allowedFolders));\n\n        // Exclude all PF\n        $_SESSION['forbiden_pfs'] = array();\n\n        $where = new WhereClause('and');\n        $where->add('personal_folder=%i', 1);\n        if (isset($SETTINGS['enable_pf_feature']) &&\n            $SETTINGS['enable_pf_feature'] == 1 &&\n            isset($_SESSION['personal_folder']) &&\n            $_SESSION['personal_folder'] == 1\n        ) {\n            $where->add('title=%s', $_SESSION['user_id']);\n            $where->negateLast();\n        }\n\n        $persoFlds = DB::query(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE %l\", $where);\n        foreach ($persoFlds as $persoFldId) {\n            array_push($_SESSION['forbiden_pfs'], $persoFldId['id']);\n        }\n        // Get IDs of personal folders\n        if (isset($SETTINGS['enable_pf_feature']) &&\n            $SETTINGS['enable_pf_feature'] == 1 &&\n            isset($_SESSION['personal_folder']) &&\n            $_SESSION['personal_folder'] == 1\n        ) {\n            $persoFld = DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE title = %s\", $_SESSION['user_id']);\n            if (!empty($persoFld['id'])) {\n                if (!in_array($persoFld['id'], $listAllowedFolders)) {\n                    array_push($_SESSION['personal_folders'], $persoFld['id']);\n                    // get all descendants\n                    $ids = $tree->getDescendants($persoFld['id'], true, false);\n                    foreach ($ids as $ident) {\n                        array_push($listAllowedFolders, $ident->id);\n                        array_push($_SESSION['personal_visible_groups'], $ident->id);\n                        array_push($_SESSION['personal_folders'], $ident->id);\n                    }\n                }\n            }\n            // get list of readonly folders when pf is disabled.\n            // rule - if one folder is set as W or N in one of the Role, then User has access as W\n            foreach ($listAllowedFolders as $folderId) {\n                if (!in_array($folderId, array_unique(array_merge($listReadOnlyFolders, $_SESSION['personal_folders'])))) {   //\n                    DB::query(\n                        \"SELECT *\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE folder_id = %i AND role_id IN %li AND type IN %ls\",\n                        $folderId,\n                        $fonctionsAssociees,\n                        array(\"W\", \"ND\", \"NE\", \"NDNE\")\n                    );\n                    if (DB::count() == 0 && in_array($folderId, $groupesVisiblesUser) === false) {\n                        array_push($listReadOnlyFolders, $folderId);\n                    }\n                }\n            }\n        } else {\n            // get list of readonly folders when pf is disabled.\n            // rule - if one folder is set as W in one of the Role, then User has access as W\n            foreach ($listAllowedFolders as $folderId) {\n                if (!in_array($folderId, $listReadOnlyFolders)) {\n                    DB::query(\n                        \"SELECT *\n                        FROM \".prefix_table(\"roles_values\").\"\n                        WHERE folder_id = %i AND role_id IN %li AND type IN %ls\",\n                        $folderId,\n                        $fonctionsAssociees,\n                        array(\"W\", \"ND\", \"NE\", \"NDNE\")\n                    );\n                    if (DB::count() == 0 && !in_array($folderId, $groupesVisiblesUser)) {\n                        array_push($listReadOnlyFolders, $folderId);\n                    }\n                }\n            }\n        }\n\n        // check if change proposals on User's items\n        if (isset($SETTINGS['enable_suggestion']) && $SETTINGS['enable_suggestion'] == 1) {\n            DB::query(\n                \"SELECT *\n                FROM \".prefix_table(\"items_change\").\" AS c\n                LEFT JOIN \".prefix_table(\"log_items\").\" AS i ON (c.item_id = i.id_item)\n                WHERE i.action = %s AND i.id_user = %i\",\n                \"at_creation\",\n                $_SESSION['user_id']\n            );\n            $_SESSION['nb_item_change_proposals'] = DB::count();\n        } else {\n            $_SESSION['nb_item_change_proposals'] = 0;\n        }\n\n        $_SESSION['all_non_personal_folders'] = $listAllowedFolders;\n        $_SESSION['groupes_visibles'] = $listAllowedFolders;\n        $_SESSION['groupes_visibles_list'] = implode(',', $listAllowedFolders);\n        $_SESSION['personal_visible_groups_list'] = implode(',', $_SESSION['personal_visible_groups']);\n        $_SESSION['read_only_folders'] = $listReadOnlyFolders;\n        $_SESSION['no_access_folders'] = $groupesInterdits;\n\n        $_SESSION['list_folders_limited'] = $listFoldersLimited;\n        $_SESSION['list_folders_editable_by_role'] = $listFoldersEditableByRole;\n        $_SESSION['list_restricted_folders_for_items'] = $listRestrictedFoldersForItems;\n        // Folders and Roles numbers\n        DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"nested_tree\").\"\");\n        $_SESSION['nb_folders'] = DB::count();\n        DB::queryfirstrow(\"SELECT id FROM \".prefix_table(\"roles_title\"));\n        $_SESSION['nb_roles'] = DB::count();\n    }\n\n    // update user's timestamp\n    DB::update(\n        prefix_table('users'),\n        array(\n            'timestamp' => time()\n        ),\n        \"id=%i\",\n        $_SESSION['user_id']\n    );\n}\n\n/**\n * updateCacheTable()\n *\n * Update the CACHE table\n * @param string $action\n */\nfunction updateCacheTable($action, $ident = \"\")\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n\n    //Connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefix_table(\"nested_tree\"), 'id', 'parent_id', 'title');\n\n    // Rebuild full cache table\n    if ($action === \"reload\") {\n        // truncate table\n        DB::query(\"TRUNCATE TABLE \".prefix_table(\"cache\"));\n\n        // reload date\n        $rows = DB::query(\n            \"SELECT *\n            FROM \".prefix_table('items').\" as i\n            INNER JOIN \".prefix_table('log_items').\" as l ON (l.id_item = i.id)\n            AND l.action = %s\n            AND i.inactif = %i\",\n            'at_creation',\n            0\n        );\n        foreach ($rows as $record) {\n            // Get all TAGS\n            $tags = \"\";\n            $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id=%i\", $record['id']);\n            foreach ($itemTags as $itemTag) {\n                if (!empty($itemTag['tag'])) {\n                    $tags .= $itemTag['tag'].\" \";\n                }\n            }\n            // Get renewal period\n            $resNT = DB::queryfirstrow(\"SELECT renewal_period FROM \".prefix_table('nested_tree').\" WHERE id=%i\", $record['id_tree']);\n\n            // form id_tree to full foldername\n            $folder = \"\";\n            $arbo = $tree->getPath($record['id_tree'], true);\n            foreach ($arbo as $elem) {\n                if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                    $elem->title = $_SESSION['login'];\n                }\n                if (empty($folder)) {\n                    $folder = stripslashes($elem->title);\n                } else {\n                    $folder .= \" \u00bb \".stripslashes($elem->title);\n                }\n            }\n            // store data\n            DB::insert(\n                prefix_table('cache'),\n                array(\n                    'id' => $record['id'],\n                    'label' => $record['label'],\n                    'description' => isset($record['description']) ? $record['description'] : \"\",\n                    'url' => (isset($record['url']) && !empty($record['url'])) ? $record['url'] : \"0\",\n                    'tags' => $tags,\n                    'id_tree' => $record['id_tree'],\n                    'perso' => $record['perso'],\n                    'restricted_to' => (isset($record['restricted_to']) && !empty($record['restricted_to'])) ? $record['restricted_to'] : \"0\",\n                    'login' => isset($record['login']) ? $record['login'] : \"\",\n                    'folder' => $folder,\n                    'author' => $record['id_user'],\n                    'renewal_period' => isset($resNT['renewal_period']) ? $resNT['renewal_period'] : \"0\",\n                    'timestamp' => $record['date']\n                    )\n            );\n        }\n        // UPDATE an item\n    } elseif ($action === \"update_value\") {\n        // get new value from db\n        $data = DB::queryfirstrow(\n            \"SELECT label, description, id_tree, perso, restricted_to, login, url\n            FROM \".prefix_table('items').\"\n            WHERE id=%i\",\n            $ident\n        );\n        // Get all TAGS\n        $tags = \"\";\n        $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id=%i\", $ident);\n        foreach ($itemTags as $itemTag) {\n            if (!empty($itemTag['tag'])) {\n                $tags .= $itemTag['tag'].\" \";\n            }\n        }\n        // form id_tree to full foldername\n        $folder = \"\";\n        $arbo = $tree->getPath($data['id_tree'], true);\n        foreach ($arbo as $elem) {\n            if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                $elem->title = $_SESSION['login'];\n            }\n            if (empty($folder)) {\n                $folder = stripslashes($elem->title);\n            } else {\n                $folder .= \" \u00bb \".stripslashes($elem->title);\n            }\n        }\n        // finaly update\n        DB::update(\n            prefix_table('cache'),\n            array(\n                'label' => $data['label'],\n                'description' => $data['description'],\n                'tags' => $tags,\n                'url' => (isset($data['url']) && !empty($data['url'])) ? $data['url'] : \"0\",\n                'id_tree' => $data['id_tree'],\n                'perso' => $data['perso'],\n                'restricted_to' => (isset($data['restricted_to']) && !empty($data['restricted_to'])) ? $data['restricted_to'] : \"0\",\n                'login' => isset($data['login']) ? $data['login'] : \"\",\n                'folder' => $folder,\n                'author' => $_SESSION['user_id'],\n                ),\n            \"id = %i\",\n            $ident\n        );\n        // ADD an item\n    } elseif ($action === \"add_value\") {\n        // get new value from db\n        $data = DB::queryFirstRow(\n            \"SELECT i.label, i.description, i.id_tree as id_tree, i.perso, i.restricted_to, i.id, i.login, i.url, l.date\n            FROM \".prefix_table('items').\" as i\n            INNER JOIN \".prefix_table('log_items').\" as l ON (l.id_item = i.id)\n            WHERE i.id = %i\n            AND l.action = %s\",\n            $ident,\n            'at_creation'\n        );\n        // Get all TAGS\n        $tags = \"\";\n        $itemTags = DB::query(\"SELECT tag FROM \".prefix_table('tags').\" WHERE item_id = %i\", $ident);\n        foreach ($itemTags as $itemTag) {\n            if (!empty($itemTag['tag'])) {\n                $tags .= $itemTag['tag'].\" \";\n            }\n        }\n        // form id_tree to full foldername\n        $folder = \"\";\n        $arbo = $tree->getPath($data['id_tree'], true);\n        foreach ($arbo as $elem) {\n            if ($elem->title == $_SESSION['user_id'] && $elem->nlevel == 1) {\n                $elem->title = $_SESSION['login'];\n            }\n            if (empty($folder)) {\n                $folder = stripslashes($elem->title);\n            } else {\n                $folder .= \" \u00bb \".stripslashes($elem->title);\n            }\n        }\n        // finaly update\n        DB::insert(\n            prefix_table('cache'),\n            array(\n                'id' => $data['id'],\n                'label' => $data['label'],\n                'description' => $data['description'],\n                'tags' => (isset($tags) && !empty($tags)) ? $tags : \"None\",\n                'url' => (isset($data['url']) && !empty($data['url'])) ? $data['url'] : \"0\",\n                'id_tree' => $data['id_tree'],\n                'perso' => (isset($data['perso']) && !empty($data['perso']) && $data['perso'] !== \"None\") ? $data['perso'] : \"0\",\n                'restricted_to' => (isset($data['restricted_to']) && !empty($data['restricted_to'])) ? $data['restricted_to'] : \"None\",\n                'login' => isset($data['login']) ? $data['login'] : \"\",\n                'folder' => $folder,\n                'author' => $_SESSION['user_id'],\n                'timestamp' => $data['date']\n            )\n        );\n\n        // DELETE an item\n    } elseif ($action === \"delete_value\") {\n        DB::delete(prefix_table('cache'), \"id = %i\", $ident);\n    }\n}\n\n/*\n*\n*/\nfunction getStatisticsData()\n{\n    global $SETTINGS;\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n        0\n    );\n    $counter_folders = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"nested_tree\").\" WHERE personal_folder = %i\",\n        1\n    );\n    $counter_folders_perso = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\",\n        0\n    );\n    $counter_items = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"items\").\" WHERE perso = %i\",\n        1\n    );\n    $counter_items_perso = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\"\"\n    );\n    $counter_users = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE admin = %i\",\n        1\n    );\n    $admins = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE gestionnaire = %i\",\n        1\n    );\n    $managers = DB::count();\n\n    DB::query(\n        \"SELECT id FROM \".prefix_table(\"users\").\" WHERE read_only = %i\",\n        1\n    );\n    $readOnly = DB::count();\n\n    // list the languages\n    $usedLang = [];\n    $tp_languages = DB::query(\n        \"SELECT name FROM \".prefix_table(\"languages\")\n    );\n    foreach ($tp_languages as $tp_language) {\n        DB::query(\n            \"SELECT * FROM \".prefix_table(\"users\").\" WHERE user_language = %s\",\n            $tp_language['name']\n        );\n        $usedLang[$tp_language['name']] = round((DB::count() * 100 / $counter_users), 0);\n    }\n\n    // get list of ips\n    $usedIp = [];\n    $tp_ips = DB::query(\n        \"SELECT user_ip FROM \".prefix_table(\"users\")\n    );\n    foreach ($tp_ips as $ip) {\n        if (array_key_exists($ip['user_ip'], $usedIp)) {\n            $usedIp[$ip['user_ip']] = $usedIp[$ip['user_ip']] + 1;\n        } elseif (!empty($ip['user_ip']) && $ip['user_ip'] !== \"none\") {\n            $usedIp[$ip['user_ip']] = 1;\n        }\n    }\n\n    return array(\n        \"error\" => \"\",\n        \"stat_phpversion\" => phpversion(),\n        \"stat_folders\" => $counter_folders,\n        \"stat_folders_shared\" => intval($counter_folders) - intval($counter_folders_perso),\n        \"stat_items\" => $counter_items,\n        \"stat_items_shared\" => intval($counter_items) - intval($counter_items_perso),\n        \"stat_users\" => $counter_users,\n        \"stat_admins\" => $admins,\n        \"stat_managers\" => $managers,\n        \"stat_ro\" => $readOnly,\n        \"stat_kb\" => $SETTINGS['enable_kb'],\n        \"stat_pf\" => $SETTINGS['enable_pf_feature'],\n        \"stat_fav\" => $SETTINGS['enable_favourites'],\n        \"stat_teampassversion\" => $SETTINGS['cpassman_version'],\n        \"stat_ldap\" => $SETTINGS['ldap_mode'],\n        \"stat_agses\" => $SETTINGS['agses_authentication_enabled'],\n        \"stat_duo\" => $SETTINGS['duo'],\n        \"stat_suggestion\" => $SETTINGS['enable_suggestion'],\n        \"stat_api\" => $SETTINGS['api'],\n        \"stat_customfields\" => $SETTINGS['item_extra_fields'],\n        \"stat_syslog\" => $SETTINGS['syslog_enable'],\n        \"stat_2fa\" => $SETTINGS['google_authentication'],\n        \"stat_stricthttps\" => $SETTINGS['enable_sts'],\n        \"stat_mysqlversion\" => DB::serverVersion(),\n        \"stat_languages\" => $usedLang,\n        \"stat_country\" => $usedIp\n    );\n}\n\n/**\n * sendEmail()\n *\n * @return\n */\nfunction sendEmail($subject, $textMail, $email, $textMailAlt = \"\")\n{\n    global $LANG;\n    global $SETTINGS;\n\n    // CAse where email not defined\n    if ($email === \"none\") {\n        return '\"error\":\"\" , \"message\":\"'.$LANG['forgot_my_pw_email_sent'].'\"';\n    }\n\n    include $SETTINGS['cpassman_dir'].'/includes/config/settings.php';\n    //load library\n    $user_language = isset($_SESSION['user_language']) ? $_SESSION['user_language'] : \"english\";\n    require_once $SETTINGS['cpassman_dir'].'/includes/language/'.$user_language.'.php';\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Email/Phpmailer/PHPMailerAutoload.php';\n\n    // load PHPMailer\n    $mail = new PHPMailer();\n\n    // send to user\n    $mail->setLanguage(\"en\", \"../includes/libraries/Email/Phpmailer/language/\");\n    $mail->SMTPDebug = 0; //value 1 can be used to debug\n    $mail->Port = $SETTINGS['email_port']; //COULD BE USED\n    $mail->CharSet = \"utf-8\";\n    if ($SETTINGS['email_security'] === \"tls\" || $SETTINGS['email_security'] === \"ssl\") {\n        $mail->SMTPSecure = $SETTINGS['email_security'];\n    }\n    $mail->isSmtp(); // send via SMTP\n    $mail->Host = $SETTINGS['email_smtp_server']; // SMTP servers\n    $mail->SMTPAuth = $SETTINGS['email_smtp_auth'] == '1' ? true : false; // turn on SMTP authentication\n    $mail->Username = $SETTINGS['email_auth_username']; // SMTP username\n    $mail->Password = $SETTINGS['email_auth_pwd']; // SMTP password\n    $mail->From = $SETTINGS['email_from'];\n    $mail->FromName = $SETTINGS['email_from_name'];\n    $mail->addAddress($email); //Destinataire\n    $mail->WordWrap = 80; // set word wrap\n    $mail->isHtml(true); // send as HTML\n    $mail->Subject = $subject;\n    $mail->Body = $textMail;\n    $mail->AltBody = $textMailAlt;\n    // send email\n    if (!$mail->send()) {\n        return '\"error\":\"error_mail_not_send\" , \"message\":\"'.str_replace(array(\"\\n\", \"\\t\", \"\\r\"), '', $mail->ErrorInfo).'\"';\n    } else {\n        return '\"error\":\"\" , \"message\":\"'.$LANG['forgot_my_pw_email_sent'].'\"';\n    }\n}\n\n/**\n * generateKey()\n *\n * @return\n */\nfunction generateKey()\n{\n    return substr(md5(rand().rand()), 0, 15);\n}\n\n/**\n * dateToStamp()\n *\n * @return\n */\nfunction dateToStamp($date)\n{\n    global $SETTINGS;\n\n    $date = date_parse_from_format($SETTINGS['date_format'], $date);\n    if ($date['warning_count'] == 0 && $date['error_count'] == 0) {\n        return mktime(23, 59, 59, $date['month'], $date['day'], $date['year']);\n    } else {\n        return false;\n    }\n}\n\nfunction isDate($date)\n{\n    return (strtotime($date) !== false);\n}\n\n/**\n * isUTF8()\n *\n * @return integer is the string in UTF8 format.\n */\n\nfunction isUTF8($string)\n{\n    if (is_array($string) === true) {\n        $string = $string['string'];\n    }\n    return preg_match(\n        '%^(?:\n        [\\x09\\x0A\\x0D\\x20-\\x7E] # ASCII\n        | [\\xC2-\\xDF][\\x80-\\xBF] # non-overlong 2-byte\n        | \\xE0[\\xA0-\\xBF][\\x80-\\xBF] # excluding overlongs\n        | [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2} # straight 3-byte\n        | \\xED[\\x80-\\x9F][\\x80-\\xBF] # excluding surrogates\n        | \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # planes 1-3\n        | [\\xF1-\\xF3][\\x80-\\xBF]{3} # planes 4-15\n        | \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2} # plane 16\n        )*$%xs',\n        $string\n    );\n}\n\n/*\n* FUNCTION\n* permits to prepare data to be exchanged\n*/\n/**\n * @param string $type\n */\nfunction prepareExchangedData($data, $type)\n{\n    global $SETTINGS;\n\n    //load ClassLoader\n    require_once $SETTINGS['cpassman_dir'].'/sources/SplClassLoader.php';\n    //Load AES\n    $aes = new SplClassLoader('Encryption\\Crypt', '../includes/libraries');\n    $aes->register();\n\n    if ($type == \"encode\") {\n        if (isset($SETTINGS['encryptClientServer'])\n            && $SETTINGS['encryptClientServer'] === \"0\"\n        ) {\n            return json_encode(\n                $data,\n                JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n            );\n        } else {\n            return Encryption\\Crypt\\aesctr::encrypt(\n                json_encode(\n                    $data,\n                    JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n                ),\n                $_SESSION['key'],\n                256\n            );\n        }\n    } elseif ($type == \"decode\") {\n        if (isset($SETTINGS['encryptClientServer'])\n            && $SETTINGS['encryptClientServer'] === \"0\"\n        ) {\n            return json_decode(\n                $data,\n                true\n            );\n        } else {\n            return json_decode(\n                Encryption\\Crypt\\aesctr::decrypt(\n                    $data,\n                    $_SESSION['key'],\n                    256\n                ),\n                true\n            );\n        }\n    }\n}\n\nfunction make_thumb($src, $dest, $desired_width)\n{\n    /* read the source image */\n    $source_image = imagecreatefrompng($src);\n    $width = imagesx($source_image);\n    $height = imagesy($source_image);\n\n    /* find the \"desired height\" of this thumbnail, relative to the desired width  */\n    $desired_height = floor($height * ($desired_width / $width));\n\n    /* create a new, \"virtual\" image */\n    $virtual_image = imagecreatetruecolor($desired_width, $desired_height);\n\n    /* copy source image at a resized size */\n    imagecopyresampled($virtual_image, $source_image, 0, 0, 0, 0, $desired_width, $desired_height, $width, $height);\n\n    /* create the physical thumbnail image to its destination */\n    imagejpeg($virtual_image, $dest);\n}\n\n/*\n** check table prefix in SQL query\n*/\n/**\n * @param string $table\n */\nfunction prefix_table($table)\n{\n    global $pre;\n    $safeTable = htmlspecialchars($pre.$table);\n    if (!empty($safeTable)) {\n        // sanitize string\n        return $safeTable;\n    } else {\n        // stop error no table\n        return \"table_not_exists\";\n    }\n}\n\n/*\n * Creates a KEY using PasswordLib\n */\nfunction GenerateCryptKey($size = \"\", $secure = false, $numerals = false, $capitalize = false, $ambiguous = false, $symbols = false)\n{\n    // load library\n    $pwgen = new SplClassLoader('Encryption\\PwGen', '../includes/libraries');\n    $pwgen->register();\n    $pwgen = new Encryption\\PwGen\\pwgen();\n\n    // init\n    if (!empty($size)) {\n        $pwgen->setLength($size);\n    }\n    if (!empty($secure)) {\n        $pwgen->setSecure($secure);\n    }\n    if (!empty($numerals)) {\n        $pwgen->setNumerals($numerals);\n    }\n    if (!empty($capitalize)) {\n        $pwgen->setCapitalize($capitalize);\n    }\n    if (!empty($ambiguous)) {\n        $pwgen->setAmbiguous($ambiguous);\n    }\n    if (!empty($symbols)) {\n        $pwgen->setSymbols($symbols);\n    }\n\n    // generate and send back\n    return $pwgen->generate();\n}\n\n/*\n* Send sysLOG message\n* @param string $message\n* @param string $host\n*/\nfunction send_syslog($message, $host, $port, $component = \"teampass\")\n{\n    $sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n    $syslog_message = \"<123>\".date('M d H:i:s ').$component.\": \".$message;\n    socket_sendto($sock, $syslog_message, strlen($syslog_message), 0, $host, $port);\n    socket_close($sock);\n}\n\n\n\n/**\n * logEvents()\n *\n * permits to log events into DB\n * @param string $type\n * @param string $label\n * @param string $field_1\n */\nfunction logEvents($type, $label, $who, $login = \"\", $field_1 = null)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    if (empty($who)) {\n        $who = get_client_ip_server();\n    }\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    DB::insert(\n        prefix_table(\"log_system\"),\n        array(\n            'type' => $type,\n            'date' => time(),\n            'label' => $label,\n            'qui' => $who,\n            'field_1' => $field_1 === null ? \"\" : $field_1\n        )\n    );\n    if (isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1) {\n        if ($type == \"user_mngt\") {\n            send_syslog(\n                \"The User \".$login.\" performed the action of \".$label.\" to the user \".$field_1.\" - \".$type,\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                \"teampass\"\n            );\n        } else {\n            send_syslog(\n                \"The User \".$login.\" performed the action of \".$label.\" - \".$type,\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                \"teampass\"\n            );\n        }\n    }\n}\n\n/**\n * @param string $item\n * @param string $action\n */\nfunction logItems($ident, $item, $id_user, $action, $login = \"\", $raison = null, $raison_iv = null, $encryption_type = \"\")\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n    DB::insert(\n        prefix_table(\"log_items\"),\n        array(\n            'id_item' => $ident,\n            'date' => time(),\n            'id_user' => $id_user,\n            'action' => $action,\n            'raison' => $raison,\n            'raison_iv' => $raison_iv,\n            'encryption_type' => $encryption_type\n        )\n    );\n    if (isset($SETTINGS['syslog_enable']) && $SETTINGS['syslog_enable'] == 1) {\n        send_syslog(\n            \"The Item \".$item.\" was \".$action.\" by \".$login.\" \".$raison,\n            $SETTINGS['syslog_host'],\n            $SETTINGS['syslog_port'],\n            \"teampass\"\n        );\n    }\n}\n\n/*\n* Function to get the client ip address\n */\nfunction get_client_ip_server()\n{\n    if (getenv('HTTP_CLIENT_IP')) {\n            $ipaddress = getenv('HTTP_CLIENT_IP');\n    } elseif (getenv('HTTP_X_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED_FOR');\n    } elseif (getenv('HTTP_X_FORWARDED')) {\n            $ipaddress = getenv('HTTP_X_FORWARDED');\n    } elseif (getenv('HTTP_FORWARDED_FOR')) {\n            $ipaddress = getenv('HTTP_FORWARDED_FOR');\n    } elseif (getenv('HTTP_FORWARDED')) {\n            $ipaddress = getenv('HTTP_FORWARDED');\n    } elseif (getenv('REMOTE_ADDR')) {\n            $ipaddress = getenv('REMOTE_ADDR');\n    } else {\n            $ipaddress = 'UNKNOWN';\n    }\n\n    return $ipaddress;\n}\n\n/**\n * Escape all HTML, JavaScript, and CSS\n *\n * @param string $input The input string\n * @param string $encoding Which character encoding are we using?\n * @return string\n */\nfunction noHTML($input, $encoding = 'UTF-8')\n{\n    return htmlspecialchars($input, ENT_QUOTES | ENT_XHTML, $encoding, false);\n}\n\n/**\n * handleConfigFile()\n *\n * permits to handle the Teampass config file\n * $action accepts \"rebuild\" and \"update\"\n */\nfunction handleConfigFile($action, $field = null, $value = null)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    $tp_config_file = \"../includes/config/tp.config.php\";\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    // include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    if (!file_exists($tp_config_file) || $action == \"rebuild\") {\n        // perform a copy\n        if (file_exists($tp_config_file)) {\n            if (!copy($tp_config_file, $tp_config_file.'.'.date(\"Y_m_d_His\", time()))) {\n                return \"ERROR: Could not copy file '\".$tp_config_file.\"'\";\n            }\n        }\n\n        // regenerate\n        $data = array();\n        $data[0] = \"<?php\\n\";\n        $data[1] = \"global \\$SETTINGS;\\n\";\n        $data[2] = \"\\$SETTINGS = array (\\n\";\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type=%s\",\n            \"admin\"\n        );\n        foreach ($rows as $record) {\n            array_push($data, \"    '\".$record['intitule'].\"' => '\".$record['valeur'].\"',\\n\");\n        }\n        array_push($data, \");\");\n        $data = array_unique($data);\n    } elseif ($action == \"update\" && !empty($field)) {\n        $data = file($tp_config_file);\n        $inc = 0;\n        $bFound = false;\n        foreach ($data as $line) {\n            if (stristr($line, \");\")) {\n                break;\n            }\n\n            //\n            if (stristr($line, \"'\".$field.\"' => '\")) {\n                $data[$inc] = \"    '\".$field.\"' => '\".$antiXss->xss_clean($value).\"',\\n\";\n                $bFound = true;\n                break;\n            }\n            $inc++;\n        }\n        if ($bFound === false) {\n            $data[($inc - 1)] = \"    '\".$field.\"' => '\".$antiXss->xss_clean($value).\"',\\n\";\n        }\n    }\n\n    // update file\n    file_put_contents($tp_config_file, implode('', isset($data) ? $data : array()));\n\n    return true;\n}\n\n/*\n** Permits to replace &#92; to permit correct display\n*/\n/**\n * @param string $input\n */\nfunction handleBackslash($input)\n{\n    return str_replace(\"&amp;#92;\", \"&#92;\", $input);\n}\n\n/*\n** Permits to loas settings\n*/\nfunction loadSettings()\n{\n    global $SETTINGS;\n\n    /* LOAD CPASSMAN SETTINGS */\n    if (!isset($SETTINGS['loaded']) || $SETTINGS['loaded'] != 1) {\n        $SETTINGS['duplicate_folder'] = 0; //by default, this is set to 0;\n        $SETTINGS['duplicate_item'] = 0; //by default, this is set to 0;\n        $SETTINGS['number_of_used_pw'] = 5; //by default, this value is set to 5;\n        $settings = array();\n\n        $rows = DB::query(\n            \"SELECT * FROM \".prefix_table(\"misc\").\" WHERE type=%s_type OR type=%s_type2\",\n            array(\n                'type' => \"admin\",\n                'type2' => \"settings\"\n            )\n        );\n        foreach ($rows as $record) {\n            if ($record['type'] == 'admin') {\n                $SETTINGS[$record['intitule']] = $record['valeur'];\n            } else {\n                $settings[$record['intitule']] = $record['valeur'];\n            }\n        }\n        $SETTINGS['loaded'] = 1;\n        $SETTINGS['default_session_expiration_time'] = 5;\n    }\n}\n\n/*\n** check if folder has custom fields.\n** Ensure that target one also has same custom fields\n*/\nfunction checkCFconsistency($source_id, $target_id)\n{\n    $source_cf = array();\n    $rows = DB::QUERY(\n        \"SELECT id_category\n        FROM \".prefix_table(\"categories_folders\").\"\n        WHERE id_folder = %i\",\n        $source_id\n    );\n    foreach ($rows as $record) {\n        array_push($source_cf, $record['id_category']);\n    }\n\n    $target_cf = array();\n    $rows = DB::QUERY(\n        \"SELECT id_category\n        FROM \".prefix_table(\"categories_folders\").\"\n        WHERE id_folder = %i\",\n        $target_id\n    );\n    foreach ($rows as $record) {\n        array_push($target_cf, $record['id_category']);\n    }\n\n    $cf_diff = array_diff($source_cf, $target_cf);\n    if (count($cf_diff) > 0) {\n        return false;\n    }\n\n    return true;\n}\n\n/*\n*\n*/\nfunction encrypt_or_decrypt_file($filename_to_rework, $filename_status)\n{\n    global $server, $user, $pass, $database, $port, $encoding;\n    global $SETTINGS;\n\n    // Include librairies & connect to DB\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/Database/Meekrodb/db.class.php';\n    $pass = defuse_return_decrypted($pass);\n    DB::$host = $server;\n    DB::$user = $user;\n    DB::$password = $pass;\n    DB::$dbName = $database;\n    DB::$port = $port;\n    DB::$encoding = $encoding;\n    DB::$error_handler = true;\n    $link = mysqli_connect($server, $user, $pass, $database, $port);\n    $link->set_charset($encoding);\n\n    // Get file info in DB\n    $fileInfo = DB::queryfirstrow(\n        \"SELECT id FROM \".prefix_table(\"files\").\" WHERE file = %s\",\n        filter_var($filename_to_rework, FILTER_SANITIZE_STRING)\n    );\n    if (empty($fileInfo['id']) === false) {\n        // Load PhpEncryption library\n        $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Crypto.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Encoding.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'DerivedKeys.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Key.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyOrPassword.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'File.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'RuntimeTests.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyProtectedByPassword.php';\n        require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Core.php';\n\n        // Get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        if (isset($SETTINGS['enable_attachment_encryption'])\n            && $SETTINGS['enable_attachment_encryption'] === \"1\" &&\n            isset($filename_status)\n            && ($filename_status === \"clear\"\n                || $filename_status === \"0\")\n        ) {\n            // File needs to be encrypted\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework)) {\n                // Make a copy of file\n                if (!copy(\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\"\n                )) {\n                    exit;\n                } else {\n                    // Do a bck\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".bck\"\n                    );\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework);\n\n                // Now encrypt the file with saltkey\n                $err = '';\n                try {\n                    \\Defuse\\Crypto\\File::encryptFile(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\",\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                    $err = $ex;\n                } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                    $err = $ex;\n                }\n                if (empty($err) === false) {\n                    echo $err;\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\");\n\n                // update table\n                DB::update(\n                    prefix_table('files'),\n                    array(\n                        'status' => 'encrypted'\n                        ),\n                    \"id = %i\",\n                    $fileInfo['id']\n                );\n            }\n        } elseif (isset($SETTINGS['enable_attachment_encryption'])\n            && $SETTINGS['enable_attachment_encryption'] === \"0\"\n            && isset($filename_status)\n            && $filename_status === \"encrypted\"\n        ) {\n            // file needs to be decrypted\n            if (file_exists($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework)) {\n                // make a copy of file\n                if (!copy(\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                    $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\"\n                )) {\n                    exit;\n                } else {\n                    // do a bck\n                    copy(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".bck\"\n                    );\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework);\n\n                // Now encrypt the file with saltkey\n                $err = '';\n                try {\n                    \\Defuse\\Crypto\\File::decryptFile(\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\",\n                        $SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework,\n                        \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                    );\n                } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                    $err = \"An attack! Either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.\";\n                } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                    $err = $ex;\n                } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                    $err = $ex;\n                }\n                if (empty($err) === false) {\n                    echo $err;\n                }\n\n                unlink($SETTINGS['path_to_upload_folder'].'/'.$filename_to_rework.\".copy\");\n\n                // update table\n                DB::update(\n                    prefix_table('files'),\n                    array(\n                        'status' => 'clear'\n                        ),\n                    \"id = %i\",\n                    $fileInfo['id']\n                );\n            }\n        }\n    }\n\n    // Exit\n    return false;\n}\n\n/**\n * Will encrypte/decrypt a fil eusing Defuse\n * @param  string $type        can be either encrypt or decrypt\n * @param  string $source_file path to source file\n * @param  string $target_file path to target file\n * @return string              'true' is success or error message\n */\nfunction prepareFileWithDefuse($type, $source_file, $target_file, $password = '')\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    // Protect against bad inputs\n    if (is_array($source_file) ||is_array($target_file)) {\n        return 'error_cannot_be_array';\n    }\n\n    // Sanitize\n    $source_file = $antiXss->xss_clean($source_file);\n    $target_file = $antiXss->xss_clean($target_file);\n\n    // load PhpEncryption library\n    $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Crypto.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Encoding.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'DerivedKeys.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Key.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyOrPassword.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'File.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'RuntimeTests.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'KeyProtectedByPassword.php';\n    require_once $SETTINGS['cpassman_dir'].$path_to_encryption.'Core.php';\n\n    if (empty($password) === true) {\n    /*\n    File encryption/decryption is done with the SALTKEY\n     */\n\n        // get KEY\n        $ascii_key = file_get_contents(SECUREPATH.\"/teampass-seckey.txt\");\n\n        // Now perform action on the file\n        $err = '';\n        if ($type === 'decrypt') {\n            try {\n                \\Defuse\\Crypto\\File::decryptFile(\n                    $source_file,\n                    $target_file,\n                    \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"decryption_not_possible\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        } elseif ($type === 'encrypt') {\n            try {\n                \\Defuse\\Crypto\\File::encryptFile(\n                    $source_file,\n                    $target_file,\n                    \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key)\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"encryption_not_possible\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        }\n    } else {\n    /*\n    File encryption/decryption is done with special password and not the SALTKEY\n     */\n\n        $err = '';\n        if ($type === 'decrypt') {\n            try {\n                \\Defuse\\Crypto\\File::decryptFileWithPassword(\n                    $source_file,\n                    $target_file,\n                    $password\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"wrong_key\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        } elseif ($type === 'encrypt') {\n            try {\n                \\Defuse\\Crypto\\File::encryptFileWithPassword(\n                    $source_file,\n                    $target_file,\n                    $password\n                );\n            } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n                $err = \"wrong_key\";\n            } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n                $err = $ex;\n            } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n                $err = $ex;\n            }\n        }\n    }\n\n    // return error\n    if (empty($err) === false) {\n        return $err;\n    } else {\n        return true;\n    }\n}\n\n/*\n* NOT TO BE USED\n*/\nfunction debugTeampass($text)\n{\n    $debugFile = fopen('D:/wamp64/www/TeamPass/debug.txt', 'r+');\n    fputs($debugFile, $text);\n    fclose($debugFile);\n}\n\n\n/**\n * DELETE the file with expected command depending on server type\n * @param  string $file Path to file\n * @return              Nothing\n */\nfunction fileDelete($file)\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    $file = $antiXss->xss_clean($file);\n    if (is_file($file)) {\n        unlink($file);\n    }\n}\n\n/*\n* Permits to extract the file extension\n*/\nfunction getFileExtension($file)\n{\n    if (strpos($file, '.') === false) {\n        return $file;\n    }\n\n    return substr($file, strrpos($file, '.') + 1);\n}\n\n/**\n * array_map\n * @param  [type] $func [description]\n * @param  [type] $arr  [description]\n * @return [type]       [description]\n */\nfunction array_map_r($func, $arr)\n{\n    $newArr = array();\n\n    foreach ($arr as $key => $value) {\n        $newArr[ $key ] = (is_array($value) ? array_map_r($func, $value) : ( is_array($func) ? call_user_func_array($func, $value) : $func( $value )));\n    }\n\n    return $newArr;\n}\n\n/**\n * Permits to clean and sanitize text to be displayed\n * @param  string $text text to clean\n * @param  string $type what clean to perform\n * @return string       text cleaned up\n */\nfunction cleanText($string, $type = \"\")\n{\n    global $SETTINGS;\n\n    // Load AntiXSS\n    require_once $SETTINGS['cpassman_dir'].'/includes/libraries/protect/AntiXSS/AntiXSS.php';\n    $antiXss = new protect\\AntiXSS\\AntiXSS();\n\n    if ($type === \"css\") {\n        // Escape text and quotes in UTF8 format\n        return htmlentities($string, ENT_QUOTES | ENT_HTML5, 'UTF-8');\n    } elseif ($type === \"html\" || empty($type)) {\n        // Html cleaner\n        return $antiXss->xss_clean($string);\n    }\n}\n\n/**\n * Performs chmod operation on subfolders\n * @param  string  $dir             Parent folder\n * @param  integer $dirPermissions  New permission on folders\n * @param  integer $filePermissions New permission on files\n * @return boolean                  Success/Failure\n */\nfunction chmodRecursive($dir, $dirPermissions, $filePermissions)\n{\n    $pointer_dir = opendir($dir);\n    $res = true;\n    while ($file = readdir($pointer_dir)) {\n        if (($file == \".\") || ($file == \"..\")) {\n            continue;\n        }\n\n        $fullPath = $dir.\"/\".$file;\n\n        if (is_dir($fullPath)) {\n            if ($res = @chmod($fullPath, $dirPermissions)) {\n                $res = @chmodRecursive($fullPath, $dirPermissions, $filePermissions);\n            }\n        } else {\n            $res = chmod($fullPath, $filePermissions);\n        }\n        if (!$res) {\n            closedir($pointer_dir);\n            return false;\n        }\n    }\n    closedir($pointer_dir);\n    if (is_dir($dir) && $res) {\n        $res = @chmod($dir, $dirPermissions);\n    }\n\n    return $res;\n}\n\n/**\n * Check if user can access to this item\n * @param $item_id\n */\nfunction accessToItemIsGranted($item_id)\n{\n    // Load item data\n    $data = DB::queryFirstRow(\n        \"SELECT id_tree\n        FROM \".prefix_table(\"items\").\"\n        WHERE id = %i\",\n        $item_id\n    );\n\n    // Check if user can access this folder\n    if (!in_array($data['id'], $_SESSION['groupes_visibles'])) {\n        return \"ERR_FOLDER_NOT_ALLOWED\";\n    }\n\n    return true;\n}\n"], "filenames": ["index.php", "items.load.php", "sources/core.php", "sources/items.queries.php", "sources/main.functions.php"], "buggy_code_start_loc": [180, 293, 74, 132, 633], "buggy_code_end_loc": [181, 2605, 75, 3229, 2112], "fixing_code_start_loc": [180, 293, 74, 132, 633], "fixing_code_end_loc": [183, 2622, 77, 3321, 2136], "type": "CWE-79", "message": "Multiple stored cross-site scripting (XSS) vulnerabilities in TeamPass before 2.1.27.9 allow authenticated remote attackers to inject arbitrary web script or HTML via the (1) URL value of an item or (2) user log history. To exploit the vulnerability, the attacker must be first authenticated to the application. For the first one, the attacker has to simply inject XSS code within the URL field of a shared item. For the second one however, the attacker must prepare a payload within its profile, and then ask an administrator to modify its profile. From there, whenever the administrator accesses the log, it can be XSS'ed.", "other": {"cve": {"id": "CVE-2017-15051", "sourceIdentifier": "cve@mitre.org", "published": "2017-11-27T19:29:00.220", "lastModified": "2017-12-07T18:23:05.970", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple stored cross-site scripting (XSS) vulnerabilities in TeamPass before 2.1.27.9 allow authenticated remote attackers to inject arbitrary web script or HTML via the (1) URL value of an item or (2) user log history. To exploit the vulnerability, the attacker must be first authenticated to the application. For the first one, the attacker has to simply inject XSS code within the URL field of a shared item. For the second one however, the attacker must prepare a payload within its profile, and then ask an administrator to modify its profile. From there, whenever the administrator accesses the log, it can be XSS'ed."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de Cross-Site Scripting (XSS) persistente en TeamPass en versiones anteriores a la 2.1.27.9 permiten que atacantes remotos inyecten scripts web o HTML arbitrarios mediante (1) el valor URL de un elemento o (2) el historial de registros del usuario. Para explotar esta vulnerabilidad, el atacante debe estar primero autenticado en la aplicaci\u00f3n. Para el primero, el atacante solo tiene que inyectar c\u00f3digo XSS en el campo URL de un elemento compartido. Sin embargo, para el segundo, el atacante debe preparar una carga \u00fatil en su perfil y, a continuaci\u00f3n, pedir a un administrador que modifique su perfil. Desde aqu\u00ed, cada vez que el administrador accede al registro, puede sufrir XSS."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:teampass:teampass:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.27.9", "matchCriteriaId": "35D9C25C-1C7F-404B-B27E-00B1BC77A868"}]}]}], "references": [{"url": "http://blog.amossys.fr/teampass-multiple-cve-01.html", "source": "cve@mitre.org", "tags": ["Exploit", "Technical Description", "Third Party Advisory"]}, {"url": "https://github.com/nilsteampassnet/TeamPass/commit/5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/nilsteampassnet/TeamPass/commit/5f16f6bb132138ee04eb1e0debf2bdc7d7b7a15f"}}