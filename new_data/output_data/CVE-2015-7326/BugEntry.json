{"buggy_code": ["/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\npackage io.milton.http.webdav;\r\n\r\nimport io.milton.common.StreamUtils;\r\nimport java.io.ByteArrayInputStream;\r\nimport org.apache.commons.io.output.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\nimport javax.xml.namespace.QName;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.xml.sax.InputSource;\r\nimport org.xml.sax.SAXException;\r\nimport org.xml.sax.XMLReader;\r\nimport org.xml.sax.helpers.XMLReaderFactory;\r\n\r\n/**\r\n * Simple implmentation which just parses the request body. If no xml is present\r\n * it will return an empty set.\r\n *\r\n * Note this generally shouldnt be used directly, but should be wrapped by\r\n * MSPropFindRequestFieldParser to support windows clients.\r\n *\r\n * @author brad\r\n */\r\npublic class DefaultPropFindRequestFieldParser implements PropFindRequestFieldParser {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger( DefaultPropFindRequestFieldParser.class );\r\n\r\n    public DefaultPropFindRequestFieldParser() {\r\n    }\r\n\r\n\t@Override\r\n    public PropertiesRequest getRequestedFields( InputStream in ) {\r\n\t\tfinal Set<QName> set = new LinkedHashSet<QName>();\r\n        try {            \r\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n            StreamUtils.readTo( in, bout, false, true );\r\n            byte[] arr = bout.toByteArray();\r\n            if( arr.length > 1 ) {\r\n                ByteArrayInputStream bin = new ByteArrayInputStream( arr );\r\n                XMLReader reader = XMLReaderFactory.createXMLReader();\r\n\t\t\t\treader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\r\n                PropFindSaxHandler handler = new PropFindSaxHandler();\r\n                reader.setContentHandler( handler );\r\n                try {\r\n                    reader.parse( new InputSource( bin ) );\r\n                    if( handler.isAllProp() ) {\r\n                        return new PropertiesRequest();\r\n                    } else {\r\n                        set.addAll( handler.getAttributes().keySet() );\r\n                    }\r\n                } catch( IOException e ) {\r\n                    log.warn( \"exception parsing request body\", e );\r\n                    // ignore\r\n                } catch( SAXException e ) {\r\n                    log.warn( \"exception parsing request body\", e );\r\n                    // ignore\r\n                }\r\n            }            \r\n        } catch( Exception ex ) {\r\n\t\t\t// There's a report of an exception being thrown here by IT Hit Webdav client\r\n\t\t\t// Perhaps we can just log the error and return an empty set. Usually this\r\n\t\t\t// class is wrapped by the MsPropFindRequestFieldParser which will use a default\r\n\t\t\t// set of properties if this returns an empty set\r\n\t\t\tlog.warn(\"Exception parsing PROPFIND request fields. Returning empty property set\", ex);\r\n            //throw new RuntimeException( ex );\r\n        }\r\n\t\treturn PropertiesRequest.toProperties(set);\r\n    }\r\n}\r\n", "/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\npackage io.milton.http.webdav;\r\n\r\nimport io.milton.common.ReadingException;\r\nimport io.milton.common.StreamUtils;\r\nimport io.milton.common.WritingException;\r\nimport java.io.ByteArrayInputStream;\r\nimport org.apache.commons.io.output.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport javax.xml.namespace.QName;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.xml.sax.InputSource;\r\nimport org.xml.sax.SAXException;\r\nimport org.xml.sax.XMLReader;\r\nimport org.xml.sax.helpers.XMLReaderFactory;\r\n\r\n/**\r\n *\r\n * @author brad\r\n */\r\npublic class DefaultPropPatchParser implements PropPatchRequestParser {\r\n\r\n    private final static Logger log = LoggerFactory.getLogger( DefaultPropPatchParser.class );\r\n\r\n\t@Override\r\n    public PropPatchParseResult getRequestedFields( InputStream in ) {\r\n        log.debug( \"getRequestedFields\" );\r\n        try {\r\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n            StreamUtils.readTo( in, bout, false, true );\r\n            byte[] arr = bout.toByteArray();\r\n            return parseContent( arr );\r\n        } catch( SAXException ex ) {\r\n            throw new RuntimeException( ex );\r\n        } catch( ReadingException ex ) {\r\n            throw new RuntimeException( ex );\r\n        } catch( WritingException ex ) {\r\n            throw new RuntimeException( ex );\r\n        } catch( IOException ex ) {\r\n            throw new RuntimeException( ex );\r\n        }\r\n    }\r\n\r\n    private PropPatchParseResult parseContent( byte[] arr ) throws IOException, SAXException {\r\n        if( arr.length > 0 ) {\r\n            log.debug( \"processing content\" );\r\n            ByteArrayInputStream bin = new ByteArrayInputStream( arr );\r\n            XMLReader reader = XMLReaderFactory.createXMLReader();\r\n\t\t\treader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\r\n            PropPatchSaxHandler handler = new PropPatchSaxHandler();\r\n            reader.setContentHandler( handler );\r\n            reader.parse( new InputSource( bin ) );\r\n            log.debug( \"toset: \" + handler.getAttributesToSet().size());\r\n            return new PropPatchParseResult( handler.getAttributesToSet(), handler.getAttributesToRemove().keySet() );\r\n        } else {\r\n            log.debug( \"empty content\" );\r\n            return new PropPatchParseResult( new HashMap<QName, String>(), new HashSet<QName>() );\r\n        }\r\n\r\n    }\r\n}\r\n"], "fixing_code": ["/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\npackage io.milton.http.webdav;\r\n\r\nimport io.milton.common.StreamUtils;\r\nimport java.io.ByteArrayInputStream;\r\nimport org.apache.commons.io.output.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.LinkedHashSet;\r\nimport java.util.Set;\r\nimport javax.xml.namespace.QName;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.xml.sax.InputSource;\r\nimport org.xml.sax.SAXException;\r\nimport org.xml.sax.XMLReader;\r\nimport org.xml.sax.helpers.XMLReaderFactory;\r\n\r\n/**\r\n * Simple implmentation which just parses the request body. If no xml is present\r\n * it will return an empty set.\r\n *\r\n * Note this generally shouldnt be used directly, but should be wrapped by\r\n * MSPropFindRequestFieldParser to support windows clients.\r\n *\r\n * @author brad\r\n */\r\npublic class DefaultPropFindRequestFieldParser implements PropFindRequestFieldParser {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger( DefaultPropFindRequestFieldParser.class );\r\n\r\n    public DefaultPropFindRequestFieldParser() {\r\n    }\r\n\r\n\t@Override\r\n    public PropertiesRequest getRequestedFields( InputStream in ) {\r\n\t\tfinal Set<QName> set = new LinkedHashSet<QName>();\r\n        try {\r\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n            StreamUtils.readTo( in, bout, false, true );\r\n            byte[] arr = bout.toByteArray();\r\n            if( arr.length > 1 ) {\r\n                ByteArrayInputStream bin = new ByteArrayInputStream( arr );\r\n                XMLReader reader = XMLReaderFactory.createXMLReader();\r\n\t\t\t\treader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\r\n\t\t\t\t// https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\r\n\t\t\t\treader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\r\n\t\t\t\treader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\r\n                PropFindSaxHandler handler = new PropFindSaxHandler();\r\n                reader.setContentHandler( handler );\r\n                try {\r\n                    reader.parse( new InputSource( bin ) );\r\n                    if( handler.isAllProp() ) {\r\n                        return new PropertiesRequest();\r\n                    } else {\r\n                        set.addAll( handler.getAttributes().keySet() );\r\n                    }\r\n                } catch( IOException e ) {\r\n                    log.warn( \"exception parsing request body\", e );\r\n                    // ignore\r\n                } catch( SAXException e ) {\r\n                    log.warn( \"exception parsing request body\", e );\r\n                    // ignore\r\n                }\r\n            }\r\n        } catch( Exception ex ) {\r\n\t\t\t// There's a report of an exception being thrown here by IT Hit Webdav client\r\n\t\t\t// Perhaps we can just log the error and return an empty set. Usually this\r\n\t\t\t// class is wrapped by the MsPropFindRequestFieldParser which will use a default\r\n\t\t\t// set of properties if this returns an empty set\r\n\t\t\tlog.warn(\"Exception parsing PROPFIND request fields. Returning empty property set\", ex);\r\n            //throw new RuntimeException( ex );\r\n        }\r\n\t\treturn PropertiesRequest.toProperties(set);\r\n    }\r\n}\r\n", "/*\r\n * Licensed to the Apache Software Foundation (ASF) under one\r\n * or more contributor license agreements.  See the NOTICE file\r\n * distributed with this work for additional information\r\n * regarding copyright ownership.  The ASF licenses this file\r\n * to you under the Apache License, Version 2.0 (the\r\n * \"License\"); you may not use this file except in compliance\r\n * with the License.  You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\npackage io.milton.http.webdav;\r\n\r\nimport io.milton.common.ReadingException;\r\nimport io.milton.common.StreamUtils;\r\nimport io.milton.common.WritingException;\r\nimport java.io.ByteArrayInputStream;\r\nimport org.apache.commons.io.output.ByteArrayOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport javax.xml.namespace.QName;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.xml.sax.InputSource;\r\nimport org.xml.sax.SAXException;\r\nimport org.xml.sax.XMLReader;\r\nimport org.xml.sax.helpers.XMLReaderFactory;\r\n\r\n/**\r\n *\r\n * @author brad\r\n */\r\npublic class DefaultPropPatchParser implements PropPatchRequestParser {\r\n\r\n    private final static Logger log = LoggerFactory.getLogger( DefaultPropPatchParser.class );\r\n\r\n\t@Override\r\n    public PropPatchParseResult getRequestedFields( InputStream in ) {\r\n        log.debug( \"getRequestedFields\" );\r\n        try {\r\n            ByteArrayOutputStream bout = new ByteArrayOutputStream();\r\n            StreamUtils.readTo( in, bout, false, true );\r\n            byte[] arr = bout.toByteArray();\r\n            return parseContent( arr );\r\n        } catch( SAXException ex ) {\r\n            throw new RuntimeException( ex );\r\n        } catch( ReadingException ex ) {\r\n            throw new RuntimeException( ex );\r\n        } catch( WritingException ex ) {\r\n            throw new RuntimeException( ex );\r\n        } catch( IOException ex ) {\r\n            throw new RuntimeException( ex );\r\n        }\r\n    }\r\n\r\n    private PropPatchParseResult parseContent( byte[] arr ) throws IOException, SAXException {\r\n        if( arr.length > 0 ) {\r\n            log.debug( \"processing content\" );\r\n            ByteArrayInputStream bin = new ByteArrayInputStream( arr );\r\n            XMLReader reader = XMLReaderFactory.createXMLReader();\r\n\t\t\treader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\r\n\t\t\t// https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing\r\n\t\t\treader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\r\n\t\t\treader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\r\n\r\n            PropPatchSaxHandler handler = new PropPatchSaxHandler();\r\n            reader.setContentHandler( handler );\r\n            reader.parse( new InputSource( bin ) );\r\n            log.debug( \"toset: \" + handler.getAttributesToSet().size());\r\n            return new PropPatchParseResult( handler.getAttributesToSet(), handler.getAttributesToRemove().keySet() );\r\n        } else {\r\n            log.debug( \"empty content\" );\r\n            return new PropPatchParseResult( new HashMap<QName, String>(), new HashSet<QName>() );\r\n        }\r\n\r\n    }\r\n}\r\n"], "filenames": ["milton-server-ce/src/main/java/io/milton/http/webdav/DefaultPropFindRequestFieldParser.java", "milton-server-ce/src/main/java/io/milton/http/webdav/DefaultPropPatchParser.java"], "buggy_code_start_loc": [56, 71], "buggy_code_end_loc": [81, 71], "fixing_code_start_loc": [56, 72], "fixing_code_end_loc": [84, 76], "type": "CWE-611", "message": "XML External Entity (XXE) vulnerability in Milton Webdav before 2.7.0.3.", "other": {"cve": {"id": "CVE-2015-7326", "sourceIdentifier": "cve@mitre.org", "published": "2017-06-07T14:29:00.180", "lastModified": "2018-10-09T19:58:02.157", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "XML External Entity (XXE) vulnerability in Milton Webdav before 2.7.0.3."}, {"lang": "es", "value": "Vulnerabilidad XML External Entity (XXE) en Milton Webdav para versiones anteriores a la 2.7.0.3."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:milton:webdav:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.7.0.1", "matchCriteriaId": "D2C4CB77-F1F1-4985-9C8B-E96860B7E721"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/134178/Milton-Webdav-2.7.0.1-XXE-Injection.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securityfocus.com/archive/1/536813/100/0/threaded", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/77392", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/miltonio/milton2/commit/5f81b0c48a817d4337d8b0e99ea0b4744ecd720b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/miltonio/milton2/commit/b41072b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/miltonio/milton2/commit/b5851c1", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/miltonio/milton2/commit/5f81b0c48a817d4337d8b0e99ea0b4744ecd720b"}}