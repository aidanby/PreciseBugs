{"buggy_code": ["<?php\n// $Id$\n\n/**\n * Implementation of hook_user().\n *\n */\n\nfunction email_registration_user($op, &$edit, &$account, $category = NULL) {\n  switch ($op) {\n    case 'insert':\n    $namenew = preg_replace('/@.*$/', '', $edit['mail']);\n    // if username generated from email record already exists, append underscore and number eg:(chris_123)\n    if (db_result(db_query(\"SELECT count(*) FROM {users} WHERE uid <> %d AND LOWER(name) = LOWER('%s')\", $account->uid, $namenew)) > 0) {\n      // find the next number available to append to the name\n      $sql = \"SELECT SUBSTRING_INDEX(name,'_',-1) FROM {users} WHERE name REGEXP '^%s_[0-9]+$' ORDER BY CAST(SUBSTRING_INDEX(name,'_',-1) AS UNSIGNED) DESC LIMIT 1\";\n      $nameidx = db_result(db_query($sql, $namenew));\n      $namenew .= '_'. ($nameidx + 1);\n    }\n    // replace with generated username\n    db_query(\"UPDATE {users} SET name = '%s' WHERE uid = '%s'\", $namenew, $account->uid);\n  break;\n  }\n  return;\n}\n\n/**\n * Implementation of hook_form_alter().\n *\n */\n\nfunction email_registration_form_alter(&$form, $form_state, $form_id) {\n  switch ($form_id) {\n    case 'user_register':\n      if (module_exists('profile') && is_array($form['account'])) {\n        $form['account']['name']['#type'] = 'hidden';\n        $form['account']['name']['#value'] = user_password();\n        $form['account']['mail']['#title'] = t('E-mail');\n      } \n      else {\n        $form['name']['#type'] = 'hidden';\n        $form['name']['#value'] = user_password();\n        $form['mail']['#title'] = t('E-mail');\n      }\n      break;\n\n    case 'user_pass':\n      $form['name']['#title'] = t('E-mail');\n      $form['name']['#description'] = t('Enter your e-mail address. You\\'ll be sent a new password immediately.');\n      break;\n\n    case 'user_login':\n      $form['name']['#title'] = t('E-mail');\n      $form['name']['#description'] = 'Enter your e-mail address.';\n      $form['pass']['#description'] = 'Enter the password that accompanies your e-mail.';\n      $form['#validate'] = array('email_registration_user_login_validate' => array()) + $form['#validate'];\n      break;\n\n    case 'user_login_block':\n      $form['name']['#title'] = t('E-mail');\n      $form['#validate'] = array('email_registration_user_login_validate' => array()) + $form['#validate'];\n      break;\n  }  \n}\n\n/** \n * function email_registration_settings() {\n *  return system_settings_form($form);\n * }\n */\n\n\n\n/**\n * Custom validation function for user login form.\n * Allows users to authenticate by email only, which is our preferred method.\n *\n */\n\nfunction email_registration_user_login_validate($form, &$form_state) {\n  if (isset($form_state['values']['name'])) {\n    if ($name = db_result(db_query(\"SELECT name FROM {users} WHERE LOWER(mail) = LOWER('%s')\", $form_state['values']['name']))) {\n      form_set_value($form_state['name'], $name, $form_state);\n    }\n  }\n}"], "fixing_code": ["<?php\n// $Id$\n\n/**\n * Implementation of hook_user().\n *\n */\n\nfunction email_registration_user($op, &$edit, &$account, $category = NULL) {\n  switch ($op) {\n    case 'insert':\n    $namenew = preg_replace('/@.*$/', '', $edit['mail']);\n    // if username generated from email record already exists, append underscore and number eg:(chris_123)\n    if (db_result(db_query(\"SELECT count(*) FROM {users} WHERE uid <> %d AND LOWER(name) = LOWER('%s')\", $account->uid, $namenew)) > 0) {\n      // find the next number available to append to the name\n      $sql = \"SELECT SUBSTRING_INDEX(name,'_',-1) FROM {users} WHERE name REGEXP '%s' ORDER BY CAST(SUBSTRING_INDEX(name,'_',-1) AS UNSIGNED) DESC LIMIT 1\";\n      $nameidx = db_result(db_query($sql, '^'. $namenew .'_[0-9]+$'));\n      $namenew .= '_'. ($nameidx + 1);\n    }\n    // replace with generated username\n    db_query(\"UPDATE {users} SET name = '%s' WHERE uid = '%s'\", $namenew, $account->uid);\n  break;\n  }\n  return;\n}\n\n/**\n * Implementation of hook_form_alter().\n *\n */\n\nfunction email_registration_form_alter(&$form, $form_state, $form_id) {\n  switch ($form_id) {\n    case 'user_register':\n      if (module_exists('profile') && is_array($form['account'])) {\n        $form['account']['name']['#type'] = 'hidden';\n        $form['account']['name']['#value'] = user_password();\n        $form['account']['mail']['#title'] = t('E-mail');\n      } \n      else {\n        $form['name']['#type'] = 'hidden';\n        $form['name']['#value'] = user_password();\n        $form['mail']['#title'] = t('E-mail');\n      }\n      break;\n\n    case 'user_pass':\n      $form['name']['#title'] = t('E-mail');\n      $form['name']['#description'] = t('Enter your e-mail address. You\\'ll be sent a new password immediately.');\n      break;\n\n    case 'user_login':\n      $form['name']['#title'] = t('E-mail');\n      $form['name']['#description'] = 'Enter your e-mail address.';\n      $form['pass']['#description'] = 'Enter the password that accompanies your e-mail.';\n      $form['#validate'] = array('email_registration_user_login_validate' => array()) + $form['#validate'];\n      break;\n\n    case 'user_login_block':\n      $form['name']['#title'] = t('E-mail');\n      $form['#validate'] = array('email_registration_user_login_validate' => array()) + $form['#validate'];\n      break;\n  }  \n}\n\n/** \n * function email_registration_settings() {\n *  return system_settings_form($form);\n * }\n */\n\n\n\n/**\n * Custom validation function for user login form.\n * Allows users to authenticate by email only, which is our preferred method.\n *\n */\n\nfunction email_registration_user_login_validate($form, &$form_state) {\n  if (isset($form_state['values']['name'])) {\n    if ($name = db_result(db_query(\"SELECT name FROM {users} WHERE LOWER(mail) = LOWER('%s')\", $form_state['values']['name']))) {\n      form_set_value($form_state['name'], $name, $form_state);\n    }\n  }\n}"], "filenames": ["email_registration.module"], "buggy_code_start_loc": [16], "buggy_code_end_loc": [18], "fixing_code_start_loc": [16], "fixing_code_end_loc": [18], "type": "CWE-89", "message": "A vulnerability was found in Email Registration 5.x-2.1. It has been declared as critical. This vulnerability affects the function email_registration_user of the file email_registration.module. The manipulation of the argument namenew leads to sql injection. The attack can be initiated remotely. Upgrading to version 6.x-1.0 is able to address this issue. The name of the patch is 126c141b7db038c778a2dc931d38766aad8d1112. It is recommended to upgrade the affected component. VDB-222334 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2008-10004", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-06T23:15:10.123", "lastModified": "2023-03-13T17:43:45.043", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Email Registration 5.x-2.1. It has been declared as critical. This vulnerability affects the function email_registration_user of the file email_registration.module. The manipulation of the argument namenew leads to sql injection. The attack can be initiated remotely. Upgrading to version 6.x-1.0 is able to address this issue. The name of the patch is 126c141b7db038c778a2dc931d38766aad8d1112. It is recommended to upgrade the affected component. VDB-222334 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:email_registration_project:email_registration:5.x-2.1:*:*:*:*:drupal:*:*", "matchCriteriaId": "9DAA5ADB-8836-426A-9864-4F3953FD0CA4"}]}]}], "references": [{"url": "https://github.com/drupalprojects/email_registration/commit/126c141b7db038c778a2dc931d38766aad8d1112", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/drupalprojects/email_registration/releases/tag/6.x-1.0", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.222334", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.222334", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/drupalprojects/email_registration/commit/126c141b7db038c778a2dc931d38766aad8d1112"}}