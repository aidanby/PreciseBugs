{"buggy_code": ["<?php\n/**\n * Show the form to reset the password.\n *\n * @package\t\tProjectSend\n *\n */\n$allowed_levels = array(9,8,7,0);\nrequire_once 'bootstrap.php';\n\n$page_title = __('Lost password','cftp_admin');\n\n$page_id = 'reset_password_enter_email';\nif (!empty($_GET['token']) && !empty($_GET['user'])) {\n    $page_id = 'reset_password_enter_new';\n}\n\ninclude_once ADMIN_VIEWS_DIR . DS . 'header-unlogged.php';\n    $show_form = 'enter_email';\n\n    if (!empty($_GET['token']) && !empty($_GET['user'])) {\n        $got_token\t= $_GET['token'];\n        $got_user\t= $_GET['user'];\n\n        /**\n         * Get the user's id\n         */\n        $user_data = get_user_by_username($got_user);\n        $sql_request = $dbh->prepare(\"SELECT * FROM \" . TABLE_PASSWORD_RESET . \" WHERE BINARY token = :token AND user_id = :id\");\n        $sql_request->bindParam(':token', $got_token);\n        $sql_request->bindParam(':id', $user_data['id'], PDO::PARAM_INT);\n        $sql_request->execute();\n        $count_request = $sql_request->rowCount();\n\n        if ($count_request > 0) {\n            $sql_request->setFetchMode(PDO::FETCH_ASSOC);\n            $token_info = $sql_request->fetch();\n\n            /** Check if the token has been used already */\n            if ($token_info['used'] == '1') {\n                $errorstate = 'token_used';\n            }\n            /** Check if the token has expired. */\n            elseif (time() - strtotime($token_info['timestamp']) > PASSWORD_RECOVERY_TOKEN_EXPIRATION_TIME) {\n                $errorstate = 'token_expired';\n            }\n\n            else {\n                $show_form = 'enter_new_password';\n            }\n        }\n        else {\n            $errorstate = 'token_invalid';\n            $show_form = 'none';\n        }\n    }\n\n    /** The form was submitted */\n    if ($_POST) {\n        /**\n         * Clean the posted form values.\n         */\n        $form_type = encode_html($_POST['form_type']);\n        \n        switch ($form_type) {\n            /**\n             * The form submited contains a new token request\n             */\n            case 'new_request':\n                $get_user = get_user_by('user', 'email', $_POST['email']);\n        \n                if ( $get_user ) {\n                    /** Email exists on the database */\n                    $token = generateRandomString(32);\n                    \n                    /**\n                     * Count how many request were made by this user today.\n                     * No more than 3 unused should exist at a time.\n                     */\n                    $sql_amount = $dbh->prepare(\"SELECT * FROM \" . TABLE_PASSWORD_RESET . \" WHERE user_id = :id AND used = '0' AND timestamp > NOW() - INTERVAL 1 DAY\");\n                    $sql_amount->bindParam(':id', $get_user['id'], PDO::PARAM_INT);\n                    $sql_amount->execute();\n                    $count_requests = $sql_amount->rowCount();\n                    if ($count_requests >= 3){\n                        $errorstate = 'too_many_today';\n                    }\n                    else {\n                        $sql_pass = $dbh->prepare(\"INSERT INTO \" . TABLE_PASSWORD_RESET . \" (user_id, token)\"\n                                                        .\"VALUES (:id, :token)\");\n                        $sql_pass->bindParam(':token', $token);\n                        $sql_pass->bindParam(':id', $get_user['id'], PDO::PARAM_INT);\n                        $sql_pass->execute();\n            \n                        /** Send email */\n                        $notify_user = new \\ProjectSend\\Classes\\Emails;\n                        if ($notify_user->send([\n                            'type' => 'password_reset',\n                            'address' => $get_user['email'],\n                            'username' => $get_user['username'],\n                            'token' => $token\n                        ])) {\n                            $state['email'] = 1;\n                        }\n                        else {\n                            $state['email'] = 0;\n                        }\n                    }\n                    \n                    $show_form = 'none';\n                }\n                else {\n                    //$errorstate = 'email_not_found';\n                    // Simulate that the request has been set, do not show that email exists or not on the database\n                    $state['email'] = 1;\n                    $show_form = 'none';\n                }\n            break;\n\n            /**\n             * The form submited contains the new password\n             */\n            case 'new_password':\n                if (!empty($user_data['id'])) {\n                    $reset_password_new = $_POST['password'];\n    \n                    /** Password checks */\n                    $validation = new \\ProjectSend\\Classes\\Validation;\n                    $validation->validate('completed',$reset_password_new,$json_strings['validation']['no_pass']);\n                    $validation->validate('password',$reset_password_new,$json_strings['validation']['valid_pass'].' '.$json_strings['validation']['valid_chars']);\n                    $validation->validate('pass_rules',$reset_password_new,$json_strings['validation']['rules_pass']);\n                    $validation->validate('length',$reset_password_new,$json_strings['validation']['length_pass'],MIN_PASS_CHARS,MAX_PASS_CHARS);\n\n                    if ($validation->passed()) {\t\n                        $enc_password = password_hash($reset_password_new, PASSWORD_DEFAULT, [ 'cost' => HASH_COST_LOG2 ]);\n                \n                        if (strlen($enc_password) >= 20) {\n                \n                            $state['hash'] = 1;\n                \n                            /** SQL queries */\n\n                            $sql_query = $dbh->prepare(\"UPDATE \" . TABLE_USERS . \" SET \n                                                        password = :password\n                                                        WHERE id = :id\"\n                                                );\n                            $sql_query->bindParam(':password', $enc_password);\n                            $sql_query->bindParam(':id', $user_data['id'], PDO::PARAM_INT);\n                            $sql_query->execute();\t\t\t\t\t\t\t\n                    \n                            if ($sql_query) {\n                                $state['reset'] = 1;\n\n                                $sql_query = $dbh->prepare(\"UPDATE \" . TABLE_PASSWORD_RESET . \" SET \n                                                            used = '1' \n                                                            WHERE id = :id\"\n                                                    );\n                                $sql_query->bindParam(':id', $token_info['id'], PDO::PARAM_INT);\n                                $sql_query->execute();\t\t\t\t\t\t\t\n\n                                $show_form = 'none';\n                            }\n                            else {\n                                $state['reset'] = 0;\n                            }\n                        }\n                        else {\n                            $state['hash'] = 0;\n                        }\n                    }\n                }\n                \n            break;\n        }\n    }\n    ?>\n\n<div class=\"col-xs-12 col-sm-12 col-lg-4 col-lg-offset-4\">\n\n    <?php echo get_branding_layout(true); ?>\n\n    <div class=\"white-box\">\n        <div class=\"white-box-interior\">\n            <?php\n                /**\n                 * If the form was submited with errors, show them here.\n                 */\n                if (!empty($validation)) {\n                    echo $validation->list_errors();\n                }\n            ?>\n    \n            <?php\n                /**\n                 * Show status message\n                 */\n                if (isset($errorstate)) {\n                    switch ($errorstate) {\n                        case 'email_not_found':\n                            $login_err_message = __(\"The supplied email address does not correspond to any user.\",'cftp_admin');\n                            break;\n                        case 'token_invalid':\n                            $login_err_message = __(\"The request is not valid.\",'cftp_admin');\n                            break;\n                        case 'token_expired':\n                            $login_err_message = __(\"This request has expired. Please make a new one.\",'cftp_admin');\n                            break;\n                        case 'token_used':\n                            $login_err_message = __(\"This request has already been completed. Please make a new one.\",'cftp_admin');\n                            break;\n                        case 'too_many_today':\n                            $login_err_message = __(\"There are 3 unused requests done in less than 24 hs. Please wait until one expires (1 day since made) to make a new one.\",'cftp_admin');\n                            break;\n                    }\n    \n                    echo system_message('danger',$login_err_message,'login_error');\n                }\n\n                /**\n                 * Show the ok or error message for the email.\n                 */\n                if (isset($state['email'])) {\n                    switch ($state['email']) {\n                        case 1:\n                            $msg = __('An e-mail with further instructions has been sent. Please check your inbox to proceed.','cftp_admin');\n                            echo system_message('success',$msg);\n                        break;\n                        case 0:\n                            $msg = __(\"E-mail couldn't be sent.\",'cftp_admin');\n                            $msg .= ' ' . __(\"If the problem persists, please contact an administrator.\",'cftp_admin');\n                            echo system_message('danger',$msg);\n                        break;\n                    }\n                }\n\n                /**\n                 * Show the ok or error message for the password reset.\n                 */\n                if (isset($state['reset'])) {\n                    switch ($state['reset']) {\n                        case 1:\n                            $msg = __('Your new password has been set. You can now log in using it.','cftp_admin');\n                            echo system_message('success',$msg);\n                        break;\n                        case 0:\n                            $msg = __(\"Your new password couldn't be set.\",'cftp_admin');\n                            $msg .= ' ' . __(\"If the problem persists, please contact an administrator.\",'cftp_admin');\n                            echo system_message('danger',$msg);\n                        break;\n                    }\n                }\n\n                switch ($show_form) {\n                    case 'enter_email':\n                    default:\n                        include_once FORMS_DIR . DS . 'reset-password' . DS . 'enter-email.php';\n                    break;\n                    case 'enter_new_password':\n                        include_once FORMS_DIR . DS . 'reset-password' . DS . 'enter-password.php';\n                    break;\n                    case 'none':\n                    break;\n                }\n            ?>\n\n            <div class=\"login_form_links\">\n                <p><a href=\"<?php echo BASE_URI; ?>\" target=\"_self\"><?php _e('Go back to the homepage.','cftp_admin'); ?></a></p>\n            </div>\n        </div>\n    </div> <!-- container-custom -->\n</div>\n\n<?php\n    include_once ADMIN_VIEWS_DIR . DS . 'footer.php';"], "fixing_code": ["<?php\n/**\n * Show the form to reset the password.\n *\n * @package\t\tProjectSend\n *\n */\n$allowed_levels = array(9,8,7,0);\nrequire_once 'bootstrap.php';\n\n$page_title = __('Lost password','cftp_admin');\n\n$page_id = 'reset_password_enter_email';\nif (!empty($_GET['token']) && !empty($_GET['user'])) {\n    $page_id = 'reset_password_enter_new';\n}\n\ninclude_once ADMIN_VIEWS_DIR . DS . 'header-unlogged.php';\n    $show_form = 'enter_email';\n\n    if (!empty($_GET['token']) && !empty($_GET['user'])) {\n        $got_token\t= $_GET['token'];\n        $got_user\t= $_GET['user'];\n\n        /**\n         * Get the user's id\n         */\n        $user_data = get_user_by_username($got_user);\n        $sql_request = $dbh->prepare(\"SELECT * FROM \" . TABLE_PASSWORD_RESET . \" WHERE BINARY token = :token AND user_id = :id\");\n        $sql_request->bindParam(':token', $got_token);\n        $sql_request->bindParam(':id', $user_data['id'], PDO::PARAM_INT);\n        $sql_request->execute();\n        $count_request = $sql_request->rowCount();\n\n        if ($count_request > 0) {\n            $sql_request->setFetchMode(PDO::FETCH_ASSOC);\n            $token_info = $sql_request->fetch();\n\n            /** Check if the token has been used already */\n            if ($token_info['used'] == '1') {\n                $errorstate = 'token_used';\n            }\n            /** Check if the token has expired. */\n            elseif (time() - strtotime($token_info['timestamp']) > PASSWORD_RECOVERY_TOKEN_EXPIRATION_TIME) {\n                $errorstate = 'token_expired';\n            }\n\n            else {\n                $show_form = 'enter_new_password';\n            }\n        }\n        else {\n            $errorstate = 'token_invalid';\n            $show_form = 'none';\n        }\n    }\n\n    /** Fix CVE-2020-28874 */\n    if (!empty($errorstate)) {\n        unset($user_data);\n    }\n\n    /** The form was submitted */\n    if ($_POST) {\n        /**\n         * Clean the posted form values.\n         */\n        $form_type = encode_html($_POST['form_type']);\n        \n        switch ($form_type) {\n            /**\n             * The form submited contains a new token request\n             */\n            case 'new_request':\n                $get_user = get_user_by('user', 'email', $_POST['email']);\n        \n                if ( $get_user ) {\n                    /** Email exists on the database */\n                    $token = generateRandomString(32);\n                    \n                    /**\n                     * Count how many request were made by this user today.\n                     * No more than 3 unused should exist at a time.\n                     */\n                    $sql_amount = $dbh->prepare(\"SELECT * FROM \" . TABLE_PASSWORD_RESET . \" WHERE user_id = :id AND used = '0' AND timestamp > NOW() - INTERVAL 1 DAY\");\n                    $sql_amount->bindParam(':id', $get_user['id'], PDO::PARAM_INT);\n                    $sql_amount->execute();\n                    $count_requests = $sql_amount->rowCount();\n                    if ($count_requests >= 3){\n                        $errorstate = 'too_many_today';\n                    }\n                    else {\n                        $sql_pass = $dbh->prepare(\"INSERT INTO \" . TABLE_PASSWORD_RESET . \" (user_id, token)\"\n                                                        .\"VALUES (:id, :token)\");\n                        $sql_pass->bindParam(':token', $token);\n                        $sql_pass->bindParam(':id', $get_user['id'], PDO::PARAM_INT);\n                        $sql_pass->execute();\n            \n                        /** Send email */\n                        $notify_user = new \\ProjectSend\\Classes\\Emails;\n                        if ($notify_user->send([\n                            'type' => 'password_reset',\n                            'address' => $get_user['email'],\n                            'username' => $get_user['username'],\n                            'token' => $token\n                        ])) {\n                            $state['email'] = 1;\n                        }\n                        else {\n                            $state['email'] = 0;\n                        }\n                    }\n                    \n                    $show_form = 'none';\n                }\n                else {\n                    //$errorstate = 'email_not_found';\n                    // Simulate that the request has been set, do not show that email exists or not on the database\n                    $state['email'] = 1;\n                    $show_form = 'none';\n                }\n            break;\n\n            /**\n             * The form submited contains the new password\n             */\n            case 'new_password':\n                if (!empty($user_data['id'])) {\n                    $reset_password_new = $_POST['password'];\n    \n                    /** Password checks */\n                    $validation = new \\ProjectSend\\Classes\\Validation;\n                    $validation->validate('completed',$reset_password_new,$json_strings['validation']['no_pass']);\n                    $validation->validate('password',$reset_password_new,$json_strings['validation']['valid_pass'].' '.$json_strings['validation']['valid_chars']);\n                    $validation->validate('pass_rules',$reset_password_new,$json_strings['validation']['rules_pass']);\n                    $validation->validate('length',$reset_password_new,$json_strings['validation']['length_pass'],MIN_PASS_CHARS,MAX_PASS_CHARS);\n\n                    if ($validation->passed()) {\t\n                        $enc_password = password_hash($reset_password_new, PASSWORD_DEFAULT, [ 'cost' => HASH_COST_LOG2 ]);\n                \n                        if (strlen($enc_password) >= 20) {\n                \n                            $state['hash'] = 1;\n                \n                            /** SQL queries */\n\n                            $sql_query = $dbh->prepare(\"UPDATE \" . TABLE_USERS . \" SET \n                                                        password = :password\n                                                        WHERE id = :id\"\n                                                );\n                            $sql_query->bindParam(':password', $enc_password);\n                            $sql_query->bindParam(':id', $user_data['id'], PDO::PARAM_INT);\n                            $sql_query->execute();\t\t\t\t\t\t\t\n                    \n                            if ($sql_query) {\n                                $state['reset'] = 1;\n\n                                $sql_query = $dbh->prepare(\"UPDATE \" . TABLE_PASSWORD_RESET . \" SET \n                                                            used = '1' \n                                                            WHERE id = :id\"\n                                                    );\n                                $sql_query->bindParam(':id', $token_info['id'], PDO::PARAM_INT);\n                                $sql_query->execute();\t\t\t\t\t\t\t\n\n                                $show_form = 'none';\n                            }\n                            else {\n                                $state['reset'] = 0;\n                            }\n                        }\n                        else {\n                            $state['hash'] = 0;\n                        }\n                    }\n                }\n                \n            break;\n        }\n    }\n    ?>\n\n<div class=\"col-xs-12 col-sm-12 col-lg-4 col-lg-offset-4\">\n\n    <?php echo get_branding_layout(true); ?>\n\n    <div class=\"white-box\">\n        <div class=\"white-box-interior\">\n            <?php\n                /**\n                 * If the form was submited with errors, show them here.\n                 */\n                if (!empty($validation)) {\n                    echo $validation->list_errors();\n                }\n            ?>\n    \n            <?php\n                /**\n                 * Show status message\n                 */\n                if (isset($errorstate)) {\n                    switch ($errorstate) {\n                        case 'email_not_found':\n                            $login_err_message = __(\"The supplied email address does not correspond to any user.\",'cftp_admin');\n                            break;\n                        case 'token_invalid':\n                            $login_err_message = __(\"The request is not valid.\",'cftp_admin');\n                            break;\n                        case 'token_expired':\n                            $login_err_message = __(\"This request has expired. Please make a new one.\",'cftp_admin');\n                            break;\n                        case 'token_used':\n                            $login_err_message = __(\"This request has already been completed. Please make a new one.\",'cftp_admin');\n                            break;\n                        case 'too_many_today':\n                            $login_err_message = __(\"There are 3 unused requests done in less than 24 hs. Please wait until one expires (1 day since made) to make a new one.\",'cftp_admin');\n                            break;\n                    }\n    \n                    echo system_message('danger',$login_err_message,'login_error');\n                }\n\n                /**\n                 * Show the ok or error message for the email.\n                 */\n                if (isset($state['email'])) {\n                    switch ($state['email']) {\n                        case 1:\n                            $msg = __('An e-mail with further instructions has been sent. Please check your inbox to proceed.','cftp_admin');\n                            echo system_message('success',$msg);\n                        break;\n                        case 0:\n                            $msg = __(\"E-mail couldn't be sent.\",'cftp_admin');\n                            $msg .= ' ' . __(\"If the problem persists, please contact an administrator.\",'cftp_admin');\n                            echo system_message('danger',$msg);\n                        break;\n                    }\n                }\n\n                /**\n                 * Show the ok or error message for the password reset.\n                 */\n                if (isset($state['reset'])) {\n                    switch ($state['reset']) {\n                        case 1:\n                            $msg = __('Your new password has been set. You can now log in using it.','cftp_admin');\n                            echo system_message('success',$msg);\n                        break;\n                        case 0:\n                            $msg = __(\"Your new password couldn't be set.\",'cftp_admin');\n                            $msg .= ' ' . __(\"If the problem persists, please contact an administrator.\",'cftp_admin');\n                            echo system_message('danger',$msg);\n                        break;\n                    }\n                }\n\n                switch ($show_form) {\n                    case 'enter_email':\n                    default:\n                        include_once FORMS_DIR . DS . 'reset-password' . DS . 'enter-email.php';\n                    break;\n                    case 'enter_new_password':\n                        include_once FORMS_DIR . DS . 'reset-password' . DS . 'enter-password.php';\n                    break;\n                    case 'none':\n                    break;\n                }\n            ?>\n\n            <div class=\"login_form_links\">\n                <p><a href=\"<?php echo BASE_URI; ?>\" target=\"_self\"><?php _e('Go back to the homepage.','cftp_admin'); ?></a></p>\n            </div>\n        </div>\n    </div> <!-- container-custom -->\n</div>\n\n<?php\n    include_once ADMIN_VIEWS_DIR . DS . 'footer.php';"], "filenames": ["reset-password.php"], "buggy_code_start_loc": [55], "buggy_code_end_loc": [55], "fixing_code_start_loc": [56], "fixing_code_end_loc": [61], "type": "CWE-287", "message": "reset-password.php in ProjectSend before r1295 allows remote attackers to reset a password because of incorrect business logic. Errors are not properly considered (an invalid token parameter).", "other": {"cve": {"id": "CVE-2020-28874", "sourceIdentifier": "cve@mitre.org", "published": "2021-01-26T18:15:51.020", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "reset-password.php in ProjectSend before r1295 allows remote attackers to reset a password because of incorrect business logic. Errors are not properly considered (an invalid token parameter)."}, {"lang": "es", "value": "El archivo reset-password.php en ProjectSend versiones anteriores a r1295, permite a atacantes remotos restablecer una contrase\u00f1a debido a una l\u00f3gica comercial incorrecta.&#xa0;Los errores no son apropiadamente considerados (un par\u00e1metro de token no v\u00e1lido)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}, {"lang": "en", "value": "CWE-404"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:projectsend:projectsend:*:*:*:*:*:*:*:*", "versionEndExcluding": "r1295", "matchCriteriaId": "CABFA76F-189B-4190-A0BB-99B1D966A8BE"}]}]}], "references": [{"url": "http://projectsend.com", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/projectsend/projectsend/commit/440204734e9a1687cb9887e1c887173d23c5a93e", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/projectsend/projectsend/commits/master", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/projectsend/projectsend/releases/tag/r1295", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/varandinawer/CVE-2020-28874", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/projectsend/projectsend/commit/440204734e9a1687cb9887e1c887173d23c5a93e"}}