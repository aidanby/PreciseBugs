{"buggy_code": ["/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.config.authentication.support;\n\nimport alfio.manager.user.UserManager;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.security.web.util.matcher.RequestMatcher;\nimport org.springframework.web.filter.GenericFilterBean;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\nimport java.util.UUID;\n\n// generate a user if it does not exist, to be used by the demo profile\npublic class UserCreatorBeforeLoginFilter extends GenericFilterBean {\n\n    private final UserManager userManager;\n    private final RequestMatcher requestMatcher;\n\n    public UserCreatorBeforeLoginFilter(UserManager userManager, String loginProcessingUrl) {\n        this.userManager = userManager;\n        this.requestMatcher = new AntPathRequestMatcher(loginProcessingUrl, \"POST\");\n    }\n\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest req = (HttpServletRequest) request;\n\n        //ensure organization/user\n        if (requestMatcher.matches(req) && req.getParameter(\"username\") != null && req.getParameter(\"password\") != null) {\n            String username = req.getParameter(\"username\");\n            if (!userManager.usernameExists(username)) {\n                var organizationModification = new OrganizationModification(null, UUID.randomUUID().toString(), username, username, null, null);\n                int orgId = userManager.createOrganization(organizationModification);\n                userManager.insertUser(orgId, username, \"\", \"\", username, Role.OWNER, User.Type.DEMO, req.getParameter(\"password\"), null, null);\n            }\n        }\n\n        chain.doFilter(request, response);\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.admin;\n\nimport alfio.config.authentication.support.AuthenticationConstants;\nimport alfio.manager.system.ConfigurationManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.modification.UserModification;\nimport alfio.model.result.ValidationResult;\nimport alfio.model.system.ConfigurationKeys;\nimport alfio.model.user.*;\nimport alfio.util.ImageUtil;\nimport alfio.util.Json;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Getter;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.util.StreamUtils;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.security.Principal;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\nimport static org.apache.commons.lang3.StringUtils.defaultString;\nimport static org.apache.commons.lang3.StringUtils.trimToNull;\n\n@RestController\n@RequestMapping(\"/admin/api\")\npublic class UsersApiController {\n\n    private static final Logger log = LoggerFactory.getLogger(UsersApiController.class);\n\n    private static final String OK = \"OK\";\n    private final UserManager userManager;\n    private final ConfigurationManager configurationManager;\n\n    public UsersApiController(UserManager userManager, ConfigurationManager configurationManager) {\n        this.userManager = userManager;\n        this.configurationManager = configurationManager;\n    }\n\n    @ExceptionHandler(Exception.class)\n    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n    @ResponseBody\n    public String unhandledException(Exception e) {\n        log.error(\"unhandled exception\", e);\n        return e != null ? e.getMessage() : \"Unexpected error\";\n    }\n\n    @GetMapping(\"/roles\")\n    public Collection<RoleDescriptor> getAllRoles(Principal principal) {\n        return userManager.getAvailableRoles(principal.getName()).stream().map(RoleDescriptor::new).collect(Collectors.toList());\n    }\n\n    /**\n     * This endpoint is intended only for external use. If a user is registered as \"sponsor\", then the answer will be \"SPONSOR\", otherwise \"OPERATOR\".\n     * @return \"SPONSOR\", \"SUPERVISOR\", or \"OPERATOR\", depending on current user's privileges.\n     */\n    @GetMapping(\"/user-type\")\n    public String getLoggedUserType() {\n        var authorities = SecurityContextHolder.getContext()\n            .getAuthentication()\n            .getAuthorities()\n            .stream()\n            .map(ga -> StringUtils.substringAfter(ga.getAuthority(), \"ROLE_\"))\n            .collect(Collectors.toSet());\n        if (authorities.contains(AuthenticationConstants.SPONSOR)) {\n            return AuthenticationConstants.SPONSOR;\n        } else if (authorities.contains(AuthenticationConstants.SUPERVISOR)) {\n            return AuthenticationConstants.SUPERVISOR;\n        } else {\n            return AuthenticationConstants.OPERATOR;\n        }\n    }\n\n    @GetMapping(\"/user/details\")\n    public Map<String, String> retrieveDetails(Principal principal) {\n        User user = userManager.findUserByUsername(principal.getName());\n        Map<String, String> result = new HashMap<>();\n        boolean isApiKey = user.getType() == User.Type.API_KEY;\n        result.put(isApiKey ? \"apiKey\" : \"username\", user.getUsername());\n        if(!isApiKey) {\n            result.put(\"firstName\", user.getFirstName());\n            result.put(\"lastName\", user.getLastName());\n        }\n        result.put(\"description\", user.getDescription());\n        result.put(\"userType\", getLoggedUserType());\n        return result;\n    }\n\n    @GetMapping(\"/organizations\")\n    @ResponseStatus(HttpStatus.OK)\n    public List<Organization> getAllOrganizations(Principal principal) {\n        return userManager.findUserOrganizations(principal.getName());\n    }\n\n    @GetMapping(\"/organizations/{id}\")\n    public Organization getOrganization(@PathVariable(\"id\") int id, Principal principal) {\n        return userManager.findOrganizationById(id, principal.getName());\n    }\n\n    @GetMapping(\"/users\")\n    public List<UserWithOrganizations> getAllUsers(Principal principal) {\n        return userManager.findAllUsers(principal.getName());\n    }\n\n    @PostMapping(\"/api-keys/bulk\")\n    public ResponseEntity<String> bulkCreate(@RequestBody BulkApiKeyCreation request, Principal principal) {\n        Optional<User> userOptional = userManager.findOptionalEnabledUserByUsername(principal.getName())\n            .filter(u -> userManager.isOwnerOfOrganization(u, request.organizationId));\n        if(userOptional.isPresent()) {\n            userManager.bulkInsertApiKeys(request.organizationId, request.role, request.descriptions);\n            return ResponseEntity.ok(\"OK\");\n        }\n        return ResponseEntity.badRequest().build();\n    }\n\n    @PostMapping(\"/organizations/new\")\n    public String insertOrganization(@RequestBody OrganizationModification om) {\n        userManager.createOrganization(om);\n        return OK;\n    }\n\n    @PostMapping(\"/organizations/update\")\n    public String updateOrganization(@RequestBody OrganizationModification om, Principal principal) {\n        userManager.updateOrganization(om, principal);\n        return OK;\n    }\n\n    @PostMapping(\"/organizations/check\")\n    public ValidationResult validateOrganization(@RequestBody OrganizationModification om, Principal principal) {\n        return userManager.validateOrganization(om, principal);\n    }\n\n    @PostMapping(\"/organizations/validate-slug\")\n    public ValidationResult validateSlug(@RequestBody OrganizationModification om, Principal principal) {\n        return userManager.validateOrganizationSlug(om, principal);\n    }\n\n    @PostMapping(\"/users/check\")\n    public ValidationResult validateUser(@RequestBody UserModification userModification) {\n        if(userModification.getType() == User.Type.API_KEY) {\n            return ValidationResult.success();\n        } else {\n            return userManager.validateUser(userModification.getId(), userModification.getUsername(),\n                    userModification.getFirstName(), userModification.getLastName(), userModification.getEmailAddress());\n        }\n    }\n\n    @PostMapping(\"/users/edit\")\n    public String editUser(@RequestBody UserModification userModification, Principal principal) {\n        userManager.editUser(userModification.getId(), userModification.getOrganizationId(),\n            userModification.getUsername(), userModification.getFirstName(), userModification.getLastName(),\n            userModification.getEmailAddress(), userModification.getDescription(),\n            Role.valueOf(userModification.getRole()), principal.getName());\n        return OK;\n    }\n\n    @PostMapping(\"/users/new\")\n    public UserWithPasswordAndQRCode insertUser(@RequestBody UserModification userModification, @RequestParam(\"baseUrl\") String baseUrl, Principal principal) {\n        Role requested = Role.valueOf(userModification.getRole());\n        Validate.isTrue(userManager.getAvailableRoles(principal.getName()).stream().anyMatch(requested::equals), String.format(\"Requested role %s is not available for current user\", userModification.getRole()));\n        User.Type type = userModification.getType();\n        UserWithPassword userWithPassword = userManager.insertUser(userModification.getOrganizationId(), userModification.getUsername(),\n            userModification.getFirstName(), userModification.getLastName(),\n            userModification.getEmailAddress(), requested,\n            type == null ? User.Type.INTERNAL : type,\n            userModification.getValidToAsDateTime(), userModification.getDescription());\n        String qrCode = type != User.Type.API_KEY ? Base64.getEncoder().encodeToString(generateQRCode(userWithPassword, baseUrl)) : null;\n        return new UserWithPasswordAndQRCode(userWithPassword, qrCode);\n    }\n\n    @GetMapping(\"/api-keys/organization/{organizationId}/all\")\n    public void getAllApiKeys(@PathVariable(\"organizationId\") int organizationId, HttpServletResponse response, Principal principal) throws IOException {\n        String username = principal.getName();\n        if(userManager.isOwnerOfOrganization(username, organizationId)) {\n            response.setContentType(\"application/zip\");\n            response.setHeader(\"Content-Disposition\", \"attachment; filename=apiKeys.zip\");\n\n            String baseUrl = configurationManager.getForSystem(ConfigurationKeys.BASE_URL).getRequiredValue();\n            try(OutputStream os = response.getOutputStream(); ZipOutputStream zipOS = new ZipOutputStream(os)) {\n                for (User user : userManager.findAllApiKeysFor(organizationId)) {\n                    Pair<String, byte[]> result = generateApiKeyQRCode(user, baseUrl);\n                    zipOS.putNextEntry(new ZipEntry(user.getType().name() + \"-\" +result.getLeft()+\".png\"));\n                    StreamUtils.copy(result.getRight(), zipOS);\n                }\n            }\n        } else {\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n        }\n    }\n\n    private static Pair<String, byte[]> generateApiKeyQRCode(User user, String baseUrl) {\n        Map<String, String> info = new HashMap<>();\n        info.put(\"apiKey\", user.getUsername());\n        info.put(\"baseUrl\", baseUrl);\n        String description = defaultString(trimToNull(user.getDescription()), user.getUsername());\n        return Pair.of(description, ImageUtil.createQRCodeWithDescription(Json.GSON.toJson(info), description));\n    }\n\n    private static byte[] generateQRCode(UserWithPassword userWithPassword, String baseUrl) {\n        Map<String, Object> info = new HashMap<>();\n        info.put(\"username\", userWithPassword.getUsername());\n        info.put(\"password\", userWithPassword.getPassword());\n        info.put(\"baseUrl\", baseUrl);\n        return ImageUtil.createQRCode(Json.GSON.toJson(info));\n    }\n\n    @DeleteMapping(\"/users/{id}\")\n    public String deleteUser(@PathVariable(\"id\") int userId, Principal principal) {\n        userManager.deleteUser(userId, principal.getName());\n        return OK;\n    }\n\n    @PostMapping(\"/users/{id}/enable/{enable}\")\n    public String enableUser(@PathVariable(\"id\") int userId, @PathVariable(\"enable\")boolean enable, Principal principal) {\n        userManager.enable(userId, principal.getName(), enable);\n        return OK;\n    }\n\n    @GetMapping(\"/users/{id}\")\n    public UserModification loadUser(@PathVariable(\"id\") int userId) {\n        User user = userManager.findUser(userId);\n        List<Organization> userOrganizations = userManager.findUserOrganizations(user.getUsername());\n        return new UserModification(user.getId(), userOrganizations.get(0).getId(), userManager.getUserRole(user).name(),\n            user.getUsername(), user.getFirstName(), user.getLastName(), user.getEmailAddress(),\n            user.getType(), user.getValidToEpochSecond(), user.getDescription());\n    }\n\n    @GetMapping(\"/users/current\")\n    public UserModification loadCurrentUser(Principal principal) {\n        User user = userManager.findUserByUsername(principal.getName());\n        Optional<Organization> userOrganization = userManager.findUserOrganizations(user.getUsername()).stream().findFirst();\n        return new UserModification(user.getId(), userOrganization.map(Organization::getId).orElse(-1),\n            userManager.getUserRole(user).name(), user.getUsername(), user.getFirstName(), user.getLastName(),\n            user.getEmailAddress(), user.getType(), user.getValidToEpochSecond(), user.getDescription());\n    }\n\n    @PostMapping(\"/users/current/update-password\")\n    public ValidationResult updateCurrentUserPassword(@RequestBody PasswordModification passwordModification, Principal principal) {\n        return userManager.validateNewPassword(principal.getName(), passwordModification.oldPassword, passwordModification.newPassword, passwordModification.newPasswordConfirm)\n            .ifSuccess(() -> userManager.updateCurrentUserPassword(principal.getName(), passwordModification.newPassword));\n    }\n\n    @PostMapping(\"/users/current/edit\")\n    public void updateCurrentUser(@RequestBody UserModification userModification, Principal principal) {\n        User user = userManager.findUserByUsername(principal.getName());\n        userManager.updateUserContactInfo(user.getId(), userModification.getFirstName(), userModification.getLastName(), userModification.getEmailAddress());\n\n    }\n\n    @PutMapping(\"/users/{id}/reset-password\")\n    public UserWithPasswordAndQRCode resetPassword(@PathVariable(\"id\") int userId, @RequestParam(\"baseUrl\") String baseUrl, Principal principal) {\n        UserWithPassword userWithPassword = userManager.resetPassword(userId, principal.getName());\n        return new UserWithPasswordAndQRCode(userWithPassword, Base64.getEncoder().encodeToString(generateQRCode(userWithPassword, baseUrl)));\n    }\n\n    @Getter\n    public static class UserWithPasswordAndQRCode extends UserWithPassword {\n\n        private final String qrCode;\n\n        UserWithPasswordAndQRCode(UserWithPassword userWithPassword, String qrCode) {\n            super(userWithPassword.getUser(), userWithPassword.getPassword(), userWithPassword.getUniqueId());\n            this.qrCode = qrCode;\n        }\n    }\n\n    private static final class RoleDescriptor {\n        private final Role role;\n\n        RoleDescriptor(Role role) {\n            this.role = role;\n        }\n\n        public String getRole() {\n            return role.name();\n        }\n\n        public String getDescription() {\n            return role.getDescription();\n        }\n\n        public List<String> getTarget() { return role.getTarget().stream().map(RoleTarget::name).collect(Collectors.toList()); }\n    }\n\n    private static final class PasswordModification {\n\n        private final String oldPassword;\n        private final String newPassword;\n        private final String newPasswordConfirm;\n\n        @JsonCreator\n        private PasswordModification(@JsonProperty(\"oldPassword\") String oldPassword,\n                                     @JsonProperty(\"newPassword\") String newPassword,\n                                     @JsonProperty(\"newPasswordConfirm\") String newPasswordConfirm) {\n            this.oldPassword = oldPassword;\n            this.newPassword = newPassword;\n            this.newPasswordConfirm = newPasswordConfirm;\n        }\n    }\n\n    private static final class BulkApiKeyCreation {\n\n        private final int organizationId;\n        private final Role role;\n        private final List<String> descriptions;\n\n        @JsonCreator\n        private BulkApiKeyCreation(@JsonProperty(\"organizationId\") int organizationId,\n                                   @JsonProperty(\"role\") Role role,\n                                   @JsonProperty(\"descriptions\") List<String> descriptions) {\n            this.organizationId = organizationId;\n            this.role = role;\n            this.descriptions = descriptions;\n        }\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.v1.admin;\n\nimport alfio.manager.OrganizationDeleter;\nimport alfio.manager.user.UserManager;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.security.Principal;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/v1/admin/system/organization\")\npublic class OrganizationsApiV1Controller {\n    private final UserManager userManager;\n    private final OrganizationDeleter organizationDeleter;\n\n    @Autowired\n    public OrganizationsApiV1Controller(UserManager userManager,\n                                        OrganizationDeleter organizationDeleter) {\n        this.userManager = userManager;\n        this.organizationDeleter = organizationDeleter;\n    }\n\n    @PostMapping(\"/create\")\n    public ResponseEntity<Organization> createOrganization(@RequestBody OrganizationModification om) {\n        if (om == null || !om.isValid(true)) {\n            return ResponseEntity.badRequest().build();\n        }\n        int orgId = userManager.createOrganization(om);\n        return ResponseEntity.ok(userManager.findOrganizationById(orgId, UserManager.ADMIN_USERNAME));\n    }\n\n    @GetMapping(\"/list\")\n    public List<Organization> getAllOrganizations() {\n        return userManager.findUserOrganizations(UserManager.ADMIN_USERNAME);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Organization> getSingleOrganization(@PathVariable(\"id\") int organizationId) {\n        return ResponseEntity.of(userManager.findOptionalOrganizationById(organizationId, UserManager.ADMIN_USERNAME));\n    }\n\n    @PutMapping(\"/{id}/api-key\")\n    public OrganizationApiKey createApiKeyForOrganization(@PathVariable(\"id\") int organizationId) {\n        var user = userManager.insertUser(organizationId, null, null, null, null, Role.fromRoleName(\"ROLE_API_CLIENT\"), User.Type.API_KEY, null, \"Auto-generated API Key\");\n        return new OrganizationApiKey(organizationId, user.getUsername());\n    }\n\n    @PostMapping(\"/{id}\")\n    public ResponseEntity<Organization> update(@PathVariable(\"id\") int organizationId,\n                                               @RequestBody OrganizationModification om,\n                                               Principal principal) {\n        if (om == null || !om.isValid(false) || organizationId != om.getId()) {\n            return ResponseEntity.badRequest().build();\n        }\n        userManager.updateOrganization(om, principal);\n        return ResponseEntity.ok(userManager.findOrganizationById(organizationId, UserManager.ADMIN_USERNAME));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable(\"id\") int organizationId, Principal principal) {\n        boolean result = organizationDeleter.deleteOrganization(organizationId, principal);\n        if (result) {\n            return ResponseEntity.ok().build();\n        } else {\n            return ResponseEntity.badRequest().build();\n        }\n    }\n\n    static class OrganizationApiKey {\n        private final int organizationId;\n        private final String apiKey;\n\n        OrganizationApiKey(int organizationId, String apiKey) {\n            this.organizationId = organizationId;\n            this.apiKey = apiKey;\n        }\n\n        public int getOrganizationId() {\n            return organizationId;\n        }\n\n        public String getApiKey() {\n            return apiKey;\n        }\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager.user;\n\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.result.ValidationResult;\nimport alfio.model.user.*;\nimport alfio.model.user.join.UserOrganization;\nimport alfio.repository.InvoiceSequencesRepository;\nimport alfio.repository.user.AuthorityRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.repository.user.UserRepository;\nimport alfio.repository.user.join.UserOrganizationRepository;\nimport alfio.util.PasswordGenerator;\nimport alfio.util.RequestUtils;\nimport ch.digitalfondue.npjt.AffectedRowCountAndKey;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.session.FindByIndexNameSessionRepository;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.Assert;\n\nimport java.security.Principal;\nimport java.time.ZonedDateTime;\nimport java.util.*;\nimport java.util.function.Predicate;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static java.util.Objects.requireNonNull;\nimport static java.util.stream.Collectors.toList;\n\n@Component\n@Transactional\npublic class UserManager {\n\n    private static final Logger log = LoggerFactory.getLogger(UserManager.class);\n\n    public static final String ADMIN_USERNAME = \"admin\";\n    private static final Pattern SLUG_VALIDATOR = Pattern.compile(\"^[A-Za-z-_0-9]+$\");\n    private final AuthorityRepository authorityRepository;\n    private final OrganizationRepository organizationRepository;\n    private final UserOrganizationRepository userOrganizationRepository;\n    private final UserRepository userRepository;\n    private final PasswordEncoder passwordEncoder;\n    private final InvoiceSequencesRepository invoiceSequencesRepository;\n\n    private final FindByIndexNameSessionRepository<?> sessionsByPrincipalFinder;\n\n    public UserManager(AuthorityRepository authorityRepository,\n                       OrganizationRepository organizationRepository,\n                       UserOrganizationRepository userOrganizationRepository,\n                       UserRepository userRepository,\n                       PasswordEncoder passwordEncoder,\n                       InvoiceSequencesRepository invoiceSequencesRepository,\n                       FindByIndexNameSessionRepository<?> sessionsByPrincipalFinder) {\n        this.authorityRepository = authorityRepository;\n        this.organizationRepository = organizationRepository;\n        this.userOrganizationRepository = userOrganizationRepository;\n        this.userRepository = userRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.invoiceSequencesRepository = invoiceSequencesRepository;\n        this.sessionsByPrincipalFinder = sessionsByPrincipalFinder;\n    }\n\n    private List<Authority> getUserAuthorities(User user) {\n        return authorityRepository.findGrantedAuthorities(user.getUsername());\n    }\n\n    public List<UserWithOrganizations> findAllUsers(String username) {\n        List<Organization> organizations = findUserOrganizations(username);\n        Predicate<Collection<?>> isNotEmpty = ks -> !ks.isEmpty();\n        return Optional.of(organizations)\n            .filter(isNotEmpty)\n            .flatMap(org -> {\n                Map<Integer, List<UserOrganization>> usersAndOrganizations = userOrganizationRepository.findByOrganizationIdsOrderByUserId(organizations.stream().map(Organization::getId).collect(toList()))\n                    .stream()\n                    .collect(Collectors.groupingBy(UserOrganization::userId));\n                return Optional.of(usersAndOrganizations.keySet())\n                    .filter(isNotEmpty)\n                    .map(ks -> userRepository.findByIds(ks)\n                        .stream()\n                        .map(u -> {\n                            List<UserOrganization> userOrganizations = usersAndOrganizations.get(u.getId());\n                            List<Organization> filteredOrganizations = organizations.stream().filter(o -> userOrganizations.stream().anyMatch(uo -> uo.organizationId() == o.getId())).collect(toList());\n                            List<Role> roles = authorityRepository.findRoles(u.getUsername()).stream().map(Role::fromRoleName).collect(toList());\n                            return new UserWithOrganizations(u, filteredOrganizations, roles);\n                        }).collect(toList()));\n            }).orElseGet(Collections::emptyList);\n    }\n\n    public List<User> findAllEnabledUsers(String username) {\n        return findUserOrganizations(username)\n                .stream()\n                .flatMap(o -> userOrganizationRepository.findByOrganizationId(o.getId()).stream())\n                .map(uo -> userRepository.findById(uo.userId()))\n                .filter(User::isEnabled)\n                .collect(toList());\n    }\n\n    public List<User> findAllApiKeysFor(int organizationId) {\n        return userRepository.findAllApiKeysForOrganization(organizationId);\n    }\n\n    public User findUserByUsername(String username) {\n        return userRepository.findEnabledByUsername(username).orElseThrow(IllegalArgumentException::new);\n    }\n\n    public Optional<User> findOptionalEnabledUserByUsername(String username) {\n        return userRepository.findEnabledByUsername(username);\n    }\n\n    public boolean usernameExists(String username) {\n        return userRepository.findIdByUserName(username).isPresent();\n    }\n\n    public User findUser(int id) {\n        return userRepository.findById(id);\n    }\n\n    public Collection<Role> getAvailableRoles(String username) {\n        User user = findUserByUsername(username);\n        return isAdmin(user) || isOwner(user) ? EnumSet.of(Role.OWNER, Role.OPERATOR, Role.SUPERVISOR, Role.SPONSOR, Role.API_CONSUMER) : Collections.emptySet();\n    }\n\n    /**\n     * Return the most privileged role of a user\n     * @param user\n     * @return user role\n     */\n    public Role getUserRole(User user) {\n        return getUserAuthorities(user).stream().map(Authority::getRole).sorted().findFirst().orElse(Role.OPERATOR);\n    }\n\n    public List<Organization> findUserOrganizations(String username) {\n        return organizationRepository.findAllForUser(username);\n    }\n\n    public Organization findOrganizationById(int id, String username) {\n        return findOptionalOrganizationById(id, username).orElseThrow(IllegalArgumentException::new);\n    }\n\n    public Optional<Organization> findOptionalOrganizationById(int id, String username) {\n        return findUserOrganizations(username)\n            .stream()\n            .filter(o -> o.getId() == id)\n            .findFirst();\n    }\n\n    public boolean isAdmin(User user) {\n        return checkRole(user, Collections.singleton(Role.ADMIN));\n    }\n\n    public boolean isOwner(User user) {\n        return checkRole(user, EnumSet.of(Role.ADMIN, Role.OWNER, Role.API_CONSUMER));\n    }\n\n    public boolean isOwnerOfOrganization(User user, int organizationId) {\n        return isAdmin(user) || (isOwner(user) && userOrganizationRepository.findByUserId(user.getId()).stream().anyMatch(uo -> uo.organizationId() == organizationId));\n    }\n\n    public boolean isOwnerOfOrganization(String username, int organizationId) {\n        return userRepository.findByUsername(username)\n            .filter(user -> isOwnerOfOrganization(user, organizationId))\n            .isPresent();\n    }\n\n    private boolean checkRole(User user, Set<Role> expectedRoles) {\n        Set<String> roleNames = expectedRoles.stream().map(Role::getRoleName).collect(Collectors.toSet());\n        return authorityRepository.checkRole(user.getUsername(), roleNames);\n    }\n\n    public int createOrganization(OrganizationModification om) {\n        var affectedRowNumAndKey = organizationRepository.create(om.getName(), om.getDescription(), om.getEmail(), om.getExternalId(), om.getSlug());\n        int orgId = affectedRowNumAndKey.getKey();\n        Validate.isTrue(invoiceSequencesRepository.initFor(orgId) == 2);\n        return orgId;\n    }\n\n    public void updateOrganization(OrganizationModification om, Principal principal) {\n        boolean isAdmin = RequestUtils.isAdmin(principal) || RequestUtils.isSystemApiKey(principal);\n        var currentOrg = organizationRepository.getById(requireNonNull(om.getId()));\n        organizationRepository.update(om.getId(),\n            om.getName(),\n            om.getDescription(),\n            om.getEmail(),\n            isAdmin ? om.getExternalId() : currentOrg.getExternalId(),\n            isAdmin ? om.getSlug() : currentOrg.getSlug());\n    }\n\n    public ValidationResult validateOrganizationSlug(OrganizationModification om, Principal principal) {\n        if(!RequestUtils.isAdmin(principal)) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"slug\", \"Cannot update Organizer URL.\"));\n        }\n        var slug = om.getSlug();\n        if(StringUtils.isBlank(slug) || !SLUG_VALIDATOR.matcher(om.getSlug()).matches()) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"slug\", \"Invalid value\"));\n        }\n        if(organizationRepository.countBySlug(slug, om.getId()) > 0) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"slug\", \"URL is already taken\", \"value_already_in_use\"));\n        }\n        return ValidationResult.success();\n    }\n\n    public ValidationResult validateOrganization(OrganizationModification om, Principal principal) {\n        if(om.getId() == null && organizationRepository.findByName(om.getName()).isPresent()) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"name\", \"There is already another organization with the same name.\"));\n        }\n        Validate.notBlank(om.getName(), \"name can't be empty\");\n        Validate.notBlank(om.getEmail(), \"email can't be empty\");\n        Validate.notBlank(om.getDescription(), \"description can't be empty\");\n        if(!RequestUtils.isAdmin(principal)) {\n            Validate.isTrue(StringUtils.isBlank(om.getExternalId()), \"cannot update external id\");\n            Validate.isTrue(StringUtils.isBlank(om.getSlug()), \"cannot update slug\");\n        } else if(StringUtils.isNotBlank(om.getSlug())) {\n            Validate.isTrue(SLUG_VALIDATOR.matcher(om.getSlug()).matches(), \"Organizer address is not valid\");\n        }\n        return ValidationResult.success();\n    }\n\n    public void editUser(int id, int organizationId, String username, String firstName, String lastName, String emailAddress, String description, Role role, String currentUsername) {\n        boolean admin = ADMIN_USERNAME.equals(username) && Role.ADMIN == role;\n        if(!admin) {\n            int userOrganizationResult = userOrganizationRepository.updateUserOrganization(id, organizationId);\n            Assert.isTrue(userOrganizationResult == 1, \"unexpected error during organization update\");\n        }\n        int userResult = userRepository.update(id, username, firstName, lastName, emailAddress, description);\n        Assert.isTrue(userResult == 1, \"unexpected error during user update\");\n        if(!admin && !username.equals(currentUsername)) {\n            Assert.isTrue(getAvailableRoles(currentUsername).contains(role), \"cannot assign role \"+role);\n            authorityRepository.revokeAll(username);\n            authorityRepository.create(username, role.getRoleName());\n        }\n    }\n\n    public void updateUserContactInfo(int id, String firstName, String lastName, String emailAddress) {\n        userRepository.updateContactInfo(id, firstName, lastName, emailAddress);\n    }\n\n    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType) {\n        return insertUser(organizationId, username, firstName, lastName, emailAddress, role, userType, null, null);\n    }\n\n\n    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, ZonedDateTime validTo, String description) {\n        if (userType == User.Type.API_KEY) {\n            username = UUID.randomUUID().toString();\n            firstName = \"apikey\";\n            lastName = \"\";\n            emailAddress = \"\";\n        }\n\n        String userPassword = PasswordGenerator.generateRandomPassword();\n        return insertUser(organizationId, username, firstName, lastName, emailAddress, role, userType, userPassword, validTo, description);\n    }\n\n    public void bulkInsertApiKeys(int organizationId, Role role, List<String> descriptions) {\n        for (String description : descriptions) {\n            insertUser(organizationId, null, null, null, null, role, User.Type.API_KEY, null, description);\n        }\n    }\n\n\n    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, String userPassword, ZonedDateTime validTo, String description) {\n        Organization organization = organizationRepository.getById(organizationId);\n        AffectedRowCountAndKey<Integer> result = userRepository.create(username, passwordEncoder.encode(userPassword), firstName, lastName, emailAddress, true, userType, validTo, description);\n        userOrganizationRepository.create(result.getKey(), organization.getId());\n        authorityRepository.create(username, role.getRoleName());\n        return new UserWithPassword(userRepository.findById(result.getKey()), userType != User.Type.API_KEY ? userPassword : \"\", UUID.randomUUID().toString());\n    }\n\n\n    public UserWithPassword resetPassword(int userId, String currentUser) {\n        User user = findUser(userId);\n        String password = PasswordGenerator.generateRandomPassword();\n        Validate.isTrue(userRepository.resetPassword(userId, passwordEncoder.encode(password)) == 1, \"error during password reset\");\n\n        if (!currentUser.equals(user.getUsername())) {\n            invalidateSessionsForUser(user.getUsername());\n        }\n\n        return new UserWithPassword(user, password, UUID.randomUUID().toString());\n    }\n\n\n    public void updateCurrentUserPassword(String username, String newPassword) {\n        User user = userRepository.findByUsername(username).orElseThrow(IllegalStateException::new);\n        Validate.isTrue(PasswordGenerator.isValid(newPassword), \"invalid password\");\n        Validate.isTrue(userRepository.resetPassword(user.getId(), passwordEncoder.encode(newPassword)) == 1, \"error during password update\");\n    }\n\n\n    public void deleteUser(int userId, String currentUsername) {\n        User currentUser = userRepository.findEnabledByUsername(currentUsername).orElseThrow(IllegalArgumentException::new);\n        Assert.isTrue(userId != currentUser.getId(), \"sorry but you cannot delete your own account.\");\n        var userToDelete = userRepository.findById(userId);\n        userRepository.deleteUserAndReferences(userId);\n        invalidateSessionsForUser(userToDelete.getUsername());\n    }\n\n    private void invalidateSessionsForUser(String username) {\n        var sessionsToInvalidate = sessionsByPrincipalFinder.findByPrincipalName(username).keySet();\n        sessionsToInvalidate.forEach(sessionsByPrincipalFinder::deleteById);\n    }\n\n    public void enable(int userId, String currentUsername, boolean status) {\n        User currentUser = userRepository.findEnabledByUsername(currentUsername).orElseThrow(IllegalArgumentException::new);\n        Assert.isTrue(userId != currentUser.getId(), \"sorry but you cannot commit suicide\");\n        userRepository.toggleEnabled(userId, status);\n        if (!status) { // disable user\n            var userToDisable = userRepository.findById(userId);\n            invalidateSessionsForUser(userToDisable.getUsername());\n        }\n    }\n\n    public ValidationResult validateUser(Integer id, String username, String firstName, String lastName, String emailAddress) {\n\n        Optional<User> existing = Optional.ofNullable(id).flatMap(userRepository::findOptionalById);\n\n        if(existing.filter(e -> e.getUsername().equals(username)).isEmpty() && usernameExists(username)) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"username\", \"There is already another user with the same username.\"));\n        }\n        return ValidationResult.of(Stream.of(Pair.of(firstName, \"firstName\"), Pair.of(lastName, \"lastName\"), Pair.of(emailAddress, \"emailAddress\"))\n            .filter(p -> StringUtils.isEmpty(p.getKey()))\n            .map(p -> new ValidationResult.ErrorDescriptor(p.getKey(), p.getValue() + \" is required\"))\n            .collect(toList()));\n    }\n\n    public ValidationResult validateNewPassword(String username, String oldPassword, String newPassword, String newPasswordConfirm) {\n        return userRepository.findByUsername(username)\n            .map(u -> {\n                List<ValidationResult.ErrorDescriptor> errors = new ArrayList<>();\n                Optional<String> password = userRepository.findPasswordByUsername(username);\n                if(password.filter(p -> oldPassword == null || passwordEncoder.matches(oldPassword, p)).isEmpty()) {\n                    errors.add(new ValidationResult.ErrorDescriptor(\"alfio.old-password-invalid\", \"wrong password\"));\n                }\n                if(!PasswordGenerator.isValid(newPassword)) {\n                    errors.add(new ValidationResult.ErrorDescriptor(\"alfio.new-password-invalid\", \"new password is not strong enough\"));\n                }\n                if(!StringUtils.equals(newPassword, newPasswordConfirm)) {\n                    errors.add(new ValidationResult.ErrorDescriptor(\"alfio.new-password-does-not-match\", \"new password has not been confirmed\"));\n                }\n                return ValidationResult.of(errors);\n            })\n            .orElseGet(ValidationResult::failed);\n    }\n\n    public Integer createPublicUserIfNotExists(String username, String email, String firstName, String lastName) {\n        int result = userRepository.createPublicUserIfNotExists(username,\n            passwordEncoder.encode(PasswordGenerator.generateRandomPassword()),\n            firstName,\n            lastName,\n            email,\n            true);\n        if (result == 1) {\n            log.info(\"Created public user\");\n        } else {\n            log.info(\"User was not created because already existed\");\n        }\n        return userRepository.findIdByUserName(username).orElse(null);\n    }\n\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.v1;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.controller.api.ControllerConfiguration;\nimport alfio.controller.api.v1.admin.EventApiV1Controller;\nimport alfio.manager.EventManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.Event;\nimport alfio.model.TicketCategory;\nimport alfio.model.TicketCategoryWithAdditionalInfo;\nimport alfio.model.api.v1.admin.EventCreationRequest;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.transaction.PaymentProxy;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.TicketCategoryRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.test.util.IntegrationTestUtil;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.security.Principal;\nimport java.time.LocalDateTime;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.UUID;\n\nimport static java.util.Objects.requireNonNull;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class, ControllerConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass EventApiV1IntegrationTest extends BaseIntegrationTest {\n\n    @BeforeAll\n    public static void initEnv() {\n    }\n\n    @Autowired\n    private ConfigurationRepository configurationRepository;\n\n    @Autowired\n    private UserManager userManager;\n\n    @Autowired\n    private OrganizationRepository organizationRepository;\n\n\n    @Autowired\n    private EventApiV1Controller controller;\n\n    @Autowired\n    private EventManager eventManager;\n\n    @Autowired\n    private TicketCategoryRepository ticketCategoryRepository;\n\n\n    private String organizationName;\n    private String username;\n    private Organization organization;\n    private Principal mockPrincipal;\n\n    private final String slug = \"test\";\n\n    @BeforeEach\n    public void ensureConfiguration() {\n        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n\n        this.organizationName = UUID.randomUUID().toString();\n        this.username = UUID.randomUUID().toString();\n\n        var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n        userManager.createOrganization(organizationModification);\n        this.organization = organizationRepository.findByName(organizationName).orElseThrow();\n        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL);\n\n        this.mockPrincipal = Mockito.mock(Principal.class);\n        Mockito.when(mockPrincipal.getName()).thenReturn(username);\n\n    }\n\n\n    static EventCreationRequest creationRequest(String shortName) {\n        return new EventCreationRequest(\n            \"Title\",\n            shortName,\n            Collections.singletonList(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n            null,\n            new EventCreationRequest.LocationRequest(\n                \"Pollegio 6742 Switzerland\",\n                new EventCreationRequest.CoordinateRequest(\"45.5\",\"9.00\")\n            ),\n            \"Europe/Zurich\",\n            LocalDateTime.now(ClockProvider.clock()).plusDays(30),\n            LocalDateTime.now(ClockProvider.clock()).plusDays(30).plusHours(2),\n            \"https://alf.io\",\n            \"https://alf.io\",\n            \"https://alf.io\",\n            \"https://alf.io/img/tutorials/check-in-app/003.png\",\n            new EventCreationRequest.TicketRequest(\n                false,\n                10,\n                \"CHF\",\n                new BigDecimal(\"7.7\"),\n                true,\n                Arrays.asList(PaymentProxy.OFFLINE,PaymentProxy.STRIPE),\n                Collections.singletonList(\n                    new EventCreationRequest.CategoryRequest(\n                        null, // forces new category\n                        \"standard\",\n                        Collections.singletonList(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                        10,\n                        false,\n                        BigDecimal.TEN,\n                        LocalDateTime.of(2019, 1, 10, 12, 0),\n                        LocalDateTime.of(2019, 1, 30, 18, 0),\n                        null,\n                        null,\n                        null,\n                        null\n                    )\n                ),\n                null\n            ),\n            null,\n            null\n        );\n\n    }\n\n\n\n    @Test\n    void createTest() {\n\n        EventCreationRequest eventCreationRequest = creationRequest(slug);\n\n        String slug = controller.create(eventCreationRequest,mockPrincipal).getBody();\n        Event event = eventManager.getSingleEvent(slug,username);\n        List<TicketCategory> tickets = ticketCategoryRepository.findAllTicketCategories(event.getId());\n        assertEquals(eventCreationRequest.getTitle(),event.getDisplayName());\n        assertEquals(eventCreationRequest.getSlug(),event.getShortName());\n        assertEquals(eventCreationRequest.getTickets().getCurrency(),event.getCurrency());\n        assertEquals(eventCreationRequest.getWebsiteUrl(),event.getWebsiteUrl());\n        assertEquals(eventCreationRequest.getTickets().getPaymentMethods(),event.getAllowedPaymentProxies());\n        assertTrue(event.getFileBlobIdIsPresent());\n        assertEquals(eventCreationRequest.getTickets().getCategories().size(),tickets.size());\n        tickets.forEach((t) -> {\n                List<EventCreationRequest.CategoryRequest> requestCategories = eventCreationRequest.getTickets().getCategories().stream().filter((rt) -> rt.getName().equals(t.getName())).toList();\n                assertEquals(1,requestCategories.size());\n                requestCategories.forEach((rtc) -> {\n                        assertNotEquals(0, t.getOrdinal());\n                        assertEquals(t.getMaxTickets(), rtc.getMaxTickets().intValue());\n                        assertEquals(0, t.getPrice().compareTo(rtc.getPrice()));\n                    }\n                );\n            }\n        );\n    }\n\n    @Test\n    void stats() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        var statsResponse = controller.stats(slug, mockPrincipal);\n        assertTrue(statsResponse.getStatusCode().is2xxSuccessful());\n        var stats = requireNonNull(statsResponse.getBody());\n        int lastOrdinal = -1;\n        for (TicketCategoryWithAdditionalInfo ticketCategory : stats.getTicketCategories()) {\n            assertTrue(ticketCategory.getOrdinal() > 0);\n            assertTrue(ticketCategory.getOrdinal() > lastOrdinal);\n            lastOrdinal = ticketCategory.getOrdinal();\n        }\n    }\n\n    @Test\n    void updateTest() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        String newTitle = \"new title\";\n        EventCreationRequest updateRequest = new EventCreationRequest(newTitle,null,null,null, null,null,null,null,null,null, null,null,\n            new EventCreationRequest.TicketRequest(null,10,null,null,null,null,null,null), null, null\n        );\n        controller.update(slug, updateRequest, mockPrincipal);\n        Event event = eventManager.getSingleEvent(slug,username);\n        assertEquals(newTitle,event.getDisplayName());\n    }\n\n    @Test\n    void updateExistingCategoryUsingId() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        var existing = requireNonNull(controller.stats(slug, mockPrincipal).getBody());\n        var existingCategory = existing.getTicketCategories().get(0);\n        var categoriesRequest = List.of(\n            new EventCreationRequest.CategoryRequest(\n                existingCategory.getId(),\n                existingCategory.getName() + \"_1\",\n                List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                existingCategory.getMaxTickets(),\n                existingCategory.isAccessRestricted(),\n                existingCategory.getPrice(),\n                LocalDateTime.now(ClockProvider.clock()),\n                LocalDateTime.now(ClockProvider.clock()).plusHours(1),\n                existingCategory.getCode(),\n                null,\n                null,\n                existingCategory.getTicketAccessType()\n            )\n        );\n        var ticketRequest = new EventCreationRequest.TicketRequest(null,10,null,null,null,null, categoriesRequest,null);\n        EventCreationRequest updateRequest = new EventCreationRequest(null,null,null,null, null,null,null,null,null,null, null,null,\n            ticketRequest, null, null\n        );\n        assertTrue(controller.update(slug, updateRequest, mockPrincipal).getStatusCode().is2xxSuccessful());\n        var modifiedCategories = ticketCategoryRepository.findAllTicketCategories(existing.getId());\n        assertEquals(1, modifiedCategories.size());\n        assertEquals(existingCategory.getName() + \"_1\", modifiedCategories.get(0).getName());\n    }\n\n    @Test\n    void updateExistingCategoryAndAddNewUsingId() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        var existing = requireNonNull(controller.stats(slug, mockPrincipal).getBody());\n        var existingCategory = existing.getTicketCategories().get(0);\n        var categoriesRequest = List.of(\n            new EventCreationRequest.CategoryRequest(\n                existingCategory.getId(),\n                existingCategory.getName() + \"_1\",\n                List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                existingCategory.getMaxTickets() - 5,\n                existingCategory.isAccessRestricted(),\n                existingCategory.getPrice(),\n                LocalDateTime.now(ClockProvider.clock()),\n                LocalDateTime.now(ClockProvider.clock()).plusHours(1),\n                existingCategory.getCode(),\n                null,\n                null,\n                existingCategory.getTicketAccessType()\n            ),\n            new EventCreationRequest.CategoryRequest(\n                null,\n                existingCategory.getName() + \"_2\",\n                List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                existingCategory.getMaxTickets() - 5,\n                existingCategory.isAccessRestricted(),\n                existingCategory.getPrice(),\n                LocalDateTime.now(ClockProvider.clock()),\n                LocalDateTime.now(ClockProvider.clock()).plusHours(1),\n                existingCategory.getCode(),\n                null,\n                null,\n                existingCategory.getTicketAccessType()\n            )\n        );\n        var ticketRequest = new EventCreationRequest.TicketRequest(null,10,null,null,null,null, categoriesRequest,null);\n        EventCreationRequest updateRequest = new EventCreationRequest(null,null,null,null, null,null,null,null,null,null, null,null,\n            ticketRequest, null, null\n        );\n        assertTrue(controller.update(slug, updateRequest, mockPrincipal).getStatusCode().is2xxSuccessful());\n        var modifiedCategories = ticketCategoryRepository.findAllTicketCategories(existing.getId());\n        assertEquals(2, modifiedCategories.size());\n        assertEquals(existingCategory.getName() + \"_1\", modifiedCategories.get(0).getName());\n        assertEquals(existingCategory.getOrdinal(), modifiedCategories.get(0).getOrdinal());\n        assertEquals(existingCategory.getName() + \"_2\", modifiedCategories.get(1).getName());\n        assertEquals(existingCategory.getOrdinal() + 1, modifiedCategories.get(1).getOrdinal());\n    }\n\n    @Test\n    void updateExistingCategoryUsingName() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        var existing = requireNonNull(controller.stats(slug, mockPrincipal).getBody());\n        var existingCategory = existing.getTicketCategories().get(0);\n        var categoriesRequest = List.of(\n            new EventCreationRequest.CategoryRequest(null,\n                existingCategory.getName(),\n                List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                existingCategory.getMaxTickets() - 1,\n                existingCategory.isAccessRestricted(),\n                existingCategory.getPrice(),\n                LocalDateTime.now(ClockProvider.clock()),\n                LocalDateTime.now(ClockProvider.clock()).plusHours(1),\n                existingCategory.getCode(),\n                null,\n                null,\n                existingCategory.getTicketAccessType()\n            )\n        );\n        var ticketRequest = new EventCreationRequest.TicketRequest(null,10,null,null,null,null, categoriesRequest,null);\n        EventCreationRequest updateRequest = new EventCreationRequest(null,null,null,null, null,null,null,null,null,null, null,null,\n            ticketRequest, null, null\n        );\n        assertTrue(controller.update(slug, updateRequest, mockPrincipal).getStatusCode().is2xxSuccessful());\n        var modifiedCategories = ticketCategoryRepository.findAllTicketCategories(existing.getId());\n        assertEquals(1, modifiedCategories.size());\n        assertEquals(existingCategory.getMaxTickets() - 1, modifiedCategories.get(0).getMaxTickets());\n    }\n\n    @Test\n    void retrieveLinkedSubscriptions() {\n        controller.create(creationRequest(slug),mockPrincipal);\n        var response = controller.getLinkedSubscriptions(slug, mockPrincipal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var linkedSubscriptions = response.getBody();\n        assertNotNull(linkedSubscriptions);\n        assertTrue(linkedSubscriptions.getSubscriptions().isEmpty());\n        assertEquals(slug, linkedSubscriptions.getEventSlug());\n    }\n\n\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.v1;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.config.authentication.support.APITokenAuthentication;\nimport alfio.controller.api.ControllerConfiguration;\nimport alfio.controller.api.v1.admin.ReservationApiV1Controller;\nimport alfio.controller.api.v1.admin.SubscriptionApiV1Controller;\nimport alfio.manager.EventManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.Event;\nimport alfio.model.TicketCategory;\nimport alfio.model.api.v1.admin.*;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.metadata.TicketMetadataContainer;\nimport alfio.model.modification.AttendeeData;\nimport alfio.model.modification.DateTimeModification;\nimport alfio.model.modification.TicketCategoryModification;\nimport alfio.model.subscription.SubscriptionDescriptor;\nimport alfio.model.system.ConfigurationKeys;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.*;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.test.util.IntegrationTestUtil;\nimport alfio.util.ClockProvider;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.util.*;\n\nimport static alfio.controller.api.v1.SubscriptionApiV1IntegrationTest.modificationRequest;\nimport static alfio.model.system.ConfigurationKeys.OPENID_PUBLIC_ENABLED;\nimport static alfio.test.util.IntegrationTestUtil.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class, ControllerConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass ReservationApiV1ControllerTest {\n\n    private static final String DEFAULT_CATEGORY_NAME = \"default\";\n    private static final String ANONYMOUS_RESERVATION_URL_PREFIX = BASE_URL + \"/event\";\n    private static final String LOGGED_IN_RESERVATION_URL_PREFIX = BASE_URL + \"/openid/authentication\";\n    @Autowired\n    private ConfigurationRepository configurationRepository;\n    @Autowired\n    private ClockProvider clockProvider;\n    @Autowired\n    private OrganizationRepository organizationRepository;\n    @Autowired\n    private UserManager userManager;\n    @Autowired\n    private EventManager eventManager;\n    @Autowired\n    private EventRepository eventRepository;\n    @Autowired\n    private ReservationApiV1Controller controller;\n    @Autowired\n    private TicketCategoryRepository ticketCategoryRepository;\n    @Autowired\n    private TicketRepository ticketRepository;\n    @Autowired\n    private TicketReservationRepository ticketReservationRepository;\n    @Autowired\n    private SubscriptionApiV1Controller subscriptionApiV1Controller;\n    @Autowired\n    private SubscriptionRepository subscriptionRepository;\n\n    private Event event;\n    private String username;\n\n    @BeforeEach\n    void setUp() {\n        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n        List<TicketCategoryModification> categories = Arrays.asList(\n            new TicketCategoryModification(null, DEFAULT_CATEGORY_NAME, TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                new DateTimeModification(LocalDate.now(clockProvider.getClock()).minusDays(1), LocalTime.now(clockProvider.getClock())),\n                new DateTimeModification(LocalDate.now(clockProvider.getClock()).plusDays(1), LocalTime.now(clockProvider.getClock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()),\n            new TicketCategoryModification(null, \"hidden\", TicketCategory.TicketAccessType.INHERIT, 2,\n                new DateTimeModification(LocalDate.now(clockProvider.getClock()).minusDays(1), LocalTime.now(clockProvider.getClock())),\n                new DateTimeModification(LocalDate.now(clockProvider.getClock()).plusDays(1), LocalTime.now(clockProvider.getClock())),\n                DESCRIPTION, BigDecimal.ONE, true, \"\", true, null, null, null, null, null, 0, null, null, AlfioMetadata.empty())\n        );\n        Pair<Event, String> eventAndUser = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n        event = eventAndUser.getLeft();\n        username = UUID.randomUUID().toString();\n        userManager.insertUser(event.getOrganizationId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL);\n    }\n\n    @Test\n    void createSingleTicketWithMetadata() {\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 1, List.of(), List.of(firstTicketProperties));\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            new ReservationConfiguration(true),\n            null,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertTrue(StringUtils.startsWith(href, ANONYMOUS_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(1, tickets.size());\n        var metadata = ticketRepository.getTicketMetadata(tickets.get(0).getId());\n        assertNotNull(metadata);\n        var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n        assertTrue(attributes.isPresent());\n        assertEquals(firstTicketProperties, attributes.get().getAttributes());\n        var reservationMetadata = ticketReservationRepository.getMetadata(reservationId);\n        assertNotNull(reservationMetadata);\n        assertTrue(reservationMetadata.isHideContactData());\n    }\n\n    @Test\n    void createTwoTicketsWithMetadata() {\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 2, null, List.of(firstTicketProperties));\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            null,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertTrue(StringUtils.startsWith(href, ANONYMOUS_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(2, tickets.size());\n        assertEquals(1L, tickets.stream().filter(t -> {\n            var metadata = ticketRepository.getTicketMetadata(t.getId());\n            if (metadata == null) {\n                return false;\n            }\n            var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n            return attributes.isPresent() && attributes.get().getAttributes().equals(firstTicketProperties);\n        }).count());\n        var reservationMetadata = ticketReservationRepository.getMetadata(reservationId);\n        assertNotNull(reservationMetadata);\n        assertFalse(reservationMetadata.isHideContactData());\n    }\n\n    @Test\n    void createSingleTicketWithAuthenticatedUser() {\n        configurationRepository.insert(OPENID_PUBLIC_ENABLED.name(), \"true\", \"\");\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 1, List.of(), List.of(firstTicketProperties));\n        var user = new ReservationUser(\n            \"test@example.org\",\n            \"Test\",\n            \"McTest\",\n            \"test@example.org\",\n            \"EXTERNALID\"\n        );\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            user,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertTrue(StringUtils.startsWith(href, LOGGED_IN_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(1, tickets.size());\n        var metadata = ticketRepository.getTicketMetadata(tickets.get(0).getId());\n        assertNotNull(metadata);\n        var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n        assertTrue(attributes.isPresent());\n        assertEquals(firstTicketProperties, attributes.get().getAttributes());\n\n        var createdUser = userManager.findOptionalEnabledUserByUsername(\"test@example.org\");\n        assertTrue(createdUser.isPresent());\n        var reservations = ticketReservationRepository.findAllReservationsForUser(createdUser.get().getId());\n        assertFalse(reservations.isEmpty());\n        assertEquals(1, reservations.size());\n        assertEquals(reservationId, reservations.get(0).getId());\n    }\n\n    @Test\n    void createSingleTicketWithAttendees() {\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 1, List.of(\n            new AttendeeData(\"firstName\", \"lastName\", \"example@example.org\", firstTicketProperties)\n        ), null);\n        var user = new ReservationUser(\n            \"test@example.org\",\n            \"Test\",\n            \"McTest\",\n            \"test@example.org\",\n            \"EXTERNALID\"\n        );\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            user,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertFalse(StringUtils.startsWith(href, LOGGED_IN_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        var savedTicket = tickets.get(0);\n        assertEquals(1, tickets.size());\n        assertEquals(\"firstName\", savedTicket.getFirstName());\n        assertEquals(\"lastName\", savedTicket.getLastName());\n        assertEquals(\"example@example.org\", savedTicket.getEmail());\n        var metadata = ticketRepository.getTicketMetadata(savedTicket.getId());\n        assertNotNull(metadata);\n        var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n        assertTrue(attributes.isPresent());\n        assertEquals(firstTicketProperties, attributes.get().getAttributes());\n\n        var createdUser = userManager.findOptionalEnabledUserByUsername(\"test@example.org\");\n        assertFalse(createdUser.isPresent());\n    }\n\n    @Test\n    void createMultipleTicketsWithAttendees() {\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 2, List.of(\n            new AttendeeData(\"firstName\", \"lastName\", \"example@example.org\", firstTicketProperties),\n            new AttendeeData(\"firstName\", \"lastName\", \"example@example.org\", firstTicketProperties)\n        ), null);\n        var user = new ReservationUser(\n            \"test@example.org\",\n            \"Test\",\n            \"McTest\",\n            \"test@example.org\",\n            \"EXTERNALID\"\n        );\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            user,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertFalse(StringUtils.startsWith(href, LOGGED_IN_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(2, tickets.size());\n        tickets.forEach(savedTicket -> {\n            assertEquals(\"firstName\", savedTicket.getFirstName());\n            assertEquals(\"lastName\", savedTicket.getLastName());\n            assertEquals(\"example@example.org\", savedTicket.getEmail());\n            var metadata = ticketRepository.getTicketMetadata(savedTicket.getId());\n            assertNotNull(metadata);\n            var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n            assertTrue(attributes.isPresent());\n            assertEquals(firstTicketProperties, attributes.get().getAttributes());\n        });\n        var createdUser = userManager.findOptionalEnabledUserByUsername(\"test@example.org\");\n        assertFalse(createdUser.isPresent());\n    }\n\n    @Test\n    void createSingleTicketWithSubscriptionId() {\n        var subscriptionId = UUID.randomUUID().toString();\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 1, List.of(\n            new AttendeeData(\"firstName\", \"lastName\", \"example@example.org\", firstTicketProperties)\n        ), null);\n        var user = new ReservationUser(\n            \"test@example.org\",\n            \"Test\",\n            \"McTest\",\n            \"test@example.org\",\n            \"EXTERNALID\"\n        );\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            user,\n            null,\n            \"en\",\n            subscriptionId\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertFalse(StringUtils.startsWith(href, LOGGED_IN_RESERVATION_URL_PREFIX));\n        assertTrue(StringUtils.endsWith(href, \"subscription=\"+subscriptionId));\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(1, tickets.size());\n        tickets.forEach(savedTicket -> {\n            assertEquals(\"firstName\", savedTicket.getFirstName());\n            assertEquals(\"lastName\", savedTicket.getLastName());\n            assertEquals(\"example@example.org\", savedTicket.getEmail());\n            var metadata = ticketRepository.getTicketMetadata(savedTicket.getId());\n            assertNotNull(metadata);\n            var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n            assertTrue(attributes.isPresent());\n            assertEquals(firstTicketProperties, attributes.get().getAttributes());\n        });\n        var createdUser = userManager.findOptionalEnabledUserByUsername(\"test@example.org\");\n        assertFalse(createdUser.isPresent());\n    }\n\n    @Test\n    void createSubscriptionWithMetadata() {\n        configurationRepository.insert(ConfigurationKeys.STRIPE_PUBLIC_KEY.getValue(), \"pk\", \"\");\n        configurationRepository.insert(ConfigurationKeys.STRIPE_SECRET_KEY.getValue(), \"sk\", \"\");\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var creationResponse = subscriptionApiV1Controller.create(modificationRequest(SubscriptionDescriptor.SubscriptionUsageType.ONCE_PER_EVENT, true, clockProvider), principal);\n        assertTrue(creationResponse.getStatusCode().is2xxSuccessful());\n        assertNotNull(creationResponse.getBody());\n        var descriptorId = creationResponse.getBody();\n        var reservationRequest = new SubscriptionReservationCreationRequest(Map.of(\"key\", \"value\"),\n            new ReservationUser(\"test@test.org\", \"Test\", \"Test1\", \"test@test.org\", null),\n            \"en\",\n            new ReservationConfiguration(true),\n            null);\n        var reservationResponse = controller.createSubscriptionReservation(descriptorId, reservationRequest, principal);\n        assertTrue(reservationResponse.getStatusCode().is2xxSuccessful());\n        assertNotNull(reservationResponse.getBody());\n        var body = Objects.requireNonNull(reservationResponse.getBody());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        var reservation = ticketReservationRepository.findReservationById(reservationId);\n        assertEquals(\"Test\", reservation.getFirstName());\n        assertEquals(\"Test1\", reservation.getLastName());\n        assertEquals(\"test@test.org\", reservation.getEmail());\n        var subscriptions = subscriptionRepository.findSubscriptionsByReservationId(reservationId);\n        assertEquals(1, subscriptions.size());\n        var subscriptionId = subscriptions.get(0).getId();\n        var subscriptionMetadata = subscriptionRepository.getSubscriptionMetadata(subscriptionId);\n        assertNotNull(subscriptionMetadata);\n        assertNotNull(subscriptionMetadata.getProperties());\n        assertFalse(subscriptionMetadata.getProperties().isEmpty());\n        assertEquals(\"value\", subscriptionMetadata.getProperties().get(\"key\"));\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.v1;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.controller.api.ControllerConfiguration;\nimport alfio.controller.api.v1.admin.EventApiV1Controller;\nimport alfio.controller.api.v1.admin.SubscriptionApiV1Controller;\nimport alfio.manager.user.UserManager;\nimport alfio.model.PriceContainer;\nimport alfio.model.TicketCategory;\nimport alfio.model.api.v1.admin.EventCreationRequest;\nimport alfio.model.api.v1.admin.SubscriptionDescriptorModificationRequest;\nimport alfio.model.api.v1.admin.subscription.StandardPeriodTerm;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.DateTimeModification;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.modification.TicketCategoryModification;\nimport alfio.model.subscription.SubscriptionDescriptor;\nimport alfio.model.subscription.SubscriptionDescriptor.SubscriptionUsageType;\nimport alfio.model.transaction.PaymentProxy;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.SubscriptionRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.test.util.IntegrationTestUtil;\nimport alfio.util.ClockProvider;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.security.Principal;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport static alfio.model.subscription.SubscriptionDescriptor.SubscriptionUsageType.ONCE_PER_EVENT;\nimport static alfio.model.subscription.SubscriptionDescriptor.SubscriptionUsageType.UNLIMITED;\nimport static alfio.test.util.IntegrationTestUtil.AVAILABLE_SEATS;\nimport static alfio.test.util.IntegrationTestUtil.DESCRIPTION;\nimport static java.util.Objects.requireNonNull;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class, ControllerConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass SubscriptionApiV1IntegrationTest {\n\n    @Autowired\n    UserManager userManager;\n    @Autowired\n    OrganizationRepository organizationRepository;\n    @Autowired\n    ConfigurationRepository configurationRepository;\n    @Autowired\n    SubscriptionApiV1Controller controller;\n    @Autowired\n    EventApiV1Controller eventController;\n    @Autowired\n    ClockProvider clockProvider;\n    @Autowired\n    SubscriptionRepository subscriptionRepository;\n\n    SubscriptionDescriptor subscriptionDescriptor;\n\n    String username;\n    Principal principal;\n\n    @BeforeEach\n    public void ensureConfiguration() {\n        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n\n        var organizationName = UUID.randomUUID().toString();\n        this.username = UUID.randomUUID().toString();\n\n        var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n        userManager.createOrganization(organizationModification);\n        var organization = organizationRepository.findByName(organizationName).orElseThrow();\n        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL);\n\n        this.principal = Mockito.mock(Principal.class);\n        Mockito.when(principal.getName()).thenReturn(username);\n        var creationRequest = creationRequest();\n        var result = controller.create(creationRequest, principal);\n        assertTrue(result.getStatusCode().is2xxSuccessful());\n        assertNotNull(result.getBody());\n        var descriptorOptional = subscriptionRepository.findOne(UUID.fromString(result.getBody()));\n        assertTrue(descriptorOptional.isPresent());\n        this.subscriptionDescriptor = descriptorOptional.get();\n    }\n\n    @Test\n    void update() {\n        assertEquals(ONCE_PER_EVENT, subscriptionDescriptor.getUsageType());\n        assertTrue(subscriptionDescriptor.isPublic());\n\n        var updateRequest = modificationRequest(UNLIMITED, false);\n        var result = controller.update(subscriptionDescriptor.getId(), updateRequest, principal);\n        assertTrue(result.getStatusCode().is2xxSuccessful());\n        assertNotNull(result.getBody());\n        var uuid = UUID.fromString(result.getBody());\n        assertEquals(subscriptionDescriptor.getId(), uuid);\n        var updated = subscriptionRepository.findOne(uuid).orElseThrow();\n        assertEquals(UNLIMITED, updated.getUsageType());\n        assertFalse(updated.isPublic());\n    }\n\n    @Test\n    void deactivate() {\n        var result = controller.deactivate(subscriptionDescriptor.getId(), principal);\n        assertTrue(result.getStatusCode().is2xxSuccessful());\n        assertTrue(subscriptionRepository.findOne(subscriptionDescriptor.getId()).isEmpty());\n    }\n\n    @Test\n    void updateLinkedEvents() {\n        var eventCreateResponse = eventController.create(EventApiV1IntegrationTest.creationRequest(\"short-name\"), principal);\n        assertNotNull(eventCreateResponse.getBody());\n        var eventSlug = eventCreateResponse.getBody();\n        var descriptorId = subscriptionDescriptor.getId();\n        var response = controller.getLinkedEvents(descriptorId, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        assertTrue(requireNonNull(response.getBody()).isEmpty());\n        controller.updateLinkedEvents(descriptorId, List.of(eventSlug), principal);\n        response = controller.getLinkedEvents(descriptorId, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        assertEquals(List.of(eventSlug), response.getBody());\n    }\n\n\n\n    private SubscriptionDescriptorModificationRequest modificationRequest(SubscriptionUsageType usageType,\n                                                                          boolean isPublic) {\n        return modificationRequest(usageType, isPublic, clockProvider);\n    }\n\n    static SubscriptionDescriptorModificationRequest modificationRequest(SubscriptionUsageType usageType,\n                                                                         boolean isPublic,\n                                                                         ClockProvider clockProvider) {\n        return new SubscriptionDescriptorModificationRequest(\n            usageType,\n            SubscriptionDescriptorModificationRequest.TERM_STANDARD,\n            new StandardPeriodTerm(SubscriptionDescriptor.SubscriptionTimeUnit.MONTHS, 1),\n            List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"this is the title\")),\n            List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"this is the description\")),\n            null,\n            LocalDateTime.now(clockProvider.getClock()),\n            LocalDateTime.now(clockProvider.getClock()).plusMonths(5),\n            new BigDecimal(\"10.00\"),\n            new BigDecimal(\"7.7\"),\n            PriceContainer.VatStatus.INCLUDED,\n            \"CHF\",\n            isPublic,\n            \"https://alf.io/img/tutorials/check-in-app/003.png\",\n            \"https://alf.io\",\n            \"https://alf.io\",\n            \"Europe/Zurich\",\n            false,\n            List.of(PaymentProxy.STRIPE)\n        );\n    }\n\n    private SubscriptionDescriptorModificationRequest creationRequest() {\n        return modificationRequest(ONCE_PER_EVENT, true);\n    }\n\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.manager.system.ConfigurationLevel;\nimport alfio.manager.system.ConfigurationManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.Event;\nimport alfio.model.PurchaseContext;\nimport alfio.model.TicketCategory;\nimport alfio.model.TicketReservation;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.ConfigurationModification;\nimport alfio.model.modification.DateTimeModification;\nimport alfio.model.modification.EventModification;\nimport alfio.model.modification.TicketCategoryModification;\nimport alfio.model.modification.support.LocationDescriptor;\nimport alfio.model.system.Configuration;\nimport alfio.model.system.ConfigurationKeys;\nimport alfio.model.system.ConfigurationPathLevel;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.TicketCategoryRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.ZoneId;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static alfio.model.system.ConfigurationKeys.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass ConfigurationManagerIntegrationTest extends BaseIntegrationTest {\n\n    public static final String USERNAME = \"test\";\n\n    Event event;\n    TicketCategory ticketCategory;\n\n    @Autowired\n    private ConfigurationManager configurationManager;\n\n    @Autowired\n    private ConfigurationRepository configurationRepository;\n\n    @Autowired\n    private EventManager eventManager;\n\n    @Autowired\n    private OrganizationRepository organizationRepository;\n\n    @Autowired\n    private UserManager userManager;\n\n    @Autowired\n    private TicketCategoryRepository ticketCategoryRepository;\n\n    @BeforeEach\n    void prepareEnv() {\n        //setup...\n        organizationRepository.create(\"org\", \"org\", \"email@example.com\", null, null);\n        Organization organization = organizationRepository.findByName(\"org\").orElseThrow();\n\n        userManager.insertUser(organization.getId(), USERNAME, \"test\", \"test\", \"test@example.com\", Role.OWNER, User.Type.INTERNAL);\n\n        Map<String, String> desc = new HashMap<>();\n        desc.put(\"en\", \"muh description\");\n        desc.put(\"it\", \"muh description\");\n        desc.put(\"de\", \"muh description\");\n\n        List<TicketCategoryModification> ticketsCategory = List.of(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 20,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                Collections.singletonMap(\"en\", \"desc\"), BigDecimal.TEN, false, \"\", false, null, null,\n                null, null, null, 0, null, null, AlfioMetadata.empty()),\n            new TicketCategoryModification(null, \"second\", TicketCategory.TicketAccessType.INHERIT, 20,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                Collections.singletonMap(\"en\", \"desc\"), BigDecimal.TEN, false, \"\", false, null, null,\n                null, null, null, 0, null, null, AlfioMetadata.empty()));\n        EventModification em = new EventModification(null, Event.EventFormat.IN_PERSON, \"url\", \"url\", \"url\", null, null, null,\n            \"eventShortName\", \"displayName\", organization.getId(),\n            \"muh location\", \"0.0\", \"0.0\", ZoneId.systemDefault().getId(), desc,\n            new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n            new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n            BigDecimal.TEN, \"CHF\", 20, BigDecimal.ONE, true, null, ticketsCategory, false, new LocationDescriptor(\"\",\"\",\"\",\"\"), 7, null, null, AlfioMetadata.empty(), List.of());\n        eventManager.createEvent(em, USERNAME);\n\n        event = eventManager.getSingleEvent(\"eventShortName\", \"test\");\n        ticketCategory = ticketCategoryRepository.findAllTicketCategories(event.getId()).get(0);\n    }\n\n    @Test\n    void testPresentStringConfigValue() {\n        assertEquals(Optional.of(\"5\"), configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValue());\n    }\n\n    @Test\n    void testEmptyStringConfigValue() {\n        assertTrue(configurationManager.getFor(SMTP_PASSWORD, ConfigurationLevel.event(event)).getValue().isEmpty());\n    }\n\n    @Test\n    void testStringValueWithDefault() {\n        assertEquals(\"5\", configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getRequiredValue());\n        assertEquals(\"-1\", configurationManager.getFor(SMTP_PASSWORD, ConfigurationLevel.event(event)).getValueOrDefault(\"-1\"));\n    }\n\n    @Test\n    void testMissingConfigValue() {\n        assertThrows(IllegalArgumentException.class, () -> configurationManager.getFor(SMTP_PASSWORD, ConfigurationLevel.event(event)).getRequiredValue());\n    }\n\n    @Test\n    void testRequiredValue() {\n        assertEquals(\"5\", configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getRequiredValue());\n    }\n\n    @Test\n    void testIntValue() {\n        assertEquals(5, configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n        //missing value\n        assertEquals(-1, configurationManager.getFor(ASSIGNMENT_REMINDER_INTERVAL, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n\n        configurationManager.saveSystemConfiguration(ConfigurationKeys.BASE_URL, \"blabla\");\n        assertEquals(\"blabla\", configurationManager.getFor(ConfigurationKeys.BASE_URL, ConfigurationLevel.event(event)).getRequiredValue());\n        //not a number\n        assertEquals(-1, configurationManager.getFor(ConfigurationKeys.BASE_URL, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n    }\n\n    @Test\n    void testBooleanValue() {\n        //missing value\n        assertFalse(configurationManager.getFor(ALLOW_FREE_TICKETS_CANCELLATION, ConfigurationLevel.ticketCategory(event, ticketCategory.getId())).getValueAsBooleanOrDefault());\n\n        //false value\n        configurationManager.saveSystemConfiguration(ConfigurationKeys.ALLOW_FREE_TICKETS_CANCELLATION, \"false\");\n        assertFalse(configurationManager.getFor(ALLOW_FREE_TICKETS_CANCELLATION, ConfigurationLevel.ticketCategory(event, ticketCategory.getId())).getValueAsBooleanOrDefault());\n\n        //true value\n        configurationManager.saveSystemConfiguration(ConfigurationKeys.ALLOW_FREE_TICKETS_CANCELLATION, \"true\");\n        assertTrue(configurationManager.getFor(ALLOW_FREE_TICKETS_CANCELLATION, ConfigurationLevel.ticketCategory(event, ticketCategory.getId())).getValueAsBooleanOrDefault());\n    }\n\n    @Test\n    void testOverrideMechanism() {\n\n        Organization organization = organizationRepository.findByName(\"org\").orElseThrow();\n\n\n        Event event = eventManager.getSingleEvent(\"eventShortName\", \"test\");\n\n        TicketCategory tc = eventManager.loadTicketCategories(event).get(0);\n        //\n\n        //check override level up to event level\n\n        assertEquals(5, configurationManager.getFor(Collections.singleton(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION), ConfigurationLevel.event(event)).get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n\n        assertEquals(5, configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n        configurationRepository.insertOrganizationLevel(organization.getId(), MAX_AMOUNT_OF_TICKETS_BY_RESERVATION.getValue(), \"6\", \"desc\");\n\n        assertEquals(6, configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n        assertEquals(6, configurationManager.getFor(Collections.singleton(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION), ConfigurationLevel.event(event)).get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n\n        configurationRepository.insertEventLevel(organization.getId(), event.getId(), MAX_AMOUNT_OF_TICKETS_BY_RESERVATION.getValue(), \"7\", \"desc\");\n\n        assertEquals(7, configurationManager.getFor(Collections.singleton(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION), ConfigurationLevel.event(event)).get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n\n        configurationRepository.insertTicketCategoryLevel(organization.getId(), event.getId(), tc.getId(), MAX_AMOUNT_OF_TICKETS_BY_RESERVATION.getValue(), \"8\", \"desc\");\n\n        assertEquals(7, configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n    }\n\n    @Test\n    void testBasicConfigurationNotNeeded() {\n\n        configurationRepository.deleteByKey(ConfigurationKeys.BASE_URL.getValue());\n        configurationRepository.deleteByKey(ConfigurationKeys.SUPPORTED_LANGUAGES.getValue());\n\n        configurationRepository.insert(ConfigurationKeys.BASE_URL.getValue(), \"http://localhost:8080\", \"\");\n        configurationRepository.insert(ConfigurationKeys.SUPPORTED_LANGUAGES.getValue(), \"7\", \"\");\n        configurationRepository.insert(ConfigurationKeys.MAPS_CLIENT_API_KEY.getValue(), \"MAPS_CLIENT_API_KEY\", \"\");\n        configurationRepository.insert(ConfigurationKeys.MAILER_TYPE.getValue(), \"smtp\", \"\");\n        assertFalse(configurationManager.isBasicConfigurationNeeded());\n    }\n\n    @Test\n    void testSaveOnlyExistingConfiguration() {\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue(), \"MY-ACCOUNT_NUMBER\", \"empty\");\n        Configuration existing = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue()).orElseThrow(IllegalStateException::new);\n        Map<ConfigurationKeys.SettingCategory, List<Configuration>> all = configurationManager.loadOrganizationConfig(event.getOrganizationId(), USERNAME);\n        List<Configuration> flatten = all.entrySet().stream().flatMap(e -> e.getValue().stream()).toList();\n        List<ConfigurationModification> modified = flatten.stream().filter(c -> !c.getKey().equals(ConfigurationKeys.BANK_ACCOUNT_NR.getValue())).map(ConfigurationModification::fromConfiguration).collect(Collectors.toList());\n        modified.add(new ConfigurationModification(existing.getId(), existing.getKey(), \"NEW-NUMBER\"));\n        configurationManager.saveAllOrganizationConfiguration(event.getOrganizationId(), modified, USERNAME);\n        List<Configuration> organizationConfiguration = configurationRepository.findOrganizationConfiguration(event.getOrganizationId());\n        assertEquals(1, organizationConfiguration.size());\n        Optional<Configuration> result = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue());\n        assertTrue(result.isPresent());\n        Configuration configuration = result.get();\n        assertEquals(ConfigurationKeys.BANK_ACCOUNT_NR, configuration.getConfigurationKey());\n        assertEquals(\"NEW-NUMBER\", configuration.getValue());\n    }\n\n    @Test\n    void testSaveOnlyValidConfiguration() {\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue(), \"MY-ACCOUNT_NUMBER\", \"empty\");\n        Configuration existing = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue()).orElseThrow(IllegalStateException::new);\n        Map<ConfigurationKeys.SettingCategory, List<Configuration>> all = configurationManager.loadOrganizationConfig(event.getOrganizationId(), USERNAME);\n        List<Configuration> flatten = all.entrySet().stream().flatMap(e -> e.getValue().stream()).toList();\n        List<ConfigurationModification> modified = flatten.stream().filter(c -> !c.getKey().equals(ConfigurationKeys.BANK_ACCOUNT_NR.getValue()) && !c.getKey().equals(ConfigurationKeys.PARTIAL_RESERVATION_ID_LENGTH.getValue())).map(ConfigurationModification::fromConfiguration).collect(Collectors.toList());\n        modified.add(new ConfigurationModification(existing.getId(), existing.getKey(), \"NEW-NUMBER\"));\n        modified.add(new ConfigurationModification(-1, ConfigurationKeys.PARTIAL_RESERVATION_ID_LENGTH.getValue(), \"9\"));\n        configurationManager.saveAllOrganizationConfiguration(event.getOrganizationId(), modified, USERNAME);\n        List<Configuration> organizationConfiguration = configurationRepository.findOrganizationConfiguration(event.getOrganizationId());\n        assertEquals(2, organizationConfiguration.size());\n        Optional<Configuration> result = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue());\n        assertTrue(result.isPresent());\n        Configuration configuration = result.get();\n        assertEquals(ConfigurationKeys.BANK_ACCOUNT_NR, configuration.getConfigurationKey());\n        assertEquals(\"NEW-NUMBER\", configuration.getValue());\n        result = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.PARTIAL_RESERVATION_ID_LENGTH.getValue());\n        assertTrue(result.isPresent());\n        configuration = result.get();\n        assertEquals(ConfigurationKeys.PARTIAL_RESERVATION_ID_LENGTH, configuration.getConfigurationKey());\n        assertEquals(\"9\", configuration.getValue());\n    }\n\n    @Test\n    void testLoadOrganizationConfiguration() {\n        Map<ConfigurationKeys.SettingCategory, List<Configuration>> orgConf = configurationManager.loadOrganizationConfig(event.getOrganizationId(), USERNAME);\n        assertEquals(ConfigurationKeys.byPathLevel(ConfigurationPathLevel.ORGANIZATION).size(), orgConf.values().stream().mapToLong(Collection::size).sum());\n        String value = \"MY-ACCOUNT_NUMBER\";\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue(), value, \"empty\");\n        orgConf = configurationManager.loadOrganizationConfig(event.getOrganizationId(), USERNAME);\n        assertEquals(ConfigurationKeys.byPathLevel(ConfigurationPathLevel.ORGANIZATION).size(), orgConf.values().stream().mapToLong(Collection::size).sum());\n        assertEquals(value, orgConf.get(SettingCategory.PAYMENT_OFFLINE).stream().filter(c -> c.getConfigurationKey() == ConfigurationKeys.BANK_ACCOUNT_NR).findFirst().orElseThrow(IllegalStateException::new).getValue());\n    }\n\n    @Test\n    void testBasicConfigurationNeeded() {\n        configurationRepository.deleteByKey(ConfigurationKeys.BASE_URL.getValue());\n        assertTrue(configurationManager.isBasicConfigurationNeeded());\n    }\n\n    @Test\n    void testSaveBooleanOptions() {\n        String ftcKey = ALLOW_FREE_TICKETS_CANCELLATION.getValue();\n        configurationRepository.insert(ftcKey, \"false\", \"this should be updated to true\");\n        ConfigurationModification ftc = new ConfigurationModification(configurationRepository.findByKey(ftcKey).getId(), ftcKey, \"true\");\n\n        String prKey = ENABLE_PRE_REGISTRATION.getValue();\n        configurationRepository.insert(prKey, \"true\", \"this should be updated to false\");\n        ConfigurationModification pr = new ConfigurationModification(configurationRepository.findByKey(prKey).getId(), prKey, \"false\");\n\n        ConfigurationModification newTrue = new ConfigurationModification(-1, ENABLE_WAITING_QUEUE.getValue(), \"true\");\n        ConfigurationModification newFalse = new ConfigurationModification(-1, ENABLE_WAITING_QUEUE_NOTIFICATION.getValue(), \"false\");\n        ConfigurationModification newNull = new ConfigurationModification(-1, GOOGLE_ANALYTICS_ANONYMOUS_MODE.getValue(), null);\n\n        configurationManager.saveAllSystemConfiguration(Arrays.asList(ftc, pr, newTrue, newFalse, newNull));\n\n        Configuration cFtc = configurationRepository.findByKey(ftcKey);\n        assertNotNull(ftc);\n        assertEquals(\"true\", cFtc.getValue());\n\n        Configuration cPr = configurationRepository.findByKey(prKey);\n        assertNotNull(cPr);\n        assertEquals(\"false\", cPr.getValue());\n\n        Configuration nTrue = configurationRepository.findByKey(ENABLE_WAITING_QUEUE.getValue());\n        assertNotNull(nTrue);\n        assertEquals(\"true\", nTrue.getValue());\n\n        Configuration nFalse = configurationRepository.findByKey(ENABLE_WAITING_QUEUE_NOTIFICATION.getValue());\n        assertNotNull(nFalse);\n        assertEquals(\"false\", nFalse.getValue());\n\n        Optional<Configuration> opt = configurationRepository.findOptionalByKey(GOOGLE_ANALYTICS_ANONYMOUS_MODE.getValue());\n        assertFalse(opt.isPresent());\n\n    }\n\n    @Test\n    void testBulk() {\n        Event event = eventManager.getSingleEvent(\"eventShortName\", \"test\");\n\n        var res = configurationManager.getFor(Set.of(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ENABLE_WAITING_QUEUE, ENABLE_WAITING_QUEUE_NOTIFICATION), ConfigurationLevel.event(event));\n\n        assertEquals(3, res.size());\n        assertNotNull(res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION));\n        assertNotNull(res.get(ENABLE_WAITING_QUEUE));\n        assertNotNull(res.get(ENABLE_WAITING_QUEUE_NOTIFICATION));\n        assertTrue(res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).isPresent());\n        assertEquals(5, res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n        assertEquals(ConfigurationPathLevel.SYSTEM, res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getConfigurationPathLevelOrDefault(null));\n        assertFalse(res.get(ENABLE_WAITING_QUEUE).isPresent());\n        assertFalse(res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).isPresent());\n\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ENABLE_WAITING_QUEUE.getValue(), \"true\", \"\");\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ENABLE_WAITING_QUEUE_NOTIFICATION.getValue(), \"false\", \"\");\n\n\n        res = configurationManager.getFor(Set.of(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ENABLE_WAITING_QUEUE, ENABLE_WAITING_QUEUE_NOTIFICATION), ConfigurationLevel.event(event));\n        assertEquals(3, res.size());\n        assertTrue(res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).isPresent());\n        assertTrue(res.get(ENABLE_WAITING_QUEUE).isPresent());\n        assertTrue(res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).isPresent());\n\n        assertEquals(ConfigurationPathLevel.ORGANIZATION, res.get(ENABLE_WAITING_QUEUE).getConfigurationPathLevelOrDefault(null));\n        assertEquals(ConfigurationPathLevel.ORGANIZATION, res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).getConfigurationPathLevelOrDefault(null));\n        assertTrue(res.get(ENABLE_WAITING_QUEUE).getValueAsBooleanOrDefault());\n        assertFalse(res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).getValueAsBooleanOrDefault());\n\n\n        configurationRepository.insertEventLevel(event.getOrganizationId(), event.getId(), MAX_AMOUNT_OF_TICKETS_BY_RESERVATION.getValue(), \"20\", \"\");\n        configurationRepository.insertEventLevel(event.getOrganizationId(), event.getId(), ENABLE_WAITING_QUEUE.getValue(), \"true\", \"\");\n        configurationRepository.insertEventLevel(event.getOrganizationId(), event.getId(), ENABLE_WAITING_QUEUE_NOTIFICATION.getValue(), \"true\", \"\");\n\n        res = configurationManager.getFor(Set.of(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ENABLE_WAITING_QUEUE, ENABLE_WAITING_QUEUE_NOTIFICATION), ConfigurationLevel.event(event));\n\n        assertEquals(ConfigurationPathLevel.EVENT, res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getConfigurationPathLevelOrDefault(null));\n        assertEquals(20, res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n        assertEquals(ConfigurationPathLevel.EVENT, res.get(ENABLE_WAITING_QUEUE).getConfigurationPathLevelOrDefault(null));\n        assertEquals(ConfigurationPathLevel.EVENT, res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).getConfigurationPathLevelOrDefault(null));\n    }\n\n    @Test\n    void testBaseUrl() {\n        configurationRepository.insertEventLevel(event.getOrganizationId(), event.getId(), BASE_URL.getValue(), \"https://test/\", \"\");\n        assertEquals(\"https://test\", configurationManager.baseUrl(event));\n    }\n\n    @Test\n    void testSystemApiKeyGeneration() {\n        assertTrue(configurationRepository.findOptionalByKey(SYSTEM_API_KEY.name()).isEmpty());\n        // force generation\n        var apiKey = configurationManager.retrieveSystemApiKey(false);\n        assertNotNull(apiKey);\n        assertFalse(apiKey.isEmpty());\n        // retrieve again the same apiKey\n        var apiKey2 = configurationManager.retrieveSystemApiKey(false);\n        assertEquals(apiKey, apiKey2);\n        // force apiKey rotation\n        apiKey2 = configurationManager.retrieveSystemApiKey(true);\n        assertNotNull(apiKey2);\n        assertFalse(apiKey2.isEmpty());\n        assertNotEquals(apiKey, apiKey2);\n    }\n\n    @Test\n    void ensureNoErrorsWhenDeniedMethodsOptionIsEmpty() {\n        var categories = ticketCategoryRepository.findAllTicketCategories(event.getId());\n        // insert empty value\n        configurationRepository.insertTicketCategoryLevel(event.getOrganizationId(), event.getId(), categories.get(0).getId(), PAYMENT_METHODS_BLACKLIST.name(), \"\", \"\");\n        // try with single category\n        var deniedMethods = configurationManager.getBlacklistedMethodsForReservation(event, List.of(categories.get(0).getId()));\n        assertNotNull(deniedMethods);\n        assertTrue(deniedMethods.isEmpty());\n\n        // try with multiple categories\n        deniedMethods = configurationManager.getBlacklistedMethodsForReservation(event, categories.stream().map(TicketCategory::getId).collect(Collectors.toList()));\n        assertNotNull(deniedMethods);\n        assertTrue(deniedMethods.isEmpty());\n    }\n}", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager.system;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.manager.EventManager;\nimport alfio.manager.TicketReservationManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.*;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.*;\nimport alfio.model.modification.support.LocationDescriptor;\nimport alfio.model.system.EventMigration;\nimport alfio.model.transaction.PaymentProxy;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.EventRepository;\nimport alfio.repository.TicketCategoryRepository;\nimport alfio.repository.TicketRepository;\nimport alfio.repository.TicketReservationRepository;\nimport alfio.repository.system.EventMigrationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.apache.commons.lang3.time.DateUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass DataMigratorIntegrationTest extends BaseIntegrationTest {\n\n    private static final int AVAILABLE_SEATS = 20;\n    private static final Map<String, String> DESCRIPTION = Collections.singletonMap(\"en\", \"desc\");\n\n    @Autowired\n    private EventManager eventManager;\n    @Autowired\n    private EventRepository eventRepository;\n    @Autowired\n    private OrganizationRepository organizationRepository;\n    @Autowired\n    private UserManager userManager;\n    @Autowired\n    private TicketRepository ticketRepository;\n    @Autowired\n    private DataMigrator dataMigrator;\n    @Autowired\n    private EventMigrationRepository eventMigrationRepository;\n    @Autowired\n    private TicketReservationManager ticketReservationManager;\n    @Autowired\n    private TicketCategoryRepository ticketCategoryRepository;\n    @Autowired\n    private TicketReservationRepository ticketReservationRepository;\n    @Value(\"${alfio.version}\")\n    private String currentVersion;\n\n    private Pair<Event, String> initEvent(List<TicketCategoryModification> categories) {\n        return initEvent(categories, \"display name\");\n    }\n\n    private Pair<Event,String> initEvent(List<TicketCategoryModification> categories, String displayName) {\n        String organizationName = UUID.randomUUID().toString();\n        String username = UUID.randomUUID().toString();\n        String eventName = UUID.randomUUID().toString();\n\n        organizationRepository.create(organizationName, \"org\", \"email@example.com\", null, null);\n        Organization organization = organizationRepository.findByName(organizationName).get();\n        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.OPERATOR, User.Type.INTERNAL);\n\n        Map<String, String> desc = new HashMap<>();\n        desc.put(\"en\", \"muh description\");\n        desc.put(\"it\", \"muh description\");\n        desc.put(\"de\", \"muh description\");\n\n        EventModification em = new EventModification(null, Event.EventFormat.IN_PERSON, \"url\", \"url\", \"url\", \"privacy\", null, null,\n                eventName, displayName, organization.getId(),\n                \"muh location\",\n                \"0.0\", \"0.0\", ZoneId.systemDefault().getId(), desc,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(5), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(5), LocalTime.now(ClockProvider.clock()).plusHours(1)),\n                BigDecimal.TEN, \"CHF\", AVAILABLE_SEATS, BigDecimal.ONE, true, List.of(PaymentProxy.ON_SITE), categories, false, new LocationDescriptor(\"\",\"\",\"\",\"\"), 7, null, null, AlfioMetadata.empty(), List.of());\n        eventManager.createEvent(em, username);\n        return Pair.of(eventManager.getSingleEvent(eventName, username), username);\n    }\n\n    @Test\n    void testMigration() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories);\n        Event event = eventUsername.getKey();\n\n        try {\n\t        eventRepository.updatePrices(\"CHF\", 40, false, BigDecimal.ONE, \"STRIPE\", event.getId(), PriceContainer.VatStatus.NOT_INCLUDED, 1000);\n\n\t        dataMigrator.migrateEventsToCurrentVersion();\n\t        EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId());\n\t        assertNotNull(eventMigration);\n\t        //assertEquals(buildTimestamp, eventMigration.getBuildTimestamp().toString());\n\t        assertEquals(currentVersion, eventMigration.getCurrentVersion());\n\n\t        List<Ticket> tickets = ticketRepository.findFreeByEventId(event.getId());\n\t        assertNotNull(tickets);\n\t        assertFalse(tickets.isEmpty());\n\t        assertEquals(AVAILABLE_SEATS, tickets.size());\n\t        assertTrue(tickets.stream().allMatch(t -> t.getCategoryId() == null));\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testMigrationWithExistingRecord() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories); \n        Event event = eventUsername.getKey();\n\n        try {\n\t        eventMigrationRepository.insertMigrationData(event.getId(), \"1.4\", ZonedDateTime.now(ZoneId.of(\"UTC\")).minusDays(1), EventMigration.Status.COMPLETE.toString());\n\t        eventRepository.updatePrices(\"CHF\", 40, false, BigDecimal.ONE, \"STRIPE\", event.getId(), PriceContainer.VatStatus.NOT_INCLUDED, 1000);\n\t        dataMigrator.migrateEventsToCurrentVersion();\n\t        EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId());\n\t        assertNotNull(eventMigration);\n\t        //assertEquals(buildTimestamp, eventMigration.getBuildTimestamp().toString());\n\t        assertEquals(currentVersion, eventMigration.getCurrentVersion());\n\t\n\t        List<Ticket> tickets = ticketRepository.findFreeByEventId(event.getId());\n\t        assertNotNull(tickets);\n\t        assertFalse(tickets.isEmpty());\n\t        assertEquals(20, tickets.size());\n\t        assertTrue(tickets.stream().allMatch(t -> t.getCategoryId() == null));\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testAlreadyMigratedEvent() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories); \n        Event event = eventUsername.getKey();\n        \n        try {\n\t        ZonedDateTime migrationTs = ZonedDateTime.now(ZoneId.of(\"UTC\"));\n\t        eventMigrationRepository.insertMigrationData(event.getId(), currentVersion, migrationTs, EventMigration.Status.COMPLETE.toString());\n\t        eventRepository.updatePrices(\"CHF\", 40, false, BigDecimal.ONE, \"STRIPE\", event.getId(), PriceContainer.VatStatus.NOT_INCLUDED, 1000);\n\t        dataMigrator.migrateEventsToCurrentVersion();\n\t        EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId());\n\t        assertNotNull(eventMigration);\n\t        //assertEquals(migrationTs.toString(), eventMigration.getBuildTimestamp().toString());\n\t        assertEquals(currentVersion, eventMigration.getCurrentVersion());\n\t\n\t        List<Ticket> tickets = ticketRepository.findFreeByEventId(event.getId());\n\t        assertNotNull(tickets);\n\t        assertFalse(tickets.isEmpty());\n\t        assertEquals(AVAILABLE_SEATS, tickets.size());//<-- the migration has not been done\n\t        assertTrue(tickets.stream().allMatch(t -> t.getCategoryId() == null));\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testUpdateDisplayName() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories, null); \n        Event event = eventUsername.getKey();\n\n        try {\n\t        dataMigrator.migrateEventsToCurrentVersion();\n\t        EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId());\n\t        assertNotNull(eventMigration);\n\t        //assertEquals(buildTimestamp, eventMigration.getBuildTimestamp().toString());\n\t        assertEquals(currentVersion, eventMigration.getCurrentVersion());\n\t\n\t        Event withDescription = eventRepository.findById(event.getId());\n\t        assertNotNull(withDescription.getDisplayName());\n\t        assertEquals(event.getShortName(), withDescription.getShortName());\n\t        assertEquals(event.getShortName(), withDescription.getDisplayName());\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testUpdateTicketReservation() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories); \n        Event event = eventUsername.getKey();\n        try {\n\t        TicketReservationModification trm = new TicketReservationModification();\n\t        trm.setQuantity(1);\n\t        trm.setTicketCategoryId(eventManager.loadTicketCategories(event).get(0).getId());\n\t        TicketReservationWithOptionalCodeModification r = new TicketReservationWithOptionalCodeModification(trm, Optional.empty());\n\t        Date expiration = DateUtils.addDays(new Date(), 1);\n\t        String reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(r), Collections.emptyList(), expiration, Optional.empty(), Locale.ENGLISH, false, null);\n\t        dataMigrator.fillReservationsLanguage();\n\t        TicketReservation ticketReservation = ticketReservationManager.findById(reservationId).get();\n\t        assertEquals(\"en\", ticketReservation.getUserLanguage());\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testFixCategoriesSize() {\n        List<TicketCategoryModification> categories = Arrays.asList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS -1,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", true, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()),\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 1,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories);\n        Event event = eventUsername.getKey();\n        TicketCategory firstCategory = ticketCategoryRepository.findAllTicketCategories(event.getId()).stream().filter(TicketCategory::isBounded).findFirst().orElseThrow(IllegalStateException::new);\n        int firstCategoryID = firstCategory.getId();\n        ticketCategoryRepository.updateSeatsAvailability(firstCategoryID, AVAILABLE_SEATS + 1);\n        dataMigrator.fixCategoriesSize(event);\n        assertEquals(AVAILABLE_SEATS - 1, ticketRepository.countAllocatedTicketsForEvent(event.getId()).intValue());\n        assertEquals(1, ticketRepository.countFreeTicketsForUnbounded(event.getId()).intValue());\n        assertEquals(AVAILABLE_SEATS - 1, ticketRepository.countFreeTickets(event.getId(), firstCategoryID).intValue());\n        assertEquals(AVAILABLE_SEATS - 1, firstCategory.getMaxTickets());\n    }\n\n    @Test\n    void testFixStuckTickets() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories);\n        Event event = eventUsername.getKey();\n        TicketReservationModification trm = new TicketReservationModification();\n        trm.setQuantity(1);\n        trm.setTicketCategoryId(eventManager.loadTicketCategories(event).get(0).getId());\n        TicketReservationWithOptionalCodeModification r = new TicketReservationWithOptionalCodeModification(trm, Optional.empty());\n        Date expiration = DateUtils.addDays(new Date(), 1);\n        String reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(r), Collections.emptyList(), expiration, Optional.empty(), Locale.ENGLISH, false, null);\n        //simulate the effect of a reservation cancellation after #392, as described in #391\n        ticketReservationRepository.updateReservationStatus(reservationId, TicketReservation.TicketReservationStatus.CANCELLED.name());\n        List<Ticket> ticketsInReservation = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(1, ticketsInReservation.size());\n        String uuid = ticketsInReservation.get(0).getUuid();\n        assertTrue(ticketsInReservation.stream().allMatch(t -> t.getStatus() == Ticket.TicketStatus.PENDING));\n        dataMigrator.fixStuckTickets(event.getId());\n        assertSame(Ticket.TicketStatus.RELEASED, ticketRepository.findByUUID(uuid).getStatus());\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.test.util;\n\nimport alfio.manager.EventManager;\nimport alfio.manager.FileUploadManager;\nimport alfio.manager.SubscriptionManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.AllocationStatus;\nimport alfio.model.Event;\nimport alfio.model.PriceContainer;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.*;\nimport alfio.model.modification.support.LocationDescriptor;\nimport alfio.model.subscription.SubscriptionDescriptor;\nimport alfio.model.system.ConfigurationKeys;\nimport alfio.model.transaction.PaymentProxy;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.EventRepository;\nimport alfio.repository.SubscriptionRepository;\nimport alfio.repository.TicketReservationRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.AuthorityRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.repository.user.UserRepository;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.Assertions;\n\nimport java.math.BigDecimal;\nimport java.time.*;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class IntegrationTestUtil {\n\n    public static final int AVAILABLE_SEATS = 20;\n\n    public static final Map<String, Map<String, String>> DB_CONF = new HashMap<>();\n    public static final Map<String, String> DESCRIPTION = Collections.singletonMap(\"en\", \"desc\");\n    public static final String BASE_URL = \"http://localhost:8080\";\n\n    static {\n        DB_CONF.put(\"PGSQL\", generateDBConfig(\"jdbc:postgresql://localhost:5432/alfio\", \"postgres\", \"password\"));\n        DB_CONF.put(\"PGSQL-TRAVIS\", generateDBConfig(\"jdbc:postgresql://localhost:5432/alfio\", \"alfio_user\", \"password\"));\n    }\n\n    public static Map<String, String> generateDBConfig(String url, String username, String password) {\n        Map<String, String> c = new HashMap<>();\n        c.put(\"datasource.url\", url);\n        c.put(\"datasource.username\", username);\n        c.put(\"datasource.password\", password);\n        return c;\n    }\n\n    public static void ensureMinimalConfiguration(ConfigurationRepository configurationRepository) {\n        configurationRepository.deleteByKey(ConfigurationKeys.BASE_URL.getValue());\n        configurationRepository.deleteByKey(ConfigurationKeys.SUPPORTED_LANGUAGES.getValue());\n\n        configurationRepository.insert(ConfigurationKeys.BASE_URL.getValue(), BASE_URL, \"\");\n        configurationRepository.insert(ConfigurationKeys.SUPPORTED_LANGUAGES.getValue(), \"7\", \"\");\n\n\n        configurationRepository.deleteByKey(ConfigurationKeys.INVOICE_ADDRESS.getValue());\n        configurationRepository.insert(ConfigurationKeys.INVOICE_ADDRESS.getValue(), \"INVOICE_ADDRESS\", \"\");\n        configurationRepository.deleteByKey(ConfigurationKeys.VAT_NR.getValue());\n        configurationRepository.insert(ConfigurationKeys.VAT_NR.getValue(), \"42\", \"\");\n    }\n\n    public static Pair<Event, String> initEvent(List<TicketCategoryModification> categories,\n                                                OrganizationRepository organizationRepository,\n                                                UserManager userManager,\n                                                EventManager eventManager,\n                                                EventRepository eventRepository) {\n        return initEvent(categories, organizationRepository, userManager, eventManager, eventRepository, null, Event.EventFormat.IN_PERSON);\n    }\n\n    public static Pair<Event, String> initEvent(List<TicketCategoryModification> categories,\n                                                OrganizationRepository organizationRepository,\n                                                UserManager userManager,\n                                                EventManager eventManager,\n                                                EventRepository eventRepository,\n                                                List<EventModification.AdditionalService> additionalServices,\n                                                Event.EventFormat eventFormat) {\n\n        return initEvent(categories, organizationRepository, userManager, eventManager, eventRepository, additionalServices, eventFormat, PriceContainer.VatStatus.INCLUDED);\n    }\n\n    public static Pair<Event, String> initEvent(List<TicketCategoryModification> categories,\n                                                OrganizationRepository organizationRepository,\n                                                UserManager userManager,\n                                                EventManager eventManager,\n                                                EventRepository eventRepository,\n                                                List<EventModification.AdditionalService> additionalServices,\n                                                Event.EventFormat eventFormat,\n                                                PriceContainer.VatStatus eventVatStatus) {\n        String organizationName = UUID.randomUUID().toString();\n        String username = UUID.randomUUID().toString();\n        String eventName = UUID.randomUUID().toString();\n\n        var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n        userManager.createOrganization(organizationModification);\n        Organization organization = organizationRepository.findByName(organizationName).orElseThrow();\n        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.OPERATOR, User.Type.INTERNAL);\n        userManager.insertUser(organization.getId(), username+\"_owner\", \"test\", \"test\", \"test@example.com\", Role.OWNER, User.Type.INTERNAL);\n\n        LocalDateTime expiration = LocalDateTime.now(ClockProvider.clock()).plusDays(5).plusHours(1);\n\n        Map<String, String> desc = new HashMap<>();\n        desc.put(\"en\", \"muh description\");\n        desc.put(\"it\", \"muh description\");\n        desc.put(\"de\", \"muh description\");\n\n        EventModification em = new EventModification(null, eventFormat, \"url\", \"url\", \"url\", \"privacy\",\"url\", null,\n            eventName, \"event display name\", organization.getId(),\n            \"muh location\", \"0.0\", \"0.0\", ClockProvider.clock().getZone().getId(), desc,\n            new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(5), LocalTime.now(ClockProvider.clock())),\n            new DateTimeModification(expiration.toLocalDate(), expiration.toLocalTime()),\n            BigDecimal.TEN, \"CHF\", AVAILABLE_SEATS, BigDecimal.ONE, PriceContainer.VatStatus.isVatIncluded(eventVatStatus), Collections.singletonList(PaymentProxy.OFFLINE), categories, false, new LocationDescriptor(\"\",\"\",\"\",\"\"), 7, null, additionalServices, AlfioMetadata.empty(), List.of());\n        eventManager.createEvent(em, username);\n        Event event = eventManager.getSingleEvent(eventName, username);\n        Assertions.assertEquals(AVAILABLE_SEATS, eventRepository.countExistingTickets(event.getId()).intValue());\n        return Pair.of(event, username);\n    }\n\n    public static void initAdminUser(UserRepository userRepository, AuthorityRepository authorityRepository) {\n        userRepository.create(UserManager.ADMIN_USERNAME, \"\", \"The\", \"Administrator\", \"admin@localhost\", true, User.Type.INTERNAL, null, null);\n        authorityRepository.create(UserManager.ADMIN_USERNAME, Role.ADMIN.getRoleName());\n    }\n\n    public static void removeAdminUser(UserRepository userRepository, AuthorityRepository authorityRepository) {\n        authorityRepository.revokeAll(UserManager.ADMIN_USERNAME);\n        userRepository.deleteUser(userRepository.findIdByUserName(UserManager.ADMIN_USERNAME).orElseThrow());\n    }\n\n    public static UUID createSubscriptionDescriptor(int organizationId,\n                                                    FileUploadManager fileUploadManager,\n                                                    SubscriptionManager subscriptionManager,\n                                                    int maxEntries) {\n        var uploadFileForm = new UploadBase64FileModification();\n        uploadFileForm.setFile(BaseIntegrationTest.ONE_PIXEL_BLACK_GIF);\n        uploadFileForm.setName(\"my-image.gif\");\n        uploadFileForm.setType(\"image/gif\");\n        String fileBlobId = fileUploadManager.insertFile(uploadFileForm);\n        var subscriptionModification = new SubscriptionDescriptorModification(null,\n            Map.of(\"en\", \"title\"),\n            Map.of(\"en\", \"description\"),\n            42,\n            ZonedDateTime.now(ClockProvider.clock()),\n            null,\n            BigDecimal.TEN,\n            new BigDecimal(\"7.7\"),\n            PriceContainer.VatStatus.INCLUDED,\n            \"CHF\",\n            false,\n            organizationId,\n            maxEntries,\n            SubscriptionDescriptor.SubscriptionValidityType.CUSTOM,\n            null,\n            null,\n            ZonedDateTime.now(ClockProvider.clock()).minusDays(1),\n            ZonedDateTime.now(ClockProvider.clock()).plusDays(42),\n            SubscriptionDescriptor.SubscriptionUsageType.ONCE_PER_EVENT,\n            \"https://example.org\",\n            null,\n            fileBlobId,\n            List.of(PaymentProxy.STRIPE),\n            ClockProvider.clock().getZone(),\n            false);\n\n        return subscriptionManager.createSubscriptionDescriptor(subscriptionModification).orElseThrow();\n    }\n\n    public static Pair<UUID, String> confirmAndLinkSubscription(SubscriptionDescriptor descriptor,\n                                                                int organizationId,\n                                                                SubscriptionRepository subscriptionRepository,\n                                                                TicketReservationRepository ticketReservationRepository,\n                                                                int maxEntries) {\n        assertTrue(subscriptionRepository.updatePriceForSubscriptions(descriptor.getId(), descriptor.getPrice() + 1) > 0);\n        var zoneId = ClockProvider.clock().getZone();\n        var subscriptionId = subscriptionRepository.selectFreeSubscription(descriptor.getId()).orElseThrow();\n        var subscriptionReservationId = UUID.randomUUID().toString();\n        ticketReservationRepository.createNewReservation(subscriptionReservationId, ZonedDateTime.now(ClockProvider.clock()), Date.from(Instant.now(ClockProvider.clock())), null, \"en\", null, new BigDecimal(\"7.7\"), true, \"CHF\", organizationId, null);\n        subscriptionRepository.bindSubscriptionToReservation(subscriptionReservationId, descriptor.getPrice(), AllocationStatus.PENDING, subscriptionId);\n        subscriptionRepository.confirmSubscription(subscriptionReservationId, AllocationStatus.ACQUIRED,\n            \"Test\", \"Mc Test\", \"tickettest@test.com\", maxEntries,\n            null, null, ZonedDateTime.now(ClockProvider.clock()), zoneId.toString());\n        var subscription = subscriptionRepository.findSubscriptionById(subscriptionId);\n        assertEquals(descriptor.getPrice(), subscription.getSrcPriceCts());\n        return Pair.of(subscriptionId, subscription.getPin());\n    }\n}\n"], "fixing_code": ["/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.config.authentication.support;\n\nimport alfio.manager.user.UserManager;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher;\nimport org.springframework.security.web.util.matcher.RequestMatcher;\nimport org.springframework.web.filter.GenericFilterBean;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\nimport java.util.UUID;\n\n// generate a user if it does not exist, to be used by the demo profile\npublic class UserCreatorBeforeLoginFilter extends GenericFilterBean {\n\n    private final UserManager userManager;\n    private final RequestMatcher requestMatcher;\n\n    public UserCreatorBeforeLoginFilter(UserManager userManager, String loginProcessingUrl) {\n        this.userManager = userManager;\n        this.requestMatcher = new AntPathRequestMatcher(loginProcessingUrl, \"POST\");\n    }\n\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest req = (HttpServletRequest) request;\n\n        //ensure organization/user\n        if (requestMatcher.matches(req) && req.getParameter(\"username\") != null && req.getParameter(\"password\") != null) {\n            String username = req.getParameter(\"username\");\n            if (!userManager.usernameExists(username)) {\n                var organizationModification = new OrganizationModification(null, UUID.randomUUID().toString(), username, username, null, null);\n                int orgId = userManager.createOrganization(organizationModification, null);\n                userManager.insertUser(orgId, username, \"\", \"\", username, Role.OWNER, User.Type.DEMO, req.getParameter(\"password\"), null, null, null);\n            }\n        }\n\n        chain.doFilter(request, response);\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.admin;\n\nimport alfio.config.authentication.support.AuthenticationConstants;\nimport alfio.manager.system.ConfigurationManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.modification.UserModification;\nimport alfio.model.result.ValidationResult;\nimport alfio.model.system.ConfigurationKeys;\nimport alfio.model.user.*;\nimport alfio.util.ImageUtil;\nimport alfio.util.Json;\nimport com.fasterxml.jackson.annotation.JsonCreator;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport lombok.Getter;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.util.StreamUtils;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.security.Principal;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\nimport static org.apache.commons.lang3.StringUtils.defaultString;\nimport static org.apache.commons.lang3.StringUtils.trimToNull;\n\n@RestController\n@RequestMapping(\"/admin/api\")\npublic class UsersApiController {\n\n    private static final Logger log = LoggerFactory.getLogger(UsersApiController.class);\n\n    private static final String OK = \"OK\";\n    private final UserManager userManager;\n    private final ConfigurationManager configurationManager;\n\n    public UsersApiController(UserManager userManager, ConfigurationManager configurationManager) {\n        this.userManager = userManager;\n        this.configurationManager = configurationManager;\n    }\n\n    @ExceptionHandler(Exception.class)\n    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n    @ResponseBody\n    public String unhandledException(Exception e) {\n        log.error(\"unhandled exception\", e);\n        return e != null ? e.getMessage() : \"Unexpected error\";\n    }\n\n    @GetMapping(\"/roles\")\n    public Collection<RoleDescriptor> getAllRoles(Principal principal) {\n        return userManager.getAvailableRoles(principal.getName()).stream().map(RoleDescriptor::new).collect(Collectors.toList());\n    }\n\n    /**\n     * This endpoint is intended only for external use. If a user is registered as \"sponsor\", then the answer will be \"SPONSOR\", otherwise \"OPERATOR\".\n     * @return \"SPONSOR\", \"SUPERVISOR\", or \"OPERATOR\", depending on current user's privileges.\n     */\n    @GetMapping(\"/user-type\")\n    public String getLoggedUserType() {\n        var authorities = SecurityContextHolder.getContext()\n            .getAuthentication()\n            .getAuthorities()\n            .stream()\n            .map(ga -> StringUtils.substringAfter(ga.getAuthority(), \"ROLE_\"))\n            .collect(Collectors.toSet());\n        if (authorities.contains(AuthenticationConstants.SPONSOR)) {\n            return AuthenticationConstants.SPONSOR;\n        } else if (authorities.contains(AuthenticationConstants.SUPERVISOR)) {\n            return AuthenticationConstants.SUPERVISOR;\n        } else {\n            return AuthenticationConstants.OPERATOR;\n        }\n    }\n\n    @GetMapping(\"/user/details\")\n    public Map<String, String> retrieveDetails(Principal principal) {\n        User user = userManager.findUserByUsername(principal.getName());\n        Map<String, String> result = new HashMap<>();\n        boolean isApiKey = user.getType() == User.Type.API_KEY;\n        result.put(isApiKey ? \"apiKey\" : \"username\", user.getUsername());\n        if(!isApiKey) {\n            result.put(\"firstName\", user.getFirstName());\n            result.put(\"lastName\", user.getLastName());\n        }\n        result.put(\"description\", user.getDescription());\n        result.put(\"userType\", getLoggedUserType());\n        return result;\n    }\n\n    @GetMapping(\"/organizations\")\n    @ResponseStatus(HttpStatus.OK)\n    public List<Organization> getAllOrganizations(Principal principal) {\n        return userManager.findUserOrganizations(principal.getName());\n    }\n\n    @GetMapping(\"/organizations/{id}\")\n    public Organization getOrganization(@PathVariable(\"id\") int id, Principal principal) {\n        return userManager.findOrganizationById(id, principal.getName());\n    }\n\n    @GetMapping(\"/users\")\n    public List<UserWithOrganizations> getAllUsers(Principal principal) {\n        return userManager.findAllUsers(principal.getName());\n    }\n\n    @PostMapping(\"/api-keys/bulk\")\n    public ResponseEntity<String> bulkCreate(@RequestBody BulkApiKeyCreation request, Principal principal) {\n        Optional<User> userOptional = userManager.findOptionalEnabledUserByUsername(principal.getName())\n            .filter(u -> userManager.isOwnerOfOrganization(u, request.organizationId));\n        if(userOptional.isPresent()) {\n            userManager.bulkInsertApiKeys(request.organizationId, request.role, request.descriptions, principal);\n            return ResponseEntity.ok(\"OK\");\n        }\n        return ResponseEntity.badRequest().build();\n    }\n\n    @PostMapping(\"/organizations/new\")\n    public String insertOrganization(@RequestBody OrganizationModification om, Principal principal) {\n        userManager.createOrganization(om, principal);\n        return OK;\n    }\n\n    @PostMapping(\"/organizations/update\")\n    public String updateOrganization(@RequestBody OrganizationModification om, Principal principal) {\n        userManager.updateOrganization(om, principal);\n        return OK;\n    }\n\n    @PostMapping(\"/organizations/check\")\n    public ValidationResult validateOrganization(@RequestBody OrganizationModification om, Principal principal) {\n        return userManager.validateOrganization(om, principal);\n    }\n\n    @PostMapping(\"/organizations/validate-slug\")\n    public ValidationResult validateSlug(@RequestBody OrganizationModification om, Principal principal) {\n        return userManager.validateOrganizationSlug(om, principal);\n    }\n\n    @PostMapping(\"/users/check\")\n    public ValidationResult validateUser(@RequestBody UserModification userModification) {\n        if(userModification.getType() == User.Type.API_KEY) {\n            return ValidationResult.success();\n        } else {\n            return userManager.validateUser(userModification.getId(), userModification.getUsername(),\n                    userModification.getFirstName(), userModification.getLastName(), userModification.getEmailAddress());\n        }\n    }\n\n    @PostMapping(\"/users/edit\")\n    public String editUser(@RequestBody UserModification userModification, Principal principal) {\n        userManager.editUser(userModification.getId(), userModification.getOrganizationId(),\n            userModification.getUsername(), userModification.getFirstName(), userModification.getLastName(),\n            userModification.getEmailAddress(), userModification.getDescription(),\n            Role.valueOf(userModification.getRole()), principal);\n        return OK;\n    }\n\n    @PostMapping(\"/users/new\")\n    public UserWithPasswordAndQRCode insertUser(@RequestBody UserModification userModification, @RequestParam(\"baseUrl\") String baseUrl, Principal principal) {\n        Role requested = Role.valueOf(userModification.getRole());\n        Validate.isTrue(userManager.getAvailableRoles(principal.getName()).stream().anyMatch(requested::equals), String.format(\"Requested role %s is not available for current user\", userModification.getRole()));\n        User.Type type = userModification.getType();\n        UserWithPassword userWithPassword = userManager.insertUser(userModification.getOrganizationId(), userModification.getUsername(),\n            userModification.getFirstName(), userModification.getLastName(),\n            userModification.getEmailAddress(), requested,\n            type == null ? User.Type.INTERNAL : type,\n            userModification.getValidToAsDateTime(), userModification.getDescription(), principal);\n        String qrCode = type != User.Type.API_KEY ? Base64.getEncoder().encodeToString(generateQRCode(userWithPassword, baseUrl)) : null;\n        return new UserWithPasswordAndQRCode(userWithPassword, qrCode);\n    }\n\n    @GetMapping(\"/api-keys/organization/{organizationId}/all\")\n    public void getAllApiKeys(@PathVariable(\"organizationId\") int organizationId, HttpServletResponse response, Principal principal) throws IOException {\n        String username = principal.getName();\n        if(userManager.isOwnerOfOrganization(username, organizationId)) {\n            response.setContentType(\"application/zip\");\n            response.setHeader(\"Content-Disposition\", \"attachment; filename=apiKeys.zip\");\n\n            String baseUrl = configurationManager.getForSystem(ConfigurationKeys.BASE_URL).getRequiredValue();\n            try(OutputStream os = response.getOutputStream(); ZipOutputStream zipOS = new ZipOutputStream(os)) {\n                for (User user : userManager.findAllApiKeysFor(organizationId)) {\n                    Pair<String, byte[]> result = generateApiKeyQRCode(user, baseUrl);\n                    zipOS.putNextEntry(new ZipEntry(user.getType().name() + \"-\" +result.getLeft()+\".png\"));\n                    StreamUtils.copy(result.getRight(), zipOS);\n                }\n            }\n        } else {\n            response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n        }\n    }\n\n    private static Pair<String, byte[]> generateApiKeyQRCode(User user, String baseUrl) {\n        Map<String, String> info = new HashMap<>();\n        info.put(\"apiKey\", user.getUsername());\n        info.put(\"baseUrl\", baseUrl);\n        String description = defaultString(trimToNull(user.getDescription()), user.getUsername());\n        return Pair.of(description, ImageUtil.createQRCodeWithDescription(Json.GSON.toJson(info), description));\n    }\n\n    private static byte[] generateQRCode(UserWithPassword userWithPassword, String baseUrl) {\n        Map<String, Object> info = new HashMap<>();\n        info.put(\"username\", userWithPassword.getUsername());\n        info.put(\"password\", userWithPassword.getPassword());\n        info.put(\"baseUrl\", baseUrl);\n        return ImageUtil.createQRCode(Json.GSON.toJson(info));\n    }\n\n    @DeleteMapping(\"/users/{id}\")\n    public String deleteUser(@PathVariable(\"id\") int userId, Principal principal) {\n        userManager.deleteUser(userId, principal);\n        return OK;\n    }\n\n    @PostMapping(\"/users/{id}/enable/{enable}\")\n    public String enableUser(@PathVariable(\"id\") int userId, @PathVariable(\"enable\")boolean enable, Principal principal) {\n        userManager.enable(userId, enable, principal);\n        return OK;\n    }\n\n    @GetMapping(\"/users/{id}\")\n    public UserModification loadUser(@PathVariable(\"id\") int userId) {\n        User user = userManager.findUser(userId);\n        List<Organization> userOrganizations = userManager.findUserOrganizations(user.getUsername());\n        return new UserModification(user.getId(), userOrganizations.get(0).getId(), userManager.getUserRole(user).name(),\n            user.getUsername(), user.getFirstName(), user.getLastName(), user.getEmailAddress(),\n            user.getType(), user.getValidToEpochSecond(), user.getDescription());\n    }\n\n    @GetMapping(\"/users/current\")\n    public UserModification loadCurrentUser(Principal principal) {\n        User user = userManager.findUserByUsername(principal.getName());\n        Optional<Organization> userOrganization = userManager.findUserOrganizations(user.getUsername()).stream().findFirst();\n        return new UserModification(user.getId(), userOrganization.map(Organization::getId).orElse(-1),\n            userManager.getUserRole(user).name(), user.getUsername(), user.getFirstName(), user.getLastName(),\n            user.getEmailAddress(), user.getType(), user.getValidToEpochSecond(), user.getDescription());\n    }\n\n    @PostMapping(\"/users/current/update-password\")\n    public ValidationResult updateCurrentUserPassword(@RequestBody PasswordModification passwordModification, Principal principal) {\n        return userManager.validateNewPassword(principal.getName(), passwordModification.oldPassword, passwordModification.newPassword, passwordModification.newPasswordConfirm)\n            .ifSuccess(() -> userManager.updateCurrentUserPassword(passwordModification.newPassword, principal));\n    }\n\n    @PostMapping(\"/users/current/edit\")\n    public void updateCurrentUser(@RequestBody UserModification userModification, Principal principal) {\n        userManager.updateCurrentUserContactInfo(userModification.getFirstName(), userModification.getLastName(), userModification.getEmailAddress(), principal);\n\n    }\n\n    @PutMapping(\"/users/{id}/reset-password\")\n    public UserWithPasswordAndQRCode resetPassword(@PathVariable(\"id\") int userId, @RequestParam(\"baseUrl\") String baseUrl, Principal principal) {\n        UserWithPassword userWithPassword = userManager.resetPassword(userId, principal);\n        return new UserWithPasswordAndQRCode(userWithPassword, Base64.getEncoder().encodeToString(generateQRCode(userWithPassword, baseUrl)));\n    }\n\n    @Getter\n    public static class UserWithPasswordAndQRCode extends UserWithPassword {\n\n        private final String qrCode;\n\n        UserWithPasswordAndQRCode(UserWithPassword userWithPassword, String qrCode) {\n            super(userWithPassword.getUser(), userWithPassword.getPassword(), userWithPassword.getUniqueId());\n            this.qrCode = qrCode;\n        }\n    }\n\n    private static final class RoleDescriptor {\n        private final Role role;\n\n        RoleDescriptor(Role role) {\n            this.role = role;\n        }\n\n        public String getRole() {\n            return role.name();\n        }\n\n        public String getDescription() {\n            return role.getDescription();\n        }\n\n        public List<String> getTarget() { return role.getTarget().stream().map(RoleTarget::name).collect(Collectors.toList()); }\n    }\n\n    private static final class PasswordModification {\n\n        private final String oldPassword;\n        private final String newPassword;\n        private final String newPasswordConfirm;\n\n        @JsonCreator\n        private PasswordModification(@JsonProperty(\"oldPassword\") String oldPassword,\n                                     @JsonProperty(\"newPassword\") String newPassword,\n                                     @JsonProperty(\"newPasswordConfirm\") String newPasswordConfirm) {\n            this.oldPassword = oldPassword;\n            this.newPassword = newPassword;\n            this.newPasswordConfirm = newPasswordConfirm;\n        }\n    }\n\n    private static final class BulkApiKeyCreation {\n\n        private final int organizationId;\n        private final Role role;\n        private final List<String> descriptions;\n\n        @JsonCreator\n        private BulkApiKeyCreation(@JsonProperty(\"organizationId\") int organizationId,\n                                   @JsonProperty(\"role\") Role role,\n                                   @JsonProperty(\"descriptions\") List<String> descriptions) {\n            this.organizationId = organizationId;\n            this.role = role;\n            this.descriptions = descriptions;\n        }\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.v1.admin;\n\nimport alfio.manager.OrganizationDeleter;\nimport alfio.manager.user.UserManager;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.security.Principal;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/v1/admin/system/organization\")\npublic class OrganizationsApiV1Controller {\n    private final UserManager userManager;\n    private final OrganizationDeleter organizationDeleter;\n\n    @Autowired\n    public OrganizationsApiV1Controller(UserManager userManager,\n                                        OrganizationDeleter organizationDeleter) {\n        this.userManager = userManager;\n        this.organizationDeleter = organizationDeleter;\n    }\n\n    @PostMapping(\"/create\")\n    public ResponseEntity<Organization> createOrganization(@RequestBody OrganizationModification om, Principal principal) {\n        if (om == null || !om.isValid(true)) {\n            return ResponseEntity.badRequest().build();\n        }\n        int orgId = userManager.createOrganization(om, principal);\n        return ResponseEntity.ok(userManager.findOrganizationById(orgId, UserManager.ADMIN_USERNAME));\n    }\n\n    @GetMapping(\"/list\")\n    public List<Organization> getAllOrganizations() {\n        return userManager.findUserOrganizations(UserManager.ADMIN_USERNAME);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Organization> getSingleOrganization(@PathVariable(\"id\") int organizationId) {\n        return ResponseEntity.of(userManager.findOptionalOrganizationById(organizationId, UserManager.ADMIN_USERNAME));\n    }\n\n    @PutMapping(\"/{id}/api-key\")\n    public OrganizationApiKey createApiKeyForOrganization(@PathVariable(\"id\") int organizationId, Principal principal) {\n        var user = userManager.insertUser(organizationId, null, null, null, null, Role.fromRoleName(\"ROLE_API_CLIENT\"), User.Type.API_KEY, null, \"Auto-generated API Key\", principal);\n        return new OrganizationApiKey(organizationId, user.getUsername());\n    }\n\n    @PostMapping(\"/{id}\")\n    public ResponseEntity<Organization> update(@PathVariable(\"id\") int organizationId,\n                                               @RequestBody OrganizationModification om,\n                                               Principal principal) {\n        if (om == null || !om.isValid(false) || organizationId != om.getId()) {\n            return ResponseEntity.badRequest().build();\n        }\n        userManager.updateOrganization(om, principal);\n        return ResponseEntity.ok(userManager.findOrganizationById(organizationId, UserManager.ADMIN_USERNAME));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> delete(@PathVariable(\"id\") int organizationId, Principal principal) {\n        boolean result = organizationDeleter.deleteOrganization(organizationId, principal);\n        if (result) {\n            return ResponseEntity.ok().build();\n        } else {\n            return ResponseEntity.badRequest().build();\n        }\n    }\n\n    static class OrganizationApiKey {\n        private final int organizationId;\n        private final String apiKey;\n\n        OrganizationApiKey(int organizationId, String apiKey) {\n            this.organizationId = organizationId;\n            this.apiKey = apiKey;\n        }\n\n        public int getOrganizationId() {\n            return organizationId;\n        }\n\n        public String getApiKey() {\n            return apiKey;\n        }\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager.user;\n\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.result.ValidationResult;\nimport alfio.model.user.*;\nimport alfio.model.user.join.UserOrganization;\nimport alfio.repository.InvoiceSequencesRepository;\nimport alfio.repository.user.AuthorityRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.repository.user.UserRepository;\nimport alfio.repository.user.join.UserOrganizationRepository;\nimport alfio.util.PasswordGenerator;\nimport alfio.util.RequestUtils;\nimport ch.digitalfondue.npjt.AffectedRowCountAndKey;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.session.FindByIndexNameSessionRepository;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.util.Assert;\n\nimport java.security.Principal;\nimport java.time.ZonedDateTime;\nimport java.util.*;\nimport java.util.function.Predicate;\nimport java.util.regex.Pattern;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport static java.util.Objects.requireNonNull;\nimport static java.util.stream.Collectors.toList;\n\n@Component\n@Transactional\npublic class UserManager {\n\n    private static final Logger log = LoggerFactory.getLogger(UserManager.class);\n\n    public static final String ADMIN_USERNAME = \"admin\";\n    private static final Pattern SLUG_VALIDATOR = Pattern.compile(\"^[A-Za-z-_0-9]+$\");\n    private final AuthorityRepository authorityRepository;\n    private final OrganizationRepository organizationRepository;\n    private final UserOrganizationRepository userOrganizationRepository;\n    private final UserRepository userRepository;\n    private final PasswordEncoder passwordEncoder;\n    private final InvoiceSequencesRepository invoiceSequencesRepository;\n\n    private final FindByIndexNameSessionRepository<?> sessionsByPrincipalFinder;\n\n    public UserManager(AuthorityRepository authorityRepository,\n                       OrganizationRepository organizationRepository,\n                       UserOrganizationRepository userOrganizationRepository,\n                       UserRepository userRepository,\n                       PasswordEncoder passwordEncoder,\n                       InvoiceSequencesRepository invoiceSequencesRepository,\n                       FindByIndexNameSessionRepository<?> sessionsByPrincipalFinder) {\n        this.authorityRepository = authorityRepository;\n        this.organizationRepository = organizationRepository;\n        this.userOrganizationRepository = userOrganizationRepository;\n        this.userRepository = userRepository;\n        this.passwordEncoder = passwordEncoder;\n        this.invoiceSequencesRepository = invoiceSequencesRepository;\n        this.sessionsByPrincipalFinder = sessionsByPrincipalFinder;\n    }\n\n    private List<Authority> getUserAuthorities(User user) {\n        return authorityRepository.findGrantedAuthorities(user.getUsername());\n    }\n\n    @Transactional(readOnly = true)\n    public List<UserWithOrganizations> findAllUsers(String username) {\n        List<Organization> organizations = findUserOrganizations(username);\n        Predicate<Collection<?>> isNotEmpty = ks -> !ks.isEmpty();\n        return Optional.of(organizations)\n            .filter(isNotEmpty)\n            .flatMap(org -> {\n                Map<Integer, List<UserOrganization>> usersAndOrganizations = userOrganizationRepository.findByOrganizationIdsOrderByUserId(organizations.stream().map(Organization::getId).collect(toList()))\n                    .stream()\n                    .collect(Collectors.groupingBy(UserOrganization::userId));\n                return Optional.of(usersAndOrganizations.keySet())\n                    .filter(isNotEmpty)\n                    .map(ks -> userRepository.findByIds(ks)\n                        .stream()\n                        .map(u -> {\n                            List<UserOrganization> userOrganizations = usersAndOrganizations.get(u.getId());\n                            List<Organization> filteredOrganizations = organizations.stream().filter(o -> userOrganizations.stream().anyMatch(uo -> uo.organizationId() == o.getId())).collect(toList());\n                            List<Role> roles = authorityRepository.findRoles(u.getUsername()).stream().map(Role::fromRoleName).collect(toList());\n                            return new UserWithOrganizations(u, filteredOrganizations, roles);\n                        }).collect(toList()));\n            }).orElseGet(Collections::emptyList);\n    }\n\n    @Transactional(readOnly = true)\n    public List<User> findAllEnabledUsers(String username) {\n        return findUserOrganizations(username)\n                .stream()\n                .flatMap(o -> userOrganizationRepository.findByOrganizationId(o.getId()).stream())\n                .map(uo -> userRepository.findById(uo.userId()))\n                .filter(User::isEnabled)\n                .collect(toList());\n    }\n\n    @Transactional(readOnly = true)\n    public List<User> findAllApiKeysFor(int organizationId) {\n        return userRepository.findAllApiKeysForOrganization(organizationId);\n    }\n\n    @Transactional(readOnly = true)\n    public User findUserByUsername(String username) {\n        return userRepository.findEnabledByUsername(username).orElseThrow(IllegalArgumentException::new);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<User> findOptionalEnabledUserByUsername(String username) {\n        return userRepository.findEnabledByUsername(username);\n    }\n\n    @Transactional(readOnly = true)\n    public boolean usernameExists(String username) {\n        return userRepository.findIdByUserName(username).isPresent();\n    }\n\n    @Transactional(readOnly = true)\n    public User findUser(int id) {\n        return userRepository.findById(id);\n    }\n\n    @Transactional(readOnly = true)\n    public Collection<Role> getAvailableRoles(String username) {\n        User user = findUserByUsername(username);\n        return isAdmin(user) || isOwner(user) ? EnumSet.of(Role.OWNER, Role.OPERATOR, Role.SUPERVISOR, Role.SPONSOR, Role.API_CONSUMER) : Collections.emptySet();\n    }\n\n    /**\n     * Return the most privileged role of a user\n     * @param user\n     * @return user role\n     */\n    @Transactional(readOnly = true)\n    public Role getUserRole(User user) {\n        return getUserAuthorities(user).stream().map(Authority::getRole).sorted().findFirst().orElse(Role.OPERATOR);\n    }\n\n    @Transactional(readOnly = true)\n    public List<Organization> findUserOrganizations(String username) {\n        return organizationRepository.findAllForUser(username);\n    }\n\n    @Transactional(readOnly = true)\n    public Organization findOrganizationById(int id, String username) {\n        return findOptionalOrganizationById(id, username).orElseThrow(IllegalArgumentException::new);\n    }\n\n    @Transactional(readOnly = true)\n    public Optional<Organization> findOptionalOrganizationById(int id, String username) {\n        return findUserOrganizations(username)\n            .stream()\n            .filter(o -> o.getId() == id)\n            .findFirst();\n    }\n\n    @Transactional(readOnly = true)\n    public boolean isAdmin(User user) {\n        return checkRole(user, Collections.singleton(Role.ADMIN));\n    }\n\n    @Transactional(readOnly = true)\n    public boolean isOwner(User user) {\n        return checkRole(user, EnumSet.of(Role.ADMIN, Role.OWNER, Role.API_CONSUMER));\n    }\n\n    @Transactional(readOnly = true)\n    public boolean isOwnerOfOrganization(User user, int organizationId) {\n        return isAdmin(user) || (isOwner(user) && userOrganizationRepository.findByUserId(user.getId()).stream().anyMatch(uo -> uo.organizationId() == organizationId));\n    }\n\n    @Transactional(readOnly = true)\n    public boolean isOwnerOfOrganization(String username, int organizationId) {\n        return userRepository.findByUsername(username)\n            .filter(user -> isOwnerOfOrganization(user, organizationId))\n            .isPresent();\n    }\n\n    private boolean checkRole(User user, Set<Role> expectedRoles) {\n        Set<String> roleNames = expectedRoles.stream().map(Role::getRoleName).collect(Collectors.toSet());\n        return authorityRepository.checkRole(user.getUsername(), roleNames);\n    }\n\n    public int createOrganization(OrganizationModification om, Principal principal) {\n        //\n        checkIsAdmin(principal);\n        //\n        var affectedRowNumAndKey = organizationRepository.create(om.getName(), om.getDescription(), om.getEmail(), om.getExternalId(), om.getSlug());\n        int orgId = affectedRowNumAndKey.getKey();\n        Validate.isTrue(invoiceSequencesRepository.initFor(orgId) == 2);\n        return orgId;\n    }\n\n    public void updateOrganization(OrganizationModification om, Principal principal) {\n        //\n        var orgId = requireNonNull(om.getId());\n        checkAccessToOrganizationId(principal, orgId);\n        //\n        boolean isAdmin = RequestUtils.isAdmin(principal) || RequestUtils.isSystemApiKey(principal);\n        var currentOrg = organizationRepository.getById(orgId);\n        organizationRepository.update(om.getId(),\n            om.getName(),\n            om.getDescription(),\n            om.getEmail(),\n            isAdmin ? om.getExternalId() : currentOrg.getExternalId(),\n            isAdmin ? om.getSlug() : currentOrg.getSlug());\n    }\n\n    @Transactional(readOnly = true)\n    public ValidationResult validateOrganizationSlug(OrganizationModification om, Principal principal) {\n        if(!RequestUtils.isAdmin(principal)) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"slug\", \"Cannot update Organizer URL.\"));\n        }\n        var slug = om.getSlug();\n        if(StringUtils.isBlank(slug) || !SLUG_VALIDATOR.matcher(om.getSlug()).matches()) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"slug\", \"Invalid value\"));\n        }\n        if(organizationRepository.countBySlug(slug, om.getId()) > 0) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"slug\", \"URL is already taken\", \"value_already_in_use\"));\n        }\n        return ValidationResult.success();\n    }\n\n    @Transactional(readOnly = true)\n    public ValidationResult validateOrganization(OrganizationModification om, Principal principal) {\n        if(om.getId() == null && organizationRepository.findByName(om.getName()).isPresent()) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"name\", \"There is already another organization with the same name.\"));\n        }\n        Validate.notBlank(om.getName(), \"name can't be empty\");\n        Validate.notBlank(om.getEmail(), \"email can't be empty\");\n        Validate.notBlank(om.getDescription(), \"description can't be empty\");\n        if(!RequestUtils.isAdmin(principal)) {\n            Validate.isTrue(StringUtils.isBlank(om.getExternalId()), \"cannot update external id\");\n            Validate.isTrue(StringUtils.isBlank(om.getSlug()), \"cannot update slug\");\n        } else if(StringUtils.isNotBlank(om.getSlug())) {\n            Validate.isTrue(SLUG_VALIDATOR.matcher(om.getSlug()).matches(), \"Organizer address is not valid\");\n        }\n        return ValidationResult.success();\n    }\n\n    public void editUser(int id, int organizationId, String username, String firstName, String lastName, String emailAddress, String description, Role role, Principal principal) {\n        //\n        checkAccessToUserIdAndNewOrganization(principal, id, organizationId);\n        //\n        String currentUsername = principal.getName();\n        boolean admin = ADMIN_USERNAME.equals(username) && Role.ADMIN == role;\n        if(!admin) {\n            int userOrganizationResult = userOrganizationRepository.updateUserOrganization(id, organizationId);\n            Assert.isTrue(userOrganizationResult == 1, \"unexpected error during organization update\");\n        }\n        int userResult = userRepository.update(id, username, firstName, lastName, emailAddress, description);\n        Assert.isTrue(userResult == 1, \"unexpected error during user update\");\n        if(!admin && !username.equals(currentUsername)) {\n            Assert.isTrue(getAvailableRoles(currentUsername).contains(role), \"cannot assign role \"+role);\n            authorityRepository.revokeAll(username);\n            authorityRepository.create(username, role.getRoleName());\n        }\n    }\n\n    public void updateCurrentUserContactInfo(String firstName, String lastName, String emailAddress, Principal principal) {\n        var id = userRepository.findIdByUserName(principal.getName()).orElseThrow();\n        userRepository.updateContactInfo(id, firstName, lastName, emailAddress);\n    }\n\n    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, Principal principal) {\n        return insertUser(organizationId, username, firstName, lastName, emailAddress, role, userType, null, null, principal);\n    }\n\n\n    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, ZonedDateTime validTo, String description, Principal principal) {\n        if (userType == User.Type.API_KEY) {\n            username = UUID.randomUUID().toString();\n            firstName = \"apikey\";\n            lastName = \"\";\n            emailAddress = \"\";\n        }\n\n        String userPassword = PasswordGenerator.generateRandomPassword();\n        return insertUser(organizationId, username, firstName, lastName, emailAddress, role, userType, userPassword, validTo, description, principal);\n    }\n\n    public void bulkInsertApiKeys(int organizationId, Role role, List<String> descriptions, Principal principal) {\n        for (String description : descriptions) {\n            insertUser(organizationId, null, null, null, null, role, User.Type.API_KEY, null, description, principal);\n        }\n    }\n\n\n    public UserWithPassword insertUser(int organizationId, String username, String firstName, String lastName, String emailAddress, Role role, User.Type userType, String userPassword, ZonedDateTime validTo, String description, Principal principal) {\n        //\n        checkAccessToOrganizationId(principal, organizationId);\n        //\n        Organization organization = organizationRepository.getById(organizationId);\n        AffectedRowCountAndKey<Integer> result = userRepository.create(username, passwordEncoder.encode(userPassword), firstName, lastName, emailAddress, true, userType, validTo, description);\n        userOrganizationRepository.create(result.getKey(), organization.getId());\n        authorityRepository.create(username, role.getRoleName());\n        return new UserWithPassword(userRepository.findById(result.getKey()), userType != User.Type.API_KEY ? userPassword : \"\", UUID.randomUUID().toString());\n    }\n\n\n    public UserWithPassword resetPassword(int userId, Principal principal) {\n        //\n        checkAccessToUserId(principal, userId);\n        //\n        User user = findUser(userId);\n        String password = PasswordGenerator.generateRandomPassword();\n        Validate.isTrue(userRepository.resetPassword(userId, passwordEncoder.encode(password)) == 1, \"error during password reset\");\n\n        if (!Objects.requireNonNull(principal).getName().equals(user.getUsername())) {\n            invalidateSessionsForUser(user.getUsername());\n        }\n\n        return new UserWithPassword(user, password, UUID.randomUUID().toString());\n    }\n\n\n    public void updateCurrentUserPassword(String newPassword, Principal principal) {\n        var username = principal.getName();\n        User user = userRepository.findByUsername(username).orElseThrow(IllegalStateException::new);\n        Validate.isTrue(PasswordGenerator.isValid(newPassword), \"invalid password\");\n        Validate.isTrue(userRepository.resetPassword(user.getId(), passwordEncoder.encode(newPassword)) == 1, \"error during password update\");\n    }\n\n\n    public void deleteUser(int userId, Principal principal) {\n        //\n        checkAccessToUserId(principal, userId);\n        //\n        var currentUsername = principal.getName();\n        User currentUser = userRepository.findEnabledByUsername(currentUsername).orElseThrow(IllegalArgumentException::new);\n        Assert.isTrue(userId != currentUser.getId(), \"sorry but you cannot delete your own account.\");\n        var userToDelete = userRepository.findById(userId);\n        userRepository.deleteUserAndReferences(userId);\n        invalidateSessionsForUser(userToDelete.getUsername());\n    }\n\n    private void invalidateSessionsForUser(String username) {\n        var sessionsToInvalidate = sessionsByPrincipalFinder.findByPrincipalName(username).keySet();\n        sessionsToInvalidate.forEach(sessionsByPrincipalFinder::deleteById);\n    }\n\n    public void enable(int userId, boolean status, Principal principal) {\n        //\n        checkAccessToUserId(principal, userId);\n        //\n        var currentUsername = principal.getName();\n        User currentUser = userRepository.findEnabledByUsername(currentUsername).orElseThrow(IllegalArgumentException::new);\n        Assert.isTrue(userId != currentUser.getId(), \"sorry but you cannot commit suicide\");\n        userRepository.toggleEnabled(userId, status);\n        if (!status) { // disable user\n            var userToDisable = userRepository.findById(userId);\n            invalidateSessionsForUser(userToDisable.getUsername());\n        }\n    }\n\n    @Transactional(readOnly = true)\n    public ValidationResult validateUser(Integer id, String username, String firstName, String lastName, String emailAddress) {\n\n        Optional<User> existing = Optional.ofNullable(id).flatMap(userRepository::findOptionalById);\n\n        if(existing.filter(e -> e.getUsername().equals(username)).isEmpty() && usernameExists(username)) {\n            return ValidationResult.failed(new ValidationResult.ErrorDescriptor(\"username\", \"There is already another user with the same username.\"));\n        }\n        return ValidationResult.of(Stream.of(Pair.of(firstName, \"firstName\"), Pair.of(lastName, \"lastName\"), Pair.of(emailAddress, \"emailAddress\"))\n            .filter(p -> StringUtils.isEmpty(p.getKey()))\n            .map(p -> new ValidationResult.ErrorDescriptor(p.getKey(), p.getValue() + \" is required\"))\n            .collect(toList()));\n    }\n\n    @Transactional(readOnly = true)\n    public ValidationResult validateNewPassword(String username, String oldPassword, String newPassword, String newPasswordConfirm) {\n        return userRepository.findByUsername(username)\n            .map(u -> {\n                List<ValidationResult.ErrorDescriptor> errors = new ArrayList<>();\n                Optional<String> password = userRepository.findPasswordByUsername(username);\n                if(password.filter(p -> oldPassword == null || passwordEncoder.matches(oldPassword, p)).isEmpty()) {\n                    errors.add(new ValidationResult.ErrorDescriptor(\"alfio.old-password-invalid\", \"wrong password\"));\n                }\n                if(!PasswordGenerator.isValid(newPassword)) {\n                    errors.add(new ValidationResult.ErrorDescriptor(\"alfio.new-password-invalid\", \"new password is not strong enough\"));\n                }\n                if(!StringUtils.equals(newPassword, newPasswordConfirm)) {\n                    errors.add(new ValidationResult.ErrorDescriptor(\"alfio.new-password-does-not-match\", \"new password has not been confirmed\"));\n                }\n                return ValidationResult.of(errors);\n            })\n            .orElseGet(ValidationResult::failed);\n    }\n\n    public Integer createPublicUserIfNotExists(String username, String email, String firstName, String lastName) {\n        int result = userRepository.createPublicUserIfNotExists(username,\n            passwordEncoder.encode(PasswordGenerator.generateRandomPassword()),\n            firstName,\n            lastName,\n            email,\n            true);\n        if (result == 1) {\n            log.info(\"Created public user\");\n        } else {\n            log.info(\"User was not created because already existed\");\n        }\n        return userRepository.findIdByUserName(username).orElse(null);\n    }\n\n\n    private void checkIsAdmin(Principal principal) {\n        if (principal == null) {\n            return;\n        }\n        if (isAdmin(findUserByUsername(principal.getName()))) {\n            return;\n        }\n        log.warn(\"User {} is not an admin\", principal.getName());\n        throw new IllegalArgumentException(\"User \" + principal.getName() + \" is not an admin\");\n    }\n\n    private void checkAccessToUserId(Principal principal, int userId) {\n        if (principal == null) {\n            return;\n        }\n        var currentUser = findUserByUsername(principal.getName());\n        if (isAdmin(currentUser)) {\n            return;\n        }\n        var targetUser = findUser(userId);\n        var targetUserOrgs = findUserOrganizations(targetUser.getUsername());\n        Assert.isTrue(targetUserOrgs.size() == 1, \"Targeted user can only be in one organization\");\n        for (var org : targetUserOrgs) {\n            if (isOwnerOfOrganization(currentUser, org.getId())) {\n                return;\n            }\n        }\n        log.warn(\"User {} does not have access to userId {}\", principal.getName(), userId);\n        throw new IllegalStateException(\"User \" + principal.getName() + \" does not have access to userId \" + userId);\n    }\n\n    private void checkAccessToUserIdAndNewOrganization(Principal principal, int userId, int newOrganization) {\n        checkAccessToUserId(principal, userId);\n        checkAccessToOrganizationId(principal, newOrganization);\n    }\n\n    private void checkAccessToOrganizationId(Principal principal, int organizationId) {\n        if (principal == null) {\n            return;\n        }\n        if (isOwnerOfOrganization(principal.getName(), organizationId)) {\n            return;\n        }\n        log.warn(\"User {} don't have access to organizationId {}\", principal.getName(), organizationId);\n        throw new IllegalArgumentException(\"User \" + principal.getName() + \" don't have access to organizationId \" + organizationId);\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.v1;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.controller.api.ControllerConfiguration;\nimport alfio.controller.api.v1.admin.EventApiV1Controller;\nimport alfio.manager.EventManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.Event;\nimport alfio.model.TicketCategory;\nimport alfio.model.TicketCategoryWithAdditionalInfo;\nimport alfio.model.api.v1.admin.EventCreationRequest;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.transaction.PaymentProxy;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.TicketCategoryRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.test.util.IntegrationTestUtil;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.security.Principal;\nimport java.time.LocalDateTime;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.UUID;\n\nimport static java.util.Objects.requireNonNull;\nimport static org.junit.jupiter.api.Assertions.*;\n\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class, ControllerConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass EventApiV1IntegrationTest extends BaseIntegrationTest {\n\n    @BeforeAll\n    public static void initEnv() {\n    }\n\n    @Autowired\n    private ConfigurationRepository configurationRepository;\n\n    @Autowired\n    private UserManager userManager;\n\n    @Autowired\n    private OrganizationRepository organizationRepository;\n\n\n    @Autowired\n    private EventApiV1Controller controller;\n\n    @Autowired\n    private EventManager eventManager;\n\n    @Autowired\n    private TicketCategoryRepository ticketCategoryRepository;\n\n\n    private String organizationName;\n    private String username;\n    private Organization organization;\n    private Principal mockPrincipal;\n\n    private final String slug = \"test\";\n\n    @BeforeEach\n    public void ensureConfiguration() {\n        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n\n        this.organizationName = UUID.randomUUID().toString();\n        this.username = UUID.randomUUID().toString();\n\n        var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n        userManager.createOrganization(organizationModification, null);\n        this.organization = organizationRepository.findByName(organizationName).orElseThrow();\n        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL, null);\n\n        this.mockPrincipal = Mockito.mock(Principal.class);\n        Mockito.when(mockPrincipal.getName()).thenReturn(username);\n\n    }\n\n\n    static EventCreationRequest creationRequest(String shortName) {\n        return new EventCreationRequest(\n            \"Title\",\n            shortName,\n            Collections.singletonList(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n            null,\n            new EventCreationRequest.LocationRequest(\n                \"Pollegio 6742 Switzerland\",\n                new EventCreationRequest.CoordinateRequest(\"45.5\",\"9.00\")\n            ),\n            \"Europe/Zurich\",\n            LocalDateTime.now(ClockProvider.clock()).plusDays(30),\n            LocalDateTime.now(ClockProvider.clock()).plusDays(30).plusHours(2),\n            \"https://alf.io\",\n            \"https://alf.io\",\n            \"https://alf.io\",\n            \"https://alf.io/img/tutorials/check-in-app/003.png\",\n            new EventCreationRequest.TicketRequest(\n                false,\n                10,\n                \"CHF\",\n                new BigDecimal(\"7.7\"),\n                true,\n                Arrays.asList(PaymentProxy.OFFLINE,PaymentProxy.STRIPE),\n                Collections.singletonList(\n                    new EventCreationRequest.CategoryRequest(\n                        null, // forces new category\n                        \"standard\",\n                        Collections.singletonList(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                        10,\n                        false,\n                        BigDecimal.TEN,\n                        LocalDateTime.of(2019, 1, 10, 12, 0),\n                        LocalDateTime.of(2019, 1, 30, 18, 0),\n                        null,\n                        null,\n                        null,\n                        null\n                    )\n                ),\n                null\n            ),\n            null,\n            null\n        );\n\n    }\n\n\n\n    @Test\n    void createTest() {\n\n        EventCreationRequest eventCreationRequest = creationRequest(slug);\n\n        String slug = controller.create(eventCreationRequest,mockPrincipal).getBody();\n        Event event = eventManager.getSingleEvent(slug,username);\n        List<TicketCategory> tickets = ticketCategoryRepository.findAllTicketCategories(event.getId());\n        assertEquals(eventCreationRequest.getTitle(),event.getDisplayName());\n        assertEquals(eventCreationRequest.getSlug(),event.getShortName());\n        assertEquals(eventCreationRequest.getTickets().getCurrency(),event.getCurrency());\n        assertEquals(eventCreationRequest.getWebsiteUrl(),event.getWebsiteUrl());\n        assertEquals(eventCreationRequest.getTickets().getPaymentMethods(),event.getAllowedPaymentProxies());\n        assertTrue(event.getFileBlobIdIsPresent());\n        assertEquals(eventCreationRequest.getTickets().getCategories().size(),tickets.size());\n        tickets.forEach((t) -> {\n                List<EventCreationRequest.CategoryRequest> requestCategories = eventCreationRequest.getTickets().getCategories().stream().filter((rt) -> rt.getName().equals(t.getName())).toList();\n                assertEquals(1,requestCategories.size());\n                requestCategories.forEach((rtc) -> {\n                        assertNotEquals(0, t.getOrdinal());\n                        assertEquals(t.getMaxTickets(), rtc.getMaxTickets().intValue());\n                        assertEquals(0, t.getPrice().compareTo(rtc.getPrice()));\n                    }\n                );\n            }\n        );\n    }\n\n    @Test\n    void stats() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        var statsResponse = controller.stats(slug, mockPrincipal);\n        assertTrue(statsResponse.getStatusCode().is2xxSuccessful());\n        var stats = requireNonNull(statsResponse.getBody());\n        int lastOrdinal = -1;\n        for (TicketCategoryWithAdditionalInfo ticketCategory : stats.getTicketCategories()) {\n            assertTrue(ticketCategory.getOrdinal() > 0);\n            assertTrue(ticketCategory.getOrdinal() > lastOrdinal);\n            lastOrdinal = ticketCategory.getOrdinal();\n        }\n    }\n\n    @Test\n    void updateTest() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        String newTitle = \"new title\";\n        EventCreationRequest updateRequest = new EventCreationRequest(newTitle,null,null,null, null,null,null,null,null,null, null,null,\n            new EventCreationRequest.TicketRequest(null,10,null,null,null,null,null,null), null, null\n        );\n        controller.update(slug, updateRequest, mockPrincipal);\n        Event event = eventManager.getSingleEvent(slug,username);\n        assertEquals(newTitle,event.getDisplayName());\n    }\n\n    @Test\n    void updateExistingCategoryUsingId() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        var existing = requireNonNull(controller.stats(slug, mockPrincipal).getBody());\n        var existingCategory = existing.getTicketCategories().get(0);\n        var categoriesRequest = List.of(\n            new EventCreationRequest.CategoryRequest(\n                existingCategory.getId(),\n                existingCategory.getName() + \"_1\",\n                List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                existingCategory.getMaxTickets(),\n                existingCategory.isAccessRestricted(),\n                existingCategory.getPrice(),\n                LocalDateTime.now(ClockProvider.clock()),\n                LocalDateTime.now(ClockProvider.clock()).plusHours(1),\n                existingCategory.getCode(),\n                null,\n                null,\n                existingCategory.getTicketAccessType()\n            )\n        );\n        var ticketRequest = new EventCreationRequest.TicketRequest(null,10,null,null,null,null, categoriesRequest,null);\n        EventCreationRequest updateRequest = new EventCreationRequest(null,null,null,null, null,null,null,null,null,null, null,null,\n            ticketRequest, null, null\n        );\n        assertTrue(controller.update(slug, updateRequest, mockPrincipal).getStatusCode().is2xxSuccessful());\n        var modifiedCategories = ticketCategoryRepository.findAllTicketCategories(existing.getId());\n        assertEquals(1, modifiedCategories.size());\n        assertEquals(existingCategory.getName() + \"_1\", modifiedCategories.get(0).getName());\n    }\n\n    @Test\n    void updateExistingCategoryAndAddNewUsingId() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        var existing = requireNonNull(controller.stats(slug, mockPrincipal).getBody());\n        var existingCategory = existing.getTicketCategories().get(0);\n        var categoriesRequest = List.of(\n            new EventCreationRequest.CategoryRequest(\n                existingCategory.getId(),\n                existingCategory.getName() + \"_1\",\n                List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                existingCategory.getMaxTickets() - 5,\n                existingCategory.isAccessRestricted(),\n                existingCategory.getPrice(),\n                LocalDateTime.now(ClockProvider.clock()),\n                LocalDateTime.now(ClockProvider.clock()).plusHours(1),\n                existingCategory.getCode(),\n                null,\n                null,\n                existingCategory.getTicketAccessType()\n            ),\n            new EventCreationRequest.CategoryRequest(\n                null,\n                existingCategory.getName() + \"_2\",\n                List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                existingCategory.getMaxTickets() - 5,\n                existingCategory.isAccessRestricted(),\n                existingCategory.getPrice(),\n                LocalDateTime.now(ClockProvider.clock()),\n                LocalDateTime.now(ClockProvider.clock()).plusHours(1),\n                existingCategory.getCode(),\n                null,\n                null,\n                existingCategory.getTicketAccessType()\n            )\n        );\n        var ticketRequest = new EventCreationRequest.TicketRequest(null,10,null,null,null,null, categoriesRequest,null);\n        EventCreationRequest updateRequest = new EventCreationRequest(null,null,null,null, null,null,null,null,null,null, null,null,\n            ticketRequest, null, null\n        );\n        assertTrue(controller.update(slug, updateRequest, mockPrincipal).getStatusCode().is2xxSuccessful());\n        var modifiedCategories = ticketCategoryRepository.findAllTicketCategories(existing.getId());\n        assertEquals(2, modifiedCategories.size());\n        assertEquals(existingCategory.getName() + \"_1\", modifiedCategories.get(0).getName());\n        assertEquals(existingCategory.getOrdinal(), modifiedCategories.get(0).getOrdinal());\n        assertEquals(existingCategory.getName() + \"_2\", modifiedCategories.get(1).getName());\n        assertEquals(existingCategory.getOrdinal() + 1, modifiedCategories.get(1).getOrdinal());\n    }\n\n    @Test\n    void updateExistingCategoryUsingName() {\n        controller.create(creationRequest(slug), mockPrincipal);\n        var existing = requireNonNull(controller.stats(slug, mockPrincipal).getBody());\n        var existingCategory = existing.getTicketCategories().get(0);\n        var categoriesRequest = List.of(\n            new EventCreationRequest.CategoryRequest(null,\n                existingCategory.getName(),\n                List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"desc\")),\n                existingCategory.getMaxTickets() - 1,\n                existingCategory.isAccessRestricted(),\n                existingCategory.getPrice(),\n                LocalDateTime.now(ClockProvider.clock()),\n                LocalDateTime.now(ClockProvider.clock()).plusHours(1),\n                existingCategory.getCode(),\n                null,\n                null,\n                existingCategory.getTicketAccessType()\n            )\n        );\n        var ticketRequest = new EventCreationRequest.TicketRequest(null,10,null,null,null,null, categoriesRequest,null);\n        EventCreationRequest updateRequest = new EventCreationRequest(null,null,null,null, null,null,null,null,null,null, null,null,\n            ticketRequest, null, null\n        );\n        assertTrue(controller.update(slug, updateRequest, mockPrincipal).getStatusCode().is2xxSuccessful());\n        var modifiedCategories = ticketCategoryRepository.findAllTicketCategories(existing.getId());\n        assertEquals(1, modifiedCategories.size());\n        assertEquals(existingCategory.getMaxTickets() - 1, modifiedCategories.get(0).getMaxTickets());\n    }\n\n    @Test\n    void retrieveLinkedSubscriptions() {\n        controller.create(creationRequest(slug),mockPrincipal);\n        var response = controller.getLinkedSubscriptions(slug, mockPrincipal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var linkedSubscriptions = response.getBody();\n        assertNotNull(linkedSubscriptions);\n        assertTrue(linkedSubscriptions.getSubscriptions().isEmpty());\n        assertEquals(slug, linkedSubscriptions.getEventSlug());\n    }\n\n\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.v1;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.config.authentication.support.APITokenAuthentication;\nimport alfio.controller.api.ControllerConfiguration;\nimport alfio.controller.api.v1.admin.ReservationApiV1Controller;\nimport alfio.controller.api.v1.admin.SubscriptionApiV1Controller;\nimport alfio.manager.EventManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.Event;\nimport alfio.model.TicketCategory;\nimport alfio.model.api.v1.admin.*;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.metadata.TicketMetadataContainer;\nimport alfio.model.modification.AttendeeData;\nimport alfio.model.modification.DateTimeModification;\nimport alfio.model.modification.TicketCategoryModification;\nimport alfio.model.subscription.SubscriptionDescriptor;\nimport alfio.model.system.ConfigurationKeys;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.*;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.test.util.IntegrationTestUtil;\nimport alfio.util.ClockProvider;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.util.*;\n\nimport static alfio.controller.api.v1.SubscriptionApiV1IntegrationTest.modificationRequest;\nimport static alfio.model.system.ConfigurationKeys.OPENID_PUBLIC_ENABLED;\nimport static alfio.test.util.IntegrationTestUtil.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class, ControllerConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass ReservationApiV1ControllerTest {\n\n    private static final String DEFAULT_CATEGORY_NAME = \"default\";\n    private static final String ANONYMOUS_RESERVATION_URL_PREFIX = BASE_URL + \"/event\";\n    private static final String LOGGED_IN_RESERVATION_URL_PREFIX = BASE_URL + \"/openid/authentication\";\n    @Autowired\n    private ConfigurationRepository configurationRepository;\n    @Autowired\n    private ClockProvider clockProvider;\n    @Autowired\n    private OrganizationRepository organizationRepository;\n    @Autowired\n    private UserManager userManager;\n    @Autowired\n    private EventManager eventManager;\n    @Autowired\n    private EventRepository eventRepository;\n    @Autowired\n    private ReservationApiV1Controller controller;\n    @Autowired\n    private TicketCategoryRepository ticketCategoryRepository;\n    @Autowired\n    private TicketRepository ticketRepository;\n    @Autowired\n    private TicketReservationRepository ticketReservationRepository;\n    @Autowired\n    private SubscriptionApiV1Controller subscriptionApiV1Controller;\n    @Autowired\n    private SubscriptionRepository subscriptionRepository;\n\n    private Event event;\n    private String username;\n\n    @BeforeEach\n    void setUp() {\n        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n        List<TicketCategoryModification> categories = Arrays.asList(\n            new TicketCategoryModification(null, DEFAULT_CATEGORY_NAME, TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                new DateTimeModification(LocalDate.now(clockProvider.getClock()).minusDays(1), LocalTime.now(clockProvider.getClock())),\n                new DateTimeModification(LocalDate.now(clockProvider.getClock()).plusDays(1), LocalTime.now(clockProvider.getClock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()),\n            new TicketCategoryModification(null, \"hidden\", TicketCategory.TicketAccessType.INHERIT, 2,\n                new DateTimeModification(LocalDate.now(clockProvider.getClock()).minusDays(1), LocalTime.now(clockProvider.getClock())),\n                new DateTimeModification(LocalDate.now(clockProvider.getClock()).plusDays(1), LocalTime.now(clockProvider.getClock())),\n                DESCRIPTION, BigDecimal.ONE, true, \"\", true, null, null, null, null, null, 0, null, null, AlfioMetadata.empty())\n        );\n        Pair<Event, String> eventAndUser = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n        event = eventAndUser.getLeft();\n        username = UUID.randomUUID().toString();\n        userManager.insertUser(event.getOrganizationId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL, null);\n    }\n\n    @Test\n    void createSingleTicketWithMetadata() {\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 1, List.of(), List.of(firstTicketProperties));\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            new ReservationConfiguration(true),\n            null,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertTrue(StringUtils.startsWith(href, ANONYMOUS_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(1, tickets.size());\n        var metadata = ticketRepository.getTicketMetadata(tickets.get(0).getId());\n        assertNotNull(metadata);\n        var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n        assertTrue(attributes.isPresent());\n        assertEquals(firstTicketProperties, attributes.get().getAttributes());\n        var reservationMetadata = ticketReservationRepository.getMetadata(reservationId);\n        assertNotNull(reservationMetadata);\n        assertTrue(reservationMetadata.isHideContactData());\n    }\n\n    @Test\n    void createTwoTicketsWithMetadata() {\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 2, null, List.of(firstTicketProperties));\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            null,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertTrue(StringUtils.startsWith(href, ANONYMOUS_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(2, tickets.size());\n        assertEquals(1L, tickets.stream().filter(t -> {\n            var metadata = ticketRepository.getTicketMetadata(t.getId());\n            if (metadata == null) {\n                return false;\n            }\n            var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n            return attributes.isPresent() && attributes.get().getAttributes().equals(firstTicketProperties);\n        }).count());\n        var reservationMetadata = ticketReservationRepository.getMetadata(reservationId);\n        assertNotNull(reservationMetadata);\n        assertFalse(reservationMetadata.isHideContactData());\n    }\n\n    @Test\n    void createSingleTicketWithAuthenticatedUser() {\n        configurationRepository.insert(OPENID_PUBLIC_ENABLED.name(), \"true\", \"\");\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 1, List.of(), List.of(firstTicketProperties));\n        var user = new ReservationUser(\n            \"test@example.org\",\n            \"Test\",\n            \"McTest\",\n            \"test@example.org\",\n            \"EXTERNALID\"\n        );\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            user,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertTrue(StringUtils.startsWith(href, LOGGED_IN_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(1, tickets.size());\n        var metadata = ticketRepository.getTicketMetadata(tickets.get(0).getId());\n        assertNotNull(metadata);\n        var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n        assertTrue(attributes.isPresent());\n        assertEquals(firstTicketProperties, attributes.get().getAttributes());\n\n        var createdUser = userManager.findOptionalEnabledUserByUsername(\"test@example.org\");\n        assertTrue(createdUser.isPresent());\n        var reservations = ticketReservationRepository.findAllReservationsForUser(createdUser.get().getId());\n        assertFalse(reservations.isEmpty());\n        assertEquals(1, reservations.size());\n        assertEquals(reservationId, reservations.get(0).getId());\n    }\n\n    @Test\n    void createSingleTicketWithAttendees() {\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 1, List.of(\n            new AttendeeData(\"firstName\", \"lastName\", \"example@example.org\", firstTicketProperties)\n        ), null);\n        var user = new ReservationUser(\n            \"test@example.org\",\n            \"Test\",\n            \"McTest\",\n            \"test@example.org\",\n            \"EXTERNALID\"\n        );\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            user,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertFalse(StringUtils.startsWith(href, LOGGED_IN_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        var savedTicket = tickets.get(0);\n        assertEquals(1, tickets.size());\n        assertEquals(\"firstName\", savedTicket.getFirstName());\n        assertEquals(\"lastName\", savedTicket.getLastName());\n        assertEquals(\"example@example.org\", savedTicket.getEmail());\n        var metadata = ticketRepository.getTicketMetadata(savedTicket.getId());\n        assertNotNull(metadata);\n        var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n        assertTrue(attributes.isPresent());\n        assertEquals(firstTicketProperties, attributes.get().getAttributes());\n\n        var createdUser = userManager.findOptionalEnabledUserByUsername(\"test@example.org\");\n        assertFalse(createdUser.isPresent());\n    }\n\n    @Test\n    void createMultipleTicketsWithAttendees() {\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 2, List.of(\n            new AttendeeData(\"firstName\", \"lastName\", \"example@example.org\", firstTicketProperties),\n            new AttendeeData(\"firstName\", \"lastName\", \"example@example.org\", firstTicketProperties)\n        ), null);\n        var user = new ReservationUser(\n            \"test@example.org\",\n            \"Test\",\n            \"McTest\",\n            \"test@example.org\",\n            \"EXTERNALID\"\n        );\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            user,\n            null,\n            \"en\",\n            null\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertFalse(StringUtils.startsWith(href, LOGGED_IN_RESERVATION_URL_PREFIX));\n\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(2, tickets.size());\n        tickets.forEach(savedTicket -> {\n            assertEquals(\"firstName\", savedTicket.getFirstName());\n            assertEquals(\"lastName\", savedTicket.getLastName());\n            assertEquals(\"example@example.org\", savedTicket.getEmail());\n            var metadata = ticketRepository.getTicketMetadata(savedTicket.getId());\n            assertNotNull(metadata);\n            var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n            assertTrue(attributes.isPresent());\n            assertEquals(firstTicketProperties, attributes.get().getAttributes());\n        });\n        var createdUser = userManager.findOptionalEnabledUserByUsername(\"test@example.org\");\n        assertFalse(createdUser.isPresent());\n    }\n\n    @Test\n    void createSingleTicketWithSubscriptionId() {\n        var subscriptionId = UUID.randomUUID().toString();\n        var category = ticketCategoryRepository.findFirstWithAvailableTickets(event.getId()).orElseThrow();\n        var firstTicketProperties = Map.of(\"property\", \"value-first\");\n        var ticket = new AttendeesByCategory(category.getId(), 1, List.of(\n            new AttendeeData(\"firstName\", \"lastName\", \"example@example.org\", firstTicketProperties)\n        ), null);\n        var user = new ReservationUser(\n            \"test@example.org\",\n            \"Test\",\n            \"McTest\",\n            \"test@example.org\",\n            \"EXTERNALID\"\n        );\n        var creationRequest = new TicketReservationCreationRequest(\n            List.of(ticket),\n            List.of(),\n            null,\n            user,\n            null,\n            \"en\",\n            subscriptionId\n        );\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var response = controller.createTicketsReservation(event.getShortName(), creationRequest, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        var body = response.getBody();\n        assertNotNull(body);\n        assertNull(body.getErrors());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        assertNotNull(reservationId);\n        assertFalse(reservationId.isBlank());\n        var href = body.getHref();\n        assertFalse(StringUtils.startsWith(href, LOGGED_IN_RESERVATION_URL_PREFIX));\n        assertTrue(StringUtils.endsWith(href, \"subscription=\"+subscriptionId));\n        var tickets = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(1, tickets.size());\n        tickets.forEach(savedTicket -> {\n            assertEquals(\"firstName\", savedTicket.getFirstName());\n            assertEquals(\"lastName\", savedTicket.getLastName());\n            assertEquals(\"example@example.org\", savedTicket.getEmail());\n            var metadata = ticketRepository.getTicketMetadata(savedTicket.getId());\n            assertNotNull(metadata);\n            var attributes = metadata.getMetadataForKey(TicketMetadataContainer.GENERAL);\n            assertTrue(attributes.isPresent());\n            assertEquals(firstTicketProperties, attributes.get().getAttributes());\n        });\n        var createdUser = userManager.findOptionalEnabledUserByUsername(\"test@example.org\");\n        assertFalse(createdUser.isPresent());\n    }\n\n    @Test\n    void createSubscriptionWithMetadata() {\n        configurationRepository.insert(ConfigurationKeys.STRIPE_PUBLIC_KEY.getValue(), \"pk\", \"\");\n        configurationRepository.insert(ConfigurationKeys.STRIPE_SECRET_KEY.getValue(), \"sk\", \"\");\n        var principal = new APITokenAuthentication(username, null, List.of());\n        var creationResponse = subscriptionApiV1Controller.create(modificationRequest(SubscriptionDescriptor.SubscriptionUsageType.ONCE_PER_EVENT, true, clockProvider), principal);\n        assertTrue(creationResponse.getStatusCode().is2xxSuccessful());\n        assertNotNull(creationResponse.getBody());\n        var descriptorId = creationResponse.getBody();\n        var reservationRequest = new SubscriptionReservationCreationRequest(Map.of(\"key\", \"value\"),\n            new ReservationUser(\"test@test.org\", \"Test\", \"Test1\", \"test@test.org\", null),\n            \"en\",\n            new ReservationConfiguration(true),\n            null);\n        var reservationResponse = controller.createSubscriptionReservation(descriptorId, reservationRequest, principal);\n        assertTrue(reservationResponse.getStatusCode().is2xxSuccessful());\n        assertNotNull(reservationResponse.getBody());\n        var body = Objects.requireNonNull(reservationResponse.getBody());\n        assertTrue(body.isSuccess());\n        var reservationId = body.getId();\n        var reservation = ticketReservationRepository.findReservationById(reservationId);\n        assertEquals(\"Test\", reservation.getFirstName());\n        assertEquals(\"Test1\", reservation.getLastName());\n        assertEquals(\"test@test.org\", reservation.getEmail());\n        var subscriptions = subscriptionRepository.findSubscriptionsByReservationId(reservationId);\n        assertEquals(1, subscriptions.size());\n        var subscriptionId = subscriptions.get(0).getId();\n        var subscriptionMetadata = subscriptionRepository.getSubscriptionMetadata(subscriptionId);\n        assertNotNull(subscriptionMetadata);\n        assertNotNull(subscriptionMetadata.getProperties());\n        assertFalse(subscriptionMetadata.getProperties().isEmpty());\n        assertEquals(\"value\", subscriptionMetadata.getProperties().get(\"key\"));\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.controller.api.v1;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.controller.api.ControllerConfiguration;\nimport alfio.controller.api.v1.admin.EventApiV1Controller;\nimport alfio.controller.api.v1.admin.SubscriptionApiV1Controller;\nimport alfio.manager.user.UserManager;\nimport alfio.model.PriceContainer;\nimport alfio.model.TicketCategory;\nimport alfio.model.api.v1.admin.EventCreationRequest;\nimport alfio.model.api.v1.admin.SubscriptionDescriptorModificationRequest;\nimport alfio.model.api.v1.admin.subscription.StandardPeriodTerm;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.DateTimeModification;\nimport alfio.model.modification.OrganizationModification;\nimport alfio.model.modification.TicketCategoryModification;\nimport alfio.model.subscription.SubscriptionDescriptor;\nimport alfio.model.subscription.SubscriptionDescriptor.SubscriptionUsageType;\nimport alfio.model.transaction.PaymentProxy;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.SubscriptionRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.test.util.IntegrationTestUtil;\nimport alfio.util.ClockProvider;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.security.Principal;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.LocalTime;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport static alfio.model.subscription.SubscriptionDescriptor.SubscriptionUsageType.ONCE_PER_EVENT;\nimport static alfio.model.subscription.SubscriptionDescriptor.SubscriptionUsageType.UNLIMITED;\nimport static alfio.test.util.IntegrationTestUtil.AVAILABLE_SEATS;\nimport static alfio.test.util.IntegrationTestUtil.DESCRIPTION;\nimport static java.util.Objects.requireNonNull;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class, ControllerConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass SubscriptionApiV1IntegrationTest {\n\n    @Autowired\n    UserManager userManager;\n    @Autowired\n    OrganizationRepository organizationRepository;\n    @Autowired\n    ConfigurationRepository configurationRepository;\n    @Autowired\n    SubscriptionApiV1Controller controller;\n    @Autowired\n    EventApiV1Controller eventController;\n    @Autowired\n    ClockProvider clockProvider;\n    @Autowired\n    SubscriptionRepository subscriptionRepository;\n\n    SubscriptionDescriptor subscriptionDescriptor;\n\n    String username;\n    Principal principal;\n\n    @BeforeEach\n    public void ensureConfiguration() {\n        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n\n        var organizationName = UUID.randomUUID().toString();\n        this.username = UUID.randomUUID().toString();\n\n        var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n        userManager.createOrganization(organizationModification, null);\n        var organization = organizationRepository.findByName(organizationName).orElseThrow();\n        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.API_CONSUMER, User.Type.INTERNAL, null);\n\n        this.principal = Mockito.mock(Principal.class);\n        Mockito.when(principal.getName()).thenReturn(username);\n        var creationRequest = creationRequest();\n        var result = controller.create(creationRequest, principal);\n        assertTrue(result.getStatusCode().is2xxSuccessful());\n        assertNotNull(result.getBody());\n        var descriptorOptional = subscriptionRepository.findOne(UUID.fromString(result.getBody()));\n        assertTrue(descriptorOptional.isPresent());\n        this.subscriptionDescriptor = descriptorOptional.get();\n    }\n\n    @Test\n    void update() {\n        assertEquals(ONCE_PER_EVENT, subscriptionDescriptor.getUsageType());\n        assertTrue(subscriptionDescriptor.isPublic());\n\n        var updateRequest = modificationRequest(UNLIMITED, false);\n        var result = controller.update(subscriptionDescriptor.getId(), updateRequest, principal);\n        assertTrue(result.getStatusCode().is2xxSuccessful());\n        assertNotNull(result.getBody());\n        var uuid = UUID.fromString(result.getBody());\n        assertEquals(subscriptionDescriptor.getId(), uuid);\n        var updated = subscriptionRepository.findOne(uuid).orElseThrow();\n        assertEquals(UNLIMITED, updated.getUsageType());\n        assertFalse(updated.isPublic());\n    }\n\n    @Test\n    void deactivate() {\n        var result = controller.deactivate(subscriptionDescriptor.getId(), principal);\n        assertTrue(result.getStatusCode().is2xxSuccessful());\n        assertTrue(subscriptionRepository.findOne(subscriptionDescriptor.getId()).isEmpty());\n    }\n\n    @Test\n    void updateLinkedEvents() {\n        var eventCreateResponse = eventController.create(EventApiV1IntegrationTest.creationRequest(\"short-name\"), principal);\n        assertNotNull(eventCreateResponse.getBody());\n        var eventSlug = eventCreateResponse.getBody();\n        var descriptorId = subscriptionDescriptor.getId();\n        var response = controller.getLinkedEvents(descriptorId, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        assertTrue(requireNonNull(response.getBody()).isEmpty());\n        controller.updateLinkedEvents(descriptorId, List.of(eventSlug), principal);\n        response = controller.getLinkedEvents(descriptorId, principal);\n        assertTrue(response.getStatusCode().is2xxSuccessful());\n        assertEquals(List.of(eventSlug), response.getBody());\n    }\n\n\n\n    private SubscriptionDescriptorModificationRequest modificationRequest(SubscriptionUsageType usageType,\n                                                                          boolean isPublic) {\n        return modificationRequest(usageType, isPublic, clockProvider);\n    }\n\n    static SubscriptionDescriptorModificationRequest modificationRequest(SubscriptionUsageType usageType,\n                                                                         boolean isPublic,\n                                                                         ClockProvider clockProvider) {\n        return new SubscriptionDescriptorModificationRequest(\n            usageType,\n            SubscriptionDescriptorModificationRequest.TERM_STANDARD,\n            new StandardPeriodTerm(SubscriptionDescriptor.SubscriptionTimeUnit.MONTHS, 1),\n            List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"this is the title\")),\n            List.of(new EventCreationRequest.DescriptionRequest(\"en\", \"this is the description\")),\n            null,\n            LocalDateTime.now(clockProvider.getClock()),\n            LocalDateTime.now(clockProvider.getClock()).plusMonths(5),\n            new BigDecimal(\"10.00\"),\n            new BigDecimal(\"7.7\"),\n            PriceContainer.VatStatus.INCLUDED,\n            \"CHF\",\n            isPublic,\n            \"https://alf.io/img/tutorials/check-in-app/003.png\",\n            \"https://alf.io\",\n            \"https://alf.io\",\n            \"Europe/Zurich\",\n            false,\n            List.of(PaymentProxy.STRIPE)\n        );\n    }\n\n    private SubscriptionDescriptorModificationRequest creationRequest() {\n        return modificationRequest(ONCE_PER_EVENT, true);\n    }\n\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.manager.system.ConfigurationLevel;\nimport alfio.manager.system.ConfigurationManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.Event;\nimport alfio.model.PurchaseContext;\nimport alfio.model.TicketCategory;\nimport alfio.model.TicketReservation;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.ConfigurationModification;\nimport alfio.model.modification.DateTimeModification;\nimport alfio.model.modification.EventModification;\nimport alfio.model.modification.TicketCategoryModification;\nimport alfio.model.modification.support.LocationDescriptor;\nimport alfio.model.system.Configuration;\nimport alfio.model.system.ConfigurationKeys;\nimport alfio.model.system.ConfigurationPathLevel;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.TicketCategoryRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.Mockito;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.ZoneId;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static alfio.model.system.ConfigurationKeys.*;\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass ConfigurationManagerIntegrationTest extends BaseIntegrationTest {\n\n    public static final String USERNAME = \"test\";\n\n    Event event;\n    TicketCategory ticketCategory;\n\n    @Autowired\n    private ConfigurationManager configurationManager;\n\n    @Autowired\n    private ConfigurationRepository configurationRepository;\n\n    @Autowired\n    private EventManager eventManager;\n\n    @Autowired\n    private OrganizationRepository organizationRepository;\n\n    @Autowired\n    private UserManager userManager;\n\n    @Autowired\n    private TicketCategoryRepository ticketCategoryRepository;\n\n    @BeforeEach\n    void prepareEnv() {\n        //setup...\n        organizationRepository.create(\"org\", \"org\", \"email@example.com\", null, null);\n        Organization organization = organizationRepository.findByName(\"org\").orElseThrow();\n\n        userManager.insertUser(organization.getId(), USERNAME, \"test\", \"test\", \"test@example.com\", Role.OWNER, User.Type.INTERNAL, null);\n\n        Map<String, String> desc = new HashMap<>();\n        desc.put(\"en\", \"muh description\");\n        desc.put(\"it\", \"muh description\");\n        desc.put(\"de\", \"muh description\");\n\n        List<TicketCategoryModification> ticketsCategory = List.of(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 20,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                Collections.singletonMap(\"en\", \"desc\"), BigDecimal.TEN, false, \"\", false, null, null,\n                null, null, null, 0, null, null, AlfioMetadata.empty()),\n            new TicketCategoryModification(null, \"second\", TicketCategory.TicketAccessType.INHERIT, 20,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                Collections.singletonMap(\"en\", \"desc\"), BigDecimal.TEN, false, \"\", false, null, null,\n                null, null, null, 0, null, null, AlfioMetadata.empty()));\n        EventModification em = new EventModification(null, Event.EventFormat.IN_PERSON, \"url\", \"url\", \"url\", null, null, null,\n            \"eventShortName\", \"displayName\", organization.getId(),\n            \"muh location\", \"0.0\", \"0.0\", ZoneId.systemDefault().getId(), desc,\n            new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n            new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n            BigDecimal.TEN, \"CHF\", 20, BigDecimal.ONE, true, null, ticketsCategory, false, new LocationDescriptor(\"\",\"\",\"\",\"\"), 7, null, null, AlfioMetadata.empty(), List.of());\n        eventManager.createEvent(em, USERNAME);\n\n        event = eventManager.getSingleEvent(\"eventShortName\", \"test\");\n        ticketCategory = ticketCategoryRepository.findAllTicketCategories(event.getId()).get(0);\n    }\n\n    @Test\n    void testPresentStringConfigValue() {\n        assertEquals(Optional.of(\"5\"), configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValue());\n    }\n\n    @Test\n    void testEmptyStringConfigValue() {\n        assertTrue(configurationManager.getFor(SMTP_PASSWORD, ConfigurationLevel.event(event)).getValue().isEmpty());\n    }\n\n    @Test\n    void testStringValueWithDefault() {\n        assertEquals(\"5\", configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getRequiredValue());\n        assertEquals(\"-1\", configurationManager.getFor(SMTP_PASSWORD, ConfigurationLevel.event(event)).getValueOrDefault(\"-1\"));\n    }\n\n    @Test\n    void testMissingConfigValue() {\n        assertThrows(IllegalArgumentException.class, () -> configurationManager.getFor(SMTP_PASSWORD, ConfigurationLevel.event(event)).getRequiredValue());\n    }\n\n    @Test\n    void testRequiredValue() {\n        assertEquals(\"5\", configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getRequiredValue());\n    }\n\n    @Test\n    void testIntValue() {\n        assertEquals(5, configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n        //missing value\n        assertEquals(-1, configurationManager.getFor(ASSIGNMENT_REMINDER_INTERVAL, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n\n        configurationManager.saveSystemConfiguration(ConfigurationKeys.BASE_URL, \"blabla\");\n        assertEquals(\"blabla\", configurationManager.getFor(ConfigurationKeys.BASE_URL, ConfigurationLevel.event(event)).getRequiredValue());\n        //not a number\n        assertEquals(-1, configurationManager.getFor(ConfigurationKeys.BASE_URL, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n    }\n\n    @Test\n    void testBooleanValue() {\n        //missing value\n        assertFalse(configurationManager.getFor(ALLOW_FREE_TICKETS_CANCELLATION, ConfigurationLevel.ticketCategory(event, ticketCategory.getId())).getValueAsBooleanOrDefault());\n\n        //false value\n        configurationManager.saveSystemConfiguration(ConfigurationKeys.ALLOW_FREE_TICKETS_CANCELLATION, \"false\");\n        assertFalse(configurationManager.getFor(ALLOW_FREE_TICKETS_CANCELLATION, ConfigurationLevel.ticketCategory(event, ticketCategory.getId())).getValueAsBooleanOrDefault());\n\n        //true value\n        configurationManager.saveSystemConfiguration(ConfigurationKeys.ALLOW_FREE_TICKETS_CANCELLATION, \"true\");\n        assertTrue(configurationManager.getFor(ALLOW_FREE_TICKETS_CANCELLATION, ConfigurationLevel.ticketCategory(event, ticketCategory.getId())).getValueAsBooleanOrDefault());\n    }\n\n    @Test\n    void testOverrideMechanism() {\n\n        Organization organization = organizationRepository.findByName(\"org\").orElseThrow();\n\n\n        Event event = eventManager.getSingleEvent(\"eventShortName\", \"test\");\n\n        TicketCategory tc = eventManager.loadTicketCategories(event).get(0);\n        //\n\n        //check override level up to event level\n\n        assertEquals(5, configurationManager.getFor(Collections.singleton(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION), ConfigurationLevel.event(event)).get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n\n        assertEquals(5, configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n        configurationRepository.insertOrganizationLevel(organization.getId(), MAX_AMOUNT_OF_TICKETS_BY_RESERVATION.getValue(), \"6\", \"desc\");\n\n        assertEquals(6, configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n        assertEquals(6, configurationManager.getFor(Collections.singleton(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION), ConfigurationLevel.event(event)).get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n\n        configurationRepository.insertEventLevel(organization.getId(), event.getId(), MAX_AMOUNT_OF_TICKETS_BY_RESERVATION.getValue(), \"7\", \"desc\");\n\n        assertEquals(7, configurationManager.getFor(Collections.singleton(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION), ConfigurationLevel.event(event)).get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n\n        configurationRepository.insertTicketCategoryLevel(organization.getId(), event.getId(), tc.getId(), MAX_AMOUNT_OF_TICKETS_BY_RESERVATION.getValue(), \"8\", \"desc\");\n\n        assertEquals(7, configurationManager.getFor(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ConfigurationLevel.event(event)).getValueAsIntOrDefault(-1));\n\n    }\n\n    @Test\n    void testBasicConfigurationNotNeeded() {\n\n        configurationRepository.deleteByKey(ConfigurationKeys.BASE_URL.getValue());\n        configurationRepository.deleteByKey(ConfigurationKeys.SUPPORTED_LANGUAGES.getValue());\n\n        configurationRepository.insert(ConfigurationKeys.BASE_URL.getValue(), \"http://localhost:8080\", \"\");\n        configurationRepository.insert(ConfigurationKeys.SUPPORTED_LANGUAGES.getValue(), \"7\", \"\");\n        configurationRepository.insert(ConfigurationKeys.MAPS_CLIENT_API_KEY.getValue(), \"MAPS_CLIENT_API_KEY\", \"\");\n        configurationRepository.insert(ConfigurationKeys.MAILER_TYPE.getValue(), \"smtp\", \"\");\n        assertFalse(configurationManager.isBasicConfigurationNeeded());\n    }\n\n    @Test\n    void testSaveOnlyExistingConfiguration() {\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue(), \"MY-ACCOUNT_NUMBER\", \"empty\");\n        Configuration existing = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue()).orElseThrow(IllegalStateException::new);\n        Map<ConfigurationKeys.SettingCategory, List<Configuration>> all = configurationManager.loadOrganizationConfig(event.getOrganizationId(), USERNAME);\n        List<Configuration> flatten = all.entrySet().stream().flatMap(e -> e.getValue().stream()).toList();\n        List<ConfigurationModification> modified = flatten.stream().filter(c -> !c.getKey().equals(ConfigurationKeys.BANK_ACCOUNT_NR.getValue())).map(ConfigurationModification::fromConfiguration).collect(Collectors.toList());\n        modified.add(new ConfigurationModification(existing.getId(), existing.getKey(), \"NEW-NUMBER\"));\n        configurationManager.saveAllOrganizationConfiguration(event.getOrganizationId(), modified, USERNAME);\n        List<Configuration> organizationConfiguration = configurationRepository.findOrganizationConfiguration(event.getOrganizationId());\n        assertEquals(1, organizationConfiguration.size());\n        Optional<Configuration> result = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue());\n        assertTrue(result.isPresent());\n        Configuration configuration = result.get();\n        assertEquals(ConfigurationKeys.BANK_ACCOUNT_NR, configuration.getConfigurationKey());\n        assertEquals(\"NEW-NUMBER\", configuration.getValue());\n    }\n\n    @Test\n    void testSaveOnlyValidConfiguration() {\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue(), \"MY-ACCOUNT_NUMBER\", \"empty\");\n        Configuration existing = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue()).orElseThrow(IllegalStateException::new);\n        Map<ConfigurationKeys.SettingCategory, List<Configuration>> all = configurationManager.loadOrganizationConfig(event.getOrganizationId(), USERNAME);\n        List<Configuration> flatten = all.entrySet().stream().flatMap(e -> e.getValue().stream()).toList();\n        List<ConfigurationModification> modified = flatten.stream().filter(c -> !c.getKey().equals(ConfigurationKeys.BANK_ACCOUNT_NR.getValue()) && !c.getKey().equals(ConfigurationKeys.PARTIAL_RESERVATION_ID_LENGTH.getValue())).map(ConfigurationModification::fromConfiguration).collect(Collectors.toList());\n        modified.add(new ConfigurationModification(existing.getId(), existing.getKey(), \"NEW-NUMBER\"));\n        modified.add(new ConfigurationModification(-1, ConfigurationKeys.PARTIAL_RESERVATION_ID_LENGTH.getValue(), \"9\"));\n        configurationManager.saveAllOrganizationConfiguration(event.getOrganizationId(), modified, USERNAME);\n        List<Configuration> organizationConfiguration = configurationRepository.findOrganizationConfiguration(event.getOrganizationId());\n        assertEquals(2, organizationConfiguration.size());\n        Optional<Configuration> result = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue());\n        assertTrue(result.isPresent());\n        Configuration configuration = result.get();\n        assertEquals(ConfigurationKeys.BANK_ACCOUNT_NR, configuration.getConfigurationKey());\n        assertEquals(\"NEW-NUMBER\", configuration.getValue());\n        result = configurationRepository.findByKeyAtOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.PARTIAL_RESERVATION_ID_LENGTH.getValue());\n        assertTrue(result.isPresent());\n        configuration = result.get();\n        assertEquals(ConfigurationKeys.PARTIAL_RESERVATION_ID_LENGTH, configuration.getConfigurationKey());\n        assertEquals(\"9\", configuration.getValue());\n    }\n\n    @Test\n    void testLoadOrganizationConfiguration() {\n        Map<ConfigurationKeys.SettingCategory, List<Configuration>> orgConf = configurationManager.loadOrganizationConfig(event.getOrganizationId(), USERNAME);\n        assertEquals(ConfigurationKeys.byPathLevel(ConfigurationPathLevel.ORGANIZATION).size(), orgConf.values().stream().mapToLong(Collection::size).sum());\n        String value = \"MY-ACCOUNT_NUMBER\";\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ConfigurationKeys.BANK_ACCOUNT_NR.getValue(), value, \"empty\");\n        orgConf = configurationManager.loadOrganizationConfig(event.getOrganizationId(), USERNAME);\n        assertEquals(ConfigurationKeys.byPathLevel(ConfigurationPathLevel.ORGANIZATION).size(), orgConf.values().stream().mapToLong(Collection::size).sum());\n        assertEquals(value, orgConf.get(SettingCategory.PAYMENT_OFFLINE).stream().filter(c -> c.getConfigurationKey() == ConfigurationKeys.BANK_ACCOUNT_NR).findFirst().orElseThrow(IllegalStateException::new).getValue());\n    }\n\n    @Test\n    void testBasicConfigurationNeeded() {\n        configurationRepository.deleteByKey(ConfigurationKeys.BASE_URL.getValue());\n        assertTrue(configurationManager.isBasicConfigurationNeeded());\n    }\n\n    @Test\n    void testSaveBooleanOptions() {\n        String ftcKey = ALLOW_FREE_TICKETS_CANCELLATION.getValue();\n        configurationRepository.insert(ftcKey, \"false\", \"this should be updated to true\");\n        ConfigurationModification ftc = new ConfigurationModification(configurationRepository.findByKey(ftcKey).getId(), ftcKey, \"true\");\n\n        String prKey = ENABLE_PRE_REGISTRATION.getValue();\n        configurationRepository.insert(prKey, \"true\", \"this should be updated to false\");\n        ConfigurationModification pr = new ConfigurationModification(configurationRepository.findByKey(prKey).getId(), prKey, \"false\");\n\n        ConfigurationModification newTrue = new ConfigurationModification(-1, ENABLE_WAITING_QUEUE.getValue(), \"true\");\n        ConfigurationModification newFalse = new ConfigurationModification(-1, ENABLE_WAITING_QUEUE_NOTIFICATION.getValue(), \"false\");\n        ConfigurationModification newNull = new ConfigurationModification(-1, GOOGLE_ANALYTICS_ANONYMOUS_MODE.getValue(), null);\n\n        configurationManager.saveAllSystemConfiguration(Arrays.asList(ftc, pr, newTrue, newFalse, newNull));\n\n        Configuration cFtc = configurationRepository.findByKey(ftcKey);\n        assertNotNull(ftc);\n        assertEquals(\"true\", cFtc.getValue());\n\n        Configuration cPr = configurationRepository.findByKey(prKey);\n        assertNotNull(cPr);\n        assertEquals(\"false\", cPr.getValue());\n\n        Configuration nTrue = configurationRepository.findByKey(ENABLE_WAITING_QUEUE.getValue());\n        assertNotNull(nTrue);\n        assertEquals(\"true\", nTrue.getValue());\n\n        Configuration nFalse = configurationRepository.findByKey(ENABLE_WAITING_QUEUE_NOTIFICATION.getValue());\n        assertNotNull(nFalse);\n        assertEquals(\"false\", nFalse.getValue());\n\n        Optional<Configuration> opt = configurationRepository.findOptionalByKey(GOOGLE_ANALYTICS_ANONYMOUS_MODE.getValue());\n        assertFalse(opt.isPresent());\n\n    }\n\n    @Test\n    void testBulk() {\n        Event event = eventManager.getSingleEvent(\"eventShortName\", \"test\");\n\n        var res = configurationManager.getFor(Set.of(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ENABLE_WAITING_QUEUE, ENABLE_WAITING_QUEUE_NOTIFICATION), ConfigurationLevel.event(event));\n\n        assertEquals(3, res.size());\n        assertNotNull(res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION));\n        assertNotNull(res.get(ENABLE_WAITING_QUEUE));\n        assertNotNull(res.get(ENABLE_WAITING_QUEUE_NOTIFICATION));\n        assertTrue(res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).isPresent());\n        assertEquals(5, res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n        assertEquals(ConfigurationPathLevel.SYSTEM, res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getConfigurationPathLevelOrDefault(null));\n        assertFalse(res.get(ENABLE_WAITING_QUEUE).isPresent());\n        assertFalse(res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).isPresent());\n\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ENABLE_WAITING_QUEUE.getValue(), \"true\", \"\");\n        configurationRepository.insertOrganizationLevel(event.getOrganizationId(), ENABLE_WAITING_QUEUE_NOTIFICATION.getValue(), \"false\", \"\");\n\n\n        res = configurationManager.getFor(Set.of(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ENABLE_WAITING_QUEUE, ENABLE_WAITING_QUEUE_NOTIFICATION), ConfigurationLevel.event(event));\n        assertEquals(3, res.size());\n        assertTrue(res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).isPresent());\n        assertTrue(res.get(ENABLE_WAITING_QUEUE).isPresent());\n        assertTrue(res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).isPresent());\n\n        assertEquals(ConfigurationPathLevel.ORGANIZATION, res.get(ENABLE_WAITING_QUEUE).getConfigurationPathLevelOrDefault(null));\n        assertEquals(ConfigurationPathLevel.ORGANIZATION, res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).getConfigurationPathLevelOrDefault(null));\n        assertTrue(res.get(ENABLE_WAITING_QUEUE).getValueAsBooleanOrDefault());\n        assertFalse(res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).getValueAsBooleanOrDefault());\n\n\n        configurationRepository.insertEventLevel(event.getOrganizationId(), event.getId(), MAX_AMOUNT_OF_TICKETS_BY_RESERVATION.getValue(), \"20\", \"\");\n        configurationRepository.insertEventLevel(event.getOrganizationId(), event.getId(), ENABLE_WAITING_QUEUE.getValue(), \"true\", \"\");\n        configurationRepository.insertEventLevel(event.getOrganizationId(), event.getId(), ENABLE_WAITING_QUEUE_NOTIFICATION.getValue(), \"true\", \"\");\n\n        res = configurationManager.getFor(Set.of(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION, ENABLE_WAITING_QUEUE, ENABLE_WAITING_QUEUE_NOTIFICATION), ConfigurationLevel.event(event));\n\n        assertEquals(ConfigurationPathLevel.EVENT, res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getConfigurationPathLevelOrDefault(null));\n        assertEquals(20, res.get(MAX_AMOUNT_OF_TICKETS_BY_RESERVATION).getValueAsIntOrDefault(Integer.MIN_VALUE));\n        assertEquals(ConfigurationPathLevel.EVENT, res.get(ENABLE_WAITING_QUEUE).getConfigurationPathLevelOrDefault(null));\n        assertEquals(ConfigurationPathLevel.EVENT, res.get(ENABLE_WAITING_QUEUE_NOTIFICATION).getConfigurationPathLevelOrDefault(null));\n    }\n\n    @Test\n    void testBaseUrl() {\n        configurationRepository.insertEventLevel(event.getOrganizationId(), event.getId(), BASE_URL.getValue(), \"https://test/\", \"\");\n        assertEquals(\"https://test\", configurationManager.baseUrl(event));\n    }\n\n    @Test\n    void testSystemApiKeyGeneration() {\n        assertTrue(configurationRepository.findOptionalByKey(SYSTEM_API_KEY.name()).isEmpty());\n        // force generation\n        var apiKey = configurationManager.retrieveSystemApiKey(false);\n        assertNotNull(apiKey);\n        assertFalse(apiKey.isEmpty());\n        // retrieve again the same apiKey\n        var apiKey2 = configurationManager.retrieveSystemApiKey(false);\n        assertEquals(apiKey, apiKey2);\n        // force apiKey rotation\n        apiKey2 = configurationManager.retrieveSystemApiKey(true);\n        assertNotNull(apiKey2);\n        assertFalse(apiKey2.isEmpty());\n        assertNotEquals(apiKey, apiKey2);\n    }\n\n    @Test\n    void ensureNoErrorsWhenDeniedMethodsOptionIsEmpty() {\n        var categories = ticketCategoryRepository.findAllTicketCategories(event.getId());\n        // insert empty value\n        configurationRepository.insertTicketCategoryLevel(event.getOrganizationId(), event.getId(), categories.get(0).getId(), PAYMENT_METHODS_BLACKLIST.name(), \"\", \"\");\n        // try with single category\n        var deniedMethods = configurationManager.getBlacklistedMethodsForReservation(event, List.of(categories.get(0).getId()));\n        assertNotNull(deniedMethods);\n        assertTrue(deniedMethods.isEmpty());\n\n        // try with multiple categories\n        deniedMethods = configurationManager.getBlacklistedMethodsForReservation(event, categories.stream().map(TicketCategory::getId).collect(Collectors.toList()));\n        assertNotNull(deniedMethods);\n        assertTrue(deniedMethods.isEmpty());\n    }\n}", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager.system;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.manager.EventManager;\nimport alfio.manager.TicketReservationManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.*;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.*;\nimport alfio.model.modification.support.LocationDescriptor;\nimport alfio.model.system.EventMigration;\nimport alfio.model.transaction.PaymentProxy;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.EventRepository;\nimport alfio.repository.TicketCategoryRepository;\nimport alfio.repository.TicketRepository;\nimport alfio.repository.TicketReservationRepository;\nimport alfio.repository.system.EventMigrationRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.test.util.AlfioIntegrationTest;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.apache.commons.lang3.time.DateUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.time.ZoneId;\nimport java.time.ZonedDateTime;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@AlfioIntegrationTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\nclass DataMigratorIntegrationTest extends BaseIntegrationTest {\n\n    private static final int AVAILABLE_SEATS = 20;\n    private static final Map<String, String> DESCRIPTION = Collections.singletonMap(\"en\", \"desc\");\n\n    @Autowired\n    private EventManager eventManager;\n    @Autowired\n    private EventRepository eventRepository;\n    @Autowired\n    private OrganizationRepository organizationRepository;\n    @Autowired\n    private UserManager userManager;\n    @Autowired\n    private TicketRepository ticketRepository;\n    @Autowired\n    private DataMigrator dataMigrator;\n    @Autowired\n    private EventMigrationRepository eventMigrationRepository;\n    @Autowired\n    private TicketReservationManager ticketReservationManager;\n    @Autowired\n    private TicketCategoryRepository ticketCategoryRepository;\n    @Autowired\n    private TicketReservationRepository ticketReservationRepository;\n    @Value(\"${alfio.version}\")\n    private String currentVersion;\n\n    private Pair<Event, String> initEvent(List<TicketCategoryModification> categories) {\n        return initEvent(categories, \"display name\");\n    }\n\n    private Pair<Event,String> initEvent(List<TicketCategoryModification> categories, String displayName) {\n        String organizationName = UUID.randomUUID().toString();\n        String username = UUID.randomUUID().toString();\n        String eventName = UUID.randomUUID().toString();\n\n        organizationRepository.create(organizationName, \"org\", \"email@example.com\", null, null);\n        Organization organization = organizationRepository.findByName(organizationName).get();\n        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.OPERATOR, User.Type.INTERNAL, null);\n\n        Map<String, String> desc = new HashMap<>();\n        desc.put(\"en\", \"muh description\");\n        desc.put(\"it\", \"muh description\");\n        desc.put(\"de\", \"muh description\");\n\n        EventModification em = new EventModification(null, Event.EventFormat.IN_PERSON, \"url\", \"url\", \"url\", \"privacy\", null, null,\n                eventName, displayName, organization.getId(),\n                \"muh location\",\n                \"0.0\", \"0.0\", ZoneId.systemDefault().getId(), desc,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(5), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(5), LocalTime.now(ClockProvider.clock()).plusHours(1)),\n                BigDecimal.TEN, \"CHF\", AVAILABLE_SEATS, BigDecimal.ONE, true, List.of(PaymentProxy.ON_SITE), categories, false, new LocationDescriptor(\"\",\"\",\"\",\"\"), 7, null, null, AlfioMetadata.empty(), List.of());\n        eventManager.createEvent(em, username);\n        return Pair.of(eventManager.getSingleEvent(eventName, username), username);\n    }\n\n    @Test\n    void testMigration() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories);\n        Event event = eventUsername.getKey();\n\n        try {\n\t        eventRepository.updatePrices(\"CHF\", 40, false, BigDecimal.ONE, \"STRIPE\", event.getId(), PriceContainer.VatStatus.NOT_INCLUDED, 1000);\n\n\t        dataMigrator.migrateEventsToCurrentVersion();\n\t        EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId());\n\t        assertNotNull(eventMigration);\n\t        //assertEquals(buildTimestamp, eventMigration.getBuildTimestamp().toString());\n\t        assertEquals(currentVersion, eventMigration.getCurrentVersion());\n\n\t        List<Ticket> tickets = ticketRepository.findFreeByEventId(event.getId());\n\t        assertNotNull(tickets);\n\t        assertFalse(tickets.isEmpty());\n\t        assertEquals(AVAILABLE_SEATS, tickets.size());\n\t        assertTrue(tickets.stream().allMatch(t -> t.getCategoryId() == null));\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testMigrationWithExistingRecord() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories); \n        Event event = eventUsername.getKey();\n\n        try {\n\t        eventMigrationRepository.insertMigrationData(event.getId(), \"1.4\", ZonedDateTime.now(ZoneId.of(\"UTC\")).minusDays(1), EventMigration.Status.COMPLETE.toString());\n\t        eventRepository.updatePrices(\"CHF\", 40, false, BigDecimal.ONE, \"STRIPE\", event.getId(), PriceContainer.VatStatus.NOT_INCLUDED, 1000);\n\t        dataMigrator.migrateEventsToCurrentVersion();\n\t        EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId());\n\t        assertNotNull(eventMigration);\n\t        //assertEquals(buildTimestamp, eventMigration.getBuildTimestamp().toString());\n\t        assertEquals(currentVersion, eventMigration.getCurrentVersion());\n\t\n\t        List<Ticket> tickets = ticketRepository.findFreeByEventId(event.getId());\n\t        assertNotNull(tickets);\n\t        assertFalse(tickets.isEmpty());\n\t        assertEquals(20, tickets.size());\n\t        assertTrue(tickets.stream().allMatch(t -> t.getCategoryId() == null));\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testAlreadyMigratedEvent() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories); \n        Event event = eventUsername.getKey();\n        \n        try {\n\t        ZonedDateTime migrationTs = ZonedDateTime.now(ZoneId.of(\"UTC\"));\n\t        eventMigrationRepository.insertMigrationData(event.getId(), currentVersion, migrationTs, EventMigration.Status.COMPLETE.toString());\n\t        eventRepository.updatePrices(\"CHF\", 40, false, BigDecimal.ONE, \"STRIPE\", event.getId(), PriceContainer.VatStatus.NOT_INCLUDED, 1000);\n\t        dataMigrator.migrateEventsToCurrentVersion();\n\t        EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId());\n\t        assertNotNull(eventMigration);\n\t        //assertEquals(migrationTs.toString(), eventMigration.getBuildTimestamp().toString());\n\t        assertEquals(currentVersion, eventMigration.getCurrentVersion());\n\t\n\t        List<Ticket> tickets = ticketRepository.findFreeByEventId(event.getId());\n\t        assertNotNull(tickets);\n\t        assertFalse(tickets.isEmpty());\n\t        assertEquals(AVAILABLE_SEATS, tickets.size());//<-- the migration has not been done\n\t        assertTrue(tickets.stream().allMatch(t -> t.getCategoryId() == null));\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testUpdateDisplayName() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories, null); \n        Event event = eventUsername.getKey();\n\n        try {\n\t        dataMigrator.migrateEventsToCurrentVersion();\n\t        EventMigration eventMigration = eventMigrationRepository.loadEventMigration(event.getId());\n\t        assertNotNull(eventMigration);\n\t        //assertEquals(buildTimestamp, eventMigration.getBuildTimestamp().toString());\n\t        assertEquals(currentVersion, eventMigration.getCurrentVersion());\n\t\n\t        Event withDescription = eventRepository.findById(event.getId());\n\t        assertNotNull(withDescription.getDisplayName());\n\t        assertEquals(event.getShortName(), withDescription.getShortName());\n\t        assertEquals(event.getShortName(), withDescription.getDisplayName());\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testUpdateTicketReservation() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n                new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                        DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories); \n        Event event = eventUsername.getKey();\n        try {\n\t        TicketReservationModification trm = new TicketReservationModification();\n\t        trm.setQuantity(1);\n\t        trm.setTicketCategoryId(eventManager.loadTicketCategories(event).get(0).getId());\n\t        TicketReservationWithOptionalCodeModification r = new TicketReservationWithOptionalCodeModification(trm, Optional.empty());\n\t        Date expiration = DateUtils.addDays(new Date(), 1);\n\t        String reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(r), Collections.emptyList(), expiration, Optional.empty(), Locale.ENGLISH, false, null);\n\t        dataMigrator.fillReservationsLanguage();\n\t        TicketReservation ticketReservation = ticketReservationManager.findById(reservationId).get();\n\t        assertEquals(\"en\", ticketReservation.getUserLanguage());\n        } finally {\n        \teventManager.deleteEvent(event.getId(), eventUsername.getValue());\n        }\n    }\n\n    @Test\n    void testFixCategoriesSize() {\n        List<TicketCategoryModification> categories = Arrays.asList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS -1,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", true, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()),\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 1,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories);\n        Event event = eventUsername.getKey();\n        TicketCategory firstCategory = ticketCategoryRepository.findAllTicketCategories(event.getId()).stream().filter(TicketCategory::isBounded).findFirst().orElseThrow(IllegalStateException::new);\n        int firstCategoryID = firstCategory.getId();\n        ticketCategoryRepository.updateSeatsAvailability(firstCategoryID, AVAILABLE_SEATS + 1);\n        dataMigrator.fixCategoriesSize(event);\n        assertEquals(AVAILABLE_SEATS - 1, ticketRepository.countAllocatedTicketsForEvent(event.getId()).intValue());\n        assertEquals(1, ticketRepository.countFreeTicketsForUnbounded(event.getId()).intValue());\n        assertEquals(AVAILABLE_SEATS - 1, ticketRepository.countFreeTickets(event.getId(), firstCategoryID).intValue());\n        assertEquals(AVAILABLE_SEATS - 1, firstCategory.getMaxTickets());\n    }\n\n    @Test\n    void testFixStuckTickets() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, AVAILABLE_SEATS,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> eventUsername = initEvent(categories);\n        Event event = eventUsername.getKey();\n        TicketReservationModification trm = new TicketReservationModification();\n        trm.setQuantity(1);\n        trm.setTicketCategoryId(eventManager.loadTicketCategories(event).get(0).getId());\n        TicketReservationWithOptionalCodeModification r = new TicketReservationWithOptionalCodeModification(trm, Optional.empty());\n        Date expiration = DateUtils.addDays(new Date(), 1);\n        String reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(r), Collections.emptyList(), expiration, Optional.empty(), Locale.ENGLISH, false, null);\n        //simulate the effect of a reservation cancellation after #392, as described in #391\n        ticketReservationRepository.updateReservationStatus(reservationId, TicketReservation.TicketReservationStatus.CANCELLED.name());\n        List<Ticket> ticketsInReservation = ticketRepository.findTicketsInReservation(reservationId);\n        assertEquals(1, ticketsInReservation.size());\n        String uuid = ticketsInReservation.get(0).getUuid();\n        assertTrue(ticketsInReservation.stream().allMatch(t -> t.getStatus() == Ticket.TicketStatus.PENDING));\n        dataMigrator.fixStuckTickets(event.getId());\n        assertSame(Ticket.TicketStatus.RELEASED, ticketRepository.findByUUID(uuid).getStatus());\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.test.util;\n\nimport alfio.manager.EventManager;\nimport alfio.manager.FileUploadManager;\nimport alfio.manager.SubscriptionManager;\nimport alfio.manager.user.UserManager;\nimport alfio.model.AllocationStatus;\nimport alfio.model.Event;\nimport alfio.model.PriceContainer;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.*;\nimport alfio.model.modification.support.LocationDescriptor;\nimport alfio.model.subscription.SubscriptionDescriptor;\nimport alfio.model.system.ConfigurationKeys;\nimport alfio.model.transaction.PaymentProxy;\nimport alfio.model.user.Organization;\nimport alfio.model.user.Role;\nimport alfio.model.user.User;\nimport alfio.repository.EventRepository;\nimport alfio.repository.SubscriptionRepository;\nimport alfio.repository.TicketReservationRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.AuthorityRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.repository.user.UserRepository;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.Assertions;\n\nimport java.math.BigDecimal;\nimport java.time.*;\nimport java.util.*;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\npublic class IntegrationTestUtil {\n\n    public static final int AVAILABLE_SEATS = 20;\n\n    public static final Map<String, Map<String, String>> DB_CONF = new HashMap<>();\n    public static final Map<String, String> DESCRIPTION = Collections.singletonMap(\"en\", \"desc\");\n    public static final String BASE_URL = \"http://localhost:8080\";\n\n    static {\n        DB_CONF.put(\"PGSQL\", generateDBConfig(\"jdbc:postgresql://localhost:5432/alfio\", \"postgres\", \"password\"));\n        DB_CONF.put(\"PGSQL-TRAVIS\", generateDBConfig(\"jdbc:postgresql://localhost:5432/alfio\", \"alfio_user\", \"password\"));\n    }\n\n    public static Map<String, String> generateDBConfig(String url, String username, String password) {\n        Map<String, String> c = new HashMap<>();\n        c.put(\"datasource.url\", url);\n        c.put(\"datasource.username\", username);\n        c.put(\"datasource.password\", password);\n        return c;\n    }\n\n    public static void ensureMinimalConfiguration(ConfigurationRepository configurationRepository) {\n        configurationRepository.deleteByKey(ConfigurationKeys.BASE_URL.getValue());\n        configurationRepository.deleteByKey(ConfigurationKeys.SUPPORTED_LANGUAGES.getValue());\n\n        configurationRepository.insert(ConfigurationKeys.BASE_URL.getValue(), BASE_URL, \"\");\n        configurationRepository.insert(ConfigurationKeys.SUPPORTED_LANGUAGES.getValue(), \"7\", \"\");\n\n\n        configurationRepository.deleteByKey(ConfigurationKeys.INVOICE_ADDRESS.getValue());\n        configurationRepository.insert(ConfigurationKeys.INVOICE_ADDRESS.getValue(), \"INVOICE_ADDRESS\", \"\");\n        configurationRepository.deleteByKey(ConfigurationKeys.VAT_NR.getValue());\n        configurationRepository.insert(ConfigurationKeys.VAT_NR.getValue(), \"42\", \"\");\n    }\n\n    public static Pair<Event, String> initEvent(List<TicketCategoryModification> categories,\n                                                OrganizationRepository organizationRepository,\n                                                UserManager userManager,\n                                                EventManager eventManager,\n                                                EventRepository eventRepository) {\n        return initEvent(categories, organizationRepository, userManager, eventManager, eventRepository, null, Event.EventFormat.IN_PERSON);\n    }\n\n    public static Pair<Event, String> initEvent(List<TicketCategoryModification> categories,\n                                                OrganizationRepository organizationRepository,\n                                                UserManager userManager,\n                                                EventManager eventManager,\n                                                EventRepository eventRepository,\n                                                List<EventModification.AdditionalService> additionalServices,\n                                                Event.EventFormat eventFormat) {\n\n        return initEvent(categories, organizationRepository, userManager, eventManager, eventRepository, additionalServices, eventFormat, PriceContainer.VatStatus.INCLUDED);\n    }\n\n    public static Pair<Event, String> initEvent(List<TicketCategoryModification> categories,\n                                                OrganizationRepository organizationRepository,\n                                                UserManager userManager,\n                                                EventManager eventManager,\n                                                EventRepository eventRepository,\n                                                List<EventModification.AdditionalService> additionalServices,\n                                                Event.EventFormat eventFormat,\n                                                PriceContainer.VatStatus eventVatStatus) {\n        String organizationName = UUID.randomUUID().toString();\n        String username = UUID.randomUUID().toString();\n        String eventName = UUID.randomUUID().toString();\n\n        var organizationModification = new OrganizationModification(null, organizationName, \"email@example.com\", \"org\", null, null);\n        userManager.createOrganization(organizationModification, null);\n        Organization organization = organizationRepository.findByName(organizationName).orElseThrow();\n        userManager.insertUser(organization.getId(), username, \"test\", \"test\", \"test@example.com\", Role.OPERATOR, User.Type.INTERNAL, null);\n        userManager.insertUser(organization.getId(), username+\"_owner\", \"test\", \"test\", \"test@example.com\", Role.OWNER, User.Type.INTERNAL, null);\n\n        LocalDateTime expiration = LocalDateTime.now(ClockProvider.clock()).plusDays(5).plusHours(1);\n\n        Map<String, String> desc = new HashMap<>();\n        desc.put(\"en\", \"muh description\");\n        desc.put(\"it\", \"muh description\");\n        desc.put(\"de\", \"muh description\");\n\n        EventModification em = new EventModification(null, eventFormat, \"url\", \"url\", \"url\", \"privacy\",\"url\", null,\n            eventName, \"event display name\", organization.getId(),\n            \"muh location\", \"0.0\", \"0.0\", ClockProvider.clock().getZone().getId(), desc,\n            new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(5), LocalTime.now(ClockProvider.clock())),\n            new DateTimeModification(expiration.toLocalDate(), expiration.toLocalTime()),\n            BigDecimal.TEN, \"CHF\", AVAILABLE_SEATS, BigDecimal.ONE, PriceContainer.VatStatus.isVatIncluded(eventVatStatus), Collections.singletonList(PaymentProxy.OFFLINE), categories, false, new LocationDescriptor(\"\",\"\",\"\",\"\"), 7, null, additionalServices, AlfioMetadata.empty(), List.of());\n        eventManager.createEvent(em, username);\n        Event event = eventManager.getSingleEvent(eventName, username);\n        Assertions.assertEquals(AVAILABLE_SEATS, eventRepository.countExistingTickets(event.getId()).intValue());\n        return Pair.of(event, username);\n    }\n\n    public static void initAdminUser(UserRepository userRepository, AuthorityRepository authorityRepository) {\n        userRepository.create(UserManager.ADMIN_USERNAME, \"\", \"The\", \"Administrator\", \"admin@localhost\", true, User.Type.INTERNAL, null, null);\n        authorityRepository.create(UserManager.ADMIN_USERNAME, Role.ADMIN.getRoleName());\n    }\n\n    public static void removeAdminUser(UserRepository userRepository, AuthorityRepository authorityRepository) {\n        authorityRepository.revokeAll(UserManager.ADMIN_USERNAME);\n        userRepository.deleteUser(userRepository.findIdByUserName(UserManager.ADMIN_USERNAME).orElseThrow());\n    }\n\n    public static UUID createSubscriptionDescriptor(int organizationId,\n                                                    FileUploadManager fileUploadManager,\n                                                    SubscriptionManager subscriptionManager,\n                                                    int maxEntries) {\n        var uploadFileForm = new UploadBase64FileModification();\n        uploadFileForm.setFile(BaseIntegrationTest.ONE_PIXEL_BLACK_GIF);\n        uploadFileForm.setName(\"my-image.gif\");\n        uploadFileForm.setType(\"image/gif\");\n        String fileBlobId = fileUploadManager.insertFile(uploadFileForm);\n        var subscriptionModification = new SubscriptionDescriptorModification(null,\n            Map.of(\"en\", \"title\"),\n            Map.of(\"en\", \"description\"),\n            42,\n            ZonedDateTime.now(ClockProvider.clock()),\n            null,\n            BigDecimal.TEN,\n            new BigDecimal(\"7.7\"),\n            PriceContainer.VatStatus.INCLUDED,\n            \"CHF\",\n            false,\n            organizationId,\n            maxEntries,\n            SubscriptionDescriptor.SubscriptionValidityType.CUSTOM,\n            null,\n            null,\n            ZonedDateTime.now(ClockProvider.clock()).minusDays(1),\n            ZonedDateTime.now(ClockProvider.clock()).plusDays(42),\n            SubscriptionDescriptor.SubscriptionUsageType.ONCE_PER_EVENT,\n            \"https://example.org\",\n            null,\n            fileBlobId,\n            List.of(PaymentProxy.STRIPE),\n            ClockProvider.clock().getZone(),\n            false);\n\n        return subscriptionManager.createSubscriptionDescriptor(subscriptionModification).orElseThrow();\n    }\n\n    public static Pair<UUID, String> confirmAndLinkSubscription(SubscriptionDescriptor descriptor,\n                                                                int organizationId,\n                                                                SubscriptionRepository subscriptionRepository,\n                                                                TicketReservationRepository ticketReservationRepository,\n                                                                int maxEntries) {\n        assertTrue(subscriptionRepository.updatePriceForSubscriptions(descriptor.getId(), descriptor.getPrice() + 1) > 0);\n        var zoneId = ClockProvider.clock().getZone();\n        var subscriptionId = subscriptionRepository.selectFreeSubscription(descriptor.getId()).orElseThrow();\n        var subscriptionReservationId = UUID.randomUUID().toString();\n        ticketReservationRepository.createNewReservation(subscriptionReservationId, ZonedDateTime.now(ClockProvider.clock()), Date.from(Instant.now(ClockProvider.clock())), null, \"en\", null, new BigDecimal(\"7.7\"), true, \"CHF\", organizationId, null);\n        subscriptionRepository.bindSubscriptionToReservation(subscriptionReservationId, descriptor.getPrice(), AllocationStatus.PENDING, subscriptionId);\n        subscriptionRepository.confirmSubscription(subscriptionReservationId, AllocationStatus.ACQUIRED,\n            \"Test\", \"Mc Test\", \"tickettest@test.com\", maxEntries,\n            null, null, ZonedDateTime.now(ClockProvider.clock()), zoneId.toString());\n        var subscription = subscriptionRepository.findSubscriptionById(subscriptionId);\n        assertEquals(descriptor.getPrice(), subscription.getSrcPriceCts());\n        return Pair.of(subscriptionId, subscription.getPin());\n    }\n}\n"], "filenames": ["src/main/java/alfio/config/authentication/support/UserCreatorBeforeLoginFilter.java", "src/main/java/alfio/controller/api/admin/UsersApiController.java", "src/main/java/alfio/controller/api/v1/admin/OrganizationsApiV1Controller.java", "src/main/java/alfio/manager/user/UserManager.java", "src/test/java/alfio/controller/api/v1/EventApiV1IntegrationTest.java", "src/test/java/alfio/controller/api/v1/ReservationApiV1ControllerTest.java", "src/test/java/alfio/controller/api/v1/SubscriptionApiV1IntegrationTest.java", "src/test/java/alfio/manager/ConfigurationManagerIntegrationTest.java", "src/test/java/alfio/manager/system/DataMigratorIntegrationTest.java", "src/test/java/alfio/test/util/IntegrationTestUtil.java"], "buggy_code_start_loc": [56, 140, 46, 89, 108, 118, 106, 103, 103, 121], "buggy_code_end_loc": [58, 283, 67, 382, 111, 119, 109, 104, 104, 125], "fixing_code_start_loc": [56, 140, 46, 90, 108, 118, 106, 103, 103, 121], "fixing_code_end_loc": [58, 282, 67, 477, 111, 119, 109, 104, 104, 125], "type": "CWE-639", "message": "Authorization Bypass Through User-Controlled Key in GitHub repository alfio-event/alf.io prior to 2.0-M4-2304.", "other": {"cve": {"id": "CVE-2023-2260", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-24T21:15:09.613", "lastModified": "2023-05-10T05:15:11.440", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Authorization Bypass Through User-Controlled Key in GitHub repository alfio-event/alf.io prior to 2.0-M4-2304."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-639"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:alf:alf:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0-m4-2304", "matchCriteriaId": "DB945ACA-B596-417D-9832-1137D9B9C640"}]}]}], "references": [{"url": "https://github.com/alfio-event/alf.io/commit/c9a16ab93d42b2beb06d529b57890121f85be6ef", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/649badc8-c935-4a84-8aa8-d3269ac54377", "source": "security@huntr.dev", "tags": ["Exploit"]}]}, "github_commit_url": "https://github.com/alfio-event/alf.io/commit/c9a16ab93d42b2beb06d529b57890121f85be6ef"}}