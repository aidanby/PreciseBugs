{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Adapter\\ContainerBuilder;\nuse PrestaShop\\PrestaShop\\Core\\Feature\\TokenInUrls;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Locale;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Specification\\Price as PriceSpecification;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Specification\\Number as NumberSpecification;\n\nclass AdminControllerCore extends Controller\n{\n    /** @var string */\n    public $path;\n\n    /** @var string */\n    public static $currentIndex;\n\n    /** @var string */\n    public $content;\n\n    /** @var array */\n    public $warnings = array();\n\n    /** @var array */\n    public $informations = array();\n\n    /** @var array */\n    public $confirmations = array();\n\n    /** @var string|false */\n    public $shopShareDatas = false;\n\n    /** @var array */\n    public $_languages = array();\n\n    /** @var int */\n    public $default_form_language;\n\n    /** @var bool */\n    public $allow_employee_form_lang;\n\n    /** @var string */\n    public $layout = 'layout.tpl';\n\n    /** @var bool */\n    public $bootstrap = false;\n\n    /** @var string|array */\n    protected $meta_title = array();\n\n    /** @var string */\n    public $template = 'content.tpl';\n\n    /** @var string Associated table name */\n    public $table = 'configuration';\n\n    /** @var string */\n    public $list_id;\n\n    /** @var string|false Object identifier inside the associated table */\n    protected $identifier = false;\n\n    /** @var string */\n    protected $identifier_name = 'name';\n\n    /** @var string Associated object class name */\n    public $className;\n\n    /** @var array */\n    public $tabAccess;\n\n    /** @var int Tab id */\n    public $id = -1;\n\n    /** @var bool */\n    public $required_database = false;\n\n    /** @var string Security token */\n    public $token;\n\n    /** @var string \"shop\" or \"group_shop\" */\n    public $shopLinkType;\n\n    /** @var string Default ORDER BY clause when $_orderBy is not defined */\n    protected $_defaultOrderBy = false;\n\n    /** @var string */\n    protected $_defaultOrderWay = 'ASC';\n\n    /** @var array */\n    public $tpl_form_vars = array();\n\n    /** @var array */\n    public $tpl_list_vars = array();\n\n    /** @var array */\n    public $tpl_delete_link_vars = array();\n\n    /** @var array */\n    public $tpl_option_vars = array();\n\n    /** @var array */\n    public $tpl_view_vars = array();\n\n    /** @var array */\n    public $tpl_required_fields_vars = array();\n\n    /** @var string|null */\n    public $base_tpl_view = null;\n\n    /** @var string|null */\n    public $base_tpl_form = null;\n\n    /** @var bool If you want more fieldsets in the form */\n    public $multiple_fieldsets = false;\n\n    /** @var array|false */\n    public $fields_value = false;\n\n    /** @var array Errors displayed after post processing */\n    public $errors = array();\n\n    /** @var bool Define if the header of the list contains filter and sorting links or not */\n    protected $list_simple_header;\n\n    /** @var array List to be generated */\n    protected $fields_list;\n\n    /** @var array Modules list filters */\n    protected $filter_modules_list = null;\n\n    /** @var array Modules list filters */\n    protected $modules_list = array();\n\n    /** @var array Edit form to be generated */\n    protected $fields_form;\n\n    /** @var array Override of $fields_form */\n    protected $fields_form_override;\n\n    /** @var string Override form action */\n    protected $submit_action;\n\n    /** @var array List of option forms to be generated */\n    protected $fields_options = array();\n\n    /** @var string */\n    protected $shopLink;\n\n    /** @var string SQL query */\n    protected $_listsql = '';\n\n    /** @var array Cache for query results */\n    protected $_list = array();\n\n    /** @var string MySQL error */\n    protected $_list_error;\n\n    /** @var string|array Toolbar title */\n    protected $toolbar_title;\n\n    /** @var array List of toolbar buttons */\n    protected $toolbar_btn = null;\n\n    /** @var bool Scrolling toolbar */\n    protected $toolbar_scroll = true;\n\n    /** @var bool Set to false to hide toolbar and page title */\n    protected $show_toolbar = true;\n\n    /** @var bool Set to true to show toolbar and page title for options */\n    protected $show_toolbar_options = false;\n\n    /** @var int Number of results in list */\n    protected $_listTotal = 0;\n\n    /** @var bool Automatically join language table if true */\n    public $lang = false;\n\n    /** @var array WHERE clause determined by filter fields */\n    protected $_filter;\n\n    /** @var string */\n    protected $_filterHaving;\n\n    /** @var array Temporary SQL table WHERE clause determined by filter fields */\n    protected $_tmpTableFilter = '';\n\n    /** @var array Number of results in list per page (used in select field) */\n    protected $_pagination = array(20, 50, 100, 300, 1000);\n\n    /** @var int Default number of results in list per page */\n    protected $_default_pagination = 50;\n\n    /** @var string ORDER BY clause determined by field/arrows in list header */\n    protected $_orderBy;\n\n    /** @var string Order way (ASC, DESC) determined by arrows in list header */\n    protected $_orderWay;\n\n    /** @var array List of available actions for each list row - default actions are view, edit, delete, duplicate */\n    protected $actions_available = array('view', 'edit', 'duplicate', 'delete');\n\n    /** @var array List of required actions for each list row */\n    protected $actions = array();\n\n    /** @var array List of row ids associated with a given action for witch this action have to not be available */\n    protected $list_skip_actions = array();\n\n    /** @var bool Don't show header & footer */\n    protected $lite_display = false;\n\n    /** @var bool List content lines are clickable if true */\n    protected $list_no_link = false;\n\n    /** @var bool */\n    protected $allow_export = false;\n\n    /** @var array Cache for translations */\n    public static $cache_lang = array();\n\n    /** @var array Required_fields to display in the Required Fields form */\n    public $required_fields = array();\n\n    /** @var HelperList */\n    protected $helper;\n\n    /** @var bool */\n    private $allowAnonymous = false;\n\n    /** @var int DELETE access level */\n    const LEVEL_DELETE = 4;\n\n    /** @var int ADD access level */\n    const LEVEL_ADD = 3;\n\n    /** @var int EDIT access level */\n    const LEVEL_EDIT = 2;\n\n    /** @var int VIEW access level */\n    const LEVEL_VIEW = 1;\n\n    /**\n     * Actions to execute on multiple selections.\n     *\n     * Usage:\n     *\n     * array(\n     *      'actionName' => array(\n     *      'text' => $this->l('Message displayed on the submit button (mandatory)'),\n     *      'confirm' => $this->l('If set, this confirmation message will pop-up (optional)')),\n     *      'anotherAction' => array(...)\n     * );\n     *\n     * If your action is named 'actionName', you need to have a method named bulkactionName() that will be executed when the button is clicked.\n     *\n     * @var array\n     */\n    protected $bulk_actions;\n\n    /** @var array Ids of the rows selected */\n    protected $boxes;\n\n    /** @var string Do not automatically select * anymore but select only what is necessary */\n    protected $explicitSelect = false;\n\n    /** @var string Add fields into data query to display list */\n    protected $_select;\n\n    /** @var string Join tables into data query to display list */\n    protected $_join;\n\n    /** @var string Add conditions into data query to display list */\n    protected $_where;\n\n    /** @var string Group rows into data query to display list */\n    protected $_group;\n\n    /** @var string Having rows into data query to display list */\n    protected $_having;\n\n    /** @var string Use SQL_CALC_FOUND_ROWS / FOUND_ROWS to count the number of records */\n    protected $_use_found_rows = true;\n\n    /** @var bool */\n    protected $is_cms = false;\n\n    /** @var string Identifier to use for changing positions in lists (can be omitted if positions cannot be changed) */\n    protected $position_identifier;\n\n    /** @var string|int */\n    protected $position_group_identifier;\n\n    /** @var bool Table records are not deleted but marked as deleted if set to true */\n    protected $deleted = false;\n\n    /** @var bool Is a list filter set */\n    protected $filter;\n\n    /** @var bool */\n    protected $noLink;\n\n    /** @var bool|null */\n    protected $specificConfirmDelete = null;\n\n    /** @var bool */\n    protected $colorOnBackground;\n\n    /** @var bool If true, activates color on hover */\n    protected $row_hover = true;\n\n    /** @var string Action to perform : 'edit', 'view', 'add', ... */\n    protected $action;\n\n    /** @var string */\n    protected $display;\n\n    /** @var array */\n    protected $tab_modules_list = array('default_list' => array(), 'slider_list' => array());\n\n    /** @var string */\n    public $tpl_folder;\n\n    /** @var string */\n    protected $bo_theme;\n\n    /** @var bool Redirect or not after a creation */\n    protected $_redirect = true;\n\n    /** @var array Name and directory where class image are located */\n    public $fieldImageSettings = array();\n\n    /** @var string Image type */\n    public $imageType = 'jpg';\n\n    /** @var ObjectModel Instantiation of the class associated with the AdminController */\n    protected $object;\n\n    /** @var int Current object ID */\n    protected $id_object;\n\n    /** @var string Current controller name without suffix */\n    public $controller_name;\n\n    /** @var int */\n    public $multishop_context = -1;\n\n    /** @var false */\n    public $multishop_context_group = true;\n\n    /** @var array Current breadcrumb position as an array of tab names */\n    protected $breadcrumbs;\n\n    /** @var bool Bootstrap variable */\n    public $show_page_header_toolbar = false;\n\n    /** @var string Bootstrap variable */\n    public $page_header_toolbar_title;\n\n    /** @var array|Traversable Bootstrap variable */\n    public $page_header_toolbar_btn = array();\n\n    /** @var bool Bootstrap variable */\n    public $show_form_cancel_button;\n\n    /** @var string */\n    public $admin_webpath;\n\n    /** @var array */\n    protected $list_natives_modules = array();\n\n    /** @var array */\n    protected $list_partners_modules = array();\n\n    /** @var array */\n    public $modals = array();\n\n    /** @var bool */\n    protected $logged_on_addons = false;\n\n    /** @var bool if logged employee has access to AdminImport */\n    protected $can_import = false;\n\n    /** @var string */\n    protected $tabSlug;\n\n    public function __construct($forceControllerName = '', $default_theme_name = 'default')\n    {\n        global $timer_start;\n        $this->timer_start = $timer_start;\n\n        $this->controller_type = 'admin';\n        $this->controller_name = !empty($forceControllerName) ? $forceControllerName : get_class($this);\n        if (strpos($this->controller_name, 'ControllerOverride')) {\n            $this->controller_name = substr($this->controller_name, 0, -18);\n        }\n        if (strpos($this->controller_name, 'Controller')) {\n            $this->controller_name = substr($this->controller_name, 0, -10);\n        }\n        parent::__construct();\n\n        if ($this->multishop_context == -1) {\n            $this->multishop_context = Shop::CONTEXT_ALL | Shop::CONTEXT_GROUP | Shop::CONTEXT_SHOP;\n        }\n\n        if (defined('_PS_BO_ALL_THEMES_DIR_')) {\n            if (defined('_PS_BO_DEFAULT_THEME_') && _PS_BO_DEFAULT_THEME_\n                && @filemtime(_PS_BO_ALL_THEMES_DIR_ . _PS_BO_DEFAULT_THEME_ . DIRECTORY_SEPARATOR . 'template')) {\n                $default_theme_name = _PS_BO_DEFAULT_THEME_;\n            }\n\n            $this->bo_theme = $default_theme_name;\n            if (!@filemtime(_PS_BO_ALL_THEMES_DIR_ . $this->bo_theme . DIRECTORY_SEPARATOR . 'template')) {\n                $this->bo_theme = 'default';\n            }\n\n            $this->context->employee->bo_theme = (\n                Validate::isLoadedObject($this->context->employee)\n                && $this->context->employee->bo_theme\n            ) ? $this->context->employee->bo_theme : $this->bo_theme;\n\n            $this->bo_css = (\n                Validate::isLoadedObject($this->context->employee)\n                && $this->context->employee->bo_css\n            ) ? $this->context->employee->bo_css : 'theme.css';\n            $this->context->employee->bo_css = $this->bo_css;\n\n            $adminThemeCSSFile = _PS_BO_ALL_THEMES_DIR_ . $this->bo_theme . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . $this->bo_css;\n\n            if (file_exists($adminThemeCSSFile)) {\n                $this->bo_css = 'theme.css';\n            }\n\n            $this->context->smarty->setTemplateDir(array(\n                _PS_BO_ALL_THEMES_DIR_ . $this->bo_theme . DIRECTORY_SEPARATOR . 'template',\n                _PS_OVERRIDE_DIR_ . 'controllers' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'templates',\n            ));\n        }\n\n        $this->id = Tab::getIdFromClassName($this->controller_name);\n        $this->token = Tools::getAdminToken($this->controller_name . (int) $this->id . (int) $this->context->employee->id);\n\n        $this->_conf = array(\n            1 => $this->trans('Successful deletion.', array(), 'Admin.Notifications.Success'),\n            2 => $this->trans('The selection has been successfully deleted.', array(), 'Admin.Notifications.Success'),\n            3 => $this->trans('Successful creation.', array(), 'Admin.Notifications.Success'),\n            4 => $this->trans('Successful update.', array(), 'Admin.Notifications.Success'),\n            5 => $this->trans('The status has been successfully updated.', array(), 'Admin.Notifications.Success'),\n            6 => $this->trans('The settings have been successfully updated.', array(), 'Admin.Notifications.Success'),\n            7 => $this->trans('The image was successfully deleted.', array(), 'Admin.Notifications.Success'),\n            8 => $this->trans('The module was successfully downloaded.', array(), 'Admin.Modules.Notification'),\n            9 => $this->trans('The thumbnails were successfully regenerated.', array(), 'Admin.Notifications.Success'),\n            10 => $this->trans('The message was successfully sent to the customer.', array(), 'Admin.Orderscustomers.Notification'),\n            11 => $this->trans('Comment successfully added.', array(), 'Admin.Notifications.Success'),\n            12 => $this->trans('Module(s) installed successfully.', array(), 'Admin.Modules.Notification'),\n            13 => $this->trans('Module(s) uninstalled successfully.', array(), 'Admin.Modules.Notification'),\n            14 => $this->trans('The translation was successfully copied.', array(), 'Admin.International.Notification'),\n            15 => $this->trans('The translations have been successfully added.', array(), 'Admin.International.Notification'),\n            16 => $this->trans('The module transplanted successfully to the hook.', array(), 'Admin.Modules.Notification'),\n            17 => $this->trans('The module was successfully removed from the hook.', array(), 'Admin.Modules.Notification'),\n            18 => $this->trans('Successful upload.', array(), 'Admin.Notifications.Success'),\n            19 => $this->trans('Duplication was completed successfully.', array(), 'Admin.Notifications.Success'),\n            20 => $this->trans('The translation was added successfully, but the language has not been created.', array(), 'Admin.International.Notification'),\n            21 => $this->trans('Module reset successfully.', array(), 'Admin.Modules.Notification'),\n            22 => $this->trans('Module deleted successfully.', array(), 'Admin.Modules.Notification'),\n            23 => $this->trans('Localization pack imported successfully.', array(), 'Admin.International.Notification'),\n            24 => $this->trans('Localization pack imported successfully.', array(), 'Admin.International.Notification'),\n            25 => $this->trans('The selected images have successfully been moved.', array(), 'Admin.Notifications.Success'),\n            26 => $this->trans('Your cover image selection has been saved.', array(), 'Admin.Notifications.Success'),\n            27 => $this->trans('The image\\'s shop association has been modified.', array(), 'Admin.Notifications.Success'),\n            28 => $this->trans('A zone has been assigned to the selection successfully.', array(), 'Admin.Notifications.Success'),\n            29 => $this->trans('Successful upgrade.', array(), 'Admin.Notifications.Success'),\n            30 => $this->trans('A partial refund was successfully created.', array(), 'Admin.Orderscustomers.Notification'),\n            31 => $this->trans('The discount was successfully generated.', array(), 'Admin.Catalog.Notification'),\n            32 => $this->trans('Successfully signed in to PrestaShop Addons.', array(), 'Admin.Modules.Notification'),\n        );\n\n        $this->_error = array(\n            1 => $this->trans(\n                'The root category of the shop %shop% is not associated with the current shop. You can\\'t access this page. Please change the root category of the shop.',\n                array(\n                    '%shop%' => $this->context->shop->name,\n                ),\n                'Admin.Catalog.Notification'\n            ),\n        );\n\n        if (!$this->identifier) {\n            $this->identifier = 'id_' . $this->table;\n        }\n        if (!$this->_defaultOrderBy) {\n            $this->_defaultOrderBy = $this->identifier;\n        }\n\n        // Fix for homepage\n        if ($this->controller_name == 'AdminDashboard') {\n            $_POST['token'] = $this->token;\n        }\n\n        if (!Shop::isFeatureActive()) {\n            $this->shopLinkType = '';\n        }\n\n        //$this->base_template_folder = _PS_BO_ALL_THEMES_DIR_.$this->bo_theme.'/template';\n        $this->override_folder = Tools::toUnderscoreCase(substr($this->controller_name, 5)) . '/';\n        // Get the name of the folder containing the custom tpl files\n        $this->tpl_folder = Tools::toUnderscoreCase(substr($this->controller_name, 5)) . '/';\n\n        $this->initShopContext();\n\n        if (defined('_PS_ADMIN_DIR_')) {\n            $this->admin_webpath = str_ireplace(_PS_CORE_DIR_, '', _PS_ADMIN_DIR_);\n            $this->admin_webpath = preg_replace('/^' . preg_quote(DIRECTORY_SEPARATOR, '/') . '/', '', $this->admin_webpath);\n        }\n\n        // Check if logged on Addons\n        $this->logged_on_addons = false;\n        if (isset($this->context->cookie->username_addons, $this->context->cookie->password_addons) && !empty($this->context->cookie->username_addons) && !empty($this->context->cookie->password_addons)) {\n            $this->logged_on_addons = true;\n        }\n\n        // Set context mode\n        if (defined('_PS_HOST_MODE_') && _PS_HOST_MODE_) {\n            if (isset($this->context->cookie->is_contributor) && (int) $this->context->cookie->is_contributor === 1) {\n                $this->context->mode = Context::MODE_HOST_CONTRIB;\n            } else {\n                $this->context->mode = Context::MODE_HOST;\n            }\n        } elseif (isset($this->context->cookie->is_contributor) && (int) $this->context->cookie->is_contributor === 1) {\n            $this->context->mode = Context::MODE_STD_CONTRIB;\n        } else {\n            $this->context->mode = Context::MODE_STD;\n        }\n\n        //* Check if logged employee has access to AdminImport controller */\n        $import_access = Profile::getProfileAccess($this->context->employee->id_profile, Tab::getIdFromClassName('AdminImport'));\n        if (is_array($import_access) && isset($import_access['view']) && $import_access['view'] == 1) {\n            $this->can_import = true;\n        }\n\n        $this->context->smarty->assign(array(\n            'context_mode' => $this->context->mode,\n            'logged_on_addons' => $this->logged_on_addons,\n            'can_import' => $this->can_import,\n        ));\n    }\n\n    /**\n     * Set breadcrumbs array for the controller page.\n     *\n     * @param int|null $tab_id\n     * @param array|null $tabs\n     */\n    public function initBreadcrumbs($tab_id = null, $tabs = null)\n    {\n        if (is_array($tabs)) {\n            $tabs = array();\n        }\n\n        if (null === $tab_id) {\n            $tab_id = $this->id;\n        }\n\n        $tabs = Tab::recursiveTab($tab_id, $tabs);\n\n        $dummy = array('name' => '', 'href' => '', 'icon' => '');\n        $breadcrumbs2 = array(\n            'container' => $dummy,\n            'tab' => $dummy,\n            'action' => $dummy,\n        );\n        if (isset($tabs[0])) {\n            $this->addMetaTitle($tabs[0]['name']);\n            $breadcrumbs2['tab']['name'] = $tabs[0]['name'];\n            $breadcrumbs2['tab']['href'] = $this->context->link->getAdminLink($tabs[0]['class_name']);\n            if (!isset($tabs[1])) {\n                $breadcrumbs2['tab']['icon'] = 'icon-' . $tabs[0]['class_name'];\n            }\n        }\n        if (isset($tabs[1])) {\n            $breadcrumbs2['container']['name'] = $tabs[1]['name'];\n            $breadcrumbs2['container']['href'] = $this->context->link->getAdminLink($tabs[1]['class_name']);\n            $breadcrumbs2['container']['icon'] = 'icon-' . $tabs[1]['class_name'];\n        }\n\n        /* content, edit, list, add, details, options, view */\n        switch ($this->display) {\n            case 'add':\n                $breadcrumbs2['action']['name'] = $this->l('Add', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-plus';\n\n                break;\n            case 'edit':\n                $breadcrumbs2['action']['name'] = $this->l('Edit', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-pencil';\n\n                break;\n            case '':\n            case 'list':\n                $breadcrumbs2['action']['name'] = $this->l('List', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-th-list';\n\n                break;\n            case 'details':\n            case 'view':\n                $breadcrumbs2['action']['name'] = $this->l('View details', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-zoom-in';\n\n                break;\n            case 'options':\n                $breadcrumbs2['action']['name'] = $this->l('Options', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-cogs';\n\n                break;\n            case 'generator':\n                $breadcrumbs2['action']['name'] = $this->l('Generator', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-flask';\n\n                break;\n        }\n\n        $this->context->smarty->assign(array(\n            'breadcrumbs2' => $breadcrumbs2,\n            'quick_access_current_link_name' => Tools::safeOutput($breadcrumbs2['tab']['name'] . (isset($breadcrumbs2['action']) ? ' - ' . $breadcrumbs2['action']['name'] : '')),\n            'quick_access_current_link_icon' => $breadcrumbs2['container']['icon'],\n        ));\n\n        /* BEGIN - Backward compatibility < 1.6.0.3 */\n        $this->breadcrumbs[] = $tabs[0]['name'];\n        $navigation_pipe = (Configuration::get('PS_NAVIGATION_PIPE') ? Configuration::get('PS_NAVIGATION_PIPE') : '>');\n        $this->context->smarty->assign('navigationPipe', $navigation_pipe);\n        /* END - Backward compatibility < 1.6.0.3 */\n    }\n\n    /**\n     * Set default toolbar_title to admin breadcrumb.\n     */\n    public function initToolbarTitle()\n    {\n        $this->toolbar_title = is_array($this->breadcrumbs) ? array_unique($this->breadcrumbs) : array($this->breadcrumbs);\n\n        switch ($this->display) {\n            case 'edit':\n                $this->toolbar_title[] = $this->l('Edit', null, null, false);\n                $this->addMetaTitle($this->l('Edit', null, null, false));\n\n                break;\n\n            case 'add':\n                $this->toolbar_title[] = $this->l('Add new', null, null, false);\n                $this->addMetaTitle($this->l('Add new', null, null, false));\n\n                break;\n\n            case 'view':\n                $this->toolbar_title[] = $this->l('View', null, null, false);\n                $this->addMetaTitle($this->l('View', null, null, false));\n\n                break;\n        }\n\n        if ($filter = $this->addFiltersToBreadcrumbs()) {\n            $this->toolbar_title[] = $filter;\n        }\n    }\n\n    /**\n     * @return string|void\n     */\n    public function addFiltersToBreadcrumbs()\n    {\n        if ($this->filter && is_array($this->fields_list)) {\n            $filters = array();\n\n            foreach ($this->fields_list as $field => $t) {\n                if (isset($t['filter_key'])) {\n                    $field = $t['filter_key'];\n                }\n\n                if (($val = Tools::getValue($this->table . 'Filter_' . $field)) || $val = $this->context->cookie->{$this->getCookieFilterPrefix() . $this->table . 'Filter_' . $field}) {\n                    if (!is_array($val)) {\n                        $filter_value = '';\n                        if (isset($t['type']) && $t['type'] == 'bool') {\n                            $filter_value = ((bool) $val) ? $this->l('yes') : $this->l('no');\n                        } elseif (isset($t['type']) && $t['type'] == 'date' || isset($t['type']) && $t['type'] == 'datetime') {\n                            $date = json_decode($val, true);\n                            if (isset($date[0])) {\n                                $filter_value = $date[0];\n                                if (isset($date[1]) && !empty($date[1])) {\n                                    $filter_value .= ' - ' . $date[1];\n                                }\n                            }\n                        } elseif (is_string($val)) {\n                            $filter_value = htmlspecialchars($val, ENT_QUOTES, 'UTF-8');\n                        }\n                        if (!empty($filter_value)) {\n                            $filters[] = sprintf($this->l('%s: %s'), $t['title'], $filter_value);\n                        }\n                    } else {\n                        $filter_value = '';\n                        foreach ($val as $v) {\n                            if (is_string($v) && !empty($v)) {\n                                $filter_value .= ' - ' . htmlspecialchars($v, ENT_QUOTES, 'UTF-8');\n                            }\n                        }\n                        $filter_value = ltrim($filter_value, ' -');\n                        if (!empty($filter_value)) {\n                            $filters[] = sprintf($this->l('%s: %s'), $t['title'], $filter_value);\n                        }\n                    }\n                }\n            }\n\n            if (count($filters)) {\n                return sprintf($this->l('filter by %s'), implode(', ', $filters));\n            }\n        }\n    }\n\n    /**\n     * @param string $action\n     * @param bool $disable\n     */\n    public function access($action, $disable = false)\n    {\n        if (empty($this->tabAccess[$action])) {\n            $slugs = array();\n\n            foreach ((array) Access::getAuthorizationFromLegacy($action) as $roleSuffix) {\n                $slugs[] = $this->getTabSlug() . $roleSuffix;\n            }\n\n            $this->tabAccess[$action] = Access::isGranted(\n                $slugs,\n                $this->context->employee->id_profile\n            );\n        }\n\n        return $this->tabAccess[$action];\n    }\n\n    /**\n     * Check rights to view the current tab.\n     *\n     * @param bool $disable\n     *\n     * @return bool\n     */\n    public function viewAccess($disable = false)\n    {\n        return $this->access('view', $disable);\n    }\n\n    /**\n     * Check for security token.\n     *\n     * @return bool\n     */\n    public function checkToken()\n    {\n        if (TokenInUrls::isDisabled() || $this->isAnonymousAllowed()) {\n            return true;\n        }\n\n        $token = Tools::getValue('token');\n        if ($token === $this->token) {\n            return true;\n        }\n\n        if (count($_POST) || !isset($_GET['controller']) || !Validate::isControllerName($_GET['controller']) || !$token) {\n            return false;\n        }\n\n        foreach ($_GET as $key => $value) {\n            if (is_array($value) || !in_array($key, array('controller', 'controllerUri'))) {\n                return false;\n            }\n        }\n\n        $cookie = Context::getContext()->cookie;\n        $whitelist = array('date_add', 'id_lang', 'id_employee', 'email', 'profile', 'passwd', 'remote_addr', 'shopContext', 'collapse_menu', 'checksum');\n        foreach ($cookie->getAll() as $key => $value) {\n            if (!in_array($key, $whitelist)) {\n                unset($cookie->$key);\n            }\n        }\n\n        $cookie->write();\n\n        return true;\n    }\n\n    /**\n     * Set the filters used for the list display.\n     */\n    protected function getCookieFilterPrefix()\n    {\n        return str_replace(array('admin', 'controller'), '', Tools::strtolower(get_class($this)));\n    }\n\n    public function processFilter()\n    {\n        Hook::exec('action' . $this->controller_name . 'ListingFieldsModifier', array(\n            'fields' => &$this->fields_list,\n        ));\n\n        if (!isset($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        $prefix = $this->getCookieFilterPrefix();\n\n        if (isset($this->list_id)) {\n            foreach ($_POST as $key => $value) {\n                if ($value === '') {\n                    unset($this->context->cookie->{$prefix . $key});\n                } elseif (stripos($key, $this->list_id . 'Filter_') === 0) {\n                    $this->context->cookie->{$prefix . $key} = !is_array($value) ? $value : json_encode($value);\n                } elseif (stripos($key, 'submitFilter') === 0) {\n                    $this->context->cookie->$key = !is_array($value) ? $value : json_encode($value);\n                }\n            }\n\n            foreach ($_GET as $key => $value) {\n                if (stripos($key, $this->list_id . 'Filter_') === 0) {\n                    $this->context->cookie->{$prefix . $key} = !is_array($value) ? $value : json_encode($value);\n                } elseif (stripos($key, 'submitFilter') === 0) {\n                    $this->context->cookie->$key = !is_array($value) ? $value : json_encode($value);\n                }\n                if (stripos($key, $this->list_id . 'Orderby') === 0 && Validate::isOrderBy($value)) {\n                    if ($value === '' || $value == $this->_defaultOrderBy) {\n                        unset($this->context->cookie->{$prefix . $key});\n                    } else {\n                        $this->context->cookie->{$prefix . $key} = $value;\n                    }\n                } elseif (stripos($key, $this->list_id . 'Orderway') === 0 && Validate::isOrderWay($value)) {\n                    if ($value === '' || $value == $this->_defaultOrderWay) {\n                        unset($this->context->cookie->{$prefix . $key});\n                    } else {\n                        $this->context->cookie->{$prefix . $key} = $value;\n                    }\n                }\n            }\n        }\n\n        $filters = $this->context->cookie->getFamily($prefix . $this->list_id . 'Filter_');\n        $definition = false;\n        if (isset($this->className) && $this->className) {\n            $definition = ObjectModel::getDefinition($this->className);\n        }\n\n        foreach ($filters as $key => $value) {\n            /* Extracting filters from $_POST on key filter_ */\n            if ($value != null && !strncmp($key, $prefix . $this->list_id . 'Filter_', 7 + Tools::strlen($prefix . $this->list_id))) {\n                $key = Tools::substr($key, 7 + Tools::strlen($prefix . $this->list_id));\n                /* Table alias could be specified using a ! eg. alias!field */\n                $tmp_tab = explode('!', $key);\n                $filter = count($tmp_tab) > 1 ? $tmp_tab[1] : $tmp_tab[0];\n\n                if ($field = $this->filterToField($key, $filter)) {\n                    $type = (array_key_exists('filter_type', $field) ? $field['filter_type'] : (array_key_exists('type', $field) ? $field['type'] : false));\n                    if (($type == 'date' || $type == 'datetime') && is_string($value)) {\n                        $value = json_decode($value, true);\n                    }\n                    $key = isset($tmp_tab[1]) ? $tmp_tab[0] . '.`' . $tmp_tab[1] . '`' : '`' . $tmp_tab[0] . '`';\n\n                    // Assignment by reference\n                    if (array_key_exists('tmpTableFilter', $field)) {\n                        $sql_filter = &$this->_tmpTableFilter;\n                    } elseif (array_key_exists('havingFilter', $field)) {\n                        $sql_filter = &$this->_filterHaving;\n                    } else {\n                        $sql_filter = &$this->_filter;\n                    }\n\n                    /* Only for date filtering (from, to) */\n                    if (is_array($value)) {\n                        if (isset($value[0]) && !empty($value[0])) {\n                            if (!Validate::isDate($value[0])) {\n                                $this->errors[] = $this->trans('The \\'From\\' date format is invalid (YYYY-MM-DD)', array(), 'Admin.Notifications.Error');\n                            } else {\n                                $sql_filter .= ' AND ' . pSQL($key) . ' >= \\'' . pSQL(Tools::dateFrom($value[0])) . '\\'';\n                            }\n                        }\n\n                        if (isset($value[1]) && !empty($value[1])) {\n                            if (!Validate::isDate($value[1])) {\n                                $this->errors[] = $this->trans('The \\'To\\' date format is invalid (YYYY-MM-DD)', array(), 'Admin.Notifications.Error');\n                            } else {\n                                $sql_filter .= ' AND ' . pSQL($key) . ' <= \\'' . pSQL(Tools::dateTo($value[1])) . '\\'';\n                            }\n                        }\n                    } else {\n                        $sql_filter .= ' AND ';\n                        $check_key = ($key == $this->identifier || $key == '`' . $this->identifier . '`');\n                        $alias = ($definition && !empty($definition['fields'][$filter]['shop'])) ? 'sa' : 'a';\n\n                        if ($type == 'int' || $type == 'bool') {\n                            $sql_filter .= (($check_key || $key == '`active`') ? $alias . '.' : '') . pSQL($key) . ' = ' . (int) $value . ' ';\n                        } elseif ($type == 'decimal') {\n                            $sql_filter .= ($check_key ? $alias . '.' : '') . pSQL($key) . ' = ' . (float) $value . ' ';\n                        } elseif ($type == 'select') {\n                            $sql_filter .= ($check_key ? $alias . '.' : '') . pSQL($key) . ' = \\'' . pSQL($value) . '\\' ';\n                        } elseif ($type == 'price') {\n                            $value = (float) str_replace(',', '.', $value);\n                            $sql_filter .= ($check_key ? $alias . '.' : '') . pSQL($key) . ' = ' . pSQL(trim($value)) . ' ';\n                        } else {\n                            $sql_filter .= ($check_key ? $alias . '.' : '') . pSQL($key) . ' LIKE \\'%' . pSQL(trim($value)) . '%\\' ';\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @TODO uses redirectAdmin only if !$this->ajax\n     *\n     * @return ObjectModel|bool\n     */\n    public function postProcess()\n    {\n        try {\n            if ($this->ajax) {\n                // from ajax-tab.php\n                $action = Tools::getValue('action');\n                // no need to use displayConf() here\n                if (!empty($action) && method_exists($this, 'ajaxProcess' . Tools::toCamelCase($action))) {\n                    Hook::exec('actionAdmin' . ucfirst($this->action) . 'Before', array('controller' => $this));\n                    Hook::exec('action' . get_class($this) . ucfirst($this->action) . 'Before', array('controller' => $this));\n\n                    $return = $this->{'ajaxProcess' . Tools::toCamelCase($action)}();\n\n                    Hook::exec('actionAdmin' . ucfirst($this->action) . 'After', array('controller' => $this, 'return' => $return));\n                    Hook::exec('action' . get_class($this) . ucfirst($this->action) . 'After', array('controller' => $this, 'return' => $return));\n\n                    return $return;\n                } elseif (!empty($action) && $this->controller_name == 'AdminModules' && Tools::getIsset('configure')) {\n                    $module_obj = Module::getInstanceByName(Tools::getValue('configure'));\n                    if (Validate::isLoadedObject($module_obj) && method_exists($module_obj, 'ajaxProcess' . $action)) {\n                        return $module_obj->{'ajaxProcess' . $action}();\n                    }\n                } elseif (method_exists($this, 'ajaxProcess')) {\n                    return $this->ajaxProcess();\n                }\n            } else {\n                // Process list filtering\n                if ($this->filter && $this->action != 'reset_filters') {\n                    $this->processFilter();\n                }\n\n                if (isset($_POST) && count($_POST) && (int) Tools::getValue('submitFilter' . $this->list_id) || Tools::isSubmit('submitReset' . $this->list_id)) {\n                    $this->setRedirectAfter(self::$currentIndex . '&token=' . $this->token . (Tools::isSubmit('submitFilter' . $this->list_id) ? '&submitFilter' . $this->list_id . '=' . (int) Tools::getValue('submitFilter' . $this->list_id) : ''));\n                }\n\n                // If the method named after the action exists, call \"before\" hooks, then call action method, then call \"after\" hooks\n                if (!empty($this->action) && method_exists($this, 'process' . ucfirst(Tools::toCamelCase($this->action)))) {\n                    // Hook before action\n                    Hook::exec('actionAdmin' . ucfirst($this->action) . 'Before', array('controller' => $this));\n                    Hook::exec('action' . get_class($this) . ucfirst($this->action) . 'Before', array('controller' => $this));\n                    // Call process\n                    $return = $this->{'process' . Tools::toCamelCase($this->action)}();\n\n                    // Hook After Action\n                    Hook::exec('actionAdmin' . ucfirst($this->action) . 'After', array('controller' => $this, 'return' => $return));\n                    Hook::exec('action' . get_class($this) . ucfirst($this->action) . 'After', array('controller' => $this, 'return' => $return));\n\n                    return $return;\n                }\n            }\n        } catch (PrestaShopException $e) {\n            $this->errors[] = $e->getMessage();\n        }\n\n        return false;\n    }\n\n    /**\n     * Object Delete images.\n     *\n     * @return ObjectModel|false\n     */\n    public function processDeleteImage()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            if (($object->deleteImage())) {\n                $redirect = self::$currentIndex . '&update' . $this->table . '&' . $this->identifier . '=' . (int) Tools::getValue($this->identifier) . '&conf=7&token=' . $this->token;\n                if (!$this->ajax) {\n                    $this->redirect_after = $redirect;\n                } else {\n                    $this->content = 'ok';\n                }\n            }\n        }\n        $this->errors[] = $this->trans('An error occurred while attempting to delete the image. (cannot load object).', array(), 'Admin.Notifications.Error');\n\n        return $object;\n    }\n\n    /**\n     * @param string $text_delimiter\n     *\n     * @throws PrestaShopException\n     */\n    public function processExport($text_delimiter = '\"')\n    {\n        // clean buffer\n        if (ob_get_level() && ob_get_length() > 0) {\n            ob_clean();\n        }\n        $this->getList($this->context->language->id, null, null, 0, false);\n        if (!count($this->_list)) {\n            return;\n        }\n\n        header('Content-type: text/csv');\n        header('Content-Type: application/force-download; charset=UTF-8');\n        header('Cache-Control: no-store, no-cache');\n        header('Content-disposition: attachment; filename=\"' . $this->table . '_' . date('Y-m-d_His') . '.csv\"');\n\n        $fd = fopen('php://output', 'wb');\n        $headers = array();\n        foreach ($this->fields_list as $key => $datas) {\n            if ('PDF' === $datas['title']) {\n                unset($this->fields_list[$key]);\n            } else {\n                if ('ID' === $datas['title']) {\n                    $headers[] = strtolower(Tools::htmlentitiesDecodeUTF8($datas['title']));\n                } else {\n                    $headers[] = Tools::htmlentitiesDecodeUTF8($datas['title']);\n                }\n            }\n        }\n        fputcsv($fd, $headers, ';', $text_delimiter);\n\n        foreach ($this->_list as $i => $row) {\n            $content = array();\n            $path_to_image = false;\n            foreach ($this->fields_list as $key => $params) {\n                $field_value = isset($row[$key]) ? Tools::htmlentitiesDecodeUTF8(Tools::nl2br($row[$key])) : '';\n                if ($key == 'image') {\n                    if ($params['image'] != 'p' || Configuration::get('PS_LEGACY_IMAGES')) {\n                        $path_to_image = Tools::getShopDomain(true) . _PS_IMG_ . $params['image'] . '/' . $row['id_' . $this->table] . (isset($row['id_image']) ? '-' . (int) $row['id_image'] : '') . '.' . $this->imageType;\n                    } else {\n                        $path_to_image = Tools::getShopDomain(true) . _PS_IMG_ . $params['image'] . '/' . Image::getImgFolderStatic($row['id_image']) . (int) $row['id_image'] . '.' . $this->imageType;\n                    }\n                    if ($path_to_image) {\n                        $field_value = $path_to_image;\n                    }\n                }\n                if (isset($params['callback'])) {\n                    $callback_obj = (isset($params['callback_object'])) ? $params['callback_object'] : $this->context->controller;\n                    if (!preg_match('/<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)/ism', call_user_func_array(array($callback_obj, $params['callback']), array($field_value, $row)))) {\n                        $field_value = call_user_func_array(array($callback_obj, $params['callback']), array($field_value, $row));\n                    }\n                }\n                $content[] = $field_value;\n            }\n            fputcsv($fd, $content, ';', $text_delimiter);\n        }\n        @fclose($fd);\n        die;\n    }\n\n    /**\n     * Object Delete.\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopException\n     */\n    public function processDelete()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            $res = true;\n            // check if request at least one object with noZeroObject\n            if (isset($object->noZeroObject) && count(call_user_func(array($this->className, $object->noZeroObject))) <= 1) {\n                $this->errors[] = $this->trans('You need at least one object.', array(), 'Admin.Notifications.Error') .\n                    ' <b>' . $this->table . '</b><br />' .\n                    $this->trans('You cannot delete all of the items.', array(), 'Admin.Notifications.Error');\n            } elseif (array_key_exists('delete', $this->list_skip_actions) && in_array($object->id, $this->list_skip_actions['delete'])) { //check if some ids are in list_skip_actions and forbid deletion\n                $this->errors[] = $this->trans('You cannot delete this item.', array(), 'Admin.Notifications.Error');\n            } else {\n                if ($this->deleted) {\n                    if (!empty($this->fieldImageSettings)) {\n                        $res = $object->deleteImage();\n                    }\n\n                    if (!$res) {\n                        $this->errors[] = $this->trans('Unable to delete associated images.', array(), 'Admin.Notifications.Error');\n                    }\n\n                    $object->deleted = 1;\n                    if ($res = $object->update()) {\n                        $this->redirect_after = self::$currentIndex . '&conf=1&token=' . $this->token;\n                    }\n                } elseif ($res = $object->delete()) {\n                    $this->redirect_after = self::$currentIndex . '&conf=1&token=' . $this->token;\n                }\n                $this->errors[] = $this->trans('An error occurred during deletion.', array(), 'Admin.Notifications.Error');\n                if ($res) {\n                    PrestaShopLogger::addLog(sprintf($this->l('%s deletion', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $this->object->id, true, (int) $this->context->employee->id);\n                }\n            }\n        } else {\n            $this->errors[] = $this->trans('An error occurred while deleting the object.', array(), 'Admin.Notifications.Error') .\n                ' <b>' . $this->table . '</b> ' .\n                $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n        }\n\n        return $object;\n    }\n\n    /**\n     * Call the right method for creating or updating object.\n     *\n     * @return ObjectModel|false|void\n     */\n    public function processSave()\n    {\n        if ($this->id_object) {\n            $this->object = $this->loadObject();\n\n            return $this->processUpdate();\n        } else {\n            return $this->processAdd();\n        }\n    }\n\n    /**\n     * Object creation.\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopException\n     */\n    public function processAdd()\n    {\n        if (!isset($this->className) || empty($this->className)) {\n            return false;\n        }\n\n        $this->validateRules();\n        if (count($this->errors) <= 0) {\n            $this->object = new $this->className();\n\n            $this->copyFromPost($this->object, $this->table);\n            $this->beforeAdd($this->object);\n            if (method_exists($this->object, 'add') && !$this->object->add()) {\n                $this->errors[] = $this->trans('An error occurred while creating an object.', array(), 'Admin.Notifications.Error') .\n                    ' <b>' . $this->table . ' (' . Db::getInstance()->getMsgError() . ')</b>';\n            } elseif (($_POST[$this->identifier] = $this->object->id /* voluntary do affectation here */) && $this->postImage($this->object->id) && !count($this->errors) && $this->_redirect) {\n                PrestaShopLogger::addLog(sprintf($this->l('%s addition', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $this->object->id, true, (int) $this->context->employee->id);\n                $parent_id = (int) Tools::getValue('id_parent', 1);\n                $this->afterAdd($this->object);\n                $this->updateAssoShop($this->object->id);\n                // Save and stay on same form\n                if (empty($this->redirect_after) && $this->redirect_after !== false && Tools::isSubmit('submitAdd' . $this->table . 'AndStay')) {\n                    $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=' . $this->object->id . '&conf=3&update' . $this->table . '&token=' . $this->token;\n                }\n                // Save and back to parent\n                if (empty($this->redirect_after) && $this->redirect_after !== false && Tools::isSubmit('submitAdd' . $this->table . 'AndBackToParent')) {\n                    $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=' . $parent_id . '&conf=3&token=' . $this->token;\n                }\n                // Default behavior (save and back)\n                if (empty($this->redirect_after) && $this->redirect_after !== false) {\n                    $this->redirect_after = self::$currentIndex . ($parent_id ? '&' . $this->identifier . '=' . $this->object->id : '') . '&conf=3&token=' . $this->token;\n                }\n            }\n        }\n\n        $this->errors = array_unique($this->errors);\n        if (!empty($this->errors)) {\n            // if we have errors, we stay on the form instead of going back to the list\n            $this->display = 'edit';\n\n            return false;\n        }\n\n        return $this->object;\n    }\n\n    /**\n     * Object update.\n     *\n     * @return ObjectModel|false|void\n     *\n     * @throws PrestaShopException\n     */\n    public function processUpdate()\n    {\n        /* Checking fields validity */\n        $this->validateRules();\n        if (empty($this->errors)) {\n            $id = (int) Tools::getValue($this->identifier);\n\n            /* Object update */\n            if (isset($id) && !empty($id)) {\n                /** @var ObjectModel $object */\n                $object = new $this->className($id);\n                if (Validate::isLoadedObject($object)) {\n                    /* Specific to objects which must not be deleted */\n                    if ($this->deleted && $this->beforeDelete($object)) {\n                        // Create new one with old objet values\n                        /** @var ObjectModel $object_new */\n                        $object_new = $object->duplicateObject();\n                        if (Validate::isLoadedObject($object_new)) {\n                            // Update old object to deleted\n                            $object->deleted = 1;\n                            $object->update();\n\n                            // Update new object with post values\n                            $this->copyFromPost($object_new, $this->table);\n                            $result = $object_new->update();\n                            if (Validate::isLoadedObject($object_new)) {\n                                $this->afterDelete($object_new, $object->id);\n                            }\n                        }\n                    } else {\n                        $this->copyFromPost($object, $this->table);\n                        $result = $object->update();\n                        $this->afterUpdate($object);\n                    }\n\n                    if ($object->id) {\n                        $this->updateAssoShop($object->id);\n                    }\n\n                    if (!$result) {\n                        $this->errors[] = $this->trans('An error occurred while updating an object.', array(), 'Admin.Notifications.Error') .\n                            ' <b>' . $this->table . '</b> (' . Db::getInstance()->getMsgError() . ')';\n                    } elseif ($this->postImage($object->id) && !count($this->errors) && $this->_redirect) {\n                        $parent_id = (int) Tools::getValue('id_parent', 1);\n                        // Specific back redirect\n                        if ($back = Tools::getValue('back')) {\n                            $this->redirect_after = urldecode($back) . '&conf=4';\n                        }\n                        // Save and stay on same form\n                        // @todo on the to following if, we may prefer to avoid override redirect_after previous value\n                        if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay')) {\n                            $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=' . $object->id . '&conf=4&update' . $this->table . '&token=' . $this->token;\n                        }\n                        // Save and back to parent\n                        if (Tools::isSubmit('submitAdd' . $this->table . 'AndBackToParent')) {\n                            $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=' . $parent_id . '&conf=4&token=' . $this->token;\n                        }\n\n                        // Default behavior (save and back)\n                        if (empty($this->redirect_after) && $this->redirect_after !== false) {\n                            $this->redirect_after = self::$currentIndex . ($parent_id ? '&' . $this->identifier . '=' . $object->id : '') . '&conf=4&token=' . $this->token;\n                        }\n                    }\n                    PrestaShopLogger::addLog(sprintf($this->l('%s modification', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $object->id, true, (int) $this->context->employee->id);\n                } else {\n                    $this->errors[] = $this->trans('An error occurred while updating an object.', array(), 'Admin.Notifications.Error') .\n                        ' <b>' . $this->table . '</b> ' . $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n                }\n            }\n        }\n        $this->errors = array_unique($this->errors);\n        if (!empty($this->errors)) {\n            // if we have errors, we stay on the form instead of going back to the list\n            $this->display = 'edit';\n\n            return false;\n        }\n\n        if (isset($object)) {\n            return $object;\n        }\n    }\n\n    /**\n     * Change object required fields.\n     *\n     * @return ObjectModel\n     */\n    public function processUpdateFields()\n    {\n        if (!is_array($fields = Tools::getValue('fieldsBox'))) {\n            $fields = array();\n        }\n\n        /** @var $object ObjectModel */\n        $object = new $this->className();\n\n        if (!$object->addFieldsRequiredDatabase($fields)) {\n            $this->errors[] = $this->trans('An error occurred when attempting to update the required fields.', array(), 'Admin.Notifications.Error');\n        } else {\n            $this->redirect_after = self::$currentIndex . '&conf=4&token=' . $this->token;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Change object status (active, inactive).\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopException\n     */\n    public function processStatus()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            if ($object->toggleStatus()) {\n                $matches = array();\n                if (preg_match('/[\\?|&]controller=([^&]*)/', (string) $_SERVER['HTTP_REFERER'], $matches) !== false\n                    && strtolower($matches[1]) != strtolower(preg_replace('/controller/i', '', get_class($this)))) {\n                    $this->redirect_after = preg_replace('/[\\?|&]conf=([^&]*)/i', '', (string) $_SERVER['HTTP_REFERER']);\n                } else {\n                    $this->redirect_after = self::$currentIndex . '&token=' . $this->token;\n                }\n\n                $id_category = (($id_category = (int) Tools::getValue('id_category')) && Tools::getValue('id_product')) ? '&id_category=' . $id_category : '';\n\n                $page = (int) Tools::getValue('page');\n                $page = $page > 1 ? '&submitFilter' . $this->table . '=' . (int) $page : '';\n                $this->redirect_after .= '&conf=5' . $id_category . $page;\n            } else {\n                $this->errors[] = $this->trans('An error occurred while updating the status.', array(), 'Admin.Notifications.Error');\n            }\n        } else {\n            $this->errors[] = $this->trans('An error occurred while updating the status for an object.', array(), 'Admin.Notifications.Error') .\n                ' <b>' . $this->table . '</b> ' .\n                $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n        }\n\n        return $object;\n    }\n\n    /**\n     * Change object position.\n     *\n     * @return ObjectModel|false\n     */\n    public function processPosition()\n    {\n        if (!Validate::isLoadedObject($object = $this->loadObject())) {\n            $this->errors[] = $this->trans('An error occurred while updating the status for an object.', array(), 'Admin.Notifications.Error') .\n                ' <b>' . $this->table . '</b> ' . $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n        } elseif (!$object->updatePosition((int) Tools::getValue('way'), (int) Tools::getValue('position'))) {\n            $this->errors[] = $this->trans('Failed to update the position.', array(), 'Admin.Notifications.Error');\n        } else {\n            $id_identifier_str = ($id_identifier = (int) Tools::getValue($this->identifier)) ? '&' . $this->identifier . '=' . $id_identifier : '';\n            $redirect = self::$currentIndex . '&' . $this->table . 'Orderby=position&' . $this->table . 'Orderway=asc&conf=5' . $id_identifier_str . '&token=' . $this->token;\n            $this->redirect_after = $redirect;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Cancel all filters for this tab.\n     *\n     * @param int|null $list_id\n     */\n    public function processResetFilters($list_id = null)\n    {\n        if ($list_id === null) {\n            $list_id = isset($this->list_id) ? $this->list_id : $this->table;\n        }\n\n        $prefix = $this->getCookieOrderByPrefix();\n        $filters = $this->context->cookie->getFamily($prefix . $list_id . 'Filter_');\n        foreach ($filters as $cookie_key => $filter) {\n            if (strncmp($cookie_key, $prefix . $list_id . 'Filter_', 7 + Tools::strlen($prefix . $list_id)) == 0) {\n                $key = substr($cookie_key, 7 + Tools::strlen($prefix . $list_id));\n                if (is_array($this->fields_list) && array_key_exists($key, $this->fields_list)) {\n                    $this->context->cookie->$cookie_key = null;\n                }\n                unset($this->context->cookie->$cookie_key);\n            }\n        }\n\n        if (isset($this->context->cookie->{'submitFilter' . $list_id})) {\n            unset($this->context->cookie->{'submitFilter' . $list_id});\n        }\n        if (isset($this->context->cookie->{$prefix . $list_id . 'Orderby'})) {\n            unset($this->context->cookie->{$prefix . $list_id . 'Orderby'});\n        }\n        if (isset($this->context->cookie->{$prefix . $list_id . 'Orderway'})) {\n            unset($this->context->cookie->{$prefix . $list_id . 'Orderway'});\n        }\n\n        $_POST = array();\n        $this->_filter = false;\n        unset(\n            $this->_filterHaving,\n            $this->_having\n        );\n    }\n\n    /**\n     * Update options and preferences.\n     */\n    protected function processUpdateOptions()\n    {\n        $this->beforeUpdateOptions();\n\n        $languages = Language::getLanguages(false);\n\n        $hide_multishop_checkbox = (Shop::getTotalShops(false, null) < 2) ? true : false;\n        foreach ($this->fields_options as $category_data) {\n            if (!isset($category_data['fields'])) {\n                continue;\n            }\n\n            $fields = $category_data['fields'];\n\n            foreach ($fields as $field => $values) {\n                if (isset($values['type']) && $values['type'] == 'selectLang') {\n                    foreach ($languages as $lang) {\n                        if (Tools::getValue($field . '_' . strtoupper($lang['iso_code']))) {\n                            $fields[$field . '_' . strtoupper($lang['iso_code'])] = array(\n                                'type' => 'select',\n                                'cast' => 'strval',\n                                'identifier' => 'mode',\n                                'list' => $values['list'],\n                            );\n                        }\n                    }\n                }\n            }\n\n            // Validate fields\n            foreach ($fields as $field => $values) {\n                // We don't validate fields with no visibility\n                if (!$hide_multishop_checkbox && Shop::isFeatureActive() && isset($values['visibility']) && $values['visibility'] > Shop::getContext()) {\n                    continue;\n                }\n\n                // Check if field is required\n                if ((!Shop::isFeatureActive() && !empty($values['required']))\n                    || (Shop::isFeatureActive() && isset($_POST['multishopOverrideOption'][$field]) && !empty($values['required']))) {\n                    if (isset($values['type']) && $values['type'] == 'textLang') {\n                        foreach ($languages as $language) {\n                            if (($value = Tools::getValue($field . '_' . $language['id_lang'])) == false && (string) $value != '0') {\n                                $this->errors[] = $this->trans('field %s is required.', array($values['title']), 'Admin.Notifications.Error');\n                            }\n                        }\n                    } elseif (($value = Tools::getValue($field)) == false && (string) $value != '0') {\n                        $this->errors[] = $this->trans('field %s is required.', array($values['title']), 'Admin.Notifications.Error');\n                    }\n                }\n\n                // Check field validator\n                if (isset($values['type']) && $values['type'] == 'textLang') {\n                    foreach ($languages as $language) {\n                        if (Tools::getValue($field . '_' . $language['id_lang']) && isset($values['validation'])) {\n                            $values_validation = $values['validation'];\n                            if (!Validate::$values_validation(Tools::getValue($field . '_' . $language['id_lang']))) {\n                                $this->errors[] = $this->trans('The %s field is invalid.', array($values['title']), 'Admin.Notifications.Error');\n                            }\n                        }\n                    }\n                } elseif (Tools::getValue($field) && isset($values['validation'])) {\n                    $values_validation = $values['validation'];\n                    if (!Validate::$values_validation(Tools::getValue($field))) {\n                        $this->errors[] = $this->trans('The %s field is invalid.', array($values['title']), 'Admin.Notifications.Error');\n                    }\n                }\n\n                // Set default value\n                if (Tools::getValue($field) === false && isset($values['default'])) {\n                    $_POST[$field] = $values['default'];\n                }\n            }\n\n            if (!count($this->errors)) {\n                foreach ($fields as $key => $options) {\n                    if (Shop::isFeatureActive() && isset($options['visibility']) && $options['visibility'] > Shop::getContext()) {\n                        continue;\n                    }\n\n                    if (!$hide_multishop_checkbox && Shop::isFeatureActive() && Shop::getContext() != Shop::CONTEXT_ALL && empty($options['no_multishop_checkbox']) && empty($_POST['multishopOverrideOption'][$key])) {\n                        Configuration::deleteFromContext($key);\n\n                        continue;\n                    }\n\n                    // check if a method updateOptionFieldName is available\n                    $method_name = 'updateOption' . Tools::toCamelCase($key, true);\n                    if (method_exists($this, $method_name)) {\n                        $this->$method_name(Tools::getValue($key));\n                    } elseif (isset($options['type']) && in_array($options['type'], array('textLang', 'textareaLang'))) {\n                        $list = array();\n                        foreach ($languages as $language) {\n                            $key_lang = Tools::getValue($key . '_' . $language['id_lang']);\n                            $val = (isset($options['cast']) ? $options['cast']($key_lang) : $key_lang);\n                            if ($this->validateField($val, $options)) {\n                                if (Validate::isCleanHtml($val)) {\n                                    $list[$language['id_lang']] = $val;\n                                } else {\n                                    $this->errors[] = $this->trans('Cannot add configuration %1$s for %2$s language', array($key, Language::getIsoById((int) $language['id_lang'])), 'Admin.International.Notification');\n                                }\n                            }\n                        }\n                        Configuration::updateValue($key, $list, isset($options['validation']) && $options['validation'] == 'isCleanHtml' ? true : false);\n                    } else {\n                        $val = (isset($options['cast']) ? $options['cast'](Tools::getValue($key)) : Tools::getValue($key));\n                        if ($this->validateField($val, $options)) {\n                            if (Validate::isCleanHtml($val)) {\n                                Configuration::updateValue($key, $val);\n                            } else {\n                                $this->errors[] = $this->trans('Cannot add configuration %s', array($key), 'Admin.Notifications.Error');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->display = 'list';\n        if (empty($this->errors)) {\n            $this->confirmations[] = $this->_conf[6];\n        }\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->toolbar_title)) {\n            $this->initToolbarTitle();\n        }\n\n        if (!is_array($this->toolbar_title)) {\n            $this->toolbar_title = array($this->toolbar_title);\n        }\n\n        switch ($this->display) {\n            case 'view':\n                // Default cancel button - like old back link\n                $back = Tools::safeOutput(Tools::getValue('back', ''));\n                if (empty($back)) {\n                    $back = self::$currentIndex . '&token=' . $this->token;\n                }\n                if (!Validate::isCleanHtml($back)) {\n                    die(Tools::displayError());\n                }\n                if (!$this->lite_display) {\n                    $this->page_header_toolbar_btn['back'] = array(\n                        'href' => $back,\n                        'desc' => $this->l('Back to list'),\n                    );\n                }\n                $obj = $this->loadObject(true);\n                if (Validate::isLoadedObject($obj) && isset($obj->{$this->identifier_name}) && !empty($obj->{$this->identifier_name})) {\n                    array_pop($this->toolbar_title);\n                    array_pop($this->meta_title);\n                    $this->toolbar_title[] = is_array($obj->{$this->identifier_name}) ? $obj->{$this->identifier_name}[$this->context->employee->id_lang] : $obj->{$this->identifier_name};\n                    $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n                }\n\n                break;\n            case 'edit':\n                $obj = $this->loadObject(true);\n                if (Validate::isLoadedObject($obj) && isset($obj->{$this->identifier_name}) && !empty($obj->{$this->identifier_name})) {\n                    array_pop($this->toolbar_title);\n                    array_pop($this->meta_title);\n                    $this->toolbar_title[] = sprintf($this->l('Edit: %s'), (is_array($obj->{$this->identifier_name}) && isset($obj->{$this->identifier_name}[$this->context->employee->id_lang])) ? $obj->{$this->identifier_name}[$this->context->employee->id_lang] : $obj->{$this->identifier_name});\n                    $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n                }\n\n                break;\n        }\n\n        if (is_array($this->page_header_toolbar_btn)\n            && $this->page_header_toolbar_btn instanceof Traversable\n            || count($this->toolbar_title)) {\n            $this->show_page_header_toolbar = true;\n        }\n\n        if (empty($this->page_header_toolbar_title)) {\n            $this->page_header_toolbar_title = $this->toolbar_title[count($this->toolbar_title) - 1];\n        }\n\n        $this->addPageHeaderToolBarModulesListButton();\n\n        $this->context->smarty->assign('help_link', 'https://help.prestashop.com/' . Language::getIsoById($this->context->employee->id_lang) . '/doc/'\n            . Tools::getValue('controller') . '?version=' . _PS_VERSION_ . '&country=' . Language::getIsoById($this->context->employee->id_lang));\n    }\n\n    /**\n     * assign default action in toolbar_btn smarty var, if they are not set.\n     * uses override to specifically add, modify or remove items.\n     */\n    public function initToolbar()\n    {\n        switch ($this->display) {\n            case 'add':\n            case 'edit':\n                // Default save button - action dynamically handled in javascript\n                $this->toolbar_btn['save'] = array(\n                    'href' => '#',\n                    'desc' => $this->l('Save'),\n                );\n                $back = Tools::safeOutput(Tools::getValue('back', ''));\n                if (empty($back)) {\n                    $back = self::$currentIndex . '&token=' . $this->token;\n                }\n                if (!Validate::isCleanHtml($back)) {\n                    die(Tools::displayError());\n                }\n                if (!$this->lite_display) {\n                    $this->toolbar_btn['cancel'] = array(\n                        'href' => $back,\n                        'desc' => $this->l('Cancel'),\n                    );\n                }\n\n                break;\n            case 'view':\n                // Default cancel button - like old back link\n                $back = Tools::safeOutput(Tools::getValue('back', ''));\n                if (empty($back)) {\n                    $back = self::$currentIndex . '&token=' . $this->token;\n                }\n                if (!Validate::isCleanHtml($back)) {\n                    die(Tools::displayError());\n                }\n                if (!$this->lite_display) {\n                    $this->toolbar_btn['back'] = array(\n                        'href' => $back,\n                        'desc' => $this->l('Back to list'),\n                    );\n                }\n\n                break;\n            case 'options':\n                $this->toolbar_btn['save'] = array(\n                    'href' => '#',\n                    'desc' => $this->l('Save'),\n                );\n\n                break;\n            default:\n                // list\n                $this->toolbar_btn['new'] = array(\n                    'href' => self::$currentIndex . '&add' . $this->table . '&token=' . $this->token,\n                    'desc' => $this->l('Add new'),\n                );\n                if ($this->allow_export) {\n                    $this->toolbar_btn['export'] = array(\n                        'href' => self::$currentIndex . '&export' . $this->table . '&token=' . $this->token,\n                        'desc' => $this->l('Export'),\n                    );\n                }\n        }\n        $this->addToolBarModulesListButton();\n    }\n\n    /**\n     * Load class object using identifier in $_GET (if possible)\n     * otherwise return an empty object, or die.\n     *\n     * @param bool $opt Return an empty object if load fail\n     *\n     * @return ObjectModel|false\n     */\n    protected function loadObject($opt = false)\n    {\n        if (!isset($this->className) || empty($this->className)) {\n            return true;\n        }\n\n        $id = (int) Tools::getValue($this->identifier);\n        if ($id && Validate::isUnsignedId($id)) {\n            if (!$this->object) {\n                $this->object = new $this->className($id);\n            }\n            if (Validate::isLoadedObject($this->object)) {\n                return $this->object;\n            }\n            // throw exception\n            $this->errors[] = $this->trans('The object cannot be loaded (or found)', array(), 'Admin.Notifications.Error');\n\n            return false;\n        } elseif ($opt) {\n            if (!$this->object) {\n                $this->object = new $this->className();\n            }\n\n            return $this->object;\n        } else {\n            $this->errors[] = $this->trans('The object cannot be loaded (the identifier is missing or invalid)', array(), 'Admin.Notifications.Error');\n\n            return false;\n        }\n    }\n\n    /**\n     * Check if the token is valid, else display a warning page.\n     *\n     * @return bool\n     */\n    public function checkAccess()\n    {\n        if (!$this->checkToken()) {\n            // If this is an XSS attempt, then we should only display a simple, secure page\n            // ${1} in the replacement string of the regexp is required,\n            // because the token may begin with a number and mix up with it (e.g. $17)\n            $url = preg_replace('/([&?]token=)[^&]*(&.*)?$/', '${1}' . $this->token . '$2', $_SERVER['REQUEST_URI']);\n            if (false === strpos($url, '?token=') && false === strpos($url, '&token=')) {\n                $url .= '&token=' . $this->token;\n            }\n            if (strpos($url, '?') === false) {\n                $url = str_replace('&token', '?controller=AdminDashboard&token', $url);\n            }\n\n            $this->context->smarty->assign('url', htmlentities($url));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param string $key\n     * @param string $filter\n     *\n     * @return array|false\n     */\n    protected function filterToField($key, $filter)\n    {\n        if (!isset($this->fields_list)) {\n            return false;\n        }\n\n        foreach ($this->fields_list as $field) {\n            if (array_key_exists('filter_key', $field) && $field['filter_key'] == $key) {\n                return $field;\n            }\n        }\n        if (array_key_exists($filter, $this->fields_list)) {\n            return $this->fields_list[$filter];\n        }\n\n        return false;\n    }\n\n    public function displayAjax()\n    {\n        if ($this->json) {\n            $this->context->smarty->assign(array(\n                'json' => true,\n                'status' => $this->status,\n            ));\n        }\n        $this->layout = 'layout-ajax.tpl';\n        $this->display_header = false;\n        $this->display_header_javascript = false;\n        $this->display_footer = false;\n\n        return $this->display();\n    }\n\n    protected function redirect()\n    {\n        Tools::redirectAdmin($this->redirect_after);\n    }\n\n    /**\n     * @throws Exception\n     * @throws SmartyException\n     */\n    public function display()\n    {\n        $this->context->smarty->assign(array(\n            'display_header' => $this->display_header,\n            'display_header_javascript' => $this->display_header_javascript,\n            'display_footer' => $this->display_footer,\n            'js_def' => Media::getJsDef(),\n            'toggle_navigation_url' => $this->context->link->getAdminLink('AdminEmployees', true, [], [\n                'action' => 'toggleMenu',\n            ]),\n        ));\n\n        // Use page title from meta_title if it has been set else from the breadcrumbs array\n        if (!$this->meta_title) {\n            $this->meta_title = $this->toolbar_title;\n        }\n        if (is_array($this->meta_title)) {\n            $this->meta_title = strip_tags(implode(' ' . Configuration::get('PS_NAVIGATION_PIPE') . ' ', $this->meta_title));\n        }\n        $this->context->smarty->assign('meta_title', $this->meta_title);\n\n        $template_dirs = $this->context->smarty->getTemplateDir();\n\n        // Check if header/footer have been overriden\n        $dir = $this->context->smarty->getTemplateDir(0) . 'controllers' . DIRECTORY_SEPARATOR . trim($this->override_folder, '\\\\/') . DIRECTORY_SEPARATOR;\n        $module_list_dir = $this->context->smarty->getTemplateDir(0) . 'helpers' . DIRECTORY_SEPARATOR . 'modules_list' . DIRECTORY_SEPARATOR;\n\n        $header_tpl = file_exists($dir . 'header.tpl') ? $dir . 'header.tpl' : 'header.tpl';\n        $page_header_toolbar = file_exists($dir . 'page_header_toolbar.tpl') ? $dir . 'page_header_toolbar.tpl' : 'page_header_toolbar.tpl';\n        $footer_tpl = file_exists($dir . 'footer.tpl') ? $dir . 'footer.tpl' : 'footer.tpl';\n        $modal_module_list = file_exists($module_list_dir . 'modal.tpl') ? $module_list_dir . 'modal.tpl' : '';\n        $tpl_action = $this->tpl_folder . $this->display . '.tpl';\n\n        // Check if action template has been overridden\n        foreach ($template_dirs as $template_dir) {\n            if (file_exists($template_dir . DIRECTORY_SEPARATOR . $tpl_action) && $this->display != 'view' && $this->display != 'options') {\n                if (method_exists($this, $this->display . Tools::toCamelCase($this->className))) {\n                    $this->{$this->display . Tools::toCamelCase($this->className)}();\n                }\n                $this->context->smarty->assign('content', $this->context->smarty->fetch($tpl_action));\n\n                break;\n            }\n        }\n\n        if (!$this->ajax) {\n            $template = $this->createTemplate($this->template);\n            $page = $template->fetch();\n        } else {\n            $page = $this->content;\n        }\n\n        if ($conf = Tools::getValue('conf')) {\n            $this->context->smarty->assign('conf', $this->json ? json_encode($this->_conf[(int) $conf]) : $this->_conf[(int) $conf]);\n        }\n\n        if ($error = Tools::getValue('error')) {\n            $this->context->smarty->assign('error', $this->json ? json_encode($this->_error[(int) $error]) : $this->_error[(int) $error]);\n        }\n\n        foreach (array('errors', 'warnings', 'informations', 'confirmations') as $type) {\n            if (!is_array($this->$type)) {\n                $this->$type = (array) $this->$type;\n            }\n            $this->context->smarty->assign($type, $this->json ? json_encode(array_unique($this->$type)) : array_unique($this->$type));\n        }\n\n        if ($this->show_page_header_toolbar && !$this->lite_display) {\n            $this->context->smarty->assign(\n                array(\n                    'page_header_toolbar' => $this->context->smarty->fetch($page_header_toolbar),\n                )\n            );\n            if (!empty($modal_module_list)) {\n                $this->context->smarty->assign(\n                    array(\n                        'modal_module_list' => $this->context->smarty->fetch($modal_module_list),\n                    )\n                );\n            }\n        }\n\n        $this->context->smarty->assign('baseAdminUrl', __PS_BASE_URI__ . basename(_PS_ADMIN_DIR_) . '/');\n\n        $this->context->smarty->assign(\n            array(\n                'page' => $this->json ? json_encode($page) : $page,\n                'header' => $this->context->smarty->fetch($header_tpl),\n                'footer' => $this->context->smarty->fetch($footer_tpl),\n            )\n        );\n\n        $this->smartyOutputContent($this->layout);\n    }\n\n    /**\n     * Add a warning message to display at the top of the page.\n     *\n     * @param string $msg\n     */\n    protected function displayWarning($msg)\n    {\n        $this->warnings[] = $msg;\n    }\n\n    /**\n     * Add a info message to display at the top of the page.\n     *\n     * @param string $msg\n     */\n    protected function displayInformation($msg)\n    {\n        $this->informations[] = $msg;\n    }\n\n    /**\n     * Assign smarty variables for the header.\n     */\n    public function initHeader()\n    {\n        header('Cache-Control: no-store, no-cache');\n\n        // Multishop\n        $is_multishop = Shop::isFeatureActive();\n\n        // Quick access\n        if ((int) $this->context->employee->id) {\n            $quick_access = QuickAccess::getQuickAccessesWithToken($this->context->language->id, (int) $this->context->employee->id);\n        }\n\n        $tabs = $this->getTabs();\n        $currentTabLevel = 0;\n        foreach ($tabs as &$tab) {\n            $currentTabLevel = isset($tab['current_level']) ? $tab['current_level'] : $currentTabLevel;\n        }\n\n        if (Validate::isLoadedObject($this->context->employee)) {\n            $accesses = Profile::getProfileAccesses($this->context->employee->id_profile, 'class_name');\n            $helperShop = new HelperShop();\n            /* Hooks are voluntary out the initialize array (need those variables already assigned) */\n            $bo_color = empty($this->context->employee->bo_color) ? '#FFFFFF' : $this->context->employee->bo_color;\n            $this->context->smarty->assign(array(\n                'help_box' => Configuration::get('PS_HELPBOX'),\n                'round_mode' => Configuration::get('PS_PRICE_ROUND_MODE'),\n                'brightness' => Tools::getBrightness($bo_color) < 128 ? 'white' : '#383838',\n                'bo_width' => (int) $this->context->employee->bo_width,\n                'bo_color' => isset($this->context->employee->bo_color) ? Tools::htmlentitiesUTF8($this->context->employee->bo_color) : null,\n                'show_new_orders' => Configuration::get('PS_SHOW_NEW_ORDERS') && isset($accesses['AdminOrders']) && $accesses['AdminOrders']['view'],\n                'show_new_customers' => Configuration::get('PS_SHOW_NEW_CUSTOMERS') && isset($accesses['AdminCustomers']) && $accesses['AdminCustomers']['view'],\n                'show_new_messages' => Configuration::get('PS_SHOW_NEW_MESSAGES') && isset($accesses['AdminCustomerThreads']) && $accesses['AdminCustomerThreads']['view'],\n                'employee' => $this->context->employee,\n                'search_type' => Tools::getValue('bo_search_type'),\n                'bo_query' => Tools::safeOutput(Tools::stripslashes(Tools::getValue('bo_query'))),\n                'quick_access' => empty($quick_access) ? false : $quick_access,\n                'multi_shop' => Shop::isFeatureActive(),\n                'shop_list' => $helperShop->getRenderedShopList(),\n                'current_shop_name' => $helperShop->getCurrentShopName(),\n                'shop' => $this->context->shop,\n                'shop_group' => new ShopGroup((int) Shop::getContextShopGroupID()),\n                'is_multishop' => $is_multishop,\n                'multishop_context' => $this->multishop_context,\n                'default_tab_link' => $this->context->link->getAdminLink(Tab::getClassNameById((int) Context::getContext()->employee->default_tab)),\n                'login_link' => $this->context->link->getAdminLink('AdminLogin'),\n                'logout_link' => $this->context->link->getAdminLink('AdminLogin', true, [], ['logout' => 1]),\n                'collapse_menu' => isset($this->context->cookie->collapse_menu) ? (int) $this->context->cookie->collapse_menu : 0,\n            ));\n        } else {\n            $this->context->smarty->assign('default_tab_link', $this->context->link->getAdminLink('AdminDashboard'));\n        }\n\n        // Shop::initialize() in config.php may empty $this->context->shop->virtual_uri so using a new shop instance for getBaseUrl()\n        $this->context->shop = new Shop((int) $this->context->shop->id);\n\n        $this->context->smarty->assign(array(\n            'img_dir' => _PS_IMG_,\n            'iso' => $this->context->language->iso_code,\n            'class_name' => $this->className,\n            'iso_user' => $this->context->language->iso_code,\n            'lang_is_rtl' => $this->context->language->is_rtl,\n            'country_iso_code' => $this->context->country->iso_code,\n            'version' => _PS_VERSION_,\n            'lang_iso' => $this->context->language->iso_code,\n            'full_language_code' => $this->context->language->language_code,\n            'full_cldr_language_code' => $this->context->getCurrentLocale()->getCode(),\n            'link' => $this->context->link,\n            'shop_name' => Configuration::get('PS_SHOP_NAME'),\n            'base_url' => $this->context->shop->getBaseURL(),\n            'current_parent_id' => (int) Tab::getCurrentParentId(),\n            'tabs' => $tabs,\n            'current_tab_level' => $currentTabLevel,\n            'install_dir_exists' => file_exists(_PS_ADMIN_DIR_ . '/../install'),\n            'pic_dir' => _THEME_PROD_PIC_DIR_,\n            'controller_name' => htmlentities(Tools::getValue('controller')),\n            'currentIndex' => self::$currentIndex,\n            'bootstrap' => $this->bootstrap,\n            'default_language' => (int) Configuration::get('PS_LANG_DEFAULT'),\n            'display_addons_connection' => Tab::checkTabRights(Tab::getIdFromClassName('AdminModulesController')),\n        ));\n    }\n\n    private function getNotificationTip($type)\n    {\n        $tips = array(\n            'order' => array(\n                $this->trans('Did you check your conversion rate lately?', array(), 'Admin.Navigation.Notification'),\n                $this->trans('How about some seasonal discounts?', array(), 'Admin.Navigation.Notification'),\n                $this->trans(\n                    'Have you checked your [1][2]abandoned carts[/2][/1]?[3]Your next order could be hiding there!',\n                        array(\n                            '[1]' => '<strong>',\n                            '[/1]' => '</strong>',\n                            '[2]' => '<a href=\"' . $this->context->link->getAdminLink('AdminCarts', true, array(), array('action' => 'filterOnlyAbandonedCarts')) . '\">',\n                            '[/2]' => '</a>',\n                            '[3]' => '<br>',\n                        ),\n                        'Admin.Navigation.Notification'\n                ),\n            ),\n            'customer' => array(\n                $this->trans('Have you sent any acquisition email lately?', array(), 'Admin.Navigation.Notification'),\n                $this->trans('Are you active on social media these days?', array(), 'Admin.Navigation.Notification'),\n                $this->trans('Have you considered selling on marketplaces?', array(), 'Admin.Navigation.Notification'),\n            ),\n            'customer_message' => array(\n                $this->trans('That\\'s more time for something else!', array(), 'Admin.Navigation.Notification'),\n                $this->trans('No news is good news, isn\\'t it?', array(), 'Admin.Navigation.Notification'),\n                $this->trans('Seems like all your customers are happy :)', array(), 'Admin.Navigation.Notification'),\n            ),\n        );\n\n        if (!isset($tips[$type])) {\n            return '';\n        }\n\n        return $tips[$type][array_rand($tips[$type])];\n    }\n\n    private function getTabs($parentId = 0, $level = 0)\n    {\n        $tabs = Tab::getTabs($this->context->language->id, $parentId);\n        $current_id = Tab::getCurrentParentId($this->controller_name ? $this->controller_name : '');\n\n        foreach ($tabs as $index => $tab) {\n            if (!Tab::checkTabRights($tab['id_tab'])\n                || ($tab['class_name'] == 'AdminStock' && Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') == 0)\n                || $tab['class_name'] == 'AdminCarrierWizard') {\n                unset($tabs[$index]);\n\n                continue;\n            }\n\n            // tab[class_name] does not contains the \"Controller\" suffix\n            if (($tab['class_name'] . 'Controller' == get_class($this)) || ($current_id == $tab['id_tab']) || $tab['class_name'] == $this->controller_name) {\n                $tabs[$index]['current'] = true;\n                $tabs[$index]['current_level'] = $level;\n            } else {\n                $tabs[$index]['current'] = false;\n            }\n            $tabs[$index]['img'] = null;\n            $tabs[$index]['href'] = $this->context->link->getAdminLink($tab['class_name']);\n            $tabs[$index]['sub_tabs'] = array_values($this->getTabs($tab['id_tab'], $level + 1));\n\n            $subTabHref = $this->getTabLinkFromSubTabs($tabs[$index]['sub_tabs']);\n            if (!empty($subTabHref)) {\n                $tabs[$index]['href'] = $subTabHref;\n            } elseif (0 == $tabs[$index]['id_parent'] && '' == $tabs[$index]['icon']) {\n                unset($tabs[$index]);\n            } elseif (empty($tabs[$index]['icon'])) {\n                $tabs[$index]['icon'] = 'extension';\n            }\n\n            if (array_key_exists($index, $tabs) && array_key_exists('sub_tabs', $tabs[$index])) {\n                foreach ($tabs[$index]['sub_tabs'] as $sub_tab) {\n                    if ((int) $sub_tab['current'] == true) {\n                        $tabs[$index]['current'] = true;\n                        $tabs[$index]['current_level'] = $sub_tab['current_level'];\n                    }\n                }\n            }\n        }\n\n        return $tabs;\n    }\n\n    /**\n     * Declare an action to use for each row in the list.\n     *\n     * @param string $action\n     */\n    public function addRowAction($action)\n    {\n        $action = strtolower($action);\n        $this->actions[] = $action;\n    }\n\n    /**\n     * Add an action to use for each row in the list.\n     *\n     * @param string $action\n     * @param array $list\n     */\n    public function addRowActionSkipList($action, $list)\n    {\n        $action = strtolower($action);\n        $list = (array) $list;\n\n        if (array_key_exists($action, $this->list_skip_actions)) {\n            $this->list_skip_actions[$action] = array_merge($this->list_skip_actions[$action], $list);\n        } else {\n            $this->list_skip_actions[$action] = $list;\n        }\n    }\n\n    /**\n     * Assign smarty variables for all default views, list and form, then call other init functions.\n     */\n    public function initContent()\n    {\n        if (!$this->viewAccess()) {\n            $this->errors[] = $this->trans('You do not have permission to view this.', array(), 'Admin.Notifications.Error');\n\n            return;\n        }\n\n        if ($this->display == 'edit' || $this->display == 'add') {\n            if (!$this->loadObject(true)) {\n                return;\n            }\n\n            $this->content .= $this->renderForm();\n        } elseif ($this->display == 'view') {\n            // Some controllers use the view action without an object\n            if ($this->className) {\n                $this->loadObject(true);\n            }\n            $this->content .= $this->renderView();\n        } elseif ($this->display == 'details') {\n            $this->content .= $this->renderDetails();\n        } elseif (!$this->ajax) {\n            // FIXME: Sorry. I'm not very proud of this, but no choice... Please wait sf refactoring to solve this.\n            if (get_class($this) != 'AdminCarriersController') {\n                $this->content .= $this->renderModulesList();\n            }\n            $this->content .= $this->renderKpis();\n            $this->content .= $this->renderList();\n            $this->content .= $this->renderOptions();\n\n            // if we have to display the required fields form\n            if ($this->required_database) {\n                $this->content .= $this->displayRequiredFields();\n            }\n        }\n\n        $this->context->smarty->assign(array(\n            'content' => $this->content,\n        ));\n    }\n\n    public function initToolbarFlags()\n    {\n        $this->getLanguages();\n\n        $this->initToolbar();\n        $this->initTabModuleList();\n        $this->initPageHeaderToolbar();\n\n        $this->context->smarty->assign(array(\n            'maintenance_mode' => !(bool) Configuration::get('PS_SHOP_ENABLE'),\n            'debug_mode' => (bool) _PS_MODE_DEV_,\n            'lite_display' => $this->lite_display,\n            'url_post' => self::$currentIndex . '&token=' . $this->token,\n            'show_page_header_toolbar' => $this->show_page_header_toolbar,\n            'page_header_toolbar_title' => $this->page_header_toolbar_title,\n            'title' => $this->page_header_toolbar_title,\n            'toolbar_btn' => $this->page_header_toolbar_btn,\n            'page_header_toolbar_btn' => $this->page_header_toolbar_btn,\n        ));\n    }\n\n    /**\n     * Init tab modules list and add button in toolbar.\n     */\n    protected function initTabModuleList()\n    {\n        if (!$this->isFresh(Module::CACHE_FILE_MUST_HAVE_MODULES_LIST, 86400)) {\n            @file_put_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_MUST_HAVE_MODULES_LIST, Tools::addonsRequest('must-have'));\n        }\n        if (!$this->isFresh(Module::CACHE_FILE_TAB_MODULES_LIST, 604800)) {\n            $this->refresh(Module::CACHE_FILE_TAB_MODULES_LIST, _PS_TAB_MODULE_LIST_URL_);\n        }\n\n        $this->tab_modules_list = Tab::getTabModulesList($this->id);\n\n        if (is_array($this->tab_modules_list['default_list']) && count($this->tab_modules_list['default_list'])) {\n            $this->filter_modules_list = $this->tab_modules_list['default_list'];\n        } elseif (is_array($this->tab_modules_list['slider_list']) && count($this->tab_modules_list['slider_list'])) {\n            $this->addToolBarModulesListButton();\n            $this->addPageHeaderToolBarModulesListButton();\n            $this->context->smarty->assign(array(\n                'tab_modules_list' => implode(',', $this->tab_modules_list['slider_list']),\n                'admin_module_ajax_url' => $this->context->link->getAdminLink('AdminModules'),\n                'back_tab_modules_list' => $this->context->link->getAdminLink(Tools::getValue('controller')),\n                'tab_modules_open' => (int) Tools::getValue('tab_modules_open'),\n            ));\n        }\n    }\n\n    protected function addPageHeaderToolBarModulesListButton()\n    {\n        $this->filterTabModuleList();\n\n        if (is_array($this->tab_modules_list['slider_list']) && count($this->tab_modules_list['slider_list'])) {\n            $this->page_header_toolbar_btn['modules-list'] = array(\n                'href' => $this->getAdminModulesUrl(),\n                'desc' => $this->l('Recommended Modules'),\n            );\n        }\n    }\n\n    protected function addToolBarModulesListButton()\n    {\n        $this->filterTabModuleList();\n\n        if (is_array($this->tab_modules_list['slider_list']) && count($this->tab_modules_list['slider_list'])) {\n            $this->toolbar_btn['modules-list'] = array(\n                'href' => $this->getAdminModulesUrl(),\n                'desc' => $this->l('Recommended Modules'),\n            );\n        }\n    }\n\n    protected function getAdminModulesUrl()\n    {\n        return $this->context->link->getAdminLink('AdminModulesCatalog');\n    }\n\n    protected function filterTabModuleList()\n    {\n        static $list_is_filtered = null;\n\n        if ($list_is_filtered !== null) {\n            return;\n        }\n\n        if (!$this->isFresh(Module::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST, 86400)) {\n            file_put_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST, Tools::addonsRequest('native'));\n        }\n\n        if (!$this->isFresh(Module::CACHE_FILE_ALL_COUNTRY_MODULES_LIST, 86400)) {\n            file_put_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_ALL_COUNTRY_MODULES_LIST, Tools::addonsRequest('native_all'));\n        }\n\n        if (!$this->isFresh(Module::CACHE_FILE_MUST_HAVE_MODULES_LIST, 86400)) {\n            @file_put_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_MUST_HAVE_MODULES_LIST, Tools::addonsRequest('must-have'));\n        }\n\n        libxml_use_internal_errors(true);\n\n        $country_module_list = file_get_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST);\n        $must_have_module_list = file_get_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_MUST_HAVE_MODULES_LIST);\n        $all_module_list = array();\n\n        if (!empty($country_module_list) && $country_module_list_xml = @simplexml_load_string($country_module_list)) {\n            $country_module_list_array = array();\n            if (is_object($country_module_list_xml->module)) {\n                foreach ($country_module_list_xml->module as $k => $m) {\n                    $all_module_list[] = (string) $m->name;\n                }\n            }\n        } else {\n            foreach (libxml_get_errors() as $error) {\n                $this->errors[] = $this->trans('Error found : %1$s in country_module_list.xml file.', array($error->message), 'Admin.Modules.Notification');\n            }\n        }\n\n        libxml_clear_errors();\n\n        if (!empty($must_have_module_list) && $must_have_module_list_xml = @simplexml_load_string($must_have_module_list)) {\n            $must_have_module_list_array = array();\n            if (is_object($country_module_list_xml->module)) {\n                foreach ($must_have_module_list_xml->module as $l => $mo) {\n                    $all_module_list[] = (string) $mo->name;\n                }\n            }\n        } else {\n            foreach (libxml_get_errors() as $error) {\n                $this->errors[] = $this->trans('Error found : %1$s in must_have_module_list.xml file.', array($error->message), 'Admin.Modules.Notification');\n            }\n        }\n\n        libxml_clear_errors();\n\n        $this->tab_modules_list['slider_list'] = array_intersect($this->tab_modules_list['slider_list'], $all_module_list);\n\n        $list_is_filtered = true;\n    }\n\n    /**\n     * Initialize the invalid doom page of death.\n     */\n    public function initCursedPage()\n    {\n        $this->layout = 'invalid_token.tpl';\n    }\n\n    /**\n     * Assign smarty variables for the footer.\n     */\n    public function initFooter()\n    {\n        //RTL Support\n        //rtl.js overrides inline styles\n        //iso_code.css overrides default fonts for every language (optional)\n        if ($this->context->language->is_rtl) {\n            $this->addJS(_PS_JS_DIR_ . 'rtl.js');\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/' . $this->context->language->iso_code . '.css', 'all', false);\n        }\n\n        // We assign js and css files on the last step before display template, because controller can add many js and css files\n        $this->context->smarty->assign('css_files', $this->css_files);\n        $this->context->smarty->assign('js_files', array_unique($this->js_files));\n\n        $this->context->smarty->assign(array(\n            'ps_version' => _PS_VERSION_,\n            'timer_start' => $this->timer_start,\n            'iso_is_fr' => strtoupper($this->context->language->iso_code) == 'FR',\n            'modals' => $this->renderModal(),\n        ));\n    }\n\n    /**\n     * @throws Exception\n     * @throws SmartyException\n     */\n    public function initModal()\n    {\n        if ($this->logged_on_addons) {\n            $this->context->smarty->assign(array(\n                'logged_on_addons' => 1,\n                'username_addons' => $this->context->cookie->username_addons,\n            ));\n        }\n\n        // Iso needed to generate Addons login\n        $iso_code_caps = strtoupper($this->context->language->iso_code);\n\n        $this->context->smarty->assign(array(\n            'img_base_path' => __PS_BASE_URI__ . basename(_PS_ADMIN_DIR_) . '/',\n            'check_url_fopen' => (ini_get('allow_url_fopen') ? 'ok' : 'ko'),\n            'check_openssl' => (extension_loaded('openssl') ? 'ok' : 'ko'),\n            'add_permission' => 1,\n            'addons_register_link' => 'https://addons.prestashop.com/' . $this->context->language->iso_code . '/login?'\n                . 'email=' . urlencode($this->context->employee->email)\n                . '&firstname=' . urlencode($this->context->employee->firstname)\n                . '&lastname=' . urlencode($this->context->employee->lastname)\n                . '&website=' . urlencode($this->context->shop->getBaseURL())\n                . '&utm_source=back-office&utm_medium=connect-to-addons'\n                . '&utm_campaign=back-office-' . Tools::strtoupper($this->context->language->iso_code)\n                . '&utm_content=' . (defined('_PS_HOST_MODE_') ? 'cloud' : 'download') . '#createnow',\n            'addons_forgot_password_link' => '//addons.prestashop.com/' . $this->context->language->iso_code . '/forgot-your-password',\n        ));\n\n        $this->modals[] = array(\n            'modal_id' => 'modal_addons_connect',\n            'modal_class' => 'modal-md',\n            'modal_title' => '<i class=\"icon-puzzle-piece\"></i> <a target=\"_blank\" href=\"https://addons.prestashop.com/'\n            . '?utm_source=back-office&utm_medium=modules'\n            . '&utm_campaign=back-office-' . Tools::strtoupper($this->context->language->iso_code)\n            . '&utm_content=' . (defined('_PS_HOST_MODE_') ? 'cloud' : 'download') . '\">PrestaShop Addons</a>',\n            'modal_content' => $this->context->smarty->fetch('controllers/modules/login_addons.tpl'),\n        );\n    }\n\n    /**\n     * @return string\n     *\n     * @throws Exception\n     * @throws SmartyException\n     */\n    public function renderModal()\n    {\n        $modal_render = '';\n        if (is_array($this->modals) && count($this->modals)) {\n            foreach ($this->modals as $modal) {\n                $this->context->smarty->assign($modal);\n                $modal_render .= $this->context->smarty->fetch('modal.tpl');\n            }\n        }\n\n        return $modal_render;\n    }\n\n    /**\n     * Was used to display a list of recommended modules.\n     *\n     * @param string|bool $tracking_source Source information for URL used by \"Install\" button\n     *\n     * @return string Empty\n     *\n     * @deprecated since 1.7.4.0\n     */\n    public function renderModulesList($tracking_source = false)\n    {\n        return '';\n    }\n\n    /**\n     * Function used to render the list to display for this controller.\n     *\n     * @return string|false\n     *\n     * @throws PrestaShopException\n     */\n    public function renderList()\n    {\n        if (!($this->fields_list && is_array($this->fields_list))) {\n            return false;\n        }\n        $this->getList($this->context->language->id);\n\n        // If list has 'active' field, we automatically create bulk action\n        if (isset($this->fields_list) && is_array($this->fields_list) && array_key_exists('active', $this->fields_list)\n            && !empty($this->fields_list['active'])) {\n            if (!is_array($this->bulk_actions)) {\n                $this->bulk_actions = array();\n            }\n\n            $this->bulk_actions = array_merge(array(\n                'enableSelection' => array(\n                    'text' => $this->l('Enable selection'),\n                    'icon' => 'icon-power-off text-success',\n                ),\n                'disableSelection' => array(\n                    'text' => $this->l('Disable selection'),\n                    'icon' => 'icon-power-off text-danger',\n                ),\n                'divider' => array(\n                    'text' => 'divider',\n                ),\n            ), $this->bulk_actions);\n        }\n\n        $helper = new HelperList();\n\n        // Empty list is ok\n        if (!is_array($this->_list)) {\n            $this->displayWarning($this->l('Bad SQL query', 'Helper') . '<br />' . htmlspecialchars($this->_list_error));\n\n            return false;\n        }\n\n        $this->setHelperDisplay($helper);\n        $helper->_default_pagination = $this->_default_pagination;\n        $helper->_pagination = $this->_pagination;\n        $helper->tpl_vars = $this->getTemplateListVars();\n        $helper->tpl_delete_link_vars = $this->tpl_delete_link_vars;\n\n        // For compatibility reasons, we have to check standard actions in class attributes\n        foreach ($this->actions_available as $action) {\n            if (!in_array($action, $this->actions) && isset($this->$action) && $this->$action) {\n                $this->actions[] = $action;\n            }\n        }\n\n        $helper->is_cms = $this->is_cms;\n        $helper->sql = $this->_listsql;\n        $list = $helper->generateList($this->_list, $this->fields_list);\n\n        return $list;\n    }\n\n    public function getTemplateListVars()\n    {\n        return $this->tpl_list_vars;\n    }\n\n    /**\n     * Override to render the view page.\n     *\n     * @return string\n     */\n    public function renderView()\n    {\n        $helper = new HelperView($this);\n        $this->setHelperDisplay($helper);\n        $helper->tpl_vars = $this->getTemplateViewVars();\n        if (null !== $this->base_tpl_view) {\n            $helper->base_tpl = $this->base_tpl_view;\n        }\n        $view = $helper->generateView();\n\n        return $view;\n    }\n\n    public function getTemplateViewVars()\n    {\n        return $this->tpl_view_vars;\n    }\n\n    /**\n     * Override to render the view page.\n     *\n     * @return string|false\n     */\n    public function renderDetails()\n    {\n        return $this->renderList();\n    }\n\n    /**\n     * Function used to render the form for this controller.\n     *\n     * @return string\n     *\n     * @throws Exception\n     * @throws SmartyException\n     */\n    public function renderForm()\n    {\n        if (!$this->default_form_language) {\n            $this->getLanguages();\n        }\n\n        if (Tools::getValue('submitFormAjax')) {\n            $this->content .= $this->context->smarty->fetch('form_submit_ajax.tpl');\n        }\n\n        if ($this->fields_form && is_array($this->fields_form)) {\n            if (!$this->multiple_fieldsets) {\n                $this->fields_form = array(array('form' => $this->fields_form));\n            }\n\n            // For add a fields via an override of $fields_form, use $fields_form_override\n            if (is_array($this->fields_form_override) && !empty($this->fields_form_override)) {\n                $this->fields_form[0]['form']['input'] = array_merge($this->fields_form[0]['form']['input'], $this->fields_form_override);\n            }\n\n            $fields_value = $this->getFieldsValue($this->object);\n\n            Hook::exec('action' . $this->controller_name . 'FormModifier', array(\n                'object' => &$this->object,\n                'fields' => &$this->fields_form,\n                'fields_value' => &$fields_value,\n                'form_vars' => &$this->tpl_form_vars,\n            ));\n\n            $helper = new HelperForm($this);\n            $this->setHelperDisplay($helper);\n            $helper->fields_value = $fields_value;\n            $helper->submit_action = $this->submit_action;\n            $helper->tpl_vars = $this->getTemplateFormVars();\n            $helper->show_cancel_button = (isset($this->show_form_cancel_button)) ? $this->show_form_cancel_button : ($this->display == 'add' || $this->display == 'edit');\n\n            $back = urldecode(Tools::getValue('back', ''));\n            if (empty($back)) {\n                $back = self::$currentIndex . '&token=' . $this->token;\n            }\n            if (!Validate::isCleanHtml($back)) {\n                die(Tools::displayError());\n            }\n\n            $helper->back_url = $back;\n            null !== $this->base_tpl_form ? $helper->base_tpl = $this->base_tpl_form : '';\n            if ($this->access('view')) {\n                if (Tools::getValue('back')) {\n                    $helper->tpl_vars['back'] = Tools::safeOutput(Tools::getValue('back'));\n                } else {\n                    $helper->tpl_vars['back'] = Tools::safeOutput(Tools::getValue(self::$currentIndex . '&token=' . $this->token));\n                }\n            }\n            $form = $helper->generateForm($this->fields_form);\n\n            return $form;\n        }\n    }\n\n    public function getTemplateFormVars()\n    {\n        return $this->tpl_form_vars;\n    }\n\n    public function renderKpis()\n    {\n    }\n\n    /**\n     * Function used to render the options for this controller.\n     *\n     * @return string\n     */\n    public function renderOptions()\n    {\n        Hook::exec('action' . $this->controller_name . 'OptionsModifier', array(\n            'options' => &$this->fields_options,\n            'option_vars' => &$this->tpl_option_vars,\n        ));\n\n        if ($this->fields_options && is_array($this->fields_options)) {\n            if (isset($this->display) && $this->display != 'options' && $this->display != 'list') {\n                $this->show_toolbar = false;\n            } else {\n                $this->display = 'options';\n            }\n\n            unset($this->toolbar_btn);\n            $this->initToolbar();\n            $helper = new HelperOptions($this);\n            $this->setHelperDisplay($helper);\n            $helper->id = $this->id;\n            $helper->tpl_vars = $this->tpl_option_vars;\n            $options = $helper->generateOptions($this->fields_options);\n\n            return $options;\n        }\n    }\n\n    /**\n     * This function sets various display options for helper list.\n     *\n     * @param Helper $helper\n     */\n    public function setHelperDisplay(Helper $helper)\n    {\n        if (empty($this->toolbar_title)) {\n            $this->initToolbarTitle();\n        }\n        // tocheck\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n\n        // @todo : move that in Helper\n        $helper->title = is_array($this->toolbar_title) ? implode(' ' . Configuration::get('PS_NAVIGATION_PIPE') . ' ', $this->toolbar_title) : $this->toolbar_title;\n        $helper->toolbar_btn = $this->toolbar_btn;\n        $helper->show_toolbar = $this->show_toolbar;\n        $helper->toolbar_scroll = $this->toolbar_scroll;\n        $helper->override_folder = $this->tpl_folder;\n        $helper->actions = $this->actions;\n        $helper->simple_header = $this->list_simple_header;\n        $helper->bulk_actions = $this->bulk_actions;\n        $helper->currentIndex = self::$currentIndex;\n        $helper->className = $this->className;\n        $helper->table = $this->table;\n        $helper->name_controller = Tools::getValue('controller');\n        $helper->orderBy = $this->_orderBy;\n        $helper->orderWay = $this->_orderWay;\n        $helper->listTotal = $this->_listTotal;\n        $helper->shopLink = $this->shopLink;\n        $helper->shopLinkType = $this->shopLinkType;\n        $helper->identifier = $this->identifier;\n        $helper->token = $this->token;\n        $helper->languages = $this->_languages;\n        $helper->specificConfirmDelete = $this->specificConfirmDelete;\n        $helper->imageType = $this->imageType;\n        $helper->no_link = $this->list_no_link;\n        $helper->colorOnBackground = $this->colorOnBackground;\n        $helper->ajax_params = (isset($this->ajax_params) ? $this->ajax_params : null);\n        $helper->default_form_language = $this->default_form_language;\n        $helper->allow_employee_form_lang = $this->allow_employee_form_lang;\n        $helper->multiple_fieldsets = $this->multiple_fieldsets;\n        $helper->row_hover = $this->row_hover;\n        $helper->position_identifier = $this->position_identifier;\n        $helper->position_group_identifier = $this->position_group_identifier;\n        $helper->controller_name = $this->controller_name;\n        $helper->list_id = isset($this->list_id) ? $this->list_id : $this->table;\n        $helper->bootstrap = $this->bootstrap;\n\n        // For each action, try to add the corresponding skip elements list\n        $helper->list_skip_actions = $this->list_skip_actions;\n\n        $this->helper = $helper;\n    }\n\n    /**\n     * @deprecated 1.6.0\n     */\n    public function setDeprecatedMedia()\n    {\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        if ($isNewTheme) {\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/new-theme/public/theme.css', 'all', 1);\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/new-theme/public/main.bundle.js');\n            $this->addJqueryPlugin(array('chosen'));\n        } else {\n            //Bootstrap\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/' . $this->bo_css, 'all', 0);\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/vendor/titatoggle-min.css', 'all', 0);\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/public/theme.css', 'all', 0);\n\n            $this->addJquery();\n            $this->addJqueryPlugin(array('scrollTo', 'alerts', 'chosen', 'autosize', 'fancybox'));\n            $this->addJqueryPlugin('growl', null, false);\n            $this->addJqueryUI(array('ui.slider', 'ui.datepicker'));\n\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/bootstrap.min.js');\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/modernizr.min.js');\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/modernizr-loads.js');\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/moment-with-langs.min.js');\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/public/bundle.js');\n\n            $this->addJS(_PS_JS_DIR_ . 'jquery/plugins/timepicker/jquery-ui-timepicker-addon.js');\n\n            if (!$this->lite_display) {\n                $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/help.js');\n            }\n\n            if (!Tools::getValue('submitFormAjax')) {\n                $this->addJS(_PS_JS_DIR_ . 'admin/notifications.js');\n            }\n\n            if (defined('_PS_HOST_MODE_') && _PS_HOST_MODE_) {\n                $this->addJS('https://cdn.statuspage.io/se-v2.js');\n\n                Media::addJsDefL('status_operational', $this->l('Operational', null, true, false));\n                Media::addJsDefL('status_degraded_performance', $this->l('Degraded Performance', null, true, false));\n                Media::addJsDefL('status_partial_outage', $this->l('Partial Outage', null, true, false));\n                Media::addJsDefL('status_major_outage', $this->l('Major Outage', null, true, false));\n                Media::addJsDef(array('host_cluster' => defined('_PS_HOST_CLUSTER_') ? _PS_HOST_CLUSTER_ : 'fr1'));\n            }\n\n            // Specific Admin Theme\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/overrides.css', 'all', PHP_INT_MAX);\n        }\n\n        $this->addJS(array(\n            _PS_JS_DIR_ . 'admin.js?v=' . _PS_VERSION_, // TODO: SEE IF REMOVABLE\n            __PS_BASE_URI__ . $this->admin_webpath . '/themes/new-theme/public/cldr.bundle.js',\n            _PS_JS_DIR_ . 'tools.js?v=' . _PS_VERSION_,\n            __PS_BASE_URI__ . $this->admin_webpath . '/public/bundle.js',\n        ));\n\n        Media::addJsDef([\n            'changeFormLanguageUrl' => $this->context->link->getAdminLink(\n                'AdminEmployees',\n                true,\n                [],\n                ['action' => 'formLanguage']\n            ),\n        ]);\n        Media::addJsDef(array('host_mode' => (defined('_PS_HOST_MODE_') && _PS_HOST_MODE_)));\n        Media::addJsDef(array('baseDir' => __PS_BASE_URI__));\n        Media::addJsDef(array('baseAdminDir' => __PS_BASE_URI__ . basename(_PS_ADMIN_DIR_) . '/'));\n        Media::addJsDef(array('currency' => array(\n            'iso_code' => Context::getContext()->currency->iso_code,\n            'sign' => Context::getContext()->currency->sign,\n            'name' => Context::getContext()->currency->name,\n            'format' => Context::getContext()->currency->format,\n        )));\n        Media::addJsDef(\n            array(\n                'currency_specifications' => $this->preparePriceSpecifications($this->context),\n                'number_specifications' => $this->prepareNumberSpecifications($this->context),\n            )\n        );\n\n        // Execute Hook AdminController SetMedia\n        Hook::exec('actionAdminControllerSetMedia');\n    }\n\n    /**\n     * Non-static method which uses AdminController::translate().\n     *\n     * @deprecated use Context::getContext()->getTranslator()->trans($id, $parameters, $domain, $locale); instead\n     *\n     * @param string $string Term or expression in english\n     * @param string|null $class Name of the class\n     * @param bool $addslashes If set to true, the return value will pass through addslashes(). Otherwise, stripslashes().\n     * @param bool $htmlentities If set to true(default), the return value will pass through htmlentities($string, ENT_QUOTES, 'utf-8')\n     *\n     * @return string the translation if available, or the english default text\n     */\n    protected function l($string, $class = null, $addslashes = false, $htmlentities = true)\n    {\n        $translated = $this->translator->trans($string);\n        if ($translated !== $string) {\n            return $translated;\n        }\n\n        if ($class === null || $class == 'AdminTab') {\n            $class = substr(get_class($this), 0, -10);\n        } elseif (strtolower(substr($class, -10)) == 'controller') {\n            /* classname has changed, from AdminXXX to AdminXXXController, so we remove 10 characters and we keep same keys */\n            $class = substr($class, 0, -10);\n        }\n\n        return Translate::getAdminTranslation($string, $class, $addslashes, $htmlentities);\n    }\n\n    /**\n     * Init context and dependencies, handles POST and GET.\n     */\n    public function init()\n    {\n        parent::init();\n\n        if (Tools::getValue('ajax')) {\n            $this->ajax = '1';\n        }\n\n        if (null === $this->context->link) {\n            $protocol_link = (Tools::usingSecureMode() && Configuration::get('PS_SSL_ENABLED')) ? 'https://' : 'http://';\n            $protocol_content = (Tools::usingSecureMode() && Configuration::get('PS_SSL_ENABLED')) ? 'https://' : 'http://';\n            $this->context->link = new Link($protocol_link, $protocol_content);\n        }\n\n        if (isset($_GET['logout'])) {\n            $this->context->employee->logout();\n        }\n        if (isset(Context::getContext()->cookie->last_activity)) {\n            if ($this->context->cookie->last_activity + 900 < time()) {\n                $this->context->employee->logout();\n            } else {\n                $this->context->cookie->last_activity = time();\n            }\n        }\n\n        if (\n            !$this->isAnonymousAllowed()\n            && (\n                $this->controller_name != 'AdminLogin'\n                && (\n                    !isset($this->context->employee)\n                    || !$this->context->employee->isLoggedBack()\n                )\n            )\n        ) {\n            if (isset($this->context->employee)) {\n                $this->context->employee->logout();\n            }\n            $email = false;\n            if (Tools::getValue('email') && Validate::isEmail(Tools::getValue('email'))) {\n                $email = Tools::getValue('email');\n            }\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminLogin') . ((!isset($_GET['logout']) && $this->controller_name != 'AdminNotFound' && Tools::getValue('controller')) ? '&redirect=' . $this->controller_name : '') . ($email ? '&email=' . $email : ''));\n        }\n\n        // Set current index\n        $current_index = 'index.php' . (($controller = Tools::getValue('controller')) ? '?controller=' . $controller : '');\n        if ($back = Tools::getValue('back')) {\n            $current_index .= '&back=' . urlencode($back);\n        }\n        self::$currentIndex = $current_index;\n\n        if ((int) Tools::getValue('liteDisplaying')) {\n            $this->display_header = false;\n            $this->display_header_javascript = true;\n            $this->display_footer = false;\n            $this->content_only = false;\n            $this->lite_display = true;\n        }\n\n        if ($this->ajax && method_exists($this, 'ajaxPreprocess')) {\n            $this->ajaxPreProcess();\n        }\n\n        $this->context->smarty->assign(array(\n            'table' => $this->table,\n            'current' => self::$currentIndex,\n            'token' => $this->token,\n            'host_mode' => defined('_PS_HOST_MODE_') ? 1 : 0,\n            'stock_management' => (int) Configuration::get('PS_STOCK_MANAGEMENT'),\n            'no_order_tip' => $this->getNotificationTip('order'),\n            'no_customer_tip' => $this->getNotificationTip('customer'),\n            'no_customer_message_tip' => $this->getNotificationTip('customer_message'),\n        ));\n\n        if ($this->display_header) {\n            $this->context->smarty->assign('displayBackOfficeHeader', Hook::exec('displayBackOfficeHeader', array()));\n        }\n\n        $this->context->smarty->assign(array(\n            'displayBackOfficeTop' => Hook::exec('displayBackOfficeTop', array()),\n            'submit_form_ajax' => (int) Tools::getValue('submitFormAjax'),\n        ));\n\n        Employee::setLastConnectionDate($this->context->employee->id);\n\n        $this->initProcess();\n        $this->initBreadcrumbs();\n        $this->initModal();\n        $this->initToolbarFlags();\n        $this->initNotifications();\n    }\n\n    /**\n     * Sets the smarty variables and js defs used to show / hide some notifications.\n     */\n    public function initNotifications()\n    {\n        $notificationsSettings = array(\n            'show_new_orders' => Configuration::get('PS_SHOW_NEW_ORDERS'),\n            'show_new_customers' => Configuration::get('PS_SHOW_NEW_CUSTOMERS'),\n            'show_new_messages' => Configuration::get('PS_SHOW_NEW_MESSAGES '),\n        );\n\n        $this->context->smarty->assign($notificationsSettings);\n\n        Media::addJsDef($notificationsSettings);\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    public function initShopContext()\n    {\n        // Do not initialize context when the shop is not installed\n        if (defined('PS_INSTALLATION_IN_PROGRESS')) {\n            return;\n        }\n\n        // Change shop context ?\n        if (Shop::isFeatureActive() && Tools::getValue('setShopContext') !== false) {\n            $this->context->cookie->shopContext = Tools::getValue('setShopContext');\n            $url = parse_url($_SERVER['REQUEST_URI']);\n            $query = (isset($url['query'])) ? $url['query'] : '';\n            parse_str($query, $parse_query);\n            unset($parse_query['setShopContext'], $parse_query['conf']);\n            $http_build_query = http_build_query($parse_query, '', '&');\n            $this->redirect_after = $url['path'] . ($http_build_query ? '?' . $http_build_query : '');\n        } elseif (!Shop::isFeatureActive()) {\n            $this->context->cookie->shopContext = 's-' . (int) Configuration::get('PS_SHOP_DEFAULT');\n        } elseif (Shop::getTotalShops(false, null) < 2 && $this->context->employee->isLoggedBack()) {\n            $this->context->cookie->shopContext = 's-' . (int) $this->context->employee->getDefaultShopID();\n        }\n\n        $shop_id = null;\n        Shop::setContext(Shop::CONTEXT_ALL);\n        if ($this->context->cookie->shopContext && $this->context->employee->isLoggedBack()) {\n            $split = explode('-', $this->context->cookie->shopContext);\n            if (count($split) == 2) {\n                if ($split[0] == 'g') {\n                    if ($this->context->employee->hasAuthOnShopGroup((int) $split[1])) {\n                        Shop::setContext(Shop::CONTEXT_GROUP, (int) $split[1]);\n                    } else {\n                        $shop_id = (int) $this->context->employee->getDefaultShopID();\n                        Shop::setContext(Shop::CONTEXT_SHOP, $shop_id);\n                    }\n                } elseif (Shop::getShop($split[1]) && $this->context->employee->hasAuthOnShop($split[1])) {\n                    $shop_id = (int) $split[1];\n                    Shop::setContext(Shop::CONTEXT_SHOP, $shop_id);\n                } else {\n                    $shop_id = (int) $this->context->employee->getDefaultShopID();\n                    Shop::setContext(Shop::CONTEXT_SHOP, $shop_id);\n                }\n            }\n        }\n\n        // Check multishop context and set right context if need\n        if (!($this->multishop_context & Shop::getContext())) {\n            if (Shop::getContext() == Shop::CONTEXT_SHOP && !($this->multishop_context & Shop::CONTEXT_SHOP)) {\n                Shop::setContext(Shop::CONTEXT_GROUP, Shop::getContextShopGroupID());\n            }\n            if (Shop::getContext() == Shop::CONTEXT_GROUP && !($this->multishop_context & Shop::CONTEXT_GROUP)) {\n                Shop::setContext(Shop::CONTEXT_ALL);\n            }\n        }\n\n        // Replace existing shop if necessary\n        if (!$shop_id) {\n            $this->context->shop = new Shop((int) Configuration::get('PS_SHOP_DEFAULT'));\n        } elseif ($this->context->shop->id != $shop_id) {\n            $this->context->shop = new Shop((int) $shop_id);\n        }\n\n        // Replace current default country\n        $this->context->country = new Country((int) Configuration::get('PS_COUNTRY_DEFAULT'));\n        $this->context->currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n    }\n\n    /**\n     * Retrieve GET and POST value and translate them to actions.\n     */\n    public function initProcess()\n    {\n        if (!isset($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        // Manage list filtering\n        if (Tools::isSubmit('submitFilter' . $this->list_id)\n            || $this->context->cookie->{'submitFilter' . $this->list_id} !== false\n            || Tools::getValue($this->list_id . 'Orderby')\n            || Tools::getValue($this->list_id . 'Orderway')) {\n            $this->filter = true;\n        }\n\n        $this->id_object = (int) Tools::getValue($this->identifier);\n\n        /* Delete object image */\n        if (isset($_GET['deleteImage'])) {\n            if ($this->access('delete')) {\n                $this->action = 'delete_image';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['delete' . $this->table])) {\n            /* Delete object */\n            if ($this->access('delete')) {\n                $this->action = 'delete';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif ((isset($_GET['status' . $this->table]) || isset($_GET['status'])) && Tools::getValue($this->identifier)) {\n            /* Change object statuts (active, inactive) */\n            if ($this->access('edit')) {\n                $this->action = 'status';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['position'])) {\n            /* Move an object */\n            if ($this->access('edit') == '1') {\n                $this->action = 'position';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitAdd' . $this->table)\n                 || Tools::isSubmit('submitAdd' . $this->table . 'AndStay')\n                 || Tools::isSubmit('submitAdd' . $this->table . 'AndPreview')\n                 || Tools::isSubmit('submitAdd' . $this->table . 'AndBackToParent')) {\n            // case 1: updating existing entry\n            if ($this->id_object) {\n                if ($this->access('edit')) {\n                    $this->action = 'save';\n                    if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay')) {\n                        $this->display = 'edit';\n                    } else {\n                        $this->display = 'list';\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n                }\n            } else {\n                // case 2: creating new entry\n                if ($this->access('add')) {\n                    $this->action = 'save';\n                    if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay')) {\n                        $this->display = 'edit';\n                    } else {\n                        $this->display = 'list';\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', array(), 'Admin.Notifications.Error');\n                }\n            }\n        } elseif (isset($_GET['add' . $this->table])) {\n            if ($this->access('add')) {\n                $this->action = 'new';\n                $this->display = 'add';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to add this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['update' . $this->table], $_GET[$this->identifier])) {\n            $this->display = 'edit';\n            if (!$this->access('edit')) {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['view' . $this->table])) {\n            if ($this->access('view')) {\n                $this->display = 'view';\n                $this->action = 'view';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to view this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['details' . $this->table])) {\n            if ($this->access('view')) {\n                $this->display = 'details';\n                $this->action = 'details';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to view this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['export' . $this->table])) {\n            if ($this->access('view')) {\n                $this->action = 'export';\n            }\n        } elseif (isset($_POST['submitReset' . $this->list_id])) {\n            /* Cancel all filters for this tab */\n            $this->action = 'reset_filters';\n        } elseif (Tools::isSubmit('submitOptions' . $this->table) || Tools::isSubmit('submitOptions')) {\n            /* Submit options list */\n            $this->display = 'options';\n            if ($this->access('edit')) {\n                $this->action = 'update_options';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::getValue('action') && method_exists($this, 'process' . ucfirst(Tools::toCamelCase(Tools::getValue('action'))))) {\n            $this->action = Tools::getValue('action');\n        } elseif (Tools::isSubmit('submitFields') && $this->required_database && $this->access('add') && $this->access('delete')) {\n            $this->action = 'update_fields';\n        } elseif (is_array($this->bulk_actions)) {\n            $submit_bulk_actions = array_merge(array(\n                'enableSelection' => array(\n                    'text' => $this->l('Enable selection'),\n                    'icon' => 'icon-power-off text-success',\n                ),\n                'disableSelection' => array(\n                    'text' => $this->l('Disable selection'),\n                    'icon' => 'icon-power-off text-danger',\n                ),\n            ), $this->bulk_actions);\n            foreach ($submit_bulk_actions as $bulk_action => $params) {\n                if (Tools::isSubmit('submitBulk' . $bulk_action . $this->table) || Tools::isSubmit('submitBulk' . $bulk_action)) {\n                    if ($bulk_action === 'delete') {\n                        if ($this->access('delete')) {\n                            $this->action = 'bulk' . $bulk_action;\n                            $this->boxes = Tools::getValue($this->table . 'Box');\n                            if (empty($this->boxes) && $this->table == 'attribute') {\n                                $this->boxes = Tools::getValue($this->table . '_valuesBox');\n                            }\n                        } else {\n                            $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n                        }\n\n                        break;\n                    } elseif ($this->access('edit')) {\n                        $this->action = 'bulk' . $bulk_action;\n                        $this->boxes = Tools::getValue($this->table . 'Box');\n                    } else {\n                        $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n                    }\n\n                    break;\n                } elseif (Tools::isSubmit('submitBulk')) {\n                    if ($bulk_action === 'delete') {\n                        if ($this->access('delete')) {\n                            $this->action = 'bulk' . $bulk_action;\n                            $this->boxes = Tools::getValue($this->table . 'Box');\n                        } else {\n                            $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n                        }\n\n                        break;\n                    } elseif ($this->access('edit')) {\n                        $this->action = 'bulk' . Tools::getValue('select_submitBulk');\n                        $this->boxes = Tools::getValue($this->table . 'Box');\n                    } else {\n                        $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n                    }\n\n                    break;\n                }\n            }\n        } elseif (!empty($this->fields_options) && empty($this->fields_list)) {\n            $this->display = 'options';\n        }\n    }\n\n    /**\n     * Get the current objects' list form the database.\n     *\n     * @param int $id_lang Language used for display\n     * @param string|null $order_by ORDER BY clause\n     * @param string|null $order_way Order way (ASC, DESC)\n     * @param int $start Offset in LIMIT clause\n     * @param int|null $limit Row count in LIMIT clause\n     * @param int|bool $id_lang_shop\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function getList(\n        $id_lang,\n        $order_by = null,\n        $order_way = null,\n        $start = 0,\n        $limit = null,\n        $id_lang_shop = false\n    ) {\n        Hook::exec('action' . $this->controller_name . 'ListingFieldsModifier', array(\n            'select' => &$this->_select,\n            'join' => &$this->_join,\n            'where' => &$this->_where,\n            'group_by' => &$this->_group,\n            'order_by' => &$this->_orderBy,\n            'order_way' => &$this->_orderWay,\n            'fields' => &$this->fields_list,\n        ));\n\n        if (!isset($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        if (!Validate::isTableOrIdentifier($this->table)) {\n            throw new PrestaShopException(sprintf('Table name %s is invalid:', $this->table));\n        }\n\n        /* Check params validity */\n        if (!is_numeric($start) || !Validate::isUnsignedId($id_lang)) {\n            throw new PrestaShopException('get list params is not valid');\n        }\n\n        $limit = $this->checkSqlLimit($limit);\n\n        /* Determine offset from current page */\n        $start = 0;\n        if ((int) Tools::getValue('submitFilter' . $this->list_id)) {\n            $start = ((int) Tools::getValue('submitFilter' . $this->list_id) - 1) * $limit;\n        } elseif (\n            empty($start)\n            && isset($this->context->cookie->{$this->list_id . '_start'})\n            && Tools::isSubmit('export' . $this->table)\n        ) {\n            $start = $this->context->cookie->{$this->list_id . '_start'};\n        }\n\n        // Either save or reset the offset in the cookie\n        if ($start) {\n            $this->context->cookie->{$this->list_id . '_start'} = $start;\n        } elseif (isset($this->context->cookie->{$this->list_id . '_start'})) {\n            unset($this->context->cookie->{$this->list_id . '_start'});\n        }\n\n        /* Cache */\n        $this->_lang = (int) $id_lang;\n\n        // Add SQL shop restriction\n        $select_shop = '';\n        if ($this->shopLinkType) {\n            $select_shop = ', shop.name as shop_name ';\n        }\n\n        if ($this->multishop_context && Shop::isTableAssociated($this->table) && !empty($this->className)) {\n            if (Shop::getContext() != Shop::CONTEXT_ALL || !$this->context->employee->isSuperAdmin()) {\n                $test_join = !preg_match('#`?' . preg_quote(_DB_PREFIX_ . $this->table . '_shop') . '`? *sa#', $this->_join);\n                if (Shop::isFeatureActive() && $test_join && Shop::isTableAssociated($this->table)) {\n                    $this->_where .= ' AND EXISTS (\n                        SELECT 1\n                        FROM `' . _DB_PREFIX_ . $this->table . '_shop` sa\n                        WHERE a.`' . bqSQL($this->identifier) . '` = sa.`' . bqSQL($this->identifier) . '`\n                         AND sa.id_shop IN (' . implode(', ', Shop::getContextListShopID()) . ')\n                    )';\n                }\n            }\n        }\n\n        $fromClause = $this->getFromClause();\n        $joinClause = $this->getJoinClause($id_lang, $id_lang_shop);\n        $whereClause = $this->getWhereClause();\n        $orderByClause = $this->getOrderByClause($order_by, $order_way);\n\n        $shouldLimitSqlResults = $this->shouldLimitSqlResults($limit);\n\n        do {\n            $this->_listsql = '';\n\n            if ($this->explicitSelect) {\n                foreach ($this->fields_list as $key => $array_value) {\n                    // Add it only if it is not already in $this->_select\n                    if (isset($this->_select) && preg_match('/[\\s]`?' . preg_quote($key, '/') . '`?\\s*,/', $this->_select)) {\n                        continue;\n                    }\n\n                    if (isset($array_value['filter_key'])) {\n                        $this->_listsql .= str_replace('!', '.`', $array_value['filter_key']) . '` AS `' . $key . '`, ';\n                    } elseif ($key == 'id_' . $this->table) {\n                        $this->_listsql .= 'a.`' . bqSQL($key) . '`, ';\n                    } elseif ($key != 'image' && !preg_match('/' . preg_quote($key, '/') . '/i', $this->_select)) {\n                        $this->_listsql .= '`' . bqSQL($key) . '`, ';\n                    }\n                }\n                $this->_listsql = rtrim(trim($this->_listsql), ',');\n            } else {\n                $this->_listsql .= ($this->lang ? 'b.*,' : '') . ' a.*';\n            }\n\n            $this->_listsql .= \"\\n\" . (isset($this->_select) ? ', ' . rtrim($this->_select, ', ') : '') . $select_shop;\n\n            $limitClause = ' ' . (($shouldLimitSqlResults) ? ' LIMIT ' . (int) $start . ', ' . (int) $limit : '');\n\n            if ($this->_use_found_rows || isset($this->_filterHaving) || isset($this->_having)) {\n                $this->_listsql = 'SELECT SQL_CALC_FOUND_ROWS ' . ($this->_tmpTableFilter ? ' * FROM (SELECT ' : '') .\n                    $this->_listsql .\n                    $fromClause .\n                    $joinClause .\n                    $whereClause .\n                    $orderByClause .\n                    $limitClause;\n\n                $list_count = 'SELECT FOUND_ROWS() AS `' . _DB_PREFIX_ . $this->table . '`';\n            } else {\n                $this->_listsql = 'SELECT ' . ($this->_tmpTableFilter ? ' * FROM (SELECT ' : '') .\n                    $this->_listsql .\n                    $fromClause .\n                    $joinClause .\n                    $whereClause .\n                    $orderByClause .\n                    $limitClause;\n\n                $list_count = 'SELECT COUNT(*) AS `' . _DB_PREFIX_ . $this->table . '` ' .\n                    $fromClause .\n                    $joinClause .\n                    $whereClause;\n            }\n\n            $this->_list = Db::getInstance()->executeS($this->_listsql, true, false);\n\n            if ($this->_list === false) {\n                $this->_list_error = Db::getInstance()->getMsgError();\n\n                break;\n            }\n\n            $this->_listTotal = Db::getInstance()->getValue($list_count, false);\n\n            if ($shouldLimitSqlResults) {\n                $start = (int) $start - (int) $limit;\n                if ($start < 0) {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } while (empty($this->_list));\n\n        Hook::exec('action' . $this->controller_name . 'ListingResultsModifier', array(\n            'list' => &$this->_list,\n            'list_total' => &$this->_listTotal,\n        ));\n    }\n\n    /**\n     * @return string\n     */\n    protected function getFromClause()\n    {\n        $sql_table = $this->table == 'order' ? 'orders' : $this->table;\n\n        return \"\\n\" . 'FROM `' . _DB_PREFIX_ . $sql_table . '` a ';\n    }\n\n    /**\n     * @param $id_lang\n     * @param $id_lang_shop\n     *\n     * @return string\n     */\n    protected function getJoinClause($id_lang, $id_lang_shop)\n    {\n        $shopJoinClause = '';\n        if ($this->shopLinkType) {\n            $shopJoinClause = ' LEFT JOIN `' . _DB_PREFIX_ . bqSQL($this->shopLinkType) . '` shop\n                            ON a.`id_' . bqSQL($this->shopLinkType) . '` = shop.`id_' . bqSQL($this->shopLinkType) . '`';\n        }\n\n        return \"\\n\" . $this->getLanguageJoinClause($id_lang, $id_lang_shop) .\n            \"\\n\" . (isset($this->_join) ? $this->_join . ' ' : '') .\n            \"\\n\" . $shopJoinClause;\n    }\n\n    /**\n     * @param $idLang\n     * @param $idLangShop\n     *\n     * @return string\n     */\n    protected function getLanguageJoinClause($idLang, $idLangShop)\n    {\n        $languageJoinClause = '';\n        if ($this->lang) {\n            $languageJoinClause = 'LEFT JOIN `' . _DB_PREFIX_ . bqSQL($this->table) . '_lang` b\n                ON (b.`' . bqSQL($this->identifier) . '` = a.`' . bqSQL($this->identifier) . '` AND b.`id_lang` = ' . (int) $idLang;\n\n            if ($idLangShop) {\n                if (!Shop::isFeatureActive()) {\n                    $languageJoinClause .= ' AND b.`id_shop` = ' . (int) Configuration::get('PS_SHOP_DEFAULT');\n                } elseif (Shop::getContext() == Shop::CONTEXT_SHOP) {\n                    $languageJoinClause .= ' AND b.`id_shop` = ' . (int) $idLangShop;\n                } else {\n                    $languageJoinClause .= ' AND b.`id_shop` = a.id_shop_default';\n                }\n            }\n            $languageJoinClause .= ')';\n        }\n\n        return $languageJoinClause;\n    }\n\n    /**\n     * @return string\n     */\n    protected function getWhereClause()\n    {\n        $whereShop = '';\n        if ($this->shopLinkType) {\n            $whereShop = Shop::addSqlRestriction($this->shopShareDatas, 'a', $this->shopLinkType);\n        }\n        $whereClause = ' WHERE 1 ' . (isset($this->_where) ? $this->_where . ' ' : '') .\n            ($this->deleted ? 'AND a.`deleted` = 0 ' : '') .\n            (isset($this->_filter) ? $this->_filter : '') . $whereShop . \"\\n\" .\n            (isset($this->_group) ? $this->_group . ' ' : '') . \"\\n\" .\n            $this->getHavingClause();\n\n        return $whereClause;\n    }\n\n    /**\n     * @param $orderBy\n     * @param $orderDirection\n     *\n     * @return string\n     */\n    protected function getOrderByClause($orderBy, $orderDirection)\n    {\n        $this->_orderBy = $this->checkOrderBy($orderBy);\n        $this->_orderWay = $this->checkOrderDirection($orderDirection);\n\n        return ' ORDER BY ' . ((str_replace('`', '', $this->_orderBy) == $this->identifier) ? 'a.' : '') .\n            $this->_orderBy . ' ' . $this->_orderWay .\n            ($this->_tmpTableFilter ? ') tmpTable WHERE 1' . $this->_tmpTableFilter : '');\n    }\n\n    /**\n     * @param $orderBy\n     *\n     * @return false|string\n     */\n    protected function checkOrderBy($orderBy)\n    {\n        if (empty($orderBy)) {\n            $prefix = $this->getCookieFilterPrefix();\n\n            if ($this->context->cookie->{$prefix . $this->list_id . 'Orderby'}) {\n                $orderBy = $this->context->cookie->{$prefix . $this->list_id . 'Orderby'};\n            } elseif ($this->_orderBy) {\n                $orderBy = $this->_orderBy;\n            } else {\n                $orderBy = $this->_defaultOrderBy;\n            }\n        }\n\n        /* Check params validity */\n        if (!Validate::isOrderBy($orderBy)) {\n            throw new PrestaShopException('Invalid \"order by\" clause.');\n        }\n\n        if (!isset($this->fields_list[$orderBy]['order_key']) && isset($this->fields_list[$orderBy]['filter_key'])) {\n            $this->fields_list[$orderBy]['order_key'] = $this->fields_list[$orderBy]['filter_key'];\n        }\n\n        if (isset($this->fields_list[$orderBy]['order_key'])) {\n            $orderBy = $this->fields_list[$orderBy]['order_key'];\n        }\n\n        if (preg_match('/[.!]/', $orderBy)) {\n            $orderBySplit = preg_split('/[.!]/', $orderBy);\n            $orderBy = bqSQL($orderBySplit[0]) . '.`' . bqSQL($orderBySplit[1]) . '`';\n        } elseif ($orderBy) {\n            $orderBy = bqSQL($orderBy);\n        }\n\n        return $orderBy;\n    }\n\n    /**\n     * @param $orderDirection\n     *\n     * @return string\n     */\n    protected function checkOrderDirection($orderDirection)\n    {\n        $prefix = $this->getCookieOrderByPrefix();\n        if (empty($orderDirection)) {\n            if ($this->context->cookie->{$prefix . $this->list_id . 'Orderway'}) {\n                $orderDirection = $this->context->cookie->{$prefix . $this->list_id . 'Orderway'};\n            } elseif ($this->_orderWay) {\n                $orderDirection = $this->_orderWay;\n            } else {\n                $orderDirection = $this->_defaultOrderWay;\n            }\n        }\n\n        if (!Validate::isOrderWay($orderDirection)) {\n            throw new PrestaShopException('Invalid order direction.');\n        }\n\n        return pSQL(Tools::strtoupper($orderDirection));\n    }\n\n    /**\n     * @return mixed\n     */\n    protected function getCookieOrderByPrefix()\n    {\n        return str_replace(array('admin', 'controller'), '', Tools::strtolower(get_class($this)));\n    }\n\n    /**\n     * @return string\n     */\n    protected function getHavingClause()\n    {\n        $havingClause = '';\n        if (isset($this->_filterHaving) || isset($this->_having)) {\n            $havingClause = ' HAVING ';\n            if (isset($this->_filterHaving)) {\n                $havingClause .= ltrim($this->_filterHaving, ' AND ');\n            }\n            if (isset($this->_having)) {\n                $havingClause .= $this->_having . ' ';\n            }\n        }\n\n        return $havingClause;\n    }\n\n    /**\n     * @param $limit\n     *\n     * @return bool\n     */\n    protected function shouldLimitSqlResults($limit)\n    {\n        return $limit !== false;\n    }\n\n    /**\n     * @param $limit\n     *\n     * @return int\n     */\n    protected function checkSqlLimit($limit)\n    {\n        if (empty($limit)) {\n            if (\n                isset($this->context->cookie->{$this->list_id . '_pagination'}) &&\n                $this->context->cookie->{$this->list_id . '_pagination'}\n            ) {\n                $limit = $this->context->cookie->{$this->list_id . '_pagination'};\n            } else {\n                $limit = $this->_default_pagination;\n            }\n        }\n\n        $limit = (int) Tools::getValue($this->list_id . '_pagination', $limit);\n        if (in_array($limit, $this->_pagination) && $limit != $this->_default_pagination) {\n            $this->context->cookie->{$this->list_id . '_pagination'} = $limit;\n        } else {\n            unset($this->context->cookie->{$this->list_id . '_pagination'});\n        }\n\n        if (!is_numeric($limit)) {\n            throw new PrestaShopException('Invalid limit. It should be a numeric.');\n        }\n\n        return $limit;\n    }\n\n    /**\n     * @param array|string $filter_modules_list\n     * @param string|bool $tracking_source\n     *\n     * @return bool\n     *\n     * @throws PrestaShopException\n     */\n    public function getModulesList($filter_modules_list, $tracking_source = false)\n    {\n        if (!is_array($filter_modules_list) && null !== $filter_modules_list) {\n            $filter_modules_list = array($filter_modules_list);\n        }\n\n        if (null === $filter_modules_list || !count($filter_modules_list)) {\n            return false;\n        } //if there is no modules to display just return false;\n\n        $all_modules = Module::getModulesOnDisk(true);\n        $this->modules_list = array();\n        foreach ($all_modules as $module) {\n            $perm = true;\n            if ($module->id) {\n                $perm &= Module::getPermissionStatic($module->id, 'configure');\n            } else {\n                $id_admin_module = Tab::getIdFromClassName('AdminModules');\n                $access = Profile::getProfileAccess($this->context->employee->id_profile, $id_admin_module);\n                if (!$access['edit']) {\n                    $perm &= false;\n                }\n            }\n\n            if (in_array($module->name, $filter_modules_list) && $perm) {\n                $this->fillModuleData($module, 'array', null, $tracking_source);\n                $this->modules_list[array_search($module->name, $filter_modules_list)] = $module;\n            }\n        }\n        ksort($this->modules_list);\n\n        if (count($this->modules_list)) {\n            return true;\n        }\n\n        return false; //no module found on disk just return false;\n    }\n\n    /**\n     * @return array\n     */\n    public function getLanguages()\n    {\n        $cookie = $this->context->cookie;\n        $this->allow_employee_form_lang = (int) Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG');\n        if ($this->allow_employee_form_lang && !$cookie->employee_form_lang) {\n            $cookie->employee_form_lang = (int) Configuration::get('PS_LANG_DEFAULT');\n        }\n\n        $lang_exists = false;\n        $this->_languages = Language::getLanguages(false);\n        foreach ($this->_languages as $lang) {\n            if (isset($cookie->employee_form_lang) && $cookie->employee_form_lang == $lang['id_lang']) {\n                $lang_exists = true;\n            }\n        }\n\n        $this->default_form_language = $lang_exists ? (int) $cookie->employee_form_lang : (int) Configuration::get('PS_LANG_DEFAULT');\n\n        foreach ($this->_languages as $k => $language) {\n            $this->_languages[$k]['is_default'] = (int) ($language['id_lang'] == $this->default_form_language);\n        }\n\n        return $this->_languages;\n    }\n\n    /**\n     * Return the list of fields value.\n     *\n     * @param ObjectModel $obj Object\n     *\n     * @return array\n     */\n    public function getFieldsValue($obj)\n    {\n        foreach ($this->fields_form as $fieldset) {\n            if (isset($fieldset['form']['input'])) {\n                foreach ($fieldset['form']['input'] as $input) {\n                    if (!isset($this->fields_value[$input['name']])) {\n                        if (isset($input['type']) && $input['type'] == 'shop') {\n                            if ($obj->id) {\n                                $result = Shop::getShopById((int) $obj->id, $this->identifier, $this->table);\n                                foreach ($result as $row) {\n                                    $this->fields_value['shop'][$row['id_' . $input['type']]][] = $row['id_shop'];\n                                }\n                            }\n                        } elseif (isset($input['lang']) && $input['lang']) {\n                            foreach ($this->_languages as $language) {\n                                $field_value = $this->getFieldValue($obj, $input['name'], $language['id_lang']);\n                                if (empty($field_value)) {\n                                    if (isset($input['default_value']) && is_array($input['default_value']) && isset($input['default_value'][$language['id_lang']])) {\n                                        $field_value = $input['default_value'][$language['id_lang']];\n                                    } elseif (isset($input['default_value'])) {\n                                        $field_value = $input['default_value'];\n                                    }\n                                }\n                                $this->fields_value[$input['name']][$language['id_lang']] = $field_value;\n                            }\n                        } else {\n                            $field_value = $this->getFieldValue($obj, $input['name']);\n                            if ($field_value === false && isset($input['default_value'])) {\n                                $field_value = $input['default_value'];\n                            }\n                            $this->fields_value[$input['name']] = $field_value;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $this->fields_value;\n    }\n\n    /**\n     * Return field value if possible (both classical and multilingual fields).\n     *\n     * Case 1 : Return value if present in $_POST / $_GET\n     * Case 2 : Return object value\n     *\n     * @param ObjectModel $obj Object\n     * @param string $key Field name\n     * @param int|null $id_lang Language id (optional)\n     *\n     * @return string\n     */\n    public function getFieldValue($obj, $key, $id_lang = null)\n    {\n        if ($id_lang) {\n            $default_value = (isset($obj->id) && $obj->id && isset($obj->{$key}[$id_lang])) ? $obj->{$key}[$id_lang] : false;\n        } else {\n            $default_value = isset($obj->{$key}) ? $obj->{$key} : false;\n        }\n\n        return Tools::getValue($key . ($id_lang ? '_' . $id_lang : ''), $default_value);\n    }\n\n    /**\n     * Manage page display (form, list...).\n     *\n     * @param string|bool $class_name Allow to validate a different class than the current one\n     *\n     * @throws PrestaShopException\n     */\n    public function validateRules($class_name = false)\n    {\n        if (!$class_name) {\n            $class_name = $this->className;\n        }\n\n        /** @var $object ObjectModel */\n        $object = new $class_name();\n\n        if (method_exists($this, 'getValidationRules')) {\n            $definition = $this->getValidationRules();\n        } else {\n            $definition = ObjectModel::getDefinition($class_name);\n        }\n\n        $default_language = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $languages = Language::getLanguages(false);\n\n        foreach ($definition['fields'] as $field => $def) {\n            $skip = array();\n            if (in_array($field, array('passwd', 'no-picture'))) {\n                $skip = array('required');\n            }\n\n            if (isset($def['lang']) && $def['lang']) {\n                if (isset($def['required']) && $def['required']) {\n                    $value = Tools::getValue($field . '_' . $default_language->id);\n                    // !isset => not exist || \"\" == $value can be === 0 (before, empty $value === 0 returned true)\n                    if (!isset($value) || '' == $value) {\n                        $this->errors[$field . '_' . $default_language->id] = $this->trans(\n                            'The field %field_name% is required at least in %lang%.',\n                            array('%field_name%' => $object->displayFieldName($field, $class_name), '%lang%' => $default_language->name),\n                            'Admin.Notifications.Error'\n                        );\n                    }\n                }\n\n                foreach ($languages as $language) {\n                    $value = Tools::getValue($field . '_' . $language['id_lang']);\n                    if (!empty($value)) {\n                        if (($error = $object->validateField($field, $value, $language['id_lang'], $skip, true)) !== true) {\n                            $this->errors[$field . '_' . $language['id_lang']] = $error;\n                        }\n                    }\n                }\n            } elseif (($error = $object->validateField($field, Tools::getValue($field), null, $skip, true)) !== true) {\n                $this->errors[$field] = $error;\n            }\n        }\n\n        /* Overload this method for custom checking */\n        $this->_childValidation();\n\n        /* Checking for multilingual fields validity */\n        if (isset($rules['validateLang']) && is_array($rules['validateLang'])) {\n            foreach ($rules['validateLang'] as $field_lang => $function) {\n                foreach ($languages as $language) {\n                    if (($value = Tools::getValue($field_lang . '_' . $language['id_lang'])) !== false && !empty($value)) {\n                        if (Tools::strtolower($function) == 'iscleanhtml' && Configuration::get('PS_ALLOW_HTML_IFRAME')) {\n                            $res = Validate::$function($value, true);\n                        } else {\n                            $res = Validate::$function($value);\n                        }\n                        if (!$res) {\n                            $this->errors[$field_lang . '_' . $language['id_lang']] = $this->trans(\n                                'The %field_name% field (%lang%) is invalid.',\n                                array('%field_name%' => call_user_func(array($class_name, 'displayFieldName'), $field_lang, $class_name), '%lang%' => $language['name']),\n                                'Admin.Notifications.Error'\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Overload this method for custom checking.\n     */\n    protected function _childValidation()\n    {\n    }\n\n    /**\n     * Display object details.\n     */\n    public function viewDetails()\n    {\n    }\n\n    /**\n     * Called before deletion.\n     *\n     * @param ObjectModel $object Object\n     *\n     * @return bool\n     */\n    protected function beforeDelete($object)\n    {\n        return false;\n    }\n\n    /**\n     * Called before deletion.\n     *\n     * @param ObjectModel $object Object\n     * @param int $old_id\n     *\n     * @return bool\n     */\n    protected function afterDelete($object, $old_id)\n    {\n        return true;\n    }\n\n    /**\n     * @param ObjectModel $object\n     *\n     * @return bool\n     */\n    protected function afterAdd($object)\n    {\n        return true;\n    }\n\n    /**\n     * @param ObjectModel $object\n     *\n     * @return bool\n     */\n    protected function afterUpdate($object)\n    {\n        return true;\n    }\n\n    /**\n     * Check rights to view the current tab.\n     *\n     * @return bool\n     */\n    protected function afterImageUpload()\n    {\n        return true;\n    }\n\n    /**\n     * Copy data values from $_POST to object.\n     *\n     * @param ObjectModel &$object Object\n     * @param string $table Object table\n     */\n    protected function copyFromPost(&$object, $table)\n    {\n        /* Classical fields */\n        foreach ($_POST as $key => $value) {\n            if (array_key_exists($key, $object) && $key != 'id_' . $table) {\n                /* Do not take care of password field if empty */\n                if ($key == 'passwd' && Tools::getValue('id_' . $table) && empty($value)) {\n                    continue;\n                }\n                /* Automatically hash password in MD5 */\n                if ($key == 'passwd' && !empty($value)) {\n                    $value = $this->get('hashing')->hash($value, _COOKIE_KEY_);\n                }\n                $object->{$key} = $value;\n            }\n        }\n\n        /* Multilingual fields */\n        $class_vars = get_class_vars(get_class($object));\n        $fields = array();\n        if (isset($class_vars['definition']['fields'])) {\n            $fields = $class_vars['definition']['fields'];\n        }\n\n        foreach ($fields as $field => $params) {\n            if (array_key_exists('lang', $params) && $params['lang']) {\n                foreach (Language::getIDs(false) as $id_lang) {\n                    if (Tools::isSubmit($field . '_' . (int) $id_lang)) {\n                        $object->{$field}[(int) $id_lang] = Tools::getValue($field . '_' . (int) $id_lang);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns an array with selected shops and type (group or boutique shop).\n     *\n     * @param string $table\n     *\n     * @return array\n     */\n    protected function getSelectedAssoShop($table)\n    {\n        if (!Shop::isFeatureActive() || !Shop::isTableAssociated($table)) {\n            return array();\n        }\n\n        $shops = Shop::getShops(true, null, true);\n        if (count($shops) == 1 && isset($shops[0])) {\n            return array($shops[0], 'shop');\n        }\n\n        $assos = array();\n        if (Tools::isSubmit('checkBoxShopAsso_' . $table)) {\n            foreach (Tools::getValue('checkBoxShopAsso_' . $table) as $id_shop => $value) {\n                $assos[] = (int) $id_shop;\n            }\n        } elseif (Shop::getTotalShops(false) == 1) {\n            // if we do not have the checkBox multishop, we can have an admin with only one shop and being in multishop\n            $assos[] = (int) Shop::getContextShopID();\n        }\n\n        return $assos;\n    }\n\n    /**\n     * Update the associations of shops.\n     *\n     * @param int $id_object\n     *\n     * @return bool|void\n     *\n     * @throws PrestaShopDatabaseException\n     */\n    protected function updateAssoShop($id_object)\n    {\n        if (!Shop::isFeatureActive()) {\n            return;\n        }\n\n        if (!Shop::isTableAssociated($this->table)) {\n            return;\n        }\n\n        $assos_data = $this->getSelectedAssoShop($this->table);\n\n        // Get list of shop id we want to exclude from asso deletion\n        $exclude_ids = $assos_data;\n        foreach (Db::getInstance()->executeS('SELECT id_shop FROM ' . _DB_PREFIX_ . 'shop') as $row) {\n            if (!$this->context->employee->hasAuthOnShop($row['id_shop'])) {\n                $exclude_ids[] = $row['id_shop'];\n            }\n        }\n        Db::getInstance()->delete($this->table . '_shop', '`' . bqSQL($this->identifier) . '` = ' . (int) $id_object . ($exclude_ids ? ' AND id_shop NOT IN (' . implode(', ', array_map('intval', $exclude_ids)) . ')' : ''));\n\n        $insert = array();\n        foreach ($assos_data as $id_shop) {\n            $insert[] = array(\n                $this->identifier => (int) $id_object,\n                'id_shop' => (int) $id_shop,\n            );\n        }\n\n        return Db::getInstance()->insert($this->table . '_shop', $insert, false, true, Db::INSERT_IGNORE);\n    }\n\n    /**\n     * @param mixed $value\n     * @param array $field\n     *\n     * @return bool\n     */\n    protected function validateField($value, $field)\n    {\n        if (isset($field['validation'])) {\n            $valid_method_exists = method_exists('Validate', $field['validation']);\n            if ((!isset($field['empty']) || !$field['empty'] || (isset($field['empty']) && $field['empty'] && $value)) && $valid_method_exists) {\n                $field_validation = $field['validation'];\n                if (!Validate::$field_validation($value)) {\n                    $this->errors[] = $this->trans('%s: Incorrect value', array($field['title']), 'Admin.Notifications.Error');\n\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Can be overridden.\n     */\n    public function beforeUpdateOptions()\n    {\n    }\n\n    /**\n     * Overload this method for custom checking.\n     *\n     * @param int $id Object id used for deleting images\n     *\n     * @return bool\n     */\n    protected function postImage($id)\n    {\n        if (isset($this->fieldImageSettings['name'], $this->fieldImageSettings['dir'])) {\n            return $this->uploadImage($id, $this->fieldImageSettings['name'], $this->fieldImageSettings['dir'] . '/');\n        } elseif (!empty($this->fieldImageSettings)) {\n            foreach ($this->fieldImageSettings as $image) {\n                if (isset($image['name'], $image['dir'])) {\n                    $this->uploadImage($id, $image['name'], $image['dir'] . '/');\n                }\n            }\n        }\n\n        return !count($this->errors) ? true : false;\n    }\n\n    /**\n     * @param int $id\n     * @param string $name\n     * @param string $dir\n     * @param string|bool $ext\n     * @param int|null $width\n     * @param int|null $height\n     *\n     * @return bool\n     */\n    protected function uploadImage($id, $name, $dir, $ext = false, $width = null, $height = null)\n    {\n        if (isset($_FILES[$name]['tmp_name']) && !empty($_FILES[$name]['tmp_name'])) {\n            // Delete old image\n            if (Validate::isLoadedObject($object = $this->loadObject())) {\n                $object->deleteImage();\n            } else {\n                return false;\n            }\n\n            // Check image validity\n            $max_size = isset($this->max_image_size) ? $this->max_image_size : 0;\n            if ($error = ImageManager::validateUpload($_FILES[$name], Tools::getMaxUploadSize($max_size))) {\n                $this->errors[] = $error;\n            }\n\n            $tmp_name = tempnam(_PS_TMP_IMG_DIR_, 'PS');\n            if (!$tmp_name) {\n                return false;\n            }\n\n            if (!move_uploaded_file($_FILES[$name]['tmp_name'], $tmp_name)) {\n                return false;\n            }\n\n            // Evaluate the memory required to resize the image: if it's too much, you can't resize it.\n            if (!ImageManager::checkImageMemoryLimit($tmp_name)) {\n                $this->errors[] = $this->trans('Due to memory limit restrictions, this image cannot be loaded. Please increase your memory_limit value via your server\\'s configuration settings.', array(), 'Admin.Notifications.Error');\n            }\n\n            // Copy new image\n            if (empty($this->errors) && !ImageManager::resize($tmp_name, _PS_IMG_DIR_ . $dir . $id . '.' . $this->imageType, (int) $width, (int) $height, ($ext ? $ext : $this->imageType))) {\n                $this->errors[] = $this->trans('An error occurred while uploading the image.', array(), 'Admin.Notifications.Error');\n            }\n\n            if (count($this->errors)) {\n                return false;\n            }\n            if ($this->afterImageUpload()) {\n                unlink($tmp_name);\n\n                return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Delete multiple items.\n     *\n     * @return bool true if success\n     */\n    protected function processBulkDelete()\n    {\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            $object = new $this->className();\n\n            if (isset($object->noZeroObject)) {\n                $objects_count = count(call_user_func(array($this->className, $object->noZeroObject)));\n\n                // Check if all object will be deleted\n                if ($objects_count <= 1 || count($this->boxes) == $objects_count) {\n                    $this->errors[] = $this->trans('You need at least one object.', array(), 'Admin.Notifications.Error') .\n                        ' <b>' . $this->table . '</b><br />' .\n                        $this->trans('You cannot delete all of the items.', array(), 'Admin.Notifications.Error');\n                }\n            } else {\n                $result = true;\n                foreach ($this->boxes as $id) {\n                    /** @var $to_delete ObjectModel */\n                    $to_delete = new $this->className($id);\n                    $delete_ok = true;\n                    if ($this->deleted) {\n                        $to_delete->deleted = 1;\n                        if (!$to_delete->update()) {\n                            $result = false;\n                            $delete_ok = false;\n                        }\n                    } elseif (!$to_delete->delete()) {\n                        $result = false;\n                        $delete_ok = false;\n                    }\n\n                    if ($delete_ok) {\n                        PrestaShopLogger::addLog(sprintf($this->l('%s deletion', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $to_delete->id, true, (int) $this->context->employee->id);\n                    } else {\n                        $this->errors[] = $this->trans('Can\\'t delete #%id%', array('%id%' => $id), 'Admin.Notifications.Error');\n                    }\n                }\n                if ($result) {\n                    $this->redirect_after = self::$currentIndex . '&conf=2&token=' . $this->token;\n                }\n                $this->errors[] = $this->trans('An error occurred while deleting this selection.', array(), 'Admin.Notifications.Error');\n            }\n        } else {\n            $this->errors[] = $this->trans('You must select at least one element to delete.', array(), 'Admin.Notifications.Error');\n        }\n\n        if (isset($result)) {\n            return $result;\n        } else {\n            return false;\n        }\n    }\n\n    protected function ajaxProcessOpenHelp()\n    {\n        $help_class_name = $_GET['controller'];\n        $popup_content = \"<!doctype html>\n        <html>\n            <head>\n                <meta charset='UTF-8'>\n                <title>PrestaShop Help</title>\n                <link href='//help.prestashop.com/css/help.css' rel='stylesheet'>\n                <link href='//fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet'>\n                <script src='\" . _PS_JS_DIR_ . \"jquery/jquery-1.11.0.min.js'></script>\n                <script src='\" . _PS_JS_DIR_ . \"admin.js'></script>\n                <script src='\" . _PS_JS_DIR_ . \"tools.js'></script>\n                <script>\n                    help_class_name='\" . addslashes($help_class_name) . \"';\n                    iso_user = '\" . addslashes($this->context->language->iso_code) . \"'\n                </script>\n                <script src='themes/default/js/help.js'></script>\n                <script>\n                    $(function(){\n                        initHelp();\n                    });\n                </script>\n            </head>\n            <body><div id='help-container' class='help-popup'></div></body>\n        </html>\";\n        die($popup_content);\n    }\n\n    /**\n     * Enable multiple items.\n     *\n     * @return bool true if success\n     */\n    protected function processBulkEnableSelection()\n    {\n        return $this->processBulkStatusSelection(1);\n    }\n\n    /**\n     * Disable multiple items.\n     *\n     * @return bool true if success\n     */\n    protected function processBulkDisableSelection()\n    {\n        return $this->processBulkStatusSelection(0);\n    }\n\n    /**\n     * Toggle status of multiple items.\n     *\n     * @param bool $status\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopException\n     */\n    protected function processBulkStatusSelection($status)\n    {\n        $result = true;\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            foreach ($this->boxes as $id) {\n                /** @var ObjectModel $object */\n                $object = new $this->className((int) $id);\n                $object->active = (int) $status;\n                $result &= $object->update();\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * @return bool\n     */\n    protected function processBulkAffectZone()\n    {\n        $result = false;\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            /** @var Country|State $object */\n            $object = new $this->className();\n            $result = $object->affectZoneToSelection(Tools::getValue($this->table . 'Box'), Tools::getValue('zone_to_affect'));\n\n            if ($result) {\n                $this->redirect_after = self::$currentIndex . '&conf=28&token=' . $this->token;\n            }\n            $this->errors[] = $this->trans('An error occurred while assigning a zone to the selection.', array(), 'Admin.Notifications.Error');\n        } else {\n            $this->errors[] = $this->trans('You must select at least one element to assign a new zone.', array(), 'Admin.Notifications.Error');\n        }\n\n        return $result;\n    }\n\n    /**\n     * Called before Add.\n     *\n     * @param ObjectModel $object Object\n     *\n     * @return bool\n     */\n    protected function beforeAdd($object)\n    {\n        return true;\n    }\n\n    /**\n     * Prepare the view to display the required fields form.\n     *\n     * @return string|void\n     */\n    public function displayRequiredFields()\n    {\n        if (!$this->access('add') || !$this->access('delete') || !$this->required_database) {\n            return;\n        }\n\n        $helper = new Helper();\n        $helper->currentIndex = self::$currentIndex;\n        $helper->token = $this->token;\n        $helper->override_folder = $this->override_folder;\n\n        return $helper->renderRequiredFields($this->className, $this->identifier, $this->required_fields);\n    }\n\n    /**\n     * Create a template from the override file, else from the base file.\n     *\n     * @param string $tpl_name filename\n     *\n     * @return Smarty_Internal_Template\n     */\n    public function createTemplate($tpl_name)\n    {\n        // Use override tpl if it exists\n        // If view access is denied, we want to use the default template that will be used to display an error\n        if ($this->viewAccess() && $this->override_folder) {\n            if (!Configuration::get('PS_DISABLE_OVERRIDES') && file_exists($this->context->smarty->getTemplateDir(1) . DIRECTORY_SEPARATOR . $this->override_folder . $tpl_name)) {\n                return $this->context->smarty->createTemplate($this->override_folder . $tpl_name, $this->context->smarty);\n            } elseif (file_exists($this->context->smarty->getTemplateDir(0) . 'controllers' . DIRECTORY_SEPARATOR . $this->override_folder . $tpl_name)) {\n                return $this->context->smarty->createTemplate('controllers' . DIRECTORY_SEPARATOR . $this->override_folder . $tpl_name, $this->context->smarty);\n            }\n        }\n\n        return $this->context->smarty->createTemplate($this->context->smarty->getTemplateDir(0) . $tpl_name, $this->context->smarty);\n    }\n\n    /**\n     * Shortcut to set up a json success payload.\n     *\n     * @param string $message Success message\n     */\n    public function jsonConfirmation($message)\n    {\n        $this->json = true;\n        $this->confirmations[] = $message;\n        if ($this->status === '') {\n            $this->status = 'ok';\n        }\n    }\n\n    /**\n     * Shortcut to set up a json error payload.\n     *\n     * @param string $message Error message\n     */\n    public function jsonError($message)\n    {\n        $this->json = true;\n        $this->errors[] = $message;\n        if ($this->status === '') {\n            $this->status = 'error';\n        }\n    }\n\n    /**\n     * @param string $file\n     * @param int $timeout\n     *\n     * @return bool\n     */\n    public function isFresh($file, $timeout = 604800)\n    {\n        if (($time = @filemtime(_PS_ROOT_DIR_ . $file)) && filesize(_PS_ROOT_DIR_ . $file) > 0) {\n            return (time() - $time) < $timeout;\n        }\n\n        return false;\n    }\n\n    /** @var bool */\n    protected static $is_prestashop_up = true;\n\n    /**\n     * @param string $file_to_refresh\n     * @param string $external_file\n     *\n     * @return bool\n     */\n    public function refresh($file_to_refresh, $external_file)\n    {\n        if (self::$is_prestashop_up && $content = Tools::file_get_contents($external_file)) {\n            return (bool) file_put_contents(_PS_ROOT_DIR_ . $file_to_refresh, $content);\n        }\n        self::$is_prestashop_up = false;\n\n        return false;\n    }\n\n    /**\n     * @param Module $module\n     * @param string $output_type\n     * @param string|null $back\n     * @param string|bool $install_source_tracking\n     */\n    public function fillModuleData(&$module, $output_type = 'link', $back = null, $install_source_tracking = false)\n    {\n        /** @var Module $obj */\n        $obj = null;\n        if ($module->onclick_option) {\n            $obj = new $module->name();\n        }\n        // Fill module data\n        $module->logo = '../../img/questionmark.png';\n\n        if (@filemtime(_PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . basename(_PS_MODULE_DIR_) . DIRECTORY_SEPARATOR . $module->name\n            . DIRECTORY_SEPARATOR . 'logo.gif')) {\n            $module->logo = 'logo.gif';\n        }\n        if (@filemtime(_PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . basename(_PS_MODULE_DIR_) . DIRECTORY_SEPARATOR . $module->name\n            . DIRECTORY_SEPARATOR . 'logo.png')) {\n            $module->logo = 'logo.png';\n        }\n\n        $link_admin_modules = $this->context->link->getAdminLink('AdminModules', true);\n\n        $module->options['install_url'] = $link_admin_modules . '&install=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name\n            . '&anchor=' . ucfirst($module->name) . ($install_source_tracking ? '&source=' . $install_source_tracking : '');\n        $module->options['update_url'] = $link_admin_modules . '&update=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name);\n        $module->options['uninstall_url'] = $link_admin_modules . '&uninstall=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name);\n\n        // free modules get their source tracking data here\n        $module->optionsHtml = $this->displayModuleOptions($module, $output_type, $back, $install_source_tracking);\n        // pay modules get their source tracking data here\n        if ($install_source_tracking && isset($module->addons_buy_url)) {\n            $module->addons_buy_url .= ($install_source_tracking ? '&utm_term=' . $install_source_tracking : '');\n        }\n\n        $module->options['uninstall_onclick'] = ((!$module->onclick_option) ?\n            ((empty($module->confirmUninstall)) ? 'return confirm(\\'' . $this->l('Do you really want to uninstall this module?') . '\\');' : 'return confirm(\\'' . addslashes($module->confirmUninstall) . '\\');') :\n            $obj->onclickOption('uninstall', $module->options['uninstall_url']));\n\n        if ((Tools::getValue('module_name') == $module->name || in_array($module->name, explode('|', Tools::getValue('modules_list')))) && (int) Tools::getValue('conf') > 0) {\n            $module->message = $this->_conf[(int) Tools::getValue('conf')];\n        }\n\n        if ((Tools::getValue('module_name') == $module->name || in_array($module->name, explode('|', Tools::getValue('modules_list')))) && (int) Tools::getValue('conf') > 0) {\n            unset($obj);\n        }\n    }\n\n    /** @var array */\n    protected $translationsTab = array();\n\n    /**\n     * Display modules list.\n     *\n     * @param Module $module\n     * @param string $output_type (link or select)\n     * @param string|null $back\n     * @param string|bool $install_source_tracking\n     *\n     * @return string|array\n     */\n    public function displayModuleOptions($module, $output_type = 'link', $back = null, $install_source_tracking = false)\n    {\n        if (!isset($module->enable_device)) {\n            $module->enable_device = Context::DEVICE_COMPUTER | Context::DEVICE_TABLET | Context::DEVICE_MOBILE;\n        }\n\n        $this->translationsTab['confirm_uninstall_popup'] = (isset($module->confirmUninstall) ? $module->confirmUninstall : $this->l('Do you really want to uninstall this module?'));\n        if (!isset($this->translationsTab['Disable this module'])) {\n            $this->translationsTab['Disable this module'] = $this->l('Disable this module');\n            $this->translationsTab['Enable this module for all shops'] = $this->l('Enable this module for all shops');\n            $this->translationsTab['Disable'] = $this->l('Disable');\n            $this->translationsTab['Enable'] = $this->l('Enable');\n            $this->translationsTab['Disable on mobiles'] = $this->l('Disable on mobiles');\n            $this->translationsTab['Disable on tablets'] = $this->l('Disable on tablets');\n            $this->translationsTab['Disable on computers'] = $this->l('Disable on computers');\n            $this->translationsTab['Display on mobiles'] = $this->l('Display on mobiles');\n            $this->translationsTab['Display on tablets'] = $this->l('Display on tablets');\n            $this->translationsTab['Display on computers'] = $this->l('Display on computers');\n            $this->translationsTab['Reset'] = $this->l('Reset');\n            $this->translationsTab['Configure'] = $this->l('Configure');\n            $this->translationsTab['Delete'] = $this->l('Delete');\n            $this->translationsTab['Install'] = $this->l('Install');\n            $this->translationsTab['Uninstall'] = $this->l('Uninstall');\n            $this->translationsTab['Would you like to delete the content related to this module ?'] = $this->l('Would you like to delete the content related to this module ?');\n            $this->translationsTab['This action will permanently remove the module from the server. Are you sure you want to do this?'] = $this->l('This action will permanently remove the module from the server. Are you sure you want to do this?');\n            $this->translationsTab['Remove from Favorites'] = $this->l('Remove from Favorites');\n            $this->translationsTab['Mark as Favorite'] = $this->l('Mark as Favorite');\n        }\n\n        $link_admin_modules = $this->context->link->getAdminLink('AdminModules', true);\n        $modules_options = array();\n\n        $configure_module = array(\n            'href' => $link_admin_modules . '&configure=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . urlencode($module->name),\n            'onclick' => $module->onclick_option && isset($module->onclick_option_content['configure']) ? $module->onclick_option_content['configure'] : '',\n            'title' => '',\n            'text' => $this->translationsTab['Configure'],\n            'cond' => $module->id && isset($module->is_configurable) && $module->is_configurable,\n            'icon' => 'wrench',\n        );\n\n        $desactive_module = array(\n            'href' => $link_admin_modules . '&module_name=' . urlencode($module->name) . '&' . ($module->active ? 'enable=0' : 'enable=1') . '&tab_module=' . $module->tab,\n            'onclick' => $module->active && $module->onclick_option && isset($module->onclick_option_content['desactive']) ? $module->onclick_option_content['desactive'] : '',\n            'title' => Shop::isFeatureActive() ? htmlspecialchars($module->active ? $this->translationsTab['Disable this module'] : $this->translationsTab['Enable this module for all shops']) : '',\n            'text' => $module->active ? $this->translationsTab['Disable'] : $this->translationsTab['Enable'],\n            'cond' => $module->id,\n            'icon' => 'off',\n        );\n        $link_reset_module = $link_admin_modules . '&module_name=' . urlencode($module->name) . '&reset&tab_module=' . $module->tab;\n\n        $is_reset_ready = false;\n        if (Validate::isModuleName($module->name)) {\n            if (method_exists(Module::getInstanceByName($module->name), 'reset')) {\n                $is_reset_ready = true;\n            }\n        }\n\n        $reset_module = array(\n            'href' => $link_reset_module,\n            'onclick' => $module->onclick_option && isset($module->onclick_option_content['reset']) ? $module->onclick_option_content['reset'] : '',\n            'title' => '',\n            'text' => $this->translationsTab['Reset'],\n            'cond' => $module->id && $module->active,\n            'icon' => 'undo',\n            'class' => ($is_reset_ready ? 'reset_ready' : ''),\n        );\n\n        $delete_module = array(\n            'href' => $link_admin_modules . '&delete=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . urlencode($module->name),\n            'onclick' => $module->onclick_option && isset($module->onclick_option_content['delete']) ? $module->onclick_option_content['delete'] : 'return confirm(\\'' . $this->translationsTab['This action will permanently remove the module from the server. Are you sure you want to do this?'] . '\\');',\n            'title' => '',\n            'text' => $this->translationsTab['Delete'],\n            'cond' => true,\n            'icon' => 'trash',\n            'class' => 'text-danger',\n        );\n\n        $display_mobile = array(\n            'href' => $link_admin_modules . '&module_name=' . urlencode($module->name) . '&' . ($module->enable_device & Context::DEVICE_MOBILE ? 'disable_device' : 'enable_device') . '=' . Context::DEVICE_MOBILE . '&tab_module=' . $module->tab,\n            'onclick' => '',\n            'title' => htmlspecialchars($module->enable_device & Context::DEVICE_MOBILE ? $this->translationsTab['Disable on mobiles'] : $this->translationsTab['Display on mobiles']),\n            'text' => $module->enable_device & Context::DEVICE_MOBILE ? $this->translationsTab['Disable on mobiles'] : $this->translationsTab['Display on mobiles'],\n            'cond' => $module->id,\n            'icon' => 'mobile',\n        );\n\n        $display_tablet = array(\n            'href' => $link_admin_modules . '&module_name=' . urlencode($module->name) . '&' . ($module->enable_device & Context::DEVICE_TABLET ? 'disable_device' : 'enable_device') . '=' . Context::DEVICE_TABLET . '&tab_module=' . $module->tab,\n            'onclick' => '',\n            'title' => htmlspecialchars($module->enable_device & Context::DEVICE_TABLET ? $this->translationsTab['Disable on tablets'] : $this->translationsTab['Display on tablets']),\n            'text' => $module->enable_device & Context::DEVICE_TABLET ? $this->translationsTab['Disable on tablets'] : $this->translationsTab['Display on tablets'],\n            'cond' => $module->id,\n            'icon' => 'tablet',\n        );\n\n        $display_computer = array(\n            'href' => $link_admin_modules . '&module_name=' . urlencode($module->name) . '&' . ($module->enable_device & Context::DEVICE_COMPUTER ? 'disable_device' : 'enable_device') . '=' . Context::DEVICE_COMPUTER . '&tab_module=' . $module->tab,\n            'onclick' => '',\n            'title' => htmlspecialchars($module->enable_device & Context::DEVICE_COMPUTER ? $this->translationsTab['Disable on computers'] : $this->translationsTab['Display on computers']),\n            'text' => $module->enable_device & Context::DEVICE_COMPUTER ? $this->translationsTab['Disable on computers'] : $this->translationsTab['Display on computers'],\n            'cond' => $module->id,\n            'icon' => 'desktop',\n        );\n\n        $install = array(\n            'href' => $link_admin_modules . '&install=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name)\n                . (null !== $back ? '&back=' . urlencode($back) : '') . ($install_source_tracking ? '&source=' . $install_source_tracking : ''),\n            'onclick' => '',\n            'title' => $this->translationsTab['Install'],\n            'text' => $this->translationsTab['Install'],\n            'cond' => $module->id,\n            'icon' => 'plus-sign-alt',\n        );\n\n        $uninstall = array(\n            'href' => $link_admin_modules . '&uninstall=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name) . (null !== $back ? '&back=' . urlencode($back) : ''),\n            'onclick' => (isset($module->onclick_option_content['uninstall']) ? $module->onclick_option_content['uninstall'] : 'return confirm(\\'' . $this->translationsTab['confirm_uninstall_popup'] . '\\');'),\n            'title' => $this->translationsTab['Uninstall'],\n            'text' => $this->translationsTab['Uninstall'],\n            'cond' => $module->id,\n            'icon' => 'minus-sign-alt',\n        );\n\n        $remove_from_favorite = array(\n            'href' => '#',\n            'class' => 'action_unfavorite toggle_favorite',\n            'onclick' => '',\n            'title' => $this->translationsTab['Remove from Favorites'],\n            'text' => $this->translationsTab['Remove from Favorites'],\n            'cond' => $module->id,\n            'icon' => 'star',\n            'data-value' => '0',\n            'data-module' => $module->name,\n        );\n\n        $mark_as_favorite = array(\n            'href' => '#',\n            'class' => 'action_favorite toggle_favorite',\n            'onclick' => '',\n            'title' => $this->translationsTab['Mark as Favorite'],\n            'text' => $this->translationsTab['Mark as Favorite'],\n            'cond' => $module->id,\n            'icon' => 'star',\n            'data-value' => '1',\n            'data-module' => $module->name,\n        );\n\n        $update = array(\n            'href' => $module->options['update_url'],\n            'onclick' => '',\n            'title' => 'Update it!',\n            'text' => 'Update it!',\n            'icon' => 'refresh',\n            'cond' => $module->id,\n        );\n\n        $divider = array(\n            'href' => '#',\n            'onclick' => '',\n            'title' => 'divider',\n            'text' => 'divider',\n            'cond' => $module->id,\n        );\n\n        if (isset($module->version_addons) && $module->version_addons) {\n            $modules_options[] = $update;\n        }\n\n        if ($module->active) {\n            $modules_options[] = $configure_module;\n            $modules_options[] = $desactive_module;\n            $modules_options[] = $display_mobile;\n            $modules_options[] = $display_tablet;\n            $modules_options[] = $display_computer;\n        } else {\n            $modules_options[] = $desactive_module;\n            $modules_options[] = $configure_module;\n        }\n\n        $modules_options[] = $reset_module;\n\n        if ($output_type == 'select') {\n            if (!$module->id) {\n                $modules_options[] = $install;\n            } else {\n                $modules_options[] = $uninstall;\n            }\n        } elseif ($output_type == 'array') {\n            if ($module->id) {\n                $modules_options[] = $uninstall;\n            }\n        }\n\n        if (isset($module->preferences, $module->preferences['favorite']) && $module->preferences['favorite'] == 1) {\n            $remove_from_favorite['style'] = '';\n            $mark_as_favorite['style'] = 'display:none;';\n            $modules_options[] = $remove_from_favorite;\n            $modules_options[] = $mark_as_favorite;\n        } else {\n            $mark_as_favorite['style'] = '';\n            $remove_from_favorite['style'] = 'display:none;';\n            $modules_options[] = $remove_from_favorite;\n            $modules_options[] = $mark_as_favorite;\n        }\n\n        if ($module->id == 0) {\n            $install['cond'] = 1;\n            $install['flag_install'] = 1;\n            $modules_options[] = $install;\n        }\n        $modules_options[] = $divider;\n        $modules_options[] = $delete_module;\n\n        $return = '';\n        foreach ($modules_options as $option_name => $option) {\n            if ($option['cond']) {\n                if ($output_type == 'link') {\n                    $return .= '<li><a class=\"' . $option_name . ' action_module';\n                    $return .= '\" href=\"' . $option['href'] . (null !== $back ? '&back=' . urlencode($back) : '') . '\"';\n                    $return .= ' onclick=\"' . $option['onclick'] . '\"  title=\"' . $option['title'] . '\"><i class=\"icon-' . (isset($option['icon']) && $option['icon'] ? $option['icon'] : 'cog') . '\"></i>&nbsp;' . $option['text'] . '</a></li>';\n                } elseif ($output_type == 'array') {\n                    if (!is_array($return)) {\n                        $return = array();\n                    }\n\n                    $html = '<a class=\"';\n\n                    $is_install = isset($option['flag_install']) ? true : false;\n\n                    if (isset($option['class'])) {\n                        $html .= $option['class'];\n                    }\n                    if ($is_install) {\n                        $html .= ' btn btn-success';\n                    }\n                    if (!$is_install && count($return) == 0) {\n                        $html .= ' btn btn-default';\n                    }\n\n                    $html .= '\"';\n\n                    if (isset($option['data-value'])) {\n                        $html .= ' data-value=\"' . $option['data-value'] . '\"';\n                    }\n\n                    if (isset($option['data-module'])) {\n                        $html .= ' data-module=\"' . $option['data-module'] . '\"';\n                    }\n\n                    if (isset($option['style'])) {\n                        $html .= ' style=\"' . $option['style'] . '\"';\n                    }\n\n                    $html .= ' href=\"' . htmlentities($option['href']) . (null !== $back ? '&back=' . urlencode($back) : '') . '\" onclick=\"' . $option['onclick'] . '\"  title=\"' . $option['title'] . '\"><i class=\"icon-' . (isset($option['icon']) && $option['icon'] ? $option['icon'] : 'cog') . '\"></i> ' . $option['text'] . '</a>';\n                    $return[] = $html;\n                } elseif ($output_type == 'select') {\n                    $return .= '<option id=\"' . $option_name . '\" data-href=\"' . htmlentities($option['href']) . (null !== $back ? '&back=' . urlencode($back) : '') . '\" data-onclick=\"' . $option['onclick'] . '\">' . $option['text'] . '</option>';\n                }\n            }\n        }\n\n        if ($output_type == 'select') {\n            $return = '<select id=\"select_' . $module->name . '\">' . $return . '</select>';\n        }\n\n        return $return;\n    }\n\n    public function ajaxProcessGetModuleQuickView()\n    {\n        $modules = Module::getModulesOnDisk();\n\n        foreach ($modules as $module) {\n            if ($module->name == Tools::getValue('module')) {\n                break;\n            }\n        }\n\n        $url = $module->url;\n\n        if (isset($module->type) && ($module->type == 'addonsPartner' || $module->type == 'addonsNative')) {\n            $url = $this->context->link->getAdminLink('AdminModules') . '&install=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name);\n        }\n\n        $this->context->smarty->assign(array(\n            'displayName' => $module->displayName,\n            'image' => $module->image,\n            'nb_rates' => (int) $module->nb_rates[0],\n            'avg_rate' => (int) $module->avg_rate[0],\n            'badges' => $module->badges,\n            'compatibility' => $module->compatibility,\n            'description_full' => $module->description_full,\n            'additional_description' => $module->additional_description,\n            'is_addons_partner' => (isset($module->type) && ($module->type == 'addonsPartner' || $module->type == 'addonsNative')),\n            'url' => $url,\n            'price' => $module->price,\n        ));\n        // Fetch the translations in the right place - they are not defined by our current controller!\n        Context::getContext()->override_controller_name_for_translations = 'AdminModules';\n        $this->smartyOutputContent('controllers/modules/quickview.tpl');\n        die(1);\n    }\n\n    /**\n     * Add an entry to the meta title.\n     *\n     * @param string $entry new entry\n     */\n    public function addMetaTitle($entry)\n    {\n        // Only add entry if the meta title was not forced.\n        if (is_array($this->meta_title)) {\n            $this->meta_title[] = $entry;\n        }\n    }\n\n    /**\n     * Set action.\n     *\n     * @param string $action\n     */\n    public function setAction($action)\n    {\n        $this->action = $action;\n    }\n\n    /**\n     * Set IdObject.\n     *\n     * @param int $id_object\n     */\n    public function setIdObject($id_object)\n    {\n        $this->id_object = (int) $id_object;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTabSlug()\n    {\n        if (empty($this->tabSlug)) {\n            $this->tabSlug = Access::findSlugByIdTab($this->id);\n        }\n\n        return $this->tabSlug;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function buildContainer()\n    {\n        return ContainerBuilder::getContainer('admin', _PS_MODE_DEV_);\n    }\n\n    /**\n     * Return the type of authorization on module page.\n     *\n     * @return int(integer)\n     */\n    public function authorizationLevel()\n    {\n        if (\n            Access::isGranted(\n                'ROLE_MOD_TAB_' . strtoupper($this->controller_name) . '_DELETE',\n                $this->context->employee->id_profile\n            )\n        ) {\n            return AdminController::LEVEL_DELETE;\n        } elseif (\n            Access::isGranted(\n                'ROLE_MOD_TAB_' . strtoupper($this->controller_name) . '_CREATE',\n                $this->context->employee->id_profile\n            )\n        ) {\n            return AdminController::LEVEL_ADD;\n        } elseif (\n            Access::isGranted(\n                'ROLE_MOD_TAB_' . strtoupper($this->controller_name) . '_UPDATE',\n                $this->context->employee->id_profile\n            )\n        ) {\n            return AdminController::LEVEL_EDIT;\n        } elseif (\n            Access::isGranted(\n                'ROLE_MOD_TAB_' . strtoupper($this->controller_name) . '_READ',\n                $this->context->employee->id_profile\n            )\n        ) {\n            return AdminController::LEVEL_VIEW;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Get the url of the first active sub-tab.\n     *\n     * @param array[] $subtabs\n     *\n     * @return string Url, or empty if no active sub-tab\n     */\n    private function getTabLinkFromSubTabs(array $subtabs)\n    {\n        foreach ($subtabs as $tab) {\n            if ($tab['active']) {\n                return $tab['href'];\n            }\n        }\n\n        return '';\n    }\n\n    /**\n     * Prepare price specifications to display cldr prices in javascript context.\n     *\n     * @param Context $context\n     *\n     * @return array\n     */\n    private function preparePriceSpecifications(Context $context)\n    {\n        /* @var Currency */\n        $currency = $context->currency;\n        /* @var PriceSpecification */\n        $priceSpecification = $context->getCurrentLocale()->getPriceSpecification($currency->iso_code);\n        if (empty($priceSpecification)) {\n            return [];\n        }\n\n        return array_merge(\n            ['symbol' => $priceSpecification->getSymbolsByNumberingSystem(Locale::NUMBERING_SYSTEM_LATIN)->toArray()],\n            $priceSpecification->toArray()\n        );\n    }\n\n    /**\n     * Prepare number specifications to display cldr numbers in javascript context.\n     *\n     * @param Context $context\n     *\n     * @return array\n     */\n    private function prepareNumberSpecifications(Context $context)\n    {\n        /* @var NumberSpecification */\n        $numberSpecification = $context->getCurrentLocale()->getNumberSpecification();\n        if (empty($numberSpecification)) {\n            return [];\n        }\n\n        return array_merge(\n            ['symbol' => $numberSpecification->getSymbolsByNumberingSystem(Locale::NUMBERING_SYSTEM_LATIN)->toArray()],\n            $numberSpecification->toArray()\n        );\n    }\n\n    /**\n     * Set if anonymous is allowed to run this controller\n     *\n     * @param bool $value\n     *\n     * @return bool\n     */\n    protected function setAllowAnonymous($value)\n    {\n        $this->allowAnonymous = (bool) $value;\n    }\n\n    /**\n     * Return if an anonymous is allowed to run this controller\n     *\n     * @return bool\n     */\n    protected function isAnonymousAllowed()\n    {\n        return $this->allowAnonymous;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse PrestaShop\\PrestaShop\\Adapter\\ContainerBuilder;\nuse PrestaShop\\PrestaShop\\Core\\Feature\\TokenInUrls;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Locale;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Specification\\Price as PriceSpecification;\nuse PrestaShop\\PrestaShop\\Core\\Localization\\Specification\\Number as NumberSpecification;\n\nclass AdminControllerCore extends Controller\n{\n    /** @var string */\n    public $path;\n\n    /** @var string */\n    public static $currentIndex;\n\n    /** @var string */\n    public $content;\n\n    /** @var array */\n    public $warnings = array();\n\n    /** @var array */\n    public $informations = array();\n\n    /** @var array */\n    public $confirmations = array();\n\n    /** @var string|false */\n    public $shopShareDatas = false;\n\n    /** @var array */\n    public $_languages = array();\n\n    /** @var int */\n    public $default_form_language;\n\n    /** @var bool */\n    public $allow_employee_form_lang;\n\n    /** @var string */\n    public $layout = 'layout.tpl';\n\n    /** @var bool */\n    public $bootstrap = false;\n\n    /** @var string|array */\n    protected $meta_title = array();\n\n    /** @var string */\n    public $template = 'content.tpl';\n\n    /** @var string Associated table name */\n    public $table = 'configuration';\n\n    /** @var string */\n    public $list_id;\n\n    /** @var string|false Object identifier inside the associated table */\n    protected $identifier = false;\n\n    /** @var string */\n    protected $identifier_name = 'name';\n\n    /** @var string Associated object class name */\n    public $className;\n\n    /** @var array */\n    public $tabAccess;\n\n    /** @var int Tab id */\n    public $id = -1;\n\n    /** @var bool */\n    public $required_database = false;\n\n    /** @var string Security token */\n    public $token;\n\n    /** @var string \"shop\" or \"group_shop\" */\n    public $shopLinkType;\n\n    /** @var string Default ORDER BY clause when $_orderBy is not defined */\n    protected $_defaultOrderBy = false;\n\n    /** @var string */\n    protected $_defaultOrderWay = 'ASC';\n\n    /** @var array */\n    public $tpl_form_vars = array();\n\n    /** @var array */\n    public $tpl_list_vars = array();\n\n    /** @var array */\n    public $tpl_delete_link_vars = array();\n\n    /** @var array */\n    public $tpl_option_vars = array();\n\n    /** @var array */\n    public $tpl_view_vars = array();\n\n    /** @var array */\n    public $tpl_required_fields_vars = array();\n\n    /** @var string|null */\n    public $base_tpl_view = null;\n\n    /** @var string|null */\n    public $base_tpl_form = null;\n\n    /** @var bool If you want more fieldsets in the form */\n    public $multiple_fieldsets = false;\n\n    /** @var array|false */\n    public $fields_value = false;\n\n    /** @var array Errors displayed after post processing */\n    public $errors = array();\n\n    /** @var bool Define if the header of the list contains filter and sorting links or not */\n    protected $list_simple_header;\n\n    /** @var array List to be generated */\n    protected $fields_list;\n\n    /** @var array Modules list filters */\n    protected $filter_modules_list = null;\n\n    /** @var array Modules list filters */\n    protected $modules_list = array();\n\n    /** @var array Edit form to be generated */\n    protected $fields_form;\n\n    /** @var array Override of $fields_form */\n    protected $fields_form_override;\n\n    /** @var string Override form action */\n    protected $submit_action;\n\n    /** @var array List of option forms to be generated */\n    protected $fields_options = array();\n\n    /** @var string */\n    protected $shopLink;\n\n    /** @var string SQL query */\n    protected $_listsql = '';\n\n    /** @var array Cache for query results */\n    protected $_list = array();\n\n    /** @var string MySQL error */\n    protected $_list_error;\n\n    /** @var string|array Toolbar title */\n    protected $toolbar_title;\n\n    /** @var array List of toolbar buttons */\n    protected $toolbar_btn = null;\n\n    /** @var bool Scrolling toolbar */\n    protected $toolbar_scroll = true;\n\n    /** @var bool Set to false to hide toolbar and page title */\n    protected $show_toolbar = true;\n\n    /** @var bool Set to true to show toolbar and page title for options */\n    protected $show_toolbar_options = false;\n\n    /** @var int Number of results in list */\n    protected $_listTotal = 0;\n\n    /** @var bool Automatically join language table if true */\n    public $lang = false;\n\n    /** @var array WHERE clause determined by filter fields */\n    protected $_filter;\n\n    /** @var string */\n    protected $_filterHaving;\n\n    /** @var array Temporary SQL table WHERE clause determined by filter fields */\n    protected $_tmpTableFilter = '';\n\n    /** @var array Number of results in list per page (used in select field) */\n    protected $_pagination = array(20, 50, 100, 300, 1000);\n\n    /** @var int Default number of results in list per page */\n    protected $_default_pagination = 50;\n\n    /** @var string ORDER BY clause determined by field/arrows in list header */\n    protected $_orderBy;\n\n    /** @var string Order way (ASC, DESC) determined by arrows in list header */\n    protected $_orderWay;\n\n    /** @var array List of available actions for each list row - default actions are view, edit, delete, duplicate */\n    protected $actions_available = array('view', 'edit', 'duplicate', 'delete');\n\n    /** @var array List of required actions for each list row */\n    protected $actions = array();\n\n    /** @var array List of row ids associated with a given action for witch this action have to not be available */\n    protected $list_skip_actions = array();\n\n    /** @var bool Don't show header & footer */\n    protected $lite_display = false;\n\n    /** @var bool List content lines are clickable if true */\n    protected $list_no_link = false;\n\n    /** @var bool */\n    protected $allow_export = false;\n\n    /** @var array Cache for translations */\n    public static $cache_lang = array();\n\n    /** @var array Required_fields to display in the Required Fields form */\n    public $required_fields = array();\n\n    /** @var HelperList */\n    protected $helper;\n\n    /** @var bool */\n    private $allowAnonymous = false;\n\n    /** @var int DELETE access level */\n    const LEVEL_DELETE = 4;\n\n    /** @var int ADD access level */\n    const LEVEL_ADD = 3;\n\n    /** @var int EDIT access level */\n    const LEVEL_EDIT = 2;\n\n    /** @var int VIEW access level */\n    const LEVEL_VIEW = 1;\n\n    /**\n     * Actions to execute on multiple selections.\n     *\n     * Usage:\n     *\n     * array(\n     *      'actionName' => array(\n     *      'text' => $this->l('Message displayed on the submit button (mandatory)'),\n     *      'confirm' => $this->l('If set, this confirmation message will pop-up (optional)')),\n     *      'anotherAction' => array(...)\n     * );\n     *\n     * If your action is named 'actionName', you need to have a method named bulkactionName() that will be executed when the button is clicked.\n     *\n     * @var array\n     */\n    protected $bulk_actions;\n\n    /** @var array Ids of the rows selected */\n    protected $boxes;\n\n    /** @var string Do not automatically select * anymore but select only what is necessary */\n    protected $explicitSelect = false;\n\n    /** @var string Add fields into data query to display list */\n    protected $_select;\n\n    /** @var string Join tables into data query to display list */\n    protected $_join;\n\n    /** @var string Add conditions into data query to display list */\n    protected $_where;\n\n    /** @var string Group rows into data query to display list */\n    protected $_group;\n\n    /** @var string Having rows into data query to display list */\n    protected $_having;\n\n    /** @var string Use SQL_CALC_FOUND_ROWS / FOUND_ROWS to count the number of records */\n    protected $_use_found_rows = true;\n\n    /** @var bool */\n    protected $is_cms = false;\n\n    /** @var string Identifier to use for changing positions in lists (can be omitted if positions cannot be changed) */\n    protected $position_identifier;\n\n    /** @var string|int */\n    protected $position_group_identifier;\n\n    /** @var bool Table records are not deleted but marked as deleted if set to true */\n    protected $deleted = false;\n\n    /** @var bool Is a list filter set */\n    protected $filter;\n\n    /** @var bool */\n    protected $noLink;\n\n    /** @var bool|null */\n    protected $specificConfirmDelete = null;\n\n    /** @var bool */\n    protected $colorOnBackground;\n\n    /** @var bool If true, activates color on hover */\n    protected $row_hover = true;\n\n    /** @var string Action to perform : 'edit', 'view', 'add', ... */\n    protected $action;\n\n    /** @var string */\n    protected $display;\n\n    /** @var array */\n    protected $tab_modules_list = array('default_list' => array(), 'slider_list' => array());\n\n    /** @var string */\n    public $tpl_folder;\n\n    /** @var string */\n    protected $bo_theme;\n\n    /** @var bool Redirect or not after a creation */\n    protected $_redirect = true;\n\n    /** @var array Name and directory where class image are located */\n    public $fieldImageSettings = array();\n\n    /** @var string Image type */\n    public $imageType = 'jpg';\n\n    /** @var ObjectModel Instantiation of the class associated with the AdminController */\n    protected $object;\n\n    /** @var int Current object ID */\n    protected $id_object;\n\n    /** @var string Current controller name without suffix */\n    public $controller_name;\n\n    /** @var int */\n    public $multishop_context = -1;\n\n    /** @var false */\n    public $multishop_context_group = true;\n\n    /** @var array Current breadcrumb position as an array of tab names */\n    protected $breadcrumbs;\n\n    /** @var bool Bootstrap variable */\n    public $show_page_header_toolbar = false;\n\n    /** @var string Bootstrap variable */\n    public $page_header_toolbar_title;\n\n    /** @var array|Traversable Bootstrap variable */\n    public $page_header_toolbar_btn = array();\n\n    /** @var bool Bootstrap variable */\n    public $show_form_cancel_button;\n\n    /** @var string */\n    public $admin_webpath;\n\n    /** @var array */\n    protected $list_natives_modules = array();\n\n    /** @var array */\n    protected $list_partners_modules = array();\n\n    /** @var array */\n    public $modals = array();\n\n    /** @var bool */\n    protected $logged_on_addons = false;\n\n    /** @var bool if logged employee has access to AdminImport */\n    protected $can_import = false;\n\n    /** @var string */\n    protected $tabSlug;\n\n    public function __construct($forceControllerName = '', $default_theme_name = 'default')\n    {\n        global $timer_start;\n        $this->timer_start = $timer_start;\n\n        $this->controller_type = 'admin';\n        $this->controller_name = !empty($forceControllerName) ? $forceControllerName : get_class($this);\n        if (strpos($this->controller_name, 'ControllerOverride')) {\n            $this->controller_name = substr($this->controller_name, 0, -18);\n        }\n        if (strpos($this->controller_name, 'Controller')) {\n            $this->controller_name = substr($this->controller_name, 0, -10);\n        }\n        parent::__construct();\n\n        if ($this->multishop_context == -1) {\n            $this->multishop_context = Shop::CONTEXT_ALL | Shop::CONTEXT_GROUP | Shop::CONTEXT_SHOP;\n        }\n\n        if (defined('_PS_BO_ALL_THEMES_DIR_')) {\n            if (defined('_PS_BO_DEFAULT_THEME_') && _PS_BO_DEFAULT_THEME_\n                && @filemtime(_PS_BO_ALL_THEMES_DIR_ . _PS_BO_DEFAULT_THEME_ . DIRECTORY_SEPARATOR . 'template')) {\n                $default_theme_name = _PS_BO_DEFAULT_THEME_;\n            }\n\n            $this->bo_theme = $default_theme_name;\n            if (!@filemtime(_PS_BO_ALL_THEMES_DIR_ . $this->bo_theme . DIRECTORY_SEPARATOR . 'template')) {\n                $this->bo_theme = 'default';\n            }\n\n            $this->context->employee->bo_theme = (\n                Validate::isLoadedObject($this->context->employee)\n                && $this->context->employee->bo_theme\n            ) ? $this->context->employee->bo_theme : $this->bo_theme;\n\n            $this->bo_css = (\n                Validate::isLoadedObject($this->context->employee)\n                && $this->context->employee->bo_css\n            ) ? $this->context->employee->bo_css : 'theme.css';\n            $this->context->employee->bo_css = $this->bo_css;\n\n            $adminThemeCSSFile = _PS_BO_ALL_THEMES_DIR_ . $this->bo_theme . DIRECTORY_SEPARATOR . 'public' . DIRECTORY_SEPARATOR . $this->bo_css;\n\n            if (file_exists($adminThemeCSSFile)) {\n                $this->bo_css = 'theme.css';\n            }\n\n            $this->context->smarty->setTemplateDir(array(\n                _PS_BO_ALL_THEMES_DIR_ . $this->bo_theme . DIRECTORY_SEPARATOR . 'template',\n                _PS_OVERRIDE_DIR_ . 'controllers' . DIRECTORY_SEPARATOR . 'admin' . DIRECTORY_SEPARATOR . 'templates',\n            ));\n        }\n\n        $this->id = Tab::getIdFromClassName($this->controller_name);\n        $this->token = Tools::getAdminToken($this->controller_name . (int) $this->id . (int) $this->context->employee->id);\n\n        $this->_conf = array(\n            1 => $this->trans('Successful deletion.', array(), 'Admin.Notifications.Success'),\n            2 => $this->trans('The selection has been successfully deleted.', array(), 'Admin.Notifications.Success'),\n            3 => $this->trans('Successful creation.', array(), 'Admin.Notifications.Success'),\n            4 => $this->trans('Successful update.', array(), 'Admin.Notifications.Success'),\n            5 => $this->trans('The status has been successfully updated.', array(), 'Admin.Notifications.Success'),\n            6 => $this->trans('The settings have been successfully updated.', array(), 'Admin.Notifications.Success'),\n            7 => $this->trans('The image was successfully deleted.', array(), 'Admin.Notifications.Success'),\n            8 => $this->trans('The module was successfully downloaded.', array(), 'Admin.Modules.Notification'),\n            9 => $this->trans('The thumbnails were successfully regenerated.', array(), 'Admin.Notifications.Success'),\n            10 => $this->trans('The message was successfully sent to the customer.', array(), 'Admin.Orderscustomers.Notification'),\n            11 => $this->trans('Comment successfully added.', array(), 'Admin.Notifications.Success'),\n            12 => $this->trans('Module(s) installed successfully.', array(), 'Admin.Modules.Notification'),\n            13 => $this->trans('Module(s) uninstalled successfully.', array(), 'Admin.Modules.Notification'),\n            14 => $this->trans('The translation was successfully copied.', array(), 'Admin.International.Notification'),\n            15 => $this->trans('The translations have been successfully added.', array(), 'Admin.International.Notification'),\n            16 => $this->trans('The module transplanted successfully to the hook.', array(), 'Admin.Modules.Notification'),\n            17 => $this->trans('The module was successfully removed from the hook.', array(), 'Admin.Modules.Notification'),\n            18 => $this->trans('Successful upload.', array(), 'Admin.Notifications.Success'),\n            19 => $this->trans('Duplication was completed successfully.', array(), 'Admin.Notifications.Success'),\n            20 => $this->trans('The translation was added successfully, but the language has not been created.', array(), 'Admin.International.Notification'),\n            21 => $this->trans('Module reset successfully.', array(), 'Admin.Modules.Notification'),\n            22 => $this->trans('Module deleted successfully.', array(), 'Admin.Modules.Notification'),\n            23 => $this->trans('Localization pack imported successfully.', array(), 'Admin.International.Notification'),\n            24 => $this->trans('Localization pack imported successfully.', array(), 'Admin.International.Notification'),\n            25 => $this->trans('The selected images have successfully been moved.', array(), 'Admin.Notifications.Success'),\n            26 => $this->trans('Your cover image selection has been saved.', array(), 'Admin.Notifications.Success'),\n            27 => $this->trans('The image\\'s shop association has been modified.', array(), 'Admin.Notifications.Success'),\n            28 => $this->trans('A zone has been assigned to the selection successfully.', array(), 'Admin.Notifications.Success'),\n            29 => $this->trans('Successful upgrade.', array(), 'Admin.Notifications.Success'),\n            30 => $this->trans('A partial refund was successfully created.', array(), 'Admin.Orderscustomers.Notification'),\n            31 => $this->trans('The discount was successfully generated.', array(), 'Admin.Catalog.Notification'),\n            32 => $this->trans('Successfully signed in to PrestaShop Addons.', array(), 'Admin.Modules.Notification'),\n        );\n\n        $this->_error = array(\n            1 => $this->trans(\n                'The root category of the shop %shop% is not associated with the current shop. You can\\'t access this page. Please change the root category of the shop.',\n                array(\n                    '%shop%' => $this->context->shop->name,\n                ),\n                'Admin.Catalog.Notification'\n            ),\n        );\n\n        if (!$this->identifier) {\n            $this->identifier = 'id_' . $this->table;\n        }\n        if (!$this->_defaultOrderBy) {\n            $this->_defaultOrderBy = $this->identifier;\n        }\n\n        // Fix for homepage\n        if ($this->controller_name == 'AdminDashboard') {\n            $_POST['token'] = $this->token;\n        }\n\n        if (!Shop::isFeatureActive()) {\n            $this->shopLinkType = '';\n        }\n\n        //$this->base_template_folder = _PS_BO_ALL_THEMES_DIR_.$this->bo_theme.'/template';\n        $this->override_folder = Tools::toUnderscoreCase(substr($this->controller_name, 5)) . '/';\n        // Get the name of the folder containing the custom tpl files\n        $this->tpl_folder = Tools::toUnderscoreCase(substr($this->controller_name, 5)) . '/';\n\n        $this->initShopContext();\n\n        if (defined('_PS_ADMIN_DIR_')) {\n            $this->admin_webpath = str_ireplace(_PS_CORE_DIR_, '', _PS_ADMIN_DIR_);\n            $this->admin_webpath = preg_replace('/^' . preg_quote(DIRECTORY_SEPARATOR, '/') . '/', '', $this->admin_webpath);\n        }\n\n        // Check if logged on Addons\n        $this->logged_on_addons = false;\n        if (isset($this->context->cookie->username_addons, $this->context->cookie->password_addons) && !empty($this->context->cookie->username_addons) && !empty($this->context->cookie->password_addons)) {\n            $this->logged_on_addons = true;\n        }\n\n        // Set context mode\n        if (defined('_PS_HOST_MODE_') && _PS_HOST_MODE_) {\n            if (isset($this->context->cookie->is_contributor) && (int) $this->context->cookie->is_contributor === 1) {\n                $this->context->mode = Context::MODE_HOST_CONTRIB;\n            } else {\n                $this->context->mode = Context::MODE_HOST;\n            }\n        } elseif (isset($this->context->cookie->is_contributor) && (int) $this->context->cookie->is_contributor === 1) {\n            $this->context->mode = Context::MODE_STD_CONTRIB;\n        } else {\n            $this->context->mode = Context::MODE_STD;\n        }\n\n        //* Check if logged employee has access to AdminImport controller */\n        $import_access = Profile::getProfileAccess($this->context->employee->id_profile, Tab::getIdFromClassName('AdminImport'));\n        if (is_array($import_access) && isset($import_access['view']) && $import_access['view'] == 1) {\n            $this->can_import = true;\n        }\n\n        $this->context->smarty->assign(array(\n            'context_mode' => $this->context->mode,\n            'logged_on_addons' => $this->logged_on_addons,\n            'can_import' => $this->can_import,\n        ));\n    }\n\n    /**\n     * Set breadcrumbs array for the controller page.\n     *\n     * @param int|null $tab_id\n     * @param array|null $tabs\n     */\n    public function initBreadcrumbs($tab_id = null, $tabs = null)\n    {\n        if (is_array($tabs)) {\n            $tabs = array();\n        }\n\n        if (null === $tab_id) {\n            $tab_id = $this->id;\n        }\n\n        $tabs = Tab::recursiveTab($tab_id, $tabs);\n\n        $dummy = array('name' => '', 'href' => '', 'icon' => '');\n        $breadcrumbs2 = array(\n            'container' => $dummy,\n            'tab' => $dummy,\n            'action' => $dummy,\n        );\n        if (isset($tabs[0])) {\n            $this->addMetaTitle($tabs[0]['name']);\n            $breadcrumbs2['tab']['name'] = $tabs[0]['name'];\n            $breadcrumbs2['tab']['href'] = $this->context->link->getAdminLink($tabs[0]['class_name']);\n            if (!isset($tabs[1])) {\n                $breadcrumbs2['tab']['icon'] = 'icon-' . $tabs[0]['class_name'];\n            }\n        }\n        if (isset($tabs[1])) {\n            $breadcrumbs2['container']['name'] = $tabs[1]['name'];\n            $breadcrumbs2['container']['href'] = $this->context->link->getAdminLink($tabs[1]['class_name']);\n            $breadcrumbs2['container']['icon'] = 'icon-' . $tabs[1]['class_name'];\n        }\n\n        /* content, edit, list, add, details, options, view */\n        switch ($this->display) {\n            case 'add':\n                $breadcrumbs2['action']['name'] = $this->l('Add', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-plus';\n\n                break;\n            case 'edit':\n                $breadcrumbs2['action']['name'] = $this->l('Edit', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-pencil';\n\n                break;\n            case '':\n            case 'list':\n                $breadcrumbs2['action']['name'] = $this->l('List', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-th-list';\n\n                break;\n            case 'details':\n            case 'view':\n                $breadcrumbs2['action']['name'] = $this->l('View details', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-zoom-in';\n\n                break;\n            case 'options':\n                $breadcrumbs2['action']['name'] = $this->l('Options', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-cogs';\n\n                break;\n            case 'generator':\n                $breadcrumbs2['action']['name'] = $this->l('Generator', null, null, false);\n                $breadcrumbs2['action']['icon'] = 'icon-flask';\n\n                break;\n        }\n\n        $this->context->smarty->assign(array(\n            'breadcrumbs2' => $breadcrumbs2,\n            'quick_access_current_link_name' => Tools::safeOutput($breadcrumbs2['tab']['name'] . (isset($breadcrumbs2['action']) ? ' - ' . $breadcrumbs2['action']['name'] : '')),\n            'quick_access_current_link_icon' => $breadcrumbs2['container']['icon'],\n        ));\n\n        /* BEGIN - Backward compatibility < 1.6.0.3 */\n        $this->breadcrumbs[] = $tabs[0]['name'];\n        $navigation_pipe = (Configuration::get('PS_NAVIGATION_PIPE') ? Configuration::get('PS_NAVIGATION_PIPE') : '>');\n        $this->context->smarty->assign('navigationPipe', $navigation_pipe);\n        /* END - Backward compatibility < 1.6.0.3 */\n    }\n\n    /**\n     * Set default toolbar_title to admin breadcrumb.\n     */\n    public function initToolbarTitle()\n    {\n        $this->toolbar_title = is_array($this->breadcrumbs) ? array_unique($this->breadcrumbs) : array($this->breadcrumbs);\n\n        switch ($this->display) {\n            case 'edit':\n                $this->toolbar_title[] = $this->l('Edit', null, null, false);\n                $this->addMetaTitle($this->l('Edit', null, null, false));\n\n                break;\n\n            case 'add':\n                $this->toolbar_title[] = $this->l('Add new', null, null, false);\n                $this->addMetaTitle($this->l('Add new', null, null, false));\n\n                break;\n\n            case 'view':\n                $this->toolbar_title[] = $this->l('View', null, null, false);\n                $this->addMetaTitle($this->l('View', null, null, false));\n\n                break;\n        }\n\n        if ($filter = $this->addFiltersToBreadcrumbs()) {\n            $this->toolbar_title[] = $filter;\n        }\n    }\n\n    /**\n     * @return string|void\n     */\n    public function addFiltersToBreadcrumbs()\n    {\n        if ($this->filter && is_array($this->fields_list)) {\n            $filters = array();\n\n            foreach ($this->fields_list as $field => $t) {\n                if (isset($t['filter_key'])) {\n                    $field = $t['filter_key'];\n                }\n\n                if (($val = Tools::getValue($this->table . 'Filter_' . $field)) || $val = $this->context->cookie->{$this->getCookieFilterPrefix() . $this->table . 'Filter_' . $field}) {\n                    if (!is_array($val)) {\n                        $filter_value = '';\n                        if (isset($t['type']) && $t['type'] == 'bool') {\n                            $filter_value = ((bool) $val) ? $this->l('yes') : $this->l('no');\n                        } elseif (isset($t['type']) && $t['type'] == 'date' || isset($t['type']) && $t['type'] == 'datetime') {\n                            $date = json_decode($val, true);\n                            if (isset($date[0])) {\n                                $filter_value = $date[0];\n                                if (isset($date[1]) && !empty($date[1])) {\n                                    $filter_value .= ' - ' . $date[1];\n                                }\n                            }\n                        } elseif (is_string($val)) {\n                            $filter_value = htmlspecialchars($val, ENT_QUOTES, 'UTF-8');\n                        }\n                        if (!empty($filter_value)) {\n                            $filters[] = sprintf($this->l('%s: %s'), $t['title'], $filter_value);\n                        }\n                    } else {\n                        $filter_value = '';\n                        foreach ($val as $v) {\n                            if (is_string($v) && !empty($v)) {\n                                $filter_value .= ' - ' . htmlspecialchars($v, ENT_QUOTES, 'UTF-8');\n                            }\n                        }\n                        $filter_value = ltrim($filter_value, ' -');\n                        if (!empty($filter_value)) {\n                            $filters[] = sprintf($this->l('%s: %s'), $t['title'], $filter_value);\n                        }\n                    }\n                }\n            }\n\n            if (count($filters)) {\n                return sprintf($this->l('filter by %s'), implode(', ', $filters));\n            }\n        }\n    }\n\n    /**\n     * @param string $action\n     * @param bool $disable\n     */\n    public function access($action, $disable = false)\n    {\n        if (empty($this->tabAccess[$action])) {\n            $slugs = array();\n\n            foreach ((array) Access::getAuthorizationFromLegacy($action) as $roleSuffix) {\n                $slugs[] = $this->getTabSlug() . $roleSuffix;\n            }\n\n            $this->tabAccess[$action] = Access::isGranted(\n                $slugs,\n                $this->context->employee->id_profile\n            );\n        }\n\n        return $this->tabAccess[$action];\n    }\n\n    /**\n     * Check rights to view the current tab.\n     *\n     * @param bool $disable\n     *\n     * @return bool\n     */\n    public function viewAccess($disable = false)\n    {\n        return $this->access('view', $disable);\n    }\n\n    /**\n     * Check for security token.\n     *\n     * @return bool\n     */\n    public function checkToken()\n    {\n        if (TokenInUrls::isDisabled() || $this->isAnonymousAllowed()) {\n            return true;\n        }\n\n        $token = Tools::getValue('token');\n        if ($token === $this->token) {\n            return true;\n        }\n\n        if (count($_POST) || !isset($_GET['controller']) || !Validate::isControllerName($_GET['controller']) || !$token) {\n            return false;\n        }\n\n        foreach ($_GET as $key => $value) {\n            if (is_array($value) || !in_array($key, array('controller', 'controllerUri'))) {\n                return false;\n            }\n        }\n\n        $cookie = Context::getContext()->cookie;\n        $whitelist = array('date_add', 'id_lang', 'id_employee', 'email', 'profile', 'passwd', 'remote_addr', 'shopContext', 'collapse_menu', 'checksum');\n        foreach ($cookie->getAll() as $key => $value) {\n            if (!in_array($key, $whitelist)) {\n                unset($cookie->$key);\n            }\n        }\n\n        $cookie->write();\n\n        return true;\n    }\n\n    /**\n     * Set the filters used for the list display.\n     */\n    protected function getCookieFilterPrefix()\n    {\n        return str_replace(array('admin', 'controller'), '', Tools::strtolower(get_class($this)));\n    }\n\n    public function processFilter()\n    {\n        Hook::exec('action' . $this->controller_name . 'ListingFieldsModifier', array(\n            'fields' => &$this->fields_list,\n        ));\n\n        if (!isset($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        $prefix = $this->getCookieFilterPrefix();\n\n        if (isset($this->list_id)) {\n            foreach ($_POST as $key => $value) {\n                if ($value === '') {\n                    unset($this->context->cookie->{$prefix . $key});\n                } elseif (stripos($key, $this->list_id . 'Filter_') === 0) {\n                    $this->context->cookie->{$prefix . $key} = !is_array($value) ? $value : json_encode($value);\n                } elseif (stripos($key, 'submitFilter') === 0) {\n                    $this->context->cookie->$key = !is_array($value) ? $value : json_encode($value);\n                }\n            }\n\n            foreach ($_GET as $key => $value) {\n                if (stripos($key, $this->list_id . 'Filter_') === 0) {\n                    $this->context->cookie->{$prefix . $key} = !is_array($value) ? $value : json_encode($value);\n                } elseif (stripos($key, 'submitFilter') === 0) {\n                    $this->context->cookie->$key = !is_array($value) ? $value : json_encode($value);\n                }\n                if (stripos($key, $this->list_id . 'Orderby') === 0 && Validate::isOrderBy($value)) {\n                    if ($value === '' || $value == $this->_defaultOrderBy) {\n                        unset($this->context->cookie->{$prefix . $key});\n                    } else {\n                        $this->context->cookie->{$prefix . $key} = $value;\n                    }\n                } elseif (stripos($key, $this->list_id . 'Orderway') === 0 && Validate::isOrderWay($value)) {\n                    if ($value === '' || $value == $this->_defaultOrderWay) {\n                        unset($this->context->cookie->{$prefix . $key});\n                    } else {\n                        $this->context->cookie->{$prefix . $key} = $value;\n                    }\n                }\n            }\n        }\n\n        $filters = $this->context->cookie->getFamily($prefix . $this->list_id . 'Filter_');\n        $definition = false;\n        if (isset($this->className) && $this->className) {\n            $definition = ObjectModel::getDefinition($this->className);\n        }\n\n        foreach ($filters as $key => $value) {\n            /* Extracting filters from $_POST on key filter_ */\n            if ($value != null && !strncmp($key, $prefix . $this->list_id . 'Filter_', 7 + Tools::strlen($prefix . $this->list_id))) {\n                $key = Tools::substr($key, 7 + Tools::strlen($prefix . $this->list_id));\n                /* Table alias could be specified using a ! eg. alias!field */\n                $tmp_tab = explode('!', $key);\n                $filter = count($tmp_tab) > 1 ? $tmp_tab[1] : $tmp_tab[0];\n\n                if ($field = $this->filterToField($key, $filter)) {\n                    $type = (array_key_exists('filter_type', $field) ? $field['filter_type'] : (array_key_exists('type', $field) ? $field['type'] : false));\n                    if (($type == 'date' || $type == 'datetime') && is_string($value)) {\n                        $value = json_decode($value, true);\n                    }\n                    $key = isset($tmp_tab[1]) ? $tmp_tab[0] . '.`' . $tmp_tab[1] . '`' : '`' . $tmp_tab[0] . '`';\n\n                    // Assignment by reference\n                    if (array_key_exists('tmpTableFilter', $field)) {\n                        $sql_filter = &$this->_tmpTableFilter;\n                    } elseif (array_key_exists('havingFilter', $field)) {\n                        $sql_filter = &$this->_filterHaving;\n                    } else {\n                        $sql_filter = &$this->_filter;\n                    }\n\n                    /* Only for date filtering (from, to) */\n                    if (is_array($value)) {\n                        if (isset($value[0]) && !empty($value[0])) {\n                            if (!Validate::isDate($value[0])) {\n                                $this->errors[] = $this->trans('The \\'From\\' date format is invalid (YYYY-MM-DD)', array(), 'Admin.Notifications.Error');\n                            } else {\n                                $sql_filter .= ' AND ' . pSQL($key) . ' >= \\'' . pSQL(Tools::dateFrom($value[0])) . '\\'';\n                            }\n                        }\n\n                        if (isset($value[1]) && !empty($value[1])) {\n                            if (!Validate::isDate($value[1])) {\n                                $this->errors[] = $this->trans('The \\'To\\' date format is invalid (YYYY-MM-DD)', array(), 'Admin.Notifications.Error');\n                            } else {\n                                $sql_filter .= ' AND ' . pSQL($key) . ' <= \\'' . pSQL(Tools::dateTo($value[1])) . '\\'';\n                            }\n                        }\n                    } else {\n                        $sql_filter .= ' AND ';\n                        $check_key = ($key == $this->identifier || $key == '`' . $this->identifier . '`');\n                        $alias = ($definition && !empty($definition['fields'][$filter]['shop'])) ? 'sa' : 'a';\n\n                        if ($type == 'int' || $type == 'bool') {\n                            $sql_filter .= (($check_key || $key == '`active`') ? $alias . '.' : '') . pSQL($key) . ' = ' . (int) $value . ' ';\n                        } elseif ($type == 'decimal') {\n                            $sql_filter .= ($check_key ? $alias . '.' : '') . pSQL($key) . ' = ' . (float) $value . ' ';\n                        } elseif ($type == 'select') {\n                            $sql_filter .= ($check_key ? $alias . '.' : '') . pSQL($key) . ' = \\'' . pSQL($value) . '\\' ';\n                        } elseif ($type == 'price') {\n                            $value = (float) str_replace(',', '.', $value);\n                            $sql_filter .= ($check_key ? $alias . '.' : '') . pSQL($key) . ' = ' . pSQL(trim($value)) . ' ';\n                        } else {\n                            $sql_filter .= ($check_key ? $alias . '.' : '') . pSQL($key) . ' LIKE \\'%' . pSQL(trim($value)) . '%\\' ';\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @TODO uses redirectAdmin only if !$this->ajax\n     *\n     * @return ObjectModel|bool\n     */\n    public function postProcess()\n    {\n        try {\n            if ($this->ajax) {\n                // from ajax-tab.php\n                $action = Tools::getValue('action');\n                // no need to use displayConf() here\n                if (!empty($action) && method_exists($this, 'ajaxProcess' . Tools::toCamelCase($action))) {\n                    Hook::exec('actionAdmin' . ucfirst($this->action) . 'Before', array('controller' => $this));\n                    Hook::exec('action' . get_class($this) . ucfirst($this->action) . 'Before', array('controller' => $this));\n\n                    $return = $this->{'ajaxProcess' . Tools::toCamelCase($action)}();\n\n                    Hook::exec('actionAdmin' . ucfirst($this->action) . 'After', array('controller' => $this, 'return' => $return));\n                    Hook::exec('action' . get_class($this) . ucfirst($this->action) . 'After', array('controller' => $this, 'return' => $return));\n\n                    return $return;\n                } elseif (!empty($action) && $this->controller_name == 'AdminModules' && Tools::getIsset('configure')) {\n                    $module_obj = Module::getInstanceByName(Tools::getValue('configure'));\n                    if (Validate::isLoadedObject($module_obj) && method_exists($module_obj, 'ajaxProcess' . $action)) {\n                        return $module_obj->{'ajaxProcess' . $action}();\n                    }\n                } elseif (method_exists($this, 'ajaxProcess')) {\n                    return $this->ajaxProcess();\n                }\n            } else {\n                // Process list filtering\n                if ($this->filter && $this->action != 'reset_filters') {\n                    $this->processFilter();\n                }\n\n                if (isset($_POST) && count($_POST) && (int) Tools::getValue('submitFilter' . $this->list_id) || Tools::isSubmit('submitReset' . $this->list_id)) {\n                    $this->setRedirectAfter(self::$currentIndex . '&token=' . $this->token . (Tools::isSubmit('submitFilter' . $this->list_id) ? '&submitFilter' . $this->list_id . '=' . (int) Tools::getValue('submitFilter' . $this->list_id) : ''));\n                }\n\n                // If the method named after the action exists, call \"before\" hooks, then call action method, then call \"after\" hooks\n                if (!empty($this->action) && method_exists($this, 'process' . ucfirst(Tools::toCamelCase($this->action)))) {\n                    // Hook before action\n                    Hook::exec('actionAdmin' . ucfirst($this->action) . 'Before', array('controller' => $this));\n                    Hook::exec('action' . get_class($this) . ucfirst($this->action) . 'Before', array('controller' => $this));\n                    // Call process\n                    $return = $this->{'process' . Tools::toCamelCase($this->action)}();\n\n                    // Hook After Action\n                    Hook::exec('actionAdmin' . ucfirst($this->action) . 'After', array('controller' => $this, 'return' => $return));\n                    Hook::exec('action' . get_class($this) . ucfirst($this->action) . 'After', array('controller' => $this, 'return' => $return));\n\n                    return $return;\n                }\n            }\n        } catch (PrestaShopException $e) {\n            $this->errors[] = $e->getMessage();\n        }\n\n        return false;\n    }\n\n    /**\n     * Object Delete images.\n     *\n     * @return ObjectModel|false\n     */\n    public function processDeleteImage()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            if (($object->deleteImage())) {\n                $redirect = self::$currentIndex . '&update' . $this->table . '&' . $this->identifier . '=' . (int) Tools::getValue($this->identifier) . '&conf=7&token=' . $this->token;\n                if (!$this->ajax) {\n                    $this->redirect_after = $redirect;\n                } else {\n                    $this->content = 'ok';\n                }\n            }\n        }\n        $this->errors[] = $this->trans('An error occurred while attempting to delete the image. (cannot load object).', array(), 'Admin.Notifications.Error');\n\n        return $object;\n    }\n\n    /**\n     * @param string $text_delimiter\n     *\n     * @throws PrestaShopException\n     */\n    public function processExport($text_delimiter = '\"')\n    {\n        // clean buffer\n        if (ob_get_level() && ob_get_length() > 0) {\n            ob_clean();\n        }\n        $this->getList($this->context->language->id, null, null, 0, false);\n        if (!count($this->_list)) {\n            return;\n        }\n\n        header('Content-type: text/csv');\n        header('Content-Type: application/force-download; charset=UTF-8');\n        header('Cache-Control: no-store, no-cache');\n        header('Content-disposition: attachment; filename=\"' . $this->table . '_' . date('Y-m-d_His') . '.csv\"');\n\n        $fd = fopen('php://output', 'wb');\n        $headers = array();\n        foreach ($this->fields_list as $key => $datas) {\n            if ('PDF' === $datas['title']) {\n                unset($this->fields_list[$key]);\n            } else {\n                if ('ID' === $datas['title']) {\n                    $headers[] = strtolower(Tools::htmlentitiesDecodeUTF8($datas['title']));\n                } else {\n                    $headers[] = Tools::htmlentitiesDecodeUTF8($datas['title']);\n                }\n            }\n        }\n        fputcsv($fd, $headers, ';', $text_delimiter);\n\n        foreach ($this->_list as $i => $row) {\n            $content = array();\n            $path_to_image = false;\n            foreach ($this->fields_list as $key => $params) {\n                $field_value = isset($row[$key]) ? Tools::htmlentitiesDecodeUTF8(Tools::nl2br($row[$key])) : '';\n                if ($key == 'image') {\n                    if ($params['image'] != 'p' || Configuration::get('PS_LEGACY_IMAGES')) {\n                        $path_to_image = Tools::getShopDomain(true) . _PS_IMG_ . $params['image'] . '/' . $row['id_' . $this->table] . (isset($row['id_image']) ? '-' . (int) $row['id_image'] : '') . '.' . $this->imageType;\n                    } else {\n                        $path_to_image = Tools::getShopDomain(true) . _PS_IMG_ . $params['image'] . '/' . Image::getImgFolderStatic($row['id_image']) . (int) $row['id_image'] . '.' . $this->imageType;\n                    }\n                    if ($path_to_image) {\n                        $field_value = $path_to_image;\n                    }\n                }\n                if (isset($params['callback'])) {\n                    $callback_obj = (isset($params['callback_object'])) ? $params['callback_object'] : $this->context->controller;\n                    if (!preg_match('/<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)/ism', call_user_func_array(array($callback_obj, $params['callback']), array($field_value, $row)))) {\n                        $field_value = call_user_func_array(array($callback_obj, $params['callback']), array($field_value, $row));\n                    }\n                }\n                $content[] = $field_value;\n            }\n            fputcsv($fd, $content, ';', $text_delimiter);\n        }\n        @fclose($fd);\n        die;\n    }\n\n    /**\n     * Object Delete.\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopException\n     */\n    public function processDelete()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            $res = true;\n            // check if request at least one object with noZeroObject\n            if (isset($object->noZeroObject) && count(call_user_func(array($this->className, $object->noZeroObject))) <= 1) {\n                $this->errors[] = $this->trans('You need at least one object.', array(), 'Admin.Notifications.Error') .\n                    ' <b>' . $this->table . '</b><br />' .\n                    $this->trans('You cannot delete all of the items.', array(), 'Admin.Notifications.Error');\n            } elseif (array_key_exists('delete', $this->list_skip_actions) && in_array($object->id, $this->list_skip_actions['delete'])) { //check if some ids are in list_skip_actions and forbid deletion\n                $this->errors[] = $this->trans('You cannot delete this item.', array(), 'Admin.Notifications.Error');\n            } else {\n                if ($this->deleted) {\n                    if (!empty($this->fieldImageSettings)) {\n                        $res = $object->deleteImage();\n                    }\n\n                    if (!$res) {\n                        $this->errors[] = $this->trans('Unable to delete associated images.', array(), 'Admin.Notifications.Error');\n                    }\n\n                    $object->deleted = 1;\n                    if ($res = $object->update()) {\n                        $this->redirect_after = self::$currentIndex . '&conf=1&token=' . $this->token;\n                    }\n                } elseif ($res = $object->delete()) {\n                    $this->redirect_after = self::$currentIndex . '&conf=1&token=' . $this->token;\n                }\n                $this->errors[] = $this->trans('An error occurred during deletion.', array(), 'Admin.Notifications.Error');\n                if ($res) {\n                    PrestaShopLogger::addLog(sprintf($this->l('%s deletion', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $this->object->id, true, (int) $this->context->employee->id);\n                }\n            }\n        } else {\n            $this->errors[] = $this->trans('An error occurred while deleting the object.', array(), 'Admin.Notifications.Error') .\n                ' <b>' . $this->table . '</b> ' .\n                $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n        }\n\n        return $object;\n    }\n\n    /**\n     * Call the right method for creating or updating object.\n     *\n     * @return ObjectModel|false|void\n     */\n    public function processSave()\n    {\n        if ($this->id_object) {\n            $this->object = $this->loadObject();\n\n            return $this->processUpdate();\n        } else {\n            return $this->processAdd();\n        }\n    }\n\n    /**\n     * Object creation.\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopException\n     */\n    public function processAdd()\n    {\n        if (!isset($this->className) || empty($this->className)) {\n            return false;\n        }\n\n        $this->validateRules();\n        if (count($this->errors) <= 0) {\n            $this->object = new $this->className();\n\n            $this->copyFromPost($this->object, $this->table);\n            $this->beforeAdd($this->object);\n            if (method_exists($this->object, 'add') && !$this->object->add()) {\n                $this->errors[] = $this->trans('An error occurred while creating an object.', array(), 'Admin.Notifications.Error') .\n                    ' <b>' . $this->table . ' (' . Db::getInstance()->getMsgError() . ')</b>';\n            } elseif (($_POST[$this->identifier] = $this->object->id /* voluntary do affectation here */) && $this->postImage($this->object->id) && !count($this->errors) && $this->_redirect) {\n                PrestaShopLogger::addLog(sprintf($this->l('%s addition', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $this->object->id, true, (int) $this->context->employee->id);\n                $parent_id = (int) Tools::getValue('id_parent', 1);\n                $this->afterAdd($this->object);\n                $this->updateAssoShop($this->object->id);\n                // Save and stay on same form\n                if (empty($this->redirect_after) && $this->redirect_after !== false && Tools::isSubmit('submitAdd' . $this->table . 'AndStay')) {\n                    $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=' . $this->object->id . '&conf=3&update' . $this->table . '&token=' . $this->token;\n                }\n                // Save and back to parent\n                if (empty($this->redirect_after) && $this->redirect_after !== false && Tools::isSubmit('submitAdd' . $this->table . 'AndBackToParent')) {\n                    $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=' . $parent_id . '&conf=3&token=' . $this->token;\n                }\n                // Default behavior (save and back)\n                if (empty($this->redirect_after) && $this->redirect_after !== false) {\n                    $this->redirect_after = self::$currentIndex . ($parent_id ? '&' . $this->identifier . '=' . $this->object->id : '') . '&conf=3&token=' . $this->token;\n                }\n            }\n        }\n\n        $this->errors = array_unique($this->errors);\n        if (!empty($this->errors)) {\n            // if we have errors, we stay on the form instead of going back to the list\n            $this->display = 'edit';\n\n            return false;\n        }\n\n        return $this->object;\n    }\n\n    /**\n     * Object update.\n     *\n     * @return ObjectModel|false|void\n     *\n     * @throws PrestaShopException\n     */\n    public function processUpdate()\n    {\n        /* Checking fields validity */\n        $this->validateRules();\n        if (empty($this->errors)) {\n            $id = (int) Tools::getValue($this->identifier);\n\n            /* Object update */\n            if (isset($id) && !empty($id)) {\n                /** @var ObjectModel $object */\n                $object = new $this->className($id);\n                if (Validate::isLoadedObject($object)) {\n                    /* Specific to objects which must not be deleted */\n                    if ($this->deleted && $this->beforeDelete($object)) {\n                        // Create new one with old objet values\n                        /** @var ObjectModel $object_new */\n                        $object_new = $object->duplicateObject();\n                        if (Validate::isLoadedObject($object_new)) {\n                            // Update old object to deleted\n                            $object->deleted = 1;\n                            $object->update();\n\n                            // Update new object with post values\n                            $this->copyFromPost($object_new, $this->table);\n                            $result = $object_new->update();\n                            if (Validate::isLoadedObject($object_new)) {\n                                $this->afterDelete($object_new, $object->id);\n                            }\n                        }\n                    } else {\n                        $this->copyFromPost($object, $this->table);\n                        $result = $object->update();\n                        $this->afterUpdate($object);\n                    }\n\n                    if ($object->id) {\n                        $this->updateAssoShop($object->id);\n                    }\n\n                    if (!$result) {\n                        $this->errors[] = $this->trans('An error occurred while updating an object.', array(), 'Admin.Notifications.Error') .\n                            ' <b>' . $this->table . '</b> (' . Db::getInstance()->getMsgError() . ')';\n                    } elseif ($this->postImage($object->id) && !count($this->errors) && $this->_redirect) {\n                        $parent_id = (int) Tools::getValue('id_parent', 1);\n                        // Specific back redirect\n                        if ($back = Tools::getValue('back')) {\n                            $this->redirect_after = urldecode($back) . '&conf=4';\n                        }\n                        // Save and stay on same form\n                        // @todo on the to following if, we may prefer to avoid override redirect_after previous value\n                        if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay')) {\n                            $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=' . $object->id . '&conf=4&update' . $this->table . '&token=' . $this->token;\n                        }\n                        // Save and back to parent\n                        if (Tools::isSubmit('submitAdd' . $this->table . 'AndBackToParent')) {\n                            $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=' . $parent_id . '&conf=4&token=' . $this->token;\n                        }\n\n                        // Default behavior (save and back)\n                        if (empty($this->redirect_after) && $this->redirect_after !== false) {\n                            $this->redirect_after = self::$currentIndex . ($parent_id ? '&' . $this->identifier . '=' . $object->id : '') . '&conf=4&token=' . $this->token;\n                        }\n                    }\n                    PrestaShopLogger::addLog(sprintf($this->l('%s modification', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $object->id, true, (int) $this->context->employee->id);\n                } else {\n                    $this->errors[] = $this->trans('An error occurred while updating an object.', array(), 'Admin.Notifications.Error') .\n                        ' <b>' . $this->table . '</b> ' . $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n                }\n            }\n        }\n        $this->errors = array_unique($this->errors);\n        if (!empty($this->errors)) {\n            // if we have errors, we stay on the form instead of going back to the list\n            $this->display = 'edit';\n\n            return false;\n        }\n\n        if (isset($object)) {\n            return $object;\n        }\n    }\n\n    /**\n     * Change object required fields.\n     *\n     * @return ObjectModel\n     */\n    public function processUpdateFields()\n    {\n        if (!is_array($fields = Tools::getValue('fieldsBox'))) {\n            $fields = array();\n        }\n\n        /** @var $object ObjectModel */\n        $object = new $this->className();\n\n        if (!$object->addFieldsRequiredDatabase($fields)) {\n            $this->errors[] = $this->trans('An error occurred when attempting to update the required fields.', array(), 'Admin.Notifications.Error');\n        } else {\n            $this->redirect_after = self::$currentIndex . '&conf=4&token=' . $this->token;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Change object status (active, inactive).\n     *\n     * @return ObjectModel|false\n     *\n     * @throws PrestaShopException\n     */\n    public function processStatus()\n    {\n        if (Validate::isLoadedObject($object = $this->loadObject())) {\n            if ($object->toggleStatus()) {\n                $matches = array();\n                if (preg_match('/[\\?|&]controller=([^&]*)/', (string) $_SERVER['HTTP_REFERER'], $matches) !== false\n                    && strtolower($matches[1]) != strtolower(preg_replace('/controller/i', '', get_class($this)))) {\n                    $this->redirect_after = preg_replace('/[\\?|&]conf=([^&]*)/i', '', (string) $_SERVER['HTTP_REFERER']);\n                } else {\n                    $this->redirect_after = self::$currentIndex . '&token=' . $this->token;\n                }\n\n                $id_category = (($id_category = (int) Tools::getValue('id_category')) && Tools::getValue('id_product')) ? '&id_category=' . $id_category : '';\n\n                $page = (int) Tools::getValue('page');\n                $page = $page > 1 ? '&submitFilter' . $this->table . '=' . (int) $page : '';\n                $this->redirect_after .= '&conf=5' . $id_category . $page;\n            } else {\n                $this->errors[] = $this->trans('An error occurred while updating the status.', array(), 'Admin.Notifications.Error');\n            }\n        } else {\n            $this->errors[] = $this->trans('An error occurred while updating the status for an object.', array(), 'Admin.Notifications.Error') .\n                ' <b>' . $this->table . '</b> ' .\n                $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n        }\n\n        return $object;\n    }\n\n    /**\n     * Change object position.\n     *\n     * @return ObjectModel|false\n     */\n    public function processPosition()\n    {\n        if (!Validate::isLoadedObject($object = $this->loadObject())) {\n            $this->errors[] = $this->trans('An error occurred while updating the status for an object.', array(), 'Admin.Notifications.Error') .\n                ' <b>' . $this->table . '</b> ' . $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n        } elseif (!$object->updatePosition((int) Tools::getValue('way'), (int) Tools::getValue('position'))) {\n            $this->errors[] = $this->trans('Failed to update the position.', array(), 'Admin.Notifications.Error');\n        } else {\n            $id_identifier_str = ($id_identifier = (int) Tools::getValue($this->identifier)) ? '&' . $this->identifier . '=' . $id_identifier : '';\n            $redirect = self::$currentIndex . '&' . $this->table . 'Orderby=position&' . $this->table . 'Orderway=asc&conf=5' . $id_identifier_str . '&token=' . $this->token;\n            $this->redirect_after = $redirect;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Cancel all filters for this tab.\n     *\n     * @param int|null $list_id\n     */\n    public function processResetFilters($list_id = null)\n    {\n        if ($list_id === null) {\n            $list_id = isset($this->list_id) ? $this->list_id : $this->table;\n        }\n\n        $prefix = $this->getCookieOrderByPrefix();\n        $filters = $this->context->cookie->getFamily($prefix . $list_id . 'Filter_');\n        foreach ($filters as $cookie_key => $filter) {\n            if (strncmp($cookie_key, $prefix . $list_id . 'Filter_', 7 + Tools::strlen($prefix . $list_id)) == 0) {\n                $key = substr($cookie_key, 7 + Tools::strlen($prefix . $list_id));\n                if (is_array($this->fields_list) && array_key_exists($key, $this->fields_list)) {\n                    $this->context->cookie->$cookie_key = null;\n                }\n                unset($this->context->cookie->$cookie_key);\n            }\n        }\n\n        if (isset($this->context->cookie->{'submitFilter' . $list_id})) {\n            unset($this->context->cookie->{'submitFilter' . $list_id});\n        }\n        if (isset($this->context->cookie->{$prefix . $list_id . 'Orderby'})) {\n            unset($this->context->cookie->{$prefix . $list_id . 'Orderby'});\n        }\n        if (isset($this->context->cookie->{$prefix . $list_id . 'Orderway'})) {\n            unset($this->context->cookie->{$prefix . $list_id . 'Orderway'});\n        }\n\n        $_POST = array();\n        $this->_filter = false;\n        unset(\n            $this->_filterHaving,\n            $this->_having\n        );\n    }\n\n    /**\n     * Update options and preferences.\n     */\n    protected function processUpdateOptions()\n    {\n        $this->beforeUpdateOptions();\n\n        $languages = Language::getLanguages(false);\n\n        $hide_multishop_checkbox = (Shop::getTotalShops(false, null) < 2) ? true : false;\n        foreach ($this->fields_options as $category_data) {\n            if (!isset($category_data['fields'])) {\n                continue;\n            }\n\n            $fields = $category_data['fields'];\n\n            foreach ($fields as $field => $values) {\n                if (isset($values['type']) && $values['type'] == 'selectLang') {\n                    foreach ($languages as $lang) {\n                        if (Tools::getValue($field . '_' . strtoupper($lang['iso_code']))) {\n                            $fields[$field . '_' . strtoupper($lang['iso_code'])] = array(\n                                'type' => 'select',\n                                'cast' => 'strval',\n                                'identifier' => 'mode',\n                                'list' => $values['list'],\n                            );\n                        }\n                    }\n                }\n            }\n\n            // Validate fields\n            foreach ($fields as $field => $values) {\n                // We don't validate fields with no visibility\n                if (!$hide_multishop_checkbox && Shop::isFeatureActive() && isset($values['visibility']) && $values['visibility'] > Shop::getContext()) {\n                    continue;\n                }\n\n                // Check if field is required\n                if ((!Shop::isFeatureActive() && !empty($values['required']))\n                    || (Shop::isFeatureActive() && isset($_POST['multishopOverrideOption'][$field]) && !empty($values['required']))) {\n                    if (isset($values['type']) && $values['type'] == 'textLang') {\n                        foreach ($languages as $language) {\n                            if (($value = Tools::getValue($field . '_' . $language['id_lang'])) == false && (string) $value != '0') {\n                                $this->errors[] = $this->trans('field %s is required.', array($values['title']), 'Admin.Notifications.Error');\n                            }\n                        }\n                    } elseif (($value = Tools::getValue($field)) == false && (string) $value != '0') {\n                        $this->errors[] = $this->trans('field %s is required.', array($values['title']), 'Admin.Notifications.Error');\n                    }\n                }\n\n                // Check field validator\n                if (isset($values['type']) && $values['type'] == 'textLang') {\n                    foreach ($languages as $language) {\n                        if (Tools::getValue($field . '_' . $language['id_lang']) && isset($values['validation'])) {\n                            $values_validation = $values['validation'];\n                            if (!Validate::$values_validation(Tools::getValue($field . '_' . $language['id_lang']))) {\n                                $this->errors[] = $this->trans('The %s field is invalid.', array($values['title']), 'Admin.Notifications.Error');\n                            }\n                        }\n                    }\n                } elseif (Tools::getValue($field) && isset($values['validation'])) {\n                    $values_validation = $values['validation'];\n                    if (!Validate::$values_validation(Tools::getValue($field))) {\n                        $this->errors[] = $this->trans('The %s field is invalid.', array($values['title']), 'Admin.Notifications.Error');\n                    }\n                }\n\n                // Set default value\n                if (Tools::getValue($field) === false && isset($values['default'])) {\n                    $_POST[$field] = $values['default'];\n                }\n            }\n\n            if (!count($this->errors)) {\n                foreach ($fields as $key => $options) {\n                    if (Shop::isFeatureActive() && isset($options['visibility']) && $options['visibility'] > Shop::getContext()) {\n                        continue;\n                    }\n\n                    if (!$hide_multishop_checkbox && Shop::isFeatureActive() && Shop::getContext() != Shop::CONTEXT_ALL && empty($options['no_multishop_checkbox']) && empty($_POST['multishopOverrideOption'][$key])) {\n                        Configuration::deleteFromContext($key);\n\n                        continue;\n                    }\n\n                    // check if a method updateOptionFieldName is available\n                    $method_name = 'updateOption' . Tools::toCamelCase($key, true);\n                    if (method_exists($this, $method_name)) {\n                        $this->$method_name(Tools::getValue($key));\n                    } elseif (isset($options['type']) && in_array($options['type'], array('textLang', 'textareaLang'))) {\n                        $list = array();\n                        foreach ($languages as $language) {\n                            $key_lang = Tools::getValue($key . '_' . $language['id_lang']);\n                            $val = (isset($options['cast']) ? $options['cast']($key_lang) : $key_lang);\n                            if ($this->validateField($val, $options)) {\n                                if (Validate::isCleanHtml($val)) {\n                                    $list[$language['id_lang']] = $val;\n                                } else {\n                                    $this->errors[] = $this->trans('Cannot add configuration %1$s for %2$s language', array($key, Language::getIsoById((int) $language['id_lang'])), 'Admin.International.Notification');\n                                }\n                            }\n                        }\n                        Configuration::updateValue($key, $list, isset($options['validation']) && $options['validation'] == 'isCleanHtml' ? true : false);\n                    } else {\n                        $val = (isset($options['cast']) ? $options['cast'](Tools::getValue($key)) : Tools::getValue($key));\n                        if ($this->validateField($val, $options)) {\n                            if (Validate::isCleanHtml($val)) {\n                                Configuration::updateValue($key, $val);\n                            } else {\n                                $this->errors[] = $this->trans('Cannot add configuration %s', array($key), 'Admin.Notifications.Error');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        $this->display = 'list';\n        if (empty($this->errors)) {\n            $this->confirmations[] = $this->_conf[6];\n        }\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        if (empty($this->toolbar_title)) {\n            $this->initToolbarTitle();\n        }\n\n        if (!is_array($this->toolbar_title)) {\n            $this->toolbar_title = array($this->toolbar_title);\n        }\n\n        switch ($this->display) {\n            case 'view':\n                // Default cancel button - like old back link\n                $back = Tools::safeOutput(Tools::getValue('back', ''));\n                if (empty($back)) {\n                    $back = self::$currentIndex . '&token=' . $this->token;\n                }\n                if (!Validate::isCleanHtml($back)) {\n                    die(Tools::displayError());\n                }\n                if (!$this->lite_display) {\n                    $this->page_header_toolbar_btn['back'] = array(\n                        'href' => $back,\n                        'desc' => $this->l('Back to list'),\n                    );\n                }\n                $obj = $this->loadObject(true);\n                if (Validate::isLoadedObject($obj) && isset($obj->{$this->identifier_name}) && !empty($obj->{$this->identifier_name})) {\n                    array_pop($this->toolbar_title);\n                    array_pop($this->meta_title);\n                    $this->toolbar_title[] = is_array($obj->{$this->identifier_name}) ? $obj->{$this->identifier_name}[$this->context->employee->id_lang] : $obj->{$this->identifier_name};\n                    $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n                }\n\n                break;\n            case 'edit':\n                $obj = $this->loadObject(true);\n                if (Validate::isLoadedObject($obj) && isset($obj->{$this->identifier_name}) && !empty($obj->{$this->identifier_name})) {\n                    array_pop($this->toolbar_title);\n                    array_pop($this->meta_title);\n                    $this->toolbar_title[] = sprintf($this->l('Edit: %s'), (is_array($obj->{$this->identifier_name}) && isset($obj->{$this->identifier_name}[$this->context->employee->id_lang])) ? $obj->{$this->identifier_name}[$this->context->employee->id_lang] : $obj->{$this->identifier_name});\n                    $this->addMetaTitle($this->toolbar_title[count($this->toolbar_title) - 1]);\n                }\n\n                break;\n        }\n\n        if (is_array($this->page_header_toolbar_btn)\n            && $this->page_header_toolbar_btn instanceof Traversable\n            || count($this->toolbar_title)) {\n            $this->show_page_header_toolbar = true;\n        }\n\n        if (empty($this->page_header_toolbar_title)) {\n            $this->page_header_toolbar_title = $this->toolbar_title[count($this->toolbar_title) - 1];\n        }\n\n        $this->addPageHeaderToolBarModulesListButton();\n\n        $this->context->smarty->assign('help_link', 'https://help.prestashop.com/' . Language::getIsoById($this->context->employee->id_lang) . '/doc/'\n            . Tools::getValue('controller') . '?version=' . _PS_VERSION_ . '&country=' . Language::getIsoById($this->context->employee->id_lang));\n    }\n\n    /**\n     * assign default action in toolbar_btn smarty var, if they are not set.\n     * uses override to specifically add, modify or remove items.\n     */\n    public function initToolbar()\n    {\n        switch ($this->display) {\n            case 'add':\n            case 'edit':\n                // Default save button - action dynamically handled in javascript\n                $this->toolbar_btn['save'] = array(\n                    'href' => '#',\n                    'desc' => $this->l('Save'),\n                );\n                $back = Tools::safeOutput(Tools::getValue('back', ''));\n                if (empty($back)) {\n                    $back = self::$currentIndex . '&token=' . $this->token;\n                }\n                if (!Validate::isCleanHtml($back)) {\n                    die(Tools::displayError());\n                }\n                if (!$this->lite_display) {\n                    $this->toolbar_btn['cancel'] = array(\n                        'href' => $back,\n                        'desc' => $this->l('Cancel'),\n                    );\n                }\n\n                break;\n            case 'view':\n                // Default cancel button - like old back link\n                $back = Tools::safeOutput(Tools::getValue('back', ''));\n                if (empty($back)) {\n                    $back = self::$currentIndex . '&token=' . $this->token;\n                }\n                if (!Validate::isCleanHtml($back)) {\n                    die(Tools::displayError());\n                }\n                if (!$this->lite_display) {\n                    $this->toolbar_btn['back'] = array(\n                        'href' => $back,\n                        'desc' => $this->l('Back to list'),\n                    );\n                }\n\n                break;\n            case 'options':\n                $this->toolbar_btn['save'] = array(\n                    'href' => '#',\n                    'desc' => $this->l('Save'),\n                );\n\n                break;\n            default:\n                // list\n                $this->toolbar_btn['new'] = array(\n                    'href' => self::$currentIndex . '&add' . $this->table . '&token=' . $this->token,\n                    'desc' => $this->l('Add new'),\n                );\n                if ($this->allow_export) {\n                    $this->toolbar_btn['export'] = array(\n                        'href' => self::$currentIndex . '&export' . $this->table . '&token=' . $this->token,\n                        'desc' => $this->l('Export'),\n                    );\n                }\n        }\n        $this->addToolBarModulesListButton();\n    }\n\n    /**\n     * Load class object using identifier in $_GET (if possible)\n     * otherwise return an empty object, or die.\n     *\n     * @param bool $opt Return an empty object if load fail\n     *\n     * @return ObjectModel|false\n     */\n    protected function loadObject($opt = false)\n    {\n        if (!isset($this->className) || empty($this->className)) {\n            return true;\n        }\n\n        $id = (int) Tools::getValue($this->identifier);\n        if ($id && Validate::isUnsignedId($id)) {\n            if (!$this->object) {\n                $this->object = new $this->className($id);\n            }\n            if (Validate::isLoadedObject($this->object)) {\n                return $this->object;\n            }\n            // throw exception\n            $this->errors[] = $this->trans('The object cannot be loaded (or found)', array(), 'Admin.Notifications.Error');\n\n            return false;\n        } elseif ($opt) {\n            if (!$this->object) {\n                $this->object = new $this->className();\n            }\n\n            return $this->object;\n        } else {\n            $this->errors[] = $this->trans('The object cannot be loaded (the identifier is missing or invalid)', array(), 'Admin.Notifications.Error');\n\n            return false;\n        }\n    }\n\n    /**\n     * Check if the token is valid, else display a warning page.\n     *\n     * @return bool\n     */\n    public function checkAccess()\n    {\n        if (!$this->checkToken()) {\n            // If this is an XSS attempt, then we should only display a simple, secure page\n            // ${1} in the replacement string of the regexp is required,\n            // because the token may begin with a number and mix up with it (e.g. $17)\n            $url = preg_replace('/([&?]token=)[^&]*(&.*)?$/', '${1}' . $this->token . '$2', $_SERVER['REQUEST_URI']);\n            if (false === strpos($url, '?token=') && false === strpos($url, '&token=')) {\n                $url .= '&token=' . $this->token;\n            }\n            if (strpos($url, '?') === false) {\n                $url = str_replace('&token', '?controller=AdminDashboard&token', $url);\n            }\n\n            $this->context->smarty->assign('url', htmlentities($url));\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * @param string $key\n     * @param string $filter\n     *\n     * @return array|false\n     */\n    protected function filterToField($key, $filter)\n    {\n        if (!isset($this->fields_list)) {\n            return false;\n        }\n\n        foreach ($this->fields_list as $field) {\n            if (array_key_exists('filter_key', $field) && $field['filter_key'] == $key) {\n                return $field;\n            }\n        }\n        if (array_key_exists($filter, $this->fields_list)) {\n            return $this->fields_list[$filter];\n        }\n\n        return false;\n    }\n\n    public function displayAjax()\n    {\n        if ($this->json) {\n            $this->context->smarty->assign(array(\n                'json' => true,\n                'status' => $this->status,\n            ));\n        }\n        $this->layout = 'layout-ajax.tpl';\n        $this->display_header = false;\n        $this->display_header_javascript = false;\n        $this->display_footer = false;\n\n        return $this->display();\n    }\n\n    protected function redirect()\n    {\n        Tools::redirectAdmin($this->redirect_after);\n    }\n\n    /**\n     * @throws Exception\n     * @throws SmartyException\n     */\n    public function display()\n    {\n        $this->context->smarty->assign(array(\n            'display_header' => $this->display_header,\n            'display_header_javascript' => $this->display_header_javascript,\n            'display_footer' => $this->display_footer,\n            'js_def' => Media::getJsDef(),\n            'toggle_navigation_url' => $this->context->link->getAdminLink('AdminEmployees', true, [], [\n                'action' => 'toggleMenu',\n            ]),\n        ));\n\n        // Use page title from meta_title if it has been set else from the breadcrumbs array\n        if (!$this->meta_title) {\n            $this->meta_title = $this->toolbar_title;\n        }\n        if (is_array($this->meta_title)) {\n            $this->meta_title = strip_tags(implode(' ' . Configuration::get('PS_NAVIGATION_PIPE') . ' ', $this->meta_title));\n        }\n        $this->context->smarty->assign('meta_title', $this->meta_title);\n\n        $template_dirs = $this->context->smarty->getTemplateDir();\n\n        // Check if header/footer have been overriden\n        $dir = $this->context->smarty->getTemplateDir(0) . 'controllers' . DIRECTORY_SEPARATOR . trim($this->override_folder, '\\\\/') . DIRECTORY_SEPARATOR;\n        $module_list_dir = $this->context->smarty->getTemplateDir(0) . 'helpers' . DIRECTORY_SEPARATOR . 'modules_list' . DIRECTORY_SEPARATOR;\n\n        $header_tpl = file_exists($dir . 'header.tpl') ? $dir . 'header.tpl' : 'header.tpl';\n        $page_header_toolbar = file_exists($dir . 'page_header_toolbar.tpl') ? $dir . 'page_header_toolbar.tpl' : 'page_header_toolbar.tpl';\n        $footer_tpl = file_exists($dir . 'footer.tpl') ? $dir . 'footer.tpl' : 'footer.tpl';\n        $modal_module_list = file_exists($module_list_dir . 'modal.tpl') ? $module_list_dir . 'modal.tpl' : '';\n        $tpl_action = $this->tpl_folder . $this->display . '.tpl';\n\n        // Check if action template has been overridden\n        foreach ($template_dirs as $template_dir) {\n            if (file_exists($template_dir . DIRECTORY_SEPARATOR . $tpl_action) && $this->display != 'view' && $this->display != 'options') {\n                if (method_exists($this, $this->display . Tools::toCamelCase($this->className))) {\n                    $this->{$this->display . Tools::toCamelCase($this->className)}();\n                }\n                $this->context->smarty->assign('content', $this->context->smarty->fetch($tpl_action));\n\n                break;\n            }\n        }\n\n        if (!$this->ajax) {\n            $template = $this->createTemplate($this->template);\n            $page = $template->fetch();\n        } else {\n            $page = $this->content;\n        }\n\n        if ($conf = Tools::getValue('conf')) {\n            $this->context->smarty->assign('conf', $this->json ? json_encode($this->_conf[(int) $conf]) : $this->_conf[(int) $conf]);\n        }\n\n        if ($error = Tools::getValue('error')) {\n            $this->context->smarty->assign('error', $this->json ? json_encode($this->_error[(int) $error]) : $this->_error[(int) $error]);\n        }\n\n        foreach (array('errors', 'warnings', 'informations', 'confirmations') as $type) {\n            if (!is_array($this->$type)) {\n                $this->$type = (array) $this->$type;\n            }\n            $this->context->smarty->assign($type, $this->json ? json_encode(array_unique($this->$type)) : array_unique($this->$type));\n        }\n\n        if ($this->show_page_header_toolbar && !$this->lite_display) {\n            $this->context->smarty->assign(\n                array(\n                    'page_header_toolbar' => $this->context->smarty->fetch($page_header_toolbar),\n                )\n            );\n            if (!empty($modal_module_list)) {\n                $this->context->smarty->assign(\n                    array(\n                        'modal_module_list' => $this->context->smarty->fetch($modal_module_list),\n                    )\n                );\n            }\n        }\n\n        $this->context->smarty->assign('baseAdminUrl', __PS_BASE_URI__ . basename(_PS_ADMIN_DIR_) . '/');\n\n        $this->context->smarty->assign(\n            array(\n                'page' => $this->json ? json_encode($page) : $page,\n                'header' => $this->context->smarty->fetch($header_tpl),\n                'footer' => $this->context->smarty->fetch($footer_tpl),\n            )\n        );\n\n        $this->smartyOutputContent($this->layout);\n    }\n\n    /**\n     * Add a warning message to display at the top of the page.\n     *\n     * @param string $msg\n     */\n    protected function displayWarning($msg)\n    {\n        $this->warnings[] = $msg;\n    }\n\n    /**\n     * Add a info message to display at the top of the page.\n     *\n     * @param string $msg\n     */\n    protected function displayInformation($msg)\n    {\n        $this->informations[] = $msg;\n    }\n\n    /**\n     * Assign smarty variables for the header.\n     */\n    public function initHeader()\n    {\n        header('Cache-Control: no-store, no-cache');\n\n        // Multishop\n        $is_multishop = Shop::isFeatureActive();\n\n        // Quick access\n        if ((int) $this->context->employee->id) {\n            $quick_access = QuickAccess::getQuickAccessesWithToken($this->context->language->id, (int) $this->context->employee->id);\n        }\n\n        $tabs = $this->getTabs();\n        $currentTabLevel = 0;\n        foreach ($tabs as &$tab) {\n            $currentTabLevel = isset($tab['current_level']) ? $tab['current_level'] : $currentTabLevel;\n        }\n\n        if (Validate::isLoadedObject($this->context->employee)) {\n            $accesses = Profile::getProfileAccesses($this->context->employee->id_profile, 'class_name');\n            $helperShop = new HelperShop();\n            /* Hooks are voluntary out the initialize array (need those variables already assigned) */\n            $bo_color = empty($this->context->employee->bo_color) ? '#FFFFFF' : $this->context->employee->bo_color;\n            $this->context->smarty->assign(array(\n                'help_box' => Configuration::get('PS_HELPBOX'),\n                'round_mode' => Configuration::get('PS_PRICE_ROUND_MODE'),\n                'brightness' => Tools::getBrightness($bo_color) < 128 ? 'white' : '#383838',\n                'bo_width' => (int) $this->context->employee->bo_width,\n                'bo_color' => isset($this->context->employee->bo_color) ? Tools::htmlentitiesUTF8($this->context->employee->bo_color) : null,\n                'show_new_orders' => Configuration::get('PS_SHOW_NEW_ORDERS') && isset($accesses['AdminOrders']) && $accesses['AdminOrders']['view'],\n                'show_new_customers' => Configuration::get('PS_SHOW_NEW_CUSTOMERS') && isset($accesses['AdminCustomers']) && $accesses['AdminCustomers']['view'],\n                'show_new_messages' => Configuration::get('PS_SHOW_NEW_MESSAGES') && isset($accesses['AdminCustomerThreads']) && $accesses['AdminCustomerThreads']['view'],\n                'employee' => $this->context->employee,\n                'search_type' => Tools::getValue('bo_search_type'),\n                'bo_query' => Tools::safeOutput(Tools::stripslashes(Tools::getValue('bo_query'))),\n                'quick_access' => empty($quick_access) ? false : $quick_access,\n                'multi_shop' => Shop::isFeatureActive(),\n                'shop_list' => $helperShop->getRenderedShopList(),\n                'current_shop_name' => $helperShop->getCurrentShopName(),\n                'shop' => $this->context->shop,\n                'shop_group' => new ShopGroup((int) Shop::getContextShopGroupID()),\n                'is_multishop' => $is_multishop,\n                'multishop_context' => $this->multishop_context,\n                'default_tab_link' => $this->context->link->getAdminLink(Tab::getClassNameById((int) Context::getContext()->employee->default_tab)),\n                'login_link' => $this->context->link->getAdminLink('AdminLogin'),\n                'logout_link' => $this->context->link->getAdminLink('AdminLogin', true, [], ['logout' => 1]),\n                'collapse_menu' => isset($this->context->cookie->collapse_menu) ? (int) $this->context->cookie->collapse_menu : 0,\n            ));\n        } else {\n            $this->context->smarty->assign('default_tab_link', $this->context->link->getAdminLink('AdminDashboard'));\n        }\n\n        // Shop::initialize() in config.php may empty $this->context->shop->virtual_uri so using a new shop instance for getBaseUrl()\n        $this->context->shop = new Shop((int) $this->context->shop->id);\n\n        $this->context->smarty->assign(array(\n            'img_dir' => _PS_IMG_,\n            'iso' => $this->context->language->iso_code,\n            'class_name' => $this->className,\n            'iso_user' => $this->context->language->iso_code,\n            'lang_is_rtl' => $this->context->language->is_rtl,\n            'country_iso_code' => $this->context->country->iso_code,\n            'version' => _PS_VERSION_,\n            'lang_iso' => $this->context->language->iso_code,\n            'full_language_code' => $this->context->language->language_code,\n            'full_cldr_language_code' => $this->context->getCurrentLocale()->getCode(),\n            'link' => $this->context->link,\n            'shop_name' => Configuration::get('PS_SHOP_NAME'),\n            'base_url' => $this->context->shop->getBaseURL(),\n            'current_parent_id' => (int) Tab::getCurrentParentId(),\n            'tabs' => $tabs,\n            'current_tab_level' => $currentTabLevel,\n            'install_dir_exists' => file_exists(_PS_ADMIN_DIR_ . '/../install'),\n            'pic_dir' => _THEME_PROD_PIC_DIR_,\n            'controller_name' => htmlentities(Tools::getValue('controller')),\n            'currentIndex' => self::$currentIndex,\n            'bootstrap' => $this->bootstrap,\n            'default_language' => (int) Configuration::get('PS_LANG_DEFAULT'),\n            'display_addons_connection' => Tab::checkTabRights(Tab::getIdFromClassName('AdminModulesController')),\n        ));\n    }\n\n    private function getNotificationTip($type)\n    {\n        $tips = array(\n            'order' => array(\n                $this->trans('Did you check your conversion rate lately?', array(), 'Admin.Navigation.Notification'),\n                $this->trans('How about some seasonal discounts?', array(), 'Admin.Navigation.Notification'),\n                $this->trans(\n                    'Have you checked your [1][2]abandoned carts[/2][/1]?[3]Your next order could be hiding there!',\n                        array(\n                            '[1]' => '<strong>',\n                            '[/1]' => '</strong>',\n                            '[2]' => '<a href=\"' . $this->context->link->getAdminLink('AdminCarts', true, array(), array('action' => 'filterOnlyAbandonedCarts')) . '\">',\n                            '[/2]' => '</a>',\n                            '[3]' => '<br>',\n                        ),\n                        'Admin.Navigation.Notification'\n                ),\n            ),\n            'customer' => array(\n                $this->trans('Have you sent any acquisition email lately?', array(), 'Admin.Navigation.Notification'),\n                $this->trans('Are you active on social media these days?', array(), 'Admin.Navigation.Notification'),\n                $this->trans('Have you considered selling on marketplaces?', array(), 'Admin.Navigation.Notification'),\n            ),\n            'customer_message' => array(\n                $this->trans('That\\'s more time for something else!', array(), 'Admin.Navigation.Notification'),\n                $this->trans('No news is good news, isn\\'t it?', array(), 'Admin.Navigation.Notification'),\n                $this->trans('Seems like all your customers are happy :)', array(), 'Admin.Navigation.Notification'),\n            ),\n        );\n\n        if (!isset($tips[$type])) {\n            return '';\n        }\n\n        return $tips[$type][array_rand($tips[$type])];\n    }\n\n    private function getTabs($parentId = 0, $level = 0)\n    {\n        $tabs = Tab::getTabs($this->context->language->id, $parentId);\n        $current_id = Tab::getCurrentParentId($this->controller_name ? $this->controller_name : '');\n\n        foreach ($tabs as $index => $tab) {\n            if (!Tab::checkTabRights($tab['id_tab'])\n                || ($tab['class_name'] == 'AdminStock' && Configuration::get('PS_ADVANCED_STOCK_MANAGEMENT') == 0)\n                || $tab['class_name'] == 'AdminCarrierWizard') {\n                unset($tabs[$index]);\n\n                continue;\n            }\n\n            // tab[class_name] does not contains the \"Controller\" suffix\n            if (($tab['class_name'] . 'Controller' == get_class($this)) || ($current_id == $tab['id_tab']) || $tab['class_name'] == $this->controller_name) {\n                $tabs[$index]['current'] = true;\n                $tabs[$index]['current_level'] = $level;\n            } else {\n                $tabs[$index]['current'] = false;\n            }\n            $tabs[$index]['img'] = null;\n            $tabs[$index]['href'] = $this->context->link->getAdminLink($tab['class_name']);\n            $tabs[$index]['sub_tabs'] = array_values($this->getTabs($tab['id_tab'], $level + 1));\n\n            $subTabHref = $this->getTabLinkFromSubTabs($tabs[$index]['sub_tabs']);\n            if (!empty($subTabHref)) {\n                $tabs[$index]['href'] = $subTabHref;\n            } elseif (0 == $tabs[$index]['id_parent'] && '' == $tabs[$index]['icon']) {\n                unset($tabs[$index]);\n            } elseif (empty($tabs[$index]['icon'])) {\n                $tabs[$index]['icon'] = 'extension';\n            }\n\n            if (array_key_exists($index, $tabs) && array_key_exists('sub_tabs', $tabs[$index])) {\n                foreach ($tabs[$index]['sub_tabs'] as $sub_tab) {\n                    if ((int) $sub_tab['current'] == true) {\n                        $tabs[$index]['current'] = true;\n                        $tabs[$index]['current_level'] = $sub_tab['current_level'];\n                    }\n                }\n            }\n        }\n\n        return $tabs;\n    }\n\n    /**\n     * Declare an action to use for each row in the list.\n     *\n     * @param string $action\n     */\n    public function addRowAction($action)\n    {\n        $action = strtolower($action);\n        $this->actions[] = $action;\n    }\n\n    /**\n     * Add an action to use for each row in the list.\n     *\n     * @param string $action\n     * @param array $list\n     */\n    public function addRowActionSkipList($action, $list)\n    {\n        $action = strtolower($action);\n        $list = (array) $list;\n\n        if (array_key_exists($action, $this->list_skip_actions)) {\n            $this->list_skip_actions[$action] = array_merge($this->list_skip_actions[$action], $list);\n        } else {\n            $this->list_skip_actions[$action] = $list;\n        }\n    }\n\n    /**\n     * Assign smarty variables for all default views, list and form, then call other init functions.\n     */\n    public function initContent()\n    {\n        if (!$this->viewAccess()) {\n            $this->errors[] = $this->trans('You do not have permission to view this.', array(), 'Admin.Notifications.Error');\n\n            return;\n        }\n\n        if ($this->display == 'edit' || $this->display == 'add') {\n            if (!$this->loadObject(true)) {\n                return;\n            }\n\n            $this->content .= $this->renderForm();\n        } elseif ($this->display == 'view') {\n            // Some controllers use the view action without an object\n            if ($this->className) {\n                $this->loadObject(true);\n            }\n            $this->content .= $this->renderView();\n        } elseif ($this->display == 'details') {\n            $this->content .= $this->renderDetails();\n        } elseif (!$this->ajax) {\n            // FIXME: Sorry. I'm not very proud of this, but no choice... Please wait sf refactoring to solve this.\n            if (get_class($this) != 'AdminCarriersController') {\n                $this->content .= $this->renderModulesList();\n            }\n            $this->content .= $this->renderKpis();\n            $this->content .= $this->renderList();\n            $this->content .= $this->renderOptions();\n\n            // if we have to display the required fields form\n            if ($this->required_database) {\n                $this->content .= $this->displayRequiredFields();\n            }\n        }\n\n        $this->context->smarty->assign(array(\n            'content' => $this->content,\n        ));\n    }\n\n    public function initToolbarFlags()\n    {\n        $this->getLanguages();\n\n        $this->initToolbar();\n        $this->initTabModuleList();\n        $this->initPageHeaderToolbar();\n\n        $this->context->smarty->assign(array(\n            'maintenance_mode' => !(bool) Configuration::get('PS_SHOP_ENABLE'),\n            'debug_mode' => (bool) _PS_MODE_DEV_,\n            'lite_display' => $this->lite_display,\n            'url_post' => self::$currentIndex . '&token=' . $this->token,\n            'show_page_header_toolbar' => $this->show_page_header_toolbar,\n            'page_header_toolbar_title' => $this->page_header_toolbar_title,\n            'title' => $this->page_header_toolbar_title,\n            'toolbar_btn' => $this->page_header_toolbar_btn,\n            'page_header_toolbar_btn' => $this->page_header_toolbar_btn,\n        ));\n    }\n\n    /**\n     * Init tab modules list and add button in toolbar.\n     */\n    protected function initTabModuleList()\n    {\n        if (!$this->isFresh(Module::CACHE_FILE_MUST_HAVE_MODULES_LIST, 86400)) {\n            @file_put_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_MUST_HAVE_MODULES_LIST, Tools::addonsRequest('must-have'));\n        }\n        if (!$this->isFresh(Module::CACHE_FILE_TAB_MODULES_LIST, 604800)) {\n            $this->refresh(Module::CACHE_FILE_TAB_MODULES_LIST, _PS_TAB_MODULE_LIST_URL_);\n        }\n\n        $this->tab_modules_list = Tab::getTabModulesList($this->id);\n\n        if (is_array($this->tab_modules_list['default_list']) && count($this->tab_modules_list['default_list'])) {\n            $this->filter_modules_list = $this->tab_modules_list['default_list'];\n        } elseif (is_array($this->tab_modules_list['slider_list']) && count($this->tab_modules_list['slider_list'])) {\n            $this->addToolBarModulesListButton();\n            $this->addPageHeaderToolBarModulesListButton();\n            $this->context->smarty->assign(array(\n                'tab_modules_list' => implode(',', $this->tab_modules_list['slider_list']),\n                'admin_module_ajax_url' => $this->context->link->getAdminLink('AdminModules'),\n                'back_tab_modules_list' => $this->context->link->getAdminLink(Tools::getValue('controller')),\n                'tab_modules_open' => (int) Tools::getValue('tab_modules_open'),\n            ));\n        }\n    }\n\n    protected function addPageHeaderToolBarModulesListButton()\n    {\n        $this->filterTabModuleList();\n\n        if (is_array($this->tab_modules_list['slider_list']) && count($this->tab_modules_list['slider_list'])) {\n            $this->page_header_toolbar_btn['modules-list'] = array(\n                'href' => $this->getAdminModulesUrl(),\n                'desc' => $this->l('Recommended Modules'),\n            );\n        }\n    }\n\n    protected function addToolBarModulesListButton()\n    {\n        $this->filterTabModuleList();\n\n        if (is_array($this->tab_modules_list['slider_list']) && count($this->tab_modules_list['slider_list'])) {\n            $this->toolbar_btn['modules-list'] = array(\n                'href' => $this->getAdminModulesUrl(),\n                'desc' => $this->l('Recommended Modules'),\n            );\n        }\n    }\n\n    protected function getAdminModulesUrl()\n    {\n        return $this->context->link->getAdminLink('AdminModulesCatalog');\n    }\n\n    protected function filterTabModuleList()\n    {\n        static $list_is_filtered = null;\n\n        if ($list_is_filtered !== null) {\n            return;\n        }\n\n        if (!$this->isFresh(Module::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST, 86400)) {\n            file_put_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST, Tools::addonsRequest('native'));\n        }\n\n        if (!$this->isFresh(Module::CACHE_FILE_ALL_COUNTRY_MODULES_LIST, 86400)) {\n            file_put_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_ALL_COUNTRY_MODULES_LIST, Tools::addonsRequest('native_all'));\n        }\n\n        if (!$this->isFresh(Module::CACHE_FILE_MUST_HAVE_MODULES_LIST, 86400)) {\n            @file_put_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_MUST_HAVE_MODULES_LIST, Tools::addonsRequest('must-have'));\n        }\n\n        libxml_use_internal_errors(true);\n\n        $country_module_list = file_get_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_DEFAULT_COUNTRY_MODULES_LIST);\n        $must_have_module_list = file_get_contents(_PS_ROOT_DIR_ . Module::CACHE_FILE_MUST_HAVE_MODULES_LIST);\n        $all_module_list = array();\n\n        if (!empty($country_module_list) && $country_module_list_xml = @simplexml_load_string($country_module_list)) {\n            $country_module_list_array = array();\n            if (is_object($country_module_list_xml->module)) {\n                foreach ($country_module_list_xml->module as $k => $m) {\n                    $all_module_list[] = (string) $m->name;\n                }\n            }\n        } else {\n            foreach (libxml_get_errors() as $error) {\n                $this->errors[] = $this->trans('Error found : %1$s in country_module_list.xml file.', array($error->message), 'Admin.Modules.Notification');\n            }\n        }\n\n        libxml_clear_errors();\n\n        if (!empty($must_have_module_list) && $must_have_module_list_xml = @simplexml_load_string($must_have_module_list)) {\n            $must_have_module_list_array = array();\n            if (is_object($country_module_list_xml->module)) {\n                foreach ($must_have_module_list_xml->module as $l => $mo) {\n                    $all_module_list[] = (string) $mo->name;\n                }\n            }\n        } else {\n            foreach (libxml_get_errors() as $error) {\n                $this->errors[] = $this->trans('Error found : %1$s in must_have_module_list.xml file.', array($error->message), 'Admin.Modules.Notification');\n            }\n        }\n\n        libxml_clear_errors();\n\n        $this->tab_modules_list['slider_list'] = array_intersect($this->tab_modules_list['slider_list'], $all_module_list);\n\n        $list_is_filtered = true;\n    }\n\n    /**\n     * Initialize the invalid doom page of death.\n     */\n    public function initCursedPage()\n    {\n        $this->layout = 'invalid_token.tpl';\n    }\n\n    /**\n     * Assign smarty variables for the footer.\n     */\n    public function initFooter()\n    {\n        //RTL Support\n        //rtl.js overrides inline styles\n        //iso_code.css overrides default fonts for every language (optional)\n        if ($this->context->language->is_rtl) {\n            $this->addJS(_PS_JS_DIR_ . 'rtl.js');\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/' . $this->context->language->iso_code . '.css', 'all', false);\n        }\n\n        // We assign js and css files on the last step before display template, because controller can add many js and css files\n        $this->context->smarty->assign('css_files', $this->css_files);\n        $this->context->smarty->assign('js_files', array_unique($this->js_files));\n\n        $this->context->smarty->assign(array(\n            'ps_version' => _PS_VERSION_,\n            'timer_start' => $this->timer_start,\n            'iso_is_fr' => strtoupper($this->context->language->iso_code) == 'FR',\n            'modals' => $this->renderModal(),\n        ));\n    }\n\n    /**\n     * @throws Exception\n     * @throws SmartyException\n     */\n    public function initModal()\n    {\n        if ($this->logged_on_addons) {\n            $this->context->smarty->assign(array(\n                'logged_on_addons' => 1,\n                'username_addons' => $this->context->cookie->username_addons,\n            ));\n        }\n\n        // Iso needed to generate Addons login\n        $iso_code_caps = strtoupper($this->context->language->iso_code);\n\n        $this->context->smarty->assign(array(\n            'img_base_path' => __PS_BASE_URI__ . basename(_PS_ADMIN_DIR_) . '/',\n            'check_url_fopen' => (ini_get('allow_url_fopen') ? 'ok' : 'ko'),\n            'check_openssl' => (extension_loaded('openssl') ? 'ok' : 'ko'),\n            'add_permission' => 1,\n            'addons_register_link' => 'https://addons.prestashop.com/' . $this->context->language->iso_code . '/login?'\n                . 'email=' . urlencode($this->context->employee->email)\n                . '&firstname=' . urlencode($this->context->employee->firstname)\n                . '&lastname=' . urlencode($this->context->employee->lastname)\n                . '&website=' . urlencode($this->context->shop->getBaseURL())\n                . '&utm_source=back-office&utm_medium=connect-to-addons'\n                . '&utm_campaign=back-office-' . Tools::strtoupper($this->context->language->iso_code)\n                . '&utm_content=' . (defined('_PS_HOST_MODE_') ? 'cloud' : 'download') . '#createnow',\n            'addons_forgot_password_link' => '//addons.prestashop.com/' . $this->context->language->iso_code . '/forgot-your-password',\n        ));\n\n        $this->modals[] = array(\n            'modal_id' => 'modal_addons_connect',\n            'modal_class' => 'modal-md',\n            'modal_title' => '<i class=\"icon-puzzle-piece\"></i> <a target=\"_blank\" href=\"https://addons.prestashop.com/'\n            . '?utm_source=back-office&utm_medium=modules'\n            . '&utm_campaign=back-office-' . Tools::strtoupper($this->context->language->iso_code)\n            . '&utm_content=' . (defined('_PS_HOST_MODE_') ? 'cloud' : 'download') . '\">PrestaShop Addons</a>',\n            'modal_content' => $this->context->smarty->fetch('controllers/modules/login_addons.tpl'),\n        );\n    }\n\n    /**\n     * @return string\n     *\n     * @throws Exception\n     * @throws SmartyException\n     */\n    public function renderModal()\n    {\n        $modal_render = '';\n        if (is_array($this->modals) && count($this->modals)) {\n            foreach ($this->modals as $modal) {\n                $this->context->smarty->assign($modal);\n                $modal_render .= $this->context->smarty->fetch('modal.tpl');\n            }\n        }\n\n        return $modal_render;\n    }\n\n    /**\n     * Was used to display a list of recommended modules.\n     *\n     * @param string|bool $tracking_source Source information for URL used by \"Install\" button\n     *\n     * @return string Empty\n     *\n     * @deprecated since 1.7.4.0\n     */\n    public function renderModulesList($tracking_source = false)\n    {\n        return '';\n    }\n\n    /**\n     * Function used to render the list to display for this controller.\n     *\n     * @return string|false\n     *\n     * @throws PrestaShopException\n     */\n    public function renderList()\n    {\n        if (!($this->fields_list && is_array($this->fields_list))) {\n            return false;\n        }\n        $this->getList($this->context->language->id);\n\n        // If list has 'active' field, we automatically create bulk action\n        if (isset($this->fields_list) && is_array($this->fields_list) && array_key_exists('active', $this->fields_list)\n            && !empty($this->fields_list['active'])) {\n            if (!is_array($this->bulk_actions)) {\n                $this->bulk_actions = array();\n            }\n\n            $this->bulk_actions = array_merge(array(\n                'enableSelection' => array(\n                    'text' => $this->l('Enable selection'),\n                    'icon' => 'icon-power-off text-success',\n                ),\n                'disableSelection' => array(\n                    'text' => $this->l('Disable selection'),\n                    'icon' => 'icon-power-off text-danger',\n                ),\n                'divider' => array(\n                    'text' => 'divider',\n                ),\n            ), $this->bulk_actions);\n        }\n\n        $helper = new HelperList();\n\n        // Empty list is ok\n        if (!is_array($this->_list)) {\n            $this->displayWarning($this->l('Bad SQL query', 'Helper') . '<br />' . htmlspecialchars($this->_list_error));\n\n            return false;\n        }\n\n        $this->setHelperDisplay($helper);\n        $helper->_default_pagination = $this->_default_pagination;\n        $helper->_pagination = $this->_pagination;\n        $helper->tpl_vars = $this->getTemplateListVars();\n        $helper->tpl_delete_link_vars = $this->tpl_delete_link_vars;\n\n        // For compatibility reasons, we have to check standard actions in class attributes\n        foreach ($this->actions_available as $action) {\n            if (!in_array($action, $this->actions) && isset($this->$action) && $this->$action) {\n                $this->actions[] = $action;\n            }\n        }\n\n        $helper->is_cms = $this->is_cms;\n        $helper->sql = $this->_listsql;\n        $list = $helper->generateList($this->_list, $this->fields_list);\n\n        return $list;\n    }\n\n    public function getTemplateListVars()\n    {\n        return $this->tpl_list_vars;\n    }\n\n    /**\n     * Override to render the view page.\n     *\n     * @return string\n     */\n    public function renderView()\n    {\n        $helper = new HelperView($this);\n        $this->setHelperDisplay($helper);\n        $helper->tpl_vars = $this->getTemplateViewVars();\n        if (null !== $this->base_tpl_view) {\n            $helper->base_tpl = $this->base_tpl_view;\n        }\n        $view = $helper->generateView();\n\n        return $view;\n    }\n\n    public function getTemplateViewVars()\n    {\n        return $this->tpl_view_vars;\n    }\n\n    /**\n     * Override to render the view page.\n     *\n     * @return string|false\n     */\n    public function renderDetails()\n    {\n        return $this->renderList();\n    }\n\n    /**\n     * Function used to render the form for this controller.\n     *\n     * @return string\n     *\n     * @throws Exception\n     * @throws SmartyException\n     */\n    public function renderForm()\n    {\n        if (!$this->default_form_language) {\n            $this->getLanguages();\n        }\n\n        if (Tools::getValue('submitFormAjax')) {\n            $this->content .= $this->context->smarty->fetch('form_submit_ajax.tpl');\n        }\n\n        if ($this->fields_form && is_array($this->fields_form)) {\n            if (!$this->multiple_fieldsets) {\n                $this->fields_form = array(array('form' => $this->fields_form));\n            }\n\n            // For add a fields via an override of $fields_form, use $fields_form_override\n            if (is_array($this->fields_form_override) && !empty($this->fields_form_override)) {\n                $this->fields_form[0]['form']['input'] = array_merge($this->fields_form[0]['form']['input'], $this->fields_form_override);\n            }\n\n            $fields_value = $this->getFieldsValue($this->object);\n\n            Hook::exec('action' . $this->controller_name . 'FormModifier', array(\n                'object' => &$this->object,\n                'fields' => &$this->fields_form,\n                'fields_value' => &$fields_value,\n                'form_vars' => &$this->tpl_form_vars,\n            ));\n\n            $helper = new HelperForm($this);\n            $this->setHelperDisplay($helper);\n            $helper->fields_value = $fields_value;\n            $helper->submit_action = $this->submit_action;\n            $helper->tpl_vars = $this->getTemplateFormVars();\n            $helper->show_cancel_button = (isset($this->show_form_cancel_button)) ? $this->show_form_cancel_button : ($this->display == 'add' || $this->display == 'edit');\n\n            $back = urldecode(Tools::getValue('back', ''));\n            if (empty($back)) {\n                $back = self::$currentIndex . '&token=' . $this->token;\n            }\n            if (!Validate::isCleanHtml($back)) {\n                die(Tools::displayError());\n            }\n\n            $helper->back_url = $back;\n            null !== $this->base_tpl_form ? $helper->base_tpl = $this->base_tpl_form : '';\n            if ($this->access('view')) {\n                if (Tools::getValue('back')) {\n                    $helper->tpl_vars['back'] = Tools::safeOutput(Tools::getValue('back'));\n                } else {\n                    $helper->tpl_vars['back'] = Tools::safeOutput(Tools::getValue(self::$currentIndex . '&token=' . $this->token));\n                }\n            }\n            $form = $helper->generateForm($this->fields_form);\n\n            return $form;\n        }\n    }\n\n    public function getTemplateFormVars()\n    {\n        return $this->tpl_form_vars;\n    }\n\n    public function renderKpis()\n    {\n    }\n\n    /**\n     * Function used to render the options for this controller.\n     *\n     * @return string\n     */\n    public function renderOptions()\n    {\n        Hook::exec('action' . $this->controller_name . 'OptionsModifier', array(\n            'options' => &$this->fields_options,\n            'option_vars' => &$this->tpl_option_vars,\n        ));\n\n        if ($this->fields_options && is_array($this->fields_options)) {\n            if (isset($this->display) && $this->display != 'options' && $this->display != 'list') {\n                $this->show_toolbar = false;\n            } else {\n                $this->display = 'options';\n            }\n\n            unset($this->toolbar_btn);\n            $this->initToolbar();\n            $helper = new HelperOptions($this);\n            $this->setHelperDisplay($helper);\n            $helper->id = $this->id;\n            $helper->tpl_vars = $this->tpl_option_vars;\n            $options = $helper->generateOptions($this->fields_options);\n\n            return $options;\n        }\n    }\n\n    /**\n     * This function sets various display options for helper list.\n     *\n     * @param Helper $helper\n     */\n    public function setHelperDisplay(Helper $helper)\n    {\n        if (empty($this->toolbar_title)) {\n            $this->initToolbarTitle();\n        }\n        // tocheck\n        if ($this->object && $this->object->id) {\n            $helper->id = $this->object->id;\n        }\n\n        // @todo : move that in Helper\n        $helper->title = is_array($this->toolbar_title) ? implode(' ' . Configuration::get('PS_NAVIGATION_PIPE') . ' ', $this->toolbar_title) : $this->toolbar_title;\n        $helper->toolbar_btn = $this->toolbar_btn;\n        $helper->show_toolbar = $this->show_toolbar;\n        $helper->toolbar_scroll = $this->toolbar_scroll;\n        $helper->override_folder = $this->tpl_folder;\n        $helper->actions = $this->actions;\n        $helper->simple_header = $this->list_simple_header;\n        $helper->bulk_actions = $this->bulk_actions;\n        $helper->currentIndex = self::$currentIndex;\n        $helper->className = $this->className;\n        $helper->table = $this->table;\n        $helper->name_controller = Tools::getValue('controller');\n        $helper->orderBy = $this->_orderBy;\n        $helper->orderWay = $this->_orderWay;\n        $helper->listTotal = $this->_listTotal;\n        $helper->shopLink = $this->shopLink;\n        $helper->shopLinkType = $this->shopLinkType;\n        $helper->identifier = $this->identifier;\n        $helper->token = $this->token;\n        $helper->languages = $this->_languages;\n        $helper->specificConfirmDelete = $this->specificConfirmDelete;\n        $helper->imageType = $this->imageType;\n        $helper->no_link = $this->list_no_link;\n        $helper->colorOnBackground = $this->colorOnBackground;\n        $helper->ajax_params = (isset($this->ajax_params) ? $this->ajax_params : null);\n        $helper->default_form_language = $this->default_form_language;\n        $helper->allow_employee_form_lang = $this->allow_employee_form_lang;\n        $helper->multiple_fieldsets = $this->multiple_fieldsets;\n        $helper->row_hover = $this->row_hover;\n        $helper->position_identifier = $this->position_identifier;\n        $helper->position_group_identifier = $this->position_group_identifier;\n        $helper->controller_name = $this->controller_name;\n        $helper->list_id = isset($this->list_id) ? $this->list_id : $this->table;\n        $helper->bootstrap = $this->bootstrap;\n\n        // For each action, try to add the corresponding skip elements list\n        $helper->list_skip_actions = $this->list_skip_actions;\n\n        $this->helper = $helper;\n    }\n\n    /**\n     * @deprecated 1.6.0\n     */\n    public function setDeprecatedMedia()\n    {\n    }\n\n    public function setMedia($isNewTheme = false)\n    {\n        if ($isNewTheme) {\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/new-theme/public/theme.css', 'all', 1);\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/new-theme/public/main.bundle.js');\n            $this->addJqueryPlugin(array('chosen'));\n        } else {\n            //Bootstrap\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/' . $this->bo_css, 'all', 0);\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/vendor/titatoggle-min.css', 'all', 0);\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/public/theme.css', 'all', 0);\n\n            $this->addJquery();\n            $this->addJqueryPlugin(array('scrollTo', 'alerts', 'chosen', 'autosize', 'fancybox'));\n            $this->addJqueryPlugin('growl', null, false);\n            $this->addJqueryUI(array('ui.slider', 'ui.datepicker'));\n\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/bootstrap.min.js');\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/modernizr.min.js');\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/modernizr-loads.js');\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/vendor/moment-with-langs.min.js');\n            $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/public/bundle.js');\n\n            $this->addJS(_PS_JS_DIR_ . 'jquery/plugins/timepicker/jquery-ui-timepicker-addon.js');\n\n            if (!$this->lite_display) {\n                $this->addJS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/js/help.js');\n            }\n\n            if (!Tools::getValue('submitFormAjax')) {\n                $this->addJS(_PS_JS_DIR_ . 'admin/notifications.js');\n            }\n\n            if (defined('_PS_HOST_MODE_') && _PS_HOST_MODE_) {\n                $this->addJS('https://cdn.statuspage.io/se-v2.js');\n\n                Media::addJsDefL('status_operational', $this->l('Operational', null, true, false));\n                Media::addJsDefL('status_degraded_performance', $this->l('Degraded Performance', null, true, false));\n                Media::addJsDefL('status_partial_outage', $this->l('Partial Outage', null, true, false));\n                Media::addJsDefL('status_major_outage', $this->l('Major Outage', null, true, false));\n                Media::addJsDef(array('host_cluster' => defined('_PS_HOST_CLUSTER_') ? _PS_HOST_CLUSTER_ : 'fr1'));\n            }\n\n            // Specific Admin Theme\n            $this->addCSS(__PS_BASE_URI__ . $this->admin_webpath . '/themes/' . $this->bo_theme . '/css/overrides.css', 'all', PHP_INT_MAX);\n        }\n\n        $this->addJS(array(\n            _PS_JS_DIR_ . 'admin.js?v=' . _PS_VERSION_, // TODO: SEE IF REMOVABLE\n            __PS_BASE_URI__ . $this->admin_webpath . '/themes/new-theme/public/cldr.bundle.js',\n            _PS_JS_DIR_ . 'tools.js?v=' . _PS_VERSION_,\n            __PS_BASE_URI__ . $this->admin_webpath . '/public/bundle.js',\n        ));\n\n        Media::addJsDef([\n            'changeFormLanguageUrl' => $this->context->link->getAdminLink(\n                'AdminEmployees',\n                true,\n                [],\n                ['action' => 'formLanguage']\n            ),\n        ]);\n        Media::addJsDef(array('host_mode' => (defined('_PS_HOST_MODE_') && _PS_HOST_MODE_)));\n        Media::addJsDef(array('baseDir' => __PS_BASE_URI__));\n        Media::addJsDef(array('baseAdminDir' => __PS_BASE_URI__ . basename(_PS_ADMIN_DIR_) . '/'));\n        Media::addJsDef(array('currency' => array(\n            'iso_code' => Context::getContext()->currency->iso_code,\n            'sign' => Context::getContext()->currency->sign,\n            'name' => Context::getContext()->currency->name,\n            'format' => Context::getContext()->currency->format,\n        )));\n        Media::addJsDef(\n            array(\n                'currency_specifications' => $this->preparePriceSpecifications($this->context),\n                'number_specifications' => $this->prepareNumberSpecifications($this->context),\n            )\n        );\n\n        // Execute Hook AdminController SetMedia\n        Hook::exec('actionAdminControllerSetMedia');\n    }\n\n    /**\n     * Non-static method which uses AdminController::translate().\n     *\n     * @deprecated use Context::getContext()->getTranslator()->trans($id, $parameters, $domain, $locale); instead\n     *\n     * @param string $string Term or expression in english\n     * @param string|null $class Name of the class\n     * @param bool $addslashes If set to true, the return value will pass through addslashes(). Otherwise, stripslashes().\n     * @param bool $htmlentities If set to true(default), the return value will pass through htmlentities($string, ENT_QUOTES, 'utf-8')\n     *\n     * @return string the translation if available, or the english default text\n     */\n    protected function l($string, $class = null, $addslashes = false, $htmlentities = true)\n    {\n        $translated = $this->translator->trans($string);\n        if ($translated !== $string) {\n            return $translated;\n        }\n\n        if ($class === null || $class == 'AdminTab') {\n            $class = substr(get_class($this), 0, -10);\n        } elseif (strtolower(substr($class, -10)) == 'controller') {\n            /* classname has changed, from AdminXXX to AdminXXXController, so we remove 10 characters and we keep same keys */\n            $class = substr($class, 0, -10);\n        }\n\n        return Translate::getAdminTranslation($string, $class, $addslashes, $htmlentities);\n    }\n\n    /**\n     * Init context and dependencies, handles POST and GET.\n     */\n    public function init()\n    {\n        parent::init();\n\n        if (Tools::getValue('ajax')) {\n            $this->ajax = '1';\n        }\n\n        if (null === $this->context->link) {\n            $protocol_link = (Tools::usingSecureMode() && Configuration::get('PS_SSL_ENABLED')) ? 'https://' : 'http://';\n            $protocol_content = (Tools::usingSecureMode() && Configuration::get('PS_SSL_ENABLED')) ? 'https://' : 'http://';\n            $this->context->link = new Link($protocol_link, $protocol_content);\n        }\n\n        if (isset($_GET['logout'])) {\n            $this->context->employee->logout();\n        }\n        if (isset(Context::getContext()->cookie->last_activity)) {\n            if ($this->context->cookie->last_activity + 900 < time()) {\n                $this->context->employee->logout();\n            } else {\n                $this->context->cookie->last_activity = time();\n            }\n        }\n\n        if (\n            !$this->isAnonymousAllowed()\n            && (\n                $this->controller_name != 'AdminLogin'\n                && (\n                    !isset($this->context->employee)\n                    || !$this->context->employee->isLoggedBack()\n                )\n            )\n        ) {\n            if (isset($this->context->employee)) {\n                $this->context->employee->logout();\n            }\n            $email = false;\n            if (Tools::getValue('email') && Validate::isEmail(Tools::getValue('email'))) {\n                $email = Tools::getValue('email');\n            }\n            Tools::redirectAdmin($this->context->link->getAdminLink('AdminLogin') . ((!isset($_GET['logout']) && $this->controller_name != 'AdminNotFound' && Tools::getValue('controller')) ? '&redirect=' . $this->controller_name : '') . ($email ? '&email=' . $email : ''));\n        }\n\n        // Set current index\n        $current_index = 'index.php' . (($controller = Tools::getValue('controller')) ? '?controller=' . $controller : '');\n        if ($back = Tools::getValue('back')) {\n            $current_index .= '&back=' . urlencode($back);\n        }\n        self::$currentIndex = $current_index;\n\n        if ((int) Tools::getValue('liteDisplaying')) {\n            $this->display_header = false;\n            $this->display_header_javascript = true;\n            $this->display_footer = false;\n            $this->content_only = false;\n            $this->lite_display = true;\n        }\n\n        if ($this->ajax && method_exists($this, 'ajaxPreprocess')) {\n            $this->ajaxPreProcess();\n        }\n\n        $this->context->smarty->assign(array(\n            'table' => $this->table,\n            'current' => self::$currentIndex,\n            'token' => $this->token,\n            'host_mode' => defined('_PS_HOST_MODE_') ? 1 : 0,\n            'stock_management' => (int) Configuration::get('PS_STOCK_MANAGEMENT'),\n            'no_order_tip' => $this->getNotificationTip('order'),\n            'no_customer_tip' => $this->getNotificationTip('customer'),\n            'no_customer_message_tip' => $this->getNotificationTip('customer_message'),\n        ));\n\n        if ($this->display_header) {\n            $this->context->smarty->assign('displayBackOfficeHeader', Hook::exec('displayBackOfficeHeader', array()));\n        }\n\n        $this->context->smarty->assign(array(\n            'displayBackOfficeTop' => Hook::exec('displayBackOfficeTop', array()),\n            'submit_form_ajax' => (int) Tools::getValue('submitFormAjax'),\n        ));\n\n        Employee::setLastConnectionDate($this->context->employee->id);\n\n        $this->initProcess();\n        $this->initBreadcrumbs();\n        $this->initModal();\n        $this->initToolbarFlags();\n        $this->initNotifications();\n    }\n\n    /**\n     * Sets the smarty variables and js defs used to show / hide some notifications.\n     */\n    public function initNotifications()\n    {\n        $notificationsSettings = array(\n            'show_new_orders' => Configuration::get('PS_SHOW_NEW_ORDERS'),\n            'show_new_customers' => Configuration::get('PS_SHOW_NEW_CUSTOMERS'),\n            'show_new_messages' => Configuration::get('PS_SHOW_NEW_MESSAGES '),\n        );\n\n        $this->context->smarty->assign($notificationsSettings);\n\n        Media::addJsDef($notificationsSettings);\n    }\n\n    /**\n     * @throws PrestaShopException\n     */\n    public function initShopContext()\n    {\n        // Do not initialize context when the shop is not installed\n        if (defined('PS_INSTALLATION_IN_PROGRESS')) {\n            return;\n        }\n\n        // Change shop context ?\n        if (Shop::isFeatureActive() && Tools::getValue('setShopContext') !== false) {\n            $this->context->cookie->shopContext = Tools::getValue('setShopContext');\n            $url = parse_url($_SERVER['REQUEST_URI']);\n            $query = (isset($url['query'])) ? $url['query'] : '';\n            parse_str($query, $parse_query);\n            unset($parse_query['setShopContext'], $parse_query['conf']);\n            $http_build_query = http_build_query($parse_query, '', '&');\n            $this->redirect_after = $url['path'] . ($http_build_query ? '?' . $http_build_query : '');\n        } elseif (!Shop::isFeatureActive()) {\n            $this->context->cookie->shopContext = 's-' . (int) Configuration::get('PS_SHOP_DEFAULT');\n        } elseif (Shop::getTotalShops(false, null) < 2 && $this->context->employee->isLoggedBack()) {\n            $this->context->cookie->shopContext = 's-' . (int) $this->context->employee->getDefaultShopID();\n        }\n\n        $shop_id = null;\n        Shop::setContext(Shop::CONTEXT_ALL);\n        if ($this->context->cookie->shopContext && $this->context->employee->isLoggedBack()) {\n            $split = explode('-', $this->context->cookie->shopContext);\n            if (count($split) == 2) {\n                if ($split[0] == 'g') {\n                    if ($this->context->employee->hasAuthOnShopGroup((int) $split[1])) {\n                        Shop::setContext(Shop::CONTEXT_GROUP, (int) $split[1]);\n                    } else {\n                        $shop_id = (int) $this->context->employee->getDefaultShopID();\n                        Shop::setContext(Shop::CONTEXT_SHOP, $shop_id);\n                    }\n                } elseif (Shop::getShop($split[1]) && $this->context->employee->hasAuthOnShop($split[1])) {\n                    $shop_id = (int) $split[1];\n                    Shop::setContext(Shop::CONTEXT_SHOP, $shop_id);\n                } else {\n                    $shop_id = (int) $this->context->employee->getDefaultShopID();\n                    Shop::setContext(Shop::CONTEXT_SHOP, $shop_id);\n                }\n            }\n        }\n\n        // Check multishop context and set right context if need\n        if (!($this->multishop_context & Shop::getContext())) {\n            if (Shop::getContext() == Shop::CONTEXT_SHOP && !($this->multishop_context & Shop::CONTEXT_SHOP)) {\n                Shop::setContext(Shop::CONTEXT_GROUP, Shop::getContextShopGroupID());\n            }\n            if (Shop::getContext() == Shop::CONTEXT_GROUP && !($this->multishop_context & Shop::CONTEXT_GROUP)) {\n                Shop::setContext(Shop::CONTEXT_ALL);\n            }\n        }\n\n        // Replace existing shop if necessary\n        if (!$shop_id) {\n            $this->context->shop = new Shop((int) Configuration::get('PS_SHOP_DEFAULT'));\n        } elseif ($this->context->shop->id != $shop_id) {\n            $this->context->shop = new Shop((int) $shop_id);\n        }\n\n        // Replace current default country\n        $this->context->country = new Country((int) Configuration::get('PS_COUNTRY_DEFAULT'));\n        $this->context->currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n    }\n\n    /**\n     * Retrieve GET and POST value and translate them to actions.\n     */\n    public function initProcess()\n    {\n        if (!isset($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        // Manage list filtering\n        if (Tools::isSubmit('submitFilter' . $this->list_id)\n            || $this->context->cookie->{'submitFilter' . $this->list_id} !== false\n            || Tools::getValue($this->list_id . 'Orderby')\n            || Tools::getValue($this->list_id . 'Orderway')) {\n            $this->filter = true;\n        }\n\n        $this->id_object = (int) Tools::getValue($this->identifier);\n\n        /* Delete object image */\n        if (isset($_GET['deleteImage'])) {\n            if ($this->access('delete')) {\n                $this->action = 'delete_image';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['delete' . $this->table])) {\n            /* Delete object */\n            if ($this->access('delete')) {\n                $this->action = 'delete';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif ((isset($_GET['status' . $this->table]) || isset($_GET['status'])) && Tools::getValue($this->identifier)) {\n            /* Change object statuts (active, inactive) */\n            if ($this->access('edit')) {\n                $this->action = 'status';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['position'])) {\n            /* Move an object */\n            if ($this->access('edit') == '1') {\n                $this->action = 'position';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::isSubmit('submitAdd' . $this->table)\n                 || Tools::isSubmit('submitAdd' . $this->table . 'AndStay')\n                 || Tools::isSubmit('submitAdd' . $this->table . 'AndPreview')\n                 || Tools::isSubmit('submitAdd' . $this->table . 'AndBackToParent')) {\n            // case 1: updating existing entry\n            if ($this->id_object) {\n                if ($this->access('edit')) {\n                    $this->action = 'save';\n                    if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay')) {\n                        $this->display = 'edit';\n                    } else {\n                        $this->display = 'list';\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n                }\n            } else {\n                // case 2: creating new entry\n                if ($this->access('add')) {\n                    $this->action = 'save';\n                    if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay')) {\n                        $this->display = 'edit';\n                    } else {\n                        $this->display = 'list';\n                    }\n                } else {\n                    $this->errors[] = $this->trans('You do not have permission to add this.', array(), 'Admin.Notifications.Error');\n                }\n            }\n        } elseif (isset($_GET['add' . $this->table])) {\n            if ($this->access('add')) {\n                $this->action = 'new';\n                $this->display = 'add';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to add this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['update' . $this->table], $_GET[$this->identifier])) {\n            $this->display = 'edit';\n            if (!$this->access('edit')) {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['view' . $this->table])) {\n            if ($this->access('view')) {\n                $this->display = 'view';\n                $this->action = 'view';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to view this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['details' . $this->table])) {\n            if ($this->access('view')) {\n                $this->display = 'details';\n                $this->action = 'details';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to view this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (isset($_GET['export' . $this->table])) {\n            if ($this->access('view')) {\n                $this->action = 'export';\n            }\n        } elseif (isset($_POST['submitReset' . $this->list_id])) {\n            /* Cancel all filters for this tab */\n            $this->action = 'reset_filters';\n        } elseif (Tools::isSubmit('submitOptions' . $this->table) || Tools::isSubmit('submitOptions')) {\n            /* Submit options list */\n            $this->display = 'options';\n            if ($this->access('edit')) {\n                $this->action = 'update_options';\n            } else {\n                $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n            }\n        } elseif (Tools::getValue('action') && method_exists($this, 'process' . ucfirst(Tools::toCamelCase(Tools::getValue('action'))))) {\n            $this->action = Tools::getValue('action');\n        } elseif (Tools::isSubmit('submitFields') && $this->required_database && $this->access('add') && $this->access('delete')) {\n            $this->action = 'update_fields';\n        } elseif (is_array($this->bulk_actions)) {\n            $submit_bulk_actions = array_merge(array(\n                'enableSelection' => array(\n                    'text' => $this->l('Enable selection'),\n                    'icon' => 'icon-power-off text-success',\n                ),\n                'disableSelection' => array(\n                    'text' => $this->l('Disable selection'),\n                    'icon' => 'icon-power-off text-danger',\n                ),\n            ), $this->bulk_actions);\n            foreach ($submit_bulk_actions as $bulk_action => $params) {\n                if (Tools::isSubmit('submitBulk' . $bulk_action . $this->table) || Tools::isSubmit('submitBulk' . $bulk_action)) {\n                    if ($bulk_action === 'delete') {\n                        if ($this->access('delete')) {\n                            $this->action = 'bulk' . $bulk_action;\n                            $this->boxes = Tools::getValue($this->table . 'Box');\n                            if (empty($this->boxes) && $this->table == 'attribute') {\n                                $this->boxes = Tools::getValue($this->table . '_valuesBox');\n                            }\n                        } else {\n                            $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n                        }\n\n                        break;\n                    } elseif ($this->access('edit')) {\n                        $this->action = 'bulk' . $bulk_action;\n                        $this->boxes = Tools::getValue($this->table . 'Box');\n                    } else {\n                        $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n                    }\n\n                    break;\n                } elseif (Tools::isSubmit('submitBulk')) {\n                    if ($bulk_action === 'delete') {\n                        if ($this->access('delete')) {\n                            $this->action = 'bulk' . $bulk_action;\n                            $this->boxes = Tools::getValue($this->table . 'Box');\n                        } else {\n                            $this->errors[] = $this->trans('You do not have permission to delete this.', array(), 'Admin.Notifications.Error');\n                        }\n\n                        break;\n                    } elseif ($this->access('edit')) {\n                        $this->action = 'bulk' . Tools::getValue('select_submitBulk');\n                        $this->boxes = Tools::getValue($this->table . 'Box');\n                    } else {\n                        $this->errors[] = $this->trans('You do not have permission to edit this.', array(), 'Admin.Notifications.Error');\n                    }\n\n                    break;\n                }\n            }\n        } elseif (!empty($this->fields_options) && empty($this->fields_list)) {\n            $this->display = 'options';\n        }\n    }\n\n    /**\n     * Get the current objects' list form the database.\n     *\n     * @param int $id_lang Language used for display\n     * @param string|null $order_by ORDER BY clause\n     * @param string|null $order_way Order way (ASC, DESC)\n     * @param int $start Offset in LIMIT clause\n     * @param int|null $limit Row count in LIMIT clause\n     * @param int|bool $id_lang_shop\n     *\n     * @throws PrestaShopDatabaseException\n     * @throws PrestaShopException\n     */\n    public function getList(\n        $id_lang,\n        $order_by = null,\n        $order_way = null,\n        $start = 0,\n        $limit = null,\n        $id_lang_shop = false\n    ) {\n        Hook::exec('action' . $this->controller_name . 'ListingFieldsModifier', array(\n            'select' => &$this->_select,\n            'join' => &$this->_join,\n            'where' => &$this->_where,\n            'group_by' => &$this->_group,\n            'order_by' => &$this->_orderBy,\n            'order_way' => &$this->_orderWay,\n            'fields' => &$this->fields_list,\n        ));\n\n        if (!isset($this->list_id)) {\n            $this->list_id = $this->table;\n        }\n\n        if (!Validate::isTableOrIdentifier($this->table)) {\n            throw new PrestaShopException(sprintf('Table name %s is invalid:', $this->table));\n        }\n\n        /* Check params validity */\n        if (!is_numeric($start) || !Validate::isUnsignedId($id_lang)) {\n            throw new PrestaShopException('get list params is not valid');\n        }\n\n        $limit = $this->checkSqlLimit($limit);\n\n        /* Determine offset from current page */\n        $start = 0;\n        if ((int) Tools::getValue('submitFilter' . $this->list_id)) {\n            $start = ((int) Tools::getValue('submitFilter' . $this->list_id) - 1) * $limit;\n        } elseif (\n            empty($start)\n            && isset($this->context->cookie->{$this->list_id . '_start'})\n            && Tools::isSubmit('export' . $this->table)\n        ) {\n            $start = $this->context->cookie->{$this->list_id . '_start'};\n        }\n\n        // Either save or reset the offset in the cookie\n        if ($start) {\n            $this->context->cookie->{$this->list_id . '_start'} = $start;\n        } elseif (isset($this->context->cookie->{$this->list_id . '_start'})) {\n            unset($this->context->cookie->{$this->list_id . '_start'});\n        }\n\n        /* Cache */\n        $this->_lang = (int) $id_lang;\n\n        // Add SQL shop restriction\n        $select_shop = '';\n        if ($this->shopLinkType) {\n            $select_shop = ', shop.name as shop_name ';\n        }\n\n        if ($this->multishop_context && Shop::isTableAssociated($this->table) && !empty($this->className)) {\n            if (Shop::getContext() != Shop::CONTEXT_ALL || !$this->context->employee->isSuperAdmin()) {\n                $test_join = !preg_match('#`?' . preg_quote(_DB_PREFIX_ . $this->table . '_shop') . '`? *sa#', $this->_join);\n                if (Shop::isFeatureActive() && $test_join && Shop::isTableAssociated($this->table)) {\n                    $this->_where .= ' AND EXISTS (\n                        SELECT 1\n                        FROM `' . _DB_PREFIX_ . $this->table . '_shop` sa\n                        WHERE a.`' . bqSQL($this->identifier) . '` = sa.`' . bqSQL($this->identifier) . '`\n                         AND sa.id_shop IN (' . implode(', ', Shop::getContextListShopID()) . ')\n                    )';\n                }\n            }\n        }\n\n        $fromClause = $this->getFromClause();\n        $joinClause = $this->getJoinClause($id_lang, $id_lang_shop);\n        $whereClause = $this->getWhereClause();\n        $orderByClause = $this->getOrderByClause($order_by, $order_way);\n\n        $shouldLimitSqlResults = $this->shouldLimitSqlResults($limit);\n\n        do {\n            $this->_listsql = '';\n\n            if ($this->explicitSelect) {\n                foreach ($this->fields_list as $key => $array_value) {\n                    // Add it only if it is not already in $this->_select\n                    if (isset($this->_select) && preg_match('/[\\s]`?' . preg_quote($key, '/') . '`?\\s*,/', $this->_select)) {\n                        continue;\n                    }\n\n                    if (isset($array_value['filter_key'])) {\n                        $this->_listsql .= str_replace('!', '.`', $array_value['filter_key']) . '` AS `' . $key . '`, ';\n                    } elseif ($key == 'id_' . $this->table) {\n                        $this->_listsql .= 'a.`' . bqSQL($key) . '`, ';\n                    } elseif ($key != 'image' && !preg_match('/' . preg_quote($key, '/') . '/i', $this->_select)) {\n                        $this->_listsql .= '`' . bqSQL($key) . '`, ';\n                    }\n                }\n                $this->_listsql = rtrim(trim($this->_listsql), ',');\n            } else {\n                $this->_listsql .= ($this->lang ? 'b.*,' : '') . ' a.*';\n            }\n\n            $this->_listsql .= \"\\n\" . (isset($this->_select) ? ', ' . rtrim($this->_select, ', ') : '') . $select_shop;\n\n            $limitClause = ' ' . (($shouldLimitSqlResults) ? ' LIMIT ' . (int) $start . ', ' . (int) $limit : '');\n\n            if ($this->_use_found_rows || isset($this->_filterHaving) || isset($this->_having)) {\n                $this->_listsql = 'SELECT SQL_CALC_FOUND_ROWS ' . ($this->_tmpTableFilter ? ' * FROM (SELECT ' : '') .\n                    $this->_listsql .\n                    $fromClause .\n                    $joinClause .\n                    $whereClause .\n                    $orderByClause .\n                    $limitClause;\n\n                $list_count = 'SELECT FOUND_ROWS() AS `' . _DB_PREFIX_ . $this->table . '`';\n            } else {\n                $this->_listsql = 'SELECT ' . ($this->_tmpTableFilter ? ' * FROM (SELECT ' : '') .\n                    $this->_listsql .\n                    $fromClause .\n                    $joinClause .\n                    $whereClause .\n                    $orderByClause .\n                    $limitClause;\n\n                $list_count = 'SELECT COUNT(*) AS `' . _DB_PREFIX_ . $this->table . '` ' .\n                    $fromClause .\n                    $joinClause .\n                    $whereClause;\n            }\n\n            $this->_list = Db::getInstance()->executeS($this->_listsql, true, false);\n\n            if ($this->_list === false) {\n                $this->_list_error = Db::getInstance()->getMsgError();\n\n                break;\n            }\n\n            $this->_listTotal = Db::getInstance()->getValue($list_count, false);\n\n            if ($shouldLimitSqlResults) {\n                $start = (int) $start - (int) $limit;\n                if ($start < 0) {\n                    break;\n                }\n            } else {\n                break;\n            }\n        } while (empty($this->_list));\n\n        Hook::exec('action' . $this->controller_name . 'ListingResultsModifier', array(\n            'list' => &$this->_list,\n            'list_total' => &$this->_listTotal,\n        ));\n    }\n\n    /**\n     * @return string\n     */\n    protected function getFromClause()\n    {\n        $sql_table = $this->table == 'order' ? 'orders' : $this->table;\n\n        return \"\\n\" . 'FROM `' . _DB_PREFIX_ . $sql_table . '` a ';\n    }\n\n    /**\n     * @param $id_lang\n     * @param $id_lang_shop\n     *\n     * @return string\n     */\n    protected function getJoinClause($id_lang, $id_lang_shop)\n    {\n        $shopJoinClause = '';\n        if ($this->shopLinkType) {\n            $shopJoinClause = ' LEFT JOIN `' . _DB_PREFIX_ . bqSQL($this->shopLinkType) . '` shop\n                            ON a.`id_' . bqSQL($this->shopLinkType) . '` = shop.`id_' . bqSQL($this->shopLinkType) . '`';\n        }\n\n        return \"\\n\" . $this->getLanguageJoinClause($id_lang, $id_lang_shop) .\n            \"\\n\" . (isset($this->_join) ? $this->_join . ' ' : '') .\n            \"\\n\" . $shopJoinClause;\n    }\n\n    /**\n     * @param $idLang\n     * @param $idLangShop\n     *\n     * @return string\n     */\n    protected function getLanguageJoinClause($idLang, $idLangShop)\n    {\n        $languageJoinClause = '';\n        if ($this->lang) {\n            $languageJoinClause = 'LEFT JOIN `' . _DB_PREFIX_ . bqSQL($this->table) . '_lang` b\n                ON (b.`' . bqSQL($this->identifier) . '` = a.`' . bqSQL($this->identifier) . '` AND b.`id_lang` = ' . (int) $idLang;\n\n            if ($idLangShop) {\n                if (!Shop::isFeatureActive()) {\n                    $languageJoinClause .= ' AND b.`id_shop` = ' . (int) Configuration::get('PS_SHOP_DEFAULT');\n                } elseif (Shop::getContext() == Shop::CONTEXT_SHOP) {\n                    $languageJoinClause .= ' AND b.`id_shop` = ' . (int) $idLangShop;\n                } else {\n                    $languageJoinClause .= ' AND b.`id_shop` = a.id_shop_default';\n                }\n            }\n            $languageJoinClause .= ')';\n        }\n\n        return $languageJoinClause;\n    }\n\n    /**\n     * @return string\n     */\n    protected function getWhereClause()\n    {\n        $whereShop = '';\n        if ($this->shopLinkType) {\n            $whereShop = Shop::addSqlRestriction($this->shopShareDatas, 'a', $this->shopLinkType);\n        }\n        $whereClause = ' WHERE 1 ' . (isset($this->_where) ? $this->_where . ' ' : '') .\n            ($this->deleted ? 'AND a.`deleted` = 0 ' : '') .\n            (isset($this->_filter) ? $this->_filter : '') . $whereShop . \"\\n\" .\n            (isset($this->_group) ? $this->_group . ' ' : '') . \"\\n\" .\n            $this->getHavingClause();\n\n        return $whereClause;\n    }\n\n    /**\n     * @param $orderBy\n     * @param $orderDirection\n     *\n     * @return string\n     */\n    protected function getOrderByClause($orderBy, $orderDirection)\n    {\n        $this->_orderBy = $this->checkOrderBy($orderBy);\n        $this->_orderWay = $this->checkOrderDirection($orderDirection);\n\n        return ' ORDER BY ' . ((str_replace('`', '', $this->_orderBy) == $this->identifier) ? 'a.' : '') .\n            $this->_orderBy . ' ' . $this->_orderWay .\n            ($this->_tmpTableFilter ? ') tmpTable WHERE 1' . $this->_tmpTableFilter : '');\n    }\n\n    /**\n     * @param $orderBy\n     *\n     * @return false|string\n     */\n    protected function checkOrderBy($orderBy)\n    {\n        if (empty($orderBy)) {\n            $prefix = $this->getCookieFilterPrefix();\n\n            if ($this->context->cookie->{$prefix . $this->list_id . 'Orderby'}) {\n                $orderBy = $this->context->cookie->{$prefix . $this->list_id . 'Orderby'};\n            } elseif ($this->_orderBy) {\n                $orderBy = $this->_orderBy;\n            } else {\n                $orderBy = $this->_defaultOrderBy;\n            }\n        }\n\n        /* Check params validity */\n        if (!Validate::isOrderBy($orderBy)) {\n            throw new PrestaShopException('Invalid \"order by\" clause.');\n        }\n\n        if (!isset($this->fields_list[$orderBy]['order_key']) && isset($this->fields_list[$orderBy]['filter_key'])) {\n            $this->fields_list[$orderBy]['order_key'] = $this->fields_list[$orderBy]['filter_key'];\n        }\n\n        if (isset($this->fields_list[$orderBy]['order_key'])) {\n            $orderBy = $this->fields_list[$orderBy]['order_key'];\n        }\n\n        if (preg_match('/[.!]/', $orderBy)) {\n            $orderBySplit = preg_split('/[.!]/', $orderBy);\n            $orderBy = bqSQL($orderBySplit[0]) . '.`' . bqSQL($orderBySplit[1]) . '`';\n        } elseif ($orderBy) {\n            $orderBy = bqSQL($orderBy);\n        }\n\n        return $orderBy;\n    }\n\n    /**\n     * @param $orderDirection\n     *\n     * @return string\n     */\n    protected function checkOrderDirection($orderDirection)\n    {\n        $prefix = $this->getCookieOrderByPrefix();\n        if (empty($orderDirection)) {\n            if ($this->context->cookie->{$prefix . $this->list_id . 'Orderway'}) {\n                $orderDirection = $this->context->cookie->{$prefix . $this->list_id . 'Orderway'};\n            } elseif ($this->_orderWay) {\n                $orderDirection = $this->_orderWay;\n            } else {\n                $orderDirection = $this->_defaultOrderWay;\n            }\n        }\n\n        if (!Validate::isOrderWay($orderDirection)) {\n            throw new PrestaShopException('Invalid order direction.');\n        }\n\n        return pSQL(Tools::strtoupper($orderDirection));\n    }\n\n    /**\n     * @return mixed\n     */\n    protected function getCookieOrderByPrefix()\n    {\n        return str_replace(array('admin', 'controller'), '', Tools::strtolower(get_class($this)));\n    }\n\n    /**\n     * @return string\n     */\n    protected function getHavingClause()\n    {\n        $havingClause = '';\n        if (isset($this->_filterHaving) || isset($this->_having)) {\n            $havingClause = ' HAVING ';\n            if (isset($this->_filterHaving)) {\n                $havingClause .= ltrim($this->_filterHaving, ' AND ');\n            }\n            if (isset($this->_having)) {\n                $havingClause .= $this->_having . ' ';\n            }\n        }\n\n        return $havingClause;\n    }\n\n    /**\n     * @param $limit\n     *\n     * @return bool\n     */\n    protected function shouldLimitSqlResults($limit)\n    {\n        return $limit !== false;\n    }\n\n    /**\n     * @param $limit\n     *\n     * @return int\n     */\n    protected function checkSqlLimit($limit)\n    {\n        if (empty($limit)) {\n            if (\n                isset($this->context->cookie->{$this->list_id . '_pagination'}) &&\n                $this->context->cookie->{$this->list_id . '_pagination'}\n            ) {\n                $limit = $this->context->cookie->{$this->list_id . '_pagination'};\n            } else {\n                $limit = $this->_default_pagination;\n            }\n        }\n\n        $limit = (int) Tools::getValue($this->list_id . '_pagination', $limit);\n        if (in_array($limit, $this->_pagination) && $limit != $this->_default_pagination) {\n            $this->context->cookie->{$this->list_id . '_pagination'} = $limit;\n        } else {\n            unset($this->context->cookie->{$this->list_id . '_pagination'});\n        }\n\n        if (!is_numeric($limit)) {\n            throw new PrestaShopException('Invalid limit. It should be a numeric.');\n        }\n\n        return $limit;\n    }\n\n    /**\n     * @param array|string $filter_modules_list\n     * @param string|bool $tracking_source\n     *\n     * @return bool\n     *\n     * @throws PrestaShopException\n     */\n    public function getModulesList($filter_modules_list, $tracking_source = false)\n    {\n        if (!is_array($filter_modules_list) && null !== $filter_modules_list) {\n            $filter_modules_list = array($filter_modules_list);\n        }\n\n        if (null === $filter_modules_list || !count($filter_modules_list)) {\n            return false;\n        } //if there is no modules to display just return false;\n\n        $all_modules = Module::getModulesOnDisk(true);\n        $this->modules_list = array();\n        foreach ($all_modules as $module) {\n            $perm = true;\n            if ($module->id) {\n                $perm &= Module::getPermissionStatic($module->id, 'configure');\n            } else {\n                $id_admin_module = Tab::getIdFromClassName('AdminModules');\n                $access = Profile::getProfileAccess($this->context->employee->id_profile, $id_admin_module);\n                if (!$access['edit']) {\n                    $perm &= false;\n                }\n            }\n\n            if (in_array($module->name, $filter_modules_list) && $perm) {\n                $this->fillModuleData($module, 'array', null, $tracking_source);\n                $this->modules_list[array_search($module->name, $filter_modules_list)] = $module;\n            }\n        }\n        ksort($this->modules_list);\n\n        if (count($this->modules_list)) {\n            return true;\n        }\n\n        return false; //no module found on disk just return false;\n    }\n\n    /**\n     * @return array\n     */\n    public function getLanguages()\n    {\n        $cookie = $this->context->cookie;\n        $this->allow_employee_form_lang = (int) Configuration::get('PS_BO_ALLOW_EMPLOYEE_FORM_LANG');\n        if ($this->allow_employee_form_lang && !$cookie->employee_form_lang) {\n            $cookie->employee_form_lang = (int) Configuration::get('PS_LANG_DEFAULT');\n        }\n\n        $lang_exists = false;\n        $this->_languages = Language::getLanguages(false);\n        foreach ($this->_languages as $lang) {\n            if (isset($cookie->employee_form_lang) && $cookie->employee_form_lang == $lang['id_lang']) {\n                $lang_exists = true;\n            }\n        }\n\n        $this->default_form_language = $lang_exists ? (int) $cookie->employee_form_lang : (int) Configuration::get('PS_LANG_DEFAULT');\n\n        foreach ($this->_languages as $k => $language) {\n            $this->_languages[$k]['is_default'] = (int) ($language['id_lang'] == $this->default_form_language);\n        }\n\n        return $this->_languages;\n    }\n\n    /**\n     * Return the list of fields value.\n     *\n     * @param ObjectModel $obj Object\n     *\n     * @return array\n     */\n    public function getFieldsValue($obj)\n    {\n        foreach ($this->fields_form as $fieldset) {\n            if (isset($fieldset['form']['input'])) {\n                foreach ($fieldset['form']['input'] as $input) {\n                    if (!isset($this->fields_value[$input['name']])) {\n                        if (isset($input['type']) && $input['type'] == 'shop') {\n                            if ($obj->id) {\n                                $result = Shop::getShopById((int) $obj->id, $this->identifier, $this->table);\n                                foreach ($result as $row) {\n                                    $this->fields_value['shop'][$row['id_' . $input['type']]][] = $row['id_shop'];\n                                }\n                            }\n                        } elseif (isset($input['lang']) && $input['lang']) {\n                            foreach ($this->_languages as $language) {\n                                $field_value = $this->getFieldValue($obj, $input['name'], $language['id_lang']);\n                                if (empty($field_value)) {\n                                    if (isset($input['default_value']) && is_array($input['default_value']) && isset($input['default_value'][$language['id_lang']])) {\n                                        $field_value = $input['default_value'][$language['id_lang']];\n                                    } elseif (isset($input['default_value'])) {\n                                        $field_value = $input['default_value'];\n                                    }\n                                }\n                                $this->fields_value[$input['name']][$language['id_lang']] = $field_value;\n                            }\n                        } else {\n                            $field_value = $this->getFieldValue($obj, $input['name']);\n                            if ($field_value === false && isset($input['default_value'])) {\n                                $field_value = $input['default_value'];\n                            }\n                            $this->fields_value[$input['name']] = $field_value;\n                        }\n                    }\n                }\n            }\n        }\n\n        return $this->fields_value;\n    }\n\n    /**\n     * Return field value if possible (both classical and multilingual fields).\n     *\n     * Case 1 : Return value if present in $_POST / $_GET\n     * Case 2 : Return object value\n     *\n     * @param ObjectModel $obj Object\n     * @param string $key Field name\n     * @param int|null $id_lang Language id (optional)\n     *\n     * @return string\n     */\n    public function getFieldValue($obj, $key, $id_lang = null)\n    {\n        if ($id_lang) {\n            $default_value = (isset($obj->id) && $obj->id && isset($obj->{$key}[$id_lang])) ? $obj->{$key}[$id_lang] : false;\n        } else {\n            $default_value = isset($obj->{$key}) ? $obj->{$key} : false;\n        }\n\n        return Tools::getValue($key . ($id_lang ? '_' . $id_lang : ''), $default_value);\n    }\n\n    /**\n     * Manage page display (form, list...).\n     *\n     * @param string|bool $class_name Allow to validate a different class than the current one\n     *\n     * @throws PrestaShopException\n     */\n    public function validateRules($class_name = false)\n    {\n        if (!$class_name) {\n            $class_name = $this->className;\n        }\n\n        /** @var $object ObjectModel */\n        $object = new $class_name();\n\n        if (method_exists($this, 'getValidationRules')) {\n            $definition = $this->getValidationRules();\n        } else {\n            $definition = ObjectModel::getDefinition($class_name);\n        }\n\n        $default_language = new Language((int) Configuration::get('PS_LANG_DEFAULT'));\n        $languages = Language::getLanguages(false);\n\n        foreach ($definition['fields'] as $field => $def) {\n            $skip = array();\n            if (in_array($field, array('passwd', 'no-picture'))) {\n                $skip = array('required');\n            }\n\n            if (isset($def['lang']) && $def['lang']) {\n                if (isset($def['required']) && $def['required']) {\n                    $value = Tools::getValue($field . '_' . $default_language->id);\n                    // !isset => not exist || \"\" == $value can be === 0 (before, empty $value === 0 returned true)\n                    if (!isset($value) || '' == $value) {\n                        $this->errors[$field . '_' . $default_language->id] = $this->trans(\n                            'The field %field_name% is required at least in %lang%.',\n                            array('%field_name%' => $object->displayFieldName($field, $class_name), '%lang%' => $default_language->name),\n                            'Admin.Notifications.Error'\n                        );\n                    }\n                }\n\n                foreach ($languages as $language) {\n                    $value = Tools::getValue($field . '_' . $language['id_lang']);\n                    if (!empty($value)) {\n                        if (($error = $object->validateField($field, $value, $language['id_lang'], $skip, true)) !== true) {\n                            $this->errors[$field . '_' . $language['id_lang']] = $error;\n                        }\n                    }\n                }\n            } elseif (($error = $object->validateField($field, Tools::getValue($field), null, $skip, true)) !== true) {\n                $this->errors[$field] = $error;\n            }\n        }\n\n        /* Overload this method for custom checking */\n        $this->_childValidation();\n\n        /* Checking for multilingual fields validity */\n        if (isset($rules['validateLang']) && is_array($rules['validateLang'])) {\n            foreach ($rules['validateLang'] as $field_lang => $function) {\n                foreach ($languages as $language) {\n                    if (($value = Tools::getValue($field_lang . '_' . $language['id_lang'])) !== false && !empty($value)) {\n                        if (Tools::strtolower($function) == 'iscleanhtml' && Configuration::get('PS_ALLOW_HTML_IFRAME')) {\n                            $res = Validate::$function($value, true);\n                        } else {\n                            $res = Validate::$function($value);\n                        }\n                        if (!$res) {\n                            $this->errors[$field_lang . '_' . $language['id_lang']] = $this->trans(\n                                'The %field_name% field (%lang%) is invalid.',\n                                array('%field_name%' => call_user_func(array($class_name, 'displayFieldName'), $field_lang, $class_name), '%lang%' => $language['name']),\n                                'Admin.Notifications.Error'\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Overload this method for custom checking.\n     */\n    protected function _childValidation()\n    {\n    }\n\n    /**\n     * Display object details.\n     */\n    public function viewDetails()\n    {\n    }\n\n    /**\n     * Called before deletion.\n     *\n     * @param ObjectModel $object Object\n     *\n     * @return bool\n     */\n    protected function beforeDelete($object)\n    {\n        return false;\n    }\n\n    /**\n     * Called before deletion.\n     *\n     * @param ObjectModel $object Object\n     * @param int $old_id\n     *\n     * @return bool\n     */\n    protected function afterDelete($object, $old_id)\n    {\n        return true;\n    }\n\n    /**\n     * @param ObjectModel $object\n     *\n     * @return bool\n     */\n    protected function afterAdd($object)\n    {\n        return true;\n    }\n\n    /**\n     * @param ObjectModel $object\n     *\n     * @return bool\n     */\n    protected function afterUpdate($object)\n    {\n        return true;\n    }\n\n    /**\n     * Check rights to view the current tab.\n     *\n     * @return bool\n     */\n    protected function afterImageUpload()\n    {\n        return true;\n    }\n\n    /**\n     * Copy data values from $_POST to object.\n     *\n     * @param ObjectModel &$object Object\n     * @param string $table Object table\n     */\n    protected function copyFromPost(&$object, $table)\n    {\n        /* Classical fields */\n        foreach ($_POST as $key => $value) {\n            if (array_key_exists($key, $object) && $key != 'id_' . $table) {\n                /* Do not take care of password field if empty */\n                if ($key == 'passwd' && Tools::getValue('id_' . $table) && empty($value)) {\n                    continue;\n                }\n                /* Automatically hash password in MD5 */\n                if ($key == 'passwd' && !empty($value)) {\n                    $value = $this->get('hashing')->hash($value, _COOKIE_KEY_);\n                }\n                $object->{$key} = $value;\n            }\n        }\n\n        /* Multilingual fields */\n        $class_vars = get_class_vars(get_class($object));\n        $fields = array();\n        if (isset($class_vars['definition']['fields'])) {\n            $fields = $class_vars['definition']['fields'];\n        }\n\n        foreach ($fields as $field => $params) {\n            if (array_key_exists('lang', $params) && $params['lang']) {\n                foreach (Language::getIDs(false) as $id_lang) {\n                    if (Tools::isSubmit($field . '_' . (int) $id_lang)) {\n                        $object->{$field}[(int) $id_lang] = Tools::getValue($field . '_' . (int) $id_lang);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Returns an array with selected shops and type (group or boutique shop).\n     *\n     * @param string $table\n     *\n     * @return array\n     */\n    protected function getSelectedAssoShop($table)\n    {\n        if (!Shop::isFeatureActive() || !Shop::isTableAssociated($table)) {\n            return array();\n        }\n\n        $shops = Shop::getShops(true, null, true);\n        if (count($shops) == 1 && isset($shops[0])) {\n            return array($shops[0], 'shop');\n        }\n\n        $assos = array();\n        if (Tools::isSubmit('checkBoxShopAsso_' . $table)) {\n            foreach (Tools::getValue('checkBoxShopAsso_' . $table) as $id_shop => $value) {\n                $assos[] = (int) $id_shop;\n            }\n        } elseif (Shop::getTotalShops(false) == 1) {\n            // if we do not have the checkBox multishop, we can have an admin with only one shop and being in multishop\n            $assos[] = (int) Shop::getContextShopID();\n        }\n\n        return $assos;\n    }\n\n    /**\n     * Update the associations of shops.\n     *\n     * @param int $id_object\n     *\n     * @return bool|void\n     *\n     * @throws PrestaShopDatabaseException\n     */\n    protected function updateAssoShop($id_object)\n    {\n        if (!Shop::isFeatureActive()) {\n            return;\n        }\n\n        if (!Shop::isTableAssociated($this->table)) {\n            return;\n        }\n\n        $assos_data = $this->getSelectedAssoShop($this->table);\n\n        // Get list of shop id we want to exclude from asso deletion\n        $exclude_ids = $assos_data;\n        foreach (Db::getInstance()->executeS('SELECT id_shop FROM ' . _DB_PREFIX_ . 'shop') as $row) {\n            if (!$this->context->employee->hasAuthOnShop($row['id_shop'])) {\n                $exclude_ids[] = $row['id_shop'];\n            }\n        }\n        Db::getInstance()->delete($this->table . '_shop', '`' . bqSQL($this->identifier) . '` = ' . (int) $id_object . ($exclude_ids ? ' AND id_shop NOT IN (' . implode(', ', array_map('intval', $exclude_ids)) . ')' : ''));\n\n        $insert = array();\n        foreach ($assos_data as $id_shop) {\n            $insert[] = array(\n                $this->identifier => (int) $id_object,\n                'id_shop' => (int) $id_shop,\n            );\n        }\n\n        return Db::getInstance()->insert($this->table . '_shop', $insert, false, true, Db::INSERT_IGNORE);\n    }\n\n    /**\n     * @param mixed $value\n     * @param array $field\n     *\n     * @return bool\n     */\n    protected function validateField($value, $field)\n    {\n        if (isset($field['validation'])) {\n            $valid_method_exists = method_exists('Validate', $field['validation']);\n            if ((!isset($field['empty']) || !$field['empty'] || (isset($field['empty']) && $field['empty'] && $value)) && $valid_method_exists) {\n                $field_validation = $field['validation'];\n                if (!Validate::$field_validation($value)) {\n                    $this->errors[] = $this->trans('%s: Incorrect value', array($field['title']), 'Admin.Notifications.Error');\n\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Can be overridden.\n     */\n    public function beforeUpdateOptions()\n    {\n    }\n\n    /**\n     * Overload this method for custom checking.\n     *\n     * @param int $id Object id used for deleting images\n     *\n     * @return bool\n     */\n    protected function postImage($id)\n    {\n        if (isset($this->fieldImageSettings['name'], $this->fieldImageSettings['dir'])) {\n            return $this->uploadImage($id, $this->fieldImageSettings['name'], $this->fieldImageSettings['dir'] . '/');\n        } elseif (!empty($this->fieldImageSettings)) {\n            foreach ($this->fieldImageSettings as $image) {\n                if (isset($image['name'], $image['dir'])) {\n                    $this->uploadImage($id, $image['name'], $image['dir'] . '/');\n                }\n            }\n        }\n\n        return !count($this->errors) ? true : false;\n    }\n\n    /**\n     * @param int $id\n     * @param string $name\n     * @param string $dir\n     * @param string|bool $ext\n     * @param int|null $width\n     * @param int|null $height\n     *\n     * @return bool\n     */\n    protected function uploadImage($id, $name, $dir, $ext = false, $width = null, $height = null)\n    {\n        if (isset($_FILES[$name]['tmp_name']) && !empty($_FILES[$name]['tmp_name'])) {\n            // Delete old image\n            if (Validate::isLoadedObject($object = $this->loadObject())) {\n                $object->deleteImage();\n            } else {\n                return false;\n            }\n\n            // Check image validity\n            $max_size = isset($this->max_image_size) ? $this->max_image_size : 0;\n            if ($error = ImageManager::validateUpload($_FILES[$name], Tools::getMaxUploadSize($max_size))) {\n                $this->errors[] = $error;\n            }\n\n            $tmp_name = tempnam(_PS_TMP_IMG_DIR_, 'PS');\n            if (!$tmp_name) {\n                return false;\n            }\n\n            if (!move_uploaded_file($_FILES[$name]['tmp_name'], $tmp_name)) {\n                return false;\n            }\n\n            // Evaluate the memory required to resize the image: if it's too much, you can't resize it.\n            if (!ImageManager::checkImageMemoryLimit($tmp_name)) {\n                $this->errors[] = $this->trans('Due to memory limit restrictions, this image cannot be loaded. Please increase your memory_limit value via your server\\'s configuration settings.', array(), 'Admin.Notifications.Error');\n            }\n\n            // Copy new image\n            if (empty($this->errors) && !ImageManager::resize($tmp_name, _PS_IMG_DIR_ . $dir . $id . '.' . $this->imageType, (int) $width, (int) $height, ($ext ? $ext : $this->imageType))) {\n                $this->errors[] = $this->trans('An error occurred while uploading the image.', array(), 'Admin.Notifications.Error');\n            }\n\n            if (count($this->errors)) {\n                return false;\n            }\n            if ($this->afterImageUpload()) {\n                unlink($tmp_name);\n\n                return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Delete multiple items.\n     *\n     * @return bool true if success\n     */\n    protected function processBulkDelete()\n    {\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            $object = new $this->className();\n\n            if (isset($object->noZeroObject)) {\n                $objects_count = count(call_user_func(array($this->className, $object->noZeroObject)));\n\n                // Check if all object will be deleted\n                if ($objects_count <= 1 || count($this->boxes) == $objects_count) {\n                    $this->errors[] = $this->trans('You need at least one object.', array(), 'Admin.Notifications.Error') .\n                        ' <b>' . $this->table . '</b><br />' .\n                        $this->trans('You cannot delete all of the items.', array(), 'Admin.Notifications.Error');\n                }\n            } else {\n                $result = true;\n                foreach ($this->boxes as $id) {\n                    /** @var $to_delete ObjectModel */\n                    $to_delete = new $this->className((int) $id);\n                    $delete_ok = true;\n                    if ($this->deleted) {\n                        $to_delete->deleted = 1;\n                        if (!$to_delete->update()) {\n                            $result = false;\n                            $delete_ok = false;\n                        }\n                    } elseif (!$to_delete->delete()) {\n                        $result = false;\n                        $delete_ok = false;\n                    }\n\n                    if ($delete_ok) {\n                        PrestaShopLogger::addLog(sprintf($this->l('%s deletion', 'AdminTab', false, false), $this->className), 1, null, $this->className, (int) $to_delete->id, true, (int) $this->context->employee->id);\n                    } else {\n                        $this->errors[] = $this->trans('Can\\'t delete #%id%', array('%id%' => (int) $id), 'Admin.Notifications.Error');\n                    }\n                }\n                if ($result) {\n                    $this->redirect_after = self::$currentIndex . '&conf=2&token=' . $this->token;\n                }\n                $this->errors[] = $this->trans('An error occurred while deleting this selection.', array(), 'Admin.Notifications.Error');\n            }\n        } else {\n            $this->errors[] = $this->trans('You must select at least one element to delete.', array(), 'Admin.Notifications.Error');\n        }\n\n        if (isset($result)) {\n            return $result;\n        } else {\n            return false;\n        }\n    }\n\n    protected function ajaxProcessOpenHelp()\n    {\n        $help_class_name = $_GET['controller'];\n        $popup_content = \"<!doctype html>\n        <html>\n            <head>\n                <meta charset='UTF-8'>\n                <title>PrestaShop Help</title>\n                <link href='//help.prestashop.com/css/help.css' rel='stylesheet'>\n                <link href='//fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet'>\n                <script src='\" . _PS_JS_DIR_ . \"jquery/jquery-1.11.0.min.js'></script>\n                <script src='\" . _PS_JS_DIR_ . \"admin.js'></script>\n                <script src='\" . _PS_JS_DIR_ . \"tools.js'></script>\n                <script>\n                    help_class_name='\" . addslashes($help_class_name) . \"';\n                    iso_user = '\" . addslashes($this->context->language->iso_code) . \"'\n                </script>\n                <script src='themes/default/js/help.js'></script>\n                <script>\n                    $(function(){\n                        initHelp();\n                    });\n                </script>\n            </head>\n            <body><div id='help-container' class='help-popup'></div></body>\n        </html>\";\n        die($popup_content);\n    }\n\n    /**\n     * Enable multiple items.\n     *\n     * @return bool true if success\n     */\n    protected function processBulkEnableSelection()\n    {\n        return $this->processBulkStatusSelection(1);\n    }\n\n    /**\n     * Disable multiple items.\n     *\n     * @return bool true if success\n     */\n    protected function processBulkDisableSelection()\n    {\n        return $this->processBulkStatusSelection(0);\n    }\n\n    /**\n     * Toggle status of multiple items.\n     *\n     * @param bool $status\n     *\n     * @return bool true if success\n     *\n     * @throws PrestaShopException\n     */\n    protected function processBulkStatusSelection($status)\n    {\n        $result = true;\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            foreach ($this->boxes as $id) {\n                /** @var ObjectModel $object */\n                $object = new $this->className((int) $id);\n                $object->active = (int) $status;\n                $result &= $object->update();\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * @return bool\n     */\n    protected function processBulkAffectZone()\n    {\n        $result = false;\n        if (is_array($this->boxes) && !empty($this->boxes)) {\n            /** @var Country|State $object */\n            $object = new $this->className();\n            $result = $object->affectZoneToSelection(Tools::getValue($this->table . 'Box'), Tools::getValue('zone_to_affect'));\n\n            if ($result) {\n                $this->redirect_after = self::$currentIndex . '&conf=28&token=' . $this->token;\n            }\n            $this->errors[] = $this->trans('An error occurred while assigning a zone to the selection.', array(), 'Admin.Notifications.Error');\n        } else {\n            $this->errors[] = $this->trans('You must select at least one element to assign a new zone.', array(), 'Admin.Notifications.Error');\n        }\n\n        return $result;\n    }\n\n    /**\n     * Called before Add.\n     *\n     * @param ObjectModel $object Object\n     *\n     * @return bool\n     */\n    protected function beforeAdd($object)\n    {\n        return true;\n    }\n\n    /**\n     * Prepare the view to display the required fields form.\n     *\n     * @return string|void\n     */\n    public function displayRequiredFields()\n    {\n        if (!$this->access('add') || !$this->access('delete') || !$this->required_database) {\n            return;\n        }\n\n        $helper = new Helper();\n        $helper->currentIndex = self::$currentIndex;\n        $helper->token = $this->token;\n        $helper->override_folder = $this->override_folder;\n\n        return $helper->renderRequiredFields($this->className, $this->identifier, $this->required_fields);\n    }\n\n    /**\n     * Create a template from the override file, else from the base file.\n     *\n     * @param string $tpl_name filename\n     *\n     * @return Smarty_Internal_Template\n     */\n    public function createTemplate($tpl_name)\n    {\n        // Use override tpl if it exists\n        // If view access is denied, we want to use the default template that will be used to display an error\n        if ($this->viewAccess() && $this->override_folder) {\n            if (!Configuration::get('PS_DISABLE_OVERRIDES') && file_exists($this->context->smarty->getTemplateDir(1) . DIRECTORY_SEPARATOR . $this->override_folder . $tpl_name)) {\n                return $this->context->smarty->createTemplate($this->override_folder . $tpl_name, $this->context->smarty);\n            } elseif (file_exists($this->context->smarty->getTemplateDir(0) . 'controllers' . DIRECTORY_SEPARATOR . $this->override_folder . $tpl_name)) {\n                return $this->context->smarty->createTemplate('controllers' . DIRECTORY_SEPARATOR . $this->override_folder . $tpl_name, $this->context->smarty);\n            }\n        }\n\n        return $this->context->smarty->createTemplate($this->context->smarty->getTemplateDir(0) . $tpl_name, $this->context->smarty);\n    }\n\n    /**\n     * Shortcut to set up a json success payload.\n     *\n     * @param string $message Success message\n     */\n    public function jsonConfirmation($message)\n    {\n        $this->json = true;\n        $this->confirmations[] = $message;\n        if ($this->status === '') {\n            $this->status = 'ok';\n        }\n    }\n\n    /**\n     * Shortcut to set up a json error payload.\n     *\n     * @param string $message Error message\n     */\n    public function jsonError($message)\n    {\n        $this->json = true;\n        $this->errors[] = $message;\n        if ($this->status === '') {\n            $this->status = 'error';\n        }\n    }\n\n    /**\n     * @param string $file\n     * @param int $timeout\n     *\n     * @return bool\n     */\n    public function isFresh($file, $timeout = 604800)\n    {\n        if (($time = @filemtime(_PS_ROOT_DIR_ . $file)) && filesize(_PS_ROOT_DIR_ . $file) > 0) {\n            return (time() - $time) < $timeout;\n        }\n\n        return false;\n    }\n\n    /** @var bool */\n    protected static $is_prestashop_up = true;\n\n    /**\n     * @param string $file_to_refresh\n     * @param string $external_file\n     *\n     * @return bool\n     */\n    public function refresh($file_to_refresh, $external_file)\n    {\n        if (self::$is_prestashop_up && $content = Tools::file_get_contents($external_file)) {\n            return (bool) file_put_contents(_PS_ROOT_DIR_ . $file_to_refresh, $content);\n        }\n        self::$is_prestashop_up = false;\n\n        return false;\n    }\n\n    /**\n     * @param Module $module\n     * @param string $output_type\n     * @param string|null $back\n     * @param string|bool $install_source_tracking\n     */\n    public function fillModuleData(&$module, $output_type = 'link', $back = null, $install_source_tracking = false)\n    {\n        /** @var Module $obj */\n        $obj = null;\n        if ($module->onclick_option) {\n            $obj = new $module->name();\n        }\n        // Fill module data\n        $module->logo = '../../img/questionmark.png';\n\n        if (@filemtime(_PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . basename(_PS_MODULE_DIR_) . DIRECTORY_SEPARATOR . $module->name\n            . DIRECTORY_SEPARATOR . 'logo.gif')) {\n            $module->logo = 'logo.gif';\n        }\n        if (@filemtime(_PS_ROOT_DIR_ . DIRECTORY_SEPARATOR . basename(_PS_MODULE_DIR_) . DIRECTORY_SEPARATOR . $module->name\n            . DIRECTORY_SEPARATOR . 'logo.png')) {\n            $module->logo = 'logo.png';\n        }\n\n        $link_admin_modules = $this->context->link->getAdminLink('AdminModules', true);\n\n        $module->options['install_url'] = $link_admin_modules . '&install=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name\n            . '&anchor=' . ucfirst($module->name) . ($install_source_tracking ? '&source=' . $install_source_tracking : '');\n        $module->options['update_url'] = $link_admin_modules . '&update=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name);\n        $module->options['uninstall_url'] = $link_admin_modules . '&uninstall=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name);\n\n        // free modules get their source tracking data here\n        $module->optionsHtml = $this->displayModuleOptions($module, $output_type, $back, $install_source_tracking);\n        // pay modules get their source tracking data here\n        if ($install_source_tracking && isset($module->addons_buy_url)) {\n            $module->addons_buy_url .= ($install_source_tracking ? '&utm_term=' . $install_source_tracking : '');\n        }\n\n        $module->options['uninstall_onclick'] = ((!$module->onclick_option) ?\n            ((empty($module->confirmUninstall)) ? 'return confirm(\\'' . $this->l('Do you really want to uninstall this module?') . '\\');' : 'return confirm(\\'' . addslashes($module->confirmUninstall) . '\\');') :\n            $obj->onclickOption('uninstall', $module->options['uninstall_url']));\n\n        if ((Tools::getValue('module_name') == $module->name || in_array($module->name, explode('|', Tools::getValue('modules_list')))) && (int) Tools::getValue('conf') > 0) {\n            $module->message = $this->_conf[(int) Tools::getValue('conf')];\n        }\n\n        if ((Tools::getValue('module_name') == $module->name || in_array($module->name, explode('|', Tools::getValue('modules_list')))) && (int) Tools::getValue('conf') > 0) {\n            unset($obj);\n        }\n    }\n\n    /** @var array */\n    protected $translationsTab = array();\n\n    /**\n     * Display modules list.\n     *\n     * @param Module $module\n     * @param string $output_type (link or select)\n     * @param string|null $back\n     * @param string|bool $install_source_tracking\n     *\n     * @return string|array\n     */\n    public function displayModuleOptions($module, $output_type = 'link', $back = null, $install_source_tracking = false)\n    {\n        if (!isset($module->enable_device)) {\n            $module->enable_device = Context::DEVICE_COMPUTER | Context::DEVICE_TABLET | Context::DEVICE_MOBILE;\n        }\n\n        $this->translationsTab['confirm_uninstall_popup'] = (isset($module->confirmUninstall) ? $module->confirmUninstall : $this->l('Do you really want to uninstall this module?'));\n        if (!isset($this->translationsTab['Disable this module'])) {\n            $this->translationsTab['Disable this module'] = $this->l('Disable this module');\n            $this->translationsTab['Enable this module for all shops'] = $this->l('Enable this module for all shops');\n            $this->translationsTab['Disable'] = $this->l('Disable');\n            $this->translationsTab['Enable'] = $this->l('Enable');\n            $this->translationsTab['Disable on mobiles'] = $this->l('Disable on mobiles');\n            $this->translationsTab['Disable on tablets'] = $this->l('Disable on tablets');\n            $this->translationsTab['Disable on computers'] = $this->l('Disable on computers');\n            $this->translationsTab['Display on mobiles'] = $this->l('Display on mobiles');\n            $this->translationsTab['Display on tablets'] = $this->l('Display on tablets');\n            $this->translationsTab['Display on computers'] = $this->l('Display on computers');\n            $this->translationsTab['Reset'] = $this->l('Reset');\n            $this->translationsTab['Configure'] = $this->l('Configure');\n            $this->translationsTab['Delete'] = $this->l('Delete');\n            $this->translationsTab['Install'] = $this->l('Install');\n            $this->translationsTab['Uninstall'] = $this->l('Uninstall');\n            $this->translationsTab['Would you like to delete the content related to this module ?'] = $this->l('Would you like to delete the content related to this module ?');\n            $this->translationsTab['This action will permanently remove the module from the server. Are you sure you want to do this?'] = $this->l('This action will permanently remove the module from the server. Are you sure you want to do this?');\n            $this->translationsTab['Remove from Favorites'] = $this->l('Remove from Favorites');\n            $this->translationsTab['Mark as Favorite'] = $this->l('Mark as Favorite');\n        }\n\n        $link_admin_modules = $this->context->link->getAdminLink('AdminModules', true);\n        $modules_options = array();\n\n        $configure_module = array(\n            'href' => $link_admin_modules . '&configure=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . urlencode($module->name),\n            'onclick' => $module->onclick_option && isset($module->onclick_option_content['configure']) ? $module->onclick_option_content['configure'] : '',\n            'title' => '',\n            'text' => $this->translationsTab['Configure'],\n            'cond' => $module->id && isset($module->is_configurable) && $module->is_configurable,\n            'icon' => 'wrench',\n        );\n\n        $desactive_module = array(\n            'href' => $link_admin_modules . '&module_name=' . urlencode($module->name) . '&' . ($module->active ? 'enable=0' : 'enable=1') . '&tab_module=' . $module->tab,\n            'onclick' => $module->active && $module->onclick_option && isset($module->onclick_option_content['desactive']) ? $module->onclick_option_content['desactive'] : '',\n            'title' => Shop::isFeatureActive() ? htmlspecialchars($module->active ? $this->translationsTab['Disable this module'] : $this->translationsTab['Enable this module for all shops']) : '',\n            'text' => $module->active ? $this->translationsTab['Disable'] : $this->translationsTab['Enable'],\n            'cond' => $module->id,\n            'icon' => 'off',\n        );\n        $link_reset_module = $link_admin_modules . '&module_name=' . urlencode($module->name) . '&reset&tab_module=' . $module->tab;\n\n        $is_reset_ready = false;\n        if (Validate::isModuleName($module->name)) {\n            if (method_exists(Module::getInstanceByName($module->name), 'reset')) {\n                $is_reset_ready = true;\n            }\n        }\n\n        $reset_module = array(\n            'href' => $link_reset_module,\n            'onclick' => $module->onclick_option && isset($module->onclick_option_content['reset']) ? $module->onclick_option_content['reset'] : '',\n            'title' => '',\n            'text' => $this->translationsTab['Reset'],\n            'cond' => $module->id && $module->active,\n            'icon' => 'undo',\n            'class' => ($is_reset_ready ? 'reset_ready' : ''),\n        );\n\n        $delete_module = array(\n            'href' => $link_admin_modules . '&delete=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . urlencode($module->name),\n            'onclick' => $module->onclick_option && isset($module->onclick_option_content['delete']) ? $module->onclick_option_content['delete'] : 'return confirm(\\'' . $this->translationsTab['This action will permanently remove the module from the server. Are you sure you want to do this?'] . '\\');',\n            'title' => '',\n            'text' => $this->translationsTab['Delete'],\n            'cond' => true,\n            'icon' => 'trash',\n            'class' => 'text-danger',\n        );\n\n        $display_mobile = array(\n            'href' => $link_admin_modules . '&module_name=' . urlencode($module->name) . '&' . ($module->enable_device & Context::DEVICE_MOBILE ? 'disable_device' : 'enable_device') . '=' . Context::DEVICE_MOBILE . '&tab_module=' . $module->tab,\n            'onclick' => '',\n            'title' => htmlspecialchars($module->enable_device & Context::DEVICE_MOBILE ? $this->translationsTab['Disable on mobiles'] : $this->translationsTab['Display on mobiles']),\n            'text' => $module->enable_device & Context::DEVICE_MOBILE ? $this->translationsTab['Disable on mobiles'] : $this->translationsTab['Display on mobiles'],\n            'cond' => $module->id,\n            'icon' => 'mobile',\n        );\n\n        $display_tablet = array(\n            'href' => $link_admin_modules . '&module_name=' . urlencode($module->name) . '&' . ($module->enable_device & Context::DEVICE_TABLET ? 'disable_device' : 'enable_device') . '=' . Context::DEVICE_TABLET . '&tab_module=' . $module->tab,\n            'onclick' => '',\n            'title' => htmlspecialchars($module->enable_device & Context::DEVICE_TABLET ? $this->translationsTab['Disable on tablets'] : $this->translationsTab['Display on tablets']),\n            'text' => $module->enable_device & Context::DEVICE_TABLET ? $this->translationsTab['Disable on tablets'] : $this->translationsTab['Display on tablets'],\n            'cond' => $module->id,\n            'icon' => 'tablet',\n        );\n\n        $display_computer = array(\n            'href' => $link_admin_modules . '&module_name=' . urlencode($module->name) . '&' . ($module->enable_device & Context::DEVICE_COMPUTER ? 'disable_device' : 'enable_device') . '=' . Context::DEVICE_COMPUTER . '&tab_module=' . $module->tab,\n            'onclick' => '',\n            'title' => htmlspecialchars($module->enable_device & Context::DEVICE_COMPUTER ? $this->translationsTab['Disable on computers'] : $this->translationsTab['Display on computers']),\n            'text' => $module->enable_device & Context::DEVICE_COMPUTER ? $this->translationsTab['Disable on computers'] : $this->translationsTab['Display on computers'],\n            'cond' => $module->id,\n            'icon' => 'desktop',\n        );\n\n        $install = array(\n            'href' => $link_admin_modules . '&install=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name)\n                . (null !== $back ? '&back=' . urlencode($back) : '') . ($install_source_tracking ? '&source=' . $install_source_tracking : ''),\n            'onclick' => '',\n            'title' => $this->translationsTab['Install'],\n            'text' => $this->translationsTab['Install'],\n            'cond' => $module->id,\n            'icon' => 'plus-sign-alt',\n        );\n\n        $uninstall = array(\n            'href' => $link_admin_modules . '&uninstall=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name) . (null !== $back ? '&back=' . urlencode($back) : ''),\n            'onclick' => (isset($module->onclick_option_content['uninstall']) ? $module->onclick_option_content['uninstall'] : 'return confirm(\\'' . $this->translationsTab['confirm_uninstall_popup'] . '\\');'),\n            'title' => $this->translationsTab['Uninstall'],\n            'text' => $this->translationsTab['Uninstall'],\n            'cond' => $module->id,\n            'icon' => 'minus-sign-alt',\n        );\n\n        $remove_from_favorite = array(\n            'href' => '#',\n            'class' => 'action_unfavorite toggle_favorite',\n            'onclick' => '',\n            'title' => $this->translationsTab['Remove from Favorites'],\n            'text' => $this->translationsTab['Remove from Favorites'],\n            'cond' => $module->id,\n            'icon' => 'star',\n            'data-value' => '0',\n            'data-module' => $module->name,\n        );\n\n        $mark_as_favorite = array(\n            'href' => '#',\n            'class' => 'action_favorite toggle_favorite',\n            'onclick' => '',\n            'title' => $this->translationsTab['Mark as Favorite'],\n            'text' => $this->translationsTab['Mark as Favorite'],\n            'cond' => $module->id,\n            'icon' => 'star',\n            'data-value' => '1',\n            'data-module' => $module->name,\n        );\n\n        $update = array(\n            'href' => $module->options['update_url'],\n            'onclick' => '',\n            'title' => 'Update it!',\n            'text' => 'Update it!',\n            'icon' => 'refresh',\n            'cond' => $module->id,\n        );\n\n        $divider = array(\n            'href' => '#',\n            'onclick' => '',\n            'title' => 'divider',\n            'text' => 'divider',\n            'cond' => $module->id,\n        );\n\n        if (isset($module->version_addons) && $module->version_addons) {\n            $modules_options[] = $update;\n        }\n\n        if ($module->active) {\n            $modules_options[] = $configure_module;\n            $modules_options[] = $desactive_module;\n            $modules_options[] = $display_mobile;\n            $modules_options[] = $display_tablet;\n            $modules_options[] = $display_computer;\n        } else {\n            $modules_options[] = $desactive_module;\n            $modules_options[] = $configure_module;\n        }\n\n        $modules_options[] = $reset_module;\n\n        if ($output_type == 'select') {\n            if (!$module->id) {\n                $modules_options[] = $install;\n            } else {\n                $modules_options[] = $uninstall;\n            }\n        } elseif ($output_type == 'array') {\n            if ($module->id) {\n                $modules_options[] = $uninstall;\n            }\n        }\n\n        if (isset($module->preferences, $module->preferences['favorite']) && $module->preferences['favorite'] == 1) {\n            $remove_from_favorite['style'] = '';\n            $mark_as_favorite['style'] = 'display:none;';\n            $modules_options[] = $remove_from_favorite;\n            $modules_options[] = $mark_as_favorite;\n        } else {\n            $mark_as_favorite['style'] = '';\n            $remove_from_favorite['style'] = 'display:none;';\n            $modules_options[] = $remove_from_favorite;\n            $modules_options[] = $mark_as_favorite;\n        }\n\n        if ($module->id == 0) {\n            $install['cond'] = 1;\n            $install['flag_install'] = 1;\n            $modules_options[] = $install;\n        }\n        $modules_options[] = $divider;\n        $modules_options[] = $delete_module;\n\n        $return = '';\n        foreach ($modules_options as $option_name => $option) {\n            if ($option['cond']) {\n                if ($output_type == 'link') {\n                    $return .= '<li><a class=\"' . $option_name . ' action_module';\n                    $return .= '\" href=\"' . $option['href'] . (null !== $back ? '&back=' . urlencode($back) : '') . '\"';\n                    $return .= ' onclick=\"' . $option['onclick'] . '\"  title=\"' . $option['title'] . '\"><i class=\"icon-' . (isset($option['icon']) && $option['icon'] ? $option['icon'] : 'cog') . '\"></i>&nbsp;' . $option['text'] . '</a></li>';\n                } elseif ($output_type == 'array') {\n                    if (!is_array($return)) {\n                        $return = array();\n                    }\n\n                    $html = '<a class=\"';\n\n                    $is_install = isset($option['flag_install']) ? true : false;\n\n                    if (isset($option['class'])) {\n                        $html .= $option['class'];\n                    }\n                    if ($is_install) {\n                        $html .= ' btn btn-success';\n                    }\n                    if (!$is_install && count($return) == 0) {\n                        $html .= ' btn btn-default';\n                    }\n\n                    $html .= '\"';\n\n                    if (isset($option['data-value'])) {\n                        $html .= ' data-value=\"' . $option['data-value'] . '\"';\n                    }\n\n                    if (isset($option['data-module'])) {\n                        $html .= ' data-module=\"' . $option['data-module'] . '\"';\n                    }\n\n                    if (isset($option['style'])) {\n                        $html .= ' style=\"' . $option['style'] . '\"';\n                    }\n\n                    $html .= ' href=\"' . htmlentities($option['href']) . (null !== $back ? '&back=' . urlencode($back) : '') . '\" onclick=\"' . $option['onclick'] . '\"  title=\"' . $option['title'] . '\"><i class=\"icon-' . (isset($option['icon']) && $option['icon'] ? $option['icon'] : 'cog') . '\"></i> ' . $option['text'] . '</a>';\n                    $return[] = $html;\n                } elseif ($output_type == 'select') {\n                    $return .= '<option id=\"' . $option_name . '\" data-href=\"' . htmlentities($option['href']) . (null !== $back ? '&back=' . urlencode($back) : '') . '\" data-onclick=\"' . $option['onclick'] . '\">' . $option['text'] . '</option>';\n                }\n            }\n        }\n\n        if ($output_type == 'select') {\n            $return = '<select id=\"select_' . $module->name . '\">' . $return . '</select>';\n        }\n\n        return $return;\n    }\n\n    public function ajaxProcessGetModuleQuickView()\n    {\n        $modules = Module::getModulesOnDisk();\n\n        foreach ($modules as $module) {\n            if ($module->name == Tools::getValue('module')) {\n                break;\n            }\n        }\n\n        $url = $module->url;\n\n        if (isset($module->type) && ($module->type == 'addonsPartner' || $module->type == 'addonsNative')) {\n            $url = $this->context->link->getAdminLink('AdminModules') . '&install=' . urlencode($module->name) . '&tab_module=' . $module->tab . '&module_name=' . $module->name . '&anchor=' . ucfirst($module->name);\n        }\n\n        $this->context->smarty->assign(array(\n            'displayName' => $module->displayName,\n            'image' => $module->image,\n            'nb_rates' => (int) $module->nb_rates[0],\n            'avg_rate' => (int) $module->avg_rate[0],\n            'badges' => $module->badges,\n            'compatibility' => $module->compatibility,\n            'description_full' => $module->description_full,\n            'additional_description' => $module->additional_description,\n            'is_addons_partner' => (isset($module->type) && ($module->type == 'addonsPartner' || $module->type == 'addonsNative')),\n            'url' => $url,\n            'price' => $module->price,\n        ));\n        // Fetch the translations in the right place - they are not defined by our current controller!\n        Context::getContext()->override_controller_name_for_translations = 'AdminModules';\n        $this->smartyOutputContent('controllers/modules/quickview.tpl');\n        die(1);\n    }\n\n    /**\n     * Add an entry to the meta title.\n     *\n     * @param string $entry new entry\n     */\n    public function addMetaTitle($entry)\n    {\n        // Only add entry if the meta title was not forced.\n        if (is_array($this->meta_title)) {\n            $this->meta_title[] = $entry;\n        }\n    }\n\n    /**\n     * Set action.\n     *\n     * @param string $action\n     */\n    public function setAction($action)\n    {\n        $this->action = $action;\n    }\n\n    /**\n     * Set IdObject.\n     *\n     * @param int $id_object\n     */\n    public function setIdObject($id_object)\n    {\n        $this->id_object = (int) $id_object;\n    }\n\n    /**\n     * @return string\n     */\n    public function getTabSlug()\n    {\n        if (empty($this->tabSlug)) {\n            $this->tabSlug = Access::findSlugByIdTab($this->id);\n        }\n\n        return $this->tabSlug;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    protected function buildContainer()\n    {\n        return ContainerBuilder::getContainer('admin', _PS_MODE_DEV_);\n    }\n\n    /**\n     * Return the type of authorization on module page.\n     *\n     * @return int(integer)\n     */\n    public function authorizationLevel()\n    {\n        if (\n            Access::isGranted(\n                'ROLE_MOD_TAB_' . strtoupper($this->controller_name) . '_DELETE',\n                $this->context->employee->id_profile\n            )\n        ) {\n            return AdminController::LEVEL_DELETE;\n        } elseif (\n            Access::isGranted(\n                'ROLE_MOD_TAB_' . strtoupper($this->controller_name) . '_CREATE',\n                $this->context->employee->id_profile\n            )\n        ) {\n            return AdminController::LEVEL_ADD;\n        } elseif (\n            Access::isGranted(\n                'ROLE_MOD_TAB_' . strtoupper($this->controller_name) . '_UPDATE',\n                $this->context->employee->id_profile\n            )\n        ) {\n            return AdminController::LEVEL_EDIT;\n        } elseif (\n            Access::isGranted(\n                'ROLE_MOD_TAB_' . strtoupper($this->controller_name) . '_READ',\n                $this->context->employee->id_profile\n            )\n        ) {\n            return AdminController::LEVEL_VIEW;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Get the url of the first active sub-tab.\n     *\n     * @param array[] $subtabs\n     *\n     * @return string Url, or empty if no active sub-tab\n     */\n    private function getTabLinkFromSubTabs(array $subtabs)\n    {\n        foreach ($subtabs as $tab) {\n            if ($tab['active']) {\n                return $tab['href'];\n            }\n        }\n\n        return '';\n    }\n\n    /**\n     * Prepare price specifications to display cldr prices in javascript context.\n     *\n     * @param Context $context\n     *\n     * @return array\n     */\n    private function preparePriceSpecifications(Context $context)\n    {\n        /* @var Currency */\n        $currency = $context->currency;\n        /* @var PriceSpecification */\n        $priceSpecification = $context->getCurrentLocale()->getPriceSpecification($currency->iso_code);\n        if (empty($priceSpecification)) {\n            return [];\n        }\n\n        return array_merge(\n            ['symbol' => $priceSpecification->getSymbolsByNumberingSystem(Locale::NUMBERING_SYSTEM_LATIN)->toArray()],\n            $priceSpecification->toArray()\n        );\n    }\n\n    /**\n     * Prepare number specifications to display cldr numbers in javascript context.\n     *\n     * @param Context $context\n     *\n     * @return array\n     */\n    private function prepareNumberSpecifications(Context $context)\n    {\n        /* @var NumberSpecification */\n        $numberSpecification = $context->getCurrentLocale()->getNumberSpecification();\n        if (empty($numberSpecification)) {\n            return [];\n        }\n\n        return array_merge(\n            ['symbol' => $numberSpecification->getSymbolsByNumberingSystem(Locale::NUMBERING_SYSTEM_LATIN)->toArray()],\n            $numberSpecification->toArray()\n        );\n    }\n\n    /**\n     * Set if anonymous is allowed to run this controller\n     *\n     * @param bool $value\n     *\n     * @return bool\n     */\n    protected function setAllowAnonymous($value)\n    {\n        $this->allowAnonymous = (bool) $value;\n    }\n\n    /**\n     * Return if an anonymous is allowed to run this controller\n     *\n     * @return bool\n     */\n    protected function isAnonymousAllowed()\n    {\n        return $this->allowAnonymous;\n    }\n}\n"], "filenames": ["classes/controller/AdminController.php"], "buggy_code_start_loc": [4084], "buggy_code_end_loc": [4101], "fixing_code_start_loc": [4084], "fixing_code_end_loc": [4101], "type": "CWE-79", "message": "In PrestaShop between versions 1.7.1.0 and 1.7.6.5, there is a reflected XSS on AdminCarts page with `cartBox` parameter The problem is fixed in 1.7.6.5", "other": {"cve": {"id": "CVE-2020-5276", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-20T17:15:15.710", "lastModified": "2020-04-23T18:35:09.383", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop between versions 1.7.1.0 and 1.7.6.5, there is a reflected XSS on AdminCarts page with `cartBox` parameter The problem is fixed in 1.7.6.5"}, {"lang": "es", "value": "En PrestaShop entre las versiones 1.7.1.0 y 1.7.6.5,  hay  una vulnerabilidad de tipo XSS reflejado en la p\u00e1gina AdminCarts con el par\u00e1metro \"cartBox\". El problema es corregido en la versi\u00f3n 1.7.6.5"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.7.1.0", "versionEndExcluding": "1.7.6.5", "matchCriteriaId": "0B3D2A39-B3DA-483B-A8B7-C35C089E8AE9"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/6838d21850e7227fb8afbf568cb0386b3dedd3ef", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-q6pr-42v5-v97q", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/6838d21850e7227fb8afbf568cb0386b3dedd3ef"}}