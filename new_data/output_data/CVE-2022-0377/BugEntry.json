{"buggy_code": ["( function( $ ) {\n\t'use strict';\n\n\tconst UserProfile = function( args ) {\n\t\tthis.view = new UserProfile.View( {\n\t\t\tmodel: new UserProfile.Model( args ),\n\t\t} );\n\t};\n\n\tUserProfile.View = Backbone.View.extend( {\n\t\tevents: {\n\t\t\t'click #lp-remove-upload-photo': '_removePhoto',\n\t\t\t'click #lp-upload-photo': '_upload',\n\t\t\t'click .lp-cancel-upload': '_cancel',\n\t\t\t'click .lp-save-upload': '_save',\n\t\t},\n\t\tel: '#lp-user-edit-avatar',\n\t\tuploader: null,\n\t\tinitialize() {\n\t\t\t_.bindAll( this, 'filesAdded', 'uploadProgress', 'uploadError', 'fileUploaded', 'crop' );\n\t\t\tthis._getUploader();\n\t\t},\n\t\t_save( e ) {\n\t\t\te.preventDefault();\n\t\t\tconst self = this;\n\t\t\t$.ajax( {\n\t\t\t\turl: '?lp-ajax=save-uploaded-user-avatar',\n\t\t\t\tdata: this.$( '.lp-avatar-crop-image' ).serializeJSON(),\n\t\t\t\ttype: 'post',\n\t\t\t\tsuccess( response ) {\n\t\t\t\t\tresponse = LP.parseJSON( response );\n\t\t\t\t\tif ( ! response.success ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tself.$( '.lp-avatar-crop-image' ).remove();\n\n\t\t\t\t\t$( '.lp-user-profile-avatar' ).html( response.avatar );\n\n\t\t\t\t\tself.$().attr( 'data-custom', 'yes' );\n\t\t\t\t\tself.$( '.profile-picture' ).toggleClass( 'profile-avatar-current' ).filter( '.profile-avatar-current' ).html( response.avatar );\n\t\t\t\t},\n\t\t\t} );\n\t\t},\n\t\t$( selector ) {\n\t\t\treturn selector ? $( this.$el ).find( selector ) : $( this.$el );\n\t\t},\n\t\t_removePhoto( e ) {\n\t\t\te.preventDefault();\n\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\tif ( ! confirm( 'Are you sure?' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.$().removeAttr( 'data-custom' );\n\t\t\tthis.$( '.profile-picture' ).toggleClass( 'profile-avatar-current' );\n\t\t\tthis.$( '#submit' ).prop( 'disabled', false );\n\n\t\t\t$( '.lp-user-profile-avatar' ).html( this.$( '.profile-avatar-current' ).find( 'img' ).clone() );\n\t\t},\n\t\t_upload( e ) {\n\t\t\te.preventDefault();\n\t\t},\n\t\t_cancel( e ) {\n\t\t\te.preventDefault();\n\t\t\tthis.$crop && this.$crop.remove();\n\t\t\tthis.$( '.lp-avatar-preview' ).removeClass( 'croping' );\n\t\t},\n\t\tfilesAdded( up, files ) {\n\t\t\tconst that = this;\n\t\t\tup.files.splice( 0, up.files.length - 1 );\n\t\t\tthat.$( '.lp-avatar-preview' ).addClass( 'uploading' );\n\t\t\tthat.$( '.lp-avatar-upload-progress-value' ).width( 0 );\n\t\t\tthat.uploader.start();\n\t\t},\n\t\tuploadProgress( up, file ) {\n\t\t\tthis.$( '.lp-avatar-upload-progress-value' ).css( 'width', file.percent + '%' );\n\t\t},\n\t\tuploadError( up, err ) {\n\t\t\tthis.$( '.lp-avatar-preview' ).addClass( 'upload-error' ).removeClass( 'uploading' );\n\t\t\tthis.$( '.lp-avatar-upload-error' ).html( err );\n\t\t},\n\t\tfileUploaded( up, file, info ) {\n\t\t\tthis.$( '.lp-avatar-preview' ).removeClass( 'upload-error' ).removeClass( 'uploading' );\n\t\t\tconst that = this,\n\t\t\t\tresponse = LP.parseJSON( info.response );\n\t\t\tif ( response.url ) {\n\t\t\t\tthis.avatar = response.url;\n\t\t\t\t$( '<img/>' )\n\t\t\t\t\t.attr( 'src', response.url )\n\t\t\t\t\t.on( 'load', function() {\n\t\t\t\t\t\tthat.model.set( $.extend( response, {\n\t\t\t\t\t\t\twidth: this.width,\n\t\t\t\t\t\t\theight: this.height,\n\t\t\t\t\t\t} ) );\n\t\t\t\t\t\tthat.crop();\n\t\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tcrop() {\n\t\t\tthis.model.set( 'r', Math.random() );\n\t\t\tnew UserProfile.Crop( this );\n\t\t\tthis.$( '#submit' ).prop( 'disabled', false );\n\t\t},\n\t\t_getUploader() {\n\t\t\tif ( this.uploader ) {\n\t\t\t\treturn this.uploader;\n\t\t\t}\n\t\t\tthis.uploader = new plupload.Uploader( {\n\t\t\t\truntimes: 'html5,flash,silverlight,html4',\n\t\t\t\tbrowse_button: 'lp-upload-photo',\n\t\t\t\tcontainer: $( '#lp-user-edit-avatar' ).get( 0 ),\n\t\t\t\turl: ( typeof lpGlobalSettings !== 'undefined' ? lpGlobalSettings.ajax : '' ).addQueryVar( 'action', 'learnpress_upload-user-avatar' ),\n\t\t\t\tfilters: {\n\t\t\t\t\tmax_file_size: '10mb',\n\t\t\t\t\tmime_types: [\n\t\t\t\t\t\t{ title: 'Image', extensions: 'png,jpg,bmp,gif' },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tfile_data_name: 'lp-upload-avatar',\n\t\t\t\tinit: {\n\t\t\t\t\tPostInit() {\n\t\t\t\t\t},\n\t\t\t\t\tFilesAdded: this.filesAdded,\n\t\t\t\t\tUploadProgress: this.uploadProgress,\n\t\t\t\t\tFileUploaded: this.fileUploaded,\n\t\t\t\t\tError: this.uploadError,\n\t\t\t\t},\n\t\t\t} );\n\t\t\tthis.uploader.init();\n\t\t\treturn this.uploader;\n\t\t},\n\t} );\n\tUserProfile.Model = Backbone.Model.extend( {} );\n\tUserProfile.Crop = function( $view ) {\n\t\tconst self = this,\n\t\t\tdata = $view.model.toJSON(),\n\t\t\t$crop = $( LP.template( 'tmpl-crop-user-avatar' )( data ) );\n\t\t$crop.appendTo( $view.$( '#profile-avatar-uploader' ) );\n\n\t\t$view.$crop = $crop;\n\t\tlet $img = $crop.find( 'img' ),\n\t\t\twx = 0,\n\t\t\thx = 0,\n\t\t\tlx = 0,\n\t\t\ttx = 0,\n\t\t\tnw = 0,\n\t\t\tnh = 0,\n\t\t\tmaxWidth = 870;\n\t\tthis.initCrop = function() {\n\t\t\tconst r1 = data.viewWidth / data.viewHeight,\n\t\t\t\tr2 = data.width / data.height;\n\n\t\t\tif ( r1 >= r2 ) {\n\t\t\t\twx = data.viewWidth;\n\t\t\t\thx = data.height * data.viewWidth / data.width;\n\t\t\t\tlx = 0;\n\t\t\t\ttx = -( hx - data.viewHeight ) / 2;\n\t\t\t} else {\n\t\t\t\thx = data.viewHeight;\n\t\t\t\twx = data.width * data.viewHeight / data.height;\n\t\t\t\ttx = 0;\n\t\t\t\tlx = -( wx - data.viewWidth ) / 2;\n\t\t\t}\n\t\t\tnw = wx;\n\t\t\tnh = hx;\n\t\t\t$img.draggable( {\n\t\t\t\tdrag( e, ui ) {\n\t\t\t\t\tif ( ui.position.left > 0 ) {\n\t\t\t\t\t\tui.position.left = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif ( ui.position.top > 0 ) {\n\t\t\t\t\t\tui.position.top = 0;\n\t\t\t\t\t}\n\t\t\t\t\tconst xx = data.viewWidth - nw,\n\t\t\t\t\t\tyy = data.viewHeight - nh;\n\t\t\t\t\tif ( xx > ui.position.left ) {\n\t\t\t\t\t\tui.position.left = xx;\n\t\t\t\t\t}\n\t\t\t\t\tif ( yy > ui.position.top ) {\n\t\t\t\t\t\tui.position.top = yy;\n\t\t\t\t\t}\n\t\t\t\t\t$( document.body ).addClass( 'profile-dragging' );\n\t\t\t\t},\n\t\t\t\tstop( e, ui ) {\n\t\t\t\t\tlx = parseInt( $img.css( 'left' ) );\n\t\t\t\t\ttx = parseInt( $img.css( 'top' ) );\n\t\t\t\t\tdd = ( Math.abs( lx ) + data.viewWidth / 2 ) / nw;\n\t\t\t\t\tbb = ( Math.abs( tx ) + data.viewHeight / 2 ) / nh;\n\t\t\t\t\tself.update( {\n\t\t\t\t\t\twidth: nw,\n\t\t\t\t\t\theight: nh,\n\t\t\t\t\t\ttop: tx,\n\t\t\t\t\t\tleft: lx,\n\t\t\t\t\t} );\n\t\t\t\t\t$( document.body ).removeClass( 'profile-dragging' );\n\t\t\t\t},\n\t\t\t} );\n\t\t\tvar dd = ( Math.abs( lx ) + data.viewWidth / 2 ) / wx,\n\t\t\t\tbb = ( Math.abs( tx ) + data.viewHeight / 2 ) / hx;\n\t\t\t$crop.find( '.lp-zoom > div' ).slider( {\n\t\t\t\tcreate() {\n\t\t\t\t\tself.update( {\n\t\t\t\t\t\twidth: wx,\n\t\t\t\t\t\theight: hx,\n\t\t\t\t\t\ttop: tx,\n\t\t\t\t\t\tleft: lx,\n\t\t\t\t\t} );\n\t\t\t\t},\n\t\t\t\tslide( e, ui ) {\n\t\t\t\t\tnw = wx + ( ui.value / 100 ) * data.width * 2;\n\t\t\t\t\tnh = hx + ( ui.value / 100 ) * data.height * 2;\n\t\t\t\t\tlet nl = data.viewWidth / 2 - ( nw * dd ),\n\t\t\t\t\t\tnt = data.viewHeight / 2 - nh * bb;\n\n\t\t\t\t\tif ( nl > 0 ) {\n\t\t\t\t\t\tnl = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif ( nt > 0 ) {\n\t\t\t\t\t\tnt = 0;\n\t\t\t\t\t}\n\t\t\t\t\tconst xx = parseInt( data.viewWidth - nw ),\n\t\t\t\t\t\tyy = parseInt( data.viewHeight - nh );\n\n\t\t\t\t\tif ( xx > nl ) {\n\t\t\t\t\t\tnl = lx = xx;\n\t\t\t\t\t}\n\t\t\t\t\tif ( yy > nt ) {\n\t\t\t\t\t\tnt = tx = yy;\n\t\t\t\t\t}\n\t\t\t\t\tself.update( {\n\t\t\t\t\t\twidth: nw,\n\t\t\t\t\t\theight: nh,\n\t\t\t\t\t\ttop: nt,\n\t\t\t\t\t\tleft: nl,\n\t\t\t\t\t} );\n\t\t\t\t\t$( document.body ).addClass( 'profile-resizing' );\n\n\t\t\t\t\tconsole.log( ui.value, data );\n\t\t\t\t},\n\t\t\t\tstop() {\n\t\t\t\t\t$( document.body ).removeClass( 'profile-resizing' );\n\t\t\t\t},\n\t\t\t} );\n\t\t};\n\t\tthis.update = function( args ) {\n\t\t\t$img.css( {\n\t\t\t\twidth: args.width,\n\t\t\t\theight: args.height,\n\t\t\t\ttop: args.top,\n\t\t\t\tleft: args.left,\n\t\t\t} );\n\t\t\tconst r = args.width / data.width,\n\t\t\t\tleft = parseInt( Math.abs( args.left / r ) ),\n\t\t\t\ttop = parseInt( Math.abs( args.top / r ) ),\n\t\t\t\tright = left + parseInt( data.viewWidth / r ),\n\t\t\t\tbottom = top + parseInt( data.viewHeight / r );\n\t\t\tconst cropData = $.extend( args, {\n\t\t\t\twidth: data.viewWidth,\n\t\t\t\theight: data.viewHeight,\n\t\t\t\tr,\n\t\t\t\tpoints: [ left, top, right, bottom ].join( ',' ),\n\t\t\t} );\n\t\t\t$crop.find( 'input[name^=\"lp-user-avatar-crop\"]' ).each( function() {\n\t\t\t\tconst $input = $( this ),\n\t\t\t\t\tname = $input.data( 'name' );\n\n\t\t\t\tif ( name != 'name' && cropData[ name ] !== undefined ) {\n\t\t\t\t\t$input.val( cropData[ name ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\t\tthis.initCrop();\n\t};\n\n\t$( document ).on( 'submit', '#learn-press-form-login', function( e ) {\n\t\tconst $form = $( this ),\n\t\t\tdata = $form.serialize();\n\t\t$form.find( '.learn-press-error, .learn-press-notice, .learn-press-message' ).fadeOut();\n\t\t$form.find( 'input' ).attr( 'disabled', true );\n\n\t\tLP.doAjax( {\n\t\t\tdata: {\n\t\t\t\t'lp-ajax': 'login',\n\t\t\t\tdata,\n\t\t\t},\n\t\t\tsuccess( response, raw ) {\n\t\t\t\tLP.showMessages( response.message, $form, 'LOGIN_ERROR' );\n\t\t\t\tif ( response.result == 'error' ) {\n\t\t\t\t\t$form.find( 'input' ).attr( 'disabled', false );\n\t\t\t\t\t$( '#learn-press-form-login input[type=\"text\"]' ).trigger( 'focus' );\n\t\t\t\t}\n\t\t\t\tif ( response.redirect ) {\n\t\t\t\t\tLP.reload( response.redirect );\n\t\t\t\t}\n\t\t\t},\n\t\t\terror() {\n\t\t\t\tLP.showMessages( '', $form, 'LOGIN_ERROR' );\n\t\t\t\t$form.find( 'input' ).attr( 'disabled', false );\n\t\t\t\t$( '#learn-press-form-login input[type=\"text\"]' ).trigger( 'focus' );\n\t\t\t},\n\t\t} );\n\n\t\treturn false;\n\t} );\n\n\t$( document ).on( 'click', '.table-orders .cancel-order', function( e ) {\n\t\te.preventDefault();\n\t\tconst _this = $( this ),\n\t\t\t_href = _this.attr( 'href' );\n\n\t\tLP.alert( learn_press_js_localize.confirm_cancel_order, function( confirm ) {\n\t\t\tif ( confirm ) {\n\t\t\t\twindow.location.href = _href;\n\t\t\t}\n\t\t} );\n\n\t\treturn false;\n\t} );\n\n\t$( document ).ready( function() {\n\t\tlet $form = $( '#lp-user-profile-form form' ),\n\t\t\toldData = $form.serialize(),\n\t\t\ttimer = null,\n\t\t\t$passwordForm = $form.find( '#lp-profile-edit-password-form' );\n\n\t\tfunction _checkData() {\n\t\t\treturn $form.serialize() != oldData;\n\t\t}\n\n\t\tfunction _timerCallback() {\n\t\t\t$form.find( '#submit' ).prop( 'disabled', ! _checkData() );\n\t\t}\n\n\t\tif ( $passwordForm.length == 0 ) {\n\t\t\t$form.on( 'keyup change', 'input, textarea, select', function() {\n\t\t\t\ttimer && clearTimeout( timer );\n\t\t\t\ttimer = setTimeout( _timerCallback, 300 );\n\t\t\t} );\n\t\t} else {\n\t\t\t$passwordForm.on( 'change keyup', 'input', function( e ) {\n\t\t\t\tconst $target = $( e.target ),\n\t\t\t\t\ttargetName = $target.attr( 'name' ),\n\t\t\t\t\t$oldPass = $form.find( '#pass0' ),\n\t\t\t\t\t$newPass = $form.find( '#pass1' ),\n\t\t\t\t\t$confirmPass = $form.find( '#pass2' ),\n\t\t\t\t\tmatch = ! ( ( $newPass.val() || $confirmPass.val() ) && $newPass.val() != $confirmPass.val() );\n\t\t\t\t$form.find( '#lp-password-not-match' ).toggleClass( 'hide-if-js', match );\n\t\t\t\t$form.find( '#submit' ).prop( 'disabled', ! match || ! $oldPass.val() || ! $newPass.val() || ! $confirmPass.val() );\n\t\t\t} );\n\t\t}\n\n\t\tconst args = {};\n\t\tif ( typeof lpProfileUserSettings !== 'undefined' ) {\n\t\t\targs.viewWidth = parseInt( lpProfileUserSettings.avatar_size.width );\n\t\t\targs.viewHeight = parseInt( lpProfileUserSettings.avatar_size.height );\n\t\t}\n\n\t\tnew UserProfile( args );\n\n\t\tProfile.recoverOrder();\n\t} ).on( 'click', '.btn-load-more-courses', function( event ) {\n\t\tconst $button = $( this );\n\t\tlet paged = $button.data( 'paged' ) || 1;\n\t\tconst pages = $button.data( 'pages' ) || 1;\n\t\tconst container = $button.data( 'container' );\n\t\tconst $container = $( '#' + container );\n\t\tlet url = $button.data( 'url' );\n\n\t\tpaged++;\n\t\t$button.data( 'paged', paged ).prop( 'disabled', true ).removeClass( 'btn-ajax-off' ).addClass( 'btn-ajax-on' );\n\n\t\tif ( ! url ) {\n\t\t\tconst seg = window.location.href.split( '?' );\n\n\t\t\tif ( seg[ 0 ].match( /\\/([0-9]+)\\// ) ) {\n\t\t\t\turl = seg[ 0 ].replace( /\\/([0-9]+)\\//, paged );\n\t\t\t} else {\n\t\t\t\turl = seg[ 0 ] + paged;\n\t\t\t}\n\n\t\t\tif ( seg[ 1 ] ) {\n\t\t\t\turl += '?' + seg[ 1 ];\n\t\t\t}\n\t\t} else {\n\t\t\turl = url.addQueryVar( 'current_page', paged );\n\t\t}\n\n\t\t$.ajax( {\n\t\t\turl,\n\t\t\tdata: $button.data( 'args' ),\n\t\t\tsuccess( response ) {\n\t\t\t\t$container.append( $( response ).find( '#' + container ).children() );\n\n\t\t\t\tif ( paged >= pages ) {\n\t\t\t\t\t$button.remove();\n\t\t\t\t} else {\n\t\t\t\t\t$button.prop( 'disabled', false ).removeClass( 'btn-ajax-on' ).addClass( 'btn-ajax-off' );\n\t\t\t\t}\n\t\t\t},\n\t\t} );\n\t} );\n\n\tconst Profile = {\n\t\trecoverOrder( e ) {\n\t\t\tconst $wrap = $( '.order-recover' ),\n\t\t\t\t$buttonRecoverOrder = $wrap.find( '.button-recover-order' ),\n\t\t\t\t$input = $wrap.find( 'input[name=\"order-key\"]' );\n\n\t\t\tconst recoverOrder = () => {\n\t\t\t\t$wrap.find( '.learn-press-message' ).remove();\n\n\t\t\t\t$( '.profile-recover-order' ).find( '.learn-press-message' ).remove();\n\n\t\t\t\t$.post( {\n\t\t\t\t\turl: '',\n\t\t\t\t\tdata: $wrap.serializeJSON(),\n\t\t\t\t\tbeforeSend() {\n\t\t\t\t\t\t$buttonRecoverOrder.addClass( 'loading' ).attr( 'disabled', 'disabled' );\n\t\t\t\t\t},\n\t\t\t\t\tsuccess( response ) {\n\t\t\t\t\t\tresponse = LP.parseJSON( response );\n\n\t\t\t\t\t\tif ( response.message ) {\n\t\t\t\t\t\t\tconst $msg = $( '<div class=\"learn-press-message icon\"><i class=\"fa\"></i> ' + response.message + '</div>' );\n\n\t\t\t\t\t\t\tif ( response.result == 'error' ) {\n\t\t\t\t\t\t\t\t$msg.addClass( 'error' );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$wrap.before( $msg );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.redirect ) {\n\t\t\t\t\t\t\twindow.location.href = response.redirect;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$buttonRecoverOrder.removeClass( 'loading' ).removeAttr( 'disabled', '' );\n\t\t\t\t\t},\n\t\t\t\t\terror() {\n\t\t\t\t\t\t$buttonRecoverOrder.removeClass( 'loading' ).removeAttr( 'disabled', '' );\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\t$buttonRecoverOrder.on( 'click', recoverOrder );\n\t\t},\n\t};\n}( jQuery ) );\n", "<?php\n\n/**\n * Class LP_Admin_Ajax\n *\n * @author  ThimPress\n * @package LearnPress/Classes\n * @version 3.0.0\n */\n\n/**\n * Prevent loading this file directly\n */\ndefined( 'ABSPATH' ) || exit();\n\nif ( ! class_exists( 'LP_Admin_Ajax' ) ) {\n\n\t/**\n\t * Class LP_Admin_Ajax\n\t */\n\tclass LP_Admin_Ajax {\n\n\t\t/**\n\t\t * Add action ajax\n\t\t */\n\t\tpublic static function init() {\n\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$ajax_events = array(\n\t\t\t\t'create_page'            => false, // Use create new page on Settings\n\t\t\t\t// 'plugin_action'           => false,\n\t\t\t\t// 'modal_search_items'      => false,\n\t\t\t\t//'dismiss_notice'         => false,\n\t\t\t\t//'search_users'           => false,\n\t\t\t\t'load_chart'             => false,\n\t\t\t\t'search_course_category' => false,\n\t\t\t\t'custom_stats'           => false,\n\t\t\t\t//'ignore_setting_up'      => false,\n\t\t\t\t'get_page_permalink'     => false,\n\t\t\t\t//'dummy_image'            => false,\n\t\t\t\t// 'update_add_on_status'    => false,\n\t\t\t\t// 'plugin_install'          => false,\n\t\t\t\t//'bundle_activate_add_ons' => false,\n\t\t\t\t//'install_sample_data'     => false,\n\n\t\t\t\t// Remove Notice\n\t\t\t\t//'remove_notice_popup'    => false,\n\t\t\t\t// Update order status\n\t\t\t\t// 'update_order_status'     => false,\n\t\t\t\t'update_order_exports'   => false,\n\t\t\t);\n\n\t\t\tforeach ( $ajax_events as $ajax_event => $nopriv ) {\n\t\t\t\tadd_action( 'wp_ajax_learnpress_' . $ajax_event, array( __CLASS__, $ajax_event ) );\n\n\t\t\t\t// enable for non-logged in users\n\t\t\t\tif ( $nopriv ) {\n\t\t\t\t\tadd_action( 'wp_ajax_nopriv_learnpress_' . $ajax_event, array( __CLASS__, $ajax_event ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdo_action( 'learn-press/ajax/admin-load', __CLASS__ );\n\n\t\t\t$ajax_events = array(\n\t\t\t\t'search_items' => 'modal_search_items',\n\t\t\t\t'update-payment-order', // Update ordering of payments when user changing.\n\t\t\t\t'update-payment-status', // Enable type payment\n\t\t\t\t//'toggle_item_preview',\n\n\t\t\t\t// admin editor\n\t\t\t\t'admin_course_editor',\n\t\t\t\t'admin_quiz_editor',\n\t\t\t\t'admin_question_editor',\n\t\t\t\t// duplicator\n\t\t\t\t'duplicator', // Duplicate course, lesson, quiz, question.\n\n\t\t\t\t//'add_item_to_order',\n\t\t\t\t//'remove_order_item',\n\n\t\t\t\t'modal_search_items', // Used to search courses on LP Order\n\t\t\t\t'modal_search_users', // Used to search users on LP Order\n\t\t\t\t'add_items_to_order', // Used to add courses on LP Order\n\t\t\t\t'remove_items_from_order', // Used to remove items from LP Order\n\t\t\t\t'update_email_status', // Use for enable email on LP Settings\n\t\t\t\t//'create-pages',\n\t\t\t\t'search-authors', // Used to search username on input some page (list courses, lp orders, quizzes, questions... on the Backend\n\t\t\t\t'skip-notice-install',\n\t\t\t\t//'join_newsletter',\n\t\t\t\t//'dashboard-order-status',\n\t\t\t\t//'dashboard-plugin-status',\n\t\t\t\t//'dismiss-notice',\n\t\t\t\t//'sync-user-orders',\n\t\t\t\t//'sync-course-final-quiz',\n\t\t\t\t//'sync-remove-older-data',\n\t\t\t\t//'sync-calculate-course-results',\n\t\t\t\t//'create-question-type',\n\t\t\t\t// 'sync-user-courses',\n\t\t\t);\n\n\t\t\tforeach ( $ajax_events as $action => $callback ) {\n\t\t\t\tif ( is_numeric( $action ) ) {\n\t\t\t\t\t$action = $callback;\n\t\t\t\t}\n\n\t\t\t\t$actions = LP_Request::parse_action( $action );\n\t\t\t\t$method  = $actions['action'];\n\n\t\t\t\tif ( ! is_callable( $callback ) ) {\n\t\t\t\t\t$method   = preg_replace( '/-/', '_', $method );\n\t\t\t\t\t$callback = array( __CLASS__, $method );\n\t\t\t\t}\n\n\t\t\t\tLP_Request::register_ajax( $action, $callback );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function sync_calculate_course_results() {\n\t\t\tif ( ! isset( $_REQUEST['sync'] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$sync = LP_Helper::sanitize_params_submitted( $_REQUEST['sync'] );\n\n\t\t\tif ( empty( $sync ) ) {\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\t\t\t$api = LP_Repair_Database::instance();\n\n\t\t\tif ( $sync === 'get-users' ) {\n\t\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\t\"\n\t\t\t\t\tSELECT ID\n\t\t\t\t\tFROM {$wpdb->users}\n\t\t\t\t\tWHERE 1\n\t\t\t\t\",\n\t\t\t\t\t1\n\t\t\t\t);\n\n\t\t\t\t$users = $wpdb->get_col( $query );\n\n\t\t\t\tlearn_press_send_json( array( 'users' => $users ) );\n\t\t\t}\n\n\t\t\t$api->calculate_course_results( $sync );\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Sync orders for each course\n\t\t *\n\t\t * @since 3.1.0\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function sync_course_orders() {\n\t\t\tif ( empty( $_REQUEST['sync'] ) ) {\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\t\t\t$api  = LP_Repair_Database::instance();\n\t\t\t$sync = $_REQUEST['sync'];\n\n\t\t\tif ( $sync === 'get-courses' ) {\n\t\t\t\tlearn_press_send_json( array( 'courses' => $api->get_all_courses() ) );\n\t\t\t}\n\n\t\t\t$api->sync_course_orders( $sync );\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Sync orders for each user\n\t\t *\n\t\t * @since 3.1.0\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function sync_user_orders() {\n\t\t\tif ( empty( $_REQUEST['sync'] ) ) {\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\t\t\t$api  = LP_Repair_Database::instance();\n\t\t\t$sync = $_REQUEST['sync'];\n\n\t\t\tif ( $sync === 'get-users' ) {\n\t\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\t\"\n\t\t\t\t\tSELECT ID\n\t\t\t\t\tFROM {$wpdb->users}\n\t\t\t\t\tWHERE 1\n\t\t\t\t\",\n\t\t\t\t\t1\n\t\t\t\t);\n\n\t\t\t\t$users = $wpdb->get_col( $query );\n\n\t\t\t\tlearn_press_send_json( array( 'users' => $users ) );\n\t\t\t}\n\n\t\t\t$api->sync_user_orders( $sync );\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Remap final quiz for each course\n\t\t *\n\t\t * @since 3.1.0\n\t\t */\n\t\tpublic static function sync_course_final_quiz() {\n\t\t\tif ( empty( $_REQUEST['sync'] ) ) {\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\t\t\t$api  = LP_Repair_Database::instance();\n\t\t\t$sync = $_REQUEST['sync'];\n\n\t\t\tif ( $sync === 'get-courses' ) {\n\t\t\t\tlearn_press_send_json( array( 'courses' => $api->get_all_courses() ) );\n\t\t\t}\n\n\t\t\t$api->sync_course_final_quiz( $sync );\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\n\t\t\tdie();\n\t\t}\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @comment 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function sync_remove_older_data() {\n\t\t\t$api = LP_Repair_Database::instance();\n\t\t\t$api->remove_older_post_meta();\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Get html of order status to display in WP Dashboad\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function dashboard_order_status() {\n\t\t\tlearn_press_admin_view( 'dashboard/order-status' );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function dashboard_plugin_status() {\n\t\t\t$dashboard   = new LP_Admin_Dashboard();\n\t\t\t$plugin_data = $dashboard->get_data();\n\t\t\tif ( ! $plugin_data || is_wp_error( $plugin_data ) ) {\n\t\t\t\tlearn_press_admin_view( 'dashboard/plugin-status/html-no-data' );\n\t\t\t} else {\n\t\t\t\tlearn_press_admin_view( 'dashboard/plugin-status/html-results', array( 'plugin_data' => $plugin_data ) );\n\t\t\t}\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Search user on some pages on the Backend\n\t\t */\n\t\tpublic static function search_authors() {\n\t\t\t$args  = array(\n\t\t\t\t'orderby'        => 'name',\n\t\t\t\t'order'          => 'ASC',\n\t\t\t\t'search'         => sprintf( '*%s*', esc_attr( LP_Request::get_string( 'term' ) ) ),\n\t\t\t\t'search_columns' => array( 'user_login', 'user_email' ),\n\t\t\t);\n\t\t\t$q     = new WP_User_Query( $args );\n\t\t\t$users = array();\n\n\t\t\t$results = $q->get_results();\n\n\t\t\tif ( $results ) {\n\t\t\t\tforeach ( $results as $result ) {\n\t\t\t\t\t$users[] = array(\n\t\t\t\t\t\t'id'   => $result->ID,\n\t\t\t\t\t\t'text' => learn_press_get_profile_display_name( $result->ID ),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\techo json_encode(\n\t\t\t\tarray(\n\t\t\t\t\t'results' => $users,\n\t\t\t\t)\n\t\t\t);\n\t\t\tdie();\n\t\t}\n\n\t\t/**\n\t\t * Hide notice install\n\t\t */\n\t\tpublic static function skip_notice_install() {\n\t\t\tdelete_option( 'learn_press_install' );\n\t\t}\n\n\t\t/**\n\t\t * Handle ajax admin course editor.\n\t\t *\n\t\t * @since 3.0.0\n\t\t */\n\t\tpublic static function admin_course_editor() {\n\t\t\t$editor = LP_Admin_Editor::get_editor_course();\n\t\t\tself::admin_editor( $editor );\n\t\t}\n\n\t\t/**\n\t\t * Handle ajax admin question editor.\n\t\t *\n\t\t * @since 3.0.0\n\t\t */\n\t\tpublic static function admin_question_editor() {\n\t\t\t$editor = LP_Admin_Editor::get_editor_question();\n\t\t\tself::admin_editor( $editor );\n\t\t}\n\n\t\t/**\n\t\t * Handle ajax admin quiz editor.\n\t\t *\n\t\t * @since 3.0.0\n\t\t */\n\t\tpublic static function admin_quiz_editor() {\n\t\t\t$editor = LP_Admin_Editor::get_editor_quiz();\n\t\t\tself::admin_editor( $editor );\n\t\t}\n\n\t\t/**\n\t\t * @param LP_Admin_Editor $editor\n\t\t *\n\t\t * @since 3.0.2\n\t\t */\n\t\tpublic static function admin_editor( &$editor ) {\n\t\t\t$result = $editor->dispatch();\n\n\t\t\tif ( is_wp_error( $result ) ) {\n\t\t\t\tlearn_press_send_json_error( $result->get_error_message() );\n\t\t\t} elseif ( ! $result ) {\n\t\t\t\tlearn_press_send_json_error();\n\t\t\t}\n\n\t\t\tlearn_press_send_json_success( $result );\n\t\t}\n\n\t\t/**\n\t\t * Send data to join newsletter or dismiss.\n\t\t *\n\t\t * [\n\t\t *  This function has deprecated since 3.2.6 from this class.\n\t\t *  Please check class LP_Admin and hook learn-press/dismissed-notice-response for more details.\n\t\t *  Newsletter function be hooked to the hook above to send subscription when\n\t\t *  notice has already dismissed.\n\t\t * ]\n\t\t *\n\t\t * @deprecated\n\t\t *\n\t\t * @since 3.0.10\n\t\t * @editable tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function join_newsletter() {\n\t\t\t$context = LP_Request::get_string( 'context' );\n\t\t\tif ( ! $context || $context != 'newsletter' ) {\n\t\t\t\tupdate_option( 'learn-press-dismissed-newsletter-button', 1 );\n\t\t\t\tlearn_press_send_json_success( __( 'Dismissed!', 'learnpress' ) );\n\t\t\t}\n\t\t\t$user = learn_press_get_current_user();\n\t\t\tif ( ! $user || $user->get_email() == '' ) {\n\t\t\t\tlearn_press_send_json_error( __( 'Fail while joining newsletter! Please try again!', 'learnpress' ) );\n\t\t\t}\n\t\t\t$url      = 'https://thimpress.com/mailster/subscribe';\n\t\t\t$response = wp_remote_post(\n\t\t\t\t$url,\n\t\t\t\tarray(\n\t\t\t\t\t'method'      => 'POST',\n\t\t\t\t\t'timeout'     => 45,\n\t\t\t\t\t'redirection' => 5,\n\t\t\t\t\t'httpversion' => '1.0',\n\t\t\t\t\t'blocking'    => true,\n\t\t\t\t\t'headers'     => array(),\n\t\t\t\t\t'body'        => array(\n\t\t\t\t\t\t'_referer' => 'extern',\n\t\t\t\t\t\t'_nonce'   => '4b266caf7b',\n\t\t\t\t\t\t'formid'   => '19',\n\t\t\t\t\t\t'email'    => $user->get_email(),\n\t\t\t\t\t\t'website'  => site_url(),\n\t\t\t\t\t),\n\t\t\t\t\t'cookies'     => array(),\n\t\t\t\t)\n\t\t\t);\n\t\t\tif ( is_wp_error( $response ) ) {\n\t\t\t\t$error_message = $response->get_error_message();\n\t\t\t\tlearn_press_send_json_error( __( 'Something went wrong: ', 'learnpress' ) . $error_message );\n\t\t\t} else {\n\t\t\t\tupdate_option( 'learn-press-dismissed-newsletter-button', 1 );\n\t\t\t\tlearn_press_send_json_success( __( 'Thank you for subscribing! Please check and click the confirmation link from the email we\\'ve just sent to your mail box.', 'learnpress' ) );\n\t\t\t}\n\t\t}*/\n\n\t\t/**\n\t\t * Duplicate course, lesson, quiz, question.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function duplicator() {\n\t\t\t$post_id = intval( $_GET['id'] ?? 0 );\n\n\t\t\t// get post type\n\t\t\t$post_type = learn_press_get_post_type( $post_id );\n\n\t\t\tif ( ! $post_id ) {\n\t\t\t\tlearn_press_send_json_error( __( 'Ops! ID not found', 'learnpress' ) );\n\t\t\t} else {\n\n\t\t\t\t$new_item_id = '';\n\n\t\t\t\t$duplicate_args = apply_filters( 'learn-press/duplicate-post-args', array( 'post_status' => 'publish' ) );\n\n\t\t\t\tswitch ( $post_type ) {\n\t\t\t\t\tcase LP_COURSE_CPT:\n\t\t\t\t\t\t$curd        = new LP_Course_CURD();\n\t\t\t\t\t\t$new_item_id = $curd->duplicate(\n\t\t\t\t\t\t\t$post_id,\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'exclude_meta' => array(\n\t\t\t\t\t\t\t\t\t'order-pending',\n\t\t\t\t\t\t\t\t\t'order-processing',\n\t\t\t\t\t\t\t\t\t'order-completed',\n\t\t\t\t\t\t\t\t\t'order-cancelled',\n\t\t\t\t\t\t\t\t\t'order-failed',\n\t\t\t\t\t\t\t\t\t'count_enrolled_users',\n\t\t\t\t\t\t\t\t\t'_lp_sample_data',\n\t\t\t\t\t\t\t\t\t'_lp_retake_count',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase LP_LESSON_CPT:\n\t\t\t\t\t\t$curd        = new LP_Lesson_CURD();\n\t\t\t\t\t\t$new_item_id = $curd->duplicate( $post_id, $duplicate_args );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase LP_QUIZ_CPT:\n\t\t\t\t\t\t$curd        = new LP_Quiz_CURD();\n\t\t\t\t\t\t$new_item_id = $curd->duplicate( $post_id, $duplicate_args );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase LP_QUESTION_CPT:\n\t\t\t\t\t\t$curd        = new LP_Question_CURD();\n\t\t\t\t\t\t$new_item_id = $curd->duplicate( $post_id, $duplicate_args );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( is_wp_error( $new_item_id ) ) {\n\t\t\t\t\tlearn_press_send_json_error( __( 'Duplicate post fail, please try again', 'learnpress' ) );\n\t\t\t\t} else {\n\t\t\t\t\tlearn_press_send_json_success( admin_url( 'post.php?post=' . $new_item_id . '&action=edit' ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Update ordering of payments when user changing.\n\t\t *\n\t\t * @since 3.0.0\n\t\t * @use for sorting by type payment gateway\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function update_payment_order() {\n\t\t\t$payment_order = learn_press_get_request( 'order' );\n\t\t\tupdate_option( 'learn_press_payment_order', $payment_order );\n\t\t}\n\n\t\t/**\n\t\t * Enable type payment\n\t\t *\n\t\t * @since 3.0.0\n\t\t * @use for enable type payment gateway\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function update_payment_status() {\n\t\t\t$payment_id = learn_press_get_request( 'id' );\n\t\t\t$status     = LP_Request::get_string( 'status' );\n\t\t\t$payment    = LP_Gateways::instance()->get_gateway( $payment_id );\n\n\t\t\tif ( ! $payment ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$response[ $payment->id ] = $payment->enable( $status == 'yes' );\n\n\t\t\tlearn_press_send_json( $response );\n\t\t}\n\n\t\t/**\n\t\t * nable email on LP Settings\n\t\t *\n\t\t * @since 3.0.0\n\t\t * @note tungnnx checked has use\n\t\t */\n\t\tpublic static function update_email_status() {\n\n\t\t\t$email_id = LP_Request::get_string( 'id' );\n\t\t\t$status   = LP_Request::get_string( 'status' );\n\t\t\t$response = array();\n\n\t\t\tif ( $email_id ) {\n\n\t\t\t\t$email = LP_Emails::get_email( $email_id );\n\t\t\t\tif ( ! $email ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t$response[ $email->id ] = $email->enable( $status == 'yes' );\n\t\t\t} else {\n\t\t\t\t$emails = LP_Emails::instance()->emails;\n\t\t\t\tforeach ( $emails as $email ) {\n\t\t\t\t\t$response[ $email->id ] = $email->enable( $status == 'yes' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t}\n\n\t\t/**\n\t\t * Toggle lesson preview.\n\t\t */\n\t\t/*public static function toggle_item_preview() {\n\t\t\t$id = learn_press_get_request( 'item_id' );\n\t\t\tif ( in_array(\n\t\t\t\tget_post_type( $id ),\n\t\t\t\tapply_filters(\n\t\t\t\t\t'learn-press/reviewable-post-types',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'lp_lesson',\n\t\t\t\t\t\t'lp_quiz',\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t) && wp_verify_nonce( learn_press_get_request( 'nonce' ), 'learn-press-toggle-item-preview' )\n\t\t\t) {\n\t\t\t\t$previewable = learn_press_get_request( 'previewable' );\n\t\t\t\tif ( is_null( $previewable ) ) {\n\t\t\t\t\t$previewable = '0';\n\t\t\t\t}\n\t\t\t\tupdate_post_meta( $id, '_lp_preview', $previewable );\n\t\t\t}\n\t\t}*/\n\n\t\t/**\n\t\t * Search items by requesting params.\n\t\t */\n\t\tpublic static function modal_search_items() {\n\t\t\t$term       = LP_Helper::sanitize_params_submitted( $_POST['term'] ?? '' );\n\t\t\t$type       = LP_Helper::sanitize_params_submitted( $_POST['type'] ?? '' );\n\t\t\t$context    = LP_Helper::sanitize_params_submitted( $_POST['context'] ?? '' );\n\t\t\t$context_id = LP_Helper::sanitize_params_submitted( $_POST['context_id'] ?? '' );\n\t\t\t$paged      = LP_Helper::sanitize_params_submitted( $_POST['paged'] ?? '' );\n\t\t\t$exclude    = LP_Request::get( 'exclude' );\n\n\t\t\t$search = new LP_Modal_Search_Items( compact( 'term', 'type', 'context', 'context_id', 'paged', 'exclude' ) );\n\n\t\t\tlearn_press_send_json(\n\t\t\t\tarray(\n\t\t\t\t\t'html'  => $search->get_html_items(),\n\t\t\t\t\t'nav'   => $search->get_pagination(),\n\t\t\t\t\t'items' => $search->get_items(),\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Search items by requesting params.\n\t\t *\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function modal_search_users() {\n\t\t\t$term        = LP_Helper::sanitize_params_submitted( $_POST['term'] ?? '' );\n\t\t\t$type        = LP_Helper::sanitize_params_submitted( $_POST['type'] ?? '' );\n\t\t\t$context     = LP_Helper::sanitize_params_submitted( $_POST['context'] ?? '' );\n\t\t\t$context_id  = LP_Helper::sanitize_params_submitted( $_POST['context_id'] ?? '' );\n\t\t\t$paged       = LP_Helper::sanitize_params_submitted( $_POST['paged'] ?? '' );\n\t\t\t$multiple    = LP_Helper::sanitize_params_submitted( $_POST['multiple'] ?? '' ) == 'yes';\n\t\t\t$text_format = LP_Helper::sanitize_params_submitted( $_POST['text_format'] ?? '' );\n\t\t\t$exclude     = LP_Request::get( 'exclude' );\n\n\t\t\t$search = new LP_Modal_Search_Users( compact( 'term', 'type', 'context', 'context_id', 'paged', 'multiple', 'text_format', 'exclude' ) );\n\n\t\t\tlearn_press_send_json(\n\t\t\t\tarray(\n\t\t\t\t\t'html'  => $search->get_html_items(),\n\t\t\t\t\t'nav'   => $search->get_pagination(),\n\t\t\t\t\t'users' => $search->get_items(),\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Search course category.\n\t\t */\n\t\tpublic static function search_course_category() {\n\t\t\tglobal $wpdb;\n\t\t\t$sql   = 'SELECT `t`.`term_id` as `id`, '\n\t\t\t\t\t . ' `t`.`name` `text` '\n\t\t\t\t\t . \" FROM {$wpdb->terms} t \"\n\t\t\t\t\t . \"\t\tINNER JOIN {$wpdb->term_taxonomy} tt ON t.term_id = tt.term_id AND taxonomy='course_category' \"\n\t\t\t\t\t . ' WHERE `t`.`name` LIKE %s';\n\t\t\t$s     = '%' . filter_input( INPUT_GET, 'q' ) . '%';\n\t\t\t$query = $wpdb->prepare( $sql, $s );\n\t\t\t$items = $wpdb->get_results( $query );\n\t\t\t$data  = array( 'items' => $items );\n\t\t\techo json_encode( $data );\n\t\t\texit();\n\t\t}\n\n\t\t/**\n\t\t * Remove an item from lp order\n\t\t *\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function remove_items_from_order() {\n\t\t\t// ensure that user has permission\n\t\t\tif ( ! current_user_can( 'edit_lp_orders' ) ) {\n\t\t\t\tdie( __( 'Access denied', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// verify nonce\n\t\t\t$nonce = learn_press_get_request( 'remove_nonce' );\n\t\t\tif ( ! wp_verify_nonce( $nonce, 'remove_order_item' ) ) {\n\t\t\t\tdie( __( 'Check nonce failed', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// validate order\n\t\t\t$order_id = learn_press_get_request( 'order_id' );\n\t\t\tif ( ! is_numeric( $order_id ) || learn_press_get_post_type( $order_id ) != 'lp_order' ) {\n\t\t\t\tdie( __( 'Invalid order', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// validate item\n\t\t\t$items = learn_press_get_request( 'items' );\n\n\t\t\t$order = learn_press_get_order( $order_id );\n\n\t\t\tglobal $wpdb;\n\n\t\t\tforeach ( $items as $item_id ) {\n\t\t\t\t$order->remove_item( $item_id );\n\t\t\t}\n\n\t\t\t$order_data                  = learn_press_update_order_items( $order_id );\n\t\t\t$currency_symbol             = learn_press_get_currency_symbol( $order_data['currency'] );\n\t\t\t$order_data['subtotal_html'] = learn_press_format_price( $order_data['subtotal'], $currency_symbol );\n\t\t\t$order_data['total_html']    = learn_press_format_price( $order_data['total'], $currency_symbol );\n\t\t\t$order_items                 = $order->get_items();\n\t\t\tif ( $order_items ) {\n\t\t\t\t$html = '';\n\t\t\t\tforeach ( $order_items as $item ) {\n\t\t\t\t\tob_start();\n\t\t\t\t\tinclude learn_press_get_admin_view( 'meta-boxes/order/order-item.php' );\n\t\t\t\t\t$html .= ob_get_clean();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlearn_press_send_json(\n\t\t\t\tarray(\n\t\t\t\t\t'result'     => 'success',\n\t\t\t\t\t'item_html'  => $html,\n\t\t\t\t\t'order_data' => $order_data,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Add courses to order\n\t\t *\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function add_items_to_order() {\n\t\t\t// ensure that user has permission\n\t\t\tif ( ! current_user_can( 'edit_lp_orders' ) ) {\n\t\t\t\tdie( __( 'Permission denied', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// validate order\n\t\t\t$order_id = learn_press_get_request( 'order_id' );\n\t\t\tif ( ! is_numeric( $order_id ) || learn_press_get_post_type( $order_id ) != 'lp_order' ) {\n\t\t\t\tdie( __( 'Invalid order', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// validate item\n\t\t\t$item_ids = learn_press_get_request( 'items' );\n\t\t\t$order    = learn_press_get_order( $order_id );\n\n\t\t\t$response = array(\n\t\t\t\t'result' => 'error',\n\t\t\t);\n\n\t\t\t$order_item_ids = $order->add_items( $item_ids );\n\n\t\t\tif ( $order_item_ids ) {\n\t\t\t\t$html        = '';\n\t\t\t\t$order_items = $order->get_items();\n\n\t\t\t\t$order_data                  = learn_press_update_order_items( $order_id );\n\t\t\t\t$currency_symbol             = learn_press_get_currency_symbol( $order_data['currency'] );\n\t\t\t\t$order_data['subtotal_html'] = learn_press_format_price( $order_data['subtotal'], $currency_symbol );\n\t\t\t\t$order_data['total_html']    = learn_press_format_price( $order_data['total'], $currency_symbol );\n\n\t\t\t\tif ( $order_items ) {\n\t\t\t\t\tforeach ( $order_items as $item ) {\n\n\t\t\t\t\t\tif ( ! in_array( $item['id'], $order_item_ids ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tob_start();\n\t\t\t\t\t\tinclude learn_press_get_admin_view( 'meta-boxes/order/order-item.php' );\n\t\t\t\t\t\t$html .= ob_get_clean();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$response = array(\n\t\t\t\t\t'result'     => 'success',\n\t\t\t\t\t'item_html'  => $html,\n\t\t\t\t\t'order_data' => $order_data,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlearn_press_send_json( $response );\n\t\t}\n\n\t\t/**\n\t\t * Get content send via payload and parse to json.\n\t\t *\n\t\t * @param mixed $params (Optional) List of keys want to get from payload.\n\t\t *\n\t\t * @return array|bool|mixed|object\n\t\t */\n\t\tpublic static function get_php_input( $params = '' ) {\n\t\t\tstatic $data = false;\n\t\t\tif ( false === $data ) {\n\t\t\t\ttry {\n\t\t\t\t\t$data = json_decode( file_get_contents( 'php://input' ), true );\n\t\t\t\t} catch ( Exception $exception ) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( $data && func_num_args() > 0 ) {\n\t\t\t\t$params = is_array( func_get_arg( 0 ) ) ? func_get_arg( 0 ) : func_get_args();\n\t\t\t\tif ( $params ) {\n\t\t\t\t\t$request = array();\n\t\t\t\t\tforeach ( $params as $key ) {\n\t\t\t\t\t\t$request[] = array_key_exists( $key, $data ) ? $data[ $key ] : false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn $request;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $data;\n\t\t}\n\n\t\t/**\n\t\t * Parse request content into var.\n\t\t * Normally, parse and assign to $_POST or $_GET.\n\t\t *\n\t\t * @param $var\n\t\t */\n\t\tpublic static function parsePhpInput( &$var ) {\n\t\t\t$data = self::get_php_input();\n\n\t\t\tif ( $data ) {\n\t\t\t\tforeach ( $data as $k => $v ) {\n\t\t\t\t\t$var[ $k ] = $v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic static function load_chart() {\n\t\t\tif ( ! class_exists( 'LP_Submenu_Statistics' ) ) {\n\t\t\t\t$statistic = include_once LP_PLUGIN_PATH . '/inc/admin/sub-menus/class-lp-submenu-statistics.php';\n\t\t\t} else {\n\t\t\t\t$statistic = new LP_Submenu_Statistics();\n\t\t\t}\n\t\t\t$statistic->load_chart();\n\t\t}\n\n\t\t/**\n\t\t * @param $query\n\t\t *\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function search_users() {\n\t\t\tif ( ! current_user_can( 'edit_lp_orders' ) ) {\n\t\t\t\tdie( - 1 );\n\t\t\t}\n\n\t\t\t$term = LP_Helper::sanitize_params_submitted( $_REQUEST['term'] );\n\n\t\t\tif ( empty( $term ) ) {\n\t\t\t\tdie( __FILE__ . '::' . __FUNCTION__ );\n\n\t\t\t}\n\n\t\t\t$found_customers = array();\n\n\t\t\tadd_action( 'pre_user_query', array( __CLASS__, 'json_search_customer_name' ) );\n\n\t\t\t$customers_query = new WP_User_Query(\n\t\t\t\tapply_filters(\n\t\t\t\t\t'learn_press_search_customers_query',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'fields'         => 'all',\n\t\t\t\t\t\t'orderby'        => 'display_name',\n\t\t\t\t\t\t'search'         => '*' . $term . '*',\n\t\t\t\t\t\t'search_columns' => array( 'ID', 'user_login', 'user_email', 'user_nicename' ),\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tremove_action( 'pre_user_query', array( __CLASS__, 'json_search_customer_name' ) );\n\n\t\t\t$customers = $customers_query->get_results();\n\n\t\t\tif ( ! empty( $customers ) ) {\n\t\t\t\tforeach ( $customers as $customer ) {\n\t\t\t\t\t$found_customers[] = array(\n\t\t\t\t\t\t'label' => $customer->display_name . ' (#' . $customer->ID . ' &ndash; ' . sanitize_email( $customer->user_email ) . ')',\n\t\t\t\t\t\t'value' => $customer->ID,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo json_encode( $found_customers );\n\t\t\tdie();\n\t\t}*/\n\n\t\tpublic static function json_search_customer_name( $query ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$term = LP_Helper::sanitize_params_submitted( $_REQUEST['term'] );\n\t\t\tif ( method_exists( $wpdb, 'esc_like' ) ) {\n\t\t\t\t$term = $wpdb->esc_like( $term );\n\t\t\t} else {\n\t\t\t\t$term = like_escape( $term );\n\t\t\t}\n\n\t\t\t$query->query_from  .= \" INNER JOIN {$wpdb->usermeta} AS user_name ON {$wpdb->users}.ID = user_name.user_id AND ( user_name.meta_key = 'first_name' OR user_name.meta_key = 'last_name' ) \";\n\t\t\t$query->query_where .= $wpdb->prepare( ' OR user_name.meta_value LIKE %s ', '%' . $term . '%' );\n\t\t}\n\n\t\t/**\n\t\t * Dismiss notice\n\t\t *\n\t\t * @update 3.2.6\n\t\t * @editor tungnx\n\t\t * @comment 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function dismiss_notice() {\n\t\t\t$name    = learn_press_get_request( 'name' );\n\t\t\t$value   = learn_press_get_request( 'value' );\n\t\t\t$expired = learn_press_get_request( 'expired' );\n\n\t\t\t// LP_Admin_Notice::instance()->dismiss_notice_2( $name, $value, $expired );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/*\n\t\t * comment by tungnnx\n\t\t * @reason not uses - low security\n\t\t * @since 3.2.6.8\n\t\t */\n\t\t/*\n\t\tpublic static function plugin_action() {\n\t\t\t$url = learn_press_get_request( 'url' );\n\t\t\tob_start();\n\t\t\twp_remote_get( $url );\n\t\t\tob_get_clean();\n\t\t\techo wp_remote_get( admin_url( 'admin.php?page=learn-press-addons&tab=installed' ) );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * create new page on LP Settings\n\t\t *\n\t\t * @note tungnnx checked use\n\t\t */\n\t\tpublic static function create_page() {\n\t\t\t$response = array(\n\t\t\t\t'code'    => 0,\n\t\t\t\t'message' => '',\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * Check valid\n\t\t\t *\n\t\t\t * 1. Capability - user can edit pages (add\\edit\\delete)\n\t\t\t * 2. Check nonce return true\n\t\t\t * 3. param post page_name not empty\n\t\t\t *\n\t\t\t * @since  3.2.6.8\n\t\t\t * @author tungnx\n\t\t\t */\n\t\t\tif ( ! current_user_can( 'edit_pages' ) || empty( $_POST['page_name'] ) ) {\n\t\t\t\t$response['message'] = 'Request invalid';\n\t\t\t\tlearn_press_send_json( $response );\n\t\t\t}\n\n\t\t\t$page_name = LP_Helper::sanitize_params_submitted( $_POST['page_name'] );\n\n\t\t\tif ( $page_name ) {\n\t\t\t\t$page_id = LP_Helper::create_page( $page_name );\n\n\t\t\t\tif ( $page_id ) {\n\t\t\t\t\t$response['code']    = 1;\n\t\t\t\t\t$response['message'] = 'create page success';\n\t\t\t\t\t$response['page']    = get_post( $page_id );\n\t\t\t\t\t$html                = learn_press_pages_dropdown( '', '', array( 'echo' => false ) );\n\t\t\t\t\tpreg_match_all( '!value=\\\"([0-9]+)\\\"!', $html, $matches );\n\t\t\t\t\t$response['positions'] = $matches[1];\n\t\t\t\t\t$response['html']      = '<a href=\"' . get_edit_post_link( $page_id ) . '\" target=\"_blank\">' . __( 'Edit Page', 'learnpress' ) . '</a>&nbsp;';\n\t\t\t\t\t$response['html']     .= '<a href=\"' . get_permalink( $page_id ) . '\" target=\"_blank\">' . __( 'View Page', 'learnpress' ) . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\t$response['error'] = __( 'Error! Page creation failed. Please try again.', 'learnpress' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$response['error'] = __( 'Empty page name!', 'learnpress' );\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t}\n\n\t\t/**\n\t\t * Create LP static pages\n\t\t *\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function create_pages() {\n\t\t\tcheck_admin_referer( 'create-pages' );\n\n\t\t\t$pages      = LP_Request::get_list_array( 'pages' );\n\t\t\t$pages      = array_fill_keys( $pages, '' );\n\t\t\t$all_pages  = learn_press_static_page_ids();\n\t\t\t$page_names = learn_press_static_pages();\n\n\t\t\tif ( empty( $pages ) ) {\n\t\t\t\t$pages = $all_pages;\n\t\t\t}\n\n\t\t\tforeach ( $pages as $id => $page_id ) {\n\t\t\t\tif ( ! empty( $all_pages[ $id ] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$page_id = LP_Helper::create_page( isset( $page_names[ $id ] ) ? $page_names[ $id ] : ucfirst( $id ), $id );\n\t\t\t}\n\n\t\t\tLP()->flush_rewrite_rules();\n\n\t\t\techo esc_html__( 'The required pages are successfully created.', 'learnpress' );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Install sample data or dismiss the notice depending on user's option\n\t\t */\n\t\t/*public static function install_sample_data() {\n\t\t\t$yes            = ! empty( $_REQUEST['yes'] ) ? $_REQUEST['yes'] : '';\n\t\t\t$response       = array( 'result' => 'fail' );\n\t\t\t$retry_button   = sprintf( '<a href=\"\" class=\"button yes\" data-action=\"yes\">%s</a>', __( 'Please try again.', 'learnpress' ) );\n\t\t\t$dismiss_button = sprintf( '<a href=\"\" class=\"button disabled no\" data-action=\"no\">%s</a>', __( 'Cancel', 'learnpress' ) );\n\t\t\t$buttons        = sprintf( '<p>%s %s</p>', $retry_button, $dismiss_button );\n\t\t\tif ( 'no' == $yes ) {\n\t\t\t\tset_transient( 'learn_press_install_sample_data', 'off', 12 * HOUR_IN_SECONDS );\n\t\t\t} else {\n\t\t\t\t$result = array( 'status' => 'activate' );// learn_press_install_and_active_add_on( 'learnpress-import-export' );\n\t\t\t\tif ( 'activate' == $result['status'] ) {\n\t\t\t\t\t// copy dummy-data.xml to import folder of the add-on\n\t\t\t\t\tlpie_mkdir( lpie_import_path() );\n\t\t\t\t\tif ( file_exists( lpie_import_path() ) ) {\n\t\t\t\t\t\t$import_source = LP_PLUGIN_PATH . '/dummy-data/dummy-data.xml';\n\t\t\t\t\t\t$file          = 'dummy-data-' . time() . '.xml';\n\t\t\t\t\t\t$copy          = lpie_import_path() . '/' . $file;\n\t\t\t\t\t\tcopy( $import_source, $copy );\n\t\t\t\t\t\tif ( file_exists( $copy ) ) {\n\t\t\t\t\t\t\t$url                 = admin_url( 'admin-ajax.php?page=learn_press_import_export&tab=import-course' );\n\t\t\t\t\t\t\t$postdata            = array(\n\t\t\t\t\t\t\t\t'step'        => 2,\n\t\t\t\t\t\t\t\t'action'      => 'learn_press_import',\n\t\t\t\t\t\t\t\t'import-file' => 'import/' . $file,\n\t\t\t\t\t\t\t\t'nonce'       => wp_create_nonce( 'lpie-import-file' ),\n\t\t\t\t\t\t\t\t'x'           => 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t$response['url']     = $url = $url . '&' . http_build_query( $postdata ) . \"\\n\";\n\t\t\t\t\t\t\t$response['result']  = 'success';\n\t\t\t\t\t\t\t$response['message'] = sprintf( '<p>%s <a href=\"edit.php?post_type=lp_course\">%s</a> </p>', __( 'Successfully import sample data.', 'learnpress' ), __( 'View courses', 'learnpress' ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( $response['result'] == 'fail' ) {\n\t\t\t\t\t\t$response['message'] = sprintf( '<p>%s</p>%s', __( 'Failed to import sample data. Please try again.', 'learnpress' ), $buttons );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$response['result']  = 'fail';\n\t\t\t\t\t$response['message'] = sprintf( '<p>%s</p>', __( 'Unknown error when installing/activating Import/Export add-on. Please try again!', 'learnpress' ) ) . $buttons;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Activate a bundle of add-ons, if an add-on is not installed then install it first\n\t\t *\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function bundle_activate_add_ons() {\n\t\t\tglobal $learn_press_add_ons;\n\t\t\tinclude_once ABSPATH . 'wp-admin/includes/plugin-install.php'; // for plugins_api..\n\t\t\t$response = array( 'addons' => array() );\n\n\t\t\tif ( ! current_user_can( 'activate_plugins' ) ) {\n\t\t\t\t$response['error'] = __( 'You do not have the permission to deactivate plugins on this site.', 'learnpress' );\n\t\t\t} else {\n\n\t\t\t\t$add_ons = $learn_press_add_ons['bundle_activate'];\n\n\t\t\t\tif ( $add_ons ) {\n\t\t\t\t\tforeach ( $add_ons as $slug ) {\n\t\t\t\t\t\t$response['addons'][ $slug ] = learn_press_install_and_active_add_on( $slug );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t}*/\n\n\t\t/**\n\t\t * Activate a bundle of add-ons, if an add-on is not installed then install it first\n\t\t *\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function bundle_activate_add_on() {\n\t\t\t$response = array();\n\t\t\tinclude_once ABSPATH . 'wp-admin/includes/plugin-install.php'; // for plugins_api..\n\t\t\tif ( ! current_user_can( 'activate_plugins' ) ) {\n\t\t\t\t$response['error'] = __( 'You do not have the permission to deactivate plugins on this site.', 'learnpress' );\n\t\t\t} else {\n\t\t\t\t$slug              = ! empty( $_REQUEST['plugin'] ) ? $_REQUEST['plugin'] : null;\n\t\t\t\t$response[ $slug ] = learn_press_install_and_active_add_on( $slug );\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t}*/\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @reason not use\n\t\t * @deprecated 4.0.0.\n\t\t */\n\t\t/*\n\t\tpublic static function plugin_install() {\n\t\t\t$plugin_name = ! empty( $_REQUEST['plugin'] ) ? $_REQUEST['plugin'] : '';\n\t\t\t$response    = learn_press_install_add_on( $plugin_name );\n\t\t\tlearn_press_send_json( $response );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/*\n\t\t * @editor tungnx\n\t\t * @reason not use\n\t\t * @since 3.2.6.8\n\t\t */\n\t\t/*\n\t\tpublic static function update_add_on_status() {\n\t\t\t$plugin   = ! empty( $_REQUEST['plugin'] ) ? $_REQUEST['plugin'] : '';\n\t\t\t$t        = ! empty( $_REQUEST['t'] ) ? $_REQUEST['t'] : '';\n\t\t\t$response = array();\n\t\t\tif ( ! current_user_can( 'activate_plugins' ) ) {\n\t\t\t\t$response['error'] = __( 'You do not have the permission to deactivate plugins on this site.', 'learnpress' );\n\t\t\t}\n\t\t\tif ( $plugin && $t ) {\n\t\t\t\tif ( $t == 'activate' ) {\n\t\t\t\t\tactivate_plugin( $plugin, false, is_network_admin() );\n\t\t\t\t} else {\n\t\t\t\t\tdeactivate_plugins( $plugin, false, is_network_admin() );\n\t\t\t\t}\n\t\t\t\t$is_activate        = is_plugin_active( $plugin );\n\t\t\t\t$response['status'] = $is_activate ? 'activate' : 'deactivate';\n\n\t\t\t}\n\t\t\twp_send_json( $response );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Output the image to browser with text and params passed via $_GET\n\t\t */\n\t\t/*public static function dummy_image() {\n\t\t\t$text = LP_Helper::sanitize_params_submitted( $_REQUEST['text'] ?? '' );\n\t\t\tlearn_press_text_image( $text, $_GET );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Get edit|view link of a page\n\t\t */\n\t\tpublic static function get_page_permalink() {\n\t\t\t$page_id = (int) $_REQUEST['page_id'] ?? 0;\n\t\t\t?>\n\n\t\t\t<a href=\"<?php echo get_edit_post_link( $page_id ); ?>\"\n\t\t\t   target=\"_blank\"><?php _e( 'Edit Page', 'learnpress' ); ?></a>\n\t\t\t<a href=\"<?php echo get_permalink( $page_id ); ?>\"\n\t\t\t   target=\"_blank\"><?php _e( 'View Page', 'learnpress' ); ?></a>\n\n\t\t\t<?php\n\t\t\tdie();\n\t\t}\n\n\t\t/**\n\t\t * Get date from, to for static chart\n\t\t */\n\t\tpublic static function custom_stats() {\n\t\t\t$from      = LP_Helper::sanitize_params_submitted( $_REQUEST['from'] ?? 0 );\n\t\t\t$to        = LP_Helper::sanitize_params_submitted( $_REQUEST['to'] ?? 0 );\n\t\t\t$date_diff = strtotime( $to ) - strtotime( $from );\n\t\t\tif ( $date_diff <= 0 || $from == 0 || $to == 0 ) {\n\t\t\t\tdie();\n\t\t\t}\n\t\t\tlearn_press_process_chart( learn_press_get_chart_students( $to, 'days', floor( $date_diff / ( 60 * 60 * 24 ) ) + 1 ) );\n\t\t\tdie();\n\t\t}\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function ignore_setting_up() {\n\t\t\tupdate_option( '_lpr_ignore_setting_up', 1, true );\n\t\t\tdie;\n\t\t}*/\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function remove_notice_popup() {\n\t\t\tif ( isset( $_POST['action'] ) && $_POST['action'] === 'learnpress_remove_notice_popup' && isset( $_POST['slug'] ) && ! empty( $_POST['slug'] ) && isset( $_POST['user'] ) && ! empty( $_POST['user'] ) ) {\n\t\t\t\t$slug = 'learnpress_notice_' . $_POST['slug'] . '_' . $_POST['user'];\n\t\t\t\tset_transient( $slug, true, 30 * DAY_IN_SECONDS );\n\t\t\t}\n\n\t\t\twp_die();\n\t\t}*/\n\n\t\t/*\n\t\tpublic static function update_order_status() {\n\n\t\t\t$order_id = learn_press_get_request( 'order_id' );\n\t\t\t$value    = learn_press_get_request( 'value' );\n\n\t\t\t$order = array(\n\t\t\t\t'ID'          => $order_id,\n\t\t\t\t'post_status' => $value,\n\t\t\t);\n\n\t\t\twp_update_post( $order ) ? $response['success'] = true : $response['success'] = false;\n\n\t\t\tlearn_press_send_json( $response );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\tpublic static function upload_user_avatar() {\n\t\t\t$file       = $_FILES['lp-upload-avatar'];\n\t\t\t$upload_dir = learn_press_user_profile_picture_upload_dir();\n\n\t\t\tadd_filter( 'upload_dir', array( __CLASS__, '_user_avatar_upload_dir' ), 10000 );\n\n\t\t\t$result = wp_handle_upload(\n\t\t\t\t$file,\n\t\t\t\tarray(\n\t\t\t\t\t'test_form' => false,\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tremove_filter( 'upload_dir', array( __CLASS__, '_user_avatar_upload_dir' ), 10000 );\n\t\t\tif ( is_array( $result ) ) {\n\t\t\t\t$result['name'] = $upload_dir['subdir'] . '/' . basename( $result['file'] );\n\t\t\t\tunset( $result['file'] );\n\t\t\t} else {\n\t\t\t\t$result = array(\n\t\t\t\t\t'error' => __( 'Profile picture upload failed', 'learnpress' ),\n\t\t\t\t);\n\t\t\t}\n\t\t\tlearn_press_send_json( $result );\n\t\t}\n\n\t\tpublic static function _user_avatar_upload_dir( $dir ) {\n\t\t\t$dir = learn_press_user_profile_picture_upload_dir();\n\n\t\t\treturn $dir;\n\t\t}\n\n\t\t/**\n\t\t * Export Order invoice to PDF\n\t\t *\n\t\t * @since 3.2.7.8\n\t\t * @author hungkv\n\t\t */\n\t\tpublic static function update_order_exports() {\n\t\t\t$order_id = absint( $_POST['order_id'] );\n\t\t\t//$site_title      = LP_Helper::sanitize_params_submitted( $_POST['site_title'] );\n\t\t\t//$order_date      = LP_Helper::sanitize_params_submitted( $_POST['order_date'] );\n\t\t\t//$invoice_no      = LP_Helper::sanitize_params_submitted( $_POST['invoice_no'] );\n\t\t\t//$order_customer  = LP_Helper::sanitize_params_submitted( $_POST['order_customer'] );\n\t\t\t//$order_email     = LP_Helper::sanitize_params_submitted( $_POST['order_email'] );\n\t\t\t//$order_payment   = LP_Helper::sanitize_params_submitted( $_POST['order_payment'] );\n\t\t\t$order           = learn_press_get_order( $order_id );\n\t\t\t$currency_symbol = learn_press_get_currency_symbol( $order->get_currency() );\n\n\t\t\tob_start();\n\t\t\tlearn_press_admin_view(\n\t\t\t\t'meta-boxes/order/content-tab-preview-exports-invoice.php',\n\t\t\t\tarray(\n\t\t\t\t\t'order'           => $order,\n\t\t\t\t\t'currency_symbol' => $currency_symbol,\n\t\t\t\t)\n\t\t\t);\n\t\t\t$html = ob_get_clean();\n\t\t\techo $html;\n\t\t\tdie();\n\t\t}\n\t}\n\n\tif ( defined( 'DOING_AJAX' ) ) {\n\t\tadd_action( 'wp_ajax_learnpress_upload-user-avatar', array( 'LP_Admin_Ajax', 'upload_user_avatar' ) );\n\t}\n\n\tadd_action( 'init', array( 'LP_Admin_Ajax', 'init' ) );\n}\n", "<?php\ndefined( 'ABSPATH' ) || exit;\n\nif ( ! class_exists( 'LP_AJAX' ) ) {\n\tclass LP_AJAX {\n\t\t/**\n\t\t * Init common ajax events\n\t\t */\n\t\tpublic static function init() {\n\t\t\t$ajax_events = array(\n\t\t\t\t'checkout-user-email-exists:nopriv',\n\t\t\t\t'recover-order',\n\t\t\t\t'request-become-a-teacher:nonce',\n\t\t\t\t'upload-user-avatar',\n\t\t\t\t'checkout:nopriv',\n\t\t\t\t'complete-lesson',\n\t\t\t\t'finish-course', // finish_course.\n\t\t\t\t// 'retake-course', // retake_course.\n\t\t\t\t'external-link:nopriv',\n\t\t\t\t'save-uploaded-user-avatar',\n\t\t\t\t'load-more-courses',\n\t\t\t);\n\n\t\t\t$ajax_events = apply_filters( 'learn-press/ajax/events', $ajax_events );\n\n\t\t\tforeach ( $ajax_events as $action => $callback ) {\n\n\t\t\t\tif ( is_numeric( $action ) ) {\n\t\t\t\t\t$action = $callback;\n\t\t\t\t}\n\n\t\t\t\t$actions = LP_Request::parse_action( $action );\n\t\t\t\t$method  = $actions['action'];\n\n\t\t\t\tif ( ! is_callable( $callback ) ) {\n\t\t\t\t\t$method   = preg_replace( '/-/', '_', $method );\n\t\t\t\t\t$callback = array( __CLASS__, $method );\n\t\t\t\t}\n\n\t\t\t\tLP_Request::register_ajax( $action, $callback );\n\t\t\t}\n\n\t\t\tadd_action( 'wp_ajax_learnpress_upload-user-avatar', array( __CLASS__, 'upload_user_avatar' ) );\n\t\t}\n\n\t\tpublic static function load_more_courses() {\n\t\t\t$type     = LP_Request::get( 'type' );\n\t\t\t$user_id  = LP_Request::get_int( 'user', 0 );\n\t\t\t$paged    = LP_Request::get_int( 'current_page', 1 );\n\t\t\t$template = LP_Request::get( 'template' );\n\n\t\t\t$user          = learn_press_get_user( $user_id );\n\t\t\t$template_args = array();\n\n\t\t\tif ( in_array( $type, array( 'featured', 'latest' ) ) ) {\n\t\t\t\t$query_args = array(\n\t\t\t\t\t'paginate' => true,\n\t\t\t\t\t'return'   => 'ids',\n\t\t\t\t\t'author'   => $user->get_id(),\n\t\t\t\t\t'paged'    => $paged,\n\t\t\t\t);\n\n\t\t\t\tif ( 'featured' === $type ) {\n\t\t\t\t\t$query_args['featured'] = 1;\n\t\t\t\t}\n\n\t\t\t\t$query         = new LP_Course_Query( $query_args );\n\t\t\t\t$template_args = (array) $query->get_courses();\n\t\t\t\t$template      = \"profile/dashboard/{$type}-courses\";\n\n\t\t\t} else {\n\t\t\t\t$profile       = LP_Profile::instance( $user_id );\n\t\t\t\t$filter_status = LP_Request::get_string( 'filter-status' );\n\t\t\t\t$query         = $profile->query_courses( 'purchased', array( 'status' => $filter_status ) );\n\t\t\t}\n\n\t\t\tlearn_press_get_template( $template, $template_args );\n\n\t\t\twp_die();\n\t\t}\n\n\t\tpublic static function external_link() {\n\t\t\t$nonce  = LP_Request::get( 'nonce' );\n\t\t\t$id     = LP_Request::get( 'id' );\n\t\t\t$course = learn_press_get_course( $id );\n\n\t\t\tif ( ! $course ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$link = $course->get_external_link();\n\n\t\t\tif ( ! wp_verify_nonce( $nonce, 'external-link-' . $link ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( apply_filters( 'learn-press/course-redirect-external-link', $id ) ) {\n\t\t\t\twp_redirect( $link );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\tpublic static function checkout() {\n\t\t\tLP()->checkout()->process_checkout_handler();\n\t\t}\n\n\t\tpublic static function request_become_a_teacher() {\n\t\t\tLP_Forms_Handler::process_become_teacher();\n\t\t}\n\n\t\tpublic static function recover_order() {\n\t\t\tif ( ! LP_Request::verify_nonce( 'recover-order' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$factory   = LP_Factory::get_order_factory();\n\t\t\t$user_id   = get_current_user_id();\n\t\t\t$order_key = LP_Request::get_string( 'order-key' );\n\t\t\t$order     = $factory->recover( $order_key, $user_id );\n\t\t\t$result    = array( 'result' => 'success' );\n\n\t\t\tif ( is_wp_error( $order ) ) {\n\t\t\t\t$result['message'] = $order->get_error_message();\n\t\t\t\t$result['result']  = 'error';\n\t\t\t} else {\n\t\t\t\t$result['message']  = sprintf(\n\t\t\t\t\t__( 'The order %s has been successfully recovered.', 'learnpress' ),\n\t\t\t\t\t$order_key\n\t\t\t\t);\n\t\t\t\t$result['redirect'] = $order->get_view_order_url();\n\t\t\t}\n\n\t\t\t$result = apply_filters( 'learn-press/order/recover-result', $result, $order_key, $user_id );\n\n\t\t\tlearn_press_maybe_send_json( $result );\n\n\t\t\tif ( ! empty( $result['message'] ) ) {\n\t\t\t\tlearn_press_add_message( $result['message'] );\n\t\t\t}\n\n\t\t\tif ( ! empty( $result['redirect'] ) ) {\n\t\t\t\twp_redirect( $result['redirect'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\tpublic static function checkout_user_email_exists() {\n\t\t\t$email    = LP_Request::get_email( 'email' );\n\t\t\t$response = array(\n\t\t\t\t'exists' => 0,\n\t\t\t);\n\n\t\t\tif ( email_exists( $email ) ) {\n\t\t\t\t$response['exists'] = $email;\n\t\t\t\t$output             = '<div class=\"lp-guest-checkout-output\">' . __(\n\t\t\t\t\t'Your email is already exists. Continue with this email?',\n\t\t\t\t\t'learnpress'\n\t\t\t\t) . '</div>';\n\t\t\t} else {\n\t\t\t\t$output = '<label class=\"lp-guest-checkout-output\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"checkout-email-option\" value=\"new-account\">\n\t\t\t\t' . __(\n\t\t\t\t\t'Create new account with this email? Account information will be sent to this email.',\n\t\t\t\t\t'learnpress'\n\t\t\t\t) . '\n\t\t\t\t</label>';\n\t\t\t}\n\n\t\t\t$response['output'] = apply_filters( 'learnpress/guest_checkout_email_exist_output', $output, $email );\n\n\t\t\tlearn_press_maybe_send_json( $response );\n\t\t}\n\n\t\tpublic static function upload_user_avatar() {\n\t\t\t$file       = $_FILES['lp-upload-avatar'];\n\t\t\t$upload_dir = learn_press_user_profile_picture_upload_dir();\n\n\t\t\tadd_filter( 'upload_dir', array( __CLASS__, '_user_avatar_upload_dir' ), 10000 );\n\n\t\t\t$result = wp_handle_upload(\n\t\t\t\t$file,\n\t\t\t\tarray(\n\t\t\t\t\t'test_form' => false,\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tremove_filter( 'upload_dir', array( __CLASS__, '_user_avatar_upload_dir' ), 10000 );\n\n\t\t\tif ( is_array( $result ) ) {\n\t\t\t\t$result['name'] = $upload_dir['subdir'] . '/' . basename( $result['file'] );\n\t\t\t\tunset( $result['file'] );\n\t\t\t} else {\n\t\t\t\t$result = array(\n\t\t\t\t\t'error' => __( 'Profile picture upload failed', 'learnpress' ),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlearn_press_send_json( $result );\n\t\t}\n\n\t\tpublic static function save_uploaded_user_avatar() {\n\t\t\t$avatar_data = wp_parse_args(\n\t\t\t\tLP_Request::get( 'lp-user-avatar-crop' ),\n\t\t\t\tarray(\n\t\t\t\t\t'name'   => '',\n\t\t\t\t\t'width'  => '',\n\t\t\t\t\t'height' => '',\n\t\t\t\t\t'points' => '',\n\t\t\t\t\t'nonce'  => '',\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$current_user_id = get_current_user_id();\n\n\t\t\tif ( ! wp_verify_nonce( $avatar_data['nonce'], 'save-uploaded-profile-' . $current_user_id ) ) {\n\t\t\t\tdie( 'ERROR VERIFY NONCE!' );\n\t\t\t}\n\n\t\t\t$url = learn_press_update_user_profile_avatar();\n\t\t\tif ( $url ) {\n\t\t\t\t$user = learn_press_get_current_user();\n\n\t\t\t\tlearn_press_send_json(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'success' => true,\n\t\t\t\t\t\t'avatar'  => sprintf( '<img src=\"%s\" />', $url ),\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t};\n\n\t\t\twp_die();\n\t\t}\n\n\t\tpublic static function _user_avatar_upload_dir( $dir ) {\n\t\t\t$dir = learn_press_user_profile_picture_upload_dir();\n\n\t\t\treturn $dir;\n\t\t}\n\n\t\t/**\n\t\t * Request finish course\n\t\t *\n\t\t * TODO: should move this function to api - tungnx\n\t\t */\n\t\tpublic static function finish_course() {\n\t\t\t$nonce     = LP_Request::get_string( 'finish-course-nonce' );\n\t\t\t$course_id = LP_Request::get_int( 'course-id' );\n\t\t\t$course    = learn_press_get_course( $course_id );\n\t\t\t$user      = learn_press_get_current_user();\n\n\t\t\t$nonce_action = sprintf( 'finish-course-%d-%d', $course_id, $user->get_id() );\n\n\t\t\tif ( ! $user->get_id() || ! $course || ! wp_verify_nonce( $nonce, $nonce_action ) ) {\n\t\t\t\twp_die( __( 'Access denied!', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t$finished    = $user->finish_course( $course_id );\n\t\t\t$lp_redirect = LP_Settings::get_option( 'course_finish_redirect' );\n\t\t\t$redirect    = ! empty( $lp_redirect ) ? $lp_redirect : get_the_permalink( $course_id );\n\n\t\t\t$response = array(\n\t\t\t\t'redirect' => apply_filters(\n\t\t\t\t\t'learn-press/finish-course-redirect',\n\t\t\t\t\t$redirect,\n\t\t\t\t\t$course_id\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif ( $finished ) {\n\t\t\t\tlearn_press_update_user_item_meta( $finished, 'finishing_type', 'click' );\n\t\t\t\tlearn_press_add_message( sprintf( __( 'You have finished this course \"%s\"', 'learnpress' ), $course->get_title() ) );\n\t\t\t\t$response['result'] = 'success';\n\t\t\t} else {\n\t\t\t\tlearn_press_add_message( __( 'Error! You cannot finish this course. Please contact your administrator for more information.', 'learnpress' ) );\n\t\t\t\t$response['result'] = 'error';\n\t\t\t}\n\n\t\t\tlearn_press_maybe_send_json( $response );\n\n\t\t\tif ( ! empty( $response['redirect'] ) ) {\n\t\t\t\twp_redirect( $response['redirect'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Complete lesson\n\t\t */\n\t\tpublic static function complete_lesson() {\n\t\t\t$nonce     = LP_Request::get_string( 'complete-lesson-nonce' );\n\t\t\t$item_id   = LP_Request::get_int( 'id' );\n\t\t\t$course_id = LP_Request::get_int( 'course_id' );\n\n\t\t\t$post     = get_post( $item_id );\n\t\t\t$user     = learn_press_get_current_user();\n\t\t\t$course   = learn_press_get_course( $course_id );\n\t\t\t$response = array(\n\t\t\t\t'result'   => 'success',\n\t\t\t\t'redirect' => $course->get_item_link( $item_id ),\n\t\t\t);\n\n\t\t\t$item         = $course->get_item( $item_id );\n\t\t\t$nonce_action = $item->get_nonce_action( 'complete', $course_id, $user->get_id() );\n\t\t\ttry {\n\t\t\t\t// security check\n\t\t\t\tif ( ! $post || ( $post && ! wp_verify_nonce( $nonce, $nonce_action ) ) ) {\n\t\t\t\t\tthrow new Exception( __( 'Error! Invalid lesson or failed security check.', 'learnpress' ), 8000 );\n\t\t\t\t}\n\n\t\t\t\t$result = $user->complete_lesson( $item_id );\n\n\t\t\t\tif ( ! is_wp_error( $result ) ) {\n\t\t\t\t\tif ( $course->get_next_item() ) {\n\t\t\t\t\t\t$next                 = $course->get_next_item();\n\t\t\t\t\t\t$response['redirect'] = $course->get_item_link( $next );\n\t\t\t\t\t}\n\n\t\t\t\t\tlearn_press_add_message( sprintf( __( 'Congrats! You have completed \"%s\".', 'learnpress' ), $item->get_title() ) );\n\t\t\t\t} else {\n\t\t\t\t\tlearn_press_add_message( $result->get_error_message(), 'error' );\n\t\t\t\t}\n\n\t\t\t\t$response = apply_filters( 'learn-press/user-completed-lesson-result', $response, $item_id, $course_id, $user->get_id() );\n\t\t\t} catch ( Exception $ex ) {\n\t\t\t\tlearn_press_add_message( $ex->getMessage(), 'error' );\n\t\t\t}\n\n\t\t\tif ( learn_press_message_count( 'error' ) ) {\n\t\t\t\t$response['result'] = 'error';\n\t\t\t}\n\n\t\t\tlearn_press_maybe_send_json( $response );\n\n\t\t\tif ( ! empty( $response['redirect'] ) ) {\n\t\t\t\t// wp_cache_flush();\n\t\t\t\twp_redirect( $response['redirect'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Retake course action\n\t\t *\n\t\t * @TODO move this function to API\n\t\t */\n\t\t/*\n\t\tpublic static function retake_course() {\n\t\t\t$security  = LP_Request::get_string( 'retake-course-nonce' );\n\t\t\t$course_id = LP_Request::get_int( 'retake-course' );\n\t\t\t$user      = learn_press_get_current_user();\n\t\t\t$course    = learn_press_get_course( $course_id );\n\t\t\t$response  = array(\n\t\t\t\t'result' => 'error',\n\t\t\t);\n\n\t\t\t$security_action = sprintf( 'retake-course-%d-%d', $course->get_id(), $user->get_id() );\n\t\t\t// security check\n\t\t\tif ( ! wp_verify_nonce( $security, $security_action ) ) {\n\t\t\t\tlearn_press_add_message( __( 'Error! Invalid course or failed security check.', 'learnpress' ),\n\t\t\t\t\t'error' );\n\t\t\t} else {\n\t\t\t\tif ( $user->can_retake_course( $course_id ) ) {\n\t\t\t\t\t$result = $user->retry_course( $course_id );\n\n\t\t\t\t\tif ( ! $result ) {\n\t\t\t\t\t\tlearn_press_add_message( __( 'Error!', 'learnpress' ), 'error' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlearn_press_add_message( sprintf( __( 'You have retaken the course \"%s\"', 'learnpress' ),\n\t\t\t\t\t\t\t$course->get_title() ) );\n\t\t\t\t\t\t$response['result'] = 'success';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlearn_press_add_message( __( 'Error! You can not retake the course', 'learnpress' ), 'error' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( learn_press_message_count( 'error' ) == 0 ) {\n\t\t\t\t$item = $course->get_item_at( 0 );\n\n\t\t\t\tif ( $item ) {\n\t\t\t\t\t$redirect = $course->get_item_link( $item );\n\t\t\t\t} else {\n\t\t\t\t\t$redirect = $course->get_permalink();\n\t\t\t\t}\n\t\t\t\t$response['redirect'] = apply_filters( 'learn-press/user-retake-course-redirect', $redirect );\n\t\t\t\t$response             = apply_filters( 'learn-press/user-retaken-course-result', $response, $course_id,\n\t\t\t\t\t$user->get_id() );\n\t\t\t} else {\n\t\t\t\t$response['redirect'] = $course->get_permalink();\n\t\t\t\t$response             = apply_filters( 'learn-press/user-retake-course-failed-result', $response,\n\t\t\t\t\t$course_id, $user->get_id() );\n\t\t\t}\n\n\t\t\tlearn_press_maybe_send_json( $response );\n\n\t\t\tif ( ! empty( $response['redirect'] ) ) {\n\t\t\t\twp_redirect( $response['redirect'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}*/\n\t}\n}\n\nLP_AJAX::init();\n", "<?php\n/**\n * Common functions to process actions about user\n *\n * @author  ThimPress\n * @package LearnPress/Functions/User\n * @version 1.0\n */\n\nfunction learn_press_get_user_profile_tabs() {\n\treturn LP_Profile::instance()->get_tabs();\n}\n\n/**\n * Delete user data by user ID\n *\n * @param int $user_id\n * @param int $course_id\n */\nfunction learn_press_delete_user_data( $user_id, $course_id = 0 ) {\n\tglobal $wpdb;\n\t// TODO: Should be deleted user's order and order data???\n\n\t$query_args = array( $user_id );\n\n\tif ( $course_id ) {\n\t\t$query_args[] = $course_id;\n\t}\n\n\t$query = $wpdb->prepare(\n\t\t\"\n        SELECT user_item_id\n        FROM {$wpdb->prefix}learnpress_user_items\n        WHERE user_id = %d\n        \" . ( $course_id ? ' AND item_id = %d' : '' ) . '\n    ',\n\t\t$query_args\n\t);\n\n\t// delete all courses user has enrolled\n\t$query = $wpdb->prepare(\n\t\t\"\n        DELETE FROM {$wpdb->prefix}learnpress_user_items\n        WHERE user_id = %d\n        \" . ( $course_id ? ' AND item_id = %d' : '' ) . '\n    ',\n\t\t$query_args\n\t);\n\n\t@$wpdb->query( $query );\n}\n\n/**\n * Get user_item_id field in table learnpress_user_items\n * with the user_id, item_id. If $course_id is not passed\n * then item_id is ID of a course. Otherwise, item_id is\n * ID of an item (like quiz/lesson).\n *\n * @param int $user_id\n * @param int $item_id\n * @param int $course_id\n *\n * @return bool\n * @editor tungnx\n * @reason this function only get cache, not handle get user_item_id\n */\nfunction learn_press_get_user_item_id( $user_id, $item_id, $course_id = 0 /* added 3.0.0 */ ) {\n\treturn false;\n}\n\n/**\n * Get current user ID\n *\n * @return int\n */\nfunction learn_press_get_current_user_id() {\n\t$user = learn_press_get_current_user();\n\n\treturn $user->get_id();\n}\n\n/**\n * Get the user by $user_id passed. If $user_id is NULL, get current user.\n * If current user is not logged in, return a GUEST user\n *\n * @param bool $create_temp - Optional. Create temp user if user is not logged in.\n *\n * @return bool|LP_User|LP_User_Guest\n * @editor tungnx\n * @modify 4.1.4\n * @version 1.0.1\n */\nfunction learn_press_get_current_user( $create_temp = true ) {\n\t$user_id = get_current_user_id();\n\n\tif ( $user_id ) {\n\t\treturn learn_press_get_user( $user_id );\n\t}\n\n\t// Return LP_User_Guest\n\treturn learn_press_get_user( 0 );\n}\n\nif ( ! function_exists( 'learn_press_get_user' ) ) {\n\t/**\n\t * Get user by ID. Return false if the user does not exists.\n\t *\n\t * @param int  $user_id\n\t * @param bool $current\n\t *\n\t * @return LP_User|mixed\n\t * Todo: check this function - tungnx\n\t */\n\tfunction learn_press_get_user( $user_id, $current = false, $force_new = false ) {\n\t\t$is_guest = false;\n\t\tif ( $user_id != LP()->session->guest_user_id ) {\n\t\t\tif ( $current && ! get_user_by( 'id', $user_id ) ) {\n\t\t\t\t$user_id = get_current_user_id();\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $user_id && isset( LP()->session ) ) {\n\t\t\tif ( ! LP()->session->guest_user_id ) {\n\t\t\t\tLP()->session->set_customer_session_cookie( 1 );\n\t\t\t\tLP()->session->guest_user_id = time();\n\t\t\t}\n\n\t\t\t$user_id  = LP()->session->guest_user_id;\n\t\t\t$is_guest = true;\n\t\t}\n\n\t\tif ( ! $user_id ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$user_id = '' . $user_id;\n\n\t\tif ( $force_new || ! array_key_exists( $user_id, LP_Global::$users ) ) {\n\t\t\t/**\n\t\t\t * LP Hook.\n\t\t\t *\n\t\t\t * Filter the default class name to get LP user.\n\t\t\t *\n\t\t\t * @since 3.3.0\n\t\t\t */\n\t\t\t$userClass = apply_filters( 'learn-press/user-class', $is_guest ? 'LP_User_Guest' : 'LP_User', $is_guest );\n\n\t\t\tLP_Global::$users[ $user_id ] = new $userClass( $user_id );\n\n\t\t\tdo_action( 'learn-press/get-user', LP_Global::$users[ $user_id ], $user_id );\n\t\t}\n\n\t\treturn LP_Global::$users[ $user_id ];\n\t}\n}\n\n/**\n * Add more 2 user roles teacher and student\n */\nfunction learn_press_add_user_roles() {\n\n\t$settings = LP()->settings;\n\n\t/* translators: user role */\n\t_x( 'LP Instructor', 'User role' );\n\n\tadd_role(\n\t\tLP_TEACHER_ROLE,\n\t\t'LP Instructor',\n\t\tarray()\n\t);\n\n\t$course_cap = LP_COURSE_CPT . 's';\n\t$lesson_cap = LP_LESSON_CPT . 's';\n\t$order_cap  = LP_ORDER_CPT . 's';\n\n\t$teacher = get_role( LP_TEACHER_ROLE );\n\tif ( $teacher ) {\n\t\t$teacher->add_cap( 'read_private_' . $course_cap );\n\t\t$teacher->add_cap( 'delete_published_' . $course_cap );\n\t\t$teacher->add_cap( 'edit_published_' . $course_cap );\n\t\t$teacher->add_cap( 'edit_' . $course_cap );\n\t\t$teacher->add_cap( 'delete_' . $course_cap );\n\t\t$teacher->add_cap( 'unfiltered_html' );\n\n\t\t$settings->get( 'required_review' );\n\n\t\tif ( $settings->get( 'required_review' ) == 'yes' ) {\n\t\t\t$teacher->remove_cap( 'publish_' . $course_cap );\n\t\t} else {\n\t\t\t$teacher->add_cap( 'publish_' . $course_cap );\n\t\t}\n\n\t\t$teacher->add_cap( 'read_private_' . $lesson_cap );\n\t\t$teacher->add_cap( 'delete_published_' . $lesson_cap );\n\t\t$teacher->add_cap( 'edit_published_' . $lesson_cap );\n\t\t$teacher->add_cap( 'edit_' . $lesson_cap );\n\t\t$teacher->add_cap( 'delete_' . $lesson_cap );\n\t\t$teacher->add_cap( 'publish_' . $lesson_cap );\n\t\t$teacher->add_cap( 'upload_files' );\n\t\t$teacher->add_cap( 'read' );\n\t\t$teacher->add_cap( 'edit_posts' );\n\t}\n\n\t// administrator\n\t$admin = get_role( 'administrator' );\n\tif ( $admin ) {\n\t\t$admin->add_cap( 'read_private_' . $course_cap );\n\t\t$admin->add_cap( 'delete_' . $course_cap );\n\t\t$admin->add_cap( 'delete_published_' . $course_cap );\n\t\t$admin->add_cap( 'edit_' . $course_cap );\n\t\t$admin->add_cap( 'edit_published_' . $course_cap );\n\t\t$admin->add_cap( 'publish_' . $course_cap );\n\t\t$admin->add_cap( 'delete_private_' . $course_cap );\n\t\t$admin->add_cap( 'edit_private_' . $course_cap );\n\t\t$admin->add_cap( 'delete_others_' . $course_cap );\n\t\t$admin->add_cap( 'edit_others_' . $course_cap );\n\n\t\t$admin->add_cap( 'read_private_' . $lesson_cap );\n\t\t$admin->add_cap( 'delete_' . $lesson_cap );\n\t\t$admin->add_cap( 'delete_published_' . $lesson_cap );\n\t\t$admin->add_cap( 'edit_' . $lesson_cap );\n\t\t$admin->add_cap( 'edit_published_' . $lesson_cap );\n\t\t$admin->add_cap( 'publish_' . $lesson_cap );\n\t\t$admin->add_cap( 'delete_private_' . $lesson_cap );\n\t\t$admin->add_cap( 'edit_private_' . $lesson_cap );\n\t\t$admin->add_cap( 'delete_others_' . $lesson_cap );\n\t\t$admin->add_cap( 'edit_others_' . $lesson_cap );\n\n\t\t$admin->add_cap( 'delete_' . $order_cap );\n\t\t$admin->add_cap( 'delete_published_' . $order_cap );\n\t\t$admin->add_cap( 'edit_' . $order_cap );\n\t\t$admin->add_cap( 'edit_published_' . $order_cap );\n\t\t$admin->add_cap( 'publish_' . $order_cap );\n\t\t$admin->add_cap( 'delete_private_' . $order_cap );\n\t\t$admin->add_cap( 'edit_private_' . $order_cap );\n\t\t$admin->add_cap( 'delete_others_' . $order_cap );\n\t\t$admin->add_cap( 'edit_others_' . $order_cap );\n\t}\n}\n\nadd_action( 'init', 'learn_press_add_user_roles' );\n\n/**\n * @param null  $user_id\n * @param array $args\n *\n * @return mixed\n */\nfunction learn_press_get_user_questions( $user_id = null, $args = array() ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\treturn learn_press_get_user( $user_id )->get_questions( $args );\n}\n\n/**\n * Get the type of current user\n *\n * @param null $check_type\n *\n * @return bool|string\n */\nfunction learn_press_current_user_is( $check_type = null ) {\n\tglobal $current_user;\n\t$user_roles = $current_user->roles;\n\t$user_type  = '';\n\n\tif ( in_array( 'lpr_teacher', $user_roles ) ) {\n\t\t$user_type = 'instructor';\n\t} elseif ( in_array( 'lp_teacher', $user_roles ) ) {\n\t\t$user_type = 'instructor';\n\t} elseif ( in_array( 'administrator', $user_roles ) ) {\n\t\t$user_type = 'administrator';\n\t}\n\n\treturn $check_type ? $check_type == $user_type : $user_type;\n}\n\nfunction learn_press_user_has_roles( $roles, $user_id = null ) {\n\t$has_role = false;\n\tif ( ! $user_id ) {\n\t\t$user = wp_get_current_user();\n\t} else {\n\t\t$user = get_user_by( 'id', $user_id );\n\t}\n\t$available_roles = (array) $user->roles;\n\tif ( is_array( $roles ) ) {\n\t\tforeach ( $roles as $role ) {\n\t\t\tif ( in_array( $role, $available_roles ) ) {\n\t\t\t\t$has_role = true;\n\t\t\t\tbreak; // only need one of roles is in available\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( in_array( $roles, $available_roles ) ) {\n\t\t\t$has_role = true;\n\t\t}\n\t}\n\n\treturn $has_role;\n}\n\n/**\n * Add user profile link into admin bar\n */\nfunction learn_press_edit_admin_bar() {\n\tglobal $wp_admin_bar;\n\n\t$profile = learn_press_get_page_id( 'profile' );\n\n\tif ( $profile && learn_press_get_post_type( $profile ) == 'page' && get_post_status( $profile ) != 'trash' ) {\n\t\t$user_id = learn_press_get_current_user_id();\n\n\t\t$wp_admin_bar->add_menu(\n\t\t\tarray(\n\t\t\t\t'id'     => 'course_profile',\n\t\t\t\t'parent' => 'user-actions',\n\t\t\t\t'title'  => get_the_title( $profile ),\n\t\t\t\t'href'   => learn_press_user_profile_link( $user_id, false ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$current_user = wp_get_current_user();\n\n\tif ( in_array( LP_TEACHER_ROLE, $current_user->roles ) || in_array( 'administrator', $current_user->roles ) ) {\n\t\treturn;\n\t}\n}\n\nadd_action( 'admin_bar_menu', 'learn_press_edit_admin_bar' );\n\nfunction learn_press_current_user_can_view_profile_section( $section, $user ) {\n\t$current_user = wp_get_current_user();\n\t$view         = true;\n\tif ( $user->get_data( 'user_login' ) != $current_user->user_login && $section == LP()->settings->get(\n\t\t'profile_endpoints.profile-orders',\n\t\t'profile-orders'\n\t) ) {\n\t\t$view = false;\n\t}\n\n\treturn apply_filters( 'learn_press_current_user_can_view_profile_section', $view, $section, $user );\n}\n\nfunction learn_press_profile_tab_courses_content( $current, $tab, $user ) {\n\tlearn_press_get_template(\n\t\t'profile/tabs/courses.php',\n\t\tarray(\n\t\t\t'user'    => $user,\n\t\t\t'current' => $current,\n\t\t\t'tab'     => $tab,\n\t\t)\n\t);\n}\n\nfunction learn_press_profile_tab_quizzes_content( $current, $tab, $user ) {\n\tlearn_press_get_template(\n\t\t'profile/tabs/quizzes.php',\n\t\tarray(\n\t\t\t'user'    => $user,\n\t\t\t'current' => $current,\n\t\t\t'tab'     => $tab,\n\t\t)\n\t);\n}\n\nfunction learn_press_profile_tab_orders_content( $current, $tab, $user ) {\n\tlearn_press_get_template(\n\t\t'profile/tabs/orders.php',\n\t\tarray(\n\t\t\t'user'    => $user,\n\t\t\t'current' => $current,\n\t\t\t'tab'     => $tab,\n\t\t)\n\t);\n}\n\n/**\n * Get queried user in profile link\n *\n * @return false|WP_User\n * @since 3.0.0\n */\nfunction learn_press_get_profile_user() {\n\treturn LP_Profile::get_queried_user();\n}\n\n\n/**\n * Add instructor registration button to register page and admin bar\n */\nfunction learn_press_user_become_teacher_registration_form() {\n\tif ( LP()->settings->get( 'instructor_registration' ) != 'yes' ) {\n\t\treturn;\n\t}\n\t?>\n\t<p>\n\t\t<label for=\"become_teacher\">\n\t\t\t<input type=\"checkbox\" name=\"become_teacher\" id=\"become_teacher\">\n\t\t\t<?php esc_html_e( 'Want to become an instructor?', 'learnpress' ); ?>\n\t\t</label>\n\t</p>\n\t<?php\n}\n\nadd_action( 'register_form', 'learn_press_user_become_teacher_registration_form' );\n\n/**\n * Update data into table learnpress_user_items.\n *\n * @param array $fields - Fields and values to be updated.\n *                                              Format: array(\n *                                              field_name_1 => value 1,\n *                                              field_name_2 => value 2,\n *                                              ....\n *                                              field_name_n => value n\n *                                              )\n * @param mixed $where - Optional. Fields with values for conditional update with the same format of $fields.\n * @param bool  $update_cache - Optional. Should be update to cache or not (since 3.0.0).\n * @param bool  $update_extra_fields_as_meta - Optional. Update extra fields as item meta (since 3.1.0).\n *\n * @return mixed\n */\nfunction learn_press_update_user_item_field( $fields, $where = false, $update_cache = true, $update_extra_fields_as_meta = false ) {\n\tglobal $wpdb;\n\n\t// Table fields\n\t$table_fields = array(\n\t\t'user_id'      => '%d',\n\t\t'item_id'      => '%d',\n\t\t'ref_id'       => '%d',\n\t\t'start_time'   => '%s',\n\t\t'end_time'     => '%s',\n\t\t'access_level' => '%d',\n\t\t'graduation'   => '%s',\n\t\t'item_type'    => '%s',\n\t\t'status'       => '%s',\n\t\t'ref_type'     => '%s',\n\t\t'parent_id'    => '%d',\n\t);\n\n\t/**\n\t * Validate item status\n\t */\n\tif ( ! empty( $fields['item_id'] ) && ! empty( $fields['status'] ) ) {\n\t\t$item_type = learn_press_get_post_type( $fields['item_id'] );\n\n\t\tif ( LP_COURSE_CPT === $item_type ) {\n\t\t\tif ( 'completed' === $fields['status'] ) {\n\t\t\t\t$fields['status'] = 'finished';\n\t\t\t}\n\t\t} else {\n\t\t\tif ( 'finished' === $fields['status'] ) {\n\t\t\t\t$fields['status'] = 'completed';\n\t\t\t}\n\t\t}\n\t}\n\n\t$data             = array();\n\t$data_format      = array();\n\t$date_time_fields = array(\n\t\t'start_time',\n\t\t'end_time',\n\t);\n\n\tforeach ( $fields as $field => $value ) {\n\t\tif ( ! empty( $table_fields[ $field ] ) ) {\n\t\t\t$data[ $field ] = $value;\n\n\t\t\t// Do not format the date-time field if it's value is NULL\n\t\t\tif ( in_array( $field, $date_time_fields ) && ! $value ) {\n\t\t\t\t$data[ $field ] = null;\n\t\t\t\t$data_format[]  = '';\n\t\t\t} else {\n\t\t\t\t$data_format[] = $table_fields[ $field ];\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! empty( $fields['user_item_id'] ) ) {\n\t\t$where = wp_parse_args(\n\t\t\t$where,\n\t\t\tarray( 'user_item_id' => $fields['user_item_id'] )\n\t\t);\n\t}\n\n\tif ( $where && empty( $where['user_id'] ) ) {\n\t\t$where['user_id'] = ! empty( $fields['user_id'] ) ? $fields['user_id'] : learn_press_get_current_user_id();\n\t}\n\n\t$where_format = array();\n\n\t// Build where and where format\n\tif ( $where ) {\n\t\tforeach ( $where as $field => $value ) {\n\t\t\tif ( ! empty( $table_fields[ $field ] ) ) {\n\t\t\t\t$where_format[] = $table_fields[ $field ];\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! $data ) {\n\t\treturn false;\n\t}\n\n\t$inserted = false;\n\t$updated  = false;\n\n\t// Ensure all fields are instance of LP_Datetime have to\n\t// convert to string of datetime.\n\tforeach ( $data as $k => $v ) {\n\t\tif ( $v instanceof LP_Datetime ) {\n\t\t\t$data[ $k ] = $v->toSql();\n\t\t}\n\t}\n\n\t// If $where is not empty consider we are updating\n\tif ( $where ) {\n\t\t$updated = $wpdb->update(\n\t\t\t$wpdb->learnpress_user_items,\n\t\t\t$data,\n\t\t\t$where,\n\t\t\t$data_format,\n\t\t\t$where_format\n\t\t);\n\t} else {\n\n\t\t// Otherwise, insert a new one\n\t\tif ( $wpdb->insert(\n\t\t\t$wpdb->learnpress_user_items,\n\t\t\t$data,\n\t\t\t$data_format\n\t\t)\n\t\t) {\n\t\t\t$inserted = $wpdb->insert_id;\n\t\t}\n\t}\n\n\tif ( $updated && ! empty( $where['user_item_id'] ) ) {\n\t\t$inserted = $where['user_item_id'];\n\t}\n\n\t/**\n\t * @var object|bool $updated_item\n\t */\n\t$updated_item = false;\n\n\t// Get the item we just have updated or inserted.\n\tif ( $inserted ) {\n\t\t$updated_item = learn_press_get_user_item( $inserted );\n\t} elseif ( $updated ) {\n\t\t$updated_item = learn_press_get_user_item( $where );\n\t}\n\n\t/**\n\t * If there is some fields does not contain in the main table\n\t * then consider update them as meta data.\n\t */\n\tif ( $updated_item && $update_extra_fields_as_meta ) {\n\t\t$extra_fields = array_diff_key( $fields, $table_fields );\n\t\tif ( $extra_fields ) {\n\t\t\tforeach ( $extra_fields as $meta_key => $meta_value ) {\n\t\t\t\tif ( $meta_value == 'user_item_id' ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( $meta_value === false ) {\n\t\t\t\t\tlearn_press_delete_user_item_meta( $updated_item->user_item_id, $meta_key );\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( empty( $meta_value ) ) {\n\t\t\t\t\t\t$meta_value = '';\n\t\t\t\t\t}\n\t\t\t\t\tlearn_press_update_user_item_meta( $updated_item->user_item_id, $meta_key, $meta_value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdo_action( 'learn-press/updated-user-item-meta', $updated_item );\n\n\treturn $updated_item;\n}\n\n/**\n * Get user item row(s) from user items table by multiple WHERE conditional\n *\n * @param array|int $where\n * @param bool      $single\n *\n * @return array\n */\nfunction learn_press_get_user_item( $where, $single = true ) {\n\tglobal $wpdb;\n\n\t// Table fields\n\t$table_fields = array(\n\t\t'user_item_id' => '%d',\n\t\t'user_id'      => '%d',\n\t\t'item_id'      => '%d',\n\t\t'ref_id'       => '%d',\n\t\t'start_time'   => '%s',\n\t\t'end_time'     => '%s',\n\t\t'item_type'    => '%s',\n\t\t'status'       => '%s',\n\t\t'ref_type'     => '%s',\n\t\t'parent_id'    => '%d',\n\t);\n\n\t// If $where is a number consider we are searching the record with unique user_item_id\n\tif ( is_numeric( $where ) ) {\n\t\t$where = array( 'user_item_id' => $where );\n\t}\n\n\t$where_str = array();\n\tforeach ( $where as $field => $value ) {\n\t\tif ( ! empty( $table_fields[ $field ] ) ) {\n\t\t\t$where_str[] = \"{$field} = \" . $table_fields[ $field ];\n\t\t}\n\t}\n\t$item = false;\n\n\tif ( $where_str ) {\n\t\t$query = $wpdb->prepare(\n\t\t\t\"\n\t\t\tSELECT *\n\t\t\tFROM {$wpdb->prefix}learnpress_user_items\n\t\t\tWHERE \" . join( ' AND ', $where_str ) . '\n\t\t\tORDER BY user_item_id DESC\n\t\t',\n\t\t\t$where\n\t\t);\n\t\tif ( $single || ! empty( $where['user_item_id'] ) ) {\n\t\t\t$item = $wpdb->get_row( $query );\n\t\t} else {\n\t\t\t$item = $wpdb->get_results( $query );\n\t\t}\n\t}\n\n\treturn $item;\n}\n\n/**\n * Get user item meta from user_itemmeta table\n *\n * @param int    $user_item_id .\n * @param string $meta_key .\n * @param bool   $single .\n *\n * @return mixed\n */\nfunction learn_press_get_user_item_meta( $user_item_id = 0, $meta_key = '', $single = true ) {\n\t$meta = false;\n\tif ( metadata_exists( 'learnpress_user_item', $user_item_id, $meta_key ) ) {\n\t\t$meta = get_metadata( 'learnpress_user_item', $user_item_id, $meta_key, $single );\n\t}\n\n\treturn $meta;\n}\n\n/**\n * Add user item meta into table user_itemmeta\n *\n * @param int    $user_item_id\n * @param string $meta_key\n * @param mixed  $meta_value\n * @param string $prev_value\n *\n * @return false|int\n */\nfunction learn_press_add_user_item_meta( $user_item_id, $meta_key, $meta_value, $prev_value = '' ) {\n\treturn add_metadata( 'learnpress_user_item', $user_item_id, $meta_key, $meta_value, $prev_value );\n}\n\n/**\n * Update user item meta to table user_itemmeta\n *\n * @param int    $user_item_id\n * @param string $meta_key\n * @param mixed  $meta_value\n * @param string $prev_value\n *\n * @return bool|int\n */\nfunction learn_press_update_user_item_meta( $user_item_id, $meta_key, $meta_value, $prev_value = '' ) {\n\treturn update_metadata( 'learnpress_user_item', $user_item_id, $meta_key, $meta_value, $prev_value );\n}\n\n\n/**\n * Update user item meta to table user_itemmeta\n *\n * @param int    $object_id\n * @param string $meta_key\n * @param mixed  $meta_value\n * @param bool   $delete_all\n *\n * @return bool|int\n */\nfunction learn_press_delete_user_item_meta( $object_id, $meta_key, $meta_value = '', $delete_all = false ) {\n\treturn delete_metadata( 'learnpress_user_item', $object_id, $meta_key, $meta_value, $delete_all );\n}\n\n/**\n * Exclude the temp users from query.\n *\n * @param WP_User_Query $q\n */\nfunction learn_press_filter_temp_users( $q ) {\n\t// if ( $temp_users = learn_press_get_temp_users() ) {\n\t// $exclude = (array) $q->get( 'exclude' );\n\t// $exclude = array_merge( $exclude, $temp_users );\n\t// $q->set( 'exclude', $exclude );\n\t// }\n}\n\n// add_action( 'pre_get_users', 'learn_press_filter_temp_users' );\n\n/**\n * Get temp users.\n *\n * @return array\n */\nfunction learn_press_get_temp_users() {\n\treturn false;\n\tif ( false === ( $temp_users = LP_Object_Cache::get( 'learn-press/temp-users' ) ) ) {\n\t\tglobal $wpdb;\n\t\t$query = $wpdb->prepare(\n\t\t\t\"\n\t\t\tSELECT ID\n\t\t\tFROM {$wpdb->users} u\n\t\t\tINNER JOIN {$wpdb->usermeta} um ON u.ID = um.user_id AND um.meta_key = %s AND um.meta_value = %s\n\t\t\tLEFT JOIN {$wpdb->usermeta} um2 ON u.ID = um2.user_id AND um2.meta_key = %s\n\t\t\",\n\t\t\t'_lp_temp_user',\n\t\t\t'yes',\n\t\t\t'_lp_expiration'\n\t\t);\n\n\t\t$temp_users = $wpdb->get_col( $query );\n\n\t\tLP_Object_Cache::set( 'learn-press/temp-users', $temp_users );\n\t}\n\n\treturn $temp_users;\n}\n\n/**\n * Update field created_time after added user item meta\n *\n * @use updated_{meta_type}_meta hook\n *\n * @param $meta_id\n * @param $object_id\n * @param $meta_key\n * @param $_meta_value\n */\nfunction _learn_press_update_created_time_user_item_meta( $meta_id, $object_id, $meta_key, $_meta_value ) {\n\tglobal $wpdb;\n\t$wpdb->update(\n\t\t$wpdb->learnpress_user_itemmeta,\n\t\tarray( 'create_time' => current_time( 'mysql' ) ),\n\t\tarray( 'meta_id' => $meta_id ),\n\t\tarray( '%s' ),\n\t\tarray( '%d' )\n\t);\n}\n\n// add_action( 'added_learnpress_user_item_meta', '_learn_press_update_created_time_user_item_meta', 10, 4 );\n\n/**\n * Update field updated_time after updated user item meta\n *\n * @use updated_{meta_type}_meta hook\n *\n * @param $meta_id\n * @param $object_id\n * @param $meta_key\n * @param $_meta_value\n */\nfunction _learn_press_update_updated_time_user_item_meta( $meta_id, $object_id, $meta_key, $_meta_value ) {\n\tglobal $wpdb;\n\t$wpdb->update(\n\t\t$wpdb->learnpress_user_itemmeta,\n\t\tarray( 'update_time' => current_time( 'mysql' ) ),\n\t\tarray( 'meta_id' => $meta_id ),\n\t\tarray( '%s' ),\n\t\tarray( '%d' )\n\t);\n}\n\n// add_action( 'updated_learnpress_user_item_meta', '_learn_press_update_updated_time_user_item_meta', 10, 4 );\n\n/**\n * @param     $status\n * @param int    $quiz_id\n * @param int    $user_id\n * @param int    $course_id\n *\n * @return bool|mixed\n */\nfunction learn_press_user_has_quiz_status( $status, $quiz_id = 0, $user_id = 0, $course_id = 0 ) {\n\t$user = learn_press_get_user( $user_id );\n\n\treturn $user->has_quiz_status( $status, $quiz_id, $course_id );\n}\n\nif ( ! function_exists( 'learn_press_pre_get_avatar_callback' ) ) {\n\t/**\n\t * Filter the avatar\n\t *\n\t * @param string $avatar\n\t * @param string $id_or_email\n\t * @param array  $size\n\t *\n\t * @return string\n\t */\n\tfunction learn_press_pre_get_avatar_callback( $avatar, $id_or_email = '', $size = array() ) {\n\n\t\t$profile = LP_Profile::instance();\n\n\t\tif ( ! $profile->is_enable_avatar() ) {\n\t\t\treturn $avatar;\n\t\t}\n\n\t\tif ( ( isset( $size['gravatar'] ) && $size['gravatar'] ) || ( $size['default'] && $size['force_default'] ) ) {\n\t\t\treturn $avatar;\n\t\t}\n\n\t\t$user_id = 0;\n\n\t\t/**\n\t\t * Get the ID of user from $id_or_email\n\t\t */\n\t\tif ( ! is_numeric( $id_or_email ) && is_string( $id_or_email ) ) {\n\t\t\tif ( $user = get_user_by( 'email', $id_or_email ) ) {\n\t\t\t\t$user_id = $user->ID;\n\t\t\t}\n\t\t} elseif ( is_numeric( $id_or_email ) ) {\n\t\t\t$user_id = $id_or_email;\n\t\t} elseif ( is_object( $id_or_email ) && isset( $id_or_email->user_id ) && $id_or_email->user_id ) {\n\t\t\t$user_id = $id_or_email->user_id;\n\t\t} elseif ( is_object( $id_or_email ) && $id_or_email instanceof WP_Comment ) {\n\t\t\tif ( $user = get_user_by( 'email', $id_or_email->comment_author_email ) ) {\n\t\t\t\t$user_id = $user->ID;\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $user_id ) {\n\t\t\treturn $avatar;\n\t\t}\n\n\t\t$user = LP_User_Factory::get_user( $user_id );\n\n\t\t$profile_picture_src = $user->get_upload_profile_src();\n\t\tif ( $profile_picture_src ) {\n\t\t\t$setting_size = learn_press_get_avatar_thumb_size();\n\t\t\t$img_size     = '';\n\n\t\t\t// Get avatar size\n\t\t\tif ( ! is_array( $size ) ) {\n\t\t\t\tif ( $size === 'thumbnail' ) {\n\t\t\t\t\t$img_size = '';\n\t\t\t\t\t$height   = $setting_size['height'];\n\t\t\t\t\t$width    = $setting_size['width'];\n\t\t\t\t} else {\n\t\t\t\t\t$height = 250;\n\t\t\t\t\t$width  = 250;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$img_size = $size['size'];\n\t\t\t\t$height   = $size['height'];\n\t\t\t\t$width    = $size['width'];\n\t\t\t}\n\n\t\t\t$avatar = '<img alt=\"' . esc_attr( $user->get_data( 'display_name' ) ) . '\" src=\"' . esc_url( $profile_picture_src ) . '\" class=\"avatar avatar-' . $img_size . ' photo\" height=\"' . $height . '\" width=\"' . $width . '\" />';\n\t\t}\n\n\t\treturn $avatar;\n\t}\n}\nadd_filter( 'pre_get_avatar', 'learn_press_pre_get_avatar_callback', 1, 5 );\n\n\nfunction learn_press_user_profile_picture_upload_dir( $width_user = true ) {\n\tstatic $upload_dir;\n\tif ( ! $upload_dir ) {\n\t\t$upload_dir = wp_upload_dir();\n\t\t$subdir     = apply_filters( 'learn_press_user_profile_folder', 'learn-press-profile', $width_user );\n\t\tif ( $width_user ) {\n\t\t\t$subdir .= '/' . get_current_user_id();\n\t\t}\n\t\t$subdir = '/' . $subdir;\n\n\t\tif ( ! empty( $upload_dir['subdir'] ) ) {\n\t\t\t$u_subdir = str_replace( '\\\\', '/', $upload_dir['subdir'] );\n\t\t\t$u_path   = str_replace( '\\\\', '/', $upload_dir['path'] );\n\n\t\t\t$upload_dir['path'] = str_replace( $u_subdir, $subdir, $u_path );\n\t\t\t$upload_dir['url']  = str_replace( $u_subdir, $subdir, $upload_dir['url'] );\n\t\t} else {\n\t\t\t$upload_dir['path'] = $upload_dir['path'] . $subdir;\n\t\t\t$upload_dir['url']  = $upload_dir['url'] . $subdir;\n\t\t}\n\n\t\t$upload_dir['subdir'] = $subdir;\n\n\t\t// Point path/url to main site if we are in multisite\n\t\tif ( is_multisite() && ! ( is_main_network() && is_main_site() && defined( 'MULTISITE' ) ) ) {\n\t\t\tforeach ( array( 'path', 'url', 'basedir', 'baseurl' ) as $v ) {\n\t\t\t\t$upload_dir[ $v ] = str_replace( '/sites/' . get_current_blog_id(), '', $upload_dir[ $v ] );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $upload_dir;\n}\n\nadd_action( 'learn_press_before_purchase_course_handler', '_learn_press_before_purchase_course_handler', 10, 2 );\nfunction _learn_press_before_purchase_course_handler( $course_id, $cart ) {\n\t// Redirect to login page if user is not logged in\n\tif ( ! is_user_logged_in() ) {\n\t\t$return_url = add_query_arg( $_POST, get_the_permalink( $course_id ) );\n\t\t$return_url = apply_filters( 'learn_press_purchase_course_login_redirect_return_url', $return_url );\n\t\t$redirect   = apply_filters(\n\t\t\t'learn_press_purchase_course_login_redirect',\n\t\t\tlearn_press_get_login_url( $return_url )\n\t\t);\n\t\tif ( $redirect !== false ) {\n\t\t\tlearn_press_add_message( __( 'Please login to enroll this course', 'learnpress' ) );\n\n\t\t\tif ( learn_press_is_ajax() ) {\n\t\t\t\tlearn_press_send_json(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'redirect' => $redirect,\n\t\t\t\t\t\t'result'   => 'success',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\twp_redirect( $redirect );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$user     = learn_press_get_current_user();\n\t\t$redirect = false;\n\t\tif ( $user->has_finished_course( $course_id ) ) {\n\t\t\tlearn_press_add_message( __( 'You have already finished course', 'learnpress' ) );\n\t\t\t$redirect = true;\n\t\t} elseif ( $user->has_purchased_course( $course_id ) ) {\n\t\t\tlearn_press_add_message( __( 'You have already enrolled in this course', 'learnpress' ) );\n\t\t\t$redirect = true;\n\t\t}\n\t\tif ( $redirect ) {\n\t\t\twp_redirect( get_the_permalink( $course_id ) );\n\t\t\texit();\n\t\t}\n\t}\n}\n\nfunction learn_press_user_is( $role, $user_id = 0 ) {\n\tif ( ! $user_id ) {\n\t\t$user = learn_press_get_current_user();\n\t} else {\n\t\t$user = learn_press_get_user( $user_id );\n\t}\n\tif ( $role == 'admin' ) {\n\t\treturn $user->is_admin();\n\t}\n\tif ( $role == 'instructor' ) {\n\t\treturn $user->is_instructor();\n\t}\n\n\treturn $role;\n}\n\nfunction learn_press_profile_tab_edit_content( $current, $tab, $user ) {\n\tlearn_press_get_template(\n\t\t'profile/tabs/edit.php',\n\t\tarray(\n\t\t\t'user'    => $user,\n\t\t\t'current' => $current,\n\t\t\t'tab'     => $tab,\n\t\t)\n\t);\n}\n\nfunction learn_press_get_profile_endpoints() {\n\t$endpoints = (array) LP()->settings->get( 'profile_endpoints' );\n\tif ( $tabs = LP_Profile::instance()->get_tabs() ) {\n\t\tforeach ( $tabs as $slug => $info ) {\n\t\t\tif ( empty( $endpoints[ $slug ] ) ) {\n\t\t\t\t$endpoints[ $slug ] = $slug;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn apply_filters( 'learn_press_profile_tab_endpoints', $endpoints );\n}\n\n\nfunction learn_press_update_user_option( $name, $value, $id = 0 ) {\n\tif ( ! $id ) {\n\t\t$id = get_current_user_id();\n\t}\n\t$key              = 'learnpress_user_options';\n\t$options          = get_user_option( $key, $id );\n\t$options[ $name ] = $value;\n\tupdate_user_option( $id, $key, $options, true );\n}\n\n/**\n * @param     $name\n * @param int  $id\n *\n * @return bool\n */\nfunction learn_press_delete_user_option( $name, $id = 0 ) {\n\tif ( ! $id ) {\n\t\t$id = get_current_user_id();\n\t}\n\t$key     = 'learnpress_user_options';\n\t$options = get_user_option( $key, $id );\n\tif ( is_array( $options ) && array_key_exists( $name, $options ) ) {\n\t\tunset( $options[ $name ] );\n\t\tupdate_user_option( $id, $key, $options, true );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * @param     $name\n * @param int  $id\n *\n * @return bool\n */\nfunction learn_press_get_user_option( $name, $id = 0 ) {\n\tif ( ! $id ) {\n\t\t$id = get_current_user_id();\n\t}\n\t$key     = 'learnpress_user_options';\n\t$options = get_user_option( $key, $id );\n\tif ( is_array( $options ) && array_key_exists( $name, $options ) ) {\n\t\treturn $options[ $name ];\n\t}\n\n\treturn false;\n}\n\n/**\n * Check and update user information from request in user profile page\n */\nfunction learn_press_update_user_profile() {\n\n\tif ( ! LP()->is_request( 'post' ) ) {\n\t\treturn;\n\t}\n\t$nonce = learn_press_get_request( 'profile-nonce' );\n\n\tif ( ! wp_verify_nonce( $nonce, 'learn-press-update-user-profile-' . get_current_user_id() ) ) {\n\t\treturn;\n\t}\n\t$section = learn_press_get_request( 'lp-profile-section' );\n\n\tdo_action( 'learn_press_update_user_profile_' . $section );\n\tdo_action( 'learn_press_update_user_profile', $section );\n}\n\n// add_action( 'init', 'learn_press_update_user_profile' );\n\n/**\n * Update user avatar\n */\nfunction learn_press_update_user_profile_avatar() {\n\t$user_id = get_current_user_id();\n\n\tif ( ! $user_id ) {\n\t\treturn new WP_Error( 2, 'User is invalid!' );\n\t}\n\n\t$upload_dir = learn_press_user_profile_picture_upload_dir();\n\n\tif ( learn_press_get_request( 'lp-user-avatar-custom' ) != 'yes' ) {\n\t\tdelete_user_meta( get_current_user_id(), '_lp_profile_picture' );\n\n\t\treturn false;\n\t}\n\n\t$data = learn_press_get_request( 'lp-user-avatar-crop' );\n\n\tif ( ! $data || ! ( $path = $upload_dir['basedir'] . $data['name'] ) && file_exists( $path ) ) {\n\t\treturn false;\n\t}\n\n\t$filetype = wp_check_filetype( $path );\n\n\tif ( 'jpg' == $filetype['ext'] ) {\n\t\t$im = imagecreatefromjpeg( $path );\n\t} elseif ( 'png' == $filetype['ext'] ) {\n\t\t$im = imagecreatefrompng( $path );\n\t}\n\n\tif ( ! isset( $im ) ) {\n\t\treturn false;\n\t}\n\n\t$points  = explode( ',', $data['points'] );\n\t$im_crop = imagecreatetruecolor( $data['width'], $data['height'] );\n\n\tif ( ! $im ) {\n\t\treturn false;\n\t}\n\n\t$dst_x = 0;\n\t$dst_y = 0;\n\t$dst_w = $data['width'];\n\t$dst_h = $data['height'];\n\t$src_x = $points[0];\n\t$src_y = $points[1];\n\t$src_w = $points[2] - $points[0];\n\t$src_h = $points[3] - $points[1];\n\n\timagecopyresampled( $im_crop, $im, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h );\n\n\t$newname = md5( $user_id . microtime( true ) );\n\t$output  = dirname( $path );\n\n\tif ( 'jpg' == $filetype['ext'] ) {\n\t\t$newname .= '.jpg';\n\t\t$output  .= '/' . $newname;\n\t\timagejpeg( $im_crop, $output );\n\t} elseif ( 'png' == $filetype['ext'] ) {\n\t\t$newname .= '.png';\n\t\t$output  .= '/' . $newname;\n\t\timagepng( $im_crop, $output );\n\t}\n\n\t$new_avatar = false;\n\n\tif ( file_exists( $output ) ) {\n\n\t\t$old_avatar = get_user_meta( $user_id, '_lp_profile_picture', true );\n\n\t\tif ( file_exists( $upload_dir['basedir'] . '/' . $old_avatar ) ) {\n\t\t\t@unlink( $upload_dir['basedir'] . '/' . $old_avatar );\n\t\t}\n\n\t\t$new_avatar = preg_replace( '!^/!', '', $upload_dir['subdir'] ) . '/' . $newname;\n\t\tupdate_user_meta( $user_id, '_lp_profile_picture', $new_avatar );\n\t\tupdate_user_meta( $user_id, '_lp_profile_picture_changed', 'yes' );\n\n\t\t$new_avatar = $upload_dir['baseurl'] . '/' . $new_avatar;\n\t}\n\n\t@unlink( $path );\n\n\treturn $new_avatar;\n}\n\n// add_action( 'learn_press_update_user_profile_avatar', 'learn_press_update_user_profile_avatar' );\n\n/**\n * Update user basic information.\n *\n * @param bool $wp_error - Optional. Return WP_Error object in case updating failed.\n *\n * @return bool|mixed|WP_Error\n */\nfunction learn_press_update_user_profile_basic_information( $wp_error = false ) {\n\t$user_id = get_current_user_id();\n\n\tif ( ! $user_id ) {\n\t\treturn new WP_Error( 2, 'User is invalid!' );\n\t}\n\n\t$update_data = array(\n\t\t'ID'           => $user_id,\n\t\t'first_name'   => filter_input( INPUT_POST, 'first_name', FILTER_SANITIZE_STRING ),\n\t\t'last_name'    => filter_input( INPUT_POST, 'last_name', FILTER_SANITIZE_STRING ),\n\t\t'description'  => filter_input( INPUT_POST, 'description', FILTER_SANITIZE_STRING ),\n\t\t'display_name' => filter_input( INPUT_POST, 'account_display_name', FILTER_SANITIZE_STRING ),\n\t\t'user_email'   => filter_input( INPUT_POST, 'account_email', FILTER_SANITIZE_EMAIL ),\n\t);\n\n\t$update_data = apply_filters( 'learn-press/update-profile-basic-information-data', $update_data );\n\t$update_meta = isset( $_POST['_lp_custom_register'] ) ? LP_Helper::sanitize_params_submitted( $_POST['_lp_custom_register'] ) : '';\n\n\t$return = LP_Forms_Handler::update_user_data( $update_data, $update_meta );\n\n\t// Update for social.\n\t$socials    = LP_Request::get_array( 'user_profile_social' );\n\t$extra_data = get_user_meta( $user_id, '_lp_extra_info', true );\n\n\tif ( ! empty( $extra_data ) ) {\n\t\t$socials = array_merge( $extra_data, $socials );\n\t}\n\n\tupdate_user_meta( $user_id, '_lp_extra_info', $socials );\n\n\tif ( is_wp_error( $return ) ) {\n\t\treturn $wp_error ? $return : false;\n\t}\n\n\treturn $return;\n}\n\n/**\n * Update new password.\n */\nfunction learn_press_update_user_profile_change_password( $wp_error = false ) {\n\t$user_id = get_current_user_id();\n\n\tif ( ! $user_id ) {\n\t\treturn new WP_Error( 2, 'User is invalid!' );\n\t}\n\n\t$old_pass       = filter_input( INPUT_POST, 'pass0' );\n\t$check_old_pass = false;\n\n\tif ( $old_pass ) {\n\t\t$user = wp_get_current_user();\n\t\trequire_once ABSPATH . 'wp-includes/class-phpass.php';\n\t\t$wp_hasher = new PasswordHash( 8, true );\n\n\t\tif ( $wp_hasher->CheckPassword( $old_pass, $user->data->user_pass ) ) {\n\t\t\t$check_old_pass = true;\n\t\t}\n\t}\n\n\ttry {\n\t\tif ( ! $check_old_pass ) {\n\t\t\tthrow new Exception( __( 'Old password incorrect!', 'learnpress' ) );\n\t\t} else {\n\t\t\t$new_pass  = filter_input( INPUT_POST, 'pass1' );\n\t\t\t$new_pass2 = filter_input( INPUT_POST, 'pass2' );\n\n\t\t\tif ( ! $new_pass || ! $new_pass2 || ( $new_pass != $new_pass2 ) ) {\n\t\t\t\tthrow new Exception( __( 'Confirmation password incorrect!', 'learnpress' ) );\n\t\t\t} else {\n\t\t\t\t$update_data = array(\n\t\t\t\t\t'user_pass' => $new_pass,\n\t\t\t\t\t'ID'        => get_current_user_id(),\n\t\t\t\t);\n\t\t\t\t$return      = wp_update_user( $update_data );\n\n\t\t\t\tif ( is_wp_error( $return ) ) {\n\t\t\t\t\treturn $wp_error ? $return : false;\n\t\t\t\t}\n\n\t\t\t\treturn $return;\n\t\t\t}\n\t\t}\n\t} catch ( Exception $ex ) {\n\t\treturn $wp_error ? new WP_Error( 'UPDATE_PROFILE_ERROR', $ex->getMessage() ) : false;\n\t}\n}\n\nfunction learn_press_get_avatar_thumb_size() {\n\t$option = LP_Settings::get_option(\n\t\t'avatar_dimensions',\n\t\tarray(\n\t\t\t'width'  => 250,\n\t\t\t'height' => 250,\n\t\t)\n\t);\n\n\tif ( ! isset( $option['width'] ) || ! isset( $option['height'] ) ) {\n\t\t$option = array(\n\t\t\t'width'  => 250,\n\t\t\t'height' => 250,\n\t\t);\n\t}\n\n\treturn $option;\n}\n\nfunction learn_press_get_course_thumbnail_dimensions() {\n\t$option = LP_Settings::get_option(\n\t\t'course_thumbnail_dimensions',\n\t\tarray(\n\t\t\t'width'  => 500,\n\t\t\t'height' => 300,\n\t\t)\n\t);\n\n\tif ( ! isset( $option['width'] ) || ! isset( $option['height'] ) ) {\n\t\t$option = array(\n\t\t\t'width'  => 500,\n\t\t\t'height' => 300,\n\t\t);\n\t}\n\n\treturn $option;\n}\n\n/**\n * Set a fake cookie to\n */\nfunction learn_press_set_user_cookie_for_guest() {\n\tif ( ! is_admin() && ! headers_sent() ) {\n\t\t$guest_key = '_wordpress_lp_guest';\n\n\t\tif ( is_user_logged_in() ) {\n\t\t\tif ( ! empty( $_COOKIE[ $guest_key ] ) ) {\n\t\t\t\tlearn_press_remove_cookie( $guest_key );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( empty( $_COOKIE[ $guest_key ] ) ) {\n\t\t\t\tlearn_press_setcookie( $guest_key, md5( time() ), time() + 3600 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nadd_action( 'wp', 'learn_press_set_user_cookie_for_guest' );\n\nfunction learn_press_get_user_avatar( $user_id = 0, $size = '' ) {\n\t$user = learn_press_get_user( $user_id );\n\n\treturn $user->get_profile_picture( '', $size );\n}\n\n/**\n * Get profile instance for an user to view.\n *\n * @param int $for_user\n *\n * @return LP_Profile|WP_Error\n */\nfunction learn_press_get_profile( $for_user = 0 ) {\n\treturn LP_Profile::instance( $for_user );\n}\n\n/**\n * Remove items from learnpress_user_items.\n *\n * @param int  $user_id\n * @param int  $item_id\n * @param int  $course_id\n * @param bool $include_course - Optional. If TRUE then remove course and it's items\n */\nfunction learn_press_remove_user_items( $user_id, $item_id, $course_id, $include_course = false ) {\n\tglobal $wpdb;\n\n\tsettype( $item_id, 'array' );\n\n\t$format = array_fill( 0, sizeof( $item_id ), '%d' );\n\t$where  = '';\n\n\t$args = array( $user_id );\n\t$args = array_merge( $args, $item_id );\n\n\tif ( $course_id ) {\n\t\t$args[] = $course_id;\n\t\t$where  = 'AND ref_id = %d';\n\t}\n\n\tif ( $include_course ) {\n\t\t$where .= ' OR ( item_id = %d AND item_type = %s )';\n\t\t$args[] = $course_id;\n\t\t$args[] = LP_COURSE_CPT;\n\t}\n\n\t$query = $wpdb->prepare(\n\t\t\"\n        DELETE\n        FROM {$wpdb->learnpress_user_items}\n        WHERE user_id = %d\n        AND ( item_id IN(\" . join( ',', $format ) . \")\n        $where )\n    \",\n\t\t$args\n\t);\n}\n\n/**\n * Get user profile link\n *\n * @param int  $user_id\n * @param null $tab\n *\n * @return mixed|string\n */\nfunction learn_press_user_profile_link( $user_id = 0, $tab = null ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\t$user    = false;\n\t$deleted = in_array( $user_id, LP_User_Factory::$_deleted_users );\n\tif ( ! $deleted ) {\n\t\tif ( is_numeric( $user_id ) ) {\n\t\t\t$user = get_user_by( 'id', $user_id );\n\t\t} else {\n\t\t\t$user = get_user_by( 'login', urldecode( $user_id ) );\n\t\t}\n\t} else {\n\t\treturn '';\n\t}\n\tif ( ! $deleted && ! $user ) {\n\t\tLP_User_Factory::$_deleted_users[] = $user_id;\n\t}\n\n\t$user = learn_press_get_user( $user_id );\n\n\tif ( ! $user ) {\n\t\treturn '';\n\t}\n\n\tglobal $wp_query;\n\t$args = array(\n\t\t'user' => $user->get_username(),\n\t);\n\n\tif ( isset( $args['user'] ) ) {\n\t\tif ( '' === $tab ) {\n\t\t\t$tab = learn_press_get_current_profile_tab();\n\t\t}\n\t\tif ( $tab ) {\n\t\t\t$args['tab'] = $tab;\n\t\t}\n\n\t\t/**\n\t\t * If no tab is selected in profile and is current user\n\t\t * then no need the username in profile link.\n\t\t */\n\t\tif ( ( $user_id == get_current_user_id() ) && ! isset( $args['tab'] ) ) {\n\t\t\tunset( $args['user'] );\n\t\t}\n\t}\n\t$args         = array_map( '_learn_press_urlencode', $args );\n\t$profile_link = trailingslashit( learn_press_get_page_link( 'profile' ) );\n\tif ( $profile_link ) {\n\t\tif ( get_option( 'permalink_structure' ) /*&& learn_press_get_page_id( 'profile' )*/ ) {\n\t\t\t$url = trailingslashit( $profile_link . join( '/', array_values( $args ) ) );\n\t\t} else {\n\t\t\t$url = add_query_arg( $args, $profile_link );\n\t\t}\n\t} else {\n\t\t$url = get_author_posts_url( $user_id );\n\t}\n\n\treturn apply_filters( 'learn_press_user_profile_link', $url, $user_id, $tab );\n}\n\n/**********************************************/\n/*       Functions are used for hooks         */\n/**********************************************/\n\nfunction learn_press_hk_before_start_quiz( $true, $quiz_id, $course_id, $user_id ) {\n\tif ( 'yes' !== get_post_meta( $quiz_id, '_lp_archive_history', true ) ) {\n\t\tlearn_press_remove_user_items( $user_id, $quiz_id, $course_id );\n\t}\n\n\treturn $true;\n}\n\nadd_filter( 'learn-press/before-start-quiz', 'learn_press_hk_before_start_quiz', 10, 4 );\n\n/*function learn_press_default_user_item_status( $item_id ) {\n\t$status = '';\n\tswitch ( learn_press_get_post_type( $item_id ) ) {\n\t\tcase LP_LESSON_CPT:\n\t\t\t$status = 'started';\n\t\t\tbreak;\n\t\tcase LP_QUIZ_CPT:\n\t\t\t$status = 'viewed';\n\t\t\tbreak;\n\t\tcase LP_COURSE_CPT:\n\t\t\t$status = 'enrolled';\n\t}\n\n\treturn apply_filters( 'learn-press/default-user-item-status', $status, $item_id );\n}*/\n\n/**\n * Get current state of distraction mode\n *\n * @return mixed\n * @since 3.1.0\n */\nfunction learn_press_get_user_distraction() {\n\tif ( is_user_logged_in() ) {\n\t\treturn get_user_option( 'distraction_mode', get_current_user_id() );\n\t} else {\n\t\treturn LP()->session->distraction_mode;\n\t}\n}\n\nfunction learn_press_get_user_role( $user_id ) {\n\tif ( $user = learn_press_get_user( $user_id ) ) {\n\t\treturn $user->get_role();\n\t}\n\n\treturn false;\n}\n\n/**\n * @param array $args\n * @param bool  $wp_error\n *\n * @return bool|int|LP_User_Item|mixed|WP_Error\n */\nfunction learn_press_create_user_item( $args = array(), $wp_error = false ) {\n\tglobal $wpdb;\n\n\t$defaults = array(\n\t\t'user_id'     => get_current_user_id(),\n\t\t'item_id'     => '',\n\t\t'start_time'  => current_time( 'mysql', true ),\n\t\t'end_time'    => '',\n\t\t'graduation'  => '',\n\t\t'item_type'   => '',\n\t\t'status'      => '',\n\t\t'ref_id'      => 0,\n\t\t'ref_type'    => 0,\n\t\t'parent_id'   => 0,\n\t\t'create_meta' => array(),\n\t);\n\n\t$item_data = wp_parse_args( $args, $defaults );\n\n\t// Validate item_id and post type\n\tif ( empty( $item_data['item_id'] ) ) {\n\t\tif ( $wp_error ) {\n\t\t\treturn new WP_Error( 'invalid_item_id', __( 'Invalid item id.', 'learnpress' ) );\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tif ( empty( $item_data['item_type'] ) && $post_type = learn_press_get_post_type( $item_data['item_id'] ) ) {\n\t\t$item_data['item_type'] = $post_type;\n\t}\n\n\t// Get id and type of ref if they are null\n\tif ( ! empty( $item_data['parent_id'] ) && ( empty( $item_data['ref_id'] ) || ( empty( $item_data['ref_type'] ) ) ) ) {\n\t\t$parent = $wpdb->get_row(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT * FROM {$wpdb->learnpress_user_items} WHERE %d\",\n\t\t\t\t$item_data['parent_id']\n\t\t\t)\n\t\t);\n\n\t\tif ( $parent ) {\n\t\t\tif ( empty( $item_data['ref_id'] ) ) {\n\t\t\t\t$item_data['ref_id'] = $parent->item_id;\n\t\t\t}\n\n\t\t\tif ( empty( $item_data['ref_type'] ) ) {\n\t\t\t\t$item_data['ref_type'] = $parent->item_type;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Filter\n\tif ( ! $item_data = apply_filters( 'learn-press/create-user-item-data', $item_data ) ) {\n\t\tif ( $wp_error ) {\n\t\t\treturn new WP_Error( 'invalid_item_data', __( 'Invalid item data.', 'learnpress' ) );\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tdo_action( 'learn-press/before-create-user-item', $item_data );\n\n\t$create_meta = ! empty( $item_data['create_meta'] ) ? $item_data['create_meta'] : false;\n\n\tif ( $create_meta ) {\n\t\tunset( $item_data['create_meta'] );\n\t}\n\n\t$user_item = new LP_User_Item( $item_data );\n\n\t$result = $user_item->update( true, false );\n\n\tif ( ! $result || is_wp_error( $result ) ) {\n\n\t\tif ( $wp_error && is_wp_error( $result ) ) {\n\t\t\treturn $result;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tdo_action( 'learn-press/created-user-item', $user_item, $item_data );\n\n\t$create_meta = apply_filters( 'learn-press/create-user-item-meta', $create_meta, $item_data );\n\tif ( ! $create_meta ) {\n\t\treturn $user_item;\n\t}\n\n\tdo_action( 'learn-press/before-create-user-item-meta', $create_meta );\n\n\tforeach ( $create_meta as $key => $value ) {\n\t\tlearn_press_update_user_item_meta( $user_item->get_user_item_id(), $key, $value );\n\t}\n\n\tdo_action( 'learn-press/created-user-item-meta', $user_item, $create_meta );\n\n\treturn $user_item;\n}\n\n/**\n * @param array $args\n * @param bool  $wp_error - Optional. TRUE will return WP_Error on fail.\n *\n * @return bool|array|LP_User_Item|WP_Error\n */\nfunction learn_press_create_user_item_for_quiz( $args = array(), $wp_error = false ) {\n\tglobal $wpdb;\n\n\t$item_data = wp_parse_args(\n\t\t$args,\n\t\tarray(\n\t\t\t'item_type'  => LP_QUIZ_CPT,\n\t\t\t'status'     => LP_ITEM_STARTED,\n\t\t\t'graduation' => LP_COURSE_GRADUATION_IN_PROGRESS,\n\t\t\t'user_id'    => get_current_user_id(),\n\t\t)\n\t);\n\n\t$user_item = learn_press_create_user_item( $item_data, $wp_error );\n\n\tif ( $user_item && ! is_wp_error( $user_item ) ) {\n\t\t$user_item = new LP_User_Item_Quiz( $user_item->get_data() );\n\t\t$user_item->update( true );\n\t}\n\n\treturn $user_item;\n}\n\n/**\n * Get list user_item_id for Quiz in table learnpress_user_items\n *\n * @param int $quiz_id\n * @param int $course_id\n * @return array || false\n */\nfunction learn_press_isset_user_item_for_quiz( $quiz_id, $course_id ) {\n\tglobal $wpdb;\n\n\t$query = $wpdb->prepare( \"SELECT user_item_id FROM $wpdb->learnpress_user_items WHERE ref_id=%d AND item_id=%d\", $course_id, $quiz_id );\n\t$col   = $wpdb->get_col( $query );\n\n\tif ( ! empty( $col ) ) {\n\t\treturn $col;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Create new user item prepare for user starts a quiz\n * Update error retry course not work - Nhamdv.\n *\n * @param int  $quiz_id\n * @param int  $user_id\n * @param int  $course_id\n * @param bool $wp_error\n *\n * @return array|bool|LP_User_Item|WP_Error\n * @since 4.0.0\n */\nfunction learn_press_user_start_quiz( $quiz_id, $user_id = 0, $course_id = 0, $wp_error = false ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\tglobal $wpdb;\n\n\t$query = $wpdb->prepare(\n\t\t\"\n\t    SELECT user_item_id, item_id id, item_type type\n\t    FROM {$wpdb->learnpress_user_items}\n\t    WHERE user_item_id = (SELECT max(user_item_id)\n\t    FROM {$wpdb->learnpress_user_items}\n\t    WHERE user_id = %d AND item_id = %d AND status IN ('enrolled', 'in-progress'))\n\t\",\n\t\t$user_id,\n\t\t$course_id\n\t);\n\n\t$parent = $wpdb->get_row( $query );\n\n\tdo_action( 'learn-press/before-user-start-quiz', $quiz_id, $user_id, $course_id );\n\n\t$user        = learn_press_get_user( $user_id );\n\t$course_data = $user->get_course_data( $course_id );\n\t$quiz_data   = $course_data->get_item( $quiz_id );\n\n\t$quiz      = LP_Quiz::get_quiz( $quiz_id );\n\t$duration  = $quiz->get_duration();\n\t$user_quiz = learn_press_create_user_item_for_quiz(\n\t\tarray(\n\t\t\t'user_item_id' => $quiz_data ? $quiz_data->get_user_item_id() : 0,\n\t\t\t'item_id'      => $quiz->get_id(),\n\t\t\t'duration'     => $duration ? $duration->get() : 0,\n\t\t\t'user_id'      => $user_id,\n\t\t\t'parent_id'    => $parent ? absint( $parent->user_item_id ) : 0,\n\t\t\t'ref_type'     => $parent ? $parent->type : '',\n\t\t\t'ref_id'       => $parent ? $parent->id : '',\n\t\t),\n\t\t$wp_error\n\t);\n\n\tif ( $user_quiz && ! is_wp_error( $user_quiz ) ) {\n\t\tdo_action( 'learn-press/user-started-quiz', $user_quiz, $quiz_id, $user_id, $course_id );\n\t}\n\n\t// Reset first cache\n\t$user_quiz->get_status( 'status', true );\n\n\treturn $user_quiz;\n}\n\n/**\n * Function retake quiz.\n *\n * @param [type]  $quiz_id\n * @param integer $user_id\n * @param integer $course_id\n * @param boolean $wp_error\n *\n * @return void\n */\nfunction learn_press_user_retake_quiz( $quiz_id, $user_id = 0, $course_id = 0, $wp_error = false ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\tif ( ! $course_id ) {\n\t\treturn new WP_Error( 'invalid_course_id', esc_html__( 'Invalid Course ID.', 'learnpress' ) );\n\t}\n\n\tglobal $wpdb;\n\n\t$query = $wpdb->prepare(\n\t\t\"\n\t    SELECT user_item_id, item_id id, item_type type\n\t    FROM {$wpdb->learnpress_user_items}\n\t    WHERE user_item_id = (SELECT max(user_item_id)\n\t    FROM {$wpdb->learnpress_user_items}\n\t    WHERE user_id = %d AND item_id = %d AND status IN ('enrolled', 'in-progress'))\n\t\t\",\n\t\t$user_id,\n\t\t$course_id\n\t);\n\n\t$parent = $wpdb->get_row( $query );\n\n\tif ( ! $parent ) {\n\t\treturn new WP_Error( 'invalid_user_item', esc_html__( 'Invalid Quiz', 'learnpress' ) );\n\t}\n\n\t$data = learn_press_get_user_item(\n\t\tarray(\n\t\t\t'item_id'   => $quiz_id,\n\t\t\t'user_id'   => $user_id,\n\t\t\t'parent_id' => $parent ? absint( $parent->user_item_id ) : 0,\n\t\t\t'ref_type'  => $parent ? $parent->type : LP_COURSE_CPT,\n\t\t\t'ref_id'    => $parent ? $parent->id : '',\n\t\t)\n\t);\n\n\t$user_item = new LP_User_Item_Quiz( $data );\n\n\t$user_item->update_retake_count();\n\n\t// Create new result in table learnpress_user_item_results.\n\tLP_User_Items_Result_DB::instance()->insert( $data->user_item_id );\n\n\t// Remove user_item_meta.\n\tlearn_press_delete_user_item_meta( $data->user_item_id, '_lp_question_checked' );\n\n\t$user_item->set_status( LP_ITEM_STARTED )\n\t\t\t\t->set_start_time( current_time( 'mysql', 1 ) ) // Error Retake when change timezone - Nhamdv\n\t\t\t\t->set_end_time( '' )\n\t\t\t\t->set_graduation( LP_COURSE_GRADUATION_IN_PROGRESS )\n\t\t\t\t->update();\n\n\t// Reset first cache\n\t$user_item->get_status( 'status', true );\n\n\t// Error Retake when change timezone - Nhamdv\n\t//  learn_press_update_user_item_field(\n\t//      array(\n\t//          'start_time' => current_time( 'mysql', true ),\n\t//      ),\n\t//      array(\n\t//          'user_item_id' => $data->user_item_id,\n\t//      )\n\t//  );\n\n\treturn $user_item;\n}\n\n\n/**\n * Prepares list of questions for rest api.\n *\n * @param int[] $question_ids\n * @param array $args\n *\n * @return array\n * @since 3.3.0\n */\nfunction learn_press_rest_prepare_user_questions( array $question_ids = array(), array $args = array() ) : array {\n\tif ( is_numeric( $args ) ) {\n\n\t} else {\n\t\t$args = wp_parse_args(\n\t\t\t$args,\n\t\t\tarray(\n\t\t\t\t'instant_hint'        => true,\n\t\t\t\t'instant_check'       => true,\n\t\t\t\t'quiz_status'         => '',\n\t\t\t\t'checked_questions'   => array(),\n\t\t\t\t'hinted_questions'    => array(),\n\t\t\t\t'answered'            => array(),\n\t\t\t\t'show_correct_review' => true,\n\t\t\t)\n\t\t);\n\t}\n\n\t$checkedQuestions = $args['checked_questions'];\n\t$hintedQuestions  = $args['hinted_questions'];\n\t$instantHint      = $args['instant_hint'];\n\t$instantCheck     = $args['instant_check'];\n\t$quizStatus       = $args['quiz_status'];\n\t$answered         = $args['answered'];\n\t$status           = $args['status'] ?? '';\n\t$questions        = array();\n\n\tif ( $question_ids ) {\n\t\tforeach ( $question_ids as $id ) {\n\t\t\t$question       = learn_press_get_question( $id );\n\t\t\t$hasHint        = false;\n\t\t\t$hasExplanation = false;\n\t\t\t$canCheck       = false;\n\t\t\t$hinted         = false;\n\t\t\t$checked        = false;\n\t\t\t$theHint        = $question->get_hint();\n\t\t\t$theExplanation = '';\n\n\t\t\tif ( $instantCheck || $status == 'completed' ) {\n\t\t\t\t$theExplanation = $question->get_explanation();\n\t\t\t\t$checked        = in_array( $id, $checkedQuestions );\n\t\t\t\t$hasExplanation = ! ! $theExplanation;\n\t\t\t}\n\n\t\t\t $mark = $question->get_mark() ? $question->get_mark() : 1;\n\n\t\t\t$questionData = array(\n\t\t\t\t'object' => $question,\n\t\t\t\t'id'     => absint( $id ),\n\t\t\t\t'title'  => $question->get_title(),\n\t\t\t\t'type'   => $question->get_type(),\n\t\t\t\t'point'  => $mark,\n\t\t\t);\n\n\t\t\t$content = $question->get_content();\n\t\t\tif ( $content ) {\n\t\t\t\t$questionData['content'] = $content;\n\t\t\t}\n\n\t\t\tif ( $theHint ) {\n\t\t\t\t$questionData['hint'] = $theHint;\n\t\t\t}\n\n\t\t\tif ( $status == 'completed' || ( $checked && $theExplanation ) ) {\n\t\t\t\t$questionData['explanation'] = $theExplanation;\n\t\t\t}\n\n\t\t\tif ( $hasExplanation ) {\n\t\t\t\t$questionData['has_explanation'] = $hasExplanation;\n\n\t\t\t\tif ( $checked ) {\n\t\t\t\t\t$questionData['explanation'] = $theExplanation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$with_true_or_false = ( $checked || ( $quizStatus == 'completed' && $args['show_correct_review'] ) );\n\n\t\t\tif ( $question->is_support( 'answer-options' ) ) {\n\t\t\t\t$questionData['options'] = learn_press_get_question_options_for_js(\n\t\t\t\t\t$question,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'include_is_true' => $with_true_or_false,\n\t\t\t\t\t\t'answer'          => $answered[ $id ]['answered'] ?? '',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$questions[] = $questionData;\n\t\t}\n\n\t\t/**\n\t\t * Remove answered\n\t\t */\n\t\tif ( $quizStatus !== 'completed' ) {\n\t\t\tif ( $checkedQuestions && $quizStatus ) {\n\n\t\t\t\t$omitIds = array_diff( $question_ids, $checkedQuestions );\n\n\t\t\t\tif ( $omitIds ) {\n\t\t\t\t\tforeach ( $omitIds as $omitId ) {\n\t\t\t\t\t\tif ( ! empty( $answered[ $omitId ] ) ) {\n\t\t\t\t\t\t\tunset( $answered[ $omitId ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn apply_filters( 'learn-press/list-questions-data', $questions );\n}\n\n/**\n * Output html to show extra info of user in backend profile.\n *\n * @param WP_User $user\n *\n * @since 4.0.0\n */\n/*function learn_press_append_user_profile_fields( $user ) {\n\tif ( ! is_admin() ) {\n\t\treturn;\n\t}\n\n\tlearn_press_admin_view( 'backend-user-profile', array( 'user' => $user ) );\n}*/\n\n//add_action( 'show_user_profile', 'learn_press_append_user_profile_fields' );\n//add_action( 'edit_user_profile', 'learn_press_append_user_profile_fields' );\n\n/**\n * Update extra profile data upon update user.\n *\n * @param int $user_id\n *\n * @since 4.0.0\n */\nfunction learn_press_update_extra_user_profile_fields( $user_id ) {\n\tif ( ! current_user_can( 'edit_user', $user_id ) ) {\n\t\treturn;\n\t}\n\n\tif ( isset( $_POST['_lp_extra_info'] ) ) {\n\t\tupdate_user_meta( $user_id, '_lp_extra_info', $_POST['_lp_extra_info'] );\n\t}\n}\n\nadd_action( 'personal_options_update', 'learn_press_update_extra_user_profile_fields' );\nadd_action( 'edit_user_profile_update', 'learn_press_update_extra_user_profile_fields' );\n\n/**\n * Get extra profile info data\n *\n * @param int $user_id\n *\n * @return array\n * @since 4.0.0\n */\nfunction learn_press_get_user_extra_profile_info( $user_id = 0 ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\t$extra_profile_info = get_the_author_meta( '_lp_extra_info', $user_id );\n\t$extra_fields       = learn_press_get_user_extra_profile_fields();\n\n\t$extra_profile_info = wp_parse_args(\n\t\t$extra_profile_info,\n\t\tarray_fill_keys( array_keys( $extra_fields ), '' )\n\t);\n\n\treturn apply_filters( 'learn-press/user-extra-profile-info', $extra_profile_info, $user_id );\n}\n\nfunction learn_press_social_profiles() {\n\treturn apply_filters(\n\t\t'learn-press/social-profiles',\n\t\tarray(\n\t\t\t'facebook',\n\t\t\t'twitter',\n\t\t\t'youtube',\n\t\t\t'linkedin',\n\t\t)\n\t);\n}\n\nfunction lp_add_default_fields( $fields ) {\n\t$first_name = LP()->settings()->get( 'enable_register_first_name' );\n\n\tif ( $first_name === 'yes' ) {\n\t\t?>\n\t\t<li class=\"form-field\">\n\t\t\t<label for=\"reg_first_name\"><?php esc_html_e( 'First name', 'learnpress' ); ?></label>\n\t\t\t<input id=\"reg_first_name\" name=\"reg_first_name\" type=\"text\"\n\t\t\t\t   placeholder=\"<?php esc_attr_e( 'First name', 'learnpress' ); ?>\"\n\t\t\t\t   value=\"<?php echo ( ! empty( $_POST['reg_first_name'] ) ) ? esc_attr( wp_unslash( $_POST['reg_first_name'] ) ) : ''; ?>\">\n\t\t</li>\n\t\t<?php\n\t}\n\n\t$last_name = LP()->settings()->get( 'enable_register_last_name' );\n\n\tif ( $last_name === 'yes' ) {\n\t\t?>\n\t\t<li class=\"form-field\">\n\t\t\t<label for=\"reg_last_name\"><?php esc_html_e( 'Last name', 'learnpress' ); ?></label>\n\t\t\t<input id=\"reg_last_name\" name=\"reg_last_name\" type=\"text\"\n\t\t\t\t   placeholder=\"<?php esc_attr_e( 'Last name', 'learnpress' ); ?>\"\n\t\t\t\t   value=\"<?php echo ( ! empty( $_POST['reg_last_name'] ) ) ? esc_attr( wp_unslash( $_POST['reg_last_name'] ) ) : ''; ?>\">\n\t\t</li>\n\t\t<?php\n\t}\n\n\t$display_name = LP()->settings()->get( 'enable_register_display_name' );\n\n\tif ( $display_name === 'yes' ) {\n\t\t?>\n\t\t<li class=\"form-field\">\n\t\t\t<label for=\"reg_display_name\"><?php esc_html_e( 'Display name', 'learnpress' ); ?></label>\n\t\t\t<input id=\"reg_display_name\" name=\"reg_display_name\" type=\"text\"\n\t\t\t\t   placeholder=\"<?php esc_attr_e( 'Display name', 'learnpress' ); ?>\"\n\t\t\t\t   value=\"<?php echo ( ! empty( $_POST['reg_display_name'] ) ) ? esc_attr( wp_unslash( $_POST['reg_display_name'] ) ) : ''; ?>\">\n\t\t</li>\n\t\t<?php\n\t}\n}\n\nadd_filter( 'learn-press/after-form-register-fields', 'lp_add_default_fields' );\n\nfunction lp_custom_register_fields_display() {\n\t?>\n\t<?php $custom_fields = LP()->settings()->get( 'register_profile_fields' ); ?>\n\n\t<?php if ( $custom_fields ) : ?>\n\t\t<?php foreach ( $custom_fields as $custom_field ) : ?>\n\t\t\t<?php\n\t\t\t$cf_class = '';\n\t\t\tif ( $custom_field['required'] == 'yes' ) {\n\t\t\t\t$cf_class = ' required';\n\t\t\t\t?>\n\t\t\t\t<style>\n\t\t\t\t\t.required label {\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t}\n\t\t\t\t\t.required label:after {\n\t\t\t\t\t\tcontent: ' *';\n\t\t\t\t\t\tdisplay:inline;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<?php\n\t\t\t}\n\n\t\t\tif ( isset( $custom_field['id'] ) ) {\n\t\t\t\t?>\n\t\t\t\t<?php $value = $custom_field['id']; ?>\n\n\t\t\t\t<li class=\"form-field<?php echo esc_attr( $cf_class ); ?>\">\n\t\t\t\t\t<?php\n\t\t\t\t\tswitch ( $custom_field['type'] ) {\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'email':\n\t\t\t\t\t\tcase 'url':\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<label for=\"description\"><?php echo esc_html( $custom_field['name'] ); ?></label>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\tcase 'tel':\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<input name=\"_lp_custom_register_form[<?php echo $value; ?>]\"\n\t\t\t\t\t\t\t\t   type=\"<?php echo $custom_field['type']; ?>\" class=\"regular-text\"\n\t\t\t\t\t\t\t\t   value=\"\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'textarea':\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<label for=\"description\"><?php echo esc_html( $custom_field['name'] ); ?></label>\n\t\t\t\t\t\t\t<textarea name=\"_lp_custom_register_form[<?php echo $value; ?>]\"></textarea>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'checkbox':\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input name=\"_lp_custom_register_form[<?php echo $value; ?>]\"\n\t\t\t\t\t\t\t\t\t   type=\"<?php echo $custom_field['type']; ?>\" value=\"1\">\n\t\t\t\t\t\t\t\t<?php echo esc_html( $custom_field['name'] ); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t</li>\n\t\t\t<?php } ?>\n\t\t<?php endforeach; ?>\n\t<?php endif; ?>\n\t<?php\n}\n\nadd_action( 'learn-press/after-form-register-fields', 'lp_custom_register_fields_display' );\n\n/**\n * Custom register fields\n *\n * @param [type] $user_id\n *\n * @return void\n */\nfunction lp_user_custom_register_fields( $user_id, $fields = array() ) {\n\tif ( ! empty( $fields ) ) {\n\t\tupdate_user_meta( $user_id, '_lp_custom_register', LP_Helper::sanitize_params_submitted( $fields ) );\n\t} elseif ( isset( $_POST['_lp_custom_register'] ) ) {\n\t\tupdate_user_meta( $user_id, '_lp_custom_register', LP_Helper::sanitize_params_submitted( $_POST['_lp_custom_register'] ) );\n\t}\n}\n\nadd_action( 'personal_options_update', 'lp_user_custom_register_fields' );\nadd_action( 'edit_user_profile_update', 'lp_user_custom_register_fields' );\n\nfunction lp_get_user_custom_register_fields( $user_id = 0 ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\t$register_fields = get_the_author_meta( '_lp_custom_register', $user_id );\n\t$defaults        = lp_get_user_custom_fields();\n\n\t$extra_profile_info = wp_parse_args( $register_fields, $defaults );\n\n\treturn apply_filters( 'lp/user-custom-register-fields', $register_fields, $user_id );\n}\n\nfunction lp_get_user_custom_fields() {\n\t$custom_fields = LP()->settings()->get( 'register_profile_fields' );\n\n\t$output = array();\n\n\tif ( $custom_fields ) {\n\t\tforeach ( $custom_fields as $field ) {\n\t\t\t$output[ $field['id'] ] = '';\n\t\t}\n\t}\n\n\treturn $output;\n}\n\n/**\n * Check extra user data is a social profile.\n *\n * @param $key\n *\n * @return bool\n * @since 4.0.0\n */\nfunction learn_press_is_social_profile( $key ) {\n\t$is_socials = learn_press_social_profiles();\n\n\treturn in_array( $key, $is_socials );\n}\n\nfunction learn_press_social_profile_name( $key ) {\n\t$name = '';\n\tswitch ( $key ) {\n\t\tcase 'facebook':\n\t\t\t$name = esc_html__( 'Facebook Profile', 'learnpress' );\n\t\t\tbreak;\n\t\tcase 'twitter':\n\t\t\t$name = esc_html__( 'Twitter Profile', 'learnpress' );\n\t\t\tbreak;\n\t\tcase 'googleplus':\n\t\t\t$name = esc_html__( 'Google Profile', 'learnpress' );\n\t\t\tbreak;\n\t\tcase 'youtube':\n\t\t\t$name = esc_html__( 'Youtube Channel', 'learnpress' );\n\t\t\tbreak;\n\t\tcase 'linkedin':\n\t\t\t$name = esc_html__( 'Linkedin Profile', 'learnpress' );\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$name = ucfirst( $key );\n\t}\n\n\treturn apply_filters( 'learn-press/social-profile-name', $name, $key );\n}\n\n/**\n * Get extra profile fields will be registered in backend profile.\n *\n * @return array\n * @since 4.0.0\n */\nfunction learn_press_get_user_extra_profile_fields() {\n\t$socials = learn_press_social_profiles();\n\t$fields  = array();\n\n\tforeach ( $socials as $social ) {\n\t\t$fields[ $social ] = learn_press_social_profile_name( $social );\n\t}\n\n\treturn apply_filters( 'learn-press/user-extra-profile-fields', $fields );\n}\n\n/**\n * Show courses user enrolled on backend\n *\n * @param $user\n *\n * @return void\n */\nfunction learn_press_user_profile_data( $user ) {\n\tif ( ! is_admin() ) {\n\t\treturn;\n\t}\n\n\tlearn_press_admin_view( 'backend-user-profile', array( 'user' => $user ) );\n\tlearn_press_admin_view( 'user/courses.php', array( 'user_id' => $user->ID ) );\n}\n//add_action( 'show_user_profile', 'learn_press_user_profile_data', 1000 );\nadd_action( 'edit_user_profile', 'learn_press_user_profile_data', 1000 );\n\nfunction learnpress_get_count_by_user( $user_id = '', $post_type = 'lp_course' ) {\n\tif ( empty( $user_id ) ) {\n\t\treturn false;\n\t}\n\n\t$args = array(\n\t\t'author'         => $user_id,\n\t\t'posts_per_page' => - 1,\n\t\t'post_type'      => $post_type,\n\t\t'post_status'    => 'any',\n\t);\n\n\t$posts = get_posts( $args );\n\n\t$output = array(\n\t\t'all'     => count( $posts ),\n\t\t'publish' => array(),\n\t\t'pending' => array(),\n\t);\n\n\t$pending = $public = array();\n\n\tif ( ! empty( $posts ) ) {\n\t\tforeach ( $posts as $post ) {\n\t\t\tswitch ( $post->post_status ) {\n\t\t\t\tcase 'pending':\n\t\t\t\t\t$pending[] = $post;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'publish':\n\t\t\t\t\t$public[] = $post;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn array(\n\t\t'all'     => count( $posts ),\n\t\t'publish' => count( $public ),\n\t\t'pending' => count( $pending ),\n\t);\n\n}\n\n/*\nadd_action(\n\t'admin_init',\n\tfunction() {\n\t\t$custom_fields = LP()->settings()->get( 'register_profile_fields' );\n\n\t\t$custom_fields = LP_Helper::sanitize_params_submitted( $custom_fields );\n\n\t\tif ( ! empty( $custom_fields ) ) {\n\t\t\t$output = array();\n\n\t\t\tforeach ( $custom_fields as $key => $field ) {\n\t\t\t\tif ( ! isset( $field['id'] ) ) {\n\t\t\t\t\t$output[ $key ] = array(\n\t\t\t\t\t\t'id'       => $field['name'],\n\t\t\t\t\t\t'name'     => $field['name'] ?? '',\n\t\t\t\t\t\t'type'     => $field['type'] ?? '',\n\t\t\t\t\t\t'required' => $field['required'] ?? '',\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$output[ $key ] = $field;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdate_option( 'learn_press_register_profile_fields', $output );\n\t\t}\n\t}\n);*/\n"], "fixing_code": ["( function( $ ) {\n\t'use strict';\n\n\tconst UserProfile = function( args ) {\n\t\tthis.view = new UserProfile.View( {\n\t\t\tmodel: new UserProfile.Model( args ),\n\t\t} );\n\t};\n\n\tUserProfile.View = Backbone.View.extend( {\n\t\tevents: {\n\t\t\t'click #lp-remove-upload-photo': '_removePhoto',\n\t\t\t'click #lp-upload-photo': '_upload',\n\t\t\t'click .lp-cancel-upload': '_cancel',\n\t\t\t'click .lp-save-upload': '_save',\n\t\t},\n\t\tel: '#lp-user-edit-avatar',\n\t\tuploader: null,\n\t\tinitialize() {\n\t\t\t_.bindAll( this, 'filesAdded', 'uploadProgress', 'uploadError', 'fileUploaded', 'crop' );\n\t\t\tthis._getUploader();\n\t\t},\n\t\t_save( e ) {\n\t\t\te.preventDefault();\n\t\t\tconst self = this;\n\t\t\t$.ajax( {\n\t\t\t\t//url: '?lp-ajax=save-uploaded-user-avatar',\n\t\t\t\turl: ( typeof lpGlobalSettings !== 'undefined' ? lpGlobalSettings.ajax : '' ).addQueryVar( 'action', 'learnpress_save-uploaded-user-avatar' ),\n\t\t\t\tdata: this.$( '.lp-avatar-crop-image' ).serializeJSON(),\n\t\t\t\ttype: 'post',\n\t\t\t\tsuccess( response ) {\n\t\t\t\t\tresponse = LP.parseJSON( response );\n\t\t\t\t\tif ( ! response.success ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tself.$( '.lp-avatar-crop-image' ).remove();\n\n\t\t\t\t\t$( '.lp-user-profile-avatar' ).html( response.avatar );\n\n\t\t\t\t\tself.$().attr( 'data-custom', 'yes' );\n\t\t\t\t\tself.$( '.profile-picture' ).toggleClass( 'profile-avatar-current' ).filter( '.profile-avatar-current' ).html( response.avatar );\n\t\t\t\t},\n\t\t\t} );\n\t\t},\n\t\t$( selector ) {\n\t\t\treturn selector ? $( this.$el ).find( selector ) : $( this.$el );\n\t\t},\n\t\t_removePhoto( e ) {\n\t\t\te.preventDefault();\n\n\t\t\t// eslint-disable-next-line no-alert\n\t\t\tif ( ! confirm( 'Are you sure?' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst el = this;\n\n\t\t\t$.ajax( {\n\t\t\t\turl: ( typeof lpGlobalSettings !== 'undefined' ? lpGlobalSettings.ajax : '' ).addQueryVar( 'action', 'learnpress_remove-avatar' ),\n\t\t\t\tdata: {},\n\t\t\t\ttype: 'post',\n\t\t\t\tsuccess( response ) {\n\t\t\t\t\tel.$().removeAttr( 'data-custom' );\n\t\t\t\t\tel.$( '.profile-picture' ).toggleClass( 'profile-avatar-current' );\n\t\t\t\t\tel.$( '#submit' ).prop( 'disabled', false );\n\n\t\t\t\t\t$( '.lp-user-profile-avatar' ).html( el.$( '.profile-avatar-current' ).find( 'img' ).clone() );\n\t\t\t\t},\n\t\t\t} );\n\t\t},\n\t\t_upload( e ) {\n\t\t\te.preventDefault();\n\t\t},\n\t\t_cancel( e ) {\n\t\t\te.preventDefault();\n\t\t\tthis.$crop && this.$crop.remove();\n\t\t\tthis.$( '.lp-avatar-preview' ).removeClass( 'croping' );\n\t\t},\n\t\tfilesAdded( up, files ) {\n\t\t\tconst that = this;\n\t\t\tup.files.splice( 0, up.files.length - 1 );\n\t\t\tthat.$( '.lp-avatar-preview' ).addClass( 'uploading' );\n\t\t\tthat.$( '.lp-avatar-upload-progress-value' ).width( 0 );\n\t\t\tthat.uploader.start();\n\t\t},\n\t\tuploadProgress( up, file ) {\n\t\t\tthis.$( '.lp-avatar-upload-progress-value' ).css( 'width', file.percent + '%' );\n\t\t},\n\t\tuploadError( up, err ) {\n\t\t\tthis.$( '.lp-avatar-preview' ).addClass( 'upload-error' ).removeClass( 'uploading' );\n\t\t\tthis.$( '.lp-avatar-upload-error' ).html( err );\n\t\t},\n\t\tfileUploaded( up, file, info ) {\n\t\t\tthis.$( '.lp-avatar-preview' ).removeClass( 'upload-error' ).removeClass( 'uploading' );\n\t\t\tconst that = this,\n\t\t\t\tresponse = LP.parseJSON( info.response );\n\t\t\tif ( response.url ) {\n\t\t\t\tthis.avatar = response.url;\n\t\t\t\t$( '<img/>' )\n\t\t\t\t\t.attr( 'src', response.url )\n\t\t\t\t\t.on( 'load', function() {\n\t\t\t\t\t\tthat.model.set( $.extend( response, {\n\t\t\t\t\t\t\twidth: this.width,\n\t\t\t\t\t\t\theight: this.height,\n\t\t\t\t\t\t} ) );\n\t\t\t\t\t\tthat.crop();\n\t\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\tcrop() {\n\t\t\tthis.model.set( 'r', Math.random() );\n\t\t\tnew UserProfile.Crop( this );\n\t\t\tthis.$( '#submit' ).prop( 'disabled', false );\n\t\t},\n\t\t_getUploader() {\n\t\t\tif ( this.uploader ) {\n\t\t\t\treturn this.uploader;\n\t\t\t}\n\t\t\tthis.uploader = new plupload.Uploader( {\n\t\t\t\truntimes: 'html5,flash,silverlight,html4',\n\t\t\t\tbrowse_button: 'lp-upload-photo',\n\t\t\t\tcontainer: $( '#lp-user-edit-avatar' ).get( 0 ),\n\t\t\t\turl: ( typeof lpGlobalSettings !== 'undefined' ? lpGlobalSettings.ajax : '' ).addQueryVar( 'action', 'learnpress_upload-user-avatar' ),\n\t\t\t\tfilters: {\n\t\t\t\t\tmax_file_size: '10mb',\n\t\t\t\t\tmime_types: [\n\t\t\t\t\t\t{ title: 'Image', extensions: 'png,jpg,bmp,gif' },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\tfile_data_name: 'lp-upload-avatar',\n\t\t\t\tinit: {\n\t\t\t\t\tPostInit() {\n\t\t\t\t\t},\n\t\t\t\t\tFilesAdded: this.filesAdded,\n\t\t\t\t\tUploadProgress: this.uploadProgress,\n\t\t\t\t\tFileUploaded: this.fileUploaded,\n\t\t\t\t\tError: this.uploadError,\n\t\t\t\t},\n\t\t\t} );\n\t\t\tthis.uploader.init();\n\t\t\treturn this.uploader;\n\t\t},\n\t} );\n\tUserProfile.Model = Backbone.Model.extend( {} );\n\tUserProfile.Crop = function( $view ) {\n\t\tconst self = this,\n\t\t\tdata = $view.model.toJSON(),\n\t\t\t$crop = $( LP.template( 'tmpl-crop-user-avatar' )( data ) );\n\t\t$crop.appendTo( $view.$( '#profile-avatar-uploader' ) );\n\n\t\t$view.$crop = $crop;\n\t\tlet $img = $crop.find( 'img' ),\n\t\t\twx = 0,\n\t\t\thx = 0,\n\t\t\tlx = 0,\n\t\t\ttx = 0,\n\t\t\tnw = 0,\n\t\t\tnh = 0,\n\t\t\tmaxWidth = 870;\n\t\tthis.initCrop = function() {\n\t\t\tconst r1 = data.viewWidth / data.viewHeight,\n\t\t\t\tr2 = data.width / data.height;\n\n\t\t\tif ( r1 >= r2 ) {\n\t\t\t\twx = data.viewWidth;\n\t\t\t\thx = data.height * data.viewWidth / data.width;\n\t\t\t\tlx = 0;\n\t\t\t\ttx = -( hx - data.viewHeight ) / 2;\n\t\t\t} else {\n\t\t\t\thx = data.viewHeight;\n\t\t\t\twx = data.width * data.viewHeight / data.height;\n\t\t\t\ttx = 0;\n\t\t\t\tlx = -( wx - data.viewWidth ) / 2;\n\t\t\t}\n\t\t\tnw = wx;\n\t\t\tnh = hx;\n\t\t\t$img.draggable( {\n\t\t\t\tdrag( e, ui ) {\n\t\t\t\t\tif ( ui.position.left > 0 ) {\n\t\t\t\t\t\tui.position.left = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif ( ui.position.top > 0 ) {\n\t\t\t\t\t\tui.position.top = 0;\n\t\t\t\t\t}\n\t\t\t\t\tconst xx = data.viewWidth - nw,\n\t\t\t\t\t\tyy = data.viewHeight - nh;\n\t\t\t\t\tif ( xx > ui.position.left ) {\n\t\t\t\t\t\tui.position.left = xx;\n\t\t\t\t\t}\n\t\t\t\t\tif ( yy > ui.position.top ) {\n\t\t\t\t\t\tui.position.top = yy;\n\t\t\t\t\t}\n\t\t\t\t\t$( document.body ).addClass( 'profile-dragging' );\n\t\t\t\t},\n\t\t\t\tstop( e, ui ) {\n\t\t\t\t\tlx = parseInt( $img.css( 'left' ) );\n\t\t\t\t\ttx = parseInt( $img.css( 'top' ) );\n\t\t\t\t\tdd = ( Math.abs( lx ) + data.viewWidth / 2 ) / nw;\n\t\t\t\t\tbb = ( Math.abs( tx ) + data.viewHeight / 2 ) / nh;\n\t\t\t\t\tself.update( {\n\t\t\t\t\t\twidth: nw,\n\t\t\t\t\t\theight: nh,\n\t\t\t\t\t\ttop: tx,\n\t\t\t\t\t\tleft: lx,\n\t\t\t\t\t} );\n\t\t\t\t\t$( document.body ).removeClass( 'profile-dragging' );\n\t\t\t\t},\n\t\t\t} );\n\t\t\tvar dd = ( Math.abs( lx ) + data.viewWidth / 2 ) / wx,\n\t\t\t\tbb = ( Math.abs( tx ) + data.viewHeight / 2 ) / hx;\n\t\t\t$crop.find( '.lp-zoom > div' ).slider( {\n\t\t\t\tcreate() {\n\t\t\t\t\tself.update( {\n\t\t\t\t\t\twidth: wx,\n\t\t\t\t\t\theight: hx,\n\t\t\t\t\t\ttop: tx,\n\t\t\t\t\t\tleft: lx,\n\t\t\t\t\t} );\n\t\t\t\t},\n\t\t\t\tslide( e, ui ) {\n\t\t\t\t\tnw = wx + ( ui.value / 100 ) * data.width * 2;\n\t\t\t\t\tnh = hx + ( ui.value / 100 ) * data.height * 2;\n\t\t\t\t\tlet nl = data.viewWidth / 2 - ( nw * dd ),\n\t\t\t\t\t\tnt = data.viewHeight / 2 - nh * bb;\n\n\t\t\t\t\tif ( nl > 0 ) {\n\t\t\t\t\t\tnl = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif ( nt > 0 ) {\n\t\t\t\t\t\tnt = 0;\n\t\t\t\t\t}\n\t\t\t\t\tconst xx = parseInt( data.viewWidth - nw ),\n\t\t\t\t\t\tyy = parseInt( data.viewHeight - nh );\n\n\t\t\t\t\tif ( xx > nl ) {\n\t\t\t\t\t\tnl = lx = xx;\n\t\t\t\t\t}\n\t\t\t\t\tif ( yy > nt ) {\n\t\t\t\t\t\tnt = tx = yy;\n\t\t\t\t\t}\n\t\t\t\t\tself.update( {\n\t\t\t\t\t\twidth: nw,\n\t\t\t\t\t\theight: nh,\n\t\t\t\t\t\ttop: nt,\n\t\t\t\t\t\tleft: nl,\n\t\t\t\t\t} );\n\t\t\t\t\t$( document.body ).addClass( 'profile-resizing' );\n\n\t\t\t\t\tconsole.log( ui.value, data );\n\t\t\t\t},\n\t\t\t\tstop() {\n\t\t\t\t\t$( document.body ).removeClass( 'profile-resizing' );\n\t\t\t\t},\n\t\t\t} );\n\t\t};\n\t\tthis.update = function( args ) {\n\t\t\t$img.css( {\n\t\t\t\twidth: args.width,\n\t\t\t\theight: args.height,\n\t\t\t\ttop: args.top,\n\t\t\t\tleft: args.left,\n\t\t\t} );\n\t\t\tconst r = args.width / data.width,\n\t\t\t\tleft = parseInt( Math.abs( args.left / r ) ),\n\t\t\t\ttop = parseInt( Math.abs( args.top / r ) ),\n\t\t\t\tright = left + parseInt( data.viewWidth / r ),\n\t\t\t\tbottom = top + parseInt( data.viewHeight / r );\n\t\t\tconst cropData = $.extend( args, {\n\t\t\t\twidth: data.viewWidth,\n\t\t\t\theight: data.viewHeight,\n\t\t\t\tr,\n\t\t\t\tpoints: [ left, top, right, bottom ].join( ',' ),\n\t\t\t} );\n\t\t\t$crop.find( 'input[name^=\"lp-user-avatar-crop\"]' ).each( function() {\n\t\t\t\tconst $input = $( this ),\n\t\t\t\t\tname = $input.data( 'name' );\n\n\t\t\t\tif ( name != 'name' && cropData[ name ] !== undefined ) {\n\t\t\t\t\t$input.val( cropData[ name ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t};\n\t\tthis.initCrop();\n\t};\n\n\t$( document ).on( 'submit', '#learn-press-form-login', function( e ) {\n\t\tconst $form = $( this ),\n\t\t\tdata = $form.serialize();\n\t\t$form.find( '.learn-press-error, .learn-press-notice, .learn-press-message' ).fadeOut();\n\t\t$form.find( 'input' ).attr( 'disabled', true );\n\n\t\tLP.doAjax( {\n\t\t\tdata: {\n\t\t\t\t'lp-ajax': 'login',\n\t\t\t\tdata,\n\t\t\t},\n\t\t\tsuccess( response, raw ) {\n\t\t\t\tLP.showMessages( response.message, $form, 'LOGIN_ERROR' );\n\t\t\t\tif ( response.result == 'error' ) {\n\t\t\t\t\t$form.find( 'input' ).attr( 'disabled', false );\n\t\t\t\t\t$( '#learn-press-form-login input[type=\"text\"]' ).trigger( 'focus' );\n\t\t\t\t}\n\t\t\t\tif ( response.redirect ) {\n\t\t\t\t\tLP.reload( response.redirect );\n\t\t\t\t}\n\t\t\t},\n\t\t\terror() {\n\t\t\t\tLP.showMessages( '', $form, 'LOGIN_ERROR' );\n\t\t\t\t$form.find( 'input' ).attr( 'disabled', false );\n\t\t\t\t$( '#learn-press-form-login input[type=\"text\"]' ).trigger( 'focus' );\n\t\t\t},\n\t\t} );\n\n\t\treturn false;\n\t} );\n\n\t$( document ).on( 'click', '.table-orders .cancel-order', function( e ) {\n\t\te.preventDefault();\n\t\tconst _this = $( this ),\n\t\t\t_href = _this.attr( 'href' );\n\n\t\tLP.alert( learn_press_js_localize.confirm_cancel_order, function( confirm ) {\n\t\t\tif ( confirm ) {\n\t\t\t\twindow.location.href = _href;\n\t\t\t}\n\t\t} );\n\n\t\treturn false;\n\t} );\n\n\t$( document ).ready( function() {\n\t\tlet $form = $( '#lp-user-profile-form form' ),\n\t\t\toldData = $form.serialize(),\n\t\t\ttimer = null,\n\t\t\t$passwordForm = $form.find( '#lp-profile-edit-password-form' );\n\n\t\tfunction _checkData() {\n\t\t\treturn $form.serialize() != oldData;\n\t\t}\n\n\t\tfunction _timerCallback() {\n\t\t\t$form.find( '#submit' ).prop( 'disabled', ! _checkData() );\n\t\t}\n\n\t\tif ( $passwordForm.length == 0 ) {\n\t\t\t$form.on( 'keyup change', 'input, textarea, select', function() {\n\t\t\t\ttimer && clearTimeout( timer );\n\t\t\t\ttimer = setTimeout( _timerCallback, 300 );\n\t\t\t} );\n\t\t} else {\n\t\t\t$passwordForm.on( 'change keyup', 'input', function( e ) {\n\t\t\t\tconst $target = $( e.target ),\n\t\t\t\t\ttargetName = $target.attr( 'name' ),\n\t\t\t\t\t$oldPass = $form.find( '#pass0' ),\n\t\t\t\t\t$newPass = $form.find( '#pass1' ),\n\t\t\t\t\t$confirmPass = $form.find( '#pass2' ),\n\t\t\t\t\tmatch = ! ( ( $newPass.val() || $confirmPass.val() ) && $newPass.val() != $confirmPass.val() );\n\t\t\t\t$form.find( '#lp-password-not-match' ).toggleClass( 'hide-if-js', match );\n\t\t\t\t$form.find( '#submit' ).prop( 'disabled', ! match || ! $oldPass.val() || ! $newPass.val() || ! $confirmPass.val() );\n\t\t\t} );\n\t\t}\n\n\t\tconst args = {};\n\t\tif ( typeof lpProfileUserSettings !== 'undefined' ) {\n\t\t\targs.viewWidth = parseInt( lpProfileUserSettings.avatar_size.width );\n\t\t\targs.viewHeight = parseInt( lpProfileUserSettings.avatar_size.height );\n\t\t}\n\n\t\tnew UserProfile( args );\n\n\t\tProfile.recoverOrder();\n\t} ).on( 'click', '.btn-load-more-courses', function( event ) {\n\t\tconst $button = $( this );\n\t\tlet paged = $button.data( 'paged' ) || 1;\n\t\tconst pages = $button.data( 'pages' ) || 1;\n\t\tconst container = $button.data( 'container' );\n\t\tconst $container = $( '#' + container );\n\t\tlet url = $button.data( 'url' );\n\n\t\tpaged++;\n\t\t$button.data( 'paged', paged ).prop( 'disabled', true ).removeClass( 'btn-ajax-off' ).addClass( 'btn-ajax-on' );\n\n\t\tif ( ! url ) {\n\t\t\tconst seg = window.location.href.split( '?' );\n\n\t\t\tif ( seg[ 0 ].match( /\\/([0-9]+)\\// ) ) {\n\t\t\t\turl = seg[ 0 ].replace( /\\/([0-9]+)\\//, paged );\n\t\t\t} else {\n\t\t\t\turl = seg[ 0 ] + paged;\n\t\t\t}\n\n\t\t\tif ( seg[ 1 ] ) {\n\t\t\t\turl += '?' + seg[ 1 ];\n\t\t\t}\n\t\t} else {\n\t\t\turl = url.addQueryVar( 'current_page', paged );\n\t\t}\n\n\t\t$.ajax( {\n\t\t\turl,\n\t\t\tdata: $button.data( 'args' ),\n\t\t\tsuccess( response ) {\n\t\t\t\t$container.append( $( response ).find( '#' + container ).children() );\n\n\t\t\t\tif ( paged >= pages ) {\n\t\t\t\t\t$button.remove();\n\t\t\t\t} else {\n\t\t\t\t\t$button.prop( 'disabled', false ).removeClass( 'btn-ajax-on' ).addClass( 'btn-ajax-off' );\n\t\t\t\t}\n\t\t\t},\n\t\t} );\n\t} );\n\n\tconst Profile = {\n\t\trecoverOrder( e ) {\n\t\t\tconst $wrap = $( '.order-recover' ),\n\t\t\t\t$buttonRecoverOrder = $wrap.find( '.button-recover-order' ),\n\t\t\t\t$input = $wrap.find( 'input[name=\"order-key\"]' );\n\n\t\t\tconst recoverOrder = () => {\n\t\t\t\t$wrap.find( '.learn-press-message' ).remove();\n\n\t\t\t\t$( '.profile-recover-order' ).find( '.learn-press-message' ).remove();\n\n\t\t\t\t$.post( {\n\t\t\t\t\turl: '',\n\t\t\t\t\tdata: $wrap.serializeJSON(),\n\t\t\t\t\tbeforeSend() {\n\t\t\t\t\t\t$buttonRecoverOrder.addClass( 'loading' ).attr( 'disabled', 'disabled' );\n\t\t\t\t\t},\n\t\t\t\t\tsuccess( response ) {\n\t\t\t\t\t\tresponse = LP.parseJSON( response );\n\n\t\t\t\t\t\tif ( response.message ) {\n\t\t\t\t\t\t\tconst $msg = $( '<div class=\"learn-press-message icon\"><i class=\"fa\"></i> ' + response.message + '</div>' );\n\n\t\t\t\t\t\t\tif ( response.result == 'error' ) {\n\t\t\t\t\t\t\t\t$msg.addClass( 'error' );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$wrap.before( $msg );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( response.redirect ) {\n\t\t\t\t\t\t\twindow.location.href = response.redirect;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$buttonRecoverOrder.removeClass( 'loading' ).removeAttr( 'disabled', '' );\n\t\t\t\t\t},\n\t\t\t\t\terror() {\n\t\t\t\t\t\t$buttonRecoverOrder.removeClass( 'loading' ).removeAttr( 'disabled', '' );\n\t\t\t\t\t},\n\t\t\t\t} );\n\t\t\t};\n\n\t\t\t$buttonRecoverOrder.on( 'click', recoverOrder );\n\t\t},\n\t};\n}( jQuery ) );\n", "<?php\n\n/**\n * Class LP_Admin_Ajax\n *\n * @author  ThimPress\n * @package LearnPress/Classes\n * @version 3.0.0\n */\n\n/**\n * Prevent loading this file directly\n */\ndefined( 'ABSPATH' ) || exit();\n\nif ( ! class_exists( 'LP_Admin_Ajax' ) ) {\n\n\t/**\n\t * Class LP_Admin_Ajax\n\t */\n\tclass LP_Admin_Ajax {\n\n\t\t/**\n\t\t * Add action ajax\n\t\t */\n\t\tpublic static function init() {\n\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$ajax_events = array(\n\t\t\t\t'create_page'            => false, // Use create new page on Settings\n\t\t\t\t// 'plugin_action'           => false,\n\t\t\t\t// 'modal_search_items'      => false,\n\t\t\t\t//'dismiss_notice'         => false,\n\t\t\t\t//'search_users'           => false,\n\t\t\t\t'load_chart'             => false,\n\t\t\t\t'search_course_category' => false,\n\t\t\t\t'custom_stats'           => false,\n\t\t\t\t//'ignore_setting_up'      => false,\n\t\t\t\t'get_page_permalink'     => false,\n\t\t\t\t//'dummy_image'            => false,\n\t\t\t\t// 'update_add_on_status'    => false,\n\t\t\t\t// 'plugin_install'          => false,\n\t\t\t\t//'bundle_activate_add_ons' => false,\n\t\t\t\t//'install_sample_data'     => false,\n\n\t\t\t\t// Remove Notice\n\t\t\t\t//'remove_notice_popup'    => false,\n\t\t\t\t// Update order status\n\t\t\t\t// 'update_order_status'     => false,\n\t\t\t\t'update_order_exports'   => false,\n\t\t\t);\n\n\t\t\tforeach ( $ajax_events as $ajax_event => $nopriv ) {\n\t\t\t\tadd_action( 'wp_ajax_learnpress_' . $ajax_event, array( __CLASS__, $ajax_event ) );\n\n\t\t\t\t// enable for non-logged in users\n\t\t\t\tif ( $nopriv ) {\n\t\t\t\t\tadd_action( 'wp_ajax_nopriv_learnpress_' . $ajax_event, array( __CLASS__, $ajax_event ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdo_action( 'learn-press/ajax/admin-load', __CLASS__ );\n\n\t\t\t$ajax_events = array(\n\t\t\t\t'search_items' => 'modal_search_items',\n\t\t\t\t'update-payment-order', // Update ordering of payments when user changing.\n\t\t\t\t'update-payment-status', // Enable type payment\n\t\t\t\t//'toggle_item_preview',\n\n\t\t\t\t// admin editor\n\t\t\t\t'admin_course_editor',\n\t\t\t\t'admin_quiz_editor',\n\t\t\t\t'admin_question_editor',\n\t\t\t\t// duplicator\n\t\t\t\t'duplicator', // Duplicate course, lesson, quiz, question.\n\n\t\t\t\t//'add_item_to_order',\n\t\t\t\t//'remove_order_item',\n\n\t\t\t\t'modal_search_items', // Used to search courses on LP Order\n\t\t\t\t'modal_search_users', // Used to search users on LP Order\n\t\t\t\t'add_items_to_order', // Used to add courses on LP Order\n\t\t\t\t'remove_items_from_order', // Used to remove items from LP Order\n\t\t\t\t'update_email_status', // Use for enable email on LP Settings\n\t\t\t\t//'create-pages',\n\t\t\t\t'search-authors', // Used to search username on input some page (list courses, lp orders, quizzes, questions... on the Backend\n\t\t\t\t'skip-notice-install',\n\t\t\t\t//'join_newsletter',\n\t\t\t\t//'dashboard-order-status',\n\t\t\t\t//'dashboard-plugin-status',\n\t\t\t\t//'dismiss-notice',\n\t\t\t\t//'sync-user-orders',\n\t\t\t\t//'sync-course-final-quiz',\n\t\t\t\t//'sync-remove-older-data',\n\t\t\t\t//'sync-calculate-course-results',\n\t\t\t\t//'create-question-type',\n\t\t\t\t// 'sync-user-courses',\n\t\t\t);\n\n\t\t\tforeach ( $ajax_events as $action => $callback ) {\n\t\t\t\tif ( is_numeric( $action ) ) {\n\t\t\t\t\t$action = $callback;\n\t\t\t\t}\n\n\t\t\t\t$actions = LP_Request::parse_action( $action );\n\t\t\t\t$method  = $actions['action'];\n\n\t\t\t\tif ( ! is_callable( $callback ) ) {\n\t\t\t\t\t$method   = preg_replace( '/-/', '_', $method );\n\t\t\t\t\t$callback = array( __CLASS__, $method );\n\t\t\t\t}\n\n\t\t\t\tLP_Request::register_ajax( $action, $callback );\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function sync_calculate_course_results() {\n\t\t\tif ( ! isset( $_REQUEST['sync'] ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$sync = LP_Helper::sanitize_params_submitted( $_REQUEST['sync'] );\n\n\t\t\tif ( empty( $sync ) ) {\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\t\t\t$api = LP_Repair_Database::instance();\n\n\t\t\tif ( $sync === 'get-users' ) {\n\t\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\t\"\n\t\t\t\t\tSELECT ID\n\t\t\t\t\tFROM {$wpdb->users}\n\t\t\t\t\tWHERE 1\n\t\t\t\t\",\n\t\t\t\t\t1\n\t\t\t\t);\n\n\t\t\t\t$users = $wpdb->get_col( $query );\n\n\t\t\t\tlearn_press_send_json( array( 'users' => $users ) );\n\t\t\t}\n\n\t\t\t$api->calculate_course_results( $sync );\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Sync orders for each course\n\t\t *\n\t\t * @since 3.1.0\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function sync_course_orders() {\n\t\t\tif ( empty( $_REQUEST['sync'] ) ) {\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\t\t\t$api  = LP_Repair_Database::instance();\n\t\t\t$sync = $_REQUEST['sync'];\n\n\t\t\tif ( $sync === 'get-courses' ) {\n\t\t\t\tlearn_press_send_json( array( 'courses' => $api->get_all_courses() ) );\n\t\t\t}\n\n\t\t\t$api->sync_course_orders( $sync );\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Sync orders for each user\n\t\t *\n\t\t * @since 3.1.0\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function sync_user_orders() {\n\t\t\tif ( empty( $_REQUEST['sync'] ) ) {\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\t\t\t$api  = LP_Repair_Database::instance();\n\t\t\t$sync = $_REQUEST['sync'];\n\n\t\t\tif ( $sync === 'get-users' ) {\n\t\t\t\t$query = $wpdb->prepare(\n\t\t\t\t\t\"\n\t\t\t\t\tSELECT ID\n\t\t\t\t\tFROM {$wpdb->users}\n\t\t\t\t\tWHERE 1\n\t\t\t\t\",\n\t\t\t\t\t1\n\t\t\t\t);\n\n\t\t\t\t$users = $wpdb->get_col( $query );\n\n\t\t\t\tlearn_press_send_json( array( 'users' => $users ) );\n\t\t\t}\n\n\t\t\t$api->sync_user_orders( $sync );\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Remap final quiz for each course\n\t\t *\n\t\t * @since 3.1.0\n\t\t */\n\t\tpublic static function sync_course_final_quiz() {\n\t\t\tif ( empty( $_REQUEST['sync'] ) ) {\n\t\t\t\tdie();\n\t\t\t}\n\n\t\t\tglobal $wpdb;\n\t\t\t$api  = LP_Repair_Database::instance();\n\t\t\t$sync = $_REQUEST['sync'];\n\n\t\t\tif ( $sync === 'get-courses' ) {\n\t\t\t\tlearn_press_send_json( array( 'courses' => $api->get_all_courses() ) );\n\t\t\t}\n\n\t\t\t$api->sync_course_final_quiz( $sync );\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\n\t\t\tdie();\n\t\t}\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @comment 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function sync_remove_older_data() {\n\t\t\t$api = LP_Repair_Database::instance();\n\t\t\t$api->remove_older_post_meta();\n\t\t\tlearn_press_send_json( array( 'result' => 'success' ) );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Get html of order status to display in WP Dashboad\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function dashboard_order_status() {\n\t\t\tlearn_press_admin_view( 'dashboard/order-status' );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function dashboard_plugin_status() {\n\t\t\t$dashboard   = new LP_Admin_Dashboard();\n\t\t\t$plugin_data = $dashboard->get_data();\n\t\t\tif ( ! $plugin_data || is_wp_error( $plugin_data ) ) {\n\t\t\t\tlearn_press_admin_view( 'dashboard/plugin-status/html-no-data' );\n\t\t\t} else {\n\t\t\t\tlearn_press_admin_view( 'dashboard/plugin-status/html-results', array( 'plugin_data' => $plugin_data ) );\n\t\t\t}\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Search user on some pages on the Backend\n\t\t */\n\t\tpublic static function search_authors() {\n\t\t\t$args  = array(\n\t\t\t\t'orderby'        => 'name',\n\t\t\t\t'order'          => 'ASC',\n\t\t\t\t'search'         => sprintf( '*%s*', esc_attr( LP_Request::get_string( 'term' ) ) ),\n\t\t\t\t'search_columns' => array( 'user_login', 'user_email' ),\n\t\t\t);\n\t\t\t$q     = new WP_User_Query( $args );\n\t\t\t$users = array();\n\n\t\t\t$results = $q->get_results();\n\n\t\t\tif ( $results ) {\n\t\t\t\tforeach ( $results as $result ) {\n\t\t\t\t\t$users[] = array(\n\t\t\t\t\t\t'id'   => $result->ID,\n\t\t\t\t\t\t'text' => learn_press_get_profile_display_name( $result->ID ),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t\techo json_encode(\n\t\t\t\tarray(\n\t\t\t\t\t'results' => $users,\n\t\t\t\t)\n\t\t\t);\n\t\t\tdie();\n\t\t}\n\n\t\t/**\n\t\t * Hide notice install\n\t\t */\n\t\tpublic static function skip_notice_install() {\n\t\t\tdelete_option( 'learn_press_install' );\n\t\t}\n\n\t\t/**\n\t\t * Handle ajax admin course editor.\n\t\t *\n\t\t * @since 3.0.0\n\t\t */\n\t\tpublic static function admin_course_editor() {\n\t\t\t$editor = LP_Admin_Editor::get_editor_course();\n\t\t\tself::admin_editor( $editor );\n\t\t}\n\n\t\t/**\n\t\t * Handle ajax admin question editor.\n\t\t *\n\t\t * @since 3.0.0\n\t\t */\n\t\tpublic static function admin_question_editor() {\n\t\t\t$editor = LP_Admin_Editor::get_editor_question();\n\t\t\tself::admin_editor( $editor );\n\t\t}\n\n\t\t/**\n\t\t * Handle ajax admin quiz editor.\n\t\t *\n\t\t * @since 3.0.0\n\t\t */\n\t\tpublic static function admin_quiz_editor() {\n\t\t\t$editor = LP_Admin_Editor::get_editor_quiz();\n\t\t\tself::admin_editor( $editor );\n\t\t}\n\n\t\t/**\n\t\t * @param LP_Admin_Editor $editor\n\t\t *\n\t\t * @since 3.0.2\n\t\t */\n\t\tpublic static function admin_editor( &$editor ) {\n\t\t\t$result = $editor->dispatch();\n\n\t\t\tif ( is_wp_error( $result ) ) {\n\t\t\t\tlearn_press_send_json_error( $result->get_error_message() );\n\t\t\t} elseif ( ! $result ) {\n\t\t\t\tlearn_press_send_json_error();\n\t\t\t}\n\n\t\t\tlearn_press_send_json_success( $result );\n\t\t}\n\n\t\t/**\n\t\t * Send data to join newsletter or dismiss.\n\t\t *\n\t\t * [\n\t\t *  This function has deprecated since 3.2.6 from this class.\n\t\t *  Please check class LP_Admin and hook learn-press/dismissed-notice-response for more details.\n\t\t *  Newsletter function be hooked to the hook above to send subscription when\n\t\t *  notice has already dismissed.\n\t\t * ]\n\t\t *\n\t\t * @deprecated\n\t\t *\n\t\t * @since 3.0.10\n\t\t * @editable tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function join_newsletter() {\n\t\t\t$context = LP_Request::get_string( 'context' );\n\t\t\tif ( ! $context || $context != 'newsletter' ) {\n\t\t\t\tupdate_option( 'learn-press-dismissed-newsletter-button', 1 );\n\t\t\t\tlearn_press_send_json_success( __( 'Dismissed!', 'learnpress' ) );\n\t\t\t}\n\t\t\t$user = learn_press_get_current_user();\n\t\t\tif ( ! $user || $user->get_email() == '' ) {\n\t\t\t\tlearn_press_send_json_error( __( 'Fail while joining newsletter! Please try again!', 'learnpress' ) );\n\t\t\t}\n\t\t\t$url      = 'https://thimpress.com/mailster/subscribe';\n\t\t\t$response = wp_remote_post(\n\t\t\t\t$url,\n\t\t\t\tarray(\n\t\t\t\t\t'method'      => 'POST',\n\t\t\t\t\t'timeout'     => 45,\n\t\t\t\t\t'redirection' => 5,\n\t\t\t\t\t'httpversion' => '1.0',\n\t\t\t\t\t'blocking'    => true,\n\t\t\t\t\t'headers'     => array(),\n\t\t\t\t\t'body'        => array(\n\t\t\t\t\t\t'_referer' => 'extern',\n\t\t\t\t\t\t'_nonce'   => '4b266caf7b',\n\t\t\t\t\t\t'formid'   => '19',\n\t\t\t\t\t\t'email'    => $user->get_email(),\n\t\t\t\t\t\t'website'  => site_url(),\n\t\t\t\t\t),\n\t\t\t\t\t'cookies'     => array(),\n\t\t\t\t)\n\t\t\t);\n\t\t\tif ( is_wp_error( $response ) ) {\n\t\t\t\t$error_message = $response->get_error_message();\n\t\t\t\tlearn_press_send_json_error( __( 'Something went wrong: ', 'learnpress' ) . $error_message );\n\t\t\t} else {\n\t\t\t\tupdate_option( 'learn-press-dismissed-newsletter-button', 1 );\n\t\t\t\tlearn_press_send_json_success( __( 'Thank you for subscribing! Please check and click the confirmation link from the email we\\'ve just sent to your mail box.', 'learnpress' ) );\n\t\t\t}\n\t\t}*/\n\n\t\t/**\n\t\t * Duplicate course, lesson, quiz, question.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function duplicator() {\n\t\t\t$post_id = intval( $_GET['id'] ?? 0 );\n\n\t\t\t// get post type\n\t\t\t$post_type = learn_press_get_post_type( $post_id );\n\n\t\t\tif ( ! $post_id ) {\n\t\t\t\tlearn_press_send_json_error( __( 'Ops! ID not found', 'learnpress' ) );\n\t\t\t} else {\n\n\t\t\t\t$new_item_id = '';\n\n\t\t\t\t$duplicate_args = apply_filters( 'learn-press/duplicate-post-args', array( 'post_status' => 'publish' ) );\n\n\t\t\t\tswitch ( $post_type ) {\n\t\t\t\t\tcase LP_COURSE_CPT:\n\t\t\t\t\t\t$curd        = new LP_Course_CURD();\n\t\t\t\t\t\t$new_item_id = $curd->duplicate(\n\t\t\t\t\t\t\t$post_id,\n\t\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t\t'exclude_meta' => array(\n\t\t\t\t\t\t\t\t\t'order-pending',\n\t\t\t\t\t\t\t\t\t'order-processing',\n\t\t\t\t\t\t\t\t\t'order-completed',\n\t\t\t\t\t\t\t\t\t'order-cancelled',\n\t\t\t\t\t\t\t\t\t'order-failed',\n\t\t\t\t\t\t\t\t\t'count_enrolled_users',\n\t\t\t\t\t\t\t\t\t'_lp_sample_data',\n\t\t\t\t\t\t\t\t\t'_lp_retake_count',\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase LP_LESSON_CPT:\n\t\t\t\t\t\t$curd        = new LP_Lesson_CURD();\n\t\t\t\t\t\t$new_item_id = $curd->duplicate( $post_id, $duplicate_args );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase LP_QUIZ_CPT:\n\t\t\t\t\t\t$curd        = new LP_Quiz_CURD();\n\t\t\t\t\t\t$new_item_id = $curd->duplicate( $post_id, $duplicate_args );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase LP_QUESTION_CPT:\n\t\t\t\t\t\t$curd        = new LP_Question_CURD();\n\t\t\t\t\t\t$new_item_id = $curd->duplicate( $post_id, $duplicate_args );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif ( is_wp_error( $new_item_id ) ) {\n\t\t\t\t\tlearn_press_send_json_error( __( 'Duplicate post fail, please try again', 'learnpress' ) );\n\t\t\t\t} else {\n\t\t\t\t\tlearn_press_send_json_success( admin_url( 'post.php?post=' . $new_item_id . '&action=edit' ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Update ordering of payments when user changing.\n\t\t *\n\t\t * @since 3.0.0\n\t\t * @use for sorting by type payment gateway\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function update_payment_order() {\n\t\t\t$payment_order = learn_press_get_request( 'order' );\n\t\t\tupdate_option( 'learn_press_payment_order', $payment_order );\n\t\t}\n\n\t\t/**\n\t\t * Enable type payment\n\t\t *\n\t\t * @since 3.0.0\n\t\t * @use for enable type payment gateway\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function update_payment_status() {\n\t\t\t$payment_id = learn_press_get_request( 'id' );\n\t\t\t$status     = LP_Request::get_string( 'status' );\n\t\t\t$payment    = LP_Gateways::instance()->get_gateway( $payment_id );\n\n\t\t\tif ( ! $payment ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$response[ $payment->id ] = $payment->enable( $status == 'yes' );\n\n\t\t\tlearn_press_send_json( $response );\n\t\t}\n\n\t\t/**\n\t\t * nable email on LP Settings\n\t\t *\n\t\t * @since 3.0.0\n\t\t * @note tungnnx checked has use\n\t\t */\n\t\tpublic static function update_email_status() {\n\n\t\t\t$email_id = LP_Request::get_string( 'id' );\n\t\t\t$status   = LP_Request::get_string( 'status' );\n\t\t\t$response = array();\n\n\t\t\tif ( $email_id ) {\n\n\t\t\t\t$email = LP_Emails::get_email( $email_id );\n\t\t\t\tif ( ! $email ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t$response[ $email->id ] = $email->enable( $status == 'yes' );\n\t\t\t} else {\n\t\t\t\t$emails = LP_Emails::instance()->emails;\n\t\t\t\tforeach ( $emails as $email ) {\n\t\t\t\t\t$response[ $email->id ] = $email->enable( $status == 'yes' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t}\n\n\t\t/**\n\t\t * Toggle lesson preview.\n\t\t */\n\t\t/*public static function toggle_item_preview() {\n\t\t\t$id = learn_press_get_request( 'item_id' );\n\t\t\tif ( in_array(\n\t\t\t\tget_post_type( $id ),\n\t\t\t\tapply_filters(\n\t\t\t\t\t'learn-press/reviewable-post-types',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'lp_lesson',\n\t\t\t\t\t\t'lp_quiz',\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t) && wp_verify_nonce( learn_press_get_request( 'nonce' ), 'learn-press-toggle-item-preview' )\n\t\t\t) {\n\t\t\t\t$previewable = learn_press_get_request( 'previewable' );\n\t\t\t\tif ( is_null( $previewable ) ) {\n\t\t\t\t\t$previewable = '0';\n\t\t\t\t}\n\t\t\t\tupdate_post_meta( $id, '_lp_preview', $previewable );\n\t\t\t}\n\t\t}*/\n\n\t\t/**\n\t\t * Search items by requesting params.\n\t\t */\n\t\tpublic static function modal_search_items() {\n\t\t\t$term       = LP_Helper::sanitize_params_submitted( $_POST['term'] ?? '' );\n\t\t\t$type       = LP_Helper::sanitize_params_submitted( $_POST['type'] ?? '' );\n\t\t\t$context    = LP_Helper::sanitize_params_submitted( $_POST['context'] ?? '' );\n\t\t\t$context_id = LP_Helper::sanitize_params_submitted( $_POST['context_id'] ?? '' );\n\t\t\t$paged      = LP_Helper::sanitize_params_submitted( $_POST['paged'] ?? '' );\n\t\t\t$exclude    = LP_Request::get( 'exclude' );\n\n\t\t\t$search = new LP_Modal_Search_Items( compact( 'term', 'type', 'context', 'context_id', 'paged', 'exclude' ) );\n\n\t\t\tlearn_press_send_json(\n\t\t\t\tarray(\n\t\t\t\t\t'html'  => $search->get_html_items(),\n\t\t\t\t\t'nav'   => $search->get_pagination(),\n\t\t\t\t\t'items' => $search->get_items(),\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Search items by requesting params.\n\t\t *\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function modal_search_users() {\n\t\t\t$term        = LP_Helper::sanitize_params_submitted( $_POST['term'] ?? '' );\n\t\t\t$type        = LP_Helper::sanitize_params_submitted( $_POST['type'] ?? '' );\n\t\t\t$context     = LP_Helper::sanitize_params_submitted( $_POST['context'] ?? '' );\n\t\t\t$context_id  = LP_Helper::sanitize_params_submitted( $_POST['context_id'] ?? '' );\n\t\t\t$paged       = LP_Helper::sanitize_params_submitted( $_POST['paged'] ?? '' );\n\t\t\t$multiple    = LP_Helper::sanitize_params_submitted( $_POST['multiple'] ?? '' ) == 'yes';\n\t\t\t$text_format = LP_Helper::sanitize_params_submitted( $_POST['text_format'] ?? '' );\n\t\t\t$exclude     = LP_Request::get( 'exclude' );\n\n\t\t\t$search = new LP_Modal_Search_Users( compact( 'term', 'type', 'context', 'context_id', 'paged', 'multiple', 'text_format', 'exclude' ) );\n\n\t\t\tlearn_press_send_json(\n\t\t\t\tarray(\n\t\t\t\t\t'html'  => $search->get_html_items(),\n\t\t\t\t\t'nav'   => $search->get_pagination(),\n\t\t\t\t\t'users' => $search->get_items(),\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Search course category.\n\t\t */\n\t\tpublic static function search_course_category() {\n\t\t\tglobal $wpdb;\n\t\t\t$sql   = 'SELECT `t`.`term_id` as `id`, '\n\t\t\t\t\t . ' `t`.`name` `text` '\n\t\t\t\t\t . \" FROM {$wpdb->terms} t \"\n\t\t\t\t\t . \"\t\tINNER JOIN {$wpdb->term_taxonomy} tt ON t.term_id = tt.term_id AND taxonomy='course_category' \"\n\t\t\t\t\t . ' WHERE `t`.`name` LIKE %s';\n\t\t\t$s     = '%' . filter_input( INPUT_GET, 'q' ) . '%';\n\t\t\t$query = $wpdb->prepare( $sql, $s );\n\t\t\t$items = $wpdb->get_results( $query );\n\t\t\t$data  = array( 'items' => $items );\n\t\t\techo json_encode( $data );\n\t\t\texit();\n\t\t}\n\n\t\t/**\n\t\t * Remove an item from lp order\n\t\t *\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function remove_items_from_order() {\n\t\t\t// ensure that user has permission\n\t\t\tif ( ! current_user_can( 'edit_lp_orders' ) ) {\n\t\t\t\tdie( __( 'Access denied', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// verify nonce\n\t\t\t$nonce = learn_press_get_request( 'remove_nonce' );\n\t\t\tif ( ! wp_verify_nonce( $nonce, 'remove_order_item' ) ) {\n\t\t\t\tdie( __( 'Check nonce failed', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// validate order\n\t\t\t$order_id = learn_press_get_request( 'order_id' );\n\t\t\tif ( ! is_numeric( $order_id ) || learn_press_get_post_type( $order_id ) != 'lp_order' ) {\n\t\t\t\tdie( __( 'Invalid order', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// validate item\n\t\t\t$items = learn_press_get_request( 'items' );\n\n\t\t\t$order = learn_press_get_order( $order_id );\n\n\t\t\tglobal $wpdb;\n\n\t\t\tforeach ( $items as $item_id ) {\n\t\t\t\t$order->remove_item( $item_id );\n\t\t\t}\n\n\t\t\t$order_data                  = learn_press_update_order_items( $order_id );\n\t\t\t$currency_symbol             = learn_press_get_currency_symbol( $order_data['currency'] );\n\t\t\t$order_data['subtotal_html'] = learn_press_format_price( $order_data['subtotal'], $currency_symbol );\n\t\t\t$order_data['total_html']    = learn_press_format_price( $order_data['total'], $currency_symbol );\n\t\t\t$order_items                 = $order->get_items();\n\t\t\tif ( $order_items ) {\n\t\t\t\t$html = '';\n\t\t\t\tforeach ( $order_items as $item ) {\n\t\t\t\t\tob_start();\n\t\t\t\t\tinclude learn_press_get_admin_view( 'meta-boxes/order/order-item.php' );\n\t\t\t\t\t$html .= ob_get_clean();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlearn_press_send_json(\n\t\t\t\tarray(\n\t\t\t\t\t'result'     => 'success',\n\t\t\t\t\t'item_html'  => $html,\n\t\t\t\t\t'order_data' => $order_data,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Add courses to order\n\t\t *\n\t\t * @note tungnx checked has use\n\t\t */\n\t\tpublic static function add_items_to_order() {\n\t\t\t// ensure that user has permission\n\t\t\tif ( ! current_user_can( 'edit_lp_orders' ) ) {\n\t\t\t\tdie( __( 'Permission denied', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// validate order\n\t\t\t$order_id = learn_press_get_request( 'order_id' );\n\t\t\tif ( ! is_numeric( $order_id ) || learn_press_get_post_type( $order_id ) != 'lp_order' ) {\n\t\t\t\tdie( __( 'Invalid order', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t// validate item\n\t\t\t$item_ids = learn_press_get_request( 'items' );\n\t\t\t$order    = learn_press_get_order( $order_id );\n\n\t\t\t$response = array(\n\t\t\t\t'result' => 'error',\n\t\t\t);\n\n\t\t\t$order_item_ids = $order->add_items( $item_ids );\n\n\t\t\tif ( $order_item_ids ) {\n\t\t\t\t$html        = '';\n\t\t\t\t$order_items = $order->get_items();\n\n\t\t\t\t$order_data                  = learn_press_update_order_items( $order_id );\n\t\t\t\t$currency_symbol             = learn_press_get_currency_symbol( $order_data['currency'] );\n\t\t\t\t$order_data['subtotal_html'] = learn_press_format_price( $order_data['subtotal'], $currency_symbol );\n\t\t\t\t$order_data['total_html']    = learn_press_format_price( $order_data['total'], $currency_symbol );\n\n\t\t\t\tif ( $order_items ) {\n\t\t\t\t\tforeach ( $order_items as $item ) {\n\n\t\t\t\t\t\tif ( ! in_array( $item['id'], $order_item_ids ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tob_start();\n\t\t\t\t\t\tinclude learn_press_get_admin_view( 'meta-boxes/order/order-item.php' );\n\t\t\t\t\t\t$html .= ob_get_clean();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$response = array(\n\t\t\t\t\t'result'     => 'success',\n\t\t\t\t\t'item_html'  => $html,\n\t\t\t\t\t'order_data' => $order_data,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlearn_press_send_json( $response );\n\t\t}\n\n\t\t/**\n\t\t * Get content send via payload and parse to json.\n\t\t *\n\t\t * @param mixed $params (Optional) List of keys want to get from payload.\n\t\t *\n\t\t * @return array|bool|mixed|object\n\t\t */\n\t\tpublic static function get_php_input( $params = '' ) {\n\t\t\tstatic $data = false;\n\t\t\tif ( false === $data ) {\n\t\t\t\ttry {\n\t\t\t\t\t$data = json_decode( file_get_contents( 'php://input' ), true );\n\t\t\t\t} catch ( Exception $exception ) {\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( $data && func_num_args() > 0 ) {\n\t\t\t\t$params = is_array( func_get_arg( 0 ) ) ? func_get_arg( 0 ) : func_get_args();\n\t\t\t\tif ( $params ) {\n\t\t\t\t\t$request = array();\n\t\t\t\t\tforeach ( $params as $key ) {\n\t\t\t\t\t\t$request[] = array_key_exists( $key, $data ) ? $data[ $key ] : false;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn $request;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $data;\n\t\t}\n\n\t\t/**\n\t\t * Parse request content into var.\n\t\t * Normally, parse and assign to $_POST or $_GET.\n\t\t *\n\t\t * @param $var\n\t\t */\n\t\tpublic static function parsePhpInput( &$var ) {\n\t\t\t$data = self::get_php_input();\n\n\t\t\tif ( $data ) {\n\t\t\t\tforeach ( $data as $k => $v ) {\n\t\t\t\t\t$var[ $k ] = $v;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic static function load_chart() {\n\t\t\tif ( ! class_exists( 'LP_Submenu_Statistics' ) ) {\n\t\t\t\t$statistic = include_once LP_PLUGIN_PATH . '/inc/admin/sub-menus/class-lp-submenu-statistics.php';\n\t\t\t} else {\n\t\t\t\t$statistic = new LP_Submenu_Statistics();\n\t\t\t}\n\t\t\t$statistic->load_chart();\n\t\t}\n\n\t\t/**\n\t\t * @param $query\n\t\t *\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function search_users() {\n\t\t\tif ( ! current_user_can( 'edit_lp_orders' ) ) {\n\t\t\t\tdie( - 1 );\n\t\t\t}\n\n\t\t\t$term = LP_Helper::sanitize_params_submitted( $_REQUEST['term'] );\n\n\t\t\tif ( empty( $term ) ) {\n\t\t\t\tdie( __FILE__ . '::' . __FUNCTION__ );\n\n\t\t\t}\n\n\t\t\t$found_customers = array();\n\n\t\t\tadd_action( 'pre_user_query', array( __CLASS__, 'json_search_customer_name' ) );\n\n\t\t\t$customers_query = new WP_User_Query(\n\t\t\t\tapply_filters(\n\t\t\t\t\t'learn_press_search_customers_query',\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'fields'         => 'all',\n\t\t\t\t\t\t'orderby'        => 'display_name',\n\t\t\t\t\t\t'search'         => '*' . $term . '*',\n\t\t\t\t\t\t'search_columns' => array( 'ID', 'user_login', 'user_email', 'user_nicename' ),\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tremove_action( 'pre_user_query', array( __CLASS__, 'json_search_customer_name' ) );\n\n\t\t\t$customers = $customers_query->get_results();\n\n\t\t\tif ( ! empty( $customers ) ) {\n\t\t\t\tforeach ( $customers as $customer ) {\n\t\t\t\t\t$found_customers[] = array(\n\t\t\t\t\t\t'label' => $customer->display_name . ' (#' . $customer->ID . ' &ndash; ' . sanitize_email( $customer->user_email ) . ')',\n\t\t\t\t\t\t'value' => $customer->ID,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo json_encode( $found_customers );\n\t\t\tdie();\n\t\t}*/\n\n\t\tpublic static function json_search_customer_name( $query ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$term = LP_Helper::sanitize_params_submitted( $_REQUEST['term'] );\n\t\t\tif ( method_exists( $wpdb, 'esc_like' ) ) {\n\t\t\t\t$term = $wpdb->esc_like( $term );\n\t\t\t} else {\n\t\t\t\t$term = like_escape( $term );\n\t\t\t}\n\n\t\t\t$query->query_from  .= \" INNER JOIN {$wpdb->usermeta} AS user_name ON {$wpdb->users}.ID = user_name.user_id AND ( user_name.meta_key = 'first_name' OR user_name.meta_key = 'last_name' ) \";\n\t\t\t$query->query_where .= $wpdb->prepare( ' OR user_name.meta_value LIKE %s ', '%' . $term . '%' );\n\t\t}\n\n\t\t/**\n\t\t * Dismiss notice\n\t\t *\n\t\t * @update 3.2.6\n\t\t * @editor tungnx\n\t\t * @comment 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function dismiss_notice() {\n\t\t\t$name    = learn_press_get_request( 'name' );\n\t\t\t$value   = learn_press_get_request( 'value' );\n\t\t\t$expired = learn_press_get_request( 'expired' );\n\n\t\t\t// LP_Admin_Notice::instance()->dismiss_notice_2( $name, $value, $expired );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/*\n\t\t * comment by tungnnx\n\t\t * @reason not uses - low security\n\t\t * @since 3.2.6.8\n\t\t */\n\t\t/*\n\t\tpublic static function plugin_action() {\n\t\t\t$url = learn_press_get_request( 'url' );\n\t\t\tob_start();\n\t\t\twp_remote_get( $url );\n\t\t\tob_get_clean();\n\t\t\techo wp_remote_get( admin_url( 'admin.php?page=learn-press-addons&tab=installed' ) );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * create new page on LP Settings\n\t\t *\n\t\t * @note tungnnx checked use\n\t\t */\n\t\tpublic static function create_page() {\n\t\t\t$response = array(\n\t\t\t\t'code'    => 0,\n\t\t\t\t'message' => '',\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * Check valid\n\t\t\t *\n\t\t\t * 1. Capability - user can edit pages (add\\edit\\delete)\n\t\t\t * 2. Check nonce return true\n\t\t\t * 3. param post page_name not empty\n\t\t\t *\n\t\t\t * @since  3.2.6.8\n\t\t\t * @author tungnx\n\t\t\t */\n\t\t\tif ( ! current_user_can( 'edit_pages' ) || empty( $_POST['page_name'] ) ) {\n\t\t\t\t$response['message'] = 'Request invalid';\n\t\t\t\tlearn_press_send_json( $response );\n\t\t\t}\n\n\t\t\t$page_name = LP_Helper::sanitize_params_submitted( $_POST['page_name'] );\n\n\t\t\tif ( $page_name ) {\n\t\t\t\t$page_id = LP_Helper::create_page( $page_name );\n\n\t\t\t\tif ( $page_id ) {\n\t\t\t\t\t$response['code']    = 1;\n\t\t\t\t\t$response['message'] = 'create page success';\n\t\t\t\t\t$response['page']    = get_post( $page_id );\n\t\t\t\t\t$html                = learn_press_pages_dropdown( '', '', array( 'echo' => false ) );\n\t\t\t\t\tpreg_match_all( '!value=\\\"([0-9]+)\\\"!', $html, $matches );\n\t\t\t\t\t$response['positions'] = $matches[1];\n\t\t\t\t\t$response['html']      = '<a href=\"' . get_edit_post_link( $page_id ) . '\" target=\"_blank\">' . __( 'Edit Page', 'learnpress' ) . '</a>&nbsp;';\n\t\t\t\t\t$response['html']     .= '<a href=\"' . get_permalink( $page_id ) . '\" target=\"_blank\">' . __( 'View Page', 'learnpress' ) . '</a>';\n\t\t\t\t} else {\n\t\t\t\t\t$response['error'] = __( 'Error! Page creation failed. Please try again.', 'learnpress' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$response['error'] = __( 'Empty page name!', 'learnpress' );\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t}\n\n\t\t/**\n\t\t * Create LP static pages\n\t\t *\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function create_pages() {\n\t\t\tcheck_admin_referer( 'create-pages' );\n\n\t\t\t$pages      = LP_Request::get_list_array( 'pages' );\n\t\t\t$pages      = array_fill_keys( $pages, '' );\n\t\t\t$all_pages  = learn_press_static_page_ids();\n\t\t\t$page_names = learn_press_static_pages();\n\n\t\t\tif ( empty( $pages ) ) {\n\t\t\t\t$pages = $all_pages;\n\t\t\t}\n\n\t\t\tforeach ( $pages as $id => $page_id ) {\n\t\t\t\tif ( ! empty( $all_pages[ $id ] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$page_id = LP_Helper::create_page( isset( $page_names[ $id ] ) ? $page_names[ $id ] : ucfirst( $id ), $id );\n\t\t\t}\n\n\t\t\tLP()->flush_rewrite_rules();\n\n\t\t\techo esc_html__( 'The required pages are successfully created.', 'learnpress' );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Install sample data or dismiss the notice depending on user's option\n\t\t */\n\t\t/*public static function install_sample_data() {\n\t\t\t$yes            = ! empty( $_REQUEST['yes'] ) ? $_REQUEST['yes'] : '';\n\t\t\t$response       = array( 'result' => 'fail' );\n\t\t\t$retry_button   = sprintf( '<a href=\"\" class=\"button yes\" data-action=\"yes\">%s</a>', __( 'Please try again.', 'learnpress' ) );\n\t\t\t$dismiss_button = sprintf( '<a href=\"\" class=\"button disabled no\" data-action=\"no\">%s</a>', __( 'Cancel', 'learnpress' ) );\n\t\t\t$buttons        = sprintf( '<p>%s %s</p>', $retry_button, $dismiss_button );\n\t\t\tif ( 'no' == $yes ) {\n\t\t\t\tset_transient( 'learn_press_install_sample_data', 'off', 12 * HOUR_IN_SECONDS );\n\t\t\t} else {\n\t\t\t\t$result = array( 'status' => 'activate' );// learn_press_install_and_active_add_on( 'learnpress-import-export' );\n\t\t\t\tif ( 'activate' == $result['status'] ) {\n\t\t\t\t\t// copy dummy-data.xml to import folder of the add-on\n\t\t\t\t\tlpie_mkdir( lpie_import_path() );\n\t\t\t\t\tif ( file_exists( lpie_import_path() ) ) {\n\t\t\t\t\t\t$import_source = LP_PLUGIN_PATH . '/dummy-data/dummy-data.xml';\n\t\t\t\t\t\t$file          = 'dummy-data-' . time() . '.xml';\n\t\t\t\t\t\t$copy          = lpie_import_path() . '/' . $file;\n\t\t\t\t\t\tcopy( $import_source, $copy );\n\t\t\t\t\t\tif ( file_exists( $copy ) ) {\n\t\t\t\t\t\t\t$url                 = admin_url( 'admin-ajax.php?page=learn_press_import_export&tab=import-course' );\n\t\t\t\t\t\t\t$postdata            = array(\n\t\t\t\t\t\t\t\t'step'        => 2,\n\t\t\t\t\t\t\t\t'action'      => 'learn_press_import',\n\t\t\t\t\t\t\t\t'import-file' => 'import/' . $file,\n\t\t\t\t\t\t\t\t'nonce'       => wp_create_nonce( 'lpie-import-file' ),\n\t\t\t\t\t\t\t\t'x'           => 1,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t$response['url']     = $url = $url . '&' . http_build_query( $postdata ) . \"\\n\";\n\t\t\t\t\t\t\t$response['result']  = 'success';\n\t\t\t\t\t\t\t$response['message'] = sprintf( '<p>%s <a href=\"edit.php?post_type=lp_course\">%s</a> </p>', __( 'Successfully import sample data.', 'learnpress' ), __( 'View courses', 'learnpress' ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( $response['result'] == 'fail' ) {\n\t\t\t\t\t\t$response['message'] = sprintf( '<p>%s</p>%s', __( 'Failed to import sample data. Please try again.', 'learnpress' ), $buttons );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$response['result']  = 'fail';\n\t\t\t\t\t$response['message'] = sprintf( '<p>%s</p>', __( 'Unknown error when installing/activating Import/Export add-on. Please try again!', 'learnpress' ) ) . $buttons;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Activate a bundle of add-ons, if an add-on is not installed then install it first\n\t\t *\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function bundle_activate_add_ons() {\n\t\t\tglobal $learn_press_add_ons;\n\t\t\tinclude_once ABSPATH . 'wp-admin/includes/plugin-install.php'; // for plugins_api..\n\t\t\t$response = array( 'addons' => array() );\n\n\t\t\tif ( ! current_user_can( 'activate_plugins' ) ) {\n\t\t\t\t$response['error'] = __( 'You do not have the permission to deactivate plugins on this site.', 'learnpress' );\n\t\t\t} else {\n\n\t\t\t\t$add_ons = $learn_press_add_ons['bundle_activate'];\n\n\t\t\t\tif ( $add_ons ) {\n\t\t\t\t\tforeach ( $add_ons as $slug ) {\n\t\t\t\t\t\t$response['addons'][ $slug ] = learn_press_install_and_active_add_on( $slug );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t}*/\n\n\t\t/**\n\t\t * Activate a bundle of add-ons, if an add-on is not installed then install it first\n\t\t *\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function bundle_activate_add_on() {\n\t\t\t$response = array();\n\t\t\tinclude_once ABSPATH . 'wp-admin/includes/plugin-install.php'; // for plugins_api..\n\t\t\tif ( ! current_user_can( 'activate_plugins' ) ) {\n\t\t\t\t$response['error'] = __( 'You do not have the permission to deactivate plugins on this site.', 'learnpress' );\n\t\t\t} else {\n\t\t\t\t$slug              = ! empty( $_REQUEST['plugin'] ) ? $_REQUEST['plugin'] : null;\n\t\t\t\t$response[ $slug ] = learn_press_install_and_active_add_on( $slug );\n\t\t\t}\n\t\t\tlearn_press_send_json( $response );\n\t\t}*/\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @reason not use\n\t\t * @deprecated 4.0.0.\n\t\t */\n\t\t/*\n\t\tpublic static function plugin_install() {\n\t\t\t$plugin_name = ! empty( $_REQUEST['plugin'] ) ? $_REQUEST['plugin'] : '';\n\t\t\t$response    = learn_press_install_add_on( $plugin_name );\n\t\t\tlearn_press_send_json( $response );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/*\n\t\t * @editor tungnx\n\t\t * @reason not use\n\t\t * @since 3.2.6.8\n\t\t */\n\t\t/*\n\t\tpublic static function update_add_on_status() {\n\t\t\t$plugin   = ! empty( $_REQUEST['plugin'] ) ? $_REQUEST['plugin'] : '';\n\t\t\t$t        = ! empty( $_REQUEST['t'] ) ? $_REQUEST['t'] : '';\n\t\t\t$response = array();\n\t\t\tif ( ! current_user_can( 'activate_plugins' ) ) {\n\t\t\t\t$response['error'] = __( 'You do not have the permission to deactivate plugins on this site.', 'learnpress' );\n\t\t\t}\n\t\t\tif ( $plugin && $t ) {\n\t\t\t\tif ( $t == 'activate' ) {\n\t\t\t\t\tactivate_plugin( $plugin, false, is_network_admin() );\n\t\t\t\t} else {\n\t\t\t\t\tdeactivate_plugins( $plugin, false, is_network_admin() );\n\t\t\t\t}\n\t\t\t\t$is_activate        = is_plugin_active( $plugin );\n\t\t\t\t$response['status'] = $is_activate ? 'activate' : 'deactivate';\n\n\t\t\t}\n\t\t\twp_send_json( $response );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Output the image to browser with text and params passed via $_GET\n\t\t */\n\t\t/*public static function dummy_image() {\n\t\t\t$text = LP_Helper::sanitize_params_submitted( $_REQUEST['text'] ?? '' );\n\t\t\tlearn_press_text_image( $text, $_GET );\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Get edit|view link of a page\n\t\t */\n\t\tpublic static function get_page_permalink() {\n\t\t\t$page_id = (int) $_REQUEST['page_id'] ?? 0;\n\t\t\t?>\n\n\t\t\t<a href=\"<?php echo get_edit_post_link( $page_id ); ?>\"\n\t\t\t   target=\"_blank\"><?php _e( 'Edit Page', 'learnpress' ); ?></a>\n\t\t\t<a href=\"<?php echo get_permalink( $page_id ); ?>\"\n\t\t\t   target=\"_blank\"><?php _e( 'View Page', 'learnpress' ); ?></a>\n\n\t\t\t<?php\n\t\t\tdie();\n\t\t}\n\n\t\t/**\n\t\t * Get date from, to for static chart\n\t\t */\n\t\tpublic static function custom_stats() {\n\t\t\t$from      = LP_Helper::sanitize_params_submitted( $_REQUEST['from'] ?? 0 );\n\t\t\t$to        = LP_Helper::sanitize_params_submitted( $_REQUEST['to'] ?? 0 );\n\t\t\t$date_diff = strtotime( $to ) - strtotime( $from );\n\t\t\tif ( $date_diff <= 0 || $from == 0 || $to == 0 ) {\n\t\t\t\tdie();\n\t\t\t}\n\t\t\tlearn_press_process_chart( learn_press_get_chart_students( $to, 'days', floor( $date_diff / ( 60 * 60 * 24 ) ) + 1 ) );\n\t\t\tdie();\n\t\t}\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function ignore_setting_up() {\n\t\t\tupdate_option( '_lpr_ignore_setting_up', 1, true );\n\t\t\tdie;\n\t\t}*/\n\n\t\t/**\n\t\t * @editor tungnx\n\t\t * @model 4.1.4 comment - not use\n\t\t */\n\t\t/*public static function remove_notice_popup() {\n\t\t\tif ( isset( $_POST['action'] ) && $_POST['action'] === 'learnpress_remove_notice_popup' && isset( $_POST['slug'] ) && ! empty( $_POST['slug'] ) && isset( $_POST['user'] ) && ! empty( $_POST['user'] ) ) {\n\t\t\t\t$slug = 'learnpress_notice_' . $_POST['slug'] . '_' . $_POST['user'];\n\t\t\t\tset_transient( $slug, true, 30 * DAY_IN_SECONDS );\n\t\t\t}\n\n\t\t\twp_die();\n\t\t}*/\n\n\t\t/*\n\t\tpublic static function update_order_status() {\n\n\t\t\t$order_id = learn_press_get_request( 'order_id' );\n\t\t\t$value    = learn_press_get_request( 'value' );\n\n\t\t\t$order = array(\n\t\t\t\t'ID'          => $order_id,\n\t\t\t\t'post_status' => $value,\n\t\t\t);\n\n\t\t\twp_update_post( $order ) ? $response['success'] = true : $response['success'] = false;\n\n\t\t\tlearn_press_send_json( $response );\n\n\t\t\tdie();\n\t\t}*/\n\n\t\t/**\n\t\t * Upload avatar of user\n\t\t *\n\t\t * @editor tungnx\n\t\t * @modify 4.1.4.2\n\t\t */\n\t\tpublic static function upload_user_avatar() {\n\t\t\t$user_id = get_current_user_id();\n\n\t\t\tif ( ! $user_id ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$file       = $_FILES['lp-upload-avatar'];\n\t\t\t$upload_dir = learn_press_user_profile_picture_upload_dir();\n\n\t\t\tadd_filter( 'upload_dir', array( __CLASS__, '_user_avatar_upload_dir' ), 10000 );\n\n\t\t\t$file_info_arr        = explode( '.', $file['name'] );\n\t\t\t$file_info_arr_length = count( $file_info_arr );\n\t\t\t$file_ext_index       = $file_info_arr_length - 1;\n\t\t\t$file_ext             = $file_info_arr[ $file_ext_index ];\n\t\t\t$file['name']         = $user_id . '.' . $file_ext;\n\n\t\t\t// Delete old image if exists\n\t\t\t$path_img = get_user_meta( $user_id, '_lp_profile_picture', true );\n\t\t\tif ( $path_img ) {\n\t\t\t\t$path = $upload_dir['basedir'] . '/' . $path_img;\n\t\t\t\tif ( file_exists( $path ) ) {\n\t\t\t\t\t@unlink( $path );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$result = wp_handle_upload(\n\t\t\t\t$file,\n\t\t\t\tarray(\n\t\t\t\t\t'test_form' => false,\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tremove_filter( 'upload_dir', array( __CLASS__, '_user_avatar_upload_dir' ), 10000 );\n\t\t\tif ( is_array( $result ) ) {\n\t\t\t\t$result['name'] = $upload_dir['subdir'] . '/' . basename( $result['file'] );\n\t\t\t\tupdate_user_meta( $user_id, '_lp_profile_picture', $result['name'] );\n\t\t\t\tunset( $result['file'] );\n\t\t\t} else {\n\t\t\t\t$result = array(\n\t\t\t\t\t'error' => __( 'Profile picture upload failed', 'learnpress' ),\n\t\t\t\t);\n\t\t\t}\n\t\t\tlearn_press_send_json( $result );\n\t\t}\n\n\t\t/**\n\t\t * Crop avatar of user\n\t\t *\n\t\t * @editor tungnx\n\t\t * @return void\n\t\t */\n\t\tpublic static function save_uploaded_user_avatar() {\n\t\t\t$avatar_data = wp_parse_args(\n\t\t\t\tLP_Request::get( 'lp-user-avatar-crop' ),\n\t\t\t\tarray(\n\t\t\t\t\t'name'   => '',\n\t\t\t\t\t'width'  => '',\n\t\t\t\t\t'height' => '',\n\t\t\t\t\t'points' => '',\n\t\t\t\t\t'nonce'  => '',\n\t\t\t\t)\n\t\t\t);\n\n\t\t\t$current_user_id = get_current_user_id();\n\n\t\t\tif ( ! wp_verify_nonce( $avatar_data['nonce'], 'save-uploaded-profile-' . $current_user_id ) ) {\n\t\t\t\tdie( 'ERROR VERIFY NONCE!' );\n\t\t\t}\n\n\t\t\t$url = learn_press_update_user_profile_avatar();\n\t\t\tif ( $url ) {\n\t\t\t\tlearn_press_send_json(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'success' => true,\n\t\t\t\t\t\t'avatar'  => sprintf( '<img src=\"%s\" />', $url ),\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t};\n\n\t\t\twp_die();\n\t\t}\n\n\t\t/**\n\t\t * Remove avatar of user\n\t\t *\n\t\t * @author tungnx\n\t\t * @since 4.1.4.2\n\t\t * @version 1.0.0\n\t\t * @return void\n\t\t */\n\t\tpublic static function remove_avatar() {\n\t\t\t$response = new LP_REST_Response();\n\n\t\t\ttry {\n\t\t\t\t$user_id = get_current_user_id();\n\t\t\t\tif ( ! $user_id ) {\n\t\t\t\t\tthrow new Exception( __( 'User is invalid', 'learnpress' ) );\n\t\t\t\t}\n\n\t\t\t\t// Delete old image if exists\n\t\t\t\t$path_img = get_user_meta( $user_id, '_lp_profile_picture', true );\n\t\t\t\tif ( $path_img ) {\n\t\t\t\t\t$upload_dir = learn_press_user_profile_picture_upload_dir();\n\t\t\t\t\t$path       = $upload_dir['basedir'] . '/' . $path_img;\n\t\t\t\t\tif ( file_exists( $path ) ) {\n\t\t\t\t\t\tunlink( $path );\n\t\t\t\t\t\t$response->status = 'success';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch ( Throwable $e ) {\n\t\t\t\t$response->message = $e->getMessage();\n\t\t\t}\n\n\t\t\twp_send_json( $response );\n\t\t}\n\n\t\tpublic static function _user_avatar_upload_dir( $dir ) {\n\t\t\t$dir = learn_press_user_profile_picture_upload_dir();\n\n\t\t\treturn $dir;\n\t\t}\n\n\t\t/**\n\t\t * Export Order invoice to PDF\n\t\t *\n\t\t * @since 3.2.7.8\n\t\t * @author hungkv\n\t\t */\n\t\tpublic static function update_order_exports() {\n\t\t\t$order_id = absint( $_POST['order_id'] );\n\t\t\t//$site_title      = LP_Helper::sanitize_params_submitted( $_POST['site_title'] );\n\t\t\t//$order_date      = LP_Helper::sanitize_params_submitted( $_POST['order_date'] );\n\t\t\t//$invoice_no      = LP_Helper::sanitize_params_submitted( $_POST['invoice_no'] );\n\t\t\t//$order_customer  = LP_Helper::sanitize_params_submitted( $_POST['order_customer'] );\n\t\t\t//$order_email     = LP_Helper::sanitize_params_submitted( $_POST['order_email'] );\n\t\t\t//$order_payment   = LP_Helper::sanitize_params_submitted( $_POST['order_payment'] );\n\t\t\t$order           = learn_press_get_order( $order_id );\n\t\t\t$currency_symbol = learn_press_get_currency_symbol( $order->get_currency() );\n\n\t\t\tob_start();\n\t\t\tlearn_press_admin_view(\n\t\t\t\t'meta-boxes/order/content-tab-preview-exports-invoice.php',\n\t\t\t\tarray(\n\t\t\t\t\t'order'           => $order,\n\t\t\t\t\t'currency_symbol' => $currency_symbol,\n\t\t\t\t)\n\t\t\t);\n\t\t\t$html = ob_get_clean();\n\t\t\techo $html;\n\t\t\tdie();\n\t\t}\n\t}\n\n\tif ( defined( 'DOING_AJAX' ) ) {\n\t\tadd_action( 'wp_ajax_learnpress_upload-user-avatar', array( 'LP_Admin_Ajax', 'upload_user_avatar' ) );\n\t\tadd_action( 'wp_ajax_learnpress_save-uploaded-user-avatar', array( 'LP_Admin_Ajax', 'save_uploaded_user_avatar' ) );\n\t\tadd_action( 'wp_ajax_learnpress_remove-avatar', array( 'LP_Admin_Ajax', 'remove_avatar' ) );\n\t}\n\n\tadd_action( 'init', array( 'LP_Admin_Ajax', 'init' ) );\n}\n", "<?php\ndefined( 'ABSPATH' ) || exit;\n\nif ( ! class_exists( 'LP_AJAX' ) ) {\n\tclass LP_AJAX {\n\t\t/**\n\t\t * Init common ajax events\n\t\t */\n\t\tpublic static function init() {\n\t\t\t$ajax_events = array(\n\t\t\t\t'checkout-user-email-exists:nopriv',\n\t\t\t\t'recover-order',\n\t\t\t\t'request-become-a-teacher:nonce',\n\t\t\t\t// 'upload-user-avatar',\n\t\t\t\t'checkout:nopriv',\n\t\t\t\t'complete-lesson',\n\t\t\t\t'finish-course', // finish_course.\n\t\t\t\t// 'retake-course', // retake_course.\n\t\t\t\t'external-link:nopriv',\n\t\t\t\t// 'save-uploaded-user-avatar',\n\t\t\t\t'load-more-courses',\n\t\t\t);\n\n\t\t\t$ajax_events = apply_filters( 'learn-press/ajax/events', $ajax_events );\n\n\t\t\tforeach ( $ajax_events as $action => $callback ) {\n\n\t\t\t\tif ( is_numeric( $action ) ) {\n\t\t\t\t\t$action = $callback;\n\t\t\t\t}\n\n\t\t\t\t$actions = LP_Request::parse_action( $action );\n\t\t\t\t$method  = $actions['action'];\n\n\t\t\t\tif ( ! is_callable( $callback ) ) {\n\t\t\t\t\t$method   = preg_replace( '/-/', '_', $method );\n\t\t\t\t\t$callback = array( __CLASS__, $method );\n\t\t\t\t}\n\n\t\t\t\tLP_Request::register_ajax( $action, $callback );\n\t\t\t}\n\n\t\t\t//add_action( 'wp_ajax_learnpress_upload-user-avatar', array( __CLASS__, 'upload_user_avatar' ) );\n\t\t}\n\n\t\tpublic static function load_more_courses() {\n\t\t\t$type     = LP_Request::get( 'type' );\n\t\t\t$user_id  = LP_Request::get_int( 'user', 0 );\n\t\t\t$paged    = LP_Request::get_int( 'current_page', 1 );\n\t\t\t$template = LP_Request::get( 'template' );\n\n\t\t\t$user          = learn_press_get_user( $user_id );\n\t\t\t$template_args = array();\n\n\t\t\tif ( in_array( $type, array( 'featured', 'latest' ) ) ) {\n\t\t\t\t$query_args = array(\n\t\t\t\t\t'paginate' => true,\n\t\t\t\t\t'return'   => 'ids',\n\t\t\t\t\t'author'   => $user->get_id(),\n\t\t\t\t\t'paged'    => $paged,\n\t\t\t\t);\n\n\t\t\t\tif ( 'featured' === $type ) {\n\t\t\t\t\t$query_args['featured'] = 1;\n\t\t\t\t}\n\n\t\t\t\t$query         = new LP_Course_Query( $query_args );\n\t\t\t\t$template_args = (array) $query->get_courses();\n\t\t\t\t$template      = \"profile/dashboard/{$type}-courses\";\n\n\t\t\t} else {\n\t\t\t\t$profile       = LP_Profile::instance( $user_id );\n\t\t\t\t$filter_status = LP_Request::get_string( 'filter-status' );\n\t\t\t\t$query         = $profile->query_courses( 'purchased', array( 'status' => $filter_status ) );\n\t\t\t}\n\n\t\t\tlearn_press_get_template( $template, $template_args );\n\n\t\t\twp_die();\n\t\t}\n\n\t\tpublic static function external_link() {\n\t\t\t$nonce  = LP_Request::get( 'nonce' );\n\t\t\t$id     = LP_Request::get( 'id' );\n\t\t\t$course = learn_press_get_course( $id );\n\n\t\t\tif ( ! $course ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$link = $course->get_external_link();\n\n\t\t\tif ( ! wp_verify_nonce( $nonce, 'external-link-' . $link ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( apply_filters( 'learn-press/course-redirect-external-link', $id ) ) {\n\t\t\t\twp_redirect( $link );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\tpublic static function checkout() {\n\t\t\tLP()->checkout()->process_checkout_handler();\n\t\t}\n\n\t\tpublic static function request_become_a_teacher() {\n\t\t\tLP_Forms_Handler::process_become_teacher();\n\t\t}\n\n\t\tpublic static function recover_order() {\n\t\t\tif ( ! LP_Request::verify_nonce( 'recover-order' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$factory   = LP_Factory::get_order_factory();\n\t\t\t$user_id   = get_current_user_id();\n\t\t\t$order_key = LP_Request::get_string( 'order-key' );\n\t\t\t$order     = $factory->recover( $order_key, $user_id );\n\t\t\t$result    = array( 'result' => 'success' );\n\n\t\t\tif ( is_wp_error( $order ) ) {\n\t\t\t\t$result['message'] = $order->get_error_message();\n\t\t\t\t$result['result']  = 'error';\n\t\t\t} else {\n\t\t\t\t$result['message']  = sprintf(\n\t\t\t\t\t__( 'The order %s has been successfully recovered.', 'learnpress' ),\n\t\t\t\t\t$order_key\n\t\t\t\t);\n\t\t\t\t$result['redirect'] = $order->get_view_order_url();\n\t\t\t}\n\n\t\t\t$result = apply_filters( 'learn-press/order/recover-result', $result, $order_key, $user_id );\n\n\t\t\tlearn_press_maybe_send_json( $result );\n\n\t\t\tif ( ! empty( $result['message'] ) ) {\n\t\t\t\tlearn_press_add_message( $result['message'] );\n\t\t\t}\n\n\t\t\tif ( ! empty( $result['redirect'] ) ) {\n\t\t\t\twp_redirect( $result['redirect'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\tpublic static function checkout_user_email_exists() {\n\t\t\t$email    = LP_Request::get_email( 'email' );\n\t\t\t$response = array(\n\t\t\t\t'exists' => 0,\n\t\t\t);\n\n\t\t\tif ( email_exists( $email ) ) {\n\t\t\t\t$response['exists'] = $email;\n\t\t\t\t$output             = '<div class=\"lp-guest-checkout-output\">' . __(\n\t\t\t\t\t'Your email is already exists. Continue with this email?',\n\t\t\t\t\t'learnpress'\n\t\t\t\t) . '</div>';\n\t\t\t} else {\n\t\t\t\t$output = '<label class=\"lp-guest-checkout-output\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"checkout-email-option\" value=\"new-account\">\n\t\t\t\t' . __(\n\t\t\t\t\t'Create new account with this email? Account information will be sent to this email.',\n\t\t\t\t\t'learnpress'\n\t\t\t\t) . '\n\t\t\t\t</label>';\n\t\t\t}\n\n\t\t\t$response['output'] = apply_filters( 'learnpress/guest_checkout_email_exist_output', $output, $email );\n\n\t\t\tlearn_press_maybe_send_json( $response );\n\t\t}\n\n\t\t/*public static function upload_user_avatar() {\n\t\t\t$file       = $_FILES['lp-upload-avatar'];\n\t\t\t$upload_dir = learn_press_user_profile_picture_upload_dir();\n\n\t\t\tadd_filter( 'upload_dir', array( __CLASS__, '_user_avatar_upload_dir' ), 10000 );\n\n\t\t\t$result = wp_handle_upload(\n\t\t\t\t$file,\n\t\t\t\tarray(\n\t\t\t\t\t'test_form' => false,\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tremove_filter( 'upload_dir', array( __CLASS__, '_user_avatar_upload_dir' ), 10000 );\n\n\t\t\tif ( is_array( $result ) ) {\n\t\t\t\t$result['name'] = $upload_dir['subdir'] . '/' . basename( $result['file'] );\n\t\t\t\tunset( $result['file'] );\n\t\t\t} else {\n\t\t\t\t$result = array(\n\t\t\t\t\t'error' => __( 'Profile picture upload failed', 'learnpress' ),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlearn_press_send_json( $result );\n\t\t}*/\n\n\t\tpublic static function _user_avatar_upload_dir( $dir ) {\n\t\t\t$dir = learn_press_user_profile_picture_upload_dir();\n\n\t\t\treturn $dir;\n\t\t}\n\n\t\t/**\n\t\t * Request finish course\n\t\t *\n\t\t * TODO: should move this function to api - tungnx\n\t\t */\n\t\tpublic static function finish_course() {\n\t\t\t$nonce     = LP_Request::get_string( 'finish-course-nonce' );\n\t\t\t$course_id = LP_Request::get_int( 'course-id' );\n\t\t\t$course    = learn_press_get_course( $course_id );\n\t\t\t$user      = learn_press_get_current_user();\n\n\t\t\t$nonce_action = sprintf( 'finish-course-%d-%d', $course_id, $user->get_id() );\n\n\t\t\tif ( ! $user->get_id() || ! $course || ! wp_verify_nonce( $nonce, $nonce_action ) ) {\n\t\t\t\twp_die( __( 'Access denied!', 'learnpress' ) );\n\t\t\t}\n\n\t\t\t$finished    = $user->finish_course( $course_id );\n\t\t\t$lp_redirect = LP_Settings::get_option( 'course_finish_redirect' );\n\t\t\t$redirect    = ! empty( $lp_redirect ) ? $lp_redirect : get_the_permalink( $course_id );\n\n\t\t\t$response = array(\n\t\t\t\t'redirect' => apply_filters(\n\t\t\t\t\t'learn-press/finish-course-redirect',\n\t\t\t\t\t$redirect,\n\t\t\t\t\t$course_id\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif ( $finished ) {\n\t\t\t\tlearn_press_update_user_item_meta( $finished, 'finishing_type', 'click' );\n\t\t\t\tlearn_press_add_message( sprintf( __( 'You have finished this course \"%s\"', 'learnpress' ), $course->get_title() ) );\n\t\t\t\t$response['result'] = 'success';\n\t\t\t} else {\n\t\t\t\tlearn_press_add_message( __( 'Error! You cannot finish this course. Please contact your administrator for more information.', 'learnpress' ) );\n\t\t\t\t$response['result'] = 'error';\n\t\t\t}\n\n\t\t\tlearn_press_maybe_send_json( $response );\n\n\t\t\tif ( ! empty( $response['redirect'] ) ) {\n\t\t\t\twp_redirect( $response['redirect'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Complete lesson\n\t\t */\n\t\tpublic static function complete_lesson() {\n\t\t\t$nonce     = LP_Request::get_string( 'complete-lesson-nonce' );\n\t\t\t$item_id   = LP_Request::get_int( 'id' );\n\t\t\t$course_id = LP_Request::get_int( 'course_id' );\n\n\t\t\t$post     = get_post( $item_id );\n\t\t\t$user     = learn_press_get_current_user();\n\t\t\t$course   = learn_press_get_course( $course_id );\n\t\t\t$response = array(\n\t\t\t\t'result'   => 'success',\n\t\t\t\t'redirect' => $course->get_item_link( $item_id ),\n\t\t\t);\n\n\t\t\t$item         = $course->get_item( $item_id );\n\t\t\t$nonce_action = $item->get_nonce_action( 'complete', $course_id, $user->get_id() );\n\t\t\ttry {\n\t\t\t\t// security check\n\t\t\t\tif ( ! $post || ( $post && ! wp_verify_nonce( $nonce, $nonce_action ) ) ) {\n\t\t\t\t\tthrow new Exception( __( 'Error! Invalid lesson or failed security check.', 'learnpress' ), 8000 );\n\t\t\t\t}\n\n\t\t\t\t$result = $user->complete_lesson( $item_id );\n\n\t\t\t\tif ( ! is_wp_error( $result ) ) {\n\t\t\t\t\tif ( $course->get_next_item() ) {\n\t\t\t\t\t\t$next                 = $course->get_next_item();\n\t\t\t\t\t\t$response['redirect'] = $course->get_item_link( $next );\n\t\t\t\t\t}\n\n\t\t\t\t\tlearn_press_add_message( sprintf( __( 'Congrats! You have completed \"%s\".', 'learnpress' ), $item->get_title() ) );\n\t\t\t\t} else {\n\t\t\t\t\tlearn_press_add_message( $result->get_error_message(), 'error' );\n\t\t\t\t}\n\n\t\t\t\t$response = apply_filters( 'learn-press/user-completed-lesson-result', $response, $item_id, $course_id, $user->get_id() );\n\t\t\t} catch ( Exception $ex ) {\n\t\t\t\tlearn_press_add_message( $ex->getMessage(), 'error' );\n\t\t\t}\n\n\t\t\tif ( learn_press_message_count( 'error' ) ) {\n\t\t\t\t$response['result'] = 'error';\n\t\t\t}\n\n\t\t\tlearn_press_maybe_send_json( $response );\n\n\t\t\tif ( ! empty( $response['redirect'] ) ) {\n\t\t\t\t// wp_cache_flush();\n\t\t\t\twp_redirect( $response['redirect'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Retake course action\n\t\t *\n\t\t * @TODO move this function to API\n\t\t */\n\t\t/*\n\t\tpublic static function retake_course() {\n\t\t\t$security  = LP_Request::get_string( 'retake-course-nonce' );\n\t\t\t$course_id = LP_Request::get_int( 'retake-course' );\n\t\t\t$user      = learn_press_get_current_user();\n\t\t\t$course    = learn_press_get_course( $course_id );\n\t\t\t$response  = array(\n\t\t\t\t'result' => 'error',\n\t\t\t);\n\n\t\t\t$security_action = sprintf( 'retake-course-%d-%d', $course->get_id(), $user->get_id() );\n\t\t\t// security check\n\t\t\tif ( ! wp_verify_nonce( $security, $security_action ) ) {\n\t\t\t\tlearn_press_add_message( __( 'Error! Invalid course or failed security check.', 'learnpress' ),\n\t\t\t\t\t'error' );\n\t\t\t} else {\n\t\t\t\tif ( $user->can_retake_course( $course_id ) ) {\n\t\t\t\t\t$result = $user->retry_course( $course_id );\n\n\t\t\t\t\tif ( ! $result ) {\n\t\t\t\t\t\tlearn_press_add_message( __( 'Error!', 'learnpress' ), 'error' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlearn_press_add_message( sprintf( __( 'You have retaken the course \"%s\"', 'learnpress' ),\n\t\t\t\t\t\t\t$course->get_title() ) );\n\t\t\t\t\t\t$response['result'] = 'success';\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlearn_press_add_message( __( 'Error! You can not retake the course', 'learnpress' ), 'error' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( learn_press_message_count( 'error' ) == 0 ) {\n\t\t\t\t$item = $course->get_item_at( 0 );\n\n\t\t\t\tif ( $item ) {\n\t\t\t\t\t$redirect = $course->get_item_link( $item );\n\t\t\t\t} else {\n\t\t\t\t\t$redirect = $course->get_permalink();\n\t\t\t\t}\n\t\t\t\t$response['redirect'] = apply_filters( 'learn-press/user-retake-course-redirect', $redirect );\n\t\t\t\t$response             = apply_filters( 'learn-press/user-retaken-course-result', $response, $course_id,\n\t\t\t\t\t$user->get_id() );\n\t\t\t} else {\n\t\t\t\t$response['redirect'] = $course->get_permalink();\n\t\t\t\t$response             = apply_filters( 'learn-press/user-retake-course-failed-result', $response,\n\t\t\t\t\t$course_id, $user->get_id() );\n\t\t\t}\n\n\t\t\tlearn_press_maybe_send_json( $response );\n\n\t\t\tif ( ! empty( $response['redirect'] ) ) {\n\t\t\t\twp_redirect( $response['redirect'] );\n\t\t\t\texit();\n\t\t\t}\n\t\t}*/\n\t}\n}\n\nLP_AJAX::init();\n", "<?php\n/**\n * Common functions to process actions about user\n *\n * @author  ThimPress\n * @package LearnPress/Functions/User\n * @version 1.0\n */\n\nfunction learn_press_get_user_profile_tabs() {\n\treturn LP_Profile::instance()->get_tabs();\n}\n\n/**\n * Delete user data by user ID\n *\n * @param int $user_id\n * @param int $course_id\n */\nfunction learn_press_delete_user_data( $user_id, $course_id = 0 ) {\n\tglobal $wpdb;\n\t// TODO: Should be deleted user's order and order data???\n\n\t$query_args = array( $user_id );\n\n\tif ( $course_id ) {\n\t\t$query_args[] = $course_id;\n\t}\n\n\t$query = $wpdb->prepare(\n\t\t\"\n        SELECT user_item_id\n        FROM {$wpdb->prefix}learnpress_user_items\n        WHERE user_id = %d\n        \" . ( $course_id ? ' AND item_id = %d' : '' ) . '\n    ',\n\t\t$query_args\n\t);\n\n\t// delete all courses user has enrolled\n\t$query = $wpdb->prepare(\n\t\t\"\n        DELETE FROM {$wpdb->prefix}learnpress_user_items\n        WHERE user_id = %d\n        \" . ( $course_id ? ' AND item_id = %d' : '' ) . '\n    ',\n\t\t$query_args\n\t);\n\n\t@$wpdb->query( $query );\n}\n\n/**\n * Get user_item_id field in table learnpress_user_items\n * with the user_id, item_id. If $course_id is not passed\n * then item_id is ID of a course. Otherwise, item_id is\n * ID of an item (like quiz/lesson).\n *\n * @param int $user_id\n * @param int $item_id\n * @param int $course_id\n *\n * @return bool\n * @editor tungnx\n * @reason this function only get cache, not handle get user_item_id\n */\nfunction learn_press_get_user_item_id( $user_id, $item_id, $course_id = 0 /* added 3.0.0 */ ) {\n\treturn false;\n}\n\n/**\n * Get current user ID\n *\n * @return int\n */\nfunction learn_press_get_current_user_id() {\n\t$user = learn_press_get_current_user();\n\n\treturn $user->get_id();\n}\n\n/**\n * Get the user by $user_id passed. If $user_id is NULL, get current user.\n * If current user is not logged in, return a GUEST user\n *\n * @param bool $create_temp - Optional. Create temp user if user is not logged in.\n *\n * @return bool|LP_User|LP_User_Guest\n * @editor tungnx\n * @modify 4.1.4\n * @version 1.0.1\n */\nfunction learn_press_get_current_user( $create_temp = true ) {\n\t$user_id = get_current_user_id();\n\n\tif ( $user_id ) {\n\t\treturn learn_press_get_user( $user_id );\n\t}\n\n\t// Return LP_User_Guest\n\treturn learn_press_get_user( 0 );\n}\n\nif ( ! function_exists( 'learn_press_get_user' ) ) {\n\t/**\n\t * Get user by ID. Return false if the user does not exists.\n\t *\n\t * @param int  $user_id\n\t * @param bool $current\n\t *\n\t * @return LP_User|mixed\n\t * Todo: check this function - tungnx\n\t */\n\tfunction learn_press_get_user( $user_id, $current = false, $force_new = false ) {\n\t\t$is_guest = false;\n\t\tif ( $user_id != LP()->session->guest_user_id ) {\n\t\t\tif ( $current && ! get_user_by( 'id', $user_id ) ) {\n\t\t\t\t$user_id = get_current_user_id();\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $user_id && isset( LP()->session ) ) {\n\t\t\tif ( ! LP()->session->guest_user_id ) {\n\t\t\t\tLP()->session->set_customer_session_cookie( 1 );\n\t\t\t\tLP()->session->guest_user_id = time();\n\t\t\t}\n\n\t\t\t$user_id  = LP()->session->guest_user_id;\n\t\t\t$is_guest = true;\n\t\t}\n\n\t\tif ( ! $user_id ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$user_id = '' . $user_id;\n\n\t\tif ( $force_new || ! array_key_exists( $user_id, LP_Global::$users ) ) {\n\t\t\t/**\n\t\t\t * LP Hook.\n\t\t\t *\n\t\t\t * Filter the default class name to get LP user.\n\t\t\t *\n\t\t\t * @since 3.3.0\n\t\t\t */\n\t\t\t$userClass = apply_filters( 'learn-press/user-class', $is_guest ? 'LP_User_Guest' : 'LP_User', $is_guest );\n\n\t\t\tLP_Global::$users[ $user_id ] = new $userClass( $user_id );\n\n\t\t\tdo_action( 'learn-press/get-user', LP_Global::$users[ $user_id ], $user_id );\n\t\t}\n\n\t\treturn LP_Global::$users[ $user_id ];\n\t}\n}\n\n/**\n * Add more 2 user roles teacher and student\n */\nfunction learn_press_add_user_roles() {\n\n\t$settings = LP()->settings;\n\n\t/* translators: user role */\n\t_x( 'LP Instructor', 'User role' );\n\n\tadd_role(\n\t\tLP_TEACHER_ROLE,\n\t\t'LP Instructor',\n\t\tarray()\n\t);\n\n\t$course_cap = LP_COURSE_CPT . 's';\n\t$lesson_cap = LP_LESSON_CPT . 's';\n\t$order_cap  = LP_ORDER_CPT . 's';\n\n\t$teacher = get_role( LP_TEACHER_ROLE );\n\tif ( $teacher ) {\n\t\t$teacher->add_cap( 'read_private_' . $course_cap );\n\t\t$teacher->add_cap( 'delete_published_' . $course_cap );\n\t\t$teacher->add_cap( 'edit_published_' . $course_cap );\n\t\t$teacher->add_cap( 'edit_' . $course_cap );\n\t\t$teacher->add_cap( 'delete_' . $course_cap );\n\t\t$teacher->add_cap( 'unfiltered_html' );\n\n\t\t$settings->get( 'required_review' );\n\n\t\tif ( $settings->get( 'required_review' ) == 'yes' ) {\n\t\t\t$teacher->remove_cap( 'publish_' . $course_cap );\n\t\t} else {\n\t\t\t$teacher->add_cap( 'publish_' . $course_cap );\n\t\t}\n\n\t\t$teacher->add_cap( 'read_private_' . $lesson_cap );\n\t\t$teacher->add_cap( 'delete_published_' . $lesson_cap );\n\t\t$teacher->add_cap( 'edit_published_' . $lesson_cap );\n\t\t$teacher->add_cap( 'edit_' . $lesson_cap );\n\t\t$teacher->add_cap( 'delete_' . $lesson_cap );\n\t\t$teacher->add_cap( 'publish_' . $lesson_cap );\n\t\t$teacher->add_cap( 'upload_files' );\n\t\t$teacher->add_cap( 'read' );\n\t\t$teacher->add_cap( 'edit_posts' );\n\t}\n\n\t// administrator\n\t$admin = get_role( 'administrator' );\n\tif ( $admin ) {\n\t\t$admin->add_cap( 'read_private_' . $course_cap );\n\t\t$admin->add_cap( 'delete_' . $course_cap );\n\t\t$admin->add_cap( 'delete_published_' . $course_cap );\n\t\t$admin->add_cap( 'edit_' . $course_cap );\n\t\t$admin->add_cap( 'edit_published_' . $course_cap );\n\t\t$admin->add_cap( 'publish_' . $course_cap );\n\t\t$admin->add_cap( 'delete_private_' . $course_cap );\n\t\t$admin->add_cap( 'edit_private_' . $course_cap );\n\t\t$admin->add_cap( 'delete_others_' . $course_cap );\n\t\t$admin->add_cap( 'edit_others_' . $course_cap );\n\n\t\t$admin->add_cap( 'read_private_' . $lesson_cap );\n\t\t$admin->add_cap( 'delete_' . $lesson_cap );\n\t\t$admin->add_cap( 'delete_published_' . $lesson_cap );\n\t\t$admin->add_cap( 'edit_' . $lesson_cap );\n\t\t$admin->add_cap( 'edit_published_' . $lesson_cap );\n\t\t$admin->add_cap( 'publish_' . $lesson_cap );\n\t\t$admin->add_cap( 'delete_private_' . $lesson_cap );\n\t\t$admin->add_cap( 'edit_private_' . $lesson_cap );\n\t\t$admin->add_cap( 'delete_others_' . $lesson_cap );\n\t\t$admin->add_cap( 'edit_others_' . $lesson_cap );\n\n\t\t$admin->add_cap( 'delete_' . $order_cap );\n\t\t$admin->add_cap( 'delete_published_' . $order_cap );\n\t\t$admin->add_cap( 'edit_' . $order_cap );\n\t\t$admin->add_cap( 'edit_published_' . $order_cap );\n\t\t$admin->add_cap( 'publish_' . $order_cap );\n\t\t$admin->add_cap( 'delete_private_' . $order_cap );\n\t\t$admin->add_cap( 'edit_private_' . $order_cap );\n\t\t$admin->add_cap( 'delete_others_' . $order_cap );\n\t\t$admin->add_cap( 'edit_others_' . $order_cap );\n\t}\n}\n\nadd_action( 'init', 'learn_press_add_user_roles' );\n\n/**\n * @param null  $user_id\n * @param array $args\n *\n * @return mixed\n */\nfunction learn_press_get_user_questions( $user_id = null, $args = array() ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\treturn learn_press_get_user( $user_id )->get_questions( $args );\n}\n\n/**\n * Get the type of current user\n *\n * @param null $check_type\n *\n * @return bool|string\n */\nfunction learn_press_current_user_is( $check_type = null ) {\n\tglobal $current_user;\n\t$user_roles = $current_user->roles;\n\t$user_type  = '';\n\n\tif ( in_array( 'lpr_teacher', $user_roles ) ) {\n\t\t$user_type = 'instructor';\n\t} elseif ( in_array( 'lp_teacher', $user_roles ) ) {\n\t\t$user_type = 'instructor';\n\t} elseif ( in_array( 'administrator', $user_roles ) ) {\n\t\t$user_type = 'administrator';\n\t}\n\n\treturn $check_type ? $check_type == $user_type : $user_type;\n}\n\nfunction learn_press_user_has_roles( $roles, $user_id = null ) {\n\t$has_role = false;\n\tif ( ! $user_id ) {\n\t\t$user = wp_get_current_user();\n\t} else {\n\t\t$user = get_user_by( 'id', $user_id );\n\t}\n\t$available_roles = (array) $user->roles;\n\tif ( is_array( $roles ) ) {\n\t\tforeach ( $roles as $role ) {\n\t\t\tif ( in_array( $role, $available_roles ) ) {\n\t\t\t\t$has_role = true;\n\t\t\t\tbreak; // only need one of roles is in available\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif ( in_array( $roles, $available_roles ) ) {\n\t\t\t$has_role = true;\n\t\t}\n\t}\n\n\treturn $has_role;\n}\n\n/**\n * Add user profile link into admin bar\n */\nfunction learn_press_edit_admin_bar() {\n\tglobal $wp_admin_bar;\n\n\t$profile = learn_press_get_page_id( 'profile' );\n\n\tif ( $profile && learn_press_get_post_type( $profile ) == 'page' && get_post_status( $profile ) != 'trash' ) {\n\t\t$user_id = learn_press_get_current_user_id();\n\n\t\t$wp_admin_bar->add_menu(\n\t\t\tarray(\n\t\t\t\t'id'     => 'course_profile',\n\t\t\t\t'parent' => 'user-actions',\n\t\t\t\t'title'  => get_the_title( $profile ),\n\t\t\t\t'href'   => learn_press_user_profile_link( $user_id, false ),\n\t\t\t)\n\t\t);\n\t}\n\n\t$current_user = wp_get_current_user();\n\n\tif ( in_array( LP_TEACHER_ROLE, $current_user->roles ) || in_array( 'administrator', $current_user->roles ) ) {\n\t\treturn;\n\t}\n}\n\nadd_action( 'admin_bar_menu', 'learn_press_edit_admin_bar' );\n\nfunction learn_press_current_user_can_view_profile_section( $section, $user ) {\n\t$current_user = wp_get_current_user();\n\t$view         = true;\n\tif ( $user->get_data( 'user_login' ) != $current_user->user_login && $section == LP()->settings->get(\n\t\t'profile_endpoints.profile-orders',\n\t\t'profile-orders'\n\t) ) {\n\t\t$view = false;\n\t}\n\n\treturn apply_filters( 'learn_press_current_user_can_view_profile_section', $view, $section, $user );\n}\n\nfunction learn_press_profile_tab_courses_content( $current, $tab, $user ) {\n\tlearn_press_get_template(\n\t\t'profile/tabs/courses.php',\n\t\tarray(\n\t\t\t'user'    => $user,\n\t\t\t'current' => $current,\n\t\t\t'tab'     => $tab,\n\t\t)\n\t);\n}\n\nfunction learn_press_profile_tab_quizzes_content( $current, $tab, $user ) {\n\tlearn_press_get_template(\n\t\t'profile/tabs/quizzes.php',\n\t\tarray(\n\t\t\t'user'    => $user,\n\t\t\t'current' => $current,\n\t\t\t'tab'     => $tab,\n\t\t)\n\t);\n}\n\nfunction learn_press_profile_tab_orders_content( $current, $tab, $user ) {\n\tlearn_press_get_template(\n\t\t'profile/tabs/orders.php',\n\t\tarray(\n\t\t\t'user'    => $user,\n\t\t\t'current' => $current,\n\t\t\t'tab'     => $tab,\n\t\t)\n\t);\n}\n\n/**\n * Get queried user in profile link\n *\n * @return false|WP_User\n * @since 3.0.0\n */\nfunction learn_press_get_profile_user() {\n\treturn LP_Profile::get_queried_user();\n}\n\n\n/**\n * Add instructor registration button to register page and admin bar\n */\nfunction learn_press_user_become_teacher_registration_form() {\n\tif ( LP()->settings->get( 'instructor_registration' ) != 'yes' ) {\n\t\treturn;\n\t}\n\t?>\n\t<p>\n\t\t<label for=\"become_teacher\">\n\t\t\t<input type=\"checkbox\" name=\"become_teacher\" id=\"become_teacher\">\n\t\t\t<?php esc_html_e( 'Want to become an instructor?', 'learnpress' ); ?>\n\t\t</label>\n\t</p>\n\t<?php\n}\n\nadd_action( 'register_form', 'learn_press_user_become_teacher_registration_form' );\n\n/**\n * Update data into table learnpress_user_items.\n *\n * @param array $fields - Fields and values to be updated.\n *                                              Format: array(\n *                                              field_name_1 => value 1,\n *                                              field_name_2 => value 2,\n *                                              ....\n *                                              field_name_n => value n\n *                                              )\n * @param mixed $where - Optional. Fields with values for conditional update with the same format of $fields.\n * @param bool  $update_cache - Optional. Should be update to cache or not (since 3.0.0).\n * @param bool  $update_extra_fields_as_meta - Optional. Update extra fields as item meta (since 3.1.0).\n *\n * @return mixed\n */\nfunction learn_press_update_user_item_field( $fields, $where = false, $update_cache = true, $update_extra_fields_as_meta = false ) {\n\tglobal $wpdb;\n\n\t// Table fields\n\t$table_fields = array(\n\t\t'user_id'      => '%d',\n\t\t'item_id'      => '%d',\n\t\t'ref_id'       => '%d',\n\t\t'start_time'   => '%s',\n\t\t'end_time'     => '%s',\n\t\t'access_level' => '%d',\n\t\t'graduation'   => '%s',\n\t\t'item_type'    => '%s',\n\t\t'status'       => '%s',\n\t\t'ref_type'     => '%s',\n\t\t'parent_id'    => '%d',\n\t);\n\n\t/**\n\t * Validate item status\n\t */\n\tif ( ! empty( $fields['item_id'] ) && ! empty( $fields['status'] ) ) {\n\t\t$item_type = learn_press_get_post_type( $fields['item_id'] );\n\n\t\tif ( LP_COURSE_CPT === $item_type ) {\n\t\t\tif ( 'completed' === $fields['status'] ) {\n\t\t\t\t$fields['status'] = 'finished';\n\t\t\t}\n\t\t} else {\n\t\t\tif ( 'finished' === $fields['status'] ) {\n\t\t\t\t$fields['status'] = 'completed';\n\t\t\t}\n\t\t}\n\t}\n\n\t$data             = array();\n\t$data_format      = array();\n\t$date_time_fields = array(\n\t\t'start_time',\n\t\t'end_time',\n\t);\n\n\tforeach ( $fields as $field => $value ) {\n\t\tif ( ! empty( $table_fields[ $field ] ) ) {\n\t\t\t$data[ $field ] = $value;\n\n\t\t\t// Do not format the date-time field if it's value is NULL\n\t\t\tif ( in_array( $field, $date_time_fields ) && ! $value ) {\n\t\t\t\t$data[ $field ] = null;\n\t\t\t\t$data_format[]  = '';\n\t\t\t} else {\n\t\t\t\t$data_format[] = $table_fields[ $field ];\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! empty( $fields['user_item_id'] ) ) {\n\t\t$where = wp_parse_args(\n\t\t\t$where,\n\t\t\tarray( 'user_item_id' => $fields['user_item_id'] )\n\t\t);\n\t}\n\n\tif ( $where && empty( $where['user_id'] ) ) {\n\t\t$where['user_id'] = ! empty( $fields['user_id'] ) ? $fields['user_id'] : learn_press_get_current_user_id();\n\t}\n\n\t$where_format = array();\n\n\t// Build where and where format\n\tif ( $where ) {\n\t\tforeach ( $where as $field => $value ) {\n\t\t\tif ( ! empty( $table_fields[ $field ] ) ) {\n\t\t\t\t$where_format[] = $table_fields[ $field ];\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! $data ) {\n\t\treturn false;\n\t}\n\n\t$inserted = false;\n\t$updated  = false;\n\n\t// Ensure all fields are instance of LP_Datetime have to\n\t// convert to string of datetime.\n\tforeach ( $data as $k => $v ) {\n\t\tif ( $v instanceof LP_Datetime ) {\n\t\t\t$data[ $k ] = $v->toSql();\n\t\t}\n\t}\n\n\t// If $where is not empty consider we are updating\n\tif ( $where ) {\n\t\t$updated = $wpdb->update(\n\t\t\t$wpdb->learnpress_user_items,\n\t\t\t$data,\n\t\t\t$where,\n\t\t\t$data_format,\n\t\t\t$where_format\n\t\t);\n\t} else {\n\n\t\t// Otherwise, insert a new one\n\t\tif ( $wpdb->insert(\n\t\t\t$wpdb->learnpress_user_items,\n\t\t\t$data,\n\t\t\t$data_format\n\t\t)\n\t\t) {\n\t\t\t$inserted = $wpdb->insert_id;\n\t\t}\n\t}\n\n\tif ( $updated && ! empty( $where['user_item_id'] ) ) {\n\t\t$inserted = $where['user_item_id'];\n\t}\n\n\t/**\n\t * @var object|bool $updated_item\n\t */\n\t$updated_item = false;\n\n\t// Get the item we just have updated or inserted.\n\tif ( $inserted ) {\n\t\t$updated_item = learn_press_get_user_item( $inserted );\n\t} elseif ( $updated ) {\n\t\t$updated_item = learn_press_get_user_item( $where );\n\t}\n\n\t/**\n\t * If there is some fields does not contain in the main table\n\t * then consider update them as meta data.\n\t */\n\tif ( $updated_item && $update_extra_fields_as_meta ) {\n\t\t$extra_fields = array_diff_key( $fields, $table_fields );\n\t\tif ( $extra_fields ) {\n\t\t\tforeach ( $extra_fields as $meta_key => $meta_value ) {\n\t\t\t\tif ( $meta_value == 'user_item_id' ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( $meta_value === false ) {\n\t\t\t\t\tlearn_press_delete_user_item_meta( $updated_item->user_item_id, $meta_key );\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( empty( $meta_value ) ) {\n\t\t\t\t\t\t$meta_value = '';\n\t\t\t\t\t}\n\t\t\t\t\tlearn_press_update_user_item_meta( $updated_item->user_item_id, $meta_key, $meta_value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tdo_action( 'learn-press/updated-user-item-meta', $updated_item );\n\n\treturn $updated_item;\n}\n\n/**\n * Get user item row(s) from user items table by multiple WHERE conditional\n *\n * @param array|int $where\n * @param bool      $single\n *\n * @return array\n */\nfunction learn_press_get_user_item( $where, $single = true ) {\n\tglobal $wpdb;\n\n\t// Table fields\n\t$table_fields = array(\n\t\t'user_item_id' => '%d',\n\t\t'user_id'      => '%d',\n\t\t'item_id'      => '%d',\n\t\t'ref_id'       => '%d',\n\t\t'start_time'   => '%s',\n\t\t'end_time'     => '%s',\n\t\t'item_type'    => '%s',\n\t\t'status'       => '%s',\n\t\t'ref_type'     => '%s',\n\t\t'parent_id'    => '%d',\n\t);\n\n\t// If $where is a number consider we are searching the record with unique user_item_id\n\tif ( is_numeric( $where ) ) {\n\t\t$where = array( 'user_item_id' => $where );\n\t}\n\n\t$where_str = array();\n\tforeach ( $where as $field => $value ) {\n\t\tif ( ! empty( $table_fields[ $field ] ) ) {\n\t\t\t$where_str[] = \"{$field} = \" . $table_fields[ $field ];\n\t\t}\n\t}\n\t$item = false;\n\n\tif ( $where_str ) {\n\t\t$query = $wpdb->prepare(\n\t\t\t\"\n\t\t\tSELECT *\n\t\t\tFROM {$wpdb->prefix}learnpress_user_items\n\t\t\tWHERE \" . join( ' AND ', $where_str ) . '\n\t\t\tORDER BY user_item_id DESC\n\t\t',\n\t\t\t$where\n\t\t);\n\t\tif ( $single || ! empty( $where['user_item_id'] ) ) {\n\t\t\t$item = $wpdb->get_row( $query );\n\t\t} else {\n\t\t\t$item = $wpdb->get_results( $query );\n\t\t}\n\t}\n\n\treturn $item;\n}\n\n/**\n * Get user item meta from user_itemmeta table\n *\n * @param int    $user_item_id .\n * @param string $meta_key .\n * @param bool   $single .\n *\n * @return mixed\n */\nfunction learn_press_get_user_item_meta( $user_item_id = 0, $meta_key = '', $single = true ) {\n\t$meta = false;\n\tif ( metadata_exists( 'learnpress_user_item', $user_item_id, $meta_key ) ) {\n\t\t$meta = get_metadata( 'learnpress_user_item', $user_item_id, $meta_key, $single );\n\t}\n\n\treturn $meta;\n}\n\n/**\n * Add user item meta into table user_itemmeta\n *\n * @param int    $user_item_id\n * @param string $meta_key\n * @param mixed  $meta_value\n * @param string $prev_value\n *\n * @return false|int\n */\nfunction learn_press_add_user_item_meta( $user_item_id, $meta_key, $meta_value, $prev_value = '' ) {\n\treturn add_metadata( 'learnpress_user_item', $user_item_id, $meta_key, $meta_value, $prev_value );\n}\n\n/**\n * Update user item meta to table user_itemmeta\n *\n * @param int    $user_item_id\n * @param string $meta_key\n * @param mixed  $meta_value\n * @param string $prev_value\n *\n * @return bool|int\n */\nfunction learn_press_update_user_item_meta( $user_item_id, $meta_key, $meta_value, $prev_value = '' ) {\n\treturn update_metadata( 'learnpress_user_item', $user_item_id, $meta_key, $meta_value, $prev_value );\n}\n\n\n/**\n * Update user item meta to table user_itemmeta\n *\n * @param int    $object_id\n * @param string $meta_key\n * @param mixed  $meta_value\n * @param bool   $delete_all\n *\n * @return bool|int\n */\nfunction learn_press_delete_user_item_meta( $object_id, $meta_key, $meta_value = '', $delete_all = false ) {\n\treturn delete_metadata( 'learnpress_user_item', $object_id, $meta_key, $meta_value, $delete_all );\n}\n\n/**\n * Exclude the temp users from query.\n *\n * @param WP_User_Query $q\n */\nfunction learn_press_filter_temp_users( $q ) {\n\t// if ( $temp_users = learn_press_get_temp_users() ) {\n\t// $exclude = (array) $q->get( 'exclude' );\n\t// $exclude = array_merge( $exclude, $temp_users );\n\t// $q->set( 'exclude', $exclude );\n\t// }\n}\n\n// add_action( 'pre_get_users', 'learn_press_filter_temp_users' );\n\n/**\n * Get temp users.\n *\n * @return array\n */\nfunction learn_press_get_temp_users() {\n\treturn false;\n\tif ( false === ( $temp_users = LP_Object_Cache::get( 'learn-press/temp-users' ) ) ) {\n\t\tglobal $wpdb;\n\t\t$query = $wpdb->prepare(\n\t\t\t\"\n\t\t\tSELECT ID\n\t\t\tFROM {$wpdb->users} u\n\t\t\tINNER JOIN {$wpdb->usermeta} um ON u.ID = um.user_id AND um.meta_key = %s AND um.meta_value = %s\n\t\t\tLEFT JOIN {$wpdb->usermeta} um2 ON u.ID = um2.user_id AND um2.meta_key = %s\n\t\t\",\n\t\t\t'_lp_temp_user',\n\t\t\t'yes',\n\t\t\t'_lp_expiration'\n\t\t);\n\n\t\t$temp_users = $wpdb->get_col( $query );\n\n\t\tLP_Object_Cache::set( 'learn-press/temp-users', $temp_users );\n\t}\n\n\treturn $temp_users;\n}\n\n/**\n * Update field created_time after added user item meta\n *\n * @use updated_{meta_type}_meta hook\n *\n * @param $meta_id\n * @param $object_id\n * @param $meta_key\n * @param $_meta_value\n */\nfunction _learn_press_update_created_time_user_item_meta( $meta_id, $object_id, $meta_key, $_meta_value ) {\n\tglobal $wpdb;\n\t$wpdb->update(\n\t\t$wpdb->learnpress_user_itemmeta,\n\t\tarray( 'create_time' => current_time( 'mysql' ) ),\n\t\tarray( 'meta_id' => $meta_id ),\n\t\tarray( '%s' ),\n\t\tarray( '%d' )\n\t);\n}\n\n// add_action( 'added_learnpress_user_item_meta', '_learn_press_update_created_time_user_item_meta', 10, 4 );\n\n/**\n * Update field updated_time after updated user item meta\n *\n * @use updated_{meta_type}_meta hook\n *\n * @param $meta_id\n * @param $object_id\n * @param $meta_key\n * @param $_meta_value\n */\nfunction _learn_press_update_updated_time_user_item_meta( $meta_id, $object_id, $meta_key, $_meta_value ) {\n\tglobal $wpdb;\n\t$wpdb->update(\n\t\t$wpdb->learnpress_user_itemmeta,\n\t\tarray( 'update_time' => current_time( 'mysql' ) ),\n\t\tarray( 'meta_id' => $meta_id ),\n\t\tarray( '%s' ),\n\t\tarray( '%d' )\n\t);\n}\n\n// add_action( 'updated_learnpress_user_item_meta', '_learn_press_update_updated_time_user_item_meta', 10, 4 );\n\n/**\n * @param     $status\n * @param int    $quiz_id\n * @param int    $user_id\n * @param int    $course_id\n *\n * @return bool|mixed\n */\nfunction learn_press_user_has_quiz_status( $status, $quiz_id = 0, $user_id = 0, $course_id = 0 ) {\n\t$user = learn_press_get_user( $user_id );\n\n\treturn $user->has_quiz_status( $status, $quiz_id, $course_id );\n}\n\nif ( ! function_exists( 'learn_press_pre_get_avatar_callback' ) ) {\n\t/**\n\t * Filter the avatar\n\t *\n\t * @param string $avatar\n\t * @param string $id_or_email\n\t * @param array  $size\n\t *\n\t * @return string\n\t */\n\tfunction learn_press_pre_get_avatar_callback( $avatar, $id_or_email = '', $size = array() ) {\n\n\t\t$profile = LP_Profile::instance();\n\n\t\tif ( ! $profile->is_enable_avatar() ) {\n\t\t\treturn $avatar;\n\t\t}\n\n\t\tif ( ( isset( $size['gravatar'] ) && $size['gravatar'] ) || ( $size['default'] && $size['force_default'] ) ) {\n\t\t\treturn $avatar;\n\t\t}\n\n\t\t$user_id = 0;\n\n\t\t/**\n\t\t * Get the ID of user from $id_or_email\n\t\t */\n\t\tif ( ! is_numeric( $id_or_email ) && is_string( $id_or_email ) ) {\n\t\t\tif ( $user = get_user_by( 'email', $id_or_email ) ) {\n\t\t\t\t$user_id = $user->ID;\n\t\t\t}\n\t\t} elseif ( is_numeric( $id_or_email ) ) {\n\t\t\t$user_id = $id_or_email;\n\t\t} elseif ( is_object( $id_or_email ) && isset( $id_or_email->user_id ) && $id_or_email->user_id ) {\n\t\t\t$user_id = $id_or_email->user_id;\n\t\t} elseif ( is_object( $id_or_email ) && $id_or_email instanceof WP_Comment ) {\n\t\t\tif ( $user = get_user_by( 'email', $id_or_email->comment_author_email ) ) {\n\t\t\t\t$user_id = $user->ID;\n\t\t\t}\n\t\t}\n\n\t\tif ( ! $user_id ) {\n\t\t\treturn $avatar;\n\t\t}\n\n\t\t$user = LP_User_Factory::get_user( $user_id );\n\n\t\t$profile_picture_src = $user->get_upload_profile_src();\n\t\tif ( $profile_picture_src ) {\n\t\t\t$setting_size = learn_press_get_avatar_thumb_size();\n\t\t\t$img_size     = '';\n\n\t\t\t// Get avatar size\n\t\t\tif ( ! is_array( $size ) ) {\n\t\t\t\tif ( $size === 'thumbnail' ) {\n\t\t\t\t\t$img_size = '';\n\t\t\t\t\t$height   = $setting_size['height'];\n\t\t\t\t\t$width    = $setting_size['width'];\n\t\t\t\t} else {\n\t\t\t\t\t$height = 250;\n\t\t\t\t\t$width  = 250;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$img_size = $size['size'];\n\t\t\t\t$height   = $size['height'];\n\t\t\t\t$width    = $size['width'];\n\t\t\t}\n\n\t\t\t$avatar = '<img alt=\"' . esc_attr( $user->get_data( 'display_name' ) ) . '\" src=\"' . esc_url( $profile_picture_src ) . '\" class=\"avatar avatar-' . $img_size . ' photo\" height=\"' . $height . '\" width=\"' . $width . '\" />';\n\t\t}\n\n\t\treturn $avatar;\n\t}\n}\nadd_filter( 'pre_get_avatar', 'learn_press_pre_get_avatar_callback', 1, 5 );\n\n\nfunction learn_press_user_profile_picture_upload_dir( $width_user = true ) {\n\tstatic $upload_dir;\n\tif ( ! $upload_dir ) {\n\t\t$upload_dir = wp_upload_dir();\n\t\t$subdir     = apply_filters( 'learn_press_user_profile_folder', 'learn-press-profile', $width_user );\n\t\tif ( $width_user ) {\n\t\t\t$subdir .= '/' . get_current_user_id();\n\t\t}\n\t\t$subdir = '/' . $subdir;\n\n\t\tif ( ! empty( $upload_dir['subdir'] ) ) {\n\t\t\t$u_subdir = str_replace( '\\\\', '/', $upload_dir['subdir'] );\n\t\t\t$u_path   = str_replace( '\\\\', '/', $upload_dir['path'] );\n\n\t\t\t$upload_dir['path'] = str_replace( $u_subdir, $subdir, $u_path );\n\t\t\t$upload_dir['url']  = str_replace( $u_subdir, $subdir, $upload_dir['url'] );\n\t\t} else {\n\t\t\t$upload_dir['path'] = $upload_dir['path'] . $subdir;\n\t\t\t$upload_dir['url']  = $upload_dir['url'] . $subdir;\n\t\t}\n\n\t\t$upload_dir['subdir'] = $subdir;\n\n\t\t// Point path/url to main site if we are in multisite\n\t\tif ( is_multisite() && ! ( is_main_network() && is_main_site() && defined( 'MULTISITE' ) ) ) {\n\t\t\tforeach ( array( 'path', 'url', 'basedir', 'baseurl' ) as $v ) {\n\t\t\t\t$upload_dir[ $v ] = str_replace( '/sites/' . get_current_blog_id(), '', $upload_dir[ $v ] );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $upload_dir;\n}\n\nadd_action( 'learn_press_before_purchase_course_handler', '_learn_press_before_purchase_course_handler', 10, 2 );\nfunction _learn_press_before_purchase_course_handler( $course_id, $cart ) {\n\t// Redirect to login page if user is not logged in\n\tif ( ! is_user_logged_in() ) {\n\t\t$return_url = add_query_arg( $_POST, get_the_permalink( $course_id ) );\n\t\t$return_url = apply_filters( 'learn_press_purchase_course_login_redirect_return_url', $return_url );\n\t\t$redirect   = apply_filters(\n\t\t\t'learn_press_purchase_course_login_redirect',\n\t\t\tlearn_press_get_login_url( $return_url )\n\t\t);\n\t\tif ( $redirect !== false ) {\n\t\t\tlearn_press_add_message( __( 'Please login to enroll this course', 'learnpress' ) );\n\n\t\t\tif ( learn_press_is_ajax() ) {\n\t\t\t\tlearn_press_send_json(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'redirect' => $redirect,\n\t\t\t\t\t\t'result'   => 'success',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\twp_redirect( $redirect );\n\t\t\t\texit();\n\t\t\t}\n\t\t}\n\t} else {\n\t\t$user     = learn_press_get_current_user();\n\t\t$redirect = false;\n\t\tif ( $user->has_finished_course( $course_id ) ) {\n\t\t\tlearn_press_add_message( __( 'You have already finished course', 'learnpress' ) );\n\t\t\t$redirect = true;\n\t\t} elseif ( $user->has_purchased_course( $course_id ) ) {\n\t\t\tlearn_press_add_message( __( 'You have already enrolled in this course', 'learnpress' ) );\n\t\t\t$redirect = true;\n\t\t}\n\t\tif ( $redirect ) {\n\t\t\twp_redirect( get_the_permalink( $course_id ) );\n\t\t\texit();\n\t\t}\n\t}\n}\n\nfunction learn_press_user_is( $role, $user_id = 0 ) {\n\tif ( ! $user_id ) {\n\t\t$user = learn_press_get_current_user();\n\t} else {\n\t\t$user = learn_press_get_user( $user_id );\n\t}\n\tif ( $role == 'admin' ) {\n\t\treturn $user->is_admin();\n\t}\n\tif ( $role == 'instructor' ) {\n\t\treturn $user->is_instructor();\n\t}\n\n\treturn $role;\n}\n\nfunction learn_press_profile_tab_edit_content( $current, $tab, $user ) {\n\tlearn_press_get_template(\n\t\t'profile/tabs/edit.php',\n\t\tarray(\n\t\t\t'user'    => $user,\n\t\t\t'current' => $current,\n\t\t\t'tab'     => $tab,\n\t\t)\n\t);\n}\n\nfunction learn_press_get_profile_endpoints() {\n\t$endpoints = (array) LP()->settings->get( 'profile_endpoints' );\n\tif ( $tabs = LP_Profile::instance()->get_tabs() ) {\n\t\tforeach ( $tabs as $slug => $info ) {\n\t\t\tif ( empty( $endpoints[ $slug ] ) ) {\n\t\t\t\t$endpoints[ $slug ] = $slug;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn apply_filters( 'learn_press_profile_tab_endpoints', $endpoints );\n}\n\n\nfunction learn_press_update_user_option( $name, $value, $id = 0 ) {\n\tif ( ! $id ) {\n\t\t$id = get_current_user_id();\n\t}\n\t$key              = 'learnpress_user_options';\n\t$options          = get_user_option( $key, $id );\n\t$options[ $name ] = $value;\n\tupdate_user_option( $id, $key, $options, true );\n}\n\n/**\n * @param     $name\n * @param int  $id\n *\n * @return bool\n */\nfunction learn_press_delete_user_option( $name, $id = 0 ) {\n\tif ( ! $id ) {\n\t\t$id = get_current_user_id();\n\t}\n\t$key     = 'learnpress_user_options';\n\t$options = get_user_option( $key, $id );\n\tif ( is_array( $options ) && array_key_exists( $name, $options ) ) {\n\t\tunset( $options[ $name ] );\n\t\tupdate_user_option( $id, $key, $options, true );\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * @param     $name\n * @param int  $id\n *\n * @return bool\n */\nfunction learn_press_get_user_option( $name, $id = 0 ) {\n\tif ( ! $id ) {\n\t\t$id = get_current_user_id();\n\t}\n\t$key     = 'learnpress_user_options';\n\t$options = get_user_option( $key, $id );\n\tif ( is_array( $options ) && array_key_exists( $name, $options ) ) {\n\t\treturn $options[ $name ];\n\t}\n\n\treturn false;\n}\n\n/**\n * Check and update user information from request in user profile page\n */\nfunction learn_press_update_user_profile() {\n\n\tif ( ! LP()->is_request( 'post' ) ) {\n\t\treturn;\n\t}\n\t$nonce = learn_press_get_request( 'profile-nonce' );\n\n\tif ( ! wp_verify_nonce( $nonce, 'learn-press-update-user-profile-' . get_current_user_id() ) ) {\n\t\treturn;\n\t}\n\t$section = learn_press_get_request( 'lp-profile-section' );\n\n\tdo_action( 'learn_press_update_user_profile_' . $section );\n\tdo_action( 'learn_press_update_user_profile', $section );\n}\n\n// add_action( 'init', 'learn_press_update_user_profile' );\n\n/**\n * Update user avatar\n */\nfunction learn_press_update_user_profile_avatar() {\n\t$user_id = get_current_user_id();\n\t$data    = learn_press_get_request( 'lp-user-avatar-crop' );\n\n\tif ( ! $user_id ) {\n\t\treturn new WP_Error( 2, 'User is invalid!' );\n\t}\n\n\t$upload_dir = learn_press_user_profile_picture_upload_dir();\n\n\tif ( learn_press_get_request( 'lp-user-avatar-custom' ) != 'yes' ) {\n\t\tdelete_user_meta( get_current_user_id(), '_lp_profile_picture' );\n\n\t\treturn false;\n\t}\n\n\t$path_img = get_user_meta( $user_id, '_lp_profile_picture', true );\n\n\t$path = $upload_dir['basedir'] . $path_img;\n\n\tif ( ! file_exists( $path ) ) {\n\t\treturn false;\n\t}\n\n\t$filetype = wp_check_filetype( $path );\n\n\tif ( 'jpg' == $filetype['ext'] ) {\n\t\t$im = imagecreatefromjpeg( $path );\n\t} elseif ( 'png' == $filetype['ext'] ) {\n\t\t$im = imagecreatefrompng( $path );\n\t}\n\n\tif ( ! isset( $im ) ) {\n\t\treturn false;\n\t}\n\n\t$points  = explode( ',', $data['points'] );\n\t$im_crop = imagecreatetruecolor( $data['width'], $data['height'] );\n\n\tif ( ! $im ) {\n\t\treturn false;\n\t}\n\n\t$dst_x = 0;\n\t$dst_y = 0;\n\t$dst_w = $data['width'];\n\t$dst_h = $data['height'];\n\t$src_x = $points[0];\n\t$src_y = $points[1];\n\t$src_w = $points[2] - $points[0];\n\t$src_h = $points[3] - $points[1];\n\n\timagecopyresampled( $im_crop, $im, $dst_x, $dst_y, $src_x, $src_y, $dst_w, $dst_h, $src_w, $src_h );\n\n\t$newname = md5( $user_id . microtime( true ) );\n\t$output  = dirname( $path );\n\n\tif ( 'jpg' == $filetype['ext'] ) {\n\t\t$newname .= '.jpg';\n\t\t$output  .= '/' . $newname;\n\t\timagejpeg( $im_crop, $output );\n\t} elseif ( 'png' == $filetype['ext'] ) {\n\t\t$newname .= '.png';\n\t\t$output  .= '/' . $newname;\n\t\timagepng( $im_crop, $output );\n\t}\n\n\t$new_avatar = false;\n\n\tif ( file_exists( $output ) ) {\n\t\t$new_avatar = preg_replace( '!^/!', '', $upload_dir['subdir'] ) . '/' . $newname;\n\t\tupdate_user_meta( $user_id, '_lp_profile_picture', '/' . $new_avatar );\n\t\tupdate_user_meta( $user_id, '_lp_profile_picture_changed', 'yes' );\n\n\t\t$new_avatar = $upload_dir['baseurl'] . '/' . $new_avatar;\n\t}\n\n\t@unlink( $path );\n\n\treturn $new_avatar;\n}\n\n// add_action( 'learn_press_update_user_profile_avatar', 'learn_press_update_user_profile_avatar' );\n\n/**\n * Update user basic information.\n *\n * @param bool $wp_error - Optional. Return WP_Error object in case updating failed.\n *\n * @return bool|mixed|WP_Error\n */\nfunction learn_press_update_user_profile_basic_information( $wp_error = false ) {\n\t$user_id = get_current_user_id();\n\n\tif ( ! $user_id ) {\n\t\treturn new WP_Error( 2, 'User is invalid!' );\n\t}\n\n\t$update_data = array(\n\t\t'ID'           => $user_id,\n\t\t'first_name'   => filter_input( INPUT_POST, 'first_name', FILTER_SANITIZE_STRING ),\n\t\t'last_name'    => filter_input( INPUT_POST, 'last_name', FILTER_SANITIZE_STRING ),\n\t\t'description'  => filter_input( INPUT_POST, 'description', FILTER_SANITIZE_STRING ),\n\t\t'display_name' => filter_input( INPUT_POST, 'account_display_name', FILTER_SANITIZE_STRING ),\n\t\t'user_email'   => filter_input( INPUT_POST, 'account_email', FILTER_SANITIZE_EMAIL ),\n\t);\n\n\t$update_data = apply_filters( 'learn-press/update-profile-basic-information-data', $update_data );\n\t$update_meta = isset( $_POST['_lp_custom_register'] ) ? LP_Helper::sanitize_params_submitted( $_POST['_lp_custom_register'] ) : '';\n\n\t$return = LP_Forms_Handler::update_user_data( $update_data, $update_meta );\n\n\t// Update for social.\n\t$socials    = LP_Request::get_array( 'user_profile_social' );\n\t$extra_data = get_user_meta( $user_id, '_lp_extra_info', true );\n\n\tif ( ! empty( $extra_data ) ) {\n\t\t$socials = array_merge( $extra_data, $socials );\n\t}\n\n\tupdate_user_meta( $user_id, '_lp_extra_info', $socials );\n\n\tif ( is_wp_error( $return ) ) {\n\t\treturn $wp_error ? $return : false;\n\t}\n\n\treturn $return;\n}\n\n/**\n * Update new password.\n */\nfunction learn_press_update_user_profile_change_password( $wp_error = false ) {\n\t$user_id = get_current_user_id();\n\n\tif ( ! $user_id ) {\n\t\treturn new WP_Error( 2, 'User is invalid!' );\n\t}\n\n\t$old_pass       = filter_input( INPUT_POST, 'pass0' );\n\t$check_old_pass = false;\n\n\tif ( $old_pass ) {\n\t\t$user = wp_get_current_user();\n\t\trequire_once ABSPATH . 'wp-includes/class-phpass.php';\n\t\t$wp_hasher = new PasswordHash( 8, true );\n\n\t\tif ( $wp_hasher->CheckPassword( $old_pass, $user->data->user_pass ) ) {\n\t\t\t$check_old_pass = true;\n\t\t}\n\t}\n\n\ttry {\n\t\tif ( ! $check_old_pass ) {\n\t\t\tthrow new Exception( __( 'Old password incorrect!', 'learnpress' ) );\n\t\t} else {\n\t\t\t$new_pass  = filter_input( INPUT_POST, 'pass1' );\n\t\t\t$new_pass2 = filter_input( INPUT_POST, 'pass2' );\n\n\t\t\tif ( ! $new_pass || ! $new_pass2 || ( $new_pass != $new_pass2 ) ) {\n\t\t\t\tthrow new Exception( __( 'Confirmation password incorrect!', 'learnpress' ) );\n\t\t\t} else {\n\t\t\t\t$update_data = array(\n\t\t\t\t\t'user_pass' => $new_pass,\n\t\t\t\t\t'ID'        => get_current_user_id(),\n\t\t\t\t);\n\t\t\t\t$return      = wp_update_user( $update_data );\n\n\t\t\t\tif ( is_wp_error( $return ) ) {\n\t\t\t\t\treturn $wp_error ? $return : false;\n\t\t\t\t}\n\n\t\t\t\treturn $return;\n\t\t\t}\n\t\t}\n\t} catch ( Exception $ex ) {\n\t\treturn $wp_error ? new WP_Error( 'UPDATE_PROFILE_ERROR', $ex->getMessage() ) : false;\n\t}\n}\n\nfunction learn_press_get_avatar_thumb_size() {\n\t$option = LP_Settings::get_option(\n\t\t'avatar_dimensions',\n\t\tarray(\n\t\t\t'width'  => 250,\n\t\t\t'height' => 250,\n\t\t)\n\t);\n\n\tif ( ! isset( $option['width'] ) || ! isset( $option['height'] ) ) {\n\t\t$option = array(\n\t\t\t'width'  => 250,\n\t\t\t'height' => 250,\n\t\t);\n\t}\n\n\treturn $option;\n}\n\nfunction learn_press_get_course_thumbnail_dimensions() {\n\t$option = LP_Settings::get_option(\n\t\t'course_thumbnail_dimensions',\n\t\tarray(\n\t\t\t'width'  => 500,\n\t\t\t'height' => 300,\n\t\t)\n\t);\n\n\tif ( ! isset( $option['width'] ) || ! isset( $option['height'] ) ) {\n\t\t$option = array(\n\t\t\t'width'  => 500,\n\t\t\t'height' => 300,\n\t\t);\n\t}\n\n\treturn $option;\n}\n\n/**\n * Set a fake cookie to\n */\nfunction learn_press_set_user_cookie_for_guest() {\n\tif ( ! is_admin() && ! headers_sent() ) {\n\t\t$guest_key = '_wordpress_lp_guest';\n\n\t\tif ( is_user_logged_in() ) {\n\t\t\tif ( ! empty( $_COOKIE[ $guest_key ] ) ) {\n\t\t\t\tlearn_press_remove_cookie( $guest_key );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( empty( $_COOKIE[ $guest_key ] ) ) {\n\t\t\t\tlearn_press_setcookie( $guest_key, md5( time() ), time() + 3600 );\n\t\t\t}\n\t\t}\n\t}\n}\n\nadd_action( 'wp', 'learn_press_set_user_cookie_for_guest' );\n\nfunction learn_press_get_user_avatar( $user_id = 0, $size = '' ) {\n\t$user = learn_press_get_user( $user_id );\n\n\treturn $user->get_profile_picture( '', $size );\n}\n\n/**\n * Get profile instance for an user to view.\n *\n * @param int $for_user\n *\n * @return LP_Profile|WP_Error\n */\nfunction learn_press_get_profile( $for_user = 0 ) {\n\treturn LP_Profile::instance( $for_user );\n}\n\n/**\n * Remove items from learnpress_user_items.\n *\n * @param int  $user_id\n * @param int  $item_id\n * @param int  $course_id\n * @param bool $include_course - Optional. If TRUE then remove course and it's items\n */\nfunction learn_press_remove_user_items( $user_id, $item_id, $course_id, $include_course = false ) {\n\tglobal $wpdb;\n\n\tsettype( $item_id, 'array' );\n\n\t$format = array_fill( 0, sizeof( $item_id ), '%d' );\n\t$where  = '';\n\n\t$args = array( $user_id );\n\t$args = array_merge( $args, $item_id );\n\n\tif ( $course_id ) {\n\t\t$args[] = $course_id;\n\t\t$where  = 'AND ref_id = %d';\n\t}\n\n\tif ( $include_course ) {\n\t\t$where .= ' OR ( item_id = %d AND item_type = %s )';\n\t\t$args[] = $course_id;\n\t\t$args[] = LP_COURSE_CPT;\n\t}\n\n\t$query = $wpdb->prepare(\n\t\t\"\n        DELETE\n        FROM {$wpdb->learnpress_user_items}\n        WHERE user_id = %d\n        AND ( item_id IN(\" . join( ',', $format ) . \")\n        $where )\n    \",\n\t\t$args\n\t);\n}\n\n/**\n * Get user profile link\n *\n * @param int  $user_id\n * @param null $tab\n *\n * @return mixed|string\n */\nfunction learn_press_user_profile_link( $user_id = 0, $tab = null ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\t$user    = false;\n\t$deleted = in_array( $user_id, LP_User_Factory::$_deleted_users );\n\tif ( ! $deleted ) {\n\t\tif ( is_numeric( $user_id ) ) {\n\t\t\t$user = get_user_by( 'id', $user_id );\n\t\t} else {\n\t\t\t$user = get_user_by( 'login', urldecode( $user_id ) );\n\t\t}\n\t} else {\n\t\treturn '';\n\t}\n\tif ( ! $deleted && ! $user ) {\n\t\tLP_User_Factory::$_deleted_users[] = $user_id;\n\t}\n\n\t$user = learn_press_get_user( $user_id );\n\n\tif ( ! $user ) {\n\t\treturn '';\n\t}\n\n\tglobal $wp_query;\n\t$args = array(\n\t\t'user' => $user->get_username(),\n\t);\n\n\tif ( isset( $args['user'] ) ) {\n\t\tif ( '' === $tab ) {\n\t\t\t$tab = learn_press_get_current_profile_tab();\n\t\t}\n\t\tif ( $tab ) {\n\t\t\t$args['tab'] = $tab;\n\t\t}\n\n\t\t/**\n\t\t * If no tab is selected in profile and is current user\n\t\t * then no need the username in profile link.\n\t\t */\n\t\tif ( ( $user_id == get_current_user_id() ) && ! isset( $args['tab'] ) ) {\n\t\t\tunset( $args['user'] );\n\t\t}\n\t}\n\t$args         = array_map( '_learn_press_urlencode', $args );\n\t$profile_link = trailingslashit( learn_press_get_page_link( 'profile' ) );\n\tif ( $profile_link ) {\n\t\tif ( get_option( 'permalink_structure' ) /*&& learn_press_get_page_id( 'profile' )*/ ) {\n\t\t\t$url = trailingslashit( $profile_link . join( '/', array_values( $args ) ) );\n\t\t} else {\n\t\t\t$url = add_query_arg( $args, $profile_link );\n\t\t}\n\t} else {\n\t\t$url = get_author_posts_url( $user_id );\n\t}\n\n\treturn apply_filters( 'learn_press_user_profile_link', $url, $user_id, $tab );\n}\n\n/**********************************************/\n/*       Functions are used for hooks         */\n/**********************************************/\n\nfunction learn_press_hk_before_start_quiz( $true, $quiz_id, $course_id, $user_id ) {\n\tif ( 'yes' !== get_post_meta( $quiz_id, '_lp_archive_history', true ) ) {\n\t\tlearn_press_remove_user_items( $user_id, $quiz_id, $course_id );\n\t}\n\n\treturn $true;\n}\n\nadd_filter( 'learn-press/before-start-quiz', 'learn_press_hk_before_start_quiz', 10, 4 );\n\n/*function learn_press_default_user_item_status( $item_id ) {\n\t$status = '';\n\tswitch ( learn_press_get_post_type( $item_id ) ) {\n\t\tcase LP_LESSON_CPT:\n\t\t\t$status = 'started';\n\t\t\tbreak;\n\t\tcase LP_QUIZ_CPT:\n\t\t\t$status = 'viewed';\n\t\t\tbreak;\n\t\tcase LP_COURSE_CPT:\n\t\t\t$status = 'enrolled';\n\t}\n\n\treturn apply_filters( 'learn-press/default-user-item-status', $status, $item_id );\n}*/\n\n/**\n * Get current state of distraction mode\n *\n * @return mixed\n * @since 3.1.0\n */\nfunction learn_press_get_user_distraction() {\n\tif ( is_user_logged_in() ) {\n\t\treturn get_user_option( 'distraction_mode', get_current_user_id() );\n\t} else {\n\t\treturn LP()->session->distraction_mode;\n\t}\n}\n\nfunction learn_press_get_user_role( $user_id ) {\n\tif ( $user = learn_press_get_user( $user_id ) ) {\n\t\treturn $user->get_role();\n\t}\n\n\treturn false;\n}\n\n/**\n * @param array $args\n * @param bool  $wp_error\n *\n * @return bool|int|LP_User_Item|mixed|WP_Error\n */\nfunction learn_press_create_user_item( $args = array(), $wp_error = false ) {\n\tglobal $wpdb;\n\n\t$defaults = array(\n\t\t'user_id'     => get_current_user_id(),\n\t\t'item_id'     => '',\n\t\t'start_time'  => current_time( 'mysql', true ),\n\t\t'end_time'    => '',\n\t\t'graduation'  => '',\n\t\t'item_type'   => '',\n\t\t'status'      => '',\n\t\t'ref_id'      => 0,\n\t\t'ref_type'    => 0,\n\t\t'parent_id'   => 0,\n\t\t'create_meta' => array(),\n\t);\n\n\t$item_data = wp_parse_args( $args, $defaults );\n\n\t// Validate item_id and post type\n\tif ( empty( $item_data['item_id'] ) ) {\n\t\tif ( $wp_error ) {\n\t\t\treturn new WP_Error( 'invalid_item_id', __( 'Invalid item id.', 'learnpress' ) );\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tif ( empty( $item_data['item_type'] ) && $post_type = learn_press_get_post_type( $item_data['item_id'] ) ) {\n\t\t$item_data['item_type'] = $post_type;\n\t}\n\n\t// Get id and type of ref if they are null\n\tif ( ! empty( $item_data['parent_id'] ) && ( empty( $item_data['ref_id'] ) || ( empty( $item_data['ref_type'] ) ) ) ) {\n\t\t$parent = $wpdb->get_row(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT * FROM {$wpdb->learnpress_user_items} WHERE %d\",\n\t\t\t\t$item_data['parent_id']\n\t\t\t)\n\t\t);\n\n\t\tif ( $parent ) {\n\t\t\tif ( empty( $item_data['ref_id'] ) ) {\n\t\t\t\t$item_data['ref_id'] = $parent->item_id;\n\t\t\t}\n\n\t\t\tif ( empty( $item_data['ref_type'] ) ) {\n\t\t\t\t$item_data['ref_type'] = $parent->item_type;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Filter\n\tif ( ! $item_data = apply_filters( 'learn-press/create-user-item-data', $item_data ) ) {\n\t\tif ( $wp_error ) {\n\t\t\treturn new WP_Error( 'invalid_item_data', __( 'Invalid item data.', 'learnpress' ) );\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tdo_action( 'learn-press/before-create-user-item', $item_data );\n\n\t$create_meta = ! empty( $item_data['create_meta'] ) ? $item_data['create_meta'] : false;\n\n\tif ( $create_meta ) {\n\t\tunset( $item_data['create_meta'] );\n\t}\n\n\t$user_item = new LP_User_Item( $item_data );\n\n\t$result = $user_item->update( true, false );\n\n\tif ( ! $result || is_wp_error( $result ) ) {\n\n\t\tif ( $wp_error && is_wp_error( $result ) ) {\n\t\t\treturn $result;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tdo_action( 'learn-press/created-user-item', $user_item, $item_data );\n\n\t$create_meta = apply_filters( 'learn-press/create-user-item-meta', $create_meta, $item_data );\n\tif ( ! $create_meta ) {\n\t\treturn $user_item;\n\t}\n\n\tdo_action( 'learn-press/before-create-user-item-meta', $create_meta );\n\n\tforeach ( $create_meta as $key => $value ) {\n\t\tlearn_press_update_user_item_meta( $user_item->get_user_item_id(), $key, $value );\n\t}\n\n\tdo_action( 'learn-press/created-user-item-meta', $user_item, $create_meta );\n\n\treturn $user_item;\n}\n\n/**\n * @param array $args\n * @param bool  $wp_error - Optional. TRUE will return WP_Error on fail.\n *\n * @return bool|array|LP_User_Item|WP_Error\n */\nfunction learn_press_create_user_item_for_quiz( $args = array(), $wp_error = false ) {\n\tglobal $wpdb;\n\n\t$item_data = wp_parse_args(\n\t\t$args,\n\t\tarray(\n\t\t\t'item_type'  => LP_QUIZ_CPT,\n\t\t\t'status'     => LP_ITEM_STARTED,\n\t\t\t'graduation' => LP_COURSE_GRADUATION_IN_PROGRESS,\n\t\t\t'user_id'    => get_current_user_id(),\n\t\t)\n\t);\n\n\t$user_item = learn_press_create_user_item( $item_data, $wp_error );\n\n\tif ( $user_item && ! is_wp_error( $user_item ) ) {\n\t\t$user_item = new LP_User_Item_Quiz( $user_item->get_data() );\n\t\t$user_item->update( true );\n\t}\n\n\treturn $user_item;\n}\n\n/**\n * Get list user_item_id for Quiz in table learnpress_user_items\n *\n * @param int $quiz_id\n * @param int $course_id\n * @return array || false\n */\nfunction learn_press_isset_user_item_for_quiz( $quiz_id, $course_id ) {\n\tglobal $wpdb;\n\n\t$query = $wpdb->prepare( \"SELECT user_item_id FROM $wpdb->learnpress_user_items WHERE ref_id=%d AND item_id=%d\", $course_id, $quiz_id );\n\t$col   = $wpdb->get_col( $query );\n\n\tif ( ! empty( $col ) ) {\n\t\treturn $col;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/**\n * Create new user item prepare for user starts a quiz\n * Update error retry course not work - Nhamdv.\n *\n * @param int  $quiz_id\n * @param int  $user_id\n * @param int  $course_id\n * @param bool $wp_error\n *\n * @return array|bool|LP_User_Item|WP_Error\n * @since 4.0.0\n */\nfunction learn_press_user_start_quiz( $quiz_id, $user_id = 0, $course_id = 0, $wp_error = false ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\tglobal $wpdb;\n\n\t$query = $wpdb->prepare(\n\t\t\"\n\t    SELECT user_item_id, item_id id, item_type type\n\t    FROM {$wpdb->learnpress_user_items}\n\t    WHERE user_item_id = (SELECT max(user_item_id)\n\t    FROM {$wpdb->learnpress_user_items}\n\t    WHERE user_id = %d AND item_id = %d AND status IN ('enrolled', 'in-progress'))\n\t\",\n\t\t$user_id,\n\t\t$course_id\n\t);\n\n\t$parent = $wpdb->get_row( $query );\n\n\tdo_action( 'learn-press/before-user-start-quiz', $quiz_id, $user_id, $course_id );\n\n\t$user        = learn_press_get_user( $user_id );\n\t$course_data = $user->get_course_data( $course_id );\n\t$quiz_data   = $course_data->get_item( $quiz_id );\n\n\t$quiz      = LP_Quiz::get_quiz( $quiz_id );\n\t$duration  = $quiz->get_duration();\n\t$user_quiz = learn_press_create_user_item_for_quiz(\n\t\tarray(\n\t\t\t'user_item_id' => $quiz_data ? $quiz_data->get_user_item_id() : 0,\n\t\t\t'item_id'      => $quiz->get_id(),\n\t\t\t'duration'     => $duration ? $duration->get() : 0,\n\t\t\t'user_id'      => $user_id,\n\t\t\t'parent_id'    => $parent ? absint( $parent->user_item_id ) : 0,\n\t\t\t'ref_type'     => $parent ? $parent->type : '',\n\t\t\t'ref_id'       => $parent ? $parent->id : '',\n\t\t),\n\t\t$wp_error\n\t);\n\n\tif ( $user_quiz && ! is_wp_error( $user_quiz ) ) {\n\t\tdo_action( 'learn-press/user-started-quiz', $user_quiz, $quiz_id, $user_id, $course_id );\n\t}\n\n\t// Reset first cache\n\t$user_quiz->get_status( 'status', true );\n\n\treturn $user_quiz;\n}\n\n/**\n * Function retake quiz.\n *\n * @param [type]  $quiz_id\n * @param integer $user_id\n * @param integer $course_id\n * @param boolean $wp_error\n *\n * @return void\n */\nfunction learn_press_user_retake_quiz( $quiz_id, $user_id = 0, $course_id = 0, $wp_error = false ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\tif ( ! $course_id ) {\n\t\treturn new WP_Error( 'invalid_course_id', esc_html__( 'Invalid Course ID.', 'learnpress' ) );\n\t}\n\n\tglobal $wpdb;\n\n\t$query = $wpdb->prepare(\n\t\t\"\n\t    SELECT user_item_id, item_id id, item_type type\n\t    FROM {$wpdb->learnpress_user_items}\n\t    WHERE user_item_id = (SELECT max(user_item_id)\n\t    FROM {$wpdb->learnpress_user_items}\n\t    WHERE user_id = %d AND item_id = %d AND status IN ('enrolled', 'in-progress'))\n\t\t\",\n\t\t$user_id,\n\t\t$course_id\n\t);\n\n\t$parent = $wpdb->get_row( $query );\n\n\tif ( ! $parent ) {\n\t\treturn new WP_Error( 'invalid_user_item', esc_html__( 'Invalid Quiz', 'learnpress' ) );\n\t}\n\n\t$data = learn_press_get_user_item(\n\t\tarray(\n\t\t\t'item_id'   => $quiz_id,\n\t\t\t'user_id'   => $user_id,\n\t\t\t'parent_id' => $parent ? absint( $parent->user_item_id ) : 0,\n\t\t\t'ref_type'  => $parent ? $parent->type : LP_COURSE_CPT,\n\t\t\t'ref_id'    => $parent ? $parent->id : '',\n\t\t)\n\t);\n\n\t$user_item = new LP_User_Item_Quiz( $data );\n\n\t$user_item->update_retake_count();\n\n\t// Create new result in table learnpress_user_item_results.\n\tLP_User_Items_Result_DB::instance()->insert( $data->user_item_id );\n\n\t// Remove user_item_meta.\n\tlearn_press_delete_user_item_meta( $data->user_item_id, '_lp_question_checked' );\n\n\t$user_item->set_status( LP_ITEM_STARTED )\n\t\t\t\t->set_start_time( current_time( 'mysql', 1 ) ) // Error Retake when change timezone - Nhamdv\n\t\t\t\t->set_end_time( '' )\n\t\t\t\t->set_graduation( LP_COURSE_GRADUATION_IN_PROGRESS )\n\t\t\t\t->update();\n\n\t// Reset first cache\n\t$user_item->get_status( 'status', true );\n\n\t// Error Retake when change timezone - Nhamdv\n\t//  learn_press_update_user_item_field(\n\t//      array(\n\t//          'start_time' => current_time( 'mysql', true ),\n\t//      ),\n\t//      array(\n\t//          'user_item_id' => $data->user_item_id,\n\t//      )\n\t//  );\n\n\treturn $user_item;\n}\n\n\n/**\n * Prepares list of questions for rest api.\n *\n * @param int[] $question_ids\n * @param array $args\n *\n * @return array\n * @since 3.3.0\n */\nfunction learn_press_rest_prepare_user_questions( array $question_ids = array(), array $args = array() ) : array {\n\tif ( is_numeric( $args ) ) {\n\n\t} else {\n\t\t$args = wp_parse_args(\n\t\t\t$args,\n\t\t\tarray(\n\t\t\t\t'instant_hint'        => true,\n\t\t\t\t'instant_check'       => true,\n\t\t\t\t'quiz_status'         => '',\n\t\t\t\t'checked_questions'   => array(),\n\t\t\t\t'hinted_questions'    => array(),\n\t\t\t\t'answered'            => array(),\n\t\t\t\t'show_correct_review' => true,\n\t\t\t)\n\t\t);\n\t}\n\n\t$checkedQuestions = $args['checked_questions'];\n\t$hintedQuestions  = $args['hinted_questions'];\n\t$instantHint      = $args['instant_hint'];\n\t$instantCheck     = $args['instant_check'];\n\t$quizStatus       = $args['quiz_status'];\n\t$answered         = $args['answered'];\n\t$status           = $args['status'] ?? '';\n\t$questions        = array();\n\n\tif ( $question_ids ) {\n\t\tforeach ( $question_ids as $id ) {\n\t\t\t$question       = learn_press_get_question( $id );\n\t\t\t$hasHint        = false;\n\t\t\t$hasExplanation = false;\n\t\t\t$canCheck       = false;\n\t\t\t$hinted         = false;\n\t\t\t$checked        = false;\n\t\t\t$theHint        = $question->get_hint();\n\t\t\t$theExplanation = '';\n\n\t\t\tif ( $instantCheck || $status == 'completed' ) {\n\t\t\t\t$theExplanation = $question->get_explanation();\n\t\t\t\t$checked        = in_array( $id, $checkedQuestions );\n\t\t\t\t$hasExplanation = ! ! $theExplanation;\n\t\t\t}\n\n\t\t\t $mark = $question->get_mark() ? $question->get_mark() : 1;\n\n\t\t\t$questionData = array(\n\t\t\t\t'object' => $question,\n\t\t\t\t'id'     => absint( $id ),\n\t\t\t\t'title'  => $question->get_title(),\n\t\t\t\t'type'   => $question->get_type(),\n\t\t\t\t'point'  => $mark,\n\t\t\t);\n\n\t\t\t$content = $question->get_content();\n\t\t\tif ( $content ) {\n\t\t\t\t$questionData['content'] = $content;\n\t\t\t}\n\n\t\t\tif ( $theHint ) {\n\t\t\t\t$questionData['hint'] = $theHint;\n\t\t\t}\n\n\t\t\tif ( $status == 'completed' || ( $checked && $theExplanation ) ) {\n\t\t\t\t$questionData['explanation'] = $theExplanation;\n\t\t\t}\n\n\t\t\tif ( $hasExplanation ) {\n\t\t\t\t$questionData['has_explanation'] = $hasExplanation;\n\n\t\t\t\tif ( $checked ) {\n\t\t\t\t\t$questionData['explanation'] = $theExplanation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$with_true_or_false = ( $checked || ( $quizStatus == 'completed' && $args['show_correct_review'] ) );\n\n\t\t\tif ( $question->is_support( 'answer-options' ) ) {\n\t\t\t\t$questionData['options'] = learn_press_get_question_options_for_js(\n\t\t\t\t\t$question,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'include_is_true' => $with_true_or_false,\n\t\t\t\t\t\t'answer'          => $answered[ $id ]['answered'] ?? '',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$questions[] = $questionData;\n\t\t}\n\n\t\t/**\n\t\t * Remove answered\n\t\t */\n\t\tif ( $quizStatus !== 'completed' ) {\n\t\t\tif ( $checkedQuestions && $quizStatus ) {\n\n\t\t\t\t$omitIds = array_diff( $question_ids, $checkedQuestions );\n\n\t\t\t\tif ( $omitIds ) {\n\t\t\t\t\tforeach ( $omitIds as $omitId ) {\n\t\t\t\t\t\tif ( ! empty( $answered[ $omitId ] ) ) {\n\t\t\t\t\t\t\tunset( $answered[ $omitId ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn apply_filters( 'learn-press/list-questions-data', $questions );\n}\n\n/**\n * Output html to show extra info of user in backend profile.\n *\n * @param WP_User $user\n *\n * @since 4.0.0\n */\n/*function learn_press_append_user_profile_fields( $user ) {\n\tif ( ! is_admin() ) {\n\t\treturn;\n\t}\n\n\tlearn_press_admin_view( 'backend-user-profile', array( 'user' => $user ) );\n}*/\n\n//add_action( 'show_user_profile', 'learn_press_append_user_profile_fields' );\n//add_action( 'edit_user_profile', 'learn_press_append_user_profile_fields' );\n\n/**\n * Update extra profile data upon update user.\n *\n * @param int $user_id\n *\n * @since 4.0.0\n */\nfunction learn_press_update_extra_user_profile_fields( $user_id ) {\n\tif ( ! current_user_can( 'edit_user', $user_id ) ) {\n\t\treturn;\n\t}\n\n\tif ( isset( $_POST['_lp_extra_info'] ) ) {\n\t\tupdate_user_meta( $user_id, '_lp_extra_info', $_POST['_lp_extra_info'] );\n\t}\n}\n\nadd_action( 'personal_options_update', 'learn_press_update_extra_user_profile_fields' );\nadd_action( 'edit_user_profile_update', 'learn_press_update_extra_user_profile_fields' );\n\n/**\n * Get extra profile info data\n *\n * @param int $user_id\n *\n * @return array\n * @since 4.0.0\n */\nfunction learn_press_get_user_extra_profile_info( $user_id = 0 ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\t$extra_profile_info = get_the_author_meta( '_lp_extra_info', $user_id );\n\t$extra_fields       = learn_press_get_user_extra_profile_fields();\n\n\t$extra_profile_info = wp_parse_args(\n\t\t$extra_profile_info,\n\t\tarray_fill_keys( array_keys( $extra_fields ), '' )\n\t);\n\n\treturn apply_filters( 'learn-press/user-extra-profile-info', $extra_profile_info, $user_id );\n}\n\nfunction learn_press_social_profiles() {\n\treturn apply_filters(\n\t\t'learn-press/social-profiles',\n\t\tarray(\n\t\t\t'facebook',\n\t\t\t'twitter',\n\t\t\t'youtube',\n\t\t\t'linkedin',\n\t\t)\n\t);\n}\n\nfunction lp_add_default_fields( $fields ) {\n\t$first_name = LP()->settings()->get( 'enable_register_first_name' );\n\n\tif ( $first_name === 'yes' ) {\n\t\t?>\n\t\t<li class=\"form-field\">\n\t\t\t<label for=\"reg_first_name\"><?php esc_html_e( 'First name', 'learnpress' ); ?></label>\n\t\t\t<input id=\"reg_first_name\" name=\"reg_first_name\" type=\"text\"\n\t\t\t\t   placeholder=\"<?php esc_attr_e( 'First name', 'learnpress' ); ?>\"\n\t\t\t\t   value=\"<?php echo ( ! empty( $_POST['reg_first_name'] ) ) ? esc_attr( wp_unslash( $_POST['reg_first_name'] ) ) : ''; ?>\">\n\t\t</li>\n\t\t<?php\n\t}\n\n\t$last_name = LP()->settings()->get( 'enable_register_last_name' );\n\n\tif ( $last_name === 'yes' ) {\n\t\t?>\n\t\t<li class=\"form-field\">\n\t\t\t<label for=\"reg_last_name\"><?php esc_html_e( 'Last name', 'learnpress' ); ?></label>\n\t\t\t<input id=\"reg_last_name\" name=\"reg_last_name\" type=\"text\"\n\t\t\t\t   placeholder=\"<?php esc_attr_e( 'Last name', 'learnpress' ); ?>\"\n\t\t\t\t   value=\"<?php echo ( ! empty( $_POST['reg_last_name'] ) ) ? esc_attr( wp_unslash( $_POST['reg_last_name'] ) ) : ''; ?>\">\n\t\t</li>\n\t\t<?php\n\t}\n\n\t$display_name = LP()->settings()->get( 'enable_register_display_name' );\n\n\tif ( $display_name === 'yes' ) {\n\t\t?>\n\t\t<li class=\"form-field\">\n\t\t\t<label for=\"reg_display_name\"><?php esc_html_e( 'Display name', 'learnpress' ); ?></label>\n\t\t\t<input id=\"reg_display_name\" name=\"reg_display_name\" type=\"text\"\n\t\t\t\t   placeholder=\"<?php esc_attr_e( 'Display name', 'learnpress' ); ?>\"\n\t\t\t\t   value=\"<?php echo ( ! empty( $_POST['reg_display_name'] ) ) ? esc_attr( wp_unslash( $_POST['reg_display_name'] ) ) : ''; ?>\">\n\t\t</li>\n\t\t<?php\n\t}\n}\n\nadd_filter( 'learn-press/after-form-register-fields', 'lp_add_default_fields' );\n\nfunction lp_custom_register_fields_display() {\n\t?>\n\t<?php $custom_fields = LP()->settings()->get( 'register_profile_fields' ); ?>\n\n\t<?php if ( $custom_fields ) : ?>\n\t\t<?php foreach ( $custom_fields as $custom_field ) : ?>\n\t\t\t<?php\n\t\t\t$cf_class = '';\n\t\t\tif ( $custom_field['required'] == 'yes' ) {\n\t\t\t\t$cf_class = ' required';\n\t\t\t\t?>\n\t\t\t\t<style>\n\t\t\t\t\t.required label {\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t}\n\t\t\t\t\t.required label:after {\n\t\t\t\t\t\tcontent: ' *';\n\t\t\t\t\t\tdisplay:inline;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\t\t\t\t<?php\n\t\t\t}\n\n\t\t\tif ( isset( $custom_field['id'] ) ) {\n\t\t\t\t?>\n\t\t\t\t<?php $value = $custom_field['id']; ?>\n\n\t\t\t\t<li class=\"form-field<?php echo esc_attr( $cf_class ); ?>\">\n\t\t\t\t\t<?php\n\t\t\t\t\tswitch ( $custom_field['type'] ) {\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'email':\n\t\t\t\t\t\tcase 'url':\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<label for=\"description\"><?php echo esc_html( $custom_field['name'] ); ?></label>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\tcase 'tel':\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<input name=\"_lp_custom_register_form[<?php echo $value; ?>]\"\n\t\t\t\t\t\t\t\t   type=\"<?php echo $custom_field['type']; ?>\" class=\"regular-text\"\n\t\t\t\t\t\t\t\t   value=\"\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'textarea':\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<label for=\"description\"><?php echo esc_html( $custom_field['name'] ); ?></label>\n\t\t\t\t\t\t\t<textarea name=\"_lp_custom_register_form[<?php echo $value; ?>]\"></textarea>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'checkbox':\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input name=\"_lp_custom_register_form[<?php echo $value; ?>]\"\n\t\t\t\t\t\t\t\t\t   type=\"<?php echo $custom_field['type']; ?>\" value=\"1\">\n\t\t\t\t\t\t\t\t<?php echo esc_html( $custom_field['name'] ); ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t</li>\n\t\t\t<?php } ?>\n\t\t<?php endforeach; ?>\n\t<?php endif; ?>\n\t<?php\n}\n\nadd_action( 'learn-press/after-form-register-fields', 'lp_custom_register_fields_display' );\n\n/**\n * Custom register fields\n *\n * @param [type] $user_id\n *\n * @return void\n */\nfunction lp_user_custom_register_fields( $user_id, $fields = array() ) {\n\tif ( ! empty( $fields ) ) {\n\t\tupdate_user_meta( $user_id, '_lp_custom_register', LP_Helper::sanitize_params_submitted( $fields ) );\n\t} elseif ( isset( $_POST['_lp_custom_register'] ) ) {\n\t\tupdate_user_meta( $user_id, '_lp_custom_register', LP_Helper::sanitize_params_submitted( $_POST['_lp_custom_register'] ) );\n\t}\n}\n\nadd_action( 'personal_options_update', 'lp_user_custom_register_fields' );\nadd_action( 'edit_user_profile_update', 'lp_user_custom_register_fields' );\n\nfunction lp_get_user_custom_register_fields( $user_id = 0 ) {\n\tif ( ! $user_id ) {\n\t\t$user_id = get_current_user_id();\n\t}\n\n\t$register_fields = get_the_author_meta( '_lp_custom_register', $user_id );\n\t$defaults        = lp_get_user_custom_fields();\n\n\t$extra_profile_info = wp_parse_args( $register_fields, $defaults );\n\n\treturn apply_filters( 'lp/user-custom-register-fields', $register_fields, $user_id );\n}\n\nfunction lp_get_user_custom_fields() {\n\t$custom_fields = LP()->settings()->get( 'register_profile_fields' );\n\n\t$output = array();\n\n\tif ( $custom_fields ) {\n\t\tforeach ( $custom_fields as $field ) {\n\t\t\t$output[ $field['id'] ] = '';\n\t\t}\n\t}\n\n\treturn $output;\n}\n\n/**\n * Check extra user data is a social profile.\n *\n * @param $key\n *\n * @return bool\n * @since 4.0.0\n */\nfunction learn_press_is_social_profile( $key ) {\n\t$is_socials = learn_press_social_profiles();\n\n\treturn in_array( $key, $is_socials );\n}\n\nfunction learn_press_social_profile_name( $key ) {\n\t$name = '';\n\tswitch ( $key ) {\n\t\tcase 'facebook':\n\t\t\t$name = esc_html__( 'Facebook Profile', 'learnpress' );\n\t\t\tbreak;\n\t\tcase 'twitter':\n\t\t\t$name = esc_html__( 'Twitter Profile', 'learnpress' );\n\t\t\tbreak;\n\t\tcase 'googleplus':\n\t\t\t$name = esc_html__( 'Google Profile', 'learnpress' );\n\t\t\tbreak;\n\t\tcase 'youtube':\n\t\t\t$name = esc_html__( 'Youtube Channel', 'learnpress' );\n\t\t\tbreak;\n\t\tcase 'linkedin':\n\t\t\t$name = esc_html__( 'Linkedin Profile', 'learnpress' );\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$name = ucfirst( $key );\n\t}\n\n\treturn apply_filters( 'learn-press/social-profile-name', $name, $key );\n}\n\n/**\n * Get extra profile fields will be registered in backend profile.\n *\n * @return array\n * @since 4.0.0\n */\nfunction learn_press_get_user_extra_profile_fields() {\n\t$socials = learn_press_social_profiles();\n\t$fields  = array();\n\n\tforeach ( $socials as $social ) {\n\t\t$fields[ $social ] = learn_press_social_profile_name( $social );\n\t}\n\n\treturn apply_filters( 'learn-press/user-extra-profile-fields', $fields );\n}\n\n/**\n * Show courses user enrolled on backend\n *\n * @param $user\n *\n * @return void\n */\nfunction learn_press_user_profile_data( $user ) {\n\tif ( ! is_admin() ) {\n\t\treturn;\n\t}\n\n\tlearn_press_admin_view( 'backend-user-profile', array( 'user' => $user ) );\n\tlearn_press_admin_view( 'user/courses.php', array( 'user_id' => $user->ID ) );\n}\n//add_action( 'show_user_profile', 'learn_press_user_profile_data', 1000 );\nadd_action( 'edit_user_profile', 'learn_press_user_profile_data', 1000 );\n\nfunction learnpress_get_count_by_user( $user_id = '', $post_type = 'lp_course' ) {\n\tif ( empty( $user_id ) ) {\n\t\treturn false;\n\t}\n\n\t$args = array(\n\t\t'author'         => $user_id,\n\t\t'posts_per_page' => - 1,\n\t\t'post_type'      => $post_type,\n\t\t'post_status'    => 'any',\n\t);\n\n\t$posts = get_posts( $args );\n\n\t$output = array(\n\t\t'all'     => count( $posts ),\n\t\t'publish' => array(),\n\t\t'pending' => array(),\n\t);\n\n\t$pending = $public = array();\n\n\tif ( ! empty( $posts ) ) {\n\t\tforeach ( $posts as $post ) {\n\t\t\tswitch ( $post->post_status ) {\n\t\t\t\tcase 'pending':\n\t\t\t\t\t$pending[] = $post;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'publish':\n\t\t\t\t\t$public[] = $post;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn array(\n\t\t'all'     => count( $posts ),\n\t\t'publish' => count( $public ),\n\t\t'pending' => count( $pending ),\n\t);\n\n}\n\n/*\nadd_action(\n\t'admin_init',\n\tfunction() {\n\t\t$custom_fields = LP()->settings()->get( 'register_profile_fields' );\n\n\t\t$custom_fields = LP_Helper::sanitize_params_submitted( $custom_fields );\n\n\t\tif ( ! empty( $custom_fields ) ) {\n\t\t\t$output = array();\n\n\t\t\tforeach ( $custom_fields as $key => $field ) {\n\t\t\t\tif ( ! isset( $field['id'] ) ) {\n\t\t\t\t\t$output[ $key ] = array(\n\t\t\t\t\t\t'id'       => $field['name'],\n\t\t\t\t\t\t'name'     => $field['name'] ?? '',\n\t\t\t\t\t\t'type'     => $field['type'] ?? '',\n\t\t\t\t\t\t'required' => $field['required'] ?? '',\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$output[ $key ] = $field;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tupdate_option( 'learn_press_register_profile_fields', $output );\n\t\t}\n\t}\n);*/\n"], "filenames": ["assets/src/js/frontend/profile.js", "inc/admin/class-lp-admin-ajax.php", "inc/class-lp-ajax.php", "inc/user/lp-user-functions.php"], "buggy_code_start_loc": [27, 1198, 14, 1081], "buggy_code_end_loc": [61, 1262, 233, 1156], "fixing_code_start_loc": [27, 1199, 14, 1082], "fixing_code_end_loc": [71, 1364, 200, 1152], "type": "CWE-610", "message": "Users of the LearnPress WordPress plugin before 4.1.5 can upload an image as a profile avatar after the registration. After this process the user crops and saves the image. Then a \"POST\" request that contains user supplied name of the image is sent to the server for renaming and cropping of the image. As a result of this request, the name of the user-supplied image is changed with a MD5 value. This process can be conducted only when type of the image is JPG or PNG. An attacker can use this vulnerability in order to rename an arbitrary image file. By doing this, they could destroy the design of the web site.", "other": {"cve": {"id": "CVE-2022-0377", "sourceIdentifier": "contact@wpscan.com", "published": "2022-02-28T09:15:09.093", "lastModified": "2022-03-08T16:39:46.640", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Users of the LearnPress WordPress plugin before 4.1.5 can upload an image as a profile avatar after the registration. After this process the user crops and saves the image. Then a \"POST\" request that contains user supplied name of the image is sent to the server for renaming and cropping of the image. As a result of this request, the name of the user-supplied image is changed with a MD5 value. This process can be conducted only when type of the image is JPG or PNG. An attacker can use this vulnerability in order to rename an arbitrary image file. By doing this, they could destroy the design of the web site."}, {"lang": "es", "value": "Los usuarios del plugin LearnPress de WordPress versiones anteriores a 4.1.5, pueden subir una imagen como avatar de perfil tras el registro. Tras este proceso, el usuario recorta y guarda la imagen. A continuaci\u00f3n, se env\u00eda al servidor una petici\u00f3n \"POST\" que contiene el nombre de la imagen suministrado por el usuario para cambiar el nombre y recortar la imagen. Como resultado de esta petici\u00f3n, el nombre de la imagen suministrada por el usuario es cambiada con un valor MD5. Este proceso s\u00f3lo puede llevarse a cabo cuando el tipo de la imagen es JPG o PNG. Un atacante puede usar esta vulnerabilidad para cambiar el nombre de un archivo de imagen arbitrario. Al hacer esto, podr\u00edan destruir el dise\u00f1o del sitio web."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-610"}]}, {"source": "contact@wpscan.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-73"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thimpress:learnpress:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "4.1.5", "matchCriteriaId": "F74AC61D-6728-4759-B5A4-F03B9519485C"}]}]}], "references": [{"url": "https://bozogullarindan.com/en/2022/01/wordpress-learnpress-plugin-4.1.4.1-arbitrary-image-renaming/", "source": "contact@wpscan.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/LearnPress/learnpress/commit/d1dc4af7ef2950f1000abc21bd9520fb3eb98faf", "source": "contact@wpscan.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://wpscan.com/vulnerability/0d95ada6-53e3-4a80-a395-eacd7b090f26", "source": "contact@wpscan.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LearnPress/learnpress/commit/d1dc4af7ef2950f1000abc21bd9520fb3eb98faf"}}