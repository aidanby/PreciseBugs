{"buggy_code": ["<?php\n\nnamespace BookStack\\Util;\n\nuse DOMDocument;\nuse DOMNodeList;\nuse DOMXPath;\n\nclass HtmlContentFilter\n{\n    /**\n     * Remove all of the script elements from the given HTML.\n     */\n    public static function removeScripts(string $html): string\n    {\n        if (empty($html)) {\n            return $html;\n        }\n\n        $html = '<body>' . $html . '</body>';\n        libxml_use_internal_errors(true);\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n\n        // Remove standard script tags\n        $scriptElems = $xPath->query('//script');\n        static::removeNodes($scriptElems);\n\n        // Remove clickable links to JavaScript URI\n        $badLinks = $xPath->query('//*[' . static::xpathContains('@href', 'javascript:') . ']');\n        static::removeNodes($badLinks);\n\n        // Remove forms with calls to JavaScript URI\n        $badForms = $xPath->query('//*[' . static::xpathContains('@action', 'javascript:') . '] | //*[' . static::xpathContains('@formaction', 'javascript:') . ']');\n        static::removeNodes($badForms);\n\n        // Remove meta tag to prevent external redirects\n        $metaTags = $xPath->query('//meta[' . static::xpathContains('@content', 'url') . ']');\n        static::removeNodes($metaTags);\n\n        // Remove data or JavaScript iFrames\n        $badIframes = $xPath->query('//*[' . static::xpathContains('@src', 'data:') . '] | //*[' . static::xpathContains('@src', 'javascript:') . '] | //*[@srcdoc]');\n        static::removeNodes($badIframes);\n\n        // Remove 'on*' attributes\n        $onAttributes = $xPath->query('//@*[starts-with(name(), \\'on\\')]');\n        foreach ($onAttributes as $attr) {\n            /** @var \\DOMAttr $attr */\n            $attrName = $attr->nodeName;\n            $attr->parentNode->removeAttribute($attrName);\n        }\n\n        $html = '';\n        $topElems = $doc->documentElement->childNodes->item(0)->childNodes;\n        foreach ($topElems as $child) {\n            $html .= $doc->saveHTML($child);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Create a xpath contains statement with a translation automatically built within\n     * to affectively search in a cases-insensitive manner.\n     */\n    protected static function xpathContains(string $property, string $value): string\n    {\n        $value = strtolower($value);\n        $upperVal = strtoupper($value);\n        return 'contains(translate(' . $property . ', \\'' . $upperVal . '\\', \\'' . $value . '\\'), \\'' . $value . '\\')';\n    }\n\n    /**\n     * Removed all of the given DOMNodes.\n     */\n    protected static function removeNodes(DOMNodeList $nodes): void\n    {\n        foreach ($nodes as $node) {\n            $node->parentNode->removeChild($node);\n        }\n    }\n}\n", "<?php\n\nnamespace Tests\\Entity;\n\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Entities\\Tools\\PageContent;\nuse Tests\\TestCase;\nuse Tests\\Uploads\\UsesImages;\n\nclass PageContentTest extends TestCase\n{\n    use UsesImages;\n\n    protected $base64Jpeg = '/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k=';\n\n    public function test_page_includes()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()->where('id', '!=', $page->id)->first();\n\n        $secondPage->html = \"<p id='section1'>Hello, This is a test</p><p id='section2'>This is a second block of content</p>\";\n        $secondPage->save();\n\n        $this->asEditor();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertDontSee('Hello, This is a test');\n\n        $originalHtml = $page->html;\n        $page->html .= \"{{@{$secondPage->id}}}\";\n        $page->save();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertSee('Hello, This is a test');\n        $pageContent->assertSee('This is a second block of content');\n\n        $page->html = $originalHtml . \" Well {{@{$secondPage->id}#section2}}\";\n        $page->save();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertDontSee('Hello, This is a test');\n        $pageContent->assertSee('Well This is a second block of content');\n    }\n\n    public function test_saving_page_with_includes()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()->where('id', '!=', $page->id)->first();\n\n        $this->asEditor();\n        $includeTag = '{{@' . $secondPage->id . '}}';\n        $page->html = '<p>' . $includeTag . '</p>';\n\n        $resp = $this->put($page->getUrl(), ['name' => $page->name, 'html' => $page->html, 'summary' => '']);\n\n        $resp->assertStatus(302);\n\n        $page = Page::find($page->id);\n        $this->assertStringContainsString($includeTag, $page->html);\n        $this->assertEquals('', $page->text);\n    }\n\n    public function test_page_includes_do_not_break_tables()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()->where('id', '!=', $page->id)->first();\n\n        $content = '<table id=\"table\"><tbody><tr><td>test</td></tr></tbody></table>';\n        $secondPage->html = $content;\n        $secondPage->save();\n\n        $page->html = \"{{@{$secondPage->id}#table}}\";\n        $page->save();\n\n        $this->asEditor();\n        $pageResp = $this->get($page->getUrl());\n        $pageResp->assertSee($content);\n    }\n\n    public function test_page_includes_rendered_on_book_export()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()\n            ->where('book_id', '!=', $page->book_id)\n            ->first();\n\n        $content = '<p id=\"bkmrk-meow\">my cat is awesome and scratchy</p>';\n        $secondPage->html = $content;\n        $secondPage->save();\n\n        $page->html = \"{{@{$secondPage->id}#bkmrk-meow}}\";\n        $page->save();\n\n        $this->asEditor();\n        $htmlContent = $this->get($page->book->getUrl('/export/html'));\n        $htmlContent->assertSee('my cat is awesome and scratchy');\n    }\n\n    public function test_page_content_scripts_removed_by_default()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n        $script = 'abc123<script>console.log(\"hello-test\")</script>abc123';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertDontSee($script);\n        $pageView->assertSee('abc123abc123');\n    }\n\n    public function test_more_complex_content_script_escaping_scenarios()\n    {\n        $checks = [\n            \"<p>Some script</p><script>alert('cat')</script>\",\n            \"<div><div><div><div><p>Some script</p><script>alert('cat')</script></div></div></div></div>\",\n            \"<p>Some script<script>alert('cat')</script></p>\",\n            \"<p>Some script <div><script>alert('cat')</script></div></p>\",\n            \"<p>Some script <script><div>alert('cat')</script></div></p>\",\n            \"<p>Some script <script><div>alert('cat')</script><script><div>alert('cat')</script></p><script><div>alert('cat')</script>\",\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<script>');\n            $pageView->assertElementNotContains('.page-content', '</script>');\n        }\n    }\n\n    public function test_js_and_base64_src_urls_are_removed()\n    {\n        $checks = [\n            '<iframe src=\"javascript:alert(document.cookie)\"></iframe>',\n            '<iframe src=\"JavAScRipT:alert(document.cookie)\"></iframe>',\n            '<iframe src=\"JavAScRipT:alert(document.cookie)\"></iframe>',\n            '<iframe SRC=\" javascript: alert(document.cookie)\"></iframe>',\n            '<iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<iframe src=\"DaTa:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<iframe src=\" data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<img src=\"javascript:alert(document.cookie)\"/>',\n            '<img src=\"JavAScRipT:alert(document.cookie)\"/>',\n            '<img src=\"JavAScRipT:alert(document.cookie)\"/>',\n            '<img SRC=\" javascript: alert(document.cookie)\"/>',\n            '<img src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\"/>',\n            '<img src=\"DaTa:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\"/>',\n            '<img src=\" data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\"/>',\n            '<iframe srcdoc=\"<script>window.alert(document.cookie)</script>\"></iframe>',\n            '<iframe SRCdoc=\"<script>window.alert(document.cookie)</script>\"></iframe>',\n            '<IMG SRC=`javascript:alert(\"RSnake says, \\'XSS\\'\")`>',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<iframe>');\n            $pageView->assertElementNotContains('.page-content', '<img');\n            $pageView->assertElementNotContains('.page-content', '</iframe>');\n            $pageView->assertElementNotContains('.page-content', 'src=');\n            $pageView->assertElementNotContains('.page-content', 'javascript:');\n            $pageView->assertElementNotContains('.page-content', 'data:');\n            $pageView->assertElementNotContains('.page-content', 'base64');\n        }\n    }\n\n    public function test_javascript_uri_links_are_removed()\n    {\n        $checks = [\n            '<a id=\"xss\" href=\"javascript:alert(document.cookie)>Click me</a>',\n            '<a id=\"xss\" href=\"javascript: alert(document.cookie)>Click me</a>',\n            '<a id=\"xss\" href=\"JaVaScRiPt: alert(document.cookie)>Click me</a>',\n            '<a id=\"xss\" href=\" JaVaScRiPt: alert(document.cookie)>Click me</a>',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<a id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', 'href=javascript:');\n        }\n    }\n\n    public function test_form_actions_with_javascript_are_removed()\n    {\n        $checks = [\n            '<form><input id=\"xss\" type=submit formaction=javascript:alert(document.domain) value=Submit><input></form>',\n            '<form ><button id=\"xss\" formaction=\"JaVaScRiPt:alert(document.domain)\">Click me</button></form>',\n            '<form ><button id=\"xss\" formaction=javascript:alert(document.domain)>Click me</button></form>',\n            '<form id=\"xss\" action=javascript:alert(document.domain)><input type=submit value=Submit></form>',\n            '<form id=\"xss\" action=\"JaVaScRiPt:alert(document.domain)\"><input type=submit value=Submit></form>',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<button id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', '<input id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', '<form id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', 'action=javascript:');\n            $pageView->assertElementNotContains('.page-content', 'formaction=javascript:');\n        }\n    }\n\n    public function test_metadata_redirects_are_removed()\n    {\n        $checks = [\n            '<meta http-equiv=\"refresh\" content=\"0; url=//external_url\">',\n            '<meta http-equiv=\"refresh\" ConTeNt=\"0; url=//external_url\">',\n            '<meta http-equiv=\"refresh\" content=\"0; UrL=//external_url\">',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<meta>');\n            $pageView->assertElementNotContains('.page-content', '</meta>');\n            $pageView->assertElementNotContains('.page-content', 'content=');\n            $pageView->assertElementNotContains('.page-content', 'external_url');\n        }\n    }\n\n    public function test_page_inline_on_attributes_removed_by_default()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n        $script = '<p onmouseenter=\"console.log(\\'test\\')\">Hello</p>';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertDontSee($script);\n        $pageView->assertSee('<p>Hello</p>');\n    }\n\n    public function test_more_complex_inline_on_attributes_escaping_scenarios()\n    {\n        $checks = [\n            '<p onclick=\"console.log(\\'test\\')\">Hello</p>',\n            '<p OnCliCk=\"console.log(\\'test\\')\">Hello</p>',\n            '<div>Lorem ipsum dolor sit amet.</div><p onclick=\"console.log(\\'test\\')\">Hello</p>',\n            '<div>Lorem ipsum dolor sit amet.<p onclick=\"console.log(\\'test\\')\">Hello</p></div>',\n            '<div><div><div><div>Lorem ipsum dolor sit amet.<p onclick=\"console.log(\\'test\\')\">Hello</p></div></div></div></div>',\n            '<div onclick=\"console.log(\\'test\\')\">Lorem ipsum dolor sit amet.</div><p onclick=\"console.log(\\'test\\')\">Hello</p><div></div>',\n            '<a a=\"<img src=1 onerror=\\'alert(1)\\'> ',\n            '\\<a onclick=\"alert(document.cookie)\"\\>xss link\\</a\\>',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', 'onclick');\n        }\n    }\n\n    public function test_page_content_scripts_show_when_configured()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n        config()->push('app.allow_content_scripts', 'true');\n\n        $script = 'abc123<script>console.log(\"hello-test\")</script>abc123';\n        $page->html = \"no escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertSee($script);\n        $pageView->assertDontSee('abc123abc123');\n    }\n\n    public function test_page_inline_on_attributes_show_if_configured()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n        config()->push('app.allow_content_scripts', 'true');\n\n        $script = '<p onmouseenter=\"console.log(\\'test\\')\">Hello</p>';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertSee($script);\n        $pageView->assertDontSee('<p>Hello</p>');\n    }\n\n    public function test_duplicate_ids_does_not_break_page_render()\n    {\n        $this->asEditor();\n        $pageA = Page::query()->first();\n        $pageB = Page::query()->where('id', '!=', $pageA->id)->first();\n\n        $content = '<ul id=\"bkmrk-xxx-%28\"></ul> <ul id=\"bkmrk-xxx-%28\"></ul>';\n        $pageA->html = $content;\n        $pageA->save();\n\n        $pageB->html = '<ul id=\"bkmrk-xxx-%28\"></ul> <p>{{@' . $pageA->id . '#test}}</p>';\n        $pageB->save();\n\n        $pageView = $this->get($pageB->getUrl());\n        $pageView->assertSuccessful();\n    }\n\n    public function test_duplicate_ids_fixed_on_page_save()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '<ul id=\"bkmrk-test\"><li>test a</li><li><ul id=\"bkmrk-test\"><li>test b</li></ul></li></ul>';\n        $pageSave = $this->put($page->getUrl(), [\n            'name'    => $page->name,\n            'html'    => $content,\n            'summary' => '',\n        ]);\n        $pageSave->assertRedirect();\n\n        $updatedPage = Page::query()->where('id', '=', $page->id)->first();\n        $this->assertEquals(substr_count($updatedPage->html, 'bkmrk-test\"'), 1);\n    }\n\n    public function test_anchors_referencing_non_bkmrk_ids_rewritten_after_save()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '<h1 id=\"non-standard-id\">test</h1><p><a href=\"#non-standard-id\">link</a></p>';\n        $this->put($page->getUrl(), [\n            'name'    => $page->name,\n            'html'    => $content,\n            'summary' => '',\n        ]);\n\n        $updatedPage = Page::query()->where('id', '=', $page->id)->first();\n        $this->assertStringContainsString('id=\"bkmrk-test\"', $updatedPage->html);\n        $this->assertStringContainsString('href=\"#bkmrk-test\"', $updatedPage->html);\n    }\n\n    public function test_get_page_nav_sets_correct_properties()\n    {\n        $content = '<h1 id=\"testa\">Hello</h1><h2 id=\"testb\">There</h2><h3 id=\"testc\">Donkey</h3>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(3, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h1',\n            'link'     => '#testa',\n            'text'     => 'Hello',\n            'level'    => 1,\n        ], $navMap[0]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h2',\n            'link'     => '#testb',\n            'text'     => 'There',\n            'level'    => 2,\n        ], $navMap[1]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h3',\n            'link'     => '#testc',\n            'text'     => 'Donkey',\n            'level'    => 3,\n        ], $navMap[2]);\n    }\n\n    public function test_get_page_nav_does_not_show_empty_titles()\n    {\n        $content = '<h1 id=\"testa\">Hello</h1><h2 id=\"testb\">&nbsp;</h2><h3 id=\"testc\"></h3>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(1, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h1',\n            'link'     => '#testa',\n            'text'     => 'Hello',\n        ], $navMap[0]);\n    }\n\n    public function test_get_page_nav_shifts_headers_if_only_smaller_ones_are_used()\n    {\n        $content = '<h4 id=\"testa\">Hello</h4><h5 id=\"testb\">There</h5><h6 id=\"testc\">Donkey</h6>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(3, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h4',\n            'level'    => 1,\n        ], $navMap[0]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h5',\n            'level'    => 2,\n        ], $navMap[1]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h6',\n            'level'    => 3,\n        ], $navMap[2]);\n    }\n\n    public function test_page_text_decodes_html_entities()\n    {\n        $page = Page::query()->first();\n\n        $this->actingAs($this->getAdmin())\n            ->put($page->getUrl(''), [\n                'name' => 'Testing',\n                'html' => '<p>&quot;Hello &amp; welcome&quot;</p>',\n            ]);\n\n        $page->refresh();\n        $this->assertEquals('\"Hello & welcome\"', $page->text);\n    }\n\n    public function test_page_markdown_table_rendering()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,  'markdown' => $content,\n            'html' => '', 'summary' => '',\n        ]);\n\n        $page->refresh();\n        $this->assertStringContainsString('</tbody>', $page->html);\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertElementExists('.page-content table tbody td');\n    }\n\n    public function test_page_markdown_task_list_rendering()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '- [ ] Item a\n- [x] Item b';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,  'markdown' => $content,\n            'html' => '', 'summary' => '',\n        ]);\n\n        $page->refresh();\n        $this->assertStringContainsString('input', $page->html);\n        $this->assertStringContainsString('type=\"checkbox\"', $page->html);\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertElementExists('.page-content li.task-list-item input[type=checkbox]');\n        $pageView->assertElementExists('.page-content li.task-list-item input[type=checkbox][checked=checked]');\n    }\n\n    public function test_page_markdown_strikethrough_rendering()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '~~some crossed out text~~';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,  'markdown' => $content,\n            'html' => '', 'summary' => '',\n        ]);\n\n        $page->refresh();\n        $this->assertStringMatchesFormat('%A<s%A>some crossed out text</s>%A', $page->html);\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertElementExists('.page-content p > s');\n    }\n\n    public function test_page_markdown_single_html_comment_saving()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '<!-- Test Comment -->';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,  'markdown' => $content,\n            'html' => '', 'summary' => '',\n        ]);\n\n        $page->refresh();\n        $this->assertStringMatchesFormat($content, $page->html);\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertSee($content);\n    }\n\n    public function test_base64_images_get_extracted_from_page_content()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $this->put($page->getUrl(), [\n            'name' => $page->name, 'summary' => '',\n            'html' => '<p>test<img src=\"data:image/jpeg;base64,' . $this->base64Jpeg . '\"/></p>',\n        ]);\n\n        $page->refresh();\n        $this->assertStringMatchesFormat('%A<p%A>test<img src=\"http://localhost/uploads/images/gallery/%A.jpeg\">%A</p>%A', $page->html);\n\n        $matches = [];\n        preg_match('/src=\"http:\\/\\/localhost(.*?)\"/', $page->html, $matches);\n        $imagePath = $matches[1];\n        $imageFile = public_path($imagePath);\n        $this->assertEquals(base64_decode($this->base64Jpeg), file_get_contents($imageFile));\n\n        $this->deleteImage($imagePath);\n    }\n\n    public function test_base64_images_get_extracted_when_containing_whitespace()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $base64PngWithWhitespace = \"iVBORw0KGg\\noAAAANSUhE\\tUgAAAAEAAAA BCA   YAAAAfFcSJAAA\\n\\t ACklEQVR4nGMAAQAABQAB\";\n        $base64PngWithoutWhitespace = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAACklEQVR4nGMAAQAABQAB';\n        $this->put($page->getUrl(), [\n            'name' => $page->name, 'summary' => '',\n            'html' => '<p>test<img src=\"data:image/png;base64,' . $base64PngWithWhitespace . '\"/></p>',\n        ]);\n\n        $page->refresh();\n        $this->assertStringMatchesFormat('%A<p%A>test<img src=\"http://localhost/uploads/images/gallery/%A.png\">%A</p>%A', $page->html);\n\n        $matches = [];\n        preg_match('/src=\"http:\\/\\/localhost(.*?)\"/', $page->html, $matches);\n        $imagePath = $matches[1];\n        $imageFile = public_path($imagePath);\n        $this->assertEquals(base64_decode($base64PngWithoutWhitespace), file_get_contents($imageFile));\n\n        $this->deleteImage($imagePath);\n    }\n\n    public function test_base64_images_blanked_if_not_supported_extension_for_extract()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $this->put($page->getUrl(), [\n            'name' => $page->name, 'summary' => '',\n            'html' => '<p>test<img src=\"data:image/jiff;base64,' . $this->base64Jpeg . '\"/></p>',\n        ]);\n\n        $page->refresh();\n        $this->assertStringContainsString('<img src=\"\"', $page->html);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace BookStack\\Util;\n\nuse DOMAttr;\nuse DOMDocument;\nuse DOMNodeList;\nuse DOMXPath;\n\nclass HtmlContentFilter\n{\n    /**\n     * Remove all of the script elements from the given HTML.\n     */\n    public static function removeScripts(string $html): string\n    {\n        if (empty($html)) {\n            return $html;\n        }\n\n        $html = '<body>' . $html . '</body>';\n        libxml_use_internal_errors(true);\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n\n        // Remove standard script tags\n        $scriptElems = $xPath->query('//script');\n        static::removeNodes($scriptElems);\n\n        // Remove clickable links to JavaScript URI\n        $badLinks = $xPath->query('//*[' . static::xpathContains('@href', 'javascript:') . ']');\n        static::removeNodes($badLinks);\n\n        // Remove forms with calls to JavaScript URI\n        $badForms = $xPath->query('//*[' . static::xpathContains('@action', 'javascript:') . '] | //*[' . static::xpathContains('@formaction', 'javascript:') . ']');\n        static::removeNodes($badForms);\n\n        // Remove meta tag to prevent external redirects\n        $metaTags = $xPath->query('//meta[' . static::xpathContains('@content', 'url') . ']');\n        static::removeNodes($metaTags);\n\n        // Remove data or JavaScript iFrames\n        $badIframes = $xPath->query('//*[' . static::xpathContains('@src', 'data:') . '] | //*[' . static::xpathContains('@src', 'javascript:') . '] | //*[@srcdoc]');\n        static::removeNodes($badIframes);\n\n        // Remove elements with a xlink:href attribute\n        // Used in SVG but deprecated anyway, so we'll be a bit more heavy-handed here.\n        $xlinkHrefAttributes = $xPath->query('//@*[contains(name(), \\'xlink:href\\')]');\n        static::removeAttributes($xlinkHrefAttributes);\n\n        // Remove 'on*' attributes\n        $onAttributes = $xPath->query('//@*[starts-with(name(), \\'on\\')]');\n        static::removeAttributes($onAttributes);\n\n        $html = '';\n        $topElems = $doc->documentElement->childNodes->item(0)->childNodes;\n        foreach ($topElems as $child) {\n            $html .= $doc->saveHTML($child);\n        }\n\n        return $html;\n    }\n\n    /**\n     * Create a xpath contains statement with a translation automatically built within\n     * to affectively search in a cases-insensitive manner.\n     */\n    protected static function xpathContains(string $property, string $value): string\n    {\n        $value = strtolower($value);\n        $upperVal = strtoupper($value);\n        return 'contains(translate(' . $property . ', \\'' . $upperVal . '\\', \\'' . $value . '\\'), \\'' . $value . '\\')';\n    }\n\n    /**\n     * Remove all the given DOMNodes.\n     */\n    protected static function removeNodes(DOMNodeList $nodes): void\n    {\n        foreach ($nodes as $node) {\n            $node->parentNode->removeChild($node);\n        }\n    }\n\n    /**\n     * Remove all the given attribute nodes.\n     */\n    protected static function removeAttributes(DOMNodeList $attrs): void\n    {\n        /** @var DOMAttr $attr */\n        foreach ($attrs as $attr) {\n            $attrName = $attr->nodeName;\n            $attr->parentNode->removeAttribute($attrName);\n        }\n    }\n}\n", "<?php\n\nnamespace Tests\\Entity;\n\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Entities\\Tools\\PageContent;\nuse Tests\\TestCase;\nuse Tests\\Uploads\\UsesImages;\n\nclass PageContentTest extends TestCase\n{\n    use UsesImages;\n\n    protected $base64Jpeg = '/9j/2wBDAAMCAgICAgMCAgIDAwMDBAYEBAQEBAgGBgUGCQgKCgkICQkKDA8MCgsOCwkJDRENDg8QEBEQCgwSExIQEw8QEBD/yQALCAABAAEBAREA/8wABgAQEAX/2gAIAQEAAD8A0s8g/9k=';\n\n    public function test_page_includes()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()->where('id', '!=', $page->id)->first();\n\n        $secondPage->html = \"<p id='section1'>Hello, This is a test</p><p id='section2'>This is a second block of content</p>\";\n        $secondPage->save();\n\n        $this->asEditor();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertDontSee('Hello, This is a test');\n\n        $originalHtml = $page->html;\n        $page->html .= \"{{@{$secondPage->id}}}\";\n        $page->save();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertSee('Hello, This is a test');\n        $pageContent->assertSee('This is a second block of content');\n\n        $page->html = $originalHtml . \" Well {{@{$secondPage->id}#section2}}\";\n        $page->save();\n\n        $pageContent = $this->get($page->getUrl());\n        $pageContent->assertDontSee('Hello, This is a test');\n        $pageContent->assertSee('Well This is a second block of content');\n    }\n\n    public function test_saving_page_with_includes()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()->where('id', '!=', $page->id)->first();\n\n        $this->asEditor();\n        $includeTag = '{{@' . $secondPage->id . '}}';\n        $page->html = '<p>' . $includeTag . '</p>';\n\n        $resp = $this->put($page->getUrl(), ['name' => $page->name, 'html' => $page->html, 'summary' => '']);\n\n        $resp->assertStatus(302);\n\n        $page = Page::find($page->id);\n        $this->assertStringContainsString($includeTag, $page->html);\n        $this->assertEquals('', $page->text);\n    }\n\n    public function test_page_includes_do_not_break_tables()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()->where('id', '!=', $page->id)->first();\n\n        $content = '<table id=\"table\"><tbody><tr><td>test</td></tr></tbody></table>';\n        $secondPage->html = $content;\n        $secondPage->save();\n\n        $page->html = \"{{@{$secondPage->id}#table}}\";\n        $page->save();\n\n        $this->asEditor();\n        $pageResp = $this->get($page->getUrl());\n        $pageResp->assertSee($content);\n    }\n\n    public function test_page_includes_rendered_on_book_export()\n    {\n        $page = Page::query()->first();\n        $secondPage = Page::query()\n            ->where('book_id', '!=', $page->book_id)\n            ->first();\n\n        $content = '<p id=\"bkmrk-meow\">my cat is awesome and scratchy</p>';\n        $secondPage->html = $content;\n        $secondPage->save();\n\n        $page->html = \"{{@{$secondPage->id}#bkmrk-meow}}\";\n        $page->save();\n\n        $this->asEditor();\n        $htmlContent = $this->get($page->book->getUrl('/export/html'));\n        $htmlContent->assertSee('my cat is awesome and scratchy');\n    }\n\n    public function test_page_content_scripts_removed_by_default()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n        $script = 'abc123<script>console.log(\"hello-test\")</script>abc123';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertDontSee($script);\n        $pageView->assertSee('abc123abc123');\n    }\n\n    public function test_more_complex_content_script_escaping_scenarios()\n    {\n        $checks = [\n            \"<p>Some script</p><script>alert('cat')</script>\",\n            \"<div><div><div><div><p>Some script</p><script>alert('cat')</script></div></div></div></div>\",\n            \"<p>Some script<script>alert('cat')</script></p>\",\n            \"<p>Some script <div><script>alert('cat')</script></div></p>\",\n            \"<p>Some script <script><div>alert('cat')</script></div></p>\",\n            \"<p>Some script <script><div>alert('cat')</script><script><div>alert('cat')</script></p><script><div>alert('cat')</script>\",\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<script>');\n            $pageView->assertElementNotContains('.page-content', '</script>');\n        }\n    }\n\n    public function test_js_and_base64_src_urls_are_removed()\n    {\n        $checks = [\n            '<iframe src=\"javascript:alert(document.cookie)\"></iframe>',\n            '<iframe src=\"JavAScRipT:alert(document.cookie)\"></iframe>',\n            '<iframe src=\"JavAScRipT:alert(document.cookie)\"></iframe>',\n            '<iframe SRC=\" javascript: alert(document.cookie)\"></iframe>',\n            '<iframe src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<iframe src=\"DaTa:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<iframe src=\" data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\" frameborder=\"0\"></iframe>',\n            '<img src=\"javascript:alert(document.cookie)\"/>',\n            '<img src=\"JavAScRipT:alert(document.cookie)\"/>',\n            '<img src=\"JavAScRipT:alert(document.cookie)\"/>',\n            '<img SRC=\" javascript: alert(document.cookie)\"/>',\n            '<img src=\"data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\"/>',\n            '<img src=\"DaTa:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\"/>',\n            '<img src=\" data:text/html;base64,PHNjcmlwdD5hbGVydCgnaGVsbG8nKTwvc2NyaXB0Pg==\"/>',\n            '<iframe srcdoc=\"<script>window.alert(document.cookie)</script>\"></iframe>',\n            '<iframe SRCdoc=\"<script>window.alert(document.cookie)</script>\"></iframe>',\n            '<IMG SRC=`javascript:alert(\"RSnake says, \\'XSS\\'\")`>',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<iframe>');\n            $pageView->assertElementNotContains('.page-content', '<img');\n            $pageView->assertElementNotContains('.page-content', '</iframe>');\n            $pageView->assertElementNotContains('.page-content', 'src=');\n            $pageView->assertElementNotContains('.page-content', 'javascript:');\n            $pageView->assertElementNotContains('.page-content', 'data:');\n            $pageView->assertElementNotContains('.page-content', 'base64');\n        }\n    }\n\n    public function test_javascript_uri_links_are_removed()\n    {\n        $checks = [\n            '<a id=\"xss\" href=\"javascript:alert(document.cookie)>Click me</a>',\n            '<a id=\"xss\" href=\"javascript: alert(document.cookie)>Click me</a>',\n            '<a id=\"xss\" href=\"JaVaScRiPt: alert(document.cookie)>Click me</a>',\n            '<a id=\"xss\" href=\" JaVaScRiPt: alert(document.cookie)>Click me</a>',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<a id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', 'href=javascript:');\n        }\n    }\n\n    public function test_form_actions_with_javascript_are_removed()\n    {\n        $checks = [\n            '<form><input id=\"xss\" type=submit formaction=javascript:alert(document.domain) value=Submit><input></form>',\n            '<form ><button id=\"xss\" formaction=\"JaVaScRiPt:alert(document.domain)\">Click me</button></form>',\n            '<form ><button id=\"xss\" formaction=javascript:alert(document.domain)>Click me</button></form>',\n            '<form id=\"xss\" action=javascript:alert(document.domain)><input type=submit value=Submit></form>',\n            '<form id=\"xss\" action=\"JaVaScRiPt:alert(document.domain)\"><input type=submit value=Submit></form>',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<button id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', '<input id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', '<form id=\"xss\"');\n            $pageView->assertElementNotContains('.page-content', 'action=javascript:');\n            $pageView->assertElementNotContains('.page-content', 'formaction=javascript:');\n        }\n    }\n\n    public function test_metadata_redirects_are_removed()\n    {\n        $checks = [\n            '<meta http-equiv=\"refresh\" content=\"0; url=//external_url\">',\n            '<meta http-equiv=\"refresh\" ConTeNt=\"0; url=//external_url\">',\n            '<meta http-equiv=\"refresh\" content=\"0; UrL=//external_url\">',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', '<meta>');\n            $pageView->assertElementNotContains('.page-content', '</meta>');\n            $pageView->assertElementNotContains('.page-content', 'content=');\n            $pageView->assertElementNotContains('.page-content', 'external_url');\n        }\n    }\n\n    public function test_page_inline_on_attributes_removed_by_default()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n        $script = '<p onmouseenter=\"console.log(\\'test\\')\">Hello</p>';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertDontSee($script);\n        $pageView->assertSee('<p>Hello</p>');\n    }\n\n    public function test_more_complex_inline_on_attributes_escaping_scenarios()\n    {\n        $checks = [\n            '<p onclick=\"console.log(\\'test\\')\">Hello</p>',\n            '<p OnCliCk=\"console.log(\\'test\\')\">Hello</p>',\n            '<div>Lorem ipsum dolor sit amet.</div><p onclick=\"console.log(\\'test\\')\">Hello</p>',\n            '<div>Lorem ipsum dolor sit amet.<p onclick=\"console.log(\\'test\\')\">Hello</p></div>',\n            '<div><div><div><div>Lorem ipsum dolor sit amet.<p onclick=\"console.log(\\'test\\')\">Hello</p></div></div></div></div>',\n            '<div onclick=\"console.log(\\'test\\')\">Lorem ipsum dolor sit amet.</div><p onclick=\"console.log(\\'test\\')\">Hello</p><div></div>',\n            '<a a=\"<img src=1 onerror=\\'alert(1)\\'> ',\n            '\\<a onclick=\"alert(document.cookie)\"\\>xss link\\</a\\>',\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', 'onclick');\n        }\n    }\n\n    public function test_page_content_scripts_show_when_configured()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n        config()->push('app.allow_content_scripts', 'true');\n\n        $script = 'abc123<script>console.log(\"hello-test\")</script>abc123';\n        $page->html = \"no escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertSee($script);\n        $pageView->assertDontSee('abc123abc123');\n    }\n\n    public function test_svg_xlink_hrefs_are_removed()\n    {\n        $checks = [\n            '<svg id=\"test\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"100\" height=\"100\"><a xlink:href=\"javascript:alert(document.domain)\"><rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" /></a></svg>',\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><use xlink:href=\"data:application/xml;base64 ,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIj4KPGRlZnM+CjxjaXJjbGUgaWQ9InRlc3QiIHI9IjAiIGN4PSIwIiBjeT0iMCIgc3R5bGU9ImZpbGw6ICNGMDAiPgo8c2V0IGF0dHJpYnV0ZU5hbWU9ImZpbGwiIGF0dHJpYnV0ZVR5cGU9IkNTUyIgb25iZWdpbj0nYWxlcnQoZG9jdW1lbnQuZG9tYWluKScKb25lbmQ9J2FsZXJ0KCJvbmVuZCIpJyB0bz0iIzAwRiIgYmVnaW49IjBzIiBkdXI9Ijk5OXMiIC8+CjwvY2lyY2xlPgo8L2RlZnM+Cjx1c2UgeGxpbms6aHJlZj0iI3Rlc3QiLz4KPC9zdmc+#test\"/></svg>'\n        ];\n\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        foreach ($checks as $check) {\n            $page->html = $check;\n            $page->save();\n\n            $pageView = $this->get($page->getUrl());\n            $pageView->assertStatus(200);\n            $pageView->assertElementNotContains('.page-content', 'alert');\n            $pageView->assertElementNotContains('.page-content', 'xlink:href');\n            $pageView->assertElementNotContains('.page-content', 'application/xml');\n        }\n    }\n\n    public function test_page_inline_on_attributes_show_if_configured()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n        config()->push('app.allow_content_scripts', 'true');\n\n        $script = '<p onmouseenter=\"console.log(\\'test\\')\">Hello</p>';\n        $page->html = \"escape {$script}\";\n        $page->save();\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertSee($script);\n        $pageView->assertDontSee('<p>Hello</p>');\n    }\n\n    public function test_duplicate_ids_does_not_break_page_render()\n    {\n        $this->asEditor();\n        $pageA = Page::query()->first();\n        $pageB = Page::query()->where('id', '!=', $pageA->id)->first();\n\n        $content = '<ul id=\"bkmrk-xxx-%28\"></ul> <ul id=\"bkmrk-xxx-%28\"></ul>';\n        $pageA->html = $content;\n        $pageA->save();\n\n        $pageB->html = '<ul id=\"bkmrk-xxx-%28\"></ul> <p>{{@' . $pageA->id . '#test}}</p>';\n        $pageB->save();\n\n        $pageView = $this->get($pageB->getUrl());\n        $pageView->assertSuccessful();\n    }\n\n    public function test_duplicate_ids_fixed_on_page_save()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '<ul id=\"bkmrk-test\"><li>test a</li><li><ul id=\"bkmrk-test\"><li>test b</li></ul></li></ul>';\n        $pageSave = $this->put($page->getUrl(), [\n            'name'    => $page->name,\n            'html'    => $content,\n            'summary' => '',\n        ]);\n        $pageSave->assertRedirect();\n\n        $updatedPage = Page::query()->where('id', '=', $page->id)->first();\n        $this->assertEquals(substr_count($updatedPage->html, 'bkmrk-test\"'), 1);\n    }\n\n    public function test_anchors_referencing_non_bkmrk_ids_rewritten_after_save()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '<h1 id=\"non-standard-id\">test</h1><p><a href=\"#non-standard-id\">link</a></p>';\n        $this->put($page->getUrl(), [\n            'name'    => $page->name,\n            'html'    => $content,\n            'summary' => '',\n        ]);\n\n        $updatedPage = Page::query()->where('id', '=', $page->id)->first();\n        $this->assertStringContainsString('id=\"bkmrk-test\"', $updatedPage->html);\n        $this->assertStringContainsString('href=\"#bkmrk-test\"', $updatedPage->html);\n    }\n\n    public function test_get_page_nav_sets_correct_properties()\n    {\n        $content = '<h1 id=\"testa\">Hello</h1><h2 id=\"testb\">There</h2><h3 id=\"testc\">Donkey</h3>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(3, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h1',\n            'link'     => '#testa',\n            'text'     => 'Hello',\n            'level'    => 1,\n        ], $navMap[0]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h2',\n            'link'     => '#testb',\n            'text'     => 'There',\n            'level'    => 2,\n        ], $navMap[1]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h3',\n            'link'     => '#testc',\n            'text'     => 'Donkey',\n            'level'    => 3,\n        ], $navMap[2]);\n    }\n\n    public function test_get_page_nav_does_not_show_empty_titles()\n    {\n        $content = '<h1 id=\"testa\">Hello</h1><h2 id=\"testb\">&nbsp;</h2><h3 id=\"testc\"></h3>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(1, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h1',\n            'link'     => '#testa',\n            'text'     => 'Hello',\n        ], $navMap[0]);\n    }\n\n    public function test_get_page_nav_shifts_headers_if_only_smaller_ones_are_used()\n    {\n        $content = '<h4 id=\"testa\">Hello</h4><h5 id=\"testb\">There</h5><h6 id=\"testc\">Donkey</h6>';\n        $pageContent = new PageContent(new Page(['html' => $content]));\n        $navMap = $pageContent->getNavigation($content);\n\n        $this->assertCount(3, $navMap);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h4',\n            'level'    => 1,\n        ], $navMap[0]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h5',\n            'level'    => 2,\n        ], $navMap[1]);\n        $this->assertArrayMapIncludes([\n            'nodeName' => 'h6',\n            'level'    => 3,\n        ], $navMap[2]);\n    }\n\n    public function test_page_text_decodes_html_entities()\n    {\n        $page = Page::query()->first();\n\n        $this->actingAs($this->getAdmin())\n            ->put($page->getUrl(''), [\n                'name' => 'Testing',\n                'html' => '<p>&quot;Hello &amp; welcome&quot;</p>',\n            ]);\n\n        $page->refresh();\n        $this->assertEquals('\"Hello & welcome\"', $page->text);\n    }\n\n    public function test_page_markdown_table_rendering()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '| Syntax      | Description |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,  'markdown' => $content,\n            'html' => '', 'summary' => '',\n        ]);\n\n        $page->refresh();\n        $this->assertStringContainsString('</tbody>', $page->html);\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertElementExists('.page-content table tbody td');\n    }\n\n    public function test_page_markdown_task_list_rendering()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '- [ ] Item a\n- [x] Item b';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,  'markdown' => $content,\n            'html' => '', 'summary' => '',\n        ]);\n\n        $page->refresh();\n        $this->assertStringContainsString('input', $page->html);\n        $this->assertStringContainsString('type=\"checkbox\"', $page->html);\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertElementExists('.page-content li.task-list-item input[type=checkbox]');\n        $pageView->assertElementExists('.page-content li.task-list-item input[type=checkbox][checked=checked]');\n    }\n\n    public function test_page_markdown_strikethrough_rendering()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '~~some crossed out text~~';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,  'markdown' => $content,\n            'html' => '', 'summary' => '',\n        ]);\n\n        $page->refresh();\n        $this->assertStringMatchesFormat('%A<s%A>some crossed out text</s>%A', $page->html);\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertElementExists('.page-content p > s');\n    }\n\n    public function test_page_markdown_single_html_comment_saving()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $content = '<!-- Test Comment -->';\n        $this->put($page->getUrl(), [\n            'name' => $page->name,  'markdown' => $content,\n            'html' => '', 'summary' => '',\n        ]);\n\n        $page->refresh();\n        $this->assertStringMatchesFormat($content, $page->html);\n\n        $pageView = $this->get($page->getUrl());\n        $pageView->assertStatus(200);\n        $pageView->assertSee($content);\n    }\n\n    public function test_base64_images_get_extracted_from_page_content()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $this->put($page->getUrl(), [\n            'name' => $page->name, 'summary' => '',\n            'html' => '<p>test<img src=\"data:image/jpeg;base64,' . $this->base64Jpeg . '\"/></p>',\n        ]);\n\n        $page->refresh();\n        $this->assertStringMatchesFormat('%A<p%A>test<img src=\"http://localhost/uploads/images/gallery/%A.jpeg\">%A</p>%A', $page->html);\n\n        $matches = [];\n        preg_match('/src=\"http:\\/\\/localhost(.*?)\"/', $page->html, $matches);\n        $imagePath = $matches[1];\n        $imageFile = public_path($imagePath);\n        $this->assertEquals(base64_decode($this->base64Jpeg), file_get_contents($imageFile));\n\n        $this->deleteImage($imagePath);\n    }\n\n    public function test_base64_images_get_extracted_when_containing_whitespace()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $base64PngWithWhitespace = \"iVBORw0KGg\\noAAAANSUhE\\tUgAAAAEAAAA BCA   YAAAAfFcSJAAA\\n\\t ACklEQVR4nGMAAQAABQAB\";\n        $base64PngWithoutWhitespace = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAACklEQVR4nGMAAQAABQAB';\n        $this->put($page->getUrl(), [\n            'name' => $page->name, 'summary' => '',\n            'html' => '<p>test<img src=\"data:image/png;base64,' . $base64PngWithWhitespace . '\"/></p>',\n        ]);\n\n        $page->refresh();\n        $this->assertStringMatchesFormat('%A<p%A>test<img src=\"http://localhost/uploads/images/gallery/%A.png\">%A</p>%A', $page->html);\n\n        $matches = [];\n        preg_match('/src=\"http:\\/\\/localhost(.*?)\"/', $page->html, $matches);\n        $imagePath = $matches[1];\n        $imageFile = public_path($imagePath);\n        $this->assertEquals(base64_decode($base64PngWithoutWhitespace), file_get_contents($imageFile));\n\n        $this->deleteImage($imagePath);\n    }\n\n    public function test_base64_images_blanked_if_not_supported_extension_for_extract()\n    {\n        $this->asEditor();\n        $page = Page::query()->first();\n\n        $this->put($page->getUrl(), [\n            'name' => $page->name, 'summary' => '',\n            'html' => '<p>test<img src=\"data:image/jiff;base64,' . $this->base64Jpeg . '\"/></p>',\n        ]);\n\n        $page->refresh();\n        $this->assertStringContainsString('<img src=\"\"', $page->html);\n    }\n}\n"], "filenames": ["app/Util/HtmlContentFilter.php", "tests/Entity/PageContentTest.php"], "buggy_code_start_loc": [4, 307], "buggy_code_end_loc": [82, 307], "fixing_code_start_loc": [5, 308], "fixing_code_end_loc": [97, 330], "type": "CWE-79", "message": "bookstack is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "other": {"cve": {"id": "CVE-2021-3767", "sourceIdentifier": "security@huntr.dev", "published": "2021-09-06T12:15:08.237", "lastModified": "2021-09-09T18:48:39.287", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "bookstack is vulnerable to Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"}, {"lang": "es", "value": "bookstack es vulnerable a una Neutralizaci\u00f3n Inapropiada de Entradas Durante la Generaci\u00f3n de P\u00e1ginas Web (\"Cross-site Scripting\")"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bookstackapp:bookstack:*:*:*:*:*:*:*:*", "versionEndExcluding": "21.08.2", "matchCriteriaId": "44F3B660-3A50-479D-9262-E08C2DA3E004"}]}]}], "references": [{"url": "https://github.com/bookstackapp/bookstack/commit/040997fdc4414776bcac06a3cbaac3b26b5e8a64", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/7ec92c85-30eb-4071-8891-6183446ca980", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bookstackapp/bookstack/commit/040997fdc4414776bcac06a3cbaac3b26b5e8a64"}}