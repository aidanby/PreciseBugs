{"buggy_code": [";(function ($) {\n    'use strict';\n\n    // cmf functions\n    $.extend(window.app, {\n        declineDuplicates: function ($scope) {\n            if ($scope.find('.js-decline-duplicate').length === 0) {\n                return;\n            }\n\n            $scope.on('click', '.js-decline-duplicate', function () {\n                var $duplicateItem = $(this).closest('.js-duplicates-item');\n                $duplicateItem.css(\"opacity\", 0.5);\n\n                $.ajax({\n                    url: '/admin/customermanagementframework/duplicates/decline/' + $(this).data('id'),\n                    success: function (data) {\n                        if (data.success) {\n                            $duplicateItem.remove();\n                        } else {\n                            $duplicateItem.css(\"opacity\", 1);\n                        }\n                    }\n                });\n            });\n        },\n        registerSaveFilterDefinition: function () {\n            $('#save-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $input = $('input[name=\"filterDefinition[name]\"]');\n                var $requiredMessage = $('#name-required-message');\n                if ($($input).val().length < 1) {\n                    $input.focus();\n                    $requiredMessage.slideDown();\n                    setTimeout(function () {\n                        $requiredMessage.slideUp();\n                    }, 3000);\n                    return;\n                } else $requiredMessage.hide();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                var $disabledSelects = $form.find('select:disabled');\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', false);\n                });\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/save').submit();\n                $form.attr('action', originalAction);\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', true);\n                });\n            });\n        },\n        registerUpdateFilterDefinition: function () {\n            $('#update-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $input = $('input[name=\"filterDefinition[name]\"]');\n                var $requiredMessage = $('#name-required-message');\n                if ($($input).val().length < 1) {\n                    $input.focus();\n                    $requiredMessage.slideDown();\n                    setTimeout(function () {\n                        $requiredMessage.slideUp();\n                    }, 3000);\n                    return;\n                } else $requiredMessage.hide();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                var $disabledSelects = $form.find('select:disabled');\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', false);\n                });\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/update').submit();\n                $form.attr('action', originalAction);\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', true);\n                });\n            });\n        },\n        registerShareFilterDefinition: function () {\n            $('#share-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/share').submit();\n                $form.attr('action', originalAction);\n            });\n        },\n        registerNewCustomerAction: function () {\n            var $newCustomerButton = $('#add-new-customer');\n            var isPimcoreAvailable = ('undefined' !== typeof window.top.pimcore);\n            if(!isPimcoreAvailable) $newCustomerButton.hide();\n            $newCustomerButton.on('click', function (e) {\n                if (!isPimcoreAvailable) {\n                    app.Logger.error(\n                        'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                        objectId\n                    );\n                    return false;\n                }\n                $.ajax({\n                    url: '/admin/customermanagementframework/customers/new',\n                    success: function (data) {\n                        var objectId = data.id;\n                        if ('undefined' !== typeof window.top.pimcore) {\n                            window.top.pimcore.helpers.openObject(objectId, 'object');\n                        } else {\n                            app.Logger.error(\n                                'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                                objectId\n                            );\n                        }\n                    }\n                });\n            });\n        }\n    });\n})(jQuery);\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace CustomerManagementFrameworkBundle\\Controller\\Admin;\n\nuse Carbon\\Carbon;\nuse CustomerManagementFrameworkBundle\\Controller\\Admin;\nuse CustomerManagementFrameworkBundle\\CustomerList\\Exporter\\AbstractExporter;\nuse CustomerManagementFrameworkBundle\\CustomerList\\Exporter\\ExporterInterface;\nuse CustomerManagementFrameworkBundle\\CustomerList\\ExporterManagerInterface;\nuse CustomerManagementFrameworkBundle\\CustomerList\\Filter\\Exception\\SearchQueryException;\nuse CustomerManagementFrameworkBundle\\CustomerList\\SearchHelper;\nuse CustomerManagementFrameworkBundle\\CustomerProvider\\CustomerProviderInterface;\nuse CustomerManagementFrameworkBundle\\Helper\\Objects;\nuse CustomerManagementFrameworkBundle\\Model\\CustomerInterface;\nuse CustomerManagementFrameworkBundle\\Model\\CustomerSegmentInterface;\nuse CustomerManagementFrameworkBundle\\Model\\CustomerView\\FilterDefinition;\nuse Pimcore\\Db;\nuse Pimcore\\Model\\DataObject\\AbstractObject;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Model\\DataObject\\CustomerSegmentGroup;\nuse Pimcore\\Model\\DataObject\\Folder;\nuse Pimcore\\Model\\DataObject\\Listing;\nuse Pimcore\\Model\\DataObject\\Service;\nuse Pimcore\\Model\\Element\\ValidationException;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/customers\")\n */\nclass CustomersController extends Admin\n{\n    /**\n     * @var CustomerSegmentGroup[]|null\n     */\n    private $segmentGroups = null;\n\n    private ExporterManagerInterface $exporterManager;\n\n    public function onKernelControllerEvent(ControllerEvent $event): void\n    {\n        parent::onKernelControllerEvent($event);\n        $this->checkPermission('plugin_cmf_perm_customerview');\n        AbstractObject::setHideUnpublished(true);\n    }\n\n    /**\n     * @required\n     */\n    public function setExporterManager(ExporterManagerInterface $exporterManager): void\n    {\n        $this->exporterManager = $exporterManager;\n    }\n\n    /**\n     * @Route(\"/list\")\n     */\n    public function listAction(Request $request): Response\n    {\n        $filters = $this->fetchListFilters($request);\n        $orders = $this->fetchListOrder($request);\n        $errors = $request->get('errors', []);\n        $paginator = null;\n        $customerView = \\Pimcore::getContainer()->get('cmf.customer_view');\n\n        try {\n            $listing = $this->buildListing($filters, $orders);\n            $paginator = $this->buildPaginator($request, $listing);\n        } catch (SearchQueryException $e) {\n            $errors[] = $customerView->translate('There was an error in you search query: %s', $e->getMessage());\n        } catch (\\Exception $e) {\n            $errors[] = $customerView->translate('Error while building customer list: %s', $e->getMessage());\n        }\n\n        //empty paginator as the view expects a valid paginator\n        if (null === $paginator) {\n            $paginator = $this->buildPaginator($request, []);\n        }\n\n        if ($request->isXmlHttpRequest()) {\n            return $this->render($customerView->getOverviewWrapperTemplate(), [\n                'paginator' => $paginator,\n                'paginationVariables' => $paginator->getPaginationData(),\n                'customerView' => $customerView,\n                'idField' => Service::getVersionDependentDatabaseColumnName('id')\n            ]);\n        } else {\n            return $this->render(\n                '@PimcoreCustomerManagementFramework/admin/customers/list.html.twig',\n                [\n                    'segmentGroups' => $this->loadSegmentGroups(),\n                    'filters' => $filters,\n                    'errors' => $errors,\n                    'paginator' => $paginator,\n                    'paginationVariables' => $paginator->getPaginationData(),\n                    'customerView' => $customerView,\n                    'searchBarFields' => $this->getSearchHelper()->getConfiguredSearchBarFields(),\n                    'request' => $request,\n                    'filterDefinitions' => $this->getFilterDefinitions(),\n                    'filterDefinition' => $this->getFilterDefinition($request),\n                    'accessToTempCustomerFolder' => boolval($this->hasUserAccessToTempCustomerFolder()),\n                    'hideAdvancedFilterSettings' => boolval($request->get('segmentId')),\n                    'idField' => Service::getVersionDependentDatabaseColumnName('id')\n                ]\n            );\n        }\n    }\n\n    /**\n     * @Route(\"/detail\")\n     */\n    public function detailAction(Request $request): Response\n    {\n        $customer = $this->getSearchHelper()->getCustomerProvider()->getById((int)$request->get('id'));\n        if ($customer instanceof CustomerInterface) {\n            $customerView = \\Pimcore::getContainer()->get('cmf.customer_view');\n            if (!$customerView->hasDetailView($customer)) {\n                throw new \\RuntimeException(sprintf('Customer %d has no detail view to show', $customer->getId()));\n            }\n\n            /**\n             * @var Concrete $customer\n             */\n            if (!$customer->isAllowed('view')) {\n                throw new \\RuntimeException(sprintf('Not allowed to view customer %d', $customer->getId()));\n            }\n\n            return $this->render(\n                '@PimcoreCustomerManagementFramework/admin/customers/detail.html.twig',\n                [\n                    'customer' => $customer,\n                    'customerView' => $customerView,\n                    'request' => $request,\n                ]\n            );\n        }\n\n        throw new \\InvalidArgumentException('Invalid customer');\n    }\n\n    /**\n     * @Route(\"/export\")\n     */\n    public function exportAction(Request $request): JsonResponse\n    {\n        $filters = $this->fetchListFilters($request);\n        $listing = $this->buildListing($filters);\n\n        $idField = Service::getVersionDependentDatabaseColumnName('id');\n        $query = $listing->getQueryBuilder()\n            ->resetQueryPart('select')\n            ->select($idField);\n        $ids = Db::get()->fetchFirstColumn((string)$query);\n\n        $jobId = uniqid();\n        $this->exporterManager->saveExportTmpData($jobId, [\n            'processIds' => $ids,\n            'exporter' => $request->get('exporter'),\n        ]);\n\n        /** @noinspection PhpRouteMissingInspection */\n        return $this->jsonResponse([\n            'url' => $this->generateUrl('customermanagementframework_admin_customers_exportstep', ['jobId' => $jobId]),\n            'jobId' => $jobId,\n            'exporter' => $request->get('exporter'),\n        ]);\n    }\n\n    /**\n     * @route(\"/export-step\")\n     */\n    public function exportStepAction(Request $request): JsonResponse\n    {\n        $perRequest = $request->get(\n            'perRequest',\n            $this->getParameter('cmf.customer_export.items_per_request')\n        );\n\n        try {\n            $data = $this->exporterManager->getExportTmpData($request);\n        } catch (\\Exception $e) {\n            return $this->jsonResponse([\n                'error' => true,\n                'message' => $e->getMessage(),\n            ]);\n        }\n\n        //export finished\n        if (!sizeof($data['processIds'])) {\n            /** @noinspection PhpRouteMissingInspection */\n            return $this->jsonResponse([\n                'finished' => true,\n                'url' => $this->generateUrl('customermanagementframework_admin_customers_downloadfinishedexport',\n                    ['jobId' => $request->get('jobId')]),\n                'jobId' => $request->get('jobId'),\n            ]);\n        }\n\n        $ids = array_slice($data['processIds'], 0, $perRequest);\n        $processIds = array_slice($data['processIds'], $perRequest);\n\n        $idField = Service::getVersionDependentDatabaseColumnName('id');\n        $listing = $this->buildListing();\n        $listing->addConditionParam($idField . ' in ('.implode(', ', $ids).')');\n\n        $exporter = $this->getExporter($listing, $data['exporter']);\n        $exportData = $exporter->getExportData();\n\n        $totalExportData = $data['exportData'] ?? [];\n        $totalExportData = array_merge_recursive($totalExportData, $exportData);\n\n        $data['exportData'] = $totalExportData;\n        $data['processIds'] = $processIds;\n\n        $this->exporterManager->saveExportTmpData(\n            $request->get('jobId'),\n            $data\n        );\n\n        $notProcessedRecordsCount = sizeof($data['processIds']);\n        $totalRecordsCount = $notProcessedRecordsCount + sizeof($data['exportData'][AbstractExporter::ROWS]);\n\n        $percent = round(($totalRecordsCount - $notProcessedRecordsCount) * 100 / $totalRecordsCount);\n\n        return $this->jsonResponse([\n            'finished' => false,\n            'jobId' => $request->get('jobId'),\n            'notProcessedRecordsCount' => $notProcessedRecordsCount,\n            'totalRecordsCount' => $totalRecordsCount,\n            'percent' => $percent,\n            'progress' => sprintf('%s/%s (%s %%)', ($totalRecordsCount - $notProcessedRecordsCount), $totalRecordsCount,\n                $percent),\n\n        ]);\n    }\n\n    /**\n     * @route(\"/download-finished-export\")\n     */\n    public function downloadFinishedExportAction(Request $request): JsonResponse | Response\n    {\n        try {\n            $data = $this->exporterManager->getExportTmpData($request);\n        } catch (\\Exception $e) {\n            return $this->jsonResponse([\n                'error' => true,\n                'message' => $e->getMessage(),\n            ]);\n        }\n\n        if (sizeof($data['processIds'])) {\n            return $this->jsonResponse([\n                'error' => true,\n                'message' => 'export not finished yet',\n            ]);\n        }\n\n        $exportData = $data['exportData'];\n\n        $listing = $this->buildListing();\n        $exporter = $this->getExporter($listing, $data['exporter']);\n\n        $filename = sprintf(\n            '%s-%s-segment-export.%s',\n            $exporter->getName(),\n            Carbon::now()->format('YmdHis'),\n            $exporter->getExtension()\n        );\n\n        $content = $exporter->generateExportFile($exportData);\n        $contentSize = strlen($content);\n\n        $response = new Response();\n        $response\n            ->setContent($content)\n            ->headers->add(\n                [\n                    'Content-Type' => $exporter->getMimeType(),\n                    'Content-Length' => $contentSize,\n                    'Content-Disposition' => sprintf('attachment; filename=\"%s\"', $filename),\n                ]\n            );\n\n        $this->exporterManager->deleteExportTmpData($request->get('jobId'));\n\n        return $response;\n    }\n\n    /**\n     * Create new customer action\n     *\n     * @Route(\"/new\")\n     *\n     * @throws ValidationException\n     */\n    public function createCustomerAction(CustomerProviderInterface $customerProvider): JsonResponse\n    {\n        // check permissions write to temp folder -> ValidationException\n        if (!$this->hasUserAccessToTempCustomerFolder()) {\n            throw new ValidationException(sprintf('No permissions to save customer to folder \"%s\"',\n                $this->getTemporaryCustomerFolder()->getParent()));\n        }\n\n        $customer = $customerProvider->createCustomerInstance();\n        $customer->setParent($this->getTemporaryCustomerFolder());\n        $customer->setKey('New Customer');\n        $customer->setActive(true);\n        $customer->setEmail('dummy@customer.com');\n        Objects::checkObjectKey($customer);\n        $customer->save();\n\n        // return id of new object\n        return $this->jsonResponse([\n            'success' => true,\n            'id' => $customer->getId(),\n        ]);\n    }\n\n    /**\n     * Fetch customer folder object\n     *\n     * @throws \\Exception\n     */\n    protected function getTemporaryCustomerFolder(): \\Pimcore\\Model\\Asset\\Folder | Folder | \\Pimcore\\Model\\Document\\Folder\n    {\n        // fetch customer temp directory\n        $tempDirectory = $this->getParameter('pimcore_customer_management_framework.customer_provider.newCustomersTempDir');\n\n        return Service::createFolderByPath($tempDirectory);\n    }\n\n    /**\n     * Check if current user has access to temporary customer folder\n     *\n     * @throws \\Exception\n     */\n    protected function hasUserAccessToTempCustomerFolder(): bool\n    {\n        $folder = $this->getTemporaryCustomerFolder();\n\n        return $folder->isAllowed('save');\n    }\n\n    /**\n     * @internal\n     */\n    protected function getExporter(Listing\\Concrete $listing, string $exporterName): ExporterInterface\n    {\n        if (!$this->exporterManager->hasExporter($exporterName)) {\n            throw new \\InvalidArgumentException('Exporter does not exist');\n        }\n\n        return $this->exporterManager->buildExporter($exporterName, $listing);\n    }\n\n    /**\n     * Load all segment groups\n     *\n     * @return CustomerSegmentGroup[]\n     */\n    public function loadSegmentGroups(): array\n    {\n        if (is_null($this->segmentGroups)) {\n            $segmentGroups = $this->getSearchHelper()->getSegmentManager()->getSegmentGroups();\n            $segmentGroups->addConditionParam('showAsFilter = 1');\n            // sort by filterSortOrder high to low\n            $segmentGroups->setOrderKey('filterSortOrder IS NULL, filterSortOrder DESC', false);\n            $this->segmentGroups = $segmentGroups->load();\n        }\n\n        return $this->segmentGroups;\n    }\n\n    protected function buildListing(array $filters = [], array $orders = []): Listing\\Concrete\n    {\n        $listing = $this->getSearchHelper()->getCustomerProvider()->getList();\n        $idField = Service::getVersionDependentDatabaseColumnName('id');\n\n        if (array_key_exists('operator-segments', $filters)) {\n            if ($filters['operator-segments'] == 'ANY') {\n                $listing->setGroupBy($idField, true);\n            }\n        }\n\n        if (count($orders) > 0) {\n            $listing\n                ->setOrderKey(array_keys($orders), false)\n                ->setOrder(array_values($orders));\n        } else {\n            $listing\n                ->setOrderKey($idField)\n                ->setOrder('ASC');\n        }\n\n        $this->getSearchHelper()->addListingFilters($listing, $filters, $this->getPimcoreUser());\n\n        return $listing;\n    }\n\n    /**\n     * Fetch filters and set them on view\n     */\n    protected function fetchListFilters(Request $request): array\n    {\n        $filters = $request->get('filter', []);\n        $filters = $this->addPrefilteredSegmentToFilters($request, $filters);\n        $filters = $this->addFilterDefinitionCustomer($request, $filters);\n\n        return $filters;\n    }\n\n    /**\n     * Fetch orders and set them on view\n     */\n    protected function fetchListOrder(Request $request): array\n    {\n        $orders = $request->get('order', []);\n        $ordersNullsLast = [];\n\n        foreach ($orders as $key => $val) {\n            if (strtolower($val) == 'asc') {\n                $ordersNullsLast['ISNULL(`'.$key.'`)'] = strtoupper($val);\n                $ordersNullsLast['(`'.$key.'` = \"\")'] = strtoupper($val);\n            }\n            $ordersNullsLast['TRIM(`'.$key.'`)'] = strtoupper($val);\n        }\n\n        return $ordersNullsLast;\n    }\n\n    protected function addPrefilteredSegmentToFilters(Request $request, array $filters): array\n    {\n        $segment = $this->fetchPrefilteredSegment($request);\n        if ($segment) {\n            if (!isset($filters['segments'])) {\n                $filters['segments'] = [];\n            }\n\n            $groupId = $segment->getGroup() ? $segment->getGroup()->getId() : 'default';\n\n            $groupSegmentIds = [];\n            if (isset($filters['segments'][$groupId])) {\n                $groupSegmentIds = $filters['segments'][$groupId];\n            }\n\n            if (!in_array($segment->getId(), $groupSegmentIds)) {\n                $groupSegmentIds[] = $segment->getId();\n            }\n\n            $filters['segments'][$groupId] = $groupSegmentIds;\n        }\n\n        return $this->addFilterDefinitionSegments($request, $filters);\n    }\n\n    protected function fetchPrefilteredSegment(Request $request): ?CustomerSegmentInterface\n    {\n        $segmentId = $request->get('segmentId');\n\n        if ($segmentId) {\n            $segment = \\Pimcore::getContainer()->get('cmf.segment_manager')->getSegmentById($segmentId);\n            if (!$segment) {\n                throw new \\InvalidArgumentException(sprintf('Segment %d was not found', $segmentId));\n            }\n\n            return $segment;\n        }\n\n        return null;\n    }\n\n    /**\n     * Fetch all filter definitions available for current user\n     *\n     * @return FilterDefinition[]\n     */\n    protected function getFilterDefinitions(): array\n    {\n        // load filter definitions\n        $FilterDefinitionListing = new FilterDefinition\\Listing();\n        // build user ids condition for filter definition\n        $FilterDefinitionListing->setUserIdsCondition($this->getUserIds());\n        // return loaded filter definitions array\n        return $FilterDefinitionListing->load();\n    }\n\n    /**\n     * Fetch the FilterDefinition object selected in request\n     *\n     * @return null|FilterDefinition Returns FilterDefinition object if definition key is defined in filters array,\n     * FilterDefinition with id in DB and user is allowed to use FilterDefinition. Otherwise returns null.\n     */\n    protected function getFilterDefinition(Request $request): ?FilterDefinition\n    {\n        // fetch filter definition information\n        $filterDefinitionData = $request->get('filterDefinition', []);\n        // build default FilterDefinition object if no selected\n        $segmentGroups = $this->loadSegmentGroups();\n        $DefaultFilterDefinition = (new FilterDefinition())->setShowSegments(Objects::getIdsFromArray($segmentGroups));\n        // check if filter definition given\n        if (!array_key_exists('id', $filterDefinitionData)) {\n            // no filter definition found\n            return $DefaultFilterDefinition;\n        }\n        // check if filter definition object exists\n        $filterDefinition = FilterDefinition::getById((int)$filterDefinitionData['id']);\n        if (!$filterDefinition instanceof FilterDefinition) {\n            // no filter definition available\n            return $DefaultFilterDefinition;\n        }\n        // check if current user is allowed to use FilterDefinition\n        if (!$filterDefinition->isUserAllowed($this->getPimcoreUser())) {\n            // user is not allowed to use FilterDefinition\n            return $DefaultFilterDefinition;\n        }\n        // return FilterDefinition definition\n        return $filterDefinition;\n    }\n\n    /**\n     * Fetch all user ids of current user and their roles\n     */\n    protected function getUserIds(): array\n    {\n        // fetch roles of user\n        $userIds = $this->getPimcoreUser()->getRoles();\n        // fetch id of user\n        $userIds[] = $this->getPimcoreUser()->getId();\n\n        // return user ids\n        return $userIds;\n    }\n\n    /**\n     * Merge FilterDefinition for customer fields with filters array\n     */\n    protected function addFilterDefinitionCustomer(Request $request, array $filters): array\n    {\n        // merge filters with filters of filter definition\n        $filterDefinition = $this->getFilterDefinition($request);\n        // check if filter definitions found\n        if (is_null($filterDefinition)) {\n            return $filters;\n        }\n        // fetch definitions for customer / root without segments\n        $filterDefinitionCustomer = $filterDefinition->getDefinition();\n        unset($filterDefinitionCustomer['segments']);\n        if ($filterDefinition->isReadOnly()) {\n            // overwrite filters with FilterDefinition definition\n            $filters = array_merge($filters, $filterDefinitionCustomer);\n        } else {\n            // filter of user more important than filter definition\n            $filters = array_merge($filterDefinitionCustomer, $filters);\n        }\n        // return merged filters array\n        return $filters;\n    }\n\n    /**\n     * Add segment filters from FilterDefinition to filters array\n     */\n    protected function addFilterDefinitionSegments(Request $request, array $filters): array\n    {\n        $filters['showSegments'] ??= [];\n\n        // merge filters with filters of filter definition\n        $filterDefinition = $this->getFilterDefinition($request);\n\n        // check if filter definitions found\n        if (is_null($filterDefinition)) {\n            return $filters;\n        }\n\n        // fetch definitions for segments / only segments array\n        $filterDefinition->cleanUp(false);\n\n        $filterDefinitionSegments = $filterDefinition->getDefinition()['segments'] ?? [];\n\n        if ($filterDefinition->isReadOnly()) {\n            // overwrite filters with FilterDefinition definition\n            $filters['segments'] = $filterDefinitionSegments;\n        } else {\n            // filter of user more important than filter definition\n            $filters['segments'] = array_replace_recursive($filterDefinitionSegments, $filters['segments'] ?? []);\n        }\n\n        // set to filter which segments to show\n        $filters['showSegments'] = $request->get('apply-segment-selection') ? $filters['showSegments'] : $filterDefinition->getShowSegments();\n\n        // return merged filters array\n        return $filters;\n    }\n\n    protected function getSearchHelper(): SearchHelper\n    {\n        return \\Pimcore::getContainer()->get(SearchHelper::class);\n    }\n}\n", "var _cfg = _config || {};\n\nvar cls = {\n    log : function( _output ){\n        if( app.debug ){\n            console.log(_output);\n        }\n    }\n};\n\nvar app = {\n    debug: _cfg.debug || false,\n    timeoutHandler: [],\n    DEVICE : ''\n};\n\nwindow.app = app || {};\n\napp.Util = (function() {\n    'use strict';\n\n    return {\n        getOrCreateInstance: function ($element, identifier, factory) {\n            if (!$element.data(identifier)) {\n                $element.data(identifier, factory($element));\n            }\n\n            return $element.data(identifier);\n        },\n\n        featureDetect: (function () {\n            var results = {};\n            var tests = {\n                // taken from modernizr\n                localStorage: function () {\n                    var mod = 'test';\n\n                    try {\n                        localStorage.setItem(mod, mod);\n                        localStorage.removeItem(mod);\n                        return true;\n                    } catch (e) {\n                        return false;\n                    }\n                },\n\n                json: function () {\n                    return 'JSON' in window && 'parse' in JSON && 'stringify' in JSON;\n                }\n            };\n\n            return function (type) {\n                if ('undefined' === typeof tests[type]) {\n                    throw new Error('Test ' + type + ' is not defined');\n                }\n\n                if ('undefined' === typeof results[type]) {\n                    results[type] = tests[type].call();\n                }\n\n                return results[type];\n            };\n        }())\n    }\n}());\n\napp.Logger = (function() {\n    var logger = {\n        // log even if environemtn is not development\n        forceLog: false\n    };\n\n    var canLog = function () {\n        if (!window.console) {\n            return false;\n        }\n\n        if (logger.forceLog) {\n            return true;\n        }\n\n        return !!app.debug;\n    };\n\n    var makeLogger = function (type) {\n        return function () {\n            if (canLog()) {\n                window.console[type].apply(logger, Array.prototype.slice.call(arguments));\n            }\n        };\n    };\n\n    logger.canLog = canLog;\n    $.each(['error', 'warn', 'info', 'debug', 'log'], function (idx, type) {\n        logger[type] = makeLogger(type);\n    });\n\n    return logger;\n}());\n\napp.PimcoreLinks = (function () {\n    'use strict';\n\n    return {\n        /**\n         * Initialize for all pimcore links\n         * @param $scope\n         */\n        initialize: function ($scope) {\n            var that = this;\n\n            $scope.find('.js-pimcore-link').on('click', function (e) {\n                var objectId = $(this).data('pimcore-id');\n\n                if (that.isPimcoreAvailable()) {\n                    window.top.pimcore.helpers.openObject(objectId, 'object');\n                } else {\n                    app.Logger.error(\n                        'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                        objectId\n                    );\n                }\n            });\n        },\n\n        /**\n         * Check if pimcore object is available (we're inside iframe)\n         * @returns {boolean}\n         */\n        isPimcoreAvailable: function () {\n            return 'undefined' !== typeof window.top.pimcore;\n        }\n    };\n}());\n\napp.ToggleGroup = (function() {\n    return {\n        initialize: function ($scope) {\n            $scope.find('[data-toggle-group-trigger]').each(function() {\n                var $trigger = $(this);\n                var group = $trigger.data('toggle-group-trigger');\n                var $groups = $trigger.closest('.js-toggle-group-container').find('[data-toggle-group=\"' + group + '\"]');\n\n                $groups.hide().removeClass('hide');\n                $groups.first().show();\n\n                $trigger.on('click', function(e) {\n                    e.preventDefault();\n                    $groups.toggle();\n                });\n            });\n        }\n    }\n}());\n\nif ('undefined' === typeof app.Box) {\n    app.Box = {};\n}\n\napp.Box.CollapseHandler = (function () {\n    'use strict';\n\n    return function ($box) {\n        var storageKey = 'collapseState';\n        var collapseClass = 'collapsed-box';\n        var identifier = $box.data('identifier');\n        var $collapseWidget = $box.find('[data-widget=\"collapse\"]');\n        var $icon = $box.find('[data-widget=\"collapse\"] i');\n\n        var StateStorage = {\n            canHandleState: (function () {\n                if (!identifier) {\n                    return false;\n                }\n\n                var result = true;\n                $.each(['localStorage', 'json'], function (index, feature) {\n                    if (!app.Util.featureDetect(feature)) {\n                        result = false;\n                    }\n                });\n\n                return result;\n            }()),\n\n            load: function () {\n                var state = localStorage.getItem(storageKey);\n                if (null !== state) {\n                    state = JSON.parse(state);\n                } else {\n                    state = {};\n                }\n\n                return state;\n            },\n\n            save: function (state) {\n                localStorage.setItem(storageKey, JSON.stringify(state));\n            }\n        };\n\n        var Box = {\n            isCollapsed: function () {\n                return $box.hasClass(collapseClass);\n            },\n\n            collapse: function (state) {\n\n                if (state) {\n                    $box.addClass(collapseClass);\n                } else {\n                    $box.removeClass(collapseClass);\n                }\n\n                Box.updateCollapseIcon(state);\n            },\n\n            updateCollapseIcon: function(state)\n            {\n                var iconClass;\n\n                if (state) {\n                    iconClass = 'fa-plus';\n                } else {\n                    iconClass = 'fa-minus';\n                }\n\n                $icon.attr('class', 'fa ' + iconClass);\n            },\n\n            handleState: function () {\n                var state = this.loadState();\n                if (state && !this.isCollapsed()) {\n                    this.collapse(true);\n                }\n            },\n\n            loadState: function () {\n                if (!StateStorage.canHandleState) {\n                    return;\n                }\n\n                var storage = StateStorage.load();\n\n                var state = false;\n                if ('undefined' !== typeof storage[identifier] && storage[identifier]) {\n                    state = true;\n                }\n\n                return state;\n            },\n\n            saveState: function (state) {\n                state = !!state;\n\n                if (!StateStorage.canHandleState) {\n                    return;\n                }\n\n                var storage = StateStorage.load();\n                if ('undefined' === typeof storage[identifier]) {\n                    storage[identifier] = {};\n                }\n\n                storage[identifier] = state;\n\n                StateStorage.save(storage);\n            }\n        };\n\n        // save collapsed state when widget is clicked\n        if (StateStorage.canHandleState) {\n            $collapseWidget.on('click', function (e) {\n                // negate state as it will be changed after this handler runs\n                Box.saveState(!Box.isCollapsed());\n                Box.updateCollapseIcon(!Box.isCollapsed());\n            });\n        }\n\n        // trigger box collapse from other elements, but keep updating collapse icon\n        $box.find('[data-widget=\"collapse-trigger\"]').on('click', function (e) {\n            e.preventDefault();\n            $collapseWidget.trigger('click');\n        });\n\n        Box.handleState();\n\n        return Box;\n    };\n}());\n\nif ('undefined' === typeof app.SearchFilter) {\n    app.SearchFilter = {};\n}\n\napp.SearchFilter.Form = (function () {\n    'use strict';\n\n    var Form = function ($form) {\n        this.$form = $form;\n\n        this.setupFormSubmitHandler();\n        this.setupDateRangePickers();\n    };\n\n    Form.prototype.setupFormSubmitHandler = function () {\n        var that = this;\n\n        // do not submit empty filter values (only submits filters which have values)\n        this.$form.on('submit', function (e) {\n            that.prepareFormSubmit();\n\n            // no filters left -> load same URL without query string (no filters)\n            if (that.$form.serializeArray().length === 0) {\n                e.preventDefault();\n                window.location = window.location.href.split('?')[0];\n            }\n        });\n    };\n\n    /**\n     * Setup date range pickers and add hidden inputs with start/end values on change\n     */\n    Form.prototype.setupDateRangePickers = function () {\n        var that = this;\n        this.dateRangePickers = [];\n\n        this.$form.find(':input.plugin-daterangepicker').each(function () {\n            var $input = $(this);\n\n            // handle update event and add hidden fields with from/to values to form\n            $input.on('update.DateRangePicker', function (e, pickerResult) {\n                var baseName = $input.attr('name').match(/^filter\\[(.+)\\]$/);\n                if (null === baseName) {\n                    app.Logger.error('Could not resolve base name for date range input', $input.attr('name'));\n                    return;\n                }\n\n                baseName = baseName[1];\n\n                $.each(['from', 'to'], function (index, type) {\n                    var value = '';\n                    if (pickerResult[type]) {\n                        value = pickerResult[type].format('DD.MM.YYYY');\n                    }\n\n                    // orderDateFrom, orderDateTo\n                    var inputName = baseName + type.charAt(0).toUpperCase() + type.slice(1)\n\n                    that.updateHiddenField('filter[' + inputName + ']', value);\n                });\n            });\n\n            // initialize date picker instance\n            var dateRangePicker = app.Util.getOrCreateInstance(\n                $(this), 'SearchFilter.DateRangePicker',\n                function ($el) {\n                    return new app.SearchFilter.DateRangePicker($el);\n                }\n            );\n\n            that.dateRangePickers.push(dateRangePicker);\n        });\n    };\n\n    /**\n     * Add/update/remove hidden field from form\n     *\n     * @param name\n     * @param value\n     */\n    Form.prototype.updateHiddenField = function (name, value) {\n        var field = this.$form.find(':input[type=\"hidden\"][name=\"' + name + '\"]');\n        value = $.trim(value);\n\n        if (field.length === 0 && value.length > 0) {\n            field = $('<input />')\n                .attr('type', 'hidden')\n                .attr('name', name);\n\n            field.appendTo(this.$form);\n        }\n\n        // remove hidden field without value\n        if (field.length === 1 && value.length === 0) {\n            field.remove();\n        } else {\n            field.val(value);\n        }\n    };\n\n    /**\n     * Disable empty form fields before submitting form\n     */\n    Form.prototype.prepareFormSubmit = function () {\n        var disableInput = function (input) {\n            input.data('before-form-prepare-state', input.prop('disabled'));\n            input.prop('disabled', true);\n        };\n\n        this.$form.find(':input').each(function () {\n            var $input = $(this);\n            if ($input.hasClass('form-submit-disabled') || !$.trim($input.val())) {\n                disableInput($input);\n            }\n        });\n    };\n\n    /**\n     * Restore form field state after submitting form\n     */\n    Form.prototype.restoreFormFieldStates = function () {\n        this.$form.find(':input').each(function () {\n            var $input = $(this);\n\n            var previousState = !!$input.data('before-form-prepare-state');\n            if ($input.prop('disabled')) {\n                $input.prop('disabled', previousState);\n            }\n        });\n    };\n\n    return Form;\n}());\n\napp.SearchFilter.DateRangePicker = (function () {\n    'use strict';\n\n    var DateRangePicker = function ($input) {\n        this.$input = $input;\n\n        // do not include input display value in form submit\n        $input.addClass('form-submit-disabled');\n\n        this.initDateRangePicker();\n    };\n\n    DateRangePicker.prototype.triggerUpdate = function () {\n        var picker = this.$input.data('daterangepicker');\n\n        this.$input.trigger('update.DateRangePicker', {\n            from: picker.startDate,\n            to: picker.endDate\n        });\n    };\n\n    DateRangePicker.prototype.initDateRangePicker = function () {\n        var that = this;\n        var dates = this.buildInitialDates();\n        var ranges = this.buildRanges();\n\n        this.$input.daterangepicker({\n            autoUpdateInput: true,\n            autoApply: true,\n            alwaysShowCalendars: true,\n            showWeekNumbers: true,\n            startDate: dates.startDate,\n            endDate: dates.endDate,\n            locale: {\n                format: 'DD.MM.YYYY'\n            },\n            ranges: ranges\n        });\n\n        // trigger update event when picker changes\n        this.$input.on('apply.daterangepicker', $.proxy(this.triggerUpdate, this));\n\n        // trigger update event initally\n        this.triggerUpdate();\n    };\n\n    DateRangePicker.prototype.buildRanges = function () {\n        var ranges = {\n            'Today': [moment(), moment()],\n            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n            'This Month': [moment().startOf('month'), moment().endOf('month')],\n            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n        };\n\n        // add ranges defined by data attribute\n        var dataRanges = this.$input.data('date-ranges');\n        if (dataRanges && 'object' === typeof dataRanges) {\n            $.each(dataRanges, function(label, range) {\n                ranges[label] = [\n                    moment(range.startDate, 'DD.MM.YYYY'),\n                    moment(range.endDate, 'DD.MM.YYYY')\n                ];\n            });\n        }\n\n        return ranges;\n    };\n\n    DateRangePicker.prototype.buildInitialDates = function () {\n        var startDate;\n        if (this.$input.data('date-from')) {\n            startDate = moment(this.$input.data('date-from'), 'DD.MM.YYYY');\n        } else {\n            startDate = moment().startOf('month');\n        }\n\n        var endDate;\n        if (this.$input.data('date-to')) {\n            endDate = moment(this.$input.data('date-to'), 'DD.MM.YYYY');\n        } else {\n            if (startDate) {\n                endDate = startDate.clone().endOf('month');\n            } else {\n                endDate = moment().startOf('month');\n            }\n        }\n\n        return {\n            startDate: startDate,\n            endDate: endDate\n        };\n    };\n\n    return DateRangePicker;\n}());\n\n;(function ($) {\n    'use strict';\n\n    // generic admin-lte functions (e.g. selects, collapsed boxes, ...)\n    $.extend(window.app, {\n        /**\n         * Initialize function\n         */\n        _init: function ($scope) {\n            //set Device for AjaxInclude\n            if (matchMedia('(max-width:767px)').matches) {\n                app.DEVICE = 'mobile';\n            }\n        },\n\n        /**\n         * Auto submit forms on change\n         * @param $scope\n         */\n        formAutoSubmit: function ($scope) {\n            $scope.find('.js-form-auto-submit').on('change', function () {\n                $(this).closest('form').submit();\n            });\n        },\n\n        /**\n         * Initialize select2 on .plugin-select2 elements\n         * @param $scope\n         */\n        select2: function ($scope) {\n            $scope.find(':input.plugin-select2').each(function () {\n                var $element = $(this);\n\n                // read placeholder from data-placeholder attribute\n                var placeholder = '';\n                if ($element.data('placeholder')) {\n                    placeholder = $element.data('placeholder');\n                }\n\n                var options = $element.data('select2-options') || {};\n                options = $.extend(true, {}, {\n                    width: '100%',\n                    allowClear: true,\n                    placeholder: placeholder\n                }, options);\n\n                $element\n                    .select2(options)\n                    .focus(function () {\n                        // workaround for clicking on label not triggering item focus (should be fixed upstream with 4.0.3)\n                        $(this).select2('open');\n                    });\n            });\n        },\n\n        /**\n         * Initialize iCheck in .plugin-icheck elements\n         * @param $scope\n         */\n        iCheck: function ($scope) {\n            $scope.find('.plugin-icheck :input').iCheck({\n                checkboxClass: 'icheckbox_flat-blue',\n                radioClass: 'iradio_flat-blue'\n            });\n        },\n\n        /**\n         * Initialize tooltips\n         * @param $scope\n         */\n        tooltip: function ($scope) {\n            $scope.find('.tooltip-trigger').tooltip();\n        },\n\n        /**\n         * Search filter form handling\n         * @param $scope\n         */\n        searchFilter: function ($scope) {\n            $scope.find('.search-filters').each(function () {\n                var $container = $(this);\n\n                app.Util.getOrCreateInstance(\n                    $container, 'SearchFilter.Form',\n                    function ($el) {\n                        return new app.SearchFilter.Form($el);\n                    }\n                );\n            });\n        },\n\n        /**\n         * Set up persistent collapse state saved to local storage\n         * @param $scope\n         */\n        collapsibleStateBox: function ($scope) {\n            $scope.find('.box-collapsible-state').each(function () {\n                var $container = $(this);\n                if ($container.data('identifier')) {\n                    app.Util.getOrCreateInstance(\n                        $container, 'Box.CollapseHandler',\n                        function ($el) {\n                            return app.Box.CollapseHandler($el);\n                        }\n                    );\n                }\n            });\n        },\n\n        /**\n         * Reload page when item count changes\n         * @param $scope\n         */\n        paginationFooterCount: function ($scope) {\n            $scope.find('.pagination-footer__count-selector-form').find('select').on('change', function (e) {\n                var $selectedOption = $(this).find('option:selected');\n                if ($selectedOption.data('url')) {\n                    window.location = $selectedOption.data('url');\n                }\n            });\n        },\n\n        /**\n         * Collapse tables when .collapse-trigger caption is clicked\n         * @param $scope\n         */\n        tableCollapse: function ($scope) {\n            $scope.find('.table-collapsible').each(function () {\n                var $table = $(this);\n                var $caption = $table.find('caption');\n\n                $('<span class=\"collapse-indicator\" />')\n                    .append('<span class=\"collapse-indicator-icon fa fa-chevron-down\" />')\n                    .prependTo($caption);\n\n                $caption.on('click', function (e) {\n                    $table.toggleClass('table-collapsible--collapsed');\n                });\n            });\n        },\n\n        /**\n         * URL select loading option URL on change\n         * @param $scope\n         */\n        urlSelect: function ($scope) {\n            $scope.find('select.url-select').on('change', function (e) {\n                e.preventDefault();\n\n                var selectedOption = $(this).find('option:selected');\n                if (selectedOption.length === 1) {\n                    window.location.href = selectedOption.data('url');\n                }\n            });\n        },\n\n        /**\n         * Modals\n         * @param $scope\n         */\n        modal: function ($scope) {\n            $scope.on('hidden.bs.modal', '.modal', function () {\n                $(this).removeData('bs.modal');\n            });\n        },\n\n        /**\n         * Links to pimcore objects\n         * @param $scope\n         */\n        pimcoreLink: function ($scope) {\n            app.PimcoreLinks.initialize($scope);\n        },\n\n        /**\n         * Toggle groups (order comment edit)\n         * @param $scope\n         */\n        toggleGroup: function ($scope) {\n            app.ToggleGroup.initialize($scope);\n        }\n    });\n})(jQuery);\n\n;(function ($) {\n    'use strict';\n\n    // cmf functions\n    $.extend(window.app, {\n        declineDuplicates: function ($scope) {\n            if ($scope.find('.js-decline-duplicate').length === 0) {\n                return;\n            }\n\n            $scope.on('click', '.js-decline-duplicate', function () {\n                var $duplicateItem = $(this).closest('.js-duplicates-item');\n                $duplicateItem.css(\"opacity\", 0.5);\n\n                $.ajax({\n                    url: '/admin/customermanagementframework/duplicates/decline/' + $(this).data('id'),\n                    success: function (data) {\n                        if (data.success) {\n                            $duplicateItem.remove();\n                        } else {\n                            $duplicateItem.css(\"opacity\", 1);\n                        }\n                    }\n                });\n            });\n        },\n        registerSaveFilterDefinition: function () {\n            $('#save-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $input = $('input[name=\"filterDefinition[name]\"]');\n                var $requiredMessage = $('#name-required-message');\n                if ($($input).val().length < 1) {\n                    $input.focus();\n                    $requiredMessage.slideDown();\n                    setTimeout(function () {\n                        $requiredMessage.slideUp();\n                    }, 3000);\n                    return;\n                } else $requiredMessage.hide();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                var $disabledSelects = $form.find('select:disabled');\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', false);\n                });\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/save').submit();\n                $form.attr('action', originalAction);\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', true);\n                });\n            });\n        },\n        registerUpdateFilterDefinition: function () {\n            $('#update-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $input = $('input[name=\"filterDefinition[name]\"]');\n                var $requiredMessage = $('#name-required-message');\n                if ($($input).val().length < 1) {\n                    $input.focus();\n                    $requiredMessage.slideDown();\n                    setTimeout(function () {\n                        $requiredMessage.slideUp();\n                    }, 3000);\n                    return;\n                } else $requiredMessage.hide();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                var $disabledSelects = $form.find('select:disabled');\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', false);\n                });\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/update').submit();\n                $form.attr('action', originalAction);\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', true);\n                });\n            });\n        },\n        registerShareFilterDefinition: function () {\n            $('#share-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/share').submit();\n                $form.attr('action', originalAction);\n            });\n        },\n        registerNewCustomerAction: function () {\n            var $newCustomerButton = $('#add-new-customer');\n            var isPimcoreAvailable = ('undefined' !== typeof window.top.pimcore);\n            if(!isPimcoreAvailable) $newCustomerButton.hide();\n            $newCustomerButton.on('click', function (e) {\n                if (!isPimcoreAvailable) {\n                    app.Logger.error(\n                        'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                        objectId\n                    );\n                    return false;\n                }\n                $.ajax({\n                    url: '/admin/customermanagementframework/customers/new',\n                    success: function (data) {\n                        var objectId = data.id;\n                        if ('undefined' !== typeof window.top.pimcore) {\n                            window.top.pimcore.helpers.openObject(objectId, 'object');\n                        } else {\n                            app.Logger.error(\n                                'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                                objectId\n                            );\n                        }\n                    }\n                });\n            });\n        }\n    });\n})(jQuery);\n\n;(function( $ ){\n    \"use strict\";\n\n    window.app.init = function ($scope) {\n        /* -> _config._preload = Load this functions first */\n        if (_cfg['_preload']) {\n            $.each( _cfg['_preload'], function( _key, _val ){\n                if( typeof _val == 'boolean' && typeof window.app[_key] == 'function' ){\n                    window.app[_key]($scope);\n                }\n            });\n        }\n\n        /* -> _config = Load all others (not _preload and _reload) */\n        $.each( _cfg, function( _key, _val ){\n            if( ( typeof _val == 'boolean' && typeof window.app[_key] == 'function' && _key != '_reload' && _key != '_preload' ) ){\n                window.app[_key]($scope);\n            }\n        });\n\n        /* -> _config._reload = Load the ajaxInclued and others after the rest */\n        if (_cfg['_reload']) {\n            $.each( _cfg['_reload'], function( _key, _val ){\n                if( ( typeof _val == 'boolean' && typeof window.app[_key] == 'function' ) ){\n                    window.app[_key]($scope);\n                }\n            });\n        }\n    };\n\n    $(document).ready(function() {\n        window.app.init($('body'));\n    });\n})(jQuery);\n", "var _cfg=_config||{},cls={log:function(t){app.debug&&console.log(t)}},app={debug:_cfg.debug||!1,timeoutHandler:[],DEVICE:\"\"};window.app=app||{},app.Util=function(){\"use strict\";return{getOrCreateInstance:function(t,e,n){return t.data(e)||t.data(e,n(t)),t.data(e)},featureDetect:function(){var t={},e={localStorage:function(){try{return localStorage.setItem(\"test\",\"test\"),localStorage.removeItem(\"test\"),!0}catch(t){return!1}},json:function(){return\"JSON\"in window&&\"parse\"in JSON&&\"stringify\"in JSON}};return function(n){if(void 0===e[n])throw new Error(\"Test \"+n+\" is not defined\");return void 0===t[n]&&(t[n]=e[n].call()),t[n]}}()}}(),app.Logger=function(){var t={forceLog:!1},e=function(){return!!window.console&&(!!t.forceLog||!!app.debug)};return t.canLog=e,$.each([\"error\",\"warn\",\"info\",\"debug\",\"log\"],function(n,i){t[i]=function(n){return function(){e()&&window.console[n].apply(t,Array.prototype.slice.call(arguments))}}(i)}),t}(),app.PimcoreLinks=function(){\"use strict\";return{initialize:function(t){var e=this;t.find(\".js-pimcore-link\").on(\"click\",function(t){var n=$(this).data(\"pimcore-id\");e.isPimcoreAvailable()?window.top.pimcore.helpers.openObject(n,\"object\"):app.Logger.error(\"Pimcore is not available (e.g. backend opened outside iframe) - can't load object with ID\",n)})},isPimcoreAvailable:function(){return void 0!==window.top.pimcore}}}(),app.ToggleGroup={initialize:function(t){t.find(\"[data-toggle-group-trigger]\").each(function(){var t=$(this),e=t.data(\"toggle-group-trigger\"),n=t.closest(\".js-toggle-group-container\").find('[data-toggle-group=\"'+e+'\"]');n.hide().removeClass(\"hide\"),n.first().show(),t.on(\"click\",function(t){t.preventDefault(),n.toggle()})})}},void 0===app.Box&&(app.Box={}),app.Box.CollapseHandler=function(){\"use strict\";return function(t){var e=\"collapsed-box\",n=t.data(\"identifier\"),i=t.find('[data-widget=\"collapse\"]'),a=t.find('[data-widget=\"collapse\"] i'),o=function(){if(!n)return!1;var t=!0;return $.each([\"localStorage\",\"json\"],function(e,n){app.Util.featureDetect(n)||(t=!1)}),t}(),r=function(){var t=localStorage.getItem(\"collapseState\");return t=null!==t?JSON.parse(t):{}},c=function(t){localStorage.setItem(\"collapseState\",JSON.stringify(t))},s={isCollapsed:function(){return t.hasClass(e)},collapse:function(n){n?t.addClass(e):t.removeClass(e),s.updateCollapseIcon(n)},updateCollapseIcon:function(t){var e;e=t?\"fa-plus\":\"fa-minus\",a.attr(\"class\",\"fa \"+e)},handleState:function(){this.loadState()&&!this.isCollapsed()&&this.collapse(!0)},loadState:function(){if(o){var t=r(),e=!1;return void 0!==t[n]&&t[n]&&(e=!0),e}},saveState:function(t){if(t=!!t,o){var e=r();void 0===e[n]&&(e[n]={}),e[n]=t,c(e)}}};return o&&i.on(\"click\",function(t){s.saveState(!s.isCollapsed()),s.updateCollapseIcon(!s.isCollapsed())}),t.find('[data-widget=\"collapse-trigger\"]').on(\"click\",function(t){t.preventDefault(),i.trigger(\"click\")}),s.handleState(),s}}(),void 0===app.SearchFilter&&(app.SearchFilter={}),app.SearchFilter.Form=function(){\"use strict\";var t=function(t){this.$form=t,this.setupFormSubmitHandler(),this.setupDateRangePickers()};return t.prototype.setupFormSubmitHandler=function(){var t=this;this.$form.on(\"submit\",function(e){t.prepareFormSubmit(),0===t.$form.serializeArray().length&&(e.preventDefault(),window.location=window.location.href.split(\"?\")[0])})},t.prototype.setupDateRangePickers=function(){var t=this;this.dateRangePickers=[],this.$form.find(\":input.plugin-daterangepicker\").each(function(){var e=$(this);e.on(\"update.DateRangePicker\",function(n,i){var a=e.attr(\"name\").match(/^filter\\[(.+)\\]$/);null!==a?(a=a[1],$.each([\"from\",\"to\"],function(e,n){var o=\"\";i[n]&&(o=i[n].format(\"DD.MM.YYYY\"));var r=a+n.charAt(0).toUpperCase()+n.slice(1);t.updateHiddenField(\"filter[\"+r+\"]\",o)})):app.Logger.error(\"Could not resolve base name for date range input\",e.attr(\"name\"))});var n=app.Util.getOrCreateInstance($(this),\"SearchFilter.DateRangePicker\",function(t){return new app.SearchFilter.DateRangePicker(t)});t.dateRangePickers.push(n)})},t.prototype.updateHiddenField=function(t,e){var n=this.$form.find(':input[type=\"hidden\"][name=\"'+t+'\"]');e=$.trim(e),0===n.length&&e.length>0&&(n=$(\"<input />\").attr(\"type\",\"hidden\").attr(\"name\",t)).appendTo(this.$form),1===n.length&&0===e.length?n.remove():n.val(e)},t.prototype.prepareFormSubmit=function(){this.$form.find(\":input\").each(function(){var t=$(this);!t.hasClass(\"form-submit-disabled\")&&$.trim(t.val())||function(t){t.data(\"before-form-prepare-state\",t.prop(\"disabled\")),t.prop(\"disabled\",!0)}(t)})},t.prototype.restoreFormFieldStates=function(){this.$form.find(\":input\").each(function(){var t=$(this),e=!!t.data(\"before-form-prepare-state\");t.prop(\"disabled\")&&t.prop(\"disabled\",e)})},t}(),app.SearchFilter.DateRangePicker=function(){\"use strict\";var t=function(t){this.$input=t,t.addClass(\"form-submit-disabled\"),this.initDateRangePicker()};return t.prototype.triggerUpdate=function(){var t=this.$input.data(\"daterangepicker\");this.$input.trigger(\"update.DateRangePicker\",{from:t.startDate,to:t.endDate})},t.prototype.initDateRangePicker=function(){var t=this.buildInitialDates(),e=this.buildRanges();this.$input.daterangepicker({autoUpdateInput:!0,autoApply:!0,alwaysShowCalendars:!0,showWeekNumbers:!0,startDate:t.startDate,endDate:t.endDate,locale:{format:\"DD.MM.YYYY\"},ranges:e}),this.$input.on(\"apply.daterangepicker\",$.proxy(this.triggerUpdate,this)),this.triggerUpdate()},t.prototype.buildRanges=function(){var t={Today:[moment(),moment()],Yesterday:[moment().subtract(1,\"days\"),moment().subtract(1,\"days\")],\"This Month\":[moment().startOf(\"month\"),moment().endOf(\"month\")],\"Last Month\":[moment().subtract(1,\"month\").startOf(\"month\"),moment().subtract(1,\"month\").endOf(\"month\")]},e=this.$input.data(\"date-ranges\");return e&&\"object\"==typeof e&&$.each(e,function(e,n){t[e]=[moment(n.startDate,\"DD.MM.YYYY\"),moment(n.endDate,\"DD.MM.YYYY\")]}),t},t.prototype.buildInitialDates=function(){var t;t=this.$input.data(\"date-from\")?moment(this.$input.data(\"date-from\"),\"DD.MM.YYYY\"):moment().startOf(\"month\");var e;return e=this.$input.data(\"date-to\")?moment(this.$input.data(\"date-to\"),\"DD.MM.YYYY\"):t?t.clone().endOf(\"month\"):moment().startOf(\"month\"),{startDate:t,endDate:e}},t}(),function(t){\"use strict\";t.extend(window.app,{_init:function(t){matchMedia(\"(max-width:767px)\").matches&&(app.DEVICE=\"mobile\")},formAutoSubmit:function(e){e.find(\".js-form-auto-submit\").on(\"change\",function(){t(this).closest(\"form\").submit()})},select2:function(e){e.find(\":input.plugin-select2\").each(function(){var e=t(this),n=\"\";e.data(\"placeholder\")&&(n=e.data(\"placeholder\"));var i=e.data(\"select2-options\")||{};i=t.extend(!0,{},{width:\"100%\",allowClear:!0,placeholder:n},i),e.select2(i).focus(function(){t(this).select2(\"open\")})})},iCheck:function(t){t.find(\".plugin-icheck :input\").iCheck({checkboxClass:\"icheckbox_flat-blue\",radioClass:\"iradio_flat-blue\"})},tooltip:function(t){t.find(\".tooltip-trigger\").tooltip()},searchFilter:function(e){e.find(\".search-filters\").each(function(){var e=t(this);app.Util.getOrCreateInstance(e,\"SearchFilter.Form\",function(t){return new app.SearchFilter.Form(t)})})},collapsibleStateBox:function(e){e.find(\".box-collapsible-state\").each(function(){var e=t(this);e.data(\"identifier\")&&app.Util.getOrCreateInstance(e,\"Box.CollapseHandler\",function(t){return app.Box.CollapseHandler(t)})})},paginationFooterCount:function(e){e.find(\".pagination-footer__count-selector-form\").find(\"select\").on(\"change\",function(e){var n=t(this).find(\"option:selected\");n.data(\"url\")&&(window.location=n.data(\"url\"))})},tableCollapse:function(e){e.find(\".table-collapsible\").each(function(){var e=t(this),n=e.find(\"caption\");t('<span class=\"collapse-indicator\" />').append('<span class=\"collapse-indicator-icon fa fa-chevron-down\" />').prependTo(n),n.on(\"click\",function(t){e.toggleClass(\"table-collapsible--collapsed\")})})},urlSelect:function(e){e.find(\"select.url-select\").on(\"change\",function(e){e.preventDefault();var n=t(this).find(\"option:selected\");1===n.length&&(window.location.href=n.data(\"url\"))})},modal:function(e){e.on(\"hidden.bs.modal\",\".modal\",function(){t(this).removeData(\"bs.modal\")})},pimcoreLink:function(t){app.PimcoreLinks.initialize(t)},toggleGroup:function(t){app.ToggleGroup.initialize(t)}})}(jQuery),function(t){\"use strict\";t.extend(window.app,{declineDuplicates:function(e){0!==e.find(\".js-decline-duplicate\").length&&e.on(\"click\",\".js-decline-duplicate\",function(){var e=t(this).closest(\".js-duplicates-item\");e.css(\"opacity\",.5),t.ajax({url:\"/admin/customermanagementframework/duplicates/decline/\"+t(this).data(\"id\"),success:function(t){t.success?e.remove():e.css(\"opacity\",1)}})})},registerSaveFilterDefinition:function(){t(\"#save-filter-definition\").on(\"click\",function(e){e.preventDefault();var n=t('input[name=\"filterDefinition[name]\"]'),i=t(\"#name-required-message\");if(t(n).val().length<1)return n.focus(),i.slideDown(),void setTimeout(function(){i.slideUp()},3e3);i.hide();var a=t(this).closest(\"form\"),o=a.attr(\"action\"),r=a.find(\"select:disabled\");r.each(function(){t(this).prop(\"disabled\",!1)}),a.attr(\"action\",\"/admin/customermanagementframework/customers/filter-definition/save\").submit(),a.attr(\"action\",o),r.each(function(){t(this).prop(\"disabled\",!0)})})},registerUpdateFilterDefinition:function(){t(\"#update-filter-definition\").on(\"click\",function(e){e.preventDefault();var n=t('input[name=\"filterDefinition[name]\"]'),i=t(\"#name-required-message\");if(t(n).val().length<1)return n.focus(),i.slideDown(),void setTimeout(function(){i.slideUp()},3e3);i.hide();var a=t(this).closest(\"form\"),o=a.attr(\"action\"),r=a.find(\"select:disabled\");r.each(function(){t(this).prop(\"disabled\",!1)}),a.attr(\"action\",\"/admin/customermanagementframework/customers/filter-definition/update\").submit(),a.attr(\"action\",o),r.each(function(){t(this).prop(\"disabled\",!0)})})},registerShareFilterDefinition:function(){t(\"#share-filter-definition\").on(\"click\",function(e){e.preventDefault();var n=t(this).closest(\"form\"),i=n.attr(\"action\");n.attr(\"action\",\"/admin/customermanagementframework/customers/filter-definition/share\").submit(),n.attr(\"action\",i)})},registerNewCustomerAction:function(){var e=t(\"#add-new-customer\"),n=void 0!==window.top.pimcore;n||e.hide(),e.on(\"click\",function(e){if(!n)return app.Logger.error(\"Pimcore is not available (e.g. backend opened outside iframe) - can't load object with ID\",objectId),!1;t.ajax({url:\"/admin/customermanagementframework/customers/new\",success:function(t){var e=t.id;void 0!==window.top.pimcore?window.top.pimcore.helpers.openObject(e,\"object\"):app.Logger.error(\"Pimcore is not available (e.g. backend opened outside iframe) - can't load object with ID\",e)}})})}})}(jQuery),function(t){\"use strict\";window.app.init=function(e){_cfg._preload&&t.each(_cfg._preload,function(t,n){\"boolean\"==typeof n&&\"function\"==typeof window.app[t]&&window.app[t](e)}),t.each(_cfg,function(t,n){\"boolean\"==typeof n&&\"function\"==typeof window.app[t]&&\"_reload\"!=t&&\"_preload\"!=t&&window.app[t](e)}),_cfg._reload&&t.each(_cfg._reload,function(t,n){\"boolean\"==typeof n&&\"function\"==typeof window.app[t]&&window.app[t](e)})},t(document).ready(function(){window.app.init(t(\"body\"))})}(jQuery);", "\n{% if accessToTempCustomerFolder %}\n    {% do cmf_jsConfig().add('registerNewCustomerAction', true) %}\n{% endif %}\n\n<!-- Filters -->\n<div class=\"box-header with-border\">\n    <div class=\"row\">\n        <div class=\"col-sm-3 col-md-6\">\n            <h3 class=\"box-title\">\n                <a href=\"#\" data-widget=\"collapse-trigger\">\n                    <i class=\"fa fa-filter\"></i>\n                    {{ 'cmf_filters_filters' | trans({}, 'admin') }}\n                </a>\n            </h3>\n        </div>\n\n        {% if not hideAdvancedFilterSettings %}\n            <div class=\"col-sm-9 col-md-6 text-right\">\n                {% if accessToTempCustomerFolder %}\n                    <button type=\"button\" class=\"btn btn-primary\" id=\"add-new-customer\"\n                            name=\"add-new-customer\">{{ 'cmf_filters_new_customer'| trans({}, 'admin') }}</button>\n                {% endif %}\n                <!--suppress HtmlFormInputWithoutLabel -->\n                <select\n                    id=\"filterDefinition-id\"\n                    name=\"filterDefinition[id]\"\n                    class=\"form-control plugin-select2\"\n                    data-select2-options='{{ {'width': '50%'} | json_encode() }}'\n                >\n                    <option value=\"0\">{{ 'cmf_filters_no_filter_selected' | trans({}, 'admin') }}</option>\n                    {% for singleFilterDefinition in filterDefinitions %}\n                        <option value=\"{{ singleFilterDefinition.id }}\" {{ singleFilterDefinition.id == filterDefinition.id ? 'selected' : '' }}>\n                            {{ singleFilterDefinition.name }}\n                        </option>\n                    {% endfor %}\n                </select>\n\n                <a class=\"btn-box-tool\" data-widget=\"collapse\"><i class=\"fa fa-minus\"></i></a>\n            </div>\n        {% endif %}\n    </div>\n\n</div>\n\n<script {{ pimcore_csp.getNonceHtmlAttribute()|raw }}>\n    window.addEventListener('load', function () {\n        $('#filterDefinition-id').on('change', (e) => {\n            e.target.closest('form').submit();\n        });\n    });\n</script>\n<!-- /.box-header -->\n\n"], "fixing_code": [";(function ($) {\n    'use strict';\n\n    // cmf functions\n    $.extend(window.app, {\n        declineDuplicates: function ($scope) {\n            if ($scope.find('.js-decline-duplicate').length === 0) {\n                return;\n            }\n\n            $scope.on('click', '.js-decline-duplicate', function () {\n                var $duplicateItem = $(this).closest('.js-duplicates-item');\n                $duplicateItem.css(\"opacity\", 0.5);\n\n                $.ajax({\n                    url: '/admin/customermanagementframework/duplicates/decline/' + $(this).data('id'),\n                    success: function (data) {\n                        if (data.success) {\n                            $duplicateItem.remove();\n                        } else {\n                            $duplicateItem.css(\"opacity\", 1);\n                        }\n                    }\n                });\n            });\n        },\n        registerSaveFilterDefinition: function () {\n            $('#save-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $input = $('input[name=\"filterDefinition[name]\"]');\n                var $requiredMessage = $('#name-required-message');\n                if ($($input).val().length < 1) {\n                    $input.focus();\n                    $requiredMessage.slideDown();\n                    setTimeout(function () {\n                        $requiredMessage.slideUp();\n                    }, 3000);\n                    return;\n                } else $requiredMessage.hide();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                var $disabledSelects = $form.find('select:disabled');\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', false);\n                });\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/save').submit();\n                $form.attr('action', originalAction);\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', true);\n                });\n            });\n        },\n        registerUpdateFilterDefinition: function () {\n            $('#update-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $input = $('input[name=\"filterDefinition[name]\"]');\n                var $requiredMessage = $('#name-required-message');\n                if ($($input).val().length < 1) {\n                    $input.focus();\n                    $requiredMessage.slideDown();\n                    setTimeout(function () {\n                        $requiredMessage.slideUp();\n                    }, 3000);\n                    return;\n                } else $requiredMessage.hide();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                var $disabledSelects = $form.find('select:disabled');\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', false);\n                });\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/update').submit();\n                $form.attr('action', originalAction);\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', true);\n                });\n            });\n        },\n        registerShareFilterDefinition: function () {\n            $('#share-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/share').submit();\n                $form.attr('action', originalAction);\n            });\n        },\n        registerNewCustomerAction: function () {\n            var $newCustomerButton = $('#add-new-customer');\n            var isPimcoreAvailable = ('undefined' !== typeof window.top.pimcore);\n            if(!isPimcoreAvailable) $newCustomerButton.hide();\n            $newCustomerButton.on('click', function (e) {\n                if (!isPimcoreAvailable) {\n                    app.Logger.error(\n                        'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                        objectId\n                    );\n                    return false;\n                }\n                $.ajax({\n                    method : 'POST',\n                    url: '/admin/customermanagementframework/customers/new',\n                    headers: {\n                        'X-Pimcore-Csrf-Token': $newCustomerButton.data('token')\n                    },\n                    success: function (data) {\n                        var objectId = data.id;\n                        if ('undefined' !== typeof window.top.pimcore) {\n                            window.top.pimcore.helpers.openObject(objectId, 'object');\n                        } else {\n                            app.Logger.error(\n                                'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                                objectId\n                            );\n                        }\n                    }\n                });\n            });\n        }\n    });\n})(jQuery);\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace CustomerManagementFrameworkBundle\\Controller\\Admin;\n\nuse Carbon\\Carbon;\nuse CustomerManagementFrameworkBundle\\Controller\\Admin;\nuse CustomerManagementFrameworkBundle\\CustomerList\\Exporter\\AbstractExporter;\nuse CustomerManagementFrameworkBundle\\CustomerList\\Exporter\\ExporterInterface;\nuse CustomerManagementFrameworkBundle\\CustomerList\\ExporterManagerInterface;\nuse CustomerManagementFrameworkBundle\\CustomerList\\Filter\\Exception\\SearchQueryException;\nuse CustomerManagementFrameworkBundle\\CustomerList\\SearchHelper;\nuse CustomerManagementFrameworkBundle\\CustomerProvider\\CustomerProviderInterface;\nuse CustomerManagementFrameworkBundle\\Helper\\Objects;\nuse CustomerManagementFrameworkBundle\\Model\\CustomerInterface;\nuse CustomerManagementFrameworkBundle\\Model\\CustomerSegmentInterface;\nuse CustomerManagementFrameworkBundle\\Model\\CustomerView\\FilterDefinition;\nuse Pimcore\\Db;\nuse Pimcore\\Model\\DataObject\\AbstractObject;\nuse Pimcore\\Model\\DataObject\\Concrete;\nuse Pimcore\\Model\\DataObject\\CustomerSegmentGroup;\nuse Pimcore\\Model\\DataObject\\Folder;\nuse Pimcore\\Model\\DataObject\\Listing;\nuse Pimcore\\Model\\DataObject\\Service;\nuse Pimcore\\Model\\Element\\ValidationException;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/customers\")\n */\nclass CustomersController extends Admin\n{\n    /**\n     * @var CustomerSegmentGroup[]|null\n     */\n    private $segmentGroups = null;\n\n    private ExporterManagerInterface $exporterManager;\n\n    public function onKernelControllerEvent(ControllerEvent $event): void\n    {\n        parent::onKernelControllerEvent($event);\n        $this->checkPermission('plugin_cmf_perm_customerview');\n        AbstractObject::setHideUnpublished(true);\n    }\n\n    /**\n     * @required\n     */\n    public function setExporterManager(ExporterManagerInterface $exporterManager): void\n    {\n        $this->exporterManager = $exporterManager;\n    }\n\n    /**\n     * @Route(\"/list\")\n     */\n    public function listAction(Request $request): Response\n    {\n        $filters = $this->fetchListFilters($request);\n        $orders = $this->fetchListOrder($request);\n        $errors = $request->get('errors', []);\n        $paginator = null;\n        $customerView = \\Pimcore::getContainer()->get('cmf.customer_view');\n\n        try {\n            $listing = $this->buildListing($filters, $orders);\n            $paginator = $this->buildPaginator($request, $listing);\n        } catch (SearchQueryException $e) {\n            $errors[] = $customerView->translate('There was an error in you search query: %s', $e->getMessage());\n        } catch (\\Exception $e) {\n            $errors[] = $customerView->translate('Error while building customer list: %s', $e->getMessage());\n        }\n\n        //empty paginator as the view expects a valid paginator\n        if (null === $paginator) {\n            $paginator = $this->buildPaginator($request, []);\n        }\n\n        if ($request->isXmlHttpRequest()) {\n            return $this->render($customerView->getOverviewWrapperTemplate(), [\n                'paginator' => $paginator,\n                'paginationVariables' => $paginator->getPaginationData(),\n                'customerView' => $customerView,\n                'idField' => Service::getVersionDependentDatabaseColumnName('id')\n            ]);\n        } else {\n            return $this->render(\n                '@PimcoreCustomerManagementFramework/admin/customers/list.html.twig',\n                [\n                    'segmentGroups' => $this->loadSegmentGroups(),\n                    'filters' => $filters,\n                    'errors' => $errors,\n                    'paginator' => $paginator,\n                    'paginationVariables' => $paginator->getPaginationData(),\n                    'customerView' => $customerView,\n                    'searchBarFields' => $this->getSearchHelper()->getConfiguredSearchBarFields(),\n                    'request' => $request,\n                    'filterDefinitions' => $this->getFilterDefinitions(),\n                    'filterDefinition' => $this->getFilterDefinition($request),\n                    'accessToTempCustomerFolder' => boolval($this->hasUserAccessToTempCustomerFolder()),\n                    'hideAdvancedFilterSettings' => boolval($request->get('segmentId')),\n                    'idField' => Service::getVersionDependentDatabaseColumnName('id')\n                ]\n            );\n        }\n    }\n\n    /**\n     * @Route(\"/detail\")\n     */\n    public function detailAction(Request $request): Response\n    {\n        $customer = $this->getSearchHelper()->getCustomerProvider()->getById((int)$request->get('id'));\n        if ($customer instanceof CustomerInterface) {\n            $customerView = \\Pimcore::getContainer()->get('cmf.customer_view');\n            if (!$customerView->hasDetailView($customer)) {\n                throw new \\RuntimeException(sprintf('Customer %d has no detail view to show', $customer->getId()));\n            }\n\n            /**\n             * @var Concrete $customer\n             */\n            if (!$customer->isAllowed('view')) {\n                throw new \\RuntimeException(sprintf('Not allowed to view customer %d', $customer->getId()));\n            }\n\n            return $this->render(\n                '@PimcoreCustomerManagementFramework/admin/customers/detail.html.twig',\n                [\n                    'customer' => $customer,\n                    'customerView' => $customerView,\n                    'request' => $request,\n                ]\n            );\n        }\n\n        throw new \\InvalidArgumentException('Invalid customer');\n    }\n\n    /**\n     * @Route(\"/export\")\n     */\n    public function exportAction(Request $request): JsonResponse\n    {\n        $filters = $this->fetchListFilters($request);\n        $listing = $this->buildListing($filters);\n\n        $idField = Service::getVersionDependentDatabaseColumnName('id');\n        $query = $listing->getQueryBuilder()\n            ->resetQueryPart('select')\n            ->select($idField);\n        $ids = Db::get()->fetchFirstColumn((string)$query);\n\n        $jobId = uniqid();\n        $this->exporterManager->saveExportTmpData($jobId, [\n            'processIds' => $ids,\n            'exporter' => $request->get('exporter'),\n        ]);\n\n        /** @noinspection PhpRouteMissingInspection */\n        return $this->jsonResponse([\n            'url' => $this->generateUrl('customermanagementframework_admin_customers_exportstep', ['jobId' => $jobId]),\n            'jobId' => $jobId,\n            'exporter' => $request->get('exporter'),\n        ]);\n    }\n\n    /**\n     * @route(\"/export-step\")\n     */\n    public function exportStepAction(Request $request): JsonResponse\n    {\n        $perRequest = $request->get(\n            'perRequest',\n            $this->getParameter('cmf.customer_export.items_per_request')\n        );\n\n        try {\n            $data = $this->exporterManager->getExportTmpData($request);\n        } catch (\\Exception $e) {\n            return $this->jsonResponse([\n                'error' => true,\n                'message' => $e->getMessage(),\n            ]);\n        }\n\n        //export finished\n        if (!sizeof($data['processIds'])) {\n            /** @noinspection PhpRouteMissingInspection */\n            return $this->jsonResponse([\n                'finished' => true,\n                'url' => $this->generateUrl('customermanagementframework_admin_customers_downloadfinishedexport',\n                    ['jobId' => $request->get('jobId')]),\n                'jobId' => $request->get('jobId'),\n            ]);\n        }\n\n        $ids = array_slice($data['processIds'], 0, $perRequest);\n        $processIds = array_slice($data['processIds'], $perRequest);\n\n        $idField = Service::getVersionDependentDatabaseColumnName('id');\n        $listing = $this->buildListing();\n        $listing->addConditionParam($idField . ' in ('.implode(', ', $ids).')');\n\n        $exporter = $this->getExporter($listing, $data['exporter']);\n        $exportData = $exporter->getExportData();\n\n        $totalExportData = $data['exportData'] ?? [];\n        $totalExportData = array_merge_recursive($totalExportData, $exportData);\n\n        $data['exportData'] = $totalExportData;\n        $data['processIds'] = $processIds;\n\n        $this->exporterManager->saveExportTmpData(\n            $request->get('jobId'),\n            $data\n        );\n\n        $notProcessedRecordsCount = sizeof($data['processIds']);\n        $totalRecordsCount = $notProcessedRecordsCount + sizeof($data['exportData'][AbstractExporter::ROWS]);\n\n        $percent = round(($totalRecordsCount - $notProcessedRecordsCount) * 100 / $totalRecordsCount);\n\n        return $this->jsonResponse([\n            'finished' => false,\n            'jobId' => $request->get('jobId'),\n            'notProcessedRecordsCount' => $notProcessedRecordsCount,\n            'totalRecordsCount' => $totalRecordsCount,\n            'percent' => $percent,\n            'progress' => sprintf('%s/%s (%s %%)', ($totalRecordsCount - $notProcessedRecordsCount), $totalRecordsCount,\n                $percent),\n\n        ]);\n    }\n\n    /**\n     * @route(\"/download-finished-export\")\n     */\n    public function downloadFinishedExportAction(Request $request): JsonResponse | Response\n    {\n        try {\n            $data = $this->exporterManager->getExportTmpData($request);\n        } catch (\\Exception $e) {\n            return $this->jsonResponse([\n                'error' => true,\n                'message' => $e->getMessage(),\n            ]);\n        }\n\n        if (sizeof($data['processIds'])) {\n            return $this->jsonResponse([\n                'error' => true,\n                'message' => 'export not finished yet',\n            ]);\n        }\n\n        $exportData = $data['exportData'];\n\n        $listing = $this->buildListing();\n        $exporter = $this->getExporter($listing, $data['exporter']);\n\n        $filename = sprintf(\n            '%s-%s-segment-export.%s',\n            $exporter->getName(),\n            Carbon::now()->format('YmdHis'),\n            $exporter->getExtension()\n        );\n\n        $content = $exporter->generateExportFile($exportData);\n        $contentSize = strlen($content);\n\n        $response = new Response();\n        $response\n            ->setContent($content)\n            ->headers->add(\n                [\n                    'Content-Type' => $exporter->getMimeType(),\n                    'Content-Length' => $contentSize,\n                    'Content-Disposition' => sprintf('attachment; filename=\"%s\"', $filename),\n                ]\n            );\n\n        $this->exporterManager->deleteExportTmpData($request->get('jobId'));\n\n        return $response;\n    }\n\n    /**\n     * Create new customer action\n     *\n     * @Route(\"/new\", methods={\"POST\"})\n     *\n     * @throws ValidationException\n     */\n    public function createCustomerAction(CustomerProviderInterface $customerProvider): JsonResponse\n    {\n        // check permissions write to temp folder -> ValidationException\n        if (!$this->hasUserAccessToTempCustomerFolder()) {\n            throw new ValidationException(sprintf('No permissions to save customer to folder \"%s\"',\n                $this->getTemporaryCustomerFolder()->getParent()));\n        }\n\n        $customer = $customerProvider->createCustomerInstance();\n        $customer->setParent($this->getTemporaryCustomerFolder());\n        $customer->setKey('New Customer');\n        $customer->setActive(true);\n        $customer->setEmail('dummy@customer.com');\n        Objects::checkObjectKey($customer);\n        $customer->save();\n\n        // return id of new object\n        return $this->jsonResponse([\n            'success' => true,\n            'id' => $customer->getId(),\n        ]);\n    }\n\n    /**\n     * Fetch customer folder object\n     *\n     * @throws \\Exception\n     */\n    protected function getTemporaryCustomerFolder(): \\Pimcore\\Model\\Asset\\Folder | Folder | \\Pimcore\\Model\\Document\\Folder\n    {\n        // fetch customer temp directory\n        $tempDirectory = $this->getParameter('pimcore_customer_management_framework.customer_provider.newCustomersTempDir');\n\n        return Service::createFolderByPath($tempDirectory);\n    }\n\n    /**\n     * Check if current user has access to temporary customer folder\n     *\n     * @throws \\Exception\n     */\n    protected function hasUserAccessToTempCustomerFolder(): bool\n    {\n        $folder = $this->getTemporaryCustomerFolder();\n\n        return $folder->isAllowed('save');\n    }\n\n    /**\n     * @internal\n     */\n    protected function getExporter(Listing\\Concrete $listing, string $exporterName): ExporterInterface\n    {\n        if (!$this->exporterManager->hasExporter($exporterName)) {\n            throw new \\InvalidArgumentException('Exporter does not exist');\n        }\n\n        return $this->exporterManager->buildExporter($exporterName, $listing);\n    }\n\n    /**\n     * Load all segment groups\n     *\n     * @return CustomerSegmentGroup[]\n     */\n    public function loadSegmentGroups(): array\n    {\n        if (is_null($this->segmentGroups)) {\n            $segmentGroups = $this->getSearchHelper()->getSegmentManager()->getSegmentGroups();\n            $segmentGroups->addConditionParam('showAsFilter = 1');\n            // sort by filterSortOrder high to low\n            $segmentGroups->setOrderKey('filterSortOrder IS NULL, filterSortOrder DESC', false);\n            $this->segmentGroups = $segmentGroups->load();\n        }\n\n        return $this->segmentGroups;\n    }\n\n    protected function buildListing(array $filters = [], array $orders = []): Listing\\Concrete\n    {\n        $listing = $this->getSearchHelper()->getCustomerProvider()->getList();\n        $idField = Service::getVersionDependentDatabaseColumnName('id');\n\n        if (array_key_exists('operator-segments', $filters)) {\n            if ($filters['operator-segments'] == 'ANY') {\n                $listing->setGroupBy($idField, true);\n            }\n        }\n\n        if (count($orders) > 0) {\n            $listing\n                ->setOrderKey(array_keys($orders), false)\n                ->setOrder(array_values($orders));\n        } else {\n            $listing\n                ->setOrderKey($idField)\n                ->setOrder('ASC');\n        }\n\n        $this->getSearchHelper()->addListingFilters($listing, $filters, $this->getPimcoreUser());\n\n        return $listing;\n    }\n\n    /**\n     * Fetch filters and set them on view\n     */\n    protected function fetchListFilters(Request $request): array\n    {\n        $filters = $request->get('filter', []);\n        $filters = $this->addPrefilteredSegmentToFilters($request, $filters);\n        $filters = $this->addFilterDefinitionCustomer($request, $filters);\n\n        return $filters;\n    }\n\n    /**\n     * Fetch orders and set them on view\n     */\n    protected function fetchListOrder(Request $request): array\n    {\n        $orders = $request->get('order', []);\n        $ordersNullsLast = [];\n\n        foreach ($orders as $key => $val) {\n            if (strtolower($val) == 'asc') {\n                $ordersNullsLast['ISNULL(`'.$key.'`)'] = strtoupper($val);\n                $ordersNullsLast['(`'.$key.'` = \"\")'] = strtoupper($val);\n            }\n            $ordersNullsLast['TRIM(`'.$key.'`)'] = strtoupper($val);\n        }\n\n        return $ordersNullsLast;\n    }\n\n    protected function addPrefilteredSegmentToFilters(Request $request, array $filters): array\n    {\n        $segment = $this->fetchPrefilteredSegment($request);\n        if ($segment) {\n            if (!isset($filters['segments'])) {\n                $filters['segments'] = [];\n            }\n\n            $groupId = $segment->getGroup() ? $segment->getGroup()->getId() : 'default';\n\n            $groupSegmentIds = [];\n            if (isset($filters['segments'][$groupId])) {\n                $groupSegmentIds = $filters['segments'][$groupId];\n            }\n\n            if (!in_array($segment->getId(), $groupSegmentIds)) {\n                $groupSegmentIds[] = $segment->getId();\n            }\n\n            $filters['segments'][$groupId] = $groupSegmentIds;\n        }\n\n        return $this->addFilterDefinitionSegments($request, $filters);\n    }\n\n    protected function fetchPrefilteredSegment(Request $request): ?CustomerSegmentInterface\n    {\n        $segmentId = $request->get('segmentId');\n\n        if ($segmentId) {\n            $segment = \\Pimcore::getContainer()->get('cmf.segment_manager')->getSegmentById($segmentId);\n            if (!$segment) {\n                throw new \\InvalidArgumentException(sprintf('Segment %d was not found', $segmentId));\n            }\n\n            return $segment;\n        }\n\n        return null;\n    }\n\n    /**\n     * Fetch all filter definitions available for current user\n     *\n     * @return FilterDefinition[]\n     */\n    protected function getFilterDefinitions(): array\n    {\n        // load filter definitions\n        $FilterDefinitionListing = new FilterDefinition\\Listing();\n        // build user ids condition for filter definition\n        $FilterDefinitionListing->setUserIdsCondition($this->getUserIds());\n        // return loaded filter definitions array\n        return $FilterDefinitionListing->load();\n    }\n\n    /**\n     * Fetch the FilterDefinition object selected in request\n     *\n     * @return null|FilterDefinition Returns FilterDefinition object if definition key is defined in filters array,\n     * FilterDefinition with id in DB and user is allowed to use FilterDefinition. Otherwise returns null.\n     */\n    protected function getFilterDefinition(Request $request): ?FilterDefinition\n    {\n        // fetch filter definition information\n        $filterDefinitionData = $request->get('filterDefinition', []);\n        // build default FilterDefinition object if no selected\n        $segmentGroups = $this->loadSegmentGroups();\n        $DefaultFilterDefinition = (new FilterDefinition())->setShowSegments(Objects::getIdsFromArray($segmentGroups));\n        // check if filter definition given\n        if (!array_key_exists('id', $filterDefinitionData)) {\n            // no filter definition found\n            return $DefaultFilterDefinition;\n        }\n        // check if filter definition object exists\n        $filterDefinition = FilterDefinition::getById((int)$filterDefinitionData['id']);\n        if (!$filterDefinition instanceof FilterDefinition) {\n            // no filter definition available\n            return $DefaultFilterDefinition;\n        }\n        // check if current user is allowed to use FilterDefinition\n        if (!$filterDefinition->isUserAllowed($this->getPimcoreUser())) {\n            // user is not allowed to use FilterDefinition\n            return $DefaultFilterDefinition;\n        }\n        // return FilterDefinition definition\n        return $filterDefinition;\n    }\n\n    /**\n     * Fetch all user ids of current user and their roles\n     */\n    protected function getUserIds(): array\n    {\n        // fetch roles of user\n        $userIds = $this->getPimcoreUser()->getRoles();\n        // fetch id of user\n        $userIds[] = $this->getPimcoreUser()->getId();\n\n        // return user ids\n        return $userIds;\n    }\n\n    /**\n     * Merge FilterDefinition for customer fields with filters array\n     */\n    protected function addFilterDefinitionCustomer(Request $request, array $filters): array\n    {\n        // merge filters with filters of filter definition\n        $filterDefinition = $this->getFilterDefinition($request);\n        // check if filter definitions found\n        if (is_null($filterDefinition)) {\n            return $filters;\n        }\n        // fetch definitions for customer / root without segments\n        $filterDefinitionCustomer = $filterDefinition->getDefinition();\n        unset($filterDefinitionCustomer['segments']);\n        if ($filterDefinition->isReadOnly()) {\n            // overwrite filters with FilterDefinition definition\n            $filters = array_merge($filters, $filterDefinitionCustomer);\n        } else {\n            // filter of user more important than filter definition\n            $filters = array_merge($filterDefinitionCustomer, $filters);\n        }\n        // return merged filters array\n        return $filters;\n    }\n\n    /**\n     * Add segment filters from FilterDefinition to filters array\n     */\n    protected function addFilterDefinitionSegments(Request $request, array $filters): array\n    {\n        $filters['showSegments'] ??= [];\n\n        // merge filters with filters of filter definition\n        $filterDefinition = $this->getFilterDefinition($request);\n\n        // check if filter definitions found\n        if (is_null($filterDefinition)) {\n            return $filters;\n        }\n\n        // fetch definitions for segments / only segments array\n        $filterDefinition->cleanUp(false);\n\n        $filterDefinitionSegments = $filterDefinition->getDefinition()['segments'] ?? [];\n\n        if ($filterDefinition->isReadOnly()) {\n            // overwrite filters with FilterDefinition definition\n            $filters['segments'] = $filterDefinitionSegments;\n        } else {\n            // filter of user more important than filter definition\n            $filters['segments'] = array_replace_recursive($filterDefinitionSegments, $filters['segments'] ?? []);\n        }\n\n        // set to filter which segments to show\n        $filters['showSegments'] = $request->get('apply-segment-selection') ? $filters['showSegments'] : $filterDefinition->getShowSegments();\n\n        // return merged filters array\n        return $filters;\n    }\n\n    protected function getSearchHelper(): SearchHelper\n    {\n        return \\Pimcore::getContainer()->get(SearchHelper::class);\n    }\n}\n", "var _cfg = _config || {};\n\nvar cls = {\n    log : function( _output ){\n        if( app.debug ){\n            console.log(_output);\n        }\n    }\n};\n\nvar app = {\n    debug: _cfg.debug || false,\n    timeoutHandler: [],\n    DEVICE : ''\n};\n\nwindow.app = app || {};\n\napp.Util = (function() {\n    'use strict';\n\n    return {\n        getOrCreateInstance: function ($element, identifier, factory) {\n            if (!$element.data(identifier)) {\n                $element.data(identifier, factory($element));\n            }\n\n            return $element.data(identifier);\n        },\n\n        featureDetect: (function () {\n            var results = {};\n            var tests = {\n                // taken from modernizr\n                localStorage: function () {\n                    var mod = 'test';\n\n                    try {\n                        localStorage.setItem(mod, mod);\n                        localStorage.removeItem(mod);\n                        return true;\n                    } catch (e) {\n                        return false;\n                    }\n                },\n\n                json: function () {\n                    return 'JSON' in window && 'parse' in JSON && 'stringify' in JSON;\n                }\n            };\n\n            return function (type) {\n                if ('undefined' === typeof tests[type]) {\n                    throw new Error('Test ' + type + ' is not defined');\n                }\n\n                if ('undefined' === typeof results[type]) {\n                    results[type] = tests[type].call();\n                }\n\n                return results[type];\n            };\n        }())\n    }\n}());\n\napp.Logger = (function() {\n    var logger = {\n        // log even if environemtn is not development\n        forceLog: false\n    };\n\n    var canLog = function () {\n        if (!window.console) {\n            return false;\n        }\n\n        if (logger.forceLog) {\n            return true;\n        }\n\n        return !!app.debug;\n    };\n\n    var makeLogger = function (type) {\n        return function () {\n            if (canLog()) {\n                window.console[type].apply(logger, Array.prototype.slice.call(arguments));\n            }\n        };\n    };\n\n    logger.canLog = canLog;\n    $.each(['error', 'warn', 'info', 'debug', 'log'], function (idx, type) {\n        logger[type] = makeLogger(type);\n    });\n\n    return logger;\n}());\n\napp.PimcoreLinks = (function () {\n    'use strict';\n\n    return {\n        /**\n         * Initialize for all pimcore links\n         * @param $scope\n         */\n        initialize: function ($scope) {\n            var that = this;\n\n            $scope.find('.js-pimcore-link').on('click', function (e) {\n                var objectId = $(this).data('pimcore-id');\n\n                if (that.isPimcoreAvailable()) {\n                    window.top.pimcore.helpers.openObject(objectId, 'object');\n                } else {\n                    app.Logger.error(\n                        'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                        objectId\n                    );\n                }\n            });\n        },\n\n        /**\n         * Check if pimcore object is available (we're inside iframe)\n         * @returns {boolean}\n         */\n        isPimcoreAvailable: function () {\n            return 'undefined' !== typeof window.top.pimcore;\n        }\n    };\n}());\n\napp.ToggleGroup = (function() {\n    return {\n        initialize: function ($scope) {\n            $scope.find('[data-toggle-group-trigger]').each(function() {\n                var $trigger = $(this);\n                var group = $trigger.data('toggle-group-trigger');\n                var $groups = $trigger.closest('.js-toggle-group-container').find('[data-toggle-group=\"' + group + '\"]');\n\n                $groups.hide().removeClass('hide');\n                $groups.first().show();\n\n                $trigger.on('click', function(e) {\n                    e.preventDefault();\n                    $groups.toggle();\n                });\n            });\n        }\n    }\n}());\n\nif ('undefined' === typeof app.Box) {\n    app.Box = {};\n}\n\napp.Box.CollapseHandler = (function () {\n    'use strict';\n\n    return function ($box) {\n        var storageKey = 'collapseState';\n        var collapseClass = 'collapsed-box';\n        var identifier = $box.data('identifier');\n        var $collapseWidget = $box.find('[data-widget=\"collapse\"]');\n        var $icon = $box.find('[data-widget=\"collapse\"] i');\n\n        var StateStorage = {\n            canHandleState: (function () {\n                if (!identifier) {\n                    return false;\n                }\n\n                var result = true;\n                $.each(['localStorage', 'json'], function (index, feature) {\n                    if (!app.Util.featureDetect(feature)) {\n                        result = false;\n                    }\n                });\n\n                return result;\n            }()),\n\n            load: function () {\n                var state = localStorage.getItem(storageKey);\n                if (null !== state) {\n                    state = JSON.parse(state);\n                } else {\n                    state = {};\n                }\n\n                return state;\n            },\n\n            save: function (state) {\n                localStorage.setItem(storageKey, JSON.stringify(state));\n            }\n        };\n\n        var Box = {\n            isCollapsed: function () {\n                return $box.hasClass(collapseClass);\n            },\n\n            collapse: function (state) {\n\n                if (state) {\n                    $box.addClass(collapseClass);\n                } else {\n                    $box.removeClass(collapseClass);\n                }\n\n                Box.updateCollapseIcon(state);\n            },\n\n            updateCollapseIcon: function(state)\n            {\n                var iconClass;\n\n                if (state) {\n                    iconClass = 'fa-plus';\n                } else {\n                    iconClass = 'fa-minus';\n                }\n\n                $icon.attr('class', 'fa ' + iconClass);\n            },\n\n            handleState: function () {\n                var state = this.loadState();\n                if (state && !this.isCollapsed()) {\n                    this.collapse(true);\n                }\n            },\n\n            loadState: function () {\n                if (!StateStorage.canHandleState) {\n                    return;\n                }\n\n                var storage = StateStorage.load();\n\n                var state = false;\n                if ('undefined' !== typeof storage[identifier] && storage[identifier]) {\n                    state = true;\n                }\n\n                return state;\n            },\n\n            saveState: function (state) {\n                state = !!state;\n\n                if (!StateStorage.canHandleState) {\n                    return;\n                }\n\n                var storage = StateStorage.load();\n                if ('undefined' === typeof storage[identifier]) {\n                    storage[identifier] = {};\n                }\n\n                storage[identifier] = state;\n\n                StateStorage.save(storage);\n            }\n        };\n\n        // save collapsed state when widget is clicked\n        if (StateStorage.canHandleState) {\n            $collapseWidget.on('click', function (e) {\n                // negate state as it will be changed after this handler runs\n                Box.saveState(!Box.isCollapsed());\n                Box.updateCollapseIcon(!Box.isCollapsed());\n            });\n        }\n\n        // trigger box collapse from other elements, but keep updating collapse icon\n        $box.find('[data-widget=\"collapse-trigger\"]').on('click', function (e) {\n            e.preventDefault();\n            $collapseWidget.trigger('click');\n        });\n\n        Box.handleState();\n\n        return Box;\n    };\n}());\n\nif ('undefined' === typeof app.SearchFilter) {\n    app.SearchFilter = {};\n}\n\napp.SearchFilter.Form = (function () {\n    'use strict';\n\n    var Form = function ($form) {\n        this.$form = $form;\n\n        this.setupFormSubmitHandler();\n        this.setupDateRangePickers();\n    };\n\n    Form.prototype.setupFormSubmitHandler = function () {\n        var that = this;\n\n        // do not submit empty filter values (only submits filters which have values)\n        this.$form.on('submit', function (e) {\n            that.prepareFormSubmit();\n\n            // no filters left -> load same URL without query string (no filters)\n            if (that.$form.serializeArray().length === 0) {\n                e.preventDefault();\n                window.location = window.location.href.split('?')[0];\n            }\n        });\n    };\n\n    /**\n     * Setup date range pickers and add hidden inputs with start/end values on change\n     */\n    Form.prototype.setupDateRangePickers = function () {\n        var that = this;\n        this.dateRangePickers = [];\n\n        this.$form.find(':input.plugin-daterangepicker').each(function () {\n            var $input = $(this);\n\n            // handle update event and add hidden fields with from/to values to form\n            $input.on('update.DateRangePicker', function (e, pickerResult) {\n                var baseName = $input.attr('name').match(/^filter\\[(.+)\\]$/);\n                if (null === baseName) {\n                    app.Logger.error('Could not resolve base name for date range input', $input.attr('name'));\n                    return;\n                }\n\n                baseName = baseName[1];\n\n                $.each(['from', 'to'], function (index, type) {\n                    var value = '';\n                    if (pickerResult[type]) {\n                        value = pickerResult[type].format('DD.MM.YYYY');\n                    }\n\n                    // orderDateFrom, orderDateTo\n                    var inputName = baseName + type.charAt(0).toUpperCase() + type.slice(1)\n\n                    that.updateHiddenField('filter[' + inputName + ']', value);\n                });\n            });\n\n            // initialize date picker instance\n            var dateRangePicker = app.Util.getOrCreateInstance(\n                $(this), 'SearchFilter.DateRangePicker',\n                function ($el) {\n                    return new app.SearchFilter.DateRangePicker($el);\n                }\n            );\n\n            that.dateRangePickers.push(dateRangePicker);\n        });\n    };\n\n    /**\n     * Add/update/remove hidden field from form\n     *\n     * @param name\n     * @param value\n     */\n    Form.prototype.updateHiddenField = function (name, value) {\n        var field = this.$form.find(':input[type=\"hidden\"][name=\"' + name + '\"]');\n        value = $.trim(value);\n\n        if (field.length === 0 && value.length > 0) {\n            field = $('<input />')\n                .attr('type', 'hidden')\n                .attr('name', name);\n\n            field.appendTo(this.$form);\n        }\n\n        // remove hidden field without value\n        if (field.length === 1 && value.length === 0) {\n            field.remove();\n        } else {\n            field.val(value);\n        }\n    };\n\n    /**\n     * Disable empty form fields before submitting form\n     */\n    Form.prototype.prepareFormSubmit = function () {\n        var disableInput = function (input) {\n            input.data('before-form-prepare-state', input.prop('disabled'));\n            input.prop('disabled', true);\n        };\n\n        this.$form.find(':input').each(function () {\n            var $input = $(this);\n            if ($input.hasClass('form-submit-disabled') || !$.trim($input.val())) {\n                disableInput($input);\n            }\n        });\n    };\n\n    /**\n     * Restore form field state after submitting form\n     */\n    Form.prototype.restoreFormFieldStates = function () {\n        this.$form.find(':input').each(function () {\n            var $input = $(this);\n\n            var previousState = !!$input.data('before-form-prepare-state');\n            if ($input.prop('disabled')) {\n                $input.prop('disabled', previousState);\n            }\n        });\n    };\n\n    return Form;\n}());\n\napp.SearchFilter.DateRangePicker = (function () {\n    'use strict';\n\n    var DateRangePicker = function ($input) {\n        this.$input = $input;\n\n        // do not include input display value in form submit\n        $input.addClass('form-submit-disabled');\n\n        this.initDateRangePicker();\n    };\n\n    DateRangePicker.prototype.triggerUpdate = function () {\n        var picker = this.$input.data('daterangepicker');\n\n        this.$input.trigger('update.DateRangePicker', {\n            from: picker.startDate,\n            to: picker.endDate\n        });\n    };\n\n    DateRangePicker.prototype.initDateRangePicker = function () {\n        var that = this;\n        var dates = this.buildInitialDates();\n        var ranges = this.buildRanges();\n\n        this.$input.daterangepicker({\n            autoUpdateInput: true,\n            autoApply: true,\n            alwaysShowCalendars: true,\n            showWeekNumbers: true,\n            startDate: dates.startDate,\n            endDate: dates.endDate,\n            locale: {\n                format: 'DD.MM.YYYY'\n            },\n            ranges: ranges\n        });\n\n        // trigger update event when picker changes\n        this.$input.on('apply.daterangepicker', $.proxy(this.triggerUpdate, this));\n\n        // trigger update event initally\n        this.triggerUpdate();\n    };\n\n    DateRangePicker.prototype.buildRanges = function () {\n        var ranges = {\n            'Today': [moment(), moment()],\n            'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],\n            'This Month': [moment().startOf('month'), moment().endOf('month')],\n            'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]\n        };\n\n        // add ranges defined by data attribute\n        var dataRanges = this.$input.data('date-ranges');\n        if (dataRanges && 'object' === typeof dataRanges) {\n            $.each(dataRanges, function(label, range) {\n                ranges[label] = [\n                    moment(range.startDate, 'DD.MM.YYYY'),\n                    moment(range.endDate, 'DD.MM.YYYY')\n                ];\n            });\n        }\n\n        return ranges;\n    };\n\n    DateRangePicker.prototype.buildInitialDates = function () {\n        var startDate;\n        if (this.$input.data('date-from')) {\n            startDate = moment(this.$input.data('date-from'), 'DD.MM.YYYY');\n        } else {\n            startDate = moment().startOf('month');\n        }\n\n        var endDate;\n        if (this.$input.data('date-to')) {\n            endDate = moment(this.$input.data('date-to'), 'DD.MM.YYYY');\n        } else {\n            if (startDate) {\n                endDate = startDate.clone().endOf('month');\n            } else {\n                endDate = moment().startOf('month');\n            }\n        }\n\n        return {\n            startDate: startDate,\n            endDate: endDate\n        };\n    };\n\n    return DateRangePicker;\n}());\n\n;(function ($) {\n    'use strict';\n\n    // generic admin-lte functions (e.g. selects, collapsed boxes, ...)\n    $.extend(window.app, {\n        /**\n         * Initialize function\n         */\n        _init: function ($scope) {\n            //set Device for AjaxInclude\n            if (matchMedia('(max-width:767px)').matches) {\n                app.DEVICE = 'mobile';\n            }\n        },\n\n        /**\n         * Auto submit forms on change\n         * @param $scope\n         */\n        formAutoSubmit: function ($scope) {\n            $scope.find('.js-form-auto-submit').on('change', function () {\n                $(this).closest('form').submit();\n            });\n        },\n\n        /**\n         * Initialize select2 on .plugin-select2 elements\n         * @param $scope\n         */\n        select2: function ($scope) {\n            $scope.find(':input.plugin-select2').each(function () {\n                var $element = $(this);\n\n                // read placeholder from data-placeholder attribute\n                var placeholder = '';\n                if ($element.data('placeholder')) {\n                    placeholder = $element.data('placeholder');\n                }\n\n                var options = $element.data('select2-options') || {};\n                options = $.extend(true, {}, {\n                    width: '100%',\n                    allowClear: true,\n                    placeholder: placeholder\n                }, options);\n\n                $element\n                    .select2(options)\n                    .focus(function () {\n                        // workaround for clicking on label not triggering item focus (should be fixed upstream with 4.0.3)\n                        $(this).select2('open');\n                    });\n            });\n        },\n\n        /**\n         * Initialize iCheck in .plugin-icheck elements\n         * @param $scope\n         */\n        iCheck: function ($scope) {\n            $scope.find('.plugin-icheck :input').iCheck({\n                checkboxClass: 'icheckbox_flat-blue',\n                radioClass: 'iradio_flat-blue'\n            });\n        },\n\n        /**\n         * Initialize tooltips\n         * @param $scope\n         */\n        tooltip: function ($scope) {\n            $scope.find('.tooltip-trigger').tooltip();\n        },\n\n        /**\n         * Search filter form handling\n         * @param $scope\n         */\n        searchFilter: function ($scope) {\n            $scope.find('.search-filters').each(function () {\n                var $container = $(this);\n\n                app.Util.getOrCreateInstance(\n                    $container, 'SearchFilter.Form',\n                    function ($el) {\n                        return new app.SearchFilter.Form($el);\n                    }\n                );\n            });\n        },\n\n        /**\n         * Set up persistent collapse state saved to local storage\n         * @param $scope\n         */\n        collapsibleStateBox: function ($scope) {\n            $scope.find('.box-collapsible-state').each(function () {\n                var $container = $(this);\n                if ($container.data('identifier')) {\n                    app.Util.getOrCreateInstance(\n                        $container, 'Box.CollapseHandler',\n                        function ($el) {\n                            return app.Box.CollapseHandler($el);\n                        }\n                    );\n                }\n            });\n        },\n\n        /**\n         * Reload page when item count changes\n         * @param $scope\n         */\n        paginationFooterCount: function ($scope) {\n            $scope.find('.pagination-footer__count-selector-form').find('select').on('change', function (e) {\n                var $selectedOption = $(this).find('option:selected');\n                if ($selectedOption.data('url')) {\n                    window.location = $selectedOption.data('url');\n                }\n            });\n        },\n\n        /**\n         * Collapse tables when .collapse-trigger caption is clicked\n         * @param $scope\n         */\n        tableCollapse: function ($scope) {\n            $scope.find('.table-collapsible').each(function () {\n                var $table = $(this);\n                var $caption = $table.find('caption');\n\n                $('<span class=\"collapse-indicator\" />')\n                    .append('<span class=\"collapse-indicator-icon fa fa-chevron-down\" />')\n                    .prependTo($caption);\n\n                $caption.on('click', function (e) {\n                    $table.toggleClass('table-collapsible--collapsed');\n                });\n            });\n        },\n\n        /**\n         * URL select loading option URL on change\n         * @param $scope\n         */\n        urlSelect: function ($scope) {\n            $scope.find('select.url-select').on('change', function (e) {\n                e.preventDefault();\n\n                var selectedOption = $(this).find('option:selected');\n                if (selectedOption.length === 1) {\n                    window.location.href = selectedOption.data('url');\n                }\n            });\n        },\n\n        /**\n         * Modals\n         * @param $scope\n         */\n        modal: function ($scope) {\n            $scope.on('hidden.bs.modal', '.modal', function () {\n                $(this).removeData('bs.modal');\n            });\n        },\n\n        /**\n         * Links to pimcore objects\n         * @param $scope\n         */\n        pimcoreLink: function ($scope) {\n            app.PimcoreLinks.initialize($scope);\n        },\n\n        /**\n         * Toggle groups (order comment edit)\n         * @param $scope\n         */\n        toggleGroup: function ($scope) {\n            app.ToggleGroup.initialize($scope);\n        }\n    });\n})(jQuery);\n\n;(function ($) {\n    'use strict';\n\n    // cmf functions\n    $.extend(window.app, {\n        declineDuplicates: function ($scope) {\n            if ($scope.find('.js-decline-duplicate').length === 0) {\n                return;\n            }\n\n            $scope.on('click', '.js-decline-duplicate', function () {\n                var $duplicateItem = $(this).closest('.js-duplicates-item');\n                $duplicateItem.css(\"opacity\", 0.5);\n\n                $.ajax({\n                    url: '/admin/customermanagementframework/duplicates/decline/' + $(this).data('id'),\n                    success: function (data) {\n                        if (data.success) {\n                            $duplicateItem.remove();\n                        } else {\n                            $duplicateItem.css(\"opacity\", 1);\n                        }\n                    }\n                });\n            });\n        },\n        registerSaveFilterDefinition: function () {\n            $('#save-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $input = $('input[name=\"filterDefinition[name]\"]');\n                var $requiredMessage = $('#name-required-message');\n                if ($($input).val().length < 1) {\n                    $input.focus();\n                    $requiredMessage.slideDown();\n                    setTimeout(function () {\n                        $requiredMessage.slideUp();\n                    }, 3000);\n                    return;\n                } else $requiredMessage.hide();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                var $disabledSelects = $form.find('select:disabled');\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', false);\n                });\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/save').submit();\n                $form.attr('action', originalAction);\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', true);\n                });\n            });\n        },\n        registerUpdateFilterDefinition: function () {\n            $('#update-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $input = $('input[name=\"filterDefinition[name]\"]');\n                var $requiredMessage = $('#name-required-message');\n                if ($($input).val().length < 1) {\n                    $input.focus();\n                    $requiredMessage.slideDown();\n                    setTimeout(function () {\n                        $requiredMessage.slideUp();\n                    }, 3000);\n                    return;\n                } else $requiredMessage.hide();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                var $disabledSelects = $form.find('select:disabled');\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', false);\n                });\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/update').submit();\n                $form.attr('action', originalAction);\n                $disabledSelects.each(function(){\n                    $(this).prop('disabled', true);\n                });\n            });\n        },\n        registerShareFilterDefinition: function () {\n            $('#share-filter-definition').on('click', function (e) {\n                e.preventDefault();\n                var $form = $(this).closest(\"form\");\n                var originalAction = $form.attr('action');\n                $form.attr('action', '/admin/customermanagementframework/customers/filter-definition/share').submit();\n                $form.attr('action', originalAction);\n            });\n        },\n        registerNewCustomerAction: function () {\n            var $newCustomerButton = $('#add-new-customer');\n            var isPimcoreAvailable = ('undefined' !== typeof window.top.pimcore);\n            if(!isPimcoreAvailable) $newCustomerButton.hide();\n            $newCustomerButton.on('click', function (e) {\n                if (!isPimcoreAvailable) {\n                    app.Logger.error(\n                        'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                        objectId\n                    );\n                    return false;\n                }\n                $.ajax({\n                    method : 'POST',\n                    url: '/admin/customermanagementframework/customers/new',\n                    headers: {\n                        'X-Pimcore-Csrf-Token': $newCustomerButton.data('token')\n                    },\n                    success: function (data) {\n                        var objectId = data.id;\n                        if ('undefined' !== typeof window.top.pimcore) {\n                            window.top.pimcore.helpers.openObject(objectId, 'object');\n                        } else {\n                            app.Logger.error(\n                                'Pimcore is not available (e.g. backend opened outside iframe) - can\\'t load object with ID',\n                                objectId\n                            );\n                        }\n                    }\n                });\n            });\n        }\n    });\n})(jQuery);\n\n;(function( $ ){\n    \"use strict\";\n\n    window.app.init = function ($scope) {\n        /* -> _config._preload = Load this functions first */\n        if (_cfg['_preload']) {\n            $.each( _cfg['_preload'], function( _key, _val ){\n                if( typeof _val == 'boolean' && typeof window.app[_key] == 'function' ){\n                    window.app[_key]($scope);\n                }\n            });\n        }\n\n        /* -> _config = Load all others (not _preload and _reload) */\n        $.each( _cfg, function( _key, _val ){\n            if( ( typeof _val == 'boolean' && typeof window.app[_key] == 'function' && _key != '_reload' && _key != '_preload' ) ){\n                window.app[_key]($scope);\n            }\n        });\n\n        /* -> _config._reload = Load the ajaxInclued and others after the rest */\n        if (_cfg['_reload']) {\n            $.each( _cfg['_reload'], function( _key, _val ){\n                if( ( typeof _val == 'boolean' && typeof window.app[_key] == 'function' ) ){\n                    window.app[_key]($scope);\n                }\n            });\n        }\n    };\n\n    $(document).ready(function() {\n        window.app.init($('body'));\n    });\n})(jQuery);\n", "var _cfg=_config||{},cls={log:function(t){app.debug&&console.log(t)}},app={debug:_cfg.debug||!1,timeoutHandler:[],DEVICE:\"\"};window.app=app||{},app.Util=function(){\"use strict\";return{getOrCreateInstance:function(t,e,n){return t.data(e)||t.data(e,n(t)),t.data(e)},featureDetect:function(){var t={},e={localStorage:function(){try{return localStorage.setItem(\"test\",\"test\"),localStorage.removeItem(\"test\"),!0}catch(t){return!1}},json:function(){return\"JSON\"in window&&\"parse\"in JSON&&\"stringify\"in JSON}};return function(n){if(void 0===e[n])throw new Error(\"Test \"+n+\" is not defined\");return void 0===t[n]&&(t[n]=e[n].call()),t[n]}}()}}(),app.Logger=function(){var t={forceLog:!1},e=function(){return!!window.console&&(!!t.forceLog||!!app.debug)};return t.canLog=e,$.each([\"error\",\"warn\",\"info\",\"debug\",\"log\"],function(n,i){t[i]=function(n){return function(){e()&&window.console[n].apply(t,Array.prototype.slice.call(arguments))}}(i)}),t}(),app.PimcoreLinks=function(){\"use strict\";return{initialize:function(t){var e=this;t.find(\".js-pimcore-link\").on(\"click\",function(t){var n=$(this).data(\"pimcore-id\");e.isPimcoreAvailable()?window.top.pimcore.helpers.openObject(n,\"object\"):app.Logger.error(\"Pimcore is not available (e.g. backend opened outside iframe) - can't load object with ID\",n)})},isPimcoreAvailable:function(){return void 0!==window.top.pimcore}}}(),app.ToggleGroup={initialize:function(t){t.find(\"[data-toggle-group-trigger]\").each(function(){var t=$(this),e=t.data(\"toggle-group-trigger\"),n=t.closest(\".js-toggle-group-container\").find('[data-toggle-group=\"'+e+'\"]');n.hide().removeClass(\"hide\"),n.first().show(),t.on(\"click\",function(t){t.preventDefault(),n.toggle()})})}},void 0===app.Box&&(app.Box={}),app.Box.CollapseHandler=function(){\"use strict\";return function(t){var e=\"collapsed-box\",n=t.data(\"identifier\"),i=t.find('[data-widget=\"collapse\"]'),a=t.find('[data-widget=\"collapse\"] i'),o=function(){if(!n)return!1;var t=!0;return $.each([\"localStorage\",\"json\"],function(e,n){app.Util.featureDetect(n)||(t=!1)}),t}(),r=function(){var t=localStorage.getItem(\"collapseState\");return t=null!==t?JSON.parse(t):{}},c=function(t){localStorage.setItem(\"collapseState\",JSON.stringify(t))},s={isCollapsed:function(){return t.hasClass(e)},collapse:function(n){n?t.addClass(e):t.removeClass(e),s.updateCollapseIcon(n)},updateCollapseIcon:function(t){var e;e=t?\"fa-plus\":\"fa-minus\",a.attr(\"class\",\"fa \"+e)},handleState:function(){this.loadState()&&!this.isCollapsed()&&this.collapse(!0)},loadState:function(){if(o){var t=r(),e=!1;return void 0!==t[n]&&t[n]&&(e=!0),e}},saveState:function(t){if(t=!!t,o){var e=r();void 0===e[n]&&(e[n]={}),e[n]=t,c(e)}}};return o&&i.on(\"click\",function(t){s.saveState(!s.isCollapsed()),s.updateCollapseIcon(!s.isCollapsed())}),t.find('[data-widget=\"collapse-trigger\"]').on(\"click\",function(t){t.preventDefault(),i.trigger(\"click\")}),s.handleState(),s}}(),void 0===app.SearchFilter&&(app.SearchFilter={}),app.SearchFilter.Form=function(){\"use strict\";var t=function(t){this.$form=t,this.setupFormSubmitHandler(),this.setupDateRangePickers()};return t.prototype.setupFormSubmitHandler=function(){var t=this;this.$form.on(\"submit\",function(e){t.prepareFormSubmit(),0===t.$form.serializeArray().length&&(e.preventDefault(),window.location=window.location.href.split(\"?\")[0])})},t.prototype.setupDateRangePickers=function(){var t=this;this.dateRangePickers=[],this.$form.find(\":input.plugin-daterangepicker\").each(function(){var e=$(this);e.on(\"update.DateRangePicker\",function(n,i){var a=e.attr(\"name\").match(/^filter\\[(.+)\\]$/);null!==a?(a=a[1],$.each([\"from\",\"to\"],function(e,n){var o=\"\";i[n]&&(o=i[n].format(\"DD.MM.YYYY\"));var r=a+n.charAt(0).toUpperCase()+n.slice(1);t.updateHiddenField(\"filter[\"+r+\"]\",o)})):app.Logger.error(\"Could not resolve base name for date range input\",e.attr(\"name\"))});var n=app.Util.getOrCreateInstance($(this),\"SearchFilter.DateRangePicker\",function(t){return new app.SearchFilter.DateRangePicker(t)});t.dateRangePickers.push(n)})},t.prototype.updateHiddenField=function(t,e){var n=this.$form.find(':input[type=\"hidden\"][name=\"'+t+'\"]');e=$.trim(e),0===n.length&&e.length>0&&(n=$(\"<input />\").attr(\"type\",\"hidden\").attr(\"name\",t)).appendTo(this.$form),1===n.length&&0===e.length?n.remove():n.val(e)},t.prototype.prepareFormSubmit=function(){this.$form.find(\":input\").each(function(){var t=$(this);!t.hasClass(\"form-submit-disabled\")&&$.trim(t.val())||function(t){t.data(\"before-form-prepare-state\",t.prop(\"disabled\")),t.prop(\"disabled\",!0)}(t)})},t.prototype.restoreFormFieldStates=function(){this.$form.find(\":input\").each(function(){var t=$(this),e=!!t.data(\"before-form-prepare-state\");t.prop(\"disabled\")&&t.prop(\"disabled\",e)})},t}(),app.SearchFilter.DateRangePicker=function(){\"use strict\";var t=function(t){this.$input=t,t.addClass(\"form-submit-disabled\"),this.initDateRangePicker()};return t.prototype.triggerUpdate=function(){var t=this.$input.data(\"daterangepicker\");this.$input.trigger(\"update.DateRangePicker\",{from:t.startDate,to:t.endDate})},t.prototype.initDateRangePicker=function(){var t=this.buildInitialDates(),e=this.buildRanges();this.$input.daterangepicker({autoUpdateInput:!0,autoApply:!0,alwaysShowCalendars:!0,showWeekNumbers:!0,startDate:t.startDate,endDate:t.endDate,locale:{format:\"DD.MM.YYYY\"},ranges:e}),this.$input.on(\"apply.daterangepicker\",$.proxy(this.triggerUpdate,this)),this.triggerUpdate()},t.prototype.buildRanges=function(){var t={Today:[moment(),moment()],Yesterday:[moment().subtract(1,\"days\"),moment().subtract(1,\"days\")],\"This Month\":[moment().startOf(\"month\"),moment().endOf(\"month\")],\"Last Month\":[moment().subtract(1,\"month\").startOf(\"month\"),moment().subtract(1,\"month\").endOf(\"month\")]},e=this.$input.data(\"date-ranges\");return e&&\"object\"==typeof e&&$.each(e,function(e,n){t[e]=[moment(n.startDate,\"DD.MM.YYYY\"),moment(n.endDate,\"DD.MM.YYYY\")]}),t},t.prototype.buildInitialDates=function(){var t;t=this.$input.data(\"date-from\")?moment(this.$input.data(\"date-from\"),\"DD.MM.YYYY\"):moment().startOf(\"month\");var e;return e=this.$input.data(\"date-to\")?moment(this.$input.data(\"date-to\"),\"DD.MM.YYYY\"):t?t.clone().endOf(\"month\"):moment().startOf(\"month\"),{startDate:t,endDate:e}},t}(),function(t){\"use strict\";t.extend(window.app,{_init:function(t){matchMedia(\"(max-width:767px)\").matches&&(app.DEVICE=\"mobile\")},formAutoSubmit:function(e){e.find(\".js-form-auto-submit\").on(\"change\",function(){t(this).closest(\"form\").submit()})},select2:function(e){e.find(\":input.plugin-select2\").each(function(){var e=t(this),n=\"\";e.data(\"placeholder\")&&(n=e.data(\"placeholder\"));var i=e.data(\"select2-options\")||{};i=t.extend(!0,{},{width:\"100%\",allowClear:!0,placeholder:n},i),e.select2(i).focus(function(){t(this).select2(\"open\")})})},iCheck:function(t){t.find(\".plugin-icheck :input\").iCheck({checkboxClass:\"icheckbox_flat-blue\",radioClass:\"iradio_flat-blue\"})},tooltip:function(t){t.find(\".tooltip-trigger\").tooltip()},searchFilter:function(e){e.find(\".search-filters\").each(function(){var e=t(this);app.Util.getOrCreateInstance(e,\"SearchFilter.Form\",function(t){return new app.SearchFilter.Form(t)})})},collapsibleStateBox:function(e){e.find(\".box-collapsible-state\").each(function(){var e=t(this);e.data(\"identifier\")&&app.Util.getOrCreateInstance(e,\"Box.CollapseHandler\",function(t){return app.Box.CollapseHandler(t)})})},paginationFooterCount:function(e){e.find(\".pagination-footer__count-selector-form\").find(\"select\").on(\"change\",function(e){var n=t(this).find(\"option:selected\");n.data(\"url\")&&(window.location=n.data(\"url\"))})},tableCollapse:function(e){e.find(\".table-collapsible\").each(function(){var e=t(this),n=e.find(\"caption\");t('<span class=\"collapse-indicator\" />').append('<span class=\"collapse-indicator-icon fa fa-chevron-down\" />').prependTo(n),n.on(\"click\",function(t){e.toggleClass(\"table-collapsible--collapsed\")})})},urlSelect:function(e){e.find(\"select.url-select\").on(\"change\",function(e){e.preventDefault();var n=t(this).find(\"option:selected\");1===n.length&&(window.location.href=n.data(\"url\"))})},modal:function(e){e.on(\"hidden.bs.modal\",\".modal\",function(){t(this).removeData(\"bs.modal\")})},pimcoreLink:function(t){app.PimcoreLinks.initialize(t)},toggleGroup:function(t){app.ToggleGroup.initialize(t)}})}(jQuery),function(t){\"use strict\";t.extend(window.app,{declineDuplicates:function(e){0!==e.find(\".js-decline-duplicate\").length&&e.on(\"click\",\".js-decline-duplicate\",function(){var e=t(this).closest(\".js-duplicates-item\");e.css(\"opacity\",.5),t.ajax({url:\"/admin/customermanagementframework/duplicates/decline/\"+t(this).data(\"id\"),success:function(t){t.success?e.remove():e.css(\"opacity\",1)}})})},registerSaveFilterDefinition:function(){t(\"#save-filter-definition\").on(\"click\",function(e){e.preventDefault();var n=t('input[name=\"filterDefinition[name]\"]'),i=t(\"#name-required-message\");if(t(n).val().length<1)return n.focus(),i.slideDown(),void setTimeout(function(){i.slideUp()},3e3);i.hide();var a=t(this).closest(\"form\"),o=a.attr(\"action\"),r=a.find(\"select:disabled\");r.each(function(){t(this).prop(\"disabled\",!1)}),a.attr(\"action\",\"/admin/customermanagementframework/customers/filter-definition/save\").submit(),a.attr(\"action\",o),r.each(function(){t(this).prop(\"disabled\",!0)})})},registerUpdateFilterDefinition:function(){t(\"#update-filter-definition\").on(\"click\",function(e){e.preventDefault();var n=t('input[name=\"filterDefinition[name]\"]'),i=t(\"#name-required-message\");if(t(n).val().length<1)return n.focus(),i.slideDown(),void setTimeout(function(){i.slideUp()},3e3);i.hide();var a=t(this).closest(\"form\"),o=a.attr(\"action\"),r=a.find(\"select:disabled\");r.each(function(){t(this).prop(\"disabled\",!1)}),a.attr(\"action\",\"/admin/customermanagementframework/customers/filter-definition/update\").submit(),a.attr(\"action\",o),r.each(function(){t(this).prop(\"disabled\",!0)})})},registerShareFilterDefinition:function(){t(\"#share-filter-definition\").on(\"click\",function(e){e.preventDefault();var n=t(this).closest(\"form\"),i=n.attr(\"action\");n.attr(\"action\",\"/admin/customermanagementframework/customers/filter-definition/share\").submit(),n.attr(\"action\",i)})},registerNewCustomerAction:function(){var e=t(\"#add-new-customer\"),n=void 0!==window.top.pimcore;n||e.hide(),e.on(\"click\",function(e){if(!n)return app.Logger.error(\"Pimcore is not available (e.g. backend opened outside iframe) - can't load object with ID\",objectId),!1;t.ajax({method:\"POST\",url:\"/admin/customermanagementframework/customers/new\",headers:{\"X-Pimcore-Csrf-Token\":t(\"#add-new-customer\").data(\"token\")},success:function(t){var e=t.id;void 0!==window.top.pimcore?window.top.pimcore.helpers.openObject(e,\"object\"):app.Logger.error(\"Pimcore is not available (e.g. backend opened outside iframe) - can't load object with ID\",e)}})})}})}(jQuery),function(t){\"use strict\";window.app.init=function(e){_cfg._preload&&t.each(_cfg._preload,function(t,n){\"boolean\"==typeof n&&\"function\"==typeof window.app[t]&&window.app[t](e)}),t.each(_cfg,function(t,n){\"boolean\"==typeof n&&\"function\"==typeof window.app[t]&&\"_reload\"!=t&&\"_preload\"!=t&&window.app[t](e)}),_cfg._reload&&t.each(_cfg._reload,function(t,n){\"boolean\"==typeof n&&\"function\"==typeof window.app[t]&&window.app[t](e)})},t(document).ready(function(){window.app.init(t(\"body\"))})}(jQuery);", "\n{% if accessToTempCustomerFolder %}\n    {% do cmf_jsConfig().add('registerNewCustomerAction', true) %}\n{% endif %}\n\n<!-- Filters -->\n<div class=\"box-header with-border\">\n    <div class=\"row\">\n        <div class=\"col-sm-3 col-md-6\">\n            <h3 class=\"box-title\">\n                <a href=\"#\" data-widget=\"collapse-trigger\">\n                    <i class=\"fa fa-filter\"></i>\n                    {{ 'cmf_filters_filters' | trans({}, 'admin') }}\n                </a>\n            </h3>\n        </div>\n\n        {% if not hideAdvancedFilterSettings %}\n            <div class=\"col-sm-9 col-md-6 text-right\">\n                {% if accessToTempCustomerFolder %}\n                    <button data-token=\"{{ pimcore_csrf.getCsrfToken(app.request.session) }}\" type=\"button\" class=\"btn btn-primary\" id=\"add-new-customer\"\n                            name=\"add-new-customer\">{{ 'cmf_filters_new_customer'| trans({}, 'admin') }}</button>\n                {% endif %}\n                <!--suppress HtmlFormInputWithoutLabel -->\n                <select\n                    id=\"filterDefinition-id\"\n                    name=\"filterDefinition[id]\"\n                    class=\"form-control plugin-select2\"\n                    data-select2-options='{{ {'width': '50%'} | json_encode() }}'\n                >\n                    <option value=\"0\">{{ 'cmf_filters_no_filter_selected' | trans({}, 'admin') }}</option>\n                    {% for singleFilterDefinition in filterDefinitions %}\n                        <option value=\"{{ singleFilterDefinition.id }}\" {{ singleFilterDefinition.id == filterDefinition.id ? 'selected' : '' }}>\n                            {{ singleFilterDefinition.name }}\n                        </option>\n                    {% endfor %}\n                </select>\n\n                <a class=\"btn-box-tool\" data-widget=\"collapse\"><i class=\"fa fa-minus\"></i></a>\n            </div>\n        {% endif %}\n    </div>\n\n</div>\n\n<script {{ pimcore_csp.getNonceHtmlAttribute()|raw }}>\n    window.addEventListener('load', function () {\n        $('#filterDefinition-id').on('change', (e) => {\n            e.target.closest('form').submit();\n        });\n    });\n</script>\n<!-- /.box-header -->\n\n"], "filenames": ["frontend/js/functions.js", "src/Controller/Admin/CustomersController.php", "src/Resources/public/admin/js/cmf.js", "src/Resources/public/admin/js/cmf.min.js", "src/Resources/views/admin/customers/partials/list_filter/box/header.html.twig"], "buggy_code_start_loc": [100, 308, 805, 1, 21], "buggy_code_end_loc": [101, 309, 806, 2, 22], "fixing_code_start_loc": [101, 308, 806, 1, 21], "fixing_code_end_loc": [106, 309, 811, 2, 22], "type": "CWE-352", "message": "Customer-data-framework allows management of customer data within Pimcore. There are no tokens or headers to prevent CSRF attacks from occurring, therefore an attacker could abuse this vulnerability to create new customers. This issue has been patched in version 4.0.5.", "other": {"cve": {"id": "CVE-2023-49076", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-30T06:15:46.937", "lastModified": "2023-12-05T18:14:20.597", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Customer-data-framework allows management of customer data within Pimcore. There are no tokens or headers to prevent CSRF attacks from occurring, therefore an attacker could abuse this vulnerability to create new customers. This issue has been patched in version 4.0.5."}, {"lang": "es", "value": "El framework de datos del cliente permite la gesti\u00f3n de los datos del cliente dentro de Pimcore. No hay tokens ni encabezados para evitar que se produzcan ataques CSRF, por lo que un atacante podr\u00eda aprovechar esta vulnerabilidad para crear nuevos clientes. Este problema se solucion\u00f3 en la versi\u00f3n 4.0.5."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.5", "matchCriteriaId": "9F2FC090-2A95-465C-935D-BDEA3F6F32E7"}]}]}], "references": [{"url": "https://github.com/pimcore/customer-data-framework/commit/ef7414415cfa64189b8433eff0aa2a9b537a89f7.patch", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/pimcore/customer-data-framework/security/advisories/GHSA-xx63-4jr8-9ghc", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/customer-data-framework/commit/ef7414415cfa64189b8433eff0aa2a9b537a89f7.patch"}}