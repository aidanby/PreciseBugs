{"buggy_code": ["<?php\n\n\tnamespace CzProject\\GitPhp;\n\n\n\tclass Git\n\t{\n\t\t/** @var IRunner */\n\t\tprotected $runner;\n\n\n\t\tpublic function  __construct(IRunner $runner = NULL)\n\t\t{\n\t\t\t$this->runner = $runner !== NULL ? $runner : new Runners\\CliRunner;\n\t\t}\n\n\n\t\t/**\n\t\t * @param  string $directory\n\t\t * @return GitRepository\n\t\t */\n\t\tpublic function open($directory)\n\t\t{\n\t\t\treturn new GitRepository($directory, $this->runner);\n\t\t}\n\n\n\t\t/**\n\t\t * Init repo in directory\n\t\t * @param  string $directory\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return GitRepository\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function init($directory, array $params = NULL)\n\t\t{\n\t\t\tif (is_dir(\"$directory/.git\")) {\n\t\t\t\tthrow new GitException(\"Repo already exists in $directory.\");\n\t\t\t}\n\n\t\t\tif (!is_dir($directory) && !@mkdir($directory, 0777, TRUE)) { // intentionally @; not atomic; from Nette FW\n\t\t\t\tthrow new GitException(\"Unable to create directory '$directory'.\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$this->run($directory, [\n\t\t\t\t\t'init',\n\t\t\t\t\t$params,\n\t\t\t\t\t$directory\n\t\t\t\t]);\n\n\t\t\t} catch (GitException $e) {\n\t\t\t\tthrow new GitException(\"Git init failed (directory $directory).\", $e->getCode(), $e);\n\t\t\t}\n\n\t\t\treturn $this->open($directory);\n\t\t}\n\n\n\t\t/**\n\t\t * Clones GIT repository from $url into $directory\n\t\t * @param  string $url\n\t\t * @param  string|NULL $directory\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return GitRepository\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function cloneRepository($url, $directory = NULL, array $params = NULL)\n\t\t{\n\t\t\tif ($directory !== NULL && is_dir(\"$directory/.git\")) {\n\t\t\t\tthrow new GitException(\"Repo already exists in $directory.\");\n\t\t\t}\n\n\t\t\t$cwd = $this->runner->getCwd();\n\n\t\t\tif ($directory === NULL) {\n\t\t\t\t$directory = Helpers::extractRepositoryNameFromUrl($url);\n\t\t\t\t$directory = \"$cwd/$directory\";\n\n\t\t\t} elseif(!Helpers::isAbsolute($directory)) {\n\t\t\t\t$directory = \"$cwd/$directory\";\n\t\t\t}\n\n\t\t\tif ($params === NULL) {\n\t\t\t\t$params = '-q';\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$this->run($cwd, [\n\t\t\t\t\t'clone',\n\t\t\t\t\t$params,\n\t\t\t\t\t$url,\n\t\t\t\t\t$directory\n\t\t\t\t]);\n\n\t\t\t} catch (GitException $e) {\n\t\t\t\t$stderr = '';\n\t\t\t\t$result = $e->getRunnerResult();\n\n\t\t\t\tif ($result !== NULL && $result->hasErrorOutput()) {\n\t\t\t\t\t$stderr = implode(PHP_EOL, $result->getErrorOutput());\n\t\t\t\t}\n\n\t\t\t\tthrow new GitException(\"Git clone failed (directory $directory).\" . ($stderr !== '' ? (\"\\n$stderr\") : ''));\n\t\t\t}\n\n\t\t\treturn $this->open($directory);\n\t\t}\n\n\n\t\t/**\n\t\t * @param  string $url\n\t\t * @param  array<string>|NULL $refs\n\t\t * @return bool\n\t\t */\n\t\tpublic function isRemoteUrlReadable($url, array $refs = NULL)\n\t\t{\n\t\t\t$result = $this->runner->run($this->runner->getCwd(), [\n\t\t\t\t'ls-remote',\n\t\t\t\t'--heads',\n\t\t\t\t'--quiet',\n\t\t\t\t'--exit-code',\n\t\t\t\t$url,\n\t\t\t\t$refs,\n\t\t\t], [\n\t\t\t\t'GIT_TERMINAL_PROMPT' => 0,\n\t\t\t]);\n\n\t\t\treturn $result->isOk();\n\t\t}\n\n\n\t\t/**\n\t\t * @param  string $cwd\n\t\t * @param  array<mixed> $args\n\t\t * @param  array<string, scalar> $env\n\t\t * @return RunnerResult\n\t\t * @throws GitException\n\t\t */\n\t\tprivate function run($cwd, array $args, array $env = NULL)\n\t\t{\n\t\t\t$result = $this->runner->run($cwd, $args, $env);\n\n\t\t\tif (!$result->isOk()) {\n\t\t\t\tthrow new GitException(\"Command '{$result->getCommand()}' failed (exit-code {$result->getExitCode()}).\", $result->getExitCode(), NULL, $result);\n\t\t\t}\n\n\t\t\treturn $result;\n\t\t}\n\t}\n", "<?php\n\n\tnamespace CzProject\\GitPhp;\n\n\n\tclass GitRepository\n\t{\n\t\t/** @var  string */\n\t\tprotected $repository;\n\n\t\t/** @var IRunner */\n\t\tprotected $runner;\n\n\n\t\t/**\n\t\t * @param  string $repository\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function __construct($repository, IRunner $runner = NULL)\n\t\t{\n\t\t\tif (basename($repository) === '.git') {\n\t\t\t\t$repository = dirname($repository);\n\t\t\t}\n\n\t\t\t$path = realpath($repository);\n\n\t\t\tif ($path === FALSE) {\n\t\t\t\tthrow new GitException(\"Repository '$repository' not found.\");\n\t\t\t}\n\n\t\t\t$this->repository = $path;\n\t\t\t$this->runner = $runner !== NULL ? $runner : new Runners\\CliRunner;\n\t\t}\n\n\n\t\t/**\n\t\t * @return string\n\t\t */\n\t\tpublic function getRepositoryPath()\n\t\t{\n\t\t\treturn $this->repository;\n\t\t}\n\n\n\t\t/**\n\t\t * Creates a tag.\n\t\t * `git tag <name>`\n\t\t * @param  string $name\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function createTag($name, $options = NULL)\n\t\t{\n\t\t\t$this->run('tag', $options, $name);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Removes tag.\n\t\t * `git tag -d <name>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function removeTag($name)\n\t\t{\n\t\t\t$this->run('tag', [\n\t\t\t\t'-d' => $name,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Renames tag.\n\t\t * `git tag <new> <old>`\n\t\t * `git tag -d <old>`\n\t\t * @param  string $oldName\n\t\t * @param  string $newName\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function renameTag($oldName, $newName)\n\t\t{\n\t\t\t// http://stackoverflow.com/a/1873932\n\t\t\t// create new as alias to old (`git tag NEW OLD`)\n\t\t\t$this->run('tag', $newName, $oldName);\n\t\t\t// delete old (`git tag -d OLD`)\n\t\t\t$this->removeTag($oldName);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Returns list of tags in repo.\n\t\t * @return string[]|NULL  NULL => no tags\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getTags()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['tag'], 'trim');\n\t\t}\n\n\n\t\t/**\n\t\t * Merges branches.\n\t\t * `git merge <options> <name>`\n\t\t * @param  string $branch\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function merge($branch, $options = NULL)\n\t\t{\n\t\t\t$this->run('merge', $options, $branch);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Creates new branch.\n\t\t * `git branch <name>`\n\t\t * (optionaly) `git checkout <name>`\n\t\t * @param  string $name\n\t\t * @param  bool $checkout\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function createBranch($name, $checkout = FALSE)\n\t\t{\n\t\t\t// git branch $name\n\t\t\t$this->run('branch', $name);\n\n\t\t\tif ($checkout) {\n\t\t\t\t$this->checkout($name);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Removes branch.\n\t\t * `git branch -d <name>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function removeBranch($name)\n\t\t{\n\t\t\t$this->run('branch', [\n\t\t\t\t'-d' => $name,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Gets name of current branch\n\t\t * `git branch` + magic\n\t\t * @return string\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getCurrentBranchName()\n\t\t{\n\t\t\ttry {\n\t\t\t\t$branch = $this->extractFromCommand(['branch', '-a', '--no-color'], function($value) {\n\t\t\t\t\tif (isset($value[0]) && $value[0] === '*') {\n\t\t\t\t\t\treturn trim(substr($value, 1));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn FALSE;\n\t\t\t\t});\n\n\t\t\t\tif (is_array($branch)) {\n\t\t\t\t\treturn $branch[0];\n\t\t\t\t}\n\n\t\t\t} catch (GitException $e) {\n\t\t\t\t// nothing\n\t\t\t}\n\n\t\t\tthrow new GitException('Getting of current branch name failed.');\n\t\t}\n\n\n\t\t/**\n\t\t * Returns list of all (local & remote) branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '-a', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t * Returns list of remote branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getRemoteBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '-r', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t * Returns list of local branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getLocalBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t * Checkout branch.\n\t\t * `git checkout <branch>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function checkout($name)\n\t\t{\n\t\t\t$this->run('checkout', $name);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Removes file(s).\n\t\t * `git rm <file>`\n\t\t * @param  string|string[] $file\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function removeFile($file)\n\t\t{\n\t\t\tif (!is_array($file)) {\n\t\t\t\t$file = func_get_args();\n\t\t\t}\n\n\t\t\tforeach ($file as $item) {\n\t\t\t\t$this->run('rm', $item, '-r');\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Adds file(s).\n\t\t * `git add <file>`\n\t\t * @param  string|string[] $file\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function addFile($file)\n\t\t{\n\t\t\tif (!is_array($file)) {\n\t\t\t\t$file = func_get_args();\n\t\t\t}\n\n\t\t\tforeach ($file as $item) {\n\t\t\t\t// make sure the given item exists\n\t\t\t\t// this can be a file or an directory, git supports both\n\t\t\t\t$path = Helpers::isAbsolute($item) ? $item : ($this->getRepositoryPath() . DIRECTORY_SEPARATOR . $item);\n\n\t\t\t\tif (!file_exists($path)) {\n\t\t\t\t\tthrow new GitException(\"The path at '$item' does not represent a valid file.\");\n\t\t\t\t}\n\n\t\t\t\t$this->run('add', $item);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Adds all created, modified & removed files.\n\t\t * `git add --all`\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function addAllChanges()\n\t\t{\n\t\t\t$this->run('add', '--all');\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Renames file(s).\n\t\t * `git mv <file>`\n\t\t * @param  string|string[] $file  from: array('from' => 'to', ...) || (from, to)\n\t\t * @param  string|NULL $to\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function renameFile($file, $to = NULL)\n\t\t{\n\t\t\tif (!is_array($file)) { // rename(file, to);\n\t\t\t\t$file = [\n\t\t\t\t\t$file => $to,\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tforeach ($file as $from => $to) {\n\t\t\t\t$this->run('mv', $from, $to);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Commits changes\n\t\t * `git commit <params> -m <message>`\n\t\t * @param  string $message\n\t\t * @param  string[] $params  param => value\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function commit($message, $params = NULL)\n\t\t{\n\t\t\t$this->run('commit', $params, [\n\t\t\t\t'-m' => $message,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Returns last commit ID on current branch\n\t\t * `git log --pretty=format:\"%H\" -n 1`\n\t\t * @return CommitId\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getLastCommitId()\n\t\t{\n\t\t\t$result = $this->run('log', '--pretty=format:%H', '-n', '1');\n\t\t\t$lastLine = $result->getOutputLastLine();\n\t\t\treturn new CommitId((string) $lastLine);\n\t\t}\n\n\n\t\t/**\n\t\t * @return Commit\n\t\t */\n\t\tpublic function getLastCommit()\n\t\t{\n\t\t\treturn $this->getCommit($this->getLastCommitId());\n\t\t}\n\n\n\t\t/**\n\t\t * @param  string|CommitId $commitId\n\t\t * @return Commit\n\t\t */\n\t\tpublic function getCommit($commitId)\n\t\t{\n\t\t\tif (!($commitId instanceof CommitId)) {\n\t\t\t\t$commitId = new CommitId($commitId);\n\t\t\t}\n\n\t\t\t// subject\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%s');\n\t\t\t$subject = rtrim($result->getOutputAsString());\n\n\t\t\t// body\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%b');\n\t\t\t$body = rtrim($result->getOutputAsString());\n\n\t\t\t// author email\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%ae');\n\t\t\t$authorEmail = rtrim($result->getOutputAsString());\n\n\t\t\t// author name\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%an');\n\t\t\t$authorName = rtrim($result->getOutputAsString());\n\n\t\t\t// author date\n\t\t\t$result = $this->run('log', '-1', $commitId, '--pretty=format:%ad', '--date=iso-strict');\n\t\t\t$authorDate = \\DateTimeImmutable::createFromFormat(\\DateTime::ATOM, (string) $result->getOutputLastLine());\n\n\t\t\tif (!($authorDate instanceof \\DateTimeImmutable)) {\n\t\t\t\tthrow new GitException('Failed fetching of commit author date.', 0, NULL, $result);\n\t\t\t}\n\n\t\t\t// committer email\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%ce');\n\t\t\t$committerEmail = rtrim($result->getOutputAsString());\n\n\t\t\t// committer name\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%cn');\n\t\t\t$committerName = rtrim($result->getOutputAsString());\n\n\t\t\t// committer date\n\t\t\t$result = $this->run('log', '-1', $commitId, '--pretty=format:%cd', '--date=iso-strict');\n\t\t\t$committerDate = \\DateTimeImmutable::createFromFormat(\\DateTime::ATOM, (string) $result->getOutputLastLine());\n\n\t\t\tif (!($committerDate instanceof \\DateTimeImmutable)) {\n\t\t\t\tthrow new GitException('Failed fetching of commit committer date.', 0, NULL, $result);\n\t\t\t}\n\n\t\t\treturn new Commit(\n\t\t\t\t$commitId,\n\t\t\t\t$subject,\n\t\t\t\t$body !== '' ? $body : NULL,\n\t\t\t\t$authorEmail,\n\t\t\t\t$authorName !== '' ? $authorName : NULL,\n\t\t\t\t$authorDate,\n\t\t\t\t$committerEmail,\n\t\t\t\t$committerName !== '' ? $committerName : NULL,\n\t\t\t\t$committerDate\n\t\t\t);\n\t\t}\n\n\n\t\t/**\n\t\t * Exists changes?\n\t\t * `git status` + magic\n\t\t * @return bool\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function hasChanges()\n\t\t{\n\t\t\t// Make sure the `git status` gets a refreshed look at the working tree.\n\t\t\t$this->run('update-index', '-q', '--refresh');\n\t\t\t$result = $this->run('status', '--porcelain');\n\t\t\treturn $result->hasOutput();\n\t\t}\n\n\n\t\t/**\n\t\t * Pull changes from a remote\n\t\t * @param  string|NULL $remote\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function pull($remote = NULL, array $params = NULL)\n\t\t{\n\t\t\t$this->run('pull', $remote, $params);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Push changes to a remote\n\t\t * @param  string|NULL $remote\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function push($remote = NULL, array $params = NULL)\n\t\t{\n\t\t\t$this->run('push', $remote, $params);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Run fetch command to get latest branches\n\t\t * @param  string|NULL $remote\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function fetch($remote = NULL, array $params = NULL)\n\t\t{\n\t\t\t$this->run('fetch', $remote, $params);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Adds new remote repository\n\t\t * @param  string $name\n\t\t * @param  string $url\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function addRemote($name, $url, array $params = NULL)\n\t\t{\n\t\t\t$this->run('remote', 'add', $params, $name, $url);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Renames remote repository\n\t\t * @param  string $oldName\n\t\t * @param  string $newName\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function renameRemote($oldName, $newName)\n\t\t{\n\t\t\t$this->run('remote', 'rename', $oldName, $newName);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Removes remote repository\n\t\t * @param  string $name\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function removeRemote($name)\n\t\t{\n\t\t\t$this->run('remote', 'remove', $name);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Changes remote repository URL\n\t\t * @param  string $name\n\t\t * @param  string $url\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function setRemoteUrl($name, $url, array $params = NULL)\n\t\t{\n\t\t\t$this->run('remote', 'set-url', $params, $name, $url);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * @param  mixed ...$cmd\n\t\t * @return string[]  returns output\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function execute(...$cmd)\n\t\t{\n\t\t\t$result = $this->run(...$cmd);\n\t\t\treturn $result->getOutput();\n\t\t}\n\n\n\t\t/**\n\t\t * @param  array<mixed> $args\n\t\t * @return string[]|NULL\n\t\t * @throws GitException\n\t\t */\n\t\tprotected function extractFromCommand(array $args, callable $filter = NULL)\n\t\t{\n\t\t\t$result = $this->run(...$args);\n\t\t\t$output = $result->getOutput();\n\n\t\t\tif ($filter !== NULL) {\n\t\t\t\t$newArray = [];\n\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\t$value = $filter($line);\n\n\t\t\t\t\tif ($value === FALSE) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$newArray[] = (string) $value;\n\t\t\t\t}\n\n\t\t\t\t$output = $newArray;\n\t\t\t}\n\n\t\t\tif (empty($output)) {\n\t\t\t\treturn NULL;\n\t\t\t}\n\n\t\t\treturn $output;\n\t\t}\n\n\n\t\t/**\n\t\t * Runs command.\n\t\t * @param  mixed ...$args\n\t\t * @return RunnerResult\n\t\t * @throws GitException\n\t\t */\n\t\tprotected function run(...$args)\n\t\t{\n\t\t\t$result = $this->runner->run($this->repository, $args);\n\n\t\t\tif (!$result->isOk()) {\n\t\t\t\tthrow new GitException(\"Command '{$result->getCommand()}' failed (exit-code {$result->getExitCode()}).\", $result->getExitCode(), NULL, $result);\n\t\t\t}\n\n\t\t\treturn $result;\n\t\t}\n\t}\n", "<?php\n\nuse Tester\\Assert;\nuse CzProject\\GitPhp\\Git;\nuse CzProject\\GitPhp\\GitException;\nuse CzProject\\GitPhp\\Tests\\AssertRunner;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$runner = new AssertRunner(__DIR__);\n$git = new Git($runner);\n\n$runner->assert(['branch', 'master']);\n$runner->assert(['branch', 'develop']);\n$runner->assert(['checkout', 'develop']);\n$runner->assert(['merge', 'feature-1']);\n$runner->assert(['branch', '-d', 'feature-1']);\n$runner->assert(['checkout', 'master']);\n\n$repo = $git->open(__DIR__);\n$repo->createBranch('master');\n$repo->createBranch('develop', TRUE);\n$repo->merge('feature-1');\n$repo->removeBranch('feature-1');\n$repo->checkout('master');\n", "<?php\n\nuse Tester\\Assert;\nuse CzProject\\GitPhp\\Git;\nuse CzProject\\GitPhp\\GitException;\nuse CzProject\\GitPhp\\Tests\\AssertRunner;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$runner = new AssertRunner(__DIR__);\n$git = new Git($runner);\n$repo = $git->open(__DIR__ . '/fixtures');\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['add', 'file1.txt']);\n\t$runner->assert(['add', 'file2.txt']);\n\t$runner->assert(['add', 'file3.txt']);\n\t$runner->assert(['add', 'file4.txt']);\n\t$runner->assert(['add', 'file5.txt']);\n\n\t$repo->addFile('file1.txt');\n\t$repo->addFile([\n\t\t'file2.txt',\n\t\t'file3.txt',\n\t]);\n\t$repo->addFile('file4.txt', 'file5.txt');\n});\n\n\ntest(function () use ($repo) {\n\tAssert::exception(function () use ($repo) {\n\t\t$repo->addFile('not-found.txt');\n\t}, GitException::class, \"The path at 'not-found.txt' does not represent a valid file.\");\n});\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['rm', 'file1.txt', '-r']);\n\t$runner->assert(['rm', 'file2.txt', '-r']);\n\t$runner->assert(['rm', 'file3.txt', '-r']);\n\t$runner->assert(['rm', 'file4.txt', '-r']);\n\t$runner->assert(['rm', 'file5.txt', '-r']);\n\n\t$repo->removeFile('file1.txt');\n\t$repo->removeFile([\n\t\t'file2.txt',\n\t\t'file3.txt',\n\t]);\n\t$repo->removeFile('file4.txt', 'file5.txt');\n});\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['mv', 'file1.txt', 'new1.txt']);\n\t$runner->assert(['mv', 'file2.txt', 'new2.txt']);\n\t$runner->assert(['mv', 'file3.txt', 'new3.txt']);\n\n\t$repo->renameFile('file1.txt', 'new1.txt');\n\t$repo->renameFile([\n\t\t'file2.txt' => 'new2.txt',\n\t\t'file3.txt' => 'new3.txt',\n\t]);\n});\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['add', '--all']);\n\n\t$repo->addAllChanges();\n});\n\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['update-index', '-q', '--refresh']);\n\t$runner->assert(['status', '--porcelain']);\n\n\tAssert::false($repo->hasChanges());\n});\n", "<?php\n\nuse Tester\\Assert;\nuse CzProject\\GitPhp\\Git;\nuse CzProject\\GitPhp\\GitException;\nuse CzProject\\GitPhp\\Tests\\AssertRunner;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$runner = new AssertRunner(__DIR__);\n$git = new Git($runner);\n\n$runner->assert(['clone', '-q', 'git@github.com:czproject/git-php.git', __DIR__]);\n$runner->assert(['remote', 'add', 'origin2', 'git@github.com:czproject/git-php.git']);\n$runner->assert(['remote', 'add', 'remote', 'git@github.com:czproject/git-php.git']);\n$runner->assert(['remote', 'add', [\n\t'--mirror=push',\n], 'only-push', 'test-url']);\n$runner->assert(['remote', 'rename', 'remote', 'origin3']);\n$runner->assert(['remote', 'set-url', [\n\t'--push',\n], 'origin3', 'test-url']);\n$runner->assert(['remote', 'remove', 'origin2']);\n\n$repo = $git->cloneRepository('git@github.com:czproject/git-php.git', __DIR__);\n$repo->addRemote('origin2', 'git@github.com:czproject/git-php.git');\n$repo->addRemote('remote', 'git@github.com:czproject/git-php.git');\n$repo->addRemote('only-push', 'test-url', [\n\t'--mirror=push',\n]);\n$repo->renameRemote('remote', 'origin3');\n$repo->setRemoteUrl('origin3', 'test-url', [\n\t'--push',\n]);\n$repo->removeRemote('origin2');\n\n$runner->assert(['push', 'origin']);\n$runner->assert(['fetch', 'origin']);\n$runner->assert(['pull', 'origin']);\n$repo->push('origin');\n$repo->fetch('origin');\n$repo->pull('origin');\n", "<?php\n\nuse Tester\\Assert;\nuse CzProject\\GitPhp\\Git;\nuse CzProject\\GitPhp\\GitException;\nuse CzProject\\GitPhp\\Tests\\AssertRunner;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$runner = new AssertRunner(__DIR__);\n$git = new Git($runner);\n\n$runner->assert(['tag', 'v1.0.0']);\n$runner->assert(['tag', 'v2.0.0', 'v1.0.0']);\n$runner->assert(['tag', '-d', 'v1.0.0']);\n$runner->assert(['tag', '-d', 'v2.0.0']);\n\n$repo = $git->open(__DIR__);\n$repo->createTag('v1.0.0');\n$repo->renameTag('v1.0.0', 'v2.0.0');\n$repo->removeTag('v2.0.0');\n"], "fixing_code": ["<?php\n\n\tnamespace CzProject\\GitPhp;\n\n\n\tclass Git\n\t{\n\t\t/** @var IRunner */\n\t\tprotected $runner;\n\n\n\t\tpublic function  __construct(IRunner $runner = NULL)\n\t\t{\n\t\t\t$this->runner = $runner !== NULL ? $runner : new Runners\\CliRunner;\n\t\t}\n\n\n\t\t/**\n\t\t * @param  string $directory\n\t\t * @return GitRepository\n\t\t */\n\t\tpublic function open($directory)\n\t\t{\n\t\t\treturn new GitRepository($directory, $this->runner);\n\t\t}\n\n\n\t\t/**\n\t\t * Init repo in directory\n\t\t * @param  string $directory\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return GitRepository\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function init($directory, array $params = NULL)\n\t\t{\n\t\t\tif (is_dir(\"$directory/.git\")) {\n\t\t\t\tthrow new GitException(\"Repo already exists in $directory.\");\n\t\t\t}\n\n\t\t\tif (!is_dir($directory) && !@mkdir($directory, 0777, TRUE)) { // intentionally @; not atomic; from Nette FW\n\t\t\t\tthrow new GitException(\"Unable to create directory '$directory'.\");\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$this->run($directory, [\n\t\t\t\t\t'init',\n\t\t\t\t\t$params,\n\t\t\t\t\t'--end-of-options',\n\t\t\t\t\t$directory\n\t\t\t\t]);\n\n\t\t\t} catch (GitException $e) {\n\t\t\t\tthrow new GitException(\"Git init failed (directory $directory).\", $e->getCode(), $e);\n\t\t\t}\n\n\t\t\treturn $this->open($directory);\n\t\t}\n\n\n\t\t/**\n\t\t * Clones GIT repository from $url into $directory\n\t\t * @param  string $url\n\t\t * @param  string|NULL $directory\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return GitRepository\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function cloneRepository($url, $directory = NULL, array $params = NULL)\n\t\t{\n\t\t\tif ($directory !== NULL && is_dir(\"$directory/.git\")) {\n\t\t\t\tthrow new GitException(\"Repo already exists in $directory.\");\n\t\t\t}\n\n\t\t\t$cwd = $this->runner->getCwd();\n\n\t\t\tif ($directory === NULL) {\n\t\t\t\t$directory = Helpers::extractRepositoryNameFromUrl($url);\n\t\t\t\t$directory = \"$cwd/$directory\";\n\n\t\t\t} elseif(!Helpers::isAbsolute($directory)) {\n\t\t\t\t$directory = \"$cwd/$directory\";\n\t\t\t}\n\n\t\t\tif ($params === NULL) {\n\t\t\t\t$params = '-q';\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\t$this->run($cwd, [\n\t\t\t\t\t'clone',\n\t\t\t\t\t$params,\n\t\t\t\t\t'--end-of-options',\n\t\t\t\t\t$url,\n\t\t\t\t\t$directory\n\t\t\t\t]);\n\n\t\t\t} catch (GitException $e) {\n\t\t\t\t$stderr = '';\n\t\t\t\t$result = $e->getRunnerResult();\n\n\t\t\t\tif ($result !== NULL && $result->hasErrorOutput()) {\n\t\t\t\t\t$stderr = implode(PHP_EOL, $result->getErrorOutput());\n\t\t\t\t}\n\n\t\t\t\tthrow new GitException(\"Git clone failed (directory $directory).\" . ($stderr !== '' ? (\"\\n$stderr\") : ''));\n\t\t\t}\n\n\t\t\treturn $this->open($directory);\n\t\t}\n\n\n\t\t/**\n\t\t * @param  string $url\n\t\t * @param  array<string>|NULL $refs\n\t\t * @return bool\n\t\t */\n\t\tpublic function isRemoteUrlReadable($url, array $refs = NULL)\n\t\t{\n\t\t\t$result = $this->runner->run($this->runner->getCwd(), [\n\t\t\t\t'ls-remote',\n\t\t\t\t'--heads',\n\t\t\t\t'--quiet',\n\t\t\t\t'--exit-code',\n\t\t\t\t'--end-of-options',\n\t\t\t\t$url,\n\t\t\t\t$refs,\n\t\t\t], [\n\t\t\t\t'GIT_TERMINAL_PROMPT' => 0,\n\t\t\t]);\n\n\t\t\treturn $result->isOk();\n\t\t}\n\n\n\t\t/**\n\t\t * @param  string $cwd\n\t\t * @param  array<mixed> $args\n\t\t * @param  array<string, scalar> $env\n\t\t * @return RunnerResult\n\t\t * @throws GitException\n\t\t */\n\t\tprivate function run($cwd, array $args, array $env = NULL)\n\t\t{\n\t\t\t$result = $this->runner->run($cwd, $args, $env);\n\n\t\t\tif (!$result->isOk()) {\n\t\t\t\tthrow new GitException(\"Command '{$result->getCommand()}' failed (exit-code {$result->getExitCode()}).\", $result->getExitCode(), NULL, $result);\n\t\t\t}\n\n\t\t\treturn $result;\n\t\t}\n\t}\n", "<?php\n\n\tnamespace CzProject\\GitPhp;\n\n\n\tclass GitRepository\n\t{\n\t\t/** @var  string */\n\t\tprotected $repository;\n\n\t\t/** @var IRunner */\n\t\tprotected $runner;\n\n\n\t\t/**\n\t\t * @param  string $repository\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function __construct($repository, IRunner $runner = NULL)\n\t\t{\n\t\t\tif (basename($repository) === '.git') {\n\t\t\t\t$repository = dirname($repository);\n\t\t\t}\n\n\t\t\t$path = realpath($repository);\n\n\t\t\tif ($path === FALSE) {\n\t\t\t\tthrow new GitException(\"Repository '$repository' not found.\");\n\t\t\t}\n\n\t\t\t$this->repository = $path;\n\t\t\t$this->runner = $runner !== NULL ? $runner : new Runners\\CliRunner;\n\t\t}\n\n\n\t\t/**\n\t\t * @return string\n\t\t */\n\t\tpublic function getRepositoryPath()\n\t\t{\n\t\t\treturn $this->repository;\n\t\t}\n\n\n\t\t/**\n\t\t * Creates a tag.\n\t\t * `git tag <name>`\n\t\t * @param  string $name\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function createTag($name, $options = NULL)\n\t\t{\n\t\t\t$this->run('tag', $options, '--end-of-options', $name);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Removes tag.\n\t\t * `git tag -d <name>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function removeTag($name)\n\t\t{\n\t\t\t$this->run('tag', [\n\t\t\t\t'-d' => $name,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Renames tag.\n\t\t * `git tag <new> <old>`\n\t\t * `git tag -d <old>`\n\t\t * @param  string $oldName\n\t\t * @param  string $newName\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function renameTag($oldName, $newName)\n\t\t{\n\t\t\t// http://stackoverflow.com/a/1873932\n\t\t\t// create new as alias to old (`git tag NEW OLD`)\n\t\t\t$this->run('tag', '--end-of-options', $newName, $oldName);\n\t\t\t// delete old (`git tag -d OLD`)\n\t\t\t$this->removeTag($oldName);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Returns list of tags in repo.\n\t\t * @return string[]|NULL  NULL => no tags\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getTags()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['tag'], 'trim');\n\t\t}\n\n\n\t\t/**\n\t\t * Merges branches.\n\t\t * `git merge <options> <name>`\n\t\t * @param  string $branch\n\t\t * @param  array<mixed>|NULL $options\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function merge($branch, $options = NULL)\n\t\t{\n\t\t\t$this->run('merge', $options, '--end-of-options', $branch);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Creates new branch.\n\t\t * `git branch <name>`\n\t\t * (optionaly) `git checkout <name>`\n\t\t * @param  string $name\n\t\t * @param  bool $checkout\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function createBranch($name, $checkout = FALSE)\n\t\t{\n\t\t\t// git branch $name\n\t\t\t$this->run('branch', '--end-of-options', $name);\n\n\t\t\tif ($checkout) {\n\t\t\t\t$this->checkout($name);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Removes branch.\n\t\t * `git branch -d <name>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function removeBranch($name)\n\t\t{\n\t\t\t$this->run('branch', [\n\t\t\t\t'-d' => $name,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Gets name of current branch\n\t\t * `git branch` + magic\n\t\t * @return string\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getCurrentBranchName()\n\t\t{\n\t\t\ttry {\n\t\t\t\t$branch = $this->extractFromCommand(['branch', '-a', '--no-color'], function($value) {\n\t\t\t\t\tif (isset($value[0]) && $value[0] === '*') {\n\t\t\t\t\t\treturn trim(substr($value, 1));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn FALSE;\n\t\t\t\t});\n\n\t\t\t\tif (is_array($branch)) {\n\t\t\t\t\treturn $branch[0];\n\t\t\t\t}\n\n\t\t\t} catch (GitException $e) {\n\t\t\t\t// nothing\n\t\t\t}\n\n\t\t\tthrow new GitException('Getting of current branch name failed.');\n\t\t}\n\n\n\t\t/**\n\t\t * Returns list of all (local & remote) branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '-a', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t * Returns list of remote branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getRemoteBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '-r', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t * Returns list of local branches in repo.\n\t\t * @return string[]|NULL  NULL => no branches\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getLocalBranches()\n\t\t{\n\t\t\treturn $this->extractFromCommand(['branch', '--no-color'], function($value) {\n\t\t\t\treturn trim(substr($value, 1));\n\t\t\t});\n\t\t}\n\n\n\t\t/**\n\t\t * Checkout branch.\n\t\t * `git checkout <branch>`\n\t\t * @param  string $name\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function checkout($name)\n\t\t{\n\t\t\t$this->run('checkout', '--end-of-options', $name);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Removes file(s).\n\t\t * `git rm <file>`\n\t\t * @param  string|string[] $file\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function removeFile($file)\n\t\t{\n\t\t\tif (!is_array($file)) {\n\t\t\t\t$file = func_get_args();\n\t\t\t}\n\n\t\t\tforeach ($file as $item) {\n\t\t\t\t$this->run('rm', '-r', '--end-of-options', $item);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Adds file(s).\n\t\t * `git add <file>`\n\t\t * @param  string|string[] $file\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function addFile($file)\n\t\t{\n\t\t\tif (!is_array($file)) {\n\t\t\t\t$file = func_get_args();\n\t\t\t}\n\n\t\t\tforeach ($file as $item) {\n\t\t\t\t// make sure the given item exists\n\t\t\t\t// this can be a file or an directory, git supports both\n\t\t\t\t$path = Helpers::isAbsolute($item) ? $item : ($this->getRepositoryPath() . DIRECTORY_SEPARATOR . $item);\n\n\t\t\t\tif (!file_exists($path)) {\n\t\t\t\t\tthrow new GitException(\"The path at '$item' does not represent a valid file.\");\n\t\t\t\t}\n\n\t\t\t\t$this->run('add', '--end-of-options', $item);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Adds all created, modified & removed files.\n\t\t * `git add --all`\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function addAllChanges()\n\t\t{\n\t\t\t$this->run('add', '--all');\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Renames file(s).\n\t\t * `git mv <file>`\n\t\t * @param  string|string[] $file  from: array('from' => 'to', ...) || (from, to)\n\t\t * @param  string|NULL $to\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function renameFile($file, $to = NULL)\n\t\t{\n\t\t\tif (!is_array($file)) { // rename(file, to);\n\t\t\t\t$file = [\n\t\t\t\t\t$file => $to,\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tforeach ($file as $from => $to) {\n\t\t\t\t$this->run('mv', '--end-of-options', $from, $to);\n\t\t\t}\n\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Commits changes\n\t\t * `git commit <params> -m <message>`\n\t\t * @param  string $message\n\t\t * @param  string[] $params  param => value\n\t\t * @throws GitException\n\t\t * @return static\n\t\t */\n\t\tpublic function commit($message, $params = NULL)\n\t\t{\n\t\t\t$this->run('commit', $params, [\n\t\t\t\t'-m' => $message,\n\t\t\t]);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Returns last commit ID on current branch\n\t\t * `git log --pretty=format:\"%H\" -n 1`\n\t\t * @return CommitId\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function getLastCommitId()\n\t\t{\n\t\t\t$result = $this->run('log', '--pretty=format:%H', '-n', '1');\n\t\t\t$lastLine = $result->getOutputLastLine();\n\t\t\treturn new CommitId((string) $lastLine);\n\t\t}\n\n\n\t\t/**\n\t\t * @return Commit\n\t\t */\n\t\tpublic function getLastCommit()\n\t\t{\n\t\t\treturn $this->getCommit($this->getLastCommitId());\n\t\t}\n\n\n\t\t/**\n\t\t * @param  string|CommitId $commitId\n\t\t * @return Commit\n\t\t */\n\t\tpublic function getCommit($commitId)\n\t\t{\n\t\t\tif (!($commitId instanceof CommitId)) {\n\t\t\t\t$commitId = new CommitId($commitId);\n\t\t\t}\n\n\t\t\t// subject\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%s');\n\t\t\t$subject = rtrim($result->getOutputAsString());\n\n\t\t\t// body\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%b');\n\t\t\t$body = rtrim($result->getOutputAsString());\n\n\t\t\t// author email\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%ae');\n\t\t\t$authorEmail = rtrim($result->getOutputAsString());\n\n\t\t\t// author name\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%an');\n\t\t\t$authorName = rtrim($result->getOutputAsString());\n\n\t\t\t// author date\n\t\t\t$result = $this->run('log', '-1', $commitId, '--pretty=format:%ad', '--date=iso-strict');\n\t\t\t$authorDate = \\DateTimeImmutable::createFromFormat(\\DateTime::ATOM, (string) $result->getOutputLastLine());\n\n\t\t\tif (!($authorDate instanceof \\DateTimeImmutable)) {\n\t\t\t\tthrow new GitException('Failed fetching of commit author date.', 0, NULL, $result);\n\t\t\t}\n\n\t\t\t// committer email\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%ce');\n\t\t\t$committerEmail = rtrim($result->getOutputAsString());\n\n\t\t\t// committer name\n\t\t\t$result = $this->run('log', '-1', $commitId, '--format=%cn');\n\t\t\t$committerName = rtrim($result->getOutputAsString());\n\n\t\t\t// committer date\n\t\t\t$result = $this->run('log', '-1', $commitId, '--pretty=format:%cd', '--date=iso-strict');\n\t\t\t$committerDate = \\DateTimeImmutable::createFromFormat(\\DateTime::ATOM, (string) $result->getOutputLastLine());\n\n\t\t\tif (!($committerDate instanceof \\DateTimeImmutable)) {\n\t\t\t\tthrow new GitException('Failed fetching of commit committer date.', 0, NULL, $result);\n\t\t\t}\n\n\t\t\treturn new Commit(\n\t\t\t\t$commitId,\n\t\t\t\t$subject,\n\t\t\t\t$body !== '' ? $body : NULL,\n\t\t\t\t$authorEmail,\n\t\t\t\t$authorName !== '' ? $authorName : NULL,\n\t\t\t\t$authorDate,\n\t\t\t\t$committerEmail,\n\t\t\t\t$committerName !== '' ? $committerName : NULL,\n\t\t\t\t$committerDate\n\t\t\t);\n\t\t}\n\n\n\t\t/**\n\t\t * Exists changes?\n\t\t * `git status` + magic\n\t\t * @return bool\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function hasChanges()\n\t\t{\n\t\t\t// Make sure the `git status` gets a refreshed look at the working tree.\n\t\t\t$this->run('update-index', '-q', '--refresh');\n\t\t\t$result = $this->run('status', '--porcelain');\n\t\t\treturn $result->hasOutput();\n\t\t}\n\n\n\t\t/**\n\t\t * Pull changes from a remote\n\t\t * @param  string|NULL $remote\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function pull($remote = NULL, array $params = NULL)\n\t\t{\n\t\t\t$this->run('pull', $params, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Push changes to a remote\n\t\t * @param  string|NULL $remote\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function push($remote = NULL, array $params = NULL)\n\t\t{\n\t\t\t$this->run('push', $params, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Run fetch command to get latest branches\n\t\t * @param  string|NULL $remote\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function fetch($remote = NULL, array $params = NULL)\n\t\t{\n\t\t\t$this->run('fetch', $params, '--end-of-options', $remote);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Adds new remote repository\n\t\t * @param  string $name\n\t\t * @param  string $url\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function addRemote($name, $url, array $params = NULL)\n\t\t{\n\t\t\t$this->run('remote', 'add', $params, '--end-of-options', $name, $url);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Renames remote repository\n\t\t * @param  string $oldName\n\t\t * @param  string $newName\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function renameRemote($oldName, $newName)\n\t\t{\n\t\t\t$this->run('remote', 'rename', '--end-of-options', $oldName, $newName);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Removes remote repository\n\t\t * @param  string $name\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function removeRemote($name)\n\t\t{\n\t\t\t$this->run('remote', 'remove', '--end-of-options', $name);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * Changes remote repository URL\n\t\t * @param  string $name\n\t\t * @param  string $url\n\t\t * @param  array<mixed>|NULL $params\n\t\t * @return static\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function setRemoteUrl($name, $url, array $params = NULL)\n\t\t{\n\t\t\t$this->run('remote', 'set-url', $params, '--end-of-options', $name, $url);\n\t\t\treturn $this;\n\t\t}\n\n\n\t\t/**\n\t\t * @param  mixed ...$cmd\n\t\t * @return string[]  returns output\n\t\t * @throws GitException\n\t\t */\n\t\tpublic function execute(...$cmd)\n\t\t{\n\t\t\t$result = $this->run(...$cmd);\n\t\t\treturn $result->getOutput();\n\t\t}\n\n\n\t\t/**\n\t\t * @param  array<mixed> $args\n\t\t * @return string[]|NULL\n\t\t * @throws GitException\n\t\t */\n\t\tprotected function extractFromCommand(array $args, callable $filter = NULL)\n\t\t{\n\t\t\t$result = $this->run(...$args);\n\t\t\t$output = $result->getOutput();\n\n\t\t\tif ($filter !== NULL) {\n\t\t\t\t$newArray = [];\n\n\t\t\t\tforeach ($output as $line) {\n\t\t\t\t\t$value = $filter($line);\n\n\t\t\t\t\tif ($value === FALSE) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$newArray[] = (string) $value;\n\t\t\t\t}\n\n\t\t\t\t$output = $newArray;\n\t\t\t}\n\n\t\t\tif (empty($output)) {\n\t\t\t\treturn NULL;\n\t\t\t}\n\n\t\t\treturn $output;\n\t\t}\n\n\n\t\t/**\n\t\t * Runs command.\n\t\t * @param  mixed ...$args\n\t\t * @return RunnerResult\n\t\t * @throws GitException\n\t\t */\n\t\tprotected function run(...$args)\n\t\t{\n\t\t\t$result = $this->runner->run($this->repository, $args);\n\n\t\t\tif (!$result->isOk()) {\n\t\t\t\tthrow new GitException(\"Command '{$result->getCommand()}' failed (exit-code {$result->getExitCode()}).\", $result->getExitCode(), NULL, $result);\n\t\t\t}\n\n\t\t\treturn $result;\n\t\t}\n\t}\n", "<?php\n\nuse Tester\\Assert;\nuse CzProject\\GitPhp\\Git;\nuse CzProject\\GitPhp\\GitException;\nuse CzProject\\GitPhp\\Tests\\AssertRunner;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$runner = new AssertRunner(__DIR__);\n$git = new Git($runner);\n\n$runner->assert(['branch', '--end-of-options', 'master']);\n$runner->assert(['branch', '--end-of-options', 'develop']);\n$runner->assert(['checkout', '--end-of-options', 'develop']);\n$runner->assert(['merge', '--end-of-options', 'feature-1']);\n$runner->assert(['branch', '-d', 'feature-1']);\n$runner->assert(['checkout', '--end-of-options', 'master']);\n\n$repo = $git->open(__DIR__);\n$repo->createBranch('master');\n$repo->createBranch('develop', TRUE);\n$repo->merge('feature-1');\n$repo->removeBranch('feature-1');\n$repo->checkout('master');\n", "<?php\n\nuse Tester\\Assert;\nuse CzProject\\GitPhp\\Git;\nuse CzProject\\GitPhp\\GitException;\nuse CzProject\\GitPhp\\Tests\\AssertRunner;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$runner = new AssertRunner(__DIR__);\n$git = new Git($runner);\n$repo = $git->open(__DIR__ . '/fixtures');\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['add', '--end-of-options', 'file1.txt']);\n\t$runner->assert(['add', '--end-of-options', 'file2.txt']);\n\t$runner->assert(['add', '--end-of-options', 'file3.txt']);\n\t$runner->assert(['add', '--end-of-options', 'file4.txt']);\n\t$runner->assert(['add', '--end-of-options', 'file5.txt']);\n\n\t$repo->addFile('file1.txt');\n\t$repo->addFile([\n\t\t'file2.txt',\n\t\t'file3.txt',\n\t]);\n\t$repo->addFile('file4.txt', 'file5.txt');\n});\n\n\ntest(function () use ($repo) {\n\tAssert::exception(function () use ($repo) {\n\t\t$repo->addFile('not-found.txt');\n\t}, GitException::class, \"The path at 'not-found.txt' does not represent a valid file.\");\n});\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['rm', '-r', '--end-of-options', 'file1.txt']);\n\t$runner->assert(['rm', '-r', '--end-of-options', 'file2.txt']);\n\t$runner->assert(['rm', '-r', '--end-of-options', 'file3.txt']);\n\t$runner->assert(['rm', '-r', '--end-of-options', 'file4.txt']);\n\t$runner->assert(['rm', '-r', '--end-of-options', 'file5.txt']);\n\n\t$repo->removeFile('file1.txt');\n\t$repo->removeFile([\n\t\t'file2.txt',\n\t\t'file3.txt',\n\t]);\n\t$repo->removeFile('file4.txt', 'file5.txt');\n});\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['mv', '--end-of-options', 'file1.txt', 'new1.txt']);\n\t$runner->assert(['mv', '--end-of-options', 'file2.txt', 'new2.txt']);\n\t$runner->assert(['mv', '--end-of-options', 'file3.txt', 'new3.txt']);\n\n\t$repo->renameFile('file1.txt', 'new1.txt');\n\t$repo->renameFile([\n\t\t'file2.txt' => 'new2.txt',\n\t\t'file3.txt' => 'new3.txt',\n\t]);\n});\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['add', '--all']);\n\n\t$repo->addAllChanges();\n});\n\n\n\ntest(function () use ($repo, $runner) {\n\t$runner->resetAsserts();\n\t$runner->assert(['update-index', '-q', '--refresh']);\n\t$runner->assert(['status', '--porcelain']);\n\n\tAssert::false($repo->hasChanges());\n});\n", "<?php\n\nuse Tester\\Assert;\nuse CzProject\\GitPhp\\Git;\nuse CzProject\\GitPhp\\GitException;\nuse CzProject\\GitPhp\\Tests\\AssertRunner;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$runner = new AssertRunner(__DIR__);\n$git = new Git($runner);\n\n$runner->assert(['clone', '-q', '--end-of-options', 'git@github.com:czproject/git-php.git', __DIR__]);\n$runner->assert(['remote', 'add', '--end-of-options', 'origin2', 'git@github.com:czproject/git-php.git']);\n$runner->assert(['remote', 'add', '--end-of-options', 'remote', 'git@github.com:czproject/git-php.git']);\n$runner->assert(['remote', 'add', [\n\t'--mirror=push',\n], '--end-of-options', 'only-push', 'test-url']);\n$runner->assert(['remote', 'rename', '--end-of-options', 'remote', 'origin3']);\n$runner->assert(['remote', 'set-url', [\n\t'--push',\n], '--end-of-options', 'origin3', 'test-url']);\n$runner->assert(['remote', 'remove', '--end-of-options', 'origin2']);\n\n$repo = $git->cloneRepository('git@github.com:czproject/git-php.git', __DIR__);\n$repo->addRemote('origin2', 'git@github.com:czproject/git-php.git');\n$repo->addRemote('remote', 'git@github.com:czproject/git-php.git');\n$repo->addRemote('only-push', 'test-url', [\n\t'--mirror=push',\n]);\n$repo->renameRemote('remote', 'origin3');\n$repo->setRemoteUrl('origin3', 'test-url', [\n\t'--push',\n]);\n$repo->removeRemote('origin2');\n\n$runner->assert(['push', '--end-of-options', 'origin']);\n$runner->assert(['fetch', '--end-of-options', 'origin']);\n$runner->assert(['pull', '--end-of-options', 'origin']);\n$repo->push('origin');\n$repo->fetch('origin');\n$repo->pull('origin');\n", "<?php\n\nuse Tester\\Assert;\nuse CzProject\\GitPhp\\Git;\nuse CzProject\\GitPhp\\GitException;\nuse CzProject\\GitPhp\\Tests\\AssertRunner;\n\nrequire __DIR__ . '/bootstrap.php';\n\n$runner = new AssertRunner(__DIR__);\n$git = new Git($runner);\n\n$runner->assert(['tag', '--end-of-options', 'v1.0.0']);\n$runner->assert(['tag', '--end-of-options', 'v2.0.0', 'v1.0.0']);\n$runner->assert(['tag', '-d', 'v1.0.0']);\n$runner->assert(['tag', '-d', 'v2.0.0']);\n\n$repo = $git->open(__DIR__);\n$repo->createTag('v1.0.0');\n$repo->renameTag('v1.0.0', 'v2.0.0');\n$repo->removeTag('v2.0.0');\n"], "filenames": ["src/Git.php", "src/GitRepository.php", "tests/GitPhp/GitRepository.branches.phpt", "tests/GitPhp/GitRepository.files.phpt", "tests/GitPhp/GitRepository.remotes.phpt", "tests/GitPhp/GitRepository.tags.phpt"], "buggy_code_start_loc": [48, 55, 13, 17, 13, 13], "buggy_code_end_loc": [122, 543, 19, 61, 40, 15], "fixing_code_start_loc": [49, 55, 13, 17, 13, 13], "fixing_code_end_loc": [126, 543, 19, 61, 40, 15], "type": "CWE-77", "message": "The package czproject/git-php before 4.0.3 are vulnerable to Command Injection via git argument injection. When calling the isRemoteUrlReadable($url, array $refs = NULL) function, both the url and refs parameters are passed to the git ls-remote subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection.", "other": {"cve": {"id": "CVE-2022-25866", "sourceIdentifier": "report@snyk.io", "published": "2022-04-25T17:15:36.637", "lastModified": "2022-05-05T19:39:38.100", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package czproject/git-php before 4.0.3 are vulnerable to Command Injection via git argument injection. When calling the isRemoteUrlReadable($url, array $refs = NULL) function, both the url and refs parameters are passed to the git ls-remote subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection."}, {"lang": "es", "value": "El paquete czproject/git-php versiones anteriores a 4.0.3, es vulnerable a una inyecci\u00f3n de comandos por medio de una inyecci\u00f3n de argumentos git. Cuando es llamado a la funci\u00f3n isRemoteUrlReadable($url, array $refs = NULL), los par\u00e1metros url y refs son pasados al subcomando git ls-remote de forma que puedan establecerse flags adicionales. Los flags adicionales pueden ser usados para llevar a cabo una inyecci\u00f3n de comandos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:git-php_project:git-php:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.3", "matchCriteriaId": "F13FD606-BEA5-4F72-ACB0-5F4CB3FE6680"}]}]}], "references": [{"url": "https://github.com/czproject/git-php/commit/5e82d5479da5f16d37a915de4ec55e1ac78de733", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/czproject/git-php/releases/tag/v4.0.3", "source": "report@snyk.io", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-PHP-CZPROJECTGITPHP-2421349", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/czproject/git-php/commit/5e82d5479da5f16d37a915de4ec55e1ac78de733"}}