{"buggy_code": ["<?php\n/**\n * List Table API: WP_Posts_List_Table class\n *\n * @package WordPress\n * @subpackage Administration\n * @since 3.1.0\n */\n\n/**\n * Core class used to implement displaying posts in a list table.\n *\n * @since 3.1.0\n * @access private\n *\n * @see WP_List_Table\n */\nclass WP_Posts_List_Table extends WP_List_Table {\n\n\t/**\n\t * Whether the items should be displayed hierarchically or linearly.\n\t *\n\t * @since 3.1.0\n\t * @var bool\n\t * @access protected\n\t */\n\tprotected $hierarchical_display;\n\n\t/**\n\t * Holds the number of pending comments for each post.\n\t *\n\t * @since 3.1.0\n\t * @var array\n\t * @access protected\n\t */\n\tprotected $comment_pending_count;\n\n\t/**\n\t * Holds the number of posts for this user.\n\t *\n\t * @since 3.1.0\n\t * @var int\n\t * @access private\n\t */\n\tprivate $user_posts_count;\n\n\t/**\n\t * Holds the number of posts which are sticky.\n\t *\n\t * @since 3.1.0\n\t * @var int\n\t * @access private\n\t */\n\tprivate $sticky_posts_count = 0;\n\n\tprivate $is_trash;\n\n\t/**\n\t * Current level for output.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t * @var int\n\t */\n\tprotected $current_level = 0;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t *\n\t * @see WP_List_Table::__construct() for more information on default arguments.\n\t *\n\t * @global WP_Post_Type $post_type_object\n\t * @global wpdb         $wpdb\n\t *\n\t * @param array $args An associative array of arguments.\n\t */\n\tpublic function __construct( $args = array() ) {\n\t\tglobal $post_type_object, $wpdb;\n\n\t\tparent::__construct( array(\n\t\t\t'plural' => 'posts',\n\t\t\t'screen' => isset( $args['screen'] ) ? $args['screen'] : null,\n\t\t) );\n\n\t\t$post_type        = $this->screen->post_type;\n\t\t$post_type_object = get_post_type_object( $post_type );\n\n\t\t$exclude_states   = get_post_stati( array(\n\t\t\t'show_in_admin_all_list' => false,\n\t\t) );\n\t\t$this->user_posts_count = intval( $wpdb->get_var( $wpdb->prepare( \"\n\t\t\tSELECT COUNT( 1 )\n\t\t\tFROM $wpdb->posts\n\t\t\tWHERE post_type = %s\n\t\t\tAND post_status NOT IN ( '\" . implode( \"','\", $exclude_states ) . \"' )\n\t\t\tAND post_author = %d\n\t\t\", $post_type, get_current_user_id() ) ) );\n\n\t\tif ( $this->user_posts_count && ! current_user_can( $post_type_object->cap->edit_others_posts ) && empty( $_REQUEST['post_status'] ) && empty( $_REQUEST['all_posts'] ) && empty( $_REQUEST['author'] ) && empty( $_REQUEST['show_sticky'] ) ) {\n\t\t\t$_GET['author'] = get_current_user_id();\n\t\t}\n\n\t\tif ( 'post' === $post_type && $sticky_posts = get_option( 'sticky_posts' ) ) {\n\t\t\t$sticky_posts = implode( ', ', array_map( 'absint', (array) $sticky_posts ) );\n\t\t\t$this->sticky_posts_count = $wpdb->get_var( $wpdb->prepare( \"SELECT COUNT( 1 ) FROM $wpdb->posts WHERE post_type = %s AND post_status NOT IN ('trash', 'auto-draft') AND ID IN ($sticky_posts)\", $post_type ) );\n\t\t}\n\t}\n\n\t/**\n\t * Sets whether the table layout should be hierarchical or not.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param bool $display Whether the table layout should be hierarchical.\n\t */\n\tpublic function set_hierarchical_display( $display ) {\n\t\t$this->hierarchical_display = $display;\n\t}\n\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function ajax_user_can() {\n\t\treturn current_user_can( get_post_type_object( $this->screen->post_type )->cap->edit_posts );\n\t}\n\n\t/**\n\t *\n\t * @global array    $avail_post_stati\n\t * @global WP_Query $wp_query\n\t * @global int      $per_page\n\t * @global string   $mode\n\t */\n\tpublic function prepare_items() {\n\t\tglobal $avail_post_stati, $wp_query, $per_page, $mode;\n\n\t\t// is going to call wp()\n\t\t$avail_post_stati = wp_edit_posts_query();\n\n\t\t$this->set_hierarchical_display( is_post_type_hierarchical( $this->screen->post_type ) && 'menu_order title' === $wp_query->query['orderby'] );\n\n\t\t$post_type = $this->screen->post_type;\n\t\t$per_page = $this->get_items_per_page( 'edit_' . $post_type . '_per_page' );\n\n\t\t/** This filter is documented in wp-admin/includes/post.php */\n \t\t$per_page = apply_filters( 'edit_posts_per_page', $per_page, $post_type );\n\n\t\tif ( $this->hierarchical_display ) {\n\t\t\t$total_items = $wp_query->post_count;\n\t\t} elseif ( $wp_query->found_posts || $this->get_pagenum() === 1 ) {\n\t\t\t$total_items = $wp_query->found_posts;\n\t\t} else {\n\t\t\t$post_counts = (array) wp_count_posts( $post_type, 'readable' );\n\n\t\t\tif ( isset( $_REQUEST['post_status'] ) && in_array( $_REQUEST['post_status'] , $avail_post_stati ) ) {\n\t\t\t\t$total_items = $post_counts[ $_REQUEST['post_status'] ];\n\t\t\t} elseif ( isset( $_REQUEST['show_sticky'] ) && $_REQUEST['show_sticky'] ) {\n\t\t\t\t$total_items = $this->sticky_posts_count;\n\t\t\t} elseif ( isset( $_GET['author'] ) && $_GET['author'] == get_current_user_id() ) {\n\t\t\t\t$total_items = $this->user_posts_count;\n\t\t\t} else {\n\t\t\t\t$total_items = array_sum( $post_counts );\n\n\t\t\t\t// Subtract post types that are not included in the admin all list.\n\t\t\t\tforeach ( get_post_stati( array( 'show_in_admin_all_list' => false ) ) as $state ) {\n\t\t\t\t\t$total_items -= $post_counts[ $state ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $_REQUEST['mode'] ) ) {\n\t\t\t$mode = $_REQUEST['mode'] === 'excerpt' ? 'excerpt' : 'list';\n\t\t\tset_user_setting( 'posts_list_mode', $mode );\n\t\t} else {\n\t\t\t$mode = get_user_setting( 'posts_list_mode', 'list' );\n\t\t}\n\n\t\t$this->is_trash = isset( $_REQUEST['post_status'] ) && $_REQUEST['post_status'] === 'trash';\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $total_items,\n\t\t\t'per_page' => $per_page\n\t\t) );\n\t}\n\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function has_items() {\n\t\treturn have_posts();\n\t}\n\n\t/**\n\t * @access public\n\t */\n\tpublic function no_items() {\n\t\tif ( isset( $_REQUEST['post_status'] ) && 'trash' === $_REQUEST['post_status'] )\n\t\t\techo get_post_type_object( $this->screen->post_type )->labels->not_found_in_trash;\n\t\telse\n\t\t\techo get_post_type_object( $this->screen->post_type )->labels->not_found;\n\t}\n\n\t/**\n\t * Determine if the current view is the \"All\" view.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @return bool Whether the current view is the \"All\" view.\n\t */\n\tprotected function is_base_request() {\n\t\t$vars = $_GET;\n\t\tunset( $vars['paged'] );\n\n\t\tif ( empty( $vars ) ) {\n\t\t\treturn true;\n\t\t} elseif ( 1 === count( $vars ) && ! empty( $vars['post_type'] ) ) {\n\t\t\treturn $this->screen->post_type === $vars['post_type'];\n\t\t}\n\n\t\treturn 1 === count( $vars ) && ! empty( $vars['mode'] );\n\t}\n\n\t/**\n\t * Helper to create links to edit.php with params.\n\t *\n\t * @since 4.4.0\n\t * @access protected\n\t *\n\t * @param array  $args  URL parameters for the link.\n\t * @param string $label Link text.\n\t * @param string $class Optional. Class attribute. Default empty string.\n\t * @return string The formatted link string.\n\t */\n\tprotected function get_edit_link( $args, $label, $class = '' ) {\n\t\t$url = add_query_arg( $args, 'edit.php' );\n\n\t\t$class_html = '';\n\t\tif ( ! empty( $class ) ) {\n\t\t\t $class_html = sprintf(\n\t\t\t\t' class=\"%s\"',\n\t\t\t\tesc_attr( $class )\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t'<a href=\"%s\"%s>%s</a>',\n\t\t\tesc_url( $url ),\n\t\t\t$class_html,\n\t\t\t$label\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @global array $locked_post_status This seems to be deprecated.\n\t * @global array $avail_post_stati\n\t * @return array\n\t */\n\tprotected function get_views() {\n\t\tglobal $locked_post_status, $avail_post_stati;\n\n\t\t$post_type = $this->screen->post_type;\n\n\t\tif ( !empty($locked_post_status) )\n\t\t\treturn array();\n\n\t\t$status_links = array();\n\t\t$num_posts = wp_count_posts( $post_type, 'readable' );\n\t\t$total_posts = array_sum( (array) $num_posts );\n\t\t$class = '';\n\n\t\t$current_user_id = get_current_user_id();\n\t\t$all_args = array( 'post_type' => $post_type );\n\t\t$mine = '';\n\n\t\t// Subtract post types that are not included in the admin all list.\n\t\tforeach ( get_post_stati( array( 'show_in_admin_all_list' => false ) ) as $state ) {\n\t\t\t$total_posts -= $num_posts->$state;\n\t\t}\n\n\t\tif ( $this->user_posts_count && $this->user_posts_count !== $total_posts ) {\n\t\t\tif ( isset( $_GET['author'] ) && ( $_GET['author'] == $current_user_id ) ) {\n\t\t\t\t$class = 'current';\n\t\t\t}\n\n\t\t\t$mine_args = array(\n\t\t\t\t'post_type' => $post_type,\n\t\t\t\t'author' => $current_user_id\n\t\t\t);\n\n\t\t\t$mine_inner_html = sprintf(\n\t\t\t\t_nx(\n\t\t\t\t\t'Mine <span class=\"count\">(%s)</span>',\n\t\t\t\t\t'Mine <span class=\"count\">(%s)</span>',\n\t\t\t\t\t$this->user_posts_count,\n\t\t\t\t\t'posts'\n\t\t\t\t),\n\t\t\t\tnumber_format_i18n( $this->user_posts_count )\n\t\t\t);\n\n\t\t\t$mine = $this->get_edit_link( $mine_args, $mine_inner_html, $class );\n\n\t\t\t$all_args['all_posts'] = 1;\n\t\t\t$class = '';\n\t\t}\n\n\t\tif ( empty( $class ) && ( $this->is_base_request() || isset( $_REQUEST['all_posts'] ) ) ) {\n\t\t\t$class = 'current';\n\t\t}\n\n\t\t$all_inner_html = sprintf(\n\t\t\t_nx(\n\t\t\t\t'All <span class=\"count\">(%s)</span>',\n\t\t\t\t'All <span class=\"count\">(%s)</span>',\n\t\t\t\t$total_posts,\n\t\t\t\t'posts'\n\t\t\t),\n\t\t\tnumber_format_i18n( $total_posts )\n\t\t);\n\n\t\t$status_links['all'] = $this->get_edit_link( $all_args, $all_inner_html, $class );\n\t\tif ( $mine ) {\n\t\t\t$status_links['mine'] = $mine;\n\t\t}\n\n\t\tforeach ( get_post_stati(array('show_in_admin_status_list' => true), 'objects') as $status ) {\n\t\t\t$class = '';\n\n\t\t\t$status_name = $status->name;\n\n\t\t\tif ( ! in_array( $status_name, $avail_post_stati ) || empty( $num_posts->$status_name ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( isset($_REQUEST['post_status']) && $status_name === $_REQUEST['post_status'] ) {\n\t\t\t\t$class = 'current';\n\t\t\t}\n\n\t\t\t$status_args = array(\n\t\t\t\t'post_status' => $status_name,\n\t\t\t\t'post_type' => $post_type,\n\t\t\t);\n\n\t\t\t$status_label = sprintf(\n\t\t\t\ttranslate_nooped_plural( $status->label_count, $num_posts->$status_name ),\n\t\t\t\tnumber_format_i18n( $num_posts->$status_name )\n\t\t\t);\n\n\t\t\t$status_links[ $status_name ] = $this->get_edit_link( $status_args, $status_label, $class );\n\t\t}\n\n\t\tif ( ! empty( $this->sticky_posts_count ) ) {\n\t\t\t$class = ! empty( $_REQUEST['show_sticky'] ) ? 'current' : '';\n\n\t\t\t$sticky_args = array(\n\t\t\t\t'post_type'\t=> $post_type,\n\t\t\t\t'show_sticky' => 1\n\t\t\t);\n\n\t\t\t$sticky_inner_html = sprintf(\n\t\t\t\t_nx(\n\t\t\t\t\t'Sticky <span class=\"count\">(%s)</span>',\n\t\t\t\t\t'Sticky <span class=\"count\">(%s)</span>',\n\t\t\t\t\t$this->sticky_posts_count,\n\t\t\t\t\t'posts'\n\t\t\t\t),\n\t\t\t\tnumber_format_i18n( $this->sticky_posts_count )\n\t\t\t);\n\n\t\t\t$sticky_link = array(\n\t\t\t\t'sticky' => $this->get_edit_link( $sticky_args, $sticky_inner_html, $class )\n\t\t\t);\n\n\t\t\t// Sticky comes after Publish, or if not listed, after All.\n\t\t\t$split = 1 + array_search( ( isset( $status_links['publish'] ) ? 'publish' : 'all' ), array_keys( $status_links ) );\n\t\t\t$status_links = array_merge( array_slice( $status_links, 0, $split ), $sticky_link, array_slice( $status_links, $split ) );\n\t\t}\n\n\t\treturn $status_links;\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_bulk_actions() {\n\t\t$actions = array();\n\t\t$post_type_obj = get_post_type_object( $this->screen->post_type );\n\n\t\tif ( current_user_can( $post_type_obj->cap->edit_posts ) ) {\n\t\t\tif ( $this->is_trash ) {\n\t\t\t\t$actions['untrash'] = __( 'Restore' );\n\t\t\t} else {\n\t\t\t\t$actions['edit'] = __( 'Edit' );\n\t\t\t}\n\t\t}\n\n\t\tif ( current_user_can( $post_type_obj->cap->delete_posts ) ) {\n\t\t\tif ( $this->is_trash || ! EMPTY_TRASH_DAYS ) {\n\t\t\t\t$actions['delete'] = __( 'Delete Permanently' );\n\t\t\t} else {\n\t\t\t\t$actions['trash'] = __( 'Move to Trash' );\n\t\t\t}\n\t\t}\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * Displays a categories drop-down for filtering on the Posts list table.\n\t *\n\t * @since 4.6.0\n\t * @access protected\n\t *\n\t * @global int $cat Currently selected category.\n\t *\n\t * @param string $post_type Post type slug.\n\t */\n\tprotected function categories_dropdown( $post_type ) {\n\t\tglobal $cat;\n\n\t\t/**\n\t\t * Filters whether to remove the 'Categories' drop-down from the post list table.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param bool   $disable   Whether to disable the categories drop-down. Default false.\n\t\t * @param string $post_type Post type slug.\n\t\t */\n\t\tif ( false !== apply_filters( 'disable_categories_dropdown', false, $post_type ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( is_object_in_taxonomy( $post_type, 'category' ) ) {\n\t\t\t$dropdown_options = array(\n\t\t\t\t'show_option_all' => get_taxonomy( 'category' )->labels->all_items,\n\t\t\t\t'hide_empty' => 0,\n\t\t\t\t'hierarchical' => 1,\n\t\t\t\t'show_count' => 0,\n\t\t\t\t'orderby' => 'name',\n\t\t\t\t'selected' => $cat\n\t\t\t);\n\n\t\t\techo '<label class=\"screen-reader-text\" for=\"cat\">' . __( 'Filter by category' ) . '</label>';\n\t\t\twp_dropdown_categories( $dropdown_options );\n\t\t}\n\t}\n\n\t/**\n\t * @param string $which\n\t */\n\tprotected function extra_tablenav( $which ) {\n?>\n\t\t<div class=\"alignleft actions\">\n<?php\n\t\tif ( 'top' === $which && !is_singular() ) {\n\t\t\tob_start();\n\n\t\t\t$this->months_dropdown( $this->screen->post_type );\n\t\t\t$this->categories_dropdown( $this->screen->post_type );\n\n\t\t\t/**\n\t\t\t * Fires before the Filter button on the Posts and Pages list tables.\n\t\t\t *\n\t\t\t * The Filter button allows sorting by date and/or category on the\n\t\t\t * Posts list table, and sorting by date on the Pages list table.\n\t\t\t *\n\t\t\t * @since 2.1.0\n\t\t\t * @since 4.4.0 The `$post_type` parameter was added.\n\t\t\t * @since 4.6.0 The `$which` parameter was added.\n\t\t\t *\n\t\t\t * @param string $post_type The post type slug.\n\t\t\t * @param string $which     The location of the extra table nav markup:\n\t\t\t *                          'top' or 'bottom' for WP_Posts_List_Table,\n\t\t\t *                          'bar' for WP_Media_List_Table.\n\t\t\t */\n\t\t\tdo_action( 'restrict_manage_posts', $this->screen->post_type, $which );\n\n\t\t\t$output = ob_get_clean();\n\n\t\t\tif ( ! empty( $output ) ) {\n\t\t\t\techo $output;\n\t\t\t\tsubmit_button( __( 'Filter' ), '', 'filter_action', false, array( 'id' => 'post-query-submit' ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( $this->is_trash && current_user_can( get_post_type_object( $this->screen->post_type )->cap->edit_others_posts ) ) {\n\t\t\tsubmit_button( __( 'Empty Trash' ), 'apply', 'delete_all', false );\n\t\t}\n?>\n\t\t</div>\n<?php\n\t\t/**\n\t\t * Fires immediately following the closing \"actions\" div in the tablenav for the posts\n\t\t * list table.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param string $which The location of the extra table nav markup: 'top' or 'bottom'.\n\t\t */\n\t\tdo_action( 'manage_posts_extra_tablenav', $which );\n\t}\n\n\t/**\n\t *\n\t * @return string\n\t */\n\tpublic function current_action() {\n\t\tif ( isset( $_REQUEST['delete_all'] ) || isset( $_REQUEST['delete_all2'] ) )\n\t\t\treturn 'delete_all';\n\n\t\treturn parent::current_action();\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_table_classes() {\n\t\treturn array( 'widefat', 'fixed', 'striped', is_post_type_hierarchical( $this->screen->post_type ) ? 'pages' : 'posts' );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tpublic function get_columns() {\n\t\t$post_type = $this->screen->post_type;\n\n\t\t$posts_columns = array();\n\n\t\t$posts_columns['cb'] = '<input type=\"checkbox\" />';\n\n\t\t/* translators: manage posts column name */\n\t\t$posts_columns['title'] = _x( 'Title', 'column name' );\n\n\t\tif ( post_type_supports( $post_type, 'author' ) ) {\n\t\t\t$posts_columns['author'] = __( 'Author' );\n\t\t}\n\n\t\t$taxonomies = get_object_taxonomies( $post_type, 'objects' );\n\t\t$taxonomies = wp_filter_object_list( $taxonomies, array( 'show_admin_column' => true ), 'and', 'name' );\n\n\t\t/**\n\t\t * Filters the taxonomy columns in the Posts list table.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$post_type`, refers to the post\n\t\t * type slug.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param array  $taxonomies Array of taxonomies to show columns for.\n\t\t * @param string $post_type  The post type.\n\t\t */\n\t\t$taxonomies = apply_filters( \"manage_taxonomies_for_{$post_type}_columns\", $taxonomies, $post_type );\n\t\t$taxonomies = array_filter( $taxonomies, 'taxonomy_exists' );\n\n\t\tforeach ( $taxonomies as $taxonomy ) {\n\t\t\tif ( 'category' === $taxonomy )\n\t\t\t\t$column_key = 'categories';\n\t\t\telseif ( 'post_tag' === $taxonomy )\n\t\t\t\t$column_key = 'tags';\n\t\t\telse\n\t\t\t\t$column_key = 'taxonomy-' . $taxonomy;\n\n\t\t\t$posts_columns[ $column_key ] = get_taxonomy( $taxonomy )->labels->name;\n\t\t}\n\n\t\t$post_status = !empty( $_REQUEST['post_status'] ) ? $_REQUEST['post_status'] : 'all';\n\t\tif ( post_type_supports( $post_type, 'comments' ) && !in_array( $post_status, array( 'pending', 'draft', 'future' ) ) )\n\t\t\t$posts_columns['comments'] = '<span class=\"vers comment-grey-bubble\" title=\"' . esc_attr__( 'Comments' ) . '\"><span class=\"screen-reader-text\">' . __( 'Comments' ) . '</span></span>';\n\n\t\t$posts_columns['date'] = __( 'Date' );\n\n\t\tif ( 'page' === $post_type ) {\n\n\t\t\t/**\n\t\t\t * Filters the columns displayed in the Pages list table.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param array $post_columns An array of column names.\n\t\t\t */\n\t\t\t$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Filters the columns displayed in the Posts list table.\n\t\t\t *\n\t\t\t * @since 1.5.0\n\t\t\t *\n\t\t\t * @param array  $posts_columns An array of column names.\n\t\t\t * @param string $post_type     The post type slug.\n\t\t\t */\n\t\t\t$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );\n\t\t}\n\n\t\t/**\n\t\t * Filters the columns displayed in the Posts list table for a specific post type.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$post_type`, refers to the post type slug.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param array $post_columns An array of column names.\n\t\t */\n\t\treturn apply_filters( \"manage_{$post_type}_posts_columns\", $posts_columns );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_sortable_columns() {\n\t\treturn array(\n\t\t\t'title'    => 'title',\n\t\t\t'parent'   => 'parent',\n\t\t\t'comments' => 'comment_count',\n\t\t\t'date'     => array( 'date', true )\n\t\t);\n\t}\n\n\t/**\n\t * @global WP_Query $wp_query\n\t * @global int $per_page\n\t * @param array $posts\n\t * @param int $level\n\t */\n\tpublic function display_rows( $posts = array(), $level = 0 ) {\n\t\tglobal $wp_query, $per_page;\n\n\t\tif ( empty( $posts ) )\n\t\t\t$posts = $wp_query->posts;\n\n\t\tadd_filter( 'the_title', 'esc_html' );\n\n\t\tif ( $this->hierarchical_display ) {\n\t\t\t$this->_display_rows_hierarchical( $posts, $this->get_pagenum(), $per_page );\n\t\t} else {\n\t\t\t$this->_display_rows( $posts, $level );\n\t\t}\n\t}\n\n\t/**\n\t * @param array $posts\n\t * @param int $level\n\t */\n\tprivate function _display_rows( $posts, $level = 0 ) {\n\t\t// Create array of post IDs.\n\t\t$post_ids = array();\n\n\t\tforeach ( $posts as $a_post )\n\t\t\t$post_ids[] = $a_post->ID;\n\n\t\t$this->comment_pending_count = get_pending_comments_num( $post_ids );\n\n\t\tforeach ( $posts as $post )\n\t\t\t$this->single_row( $post, $level );\n\t}\n\n\t/**\n\t * @global wpdb    $wpdb\n\t * @global WP_Post $post\n\t * @param array $pages\n\t * @param int $pagenum\n\t * @param int $per_page\n\t */\n\tprivate function _display_rows_hierarchical( $pages, $pagenum = 1, $per_page = 20 ) {\n\t\tglobal $wpdb;\n\n\t\t$level = 0;\n\n\t\tif ( ! $pages ) {\n\t\t\t$pages = get_pages( array( 'sort_column' => 'menu_order' ) );\n\n\t\t\tif ( ! $pages )\n\t\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t * Arrange pages into two parts: top level pages and children_pages\n\t\t * children_pages is two dimensional array, eg.\n\t\t * children_pages[10][] contains all sub-pages whose parent is 10.\n\t\t * It only takes O( N ) to arrange this and it takes O( 1 ) for subsequent lookup operations\n\t\t * If searching, ignore hierarchy and treat everything as top level\n\t\t */\n\t\tif ( empty( $_REQUEST['s'] ) ) {\n\n\t\t\t$top_level_pages = array();\n\t\t\t$children_pages = array();\n\n\t\t\tforeach ( $pages as $page ) {\n\n\t\t\t\t// Catch and repair bad pages.\n\t\t\t\tif ( $page->post_parent == $page->ID ) {\n\t\t\t\t\t$page->post_parent = 0;\n\t\t\t\t\t$wpdb->update( $wpdb->posts, array( 'post_parent' => 0 ), array( 'ID' => $page->ID ) );\n\t\t\t\t\tclean_post_cache( $page );\n\t\t\t\t}\n\n\t\t\t\tif ( 0 == $page->post_parent )\n\t\t\t\t\t$top_level_pages[] = $page;\n\t\t\t\telse\n\t\t\t\t\t$children_pages[ $page->post_parent ][] = $page;\n\t\t\t}\n\n\t\t\t$pages = &$top_level_pages;\n\t\t}\n\n\t\t$count = 0;\n\t\t$start = ( $pagenum - 1 ) * $per_page;\n\t\t$end = $start + $per_page;\n\t\t$to_display = array();\n\n\t\tforeach ( $pages as $page ) {\n\t\t\tif ( $count >= $end )\n\t\t\t\tbreak;\n\n\t\t\tif ( $count >= $start ) {\n\t\t\t\t$to_display[$page->ID] = $level;\n\t\t\t}\n\n\t\t\t$count++;\n\n\t\t\tif ( isset( $children_pages ) )\n\t\t\t\t$this->_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page, $to_display );\n\t\t}\n\n\t\t// If it is the last pagenum and there are orphaned pages, display them with paging as well.\n\t\tif ( isset( $children_pages ) && $count < $end ){\n\t\t\tforeach ( $children_pages as $orphans ){\n\t\t\t\tforeach ( $orphans as $op ) {\n\t\t\t\t\tif ( $count >= $end )\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tif ( $count >= $start ) {\n\t\t\t\t\t\t$to_display[$op->ID] = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$ids = array_keys( $to_display );\n\t\t_prime_post_caches( $ids );\n\n\t\tif ( ! isset( $GLOBALS['post'] ) ) {\n\t\t\t$GLOBALS['post'] = reset( $ids );\n\t\t}\n\n\t\tforeach ( $to_display as $page_id => $level ) {\n\t\t\techo \"\\t\";\n\t\t\t$this->single_row( $page_id, $level );\n\t\t}\n\t}\n\n\t/**\n\t * Given a top level page ID, display the nested hierarchy of sub-pages\n\t * together with paging support\n\t *\n\t * @since 3.1.0 (Standalone function exists since 2.6.0)\n\t * @since 4.2.0 Added the `$to_display` parameter.\n\t *\n\t * @param array $children_pages\n\t * @param int $count\n\t * @param int $parent\n\t * @param int $level\n\t * @param int $pagenum\n\t * @param int $per_page\n\t * @param array $to_display List of pages to be displayed. Passed by reference.\n\t */\n\tprivate function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page, &$to_display ) {\n\t\tif ( ! isset( $children_pages[$parent] ) )\n\t\t\treturn;\n\n\t\t$start = ( $pagenum - 1 ) * $per_page;\n\t\t$end = $start + $per_page;\n\n\t\tforeach ( $children_pages[$parent] as $page ) {\n\t\t\tif ( $count >= $end )\n\t\t\t\tbreak;\n\n\t\t\t// If the page starts in a subtree, print the parents.\n\t\t\tif ( $count == $start && $page->post_parent > 0 ) {\n\t\t\t\t$my_parents = array();\n\t\t\t\t$my_parent = $page->post_parent;\n\t\t\t\twhile ( $my_parent ) {\n\t\t\t\t\t// Get the ID from the list or the attribute if my_parent is an object\n\t\t\t\t\t$parent_id = $my_parent;\n\t\t\t\t\tif ( is_object( $my_parent ) ) {\n\t\t\t\t\t\t$parent_id = $my_parent->ID;\n\t\t\t\t\t}\n\n\t\t\t\t\t$my_parent = get_post( $parent_id );\n\t\t\t\t\t$my_parents[] = $my_parent;\n\t\t\t\t\tif ( !$my_parent->post_parent )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t$my_parent = $my_parent->post_parent;\n\t\t\t\t}\n\t\t\t\t$num_parents = count( $my_parents );\n\t\t\t\twhile ( $my_parent = array_pop( $my_parents ) ) {\n\t\t\t\t\t$to_display[$my_parent->ID] = $level - $num_parents;\n\t\t\t\t\t$num_parents--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( $count >= $start ) {\n\t\t\t\t$to_display[$page->ID] = $level;\n\t\t\t}\n\n\t\t\t$count++;\n\n\t\t\t$this->_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page, $to_display );\n\t\t}\n\n\t\tunset( $children_pages[$parent] ); //required in order to keep track of orphans\n\t}\n\n\t/**\n\t * Handles the checkbox column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_cb( $post ) {\n\t\tif ( current_user_can( 'edit_post', $post->ID ) ): ?>\n\t\t\t<label class=\"screen-reader-text\" for=\"cb-select-<?php the_ID(); ?>\"><?php\n\t\t\t\tprintf( __( 'Select %s' ), _draft_or_post_title() );\n\t\t\t?></label>\n\t\t\t<input id=\"cb-select-<?php the_ID(); ?>\" type=\"checkbox\" name=\"post[]\" value=\"<?php the_ID(); ?>\" />\n\t\t\t<div class=\"locked-indicator\">\n\t\t\t\t<span class=\"locked-indicator-icon\" aria-hidden=\"true\"></span>\n\t\t\t\t<span class=\"screen-reader-text\"><?php\n\t\t\t\tprintf(\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\t__( '&#8220;%s&#8221; is locked' ),\n\t\t\t\t\t_draft_or_post_title()\n\t\t\t\t);\n\t\t\t\t?></span>\n\t\t\t</div>\n\t\t<?php endif;\n\t}\n\n\t/**\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param WP_Post $post\n\t * @param string  $classes\n\t * @param string  $data\n\t * @param string  $primary\n\t */\n\tprotected function _column_title( $post, $classes, $data, $primary ) {\n\t\techo '<td class=\"' . $classes . ' page-title\" ', $data, '>';\n\t\techo $this->column_title( $post );\n\t\techo $this->handle_row_actions( $post, 'title', $primary );\n\t\techo '</td>';\n\t}\n\n\t/**\n\t * Handles the title column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @global string $mode\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_title( $post ) {\n\t\tglobal $mode;\n\n\t\tif ( $this->hierarchical_display ) {\n\t\t\tif ( 0 === $this->current_level && (int) $post->post_parent > 0 ) {\n\t\t\t\t// Sent level 0 by accident, by default, or because we don't know the actual level.\n\t\t\t\t$find_main_page = (int) $post->post_parent;\n\t\t\t\twhile ( $find_main_page > 0 ) {\n\t\t\t\t\t$parent = get_post( $find_main_page );\n\n\t\t\t\t\tif ( is_null( $parent ) ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->current_level++;\n\t\t\t\t\t$find_main_page = (int) $parent->post_parent;\n\n\t\t\t\t\tif ( ! isset( $parent_name ) ) {\n\t\t\t\t\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t\t\t\t\t$parent_name = apply_filters( 'the_title', $parent->post_title, $parent->ID );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$can_edit_post = current_user_can( 'edit_post', $post->ID );\n\n\t\tif ( $can_edit_post && $post->post_status != 'trash' ) {\n\t\t\t$lock_holder = wp_check_post_lock( $post->ID );\n\n\t\t\tif ( $lock_holder ) {\n\t\t\t\t$lock_holder = get_userdata( $lock_holder );\n\t\t\t\t$locked_avatar = get_avatar( $lock_holder->ID, 18 );\n\t\t\t\t$locked_text = esc_html( sprintf( __( '%s is currently editing' ), $lock_holder->display_name ) );\n\t\t\t} else {\n\t\t\t\t$locked_avatar = $locked_text = '';\n\t\t\t}\n\n\t\t\techo '<div class=\"locked-info\"><span class=\"locked-avatar\">' . $locked_avatar . '</span> <span class=\"locked-text\">' . $locked_text . \"</span></div>\\n\";\n\t\t}\n\n\t\t$pad = str_repeat( '&#8212; ', $this->current_level );\n\t\techo \"<strong>\";\n\n\t\t$format = get_post_format( $post->ID );\n\t\tif ( $format ) {\n\t\t\t$label = get_post_format_string( $format );\n\n\t\t\t$format_class = 'post-state-format post-format-icon post-format-' . $format;\n\n\t\t\t$format_args = array(\n\t\t\t\t'post_format' => $format,\n\t\t\t\t'post_type' => $post->post_type\n\t\t\t);\n\n\t\t\techo $this->get_edit_link( $format_args, $label . ':', $format_class );\n\t\t}\n\n\t\t$title = _draft_or_post_title();\n\n\t\tif ( $can_edit_post && $post->post_status != 'trash' ) {\n\t\t\tprintf(\n\t\t\t\t'<a class=\"row-title\" href=\"%s\" aria-label=\"%s\">%s%s</a>',\n\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t/* translators: %s: post title */\n\t\t\t\tesc_attr( sprintf( __( '&#8220;%s&#8221; (Edit)' ), $title ) ),\n\t\t\t\t$pad,\n\t\t\t\t$title\n\t\t\t);\n\t\t} else {\n\t\t\techo $pad . $title;\n\t\t}\n\t\t_post_states( $post );\n\n\t\tif ( isset( $parent_name ) ) {\n\t\t\t$post_type_object = get_post_type_object( $post->post_type );\n\t\t\techo ' | ' . $post_type_object->labels->parent_item_colon . ' ' . esc_html( $parent_name );\n\t\t}\n\t\techo \"</strong>\\n\";\n\n\t\tif ( ! is_post_type_hierarchical( $this->screen->post_type ) && 'excerpt' === $mode && current_user_can( 'read_post', $post->ID ) ) {\n\t\t\tthe_excerpt();\n\t\t}\n\n\t\tget_inline_data( $post );\n\t}\n\n\t/**\n\t * Handles the post date column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @global string $mode\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_date( $post ) {\n\t\tglobal $mode;\n\n\t\tif ( '0000-00-00 00:00:00' === $post->post_date ) {\n\t\t\t$t_time = $h_time = __( 'Unpublished' );\n\t\t\t$time_diff = 0;\n\t\t} else {\n\t\t\t$t_time = get_the_time( __( 'Y/m/d g:i:s a' ) );\n\t\t\t$m_time = $post->post_date;\n\t\t\t$time = get_post_time( 'G', true, $post );\n\n\t\t\t$time_diff = time() - $time;\n\n\t\t\tif ( $time_diff > 0 && $time_diff < DAY_IN_SECONDS ) {\n\t\t\t\t$h_time = sprintf( __( '%s ago' ), human_time_diff( $time ) );\n\t\t\t} else {\n\t\t\t\t$h_time = mysql2date( __( 'Y/m/d' ), $m_time );\n\t\t\t}\n\t\t}\n\n\t\tif ( 'publish' === $post->post_status ) {\n\t\t\t_e( 'Published' );\n\t\t} elseif ( 'future' === $post->post_status ) {\n\t\t\tif ( $time_diff > 0 ) {\n\t\t\t\techo '<strong class=\"error-message\">' . __( 'Missed schedule' ) . '</strong>';\n\t\t\t} else {\n\t\t\t\t_e( 'Scheduled' );\n\t\t\t}\n\t\t} else {\n\t\t\t_e( 'Last Modified' );\n\t\t}\n\t\techo '<br />';\n\t\tif ( 'excerpt' === $mode ) {\n\t\t\t/**\n\t\t\t * Filters the published time of the post.\n\t\t\t *\n\t\t\t * If `$mode` equals 'excerpt', the published time and date are both displayed.\n\t\t\t * If `$mode` equals 'list' (default), the publish date is displayed, with the\n\t\t\t * time and date together available as an abbreviation definition.\n\t\t\t *\n\t\t\t * @since 2.5.1\n\t\t\t *\n\t\t\t * @param string  $t_time      The published time.\n\t\t\t * @param WP_Post $post        Post object.\n\t\t\t * @param string  $column_name The column name.\n\t\t\t * @param string  $mode        The list display mode ('excerpt' or 'list').\n\t\t\t */\n\t\t\techo apply_filters( 'post_date_column_time', $t_time, $post, 'date', $mode );\n\t\t} else {\n\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-posts-list-table.php */\n\t\t\techo '<abbr title=\"' . $t_time . '\">' . apply_filters( 'post_date_column_time', $h_time, $post, 'date', $mode ) . '</abbr>';\n\t\t}\n\t}\n\n\t/**\n\t * Handles the comments column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_comments( $post ) {\n\t\t?>\n\t\t<div class=\"post-com-count-wrapper\">\n\t\t<?php\n\t\t\t$pending_comments = isset( $this->comment_pending_count[$post->ID] ) ? $this->comment_pending_count[$post->ID] : 0;\n\n\t\t\t$this->comments_bubble( $post->ID, $pending_comments );\n\t\t?>\n\t\t</div>\n\t\t<?php\n\t}\n\n\t/**\n\t * Handles the post author column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_author( $post ) {\n\t\t$args = array(\n\t\t\t'post_type' => $post->post_type,\n\t\t\t'author' => get_the_author_meta( 'ID' )\n\t\t);\n\t\techo $this->get_edit_link( $args, get_the_author() );\n\t}\n\n\t/**\n\t * Handles the default column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post        The current WP_Post object.\n\t * @param string  $column_name The current column name.\n\t */\n\tpublic function column_default( $post, $column_name ) {\n\t\tif ( 'categories' === $column_name ) {\n\t\t\t$taxonomy = 'category';\n\t\t} elseif ( 'tags' === $column_name ) {\n\t\t\t$taxonomy = 'post_tag';\n\t\t} elseif ( 0 === strpos( $column_name, 'taxonomy-' ) ) {\n\t\t\t$taxonomy = substr( $column_name, 9 );\n\t\t} else {\n\t\t\t$taxonomy = false;\n\t\t}\n\t\tif ( $taxonomy ) {\n\t\t\t$taxonomy_object = get_taxonomy( $taxonomy );\n\t\t\t$terms = get_the_terms( $post->ID, $taxonomy );\n\t\t\tif ( is_array( $terms ) ) {\n\t\t\t\t$out = array();\n\t\t\t\tforeach ( $terms as $t ) {\n\t\t\t\t\t$posts_in_term_qv = array();\n\t\t\t\t\tif ( 'post' != $post->post_type ) {\n\t\t\t\t\t\t$posts_in_term_qv['post_type'] = $post->post_type;\n\t\t\t\t\t}\n\t\t\t\t\tif ( $taxonomy_object->query_var ) {\n\t\t\t\t\t\t$posts_in_term_qv[ $taxonomy_object->query_var ] = $t->slug;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$posts_in_term_qv['taxonomy'] = $taxonomy;\n\t\t\t\t\t\t$posts_in_term_qv['term'] = $t->slug;\n\t\t\t\t\t}\n\n\t\t\t\t\t$label = esc_html( sanitize_term_field( 'name', $t->name, $t->term_id, $taxonomy, 'display' ) );\n\t\t\t\t\t$out[] = $this->get_edit_link( $posts_in_term_qv, $label );\n\t\t\t\t}\n\t\t\t\t/* translators: used between list items, there is a space after the comma */\n\t\t\t\techo join( __( ', ' ), $out );\n\t\t\t} else {\n\t\t\t\techo '<span aria-hidden=\"true\">&#8212;</span><span class=\"screen-reader-text\">' . $taxonomy_object->labels->no_terms . '</span>';\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif ( is_post_type_hierarchical( $post->post_type ) ) {\n\n\t\t\t/**\n\t\t\t * Fires in each custom column on the Posts list table.\n\t\t\t *\n\t\t\t * This hook only fires if the current post type is hierarchical,\n\t\t\t * such as pages.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $column_name The name of the column to display.\n\t\t\t * @param int    $post_id     The current post ID.\n\t\t\t */\n\t\t\tdo_action( 'manage_pages_custom_column', $column_name, $post->ID );\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Fires in each custom column in the Posts list table.\n\t\t\t *\n\t\t\t * This hook only fires if the current post type is non-hierarchical,\n\t\t\t * such as posts.\n\t\t\t *\n\t\t\t * @since 1.5.0\n\t\t\t *\n\t\t\t * @param string $column_name The name of the column to display.\n\t\t\t * @param int    $post_id     The current post ID.\n\t\t\t */\n\t\t\tdo_action( 'manage_posts_custom_column', $column_name, $post->ID );\n\t\t}\n\n\t\t/**\n\t\t * Fires for each custom column of a specific post type in the Posts list table.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$post->post_type`, refers to the post type.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param string $column_name The name of the column to display.\n\t\t * @param int    $post_id     The current post ID.\n\t\t */\n\t\tdo_action( \"manage_{$post->post_type}_posts_custom_column\", $column_name, $post->ID );\n\t}\n\n\t/**\n\t * @global WP_Post $post\n\t *\n\t * @param int|WP_Post $post\n\t * @param int         $level\n\t */\n\tpublic function single_row( $post, $level = 0 ) {\n\t\t$global_post = get_post();\n\n\t\t$post = get_post( $post );\n\t\t$this->current_level = $level;\n\n\t\t$GLOBALS['post'] = $post;\n\t\tsetup_postdata( $post );\n\n\t\t$classes = 'iedit author-' . ( get_current_user_id() == $post->post_author ? 'self' : 'other' );\n\n\t\t$lock_holder = wp_check_post_lock( $post->ID );\n\t\tif ( $lock_holder ) {\n\t\t\t$classes .= ' wp-locked';\n\t\t}\n\n\t\tif ( $post->post_parent ) {\n\t\t    $count = count( get_post_ancestors( $post->ID ) );\n\t\t    $classes .= ' level-'. $count;\n\t\t} else {\n\t\t    $classes .= ' level-0';\n\t\t}\n\t?>\n\t\t<tr id=\"post-<?php echo $post->ID; ?>\" class=\"<?php echo implode( ' ', get_post_class( $classes, $post->ID ) ); ?>\">\n\t\t\t<?php $this->single_row_columns( $post ); ?>\n\t\t</tr>\n\t<?php\n\t\t$GLOBALS['post'] = $global_post;\n\t}\n\n\t/**\n\t * Gets the name of the default primary column.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @return string Name of the default primary column, in this case, 'title'.\n\t */\n\tprotected function get_default_primary_column_name() {\n\t\treturn 'title';\n\t}\n\n\t/**\n\t * Generates and displays row action links.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param object $post        Post being acted upon.\n\t * @param string $column_name Current column name.\n\t * @param string $primary     Primary column name.\n\t * @return string Row actions output for posts.\n\t */\n\tprotected function handle_row_actions( $post, $column_name, $primary ) {\n\t\tif ( $primary !== $column_name ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$post_type_object = get_post_type_object( $post->post_type );\n\t\t$can_edit_post = current_user_can( 'edit_post', $post->ID );\n\t\t$actions = array();\n\t\t$title = _draft_or_post_title();\n\n\t\tif ( $can_edit_post && 'trash' != $post->post_status ) {\n\t\t\t$actions['edit'] = sprintf(\n\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t/* translators: %s: post title */\n\t\t\t\tesc_attr( sprintf( __( 'Edit &#8220;%s&#8221;' ), $title ) ),\n\t\t\t\t__( 'Edit' )\n\t\t\t);\n\t\t\t$actions['inline hide-if-no-js'] = sprintf(\n\t\t\t\t'<a href=\"#\" class=\"editinline\" aria-label=\"%s\">%s</a>',\n\t\t\t\t/* translators: %s: post title */\n\t\t\t\tesc_attr( sprintf( __( 'Quick edit &#8220;%s&#8221; inline' ), $title ) ),\n\t\t\t\t__( 'Quick&nbsp;Edit' )\n\t\t\t);\n\t\t}\n\n\t\tif ( current_user_can( 'delete_post', $post->ID ) ) {\n\t\t\tif ( 'trash' === $post->post_status ) {\n\t\t\t\t$actions['untrash'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\twp_nonce_url( admin_url( sprintf( $post_type_object->_edit_link . '&amp;action=untrash', $post->ID ) ), 'untrash-post_' . $post->ID ),\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Restore &#8220;%s&#8221; from the Trash' ), $title ) ),\n\t\t\t\t\t__( 'Restore' )\n\t\t\t\t);\n\t\t\t} elseif ( EMPTY_TRASH_DAYS ) {\n\t\t\t\t$actions['trash'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_delete_post_link( $post->ID ),\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Move &#8220;%s&#8221; to the Trash' ), $title ) ),\n\t\t\t\t\t_x( 'Trash', 'verb' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( 'trash' === $post->post_status || ! EMPTY_TRASH_DAYS ) {\n\t\t\t\t$actions['delete'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_delete_post_link( $post->ID, '', true ),\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Delete &#8220;%s&#8221; permanently' ), $title ) ),\n\t\t\t\t\t__( 'Delete Permanently' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif ( is_post_type_viewable( $post_type_object ) ) {\n\t\t\tif ( in_array( $post->post_status, array( 'pending', 'draft', 'future' ) ) ) {\n\t\t\t\tif ( $can_edit_post ) {\n\t\t\t\t\t$preview_link = get_preview_post_link( $post );\n\t\t\t\t\t$actions['view'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" rel=\"permalink\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\tesc_url( $preview_link ),\n\t\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Preview &#8220;%s&#8221;' ), $title ) ),\n\t\t\t\t\t\t__( 'Preview' )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} elseif ( 'trash' != $post->post_status ) {\n\t\t\t\t$actions['view'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" rel=\"permalink\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_permalink( $post->ID ),\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\tesc_attr( sprintf( __( 'View &#8220;%s&#8221;' ), $title ) ),\n\t\t\t\t\t__( 'View' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif ( is_post_type_hierarchical( $post->post_type ) ) {\n\n\t\t\t/**\n\t\t\t * Filters the array of row action links on the Pages list table.\n\t\t\t *\n\t\t\t * The filter is evaluated only for hierarchical post types.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param array $actions An array of row action links. Defaults are\n\t\t\t *                         'Edit', 'Quick Edit', 'Restore, 'Trash',\n\t\t\t *                         'Delete Permanently', 'Preview', and 'View'.\n\t\t\t * @param WP_Post $post The post object.\n\t\t\t */\n\t\t\t$actions = apply_filters( 'page_row_actions', $actions, $post );\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Filters the array of row action links on the Posts list table.\n\t\t\t *\n\t\t\t * The filter is evaluated only for non-hierarchical post types.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param array $actions An array of row action links. Defaults are\n\t\t\t *                         'Edit', 'Quick Edit', 'Restore, 'Trash',\n\t\t\t *                         'Delete Permanently', 'Preview', and 'View'.\n\t\t\t * @param WP_Post $post The post object.\n\t\t\t */\n\t\t\t$actions = apply_filters( 'post_row_actions', $actions, $post );\n\t\t}\n\n\t\treturn $this->row_actions( $actions );\n\t}\n\n\t/**\n\t * Outputs the hidden row displayed when inline editing\n\t *\n\t * @since 3.1.0\n\t *\n\t * @global string $mode\n\t */\n\tpublic function inline_edit() {\n\t\tglobal $mode;\n\n\t\t$screen = $this->screen;\n\n\t\t$post = get_default_post_to_edit( $screen->post_type );\n\t\t$post_type_object = get_post_type_object( $screen->post_type );\n\n\t\t$taxonomy_names = get_object_taxonomies( $screen->post_type );\n\t\t$hierarchical_taxonomies = array();\n\t\t$flat_taxonomies = array();\n\t\tforeach ( $taxonomy_names as $taxonomy_name ) {\n\n\t\t\t$taxonomy = get_taxonomy( $taxonomy_name );\n\n\t\t\t$show_in_quick_edit = $taxonomy->show_in_quick_edit;\n\n\t\t\t/**\n\t\t\t * Filters whether the current taxonomy should be shown in the Quick Edit panel.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param bool   $show_in_quick_edit Whether to show the current taxonomy in Quick Edit.\n\t\t\t * @param string $taxonomy_name      Taxonomy name.\n\t\t\t * @param string $post_type          Post type of current Quick Edit post.\n\t\t\t */\n\t\t\tif ( ! apply_filters( 'quick_edit_show_taxonomy', $show_in_quick_edit, $taxonomy_name, $screen->post_type ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( $taxonomy->hierarchical )\n\t\t\t\t$hierarchical_taxonomies[] = $taxonomy;\n\t\t\telse\n\t\t\t\t$flat_taxonomies[] = $taxonomy;\n\t\t}\n\n\t\t$m = ( isset( $mode ) && 'excerpt' === $mode ) ? 'excerpt' : 'list';\n\t\t$can_publish = current_user_can( $post_type_object->cap->publish_posts );\n\t\t$core_columns = array( 'cb' => true, 'date' => true, 'title' => true, 'categories' => true, 'tags' => true, 'comments' => true, 'author' => true );\n\n\t?>\n\n\t<form method=\"get\"><table style=\"display: none\"><tbody id=\"inlineedit\">\n\t\t<?php\n\t\t$hclass = count( $hierarchical_taxonomies ) ? 'post' : 'page';\n\t\t$bulk = 0;\n\t\twhile ( $bulk < 2 ) { ?>\n\n\t\t<tr id=\"<?php echo $bulk ? 'bulk-edit' : 'inline-edit'; ?>\" class=\"inline-edit-row inline-edit-row-<?php echo \"$hclass inline-edit-\" . $screen->post_type;\n\t\t\techo $bulk ? \" bulk-edit-row bulk-edit-row-$hclass bulk-edit-{$screen->post_type}\" : \" quick-edit-row quick-edit-row-$hclass inline-edit-{$screen->post_type}\";\n\t\t?>\" style=\"display: none\"><td colspan=\"<?php echo $this->get_column_count(); ?>\" class=\"colspanchange\">\n\n\t\t<fieldset class=\"inline-edit-col-left\">\n\t\t\t<legend class=\"inline-edit-legend\"><?php echo $bulk ? __( 'Bulk Edit' ) : __( 'Quick Edit' ); ?></legend>\n\t\t\t<div class=\"inline-edit-col\">\n\t<?php\n\n\tif ( post_type_supports( $screen->post_type, 'title' ) ) :\n\t\tif ( $bulk ) : ?>\n\t\t\t<div id=\"bulk-title-div\">\n\t\t\t\t<div id=\"bulk-titles\"></div>\n\t\t\t</div>\n\n\t<?php else : // $bulk ?>\n\n\t\t\t<label>\n\t\t\t\t<span class=\"title\"><?php _e( 'Title' ); ?></span>\n\t\t\t\t<span class=\"input-text-wrap\"><input type=\"text\" name=\"post_title\" class=\"ptitle\" value=\"\" /></span>\n\t\t\t</label>\n\n\t\t\t<label>\n\t\t\t\t<span class=\"title\"><?php _e( 'Slug' ); ?></span>\n\t\t\t\t<span class=\"input-text-wrap\"><input type=\"text\" name=\"post_name\" value=\"\" /></span>\n\t\t\t</label>\n\n\t<?php endif; // $bulk\n\tendif; // post_type_supports title ?>\n\n\t<?php if ( !$bulk ) : ?>\n\t\t\t<fieldset class=\"inline-edit-date\">\n\t\t\t<legend><span class=\"title\"><?php _e( 'Date' ); ?></span></legend>\n\t\t\t\t<?php touch_time( 1, 1, 0, 1 ); ?>\n\t\t\t</fieldset>\n\t\t\t<br class=\"clear\" />\n\t<?php endif; // $bulk\n\n\t\tif ( post_type_supports( $screen->post_type, 'author' ) ) :\n\t\t\t$authors_dropdown = '';\n\n\t\t\tif ( current_user_can( $post_type_object->cap->edit_others_posts ) ) :\n\t\t\t\t$users_opt = array(\n\t\t\t\t\t'hide_if_only_one_author' => false,\n\t\t\t\t\t'who' => 'authors',\n\t\t\t\t\t'name' => 'post_author',\n\t\t\t\t\t'class'=> 'authors',\n\t\t\t\t\t'multi' => 1,\n\t\t\t\t\t'echo' => 0,\n\t\t\t\t\t'show' => 'display_name_with_login',\n\t\t\t\t);\n\t\t\t\tif ( $bulk )\n\t\t\t\t\t$users_opt['show_option_none'] = __( '&mdash; No Change &mdash;' );\n\n\t\t\t\tif ( $authors = wp_dropdown_users( $users_opt ) ) :\n\t\t\t\t\t$authors_dropdown  = '<label class=\"inline-edit-author\">';\n\t\t\t\t\t$authors_dropdown .= '<span class=\"title\">' . __( 'Author' ) . '</span>';\n\t\t\t\t\t$authors_dropdown .= $authors;\n\t\t\t\t\t$authors_dropdown .= '</label>';\n\t\t\t\tendif;\n\t\t\tendif; // authors\n\t?>\n\n\t<?php if ( !$bulk ) echo $authors_dropdown;\n\tendif; // post_type_supports author\n\n\tif ( !$bulk && $can_publish ) :\n\t?>\n\n\t\t\t<div class=\"inline-edit-group wp-clearfix\">\n\t\t\t\t<label class=\"alignleft\">\n\t\t\t\t\t<span class=\"title\"><?php _e( 'Password' ); ?></span>\n\t\t\t\t\t<span class=\"input-text-wrap\"><input type=\"text\" name=\"post_password\" class=\"inline-edit-password-input\" value=\"\" /></span>\n\t\t\t\t</label>\n\n\t\t\t\t<em class=\"alignleft inline-edit-or\">\n\t\t\t\t\t<?php\n\t\t\t\t\t/* translators: Between password field and private checkbox on post quick edit interface */\n\t\t\t\t\t_e( '&ndash;OR&ndash;' );\n\t\t\t\t\t?>\n\t\t\t\t</em>\n\t\t\t\t<label class=\"alignleft inline-edit-private\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"keep_private\" value=\"private\" />\n\t\t\t\t\t<span class=\"checkbox-title\"><?php _e( 'Private' ); ?></span>\n\t\t\t\t</label>\n\t\t\t</div>\n\n\t<?php endif; ?>\n\n\t\t</div></fieldset>\n\n\t<?php if ( count( $hierarchical_taxonomies ) && !$bulk ) : ?>\n\n\t\t<fieldset class=\"inline-edit-col-center inline-edit-categories\"><div class=\"inline-edit-col\">\n\n\t<?php foreach ( $hierarchical_taxonomies as $taxonomy ) : ?>\n\n\t\t\t<span class=\"title inline-edit-categories-label\"><?php echo esc_html( $taxonomy->labels->name ) ?></span>\n\t\t\t<input type=\"hidden\" name=\"<?php echo ( $taxonomy->name === 'category' ) ? 'post_category[]' : 'tax_input[' . esc_attr( $taxonomy->name ) . '][]'; ?>\" value=\"0\" />\n\t\t\t<ul class=\"cat-checklist <?php echo esc_attr( $taxonomy->name )?>-checklist\">\n\t\t\t\t<?php wp_terms_checklist( null, array( 'taxonomy' => $taxonomy->name ) ) ?>\n\t\t\t</ul>\n\n\t<?php endforeach; //$hierarchical_taxonomies as $taxonomy ?>\n\n\t\t</div></fieldset>\n\n\t<?php endif; // count( $hierarchical_taxonomies ) && !$bulk ?>\n\n\t\t<fieldset class=\"inline-edit-col-right\"><div class=\"inline-edit-col\">\n\n\t<?php\n\t\tif ( post_type_supports( $screen->post_type, 'author' ) && $bulk )\n\t\t\techo $authors_dropdown;\n\n\t\tif ( post_type_supports( $screen->post_type, 'page-attributes' ) ) :\n\n\t\t\tif ( $post_type_object->hierarchical ) :\n\t\t?>\n\t\t\t<label>\n\t\t\t\t<span class=\"title\"><?php _e( 'Parent' ); ?></span>\n\t<?php\n\t\t$dropdown_args = array(\n\t\t\t'post_type'         => $post_type_object->name,\n\t\t\t'selected'          => $post->post_parent,\n\t\t\t'name'              => 'post_parent',\n\t\t\t'show_option_none'  => __( 'Main Page (no parent)' ),\n\t\t\t'option_none_value' => 0,\n\t\t\t'sort_column'       => 'menu_order, post_title',\n\t\t);\n\n\t\tif ( $bulk )\n\t\t\t$dropdown_args['show_option_no_change'] =  __( '&mdash; No Change &mdash;' );\n\n\t\t/**\n\t\t * Filters the arguments used to generate the Quick Edit page-parent drop-down.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @see wp_dropdown_pages()\n\t\t *\n\t\t * @param array $dropdown_args An array of arguments.\n\t\t */\n\t\t$dropdown_args = apply_filters( 'quick_edit_dropdown_pages_args', $dropdown_args );\n\n\t\twp_dropdown_pages( $dropdown_args );\n\t?>\n\t\t\t</label>\n\n\t<?php\n\t\t\tendif; // hierarchical\n\n\t\t\tif ( !$bulk ) : ?>\n\n\t\t\t<label>\n\t\t\t\t<span class=\"title\"><?php _e( 'Order' ); ?></span>\n\t\t\t\t<span class=\"input-text-wrap\"><input type=\"text\" name=\"menu_order\" class=\"inline-edit-menu-order-input\" value=\"<?php echo $post->menu_order ?>\" /></span>\n\t\t\t</label>\n\n\t<?php\n\t\t\tendif; // !$bulk\n\t\tendif; // page-attributes\n\t?>\n\n\t<?php if ( 0 < count( get_page_templates( null, $screen->post_type ) ) ) : ?>\n\t\t<label>\n\t\t\t<span class=\"title\"><?php _e( 'Template' ); ?></span>\n\t\t\t<select name=\"page_template\">\n<?php\tif ( $bulk ) : ?>\n\t\t\t\t<option value=\"-1\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n<?php\tendif; // $bulk ?>\n                <?php\n\t\t\t\t/** This filter is documented in wp-admin/includes/meta-boxes.php */\n\t\t\t\t$default_title = apply_filters( 'default_page_template_title',  __( 'Default Template' ), 'quick-edit' );\n                ?>\n\t\t\t\t<option value=\"default\"><?php echo esc_html( $default_title ); ?></option>\n\t\t\t\t<?php page_template_dropdown( '', $screen->post_type ) ?>\n\t\t\t</select>\n\t\t</label>\n\t<?php endif; ?>\n\n\t<?php if ( count( $flat_taxonomies ) && !$bulk ) : ?>\n\n\t<?php foreach ( $flat_taxonomies as $taxonomy ) : ?>\n\t\t<?php if ( current_user_can( $taxonomy->cap->assign_terms ) ) :\n\t\t\t$taxonomy_name = esc_attr( $taxonomy->name );\n\n\t\t\t?>\n\t\t\t<label class=\"inline-edit-tags\">\n\t\t\t\t<span class=\"title\"><?php echo esc_html( $taxonomy->labels->name ) ?></span>\n\t\t\t\t<textarea data-wp-taxonomy=\"<?php echo $taxonomy_name; ?>\" cols=\"22\" rows=\"1\" name=\"tax_input[<?php echo $taxonomy_name; ?>]\" class=\"tax_input_<?php echo $taxonomy_name; ?>\"></textarea>\n\t\t\t</label>\n\t\t<?php endif; ?>\n\n\t<?php endforeach; //$flat_taxonomies as $taxonomy ?>\n\n\t<?php endif; // count( $flat_taxonomies ) && !$bulk  ?>\n\n\t<?php if ( post_type_supports( $screen->post_type, 'comments' ) || post_type_supports( $screen->post_type, 'trackbacks' ) ) :\n\t\tif ( $bulk ) : ?>\n\n\t\t\t<div class=\"inline-edit-group wp-clearfix\">\n\t\t<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>\n\t\t\t<label class=\"alignleft\">\n\t\t\t\t<span class=\"title\"><?php _e( 'Comments' ); ?></span>\n\t\t\t\t<select name=\"comment_status\">\n\t\t\t\t\t<option value=\"\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t\t\t\t\t<option value=\"open\"><?php _e( 'Allow' ); ?></option>\n\t\t\t\t\t<option value=\"closed\"><?php _e( 'Do not allow' ); ?></option>\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>\n\t\t\t<label class=\"alignright\">\n\t\t\t\t<span class=\"title\"><?php _e( 'Pings' ); ?></span>\n\t\t\t\t<select name=\"ping_status\">\n\t\t\t\t\t<option value=\"\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t\t\t\t\t<option value=\"open\"><?php _e( 'Allow' ); ?></option>\n\t\t\t\t\t<option value=\"closed\"><?php _e( 'Do not allow' ); ?></option>\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t<?php endif; ?>\n\t\t\t</div>\n\n\t<?php else : // $bulk ?>\n\n\t\t\t<div class=\"inline-edit-group wp-clearfix\">\n\t\t\t<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>\n\t\t\t\t<label class=\"alignleft\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"comment_status\" value=\"open\" />\n\t\t\t\t\t<span class=\"checkbox-title\"><?php _e( 'Allow Comments' ); ?></span>\n\t\t\t\t</label>\n\t\t\t<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>\n\t\t\t\t<label class=\"alignleft\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"ping_status\" value=\"open\" />\n\t\t\t\t\t<span class=\"checkbox-title\"><?php _e( 'Allow Pings' ); ?></span>\n\t\t\t\t</label>\n\t\t\t<?php endif; ?>\n\t\t\t</div>\n\n\t<?php endif; // $bulk\n\tendif; // post_type_supports comments or pings ?>\n\n\t\t\t<div class=\"inline-edit-group wp-clearfix\">\n\t\t\t\t<label class=\"inline-edit-status alignleft\">\n\t\t\t\t\t<span class=\"title\"><?php _e( 'Status' ); ?></span>\n\t\t\t\t\t<select name=\"_status\">\n\t<?php if ( $bulk ) : ?>\n\t\t\t\t\t\t<option value=\"-1\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t<?php endif; // $bulk ?>\n\t\t\t\t\t<?php if ( $can_publish ) : // Contributors only get \"Unpublished\" and \"Pending Review\" ?>\n\t\t\t\t\t\t<option value=\"publish\"><?php _e( 'Published' ); ?></option>\n\t\t\t\t\t\t<option value=\"future\"><?php _e( 'Scheduled' ); ?></option>\n\t<?php if ( $bulk ) : ?>\n\t\t\t\t\t\t<option value=\"private\"><?php _e( 'Private' ) ?></option>\n\t<?php endif; // $bulk ?>\n\t\t\t\t\t<?php endif; ?>\n\t\t\t\t\t\t<option value=\"pending\"><?php _e( 'Pending Review' ); ?></option>\n\t\t\t\t\t\t<option value=\"draft\"><?php _e( 'Draft' ); ?></option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\n\t<?php if ( 'post' === $screen->post_type && $can_publish && current_user_can( $post_type_object->cap->edit_others_posts ) ) : ?>\n\n\t<?php\tif ( $bulk ) : ?>\n\n\t\t\t\t<label class=\"alignright\">\n\t\t\t\t\t<span class=\"title\"><?php _e( 'Sticky' ); ?></span>\n\t\t\t\t\t<select name=\"sticky\">\n\t\t\t\t\t\t<option value=\"-1\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t\t\t\t\t\t<option value=\"sticky\"><?php _e( 'Sticky' ); ?></option>\n\t\t\t\t\t\t<option value=\"unsticky\"><?php _e( 'Not Sticky' ); ?></option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\n\t<?php\telse : // $bulk ?>\n\n\t\t\t\t<label class=\"alignleft\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"sticky\" value=\"sticky\" />\n\t\t\t\t\t<span class=\"checkbox-title\"><?php _e( 'Make this post sticky' ); ?></span>\n\t\t\t\t</label>\n\n\t<?php\tendif; // $bulk ?>\n\n\t<?php endif; // 'post' && $can_publish && current_user_can( 'edit_others_cap' ) ?>\n\n\t\t\t</div>\n\n\t<?php\n\n\tif ( $bulk && current_theme_supports( 'post-formats' ) && post_type_supports( $screen->post_type, 'post-formats' ) ) {\n\t\t$post_formats = get_theme_support( 'post-formats' );\n\n\t\t?>\n\t\t<label class=\"alignleft\">\n\t\t<span class=\"title\"><?php _ex( 'Format', 'post format' ); ?></span>\n\t\t<select name=\"post_format\">\n\t\t\t<option value=\"-1\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t\t\t<option value=\"0\"><?php echo get_post_format_string( 'standard' ); ?></option>\n\t\t\t<?php\n\t\t\tif ( is_array( $post_formats[0] ) ) {\n\t\t\t\tforeach ( $post_formats[0] as $format ) {\n\t\t\t\t\t?>\n\t\t\t\t\t<option value=\"<?php echo esc_attr( $format ); ?>\"><?php echo esc_html( get_post_format_string( $format ) ); ?></option>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t</select></label>\n\t<?php\n\n\t}\n\n\t?>\n\n\t\t</div></fieldset>\n\n\t<?php\n\t\tlist( $columns ) = $this->get_column_info();\n\n\t\tforeach ( $columns as $column_name => $column_display_name ) {\n\t\t\tif ( isset( $core_columns[$column_name] ) )\n\t\t\t\tcontinue;\n\n\t\t\tif ( $bulk ) {\n\n\t\t\t\t/**\n\t\t\t\t * Fires once for each column in Bulk Edit mode.\n\t\t\t\t *\n\t\t\t\t * @since 2.7.0\n\t\t\t\t *\n\t\t\t\t * @param string  $column_name Name of the column to edit.\n\t\t\t\t * @param WP_Post $post_type   The post type slug.\n\t\t\t\t */\n\t\t\t\tdo_action( 'bulk_edit_custom_box', $column_name, $screen->post_type );\n\t\t\t} else {\n\n\t\t\t\t/**\n\t\t\t\t * Fires once for each column in Quick Edit mode.\n\t\t\t\t *\n\t\t\t\t * @since 2.7.0\n\t\t\t\t *\n\t\t\t\t * @param string $column_name Name of the column to edit.\n\t\t\t\t * @param string $post_type   The post type slug.\n\t\t\t\t */\n\t\t\t\tdo_action( 'quick_edit_custom_box', $column_name, $screen->post_type );\n\t\t\t}\n\n\t\t}\n\t?>\n\t\t<p class=\"submit inline-edit-save\">\n\t\t\t<button type=\"button\" class=\"button cancel alignleft\"><?php _e( 'Cancel' ); ?></button>\n\t\t\t<?php if ( ! $bulk ) {\n\t\t\t\twp_nonce_field( 'inlineeditnonce', '_inline_edit', false );\n\t\t\t\t?>\n\t\t\t\t<button type=\"button\" class=\"button button-primary save alignright\"><?php _e( 'Update' ); ?></button>\n\t\t\t\t<span class=\"spinner\"></span>\n\t\t\t<?php } else {\n\t\t\t\tsubmit_button( __( 'Update' ), 'primary alignright', 'bulk_edit', false );\n\t\t\t} ?>\n\t\t\t<input type=\"hidden\" name=\"post_view\" value=\"<?php echo esc_attr( $m ); ?>\" />\n\t\t\t<input type=\"hidden\" name=\"screen\" value=\"<?php echo esc_attr( $screen->id ); ?>\" />\n\t\t\t<?php if ( ! $bulk && ! post_type_supports( $screen->post_type, 'author' ) ) { ?>\n\t\t\t\t<input type=\"hidden\" name=\"post_author\" value=\"<?php echo esc_attr( $post->post_author ); ?>\" />\n\t\t\t<?php } ?>\n\t\t\t<span class=\"error\" style=\"display:none\"></span>\n\t\t\t<br class=\"clear\" />\n\t\t</p>\n\t\t</td></tr>\n\t<?php\n\t\t$bulk++;\n\t\t}\n?>\n\t\t</tbody></table></form>\n<?php\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-39954';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * List Table API: WP_Posts_List_Table class\n *\n * @package WordPress\n * @subpackage Administration\n * @since 3.1.0\n */\n\n/**\n * Core class used to implement displaying posts in a list table.\n *\n * @since 3.1.0\n * @access private\n *\n * @see WP_List_Table\n */\nclass WP_Posts_List_Table extends WP_List_Table {\n\n\t/**\n\t * Whether the items should be displayed hierarchically or linearly.\n\t *\n\t * @since 3.1.0\n\t * @var bool\n\t * @access protected\n\t */\n\tprotected $hierarchical_display;\n\n\t/**\n\t * Holds the number of pending comments for each post.\n\t *\n\t * @since 3.1.0\n\t * @var array\n\t * @access protected\n\t */\n\tprotected $comment_pending_count;\n\n\t/**\n\t * Holds the number of posts for this user.\n\t *\n\t * @since 3.1.0\n\t * @var int\n\t * @access private\n\t */\n\tprivate $user_posts_count;\n\n\t/**\n\t * Holds the number of posts which are sticky.\n\t *\n\t * @since 3.1.0\n\t * @var int\n\t * @access private\n\t */\n\tprivate $sticky_posts_count = 0;\n\n\tprivate $is_trash;\n\n\t/**\n\t * Current level for output.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t * @var int\n\t */\n\tprotected $current_level = 0;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 3.1.0\n\t * @access public\n\t *\n\t * @see WP_List_Table::__construct() for more information on default arguments.\n\t *\n\t * @global WP_Post_Type $post_type_object\n\t * @global wpdb         $wpdb\n\t *\n\t * @param array $args An associative array of arguments.\n\t */\n\tpublic function __construct( $args = array() ) {\n\t\tglobal $post_type_object, $wpdb;\n\n\t\tparent::__construct( array(\n\t\t\t'plural' => 'posts',\n\t\t\t'screen' => isset( $args['screen'] ) ? $args['screen'] : null,\n\t\t) );\n\n\t\t$post_type        = $this->screen->post_type;\n\t\t$post_type_object = get_post_type_object( $post_type );\n\n\t\t$exclude_states   = get_post_stati( array(\n\t\t\t'show_in_admin_all_list' => false,\n\t\t) );\n\t\t$this->user_posts_count = intval( $wpdb->get_var( $wpdb->prepare( \"\n\t\t\tSELECT COUNT( 1 )\n\t\t\tFROM $wpdb->posts\n\t\t\tWHERE post_type = %s\n\t\t\tAND post_status NOT IN ( '\" . implode( \"','\", $exclude_states ) . \"' )\n\t\t\tAND post_author = %d\n\t\t\", $post_type, get_current_user_id() ) ) );\n\n\t\tif ( $this->user_posts_count && ! current_user_can( $post_type_object->cap->edit_others_posts ) && empty( $_REQUEST['post_status'] ) && empty( $_REQUEST['all_posts'] ) && empty( $_REQUEST['author'] ) && empty( $_REQUEST['show_sticky'] ) ) {\n\t\t\t$_GET['author'] = get_current_user_id();\n\t\t}\n\n\t\tif ( 'post' === $post_type && $sticky_posts = get_option( 'sticky_posts' ) ) {\n\t\t\t$sticky_posts = implode( ', ', array_map( 'absint', (array) $sticky_posts ) );\n\t\t\t$this->sticky_posts_count = $wpdb->get_var( $wpdb->prepare( \"SELECT COUNT( 1 ) FROM $wpdb->posts WHERE post_type = %s AND post_status NOT IN ('trash', 'auto-draft') AND ID IN ($sticky_posts)\", $post_type ) );\n\t\t}\n\t}\n\n\t/**\n\t * Sets whether the table layout should be hierarchical or not.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param bool $display Whether the table layout should be hierarchical.\n\t */\n\tpublic function set_hierarchical_display( $display ) {\n\t\t$this->hierarchical_display = $display;\n\t}\n\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function ajax_user_can() {\n\t\treturn current_user_can( get_post_type_object( $this->screen->post_type )->cap->edit_posts );\n\t}\n\n\t/**\n\t *\n\t * @global array    $avail_post_stati\n\t * @global WP_Query $wp_query\n\t * @global int      $per_page\n\t * @global string   $mode\n\t */\n\tpublic function prepare_items() {\n\t\tglobal $avail_post_stati, $wp_query, $per_page, $mode;\n\n\t\t// is going to call wp()\n\t\t$avail_post_stati = wp_edit_posts_query();\n\n\t\t$this->set_hierarchical_display( is_post_type_hierarchical( $this->screen->post_type ) && 'menu_order title' === $wp_query->query['orderby'] );\n\n\t\t$post_type = $this->screen->post_type;\n\t\t$per_page = $this->get_items_per_page( 'edit_' . $post_type . '_per_page' );\n\n\t\t/** This filter is documented in wp-admin/includes/post.php */\n \t\t$per_page = apply_filters( 'edit_posts_per_page', $per_page, $post_type );\n\n\t\tif ( $this->hierarchical_display ) {\n\t\t\t$total_items = $wp_query->post_count;\n\t\t} elseif ( $wp_query->found_posts || $this->get_pagenum() === 1 ) {\n\t\t\t$total_items = $wp_query->found_posts;\n\t\t} else {\n\t\t\t$post_counts = (array) wp_count_posts( $post_type, 'readable' );\n\n\t\t\tif ( isset( $_REQUEST['post_status'] ) && in_array( $_REQUEST['post_status'] , $avail_post_stati ) ) {\n\t\t\t\t$total_items = $post_counts[ $_REQUEST['post_status'] ];\n\t\t\t} elseif ( isset( $_REQUEST['show_sticky'] ) && $_REQUEST['show_sticky'] ) {\n\t\t\t\t$total_items = $this->sticky_posts_count;\n\t\t\t} elseif ( isset( $_GET['author'] ) && $_GET['author'] == get_current_user_id() ) {\n\t\t\t\t$total_items = $this->user_posts_count;\n\t\t\t} else {\n\t\t\t\t$total_items = array_sum( $post_counts );\n\n\t\t\t\t// Subtract post types that are not included in the admin all list.\n\t\t\t\tforeach ( get_post_stati( array( 'show_in_admin_all_list' => false ) ) as $state ) {\n\t\t\t\t\t$total_items -= $post_counts[ $state ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( ! empty( $_REQUEST['mode'] ) ) {\n\t\t\t$mode = $_REQUEST['mode'] === 'excerpt' ? 'excerpt' : 'list';\n\t\t\tset_user_setting( 'posts_list_mode', $mode );\n\t\t} else {\n\t\t\t$mode = get_user_setting( 'posts_list_mode', 'list' );\n\t\t}\n\n\t\t$this->is_trash = isset( $_REQUEST['post_status'] ) && $_REQUEST['post_status'] === 'trash';\n\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $total_items,\n\t\t\t'per_page' => $per_page\n\t\t) );\n\t}\n\n\t/**\n\t *\n\t * @return bool\n\t */\n\tpublic function has_items() {\n\t\treturn have_posts();\n\t}\n\n\t/**\n\t * @access public\n\t */\n\tpublic function no_items() {\n\t\tif ( isset( $_REQUEST['post_status'] ) && 'trash' === $_REQUEST['post_status'] )\n\t\t\techo get_post_type_object( $this->screen->post_type )->labels->not_found_in_trash;\n\t\telse\n\t\t\techo get_post_type_object( $this->screen->post_type )->labels->not_found;\n\t}\n\n\t/**\n\t * Determine if the current view is the \"All\" view.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @return bool Whether the current view is the \"All\" view.\n\t */\n\tprotected function is_base_request() {\n\t\t$vars = $_GET;\n\t\tunset( $vars['paged'] );\n\n\t\tif ( empty( $vars ) ) {\n\t\t\treturn true;\n\t\t} elseif ( 1 === count( $vars ) && ! empty( $vars['post_type'] ) ) {\n\t\t\treturn $this->screen->post_type === $vars['post_type'];\n\t\t}\n\n\t\treturn 1 === count( $vars ) && ! empty( $vars['mode'] );\n\t}\n\n\t/**\n\t * Helper to create links to edit.php with params.\n\t *\n\t * @since 4.4.0\n\t * @access protected\n\t *\n\t * @param array  $args  URL parameters for the link.\n\t * @param string $label Link text.\n\t * @param string $class Optional. Class attribute. Default empty string.\n\t * @return string The formatted link string.\n\t */\n\tprotected function get_edit_link( $args, $label, $class = '' ) {\n\t\t$url = add_query_arg( $args, 'edit.php' );\n\n\t\t$class_html = '';\n\t\tif ( ! empty( $class ) ) {\n\t\t\t $class_html = sprintf(\n\t\t\t\t' class=\"%s\"',\n\t\t\t\tesc_attr( $class )\n\t\t\t);\n\t\t}\n\n\t\treturn sprintf(\n\t\t\t'<a href=\"%s\"%s>%s</a>',\n\t\t\tesc_url( $url ),\n\t\t\t$class_html,\n\t\t\t$label\n\t\t);\n\t}\n\n\t/**\n\t *\n\t * @global array $locked_post_status This seems to be deprecated.\n\t * @global array $avail_post_stati\n\t * @return array\n\t */\n\tprotected function get_views() {\n\t\tglobal $locked_post_status, $avail_post_stati;\n\n\t\t$post_type = $this->screen->post_type;\n\n\t\tif ( !empty($locked_post_status) )\n\t\t\treturn array();\n\n\t\t$status_links = array();\n\t\t$num_posts = wp_count_posts( $post_type, 'readable' );\n\t\t$total_posts = array_sum( (array) $num_posts );\n\t\t$class = '';\n\n\t\t$current_user_id = get_current_user_id();\n\t\t$all_args = array( 'post_type' => $post_type );\n\t\t$mine = '';\n\n\t\t// Subtract post types that are not included in the admin all list.\n\t\tforeach ( get_post_stati( array( 'show_in_admin_all_list' => false ) ) as $state ) {\n\t\t\t$total_posts -= $num_posts->$state;\n\t\t}\n\n\t\tif ( $this->user_posts_count && $this->user_posts_count !== $total_posts ) {\n\t\t\tif ( isset( $_GET['author'] ) && ( $_GET['author'] == $current_user_id ) ) {\n\t\t\t\t$class = 'current';\n\t\t\t}\n\n\t\t\t$mine_args = array(\n\t\t\t\t'post_type' => $post_type,\n\t\t\t\t'author' => $current_user_id\n\t\t\t);\n\n\t\t\t$mine_inner_html = sprintf(\n\t\t\t\t_nx(\n\t\t\t\t\t'Mine <span class=\"count\">(%s)</span>',\n\t\t\t\t\t'Mine <span class=\"count\">(%s)</span>',\n\t\t\t\t\t$this->user_posts_count,\n\t\t\t\t\t'posts'\n\t\t\t\t),\n\t\t\t\tnumber_format_i18n( $this->user_posts_count )\n\t\t\t);\n\n\t\t\t$mine = $this->get_edit_link( $mine_args, $mine_inner_html, $class );\n\n\t\t\t$all_args['all_posts'] = 1;\n\t\t\t$class = '';\n\t\t}\n\n\t\tif ( empty( $class ) && ( $this->is_base_request() || isset( $_REQUEST['all_posts'] ) ) ) {\n\t\t\t$class = 'current';\n\t\t}\n\n\t\t$all_inner_html = sprintf(\n\t\t\t_nx(\n\t\t\t\t'All <span class=\"count\">(%s)</span>',\n\t\t\t\t'All <span class=\"count\">(%s)</span>',\n\t\t\t\t$total_posts,\n\t\t\t\t'posts'\n\t\t\t),\n\t\t\tnumber_format_i18n( $total_posts )\n\t\t);\n\n\t\t$status_links['all'] = $this->get_edit_link( $all_args, $all_inner_html, $class );\n\t\tif ( $mine ) {\n\t\t\t$status_links['mine'] = $mine;\n\t\t}\n\n\t\tforeach ( get_post_stati(array('show_in_admin_status_list' => true), 'objects') as $status ) {\n\t\t\t$class = '';\n\n\t\t\t$status_name = $status->name;\n\n\t\t\tif ( ! in_array( $status_name, $avail_post_stati ) || empty( $num_posts->$status_name ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( isset($_REQUEST['post_status']) && $status_name === $_REQUEST['post_status'] ) {\n\t\t\t\t$class = 'current';\n\t\t\t}\n\n\t\t\t$status_args = array(\n\t\t\t\t'post_status' => $status_name,\n\t\t\t\t'post_type' => $post_type,\n\t\t\t);\n\n\t\t\t$status_label = sprintf(\n\t\t\t\ttranslate_nooped_plural( $status->label_count, $num_posts->$status_name ),\n\t\t\t\tnumber_format_i18n( $num_posts->$status_name )\n\t\t\t);\n\n\t\t\t$status_links[ $status_name ] = $this->get_edit_link( $status_args, $status_label, $class );\n\t\t}\n\n\t\tif ( ! empty( $this->sticky_posts_count ) ) {\n\t\t\t$class = ! empty( $_REQUEST['show_sticky'] ) ? 'current' : '';\n\n\t\t\t$sticky_args = array(\n\t\t\t\t'post_type'\t=> $post_type,\n\t\t\t\t'show_sticky' => 1\n\t\t\t);\n\n\t\t\t$sticky_inner_html = sprintf(\n\t\t\t\t_nx(\n\t\t\t\t\t'Sticky <span class=\"count\">(%s)</span>',\n\t\t\t\t\t'Sticky <span class=\"count\">(%s)</span>',\n\t\t\t\t\t$this->sticky_posts_count,\n\t\t\t\t\t'posts'\n\t\t\t\t),\n\t\t\t\tnumber_format_i18n( $this->sticky_posts_count )\n\t\t\t);\n\n\t\t\t$sticky_link = array(\n\t\t\t\t'sticky' => $this->get_edit_link( $sticky_args, $sticky_inner_html, $class )\n\t\t\t);\n\n\t\t\t// Sticky comes after Publish, or if not listed, after All.\n\t\t\t$split = 1 + array_search( ( isset( $status_links['publish'] ) ? 'publish' : 'all' ), array_keys( $status_links ) );\n\t\t\t$status_links = array_merge( array_slice( $status_links, 0, $split ), $sticky_link, array_slice( $status_links, $split ) );\n\t\t}\n\n\t\treturn $status_links;\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_bulk_actions() {\n\t\t$actions = array();\n\t\t$post_type_obj = get_post_type_object( $this->screen->post_type );\n\n\t\tif ( current_user_can( $post_type_obj->cap->edit_posts ) ) {\n\t\t\tif ( $this->is_trash ) {\n\t\t\t\t$actions['untrash'] = __( 'Restore' );\n\t\t\t} else {\n\t\t\t\t$actions['edit'] = __( 'Edit' );\n\t\t\t}\n\t\t}\n\n\t\tif ( current_user_can( $post_type_obj->cap->delete_posts ) ) {\n\t\t\tif ( $this->is_trash || ! EMPTY_TRASH_DAYS ) {\n\t\t\t\t$actions['delete'] = __( 'Delete Permanently' );\n\t\t\t} else {\n\t\t\t\t$actions['trash'] = __( 'Move to Trash' );\n\t\t\t}\n\t\t}\n\n\t\treturn $actions;\n\t}\n\n\t/**\n\t * Displays a categories drop-down for filtering on the Posts list table.\n\t *\n\t * @since 4.6.0\n\t * @access protected\n\t *\n\t * @global int $cat Currently selected category.\n\t *\n\t * @param string $post_type Post type slug.\n\t */\n\tprotected function categories_dropdown( $post_type ) {\n\t\tglobal $cat;\n\n\t\t/**\n\t\t * Filters whether to remove the 'Categories' drop-down from the post list table.\n\t\t *\n\t\t * @since 4.6.0\n\t\t *\n\t\t * @param bool   $disable   Whether to disable the categories drop-down. Default false.\n\t\t * @param string $post_type Post type slug.\n\t\t */\n\t\tif ( false !== apply_filters( 'disable_categories_dropdown', false, $post_type ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( is_object_in_taxonomy( $post_type, 'category' ) ) {\n\t\t\t$dropdown_options = array(\n\t\t\t\t'show_option_all' => get_taxonomy( 'category' )->labels->all_items,\n\t\t\t\t'hide_empty' => 0,\n\t\t\t\t'hierarchical' => 1,\n\t\t\t\t'show_count' => 0,\n\t\t\t\t'orderby' => 'name',\n\t\t\t\t'selected' => $cat\n\t\t\t);\n\n\t\t\techo '<label class=\"screen-reader-text\" for=\"cat\">' . __( 'Filter by category' ) . '</label>';\n\t\t\twp_dropdown_categories( $dropdown_options );\n\t\t}\n\t}\n\n\t/**\n\t * @param string $which\n\t */\n\tprotected function extra_tablenav( $which ) {\n?>\n\t\t<div class=\"alignleft actions\">\n<?php\n\t\tif ( 'top' === $which && !is_singular() ) {\n\t\t\tob_start();\n\n\t\t\t$this->months_dropdown( $this->screen->post_type );\n\t\t\t$this->categories_dropdown( $this->screen->post_type );\n\n\t\t\t/**\n\t\t\t * Fires before the Filter button on the Posts and Pages list tables.\n\t\t\t *\n\t\t\t * The Filter button allows sorting by date and/or category on the\n\t\t\t * Posts list table, and sorting by date on the Pages list table.\n\t\t\t *\n\t\t\t * @since 2.1.0\n\t\t\t * @since 4.4.0 The `$post_type` parameter was added.\n\t\t\t * @since 4.6.0 The `$which` parameter was added.\n\t\t\t *\n\t\t\t * @param string $post_type The post type slug.\n\t\t\t * @param string $which     The location of the extra table nav markup:\n\t\t\t *                          'top' or 'bottom' for WP_Posts_List_Table,\n\t\t\t *                          'bar' for WP_Media_List_Table.\n\t\t\t */\n\t\t\tdo_action( 'restrict_manage_posts', $this->screen->post_type, $which );\n\n\t\t\t$output = ob_get_clean();\n\n\t\t\tif ( ! empty( $output ) ) {\n\t\t\t\techo $output;\n\t\t\t\tsubmit_button( __( 'Filter' ), '', 'filter_action', false, array( 'id' => 'post-query-submit' ) );\n\t\t\t}\n\t\t}\n\n\t\tif ( $this->is_trash && current_user_can( get_post_type_object( $this->screen->post_type )->cap->edit_others_posts ) ) {\n\t\t\tsubmit_button( __( 'Empty Trash' ), 'apply', 'delete_all', false );\n\t\t}\n?>\n\t\t</div>\n<?php\n\t\t/**\n\t\t * Fires immediately following the closing \"actions\" div in the tablenav for the posts\n\t\t * list table.\n\t\t *\n\t\t * @since 4.4.0\n\t\t *\n\t\t * @param string $which The location of the extra table nav markup: 'top' or 'bottom'.\n\t\t */\n\t\tdo_action( 'manage_posts_extra_tablenav', $which );\n\t}\n\n\t/**\n\t *\n\t * @return string\n\t */\n\tpublic function current_action() {\n\t\tif ( isset( $_REQUEST['delete_all'] ) || isset( $_REQUEST['delete_all2'] ) )\n\t\t\treturn 'delete_all';\n\n\t\treturn parent::current_action();\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_table_classes() {\n\t\treturn array( 'widefat', 'fixed', 'striped', is_post_type_hierarchical( $this->screen->post_type ) ? 'pages' : 'posts' );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tpublic function get_columns() {\n\t\t$post_type = $this->screen->post_type;\n\n\t\t$posts_columns = array();\n\n\t\t$posts_columns['cb'] = '<input type=\"checkbox\" />';\n\n\t\t/* translators: manage posts column name */\n\t\t$posts_columns['title'] = _x( 'Title', 'column name' );\n\n\t\tif ( post_type_supports( $post_type, 'author' ) ) {\n\t\t\t$posts_columns['author'] = __( 'Author' );\n\t\t}\n\n\t\t$taxonomies = get_object_taxonomies( $post_type, 'objects' );\n\t\t$taxonomies = wp_filter_object_list( $taxonomies, array( 'show_admin_column' => true ), 'and', 'name' );\n\n\t\t/**\n\t\t * Filters the taxonomy columns in the Posts list table.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$post_type`, refers to the post\n\t\t * type slug.\n\t\t *\n\t\t * @since 3.5.0\n\t\t *\n\t\t * @param array  $taxonomies Array of taxonomies to show columns for.\n\t\t * @param string $post_type  The post type.\n\t\t */\n\t\t$taxonomies = apply_filters( \"manage_taxonomies_for_{$post_type}_columns\", $taxonomies, $post_type );\n\t\t$taxonomies = array_filter( $taxonomies, 'taxonomy_exists' );\n\n\t\tforeach ( $taxonomies as $taxonomy ) {\n\t\t\tif ( 'category' === $taxonomy )\n\t\t\t\t$column_key = 'categories';\n\t\t\telseif ( 'post_tag' === $taxonomy )\n\t\t\t\t$column_key = 'tags';\n\t\t\telse\n\t\t\t\t$column_key = 'taxonomy-' . $taxonomy;\n\n\t\t\t$posts_columns[ $column_key ] = get_taxonomy( $taxonomy )->labels->name;\n\t\t}\n\n\t\t$post_status = !empty( $_REQUEST['post_status'] ) ? $_REQUEST['post_status'] : 'all';\n\t\tif ( post_type_supports( $post_type, 'comments' ) && !in_array( $post_status, array( 'pending', 'draft', 'future' ) ) )\n\t\t\t$posts_columns['comments'] = '<span class=\"vers comment-grey-bubble\" title=\"' . esc_attr__( 'Comments' ) . '\"><span class=\"screen-reader-text\">' . __( 'Comments' ) . '</span></span>';\n\n\t\t$posts_columns['date'] = __( 'Date' );\n\n\t\tif ( 'page' === $post_type ) {\n\n\t\t\t/**\n\t\t\t * Filters the columns displayed in the Pages list table.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param array $post_columns An array of column names.\n\t\t\t */\n\t\t\t$posts_columns = apply_filters( 'manage_pages_columns', $posts_columns );\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Filters the columns displayed in the Posts list table.\n\t\t\t *\n\t\t\t * @since 1.5.0\n\t\t\t *\n\t\t\t * @param array  $posts_columns An array of column names.\n\t\t\t * @param string $post_type     The post type slug.\n\t\t\t */\n\t\t\t$posts_columns = apply_filters( 'manage_posts_columns', $posts_columns, $post_type );\n\t\t}\n\n\t\t/**\n\t\t * Filters the columns displayed in the Posts list table for a specific post type.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$post_type`, refers to the post type slug.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param array $post_columns An array of column names.\n\t\t */\n\t\treturn apply_filters( \"manage_{$post_type}_posts_columns\", $posts_columns );\n\t}\n\n\t/**\n\t *\n\t * @return array\n\t */\n\tprotected function get_sortable_columns() {\n\t\treturn array(\n\t\t\t'title'    => 'title',\n\t\t\t'parent'   => 'parent',\n\t\t\t'comments' => 'comment_count',\n\t\t\t'date'     => array( 'date', true )\n\t\t);\n\t}\n\n\t/**\n\t * @global WP_Query $wp_query\n\t * @global int $per_page\n\t * @param array $posts\n\t * @param int $level\n\t */\n\tpublic function display_rows( $posts = array(), $level = 0 ) {\n\t\tglobal $wp_query, $per_page;\n\n\t\tif ( empty( $posts ) )\n\t\t\t$posts = $wp_query->posts;\n\n\t\tadd_filter( 'the_title', 'esc_html' );\n\n\t\tif ( $this->hierarchical_display ) {\n\t\t\t$this->_display_rows_hierarchical( $posts, $this->get_pagenum(), $per_page );\n\t\t} else {\n\t\t\t$this->_display_rows( $posts, $level );\n\t\t}\n\t}\n\n\t/**\n\t * @param array $posts\n\t * @param int $level\n\t */\n\tprivate function _display_rows( $posts, $level = 0 ) {\n\t\t// Create array of post IDs.\n\t\t$post_ids = array();\n\n\t\tforeach ( $posts as $a_post )\n\t\t\t$post_ids[] = $a_post->ID;\n\n\t\t$this->comment_pending_count = get_pending_comments_num( $post_ids );\n\n\t\tforeach ( $posts as $post )\n\t\t\t$this->single_row( $post, $level );\n\t}\n\n\t/**\n\t * @global wpdb    $wpdb\n\t * @global WP_Post $post\n\t * @param array $pages\n\t * @param int $pagenum\n\t * @param int $per_page\n\t */\n\tprivate function _display_rows_hierarchical( $pages, $pagenum = 1, $per_page = 20 ) {\n\t\tglobal $wpdb;\n\n\t\t$level = 0;\n\n\t\tif ( ! $pages ) {\n\t\t\t$pages = get_pages( array( 'sort_column' => 'menu_order' ) );\n\n\t\t\tif ( ! $pages )\n\t\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t * Arrange pages into two parts: top level pages and children_pages\n\t\t * children_pages is two dimensional array, eg.\n\t\t * children_pages[10][] contains all sub-pages whose parent is 10.\n\t\t * It only takes O( N ) to arrange this and it takes O( 1 ) for subsequent lookup operations\n\t\t * If searching, ignore hierarchy and treat everything as top level\n\t\t */\n\t\tif ( empty( $_REQUEST['s'] ) ) {\n\n\t\t\t$top_level_pages = array();\n\t\t\t$children_pages = array();\n\n\t\t\tforeach ( $pages as $page ) {\n\n\t\t\t\t// Catch and repair bad pages.\n\t\t\t\tif ( $page->post_parent == $page->ID ) {\n\t\t\t\t\t$page->post_parent = 0;\n\t\t\t\t\t$wpdb->update( $wpdb->posts, array( 'post_parent' => 0 ), array( 'ID' => $page->ID ) );\n\t\t\t\t\tclean_post_cache( $page );\n\t\t\t\t}\n\n\t\t\t\tif ( 0 == $page->post_parent )\n\t\t\t\t\t$top_level_pages[] = $page;\n\t\t\t\telse\n\t\t\t\t\t$children_pages[ $page->post_parent ][] = $page;\n\t\t\t}\n\n\t\t\t$pages = &$top_level_pages;\n\t\t}\n\n\t\t$count = 0;\n\t\t$start = ( $pagenum - 1 ) * $per_page;\n\t\t$end = $start + $per_page;\n\t\t$to_display = array();\n\n\t\tforeach ( $pages as $page ) {\n\t\t\tif ( $count >= $end )\n\t\t\t\tbreak;\n\n\t\t\tif ( $count >= $start ) {\n\t\t\t\t$to_display[$page->ID] = $level;\n\t\t\t}\n\n\t\t\t$count++;\n\n\t\t\tif ( isset( $children_pages ) )\n\t\t\t\t$this->_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page, $to_display );\n\t\t}\n\n\t\t// If it is the last pagenum and there are orphaned pages, display them with paging as well.\n\t\tif ( isset( $children_pages ) && $count < $end ){\n\t\t\tforeach ( $children_pages as $orphans ){\n\t\t\t\tforeach ( $orphans as $op ) {\n\t\t\t\t\tif ( $count >= $end )\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tif ( $count >= $start ) {\n\t\t\t\t\t\t$to_display[$op->ID] = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$ids = array_keys( $to_display );\n\t\t_prime_post_caches( $ids );\n\n\t\tif ( ! isset( $GLOBALS['post'] ) ) {\n\t\t\t$GLOBALS['post'] = reset( $ids );\n\t\t}\n\n\t\tforeach ( $to_display as $page_id => $level ) {\n\t\t\techo \"\\t\";\n\t\t\t$this->single_row( $page_id, $level );\n\t\t}\n\t}\n\n\t/**\n\t * Given a top level page ID, display the nested hierarchy of sub-pages\n\t * together with paging support\n\t *\n\t * @since 3.1.0 (Standalone function exists since 2.6.0)\n\t * @since 4.2.0 Added the `$to_display` parameter.\n\t *\n\t * @param array $children_pages\n\t * @param int $count\n\t * @param int $parent\n\t * @param int $level\n\t * @param int $pagenum\n\t * @param int $per_page\n\t * @param array $to_display List of pages to be displayed. Passed by reference.\n\t */\n\tprivate function _page_rows( &$children_pages, &$count, $parent, $level, $pagenum, $per_page, &$to_display ) {\n\t\tif ( ! isset( $children_pages[$parent] ) )\n\t\t\treturn;\n\n\t\t$start = ( $pagenum - 1 ) * $per_page;\n\t\t$end = $start + $per_page;\n\n\t\tforeach ( $children_pages[$parent] as $page ) {\n\t\t\tif ( $count >= $end )\n\t\t\t\tbreak;\n\n\t\t\t// If the page starts in a subtree, print the parents.\n\t\t\tif ( $count == $start && $page->post_parent > 0 ) {\n\t\t\t\t$my_parents = array();\n\t\t\t\t$my_parent = $page->post_parent;\n\t\t\t\twhile ( $my_parent ) {\n\t\t\t\t\t// Get the ID from the list or the attribute if my_parent is an object\n\t\t\t\t\t$parent_id = $my_parent;\n\t\t\t\t\tif ( is_object( $my_parent ) ) {\n\t\t\t\t\t\t$parent_id = $my_parent->ID;\n\t\t\t\t\t}\n\n\t\t\t\t\t$my_parent = get_post( $parent_id );\n\t\t\t\t\t$my_parents[] = $my_parent;\n\t\t\t\t\tif ( !$my_parent->post_parent )\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t$my_parent = $my_parent->post_parent;\n\t\t\t\t}\n\t\t\t\t$num_parents = count( $my_parents );\n\t\t\t\twhile ( $my_parent = array_pop( $my_parents ) ) {\n\t\t\t\t\t$to_display[$my_parent->ID] = $level - $num_parents;\n\t\t\t\t\t$num_parents--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( $count >= $start ) {\n\t\t\t\t$to_display[$page->ID] = $level;\n\t\t\t}\n\n\t\t\t$count++;\n\n\t\t\t$this->_page_rows( $children_pages, $count, $page->ID, $level + 1, $pagenum, $per_page, $to_display );\n\t\t}\n\n\t\tunset( $children_pages[$parent] ); //required in order to keep track of orphans\n\t}\n\n\t/**\n\t * Handles the checkbox column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_cb( $post ) {\n\t\tif ( current_user_can( 'edit_post', $post->ID ) ): ?>\n\t\t\t<label class=\"screen-reader-text\" for=\"cb-select-<?php the_ID(); ?>\"><?php\n\t\t\t\tprintf( __( 'Select %s' ), _draft_or_post_title() );\n\t\t\t?></label>\n\t\t\t<input id=\"cb-select-<?php the_ID(); ?>\" type=\"checkbox\" name=\"post[]\" value=\"<?php the_ID(); ?>\" />\n\t\t\t<div class=\"locked-indicator\">\n\t\t\t\t<span class=\"locked-indicator-icon\" aria-hidden=\"true\"></span>\n\t\t\t\t<span class=\"screen-reader-text\"><?php\n\t\t\t\tprintf(\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\t__( '&#8220;%s&#8221; is locked' ),\n\t\t\t\t\t_draft_or_post_title()\n\t\t\t\t);\n\t\t\t\t?></span>\n\t\t\t</div>\n\t\t<?php endif;\n\t}\n\n\t/**\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param WP_Post $post\n\t * @param string  $classes\n\t * @param string  $data\n\t * @param string  $primary\n\t */\n\tprotected function _column_title( $post, $classes, $data, $primary ) {\n\t\techo '<td class=\"' . $classes . ' page-title\" ', $data, '>';\n\t\techo $this->column_title( $post );\n\t\techo $this->handle_row_actions( $post, 'title', $primary );\n\t\techo '</td>';\n\t}\n\n\t/**\n\t * Handles the title column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @global string $mode\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_title( $post ) {\n\t\tglobal $mode;\n\n\t\tif ( $this->hierarchical_display ) {\n\t\t\tif ( 0 === $this->current_level && (int) $post->post_parent > 0 ) {\n\t\t\t\t// Sent level 0 by accident, by default, or because we don't know the actual level.\n\t\t\t\t$find_main_page = (int) $post->post_parent;\n\t\t\t\twhile ( $find_main_page > 0 ) {\n\t\t\t\t\t$parent = get_post( $find_main_page );\n\n\t\t\t\t\tif ( is_null( $parent ) ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t$this->current_level++;\n\t\t\t\t\t$find_main_page = (int) $parent->post_parent;\n\n\t\t\t\t\tif ( ! isset( $parent_name ) ) {\n\t\t\t\t\t\t/** This filter is documented in wp-includes/post-template.php */\n\t\t\t\t\t\t$parent_name = apply_filters( 'the_title', $parent->post_title, $parent->ID );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$can_edit_post = current_user_can( 'edit_post', $post->ID );\n\n\t\tif ( $can_edit_post && $post->post_status != 'trash' ) {\n\t\t\t$lock_holder = wp_check_post_lock( $post->ID );\n\n\t\t\tif ( $lock_holder ) {\n\t\t\t\t$lock_holder = get_userdata( $lock_holder );\n\t\t\t\t$locked_avatar = get_avatar( $lock_holder->ID, 18 );\n\t\t\t\t$locked_text = esc_html( sprintf( __( '%s is currently editing' ), $lock_holder->display_name ) );\n\t\t\t} else {\n\t\t\t\t$locked_avatar = $locked_text = '';\n\t\t\t}\n\n\t\t\techo '<div class=\"locked-info\"><span class=\"locked-avatar\">' . $locked_avatar . '</span> <span class=\"locked-text\">' . $locked_text . \"</span></div>\\n\";\n\t\t}\n\n\t\t$pad = str_repeat( '&#8212; ', $this->current_level );\n\t\techo \"<strong>\";\n\n\t\t$format = get_post_format( $post->ID );\n\t\tif ( $format ) {\n\t\t\t$label = get_post_format_string( $format );\n\n\t\t\t$format_class = 'post-state-format post-format-icon post-format-' . $format;\n\n\t\t\t$format_args = array(\n\t\t\t\t'post_format' => $format,\n\t\t\t\t'post_type' => $post->post_type\n\t\t\t);\n\n\t\t\techo $this->get_edit_link( $format_args, $label . ':', $format_class );\n\t\t}\n\n\t\t$title = _draft_or_post_title();\n\n\t\tif ( $can_edit_post && $post->post_status != 'trash' ) {\n\t\t\tprintf(\n\t\t\t\t'<a class=\"row-title\" href=\"%s\" aria-label=\"%s\">%s%s</a>',\n\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t/* translators: %s: post title */\n\t\t\t\tesc_attr( sprintf( __( '&#8220;%s&#8221; (Edit)' ), $title ) ),\n\t\t\t\t$pad,\n\t\t\t\t$title\n\t\t\t);\n\t\t} else {\n\t\t\techo $pad . $title;\n\t\t}\n\t\t_post_states( $post );\n\n\t\tif ( isset( $parent_name ) ) {\n\t\t\t$post_type_object = get_post_type_object( $post->post_type );\n\t\t\techo ' | ' . $post_type_object->labels->parent_item_colon . ' ' . esc_html( $parent_name );\n\t\t}\n\t\techo \"</strong>\\n\";\n\n\t\tif ( ! is_post_type_hierarchical( $this->screen->post_type ) && 'excerpt' === $mode && current_user_can( 'read_post', $post->ID ) ) {\n\t\t\techo esc_html( get_the_excerpt() );\n\t\t}\n\n\t\tget_inline_data( $post );\n\t}\n\n\t/**\n\t * Handles the post date column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @global string $mode\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_date( $post ) {\n\t\tglobal $mode;\n\n\t\tif ( '0000-00-00 00:00:00' === $post->post_date ) {\n\t\t\t$t_time = $h_time = __( 'Unpublished' );\n\t\t\t$time_diff = 0;\n\t\t} else {\n\t\t\t$t_time = get_the_time( __( 'Y/m/d g:i:s a' ) );\n\t\t\t$m_time = $post->post_date;\n\t\t\t$time = get_post_time( 'G', true, $post );\n\n\t\t\t$time_diff = time() - $time;\n\n\t\t\tif ( $time_diff > 0 && $time_diff < DAY_IN_SECONDS ) {\n\t\t\t\t$h_time = sprintf( __( '%s ago' ), human_time_diff( $time ) );\n\t\t\t} else {\n\t\t\t\t$h_time = mysql2date( __( 'Y/m/d' ), $m_time );\n\t\t\t}\n\t\t}\n\n\t\tif ( 'publish' === $post->post_status ) {\n\t\t\t_e( 'Published' );\n\t\t} elseif ( 'future' === $post->post_status ) {\n\t\t\tif ( $time_diff > 0 ) {\n\t\t\t\techo '<strong class=\"error-message\">' . __( 'Missed schedule' ) . '</strong>';\n\t\t\t} else {\n\t\t\t\t_e( 'Scheduled' );\n\t\t\t}\n\t\t} else {\n\t\t\t_e( 'Last Modified' );\n\t\t}\n\t\techo '<br />';\n\t\tif ( 'excerpt' === $mode ) {\n\t\t\t/**\n\t\t\t * Filters the published time of the post.\n\t\t\t *\n\t\t\t * If `$mode` equals 'excerpt', the published time and date are both displayed.\n\t\t\t * If `$mode` equals 'list' (default), the publish date is displayed, with the\n\t\t\t * time and date together available as an abbreviation definition.\n\t\t\t *\n\t\t\t * @since 2.5.1\n\t\t\t *\n\t\t\t * @param string  $t_time      The published time.\n\t\t\t * @param WP_Post $post        Post object.\n\t\t\t * @param string  $column_name The column name.\n\t\t\t * @param string  $mode        The list display mode ('excerpt' or 'list').\n\t\t\t */\n\t\t\techo apply_filters( 'post_date_column_time', $t_time, $post, 'date', $mode );\n\t\t} else {\n\n\t\t\t/** This filter is documented in wp-admin/includes/class-wp-posts-list-table.php */\n\t\t\techo '<abbr title=\"' . $t_time . '\">' . apply_filters( 'post_date_column_time', $h_time, $post, 'date', $mode ) . '</abbr>';\n\t\t}\n\t}\n\n\t/**\n\t * Handles the comments column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_comments( $post ) {\n\t\t?>\n\t\t<div class=\"post-com-count-wrapper\">\n\t\t<?php\n\t\t\t$pending_comments = isset( $this->comment_pending_count[$post->ID] ) ? $this->comment_pending_count[$post->ID] : 0;\n\n\t\t\t$this->comments_bubble( $post->ID, $pending_comments );\n\t\t?>\n\t\t</div>\n\t\t<?php\n\t}\n\n\t/**\n\t * Handles the post author column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post The current WP_Post object.\n\t */\n\tpublic function column_author( $post ) {\n\t\t$args = array(\n\t\t\t'post_type' => $post->post_type,\n\t\t\t'author' => get_the_author_meta( 'ID' )\n\t\t);\n\t\techo $this->get_edit_link( $args, get_the_author() );\n\t}\n\n\t/**\n\t * Handles the default column output.\n\t *\n\t * @since 4.3.0\n\t * @access public\n\t *\n\t * @param WP_Post $post        The current WP_Post object.\n\t * @param string  $column_name The current column name.\n\t */\n\tpublic function column_default( $post, $column_name ) {\n\t\tif ( 'categories' === $column_name ) {\n\t\t\t$taxonomy = 'category';\n\t\t} elseif ( 'tags' === $column_name ) {\n\t\t\t$taxonomy = 'post_tag';\n\t\t} elseif ( 0 === strpos( $column_name, 'taxonomy-' ) ) {\n\t\t\t$taxonomy = substr( $column_name, 9 );\n\t\t} else {\n\t\t\t$taxonomy = false;\n\t\t}\n\t\tif ( $taxonomy ) {\n\t\t\t$taxonomy_object = get_taxonomy( $taxonomy );\n\t\t\t$terms = get_the_terms( $post->ID, $taxonomy );\n\t\t\tif ( is_array( $terms ) ) {\n\t\t\t\t$out = array();\n\t\t\t\tforeach ( $terms as $t ) {\n\t\t\t\t\t$posts_in_term_qv = array();\n\t\t\t\t\tif ( 'post' != $post->post_type ) {\n\t\t\t\t\t\t$posts_in_term_qv['post_type'] = $post->post_type;\n\t\t\t\t\t}\n\t\t\t\t\tif ( $taxonomy_object->query_var ) {\n\t\t\t\t\t\t$posts_in_term_qv[ $taxonomy_object->query_var ] = $t->slug;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$posts_in_term_qv['taxonomy'] = $taxonomy;\n\t\t\t\t\t\t$posts_in_term_qv['term'] = $t->slug;\n\t\t\t\t\t}\n\n\t\t\t\t\t$label = esc_html( sanitize_term_field( 'name', $t->name, $t->term_id, $taxonomy, 'display' ) );\n\t\t\t\t\t$out[] = $this->get_edit_link( $posts_in_term_qv, $label );\n\t\t\t\t}\n\t\t\t\t/* translators: used between list items, there is a space after the comma */\n\t\t\t\techo join( __( ', ' ), $out );\n\t\t\t} else {\n\t\t\t\techo '<span aria-hidden=\"true\">&#8212;</span><span class=\"screen-reader-text\">' . $taxonomy_object->labels->no_terms . '</span>';\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tif ( is_post_type_hierarchical( $post->post_type ) ) {\n\n\t\t\t/**\n\t\t\t * Fires in each custom column on the Posts list table.\n\t\t\t *\n\t\t\t * This hook only fires if the current post type is hierarchical,\n\t\t\t * such as pages.\n\t\t\t *\n\t\t\t * @since 2.5.0\n\t\t\t *\n\t\t\t * @param string $column_name The name of the column to display.\n\t\t\t * @param int    $post_id     The current post ID.\n\t\t\t */\n\t\t\tdo_action( 'manage_pages_custom_column', $column_name, $post->ID );\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Fires in each custom column in the Posts list table.\n\t\t\t *\n\t\t\t * This hook only fires if the current post type is non-hierarchical,\n\t\t\t * such as posts.\n\t\t\t *\n\t\t\t * @since 1.5.0\n\t\t\t *\n\t\t\t * @param string $column_name The name of the column to display.\n\t\t\t * @param int    $post_id     The current post ID.\n\t\t\t */\n\t\t\tdo_action( 'manage_posts_custom_column', $column_name, $post->ID );\n\t\t}\n\n\t\t/**\n\t\t * Fires for each custom column of a specific post type in the Posts list table.\n\t\t *\n\t\t * The dynamic portion of the hook name, `$post->post_type`, refers to the post type.\n\t\t *\n\t\t * @since 3.1.0\n\t\t *\n\t\t * @param string $column_name The name of the column to display.\n\t\t * @param int    $post_id     The current post ID.\n\t\t */\n\t\tdo_action( \"manage_{$post->post_type}_posts_custom_column\", $column_name, $post->ID );\n\t}\n\n\t/**\n\t * @global WP_Post $post\n\t *\n\t * @param int|WP_Post $post\n\t * @param int         $level\n\t */\n\tpublic function single_row( $post, $level = 0 ) {\n\t\t$global_post = get_post();\n\n\t\t$post = get_post( $post );\n\t\t$this->current_level = $level;\n\n\t\t$GLOBALS['post'] = $post;\n\t\tsetup_postdata( $post );\n\n\t\t$classes = 'iedit author-' . ( get_current_user_id() == $post->post_author ? 'self' : 'other' );\n\n\t\t$lock_holder = wp_check_post_lock( $post->ID );\n\t\tif ( $lock_holder ) {\n\t\t\t$classes .= ' wp-locked';\n\t\t}\n\n\t\tif ( $post->post_parent ) {\n\t\t    $count = count( get_post_ancestors( $post->ID ) );\n\t\t    $classes .= ' level-'. $count;\n\t\t} else {\n\t\t    $classes .= ' level-0';\n\t\t}\n\t?>\n\t\t<tr id=\"post-<?php echo $post->ID; ?>\" class=\"<?php echo implode( ' ', get_post_class( $classes, $post->ID ) ); ?>\">\n\t\t\t<?php $this->single_row_columns( $post ); ?>\n\t\t</tr>\n\t<?php\n\t\t$GLOBALS['post'] = $global_post;\n\t}\n\n\t/**\n\t * Gets the name of the default primary column.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @return string Name of the default primary column, in this case, 'title'.\n\t */\n\tprotected function get_default_primary_column_name() {\n\t\treturn 'title';\n\t}\n\n\t/**\n\t * Generates and displays row action links.\n\t *\n\t * @since 4.3.0\n\t * @access protected\n\t *\n\t * @param object $post        Post being acted upon.\n\t * @param string $column_name Current column name.\n\t * @param string $primary     Primary column name.\n\t * @return string Row actions output for posts.\n\t */\n\tprotected function handle_row_actions( $post, $column_name, $primary ) {\n\t\tif ( $primary !== $column_name ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t$post_type_object = get_post_type_object( $post->post_type );\n\t\t$can_edit_post = current_user_can( 'edit_post', $post->ID );\n\t\t$actions = array();\n\t\t$title = _draft_or_post_title();\n\n\t\tif ( $can_edit_post && 'trash' != $post->post_status ) {\n\t\t\t$actions['edit'] = sprintf(\n\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\tget_edit_post_link( $post->ID ),\n\t\t\t\t/* translators: %s: post title */\n\t\t\t\tesc_attr( sprintf( __( 'Edit &#8220;%s&#8221;' ), $title ) ),\n\t\t\t\t__( 'Edit' )\n\t\t\t);\n\t\t\t$actions['inline hide-if-no-js'] = sprintf(\n\t\t\t\t'<a href=\"#\" class=\"editinline\" aria-label=\"%s\">%s</a>',\n\t\t\t\t/* translators: %s: post title */\n\t\t\t\tesc_attr( sprintf( __( 'Quick edit &#8220;%s&#8221; inline' ), $title ) ),\n\t\t\t\t__( 'Quick&nbsp;Edit' )\n\t\t\t);\n\t\t}\n\n\t\tif ( current_user_can( 'delete_post', $post->ID ) ) {\n\t\t\tif ( 'trash' === $post->post_status ) {\n\t\t\t\t$actions['untrash'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\twp_nonce_url( admin_url( sprintf( $post_type_object->_edit_link . '&amp;action=untrash', $post->ID ) ), 'untrash-post_' . $post->ID ),\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Restore &#8220;%s&#8221; from the Trash' ), $title ) ),\n\t\t\t\t\t__( 'Restore' )\n\t\t\t\t);\n\t\t\t} elseif ( EMPTY_TRASH_DAYS ) {\n\t\t\t\t$actions['trash'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_delete_post_link( $post->ID ),\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Move &#8220;%s&#8221; to the Trash' ), $title ) ),\n\t\t\t\t\t_x( 'Trash', 'verb' )\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( 'trash' === $post->post_status || ! EMPTY_TRASH_DAYS ) {\n\t\t\t\t$actions['delete'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" class=\"submitdelete\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_delete_post_link( $post->ID, '', true ),\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\tesc_attr( sprintf( __( 'Delete &#8220;%s&#8221; permanently' ), $title ) ),\n\t\t\t\t\t__( 'Delete Permanently' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif ( is_post_type_viewable( $post_type_object ) ) {\n\t\t\tif ( in_array( $post->post_status, array( 'pending', 'draft', 'future' ) ) ) {\n\t\t\t\tif ( $can_edit_post ) {\n\t\t\t\t\t$preview_link = get_preview_post_link( $post );\n\t\t\t\t\t$actions['view'] = sprintf(\n\t\t\t\t\t\t'<a href=\"%s\" rel=\"permalink\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\t\tesc_url( $preview_link ),\n\t\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\t\tesc_attr( sprintf( __( 'Preview &#8220;%s&#8221;' ), $title ) ),\n\t\t\t\t\t\t__( 'Preview' )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} elseif ( 'trash' != $post->post_status ) {\n\t\t\t\t$actions['view'] = sprintf(\n\t\t\t\t\t'<a href=\"%s\" rel=\"permalink\" aria-label=\"%s\">%s</a>',\n\t\t\t\t\tget_permalink( $post->ID ),\n\t\t\t\t\t/* translators: %s: post title */\n\t\t\t\t\tesc_attr( sprintf( __( 'View &#8220;%s&#8221;' ), $title ) ),\n\t\t\t\t\t__( 'View' )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif ( is_post_type_hierarchical( $post->post_type ) ) {\n\n\t\t\t/**\n\t\t\t * Filters the array of row action links on the Pages list table.\n\t\t\t *\n\t\t\t * The filter is evaluated only for hierarchical post types.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param array $actions An array of row action links. Defaults are\n\t\t\t *                         'Edit', 'Quick Edit', 'Restore, 'Trash',\n\t\t\t *                         'Delete Permanently', 'Preview', and 'View'.\n\t\t\t * @param WP_Post $post The post object.\n\t\t\t */\n\t\t\t$actions = apply_filters( 'page_row_actions', $actions, $post );\n\t\t} else {\n\n\t\t\t/**\n\t\t\t * Filters the array of row action links on the Posts list table.\n\t\t\t *\n\t\t\t * The filter is evaluated only for non-hierarchical post types.\n\t\t\t *\n\t\t\t * @since 2.8.0\n\t\t\t *\n\t\t\t * @param array $actions An array of row action links. Defaults are\n\t\t\t *                         'Edit', 'Quick Edit', 'Restore, 'Trash',\n\t\t\t *                         'Delete Permanently', 'Preview', and 'View'.\n\t\t\t * @param WP_Post $post The post object.\n\t\t\t */\n\t\t\t$actions = apply_filters( 'post_row_actions', $actions, $post );\n\t\t}\n\n\t\treturn $this->row_actions( $actions );\n\t}\n\n\t/**\n\t * Outputs the hidden row displayed when inline editing\n\t *\n\t * @since 3.1.0\n\t *\n\t * @global string $mode\n\t */\n\tpublic function inline_edit() {\n\t\tglobal $mode;\n\n\t\t$screen = $this->screen;\n\n\t\t$post = get_default_post_to_edit( $screen->post_type );\n\t\t$post_type_object = get_post_type_object( $screen->post_type );\n\n\t\t$taxonomy_names = get_object_taxonomies( $screen->post_type );\n\t\t$hierarchical_taxonomies = array();\n\t\t$flat_taxonomies = array();\n\t\tforeach ( $taxonomy_names as $taxonomy_name ) {\n\n\t\t\t$taxonomy = get_taxonomy( $taxonomy_name );\n\n\t\t\t$show_in_quick_edit = $taxonomy->show_in_quick_edit;\n\n\t\t\t/**\n\t\t\t * Filters whether the current taxonomy should be shown in the Quick Edit panel.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param bool   $show_in_quick_edit Whether to show the current taxonomy in Quick Edit.\n\t\t\t * @param string $taxonomy_name      Taxonomy name.\n\t\t\t * @param string $post_type          Post type of current Quick Edit post.\n\t\t\t */\n\t\t\tif ( ! apply_filters( 'quick_edit_show_taxonomy', $show_in_quick_edit, $taxonomy_name, $screen->post_type ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( $taxonomy->hierarchical )\n\t\t\t\t$hierarchical_taxonomies[] = $taxonomy;\n\t\t\telse\n\t\t\t\t$flat_taxonomies[] = $taxonomy;\n\t\t}\n\n\t\t$m = ( isset( $mode ) && 'excerpt' === $mode ) ? 'excerpt' : 'list';\n\t\t$can_publish = current_user_can( $post_type_object->cap->publish_posts );\n\t\t$core_columns = array( 'cb' => true, 'date' => true, 'title' => true, 'categories' => true, 'tags' => true, 'comments' => true, 'author' => true );\n\n\t?>\n\n\t<form method=\"get\"><table style=\"display: none\"><tbody id=\"inlineedit\">\n\t\t<?php\n\t\t$hclass = count( $hierarchical_taxonomies ) ? 'post' : 'page';\n\t\t$bulk = 0;\n\t\twhile ( $bulk < 2 ) { ?>\n\n\t\t<tr id=\"<?php echo $bulk ? 'bulk-edit' : 'inline-edit'; ?>\" class=\"inline-edit-row inline-edit-row-<?php echo \"$hclass inline-edit-\" . $screen->post_type;\n\t\t\techo $bulk ? \" bulk-edit-row bulk-edit-row-$hclass bulk-edit-{$screen->post_type}\" : \" quick-edit-row quick-edit-row-$hclass inline-edit-{$screen->post_type}\";\n\t\t?>\" style=\"display: none\"><td colspan=\"<?php echo $this->get_column_count(); ?>\" class=\"colspanchange\">\n\n\t\t<fieldset class=\"inline-edit-col-left\">\n\t\t\t<legend class=\"inline-edit-legend\"><?php echo $bulk ? __( 'Bulk Edit' ) : __( 'Quick Edit' ); ?></legend>\n\t\t\t<div class=\"inline-edit-col\">\n\t<?php\n\n\tif ( post_type_supports( $screen->post_type, 'title' ) ) :\n\t\tif ( $bulk ) : ?>\n\t\t\t<div id=\"bulk-title-div\">\n\t\t\t\t<div id=\"bulk-titles\"></div>\n\t\t\t</div>\n\n\t<?php else : // $bulk ?>\n\n\t\t\t<label>\n\t\t\t\t<span class=\"title\"><?php _e( 'Title' ); ?></span>\n\t\t\t\t<span class=\"input-text-wrap\"><input type=\"text\" name=\"post_title\" class=\"ptitle\" value=\"\" /></span>\n\t\t\t</label>\n\n\t\t\t<label>\n\t\t\t\t<span class=\"title\"><?php _e( 'Slug' ); ?></span>\n\t\t\t\t<span class=\"input-text-wrap\"><input type=\"text\" name=\"post_name\" value=\"\" /></span>\n\t\t\t</label>\n\n\t<?php endif; // $bulk\n\tendif; // post_type_supports title ?>\n\n\t<?php if ( !$bulk ) : ?>\n\t\t\t<fieldset class=\"inline-edit-date\">\n\t\t\t<legend><span class=\"title\"><?php _e( 'Date' ); ?></span></legend>\n\t\t\t\t<?php touch_time( 1, 1, 0, 1 ); ?>\n\t\t\t</fieldset>\n\t\t\t<br class=\"clear\" />\n\t<?php endif; // $bulk\n\n\t\tif ( post_type_supports( $screen->post_type, 'author' ) ) :\n\t\t\t$authors_dropdown = '';\n\n\t\t\tif ( current_user_can( $post_type_object->cap->edit_others_posts ) ) :\n\t\t\t\t$users_opt = array(\n\t\t\t\t\t'hide_if_only_one_author' => false,\n\t\t\t\t\t'who' => 'authors',\n\t\t\t\t\t'name' => 'post_author',\n\t\t\t\t\t'class'=> 'authors',\n\t\t\t\t\t'multi' => 1,\n\t\t\t\t\t'echo' => 0,\n\t\t\t\t\t'show' => 'display_name_with_login',\n\t\t\t\t);\n\t\t\t\tif ( $bulk )\n\t\t\t\t\t$users_opt['show_option_none'] = __( '&mdash; No Change &mdash;' );\n\n\t\t\t\tif ( $authors = wp_dropdown_users( $users_opt ) ) :\n\t\t\t\t\t$authors_dropdown  = '<label class=\"inline-edit-author\">';\n\t\t\t\t\t$authors_dropdown .= '<span class=\"title\">' . __( 'Author' ) . '</span>';\n\t\t\t\t\t$authors_dropdown .= $authors;\n\t\t\t\t\t$authors_dropdown .= '</label>';\n\t\t\t\tendif;\n\t\t\tendif; // authors\n\t?>\n\n\t<?php if ( !$bulk ) echo $authors_dropdown;\n\tendif; // post_type_supports author\n\n\tif ( !$bulk && $can_publish ) :\n\t?>\n\n\t\t\t<div class=\"inline-edit-group wp-clearfix\">\n\t\t\t\t<label class=\"alignleft\">\n\t\t\t\t\t<span class=\"title\"><?php _e( 'Password' ); ?></span>\n\t\t\t\t\t<span class=\"input-text-wrap\"><input type=\"text\" name=\"post_password\" class=\"inline-edit-password-input\" value=\"\" /></span>\n\t\t\t\t</label>\n\n\t\t\t\t<em class=\"alignleft inline-edit-or\">\n\t\t\t\t\t<?php\n\t\t\t\t\t/* translators: Between password field and private checkbox on post quick edit interface */\n\t\t\t\t\t_e( '&ndash;OR&ndash;' );\n\t\t\t\t\t?>\n\t\t\t\t</em>\n\t\t\t\t<label class=\"alignleft inline-edit-private\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"keep_private\" value=\"private\" />\n\t\t\t\t\t<span class=\"checkbox-title\"><?php _e( 'Private' ); ?></span>\n\t\t\t\t</label>\n\t\t\t</div>\n\n\t<?php endif; ?>\n\n\t\t</div></fieldset>\n\n\t<?php if ( count( $hierarchical_taxonomies ) && !$bulk ) : ?>\n\n\t\t<fieldset class=\"inline-edit-col-center inline-edit-categories\"><div class=\"inline-edit-col\">\n\n\t<?php foreach ( $hierarchical_taxonomies as $taxonomy ) : ?>\n\n\t\t\t<span class=\"title inline-edit-categories-label\"><?php echo esc_html( $taxonomy->labels->name ) ?></span>\n\t\t\t<input type=\"hidden\" name=\"<?php echo ( $taxonomy->name === 'category' ) ? 'post_category[]' : 'tax_input[' . esc_attr( $taxonomy->name ) . '][]'; ?>\" value=\"0\" />\n\t\t\t<ul class=\"cat-checklist <?php echo esc_attr( $taxonomy->name )?>-checklist\">\n\t\t\t\t<?php wp_terms_checklist( null, array( 'taxonomy' => $taxonomy->name ) ) ?>\n\t\t\t</ul>\n\n\t<?php endforeach; //$hierarchical_taxonomies as $taxonomy ?>\n\n\t\t</div></fieldset>\n\n\t<?php endif; // count( $hierarchical_taxonomies ) && !$bulk ?>\n\n\t\t<fieldset class=\"inline-edit-col-right\"><div class=\"inline-edit-col\">\n\n\t<?php\n\t\tif ( post_type_supports( $screen->post_type, 'author' ) && $bulk )\n\t\t\techo $authors_dropdown;\n\n\t\tif ( post_type_supports( $screen->post_type, 'page-attributes' ) ) :\n\n\t\t\tif ( $post_type_object->hierarchical ) :\n\t\t?>\n\t\t\t<label>\n\t\t\t\t<span class=\"title\"><?php _e( 'Parent' ); ?></span>\n\t<?php\n\t\t$dropdown_args = array(\n\t\t\t'post_type'         => $post_type_object->name,\n\t\t\t'selected'          => $post->post_parent,\n\t\t\t'name'              => 'post_parent',\n\t\t\t'show_option_none'  => __( 'Main Page (no parent)' ),\n\t\t\t'option_none_value' => 0,\n\t\t\t'sort_column'       => 'menu_order, post_title',\n\t\t);\n\n\t\tif ( $bulk )\n\t\t\t$dropdown_args['show_option_no_change'] =  __( '&mdash; No Change &mdash;' );\n\n\t\t/**\n\t\t * Filters the arguments used to generate the Quick Edit page-parent drop-down.\n\t\t *\n\t\t * @since 2.7.0\n\t\t *\n\t\t * @see wp_dropdown_pages()\n\t\t *\n\t\t * @param array $dropdown_args An array of arguments.\n\t\t */\n\t\t$dropdown_args = apply_filters( 'quick_edit_dropdown_pages_args', $dropdown_args );\n\n\t\twp_dropdown_pages( $dropdown_args );\n\t?>\n\t\t\t</label>\n\n\t<?php\n\t\t\tendif; // hierarchical\n\n\t\t\tif ( !$bulk ) : ?>\n\n\t\t\t<label>\n\t\t\t\t<span class=\"title\"><?php _e( 'Order' ); ?></span>\n\t\t\t\t<span class=\"input-text-wrap\"><input type=\"text\" name=\"menu_order\" class=\"inline-edit-menu-order-input\" value=\"<?php echo $post->menu_order ?>\" /></span>\n\t\t\t</label>\n\n\t<?php\n\t\t\tendif; // !$bulk\n\t\tendif; // page-attributes\n\t?>\n\n\t<?php if ( 0 < count( get_page_templates( null, $screen->post_type ) ) ) : ?>\n\t\t<label>\n\t\t\t<span class=\"title\"><?php _e( 'Template' ); ?></span>\n\t\t\t<select name=\"page_template\">\n<?php\tif ( $bulk ) : ?>\n\t\t\t\t<option value=\"-1\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n<?php\tendif; // $bulk ?>\n                <?php\n\t\t\t\t/** This filter is documented in wp-admin/includes/meta-boxes.php */\n\t\t\t\t$default_title = apply_filters( 'default_page_template_title',  __( 'Default Template' ), 'quick-edit' );\n                ?>\n\t\t\t\t<option value=\"default\"><?php echo esc_html( $default_title ); ?></option>\n\t\t\t\t<?php page_template_dropdown( '', $screen->post_type ) ?>\n\t\t\t</select>\n\t\t</label>\n\t<?php endif; ?>\n\n\t<?php if ( count( $flat_taxonomies ) && !$bulk ) : ?>\n\n\t<?php foreach ( $flat_taxonomies as $taxonomy ) : ?>\n\t\t<?php if ( current_user_can( $taxonomy->cap->assign_terms ) ) :\n\t\t\t$taxonomy_name = esc_attr( $taxonomy->name );\n\n\t\t\t?>\n\t\t\t<label class=\"inline-edit-tags\">\n\t\t\t\t<span class=\"title\"><?php echo esc_html( $taxonomy->labels->name ) ?></span>\n\t\t\t\t<textarea data-wp-taxonomy=\"<?php echo $taxonomy_name; ?>\" cols=\"22\" rows=\"1\" name=\"tax_input[<?php echo $taxonomy_name; ?>]\" class=\"tax_input_<?php echo $taxonomy_name; ?>\"></textarea>\n\t\t\t</label>\n\t\t<?php endif; ?>\n\n\t<?php endforeach; //$flat_taxonomies as $taxonomy ?>\n\n\t<?php endif; // count( $flat_taxonomies ) && !$bulk  ?>\n\n\t<?php if ( post_type_supports( $screen->post_type, 'comments' ) || post_type_supports( $screen->post_type, 'trackbacks' ) ) :\n\t\tif ( $bulk ) : ?>\n\n\t\t\t<div class=\"inline-edit-group wp-clearfix\">\n\t\t<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>\n\t\t\t<label class=\"alignleft\">\n\t\t\t\t<span class=\"title\"><?php _e( 'Comments' ); ?></span>\n\t\t\t\t<select name=\"comment_status\">\n\t\t\t\t\t<option value=\"\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t\t\t\t\t<option value=\"open\"><?php _e( 'Allow' ); ?></option>\n\t\t\t\t\t<option value=\"closed\"><?php _e( 'Do not allow' ); ?></option>\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>\n\t\t\t<label class=\"alignright\">\n\t\t\t\t<span class=\"title\"><?php _e( 'Pings' ); ?></span>\n\t\t\t\t<select name=\"ping_status\">\n\t\t\t\t\t<option value=\"\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t\t\t\t\t<option value=\"open\"><?php _e( 'Allow' ); ?></option>\n\t\t\t\t\t<option value=\"closed\"><?php _e( 'Do not allow' ); ?></option>\n\t\t\t\t</select>\n\t\t\t</label>\n\t\t<?php endif; ?>\n\t\t\t</div>\n\n\t<?php else : // $bulk ?>\n\n\t\t\t<div class=\"inline-edit-group wp-clearfix\">\n\t\t\t<?php if ( post_type_supports( $screen->post_type, 'comments' ) ) : ?>\n\t\t\t\t<label class=\"alignleft\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"comment_status\" value=\"open\" />\n\t\t\t\t\t<span class=\"checkbox-title\"><?php _e( 'Allow Comments' ); ?></span>\n\t\t\t\t</label>\n\t\t\t<?php endif; if ( post_type_supports( $screen->post_type, 'trackbacks' ) ) : ?>\n\t\t\t\t<label class=\"alignleft\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"ping_status\" value=\"open\" />\n\t\t\t\t\t<span class=\"checkbox-title\"><?php _e( 'Allow Pings' ); ?></span>\n\t\t\t\t</label>\n\t\t\t<?php endif; ?>\n\t\t\t</div>\n\n\t<?php endif; // $bulk\n\tendif; // post_type_supports comments or pings ?>\n\n\t\t\t<div class=\"inline-edit-group wp-clearfix\">\n\t\t\t\t<label class=\"inline-edit-status alignleft\">\n\t\t\t\t\t<span class=\"title\"><?php _e( 'Status' ); ?></span>\n\t\t\t\t\t<select name=\"_status\">\n\t<?php if ( $bulk ) : ?>\n\t\t\t\t\t\t<option value=\"-1\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t<?php endif; // $bulk ?>\n\t\t\t\t\t<?php if ( $can_publish ) : // Contributors only get \"Unpublished\" and \"Pending Review\" ?>\n\t\t\t\t\t\t<option value=\"publish\"><?php _e( 'Published' ); ?></option>\n\t\t\t\t\t\t<option value=\"future\"><?php _e( 'Scheduled' ); ?></option>\n\t<?php if ( $bulk ) : ?>\n\t\t\t\t\t\t<option value=\"private\"><?php _e( 'Private' ) ?></option>\n\t<?php endif; // $bulk ?>\n\t\t\t\t\t<?php endif; ?>\n\t\t\t\t\t\t<option value=\"pending\"><?php _e( 'Pending Review' ); ?></option>\n\t\t\t\t\t\t<option value=\"draft\"><?php _e( 'Draft' ); ?></option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\n\t<?php if ( 'post' === $screen->post_type && $can_publish && current_user_can( $post_type_object->cap->edit_others_posts ) ) : ?>\n\n\t<?php\tif ( $bulk ) : ?>\n\n\t\t\t\t<label class=\"alignright\">\n\t\t\t\t\t<span class=\"title\"><?php _e( 'Sticky' ); ?></span>\n\t\t\t\t\t<select name=\"sticky\">\n\t\t\t\t\t\t<option value=\"-1\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t\t\t\t\t\t<option value=\"sticky\"><?php _e( 'Sticky' ); ?></option>\n\t\t\t\t\t\t<option value=\"unsticky\"><?php _e( 'Not Sticky' ); ?></option>\n\t\t\t\t\t</select>\n\t\t\t\t</label>\n\n\t<?php\telse : // $bulk ?>\n\n\t\t\t\t<label class=\"alignleft\">\n\t\t\t\t\t<input type=\"checkbox\" name=\"sticky\" value=\"sticky\" />\n\t\t\t\t\t<span class=\"checkbox-title\"><?php _e( 'Make this post sticky' ); ?></span>\n\t\t\t\t</label>\n\n\t<?php\tendif; // $bulk ?>\n\n\t<?php endif; // 'post' && $can_publish && current_user_can( 'edit_others_cap' ) ?>\n\n\t\t\t</div>\n\n\t<?php\n\n\tif ( $bulk && current_theme_supports( 'post-formats' ) && post_type_supports( $screen->post_type, 'post-formats' ) ) {\n\t\t$post_formats = get_theme_support( 'post-formats' );\n\n\t\t?>\n\t\t<label class=\"alignleft\">\n\t\t<span class=\"title\"><?php _ex( 'Format', 'post format' ); ?></span>\n\t\t<select name=\"post_format\">\n\t\t\t<option value=\"-1\"><?php _e( '&mdash; No Change &mdash;' ); ?></option>\n\t\t\t<option value=\"0\"><?php echo get_post_format_string( 'standard' ); ?></option>\n\t\t\t<?php\n\t\t\tif ( is_array( $post_formats[0] ) ) {\n\t\t\t\tforeach ( $post_formats[0] as $format ) {\n\t\t\t\t\t?>\n\t\t\t\t\t<option value=\"<?php echo esc_attr( $format ); ?>\"><?php echo esc_html( get_post_format_string( $format ) ); ?></option>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t</select></label>\n\t<?php\n\n\t}\n\n\t?>\n\n\t\t</div></fieldset>\n\n\t<?php\n\t\tlist( $columns ) = $this->get_column_info();\n\n\t\tforeach ( $columns as $column_name => $column_display_name ) {\n\t\t\tif ( isset( $core_columns[$column_name] ) )\n\t\t\t\tcontinue;\n\n\t\t\tif ( $bulk ) {\n\n\t\t\t\t/**\n\t\t\t\t * Fires once for each column in Bulk Edit mode.\n\t\t\t\t *\n\t\t\t\t * @since 2.7.0\n\t\t\t\t *\n\t\t\t\t * @param string  $column_name Name of the column to edit.\n\t\t\t\t * @param WP_Post $post_type   The post type slug.\n\t\t\t\t */\n\t\t\t\tdo_action( 'bulk_edit_custom_box', $column_name, $screen->post_type );\n\t\t\t} else {\n\n\t\t\t\t/**\n\t\t\t\t * Fires once for each column in Quick Edit mode.\n\t\t\t\t *\n\t\t\t\t * @since 2.7.0\n\t\t\t\t *\n\t\t\t\t * @param string $column_name Name of the column to edit.\n\t\t\t\t * @param string $post_type   The post type slug.\n\t\t\t\t */\n\t\t\t\tdo_action( 'quick_edit_custom_box', $column_name, $screen->post_type );\n\t\t\t}\n\n\t\t}\n\t?>\n\t\t<p class=\"submit inline-edit-save\">\n\t\t\t<button type=\"button\" class=\"button cancel alignleft\"><?php _e( 'Cancel' ); ?></button>\n\t\t\t<?php if ( ! $bulk ) {\n\t\t\t\twp_nonce_field( 'inlineeditnonce', '_inline_edit', false );\n\t\t\t\t?>\n\t\t\t\t<button type=\"button\" class=\"button button-primary save alignright\"><?php _e( 'Update' ); ?></button>\n\t\t\t\t<span class=\"spinner\"></span>\n\t\t\t<?php } else {\n\t\t\t\tsubmit_button( __( 'Update' ), 'primary alignright', 'bulk_edit', false );\n\t\t\t} ?>\n\t\t\t<input type=\"hidden\" name=\"post_view\" value=\"<?php echo esc_attr( $m ); ?>\" />\n\t\t\t<input type=\"hidden\" name=\"screen\" value=\"<?php echo esc_attr( $screen->id ); ?>\" />\n\t\t\t<?php if ( ! $bulk && ! post_type_supports( $screen->post_type, 'author' ) ) { ?>\n\t\t\t\t<input type=\"hidden\" name=\"post_author\" value=\"<?php echo esc_attr( $post->post_author ); ?>\" />\n\t\t\t<?php } ?>\n\t\t\t<span class=\"error\" style=\"display:none\"></span>\n\t\t\t<br class=\"clear\" />\n\t\t</p>\n\t\t</td></tr>\n\t<?php\n\t\t$bulk++;\n\t\t}\n?>\n\t\t</tbody></table></form>\n<?php\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-39956';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/includes/class-wp-posts-list-table.php", "wp-includes/version.php"], "buggy_code_start_loc": [959, 7], "buggy_code_end_loc": [960, 8], "fixing_code_start_loc": [959, 7], "fixing_code_end_loc": [960, 8], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in wp-admin/includes/class-wp-posts-list-table.php in the posts list table in WordPress before 4.7.2 allows remote attackers to inject arbitrary web script or HTML via a crafted excerpt.", "other": {"cve": {"id": "CVE-2017-5612", "sourceIdentifier": "security@debian.org", "published": "2017-01-30T04:59:00.640", "lastModified": "2019-03-19T12:27:33.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in wp-admin/includes/class-wp-posts-list-table.php in the posts list table in WordPress before 4.7.2 allows remote attackers to inject arbitrary web script or HTML via a crafted excerpt."}, {"lang": "es", "value": "Vulnerabilidad de XSS en wp-admin/includes/class-wp-posts-list-table.php en la tabla de lista de publicaciones en WordPress en versiones anteriores a 4.7.2 permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de un extracto manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.1", "matchCriteriaId": "7DB8B4B5-7B4F-4AC2-8EBA-A2D6B2273392"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.debian.org/security/2017/dsa-3779", "source": "security@debian.org", "tags": ["Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2017/01/28/5", "source": "security@debian.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/95816", "source": "security@debian.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037731", "source": "security@debian.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.7.2", "source": "security@debian.org", "tags": ["Release Notes"]}, {"url": "https://github.com/WordPress/WordPress/commit/4482f9207027de8f36630737ae085110896ea849", "source": "security@debian.org", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://wordpress.org/news/2017/01/wordpress-4-7-2-security-release/", "source": "security@debian.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8731", "source": "security@debian.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/4482f9207027de8f36630737ae085110896ea849"}}