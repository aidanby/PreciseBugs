{"buggy_code": ["package org.linlinjava.litemall.wx.web;\n\nimport org.linlinjava.litemall.core.storage.StorageService;\nimport org.linlinjava.litemall.core.util.CharUtil;\nimport org.linlinjava.litemall.core.util.ResponseUtil;\nimport org.linlinjava.litemall.db.domain.LitemallStorage;\nimport org.linlinjava.litemall.db.service.LitemallStorageService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/wx/storage\")\n@Validated\npublic class WxStorageController {\n\n    @Autowired\n    private StorageService storageService;\n    @Autowired\n    private LitemallStorageService litemallStorageService;\n\n    private String generateKey(String originalFilename) {\n        int index = originalFilename.lastIndexOf('.');\n        String suffix = originalFilename.substring(index);\n\n        String key = null;\n        LitemallStorage storageInfo = null;\n\n        do {\n            key = CharUtil.getRandomString(20) + suffix;\n            storageInfo = litemallStorageService.findByKey(key);\n        }\n        while (storageInfo != null);\n\n        return key;\n    }\n\n    @PostMapping(\"/upload\")\n    public Object upload(@RequestParam(\"file\") MultipartFile file) throws IOException {\n        String originalFilename = file.getOriginalFilename();\n        String url = storageService.store(file.getInputStream(), file.getSize(), file.getContentType(), originalFilename);\n\n        Map<String, Object> data = new HashMap<>();\n        data.put(\"url\", url);\n        return ResponseUtil.ok(data);\n    }\n\n    @GetMapping(\"/fetch/{key:.+}\")\n    public ResponseEntity<Resource> fetch(@PathVariable String key) {\n        LitemallStorage litemallStorage = litemallStorageService.findByKey(key);\n        if (key == null) {\n            ResponseEntity.notFound();\n        }\n        String type = litemallStorage.getType();\n        MediaType mediaType = MediaType.parseMediaType(type);\n\n        Resource file = storageService.loadAsResource(key);\n        if (file == null) {\n            ResponseEntity.notFound();\n        }\n        return ResponseEntity.ok().contentType(mediaType).body(file);\n    }\n\n    @GetMapping(\"/download/{key:.+}\")\n    public ResponseEntity<Resource> download(@PathVariable String key) {\n        LitemallStorage litemallStorage = litemallStorageService.findByKey(key);\n        if (key == null) {\n            ResponseEntity.notFound();\n        }\n        String type = litemallStorage.getType();\n        MediaType mediaType = MediaType.parseMediaType(type);\n\n        Resource file = storageService.loadAsResource(key);\n        if (file == null) {\n            ResponseEntity.notFound();\n        }\n        return ResponseEntity.ok().contentType(mediaType).header(HttpHeaders.CONTENT_DISPOSITION,\n                \"attachment; filename=\\\"\" + file.getFilename() + \"\\\"\").body(file);\n    }\n\n}\n"], "fixing_code": ["package org.linlinjava.litemall.wx.web;\n\nimport org.linlinjava.litemall.core.storage.StorageService;\nimport org.linlinjava.litemall.core.util.CharUtil;\nimport org.linlinjava.litemall.core.util.ResponseUtil;\nimport org.linlinjava.litemall.db.domain.LitemallStorage;\nimport org.linlinjava.litemall.db.service.LitemallStorageService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/wx/storage\")\n@Validated\npublic class WxStorageController {\n\n    @Autowired\n    private StorageService storageService;\n    @Autowired\n    private LitemallStorageService litemallStorageService;\n\n    private String generateKey(String originalFilename) {\n        int index = originalFilename.lastIndexOf('.');\n        String suffix = originalFilename.substring(index);\n\n        String key = null;\n        LitemallStorage storageInfo = null;\n\n        do {\n            key = CharUtil.getRandomString(20) + suffix;\n            storageInfo = litemallStorageService.findByKey(key);\n        }\n        while (storageInfo != null);\n\n        return key;\n    }\n\n    @PostMapping(\"/upload\")\n    public Object upload(@RequestParam(\"file\") MultipartFile file) throws IOException {\n        String originalFilename = file.getOriginalFilename();\n        String url = storageService.store(file.getInputStream(), file.getSize(), file.getContentType(), originalFilename);\n\n        Map<String, Object> data = new HashMap<>();\n        data.put(\"url\", url);\n        return ResponseUtil.ok(data);\n    }\n\n    @GetMapping(\"/fetch/{key:.+}\")\n    public ResponseEntity<Resource> fetch(@PathVariable String key) {\n        LitemallStorage litemallStorage = litemallStorageService.findByKey(key);\n        if (key == null) {\n            return ResponseEntity.notFound().build();\n        }\n        if(key.contains(\"../\")){\n            return ResponseEntity.badRequest().build();\n        }\n        String type = litemallStorage.getType();\n        MediaType mediaType = MediaType.parseMediaType(type);\n\n        Resource file = storageService.loadAsResource(key);\n        if (file == null) {\n            return ResponseEntity.notFound().build();\n        }\n        return ResponseEntity.ok().contentType(mediaType).body(file);\n    }\n\n    @GetMapping(\"/download/{key:.+}\")\n    public ResponseEntity<Resource> download(@PathVariable String key) {\n        LitemallStorage litemallStorage = litemallStorageService.findByKey(key);\n        if (key == null) {\n            return ResponseEntity.notFound().build();\n        }\n        if(key.contains(\"../\")){\n            return ResponseEntity.badRequest().build();\n        }\n\n        String type = litemallStorage.getType();\n        MediaType mediaType = MediaType.parseMediaType(type);\n\n        Resource file = storageService.loadAsResource(key);\n        if (file == null) {\n            return ResponseEntity.notFound().build();\n        }\n        return ResponseEntity.ok().contentType(mediaType).header(HttpHeaders.CONTENT_DISPOSITION,\n                \"attachment; filename=\\\"\" + file.getFilename() + \"\\\"\").body(file);\n    }\n\n}\n"], "filenames": ["litemall-wx-api/src/main/java/org/linlinjava/litemall/wx/web/WxStorageController.java"], "buggy_code_start_loc": [61], "buggy_code_end_loc": [85], "fixing_code_start_loc": [61], "fixing_code_end_loc": [92], "type": "CWE-22", "message": "An issue was discovered in litemall 0.9.0. Arbitrary file download is possible via ../ directory traversal in linlinjava/litemall/wx/web/WxStorageController.java in the litemall-wx-api component.", "other": {"cve": {"id": "CVE-2018-18434", "sourceIdentifier": "cve@mitre.org", "published": "2018-10-17T06:29:00.637", "lastModified": "2018-11-29T19:52:42.917", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in litemall 0.9.0. Arbitrary file download is possible via ../ directory traversal in linlinjava/litemall/wx/web/WxStorageController.java in the litemall-wx-api component."}, {"lang": "es", "value": "Se ha descubierto un problema en litemall 0.9.0. Es posible la descarga de archivos arbitrarios mediante un salto de directorio ../ en linlinjava/litemall/wx/web/WxStorageController.java en el componente litemall-wx-api."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:litemall_project:litemall:0.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "6A59FEDA-AF82-4C54-A89A-58D2158404F4"}]}]}], "references": [{"url": "https://github.com/linlinjava/litemall/commit/49ab94d0052672d4fb642505d44b94a18abea332", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/linlinjava/litemall/issues/76", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/linlinjava/litemall/commit/49ab94d0052672d4fb642505d44b94a18abea332"}}