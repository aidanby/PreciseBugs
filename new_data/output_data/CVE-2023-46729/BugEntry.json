{"buggy_code": ["import { isThenable } from '@sentry/utils';\n\nimport type {\n  ExportedNextConfig,\n  NextConfigFunction,\n  NextConfigObject,\n  NextConfigObjectWithSentry,\n  SentryWebpackPluginOptions,\n  UserSentryOptions,\n} from './types';\nimport { constructWebpackConfigFunction } from './webpack';\n\nlet showedExportModeTunnelWarning = false;\n\n/**\n * Add Sentry options to the config to be exported from the user's `next.config.js` file.\n *\n * @param exportedUserNextConfig The existing config to be exported prior to adding Sentry\n * @param userSentryWebpackPluginOptions Configuration for SentryWebpackPlugin\n * @param sentryOptions Optional additional options to add as alternative to `sentry` property of config\n * @returns The modified config to be exported\n */\nexport function withSentryConfig(\n  exportedUserNextConfig: ExportedNextConfig = {},\n  userSentryWebpackPluginOptions: Partial<SentryWebpackPluginOptions> = {},\n  sentryOptions?: UserSentryOptions,\n): NextConfigFunction | NextConfigObject {\n  if (typeof exportedUserNextConfig === 'function') {\n    return function (this: unknown, ...webpackConfigFunctionArgs: unknown[]): ReturnType<NextConfigFunction> {\n      const maybeUserNextConfigObject: NextConfigObjectWithSentry = exportedUserNextConfig.apply(\n        this,\n        webpackConfigFunctionArgs,\n      );\n\n      if (isThenable(maybeUserNextConfigObject)) {\n        return maybeUserNextConfigObject.then(function (userNextConfigObject: NextConfigObjectWithSentry) {\n          const userSentryOptions = { ...userNextConfigObject.sentry, ...sentryOptions };\n          return getFinalConfigObject(userNextConfigObject, userSentryOptions, userSentryWebpackPluginOptions);\n        });\n      }\n\n      // Reassign for naming-consistency sake.\n      const userNextConfigObject = maybeUserNextConfigObject;\n      const userSentryOptions = { ...userNextConfigObject.sentry, ...sentryOptions };\n      return getFinalConfigObject(userNextConfigObject, userSentryOptions, userSentryWebpackPluginOptions);\n    };\n  } else {\n    const userSentryOptions = { ...exportedUserNextConfig.sentry, ...sentryOptions };\n    return getFinalConfigObject(exportedUserNextConfig, userSentryOptions, userSentryWebpackPluginOptions);\n  }\n}\n\n// Modify the materialized object form of the user's next config by deleting the `sentry` property and wrapping the\n// `webpack` property\nfunction getFinalConfigObject(\n  incomingUserNextConfigObject: NextConfigObjectWithSentry,\n  userSentryOptions: UserSentryOptions,\n  userSentryWebpackPluginOptions: Partial<SentryWebpackPluginOptions>,\n): NextConfigObject {\n  // Next 12.2.3+ warns about non-canonical properties on `userNextConfig`.\n  delete incomingUserNextConfigObject.sentry;\n\n  if (userSentryOptions?.tunnelRoute) {\n    if (incomingUserNextConfigObject.output === 'export') {\n      if (!showedExportModeTunnelWarning) {\n        showedExportModeTunnelWarning = true;\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses serverside features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option',\n        );\n      }\n    } else {\n      setUpTunnelRewriteRules(incomingUserNextConfigObject, userSentryOptions.tunnelRoute);\n    }\n  }\n\n  return {\n    ...incomingUserNextConfigObject,\n    webpack: constructWebpackConfigFunction(\n      incomingUserNextConfigObject,\n      userSentryWebpackPluginOptions,\n      userSentryOptions,\n    ),\n  };\n}\n\n/**\n * Injects rewrite rules into the Next.js config provided by the user to tunnel\n * requests from the `tunnelPath` to Sentry.\n *\n * See https://nextjs.org/docs/api-reference/next.config.js/rewrites.\n */\nfunction setUpTunnelRewriteRules(userNextConfig: NextConfigObject, tunnelPath: string): void {\n  const originalRewrites = userNextConfig.rewrites;\n\n  // This function doesn't take any arguments at the time of writing but we future-proof\n  // here in case Next.js ever decides to pass some\n  userNextConfig.rewrites = async (...args: unknown[]) => {\n    const injectedRewrite = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>.*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>.*)',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    if (typeof originalRewrites !== 'function') {\n      return [injectedRewrite];\n    }\n\n    // @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it\n    const originalRewritesResult = await originalRewrites(...args);\n\n    if (Array.isArray(originalRewritesResult)) {\n      return [injectedRewrite, ...originalRewritesResult];\n    } else {\n      return {\n        ...originalRewritesResult,\n        beforeFiles: [injectedRewrite, ...(originalRewritesResult.beforeFiles || [])],\n      };\n    }\n  };\n}\n"], "fixing_code": ["import { isThenable } from '@sentry/utils';\n\nimport type {\n  ExportedNextConfig,\n  NextConfigFunction,\n  NextConfigObject,\n  NextConfigObjectWithSentry,\n  SentryWebpackPluginOptions,\n  UserSentryOptions,\n} from './types';\nimport { constructWebpackConfigFunction } from './webpack';\n\nlet showedExportModeTunnelWarning = false;\n\n/**\n * Add Sentry options to the config to be exported from the user's `next.config.js` file.\n *\n * @param exportedUserNextConfig The existing config to be exported prior to adding Sentry\n * @param userSentryWebpackPluginOptions Configuration for SentryWebpackPlugin\n * @param sentryOptions Optional additional options to add as alternative to `sentry` property of config\n * @returns The modified config to be exported\n */\nexport function withSentryConfig(\n  exportedUserNextConfig: ExportedNextConfig = {},\n  userSentryWebpackPluginOptions: Partial<SentryWebpackPluginOptions> = {},\n  sentryOptions?: UserSentryOptions,\n): NextConfigFunction | NextConfigObject {\n  if (typeof exportedUserNextConfig === 'function') {\n    return function (this: unknown, ...webpackConfigFunctionArgs: unknown[]): ReturnType<NextConfigFunction> {\n      const maybeUserNextConfigObject: NextConfigObjectWithSentry = exportedUserNextConfig.apply(\n        this,\n        webpackConfigFunctionArgs,\n      );\n\n      if (isThenable(maybeUserNextConfigObject)) {\n        return maybeUserNextConfigObject.then(function (userNextConfigObject: NextConfigObjectWithSentry) {\n          const userSentryOptions = { ...userNextConfigObject.sentry, ...sentryOptions };\n          return getFinalConfigObject(userNextConfigObject, userSentryOptions, userSentryWebpackPluginOptions);\n        });\n      }\n\n      // Reassign for naming-consistency sake.\n      const userNextConfigObject = maybeUserNextConfigObject;\n      const userSentryOptions = { ...userNextConfigObject.sentry, ...sentryOptions };\n      return getFinalConfigObject(userNextConfigObject, userSentryOptions, userSentryWebpackPluginOptions);\n    };\n  } else {\n    const userSentryOptions = { ...exportedUserNextConfig.sentry, ...sentryOptions };\n    return getFinalConfigObject(exportedUserNextConfig, userSentryOptions, userSentryWebpackPluginOptions);\n  }\n}\n\n// Modify the materialized object form of the user's next config by deleting the `sentry` property and wrapping the\n// `webpack` property\nfunction getFinalConfigObject(\n  incomingUserNextConfigObject: NextConfigObjectWithSentry,\n  userSentryOptions: UserSentryOptions,\n  userSentryWebpackPluginOptions: Partial<SentryWebpackPluginOptions>,\n): NextConfigObject {\n  // Next 12.2.3+ warns about non-canonical properties on `userNextConfig`.\n  delete incomingUserNextConfigObject.sentry;\n\n  if (userSentryOptions?.tunnelRoute) {\n    if (incomingUserNextConfigObject.output === 'export') {\n      if (!showedExportModeTunnelWarning) {\n        showedExportModeTunnelWarning = true;\n        // eslint-disable-next-line no-console\n        console.warn(\n          '[@sentry/nextjs] The Sentry Next.js SDK `tunnelRoute` option will not work in combination with Next.js static exports. The `tunnelRoute` option uses serverside features that cannot be accessed in export mode. If you still want to tunnel Sentry events, set up your own tunnel: https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option',\n        );\n      }\n    } else {\n      setUpTunnelRewriteRules(incomingUserNextConfigObject, userSentryOptions.tunnelRoute);\n    }\n  }\n\n  return {\n    ...incomingUserNextConfigObject,\n    webpack: constructWebpackConfigFunction(\n      incomingUserNextConfigObject,\n      userSentryWebpackPluginOptions,\n      userSentryOptions,\n    ),\n  };\n}\n\n/**\n * Injects rewrite rules into the Next.js config provided by the user to tunnel\n * requests from the `tunnelPath` to Sentry.\n *\n * See https://nextjs.org/docs/api-reference/next.config.js/rewrites.\n */\nfunction setUpTunnelRewriteRules(userNextConfig: NextConfigObject, tunnelPath: string): void {\n  const originalRewrites = userNextConfig.rewrites;\n\n  // This function doesn't take any arguments at the time of writing but we future-proof\n  // here in case Next.js ever decides to pass some\n  userNextConfig.rewrites = async (...args: unknown[]) => {\n    const injectedRewrite = {\n      // Matched rewrite routes will look like the following: `[tunnelPath]?o=[orgid]&p=[projectid]`\n      // Nextjs will automatically convert `source` into a regex for us\n      source: `${tunnelPath}(/?)`,\n      has: [\n        {\n          type: 'query',\n          key: 'o', // short for orgId - we keep it short so matching is harder for ad-blockers\n          value: '(?<orgid>[a-fA-F0-9]*)',\n        },\n        {\n          type: 'query',\n          key: 'p', // short for projectId - we keep it short so matching is harder for ad-blockers\n          value: '(?<projectid>\\\\d*)',\n        },\n      ],\n      destination: 'https://o:orgid.ingest.sentry.io/api/:projectid/envelope/?hsts=0',\n    };\n\n    if (typeof originalRewrites !== 'function') {\n      return [injectedRewrite];\n    }\n\n    // @ts-expect-error Expected 0 arguments but got 1 - this is from the future-proofing mentioned above, so we don't care about it\n    const originalRewritesResult = await originalRewrites(...args);\n\n    if (Array.isArray(originalRewritesResult)) {\n      return [injectedRewrite, ...originalRewritesResult];\n    } else {\n      return {\n        ...originalRewritesResult,\n        beforeFiles: [injectedRewrite, ...(originalRewritesResult.beforeFiles || [])],\n      };\n    }\n  };\n}\n"], "filenames": ["packages/nextjs/src/config/withSentryConfig.ts"], "buggy_code_start_loc": [107], "buggy_code_end_loc": [113], "fixing_code_start_loc": [107], "fixing_code_end_loc": [113], "type": "CWE-918", "message": "sentry-javascript provides Sentry SDKs for JavaScript. An unsanitized input of Next.js SDK tunnel endpoint allows sending HTTP requests to arbitrary URLs and reflecting the response back to the user. This issue only affects users who have Next.js SDK tunneling feature enabled. The problem has been fixed in version 7.77.0.", "other": {"cve": {"id": "CVE-2023-46729", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-10T01:15:07.430", "lastModified": "2023-11-16T20:08:55.947", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "sentry-javascript provides Sentry SDKs for JavaScript. An unsanitized input of Next.js SDK tunnel endpoint allows sending HTTP requests to arbitrary URLs and reflecting the response back to the user. This issue only affects users who have Next.js SDK tunneling feature enabled. The problem has been fixed in version 7.77.0."}, {"lang": "es", "value": "sentry-javascript proporciona SDK de Sentry para JavaScript. Una entrada no sanitizada del endpoint del t\u00fanel SDK de Next.js permite enviar solicitudes HTTP a URL arbitrarias y reflejar la respuesta al usuario. Este problema solo afecta a los usuarios que tienen habilitada la funci\u00f3n de tunelizaci\u00f3n del SDK de Next.js. El problema se solucion\u00f3 en la versi\u00f3n 7.77.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.8, "impactScore": 5.8}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sentry:sentry_software_development_kit:*:*:*:*:*:next.js:*:*", "versionStartIncluding": "7.26.0", "versionEndExcluding": "7.77.0", "matchCriteriaId": "F234F1A9-2B66-4031-BDDA-53ACEF501A07"}]}]}], "references": [{"url": "https://github.com/getsentry/sentry-javascript/commit/ddbda3c02c35aba8c5235e0cf07fc5bf656f81be", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/getsentry/sentry-javascript/pull/9415", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/getsentry/sentry-javascript/security/advisories/GHSA-2rmr-xw8m-22q9", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/getsentry/sentry-javascript/commit/ddbda3c02c35aba8c5235e0cf07fc5bf656f81be"}}