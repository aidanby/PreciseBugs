{"buggy_code": ["<?php\n/* Copyright (c) 1998-2013 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once './Modules/TestQuestionPool/classes/class.assQuestionGUI.php';\nrequire_once './Modules/TestQuestionPool/interfaces/interface.ilGuiQuestionScoringAdjustable.php';\nrequire_once './Modules/TestQuestionPool/interfaces/interface.ilGuiAnswerScoringAdjustable.php';\n\n/**\n * Cloze test question GUI representation\n *\n * The assClozeTestGUI class encapsulates the GUI representation\n * for cloze test questions.\n *\n * @author\t\tHelmut Schottm\u00fcller <helmut.schottmueller@mac.com>\n * @author\t\tBj\u00f6rn Heyser <bheyser@databay.de>\n * @author\t\tMaximilian Becker <mbecker@databay.de>\n * \n * @version\t\t$Id$\n * \n * @ingroup \tModulesTestQuestionPool\n * @ilCtrl_Calls assClozeTestGUI: ilFormPropertyDispatchGUI          \n */\nclass assClozeTestGUI extends assQuestionGUI implements ilGuiQuestionScoringAdjustable, ilGuiAnswerScoringAdjustable\n{\n\tconst OLD_CLOZE_TEST_UI = false;\n\t\n\t/**\n\t* A temporary variable to store gap indexes of ilCtrl commands in the getCommand method\n\t*/\n\tprivate $gapIndex;\n\t\n\t/**\n\t* assClozeTestGUI constructor\n\t*\n\t* @param integer $id The database id of a image map question object\n\t*/\n\tpublic function __construct($id = -1)\n\t{\n\t\tparent::__construct();\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.assClozeTest.php\";\n\t\t$this->object = new assClozeTest();\n\t\tif ($id >= 0)\n\t\t{\n\t\t\t$this->object->loadFromDb($id);\n\t\t}\n\t}\n\n\tfunction getCommand($cmd)\n\t{\n\t\tif (preg_match(\"/^(removegap|addgap)_(\\d+)$/\", $cmd, $matches))\n\t\t{\n\t\t\t$cmd = $matches[1];\n\t\t\t$this->gapIndex = $matches[2];\n\t\t}\n\t\treturn $cmd;\n\t}\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tprotected function writePostData($always = false)\n\t{\n\t\t$hasErrors = (!$always) ? $this->editQuestion(true) : false;\n\t\tif (!$hasErrors)\n\t\t{\n\t\t\trequire_once 'Services/Form/classes/class.ilPropertyFormGUI.php';\n\n\t\t\t$cloze_text = $this->object->getHtmlQuestionContentPurifier()->purify($_POST['cloze_text']);\n\n\t\t\t$cloze_text = $this->removeIndizesFromGapText( $cloze_text );\n\t\t\t$_POST['cloze_text'] = $cloze_text;\n\t\t\t$this->object->setQuestion($_POST['question']);\n\n\t\t\t$this->writeQuestionGenericPostData();\n\t\t\t$this->object->setClozeText($_POST[\"cloze_text\"]);\n\t\t\t$this->writeQuestionSpecificPostData(new ilPropertyFormGUI());\n\t\t\t//$this->object->flushGaps();\n\t\t\t$this->writeAnswerSpecificPostData(new ilPropertyFormGUI());\n\t\t\t$this->saveTaxonomyAssignments();\n\t\t\treturn 0;\n\t\t}\n\n\t\t$cloze_text = $_POST['cloze_text'];\n\t\t$cloze_text = $this->applyIndizesToGapText($cloze_text);\n\t\t$_POST['cloze_text'] = $cloze_text;\n\t\treturn 1;\n\t}\n\n\tpublic function writeAnswerSpecificPostData(ilPropertyFormGUI $form)\n\t{\n\t\tif (is_array( $_POST['gap'] ))\n\t\t{\n\t\t\tif ( $this->ctrl->getCmd() != 'createGaps' )\n\t\t\t{\n\t\t\t\t$this->object->clearGapAnswers();\n\t\t\t}\n\t\t\t\n\t\t\tforeach ($_POST['gap'] as $idx => $hidden)\n\t\t\t{\n\t\t\t\t$clozetype = $_POST['clozetype_' . $idx];\n\t\t\t\t\n\t\t\t\t$this->object->setGapType( $idx, $clozetype );\n\t\t\t\t\n\t\t\t\tswitch($clozetype)\n\t\t\t\t{\n\t\t\t\t\tcase CLOZE_TEXT:\n\n\t\t\t\t\t\t$this->object->setGapShuffle( $idx, 0 );\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (is_array( $_POST['gap_' . $idx]['answer'] ))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach ($_POST['gap_' . $idx]['answer'] as $order => $value)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$this->object->addGapAnswer( $idx, $order, $value );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->addGapAnswer( $idx, 0, '' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (is_array( $_POST['gap_' . $idx]['points'] ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($_POST['gap_' . $idx]['points'] as $order => $value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->setGapAnswerPoints( $idx, $order, $value );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (array_key_exists( 'gap_' . $idx . '_gapsize', $_POST ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->object->setGapSize($idx, $order, $_POST['gap_' . $idx . '_gapsize'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase CLOZE_SELECT:\n\n\t\t\t\t\t\t$this->object->setGapShuffle( $idx, (int)(isset($_POST[\"shuffle_$idx\"]) && $_POST[\"shuffle_$idx\"]) );\n\n\t\t\t\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (is_array( $_POST['gap_' . $idx]['answer'] ))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach ($_POST['gap_' . $idx]['answer'] as $order => $value)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$this->object->addGapAnswer( $idx, $order, $value );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->addGapAnswer( $idx, 0, '' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (is_array( $_POST['gap_' . $idx]['points'] ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($_POST['gap_' . $idx]['points'] as $order => $value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->setGapAnswerPoints( $idx, $order, $value );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase CLOZE_NUMERIC:\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this->object->setGapShuffle( $idx, 0 );\n\n\t\t\t\t\t\t$gap = $this->object->getGap($idx);\n\t\t\t\t\t\tif (!$gap) break;\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this->object->getGap($idx)->clearItems();\n\n\t\t\t\t\t\tif (array_key_exists( 'gap_' . $idx . '_numeric', $_POST ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->addGapAnswer(\n\t\t\t\t\t\t\t\t\t$idx, 0, str_replace(\",\", \".\", $_POST['gap_' . $idx . '_numeric'])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$this->object->setGapAnswerLowerBound(\n\t\t\t\t\t\t\t\t$idx, 0, str_replace(\",\", \".\", $_POST['gap_' . $idx . '_numeric_lower'])\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t$this->object->setGapAnswerUpperBound(\n\t\t\t\t\t\t\t\t$idx, 0, str_replace( \",\", \".\", $_POST['gap_' . $idx . '_numeric_upper'])\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t$this->object->setGapAnswerPoints( $idx, 0, $_POST['gap_' . $idx . '_numeric_points'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->addGapAnswer($idx, 0, '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$this->object->setGapAnswerLowerBound($idx, 0, '');\n\n\t\t\t\t\t\t\t$this->object->setGapAnswerUpperBound($idx, 0, '');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (array_key_exists( 'gap_' . $idx . '_gapsize', $_POST ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->object->setGapSize($idx, $order, $_POST['gap_' . $idx . '_gapsize'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$assClozeGapCombinationObject = new assClozeGapCombination();\n\t\t\t\t$assClozeGapCombinationObject->clearGapCombinationsFromDb($this->object->getId());\n\t\t\t\tif(count($_POST['gap_combination']) > 0)\n\t\t\t\t{\n\t\t\t\t\t$assClozeGapCombinationObject->saveGapCombinationToDb($this->object->getId(),ilUtil::stripSlashesRecursive($_POST['gap_combination']), ilUtil::stripSlashesRecursive($_POST['gap_combination_values']));\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t{\n\t\t\t\t$this->object->updateClozeTextFromGaps();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function writeQuestionSpecificPostData(ilPropertyFormGUI $form)\n\t{\n\t\t$this->object->setClozeText( $_POST['cloze_text'] );\n\t\t$this->object->setTextgapRating( $_POST[\"textgap_rating\"] );\n\t\t$this->object->setIdenticalScoring( $_POST[\"identical_scoring\"] );\n\t\t$this->object->setFixedTextLength( $_POST[\"fixedTextLength\"] );\n\t}\n\n\t/**\n\t* Creates an output of the edit form for the question\n\t*\n\t* @access public\n\t*/\n\tpublic function editQuestion($checkonly = FALSE)\n\t{\n\t\t$save = $this->isSaveCommand();\n\t\t$this->getQuestionTemplate();\n\n        include_once(\"./Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$form = new ilPropertyFormGUI();\n\t\t$this->editForm = $form;\n\n\t\t$form->setFormAction($this->ctrl->getFormAction($this));\n\t\t$form->setTitle($this->outQuestionType());\n\t\t$form->setMultipart(FALSE);\n\t\t$form->setTableWidth(\"100%\");\n\t\t$form->setId(\"assclozetest\");\n\n\t\t// title, author, description, question, working time (assessment mode)\n\t\t$this->addBasicQuestionFormProperties($form);\n\t\t$this->populateQuestionSpecificFormPart( $form );\n\t\t$this->populateAnswerSpecificFormPart( $form );\n\t\t$this->populateTaxonomyFormSection($form);\n\n\t\t$this->addQuestionFormCommandButtons($form);\n\n\t\t$errors = false;\n\n\t\tif ($save)\n\t\t{\n\t\t\t$form->setValuesByPost();\n\t\t\t$errors = !$form->checkInput();\n\t\t\t$form->setValuesByPost(); \t// again, because checkInput now performs the whole stripSlashes handling and we \n\t\t\t\t\t\t\t\t\t\t// need this if we don't want to have duplication of backslashes\n\t\t\tif ($errors) $checkonly = false;\n\t\t}\n\n\t\tif (!$checkonly) $this->tpl->setVariable(\"QUESTION_DATA\", $form->getHTML());\n\t\treturn $errors;\n\t}\n\n\tfunction addBasicQuestionFormProperties($form)\n\t{\n\t\t// title\n\t\t$title = new ilTextInputGUI($this->lng->txt(\"title\"), \"title\");\n\t\t$title->setMaxLength(100);\n\t\t$title->setValue($this->object->getTitle());\n\t\t$title->setRequired(TRUE);\n\t\t$form->addItem($title);\n\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\t// author\n\t\t\t$author = new ilTextInputGUI($this->lng->txt(\"author\"), \"author\");\n\t\t\t$author->setValue($this->object->getAuthor());\n\t\t\t$author->setRequired(TRUE);\n\t\t\t$form->addItem($author);\n\n\t\t\t// description\n\t\t\t$description = new ilTextInputGUI($this->lng->txt(\"description\"), \"comment\");\n\t\t\t$description->setValue($this->object->getComment());\n\t\t\t$description->setRequired(FALSE);\n\t\t\t$form->addItem($description);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// author as hidden field\n\t\t\t$hi = new ilHiddenInputGUI(\"author\");\n\t\t\t$author = ilUtil::prepareFormOutput($this->object->getAuthor());\n\t\t\tif (trim($author) == \"\")\n\t\t\t{\n\t\t\t\t$author = \"-\";\n\t\t\t}\n\t\t\t$hi->setValue($author);\n\t\t\t$form->addItem($hi);\n\n\t\t}\n\n\t\t// questiontext\n\t\t$question = new ilTextAreaInputGUI($this->lng->txt(\"question\"), \"question\");\n\t\t$question->setValue($this->object->prepareTextareaOutput($this->object->getQuestion()));\n\t\t$question->setRequired(TRUE);\n\t\t$question->setRows(10);\n\t\t$question->setCols(80);\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\tif( $this->object->getAdditionalContentEditingMode() == assQuestion::ADDITIONAL_CONTENT_EDITING_MODE_DEFAULT )\n\t\t\t{\n\t\t\t\t$question->setUseRte(TRUE);\n\t\t\t\tinclude_once \"./Services/AdvancedEditing/classes/class.ilObjAdvancedEditing.php\";\n\t\t\t\t$question->setRteTags(ilObjAdvancedEditing::_getUsedHTMLTags(\"assessment\"));\n\t\t\t\t$question->addPlugin(\"latex\");\n\t\t\t\t$question->addButton(\"latex\");\n\t\t\t\t$question->addButton(\"pastelatex\");\n\t\t\t\t$question->setRTESupport($this->object->getId(), \"qpl\", \"assessment\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_once 'Modules/TestQuestionPool/classes/questions/class.ilAssSelfAssessmentQuestionFormatter.php';\n\t\t\t$question->setRteTags(ilAssSelfAssessmentQuestionFormatter::getSelfAssessmentTags());\n\t\t\t$question->setUseTagsForRteOnly(false);\n\t\t}\n\t\t$form->addItem($question);\n\n//\t\t$tpl = new ilTemplate(\"tpl.il_as_qpl_cloze_gap_button_code.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n//\t\t$tpl->setVariable('INSERT_GAP', $this->lng->txt('insert_gap'));\n//\t\t$tpl->setVariable('CREATE_GAPS', $this->lng->txt('create_gaps'));\n//\t\t$tpl->parseCurrentBlock();\n//\t\t$button = new ilCustomInputGUI('&nbsp;','');\n//\t\t$button->setHtml($tpl->get());\n//\t\t$form->addItem($button);\n\t\t\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\t// duration\n\t\t\t$duration = new ilDurationInputGUI($this->lng->txt(\"working_time\"), \"Estimated\");\n\t\t\t$duration->setShowHours(TRUE);\n\t\t\t$duration->setShowMinutes(TRUE);\n\t\t\t$duration->setShowSeconds(TRUE);\n\t\t\t$ewt = $this->object->getEstimatedWorkingTime();\n\t\t\t$duration->setHours($ewt[\"h\"]);\n\t\t\t$duration->setMinutes($ewt[\"m\"]);\n\t\t\t$duration->setSeconds($ewt[\"s\"]);\n\t\t\t$duration->setRequired(FALSE);\n\t\t\t$form->addItem($duration);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// number of tries\n\t\t\tif (strlen($this->object->getNrOfTries()))\n\t\t\t{\n\t\t\t\t$nr_tries = $this->object->getNrOfTries();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$nr_tries = $this->object->getDefaultNrOfTries();\n\t\t\t}\n\t\t\t/*if ($nr_tries <= 0)\n\t\t\t{\n\t\t\t\t$nr_tries = 1;\n\t\t\t}*/\n\n\t\t\tif ($nr_tries < 0)\n\t\t\t{\n\t\t\t\t$nr_tries = 0;\n\t\t\t}\n\n\t\t\t$ni = new ilNumberInputGUI($this->lng->txt(\"qst_nr_of_tries\"), \"nr_of_tries\");\n\t\t\t$ni->setValue($nr_tries);\n\t\t\t//$ni->setMinValue(1);\n\t\t\t$ni->setMinValue(0);\n\t\t\t$ni->setSize(5);\n\t\t\t$ni->setMaxLength(5);\n\t\t\t$ni->setRequired(true);\n\t\t\t$form->addItem($ni);\n\t\t}\n\t}\n\n\tpublic function populateQuestionSpecificFormPart(ilPropertyFormGUI $form)\n\t{\n\t\t// cloze text\n\t\t$cloze_text = new ilTextAreaInputGUI($this->lng->txt(\"cloze_text\"), 'cloze_text');\n\t\t$cloze_text->setRequired(true);\n\t\t$cloze_text->setValue($this->applyIndizesToGapText($this->object->getClozeText()));\n\t\t$cloze_text->setInfo($this->lng->txt(\"close_text_hint\"));\n\t\t$cloze_text->setRows( 10 );\n\t\t$cloze_text->setCols( 80 );\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\tif( $this->object->getAdditionalContentEditingMode() == assQuestion::ADDITIONAL_CONTENT_EDITING_MODE_DEFAULT )\n\t\t\t{\n\t\t\t\t$cloze_text->setUseRte(TRUE);\n\t\t\t\tinclude_once \"./Services/AdvancedEditing/classes/class.ilObjAdvancedEditing.php\";\n\t\t\t\t$cloze_text->setRteTags(ilObjAdvancedEditing::_getUsedHTMLTags(\"assessment\"));\n\t\t\t\t$cloze_text->addPlugin(\"latex\");\n\t\t\t\t$cloze_text->addButton(\"latex\");\n\t\t\t\t$cloze_text->addButton(\"pastelatex\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_once 'Modules/TestQuestionPool/classes/questions/class.ilAssSelfAssessmentQuestionFormatter.php';\n\t\t\t$cloze_text->setRteTags(ilAssSelfAssessmentQuestionFormatter::getSelfAssessmentTags());\n\t\t\t$cloze_text->setUseTagsForRteOnly(false);\n\t\t}\n\t\t$cloze_text->setRTESupport($this->object->getId(), \"qpl\", \"assessment\");\n\t\t$form->addItem($cloze_text);\n\n\t\t$tpl = new ilTemplate(\"tpl.il_as_qpl_cloze_gap_button_code.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\n\t\t$button = new ilCustomInputGUI('&nbsp;','');\n\t\trequire_once 'Services/UIComponent/SplitButton/classes/class.ilSplitButtonGUI.php';\n\t\trequire_once 'Services/UIComponent/Button/classes/class.ilJsLinkButton.php';\n\t\t$action_button = ilSplitButtonGUI::getInstance();\n\n\t\t$sb_text_gap = ilJsLinkButton::getInstance();\n\t\t$sb_text_gap->setCaption('text_gap');\n\t\t$sb_text_gap->setName('gapbutton');\n\t\t$sb_text_gap->setId('gaptrigger_text');\n\t\t$action_button->setDefaultButton($sb_text_gap);\n\n\t\t$sb_sel_gap = ilJsLinkButton::getInstance();\n\t\t$sb_sel_gap->setCaption('select_gap');\n\t\t$sb_sel_gap->setName('gapbutton_select');\n\t\t$sb_sel_gap->setId('gaptrigger_select');\n\t\t$action_button->addMenuItem(new ilButtonToSplitButtonMenuItemAdapter($sb_sel_gap));\n\n\t\t$sb_num_gap = ilJsLinkButton::getInstance();\n\t\t$sb_num_gap->setCaption('numeric_gap');\n\t\t$sb_num_gap->setName('gapbutton_numeric');\n\t\t$sb_num_gap->setId('gaptrigger_numeric');\n\t\t$action_button->addMenuItem(new ilButtonToSplitButtonMenuItemAdapter($sb_num_gap));\n\n\t\t$tpl->setVariable('BUTTON', $action_button->render());\n\t\t$tpl->parseCurrentBlock();\n\n\t\t$button->setHtml($tpl->get());\n\t\t$form->addItem($button);\n\n\t\t// text rating\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\t$textrating   = new ilSelectInputGUI($this->lng->txt( \"text_rating\" ), \"textgap_rating\");\n\t\t\t$text_options = array(\n\t\t\t\t\"ci\" => $this->lng->txt( \"cloze_textgap_case_insensitive\" ),\n\t\t\t\t\"cs\" => $this->lng->txt( \"cloze_textgap_case_sensitive\" ),\n\t\t\t\t\"l1\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"1\" ),\n\t\t\t\t\"l2\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"2\" ),\n\t\t\t\t\"l3\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"3\" ),\n\t\t\t\t\"l4\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"4\" ),\n\t\t\t\t\"l5\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"5\" )\n\t\t\t);\n\t\t\t$textrating->setOptions( $text_options );\n\t\t\t$textrating->setValue( $this->object->getTextgapRating() );\n\t\t\t$form->addItem( $textrating );\n\n\t\t\t// text field length\n\t\t\t$fixedTextLength = new ilNumberInputGUI($this->lng->txt( \"cloze_fixed_textlength\" ), \"fixedTextLength\");\n\t\t\t$ftl = $this->object->getFixedTextLength();\n\t\t\t\n\t\t\t$fixedTextLength->setValue( $ftl > 0 ? $ftl : '' );\n\t\t\t$fixedTextLength->setMinValue( 0 );\n\t\t\t$fixedTextLength->setSize( 3 );\n\t\t\t$fixedTextLength->setMaxLength( 6 );\n\t\t\t$fixedTextLength->setInfo( $this->lng->txt( 'cloze_fixed_textlength_description' ) );\n\t\t\t$fixedTextLength->setRequired( false );\n\t\t\t$form->addItem( $fixedTextLength );\n\n\t\t\t// identical scoring\n\t\t\t$identical_scoring = new ilCheckboxInputGUI($this->lng->txt( \"identical_scoring\" ), \"identical_scoring\");\n\t\t\t$identical_scoring->setValue( 1 );\n\t\t\t$identical_scoring->setChecked( $this->object->getIdenticalScoring() );\n\t\t\t$identical_scoring->setInfo( $this->lng->txt( 'identical_scoring_desc' ) );\n\t\t\t$identical_scoring->setRequired( FALSE );\n\t\t\t$form->addItem( $identical_scoring );\n\t\t}\n\t\treturn $form;\n\t}\n\n\tpublic function populateAnswerSpecificFormPart(ilPropertyFormGUI $form)\n\t{\n\t\tif(self::OLD_CLOZE_TEST_UI)\n\t\t{\n\t\t\tfor ($gapCounter = 0; $gapCounter < $this->object->getGapCount(); $gapCounter++)\n\t\t\t{\n\t\t\t\t$this->populateGapFormPart( $form, $gapCounter );\n\t\t\t}\n\t\t\treturn $form;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_once 'Modules/TestQuestionPool/classes/Form/class.ilClozeGapInputBuilderGUI.php';\n\t\t\t$json=$this->populateJSON();\n\t\t\t$assClozeGapCombinationObject = new assClozeGapCombination();\n\t\t\t$combination_exists = $assClozeGapCombinationObject->combinationExistsForQid($this->object->id);\n\t\t\tif($combination_exists)\n\t\t\t{\n\t\t\t\t$combinations = $assClozeGapCombinationObject->loadFromDb($this->object->id);\n\t\t\t}\n\t\t\t$new_builder = new ilClozeGapInputBuilderGUI();\n\t\t\t$header = new ilFormSectionHeaderGUI();\n\t\t\t$form->addItem($header);\n\t\t\t$new_builder->setValueByArray($json);\n\t\t\t$new_builder->setValueCombinationFromDb($combinations);\n\t\t\t$form->addItem($new_builder);\n\t\t\treturn $form;\n\t\t}\n\t}\n\n\tprotected function populateJSON()\n\t{\n\t\t$gap    = $this->object->getGaps();\n\t\t$array = array();\n\t\tif ($gap == null)\n\t\t{\n\t\t\treturn $array;\n\t\t}\n\t\t$translate_type=array('text','select','numeric');\n\t\t$i = 0;\n\t\tforeach ($gap as $content)\n\t\t{\n\t\t\t$shuffle=false;\n\t\t\t$value=$content->getItemsRaw();\n\t\t\t$items=array();\n\t\t\tfor($j=0;$j<count($value);$j++)\n\t\t\t{\n\t\t\t\tif($content->getType()==2)\n\t\t\t\t{\n\t\t\t\t\t$items[$j] = array(\n\t\t\t\t\t\t'answer' => $value[$j]->getAnswerText(),\n\t\t\t\t\t\t'lower'  => $value[$j]->getLowerBound(),\n\t\t\t\t\t\t'upper'  => $value[$j]->getUpperBound(),\n\t\t\t\t\t\t'points' => $value[$j]->getPoints(),\n\t\t\t\t\t\t'error'  => false\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$items[$j] = array(\n\t\t\t\t\t\t'answer' => $value[$j]->getAnswerText(),\n\t\t\t\t\t\t'points' => $value[$j]->getPoints(),\n\t\t\t\t\t\t'error' => false\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\tif($content->getType()==1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$shuffle=$content->getShuffle();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$answers[$i]=array(\n\t\t\t'type' => $translate_type[$content->getType()] ,\n\t\t\t'values' => $items ,\n\t\t\t'shuffle' => $shuffle,\n\t\t\t'text_field_length' => $content->getGapSize() > 0 ? $content->getGapSize() :  '',\n\t\t\t'used_in_gap_combination' => true);\n\t\t\t$i++;\n\t\t}\n\t\treturn $answers;\n\t}\n\t/**\n\t * Populates a gap form-part.\n\t * \n\t * This includes: A section header with the according gap-ordinal, the type select-box.\n\t * Furthermore, this method calls the gap-type-specific methods for their contents.\n\t *\n\t * @param $form\t \t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps\n\t *\n\t * @return ilPropertyFormGUI\n\t */\n\tprotected function populateGapFormPart($form, $gapCounter)\n\t{\n\t\t$gap    = $this->object->getGap( $gapCounter );\n\n\t\tif ($gap == null)\n\t\t{\n\t\t\treturn $form;\n\t\t}\n\n\t\t$header = new ilFormSectionHeaderGUI();\n\t\t$header->setTitle( $this->lng->txt( \"gap\" ) . \" \" . ($gapCounter + 1) );\n\t\t$form->addItem( $header );\n\n\t\t$gapcounter = new ilHiddenInputGUI(\"gap[$gapCounter]\");\n\t\t$gapcounter->setValue( $gapCounter );\n\t\t$form->addItem( $gapcounter );\n\n\t\t$gaptype = new ilSelectInputGUI($this->lng->txt( 'type' ), \"clozetype_$gapCounter\");\n\t\t$options = array(\n\t\t\t0 => $this->lng->txt( \"text_gap\" ),\n\t\t\t1 => $this->lng->txt( \"select_gap\" ),\n\t\t\t2 => $this->lng->txt( \"numeric_gap\" )\n\t\t);\n\t\t$gaptype->setOptions( $options );\n\t\t$gaptype->setValue( $gap->getType() );\n\t\t$form->addItem( $gaptype );\n\n\t\tif ($gap->getType() == CLOZE_TEXT)\n\t\t{\t\n\t\t\t$this->populateGapSizeFormPart($form, $gap, $gapCounter);\n\t\t\t\n\t\t\tif (count( $gap->getItemsRaw() ) == 0)\n\t\t\t\t$gap->addItem( new assAnswerCloze(\"\", 0, 0) );\n\t\t\t$this->populateTextGapFormPart( $form, $gap, $gapCounter );\n\t\t}\n\t\telse if ($gap->getType() == CLOZE_SELECT)\n\t\t{\n\t\t\tif (count( $gap->getItemsRaw() ) == 0)\n\t\t\t\t$gap->addItem( new assAnswerCloze(\"\", 0, 0) );\n\t\t\t$this->populateSelectGapFormPart( $form, $gap, $gapCounter );\n\t\t}\n\t\telse if ($gap->getType() == CLOZE_NUMERIC)\n\t\t{\n\t\t\t$this->populateGapSizeFormPart($form, $gap, $gapCounter);\n\t\t\t\n\t\t\tif (count( $gap->getItemsRaw() ) == 0)\n\t\t\t\t$gap->addItem( new assAnswerCloze(\"\", 0, 0) );\n\t\t\tforeach ($gap->getItemsRaw() as $item)\n\t\t\t{\n\t\t\t\t$this->populateNumericGapFormPart( $form, $item, $gapCounter );\n\t\t\t}\n\t\t}\n\t\treturn $form;\n\t}\n\n\t/**\n\t * @param $form\t\t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gap\t\t\tmixed\t\t\t\tRaw text gap item.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps\n\t */\n\tprotected function populateGapSizeFormPart($form, $gap, $gapCounter)\n\t{\n\t\t$gapSizeFormItem = new ilNumberInputGUI($this->lng->txt('cloze_fixed_textlength'), \"gap_\".$gapCounter.'_gapsize');\n\t\t\n\t\t$gapSizeFormItem->allowDecimals(false);\n\t\t$gapSizeFormItem->setMinValue(0);\n\t\t$gapSizeFormItem->setSize( 3 );\n\t\t$gapSizeFormItem->setMaxLength( 6 );\n\t\t$gapSizeFormItem->setInfo($this->lng->txt('cloze_gap_size_info'));\n\t\t$gapSizeFormItem->setValue($gap->getGapSize());\n\t\t$form->addItem($gapSizeFormItem);\n\t\t\n\t\treturn $form;\t\n\t}\n\t\n\t/**\n\t * Populates the form-part for a select gap.\n\t * \n\t * This includes: The AnswerWizardGUI for the individual select items and points as well as \n\t * the the checkbox for the shuffle option.\n\t *\n\t * @param $form\t\t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gap\t\t\tmixed\t\t\t\tRaw text gap item.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps\n\t *\n\t * @return ilPropertyFormGUI\n\t */\n\tprotected function populateSelectGapFormPart($form, $gap, $gapCounter)\n\t{\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.ilAnswerWizardInputGUI.php\";\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.assAnswerCloze.php\";\n\t\t$values = new ilAnswerWizardInputGUI($this->lng->txt( \"values\" ), \"gap_\" . $gapCounter . \"\");\n\t\t$values->setRequired( true );\n\t\t$values->setQuestionObject( $this->object );\n\t\t$values->setSingleline( true );\n\t\t$values->setAllowMove( false );\n\n\t\t$values->setValues( $gap->getItemsRaw() );\n\t\t$form->addItem( $values );\n\n\t\t// shuffle\n\t\t$shuffle = new ilCheckboxInputGUI($this->lng->txt( \"shuffle_answers\" ), \"shuffle_\" . $gapCounter . \"\");\n\t\t$shuffle->setValue( 1 );\n\t\t$shuffle->setChecked( $gap->getShuffle() );\n\t\t$shuffle->setRequired( FALSE );\n\t\t$form->addItem( $shuffle );\n\t\treturn $form;\n\t}\n\n\t/**\n\t * Populates the form-part for a text gap.\n\t * \n\t * This includes: The AnswerWizardGUI for the individual text answers and points.\n\t * \n\t * @param $form\t\t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gap\t\t\tmixed\t\t\t\tRaw text gap item.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps\n\t *\n\t * @return ilPropertyFormGUI\n\t */\n\tprotected function populateTextGapFormPart($form, $gap, $gapCounter)\n\t{\n\t\t// Choices\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.ilAnswerWizardInputGUI.php\";\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.assAnswerCloze.php\";\n\t\t$values = new ilAnswerWizardInputGUI($this->lng->txt( \"values\" ), \"gap_\" . $gapCounter . \"\");\n\t\t$values->setRequired( true );\n\t\t$values->setQuestionObject( $this->object );\n\t\t$values->setSingleline( true );\n\t\t$values->setAllowMove( false );\n\t\t$values->setValues( $gap->getItemsRaw() );\n\t\t$form->addItem( $values );\n\n\t\tif( $this->object->getFixedTextLength() > 0 )\n\t\t{\n\t\t\t$values->setSize( $this->object->getFixedTextLength() );\n\t\t\t$values->setMaxLength( $this->object->getFixedTextLength() );\n\t\t}\n\n\t\treturn $form;\n\t}\n\n\t/**\n\t * Populates the form-part for a numeric gap.\n\t * \n\t * This includes: The type selector, value, lower bound, upper bound and points.\n\t * \n\t * @param $form\t\t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gap\t\t\tmixed\t\t\t\tRaw numeric gap item.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps.\n\t * \n\t * @return ilPropertyFormGUI\n\t */\n\tprotected function populateNumericGapFormPart($form, $gap, $gapCounter)\n\t{\n\t\t// #8944: the js-based ouput in self-assessment cannot support formulas\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\t$value = new ilFormulaInputGUI($this->lng->txt( 'value' ), \"gap_\" . $gapCounter . \"_numeric\");\n\t\t\t$value->setInlineStyle( 'text-align: right;' );\n\n\t\t\t$lowerbound = new ilFormulaInputGUI($this->lng->txt( 'range_lower_limit'), \"gap_\" . $gapCounter . \"_numeric_lower\");\n\t\t\t$lowerbound->setInlineStyle( 'text-align: right;' );\n\n\t\t\t$upperbound = new ilFormulaInputGUI($this->lng->txt( 'range_upper_limit'), \"gap_\" . $gapCounter . \"_numeric_upper\");\n\t\t\t$upperbound->setInlineStyle( 'text-align: right;' );\n\t\t} \n\t\telse\n\t\t{\n\t\t\t$value = new ilNumberInputGUI($this->lng->txt( 'value' ), \"gap_\" . $gapCounter . \"_numeric\");\n\t\t\t$value->allowDecimals( true );\n\n\t\t\t$lowerbound = new ilNumberInputGUI($this->lng->txt( 'range_lower_limit'), \"gap_\" . $gapCounter . \"_numeric_lower\");\n\t\t\t$lowerbound->allowDecimals( true );\n\n\t\t\t$upperbound = new ilNumberInputGUI($this->lng->txt( 'range_upper_limit'), \"gap_\" . $gapCounter . \"_numeric_upper\");\n\t\t\t$upperbound->allowDecimals( true );\n\t\t}\n\t\t\n\t\t$value->setSize( 10 );\n\t\t$value->setValue( ilUtil::prepareFormOutput( $gap->getAnswertext() ) );\n\t\t$value->setRequired( true );\n\t\t$form->addItem( $value );\n\n\t\t$lowerbound->setSize( 10 );\n\t\t$lowerbound->setRequired( true );\n\t\t$lowerbound->setValue( ilUtil::prepareFormOutput( $gap->getLowerBound() ) );\n\t\t$form->addItem( $lowerbound );\n\n\t\t$upperbound->setSize( 10 );\n\t\t$upperbound->setRequired( true );\n\t\t$upperbound->setValue( ilUtil::prepareFormOutput( $gap->getUpperBound() ) );\n\t\t$form->addItem( $upperbound );\n\n\t\tif( $this->object->getFixedTextLength() > 0 )\n\t\t{\n\t\t\t$value->setSize( $this->object->getFixedTextLength() );\n\t\t\t$value->setMaxLength( $this->object->getFixedTextLength() );\n\t\t\t$lowerbound->setSize( $this->object->getFixedTextLength() );\n\t\t\t$lowerbound->setMaxLength( $this->object->getFixedTextLength() );\n\t\t\t$upperbound->setSize( $this->object->getFixedTextLength() );\n\t\t\t$upperbound->setMaxLength( $this->object->getFixedTextLength() );\n\t\t}\n\n\t\t$points = new ilNumberInputGUI($this->lng->txt( 'points' ), \"gap_\" . $gapCounter . \"_numeric_points\");\n\t\t$points->allowDecimals(true);\n\t\t$points->setSize( 3 );\n\t\t$points->setRequired( true );\n\t\t$points->setValue( ilUtil::prepareFormOutput( $gap->getPoints() ) );\n\t\t$form->addItem( $points );\n\t\treturn $form;\n\t}\n\n\t/**\n\t* Create gaps from cloze text\n\t*/\n\tpublic function createGaps()\n\t{\n\t\t$this->writePostData(true);\n\t\t$this->object->saveToDb();\n\t\t$this->editQuestion();\n\t}\n\n\t/**\n\t* Remove a gap answer\n\t*/\n\tfunction removegap()\n\t{\n\t\t$this->writePostData(true);\n\t\t$this->object->deleteAnswerText($this->gapIndex, key($_POST['cmd']['removegap_' . $this->gapIndex]));\n\t\t$this->editQuestion();\n\t}\n\n\t/**\n\t* Add a gap answer\n\t*/\n\tfunction addgap()\n\t{\n\t\t$this->writePostData(true);\n\t\t$this->object->addGapAnswer($this->gapIndex, key($_POST['cmd']['addgap_' . $this->gapIndex])+1, \"\");\n\t\t$this->editQuestion();\n\t}\n\n\t/**\n\t * Creates a preview output of the question\n\t *\n\t * @param bool $show_question_only\n\t *\n\t * @return string HTML code which contains the preview output of the question\n\t * @access public\n\t */\n\tfunction getPreview($show_question_only = FALSE, $showInlineFeedback = false)\n\t{\n\t\t$user_solution = is_object($this->getPreviewSession()) ? (array)$this->getPreviewSession()->getParticipantsSolution() : array();\n\t\t\n\t\t// generate the question output\n\t\tinclude_once \"./Services/UICore/classes/class.ilTemplate.php\";\n\t\t$template = new ilTemplate(\"tpl.il_as_qpl_cloze_question_output.html\", TRUE, TRUE, \"Modules/TestQuestionPool\"); \n\t\t$output = $this->object->getClozeText();\n\t\tforeach ($this->object->getGaps() as $gap_index => $gap)\n\t\t{\n\t\t\tswitch ($gap->getType())\n\t\t\t{\n\t\t\t\tcase CLOZE_TEXT:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_text.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\n\t\t\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\t\t\t\t\tif($gap_size > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock('size_and_maxlength');\n\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_GAP_SIZE\", $gap_size);\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\tforeach ($user_solution as $val1 => $val2)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (strcmp($val1, $gap_index) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"VALUE_GAP\", \" value=\\\"\" . ilUtil::prepareFormOutput($val2) . \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_SELECT:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_select.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\tforeach ($gap->getItems($this->object->getShuffler()) as $item)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"select_gap_option\");\n\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_VALUE\", $item->getOrder());\n\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_TEXT\", ilUtil::prepareFormOutput($item->getAnswerText()));\n\t\t\t\t\t\tforeach ($user_solution as $val1 => $val2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (strcmp($val1, $gap_index) == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (strcmp($val2, $item->getOrder()) == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_SELECTED\", \" selected=\\\"selected\\\"\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t$gaptemplate->setVariable(\"PLEASE_SELECT\", $this->lng->txt(\"please_select\"));\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_NUMERIC:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_numeric.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\t\t\t\t\tif($gap_size > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock('size_and_maxlength');\n\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_GAP_SIZE\", $gap_size);\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\tforeach ($user_solution as $val1 => $val2)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (strcmp($val1, $gap_index) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"VALUE_GAP\", \" value=\\\"\" . ilUtil::prepareFormOutput($val2) . \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$template->setVariable(\"QUESTIONTEXT\",$this->object->prepareTextareaOutput( $this->object->getQuestion(), true));\n\t\t$template->setVariable(\"CLOZETEXT\", $this->object->prepareTextareaOutput($output, TRUE));\n\t\t$questionoutput = $template->get();\n\t\tif (!$show_question_only)\n\t\t{\n\t\t\t// get page object output\n\t\t\t$questionoutput = $this->getILIASPage($questionoutput);\n\t\t}\n\t\treturn $questionoutput;\n\t}\n\n\t/**\n\t * Get the question solution output\n\t *\n\t * @param integer $active_id             The active user id\n\t * @param integer $pass                  The test pass\n\t * @param boolean $graphicalOutput       Show visual feedback for right/wrong answers\n\t * @param boolean $result_output         Show the reached points for parts of the question\n\t * @param boolean $show_question_only    Show the question without the ILIAS content around\n\t * @param boolean $show_feedback         Show the question feedback\n\t * @param boolean $show_correct_solution Show the correct solution instead of the user solution\n\t * @param boolean $show_manual_scoring   Show specific information for the manual scoring output\n\t * @param bool    $show_question_text\n\t *\n\t * @return string The solution output of the question as HTML code\n\t */\n\tfunction getSolutionOutput(\n\t\t\t\t$active_id,\n\t\t\t\t$pass = NULL,\n\t\t\t\t$graphicalOutput = FALSE,\n\t\t\t\t$result_output = FALSE,\n\t\t\t\t$show_question_only = TRUE,\n\t\t\t\t$show_feedback = FALSE,\n\t\t\t\t$show_correct_solution = FALSE,\n\t\t\t\t$show_manual_scoring = FALSE,\n\t\t\t\t$show_question_text = TRUE\n\t)\n\t{\n\t\t// get the solution of the user for the active pass or from the last pass if allowed\n\t\t$user_solution = array();\n\t\tif (($active_id > 0) && (!$show_correct_solution))\n\t\t{\n\t\t\t// get the solutions of a user\n\t\t\t$user_solution =& $this->object->getSolutionValues($active_id, $pass);\n\t\t\tif(!is_array($user_solution))\n\t\t\t{\n\t\t\t\t$user_solution = array();\n\t\t\t}\n\t\t}\n\n\t\tinclude_once \"./Services/UICore/classes/class.ilTemplate.php\";\n\t\t$template = new ilTemplate(\"tpl.il_as_qpl_cloze_question_output_solution.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t$output = $this->object->getClozeText();\n\t\tforeach ($this->object->getGaps() as $gap_index => $gap)\n\t\t{\n\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_output_solution_gap.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t$found = array();\n\t\t\tforeach ($user_solution as $solutionarray)\n\t\t\t{\n\t\t\t\tif ($solutionarray[\"value1\"] == $gap_index) $found = $solutionarray;\n\t\t\t}\n\n\t\t\tif ($active_id)\n\t\t\t{\n\t\t\t\tif ($graphicalOutput)\n\t\t\t\t{\n\t\t\t\t\t// output of ok/not ok icons for user entered solutions\n\t\t\t\t\t$details = $this->object->calculateReachedPoints($active_id, $pass, true, TRUE);\n\t\t\t\t\t$check = $details[$gap_index];\n\t\t\t\t\t\n\t\t\t\t\t$assClozeGapCombinationObject \t= new assClozeGapCombination();\n\t\t\t\t\t$check_for_gap_combinations \t= $assClozeGapCombinationObject->loadFromDb($this->object->getId());\n\t\t\t\t\tif(count($check_for_gap_combinations) != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaps_used_in_combination = $assClozeGapCombinationObject->getGapsWhichAreUsedInCombination($this->object->getId());\n\t\t\t\t\t\t$custom_user_solution = array();\n\t\t\t\t\t\tif(array_key_exists($gap_index, $gaps_used_in_combination))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$combination_id = $gaps_used_in_combination[$gap_index];\n\t\t\t\t\t\t\tforeach($gaps_used_in_combination as $key => $value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$a = 0;\n\t\t\t\t\t\t\t\tif($value == $combination_id)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tforeach($user_solution as $solution_key => $solution_value)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif($solution_value['value1'] == $key)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$result_row = array();\n\t\t\t\t\t\t\t\t\t\t\t$result_row['gap_id'] = $solution_value['value1'];\n\t\t\t\t\t\t\t\t\t\t\t$result_row['value'] = $solution_value['value2'];\n\t\t\t\t\t\t\t\t\t\t\tarray_push($custom_user_solution, $result_row);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$points_array = $this->object->calculateCombinationResult($custom_user_solution);\n\t\t\t\t\t\t\t$max_combination_points\t= $assClozeGapCombinationObject->getMaxPointsForCombination($this->object->getId(), $combination_id);\n\t\t\t\t\t\t\tif($points_array[0] == $max_combination_points)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_OK\", ilUtil::getImagePath(\"icon_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_OK\", $this->lng->txt(\"answer_is_right\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if($points_array[0] > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_mostly_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_not_correct_but_positive\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_not_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_wrong\"));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($check[\"best\"])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"icon_ok\");\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_OK\", ilUtil::getImagePath(\"icon_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_OK\", $this->lng->txt(\"answer_is_right\"));\n\t\t\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"icon_not_ok\");\n\t\t\t\t\t\t\t\tif ($check[\"positive\"])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_mostly_ok.svg\"));\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_not_correct_but_positive\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_not_ok.svg\"));\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_wrong\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($check[\"best\"])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"icon_ok\");\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_OK\", ilUtil::getImagePath(\"icon_ok.svg\"));\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_OK\", $this->lng->txt(\"answer_is_right\"));\n\t\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"icon_not_ok\");\n\t\t\t\t\t\t\tif ($check[\"positive\"])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_mostly_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_not_correct_but_positive\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_not_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_wrong\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($result_output)\n\t\t\t{\n\t\t\t\t$points = $this->object->getMaximumGapPoints($gap_index);\n\t\t\t\t$resulttext = ($points == 1) ? \"(%s \" . $this->lng->txt(\"point\") . \")\" : \"(%s \" . $this->lng->txt(\"points\") . \")\"; \n\t\t\t\t$gaptemplate->setCurrentBlock(\"result_output\");\n\t\t\t\t$gaptemplate->setVariable(\"RESULT_OUTPUT\", sprintf($resulttext, $points));\n\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t}\n\t\t\tswitch ($gap->getType())\n\t\t\t{\n\t\t\t\tcase CLOZE_TEXT:\n\t\t\t\t\t$solutiontext = \"\";\n\t\t\t\t\tif (($active_id > 0) && (!$show_correct_solution))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((count($found) == 0) || (strlen(trim($found[\"value2\"])) == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ($chars = 0; $chars < $gap->getMaxWidth(); $chars++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$solutiontext .= \"&nbsp;\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($found[\"value2\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($gap->getBestSolutionOutput(\n\t\t\t\t\t\t\t$this->object->getShuffler()\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\t$this->populateSolutiontextToGapTpl($gaptemplate, $gap, $solutiontext);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_SELECT:\n\t\t\t\t\t$solutiontext = \"\";\n\t\t\t\t\tif (($active_id > 0) && (!$show_correct_solution))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((count($found) == 0) || (strlen(trim($found[\"value2\"])) == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ($chars = 0; $chars < $gap->getMaxWidth(); $chars++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$solutiontext .= \"&nbsp;\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$item = $gap->getItem($found[\"value2\"]);\n\t\t\t\t\t\t\tif (is_object($item))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($item->getAnswertext());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor ($chars = 0; $chars < $gap->getMaxWidth(); $chars++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$solutiontext .= \"&nbsp;\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($gap->getBestSolutionOutput(\n\t\t\t\t\t\t\t$this->object->getShuffler()\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\t$this->populateSolutiontextToGapTpl($gaptemplate, $gap, $solutiontext);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_NUMERIC:\n\t\t\t\t\t$solutiontext = \"\";\n\t\t\t\t\tif (($active_id > 0) && (!$show_correct_solution))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((count($found) == 0) || (strlen(trim($found[\"value2\"])) == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ($chars = 0; $chars < $gap->getMaxWidth(); $chars++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$solutiontext .= \"&nbsp;\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($found[\"value2\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($gap->getBestSolutionOutput(\n\t\t\t\t\t\t\t$this->object->getShuffler()\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\t$this->populateSolutiontextToGapTpl($gaptemplate, $gap, $solutiontext);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($show_question_text)\n\t\t{\n\t\t\t$template->setVariable(\n\t\t\t\t\"QUESTIONTEXT\", $this->object->prepareTextareaOutput($this->object->getQuestion(), true)\n\t\t\t);\n\t\t}\n\n\t\t$template->setVariable(\"CLOZETEXT\", $this->object->prepareTextareaOutput($output, TRUE));\n\t\t// generate the question output\n\t\t$solutiontemplate = new ilTemplate(\"tpl.il_as_tst_solution_output.html\",TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t$questionoutput = $template->get();\n\n\t\t$feedback = '';\n\t\tif($show_feedback)\n\t\t{\n\t\t\tif( !$this->isTestPresentationContext() )\n\t\t\t{\n\t\t\t\t$fb = $this->getGenericFeedbackOutput($active_id, $pass);\n\t\t\t\t$feedback .= strlen($fb) ? $fb : '';\n\t\t\t}\n\t\t\t\n\t\t\t$fb = $this->getSpecificFeedbackOutput($active_id, $pass);\n\t\t\t$feedback .=  strlen($fb) ? $fb : '';\n\t\t}\n\t\tif (strlen($feedback))\n\t\t{\n\t\t\t$cssClass = ( $this->hasCorrectSolution($active_id, $pass) ?\n\t\t\t\tilAssQuestionFeedback::CSS_CLASS_FEEDBACK_CORRECT : ilAssQuestionFeedback::CSS_CLASS_FEEDBACK_WRONG\n\t\t\t);\n\t\t\t\n\t\t\t$solutiontemplate->setVariable(\"ILC_FB_CSS_CLASS\", $cssClass);\n\t\t\t$solutiontemplate->setVariable(\"FEEDBACK\", $this->object->prepareTextareaOutput( $feedback, true ));\n\t\t}\n\t\t\n\t\t$solutiontemplate->setVariable(\"SOLUTION_OUTPUT\", $questionoutput);\n\n\t\t$solutionoutput = $solutiontemplate->get();\n\n\t\tif (!$show_question_only)\n\t\t{\n\t\t\t// get page object output\n\t\t\t$solutionoutput = $this->getILIASPage($solutionoutput);\n\t\t}\n\t\t\n\t\treturn $solutionoutput;\n\t}\n\n\tpublic function getAnswerFeedbackOutput($active_id, $pass)\n\t{\n\t\tinclude_once \"./Modules/Test/classes/class.ilObjTest.php\";\n\t\t$manual_feedback = ilObjTest::getManualFeedback($active_id, $this->object->getId(), $pass);\n\t\tif (strlen($manual_feedback))\n\t\t{\n\t\t\treturn $manual_feedback;\n\t\t}\n\t\t$correct_feedback = $this->object->feedbackOBJ->getGenericFeedbackTestPresentation($this->object->getId(), true);\n\t\t$incorrect_feedback = $this->object->feedbackOBJ->getGenericFeedbackTestPresentation($this->object->getId(), false);\n\t\tif (strlen($correct_feedback.$incorrect_feedback))\n\t\t{\n\t\t\t$reached_points = $this->object->calculateReachedPoints($active_id, $pass);\n\t\t\t$max_points = $this->object->getMaximumPoints();\n\t\t\tif ($reached_points == $max_points)\n\t\t\t{\n\t\t\t\t$output .= $correct_feedback;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$output .= $incorrect_feedback;\n\t\t\t}\n\t\t}\n\t\t$test = new ilObjTest($this->object->active_id);\n\t\treturn $this->object->prepareTextareaOutput($output, TRUE);\t\t\n\t}\n\t\n\tfunction getTestOutput(\n\t\t\t\t$active_id, \n\t\t\t\t// hey: prevPassSolutions - will be always available from now on\n\t\t\t\t$pass,\n\t\t\t\t// hey.\n\t\t\t\t$is_postponed = FALSE, \n\t\t\t\t$use_post_solutions = FALSE, \n\t\t\t\t$show_feedback = FALSE\n\t)\n\t{\n\t\t// get the solution of the user for the active pass or from the last pass if allowed\n\t\t$user_solution = array();\n\t\tif ($active_id)\n\t\t{\n\t\t\t// hey: prevPassSolutions - obsolete due to central check\n\t\t\t#include_once \"./Modules/Test/classes/class.ilObjTest.php\";\n\t\t\t#if (!ilObjTest::_getUsePreviousAnswers($active_id, true))\n\t\t\t#{\n\t\t\t#\tif (is_null($pass)) $pass = ilObjTest::_getPass($active_id);\n\t\t\t#}\n\t\t\t$user_solution = $this->object->getTestOutputSolutions($active_id, $pass);\n\t\t\t// hey.\n\t\t\tif (!is_array($user_solution)) \n\t\t\t{\n\t\t\t\t$user_solution = array();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// generate the question output\n\t\tinclude_once \"./Services/UICore/classes/class.ilTemplate.php\";\n\t\t$template = new ilTemplate(\"tpl.il_as_qpl_cloze_question_output.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t$output = $this->object->getClozeText();\n\t\tforeach ($this->object->getGaps() as $gap_index => $gap)\n\t\t{\n\t\t\tswitch ($gap->getType())\n\t\t\t{\n\t\t\t\tcase CLOZE_TEXT:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_text.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\n\t\t\t\t\tif($gap_size > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock('size_and_maxlength');\n\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_GAP_SIZE\", $gap_size);\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\tforeach ($user_solution as $solution)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (strcmp($solution[\"value1\"], $gap_index) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"VALUE_GAP\", \" value=\\\"\" . ilUtil::prepareFormOutput($solution[\"value2\"]) . \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_SELECT:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_select.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\tforeach ($gap->getItems($this->object->getShuffler()) as $item)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"select_gap_option\");\n\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_VALUE\", $item->getOrder());\n\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_TEXT\", ilUtil::prepareFormOutput($item->getAnswerText()));\n\t\t\t\t\t\tforeach ($user_solution as $solution)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (strcmp($solution[\"value1\"], $gap_index) == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (strcmp($solution[\"value2\"], $item->getOrder()) == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_SELECTED\", \" selected=\\\"selected\\\"\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t$gaptemplate->setVariable(\"PLEASE_SELECT\", $this->lng->txt(\"please_select\"));\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_NUMERIC:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_numeric.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\t\t\t\t\tif($gap_size > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock('size_and_maxlength');\n\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_GAP_SIZE\", $gap_size);\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\tforeach ($user_solution as $solution)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (strcmp($solution[\"value1\"], $gap_index) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"VALUE_GAP\", \" value=\\\"\" . ilUtil::prepareFormOutput($solution[\"value2\"]) . \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t$template->setVariable(\"QUESTIONTEXT\", $this->object->prepareTextareaOutput($this->object->getQuestion(), true));\n\t\t$template->setVariable(\"CLOZETEXT\", $this->object->prepareTextareaOutput($output, TRUE));\n\t\t$questionoutput = $template->get();\n\t\t$pageoutput = $this->outQuestionPage(\"\", $is_postponed, $active_id, $questionoutput);\n\t\treturn $pageoutput;\n\t}\n\n\t/**\n\t * Sets the ILIAS tabs for this question type\n\t *\n\t * @access public\n\t * \n\t * @todo:\tMOVE THIS STEPS TO COMMON QUESTION CLASS assQuestionGUI\n\t */\n\tpublic function setQuestionTabs()\n\t{\n\t\tglobal $rbacsystem, $ilTabs;\n\n\t\t$ilTabs->clearTargets();\n\t\t\n\t\t$this->ctrl->setParameterByClass(\"ilAssQuestionPageGUI\", \"q_id\", $_GET[\"q_id\"]);\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.assQuestion.php\";\n\t\t$q_type = $this->object->getQuestionType();\n\n\t\tif (strlen($q_type))\n\t\t{\n\t\t\t$classname = $q_type . \"GUI\";\n\t\t\t$this->ctrl->setParameterByClass(strtolower($classname), \"sel_question_types\", $q_type);\n\t\t\t$this->ctrl->setParameterByClass(strtolower($classname), \"q_id\", $_GET[\"q_id\"]);\n#\t\t\t$this->ctrl->setParameterByClass(strtolower($classname), 'prev_qid', $_REQUEST['prev_qid']);\n\t\t}\n\n\t\tif ($_GET[\"q_id\"])\n\t\t{\n\t\t\tif ($rbacsystem->checkAccess('write', $_GET[\"ref_id\"]))\n\t\t\t{\n\t\t\t\t// edit page\n\t\t\t\t$ilTabs->addTarget(\"edit_page\",\n\t\t\t\t\t$this->ctrl->getLinkTargetByClass(\"ilAssQuestionPageGUI\", \"edit\"),\n\t\t\t\t\tarray(\"edit\", \"insert\", \"exec_pg\"),\n\t\t\t\t\t\"\", \"\", $force_active);\n\t\t\t}\n\t\t\t\n\t\t\t$this->addTab_QuestionPreview($ilTabs);\n\t\t}\n\n\t\t$force_active = false;\n\t\t$commands = $_POST[\"cmd\"];\n\t\tif (is_array($commands))\n\t\t{\n\t\t\tforeach ($commands as $key => $value)\n\t\t\t{\n\t\t\t\tif (preg_match(\"/^removegap_.*/\", $key, $matches) || \n\t\t\t\t\tpreg_match(\"/^addgap_.*/\", $key, $matches)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t$force_active = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($rbacsystem->checkAccess('write', $_GET[\"ref_id\"]))\n\t\t{\n\t\t\t$url = \"\";\n\t\t\tif ($classname) $url = $this->ctrl->getLinkTargetByClass($classname, \"editQuestion\");\n\t\t\t// edit question properties\n\t\t\t$ilTabs->addTarget(\"edit_question\",\n\t\t\t\t$url,\n\t\t\t\tarray(\"editQuestion\", \"originalSyncForm\", \"save\", \"createGaps\", \"saveEdit\"),\n\t\t\t\t$classname, \"\", $force_active);\n\t\t}\n\n\t\t// add tab for question feedback within common class assQuestionGUI\n\t\t$this->addTab_QuestionFeedback($ilTabs);\n\t\t\n\t\t// add tab for question hint within common class assQuestionGUI\n\t\t$this->addTab_QuestionHints($ilTabs);\n\n\t\t// add tab for question's suggested solution within common class assQuestionGUI\n\t\t$this->addTab_SuggestedSolution($ilTabs, $classname);\n\n\t\t// Assessment of questions sub menu entry\n\t\tif ($_GET[\"q_id\"])\n\t\t{\n\t\t\t$ilTabs->addTarget(\"statistics\",\n\t\t\t\t$this->ctrl->getLinkTargetByClass($classname, \"assessment\"),\n\t\t\t\tarray(\"assessment\"),\n\t\t\t\t$classname, \"\");\n\t\t}\n\n\t\t$this->addBackTab($ilTabs);\n\t}\n\t\n\tfunction getSpecificFeedbackOutput($active_id, $pass)\n\t{\n\t\tif( !$this->object->feedbackOBJ->specificAnswerFeedbackExists(array_values($this->object->gaps)) )\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\tglobal $lng;\n\n\t\t$feedback = '<table class=\"test_specific_feedback\"><tbody>';\n\n\t\tforeach ($this->object->gaps as $index => $answer)\n\t\t{\n\t\t\t$caption = $lng->txt('gap').' '.($index+1) .': ';\n\n\t\t\t$feedback .= '<tr><td>';\n\n\t\t\t$feedback .= $caption .'</td><td>';\n\t\t\t$feedback .= $this->object->feedbackOBJ->getSpecificAnswerFeedbackTestPresentation(\n\t\t\t\t\t$this->object->getId(), $index\n\t\t\t) . '</td> </tr>';\n\t\t}\n\t\t$feedback .= '</tbody></table>';\n\n\t\treturn $this->object->prepareTextareaOutput($feedback, TRUE);\n\t}\n\n\t/**\n\t * Returns a list of postvars which will be suppressed in the form output when used in scoring adjustment.\n\t * The form elements will be shown disabled, so the users see the usual form but can only edit the settings, which\n\t * make sense in the given context.\n\t *\n\t * E.g. array('cloze_type', 'image_filename')\n\t *\n\t * @return string[]\n\t */\n\tpublic function getAfterParticipationSuppressionAnswerPostVars()\n\t{\n\t\treturn array();\n\t}\n\n\t/**\n\t * Returns a list of postvars which will be suppressed in the form output when used in scoring adjustment.\n\t * The form elements will be shown disabled, so the users see the usual form but can only edit the settings, which\n\t * make sense in the given context.\n\t *\n\t * E.g. array('cloze_type', 'image_filename')\n\t *\n\t * @return string[]\n\t */\n\tpublic function getAfterParticipationSuppressionQuestionPostVars()\n\t{\n\t\treturn array();\n\t}\n\n\t/**\n\t * Returns an html string containing a question specific representation of the answers so far\n\t * given in the test for use in the right column in the scoring adjustment user interface.\n\t *\n\t * @param array $relevant_answers\n\t *\n\t * @return string\n\t */\n\tpublic function getAggregatedAnswersView($relevant_answers)\n\t{\n\t\t$overview = array();\n\t\t$aggregation = array();\n\t\tforeach ($relevant_answers as $answer)\n\t\t{\n\t\t\t$overview[$answer['active_fi']][$answer['pass']][$answer['value1']] = $answer['value2'];\n\t\t}\n\n\t\tforeach($overview as $active)\n\t\t{\n\t\t\tforeach ($active as $answer)\n\t\t\t{\n\t\t\t\tforeach ($answer as $option => $value)\n\t\t\t\t{\n\t\t\t\t\t$aggregation[$option][$value] = $aggregation[$option][$value] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$html = '<div>';\n\t\t$i = 0;\n\t\tforeach ($this->object->getGaps() as $gap)\n\t\t{\n\t\t\tif ($gap->type == CLOZE_SELECT)\n\t\t\t{\n\t\t\t\t$html .= '<p>Gap '. ($i+1) . ' - SELECT</p>';\n\t\t\t\t$html .= '<ul>';\n\t\t\t\t$j = 0;\n\t\t\t\tforeach($gap->getItems($this->object->getShuffler()) as $gap_item)\n\t\t\t\t{\n\t\t\t\t\t$aggregate = $aggregation[$i];\n\t\t\t\t\t$html .= '<li>' . $gap_item->getAnswerText() . ' - ' . ($aggregate[$j] ? $aggregate[$j] : 0) . '</li>';\n\t\t\t\t\t$j++;\n\t\t\t\t}\n\t\t\t\t$html .= '</ul>';\n\t\t\t}\n\n\t\t\tif($gap->type == CLOZE_TEXT)\n\t\t\t{\n\t\t\t\t$present_elements = array();\n\t\t\t\tforeach($gap->getItems(new ilArrayElementShuffler()) as $item)\n\t\t\t\t{\n\t\t\t\t\t/** @var assAnswerCloze $item */\n\t\t\t\t\t$present_elements[] = $item->getAnswertext();\n\t\t\t\t}\n\n\t\t\t\t$html .= '<p>Gap ' . ($i+1) . ' - TEXT</p>';\n\t\t\t\t$html .= '<ul>';\n\t\t\t\t$aggregate = (array)$aggregation[$i];\n\t\t\t\tforeach($aggregate as $answer => $count)\n\t\t\t\t{\n\t\t\t\t\t$show_mover = '';\n\t\t\t\t\tif(in_array($answer, $present_elements))\n\t\t\t\t\t{\n\t\t\t\t\t\t$show_mover = ' style=\"display: none;\" ';\n\t\t\t\t\t}\n\n\t\t\t\t\t$html .= '<li>' . $answer . ' - ' . $count\n\t\t\t\t\t\t. '&nbsp;<button class=\"clone_fields_add btn btn-link\" ' . $show_mover . ' data-answer=\"'.$answer.'\" name=\"add_gap_'.$i.'_0\">\n\t\t\t\t\t\t<span class=\"sr-only\"></span><span class=\"glyphicon glyphicon-plus\"></span></button>\n\t\t\t\t\t\t</li>';\n\t\t\t\t}\n\t\t\t\t$html .= '</ul>';\n\t\t\t}\n\n\t\t\tif($gap->type == CLOZE_NUMERIC)\n\t\t\t{\n\t\t\t\t$html .= '<p>Gap ' . ($i+1) . ' - NUMERIC</p>';\n\t\t\t\t$html .= '<ul>';\n\t\t\t\t$j = 0;\n\t\t\t\tforeach($gap->getItems($this->object->getShuffler()) as $gap_item)\n\t\t\t\t{\n\t\t\t\t\t$aggregate = (array)$aggregation[$i];\n\t\t\t\t\tforeach($aggregate as $answer => $count)\n\t\t\t\t\t{\n\t\t\t\t\t\t$html .= '<li>' . $answer . ' - ' . $count . '</li>';\n\t\t\t\t\t}\n\t\t\t\t\t$j++;\n\t\t\t\t}\n\t\t\t\t$html .= '</ul>';\n\t\t\t}\n\t\t\t$i++;\n\t\t\t$html .= '<hr />';\n\t\t}\n\n\t\t$html .= '</div>';\n\t\treturn $html;\n\t}\n\n\tpublic function applyIndizesToGapText( $question_text )\n\t{\n\t\t$parts\t= explode( '[gap', $question_text );\n\t\t$i = 0;\n\t\t$question_text = '';\n\t\tforeach ( $parts as $part )\n\t\t{\n\t\t\tif ( $i == 0 )\n\t\t\t{\n\t\t\t\t$question_text .= $part;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$question_text .= '[gap ' . $i . $part;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\treturn $question_text;\n\t}\n\n\tpublic function removeIndizesFromGapText( $question_text )\n\t{\n\t\t$parts         = preg_split( '/\\[gap \\d*\\]/', $question_text );\n\t\t$question_text = implode( '[gap]', $parts );\n\t\treturn $question_text;\n\t}\n\n\t/**\n\t * @param $gaptemplate\n\t * @param $solutiontext\n\t */\n\tprivate function populateSolutiontextToGapTpl($gaptemplate, $gap, $solutiontext)\n\t{\n\t\tif( $this->renderPurposeSupportsFormHtml() )\n\t\t{\n\t\t\t$gaptemplate->setCurrentBlock('gap_span');\n\t\t\t$gaptemplate->setVariable('SPAN_SOLUTION', $solutiontext);\n\t\t}\n\t\telseif($gap->getType() == CLOZE_SELECT)\n\t\t{\n\t\t\t$gaptemplate->setCurrentBlock('gap_select');\n\t\t\t$gaptemplate->setVariable('SELECT_SOLUTION', $solutiontext);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\t\t\t\n\t\t\tif($gap_size > 0)\n\t\t\t{\n\t\t\t\t$gaptemplate->setCurrentBlock('gap_size');\n\t\t\t\t$gaptemplate->setVariable(\"GAP_SIZE\", $gap_size);\n\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t}\n\t\t\t\n\t\t\t$gaptemplate->setCurrentBlock('gap_input');\n\t\t\t$gaptemplate->setVariable('INPUT_SOLUTION', $solutiontext);\n\t\t}\n\t\t\n\t\t\n\t\t$gaptemplate->parseCurrentBlock();\n\t}\n}"], "fixing_code": ["<?php\n/* Copyright (c) 1998-2013 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once './Modules/TestQuestionPool/classes/class.assQuestionGUI.php';\nrequire_once './Modules/TestQuestionPool/interfaces/interface.ilGuiQuestionScoringAdjustable.php';\nrequire_once './Modules/TestQuestionPool/interfaces/interface.ilGuiAnswerScoringAdjustable.php';\n\n/**\n * Cloze test question GUI representation\n *\n * The assClozeTestGUI class encapsulates the GUI representation\n * for cloze test questions.\n *\n * @author\t\tHelmut Schottm\u00fcller <helmut.schottmueller@mac.com>\n * @author\t\tBj\u00f6rn Heyser <bheyser@databay.de>\n * @author\t\tMaximilian Becker <mbecker@databay.de>\n * \n * @version\t\t$Id$\n * \n * @ingroup \tModulesTestQuestionPool\n * @ilCtrl_Calls assClozeTestGUI: ilFormPropertyDispatchGUI          \n */\nclass assClozeTestGUI extends assQuestionGUI implements ilGuiQuestionScoringAdjustable, ilGuiAnswerScoringAdjustable\n{\n\tconst OLD_CLOZE_TEST_UI = false;\n\t\n\t/**\n\t* A temporary variable to store gap indexes of ilCtrl commands in the getCommand method\n\t*/\n\tprivate $gapIndex;\n\t\n\t/**\n\t* assClozeTestGUI constructor\n\t*\n\t* @param integer $id The database id of a image map question object\n\t*/\n\tpublic function __construct($id = -1)\n\t{\n\t\tparent::__construct();\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.assClozeTest.php\";\n\t\t$this->object = new assClozeTest();\n\t\tif ($id >= 0)\n\t\t{\n\t\t\t$this->object->loadFromDb($id);\n\t\t}\n\t}\n\n\tfunction getCommand($cmd)\n\t{\n\t\tif (preg_match(\"/^(removegap|addgap)_(\\d+)$/\", $cmd, $matches))\n\t\t{\n\t\t\t$cmd = $matches[1];\n\t\t\t$this->gapIndex = $matches[2];\n\t\t}\n\t\treturn $cmd;\n\t}\n\n\t/**\n\t * {@inheritdoc}\n\t */\n\tprotected function writePostData($always = false)\n\t{\n\t\t$hasErrors = (!$always) ? $this->editQuestion(true) : false;\n\t\tif (!$hasErrors)\n\t\t{\n\t\t\trequire_once 'Services/Form/classes/class.ilPropertyFormGUI.php';\n\n\t\t\t$cloze_text = $this->object->getHtmlQuestionContentPurifier()->purify($_POST['cloze_text']);\n\n\t\t\t$cloze_text = $this->removeIndizesFromGapText( $cloze_text );\n\t\t\t$_POST['cloze_text'] = $cloze_text;\n\t\t\t$this->object->setQuestion($_POST['question']);\n\n\t\t\t$this->writeQuestionGenericPostData();\n\t\t\t$this->object->setClozeText($_POST[\"cloze_text\"]);\n\t\t\t$this->writeQuestionSpecificPostData(new ilPropertyFormGUI());\n\t\t\t//$this->object->flushGaps();\n\t\t\t$this->writeAnswerSpecificPostData(new ilPropertyFormGUI());\n\t\t\t$this->saveTaxonomyAssignments();\n\t\t\treturn 0;\n\t\t}\n\n\t\t$cloze_text = $_POST['cloze_text'];\n\t\t$cloze_text = $this->applyIndizesToGapText($cloze_text);\n\t\t$_POST['cloze_text'] = $cloze_text;\n\t\treturn 1;\n\t}\n\n\tpublic function writeAnswerSpecificPostData(ilPropertyFormGUI $form)\n\t{\n\t\tif (is_array( $_POST['gap'] ))\n\t\t{\n\t\t\tif ( $this->ctrl->getCmd() != 'createGaps' )\n\t\t\t{\n\t\t\t\t$this->object->clearGapAnswers();\n\t\t\t}\n\t\t\t\n\t\t\tforeach ($_POST['gap'] as $idx => $hidden)\n\t\t\t{\n\t\t\t\t$clozetype = $_POST['clozetype_' . $idx];\n\t\t\t\t\n\t\t\t\t$this->object->setGapType( $idx, $clozetype );\n\t\t\t\t\n\t\t\t\tswitch($clozetype)\n\t\t\t\t{\n\t\t\t\t\tcase CLOZE_TEXT:\n\n\t\t\t\t\t\t$this->object->setGapShuffle( $idx, 0 );\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (is_array( $_POST['gap_' . $idx]['answer'] ))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach ($_POST['gap_' . $idx]['answer'] as $order => $value)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$this->object->addGapAnswer( $idx, $order, $value );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->addGapAnswer( $idx, 0, '' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (is_array( $_POST['gap_' . $idx]['points'] ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($_POST['gap_' . $idx]['points'] as $order => $value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->setGapAnswerPoints( $idx, $order, $value );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (array_key_exists( 'gap_' . $idx . '_gapsize', $_POST ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->object->setGapSize($idx, $order, $_POST['gap_' . $idx . '_gapsize'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\n\t\t\t\t\tcase CLOZE_SELECT:\n\n\t\t\t\t\t\t$this->object->setGapShuffle( $idx, (int)(isset($_POST[\"shuffle_$idx\"]) && $_POST[\"shuffle_$idx\"]) );\n\n\t\t\t\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (is_array( $_POST['gap_' . $idx]['answer'] ))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tforeach ($_POST['gap_' . $idx]['answer'] as $order => $value)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$this->object->addGapAnswer( $idx, $order, $value );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->addGapAnswer( $idx, 0, '' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (is_array( $_POST['gap_' . $idx]['points'] ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tforeach ($_POST['gap_' . $idx]['points'] as $order => $value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->setGapAnswerPoints( $idx, $order, $value );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase CLOZE_NUMERIC:\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this->object->setGapShuffle( $idx, 0 );\n\n\t\t\t\t\t\t$gap = $this->object->getGap($idx);\n\t\t\t\t\t\tif (!$gap) break;\n\t\t\t\t\t\t\n\t\t\t\t\t\t$this->object->getGap($idx)->clearItems();\n\n\t\t\t\t\t\tif (array_key_exists( 'gap_' . $idx . '_numeric', $_POST ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->addGapAnswer(\n\t\t\t\t\t\t\t\t\t$idx, 0, str_replace(\",\", \".\", $_POST['gap_' . $idx . '_numeric'])\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$this->object->setGapAnswerLowerBound(\n\t\t\t\t\t\t\t\t$idx, 0, str_replace(\",\", \".\", $_POST['gap_' . $idx . '_numeric_lower'])\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t$this->object->setGapAnswerUpperBound(\n\t\t\t\t\t\t\t\t$idx, 0, str_replace( \",\", \".\", $_POST['gap_' . $idx . '_numeric_upper'])\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t$this->object->setGapAnswerPoints( $idx, 0, $_POST['gap_' . $idx . '_numeric_points'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$this->object->addGapAnswer($idx, 0, '');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t$this->object->setGapAnswerLowerBound($idx, 0, '');\n\n\t\t\t\t\t\t\t$this->object->setGapAnswerUpperBound($idx, 0, '');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (array_key_exists( 'gap_' . $idx . '_gapsize', $_POST ))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->object->setGapSize($idx, $order, $_POST['gap_' . $idx . '_gapsize'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$assClozeGapCombinationObject = new assClozeGapCombination();\n\t\t\t\t$assClozeGapCombinationObject->clearGapCombinationsFromDb($this->object->getId());\n\t\t\t\tif(count($_POST['gap_combination']) > 0)\n\t\t\t\t{\n\t\t\t\t\t$assClozeGapCombinationObject->saveGapCombinationToDb($this->object->getId(),ilUtil::stripSlashesRecursive($_POST['gap_combination']), ilUtil::stripSlashesRecursive($_POST['gap_combination_values']));\n\t\t\t\t}\t\n\t\t\t}\n\t\t\tif ($this->ctrl->getCmd() != 'createGaps')\n\t\t\t{\n\t\t\t\t$this->object->updateClozeTextFromGaps();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function writeQuestionSpecificPostData(ilPropertyFormGUI $form)\n\t{\n\t\t$this->object->setClozeText( $_POST['cloze_text'] );\n\t\t$this->object->setTextgapRating( $_POST[\"textgap_rating\"] );\n\t\t$this->object->setIdenticalScoring( $_POST[\"identical_scoring\"] );\n\t\t$this->object->setFixedTextLength( $_POST[\"fixedTextLength\"] );\n\t}\n\n\t/**\n\t* Creates an output of the edit form for the question\n\t*\n\t* @access public\n\t*/\n\tpublic function editQuestion($checkonly = FALSE)\n\t{\n\t\t$save = $this->isSaveCommand();\n\t\t$this->getQuestionTemplate();\n\n        include_once(\"./Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$form = new ilPropertyFormGUI();\n\t\t$this->editForm = $form;\n\n\t\t$form->setFormAction($this->ctrl->getFormAction($this));\n\t\t$form->setTitle($this->outQuestionType());\n\t\t$form->setMultipart(FALSE);\n\t\t$form->setTableWidth(\"100%\");\n\t\t$form->setId(\"assclozetest\");\n\n\t\t// title, author, description, question, working time (assessment mode)\n\t\t$this->addBasicQuestionFormProperties($form);\n\t\t$this->populateQuestionSpecificFormPart( $form );\n\t\t$this->populateAnswerSpecificFormPart( $form );\n\t\t$this->populateTaxonomyFormSection($form);\n\n\t\t$this->addQuestionFormCommandButtons($form);\n\n\t\t$errors = false;\n\n\t\tif ($save)\n\t\t{\n\t\t\t$form->setValuesByPost();\n\t\t\t$errors = !$form->checkInput();\n\t\t\t$form->setValuesByPost(); \t// again, because checkInput now performs the whole stripSlashes handling and we \n\t\t\t\t\t\t\t\t\t\t// need this if we don't want to have duplication of backslashes\n\t\t\tif ($errors) $checkonly = false;\n\t\t}\n\n\t\tif (!$checkonly) $this->tpl->setVariable(\"QUESTION_DATA\", $form->getHTML());\n\t\treturn $errors;\n\t}\n\n\tfunction addBasicQuestionFormProperties($form)\n\t{\n\t\t// title\n\t\t$title = new ilTextInputGUI($this->lng->txt(\"title\"), \"title\");\n\t\t$title->setMaxLength(100);\n\t\t$title->setValue($this->object->getTitle());\n\t\t$title->setRequired(TRUE);\n\t\t$form->addItem($title);\n\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\t// author\n\t\t\t$author = new ilTextInputGUI($this->lng->txt(\"author\"), \"author\");\n\t\t\t$author->setValue($this->object->getAuthor());\n\t\t\t$author->setRequired(TRUE);\n\t\t\t$form->addItem($author);\n\n\t\t\t// description\n\t\t\t$description = new ilTextInputGUI($this->lng->txt(\"description\"), \"comment\");\n\t\t\t$description->setValue($this->object->getComment());\n\t\t\t$description->setRequired(FALSE);\n\t\t\t$form->addItem($description);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// author as hidden field\n\t\t\t$hi = new ilHiddenInputGUI(\"author\");\n\t\t\t$author = ilUtil::prepareFormOutput($this->object->getAuthor());\n\t\t\tif (trim($author) == \"\")\n\t\t\t{\n\t\t\t\t$author = \"-\";\n\t\t\t}\n\t\t\t$hi->setValue($author);\n\t\t\t$form->addItem($hi);\n\n\t\t}\n\n\t\t// questiontext\n\t\t$question = new ilTextAreaInputGUI($this->lng->txt(\"question\"), \"question\");\n\t\t$question->setValue($this->object->prepareTextareaOutput($this->object->getQuestion()));\n\t\t$question->setRequired(TRUE);\n\t\t$question->setRows(10);\n\t\t$question->setCols(80);\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\tif( $this->object->getAdditionalContentEditingMode() == assQuestion::ADDITIONAL_CONTENT_EDITING_MODE_DEFAULT )\n\t\t\t{\n\t\t\t\t$question->setUseRte(TRUE);\n\t\t\t\tinclude_once \"./Services/AdvancedEditing/classes/class.ilObjAdvancedEditing.php\";\n\t\t\t\t$question->setRteTags(ilObjAdvancedEditing::_getUsedHTMLTags(\"assessment\"));\n\t\t\t\t$question->addPlugin(\"latex\");\n\t\t\t\t$question->addButton(\"latex\");\n\t\t\t\t$question->addButton(\"pastelatex\");\n\t\t\t\t$question->setRTESupport($this->object->getId(), \"qpl\", \"assessment\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_once 'Modules/TestQuestionPool/classes/questions/class.ilAssSelfAssessmentQuestionFormatter.php';\n\t\t\t$question->setRteTags(ilAssSelfAssessmentQuestionFormatter::getSelfAssessmentTags());\n\t\t\t$question->setUseTagsForRteOnly(false);\n\t\t}\n\t\t$form->addItem($question);\n\n//\t\t$tpl = new ilTemplate(\"tpl.il_as_qpl_cloze_gap_button_code.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n//\t\t$tpl->setVariable('INSERT_GAP', $this->lng->txt('insert_gap'));\n//\t\t$tpl->setVariable('CREATE_GAPS', $this->lng->txt('create_gaps'));\n//\t\t$tpl->parseCurrentBlock();\n//\t\t$button = new ilCustomInputGUI('&nbsp;','');\n//\t\t$button->setHtml($tpl->get());\n//\t\t$form->addItem($button);\n\t\t\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\t// duration\n\t\t\t$duration = new ilDurationInputGUI($this->lng->txt(\"working_time\"), \"Estimated\");\n\t\t\t$duration->setShowHours(TRUE);\n\t\t\t$duration->setShowMinutes(TRUE);\n\t\t\t$duration->setShowSeconds(TRUE);\n\t\t\t$ewt = $this->object->getEstimatedWorkingTime();\n\t\t\t$duration->setHours($ewt[\"h\"]);\n\t\t\t$duration->setMinutes($ewt[\"m\"]);\n\t\t\t$duration->setSeconds($ewt[\"s\"]);\n\t\t\t$duration->setRequired(FALSE);\n\t\t\t$form->addItem($duration);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// number of tries\n\t\t\tif (strlen($this->object->getNrOfTries()))\n\t\t\t{\n\t\t\t\t$nr_tries = $this->object->getNrOfTries();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$nr_tries = $this->object->getDefaultNrOfTries();\n\t\t\t}\n\t\t\t/*if ($nr_tries <= 0)\n\t\t\t{\n\t\t\t\t$nr_tries = 1;\n\t\t\t}*/\n\n\t\t\tif ($nr_tries < 0)\n\t\t\t{\n\t\t\t\t$nr_tries = 0;\n\t\t\t}\n\n\t\t\t$ni = new ilNumberInputGUI($this->lng->txt(\"qst_nr_of_tries\"), \"nr_of_tries\");\n\t\t\t$ni->setValue($nr_tries);\n\t\t\t//$ni->setMinValue(1);\n\t\t\t$ni->setMinValue(0);\n\t\t\t$ni->setSize(5);\n\t\t\t$ni->setMaxLength(5);\n\t\t\t$ni->setRequired(true);\n\t\t\t$form->addItem($ni);\n\t\t}\n\t}\n\n\tpublic function populateQuestionSpecificFormPart(ilPropertyFormGUI $form)\n\t{\n\t\t// cloze text\n\t\t$cloze_text = new ilTextAreaInputGUI($this->lng->txt(\"cloze_text\"), 'cloze_text');\n\t\t$cloze_text->setRequired(true);\n\t\t$cloze_text->setValue($this->applyIndizesToGapText($this->object->getClozeText()));\n\t\t$cloze_text->setInfo($this->lng->txt(\"close_text_hint\"));\n\t\t$cloze_text->setRows( 10 );\n\t\t$cloze_text->setCols( 80 );\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\tif( $this->object->getAdditionalContentEditingMode() == assQuestion::ADDITIONAL_CONTENT_EDITING_MODE_DEFAULT )\n\t\t\t{\n\t\t\t\t$cloze_text->setUseRte(TRUE);\n\t\t\t\tinclude_once \"./Services/AdvancedEditing/classes/class.ilObjAdvancedEditing.php\";\n\t\t\t\t$cloze_text->setRteTags(ilObjAdvancedEditing::_getUsedHTMLTags(\"assessment\"));\n\t\t\t\t$cloze_text->addPlugin(\"latex\");\n\t\t\t\t$cloze_text->addButton(\"latex\");\n\t\t\t\t$cloze_text->addButton(\"pastelatex\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_once 'Modules/TestQuestionPool/classes/questions/class.ilAssSelfAssessmentQuestionFormatter.php';\n\t\t\t$cloze_text->setRteTags(ilAssSelfAssessmentQuestionFormatter::getSelfAssessmentTags());\n\t\t\t$cloze_text->setUseTagsForRteOnly(false);\n\t\t}\n\t\t$cloze_text->setRTESupport($this->object->getId(), \"qpl\", \"assessment\");\n\t\t$form->addItem($cloze_text);\n\n\t\t$tpl = new ilTemplate(\"tpl.il_as_qpl_cloze_gap_button_code.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\n\t\t$button = new ilCustomInputGUI('&nbsp;','');\n\t\trequire_once 'Services/UIComponent/SplitButton/classes/class.ilSplitButtonGUI.php';\n\t\trequire_once 'Services/UIComponent/Button/classes/class.ilJsLinkButton.php';\n\t\t$action_button = ilSplitButtonGUI::getInstance();\n\n\t\t$sb_text_gap = ilJsLinkButton::getInstance();\n\t\t$sb_text_gap->setCaption('text_gap');\n\t\t$sb_text_gap->setName('gapbutton');\n\t\t$sb_text_gap->setId('gaptrigger_text');\n\t\t$action_button->setDefaultButton($sb_text_gap);\n\n\t\t$sb_sel_gap = ilJsLinkButton::getInstance();\n\t\t$sb_sel_gap->setCaption('select_gap');\n\t\t$sb_sel_gap->setName('gapbutton_select');\n\t\t$sb_sel_gap->setId('gaptrigger_select');\n\t\t$action_button->addMenuItem(new ilButtonToSplitButtonMenuItemAdapter($sb_sel_gap));\n\n\t\t$sb_num_gap = ilJsLinkButton::getInstance();\n\t\t$sb_num_gap->setCaption('numeric_gap');\n\t\t$sb_num_gap->setName('gapbutton_numeric');\n\t\t$sb_num_gap->setId('gaptrigger_numeric');\n\t\t$action_button->addMenuItem(new ilButtonToSplitButtonMenuItemAdapter($sb_num_gap));\n\n\t\t$tpl->setVariable('BUTTON', $action_button->render());\n\t\t$tpl->parseCurrentBlock();\n\n\t\t$button->setHtml($tpl->get());\n\t\t$form->addItem($button);\n\n\t\t// text rating\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\t$textrating   = new ilSelectInputGUI($this->lng->txt( \"text_rating\" ), \"textgap_rating\");\n\t\t\t$text_options = array(\n\t\t\t\t\"ci\" => $this->lng->txt( \"cloze_textgap_case_insensitive\" ),\n\t\t\t\t\"cs\" => $this->lng->txt( \"cloze_textgap_case_sensitive\" ),\n\t\t\t\t\"l1\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"1\" ),\n\t\t\t\t\"l2\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"2\" ),\n\t\t\t\t\"l3\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"3\" ),\n\t\t\t\t\"l4\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"4\" ),\n\t\t\t\t\"l5\" => sprintf( $this->lng->txt( \"cloze_textgap_levenshtein_of\" ), \"5\" )\n\t\t\t);\n\t\t\t$textrating->setOptions( $text_options );\n\t\t\t$textrating->setValue( $this->object->getTextgapRating() );\n\t\t\t$form->addItem( $textrating );\n\n\t\t\t// text field length\n\t\t\t$fixedTextLength = new ilNumberInputGUI($this->lng->txt( \"cloze_fixed_textlength\" ), \"fixedTextLength\");\n\t\t\t$ftl = $this->object->getFixedTextLength();\n\t\t\t\n\t\t\t$fixedTextLength->setValue( $ftl > 0 ? $ftl : '' );\n\t\t\t$fixedTextLength->setMinValue( 0 );\n\t\t\t$fixedTextLength->setSize( 3 );\n\t\t\t$fixedTextLength->setMaxLength( 6 );\n\t\t\t$fixedTextLength->setInfo( $this->lng->txt( 'cloze_fixed_textlength_description' ) );\n\t\t\t$fixedTextLength->setRequired( false );\n\t\t\t$form->addItem( $fixedTextLength );\n\n\t\t\t// identical scoring\n\t\t\t$identical_scoring = new ilCheckboxInputGUI($this->lng->txt( \"identical_scoring\" ), \"identical_scoring\");\n\t\t\t$identical_scoring->setValue( 1 );\n\t\t\t$identical_scoring->setChecked( $this->object->getIdenticalScoring() );\n\t\t\t$identical_scoring->setInfo( $this->lng->txt( 'identical_scoring_desc' ) );\n\t\t\t$identical_scoring->setRequired( FALSE );\n\t\t\t$form->addItem( $identical_scoring );\n\t\t}\n\t\treturn $form;\n\t}\n\n\tpublic function populateAnswerSpecificFormPart(ilPropertyFormGUI $form)\n\t{\n\t\tif(self::OLD_CLOZE_TEST_UI)\n\t\t{\n\t\t\tfor ($gapCounter = 0; $gapCounter < $this->object->getGapCount(); $gapCounter++)\n\t\t\t{\n\t\t\t\t$this->populateGapFormPart( $form, $gapCounter );\n\t\t\t}\n\t\t\treturn $form;\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_once 'Modules/TestQuestionPool/classes/Form/class.ilClozeGapInputBuilderGUI.php';\n\t\t\t$json=$this->populateJSON();\n\t\t\t$assClozeGapCombinationObject = new assClozeGapCombination();\n\t\t\t$combination_exists = $assClozeGapCombinationObject->combinationExistsForQid($this->object->id);\n\t\t\tif($combination_exists)\n\t\t\t{\n\t\t\t\t$combinations = $assClozeGapCombinationObject->loadFromDb($this->object->id);\n\t\t\t}\n\t\t\t$new_builder = new ilClozeGapInputBuilderGUI();\n\t\t\t$header = new ilFormSectionHeaderGUI();\n\t\t\t$form->addItem($header);\n\t\t\t$new_builder->setValueByArray($json);\n\t\t\t$new_builder->setValueCombinationFromDb($combinations);\n\t\t\t$form->addItem($new_builder);\n\t\t\treturn $form;\n\t\t}\n\t}\n\n\tprotected function populateJSON()\n\t{\n\t\t$gap    = $this->object->getGaps();\n\t\t$array = array();\n\t\tif ($gap == null)\n\t\t{\n\t\t\treturn $array;\n\t\t}\n\t\t$translate_type=array('text','select','numeric');\n\t\t$i = 0;\n\t\tforeach ($gap as $content)\n\t\t{\n\t\t\t$shuffle=false;\n\t\t\t$value=$content->getItemsRaw();\n\t\t\t$items=array();\n\t\t\tfor($j=0;$j<count($value);$j++)\n\t\t\t{\n\t\t\t\tif($content->getType()==2)\n\t\t\t\t{\n\t\t\t\t\t$items[$j] = array(\n\t\t\t\t\t\t'answer' => $value[$j]->getAnswerText(),\n\t\t\t\t\t\t'lower'  => $value[$j]->getLowerBound(),\n\t\t\t\t\t\t'upper'  => $value[$j]->getUpperBound(),\n\t\t\t\t\t\t'points' => $value[$j]->getPoints(),\n\t\t\t\t\t\t'error'  => false\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$items[$j] = array(\n\t\t\t\t\t\t'answer' => $value[$j]->getAnswerText(),\n\t\t\t\t\t\t'points' => $value[$j]->getPoints(),\n\t\t\t\t\t\t'error' => false\n\t\t\t\t\t);\n\t\t\t\t\t\n\t\t\t\t\tif($content->getType()==1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$shuffle=$content->getShuffle();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$answers[$i]=array(\n\t\t\t'type' => $translate_type[$content->getType()] ,\n\t\t\t'values' => $items ,\n\t\t\t'shuffle' => $shuffle,\n\t\t\t'text_field_length' => $content->getGapSize() > 0 ? $content->getGapSize() :  '',\n\t\t\t'used_in_gap_combination' => true);\n\t\t\t$i++;\n\t\t}\n\t\treturn $answers;\n\t}\n\t/**\n\t * Populates a gap form-part.\n\t * \n\t * This includes: A section header with the according gap-ordinal, the type select-box.\n\t * Furthermore, this method calls the gap-type-specific methods for their contents.\n\t *\n\t * @param $form\t \t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps\n\t *\n\t * @return ilPropertyFormGUI\n\t */\n\tprotected function populateGapFormPart($form, $gapCounter)\n\t{\n\t\t$gap    = $this->object->getGap( $gapCounter );\n\n\t\tif ($gap == null)\n\t\t{\n\t\t\treturn $form;\n\t\t}\n\n\t\t$header = new ilFormSectionHeaderGUI();\n\t\t$header->setTitle( $this->lng->txt( \"gap\" ) . \" \" . ($gapCounter + 1) );\n\t\t$form->addItem( $header );\n\n\t\t$gapcounter = new ilHiddenInputGUI(\"gap[$gapCounter]\");\n\t\t$gapcounter->setValue( $gapCounter );\n\t\t$form->addItem( $gapcounter );\n\n\t\t$gaptype = new ilSelectInputGUI($this->lng->txt( 'type' ), \"clozetype_$gapCounter\");\n\t\t$options = array(\n\t\t\t0 => $this->lng->txt( \"text_gap\" ),\n\t\t\t1 => $this->lng->txt( \"select_gap\" ),\n\t\t\t2 => $this->lng->txt( \"numeric_gap\" )\n\t\t);\n\t\t$gaptype->setOptions( $options );\n\t\t$gaptype->setValue( $gap->getType() );\n\t\t$form->addItem( $gaptype );\n\n\t\tif ($gap->getType() == CLOZE_TEXT)\n\t\t{\t\n\t\t\t$this->populateGapSizeFormPart($form, $gap, $gapCounter);\n\t\t\t\n\t\t\tif (count( $gap->getItemsRaw() ) == 0)\n\t\t\t\t$gap->addItem( new assAnswerCloze(\"\", 0, 0) );\n\t\t\t$this->populateTextGapFormPart( $form, $gap, $gapCounter );\n\t\t}\n\t\telse if ($gap->getType() == CLOZE_SELECT)\n\t\t{\n\t\t\tif (count( $gap->getItemsRaw() ) == 0)\n\t\t\t\t$gap->addItem( new assAnswerCloze(\"\", 0, 0) );\n\t\t\t$this->populateSelectGapFormPart( $form, $gap, $gapCounter );\n\t\t}\n\t\telse if ($gap->getType() == CLOZE_NUMERIC)\n\t\t{\n\t\t\t$this->populateGapSizeFormPart($form, $gap, $gapCounter);\n\t\t\t\n\t\t\tif (count( $gap->getItemsRaw() ) == 0)\n\t\t\t\t$gap->addItem( new assAnswerCloze(\"\", 0, 0) );\n\t\t\tforeach ($gap->getItemsRaw() as $item)\n\t\t\t{\n\t\t\t\t$this->populateNumericGapFormPart( $form, $item, $gapCounter );\n\t\t\t}\n\t\t}\n\t\treturn $form;\n\t}\n\n\t/**\n\t * @param $form\t\t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gap\t\t\tmixed\t\t\t\tRaw text gap item.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps\n\t */\n\tprotected function populateGapSizeFormPart($form, $gap, $gapCounter)\n\t{\n\t\t$gapSizeFormItem = new ilNumberInputGUI($this->lng->txt('cloze_fixed_textlength'), \"gap_\".$gapCounter.'_gapsize');\n\t\t\n\t\t$gapSizeFormItem->allowDecimals(false);\n\t\t$gapSizeFormItem->setMinValue(0);\n\t\t$gapSizeFormItem->setSize( 3 );\n\t\t$gapSizeFormItem->setMaxLength( 6 );\n\t\t$gapSizeFormItem->setInfo($this->lng->txt('cloze_gap_size_info'));\n\t\t$gapSizeFormItem->setValue($gap->getGapSize());\n\t\t$form->addItem($gapSizeFormItem);\n\t\t\n\t\treturn $form;\t\n\t}\n\t\n\t/**\n\t * Populates the form-part for a select gap.\n\t * \n\t * This includes: The AnswerWizardGUI for the individual select items and points as well as \n\t * the the checkbox for the shuffle option.\n\t *\n\t * @param $form\t\t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gap\t\t\tmixed\t\t\t\tRaw text gap item.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps\n\t *\n\t * @return ilPropertyFormGUI\n\t */\n\tprotected function populateSelectGapFormPart($form, $gap, $gapCounter)\n\t{\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.ilAnswerWizardInputGUI.php\";\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.assAnswerCloze.php\";\n\t\t$values = new ilAnswerWizardInputGUI($this->lng->txt( \"values\" ), \"gap_\" . $gapCounter . \"\");\n\t\t$values->setRequired( true );\n\t\t$values->setQuestionObject( $this->object );\n\t\t$values->setSingleline( true );\n\t\t$values->setAllowMove( false );\n\n\t\t$values->setValues( $gap->getItemsRaw() );\n\t\t$form->addItem( $values );\n\n\t\t// shuffle\n\t\t$shuffle = new ilCheckboxInputGUI($this->lng->txt( \"shuffle_answers\" ), \"shuffle_\" . $gapCounter . \"\");\n\t\t$shuffle->setValue( 1 );\n\t\t$shuffle->setChecked( $gap->getShuffle() );\n\t\t$shuffle->setRequired( FALSE );\n\t\t$form->addItem( $shuffle );\n\t\treturn $form;\n\t}\n\n\t/**\n\t * Populates the form-part for a text gap.\n\t * \n\t * This includes: The AnswerWizardGUI for the individual text answers and points.\n\t * \n\t * @param $form\t\t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gap\t\t\tmixed\t\t\t\tRaw text gap item.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps\n\t *\n\t * @return ilPropertyFormGUI\n\t */\n\tprotected function populateTextGapFormPart($form, $gap, $gapCounter)\n\t{\n\t\t// Choices\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.ilAnswerWizardInputGUI.php\";\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.assAnswerCloze.php\";\n\t\t$values = new ilAnswerWizardInputGUI($this->lng->txt( \"values\" ), \"gap_\" . $gapCounter . \"\");\n\t\t$values->setRequired( true );\n\t\t$values->setQuestionObject( $this->object );\n\t\t$values->setSingleline( true );\n\t\t$values->setAllowMove( false );\n\t\t$values->setValues( $gap->getItemsRaw() );\n\t\t$form->addItem( $values );\n\n\t\tif( $this->object->getFixedTextLength() > 0 )\n\t\t{\n\t\t\t$values->setSize( $this->object->getFixedTextLength() );\n\t\t\t$values->setMaxLength( $this->object->getFixedTextLength() );\n\t\t}\n\n\t\treturn $form;\n\t}\n\n\t/**\n\t * Populates the form-part for a numeric gap.\n\t * \n\t * This includes: The type selector, value, lower bound, upper bound and points.\n\t * \n\t * @param $form\t\t\tilPropertyFormGUI\tReference to the form, that receives the point.\n\t * @param $gap\t\t\tmixed\t\t\t\tRaw numeric gap item.\n\t * @param $gapCounter\tinteger\t\t\t\tOrdinal number of the gap in the sequence of gaps.\n\t * \n\t * @return ilPropertyFormGUI\n\t */\n\tprotected function populateNumericGapFormPart($form, $gap, $gapCounter)\n\t{\n\t\t// #8944: the js-based ouput in self-assessment cannot support formulas\n\t\tif (!$this->object->getSelfAssessmentEditingMode())\n\t\t{\n\t\t\t$value = new ilFormulaInputGUI($this->lng->txt( 'value' ), \"gap_\" . $gapCounter . \"_numeric\");\n\t\t\t$value->setInlineStyle( 'text-align: right;' );\n\n\t\t\t$lowerbound = new ilFormulaInputGUI($this->lng->txt( 'range_lower_limit'), \"gap_\" . $gapCounter . \"_numeric_lower\");\n\t\t\t$lowerbound->setInlineStyle( 'text-align: right;' );\n\n\t\t\t$upperbound = new ilFormulaInputGUI($this->lng->txt( 'range_upper_limit'), \"gap_\" . $gapCounter . \"_numeric_upper\");\n\t\t\t$upperbound->setInlineStyle( 'text-align: right;' );\n\t\t} \n\t\telse\n\t\t{\n\t\t\t$value = new ilNumberInputGUI($this->lng->txt( 'value' ), \"gap_\" . $gapCounter . \"_numeric\");\n\t\t\t$value->allowDecimals( true );\n\n\t\t\t$lowerbound = new ilNumberInputGUI($this->lng->txt( 'range_lower_limit'), \"gap_\" . $gapCounter . \"_numeric_lower\");\n\t\t\t$lowerbound->allowDecimals( true );\n\n\t\t\t$upperbound = new ilNumberInputGUI($this->lng->txt( 'range_upper_limit'), \"gap_\" . $gapCounter . \"_numeric_upper\");\n\t\t\t$upperbound->allowDecimals( true );\n\t\t}\n\t\t\n\t\t$value->setSize( 10 );\n\t\t$value->setValue( ilUtil::prepareFormOutput( $gap->getAnswertext() ) );\n\t\t$value->setRequired( true );\n\t\t$form->addItem( $value );\n\n\t\t$lowerbound->setSize( 10 );\n\t\t$lowerbound->setRequired( true );\n\t\t$lowerbound->setValue( ilUtil::prepareFormOutput( $gap->getLowerBound() ) );\n\t\t$form->addItem( $lowerbound );\n\n\t\t$upperbound->setSize( 10 );\n\t\t$upperbound->setRequired( true );\n\t\t$upperbound->setValue( ilUtil::prepareFormOutput( $gap->getUpperBound() ) );\n\t\t$form->addItem( $upperbound );\n\n\t\tif( $this->object->getFixedTextLength() > 0 )\n\t\t{\n\t\t\t$value->setSize( $this->object->getFixedTextLength() );\n\t\t\t$value->setMaxLength( $this->object->getFixedTextLength() );\n\t\t\t$lowerbound->setSize( $this->object->getFixedTextLength() );\n\t\t\t$lowerbound->setMaxLength( $this->object->getFixedTextLength() );\n\t\t\t$upperbound->setSize( $this->object->getFixedTextLength() );\n\t\t\t$upperbound->setMaxLength( $this->object->getFixedTextLength() );\n\t\t}\n\n\t\t$points = new ilNumberInputGUI($this->lng->txt( 'points' ), \"gap_\" . $gapCounter . \"_numeric_points\");\n\t\t$points->allowDecimals(true);\n\t\t$points->setSize( 3 );\n\t\t$points->setRequired( true );\n\t\t$points->setValue( ilUtil::prepareFormOutput( $gap->getPoints() ) );\n\t\t$form->addItem( $points );\n\t\treturn $form;\n\t}\n\n\t/**\n\t* Create gaps from cloze text\n\t*/\n\tpublic function createGaps()\n\t{\n\t\t$this->writePostData(true);\n\t\t$this->object->saveToDb();\n\t\t$this->editQuestion();\n\t}\n\n\t/**\n\t* Remove a gap answer\n\t*/\n\tfunction removegap()\n\t{\n\t\t$this->writePostData(true);\n\t\t$this->object->deleteAnswerText($this->gapIndex, key($_POST['cmd']['removegap_' . $this->gapIndex]));\n\t\t$this->editQuestion();\n\t}\n\n\t/**\n\t* Add a gap answer\n\t*/\n\tfunction addgap()\n\t{\n\t\t$this->writePostData(true);\n\t\t$this->object->addGapAnswer($this->gapIndex, key($_POST['cmd']['addgap_' . $this->gapIndex])+1, \"\");\n\t\t$this->editQuestion();\n\t}\n\n\t/**\n\t * Creates a preview output of the question\n\t *\n\t * @param bool $show_question_only\n\t *\n\t * @return string HTML code which contains the preview output of the question\n\t * @access public\n\t */\n\tfunction getPreview($show_question_only = FALSE, $showInlineFeedback = false)\n\t{\n\t\t$user_solution = is_object($this->getPreviewSession()) ? (array)$this->getPreviewSession()->getParticipantsSolution() : array();\n\t\t\n\t\t// generate the question output\n\t\tinclude_once \"./Services/UICore/classes/class.ilTemplate.php\";\n\t\t$template = new ilTemplate(\"tpl.il_as_qpl_cloze_question_output.html\", TRUE, TRUE, \"Modules/TestQuestionPool\"); \n\t\t$output = $this->object->getClozeText();\n\t\tforeach ($this->object->getGaps() as $gap_index => $gap)\n\t\t{\n\t\t\tswitch ($gap->getType())\n\t\t\t{\n\t\t\t\tcase CLOZE_TEXT:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_text.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\n\t\t\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\t\t\t\t\tif($gap_size > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock('size_and_maxlength');\n\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_GAP_SIZE\", $gap_size);\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\tforeach ($user_solution as $val1 => $val2)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (strcmp($val1, $gap_index) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"VALUE_GAP\", \" value=\\\"\" . ilUtil::prepareFormOutput($val2) . \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_SELECT:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_select.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\tforeach ($gap->getItems($this->object->getShuffler()) as $item)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"select_gap_option\");\n\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_VALUE\", $item->getOrder());\n\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_TEXT\", ilUtil::prepareFormOutput($item->getAnswerText()));\n\t\t\t\t\t\tforeach ($user_solution as $val1 => $val2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (strcmp($val1, $gap_index) == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (strcmp($val2, $item->getOrder()) == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_SELECTED\", \" selected=\\\"selected\\\"\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t$gaptemplate->setVariable(\"PLEASE_SELECT\", $this->lng->txt(\"please_select\"));\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_NUMERIC:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_numeric.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\t\t\t\t\tif($gap_size > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock('size_and_maxlength');\n\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_GAP_SIZE\", $gap_size);\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\tforeach ($user_solution as $val1 => $val2)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (strcmp($val1, $gap_index) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"VALUE_GAP\", \" value=\\\"\" . ilUtil::prepareFormOutput($val2) . \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$template->setVariable(\"QUESTIONTEXT\",$this->object->prepareTextareaOutput( $this->object->getQuestion(), true));\n\t\t$template->setVariable(\"CLOZETEXT\", $this->object->prepareTextareaOutput($output, TRUE));\n\t\t$questionoutput = $template->get();\n\t\tif (!$show_question_only)\n\t\t{\n\t\t\t// get page object output\n\t\t\t$questionoutput = $this->getILIASPage($questionoutput);\n\t\t}\n\t\treturn $questionoutput;\n\t}\n\n\t/**\n\t * Get the question solution output\n\t *\n\t * @param integer $active_id             The active user id\n\t * @param integer $pass                  The test pass\n\t * @param boolean $graphicalOutput       Show visual feedback for right/wrong answers\n\t * @param boolean $result_output         Show the reached points for parts of the question\n\t * @param boolean $show_question_only    Show the question without the ILIAS content around\n\t * @param boolean $show_feedback         Show the question feedback\n\t * @param boolean $show_correct_solution Show the correct solution instead of the user solution\n\t * @param boolean $show_manual_scoring   Show specific information for the manual scoring output\n\t * @param bool    $show_question_text\n\t *\n\t * @return string The solution output of the question as HTML code\n\t */\n\tfunction getSolutionOutput(\n\t\t\t\t$active_id,\n\t\t\t\t$pass = NULL,\n\t\t\t\t$graphicalOutput = FALSE,\n\t\t\t\t$result_output = FALSE,\n\t\t\t\t$show_question_only = TRUE,\n\t\t\t\t$show_feedback = FALSE,\n\t\t\t\t$show_correct_solution = FALSE,\n\t\t\t\t$show_manual_scoring = FALSE,\n\t\t\t\t$show_question_text = TRUE\n\t)\n\t{\n\t\t// get the solution of the user for the active pass or from the last pass if allowed\n\t\t$user_solution = array();\n\t\tif (($active_id > 0) && (!$show_correct_solution))\n\t\t{\n\t\t\t// get the solutions of a user\n\t\t\t$user_solution =& $this->object->getSolutionValues($active_id, $pass);\n\t\t\tif(!is_array($user_solution))\n\t\t\t{\n\t\t\t\t$user_solution = array();\n\t\t\t}\n\t\t}\n\n\t\tinclude_once \"./Services/UICore/classes/class.ilTemplate.php\";\n\t\t$template = new ilTemplate(\"tpl.il_as_qpl_cloze_question_output_solution.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t$output = $this->object->getClozeText();\n\t\tforeach ($this->object->getGaps() as $gap_index => $gap)\n\t\t{\n\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_output_solution_gap.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t$found = array();\n\t\t\tforeach ($user_solution as $solutionarray)\n\t\t\t{\n\t\t\t\tif ($solutionarray[\"value1\"] == $gap_index) $found = $solutionarray;\n\t\t\t}\n\n\t\t\tif ($active_id)\n\t\t\t{\n\t\t\t\tif ($graphicalOutput)\n\t\t\t\t{\n\t\t\t\t\t// output of ok/not ok icons for user entered solutions\n\t\t\t\t\t$details = $this->object->calculateReachedPoints($active_id, $pass, true, TRUE);\n\t\t\t\t\t$check = $details[$gap_index];\n\t\t\t\t\t\n\t\t\t\t\t$assClozeGapCombinationObject \t= new assClozeGapCombination();\n\t\t\t\t\t$check_for_gap_combinations \t= $assClozeGapCombinationObject->loadFromDb($this->object->getId());\n\t\t\t\t\tif(count($check_for_gap_combinations) != 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaps_used_in_combination = $assClozeGapCombinationObject->getGapsWhichAreUsedInCombination($this->object->getId());\n\t\t\t\t\t\t$custom_user_solution = array();\n\t\t\t\t\t\tif(array_key_exists($gap_index, $gaps_used_in_combination))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$combination_id = $gaps_used_in_combination[$gap_index];\n\t\t\t\t\t\t\tforeach($gaps_used_in_combination as $key => $value)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$a = 0;\n\t\t\t\t\t\t\t\tif($value == $combination_id)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tforeach($user_solution as $solution_key => $solution_value)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif($solution_value['value1'] == $key)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t$result_row = array();\n\t\t\t\t\t\t\t\t\t\t\t$result_row['gap_id'] = $solution_value['value1'];\n\t\t\t\t\t\t\t\t\t\t\t$result_row['value'] = $solution_value['value2'];\n\t\t\t\t\t\t\t\t\t\t\tarray_push($custom_user_solution, $result_row);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$points_array = $this->object->calculateCombinationResult($custom_user_solution);\n\t\t\t\t\t\t\t$max_combination_points\t= $assClozeGapCombinationObject->getMaxPointsForCombination($this->object->getId(), $combination_id);\n\t\t\t\t\t\t\tif($points_array[0] == $max_combination_points)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_OK\", ilUtil::getImagePath(\"icon_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_OK\", $this->lng->txt(\"answer_is_right\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if($points_array[0] > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_mostly_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_not_correct_but_positive\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_not_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_wrong\"));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ($check[\"best\"])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"icon_ok\");\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_OK\", ilUtil::getImagePath(\"icon_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_OK\", $this->lng->txt(\"answer_is_right\"));\n\t\t\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"icon_not_ok\");\n\t\t\t\t\t\t\t\tif ($check[\"positive\"])\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_mostly_ok.svg\"));\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_not_correct_but_positive\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_not_ok.svg\"));\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_wrong\"));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($check[\"best\"])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"icon_ok\");\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_OK\", ilUtil::getImagePath(\"icon_ok.svg\"));\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_OK\", $this->lng->txt(\"answer_is_right\"));\n\t\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"icon_not_ok\");\n\t\t\t\t\t\t\tif ($check[\"positive\"])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_mostly_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_not_correct_but_positive\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"ICON_NOT_OK\", ilUtil::getImagePath(\"icon_not_ok.svg\"));\n\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_NOT_OK\", $this->lng->txt(\"answer_is_wrong\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($result_output)\n\t\t\t{\n\t\t\t\t$points = $this->object->getMaximumGapPoints($gap_index);\n\t\t\t\t$resulttext = ($points == 1) ? \"(%s \" . $this->lng->txt(\"point\") . \")\" : \"(%s \" . $this->lng->txt(\"points\") . \")\"; \n\t\t\t\t$gaptemplate->setCurrentBlock(\"result_output\");\n\t\t\t\t$gaptemplate->setVariable(\"RESULT_OUTPUT\", sprintf($resulttext, $points));\n\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t}\n\t\t\tswitch ($gap->getType())\n\t\t\t{\n\t\t\t\tcase CLOZE_TEXT:\n\t\t\t\t\t$solutiontext = \"\";\n\t\t\t\t\tif (($active_id > 0) && (!$show_correct_solution))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((count($found) == 0) || (strlen(trim($found[\"value2\"])) == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ($chars = 0; $chars < $gap->getMaxWidth(); $chars++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$solutiontext .= \"&nbsp;\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($found[\"value2\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($gap->getBestSolutionOutput(\n\t\t\t\t\t\t\t$this->object->getShuffler()\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\t$this->populateSolutiontextToGapTpl($gaptemplate, $gap, $solutiontext);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_SELECT:\n\t\t\t\t\t$solutiontext = \"\";\n\t\t\t\t\tif (($active_id > 0) && (!$show_correct_solution))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((count($found) == 0) || (strlen(trim($found[\"value2\"])) == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ($chars = 0; $chars < $gap->getMaxWidth(); $chars++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$solutiontext .= \"&nbsp;\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$item = $gap->getItem($found[\"value2\"]);\n\t\t\t\t\t\t\tif (is_object($item))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($item->getAnswertext());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor ($chars = 0; $chars < $gap->getMaxWidth(); $chars++)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$solutiontext .= \"&nbsp;\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($gap->getBestSolutionOutput(\n\t\t\t\t\t\t\t$this->object->getShuffler()\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\t$this->populateSolutiontextToGapTpl($gaptemplate, $gap, $solutiontext);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_NUMERIC:\n\t\t\t\t\t$solutiontext = \"\";\n\t\t\t\t\tif (($active_id > 0) && (!$show_correct_solution))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((count($found) == 0) || (strlen(trim($found[\"value2\"])) == 0))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ($chars = 0; $chars < $gap->getMaxWidth(); $chars++)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$solutiontext .= \"&nbsp;\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($found[\"value2\"]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$solutiontext = ilUtil::prepareFormOutput($gap->getBestSolutionOutput(\n\t\t\t\t\t\t\t$this->object->getShuffler()\n\t\t\t\t\t\t));\n\t\t\t\t\t}\n\t\t\t\t\t$this->populateSolutiontextToGapTpl($gaptemplate, $gap, $solutiontext);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($show_question_text)\n\t\t{\n\t\t\t$template->setVariable(\n\t\t\t\t\"QUESTIONTEXT\", $this->object->prepareTextareaOutput($this->object->getQuestion(), true)\n\t\t\t);\n\t\t}\n\n\t\t$template->setVariable(\"CLOZETEXT\", $this->object->prepareTextareaOutput($output, TRUE));\n\t\t// generate the question output\n\t\t$solutiontemplate = new ilTemplate(\"tpl.il_as_tst_solution_output.html\",TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t$questionoutput = $template->get();\n\n\t\t$feedback = '';\n\t\tif($show_feedback)\n\t\t{\n\t\t\tif( !$this->isTestPresentationContext() )\n\t\t\t{\n\t\t\t\t$fb = $this->getGenericFeedbackOutput($active_id, $pass);\n\t\t\t\t$feedback .= strlen($fb) ? $fb : '';\n\t\t\t}\n\t\t\t\n\t\t\t$fb = $this->getSpecificFeedbackOutput($active_id, $pass);\n\t\t\t$feedback .=  strlen($fb) ? $fb : '';\n\t\t}\n\t\tif (strlen($feedback))\n\t\t{\n\t\t\t$cssClass = ( $this->hasCorrectSolution($active_id, $pass) ?\n\t\t\t\tilAssQuestionFeedback::CSS_CLASS_FEEDBACK_CORRECT : ilAssQuestionFeedback::CSS_CLASS_FEEDBACK_WRONG\n\t\t\t);\n\t\t\t\n\t\t\t$solutiontemplate->setVariable(\"ILC_FB_CSS_CLASS\", $cssClass);\n\t\t\t$solutiontemplate->setVariable(\"FEEDBACK\", $this->object->prepareTextareaOutput( $feedback, true ));\n\t\t}\n\t\t\n\t\t$solutiontemplate->setVariable(\"SOLUTION_OUTPUT\", $questionoutput);\n\n\t\t$solutionoutput = $solutiontemplate->get();\n\n\t\tif (!$show_question_only)\n\t\t{\n\t\t\t// get page object output\n\t\t\t$solutionoutput = $this->getILIASPage($solutionoutput);\n\t\t}\n\t\t\n\t\treturn $solutionoutput;\n\t}\n\n\tpublic function getAnswerFeedbackOutput($active_id, $pass)\n\t{\n\t\tinclude_once \"./Modules/Test/classes/class.ilObjTest.php\";\n\t\t$manual_feedback = ilObjTest::getManualFeedback($active_id, $this->object->getId(), $pass);\n\t\tif (strlen($manual_feedback))\n\t\t{\n\t\t\treturn $manual_feedback;\n\t\t}\n\t\t$correct_feedback = $this->object->feedbackOBJ->getGenericFeedbackTestPresentation($this->object->getId(), true);\n\t\t$incorrect_feedback = $this->object->feedbackOBJ->getGenericFeedbackTestPresentation($this->object->getId(), false);\n\t\tif (strlen($correct_feedback.$incorrect_feedback))\n\t\t{\n\t\t\t$reached_points = $this->object->calculateReachedPoints($active_id, $pass);\n\t\t\t$max_points = $this->object->getMaximumPoints();\n\t\t\tif ($reached_points == $max_points)\n\t\t\t{\n\t\t\t\t$output .= $correct_feedback;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$output .= $incorrect_feedback;\n\t\t\t}\n\t\t}\n\t\t$test = new ilObjTest($this->object->active_id);\n\t\treturn $this->object->prepareTextareaOutput($output, TRUE);\t\t\n\t}\n\t\n\tfunction getTestOutput(\n\t\t\t\t$active_id, \n\t\t\t\t// hey: prevPassSolutions - will be always available from now on\n\t\t\t\t$pass,\n\t\t\t\t// hey.\n\t\t\t\t$is_postponed = FALSE, \n\t\t\t\t$use_post_solutions = FALSE, \n\t\t\t\t$show_feedback = FALSE\n\t)\n\t{\n\t\t// get the solution of the user for the active pass or from the last pass if allowed\n\t\t$user_solution = array();\n\t\tif ($active_id)\n\t\t{\n\t\t\t// hey: prevPassSolutions - obsolete due to central check\n\t\t\t#include_once \"./Modules/Test/classes/class.ilObjTest.php\";\n\t\t\t#if (!ilObjTest::_getUsePreviousAnswers($active_id, true))\n\t\t\t#{\n\t\t\t#\tif (is_null($pass)) $pass = ilObjTest::_getPass($active_id);\n\t\t\t#}\n\t\t\t$user_solution = $this->object->getTestOutputSolutions($active_id, $pass);\n\t\t\t// hey.\n\t\t\tif (!is_array($user_solution)) \n\t\t\t{\n\t\t\t\t$user_solution = array();\n\t\t\t}\n\t\t}\n\t\t\n\t\t// generate the question output\n\t\tinclude_once \"./Services/UICore/classes/class.ilTemplate.php\";\n\t\t$template = new ilTemplate(\"tpl.il_as_qpl_cloze_question_output.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t$output = $this->object->getClozeText();\n\t\tforeach ($this->object->getGaps() as $gap_index => $gap)\n\t\t{\n\t\t\tswitch ($gap->getType())\n\t\t\t{\n\t\t\t\tcase CLOZE_TEXT:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_text.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\n\t\t\t\t\tif($gap_size > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock('size_and_maxlength');\n\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_GAP_SIZE\", $gap_size);\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\tforeach ($user_solution as $solution)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (strcmp($solution[\"value1\"], $gap_index) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"VALUE_GAP\", \" value=\\\"\" . ilUtil::prepareFormOutput($solution[\"value2\"]) . \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_SELECT:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_select.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\tforeach ($gap->getItems($this->object->getShuffler()) as $item)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock(\"select_gap_option\");\n\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_VALUE\", $item->getOrder());\n\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_TEXT\", ilUtil::prepareFormOutput($item->getAnswerText()));\n\t\t\t\t\t\tforeach ($user_solution as $solution)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (strcmp($solution[\"value1\"], $gap_index) == 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (strcmp($solution[\"value2\"], $item->getOrder()) == 0)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$gaptemplate->setVariable(\"SELECT_GAP_SELECTED\", \" selected=\\\"selected\\\"\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t$gaptemplate->setVariable(\"PLEASE_SELECT\", $this->lng->txt(\"please_select\"));\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CLOZE_NUMERIC:\n\t\t\t\t\t$gaptemplate = new ilTemplate(\"tpl.il_as_qpl_cloze_question_gap_numeric.html\", TRUE, TRUE, \"Modules/TestQuestionPool\");\n\t\t\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\t\t\t\t\tif($gap_size > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$gaptemplate->setCurrentBlock('size_and_maxlength');\n\t\t\t\t\t\t$gaptemplate->setVariable(\"TEXT_GAP_SIZE\", $gap_size);\n\t\t\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$gaptemplate->setVariable(\"GAP_COUNTER\", $gap_index);\n\t\t\t\t\tforeach ($user_solution as $solution)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (strcmp($solution[\"value1\"], $gap_index) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$gaptemplate->setVariable(\"VALUE_GAP\", \" value=\\\"\" . ilUtil::prepareFormOutput($solution[\"value2\"]) . \"\\\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$output = preg_replace(\"/\\[gap\\].*?\\[\\/gap\\]/\", $gaptemplate->get(), $output, 1);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t$template->setVariable(\"QUESTIONTEXT\", $this->object->prepareTextareaOutput($this->object->getQuestion(), true));\n\t\t$template->setVariable(\"CLOZETEXT\", $this->object->prepareTextareaOutput($output, TRUE));\n\t\t$questionoutput = $template->get();\n\t\t$pageoutput = $this->outQuestionPage(\"\", $is_postponed, $active_id, $questionoutput);\n\t\treturn $pageoutput;\n\t}\n\n\t/**\n\t * Sets the ILIAS tabs for this question type\n\t *\n\t * @access public\n\t * \n\t * @todo:\tMOVE THIS STEPS TO COMMON QUESTION CLASS assQuestionGUI\n\t */\n\tpublic function setQuestionTabs()\n\t{\n\t\tglobal $rbacsystem, $ilTabs;\n\n\t\t$ilTabs->clearTargets();\n\t\t\n\t\t$this->ctrl->setParameterByClass(\"ilAssQuestionPageGUI\", \"q_id\", $_GET[\"q_id\"]);\n\t\tinclude_once \"./Modules/TestQuestionPool/classes/class.assQuestion.php\";\n\t\t$q_type = $this->object->getQuestionType();\n\n\t\tif (strlen($q_type))\n\t\t{\n\t\t\t$classname = $q_type . \"GUI\";\n\t\t\t$this->ctrl->setParameterByClass(strtolower($classname), \"sel_question_types\", $q_type);\n\t\t\t$this->ctrl->setParameterByClass(strtolower($classname), \"q_id\", $_GET[\"q_id\"]);\n#\t\t\t$this->ctrl->setParameterByClass(strtolower($classname), 'prev_qid', $_REQUEST['prev_qid']);\n\t\t}\n\n\t\tif ($_GET[\"q_id\"])\n\t\t{\n\t\t\tif ($rbacsystem->checkAccess('write', $_GET[\"ref_id\"]))\n\t\t\t{\n\t\t\t\t// edit page\n\t\t\t\t$ilTabs->addTarget(\"edit_page\",\n\t\t\t\t\t$this->ctrl->getLinkTargetByClass(\"ilAssQuestionPageGUI\", \"edit\"),\n\t\t\t\t\tarray(\"edit\", \"insert\", \"exec_pg\"),\n\t\t\t\t\t\"\", \"\", $force_active);\n\t\t\t}\n\t\t\t\n\t\t\t$this->addTab_QuestionPreview($ilTabs);\n\t\t}\n\n\t\t$force_active = false;\n\t\t$commands = $_POST[\"cmd\"];\n\t\tif (is_array($commands))\n\t\t{\n\t\t\tforeach ($commands as $key => $value)\n\t\t\t{\n\t\t\t\tif (preg_match(\"/^removegap_.*/\", $key, $matches) || \n\t\t\t\t\tpreg_match(\"/^addgap_.*/\", $key, $matches)\n\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\t$force_active = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($rbacsystem->checkAccess('write', $_GET[\"ref_id\"]))\n\t\t{\n\t\t\t$url = \"\";\n\t\t\tif ($classname) $url = $this->ctrl->getLinkTargetByClass($classname, \"editQuestion\");\n\t\t\t// edit question properties\n\t\t\t$ilTabs->addTarget(\"edit_question\",\n\t\t\t\t$url,\n\t\t\t\tarray(\"editQuestion\", \"originalSyncForm\", \"save\", \"createGaps\", \"saveEdit\"),\n\t\t\t\t$classname, \"\", $force_active);\n\t\t}\n\n\t\t// add tab for question feedback within common class assQuestionGUI\n\t\t$this->addTab_QuestionFeedback($ilTabs);\n\t\t\n\t\t// add tab for question hint within common class assQuestionGUI\n\t\t$this->addTab_QuestionHints($ilTabs);\n\n\t\t// add tab for question's suggested solution within common class assQuestionGUI\n\t\t$this->addTab_SuggestedSolution($ilTabs, $classname);\n\n\t\t// Assessment of questions sub menu entry\n\t\tif ($_GET[\"q_id\"])\n\t\t{\n\t\t\t$ilTabs->addTarget(\"statistics\",\n\t\t\t\t$this->ctrl->getLinkTargetByClass($classname, \"assessment\"),\n\t\t\t\tarray(\"assessment\"),\n\t\t\t\t$classname, \"\");\n\t\t}\n\n\t\t$this->addBackTab($ilTabs);\n\t}\n\t\n\tfunction getSpecificFeedbackOutput($active_id, $pass)\n\t{\n\t\tif( !$this->object->feedbackOBJ->specificAnswerFeedbackExists(array_values($this->object->gaps)) )\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\tglobal $lng;\n\n\t\t$feedback = '<table class=\"test_specific_feedback\"><tbody>';\n\n\t\tforeach ($this->object->gaps as $index => $answer)\n\t\t{\n\t\t\t$caption = $lng->txt('gap').' '.($index+1) .': ';\n\n\t\t\t$feedback .= '<tr><td>';\n\n\t\t\t$feedback .= $caption .'</td><td>';\n\t\t\t$feedback .= $this->object->feedbackOBJ->getSpecificAnswerFeedbackTestPresentation(\n\t\t\t\t\t$this->object->getId(), $index\n\t\t\t) . '</td> </tr>';\n\t\t}\n\t\t$feedback .= '</tbody></table>';\n\n\t\treturn $this->object->prepareTextareaOutput($feedback, TRUE);\n\t}\n\n\t/**\n\t * Returns a list of postvars which will be suppressed in the form output when used in scoring adjustment.\n\t * The form elements will be shown disabled, so the users see the usual form but can only edit the settings, which\n\t * make sense in the given context.\n\t *\n\t * E.g. array('cloze_type', 'image_filename')\n\t *\n\t * @return string[]\n\t */\n\tpublic function getAfterParticipationSuppressionAnswerPostVars()\n\t{\n\t\treturn array();\n\t}\n\n\t/**\n\t * Returns a list of postvars which will be suppressed in the form output when used in scoring adjustment.\n\t * The form elements will be shown disabled, so the users see the usual form but can only edit the settings, which\n\t * make sense in the given context.\n\t *\n\t * E.g. array('cloze_type', 'image_filename')\n\t *\n\t * @return string[]\n\t */\n\tpublic function getAfterParticipationSuppressionQuestionPostVars()\n\t{\n\t\treturn array();\n\t}\n\n\t/**\n\t * Returns an html string containing a question specific representation of the answers so far\n\t * given in the test for use in the right column in the scoring adjustment user interface.\n\t *\n\t * @param array $relevant_answers\n\t *\n\t * @return string\n\t */\n\tpublic function getAggregatedAnswersView($relevant_answers)\n\t{\n\t\t$overview = array();\n\t\t$aggregation = array();\n\t\tforeach ($relevant_answers as $answer)\n\t\t{\n\t\t\t$overview[$answer['active_fi']][$answer['pass']][$answer['value1']] = $answer['value2'];\n\t\t}\n\n\t\tforeach($overview as $active)\n\t\t{\n\t\t\tforeach ($active as $answer)\n\t\t\t{\n\t\t\t\tforeach ($answer as $option => $value)\n\t\t\t\t{\n\t\t\t\t\t$aggregation[$option][$value] = $aggregation[$option][$value] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$html = '<div>';\n\t\t$i = 0;\n\t\tforeach ($this->object->getGaps() as $gap)\n\t\t{\n\t\t\tif ($gap->type == CLOZE_SELECT)\n\t\t\t{\n\t\t\t\t$html .= '<p>Gap '. ($i+1) . ' - SELECT</p>';\n\t\t\t\t$html .= '<ul>';\n\t\t\t\t$j = 0;\n\t\t\t\tforeach($gap->getItems($this->object->getShuffler()) as $gap_item)\n\t\t\t\t{\n\t\t\t\t\t$aggregate = $aggregation[$i];\n\t\t\t\t\t$html .= '<li>' . ilUtil::prepareFormOutput($gap_item->getAnswerText()) . ' - ' . ($aggregate[$j] ? $aggregate[$j] : 0) . '</li>';\n\t\t\t\t\t$j++;\n\t\t\t\t}\n\t\t\t\t$html .= '</ul>';\n\t\t\t}\n\n\t\t\tif($gap->type == CLOZE_TEXT)\n\t\t\t{\n\t\t\t\t$present_elements = array();\n\t\t\t\tforeach($gap->getItems(new ilArrayElementShuffler()) as $item)\n\t\t\t\t{\n\t\t\t\t\t/** @var assAnswerCloze $item */\n\t\t\t\t\t$present_elements[] = $item->getAnswertext();\n\t\t\t\t}\n\n\t\t\t\t$html .= '<p>Gap ' . ($i+1) . ' - TEXT</p>';\n\t\t\t\t$html .= '<ul>';\n\t\t\t\t$aggregate = (array)$aggregation[$i];\n\t\t\t\tforeach($aggregate as $answer => $count)\n\t\t\t\t{\n\t\t\t\t\t$show_mover = '';\n\t\t\t\t\tif(in_array($answer, $present_elements))\n\t\t\t\t\t{\n\t\t\t\t\t\t$show_mover = ' style=\"display: none;\" ';\n\t\t\t\t\t}\n\n\t\t\t\t\t$html .= '<li>' . ilUtil::prepareFormOutput($answer) . ' - ' . $count\n\t\t\t\t\t\t. '&nbsp;<button class=\"clone_fields_add btn btn-link\" ' . $show_mover . ' data-answer=\"'.ilUtil::prepareFormOutput($answer).'\" name=\"add_gap_'.$i.'_0\">\n\t\t\t\t\t\t<span class=\"sr-only\"></span><span class=\"glyphicon glyphicon-plus\"></span></button>\n\t\t\t\t\t\t</li>';\n\t\t\t\t}\n\t\t\t\t$html .= '</ul>';\n\t\t\t}\n\n\t\t\tif($gap->type == CLOZE_NUMERIC)\n\t\t\t{\n\t\t\t\t$html .= '<p>Gap ' . ($i+1) . ' - NUMERIC</p>';\n\t\t\t\t$html .= '<ul>';\n\t\t\t\t$j = 0;\n\t\t\t\tforeach($gap->getItems($this->object->getShuffler()) as $gap_item)\n\t\t\t\t{\n\t\t\t\t\t$aggregate = (array)$aggregation[$i];\n\t\t\t\t\tforeach($aggregate as $answer => $count)\n\t\t\t\t\t{\n\t\t\t\t\t\t$html .= '<li>' . ilUtil::prepareFormOutput($answer) . ' - ' . $count . '</li>';\n\t\t\t\t\t}\n\t\t\t\t\t$j++;\n\t\t\t\t}\n\t\t\t\t$html .= '</ul>';\n\t\t\t}\n\t\t\t$i++;\n\t\t\t$html .= '<hr />';\n\t\t}\n\n\t\t$html .= '</div>';\n\t\treturn $html;\n\t}\n\n\tpublic function applyIndizesToGapText( $question_text )\n\t{\n\t\t$parts\t= explode( '[gap', $question_text );\n\t\t$i = 0;\n\t\t$question_text = '';\n\t\tforeach ( $parts as $part )\n\t\t{\n\t\t\tif ( $i == 0 )\n\t\t\t{\n\t\t\t\t$question_text .= $part;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$question_text .= '[gap ' . $i . $part;\n\t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\treturn $question_text;\n\t}\n\n\tpublic function removeIndizesFromGapText( $question_text )\n\t{\n\t\t$parts         = preg_split( '/\\[gap \\d*\\]/', $question_text );\n\t\t$question_text = implode( '[gap]', $parts );\n\t\treturn $question_text;\n\t}\n\n\t/**\n\t * @param $gaptemplate\n\t * @param $solutiontext\n\t */\n\tprivate function populateSolutiontextToGapTpl($gaptemplate, $gap, $solutiontext)\n\t{\n\t\tif( $this->renderPurposeSupportsFormHtml() )\n\t\t{\n\t\t\t$gaptemplate->setCurrentBlock('gap_span');\n\t\t\t$gaptemplate->setVariable('SPAN_SOLUTION', $solutiontext);\n\t\t}\n\t\telseif($gap->getType() == CLOZE_SELECT)\n\t\t{\n\t\t\t$gaptemplate->setCurrentBlock('gap_select');\n\t\t\t$gaptemplate->setVariable('SELECT_SOLUTION', $solutiontext);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$gap_size = $gap->getGapSize() > 0 ? $gap->getGapSize() : $this->object->getFixedTextLength();\n\t\t\t\n\t\t\tif($gap_size > 0)\n\t\t\t{\n\t\t\t\t$gaptemplate->setCurrentBlock('gap_size');\n\t\t\t\t$gaptemplate->setVariable(\"GAP_SIZE\", $gap_size);\n\t\t\t\t$gaptemplate->parseCurrentBlock();\n\t\t\t}\n\t\t\t\n\t\t\t$gaptemplate->setCurrentBlock('gap_input');\n\t\t\t$gaptemplate->setVariable('INPUT_SOLUTION', $solutiontext);\n\t\t}\n\t\t\n\t\t\n\t\t$gaptemplate->parseCurrentBlock();\n\t}\n}"], "filenames": ["Modules/TestQuestionPool/classes/class.assClozeTestGUI.php"], "buggy_code_start_loc": [1550], "buggy_code_end_loc": [1595], "fixing_code_start_loc": [1550], "fixing_code_end_loc": [1595], "type": "CWE-79", "message": "Ilias 5.3 before 5.3.12; 5.2 before 5.2.21 is affected by: Cross Site Scripting (XSS) - CWE-79 Type 2: Stored XSS (or Persistent). The impact is: Execute code in the victim's browser. The component is: Assessment / TestQuestionPool. The attack vector is: Cloze Test Text gap (attacker) / Corrections view (victim). The fixed version is: 5.3.12.", "other": {"cve": {"id": "CVE-2019-1010237", "sourceIdentifier": "josh@bress.net", "published": "2019-07-22T15:15:10.517", "lastModified": "2019-10-09T23:44:17.697", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Ilias 5.3 before 5.3.12; 5.2 before 5.2.21 is affected by: Cross Site Scripting (XSS) - CWE-79 Type 2: Stored XSS (or Persistent). The impact is: Execute code in the victim's browser. The component is: Assessment / TestQuestionPool. The attack vector is: Cloze Test Text gap (attacker) / Corrections view (victim). The fixed version is: 5.3.12."}, {"lang": "es", "value": "Ilias versiones 5.3 anteriores a 5.3.12; versiones 5.2 anteriores a 5.2.21, est\u00e1 afectado por: Cross Site Scripting (XSS) - CWE-79 Tipo 2: XSS Almacenado (o Persistente). El impacto es: Ejecutar c\u00f3digo en el navegador de la v\u00edctima. El componente es: Assessment / TestQuestionPool. El vector de ataque es: fallo de Cloze Test Text (atacante) / Vista de correcciones (v\u00edctima). La versi\u00f3n corregida es: versi\u00f3n 5.3.12."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "josh@bress.net", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.2.0", "versionEndExcluding": "5.2.21", "matchCriteriaId": "2C1EC872-127E-4713-AF2B-D7ECB07E4569"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.3.0", "versionEndExcluding": "5.3.12", "matchCriteriaId": "5ABF171E-3500-41A0-8EDE-FD9284B4D8D0"}]}]}], "references": [{"url": "https://docu.ilias.de/goto_docu_pg_116867_35.html", "source": "josh@bress.net", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/b9150b7194f8cfb1178ca3674a0b3c86b7cd92f5", "source": "josh@bress.net", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/f1c2f906410bf35bb6bd45efff57d2e8da3b3825", "source": "josh@bress.net", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ILIAS-eLearning/ILIAS/commit/b9150b7194f8cfb1178ca3674a0b3c86b7cd92f5"}}