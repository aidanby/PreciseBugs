{"buggy_code": ["<?php\ndeclare(strict_types=1);\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Endroid\\QrCode\\Builder\\Builder;\nuse Endroid\\QrCode\\Writer\\PngWriter;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Bundle\\AdminBundle\\Event\\AdminEvents;\nuse Pimcore\\Bundle\\AdminBundle\\Event\\Login\\LoginRedirectEvent;\nuse Pimcore\\Bundle\\AdminBundle\\Event\\Login\\LostPasswordEvent;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\CsrfProtectionHandler;\nuse Pimcore\\Bundle\\AdminBundle\\System\\AdminConfig;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Controller\\KernelResponseEventInterface;\nuse Pimcore\\Extension\\Bundle\\PimcoreBundleManager;\nuse Pimcore\\Http\\ResponseHelper;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Security\\SecurityHelper;\nuse Pimcore\\Tool;\nuse Pimcore\\Tool\\Authentication;\nuse Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\RateLimiter\\RateLimiterFactory;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Core\\Security;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Translation\\LocaleAwareInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * @internal\n */\nclass LoginController extends AdminAbstractController implements KernelControllerEventInterface, KernelResponseEventInterface\n{\n    public function __construct(\n        protected ResponseHelper $responseHelper,\n        protected TranslatorInterface $translator,\n        protected PimcoreBundleManager $bundleManager,\n        protected EventDispatcherInterface $eventDispatcher\n    ) {\n    }\n\n    public function onKernelControllerEvent(ControllerEvent $event): void\n    {\n        // use browser language for login page if possible\n        $locale = 'en';\n\n        $availableLocales = Tool\\Admin::getLanguages();\n        foreach ($event->getRequest()->getLanguages() as $userLocale) {\n            if (in_array($userLocale, $availableLocales)) {\n                $locale = $userLocale;\n\n                break;\n            }\n        }\n\n        if ($this->translator instanceof LocaleAwareInterface) {\n            $this->translator->setLocale($locale);\n        }\n    }\n\n    public function onKernelResponseEvent(ResponseEvent $event): void\n    {\n        $response = $event->getResponse();\n        $response->headers->set('X-Frame-Options', 'deny', true);\n        $this->responseHelper->disableCache($response, true);\n    }\n\n    /**\n     * @Route(\"/login\", name=\"pimcore_admin_login\")\n     * @Route(\"/login/\", name=\"pimcore_admin_login_fallback\")\n     */\n    public function loginAction(\n        Request $request,\n        AuthenticationUtils $authenticationUtils,\n        CsrfProtectionHandler $csrfProtection,\n        Config $config\n    ): RedirectResponse|Response {\n        $queryParams = $request->query->all();\n        if ($request->get('_route') === 'pimcore_admin_login_fallback') {\n            return $this->redirectToRoute('pimcore_admin_login', $queryParams, Response::HTTP_MOVED_PERMANENTLY);\n        }\n\n        $redirectUrl = $this->dispatchLoginRedirect($queryParams);\n        if ($this->generateUrl('pimcore_admin_login', $queryParams) != $redirectUrl) {\n            return new RedirectResponse($redirectUrl);\n        }\n\n        $csrfProtection->regenerateCsrfToken($request->getSession());\n\n        $user = $this->getUser();\n        if ($user instanceof UserInterface) {\n            return $this->redirectToRoute('pimcore_admin_index');\n        }\n\n        $params = $this->buildLoginPageViewParams($config);\n\n        $session_gc_maxlifetime = ini_get('session.gc_maxlifetime');\n        if (empty($session_gc_maxlifetime)) {\n            $session_gc_maxlifetime = 120;\n        }\n\n        $params['csrfTokenRefreshInterval'] = ((int)$session_gc_maxlifetime - 60) * 1000;\n\n        if ($request->get('too_many_attempts')) {\n            $params['error'] = SecurityHelper::convertHtmlSpecialChars($request->get('too_many_attempts'));\n        }\n        if ($request->get('auth_failed')) {\n            $params['error'] = 'error_auth_failed';\n        }\n        if ($request->get('session_expired')) {\n            $params['error'] = 'error_session_expired';\n        }\n        if ($request->get('deeplink')) {\n            $params['deeplink'] = true;\n        }\n\n        $params['browserSupported'] = $this->detectBrowser();\n        $params['debug'] = \\Pimcore::inDebugMode();\n\n        $params['includeTemplates'] = [];\n        $event = new GenericEvent($this, [\n            'parameters' => $params,\n            'config' => $config,\n            'request' => $request,\n        ]);\n\n        $this->eventDispatcher->dispatch($event, AdminEvents::LOGIN_BEFORE_RENDER);\n        $params = $event->getArgument('parameters');\n\n        $params['login_error'] = $authenticationUtils->getLastAuthenticationError();\n\n        return $this->render('@PimcoreAdmin/admin/login/login.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/csrf-token\", name=\"pimcore_admin_login_csrf_token\")\n     */\n    public function csrfTokenAction(Request $request, CsrfProtectionHandler $csrfProtection): \\Symfony\\Component\\HttpFoundation\\JsonResponse\n    {\n        if (!$this->getAdminUser()) {\n            $csrfProtection->regenerateCsrfToken($request->getSession());\n        }\n\n        return $this->json([\n           'csrfToken' => $csrfProtection->getCsrfToken($request->getSession()),\n        ]);\n    }\n\n    /**\n     * @Route(\"/logout\", name=\"pimcore_admin_logout\" , methods={\"POST\"})\n     */\n    public function logoutAction(): void\n    {\n        // this route will never be matched, but will be handled by the logout handler\n    }\n\n    /**\n     * Dummy route used to check authentication\n     *\n     * @Route(\"/login/login\", name=\"pimcore_admin_login_check\")\n     */\n    public function loginCheckAction(Request $request): RedirectResponse\n    {\n        // just in case the authenticator didn't redirect\n        return new RedirectResponse($this->generateUrl('pimcore_admin_login', ['perspective' => strip_tags($request->get('perspective', ''))]));\n    }\n\n    /**\n     * @Route(\"/login/lostpassword\", name=\"pimcore_admin_login_lostpassword\")\n     */\n    public function lostpasswordAction(Request $request, CsrfProtectionHandler $csrfProtection, Config $config, RateLimiterFactory $resetPasswordLimiter): Response\n    {\n        $params = $this->buildLoginPageViewParams($config);\n        $error = null;\n\n        if ($request->getMethod() === 'POST' && $username = $request->get('username')) {\n            $user = User::getByName($username);\n            if (!$user instanceof User) {\n                $error = 'user_unknown';\n            }\n\n            $limiter = $resetPasswordLimiter->create($request->getClientIp());\n\n            if (false === $limiter->consume(1)->isAccepted()) {\n                $error = 'user_reset_password_too_many_attempts';\n            }\n\n            if (!$error) {\n                if (!$user->isActive()) {\n                    $error = 'user_inactive';\n                }\n                if (!$user->getEmail()) {\n                    $error = 'user_no_email_address';\n                }\n                if (!$user->getPassword()) {\n                    $error = 'user_no_password';\n                }\n            }\n\n            if (!$error) {\n                $token = Authentication::generateTokenByUser($user);\n\n                $loginUrl = $this->generateUrl('pimcore_admin_login_check', [\n                    'token' => $token,\n                    'reset' => 'true',\n                ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n                try {\n                    $event = new LostPasswordEvent($user, $loginUrl);\n                    $this->eventDispatcher->dispatch($event, AdminEvents::LOGIN_LOSTPASSWORD);\n\n                    // only send mail if it wasn't prevented in event\n                    if ($event->getSendMail()) {\n                        $mail = Tool::getMail([$user->getEmail()], 'Pimcore lost password service');\n                        $mail->setIgnoreDebugMode(true);\n                        $mail->text(\"Login to pimcore and change your password using the following link. This temporary login link will expire in 24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                        $mail->send();\n                    }\n\n                    // directly return event response\n                    if ($event->hasResponse()) {\n                        return $event->getResponse();\n                    }\n                } catch (\\Exception $e) {\n                    Logger::error('Error sending password recovery email: ' . $e->getMessage());\n                    $error = 'lost_password_email_error';\n                }\n            }\n\n            if ($error) {\n                Logger::error('Lost password service: ' . $error);\n            }\n        }\n\n        $csrfProtection->regenerateCsrfToken($request->getSession());\n\n        if ($error) {\n            $params['reset_error'] = 'Please make sure you are entering a correct input.';\n            if ($error === 'user_reset_password_too_many_attempts') {\n                $params['reset_error'] = 'Too many attempts. Please retry later.';\n            }\n        }\n\n        return $this->render('@PimcoreAdmin/admin/login/lost_password.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/deeplink\", name=\"pimcore_admin_login_deeplink\")\n     */\n    public function deeplinkAction(Request $request): Response\n    {\n        // check for deeplink\n        $queryString = $_SERVER['QUERY_STRING'];\n\n        if (preg_match('/(document|asset|object)_([0-9]+)_([a-z]+)/', $queryString, $deeplink)) {\n            $deeplink = $deeplink[0];\n            $perspective = strip_tags($request->get('perspective', ''));\n\n            if (strpos($queryString, 'token')) {\n                $url = $this->dispatchLoginRedirect([\n                    'deeplink' => $deeplink,\n                    'perspective' => $perspective,\n                ]);\n                $url .= '&' . $queryString;\n\n                return $this->redirect($url);\n            } elseif ($queryString) {\n                $url = $this->dispatchLoginRedirect([\n                    'deeplink' => 'true',\n                    'perspective' => $perspective,\n                ]);\n\n                return $this->render('@PimcoreAdmin/admin/login/deeplink.html.twig', [\n                    'tab' => $deeplink,\n                    'redirect' => $url,\n                ]);\n            }\n        }\n\n        throw $this->createNotFoundException();\n    }\n\n    /**\n     * @return array{config: Config, pluginCssPaths: string[]}\n     */\n    protected function buildLoginPageViewParams(Config $config): array\n    {\n        return [\n            'config' => $config,\n            'adminSettings' => AdminConfig::get(),\n            'pluginCssPaths' => $this->bundleManager->getCssPaths(),\n        ];\n    }\n\n    /**\n     * @Route(\"/login/2fa\", name=\"pimcore_admin_2fa\")\n     */\n    public function twoFactorAuthenticationAction(Request $request, Config $config): Response\n    {\n        $params = $this->buildLoginPageViewParams($config);\n\n        if ($request->hasSession()) {\n            $session = $request->getSession();\n            $authException = $session->get(Security::AUTHENTICATION_ERROR);\n            if ($authException instanceof AuthenticationException) {\n                $session->remove(Security::AUTHENTICATION_ERROR);\n\n                $params['error'] = $authException->getMessage();\n            }\n        } else {\n            $params['error'] = 'No session available, it either timed out or cookies are not enabled.';\n        }\n\n        return $this->render('@PimcoreAdmin/admin/login/two_factor_authentication.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/2fa-setup\", name=\"pimcore_admin_2fa_setup\")\n     */\n    public function twoFactorSetupAuthenticationAction(\n        Request $request,\n        Config $config,\n        GoogleAuthenticatorInterface $twoFactor\n    ): Response {\n        $params = $this->buildLoginPageViewParams($config);\n        $params['setup'] = true;\n\n        $user = $this->getAdminUser();\n        $proxyUser = $this->getAdminUser(true);\n\n        if ($request->query->get('error')) {\n            $params['error'] = $request->query->get('error');\n        }\n\n        if ($request->isMethod('post')) {\n            $secret = $request->getSession()->get('2fa_secret');\n\n            if (!$secret) {\n                throw new \\Exception('2fa secret not found');\n            }\n\n            $user->setTwoFactorAuthentication('enabled', true);\n            $user->setTwoFactorAuthentication('type', 'google');\n            $user->setTwoFactorAuthentication('secret', $secret);\n\n            if (!$twoFactor->checkCode($proxyUser, $request->request->get('_auth_code'))) {\n                return new RedirectResponse($this->generateUrl('pimcore_admin_2fa_setup', ['error' => '2fa_wrong']));\n            }\n\n            $user->save();\n\n            return new RedirectResponse($this->generateUrl('pimcore_admin_login'));\n        }\n\n        $newSecret = $twoFactor->generateSecret();\n\n        $request->getSession()->set('2fa_secret', $newSecret);\n\n        $user->setTwoFactorAuthentication('enabled', true);\n        $user->setTwoFactorAuthentication('type', 'google');\n        $user->setTwoFactorAuthentication('secret', $newSecret);\n\n        $url = $twoFactor->getQRContent($proxyUser);\n\n        $result = Builder::create()\n            ->writer(new PngWriter())\n            ->data($url)\n            ->size(200)\n            ->build();\n\n        $params['image'] = $result->getDataUri();\n\n        return $this->render('@PimcoreAdmin/admin/login/two_factor_setup.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/2fa-verify\", name=\"pimcore_admin_2fa-verify\")\n     *\n     * @param Request $request\n     */\n    public function twoFactorAuthenticationVerifyAction(Request $request): void\n    {\n    }\n\n    public function detectBrowser(): bool\n    {\n        $supported = false;\n        $browser = new \\Browser();\n        $browserVersion = (int)$browser->getVersion();\n\n        if ($browser->getBrowser() == \\Browser::BROWSER_FIREFOX && $browserVersion >= 72) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_CHROME && $browserVersion >= 84) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_SAFARI && $browserVersion >= 13.1) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_EDGE && $browserVersion >= 90) {\n            $supported = true;\n        }\n\n        return $supported;\n    }\n\n    private function dispatchLoginRedirect(array $routeParams = []): string\n    {\n        $event = new LoginRedirectEvent('pimcore_admin_login', $routeParams);\n        $this->eventDispatcher->dispatch($event, AdminEvents::LOGIN_REDIRECT);\n\n        return $this->generateUrl($event->getRouteName(), $event->getRouteParams());\n    }\n}\n"], "fixing_code": ["<?php\ndeclare(strict_types=1);\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Endroid\\QrCode\\Builder\\Builder;\nuse Endroid\\QrCode\\Writer\\PngWriter;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Bundle\\AdminBundle\\Event\\AdminEvents;\nuse Pimcore\\Bundle\\AdminBundle\\Event\\Login\\LoginRedirectEvent;\nuse Pimcore\\Bundle\\AdminBundle\\Event\\Login\\LostPasswordEvent;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\CsrfProtectionHandler;\nuse Pimcore\\Bundle\\AdminBundle\\System\\AdminConfig;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Controller\\KernelResponseEventInterface;\nuse Pimcore\\Extension\\Bundle\\PimcoreBundleManager;\nuse Pimcore\\Http\\ResponseHelper;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Security\\SecurityHelper;\nuse Pimcore\\SystemSettingsConfig;\nuse Pimcore\\Tool;\nuse Pimcore\\Tool\\Authentication;\nuse Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\RateLimiter\\RateLimiterFactory;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Component\\Routing\\RouterInterface;\nuse Symfony\\Component\\Security\\Core\\Exception\\AuthenticationException;\nuse Symfony\\Component\\Security\\Core\\Security;\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\nuse Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Translation\\LocaleAwareInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * @internal\n */\nclass LoginController extends AdminAbstractController implements KernelControllerEventInterface, KernelResponseEventInterface\n{\n    public function __construct(\n        protected ResponseHelper $responseHelper,\n        protected TranslatorInterface $translator,\n        protected PimcoreBundleManager $bundleManager,\n        protected EventDispatcherInterface $eventDispatcher\n    ) {\n    }\n\n    public function onKernelControllerEvent(ControllerEvent $event): void\n    {\n        // use browser language for login page if possible\n        $locale = 'en';\n\n        $availableLocales = Tool\\Admin::getLanguages();\n        foreach ($event->getRequest()->getLanguages() as $userLocale) {\n            if (in_array($userLocale, $availableLocales)) {\n                $locale = $userLocale;\n\n                break;\n            }\n        }\n\n        if ($this->translator instanceof LocaleAwareInterface) {\n            $this->translator->setLocale($locale);\n        }\n    }\n\n    public function onKernelResponseEvent(ResponseEvent $event): void\n    {\n        $response = $event->getResponse();\n        $response->headers->set('X-Frame-Options', 'deny', true);\n        $this->responseHelper->disableCache($response, true);\n    }\n\n    /**\n     * @Route(\"/login\", name=\"pimcore_admin_login\")\n     * @Route(\"/login/\", name=\"pimcore_admin_login_fallback\")\n     */\n    public function loginAction(\n        Request $request,\n        AuthenticationUtils $authenticationUtils,\n        CsrfProtectionHandler $csrfProtection,\n        Config $config\n    ): RedirectResponse|Response {\n        $queryParams = $request->query->all();\n        if ($request->get('_route') === 'pimcore_admin_login_fallback') {\n            return $this->redirectToRoute('pimcore_admin_login', $queryParams, Response::HTTP_MOVED_PERMANENTLY);\n        }\n\n        $redirectUrl = $this->dispatchLoginRedirect($queryParams);\n        if ($this->generateUrl('pimcore_admin_login', $queryParams) != $redirectUrl) {\n            return new RedirectResponse($redirectUrl);\n        }\n\n        $csrfProtection->regenerateCsrfToken($request->getSession());\n\n        $user = $this->getUser();\n        if ($user instanceof UserInterface) {\n            return $this->redirectToRoute('pimcore_admin_index');\n        }\n\n        $params = $this->buildLoginPageViewParams($config);\n\n        $session_gc_maxlifetime = ini_get('session.gc_maxlifetime');\n        if (empty($session_gc_maxlifetime)) {\n            $session_gc_maxlifetime = 120;\n        }\n\n        $params['csrfTokenRefreshInterval'] = ((int)$session_gc_maxlifetime - 60) * 1000;\n\n        if ($request->get('too_many_attempts')) {\n            $params['error'] = SecurityHelper::convertHtmlSpecialChars($request->get('too_many_attempts'));\n        }\n        if ($request->get('auth_failed')) {\n            $params['error'] = 'error_auth_failed';\n        }\n        if ($request->get('session_expired')) {\n            $params['error'] = 'error_session_expired';\n        }\n        if ($request->get('deeplink')) {\n            $params['deeplink'] = true;\n        }\n\n        $params['browserSupported'] = $this->detectBrowser();\n        $params['debug'] = \\Pimcore::inDebugMode();\n\n        $params['includeTemplates'] = [];\n        $event = new GenericEvent($this, [\n            'parameters' => $params,\n            'config' => $config,\n            'request' => $request,\n        ]);\n\n        $this->eventDispatcher->dispatch($event, AdminEvents::LOGIN_BEFORE_RENDER);\n        $params = $event->getArgument('parameters');\n\n        $params['login_error'] = $authenticationUtils->getLastAuthenticationError();\n\n        return $this->render('@PimcoreAdmin/admin/login/login.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/csrf-token\", name=\"pimcore_admin_login_csrf_token\")\n     */\n    public function csrfTokenAction(Request $request, CsrfProtectionHandler $csrfProtection): \\Symfony\\Component\\HttpFoundation\\JsonResponse\n    {\n        if (!$this->getAdminUser()) {\n            $csrfProtection->regenerateCsrfToken($request->getSession());\n        }\n\n        return $this->json([\n           'csrfToken' => $csrfProtection->getCsrfToken($request->getSession()),\n        ]);\n    }\n\n    /**\n     * @Route(\"/logout\", name=\"pimcore_admin_logout\" , methods={\"POST\"})\n     */\n    public function logoutAction(): void\n    {\n        // this route will never be matched, but will be handled by the logout handler\n    }\n\n    /**\n     * Dummy route used to check authentication\n     *\n     * @Route(\"/login/login\", name=\"pimcore_admin_login_check\")\n     */\n    public function loginCheckAction(Request $request): RedirectResponse\n    {\n        // just in case the authenticator didn't redirect\n        return new RedirectResponse($this->generateUrl('pimcore_admin_login', ['perspective' => strip_tags($request->get('perspective', ''))]));\n    }\n\n    /**\n     * @Route(\"/login/lostpassword\", name=\"pimcore_admin_login_lostpassword\")\n     */\n    public function lostpasswordAction(\n        Request $request,\n        CsrfProtectionHandler $csrfProtection,\n        Config $config,\n        RateLimiterFactory $resetPasswordLimiter,\n        RouterInterface $router\n    ): Response\n    {\n        $params = $this->buildLoginPageViewParams($config);\n        $error = null;\n\n        if ($request->getMethod() === 'POST' && $username = $request->get('username')) {\n            $user = User::getByName($username);\n            if (!$user instanceof User) {\n                $error = 'user_unknown';\n            }\n\n            $limiter = $resetPasswordLimiter->create($request->getClientIp());\n\n            if (false === $limiter->consume(1)->isAccepted()) {\n                $error = 'user_reset_password_too_many_attempts';\n            }\n\n            if (!$error) {\n                if (!$user->isActive()) {\n                    $error = 'user_inactive';\n                }\n                if (!$user->getEmail()) {\n                    $error = 'user_no_email_address';\n                }\n                if (!$user->getPassword()) {\n                    $error = 'user_no_password';\n                }\n            }\n\n            if (!$error) {\n                $token = Authentication::generateTokenByUser($user);\n\n                try {\n                    $domain = SystemSettingsConfig::get()['general']['domain'];\n                    if (!$domain) {\n                        throw new \\Exception('No main domain set in system settings, unable to generate reset password link');\n                    }\n\n                    $context = $router->getContext();\n                    $context->setHost($domain);\n\n                    $loginUrl = $this->generateUrl('pimcore_admin_login_check', [\n                        'token' => $token,\n                        'reset' => 'true',\n                    ], UrlGeneratorInterface::ABSOLUTE_URL);\n\n                    $event = new LostPasswordEvent($user, $loginUrl);\n                    $this->eventDispatcher->dispatch($event, AdminEvents::LOGIN_LOSTPASSWORD);\n\n                    // only send mail if it wasn't prevented in event\n                    if ($event->getSendMail()) {\n                        $mail = Tool::getMail([$user->getEmail()], 'Pimcore lost password service');\n                        $mail->setIgnoreDebugMode(true);\n                        $mail->text(\"Login to pimcore and change your password using the following link. This temporary login link will expire in 24 hours: \\r\\n\\r\\n\" . $loginUrl);\n                        $mail->send();\n                    }\n\n                    // directly return event response\n                    if ($event->hasResponse()) {\n                        return $event->getResponse();\n                    }\n                } catch (\\Exception $e) {\n                    Logger::error('Error sending password recovery email: ' . $e->getMessage());\n                    $error = 'lost_password_email_error';\n                }\n            }\n\n            if ($error) {\n                Logger::error('Lost password service: ' . $error);\n            }\n        }\n\n        $csrfProtection->regenerateCsrfToken($request->getSession());\n\n        if ($error) {\n            $params['reset_error'] = 'Please make sure you are entering a correct input.';\n            if ($error === 'user_reset_password_too_many_attempts') {\n                $params['reset_error'] = 'Too many attempts. Please retry later.';\n            }\n        }\n\n        return $this->render('@PimcoreAdmin/admin/login/lost_password.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/deeplink\", name=\"pimcore_admin_login_deeplink\")\n     */\n    public function deeplinkAction(Request $request): Response\n    {\n        // check for deeplink\n        $queryString = $_SERVER['QUERY_STRING'];\n\n        if (preg_match('/(document|asset|object)_([0-9]+)_([a-z]+)/', $queryString, $deeplink)) {\n            $deeplink = $deeplink[0];\n            $perspective = strip_tags($request->get('perspective', ''));\n\n            if (strpos($queryString, 'token')) {\n                $url = $this->dispatchLoginRedirect([\n                    'deeplink' => $deeplink,\n                    'perspective' => $perspective,\n                ]);\n                $url .= '&' . $queryString;\n\n                return $this->redirect($url);\n            } elseif ($queryString) {\n                $url = $this->dispatchLoginRedirect([\n                    'deeplink' => 'true',\n                    'perspective' => $perspective,\n                ]);\n\n                return $this->render('@PimcoreAdmin/admin/login/deeplink.html.twig', [\n                    'tab' => $deeplink,\n                    'redirect' => $url,\n                ]);\n            }\n        }\n\n        throw $this->createNotFoundException();\n    }\n\n    /**\n     * @return array{config: Config, pluginCssPaths: string[]}\n     */\n    protected function buildLoginPageViewParams(Config $config): array\n    {\n        return [\n            'config' => $config,\n            'adminSettings' => AdminConfig::get(),\n            'pluginCssPaths' => $this->bundleManager->getCssPaths(),\n        ];\n    }\n\n    /**\n     * @Route(\"/login/2fa\", name=\"pimcore_admin_2fa\")\n     */\n    public function twoFactorAuthenticationAction(Request $request, Config $config): Response\n    {\n        $params = $this->buildLoginPageViewParams($config);\n\n        if ($request->hasSession()) {\n            $session = $request->getSession();\n            $authException = $session->get(Security::AUTHENTICATION_ERROR);\n            if ($authException instanceof AuthenticationException) {\n                $session->remove(Security::AUTHENTICATION_ERROR);\n\n                $params['error'] = $authException->getMessage();\n            }\n        } else {\n            $params['error'] = 'No session available, it either timed out or cookies are not enabled.';\n        }\n\n        return $this->render('@PimcoreAdmin/admin/login/two_factor_authentication.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/2fa-setup\", name=\"pimcore_admin_2fa_setup\")\n     */\n    public function twoFactorSetupAuthenticationAction(\n        Request $request,\n        Config $config,\n        GoogleAuthenticatorInterface $twoFactor\n    ): Response {\n        $params = $this->buildLoginPageViewParams($config);\n        $params['setup'] = true;\n\n        $user = $this->getAdminUser();\n        $proxyUser = $this->getAdminUser(true);\n\n        if ($request->query->get('error')) {\n            $params['error'] = $request->query->get('error');\n        }\n\n        if ($request->isMethod('post')) {\n            $secret = $request->getSession()->get('2fa_secret');\n\n            if (!$secret) {\n                throw new \\Exception('2fa secret not found');\n            }\n\n            $user->setTwoFactorAuthentication('enabled', true);\n            $user->setTwoFactorAuthentication('type', 'google');\n            $user->setTwoFactorAuthentication('secret', $secret);\n\n            if (!$twoFactor->checkCode($proxyUser, $request->request->get('_auth_code'))) {\n                return new RedirectResponse($this->generateUrl('pimcore_admin_2fa_setup', ['error' => '2fa_wrong']));\n            }\n\n            $user->save();\n\n            return new RedirectResponse($this->generateUrl('pimcore_admin_login'));\n        }\n\n        $newSecret = $twoFactor->generateSecret();\n\n        $request->getSession()->set('2fa_secret', $newSecret);\n\n        $user->setTwoFactorAuthentication('enabled', true);\n        $user->setTwoFactorAuthentication('type', 'google');\n        $user->setTwoFactorAuthentication('secret', $newSecret);\n\n        $url = $twoFactor->getQRContent($proxyUser);\n\n        $result = Builder::create()\n            ->writer(new PngWriter())\n            ->data($url)\n            ->size(200)\n            ->build();\n\n        $params['image'] = $result->getDataUri();\n\n        return $this->render('@PimcoreAdmin/admin/login/two_factor_setup.html.twig', $params);\n    }\n\n    /**\n     * @Route(\"/login/2fa-verify\", name=\"pimcore_admin_2fa-verify\")\n     *\n     * @param Request $request\n     */\n    public function twoFactorAuthenticationVerifyAction(Request $request): void\n    {\n    }\n\n    public function detectBrowser(): bool\n    {\n        $supported = false;\n        $browser = new \\Browser();\n        $browserVersion = (int)$browser->getVersion();\n\n        if ($browser->getBrowser() == \\Browser::BROWSER_FIREFOX && $browserVersion >= 72) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_CHROME && $browserVersion >= 84) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_SAFARI && $browserVersion >= 13.1) {\n            $supported = true;\n        }\n        if ($browser->getBrowser() == \\Browser::BROWSER_EDGE && $browserVersion >= 90) {\n            $supported = true;\n        }\n\n        return $supported;\n    }\n\n    private function dispatchLoginRedirect(array $routeParams = []): string\n    {\n        $event = new LoginRedirectEvent('pimcore_admin_login', $routeParams);\n        $this->eventDispatcher->dispatch($event, AdminEvents::LOGIN_REDIRECT);\n\n        return $this->generateUrl($event->getRouteName(), $event->getRouteParams());\n    }\n}\n"], "filenames": ["src/Controller/Admin/LoginController.php"], "buggy_code_start_loc": [34], "buggy_code_end_loc": [234], "fixing_code_start_loc": [35], "fixing_code_end_loc": [251], "type": "CWE-74", "message": "Pimcore's Admin Classic Bundle provides a backend user interface for Pimcore. The password reset functionality sends to the the user requesting a password change an email containing an URL to reset its password. The URL sent contains a unique token, valid during 24 hours, allowing the user to reset its password. This token is highly sensitive ; as an attacker able to retrieve it would be able to resets the user's password. Prior to version 1.2.3, the reset-password URL is crafted using the \"Host\" HTTP header of the request sent to request a password reset. This way, an external attacker could send password requests for users, but specify a \"Host\" header of a website that they control. If the user receiving the mail clicks on the link, the attacker would retrieve the reset token of the victim and perform account takeover. Version 1.2.3 fixes this issue.", "other": {"cve": {"id": "CVE-2024-23648", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-24T18:15:08.877", "lastModified": "2024-02-02T15:45:25.457", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore's Admin Classic Bundle provides a backend user interface for Pimcore. The password reset functionality sends to the the user requesting a password change an email containing an URL to reset its password. The URL sent contains a unique token, valid during 24 hours, allowing the user to reset its password. This token is highly sensitive ; as an attacker able to retrieve it would be able to resets the user's password. Prior to version 1.2.3, the reset-password URL is crafted using the \"Host\" HTTP header of the request sent to request a password reset. This way, an external attacker could send password requests for users, but specify a \"Host\" header of a website that they control. If the user receiving the mail clicks on the link, the attacker would retrieve the reset token of the victim and perform account takeover. Version 1.2.3 fixes this issue."}, {"lang": "es", "value": "El paquete Admin Classic de Pimcore proporciona una interfaz de usuario backend para Pimcore. La funci\u00f3n de restablecimiento de contrase\u00f1a env\u00eda al usuario que solicita un cambio de contrase\u00f1a un correo electr\u00f3nico que contiene una URL para restablecer su contrase\u00f1a. La URL enviada contiene un token \u00fanico, v\u00e1lido durante 24 horas, que permite al usuario restablecer su contrase\u00f1a. Este token es muy sensible; ya que un atacante capaz de recuperarlo podr\u00eda restablecer la contrase\u00f1a del usuario. Antes de la versi\u00f3n 1.2.3, la URL de restablecimiento de contrase\u00f1a se elabora utilizando el encabezado HTTP \"Host\" de la solicitud enviada para solicitar un restablecimiento de contrase\u00f1a. De esta manera, un atacante externo podr\u00eda enviar solicitudes de contrase\u00f1a para los usuarios, pero especificar un encabezado \"Host\" de un sitio web que controla. Si el usuario que recibe el correo hace clic en el enlace, el atacante recuperar\u00e1 el token de reinicio de la v\u00edctima y realizar\u00e1 la apropiaci\u00f3n de la cuenta. La versi\u00f3n 1.2.3 soluciona este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:admin_classic_bundle:*:*:*:*:*:pimcore:*:*", "versionEndExcluding": "1.2.3", "matchCriteriaId": "A09FDD6A-8483-4589-9A7E-46817A73788C"}]}]}], "references": [{"url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/70f2205b5a5ea9584721d4f3e803f4d0dd5e4655", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/pimcore/admin-ui-classic-bundle/security/advisories/GHSA-mrqg-mwh7-q94j", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/admin-ui-classic-bundle/commit/70f2205b5a5ea9584721d4f3e803f4d0dd5e4655"}}