{"buggy_code": ["package org.openmrs.module.appointmentscheduling;\n\nimport org.openmrs.BaseOpenmrsData;\nimport org.openmrs.Patient;\nimport org.openmrs.Provider;\n\nimport java.util.Date;\n\n/**\n * persisted object that reflects a request by a provider (or other user) for a scheduler to schedule a patient for a future appointment;\n * has an associated status of pending, fulfilled, or cancelled\n */\npublic class AppointmentRequest extends BaseOpenmrsData {\n\n    public enum AppointmentRequestStatus { PENDING, FULFILLED, CANCELLED };\n\n    private Integer appointmentRequestId;\n\n    private Patient patient;\n\n    private AppointmentType appointmentType;\n\n    private Provider provider;\n\n    private AppointmentRequestStatus status;\n\n    private String notes;\n\n    private Provider requestedBy;\n\n    private Date requestedOn;\n\n    private Integer minTimeFrameValue;\n\n    private TimeFrameUnits minTimeFrameUnits;\n\n    private Integer maxTimeFrameValue;\n\n    private TimeFrameUnits maxTimeFrameUnits;\n\n    // TODO Do we want tio link to the created appointment somehow?\n\n    @Override\n    public Integer getId() {\n        return appointmentRequestId;  //To change body of implemented methods use File | Settings | File Templates.\n    }\n\n    @Override\n    public void setId(Integer id) {\n        this.appointmentRequestId = id;\n    }\n\n    public Integer getAppointmentRequestId() {\n        return appointmentRequestId;\n    }\n\n    public void setAppointmentRequestId(Integer appointmentRequestId) {\n        this.appointmentRequestId = appointmentRequestId;\n    }\n\n    public Patient getPatient() {\n        return patient;\n    }\n\n    public void setPatient(Patient patient) {\n        this.patient = patient;\n    }\n\n    public AppointmentType getAppointmentType() {\n        return appointmentType;\n    }\n\n    public void setAppointmentType(AppointmentType appointmentType) {\n        this.appointmentType = appointmentType;\n    }\n\n    public Provider getProvider() {\n        return provider;\n    }\n\n    public void setProvider(Provider provider) {\n        this.provider = provider;\n    }\n\n    public AppointmentRequestStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(AppointmentRequestStatus status) {\n        this.status = status;\n    }\n\n    public String getNotes() {\n        return notes;\n    }\n\n    public void setNotes(String notes) {\n        this.notes = notes;\n    }\n\n    public Provider getRequestedBy() {\n        return requestedBy;\n    }\n\n    public void setRequestedBy(Provider requestedBy) {\n        this.requestedBy = requestedBy;\n    }\n\n    public Date getRequestedOn() {\n        return requestedOn;\n    }\n\n    public void setRequestedOn(Date requestedOn) {\n        this.requestedOn = requestedOn;\n    }\n\n    public Integer getMinTimeFrameValue() {\n        return minTimeFrameValue;\n    }\n\n    public void setMinTimeFrameValue(Integer minTimeFrameValue) {\n        this.minTimeFrameValue = minTimeFrameValue;\n    }\n\n    public TimeFrameUnits getMinTimeFrameUnits() {\n        return minTimeFrameUnits;\n    }\n\n    public void setMinTimeFrameUnits(TimeFrameUnits minTimeFrameUnits) {\n        this.minTimeFrameUnits = minTimeFrameUnits;\n    }\n\n    public Integer getMaxTimeFrameValue() {\n        return maxTimeFrameValue;\n    }\n\n    public void setMaxTimeFrameValue(Integer maxTimeFrameValue) {\n        this.maxTimeFrameValue = maxTimeFrameValue;\n    }\n\n    public TimeFrameUnits getMaxTimeFrameUnits() {\n        return maxTimeFrameUnits;\n    }\n\n    public void setMaxTimeFrameUnits(TimeFrameUnits maxTimeFrameUnits) {\n        this.maxTimeFrameUnits = maxTimeFrameUnits;\n    }\n}\n", "package org.openmrs.module.appointmentscheduling.api;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openmrs.Patient;\nimport org.openmrs.Provider;\nimport org.openmrs.api.APIException;\nimport org.openmrs.api.LocationService;\nimport org.openmrs.api.PatientService;\nimport org.openmrs.api.ProviderService;\nimport org.openmrs.module.appointmentscheduling.AppointmentRequest;\nimport org.openmrs.module.appointmentscheduling.AppointmentType;\nimport org.openmrs.module.appointmentscheduling.TimeFrameUnits;\nimport org.openmrs.test.BaseModuleContextSensitiveTest;\nimport org.openmrs.test.Verifies;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.Date;\nimport java.util.List;\n\nimport static junit.framework.Assert.assertEquals;\nimport static junit.framework.Assert.assertNotNull;\nimport static junit.framework.Assert.assertNull;\nimport static junit.framework.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\n\npublic class AppointmentRequestServiceTest extends BaseModuleContextSensitiveTest {\n\n    private static final int TOTAL_APPOINTMENT_REQUESTS = 3;\n\n    private static final int TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS = 2;\n\n    @Autowired\n    private AppointmentService service;\n\n    @Autowired\n    LocationService locationService;\n\n    @Autowired\n    ProviderService providerService;\n\n    @Autowired\n    PatientService patientService;\n\n    @Before\n    public void before() throws Exception {\n        executeDataSet(\"standardAppointmentTestDataset.xml\");\n    }\n\n    @Test\n    @Verifies(value = \"should get all appointment requests\", method = \"getAllAppointmentRequests()\")\n    public void getAllAppointmentRequests_shouldGetAllAppointmentRequests() throws Exception {\n        List<AppointmentRequest> appointmentRequests = service.getAllAppointmentRequests();\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, appointmentRequests.size());\n    }\n\n    @Test\n    @Verifies(value = \"should get correct appointment request\", method = \"getAppointmentRequest(Integer)\")\n    public void getAppointmentRequest_shouldGetCorrectAppointmentRequest() throws Exception {\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(1);\n        assertNotNull(appointmentRequest);\n        assertEquals(\"862c94f0-3dae-11e4-916c-0800200c9a66\", appointmentRequest.getUuid());\n        assertEquals(providerService.getProvider(1), appointmentRequest.getProvider());\n        assertEquals(patientService.getPatient(2), appointmentRequest.getPatient());\n        assertEquals(service.getAppointmentType(1), appointmentRequest.getAppointmentType());\n        assertEquals(AppointmentRequest.AppointmentRequestStatus.PENDING, appointmentRequest.getStatus());\n        assertEquals(providerService.getProvider(1), appointmentRequest.getRequestedBy());\n        assertEquals(\"ASAP\", appointmentRequest.getNotes());\n        assertEquals(new Integer(0), appointmentRequest.getMinTimeFrameValue());\n        assertEquals(TimeFrameUnits.DAYS, appointmentRequest.getMinTimeFrameUnits());\n        assertEquals(new Integer(7), appointmentRequest.getMaxTimeFrameValue());\n        assertEquals(TimeFrameUnits.DAYS, appointmentRequest.getMaxTimeFrameUnits());\n\n        appointmentRequest = service.getAppointmentRequest(2);\n        assertNotNull(appointmentRequest);\n        assertEquals(\"862c94f1-3dae-11e4-916c-0800200c9a66\", appointmentRequest.getUuid());\n        assertEquals(providerService.getProvider(1), appointmentRequest.getProvider());\n        assertEquals(patientService.getPatient(6), appointmentRequest.getPatient());\n        assertEquals(service.getAppointmentType(2), appointmentRequest.getAppointmentType());\n        assertEquals(AppointmentRequest.AppointmentRequestStatus.FULFILLED, appointmentRequest.getStatus());\n        assertEquals(providerService.getProvider(2), appointmentRequest.getRequestedBy());\n        assertEquals(new Integer(6), appointmentRequest.getMinTimeFrameValue());\n        assertEquals(TimeFrameUnits.WEEKS, appointmentRequest.getMinTimeFrameUnits());\n        assertEquals(new Integer(2), appointmentRequest.getMaxTimeFrameValue());\n        assertEquals(TimeFrameUnits.MONTHS, appointmentRequest.getMaxTimeFrameUnits());\n        assertNull(appointmentRequest.getNotes());\n\n    }\n\n    @Test\n    @Verifies(value = \"should get correct appointment request\", method = \"getAppointmentRequestByUuid(String)\")\n    public void getAppointmentRequestByUuid_shouldGetCorrectAppointmentRequest() throws Exception {\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequestByUuid(\"862c94f2-3dae-11e4-916c-0800200c9a66\");\n        assertNotNull(appointmentRequest);\n        assertEquals(new Integer(3), appointmentRequest.getId());\n    }\n\n    @Test\n    @Verifies(value = \"should save new appointment request\", method = \"saveAppointmentRequest(AppointmentRequest)\")\n    public void saveAppointmentRequest_shouldSaveNewAppointmentRequest() throws Exception {\n\n        List<AppointmentRequest> appointmentRequests = service.getAllAppointmentRequests(true);\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, appointmentRequests.size());\n\n        AppointmentRequest appointmentRequest = new AppointmentRequest();\n        appointmentRequest.setPatient(patientService.getPatient(2));\n        appointmentRequest.setAppointmentType(service.getAppointmentType(1));\n        appointmentRequest.setProvider(providerService.getProvider(1));\n        appointmentRequest.setRequestedBy(providerService.getProvider(1));\n        appointmentRequest.setRequestedOn(new Date());\n        appointmentRequest.setMinTimeFrameValue(1);\n        appointmentRequest.setMinTimeFrameUnits(TimeFrameUnits.MONTHS);\n        appointmentRequest.setMaxTimeFrameValue(6);\n        appointmentRequest.setMaxTimeFrameUnits(TimeFrameUnits.MONTHS);\n\n        appointmentRequest.setNotes(\"test\");\n        appointmentRequest.setStatus(AppointmentRequest.AppointmentRequestStatus.PENDING);\n        service.saveAppointmentRequest(appointmentRequest);\n\n        //Should create a new appointment request row\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS + 1, service.getAllAppointmentRequests().size());\n    }\n\n    @Test\n    @Verifies(value = \"should save new appointment request\", method = \"saveAppointmentRequest(AppointmentRequest)\")\n    public void saveAppointmentRequest_shouldSaveNewAppointmentRequestWithMinimalParameters() throws Exception {\n\n        List<AppointmentRequest> appointmentRequests = service.getAllAppointmentRequests(true);\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, appointmentRequests.size());\n\n        AppointmentRequest appointmentRequest = new AppointmentRequest();\n        appointmentRequest.setPatient(patientService.getPatient(2));\n        appointmentRequest.setAppointmentType(service.getAppointmentType(1));\n        appointmentRequest.setRequestedOn(new Date());\n        appointmentRequest.setStatus(AppointmentRequest.AppointmentRequestStatus.PENDING);\n        service.saveAppointmentRequest(appointmentRequest);\n\n        appointmentRequest = service.getAppointmentRequest(4);\n        assertEquals(AppointmentRequest.AppointmentRequestStatus.PENDING, appointmentRequest.getStatus());\n        assertNotNull(appointmentRequest);\n\n        //Should create a new appointment request row\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS + 1, service.getAllAppointmentRequests().size());\n    }\n\n    @Test(expected = APIException.class)\n    @Verifies(value = \"should fail with validation exception\", method = \"saveAppointmentRequest(AppointmentRequest)\")\n    public void saveAppointmentRequest_shouldFailWithValidationException() throws Exception {\n\n        List<AppointmentRequest> appointmentRequests = service.getAllAppointmentRequests(true);\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, appointmentRequests.size());\n\n        AppointmentRequest appointmentRequest = new AppointmentRequest();\n        appointmentRequest.setPatient(patientService.getPatient(2));\n        service.saveAppointmentRequest(appointmentRequest);\n\n    }\n\n    @Test\n    @Verifies(value = \"should save edited appointment request\", method = \"saveAppointmentRequest(AppointmentRequest)\")\n    public void saveAppointmentRequest_shouldSaveEditedAppointmentRequest() throws Exception {\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(1);\n        appointmentRequest.setPatient(patientService.getPatient(6));\n\n        service.saveAppointmentRequest(appointmentRequest);\n\n        appointmentRequest = service.getAppointmentRequest(1);\n        assertEquals(patientService.getPatient(6), appointmentRequest.getPatient());\n\n        //Should not change the number of appointment types\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests().size());\n    }\n\n    @Test\n    @Verifies(value = \"should void given appointment request\", method = \"voidAppointmentRequest(AppointmentRequest, String)\")\n    public void voidAppointmentRequest_shouldVoidGivenAppointmentRequest() throws Exception {\n\n        // sanity check\n        assertEquals(TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests(false).size());\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(1);\n        service.voidAppointmentRequest(appointmentRequest, \"test\");\n\n        // one less on non-voided appointment request\n        assertEquals(TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS - 1, service.getAllAppointmentRequests(false).size());\n\n        // still same total count, however,\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests().size());\n\n        appointmentRequest = service.getAppointmentRequest(1);\n        assertTrue(appointmentRequest.isVoided());\n\n    }\n\n    @Test\n    @Verifies(value = \"should unvoid given appointment request\", method = \"unvoidAppointmentRequest(AppointmentRequest)\")\n    public void unvoidAppointmentRequest_shouldUnvoidGivenAppointmentRequest() throws Exception {\n\n        // sanity check\n        assertEquals(TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests(false).size());\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(3);\n        service.unvoidAppointmentRequest(appointmentRequest);\n\n        // one more non-voided appointment request\n        assertEquals(TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS + 1, service.getAllAppointmentRequests(false).size());\n\n        // still same total count, however,\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests().size());\n\n        appointmentRequest = service.getAppointmentRequest(3);\n        assertFalse(appointmentRequest.isVoided());\n\n    }\n\n    @Test\n    @Verifies(value = \"should delete given appointment request\", method = \"purgeAppointmentRequest(AppointmentRequest)\")\n    public void purgeAppointmentRequest_shouldDeleteGivenAppointmentRequest() throws Exception {\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(3);\n        assertNotNull(appointmentRequest);\n\n        service.purgeAppointmentRequest(appointmentRequest);\n\n        appointmentRequest = service.getAppointmentRequest(3);\n        assertNull(appointmentRequest);\n\n        //Should decrease the number of appointment requestss by one.\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS - 1, service.getAllAppointmentRequests().size());\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByPatient() throws Exception {\n\n        // this patient has two requests, but one is voided, should be skipped\n        Patient patient = patientService.getPatient(6);\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(patient, null, null, null);\n\n        assertEquals(1, requests.size());\n        assertEquals(new Integer(2), requests.get(0).getId());\n\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByType() throws Exception {\n\n        AppointmentType type = service.getAppointmentType(1);\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(null, type, null, null);\n\n        assertEquals(1, requests.size());\n        assertEquals(new Integer(1), requests.get(0).getId());\n\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByProvider() throws Exception {\n\n        Provider provider = providerService.getProvider(1);\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(null, null, provider, null);\n\n        assertEquals(2, requests.size());\n        assertTrue((requests.get(0).getId() == 1 && requests.get(1).getId() == 2)\n                || (requests.get(0).getId() == 2 && requests.get(1).getId() == 1));\n\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByStatus() throws Exception {\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(null, null, null, AppointmentRequest.AppointmentRequestStatus.PENDING);\n\n        assertEquals(1, requests.size());\n        assertEquals(new Integer(1), requests.get(0).getId());\n\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByMultipleConstraints() throws Exception {\n\n        Patient patient = patientService.getPatient(2);\n        Provider provider = providerService.getProvider(1);\n        AppointmentType appointmentType = service.getAppointmentType(1);\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(patient, appointmentType, provider,\n                AppointmentRequest.AppointmentRequestStatus.PENDING);\n\n        assertEquals(1, requests.size());\n        assertEquals(new Integer(1), requests.get(0).getId());\n\n    }\n\n}\n"], "fixing_code": ["package org.openmrs.module.appointmentscheduling;\n\nimport org.openmrs.BaseOpenmrsData;\nimport org.openmrs.Patient;\nimport org.openmrs.Provider;\nimport org.openmrs.web.WebUtil;\n\nimport java.util.Date;\n\n/**\n * persisted object that reflects a request by a provider (or other user) for a scheduler to schedule a patient for a future appointment;\n * has an associated status of pending, fulfilled, or cancelled\n */\npublic class AppointmentRequest extends BaseOpenmrsData {\n\n    public enum AppointmentRequestStatus { PENDING, FULFILLED, CANCELLED };\n\n    private Integer appointmentRequestId;\n\n    private Patient patient;\n\n    private AppointmentType appointmentType;\n\n    private Provider provider;\n\n    private AppointmentRequestStatus status;\n\n    private String notes;\n\n    private Provider requestedBy;\n\n    private Date requestedOn;\n\n    private Integer minTimeFrameValue;\n\n    private TimeFrameUnits minTimeFrameUnits;\n\n    private Integer maxTimeFrameValue;\n\n    private TimeFrameUnits maxTimeFrameUnits;\n\n    // TODO Do we want tio link to the created appointment somehow?\n\n    @Override\n    public Integer getId() {\n        return appointmentRequestId;  //To change body of implemented methods use File | Settings | File Templates.\n    }\n\n    @Override\n    public void setId(Integer id) {\n        this.appointmentRequestId = id;\n    }\n\n    public Integer getAppointmentRequestId() {\n        return appointmentRequestId;\n    }\n\n    public void setAppointmentRequestId(Integer appointmentRequestId) {\n        this.appointmentRequestId = appointmentRequestId;\n    }\n\n    public Patient getPatient() {\n        return patient;\n    }\n\n    public void setPatient(Patient patient) {\n        this.patient = patient;\n    }\n\n    public AppointmentType getAppointmentType() {\n        return appointmentType;\n    }\n\n    public void setAppointmentType(AppointmentType appointmentType) {\n        this.appointmentType = appointmentType;\n    }\n\n    public Provider getProvider() {\n        return provider;\n    }\n\n    public void setProvider(Provider provider) {\n        this.provider = provider;\n    }\n\n    public AppointmentRequestStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(AppointmentRequestStatus status) {\n        this.status = status;\n    }\n\n    public String getNotes() {\n        return notes;\n    }\n\n    public void setNotes(String notes) {\n        this.notes = WebUtil.escapeHTML(notes);\n    }\n\n    public Provider getRequestedBy() {\n        return requestedBy;\n    }\n\n    public void setRequestedBy(Provider requestedBy) {\n        this.requestedBy = requestedBy;\n    }\n\n    public Date getRequestedOn() {\n        return requestedOn;\n    }\n\n    public void setRequestedOn(Date requestedOn) {\n        this.requestedOn = requestedOn;\n    }\n\n    public Integer getMinTimeFrameValue() {\n        return minTimeFrameValue;\n    }\n\n    public void setMinTimeFrameValue(Integer minTimeFrameValue) {\n        this.minTimeFrameValue = minTimeFrameValue;\n    }\n\n    public TimeFrameUnits getMinTimeFrameUnits() {\n        return minTimeFrameUnits;\n    }\n\n    public void setMinTimeFrameUnits(TimeFrameUnits minTimeFrameUnits) {\n        this.minTimeFrameUnits = minTimeFrameUnits;\n    }\n\n    public Integer getMaxTimeFrameValue() {\n        return maxTimeFrameValue;\n    }\n\n    public void setMaxTimeFrameValue(Integer maxTimeFrameValue) {\n        this.maxTimeFrameValue = maxTimeFrameValue;\n    }\n\n    public TimeFrameUnits getMaxTimeFrameUnits() {\n        return maxTimeFrameUnits;\n    }\n\n    public void setMaxTimeFrameUnits(TimeFrameUnits maxTimeFrameUnits) {\n        this.maxTimeFrameUnits = maxTimeFrameUnits;\n    }\n}\n", "package org.openmrs.module.appointmentscheduling.api;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.openmrs.Patient;\nimport org.openmrs.Provider;\nimport org.openmrs.api.APIException;\nimport org.openmrs.api.LocationService;\nimport org.openmrs.api.PatientService;\nimport org.openmrs.api.ProviderService;\nimport org.openmrs.module.appointmentscheduling.AppointmentRequest;\nimport org.openmrs.module.appointmentscheduling.AppointmentType;\nimport org.openmrs.module.appointmentscheduling.TimeFrameUnits;\nimport org.openmrs.test.BaseModuleContextSensitiveTest;\nimport org.openmrs.test.Verifies;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport java.util.Date;\nimport java.util.List;\n\nimport static junit.framework.Assert.assertEquals;\nimport static junit.framework.Assert.assertNotNull;\nimport static junit.framework.Assert.assertNull;\nimport static junit.framework.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\n\npublic class AppointmentRequestServiceTest extends BaseModuleContextSensitiveTest {\n\n    private static final int TOTAL_APPOINTMENT_REQUESTS = 3;\n\n    private static final int TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS = 2;\n\n    @Autowired\n    private AppointmentService service;\n\n    @Autowired\n    LocationService locationService;\n\n    @Autowired\n    ProviderService providerService;\n\n    @Autowired\n    PatientService patientService;\n\n    @Before\n    public void before() throws Exception {\n        executeDataSet(\"standardAppointmentTestDataset.xml\");\n    }\n\n    @Test\n    @Verifies(value = \"should get all appointment requests\", method = \"getAllAppointmentRequests()\")\n    public void getAllAppointmentRequests_shouldGetAllAppointmentRequests() throws Exception {\n        List<AppointmentRequest> appointmentRequests = service.getAllAppointmentRequests();\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, appointmentRequests.size());\n    }\n\n    @Test\n    @Verifies(value = \"should get correct appointment request\", method = \"getAppointmentRequest(Integer)\")\n    public void getAppointmentRequest_shouldGetCorrectAppointmentRequest() throws Exception {\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(1);\n        assertNotNull(appointmentRequest);\n        assertEquals(\"862c94f0-3dae-11e4-916c-0800200c9a66\", appointmentRequest.getUuid());\n        assertEquals(providerService.getProvider(1), appointmentRequest.getProvider());\n        assertEquals(patientService.getPatient(2), appointmentRequest.getPatient());\n        assertEquals(service.getAppointmentType(1), appointmentRequest.getAppointmentType());\n        assertEquals(AppointmentRequest.AppointmentRequestStatus.PENDING, appointmentRequest.getStatus());\n        assertEquals(providerService.getProvider(1), appointmentRequest.getRequestedBy());\n        assertEquals(\"ASAP\", appointmentRequest.getNotes());\n        assertEquals(new Integer(0), appointmentRequest.getMinTimeFrameValue());\n        assertEquals(TimeFrameUnits.DAYS, appointmentRequest.getMinTimeFrameUnits());\n        assertEquals(new Integer(7), appointmentRequest.getMaxTimeFrameValue());\n        assertEquals(TimeFrameUnits.DAYS, appointmentRequest.getMaxTimeFrameUnits());\n\n        appointmentRequest = service.getAppointmentRequest(2);\n        assertNotNull(appointmentRequest);\n        assertEquals(\"862c94f1-3dae-11e4-916c-0800200c9a66\", appointmentRequest.getUuid());\n        assertEquals(providerService.getProvider(1), appointmentRequest.getProvider());\n        assertEquals(patientService.getPatient(6), appointmentRequest.getPatient());\n        assertEquals(service.getAppointmentType(2), appointmentRequest.getAppointmentType());\n        assertEquals(AppointmentRequest.AppointmentRequestStatus.FULFILLED, appointmentRequest.getStatus());\n        assertEquals(providerService.getProvider(2), appointmentRequest.getRequestedBy());\n        assertEquals(new Integer(6), appointmentRequest.getMinTimeFrameValue());\n        assertEquals(TimeFrameUnits.WEEKS, appointmentRequest.getMinTimeFrameUnits());\n        assertEquals(new Integer(2), appointmentRequest.getMaxTimeFrameValue());\n        assertEquals(TimeFrameUnits.MONTHS, appointmentRequest.getMaxTimeFrameUnits());\n    }\n\n    @Test\n    @Verifies(value = \"should get correct appointment request\", method = \"getAppointmentRequestByUuid(String)\")\n    public void getAppointmentRequestByUuid_shouldGetCorrectAppointmentRequest() throws Exception {\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequestByUuid(\"862c94f2-3dae-11e4-916c-0800200c9a66\");\n        assertNotNull(appointmentRequest);\n        assertEquals(new Integer(3), appointmentRequest.getId());\n    }\n\n    @Test\n    @Verifies(value = \"should save new appointment request\", method = \"saveAppointmentRequest(AppointmentRequest)\")\n    public void saveAppointmentRequest_shouldSaveNewAppointmentRequest() throws Exception {\n\n        List<AppointmentRequest> appointmentRequests = service.getAllAppointmentRequests(true);\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, appointmentRequests.size());\n\n        AppointmentRequest appointmentRequest = new AppointmentRequest();\n        appointmentRequest.setPatient(patientService.getPatient(2));\n        appointmentRequest.setAppointmentType(service.getAppointmentType(1));\n        appointmentRequest.setProvider(providerService.getProvider(1));\n        appointmentRequest.setRequestedBy(providerService.getProvider(1));\n        appointmentRequest.setRequestedOn(new Date());\n        appointmentRequest.setMinTimeFrameValue(1);\n        appointmentRequest.setMinTimeFrameUnits(TimeFrameUnits.MONTHS);\n        appointmentRequest.setMaxTimeFrameValue(6);\n        appointmentRequest.setMaxTimeFrameUnits(TimeFrameUnits.MONTHS);\n\n        appointmentRequest.setNotes(\"test\");\n        appointmentRequest.setStatus(AppointmentRequest.AppointmentRequestStatus.PENDING);\n        service.saveAppointmentRequest(appointmentRequest);\n\n        //Should create a new appointment request row\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS + 1, service.getAllAppointmentRequests().size());\n    }\n\n    @Test\n    @Verifies(value = \"should save new appointment request\", method = \"saveAppointmentRequest(AppointmentRequest)\")\n    public void saveAppointmentRequest_shouldSaveNewAppointmentRequestWithMinimalParameters() throws Exception {\n\n        List<AppointmentRequest> appointmentRequests = service.getAllAppointmentRequests(true);\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, appointmentRequests.size());\n\n        AppointmentRequest appointmentRequest = new AppointmentRequest();\n        appointmentRequest.setPatient(patientService.getPatient(2));\n        appointmentRequest.setAppointmentType(service.getAppointmentType(1));\n        appointmentRequest.setRequestedOn(new Date());\n        appointmentRequest.setStatus(AppointmentRequest.AppointmentRequestStatus.PENDING);\n        service.saveAppointmentRequest(appointmentRequest);\n\n        appointmentRequest = service.getAppointmentRequest(4);\n        assertEquals(AppointmentRequest.AppointmentRequestStatus.PENDING, appointmentRequest.getStatus());\n        assertNotNull(appointmentRequest);\n\n        //Should create a new appointment request row\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS + 1, service.getAllAppointmentRequests().size());\n    }\n\n    @Test(expected = APIException.class)\n    @Verifies(value = \"should fail with validation exception\", method = \"saveAppointmentRequest(AppointmentRequest)\")\n    public void saveAppointmentRequest_shouldFailWithValidationException() throws Exception {\n\n        List<AppointmentRequest> appointmentRequests = service.getAllAppointmentRequests(true);\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, appointmentRequests.size());\n\n        AppointmentRequest appointmentRequest = new AppointmentRequest();\n        appointmentRequest.setPatient(patientService.getPatient(2));\n        service.saveAppointmentRequest(appointmentRequest);\n\n    }\n\n    @Test\n    @Verifies(value = \"should save edited appointment request\", method = \"saveAppointmentRequest(AppointmentRequest)\")\n    public void saveAppointmentRequest_shouldSaveEditedAppointmentRequest() throws Exception {\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(1);\n        appointmentRequest.setPatient(patientService.getPatient(6));\n\n        service.saveAppointmentRequest(appointmentRequest);\n\n        appointmentRequest = service.getAppointmentRequest(1);\n        assertEquals(patientService.getPatient(6), appointmentRequest.getPatient());\n\n        //Should not change the number of appointment types\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests().size());\n    }\n\n    @Test\n    @Verifies(value = \"should void given appointment request\", method = \"voidAppointmentRequest(AppointmentRequest, String)\")\n    public void voidAppointmentRequest_shouldVoidGivenAppointmentRequest() throws Exception {\n\n        // sanity check\n        assertEquals(TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests(false).size());\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(1);\n        service.voidAppointmentRequest(appointmentRequest, \"test\");\n\n        // one less on non-voided appointment request\n        assertEquals(TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS - 1, service.getAllAppointmentRequests(false).size());\n\n        // still same total count, however,\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests().size());\n\n        appointmentRequest = service.getAppointmentRequest(1);\n        assertTrue(appointmentRequest.isVoided());\n\n    }\n\n    @Test\n    @Verifies(value = \"should unvoid given appointment request\", method = \"unvoidAppointmentRequest(AppointmentRequest)\")\n    public void unvoidAppointmentRequest_shouldUnvoidGivenAppointmentRequest() throws Exception {\n\n        // sanity check\n        assertEquals(TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests(false).size());\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(3);\n        service.unvoidAppointmentRequest(appointmentRequest);\n\n        // one more non-voided appointment request\n        assertEquals(TOTAL_NON_VOIDED_APPOINTMENT_REQUESTS + 1, service.getAllAppointmentRequests(false).size());\n\n        // still same total count, however,\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS, service.getAllAppointmentRequests().size());\n\n        appointmentRequest = service.getAppointmentRequest(3);\n        assertFalse(appointmentRequest.isVoided());\n\n    }\n\n    @Test\n    @Verifies(value = \"should delete given appointment request\", method = \"purgeAppointmentRequest(AppointmentRequest)\")\n    public void purgeAppointmentRequest_shouldDeleteGivenAppointmentRequest() throws Exception {\n\n        AppointmentRequest appointmentRequest = service.getAppointmentRequest(3);\n        assertNotNull(appointmentRequest);\n\n        service.purgeAppointmentRequest(appointmentRequest);\n\n        appointmentRequest = service.getAppointmentRequest(3);\n        assertNull(appointmentRequest);\n\n        //Should decrease the number of appointment requestss by one.\n        assertEquals(TOTAL_APPOINTMENT_REQUESTS - 1, service.getAllAppointmentRequests().size());\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByPatient() throws Exception {\n\n        // this patient has two requests, but one is voided, should be skipped\n        Patient patient = patientService.getPatient(6);\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(patient, null, null, null);\n\n        assertEquals(1, requests.size());\n        assertEquals(new Integer(2), requests.get(0).getId());\n\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByType() throws Exception {\n\n        AppointmentType type = service.getAppointmentType(1);\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(null, type, null, null);\n\n        assertEquals(1, requests.size());\n        assertEquals(new Integer(1), requests.get(0).getId());\n\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByProvider() throws Exception {\n\n        Provider provider = providerService.getProvider(1);\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(null, null, provider, null);\n\n        assertEquals(2, requests.size());\n        assertTrue((requests.get(0).getId() == 1 && requests.get(1).getId() == 2)\n                || (requests.get(0).getId() == 2 && requests.get(1).getId() == 1));\n\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByStatus() throws Exception {\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(null, null, null, AppointmentRequest.AppointmentRequestStatus.PENDING);\n\n        assertEquals(1, requests.size());\n        assertEquals(new Integer(1), requests.get(0).getId());\n\n    }\n\n    @Test\n    public void getAppointmentRequestsByConstraints_shouldFetchAppointmentsByMultipleConstraints() throws Exception {\n\n        Patient patient = patientService.getPatient(2);\n        Provider provider = providerService.getProvider(1);\n        AppointmentType appointmentType = service.getAppointmentType(1);\n\n        List<AppointmentRequest> requests = service.getAppointmentRequestsByConstraints(patient, appointmentType, provider,\n                AppointmentRequest.AppointmentRequestStatus.PENDING);\n\n        assertEquals(1, requests.size());\n        assertEquals(new Integer(1), requests.get(0).getId());\n\n    }\n\n    @Test\n    @Verifies(value=\"The text for notes should be sanitized\", method=\"sanitizeNotes(String)\")\n    public void sanitizeAppointmentRequest_shouldSanitizeTheTextInputForAppointmentNotes() throws Exception {\n        final String note = \"<iframe>\";\n        final String sanitizedNote = \"&lt;iframe&gt;\";\n        AppointmentRequest appointmentRequest = new AppointmentRequest();\n        appointmentRequest.setNotes(note);\n        assertEquals(appointmentRequest.getNotes(), sanitizedNote);\n    }\n\n}\n"], "filenames": ["api/src/main/java/org/openmrs/module/appointmentscheduling/AppointmentRequest.java", "api/src/test/java/org/openmrs/module/appointmentscheduling/api/AppointmentRequestServiceTest.java"], "buggy_code_start_loc": [5, 87], "buggy_code_end_loc": [99, 297], "fixing_code_start_loc": [6, 86], "fixing_code_end_loc": [100, 306], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, was found in OpenMRS Appointment Scheduling Module up to 1.16.x. This affects the function getNotes of the file api/src/main/java/org/openmrs/module/appointmentscheduling/AppointmentRequest.java of the component Notes Handler. The manipulation of the argument notes leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.17.0 is able to address this issue. The name of the patch is 2ccbe39c020809765de41eeb8ee4c70b5ec49cc8. It is recommended to upgrade the affected component. The identifier VDB-216741 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4727", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-27T15:15:12.287", "lastModified": "2023-01-05T19:16:01.060", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in OpenMRS Appointment Scheduling Module up to 1.16.x. This affects the function getNotes of the file api/src/main/java/org/openmrs/module/appointmentscheduling/AppointmentRequest.java of the component Notes Handler. The manipulation of the argument notes leads to cross site scripting. It is possible to initiate the attack remotely. Upgrading to version 1.17.0 is able to address this issue. The name of the patch is 2ccbe39c020809765de41eeb8ee4c70b5ec49cc8. It is recommended to upgrade the affected component. The identifier VDB-216741 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmrs:appointment_scheduling_module:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.17.0", "matchCriteriaId": "EAA89B10-2C9A-446A-A310-6EA8D643785D"}]}]}], "references": [{"url": "https://github.com/openmrs/openmrs-module-appointmentscheduling/commit/2ccbe39c020809765de41eeb8ee4c70b5ec49cc8", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openmrs/openmrs-module-appointmentscheduling/pull/39", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/openmrs/openmrs-module-appointmentscheduling/releases/tag/1.17.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216741", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openmrs/openmrs-module-appointmentscheduling/commit/2ccbe39c020809765de41eeb8ee4c70b5ec49cc8"}}