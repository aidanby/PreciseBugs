{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      load.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (isset($_SESSION['CPM']) === false || (int) $_SESSION['CPM'] !== 1) {\n    die('Hacking attempt...');\n}\n\n// Is maintenance on-going?\nif (\n    isset($SETTINGS['maintenance_mode']) === true\n    && (int) $SETTINGS['maintenance_mode'] === 1\n    && ($session_user_admin === null\n        || (int) $session_user_admin === 1)\n) {\n    ?>\n    <script type=\"text/javascript\">\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('index_maintenance_mode_admin'); ?>',\n            '<?php echo langHdl('information'); ?>', {\n                timeOut: 0\n            }\n        );\n    </script>\n<?php\n}\n?>\n\n<script type=\"text/javascript\">\n    var userScrollPosition = 0,\n        debugJavascript = true;\n    let hourInMinutes = 60;\n\n\n    $(document).ready(function() {\n        //console.log('-- PAGE LOADED --'+$(location).attr('href').includes('?')+\" -- \"+store.get('teampassUser'));\n        if ($(location).attr('href').includes('?') === true && (store.get('teampassUser') === undefined || parseInt(store.get('teampassUser').user_id) <= 0)) {\n            $(location).attr('href', 'index.php?session=expired');\n            return false;\n        }\n\n        // prevent a resubmit on refresh and back button\n        if (window.history.replaceState) {\n            window.history.replaceState(null, null, window.location.href);\n        }\n    });\n\n    /**\n    *   Add 1 hour to session duration\n    **/\n    function IncreaseSessionTime(duration)\n    {\n        duration = duration || hourInMinutes;\n        $.post(\n            'sources/main.queries.php',\n            {\n                type     : 'increase_session_time',\n                type_category: 'action_user',\n                duration : parseInt(duration, 10) * hourInMinutes,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                if (data[0].new_value !== 'expired') {\n                    $('#temps_restant').val(data[0].new_value);\n                    $('#date_end_session').val(data[0].new_value);\n                    $('#countdown').css('color', 'white');\n                } else {\n                    $(location).attr('href', 'index.php?session=expired');\n                }\n            },\n            'json'\n        );\n    }\n\n    // Start real time\n    // get list of last items\n    if (store.get('teampassUser') !== undefined && parseInt(store.get('teampassUser').user_id) > 0\n        && String('<?php echo $_SESSION['key']; ?>') === store.get('teampassUser').sessionKey\n        && (Date.now() - store.get('teampassUser').sessionStartTimestamp) < (store.get('teampassUser').sessionDuration * 1000)\n    ) {\n        $.when(\n            // Load teampass settings\n            loadSettings()\n        ).then(function() {\n            $.when(\n                // Refresh list of last items shopwn\n                refreshListLastSeenItems()\n            ).then(function() {\n                // Check if new privatekey needs to be adapted\n                var data = {\n                    'user_id': store.get('teampassUser').user_id,\n                    'fields' : 'special, auth_type, is_ready_for_usage, ongoing_process_id, otp_provided',\n                }\n                $.post(\n                    \"sources/main.queries.php\", {\n                        type: \"get_user_info\",\n                        type_category: 'action_user',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //decrypt data\n                        data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) {\n                            console.info('Get user info results:');\n                            console.log(data);\n                        }\n\n                        // update local storage\n                        store.update(\n                            'teampassUser', {},\n                            function(teampassUser) {\n                                teampassUser.special = data.queryResults.special;\n                                teampassUser.auth_type = data.queryResults.auth_type;\n                                teampassUser.is_ready_for_usage = data.queryResults.is_ready_for_usage;\n                                teampassUser.ongoing_process_id = data.queryResults.ongoing_process_id;\n                            }\n                        );\n\n                        if (data.error === false && data.queryResults.special === 'generate-keys') {\n                            // Get generation keys progress status\n                            getGenerateKeysProgress(store.get('teampassUser').user_id);\n\n                            // ----\n                        } else if (data.error === false && data.queryResults.special === 'auth-pwd-change' && data.queryResults.auth_type === 'local') {\n                            // USer's password has been reseted, he shall change it\n                            if (debugJavascript === true) console.log('User has to change his auth password')\n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // Show passwords inputs and form\n                            $('#dialog-user-change-password-info')\n                                .html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('user_has_to_change_password_info');?>')\n                                .removeClass('hidden');\n                            $('#dialog-user-change-password').removeClass('hidden');\n\n                        // ----\n                        } else if (data.error === false && data.queryResults.special === 'auth-pwd-change' && data.queryResults.auth_type === 'ldap') {\n                            // USer's password has been reseted, he shall change it\n                            if (debugJavascript === true) console.log('LDAP user password has to change his auth password')\n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // Show passwords inputs and form\n                            $('#dialog-ldap-user-change-password-info')\n                                .html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('ldap_user_has_changed_his_password');?>')\n                                .removeClass('hidden');\n                            $('#dialog-ldap-user-change-password').removeClass('hidden');\n                            \n                            // ----\n                        } else if (\n                            (data.error === false && data.queryResults.special === 'user_added_from_ldap' && data.queryResults.auth_type === 'ldap')\n                            || (typeof data.queryResults !== 'undefined' && data.queryResults.special === 'otc_is_required_on_next_login')\n                            || parseInt(data.queryResults.otp_provided) === 0\n                        ) {\n                            // USer's password has been reseted, he shall change it\n                            if (debugJavascript === true) console.log('NEW LDAP user password - we need to encrypt items')\n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // Show form\n                            $('#dialog-ldap-user-build-keys-database').removeClass('hidden');\n                        } else if (typeof data.queryResults !== 'undefined' && data.queryResults.special === 'recrypt-private-key') {\n                            // USer's password has been reseted, he shall change it\n                            if (debugJavascript === true) console.log('NEW LDAP - we need to encrypt private key')\n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // Show form\n                            $('#dialog-ldap-user-change-password').removeClass('hidden');\n                        }\n                    }\n                );\n            }).then(function() {\n                if (store.get('teampassSettings') === undefined || parseInt(store.get('teampassSettings').enable_tasks_manager) === 0) {\n                    console.log('Now sending emails')\n                    setTimeout(\n                        function() {\n                            $.when(\n                                // send email\n                                $.post(\n                                    \"sources/main.queries.php\", {\n                                        type: \"send_waiting_emails\",\n                                        type_category: 'action_mail',\n                                        key: \"<?php echo $_SESSION['key']; ?>\"\n                                    }\n                                )\n                            ).then(function() {\n                                // send statistics\n                                $.post(\n                                    \"sources/main.queries.php\", {\n                                        type: \"sending_statistics\",\n                                        type_category: 'action_system',\n                                        key: \"<?php echo $_SESSION['key']; ?>\"\n                                    }\n                                );\n                            });\n                        },\n                        3000\n                    );\n                }\n\n                // Save user location\n                //console.info(\"DEBUG - Save user location -\"+store.get('teampassUser').location_stored)\n                if (store.get('teampassUser').location_stored !== 1) {\n                // Save user location\n                    $.post(\n                        \"sources/users.queries.php\", {\n                            type: 'save_user_location',\n                            step: \"perform\",\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            // update local storage\n                            store.update(\n                                'teampassUser', {},\n                                function(teampassUser) {\n                                    teampassUser.location_stored = 1;\n                                }\n                            );\n                        }\n                    );\n                }\n            });\n        });\n    }\n    //-- end\n\n\n    // Countdown\n    countdown();\n\n    $(\".show_hide_password a\").on('click', function(event) {\n        event.preventDefault();\n        if($('.how_hide_password input').attr(\"type\") === \"text\"){\n            $('.show_hide_password input').attr('type', 'password');\n            $('.show_hide_password i').addClass( \"fa-eye-slash\" );\n            $('.show_hide_password i').removeClass( \"fa-eye\" );\n        }else if($('#show_hide_password input').attr(\"type\") === \"password\"){\n            $('.show_hide_password input').attr('type', 'text');\n            $('.show_hide_password i').removeClass( \"fa-eye-slash\" );\n            $('.show_hide_password i').addClass( \"fa-eye\" );\n        }\n    });\n    \n    if (store.get('teampassUser') !== undefined &&\n        store.get('teampassUser').special === 'generate-keys'\n    ) {\n        // Now we need to perform re-encryption due to LDAP password change\n        /*console.log('User has to regenerate keys')\n        // HIde\n        $('.content-header, .content').addClass('hidden');\n        $('#dialog-user-temporary-code-info').html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('renecyption_expected');?>');\n\n        // Show passwords inputs and form\n        $('#dialog-user-temporary-code').removeClass('hidden');\n        */\n        \n        // ---\n    } else if (store.get('teampassUser') !== undefined &&\n        store.get('teampassUser').special === 'ldap_password_has_changed_do_reencryption'\n    ) {\n        // Now we need to perform re-encryption due to LDAP password change\n        console.log('show password change')\n        // HIde\n        $('.content-header, .content, #button_do_sharekeys_reencryption').addClass('hidden');\n        $('#warning-text-reencryption').html('<i class=\"icon fa-solid fa-info mr-2\"></i>'.langHdl('ldap_password_change_warning'));\n\n        // Show passwords inputs and form\n        $('#dialog-encryption-keys, .ask-for-previous-password').removeClass('hidden');\n\n        $('#sharekeys_reencryption_target_user').val(store.get('teampassUser').user_id);\n\n        $('#button_do_sharekeys_reencryption').removeClass('hidden');\n        \n        // ---\n    } else if (store.get('teampassUser') !== undefined &&\n        store.get('teampassUser').shown_warning_unsuccessful_login === false\n    ) {\n        // If login attempts experimented\n        // Prepare modal\n        showModalDialogBox(\n            '#warningModal',\n            '<i class=\"fa-solid fa-user-shield fa-lg warning mr-2\"></i><?php echo langHdl('caution'); ?>',\n            '<?php echo langHdl('login_attempts_identified_since_last_connection'); ?>',\n            '<?php echo langHdl('see_detail'); ?>',\n            '<?php echo langHdl('cancel'); ?>'\n        );\n\n        // Actions on modal buttons\n        $(document).on('click', '#warningModalButtonClose', function() {\n            store.update(\n                'teampassUser', {},\n                function(teampassUser) {\n                    teampassUser.shown_warning_unsuccessful_login = true;\n                }\n            );\n        });\n        $(document).on('click', '#warningModalButtonAction', function() {\n            // SHow user\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>');\n\n            // Action\n            store.update(\n                'teampassUser', {},\n                function(teampassUser) {\n                    teampassUser.shown_warning_unsuccessful_login = true;\n                }\n            );\n            document.location.href = \"index.php?page=profile&tab=timeline\";\n        });\n    } else if (store.get('teampassUser') !== undefined &&\n        store.get('teampassUser').special === 'private_items_to_encrypt'\n    ) {\n        // If user has to re-encrypt his personal item passwords\n        $('#dialog-encryption-personal-items-after-upgrade').removeClass('hidden');\n        $('.content, .content-header').addClass('hidden');\n        \n        // Actions on modal buttons\n        $(document).on('click', '#button_do_personal_items_reencryption', function() {\n            // SHow user\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>');\n\n            defusePskRemoval(store.get('teampassUser').user_id, 'psk', 0);\n            \n            function defusePskRemoval(userId, step, start)\n            {\n                if (step === 'psk') {\n                    // Inform user\n                    $(\"#user-current-defuse-psk-progress\").html('<b><?php echo langHdl('encryption_keys'); ?> </b> [' + start + ' - ' + (parseInt(start) + <?php echo NUMBER_ITEMS_IN_BATCH;?>) + '] ' +\n                        '... <?php echo langHdl('please_wait'); ?><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n\n                    var data = {\n                        'userPsk' : $('#user-current-defuse-psk').val(),\n                            'start': start,\n                            'length': <?php echo NUMBER_ITEMS_IN_BATCH;?>,\n                            'user_id': userId,\n                    };\n                    // Do query\n                    $.post(\n                        \"sources/main.queries.php\", {\n                            'type': \"user_psk_reencryption\",\n                            'type_category': 'action_key',\n                            'data': prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            'key': '<?php echo $_SESSION['key']; ?>'\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                            if (debugJavascript === true) console.log(data)\n                            if (data.error === true) {\n                                // error\n                                toastr.remove();\n                                toastr.error(\n                                    data.message,\n                                    '<?php echo langHdl('caution'); ?>', {\n                                        timeOut: 5000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Enable buttons\n                                $(\"#user-current-defuse-psk-progress\").html('<?php echo langHdl('provide_current_psk_and_click_launch'); ?>');\n                                $('#button_do_sharekeys_reencryption, #button_close_sharekeys_reencryption').removeAttr('disabled');\n                                return false;\n                            } else {\n                                // Start looping on all steps of re-encryption\n                                defusePskRemoval(data.userId, data.step, data.start);\n                            }\n                        }\n                    );\n                } else {\n                    // Finished\n                    $(\"#user-current-defuse-psk-progress\").html('<i class=\"fa-solid fa-check text-success mr-3\"></i><?php echo langHdl('done'); ?>');\n\n                    toastr.remove();\n                }\n            }\n\n        });\n        $(document).on('click', '#button_close_personal_items_reencryption', function() {\n            $('#dialog-encryption-personal-items-after-upgrade').addClass('hidden');\n            $('.content, .content-header').removeClass('hidden');\n        });\n    }\n\n\n    // Show tooltips\n    $('.infotip').tooltip();\n\n    // Sidebar redirection\n    $('.nav-link').click(function() {\n        if ($(this).data('name') !== undefined) {\n            //NProgress.start();\n            document.location.href = \"index.php?page=\" + $(this).data('name');\n        }\n    });\n\n    // User menu action\n    $('.user-menu').click(function() {\n        if ($(this).data('name') !== undefined) {\n            if ($(this).data('name') === 'increase_session') {\n                showExtendSession();\n            } else if ($(this).data('name') === 'sync-new-ldap-password') {\n                // This case permits to handle a case where user has changed his password in LDAP\n                console.log('show sync-new-ldap-password')\n                \n                if (debugJavascript === true) console.log('LDAP user password has to change his auth password')\n                // HIde\n                $('.content-header, .content').addClass('hidden');\n\n                // Show passwords inputs and form\n                $('#dialog-ldap-user-change-password-info')\n                    .html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('ldap_user_has_changed_his_password');?>')\n                    .removeClass('hidden');\n                $('#dialog-ldap-user-change-password').removeClass('hidden');\n\n                // ----\n            } else if ($(this).data('name') === 'password-change') {\n                //console.log('show password change')\n                // HIde\n                $('.content-header, .content, #button_do_user_change_password').addClass('hidden');\n\n                // Add DoCheck button\n                $('#button_do_user_change_password').after('<button class=\"btn btn-primary\" id=\"button_do_pwds_checks\"><?php echo langHdl('perform_checks'); ?></button>');\n\n                // Show passwords inputs and form\n                $('#dialog-user-change-password-progress').html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('change_your_password_info_message'); ?>');\n                $('#dialog-user-change-password').removeClass('hidden');\n\n                // Actions\n                $('#button_do_pwds_checks').click(function() {\n                    if ($('#profile-password').val() !== $('#profile-password-confirm').val()) {\n                        $('#button_do_user_change_password').addClass('hidden');\n                        toastr.remove();\n                        toastr.error(\n                            '<?php echo langHdl('passwords_not_the_same'); ?>',\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 3000,\n                                progressBar: true\n                            }\n                        );\n                    } else if (parseInt($('#profile-password-complex').val()) >= parseInt(store.get('teampassSettings').personal_saltkey_security_level)) {\n                        $('#button_do_user_change_password').removeClass('hidden');\n                        $('#button_do_pwds_checks').remove();\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('hit_launch_to_start'); ?>',\n                            '<?php echo langHdl('ready_to_go'); ?>', {\n                                timeOut: 3000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        $('#button_do_user_change_password').addClass('hidden');\n                        toastr.remove();\n                        toastr.error(\n                            '<?php echo langHdl('complexity_level_not_reached'); ?>',\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    }\n                });\n                \n                // ----\n            } else if ($(this).data('name') === 'profile') {\n                // Show profile page\n                document.location.href = \"index.php?page=profile\";\n\n                // ----\n            } else if ($(this).data('name') === 'logout') {\n                // Logout directly to login form\n                window.location.href = \"./includes/core/logout.php?token=<?php echo $_SESSION['key']; ?>\";\n\n                // ----\n            } else if ($(this).data('name') === 'generate-new_keys') {\n                // User wants to generate new keys\n                console.log('show new keys generation');\n                $('#warningModalButtonAction').attr('data-button-confirm', 'false');\n\n                // SHow modal\n                showModalDialogBox(\n                    '#warningModal',\n                    '<i class=\"fa-solid fa-person-digging fa-lg warning mr-2\"></i><?php echo langHdl('generate_new_keys'); ?> <b>',\n                    '<div class=\"form-group\">'+\n                        '<?php echo langHdl('generate_new_keys_info'); ?>' +\n                    '</div>' +\n                    '<div class=\"input-group mb-2 hidden\" id=\"new-encryption-div\">' +\n                        '<div class=\"input-group-prepend\">' +\n                            '<span class=\"input-group-text\"><?php echo langHdl('confirm_password'); ?></span>' +\n                        '</div>' +\n                        '<input id=\"encryption-otp\" type=\"password\" class=\"form-control form-item-control\" value=\"'+store.get('teampassUser').pwd+'\">' +\n                        '<div class=\"input-group-append\">' +\n                            '<button class=\"btn btn-outline-secondary btn-no-click\" id=\"show-encryption-otp\" title=\"<?php echo langHdl('mask_pw'); ?>\"><i class=\"fas fa-low-vision\"></i></button>' +\n                        '</div>' +\n                    '</div>',\n                    '<?php echo langHdl('perform'); ?>',\n                    '<?php echo langHdl('close'); ?>'\n                );\n\n                // Manage show/hide password\n                $('#show-encryption-otp')\n                    .mouseup(function() {\n                        $('#encryption-otp').attr('type', 'password');\n                    })\n                    .mousedown(function() {\n                        $('#encryption-otp').attr('type', 'text');\n                    });\n                $('.btn-no-click')\n                    .click(function(e) {\n                        e.preventDefault();\n                    });\n\n                // Manage click on button PERFORM\n                $(document).on('click', '#warningModalButtonAction', function() {\n                    // On PERFORM click\n                    if ($('#warningModalButtonAction').attr('data-button-confirm') === 'false') {\n                        $(\"#new-encryption-div\").removeClass('hidden');\n                        $('#warningModalButtonAction')\n                            .html('<i class=\"fa-solid fa-triangle-exclamation warning mr-2\"></i><?php echo langHdl('confirm'); ?>')\n                            .attr('data-button-confirm', 'true');\n\n                    } else if ($('#warningModalButtonAction').attr('data-button-confirm') === 'true') {\n                        // As reencryption relies on user's password\n                        // ensure we have it\n                        if ($('#encryption-otp').val() === '') {\n                            // No user password provided\n                            $('#warningModalButtonAction')\n                                .html('<?php echo langHdl('perform'); ?>')\n                                .attr('data-button-confirm', 'false');\n\n                        } else {\n                            // We have the password, start reencryption\n                            $('#warningModalButtonAction')\n                                .addClass('disabled')\n                                .html('<i class=\"fa-solid fa-spinner fa-spin\"></i>');\n                            $('#warningModalButtonClose').addClass('disabled');\n\n                            // update the process\n                            // add all tasks\n                            var parameters = {\n                                'user_id': parseInt(store.get('teampassUser').user_id),\n                                'user_pwd': $('#encryption-otp').val(),\n                                'encryption_key': '',\n                                'delete_existing_keys': true,\n                                'encrypt_with_user_pwd': true,\n                                'send_email_to_user': true,\n                                'email_body': 'email_body_user_config_4',\n                                'generate_user_new_password': false,\n                            };\n                            //console.log(parameters);\n\n                            $.post(\n                                \"sources/main.queries.php\", {\n                                    type: \"user_new_keys_generation\",\n                                    type_category: 'action_key',\n                                    data: prepareExchangedData(JSON.stringify(parameters), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                                    key: \"<?php echo $_SESSION['key']; ?>\"\n                                },\n                                function(data_next1) { \n                                    data_next1 = prepareExchangedData(data_next1, 'decode', '<?php echo $_SESSION['key']; ?>');\n                                    if (debugJavascript === true) console.log(data_next1)\n\n                                    if (data_next1.error !== false) {\n                                        // Show error\n                                        toastr.remove();\n                                        toastr.error(\n                                            data_next1.message,\n                                            '<?php echo langHdl('caution'); ?>', {\n                                                timeOut: 5000,\n                                                progressBar: true\n                                            }\n                                        );\n                                    } else {\n                                        $(\"#new-encryption-div\").after('<div><?php echo langHdl('generate_new_keys_end'); ?></div>');\n                                        // Show warning\n                                        $('#user_not_ready').removeClass('hidden');\n                                        // update local storage\n                                        store.update(\n                                            'teampassUser', {},\n                                            function(teampassUser) {\n                                                teampassUser.is_ready_for_usage = 0;\n                                            }\n                                        );\n                                        $(\"#warningModalButtonAction\").addClass('hidden');\n                                        $('#warningModalButtonClose').removeClass('disabled');\n\n                                        // Get follow up\n                                        setTimeout(\n                                            getGenerateKeysProgress,\n                                            5000,\n                                            store.get('teampassUser').user_id\n                                        );\n                                    }\n                                }\n                            );\n                        }\n                    }\n                });\n            }\n        }\n    });\n\n    $('.close-element').click(function() {\n        $(this).closest('.card').addClass('hidden');\n\n        $('.content-header, .content').removeClass('hidden');\n    });\n\n    /**\n     * When clicking save Personal saltkey\n     */\n    /*\n    $('#button_save_user_psk').click(function() {\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n\n        // Prepare data\n        var data = {\n            \"psk\": sanitizeString($(\"#user_personal_saltkey\").val()),\n            \"complexity\": $(\"#psk_strength_value\").val()\n        };\n\n        //\n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"store_personal_saltkey\",\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, '<?php echo $_SESSION['key']; ?>');\n\n                // Is there an error?\n                if (data.error === true) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('warning'); ?>',\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.pskDefinedInDatabase = 1;\n                        }\n                    )\n\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.pskSetForSession = data.encrypted_psk;\n                        }\n                    )\n\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('alert_page_will_reload'); ?>'\n                    );\n\n                    location.reload();\n                }\n            }\n        );\n    });\n    */\n\n    // For Personal Saltkey\n    $(\"#profile-password\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#profile-password-strength\",\n        \"defaultText\": \"<?php echo langHdl('index_pw_level_txt'); ?>\",\n        \"ratings\": [{\n                \"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo langHdl('complex_level0'); ?>\"\n            },\n            {\n                \"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level1'); ?>\"\n            },\n            {\n                \"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level2'); ?>\"\n            },\n            {\n                \"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level3'); ?>\"\n            },\n            {\n                \"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level4'); ?>\"\n            },\n            {\n                \"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo langHdl('complex_level5'); ?>\"\n            },\n            {\n                \"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo langHdl('complex_level6'); ?>\"\n            }\n        ]\n    });\n    $(\"#profile-password\").bind({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-password-complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-password-complex\").val(score);\n        }\n    });\n\n    // Hide sidebar footer icons when reducing sidebar\n    $('a[data-widget=\"pushmenu\"]').click(function(event) {\n        if ($('#sidebar-footer').hasClass('hidden') === true) {\n            setTimeout(function() {\n                $('#sidebar-footer').removeClass('hidden');\n            }, 300);\n        } else {\n            $('#sidebar-footer').addClass('hidden');\n        }\n    });\n\n\n    var clipboardCopy = new ClipboardJS(\".clipboard-copy\", {\n        text: function(trigger) {\n            var elementId = $(trigger).data('clipboard-text');\n            if (debugJavascript === true) console.log($('#' + elementId).val())\n            return String($('#' + elementId).val());\n        }\n    });\n\n    clipboardCopy.on('success', function(e) {\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('copy_to_clipboard'); ?>',\n            '<?php echo langHdl('information'); ?>', {\n                timeOut: 2000\n            }\n        );\n    });\n    \n    // Progress bar\n    setTimeout(\n        function() {\n            $(\".fade\").removeClass(\"out\");\n\n            // Is user not ready\n            if (typeof store.get('teampassUser').is_ready_for_usage !== 'undefined' && parseInt(store.get('teampassUser').is_ready_for_usage) === 0) {\n                $('#user_not_ready').removeClass('hidden');\n            }\n        },\n        5000\n    );\n\n\n    /**\n    * USER HAS DECIDED TO CHANGE HIS AUTH PASSWORD\n     */\n    $(document).on('click', '#dialog-user-change-password-do', function() {\n        // Start by changing the user password and send it by email\n        if ($('#profile-password-confirm').val() !== $('#profile-password').val()) {\n            // Show error\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('index_pw_error_identical'); ?>',\n                '<?php echo langHdl('caution'); ?>', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n        if ($('#profile-current-password').val() !== \"\" && $('#profile-password').val() !== \"\" && $('#profile-password-confirm').val() !== \"\") {\n            // Case where a user is changing his authentication password\n            console.log('Reencryption based upon user decision to change his auth password');\n\n            // Show progress\n            $('#dialog-user-change-password-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n            );\n            \n            // Disable buttons\n            $('#dialog-user-change-password-do, #dialog-user-change-password-close').attr('disabled', 'disabled');\n            \n            data = {\n                'user_id': store.get('teampassUser').user_id,\n                'old_password': $('#profile-current-password').val(),\n                'new_password': $('#profile-password').val(),\n            }\n            if (debugJavascript === true) console.log(data);\n\n            // Check user current password\n            // and change the password\n            // and use the password to re-encrypt the privatekey\n            $.post(\n                'sources/main.queries.php', {\n                    type: 'change_user_auth_password',\n                    type_category: 'action_password',\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        $(\"#dialog-user-change-password-progress\").html('<?php echo langHdl('fill_in_fields_and_hit_launch'); ?>');\n\n                        // Enable buttons\n                        $('#dialog-user-change-password-do, #dialog-user-change-password-close').removeAttr('disabled');\n                    } else {\n                        // SUCCESS\n                        $('#dialog-user-change-password-close').removeAttr('disabled');\n                        toastr.remove();\n                        toastr.success(\n                            data.message,\n                            '<?php echo langHdl('success'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        $(\"#dialog-user-change-password-progress\").html('');\n                        $('#dialog-user-change-password').addClass('hidden');\n                        $('.content-header, .content').removeClass('hidden');\n                    }\n                }\n            );\n        } else {\n            // Show error\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('password_cannot_be_empty'); ?>',\n                '<?php echo langHdl('caution'); ?>', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    $(document).on('click', '#dialog-user-change-password-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-user-change-password, #dialog-user-change-password-info').addClass('hidden');\n    });\n    \n\n    /**\n    * ADMIN HAS DECIDED TO CHANGE THE USER'S AUTH PASSWORD\n     */\n    $(document).on('click', '#dialog-admin-change-user-password-do', function() {\n        // When an admin changes the user auth password\n        console.log('Reencryption based upon admin decision to change user auth password');\n\n        // Show progress\n        $('#dialog-admin-change-user-password-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n        \n        // Disable buttons\n        $('#dialog-admin-change-user-password-do, #dialog-admin-change-user-password-close').attr('disabled', 'disabled');            \n        \n        // ENsure we have a user id\n        if ($('#admin_change_user_password_target_user').val() !== '') {\n            // Case where change is for user's account\n            // update the process\n            // add all tasks\n            var parameters = {\n                'user_id': parseInt($('#admin_change_user_password_target_user').val()),\n                'user_pwd': '',\n                'encryption_key': '',\n                'delete_existing_keys': true,\n                'send_email_to_user': true,\n                'encrypt_with_user_pwd': true,\n                'generate_user_new_password': true,\n                'email_body': 'email_body_user_config_3',\n            };\n\n            $.post(\n                \"sources/main.queries.php\", {\n                    type: \"user_new_keys_generation\",\n                    type_category: 'action_key',\n                    data: prepareExchangedData(JSON.stringify(parameters), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data_next1) { \n                    data_next1 = prepareExchangedData(data_next1, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data_next1)\n\n                    if (data_next1.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data_next1.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Reload table\n                        if (typeof oTable !== 'undefined') {\n                            oTable.ajax.reload();\n                        }\n                        \n                        $(\"#dialog-admin-change-user-password-progress\").html('<?php echo langHdl('generate_new_keys_end'); ?>');\n                        // Show warning\n                        // Enable buttons\n                        $('#dialog-admin-change-user-password-close').removeAttr('disabled');\n                        toastr.remove();\n                    }\n                }\n            );\n        }\n    });\n    $(document).on('click', '#dialog-admin-change-user-password-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-admin-change-user-password').addClass('hidden');\n    });\n    \n    $(document).on('click', '.temp-button', function() {\n        \n        if ($(this).data('action') === \"show-user-pwd\") {\n            // show password\n            $('#temp-user-pwd').attr('type', 'text');\n            $(this).prop( \"disabled\", true );\n            setTimeout(\n                () => {\n                    $('#temp-user-pwd').attr('type', 'hidden');\n                    $(this).prop( \"disabled\", false );\n                },\n                5000\n            );\n        } else if ($(this).data('action') === \"send-user-pwd\") {\n            // Send email\n            console.log('Preparing for email sending');\n            \n            // Prepare data\n            var data = {\n                'receipt': $('#temp-user-email').val(),\n                'subject': '[Teampass] <?php echo langHdl('your_new_password');?>',\n                'body': '<?php echo langHdl('email_body_temporary_login_password');?>',\n                'pre_replace' : {\n                    '#enc_code#' : $('#temp-user-pwd').val(),\n                }\n            }\n            if (debugJavascript === true) console.log(data);\n            // Prepare form\n            $('#dialog-admin-change-user-password-info').html('<?php echo langHdl('sending_email_message');?>');\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n            );\n\n            // Launch action\n            $.post(\n                'sources/main.queries.php', {\n                    type: 'mail_me',\n                    type_category: 'action_mail',\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Fianlize UI\n\n                        $('#dialog-admin-change-user-password-info').html('');\n                        $('#dialog-admin-change-user-password-do, #dialog-admin-change-user-password-close').removeAttr('disabled');\n\n                        // HIde\n                        $('.content-header, .content').removeClass('hidden');\n\n                        // SHow form\n                        $('#dialog-admin-change-user-password').addClass('hidden');\n\n                        store.set(\n                            'teampassUser', {\n                                admin_user_password: '',\n                                admin_user_email: '',\n                            }\n                        );\n                        \n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n        }        \n    });\n    \n\n    /**\n    * USER PROVIDES HIS TEMPORARY CODE TO\n     */\n    $(document).on('click', '#dialog-user-temporary-code-do', function() {\n        // Perform a renecryption based upon a temporary code\n        console.log('Reencryption based upon users temporary code');\n\n        // Show progress\n        $('#dialog-user-temporary-code-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n        \n        // Disable buttons\n        $('#dialog-user-temporary-code-do, #dialog-user-temporary-code-close').attr('disabled', 'disabled');            \n        \n        // Start by testing if the temporary code is correct to decrypt an item\n        data = {\n            'user_id': store.get('teampassUser').user_id,\n            'password': $('#dialog-user-temporary-code-value').val(),\n        }\n        if (debugJavascript === true) {\n            console.log('Testing if temporary code is correct');\n            console.log(data);\n        }\n        $.post(\n            'sources/main.queries.php', {\n                type: 'test_current_user_password_is_correct',\n                type_category: 'action_password',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    $(\"#dialog-user-temporary-code-progress\").html('<?php echo langHdl('fill_in_fields_and_hit_launch'); ?>');\n\n                    // Enable buttons\n                    $('#dialog-user-temporary-code-do, #dialog-user-temporary-code-close').removeAttr('disabled');\n                } else {\n                    // Change privatekey encryption with user-s password\n                    data = {\n                        'user_id': store.get('teampassUser').user_id,\n                        'current_code': $('#dialog-user-temporary-code-current-password').val(),\n                        'new_code': $('#dialog-user-temporary-code-value').val(),\n                        'action_type' : 'encrypt_privkey_with_user_password',\n                    }\n                    if (debugJavascript === true) console.log(data);\n                    \n                    $.post(\n                        'sources/main.queries.php', {\n                            type: 'change_private_key_encryption_password',\n                            type_category: 'action_key',\n                            data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                            if (debugJavascript === true) console.log(data);\n\n                            if (data.error !== false) {\n                                // Show error\n                                toastr.remove();\n                                toastr.error(\n                                    data.message,\n                                    '<?php echo langHdl('caution'); ?>', {\n                                        timeOut: 5000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Enable buttons\n                                $('#dialog-user-temporary-code-do, #dialog-user-temporary-code-close').removeAttr('disabled');\n                            } else {\n                                // Inform user\n                                // Enable close button\n                                $('#dialog-user-temporary-code-close').removeAttr('disabled');\n                                $('#dialog-user-temporary-code-do').attr('disabled', 'disabled');\n\n                                // Finished\n                                $(\"#dialog-user-temporary-code-progress\").html('<i class=\"fa-solid fa-check text-success mr-3\"></i><?php echo langHdl('done'); ?>');\n                                toastr.remove();\n\n                                store.update(\n                                    'teampassUser', {},\n                                    function(teampassUser) {\n                                        teampassUser.special = 'none';\n                                    }\n                                );\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    });\n    $(document).on('click', '#dialog-user-temporary-code-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-user-temporary-code').addClass('hidden');\n    });\n\n\n    /**\n    * NEW LDAP USER HAS TO BUILD THE ITEMS DATABASE\n     */\n    $(document).on('click', '#dialog-ldap-user-build-keys-database-do', function() {\n        if ($('#dialog-ldap-user-build-keys-database-code').val() === '') {\n\n            return false;\n        }\n        // Perform a renecryption based upon a temporary code\n        console.log('Building items keys database for new LDAP user');\n\n        // Show progress\n        $('#dialog-ldap-user-build-keys-database-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n        \n        // Disable buttons\n        $('#dialog-ldap-user-build-keys-database-do, #dialog-ldap-user-build-keys-database-close').attr('disabled', 'disabled');            \n        \n        // Start by testing if the temporary code is correct to decrypt an item\n        data = {\n            'user_id': store.get('teampassUser').user_id,\n            'password' : $('#dialog-ldap-user-build-keys-database-code').val(),\n        }\n        if (debugJavascript === true) {\n            console.log('Testing if temporary code is correct in LDAP user case');\n            console.log(data);\n        }\n\n        $.post(\n            'sources/main.queries.php', {\n                type: 'test_current_user_password_is_correct',\n                type_category: 'action_password',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    $(\"#dialog-ldap-user-build-keys-database-progress\").html('<?php echo langHdl('bad_code'); ?>');\n\n                    // Enable buttons\n                    $('#dialog-ldap-user-build-keys-database-do, #dialog-ldap-user-build-keys-database-close').removeAttr('disabled');\n                } else {\n                    // Change privatekey encryption with user-s password\n                    data = {\n                        'user_id': store.get('teampassUser').user_id,\n                        'current_code': $('#dialog-ldap-user-build-keys-database-code').val(),\n                        'new_code': '',\n                        'action_type' : '',\n                    }\n                    if (debugJavascript === true) console.log(data);\n                    \n                    $.post(\n                        'sources/main.queries.php', {\n                            type: 'change_private_key_encryption_password',\n                            type_category: 'action_key',\n                            data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                            if (debugJavascript === true) console.log(data);\n\n                            if (data.error !== false) {\n                                // Show error\n                                toastr.remove();\n                                toastr.error(\n                                    data.message,\n                                    '<?php echo langHdl('caution'); ?>', {\n                                        timeOut: 5000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                \n                                $(\"#dialog-ldap-user-build-keys-database-progress\").html('<i class=\"fa-solid fa-exclamation-circle text-danger mr-3\"></i><?php echo langHdl('bad_code'); ?>');\n\n                                // Enable buttons\n                                $('#dialog-ldap-user-build-keys-database-do, #dialog-ldap-user-build-keys-database-close').removeAttr('disabled');\n                            } else {\n                                // Inform user\n                                // Enable close button\n                                $('#dialog-ldap-user-build-keys-database-close').removeAttr('disabled');\n                                $('#dialog-ldap-user-build-keys-database-do').attr('disabled', 'disabled');\n\n                                // Finished\n                                $(\"#dialog-ldap-user-build-keys-database-progress\").html('<i class=\"fa-solid fa-check text-success mr-3\"></i><?php echo langHdl('done'); ?>');\n                                toastr.remove();\n\n                                store.update(\n                                    'teampassUser', {},\n                                    function(teampassUser) {\n                                        teampassUser.special = 'none';\n                                        teampassUser.otp_provided = 1;\n                                    }\n                                );\n\n                                // refresh the page\n                                window.location.href = 'index.php?page=items';\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    });\n    $(document).on('click', '#dialog-user-temporary-code-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-user-temporary-code').addClass('hidden');\n    });\n\n\n    /**\n    * USER PASSWORD IN LDAP HAS CHANGED\n    */\n    $(document).on('click', '#dialog-ldap-user-change-password-do', function() {\n        // Start by changing the user password and send it by email\n        if ($('#dialog-ldap-user-change-password-old').val() !== \"\" && $('#dialog-ldap-user-change-password-current').val() !== \"\") {\n            // Case where a user is changing his authentication password\n            console.log('Reencryption based upon user auth password changed in LDAP');\n\n            // Show progress\n            $('#dialog-ldap-user-change-password-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n            );\n            \n            // Disable buttons\n            $('#dialog-ldap-user-change-password-do, #dialog-ldap-user-change-password-close').attr('disabled', 'disabled');\n            \n            data = {\n                'user_id': store.get('teampassUser').user_id,\n                'previous_password': $('#dialog-ldap-user-change-password-old').val(),\n                'current_password': $('#dialog-ldap-user-change-password-current').val(),\n            }\n            if (debugJavascript === true) console.log(data);\n\n            // Check user current password\n            // and change the password\n            // and use the password to re-encrypt the privatekey\n            $.post(\n                'sources/main.queries.php', {\n                    type: 'change_user_ldap_auth_password',\n                    type_category: 'action_password',\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        $(\"#dialog-ldap-user-change-password-progress\").html('<?php echo langHdl('fill_in_fields_and_hit_launch'); ?>');\n\n                        // Enable buttons\n                        $('#dialog-ldap-user-change-password-do, #dialog-ldap-user-change-password-close').removeAttr('disabled');\n                    } else {\n                        // SUCCESS\n                        $('#dialog-ldap-user-change-password-close').removeAttr('disabled');\n                        toastr.remove();\n                        toastr.success(\n                            data.message,\n                            '<?php echo langHdl('success'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        $(\"#dialog-ldap-user-change-password-progress\").html('');\n                    }\n                }\n            );\n        } else {\n            // Show error\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('password_cannot_be_empty'); ?>',\n                '<?php echo langHdl('caution'); ?>', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    $(document).on('click', '#dialog-ldap-user-change-password-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-ldap-user-change-password, #dialog-ldap-user-change-password-info').addClass('hidden');\n    });\n    // --- END ---\n\n\n    function loadSettings() {\n        return $.post(\n            \"sources/main.queries.php\", {\n                type: \"get_teampass_settings\",\n                type_category: 'action_system',\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                try {\n                    data = prepareExchangedData(\n                        data,\n                        \"decode\",\n                        \"<?php echo $_SESSION['key']; ?>\"\n                    );\n                } catch (e) {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('server_answer_error'); ?>',\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true,\n                            positionClass: \"toast-top-right\"\n                        }\n                    );\n                    return false;\n                }\n                if (debugJavascript === true) {\n                    console.log('Loading settings result:');\n                    console.log(data);\n                }\n\n                // Test if JSON object\n                if (typeof data === 'object') {\n                    // Store settings in localstorage\n                    // except sensitive data\n                    var sensitiveData = ['ldap_hosts','ldap_username','ldap_password','ldap_bdn', 'email','bck_script_passkey'];\n\n                    store.remove(\"teampassSettings\");\n\n                    store.update(\n                        'teampassSettings', {},\n                        function(teampassSettings) {\n                            $.each(data, function(key, value) {\n                                const containsKey = sensitiveData.some(element => {\n                                    if (key.includes(element)) {\n                                        return true;\n                                    }\n                                    return false;\n                                });\n\n                                if (containsKey === false) {\n                                    teampassSettings[key] = value;\n                                }\n                            });\n                        }\n                    );\n\n                    // Store some User info\n                    store.update(\n                        'teampassUser', {},\n                        function(teampassUser) {\n                            teampassUser['user_admin'] = <?php echo isset($_SESSION['user_admin']) === true ? (int) $_SESSION['user_admin'] : 0; ?>;\n                            teampassUser['user_id'] = <?php echo isset($_SESSION['user_id']) === true ? (int) $_SESSION['user_id'] : 0; ?>;\n                            teampassUser['user_manager'] = <?php echo isset($_SESSION['user_manager']) === true ? (int) $_SESSION['user_manager'] : 0; ?>;\n                            teampassUser['user_can_manage_all_users'] = <?php echo isset($_SESSION['user_can_manage_all_users']) === true ? (int) $_SESSION['user_can_manage_all_users'] : 0; ?>;\n                            teampassUser['user_read_only'] = <?php echo isset($_SESSION['user_admin']) === true ? (int) $_SESSION['user_read_only'] : 1; ?>;\n                            teampassUser['key'] = '<?php echo isset($_SESSION['key']) === true ? $_SESSION['key'] : 0; ?>';\n                            teampassUser['login'] = \"<?php echo isset($_SESSION['login']) === true ? $_SESSION['login'] : 0; ?>\";\n                            teampassUser['lastname'] = \"<?php echo isset($_SESSION['lastname']) === true ? $_SESSION['lastname'] : 0; ?>\";\n                            teampassUser['name'] = \"<?php echo isset($_SESSION['name']) === true ? $_SESSION['name'] : 0; ?>\";\n                            teampassUser['pskDefinedInDatabase'] = <?php echo isset($_SESSION['user']['encrypted_psk']) === true ? 1 : 0; ?>;\n                            teampassUser['can_create_root_folder'] = <?php echo isset($_SESSION['can_create_root_folder']) === true ? (int) $_SESSION['can_create_root_folder'] : 0; ?>;\n                            teampassUser['pskDefinedInDatabase'] = <?php echo isset($_SESSION['user']['encrypted_psk']) === true ? 1 : 0; ?>;\n                            teampassUser['special'] = '<?php echo isset($_SESSION['user']['special']) === true ? $_SESSION['user']['special'] : 'none'; ?>';\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function showExtendSession() {\n        // Prepare modal\n        showModalDialogBox(\n            '#warningModal',\n            '<i class=\"fa-solid fa-clock fa-lg warning mr-2\"></i><?php echo langHdl('index_add_one_hour'); ?>',\n            '<div class=\"form-group\">' +\n            '<label for=\"warningModal-input\" class=\"col-form-label\"><?php echo langHdl('index_session_duration') . ' (' . langHdl('minutes') . ')'; ?>:</label>' +\n            '<input type=\"text\" class=\"form-control\" id=\"warningModal-input\" value=\"<?php echo isset($_SESSION['user']['session_duration']) === true ? (int) $_SESSION['user']['session_duration'] / 60 : 60; ?>\">' +\n            '</div>',\n            '<?php echo langHdl('confirm'); ?>',\n            '<?php echo langHdl('cancel'); ?>'\n        );\n\n        // Actions on modal buttons\n        $(document).on('click', '#warningModalButtonAction', function() {\n            // SHow user\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n            );\n\n            // Perform action\n            $.when(\n                IncreaseSessionTime(\n                    $('#warningModal-input').val()\n                )\n            ).then(function() {\n                toastr.remove();\n                toastr.success(\n                    '<?php echo langHdl('done'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n                $('#warningModal').modal('hide');\n            });\n        });\n    }\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function showPersonalSKDialog() {\n        $('#dialog-request-psk').removeClass('hidden');\n\n        // Hide other\n        $('.content-header, .content').addClass('hidden');\n\n        $('#user_personal_saltkey').focus();\n\n        toastr.remove();\n    }\n\n    /**\n     * Loads the last seen items\n     *\n     * @return void\n     */\n    function refreshListLastSeenItems() {\n        $.post(\n            \"sources/main.queries.php\", {\n                type: 'refresh_list_items_seen',\n                type_category: 'action_user',\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                try {\n                    data = $.parseJSON(data)\n                } catch (e) {\n                    return false;\n                }\n                if (debugJavascript === true) {\n                    console.log('Refresh last item seen result');\n                    console.log(data);\n                }\n                //check if format error\n                if (data.error === '') {\n                    if (data.html_json === null || data.html_json === '') {\n                        $('#index-last-pwds').html('<li><?php echo langHdl('none'); ?></li>');\n                    } else {\n                        // Prepare HTML\n                        var html_list = '';\n                        $.each(data.html_json, function(i, value) {\n                            html_list += '<li onclick=\"showItemCard($(this).closest(\\'li\\'))\" class=\"pointer\" data-item-edition=\"0\" data-item-id=\"' + value.id + '\" data-item-sk=\"' + value.perso + '\" data-item-expired=\"0\" data-item-restricted=\"' + value.restricted + '\" data-item-display=\"1\" data-item-open-edit=\"0\" data-item-reload=\"0\" data-item-tree-id=\"' + value.tree_id + '\" data-is-search-result=\"0\">' +\n                                '<i class=\"fa fa-caret-right mr-2\"></i>' + value.label + '</li>';\n                        });\n                        $('#index-last-pwds').html(html_list);\n                    }\n\n                    // show notification\n                    if (data.existing_suggestions !== 0) {\n                        blink('#menu_button_suggestion', -1, 500, 'ui-state-error');\n                    }\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.error,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Show an item\n     *\n     * @return void\n     */\n    function showItemCard(itemDefinition) {\n        // Show circle-notch\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n\n        if (window.location.href.indexOf('page=items') === -1) {\n            location.replace('<?php echo $SETTINGS['cpassman_url']; ?>/index.php?page=items&group=' + itemDefinition.data().itemTreeId + '&id=' + itemDefinition.data().itemId);\n        } else {\n            $('#items_list').html('<ul class=\"liste_items\" id=\"full_items_list\"></ul>');\n            Details(itemDefinition, 'show');\n            if (itemDefinition.data().itemTreeId !== $('#open_folder').val()) {\n                ListerItems(itemDefinition.data().itemTreeId, '', 0);\n            }\n\n            // Hide sidebar-mini\n            $('body')\n                .removeClass('control-sidebar-slide-open');\n        }\n    }\n\n    /**\n     * Open defect report page\n     *\n     * @return void\n     */\n    function generateBugReport() {\n        $('#dialog-bug-report-text').html('');\n        $('#dialog-bug-report').removeClass('hidden');\n\n        // Scroll to top\n        $(window).scrollTop(0);\n\n        var data = {\n            'browser_name': platform.name,\n            'browser_version': platform.version,\n            'os': platform.os.family,\n            'os_archi': platform.os.architecture,\n            'current_page': window.location.href.substring(window.location.href.lastIndexOf(\"/\")+1),\n        }\n        \n        $.post(\n            \"sources/main.queries.php\", {\n                type: 'generate_bug_report',\n                type_category: 'action_system',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n\n                // Show data\n                $('#dialog-bug-report-text').html(data.html);\n\n                // Open Github\n                $('#dialog-bug-report-github-button').click(function() {\n                    window.open('https://github.com/nilsteampassnet/TeamPass/issues/new', '_blank');\n                    return false;\n                });\n            }\n        );\n    }\n\n    // This permits to manage the column width of tree/items\n    $(document).on('click', '.columns-position', function() {\n        var colLeft = $('#folders-tree-card').find('.column-left'),\n            colRight = $('#folders-tree-card').find('.column-right'),\n            counterLeft = $(colLeft).attr(\"class\").match(/col-md-[\\w-]*\\b/)[0].split('-')[2],\n            counterRight = $(colRight).attr(\"class\").match(/col-md-[\\w-]*\\b/)[0].split('-')[2];\n\n        // Toogle class\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            if ($(this).hasClass('tree-decrease') === true && counterRight < 9) {\n                $(colLeft).toggleClass('col-md-' + counterLeft + ' col-md-' + (parseInt(counterLeft) - 1));\n                $(colRight).toggleClass('col-md-' + counterRight + ' col-md-' + (parseInt(counterRight) + 1));\n            } else if ($(this).hasClass('tree-increase') === true && counterLeft < 9) {\n                $(colLeft).toggleClass('col-md-' + counterLeft + ' col-md-' + (parseInt(counterLeft) + 1));\n                $(colRight).toggleClass('col-md-' + counterRight + ' col-md-' + (parseInt(counterRight) - 1));\n            }\n        }\n    })\n\n    $(function() {\n        // In case that session was expired and login form was reloaded\n        // Force the launchIdentify as if the user has clicked the button\n        if ($(\"#auto_log\").length > 0) {\n            $(\"#but_identify_user\").click();\n        }\n    });\n\n    // Prevent usage of browser back button\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n        const queryString = window.location.search\n        const urlParams = new URLSearchParams(queryString);\n        if (urlParams.get('page') === 'items') {\n            // go back to list\n            // Play with show and hide classes\n            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, .columns-position, #item-details-card-categories, #form-item-upload-pickfilesList, #card-item-expired')\n                .addClass('hidden');\n            $('#folders-tree-card').removeClass('hidden');\n\n            history.go(1);\n        }\n    };\n\n    /**\n     * \n     * @param {integer} duration\n     * \n     */\n    function clearClipboardTimeout(duration) {\n        // Wait for duration\n        $(this).delay(duration * 1000).queue(function() {\n            navigator.clipboard.writeText(\"Cleared by Teampass\").then(function() {\n                // clipboard successfully set\n            }, function() {\n                // clipboard write failed\n            });\n\n            $(this).dequeue();\n        });\n    }    \n    \n    /**\n     * Perform call to get progress status\n     * \n     * @param {integer} userId\n     */\n    function getGenerateKeysProgress(userId) {\n        var data = {\n            'user_id': userId,\n        };\n\n        $.post(\n            \"sources/users.queries.php\", {\n                type: \"get_generate_keys_progress\",\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) {\n                    console.info('Process generation keys status:');\n                    console.log(data);\n                }\n\n                if (data.error === false) {\n                    // Show progress\n                    $('#user_not_ready_progress')\n                        .text('(' + data.status + ')')\n                        .addClass('ml-1');\n                    $('#user_not_ready').removeClass('hidden');\n\n                    if (data.status !== 'finished') {\n                        // If not finished, then run again after 10 seconds\n                        setTimeout(\n                            getGenerateKeysProgress,\n                            10000,\n                            store.get('teampassUser').user_id\n                        );\n                    } else {\n                        // Progress is finished\n                        // We need to finalize user public/private keys\n                        \n                        $('#user_not_ready').addClass('hidden');\n                        $(\"#warningModalButtonAction\").removeClass('hidden');\n                        $('#user_not_ready_progress').html('');\n                        toastr.success(\n                            data.message,\n                            '<?php echo langHdl('done'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    }\n                }\n            }\n        );\n    }\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      items.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception('Error file \"/includes/config/tp.config.php\" not exists', 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (! checkUser($_SESSION['user_id'], $_SESSION['key'], curPage($SETTINGS), $SETTINGS)) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n\n$var = [];\n$var['hidden_asterisk'] = '<i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk\"></i>';\n\n?>\n\n\n<script type=\"text/javascript\">\n    var requestRunning = false,\n        clipboardForLogin,\n        clipboardForPassword,\n        clipboardForLink,\n        query_in_progress = 0,\n        screenHeight = $(window).height(),\n        quick_icon_query_status = true,\n        first_group = 1,\n        folderSearchCriteria = $('#jstree_search').val(),\n        userDidAChange = false,\n        userUploadedFile = false,\n        selectedFolder = false,\n        selectedFolderId = false,\n        itemClipboard,\n        startedItemsListQuery = false,\n        itemStorageInformation = '',\n        applicationVars,\n        initialPageLoad = true,\n        previousSelectedFolder=-1,\n        debugJavascript = false;\n\n    // Manage memory\n    browserSession(\n        'init',\n        'teampassApplication', {\n            lastItemSeen: false,\n            itemsListStop: '',\n            itemsListStart: '',\n            selectedFolder: '',\n            itemsListFolderId: false,\n            itemsListRestricted: '',\n            itemsShownByQuery: '',\n            foldersList: [],\n            personalSaltkeyRequired: 0,\n            uploadedFileId: '',\n            tempScrollTop: 0,\n        }\n    );\n\n    browserSession(\n        'init',\n        'teampassItem', {\n            IsPersonalFolder: '',\n            hasAccessLevel: '',\n            hasCustomCategories: '',\n            id: '',\n            timestamp: '',\n            folderId: ''\n        }\n    );\n\n    if (debugJavascript === true) {\n        console.log('User information')\n        console.log(store.get('teampassUser'))\n    }\n\n    // Show loader\n    toastr.remove();\n    toastr.info('<?php echo langHdl('loading_data'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n    // Build tree\n    $('#jstree').jstree({\n        'core': {\n            'animation': 0,\n            'check_callback': true,\n            'data': {\n                'url': './sources/tree.php',\n                'dataType': 'json',\n                'icons': false,\n                'data': function(node) {\n                    if (debugJavascript === true) {\n                        console.info('Les r\u00e9pertoires sont charg\u00e9s');\n                        console.log(node);\n                    }\n                    return {\n                        'id': node.id.split('_')[1],\n                        'force_refresh': store.get('teampassApplication') !== undefined ?\n                            store.get('teampassApplication').jstreeForceRefresh : 0\n                    };\n                }\n            },\n            'strings': {\n                'Loading ...': '<?php echo langHdl('loading'); ?>...'\n            },\n            'themes': {\n                'icons': false,\n            },\n        },\n        'plugins': [\n            'state', 'search'\n        ]\n    })\n    // On node select\n    .bind('select_node.jstree', function(e, data) {\n        if (debugJavascript === true) console.log('JSTREE BIND');\n        selectedFolder = $('#jstree').jstree('get_selected', true)[0]\n        selectedFolderId = parseInt(selectedFolder.id.split('_')[1]);\n\n        // manage icon open/closed\n        var selectedFolderIcon = $('#fld_'+selectedFolderId).children('.tree-folder').attr('data-folder'),\n            selectedFolderIconSelected = $('#fld_'+selectedFolderId).children('.tree-folder').attr('data-folder-selected');\n\n        // remove selected on previous folder\n        $($('#fld_'+previousSelectedFolder).children('.tree-folder'))\n            .removeClass($('#fld_'+previousSelectedFolder).children('.tree-folder').attr('data-folder-selected'))\n            .addClass($('#fld_'+previousSelectedFolder).children('.tree-folder').attr('data-folder'));\n        // show selected icon\n        $('#fld_'+selectedFolderId).children('.tree-folder')\n            .removeClass(selectedFolderIcon)\n            .addClass(selectedFolderIconSelected);\n\n        if (debugJavascript === true) {\n            console.info('SELECTED NODE ' + selectedFolderId + \" -- \" + startedItemsListQuery);\n            console.log(selectedFolder);\n            console.log(selectedFolder.original.is_pf)\n        }\n\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.selectedFolder = selectedFolderId,\n                teampassApplication.selectedFolderTitle = selectedFolder.a_attr['data-title'],\n                teampassApplication.selectedFolderParentId = selectedFolder.parent !== \"#\" ? selectedFolder.parent.split('_')[1] : 0,\n                teampassApplication.selectedFolderParentTitle = selectedFolder.a_attr['data-title'],\n                teampassApplication.selectedFolderIcon = selectedFolderIcon,\n                teampassApplication.selectedFolderIconSelected = selectedFolderIconSelected,\n                teampassApplication.selectedFolderIsPF = selectedFolder.original.is_pf,\n                teampassApplication.userCanEdit = selectedFolder.original.can_edit\n            }\n        )\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.folderId = selectedFolderId\n            }\n        );\n\n        // Prepare list of items\n        if (startedItemsListQuery === false) {\n            startedItemsListQuery = true;\n            ListerItems(selectedFolderId, '', 0);\n        }\n\n        previousSelectedFolder = selectedFolderId;\n        initialPageLoad = false;\n    })\n    // Search in tree\n    .bind('search.jstree', function(e, data) {\n        if (data.nodes.length == 1) {\n            //open the folder\n            ListerItems($('#jstree li>a.jstree-search').attr('id').split('_')[1], '', 0);\n        }\n    });\n\n    // Find folders in jstree\n    $('#jstree_search')\n        .keypress(function(e) {\n            if (e.keyCode === 13) {\n                $('#jstree').jstree('search', $('#jstree_search').val());\n            }\n        })\n        .focus(function() {\n            $(this).val('');\n        })\n        .blur(function() {\n            $(this).val(folderSearchCriteria);\n        });\n\n    // Is this a short url\n    var queryDict = {},\n        showItemOnPageLoad = false,\n        itemIdToShow = '';\n    location.search.substr(1).split(\"&\").forEach(function(item) {\n        queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]\n    });\n\n    if (queryDict['group'] !== undefined && queryDict['group'] !== '' &&\n        queryDict['id'] !== undefined && queryDict['id'] !== ''\n    ) {\n        // Show cog\n        toastr.remove();\n        toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Store current view\n        savePreviousView();\n\n        // Store the folder to open\n        store.set(\n            'teampassApplication', {\n                selectedFolder: parseInt(queryDict['group']),\n                selectedItem: parseInt(queryDict['id'])\n            }\n        );\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.folderId = parseInt(queryDict['group'])\n            }\n        );\n\n        showItemOnPageLoad = true;\n        itemIdToShow = queryDict['id'];\n        startedItemsListQuery = true;\n\n        $('.item-details-card').removeClass('hidden');\n        $('#folders-tree-card, .columns-position').addClass('hidden');\n\n        // refresh selection in jstree\n        $('#jstree').jstree('deselect_all');\n        $('#jstree').jstree('select_node', '#li_' + itemIdToShow);\n        $('#jstree').jstree(true).hide_icons()\n\n        // Get list of items in this folder\n        startedItemsListQuery = true;\n        ListerItems(store.get('teampassApplication').selectedFolder, '', 0);\n\n        // Show details\n        $.when(\n            Details(itemIdToShow, 'show', true)\n        ).then(function() {\n            //requestRunning = false;\n            console.log('Item detail affich\u00e9')\n            // Force previous view to Tree folders\n            store.update(\n                'teampassUser',\n                function(teampassUser) {\n                    teampassUser.previousView = '#folders-tree-card';\n                }\n            );\n        });\n    }\n\n    // Preload list of items\n    if (store.get('teampassApplication') !== undefined &&\n        store.get('teampassApplication').selectedFolder !== undefined &&\n        store.get('teampassApplication').selectedFolder !== ''\n    ) {\n        startedItemsListQuery = true;\n\n        ListerItems(store.get('teampassApplication').selectedFolder, '', 0);\n\n    }\n\n\n\n    // Close on escape key\n    $(document).keyup(function(e) {\n        if (e.keyCode == 27) {\n            closeItemDetailsCard();\n        }\n    });\n\n    /*// Edit on e key\n    $(document).keyup(function(e) {\n        if (e.keyCode == 69 && $('.item-details-card').is(':visible') === true) {\n            if ($('#form-item').hasClass('hidden') === false) {\n                showItemEditForm(store.get('teampassItem').id);\n            }\n        }\n    });\n    */\n\n    // load list of visible folders for current user\n    $(this).delay(500).queue(function() {\n        refreshVisibleFolders();\n\n        $(this).dequeue();\n    });\n\n    // Keep the scroll position\n    $(window).on(\"scroll\", function() {\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    tempScrollTop: $(window).scrollTop()\n                }\n            );\n        }\n    });\n\n\n    // Ensure correct height of folders tree\n    $('#jstree').height(screenHeight - 200);\n\n    // Prepare iCheck format for checkboxes\n    $('input[type=\"checkbox\"].flat-blue, input[type=\"radio\"].flat-blue').iCheck({\n        checkboxClass: 'icheckbox_flat-blue',\n        radioClass: 'iradio_flat-blue'\n    });\n\n    // Prepare some UI elements\n    $('#limited-search').prop('checked', false);\n\n    $(document).on('blur', '#form-item-icon', function() {\n        $('#form-item-icon-show').html('<i class=\"fas '+$(this).val()+'\"></i>');\n    });\n\n    // Manage the password show button\n    // including autohide after a couple of seconds\n    $(document).on('click', '#card-item-pwd-show-button', function() {\n        if ($(this).hasClass('pwd-shown') === false) {\n            $(this).addClass('pwd-shown');\n            // Prepare data to show\n            // Is data crypted?\n            var data = unCryptData($('#hidden-item-pwd').val(), '<?php echo $_SESSION['key']; ?>');\n            if (data !== false && data !== undefined) {\n                $('#hidden-item-pwd').val(\n                    data.password\n                );\n            }\n\n            // Change class and show spinner\n            $('.pwd-show-spinner')\n                .removeClass('far fa-eye')\n                .addClass('fas fa-circle-notch fa-spin text-warning');\n\n            // display raw password\n            $('#card-item-pwd')\n                .text($('#hidden-item-pwd').val())\n                .addClass('pointer_none');\n\n            // log password is shown\n            itemLog(\n                'at_password_shown',\n                store.get('teampassItem').id,\n                $('#card-item-label').text()\n            );\n\n            // Autohide\n            setTimeout(() => {\n                $(this).removeClass('pwd-shown');\n                $('#card-item-pwd')\n                    .html('<?php echo $var['hidden_asterisk']; ?>')\n                    .removeClass('pointer_none');\n                $('.pwd-show-spinner')\n                    .removeClass('fas fa-circle-notch fa-spin text-warning')\n                    .addClass('far fa-eye');\n            }, <?php echo isset($SETTINGS['password_overview_delay']) === true ? $SETTINGS['password_overview_delay'] * 1000 : 4000; ?>);\n        } else {\n            $('#card-item-pwd').html('<?php echo $var['hidden_asterisk']; ?>');\n        }\n    });\n\n\n    // Manage folders action\n    $('.tp-action').click(function() {\n        // SHow user\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?><i class=\"fas fa-circle-notch fa-spin fa-2x ml-3\"></i>');\n\n        if ($(this).data('folder-action') === 'refresh') {\n            // Force refresh\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.jstreeForceRefresh = 1\n                }\n            );\n            if (selectedFolderId !== '') {\n                refreshTree(selectedFolderId, true);\n            } else {\n                refreshTree();\n            }\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.jstreeForceRefresh = 0\n                }\n            );\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'expand') {\n            $('#jstree').jstree('open_all');\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'collapse') {\n            $('#jstree').jstree('close_all');\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'add') {\n            if (debugJavascript === true) console.info('SHOW ADD FOLDER');\n            toastr.remove();\n\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20 &&\n                store.get('teampassUser').can_create_root_folder === 0\n            ) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-add');\n\n            // Store last\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-add').removeClass('hidden');\n\n            // Prepare some data in the form\n            if (selectedFolder.parent !== undefined && selectedFolder.parent !== '') {\n                $('#form-folder-add-parent').val(selectedFolder.parent.split('_')[1]).change();\n            }\n\n            $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n\n            $('#form-folder-add-label')\n                .val('')\n                .focus();\n            $('#form-folder-add-icon-selected, #form-folder-add-icon').val('');\n            // Set type of action for the form\n            $('#form-folder-add').data('action', 'add');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'edit') {\n            if (debugJavascript === true) console.info('SHOW EDIT FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            if (debugJavascript === true) console.log(store.get('teampassApplication'));\n\n            // Store current view\n            savePreviousView('.form-folder-add');\n\n            // Show edit form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-add').removeClass('hidden');\n            // Prepare some data in the form\n            $(\"#form-folder-add-parent option[value='\" + store.get('teampassApplication').selectedFolder + \"']\")\n                .prop('disabled', true);\n            $('#form-folder-add-parent').val(store.get('teampassApplication').selectedFolderParentId).change();\n            $(\"#form-folder-add-parent option[value='\" + store.get('teampassApplication').selectedFolderParentId + \"']\")\n                .prop('disabled', false);\n            $('#form-folder-add-label')\n                .val(store.get('teampassApplication').selectedFolderParentTitle)\n                .focus();\n            // is PF 1st level\n            if (store.get('teampassApplication').selectedFolderIsPF === 1 && store.get('teampassApplication').selectedFolderParentId !== 0) {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n            } else if (store.get('teampassApplication').userCanEdit === 0) {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', true);\n            } else {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n            }\n\n            $('#form-folder-add-complexicity').val(store.get('teampassItem').folderComplexity).change();\n            $('#form-folder-add-icon')\n                .val(store.get('teampassApplication').selectedFolderIcon);\n            $('#form-folder-add-icon-selected')\n                .val(store.get('teampassApplication').selectedFolderIconSelected);\n            // Set type of action for the form\n            $('#form-folder-add').data('action', 'update');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'copy') {\n            if (debugJavascript === true) console.info('SHOW COPY FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-copy');\n\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-copy').removeClass('hidden');\n            // Prepare some data in the form\n            $('#form-folder-copy-source').val(store.get('teampassApplication').selectedFolder).change();\n            //$(\"#form-folder-copy-destination option[value='\"+selectedFolder.id.split('_')[1]+\"']\")\n            //.prop('disabled', true);\n            $('#form-folder-copy-destination').val(0).change();\n            $('#form-folder-copy-label')\n                .val(store.get('teampassApplication').selectedFolderTitle + ' <?php echo strtolower(langHdl('copy')); ?>')\n                .focus();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'delete') {\n            if (debugJavascript === true) console.info('SHOW DELETE FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 30) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-delete');\n\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-delete').removeClass('hidden');\n\n            // Prepare some data in the form\n            $('#form-folder-delete-selection').val(store.get('teampassApplication').selectedFolder).change();\n            $('#form-folder-confirm-delete').iCheck('uncheck');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'import') {\n            // IMPORT ITEMS\n            if (debugJavascript === true) console.info('SHOW IMPORT ITEMS');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-folder-import');\n\n\n            // Show import form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-import').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'new') {\n            if (debugJavascript === true) console.info('SHOW NEW ITEM');\n            toastr.remove();\n            // Store current view\n            savePreviousView();\n\n            // Remove validated class\n            $('#form-item').removeClass('was-validated');\n\n            // Get some info\n            $.when(\n                retPrivileges = getPrivilegesOnItem(store.get('teampassApplication').itemsListFolderId, 0)\n            ).then(function() {\n                if (retPrivileges === false) {\n                    return false;\n                }\n                // If previous item was seen then clean session\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 1,\n                        teampassItem.id = ''\n                    }\n                );\n\n                // Show Visibility and minimum complexity\n                $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n                $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n                // HIde\n                $('.form-item-copy, #folders-tree-card, .columns-position, #form-item-password-options, .form-item-action, #form-item-attachments-zone')\n                    .addClass('hidden');\n                // Destroy editor\n                $('#form-item-description').summernote('destroy');\n\n                // Clean select2 lists\n                $('.select2').val('');\n                /*if ($('.select2') !== null) {if (debugJavascript === true) console.log($('.select2').length)\n                    $('.select2').change();\n                }*/\n                // Do some form cleaning\n                $('.clear-me-val').val('');\n                $('.item-details-card').find('.form-control').val('');\n                $('.clear-me-html').html('');\n                $('.form-item-control').val('');\n                // Show edition form\n                $('.form-item').removeClass('hidden');\n                $('.item-details-card').addClass('hidden');\n                // Force update of simplepassmeter\n                $('#form-item-password').focus();\n                $('#form-item-label').focus();\n                // Prepare editor\n                $('#form-item-description').summernote({\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['insert', ['link', 'picture']],\n                        //['height', ['height']],\n                        ['view', ['codeview']]\n                    ],\n                    codeviewFilter: true,\n                    codeviewIframeFilter: true\n                });\n\n                // Set folder\n                $('#form-item-folder').val(selectedFolderId).change();\n                // Select tab#1\n                $('#form-item-nav-pills li:first-child a').tab('show');\n                // Preselect\n                $('#pwd-definition-size').val(12);\n                // Set type of action\n                $('#form-item-button-save').data('action', 'new_item');\n                // Does this folder contain Custom Fields\n                if (store.get('teampassItem').hasCustomCategories.length > 0) {\n                    $('#form-item-field').removeClass('hidden');\n                    $.each(store.get('teampassItem').hasCustomCategories, function(i, category) {\n                        $('#form-item-category-' + category).removeClass('hidden');\n                    })\n                } else {\n                    $('#form-item-field, .form-item-category').addClass('hidden');\n                }\n                \n                // Add track-change class\n                //$('#form-item-label, #form-item-description, #form-item-login, #form-item-password, #form-item-email, #form-item-url, #form-item-folder, #form-item-restrictedto, #form-item-tags, #form-item-anyoneCanModify, #form-item-deleteAfterShown, #form-item-deleteAfterDate, #form-item-anounce, .form-item-field-custom').addClass('track-change');\n\n                // Update variable\n                userDidAChange = false;\n\n                toastr.remove();\n            });\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'edit') {\n            if (debugJavascript === true) console.info('SHOW EDIT ITEM');\n            $.when(\n                getPrivilegesOnItem(selectedFolderId, 1)\n            ).then(function() {\n                // Is user allowed\n                if (store.get('teampassItem').item_rights < 20) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // Store current view\n                savePreviousView();\n\n                // Store not a new item\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 0\n                    }\n                );\n\n                // Remove validated class\n                $('#form-item').removeClass('was-validated');\n\n                // Now manage edtion\n                showItemEditForm(selectedFolderId);\n            });\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'copy') {\n            if (debugJavascript === true) console.info('SHOW COPY ITEM');\n            toastr.remove();\n            // Store current view\n            savePreviousView('.form-item-copy');\n\n            if (store.get('teampassItem').user_can_modify === 1) {\n                // Show copy form\n                $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n                $('.form-item-copy, .item-details-card-menu').removeClass('hidden');\n                // Prepare some data in the form\n                $('#form-item-copy-new-label').val($('#form-item-label').val());\n                $('#form-item-copy-destination').val($('#form-item-folder').val()).change();\n            } else {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            }\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'delete') {\n            // Is user allowed\n            var levels = [50, 70];\n            if (levels.includes(store.get('teampassItem').item_rights) === false) {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-delete');\n\n            if (debugJavascript === true) console.info('SHOW DELETE ITEM');\n            if (store.get('teampassItem').user_can_modify === 1) {\n                // Show delete form\n                $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n                $('.form-item-delete, .item-details-card-menu').removeClass('hidden');\n            } else {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            }\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'share') {\n            if (debugJavascript === true) console.info('SHOW SHARE ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-share');\n\n            // Show share form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-share, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'notify') {\n            if (debugJavascript === true) console.info('SHOW NOTIFY ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-notify');\n\n            $('#form-item-notify-checkbox').iCheck('uncheck');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-notify, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'otv') {\n            if (debugJavascript === true) console.info('SHOW OTV ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-otv');\n\n            // Generate link\n            prepareOneTimeView();\n\n            $('#form-item-otv-link').val('');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-otv, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'server') {\n            if (debugJavascript === true) console.info('SHOW SERVER UPDATE ITEM');\n            toastr.remove();\n\n            // Is user allowed\n            var levels = [50, 70];\n            if (levels.includes(store.get('teampassItem').item_rights) === false) {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-item-server');\n\n            $('#form-item-notify-checkbox').iCheck('uncheck');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-server, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        }\n\n        return false;\n    });\n\n    /**\n     * Saves the current view of user\n     */\n    function savePreviousView(newElement = '') {\n        var element = '';\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            element = '#folders-tree-card';\n        } else if ($('.form-item').hasClass('hidden') === false) {\n            element = '.form-item';\n        } else if ($('.item-details-card-menu').hasClass('hidden') === false) {\n            element = '.item-details-card';\n        }\n        \n        if (debugJavascript === true) {console.log('>>> ' + element + ' -- ' + newElement);}\n\n        if (element === '.item-details-card') element = '#folders-tree-card';\n\n        // Store current view\n        store.update(\n            'teampassUser',\n            function(teampassUser) {\n                teampassUser.previousView = element;\n            }\n        );\n\n        // Store the new one to display\n        store.update(\n            'teampassUser',\n            function(teampassUser) {\n                teampassUser.currentView = newElement;\n            }\n        );\n    }\n\n\n    $('.but-back').click(function() {\n        userDidAChange = false;\n        if ($(this).hasClass('but-back-to-item') === false) {\n            // Is this form the edition one?\n            if ($(this).hasClass('item-edit') === true && userUploadedFile === true) {\n                // Do some operation such as cancel file upload\n                var data = {\n                    'item_id': store.get('teampassItem').id,\n                }\n\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: 'delete_uploaded_files_but_not_saved',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_uploaded_files_but_not_saved');\n                        if (debugJavascript === true) console.log(data);\n                    }\n                );\n            }\n\n            // Clear pickfiles div\n            $('#form-item-upload-pickfilesList').html('');\n\n            // Hide all\n            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, .columns-position, #item-details-card-categories, #form-item-upload-pickfilesList, #card-item-expired')\n                .addClass('hidden');\n\n            // Show expected one\n            $(store.get('teampassUser').previousView).removeClass('hidden');\n\n            closeItemDetailsCard();\n        } else {\n            $(store.get('teampassUser').previousView).removeClass('hidden');\n            $(store.get('teampassUser').currentView).addClass('hidden');\n        }\n        $('.but-prev-item, .but-next-item').addClass('hidden').text('');\n    });\n\n\n    // Quit item details card back to items list\n    $('.but-back-to-list').click(function() {\n        closeItemDetailsCard();\n    });\n\n\n\n    // Manage if change is performed by user\n    $('#form-item .form-item-control')\n        .on('change', function() {\n            if (requestRunning === false) {\n                userDidAChange = true;\n                if (debugJavascript === true) console.log('User did a change on #form-item > ' + userDidAChange + \" - Element \" + $(this).attr('id'));\n                //$(this).attr('data-change-ongoing', true);\n            }\n        })\n        .on('ifToggled', function() {\n            if (requestRunning === false) {\n                userDidAChange = true;\n                if (debugJavascript === true) console.log('User did a change on ifToggled > ' + userDidAChange);\n                //$(this).attr('data-change-ongoing', true);\n            }\n        });\n\n    /**\n     * Click on perform IMPORT\n     */\n    $(document).on('click', '#form-item-import-perform', function() {\n        if (debugJavascript === true) console.log('START IMPORT');\n    });\n\n\n    /**\n     * Click on ITEM REQUEST ACCESS\n     */\n    $(document).on('click', '.fa-clickable-access-request', function() {\n        // Store current view\n        savePreviousView();\n\n        // Adapt the form\n        $('#form-item-request-access-label')\n            .html($(this).closest('.list-item-description').find('.list-item-row-description').text());\n\n        // Store current item ID\n        var selectedItemId = $(this).closest('.list-item-row').data('item-id');\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.id = selectedItemId;\n            }\n        );\n\n        // Show user\n        $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n        $('.form-item-request-access').removeClass('hidden');\n    });\n\n    /**\n     * Send an access request to author\n     */\n    $(document).on('click', '#form-item-request-access-perform', function() {\n        // No reason is provided\n        if ($('#form-item-request-access-reason').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_provide_reason'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        var data = {\n            'id': store.get('teampassItem').id,\n            'email': DOMPurify.sanitize($('#form-item-request-access-reason').val()),\n        }\n        // NOw send the email\n        $.post(\n            \"sources/items.queries.php\", {\n                type: 'send_request_access',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'send_request_access');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Change view\n                    $('.form-item-request-access').addClass('hidden');\n                    $('#folders-tree-card, .columns-position').removeClass('hidden');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n\n        scrollBackToPosition();\n    });\n\n\n    /**\n     * Show/Hide the Password generation options\n     */\n    $('#item-button-password-showOptions').click(function() {\n        if ($('#form-item-password-options').hasClass('hidden') === true) {\n            $('#form-item-password-options').removeClass('hidden');\n        } else {\n            $('#form-item-password-options').addClass('hidden');\n        }\n    });\n\n\n\n    /**\n     * Adapt the top rules of item form on change of folders\n     */\n    $('#form-item-folder').change(function() {\n        if ($(this).val() !== null && store.get('teampass-folders') !== undefined) {\n            if (debugJavascript === true) {\n                console.log('teampass-folders');\n                console.log(store.get('teampass-folders'))\n            }\n            var folders = JSON.parse(store.get('teampass-folders'));\n            $('#card-item-visibility').html(folders[$(this).val()].visibilityRoles);\n            $('#card-item-minimum-complexity').html(folders[$(this).val()].complexity.text);\n        }\n\n    });\n\n    /**\n     * NOTIFY - Perform save\n     */\n    $('#form-item-notify-perform').click(function() {\n        var form = $('#form-item-notify');\n\n\n        var data = {\n            'notification_status': $('#form-item-notify-checkbox').is(':checked') === true ? 1 : 0,\n            'item_id': store.get('teampassItem').id,\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'save_notification_status',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'save_notification_status');\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Change the icon for Notification\n                    if ($('#form-item-notify-checkbox').is(':checked') === true) {\n                        $('#card-item-misc-notification')\n                            .html('<span class=\"far fa-bell infotip text-success\" title=\"<?php echo langHdl('notification_engaged'); ?>\"></span>');\n                    } else {\n                        $('#card-item-misc-notification')\n                            .html('<span class=\"far fa-bell-slash infotip text-warning\" title=\"<?php echo langHdl('notification_not_engaged'); ?>\"></span>');\n                    }\n\n                    // Show/hide forms\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-notify').addClass('hidden');\n\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // Clear\n                    $('#form-item-notify-checkbox').iCheck('uncheck');\n                }\n            }\n        );\n    });\n\n\n\n    /**\n     * SHARE - validate the email\n     */\n    $('#form-item-share-perform').click(function() {\n        var form = $('#form-item-share');\n\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Prepare data\n        var data = {\n            'id': store.get('teampassItem').id,\n            'receipt': DOMPurify.sanitize($('#form-item-share-email').val()),\n            'cat': 'share_this_item',\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'send_email',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'send_email');\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-share').addClass('hidden');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // Clear\n                    $('#form-item-share-email').val('');\n                }\n            }\n        );\n    });\n\n\n    /**\n     * DELETE - recycle item\n     */\n    $('#form-item-delete-perform').click(function() {\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'item_id': store.get('teampassItem').id,\n            'folder_id': selectedFolderId,\n            'label': DOMPurify.sanitize($('#form-item-copy-new-label').val()),\n            'access_level': store.get('teampassItem').hasAccessLevel,\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'delete_item',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_item');\n\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    $('.form-item-action, .item-details-card-menu').addClass('hidden');\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Refresh tree\n                    refreshTree(selectedFolderId, true);\n                    // Load list of items\n                    ListerItems(selectedFolderId, '', 0);\n                    // Close\n                    closeItemDetailsCard();\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * NOTIFY - save status\n     */\n    $('#form-item-share-perform').click(function() {\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'notify_user_on_item_change',\n                id: store.get('teampassItem').id,\n                value: $('#form-item-anyoneCanModify').is(':checked') === true ? 1 : 0,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                if (data[0].error === '') {\n                    $('.form-item, .item-details-card, .form-item-action').removeClass('hidden');\n                    $('.form-item-share, .item-details-card-menu').addClass('hidden');\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Clear\n                    $('#form-item-anyoneCanModify').attr('checked', '');\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            },\n            'json'\n        );\n    });\n\n\n    /**\n     * COPY - perform copy item\n     */\n    $('#form-item-copy-perform').click(function() {\n        // Do check\n        if ($('#form-item-copy-new-label').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Show cog\n        toastr.remove();\n        toastr.info('<?php echo langHdl('item_copying'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'item_id': store.get('teampassItem').id,\n            'source_id': selectedFolderId,\n            'dest_id': $('#form-item-copy-destination').val(),\n            'new_label': DOMPurify.sanitize($('#form-item-copy-new-label').val()),\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'copy_item',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Refresh tree\n                    refreshTree(parseInt($('#form-item-copy-destination').val()), true);\n                    // Load list of items\n                    ListerItems(parseInt($('#form-item-copy-destination').val()), '', 0);\n\n                    // Reopen Item details form\n                    Details(\n                        data.new_id,\n                        'show',\n                        true\n                    );\n                    \n                    // Close\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-copy').addClass('hidden');\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * SERVER - perform server update\n     */\n    $('#form-item-server-perform').click(function() {\n        // Decide what action is performing the user\n\n        if ($('#tab-one-shot').hasClass('active') === true) {\n            // Do check\n            if ($('#form-item-server-login').val() === '' ||\n                $('#form-item-server-old-password').val() === '' ||\n                $('#form-item-server-password').val() === ''\n            ) {\n                toastr.error(\n                    '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Show cog\n            toastr.remove();\n            toastr.info(\n                '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>',\n            );\n\n            // Force user did a change to false\n            userDidAChange = false;\n            userUploadedFile = false;\n\n            var data = {\n                'item_id': store.get('teampassItem').id,\n                'new_pwd': DOMPurify.sanitize($('#form-item-server-password').val()),\n                'ssh_root': DOMPurify.sanitize($('#form-item-server-login').val()),\n                'ssh_pwd': DOMPurify.sanitize($('#form-item-server-old-password').val()),\n                'user_id': <?php echo $_SESSION['user_id']; ?>,\n            }\n\n            $.post(\n                \"sources/utils.queries.php\", {\n                    type: \"server_auto_update_password\",\n                    data: prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    if (debugJavascript === true) console.log(data);\n                    //check if format error\n                    if (data.error === true) {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Warn user\n                        toastr.success(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n\n                        // Info\n                        $(\"#form-item-server-status\")\n                            .html(\"<?php echo langHdl('done'); ?> \" + data.text)\n                            .removeClass('hidden');\n                    }\n                }\n            );\n        } else if ($('#tab-scheduled').hasClass('active') === true) {\n            $.post(\n                \"sources/utils.queries.php\", {\n                    type: \"server_auto_update_password_frequency\",\n                    id: store.get('teampassItem').id,\n                    freq: $('#form-item-server-cron-frequency').val(),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data[0].error != \"\") {\n                        toastr.remove();\n                        toastr.error(\n                            data[0].error,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        $('#form-item-server-cron-frequency').val(0).change();\n                        toastr.success(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                },\n                \"json\"\n            );\n        }\n    });\n\n\n    /**\n     * SUGGESTION - perform new suggestion on item\n     */\n    $('#form-item-suggestion-perform').click(function() {\n        var form = $('#form-item-suggestion');\n\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 10000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'label': DOMPurify.sanitize($('#form-item-suggestion-label').val()),\n            'login': DOMPurify.sanitize($('#form-item-suggestion-login').val()),\n            'password': DOMPurify.sanitize($('#form-item-suggestion-password').val()),\n            'email': DOMPurify.sanitize($('#form-item-suggestion-email').val()),\n            'url': DOMPurify.sanitize($('#form-item-suggestion-url').val()),\n            'description': DOMPurify.sanitize($('#form-item-suggestion-description').summernote('code'), {USE_PROFILES: {html: true}}),\n            'comment': DOMPurify.sanitize($('#form-item-suggestion-comment').val(), {USE_PROFILES: {html: true}}),\n            'folder_id': selectedFolderId,\n            'item_id': store.get('teampassItem').id\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'suggest_item_change',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data//decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'suggest_item_change');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Clear form\n                    $('.form-item-suggestion').html('');\n\n                    // Collapse form\n                    //$('.card-item-extra').collapse('toggle');\n                }\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER NEW - Add a new folder\n     */\n    $('#form-folder-add-perform').click(function() {\n        var form = $('#form-folder-add');\n        if (debugJavascript === true) {\n            console.log(form[0]);\n            console.log(form[0].checkValidity());\n        }\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Error if folder text is only numeric\n        if (/^\\d+$/.test($('#form-folder-add-label').val())) {\n            $('#form-folder-add-label').addClass('is-invalid');\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_only_numbers_in_folder_name'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'title': DOMPurify.sanitize($('#form-folder-add-label').val(), {USE_PROFILES: {html: false}}),\n            'parentId': $('#form-folder-add-parent option:selected').val(),\n            'complexity': $('#form-folder-add-complexicity option:selected').val(),\n            //'access_rights_strategy': $('#form-folder-add-rights option:selected').val(),\n            'icon': DOMPurify.sanitize($('#form-folder-add-icon').val(), {USE_PROFILES: {html: false}}),\n            'iconSelected': DOMPurify.sanitize($('#form-folder-add-icon-selected').val(), {USE_PROFILES: {html: false}}),\n            'id': selectedFolderId,\n        }\n        if (debugJavascript === true) console.log(data);\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: $('#form-folder-add').data('action') + '_folder',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data//decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', $('#form-folder-add').data('action') + '_folder');\n                if (debugJavascript === true) {\n                    console.log(data);\n                }\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    if ($('#form-folder-add').data('action') === 'add') {\n                        // Refresh tree\n                        refreshTree(data.newId, true);\n                        // Refresh list of items inside the folder\n                        ListerItems(data.newId, '', 0);\n                    } else {\n                        // Refresh tree\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 1;\n                            }\n                        );\n                        refreshTree(selectedFolderId, true);\n                        // Refresh list of items inside the folder\n                        ListerItems(selectedFolderId, '', 0);\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 0;\n                            }\n                        );\n                    }\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n                // Enable the parent in select\n                if (selectedFolder.id !== undefined) {\n                    $(\"#form-folder-add-parent option[value='\" + selectedFolder.id.split('_')[1] + \"']\")\n                        .prop('disabled', false);\n                }\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER DELETE - Delete an existing folder\n     */\n    $('#form-folder-delete-perform').click(function() {\n        // Do check\n        if ($('#form-folder-confirm-delete').is(':checked') === false) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_confirm'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        } else if ($('#form-folder-delete-selection option:selected').text() === '<?php echo $_SESSION['login']; ?>') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_not_allowed_to'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Is a folder selected\n        if ($('#form-folder-delete-selection option:selected').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        \n        // Ensure Root is not selected\n        } else if (parseInt($('#form-folder-delete-selection option:selected').val()) === 0) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n        \n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n\n        var selectedFolders = [],\n            data = {\n                'selectedFolders': [$('#form-folder-delete-selection option:selected').val()]\n            }\n        if (debugJavascript === true) console.log(data)\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: 'delete_folders',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', 'delete_folders');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    // Refresh tree\n                    refreshTree(data.parent_id, true);\n                    // Refresh list of items inside the folder\n                    ListerItems(data.parent_id, '', 0);\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n\n                $('#form-folder-confirm-delete').iCheck('uncheck');\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER COPY - Copy an existing folder\n     */\n    $('#form-folder-copy-perform').click(function() {\n        // Do check\n        if ($(\"#form-folder-copy-source\").val() === \"\" || $(\"#form-folder-copy-destination\").val() === \"\") {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_must_enter_all_fields'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        } else if ($(\"#form-folder-copy-source\").val() === $(\"#form-folder-copy-destination\").val()) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_source_and_destination_are_equal'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Show cog\n        toastr.remove();\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        var data = {\n            'source_folder_id': $('#form-folder-copy-source option:selected').val(),\n            'target_folder_id': $('#form-folder-copy-destination option:selected').val(),\n            'folder_label': DOMPurify.sanitize($('#form-folder-copy-label').val(), {USE_PROFILES: {html: false}}),\n        }\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: 'copy_folder',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', 'copy_folder');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    // Refresh tree\n                    refreshTree($('#form-folder-copy-destination option:selected').val(), true);\n                    // Refresh list of items inside the folder\n                    ListerItems($('#form-folder-copy-destination option:selected').val(), '', 0);\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n    $(document).on('change', '#form-folder-copy-source', function() {\n        $('#form-folder-copy-label')\n            .val($('#form-folder-copy-source option:selected').text()\n                .substring(0, $('#form-folder-copy-source option:selected').text().lastIndexOf('[')).trim() +\n                ' <?php echo strtolower(langHdl('copy')); ?>');\n    });\n\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function closeItemDetailsCard() {\n        if (debugJavascript === true) console.log('CLOSE - user did a change? ' + userDidAChange + \" - User previous view: \" + store.get('teampassUser').previousView);\n        if (userDidAChange === true) {\n            toastr\n                .warning(\n                    '<?php echo langHdl('changes_ongoing'); ?><br>' +\n                    '<button type=\"button\" class=\"btn clear\" id=\"discard-changes\"><?php echo langHdl('yes'); ?></button>' +\n                    '<button type=\"button\" class=\"btn clear ml-2\" id=\"keep-changes\"><?php echo langHdl('no'); ?></button>',\n                    '<?php echo langHdl('caution'); ?>', {\n                        closeButton: true\n                    }\n                );\n            $(document).on('click', '#discard-changes', function() {\n                userDidAChange = false;\n                //$('.form-item-control').attr('data-change-ongoing', \"\");\n                closeItemDetailsCard();\n            });\n        } else {\n            if (store.get('teampassUser').previousView === '.item-details-card' &&\n                $('.item-details-card').hasClass('hidden') === false\n            ) {\n                $('.item-details-card').removeClass('hidden');\n                $('#folders-tree-card, .columns-position, .form-item-action, .form-item, .form-folder-action, #card-item-expired')\n                    .addClass('hidden');\n\n                // Force previous view to folders list\n                store.update(\n                    'teampassUser',\n                    function(teampassUser) {\n                        teampassUser.previousView = '#folders-tree-card';\n                    }\n                );\n            } else {\n                if (store.get('teampassUser').previousView === '.item-details-card') {\n                    // Force previous view to folders list\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.previousView = '#folders-tree-card';\n                        }\n                    );\n                    // Reopen Item details form\n                    Details(\n                        store.get('teampassItem').id,\n                        'show',\n                        true\n                    );\n\n                    return false;\n                }\n                if (store.get('teampassUser').previousView === '#folders-tree-card' ||\n                    $('.item-details-card').hasClass('hidden') === false\n                ) {\n                    $('#folders-tree-card, .columns-position').removeClass('hidden');\n                    $('.item-details-card, .form-item-action, .form-item, .form-folder-action, #card-item-expired')\n                        .addClass('hidden');\n                } else {\n                    // Hide all\n                    $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, #card-item-expired')\n                        .addClass('hidden');\n\n                    // Show expected one\n                    $(store.get('teampassUser').previousView).removeClass('hidden');\n                }\n\n                // Do some form cleaning\n                $('.clear-me-val, .form-item-control').val('');\n                $('.item-details-card').find('.form-control').val('');\n                $('.clear-me-html, .card-item-field-value').html('');\n                $('.form-check-input').attr('checked', '');\n                //$('.card-item-extra').collapse();\n                $('.collapse').removeClass('show');\n                $('.to_be_deleted').remove();\n                $('#card-item-attachments, #card-item-history').html('');\n                $('#card-item-attachments-badge').html('<?php echo langHdl('none'); ?>');\n\n                // Move back fields\n                $('.fields-to-move')\n                    .detach()\n                    .appendTo('#card-item-fields');\n\n                // Ensure the form is correct\n                $('#list-group-item-main, #item-details-card-categories')\n                    .children('.list-group')\n                    .removeClass('hidden');\n\n                // SHow save button in card\n                //$('#form-item-buttons').removeClass('sticky-footer');\n\n                // Destroy editors\n                $('#form-item-description').summernote('destroy');\n                $('#form-item-suggestion-description').summernote('destroy');\n\n                // Show loading\n                $('.overlay').removeClass('hidden');\n\n                // Collapse accordion\n                //$('.collapseme').addClass('collapsed-card');\n\n                // Restore scroll position\n                $(window).scrollTop(userScrollPosition);\n\n                userDidAChange = false;                \n                //$('.form-item-control').attr('data-change-ongoing', \"\");\n\n                // Enable the parent in select\n                if (selectedFolder.id !== undefined) {\n                    $(\"#form-folder-add-parent option[value='\" + selectedFolder.id.split('_')[1] + \"']\")\n                        .prop('disabled', false);\n                }\n            }\n            if (debugJavascript === true) console.log('Edit for closed');\n        }\n\n\n\n        // Scroll back to position\n        scrollBackToPosition();\n    }\n\n\n    /**\n     * Click on button with class but-navigate-item\n     */\n    $(document)\n        .on('click', '.but-navigate-item', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load item info\n            Details(\n                $(this).hasClass('but-prev-item') === true ? $('#list-item-row_' + $(this).attr('data-prev-item-id')) : $('#list-item-row_' + $(this).attr('data-next-item-id')),\n                'show'\n            );\n\n            $('.but-navigate-item').addClass('hidden');\n        });\n\n\n    /**\n     * Click on item\n     */\n    $(document)\n        .on('click', '.list-item-clicktoshow', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load item info\n            Details($(this).closest('tr'), 'show');\n        })\n        .on('click', '.list-item-clicktoedit', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            if (debugJavascript === true) console.log('EDIT ME');\n            // Set type of action\n            $('#form-item-button-save').data('action', 'update_item');\n            \n            // Load item info\n            Details($(this).closest('tr'), 'edit');\n        });\n\n    /**\n     *  Manage mini icons on mouse over\n     */\n    $(document)\n        .on('mouseenter', '.list-item-row', function() {\n            $(this).find(\".list-item-actions\").removeClass('hidden');\n        })\n        .on('mouseleave', '.list-item-row', function() {\n            $(this).find(\".list-item-actions\").addClass('hidden');\n        });\n\n    $(document)\n        .on('change', '.form-check-input-template', function() {\n            $('.form-check-input-template').not(this).prop('checked', false);\n            userDidAChange = true;\n            if (debugJavascript === true) console.log('User did a change on .form-check-input-template > ' + userDidAChange);\n        });\n\n    $('.form-check-input-template').on('ifChecked', function() {\n        $('.form-check-input-template').not(this).iCheck('uncheck');\n        userDidAChange = true;\n        if (debugJavascript === true) console.log('User did a change on .form-check-input-template > ' + userDidAChange);\n        //$('.form-check-input-template').attr('data-change-ongoing', true);;\n    });\n\n    /**\n     * Manage change of color\n     */\n    $(document)\n        .on('mouseenter', '.fa-clickable', function() {\n            $(this).addClass('text-info');\n        })\n        .on('mouseleave', '.fa-clickable', function() {\n            $(this).removeClass('text-info');\n        });\n\n    $('#form-item-label').change(function() {\n        $('#form-item-title').html($(this).val());\n    });\n\n    /**\n     * Make the item favourite by clicking on icon\n     */\n    $(document)\n        .on('click', '.item-favourite', function() {\n            if (quick_icon_query_status === true) {\n                quick_icon_query_status = false;\n                var elem = $(this);\n\n                //Send query\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('success'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n\n                var data = {\n                    item_id: $(this).data('item-id'),\n                    action: $(this).data('item-favourited'),\n                }\n\n                console.log(data)\n\n                $.post('sources/items.queries.php', {\n                        type: 'action_on_quick_icon',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(ret) {\n                        //change quick icon\n                        if (elem.data('item-favourited') === 0) {\n                            $(elem)\n                                .html('<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('unfavorite'); ?>\" data-item-id=\"' + elem.item_id + '\" data-item-favourited=\"1\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse text-warning\"></i></span>');\n                        } else {\n                            $(elem)\n                                .html('<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('favorite'); ?>\" data-item-id=\"' + elem.item_id + '\" data-item-favourited=\"0\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse\"></i></span>');\n                        }\n\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                        quick_icon_query_status = true;\n                    }\n                );\n            }\n        });\n\n    // Click to reaveal password\n    $('#item-button-password-show')\n        .mouseup(function() {\n            $('#form-item-password').attr('type', 'password');\n        })\n        .mousedown(function() {\n            $('#form-item-password').attr('type', 'text');\n        });\n    $('.btn-no-click')\n        .click(function(e) {\n            e.preventDefault();\n        });\n\n\n\n    // show password during longpress\n    var mouseStillDown = false;\n    $('.item-details-card').on('mousedown', '.unhide_masked_data', function(event) {\n            mouseStillDown = true;\n            showPwdContinuous();\n        })\n        .on('mouseup', '.unhide_masked_data', function(event) {\n            mouseStillDown = false;\n            showPwdContinuous();\n        })\n        .on('mouseleave', '.unhide_masked_data', function(event) {\n            mouseStillDown = false;\n            showPwdContinuous();\n        });\n    var showPwdContinuous = function() {\n        if (mouseStillDown === true) {\n            // Prepare data to show\n            // Is data crypted?\n            var data = unCryptData($('#hidden-item-pwd').val(), '<?php echo $_SESSION['key']; ?>');\n            if (data !== false && data !== undefined) {\n                $('#hidden-item-pwd').val(\n                    data.password\n                );\n            }\n\n            $('#card-item-pwd')\n                .html(\n                    '<span style=\"cursor:none;\">' +\n                    $('#hidden-item-pwd').val()\n                    .replace(/</g, '&lt;')\n                    .replace(/>/g, '&gt;') +\n                    '</span>'\n                );\n\n            setTimeout('showPwdContinuous(\"card-item-pwd\")', 50);\n            // log password is shown\n            if ($('#card-item-pwd').hasClass('pwd-shown') === false) {\n                itemLog(\n                    'at_password_shown',\n                    store.get('teampassItem').id,\n                    $('#card-item-label').text()\n                );\n                $('#card-item-pwd').addClass('pwd-shown');\n            }\n        } else {\n            $('#card-item-pwd')\n                .html('<?php echo $var['hidden_asterisk']; ?>')\n                .removeClass('pwd-shown');\n        }\n    };\n\n    // Fields - show masked field\n    var selectedElement;\n    $('.item-details-card').on('mousedown', '.replace-asterisk', function(event) {\n            mouseStillDown = true;\n            selectedElement = $(this);\n            showContinuousMasked();\n        })\n        .on('mouseup', '.replace-asterisk', function(event) {\n            mouseStillDown = false;\n        })\n        .on('mouseleave', '.replace-asterisk', function(event) {\n            mouseStillDown = false;\n        });\n    var showContinuousMasked = function() {\n        if (mouseStillDown) {\n            $(selectedElement)\n                .text($('#hidden-card-item-field-value-' + selectedElement.data('field-id')).val());\n\n            setTimeout('showContinuousMasked()', 50);\n        } else {\n            $(selectedElement).html('<?php echo $var['hidden_asterisk']; ?>');\n        }\n    };\n\n\n    /**\n     * Launch the items search\n     */\n    $('#find_items').bind('keypress', function(e) {\n        var code = e.keyCode || e.which;\n        if (code == 13) {\n            searchItems($(this).val());\n        }\n    });\n\n    $('#find_items_button').click(function() {\n        if ($('#find_items').val() !== '') {\n            searchItems($('#find_items').val());\n        }\n    });\n\n\n    // Password strength\n    var pwdOptions = {};\n    pwdOptions = {\n        common: {\n            zxcvbn: true,\n            debug: false,\n            minChar: 4,\n            onScore: function (options, word, totalScoreCalculated) {\n                if (word.length === 20 && totalScoreCalculated < options.ui.scores[1]) {\n                    // Score doesn't meet the score[1]. So we will return the min\n                    // numbers of points to get that score instead.\n                    return options.ui.score[1]\n                }\n                $(\"#form-item-password-complex\").val(totalScoreCalculated);\n                return totalScoreCalculated;\n            },\n            usernameField: \"#form-item-login\",\n        },\n        rules: {},\n        ui: {\n            colorClasses: [\"text-danger\", \"text-danger\", \"text-danger\", \"text-warning\", \"text-warning\", \"text-success\"],\n            showPopover: false,\n            showStatus: true,\n            showErrors: false,\n            showVerdictsInsideProgressBar: true,\n            container: \"#tab_1\",\n            viewports: {\n                progress: \"#form-item-password-strength\",\n                score: \"#form-item-password-strength\"\n            },\n            scores: [<?php echo TP_PW_STRENGTH_1;?>, <?php echo TP_PW_STRENGTH_2;?>, <?php echo TP_PW_STRENGTH_3;?>, <?php echo TP_PW_STRENGTH_4;?>, <?php echo TP_PW_STRENGTH_5;?>],\n        },\n        i18n : {\n            t: function (key) {\n                var phrases = {\n                    weak: '<?php echo langHdl('complex_level1'); ?>',\n                    normal: '<?php echo langHdl('complex_level2'); ?>',\n                    medium: '<?php echo langHdl('complex_level3'); ?>',\n                    strong: '<?php echo langHdl('complex_level4'); ?>',\n                    veryStrong: '<?php echo langHdl('complex_level5'); ?>'\n                };\n                var result = phrases[key];\n\n                return result === key ? '' : result;\n            }\n        }\n    };\n    $('#form-item-password').pwstrength(pwdOptions);\n    \n\n\n    /**\n     * PLUPLOAD\n     */\n    var uploader_attachments = new plupload.Uploader({\n        runtimes: 'html5,flash,silverlight,html4',\n        browse_button: 'form-item-attach-pickfiles',\n        container: 'form-item-upload-zone',\n        max_file_size: '<?php\n            if (strrpos($SETTINGS['upload_maxfilesize'], 'mb') === false) {\n                echo $SETTINGS['upload_maxfilesize'] . 'mb';\n            } else {\n                echo $SETTINGS['upload_maxfilesize'];\n            }\n            ?>',\n        chunk_size: '1mb',\n        dragdrop: true,\n        url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/upload.attachments.php',\n        flash_swf_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.swf',\n        silverlight_xap_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.xap',\n        filters: {\n            mime_types: [\n                <?php\n                if (\n                    isset($SETTINGS['upload_all_extensions_file']) === false\n                    || (isset($SETTINGS['upload_all_extensions_file']) === true\n                        && (int) $SETTINGS['upload_all_extensions_file'] === 0)\n                ) {\n                    ?> {\n                        title: 'Image files',\n                        extensions: '<?php echo $SETTINGS['upload_imagesext']; ?>'\n                    },\n                    {\n                        title: 'Package files',\n                        extensions: '<?php echo $SETTINGS['upload_pkgext']; ?>'\n                    },\n                    {\n                        title: 'Documents files',\n                        extensions: '<?php echo $SETTINGS['upload_docext']; ?>'\n                    },\n                    {\n                        title: 'Other files',\n                        extensions: '<?php echo $SETTINGS['upload_otherext']; ?>'\n                    }\n                <?php\n                }\n                ?>\n            ],\n            <?php\n            if (isset($SETTINGS['upload_zero_byte_file']) === true && (int) $SETTINGS['upload_zero_byte_file'] === 1) {\n                ?>\n                prevent_empty: false\n            <?php\n            }\n            ?>\n        },\n        <?php\n        if ((int) $SETTINGS['upload_imageresize_options'] === 1) {\n            ?>\n            resize: {\n                width: <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n                height: <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n                quality: <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n            },\n        <?php\n        }\n        ?>\n        init: {\n            BeforeUpload: function(up, file) {\n                toastr.info(\n                    '<i class=\"fa-solid fa-cloud-arrow-up fa-bounce mr-2\"></i><?php echo langHdl('uploading'); ?>',\n                    '', {\n                        timeOut: 0\n                    }\n                );\n\n                // Get random number\n                if (store.get('teampassApplication').uploadedFileId === '') {\n                    store.update(\n                        'teampassApplication',\n                        function(teampassApplication) {\n                            teampassApplication.uploadedFileId = CreateRandomString(9, 'num_no_0');\n                        }\n                    );\n                }\n\n                up.setOption('multipart_params', {\n                    PHPSESSID: '<?php echo $_SESSION['user_id']; ?>',\n                    itemId: store.get('teampassItem').id,\n                    type_upload: 'item_attachments',\n                    isNewItem: store.get('teampassItem').isNewItem,\n                    isPersonal: store.get('teampassItem').folderIsPersonal,\n                    edit_item: false,\n                    user_token: store.get('teampassApplication').attachmentToken,\n                    randomId: store.get('teampassApplication').uploadedFileId,\n                    files_number: $('#form-item-hidden-pickFilesNumber').val(),\n                    file_size: file.size\n                });\n                console.log('DEBUG IMAGE - BeforeUpload')\n                console.log(up);\n            }\n        }\n    });\n\n    // Uploader options\n    uploader_attachments.bind('UploadProgress', function(up, file) {\n        //console.log('uploader_attachments.bind')\n        $('#upload-file_' + file.id).html('<i class=\"fas fa-file fa-sm mr-2\"></i>' + htmlEncode(file.name) + '<span id=\"fileStatus_'+file.id+'\">- ' + file.percent + '%</span>');\n        if (file.percent === 100) {\n            $('#fileStatus_'+file.id).html('<i class=\"fa-solid fa-circle-check text-success ml-2 fa-1x\"></i>');\n            userUploadedFile = true;\n            userDidAChange = true;\n            toastr.remove();\n        }\n    });\n    uploader_attachments.bind('Error', function(up, err) {\n        toastr.remove();\n        toastr.error(\n            err.message + (err.file ? ', File: ' + err.file.name : ''),\n            '', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    $(\"#form-item-upload-pickfiles\").click(function(e) {\n        if ($('#form-item-upload-pickfilesList').text() !== '') {\n            // generate and save token\n            $.post(\n                \"sources/main.queries.php\", {\n                    type: \"save_token\",\n                    type_category: 'action_system',\n                    size: 25,\n                    capital: true,\n                    numeric: true,\n                    ambiguous: true,\n                    reason: \"item_attachments\",\n                    duration: 10,\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    store.update(\n                        'teampassApplication',\n                        function(teampassApplication) {\n                            teampassApplication.attachmentToken = data[0].token;\n                        }\n                    );\n                    console.log('start upload')\n                    uploader_attachments.start();\n                },\n                \"json\"\n            );\n            e.preventDefault();\n        } else {\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_file_to_upload'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    uploader_attachments.init();\n    uploader_attachments.bind('FilesAdded', function(up, files) {\n        if (debugJavascript === true) {\n            console.log('uploader_attachments.FilesAdded')\n        }\n        $('#form-item-upload-pickfilesList').removeClass('hidden');\n        var addedFiles = '';\n        $.each(files, function(i, file) {\n            $('#form-item-upload-pickfilesList').append(\n                '<div id=\"upload-file_' + file.id + '\">' +\n                '<span id=\"upload-file-remove_' + file.id +\n                '><a href=\"#\" onclick=\"$(this).closest(\\'div\\').remove();\"><i class=\" fa fa-trash mr-2 pointer\"></i></a></span> ' +\n                htmlEncode(file.name) + ' (' + plupload.formatSize(file.size) + ')' +\n                '</div>');\n            $(\"#form-item-hidden-pickFilesNumber\").val(\n                parseInt($(\"#form-item-hidden-pickFilesNumber\").val()) + 1\n            );\n            if (debugJavascript === true) {\n                console.info('Info du fichier :');\n                console.log(file);\n            }\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    //->\n\n\n\n    /**\n     * Save item changes\n     */\n    $('#form-item-button-save').click(function() {\n        var arrayQuery = [],\n            originalFolderId = $('#form-item-folder').val(),\n            itemsList = [],\n            userItemRight = '';\n\n        // What action is this?\n        if ($('#form-item-button-save').data('action') === '' ||\n            $('#form-item-button-save').data('action') === undefined\n        ) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_no_action_identified'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Don't save if no change\n        if (userDidAChange === false && userUploadedFile === false) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('no_change_performed'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Validate form\n        var form = $('#form-item');\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Loop on all changed fields\n        $('.form-item-field-custom').each(function(i, obj) {\n            if ($(this).data('change-ongoing') === true) {\n                // Create an array with changed inputs\n                arrayQuery.push({\n                    'input': $(this).attr('id'),\n                    'field': $(this).data('field-name'),\n                    'value': $(this).val(),\n                });\n            }\n        });\n        if (debugJavascript === true) {\n            console.log('CHANGED FIELDS '+userUploadedFile + ' ' + userDidAChange);\n            console.log(arrayQuery);\n        }\n\n        // is user allowed to edit this item\n        if (typeof store.get('teampassApplication').itemsList !== 'undefined') {\n            itemsList = JSON.parse(store.get('teampassApplication').itemsList);\n        }\n        if (itemsList.length > 0) {\n            userItemRight = itemsList[store.get('teampassItem').id]?.rights;\n        }\n\n        \n\n        // Do checks\n        if (arrayQuery.length > 0 || userDidAChange === true) {\n            var reg = new RegExp(\"[.|,|;|:|!|=|+|-|*|/|#|\\\"|'|&]\");\n\n            // Sanitize text fields\n            let formLabel = fieldSanitizeStep1('#form-item-label', false, false, false),\n                formDescription = $('#form-item-description').summernote('code') !== \"<p><br></p>\" ? fieldSanitizeStep1('#form-item-description', true, false, false, $('#form-item-description').summernote('code')) : '',\n                formEmail = fieldSanitizeStep1('#form-item-email'),\n                formTags = fieldSanitizeStep1('#form-item-tags'),\n                formUrl = fieldSanitizeStep1('#form-item-url'),\n                formIcon = fieldSanitizeStep1('#form-item-icon');\n            if (formLabel === false || formDescription === false || formEmail === false || formTags === false || formUrl === false || formIcon === false) {\n                // Label is empty\n                toastr.remove();\n                toastr.warning(\n                    'XSS attempt detected. Field has been emptied.',\n                    'Error', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            \n            // Do some easy checks\n            if (formLabel === '') {\n                // Label is empty\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_label'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if (formTags !== '' &&\n                reg.test(formTags)\n            ) {\n                // Tags not wel formated\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_tags'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if ($('#form-item-folder option:selected').val() === '' ||\n                typeof $('#form-item-folder option:selected').val() === 'undefined'\n            ) {\n                // No folder selected\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_no_selected_folder'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if ($('#form-item-folder option:selected').attr('disabled') === 'disabled' && userItemRight && userItemRight <= 40) {\n                // Folder is not allowed\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_folder_not_allowed'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else {\n                // Continue preparation of saving query\n\n                //Manage restriction\n                var restriction = new Array(),\n                    restrictionRole = new Array(),\n                    userInRestrictionList = false;\n                $('#form-item-restrictedto option:selected').each(function() {\n                    if ($(this).val() !== '') {\n                        if ($(this).hasClass('restriction_is_role') === true) {\n                            restrictionRole.push($(this).val().substring(5));\n                        } else {\n                            restriction.push($(this).val());\n                            // Is the user part of the restriction option\n                            if ($(this).val() === '<?php echo $_SESSION['user_id']; ?>') {\n                                userInRestrictionList = true;\n                            }\n                        }\n                    }\n                });\n                // IF any restriction, then ensure the author is in\n                if (userInRestrictionList === false && restriction.length > 0) {\n                    restriction.push('<?php echo $_SESSION['user_id']; ?>;');\n                }\n\n                // Manage diffusion list\n                var diffusion = new Array();\n                var diffusionNames = new Array();\n                $('#form-item-anounce option:selected').each(function() {\n                    diffusion.push($(this).val());\n                    diffusionNames.push($(this).text());\n                });\n\n                // Get item field values\n                // Ensure that mandatory ones are filled in too\n                // and they are compliant to regexes\n                var fields = [];\n                var errorExit = false;\n                var reason = '';\n                $('.form-item-field-custom').each(function(key, data) {\n                    fields.push({\n                        'id': $(this).data('field-name'),\n                        'value': $(this).val(),\n                    });\n\n                    // Mandatory?\n                    if (parseInt($(this).data('field-mandatory')) === 1 &&\n                        $(this).val() === '' &&\n                        $('#form-item-field-' + $(this).data('field-name')).parent().hasClass('hidden') === false\n                    ) {\n                        //if (debugJavascript === true) console.log($(this))\n                        errorExit = true;\n                        return false;\n                    }\n                    if ($(this).val().length > 0 && $(this).data('field-regex').length > 0 &&\n                        !$(this).val().match($(this).data('field-regex'))\n                    ) {\n                        //if (debugJavascript === true) console.log($(this))\n                        errorExit = true;\n                        reason = 'regex';\n                        return false;\n                    }\n                });\n                if (errorExit === true) {\n                    toastr.remove();\n                    if (reason === 'regex') {\n                        toastr.error(\n                            '<?php echo langHdl('error_field_regex'); ?>',\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        toastr.error(\n                            '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    }\n                    return false;\n                }\n                    \n                //prepare data\n                var data = {\n                    'anyone_can_modify': $('#form-item-anyoneCanModify').is(':checked') ? 1 : 0,\n                    'complexity_level': parseInt($('#form-item-password-complex').val()),\n                    'description': formDescription,\n                    'diffusion_list': diffusion,\n                    'diffusion_list_names': diffusionNames,\n                    'folder': parseInt($('#form-item-folder').val()),\n                    'email': formEmail,\n                    'fields': fields,\n                    'folder_is_personal': store.get('teampassItem').IsPersonalFolder === 1 ? 1 : 0,\n                    'id': store.get('teampassItem').id,\n                    'label': formLabel,\n                    'login': DOMPurify.sanitize($('#form-item-login').val()),\n                    'pw': $('#form-item-password').val(),\n                    'restricted_to': restriction,\n                    'restricted_to_roles': restrictionRole,\n                    'tags': formTags,\n                    'template_id': parseInt($('input.form-check-input-template:checkbox:checked').data('category-id')),\n                    'to_be_deleted_after_date': ($('#form-item-deleteAfterDate').length !== 0 &&\n                        $('#form-item-deleteAfterDate').val() !== '') ? $('#form-item-deleteAfterDate').val() : '',\n                    'to_be_deleted_after_x_views': ($('#form-item-deleteAfterShown').length !== 0 &&\n                            $('#form-item-deleteAfterShown').val() !== '' && $('#form-item-deleteAfterShown').val() >= 1) ?\n                        parseInt($('#form-item-deleteAfterShown').val()) : '',\n                    'url': formUrl,\n                    'user_id': parseInt('<?php echo $_SESSION['user_id']; ?>'),\n                    'uploaded_file_id': store.get('teampassApplication').uploadedFileId === undefined ? '' : store.get('teampassApplication').uploadedFileId,\n                    'fa_icon': formIcon,\n                };\n                if (debugJavascript === true) {\n                    console.log('SAVING DATA');\n                    console.log(data);\n                }\n\n                // Inform user\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('opening_folder'); ?><i class=\"fas fa-circle-notch fa-spin ml-2\"></i>'\n                );\n\n                // CLear tempo var\n                store.update(\n                    'teampassApplication',\n                    function(teampassApplication) {\n                        teampassApplication.uploadedFileId = '';\n                    }\n                );\n\n                //Send query\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: $('#form-item-button-save').data('action'),\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //decrypt data\n                        try {\n                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                        } catch (e) {\n                            // error\n                            $(\"#div_loading\").addClass(\"hidden\");\n                            //requestRunning = false;\n                            $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\" + data);\n                            $(\"#div_dialog_message\").dialog(\"open\");\n\n                            toastr.remove();\n                            toastr.error(\n                                'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            return false;\n                        }\n                        if (debugJavascript === true) console.log('RETURNED DATA');\n                        if (debugJavascript === true) console.log(data);\n                        if (data.error === true) {\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            return false;\n                        } else {\n                            // Refresh tree\n                            if ($('#form-item-button-save').data('action') === 'update_item') {\n                                if ($('#form-item-folder').val() !== '' &&\n                                    originalFolderId !== $('#form-item-folder').val()\n                                ) {\n                                    refreshTree($('#form-item-folder').val(), false);\n                                }\n                                // Send query to confirm attachments\n                                var data = {\n                                    'item_id': store.get('teampassItem').id,\n                                }\n                                $.post(\n                                    \"sources/items.queries.php\", {\n                                        type: 'confirm_attachments',\n                                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                                        key: '<?php echo $_SESSION['key']; ?>'\n                                    }\n                                );\n                            } else {\n                                refreshTree($('#form-item-folder').val(), true);\n                            }\n\n                            // Refresh list of items inside the folder\n                            ListerItems($('#form-item-folder').val(), '', 0);\n\n                            // Inform user\n                            toastr.info(\n                                '<?php echo langHdl('success'); ?>',\n                                '', {\n                                    timeOut: 1000\n                                }\n                            );\n\n                            // Close\n                            userDidAChange = false;\n                            userUploadedFile = false;\n\n                            closeItemDetailsCard();\n                            /*\n                            // Hide all\n                            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, #card-item-expired').addClass('hidden');\n\n                            // Show expected one\n                            $(store.get('teampassUser').previousView).removeClass('hidden');\n                            */\n                        }\n                    }\n                );\n            }\n        } else if (userUploadedFile === true) {\n            // Send query to confirm attachments\n            var data = {\n                'item_id': store.get('teampassItem').id,\n            }\n\n            $.post(\n                \"sources/items.queries.php\", {\n                    type: 'confirm_attachments',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                }\n            );\n\n            store.update(\n                'teampassItem',\n                function(teampassItem) {\n                    teampassItem.isNewItem = 0\n                }\n            );\n\n            // Inform user\n            toastr.info(\n                '<?php echo langHdl('done'); ?>',\n                '', {\n                    timeOut: 1000\n                }\n            );\n\n            // Close\n            userUploadedFile = false;\n            closeItemDetailsCard();\n        } else {\n            if (debugJavascript === true) console.info('NOTHING TO SAVE');\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('nothing_to_save'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    //->\n\n\n    //autocomplete for TAGS\n    $(\"#form-item-tags\")\n        //.focus()\n        .bind(\"keydown\", function(event) {\n            if (event.keyCode === $.ui.keyCode.TAB &&\n                $(this).data(\"autocomplete\").menu.active) {\n                event.preventDefault();\n            }\n        })\n        .autocomplete({\n            source: function(request, response) {\n                $.getJSON(\"sources/items.queries.php?type=autocomplete_tags&t=1\", {\n                    term: extractLast(request.term)\n                }, response);\n            },\n            focus: function() {\n                // prevent value inserted on focus\n                return false;\n            },\n            search: function() {\n                var term = extractLast(this.value);\n            },\n            select: function(event, ui) {\n                var terms = split(this.value);\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push(ui.item.value);\n                // add placeholder to get the comma-and-space at the end\n                terms.push(\"\");\n                this.value = terms.join(\" \");\n\n                return false;\n            }\n        });\n\n    // Warn in case of limited search\n    $(document).on('click', '#limited-search', function() {\n        if ($(this).is(\":checked\") === true) {\n            $('#find_items').css({\n                \"background-color\": \"#f56954\"\n            });\n        } else {\n            $('#find_items').css({\n                \"background-color\": \"#FFF\"\n            })\n        }\n    });\n\n\n    function showItemEditForm(selectedFolderId) {\n        if (debugJavascript === true) console.info('SHOW EDIT ITEM ' + selectedFolderId);\n        \n        //$.when(\n        //    getPrivilegesOnItem(selectedFolderId, 0)\n        //).then(function() {\n        // Now read\n        if (store.get('teampassItem').error === true) {\n            toastr.remove();\n            toastr.error(\n                store.get('teampassItem').message,\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        } else {\n            $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n            $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n            // Show edition form\n            $('.form-item, #form-item-attachments-zone')\n                .removeClass('hidden');\n            $('.item-details-card, .form-item-copy, #form-item-password-options, .form-item-action, #item-details-card-categories, #folders-tree-card, .columns-position')\n                .addClass('hidden');\n\n            // Initial 'user did a change'\n            userDidAChange = false;\n\n            // Force update of simplepassmeter\n            $('#form-item-password').pwstrength(\"forceUpdate\");\n            $('#form-item-label').focus();\n\n            // Set type of action\n            $('#form-item-button-save').data('action', 'update_item');\n\n            // Does this folder contain Custom Fields\n            if (store.get('teampassItem').hasCustomCategories.length > 0) {\n                $('#form-item-field').removeClass('hidden');\n                $.each(store.get('teampassItem').hasCustomCategories, function(i, category) {\n                    $('#form-item-category-' + category).removeClass('hidden');\n                })\n            } else {\n                $('#form-item-field, .form-item-category').addClass('hidden');\n            }            \n\n            // is user allowed to edit this item - overpass readonly folder\n            if (typeof store.get('teampassApplication').itemsList !== 'undefined') {\n                var itemsList = JSON.parse(store.get('teampassApplication').itemsList);\n                userItemRight = itemsList[store.get('teampassItem').id]?.rights;\n                if (userItemRight && userItemRight > 40 && $('#form-item-folder option:selected').attr('disabled') === 'disabled') {\n                    $('#form-item-folder option:selected').removeAttr('disabled');\n                }\n            }\n\n            toastr.remove();\n            // ---\n        }\n        //});\n    }\n\n\n    /**\n     * Start items search\n     */\n    function searchItems(criteria) {\n        if (criteria !== '') {\n            // stop items loading (if on-going)\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 1;\n                }\n            );\n\n            // wait\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('searching'); ?>'\n            );\n\n            // clean\n            $('#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs, .fields_div, .fields, #item_extra_info').html('');\n            $('#button_quick_login_copy, #button_quick_pw_copy').addClass('hidden');\n            $('#teampass_items_list').html('');\n\n            // Continu the list of results\n            finishingItemsFind(\n                'search_for_items',\n                $('#limited-search').is(\":checked\") === true ? store.get('teampassApplication').selectedFolder : false,\n                criteria,\n                0\n            );\n        }\n    }\n\n    /**\n     * \n     */\n    function finishingItemsFind(type, limited, criteria, start) {\n        // send query\n        $.get(\n            'sources/find.queries.php', {\n                type: type,\n                limited: limited,\n                search: criteria,\n                start: start,\n                length: 10,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                var pwd_error = '',\n                    icon_login,\n                    incon_link,\n                    icon_pwd,\n                    icon_favorite;\n\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'find.queries.php', type);\n                if (debugJavascript === true) console.log(data);\n\n                // Ensure correct div is not hidden\n                $('#info_teampass_items_list').addClass('hidden');\n                $('#table_teampass_items_list').removeClass('hidden');\n\n                // Show Items list\n                sList(data.html_json);\n\n                if (data.start !== -1 && (data.start <= data.total)) {\n                    // Continu the list of results\n                    finishingItemsFind(\n                        'search_for_items',\n                        $('#limited-search').is(\":checked\") === true ?\n                        store.get('teampassApplication').selectedFolder : false,\n                        criteria,\n                        data.start\n                    )\n                } else {\n                    toastr.remove();\n                    toastr.info(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    // Do some post treatments\n                    $('#form-folder-path').html('');\n                    $('#find_items').val('');\n\n                    // Do drag'n'drop for the folders\n                    prepareFolderDragNDrop();\n\n                    adjustElemsSize();\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function refreshVisibleFolders(forceRefreshCache = false) {\n        var data = {\n            'force_refresh_cache': forceRefreshCache,\n        }\n        if (debugJavascript === true) {\n            console.log('Refresh visible folders');\n            console.log(data);\n        }\n\n        $.post(\n            'sources/items.queries.php', {\n                type: 'refresh_visible_folders',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'refresh_visible_folders');\n                if (debugJavascript === true) {\n                    console.log('TREE');\n                    console.log(data);\n                }\n                //check if format error\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Build html lists\n                    var html_visible = '',\n                        html_full_visible = '',\n                        html_active_visible = '',\n                        indentation = '',\n                        disabled = '';\n\n                    if (typeof data.html_json === 'undefined' || typeof data.html_json.folders === 'undefined') {\n                        $('#jstree').html('<div class=\"alert alert-warning mt-3 mr-1 ml-1\"><i class=\"fas fa-exclamation-triangle mr-2\"></i>' +\n                            '<?php echo langHdl('no_data_to_display'); ?>' +\n                            '</div>');\n                        //return false;\n                    } else {\n                        refreshFoldersInfo(data.html_json.folders, 'clear');\n                    }\n\n                    // Shall we show the root folder\n                    if (data.html_json.can_create_root_folder === 1) {\n                        html_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                        html_full_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                        html_active_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                    } else {\n                        html_visible = '<option value=\"0\" disabled=\"disabled\"><?php echo langHdl('root'); ?></option>';\n                    }\n\n                    //\n                    $.each(data.html_json.folders, function(i, value) {\n                        // Prepare options lists\n                        html_visible += '<option value=\"' + value.id + '\"' +\n                            ((value.disabled === 1) ? ' disabled=\"disabled\"' : '') +\n                            ' data-parent-id=\"' + value.parent_id + '\">' +\n                            '&nbsp;'.repeat(value.level) +\n                            value.title + (value.path !== '' ? ' [' + value.path + ']' : '') + '</option>';\n                    });\n\n                    // Append new list\n                    $('#form-item-folder, #form-item-copy-destination, #form-folder-add-parent,' +\n                            '#form-folder-delete-selection, #form-folder-copy-source, #form-folder-copy-destination')\n                        .find('option')\n                        .remove()\n                        .end()\n                        .append(html_visible);\n                    $(\".no-root option[value='0']\").remove();\n\n                    if (debugJavascript === true) {\n                        console.info('HTML VISIBLE:')\n                        console.log(html_visible);\n                    }\n\n                    // Store in teampassUser\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.folders = html_visible;\n                        }\n                    );\n\n\n                    // remove ROOT option if exists\n                    $('#form-item-copy-destination option[value=\"0\"]').remove();\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Get more info about folders (Categories)\n     *\n     * @return void\n     */\n    function refreshFoldersInfo(folders, action) {\n        var action = action || '',\n            sending = '';\n\n        if (null === folders) return false;\n\n        if (action === 'clear') {\n            sending = JSON.stringify(folders.map(a => parseInt(a.id)));\n        } else if (action === 'update') {\n            sending = JSON.stringify([folders]);\n        }\n\n        if (debugJavascript === true) {\n            console.info('INPUTS for refresh_folders_other_info');\n            console.log(sending);\n        }\n        \n        $.post(\n            'sources/items.queries.php', {\n                type: 'refresh_folders_other_info',\n                data: sending,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'refresh_folders_other_info');\n                if (debugJavascript === true) {\n                    console.info('RESULTS for refresh_folders_other_info');\n                    console.log(data);\n                }\n\n                //check if format error\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Store in session\n                    if (action === 'clear') {\n                        // Handle the data\n                        $.each(folders, function(index, item) {\n                            if (typeof data.result !== 'undefined' && typeof data.result[item.id] !== 'undefined') {\n                                folders[index]['categories'] = data.result[item.id].categories;\n                                folders[index]['complexity'] = data.result[item.id].complexity;\n                                folders[index]['visibilityRoles'] = data.result[item.id].visibilityRoles;\n                            }\n                        });\n                        // Stare the data\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.foldersList = folders;\n                            }\n                        );\n                    } else if (action === 'update') {\n                        // Store the data\n                        var currentFoldersList = store.get('teampassApplication').foldersList;\n                        $.each(currentFoldersList, function(index, item) {\n                            if (item.id === parseInt(folders) && typeof data.result[folders] !== 'undefined') {\n                                currentFoldersList[index].categories = data.result[folders].categories;\n                                currentFoldersList[index].complexity = data.result[folders].complexity;\n                                currentFoldersList[index].visibilityRoles = data.result[folders].visibilityRoles;\n\n                                store.update(\n                                    'teampassApplication',\n                                    function(teampassApplication) {\n                                        foldersList = currentFoldersList;\n                                    }\n                                );\n                                return true;\n                            }\n                        });\n\n                    }\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n                toastr.remove();\n            }\n        );\n    }\n\n\n    /*\n     * builds the folders tree\n     */\n    function refreshTree(node_to_select, do_refresh, refresh_visible_folders) {\n        do_refresh = do_refresh || ''\n        node_to_select = node_to_select || '';\n        refresh_visible_folders = refresh_visible_folders || true;\n\n        if (refresh_visible_folders !== true) {\n            $('#jstree').jstree('deselect_all');\n            $('#jstree').jstree('select_node', '#li_' + groupe_id);\n            return false;\n        }\n\n        if (do_refresh === true || store.get('teampassApplication').jstreeForceRefresh === 1) {\n            $('#jstree').jstree(true).refresh();\n        }\n\n        if (node_to_select !== '') {\n            $('#jstree').jstree('deselect_all');\n\n            $('#jstree')\n                .one('refresh.jstree', function(e, data) {\n                    data.instance.select_node('#li_' + node_to_select);\n                });\n        }\n\n        $(this).delay(500).queue(function() {\n            refreshVisibleFolders(true);\n            $(this).dequeue();\n        });\n    }\n\n    /**\n     * \n     */\n    function ListerItems(groupe_id, restricted, start, stop_listing_current_folder) {\n        var me = $(this);\n        stop_listing_current_folder = stop_listing_current_folder || '0';\n        if (debugJavascript === true) console.log('LIST OF ITEMS FOR FOLDER ' + groupe_id)\n        // Exit if no folder is selected\n        if (groupe_id === undefined) return false;\n\n        // case where we should stop listing the items\n        if (store.get('teampassApplication') !== undefined && store.get('teampassApplication').itemsListStop === 1) {\n            //requestRunning = false;\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0;\n                }\n            );\n        }\n\n        //Evaluate number of items to display - depends on screen height\n        //adapt to the screen height\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.itemsShownByQuery = Math.max(Math.round((screenHeight - 450) / 23), 2);\n            }\n        );\n\n        if (stop_listing_current_folder === 1) {\n            me.data('requestRunning', false);\n            // Store listing criteria\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListFolderId = parseInt(groupe_id),\n                        teampassApplication.itemsListRestricted = restricted,\n                        teampassApplication.itemsListStart = start,\n                        teampassApplication.itemsListStop = 0\n                }\n            );\n        } else {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0\n                }\n            );\n        }\n\n\n        // prevent launch of similar query in case of doubleclick\n        if (requestRunning === true) {\n            return false;\n        }\n        requestRunning = true;\n\n        // Hide any info\n        $('#info_teampass_items_list').addClass('hidden');\n\n        if (groupe_id !== undefined || groupe_id !== '') {\n            //refreshTree(groupe_id);\n            if (query_in_progress != 0 && query_in_progress != groupe_id && request !== undefined) {\n                request.abort(); //kill previous query if needed\n            }\n            query_in_progress = groupe_id;\n            if (start == 0) {\n                //clean form\n                $('#teampass_items_list, #items_folder_path').html('');\n            }\n\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.selectedFolder = parseInt(groupe_id),\n                    teampassApplication.itemsList = ''\n                }\n            );\n\n            if ($('.tr_fields') !== undefined) {\n                $('.tr_fields, .newItemCat, .editItemCat').addClass('hidden');\n            }\n\n            // Inform user\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('opening_folder'); ?><i class=\"fas fa-circle-notch fa-spin ml-2\"></i>'\n            );\n\n            // clear storage \n            store.update(\n                'teampassUser',\n                function(teampassUser) {\n                    teampassUser.itemsList = '';\n                }\n            );\n\n            // Prepare data to be sent\n            var dataArray = {\n                id: store.get('teampassApplication').selectedFolder,\n                restricted: restricted === \"\" ? \"\" : restricted,\n                start: start !== undefined ? start : 0,\n                uniqueLoadData: store.get('teampassApplication').queryUniqueLoad !== undefined ? store.get('teampassApplication').queryUniqueLoad : \"\",\n                nb_items_to_display_once: store.get('teampassApplication').itemsShownByQuery,\n            };\n\n            if (debugJavascript === true) {\n                console.log('Do list of items in folder with next parameters:');\n                console.log(JSON.stringify(dataArray));\n            }\n            \n            //ajax query\n            var request = $.post('sources/items.queries.php', {\n                    type: 'do_items_list_in_folder',\n                    data: prepareExchangedData(JSON.stringify(dataArray), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>',\n                },\n                function(retData) {\n                    //get data\n                    data = decodeQueryReturn(retData, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'do_items_list_in_folder');\n\n                    if (debugJavascript === true) {\n                        console.log('LIST ITEMS');\n                        console.log(data);\n                    }\n\n                    // reset doubleclick prevention\n                    requestRunning = false;\n\n                    // manage not allowed\n                    if (data.error === true) {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        return false;\n                    }\n\n                    // Hide New button if restricted folder\n                    if (data.access_level === 10) {\n                        $('#btn-new-item').addClass('hidden');\n                    } else {\n                        $('#btn-new-item').removeClass('hidden');\n                    }\n\n                    // to be done only in 1st list load\n                    if (data.list_to_be_continued === 'end') {\n                        var initialQueryData = $.parseJSON(data.uniqueLoadData);\n\n                        // Update hidden variables\n                        store.update(\n                            'teampassItem',\n                            function(teampassItem) {\n                                teampassItem.IsPersonalFolder = parseInt(data.IsPersonalFolder),\n                                    teampassItem.hasAccessLevel = parseInt(data.access_level),\n                                    teampassItem.folderComplexity = parseInt(data.folder_complexity),\n                                    teampassItem.hasCustomCategories = data.categoriesStructure\n                            }\n                        );\n                        \n\n                        // display path of folders\n                        if ((initialQueryData.path.length > 0)) {\n                            $('#form-folder-path')\n                                .html('')\n                                .append(rebuildPath(initialQueryData.path));\n                        } else {\n                            $('#form-folder-path').html('');\n                        }\n\n                        /*\n                        // PSK is requested but not set\n                        if (data.folder_requests_psk === 1\n                            && (store.get('teampassUser').pskSetForSession === ''\n                            || store.get('teampassUser').pskSetForSession === undefined)\n                        ) {\n                            showPersonalSKDialog();\n                        }\n                        */\n\n                        // show correct fodler in Tree\n                        if ($('#jstree').jstree('get_selected', true)[0] !== undefined &&\n                            'li_' + groupe_id !== $('#jstree').jstree('get_selected', true)[0].id\n                        ) {\n                            $('#jstree').jstree('deselect_all');\n                            $('#jstree').jstree('select_node', '#li_' + groupe_id);\n                        }\n\n                        // Delete existing clipboard\n                        if (clipboardForPassword) {\n                            clipboardForPassword.destroy();\n                        }\n                        if (clipboardForLogin) {\n                            clipboardForLogin.destroy();\n                        }\n\n                        // Prepare clipboard items\n                        clipboardForLogin = new ClipboardJS('.fa-clickable-login');\n                        clipboardForLogin.on('success', function(e) {\n                            toastr.info(\n                                '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                '', {\n                                    timeOut: 2000,\n                                    positionClass: 'toast-top-right',\n                                    progressBar: true\n                                }\n                            );\n                            e.clearSelection();\n                        });\n\n                        // Prepare clipboard for PAssword\n                        // This will request a query to server to get the pwd\n                        clipboardForPassword = new ClipboardJS('.fa-clickable-password', {\n                            text: function(trigger) {\n                                // Send query and get password\n                                var result = '',\n                                    error = false;\n\n                                // Warn user that it starts\n                                toastr.remove();\n                                toastr.info(\n                                    '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>'\n                                );\n\n                                $.ajax({\n                                    type: \"POST\",\n                                    async: false,\n                                    url: 'sources/items.queries.php',\n                                    data: 'type=show_item_password&item_id=' + trigger.getAttribute('data-item-id') +\n                                        '&key=<?php echo $_SESSION['key']; ?>',\n                                    dataType: \"\",\n                                    success: function(data) {\n                                        //decrypt data\n                                        try {\n                                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                                        } catch (e) {\n                                            // error\n                                            toastr.remove();\n                                            toastr.warning(\n                                                '<?php echo langHdl('no_item_to_display'); ?>'\n                                            );\n                                            return false;\n                                        }\n                                        if (data.error === true) {\n                                            error = true;\n                                        } else {\n                                            if (data.password_error !== '') {\n                                                error = true;\n                                            } else {\n                                                result = atob(data.password).utf8Decode();\n                                            }\n                                        }\n\n                                        // Remove cog\n                                        toastr.remove();\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                        clipboardForPassword.on('success', function(e) {\n                            itemLog(\n                                'at_password_copied',\n                                e.trigger.dataset.itemId,\n                                e.trigger.dataset.itemLabel\n                            );\n                            \n                            // Warn user about clipboard clear\n                            if (store.get('teampassSettings').clipboard_life_duration === undefined || parseInt(store.get('teampassSettings').clipboard_life_duration) === 0) {\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        positionClass: 'toast-top-right',\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                toastr.remove();\n                                toastr.warning(\n                                    '<?php echo langHdl('clipboard_will_be_cleared'); ?>',\n                                    '', {\n                                        timeOut: store.get('teampassSettings').clipboard_life_duration * 1000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Set clipboard eraser\n                                clearClipboardTimeout(\n                                    store.get('teampassSettings').clipboard_life_duration\n                                );\n                            }\n\n                            e.clearSelection();\n                        });\n                    } else if (data.error === 'not_authorized') {\n                        $('#items_folder_path').html('<i class=\"fas fa-folder-open-o\"></i>&nbsp;' + rebuildPath(data.arborescence));\n                    } else {\n                        // Store query results\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.queryUniqueLoad = data.uniqueLoadData;\n                            }\n                        );\n                        if ($('#items_loading_progress').length == 0) {\n                            $('#items_list_loader').after('<span id=\"items_loading_progress\">' + Math.round(data.next_start * 100 / data.counter_full, 0) + '%</span>');\n                        } else {\n                            $('#items_loading_progress').html(Math.round(data.next_start * 100 / data.counter_full, 0) + '%');\n                        }\n                    }\n                    //-----\n                    if (data.array_items !== undefined &&\n                        data.array_items.length === 0 &&\n                        $('#teampass_items_list').html() === ''\n                    ) {\n                        // Show warning to user\n                        $('#info_teampass_items_list')\n                            .html('<div class=\"alert alert-info text-center col col-10\" role=\"alert\">' +\n                                '<i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('no_item_to_display'); ?></b>' +\n                                '</div>')\n                            .removeClass('hidden');\n                    }\n\n                    if (data.error === 'is_pf_but_no_saltkey') {\n                        //warn user about his saltkey\n                        toastr.remove();\n                        toastr.warning(\n                            '<?php echo langHdl('home_personal_saltkey_label'); ?>',\n                            '', {\n                                timeOut: 10000\n                            }\n                        );\n                        return false;\n                    } else if (data.error === 'not_authorized' || data.access_level === '') {\n                        // Show warning to user\n                        $('#info_teampass_items_list')\n                            .html('<div class=\"alert alert-info text-center col col-lg-10\" role=\"alert\">' +\n                                '<i class=\"fas fa-warning mr-2\"></i><?php echo langHdl('not_allowed_to_see_pw'); ?></b>' +\n                                '</div>')\n                            .removeClass('hidden');\n\n                    } else if ((store.get('teampassApplication').userIsReadOnly === 1) //&& data.folder_requests_psk == 0\n                        ||\n                        data.access_level === 10\n                    ) {\n                        //readonly user\n                        $('#item_details_no_personal_saltkey, #item_details_nok').addClass('hidden');\n                        $('#item_details_ok, #items_list').removeClass('hidden');\n                        //$('#more_items').remove();\n\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.bypassComplexityOnCreation = parseInt(data.bloquer_creation_complexite);\n                                teampassApplication.bypassComplexityOnEdition = parseInt(data.bloquer_modification_complexite);\n                                //teampassApplication.personalSaltkeyRequired = parseInt(data.saltkey_is_required);\n                            }\n                        );\n\n                        // show items\n                        sList(data.html_json);\n\n                        if (data.list_to_be_continued === 'yes') {\n                            //set next start for query\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = parseInt(data.next_start);\n                                }\n                            );\n                        } else {\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = data.list_to_be_continued;\n                                }\n                            );\n                            $('.card-item-category').addClass('hidden');\n                        }\n\n                        proceed_list_update(stop_listing_current_folder);\n                    } else {\n                        //Display items\n                        $('#item_details_no_personal_saltkey, #item_details_nok').addClass('hidden');\n                        $('#item_details_ok, #items_list').removeClass('hidden');\n\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.bypassComplexityOnCreation = parseInt(data.bloquer_creation_complexite);\n                                teampassApplication.bypassComplexityOnEdition = parseInt(data.bloquer_modification_complexite);\n                                //teampassApplication.personalSaltkeyRequired = parseInt(data.saltkey_is_required);\n                            }\n                        );\n\n                        // show items\n                        sList(data.html_json);\n\n                        // Prepare next iteration if needed\n                        if (data.list_to_be_continued === 'yes') {\n                            //set next start for query\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = parseInt(data.next_start);\n                                }\n                            );\n                        } else {\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = data.list_to_be_continued;\n                                }\n                            );\n                            $('.card-item-category').addClass('hidden');\n\n                            if (debugJavascript === true) {\n                                console.log('Liste complete des items')\n                                console.log(JSON.parse(store.get('teampassApplication').itemsList));\n                            }\n                        }\n\n                        proceed_list_update(stop_listing_current_folder);\n                    }\n                }\n            );\n        }\n    }\n\n    function sList(listOfItems) {\n        if (debugJavascript === true) {\n            console.log(listOfItems);\n        }\n        var counter = 0,\n            prevIdForNextItem = -1;\n\n        // Manage store\n        if (store.get('teampassApplication').itemsList === '' || store.get('teampassApplication').itemsList === undefined) {\n            var stored_datas = listOfItems;\n        } else {\n            var stored_datas = String(JSON.parse(store.get('teampassApplication').itemsList)).concat(listOfItems);\n        }\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.itemsList = JSON.stringify(stored_datas);\n            }\n        );\n        \n        $.each(listOfItems, function(i, value) {\n            var new_line = '',\n                pwd_error = '',\n                icon_all_can_modify = '',\n                icon_cannot_see = '',\n                icon_login = '',\n                icon_link = '',\n                icon_pwd = '',\n                icon_favorite = '',\n                item_flag = '',\n                item_grippy = '',\n                visible_by_user = '';\n\n            counter += 1;\n\n            // ENsure numbers are ints\n            value.anyone_can_modify = parseInt(value.anyone_can_modify);\n            value.canMove = parseInt(value.canMove);\n            value.expired = parseInt(value.expired);\n            value.is_favorite = parseInt(value.is_favorite);\n            value.is_result_of_search = parseInt(value.is_result_of_search);\n            value.item_id = parseInt(value.item_id);\n            value.open_edit = parseInt(value.open_edit);\n            value.rights = parseInt(value.rights);\n            value.tree_id = parseInt(value.tree_id);\n            value.display = parseInt(value.display);\n            value.display_item = parseInt(value.display_item);\n            value.enable_favourites = parseInt(value.enable_favourites);\n\n            // Check access restriction\n            if (value.rights > 0) {\n                // Should I populate previous item with this new id\n                if (debugJavascript === true) {\n                    console.log('current id: '+value.item_id);\n                    console.log(prevIdForNextItem);\n                }\n                if (prevIdForNextItem !== -1) {\n                    $('#list-item-row_' + value.item_id).attr('data-next-item-id', prevIdForNextItem.item_id);\n                    $('#list-item-row_' + value.item_id).attr('data-next-item-label', value.label);\n                }\n                \n                // Prepare anyone can modify icon\n                if (value.anyone_can_modify === 1 || value.open_edit === 1) {\n                    icon_all_can_modify = '<span class=\"fa-stack fa-clickable pointer infotip list-item-clicktoedit mr-2\" title=\"<?php echo langHdl('edit'); ?>\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-pen fa-stack-1x fa-inverse\"></i></span>';\n                }\n\n                // Prepare mini icons\n                if (store.get('teampassSettings') !== undefined && parseInt(store.get('teampassSettings').copy_to_clipboard_small_icons) === 1 &&\n                    value.rights > 10\n                ) {\n                    // Login icon\n                    if (value.login !== '') {\n                        icon_login = '<span class=\"fa-stack fa-clickable fa-clickable-login pointer infotip mr-2\" title=\"<?php echo langHdl('item_menu_copy_login'); ?>\" data-clipboard-text=\"' + sanitizeString(value.login) + '\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-user fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                    // Pwd icon\n                    if (value.pw_status !== 'pw_is_empty' && value.pw_status !== 'encryption_error') {\n                        icon_pwd = '<span class=\"fa-stack fa-clickable fa-clickable-password pointer infotip mr-2\" title=\"<?php echo langHdl('item_menu_copy_pw'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-label=\"' + value.label + '\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-key fa-stack-1x fa-inverse\"></i></span>';\n                    }\n\n                    // Now check if pwd is empty. If it is then warn user\n                    if (value.pw_status === 'pw_is_empty') {\n                        pwd_error = '<span class=\"fa-stack fa-clickable fa-clickable-password pointer infotip mr-2\" title=\"<?php echo langHdl('password_is_empty'); ?>\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-exclamation-triangle text-warning fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                }\n\n                // Link icon\n                if (value.link !== '') {\n                    icon_link = '<span class=\"fa-stack fa-clickable pointer infotip mr-2\" title=\"<?php echo langHdl('open_website'); ?>\"><a href=\"' + sanitizeString(value.link) + '\" target=\"_blank\" class=\"no-link\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-link fa-stack-1x fa-inverse\"></i></a></span>';\n                }\n\n                // Prepare Favorite icon\n                if (store.get('teampassSettings') !== undefined && parseInt(store.get('teampassSettings').enable_favourites) === 1 &&\n                    value.rights > 10\n                ) {\n                    if (value.is_favourited === 1) {\n                        icon_favorite = '<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('unfavorite'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-favourited=\"1\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse text-warning\"></i></span>';\n                    } else {\n                        icon_favorite = '<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('favorite'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-favourited=\"0\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"far fa-star fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                }\n\n                // Prepare Description\n                if (value.desc !== '') {\n                    value.desc = ' <span class=\"text-secondary small\">- ' + value.desc + '</span>';\n                }\n\n                $('#teampass_items_list').append(\n                    '<tr class=\"list-item-row' + (value.canMove === 1 ? ' is-draggable' : '') + '\" id=\"list-item-row_' + value.item_id + '\" data-item-edition=\"' + value.open_edit + '\" data-item-id=\"' + value.item_id + '\" data-item-sk=\"' + value.sk + '\" data-item-expired=\"' + value.expired + '\" data-item-rights=\"' + value.rights + '\" data-item-display=\"' + value.display + '\" data-item-open-edit=\"' + value.open_edit + '\" data-item-tree-id=\"' + value.tree_id + '\" data-is-search-result=\"' + value.is_result_of_search + '\" data-label=\"' + escape(value.label) + '\">' +\n                    '<td class=\"list-item-description\" style=\"width: 100%;\">' +\n                    // Show user a grippy bar to move item\n                    (value.canMove === 1  ? '<i class=\"fas fa-ellipsis-v mr-2 dragndrop\"></i>' : '') + //&& value.is_result_of_search === 0\n                    // Show user a ban icon if expired\n                    (value.expired === 1 ? '<i class=\"far fa-calendar-times mr-2 text-warning infotip\" title=\"<?php echo langHdl('not_allowed_to_see_pw_is_expired'); ?>\"></i>' : '') +\n                    // Show user that Item is not accessible\n                    (value.rights === 10 ? '<i class=\"far fa-eye-slash fa-xs mr-2 text-primary infotip\" title=\"<?php echo langHdl('item_with_restricted_access'); ?>\"></i>' : '') +\n                    // Show user that password is badly encrypted\n                    (value.pw_status === 'encryption_error' ? '<i class=\"fas fa-exclamation-triangle fa-xs text-danger infotip mr-1\" title=\"<?php echo langHdl('pw_encryption_error'); ?>\"></i>' : '') +\n                    // Show item fa_icon if set\n                    (value.fa_icon !== '' ? '<i class=\"'+value.fa_icon+' mr-1\"></i>' : '') +\n                    // Prepare item info\n                    '<span class=\"list-item-clicktoshow' + (value.rights === 10 ? '' : ' pointer') + '\" data-item-id=\"' + value.item_id + '\">' +\n                    '<span class=\"list-item-row-description' + (value.rights === 10 ? ' font-weight-light' : '') + '\">' + value.label + '</span>' + (value.rights === 10 ? '' : value.desc) + '</span>' +\n                    '<span class=\"list-item-actions hidden\">' +\n                    (value.rights === 10 ?\n                        '<span class=\"fa-stack fa-clickable fa-clickable-access-request pointer infotip mr-2\" title=\"<?php echo langHdl('need_access'); ?>\"><i class=\"fas fa-circle fa-stack-2x text-danger\"></i><i class=\"far fa-handshake fa-stack-1x fa-inverse\"></i></span>' :\n                        pwd_error + icon_all_can_modify + icon_login + icon_pwd + icon_link + icon_favorite) +\n                    '</span>' +\n                    (value.folder !== undefined ?\n                        '<br><span class=\"text-secondary small font-italic pointer open-folder\" data-tree-id=\"' +\n                        value.tree_id + '\"\">[' + value.folder + ']</span>' : '') +\n                    '</td>' +\n                    '</tr>'\n                );\n\n                // Save id for usage\n                prevIdForNextItem = {\n                    'item_id' : value.item_id,\n                    'label': value.label,\n                };\n\n                //---------------------\n            }\n        });\n\n        // Sort entries\n        var $tbody = $('#teampass_items_list');\n        $tbody.find('tr').sort(function(a, b) {\n            var tda = $(a).find('.list-item-row-description').text();\n            var tdb = $(b).find('.list-item-row-description').text();\n            // if a < b return 1\n            return tda > tdb ? 1 :\n                tda < tdb ? -1 :\n                0;\n        }).appendTo($tbody);\n\n        // Trick for list with only one entry\n        if (counter === 1) {\n            $('#teampass_items_list')\n                .append('<tr class=\"row\"><td class=\"\">&nbsp;</td></tr>');\n        }\n        adjustElemsSize();\n\n        // Show tooltips\n        $('.infotip').tooltip();\n    }\n\n    $(document).on('click', '.open-folder', function() {\n        if ($(this).data('tree-id') !== undefined) {\n            if (debugJavascript === true) console.log($(this).data('tree-id'))\n\n            // Prepare\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListFolderId = parseInt($(this).data('tree-id'));\n                }\n            );\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.selectedFolder = parseInt($(this).data('tree-id'));\n                }\n            );\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStart = 0;\n                }\n            );\n\n            // Show\n            ListerItems(\n                $(this).data('tree-id'),\n                '',\n                0\n            );\n\n            $('#jstree').jstree('deselect_all');\n            $('#jstree').jstree('select_node', '#li_' + $(this).data('tree-id'));\n        }\n    });\n\n\n    function adjustElemsSize() {\n        // Adjust height of folders tree\n        if ($('#teampass_items_list').height() > (screenHeight - 215)) {\n            $('#jstree').height($('#teampass_items_list').height() + 75);\n        } else {\n            $('#jstree').height($(window).height() - 215);\n        }\n    }\n\n    /**\n     * Builds the HTML path\n     * @param  {[type]} data [description]\n     * @return {[type]}      [description]\n     */\n    function rebuildPath(data) {\n        var new_path = new_path_elem = '';\n        $.each((data), function(i, value) {\n            new_path_elem = '';\n            if (value['visible'] === 1) {\n                new_path_elem = ' class=\"pointer\" onclick=\"ListerItems(' + value['id'] + ', \\'\\', 0)\"';\n            }\n\n            new_path += '<li class=\"breadcrumb-item\" id=\"path_elem_' + value['id'] + '\"' + new_path_elem + '>' + value['title'] + '</li>';\n        });\n\n        return new_path;\n    }\n\n    /**\n\n     */\n    function proceed_list_update(stop_proceeding) {\n        stop_proceeding = stop_proceeding || '';\n\n        if (stop_proceeding === '1' ||\n            (store.get('teampassApplication').itemsListFolderId !== '' &&\n                store.get('teampassApplication').itemsListStart !== 'end')\n        ) {\n            // Clear storage\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0;\n                }\n            );\n            // Perform listing\n            ListerItems(\n                store.get('teampassApplication').itemsListFolderId,\n                store.get('teampassApplication').itemsListRestricted,\n                store.get('teampassApplication').itemsListStart,\n                store.get('teampassApplication').itemsListStop\n            );\n            return false;\n        }\n\n        if (store.get('teampassApplication').itemsListStart !== 'end') {\n            //Check if nb of items do display > to 0\n            if (store.get('teampassApplication').itemsShownByQuery > 0) {\n                ListerItems(\n                    store.get('teampassApplication').selectedFolder,\n                    '',\n                    store.get('teampassApplication').itemsListStart\n                );\n            }\n        } else {\n            // Show tooltips\n            $('.infotip').tooltip();\n\n            // Update silently the info about the folder\n            refreshFoldersInfo(\n                store.get('teampassApplication').selectedFolder,\n                'update'\n            );\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('data_refreshed'); ?>',\n                '', {\n                    timeOut: 1000\n                }\n            );\n\n            // Do drag'n'drop for the folders\n            prepareFolderDragNDrop();\n        }\n    }\n\n\n    function checkAccess(itemId, treeId, userId)\n    {\n        var data = {\n            'itemId': parseInt(itemId),\n            'treeId': parseInt(treeId),\n            'userId': parseInt(userId),\n        };\n\n        //Send query\n        $.post(\n            'sources/items.queries.php', {\n                type: 'check_current_access_rights',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'show_details_item');\n                requestRunning = true;\n                if (debugJavascript === true) {\n                    console.log(\"DEBUG: checkAccess\");\n                    console.log(data);\n                }\n\n\n                return false;\n            }\n        );\n    }\n\n\n    /**\n     *\n     */\n    function Details(itemDefinition, actionType, hotlink = false) {\n        if (debugJavascript === true) console.info('EXPECTED ACTION on ' + itemDefinition + ' is ' + actionType + ' -- ')\n\n        // Init\n        if (hotlink === false) {\n            var itemId = parseInt($(itemDefinition).data('item-id')) || '';\n            var itemTreeId = parseInt($(itemDefinition).data('item-tree-id')) || '';\n            var itemSk = parseInt($(itemDefinition).data('item-sk')) || 0;\n            var itemExpired = parseInt($(itemDefinition).data('item-expired')) || '';\n            var itemRestricted = parseInt($(itemDefinition).data('item-restricted-id')) || '';\n            var itemDisplay = parseInt($(itemDefinition).data('item-display')) || 0;\n            var itemOpenEdit = parseInt($(itemDefinition).data('item-open-edit')) || 0;\n            var itemReload = parseInt($(itemDefinition).data('item-reload')) || 0;\n            var itemRights = parseInt($(itemDefinition).data('item-rights')) || 10;\n        } else {\n            var itemId = itemDefinition || '';\n            var itemTreeId = store.get('teampassApplication').selectedFolder || '';\n            var itemSk = 0;\n            var itemExpired = '';\n            var itemRestricted = '';\n            var itemDisplay = 1;\n            var itemOpenEdit = 0;\n            var itemReload = 0;\n            var itemRights = parseInt($(itemDefinition).data('item-rights')) || 10;\n        }\n\n        // check if user still has access\n        if (checkAccess(itemId, itemTreeId, <?php echo $_SESSION['user_id']; ?>) === false) {\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_item_to_display'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            // Finished\n            return false;\n        }\n\n        // Store current view\n        savePreviousView();\n        \n        if (debugJavascript === true) console.log(\"Request is running: \" + requestRunning)\n\n        // Store status query running\n        requestRunning = true;\n        userDidAChange = false;\n\n        // Select tab#1\n        $('#form-item-nav-pills li:first-child a').tab('show');\n\n        // Don't show details\n        if (itemDisplay === 'no_display') {\n            // Inform user\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_item_to_display'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            // Clear ongoing request status\n            requestRunning = false;\n\n            // Finished\n            return false;\n        }\n\n        // If opening new item, reinit hidden fields\n        if (store.get('teampassApplication').lastItemSeen !== itemId) {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.lastItemSeen = parseInt(itemId);\n                }\n            );\n            if (debugJavascript === true) console.log(\"Last seen item \" + store.get('teampassApplication').lastItemSeen)\n        }\n\n        // Prepare data to be sent\n        var data = {\n            'id': parseInt(itemId),\n            'folder_id': parseInt(itemTreeId),\n            'salt_key_required': itemSk,\n            'expired_item': itemExpired,\n            'restricted': itemRestricted,\n            'folder_access_level': store.get('teampassItem').hasAccessLevel,\n            'page': 'items',\n            'rights': itemRights,\n        };\n\n        if (debugJavascript === true) console.log(\"SEND\");\n        if (debugJavascript === true) console.log(data);\n\n        //Send query\n        $.post(\n            'sources/items.queries.php', {\n                type: 'show_details_item',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'show_details_item');\n                requestRunning = true;\n                if (debugJavascript === true) {\n                    console.log(\"RECEIVED object details\");\n                    console.log(data);\n                }\n\n                // Store not a new item\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 0\n                    }\n                );\n\n                // remove any track-change class on item form\n                //$('.form-item-control').removeClass('track-change');\n\n                if (data.error === true) {\n                    toastr.remove();\n                    requestRunning = false;\n\n                    // Manage personal items key error\n                    if (data.error_type !== 'undefined' && data.error_type === 'private_items_to_encrypt') {\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        store.update(\n                            'teampassUser', {},\n                            function(teampassUser) {\n                                teampassUser.special = 'private_items_to_encrypt';\n                            }\n                        );\n                        document.location.href = \"index.php?page=items\";\n                    } else if (data.error_type !== 'undefined' && data.error_type === 'user_should_reencrypt_private_key' && store.get('teampassUser').temporary_code === '') {\n                        // we have to ask the user to re-encrypt his privatekey\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 10000,\n                                progressBar: true\n                            }\n                        );\n                        \n                        if (debugJavascript === true) console.log('LDAP user password has to encrypt his private key with hos new LDAP password')\n                        // HIde\n                        $('.content-header, .content').addClass('hidden');\n\n                        // Show passwords inputs and form\n                        $('#dialog-ldap-user-change-password-info')\n                            .html('<i class=\"icon fas fa-info mr-2\"></i><?php echo langHdl('ldap_user_has_changed_his_password');?>')\n                            .removeClass('hidden');\n                        $('#dialog-ldap-user-change-password').removeClass('hidden');\n                    }\n\n\n                    return false;\n                } else if ((data.user_can_modify === 0 && actionType === 'edit') ||\n                    parseInt(data.show_details) === 0\n                ) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    requestRunning = false;\n                    return false;\n                }\n\n\n                // Store scroll position\n                userScrollPosition = $(window).scrollTop();\n\n                // Scroll to top\n                $(window).scrollTop(0);\n\n                // SHould we show?\n                if (parseInt(data.show_detail_option) === 1 || itemExpired === 1) {\n                    // SHow expiration alert\n                    $('#card-item-expired').removeClass('hidden');\n                } else if (parseInt(data.show_detail_option) === 2) {\n                    // Don't show anything\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('not_allowed_to_see_pw'); ?>',\n                        '<?php echo langHdl('warning'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    return false;\n                }\n\n                // Show header info\n                $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n                $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n                // Hide NEW button in case access_level < 30\n                if (store.get('teampassItem').hasAccessLevel === 10) {\n                    $('#item-form-new-button').addClass('hidden');\n                } else {\n                    $('#item-form-new-button').removeClass('hidden');\n                }\n\n                // Uncrypt the pwd\n                if (data.pw !== undefined) {\n                    data.pw = atob(data.pw).utf8Decode();\n                }\n\n                // Update hidden variables\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.id = parseInt(data.id),\n                            teampassItem.timestamp = data.timestamp,\n                            teampassItem.user_can_modify = data.user_can_modify,\n                            teampassItem.anyone_can_modify = data.anyone_can_modify,\n                            teampassItem.edit_item_salt_key = data.edit_item_salt_key,\n                            teampassItem.id_restricted_to = data.id_restricted_to,\n                            teampassItem.id_restricted_to_roles = data.id_restricted_to_roles,\n                            teampassItem.item_rights = itemRights\n                    }\n                );\n\n                // Prepare forms\n                $('#folders-tree-card, .columns-position').addClass('hidden');\n                if (actionType === 'show') {\n                    // Prepare Views\n                    $('.item-details-card, #item-details-card-categories').removeClass('hidden');\n                    $('.form-item').addClass('hidden');\n\n                    $('#form-item-suggestion-password').focus();\n                    // If Description empty then remove it\n                    if (data.description === '<p>&nbsp;</p>') {\n                        $('#card-item-description')\n                            .parents('.item-details-card')\n                            .addClass('hidden');\n                    } else {\n                        $('#card-item-description')\n                            .parents('.item-details-card')\n                            .removeClass('hidden');\n                    }\n                } else {\n                    $('.form-item').removeClass('hidden');\n                    $('.item-details-card, #item-details-card-categories').addClass('hidden');\n                }\n                $('#pwd-definition-size').val(data.pw.length);\n\n                // Prepare card\n                const itemIcon = (data.fa_icon !== \"\") ? '<i class=\"'+data.fa_icon+' mr-1\"></i>' : '';\n                $('#card-item-label, #form-item-title').html(itemIcon + data.label);\n                $('#form-item-label, #form-item-suggestion-label').val(data.label);\n                $('#card-item-description, #form-item-suggestion-description').html(data.description);\n                if (data.description === '') {\n                    $('#card-item-description').addClass('hidden');\n                } else {\n                    $('#card-item-description').removeClass('hidden');\n                }\n                $('#card-item-pwd').html('<?php echo $var['hidden_asterisk']; ?>');\n                $('#hidden-item-pwd, #form-item-suggestion-password').val(data.pw);\n                $('#form-item-password, #form-item-password-confirmation, #form-item-server-old-password').val(data.pw);\n                $('#card-item-login').html(data.login);\n                $('#form-item-login, #form-item-suggestion-login, #form-item-server-login').val(data.login);\n\n                $('#card-item-email').text(data.email);\n                $('#form-item-email, #form-item-suggestion-email').val(data.email);\n                $('#card-item-url').html(data.url);\n                $('#form-item-url, #form-item-suggestion-url').val($(data.url).text());\n                $('#form-item-restrictedToUsers').val(JSON.stringify(data.id_restricted_to));\n                $('#form-item-restrictedToRoles').val(JSON.stringify(data.id_restricted_to_roles));\n                $('#form-item-folder').val(data.folder);\n                $('#form-item-tags').val(data.tags.join(' '));\n                $('#form-item-icon').val(data.fa_icon);\n                $('#form-item-icon-show').html(itemIcon);\n\n                $('#form-item-password').pwstrength(\"forceUpdate\");\n                $('#form-item-label').focus();\n\n                // Editor for description field\n                if (debugJavascript === true) {console.log('>>>> create summernote');}\n                $('#form-item-description')\n                    .html(data.description)\n                    .summernote({\n                        toolbar: [\n                            ['style', ['style']],\n                            ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                            ['fontsize', ['fontsize']],\n                            ['color', ['color']],\n                            ['para', ['ul', 'ol', 'paragraph']],\n                            ['insert', ['link', 'picture']],\n                            //['height', ['height']],\n                            ['view', ['codeview']]\n                        ],\n                        codeviewFilter: true,\n                        codeviewIframeFilter: true,\n                        callbacks: {\n                            onChange: function(contents, $editable) {\n                                if (debugJavascript === true) console.log('Editor onChange:' + userDidAChange + \" - \" + requestRunning);\n                                if (userDidAChange === false && requestRunning === false) {\n                                    if (debugJavascript === true) console.log('onChange:', contents, $editable);\n                                    userDidAChange = true;\n                                    if (debugJavascript === true) console.log('User did a change on #form-item-description > ' + userDidAChange);\n                                    //$('#form-item-description').attr('data-change-ongoing', true);;\n                                }\n                            }\n                        }\n                    })\n                //.summernote('editor.insertText', data.description);\n\n                $('#form-item-suggestion-description')\n                    .html(data.description)\n                    .summernote({\n                        toolbar: [\n                            ['style', ['style']],\n                            ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                            ['fontsize', ['fontsize']],\n                            ['color', ['color']],\n                            ['para', ['ul', 'ol', 'paragraph']],\n                            ['insert', ['link', 'picture']],\n                            //['height', ['height']],\n                            ['view', ['codeview']]\n                        ],\n                        codeviewFilter: true,\n                        codeviewIframeFilter: true,\n                        callbacks: {\n                            onChange: function(contents, $editable) {\n                                if (userDidAChange === false && requestRunning === false) {\n                                    if (debugJavascript === true) console.log('onChange:', contents, $editable);\n                                    userDidAChange = true;\n                                    if (debugJavascript === true) console.log('User did a change on #form-item-suggestion-description > ' + userDidAChange);\n                                    //$('#form-item-suggestion-description').attr('data-change-ongoing', true);;\n                                }\n                            }\n                        }\n                    });\n\n\n                //prepare nice list of users / groups\n                var html_users = '',\n                    html_groups = '',\n                    html_tags = '',\n                    html_kbs = '';\n\n                $(data.tags).each(function(index, value) {\n                    html_tags += '<span class=\"badge badge-success pointer tip mr-2\" title=\"<?php echo langHdl('list_items_with_tag'); ?>\" onclick=\"searchItemsWithTags(\\'' + value + '\\')\"><i class=\"fas fa-tag fa-sm\"></i>&nbsp;<span class=\"item_tag\">' + value + '</span></span>';\n                });\n                if (html_tags === '') {\n                    $('#card-item-tags').html('<?php echo langHdl('none'); ?>');\n                } else {\n                    $('#card-item-tags').html(html_tags);\n                }\n\n                $(data.links_to_kbs).each(function(index, value) {\n                    html_kbs += '<a class=\"badge badge-primary pointer tip mr-2\" href=\"<?php echo $SETTINGS['cpassman_url']; ?>/index.php?page=kb&id=' + value['id'] + '\"><i class=\"fas fa-map-pin fa-sm\"></i>&nbsp;' + value['label'] + '</a>';\n\n                });\n                if (html_kbs === '') {\n                    $('#card-item-kbs').html('<?php echo langHdl('none'); ?>');\n                } else {\n                    $('#card-item-kbs').html(html_kbs);\n                }\n\n\n                // Manage CATEGORIES / CUSTOM FIELDS\n                if (data.categories.length === 0) {\n                    $('.card-item-category, .card-item-field, .form-item-category, #item-details-card-categories')\n                        .addClass('hidden');\n                    $('.no-item-fields').removeClass('hidden');\n                    $('#card-item-fields').closest().addClass('collapsed');\n                } else {\n                    // \n                    if (data.template_id === '') {\n                        $('#list-group-item-main')\n                            .children('.list-group')\n                            .removeClass('hidden');\n                        $('#card-item-category').removeClass('hidden');\n                    }\n\n                    if (data.fields.length === 0) {\n                        if (actionType === 'show') {\n                            $('#item-details-card-categories').addClass('hidden');\n                            // Refresh last item seen\n                            refreshListLastSeenItems();\n                        } else {\n                            // Show the inputs for EDITION\n                            $(data.categories).each(function(index, category) {\n                                $('#form-item-field, #form-item-category-' + category).removeClass('hidden');\n                            });\n                        }\n                    } else {\n                        // Show expected categories\n                        $('.no-item-fields, .form-item-category').addClass('hidden');\n\n                        // In edition mode, show all fields in expected Categories\n                        $(data.categories).each(function(index, category) {\n                            $('#form-item-field, #form-item-category-' + category).removeClass('hidden');\n                        });\n\n                        // Now show expected fields and values\n                        $(data.fields).each(function(index, field) {\n                            // Show cateogry\n                            $('#card-item-category-' + field.parent_id).removeClass('hidden');\n\n                            // Is data encrypted\n                            // Then base64 decode is required\n                            if (field.encrypted === 1) {\n                                field.value = atob(field.value);\n                            }\n\n                            // Show field\n                            if (field.masked === 1) {\n                                // Item card\n                                $('#card-item-field-' + field.id)\n                                    .removeClass('hidden')\n                                    .children(\".card-item-field-value\")\n                                    .html(\n                                        '<span data-field-id=\"' + field.id + '\" class=\"pointer replace-asterisk\"><?php echo $var['hidden_asterisk']; ?></span>' +\n                                        '<input type=\"text\" style=\"width:0px; height:0px; border:0px;\" id=\"hidden-card-item-field-value-' + field.id + '\" value=\"' + (field.value) + '\">'\n                                    )\n                                $('#card-item-field-' + field.id)\n                                    .children(\".btn-copy-clipboard-clear\")\n                                    .attr('data-clipboard-target', '#hidden-card-item-field-value-' + field.id);\n                            } else {\n                                // Show Field\n                                $('#card-item-field-' + field.id)\n                                    .removeClass('hidden')\n                                    .children(\".card-item-field-value\")\n                                    .html(field.value);\n                            }\n                            // Item edit form\n                            $('#form-item-field-' + field.id)\n                                .children(\".form-item-field-custom\")\n                                .val(field.value);\n                        });\n\n                        // Manage template to show\n                        if (data.template_id !== '' && $.inArray(data.template_id, data.categories) > -1) {\n                            // Tick the box in edit mode\n                            $('#template_' + data.template_id).iCheck('check');\n\n                            // Hide existing data as replaced by Category template                                \n                            $('#list-group-item-main, #item-details-card-categories')\n                                .children('.list-group')\n                                .addClass('hidden');\n\n                            // Move the template in place of item main  \n                            $('#card-item-category-' + data.template_id)\n                                .addClass('fields-to-move')\n                                .detach()\n                                .appendTo('#list-group-item-main');\n\n                            // If only one category of Custom Fields\n                            // Then hide the CustomFields div\n                            if (actionType === 'show') {\n                                if (data.categories.length === 1) {\n                                    $('#item-details-card-categories').addClass('hidden');\n                                } else {\n                                    $('#item-details-card-categories').removeClass('hidden');\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n                // Waiting\n                $('#card-item-attachments').html(\"<?php echo langHdl('please_wait'); ?>\");\n\n                // Manage clipboard for link\n                if (clipboardForLink) clipboardForLink.destroy();\n                clipboardForLink = new ClipboardJS(\n                    '#get_item_link',\n                    {\n                        text: function(e) {\n                            return (\"<?php echo $SETTINGS['cpassman_url'];?>/index.php?page=items&group=\"+store.get('teampassItem').folderId+\"&id=\"+store.get('teampassItem').id);\n                        }\n                    })\n                    .on('success', function(e) {\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('copy_to_clipboard'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                progressBar: true,\n                                positionClass: 'toast-top-right'\n                            }\n                        );\n                        e.clearSelection();\n                    });\n\n                // Manage clipboard button\n                if (itemClipboard) itemClipboard.destroy();\n                itemClipboard = new ClipboardJS('.btn-copy-clipboard-clear', {\n                    text: function(e) {\n                        return ($($(e).data('clipboard-target')).val());\n                    }\n                })\n                .on('success', function(e) {\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('copy_to_clipboard'); ?>',\n                        '', {\n                            timeOut: 2000,\n                            progressBar: true,\n                            positionClass: 'toast-top-right'\n                        }\n                    );\n                    e.clearSelection();\n                });\n\n                // Prepare clipboard - COPY LOGIN\n                if (data.login !== '') {\n                    $('#card-item-login-btn').removeClass('hidden');\n                } else {\n                    $('#card-item-login-btn').addClass('hidden');\n                }\n\n                // Prepare clipboard - COPY PASSWORD\n                if (data.pw !== '') {\n                    new ClipboardJS('#card-item-pwd-button', {\n                            text: function() {\n                                return (data.pw);\n                            }\n                        })\n                        .on('success', function(e) {\n                            itemLog(\n                                'at_password_copied',\n                                e.trigger.dataset.clipboardId,\n                                $('#card-item-label').text()\n                            );\n\n                            // Warn user about clipboard clear\n                            if (store.get('teampassSettings').clipboard_life_duration === undefined || parseInt(store.get('teampassSettings').clipboard_life_duration) === 0) {\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        positionClass: 'toast-top-right',\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                toastr.warning(\n                                    '<?php echo langHdl('clipboard_will_be_cleared'); ?>',\n                                    '', {\n                                        timeOut: store.get('teampassSettings').clipboard_life_duration * 1000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Set clipboard eraser\n                                clearClipboardTimeout(\n                                    store.get('teampassSettings').clipboard_life_duration\n                                );\n                            }\n\n                            e.clearSelection();\n                        });\n                    $('#card-item-pwd-button').removeClass('hidden');\n                } else {\n                    $('#card-item-pwd-button').addClass('hidden');\n                }\n\n                // Prepare clipboard - COPY EMAIL\n                if (data.email !== '') {\n                    $('#card-item-email-btn').removeClass('hidden');\n                } else {\n                    $('#card-item-email-btn').addClass('hidden');\n                }\n\n                // Prepare auto_update info\n                $('#card-item-misc').html('');\n                if (parseInt(data.auto_update_pwd_frequency) !== '0') {\n                    $('#card-item-misc')\n                        .append('<span class=\"fas fa-shield infotip mr-4\" title=\"<?php echo langHdl('auto_update_enabled'); ?>&nbsp;' + data.auto_update_pwd_frequency + '\"></span>');\n                }\n\n                // Show Notification engaged\n                if (data.notification_status === true) {\n                    $('#card-item-misc')\n                        .append('<span class=\"mr-4 icon-badge\" id=\"card-item-misc-notification\"><span class=\"far fa-bell infotip text-success\" title=\"<?php echo langHdl('notification_engaged'); ?>\"></span></span>');\n                } else {\n                    $('#card-item-misc')\n                        .append('<span class=\"mr-4 icon-badge\" id=\"card-item-misc-notification\"><span class=\"far fa-bell-slash infotip text-warning\" title=\"<?php echo langHdl('notification_not_engaged'); ?>\"></span></span>');\n                }\n\n                // Prepare counter\n                $('#card-item-misc')\n                    .append('<span class=\"icon-badge mr-4\"><span class=\"far fa-eye infotip\" title=\"<?php echo langHdl('viewed_number'); ?>\"></span><span class=\"badge badge-info icon-badge-text icon-badge-far\">' + data.viewed_no + '</span></span>');\n\n                // Delete after X views\n                if (data.to_be_deleted !== '') {\n                    if (parseInt(data.to_be_deleted_type) === 1) {\n                        $('#form-item-deleteAfterShown').val(data.to_be_deleted);\n                        $('#form-item-deleteAfterDate').val('');\n                    } else {\n                        $('#form-item-deleteAfterShown').val('');\n                        $('#form-item-deleteAfterDate').val(data.to_be_deleted);\n                    }\n                    // Show icon\n                    $('#card-item-misc')\n                        .append('<span class=\"icon-badge mr-5\"><span class=\"far fa-trash-alt infotip\" title=\"<?php echo langHdl('automatic_deletion_engaged'); ?>\"></span><span class=\"badge badge-danger icon-badge-text-bottom-right\">' + data.to_be_deleted + '</span></span>');\n                }\n\n                // reset password shown info\n                $('#card-item-pwd').removeClass('pwd-shown');\n\n                //Anyone can modify button\n                if (parseInt(data.anyone_can_modify) === 1) {\n                    $('#form-item-anyoneCanModify').iCheck('check');\n                } else {\n                    $('#form-item-anyoneCanModify').iCheck('uncheck');\n                }\n\n                if (parseInt(data.show_details) === 1 && parseInt(data.show_detail_option) !== 2) {\n                    // continue loading data\n                    showDetailsStep2(itemId, actionType);\n                } else if (parseInt(data.show_details) === 1 && parseInt(data.show_detail_option) === 2) {\n                    $('#item_details_nok').addClass('hidden');\n                    $('#item_details_ok').addClass('hidden');\n                    $('#item_details_expired_full').show();\n                    $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link').attr('disabled', 'disabled');\n                    $('#div_loading').addClass('hidden');\n                } else {\n                    //Dont show details\n                    $('#item_details_nok').removeClass('hidden');\n                    $('#item_details_nok_restriction_list').html('<div style=\"margin:10px 0 0 20px;\"><b><?php echo langHdl('author'); ?>: </b>' + data.author + '<br /><b><?php echo langHdl('restricted_to'); ?>: </b>' + data.restricted_to + '<br /><br /><u><a href=\"#\" onclick=\"openReasonToAccess()\"><?php echo langHdl('request_access_ot_item'); ?></a></u></div>');\n\n                    $('#reason_to_access').remove();\n                    $('#item_details_nok')\n                        .append('<input type=\"hidden\" id=\"reason_to_access\" value=\"' + data.id + ',' + data.id_user + '\">');\n\n                    // Protect\n                    $('#item_details_ok').addClass('hidden');\n                    $('#item_details_expired').addClass('hidden');\n                    $('#item_details_expired_full').addClass('hidden');\n                    $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link').attr('disabled', 'disabled');\n                    $('#div_loading').addClass('hidden');\n                }\n\n                // Prepare bottom buttons\n                if ($('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id') !== undefined) {\n                    $('.but-prev-item')\n                        .html('<i class=\"fas fa-arrow-left mr-2\"></i>' + unescape($('#list-item-row_'+data.id).prev('.list-item-row').attr('data-label')))\n                        .attr('data-prev-item-id', $('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n                if ($('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id') !== undefined) {\n                    $('.but-next-item')\n                        .html('<i class=\"fas fa-arrow-right mr-2\"></i>' + unescape($('#list-item-row_'+data.id).next('.list-item-row').attr('data-label')))\n                        .attr('data-next-item-id', $('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n                if (debugJavascript === true) {\n                    console.log(\"PREV: \" + $('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id') + \" - NEXT: \" + $('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id'));\n                }\n\n                // Inform user\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('done'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n\n                return true;\n            }\n        );\n    }\n\n\n    /*\n     * Loading Item details step 2\n     */\n    function showDetailsStep2(id, actionType) {\n        requestRunning = true;\n        $.post(\n            'sources/items.queries.php', {\n                type: 'showDetailsStep2',\n                id: id,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'showDetailsStep2');\n\n                if (debugJavascript === true) {\n                    console.log('RECEIVED STEP2 - used key: <?php echo $_SESSION['key']; ?>');\n                    console.log(data);\n                }\n\n                // Attachments\n                if (data !== false) {\n                    if (data.attachments.length === 0) {\n                        $('#card-item-attachments-badge').html('<?php echo langHdl('none'); ?>');\n                        $('#card-item-attachments')\n                            .html('<?php echo langHdl('no_attachment'); ?>')\n                            .parent()\n                            .addClass('collapsed');\n                    } else {\n                        var html = '',\n                            htmlFull = '',\n                            counter = 1,\n                            nbFiles = 0;\n                        $.each(data.attachments, function(i, value) {\n                            // Manage new row\n                            if (counter === 1) {\n                                htmlFull += '<div class=\"row\">';\n                                html += '<div class=\"row\">';\n                            }\n\n                            html += '<div class=\"col-6\">' +\n                                '<div class=\"callout callout-info\">' +\n                                '<i class=\"' + value.icon + ' mr-2 text-info\"></i>';\n\n                            // Show VIEW image icon\n                            if (value.is_image === 1) {\n                                html +=\n                                    '<i class=\"fas fa-eye infotip preview-image pointer mr-2\" ' +\n                                    'title=\"<?php echo langHdl('see'); ?>\" ' +\n                                    'data-file-id=\"' + value.id + '\" data-file-title=\"' +\n                                    (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '\"></i>';\n                            }\n\n                            // Show DOWNLOAD icon\n                            downloadIcon =\n                                '<a class=\"text-secondary infotip mr-2\" href=\"sources/downloadFile.php?name=' + encodeURI(value.filename) + '&key=<?php echo $_SESSION['key']; ?>&key_tmp=' + value.key + '&fileid=' + value.id + '\" title=\"<?php echo langHdl('download'); ?>\">' +\n                                '<i class=\"fas fa-file-download\"></i></a>';\n                            html += downloadIcon;\n\n                            // Show other info\n                            html +=\n                                '<span class=\"font-weight-bold mr-3\">' +\n                                (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '</span>' +\n                                '<span class=\"mr-2 font-weight-light\">(' + value.extension + ')</span>' +\n                                '<span class=\"font-italic\">' + value.size + '</span>' +\n                                '</div></div>';\n\n                            htmlFull += '<div class=\"col-6 edit-attachment-div\"><div class=\"info-box bg-secondary-gradient\">' +\n                                '<span class=\"info-box-icon bg-info\"><i class=\"' + value.icon + '\"></i></span>' +\n                                '<div class=\"info-box-content\"><span class=\"info-box-text\">' +\n                                (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '.' + value.extension + '</span>' +\n                                '<span class=\"info-box-text\">' + downloadIcon +'</span>' +\n                                '<span class=\"info-box-text\"><i class=\"fas fa-trash pointer delete-file\" data-file-id=\"' + value.id + '\"></i></span></div>' +\n                                '</div></div>';\n\n                            if (counter === 2) {\n                                htmlFull += '</div>';\n                                html += '</div>';\n                                counter = 1;\n                            } else {\n                                counter += 1;\n                            }\n                            nbFiles += 1;\n                        });\n                        $('#card-item-attachments').html(html);\n                        $('#card-item-attachments-badge').html(nbFiles);\n                        $('#form-item-attachments').html(htmlFull);\n                        $('#form-item-attachments-zone').removeClass('hidden');\n                    }\n                }\n                // Hide loading state\n                $('#card-item-attachments').nextAll().addClass('hidden');\n\n                // Show restrictions with Badges\n                var html_restrictions = '';\n                $.each(store.get('teampassItem').id_restricted_to, function(i, value) {\n                    html_restrictions +=\n                        '<span class=\"badge badge-info mr-2 mb-1\"><i class=\"fas fa-group fa-sm mr-1\"></i>' +\n                        data.users_list.find(x => x.id === parseInt(value)).name + '</span>';\n                });\n                $.each(store.get('teampassItem').id_restricted_to_roles, function(i, value) {\n                    html_restrictions +=\n                        '<span class=\"badge badge-info mr-2 mb-1\"><i class=\"fas fa-group fa-sm mr-1\"></i>' +\n                        data.roles_list.find(x => x.id === parseInt(value)).title + '</span>';\n                });\n                if (html_restrictions === '') {\n                    $('#card-item-restrictedto').html('<?php echo langHdl('no_special_restriction'); ?>');\n                } else {\n                    $('#card-item-restrictedto').html(html_restrictions);\n                }\n\n\n                $('#edit_past_pwds').attr('title', (data.history_of_pwds)); //htmlspecialchars_decode \n                $('#edit_past_pwds_div').html((data.history_of_pwds)); //htmlspecialchars_decode \n\n                //$('#id_files').html(data.files_id);\n                //$('#hid_files').val(data.files_id);\n                //$('#item_edit_list_files').html(data.files_edit);\n\n                //$('#index-last-pwds').html(htmlspecialchars_decode(data.div_last_items));\n\n                // function calling image lightbox when clicking on link\n                $('a.image_dialog').click(function(event) {\n                    event.preventDefault();\n                    PreviewImage($(this).attr('href'), $(this).attr('title'));\n                });\n\n\n                // set indicator if item has change proposal\n                if (parseInt(data.has_change_proposal) > 0) {\n                    $('#item_extra_info').prepend('<i class=\"fas fa-lightbulb-o fa-sm mi-yellow tip\" title=\"<?php echo langHdl('item_has_change_proposal'); ?>\"></i>&nbsp;');\n                }\n\n\n                $('.infotip').tooltip();\n\n                // Now load History\n                if (actionType === 'show') {\n                    $.post(\n                        \"sources/items.queries.php\", {\n                            type: \"load_item_history\",\n                            item_id: store.get('teampassItem').id,\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //decrypt data\n                            data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'load_item_history');\n                            if (debugJavascript === true) {\n                                console.info('History:');\n                                console.log(data);\n                            }\n                            if (data.error === '') {\n                                var html = '',\n                                    nbHistoryEvents = 0;\n                                $.each(data.history, function(i, value) {\n                                    html += '<div class=\"direct-chat-msg\"><div class=\"direct-chat-info clearfix\">' +\n                                        '<span class=\"direct-chat-name float-left\">' + value.name + '</span>' +\n                                        '<span class=\"direct-chat-timestamp float-right\">' + value.date + '</span>' +\n                                        '</div>' +\n                                        '<img class=\"direct-chat-img\" src=\"' + value.avatar + '\" alt=\"Message User Image\">' +\n                                        '<div class=\"direct-chat-text\"><span class=\"text-capitalize\">' +\n                                        (value.action === '' ? '' : (value.action)) + '</span> ' +\n                                        (value.detail === '' ? '' : (' | ' + value.detail)) + '</div></div>';\n                                    nbHistoryEvents += 1;\n                                });\n                                // Display\n                                $('#card-item-history').html(html);\n                                $('#card-item-history-badge').html(nbHistoryEvents);\n                            }\n\n                            // Collapse History\n                            $('#card-item-history').closest().addClass('collapsed');\n\n                            // Hide loading state\n                            $('#card-item-history').nextAll().addClass('hidden');\n                        }\n                    );\n                } else if (actionType === 'edit') {\n                    getPrivilegesOnItem(\n                        selectedFolderId,\n                        0\n                    );\n                }\n\n                // Prepare Select2 inputs\n                $('.select2').select2({\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n\n                // Prepare datePicker\n                $('#form-item-deleteAfterDate, .datepicker').datepicker({\n                    format: '<?php echo str_replace(['Y', 'M'], ['yyyy', 'mm'], $SETTINGS['date_format']); ?>',\n                    todayHighlight: true,\n                    todayBtn: true,\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n\n                // Prepare Date range picker with time picker\n                $('.timepicker').timepicker({\n                    minuteStep: 5,\n                    template: false,\n                    showSeconds: true,\n                    showMeridian: false,\n                    showInputs: false,\n                    explicitMode: true\n                });\n\n                // Delete inputs related files uploaded but not confirmed\n                var data = {\n                    'item_id': store.get('teampassItem').id,\n                }\n\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: 'delete_uploaded_files_but_not_saved',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function (data) {\n                        /*// add track-change class on item form\n                        setTimeout(\n                            $('#form-item-label, #form-item-description, #form-item-login, #form-item-password, #form-item-email, #form-item-url, #form-item-folder, #form-item-restrictedto, #form-item-tags, #form-item-anyoneCanModify, #form-item-deleteAfterShown, #form-item-deleteAfterDate, #form-item-anounce, .form-item-field-custom').addClass('track-change'),\n                            2000\n                        );*/\n\n                        requestRunning = false;\n                    }\n                );\n            }\n        );\n    };\n\n    // Clear history form\n    $(document)\n        .on('click', '#form-item-history-clear', function() {\n            $('.history').val('');\n        })\n        .on('click', '#form-item-history-insert', function() {\n            if ($('#form-item-history-label').val() === '' ||\n                $('#form-item-history-date').val() === '' ||\n                $('#form-item-history-time').val() === ''\n            ) {\n                // Inform user\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('all_fields_mandatory'); ?>',\n                    '<?php echo langHdl('warning'); ?>', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Insert new entry\n            var data = {\n                'item_id': store.get('teampassItem').id,\n                'label': DOMPurify.sanitize($('#form-item-history-label').val()),\n                'date': DOMPurify.sanitize($('#form-item-history-date').val()),\n                'time': DOMPurify.sanitize($('#form-item-history-time').val()),\n            }\n            $.post(\n                \"sources/items.queries.php\", {\n                    type: 'history_entry_add',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'history_entry_add');\n                    if (debugJavascript === true) console.log(data);\n                    $('.history').val('');\n\n                    // Inform user\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            );\n        })\n        .on('click', '.nav-link', function() {\n            if ($(this).attr('href') === '#tab_5') {\n                $('#form-item-buttons').addClass('hidden');\n            } else {\n                $('#form-item-buttons').removeClass('hidden');\n            }\n\n        });\n\n    // When click on Trash attachment icon\n    $(document).on('click', '.delete-file', function() {\n        var thisButton = $(this),\n            thisFileId = thisButton.data('file-id');\n\n        if (thisFileId !== undefined && thisFileId !== '') {\n            // Delete the file\n            var data = {\n                'file_id': thisFileId,\n            };\n\n            $.post(\n                'sources/items.queries.php', {\n                    type: 'delete_attached_file',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    //decrypt data\n                    data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_attached_file');\n                    if (debugJavascript === true) console.log(data);\n\n                    //check if format error\n                    if (data.error === true) {\n                        // ERROR\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Remove the file in UI\n                        thisButton.closest('.edit-attachment-div').remove();\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n        }\n    });\n\n    //calling image lightbox when clicking on link\n    $(document).on('click', '.preview-image', function(event) {\n        event.preventDefault();\n        PreviewImage($(this).data('file-id'));\n    });\n\n    PreviewImage = function(fileId) {\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('loading_image'); ?>...<i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-2\"></i>'\n        );\n\n        $.post(\n            \"sources/items.queries.php\", {\n                type: \"image_preview_preparation\",\n                id: fileId,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'image_preview_preparation');\n                //if (debugJavascript === true) console.log(data);\n\n                //check if format error\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $(\"#card-item-preview\").html('<img id=\"image_files\" src=\"\">');\n                    //Get the HTML Elements\n                    imageDialog = $(\"#card-item-preview\");\n                    imageTag = $('#image_files');\n\n                    //Set the image src\n                    imageTag.attr(\"src\", \"data:\" + data.file_type + \";base64,\" + data.file_content);\n                    imageTag.attr(\"class\", \"img-fluid\");\n\n                    //When the image has loaded, display the dialog\n                    showModalDialogBox(\n                        '#warningModal',\n                        data.filename,\n                        $(imageDialog).html(),\n                        '',\n                        'Close',\n                        'modal-xl'\n                    );\n\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n\n                    /*\n                                        var pre = document.createElement('pre');\n                                        pre.style.textAlign = \"center\";\n                                        $(pre).append($(imageDialog).html());\n                                        alertify\n                                            .alert(pre)\n                                            .set({\n                                                label: '<?php echo langHdl('close'); ?>',\n                                                closable: false,\n                                                padding: false,\n                                                title: data.filename,\n                                                resizable: true,\n                                            })\n                                            .resizeTo('90%', '250px');*/\n                }\n            }\n        );\n    };\n\n    /**\n     */\n    function itemLog(logCase, itemId, itemLabel) {\n        itemId = itemId || $('#id_item').val();\n\n        var data = {\n            \"id\": itemId,\n            \"label\": DOMPurify.sanitize(itemLabel),\n            \"user_id\": \"<?php echo $_SESSION['user_id']; ?>\",\n            \"action\": logCase,\n            \"login\": \"<?php echo $_SESSION['login']; ?>\"\n        };\n\n        $.post(\n            \"sources/items.logs.php\", {\n                type: \"log_action_on_item\",\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            }\n        );\n    }\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function prepareOneTimeView() {\n        //Send query\n        $.post(\n            \"sources/items.queries.php\", {\n                type: \"generate_OTV_url\",\n                id: store.get('teampassItem').id,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //check if format error\n                if (data.error == \"\") {\n                    $('#form-item-otv-link').val(data.url);\n                    // prepare clipboard\n                    var clipboard = new ClipboardJS(\"#form-item-otv-copy-button\", {\n                        text: function() {\n                            return data.url;\n                        }\n                    });\n                    clipboard.on('success', function(e) {\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('copy_to_clipboard'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                positionClass: 'toast-top-right',\n                                progressBar: true\n                            }\n                        );\n                        e.clearSelection();\n                    });\n                }\n            },\n            \"json\"\n        );\n    }\n\n    /**\n     */\n    function getPrivilegesOnItem(val, edit, context) {\n        context = context || \"\"; // make context optional\n\n        // make sure to use correct selected folder\n        if (val === false) {\n            val = selectedFolderId;\n        }\n        if (debugJavascript === true) console.log('Get privilege for folder ' + val);\n            \n        if (val === \"\" || typeof val === \"undefined\" || val === false) {\n            toastr.remove();\n            toastr.error(\n                '',\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                {\n                    timeOut: 5000,\n                    positionClass: 'toast-top-right',\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        return $.post(\n            \"sources/items.queries.php\", {\n                type: \"get_complixity_level\",\n                folder_id: val,\n                context: context,\n                item_id: store.get('teampassItem').id,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'get_complixity_level');\n\n                if (debugJavascript === true) {\n                    console.info('GET COMPLEXITY LEVEL');\n                    console.log(data);\n                }\n                var executionStatus = true;\n\n                if (data.error === false) {\n                    // Do some prepartion\n\n                    // Prepare list of users where needed\n                    $('#form-item-restrictedto, #form-item-anounce').empty().change(); //.val('')\n                    // Users restriction list\n                    var html_restrictions = '';\n\n                    $(data.usersList).each(function(index, value) {\n                        // Prepare list for FORM\n                        $(\"#form-item-restrictedto\")\n                            .append('<option value=\"' + value.id + '\" class=\"restriction_is_user\">' + value.name + '</option>');\n\n                        // Prepare list of emailers\n                        $('#form-item-anounce').append('<option value=\"' + value.email + '\">' + value.name + '</option>');\n                    });\n                    if (data.setting_restricted_to_roles === 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup label=\"<?php echo langHdl('users'); ?>\">');\n                        $(\".restriction_is_user\").wrapAll(optgroup);\n\n                        // Now add the roles to the list\n                        $(data.rolesList).each(function(index, value) {\n                            $(\"#form-item-restrictedto\")\n                                .append('<option value=\"role_' + value.id + '\" class=\"restriction_is_role\">' +\n                                    value.title + '</option>');\n                        });\n                        /// Add a group label for Groups\n                        $('.restriction_is_role').wrapAll($('<optgroup label=\"<?php echo langHdl('roles'); ?>\">'));\n                    }\n\n\n                    //\n                    $('#card-item-visibility').html(data.visibility);\n\n                    // Prepare Select2\n                    $('.select2').select2({\n                        language: '<?php echo $_SESSION['user_language_code']; ?>'\n                    });\n\n                    // Show selected restricted inputs\n                    $('#form-item-restrictedto')\n                        .val(data.usersList.concat(\n                            data.rolesList.map(i => 'role_' + i)))\n                        .change();\n\n                    // If restricted to Users then select them\n                    if (store.get('teampassItem').id_restricted_to !== undefined) {\n                        $('#form-item-restrictedto')\n                            .val(store.get('teampassItem').id_restricted_to)\n                            .trigger('change');\n                    }\n\n                }\n\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.folderId = val,\n                            teampassItem.error = data.error === undefined ? '' : data.error,\n                            teampassItem.message = data.message === undefined ? '' : data.message,\n                            teampassItem.folderComplexity = data.val === undefined ? '' : parseInt(data.val),\n                            teampassItem.folderIsPersonal = data.personal === undefined ? '' : parseInt(data.personal),\n                            teampassItem.itemMinimumComplexity = data.complexity === undefined ? '' : data.complexity,\n                            teampassItem.itemVisibility = data.visibility === undefined ? '' : data.visibility,\n                            teampassItem.id_restricted_to = data.usersList === undefined ? '' : data.usersList,\n                            teampassItem.id_restricted_to_roles = data.rolesList === undefined ? '' : data.rolesList,\n                            teampassItem.item_rights = data.itemAccessRight === undefined ? '' : data.itemAccessRight\n                    }\n                );\n                //if (debugJavascript === true) console.log('Content of teampassItem;')\n                //if (debugJavascript === true) console.log(store.get('teampassItem'))\n            }\n        );\n    }\n\n    $('.password-generate').click(function() {\n        var elementId = $(this).data('id');\n        $('#' + elementId).focus();\n        if (debugJavascript === true) console.log(elementId);\n\n        // If no criteria is set then do secure\n        var secure_pwd = false;\n        var anyBoxesChecked = false;\n        if ($('.password-definition:checked').length > 0) {\n            anyBoxesChecked = true;\n        }\n        if (anyBoxesChecked === false || $('#pwd-definition-secure').prop('checked') === true) {\n            secure_pwd = true;\n        }\n        \n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"generate_password\",\n                type_category: 'action_user',\n                size: $('#pwd-definition-size').val(),\n                lowercase: $('#pwd-definition-lcl').prop(\"checked\"),\n                numerals: $('#pwd-definition-numeric').prop(\"checked\"),\n                capitalize: $('#pwd-definition-ucl').prop(\"checked\"),\n                symbols: $('#pwd-definition-symbols').prop(\"checked\"),\n                secure_pwd: secure_pwd,\n                force: \"false\",\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                if (debugJavascript === true) console.log(data)\n                if (data.error == \"true\") {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        data.error_msg,\n                        '<?php echo langHdl('error'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                } else {\n                    $(\"#\" + elementId).val(data.key).focus();\n\n                    // Form has changed\n                    userDidAChange = true;\n                    if (debugJavascript === true) console.log('User did a change during generate_password > ' + userDidAChange);\n                    //$('#' + elementId).attr('data-change-ongoing', true);;\n\n                    $(\"#form-item-password\").pwstrength(\"forceUpdate\");\n\n                    // SHow button in sticky footer\n                    //$('#form-item-buttons').addClass('sticky-footer');\n                }\n            }\n        );\n    });\n\n    $('#item-button-password-copy').click(function() {\n        $('#form-item-password-confirmation').val($('#form-item-password').val());\n    });\n\n    /**\n     * On tag badge click, launch the search query\n     */\n    function searchItemsWithTags(criteria) {\n        if (criteria !== '') {\n            $('#folders-tree-card, .columns-position').removeClass('hidden');\n            $('.item-details-card, .form-item-action, .form-item, .form-folder-action').addClass('hidden');\n\n            $('#find_items').val(criteria);\n\n            searchItems(criteria);\n        }\n    }\n\n    /**\n     * Checks if string is base64 encoded\n     *\n     * @return bool\n     */\n    function isBase64(str) {\n        try {\n            return btoa(atob(str)) == str;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Scroll back to previous vertical position\n     *\n     * @return void\n     */\n    function scrollBackToPosition() {\n        // Scroll back to position\n        if (store.get('teampassApplication').tempScrollTop > 0) {\n            window.scrollTo({\n                top: store.get('teampassApplication').tempScrollTop\n            });\n        }\n    }\n\n\n    function prepareFolderDragNDrop()\n    {\n        $('.is-draggable').draggable({\n            cursor: 'move',\n            cursorAt: {\n                top: -5,\n                left: -5\n            },\n            opacity: 0.8,\n            appendTo: 'body',\n            stop: function(event, ui) {\n                $(this).removeClass('bg-warning');\n            },\n            start: function(event, ui) {\n                $(this).addClass('bg-warning');\n            },\n            helper: function(event) {\n                return $('<div class=\"bg-gray p-2 font-weight-light\">' + $(this).find('.list-item-row-description').text() + '</div>');\n            }\n        });\n        $('.folder').droppable({\n            hoverClass: 'bg-warning',\n            tolerance: 'pointer',\n            drop: function(event, ui) {\n                // Check if same folder\n                if (parseInt($(this).attr('id').substring(4)) === parseInt(ui.draggable.data('item-tree-id'))) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // Warn user that it starts\n                toastr.info(\n                    '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>'\n                );\n\n                // Hide helper\n                ui.draggable.addClass('hidden');\n\n                //move item\n                var data = {\n                    'item_id': ui.draggable.data('item-id'),\n                    'folder_id': $(this).attr('id').substring(4)\n                }\n                $.post(\n                    'sources/items.queries.php', {\n                        type: 'move_item',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        //decrypt data\n                        data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'move_item');\n\n                        if (debugJavascript === true) console.log(data)\n\n                        if (data.error === true) {\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            ui.draggable.removeClass('hidden');\n                            return false;\n                        }\n                        \n                        //increment / decrement number of items in folders\n                        $('#itcount_' + data.from_folder).text(refreshFolderCounters($('#itcount_' + data.from_folder).text(), 'decrement'));\n                        $('#itcount_' + data.to_folder).text(refreshFolderCounters($('#itcount_' + data.to_folder).text(), 'increment'));\n\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                );\n            }\n        });\n    }\n\n    /**\n     * Permits to refresh the folder counters when performing an item drag and drop\n     */\n    function refreshFolderCounters(counter, operation)\n    {\n        var splitCounter = counter.split('/');\n        if (splitCounter.length <= 3) {\n            if (operation === 'increment') {\n                splitCounter[0]++;\n                if (splitCounter.length === 3) {\n                    splitCounter[1]++;\n                }\n            } else {\n                splitCounter[0]--;\n                if (splitCounter.length === 3) {\n                    splitCounter[1]--;\n                }\n            }\n        }\n        \n        return splitCounter.join('/');\n    }\n\n    /*\n    // Get parameters from url\n    var currentTeampassUrl = new URL(window.location.href);\n    var actionFromUrl = currentTeampassUrl.searchParams.get('action');\n    if (actionFromUrl !== undefined && atob(actionFromUrl) === 'reset_private_key') {\n        // Case where we need to re-encrypt all share keys\n        if (debugJavascript === true) console.log(\"ACTION RE-ENCRYPTION OF SHAREKEYS\");\n\n        $('#dialog-encryption-keys').removeClass('hidden');    \n\n        // Hide other\n        $('.content-header, .content').addClass('hidden');\n\n        alertify.dismissAll();\n    }\n    */\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      users.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception('Error file \"/includes/config/tp.config.php\" not exists', 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'folders', $SETTINGS) === false) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n?>\n\n\n<script type='text/javascript'>\n    //<![CDATA[\n    // Initialization\n    var userDidAChange = false,\n        userTemporaryCode = '',\n        constVisibleOTP = false,\n        userClipboard,\n        ProcessInProgress = false,\n        debugJavascript = false;\n\n    browserSession(\n        'init',\n        'teampassApplication', {\n            foldersSelect: '',\n            complexityOptions: '',\n        }\n    );\n\n    // Prepare tooltips\n    $('.infotip').tooltip();\n\n    // Prepare Select2\n    $('.select2').select2({\n        language: '<?php echo $_SESSION['user_language_code']; ?>'\n    });\n\n    // Prepare iCheck format for checkboxes\n    $('input[type=\"checkbox\"].flat-blue, input[type=\"radio\"].flat-blue').iCheck({\n        radioClass: 'iradio_flat-blue',\n        checkboxClass: 'icheckbox_flat-blue',\n    });\n    $('#form-create-special-folder').iCheck('disable');\n\n    // Prevent submit on button\n    $('.btn-no-click')\n        .click(function(e) {\n            e.preventDefault();\n        });\n\n\n    //Launch the datatables pluggin\n    var oTable = $('#table-users').DataTable({\n        'paging': true,\n        'searching': true,\n        'order': [\n            [1, 'asc']\n        ],\n        'info': true,\n        'processing': false,\n        'serverSide': true,\n        'responsive': false,\n        'select': false,\n        'stateSave': true,\n        'autoWidth': true,\n        'ajax': {\n            url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/users.datatable.php',\n        },\n        'language': {\n            'url': '<?php echo $SETTINGS['cpassman_url']; ?>/includes/language/datatables.<?php echo $_SESSION['user']['user_language']; ?>.txt'\n        },\n        'columns': [{\n                'width': '80px',\n                className: 'details-control',\n                'render': function(data, type, row, meta) {\n                    return '<div class=\"group-btn btn-user-action\">' +\n                        '' +\n                        '<button type=\"button\" class=\"btn btn-info dropdown-toggle\" data-toggle=\"dropdown\"><i class=\"fas fa-cog\"></i>&nbsp;' +\n                        '</button>' +\n                        '<ul class=\"dropdown-menu\" role=\"menu\">' +\n                        ($(data).data('auth-type') === 'local' ?\n                            '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-action=\"new-password\"><i class=\"fas fa-lock mr-2\"></i><?php echo langHdl('change_login_password'); ?></li>' :\n                            ''\n                        ) +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-action=\"edit\"><i class=\"fas fa-pen mr-2\"></i><?php echo langHdl('edit'); ?></li>' +\n                        ($(data).data('otp-provided') !== \"\"?\n                            '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-action=\"new-otp\"><i class=\"fas fa-mask mr-2\"></i><?php echo langHdl('generate_new_otp'); ?></li>' :\n                            ''\n                        ) +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-fullname=\"' + $(data).data('fullname') + '\" data-action=\"logs\"><i class=\"fas fa-newspaper mr-2\"></i><?php echo langHdl('see_logs'); ?></li>' +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-action=\"qrcode\"><i class=\"fas fa-qrcode mr-2\"></i><?php echo langHdl('user_ga_code'); ?></li>' +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-fullname=\"' + $(data).data('fullname') + '\"data-action=\"access-rights\"><i class=\"fas fa-sitemap mr-2\"></i><?php echo langHdl('user_folders_rights'); ?></li>' +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-fullname=\"' + $(data).data('fullname') + '\"data-action=\"disable-user\"><i class=\"fas fa-user-slash text-warning mr-2\" disabled></i><?php echo langHdl('disable_enable'); ?></li>' +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-fullname=\"' + $(data).data('fullname') + '\"data-action=\"delete-user\"><i class=\"fas fa-user-minus text-danger mr-2\" disabled></i><?php echo langHdl('delete'); ?></li>' +\n                        '</ul>' +\n                        '</div>';\n                }\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                'width': '70px',\n                className: 'dt-body-center'\n            },\n            {\n                'width': '70px',\n                className: 'dt-body-center'\n            },\n            {\n                'width': '70px',\n                className: 'dt-body-center'\n            }\n        ],\n        'preDrawCallback': function() {\n            toastr.info(\n                '<?php echo langHdl('loading'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i><span class=\"close-toastr-progress\"></span>',\n                ''\n            );\n        },\n        'drawCallback': function() {\n            // Tooltips\n            $('.infotip').tooltip();\n\n            // Remove progress toast\n            $('.toast').remove();\n        },\n        /*'createdRow': function( row, data, dataIndex ) {\n            var newClasses = $(data[6]).filter('#row-class-' + dataIndex).val();\n            $(row).addClass(newClasses);\n        }*/\n    });\n\n\n\n    $('#form-email').change(function() {\n        //extract domain from email\n        var domain = $(this).val().split('@')[1];\n        if (domain === undefined) {\n            return false;\n        }\n        domain = domain.toLowerCase()\n\n        //check if domain exists\n        $.post(\"sources/users.queries.php\", {\n                type: \"check_domain\",\n                domain: domain\n            },\n            function(data) {\n                data = $.parseJSON(data);\n                if (debugJavascript === true) console.log(data);\n\n                $(\"#new_folder_role_domain\").attr(\"disabled\", \"disabled\");\n                if (data.folder === 'not_exists' && data.role === 'not_exists' && domain !== '') {\n                    $('#form-create-special-folder').iCheck('enable');\n                    $('#form-special-folder').val(domain);\n                } else {\n                    $('#form-create-special-folder').iCheck('disable');\n                    $('#form-special-folder').val('');\n                }\n            }\n        );\n    });\n\n\n\n    /**\n     * \n     */\n    // Fires when user click on button SEND\n    $(document).on('click', '#warningModalButtonClose', function() {\n        // check if uform is the one expected\n        if ($('#warningModal-button-user-pwd').length === 0) {\n            return false;\n        } \n        if (debugJavascript === true) console.log('Closing warning dialog')\n        toastr.remove();\n        $('#warningModal').modal('hide');\n\n        // Fianlize UI\n        // clear form fields\n        $(\".clear-me\").val('');\n        $('.select2').val('').change();\n        //$('#privilege-user').iCheck('check');\n        $('.form-check-input')\n            .iCheck('disable')\n            .iCheck('uncheck');\n\n        // refresh table content\n        oTable.ajax.reload();\n\n        // Show list of users\n        $('#row-form').addClass('hidden');\n        $('#row-list').removeClass('hidden');\n    });\n\n\n    /**\n     * \n     */\n    // Fires when user click on button SEND\n    $(document).on('click', '#warningModalButtonAction', function() {\n        // check if uform is the one expected\n        if ($('#warningModal-button-user-pwd').length === 0) {\n            return false;\n        } \n        //console.log('send email for '+store.get('teampassUser').admin_new_user_temporary_encryption_code)\n        //console.log(store.get('teampassUser'))\n        //console.log(store.get('teampassApplication'))\n\n        showModalDialogBox(\n            '#warningModal',\n            '<i class=\"fas fa-user-shield fa-lg warning mr-2\"></i><?php echo langHdl('caution'); ?>',\n            '<?php echo langHdl('sending_email_message'); ?>',\n            '',\n            '',\n            true,\n            false,\n            false\n        );\n\n        // Prepare data\n        if (store.get('teampassApplication').formUserAction === \"add_new_user\") {\n            var data = {\n                'receipt': $('#form-email').val(),\n                'subject': 'TEAMPASS - <?php echo langHdl('temporary_encryption_code');?>',\n                'body': '<?php echo langHdl('email_body_new_user');?>',\n                'pre_replace' : {\n                    '#code#' : store.get('teampassUser').admin_new_user_temporary_encryption_code,\n                    '#login#' : store.get('teampassUser').admin_new_user_login,\n                    '#password#' : store.get('teampassUser').admin_new_user_password,\n                }\n            }\n        } else {\n            var data = {\n                'receipt': $('#form-email').val(),\n                'subject': 'TEAMPASS - <?php echo langHdl('temporary_encryption_code');?>',\n                'body': '<?php echo langHdl('email_body_temporary_encryption_code');?>',\n                'pre_replace' : {\n                    '#enc_code#' : store.get('teampassUser').admin_new_user_temporary_encryption_code,\n                }\n            }\n        }\n\n        // Launch action\n        $.post(\n            'sources/main.queries.php', {\n                type: 'mail_me',\n                type_category: 'action_mail',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                //console.log(data);\n\n                if (data.error !== false) {\n                    $('#warningModal').modal('hide');\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Fianlize UI\n                    // clear form fields\n                    $(\".clear-me\").val('');\n                    $('.select2').val('').change();\n                    //$('#privilege-user').iCheck('check');\n                    $('.form-check-input')\n                        .iCheck('disable')\n                        .iCheck('uncheck');\n\n                    // Show list of users\n                    $('#row-form').addClass('hidden');\n                    $('#row-list').removeClass('hidden');\n\n                    // Hide dialogbox\n                    $('#warningModal').modal('hide');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // change the user status to ready to use\n                    data = {\n                        'user_id': store.get('teampassUser').admin_new_user_id,\n                    }\n\n                    $.post(\n                        'sources/main.queries.php', {\n                            type: 'user_is_ready',\n                            type_category: 'action_user',\n                            data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key: '<?php echo $_SESSION['key']; ?>'\n                        },\n                        function(data) {\n                            if (debugJavascript === true) console.log('User has been created');\n\n                            // refresh table content\n                            oTable.ajax.reload();\n\n                            // Remove action from store\n                            if (debugJavascript === true) console.log('Clear Store variables')\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.formUserAction = '',\n                                    teampassApplication.formUserId = '';\n                                }\n                            );\n                            store.update(\n                                'teampassUser',\n                                function(teampassUser) {\n                                    teampassUser.admin_new_user_password = '',\n                                    teampassUser.admin_new_user_temporary_encryption_code = '',\n                                    teampassUser.admin_new_user_login = '';\n                                }\n                            );\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * BUILD AND CHECK THE USER LOGIN\n     */\n    $('.build-login').change(function() {\n        // Build login only if it is empty\n        if ($(\"#form-login\").val() === '') {\n            //return false;\n        }\n        // Build login\n        if ($(this).attr('id') !== 'form-login') {\n            $(\"#form-login\").val(\n                $(\"#form-name\")\n                .val()\n                .toLowerCase()\n                .replace(/ /g, \"\") + \".\" + $(\"#form-lastname\").val().toLowerCase().replace(/ /g, \"\")\n            );\n        }\n\n        // Check if login exists\n        $.post(\n            'sources/users.queries.php', {\n                type: 'is_login_available',\n                login: $('#form-login').val(),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Show result\n                    if (data.login_exists === 0) {\n                        $('#form-login')\n                            .removeClass('is-invalid')\n                            .addClass('is-valid');\n                        $('#form-login-conform').val(true);\n                    } else {\n                        $('#form-login')\n                            .removeClass('is-valid')\n                            .addClass('is-invalid');\n                        $('#form-login-conform').val(false);\n                    }\n                }\n            }\n        );\n    });\n\n\n    function userTasksCreation(userId, userPassword, userTemporaryCode)\n    {\n        var data = {\n            user_id: userId,\n            user_pwd: userPassword,\n            user_code: userTemporaryCode,\n        }\n\n        // Do query\n        $.post(\n            \"sources/users.queries.php\", {\n                type: \"create_new_user_tasks\",\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                if (debugJavascript === true)  {\n                    console.info(\"R\u00e9ception des donn\u00e9es :\")\n                    console.log(data);\n                }\n                \n                if (data.error === true) {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    dfd.reject();\n                } else {\n                    // show message to user\n                    $('#warningModal').modal('hide');\n\n                    // Inform user\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 2000\n                        }\n                    );\n\n                    // Reload list of users\n                    oTable.ajax.reload();\n\n                    // Prepare UI\n                    $('#row-list, #group-create-special-folder, #group-delete-user').removeClass('hidden');\n                    $('#row-form').addClass('hidden');\n                }\n            }\n        );\n    }\n\n    /**\n     * \n     */\n    // Launch recursive action to encrypt the keys\n    function callRecursiveUserDataEncryption(\n        userId,\n        step,\n        start\n    ) {\n        var dfd = $.Deferred();\n        ProcessInProgress = true;\n        \n        var stepText = '';\n        if (debugJavascript === true) console.log('Performing '+step)\n\n        // Prepare progress string\n        if (step === 'step0') {\n            stepText = '<?php echo langHdl('inititialization'); ?>';\n        } else if (step === 'step1') {\n            stepText = '<?php echo langHdl('items'); ?>';\n        } else if (step === 'step2') {\n            stepText = '<?php echo langHdl('logs'); ?>';\n        } else if (step === 'step3') {\n            stepText = '<?php echo langHdl('suggestions'); ?>';\n        } else if (step === 'step4') {\n            stepText = '<?php echo langHdl('fields'); ?>';\n        } else if (step === 'step5') {\n            stepText = '<?php echo langHdl('files'); ?>';\n        } else if (step === 'step6') {\n            stepText = '<?php echo langHdl('personal_items'); ?>';\n        }\n\n        if (step !== 'finished') {\n            if (store.get('teampassUser').related_items_number !== null) {\n                $nbItemsToConvert = \" / \" + store.get('teampassUser').related_items_number;\n            } else {\n                $nbItemsToConvert = '';\n            }\n            // Inform user\n            $(\"#warningModalBody\").html('<b><?php echo langHdl('encryption_keys'); ?> - ' +\n                stepText + '</b> [' + start + ' - ' + (parseInt(start) + <?php echo NUMBER_ITEMS_IN_BATCH;?>) + ']<span id=\"warningModalBody_extra\">' + $nbItemsToConvert + '</span> ' +\n                '... <?php echo langHdl('please_wait'); ?><i class=\"fas fa-spinner fa-pulse ml-3 text-primary\"></i>');\n\n            // If expected, show the OPT to the admin\n            if (constVisibleOTP === true) {\n                toastr.info(\n                    '<?php echo langHdl('show_encryption_code_to_admin');?> <div><input class=\"form-control form-item-control flex-nowrap\" value=\"' + userTemporaryCode + '\" readonly></div>'\n                    + '<br /><button type=\"button\" class=\"btn clear\"><?php echo langHdl('close');?></button>',\n                    '<?php echo langHdl('information'); ?>',\n                    {\n                        extendedTimeOut: 0,\n                        timeOut: 0,\n                        tapToDismiss: false,\n                        newestOnTop: true,\n                        preventDuplicates: true,\n                        onHidden: (toast) => {\n                            // prevent against multiple occurances (#3305)\n                            constVisibleOTP = false;\n                        },\n                    }\n                );\n            }\n\n            var data = {\n                action: step,\n                start: start,\n                length: <?php echo NUMBER_ITEMS_IN_BATCH;?>,\n                user_id: userId,\n            }\n            if (debugJavascript === true) {\n                console.info(\"Envoi des donn\u00e9es :\")\n                console.log(data);\n            }\n\n            // Do query\n            $.post(\n                \"sources/main.queries.php\", {\n                    type: \"user_sharekeys_reencryption_next\",\n                    type_category: 'action_key',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    if (debugJavascript === true) {\n                        console.info(\"R\u00e9ception des donn\u00e9es :\")\n                        console.log(data);\n                    }\n                    \n                    if (data.error === true) {\n                        // error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        dfd.reject();\n                    } else {\n                        // Prepare variables\n                        userId = data.userId;\n                        step = data.step;\n                        start = data.start;\n\n                        // Do recursive call until step = finished\n                        callRecursiveUserDataEncryption(\n                            userId,\n                            step,\n                            start\n                        ).done(function(response) {\n                            dfd.resolve(response);\n                        });\n                    }\n                }\n            );\n        } else {\n            // Ask user\n            showModalDialogBox(\n                '#warningModal',\n                '<i class=\"fas fa-envelope-open-text fa-lg warning mr-2\"></i><?php echo langHdl('information'); ?>',\n                '<i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('send_user_password_by_email'); ?>'+\n                '<div class=\"row\">'+\n                    (store.get('teampassApplication').formUserAction === \"add_new_user\" ?\n                    '<div class=\"col-lg-2\"><button type=\"button\" class=\"btn btn-block btn-secondary mr-2\"  id=\"warningModal-button-user-pwd\"><?php echo langHdl('show_user_password'); ?></button></div>'+\n                    '<div class=\"col-lg-4 hidden\" id=\"warningModal-user-pwd\"><div><?php echo langHdl('user_password'); ?><input class=\"form-control form-item-control\" value=\"'+store.get('teampassUser').admin_new_user_password+'\"></div>'+\n                    '<div><?php echo langHdl('user_temporary_encryption_code'); ?><input class=\"form-control form-item-control\" value=\"'+store.get('teampassUser').admin_new_user_temporary_encryption_code+'\"></div></div>'\n                    :\n                    '<div class=\"col-lg-2\"><button type=\"button\" class=\"btn btn-block btn-secondary mr-2\"  id=\"warningModal-button-user-pwd\"><?php echo langHdl('show_user_temporary_encryption_code'); ?></button></div>'+\n                    '<div class=\"col-lg-4 hidden\" id=\"warningModal-user-pwd\"><input class=\"form-control form-item-control\" value=\"'+store.get('teampassUser').admin_new_user_temporary_encryption_code+'\"></div></div>'\n                    )+\n                '</div>',\n                '<?php echo langHdl('send_by_email'); ?>',\n                '<?php echo langHdl('close'); ?>',\n                true,\n                false,\n                false\n            );\n            $('#warningModal').modal('show');\n\n            $(document).on('click', '#warningModal-button-user-pwd', function() {\n                $('#warningModal-user-pwd').removeClass('hidden');\n                $('#warningModal-button-user-pwd').prop( \"disabled\", true );\n                setTimeout(\n                    () => {\n                        $('#warningModal-user-pwd').addClass('hidden');\n                        $('#warningModal-button-user-pwd').prop( \"disabled\", false );\n                    },\n                    5000\n                );\n            });\n\n            ProcessInProgress = false;\n        }\n        return dfd.promise();\n    }\n\n\n\n    /**\n     * TOP MENU BUTTONS ACTIONS\n     */\n    $(document).on('click', '.tp-action', function() {\n        // Ensure that password strength indicator is reseted\n        //$('#form-password').focus();\n\n        // Hide if user is not admin\n        if (parseInt(store.get('teampassUser').user_admin) === 1 || parseInt(store.get('teampassUser').user_can_manage_all_users) === 1) {\n            $('.only-admin').removeClass('hidden');\n        } else {\n            $('.only-admin').addClass('hidden');\n        }\n\n        if ($(this).data('action') === 'new') {\n            // ADD NEW USER\n            $('#row-list').addClass('hidden');\n            $('#row-form, #group-create-special-folder, .not-for-admin').removeClass('hidden');\n\n            // HIDE FROM FORM ELEMENTS ONLY FOR ADMIN\n            if (parseInt(store.get('teampassUser').user_admin) === 1) {\n                $('input[type=radio].only-admin').iCheck('enable');\n            } else if (parseInt(store.get('teampassUser').user_can_manage_all_users) === 1) {\n                $('input[type=radio].only-admin').iCheck('enable');\n                $('#privilege-admin').iCheck('disable');\n                $('#privilege-hr').iCheck('disable');\n            } else {\n                $('#privilege-admin').iCheck('disable');\n                $('#privilege-hr').iCheck('disable');\n                $('#privilege-manager').iCheck('disable');\n            }\n\n            // Prepare checks\n            $('#privilege-user').iCheck('check');\n            $('#form-create-special-folder').iCheck('disable');\n\n            // Personal folder\n            if (store.get('teampassSettings').enable_pf_feature === '1') {\n                $('#form-create-personal-folder')\n                    .iCheck('enable')\n                    .iCheck('check');\n            } else {\n                $('#form-create-personal-folder').iCheck('disable');\n            }\n            \n            // MFA enabled\n            if (store.get('teampassSettings').duo === '1' || store.get('teampassSettings').google_authentication === '1') {\n                $('#form-create-mfa-enabled')\n                    .iCheck('enable')\n                    .iCheck('check');\n                $('#form-create-mfa-enabled-div').removeClass('hidden');\n            } else {\n                $('#form-create-mfa-enabled').iCheck('disable');\n                $('#form-create-mfa-enabled-div').addClass('hidden');\n            }\n\n            // What type of form? Edit or new user\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.formUserAction = 'add_new_user';\n                }\n            );\n\n        } else if ($(this).data('action') === 'edit') {\n            // SHow user\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // EDIT EXISTING USER\n            $('#row-list, #group-create-special-folder, #group-delete-user').addClass('hidden');\n            $('#row-form').removeClass('hidden');\n            $('.form-check-input').iCheck('enable');\n\n            // Personal folder\n            if (parseInt(store.get('teampassSettings').enable_pf_feature) === 0) {\n                $('#form-create-personal-folder').iCheck('disable');\n            }\n\n            // HIDE FROM FORM ELEMENTS ONLY FOR ADMIN\n            if (parseInt(store.get('teampassUser').user_admin) === 1) {\n                $('input[type=radio].only-admin').iCheck('enable');\n            } else {\n                $('input[type=radio].only-admin').iCheck('disable');\n            }\n\n            // What type of form? Edit or new user\n            var userID = $(this).data('id');\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.formUserAction = 'store_user_changes',\n                        teampassApplication.formUserId = userID; // Store user ID   \n                }\n            );\n\n            var data = {\n                'user_id': userID,\n            };\n\n            $.post(\n                \"sources/users.queries.php\", {\n                    type: \"get_user_info\",\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error === false) {\n                        // Prefil with user data\n                        $('#form-login').val(data.login);\n                        $('#form-email').val(data.email);\n                        $('#form-name').val(data.name);\n                        $('#form-lastname').val(data.lastname);\n                        $('#form-create-root-folder').iCheck(data.can_create_root_folder === 1 ? 'check' : 'uncheck');\n                        $('#form-create-personal-folder').iCheck(data.personal_folder === 1 ? 'check' : 'uncheck');\n                        $('#form-create-mfa-enabled').iCheck(data.mfa_enabled === 1 ? 'check' : 'uncheck');\n\n                        // Case of user locked\n                        if (data.disabled === 1) {\n                            $('#group-delete-user').removeClass('hidden');\n                            $('#form-delete-user-confirm').iCheck('uncheck');\n                        }\n\n                        // Clear selects\n                        $('#form-roles, #form-managedby, #form-auth, #form-forbid')\n                            .find('option')\n                            .remove();\n\n                        var tmp = '';\n                        $(data.foldersAllow).each(function(i, value) {\n                            tmp += '<option value=\"' + value.id + '\" ' + value.selected + '>' + value.title + '</option>';\n                        });\n                        $('#form-auth').append(tmp);\n\n                        tmp = '';\n                        $(data.foldersForbid).each(function(i, value) {\n                            tmp += '<option value=\"' + value.id + '\" ' + value.selected + '>' + value.title + '</option>';\n                        });\n                        $('#form-forbid').append(tmp);\n\n                        tmp = '';\n                        $(data.managedby).each(function(i, value) {\n                            tmp += '<option value=\"' + value.id + '\" ' + value.selected + '>' + value.title + '</option>';\n                        });\n                        $('#form-managedby').append(tmp);\n\n                        tmp = '';\n                        $(data.function).each(function(i, value) {\n                            tmp += '<option value=\"' + value.id + '\" ' + value.selected + '>' + value.title + '</option>';\n                        });\n                        $('#form-roles').append(tmp);\n\n                        // Generate select2\n                        $('#form-roles, #form-managedby, #form-auth, #form-forbid').select2();\n\n                        // User's current privilege\n                        if (data.admin === 1) {\n                            $('#privilege-admin').iCheck('check');\n                            $('.not-for-admin').addClass('hidden');\n                        } else if (data.can_manage_all_users === 1) {\n                            $('#privilege-hr').iCheck('check');\n                            $('.not-for-admin').removeClass('hidden');\n                        } else if (data.gestionnaire === 1) {\n                            $('#privilege-manager').iCheck('check');\n                            $('.not-for-admin').removeClass('hidden');\n                        } else if (data.read_only === 1) {\n                            $('#privilege-ro').iCheck('check');\n                            $('.not-for-admin').removeClass('hidden');\n                        } else {\n                            $('#privilege-user').iCheck('check');\n                            $('.not-for-admin').removeClass('hidden');\n                        }\n\n                        $('input:radio[name=privilege]').on('ifChanged', function() {\n                            userDidAChange = true;\n                            $(this).data('change-ongoing', true);\n                        });\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    } else {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        return false;\n                    }\n                }\n            );\n        } else if ($(this).data('action') === 'submit') {\n            // Loop on all changed fields\n            var arrayQuery = [];\n            $('.form-control').each(function(i, obj) {\n                if ($(this).data('change-ongoing') === true\n                    //|| $('#form-password').val() !== 'do_not_change'\n                ) {\n                    arrayQuery.push({\n                        'field': $(this).prop('id'),\n                        'value': $(this).val(),\n                    });\n                }\n            });\n\n            // Sanitize text fields\n            let formLogin = fieldSanitizeStep1('#form-login', false, false, false),\n                formName = fieldSanitizeStep1('#form-name', false, false, false),\n                formLastname = fieldSanitizeStep1('#form-lastname', false, false, false),\n                formEmail = fieldSanitizeStep1('#form-email', false, false, false),\n            if (formLogin === false || formName === false || formLastname === false || formEmail === false) {\n                // Label is empty\n                toastr.remove();\n                toastr.warning(\n                    'XSS attempt detected. Field has been emptied.',\n                    'Error', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            if (arrayQuery.length > 0) {\n                // Now save\n                // get lists\n                var forbidFld = [],\n                    authFld = [],\n                    groups = [];\n                $(\"#form-roles option:selected\").each(function() {\n                    groups.push($(this).val())\n                });\n                $(\"#form-auth option:selected\").each(function() {\n                    authFld.push($(this).val())\n                });\n                $(\"#form-forbid option:selected\").each(function() {\n                    forbidFld.push($(this).val())\n                });\n\n                // Mandatory?\n                var validated = true,\n                    validEmailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n                $('.required').each(function(i, obj) {\n                    if ($(this).val() === '' && $(this).hasClass('select2') === false) {\n                        $(this).addClass('is-invalid');\n                        validated = false;\n                    } else if ($('#' + $(this).attr('id') + ' :selected').length === 0 && $(this).hasClass('select2') === true) {\n                        $('#' + $(this).attr('id') + ' + span').addClass('is-invalid');\n                        validated = false;\n                    } else if ($(this).hasClass('validate-email') === true) {\n                        if ($(this).val().match(validEmailRegex)) {\n                            $(this).removeClass('is-invalid');\n                        } else {\n                            $(this).addClass('is-invalid');\n                            validated = false;\n                        }\n                    } else {\n                        $(this).removeClass('is-invalid');\n                        $('#' + $(this).attr('id') + ' + span').removeClass('is-invalid');\n                    }\n                });\n                if (validated === false) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('fields_with_mandatory_information_are_missing'); ?>',\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // SHow user\n                toastr.remove();\n                toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n                // Get number of items to treat\n                data_tmp = {\n                    'user_id': <?php echo $_SESSION['user_id']; ?>,\n                }\n                $.post(\n                    'sources/main.queries.php', {\n                        type: 'get_number_of_items_to_treat',\n                        type_category: 'action_system',\n                        data: prepareExchangedData(JSON.stringify(data_tmp), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data_tmp) {\n                        data_tmp = prepareExchangedData(data_tmp, 'decode', '<?php echo $_SESSION['key']; ?>');\n\n                        store.update(\n                            'teampassUser',\n                            function(teampassUser) {\n                                teampassUser.related_items_number = data_tmp.nbItems;\n                            }\n                        );\n                    }\n                );\n\n                //prepare data\n                var data = {\n                    'user_id': store.get('teampassApplication').formUserId,\n                    'login': formLogin,\n                    'name': formName,\n                    'lastname': formLastname,\n                    'email': formEmail,\n                    'admin': $('#privilege-admin').prop('checked'),\n                    'manager': $('#privilege-manager').prop('checked'),\n                    'hr': $('#privilege-hr').prop('checked'),\n                    'read_only': $('#privilege-ro').prop('checked'),\n                    'personal_folder': $('#form-create-personal-folder').prop('checked'),\n                    'new_folder_role_domain': $('#form-create-special-folder').prop('checked'),\n                    'domain': $('#form-special-folder').val(),\n                    'isAdministratedByRole': $('#form-managedby').val(),\n                    'groups': groups,\n                    'allowed_flds': authFld,\n                    'forbidden_flds': forbidFld,\n                    'action_on_user': 'update',\n                    'form-create-root-folder': $('#form-create-root-folder').prop('checked'),\n                    'form-user-disabled': $('#form-user-disabled').prop('checked'),\n                    'mfa_enabled': $('#form-create-mfa-enabled').prop('checked'),\n                };\n                if (debugJavascript === true) {\n                    console.log(data);\n                    console.log(store.get('teampassApplication').formUserAction);\n                }                \n                var formUserId = store.get('teampassApplication').formUserId;\n                \n                $.post(\n                    'sources/users.queries.php', {\n                        type: store.get('teampassApplication').formUserAction,\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) console.log(data);\n\n                        if (data.error !== false) {\n                            // Show error\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '<?php echo langHdl('caution'); ?>', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                        } else if (store.get('teampassApplication').formUserAction === 'add_new_user') {\n                            // Inform user\n                            toastr.remove();\n                            toastr.success(\n                                '<?php echo langHdl('new_user_info_by_mail'); ?>',\n                                '', {\n                                    timeOut: 4000\n                                }\n                            );\n                            // ---\n                        } else {\n                            // Inform user\n                            toastr.remove();\n                            toastr.success(\n                                '<?php echo langHdl('done'); ?>',\n                                '', {\n                                    timeOut: 2000\n                                }\n                            );\n                        }\n\n                        // Reload list of users\n                        oTable.ajax.reload();\n\n                        // Prepare UI\n                        $('#row-list, #group-create-special-folder, #group-delete-user').removeClass('hidden');\n                        $('#row-form').addClass('hidden');\n\n                        // Clean form\n                        $('.clear-me').val('');\n                        $('.select2').val('').change();\n                        $('.extra-form, #row-folders').addClass('hidden');\n                        $('#row-list').removeClass('hidden');\n\n                        // Prepare checks\n                        $('.form-check-input').iCheck('uncheck');\n\n                        // Remove action from store\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.formUserAction = '',\n                                    teampassApplication.formUserId = '';\n                            }\n                        );\n                    }\n                )\n            } else {\n                // No change performed on form\n                toastr.remove();\n                toastr.success(\n                    '<?php echo langHdl('no_change_performed'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n            }\n        } else if ($(this).data('action') === 'cancel') {\n            $('.clear-me').val('');\n            $('.select2').val('').change();\n            $('.extra-form, #row-folders').addClass('hidden');\n            $('#row-list').removeClass('hidden');\n\n            // Prepare checks\n            $('.form-check-input').iCheck('uncheck');\n\n            // Remove action from store\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.formUserAction = '',\n                        teampassApplication.formUserId = '';\n                }\n            );\n        } else if ($(this).data('action') === 'qrcode') {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // This sends a GA Code by email to user\n            data = {\n                'user_id': $(this).data('id'),\n                'demand_origin': 'users_management_list',\n                'send_email': 1\n            }\n\n            $.post(\n                'sources/main.queries.php', {\n                    type: 'ga_generate_qr',\n                    type_category: 'action_user',\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('share_sent_ok'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n            // ---\n        } else if ($(this).data('action') === 'new-password') {\n            var userId = $(this).data('id');\n            // Check if no tasks on-going for this user\n            data_to_send = {\n                'user_id': userId,\n            }\n            $.post(\n                \"sources/users.queries.php\", {\n                    type: \"get-user-infos\",\n                    data: prepareExchangedData(JSON.stringify(data_to_send), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    \n                    if (data.error === true) {\n                        // error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Continue   \n                        if (data.user_infos.ongoing_process_id !== null) {  \n                            toastr.remove();\n                            toastr.warning(\n                                data.message,\n                                '<?php echo langHdl('user_encryption_ongoing'); ?>', {\n                                    timeOut: 10000,\n                                    progressBar: true\n                                }\n                            ); \n                        } else {                 \n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // PRepare info\n                            $('#dialog-admin-change-user-password-info')\n                                .html('<i class=\"icon fas fa-info mr-2\"></i><?php echo langHdl('admin_change_user_password_info'); ?>');\n                            $(\"#dialog-admin-change-user-password-progress\").html('<?php echo langHdl('provide_current_psk_and_click_launch'); ?>');\n\n                            // SHow form\n                            $('#dialog-admin-change-user-password').removeClass('hidden');\n\n                            $('#admin_change_user_password_target_user').val(userId);\n                        }\n                    }\n                }\n            );\n\n            // ---\n        } else if ($(this).data('action') === 'new-enc-code') {\n            // HIde\n            $('.content-header, .content').addClass('hidden');\n\n            // PRepare info\n            $('#dialog-admin-change-user-password-info')\n                .html('<i class=\"icon fas fa-info mr-2\"></i><?php echo langHdl('admin_change_user_encryption_code_info'); ?>');\n            $(\"#dialog-admin-change-user-password-progress\").html('<?php echo langHdl('provide_current_psk_and_click_launch'); ?>');\n\n            // SHow form\n            $('#dialog-admin-change-user-password').removeClass('hidden');\n\n            $('#admin_change_user_encryption_code_target_user').val($(this).data('id'));\n            // ---\n        } else if ($(this).data('action') === 'logs') {\n            $('#row-list, #row-folders').addClass('hidden');\n            $('#row-logs').removeClass('hidden');\n            $('#row-logs-title').text(\n                $(this).data('fullname')\n            )\n            var userID = $(this).data('id');\n\n            //Launch the datatables pluggin\n            var oTableLogs = $('#table-logs').DataTable({\n                'destroy': true,\n                'paging': true,\n                'searching': true,\n                'order': [\n                    [1, 'asc']\n                ],\n                'info': true,\n                'processing': false,\n                'serverSide': true,\n                'responsive': true,\n                'select': true,\n                'stateSave': false,\n                'retrieve': false,\n                'autoWidth': true,\n                'ajax': {\n                    url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/user.logs.datatables.php',\n                    data: function(d) {\n                        d.userId = userID;\n                    }\n                },\n                'language': {\n                    'url': '<?php echo $SETTINGS['cpassman_url']; ?>/includes/language/datatables.<?php echo $_SESSION['user']['user_language']; ?>.txt'\n                },\n                'columns': [{\n                        className: 'dt-body-left'\n                    },\n                    {\n                        className: 'dt-body-left'\n                    },\n                    {\n                        className: 'dt-body-left'\n                    }\n                ],\n                'preDrawCallback': function() {\n                    toastr.remove();\n                    toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n                },\n                'drawCallback': function() {\n                    // Tooltips\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                },\n            });\n\n\n        } else if ($(this).data('action') === 'access-rights') {\n            $('#row-list, #row-logs').addClass('hidden');\n            $('#row-folders').removeClass('hidden');\n            $('#row-folders-title').text(\n                $(this).data('fullname')\n            )\n            var userID = $(this).data('id');\n\n            // Show spinner\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            $('#row-folders-results').html('');\n\n            // Send query\n            $.post(\n                'sources/users.queries.php', {\n                    type: 'user_folders_rights',\n                    user_id: userID,\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Show table\n                        $('#row-folders-results').html(data.html);\n\n                        // Prepare tooltips\n                        $('.infotip').tooltip();\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'disable-user') {\n            var userID = $(this).data('id');\n            showModalDialogBox(\n                '#warningModal',\n                '<i class=\"fas fa-exclamation-circle fa-lg warning mr-2\"></i><?php echo langHdl('your_attention_please'); ?>',\n                '<div class=\"form-group\">'+\n                    '<span class=\"mr-3\"><?php echo langHdl('user_disable_status'); ?></span>'+\n                    '<input type=\"checkbox\" class=\"form-check-input form-control flat-blue\" id=\"user-disabled\">' +\n                '</div>',\n                '<?php echo langHdl('perform'); ?>',\n                '<?php echo langHdl('cancel'); ?>'\n            );\n            $('input[type=\"checkbox\"].flat-blue').iCheck({\n                checkboxClass: 'icheckbox_flat-blue',\n            });\n            $(document).on('click', '#warningModalButtonAction', function() {                \n\n                // Show spinner\n                toastr.remove();\n                toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n                $('#warningModal').modal('hide');\n\n                var data = {\n                    'user_id': userID,\n                    'disabled_status': $('#user-disabled').prop('checked') === true ? 1 : 0,\n                };\n\n                // Send query\n                $.post(\n                    'sources/users.queries.php', {\n                        type: 'manage_user_disable_status',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) console.log(data);\n\n                        if (data.error !== false) {\n                            // Show error\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '<?php echo langHdl('caution'); ?>', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                        } else {\n                            // Show icon or not\n                            if ($('#user-disabled').prop('checked') === true) {\n                                $('#user-login-'+userID).before('<i class=\"fas fa-user-slash infotip text-danger mr-2\" title=\"<?php echo langHdl('account_is_locked');?>\" id=\"user-disable-'+userID+'\"></i>');\n                            } else {\n                                $('#user-disable-'+userID).remove();\n                            }\n                            \n\n                            // Prepare tooltips\n                            $('.infotip').tooltip();\n                            // Inform user\n                            toastr.remove();\n                            toastr.success(\n                                '<?php echo langHdl('done'); ?>',\n                                '', {\n                                    timeOut: 1000\n                                }\n                            );\n                        }\n                    }\n                );\n            });\n\n            /**/\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'delete-user') {\n            var userID = $(this).data('id');\n            showModalDialogBox(\n                '#warningModal',\n                '<i class=\"fas fa-exclamation-circle fa-lg warning mr-2\"></i><?php echo langHdl('your_attention_please'); ?>',\n                '<div class=\"form-group\">'+\n                    '<span class=\"mr-3\"><?php echo langHdl('by_clicking_this_checkbox_confirm_user_deletion'); ?></span>'+\n                    '<input type=\"checkbox\" class=\"form-check-input form-control flat-blue\" id=\"user-to-delete\">' +\n                '</div>',\n                '<?php echo langHdl('perform'); ?>',\n                '<?php echo langHdl('cancel'); ?>'\n            );\n            $('input[type=\"checkbox\"].flat-blue').iCheck({\n                checkboxClass: 'icheckbox_flat-blue',\n            });\n            $(document).on('click', '#warningModalButtonAction', function() {\n                if ($('#user-to-delete').prop('checked') === false) {\n                    $('#warningModal').modal('hide');\n                    return false;\n                }             \n\n                // Show spinner\n                toastr.remove();\n                toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n                $('#warningModal').modal('hide');\n\n                var data = {\n                    'user_id': userID,\n                };\n\n                // Send query\n                $.post(\n                    'sources/users.queries.php', {\n                        type: 'delete_user',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) console.log(data);\n\n                        if (data.error !== false) {\n                            // Show error\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '<?php echo langHdl('caution'); ?>', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                        } else {\n                            // refresh table content\n                            oTable.ajax.reload();\n\n                            // Prepare tooltips\n                            $('.infotip').tooltip();\n                            // Inform user\n                            toastr.remove();\n                            toastr.success(\n                                '<?php echo langHdl('done'); ?>',\n                                '', {\n                                    timeOut: 1000\n                                }\n                            );\n                        }\n                    }\n                );\n            });\n\n            /**/\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'refresh') {\n            $('.form').addClass('hidden');\n            $('#users-list').removeClass('hidden');\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n            oTable.ajax.reload();\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'propagate') {\n            $('#row-list, #row-folders').addClass('hidden');\n            $('#row-propagate').removeClass('hidden');\n\n            // Show spinner\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load list of users\n            $.post(\n                'sources/users.queries.php', {\n                    type: 'get_list_of_users_for_sharing',\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Build select\n                        var html = '';\n                        $.each(data.values, function(i, value) {\n                            html += '<option value=\"' + value.id + '\" data-groups=\"' + value.groups + '\" data-managed-by=\"' + value.managedBy + '\" data-folders-allowed=\"' + value.foldersAllowed + '\" data-folders-forbidden=\"' + value.foldersForbidden + '\" data-groups-id=\"' + value.groupIds + '\" data-managed-by-id=\"' + value.managedById + '\" data-folders-allowed-id=\"' + value.foldersAllowedIds + '\" data-folders-forbidden-id=\"' + value.foldersForbiddenIds + '\" data-admin=\"' + value.admin + '\" data-manager=\"' + value.manager + '\" data-hr=\"' + value.hr + '\" data-read-only=\"' + value.readOnly + '\" data-personal-folder=\"' + value.personalFolder + '\" data-root-folder=\"' + value.rootFolder + '\">' + value.name + ' ' + value.lastname + ' [' + value.login + ']</option>';\n                        });\n\n                        $('#propagate-from, #propagate-to')\n                            .find('option')\n                            .remove()\n                            .end()\n                            .append(html)\n                            .change();\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'do-propagate') {\n            // Show spinner\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n\n            // destination users\n            var userIds = $('#propagate-to').val();\n\n            if (userIds.length === 0) return false;\n\n            // Prepare data\n            var data = {\n                source_id: $(\"#propagate-from option:selected\").val(),\n                destination_ids: userIds,\n                user_functions: $(\"#propagate-from option:selected\").data('groups-id'),\n                user_managedby: $(\"#propagate-from option:selected\").data('managed-by-id'),\n                user_fldallowed: $(\"#propagate-from option:selected\").data('folders-allowed-id'),\n                user_fldforbid: $(\"#propagate-from option:selected\").data('folders-forbidden-id'),\n                user_admin: $(\"#propagate-from option:selected\").data('admin'),\n                user_manager: $(\"#propagate-from option:selected\").data('manager'),\n                user_hr: $(\"#propagate-from option:selected\").data('hr'),\n                user_readonly: $(\"#propagate-from option:selected\").data('read-only'),\n                user_personalfolder: $(\"#propagate-from option:selected\").data('personal-folder'),\n                user_rootfolder: $(\"#propagate-from option:selected\").data('root-folder'),\n            };\n            if (debugJavascript === true) console.log(data);\n            $.post(\n                \"sources/users.queries.php\", {\n                    type: \"update_users_rights_sharing\",\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n\n                    if (data.error === true) {\n                        // ERROR\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        $('.clear-me').val('');\n                        $('.select2').val('').change();\n                        $('.extra-form, #row-folders').addClass('hidden');\n                        $('#row-list').removeClass('hidden');\n\n                        // Prepare checks\n                        $('.form-check-input')\n                            .iCheck('disable')\n                            .iCheck('uncheck');\n\n                        // Remove action from store\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.formUserAction = '',\n                                    teampassApplication.formUserId = '';\n                            }\n                        );\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'ldap-sync') {\n            $('.form').addClass('hidden');\n            $('#row-ldap').removeClass('hidden');\n\n            refreshListUsersLDAP();\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'close') {\n            $('.extra-form').addClass('hidden');\n            $('#users-list').removeClass('hidden');\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'ldap-existing-users') {\n            refreshListUsersLDAP();\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'ldap-add-role') {\n            $('#ldap-users-table').addClass('hidden');\n            $('#ldap-new-role').removeClass('hidden');\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'close-new-role') {\n            $('#ldap-users-table').removeClass('hidden');\n            $('#ldap-new-role').addClass('hidden');\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'add-new-role') {\n            if ($('#ldap-new-role-selection').val() === '') {\n                // ERROR\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                    '<?php echo langHdl('caution'); ?>', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            } else {\n                // Add new role to Teampass\n\n                // Prepare data\n                var data = {\n                    'label': DOMPurify.sanitize($('#ldap-new-role-selection').val()),\n                    'complexity': $('#ldap-new-role-complexity').val(),\n                    'allowEdit': 0,\n                    'action': 'add_role',\n                    'folderId' : -1,\n                }\n\n                if (debugJavascript === true) console.log(data);\n                \n                $.post(\n                    'sources/roles.queries.php', {\n                        type: 'change_role_definition',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        //decrypt data\n                        data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) console.log(data);\n\n                        if (data.error === true) {\n                            // ERROR\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '<?php echo langHdl('caution'); ?>', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                        } else {\n                            $('#ldap-new-role-selection').val('');\n                            $('#ldap-users-table').removeClass('hidden');\n                            $('#row-ldap-body').html('');\n                            $('#ldap-new-role').addClass('hidden');\n\n                            refreshListUsersLDAP();\n                        }\n                    }\n                );\n\n            }\n\n            /**/\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'new-otp') {// Check if no tasks on-going for this user\n            data_to_send = {\n                'user_id': $(this).data('id'),\n            }\n            $.post(\n                \"sources/users.queries.php\", {\n                    type: \"get-user-infos\",\n                    data: prepareExchangedData(JSON.stringify(data_to_send), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n\n                    if (data.error === true) {\n                        // error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Continue   \n                        if (data.user_infos.ongoing_process_id !== null) {  \n                            toastr.remove();\n                            toastr.warning(\n                                data.message,\n                                '<?php echo langHdl('user_encryption_ongoing'); ?>', {\n                                    timeOut: 10000,\n                                    progressBar: true\n                                }\n                            ); \n                        } else {  \n                            var userID = data.user_infos.id;\n                            showModalDialogBox(\n                                '#warningModal',\n                                '<i class=\"fas fa-exclamation-circle fa-lg warning mr-2\"></i><?php echo langHdl('your_attention_please'); ?>',\n                                '<div class=\"form-group\">'+\n                                    '<span class=\"mr-3\"><?php echo langHdl('generate_new_otp_informations'); ?></span>'+\n                                '</div>',\n                                '<?php echo langHdl('perform'); ?>',\n                                '<?php echo langHdl('cancel'); ?>'\n                            );\n                            \n                            $(document).on('click', '#warningModalButtonAction', function() {                \n                                // prepare user\n\n                                // Show spinner\n                                toastr.remove();\n                                toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i><span class=\"close-toastr-progress\"></span>');\n\n                                // generate keys\n                                generateUserKeys(\n                                    {\n                                        'user_id': userID,\n                                    },\n                                    ''\n                                );\n                            });\n                        }\n                    }\n                }\n            );\n\n            /**/\n            //\n            // --- END\n            //\n        }\n    });\n\n\n    /**\n     * Permit to show some info while selecting a  User\n     */\n    $(document).on('change', '#propagate-from', function() {\n        var selectedOption = $(this).find('option:selected');\n        $('#propagate-user-roles').html($(selectedOption).data('groups'));\n        $('#propagate-user-managedby').html($(selectedOption).data('managed-by'));\n        $('#propagate-user-allowed').html($(selectedOption).data('folders-allowed'));\n        $('#propagate-user-fordidden').html($(selectedOption).data('folders-forbidden'));\n    });\n\n\n    /**\n     * TRACK CHANGES IN FORM\n     */\n    $('#form-user .track-change')\n        .on('change', function() {\n            if ($(this).val() !== null && $(this).val().length > 0) {\n                userDidAChange = true;\n                $(this).data('change-ongoing', true);\n            } else {\n                $(this).data('change-ongoing', false);\n            }\n        })\n        .on('ifChecked', function() {\n            userDidAChange = true;\n            $(this).data('change-ongoing', true);\n        });\n\n    //************************************************************* */\n\n\n\n    /**\n     * EDIT EACH ROW\n     */\n    var currentText = '',\n        item = '',\n        initialColumnWidth = '',\n        actionOnGoing = false,\n        field = '',\n        columnId = '',\n        tableDef = {\n            'login': {\n                'column': 2\n            },\n            'name': {\n                'column': 3\n            },\n            'lastname': {\n                'column': 4\n            },\n            'isAdministratedByRole': {\n                'column': 5\n            },\n            'fonction_id': {\n                'column': 6\n            }\n        };\n\n    /**\n     * EDIT TEXT INPUT\n     */\n    $(document).on('click', '.edit-text', function() {\n        currentText = $(this).text();\n        item = $(this);\n        field = $(this).data('field');\n        columnId = tableDef[field].column;\n\n        $(this)\n            .addClass('hidden')\n            .after('<input type=\"text\" class=\"form-control form-item-control remove-me save-me\" value=\"' + currentText + '\">');\n\n        // Store current width and change it\n        initialColumnWidth = $('#table-users thead th:eq(' + (columnId - 1) + ')').width();\n        $('#table-users thead th:eq(' + (columnId - 1) + ')').width('300');\n        if (debugJavascript === true) console.log('Width ' + initialColumnWidth)\n\n        // Launch save on focus lost\n        $('.save-me')\n            .focus()\n            .focusout(function() {\n                if (actionOnGoing === false) {\n                    actionOnGoing = true;\n                    saveChange(item, currentText, $(this), field);\n                }\n            });\n    });\n\n    /**\n     * EDIT SELECT LIST\n     */\n    $(document).on('click', '.edit-select', function() {\n        currentText = $(this).text();\n        item = $(this);\n        field = $(this).data('field');\n        columnId = tableDef[field].column;\n        if (debugJavascript === true) console.log(columnId)\n\n        $(this).addClass('hidden');\n\n        // Show select\n        $(\"#select-managedBy\")\n            .insertAfter('#' + $(this).attr('id'))\n            .after('<i class=\"fa fa-close text-danger pointer temp-button mr-3\" id=\"select-managedBy-close\"></i>');\n        $('#select-managedBy option[value=\"' + $(this).data('value') + '\"]').prop('selected', true);\n\n        // Store current width and change it\n        initialColumnWidth = $('#table-users thead th:eq(' + (columnId - 1) + ')').width();\n        $('#table-users thead th:eq(' + (columnId - 1) + ')').width('300');\n\n        // Launch save on focus lost\n        $('.save-me')\n            .focus()\n            .focusout(function() {\n                if (actionOnGoing === false) {\n                    actionOnGoing = true;\n                    saveChange(item, currentText, $(this), field);\n                }\n            });\n\n        $('#select-managedBy-close').click(function() {\n            $(\"#select-managedBy\").detach().appendTo('#hidden-managedBy');\n            $('#table-users thead th:eq(' + (columnId - 1) + ')').width(initialColumnWidth);\n            $('.edit-select').removeClass('hidden');\n            $('.tmp-loader, .temp-button').remove();\n        });\n    });\n\n\n    /**\n     * MANAGE USER KEYS PRESSED\n     */\n    $(document).keyup(function(e) {\n        if (e.keyCode === 27) {\n            // Escape Key\n            $('.remove-me, .tmp-loader').remove();\n            $('.edit-text').removeClass('hidden');\n        }\n        if (e.keyCode === 13 && actionOnGoing === false) {\n            // Enter key\n            actionOnGoing = true;\n            saveChange(item, currentText, $(':focus'), field);\n        }\n    });\n\n\n    function saveChange(item, currentText, change, field) {\n        if (change.val() !== currentText) {\n            change\n                .after('<i class=\"fa fa-refresh fa-spin fa-fw tmp-loader\"></i>');\n\n            // prepare data\n            var data = {\n                'user_id': item.data('id'),\n                'field': field,\n                'value': change.val()\n            };\n            \n            // Save\n            $.post(\n                'sources/users.queries.php', {\n                    type: 'save_user_change',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    if (change.is('input') === true) {\n                        change.remove();\n                        $('.tmp-loader').remove();\n                        item\n                            .text(change.val())\n                            .removeClass('hidden');\n                        $('#table-users thead th:eq(' + (columnId - 1) + ')').width(initialColumnWidth)\n                    } else if (change.is('select') === true) {\n                        $(\"#select-managedBy\").detach().appendTo('#hidden-managedBy');\n                        $('#table-users thead th:eq(' + (columnId - 1) + ')').width(initialColumnWidth)\n                        $('.tmp-loader, .temp-button').remove();\n\n                        // Show change\n                        if (debugJavascript === true) console.log(change)\n                        item\n                            .html(change.text())\n                            .attr('data-value', change.val())\n                            .removeClass('hidden');\n                    }\n                    actionOnGoing = false;\n                },\n                'json'\n            );\n        } else {\n            change.remove();\n            $('.tmp-loader').remove();\n            item\n                .text(change.val())\n                .removeClass('hidden');\n            $('#table-users thead th:eq(' + (columnId - 1) + ')').width(initialColumnWidth)\n        }\n    }\n\n    /**\n     * Refreshing list of users from LDAP\n     *\n     * @return void\n     */\n    function refreshListUsersLDAP() {\n        // FIND ALL USERS IN LDAP\n        //toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i><span class=\"close-toastr-progress\"></span>');\n\n        $('#row-ldap-body')\n            .addClass('overlay')\n            .html('');\n\n        $.post(\n            \"sources/users.queries.php\", {\n                type: \"get_list_of_users_in_ldap\",\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data)\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // loop on users list\n                    var html = '',\n                        groupsNumber = 0,\n                        userLogin,\n                        group;\n                    var entry;\n                    $.each(data.entries, function(i, entry) {\n                        userLogin = entry[store.get('teampassSettings').ldap_user_attribute] !== undefined ? entry[store.get('teampassSettings').ldap_user_attribute][0] : '';\n                        // CHeck if not empty\n                        if (userLogin !== '') {\n                            html += '<tr>' +\n                                '<td>' + userLogin +\n                                '</td>' +\n                                '<td>' +\n                                '<i class=\"fas fa-info-circle ml-3 infotip text-info pointer text-center\" data-toggle=\"tooltip\" data-html=\"true\" title=\"' +\n                                '<p class=\\'text-left\\'><i class=\\'fas fa-user mr-1\\'></i>' +\n                                (entry.displayname !== undefined ? '' + entry.displayname[0] + '' : '') + '</p>' +\n                                '<p class=\\'text-left\\'><i class=\\'fas fa-envelope mr-1\\'></i>' + (entry.mail !== undefined ? '' + entry.mail[0] + '' : '') + '</p>' +\n                                '\"></i>' +\n                                '</td><td>' +\n                                (entry.userInTeampass === 0 ? '' :\n                                '<i class=\"fas ' + (entry.userAuthType !== undefined && entry.userAuthType === 'ldap' ? 'fa-toggle-on text-info ' : 'fa-toggle-off ') + 'mr-1 text-center pointer action-change-ldap-synchronization\" data-user-id=\"' + entry.userInTeampass + '\" data-user-auth-type=\"' + entry.userAuthType + '\"></i>') +\n                                '</td><td>';\n                            groupsNumber = 0;\n                            $.each(entry.memberof, function(j, group) {\n                                var regex = String(group).replace('CN=', 'cn').match(/(cn=)(.*?),/g);\n                                if (regex !== null) {\n                                    group = regex[0].replace('cn=', '').replace(',', '');\n                                    // Check if this user has this group in Teampass\n                                    if (entry.teampass !== undefined && entry.ldap_groups.filter(p => p.title === group).length > 0) {\n                                        html += group + '<i class=\"far fa-check-circle text-success ml-2 infotip\" title=\"<?php echo langHdl('user_has_this_role_in_teampass'); ?>\"></i><br>';\n                                    } else {\n                                        // Check if this group exists in Teampass and propose to add it\n                                        tmp = data.teampass_groups.filter(p => p.title === group);\n                                        if (tmp.length > 0 && entry.userInTeampass === 0) {\n                                            html += group + '<i class=\"fas fa-user-graduate text-primary ml-2 pointer infotip action-add-role-to-user\" title=\"<?php echo langHdl('add_user_to_role'); ?>\" data-user-id=\"' + entry.userInTeampass + '\" data-role-id=\"' + tmp[0].id + '\"></i><br>';\n                                        } else {\n                                            html += group + '<br>';\n                                        }\n                                    }\n                                    groupsNumber++;\n                                }\n                            });\n                            html += '</td><td>';\n                            // Action icons\n                            html += (entry.userInTeampass === 0 ? '<i class=\"fas fa-user-plus text-warning ml-2 infotip pointer add-user-icon\" title=\"<?php echo langHdl('add_user_in_teampass'); ?>\" data-user-login=\"' + userLogin + '\" data-user-email=\"' + (entry.mail !== undefined ? entry.mail[0] : '') + '\" data-user-name=\"' + (entry.givenname !== undefined ? entry.givenname[0] : '') + '\" data-user-lastname=\"' + (entry.sn !== undefined ? entry.sn[0] : '') + '\"></i>' : '');\n\n                            // Only of not admin\n                            /*if (userLogin !== 'admin') {\n                                html += (entry.teampass.auth === 'ldap' ? '<i class=\"fas fa-link text-success ml-2 infotip pointer auth-local\" title=\"<?php echo langHdl('ldap_user_password_is_used_for_authentication'); ?>\" data-user-id=\"' + entry.teampass.id + '\"></i>' : '<i class=\"fas fa-unlink text-orange ml-2 infotip pointer auth-ldap\" title=\"<?php echo langHdl('local_user_password_is_used_for_authentication'); ?>\" data-user-id=\"' + entry.teampass.id + '\"></i>');\n                            }*/\n\n                            html += '</td></tr>';\n                        }\n                    });\n\n                    $('#row-ldap-body').html(html);\n\n                    $('#row-ldap-body').removeClass('overlay');\n\n                    $('.infotip').tooltip('update');\n\n                    // Build list box of new roles that could be created\n                    $('#ldap-new-role-selection')\n                        .empty()\n                        .append('<option value=\"\">--- <?php echo langHdl('select'); ?> ---</option>');\n                    $.each(data.ldap_groups, function(i, group) {\n                        tmp = data.teampass_groups.filter(p => p.title === group);\n                        if (tmp.length === 0) {\n                            $('#ldap-new-role-selection').append(\n                                '<option value=\"' + group + '\">' + group + '</option>'\n                            );\n                        }\n                    });\n\n                    // Inform user\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    $('.close-toastr-progress').closest('.toast').remove();\n                }\n            }\n        );\n    }\n\n    /**\n     * Permits to add a role to a Teampass user\n     *\n     * @return void\n     */\n    function addRoleToUser() {\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // prepare data\n        var data = {\n            'user_id': $('.selected-role').data('user-id'),\n            'field': 'fonction_id',\n            'value': $('.selected-role').data('role-id'),\n            'context': 'add_one_role_to_user'\n        };\n\n        $.post(\n            'sources/users.queries.php', {\n                type: 'save_user_change',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // CHange icon\n                    $('.selected-role')\n                        .removeClass('fas fa-user-graduate text-primary pointer action-add-role-to-user')\n                        .addClass('far fa-check-circle text-success')\n                        .prop('title', '<?php echo langHdl('user_has_this_role_in_teampass'); ?>');\n\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n                $('.selected-role').removeClass('selected-role');\n            }\n        );\n    }\n\n    $(document).on('click', '.action-add-role-to-user', function() {\n        $(this).addClass('selected-role');\n\n        toastr.warning(\n            '&nbsp;<button type=\"button\" class=\"btn clear btn-toastr\" style=\"width:100%;\" onclick=\"addRoleToUser()\"><?php echo langHdl('please_confirm'); ?></button>',\n            '<?php echo langHdl('info'); ?>', {\n                positionClass: 'toast-top-center',\n                closeButton: true\n            }\n        );\n    });\n\n    // Enable/disable ldap sync on user\n    $(document).on('click', '.action-change-ldap-synchronization', function() {\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // prepare data\n        var data = {\n            'user_id': $(this).data('user-id'),\n            'field': 'auth_type',\n            'value': $(this).hasClass('fa-toggle-off') === true ? 'ldap' : 'local',\n            'context': ''\n        },\n        selectedIcon = $(this);\n\n        $.post(\n            'sources/users.queries.php', {\n                type: 'save_user_change',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // CHange icon format\n                    if (selectedIcon.hasClass('fa-toggle-off') === true) {\n                        selectedIcon\n                            .removeClass('fa-toggle-off')\n                            .addClass('fa-toggle-on text-info')\n                            .prop('data-user-auth-type', 'ldap');\n                    } else {\n                        selectedIcon\n                            .removeClass('fa-toggle-on text-info')\n                            .addClass('fa-toggle-off')\n                            .prop('data-user-auth-type', 'local');\n                    }\n\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * Permits to add an AD user in Teampass\n     *\n     * @return void\n     */\n    function addUserInTeampass() {\n        $('#warningModal').modal('hide');\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i><span class=\"close-toastr-progress\"></span>');\n\n        // what roles\n        var roles = [];\n        $(\"#ldap-user-roles option:selected\").each(function() {\n            roles.push($(this).val())\n        });\n\n        // prepare data\n        var data = {\n            'login': DOMPurify.sanitize($('.selected-user').data('user-login')),\n            'name': DOMPurify.sanitize($('.selected-user').data('user-name') === '' ? $('#ldap-user-name').val() : $('.selected-user').data('user-name')),\n            'lastname': DOMPurify.sanitize($('.selected-user').data('user-lastname')),\n            'email': DOMPurify.sanitize($('.selected-user').data('user-email')),\n            'roles' : roles,\n        };\n        if (debugJavascript === true) console.log(data)\n\n        $.post(\n            'sources/users.queries.php', {\n                type: 'add_user_from_ldap',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n                userTemporaryCode = data.user_code;\n                constVisibleOTP = data.visible_otp;\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {                    \n                    generateUserKeys(data, userTemporaryCode);\n                }\n            }\n        );\n    }\n\n\n    function generateUserKeys(data, userTemporaryCode)\n    {\n        // manage keys encryption for new user\n        // Case where we need to encrypt new keys for the user\n        // Process is: \n        // 2/ clear all keys for this user\n        // 3/ generate keys for this user with encryption key\n\n        \n        // If expected to create new encryption key\n        var parameters = {\n            'user_id': data.user_id,\n        };\n\n        if (debugJavascript === true) {\n            console.log(parameters);\n            console.info('Prepare TASK for new user encryption keys')\n        }\n        $.post(\n            'sources/main.queries.php', {\n                type: 'generate_temporary_encryption_key',\n                type_category: 'action_key',\n                data: prepareExchangedData(JSON.stringify(parameters), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data_otc) {\n                data_otc = prepareExchangedData(data_otc, 'decode', '<?php echo $_SESSION['key']; ?>');\n\n                if (data_otc.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data_otc.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // If expected, show the OPT to the admin\n                    if (data_otc.visible_otp === true) {\n                        showModalDialogBox(\n                            '#warningModal',\n                            '<i class=\"fa-solid fa-user-secret mr-2\"></i><<?php echo langHdl('your_attention_is_required'); ?>',\n                            '<?php echo langHdl('show_encryption_code_to_admin'); ?>' +\n                            '<div><input class=\"form-control form-item-control flex-nowrap ml-2\" value=\"' + data_otc.code + '\" readonly></div>',\n                            '',\n                            '<?php echo langHdl('close'); ?>'\n                        );\n                    }\n\n                    // update the process\n                    // add all tasks\n                    var data_to_send = {\n                        user_id: data.user_id,\n                        user_code: data_otc.code,\n                    }\n\n                    //console.log(data_to_send);\n                    //return false;\n\n                    // Do query\n                    $.post(\n                        \"sources/users.queries.php\", {\n                            type: \"create_new_user_tasks\",\n                            data: prepareExchangedData(JSON.stringify(data_to_send), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                            key: '<?php echo $_SESSION['key']; ?>'\n                        },\n                        function(data_tasks) {\n                            data_tasks = prepareExchangedData(data_tasks, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                            \n                            if (data_tasks.error === true) {\n                                // error\n                                toastr.remove();\n                                toastr.error(\n                                    data_tasks.message,\n                                    '<?php echo langHdl('caution'); ?>', {\n                                        timeOut: 5000,\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                // show message to user\n                                // Finalizing\n                                //$('#warningModal').modal('hide');\n\n                                // Now close in progress toast\n                                $('.close-toastr-progress').closest('.toast').remove();\n                                \n                                // refresh the list of users in LDAP not added in Teampass\n                                refreshListUsersLDAP();    \n\n                                // Rrefresh list of users in Teampass\n                                oTable.ajax.reload();\n\n                                toastr.success(\n                                    '<?php echo langHdl('done'); ?>',\n                                    '', {\n                                        timeOut: 1000\n                                    }\n                                );\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Permits to change the auth type of the user\n     *\n     * @return void\n     */\n    function changeUserAuthType(auth) {\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // prepare data\n        var data = {\n            'id': $('.selected-user').data('user-id'),\n            'auth_type': auth\n        };\n        if (debugJavascript === true) console.log(data)\n\n        $.post(\n            'sources/users.queries.php', {\n                type: 'change_user_auth_type',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    refreshListUsersLDAP();\n                }\n            }\n        );\n    }\n\n    $(document)\n        .on('click', '.add-user-icon', function() {\n            var thisElement = $(this);\n            $(thisElement).addClass('selected-user');\n\n            showModalDialogBox(\n                '#warningModal',\n                '<i class=\"fas fa-user-plus fa-lg warning mr-2\"></i><?php echo langHdl('new_ldap_user_info'); ?> <b>'+$(this)[0].dataset.userLogin+'</b>',\n                '<div class=\"form-group\">'+\n                    '<label for=\"ldap-user-name\"><?php echo langHdl('name'); ?></label>'+\n                    '<input readonly type=\"text\" class=\"form-control required\" id=\"ldap-user-name\" value=\"'+ $(this).attr('data-user-name')+'\">'+\n                '</div>'+\n                '<div class=\"form-group\">'+\n                    '<label for=\"ldap-user-name\"><?php echo langHdl('lastname'); ?></label>'+\n                    '<input readonly type=\"text\" class=\"form-control required\" id=\"ldap-user-lastname\" value=\"'+ $(this).attr('data-user-lastname')+'\">'+\n                '</div>'+\n                '<div class=\"form-group\">'+\n                    '<label for=\"ldap-user-name\"><?php echo langHdl('email'); ?></label>'+\n                    '<input readonly type=\"text\" class=\"form-control required\" id=\"ldap-user-email\" value=\"'+ $(this).attr('data-user-email')+'\">'+\n                '</div>'+\n                '<div class=\"form-group\">'+\n                    '<label for=\"ldap-user-roles\"><?php echo langHdl('roles'); ?></label>'+\n                    '<select id=\"ldap-user-roles\" class=\"form-control form-item-control select2 required\" style=\"width:100%;\" multiple=\"multiple\">'+\n                    '<?php echo $optionsRoles; ?></select>'+\n                '</div>',\n                '<?php echo langHdl('perform'); ?>',\n                '<?php echo langHdl('cancel'); ?>'\n            );\n            $(document).on('click', '#warningModalButtonAction', function() {\n                if ($('#ldap-user-name').val() !== \"\" && $('#ldap-user-roles :selected').length > 0) {\n                    addUserInTeampass();\n                    $(thisElement).removeClass('selected-user');\n                }\n            });\n            $(document).on('click', '#warningModalButtonClose', function() {\n                $(thisElement).removeClass('selected-user');\n            });\n        })\n        .on('click', '.auth-ldap', function() {\n            $(this).addClass('selected-user');\n\n            toastr.warning(\n                '&nbsp;<button type=\"button\" class=\"btn clear btn-toastr\" style=\"width:100%;\" onclick=\"changeUserAuthType(\\'ldap\\')\"><?php echo langHdl('please_confirm'); ?></button>',\n                '<?php echo langHdl('change_authentification_type_to_ldap'); ?>', {\n                    positionClass: 'toast-top-center',\n                    closeButton: true\n                }\n            );\n        })\n        .on('click', '.auth-local', function() {\n            $(this).addClass('selected-user');\n\n            toastr.warning(\n                '&nbsp;<button type=\"button\" class=\"btn clear btn-toastr\" style=\"width:100%;\" onclick=\"changeUserAuthType(\\'local\\')\"><?php echo langHdl('please_confirm'); ?></button>',\n                '<?php echo langHdl('change_authentification_type_to_local'); ?>', {\n                    positionClass: 'toast-top-center',\n                    closeButton: true\n                }\n            );\n        });\n\n\n\n    //]]>\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      identify.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nuse LdapRecord\\Connection;\nuse LdapRecord\\Container;\n\nrequire_once 'SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nif (isset($_SESSION['CPM']) === false || (int) $_SESSION['CPM'] !== 1) {\n    //die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\nif (! isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir']) === true || $SETTINGS['cpassman_dir'] === '.') {\n    $SETTINGS = [];\n    $SETTINGS['cpassman_dir'] = '..';\n}\n\n// Load libraries\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\ninclude_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare POST variables\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_login = filter_input(INPUT_POST, 'login', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_FULL_SPECIAL_CHARS, FILTER_FLAG_NO_ENCODE_QUOTES);\n\n// connect to the server\nif (defined('DB_PASSWD_CLEAR') === false) {\n    define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n}\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\nif (defined('DB_PASSWD_CLEAR') === false) {\n    define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n}\nDB::$host = DB_HOST;\nDB::$user = DB_USER;\nDB::$password = DB_PASSWD_CLEAR;\nDB::$dbName = DB_NAME;\nDB::$port = DB_PORT;\nDB::$encoding = DB_ENCODING;\nDB::$ssl = DB_SSL;\nDB::$connect_options = DB_CONNECT_OPTIONS;\n\nif ($post_type === 'identify_user') {\n    //--------\n    // NORMAL IDENTICATION STEP\n    //--------\n\n    // Ensure Complexity levels are translated\n    defineComplexity();\n\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n    // If Debug then clean the files\n    if (DEBUGLDAP === true) {\n        define('DEBUGLDAPFILE', $SETTINGS['path_to_files_folder'] . '/ldap.debug.txt');\n        file_put_contents(DEBUGLDAPFILE, '');\n    }\n\n    // Prepare GET variables\n    $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n    // increment counter of login attempts\n    if ($sessionPwdAttempts === '') {\n        $sessionPwdAttempts = 1;\n    } else {\n        ++$sessionPwdAttempts;\n    }\n\n    $superGlobal->put('pwd_attempts', $sessionPwdAttempts, 'SESSION');\n    // manage brute force\n    if ($sessionPwdAttempts <= 3) {\n        $sessionPwdAttempts = 0;\n\n        // identify the user through Teampass process\n        identifyUser(\n            $post_data,\n            $SETTINGS\n        );\n    } elseif (isset($_SESSION['next_possible_pwd_attempts']) && time() > $_SESSION['next_possible_pwd_attempts'] && $sessionPwdAttempts > 3) {\n        $sessionPwdAttempts = 0;\n        // identify the user through Teampass process\n        identifyUser(\n            $post_data,\n            $SETTINGS\n        );\n    } else {\n        $_SESSION['next_possible_pwd_attempts'] = time() + 10;\n        // Encrypt data to return\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => 'bruteforce_wait',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => true,\n                'message' => langHdl('error_bad_credentials_more_than_3_times'),\n            ],\n            'encode'\n        );\n        return false;\n    }\n    // ---\n    // ---\n    // ---\n} elseif ($post_type === 'get2FAMethods') {\n    //--------\n    // Get MFA methods\n    //--------\n    //\n\n    // Encrypt data to return\n    echo json_encode([\n        'ret' => prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'agses' => isKeyExistingAndEqual('agses_authentication_enabled', 1, $SETTINGS) === true ? true : false,\n                'google' => isKeyExistingAndEqual('google_authentication', 1, $SETTINGS) === true ? true : false,\n                'yubico' => isKeyExistingAndEqual('yubico_authentication', 1, $SETTINGS) === true ? true : false,\n                'duo' => isKeyExistingAndEqual('duo', 1, $SETTINGS) === true ? true : false,\n            ],\n            'encode'\n        ),\n        'key' => $superGlobal->get('key', 'SESSION'),\n    ]);\n    return false;\n}\n\n/**\n * Complete authentication of user through Teampass\n *\n * @param string $sentData Credentials\n * @param array $SETTINGS Teampass settings\n *\n * @return bool\n */\nfunction identifyUser(string $sentData, array $SETTINGS): bool\n{\n    // Load config\n    if (findTpConfigFile() === false) {\n        throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n    }\n    include_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\n    include_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    \n    header('Content-type: text/html; charset=utf-8');\n    error_reporting(E_ERROR);\n\n    // Load AntiXSS\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/ASCII.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/UTF8.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n    $antiXss = new voku\\helper\\AntiXSS();\n\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n    // Prepare GET variables\n    $sessionUserLanguage = $superGlobal->get('user_language', 'SESSION', 'user');\n    $sessionKey = $superGlobal->get('key', 'SESSION');\n    $sessionAdmin = $superGlobal->get('user_admin', 'SESSION');\n    $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n    $sessionUrl = $superGlobal->get('initial_url', 'SESSION');\n    $server = [];\n    $server['PHP_AUTH_USER'] = $superGlobal->get('PHP_AUTH_USER', 'SERVER');\n    $server['PHP_AUTH_PW'] = $superGlobal->get('PHP_AUTH_PW', 'SERVER');\n\n    // connect to the server\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = defined('DB_PASSWD_CLEAR') === false ? defuseReturnDecrypted(DB_PASSWD, $SETTINGS) : DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // User's language loading\n    include_once $SETTINGS['cpassman_dir'] . '/includes/language/' . $sessionUserLanguage . '.php';\n    \n    // decrypt and retreive data in JSON format\n    if (empty($sessionKey) === true) {\n        $dataReceived = $sentData;\n    } else {\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $sentData,\n            'decode',\n            $sessionKey\n        );\n        $superGlobal->put('key', $sessionKey, 'SESSION');\n    }\n\n    // Check if Duo auth is in progress and pass the pw and login back to the standard login process\n    if(\n        isKeyExistingAndEqual('duo', 1, $SETTINGS) === true\n        && $dataReceived['user_2fa_selection'] === 'duo'\n        && $superGlobal->get('duo_status','SESSION') === 'IN_PROGRESS'\n        && !empty($dataReceived['duo_state'])\n    ){\n        $key = hash('sha256', $dataReceived['duo_state']);\n        $iv = substr(hash('sha256', $dataReceived['duo_state']), 0, 16);\n        $duo_data_dec = openssl_decrypt(base64_decode($superGlobal->get('duo_data','SESSION')), 'AES-256-CBC', $key, 0, $iv);\n        // Clear the data from the Duo process to continue clean with the standard login process\n        $superGlobal->forget('duo_data','SESSION');\n        if($duo_data_dec === false){\n            echo prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'error' => true,\n                    'message' => langHdl('duo_error_decrypt'),\n                ],\n                'encode'\n            );\n            return false;\n        }\n        $duo_data = unserialize($duo_data_dec);\n        $dataReceived['pw'] = $duo_data['duo_pwd'];\n        $dataReceived['login'] = $duo_data['duo_login'];\n    }\n\n    if(isset($dataReceived['pw']) === false || isset($dataReceived['login']) === false) {\n        echo json_encode([\n            'data' => prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'error' => true,\n                    'message' => langHdl('ga_enter_credentials'),\n                ],\n                'encode'\n            ),\n            'key' => $_SESSION['key']\n        ]);\n        return false;\n    }\n\n    // prepare variables    \n    $userCredentials = identifyGetUserCredentials(\n        $SETTINGS,\n        (string) $server['PHP_AUTH_USER'],\n        (string) $server['PHP_AUTH_PW'],\n        (string) filter_var($dataReceived['pw'], FILTER_SANITIZE_FULL_SPECIAL_CHARS),\n        (string) filter_var($dataReceived['login'], FILTER_SANITIZE_FULL_SPECIAL_CHARS)\n    );\n    $username = $userCredentials['username'];\n    $passwordClear = $userCredentials['passwordClear'];\n    \n    // DO initial checks\n    $userInitialData = identifyDoInitialChecks(\n        $SETTINGS,\n        (int) $sessionPwdAttempts,\n        (string) $username,\n        (int) $sessionAdmin,\n        (string) $sessionUrl,\n        (string) filter_var($dataReceived['user_2fa_selection'], FILTER_SANITIZE_FULL_SPECIAL_CHARS)\n    );\n    // if user doesn't exist in Teampass then return error\n    if ($userInitialData['error'] === true) {\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $userInitialData['array'],\n            'encode'\n        );\n        return false;\n    }\n\n    $userInfo = $userInitialData['userInfo'];\n    $return = '';\n    $userLdap = identifyDoLDAPChecks(\n        $SETTINGS,\n        $userInfo,\n        (string) $username,\n        (string) $passwordClear,\n        (int) $sessionAdmin,\n        (string) $sessionUrl,\n        (int) $sessionPwdAttempts\n    );\n    if ($userLdap['error'] === true) {\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $userLdap['array'],\n            'encode'\n        );\n        return false;\n    }\n    if (isset($userLdap['user_info']) === true && (int) $userLdap['user_info']['has_been_created'] === 1) {\n        /*$userInfo = DB::queryfirstrow(\n            'SELECT *\n            FROM ' . prefixTable('users') . '\n            WHERE login = %s',\n            $username\n        );*/\n        //$userInfo = $userLdap['user_info'];\n        echo json_encode([\n            'data' => prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'error' => true,\n                    'message' => '',\n                    'extra' => 'ad_user_created',\n                ],\n                'encode'\n            ),\n            'key' => $_SESSION['key']\n        ]);\n        return false;\n    }\n\n    // Check user and password\n    if ($userLdap['userPasswordVerified'] === false && (int) checkCredentials($passwordClear, $userInfo, $dataReceived, $username, $SETTINGS) !== 1) {\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => '',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => true,\n                'message' => langHdl('error_bad_credentials'),\n            ],\n            'encode'\n        );\n        return false;\n    }\n\n    // Check if MFA is required\n    if ((isOneVarOfArrayEqualToValue(\n                [\n                    (int) $SETTINGS['yubico_authentication'],\n                    (int) $SETTINGS['google_authentication'],\n                    (int) $SETTINGS['duo']\n                ],\n                1\n            ) === true)\n        && (((int) $userInfo['admin'] !== 1 && (int) $userInfo['mfa_enabled'] === 1) || ((int) $SETTINGS['admin_2fa_required'] === 1 && (int) $userInfo['admin'] === 1))\n        && $userInfo['mfa_auth_requested_roles'] === true\n    ) {\n        // Check user against MFA method if selected\n        $userMfa = identifyDoMFAChecks(\n            $SETTINGS,\n            $userInfo,\n            $dataReceived,\n            $userInitialData,\n            (string) $username\n        );\n        if ($userMfa['error'] === true) {\n            echo prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                $userMfa['mfaData'],\n                'encode'\n            );\n            return false;\n        } elseif ($userMfa['mfaQRCodeInfos'] === true) {\n            // Case where user has initiated Google Auth\n            // Return QR code\n            echo prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'value' => $userMfa['mfaData']['value'],\n                    'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                    'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                    'pwd_attempts' => (int) $sessionPwdAttempts,\n                    'error' => false,\n                    'message' => $userMfa['mfaData']['message'],\n                    'mfaStatus' => $userMfa['mfaData']['mfaStatus'],\n                ],\n                'encode'\n            );\n            return false;\n        } elseif ($userMfa['duo_url_ready'] === true) {\n            // Case where user has initiated Duo Auth\n            // Return the DUO redirect URL\n            echo prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                    'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                    'pwd_attempts' => (int) $sessionPwdAttempts,\n                    'error' => false,\n                    'message' => $userMfa['mfaData']['message'],\n                    'duo_url_ready' => $userMfa['mfaData']['duo_url_ready'],\n                    'duo_redirect_url' => $userMfa['mfaData']['duo_redirect_url'],\n                    'mfaStatus' => $userMfa['mfaData']['mfaStatus'],\n                ],\n                'encode'\n            );\n            return false;\n        }\n    }\n/*\n    print_r($userLdap);\n    print_r($userInfo);\n    return false;\n    */\n    // Can connect if\n    // 1- no LDAP mode + user enabled + pw ok\n    // 2- LDAP mode + user enabled + ldap connection ok + user is not admin\n    // 3- LDAP mode + user enabled + pw ok + usre is admin\n    // This in order to allow admin by default to connect even if LDAP is activated\n    if (canUserGetLog(\n            $SETTINGS,\n            (int) $userInfo['disabled'],\n            $username,\n            $userLdap['ldapConnection']\n        ) === true\n    ) {\n        $superGlobal->put('autoriser', true, 'SESSION');\n        $superGlobal->put('pwd_attempts', 0, 'SESSION');\n\n        // Check if any unsuccessfull login tries exist\n        $attemptsInfos = handleLoginAttempts(\n            $userInfo['id'],\n            $userInfo['login'],\n            $userInfo['last_connexion'],\n            $username,\n            $SETTINGS,\n        );\n            \n        // Save account in SESSION\n        $superGlobal->put('unsuccessfull_login_attempts_list', $attemptsInfos['attemptsList'], 'SESSION', 'user');\n        $superGlobal->put('unsuccessfull_login_attempts_shown', $attemptsInfos['attemptsCount'] === 0 ? true : false, 'SESSION', 'user');\n        $superGlobal->put('unsuccessfull_login_attempts_nb', DB::count(), 'SESSION', 'user');\n        $superGlobal->put('login', stripslashes($username), 'SESSION');\n        $superGlobal->put('name', empty($userInfo['name']) === false ? stripslashes($userInfo['name']) : '', 'SESSION');\n        $superGlobal->put('lastname', empty($userInfo['lastname']) === false ? stripslashes($userInfo['lastname']) : '', 'SESSION');\n        $superGlobal->put('user_id', (int) $userInfo['id'], 'SESSION');\n        $superGlobal->put('user_pwd', $passwordClear, 'SESSION');\n        $superGlobal->put('admin', $userInfo['admin'], 'SESSION');\n        $superGlobal->put('user_manager', $userInfo['gestionnaire'], 'SESSION');\n        $superGlobal->put('user_can_manage_all_users', $userInfo['can_manage_all_users'], 'SESSION');\n        $superGlobal->put('user_read_only', (bool) $userInfo['read_only'], 'SESSION');\n        $superGlobal->put('last_pw_change', (int) $userInfo['last_pw_change'], 'SESSION');\n        $superGlobal->put('last_pw', $userInfo['last_pw'], 'SESSION');\n        $superGlobal->put('can_create_root_folder', $userInfo['can_create_root_folder'], 'SESSION');\n        $superGlobal->put('personal_folder', $userInfo['personal_folder'], 'SESSION');\n        $superGlobal->put('user_email', $userInfo['email'], 'SESSION');\n        $superGlobal->put('user_ga', $userInfo['ga'], 'SESSION');\n        $superGlobal->put('user_avatar', $userInfo['avatar'], 'SESSION');\n        $superGlobal->put('user_avatar_thumb', $userInfo['avatar_thumb'], 'SESSION');\n        $superGlobal->put('user_upgrade_needed', $userInfo['upgrade_needed'], 'SESSION');\n        $superGlobal->put('user_force_relog', $userInfo['force-relog'], 'SESSION');\n        $superGlobal->put('is_ready_for_usage', $userInfo['is_ready_for_usage'], 'SESSION');\n        $superGlobal->put(\n            'user_treeloadstrategy',\n            (isset($userInfo['treeloadstrategy']) === false || empty($userInfo['treeloadstrategy']) === true) ? 'full' : $userInfo['treeloadstrategy'],\n            'SESSION',\n            'user'\n        );\n        $superGlobal->put('user_agsescardid', $userInfo['agses-usercardid'], 'SESSION', 'user');\n        $superGlobal->put('user_language', $userInfo['user_language'], 'SESSION', 'user');\n        $superGlobal->put('user_timezone', $userInfo['usertimezone'], 'SESSION', 'user');\n        $superGlobal->put('session_duration', $dataReceived['duree_session'] * 60, 'SESSION', 'user');\n\n        // User signature keys\n        $returnKeys = prepareUserEncryptionKeys($userInfo, $passwordClear);        \n        $superGlobal->put('public_key', $returnKeys['public_key'], 'SESSION', 'user');\n        $superGlobal->put('private_key', $returnKeys['private_key_clear'], 'SESSION', 'user');\n\n        // API key\n        $superGlobal->put(\n            'api-key',\n            empty($userInfo['api_key']) === false ? base64_decode(decryptUserObjectKey($userInfo['api_key'], $returnKeys['private_key_clear'])) : '',\n            'SESSION',\n            'user'\n        );\n        \n        $superGlobal->put('special', $userInfo['special'], 'SESSION', 'user');\n        $superGlobal->put('auth_type', $userInfo['auth_type'], 'SESSION', 'user');\n        // manage session expiration\n        $superGlobal->put('sessionDuration', (int) (time() + ($dataReceived['duree_session'] * 60)), 'SESSION');\n\n        // check feedback regarding user password validity\n        $return = checkUserPasswordValidity(\n            $userInfo,\n            $superGlobal->get('numDaysBeforePwExpiration', 'SESSION'),\n            $superGlobal->get('last_pw_change', 'SESSION'),\n            $SETTINGS\n        );\n        $superGlobal->put('validite_pw', $return['validite_pw'], 'SESSION');\n        $superGlobal->put('last_pw_change', $return['last_pw_change'], 'SESSION');\n        $superGlobal->put('numDaysBeforePwExpiration', $return['numDaysBeforePwExpiration'], 'SESSION');\n        $superGlobal->put('user_force_relog', $return['user_force_relog'], 'SESSION');\n\n\n        $superGlobal->put(\n            'last_connection',\n            empty($userInfo['last_connexion']) === false ? (int) $userInfo['last_connexion'] : (int) time(),\n            'SESSION'\n        );\n        \n        $superGlobal->put(\n            'latest_items',\n            empty($userInfo['latest_items']) === false ? explode(';', $userInfo['latest_items']) : [],\n            'SESSION'\n        );\n        \n        $superGlobal->put(\n            'favourites',\n            empty($userInfo['favourites']) === false ? explode(';', $userInfo['favourites']) : [],\n            'SESSION'\n        );\n        \n        $superGlobal->put(\n            'groupes_visibles',\n            empty($userInfo['groupes_visibles']) === false ? explode(';', $userInfo['groupes_visibles']) : [],\n            'SESSION'\n        );\n        \n        $superGlobal->put(\n            'no_access_folders',\n            empty($userInfo['groupes_interdits']) === false ? explode(';', $userInfo['groupes_interdits']) : [],\n            'SESSION'\n        );\n        \n        // User's roles\n        if (strpos($userInfo['fonction_id'] !== NULL ? (string) $userInfo['fonction_id'] : '', ',') !== -1) {\n            // Convert , to ;\n            $userInfo['fonction_id'] = str_replace(',', ';', (string) $userInfo['fonction_id']);\n            DB::update(\n                prefixTable('users'),\n                [\n                    'fonction_id' => $userInfo['fonction_id'],\n                ],\n                'id = %i',\n                $superGlobal->get('user_id', 'SESSION')\n            );\n        }\n        // Append with roles from AD groups\n        if (is_null($userInfo['roles_from_ad_groups']) === false) {\n            $userInfo['fonction_id'] = empty($userInfo['fonction_id'])  === true ? $userInfo['roles_from_ad_groups'] : $userInfo['fonction_id']. ';' . $userInfo['roles_from_ad_groups'];\n        }\n        // store\n        $superGlobal->put('fonction_id', $userInfo['fonction_id'], 'SESSION');\n        $superGlobal->put('user_roles', array_filter(explode(';', $userInfo['fonction_id'])), 'SESSION');\n        // build array of roles\n        $superGlobal->put('user_pw_complexity', 0, 'SESSION');\n        $superGlobal->put('arr_roles', [], 'SESSION');\n        if (count($superGlobal->get('user_roles', 'SESSION')) > 0) {\n            $rolesList = DB::query(\n                'SELECT id, title, complexity\n                FROM ' . prefixTable('roles_title') . '\n                WHERE id IN %li',\n                $superGlobal->get('user_roles', 'SESSION')\n            );\n            $excludeUser = isset($SETTINGS['exclude_user']) ? str_contains($superGlobal->get('login'), $SETTINGS['exclude_user']) : false;\n            $adjustPermissions = ($superGlobal->get('user_id', 'SESSION') >= 1000000 && !$excludeUser && (isset($SETTINGS['admin_needle']) || isset($SETTINGS['manager_needle']) || isset($SETTINGS['tp_manager_needle']) || isset($SETTINGS['read_only_needle'])));\n            if ($adjustPermissions) {\n                $userInfo['admin'] = $userInfo['gestionnaire'] = $userInfo['can_manage_all_users'] = $userInfo['read_only'] = 0;\n            }\n            foreach ($rolesList as $role) {\n                $superGlobal->put(\n                    $role['id'],\n                    [\n                        'id' => $role['id'],\n                        'title' => $role['title'],\n                    ],\n                    'SESSION',\n                    'arr_roles'\n                );\n                \n                if ($adjustPermissions) {\n                    if (isset($SETTINGS['admin_needle']) && str_contains($role['title'], $SETTINGS['admin_needle'])) {\n                         $userInfo['gestionnaire'] = $userInfo['can_manage_all_users'] = $userInfo['read_only'] = 0;\n                         $userInfo['admin'] = 1;\n                    }    \n                    if (isset($SETTINGS['manager_needle']) && str_contains($role['title'], $SETTINGS['manager_needle'])) {\n                         $userInfo['admin'] = $userInfo['can_manage_all_users'] = $userInfo['read_only'] = 0;\n                         $userInfo['gestionnaire'] = 1;\n                    }\n                    if (isset($SETTINGS['tp_manager_needle']) && str_contains($role['title'], $SETTINGS['tp_manager_needle'])) {\n                         $userInfo['admin'] = $userInfo['gestionnaire'] = $userInfo['read_only'] = 0;\n                         $userInfo['can_manage_all_users'] = 1;\n                    }\n                    if (isset($SETTINGS['read_only_needle']) && str_contains($role['title'], $SETTINGS['read_only_needle'])) {\n                         $userInfo['admin'] = $userInfo['gestionnaire'] = $userInfo['can_manage_all_users'] = 0;\n                         $userInfo['read_only'] = 1;\n                    }\n                }\n\n                // get highest complexity\n                if (intval($superGlobal->get('user_pw_complexity', 'SESSION')) < intval($role['complexity'])) {\n                    $superGlobal->put('user_pw_complexity', $role['complexity'], 'SESSION');\n                }\n            }\n            if ($adjustPermissions) {\n                $superGlobal->put('admin', $userInfo['admin'], 'SESSION');\n                $superGlobal->put('user_manager', $userInfo['gestionnaire'], 'SESSION');\n                $superGlobal->put('user_can_manage_all_users', $userInfo['can_manage_all_users'], 'SESSION');\n                $superGlobal->put('user_read_only', (bool) $userInfo['read_only'], 'SESSION');\n                DB::update(\n                    prefixTable('users'),\n                    [\n                        'admin' => $userInfo['admin'],\n                        'gestionnaire' => $userInfo['gestionnaire'],\n                        'can_manage_all_users' => $userInfo['can_manage_all_users'],\n                        'read_only' => $userInfo['read_only'],\n                    ],\n                    'id = %i',\n                    $superGlobal->get('user_id', 'SESSION')\n                );\n            }\n        }\n\n        // build complete array of roles\n        $superGlobal->put('arr_roles_full', [], 'SESSION');\n        $rows = DB::query('SELECT id, title FROM ' . prefixTable('roles_title') . ' ORDER BY title ASC');\n        foreach ($rows as $record) {\n            $superGlobal->put(\n                $record['id'],\n                [\n                    'id' => $record['id'],\n                    'title' => $record['title'],\n                ],\n                'SESSION',\n                'arr_roles_full'\n            );\n        }\n        // Set some settings\n        $SETTINGS['update_needed'] = '';\n\n        // Update table\n        DB::update(\n            prefixTable('users'),\n            array_merge(\n                [\n                    'key_tempo' => $superGlobal->get('key', 'SESSION'),\n                    'last_connexion' => time(),\n                    'timestamp' => time(),\n                    'disabled' => 0,\n                    'no_bad_attempts' => 0,\n                    'session_end' => $superGlobal->get('sessionDuration', 'SESSION'),\n                    'user_ip' => $dataReceived['client'],\n                ],\n                $returnKeys['update_keys_in_db']\n            ),\n            'id=%i',\n            $userInfo['id']\n        );\n        \n        // Get user's rights\n        if ($userLdap['user_initial_creation_through_ldap'] !== false) {\n            // is new LDAP user. Show only his personal folder\n            if ($SETTINGS['enable_pf_feature'] === '1') {\n                $superGlobal->put('personal_visible_groups', [$userInfo['id']], 'SESSION');\n                $superGlobal->put('personal_folders', [$userInfo['id']], 'SESSION');\n            } else {\n                $superGlobal->put('personal_visible_groups', [], 'SESSION');\n                $superGlobal->put('personal_folders', [], 'SESSION');\n            }\n            $superGlobal->put('all_non_personal_folders', [], 'SESSION');\n            $superGlobal->put('groupes_visibles', [], 'SESSION');\n            $superGlobal->put('read_only_folders', [], 'SESSION');\n            $superGlobal->put('list_folders_limited', '', 'SESSION');\n            $superGlobal->put('list_folders_editable_by_role', [], 'SESSION');\n            $superGlobal->put('list_restricted_folders_for_items', [], 'SESSION');\n            $superGlobal->put('nb_folders', 1, 'SESSION');\n            $superGlobal->put('nb_roles', 0, 'SESSION');\n        } else {\n            identifyUserRights(\n                $userInfo['groupes_visibles'],\n                $superGlobal->get('no_access_folders', 'SESSION'),\n                $userInfo['admin'],\n                $userInfo['fonction_id'],\n                $SETTINGS\n            );\n        }\n        // Get some more elements\n        $superGlobal->put('screenHeight', $dataReceived['screenHeight'], 'SESSION');\n        // Get last seen items\n        $superGlobal->put('latest_items_tab', [], 'SESSION');\n        $superGlobal->put('nb_roles', 0, 'SESSION');\n        foreach ($superGlobal->get('latest_items', 'SESSION') as $item) {\n            if (! empty($item)) {\n                $dataLastItems = DB::queryFirstRow(\n                    'SELECT id,label,id_tree\n                    FROM ' . prefixTable('items') . '\n                    WHERE id=%i',\n                    $item\n                );\n                $superGlobal->put(\n                    $item,\n                    [\n                        'id' => $item,\n                        'label' => $dataLastItems['label'],\n                        'url' => 'index.php?page=items&amp;group=' . $dataLastItems['id_tree'] . '&amp;id=' . $item,\n                    ],\n                    'SESSION',\n                    'latest_items_tab'\n                );\n            }\n        }\n        // send back the random key\n        $return = $dataReceived['randomstring'];\n        // Send email\n        if (\n            isKeyExistingAndEqual('enable_send_email_on_user_login', 1, $SETTINGS) === true\n            && (int) $sessionAdmin !== 1\n        ) {\n            // get all Admin users\n            $val = DB::queryfirstrow('SELECT email FROM ' . prefixTable('users') . \" WHERE admin = %i and email != ''\", 1);\n            if (DB::count() > 0) {\n                // Add email to table\n                prepareSendingEmail(\n                    langHdl('email_subject_on_user_login'),\n                    str_replace(\n                        [\n                            '#tp_user#',\n                            '#tp_date#',\n                            '#tp_time#',\n                        ],\n                        [\n                            ' ' . $superGlobal->get('login', 'SESSION') . ' (IP: ' . getClientIpServer() . ')',\n                            date($SETTINGS['date_format'], (int) $superGlobal->get('last_connection', 'SESSION')),\n                            date($SETTINGS['time_format'], (int) $superGlobal->get('last_connection', 'SESSION')),\n                        ],\n                        langHdl('email_body_on_user_login')\n                    ),\n                    $val['email'],\n                    langHdl('administrator'),\n                    $SETTINGS\n                );\n            }\n        }\n\n        // Ensure Complexity levels are translated\n        defineComplexity();\n\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => $return,\n                'user_id' => $superGlobal->get('user_id', 'SESSION') !== null ? (int) $superGlobal->get('user_id', 'SESSION') : '',\n                'user_admin' => $superGlobal->get('admin', 'SESSION') !== null ? (int) $superGlobal->get('admin', 'SESSION') : 0,\n                'initial_url' => $antiXss->xss_clean($sessionUrl),\n                'pwd_attempts' => 0,\n                'error' => false,\n                'message' => $superGlobal->get('user_upgrade_needed', 'SESSION') !== null && (int) $superGlobal->get('user_upgrade_needed', 'SESSION') === 1 ? 'ask_for_otc' : '',\n                'first_connection' => $superGlobal->get('validite_pw', 'SESSION') === false ? true : false,\n                'password_complexity' => TP_PW_COMPLEXITY[$superGlobal->get('user_pw_complexity', 'SESSION')][1],\n                'password_change_expected' => $userInfo['special'] === 'password_change_expected' ? true : false,\n                'private_key_conform' => $superGlobal->get('user_id', 'SESSION') !== null\n                    && empty($superGlobal->get('private_key', 'SESSION', 'user')) === false\n                    && $superGlobal->get('private_key', 'SESSION', 'user') !== 'none' ? true : false,\n                'session_key' => $superGlobal->get('key', 'SESSION'),\n                'can_create_root_folder' => $superGlobal->get('can_create_root_folder', 'SESSION') !== null ? (int) $superGlobal->get('can_create_root_folder', 'SESSION') : '',\n                'shown_warning_unsuccessful_login' => $superGlobal->get('unsuccessfull_login_attempts_shown', 'SESSION', 'user'),\n                'nb_unsuccessful_logins' => $superGlobal->get('unsuccessfull_login_attempts_nb', 'SESSION', 'user'),\n                'upgrade_needed' => isset($userInfo['upgrade_needed']) === true ? (int) $userInfo['upgrade_needed'] : 0,\n                'special' => isset($userInfo['special']) === true ? (int) $userInfo['special'] : 0,\n            ],\n            'encode'\n        );\n    \n        return true;\n\n    } elseif ((int) $userInfo['disabled'] === 1) {\n        // User and password is okay but account is locked\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => $return,\n                'user_id' => $superGlobal->get('user_id', 'SESSION') !== null ? (int) $superGlobal->get('user_id', 'SESSION') : '',\n                'user_admin' => $superGlobal->get('admin', 'SESSION') !== null ? (int) $superGlobal->get('admin', 'SESSION') : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => 0,\n                'error' => 'user_is_locked',\n                'message' => langHdl('account_is_locked'),\n                'first_connection' => $superGlobal->get('validite_pw', 'SESSION') === false ? true : false,\n                'password_complexity' => TP_PW_COMPLEXITY[$superGlobal->get('user_pw_complexity', 'SESSION')][1],\n                'password_change_expected' => $userInfo['special'] === 'password_change_expected' ? true : false,\n                'private_key_conform' => $superGlobal->get('private_key', 'SESSION', 'user') !== null\n                    && empty($superGlobal->get('private_key', 'SESSION', 'user')) === false\n                    && $superGlobal->get('private_key', 'SESSION', 'user') !== 'none' ? true : false,\n                'session_key' => $superGlobal->get('key', 'SESSION'),\n                'can_create_root_folder' => $superGlobal->get('can_create_root_folder', 'SESSION') !== null ? (int) $superGlobal->get('can_create_root_folder', 'SESSION') : '',\n                'shown_warning_unsuccessful_login' => $superGlobal->get('unsuccessfull_login_attempts_shown', 'SESSION', 'user'),\n                'nb_unsuccessful_logins' => $superGlobal->get('unsuccessfull_login_attempts_nb', 'SESSION', 'user'),\n            ],\n            'encode'\n        );\n        return false;\n    }\n\n    // DEFAULT CASE\n    // User exists in the DB but Password is false\n    // check if user is locked\n    if (isUserLocked(\n            (int) $userInfo['no_bad_attempts'],\n            $userInfo['id'],\n            $username,\n            $superGlobal->get('key', 'SESSION'),\n            $SETTINGS\n        ) === true\n    ) {\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => $return,\n                'user_id' => $superGlobal->get('user_id', 'SESSION') !== null ? (int) $superGlobal->get('user_id', 'SESSION') : '',\n                'user_admin' => $superGlobal->get('admin', 'SESSION') !== null ? (int) $superGlobal->get('admin', 'SESSION') : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => 0,\n                'error' => 'user_is_locked',\n                'message' => langHdl('account_is_locked'),\n                'first_connection' => $superGlobal->get('validite_pw', 'SESSION') === false ? true : false,\n                'password_complexity' => TP_PW_COMPLEXITY[$superGlobal->get('user_pw_complexity', 'SESSION')][1],\n                'password_change_expected' => $userInfo['special'] === 'password_change_expected' ? true : false,\n                'private_key_conform' => $superGlobal->get('user_id', 'SESSION') !== null\n                    && empty($superGlobal->get('private_key', 'SESSION', 'user')) === false\n                    && $superGlobal->get('private_key', 'SESSION', 'user') !== 'none' ? true : false,\n                'session_key' => $superGlobal->get('key', 'SESSION'),\n                'can_create_root_folder' => $superGlobal->get('can_create_root_folder', 'SESSION') !== null ? (int) $superGlobal->get('can_create_root_folder', 'SESSION') : '',\n                'shown_warning_unsuccessful_login' => $superGlobal->get('unsuccessfull_login_attempts_shown', 'SESSION', 'user'),\n                'nb_unsuccessful_logins' => $superGlobal->get('unsuccessfull_login_attempts_nb', 'SESSION', 'user'),\n            ],\n            'encode'\n        );\n        return false;\n    }\n    echo prepareExchangedData(\n        $SETTINGS['cpassman_dir'],\n        [\n            'value' => $return,\n            'user_id' => $superGlobal->get('user_id', 'SESSION') !== null ? (int) $superGlobal->get('user_id', 'SESSION') : '',\n            'user_admin' => $superGlobal->get('admin', 'SESSION') !== null ? (int) $superGlobal->get('admin', 'SESSION') : 0,\n            'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'error' => true,\n            'message' => langHdl('error_not_allowed_to_authenticate'),\n            'first_connection' => $superGlobal->get('validite_pw', 'SESSION') === false ? true : false,\n            'password_complexity' => TP_PW_COMPLEXITY[$superGlobal->get('user_pw_complexity', 'SESSION')][1],\n            'password_change_expected' => $userInfo['special'] === 'password_change_expected' ? true : false,\n            'private_key_conform' => $superGlobal->get('user_id', 'SESSION') !== null\n                    && empty($superGlobal->get('private_key', 'SESSION', 'user')) === false\n                    && $superGlobal->get('private_key', 'SESSION', 'user') !== 'none' ? true : false,\n            'session_key' => $superGlobal->get('key', 'SESSION'),\n            'can_create_root_folder' => $superGlobal->get('can_create_root_folder', 'SESSION') !== null ? (int) $superGlobal->get('can_create_root_folder', 'SESSION') : '',\n            'shown_warning_unsuccessful_login' => $superGlobal->get('unsuccessfull_login_attempts_shown', 'SESSION', 'user'),\n            'nb_unsuccessful_logins' => $superGlobal->get('unsuccessfull_login_attempts_nb', 'SESSION', 'user'),\n        ],\n        'encode'\n    );\n    return false;\n}\n\n/**\n * Check if any unsuccessfull login tries exist\n *\n * @param int       $userInfoId\n * @param string    $userInfoLogin\n * @param string    $userInfoLastConnection\n * @param string    $username\n * @param array     $SETTINGS\n * @return array\n */\nfunction handleLoginAttempts(\n    $userInfoId,\n    $userInfoLogin,\n    $userInfoLastConnection,\n    $username,\n    $SETTINGS\n) : array\n{\n    $rows = DB::query(\n        'SELECT date\n        FROM ' . prefixTable('log_system') . \"\n        WHERE field_1 = %s\n        AND type = 'failed_auth'\n        AND label = 'password_is_not_correct'\n        AND date >= %s AND date < %s\",\n        $userInfoLogin,\n        $userInfoLastConnection,\n        time()\n    );\n    $arrAttempts = [];\n    if (DB::count() > 0) {\n        foreach ($rows as $record) {\n            array_push(\n                $arrAttempts,\n                date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], (int) $record['date'])\n            );\n        }\n    }\n    \n\n    // Log into DB the user's connection\n    if (isKeyExistingAndEqual('log_connections', 1, $SETTINGS) === true) {\n        logEvents($SETTINGS, 'user_connection', 'connection', (string) $userInfoId, stripslashes($username));\n    }\n\n    return [\n        'attemptsList' => $arrAttempts,\n        'attemptsCount' => count($rows),\n    ];\n}\n\n/**\n * Permits to load config file\n *\n * @return boolean\n */\nfunction findTpConfigFile() : bool\n{\n    if (file_exists('../includes/config/tp.config.php')) {\n        include_once '../includes/config/tp.config.php';\n        return true;\n    } elseif (file_exists('./includes/config/tp.config.php')) {\n        include_once './includes/config/tp.config.php';\n    } elseif (file_exists('../../includes/config/tp.config.php')) {\n        include_once '../../includes/config/tp.config.php';\n    } elseif (file_exists('../../../includes/config/tp.config.php')) {\n        include_once '../../../includes/config/tp.config.php';\n    }\n    return false;\n}\n\n/**\n * Can you user get logged into main page\n *\n * @param array     $SETTINGS\n * @param int       $userInfoDisabled\n * @param string    $username\n * @param bool      $ldapConnection\n *\n * @return boolean\n */\nfunction canUserGetLog(\n    $SETTINGS,\n    $userInfoDisabled,\n    $username,\n    $ldapConnection\n) : bool\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\n\n    if ((int) $userInfoDisabled === 1) {\n        return false;\n    }\n\n    if (isKeyExistingAndEqual('ldap_mode', 0, $SETTINGS) === true) {\n        return true;\n    }\n    \n    if (isKeyExistingAndEqual('ldap_mode', 1, $SETTINGS) === true \n        && (\n            ($ldapConnection === true && $username !== 'admin')\n            || $username === 'admin'\n        )\n    ) {\n        return true;\n    }\n\n    if (isKeyExistingAndEqual('ldap_and_local_authentication', 1, $SETTINGS) === true\n        && isset($SETTINGS['ldap_mode']) === true && in_array($SETTINGS['ldap_mode'], ['1', '2']) === true\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Manages if user is locked or not\n *\n * @param int       $nbAttempts\n * @param int       $userId\n * @param string    $username\n * @param string    $key\n * @param array     $SETTINGS\n *\n * @return boolean\n */\nfunction isUserLocked(\n    $nbAttempts,\n    $userId,\n    $username,\n    $key,\n    $SETTINGS\n) : bool \n{\n    $userIsLocked = false;\n    $nbAttempts++;\n    if (\n        (int) $SETTINGS['nb_bad_authentication'] > 0\n        && (int) $SETTINGS['nb_bad_authentication'] < $nbAttempts\n    ) {\n        // User is now locked as too many attempts\n        $userIsLocked = true;\n\n        // log it\n        if (isKeyExistingAndEqual('log_connections', 1, $SETTINGS) === true) {\n            logEvents($SETTINGS, 'user_locked', 'connection', (string) $userId, stripslashes($username));\n        }\n    }\n    \n    DB::update(\n        prefixTable('users'),\n        [\n            'key_tempo' => $key,\n            'disabled' => $userIsLocked,\n            'no_bad_attempts' => $nbAttempts,\n        ],\n        'id=%i',\n        $userId\n    );\n\n    return $userIsLocked;\n}\n\n\n/**\n * \n * Prepare user keys\n * \n * @param array $userInfo   User account information\n * @param string $passwordClear\n *\n * @return array\n */\nfunction prepareUserEncryptionKeys($userInfo, $passwordClear) : array\n{\n    if (is_null($userInfo['private_key']) === true || empty($userInfo['private_key']) === true || $userInfo['private_key'] === 'none') {\n        // No keys have been generated yet\n        // Create them\n        $userKeys = generateUserKeys($passwordClear);\n\n        return [\n            'public_key' => $userKeys['public_key'],\n            'private_key_clear' => $userKeys['private_key_clear'],\n            'update_keys_in_db' => [\n                'public_key' => $userKeys['public_key'],\n                'private_key' => $userKeys['private_key'],\n            ],\n        ];\n    } \n    \n    if ($userInfo['special'] === 'generate-keys') {\n        return [\n            'public_key' => $userInfo['public_key'],\n            'private_key_clear' => '',\n            'update_keys_in_db' => [],\n        ];\n    }\n    \n    // Don't perform this in case of special login action\n    if ($userInfo['special'] === 'otc_is_required_on_next_login' || $userInfo['special'] === 'user_added_from_ldap') {\n        return [\n            'public_key' => $userInfo['public_key'],\n            'private_key_clear' => '',\n            'update_keys_in_db' => [],\n        ];\n    }\n    \n    // Uncrypt private key\n    return [\n        'public_key' => $userInfo['public_key'],\n        'private_key_clear' => decryptPrivateKey($passwordClear, $userInfo['private_key']),\n        'update_keys_in_db' => [],\n    ];\n}\n\n\n/**\n * CHECK PASSWORD VALIDITY\n * Don't take into consideration if LDAP in use\n * \n * @param array $userInfo                       User account information\n * @param int $numDaysBeforePwExpiration\n * @param int $lastPwChange\n * @param array $SETTINGS                       Teampass settings\n *\n * @return array\n */\nfunction checkUserPasswordValidity($userInfo, $numDaysBeforePwExpiration, $lastPwChange, $SETTINGS)\n{\n    if (isKeyExistingAndEqual('ldap_mode', 1, $SETTINGS) === true) {\n        return [\n            'validite_pw' => true,\n            'last_pw_change' => $userInfo['last_pw_change'],\n            'user_force_relog' => '',\n            'numDaysBeforePwExpiration' => '',\n        ];\n    }\n\n    if (isset($userInfo['last_pw_change']) === true) {\n        if ((int) $SETTINGS['pw_life_duration'] === 0) {\n            return [\n                'validite_pw' => true,\n                'last_pw_change' => '',\n                'user_force_relog' => 'infinite',\n                'numDaysBeforePwExpiration' => '',\n            ];\n        }\n        \n        return [\n            'validite_pw' => $numDaysBeforePwExpiration <= 0 ? false : true,\n            'last_pw_change' => $userInfo['last_pw_change'],\n            'user_force_relog' => 'infinite',\n            'numDaysBeforePwExpiration' => $SETTINGS['pw_life_duration'] - round(\n                (mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y')) - $lastPwChange) / (24 * 60 * 60)),\n        ];\n    } else {\n        return [\n            'validite_pw' => false,\n            'last_pw_change' => '',\n            'user_force_relog' => '',\n            'numDaysBeforePwExpiration' => '',\n        ];\n    }\n}\n\n\n/**\n * Authenticate a user through AD.\n *\n * @param string $username      Username\n * @param array $userInfo       User account information\n * @param string $passwordClear Password\n * @param array $SETTINGS       Teampass settings\n *\n * @return array\n */\nfunction authenticateThroughAD(string $username, array $userInfo, string $passwordClear, array $SETTINGS): array\n{\n    // Load expected libraries\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Illuminate/Contracts/Auth/Authenticatable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Illuminate/Contracts/Support/Arrayable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Traits/EnumeratesValues.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Traits/Macroable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/helpers.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Arr.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Contracts/Support/Jsonable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Contracts/Support/Arrayable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Enumerable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Collection.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/CarbonTimeZone.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Units.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Week.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Timestamp.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Test.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/ObjectInitialisation.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Serialization.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/IntervalRounding.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Rounding.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Localization.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Options.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Cast.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Mutability.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Modifiers.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Mixin.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Macro.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Difference.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Creator.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Converter.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Comparison.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Boundaries.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Date.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/CarbonInterface.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Carbon.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/DetectsErrors.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/Connection.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/LdapInterface.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/HandlesConnection.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/Ldap.php';\n    $ad = new SplClassLoader('LdapRecord', '../includes/libraries');\n    $ad->register();\n\n    // Build ldap configuration array\n    $config = [\n        // Mandatory Configuration Options\n        'hosts' => [explode(',', $SETTINGS['ldap_hosts'])],\n        'base_dn' => $SETTINGS['ldap_bdn'],\n        'username' => $SETTINGS['ldap_username'],\n        'password' => $SETTINGS['ldap_password'],\n\n        // Optional Configuration Options\n        'port' => $SETTINGS['ldap_port'],\n        'use_ssl' => (int) $SETTINGS['ldap_ssl'] === 1 ? true : false,\n        'use_tls' => (int) $SETTINGS['ldap_tls'] === 1 ? true : false,\n        'version' => 3,\n        'timeout' => 5,\n        'follow_referrals' => false,\n\n        // Custom LDAP Options\n        'options' => [\n            // See: http://php.net/ldap_set_option\n            LDAP_OPT_X_TLS_REQUIRE_CERT => (isset($SETTINGS['ldap_tls_certiface_check']) ? $SETTINGS['ldap_tls_certiface_check'] : LDAP_OPT_X_TLS_HARD),\n        ],\n    ];\n    //prepare connection\n    $connection = new Connection($config);\n    \n    try {\n        // Connect to LDAP\n        $connection->connect();\n        Container::addConnection($connection);\n\n        // Get user info from AD\n        // We want to isolate attribute ldap_user_attribute\n        $userADInfos = $connection->query()\n            ->where((isset($SETTINGS['ldap_user_attribute']) ===true && empty($SETTINGS['ldap_user_attribute']) === false) ? strtolower($SETTINGS['ldap_user_attribute']) : 'distinguishedname', '=', $username)\n            ->firstOrFail();\n\n    } catch (\\LdapRecord\\Query\\ObjectNotFoundException $e) {\n        return [\n            'error' => true,\n            'message' => langHdl('error_bad_credentials')\n\n        ];\n    }\n\n    // Check shadowexpire attribute - if === 1 then user disabled\n    if (\n        (isset($userADInfos['shadowexpire'][0]) === true && (int) $userADInfos['shadowexpire'][0] === 1)\n        ||\n        (isset($userADInfos['accountexpires'][0]) === true && (int) $userADInfos['accountexpires'][0] < time() && (int) $userADInfos['accountexpires'][0] != 0)\n    ) {\n        return [\n            'error' => true,\n            'message' => langHdl('error_ad_user_expired'),\n        ];\n    }\n\n    // User auth attempt\n    $userAuthAttempt = $connection->auth()->attempt(\n        $SETTINGS['ldap_type'] === 'ActiveDirectory' ?\n            $userADInfos[(isset($SETTINGS['ldap_user_dn_attribute']) === true && empty($SETTINGS['ldap_user_dn_attribute']) === false) ? $SETTINGS['ldap_user_dn_attribute'] : 'cn'][0] :\n            $userADInfos['dn'],\n        $passwordClear\n    );\n    \n    // User is not auth then return error\n    if ($userAuthAttempt === false) {\n        return [\n            'error' => true,\n            'message' => \"Error : User could not be authentificated\",\n        ];\n    }\n\n    // Create LDAP user if not exists and tasks enabled\n    if ($userInfo['ldap_user_to_be_created'] === true) {   \n        $userInfo = ldapCreateUser(\n            $username,\n            $passwordClear,\n            $userADInfos['mail'][0],\n            $userADInfos['givenname'][0],\n            $userADInfos['sn'][0],\n            $SETTINGS\n        );\n\n        // prepapre background tasks for item keys generation  \n        handleUserKeys(\n            (int) $userInfo['id'],\n            (string) $passwordClear,\n            (int) isset($SETTINGS['maximum_number_of_items_to_treat']) === true ? $SETTINGS['maximum_number_of_items_to_treat'] : NUMBER_ITEMS_IN_BATCH,\n            uniqidReal(20),\n            true,\n            true,\n            true,\n            false,\n            langHdl('email_body_user_config_2'),\n        );\n\n        // Complete $userInfo\n        $userInfo['has_been_created'] = 1;\n    } else {\n        $userInfo['has_been_created'] = 0;\n    }\n\n    // Update user info with his AD groups\n    if ($SETTINGS['ldap_type'] === 'ActiveDirectory') {\n        require_once 'ldap.activedirectory.php';\n    } else {\n        require_once 'ldap.openldap.php';\n    }   \n    $ret = getUserADGroups(\n        $SETTINGS['ldap_type'] === 'ActiveDirectory' ?\n            $userADInfos[(isset($SETTINGS['ldap_user_dn_attribute']) === true && empty($SETTINGS['ldap_user_dn_attribute']) === false) ? $SETTINGS['ldap_user_dn_attribute'] : 'cn'][0] :\n            $userADInfos['dn'], \n        $connection, \n        $SETTINGS\n    );\n    \n    handleUserADGroups(\n        $username,\n        $userInfo,\n        $ret['userGroups'],\n        $SETTINGS\n    );\n\n    // Finalize authentication\n    finalizeAuthentication($userInfo, $passwordClear, $SETTINGS);\n\n    return [\n        'error' => false,\n        'message' => '',\n        'user_info' => $userInfo,\n    ];\n}\n\n/**\n * Permits to update the user's AD groups with mapping roles\n *\n * @param string $username\n * @param array $userInfo\n * @param array $groups\n * @param array $SETTINGS\n * @return void\n */\nfunction handleUserADGroups(string $username, array $userInfo, array $groups, array $SETTINGS): void\n{\n    if (isset($SETTINGS['enable_ad_users_with_ad_groups']) === true && (int) $SETTINGS['enable_ad_users_with_ad_groups'] === 1) {\n        // Get user groups from AD\n        $user_ad_groups = [];\n        foreach($groups as $group) {\n            //print_r($group);\n            // get relation role id for AD group\n            $role = DB::queryFirstRow(\n                'SELECT lgr.role_id\n                FROM ' . prefixTable('ldap_groups_roles') . ' AS lgr\n                WHERE lgr.ldap_group_id = %i',\n                $group\n            );\n            if (DB::count() > 0) {\n                array_push($user_ad_groups, $role['role_id']); \n            }\n        }\n        \n        // save\n        if (count($user_ad_groups) > 0) {\n            $user_ad_groups = implode(';', $user_ad_groups);\n            DB::update(\n                prefixTable('users'),\n                [\n                    'roles_from_ad_groups' => $user_ad_groups,\n                ],\n                'id = %i',\n                $userInfo['id']\n            );\n\n            $userInfo['roles_from_ad_groups'] = $user_ad_groups;\n        } else {\n            DB::update(\n                prefixTable('users'),\n                [\n                    'roles_from_ad_groups' => null,\n                ],\n                'id = %i',\n                $userInfo['id']\n            );\n\n            $userInfo['roles_from_ad_groups'] = [];\n        }\n    } else {\n        // Delete all user's AD groups\n        DB::update(\n            prefixTable('users'),\n            [\n                'roles_from_ad_groups' => null,\n            ],\n            'id = %i',\n            $userInfo['id']\n        );\n    }\n}\n\n/**\n * Permits to finalize the authentication process.\n *\n * @param array $userInfo\n * @param string $passwordClear\n * @param array $SETTINGS\n */\nfunction finalizeAuthentication(\n    array $userInfo,\n    string $passwordClear,\n    array $SETTINGS\n): void\n{\n    // load passwordLib library\n    $pwdlib = new SplClassLoader('PasswordLib', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $pwdlib->register();\n    $pwdlib = new PasswordLib\\PasswordLib();\n    $hashedPassword = $pwdlib->createPasswordHash($passwordClear);\n\n    //If user has never been connected then erase current pwd with the ldap's one\n    if (empty($userInfo['pw']) === true) {\n        // Password are similar in Teampass and AD\n        DB::update(\n            prefixTable('users'),\n            [\n                'pw' => $hashedPassword,\n            ],\n            'id = %i',\n            $userInfo['id']\n        );\n    } elseif ($userInfo['special'] === 'user_added_from_ldap') {\n        // Case where user has been added from LDAP and never being connected to TP\n        DB::update(\n            prefixTable('users'),\n            array(\n                'pw' => $hashedPassword,\n            ),\n            'id = %i',\n            $userInfo['id']\n        );\n    } elseif ($pwdlib->verifyPasswordHash($passwordClear, $userInfo['pw']) === false) {\n        // Case where user is auth by LDAP but his password in Teampass is not synchronized\n        // For example when user has changed his password in AD.\n        // So we need to update it in Teampass and ask for private key re-encryption\n        DB::update(\n            prefixTable('users'),\n            [\n                'pw' => $hashedPassword,\n            ],\n            'id = %i',\n            $userInfo['id']\n        );\n    }\n}\n\n/**\n * Undocumented function.\n *\n * @param string|array|resource $dataReceived Received data\n * @param string                $userInfo     Result of query\n * @param array                 $SETTINGS     Teampass settings\n *\n * @return array\n */\nfunction yubicoMFACheck($dataReceived, string $userInfo, array $SETTINGS): array\n{\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    $sessionAdmin = $superGlobal->get('user_admin', 'SESSION');\n    $sessionUrl = $superGlobal->get('initial_url', 'SESSION');\n    $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n    // Init\n    $yubico_key = htmlspecialchars_decode($dataReceived['yubico_key']);\n    $yubico_user_key = htmlspecialchars_decode($dataReceived['yubico_user_key']);\n    $yubico_user_id = htmlspecialchars_decode($dataReceived['yubico_user_id']);\n    if (empty($yubico_user_key) === false && empty($yubico_user_id) === false) {\n        // save the new yubico in user's account\n        DB::update(\n            prefixTable('users'),\n            [\n                'yubico_user_key' => $yubico_user_key,\n                'yubico_user_id' => $yubico_user_id,\n            ],\n            'id=%i',\n            $userInfo['id']\n        );\n    } else {\n        // Check existing yubico credentials\n        if ($userInfo['yubico_user_key'] === 'none' || $userInfo['yubico_user_id'] === 'none') {\n            return [\n                'error' => true,\n                'value' => '',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : '',\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => 'no_user_yubico_credentials',\n                'message' => '',\n                'proceedIdentification' => false,\n            ];\n        }\n        $yubico_user_key = $userInfo['yubico_user_key'];\n        $yubico_user_id = $userInfo['yubico_user_id'];\n    }\n\n    // Now check yubico validity\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Authentication/Yubico/Yubico.php';\n    $yubi = new Auth_Yubico($yubico_user_id, $yubico_user_key);\n    $auth = $yubi->verify($yubico_key);\n    //, null, null, null, 60\n\n    if (PEAR::isError($auth)) {\n        return [\n            'error' => true,\n            'value' => '',\n            'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : '',\n            'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'error' => 'bad_user_yubico_credentials',\n            'message' => langHdl('yubico_bad_code'),\n            'proceedIdentification' => false,\n        ];\n    }\n\n    return [\n        'error' => false,\n        'message' => '',\n        'proceedIdentification' => true,\n    ];\n}\n\n/**\n * Undocumented function.\n *\n * @param string $username      User name\n * @param string $passwordClear User password in clear\n * @param array $retLDAP       Received data from LDAP\n * @param array $SETTINGS      Teampass settings\n *\n * @return array\n */\nfunction ldapCreateUser(string $login, string $passwordClear, string $userEmail, string $userName, string $userLastname, array $SETTINGS): array\n{\n    // Generate user keys pair\n    $userKeys = generateUserKeys($passwordClear);\n\n    // load passwordLib library\n    $pwdlib = new SplClassLoader('PasswordLib', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $pwdlib->register();\n    $pwdlib = new PasswordLib\\PasswordLib();\n    $hashedPassword = $pwdlib->createPasswordHash($passwordClear);\n\n    // Insert user in DB\n    DB::insert(\n        prefixTable('users'),\n        [\n            'login' => (string) $login,\n            'pw' => (string) $hashedPassword,\n            'email' => (string) $userEmail,\n            'name' => (string) $userName,\n            'lastname' => (string) $userLastname,\n            'admin' => '0',\n            'gestionnaire' => '0',\n            'can_manage_all_users' => '0',\n            'personal_folder' => $SETTINGS['enable_pf_feature'] === '1' ? '1' : '0',\n            'groupes_interdits' => '',\n            'groupes_visibles' => '',\n            'last_pw_change' => (int) time(),\n            'user_language' => (string) $SETTINGS['default_language'],\n            'encrypted_psk' => '',\n            'isAdministratedByRole' => isset($SETTINGS['ldap_new_user_is_administrated_by']) === true && empty($SETTINGS['ldap_new_user_is_administrated_by']) === false ? $SETTINGS['ldap_new_user_is_administrated_by'] : 0,\n            'public_key' => $userKeys['public_key'],\n            'private_key' => $userKeys['private_key'],\n            'special' => 'none',\n            'auth_type' => 'ldap',\n            'otp_provided' => '1',\n            'is_ready_for_usage' => '0',\n        ]\n    );\n    $newUserId = DB::insertId();\n\n    // Create the API key\n    DB::insert(\n        prefixTable('api'),\n        array(\n            'type' => 'user',\n            'user_id' => $newUserId,\n            'value' => encryptUserObjectKey(base64_encode(base64_encode(uniqidReal(39))), $userKeys['public_key']),\n            'timestamp' => time(),\n        )\n    );\n\n    // Create personnal folder\n    if (isKeyExistingAndEqual('enable_pf_feature', 1, $SETTINGS) === true) {\n        DB::insert(\n            prefixTable('nested_tree'),\n            [\n                'parent_id' => '0',\n                'title' => $newUserId,\n                'bloquer_creation' => '0',\n                'bloquer_modification' => '0',\n                'personal_folder' => '1',\n                'categories' => '',\n            ]\n        );\n        // Rebuild tree\n        $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n        $tree->register();\n        $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n        $tree->rebuild();\n    }\n\n    return [\n        'error' => false,\n        'message' => '',\n        'proceedIdentification' => true,\n        'user_initial_creation_through_ldap' => true,\n        'id' => $newUserId,\n    ];\n}\n\n/**\n * Undocumented function.\n *\n * @param string                $username     Username\n * @param array                 $userInfo     Result of query\n * @param string|array|resource $dataReceived DataReceived\n * @param array                 $SETTINGS     Teampass settings\n *\n * @return array\n */\nfunction googleMFACheck(string $username, array $userInfo, $dataReceived, array $SETTINGS): array\n{\n    if (\n        isset($dataReceived['GACode']) === true\n        && empty($dataReceived['GACode']) === false\n    ) {\n        // Load superGlobals\n        include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n        $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n        $sessionAdmin = $superGlobal->get('user_admin', 'SESSION');\n        $sessionUrl = $superGlobal->get('initial_url', 'SESSION');\n        $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n        // load library\n        include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Authentication/TwoFactorAuth/TwoFactorAuth.php';\n        // create new instance\n        $tfa = new Authentication\\TwoFactorAuth\\TwoFactorAuth($SETTINGS['ga_website_name']);\n        // Init\n        $firstTime = [];\n        // now check if it is the 1st time the user is using 2FA\n        if ($userInfo['ga_temporary_code'] !== 'none' && $userInfo['ga_temporary_code'] !== 'done') {\n            if ($userInfo['ga_temporary_code'] !== $dataReceived['GACode']) {\n                return [\n                    'error' => true,\n                    'message' => langHdl('ga_bad_code'),\n                    'proceedIdentification' => false,\n                    'ga_bad_code' => true,\n                    'firstTime' => $firstTime,\n                ];\n            }\n\n            // If first time with MFA code\n            $proceedIdentification = false;\n            $mfaStatus = 'ga_temporary_code_correct';\n            $mfaMessage = langHdl('ga_flash_qr_and_login');\n            // generate new QR\n            $new_2fa_qr = $tfa->getQRCodeImageAsDataUri(\n                'Teampass - ' . $username,\n                $userInfo['ga']\n            );\n            // clear temporary code from DB\n            DB::update(\n                prefixTable('users'),\n                [\n                    'ga_temporary_code' => 'done',\n                ],\n                'id=%i',\n                $userInfo['id']\n            );\n            $firstTime = [\n                'value' => '<img src=\"' . $new_2fa_qr . '\">',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : '',\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'message' => $mfaMessage,\n                'mfaStatus' => $mfaStatus,\n            ];\n        } else {\n            // verify the user GA code\n            if ($tfa->verifyCode($userInfo['ga'], $dataReceived['GACode'])) {\n                $proceedIdentification = true;\n            } else {\n                return [\n                    'error' => true,\n                    'message' => langHdl('ga_bad_code'),\n                    'proceedIdentification' => false,\n                    'ga_bad_code' => true,\n                    'firstTime' => $firstTime,\n                ];\n            }\n        }\n    } else {\n        return [\n            'error' => true,\n            'message' => langHdl('ga_bad_code'),\n            'proceedIdentification' => false,\n            'ga_bad_code' => true,\n            'firstTime' => [],\n        ];\n    }\n\n    return [\n        'error' => false,\n        'message' => '',\n        'proceedIdentification' => $proceedIdentification,\n        'firstTime' => $firstTime,\n    ];\n}\n\n\n/**\n * Perform DUO checks\n *\n * @param string $username\n * @param string|array|resource $dataReceived\n * @param array $SETTINGS\n * @return array\n */\nfunction duoMFACheck(\n    string $username,\n    $dataReceived,\n    array $SETTINGS\n): array\n{\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';            \n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n    $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n    $saved_state = null !== $superGlobal->get('duo_state','SESSION') ? $superGlobal->get('duo_state','SESSION') : '';\n    $duo_status = null !== $superGlobal->get('duo_status','SESSION') ? $superGlobal->get('duo_status','SESSION') : '';\n\n    // Ensure state and login are set\n    if (\n        (empty($saved_state) || empty($dataReceived['login']) || !isset($dataReceived['duo_state']) || empty($dataReceived['duo_state']))\n        && $duo_status === 'IN_PROGRESS'\n        && $dataReceived['duo_status'] !== 'start_duo_auth'\n    ) {\n        return [\n            'error' => true,\n            'message' => langHdl('duo_no_data'),\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'proceedIdentification' => false,\n        ];\n    }\n\n    // Ensure state matches from initial request\n    if ($duo_status === 'IN_PROGRESS' && $dataReceived['duo_state'] !== $saved_state) {\n        // We did not received a proper Duo state\n        return [\n            'error' => true,\n            'message' => langHdl('duo_error_state'),\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'proceedIdentification' => false,\n        ];\n    }\n\n    return [\n        'error' => false,\n        'pwd_attempts' => (int) $sessionPwdAttempts,\n        'saved_state' => $saved_state,\n        'duo_status' => $duo_status,\n    ];\n}\n\n\n/**\n * Create the redirect URL or check if the DUO Universal prompt was completed successfully.\n *\n * @param string                $username               Username\n * @param string|array|resource $dataReceived           DataReceived\n * @param array                 $sessionPwdAttempts     Nb of pwd attempts\n * @param array                 $saved_state            Saved state\n * @param array                 $duo_status             Duo status\n * @param array                 $SETTINGS               Teampass settings\n *\n * @return array\n */\nfunction duoMFAPerform(\n    string $username,\n    $dataReceived,\n    int $sessionPwdAttempts,\n    string $saved_state,\n    string $duo_status,\n    array $SETTINGS\n): array\n{\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';            \n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n    // load libraries\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/BeforeValidException.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/ExpiredException.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/SignatureInvalidException.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/JWT.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/Key.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/DuoUniversal/DuoException.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/DuoUniversal/Client.php';\n\n    try {\n        $duo_client = new Duo\\DuoUniversal\\Client(\n            $SETTINGS['duo_ikey'],\n            $SETTINGS['duo_skey'],\n            $SETTINGS['duo_host'],\n            $SETTINGS['cpassman_url'].'/'.DUO_CALLBACK\n        );\n    } catch (Duo\\DuoUniversal\\DuoException $e) {\n        return [\n            'error' => true,\n            'message' => langHdl('duo_config_error'),\n            'debug_message' => $e->getMessage(),\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'proceedIdentification' => false,\n        ];\n    }\n        \n    try {\n        $duo_error = langHdl('duo_error_secure');\n        $duo_failmode = \"none\";\n        $duo_client->healthCheck();\n    } catch (Duo\\DuoUniversal\\DuoException $e) {\n        //Not implemented Duo Failmode in case the Duo services are not available\n        /*if ($SETTINGS['duo_failmode'] == \"safe\") {\n            # If we're failing open, errors in 2FA still allow for success\n            $duo_error = langHdl('duo_error_failopen');\n            $duo_failmode = \"safe\";\n        } else {\n            # Duo has failed and is unavailable, redirect user to the login page\n            $duo_error = langHdl('duo_error_secure');\n            $duo_failmode = \"secure\";\n        }*/\n        return [\n            'error' => true,\n            'message' => $duo_error . langHdl('duo_error_check_config'),\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'debug_message' => $e->getMessage(),\n            'proceedIdentification' => false,\n        ];\n    }\n    \n    // Check if no one played with the javascript\n    if ($duo_status !== 'IN_PROGRESS' && $dataReceived['duo_status'] === 'start_duo_auth') {\n        # Create the Duo URL to send the user to\n        try {\n            $duo_state = $duo_client->generateState();\n            $duo_redirect_url = $duo_client->createAuthUrl($username, $duo_state);\n        } catch (Duo\\DuoUniversal\\DuoException $e) {\n            return [\n                'error' => true,\n                'message' => $duo_error . langHdl('duo_error_url'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'debug_message' => $e->getMessage(),\n                'proceedIdentification' => false,\n            ];\n        }\n        \n        // Somethimes Duo return success but fail to return a URL, double check if the URL has been created\n        if (!empty($duo_redirect_url) && isset($duo_redirect_url) && filter_var($duo_redirect_url,FILTER_SANITIZE_URL)) {\n            // Since Duo Universal requires a redirect, let's store some info when the user get's back after completing the Duo prompt\n            $key = hash('sha256', $duo_state);\n            $iv = substr(hash('sha256', $duo_state), 0, 16);\n            $duo_data = serialize([\n                'duo_login' => $username,\n                'duo_pwd' => $dataReceived['pw'],\n            ]);\n            $duo_data_enc = openssl_encrypt($duo_data, 'AES-256-CBC', $key, 0, $iv);\n            $superGlobal->put('duo_state', $duo_state, 'SESSION');\n            $superGlobal->put('duo_data', base64_encode($duo_data_enc), 'SESSION');\n            $superGlobal->put('duo_status', 'IN_PROGRESS', 'SESSION');\n            // If we got here we can reset the password attempts\n            $superGlobal->put('pwd_attempts', 0, 'SESSION');\n            unset($superGlobal);\n            return [\n                'error' => false,\n                'message' => '',\n                'proceedIdentification' => false,\n                'duo_url_ready' => true,\n                'duo_redirect_url' => $duo_redirect_url,\n                'duo_failmode' => $duo_failmode,\n            ];\n        } else {\n            return [\n                'error' => true,\n                'message' => $duo_error . langHdl('duo_error_url'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'proceedIdentification' => false,\n            ];\n        }\n    } elseif ($duo_status === 'IN_PROGRESS' && $dataReceived['duo_code'] !== '') {\n        try {\n            // Check if the Duo code received is valid\n            $decoded_token = $duo_client->exchangeAuthorizationCodeFor2FAResult($dataReceived['duo_code'], $username);\n        } catch (Duo\\DuoUniversal\\DuoException $e) {\n            return [\n                'error' => true,\n                'message' => langHdl('duo_error_decoding'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'debug_message' => $e->getMessage(),\n                'proceedIdentification' => false,\n            ];\n        }\n        // return the response (which should be the user name)\n        if ($decoded_token['preferred_username'] === $username) {\n            $superGlobal->put('duo_status', 'COMPLET', 'SESSION');\n            $superGlobal->forget('duo_state','SESSION');\n            $superGlobal->forget('duo_data','SESSION');\n            unset($superGlobal);\n\n            return [\n                'error' => false,\n                'message' => '',\n                'proceedIdentification' => true,\n                'authenticated_username' => $decoded_token['preferred_username']\n            ];\n        } else {\n            // Something wrong, username from the original Duo request is different than the one received now\n            $superGlobal->forget('duo_status','SESSION');\n            $superGlobal->forget('duo_state','SESSION');\n            $superGlobal->forget('duo_data','SESSION');\n            unset($superGlobal);\n\n            return [\n                'error' => true,\n                'message' => langHdl('duo_login_mismatch'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'proceedIdentification' => false,\n            ];\n        }\n    }\n    // If we are here something wrong\n    $superGlobal->forget('duo_status','SESSION');\n    $superGlobal->forget('duo_state','SESSION');\n    $superGlobal->forget('duo_data','SESSION');\n    unset($superGlobal);\n    return [\n        'error' => true,\n        'message' => langHdl('duo_login_mismatch'),\n        'pwd_attempts' => (int) $sessionPwdAttempts,\n        'proceedIdentification' => false,\n    ];\n}\n\n/**\n * Undocumented function.\n *\n * @param string                $passwordClear Password in clear\n * @param array|string          $userInfo      Array of user data\n * @param array|string|resource $dataReceived  Received data\n * @param string                $username      User name\n * @param array                 $SETTINGS      Teampass settings\n *\n * @return bool\n */\nfunction checkCredentials($passwordClear, $userInfo, $dataReceived, $username, $SETTINGS)\n{\n    // Set to false\n    $userPasswordVerified = false;\n    // load passwordLib library\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    $pwdlib = new SplClassLoader('PasswordLib', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $pwdlib->register();\n    $pwdlib = new PasswordLib\\PasswordLib();\n    // Check if old encryption used\n    if (\n        crypt($passwordClear, $userInfo['pw']) === $userInfo['pw']\n        && empty($userInfo['pw']) === false\n    ) {\n        $userPasswordVerified = true;\n        //update user's password\n        $userInfo['pw'] = $pwdlib->createPasswordHash($passwordClear);\n        DB::update(\n            prefixTable('users'),\n            [\n                'pw' => $userInfo['pw'],\n            ],\n            'id=%i',\n            $userInfo['id']\n        );\n    }\n    //echo $passwordClear.\" - \".$userInfo['pw'].\" - \".$pwdlib->verifyPasswordHash($passwordClear, $userInfo['pw']).\" ;; \";\n    // check the given password\n    if ($userPasswordVerified !== true) {\n        if ($pwdlib->verifyPasswordHash($passwordClear, $userInfo['pw']) === true) {\n            $userPasswordVerified = true;\n        } else {\n            // 2.1.27.24 - manage passwords\n            if ($pwdlib->verifyPasswordHash(htmlspecialchars_decode($dataReceived['pw']), $userInfo['pw']) === true) {\n                // then the auth is correct but needs to be adapted in DB since change of encoding\n                $userInfo['pw'] = $pwdlib->createPasswordHash($passwordClear);\n                DB::update(\n                    prefixTable('users'),\n                    [\n                        'pw' => $userInfo['pw'],\n                    ],\n                    'id=%i',\n                    $userInfo['id']\n                );\n                $userPasswordVerified = true;\n            } else {\n                $userPasswordVerified = false;\n                logEvents(\n                    $SETTINGS,\n                    'failed_auth',\n                    'password_is_not_correct',\n                    '',\n                    '',\n                    stripslashes($username)\n                );\n            }\n        }\n    }\n\n    return $userPasswordVerified;\n}\n\n/**\n * Undocumented function.\n *\n * @param bool   $enabled text1\n * @param string $dbgFile text2\n * @param string $text    text3\n */\nfunction debugIdentify(bool $enabled, string $dbgFile, string $text): void\n{\n    if ($enabled === true) {\n        $fp = fopen($dbgFile, 'a');\n        if ($fp !== false) {\n            fwrite(\n                $fp,\n                $text\n            );\n        }\n    }\n}\n\n\n\nfunction identifyGetUserCredentials(\n    array $SETTINGS,\n    string $serverPHPAuthUser,\n    string $serverPHPAuthPw,\n    string $userPassword,\n    string $userLogin\n): array\n{\n    if ((int) $SETTINGS['enable_http_request_login'] === 1\n        && $serverPHPAuthUser !== null\n        && (int) $SETTINGS['maintenance_mode'] === 1\n    ) {\n        if (strpos($serverPHPAuthUser, '@') !== false) {\n            return [\n                'username' => explode('@', $serverPHPAuthUser)[0],\n                'passwordClear' => $serverPHPAuthPw\n            ];\n        }\n        \n        if (strpos($serverPHPAuthUser, '\\\\') !== false) {\n            return [\n                'username' => explode('\\\\', $serverPHPAuthUser)[1],\n                'passwordClear' => $serverPHPAuthPw\n            ];\n        }\n\n        return [\n            'username' => $serverPHPAuthPw,\n            'passwordClear' => $serverPHPAuthPw\n        ];\n    }\n    \n    return [\n        'username' => $userLogin,\n        'passwordClear' => $userPassword\n    ];\n}\n\n\nclass initialChecks {\n    // Properties\n    public $login;\n\n    // Methods\n    public function get_is_too_much_attempts($attempts) {\n        if ($attempts > 3) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n    }\n\n    public function get_user_info($login, $enable_ad_user_auto_creation) {\n        $data = DB::queryFirstRow(\n            'SELECT u.*, a.value AS api_key\n            FROM ' . prefixTable('users') . ' AS u\n            LEFT JOIN ' . prefixTable('api') . ' AS a ON (u.id = a.user_id)\n            WHERE login = %s',\n            $login\n        );\n        \n        // User doesn't exist then return error\n        // Except if user creation from LDAP is enabled\n        if (DB::count() === 0 && $enable_ad_user_auto_creation === false) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n        $data['ldap_user_to_be_created'] = $enable_ad_user_auto_creation === true && DB::count() === 0 ? true : false;\n\n        // ensure user fonction_id is set to false if not existing\n        /*if (is_null($data['fonction_id']) === true) {\n            $data['fonction_id'] = '';\n        }*/\n\n        // Prepare user roles (fonction_id + roles_from_ad_groups)\n        // Disable this as this happend repeadetly and is not necessary when working with AD groups\n        //$data['fonction_id'] = is_null($data['roles_from_ad_groups']) === true ? $data['fonction_id'] : (empty($data['roles_from_ad_groups']) === true ? $data['fonction_id'] : $data['fonction_id'] . ';' . $data['roles_from_ad_groups']);\n\n        return $data;\n    }\n\n    public function get_teampass_in_maintenance_mode($maintenance_mode, $user_admin) {\n        if ((int) $maintenance_mode === 1 && (int) $user_admin === 0) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n    }\n\n    public function get_mfa_code_is_set(\n        $yubico,\n        $ga,\n        $duo,\n        $admin,\n        $adminMfaRequired,\n        $mfa,\n        $userMfaSelection,\n        $userMfaEnabled\n    ) {\n        if (\n            (empty($userMfaSelection) === true &&\n            isOneVarOfArrayEqualToValue(\n                [\n                    (int) $yubico,\n                    (int) $ga,\n                    (int) $duo\n                ],\n                1\n            ) === true)\n            && (((int) $admin !== 1 && $userMfaEnabled === true) || ((int) $adminMfaRequired === 1 && (int) $admin === 1))\n            && $mfa === true\n        ) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n    }\n\n    public function get_install_folder_is_not_present($admin, $install_folder) {\n        if ((int) $admin === 1 && is_dir($install_folder) === true) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n    }\n}\n\n\n/**\n * Permit to get info about user before auth step\n *\n * @param array $SETTINGS\n * @param integer $sessionPwdAttempts\n * @param string $username\n * @param integer $sessionAdmin\n * @param string $sessionUrl\n * @param string $user_2fa_selection\n * @return array\n */\nfunction identifyDoInitialChecks(\n    $SETTINGS,\n    int $sessionPwdAttempts,\n    string $username,\n    int $sessionAdmin,\n    string $sessionUrl,\n    string $user_2fa_selection\n): array\n{\n    $checks = new initialChecks();\n    $enable_ad_user_auto_creation = isset($SETTINGS['enable_ad_user_auto_creation']) === true && (int) $SETTINGS['enable_ad_user_auto_creation'] === 1 ? true : false;\n    \n    // Brute force management\n    try {\n        $checks->get_is_too_much_attempts($sessionPwdAttempts);\n    } catch (Exception $e) {\n        // Load superGlobals\n        include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n        $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n        $superGlobal->put('next_possible_pwd_attempts', time() + 10, 'SESSION');\n        $superGlobal->put('pwd_attempts', 0, 'SESSION');\n\n        logEvents($SETTINGS, 'failed_auth', 'user_not_exists', '', stripslashes($username), stripslashes($username));\n\n        return [\n            'error' => true,\n            'array' => [\n                'value' => 'bruteforce_wait',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => 0,\n                'error' => true,\n                'message' => langHdl('error_bad_credentials_more_than_3_times'),\n            ]\n        ];\n    }\n\n    // Check if user exists\n    try {\n        $userInfo = $checks->get_user_info($username, $enable_ad_user_auto_creation);\n    } catch (Exception $e) {\n        logEvents($SETTINGS, 'failed_auth', 'user_not_exists', '', stripslashes($username), stripslashes($username));\n        return [\n            'error' => true,\n            'array' => [\n                'error' => 'user_not_exists',\n                'message' => langHdl('error_bad_credentials'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n            ]\n        ];\n    }\n    \n    // Manage Maintenance mode\n    try {\n        $checks->get_teampass_in_maintenance_mode(\n            $SETTINGS['maintenance_mode'],\n            $userInfo['admin']\n        );\n    } catch (Exception $e) {\n        return [\n            'error' => true,\n            'array' => [\n                'value' => '',\n                'user_admin' => (int) $userInfo['admin'],\n                'initial_url' => '',\n                'pwd_attempts' => '',\n                'error' => 'maintenance_mode_enabled',\n                'message' => '',\n            ]\n        ];\n    }\n\n    // user should use MFA?\n    $userInfo['mfa_auth_requested_roles'] = mfa_auth_requested_roles(\n        (string) $userInfo['fonction_id'],\n        is_null($SETTINGS['mfa_for_roles']) === true ? '' : (string) $SETTINGS['mfa_for_roles']\n    );\n\n    // Check if 2FA code is requested\n    try {\n        $checks->get_mfa_code_is_set(\n            $SETTINGS['yubico_authentication'],\n            $SETTINGS['google_authentication'],\n            $SETTINGS['duo'],\n            $userInfo['admin'],\n            $SETTINGS['admin_2fa_required'],\n            $userInfo['mfa_auth_requested_roles'],\n            $user_2fa_selection,\n            $userInfo['mfa_enabled']\n        );\n    } catch (Exception $e) {\n        return [\n            'error' => true,\n            'array' => [\n                'value' => '2fa_not_set',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => '2fa_not_set',\n                'message' => langHdl('select_valid_2fa_credentials'),\n            ]\n        ];\n    }\n\n    // If admin user then check if folder install exists\n    // if yes then refuse connection\n    try {\n        $checks->get_install_folder_is_not_present(\n            $userInfo['admin'],\n            '../install'\n        );\n    } catch (Exception $e) {\n        return [\n            'error' => true,\n            'array' => [\n                'value' => '',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => true,\n                'message' => langHdl('remove_install_folder'),\n            ]\n        ];\n    }\n\n    // Return some usefull information about user\n    return [\n        'error' => false,\n        'user_mfa_mode' => $user_2fa_selection,\n        'userInfo' => $userInfo,\n    ];\n}\n\nfunction identifyDoLDAPChecks(\n    $SETTINGS,\n    $userInfo,\n    string $username,\n    string $passwordClear,\n    int $sessionAdmin,\n    string $sessionUrl,\n    int $sessionPwdAttempts\n): array\n{\n    // Prepare LDAP connection if set up\n    if ((int) $SETTINGS['ldap_mode'] === 1\n        && $username !== 'admin'\n        && ((string) $userInfo['auth_type'] === 'ldap' || $userInfo['ldap_user_to_be_created'] === true)\n    ) {\n        $retLDAP = authenticateThroughAD(\n            $username,\n            $userInfo,\n            $passwordClear,\n            $SETTINGS\n        );\n        if ($retLDAP['error'] === true) {\n            return [\n                'error' => true,\n                'array' => [\n                    'value' => '',\n                    'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                    'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                    'pwd_attempts' => (int) $sessionPwdAttempts,\n                    'error' => true,\n                    'message' => \"LDAP error: \".$retLDAP['message'],\n                ]\n            ];\n        }\n        return [\n            'error' => false,\n            'retLDAP' => $retLDAP,\n            'ldapConnection' => true,\n            'userPasswordVerified' => true,\n        ];\n    }\n\n    // return if no addmin\n    return [\n        'error' => false,\n        'retLDAP' => [],\n        'ldapConnection' => false,\n        'userPasswordVerified' => false,\n    ];\n}\n\n\nfunction identifyDoMFAChecks(\n    $SETTINGS,\n    $userInfo,\n    $dataReceived,\n    $userInitialData,\n    string $username\n): array\n{    \n    switch ($userInitialData['user_mfa_mode']) {\n        case 'google':\n            $ret = googleMFACheck(\n                $username,\n                $userInfo,\n                $dataReceived,\n                $SETTINGS\n            );\n            if ($ret['error'] !== false) {\n                logEvents($SETTINGS, 'failed_auth', 'wrong_mfa_code', '', stripslashes($username), stripslashes($username));\n                return [\n                    'error' => true,\n                    'mfaData' => $ret,\n                    'mfaQRCodeInfos' => false,\n                ];\n            }\n\n            return [\n                'error' => false,\n                'mfaData' => $ret['firstTime'],\n                'mfaQRCodeInfos' => $userInitialData['user_mfa_mode'] === 'google'\n                && count($ret['firstTime']) > 0 ? true : false,\n            ];\n\n        case 'yubico':\n            $ret = yubicoMFACheck(\n                $dataReceived,\n                $userInfo,\n                $SETTINGS\n            );\n            if ($ret['error'] !== false) {\n                return [\n                    'error' => true,\n                    'mfaData' => $ret,\n                    'mfaQRCodeInfos' => false,\n                ];\n            }\n            break;\n        \n        case 'duo':\n            // Prepare Duo connection if set up\n            $checks = duoMFACheck(\n                $username,\n                $dataReceived,\n                $SETTINGS\n            );\n\n            if ($checks['error'] === true) {\n                return [\n                    'error' => true,\n                    'mfaData' => $checks,\n                    'mfaQRCodeInfos' => false,\n                ];\n            }\n\n            // If we are here\n            // Do DUO authentication\n            $ret = duoMFAPerform(\n                $username,\n                $dataReceived,\n                $checks['pwd_attempts'],\n                $checks['saved_state'],\n                $checks['duo_status'],\n                $SETTINGS\n            );\n\n            if ($ret['error'] !== false) {\n                logEvents($SETTINGS, 'failed_auth', 'bad_duo_mfa', '', stripslashes($username), stripslashes($username));\n                // Load superGlobals\n                include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n                # Retrieve the previously stored state and username from the session\n                $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n                $superGlobal->forget('duo_state','SESSION');\n                $superGlobal->forget('duo_data','SESSION');\n                $superGlobal->forget('duo_status','SESSION');\n                unset($superGlobal);\n                return [\n                    'error' => true,\n                    'mfaData' => $ret,\n                    'mfaQRCodeInfos' => false,\n                ];\n            } else if ($ret['duo_url_ready'] === true){\n                return [\n                    'error' => false,\n                    'mfaData' => $ret,\n                    'duo_url_ready' => true,\n                    'mfaQRCodeInfos' => false,\n                ];\n            } else if ($ret['error'] === false) {\n                return [\n                    'error' => false,\n                    'mfaData' => $ret,\n                    'mfaQRCodeInfos' => false,\n                ];\n            }\n            break;\n        \n        default:\n            logEvents($SETTINGS, 'failed_auth', 'wrong_mfa_code', '', stripslashes($username), stripslashes($username));\n            return [\n                'error' => true,\n                'mfaData' => ['message' => langHdl('wrong_mfa_code')],\n                'mfaQRCodeInfos' => false,\n            ];\n    }\n\n    // If something went wrong, let's catch and return an error\n    logEvents($SETTINGS, 'failed_auth', 'wrong_mfa_code', '', stripslashes($username), stripslashes($username));\n    return [\n        'error' => true,\n        'mfaData' => ['message' => langHdl('wrong_mfa_code')],\n        'mfaQRCodeInfos' => false,\n    ];\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      load.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (isset($_SESSION['CPM']) === false || (int) $_SESSION['CPM'] !== 1) {\n    die('Hacking attempt...');\n}\n\n// Is maintenance on-going?\nif (\n    isset($SETTINGS['maintenance_mode']) === true\n    && (int) $SETTINGS['maintenance_mode'] === 1\n    && ($session_user_admin === null\n        || (int) $session_user_admin === 1)\n) {\n    ?>\n    <script type=\"text/javascript\">\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('index_maintenance_mode_admin'); ?>',\n            '<?php echo langHdl('information'); ?>', {\n                timeOut: 0\n            }\n        );\n    </script>\n<?php\n}\n?>\n\n<script type=\"text/javascript\">\n    var userScrollPosition = 0,\n        debugJavascript = true;\n    let hourInMinutes = 60;\n\n\n    $(document).ready(function() {\n        //console.log('-- PAGE LOADED --'+$(location).attr('href').includes('?')+\" -- \"+store.get('teampassUser'));\n        if ($(location).attr('href').includes('?') === true && (store.get('teampassUser') === undefined || parseInt(store.get('teampassUser').user_id) <= 0)) {\n            $(location).attr('href', 'index.php?session=expired');\n            return false;\n        }\n\n        // prevent a resubmit on refresh and back button\n        if (window.history.replaceState) {\n            window.history.replaceState(null, null, window.location.href);\n        }\n    });\n\n    /**\n    *   Add 1 hour to session duration\n    **/\n    function IncreaseSessionTime(duration)\n    {\n        duration = duration || hourInMinutes;\n        $.post(\n            'sources/main.queries.php',\n            {\n                type     : 'increase_session_time',\n                type_category: 'action_user',\n                duration : parseInt(duration, 10) * hourInMinutes,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                if (data[0].new_value !== 'expired') {\n                    $('#temps_restant').val(data[0].new_value);\n                    $('#date_end_session').val(data[0].new_value);\n                    $('#countdown').css('color', 'white');\n                } else {\n                    $(location).attr('href', 'index.php?session=expired');\n                }\n            },\n            'json'\n        );\n    }\n\n    // Start real time\n    // get list of last items\n    if (store.get('teampassUser') !== undefined && parseInt(store.get('teampassUser').user_id) > 0\n        && String('<?php echo $_SESSION['key']; ?>') === store.get('teampassUser').sessionKey\n        && (Date.now() - store.get('teampassUser').sessionStartTimestamp) < (store.get('teampassUser').sessionDuration * 1000)\n    ) {\n        $.when(\n            // Load teampass settings\n            loadSettings()\n        ).then(function() {\n            $.when(\n                // Refresh list of last items shopwn\n                refreshListLastSeenItems()\n            ).then(function() {\n                // Check if new privatekey needs to be adapted\n                var data = {\n                    'user_id': store.get('teampassUser').user_id,\n                    'fields' : 'special, auth_type, is_ready_for_usage, ongoing_process_id, otp_provided',\n                }\n                $.post(\n                    \"sources/main.queries.php\", {\n                        type: \"get_user_info\",\n                        type_category: 'action_user',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //decrypt data\n                        data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) {\n                            console.info('Get user info results:');\n                            console.log(data);\n                        }\n\n                        // update local storage\n                        store.update(\n                            'teampassUser', {},\n                            function(teampassUser) {\n                                teampassUser.special = data.queryResults.special;\n                                teampassUser.auth_type = data.queryResults.auth_type;\n                                teampassUser.is_ready_for_usage = data.queryResults.is_ready_for_usage;\n                                teampassUser.ongoing_process_id = data.queryResults.ongoing_process_id;\n                            }\n                        );\n\n                        if (data.error === false && data.queryResults.special === 'generate-keys') {\n                            // Get generation keys progress status\n                            getGenerateKeysProgress(store.get('teampassUser').user_id);\n\n                            // ----\n                        } else if (data.error === false && data.queryResults.special === 'auth-pwd-change' && data.queryResults.auth_type === 'local') {\n                            // USer's password has been reseted, he shall change it\n                            if (debugJavascript === true) console.log('User has to change his auth password')\n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // Show passwords inputs and form\n                            $('#dialog-user-change-password-info')\n                                .html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('user_has_to_change_password_info');?>')\n                                .removeClass('hidden');\n                            $('#dialog-user-change-password').removeClass('hidden');\n\n                        // ----\n                        } else if (data.error === false && data.queryResults.special === 'auth-pwd-change' && data.queryResults.auth_type === 'ldap') {\n                            // USer's password has been reseted, he shall change it\n                            if (debugJavascript === true) console.log('LDAP user password has to change his auth password')\n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // Show passwords inputs and form\n                            $('#dialog-ldap-user-change-password-info')\n                                .html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('ldap_user_has_changed_his_password');?>')\n                                .removeClass('hidden');\n                            $('#dialog-ldap-user-change-password').removeClass('hidden');\n                            \n                            // ----\n                        } else if (\n                            (data.error === false && data.queryResults.special === 'user_added_from_ldap' && data.queryResults.auth_type === 'ldap')\n                            || (typeof data.queryResults !== 'undefined' && data.queryResults.special === 'otc_is_required_on_next_login')\n                            || parseInt(data.queryResults.otp_provided) === 0\n                        ) {\n                            // USer's password has been reseted, he shall change it\n                            if (debugJavascript === true) console.log('NEW LDAP user password - we need to encrypt items')\n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // Show form\n                            $('#dialog-ldap-user-build-keys-database').removeClass('hidden');\n                        } else if (typeof data.queryResults !== 'undefined' && data.queryResults.special === 'recrypt-private-key') {\n                            // USer's password has been reseted, he shall change it\n                            if (debugJavascript === true) console.log('NEW LDAP - we need to encrypt private key')\n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // Show form\n                            $('#dialog-ldap-user-change-password').removeClass('hidden');\n                        }\n                    }\n                );\n            }).then(function() {\n                if (store.get('teampassSettings') === undefined || parseInt(store.get('teampassSettings').enable_tasks_manager) === 0) {\n                    console.log('Now sending emails')\n                    setTimeout(\n                        function() {\n                            $.when(\n                                // send email\n                                $.post(\n                                    \"sources/main.queries.php\", {\n                                        type: \"send_waiting_emails\",\n                                        type_category: 'action_mail',\n                                        key: \"<?php echo $_SESSION['key']; ?>\"\n                                    }\n                                )\n                            ).then(function() {\n                                // send statistics\n                                $.post(\n                                    \"sources/main.queries.php\", {\n                                        type: \"sending_statistics\",\n                                        type_category: 'action_system',\n                                        key: \"<?php echo $_SESSION['key']; ?>\"\n                                    }\n                                );\n                            });\n                        },\n                        3000\n                    );\n                }\n\n                // Save user location\n                //console.info(\"DEBUG - Save user location -\"+store.get('teampassUser').location_stored)\n                if (store.get('teampassUser').location_stored !== 1) {\n                // Save user location\n                    $.post(\n                        \"sources/users.queries.php\", {\n                            type: 'save_user_location',\n                            step: \"perform\",\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            // update local storage\n                            store.update(\n                                'teampassUser', {},\n                                function(teampassUser) {\n                                    teampassUser.location_stored = 1;\n                                }\n                            );\n                        }\n                    );\n                }\n            });\n        });\n    }\n    //-- end\n\n\n    // Countdown\n    countdown();\n\n    $(\".show_hide_password a\").on('click', function(event) {\n        event.preventDefault();\n        if($('.how_hide_password input').attr(\"type\") === \"text\"){\n            $('.show_hide_password input').attr('type', 'password');\n            $('.show_hide_password i').addClass( \"fa-eye-slash\" );\n            $('.show_hide_password i').removeClass( \"fa-eye\" );\n        }else if($('#show_hide_password input').attr(\"type\") === \"password\"){\n            $('.show_hide_password input').attr('type', 'text');\n            $('.show_hide_password i').removeClass( \"fa-eye-slash\" );\n            $('.show_hide_password i').addClass( \"fa-eye\" );\n        }\n    });\n    \n    if (store.get('teampassUser') !== undefined &&\n        store.get('teampassUser').special === 'generate-keys'\n    ) {\n        // Now we need to perform re-encryption due to LDAP password change\n        /*console.log('User has to regenerate keys')\n        // HIde\n        $('.content-header, .content').addClass('hidden');\n        $('#dialog-user-temporary-code-info').html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('renecyption_expected');?>');\n\n        // Show passwords inputs and form\n        $('#dialog-user-temporary-code').removeClass('hidden');\n        */\n        \n        // ---\n    } else if (store.get('teampassUser') !== undefined &&\n        store.get('teampassUser').special === 'ldap_password_has_changed_do_reencryption'\n    ) {\n        // Now we need to perform re-encryption due to LDAP password change\n        console.log('show password change')\n        // HIde\n        $('.content-header, .content, #button_do_sharekeys_reencryption').addClass('hidden');\n        $('#warning-text-reencryption').html('<i class=\"icon fa-solid fa-info mr-2\"></i>'.langHdl('ldap_password_change_warning'));\n\n        // Show passwords inputs and form\n        $('#dialog-encryption-keys, .ask-for-previous-password').removeClass('hidden');\n\n        $('#sharekeys_reencryption_target_user').val(store.get('teampassUser').user_id);\n\n        $('#button_do_sharekeys_reencryption').removeClass('hidden');\n        \n        // ---\n    } else if (store.get('teampassUser') !== undefined &&\n        store.get('teampassUser').shown_warning_unsuccessful_login === false\n    ) {\n        // If login attempts experimented\n        // Prepare modal\n        showModalDialogBox(\n            '#warningModal',\n            '<i class=\"fa-solid fa-user-shield fa-lg warning mr-2\"></i><?php echo langHdl('caution'); ?>',\n            '<?php echo langHdl('login_attempts_identified_since_last_connection'); ?>',\n            '<?php echo langHdl('see_detail'); ?>',\n            '<?php echo langHdl('cancel'); ?>'\n        );\n\n        // Actions on modal buttons\n        $(document).on('click', '#warningModalButtonClose', function() {\n            store.update(\n                'teampassUser', {},\n                function(teampassUser) {\n                    teampassUser.shown_warning_unsuccessful_login = true;\n                }\n            );\n        });\n        $(document).on('click', '#warningModalButtonAction', function() {\n            // SHow user\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>');\n\n            // Action\n            store.update(\n                'teampassUser', {},\n                function(teampassUser) {\n                    teampassUser.shown_warning_unsuccessful_login = true;\n                }\n            );\n            document.location.href = \"index.php?page=profile&tab=timeline\";\n        });\n    } else if (store.get('teampassUser') !== undefined &&\n        store.get('teampassUser').special === 'private_items_to_encrypt'\n    ) {\n        // If user has to re-encrypt his personal item passwords\n        $('#dialog-encryption-personal-items-after-upgrade').removeClass('hidden');\n        $('.content, .content-header').addClass('hidden');\n        \n        // Actions on modal buttons\n        $(document).on('click', '#button_do_personal_items_reencryption', function() {\n            // SHow user\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>');\n\n            defusePskRemoval(store.get('teampassUser').user_id, 'psk', 0);\n            \n            function defusePskRemoval(userId, step, start)\n            {\n                if (step === 'psk') {\n                    // Inform user\n                    $(\"#user-current-defuse-psk-progress\").html('<b><?php echo langHdl('encryption_keys'); ?> </b> [' + start + ' - ' + (parseInt(start) + <?php echo NUMBER_ITEMS_IN_BATCH;?>) + '] ' +\n                        '... <?php echo langHdl('please_wait'); ?><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n\n                    var data = {\n                        'userPsk' : $('#user-current-defuse-psk').val(),\n                            'start': start,\n                            'length': <?php echo NUMBER_ITEMS_IN_BATCH;?>,\n                            'user_id': userId,\n                    };\n                    // Do query\n                    $.post(\n                        \"sources/main.queries.php\", {\n                            'type': \"user_psk_reencryption\",\n                            'type_category': 'action_key',\n                            'data': prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            'key': '<?php echo $_SESSION['key']; ?>'\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                            if (debugJavascript === true) console.log(data)\n                            if (data.error === true) {\n                                // error\n                                toastr.remove();\n                                toastr.error(\n                                    data.message,\n                                    '<?php echo langHdl('caution'); ?>', {\n                                        timeOut: 5000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Enable buttons\n                                $(\"#user-current-defuse-psk-progress\").html('<?php echo langHdl('provide_current_psk_and_click_launch'); ?>');\n                                $('#button_do_sharekeys_reencryption, #button_close_sharekeys_reencryption').removeAttr('disabled');\n                                return false;\n                            } else {\n                                // Start looping on all steps of re-encryption\n                                defusePskRemoval(data.userId, data.step, data.start);\n                            }\n                        }\n                    );\n                } else {\n                    // Finished\n                    $(\"#user-current-defuse-psk-progress\").html('<i class=\"fa-solid fa-check text-success mr-3\"></i><?php echo langHdl('done'); ?>');\n\n                    toastr.remove();\n                }\n            }\n\n        });\n        $(document).on('click', '#button_close_personal_items_reencryption', function() {\n            $('#dialog-encryption-personal-items-after-upgrade').addClass('hidden');\n            $('.content, .content-header').removeClass('hidden');\n        });\n    }\n\n\n    // Show tooltips\n    $('.infotip').tooltip();\n\n    // Sidebar redirection\n    $('.nav-link').click(function() {\n        if ($(this).data('name') !== undefined) {\n            //NProgress.start();\n            document.location.href = \"index.php?page=\" + $(this).data('name');\n        }\n    });\n\n    // User menu action\n    $('.user-menu').click(function() {\n        if ($(this).data('name') !== undefined) {\n            if ($(this).data('name') === 'increase_session') {\n                showExtendSession();\n            } else if ($(this).data('name') === 'sync-new-ldap-password') {\n                // This case permits to handle a case where user has changed his password in LDAP\n                console.log('show sync-new-ldap-password')\n                \n                if (debugJavascript === true) console.log('LDAP user password has to change his auth password')\n                // HIde\n                $('.content-header, .content').addClass('hidden');\n\n                // Show passwords inputs and form\n                $('#dialog-ldap-user-change-password-info')\n                    .html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('ldap_user_has_changed_his_password');?>')\n                    .removeClass('hidden');\n                $('#dialog-ldap-user-change-password').removeClass('hidden');\n\n                // ----\n            } else if ($(this).data('name') === 'password-change') {\n                //console.log('show password change')\n                // HIde\n                $('.content-header, .content, #button_do_user_change_password').addClass('hidden');\n\n                // Add DoCheck button\n                $('#button_do_user_change_password').after('<button class=\"btn btn-primary\" id=\"button_do_pwds_checks\"><?php echo langHdl('perform_checks'); ?></button>');\n\n                // Show passwords inputs and form\n                $('#dialog-user-change-password-progress').html('<i class=\"icon fa-solid fa-info mr-2\"></i><?php echo langHdl('change_your_password_info_message'); ?>');\n                $('#dialog-user-change-password').removeClass('hidden');\n\n                // Actions\n                $('#button_do_pwds_checks').click(function() {\n                    if ($('#profile-password').val() !== $('#profile-password-confirm').val()) {\n                        $('#button_do_user_change_password').addClass('hidden');\n                        toastr.remove();\n                        toastr.error(\n                            '<?php echo langHdl('passwords_not_the_same'); ?>',\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 3000,\n                                progressBar: true\n                            }\n                        );\n                    } else if (parseInt($('#profile-password-complex').val()) >= parseInt(store.get('teampassSettings').personal_saltkey_security_level)) {\n                        $('#button_do_user_change_password').removeClass('hidden');\n                        $('#button_do_pwds_checks').remove();\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('hit_launch_to_start'); ?>',\n                            '<?php echo langHdl('ready_to_go'); ?>', {\n                                timeOut: 3000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        $('#button_do_user_change_password').addClass('hidden');\n                        toastr.remove();\n                        toastr.error(\n                            '<?php echo langHdl('complexity_level_not_reached'); ?>',\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    }\n                });\n                \n                // ----\n            } else if ($(this).data('name') === 'profile') {\n                // Show profile page\n                document.location.href = \"index.php?page=profile\";\n\n                // ----\n            } else if ($(this).data('name') === 'logout') {\n                // Logout directly to login form\n                window.location.href = \"./includes/core/logout.php?token=<?php echo $_SESSION['key']; ?>\";\n\n                // ----\n            } else if ($(this).data('name') === 'generate-new_keys') {\n                // User wants to generate new keys\n                console.log('show new keys generation');\n                $('#warningModalButtonAction').attr('data-button-confirm', 'false');\n\n                // SHow modal\n                showModalDialogBox(\n                    '#warningModal',\n                    '<i class=\"fa-solid fa-person-digging fa-lg warning mr-2\"></i><?php echo langHdl('generate_new_keys'); ?> <b>',\n                    '<div class=\"form-group\">'+\n                        '<?php echo langHdl('generate_new_keys_info'); ?>' +\n                    '</div>' +\n                    '<div class=\"input-group mb-2 hidden\" id=\"new-encryption-div\">' +\n                        '<div class=\"input-group-prepend\">' +\n                            '<span class=\"input-group-text\"><?php echo langHdl('confirm_password'); ?></span>' +\n                        '</div>' +\n                        '<input id=\"encryption-otp\" type=\"password\" class=\"form-control form-item-control\" value=\"'+store.get('teampassUser').pwd+'\">' +\n                        '<div class=\"input-group-append\">' +\n                            '<button class=\"btn btn-outline-secondary btn-no-click\" id=\"show-encryption-otp\" title=\"<?php echo langHdl('mask_pw'); ?>\"><i class=\"fas fa-low-vision\"></i></button>' +\n                        '</div>' +\n                    '</div>',\n                    '<?php echo langHdl('perform'); ?>',\n                    '<?php echo langHdl('close'); ?>'\n                );\n\n                // Manage show/hide password\n                $('#show-encryption-otp')\n                    .mouseup(function() {\n                        $('#encryption-otp').attr('type', 'password');\n                    })\n                    .mousedown(function() {\n                        $('#encryption-otp').attr('type', 'text');\n                    });\n                $('.btn-no-click')\n                    .click(function(e) {\n                        e.preventDefault();\n                    });\n\n                // Manage click on button PERFORM\n                $(document).on('click', '#warningModalButtonAction', function() {\n                    // On PERFORM click\n                    if ($('#warningModalButtonAction').attr('data-button-confirm') === 'false') {\n                        $(\"#new-encryption-div\").removeClass('hidden');\n                        $('#warningModalButtonAction')\n                            .html('<i class=\"fa-solid fa-triangle-exclamation warning mr-2\"></i><?php echo langHdl('confirm'); ?>')\n                            .attr('data-button-confirm', 'true');\n\n                    } else if ($('#warningModalButtonAction').attr('data-button-confirm') === 'true') {\n                        // As reencryption relies on user's password\n                        // ensure we have it\n                        if ($('#encryption-otp').val() === '') {\n                            // No user password provided\n                            $('#warningModalButtonAction')\n                                .html('<?php echo langHdl('perform'); ?>')\n                                .attr('data-button-confirm', 'false');\n\n                        } else {\n                            // We have the password, start reencryption\n                            $('#warningModalButtonAction')\n                                .addClass('disabled')\n                                .html('<i class=\"fa-solid fa-spinner fa-spin\"></i>');\n                            $('#warningModalButtonClose').addClass('disabled');\n\n                            // update the process\n                            // add all tasks\n                            var parameters = {\n                                'user_id': parseInt(store.get('teampassUser').user_id),\n                                'user_pwd': $('#encryption-otp').val(),\n                                'encryption_key': '',\n                                'delete_existing_keys': true,\n                                'encrypt_with_user_pwd': true,\n                                'send_email_to_user': true,\n                                'email_body': 'email_body_user_config_4',\n                                'generate_user_new_password': false,\n                            };\n                            //console.log(parameters);\n\n                            $.post(\n                                \"sources/main.queries.php\", {\n                                    type: \"user_new_keys_generation\",\n                                    type_category: 'action_key',\n                                    data: prepareExchangedData(JSON.stringify(parameters), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                                    key: \"<?php echo $_SESSION['key']; ?>\"\n                                },\n                                function(data_next1) { \n                                    data_next1 = prepareExchangedData(data_next1, 'decode', '<?php echo $_SESSION['key']; ?>');\n                                    if (debugJavascript === true) console.log(data_next1)\n\n                                    if (data_next1.error !== false) {\n                                        // Show error\n                                        toastr.remove();\n                                        toastr.error(\n                                            data_next1.message,\n                                            '<?php echo langHdl('caution'); ?>', {\n                                                timeOut: 5000,\n                                                progressBar: true\n                                            }\n                                        );\n                                    } else {\n                                        $(\"#new-encryption-div\").after('<div><?php echo langHdl('generate_new_keys_end'); ?></div>');\n                                        // Show warning\n                                        $('#user_not_ready').removeClass('hidden');\n                                        // update local storage\n                                        store.update(\n                                            'teampassUser', {},\n                                            function(teampassUser) {\n                                                teampassUser.is_ready_for_usage = 0;\n                                            }\n                                        );\n                                        $(\"#warningModalButtonAction\").addClass('hidden');\n                                        $('#warningModalButtonClose').removeClass('disabled');\n\n                                        // Get follow up\n                                        setTimeout(\n                                            getGenerateKeysProgress,\n                                            5000,\n                                            store.get('teampassUser').user_id\n                                        );\n                                    }\n                                }\n                            );\n                        }\n                    }\n                });\n            }\n        }\n    });\n\n    $('.close-element').click(function() {\n        $(this).closest('.card').addClass('hidden');\n\n        $('.content-header, .content').removeClass('hidden');\n    });\n\n    /**\n     * When clicking save Personal saltkey\n     */\n    /*\n    $('#button_save_user_psk').click(function() {\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n\n        // Prepare data\n        var data = {\n            \"psk\": sanitizeString($(\"#user_personal_saltkey\").val()),\n            \"complexity\": $(\"#psk_strength_value\").val()\n        };\n\n        //\n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"store_personal_saltkey\",\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, '<?php echo $_SESSION['key']; ?>');\n\n                // Is there an error?\n                if (data.error === true) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('warning'); ?>',\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.pskDefinedInDatabase = 1;\n                        }\n                    )\n\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.pskSetForSession = data.encrypted_psk;\n                        }\n                    )\n\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('alert_page_will_reload'); ?>'\n                    );\n\n                    location.reload();\n                }\n            }\n        );\n    });\n    */\n\n    // For Personal Saltkey\n    $(\"#profile-password\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#profile-password-strength\",\n        \"defaultText\": \"<?php echo langHdl('index_pw_level_txt'); ?>\",\n        \"ratings\": [{\n                \"minScore\": 0,\n                \"className\": \"meterFail\",\n                \"text\": \"<?php echo langHdl('complex_level0'); ?>\"\n            },\n            {\n                \"minScore\": 25,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level1'); ?>\"\n            },\n            {\n                \"minScore\": 50,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level2'); ?>\"\n            },\n            {\n                \"minScore\": 60,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level3'); ?>\"\n            },\n            {\n                \"minScore\": 70,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level4'); ?>\"\n            },\n            {\n                \"minScore\": 80,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo langHdl('complex_level5'); ?>\"\n            },\n            {\n                \"minScore\": 90,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo langHdl('complex_level6'); ?>\"\n            }\n        ]\n    });\n    $(\"#profile-password\").bind({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-password-complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-password-complex\").val(score);\n        }\n    });\n\n    // Hide sidebar footer icons when reducing sidebar\n    $('a[data-widget=\"pushmenu\"]').click(function(event) {\n        if ($('#sidebar-footer').hasClass('hidden') === true) {\n            setTimeout(function() {\n                $('#sidebar-footer').removeClass('hidden');\n            }, 300);\n        } else {\n            $('#sidebar-footer').addClass('hidden');\n        }\n    });\n\n\n    var clipboardCopy = new ClipboardJS(\".clipboard-copy\", {\n        text: function(trigger) {\n            var elementId = $(trigger).data('clipboard-text');\n            if (debugJavascript === true) console.log($('#' + elementId).val())\n            return String($('#' + elementId).val());\n        }\n    });\n\n    clipboardCopy.on('success', function(e) {\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('copy_to_clipboard'); ?>',\n            '<?php echo langHdl('information'); ?>', {\n                timeOut: 2000\n            }\n        );\n    });\n    \n    // Progress bar\n    setTimeout(\n        function() {\n            $(\".fade\").removeClass(\"out\");\n\n            // Is user not ready\n            if (typeof store.get('teampassUser') !== 'undefined' && typeof store.get('teampassUser').is_ready_for_usage !== 'undefined' && parseInt(store.get('teampassUser').is_ready_for_usage) === 0) {\n                $('#user_not_ready').removeClass('hidden');\n            }\n        },\n        5000\n    );\n\n\n    /**\n    * USER HAS DECIDED TO CHANGE HIS AUTH PASSWORD\n     */\n    $(document).on('click', '#dialog-user-change-password-do', function() {\n        // Start by changing the user password and send it by email\n        if ($('#profile-password-confirm').val() !== $('#profile-password').val()) {\n            // Show error\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('index_pw_error_identical'); ?>',\n                '<?php echo langHdl('caution'); ?>', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n        if ($('#profile-current-password').val() !== \"\" && $('#profile-password').val() !== \"\" && $('#profile-password-confirm').val() !== \"\") {\n            // Case where a user is changing his authentication password\n            console.log('Reencryption based upon user decision to change his auth password');\n\n            // Show progress\n            $('#dialog-user-change-password-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n            );\n            \n            // Disable buttons\n            $('#dialog-user-change-password-do, #dialog-user-change-password-close').attr('disabled', 'disabled');\n            \n            data = {\n                'user_id': store.get('teampassUser').user_id,\n                'old_password': $('#profile-current-password').val(),\n                'new_password': $('#profile-password').val(),\n            }\n            if (debugJavascript === true) console.log(data);\n\n            // Check user current password\n            // and change the password\n            // and use the password to re-encrypt the privatekey\n            $.post(\n                'sources/main.queries.php', {\n                    type: 'change_user_auth_password',\n                    type_category: 'action_password',\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        $(\"#dialog-user-change-password-progress\").html('<?php echo langHdl('fill_in_fields_and_hit_launch'); ?>');\n\n                        // Enable buttons\n                        $('#dialog-user-change-password-do, #dialog-user-change-password-close').removeAttr('disabled');\n                    } else {\n                        // SUCCESS\n                        $('#dialog-user-change-password-close').removeAttr('disabled');\n                        toastr.remove();\n                        toastr.success(\n                            data.message,\n                            '<?php echo langHdl('success'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        $(\"#dialog-user-change-password-progress\").html('');\n                        $('#dialog-user-change-password').addClass('hidden');\n                        $('.content-header, .content').removeClass('hidden');\n                    }\n                }\n            );\n        } else {\n            // Show error\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('password_cannot_be_empty'); ?>',\n                '<?php echo langHdl('caution'); ?>', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    $(document).on('click', '#dialog-user-change-password-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-user-change-password, #dialog-user-change-password-info').addClass('hidden');\n    });\n    \n\n    /**\n    * ADMIN HAS DECIDED TO CHANGE THE USER'S AUTH PASSWORD\n     */\n    $(document).on('click', '#dialog-admin-change-user-password-do', function() {\n        // When an admin changes the user auth password\n        console.log('Reencryption based upon admin decision to change user auth password');\n\n        // Show progress\n        $('#dialog-admin-change-user-password-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n        \n        // Disable buttons\n        $('#dialog-admin-change-user-password-do, #dialog-admin-change-user-password-close').attr('disabled', 'disabled');            \n        \n        // ENsure we have a user id\n        if ($('#admin_change_user_password_target_user').val() !== '') {\n            // Case where change is for user's account\n            // update the process\n            // add all tasks\n            var parameters = {\n                'user_id': parseInt($('#admin_change_user_password_target_user').val()),\n                'user_pwd': '',\n                'encryption_key': '',\n                'delete_existing_keys': true,\n                'send_email_to_user': true,\n                'encrypt_with_user_pwd': true,\n                'generate_user_new_password': true,\n                'email_body': 'email_body_user_config_3',\n            };\n\n            $.post(\n                \"sources/main.queries.php\", {\n                    type: \"user_new_keys_generation\",\n                    type_category: 'action_key',\n                    data: prepareExchangedData(JSON.stringify(parameters), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data_next1) { \n                    data_next1 = prepareExchangedData(data_next1, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data_next1)\n\n                    if (data_next1.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data_next1.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Reload table\n                        if (typeof oTable !== 'undefined') {\n                            oTable.ajax.reload();\n                        }\n                        \n                        $(\"#dialog-admin-change-user-password-progress\").html('<?php echo langHdl('generate_new_keys_end'); ?>');\n                        // Show warning\n                        // Enable buttons\n                        $('#dialog-admin-change-user-password-close').removeAttr('disabled');\n                        toastr.remove();\n                    }\n                }\n            );\n        }\n    });\n    $(document).on('click', '#dialog-admin-change-user-password-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-admin-change-user-password').addClass('hidden');\n    });\n    \n    $(document).on('click', '.temp-button', function() {\n        \n        if ($(this).data('action') === \"show-user-pwd\") {\n            // show password\n            $('#temp-user-pwd').attr('type', 'text');\n            $(this).prop( \"disabled\", true );\n            setTimeout(\n                () => {\n                    $('#temp-user-pwd').attr('type', 'hidden');\n                    $(this).prop( \"disabled\", false );\n                },\n                5000\n            );\n        } else if ($(this).data('action') === \"send-user-pwd\") {\n            // Send email\n            console.log('Preparing for email sending');\n            \n            // Prepare data\n            var data = {\n                'receipt': $('#temp-user-email').val(),\n                'subject': '[Teampass] <?php echo langHdl('your_new_password');?>',\n                'body': '<?php echo langHdl('email_body_temporary_login_password');?>',\n                'pre_replace' : {\n                    '#enc_code#' : $('#temp-user-pwd').val(),\n                }\n            }\n            if (debugJavascript === true) console.log(data);\n            // Prepare form\n            $('#dialog-admin-change-user-password-info').html('<?php echo langHdl('sending_email_message');?>');\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n            );\n\n            // Launch action\n            $.post(\n                'sources/main.queries.php', {\n                    type: 'mail_me',\n                    type_category: 'action_mail',\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Fianlize UI\n\n                        $('#dialog-admin-change-user-password-info').html('');\n                        $('#dialog-admin-change-user-password-do, #dialog-admin-change-user-password-close').removeAttr('disabled');\n\n                        // HIde\n                        $('.content-header, .content').removeClass('hidden');\n\n                        // SHow form\n                        $('#dialog-admin-change-user-password').addClass('hidden');\n\n                        store.set(\n                            'teampassUser', {\n                                admin_user_password: '',\n                                admin_user_email: '',\n                            }\n                        );\n                        \n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n        }        \n    });\n    \n\n    /**\n    * USER PROVIDES HIS TEMPORARY CODE TO\n     */\n    $(document).on('click', '#dialog-user-temporary-code-do', function() {\n        // Perform a renecryption based upon a temporary code\n        console.log('Reencryption based upon users temporary code');\n\n        // Show progress\n        $('#dialog-user-temporary-code-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n        \n        // Disable buttons\n        $('#dialog-user-temporary-code-do, #dialog-user-temporary-code-close').attr('disabled', 'disabled');            \n        \n        // Start by testing if the temporary code is correct to decrypt an item\n        data = {\n            'user_id': store.get('teampassUser').user_id,\n            'password': $('#dialog-user-temporary-code-value').val(),\n        }\n        if (debugJavascript === true) {\n            console.log('Testing if temporary code is correct');\n            console.log(data);\n        }\n        $.post(\n            'sources/main.queries.php', {\n                type: 'test_current_user_password_is_correct',\n                type_category: 'action_password',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    $(\"#dialog-user-temporary-code-progress\").html('<?php echo langHdl('fill_in_fields_and_hit_launch'); ?>');\n\n                    // Enable buttons\n                    $('#dialog-user-temporary-code-do, #dialog-user-temporary-code-close').removeAttr('disabled');\n                } else {\n                    // Change privatekey encryption with user-s password\n                    data = {\n                        'user_id': store.get('teampassUser').user_id,\n                        'current_code': $('#dialog-user-temporary-code-current-password').val(),\n                        'new_code': $('#dialog-user-temporary-code-value').val(),\n                        'action_type' : 'encrypt_privkey_with_user_password',\n                    }\n                    if (debugJavascript === true) console.log(data);\n                    \n                    $.post(\n                        'sources/main.queries.php', {\n                            type: 'change_private_key_encryption_password',\n                            type_category: 'action_key',\n                            data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                            if (debugJavascript === true) console.log(data);\n\n                            if (data.error !== false) {\n                                // Show error\n                                toastr.remove();\n                                toastr.error(\n                                    data.message,\n                                    '<?php echo langHdl('caution'); ?>', {\n                                        timeOut: 5000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Enable buttons\n                                $('#dialog-user-temporary-code-do, #dialog-user-temporary-code-close').removeAttr('disabled');\n                            } else {\n                                // Inform user\n                                // Enable close button\n                                $('#dialog-user-temporary-code-close').removeAttr('disabled');\n                                $('#dialog-user-temporary-code-do').attr('disabled', 'disabled');\n\n                                // Finished\n                                $(\"#dialog-user-temporary-code-progress\").html('<i class=\"fa-solid fa-check text-success mr-3\"></i><?php echo langHdl('done'); ?>');\n                                toastr.remove();\n\n                                store.update(\n                                    'teampassUser', {},\n                                    function(teampassUser) {\n                                        teampassUser.special = 'none';\n                                    }\n                                );\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    });\n    $(document).on('click', '#dialog-user-temporary-code-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-user-temporary-code').addClass('hidden');\n    });\n\n\n    /**\n    * NEW LDAP USER HAS TO BUILD THE ITEMS DATABASE\n     */\n    $(document).on('click', '#dialog-ldap-user-build-keys-database-do', function() {\n        if ($('#dialog-ldap-user-build-keys-database-code').val() === '') {\n\n            return false;\n        }\n        // Perform a renecryption based upon a temporary code\n        console.log('Building items keys database for new LDAP user');\n\n        // Show progress\n        $('#dialog-ldap-user-build-keys-database-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n        \n        // Disable buttons\n        $('#dialog-ldap-user-build-keys-database-do, #dialog-ldap-user-build-keys-database-close').attr('disabled', 'disabled');            \n        \n        // Start by testing if the temporary code is correct to decrypt an item\n        data = {\n            'user_id': store.get('teampassUser').user_id,\n            'password' : $('#dialog-ldap-user-build-keys-database-code').val(),\n        }\n        if (debugJavascript === true) {\n            console.log('Testing if temporary code is correct in LDAP user case');\n            console.log(data);\n        }\n\n        $.post(\n            'sources/main.queries.php', {\n                type: 'test_current_user_password_is_correct',\n                type_category: 'action_password',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    $(\"#dialog-ldap-user-build-keys-database-progress\").html('<?php echo langHdl('bad_code'); ?>');\n\n                    // Enable buttons\n                    $('#dialog-ldap-user-build-keys-database-do, #dialog-ldap-user-build-keys-database-close').removeAttr('disabled');\n                } else {\n                    // Change privatekey encryption with user-s password\n                    data = {\n                        'user_id': store.get('teampassUser').user_id,\n                        'current_code': $('#dialog-ldap-user-build-keys-database-code').val(),\n                        'new_code': '',\n                        'action_type' : '',\n                    }\n                    if (debugJavascript === true) console.log(data);\n                    \n                    $.post(\n                        'sources/main.queries.php', {\n                            type: 'change_private_key_encryption_password',\n                            type_category: 'action_key',\n                            data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                            if (debugJavascript === true) console.log(data);\n\n                            if (data.error !== false) {\n                                // Show error\n                                toastr.remove();\n                                toastr.error(\n                                    data.message,\n                                    '<?php echo langHdl('caution'); ?>', {\n                                        timeOut: 5000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                \n                                $(\"#dialog-ldap-user-build-keys-database-progress\").html('<i class=\"fa-solid fa-exclamation-circle text-danger mr-3\"></i><?php echo langHdl('bad_code'); ?>');\n\n                                // Enable buttons\n                                $('#dialog-ldap-user-build-keys-database-do, #dialog-ldap-user-build-keys-database-close').removeAttr('disabled');\n                            } else {\n                                // Inform user\n                                // Enable close button\n                                $('#dialog-ldap-user-build-keys-database-close').removeAttr('disabled');\n                                $('#dialog-ldap-user-build-keys-database-do').attr('disabled', 'disabled');\n\n                                // Finished\n                                $(\"#dialog-ldap-user-build-keys-database-progress\").html('<i class=\"fa-solid fa-check text-success mr-3\"></i><?php echo langHdl('done'); ?>');\n                                toastr.remove();\n\n                                store.update(\n                                    'teampassUser', {},\n                                    function(teampassUser) {\n                                        teampassUser.special = 'none';\n                                        teampassUser.otp_provided = 1;\n                                    }\n                                );\n\n                                // refresh the page\n                                window.location.href = 'index.php?page=items';\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    });\n    $(document).on('click', '#dialog-user-temporary-code-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-user-temporary-code').addClass('hidden');\n    });\n\n\n    /**\n    * USER PASSWORD IN LDAP HAS CHANGED\n    */\n    $(document).on('click', '#dialog-ldap-user-change-password-do', function() {\n        // Start by changing the user password and send it by email\n        if ($('#dialog-ldap-user-change-password-old').val() !== \"\" && $('#dialog-ldap-user-change-password-current').val() !== \"\") {\n            // Case where a user is changing his authentication password\n            console.log('Reencryption based upon user auth password changed in LDAP');\n\n            // Show progress\n            $('#dialog-ldap-user-change-password-progress').html('<b><?php echo langHdl('please_wait'); ?></b><i class=\"fa-solid fa-spinner fa-pulse ml-3 text-primary\"></i>');\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n            );\n            \n            // Disable buttons\n            $('#dialog-ldap-user-change-password-do, #dialog-ldap-user-change-password-close').attr('disabled', 'disabled');\n            \n            data = {\n                'user_id': store.get('teampassUser').user_id,\n                'previous_password': $('#dialog-ldap-user-change-password-old').val(),\n                'current_password': $('#dialog-ldap-user-change-password-current').val(),\n            }\n            if (debugJavascript === true) console.log(data);\n\n            // Check user current password\n            // and change the password\n            // and use the password to re-encrypt the privatekey\n            $.post(\n                'sources/main.queries.php', {\n                    type: 'change_user_ldap_auth_password',\n                    type_category: 'action_password',\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        $(\"#dialog-ldap-user-change-password-progress\").html('<?php echo langHdl('fill_in_fields_and_hit_launch'); ?>');\n\n                        // Enable buttons\n                        $('#dialog-ldap-user-change-password-do, #dialog-ldap-user-change-password-close').removeAttr('disabled');\n                    } else {\n                        // SUCCESS\n                        $('#dialog-ldap-user-change-password-close').removeAttr('disabled');\n                        toastr.remove();\n                        toastr.success(\n                            data.message,\n                            '<?php echo langHdl('success'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        $(\"#dialog-ldap-user-change-password-progress\").html('');\n                    }\n                }\n            );\n        } else {\n            // Show error\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('password_cannot_be_empty'); ?>',\n                '<?php echo langHdl('caution'); ?>', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    $(document).on('click', '#dialog-ldap-user-change-password-close', function() {\n        // HIde\n        $('.content-header, .content').removeClass('hidden');\n\n        // SHow form\n        $('#dialog-ldap-user-change-password, #dialog-ldap-user-change-password-info').addClass('hidden');\n    });\n    // --- END ---\n\n\n    function loadSettings() {\n        return $.post(\n            \"sources/main.queries.php\", {\n                type: \"get_teampass_settings\",\n                type_category: 'action_system',\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                try {\n                    data = prepareExchangedData(\n                        data,\n                        \"decode\",\n                        \"<?php echo $_SESSION['key']; ?>\"\n                    );\n                } catch (e) {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('server_answer_error'); ?>',\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true,\n                            positionClass: \"toast-top-right\"\n                        }\n                    );\n                    return false;\n                }\n                if (debugJavascript === true) {\n                    console.log('Loading settings result:');\n                    console.log(data);\n                }\n\n                // Test if JSON object\n                if (typeof data === 'object') {\n                    // Store settings in localstorage\n                    // except sensitive data\n                    var sensitiveData = ['ldap_hosts','ldap_username','ldap_password','ldap_bdn', 'email','bck_script_passkey'];\n\n                    store.remove(\"teampassSettings\");\n\n                    store.update(\n                        'teampassSettings', {},\n                        function(teampassSettings) {\n                            $.each(data, function(key, value) {\n                                const containsKey = sensitiveData.some(element => {\n                                    if (key.includes(element)) {\n                                        return true;\n                                    }\n                                    return false;\n                                });\n\n                                if (containsKey === false) {\n                                    teampassSettings[key] = value;\n                                }\n                            });\n                        }\n                    );\n\n                    // Store some User info\n                    store.update(\n                        'teampassUser', {},\n                        function(teampassUser) {\n                            teampassUser['user_admin'] = <?php echo isset($_SESSION['user_admin']) === true ? (int) $_SESSION['user_admin'] : 0; ?>;\n                            teampassUser['user_id'] = <?php echo isset($_SESSION['user_id']) === true ? (int) $_SESSION['user_id'] : 0; ?>;\n                            teampassUser['user_manager'] = <?php echo isset($_SESSION['user_manager']) === true ? (int) $_SESSION['user_manager'] : 0; ?>;\n                            teampassUser['user_can_manage_all_users'] = <?php echo isset($_SESSION['user_can_manage_all_users']) === true ? (int) $_SESSION['user_can_manage_all_users'] : 0; ?>;\n                            teampassUser['user_read_only'] = <?php echo isset($_SESSION['user_admin']) === true ? (int) $_SESSION['user_read_only'] : 1; ?>;\n                            teampassUser['key'] = '<?php echo isset($_SESSION['key']) === true ? $_SESSION['key'] : 0; ?>';\n                            teampassUser['login'] = \"<?php echo isset($_SESSION['login']) === true ? $_SESSION['login'] : 0; ?>\";\n                            teampassUser['lastname'] = \"<?php echo isset($_SESSION['lastname']) === true ? $_SESSION['lastname'] : 0; ?>\";\n                            teampassUser['name'] = \"<?php echo isset($_SESSION['name']) === true ? $_SESSION['name'] : 0; ?>\";\n                            teampassUser['pskDefinedInDatabase'] = <?php echo isset($_SESSION['user']['encrypted_psk']) === true ? 1 : 0; ?>;\n                            teampassUser['can_create_root_folder'] = <?php echo isset($_SESSION['can_create_root_folder']) === true ? (int) $_SESSION['can_create_root_folder'] : 0; ?>;\n                            teampassUser['pskDefinedInDatabase'] = <?php echo isset($_SESSION['user']['encrypted_psk']) === true ? 1 : 0; ?>;\n                            teampassUser['special'] = '<?php echo isset($_SESSION['user']['special']) === true ? $_SESSION['user']['special'] : 'none'; ?>';\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function showExtendSession() {\n        // Prepare modal\n        showModalDialogBox(\n            '#warningModal',\n            '<i class=\"fa-solid fa-clock fa-lg warning mr-2\"></i><?php echo langHdl('index_add_one_hour'); ?>',\n            '<div class=\"form-group\">' +\n            '<label for=\"warningModal-input\" class=\"col-form-label\"><?php echo langHdl('index_session_duration') . ' (' . langHdl('minutes') . ')'; ?>:</label>' +\n            '<input type=\"text\" class=\"form-control\" id=\"warningModal-input\" value=\"<?php echo isset($_SESSION['user']['session_duration']) === true ? (int) $_SESSION['user']['session_duration'] / 60 : 60; ?>\">' +\n            '</div>',\n            '<?php echo langHdl('confirm'); ?>',\n            '<?php echo langHdl('cancel'); ?>'\n        );\n\n        // Actions on modal buttons\n        $(document).on('click', '#warningModalButtonAction', function() {\n            // SHow user\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n            );\n\n            // Perform action\n            $.when(\n                IncreaseSessionTime(\n                    $('#warningModal-input').val()\n                )\n            ).then(function() {\n                toastr.remove();\n                toastr.success(\n                    '<?php echo langHdl('done'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n                $('#warningModal').modal('hide');\n            });\n        });\n    }\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function showPersonalSKDialog() {\n        $('#dialog-request-psk').removeClass('hidden');\n\n        // Hide other\n        $('.content-header, .content').addClass('hidden');\n\n        $('#user_personal_saltkey').focus();\n\n        toastr.remove();\n    }\n\n    /**\n     * Loads the last seen items\n     *\n     * @return void\n     */\n    function refreshListLastSeenItems() {\n        $.post(\n            \"sources/main.queries.php\", {\n                type: 'refresh_list_items_seen',\n                type_category: 'action_user',\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                try {\n                    data = $.parseJSON(data)\n                } catch (e) {\n                    return false;\n                }\n                if (debugJavascript === true) {\n                    console.log('Refresh last item seen result');\n                    console.log(data);\n                }\n                //check if format error\n                if (data.error === '') {\n                    if (data.html_json === null || data.html_json === '') {\n                        $('#index-last-pwds').html('<li><?php echo langHdl('none'); ?></li>');\n                    } else {\n                        // Prepare HTML\n                        var html_list = '';\n                        $.each(data.html_json, function(i, value) {\n                            html_list += '<li onclick=\"showItemCard($(this).closest(\\'li\\'))\" class=\"pointer\" data-item-edition=\"0\" data-item-id=\"' + value.id + '\" data-item-sk=\"' + value.perso + '\" data-item-expired=\"0\" data-item-restricted=\"' + value.restricted + '\" data-item-display=\"1\" data-item-open-edit=\"0\" data-item-reload=\"0\" data-item-tree-id=\"' + value.tree_id + '\" data-is-search-result=\"0\">' +\n                                '<i class=\"fa fa-caret-right mr-2\"></i>' + value.label + '</li>';\n                        });\n                        $('#index-last-pwds').html(html_list);\n                    }\n\n                    // show notification\n                    if (data.existing_suggestions !== 0) {\n                        blink('#menu_button_suggestion', -1, 500, 'ui-state-error');\n                    }\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.error,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Show an item\n     *\n     * @return void\n     */\n    function showItemCard(itemDefinition) {\n        // Show circle-notch\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('in_progress'); ?><i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-3\"></i>'\n        );\n\n        if (window.location.href.indexOf('page=items') === -1) {\n            location.replace('<?php echo $SETTINGS['cpassman_url']; ?>/index.php?page=items&group=' + itemDefinition.data().itemTreeId + '&id=' + itemDefinition.data().itemId);\n        } else {\n            $('#items_list').html('<ul class=\"liste_items\" id=\"full_items_list\"></ul>');\n            Details(itemDefinition, 'show');\n            if (itemDefinition.data().itemTreeId !== $('#open_folder').val()) {\n                ListerItems(itemDefinition.data().itemTreeId, '', 0);\n            }\n\n            // Hide sidebar-mini\n            $('body')\n                .removeClass('control-sidebar-slide-open');\n        }\n    }\n\n    /**\n     * Open defect report page\n     *\n     * @return void\n     */\n    function generateBugReport() {\n        $('#dialog-bug-report-text').html('');\n        $('#dialog-bug-report').removeClass('hidden');\n\n        // Scroll to top\n        $(window).scrollTop(0);\n\n        var data = {\n            'browser_name': platform.name,\n            'browser_version': platform.version,\n            'os': platform.os.family,\n            'os_archi': platform.os.architecture,\n            'current_page': window.location.href.substring(window.location.href.lastIndexOf(\"/\")+1),\n        }\n        \n        $.post(\n            \"sources/main.queries.php\", {\n                type: 'generate_bug_report',\n                type_category: 'action_system',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n\n                // Show data\n                $('#dialog-bug-report-text').html(data.html);\n\n                // Open Github\n                $('#dialog-bug-report-github-button').click(function() {\n                    window.open('https://github.com/nilsteampassnet/TeamPass/issues/new', '_blank');\n                    return false;\n                });\n            }\n        );\n    }\n\n    // This permits to manage the column width of tree/items\n    $(document).on('click', '.columns-position', function() {\n        var colLeft = $('#folders-tree-card').find('.column-left'),\n            colRight = $('#folders-tree-card').find('.column-right'),\n            counterLeft = $(colLeft).attr(\"class\").match(/col-md-[\\w-]*\\b/)[0].split('-')[2],\n            counterRight = $(colRight).attr(\"class\").match(/col-md-[\\w-]*\\b/)[0].split('-')[2];\n\n        // Toogle class\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            if ($(this).hasClass('tree-decrease') === true && counterRight < 9) {\n                $(colLeft).toggleClass('col-md-' + counterLeft + ' col-md-' + (parseInt(counterLeft) - 1));\n                $(colRight).toggleClass('col-md-' + counterRight + ' col-md-' + (parseInt(counterRight) + 1));\n            } else if ($(this).hasClass('tree-increase') === true && counterLeft < 9) {\n                $(colLeft).toggleClass('col-md-' + counterLeft + ' col-md-' + (parseInt(counterLeft) + 1));\n                $(colRight).toggleClass('col-md-' + counterRight + ' col-md-' + (parseInt(counterRight) - 1));\n            }\n        }\n    })\n\n    $(function() {\n        // In case that session was expired and login form was reloaded\n        // Force the launchIdentify as if the user has clicked the button\n        if ($(\"#auto_log\").length > 0) {\n            $(\"#but_identify_user\").click();\n        }\n    });\n\n    // Prevent usage of browser back button\n    history.pushState(null, null, location.href);\n    window.onpopstate = function () {\n        const queryString = window.location.search\n        const urlParams = new URLSearchParams(queryString);\n        if (urlParams.get('page') === 'items') {\n            // go back to list\n            // Play with show and hide classes\n            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, .columns-position, #item-details-card-categories, #form-item-upload-pickfilesList, #card-item-expired')\n                .addClass('hidden');\n            $('#folders-tree-card').removeClass('hidden');\n\n            history.go(1);\n        }\n    };\n\n    /**\n     * \n     * @param {integer} duration\n     * \n     */\n    function clearClipboardTimeout(duration) {\n        // Wait for duration\n        $(this).delay(duration * 1000).queue(function() {\n            navigator.clipboard.writeText(\"Cleared by Teampass\").then(function() {\n                // clipboard successfully set\n            }, function() {\n                // clipboard write failed\n            });\n\n            $(this).dequeue();\n        });\n    }    \n    \n    /**\n     * Perform call to get progress status\n     * \n     * @param {integer} userId\n     */\n    function getGenerateKeysProgress(userId) {\n        var data = {\n            'user_id': userId,\n        };\n\n        $.post(\n            \"sources/users.queries.php\", {\n                type: \"get_generate_keys_progress\",\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) {\n                    console.info('Process generation keys status:');\n                    console.log(data);\n                }\n\n                if (data.error === false) {\n                    // Show progress\n                    $('#user_not_ready_progress')\n                        .text('(' + data.status + ')')\n                        .addClass('ml-1');\n                    $('#user_not_ready').removeClass('hidden');\n\n                    if (data.status !== 'finished') {\n                        // If not finished, then run again after 10 seconds\n                        setTimeout(\n                            getGenerateKeysProgress,\n                            10000,\n                            store.get('teampassUser').user_id\n                        );\n                    } else {\n                        // Progress is finished\n                        // We need to finalize user public/private keys\n                        \n                        $('#user_not_ready').addClass('hidden');\n                        $(\"#warningModalButtonAction\").removeClass('hidden');\n                        $('#user_not_ready_progress').html('');\n                        toastr.success(\n                            data.message,\n                            '<?php echo langHdl('done'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    }\n                }\n            }\n        );\n    }\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      items.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception('Error file \"/includes/config/tp.config.php\" not exists', 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (! checkUser($_SESSION['user_id'], $_SESSION['key'], curPage($SETTINGS), $SETTINGS)) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n\n$var = [];\n$var['hidden_asterisk'] = '<i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk mr-2\"></i><i class=\"fas fa-asterisk\"></i>';\n\n?>\n\n\n<script type=\"text/javascript\">\n    var requestRunning = false,\n        clipboardForLogin,\n        clipboardForPassword,\n        clipboardForLink,\n        query_in_progress = 0,\n        screenHeight = $(window).height(),\n        quick_icon_query_status = true,\n        first_group = 1,\n        folderSearchCriteria = $('#jstree_search').val(),\n        userDidAChange = false,\n        userUploadedFile = false,\n        selectedFolder = false,\n        selectedFolderId = false,\n        itemClipboard,\n        startedItemsListQuery = false,\n        itemStorageInformation = '',\n        applicationVars,\n        initialPageLoad = true,\n        previousSelectedFolder=-1,\n        debugJavascript = false;\n\n    // Manage memory\n    browserSession(\n        'init',\n        'teampassApplication', {\n            lastItemSeen: false,\n            itemsListStop: '',\n            itemsListStart: '',\n            selectedFolder: '',\n            itemsListFolderId: false,\n            itemsListRestricted: '',\n            itemsShownByQuery: '',\n            foldersList: [],\n            personalSaltkeyRequired: 0,\n            uploadedFileId: '',\n            tempScrollTop: 0,\n        }\n    );\n\n    browserSession(\n        'init',\n        'teampassItem', {\n            IsPersonalFolder: '',\n            hasAccessLevel: '',\n            hasCustomCategories: '',\n            id: '',\n            timestamp: '',\n            folderId: ''\n        }\n    );\n\n    if (debugJavascript === true) {\n        console.log('User information')\n        console.log(store.get('teampassUser'))\n    }\n\n    // Show loader\n    toastr.remove();\n    toastr.info('<?php echo langHdl('loading_data'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n    // Build tree\n    $('#jstree').jstree({\n        'core': {\n            'animation': 0,\n            'check_callback': true,\n            'data': {\n                'url': './sources/tree.php',\n                'dataType': 'json',\n                'icons': false,\n                'data': function(node) {\n                    if (debugJavascript === true) {\n                        console.info('Les r\u00e9pertoires sont charg\u00e9s');\n                        console.log(node);\n                    }\n                    return {\n                        'id': node.id.split('_')[1],\n                        'force_refresh': store.get('teampassApplication') !== undefined ?\n                            store.get('teampassApplication').jstreeForceRefresh : 0\n                    };\n                }\n            },\n            'strings': {\n                'Loading ...': '<?php echo langHdl('loading'); ?>...'\n            },\n            'themes': {\n                'icons': false,\n            },\n        },\n        'plugins': [\n            'state', 'search'\n        ]\n    })\n    // On node select\n    .bind('select_node.jstree', function(e, data) {\n        if (debugJavascript === true) console.log('JSTREE BIND');\n        selectedFolder = $('#jstree').jstree('get_selected', true)[0]\n        selectedFolderId = parseInt(selectedFolder.id.split('_')[1]);\n\n        // manage icon open/closed\n        var selectedFolderIcon = $('#fld_'+selectedFolderId).children('.tree-folder').attr('data-folder'),\n            selectedFolderIconSelected = $('#fld_'+selectedFolderId).children('.tree-folder').attr('data-folder-selected');\n\n        // remove selected on previous folder\n        $($('#fld_'+previousSelectedFolder).children('.tree-folder'))\n            .removeClass($('#fld_'+previousSelectedFolder).children('.tree-folder').attr('data-folder-selected'))\n            .addClass($('#fld_'+previousSelectedFolder).children('.tree-folder').attr('data-folder'));\n        // show selected icon\n        $('#fld_'+selectedFolderId).children('.tree-folder')\n            .removeClass(selectedFolderIcon)\n            .addClass(selectedFolderIconSelected);\n\n        if (debugJavascript === true) {\n            console.info('SELECTED NODE ' + selectedFolderId + \" -- \" + startedItemsListQuery);\n            console.log(selectedFolder);\n            console.log(selectedFolder.original.is_pf)\n        }\n\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.selectedFolder = selectedFolderId,\n                teampassApplication.selectedFolderTitle = selectedFolder.a_attr['data-title'],\n                teampassApplication.selectedFolderParentId = selectedFolder.parent !== \"#\" ? selectedFolder.parent.split('_')[1] : 0,\n                teampassApplication.selectedFolderParentTitle = selectedFolder.a_attr['data-title'],\n                teampassApplication.selectedFolderIcon = selectedFolderIcon,\n                teampassApplication.selectedFolderIconSelected = selectedFolderIconSelected,\n                teampassApplication.selectedFolderIsPF = selectedFolder.original.is_pf,\n                teampassApplication.userCanEdit = selectedFolder.original.can_edit\n            }\n        )\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.folderId = selectedFolderId\n            }\n        );\n\n        // Prepare list of items\n        if (startedItemsListQuery === false) {\n            startedItemsListQuery = true;\n            ListerItems(selectedFolderId, '', 0);\n        }\n\n        previousSelectedFolder = selectedFolderId;\n        initialPageLoad = false;\n    })\n    // Search in tree\n    .bind('search.jstree', function(e, data) {\n        if (data.nodes.length == 1) {\n            //open the folder\n            ListerItems($('#jstree li>a.jstree-search').attr('id').split('_')[1], '', 0);\n        }\n    });\n\n    // Find folders in jstree\n    $('#jstree_search')\n        .keypress(function(e) {\n            if (e.keyCode === 13) {\n                $('#jstree').jstree('search', $('#jstree_search').val());\n            }\n        })\n        .focus(function() {\n            $(this).val('');\n        })\n        .blur(function() {\n            $(this).val(folderSearchCriteria);\n        });\n\n    // Is this a short url\n    var queryDict = {},\n        showItemOnPageLoad = false,\n        itemIdToShow = '';\n    location.search.substr(1).split(\"&\").forEach(function(item) {\n        queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]\n    });\n\n    if (queryDict['group'] !== undefined && queryDict['group'] !== '' &&\n        queryDict['id'] !== undefined && queryDict['id'] !== ''\n    ) {\n        // Show cog\n        toastr.remove();\n        toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Store current view\n        savePreviousView();\n\n        // Store the folder to open\n        store.set(\n            'teampassApplication', {\n                selectedFolder: parseInt(queryDict['group']),\n                selectedItem: parseInt(queryDict['id'])\n            }\n        );\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.folderId = parseInt(queryDict['group'])\n            }\n        );\n\n        showItemOnPageLoad = true;\n        itemIdToShow = queryDict['id'];\n        startedItemsListQuery = true;\n\n        $('.item-details-card').removeClass('hidden');\n        $('#folders-tree-card, .columns-position').addClass('hidden');\n\n        // refresh selection in jstree\n        $('#jstree').jstree('deselect_all');\n        $('#jstree').jstree('select_node', '#li_' + itemIdToShow);\n        $('#jstree').jstree(true).hide_icons()\n\n        // Get list of items in this folder\n        startedItemsListQuery = true;\n        ListerItems(store.get('teampassApplication').selectedFolder, '', 0);\n\n        // Show details\n        $.when(\n            Details(itemIdToShow, 'show', true)\n        ).then(function() {\n            //requestRunning = false;\n            console.log('Item detail affich\u00e9')\n            // Force previous view to Tree folders\n            store.update(\n                'teampassUser',\n                function(teampassUser) {\n                    teampassUser.previousView = '#folders-tree-card';\n                }\n            );\n        });\n    }\n\n    // Preload list of items\n    if (store.get('teampassApplication') !== undefined &&\n        store.get('teampassApplication').selectedFolder !== undefined &&\n        store.get('teampassApplication').selectedFolder !== ''\n    ) {\n        startedItemsListQuery = true;\n\n        ListerItems(store.get('teampassApplication').selectedFolder, '', 0);\n\n    }\n\n\n\n    // Close on escape key\n    $(document).keyup(function(e) {\n        if (e.keyCode == 27) {\n            closeItemDetailsCard();\n        }\n    });\n\n    /*// Edit on e key\n    $(document).keyup(function(e) {\n        if (e.keyCode == 69 && $('.item-details-card').is(':visible') === true) {\n            if ($('#form-item').hasClass('hidden') === false) {\n                showItemEditForm(store.get('teampassItem').id);\n            }\n        }\n    });\n    */\n\n    // load list of visible folders for current user\n    $(this).delay(500).queue(function() {\n        refreshVisibleFolders();\n\n        $(this).dequeue();\n    });\n\n    // Keep the scroll position\n    $(window).on(\"scroll\", function() {\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    tempScrollTop: $(window).scrollTop()\n                }\n            );\n        }\n    });\n\n\n    // Ensure correct height of folders tree\n    $('#jstree').height(screenHeight - 200);\n\n    // Prepare iCheck format for checkboxes\n    $('input[type=\"checkbox\"].flat-blue, input[type=\"radio\"].flat-blue').iCheck({\n        checkboxClass: 'icheckbox_flat-blue',\n        radioClass: 'iradio_flat-blue'\n    });\n\n    // Prepare some UI elements\n    $('#limited-search').prop('checked', false);\n\n    $(document).on('blur', '#form-item-icon', function() {\n        $('#form-item-icon-show').html('<i class=\"fas '+$(this).val()+'\"></i>');\n    });\n\n    // Manage the password show button\n    // including autohide after a couple of seconds\n    $(document).on('click', '#card-item-pwd-show-button', function() {\n        if ($(this).hasClass('pwd-shown') === false) {\n            $(this).addClass('pwd-shown');\n            // Prepare data to show\n            // Is data crypted?\n            var data = unCryptData($('#hidden-item-pwd').val(), '<?php echo $_SESSION['key']; ?>');\n            if (data !== false && data !== undefined) {\n                $('#hidden-item-pwd').val(\n                    data.password\n                );\n            }\n\n            // Change class and show spinner\n            $('.pwd-show-spinner')\n                .removeClass('far fa-eye')\n                .addClass('fas fa-circle-notch fa-spin text-warning');\n\n            // display raw password\n            $('#card-item-pwd')\n                .text($('#hidden-item-pwd').val())\n                .addClass('pointer_none');\n\n            // log password is shown\n            itemLog(\n                'at_password_shown',\n                store.get('teampassItem').id,\n                $('#card-item-label').text()\n            );\n\n            // Autohide\n            setTimeout(() => {\n                $(this).removeClass('pwd-shown');\n                $('#card-item-pwd')\n                    .html('<?php echo $var['hidden_asterisk']; ?>')\n                    .removeClass('pointer_none');\n                $('.pwd-show-spinner')\n                    .removeClass('fas fa-circle-notch fa-spin text-warning')\n                    .addClass('far fa-eye');\n            }, <?php echo isset($SETTINGS['password_overview_delay']) === true ? $SETTINGS['password_overview_delay'] * 1000 : 4000; ?>);\n        } else {\n            $('#card-item-pwd').html('<?php echo $var['hidden_asterisk']; ?>');\n        }\n    });\n\n\n    // Manage folders action\n    $('.tp-action').click(function() {\n        // SHow user\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?><i class=\"fas fa-circle-notch fa-spin fa-2x ml-3\"></i>');\n\n        if ($(this).data('folder-action') === 'refresh') {\n            // Force refresh\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.jstreeForceRefresh = 1\n                }\n            );\n            if (selectedFolderId !== '') {\n                refreshTree(selectedFolderId, true);\n            } else {\n                refreshTree();\n            }\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.jstreeForceRefresh = 0\n                }\n            );\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'expand') {\n            $('#jstree').jstree('open_all');\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'collapse') {\n            $('#jstree').jstree('close_all');\n            toastr.remove();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'add') {\n            if (debugJavascript === true) console.info('SHOW ADD FOLDER');\n            toastr.remove();\n\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20 &&\n                store.get('teampassUser').can_create_root_folder === 0\n            ) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-add');\n\n            // Store last\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-add').removeClass('hidden');\n\n            // Prepare some data in the form\n            if (selectedFolder.parent !== undefined && selectedFolder.parent !== '') {\n                $('#form-folder-add-parent').val(selectedFolder.parent.split('_')[1]).change();\n            }\n\n            $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n\n            $('#form-folder-add-label')\n                .val('')\n                .focus();\n            $('#form-folder-add-icon-selected, #form-folder-add-icon').val('');\n            // Set type of action for the form\n            $('#form-folder-add').data('action', 'add');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'edit') {\n            if (debugJavascript === true) console.info('SHOW EDIT FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            if (debugJavascript === true) console.log(store.get('teampassApplication'));\n\n            // Store current view\n            savePreviousView('.form-folder-add');\n\n            // Show edit form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-add').removeClass('hidden');\n            // Prepare some data in the form\n            $(\"#form-folder-add-parent option[value='\" + store.get('teampassApplication').selectedFolder + \"']\")\n                .prop('disabled', true);\n            $('#form-folder-add-parent').val(store.get('teampassApplication').selectedFolderParentId).change();\n            $(\"#form-folder-add-parent option[value='\" + store.get('teampassApplication').selectedFolderParentId + \"']\")\n                .prop('disabled', false);\n            $('#form-folder-add-label')\n                .val(store.get('teampassApplication').selectedFolderParentTitle)\n                .focus();\n            // is PF 1st level\n            if (store.get('teampassApplication').selectedFolderIsPF === 1 && store.get('teampassApplication').selectedFolderParentId !== 0) {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n            } else if (store.get('teampassApplication').userCanEdit === 0) {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', true);\n            } else {\n                $('#form-folder-add-label, #form-folder-add-parent').prop('disabled', false);\n            }\n\n            $('#form-folder-add-complexicity').val(store.get('teampassItem').folderComplexity).change();\n            $('#form-folder-add-icon')\n                .val(store.get('teampassApplication').selectedFolderIcon);\n            $('#form-folder-add-icon-selected')\n                .val(store.get('teampassApplication').selectedFolderIconSelected);\n            // Set type of action for the form\n            $('#form-folder-add').data('action', 'update');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'copy') {\n            if (debugJavascript === true) console.info('SHOW COPY FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 20) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-copy');\n\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-copy').removeClass('hidden');\n            // Prepare some data in the form\n            $('#form-folder-copy-source').val(store.get('teampassApplication').selectedFolder).change();\n            //$(\"#form-folder-copy-destination option[value='\"+selectedFolder.id.split('_')[1]+\"']\")\n            //.prop('disabled', true);\n            $('#form-folder-copy-destination').val(0).change();\n            $('#form-folder-copy-label')\n                .val(store.get('teampassApplication').selectedFolderTitle + ' <?php echo strtolower(langHdl('copy')); ?>')\n                .focus();\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'delete') {\n            if (debugJavascript === true) console.info('SHOW DELETE FOLDER');\n            toastr.remove();\n            // Check privileges\n            if (store.get('teampassItem').hasAccessLevel < 30) {\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-folder-delete');\n\n            // Show copy form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-delete').removeClass('hidden');\n\n            // Prepare some data in the form\n            $('#form-folder-delete-selection').val(store.get('teampassApplication').selectedFolder).change();\n            $('#form-folder-confirm-delete').iCheck('uncheck');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('folder-action') === 'import') {\n            // IMPORT ITEMS\n            if (debugJavascript === true) console.info('SHOW IMPORT ITEMS');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-folder-import');\n\n\n            // Show import form\n            $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n            $('.form-folder-import').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'new') {\n            if (debugJavascript === true) console.info('SHOW NEW ITEM');\n            toastr.remove();\n            // Store current view\n            savePreviousView();\n\n            // Remove validated class\n            $('#form-item').removeClass('was-validated');\n\n            // Get some info\n            $.when(\n                retPrivileges = getPrivilegesOnItem(store.get('teampassApplication').itemsListFolderId, 0)\n            ).then(function() {\n                if (retPrivileges === false) {\n                    return false;\n                }\n                // If previous item was seen then clean session\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 1,\n                        teampassItem.id = ''\n                    }\n                );\n\n                // Show Visibility and minimum complexity\n                $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n                $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n                // HIde\n                $('.form-item-copy, #folders-tree-card, .columns-position, #form-item-password-options, .form-item-action, #form-item-attachments-zone')\n                    .addClass('hidden');\n                // Destroy editor\n                $('#form-item-description').summernote('destroy');\n\n                // Clean select2 lists\n                $('.select2').val('');\n                /*if ($('.select2') !== null) {if (debugJavascript === true) console.log($('.select2').length)\n                    $('.select2').change();\n                }*/\n                // Do some form cleaning\n                $('.clear-me-val').val('');\n                $('.item-details-card').find('.form-control').val('');\n                $('.clear-me-html').html('');\n                $('.form-item-control').val('');\n                // Show edition form\n                $('.form-item').removeClass('hidden');\n                $('.item-details-card').addClass('hidden');\n                // Force update of simplepassmeter\n                $('#form-item-password').focus();\n                $('#form-item-label').focus();\n                // Prepare editor\n                $('#form-item-description').summernote({\n                    toolbar: [\n                        ['style', ['style']],\n                        ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                        ['fontsize', ['fontsize']],\n                        ['color', ['color']],\n                        ['para', ['ul', 'ol', 'paragraph']],\n                        ['insert', ['link', 'picture']],\n                        //['height', ['height']],\n                        ['view', ['codeview']]\n                    ],\n                    codeviewFilter: true,\n                    codeviewIframeFilter: true\n                });\n\n                // Set folder\n                $('#form-item-folder').val(selectedFolderId).change();\n                // Select tab#1\n                $('#form-item-nav-pills li:first-child a').tab('show');\n                // Preselect\n                $('#pwd-definition-size').val(12);\n                // Set type of action\n                $('#form-item-button-save').data('action', 'new_item');\n                // Does this folder contain Custom Fields\n                if (store.get('teampassItem').hasCustomCategories.length > 0) {\n                    $('#form-item-field').removeClass('hidden');\n                    $.each(store.get('teampassItem').hasCustomCategories, function(i, category) {\n                        $('#form-item-category-' + category).removeClass('hidden');\n                    })\n                } else {\n                    $('#form-item-field, .form-item-category').addClass('hidden');\n                }\n                \n                // Add track-change class\n                //$('#form-item-label, #form-item-description, #form-item-login, #form-item-password, #form-item-email, #form-item-url, #form-item-folder, #form-item-restrictedto, #form-item-tags, #form-item-anyoneCanModify, #form-item-deleteAfterShown, #form-item-deleteAfterDate, #form-item-anounce, .form-item-field-custom').addClass('track-change');\n\n                // Update variable\n                userDidAChange = false;\n\n                toastr.remove();\n            });\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'edit') {\n            if (debugJavascript === true) console.info('SHOW EDIT ITEM');\n            $.when(\n                getPrivilegesOnItem(selectedFolderId, 1)\n            ).then(function() {\n                // Is user allowed\n                if (store.get('teampassItem').item_rights < 20) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // Store current view\n                savePreviousView();\n\n                // Store not a new item\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 0\n                    }\n                );\n\n                // Remove validated class\n                $('#form-item').removeClass('was-validated');\n\n                // Now manage edtion\n                showItemEditForm(selectedFolderId);\n            });\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'copy') {\n            if (debugJavascript === true) console.info('SHOW COPY ITEM');\n            toastr.remove();\n            // Store current view\n            savePreviousView('.form-item-copy');\n\n            if (store.get('teampassItem').user_can_modify === 1) {\n                // Show copy form\n                $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n                $('.form-item-copy, .item-details-card-menu').removeClass('hidden');\n                // Prepare some data in the form\n                $('#form-item-copy-new-label').val($('#form-item-label').val());\n                $('#form-item-copy-destination').val($('#form-item-folder').val()).change();\n            } else {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            }\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'delete') {\n            // Is user allowed\n            var levels = [50, 70];\n            if (levels.includes(store.get('teampassItem').item_rights) === false) {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-delete');\n\n            if (debugJavascript === true) console.info('SHOW DELETE ITEM');\n            if (store.get('teampassItem').user_can_modify === 1) {\n                // Show delete form\n                $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n                $('.form-item-delete, .item-details-card-menu').removeClass('hidden');\n            } else {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            }\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'share') {\n            if (debugJavascript === true) console.info('SHOW SHARE ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-share');\n\n            // Show share form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-share, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'notify') {\n            if (debugJavascript === true) console.info('SHOW NOTIFY ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-notify');\n\n            $('#form-item-notify-checkbox').iCheck('uncheck');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-notify, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'otv') {\n            if (debugJavascript === true) console.info('SHOW OTV ITEM');\n            toastr.remove();\n\n            // Store current view\n            savePreviousView('.form-item-otv');\n\n            // Generate link\n            prepareOneTimeView();\n\n            $('#form-item-otv-link').val('');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-otv, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        } else if ($(this).data('item-action') === 'server') {\n            if (debugJavascript === true) console.info('SHOW SERVER UPDATE ITEM');\n            toastr.remove();\n\n            // Is user allowed\n            var levels = [50, 70];\n            if (levels.includes(store.get('teampassItem').item_rights) === false) {\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_not_allowed_to'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Store current view\n            savePreviousView('.form-item-server');\n\n            $('#form-item-notify-checkbox').iCheck('uncheck');\n            // Show notify form\n            $('.form-item, .item-details-card, .form-item-action').addClass('hidden');\n            $('.form-item-server, .item-details-card-menu').removeClass('hidden');\n\n            //\n            // > END <\n            //\n        }\n\n        return false;\n    });\n\n    /**\n     * Saves the current view of user\n     */\n    function savePreviousView(newElement = '') {\n        var element = '';\n        if ($('#folders-tree-card').hasClass('hidden') === false) {\n            element = '#folders-tree-card';\n        } else if ($('.form-item').hasClass('hidden') === false) {\n            element = '.form-item';\n        } else if ($('.item-details-card-menu').hasClass('hidden') === false) {\n            element = '.item-details-card';\n        }\n        \n        if (debugJavascript === true) {console.log('>>> ' + element + ' -- ' + newElement);}\n\n        if (element === '.item-details-card') element = '#folders-tree-card';\n\n        // Store current view\n        store.update(\n            'teampassUser',\n            function(teampassUser) {\n                teampassUser.previousView = element;\n            }\n        );\n\n        // Store the new one to display\n        store.update(\n            'teampassUser',\n            function(teampassUser) {\n                teampassUser.currentView = newElement;\n            }\n        );\n    }\n\n\n    $('.but-back').click(function() {\n        userDidAChange = false;\n        if ($(this).hasClass('but-back-to-item') === false) {\n            // Is this form the edition one?\n            if ($(this).hasClass('item-edit') === true && userUploadedFile === true) {\n                // Do some operation such as cancel file upload\n                var data = {\n                    'item_id': store.get('teampassItem').id,\n                }\n\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: 'delete_uploaded_files_but_not_saved',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_uploaded_files_but_not_saved');\n                        if (debugJavascript === true) console.log(data);\n                    }\n                );\n            }\n\n            // Clear pickfiles div\n            $('#form-item-upload-pickfilesList').html('');\n\n            // Hide all\n            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, .columns-position, #item-details-card-categories, #form-item-upload-pickfilesList, #card-item-expired')\n                .addClass('hidden');\n\n            // Show expected one\n            $(store.get('teampassUser').previousView).removeClass('hidden');\n\n            closeItemDetailsCard();\n        } else {\n            $(store.get('teampassUser').previousView).removeClass('hidden');\n            $(store.get('teampassUser').currentView).addClass('hidden');\n        }\n        $('.but-prev-item, .but-next-item').addClass('hidden').text('');\n    });\n\n\n    // Quit item details card back to items list\n    $('.but-back-to-list').click(function() {\n        closeItemDetailsCard();\n    });\n\n\n\n    // Manage if change is performed by user\n    $('#form-item .form-item-control')\n        .on('change', function() {\n            if (requestRunning === false) {\n                userDidAChange = true;\n                if (debugJavascript === true) console.log('User did a change on #form-item > ' + userDidAChange + \" - Element \" + $(this).attr('id'));\n                //$(this).attr('data-change-ongoing', true);\n            }\n        })\n        .on('ifToggled', function() {\n            if (requestRunning === false) {\n                userDidAChange = true;\n                if (debugJavascript === true) console.log('User did a change on ifToggled > ' + userDidAChange);\n                //$(this).attr('data-change-ongoing', true);\n            }\n        });\n\n    /**\n     * Click on perform IMPORT\n     */\n    $(document).on('click', '#form-item-import-perform', function() {\n        if (debugJavascript === true) console.log('START IMPORT');\n    });\n\n\n    /**\n     * Click on ITEM REQUEST ACCESS\n     */\n    $(document).on('click', '.fa-clickable-access-request', function() {\n        // Store current view\n        savePreviousView();\n\n        // Adapt the form\n        $('#form-item-request-access-label')\n            .html($(this).closest('.list-item-description').find('.list-item-row-description').text());\n\n        // Store current item ID\n        var selectedItemId = $(this).closest('.list-item-row').data('item-id');\n        store.update(\n            'teampassItem',\n            function(teampassItem) {\n                teampassItem.id = selectedItemId;\n            }\n        );\n\n        // Show user\n        $('.form-item, .item-details-card, .form-item-action, #folders-tree-card, .columns-position').addClass('hidden');\n        $('.form-item-request-access').removeClass('hidden');\n    });\n\n    /**\n     * Send an access request to author\n     */\n    $(document).on('click', '#form-item-request-access-perform', function() {\n        // No reason is provided\n        if ($('#form-item-request-access-reason').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_provide_reason'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        var data = {\n            'id': store.get('teampassItem').id,\n            'email': DOMPurify.sanitize($('#form-item-request-access-reason').val()),\n        }\n        // NOw send the email\n        $.post(\n            \"sources/items.queries.php\", {\n                type: 'send_request_access',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'send_request_access');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Change view\n                    $('.form-item-request-access').addClass('hidden');\n                    $('#folders-tree-card, .columns-position').removeClass('hidden');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n\n        scrollBackToPosition();\n    });\n\n\n    /**\n     * Show/Hide the Password generation options\n     */\n    $('#item-button-password-showOptions').click(function() {\n        if ($('#form-item-password-options').hasClass('hidden') === true) {\n            $('#form-item-password-options').removeClass('hidden');\n        } else {\n            $('#form-item-password-options').addClass('hidden');\n        }\n    });\n\n\n\n    /**\n     * Adapt the top rules of item form on change of folders\n     */\n    $('#form-item-folder').change(function() {\n        if ($(this).val() !== null && store.get('teampass-folders') !== undefined) {\n            if (debugJavascript === true) {\n                console.log('teampass-folders');\n                console.log(store.get('teampass-folders'))\n            }\n            var folders = JSON.parse(store.get('teampass-folders'));\n            $('#card-item-visibility').html(folders[$(this).val()].visibilityRoles);\n            $('#card-item-minimum-complexity').html(folders[$(this).val()].complexity.text);\n        }\n\n    });\n\n    /**\n     * NOTIFY - Perform save\n     */\n    $('#form-item-notify-perform').click(function() {\n        var form = $('#form-item-notify');\n\n\n        var data = {\n            'notification_status': $('#form-item-notify-checkbox').is(':checked') === true ? 1 : 0,\n            'item_id': store.get('teampassItem').id,\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'save_notification_status',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'save_notification_status');\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Change the icon for Notification\n                    if ($('#form-item-notify-checkbox').is(':checked') === true) {\n                        $('#card-item-misc-notification')\n                            .html('<span class=\"far fa-bell infotip text-success\" title=\"<?php echo langHdl('notification_engaged'); ?>\"></span>');\n                    } else {\n                        $('#card-item-misc-notification')\n                            .html('<span class=\"far fa-bell-slash infotip text-warning\" title=\"<?php echo langHdl('notification_not_engaged'); ?>\"></span>');\n                    }\n\n                    // Show/hide forms\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-notify').addClass('hidden');\n\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // Clear\n                    $('#form-item-notify-checkbox').iCheck('uncheck');\n                }\n            }\n        );\n    });\n\n\n\n    /**\n     * SHARE - validate the email\n     */\n    $('#form-item-share-perform').click(function() {\n        var form = $('#form-item-share');\n\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Prepare data\n        var data = {\n            'id': store.get('teampassItem').id,\n            'receipt': DOMPurify.sanitize($('#form-item-share-email').val()),\n            'cat': 'share_this_item',\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'send_email',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'send_email');\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-share').addClass('hidden');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // Clear\n                    $('#form-item-share-email').val('');\n                }\n            }\n        );\n    });\n\n\n    /**\n     * DELETE - recycle item\n     */\n    $('#form-item-delete-perform').click(function() {\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'item_id': store.get('teampassItem').id,\n            'folder_id': selectedFolderId,\n            'label': DOMPurify.sanitize($('#form-item-copy-new-label').val()),\n            'access_level': store.get('teampassItem').hasAccessLevel,\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'delete_item',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_item');\n\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    $('.form-item-action, .item-details-card-menu').addClass('hidden');\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Refresh tree\n                    refreshTree(selectedFolderId, true);\n                    // Load list of items\n                    ListerItems(selectedFolderId, '', 0);\n                    // Close\n                    closeItemDetailsCard();\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * NOTIFY - save status\n     */\n    $('#form-item-share-perform').click(function() {\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'notify_user_on_item_change',\n                id: store.get('teampassItem').id,\n                value: $('#form-item-anyoneCanModify').is(':checked') === true ? 1 : 0,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                if (data[0].error === '') {\n                    $('.form-item, .item-details-card, .form-item-action').removeClass('hidden');\n                    $('.form-item-share, .item-details-card-menu').addClass('hidden');\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Clear\n                    $('#form-item-anyoneCanModify').attr('checked', '');\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            },\n            'json'\n        );\n    });\n\n\n    /**\n     * COPY - perform copy item\n     */\n    $('#form-item-copy-perform').click(function() {\n        // Do check\n        if ($('#form-item-copy-new-label').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Show cog\n        toastr.remove();\n        toastr.info('<?php echo langHdl('item_copying'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'item_id': store.get('teampassItem').id,\n            'source_id': selectedFolderId,\n            'dest_id': $('#form-item-copy-destination').val(),\n            'new_label': DOMPurify.sanitize($('#form-item-copy-new-label').val()),\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'copy_item',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Refresh tree\n                    refreshTree(parseInt($('#form-item-copy-destination').val()), true);\n                    // Load list of items\n                    ListerItems(parseInt($('#form-item-copy-destination').val()), '', 0);\n\n                    // Reopen Item details form\n                    Details(\n                        data.new_id,\n                        'show',\n                        true\n                    );\n                    \n                    // Close\n                    $('.item-details-card').removeClass('hidden');\n                    $('.form-item-copy').addClass('hidden');\n                } else {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * SERVER - perform server update\n     */\n    $('#form-item-server-perform').click(function() {\n        // Decide what action is performing the user\n\n        if ($('#tab-one-shot').hasClass('active') === true) {\n            // Do check\n            if ($('#form-item-server-login').val() === '' ||\n                $('#form-item-server-old-password').val() === '' ||\n                $('#form-item-server-password').val() === ''\n            ) {\n                toastr.error(\n                    '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Show cog\n            toastr.remove();\n            toastr.info(\n                '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>',\n            );\n\n            // Force user did a change to false\n            userDidAChange = false;\n            userUploadedFile = false;\n\n            var data = {\n                'item_id': store.get('teampassItem').id,\n                'new_pwd': DOMPurify.sanitize($('#form-item-server-password').val()),\n                'ssh_root': DOMPurify.sanitize($('#form-item-server-login').val()),\n                'ssh_pwd': DOMPurify.sanitize($('#form-item-server-old-password').val()),\n                'user_id': <?php echo $_SESSION['user_id']; ?>,\n            }\n\n            $.post(\n                \"sources/utils.queries.php\", {\n                    type: \"server_auto_update_password\",\n                    data: prepareExchangedData(data, \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    if (debugJavascript === true) console.log(data);\n                    //check if format error\n                    if (data.error === true) {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Warn user\n                        toastr.success(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n\n                        // Info\n                        $(\"#form-item-server-status\")\n                            .html(\"<?php echo langHdl('done'); ?> \" + data.text)\n                            .removeClass('hidden');\n                    }\n                }\n            );\n        } else if ($('#tab-scheduled').hasClass('active') === true) {\n            $.post(\n                \"sources/utils.queries.php\", {\n                    type: \"server_auto_update_password_frequency\",\n                    id: store.get('teampassItem').id,\n                    freq: $('#form-item-server-cron-frequency').val(),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    if (data[0].error != \"\") {\n                        toastr.remove();\n                        toastr.error(\n                            data[0].error,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        $('#form-item-server-cron-frequency').val(0).change();\n                        toastr.success(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                },\n                \"json\"\n            );\n        }\n    });\n\n\n    /**\n     * SUGGESTION - perform new suggestion on item\n     */\n    $('#form-item-suggestion-perform').click(function() {\n        var form = $('#form-item-suggestion');\n\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 10000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        var data = {\n            'label': DOMPurify.sanitize($('#form-item-suggestion-label').val()),\n            'login': DOMPurify.sanitize($('#form-item-suggestion-login').val()),\n            'password': DOMPurify.sanitize($('#form-item-suggestion-password').val()),\n            'email': DOMPurify.sanitize($('#form-item-suggestion-email').val()),\n            'url': DOMPurify.sanitize($('#form-item-suggestion-url').val()),\n            'description': DOMPurify.sanitize($('#form-item-suggestion-description').summernote('code'), {USE_PROFILES: {html: true}}),\n            'comment': DOMPurify.sanitize($('#form-item-suggestion-comment').val(), {USE_PROFILES: {html: true}}),\n            'folder_id': selectedFolderId,\n            'item_id': store.get('teampassItem').id\n        }\n\n        // Launch action\n        $.post(\n            'sources/items.queries.php', {\n                type: 'suggest_item_change',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data//decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'suggest_item_change');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Warn user\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    // Clear form\n                    $('.form-item-suggestion').html('');\n\n                    // Collapse form\n                    //$('.card-item-extra').collapse('toggle');\n                }\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER NEW - Add a new folder\n     */\n    $('#form-folder-add-perform').click(function() {\n        var form = $('#form-folder-add');\n        if (debugJavascript === true) {\n            console.log(form[0]);\n            console.log(form[0].checkValidity());\n        }\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Error if folder text is only numeric\n        if (/^\\d+$/.test($('#form-folder-add-label').val())) {\n            $('#form-folder-add-label').addClass('is-invalid');\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_only_numbers_in_folder_name'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // Force user did a change to false\n        userDidAChange = false;\n        userUploadedFile = false;\n\n        // Sanitize text fields\n        let formLabel = fieldSanitizeStep1('#form-folder-add-label', false, false, false),\n            formIcon = fieldSanitizeStep1('#form-folder-add-icon', false, false, false),\n            formIconSelected = fieldSanitizeStep1('#form-folder-add-icon-selected', false, false, false);\n        if (formLabel === false || formIcon === false || formIconSelected === false) {\n            // Label is empty\n            toastr.remove();\n            toastr.warning(\n                'XSS attempt detected. Field has been emptied.',\n                'Error', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        var data = {\n            'title': formLabel,\n            'parentId': $('#form-folder-add-parent option:selected').val(),\n            'complexity': $('#form-folder-add-complexicity option:selected').val(),\n            //'access_rights_strategy': $('#form-folder-add-rights option:selected').val(),\n            'icon': formIcon,\n            'iconSelected': formIconSelected,\n            'id': selectedFolderId,\n        }\n        if (debugJavascript === true) console.log(data);\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: $('#form-folder-add').data('action') + '_folder',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data//decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', $('#form-folder-add').data('action') + '_folder');\n                if (debugJavascript === true) {\n                    console.log(data);\n                }\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    if ($('#form-folder-add').data('action') === 'add') {\n                        // Refresh tree\n                        refreshTree(data.newId, true);\n                        // Refresh list of items inside the folder\n                        ListerItems(data.newId, '', 0);\n                    } else {\n                        // Refresh tree\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 1;\n                            }\n                        );\n                        refreshTree(selectedFolderId, true);\n                        // Refresh list of items inside the folder\n                        ListerItems(selectedFolderId, '', 0);\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 0;\n                            }\n                        );\n                    }\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n                // Enable the parent in select\n                if (selectedFolder.id !== undefined) {\n                    $(\"#form-folder-add-parent option[value='\" + selectedFolder.id.split('_')[1] + \"']\")\n                        .prop('disabled', false);\n                }\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER DELETE - Delete an existing folder\n     */\n    $('#form-folder-delete-perform').click(function() {\n        // Do check\n        if ($('#form-folder-confirm-delete').is(':checked') === false) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_confirm'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        } else if ($('#form-folder-delete-selection option:selected').text() === '<?php echo $_SESSION['login']; ?>') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_not_allowed_to'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Is a folder selected\n        if ($('#form-folder-delete-selection option:selected').val() === '') {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        \n        // Ensure Root is not selected\n        } else if (parseInt($('#form-folder-delete-selection option:selected').val()) === 0) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                '',\n                {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n        \n        // Show cog\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n\n        var selectedFolders = [],\n            data = {\n                'selectedFolders': [$('#form-folder-delete-selection option:selected').val()]\n            }\n        if (debugJavascript === true) console.log(data)\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: 'delete_folders',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', 'delete_folders');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    // Refresh tree\n                    refreshTree(data.parent_id, true);\n                    // Refresh list of items inside the folder\n                    ListerItems(data.parent_id, '', 0);\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n\n                $('#form-folder-confirm-delete').iCheck('uncheck');\n            }\n        );\n    });\n\n\n    /**\n     * FOLDER COPY - Copy an existing folder\n     */\n    $('#form-folder-copy-perform').click(function() {\n        // Do check\n        if ($(\"#form-folder-copy-source\").val() === \"\" || $(\"#form-folder-copy-destination\").val() === \"\") {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_must_enter_all_fields'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        } else if ($(\"#form-folder-copy-source\").val() === $(\"#form-folder-copy-destination\").val()) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_source_and_destination_are_equal'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Show cog\n        toastr.remove();\n        toastr\n            .info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        var data = {\n            'source_folder_id': $('#form-folder-copy-source option:selected').val(),\n            'target_folder_id': $('#form-folder-copy-destination option:selected').val(),\n            'folder_label': DOMPurify.sanitize($('#form-folder-copy-label').val(), {USE_PROFILES: {html: false}}),\n        }\n\n        // Launch action\n        $.post(\n            'sources/folders.queries.php', {\n                type: 'copy_folder',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'folders.queries.php', 'copy_folder');\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Refresh list of folders\n                    refreshVisibleFolders(true);\n                    // Refresh tree\n                    refreshTree($('#form-folder-copy-destination option:selected').val(), true);\n                    // Refresh list of items inside the folder\n                    ListerItems($('#form-folder-copy-destination option:selected').val(), '', 0);\n                    // Back to list\n                    closeItemDetailsCard();\n                    // Warn user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('success'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n    $(document).on('change', '#form-folder-copy-source', function() {\n        $('#form-folder-copy-label')\n            .val($('#form-folder-copy-source option:selected').text()\n                .substring(0, $('#form-folder-copy-source option:selected').text().lastIndexOf('[')).trim() +\n                ' <?php echo strtolower(langHdl('copy')); ?>');\n    });\n\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function closeItemDetailsCard() {\n        if (debugJavascript === true) console.log('CLOSE - user did a change? ' + userDidAChange + \" - User previous view: \" + store.get('teampassUser').previousView);\n        if (userDidAChange === true) {\n            toastr\n                .warning(\n                    '<?php echo langHdl('changes_ongoing'); ?><br>' +\n                    '<button type=\"button\" class=\"btn clear\" id=\"discard-changes\"><?php echo langHdl('yes'); ?></button>' +\n                    '<button type=\"button\" class=\"btn clear ml-2\" id=\"keep-changes\"><?php echo langHdl('no'); ?></button>',\n                    '<?php echo langHdl('caution'); ?>', {\n                        closeButton: true\n                    }\n                );\n            $(document).on('click', '#discard-changes', function() {\n                userDidAChange = false;\n                //$('.form-item-control').attr('data-change-ongoing', \"\");\n                closeItemDetailsCard();\n            });\n        } else {\n            if (store.get('teampassUser').previousView === '.item-details-card' &&\n                $('.item-details-card').hasClass('hidden') === false\n            ) {\n                $('.item-details-card').removeClass('hidden');\n                $('#folders-tree-card, .columns-position, .form-item-action, .form-item, .form-folder-action, #card-item-expired')\n                    .addClass('hidden');\n\n                // Force previous view to folders list\n                store.update(\n                    'teampassUser',\n                    function(teampassUser) {\n                        teampassUser.previousView = '#folders-tree-card';\n                    }\n                );\n            } else {\n                if (store.get('teampassUser').previousView === '.item-details-card') {\n                    // Force previous view to folders list\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.previousView = '#folders-tree-card';\n                        }\n                    );\n                    // Reopen Item details form\n                    Details(\n                        store.get('teampassItem').id,\n                        'show',\n                        true\n                    );\n\n                    return false;\n                }\n                if (store.get('teampassUser').previousView === '#folders-tree-card' ||\n                    $('.item-details-card').hasClass('hidden') === false\n                ) {\n                    $('#folders-tree-card, .columns-position').removeClass('hidden');\n                    $('.item-details-card, .form-item-action, .form-item, .form-folder-action, #card-item-expired')\n                        .addClass('hidden');\n                } else {\n                    // Hide all\n                    $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, #card-item-expired')\n                        .addClass('hidden');\n\n                    // Show expected one\n                    $(store.get('teampassUser').previousView).removeClass('hidden');\n                }\n\n                // Do some form cleaning\n                $('.clear-me-val, .form-item-control').val('');\n                $('.item-details-card').find('.form-control').val('');\n                $('.clear-me-html, .card-item-field-value').html('');\n                $('.form-check-input').attr('checked', '');\n                //$('.card-item-extra').collapse();\n                $('.collapse').removeClass('show');\n                $('.to_be_deleted').remove();\n                $('#card-item-attachments, #card-item-history').html('');\n                $('#card-item-attachments-badge').html('<?php echo langHdl('none'); ?>');\n\n                // Move back fields\n                $('.fields-to-move')\n                    .detach()\n                    .appendTo('#card-item-fields');\n\n                // Ensure the form is correct\n                $('#list-group-item-main, #item-details-card-categories')\n                    .children('.list-group')\n                    .removeClass('hidden');\n\n                // SHow save button in card\n                //$('#form-item-buttons').removeClass('sticky-footer');\n\n                // Destroy editors\n                $('#form-item-description').summernote('destroy');\n                $('#form-item-suggestion-description').summernote('destroy');\n\n                // Show loading\n                $('.overlay').removeClass('hidden');\n\n                // Collapse accordion\n                //$('.collapseme').addClass('collapsed-card');\n\n                // Restore scroll position\n                $(window).scrollTop(userScrollPosition);\n\n                userDidAChange = false;                \n                //$('.form-item-control').attr('data-change-ongoing', \"\");\n\n                // Enable the parent in select\n                if (selectedFolder.id !== undefined) {\n                    $(\"#form-folder-add-parent option[value='\" + selectedFolder.id.split('_')[1] + \"']\")\n                        .prop('disabled', false);\n                }\n            }\n            if (debugJavascript === true) console.log('Edit for closed');\n        }\n\n\n\n        // Scroll back to position\n        scrollBackToPosition();\n    }\n\n\n    /**\n     * Click on button with class but-navigate-item\n     */\n    $(document)\n        .on('click', '.but-navigate-item', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load item info\n            Details(\n                $(this).hasClass('but-prev-item') === true ? $('#list-item-row_' + $(this).attr('data-prev-item-id')) : $('#list-item-row_' + $(this).attr('data-next-item-id')),\n                'show'\n            );\n\n            $('.but-navigate-item').addClass('hidden');\n        });\n\n\n    /**\n     * Click on item\n     */\n    $(document)\n        .on('click', '.list-item-clicktoshow', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load item info\n            Details($(this).closest('tr'), 'show');\n        })\n        .on('click', '.list-item-clicktoedit', function() {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('loading_item'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            if (debugJavascript === true) console.log('EDIT ME');\n            // Set type of action\n            $('#form-item-button-save').data('action', 'update_item');\n            \n            // Load item info\n            Details($(this).closest('tr'), 'edit');\n        });\n\n    /**\n     *  Manage mini icons on mouse over\n     */\n    $(document)\n        .on('mouseenter', '.list-item-row', function() {\n            $(this).find(\".list-item-actions\").removeClass('hidden');\n        })\n        .on('mouseleave', '.list-item-row', function() {\n            $(this).find(\".list-item-actions\").addClass('hidden');\n        });\n\n    $(document)\n        .on('change', '.form-check-input-template', function() {\n            $('.form-check-input-template').not(this).prop('checked', false);\n            userDidAChange = true;\n            if (debugJavascript === true) console.log('User did a change on .form-check-input-template > ' + userDidAChange);\n        });\n\n    $('.form-check-input-template').on('ifChecked', function() {\n        $('.form-check-input-template').not(this).iCheck('uncheck');\n        userDidAChange = true;\n        if (debugJavascript === true) console.log('User did a change on .form-check-input-template > ' + userDidAChange);\n        //$('.form-check-input-template').attr('data-change-ongoing', true);;\n    });\n\n    /**\n     * Manage change of color\n     */\n    $(document)\n        .on('mouseenter', '.fa-clickable', function() {\n            $(this).addClass('text-info');\n        })\n        .on('mouseleave', '.fa-clickable', function() {\n            $(this).removeClass('text-info');\n        });\n\n    $('#form-item-label').change(function() {\n        $('#form-item-title').html($(this).val());\n    });\n\n    /**\n     * Make the item favourite by clicking on icon\n     */\n    $(document)\n        .on('click', '.item-favourite', function() {\n            if (quick_icon_query_status === true) {\n                quick_icon_query_status = false;\n                var elem = $(this);\n\n                //Send query\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('success'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n\n                var data = {\n                    item_id: $(this).data('item-id'),\n                    action: $(this).data('item-favourited'),\n                }\n\n                console.log(data)\n\n                $.post('sources/items.queries.php', {\n                        type: 'action_on_quick_icon',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(ret) {\n                        //change quick icon\n                        if (elem.data('item-favourited') === 0) {\n                            $(elem)\n                                .html('<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('unfavorite'); ?>\" data-item-id=\"' + elem.item_id + '\" data-item-favourited=\"1\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse text-warning\"></i></span>');\n                        } else {\n                            $(elem)\n                                .html('<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('favorite'); ?>\" data-item-id=\"' + elem.item_id + '\" data-item-favourited=\"0\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse\"></i></span>');\n                        }\n\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                        quick_icon_query_status = true;\n                    }\n                );\n            }\n        });\n\n    // Click to reaveal password\n    $('#item-button-password-show')\n        .mouseup(function() {\n            $('#form-item-password').attr('type', 'password');\n        })\n        .mousedown(function() {\n            $('#form-item-password').attr('type', 'text');\n        });\n    $('.btn-no-click')\n        .click(function(e) {\n            e.preventDefault();\n        });\n\n\n\n    // show password during longpress\n    var mouseStillDown = false;\n    $('.item-details-card').on('mousedown', '.unhide_masked_data', function(event) {\n            mouseStillDown = true;\n            showPwdContinuous();\n        })\n        .on('mouseup', '.unhide_masked_data', function(event) {\n            mouseStillDown = false;\n            showPwdContinuous();\n        })\n        .on('mouseleave', '.unhide_masked_data', function(event) {\n            mouseStillDown = false;\n            showPwdContinuous();\n        });\n    var showPwdContinuous = function() {\n        if (mouseStillDown === true) {\n            // Prepare data to show\n            // Is data crypted?\n            var data = unCryptData($('#hidden-item-pwd').val(), '<?php echo $_SESSION['key']; ?>');\n            if (data !== false && data !== undefined) {\n                $('#hidden-item-pwd').val(\n                    data.password\n                );\n            }\n\n            $('#card-item-pwd')\n                .html(\n                    '<span style=\"cursor:none;\">' +\n                    $('#hidden-item-pwd').val()\n                    .replace(/</g, '&lt;')\n                    .replace(/>/g, '&gt;') +\n                    '</span>'\n                );\n\n            setTimeout('showPwdContinuous(\"card-item-pwd\")', 50);\n            // log password is shown\n            if ($('#card-item-pwd').hasClass('pwd-shown') === false) {\n                itemLog(\n                    'at_password_shown',\n                    store.get('teampassItem').id,\n                    $('#card-item-label').text()\n                );\n                $('#card-item-pwd').addClass('pwd-shown');\n            }\n        } else {\n            $('#card-item-pwd')\n                .html('<?php echo $var['hidden_asterisk']; ?>')\n                .removeClass('pwd-shown');\n        }\n    };\n\n    // Fields - show masked field\n    var selectedElement;\n    $('.item-details-card').on('mousedown', '.replace-asterisk', function(event) {\n            mouseStillDown = true;\n            selectedElement = $(this);\n            showContinuousMasked();\n        })\n        .on('mouseup', '.replace-asterisk', function(event) {\n            mouseStillDown = false;\n        })\n        .on('mouseleave', '.replace-asterisk', function(event) {\n            mouseStillDown = false;\n        });\n    var showContinuousMasked = function() {\n        if (mouseStillDown) {\n            $(selectedElement)\n                .text($('#hidden-card-item-field-value-' + selectedElement.data('field-id')).val());\n\n            setTimeout('showContinuousMasked()', 50);\n        } else {\n            $(selectedElement).html('<?php echo $var['hidden_asterisk']; ?>');\n        }\n    };\n\n\n    /**\n     * Launch the items search\n     */\n    $('#find_items').bind('keypress', function(e) {\n        var code = e.keyCode || e.which;\n        if (code == 13) {\n            searchItems($(this).val());\n        }\n    });\n\n    $('#find_items_button').click(function() {\n        if ($('#find_items').val() !== '') {\n            searchItems($('#find_items').val());\n        }\n    });\n\n\n    // Password strength\n    var pwdOptions = {};\n    pwdOptions = {\n        common: {\n            zxcvbn: true,\n            debug: false,\n            minChar: 4,\n            onScore: function (options, word, totalScoreCalculated) {\n                if (word.length === 20 && totalScoreCalculated < options.ui.scores[1]) {\n                    // Score doesn't meet the score[1]. So we will return the min\n                    // numbers of points to get that score instead.\n                    return options.ui.score[1]\n                }\n                $(\"#form-item-password-complex\").val(totalScoreCalculated);\n                return totalScoreCalculated;\n            },\n            usernameField: \"#form-item-login\",\n        },\n        rules: {},\n        ui: {\n            colorClasses: [\"text-danger\", \"text-danger\", \"text-danger\", \"text-warning\", \"text-warning\", \"text-success\"],\n            showPopover: false,\n            showStatus: true,\n            showErrors: false,\n            showVerdictsInsideProgressBar: true,\n            container: \"#tab_1\",\n            viewports: {\n                progress: \"#form-item-password-strength\",\n                score: \"#form-item-password-strength\"\n            },\n            scores: [<?php echo TP_PW_STRENGTH_1;?>, <?php echo TP_PW_STRENGTH_2;?>, <?php echo TP_PW_STRENGTH_3;?>, <?php echo TP_PW_STRENGTH_4;?>, <?php echo TP_PW_STRENGTH_5;?>],\n        },\n        i18n : {\n            t: function (key) {\n                var phrases = {\n                    weak: '<?php echo langHdl('complex_level1'); ?>',\n                    normal: '<?php echo langHdl('complex_level2'); ?>',\n                    medium: '<?php echo langHdl('complex_level3'); ?>',\n                    strong: '<?php echo langHdl('complex_level4'); ?>',\n                    veryStrong: '<?php echo langHdl('complex_level5'); ?>'\n                };\n                var result = phrases[key];\n\n                return result === key ? '' : result;\n            }\n        }\n    };\n    $('#form-item-password').pwstrength(pwdOptions);\n    \n\n\n    /**\n     * PLUPLOAD\n     */\n    var uploader_attachments = new plupload.Uploader({\n        runtimes: 'html5,flash,silverlight,html4',\n        browse_button: 'form-item-attach-pickfiles',\n        container: 'form-item-upload-zone',\n        max_file_size: '<?php\n            if (strrpos($SETTINGS['upload_maxfilesize'], 'mb') === false) {\n                echo $SETTINGS['upload_maxfilesize'] . 'mb';\n            } else {\n                echo $SETTINGS['upload_maxfilesize'];\n            }\n            ?>',\n        chunk_size: '1mb',\n        dragdrop: true,\n        url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/upload.attachments.php',\n        flash_swf_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.swf',\n        silverlight_xap_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.xap',\n        filters: {\n            mime_types: [\n                <?php\n                if (\n                    isset($SETTINGS['upload_all_extensions_file']) === false\n                    || (isset($SETTINGS['upload_all_extensions_file']) === true\n                        && (int) $SETTINGS['upload_all_extensions_file'] === 0)\n                ) {\n                    ?> {\n                        title: 'Image files',\n                        extensions: '<?php echo $SETTINGS['upload_imagesext']; ?>'\n                    },\n                    {\n                        title: 'Package files',\n                        extensions: '<?php echo $SETTINGS['upload_pkgext']; ?>'\n                    },\n                    {\n                        title: 'Documents files',\n                        extensions: '<?php echo $SETTINGS['upload_docext']; ?>'\n                    },\n                    {\n                        title: 'Other files',\n                        extensions: '<?php echo $SETTINGS['upload_otherext']; ?>'\n                    }\n                <?php\n                }\n                ?>\n            ],\n            <?php\n            if (isset($SETTINGS['upload_zero_byte_file']) === true && (int) $SETTINGS['upload_zero_byte_file'] === 1) {\n                ?>\n                prevent_empty: false\n            <?php\n            }\n            ?>\n        },\n        <?php\n        if ((int) $SETTINGS['upload_imageresize_options'] === 1) {\n            ?>\n            resize: {\n                width: <?php echo $SETTINGS['upload_imageresize_width']; ?>,\n                height: <?php echo $SETTINGS['upload_imageresize_height']; ?>,\n                quality: <?php echo $SETTINGS['upload_imageresize_quality']; ?>\n            },\n        <?php\n        }\n        ?>\n        init: {\n            BeforeUpload: function(up, file) {\n                toastr.info(\n                    '<i class=\"fa-solid fa-cloud-arrow-up fa-bounce mr-2\"></i><?php echo langHdl('uploading'); ?>',\n                    '', {\n                        timeOut: 0\n                    }\n                );\n\n                // Get random number\n                if (store.get('teampassApplication').uploadedFileId === '') {\n                    store.update(\n                        'teampassApplication',\n                        function(teampassApplication) {\n                            teampassApplication.uploadedFileId = CreateRandomString(9, 'num_no_0');\n                        }\n                    );\n                }\n\n                up.setOption('multipart_params', {\n                    PHPSESSID: '<?php echo $_SESSION['user_id']; ?>',\n                    itemId: store.get('teampassItem').id,\n                    type_upload: 'item_attachments',\n                    isNewItem: store.get('teampassItem').isNewItem,\n                    isPersonal: store.get('teampassItem').folderIsPersonal,\n                    edit_item: false,\n                    user_token: store.get('teampassApplication').attachmentToken,\n                    randomId: store.get('teampassApplication').uploadedFileId,\n                    files_number: $('#form-item-hidden-pickFilesNumber').val(),\n                    file_size: file.size\n                });\n                console.log('DEBUG IMAGE - BeforeUpload')\n                console.log(up);\n            }\n        }\n    });\n\n    // Uploader options\n    uploader_attachments.bind('UploadProgress', function(up, file) {\n        //console.log('uploader_attachments.bind')\n        $('#upload-file_' + file.id).html('<i class=\"fas fa-file fa-sm mr-2\"></i>' + htmlEncode(file.name) + '<span id=\"fileStatus_'+file.id+'\">- ' + file.percent + '%</span>');\n        if (file.percent === 100) {\n            $('#fileStatus_'+file.id).html('<i class=\"fa-solid fa-circle-check text-success ml-2 fa-1x\"></i>');\n            userUploadedFile = true;\n            userDidAChange = true;\n            toastr.remove();\n        }\n    });\n    uploader_attachments.bind('Error', function(up, err) {\n        toastr.remove();\n        toastr.error(\n            err.message + (err.file ? ', File: ' + err.file.name : ''),\n            '', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    $(\"#form-item-upload-pickfiles\").click(function(e) {\n        if ($('#form-item-upload-pickfilesList').text() !== '') {\n            // generate and save token\n            $.post(\n                \"sources/main.queries.php\", {\n                    type: \"save_token\",\n                    type_category: 'action_system',\n                    size: 25,\n                    capital: true,\n                    numeric: true,\n                    ambiguous: true,\n                    reason: \"item_attachments\",\n                    duration: 10,\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    store.update(\n                        'teampassApplication',\n                        function(teampassApplication) {\n                            teampassApplication.attachmentToken = data[0].token;\n                        }\n                    );\n                    console.log('start upload')\n                    uploader_attachments.start();\n                },\n                \"json\"\n            );\n            e.preventDefault();\n        } else {\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_file_to_upload'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    uploader_attachments.init();\n    uploader_attachments.bind('FilesAdded', function(up, files) {\n        if (debugJavascript === true) {\n            console.log('uploader_attachments.FilesAdded')\n        }\n        $('#form-item-upload-pickfilesList').removeClass('hidden');\n        var addedFiles = '';\n        $.each(files, function(i, file) {\n            $('#form-item-upload-pickfilesList').append(\n                '<div id=\"upload-file_' + file.id + '\">' +\n                '<span id=\"upload-file-remove_' + file.id +\n                '><a href=\"#\" onclick=\"$(this).closest(\\'div\\').remove();\"><i class=\" fa fa-trash mr-2 pointer\"></i></a></span> ' +\n                htmlEncode(file.name) + ' (' + plupload.formatSize(file.size) + ')' +\n                '</div>');\n            $(\"#form-item-hidden-pickFilesNumber\").val(\n                parseInt($(\"#form-item-hidden-pickFilesNumber\").val()) + 1\n            );\n            if (debugJavascript === true) {\n                console.info('Info du fichier :');\n                console.log(file);\n            }\n        });\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n    //->\n\n\n\n    /**\n     * Save item changes\n     */\n    $('#form-item-button-save').click(function() {\n        var arrayQuery = [],\n            originalFolderId = $('#form-item-folder').val(),\n            itemsList = [],\n            userItemRight = '';\n\n        // What action is this?\n        if ($('#form-item-button-save').data('action') === '' ||\n            $('#form-item-button-save').data('action') === undefined\n        ) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('error_no_action_identified'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Don't save if no change\n        if (userDidAChange === false && userUploadedFile === false) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('no_change_performed'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Validate form\n        var form = $('#form-item');\n        if (form[0].checkValidity() === false) {\n            form.addClass('was-validated');\n            // Send alert to user\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('form_presents_inconsistencies'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            return false;\n        }\n\n        // Loop on all changed fields\n        $('.form-item-field-custom').each(function(i, obj) {\n            if ($(this).data('change-ongoing') === true) {\n                // Create an array with changed inputs\n                arrayQuery.push({\n                    'input': $(this).attr('id'),\n                    'field': $(this).data('field-name'),\n                    'value': $(this).val(),\n                });\n            }\n        });\n        if (debugJavascript === true) {\n            console.log('CHANGED FIELDS '+userUploadedFile + ' ' + userDidAChange);\n            console.log(arrayQuery);\n        }\n\n        // is user allowed to edit this item\n        if (typeof store.get('teampassApplication').itemsList !== 'undefined') {\n            itemsList = JSON.parse(store.get('teampassApplication').itemsList);\n        }\n        if (itemsList.length > 0) {\n            userItemRight = itemsList[store.get('teampassItem').id]?.rights;\n        }\n\n        \n\n        // Do checks\n        if (arrayQuery.length > 0 || userDidAChange === true) {\n            var reg = new RegExp(\"[.|,|;|:|!|=|+|-|*|/|#|\\\"|'|&]\");\n\n            // Sanitize text fields\n            let formLabel = fieldSanitizeStep1('#form-item-label', false, false, false),\n                formDescription = $('#form-item-description').summernote('code') !== \"<p><br></p>\" ? fieldSanitizeStep1('#form-item-description', true, false, false, $('#form-item-description').summernote('code')) : '',\n                formEmail = fieldSanitizeStep1('#form-item-email'),\n                formTags = fieldSanitizeStep1('#form-item-tags'),\n                formUrl = fieldSanitizeStep1('#form-item-url'),\n                formIcon = fieldSanitizeStep1('#form-item-icon');\n            if (formLabel === false || formDescription === false || formEmail === false || formTags === false || formUrl === false || formIcon === false) {\n                // Label is empty\n                toastr.remove();\n                toastr.warning(\n                    'XSS attempt detected. Field has been emptied.',\n                    'Error', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n            \n            // Do some easy checks\n            if (formLabel === '') {\n                // Label is empty\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_label'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if (formTags !== '' &&\n                reg.test(formTags)\n            ) {\n                // Tags not wel formated\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_tags'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if ($('#form-item-folder option:selected').val() === '' ||\n                typeof $('#form-item-folder option:selected').val() === 'undefined'\n            ) {\n                // No folder selected\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_no_selected_folder'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else if ($('#form-item-folder option:selected').attr('disabled') === 'disabled' && userItemRight && userItemRight <= 40) {\n                // Folder is not allowed\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_folder_not_allowed'); ?>',\n                    '', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            } else {\n                // Continue preparation of saving query\n\n                //Manage restriction\n                var restriction = new Array(),\n                    restrictionRole = new Array(),\n                    userInRestrictionList = false;\n                $('#form-item-restrictedto option:selected').each(function() {\n                    if ($(this).val() !== '') {\n                        if ($(this).hasClass('restriction_is_role') === true) {\n                            restrictionRole.push($(this).val().substring(5));\n                        } else {\n                            restriction.push($(this).val());\n                            // Is the user part of the restriction option\n                            if ($(this).val() === '<?php echo $_SESSION['user_id']; ?>') {\n                                userInRestrictionList = true;\n                            }\n                        }\n                    }\n                });\n                // IF any restriction, then ensure the author is in\n                if (userInRestrictionList === false && restriction.length > 0) {\n                    restriction.push('<?php echo $_SESSION['user_id']; ?>;');\n                }\n\n                // Manage diffusion list\n                var diffusion = new Array();\n                var diffusionNames = new Array();\n                $('#form-item-anounce option:selected').each(function() {\n                    diffusion.push($(this).val());\n                    diffusionNames.push($(this).text());\n                });\n\n                // Get item field values\n                // Ensure that mandatory ones are filled in too\n                // and they are compliant to regexes\n                var fields = [];\n                var errorExit = false;\n                var reason = '';\n                $('.form-item-field-custom').each(function(key, data) {\n                    fields.push({\n                        'id': $(this).data('field-name'),\n                        'value': $(this).val(),\n                    });\n\n                    // Mandatory?\n                    if (parseInt($(this).data('field-mandatory')) === 1 &&\n                        $(this).val() === '' &&\n                        $('#form-item-field-' + $(this).data('field-name')).parent().hasClass('hidden') === false\n                    ) {\n                        //if (debugJavascript === true) console.log($(this))\n                        errorExit = true;\n                        return false;\n                    }\n                    if ($(this).val().length > 0 && $(this).data('field-regex').length > 0 &&\n                        !$(this).val().match($(this).data('field-regex'))\n                    ) {\n                        //if (debugJavascript === true) console.log($(this))\n                        errorExit = true;\n                        reason = 'regex';\n                        return false;\n                    }\n                });\n                if (errorExit === true) {\n                    toastr.remove();\n                    if (reason === 'regex') {\n                        toastr.error(\n                            '<?php echo langHdl('error_field_regex'); ?>',\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        toastr.error(\n                            '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    }\n                    return false;\n                }\n                    \n                //prepare data\n                var data = {\n                    'anyone_can_modify': $('#form-item-anyoneCanModify').is(':checked') ? 1 : 0,\n                    'complexity_level': parseInt($('#form-item-password-complex').val()),\n                    'description': formDescription,\n                    'diffusion_list': diffusion,\n                    'diffusion_list_names': diffusionNames,\n                    'folder': parseInt($('#form-item-folder').val()),\n                    'email': formEmail,\n                    'fields': fields,\n                    'folder_is_personal': store.get('teampassItem').IsPersonalFolder === 1 ? 1 : 0,\n                    'id': store.get('teampassItem').id,\n                    'label': formLabel,\n                    'login': DOMPurify.sanitize($('#form-item-login').val()),\n                    'pw': $('#form-item-password').val(),\n                    'restricted_to': restriction,\n                    'restricted_to_roles': restrictionRole,\n                    'tags': formTags,\n                    'template_id': parseInt($('input.form-check-input-template:checkbox:checked').data('category-id')),\n                    'to_be_deleted_after_date': ($('#form-item-deleteAfterDate').length !== 0 &&\n                        $('#form-item-deleteAfterDate').val() !== '') ? $('#form-item-deleteAfterDate').val() : '',\n                    'to_be_deleted_after_x_views': ($('#form-item-deleteAfterShown').length !== 0 &&\n                            $('#form-item-deleteAfterShown').val() !== '' && $('#form-item-deleteAfterShown').val() >= 1) ?\n                        parseInt($('#form-item-deleteAfterShown').val()) : '',\n                    'url': formUrl,\n                    'user_id': parseInt('<?php echo $_SESSION['user_id']; ?>'),\n                    'uploaded_file_id': store.get('teampassApplication').uploadedFileId === undefined ? '' : store.get('teampassApplication').uploadedFileId,\n                    'fa_icon': formIcon,\n                };\n                if (debugJavascript === true) {\n                    console.log('SAVING DATA');\n                    console.log(data);\n                }\n\n                // Inform user\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('opening_folder'); ?><i class=\"fas fa-circle-notch fa-spin ml-2\"></i>'\n                );\n\n                // CLear tempo var\n                store.update(\n                    'teampassApplication',\n                    function(teampassApplication) {\n                        teampassApplication.uploadedFileId = '';\n                    }\n                );\n\n                //Send query\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: $('#form-item-button-save').data('action'),\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        //decrypt data\n                        try {\n                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                        } catch (e) {\n                            // error\n                            $(\"#div_loading\").addClass(\"hidden\");\n                            //requestRunning = false;\n                            $(\"#div_dialog_message_text\").html(\"An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />\" + data);\n                            $(\"#div_dialog_message\").dialog(\"open\");\n\n                            toastr.remove();\n                            toastr.error(\n                                'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            return false;\n                        }\n                        if (debugJavascript === true) console.log('RETURNED DATA');\n                        if (debugJavascript === true) console.log(data);\n                        if (data.error === true) {\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            return false;\n                        } else {\n                            // Refresh tree\n                            if ($('#form-item-button-save').data('action') === 'update_item') {\n                                if ($('#form-item-folder').val() !== '' &&\n                                    originalFolderId !== $('#form-item-folder').val()\n                                ) {\n                                    refreshTree($('#form-item-folder').val(), false);\n                                }\n                                // Send query to confirm attachments\n                                var data = {\n                                    'item_id': store.get('teampassItem').id,\n                                }\n                                $.post(\n                                    \"sources/items.queries.php\", {\n                                        type: 'confirm_attachments',\n                                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                                        key: '<?php echo $_SESSION['key']; ?>'\n                                    }\n                                );\n                            } else {\n                                refreshTree($('#form-item-folder').val(), true);\n                            }\n\n                            // Refresh list of items inside the folder\n                            ListerItems($('#form-item-folder').val(), '', 0);\n\n                            // Inform user\n                            toastr.info(\n                                '<?php echo langHdl('success'); ?>',\n                                '', {\n                                    timeOut: 1000\n                                }\n                            );\n\n                            // Close\n                            userDidAChange = false;\n                            userUploadedFile = false;\n\n                            closeItemDetailsCard();\n                            /*\n                            // Hide all\n                            $('.form-item, .form-item-action, .form-folder-action, .item-details-card, #folders-tree-card, #card-item-expired').addClass('hidden');\n\n                            // Show expected one\n                            $(store.get('teampassUser').previousView).removeClass('hidden');\n                            */\n                        }\n                    }\n                );\n            }\n        } else if (userUploadedFile === true) {\n            // Send query to confirm attachments\n            var data = {\n                'item_id': store.get('teampassItem').id,\n            }\n\n            $.post(\n                \"sources/items.queries.php\", {\n                    type: 'confirm_attachments',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                }\n            );\n\n            store.update(\n                'teampassItem',\n                function(teampassItem) {\n                    teampassItem.isNewItem = 0\n                }\n            );\n\n            // Inform user\n            toastr.info(\n                '<?php echo langHdl('done'); ?>',\n                '', {\n                    timeOut: 1000\n                }\n            );\n\n            // Close\n            userUploadedFile = false;\n            closeItemDetailsCard();\n        } else {\n            if (debugJavascript === true) console.info('NOTHING TO SAVE');\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('nothing_to_save'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        }\n    });\n    //->\n\n\n    //autocomplete for TAGS\n    $(\"#form-item-tags\")\n        //.focus()\n        .bind(\"keydown\", function(event) {\n            if (event.keyCode === $.ui.keyCode.TAB &&\n                $(this).data(\"autocomplete\").menu.active) {\n                event.preventDefault();\n            }\n        })\n        .autocomplete({\n            source: function(request, response) {\n                $.getJSON(\"sources/items.queries.php?type=autocomplete_tags&t=1\", {\n                    term: extractLast(request.term)\n                }, response);\n            },\n            focus: function() {\n                // prevent value inserted on focus\n                return false;\n            },\n            search: function() {\n                var term = extractLast(this.value);\n            },\n            select: function(event, ui) {\n                var terms = split(this.value);\n                // remove the current input\n                terms.pop();\n                // add the selected item\n                terms.push(ui.item.value);\n                // add placeholder to get the comma-and-space at the end\n                terms.push(\"\");\n                this.value = terms.join(\" \");\n\n                return false;\n            }\n        });\n\n    // Warn in case of limited search\n    $(document).on('click', '#limited-search', function() {\n        if ($(this).is(\":checked\") === true) {\n            $('#find_items').css({\n                \"background-color\": \"#f56954\"\n            });\n        } else {\n            $('#find_items').css({\n                \"background-color\": \"#FFF\"\n            })\n        }\n    });\n\n\n    function showItemEditForm(selectedFolderId) {\n        if (debugJavascript === true) console.info('SHOW EDIT ITEM ' + selectedFolderId);\n        \n        //$.when(\n        //    getPrivilegesOnItem(selectedFolderId, 0)\n        //).then(function() {\n        // Now read\n        if (store.get('teampassItem').error === true) {\n            toastr.remove();\n            toastr.error(\n                store.get('teampassItem').message,\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n        } else {\n            $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n            $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n            // Show edition form\n            $('.form-item, #form-item-attachments-zone')\n                .removeClass('hidden');\n            $('.item-details-card, .form-item-copy, #form-item-password-options, .form-item-action, #item-details-card-categories, #folders-tree-card, .columns-position')\n                .addClass('hidden');\n\n            // Initial 'user did a change'\n            userDidAChange = false;\n\n            // Force update of simplepassmeter\n            $('#form-item-password').pwstrength(\"forceUpdate\");\n            $('#form-item-label').focus();\n\n            // Set type of action\n            $('#form-item-button-save').data('action', 'update_item');\n\n            // Does this folder contain Custom Fields\n            if (store.get('teampassItem').hasCustomCategories.length > 0) {\n                $('#form-item-field').removeClass('hidden');\n                $.each(store.get('teampassItem').hasCustomCategories, function(i, category) {\n                    $('#form-item-category-' + category).removeClass('hidden');\n                })\n            } else {\n                $('#form-item-field, .form-item-category').addClass('hidden');\n            }            \n\n            // is user allowed to edit this item - overpass readonly folder\n            if (typeof store.get('teampassApplication').itemsList !== 'undefined') {\n                var itemsList = JSON.parse(store.get('teampassApplication').itemsList);\n                userItemRight = itemsList[store.get('teampassItem').id]?.rights;\n                if (userItemRight && userItemRight > 40 && $('#form-item-folder option:selected').attr('disabled') === 'disabled') {\n                    $('#form-item-folder option:selected').removeAttr('disabled');\n                }\n            }\n\n            toastr.remove();\n            // ---\n        }\n        //});\n    }\n\n\n    /**\n     * Start items search\n     */\n    function searchItems(criteria) {\n        if (criteria !== '') {\n            // stop items loading (if on-going)\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 1;\n                }\n            );\n\n            // wait\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('searching'); ?>'\n            );\n\n            // clean\n            $('#id_label, #id_desc, #id_pw, #id_login, #id_email, #id_url, #id_files, #id_restricted_to ,#id_tags, #id_kbs, .fields_div, .fields, #item_extra_info').html('');\n            $('#button_quick_login_copy, #button_quick_pw_copy').addClass('hidden');\n            $('#teampass_items_list').html('');\n\n            // Continu the list of results\n            finishingItemsFind(\n                'search_for_items',\n                $('#limited-search').is(\":checked\") === true ? store.get('teampassApplication').selectedFolder : false,\n                criteria,\n                0\n            );\n        }\n    }\n\n    /**\n     * \n     */\n    function finishingItemsFind(type, limited, criteria, start) {\n        // send query\n        $.get(\n            'sources/find.queries.php', {\n                type: type,\n                limited: limited,\n                search: criteria,\n                start: start,\n                length: 10,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                var pwd_error = '',\n                    icon_login,\n                    incon_link,\n                    icon_pwd,\n                    icon_favorite;\n\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'find.queries.php', type);\n                if (debugJavascript === true) console.log(data);\n\n                // Ensure correct div is not hidden\n                $('#info_teampass_items_list').addClass('hidden');\n                $('#table_teampass_items_list').removeClass('hidden');\n\n                // Show Items list\n                sList(data.html_json);\n\n                if (data.start !== -1 && (data.start <= data.total)) {\n                    // Continu the list of results\n                    finishingItemsFind(\n                        'search_for_items',\n                        $('#limited-search').is(\":checked\") === true ?\n                        store.get('teampassApplication').selectedFolder : false,\n                        criteria,\n                        data.start\n                    )\n                } else {\n                    toastr.remove();\n                    toastr.info(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    // Do some post treatments\n                    $('#form-folder-path').html('');\n                    $('#find_items').val('');\n\n                    // Do drag'n'drop for the folders\n                    prepareFolderDragNDrop();\n\n                    adjustElemsSize();\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function refreshVisibleFolders(forceRefreshCache = false) {\n        var data = {\n            'force_refresh_cache': forceRefreshCache,\n        }\n        if (debugJavascript === true) {\n            console.log('Refresh visible folders');\n            console.log(data);\n        }\n\n        $.post(\n            'sources/items.queries.php', {\n                type: 'refresh_visible_folders',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'refresh_visible_folders');\n                if (debugJavascript === true) {\n                    console.log('TREE');\n                    console.log(data);\n                }\n                //check if format error\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Build html lists\n                    var html_visible = '',\n                        html_full_visible = '',\n                        html_active_visible = '',\n                        indentation = '',\n                        disabled = '';\n\n                    if (typeof data.html_json === 'undefined' || typeof data.html_json.folders === 'undefined') {\n                        $('#jstree').html('<div class=\"alert alert-warning mt-3 mr-1 ml-1\"><i class=\"fas fa-exclamation-triangle mr-2\"></i>' +\n                            '<?php echo langHdl('no_data_to_display'); ?>' +\n                            '</div>');\n                        //return false;\n                    } else {\n                        refreshFoldersInfo(data.html_json.folders, 'clear');\n                    }\n\n                    // Shall we show the root folder\n                    if (data.html_json.can_create_root_folder === 1) {\n                        html_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                        html_full_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                        html_active_visible = '<option value=\"0\"><?php echo langHdl('root'); ?></option>';\n                    } else {\n                        html_visible = '<option value=\"0\" disabled=\"disabled\"><?php echo langHdl('root'); ?></option>';\n                    }\n\n                    //\n                    $.each(data.html_json.folders, function(i, value) {\n                        // Prepare options lists\n                        html_visible += '<option value=\"' + value.id + '\"' +\n                            ((value.disabled === 1) ? ' disabled=\"disabled\"' : '') +\n                            ' data-parent-id=\"' + value.parent_id + '\">' +\n                            '&nbsp;'.repeat(value.level) +\n                            value.title + (value.path !== '' ? ' [' + value.path + ']' : '') + '</option>';\n                    });\n\n                    // Append new list\n                    $('#form-item-folder, #form-item-copy-destination, #form-folder-add-parent,' +\n                            '#form-folder-delete-selection, #form-folder-copy-source, #form-folder-copy-destination')\n                        .find('option')\n                        .remove()\n                        .end()\n                        .append(html_visible);\n                    $(\".no-root option[value='0']\").remove();\n\n                    if (debugJavascript === true) {\n                        console.info('HTML VISIBLE:')\n                        console.log(html_visible);\n                    }\n\n                    // Store in teampassUser\n                    store.update(\n                        'teampassUser',\n                        function(teampassUser) {\n                            teampassUser.folders = html_visible;\n                        }\n                    );\n\n\n                    // remove ROOT option if exists\n                    $('#form-item-copy-destination option[value=\"0\"]').remove();\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n            }\n        );\n    }\n\n\n    /**\n     * Get more info about folders (Categories)\n     *\n     * @return void\n     */\n    function refreshFoldersInfo(folders, action) {\n        var action = action || '',\n            sending = '';\n\n        if (null === folders) return false;\n\n        if (action === 'clear') {\n            sending = JSON.stringify(folders.map(a => parseInt(a.id)));\n        } else if (action === 'update') {\n            sending = JSON.stringify([folders]);\n        }\n\n        if (debugJavascript === true) {\n            console.info('INPUTS for refresh_folders_other_info');\n            console.log(sending);\n        }\n        \n        $.post(\n            'sources/items.queries.php', {\n                type: 'refresh_folders_other_info',\n                data: sending,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'refresh_folders_other_info');\n                if (debugJavascript === true) {\n                    console.info('RESULTS for refresh_folders_other_info');\n                    console.log(data);\n                }\n\n                //check if format error\n                if (typeof data !== 'undefined' && data.error !== true) {\n                    // Store in session\n                    if (action === 'clear') {\n                        // Handle the data\n                        $.each(folders, function(index, item) {\n                            if (typeof data.result !== 'undefined' && typeof data.result[item.id] !== 'undefined') {\n                                folders[index]['categories'] = data.result[item.id].categories;\n                                folders[index]['complexity'] = data.result[item.id].complexity;\n                                folders[index]['visibilityRoles'] = data.result[item.id].visibilityRoles;\n                            }\n                        });\n                        // Stare the data\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.foldersList = folders;\n                            }\n                        );\n                    } else if (action === 'update') {\n                        // Store the data\n                        var currentFoldersList = store.get('teampassApplication').foldersList;\n                        $.each(currentFoldersList, function(index, item) {\n                            if (item.id === parseInt(folders) && typeof data.result[folders] !== 'undefined') {\n                                currentFoldersList[index].categories = data.result[folders].categories;\n                                currentFoldersList[index].complexity = data.result[folders].complexity;\n                                currentFoldersList[index].visibilityRoles = data.result[folders].visibilityRoles;\n\n                                store.update(\n                                    'teampassApplication',\n                                    function(teampassApplication) {\n                                        foldersList = currentFoldersList;\n                                    }\n                                );\n                                return true;\n                            }\n                        });\n\n                    }\n                } else {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n                toastr.remove();\n            }\n        );\n    }\n\n\n    /*\n     * builds the folders tree\n     */\n    function refreshTree(node_to_select, do_refresh, refresh_visible_folders) {\n        do_refresh = do_refresh || ''\n        node_to_select = node_to_select || '';\n        refresh_visible_folders = refresh_visible_folders || true;\n\n        if (refresh_visible_folders !== true) {\n            $('#jstree').jstree('deselect_all');\n            $('#jstree').jstree('select_node', '#li_' + groupe_id);\n            return false;\n        }\n\n        if (do_refresh === true || store.get('teampassApplication').jstreeForceRefresh === 1) {\n            $('#jstree').jstree(true).refresh();\n        }\n\n        if (node_to_select !== '') {\n            $('#jstree').jstree('deselect_all');\n\n            $('#jstree')\n                .one('refresh.jstree', function(e, data) {\n                    data.instance.select_node('#li_' + node_to_select);\n                });\n        }\n\n        $(this).delay(500).queue(function() {\n            refreshVisibleFolders(true);\n            $(this).dequeue();\n        });\n    }\n\n    /**\n     * \n     */\n    function ListerItems(groupe_id, restricted, start, stop_listing_current_folder) {\n        var me = $(this);\n        stop_listing_current_folder = stop_listing_current_folder || '0';\n        if (debugJavascript === true) console.log('LIST OF ITEMS FOR FOLDER ' + groupe_id)\n        // Exit if no folder is selected\n        if (groupe_id === undefined) return false;\n\n        // case where we should stop listing the items\n        if (store.get('teampassApplication') !== undefined && store.get('teampassApplication').itemsListStop === 1) {\n            //requestRunning = false;\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0;\n                }\n            );\n        }\n\n        //Evaluate number of items to display - depends on screen height\n        //adapt to the screen height\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.itemsShownByQuery = Math.max(Math.round((screenHeight - 450) / 23), 2);\n            }\n        );\n\n        if (stop_listing_current_folder === 1) {\n            me.data('requestRunning', false);\n            // Store listing criteria\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListFolderId = parseInt(groupe_id),\n                        teampassApplication.itemsListRestricted = restricted,\n                        teampassApplication.itemsListStart = start,\n                        teampassApplication.itemsListStop = 0\n                }\n            );\n        } else {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0\n                }\n            );\n        }\n\n\n        // prevent launch of similar query in case of doubleclick\n        if (requestRunning === true) {\n            return false;\n        }\n        requestRunning = true;\n\n        // Hide any info\n        $('#info_teampass_items_list').addClass('hidden');\n\n        if (groupe_id !== undefined || groupe_id !== '') {\n            //refreshTree(groupe_id);\n            if (query_in_progress != 0 && query_in_progress != groupe_id && request !== undefined) {\n                request.abort(); //kill previous query if needed\n            }\n            query_in_progress = groupe_id;\n            if (start == 0) {\n                //clean form\n                $('#teampass_items_list, #items_folder_path').html('');\n            }\n\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.selectedFolder = parseInt(groupe_id),\n                    teampassApplication.itemsList = ''\n                }\n            );\n\n            if ($('.tr_fields') !== undefined) {\n                $('.tr_fields, .newItemCat, .editItemCat').addClass('hidden');\n            }\n\n            // Inform user\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('opening_folder'); ?><i class=\"fas fa-circle-notch fa-spin ml-2\"></i>'\n            );\n\n            // clear storage \n            store.update(\n                'teampassUser',\n                function(teampassUser) {\n                    teampassUser.itemsList = '';\n                }\n            );\n\n            // Prepare data to be sent\n            var dataArray = {\n                id: store.get('teampassApplication').selectedFolder,\n                restricted: restricted === \"\" ? \"\" : restricted,\n                start: start !== undefined ? start : 0,\n                uniqueLoadData: store.get('teampassApplication').queryUniqueLoad !== undefined ? store.get('teampassApplication').queryUniqueLoad : \"\",\n                nb_items_to_display_once: store.get('teampassApplication').itemsShownByQuery,\n            };\n\n            if (debugJavascript === true) {\n                console.log('Do list of items in folder with next parameters:');\n                console.log(JSON.stringify(dataArray));\n            }\n            \n            //ajax query\n            var request = $.post('sources/items.queries.php', {\n                    type: 'do_items_list_in_folder',\n                    data: prepareExchangedData(JSON.stringify(dataArray), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>',\n                },\n                function(retData) {\n                    //get data\n                    data = decodeQueryReturn(retData, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'do_items_list_in_folder');\n\n                    if (debugJavascript === true) {\n                        console.log('LIST ITEMS');\n                        console.log(data);\n                    }\n\n                    // reset doubleclick prevention\n                    requestRunning = false;\n\n                    // manage not allowed\n                    if (data.error === true) {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        return false;\n                    }\n\n                    // Hide New button if restricted folder\n                    if (data.access_level === 10) {\n                        $('#btn-new-item').addClass('hidden');\n                    } else {\n                        $('#btn-new-item').removeClass('hidden');\n                    }\n\n                    // to be done only in 1st list load\n                    if (data.list_to_be_continued === 'end') {\n                        var initialQueryData = $.parseJSON(data.uniqueLoadData);\n\n                        // Update hidden variables\n                        store.update(\n                            'teampassItem',\n                            function(teampassItem) {\n                                teampassItem.IsPersonalFolder = parseInt(data.IsPersonalFolder),\n                                    teampassItem.hasAccessLevel = parseInt(data.access_level),\n                                    teampassItem.folderComplexity = parseInt(data.folder_complexity),\n                                    teampassItem.hasCustomCategories = data.categoriesStructure\n                            }\n                        );\n                        \n\n                        // display path of folders\n                        if ((initialQueryData.path.length > 0)) {\n                            $('#form-folder-path')\n                                .html('')\n                                .append(rebuildPath(initialQueryData.path));\n                        } else {\n                            $('#form-folder-path').html('');\n                        }\n\n                        /*\n                        // PSK is requested but not set\n                        if (data.folder_requests_psk === 1\n                            && (store.get('teampassUser').pskSetForSession === ''\n                            || store.get('teampassUser').pskSetForSession === undefined)\n                        ) {\n                            showPersonalSKDialog();\n                        }\n                        */\n\n                        // show correct fodler in Tree\n                        if ($('#jstree').jstree('get_selected', true)[0] !== undefined &&\n                            'li_' + groupe_id !== $('#jstree').jstree('get_selected', true)[0].id\n                        ) {\n                            $('#jstree').jstree('deselect_all');\n                            $('#jstree').jstree('select_node', '#li_' + groupe_id);\n                        }\n\n                        // Delete existing clipboard\n                        if (clipboardForPassword) {\n                            clipboardForPassword.destroy();\n                        }\n                        if (clipboardForLogin) {\n                            clipboardForLogin.destroy();\n                        }\n\n                        // Prepare clipboard items\n                        clipboardForLogin = new ClipboardJS('.fa-clickable-login');\n                        clipboardForLogin.on('success', function(e) {\n                            toastr.info(\n                                '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                '', {\n                                    timeOut: 2000,\n                                    positionClass: 'toast-top-right',\n                                    progressBar: true\n                                }\n                            );\n                            e.clearSelection();\n                        });\n\n                        // Prepare clipboard for PAssword\n                        // This will request a query to server to get the pwd\n                        clipboardForPassword = new ClipboardJS('.fa-clickable-password', {\n                            text: function(trigger) {\n                                // Send query and get password\n                                var result = '',\n                                    error = false;\n\n                                // Warn user that it starts\n                                toastr.remove();\n                                toastr.info(\n                                    '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>'\n                                );\n\n                                $.ajax({\n                                    type: \"POST\",\n                                    async: false,\n                                    url: 'sources/items.queries.php',\n                                    data: 'type=show_item_password&item_id=' + trigger.getAttribute('data-item-id') +\n                                        '&key=<?php echo $_SESSION['key']; ?>',\n                                    dataType: \"\",\n                                    success: function(data) {\n                                        //decrypt data\n                                        try {\n                                            data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                                        } catch (e) {\n                                            // error\n                                            toastr.remove();\n                                            toastr.warning(\n                                                '<?php echo langHdl('no_item_to_display'); ?>'\n                                            );\n                                            return false;\n                                        }\n                                        if (data.error === true) {\n                                            error = true;\n                                        } else {\n                                            if (data.password_error !== '') {\n                                                error = true;\n                                            } else {\n                                                result = atob(data.password).utf8Decode();\n                                            }\n                                        }\n\n                                        // Remove cog\n                                        toastr.remove();\n                                    }\n                                });\n                                return result;\n                            }\n                        });\n                        clipboardForPassword.on('success', function(e) {\n                            itemLog(\n                                'at_password_copied',\n                                e.trigger.dataset.itemId,\n                                e.trigger.dataset.itemLabel\n                            );\n                            \n                            // Warn user about clipboard clear\n                            if (store.get('teampassSettings').clipboard_life_duration === undefined || parseInt(store.get('teampassSettings').clipboard_life_duration) === 0) {\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        positionClass: 'toast-top-right',\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                toastr.remove();\n                                toastr.warning(\n                                    '<?php echo langHdl('clipboard_will_be_cleared'); ?>',\n                                    '', {\n                                        timeOut: store.get('teampassSettings').clipboard_life_duration * 1000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Set clipboard eraser\n                                clearClipboardTimeout(\n                                    store.get('teampassSettings').clipboard_life_duration\n                                );\n                            }\n\n                            e.clearSelection();\n                        });\n                    } else if (data.error === 'not_authorized') {\n                        $('#items_folder_path').html('<i class=\"fas fa-folder-open-o\"></i>&nbsp;' + rebuildPath(data.arborescence));\n                    } else {\n                        // Store query results\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.queryUniqueLoad = data.uniqueLoadData;\n                            }\n                        );\n                        if ($('#items_loading_progress').length == 0) {\n                            $('#items_list_loader').after('<span id=\"items_loading_progress\">' + Math.round(data.next_start * 100 / data.counter_full, 0) + '%</span>');\n                        } else {\n                            $('#items_loading_progress').html(Math.round(data.next_start * 100 / data.counter_full, 0) + '%');\n                        }\n                    }\n                    //-----\n                    if (data.array_items !== undefined &&\n                        data.array_items.length === 0 &&\n                        $('#teampass_items_list').html() === ''\n                    ) {\n                        // Show warning to user\n                        $('#info_teampass_items_list')\n                            .html('<div class=\"alert alert-info text-center col col-10\" role=\"alert\">' +\n                                '<i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('no_item_to_display'); ?></b>' +\n                                '</div>')\n                            .removeClass('hidden');\n                    }\n\n                    if (data.error === 'is_pf_but_no_saltkey') {\n                        //warn user about his saltkey\n                        toastr.remove();\n                        toastr.warning(\n                            '<?php echo langHdl('home_personal_saltkey_label'); ?>',\n                            '', {\n                                timeOut: 10000\n                            }\n                        );\n                        return false;\n                    } else if (data.error === 'not_authorized' || data.access_level === '') {\n                        // Show warning to user\n                        $('#info_teampass_items_list')\n                            .html('<div class=\"alert alert-info text-center col col-lg-10\" role=\"alert\">' +\n                                '<i class=\"fas fa-warning mr-2\"></i><?php echo langHdl('not_allowed_to_see_pw'); ?></b>' +\n                                '</div>')\n                            .removeClass('hidden');\n\n                    } else if ((store.get('teampassApplication').userIsReadOnly === 1) //&& data.folder_requests_psk == 0\n                        ||\n                        data.access_level === 10\n                    ) {\n                        //readonly user\n                        $('#item_details_no_personal_saltkey, #item_details_nok').addClass('hidden');\n                        $('#item_details_ok, #items_list').removeClass('hidden');\n                        //$('#more_items').remove();\n\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.bypassComplexityOnCreation = parseInt(data.bloquer_creation_complexite);\n                                teampassApplication.bypassComplexityOnEdition = parseInt(data.bloquer_modification_complexite);\n                                //teampassApplication.personalSaltkeyRequired = parseInt(data.saltkey_is_required);\n                            }\n                        );\n\n                        // show items\n                        sList(data.html_json);\n\n                        if (data.list_to_be_continued === 'yes') {\n                            //set next start for query\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = parseInt(data.next_start);\n                                }\n                            );\n                        } else {\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = data.list_to_be_continued;\n                                }\n                            );\n                            $('.card-item-category').addClass('hidden');\n                        }\n\n                        proceed_list_update(stop_listing_current_folder);\n                    } else {\n                        //Display items\n                        $('#item_details_no_personal_saltkey, #item_details_nok').addClass('hidden');\n                        $('#item_details_ok, #items_list').removeClass('hidden');\n\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.bypassComplexityOnCreation = parseInt(data.bloquer_creation_complexite);\n                                teampassApplication.bypassComplexityOnEdition = parseInt(data.bloquer_modification_complexite);\n                                //teampassApplication.personalSaltkeyRequired = parseInt(data.saltkey_is_required);\n                            }\n                        );\n\n                        // show items\n                        sList(data.html_json);\n\n                        // Prepare next iteration if needed\n                        if (data.list_to_be_continued === 'yes') {\n                            //set next start for query\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = parseInt(data.next_start);\n                                }\n                            );\n                        } else {\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.itemsListStart = data.list_to_be_continued;\n                                }\n                            );\n                            $('.card-item-category').addClass('hidden');\n\n                            if (debugJavascript === true) {\n                                console.log('Liste complete des items')\n                                console.log(JSON.parse(store.get('teampassApplication').itemsList));\n                            }\n                        }\n\n                        proceed_list_update(stop_listing_current_folder);\n                    }\n                }\n            );\n        }\n    }\n\n    function sList(listOfItems) {\n        if (debugJavascript === true) {\n            console.log(listOfItems);\n        }\n        var counter = 0,\n            prevIdForNextItem = -1;\n\n        // Manage store\n        if (store.get('teampassApplication').itemsList === '' || store.get('teampassApplication').itemsList === undefined) {\n            var stored_datas = listOfItems;\n        } else {\n            var stored_datas = String(JSON.parse(store.get('teampassApplication').itemsList)).concat(listOfItems);\n        }\n        store.update(\n            'teampassApplication',\n            function(teampassApplication) {\n                teampassApplication.itemsList = JSON.stringify(stored_datas);\n            }\n        );\n        \n        $.each(listOfItems, function(i, value) {\n            var new_line = '',\n                pwd_error = '',\n                icon_all_can_modify = '',\n                icon_cannot_see = '',\n                icon_login = '',\n                icon_link = '',\n                icon_pwd = '',\n                icon_favorite = '',\n                item_flag = '',\n                item_grippy = '',\n                visible_by_user = '';\n\n            counter += 1;\n\n            // ENsure numbers are ints\n            value.anyone_can_modify = parseInt(value.anyone_can_modify);\n            value.canMove = parseInt(value.canMove);\n            value.expired = parseInt(value.expired);\n            value.is_favorite = parseInt(value.is_favorite);\n            value.is_result_of_search = parseInt(value.is_result_of_search);\n            value.item_id = parseInt(value.item_id);\n            value.open_edit = parseInt(value.open_edit);\n            value.rights = parseInt(value.rights);\n            value.tree_id = parseInt(value.tree_id);\n            value.display = parseInt(value.display);\n            value.display_item = parseInt(value.display_item);\n            value.enable_favourites = parseInt(value.enable_favourites);\n\n            // Check access restriction\n            if (value.rights > 0) {\n                // Should I populate previous item with this new id\n                if (debugJavascript === true) {\n                    console.log('current id: '+value.item_id);\n                    console.log(prevIdForNextItem);\n                }\n                if (prevIdForNextItem !== -1) {\n                    $('#list-item-row_' + value.item_id).attr('data-next-item-id', prevIdForNextItem.item_id);\n                    $('#list-item-row_' + value.item_id).attr('data-next-item-label', value.label);\n                }\n                \n                // Prepare anyone can modify icon\n                if (value.anyone_can_modify === 1 || value.open_edit === 1) {\n                    icon_all_can_modify = '<span class=\"fa-stack fa-clickable pointer infotip list-item-clicktoedit mr-2\" title=\"<?php echo langHdl('edit'); ?>\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-pen fa-stack-1x fa-inverse\"></i></span>';\n                }\n\n                // Prepare mini icons\n                if (store.get('teampassSettings') !== undefined && parseInt(store.get('teampassSettings').copy_to_clipboard_small_icons) === 1 &&\n                    value.rights > 10\n                ) {\n                    // Login icon\n                    if (value.login !== '') {\n                        icon_login = '<span class=\"fa-stack fa-clickable fa-clickable-login pointer infotip mr-2\" title=\"<?php echo langHdl('item_menu_copy_login'); ?>\" data-clipboard-text=\"' + sanitizeString(value.login) + '\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-user fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                    // Pwd icon\n                    if (value.pw_status !== 'pw_is_empty' && value.pw_status !== 'encryption_error') {\n                        icon_pwd = '<span class=\"fa-stack fa-clickable fa-clickable-password pointer infotip mr-2\" title=\"<?php echo langHdl('item_menu_copy_pw'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-label=\"' + value.label + '\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-key fa-stack-1x fa-inverse\"></i></span>';\n                    }\n\n                    // Now check if pwd is empty. If it is then warn user\n                    if (value.pw_status === 'pw_is_empty') {\n                        pwd_error = '<span class=\"fa-stack fa-clickable fa-clickable-password pointer infotip mr-2\" title=\"<?php echo langHdl('password_is_empty'); ?>\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-exclamation-triangle text-warning fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                }\n\n                // Link icon\n                if (value.link !== '') {\n                    icon_link = '<span class=\"fa-stack fa-clickable pointer infotip mr-2\" title=\"<?php echo langHdl('open_website'); ?>\"><a href=\"' + sanitizeString(value.link) + '\" target=\"_blank\" class=\"no-link\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-link fa-stack-1x fa-inverse\"></i></a></span>';\n                }\n\n                // Prepare Favorite icon\n                if (store.get('teampassSettings') !== undefined && parseInt(store.get('teampassSettings').enable_favourites) === 1 &&\n                    value.rights > 10\n                ) {\n                    if (value.is_favourited === 1) {\n                        icon_favorite = '<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('unfavorite'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-favourited=\"1\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"fas fa-star fa-stack-1x fa-inverse text-warning\"></i></span>';\n                    } else {\n                        icon_favorite = '<span class=\"fa-stack fa-clickable item-favourite pointer infotip mr-2\" title=\"<?php echo langHdl('favorite'); ?>\" data-item-id=\"' + value.item_id + '\" data-item-favourited=\"0\"><i class=\"fas fa-circle fa-stack-2x\"></i><i class=\"far fa-star fa-stack-1x fa-inverse\"></i></span>';\n                    }\n                }\n\n                // Prepare Description\n                if (value.desc !== '') {\n                    value.desc = ' <span class=\"text-secondary small\">- ' + value.desc + '</span>';\n                }\n\n                $('#teampass_items_list').append(\n                    '<tr class=\"list-item-row' + (value.canMove === 1 ? ' is-draggable' : '') + '\" id=\"list-item-row_' + value.item_id + '\" data-item-edition=\"' + value.open_edit + '\" data-item-id=\"' + value.item_id + '\" data-item-sk=\"' + value.sk + '\" data-item-expired=\"' + value.expired + '\" data-item-rights=\"' + value.rights + '\" data-item-display=\"' + value.display + '\" data-item-open-edit=\"' + value.open_edit + '\" data-item-tree-id=\"' + value.tree_id + '\" data-is-search-result=\"' + value.is_result_of_search + '\" data-label=\"' + escape(value.label) + '\">' +\n                    '<td class=\"list-item-description\" style=\"width: 100%;\">' +\n                    // Show user a grippy bar to move item\n                    (value.canMove === 1  ? '<i class=\"fas fa-ellipsis-v mr-2 dragndrop\"></i>' : '') + //&& value.is_result_of_search === 0\n                    // Show user a ban icon if expired\n                    (value.expired === 1 ? '<i class=\"far fa-calendar-times mr-2 text-warning infotip\" title=\"<?php echo langHdl('not_allowed_to_see_pw_is_expired'); ?>\"></i>' : '') +\n                    // Show user that Item is not accessible\n                    (value.rights === 10 ? '<i class=\"far fa-eye-slash fa-xs mr-2 text-primary infotip\" title=\"<?php echo langHdl('item_with_restricted_access'); ?>\"></i>' : '') +\n                    // Show user that password is badly encrypted\n                    (value.pw_status === 'encryption_error' ? '<i class=\"fas fa-exclamation-triangle fa-xs text-danger infotip mr-1\" title=\"<?php echo langHdl('pw_encryption_error'); ?>\"></i>' : '') +\n                    // Show item fa_icon if set\n                    (value.fa_icon !== '' ? '<i class=\"'+value.fa_icon+' mr-1\"></i>' : '') +\n                    // Prepare item info\n                    '<span class=\"list-item-clicktoshow' + (value.rights === 10 ? '' : ' pointer') + '\" data-item-id=\"' + value.item_id + '\">' +\n                    '<span class=\"list-item-row-description' + (value.rights === 10 ? ' font-weight-light' : '') + '\">' + value.label + '</span>' + (value.rights === 10 ? '' : value.desc) + '</span>' +\n                    '<span class=\"list-item-actions hidden\">' +\n                    (value.rights === 10 ?\n                        '<span class=\"fa-stack fa-clickable fa-clickable-access-request pointer infotip mr-2\" title=\"<?php echo langHdl('need_access'); ?>\"><i class=\"fas fa-circle fa-stack-2x text-danger\"></i><i class=\"far fa-handshake fa-stack-1x fa-inverse\"></i></span>' :\n                        pwd_error + icon_all_can_modify + icon_login + icon_pwd + icon_link + icon_favorite) +\n                    '</span>' +\n                    (value.folder !== undefined ?\n                        '<br><span class=\"text-secondary small font-italic pointer open-folder\" data-tree-id=\"' +\n                        value.tree_id + '\"\">[' + value.folder + ']</span>' : '') +\n                    '</td>' +\n                    '</tr>'\n                );\n\n                // Save id for usage\n                prevIdForNextItem = {\n                    'item_id' : value.item_id,\n                    'label': value.label,\n                };\n\n                //---------------------\n            }\n        });\n\n        // Sort entries\n        var $tbody = $('#teampass_items_list');\n        $tbody.find('tr').sort(function(a, b) {\n            var tda = $(a).find('.list-item-row-description').text();\n            var tdb = $(b).find('.list-item-row-description').text();\n            // if a < b return 1\n            return tda > tdb ? 1 :\n                tda < tdb ? -1 :\n                0;\n        }).appendTo($tbody);\n\n        // Trick for list with only one entry\n        if (counter === 1) {\n            $('#teampass_items_list')\n                .append('<tr class=\"row\"><td class=\"\">&nbsp;</td></tr>');\n        }\n        adjustElemsSize();\n\n        // Show tooltips\n        $('.infotip').tooltip();\n    }\n\n    $(document).on('click', '.open-folder', function() {\n        if ($(this).data('tree-id') !== undefined) {\n            if (debugJavascript === true) console.log($(this).data('tree-id'))\n\n            // Prepare\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListFolderId = parseInt($(this).data('tree-id'));\n                }\n            );\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.selectedFolder = parseInt($(this).data('tree-id'));\n                }\n            );\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStart = 0;\n                }\n            );\n\n            // Show\n            ListerItems(\n                $(this).data('tree-id'),\n                '',\n                0\n            );\n\n            $('#jstree').jstree('deselect_all');\n            $('#jstree').jstree('select_node', '#li_' + $(this).data('tree-id'));\n        }\n    });\n\n\n    function adjustElemsSize() {\n        // Adjust height of folders tree\n        if ($('#teampass_items_list').height() > (screenHeight - 215)) {\n            $('#jstree').height($('#teampass_items_list').height() + 75);\n        } else {\n            $('#jstree').height($(window).height() - 215);\n        }\n    }\n\n    /**\n     * Builds the HTML path\n     * @param  {[type]} data [description]\n     * @return {[type]}      [description]\n     */\n    function rebuildPath(data) {\n        var new_path = new_path_elem = '';\n        $.each((data), function(i, value) {\n            new_path_elem = '';\n            if (value['visible'] === 1) {\n                new_path_elem = ' class=\"pointer\" onclick=\"ListerItems(' + value['id'] + ', \\'\\', 0)\"';\n            }\n\n            new_path += '<li class=\"breadcrumb-item\" id=\"path_elem_' + value['id'] + '\"' + new_path_elem + '>' + value['title'] + '</li>';\n        });\n\n        return new_path;\n    }\n\n    /**\n\n     */\n    function proceed_list_update(stop_proceeding) {\n        stop_proceeding = stop_proceeding || '';\n\n        if (stop_proceeding === '1' ||\n            (store.get('teampassApplication').itemsListFolderId !== '' &&\n                store.get('teampassApplication').itemsListStart !== 'end')\n        ) {\n            // Clear storage\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.itemsListStop = 0;\n                }\n            );\n            // Perform listing\n            ListerItems(\n                store.get('teampassApplication').itemsListFolderId,\n                store.get('teampassApplication').itemsListRestricted,\n                store.get('teampassApplication').itemsListStart,\n                store.get('teampassApplication').itemsListStop\n            );\n            return false;\n        }\n\n        if (store.get('teampassApplication').itemsListStart !== 'end') {\n            //Check if nb of items do display > to 0\n            if (store.get('teampassApplication').itemsShownByQuery > 0) {\n                ListerItems(\n                    store.get('teampassApplication').selectedFolder,\n                    '',\n                    store.get('teampassApplication').itemsListStart\n                );\n            }\n        } else {\n            // Show tooltips\n            $('.infotip').tooltip();\n\n            // Update silently the info about the folder\n            refreshFoldersInfo(\n                store.get('teampassApplication').selectedFolder,\n                'update'\n            );\n            toastr.remove();\n            toastr.info(\n                '<?php echo langHdl('data_refreshed'); ?>',\n                '', {\n                    timeOut: 1000\n                }\n            );\n\n            // Do drag'n'drop for the folders\n            prepareFolderDragNDrop();\n        }\n    }\n\n\n    function checkAccess(itemId, treeId, userId)\n    {\n        var data = {\n            'itemId': parseInt(itemId),\n            'treeId': parseInt(treeId),\n            'userId': parseInt(userId),\n        };\n\n        //Send query\n        $.post(\n            'sources/items.queries.php', {\n                type: 'check_current_access_rights',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'show_details_item');\n                requestRunning = true;\n                if (debugJavascript === true) {\n                    console.log(\"DEBUG: checkAccess\");\n                    console.log(data);\n                }\n\n\n                return false;\n            }\n        );\n    }\n\n\n    /**\n     *\n     */\n    function Details(itemDefinition, actionType, hotlink = false) {\n        if (debugJavascript === true) console.info('EXPECTED ACTION on ' + itemDefinition + ' is ' + actionType + ' -- ')\n\n        // Init\n        if (hotlink === false) {\n            var itemId = parseInt($(itemDefinition).data('item-id')) || '';\n            var itemTreeId = parseInt($(itemDefinition).data('item-tree-id')) || '';\n            var itemSk = parseInt($(itemDefinition).data('item-sk')) || 0;\n            var itemExpired = parseInt($(itemDefinition).data('item-expired')) || '';\n            var itemRestricted = parseInt($(itemDefinition).data('item-restricted-id')) || '';\n            var itemDisplay = parseInt($(itemDefinition).data('item-display')) || 0;\n            var itemOpenEdit = parseInt($(itemDefinition).data('item-open-edit')) || 0;\n            var itemReload = parseInt($(itemDefinition).data('item-reload')) || 0;\n            var itemRights = parseInt($(itemDefinition).data('item-rights')) || 10;\n        } else {\n            var itemId = itemDefinition || '';\n            var itemTreeId = store.get('teampassApplication').selectedFolder || '';\n            var itemSk = 0;\n            var itemExpired = '';\n            var itemRestricted = '';\n            var itemDisplay = 1;\n            var itemOpenEdit = 0;\n            var itemReload = 0;\n            var itemRights = parseInt($(itemDefinition).data('item-rights')) || 10;\n        }\n\n        // check if user still has access\n        if (checkAccess(itemId, itemTreeId, <?php echo $_SESSION['user_id']; ?>) === false) {\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_item_to_display'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            // Finished\n            return false;\n        }\n\n        // Store current view\n        savePreviousView();\n        \n        if (debugJavascript === true) console.log(\"Request is running: \" + requestRunning)\n\n        // Store status query running\n        requestRunning = true;\n        userDidAChange = false;\n\n        // Select tab#1\n        $('#form-item-nav-pills li:first-child a').tab('show');\n\n        // Don't show details\n        if (itemDisplay === 'no_display') {\n            // Inform user\n            toastr.remove();\n            toastr.warning(\n                '<?php echo langHdl('no_item_to_display'); ?>',\n                '', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n\n            // Clear ongoing request status\n            requestRunning = false;\n\n            // Finished\n            return false;\n        }\n\n        // If opening new item, reinit hidden fields\n        if (store.get('teampassApplication').lastItemSeen !== itemId) {\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.lastItemSeen = parseInt(itemId);\n                }\n            );\n            if (debugJavascript === true) console.log(\"Last seen item \" + store.get('teampassApplication').lastItemSeen)\n        }\n\n        // Prepare data to be sent\n        var data = {\n            'id': parseInt(itemId),\n            'folder_id': parseInt(itemTreeId),\n            'salt_key_required': itemSk,\n            'expired_item': itemExpired,\n            'restricted': itemRestricted,\n            'folder_access_level': store.get('teampassItem').hasAccessLevel,\n            'page': 'items',\n            'rights': itemRights,\n        };\n\n        if (debugJavascript === true) console.log(\"SEND\");\n        if (debugJavascript === true) console.log(data);\n\n        //Send query\n        $.post(\n            'sources/items.queries.php', {\n                type: 'show_details_item',\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'show_details_item');\n                requestRunning = true;\n                if (debugJavascript === true) {\n                    console.log(\"RECEIVED object details\");\n                    console.log(data);\n                }\n\n                // Store not a new item\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.isNewItem = 0\n                    }\n                );\n\n                // remove any track-change class on item form\n                //$('.form-item-control').removeClass('track-change');\n\n                if (data.error === true) {\n                    toastr.remove();\n                    requestRunning = false;\n\n                    // Manage personal items key error\n                    if (data.error_type !== 'undefined' && data.error_type === 'private_items_to_encrypt') {\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        store.update(\n                            'teampassUser', {},\n                            function(teampassUser) {\n                                teampassUser.special = 'private_items_to_encrypt';\n                            }\n                        );\n                        document.location.href = \"index.php?page=items\";\n                    } else if (data.error_type !== 'undefined' && data.error_type === 'user_should_reencrypt_private_key' && store.get('teampassUser').temporary_code === '') {\n                        // we have to ask the user to re-encrypt his privatekey\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 10000,\n                                progressBar: true\n                            }\n                        );\n                        \n                        if (debugJavascript === true) console.log('LDAP user password has to encrypt his private key with hos new LDAP password')\n                        // HIde\n                        $('.content-header, .content').addClass('hidden');\n\n                        // Show passwords inputs and form\n                        $('#dialog-ldap-user-change-password-info')\n                            .html('<i class=\"icon fas fa-info mr-2\"></i><?php echo langHdl('ldap_user_has_changed_his_password');?>')\n                            .removeClass('hidden');\n                        $('#dialog-ldap-user-change-password').removeClass('hidden');\n                    }\n\n\n                    return false;\n                } else if ((data.user_can_modify === 0 && actionType === 'edit') ||\n                    parseInt(data.show_details) === 0\n                ) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    requestRunning = false;\n                    return false;\n                }\n\n\n                // Store scroll position\n                userScrollPosition = $(window).scrollTop();\n\n                // Scroll to top\n                $(window).scrollTop(0);\n\n                // SHould we show?\n                if (parseInt(data.show_detail_option) === 1 || itemExpired === 1) {\n                    // SHow expiration alert\n                    $('#card-item-expired').removeClass('hidden');\n                } else if (parseInt(data.show_detail_option) === 2) {\n                    // Don't show anything\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('not_allowed_to_see_pw'); ?>',\n                        '<?php echo langHdl('warning'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    return false;\n                }\n\n                // Show header info\n                $('#card-item-visibility').html(store.get('teampassItem').itemVisibility);\n                $('#card-item-minimum-complexity').html(store.get('teampassItem').itemMinimumComplexity);\n\n                // Hide NEW button in case access_level < 30\n                if (store.get('teampassItem').hasAccessLevel === 10) {\n                    $('#item-form-new-button').addClass('hidden');\n                } else {\n                    $('#item-form-new-button').removeClass('hidden');\n                }\n\n                // Uncrypt the pwd\n                if (data.pw !== undefined) {\n                    data.pw = atob(data.pw).utf8Decode();\n                }\n\n                // Update hidden variables\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.id = parseInt(data.id),\n                            teampassItem.timestamp = data.timestamp,\n                            teampassItem.user_can_modify = data.user_can_modify,\n                            teampassItem.anyone_can_modify = data.anyone_can_modify,\n                            teampassItem.edit_item_salt_key = data.edit_item_salt_key,\n                            teampassItem.id_restricted_to = data.id_restricted_to,\n                            teampassItem.id_restricted_to_roles = data.id_restricted_to_roles,\n                            teampassItem.item_rights = itemRights\n                    }\n                );\n\n                // Prepare forms\n                $('#folders-tree-card, .columns-position').addClass('hidden');\n                if (actionType === 'show') {\n                    // Prepare Views\n                    $('.item-details-card, #item-details-card-categories').removeClass('hidden');\n                    $('.form-item').addClass('hidden');\n\n                    $('#form-item-suggestion-password').focus();\n                    // If Description empty then remove it\n                    if (data.description === '<p>&nbsp;</p>') {\n                        $('#card-item-description')\n                            .parents('.item-details-card')\n                            .addClass('hidden');\n                    } else {\n                        $('#card-item-description')\n                            .parents('.item-details-card')\n                            .removeClass('hidden');\n                    }\n                } else {\n                    $('.form-item').removeClass('hidden');\n                    $('.item-details-card, #item-details-card-categories').addClass('hidden');\n                }\n                $('#pwd-definition-size').val(data.pw.length);\n\n                // Prepare card\n                const itemIcon = (data.fa_icon !== \"\") ? '<i class=\"'+data.fa_icon+' mr-1\"></i>' : '';\n                $('#card-item-label, #form-item-title').html(itemIcon + data.label);\n                $('#form-item-label, #form-item-suggestion-label').val(data.label);\n                $('#card-item-description, #form-item-suggestion-description').html(data.description);\n                if (data.description === '') {\n                    $('#card-item-description').addClass('hidden');\n                } else {\n                    $('#card-item-description').removeClass('hidden');\n                }\n                $('#card-item-pwd').html('<?php echo $var['hidden_asterisk']; ?>');\n                $('#hidden-item-pwd, #form-item-suggestion-password').val(data.pw);\n                $('#form-item-password, #form-item-password-confirmation, #form-item-server-old-password').val(data.pw);\n                $('#card-item-login').html(data.login);\n                $('#form-item-login, #form-item-suggestion-login, #form-item-server-login').val(data.login);\n\n                $('#card-item-email').text(data.email);\n                $('#form-item-email, #form-item-suggestion-email').val(data.email);\n                $('#card-item-url').html(data.url);\n                $('#form-item-url, #form-item-suggestion-url').val($(data.url).text());\n                $('#form-item-restrictedToUsers').val(JSON.stringify(data.id_restricted_to));\n                $('#form-item-restrictedToRoles').val(JSON.stringify(data.id_restricted_to_roles));\n                $('#form-item-folder').val(data.folder);\n                $('#form-item-tags').val(data.tags.join(' '));\n                $('#form-item-icon').val(data.fa_icon);\n                $('#form-item-icon-show').html(itemIcon);\n\n                $('#form-item-password').pwstrength(\"forceUpdate\");\n                $('#form-item-label').focus();\n\n                // Editor for description field\n                if (debugJavascript === true) {console.log('>>>> create summernote');}\n                $('#form-item-description')\n                    .html(data.description)\n                    .summernote({\n                        toolbar: [\n                            ['style', ['style']],\n                            ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                            ['fontsize', ['fontsize']],\n                            ['color', ['color']],\n                            ['para', ['ul', 'ol', 'paragraph']],\n                            ['insert', ['link', 'picture']],\n                            //['height', ['height']],\n                            ['view', ['codeview']]\n                        ],\n                        codeviewFilter: true,\n                        codeviewIframeFilter: true,\n                        callbacks: {\n                            onChange: function(contents, $editable) {\n                                if (debugJavascript === true) console.log('Editor onChange:' + userDidAChange + \" - \" + requestRunning);\n                                if (userDidAChange === false && requestRunning === false) {\n                                    if (debugJavascript === true) console.log('onChange:', contents, $editable);\n                                    userDidAChange = true;\n                                    if (debugJavascript === true) console.log('User did a change on #form-item-description > ' + userDidAChange);\n                                    //$('#form-item-description').attr('data-change-ongoing', true);;\n                                }\n                            }\n                        }\n                    })\n                //.summernote('editor.insertText', data.description);\n\n                $('#form-item-suggestion-description')\n                    .html(data.description)\n                    .summernote({\n                        toolbar: [\n                            ['style', ['style']],\n                            ['font', ['bold', 'italic', 'underline', 'strikethrough', 'clear']],\n                            ['fontsize', ['fontsize']],\n                            ['color', ['color']],\n                            ['para', ['ul', 'ol', 'paragraph']],\n                            ['insert', ['link', 'picture']],\n                            //['height', ['height']],\n                            ['view', ['codeview']]\n                        ],\n                        codeviewFilter: true,\n                        codeviewIframeFilter: true,\n                        callbacks: {\n                            onChange: function(contents, $editable) {\n                                if (userDidAChange === false && requestRunning === false) {\n                                    if (debugJavascript === true) console.log('onChange:', contents, $editable);\n                                    userDidAChange = true;\n                                    if (debugJavascript === true) console.log('User did a change on #form-item-suggestion-description > ' + userDidAChange);\n                                    //$('#form-item-suggestion-description').attr('data-change-ongoing', true);;\n                                }\n                            }\n                        }\n                    });\n\n\n                //prepare nice list of users / groups\n                var html_users = '',\n                    html_groups = '',\n                    html_tags = '',\n                    html_kbs = '';\n\n                $(data.tags).each(function(index, value) {\n                    html_tags += '<span class=\"badge badge-success pointer tip mr-2\" title=\"<?php echo langHdl('list_items_with_tag'); ?>\" onclick=\"searchItemsWithTags(\\'' + value + '\\')\"><i class=\"fas fa-tag fa-sm\"></i>&nbsp;<span class=\"item_tag\">' + value + '</span></span>';\n                });\n                if (html_tags === '') {\n                    $('#card-item-tags').html('<?php echo langHdl('none'); ?>');\n                } else {\n                    $('#card-item-tags').html(html_tags);\n                }\n\n                $(data.links_to_kbs).each(function(index, value) {\n                    html_kbs += '<a class=\"badge badge-primary pointer tip mr-2\" href=\"<?php echo $SETTINGS['cpassman_url']; ?>/index.php?page=kb&id=' + value['id'] + '\"><i class=\"fas fa-map-pin fa-sm\"></i>&nbsp;' + value['label'] + '</a>';\n\n                });\n                if (html_kbs === '') {\n                    $('#card-item-kbs').html('<?php echo langHdl('none'); ?>');\n                } else {\n                    $('#card-item-kbs').html(html_kbs);\n                }\n\n\n                // Manage CATEGORIES / CUSTOM FIELDS\n                if (data.categories.length === 0) {\n                    $('.card-item-category, .card-item-field, .form-item-category, #item-details-card-categories')\n                        .addClass('hidden');\n                    $('.no-item-fields').removeClass('hidden');\n                    $('#card-item-fields').closest().addClass('collapsed');\n                } else {\n                    // \n                    if (data.template_id === '') {\n                        $('#list-group-item-main')\n                            .children('.list-group')\n                            .removeClass('hidden');\n                        $('#card-item-category').removeClass('hidden');\n                    }\n\n                    if (data.fields.length === 0) {\n                        if (actionType === 'show') {\n                            $('#item-details-card-categories').addClass('hidden');\n                            // Refresh last item seen\n                            refreshListLastSeenItems();\n                        } else {\n                            // Show the inputs for EDITION\n                            $(data.categories).each(function(index, category) {\n                                $('#form-item-field, #form-item-category-' + category).removeClass('hidden');\n                            });\n                        }\n                    } else {\n                        // Show expected categories\n                        $('.no-item-fields, .form-item-category').addClass('hidden');\n\n                        // In edition mode, show all fields in expected Categories\n                        $(data.categories).each(function(index, category) {\n                            $('#form-item-field, #form-item-category-' + category).removeClass('hidden');\n                        });\n\n                        // Now show expected fields and values\n                        $(data.fields).each(function(index, field) {\n                            // Show cateogry\n                            $('#card-item-category-' + field.parent_id).removeClass('hidden');\n\n                            // Is data encrypted\n                            // Then base64 decode is required\n                            if (field.encrypted === 1) {\n                                field.value = atob(field.value);\n                            }\n\n                            // Show field\n                            if (field.masked === 1) {\n                                // Item card\n                                $('#card-item-field-' + field.id)\n                                    .removeClass('hidden')\n                                    .children(\".card-item-field-value\")\n                                    .html(\n                                        '<span data-field-id=\"' + field.id + '\" class=\"pointer replace-asterisk\"><?php echo $var['hidden_asterisk']; ?></span>' +\n                                        '<input type=\"text\" style=\"width:0px; height:0px; border:0px;\" id=\"hidden-card-item-field-value-' + field.id + '\" value=\"' + (field.value) + '\">'\n                                    )\n                                $('#card-item-field-' + field.id)\n                                    .children(\".btn-copy-clipboard-clear\")\n                                    .attr('data-clipboard-target', '#hidden-card-item-field-value-' + field.id);\n                            } else {\n                                // Show Field\n                                $('#card-item-field-' + field.id)\n                                    .removeClass('hidden')\n                                    .children(\".card-item-field-value\")\n                                    .html(field.value);\n                            }\n                            // Item edit form\n                            $('#form-item-field-' + field.id)\n                                .children(\".form-item-field-custom\")\n                                .val(field.value);\n                        });\n\n                        // Manage template to show\n                        if (data.template_id !== '' && $.inArray(data.template_id, data.categories) > -1) {\n                            // Tick the box in edit mode\n                            $('#template_' + data.template_id).iCheck('check');\n\n                            // Hide existing data as replaced by Category template                                \n                            $('#list-group-item-main, #item-details-card-categories')\n                                .children('.list-group')\n                                .addClass('hidden');\n\n                            // Move the template in place of item main  \n                            $('#card-item-category-' + data.template_id)\n                                .addClass('fields-to-move')\n                                .detach()\n                                .appendTo('#list-group-item-main');\n\n                            // If only one category of Custom Fields\n                            // Then hide the CustomFields div\n                            if (actionType === 'show') {\n                                if (data.categories.length === 1) {\n                                    $('#item-details-card-categories').addClass('hidden');\n                                } else {\n                                    $('#item-details-card-categories').removeClass('hidden');\n                                }\n                            }\n                        }\n                    }\n                }\n\n\n                // Waiting\n                $('#card-item-attachments').html(\"<?php echo langHdl('please_wait'); ?>\");\n\n                // Manage clipboard for link\n                if (clipboardForLink) clipboardForLink.destroy();\n                clipboardForLink = new ClipboardJS(\n                    '#get_item_link',\n                    {\n                        text: function(e) {\n                            return (\"<?php echo $SETTINGS['cpassman_url'];?>/index.php?page=items&group=\"+store.get('teampassItem').folderId+\"&id=\"+store.get('teampassItem').id);\n                        }\n                    })\n                    .on('success', function(e) {\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('copy_to_clipboard'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                progressBar: true,\n                                positionClass: 'toast-top-right'\n                            }\n                        );\n                        e.clearSelection();\n                    });\n\n                // Manage clipboard button\n                if (itemClipboard) itemClipboard.destroy();\n                itemClipboard = new ClipboardJS('.btn-copy-clipboard-clear', {\n                    text: function(e) {\n                        return ($($(e).data('clipboard-target')).val());\n                    }\n                })\n                .on('success', function(e) {\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('copy_to_clipboard'); ?>',\n                        '', {\n                            timeOut: 2000,\n                            progressBar: true,\n                            positionClass: 'toast-top-right'\n                        }\n                    );\n                    e.clearSelection();\n                });\n\n                // Prepare clipboard - COPY LOGIN\n                if (data.login !== '') {\n                    $('#card-item-login-btn').removeClass('hidden');\n                } else {\n                    $('#card-item-login-btn').addClass('hidden');\n                }\n\n                // Prepare clipboard - COPY PASSWORD\n                if (data.pw !== '') {\n                    new ClipboardJS('#card-item-pwd-button', {\n                            text: function() {\n                                return (data.pw);\n                            }\n                        })\n                        .on('success', function(e) {\n                            itemLog(\n                                'at_password_copied',\n                                e.trigger.dataset.clipboardId,\n                                $('#card-item-label').text()\n                            );\n\n                            // Warn user about clipboard clear\n                            if (store.get('teampassSettings').clipboard_life_duration === undefined || parseInt(store.get('teampassSettings').clipboard_life_duration) === 0) {\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('copy_to_clipboard'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        positionClass: 'toast-top-right',\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                toastr.warning(\n                                    '<?php echo langHdl('clipboard_will_be_cleared'); ?>',\n                                    '', {\n                                        timeOut: store.get('teampassSettings').clipboard_life_duration * 1000,\n                                        progressBar: true\n                                    }\n                                );\n\n                                // Set clipboard eraser\n                                clearClipboardTimeout(\n                                    store.get('teampassSettings').clipboard_life_duration\n                                );\n                            }\n\n                            e.clearSelection();\n                        });\n                    $('#card-item-pwd-button').removeClass('hidden');\n                } else {\n                    $('#card-item-pwd-button').addClass('hidden');\n                }\n\n                // Prepare clipboard - COPY EMAIL\n                if (data.email !== '') {\n                    $('#card-item-email-btn').removeClass('hidden');\n                } else {\n                    $('#card-item-email-btn').addClass('hidden');\n                }\n\n                // Prepare auto_update info\n                $('#card-item-misc').html('');\n                if (parseInt(data.auto_update_pwd_frequency) !== '0') {\n                    $('#card-item-misc')\n                        .append('<span class=\"fas fa-shield infotip mr-4\" title=\"<?php echo langHdl('auto_update_enabled'); ?>&nbsp;' + data.auto_update_pwd_frequency + '\"></span>');\n                }\n\n                // Show Notification engaged\n                if (data.notification_status === true) {\n                    $('#card-item-misc')\n                        .append('<span class=\"mr-4 icon-badge\" id=\"card-item-misc-notification\"><span class=\"far fa-bell infotip text-success\" title=\"<?php echo langHdl('notification_engaged'); ?>\"></span></span>');\n                } else {\n                    $('#card-item-misc')\n                        .append('<span class=\"mr-4 icon-badge\" id=\"card-item-misc-notification\"><span class=\"far fa-bell-slash infotip text-warning\" title=\"<?php echo langHdl('notification_not_engaged'); ?>\"></span></span>');\n                }\n\n                // Prepare counter\n                $('#card-item-misc')\n                    .append('<span class=\"icon-badge mr-4\"><span class=\"far fa-eye infotip\" title=\"<?php echo langHdl('viewed_number'); ?>\"></span><span class=\"badge badge-info icon-badge-text icon-badge-far\">' + data.viewed_no + '</span></span>');\n\n                // Delete after X views\n                if (data.to_be_deleted !== '') {\n                    if (parseInt(data.to_be_deleted_type) === 1) {\n                        $('#form-item-deleteAfterShown').val(data.to_be_deleted);\n                        $('#form-item-deleteAfterDate').val('');\n                    } else {\n                        $('#form-item-deleteAfterShown').val('');\n                        $('#form-item-deleteAfterDate').val(data.to_be_deleted);\n                    }\n                    // Show icon\n                    $('#card-item-misc')\n                        .append('<span class=\"icon-badge mr-5\"><span class=\"far fa-trash-alt infotip\" title=\"<?php echo langHdl('automatic_deletion_engaged'); ?>\"></span><span class=\"badge badge-danger icon-badge-text-bottom-right\">' + data.to_be_deleted + '</span></span>');\n                }\n\n                // reset password shown info\n                $('#card-item-pwd').removeClass('pwd-shown');\n\n                //Anyone can modify button\n                if (parseInt(data.anyone_can_modify) === 1) {\n                    $('#form-item-anyoneCanModify').iCheck('check');\n                } else {\n                    $('#form-item-anyoneCanModify').iCheck('uncheck');\n                }\n\n                if (parseInt(data.show_details) === 1 && parseInt(data.show_detail_option) !== 2) {\n                    // continue loading data\n                    showDetailsStep2(itemId, actionType);\n                } else if (parseInt(data.show_details) === 1 && parseInt(data.show_detail_option) === 2) {\n                    $('#item_details_nok').addClass('hidden');\n                    $('#item_details_ok').addClass('hidden');\n                    $('#item_details_expired_full').show();\n                    $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link').attr('disabled', 'disabled');\n                    $('#div_loading').addClass('hidden');\n                } else {\n                    //Dont show details\n                    $('#item_details_nok').removeClass('hidden');\n                    $('#item_details_nok_restriction_list').html('<div style=\"margin:10px 0 0 20px;\"><b><?php echo langHdl('author'); ?>: </b>' + data.author + '<br /><b><?php echo langHdl('restricted_to'); ?>: </b>' + data.restricted_to + '<br /><br /><u><a href=\"#\" onclick=\"openReasonToAccess()\"><?php echo langHdl('request_access_ot_item'); ?></a></u></div>');\n\n                    $('#reason_to_access').remove();\n                    $('#item_details_nok')\n                        .append('<input type=\"hidden\" id=\"reason_to_access\" value=\"' + data.id + ',' + data.id_user + '\">');\n\n                    // Protect\n                    $('#item_details_ok').addClass('hidden');\n                    $('#item_details_expired').addClass('hidden');\n                    $('#item_details_expired_full').addClass('hidden');\n                    $('#menu_button_edit_item, #menu_button_del_item, #menu_button_copy_item, #menu_button_add_fav, #menu_button_del_fav, #menu_button_show_pw, #menu_button_copy_pw, #menu_button_copy_login, #menu_button_copy_link').attr('disabled', 'disabled');\n                    $('#div_loading').addClass('hidden');\n                }\n\n                // Prepare bottom buttons\n                if ($('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id') !== undefined) {\n                    $('.but-prev-item')\n                        .html('<i class=\"fas fa-arrow-left mr-2\"></i>' + unescape($('#list-item-row_'+data.id).prev('.list-item-row').attr('data-label')))\n                        .attr('data-prev-item-id', $('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n                if ($('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id') !== undefined) {\n                    $('.but-next-item')\n                        .html('<i class=\"fas fa-arrow-right mr-2\"></i>' + unescape($('#list-item-row_'+data.id).next('.list-item-row').attr('data-label')))\n                        .attr('data-next-item-id', $('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id'))\n                        .removeClass('hidden');\n                }\n                if (debugJavascript === true) {\n                    console.log(\"PREV: \" + $('#list-item-row_'+data.id).prev('.list-item-row').attr('data-item-id') + \" - NEXT: \" + $('#list-item-row_'+data.id).next('.list-item-row').attr('data-item-id'));\n                }\n\n                // Inform user\n                toastr.remove();\n                toastr.info(\n                    '<?php echo langHdl('done'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n\n                return true;\n            }\n        );\n    }\n\n\n    /*\n     * Loading Item details step 2\n     */\n    function showDetailsStep2(id, actionType) {\n        requestRunning = true;\n        $.post(\n            'sources/items.queries.php', {\n                type: 'showDetailsStep2',\n                id: id,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'showDetailsStep2');\n\n                if (debugJavascript === true) {\n                    console.log('RECEIVED STEP2 - used key: <?php echo $_SESSION['key']; ?>');\n                    console.log(data);\n                }\n\n                // Attachments\n                if (data !== false) {\n                    if (data.attachments.length === 0) {\n                        $('#card-item-attachments-badge').html('<?php echo langHdl('none'); ?>');\n                        $('#card-item-attachments')\n                            .html('<?php echo langHdl('no_attachment'); ?>')\n                            .parent()\n                            .addClass('collapsed');\n                    } else {\n                        var html = '',\n                            htmlFull = '',\n                            counter = 1,\n                            nbFiles = 0;\n                        $.each(data.attachments, function(i, value) {\n                            // Manage new row\n                            if (counter === 1) {\n                                htmlFull += '<div class=\"row\">';\n                                html += '<div class=\"row\">';\n                            }\n\n                            html += '<div class=\"col-6\">' +\n                                '<div class=\"callout callout-info\">' +\n                                '<i class=\"' + value.icon + ' mr-2 text-info\"></i>';\n\n                            // Show VIEW image icon\n                            if (value.is_image === 1) {\n                                html +=\n                                    '<i class=\"fas fa-eye infotip preview-image pointer mr-2\" ' +\n                                    'title=\"<?php echo langHdl('see'); ?>\" ' +\n                                    'data-file-id=\"' + value.id + '\" data-file-title=\"' +\n                                    (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '\"></i>';\n                            }\n\n                            // Show DOWNLOAD icon\n                            downloadIcon =\n                                '<a class=\"text-secondary infotip mr-2\" href=\"sources/downloadFile.php?name=' + encodeURI(value.filename) + '&key=<?php echo $_SESSION['key']; ?>&key_tmp=' + value.key + '&fileid=' + value.id + '\" title=\"<?php echo langHdl('download'); ?>\">' +\n                                '<i class=\"fas fa-file-download\"></i></a>';\n                            html += downloadIcon;\n\n                            // Show other info\n                            html +=\n                                '<span class=\"font-weight-bold mr-3\">' +\n                                (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '</span>' +\n                                '<span class=\"mr-2 font-weight-light\">(' + value.extension + ')</span>' +\n                                '<span class=\"font-italic\">' + value.size + '</span>' +\n                                '</div></div>';\n\n                            htmlFull += '<div class=\"col-6 edit-attachment-div\"><div class=\"info-box bg-secondary-gradient\">' +\n                                '<span class=\"info-box-icon bg-info\"><i class=\"' + value.icon + '\"></i></span>' +\n                                '<div class=\"info-box-content\"><span class=\"info-box-text\">' +\n                                (isBase64(value.filename) === true ? atob(value.filename) : value.filename) + '.' + value.extension + '</span>' +\n                                '<span class=\"info-box-text\">' + downloadIcon +'</span>' +\n                                '<span class=\"info-box-text\"><i class=\"fas fa-trash pointer delete-file\" data-file-id=\"' + value.id + '\"></i></span></div>' +\n                                '</div></div>';\n\n                            if (counter === 2) {\n                                htmlFull += '</div>';\n                                html += '</div>';\n                                counter = 1;\n                            } else {\n                                counter += 1;\n                            }\n                            nbFiles += 1;\n                        });\n                        $('#card-item-attachments').html(html);\n                        $('#card-item-attachments-badge').html(nbFiles);\n                        $('#form-item-attachments').html(htmlFull);\n                        $('#form-item-attachments-zone').removeClass('hidden');\n                    }\n                }\n                // Hide loading state\n                $('#card-item-attachments').nextAll().addClass('hidden');\n\n                // Show restrictions with Badges\n                var html_restrictions = '';\n                $.each(store.get('teampassItem').id_restricted_to, function(i, value) {\n                    html_restrictions +=\n                        '<span class=\"badge badge-info mr-2 mb-1\"><i class=\"fas fa-group fa-sm mr-1\"></i>' +\n                        data.users_list.find(x => x.id === parseInt(value)).name + '</span>';\n                });\n                $.each(store.get('teampassItem').id_restricted_to_roles, function(i, value) {\n                    html_restrictions +=\n                        '<span class=\"badge badge-info mr-2 mb-1\"><i class=\"fas fa-group fa-sm mr-1\"></i>' +\n                        data.roles_list.find(x => x.id === parseInt(value)).title + '</span>';\n                });\n                if (html_restrictions === '') {\n                    $('#card-item-restrictedto').html('<?php echo langHdl('no_special_restriction'); ?>');\n                } else {\n                    $('#card-item-restrictedto').html(html_restrictions);\n                }\n\n\n                $('#edit_past_pwds').attr('title', (data.history_of_pwds)); //htmlspecialchars_decode \n                $('#edit_past_pwds_div').html((data.history_of_pwds)); //htmlspecialchars_decode \n\n                //$('#id_files').html(data.files_id);\n                //$('#hid_files').val(data.files_id);\n                //$('#item_edit_list_files').html(data.files_edit);\n\n                //$('#index-last-pwds').html(htmlspecialchars_decode(data.div_last_items));\n\n                // function calling image lightbox when clicking on link\n                $('a.image_dialog').click(function(event) {\n                    event.preventDefault();\n                    PreviewImage($(this).attr('href'), $(this).attr('title'));\n                });\n\n\n                // set indicator if item has change proposal\n                if (parseInt(data.has_change_proposal) > 0) {\n                    $('#item_extra_info').prepend('<i class=\"fas fa-lightbulb-o fa-sm mi-yellow tip\" title=\"<?php echo langHdl('item_has_change_proposal'); ?>\"></i>&nbsp;');\n                }\n\n\n                $('.infotip').tooltip();\n\n                // Now load History\n                if (actionType === 'show') {\n                    $.post(\n                        \"sources/items.queries.php\", {\n                            type: \"load_item_history\",\n                            item_id: store.get('teampassItem').id,\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            //decrypt data\n                            data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'load_item_history');\n                            if (debugJavascript === true) {\n                                console.info('History:');\n                                console.log(data);\n                            }\n                            if (data.error === '') {\n                                var html = '',\n                                    nbHistoryEvents = 0;\n                                $.each(data.history, function(i, value) {\n                                    html += '<div class=\"direct-chat-msg\"><div class=\"direct-chat-info clearfix\">' +\n                                        '<span class=\"direct-chat-name float-left\">' + value.name + '</span>' +\n                                        '<span class=\"direct-chat-timestamp float-right\">' + value.date + '</span>' +\n                                        '</div>' +\n                                        '<img class=\"direct-chat-img\" src=\"' + value.avatar + '\" alt=\"Message User Image\">' +\n                                        '<div class=\"direct-chat-text\"><span class=\"text-capitalize\">' +\n                                        (value.action === '' ? '' : (value.action)) + '</span> ' +\n                                        (value.detail === '' ? '' : (' | ' + value.detail)) + '</div></div>';\n                                    nbHistoryEvents += 1;\n                                });\n                                // Display\n                                $('#card-item-history').html(html);\n                                $('#card-item-history-badge').html(nbHistoryEvents);\n                            }\n\n                            // Collapse History\n                            $('#card-item-history').closest().addClass('collapsed');\n\n                            // Hide loading state\n                            $('#card-item-history').nextAll().addClass('hidden');\n                        }\n                    );\n                } else if (actionType === 'edit') {\n                    getPrivilegesOnItem(\n                        selectedFolderId,\n                        0\n                    );\n                }\n\n                // Prepare Select2 inputs\n                $('.select2').select2({\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n\n                // Prepare datePicker\n                $('#form-item-deleteAfterDate, .datepicker').datepicker({\n                    format: '<?php echo str_replace(['Y', 'M'], ['yyyy', 'mm'], $SETTINGS['date_format']); ?>',\n                    todayHighlight: true,\n                    todayBtn: true,\n                    language: '<?php echo isset($_SESSION['user_language_code']) === true ? $_SESSION['user_language_code'] : 'en'; ?>'\n                });\n\n                // Prepare Date range picker with time picker\n                $('.timepicker').timepicker({\n                    minuteStep: 5,\n                    template: false,\n                    showSeconds: true,\n                    showMeridian: false,\n                    showInputs: false,\n                    explicitMode: true\n                });\n\n                // Delete inputs related files uploaded but not confirmed\n                var data = {\n                    'item_id': store.get('teampassItem').id,\n                }\n\n                $.post(\n                    \"sources/items.queries.php\", {\n                        type: 'delete_uploaded_files_but_not_saved',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function (data) {\n                        /*// add track-change class on item form\n                        setTimeout(\n                            $('#form-item-label, #form-item-description, #form-item-login, #form-item-password, #form-item-email, #form-item-url, #form-item-folder, #form-item-restrictedto, #form-item-tags, #form-item-anyoneCanModify, #form-item-deleteAfterShown, #form-item-deleteAfterDate, #form-item-anounce, .form-item-field-custom').addClass('track-change'),\n                            2000\n                        );*/\n\n                        requestRunning = false;\n                    }\n                );\n            }\n        );\n    };\n\n    // Clear history form\n    $(document)\n        .on('click', '#form-item-history-clear', function() {\n            $('.history').val('');\n        })\n        .on('click', '#form-item-history-insert', function() {\n            if ($('#form-item-history-label').val() === '' ||\n                $('#form-item-history-date').val() === '' ||\n                $('#form-item-history-time').val() === ''\n            ) {\n                // Inform user\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('all_fields_mandatory'); ?>',\n                    '<?php echo langHdl('warning'); ?>', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            // Insert new entry\n            var data = {\n                'item_id': store.get('teampassItem').id,\n                'label': DOMPurify.sanitize($('#form-item-history-label').val()),\n                'date': DOMPurify.sanitize($('#form-item-history-date').val()),\n                'time': DOMPurify.sanitize($('#form-item-history-time').val()),\n            }\n            $.post(\n                \"sources/items.queries.php\", {\n                    type: 'history_entry_add',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'history_entry_add');\n                    if (debugJavascript === true) console.log(data);\n                    $('.history').val('');\n\n                    // Inform user\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            );\n        })\n        .on('click', '.nav-link', function() {\n            if ($(this).attr('href') === '#tab_5') {\n                $('#form-item-buttons').addClass('hidden');\n            } else {\n                $('#form-item-buttons').removeClass('hidden');\n            }\n\n        });\n\n    // When click on Trash attachment icon\n    $(document).on('click', '.delete-file', function() {\n        var thisButton = $(this),\n            thisFileId = thisButton.data('file-id');\n\n        if (thisFileId !== undefined && thisFileId !== '') {\n            // Delete the file\n            var data = {\n                'file_id': thisFileId,\n            };\n\n            $.post(\n                'sources/items.queries.php', {\n                    type: 'delete_attached_file',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    //decrypt data\n                    data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'delete_attached_file');\n                    if (debugJavascript === true) console.log(data);\n\n                    //check if format error\n                    if (data.error === true) {\n                        // ERROR\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Remove the file in UI\n                        thisButton.closest('.edit-attachment-div').remove();\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n        }\n    });\n\n    //calling image lightbox when clicking on link\n    $(document).on('click', '.preview-image', function(event) {\n        event.preventDefault();\n        PreviewImage($(this).data('file-id'));\n    });\n\n    PreviewImage = function(fileId) {\n        toastr.remove();\n        toastr.info(\n            '<?php echo langHdl('loading_image'); ?>...<i class=\"fa-solid fa-circle-notch fa-spin fa-2x ml-2\"></i>'\n        );\n\n        $.post(\n            \"sources/items.queries.php\", {\n                type: \"image_preview_preparation\",\n                id: fileId,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'image_preview_preparation');\n                //if (debugJavascript === true) console.log(data);\n\n                //check if format error\n                if (data.error === true) {\n                    // ERROR\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $(\"#card-item-preview\").html('<img id=\"image_files\" src=\"\">');\n                    //Get the HTML Elements\n                    imageDialog = $(\"#card-item-preview\");\n                    imageTag = $('#image_files');\n\n                    //Set the image src\n                    imageTag.attr(\"src\", \"data:\" + data.file_type + \";base64,\" + data.file_content);\n                    imageTag.attr(\"class\", \"img-fluid\");\n\n                    //When the image has loaded, display the dialog\n                    showModalDialogBox(\n                        '#warningModal',\n                        data.filename,\n                        $(imageDialog).html(),\n                        '',\n                        'Close',\n                        'modal-xl'\n                    );\n\n                    toastr.remove();\n                    toastr.info(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n\n                    /*\n                                        var pre = document.createElement('pre');\n                                        pre.style.textAlign = \"center\";\n                                        $(pre).append($(imageDialog).html());\n                                        alertify\n                                            .alert(pre)\n                                            .set({\n                                                label: '<?php echo langHdl('close'); ?>',\n                                                closable: false,\n                                                padding: false,\n                                                title: data.filename,\n                                                resizable: true,\n                                            })\n                                            .resizeTo('90%', '250px');*/\n                }\n            }\n        );\n    };\n\n    /**\n     */\n    function itemLog(logCase, itemId, itemLabel) {\n        itemId = itemId || $('#id_item').val();\n\n        var data = {\n            \"id\": itemId,\n            \"label\": DOMPurify.sanitize(itemLabel),\n            \"user_id\": \"<?php echo $_SESSION['user_id']; ?>\",\n            \"action\": logCase,\n            \"login\": \"<?php echo $_SESSION['login']; ?>\"\n        };\n\n        $.post(\n            \"sources/items.logs.php\", {\n                type: \"log_action_on_item\",\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            }\n        );\n    }\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function prepareOneTimeView() {\n        //Send query\n        $.post(\n            \"sources/items.queries.php\", {\n                type: \"generate_OTV_url\",\n                id: store.get('teampassItem').id,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //check if format error\n                if (data.error == \"\") {\n                    $('#form-item-otv-link').val(data.url);\n                    // prepare clipboard\n                    var clipboard = new ClipboardJS(\"#form-item-otv-copy-button\", {\n                        text: function() {\n                            return data.url;\n                        }\n                    });\n                    clipboard.on('success', function(e) {\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('copy_to_clipboard'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                positionClass: 'toast-top-right',\n                                progressBar: true\n                            }\n                        );\n                        e.clearSelection();\n                    });\n                }\n            },\n            \"json\"\n        );\n    }\n\n    /**\n     */\n    function getPrivilegesOnItem(val, edit, context) {\n        context = context || \"\"; // make context optional\n\n        // make sure to use correct selected folder\n        if (val === false) {\n            val = selectedFolderId;\n        }\n        if (debugJavascript === true) console.log('Get privilege for folder ' + val);\n            \n        if (val === \"\" || typeof val === \"undefined\" || val === false) {\n            toastr.remove();\n            toastr.error(\n                '',\n                '<?php echo langHdl('please_select_a_folder'); ?>',\n                {\n                    timeOut: 5000,\n                    positionClass: 'toast-top-right',\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        return $.post(\n            \"sources/items.queries.php\", {\n                type: \"get_complixity_level\",\n                folder_id: val,\n                context: context,\n                item_id: store.get('teampassItem').id,\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'get_complixity_level');\n\n                if (debugJavascript === true) {\n                    console.info('GET COMPLEXITY LEVEL');\n                    console.log(data);\n                }\n                var executionStatus = true;\n\n                if (data.error === false) {\n                    // Do some prepartion\n\n                    // Prepare list of users where needed\n                    $('#form-item-restrictedto, #form-item-anounce').empty().change(); //.val('')\n                    // Users restriction list\n                    var html_restrictions = '';\n\n                    $(data.usersList).each(function(index, value) {\n                        // Prepare list for FORM\n                        $(\"#form-item-restrictedto\")\n                            .append('<option value=\"' + value.id + '\" class=\"restriction_is_user\">' + value.name + '</option>');\n\n                        // Prepare list of emailers\n                        $('#form-item-anounce').append('<option value=\"' + value.email + '\">' + value.name + '</option>');\n                    });\n                    if (data.setting_restricted_to_roles === 1) {\n                        //add optgroup\n                        var optgroup = $('<optgroup label=\"<?php echo langHdl('users'); ?>\">');\n                        $(\".restriction_is_user\").wrapAll(optgroup);\n\n                        // Now add the roles to the list\n                        $(data.rolesList).each(function(index, value) {\n                            $(\"#form-item-restrictedto\")\n                                .append('<option value=\"role_' + value.id + '\" class=\"restriction_is_role\">' +\n                                    value.title + '</option>');\n                        });\n                        /// Add a group label for Groups\n                        $('.restriction_is_role').wrapAll($('<optgroup label=\"<?php echo langHdl('roles'); ?>\">'));\n                    }\n\n\n                    //\n                    $('#card-item-visibility').html(data.visibility);\n\n                    // Prepare Select2\n                    $('.select2').select2({\n                        language: '<?php echo $_SESSION['user_language_code']; ?>'\n                    });\n\n                    // Show selected restricted inputs\n                    $('#form-item-restrictedto')\n                        .val(data.usersList.concat(\n                            data.rolesList.map(i => 'role_' + i)))\n                        .change();\n\n                    // If restricted to Users then select them\n                    if (store.get('teampassItem').id_restricted_to !== undefined) {\n                        $('#form-item-restrictedto')\n                            .val(store.get('teampassItem').id_restricted_to)\n                            .trigger('change');\n                    }\n\n                }\n\n                store.update(\n                    'teampassItem',\n                    function(teampassItem) {\n                        teampassItem.folderId = val,\n                            teampassItem.error = data.error === undefined ? '' : data.error,\n                            teampassItem.message = data.message === undefined ? '' : data.message,\n                            teampassItem.folderComplexity = data.val === undefined ? '' : parseInt(data.val),\n                            teampassItem.folderIsPersonal = data.personal === undefined ? '' : parseInt(data.personal),\n                            teampassItem.itemMinimumComplexity = data.complexity === undefined ? '' : data.complexity,\n                            teampassItem.itemVisibility = data.visibility === undefined ? '' : data.visibility,\n                            teampassItem.id_restricted_to = data.usersList === undefined ? '' : data.usersList,\n                            teampassItem.id_restricted_to_roles = data.rolesList === undefined ? '' : data.rolesList,\n                            teampassItem.item_rights = data.itemAccessRight === undefined ? '' : data.itemAccessRight\n                    }\n                );\n                //if (debugJavascript === true) console.log('Content of teampassItem;')\n                //if (debugJavascript === true) console.log(store.get('teampassItem'))\n            }\n        );\n    }\n\n    $('.password-generate').click(function() {\n        var elementId = $(this).data('id');\n        $('#' + elementId).focus();\n        if (debugJavascript === true) console.log(elementId);\n\n        // If no criteria is set then do secure\n        var secure_pwd = false;\n        var anyBoxesChecked = false;\n        if ($('.password-definition:checked').length > 0) {\n            anyBoxesChecked = true;\n        }\n        if (anyBoxesChecked === false || $('#pwd-definition-secure').prop('checked') === true) {\n            secure_pwd = true;\n        }\n        \n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"generate_password\",\n                type_category: 'action_user',\n                size: $('#pwd-definition-size').val(),\n                lowercase: $('#pwd-definition-lcl').prop(\"checked\"),\n                numerals: $('#pwd-definition-numeric').prop(\"checked\"),\n                capitalize: $('#pwd-definition-ucl').prop(\"checked\"),\n                symbols: $('#pwd-definition-symbols').prop(\"checked\"),\n                secure_pwd: secure_pwd,\n                force: \"false\",\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                if (debugJavascript === true) console.log(data)\n                if (data.error == \"true\") {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        data.error_msg,\n                        '<?php echo langHdl('error'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                } else {\n                    $(\"#\" + elementId).val(data.key).focus();\n\n                    // Form has changed\n                    userDidAChange = true;\n                    if (debugJavascript === true) console.log('User did a change during generate_password > ' + userDidAChange);\n                    //$('#' + elementId).attr('data-change-ongoing', true);;\n\n                    $(\"#form-item-password\").pwstrength(\"forceUpdate\");\n\n                    // SHow button in sticky footer\n                    //$('#form-item-buttons').addClass('sticky-footer');\n                }\n            }\n        );\n    });\n\n    $('#item-button-password-copy').click(function() {\n        $('#form-item-password-confirmation').val($('#form-item-password').val());\n    });\n\n    /**\n     * On tag badge click, launch the search query\n     */\n    function searchItemsWithTags(criteria) {\n        if (criteria !== '') {\n            $('#folders-tree-card, .columns-position').removeClass('hidden');\n            $('.item-details-card, .form-item-action, .form-item, .form-folder-action').addClass('hidden');\n\n            $('#find_items').val(criteria);\n\n            searchItems(criteria);\n        }\n    }\n\n    /**\n     * Checks if string is base64 encoded\n     *\n     * @return bool\n     */\n    function isBase64(str) {\n        try {\n            return btoa(atob(str)) == str;\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Scroll back to previous vertical position\n     *\n     * @return void\n     */\n    function scrollBackToPosition() {\n        // Scroll back to position\n        if (store.get('teampassApplication').tempScrollTop > 0) {\n            window.scrollTo({\n                top: store.get('teampassApplication').tempScrollTop\n            });\n        }\n    }\n\n\n    function prepareFolderDragNDrop()\n    {\n        $('.is-draggable').draggable({\n            cursor: 'move',\n            cursorAt: {\n                top: -5,\n                left: -5\n            },\n            opacity: 0.8,\n            appendTo: 'body',\n            stop: function(event, ui) {\n                $(this).removeClass('bg-warning');\n            },\n            start: function(event, ui) {\n                $(this).addClass('bg-warning');\n            },\n            helper: function(event) {\n                return $('<div class=\"bg-gray p-2 font-weight-light\">' + $(this).find('.list-item-row-description').text() + '</div>');\n            }\n        });\n        $('.folder').droppable({\n            hoverClass: 'bg-warning',\n            tolerance: 'pointer',\n            drop: function(event, ui) {\n                // Check if same folder\n                if (parseInt($(this).attr('id').substring(4)) === parseInt(ui.draggable.data('item-tree-id'))) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('error_not_allowed_to'); ?>',\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // Warn user that it starts\n                toastr.info(\n                    '<i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>'\n                );\n\n                // Hide helper\n                ui.draggable.addClass('hidden');\n\n                //move item\n                var data = {\n                    'item_id': ui.draggable.data('item-id'),\n                    'folder_id': $(this).attr('id').substring(4)\n                }\n                $.post(\n                    'sources/items.queries.php', {\n                        type: 'move_item',\n                        data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        //decrypt data\n                        data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>', 'items.queries.php', 'move_item');\n\n                        if (debugJavascript === true) console.log(data)\n\n                        if (data.error === true) {\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                            ui.draggable.removeClass('hidden');\n                            return false;\n                        }\n                        \n                        //increment / decrement number of items in folders\n                        $('#itcount_' + data.from_folder).text(refreshFolderCounters($('#itcount_' + data.from_folder).text(), 'decrement'));\n                        $('#itcount_' + data.to_folder).text(refreshFolderCounters($('#itcount_' + data.to_folder).text(), 'increment'));\n\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('success'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                );\n            }\n        });\n    }\n\n    /**\n     * Permits to refresh the folder counters when performing an item drag and drop\n     */\n    function refreshFolderCounters(counter, operation)\n    {\n        var splitCounter = counter.split('/');\n        if (splitCounter.length <= 3) {\n            if (operation === 'increment') {\n                splitCounter[0]++;\n                if (splitCounter.length === 3) {\n                    splitCounter[1]++;\n                }\n            } else {\n                splitCounter[0]--;\n                if (splitCounter.length === 3) {\n                    splitCounter[1]--;\n                }\n            }\n        }\n        \n        return splitCounter.join('/');\n    }\n\n    /*\n    // Get parameters from url\n    var currentTeampassUrl = new URL(window.location.href);\n    var actionFromUrl = currentTeampassUrl.searchParams.get('action');\n    if (actionFromUrl !== undefined && atob(actionFromUrl) === 'reset_private_key') {\n        // Case where we need to re-encrypt all share keys\n        if (debugJavascript === true) console.log(\"ACTION RE-ENCRYPTION OF SHAREKEYS\");\n\n        $('#dialog-encryption-keys').removeClass('hidden');    \n\n        // Hide other\n        $('.content-header, .content').addClass('hidden');\n\n        alertify.dismissAll();\n    }\n    */\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      users.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception('Error file \"/includes/config/tp.config.php\" not exists', 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'folders', $SETTINGS) === false) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n?>\n\n\n<script type='text/javascript'>\n    //<![CDATA[\n    // Initialization\n    var userDidAChange = false,\n        userTemporaryCode = '',\n        constVisibleOTP = false,\n        userClipboard,\n        ProcessInProgress = false,\n        debugJavascript = false;\n\n    browserSession(\n        'init',\n        'teampassApplication', {\n            foldersSelect: '',\n            complexityOptions: '',\n        }\n    );\n\n    // Prepare tooltips\n    $('.infotip').tooltip();\n\n    // Prepare Select2\n    $('.select2').select2({\n        language: '<?php echo $_SESSION['user_language_code']; ?>'\n    });\n\n    // Prepare iCheck format for checkboxes\n    $('input[type=\"checkbox\"].flat-blue, input[type=\"radio\"].flat-blue').iCheck({\n        radioClass: 'iradio_flat-blue',\n        checkboxClass: 'icheckbox_flat-blue',\n    });\n    $('#form-create-special-folder').iCheck('disable');\n\n    // Prevent submit on button\n    $('.btn-no-click')\n        .click(function(e) {\n            e.preventDefault();\n        });\n\n\n    //Launch the datatables pluggin\n    var oTable = $('#table-users').DataTable({\n        'paging': true,\n        'searching': true,\n        'order': [\n            [1, 'asc']\n        ],\n        'info': true,\n        'processing': false,\n        'serverSide': true,\n        'responsive': false,\n        'select': false,\n        'stateSave': true,\n        'autoWidth': true,\n        'ajax': {\n            url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/users.datatable.php',\n        },\n        'language': {\n            'url': '<?php echo $SETTINGS['cpassman_url']; ?>/includes/language/datatables.<?php echo $_SESSION['user']['user_language']; ?>.txt'\n        },\n        'columns': [{\n                'width': '80px',\n                className: 'details-control',\n                'render': function(data, type, row, meta) {\n                    return '<div class=\"group-btn btn-user-action\">' +\n                        '' +\n                        '<button type=\"button\" class=\"btn btn-info dropdown-toggle\" data-toggle=\"dropdown\"><i class=\"fas fa-cog\"></i>&nbsp;' +\n                        '</button>' +\n                        '<ul class=\"dropdown-menu\" role=\"menu\">' +\n                        ($(data).data('auth-type') === 'local' ?\n                            '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-action=\"new-password\"><i class=\"fas fa-lock mr-2\"></i><?php echo langHdl('change_login_password'); ?></li>' :\n                            ''\n                        ) +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-action=\"edit\"><i class=\"fas fa-pen mr-2\"></i><?php echo langHdl('edit'); ?></li>' +\n                        ($(data).data('otp-provided') !== \"\"?\n                            '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-action=\"new-otp\"><i class=\"fas fa-mask mr-2\"></i><?php echo langHdl('generate_new_otp'); ?></li>' :\n                            ''\n                        ) +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-fullname=\"' + $(data).data('fullname') + '\" data-action=\"logs\"><i class=\"fas fa-newspaper mr-2\"></i><?php echo langHdl('see_logs'); ?></li>' +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-action=\"qrcode\"><i class=\"fas fa-qrcode mr-2\"></i><?php echo langHdl('user_ga_code'); ?></li>' +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-fullname=\"' + $(data).data('fullname') + '\"data-action=\"access-rights\"><i class=\"fas fa-sitemap mr-2\"></i><?php echo langHdl('user_folders_rights'); ?></li>' +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-fullname=\"' + $(data).data('fullname') + '\"data-action=\"disable-user\"><i class=\"fas fa-user-slash text-warning mr-2\" disabled></i><?php echo langHdl('disable_enable'); ?></li>' +\n                        '<li class=\"dropdown-item pointer tp-action\" data-id=\"' + $(data).data('id') + '\" data-fullname=\"' + $(data).data('fullname') + '\"data-action=\"delete-user\"><i class=\"fas fa-user-minus text-danger mr-2\" disabled></i><?php echo langHdl('delete'); ?></li>' +\n                        '</ul>' +\n                        '</div>';\n                }\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                className: 'dt-body-left'\n            },\n            {\n                'width': '70px',\n                className: 'dt-body-center'\n            },\n            {\n                'width': '70px',\n                className: 'dt-body-center'\n            },\n            {\n                'width': '70px',\n                className: 'dt-body-center'\n            }\n        ],\n        'preDrawCallback': function() {\n            toastr.info(\n                '<?php echo langHdl('loading'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i><span class=\"close-toastr-progress\"></span>',\n                ''\n            );\n        },\n        'drawCallback': function() {\n            // Tooltips\n            $('.infotip').tooltip();\n\n            // Remove progress toast\n            $('.toast').remove();\n        },\n        /*'createdRow': function( row, data, dataIndex ) {\n            var newClasses = $(data[6]).filter('#row-class-' + dataIndex).val();\n            $(row).addClass(newClasses);\n        }*/\n    });\n\n\n\n    $('#form-email').change(function() {\n        //extract domain from email\n        var domain = $(this).val().split('@')[1];\n        if (domain === undefined) {\n            return false;\n        }\n        domain = domain.toLowerCase()\n\n        //check if domain exists\n        $.post(\"sources/users.queries.php\", {\n                type: \"check_domain\",\n                domain: domain\n            },\n            function(data) {\n                data = $.parseJSON(data);\n                if (debugJavascript === true) console.log(data);\n\n                $(\"#new_folder_role_domain\").attr(\"disabled\", \"disabled\");\n                if (data.folder === 'not_exists' && data.role === 'not_exists' && domain !== '') {\n                    $('#form-create-special-folder').iCheck('enable');\n                    $('#form-special-folder').val(domain);\n                } else {\n                    $('#form-create-special-folder').iCheck('disable');\n                    $('#form-special-folder').val('');\n                }\n            }\n        );\n    });\n\n\n\n    /**\n     * \n     */\n    // Fires when user click on button SEND\n    $(document).on('click', '#warningModalButtonClose', function() {\n        // check if uform is the one expected\n        if ($('#warningModal-button-user-pwd').length === 0) {\n            return false;\n        } \n        if (debugJavascript === true) console.log('Closing warning dialog')\n        toastr.remove();\n        $('#warningModal').modal('hide');\n\n        // Fianlize UI\n        // clear form fields\n        $(\".clear-me\").val('');\n        $('.select2').val('').change();\n        //$('#privilege-user').iCheck('check');\n        $('.form-check-input')\n            .iCheck('disable')\n            .iCheck('uncheck');\n\n        // refresh table content\n        oTable.ajax.reload();\n\n        // Show list of users\n        $('#row-form').addClass('hidden');\n        $('#row-list').removeClass('hidden');\n    });\n\n\n    /**\n     * \n     */\n    // Fires when user click on button SEND\n    $(document).on('click', '#warningModalButtonAction', function() {\n        // check if uform is the one expected\n        if ($('#warningModal-button-user-pwd').length === 0) {\n            return false;\n        } \n        //console.log('send email for '+store.get('teampassUser').admin_new_user_temporary_encryption_code)\n        //console.log(store.get('teampassUser'))\n        //console.log(store.get('teampassApplication'))\n\n        showModalDialogBox(\n            '#warningModal',\n            '<i class=\"fas fa-user-shield fa-lg warning mr-2\"></i><?php echo langHdl('caution'); ?>',\n            '<?php echo langHdl('sending_email_message'); ?>',\n            '',\n            '',\n            true,\n            false,\n            false\n        );\n\n        // Prepare data\n        if (store.get('teampassApplication').formUserAction === \"add_new_user\") {\n            var data = {\n                'receipt': $('#form-email').val(),\n                'subject': 'TEAMPASS - <?php echo langHdl('temporary_encryption_code');?>',\n                'body': '<?php echo langHdl('email_body_new_user');?>',\n                'pre_replace' : {\n                    '#code#' : store.get('teampassUser').admin_new_user_temporary_encryption_code,\n                    '#login#' : store.get('teampassUser').admin_new_user_login,\n                    '#password#' : store.get('teampassUser').admin_new_user_password,\n                }\n            }\n        } else {\n            var data = {\n                'receipt': $('#form-email').val(),\n                'subject': 'TEAMPASS - <?php echo langHdl('temporary_encryption_code');?>',\n                'body': '<?php echo langHdl('email_body_temporary_encryption_code');?>',\n                'pre_replace' : {\n                    '#enc_code#' : store.get('teampassUser').admin_new_user_temporary_encryption_code,\n                }\n            }\n        }\n\n        // Launch action\n        $.post(\n            'sources/main.queries.php', {\n                type: 'mail_me',\n                type_category: 'action_mail',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                //console.log(data);\n\n                if (data.error !== false) {\n                    $('#warningModal').modal('hide');\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Fianlize UI\n                    // clear form fields\n                    $(\".clear-me\").val('');\n                    $('.select2').val('').change();\n                    //$('#privilege-user').iCheck('check');\n                    $('.form-check-input')\n                        .iCheck('disable')\n                        .iCheck('uncheck');\n\n                    // Show list of users\n                    $('#row-form').addClass('hidden');\n                    $('#row-list').removeClass('hidden');\n\n                    // Hide dialogbox\n                    $('#warningModal').modal('hide');\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n\n                    // change the user status to ready to use\n                    data = {\n                        'user_id': store.get('teampassUser').admin_new_user_id,\n                    }\n\n                    $.post(\n                        'sources/main.queries.php', {\n                            type: 'user_is_ready',\n                            type_category: 'action_user',\n                            data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            key: '<?php echo $_SESSION['key']; ?>'\n                        },\n                        function(data) {\n                            if (debugJavascript === true) console.log('User has been created');\n\n                            // refresh table content\n                            oTable.ajax.reload();\n\n                            // Remove action from store\n                            if (debugJavascript === true) console.log('Clear Store variables')\n                            store.update(\n                                'teampassApplication',\n                                function(teampassApplication) {\n                                    teampassApplication.formUserAction = '',\n                                    teampassApplication.formUserId = '';\n                                }\n                            );\n                            store.update(\n                                'teampassUser',\n                                function(teampassUser) {\n                                    teampassUser.admin_new_user_password = '',\n                                    teampassUser.admin_new_user_temporary_encryption_code = '',\n                                    teampassUser.admin_new_user_login = '';\n                                }\n                            );\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * BUILD AND CHECK THE USER LOGIN\n     */\n    $('.build-login').change(function() {\n        // Build login only if it is empty\n        if ($(\"#form-login\").val() === '') {\n            //return false;\n        }\n        // Build login\n        if ($(this).attr('id') !== 'form-login') {\n            $(\"#form-login\").val(\n                $(\"#form-name\")\n                .val()\n                .toLowerCase()\n                .replace(/ /g, \"\") + \".\" + $(\"#form-lastname\").val().toLowerCase().replace(/ /g, \"\")\n            );\n        }\n\n        // Check if login exists\n        $.post(\n            'sources/users.queries.php', {\n                type: 'is_login_available',\n                login: $('#form-login').val(),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // Show result\n                    if (data.login_exists === 0) {\n                        $('#form-login')\n                            .removeClass('is-invalid')\n                            .addClass('is-valid');\n                        $('#form-login-conform').val(true);\n                    } else {\n                        $('#form-login')\n                            .removeClass('is-valid')\n                            .addClass('is-invalid');\n                        $('#form-login-conform').val(false);\n                    }\n                }\n            }\n        );\n    });\n\n\n    function userTasksCreation(userId, userPassword, userTemporaryCode)\n    {\n        var data = {\n            user_id: userId,\n            user_pwd: userPassword,\n            user_code: userTemporaryCode,\n        }\n\n        // Do query\n        $.post(\n            \"sources/users.queries.php\", {\n                type: \"create_new_user_tasks\",\n                data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                if (debugJavascript === true)  {\n                    console.info(\"R\u00e9ception des donn\u00e9es :\")\n                    console.log(data);\n                }\n                \n                if (data.error === true) {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n\n                    dfd.reject();\n                } else {\n                    // show message to user\n                    $('#warningModal').modal('hide');\n\n                    // Inform user\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 2000\n                        }\n                    );\n\n                    // Reload list of users\n                    oTable.ajax.reload();\n\n                    // Prepare UI\n                    $('#row-list, #group-create-special-folder, #group-delete-user').removeClass('hidden');\n                    $('#row-form').addClass('hidden');\n                }\n            }\n        );\n    }\n\n    /**\n     * \n     */\n    // Launch recursive action to encrypt the keys\n    function callRecursiveUserDataEncryption(\n        userId,\n        step,\n        start\n    ) {\n        var dfd = $.Deferred();\n        ProcessInProgress = true;\n        \n        var stepText = '';\n        if (debugJavascript === true) console.log('Performing '+step)\n\n        // Prepare progress string\n        if (step === 'step0') {\n            stepText = '<?php echo langHdl('inititialization'); ?>';\n        } else if (step === 'step1') {\n            stepText = '<?php echo langHdl('items'); ?>';\n        } else if (step === 'step2') {\n            stepText = '<?php echo langHdl('logs'); ?>';\n        } else if (step === 'step3') {\n            stepText = '<?php echo langHdl('suggestions'); ?>';\n        } else if (step === 'step4') {\n            stepText = '<?php echo langHdl('fields'); ?>';\n        } else if (step === 'step5') {\n            stepText = '<?php echo langHdl('files'); ?>';\n        } else if (step === 'step6') {\n            stepText = '<?php echo langHdl('personal_items'); ?>';\n        }\n\n        if (step !== 'finished') {\n            if (store.get('teampassUser').related_items_number !== null) {\n                $nbItemsToConvert = \" / \" + store.get('teampassUser').related_items_number;\n            } else {\n                $nbItemsToConvert = '';\n            }\n            // Inform user\n            $(\"#warningModalBody\").html('<b><?php echo langHdl('encryption_keys'); ?> - ' +\n                stepText + '</b> [' + start + ' - ' + (parseInt(start) + <?php echo NUMBER_ITEMS_IN_BATCH;?>) + ']<span id=\"warningModalBody_extra\">' + $nbItemsToConvert + '</span> ' +\n                '... <?php echo langHdl('please_wait'); ?><i class=\"fas fa-spinner fa-pulse ml-3 text-primary\"></i>');\n\n            // If expected, show the OPT to the admin\n            if (constVisibleOTP === true) {\n                toastr.info(\n                    '<?php echo langHdl('show_encryption_code_to_admin');?> <div><input class=\"form-control form-item-control flex-nowrap\" value=\"' + userTemporaryCode + '\" readonly></div>'\n                    + '<br /><button type=\"button\" class=\"btn clear\"><?php echo langHdl('close');?></button>',\n                    '<?php echo langHdl('information'); ?>',\n                    {\n                        extendedTimeOut: 0,\n                        timeOut: 0,\n                        tapToDismiss: false,\n                        newestOnTop: true,\n                        preventDuplicates: true,\n                        onHidden: (toast) => {\n                            // prevent against multiple occurances (#3305)\n                            constVisibleOTP = false;\n                        },\n                    }\n                );\n            }\n\n            var data = {\n                action: step,\n                start: start,\n                length: <?php echo NUMBER_ITEMS_IN_BATCH;?>,\n                user_id: userId,\n            }\n            if (debugJavascript === true) {\n                console.info(\"Envoi des donn\u00e9es :\")\n                console.log(data);\n            }\n\n            // Do query\n            $.post(\n                \"sources/main.queries.php\", {\n                    type: \"user_sharekeys_reencryption_next\",\n                    type_category: 'action_key',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                    if (debugJavascript === true) {\n                        console.info(\"R\u00e9ception des donn\u00e9es :\")\n                        console.log(data);\n                    }\n                    \n                    if (data.error === true) {\n                        // error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n\n                        dfd.reject();\n                    } else {\n                        // Prepare variables\n                        userId = data.userId;\n                        step = data.step;\n                        start = data.start;\n\n                        // Do recursive call until step = finished\n                        callRecursiveUserDataEncryption(\n                            userId,\n                            step,\n                            start\n                        ).done(function(response) {\n                            dfd.resolve(response);\n                        });\n                    }\n                }\n            );\n        } else {\n            // Ask user\n            showModalDialogBox(\n                '#warningModal',\n                '<i class=\"fas fa-envelope-open-text fa-lg warning mr-2\"></i><?php echo langHdl('information'); ?>',\n                '<i class=\"fas fa-info-circle mr-2\"></i><?php echo langHdl('send_user_password_by_email'); ?>'+\n                '<div class=\"row\">'+\n                    (store.get('teampassApplication').formUserAction === \"add_new_user\" ?\n                    '<div class=\"col-lg-2\"><button type=\"button\" class=\"btn btn-block btn-secondary mr-2\"  id=\"warningModal-button-user-pwd\"><?php echo langHdl('show_user_password'); ?></button></div>'+\n                    '<div class=\"col-lg-4 hidden\" id=\"warningModal-user-pwd\"><div><?php echo langHdl('user_password'); ?><input class=\"form-control form-item-control\" value=\"'+store.get('teampassUser').admin_new_user_password+'\"></div>'+\n                    '<div><?php echo langHdl('user_temporary_encryption_code'); ?><input class=\"form-control form-item-control\" value=\"'+store.get('teampassUser').admin_new_user_temporary_encryption_code+'\"></div></div>'\n                    :\n                    '<div class=\"col-lg-2\"><button type=\"button\" class=\"btn btn-block btn-secondary mr-2\"  id=\"warningModal-button-user-pwd\"><?php echo langHdl('show_user_temporary_encryption_code'); ?></button></div>'+\n                    '<div class=\"col-lg-4 hidden\" id=\"warningModal-user-pwd\"><input class=\"form-control form-item-control\" value=\"'+store.get('teampassUser').admin_new_user_temporary_encryption_code+'\"></div></div>'\n                    )+\n                '</div>',\n                '<?php echo langHdl('send_by_email'); ?>',\n                '<?php echo langHdl('close'); ?>',\n                true,\n                false,\n                false\n            );\n            $('#warningModal').modal('show');\n\n            $(document).on('click', '#warningModal-button-user-pwd', function() {\n                $('#warningModal-user-pwd').removeClass('hidden');\n                $('#warningModal-button-user-pwd').prop( \"disabled\", true );\n                setTimeout(\n                    () => {\n                        $('#warningModal-user-pwd').addClass('hidden');\n                        $('#warningModal-button-user-pwd').prop( \"disabled\", false );\n                    },\n                    5000\n                );\n            });\n\n            ProcessInProgress = false;\n        }\n        return dfd.promise();\n    }\n\n\n\n    /**\n     * TOP MENU BUTTONS ACTIONS\n     */\n    $(document).on('click', '.tp-action', function() {\n        // Ensure that password strength indicator is reseted\n        //$('#form-password').focus();\n\n        // Hide if user is not admin\n        if (parseInt(store.get('teampassUser').user_admin) === 1 || parseInt(store.get('teampassUser').user_can_manage_all_users) === 1) {\n            $('.only-admin').removeClass('hidden');\n        } else {\n            $('.only-admin').addClass('hidden');\n        }\n\n        if ($(this).data('action') === 'new') {\n            // ADD NEW USER\n            $('#row-list').addClass('hidden');\n            $('#row-form, #group-create-special-folder, .not-for-admin').removeClass('hidden');\n\n            // HIDE FROM FORM ELEMENTS ONLY FOR ADMIN\n            if (parseInt(store.get('teampassUser').user_admin) === 1) {\n                $('input[type=radio].only-admin').iCheck('enable');\n            } else if (parseInt(store.get('teampassUser').user_can_manage_all_users) === 1) {\n                $('input[type=radio].only-admin').iCheck('enable');\n                $('#privilege-admin').iCheck('disable');\n                $('#privilege-hr').iCheck('disable');\n            } else {\n                $('#privilege-admin').iCheck('disable');\n                $('#privilege-hr').iCheck('disable');\n                $('#privilege-manager').iCheck('disable');\n            }\n\n            // Prepare checks\n            $('#privilege-user').iCheck('check');\n            $('#form-create-special-folder').iCheck('disable');\n\n            // Personal folder\n            if (store.get('teampassSettings').enable_pf_feature === '1') {\n                $('#form-create-personal-folder')\n                    .iCheck('enable')\n                    .iCheck('check');\n            } else {\n                $('#form-create-personal-folder').iCheck('disable');\n            }\n            \n            // MFA enabled\n            if (store.get('teampassSettings').duo === '1' || store.get('teampassSettings').google_authentication === '1') {\n                $('#form-create-mfa-enabled')\n                    .iCheck('enable')\n                    .iCheck('check');\n                $('#form-create-mfa-enabled-div').removeClass('hidden');\n            } else {\n                $('#form-create-mfa-enabled').iCheck('disable');\n                $('#form-create-mfa-enabled-div').addClass('hidden');\n            }\n\n            // What type of form? Edit or new user\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.formUserAction = 'add_new_user';\n                }\n            );\n\n        } else if ($(this).data('action') === 'edit') {\n            // SHow user\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // EDIT EXISTING USER\n            $('#row-list, #group-create-special-folder, #group-delete-user').addClass('hidden');\n            $('#row-form').removeClass('hidden');\n            $('.form-check-input').iCheck('enable');\n\n            // Personal folder\n            if (parseInt(store.get('teampassSettings').enable_pf_feature) === 0) {\n                $('#form-create-personal-folder').iCheck('disable');\n            }\n\n            // HIDE FROM FORM ELEMENTS ONLY FOR ADMIN\n            if (parseInt(store.get('teampassUser').user_admin) === 1) {\n                $('input[type=radio].only-admin').iCheck('enable');\n            } else {\n                $('input[type=radio].only-admin').iCheck('disable');\n            }\n\n            // What type of form? Edit or new user\n            var userID = $(this).data('id');\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.formUserAction = 'store_user_changes',\n                        teampassApplication.formUserId = userID; // Store user ID   \n                }\n            );\n\n            var data = {\n                'user_id': userID,\n            };\n\n            $.post(\n                \"sources/users.queries.php\", {\n                    type: \"get_user_info\",\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error === false) {\n                        // Prefil with user data\n                        $('#form-login').val(data.login);\n                        $('#form-email').val(data.email);\n                        $('#form-name').val(data.name);\n                        $('#form-lastname').val(data.lastname);\n                        $('#form-create-root-folder').iCheck(data.can_create_root_folder === 1 ? 'check' : 'uncheck');\n                        $('#form-create-personal-folder').iCheck(data.personal_folder === 1 ? 'check' : 'uncheck');\n                        $('#form-create-mfa-enabled').iCheck(data.mfa_enabled === 1 ? 'check' : 'uncheck');\n\n                        // Case of user locked\n                        if (data.disabled === 1) {\n                            $('#group-delete-user').removeClass('hidden');\n                            $('#form-delete-user-confirm').iCheck('uncheck');\n                        }\n\n                        // Clear selects\n                        $('#form-roles, #form-managedby, #form-auth, #form-forbid')\n                            .find('option')\n                            .remove();\n\n                        var tmp = '';\n                        $(data.foldersAllow).each(function(i, value) {\n                            tmp += '<option value=\"' + value.id + '\" ' + value.selected + '>' + value.title + '</option>';\n                        });\n                        $('#form-auth').append(tmp);\n\n                        tmp = '';\n                        $(data.foldersForbid).each(function(i, value) {\n                            tmp += '<option value=\"' + value.id + '\" ' + value.selected + '>' + value.title + '</option>';\n                        });\n                        $('#form-forbid').append(tmp);\n\n                        tmp = '';\n                        $(data.managedby).each(function(i, value) {\n                            tmp += '<option value=\"' + value.id + '\" ' + value.selected + '>' + value.title + '</option>';\n                        });\n                        $('#form-managedby').append(tmp);\n\n                        tmp = '';\n                        $(data.function).each(function(i, value) {\n                            tmp += '<option value=\"' + value.id + '\" ' + value.selected + '>' + value.title + '</option>';\n                        });\n                        $('#form-roles').append(tmp);\n\n                        // Generate select2\n                        $('#form-roles, #form-managedby, #form-auth, #form-forbid').select2();\n\n                        // User's current privilege\n                        if (data.admin === 1) {\n                            $('#privilege-admin').iCheck('check');\n                            $('.not-for-admin').addClass('hidden');\n                        } else if (data.can_manage_all_users === 1) {\n                            $('#privilege-hr').iCheck('check');\n                            $('.not-for-admin').removeClass('hidden');\n                        } else if (data.gestionnaire === 1) {\n                            $('#privilege-manager').iCheck('check');\n                            $('.not-for-admin').removeClass('hidden');\n                        } else if (data.read_only === 1) {\n                            $('#privilege-ro').iCheck('check');\n                            $('.not-for-admin').removeClass('hidden');\n                        } else {\n                            $('#privilege-user').iCheck('check');\n                            $('.not-for-admin').removeClass('hidden');\n                        }\n\n                        $('input:radio[name=privilege]').on('ifChanged', function() {\n                            userDidAChange = true;\n                            $(this).data('change-ongoing', true);\n                        });\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    } else {\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                        return false;\n                    }\n                }\n            );\n        } else if ($(this).data('action') === 'submit') {\n            // Loop on all changed fields\n            var arrayQuery = [];\n            $('.form-control').each(function(i, obj) {\n                if ($(this).data('change-ongoing') === true\n                    //|| $('#form-password').val() !== 'do_not_change'\n                ) {\n                    arrayQuery.push({\n                        'field': $(this).prop('id'),\n                        'value': $(this).val(),\n                    });\n                }\n            });\n\n            // Sanitize text fields\n            let formLogin = fieldSanitizeStep1('#form-login', false, false, false),\n                formName = fieldSanitizeStep1('#form-name', false, false, false),\n                formLastname = fieldSanitizeStep1('#form-lastname', false, false, false),\n                formEmail = fieldSanitizeStep1('#form-email', false, false, false);\n            if (formLogin === false || formName === false || formLastname === false || formEmail === false) {\n                // Label is empty\n                toastr.remove();\n                toastr.warning(\n                    'XSS attempt detected. Field has been emptied.',\n                    'Error', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n                return false;\n            }\n\n            if (arrayQuery.length > 0) {\n                // Now save\n                // get lists\n                var forbidFld = [],\n                    authFld = [],\n                    groups = [];\n                $(\"#form-roles option:selected\").each(function() {\n                    groups.push($(this).val())\n                });\n                $(\"#form-auth option:selected\").each(function() {\n                    authFld.push($(this).val())\n                });\n                $(\"#form-forbid option:selected\").each(function() {\n                    forbidFld.push($(this).val())\n                });\n\n                // Mandatory?\n                var validated = true,\n                    validEmailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n                $('.required').each(function(i, obj) {\n                    if ($(this).val() === '' && $(this).hasClass('select2') === false) {\n                        $(this).addClass('is-invalid');\n                        validated = false;\n                    } else if ($('#' + $(this).attr('id') + ' :selected').length === 0 && $(this).hasClass('select2') === true) {\n                        $('#' + $(this).attr('id') + ' + span').addClass('is-invalid');\n                        validated = false;\n                    } else if ($(this).hasClass('validate-email') === true) {\n                        if ($(this).val().match(validEmailRegex)) {\n                            $(this).removeClass('is-invalid');\n                        } else {\n                            $(this).addClass('is-invalid');\n                            validated = false;\n                        }\n                    } else {\n                        $(this).removeClass('is-invalid');\n                        $('#' + $(this).attr('id') + ' + span').removeClass('is-invalid');\n                    }\n                });\n                if (validated === false) {\n                    toastr.remove();\n                    toastr.error(\n                        '<?php echo langHdl('fields_with_mandatory_information_are_missing'); ?>',\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                    return false;\n                }\n\n                // SHow user\n                toastr.remove();\n                toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n                // Get number of items to treat\n                data_tmp = {\n                    'user_id': <?php echo $_SESSION['user_id']; ?>,\n                }\n                $.post(\n                    'sources/main.queries.php', {\n                        type: 'get_number_of_items_to_treat',\n                        type_category: 'action_system',\n                        data: prepareExchangedData(JSON.stringify(data_tmp), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data_tmp) {\n                        data_tmp = prepareExchangedData(data_tmp, 'decode', '<?php echo $_SESSION['key']; ?>');\n\n                        store.update(\n                            'teampassUser',\n                            function(teampassUser) {\n                                teampassUser.related_items_number = data_tmp.nbItems;\n                            }\n                        );\n                    }\n                );\n\n                //prepare data\n                var data = {\n                    'user_id': store.get('teampassApplication').formUserId,\n                    'login': formLogin,\n                    'name': formName,\n                    'lastname': formLastname,\n                    'email': formEmail,\n                    'admin': $('#privilege-admin').prop('checked'),\n                    'manager': $('#privilege-manager').prop('checked'),\n                    'hr': $('#privilege-hr').prop('checked'),\n                    'read_only': $('#privilege-ro').prop('checked'),\n                    'personal_folder': $('#form-create-personal-folder').prop('checked'),\n                    'new_folder_role_domain': $('#form-create-special-folder').prop('checked'),\n                    'domain': $('#form-special-folder').val(),\n                    'isAdministratedByRole': $('#form-managedby').val(),\n                    'groups': groups,\n                    'allowed_flds': authFld,\n                    'forbidden_flds': forbidFld,\n                    'action_on_user': 'update',\n                    'form-create-root-folder': $('#form-create-root-folder').prop('checked'),\n                    'form-user-disabled': $('#form-user-disabled').prop('checked'),\n                    'mfa_enabled': $('#form-create-mfa-enabled').prop('checked'),\n                };\n                if (debugJavascript === true) {\n                    console.log(data);\n                    console.log(store.get('teampassApplication').formUserAction);\n                }                \n                var formUserId = store.get('teampassApplication').formUserId;\n                \n                $.post(\n                    'sources/users.queries.php', {\n                        type: store.get('teampassApplication').formUserAction,\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: \"<?php echo $_SESSION['key']; ?>\"\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) console.log(data);\n\n                        if (data.error !== false) {\n                            // Show error\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '<?php echo langHdl('caution'); ?>', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                        } else if (store.get('teampassApplication').formUserAction === 'add_new_user') {\n                            // Inform user\n                            toastr.remove();\n                            toastr.success(\n                                '<?php echo langHdl('new_user_info_by_mail'); ?>',\n                                '', {\n                                    timeOut: 4000\n                                }\n                            );\n                            // ---\n                        } else {\n                            // Inform user\n                            toastr.remove();\n                            toastr.success(\n                                '<?php echo langHdl('done'); ?>',\n                                '', {\n                                    timeOut: 2000\n                                }\n                            );\n                        }\n\n                        // Reload list of users\n                        oTable.ajax.reload();\n\n                        // Prepare UI\n                        $('#row-list, #group-create-special-folder, #group-delete-user').removeClass('hidden');\n                        $('#row-form').addClass('hidden');\n\n                        // Clean form\n                        $('.clear-me').val('');\n                        $('.select2').val('').change();\n                        $('.extra-form, #row-folders').addClass('hidden');\n                        $('#row-list').removeClass('hidden');\n\n                        // Prepare checks\n                        $('.form-check-input').iCheck('uncheck');\n\n                        // Remove action from store\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.formUserAction = '',\n                                    teampassApplication.formUserId = '';\n                            }\n                        );\n                    }\n                )\n            } else {\n                // No change performed on form\n                toastr.remove();\n                toastr.success(\n                    '<?php echo langHdl('no_change_performed'); ?>',\n                    '', {\n                        timeOut: 1000\n                    }\n                );\n            }\n        } else if ($(this).data('action') === 'cancel') {\n            $('.clear-me').val('');\n            $('.select2').val('').change();\n            $('.extra-form, #row-folders').addClass('hidden');\n            $('#row-list').removeClass('hidden');\n\n            // Prepare checks\n            $('.form-check-input').iCheck('uncheck');\n\n            // Remove action from store\n            store.update(\n                'teampassApplication',\n                function(teampassApplication) {\n                    teampassApplication.formUserAction = '',\n                        teampassApplication.formUserId = '';\n                }\n            );\n        } else if ($(this).data('action') === 'qrcode') {\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // This sends a GA Code by email to user\n            data = {\n                'user_id': $(this).data('id'),\n                'demand_origin': 'users_management_list',\n                'send_email': 1\n            }\n\n            $.post(\n                'sources/main.queries.php', {\n                    type: 'ga_generate_qr',\n                    type_category: 'action_user',\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('share_sent_ok'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n            // ---\n        } else if ($(this).data('action') === 'new-password') {\n            var userId = $(this).data('id');\n            // Check if no tasks on-going for this user\n            data_to_send = {\n                'user_id': userId,\n            }\n            $.post(\n                \"sources/users.queries.php\", {\n                    type: \"get-user-infos\",\n                    data: prepareExchangedData(JSON.stringify(data_to_send), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    \n                    if (data.error === true) {\n                        // error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Continue   \n                        if (data.user_infos.ongoing_process_id !== null) {  \n                            toastr.remove();\n                            toastr.warning(\n                                data.message,\n                                '<?php echo langHdl('user_encryption_ongoing'); ?>', {\n                                    timeOut: 10000,\n                                    progressBar: true\n                                }\n                            ); \n                        } else {                 \n                            // HIde\n                            $('.content-header, .content').addClass('hidden');\n\n                            // PRepare info\n                            $('#dialog-admin-change-user-password-info')\n                                .html('<i class=\"icon fas fa-info mr-2\"></i><?php echo langHdl('admin_change_user_password_info'); ?>');\n                            $(\"#dialog-admin-change-user-password-progress\").html('<?php echo langHdl('provide_current_psk_and_click_launch'); ?>');\n\n                            // SHow form\n                            $('#dialog-admin-change-user-password').removeClass('hidden');\n\n                            $('#admin_change_user_password_target_user').val(userId);\n                        }\n                    }\n                }\n            );\n\n            // ---\n        } else if ($(this).data('action') === 'new-enc-code') {\n            // HIde\n            $('.content-header, .content').addClass('hidden');\n\n            // PRepare info\n            $('#dialog-admin-change-user-password-info')\n                .html('<i class=\"icon fas fa-info mr-2\"></i><?php echo langHdl('admin_change_user_encryption_code_info'); ?>');\n            $(\"#dialog-admin-change-user-password-progress\").html('<?php echo langHdl('provide_current_psk_and_click_launch'); ?>');\n\n            // SHow form\n            $('#dialog-admin-change-user-password').removeClass('hidden');\n\n            $('#admin_change_user_encryption_code_target_user').val($(this).data('id'));\n            // ---\n        } else if ($(this).data('action') === 'logs') {\n            $('#row-list, #row-folders').addClass('hidden');\n            $('#row-logs').removeClass('hidden');\n            $('#row-logs-title').text(\n                $(this).data('fullname')\n            )\n            var userID = $(this).data('id');\n\n            //Launch the datatables pluggin\n            var oTableLogs = $('#table-logs').DataTable({\n                'destroy': true,\n                'paging': true,\n                'searching': true,\n                'order': [\n                    [1, 'asc']\n                ],\n                'info': true,\n                'processing': false,\n                'serverSide': true,\n                'responsive': true,\n                'select': true,\n                'stateSave': false,\n                'retrieve': false,\n                'autoWidth': true,\n                'ajax': {\n                    url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/user.logs.datatables.php',\n                    data: function(d) {\n                        d.userId = userID;\n                    }\n                },\n                'language': {\n                    'url': '<?php echo $SETTINGS['cpassman_url']; ?>/includes/language/datatables.<?php echo $_SESSION['user']['user_language']; ?>.txt'\n                },\n                'columns': [{\n                        className: 'dt-body-left'\n                    },\n                    {\n                        className: 'dt-body-left'\n                    },\n                    {\n                        className: 'dt-body-left'\n                    }\n                ],\n                'preDrawCallback': function() {\n                    toastr.remove();\n                    toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n                },\n                'drawCallback': function() {\n                    // Tooltips\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                },\n            });\n\n\n        } else if ($(this).data('action') === 'access-rights') {\n            $('#row-list, #row-logs').addClass('hidden');\n            $('#row-folders').removeClass('hidden');\n            $('#row-folders-title').text(\n                $(this).data('fullname')\n            )\n            var userID = $(this).data('id');\n\n            // Show spinner\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            $('#row-folders-results').html('');\n\n            // Send query\n            $.post(\n                'sources/users.queries.php', {\n                    type: 'user_folders_rights',\n                    user_id: userID,\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Show table\n                        $('#row-folders-results').html(data.html);\n\n                        // Prepare tooltips\n                        $('.infotip').tooltip();\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'disable-user') {\n            var userID = $(this).data('id');\n            showModalDialogBox(\n                '#warningModal',\n                '<i class=\"fas fa-exclamation-circle fa-lg warning mr-2\"></i><?php echo langHdl('your_attention_please'); ?>',\n                '<div class=\"form-group\">'+\n                    '<span class=\"mr-3\"><?php echo langHdl('user_disable_status'); ?></span>'+\n                    '<input type=\"checkbox\" class=\"form-check-input form-control flat-blue\" id=\"user-disabled\">' +\n                '</div>',\n                '<?php echo langHdl('perform'); ?>',\n                '<?php echo langHdl('cancel'); ?>'\n            );\n            $('input[type=\"checkbox\"].flat-blue').iCheck({\n                checkboxClass: 'icheckbox_flat-blue',\n            });\n            $(document).on('click', '#warningModalButtonAction', function() {                \n\n                // Show spinner\n                toastr.remove();\n                toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n                $('#warningModal').modal('hide');\n\n                var data = {\n                    'user_id': userID,\n                    'disabled_status': $('#user-disabled').prop('checked') === true ? 1 : 0,\n                };\n\n                // Send query\n                $.post(\n                    'sources/users.queries.php', {\n                        type: 'manage_user_disable_status',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) console.log(data);\n\n                        if (data.error !== false) {\n                            // Show error\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '<?php echo langHdl('caution'); ?>', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                        } else {\n                            // Show icon or not\n                            if ($('#user-disabled').prop('checked') === true) {\n                                $('#user-login-'+userID).before('<i class=\"fas fa-user-slash infotip text-danger mr-2\" title=\"<?php echo langHdl('account_is_locked');?>\" id=\"user-disable-'+userID+'\"></i>');\n                            } else {\n                                $('#user-disable-'+userID).remove();\n                            }\n                            \n\n                            // Prepare tooltips\n                            $('.infotip').tooltip();\n                            // Inform user\n                            toastr.remove();\n                            toastr.success(\n                                '<?php echo langHdl('done'); ?>',\n                                '', {\n                                    timeOut: 1000\n                                }\n                            );\n                        }\n                    }\n                );\n            });\n\n            /**/\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'delete-user') {\n            var userID = $(this).data('id');\n            showModalDialogBox(\n                '#warningModal',\n                '<i class=\"fas fa-exclamation-circle fa-lg warning mr-2\"></i><?php echo langHdl('your_attention_please'); ?>',\n                '<div class=\"form-group\">'+\n                    '<span class=\"mr-3\"><?php echo langHdl('by_clicking_this_checkbox_confirm_user_deletion'); ?></span>'+\n                    '<input type=\"checkbox\" class=\"form-check-input form-control flat-blue\" id=\"user-to-delete\">' +\n                '</div>',\n                '<?php echo langHdl('perform'); ?>',\n                '<?php echo langHdl('cancel'); ?>'\n            );\n            $('input[type=\"checkbox\"].flat-blue').iCheck({\n                checkboxClass: 'icheckbox_flat-blue',\n            });\n            $(document).on('click', '#warningModalButtonAction', function() {\n                if ($('#user-to-delete').prop('checked') === false) {\n                    $('#warningModal').modal('hide');\n                    return false;\n                }             \n\n                // Show spinner\n                toastr.remove();\n                toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n                $('#warningModal').modal('hide');\n\n                var data = {\n                    'user_id': userID,\n                };\n\n                // Send query\n                $.post(\n                    'sources/users.queries.php', {\n                        type: 'delete_user',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) console.log(data);\n\n                        if (data.error !== false) {\n                            // Show error\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '<?php echo langHdl('caution'); ?>', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                        } else {\n                            // refresh table content\n                            oTable.ajax.reload();\n\n                            // Prepare tooltips\n                            $('.infotip').tooltip();\n                            // Inform user\n                            toastr.remove();\n                            toastr.success(\n                                '<?php echo langHdl('done'); ?>',\n                                '', {\n                                    timeOut: 1000\n                                }\n                            );\n                        }\n                    }\n                );\n            });\n\n            /**/\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'refresh') {\n            $('.form').addClass('hidden');\n            $('#users-list').removeClass('hidden');\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n            oTable.ajax.reload();\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'propagate') {\n            $('#row-list, #row-folders').addClass('hidden');\n            $('#row-propagate').removeClass('hidden');\n\n            // Show spinner\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n            // Load list of users\n            $.post(\n                'sources/users.queries.php', {\n                    type: 'get_list_of_users_for_sharing',\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                    if (debugJavascript === true) console.log(data);\n\n                    if (data.error !== false) {\n                        // Show error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Build select\n                        var html = '';\n                        $.each(data.values, function(i, value) {\n                            html += '<option value=\"' + value.id + '\" data-groups=\"' + value.groups + '\" data-managed-by=\"' + value.managedBy + '\" data-folders-allowed=\"' + value.foldersAllowed + '\" data-folders-forbidden=\"' + value.foldersForbidden + '\" data-groups-id=\"' + value.groupIds + '\" data-managed-by-id=\"' + value.managedById + '\" data-folders-allowed-id=\"' + value.foldersAllowedIds + '\" data-folders-forbidden-id=\"' + value.foldersForbiddenIds + '\" data-admin=\"' + value.admin + '\" data-manager=\"' + value.manager + '\" data-hr=\"' + value.hr + '\" data-read-only=\"' + value.readOnly + '\" data-personal-folder=\"' + value.personalFolder + '\" data-root-folder=\"' + value.rootFolder + '\">' + value.name + ' ' + value.lastname + ' [' + value.login + ']</option>';\n                        });\n\n                        $('#propagate-from, #propagate-to')\n                            .find('option')\n                            .remove()\n                            .end()\n                            .append(html)\n                            .change();\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'do-propagate') {\n            // Show spinner\n            toastr.remove();\n            toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n\n            // destination users\n            var userIds = $('#propagate-to').val();\n\n            if (userIds.length === 0) return false;\n\n            // Prepare data\n            var data = {\n                source_id: $(\"#propagate-from option:selected\").val(),\n                destination_ids: userIds,\n                user_functions: $(\"#propagate-from option:selected\").data('groups-id'),\n                user_managedby: $(\"#propagate-from option:selected\").data('managed-by-id'),\n                user_fldallowed: $(\"#propagate-from option:selected\").data('folders-allowed-id'),\n                user_fldforbid: $(\"#propagate-from option:selected\").data('folders-forbidden-id'),\n                user_admin: $(\"#propagate-from option:selected\").data('admin'),\n                user_manager: $(\"#propagate-from option:selected\").data('manager'),\n                user_hr: $(\"#propagate-from option:selected\").data('hr'),\n                user_readonly: $(\"#propagate-from option:selected\").data('read-only'),\n                user_personalfolder: $(\"#propagate-from option:selected\").data('personal-folder'),\n                user_rootfolder: $(\"#propagate-from option:selected\").data('root-folder'),\n            };\n            if (debugJavascript === true) console.log(data);\n            $.post(\n                \"sources/users.queries.php\", {\n                    type: \"update_users_rights_sharing\",\n                    data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                    key: \"<?php echo $_SESSION['key']; ?>\"\n                },\n                function(data) {\n                    //decrypt data\n                    data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n\n                    if (data.error === true) {\n                        // ERROR\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        $('.clear-me').val('');\n                        $('.select2').val('').change();\n                        $('.extra-form, #row-folders').addClass('hidden');\n                        $('#row-list').removeClass('hidden');\n\n                        // Prepare checks\n                        $('.form-check-input')\n                            .iCheck('disable')\n                            .iCheck('uncheck');\n\n                        // Remove action from store\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.formUserAction = '',\n                                    teampassApplication.formUserId = '';\n                            }\n                        );\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.success(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 1000\n                            }\n                        );\n                    }\n                }\n            );\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'ldap-sync') {\n            $('.form').addClass('hidden');\n            $('#row-ldap').removeClass('hidden');\n\n            refreshListUsersLDAP();\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'close') {\n            $('.extra-form').addClass('hidden');\n            $('#users-list').removeClass('hidden');\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'ldap-existing-users') {\n            refreshListUsersLDAP();\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'ldap-add-role') {\n            $('#ldap-users-table').addClass('hidden');\n            $('#ldap-new-role').removeClass('hidden');\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'close-new-role') {\n            $('#ldap-users-table').removeClass('hidden');\n            $('#ldap-new-role').addClass('hidden');\n\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'add-new-role') {\n            if ($('#ldap-new-role-selection').val() === '') {\n                // ERROR\n                toastr.remove();\n                toastr.error(\n                    '<?php echo langHdl('error_field_is_mandatory'); ?>',\n                    '<?php echo langHdl('caution'); ?>', {\n                        timeOut: 5000,\n                        progressBar: true\n                    }\n                );\n            } else {\n                // Add new role to Teampass\n\n                // Prepare data\n                var data = {\n                    'label': DOMPurify.sanitize($('#ldap-new-role-selection').val()),\n                    'complexity': $('#ldap-new-role-complexity').val(),\n                    'allowEdit': 0,\n                    'action': 'add_role',\n                    'folderId' : -1,\n                }\n\n                if (debugJavascript === true) console.log(data);\n                \n                $.post(\n                    'sources/roles.queries.php', {\n                        type: 'change_role_definition',\n                        data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        //decrypt data\n                        data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n                        if (debugJavascript === true) console.log(data);\n\n                        if (data.error === true) {\n                            // ERROR\n                            toastr.remove();\n                            toastr.error(\n                                data.message,\n                                '<?php echo langHdl('caution'); ?>', {\n                                    timeOut: 5000,\n                                    progressBar: true\n                                }\n                            );\n                        } else {\n                            $('#ldap-new-role-selection').val('');\n                            $('#ldap-users-table').removeClass('hidden');\n                            $('#row-ldap-body').html('');\n                            $('#ldap-new-role').addClass('hidden');\n\n                            refreshListUsersLDAP();\n                        }\n                    }\n                );\n\n            }\n\n            /**/\n            //\n            // --- END\n            //\n        } else if ($(this).data('action') === 'new-otp') {// Check if no tasks on-going for this user\n            data_to_send = {\n                'user_id': $(this).data('id'),\n            }\n            $.post(\n                \"sources/users.queries.php\", {\n                    type: \"get-user-infos\",\n                    data: prepareExchangedData(JSON.stringify(data_to_send), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n\n                    if (data.error === true) {\n                        // error\n                        toastr.remove();\n                        toastr.error(\n                            data.message,\n                            '<?php echo langHdl('caution'); ?>', {\n                                timeOut: 5000,\n                                progressBar: true\n                            }\n                        );\n                    } else {\n                        // Continue   \n                        if (data.user_infos.ongoing_process_id !== null) {  \n                            toastr.remove();\n                            toastr.warning(\n                                data.message,\n                                '<?php echo langHdl('user_encryption_ongoing'); ?>', {\n                                    timeOut: 10000,\n                                    progressBar: true\n                                }\n                            ); \n                        } else {  \n                            var userID = data.user_infos.id;\n                            showModalDialogBox(\n                                '#warningModal',\n                                '<i class=\"fas fa-exclamation-circle fa-lg warning mr-2\"></i><?php echo langHdl('your_attention_please'); ?>',\n                                '<div class=\"form-group\">'+\n                                    '<span class=\"mr-3\"><?php echo langHdl('generate_new_otp_informations'); ?></span>'+\n                                '</div>',\n                                '<?php echo langHdl('perform'); ?>',\n                                '<?php echo langHdl('cancel'); ?>'\n                            );\n                            \n                            $(document).on('click', '#warningModalButtonAction', function() {                \n                                // prepare user\n\n                                // Show spinner\n                                toastr.remove();\n                                toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i><span class=\"close-toastr-progress\"></span>');\n\n                                // generate keys\n                                generateUserKeys(\n                                    {\n                                        'user_id': userID,\n                                    },\n                                    ''\n                                );\n                            });\n                        }\n                    }\n                }\n            );\n\n            /**/\n            //\n            // --- END\n            //\n        }\n    });\n\n\n    /**\n     * Permit to show some info while selecting a  User\n     */\n    $(document).on('change', '#propagate-from', function() {\n        var selectedOption = $(this).find('option:selected');\n        $('#propagate-user-roles').html($(selectedOption).data('groups'));\n        $('#propagate-user-managedby').html($(selectedOption).data('managed-by'));\n        $('#propagate-user-allowed').html($(selectedOption).data('folders-allowed'));\n        $('#propagate-user-fordidden').html($(selectedOption).data('folders-forbidden'));\n    });\n\n\n    /**\n     * TRACK CHANGES IN FORM\n     */\n    $('#form-user .track-change')\n        .on('change', function() {\n            if ($(this).val() !== null && $(this).val().length > 0) {\n                userDidAChange = true;\n                $(this).data('change-ongoing', true);\n            } else {\n                $(this).data('change-ongoing', false);\n            }\n        })\n        .on('ifChecked', function() {\n            userDidAChange = true;\n            $(this).data('change-ongoing', true);\n        });\n\n    //************************************************************* */\n\n\n\n    /**\n     * EDIT EACH ROW\n     */\n    var currentText = '',\n        item = '',\n        initialColumnWidth = '',\n        actionOnGoing = false,\n        field = '',\n        columnId = '',\n        tableDef = {\n            'login': {\n                'column': 2\n            },\n            'name': {\n                'column': 3\n            },\n            'lastname': {\n                'column': 4\n            },\n            'isAdministratedByRole': {\n                'column': 5\n            },\n            'fonction_id': {\n                'column': 6\n            }\n        };\n\n    /**\n     * EDIT TEXT INPUT\n     */\n    $(document).on('click', '.edit-text', function() {\n        currentText = $(this).text();\n        item = $(this);\n        field = $(this).data('field');\n        columnId = tableDef[field].column;\n\n        $(this)\n            .addClass('hidden')\n            .after('<input type=\"text\" class=\"form-control form-item-control remove-me save-me\" value=\"' + currentText + '\">');\n\n        // Store current width and change it\n        initialColumnWidth = $('#table-users thead th:eq(' + (columnId - 1) + ')').width();\n        $('#table-users thead th:eq(' + (columnId - 1) + ')').width('300');\n        if (debugJavascript === true) console.log('Width ' + initialColumnWidth)\n\n        // Launch save on focus lost\n        $('.save-me')\n            .focus()\n            .focusout(function() {\n                if (actionOnGoing === false) {\n                    actionOnGoing = true;\n                    saveChange(item, currentText, $(this), field);\n                }\n            });\n    });\n\n    /**\n     * EDIT SELECT LIST\n     */\n    $(document).on('click', '.edit-select', function() {\n        currentText = $(this).text();\n        item = $(this);\n        field = $(this).data('field');\n        columnId = tableDef[field].column;\n        if (debugJavascript === true) console.log(columnId)\n\n        $(this).addClass('hidden');\n\n        // Show select\n        $(\"#select-managedBy\")\n            .insertAfter('#' + $(this).attr('id'))\n            .after('<i class=\"fa fa-close text-danger pointer temp-button mr-3\" id=\"select-managedBy-close\"></i>');\n        $('#select-managedBy option[value=\"' + $(this).data('value') + '\"]').prop('selected', true);\n\n        // Store current width and change it\n        initialColumnWidth = $('#table-users thead th:eq(' + (columnId - 1) + ')').width();\n        $('#table-users thead th:eq(' + (columnId - 1) + ')').width('300');\n\n        // Launch save on focus lost\n        $('.save-me')\n            .focus()\n            .focusout(function() {\n                if (actionOnGoing === false) {\n                    actionOnGoing = true;\n                    saveChange(item, currentText, $(this), field);\n                }\n            });\n\n        $('#select-managedBy-close').click(function() {\n            $(\"#select-managedBy\").detach().appendTo('#hidden-managedBy');\n            $('#table-users thead th:eq(' + (columnId - 1) + ')').width(initialColumnWidth);\n            $('.edit-select').removeClass('hidden');\n            $('.tmp-loader, .temp-button').remove();\n        });\n    });\n\n\n    /**\n     * MANAGE USER KEYS PRESSED\n     */\n    $(document).keyup(function(e) {\n        if (e.keyCode === 27) {\n            // Escape Key\n            $('.remove-me, .tmp-loader').remove();\n            $('.edit-text').removeClass('hidden');\n        }\n        if (e.keyCode === 13 && actionOnGoing === false) {\n            // Enter key\n            actionOnGoing = true;\n            saveChange(item, currentText, $(':focus'), field);\n        }\n    });\n\n\n    function saveChange(item, currentText, change, field) {\n        if (change.val() !== currentText) {\n            change\n                .after('<i class=\"fa fa-refresh fa-spin fa-fw tmp-loader\"></i>');\n\n            // prepare data\n            var data = {\n                'user_id': item.data('id'),\n                'field': field,\n                'value': change.val()\n            };\n            \n            // Save\n            $.post(\n                'sources/users.queries.php', {\n                    type: 'save_user_change',\n                    data: prepareExchangedData(JSON.stringify(data), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                    key: '<?php echo $_SESSION['key']; ?>'\n                },\n                function(data) {\n                    if (change.is('input') === true) {\n                        change.remove();\n                        $('.tmp-loader').remove();\n                        item\n                            .text(change.val())\n                            .removeClass('hidden');\n                        $('#table-users thead th:eq(' + (columnId - 1) + ')').width(initialColumnWidth)\n                    } else if (change.is('select') === true) {\n                        $(\"#select-managedBy\").detach().appendTo('#hidden-managedBy');\n                        $('#table-users thead th:eq(' + (columnId - 1) + ')').width(initialColumnWidth)\n                        $('.tmp-loader, .temp-button').remove();\n\n                        // Show change\n                        if (debugJavascript === true) console.log(change)\n                        item\n                            .html(change.text())\n                            .attr('data-value', change.val())\n                            .removeClass('hidden');\n                    }\n                    actionOnGoing = false;\n                },\n                'json'\n            );\n        } else {\n            change.remove();\n            $('.tmp-loader').remove();\n            item\n                .text(change.val())\n                .removeClass('hidden');\n            $('#table-users thead th:eq(' + (columnId - 1) + ')').width(initialColumnWidth)\n        }\n    }\n\n    /**\n     * Refreshing list of users from LDAP\n     *\n     * @return void\n     */\n    function refreshListUsersLDAP() {\n        // FIND ALL USERS IN LDAP\n        //toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i><span class=\"close-toastr-progress\"></span>');\n\n        $('#row-ldap-body')\n            .addClass('overlay')\n            .html('');\n\n        $.post(\n            \"sources/users.queries.php\", {\n                type: \"get_list_of_users_in_ldap\",\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                data = decodeQueryReturn(data, '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data)\n\n                if (data.error === true) {\n                    // ERROR\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // loop on users list\n                    var html = '',\n                        groupsNumber = 0,\n                        userLogin,\n                        group;\n                    var entry;\n                    $.each(data.entries, function(i, entry) {\n                        userLogin = entry[store.get('teampassSettings').ldap_user_attribute] !== undefined ? entry[store.get('teampassSettings').ldap_user_attribute][0] : '';\n                        // CHeck if not empty\n                        if (userLogin !== '') {\n                            html += '<tr>' +\n                                '<td>' + userLogin +\n                                '</td>' +\n                                '<td>' +\n                                '<i class=\"fas fa-info-circle ml-3 infotip text-info pointer text-center\" data-toggle=\"tooltip\" data-html=\"true\" title=\"' +\n                                '<p class=\\'text-left\\'><i class=\\'fas fa-user mr-1\\'></i>' +\n                                (entry.displayname !== undefined ? '' + entry.displayname[0] + '' : '') + '</p>' +\n                                '<p class=\\'text-left\\'><i class=\\'fas fa-envelope mr-1\\'></i>' + (entry.mail !== undefined ? '' + entry.mail[0] + '' : '') + '</p>' +\n                                '\"></i>' +\n                                '</td><td>' +\n                                (entry.userInTeampass === 0 ? '' :\n                                '<i class=\"fas ' + (entry.userAuthType !== undefined && entry.userAuthType === 'ldap' ? 'fa-toggle-on text-info ' : 'fa-toggle-off ') + 'mr-1 text-center pointer action-change-ldap-synchronization\" data-user-id=\"' + entry.userInTeampass + '\" data-user-auth-type=\"' + entry.userAuthType + '\"></i>') +\n                                '</td><td>';\n                            groupsNumber = 0;\n                            $.each(entry.memberof, function(j, group) {\n                                var regex = String(group).replace('CN=', 'cn').match(/(cn=)(.*?),/g);\n                                if (regex !== null) {\n                                    group = regex[0].replace('cn=', '').replace(',', '');\n                                    // Check if this user has this group in Teampass\n                                    if (entry.teampass !== undefined && entry.ldap_groups.filter(p => p.title === group).length > 0) {\n                                        html += group + '<i class=\"far fa-check-circle text-success ml-2 infotip\" title=\"<?php echo langHdl('user_has_this_role_in_teampass'); ?>\"></i><br>';\n                                    } else {\n                                        // Check if this group exists in Teampass and propose to add it\n                                        tmp = data.teampass_groups.filter(p => p.title === group);\n                                        if (tmp.length > 0 && entry.userInTeampass === 0) {\n                                            html += group + '<i class=\"fas fa-user-graduate text-primary ml-2 pointer infotip action-add-role-to-user\" title=\"<?php echo langHdl('add_user_to_role'); ?>\" data-user-id=\"' + entry.userInTeampass + '\" data-role-id=\"' + tmp[0].id + '\"></i><br>';\n                                        } else {\n                                            html += group + '<br>';\n                                        }\n                                    }\n                                    groupsNumber++;\n                                }\n                            });\n                            html += '</td><td>';\n                            // Action icons\n                            html += (entry.userInTeampass === 0 ? '<i class=\"fas fa-user-plus text-warning ml-2 infotip pointer add-user-icon\" title=\"<?php echo langHdl('add_user_in_teampass'); ?>\" data-user-login=\"' + userLogin + '\" data-user-email=\"' + (entry.mail !== undefined ? entry.mail[0] : '') + '\" data-user-name=\"' + (entry.givenname !== undefined ? entry.givenname[0] : '') + '\" data-user-lastname=\"' + (entry.sn !== undefined ? entry.sn[0] : '') + '\"></i>' : '');\n\n                            // Only of not admin\n                            /*if (userLogin !== 'admin') {\n                                html += (entry.teampass.auth === 'ldap' ? '<i class=\"fas fa-link text-success ml-2 infotip pointer auth-local\" title=\"<?php echo langHdl('ldap_user_password_is_used_for_authentication'); ?>\" data-user-id=\"' + entry.teampass.id + '\"></i>' : '<i class=\"fas fa-unlink text-orange ml-2 infotip pointer auth-ldap\" title=\"<?php echo langHdl('local_user_password_is_used_for_authentication'); ?>\" data-user-id=\"' + entry.teampass.id + '\"></i>');\n                            }*/\n\n                            html += '</td></tr>';\n                        }\n                    });\n\n                    $('#row-ldap-body').html(html);\n\n                    $('#row-ldap-body').removeClass('overlay');\n\n                    $('.infotip').tooltip('update');\n\n                    // Build list box of new roles that could be created\n                    $('#ldap-new-role-selection')\n                        .empty()\n                        .append('<option value=\"\">--- <?php echo langHdl('select'); ?> ---</option>');\n                    $.each(data.ldap_groups, function(i, group) {\n                        tmp = data.teampass_groups.filter(p => p.title === group);\n                        if (tmp.length === 0) {\n                            $('#ldap-new-role-selection').append(\n                                '<option value=\"' + group + '\">' + group + '</option>'\n                            );\n                        }\n                    });\n\n                    // Inform user\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                    $('.close-toastr-progress').closest('.toast').remove();\n                }\n            }\n        );\n    }\n\n    /**\n     * Permits to add a role to a Teampass user\n     *\n     * @return void\n     */\n    function addRoleToUser() {\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // prepare data\n        var data = {\n            'user_id': $('.selected-role').data('user-id'),\n            'field': 'fonction_id',\n            'value': $('.selected-role').data('role-id'),\n            'context': 'add_one_role_to_user'\n        };\n\n        $.post(\n            'sources/users.queries.php', {\n                type: 'save_user_change',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // CHange icon\n                    $('.selected-role')\n                        .removeClass('fas fa-user-graduate text-primary pointer action-add-role-to-user')\n                        .addClass('far fa-check-circle text-success')\n                        .prop('title', '<?php echo langHdl('user_has_this_role_in_teampass'); ?>');\n\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n                $('.selected-role').removeClass('selected-role');\n            }\n        );\n    }\n\n    $(document).on('click', '.action-add-role-to-user', function() {\n        $(this).addClass('selected-role');\n\n        toastr.warning(\n            '&nbsp;<button type=\"button\" class=\"btn clear btn-toastr\" style=\"width:100%;\" onclick=\"addRoleToUser()\"><?php echo langHdl('please_confirm'); ?></button>',\n            '<?php echo langHdl('info'); ?>', {\n                positionClass: 'toast-top-center',\n                closeButton: true\n            }\n        );\n    });\n\n    // Enable/disable ldap sync on user\n    $(document).on('click', '.action-change-ldap-synchronization', function() {\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // prepare data\n        var data = {\n            'user_id': $(this).data('user-id'),\n            'field': 'auth_type',\n            'value': $(this).hasClass('fa-toggle-off') === true ? 'ldap' : 'local',\n            'context': ''\n        },\n        selectedIcon = $(this);\n\n        $.post(\n            'sources/users.queries.php', {\n                type: 'save_user_change',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // CHange icon format\n                    if (selectedIcon.hasClass('fa-toggle-off') === true) {\n                        selectedIcon\n                            .removeClass('fa-toggle-off')\n                            .addClass('fa-toggle-on text-info')\n                            .prop('data-user-auth-type', 'ldap');\n                    } else {\n                        selectedIcon\n                            .removeClass('fa-toggle-on text-info')\n                            .addClass('fa-toggle-off')\n                            .prop('data-user-auth-type', 'local');\n                    }\n\n                    $('.infotip').tooltip();\n\n                    // Inform user\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        '', {\n                            timeOut: 1000\n                        }\n                    );\n                }\n            }\n        );\n    });\n\n\n    /**\n     * Permits to add an AD user in Teampass\n     *\n     * @return void\n     */\n    function addUserInTeampass() {\n        $('#warningModal').modal('hide');\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i><span class=\"close-toastr-progress\"></span>');\n\n        // what roles\n        var roles = [];\n        $(\"#ldap-user-roles option:selected\").each(function() {\n            roles.push($(this).val())\n        });\n\n        // prepare data\n        var data = {\n            'login': DOMPurify.sanitize($('.selected-user').data('user-login')),\n            'name': DOMPurify.sanitize($('.selected-user').data('user-name') === '' ? $('#ldap-user-name').val() : $('.selected-user').data('user-name')),\n            'lastname': DOMPurify.sanitize($('.selected-user').data('user-lastname')),\n            'email': DOMPurify.sanitize($('.selected-user').data('user-email')),\n            'roles' : roles,\n        };\n        if (debugJavascript === true) console.log(data)\n\n        $.post(\n            'sources/users.queries.php', {\n                type: 'add_user_from_ldap',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n                userTemporaryCode = data.user_code;\n                constVisibleOTP = data.visible_otp;\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {                    \n                    generateUserKeys(data, userTemporaryCode);\n                }\n            }\n        );\n    }\n\n\n    function generateUserKeys(data, userTemporaryCode)\n    {\n        // manage keys encryption for new user\n        // Case where we need to encrypt new keys for the user\n        // Process is: \n        // 2/ clear all keys for this user\n        // 3/ generate keys for this user with encryption key\n\n        \n        // If expected to create new encryption key\n        var parameters = {\n            'user_id': data.user_id,\n        };\n\n        if (debugJavascript === true) {\n            console.log(parameters);\n            console.info('Prepare TASK for new user encryption keys')\n        }\n        $.post(\n            'sources/main.queries.php', {\n                type: 'generate_temporary_encryption_key',\n                type_category: 'action_key',\n                data: prepareExchangedData(JSON.stringify(parameters), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data_otc) {\n                data_otc = prepareExchangedData(data_otc, 'decode', '<?php echo $_SESSION['key']; ?>');\n\n                if (data_otc.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data_otc.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    // If expected, show the OPT to the admin\n                    if (data_otc.visible_otp === true) {\n                        showModalDialogBox(\n                            '#warningModal',\n                            '<i class=\"fa-solid fa-user-secret mr-2\"></i><<?php echo langHdl('your_attention_is_required'); ?>',\n                            '<?php echo langHdl('show_encryption_code_to_admin'); ?>' +\n                            '<div><input class=\"form-control form-item-control flex-nowrap ml-2\" value=\"' + data_otc.code + '\" readonly></div>',\n                            '',\n                            '<?php echo langHdl('close'); ?>'\n                        );\n                    }\n\n                    // update the process\n                    // add all tasks\n                    var data_to_send = {\n                        user_id: data.user_id,\n                        user_code: data_otc.code,\n                    }\n\n                    //console.log(data_to_send);\n                    //return false;\n\n                    // Do query\n                    $.post(\n                        \"sources/users.queries.php\", {\n                            type: \"create_new_user_tasks\",\n                            data: prepareExchangedData(JSON.stringify(data_to_send), 'encode', '<?php echo $_SESSION['key']; ?>'),\n                            key: '<?php echo $_SESSION['key']; ?>'\n                        },\n                        function(data_tasks) {\n                            data_tasks = prepareExchangedData(data_tasks, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                            \n                            if (data_tasks.error === true) {\n                                // error\n                                toastr.remove();\n                                toastr.error(\n                                    data_tasks.message,\n                                    '<?php echo langHdl('caution'); ?>', {\n                                        timeOut: 5000,\n                                        progressBar: true\n                                    }\n                                );\n                            } else {\n                                // show message to user\n                                // Finalizing\n                                //$('#warningModal').modal('hide');\n\n                                // Now close in progress toast\n                                $('.close-toastr-progress').closest('.toast').remove();\n                                \n                                // refresh the list of users in LDAP not added in Teampass\n                                refreshListUsersLDAP();    \n\n                                // Rrefresh list of users in Teampass\n                                oTable.ajax.reload();\n\n                                toastr.success(\n                                    '<?php echo langHdl('done'); ?>',\n                                    '', {\n                                        timeOut: 1000\n                                    }\n                                );\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n    /**\n     * Permits to change the auth type of the user\n     *\n     * @return void\n     */\n    function changeUserAuthType(auth) {\n        toastr.remove();\n        toastr.info('<?php echo langHdl('in_progress'); ?> ... <i class=\"fas fa-circle-notch fa-spin fa-2x\"></i>');\n\n        // prepare data\n        var data = {\n            'id': $('.selected-user').data('user-id'),\n            'auth_type': auth\n        };\n        if (debugJavascript === true) console.log(data)\n\n        $.post(\n            'sources/users.queries.php', {\n                type: 'change_user_auth_type',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                if (debugJavascript === true) console.log(data);\n\n                if (data.error !== false) {\n                    // Show error\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '<?php echo langHdl('caution'); ?>', {\n                            timeOut: 5000,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    refreshListUsersLDAP();\n                }\n            }\n        );\n    }\n\n    $(document)\n        .on('click', '.add-user-icon', function() {\n            var thisElement = $(this);\n            $(thisElement).addClass('selected-user');\n\n            showModalDialogBox(\n                '#warningModal',\n                '<i class=\"fas fa-user-plus fa-lg warning mr-2\"></i><?php echo langHdl('new_ldap_user_info'); ?> <b>'+$(this)[0].dataset.userLogin+'</b>',\n                '<div class=\"form-group\">'+\n                    '<label for=\"ldap-user-name\"><?php echo langHdl('name'); ?></label>'+\n                    '<input readonly type=\"text\" class=\"form-control required\" id=\"ldap-user-name\" value=\"'+ $(this).attr('data-user-name')+'\">'+\n                '</div>'+\n                '<div class=\"form-group\">'+\n                    '<label for=\"ldap-user-name\"><?php echo langHdl('lastname'); ?></label>'+\n                    '<input readonly type=\"text\" class=\"form-control required\" id=\"ldap-user-lastname\" value=\"'+ $(this).attr('data-user-lastname')+'\">'+\n                '</div>'+\n                '<div class=\"form-group\">'+\n                    '<label for=\"ldap-user-name\"><?php echo langHdl('email'); ?></label>'+\n                    '<input readonly type=\"text\" class=\"form-control required\" id=\"ldap-user-email\" value=\"'+ $(this).attr('data-user-email')+'\">'+\n                '</div>'+\n                '<div class=\"form-group\">'+\n                    '<label for=\"ldap-user-roles\"><?php echo langHdl('roles'); ?></label>'+\n                    '<select id=\"ldap-user-roles\" class=\"form-control form-item-control select2 required\" style=\"width:100%;\" multiple=\"multiple\">'+\n                    '<?php echo $optionsRoles; ?></select>'+\n                '</div>',\n                '<?php echo langHdl('perform'); ?>',\n                '<?php echo langHdl('cancel'); ?>'\n            );\n            $(document).on('click', '#warningModalButtonAction', function() {\n                if ($('#ldap-user-name').val() !== \"\" && $('#ldap-user-roles :selected').length > 0) {\n                    addUserInTeampass();\n                    $(thisElement).removeClass('selected-user');\n                }\n            });\n            $(document).on('click', '#warningModalButtonClose', function() {\n                $(thisElement).removeClass('selected-user');\n            });\n        })\n        .on('click', '.auth-ldap', function() {\n            $(this).addClass('selected-user');\n\n            toastr.warning(\n                '&nbsp;<button type=\"button\" class=\"btn clear btn-toastr\" style=\"width:100%;\" onclick=\"changeUserAuthType(\\'ldap\\')\"><?php echo langHdl('please_confirm'); ?></button>',\n                '<?php echo langHdl('change_authentification_type_to_ldap'); ?>', {\n                    positionClass: 'toast-top-center',\n                    closeButton: true\n                }\n            );\n        })\n        .on('click', '.auth-local', function() {\n            $(this).addClass('selected-user');\n\n            toastr.warning(\n                '&nbsp;<button type=\"button\" class=\"btn clear btn-toastr\" style=\"width:100%;\" onclick=\"changeUserAuthType(\\'local\\')\"><?php echo langHdl('please_confirm'); ?></button>',\n                '<?php echo langHdl('change_authentification_type_to_local'); ?>', {\n                    positionClass: 'toast-top-center',\n                    closeButton: true\n                }\n            );\n        });\n\n\n\n    //]]>\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      identify.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nuse LdapRecord\\Connection;\nuse LdapRecord\\Container;\n\nrequire_once 'SecureHandler.php';\nsession_name('teampass_session');\nsession_start();\nif (isset($_SESSION['CPM']) === false || (int) $_SESSION['CPM'] !== 1) {\n    //die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php')) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php')) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n}\n\nif (! isset($SETTINGS['cpassman_dir']) || empty($SETTINGS['cpassman_dir']) === true || $SETTINGS['cpassman_dir'] === '.') {\n    $SETTINGS = [];\n    $SETTINGS['cpassman_dir'] = '..';\n}\n\n// Load libraries\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/config/include.php';\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\ninclude_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n$superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n// Prepare POST variables\n$post_type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_login = filter_input(INPUT_POST, 'login', FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n$post_data = filter_input(INPUT_POST, 'data', FILTER_SANITIZE_FULL_SPECIAL_CHARS, FILTER_FLAG_NO_ENCODE_QUOTES);\n\n// connect to the server\nif (defined('DB_PASSWD_CLEAR') === false) {\n    define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n}\nrequire_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\nif (defined('DB_PASSWD_CLEAR') === false) {\n    define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n}\nDB::$host = DB_HOST;\nDB::$user = DB_USER;\nDB::$password = DB_PASSWD_CLEAR;\nDB::$dbName = DB_NAME;\nDB::$port = DB_PORT;\nDB::$encoding = DB_ENCODING;\nDB::$ssl = DB_SSL;\nDB::$connect_options = DB_CONNECT_OPTIONS;\n\nif ($post_type === 'identify_user') {\n    //--------\n    // NORMAL IDENTICATION STEP\n    //--------\n\n    // Ensure Complexity levels are translated\n    defineComplexity();\n\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n    // If Debug then clean the files\n    if (DEBUGLDAP === true) {\n        define('DEBUGLDAPFILE', $SETTINGS['path_to_files_folder'] . '/ldap.debug.txt');\n        file_put_contents(DEBUGLDAPFILE, '');\n    }\n\n    // Prepare GET variables\n    $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n    // increment counter of login attempts\n    if ($sessionPwdAttempts === '') {\n        $sessionPwdAttempts = 1;\n    } else {\n        ++$sessionPwdAttempts;\n    }\n\n    $superGlobal->put('pwd_attempts', $sessionPwdAttempts, 'SESSION');\n    // manage brute force\n    if ($sessionPwdAttempts <= 3) {\n        $sessionPwdAttempts = 0;\n\n        // identify the user through Teampass process\n        identifyUser(\n            $post_data,\n            $SETTINGS\n        );\n    } elseif (isset($_SESSION['next_possible_pwd_attempts']) && time() > $_SESSION['next_possible_pwd_attempts'] && $sessionPwdAttempts > 3) {\n        $sessionPwdAttempts = 0;\n        // identify the user through Teampass process\n        identifyUser(\n            $post_data,\n            $SETTINGS\n        );\n    } else {\n        $_SESSION['next_possible_pwd_attempts'] = time() + 10;\n        // Encrypt data to return\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => 'bruteforce_wait',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => true,\n                'message' => langHdl('error_bad_credentials_more_than_3_times'),\n            ],\n            'encode'\n        );\n        return false;\n    }\n    // ---\n    // ---\n    // ---\n} elseif ($post_type === 'get2FAMethods') {\n    //--------\n    // Get MFA methods\n    //--------\n    //\n\n    // Encrypt data to return\n    echo json_encode([\n        'ret' => prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'agses' => isKeyExistingAndEqual('agses_authentication_enabled', 1, $SETTINGS) === true ? true : false,\n                'google' => isKeyExistingAndEqual('google_authentication', 1, $SETTINGS) === true ? true : false,\n                'yubico' => isKeyExistingAndEqual('yubico_authentication', 1, $SETTINGS) === true ? true : false,\n                'duo' => isKeyExistingAndEqual('duo', 1, $SETTINGS) === true ? true : false,\n            ],\n            'encode'\n        ),\n        'key' => $superGlobal->get('key', 'SESSION'),\n    ]);\n    return false;\n}\n\n/**\n * Complete authentication of user through Teampass\n *\n * @param string $sentData Credentials\n * @param array $SETTINGS Teampass settings\n *\n * @return bool\n */\nfunction identifyUser(string $sentData, array $SETTINGS): bool\n{\n    // Load config\n    if (findTpConfigFile() === false) {\n        throw new Exception(\"Error file '/includes/config/tp.config.php' not exists\", 1);\n    }\n    include_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\n    include_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    \n    header('Content-type: text/html; charset=utf-8');\n    error_reporting(E_ERROR);\n\n    // Load AntiXSS\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/ASCII.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/UTF8.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n    $antiXss = new voku\\helper\\AntiXSS();\n\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n    // Prepare GET variables\n    $sessionUserLanguage = $superGlobal->get('user_language', 'SESSION', 'user');\n    $sessionKey = $superGlobal->get('key', 'SESSION');\n    $sessionAdmin = $superGlobal->get('user_admin', 'SESSION');\n    $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n    $sessionUrl = $superGlobal->get('initial_url', 'SESSION');\n    $server = [];\n    $server['PHP_AUTH_USER'] = $superGlobal->get('PHP_AUTH_USER', 'SERVER');\n    $server['PHP_AUTH_PW'] = $superGlobal->get('PHP_AUTH_PW', 'SERVER');\n\n    // connect to the server\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = defined('DB_PASSWD_CLEAR') === false ? defuseReturnDecrypted(DB_PASSWD, $SETTINGS) : DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // User's language loading\n    include_once $SETTINGS['cpassman_dir'] . '/includes/language/' . $sessionUserLanguage . '.php';\n    \n    // decrypt and retreive data in JSON format\n    if (empty($sessionKey) === true) {\n        $dataReceived = $sentData;\n    } else {\n        $dataReceived = prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $sentData,\n            'decode',\n            $sessionKey\n        );\n        $superGlobal->put('key', $sessionKey, 'SESSION');\n    }\n\n    // Check if Duo auth is in progress and pass the pw and login back to the standard login process\n    if(\n        isKeyExistingAndEqual('duo', 1, $SETTINGS) === true\n        && $dataReceived['user_2fa_selection'] === 'duo'\n        && $superGlobal->get('duo_status','SESSION') === 'IN_PROGRESS'\n        && !empty($dataReceived['duo_state'])\n    ){\n        $key = hash('sha256', $dataReceived['duo_state']);\n        $iv = substr(hash('sha256', $dataReceived['duo_state']), 0, 16);\n        $duo_data_dec = openssl_decrypt(base64_decode($superGlobal->get('duo_data','SESSION')), 'AES-256-CBC', $key, 0, $iv);\n        // Clear the data from the Duo process to continue clean with the standard login process\n        $superGlobal->forget('duo_data','SESSION');\n        if($duo_data_dec === false){\n            echo prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'error' => true,\n                    'message' => langHdl('duo_error_decrypt'),\n                ],\n                'encode'\n            );\n            return false;\n        }\n        $duo_data = unserialize($duo_data_dec);\n        $dataReceived['pw'] = $duo_data['duo_pwd'];\n        $dataReceived['login'] = $duo_data['duo_login'];\n    }\n\n    if(isset($dataReceived['pw']) === false || isset($dataReceived['login']) === false) {\n        echo json_encode([\n            'data' => prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'error' => true,\n                    'message' => langHdl('ga_enter_credentials'),\n                ],\n                'encode'\n            ),\n            'key' => $_SESSION['key']\n        ]);\n        return false;\n    }\n\n    // prepare variables    \n    $userCredentials = identifyGetUserCredentials(\n        $SETTINGS,\n        (string) $server['PHP_AUTH_USER'],\n        (string) $server['PHP_AUTH_PW'],\n        (string) filter_var($dataReceived['pw'], FILTER_SANITIZE_FULL_SPECIAL_CHARS),\n        (string) filter_var($dataReceived['login'], FILTER_SANITIZE_FULL_SPECIAL_CHARS)\n    );\n    $username = $userCredentials['username'];\n    $passwordClear = $userCredentials['passwordClear'];\n    \n    // DO initial checks\n    $userInitialData = identifyDoInitialChecks(\n        $SETTINGS,\n        (int) $sessionPwdAttempts,\n        (string) $username,\n        (int) $sessionAdmin,\n        (string) $sessionUrl,\n        (string) filter_var($dataReceived['user_2fa_selection'], FILTER_SANITIZE_FULL_SPECIAL_CHARS)\n    );\n    // if user doesn't exist in Teampass then return error\n    if ($userInitialData['error'] === true) {\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $userInitialData['array'],\n            'encode'\n        );\n        return false;\n    }\n\n    $userInfo = $userInitialData['userInfo'];\n    $return = '';\n    $userLdap = identifyDoLDAPChecks(\n        $SETTINGS,\n        $userInfo,\n        (string) $username,\n        (string) $passwordClear,\n        (int) $sessionAdmin,\n        (string) $sessionUrl,\n        (int) $sessionPwdAttempts\n    );\n    if ($userLdap['error'] === true) {\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            $userLdap['array'],\n            'encode'\n        );\n        return false;\n    }\n    if (isset($userLdap['user_info']) === true && (int) $userLdap['user_info']['has_been_created'] === 1) {\n        /*$userInfo = DB::queryfirstrow(\n            'SELECT *\n            FROM ' . prefixTable('users') . '\n            WHERE login = %s',\n            $username\n        );*/\n        //$userInfo = $userLdap['user_info'];\n        echo json_encode([\n            'data' => prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'error' => true,\n                    'message' => '',\n                    'extra' => 'ad_user_created',\n                ],\n                'encode'\n            ),\n            'key' => $_SESSION['key']\n        ]);\n        return false;\n    }\n\n    // Check user and password\n    if ($userLdap['userPasswordVerified'] === false && (int) checkCredentials($passwordClear, $userInfo, $dataReceived, $username, $SETTINGS) !== 1) {\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => '',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => true,\n                'message' => langHdl('error_bad_credentials'),\n            ],\n            'encode'\n        );\n        return false;\n    }\n\n    // Check if MFA is required\n    if ((isOneVarOfArrayEqualToValue(\n                [\n                    (int) $SETTINGS['yubico_authentication'],\n                    (int) $SETTINGS['google_authentication'],\n                    (int) $SETTINGS['duo']\n                ],\n                1\n            ) === true)\n        && (((int) $userInfo['admin'] !== 1 && (int) $userInfo['mfa_enabled'] === 1) || ((int) $SETTINGS['admin_2fa_required'] === 1 && (int) $userInfo['admin'] === 1))\n        && $userInfo['mfa_auth_requested_roles'] === true\n    ) {\n        // Check user against MFA method if selected\n        $userMfa = identifyDoMFAChecks(\n            $SETTINGS,\n            $userInfo,\n            $dataReceived,\n            $userInitialData,\n            (string) $username\n        );\n        if ($userMfa['error'] === true) {\n            echo prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'error' => true,\n                    'message' => $userMfa['mfaData']['message'],\n                    'mfaStatus' => $userMfa['mfaData']['mfaStatus'],\n                ],\n                'encode'\n            );\n            return false;\n        } elseif ($userMfa['mfaQRCodeInfos'] === true) {\n            // Case where user has initiated Google Auth\n            // Return QR code\n            echo prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'value' => $userMfa['mfaData']['value'],\n                    'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                    'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                    'pwd_attempts' => (int) $sessionPwdAttempts,\n                    'error' => false,\n                    'message' => $userMfa['mfaData']['message'],\n                    'mfaStatus' => $userMfa['mfaData']['mfaStatus'],\n                ],\n                'encode'\n            );\n            return false;\n        } elseif ($userMfa['duo_url_ready'] === true) {\n            // Case where user has initiated Duo Auth\n            // Return the DUO redirect URL\n            echo prepareExchangedData(\n                $SETTINGS['cpassman_dir'],\n                [\n                    'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                    'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                    'pwd_attempts' => (int) $sessionPwdAttempts,\n                    'error' => false,\n                    'message' => $userMfa['mfaData']['message'],\n                    'duo_url_ready' => $userMfa['mfaData']['duo_url_ready'],\n                    'duo_redirect_url' => $userMfa['mfaData']['duo_redirect_url'],\n                    'mfaStatus' => $userMfa['mfaData']['mfaStatus'],\n                ],\n                'encode'\n            );\n            return false;\n        }\n    }\n/*\n    print_r($userLdap);\n    print_r($userInfo);\n    return false;\n    */\n    // Can connect if\n    // 1- no LDAP mode + user enabled + pw ok\n    // 2- LDAP mode + user enabled + ldap connection ok + user is not admin\n    // 3- LDAP mode + user enabled + pw ok + usre is admin\n    // This in order to allow admin by default to connect even if LDAP is activated\n    if (canUserGetLog(\n            $SETTINGS,\n            (int) $userInfo['disabled'],\n            $username,\n            $userLdap['ldapConnection']\n        ) === true\n    ) {\n        $superGlobal->put('autoriser', true, 'SESSION');\n        $superGlobal->put('pwd_attempts', 0, 'SESSION');\n\n        // Check if any unsuccessfull login tries exist\n        $attemptsInfos = handleLoginAttempts(\n            $userInfo['id'],\n            $userInfo['login'],\n            $userInfo['last_connexion'],\n            $username,\n            $SETTINGS,\n        );\n            \n        // Save account in SESSION\n        $superGlobal->put('unsuccessfull_login_attempts_list', $attemptsInfos['attemptsList'], 'SESSION', 'user');\n        $superGlobal->put('unsuccessfull_login_attempts_shown', $attemptsInfos['attemptsCount'] === 0 ? true : false, 'SESSION', 'user');\n        $superGlobal->put('unsuccessfull_login_attempts_nb', DB::count(), 'SESSION', 'user');\n        $superGlobal->put('login', stripslashes($username), 'SESSION');\n        $superGlobal->put('name', empty($userInfo['name']) === false ? stripslashes($userInfo['name']) : '', 'SESSION');\n        $superGlobal->put('lastname', empty($userInfo['lastname']) === false ? stripslashes($userInfo['lastname']) : '', 'SESSION');\n        $superGlobal->put('user_id', (int) $userInfo['id'], 'SESSION');\n        $superGlobal->put('user_pwd', $passwordClear, 'SESSION');\n        $superGlobal->put('admin', $userInfo['admin'], 'SESSION');\n        $superGlobal->put('user_manager', $userInfo['gestionnaire'], 'SESSION');\n        $superGlobal->put('user_can_manage_all_users', $userInfo['can_manage_all_users'], 'SESSION');\n        $superGlobal->put('user_read_only', (bool) $userInfo['read_only'], 'SESSION');\n        $superGlobal->put('last_pw_change', (int) $userInfo['last_pw_change'], 'SESSION');\n        $superGlobal->put('last_pw', $userInfo['last_pw'], 'SESSION');\n        $superGlobal->put('can_create_root_folder', $userInfo['can_create_root_folder'], 'SESSION');\n        $superGlobal->put('personal_folder', $userInfo['personal_folder'], 'SESSION');\n        $superGlobal->put('user_email', $userInfo['email'], 'SESSION');\n        $superGlobal->put('user_ga', $userInfo['ga'], 'SESSION');\n        $superGlobal->put('user_avatar', $userInfo['avatar'], 'SESSION');\n        $superGlobal->put('user_avatar_thumb', $userInfo['avatar_thumb'], 'SESSION');\n        $superGlobal->put('user_upgrade_needed', $userInfo['upgrade_needed'], 'SESSION');\n        $superGlobal->put('user_force_relog', $userInfo['force-relog'], 'SESSION');\n        $superGlobal->put('is_ready_for_usage', $userInfo['is_ready_for_usage'], 'SESSION');\n        $superGlobal->put(\n            'user_treeloadstrategy',\n            (isset($userInfo['treeloadstrategy']) === false || empty($userInfo['treeloadstrategy']) === true) ? 'full' : $userInfo['treeloadstrategy'],\n            'SESSION',\n            'user'\n        );\n        $superGlobal->put('user_agsescardid', $userInfo['agses-usercardid'], 'SESSION', 'user');\n        $superGlobal->put('user_language', $userInfo['user_language'], 'SESSION', 'user');\n        $superGlobal->put('user_timezone', $userInfo['usertimezone'], 'SESSION', 'user');\n        $superGlobal->put('session_duration', $dataReceived['duree_session'] * 60, 'SESSION', 'user');\n\n        // User signature keys\n        $returnKeys = prepareUserEncryptionKeys($userInfo, $passwordClear);        \n        $superGlobal->put('public_key', $returnKeys['public_key'], 'SESSION', 'user');\n        $superGlobal->put('private_key', $returnKeys['private_key_clear'], 'SESSION', 'user');\n\n        // API key\n        $superGlobal->put(\n            'api-key',\n            empty($userInfo['api_key']) === false ? base64_decode(decryptUserObjectKey($userInfo['api_key'], $returnKeys['private_key_clear'])) : '',\n            'SESSION',\n            'user'\n        );\n        \n        $superGlobal->put('special', $userInfo['special'], 'SESSION', 'user');\n        $superGlobal->put('auth_type', $userInfo['auth_type'], 'SESSION', 'user');\n        // manage session expiration\n        $superGlobal->put('sessionDuration', (int) (time() + ($dataReceived['duree_session'] * 60)), 'SESSION');\n\n        // check feedback regarding user password validity\n        $return = checkUserPasswordValidity(\n            $userInfo,\n            $superGlobal->get('numDaysBeforePwExpiration', 'SESSION'),\n            $superGlobal->get('last_pw_change', 'SESSION'),\n            $SETTINGS\n        );\n        $superGlobal->put('validite_pw', $return['validite_pw'], 'SESSION');\n        $superGlobal->put('last_pw_change', $return['last_pw_change'], 'SESSION');\n        $superGlobal->put('numDaysBeforePwExpiration', $return['numDaysBeforePwExpiration'], 'SESSION');\n        $superGlobal->put('user_force_relog', $return['user_force_relog'], 'SESSION');\n\n\n        $superGlobal->put(\n            'last_connection',\n            empty($userInfo['last_connexion']) === false ? (int) $userInfo['last_connexion'] : (int) time(),\n            'SESSION'\n        );\n        \n        $superGlobal->put(\n            'latest_items',\n            empty($userInfo['latest_items']) === false ? explode(';', $userInfo['latest_items']) : [],\n            'SESSION'\n        );\n        \n        $superGlobal->put(\n            'favourites',\n            empty($userInfo['favourites']) === false ? explode(';', $userInfo['favourites']) : [],\n            'SESSION'\n        );\n        \n        $superGlobal->put(\n            'groupes_visibles',\n            empty($userInfo['groupes_visibles']) === false ? explode(';', $userInfo['groupes_visibles']) : [],\n            'SESSION'\n        );\n        \n        $superGlobal->put(\n            'no_access_folders',\n            empty($userInfo['groupes_interdits']) === false ? explode(';', $userInfo['groupes_interdits']) : [],\n            'SESSION'\n        );\n        \n        // User's roles\n        if (strpos($userInfo['fonction_id'] !== NULL ? (string) $userInfo['fonction_id'] : '', ',') !== -1) {\n            // Convert , to ;\n            $userInfo['fonction_id'] = str_replace(',', ';', (string) $userInfo['fonction_id']);\n            DB::update(\n                prefixTable('users'),\n                [\n                    'fonction_id' => $userInfo['fonction_id'],\n                ],\n                'id = %i',\n                $superGlobal->get('user_id', 'SESSION')\n            );\n        }\n        // Append with roles from AD groups\n        if (is_null($userInfo['roles_from_ad_groups']) === false) {\n            $userInfo['fonction_id'] = empty($userInfo['fonction_id'])  === true ? $userInfo['roles_from_ad_groups'] : $userInfo['fonction_id']. ';' . $userInfo['roles_from_ad_groups'];\n        }\n        // store\n        $superGlobal->put('fonction_id', $userInfo['fonction_id'], 'SESSION');\n        $superGlobal->put('user_roles', array_filter(explode(';', $userInfo['fonction_id'])), 'SESSION');\n        // build array of roles\n        $superGlobal->put('user_pw_complexity', 0, 'SESSION');\n        $superGlobal->put('arr_roles', [], 'SESSION');\n        if (count($superGlobal->get('user_roles', 'SESSION')) > 0) {\n            $rolesList = DB::query(\n                'SELECT id, title, complexity\n                FROM ' . prefixTable('roles_title') . '\n                WHERE id IN %li',\n                $superGlobal->get('user_roles', 'SESSION')\n            );\n            $excludeUser = isset($SETTINGS['exclude_user']) ? str_contains($superGlobal->get('login'), $SETTINGS['exclude_user']) : false;\n            $adjustPermissions = ($superGlobal->get('user_id', 'SESSION') >= 1000000 && !$excludeUser && (isset($SETTINGS['admin_needle']) || isset($SETTINGS['manager_needle']) || isset($SETTINGS['tp_manager_needle']) || isset($SETTINGS['read_only_needle'])));\n            if ($adjustPermissions) {\n                $userInfo['admin'] = $userInfo['gestionnaire'] = $userInfo['can_manage_all_users'] = $userInfo['read_only'] = 0;\n            }\n            foreach ($rolesList as $role) {\n                $superGlobal->put(\n                    $role['id'],\n                    [\n                        'id' => $role['id'],\n                        'title' => $role['title'],\n                    ],\n                    'SESSION',\n                    'arr_roles'\n                );\n                \n                if ($adjustPermissions) {\n                    if (isset($SETTINGS['admin_needle']) && str_contains($role['title'], $SETTINGS['admin_needle'])) {\n                         $userInfo['gestionnaire'] = $userInfo['can_manage_all_users'] = $userInfo['read_only'] = 0;\n                         $userInfo['admin'] = 1;\n                    }    \n                    if (isset($SETTINGS['manager_needle']) && str_contains($role['title'], $SETTINGS['manager_needle'])) {\n                         $userInfo['admin'] = $userInfo['can_manage_all_users'] = $userInfo['read_only'] = 0;\n                         $userInfo['gestionnaire'] = 1;\n                    }\n                    if (isset($SETTINGS['tp_manager_needle']) && str_contains($role['title'], $SETTINGS['tp_manager_needle'])) {\n                         $userInfo['admin'] = $userInfo['gestionnaire'] = $userInfo['read_only'] = 0;\n                         $userInfo['can_manage_all_users'] = 1;\n                    }\n                    if (isset($SETTINGS['read_only_needle']) && str_contains($role['title'], $SETTINGS['read_only_needle'])) {\n                         $userInfo['admin'] = $userInfo['gestionnaire'] = $userInfo['can_manage_all_users'] = 0;\n                         $userInfo['read_only'] = 1;\n                    }\n                }\n\n                // get highest complexity\n                if (intval($superGlobal->get('user_pw_complexity', 'SESSION')) < intval($role['complexity'])) {\n                    $superGlobal->put('user_pw_complexity', $role['complexity'], 'SESSION');\n                }\n            }\n            if ($adjustPermissions) {\n                $superGlobal->put('admin', $userInfo['admin'], 'SESSION');\n                $superGlobal->put('user_manager', $userInfo['gestionnaire'], 'SESSION');\n                $superGlobal->put('user_can_manage_all_users', $userInfo['can_manage_all_users'], 'SESSION');\n                $superGlobal->put('user_read_only', (bool) $userInfo['read_only'], 'SESSION');\n                DB::update(\n                    prefixTable('users'),\n                    [\n                        'admin' => $userInfo['admin'],\n                        'gestionnaire' => $userInfo['gestionnaire'],\n                        'can_manage_all_users' => $userInfo['can_manage_all_users'],\n                        'read_only' => $userInfo['read_only'],\n                    ],\n                    'id = %i',\n                    $superGlobal->get('user_id', 'SESSION')\n                );\n            }\n        }\n\n        // build complete array of roles\n        $superGlobal->put('arr_roles_full', [], 'SESSION');\n        $rows = DB::query('SELECT id, title FROM ' . prefixTable('roles_title') . ' ORDER BY title ASC');\n        foreach ($rows as $record) {\n            $superGlobal->put(\n                $record['id'],\n                [\n                    'id' => $record['id'],\n                    'title' => $record['title'],\n                ],\n                'SESSION',\n                'arr_roles_full'\n            );\n        }\n        // Set some settings\n        $SETTINGS['update_needed'] = '';\n\n        // Update table\n        DB::update(\n            prefixTable('users'),\n            array_merge(\n                [\n                    'key_tempo' => $superGlobal->get('key', 'SESSION'),\n                    'last_connexion' => time(),\n                    'timestamp' => time(),\n                    'disabled' => 0,\n                    'no_bad_attempts' => 0,\n                    'session_end' => $superGlobal->get('sessionDuration', 'SESSION'),\n                    'user_ip' => $dataReceived['client'],\n                ],\n                $returnKeys['update_keys_in_db']\n            ),\n            'id=%i',\n            $userInfo['id']\n        );\n        \n        // Get user's rights\n        if ($userLdap['user_initial_creation_through_ldap'] !== false) {\n            // is new LDAP user. Show only his personal folder\n            if ($SETTINGS['enable_pf_feature'] === '1') {\n                $superGlobal->put('personal_visible_groups', [$userInfo['id']], 'SESSION');\n                $superGlobal->put('personal_folders', [$userInfo['id']], 'SESSION');\n            } else {\n                $superGlobal->put('personal_visible_groups', [], 'SESSION');\n                $superGlobal->put('personal_folders', [], 'SESSION');\n            }\n            $superGlobal->put('all_non_personal_folders', [], 'SESSION');\n            $superGlobal->put('groupes_visibles', [], 'SESSION');\n            $superGlobal->put('read_only_folders', [], 'SESSION');\n            $superGlobal->put('list_folders_limited', '', 'SESSION');\n            $superGlobal->put('list_folders_editable_by_role', [], 'SESSION');\n            $superGlobal->put('list_restricted_folders_for_items', [], 'SESSION');\n            $superGlobal->put('nb_folders', 1, 'SESSION');\n            $superGlobal->put('nb_roles', 0, 'SESSION');\n        } else {\n            identifyUserRights(\n                $userInfo['groupes_visibles'],\n                $superGlobal->get('no_access_folders', 'SESSION'),\n                $userInfo['admin'],\n                $userInfo['fonction_id'],\n                $SETTINGS\n            );\n        }\n        // Get some more elements\n        $superGlobal->put('screenHeight', $dataReceived['screenHeight'], 'SESSION');\n        // Get last seen items\n        $superGlobal->put('latest_items_tab', [], 'SESSION');\n        $superGlobal->put('nb_roles', 0, 'SESSION');\n        foreach ($superGlobal->get('latest_items', 'SESSION') as $item) {\n            if (! empty($item)) {\n                $dataLastItems = DB::queryFirstRow(\n                    'SELECT id,label,id_tree\n                    FROM ' . prefixTable('items') . '\n                    WHERE id=%i',\n                    $item\n                );\n                $superGlobal->put(\n                    $item,\n                    [\n                        'id' => $item,\n                        'label' => $dataLastItems['label'],\n                        'url' => 'index.php?page=items&amp;group=' . $dataLastItems['id_tree'] . '&amp;id=' . $item,\n                    ],\n                    'SESSION',\n                    'latest_items_tab'\n                );\n            }\n        }\n        // send back the random key\n        $return = $dataReceived['randomstring'];\n        // Send email\n        if (\n            isKeyExistingAndEqual('enable_send_email_on_user_login', 1, $SETTINGS) === true\n            && (int) $sessionAdmin !== 1\n        ) {\n            // get all Admin users\n            $val = DB::queryfirstrow('SELECT email FROM ' . prefixTable('users') . \" WHERE admin = %i and email != ''\", 1);\n            if (DB::count() > 0) {\n                // Add email to table\n                prepareSendingEmail(\n                    langHdl('email_subject_on_user_login'),\n                    str_replace(\n                        [\n                            '#tp_user#',\n                            '#tp_date#',\n                            '#tp_time#',\n                        ],\n                        [\n                            ' ' . $superGlobal->get('login', 'SESSION') . ' (IP: ' . getClientIpServer() . ')',\n                            date($SETTINGS['date_format'], (int) $superGlobal->get('last_connection', 'SESSION')),\n                            date($SETTINGS['time_format'], (int) $superGlobal->get('last_connection', 'SESSION')),\n                        ],\n                        langHdl('email_body_on_user_login')\n                    ),\n                    $val['email'],\n                    langHdl('administrator'),\n                    $SETTINGS\n                );\n            }\n        }\n\n        // Ensure Complexity levels are translated\n        defineComplexity();\n\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => $return,\n                'user_id' => $superGlobal->get('user_id', 'SESSION') !== null ? (int) $superGlobal->get('user_id', 'SESSION') : '',\n                'user_admin' => $superGlobal->get('admin', 'SESSION') !== null ? (int) $superGlobal->get('admin', 'SESSION') : 0,\n                'initial_url' => $antiXss->xss_clean($sessionUrl),\n                'pwd_attempts' => 0,\n                'error' => false,\n                'message' => $superGlobal->get('user_upgrade_needed', 'SESSION') !== null && (int) $superGlobal->get('user_upgrade_needed', 'SESSION') === 1 ? 'ask_for_otc' : '',\n                'first_connection' => $superGlobal->get('validite_pw', 'SESSION') === false ? true : false,\n                'password_complexity' => TP_PW_COMPLEXITY[$superGlobal->get('user_pw_complexity', 'SESSION')][1],\n                'password_change_expected' => $userInfo['special'] === 'password_change_expected' ? true : false,\n                'private_key_conform' => $superGlobal->get('user_id', 'SESSION') !== null\n                    && empty($superGlobal->get('private_key', 'SESSION', 'user')) === false\n                    && $superGlobal->get('private_key', 'SESSION', 'user') !== 'none' ? true : false,\n                'session_key' => $superGlobal->get('key', 'SESSION'),\n                'can_create_root_folder' => $superGlobal->get('can_create_root_folder', 'SESSION') !== null ? (int) $superGlobal->get('can_create_root_folder', 'SESSION') : '',\n                'shown_warning_unsuccessful_login' => $superGlobal->get('unsuccessfull_login_attempts_shown', 'SESSION', 'user'),\n                'nb_unsuccessful_logins' => $superGlobal->get('unsuccessfull_login_attempts_nb', 'SESSION', 'user'),\n                'upgrade_needed' => isset($userInfo['upgrade_needed']) === true ? (int) $userInfo['upgrade_needed'] : 0,\n                'special' => isset($userInfo['special']) === true ? (int) $userInfo['special'] : 0,\n            ],\n            'encode'\n        );\n    \n        return true;\n\n    } elseif ((int) $userInfo['disabled'] === 1) {\n        // User and password is okay but account is locked\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => $return,\n                'user_id' => $superGlobal->get('user_id', 'SESSION') !== null ? (int) $superGlobal->get('user_id', 'SESSION') : '',\n                'user_admin' => $superGlobal->get('admin', 'SESSION') !== null ? (int) $superGlobal->get('admin', 'SESSION') : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => 0,\n                'error' => 'user_is_locked',\n                'message' => langHdl('account_is_locked'),\n                'first_connection' => $superGlobal->get('validite_pw', 'SESSION') === false ? true : false,\n                'password_complexity' => TP_PW_COMPLEXITY[$superGlobal->get('user_pw_complexity', 'SESSION')][1],\n                'password_change_expected' => $userInfo['special'] === 'password_change_expected' ? true : false,\n                'private_key_conform' => $superGlobal->get('private_key', 'SESSION', 'user') !== null\n                    && empty($superGlobal->get('private_key', 'SESSION', 'user')) === false\n                    && $superGlobal->get('private_key', 'SESSION', 'user') !== 'none' ? true : false,\n                'session_key' => $superGlobal->get('key', 'SESSION'),\n                'can_create_root_folder' => $superGlobal->get('can_create_root_folder', 'SESSION') !== null ? (int) $superGlobal->get('can_create_root_folder', 'SESSION') : '',\n                'shown_warning_unsuccessful_login' => $superGlobal->get('unsuccessfull_login_attempts_shown', 'SESSION', 'user'),\n                'nb_unsuccessful_logins' => $superGlobal->get('unsuccessfull_login_attempts_nb', 'SESSION', 'user'),\n            ],\n            'encode'\n        );\n        return false;\n    }\n\n    // DEFAULT CASE\n    // User exists in the DB but Password is false\n    // check if user is locked\n    if (isUserLocked(\n            (int) $userInfo['no_bad_attempts'],\n            $userInfo['id'],\n            $username,\n            $superGlobal->get('key', 'SESSION'),\n            $SETTINGS\n        ) === true\n    ) {\n        echo prepareExchangedData(\n            $SETTINGS['cpassman_dir'],\n            [\n                'value' => $return,\n                'user_id' => $superGlobal->get('user_id', 'SESSION') !== null ? (int) $superGlobal->get('user_id', 'SESSION') : '',\n                'user_admin' => $superGlobal->get('admin', 'SESSION') !== null ? (int) $superGlobal->get('admin', 'SESSION') : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => 0,\n                'error' => 'user_is_locked',\n                'message' => langHdl('account_is_locked'),\n                'first_connection' => $superGlobal->get('validite_pw', 'SESSION') === false ? true : false,\n                'password_complexity' => TP_PW_COMPLEXITY[$superGlobal->get('user_pw_complexity', 'SESSION')][1],\n                'password_change_expected' => $userInfo['special'] === 'password_change_expected' ? true : false,\n                'private_key_conform' => $superGlobal->get('user_id', 'SESSION') !== null\n                    && empty($superGlobal->get('private_key', 'SESSION', 'user')) === false\n                    && $superGlobal->get('private_key', 'SESSION', 'user') !== 'none' ? true : false,\n                'session_key' => $superGlobal->get('key', 'SESSION'),\n                'can_create_root_folder' => $superGlobal->get('can_create_root_folder', 'SESSION') !== null ? (int) $superGlobal->get('can_create_root_folder', 'SESSION') : '',\n                'shown_warning_unsuccessful_login' => $superGlobal->get('unsuccessfull_login_attempts_shown', 'SESSION', 'user'),\n                'nb_unsuccessful_logins' => $superGlobal->get('unsuccessfull_login_attempts_nb', 'SESSION', 'user'),\n            ],\n            'encode'\n        );\n        return false;\n    }\n    echo prepareExchangedData(\n        $SETTINGS['cpassman_dir'],\n        [\n            'value' => $return,\n            'user_id' => $superGlobal->get('user_id', 'SESSION') !== null ? (int) $superGlobal->get('user_id', 'SESSION') : '',\n            'user_admin' => $superGlobal->get('admin', 'SESSION') !== null ? (int) $superGlobal->get('admin', 'SESSION') : 0,\n            'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'error' => true,\n            'message' => langHdl('error_not_allowed_to_authenticate'),\n            'first_connection' => $superGlobal->get('validite_pw', 'SESSION') === false ? true : false,\n            'password_complexity' => TP_PW_COMPLEXITY[$superGlobal->get('user_pw_complexity', 'SESSION')][1],\n            'password_change_expected' => $userInfo['special'] === 'password_change_expected' ? true : false,\n            'private_key_conform' => $superGlobal->get('user_id', 'SESSION') !== null\n                    && empty($superGlobal->get('private_key', 'SESSION', 'user')) === false\n                    && $superGlobal->get('private_key', 'SESSION', 'user') !== 'none' ? true : false,\n            'session_key' => $superGlobal->get('key', 'SESSION'),\n            'can_create_root_folder' => $superGlobal->get('can_create_root_folder', 'SESSION') !== null ? (int) $superGlobal->get('can_create_root_folder', 'SESSION') : '',\n            'shown_warning_unsuccessful_login' => $superGlobal->get('unsuccessfull_login_attempts_shown', 'SESSION', 'user'),\n            'nb_unsuccessful_logins' => $superGlobal->get('unsuccessfull_login_attempts_nb', 'SESSION', 'user'),\n        ],\n        'encode'\n    );\n    return false;\n}\n\n/**\n * Check if any unsuccessfull login tries exist\n *\n * @param int       $userInfoId\n * @param string    $userInfoLogin\n * @param string    $userInfoLastConnection\n * @param string    $username\n * @param array     $SETTINGS\n * @return array\n */\nfunction handleLoginAttempts(\n    $userInfoId,\n    $userInfoLogin,\n    $userInfoLastConnection,\n    $username,\n    $SETTINGS\n) : array\n{\n    $rows = DB::query(\n        'SELECT date\n        FROM ' . prefixTable('log_system') . \"\n        WHERE field_1 = %s\n        AND type = 'failed_auth'\n        AND label = 'password_is_not_correct'\n        AND date >= %s AND date < %s\",\n        $userInfoLogin,\n        $userInfoLastConnection,\n        time()\n    );\n    $arrAttempts = [];\n    if (DB::count() > 0) {\n        foreach ($rows as $record) {\n            array_push(\n                $arrAttempts,\n                date($SETTINGS['date_format'] . ' ' . $SETTINGS['time_format'], (int) $record['date'])\n            );\n        }\n    }\n    \n\n    // Log into DB the user's connection\n    if (isKeyExistingAndEqual('log_connections', 1, $SETTINGS) === true) {\n        logEvents($SETTINGS, 'user_connection', 'connection', (string) $userInfoId, stripslashes($username));\n    }\n\n    return [\n        'attemptsList' => $arrAttempts,\n        'attemptsCount' => count($rows),\n    ];\n}\n\n/**\n * Permits to load config file\n *\n * @return boolean\n */\nfunction findTpConfigFile() : bool\n{\n    if (file_exists('../includes/config/tp.config.php')) {\n        include_once '../includes/config/tp.config.php';\n        return true;\n    } elseif (file_exists('./includes/config/tp.config.php')) {\n        include_once './includes/config/tp.config.php';\n    } elseif (file_exists('../../includes/config/tp.config.php')) {\n        include_once '../../includes/config/tp.config.php';\n    } elseif (file_exists('../../../includes/config/tp.config.php')) {\n        include_once '../../../includes/config/tp.config.php';\n    }\n    return false;\n}\n\n/**\n * Can you user get logged into main page\n *\n * @param array     $SETTINGS\n * @param int       $userInfoDisabled\n * @param string    $username\n * @param bool      $ldapConnection\n *\n * @return boolean\n */\nfunction canUserGetLog(\n    $SETTINGS,\n    $userInfoDisabled,\n    $username,\n    $ldapConnection\n) : bool\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/main.functions.php';\n\n    if ((int) $userInfoDisabled === 1) {\n        return false;\n    }\n\n    if (isKeyExistingAndEqual('ldap_mode', 0, $SETTINGS) === true) {\n        return true;\n    }\n    \n    if (isKeyExistingAndEqual('ldap_mode', 1, $SETTINGS) === true \n        && (\n            ($ldapConnection === true && $username !== 'admin')\n            || $username === 'admin'\n        )\n    ) {\n        return true;\n    }\n\n    if (isKeyExistingAndEqual('ldap_and_local_authentication', 1, $SETTINGS) === true\n        && isset($SETTINGS['ldap_mode']) === true && in_array($SETTINGS['ldap_mode'], ['1', '2']) === true\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Manages if user is locked or not\n *\n * @param int       $nbAttempts\n * @param int       $userId\n * @param string    $username\n * @param string    $key\n * @param array     $SETTINGS\n *\n * @return boolean\n */\nfunction isUserLocked(\n    $nbAttempts,\n    $userId,\n    $username,\n    $key,\n    $SETTINGS\n) : bool \n{\n    $userIsLocked = false;\n    $nbAttempts++;\n    if (\n        (int) $SETTINGS['nb_bad_authentication'] > 0\n        && (int) $SETTINGS['nb_bad_authentication'] < $nbAttempts\n    ) {\n        // User is now locked as too many attempts\n        $userIsLocked = true;\n\n        // log it\n        if (isKeyExistingAndEqual('log_connections', 1, $SETTINGS) === true) {\n            logEvents($SETTINGS, 'user_locked', 'connection', (string) $userId, stripslashes($username));\n        }\n    }\n    \n    DB::update(\n        prefixTable('users'),\n        [\n            'key_tempo' => $key,\n            'disabled' => $userIsLocked,\n            'no_bad_attempts' => $nbAttempts,\n        ],\n        'id=%i',\n        $userId\n    );\n\n    return $userIsLocked;\n}\n\n\n/**\n * \n * Prepare user keys\n * \n * @param array $userInfo   User account information\n * @param string $passwordClear\n *\n * @return array\n */\nfunction prepareUserEncryptionKeys($userInfo, $passwordClear) : array\n{\n    if (is_null($userInfo['private_key']) === true || empty($userInfo['private_key']) === true || $userInfo['private_key'] === 'none') {\n        // No keys have been generated yet\n        // Create them\n        $userKeys = generateUserKeys($passwordClear);\n\n        return [\n            'public_key' => $userKeys['public_key'],\n            'private_key_clear' => $userKeys['private_key_clear'],\n            'update_keys_in_db' => [\n                'public_key' => $userKeys['public_key'],\n                'private_key' => $userKeys['private_key'],\n            ],\n        ];\n    } \n    \n    if ($userInfo['special'] === 'generate-keys') {\n        return [\n            'public_key' => $userInfo['public_key'],\n            'private_key_clear' => '',\n            'update_keys_in_db' => [],\n        ];\n    }\n    \n    // Don't perform this in case of special login action\n    if ($userInfo['special'] === 'otc_is_required_on_next_login' || $userInfo['special'] === 'user_added_from_ldap') {\n        return [\n            'public_key' => $userInfo['public_key'],\n            'private_key_clear' => '',\n            'update_keys_in_db' => [],\n        ];\n    }\n    \n    // Uncrypt private key\n    return [\n        'public_key' => $userInfo['public_key'],\n        'private_key_clear' => decryptPrivateKey($passwordClear, $userInfo['private_key']),\n        'update_keys_in_db' => [],\n    ];\n}\n\n\n/**\n * CHECK PASSWORD VALIDITY\n * Don't take into consideration if LDAP in use\n * \n * @param array $userInfo                       User account information\n * @param int $numDaysBeforePwExpiration\n * @param int $lastPwChange\n * @param array $SETTINGS                       Teampass settings\n *\n * @return array\n */\nfunction checkUserPasswordValidity($userInfo, $numDaysBeforePwExpiration, $lastPwChange, $SETTINGS)\n{\n    if (isKeyExistingAndEqual('ldap_mode', 1, $SETTINGS) === true) {\n        return [\n            'validite_pw' => true,\n            'last_pw_change' => $userInfo['last_pw_change'],\n            'user_force_relog' => '',\n            'numDaysBeforePwExpiration' => '',\n        ];\n    }\n\n    if (isset($userInfo['last_pw_change']) === true) {\n        if ((int) $SETTINGS['pw_life_duration'] === 0) {\n            return [\n                'validite_pw' => true,\n                'last_pw_change' => '',\n                'user_force_relog' => 'infinite',\n                'numDaysBeforePwExpiration' => '',\n            ];\n        }\n        \n        return [\n            'validite_pw' => $numDaysBeforePwExpiration <= 0 ? false : true,\n            'last_pw_change' => $userInfo['last_pw_change'],\n            'user_force_relog' => 'infinite',\n            'numDaysBeforePwExpiration' => $SETTINGS['pw_life_duration'] - round(\n                (mktime(0, 0, 0, (int) date('m'), (int) date('d'), (int) date('y')) - $lastPwChange) / (24 * 60 * 60)),\n        ];\n    } else {\n        return [\n            'validite_pw' => false,\n            'last_pw_change' => '',\n            'user_force_relog' => '',\n            'numDaysBeforePwExpiration' => '',\n        ];\n    }\n}\n\n\n/**\n * Authenticate a user through AD.\n *\n * @param string $username      Username\n * @param array $userInfo       User account information\n * @param string $passwordClear Password\n * @param array $SETTINGS       Teampass settings\n *\n * @return array\n */\nfunction authenticateThroughAD(string $username, array $userInfo, string $passwordClear, array $SETTINGS): array\n{\n    // Load expected libraries\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Illuminate/Contracts/Auth/Authenticatable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Illuminate/Contracts/Support/Arrayable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Traits/EnumeratesValues.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Traits/Macroable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/helpers.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Arr.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Contracts/Support/Jsonable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Contracts/Support/Arrayable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Enumerable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Collection.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/CarbonTimeZone.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Units.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Week.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Timestamp.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Test.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/ObjectInitialisation.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Serialization.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/IntervalRounding.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Rounding.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Localization.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Options.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Cast.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Mutability.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Modifiers.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Mixin.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Macro.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Difference.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Creator.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Converter.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Comparison.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Boundaries.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Traits/Date.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/CarbonInterface.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Carbon/Carbon.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/DetectsErrors.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/Connection.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/LdapInterface.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/HandlesConnection.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/Ldap.php';\n    $ad = new SplClassLoader('LdapRecord', '../includes/libraries');\n    $ad->register();\n\n    // Build ldap configuration array\n    $config = [\n        // Mandatory Configuration Options\n        'hosts' => [explode(',', $SETTINGS['ldap_hosts'])],\n        'base_dn' => $SETTINGS['ldap_bdn'],\n        'username' => $SETTINGS['ldap_username'],\n        'password' => $SETTINGS['ldap_password'],\n\n        // Optional Configuration Options\n        'port' => $SETTINGS['ldap_port'],\n        'use_ssl' => (int) $SETTINGS['ldap_ssl'] === 1 ? true : false,\n        'use_tls' => (int) $SETTINGS['ldap_tls'] === 1 ? true : false,\n        'version' => 3,\n        'timeout' => 5,\n        'follow_referrals' => false,\n\n        // Custom LDAP Options\n        'options' => [\n            // See: http://php.net/ldap_set_option\n            LDAP_OPT_X_TLS_REQUIRE_CERT => (isset($SETTINGS['ldap_tls_certiface_check']) ? $SETTINGS['ldap_tls_certiface_check'] : LDAP_OPT_X_TLS_HARD),\n        ],\n    ];\n    //prepare connection\n    $connection = new Connection($config);\n    \n    try {\n        // Connect to LDAP\n        $connection->connect();\n        Container::addConnection($connection);\n\n        // Get user info from AD\n        // We want to isolate attribute ldap_user_attribute\n        $userADInfos = $connection->query()\n            ->where((isset($SETTINGS['ldap_user_attribute']) ===true && empty($SETTINGS['ldap_user_attribute']) === false) ? strtolower($SETTINGS['ldap_user_attribute']) : 'distinguishedname', '=', $username)\n            ->firstOrFail();\n\n    } catch (\\LdapRecord\\Query\\ObjectNotFoundException $e) {\n        return [\n            'error' => true,\n            'message' => langHdl('error_bad_credentials')\n\n        ];\n    }\n\n    // Check shadowexpire attribute - if === 1 then user disabled\n    if (\n        (isset($userADInfos['shadowexpire'][0]) === true && (int) $userADInfos['shadowexpire'][0] === 1)\n        ||\n        (isset($userADInfos['accountexpires'][0]) === true && (int) $userADInfos['accountexpires'][0] < time() && (int) $userADInfos['accountexpires'][0] != 0)\n    ) {\n        return [\n            'error' => true,\n            'message' => langHdl('error_ad_user_expired'),\n        ];\n    }\n\n    // User auth attempt\n    $userAuthAttempt = $connection->auth()->attempt(\n        $SETTINGS['ldap_type'] === 'ActiveDirectory' ?\n            $userADInfos[(isset($SETTINGS['ldap_user_dn_attribute']) === true && empty($SETTINGS['ldap_user_dn_attribute']) === false) ? $SETTINGS['ldap_user_dn_attribute'] : 'cn'][0] :\n            $userADInfos['dn'],\n        $passwordClear\n    );\n    \n    // User is not auth then return error\n    if ($userAuthAttempt === false) {\n        return [\n            'error' => true,\n            'message' => \"Error : User could not be authentificated\",\n        ];\n    }\n\n    // Create LDAP user if not exists and tasks enabled\n    if ($userInfo['ldap_user_to_be_created'] === true) {   \n        $userInfo = ldapCreateUser(\n            $username,\n            $passwordClear,\n            $userADInfos['mail'][0],\n            $userADInfos['givenname'][0],\n            $userADInfos['sn'][0],\n            $SETTINGS\n        );\n\n        // prepapre background tasks for item keys generation  \n        handleUserKeys(\n            (int) $userInfo['id'],\n            (string) $passwordClear,\n            (int) isset($SETTINGS['maximum_number_of_items_to_treat']) === true ? $SETTINGS['maximum_number_of_items_to_treat'] : NUMBER_ITEMS_IN_BATCH,\n            uniqidReal(20),\n            true,\n            true,\n            true,\n            false,\n            langHdl('email_body_user_config_2'),\n        );\n\n        // Complete $userInfo\n        $userInfo['has_been_created'] = 1;\n    } else {\n        $userInfo['has_been_created'] = 0;\n    }\n\n    // Update user info with his AD groups\n    if ($SETTINGS['ldap_type'] === 'ActiveDirectory') {\n        require_once 'ldap.activedirectory.php';\n    } else {\n        require_once 'ldap.openldap.php';\n    }   \n    $ret = getUserADGroups(\n        $SETTINGS['ldap_type'] === 'ActiveDirectory' ?\n            $userADInfos[(isset($SETTINGS['ldap_user_dn_attribute']) === true && empty($SETTINGS['ldap_user_dn_attribute']) === false) ? $SETTINGS['ldap_user_dn_attribute'] : 'cn'][0] :\n            $userADInfos['dn'], \n        $connection, \n        $SETTINGS\n    );\n    \n    handleUserADGroups(\n        $username,\n        $userInfo,\n        $ret['userGroups'],\n        $SETTINGS\n    );\n\n    // Finalize authentication\n    finalizeAuthentication($userInfo, $passwordClear, $SETTINGS);\n\n    return [\n        'error' => false,\n        'message' => '',\n        'user_info' => $userInfo,\n    ];\n}\n\n/**\n * Permits to update the user's AD groups with mapping roles\n *\n * @param string $username\n * @param array $userInfo\n * @param array $groups\n * @param array $SETTINGS\n * @return void\n */\nfunction handleUserADGroups(string $username, array $userInfo, array $groups, array $SETTINGS): void\n{\n    if (isset($SETTINGS['enable_ad_users_with_ad_groups']) === true && (int) $SETTINGS['enable_ad_users_with_ad_groups'] === 1) {\n        // Get user groups from AD\n        $user_ad_groups = [];\n        foreach($groups as $group) {\n            //print_r($group);\n            // get relation role id for AD group\n            $role = DB::queryFirstRow(\n                'SELECT lgr.role_id\n                FROM ' . prefixTable('ldap_groups_roles') . ' AS lgr\n                WHERE lgr.ldap_group_id = %i',\n                $group\n            );\n            if (DB::count() > 0) {\n                array_push($user_ad_groups, $role['role_id']); \n            }\n        }\n        \n        // save\n        if (count($user_ad_groups) > 0) {\n            $user_ad_groups = implode(';', $user_ad_groups);\n            DB::update(\n                prefixTable('users'),\n                [\n                    'roles_from_ad_groups' => $user_ad_groups,\n                ],\n                'id = %i',\n                $userInfo['id']\n            );\n\n            $userInfo['roles_from_ad_groups'] = $user_ad_groups;\n        } else {\n            DB::update(\n                prefixTable('users'),\n                [\n                    'roles_from_ad_groups' => null,\n                ],\n                'id = %i',\n                $userInfo['id']\n            );\n\n            $userInfo['roles_from_ad_groups'] = [];\n        }\n    } else {\n        // Delete all user's AD groups\n        DB::update(\n            prefixTable('users'),\n            [\n                'roles_from_ad_groups' => null,\n            ],\n            'id = %i',\n            $userInfo['id']\n        );\n    }\n}\n\n/**\n * Permits to finalize the authentication process.\n *\n * @param array $userInfo\n * @param string $passwordClear\n * @param array $SETTINGS\n */\nfunction finalizeAuthentication(\n    array $userInfo,\n    string $passwordClear,\n    array $SETTINGS\n): void\n{\n    // load passwordLib library\n    $pwdlib = new SplClassLoader('PasswordLib', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $pwdlib->register();\n    $pwdlib = new PasswordLib\\PasswordLib();\n    $hashedPassword = $pwdlib->createPasswordHash($passwordClear);\n\n    //If user has never been connected then erase current pwd with the ldap's one\n    if (empty($userInfo['pw']) === true) {\n        // Password are similar in Teampass and AD\n        DB::update(\n            prefixTable('users'),\n            [\n                'pw' => $hashedPassword,\n            ],\n            'id = %i',\n            $userInfo['id']\n        );\n    } elseif ($userInfo['special'] === 'user_added_from_ldap') {\n        // Case where user has been added from LDAP and never being connected to TP\n        DB::update(\n            prefixTable('users'),\n            array(\n                'pw' => $hashedPassword,\n            ),\n            'id = %i',\n            $userInfo['id']\n        );\n    } elseif ($pwdlib->verifyPasswordHash($passwordClear, $userInfo['pw']) === false) {\n        // Case where user is auth by LDAP but his password in Teampass is not synchronized\n        // For example when user has changed his password in AD.\n        // So we need to update it in Teampass and ask for private key re-encryption\n        DB::update(\n            prefixTable('users'),\n            [\n                'pw' => $hashedPassword,\n            ],\n            'id = %i',\n            $userInfo['id']\n        );\n    }\n}\n\n/**\n * Undocumented function.\n *\n * @param string|array|resource $dataReceived Received data\n * @param string                $userInfo     Result of query\n * @param array                 $SETTINGS     Teampass settings\n *\n * @return array\n */\nfunction yubicoMFACheck($dataReceived, string $userInfo, array $SETTINGS): array\n{\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    $sessionAdmin = $superGlobal->get('user_admin', 'SESSION');\n    $sessionUrl = $superGlobal->get('initial_url', 'SESSION');\n    $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n    // Init\n    $yubico_key = htmlspecialchars_decode($dataReceived['yubico_key']);\n    $yubico_user_key = htmlspecialchars_decode($dataReceived['yubico_user_key']);\n    $yubico_user_id = htmlspecialchars_decode($dataReceived['yubico_user_id']);\n    if (empty($yubico_user_key) === false && empty($yubico_user_id) === false) {\n        // save the new yubico in user's account\n        DB::update(\n            prefixTable('users'),\n            [\n                'yubico_user_key' => $yubico_user_key,\n                'yubico_user_id' => $yubico_user_id,\n            ],\n            'id=%i',\n            $userInfo['id']\n        );\n    } else {\n        // Check existing yubico credentials\n        if ($userInfo['yubico_user_key'] === 'none' || $userInfo['yubico_user_id'] === 'none') {\n            return [\n                'error' => true,\n                'value' => '',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : '',\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => 'no_user_yubico_credentials',\n                'message' => '',\n                'proceedIdentification' => false,\n            ];\n        }\n        $yubico_user_key = $userInfo['yubico_user_key'];\n        $yubico_user_id = $userInfo['yubico_user_id'];\n    }\n\n    // Now check yubico validity\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Authentication/Yubico/Yubico.php';\n    $yubi = new Auth_Yubico($yubico_user_id, $yubico_user_key);\n    $auth = $yubi->verify($yubico_key);\n    //, null, null, null, 60\n\n    if (PEAR::isError($auth)) {\n        return [\n            'error' => true,\n            'value' => '',\n            'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : '',\n            'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'error' => 'bad_user_yubico_credentials',\n            'message' => langHdl('yubico_bad_code'),\n            'proceedIdentification' => false,\n        ];\n    }\n\n    return [\n        'error' => false,\n        'message' => '',\n        'proceedIdentification' => true,\n    ];\n}\n\n/**\n * Undocumented function.\n *\n * @param string $username      User name\n * @param string $passwordClear User password in clear\n * @param array $retLDAP       Received data from LDAP\n * @param array $SETTINGS      Teampass settings\n *\n * @return array\n */\nfunction ldapCreateUser(string $login, string $passwordClear, string $userEmail, string $userName, string $userLastname, array $SETTINGS): array\n{\n    // Generate user keys pair\n    $userKeys = generateUserKeys($passwordClear);\n\n    // load passwordLib library\n    $pwdlib = new SplClassLoader('PasswordLib', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $pwdlib->register();\n    $pwdlib = new PasswordLib\\PasswordLib();\n    $hashedPassword = $pwdlib->createPasswordHash($passwordClear);\n\n    // Insert user in DB\n    DB::insert(\n        prefixTable('users'),\n        [\n            'login' => (string) $login,\n            'pw' => (string) $hashedPassword,\n            'email' => (string) $userEmail,\n            'name' => (string) $userName,\n            'lastname' => (string) $userLastname,\n            'admin' => '0',\n            'gestionnaire' => '0',\n            'can_manage_all_users' => '0',\n            'personal_folder' => $SETTINGS['enable_pf_feature'] === '1' ? '1' : '0',\n            'groupes_interdits' => '',\n            'groupes_visibles' => '',\n            'last_pw_change' => (int) time(),\n            'user_language' => (string) $SETTINGS['default_language'],\n            'encrypted_psk' => '',\n            'isAdministratedByRole' => isset($SETTINGS['ldap_new_user_is_administrated_by']) === true && empty($SETTINGS['ldap_new_user_is_administrated_by']) === false ? $SETTINGS['ldap_new_user_is_administrated_by'] : 0,\n            'public_key' => $userKeys['public_key'],\n            'private_key' => $userKeys['private_key'],\n            'special' => 'none',\n            'auth_type' => 'ldap',\n            'otp_provided' => '1',\n            'is_ready_for_usage' => '0',\n        ]\n    );\n    $newUserId = DB::insertId();\n\n    // Create the API key\n    DB::insert(\n        prefixTable('api'),\n        array(\n            'type' => 'user',\n            'user_id' => $newUserId,\n            'value' => encryptUserObjectKey(base64_encode(base64_encode(uniqidReal(39))), $userKeys['public_key']),\n            'timestamp' => time(),\n        )\n    );\n\n    // Create personnal folder\n    if (isKeyExistingAndEqual('enable_pf_feature', 1, $SETTINGS) === true) {\n        DB::insert(\n            prefixTable('nested_tree'),\n            [\n                'parent_id' => '0',\n                'title' => $newUserId,\n                'bloquer_creation' => '0',\n                'bloquer_modification' => '0',\n                'personal_folder' => '1',\n                'categories' => '',\n            ]\n        );\n        // Rebuild tree\n        $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n        $tree->register();\n        $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n        $tree->rebuild();\n    }\n\n    return [\n        'error' => false,\n        'message' => '',\n        'proceedIdentification' => true,\n        'user_initial_creation_through_ldap' => true,\n        'id' => $newUserId,\n    ];\n}\n\n/**\n * Undocumented function.\n *\n * @param string                $username     Username\n * @param array                 $userInfo     Result of query\n * @param string|array|resource $dataReceived DataReceived\n * @param array                 $SETTINGS     Teampass settings\n *\n * @return array\n */\nfunction googleMFACheck(string $username, array $userInfo, $dataReceived, array $SETTINGS): array\n{\n    if (\n        isset($dataReceived['GACode']) === true\n        && empty($dataReceived['GACode']) === false\n    ) {\n        // Load superGlobals\n        include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n        $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n        $sessionAdmin = $superGlobal->get('user_admin', 'SESSION');\n        $sessionUrl = $superGlobal->get('initial_url', 'SESSION');\n        $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n        // load library\n        include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Authentication/TwoFactorAuth/TwoFactorAuth.php';\n        // create new instance\n        $tfa = new Authentication\\TwoFactorAuth\\TwoFactorAuth($SETTINGS['ga_website_name']);\n        // Init\n        $firstTime = [];\n        // now check if it is the 1st time the user is using 2FA\n        if ($userInfo['ga_temporary_code'] !== 'none' && $userInfo['ga_temporary_code'] !== 'done') {\n            if ($userInfo['ga_temporary_code'] !== $dataReceived['GACode']) {\n                return [\n                    'error' => true,\n                    'message' => langHdl('ga_bad_code'),\n                    'proceedIdentification' => false,\n                    'ga_bad_code' => true,\n                    'firstTime' => $firstTime,\n                ];\n            }\n\n            // If first time with MFA code\n            $proceedIdentification = false;\n            $mfaStatus = 'ga_temporary_code_correct';\n            $mfaMessage = langHdl('ga_flash_qr_and_login');\n            // generate new QR\n            $new_2fa_qr = $tfa->getQRCodeImageAsDataUri(\n                'Teampass - ' . $username,\n                $userInfo['ga']\n            );\n            // clear temporary code from DB\n            DB::update(\n                prefixTable('users'),\n                [\n                    'ga_temporary_code' => 'done',\n                ],\n                'id=%i',\n                $userInfo['id']\n            );\n            $firstTime = [\n                'value' => '<img src=\"' . $new_2fa_qr . '\">',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : '',\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'message' => $mfaMessage,\n                'mfaStatus' => $mfaStatus,\n            ];\n        } else {\n            // verify the user GA code\n            if ($tfa->verifyCode($userInfo['ga'], $dataReceived['GACode'])) {\n                $proceedIdentification = true;\n            } else {\n                return [\n                    'error' => true,\n                    'message' => langHdl('ga_bad_code'),\n                    'proceedIdentification' => false,\n                    'ga_bad_code' => true,\n                    'firstTime' => $firstTime,\n                ];\n            }\n        }\n    } else {\n        return [\n            'error' => true,\n            'message' => langHdl('ga_bad_code'),\n            'proceedIdentification' => false,\n            'ga_bad_code' => true,\n            'firstTime' => [],\n        ];\n    }\n\n    return [\n        'error' => false,\n        'message' => '',\n        'proceedIdentification' => $proceedIdentification,\n        'firstTime' => $firstTime,\n    ];\n}\n\n\n/**\n * Perform DUO checks\n *\n * @param string $username\n * @param string|array|resource $dataReceived\n * @param array $SETTINGS\n * @return array\n */\nfunction duoMFACheck(\n    string $username,\n    $dataReceived,\n    array $SETTINGS\n): array\n{\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';            \n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n    $sessionPwdAttempts = $superGlobal->get('pwd_attempts', 'SESSION');\n    $saved_state = null !== $superGlobal->get('duo_state','SESSION') ? $superGlobal->get('duo_state','SESSION') : '';\n    $duo_status = null !== $superGlobal->get('duo_status','SESSION') ? $superGlobal->get('duo_status','SESSION') : '';\n\n    // Ensure state and login are set\n    if (\n        (empty($saved_state) || empty($dataReceived['login']) || !isset($dataReceived['duo_state']) || empty($dataReceived['duo_state']))\n        && $duo_status === 'IN_PROGRESS'\n        && $dataReceived['duo_status'] !== 'start_duo_auth'\n    ) {\n        return [\n            'error' => true,\n            'message' => langHdl('duo_no_data'),\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'proceedIdentification' => false,\n        ];\n    }\n\n    // Ensure state matches from initial request\n    if ($duo_status === 'IN_PROGRESS' && $dataReceived['duo_state'] !== $saved_state) {\n        // We did not received a proper Duo state\n        return [\n            'error' => true,\n            'message' => langHdl('duo_error_state'),\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'proceedIdentification' => false,\n        ];\n    }\n\n    return [\n        'error' => false,\n        'pwd_attempts' => (int) $sessionPwdAttempts,\n        'saved_state' => $saved_state,\n        'duo_status' => $duo_status,\n    ];\n}\n\n\n/**\n * Create the redirect URL or check if the DUO Universal prompt was completed successfully.\n *\n * @param string                $username               Username\n * @param string|array|resource $dataReceived           DataReceived\n * @param array                 $sessionPwdAttempts     Nb of pwd attempts\n * @param array                 $saved_state            Saved state\n * @param array                 $duo_status             Duo status\n * @param array                 $SETTINGS               Teampass settings\n *\n * @return array\n */\nfunction duoMFAPerform(\n    string $username,\n    $dataReceived,\n    int $sessionPwdAttempts,\n    string $saved_state,\n    string $duo_status,\n    array $SETTINGS\n): array\n{\n    // Load superGlobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';            \n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n\n    // load libraries\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/BeforeValidException.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/ExpiredException.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/SignatureInvalidException.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/JWT.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/php-jwt/Key.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/DuoUniversal/DuoException.php';\n    require $SETTINGS['cpassman_dir'].'/includes/libraries/Authentication/DuoUniversal/Client.php';\n\n    try {\n        $duo_client = new Duo\\DuoUniversal\\Client(\n            $SETTINGS['duo_ikey'],\n            $SETTINGS['duo_skey'],\n            $SETTINGS['duo_host'],\n            $SETTINGS['cpassman_url'].'/'.DUO_CALLBACK\n        );\n    } catch (Duo\\DuoUniversal\\DuoException $e) {\n        return [\n            'error' => true,\n            'message' => langHdl('duo_config_error'),\n            'debug_message' => $e->getMessage(),\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'proceedIdentification' => false,\n        ];\n    }\n        \n    try {\n        $duo_error = langHdl('duo_error_secure');\n        $duo_failmode = \"none\";\n        $duo_client->healthCheck();\n    } catch (Duo\\DuoUniversal\\DuoException $e) {\n        //Not implemented Duo Failmode in case the Duo services are not available\n        /*if ($SETTINGS['duo_failmode'] == \"safe\") {\n            # If we're failing open, errors in 2FA still allow for success\n            $duo_error = langHdl('duo_error_failopen');\n            $duo_failmode = \"safe\";\n        } else {\n            # Duo has failed and is unavailable, redirect user to the login page\n            $duo_error = langHdl('duo_error_secure');\n            $duo_failmode = \"secure\";\n        }*/\n        return [\n            'error' => true,\n            'message' => $duo_error . langHdl('duo_error_check_config'),\n            'pwd_attempts' => (int) $sessionPwdAttempts,\n            'debug_message' => $e->getMessage(),\n            'proceedIdentification' => false,\n        ];\n    }\n    \n    // Check if no one played with the javascript\n    if ($duo_status !== 'IN_PROGRESS' && $dataReceived['duo_status'] === 'start_duo_auth') {\n        # Create the Duo URL to send the user to\n        try {\n            $duo_state = $duo_client->generateState();\n            $duo_redirect_url = $duo_client->createAuthUrl($username, $duo_state);\n        } catch (Duo\\DuoUniversal\\DuoException $e) {\n            return [\n                'error' => true,\n                'message' => $duo_error . langHdl('duo_error_url'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'debug_message' => $e->getMessage(),\n                'proceedIdentification' => false,\n            ];\n        }\n        \n        // Somethimes Duo return success but fail to return a URL, double check if the URL has been created\n        if (!empty($duo_redirect_url) && isset($duo_redirect_url) && filter_var($duo_redirect_url,FILTER_SANITIZE_URL)) {\n            // Since Duo Universal requires a redirect, let's store some info when the user get's back after completing the Duo prompt\n            $key = hash('sha256', $duo_state);\n            $iv = substr(hash('sha256', $duo_state), 0, 16);\n            $duo_data = serialize([\n                'duo_login' => $username,\n                'duo_pwd' => $dataReceived['pw'],\n            ]);\n            $duo_data_enc = openssl_encrypt($duo_data, 'AES-256-CBC', $key, 0, $iv);\n            $superGlobal->put('duo_state', $duo_state, 'SESSION');\n            $superGlobal->put('duo_data', base64_encode($duo_data_enc), 'SESSION');\n            $superGlobal->put('duo_status', 'IN_PROGRESS', 'SESSION');\n            // If we got here we can reset the password attempts\n            $superGlobal->put('pwd_attempts', 0, 'SESSION');\n            unset($superGlobal);\n            return [\n                'error' => false,\n                'message' => '',\n                'proceedIdentification' => false,\n                'duo_url_ready' => true,\n                'duo_redirect_url' => $duo_redirect_url,\n                'duo_failmode' => $duo_failmode,\n            ];\n        } else {\n            return [\n                'error' => true,\n                'message' => $duo_error . langHdl('duo_error_url'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'proceedIdentification' => false,\n            ];\n        }\n    } elseif ($duo_status === 'IN_PROGRESS' && $dataReceived['duo_code'] !== '') {\n        try {\n            // Check if the Duo code received is valid\n            $decoded_token = $duo_client->exchangeAuthorizationCodeFor2FAResult($dataReceived['duo_code'], $username);\n        } catch (Duo\\DuoUniversal\\DuoException $e) {\n            return [\n                'error' => true,\n                'message' => langHdl('duo_error_decoding'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'debug_message' => $e->getMessage(),\n                'proceedIdentification' => false,\n            ];\n        }\n        // return the response (which should be the user name)\n        if ($decoded_token['preferred_username'] === $username) {\n            $superGlobal->put('duo_status', 'COMPLET', 'SESSION');\n            $superGlobal->forget('duo_state','SESSION');\n            $superGlobal->forget('duo_data','SESSION');\n            unset($superGlobal);\n\n            return [\n                'error' => false,\n                'message' => '',\n                'proceedIdentification' => true,\n                'authenticated_username' => $decoded_token['preferred_username']\n            ];\n        } else {\n            // Something wrong, username from the original Duo request is different than the one received now\n            $superGlobal->forget('duo_status','SESSION');\n            $superGlobal->forget('duo_state','SESSION');\n            $superGlobal->forget('duo_data','SESSION');\n            unset($superGlobal);\n\n            return [\n                'error' => true,\n                'message' => langHdl('duo_login_mismatch'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'proceedIdentification' => false,\n            ];\n        }\n    }\n    // If we are here something wrong\n    $superGlobal->forget('duo_status','SESSION');\n    $superGlobal->forget('duo_state','SESSION');\n    $superGlobal->forget('duo_data','SESSION');\n    unset($superGlobal);\n    return [\n        'error' => true,\n        'message' => langHdl('duo_login_mismatch'),\n        'pwd_attempts' => (int) $sessionPwdAttempts,\n        'proceedIdentification' => false,\n    ];\n}\n\n/**\n * Undocumented function.\n *\n * @param string                $passwordClear Password in clear\n * @param array|string          $userInfo      Array of user data\n * @param array|string|resource $dataReceived  Received data\n * @param string                $username      User name\n * @param array                 $SETTINGS      Teampass settings\n *\n * @return bool\n */\nfunction checkCredentials($passwordClear, $userInfo, $dataReceived, $username, $SETTINGS)\n{\n    // Set to false\n    $userPasswordVerified = false;\n    // load passwordLib library\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    $pwdlib = new SplClassLoader('PasswordLib', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $pwdlib->register();\n    $pwdlib = new PasswordLib\\PasswordLib();\n    // Check if old encryption used\n    if (\n        crypt($passwordClear, $userInfo['pw']) === $userInfo['pw']\n        && empty($userInfo['pw']) === false\n    ) {\n        $userPasswordVerified = true;\n        //update user's password\n        $userInfo['pw'] = $pwdlib->createPasswordHash($passwordClear);\n        DB::update(\n            prefixTable('users'),\n            [\n                'pw' => $userInfo['pw'],\n            ],\n            'id=%i',\n            $userInfo['id']\n        );\n    }\n    //echo $passwordClear.\" - \".$userInfo['pw'].\" - \".$pwdlib->verifyPasswordHash($passwordClear, $userInfo['pw']).\" ;; \";\n    // check the given password\n    if ($userPasswordVerified !== true) {\n        if ($pwdlib->verifyPasswordHash($passwordClear, $userInfo['pw']) === true) {\n            $userPasswordVerified = true;\n        } else {\n            // 2.1.27.24 - manage passwords\n            if ($pwdlib->verifyPasswordHash(htmlspecialchars_decode($dataReceived['pw']), $userInfo['pw']) === true) {\n                // then the auth is correct but needs to be adapted in DB since change of encoding\n                $userInfo['pw'] = $pwdlib->createPasswordHash($passwordClear);\n                DB::update(\n                    prefixTable('users'),\n                    [\n                        'pw' => $userInfo['pw'],\n                    ],\n                    'id=%i',\n                    $userInfo['id']\n                );\n                $userPasswordVerified = true;\n            } else {\n                $userPasswordVerified = false;\n                logEvents(\n                    $SETTINGS,\n                    'failed_auth',\n                    'password_is_not_correct',\n                    '',\n                    '',\n                    stripslashes($username)\n                );\n            }\n        }\n    }\n\n    return $userPasswordVerified;\n}\n\n/**\n * Undocumented function.\n *\n * @param bool   $enabled text1\n * @param string $dbgFile text2\n * @param string $text    text3\n */\nfunction debugIdentify(bool $enabled, string $dbgFile, string $text): void\n{\n    if ($enabled === true) {\n        $fp = fopen($dbgFile, 'a');\n        if ($fp !== false) {\n            fwrite(\n                $fp,\n                $text\n            );\n        }\n    }\n}\n\n\n\nfunction identifyGetUserCredentials(\n    array $SETTINGS,\n    string $serverPHPAuthUser,\n    string $serverPHPAuthPw,\n    string $userPassword,\n    string $userLogin\n): array\n{\n    if ((int) $SETTINGS['enable_http_request_login'] === 1\n        && $serverPHPAuthUser !== null\n        && (int) $SETTINGS['maintenance_mode'] === 1\n    ) {\n        if (strpos($serverPHPAuthUser, '@') !== false) {\n            return [\n                'username' => explode('@', $serverPHPAuthUser)[0],\n                'passwordClear' => $serverPHPAuthPw\n            ];\n        }\n        \n        if (strpos($serverPHPAuthUser, '\\\\') !== false) {\n            return [\n                'username' => explode('\\\\', $serverPHPAuthUser)[1],\n                'passwordClear' => $serverPHPAuthPw\n            ];\n        }\n\n        return [\n            'username' => $serverPHPAuthPw,\n            'passwordClear' => $serverPHPAuthPw\n        ];\n    }\n    \n    return [\n        'username' => $userLogin,\n        'passwordClear' => $userPassword\n    ];\n}\n\n\nclass initialChecks {\n    // Properties\n    public $login;\n\n    // Methods\n    public function get_is_too_much_attempts($attempts) {\n        if ($attempts > 3) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n    }\n\n    public function get_user_info($login, $enable_ad_user_auto_creation) {\n        $data = DB::queryFirstRow(\n            'SELECT u.*, a.value AS api_key\n            FROM ' . prefixTable('users') . ' AS u\n            LEFT JOIN ' . prefixTable('api') . ' AS a ON (u.id = a.user_id)\n            WHERE login = %s',\n            $login\n        );\n        \n        // User doesn't exist then return error\n        // Except if user creation from LDAP is enabled\n        if (DB::count() === 0 && $enable_ad_user_auto_creation === false) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n        $data['ldap_user_to_be_created'] = $enable_ad_user_auto_creation === true && DB::count() === 0 ? true : false;\n\n        // ensure user fonction_id is set to false if not existing\n        /*if (is_null($data['fonction_id']) === true) {\n            $data['fonction_id'] = '';\n        }*/\n\n        // Prepare user roles (fonction_id + roles_from_ad_groups)\n        // Disable this as this happend repeadetly and is not necessary when working with AD groups\n        //$data['fonction_id'] = is_null($data['roles_from_ad_groups']) === true ? $data['fonction_id'] : (empty($data['roles_from_ad_groups']) === true ? $data['fonction_id'] : $data['fonction_id'] . ';' . $data['roles_from_ad_groups']);\n\n        return $data;\n    }\n\n    public function get_teampass_in_maintenance_mode($maintenance_mode, $user_admin) {\n        if ((int) $maintenance_mode === 1 && (int) $user_admin === 0) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n    }\n\n    public function get_mfa_code_is_set(\n        $yubico,\n        $ga,\n        $duo,\n        $admin,\n        $adminMfaRequired,\n        $mfa,\n        $userMfaSelection,\n        $userMfaEnabled\n    ) {\n        if (\n            (empty($userMfaSelection) === true &&\n            isOneVarOfArrayEqualToValue(\n                [\n                    (int) $yubico,\n                    (int) $ga,\n                    (int) $duo\n                ],\n                1\n            ) === true)\n            && (((int) $admin !== 1 && $userMfaEnabled === true) || ((int) $adminMfaRequired === 1 && (int) $admin === 1))\n            && $mfa === true\n        ) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n    }\n\n    public function get_install_folder_is_not_present($admin, $install_folder) {\n        if ((int) $admin === 1 && is_dir($install_folder) === true) {\n            throw new Exception(\n                \"error\" \n            );\n        }\n    }\n}\n\n\n/**\n * Permit to get info about user before auth step\n *\n * @param array $SETTINGS\n * @param integer $sessionPwdAttempts\n * @param string $username\n * @param integer $sessionAdmin\n * @param string $sessionUrl\n * @param string $user_2fa_selection\n * @return array\n */\nfunction identifyDoInitialChecks(\n    $SETTINGS,\n    int $sessionPwdAttempts,\n    string $username,\n    int $sessionAdmin,\n    string $sessionUrl,\n    string $user_2fa_selection\n): array\n{\n    $checks = new initialChecks();\n    $enable_ad_user_auto_creation = isset($SETTINGS['enable_ad_user_auto_creation']) === true && (int) $SETTINGS['enable_ad_user_auto_creation'] === 1 ? true : false;\n    \n    // Brute force management\n    try {\n        $checks->get_is_too_much_attempts($sessionPwdAttempts);\n    } catch (Exception $e) {\n        // Load superGlobals\n        include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n        $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n        $superGlobal->put('next_possible_pwd_attempts', time() + 10, 'SESSION');\n        $superGlobal->put('pwd_attempts', 0, 'SESSION');\n\n        logEvents($SETTINGS, 'failed_auth', 'user_not_exists', '', stripslashes($username), stripslashes($username));\n\n        return [\n            'error' => true,\n            'array' => [\n                'value' => 'bruteforce_wait',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => 0,\n                'error' => true,\n                'message' => langHdl('error_bad_credentials_more_than_3_times'),\n            ]\n        ];\n    }\n\n    // Check if user exists\n    try {\n        $userInfo = $checks->get_user_info($username, $enable_ad_user_auto_creation);\n    } catch (Exception $e) {\n        logEvents($SETTINGS, 'failed_auth', 'user_not_exists', '', stripslashes($username), stripslashes($username));\n        return [\n            'error' => true,\n            'array' => [\n                'error' => 'user_not_exists',\n                'message' => langHdl('error_bad_credentials'),\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n            ]\n        ];\n    }\n    \n    // Manage Maintenance mode\n    try {\n        $checks->get_teampass_in_maintenance_mode(\n            $SETTINGS['maintenance_mode'],\n            $userInfo['admin']\n        );\n    } catch (Exception $e) {\n        return [\n            'error' => true,\n            'array' => [\n                'value' => '',\n                'user_admin' => (int) $userInfo['admin'],\n                'initial_url' => '',\n                'pwd_attempts' => '',\n                'error' => 'maintenance_mode_enabled',\n                'message' => '',\n            ]\n        ];\n    }\n\n    // user should use MFA?\n    $userInfo['mfa_auth_requested_roles'] = mfa_auth_requested_roles(\n        (string) $userInfo['fonction_id'],\n        is_null($SETTINGS['mfa_for_roles']) === true ? '' : (string) $SETTINGS['mfa_for_roles']\n    );\n\n    // Check if 2FA code is requested\n    try {\n        $checks->get_mfa_code_is_set(\n            $SETTINGS['yubico_authentication'],\n            $SETTINGS['google_authentication'],\n            $SETTINGS['duo'],\n            $userInfo['admin'],\n            $SETTINGS['admin_2fa_required'],\n            $userInfo['mfa_auth_requested_roles'],\n            $user_2fa_selection,\n            $userInfo['mfa_enabled']\n        );\n    } catch (Exception $e) {\n        return [\n            'error' => true,\n            'array' => [\n                'value' => '2fa_not_set',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => '2fa_not_set',\n                'message' => langHdl('select_valid_2fa_credentials'),\n            ]\n        ];\n    }\n\n    // If admin user then check if folder install exists\n    // if yes then refuse connection\n    try {\n        $checks->get_install_folder_is_not_present(\n            $userInfo['admin'],\n            '../install'\n        );\n    } catch (Exception $e) {\n        return [\n            'error' => true,\n            'array' => [\n                'value' => '',\n                'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                'pwd_attempts' => (int) $sessionPwdAttempts,\n                'error' => true,\n                'message' => langHdl('remove_install_folder'),\n            ]\n        ];\n    }\n\n    // Return some usefull information about user\n    return [\n        'error' => false,\n        'user_mfa_mode' => $user_2fa_selection,\n        'userInfo' => $userInfo,\n    ];\n}\n\nfunction identifyDoLDAPChecks(\n    $SETTINGS,\n    $userInfo,\n    string $username,\n    string $passwordClear,\n    int $sessionAdmin,\n    string $sessionUrl,\n    int $sessionPwdAttempts\n): array\n{\n    // Prepare LDAP connection if set up\n    if ((int) $SETTINGS['ldap_mode'] === 1\n        && $username !== 'admin'\n        && ((string) $userInfo['auth_type'] === 'ldap' || $userInfo['ldap_user_to_be_created'] === true)\n    ) {\n        $retLDAP = authenticateThroughAD(\n            $username,\n            $userInfo,\n            $passwordClear,\n            $SETTINGS\n        );\n        if ($retLDAP['error'] === true) {\n            return [\n                'error' => true,\n                'array' => [\n                    'value' => '',\n                    'user_admin' => isset($sessionAdmin) ? (int) $sessionAdmin : 0,\n                    'initial_url' => isset($sessionUrl) === true ? $sessionUrl : '',\n                    'pwd_attempts' => (int) $sessionPwdAttempts,\n                    'error' => true,\n                    'message' => \"LDAP error: \".$retLDAP['message'],\n                ]\n            ];\n        }\n        return [\n            'error' => false,\n            'retLDAP' => $retLDAP,\n            'ldapConnection' => true,\n            'userPasswordVerified' => true,\n        ];\n    }\n\n    // return if no addmin\n    return [\n        'error' => false,\n        'retLDAP' => [],\n        'ldapConnection' => false,\n        'userPasswordVerified' => false,\n    ];\n}\n\n\nfunction identifyDoMFAChecks(\n    $SETTINGS,\n    $userInfo,\n    $dataReceived,\n    $userInitialData,\n    string $username\n): array\n{    \n    switch ($userInitialData['user_mfa_mode']) {\n        case 'google':\n            $ret = googleMFACheck(\n                $username,\n                $userInfo,\n                $dataReceived,\n                $SETTINGS\n            );\n            if ($ret['error'] !== false) {\n                logEvents($SETTINGS, 'failed_auth', 'wrong_mfa_code', '', stripslashes($username), stripslashes($username));\n                return [\n                    'error' => true,\n                    'mfaData' => $ret,\n                    'mfaQRCodeInfos' => false,\n                ];\n            }\n\n            return [\n                'error' => false,\n                'mfaData' => $ret['firstTime'],\n                'mfaQRCodeInfos' => $userInitialData['user_mfa_mode'] === 'google'\n                && count($ret['firstTime']) > 0 ? true : false,\n            ];\n\n        case 'yubico':\n            $ret = yubicoMFACheck(\n                $dataReceived,\n                $userInfo,\n                $SETTINGS\n            );\n            if ($ret['error'] !== false) {\n                return [\n                    'error' => true,\n                    'mfaData' => $ret,\n                    'mfaQRCodeInfos' => false,\n                ];\n            }\n            break;\n        \n        case 'duo':\n            // Prepare Duo connection if set up\n            $checks = duoMFACheck(\n                $username,\n                $dataReceived,\n                $SETTINGS\n            );\n\n            if ($checks['error'] === true) {\n                return [\n                    'error' => true,\n                    'mfaData' => $checks,\n                    'mfaQRCodeInfos' => false,\n                ];\n            }\n\n            // If we are here\n            // Do DUO authentication\n            $ret = duoMFAPerform(\n                $username,\n                $dataReceived,\n                $checks['pwd_attempts'],\n                $checks['saved_state'],\n                $checks['duo_status'],\n                $SETTINGS\n            );\n\n            if ($ret['error'] !== false) {\n                logEvents($SETTINGS, 'failed_auth', 'bad_duo_mfa', '', stripslashes($username), stripslashes($username));\n                // Load superGlobals\n                include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n                # Retrieve the previously stored state and username from the session\n                $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n                $superGlobal->forget('duo_state','SESSION');\n                $superGlobal->forget('duo_data','SESSION');\n                $superGlobal->forget('duo_status','SESSION');\n                unset($superGlobal);\n                return [\n                    'error' => true,\n                    'mfaData' => $ret,\n                    'mfaQRCodeInfos' => false,\n                ];\n            } else if ($ret['duo_url_ready'] === true){\n                return [\n                    'error' => false,\n                    'mfaData' => $ret,\n                    'duo_url_ready' => true,\n                    'mfaQRCodeInfos' => false,\n                ];\n            } else if ($ret['error'] === false) {\n                return [\n                    'error' => false,\n                    'mfaData' => $ret,\n                    'mfaQRCodeInfos' => false,\n                ];\n            }\n            break;\n        \n        default:\n            logEvents($SETTINGS, 'failed_auth', 'wrong_mfa_code', '', stripslashes($username), stripslashes($username));\n            return [\n                'error' => true,\n                'mfaData' => ['message' => langHdl('wrong_mfa_code')],\n                'mfaQRCodeInfos' => false,\n            ];\n    }\n\n    // If something went wrong, let's catch and return an error\n    logEvents($SETTINGS, 'failed_auth', 'wrong_mfa_code', '', stripslashes($username), stripslashes($username));\n    return [\n        'error' => true,\n        'mfaData' => ['message' => langHdl('wrong_mfa_code')],\n        'mfaQRCodeInfos' => false,\n    ];\n}\n"], "filenames": ["includes/core/load.js.php", "pages/items.js.php", "pages/users.js.php", "sources/identify.php"], "buggy_code_start_loc": [787, 1681, 887, 389], "buggy_code_end_loc": [788, 1689, 888, 390], "fixing_code_start_loc": [787, 1682, 887, 389], "fixing_code_end_loc": [788, 1706, 888, 394], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository nilsteampassnet/teampass prior to 3.0.9.", "other": {"cve": {"id": "CVE-2023-3084", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-03T11:15:20.737", "lastModified": "2023-06-09T14:01:32.793", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository nilsteampassnet/teampass prior to 3.0.9."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:teampass:teampass:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.9", "matchCriteriaId": "1FBD6586-DC7F-4FD6-BB8D-9874CCFACB2E"}]}]}], "references": [{"url": "https://github.com/nilsteampassnet/teampass/commit/61b9b7d4e33bbaad2cd61a7ee988f9c22298bf1a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/4b86b56b-c51b-4be8-8ee4-6e385d1e9e8a", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nilsteampassnet/teampass/commit/61b9b7d4e33bbaad2cd61a7ee988f9c22298bf1a"}}