{"buggy_code": ["<?php\n/**\n ***********************************************************************************************\n * Send ecard to users and show status message\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire_once(__DIR__ . '/ecard_function.php');\n\n// Initialize and check the parameters\n$postTemplateName = admFuncVariableIsValid($_POST, 'ecard_template', 'file', array('requireValue' => true));\n$postPhotoUuid    = admFuncVariableIsValid($_POST, 'photo_uuid', 'string', array('requireValue' => true));\n$postPhotoNr      = admFuncVariableIsValid($_POST, 'photo_nr', 'int', array('requireValue' => true));\n$postMessage      = admFuncVariableIsValid($_POST, 'ecard_message', 'html');\n\n$funcClass       = new FunctionClass($gL10n);\n$photoAlbum      = new TablePhotos($gDb);\n$photoAlbum->readDataByUuid($postPhotoUuid);\n$imageUrl        = SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $postPhotoUuid, 'photo_nr' => $postPhotoNr, 'max_width' => $gSettingsManager->getInt('ecard_card_picture_width'), 'max_height' => $gSettingsManager->getInt('ecard_card_picture_height')));\n$imageServerPath = ADMIDIO_PATH . FOLDER_DATA . '/photos/'.$photoAlbum->getValue('pho_begin', 'Y-m-d').'_'.$photoAlbum->getValue('pho_id').'/'.$postPhotoNr.'.jpg';\n\n$_SESSION['ecard_request'] = $_POST;\n\ntry {\n    // check the CSRF token of the form against the session token\n    SecurityUtils::validateCsrfToken($_POST['admidio-csrf-token']);\n} catch (AdmException $exception) {\n    $exception->showHtml();\n    // => EXIT\n}\n\n// check if the module is enabled and disallow access if it's disabled\nif (!$gSettingsManager->getBool('enable_ecard_module')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n// pruefen ob User eingeloggt ist\nif (!$gValidLogin) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n$senderName  = $gCurrentUser->getValue('FIRST_NAME').' '.$gCurrentUser->getValue('LAST_NAME');\n$senderEmail = $gCurrentUser->getValue('EMAIL');\n\nif (!isset($_POST['ecard_recipients']) || !is_array($_POST['ecard_recipients'])) {\n    $_SESSION['ecard_request']['ecard_recipients'] = '';\n    $gMessage->show($gL10n->get('SYS_FIELD_EMPTY', array($gL10n->get('SYS_TO'))));\n    // => EXIT\n}\n\nif ($postMessage === '') {\n    $gMessage->show($gL10n->get('SYS_FIELD_EMPTY', array($gL10n->get('SYS_MESSAGE'))));\n    // => EXIT\n}\n\n// Template wird geholt\n$ecardDataToParse = $funcClass->getEcardTemplate($postTemplateName);\n\n// if template was not found then show error\nif ($ecardDataToParse === null) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// check if user has right to send mail to selected roles and users\n$arrayRoles = array();\n$arrayUsers = array();\n$receiverString = implode(' | ', $_POST['ecard_recipients']);\n$sqlEmailField  = '';\n\nforeach ($_POST['ecard_recipients'] as $value) {\n    if (str_contains($value, 'groupID')) {\n        $roleId = (int) substr($value, 9);\n        if ($gCurrentUser->hasRightSendMailToRole($roleId)) {\n            $arrayRoles[] = $roleId;\n        }\n    } else {\n        $arrayUsers[] = $value;\n    }\n}\n\nif (count($arrayRoles) === 0 && count($arrayUsers) === 0) {\n    $ecardSendResult = false;\n} else {\n    $ecardSendResult = true;\n}\n\n// object to handle the current message in the database\n$message = new TableMessage($gDb);\n$message->setValue('msg_type', TableMessage::MESSAGE_TYPE_EMAIL);\n$message->setValue('msg_subject', $gL10n->get('SYS_GREETING_CARD').': '.$gL10n->get('SYS_NEW_MESSAGE_RECEIVED'));\n$message->setValue('msg_usr_id_sender', $gCurrentUserId);\n\n// set condition if email should only send to the email address of the user field\n// with the internal name 'EMAIL'\nif (!$gSettingsManager->getBool('mail_send_to_all_addresses')) {\n    $sqlEmailField = ' AND field.usf_name_intern = \\'EMAIL\\' ';\n}\n\nif (count($arrayRoles) > 0) {\n    // Wenn schon dann alle Namen und die dazugeh\u00f6rigen Emails auslesen und in die versand Liste hinzuf\u00fcgen\n    $sql = 'SELECT DISTINCT first_name.usd_value AS first_name, last_name.usd_value AS last_name, email.usd_value AS email, rol_name\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n        INNER JOIN '.TBL_USERS.'\n                ON usr_id = mem_usr_id\n        INNER JOIN ' . TBL_USER_DATA . ' AS email\n                ON email.usd_usr_id = usr_id\n               AND LENGTH(email.usd_value) > 0\n        INNER JOIN ' . TBL_USER_FIELDS . ' AS field\n                ON field.usf_id = email.usd_usf_id\n               AND field.usf_type = \\'EMAIL\\'\n                   ' . $sqlEmailField . '\n        INNER JOIN '.TBL_USER_DATA.' AS last_name\n                ON last_name.usd_usr_id = usr_id\n               AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n        INNER JOIN '.TBL_USER_DATA.' AS first_name\n                ON first_name.usd_usr_id = usr_id\n               AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n             WHERE rol_id           IN ('.implode(',', $arrayRoles).')\n               AND cat_org_id       = ? -- $gCurrentOrgId\n               AND mem_begin       <= ? -- DATE_NOW\n               AND mem_end          > ? -- DATE_NOW\n               AND usr_valid        = true\n          ORDER BY last_name, first_name';\n    $queryParams = array(\n        $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n        $gProfileFields->getProperty('FIRST_NAME', 'usf_id'),\n        $gCurrentOrgId,\n        DATE_NOW,\n        DATE_NOW\n    );\n    $usersStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    while ($row = $usersStatement->fetch()) {\n        if ($ecardSendResult) {\n            // create and send ecard\n            $ecardHtmlData   = $funcClass->parseEcardTemplate($imageUrl, $postMessage, $ecardDataToParse, $row['first_name'].' '.$row['last_name'], $row['email']);\n            $ecardSendResult = $funcClass->sendEcard($senderName, $senderEmail, $ecardHtmlData, $row['first_name'], $row['last_name'], $row['email'], $imageServerPath);\n        }\n    }\n\n    // add roles to message object\n    foreach ($arrayRoles as $roleId) {\n        $message->addRole($roleId, 0);\n    }\n}\n\nif (count($arrayUsers) > 0) {\n    $sql = 'SELECT DISTINCT first_name.usd_value AS first_name, last_name.usd_value AS last_name, email.usd_value AS email\n              FROM '.TBL_USERS.'\n        INNER JOIN ' . TBL_USER_DATA . ' AS email\n                ON email.usd_usr_id = usr_id\n               AND LENGTH(email.usd_value) > 0\n        INNER JOIN ' . TBL_USER_FIELDS . ' AS field\n                ON field.usf_id = email.usd_usf_id\n               AND field.usf_type = \\'EMAIL\\'\n                   ' . $sqlEmailField . '\n        INNER JOIN '.TBL_USER_DATA.' AS last_name\n                ON last_name.usd_usr_id = usr_id\n               AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n        INNER JOIN '.TBL_USER_DATA.' AS first_name\n                ON first_name.usd_usr_id = usr_id\n               AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n             WHERE usr_id           IN ('.implode(',', $arrayUsers).')\n               AND usr_valid        = true\n          ORDER BY last_name, first_name';\n    $queryParams = array(\n        $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n        $gProfileFields->getProperty('FIRST_NAME', 'usf_id')\n    );\n    $usersStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    while ($row = $usersStatement->fetch()) {\n        if ($ecardSendResult) {\n            // create and send ecard\n            $ecardHtmlData   = $funcClass->parseEcardTemplate($imageUrl, $postMessage, $ecardDataToParse, $row['first_name'].' '.$row['last_name'], $row['email']);\n            $ecardSendResult = $funcClass->sendEcard($senderName, $senderEmail, $ecardHtmlData, $row['first_name'], $row['last_name'], $row['email'], $imageServerPath);\n        }\n    }\n\n    // add roles to message object\n    foreach ($arrayUsers as $userId) {\n        $message->addUser($userId);\n    }\n}\n\n// show result\nif ($ecardSendResult) {\n    $message->addContent($ecardHtmlData);\n    $message->save();\n\n    $gMessage->setForwardUrl($gNavigation->getPreviousUrl());\n    $gMessage->show($gL10n->get('SYS_ECARD_SUCCESSFULLY_SEND'));\n// => EXIT\n} else {\n    $gMessage->show($gL10n->get('SYS_ECARD_NOT_SUCCESSFULLY_SEND'));\n    // => EXIT\n}\n", "<?php\n/**\n ***********************************************************************************************\n * Form for sending ecards\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * photo_uuid: UUID of photo album whose image you want to send\n * photo_nr:   Number of the photo of the chosen album\n * user_uuid:  (optional) UUID of the user who should receive the ecard\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire_once(__DIR__ . '/ecard_function.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getPhotoUuid = admFuncVariableIsValid($_GET, 'photo_uuid', 'string');\n$getUserUuid  = admFuncVariableIsValid($_GET, 'user_uuid', 'string');\n$getPhotoNr   = admFuncVariableIsValid($_GET, 'photo_nr', 'int', array('requireValue' => true));\n$showPage     = admFuncVariableIsValid($_GET, 'show_page', 'int', array('defaultValue' => 1));\n\n// Initialisierung lokaler Variablen\n$funcClass = new FunctionClass($gL10n);\n$templates = $funcClass->getFileNames(ADMIDIO_PATH . FOLDER_DATA . '/ecard_templates');\n$headline  = $gL10n->get('SYS_SEND_GREETING_CARD');\n\n// check if the module is enabled and disallow access if it's disabled\nif (!$gSettingsManager->getBool('enable_ecard_module')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// URL auf Navigationstack ablegen\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// Fotoveranstaltungs-Objekt erzeugen oder aus Session lesen\nif (isset($_SESSION['photo_album']) && (int) $_SESSION['photo_album']->getValue('pho_uuid') === $getPhotoUuid) {\n    $photoAlbum =& $_SESSION['photo_album'];\n} else {\n    // einlesen des Albums falls noch nicht in Session gespeichert\n    $photoAlbum = new TablePhotos($gDb);\n    if ($getPhotoUuid !== '') {\n        $photoAlbum->readDataByUuid($getPhotoUuid);\n    }\n\n    $_SESSION['photo_album'] = $photoAlbum;\n}\n\n// pruefen, ob Album zur aktuellen Organisation gehoert\nif ($getPhotoUuid !== '' && (int) $photoAlbum->getValue('pho_org_id') !== $gCurrentOrgId) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\nif ($gValidLogin && $gCurrentUser->getValue('EMAIL') === '') {\n    // der eingeloggte Benutzer hat in seinem Profil keine gueltige Mailadresse hinterlegt,\n    // die als Absender genutzt werden kann...\n    $gMessage->show($gL10n->get('SYS_CURRENT_USER_NO_EMAIL', array('<a href=\"'.ADMIDIO_URL.FOLDER_MODULES.'/profile/profile.php\">', '</a>')));\n    // => EXIT\n}\n\nif ($getUserUuid !== '') {\n    // usr_id wurde uebergeben, dann Kontaktdaten des Users aus der DB fischen\n    $user = new User($gDb, $gProfileFields);\n    $user->readDataByUuid($getUserUuid);\n\n    // darf auf die User-Id zugegriffen werden\n    if ((!$gCurrentUser->editUsers() && !isMember((int) $user->getValue('usr_id'))) || strlen($user->getValue('usr_id')) === 0) {\n        $gMessage->show($gL10n->get('SYS_USER_ID_NOT_FOUND'));\n        // => EXIT\n    }\n\n    // besitzt der User eine gueltige E-Mail-Adresse\n    if (!StringUtils::strValidCharacters($user->getValue('EMAIL'), 'email')) {\n        $gMessage->show($gL10n->get('SYS_USER_NO_EMAIL', array($user->getValue('FIRST_NAME').' '.$user->getValue('LAST_NAME'))));\n        // => EXIT\n    }\n}\n\nif (isset($_SESSION['ecard_request'])) {\n    // if user is returned to this form after he submit it,\n    // then try to restore all values that he has entered before\n    $template   = $_SESSION['ecard_request']['ecard_template'];\n    $recipients = $_SESSION['ecard_request']['ecard_recipients'];\n    $message    = $_SESSION['ecard_request']['ecard_message'];\n} else {\n    $template   = $gSettingsManager->getString('ecard_template');\n    $recipients = null;\n    $message    = '';\n}\n\n// create html page object\n$page = new HtmlPage('admidio-ecards', $headline);\n\n$page->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/lightbox/ekko-lightbox.min.js');\n\n$page->addJavascript(\n    '\n    $(document).delegate(\"*[data-toggle=\\\"lightbox\\\"]\", \"click\", function(event) {\n        event.preventDefault();\n        $(this).ekkoLightbox();\n    });\n\n    $(\"#btn_ecard_preview\").click(function(event) {\n        event.preventDefault();\n        $(\"#ecard_form input[id=\\'submit_action\\']\").val(\"preview\");\n        $(\"#ecard_form textarea[name=\\'ecard_message\\']\").text(CKEDITOR.instances.ecard_message.getData());\n\n        $.post({ // create an AJAX call...\n            data: $(\"#ecard_form\").serialize(), // get the form data\n            url: \"ecard_preview.php\", // the file to call\n            success: function(response) { // on success..\n                $(\".modal-dialog\").attr(\"class\", \"modal-dialog modal-lg\");\n                $(\".modal-content\").html(response);\n                $(\"#admidio-modal\").modal();\n            }\n        });\n\n        return false;\n    });',\n    true\n);\n\n// show form\n$form = new HtmlForm('ecard_form', 'ecard_send.php', $page);\n$form->addInput('submit_action', '', '', array('property' => HtmlForm::FIELD_HIDDEN));\n$form->addInput('photo_uuid', '', $getPhotoUuid, array('property' => HtmlForm::FIELD_HIDDEN));\n$form->addInput('photo_nr', '', $getPhotoNr, array('property' => HtmlForm::FIELD_HIDDEN));\n\n$form->openGroupBox('gb_layout', $gL10n->get('SYS_LAYOUT'));\n$form->addCustomContent($gL10n->get('SYS_PHOTO'), '\n    <a data-toggle=\"lightbox\" data-type=\"image\" data-title=\"'.$gL10n->get('SYS_PREVIEW').'\"\n        href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $getPhotoNr, 'max_width' => $gSettingsManager->getInt('photo_show_width'), 'max_height' => $gSettingsManager->getInt('photo_show_height'))).'\"><img\n        src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $getPhotoNr, 'max_width' => $gSettingsManager->getInt('ecard_thumbs_scale'), 'max_height' => $gSettingsManager->getInt('ecard_thumbs_scale'))).'\"\n        class=\"imageFrame\" alt=\"'.$gL10n->get('SYS_VIEW_PICTURE_FULL_SIZED').'\"  title=\"'.$gL10n->get('SYS_VIEW_PICTURE_FULL_SIZED').'\" />\n    </a>');\n$templates = array_keys(FileSystemUtils::getDirectoryContent(ADMIDIO_PATH . FOLDER_DATA . '/ecard_templates', false, false, array(FileSystemUtils::CONTENT_TYPE_FILE)));\nif (!is_array($templates)) {\n    $gMessage->show($gL10n->get('SYS_TEMPLATE_FOLDER_OPEN'));\n    // => EXIT\n}\n// create new array without file extension in visual value\n$newTemplateArray = array();\nforeach ($templates as $templateName) {\n    $newTemplateArray[$templateName] = ucfirst(preg_replace('/[_-]/', ' ', str_replace('.tpl', '', $templateName)));\n}\nunset($templateName);\n$form->addSelectBox(\n    'ecard_template',\n    $gL10n->get('SYS_TEMPLATE'),\n    $newTemplateArray,\n    array('defaultValue' => $template, 'property' => HtmlForm::FIELD_REQUIRED, 'showContextDependentFirstEntry' => false)\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_contact_details', $gL10n->get('SYS_CONTACT_DETAILS'));\n\n// create list with all possible recipients\n$list = array();\n\n// list all roles where login users could send mails to\n$arrayMailRoles = $gCurrentUser->getRolesWriteMails();\n\n$sql = 'SELECT rol_id, rol_name\n          FROM '.TBL_ROLES.'\n    INNER JOIN '.TBL_CATEGORIES.'\n            ON cat_id = rol_cat_id\n         WHERE rol_id IN ('.Database::getQmForValues($arrayMailRoles).')\n           AND cat_name_intern <> \\'EVENTS\\'\n      ORDER BY rol_name';\n$statement = $gDb->queryPrepared($sql, $arrayMailRoles);\n\nwhile ($row = $statement->fetch()) {\n    $list[] = array('groupID: '.$row['rol_id'], $row['rol_name'], $gL10n->get('SYS_ROLES'));\n}\n\n// select all users\n$arrayRoles = array_merge($arrayMailRoles, $gCurrentUser->getRolesViewMemberships());\n$arrayUniqueRoles = array_unique($arrayRoles);\n\n$sql = 'SELECT DISTINCT usr_id, first_name.usd_value AS first_name, last_name.usd_value AS last_name\n          FROM '.TBL_MEMBERS.'\n    INNER JOIN '.TBL_USERS.'\n            ON usr_id = mem_usr_id\n     LEFT JOIN '.TBL_USER_DATA.' AS last_name\n            ON last_name.usd_usr_id = usr_id\n           AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n     LEFT JOIN '.TBL_USER_DATA.' AS first_name\n            ON first_name.usd_usr_id = usr_id\n           AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n         WHERE usr_valid  = true\n           AND mem_begin <= ? -- DATE_NOW\n           AND mem_end    > ? -- DATE_NOW\n           AND mem_rol_id IN ('.implode(',', $arrayUniqueRoles).')\n      GROUP BY usr_id, first_name.usd_value, last_name.usd_value\n      ORDER BY last_name, first_name';\n$queryParams = array(\n    $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n    $gProfileFields->getProperty('FIRST_NAME', 'usf_id'),\n    DATE_NOW,\n    DATE_NOW\n);\n$statement = $gDb->queryPrepared($sql, $queryParams);\n\nwhile ($row = $statement->fetch()) {\n    $list[] = array($row['usr_id'], $row['last_name']. ', '.$row['first_name'], $gL10n->get('SYS_MEMBERS'));\n}\n\n$form->addSelectBox(\n    'ecard_recipients',\n    $gL10n->get('SYS_TO'),\n    $list,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $recipients, 'multiselect' => true)\n);\n$form->addLine();\n$form->addInput(\n    'name_from',\n    $gL10n->get('SYS_YOUR_NAME'),\n    $gCurrentUser->getValue('FIRST_NAME'). ' '. $gCurrentUser->getValue('LAST_NAME'),\n    array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n);\n$form->addInput(\n    'mail_from',\n    $gL10n->get('SYS_YOUR_EMAIL'),\n    $gCurrentUser->getValue('EMAIL'),\n    array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_message', $gL10n->get('SYS_MESSAGE'), 'admidio-panel-editor');\n$form->addEditor(\n    'ecard_message',\n    '',\n    $message,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'toolbar' => 'AdmidioGuestbook')\n);\n$form->closeGroupBox();\n$form->openButtonGroup();\n$form->addButton('btn_ecard_preview', $gL10n->get('SYS_PREVIEW'), array('icon' => 'fa-eye', 'class' => 'admidio-margin-bottom'));\n$form->addSubmitButton('btn_ecard_submit', $gL10n->get('SYS_SEND'), array('icon' => 'fa-envelope'));\n$form->closeButtonGroup();\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Show a list of all photo albums\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * photo_uuid : UUID of album which photos should be shown\n * headline   : Headline of the module that will be displayed\n *              (Default) PHO_PHOTO_ALBUMS\n * start_thumbnail : Number of the thumbnail which is the first that should be shown\n * start      : Position of query recordset where the visual output should start\n *\n *****************************************************************************/\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_photo_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n// => EXIT\n} elseif ((int) $gSettingsManager->get('enable_photo_module') === 2) {\n    // only logged-in users can access the module\n    require(__DIR__ . '/../../system/login_valid.php');\n}\n\n// Initialize and check the parameters\n$getPhotoUuid      = admFuncVariableIsValid($_GET, 'photo_uuid', 'string');\n$getHeadline       = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('PHO_PHOTO_ALBUMS')));\n$getStart          = admFuncVariableIsValid($_GET, 'start', 'int');\n$getStartThumbnail = admFuncVariableIsValid($_GET, 'start_thumbnail', 'int', array('defaultValue' => 1));\n$getPhotoNr        = admFuncVariableIsValid($_GET, 'photo_nr', 'int');\n\nunset($_SESSION['photo_album_request'], $_SESSION['ecard_request']);\n\n// Fotoalbums-Objekt erzeugen oder aus Session lesen\nif (isset($_SESSION['photo_album']) && $_SESSION['photo_album']->getValue('pho_uuid') === $getPhotoUuid) {\n    $photoAlbum =& $_SESSION['photo_album'];\n} else {\n    // einlesen des Albums falls noch nicht in Session gespeichert\n    $photoAlbum = new TablePhotos($gDb);\n    if ($getPhotoUuid !== '') {\n        $photoAlbum->readDataByUuid($getPhotoUuid);\n    }\n\n    $_SESSION['photo_album'] = $photoAlbum;\n}\n\n// set headline of module\nif ($getPhotoUuid !== '') {\n    // check if the current user could view this photo album\n    if (!$photoAlbum->isVisible()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n\n    $headline = $photoAlbum->getValue('pho_name');\n\n    // URL auf Navigationstack ablegen\n    $gNavigation->addUrl(CURRENT_URL, $headline);\n} else {\n    $headline = $getHeadline;\n\n    // Navigation of the module starts here\n    $gNavigation->addStartUrl(CURRENT_URL, $headline, 'fa-image');\n}\n\n// create html page object\n$page = new HtmlPage('admidio-photos', $headline);\n\n// add rss feed to photos\nif ($gSettingsManager->getBool('enable_rss')) {\n    $page->addRssFile(\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/rss_photos.php', array('headline' => $getHeadline)),\n        $gL10n->get('SYS_RSS_FEED_FOR_VAR', array($gCurrentOrganization->getValue('org_longname'). ' - '.$getHeadline))\n    );\n}\n\nif ($photoAlbum->isEditable()) {\n    $page->addJavascript(\n        '\n        /**\n         * rotate image\n         * @param {int}    img\n         * @param {string} direction\n         */\n        function imageRotate(img, direction) {\n            $.get(\"'.ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_function.php\", {photo_uuid: \"'.$getPhotoUuid.'\", photo_nr: img, job: \"rotate\", direction: direction}, function(data) {\n                // Appending the random number is necessary to trick the browser cache\n                $(\"#img_\" + img).attr(\"src\", \"'.SecurityUtils::encodeUrl(\n            ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php',\n            array('photo_uuid' => $getPhotoUuid, 'thumb' => 1)\n        ).'&photo_nr=\" + img + \"&rand=\" + Math.random());\n                return true;\n            });\n        }'\n    );\n}\n\n// integrate bootstrap ekko lightbox addon\nif ((int) $gSettingsManager->get('photo_show_mode') === 1) {\n    $page->addCssFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/lightbox/ekko-lightbox.css');\n    $page->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/lightbox/ekko-lightbox.js');\n\n    $page->addJavascript(\n        '\n        $(document).delegate(\"*[data-toggle=\\\"lightbox\\\"]\", \"click\", function(event) {\n            event.preventDefault();\n            $(this).ekkoLightbox();\n        });',\n        true\n    );\n}\n\n// if a photo number was committed then simulate a left mouse click\nif ($getPhotoNr > 0) {\n    $page->addJavascript('$(\"#img_'.$getPhotoNr.'\").trigger(\"click\");', true);\n}\n\nif ($gCurrentUser->editPhotoRight()) {\n    // show link to create new album\n    $page->addPageFunctionsMenuItem(\n        'menu_item_photos_new_album',\n        $gL10n->get('PHO_CREATE_ALBUM'),\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_new.php', array('mode' => 'new', 'photo_uuid' => $getPhotoUuid)),\n        'fa-plus-circle'\n    );\n\n    if ($getPhotoUuid !== '') {\n        // show link to edit album\n        $page->addPageFunctionsMenuItem(\n            'menu_item_photos_edit_album',\n            $gL10n->get('PHO_EDIT_ALBUM'),\n            SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_new.php', array('mode' => 'change', 'photo_uuid' => $getPhotoUuid)),\n            'fa-edit'\n        );\n\n        // show link to upload photos\n        $page->addPageFunctionsMenuItem(\n            'menu_item_photos_upload_photo',\n            $gL10n->get('PHO_UPLOAD_PHOTOS'),\n            SecurityUtils::encodeUrl(ADMIDIO_URL.'/adm_program/system/file_upload.php', array('module' => 'photos', 'uuid' => $getPhotoUuid)),\n            'fa-upload'\n        );\n    }\n}\n\n// show link to download photos if enabled\nif ($gSettingsManager->getBool('photo_download_enabled') && $photoAlbum->getValue('pho_quantity') > 0) {\n    // show link to download photos\n    $page->addPageFunctionsMenuItem(\n        'menu_item_photos_download',\n        $gL10n->get('SYS_DOWNLOAD_ALBUM'),\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_download.php', array('photo_uuid' => $getPhotoUuid)),\n        'fa-download'\n    );\n}\n\nif ($getPhotoUuid !== '') {\n    // show additional album information\n    $datePeriod = $photoAlbum->getValue('pho_begin', $gSettingsManager->getString('system_date'));\n\n    if ($photoAlbum->getValue('pho_end') !== $photoAlbum->getValue('pho_begin') && strlen($photoAlbum->getValue('pho_end')) > 0) {\n        $datePeriod .= ' '.$gL10n->get('SYS_DATE_TO').' '.$photoAlbum->getValue('pho_end', $gSettingsManager->getString('system_date'));\n    }\n\n    // Notice for users with foto edit right that this album is locked\n    if ($photoAlbum->getValue('pho_locked') == 1) {\n        $page->addHtml('<p class=\"card-text\"><div class=\"alert alert-warning alert-small\" role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>'.$gL10n->get('PHO_ALBUM_NOT_APPROVED').'</div></p>');\n    }\n\n    $page->addHtml('\n    <p class=\"lead\">\n        <p class=\"font-weight-bold\">' . $datePeriod . '</p>\n        <p>' . $photoAlbum->countImages() . ' ' . $gL10n->get('PHO_PHOTOGRAPHER') . ' ' . $photoAlbum->getValue('pho_photographers') . '</p>');\n\n    if (strlen($photoAlbum->getValue('pho_description')) > 0) {\n        $page->addHtml('<p>' . $photoAlbum->getValue('pho_description', 'html') . '</p>');\n    }\n\n    $page->addHtml('</p>');\n}\n\n// THUMBNAILS\n// Only if current album contains images\nif ($photoAlbum->getValue('pho_quantity') > 0) {\n    $photoThumbnailTable = '';\n    $firstPhotoNr        = 1;\n    $lastPhotoNr         = $gSettingsManager->getInt('photo_thumbs_page');\n\n    // Open the correct album page when image number has been set\n    if ($getPhotoNr > 0) {\n        $firstPhotoNr = (round(($getPhotoNr - 1) / $gSettingsManager->getInt('photo_thumbs_page')) * $gSettingsManager->getInt('photo_thumbs_page')) + 1;\n        $lastPhotoNr  = $firstPhotoNr + $gSettingsManager->getInt('photo_thumbs_page') - 1;\n    }\n\n    // create thumbnail container\n    $page->addHtml('<div class=\"row\">');\n\n    for ($actThumbnail = $firstPhotoNr; $actThumbnail <= $lastPhotoNr && $actThumbnail <= $photoAlbum->getValue('pho_quantity'); ++$actThumbnail) {\n        if ($actThumbnail <= $photoAlbum->getValue('pho_quantity')) {\n            $photoThumbnailTable .= '<div class=\"col-sm-6 col-lg-4 col-xl-3 admidio-album-thumbnail\" id=\"div_image_'.$actThumbnail.'\">';\n\n            // Popup window\n            if ((int) $gSettingsManager->get('photo_show_mode') === 0) {\n                $photoThumbnailTable .= '\n                        <img class=\"rounded\" id=\"img_'.$actThumbnail.'\" style=\"cursor: pointer\"\n                            onclick=\"window.open(\\''.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_presenter.php', array('photo_nr' => $actThumbnail, 'photo_uuid' => $getPhotoUuid)).'\\',\\'msg\\', \\'height='.($gSettingsManager->getInt('photo_show_height') + 300).', width='.($gSettingsManager->getInt('photo_show_width')+70).',left=162,top=5\\')\"\n                            src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail, 'thumb' => 1)).'\" alt=\"'.$actThumbnail.'\" />';\n            }\n\n            // Bootstrap modal with lightbox\n            elseif ((int) $gSettingsManager->get('photo_show_mode') === 1) {\n                $photoThumbnailTable .= '\n                        <a data-gallery=\"admidio-gallery\" data-type=\"image\" data-parent=\".admidio-album-thumbnail\" data-toggle=\"lightbox\" data-title=\"'.$headline.'\"\n                            href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail, 'max_width' => $gSettingsManager->getInt('photo_show_width'), 'max_height' => $gSettingsManager->getInt('photo_show_height'))).'\"><img\n                            class=\"rounded\" id=\"img_'.$actThumbnail.'\" src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail, 'thumb' => 1)).'\" alt=\"'.$actThumbnail.'\" /></a>';\n            }\n\n            // Same window\n            elseif ((int) $gSettingsManager->get('photo_show_mode') === 2) {\n                $photoThumbnailTable .= '\n                        <a href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_presenter.php', array('photo_nr' => $actThumbnail, 'photo_uuid' => $getPhotoUuid)).'\"><img\n                            class=\"rounded\" id=\"img_'.$actThumbnail.'\" src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail, 'thumb' => 1)).'\" alt=\"'.$actThumbnail.'\" />\n                        </a>';\n            }\n\n            if ($gCurrentUser->editPhotoRight() || ($gValidLogin && $gSettingsManager->getBool('enable_ecard_module')) || $gSettingsManager->getBool('photo_download_enabled')) {\n                $photoThumbnailTable .= '<div id=\"image_preferences_'.$actThumbnail.'\" class=\"text-center\" style=\"width: ' . $gSettingsManager->getInt('photo_thumbs_scale') . 'px\">';\n            }\n\n\n            if ($gValidLogin && $gSettingsManager->getBool('enable_ecard_module')) {\n                $photoThumbnailTable .= '\n                        <a class=\"admidio-icon-link\" href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/ecards/ecards.php', array('photo_nr' => $actThumbnail, 'photo_uuid' => $getPhotoUuid, 'show_page' => $getPhotoNr)).'\">\n                            <i class=\"fas fa-envelope\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('PHO_PHOTO_SEND_ECARD').'\"></i></a>';\n            }\n\n            if ($gSettingsManager->getBool('photo_download_enabled')) {\n                // show link to download photo\n                $photoThumbnailTable .= '\n                        <a class=\"admidio-icon-link\" href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_download.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail)).'\">\n                            <i class=\"fas fa-download\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('SYS_DOWNLOAD_PHOTO').'\"></i></a>';\n            }\n\n            // buttons for moderation\n            if ($gCurrentUser->editPhotoRight()) {\n                $photoThumbnailTable .= '\n                        <a class=\"admidio-icon-link\" href=\"javascript:void(0)\" onclick=\"return imageRotate('.$actThumbnail.', \\'right\\')\">\n                            <i class=\"fas fa-redo-alt\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('PHO_PHOTO_ROTATE_RIGHT').'\"></i></a>\n                        <a class=\"admidio-icon-link\"  href=\"javascript:void(0)\" onclick=\"return imageRotate('.$actThumbnail.', \\'left\\')\">\n                            <i class=\"fas fa-undo-alt\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('PHO_PHOTO_ROTATE_LEFT').'\"></i></a>\n                        <a class=\"admidio-icon-link openPopup\" href=\"javascript:void(0);\"\n                            data-href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.'/adm_program/system/popup_message.php', array('type' => 'pho', 'element_id' => 'div_image_'.$actThumbnail,\n                            'database_id' => $actThumbnail, 'database_id_2' => $getPhotoUuid)).'\">\n                            <i class=\"fas fa-trash-alt\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('SYS_DELETE').'\"></i></a>';\n            }\n\n            if ($gCurrentUser->editPhotoRight() || ($gValidLogin && $gSettingsManager->getBool('enable_ecard_module')) || $gSettingsManager->getBool('photo_download_enabled')) {\n                $photoThumbnailTable .= '</div>';\n            }\n            $photoThumbnailTable .= '</div>';\n        }\n    }\n\n    // the lightbox should be able to go through the whole album, therefore we must\n    // integrate links to the photos of the album pages to this page and container but hidden\n    if ((int) $gSettingsManager->get('photo_show_mode') === 1) {\n        $photoThumbnailTableShown = false;\n\n        for ($hiddenPhotoNr = 1; $hiddenPhotoNr <= $photoAlbum->getValue('pho_quantity'); ++$hiddenPhotoNr) {\n            if ($hiddenPhotoNr >= $firstPhotoNr && $hiddenPhotoNr <= $actThumbnail) {\n                if (!$photoThumbnailTableShown) {\n                    $page->addHtml($photoThumbnailTable);\n                    $photoThumbnailTableShown = true;\n                }\n            } else {\n                $page->addHtml('\n                    <a class=\"d-none\" data-gallery=\"admidio-gallery\" data-type=\"image\" data-toggle=\"lightbox\" data-title=\"'.$headline.'\"\n                        href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $hiddenPhotoNr, 'max_width' => $gSettingsManager->getInt('photo_show_width'), 'max_height' => $gSettingsManager->getInt('photo_show_height'))).'\">&nbsp;</a>\n                ');\n            }\n        }\n        $page->addHtml('</div>');   // close album-container\n    } else {\n        // show photos if lightbox is not used\n        $photoThumbnailTable .= '</div>';   // close album-container\n        $page->addHtml($photoThumbnailTable);\n    }\n\n    // show information about user who creates the recordset and changed it\n    $page->addHtml(admFuncShowCreateChangeInfoById(\n        $photoAlbum->getValue('pho_usr_id_create'),\n        $photoAlbum->getValue('pho_timestamp_create'),\n        $photoAlbum->getValue('pho_usr_id_change'),\n        $photoAlbum->getValue('pho_timestamp_change')\n    ));\n\n    // show page navigations through thumbnails\n    $page->addHtml(admFuncGeneratePagination(\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photos.php', array('photo_uuid' => $photoAlbum->getValue('pho_uuid'))),\n        $photoAlbum->getValue('pho_quantity'),\n        $gSettingsManager->getInt('photo_thumbs_page'),\n        $getPhotoNr,\n        true,\n        'photo_nr'\n    ));\n}\n// Album list\n\n// show all albums of the current level\n$sql = 'SELECT *\n          FROM '.TBL_PHOTOS.'\n         WHERE pho_org_id = ? -- $gCurrentOrgId';\n$queryParams = array($gCurrentOrgId);\nif ($getPhotoUuid !== '') {\n    $sql .= '\n        AND pho_pho_id_parent = ? -- $photoAlbum->getValue(\\'pho_id\\')';\n    $queryParams[] = $photoAlbum->getValue('pho_id');\n} else {\n    $sql .= '\n        AND (pho_pho_id_parent IS NULL) ';\n}\n\nif (!$gCurrentUser->editPhotoRight()) {\n    $sql .= '\n        AND pho_locked = false ';\n}\n\n$sql .= '\n    ORDER BY pho_begin DESC';\n\n$albumStatement = $gDb->queryPrepared($sql, $queryParams);\n$albumList      = $albumStatement->fetchAll();\n$albumsCount    = $albumStatement->rowCount();\n\nif ($albumsCount > 0) {\n    // if there are photos in the current album and a sub albums exists, then show a separator\n    if ($photoAlbum->getValue('pho_quantity') > 0) {\n        $page->addHtml('<hr />');\n    }\n\n    $childPhotoAlbum = new TablePhotos($gDb);\n\n    $page->addHtml('<div class=\"row admidio-margin-bottom\">');\n\n    for ($x = $getStart; $x <= $getStart + $gSettingsManager->getInt('photo_albums_per_page') - 1 && $x < $albumsCount; ++$x) {\n        $htmlLock = '';\n\n        $childPhotoAlbum->clear();\n        $childPhotoAlbum->setArray($albumList[$x]);\n\n        // folder of the album\n        $albumFolder = ADMIDIO_PATH . FOLDER_DATA . '/photos/' . $childPhotoAlbum->getValue('pho_begin', 'Y-m-d') . '_' . $childPhotoAlbum->getValue('pho_id');\n\n        // show album if album is not locked, or it has child albums or the user has the photo module edit right\n        if ((is_dir($albumFolder) && $childPhotoAlbum->isVisible())\n        || $childPhotoAlbum->hasChildAlbums()) {\n            // Get random image for preview\n            $shuffleImage = $childPhotoAlbum->shuffleImage();\n\n            // album title\n            if (is_dir($albumFolder) || $childPhotoAlbum->hasChildAlbums()) {\n                $albumTitle = '<a href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photos.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'))).'\">'.$childPhotoAlbum->getValue('pho_name').'</a>';\n            } else {\n                $albumTitle = $childPhotoAlbum->getValue('pho_name');\n            }\n\n            $albumDate = $childPhotoAlbum->getValue('pho_begin', $gSettingsManager->getString('system_date'));\n            if ($childPhotoAlbum->getValue('pho_end') !== $childPhotoAlbum->getValue('pho_begin')) {\n                $albumDate .= ' '.$gL10n->get('SYS_DATE_TO').' '.$childPhotoAlbum->getValue('pho_end', $gSettingsManager->getString('system_date'));\n            }\n\n            $page->addHtml('\n                <div class=\"admidio-album col-sm-6 col-lg-4 col-xl-3\" id=\"panel_pho_'.$childPhotoAlbum->getValue('pho_uuid').'\">\n                    <div class=\"card admidio-card\">\n                        <a href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photos.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'))).'\"><img\n                            class=\"card-img-top\" src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $shuffleImage['shuffle_pho_uuid'], 'photo_nr' => $shuffleImage['shuffle_img_nr'], 'thumb' => 1)).'\" alt=\"'.$gL10n->get('SYS_PHOTOS').'\" /></a>\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">'.$albumTitle);\n            // if user has admin rights for photo module then show some functions\n            if ($gCurrentUser->editPhotoRight()) {\n                if ((bool) $childPhotoAlbum->getValue('pho_locked') === false) {\n                    $htmlLock = '<a class=\"dropdown-item btn\" href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_function.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'), 'mode' => 'lock')).'\">\n                                            <i class=\"fas fa-lock\" data-toggle=\"tooltip\"></i> '.$gL10n->get('PHO_ALBUM_LOCK').'</a>';\n                }\n\n                $page->addHtml('\n                                    <div class=\"dropdown float-right\">\n                                        <a class=\"\" href=\"#\" role=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                            <i class=\"fas fa-chevron-circle-down\" data-toggle=\"tooltip\"></i></a>\n                                        <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\">\n                                            <a class=\"dropdown-item btn\" href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_new.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'), 'mode' => 'change')).'\">\n                                                <i class=\"fas fa-edit\" data-toggle=\"tooltip\"></i> '.$gL10n->get('PHO_EDIT_ALBUM').'</a>\n                                            ' .$htmlLock . '\n                                            <a class=\"dropdown-item btn openPopup\" href=\"javascript:void(0);\"\n                                                data-href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.'/adm_program/system/popup_message.php', array('type' => 'pho_album', 'element_id' => 'panel_pho_' . $childPhotoAlbum->getValue('pho_uuid'),\n                                            'name' => $childPhotoAlbum->getValue('pho_name'), 'database_id' => $childPhotoAlbum->getValue('pho_uuid'))).'\">\n                                                <i class=\"fas fa-trash-alt\" data-toggle=\"tooltip\"></i> '.$gL10n->get('PHO_ALBUM_DELETE').'</a>\n                                        </div>\n                                    </div>');\n            }\n            $page->addHtml('</h5>\n\n                            <p class=\"card-text\">' . $albumDate . '</p>');\n\n            if (strlen($childPhotoAlbum->getValue('pho_description')) > 0) {\n                $albumDescription = $childPhotoAlbum->getValue('pho_description', 'html');\n\n                if (strlen($albumDescription) > 200) {\n                    // read first 200 chars of text, then search for last space and cut the text there. After that add a \"more\" link\n                    $textPrev = substr($albumDescription, 0, 200);\n                    $maxPosPrev = strrpos($textPrev, ' ');\n                    $albumDescription = substr($textPrev, 0, $maxPosPrev).\n                                        ' <span class=\"collapse\" id=\"viewdetails'.$childPhotoAlbum->getValue('pho_uuid').'\">'.substr($albumDescription, $maxPosPrev).'.\n                                        </span> <a class=\"admidio-icon-link\" data-toggle=\"collapse\" data-target=\"#viewdetails'.$childPhotoAlbum->getValue('uuid').'\"><i class=\"fas fa-angle-double-right\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('SYS_MORE').'\"></i></a>';\n                }\n\n                $page->addHtml('<p class=\"card-text\">' . $albumDescription . '</p>');\n            }\n\n            $page->addHtml('<p class=\"card-text\">' . $childPhotoAlbum->countImages() . ' ' . $gL10n->get('PHO_PHOTOGRAPHER') . ' ' . $childPhotoAlbum->getValue('pho_photographers') . '</p>');\n\n            // Notice for users with foto edit rights that the folder of the album doesn't exist\n            if (!is_dir($albumFolder) && !$childPhotoAlbum->hasChildAlbums() && $gCurrentUser->editPhotoRight()) {\n                $page->addHtml('<p class=\"card-text\"><div class=\"alert alert-warning alert-small\" role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>'.$gL10n->get('PHO_FOLDER_NOT_FOUND').'</div></p>');\n            }\n\n            // Notice for users with foto edit right that this album is locked\n            if ($childPhotoAlbum->getValue('pho_locked') == 1) {\n                $page->addHtml('<p class=\"card-text\"><div class=\"alert alert-warning alert-small\" role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>'.$gL10n->get('PHO_ALBUM_NOT_APPROVED').'</div></p>');\n            }\n\n            if ($gCurrentUser->editPhotoRight() && $childPhotoAlbum->getValue('pho_locked') == 1) {\n                $page->addHtml('<button class=\"btn btn-primary\" onclick=\"window.location.href=\\''.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_function.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'), 'mode' => 'unlock')).'\\'\">\n                                    '.$gL10n->get('PHO_ALBUM_UNLOCK').'\n                                </button>');\n            }\n\n            $page->addHtml('</div>\n                    </div>\n                </div>\n            ');\n        }//Ende wenn Ordner existiert\n    }//for\n\n    $page->addHtml('</div>');\n}\n\n// Empty album, if the album contains neither photos nor sub-folders\nif ($albumsCount === 0 && ($photoAlbum->getValue('pho_quantity') == 0 || strlen($photoAlbum->getValue('pho_quantity')) === 0)) {  // alle vorhandenen Albumen werden ignoriert\n    $page->addHtml($gL10n->get('PHO_NO_ALBUM_CONTENT'));\n}\n\n// If necessary show links to navigate to next and previous albums of the query\n$baseUrl = SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photos.php', array('photo_uuid' => $getPhotoUuid));\n$page->addHtml(admFuncGeneratePagination($baseUrl, $albumsCount, $gSettingsManager->getInt('photo_albums_per_page'), $getStart));\n\n// show html of complete page\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Class manages access to database table adm_photos\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/**\n * Diese Klasse dient dazu ein Fotoveranstaltungsobjekt zu erstellen.\n * Eine Fotoveranstaltung kann ueber diese Klasse in der Datenbank verwaltet werden.\n *\n * Beside the methods of the parent class there are the following additional methods:\n *\n * countImages($phoId = 0)     - Rekursive Funktion gibt die Anzahl aller Bilder\n *                               inkl. der Unteralben zurueck\n * shuffleImage($phoId = 0)    - Rekursive Funktion zum Auswaehlen eines\n *                               Beispielbildes aus einem moeglichst hohen Album\n * createFolder()              - erzeugt den entsprechenden Ordner unter adm_my_files/photos\n * deleteInDatabase($photoId)  - Rekursive Funktion die die uebergebene Veranstaltung\n *                               und alle Unterveranstaltungen loescht\n * deleteInFilesystem($folder) - Rekursive Funktion die alles innerhalb des uebergebenen\n *                               Ordners mit Unterordnern und allen Dateien loescht\n */\nclass TablePhotos extends TableAccess\n{\n    /**\n     * @var bool|null Flag if this album has child albums\n     */\n    protected $hasChildAlbums;\n\n    /**\n     * Constructor that will create an object of a recordset of the table adm_photos.\n     * If the id is set than the specific photo album will be loaded.\n     * @param Database $database Object of the class Database. This should be the default global object **$gDb**.\n     * @param int      $phoId    The recordset of the photo album with this id will be loaded. If id isn't set than an empty object of the table is created.\n     */\n    public function __construct(Database $database, $phoId = 0)\n    {\n        parent::__construct($database, TBL_PHOTOS, 'pho', $phoId);\n    }\n\n    /**\n     * Initialize all necessary data of this object.\n     * @return void\n     */\n    public function clear()\n    {\n        parent::clear();\n\n        $this->hasChildAlbums = null;\n    }\n\n    /**\n     * Rekursive Funktion gibt die Anzahl aller Bilder inkl. der Unteralben zurueck\n     * pho_id noetig fuer rekursiven Aufruf\n     * @param int $phoId\n     * @return int\n     */\n    public function countImages($phoId = 0)\n    {\n        $totalImages = 0;\n\n        // If no phoId is set, calculate the amount of pictures in the current album\n        if ($phoId === 0) {\n            $phoId = (int) $this->getValue('pho_id');\n            $totalImages = (int) $this->getValue('pho_quantity');\n        }\n\n        // Get all sub-albums\n        $sql = 'SELECT pho_id, pho_quantity\n                  FROM '.TBL_PHOTOS.'\n                 WHERE pho_pho_id_parent = ? -- $phoId\n                   AND pho_locked = false';\n        $childAlbumsStatement = $this->db->queryPrepared($sql, array($phoId));\n\n        while ($phoRow = $childAlbumsStatement->fetch()) {\n            $totalImages += (int) $phoRow['pho_quantity'] + $this->countImages((int) $phoRow['pho_id']);\n        }\n\n        return $totalImages;\n    }\n\n    /**\n     * Legt den Ordner fuer die Veranstaltung im Dateisystem an\n     * @return array<string,string>|null\n     */\n    public function createFolder()\n    {\n        // Ordner fuer die Veranstaltung anlegen\n        $folderName = $this->getValue('pho_begin', 'Y-m-d') . '_' . (int) $this->getValue('pho_id');\n        try {\n            FileSystemUtils::createDirectoryIfNotExists(ADMIDIO_PATH . FOLDER_DATA . '/photos/' . $folderName);\n        } catch (\\RuntimeException $exception) {\n            return array(\n                'text' => 'SYS_FOLDER_NOT_CREATED',\n                'path' => 'adm_my_files/photos/' . $folderName\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Deletes the selected photo album and all sub photo albums.\n     * After that the class will be initialize.\n     * @return bool **true** if no error occurred\n     */\n    public function delete()\n    {\n        if ($this->deleteInDatabase((int) $this->getValue('pho_id'))) {\n            return parent::delete();\n        }\n\n        return false;\n    }\n\n    /**\n     * Rekursive Funktion die die uebergebene Veranstaltung und alle Unterveranstaltungen loescht\n     * @param int $photoId\n     * @return bool\n     */\n    public function deleteInDatabase($photoId)\n    {\n        $returnValue = true;\n\n        $this->db->startTransaction();\n\n        // erst einmal rekursiv zur tiefsten Tochterveranstaltung gehen\n        $sql = 'SELECT pho_id\n                  FROM '.TBL_PHOTOS.'\n                 WHERE pho_pho_id_parent = ? -- $photoId';\n        $childAlbumStatement = $this->db->queryPrepared($sql, array($photoId));\n\n        while ($phoId = $childAlbumStatement->fetchColumn()) {\n            if ($returnValue) {\n                $returnValue = $this->deleteInDatabase((int) $phoId);\n            }\n        }\n\n        // nun DB-Eintrag und Ordner loeschen\n        if ($returnValue) {\n            // Ordnerpfad zusammensetzen\n            $folder = ADMIDIO_PATH . FOLDER_DATA. '/photos/'.$this->getValue('pho_begin', 'Y-m-d').'_'.$photoId;\n\n            // aktuellen Ordner incl. Unterordner und Dateien loeschen, falls er existiert\n            try {\n                $dirDeleted = FileSystemUtils::deleteDirectoryIfExists($folder, true);\n\n                if ($dirDeleted) {\n                    // Veranstaltung jetzt in DB loeschen\n                    $sql = 'DELETE FROM '.TBL_PHOTOS.'\n                             WHERE pho_id = ? -- $photoId';\n                    $this->db->queryPrepared($sql, array($photoId));\n                }\n            } catch (\\RuntimeException $exception) {\n            }\n        }\n\n        $this->db->endTransaction();\n\n        return $returnValue;\n    }\n\n    /**\n     * Get the value of a column of the database table.\n     * If the value was manipulated before with **setValue** than the manipulated value is returned.\n     * @param string $columnName The name of the database column whose value should be read\n     * @param string $format          Returns the field value in a special format **text**, **html**, **database**\n     *                                or datetime (detailed description in method description)\n     *                                * 'd.m.Y' : a date or timestamp field accepts the format of the PHP date() function\n     *                                * 'html'  : returns the value in html-format if this is necessary for that field type.\n     *                                * 'database' : returns the value that is stored in database with no format applied\n     * @return int|string|bool Returns the value of the database column.\n     *                         If the value was manipulated before with **setValue** than the manipulated value is returned.\n     */\n    public function getValue($columnName, $format = '')\n    {\n        if ($columnName === 'pho_description' && $format === 'html') {\n            $value = nl2br(parent::getValue($columnName));\n        } else {\n            $value = parent::getValue($columnName, $format);\n        }\n\n        return $value;\n    }\n\n    /**\n     * Check if this album has one or more child albums.\n     * @return bool Return **true** if child albums exists.\n     */\n    public function hasChildAlbums()\n    {\n        if ($this->hasChildAlbums === null) {\n            $sql = 'SELECT COUNT(*) AS count\n                      FROM '.TBL_PHOTOS.'\n                     WHERE pho_pho_id_parent = ? -- $this->getValue(\\'pho_id\\')';\n            $countChildAlbums = $this->db->queryPrepared($sql, array((int) $this->getValue('pho_id')));\n\n            $this->hasChildAlbums = $countChildAlbums->fetchColumn() > 0;\n        }\n\n        return $this->hasChildAlbums;\n    }\n\n    /**\n     * This method checks if the current user is allowed to edit this photo album. Therefore\n     * the photo album must be visible to the user and must be of the current organization.\n     * The user must be a member of at least one role that have the right to manage photo albums.\n     * @return bool Return true if the current user is allowed to edit this photo album\n     */\n    public function isEditable()\n    {\n        global $gCurrentUser;\n\n        return $gCurrentUser->editPhotoRight() && ($this->isVisible() || (int) $this->getValue('pho_id') === 0);\n    }\n\n    /**\n     * This method checks if the current user is allowed to view this photo album. Therefore\n     * the album must be from the current organization and should not be locked or the user\n     * is a module administrator.\n     * @return bool Return true if the current user is allowed to view this photo album\n     */\n    public function isVisible()\n    {\n        // current photo album must belong to current organization\n        if ($this->getValue('pho_id') > 0 && (int) $this->getValue('pho_org_id') !== $GLOBALS['gCurrentOrgId']) {\n            return false;\n        }\n        // locked photo album could only be viewed by module administrators\n        elseif ((int) $this->getValue('pho_locked') === 1 && !$GLOBALS['gCurrentUser']->editPhotoRight()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Save all changed columns of the recordset in table of database. Therefore the class remembers if it's\n     * a new record or if only an update is necessary. The update statement will only update\n     * the changed columns. If the table has columns for creator or editor than these column\n     * with their timestamp will be updated.\n     * The current organization will be set per default.\n     * @param bool $updateFingerPrint Default **true**. Will update the creator or editor of the recordset if table has columns like **usr_id_create** or **usr_id_changed**\n     * @return bool If an update or insert into the database was done then return true, otherwise false.\n     */\n    public function save($updateFingerPrint = true)\n    {\n        if ($this->newRecord) {\n            $this->setValue('pho_org_id', $GLOBALS['gCurrentOrgId']);\n        }\n\n        return parent::save($updateFingerPrint);\n    }\n\n    /**\n     * Rekursive Funktion zum Auswaehlen eines Beispielbildes aus einem moeglichst hohen Album\n     * Rueckgabe eines Arrays mit allen noetigen Infos um den Link zu erstellen\n     * @param int $phoId\n     * @return array\n     */\n    public function shuffleImage($phoId = 0)\n    {\n        $shuffleImage = array('shuffle_pho_id' => 0, 'shuffle_img_nr' => 0, 'shuffle_img_begin' => '');\n\n        // wurde keine ID uebergeben, dann versuchen das Zufallsbild aus dem aktuellen Album zu nehmen\n        if ($phoId === 0) {\n            $phoId = (int) $this->getValue('pho_id');\n            $shuffleImage['shuffle_pho_id']    = $phoId;\n            $shuffleImage['shuffle_pho_uuid']  = $this->getValue('pho_uuid');\n            $shuffleImage['shuffle_img_begin'] = $this->getValue('pho_begin', 'Y-m-d');\n\n            if ($this->getValue('pho_quantity') > 0) {\n                $shuffleImage['shuffle_img_nr'] = mt_rand(1, (int) $this->getValue('pho_quantity'));\n            }\n        }\n\n        if ($shuffleImage['shuffle_img_nr'] === 0) {\n            // kein Bild vorhanden, dann in einem Unteralbum suchen\n            $sql = 'SELECT pho_id, pho_uuid, pho_begin, pho_quantity\n                      FROM '.TBL_PHOTOS.'\n                     WHERE pho_pho_id_parent = ? -- $phoId\n                       AND pho_locked = false\n                  ORDER BY pho_quantity DESC';\n            $childAlbumsStatement = $this->db->queryPrepared($sql, array($phoId));\n\n            while ($phoRow = $childAlbumsStatement->fetch()) {\n                if ($shuffleImage['shuffle_img_nr'] === 0) {\n                    $shuffleImage['shuffle_pho_id']    = (int) $phoRow['pho_id'];\n                    $shuffleImage['shuffle_pho_uuid']  = $phoRow['pho_uuid'];\n                    $shuffleImage['shuffle_img_begin'] = $phoRow['pho_begin'];\n\n                    if ($phoRow['pho_quantity'] > 0) {\n                        $shuffleImage['shuffle_img_nr'] = mt_rand(1, $phoRow['pho_quantity']);\n                    } else {\n                        $shuffleImage = $this->shuffleImage((int) $phoRow['pho_id']);\n                    }\n                }\n            }\n        }\n\n        return $shuffleImage;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n ***********************************************************************************************\n * Send ecard to users and show status message\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire_once(__DIR__ . '/ecard_function.php');\n\n// check if the module is enabled and disallow access if it's disabled\nif (!$gSettingsManager->getBool('enable_ecard_module')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// Initialize and check the parameters\n$postTemplateName = admFuncVariableIsValid($_POST, 'ecard_template', 'file', array('requireValue' => true));\n$postPhotoUuid    = admFuncVariableIsValid($_POST, 'photo_uuid', 'string', array('requireValue' => true));\n$postPhotoNr      = admFuncVariableIsValid($_POST, 'photo_nr', 'int', array('requireValue' => true));\n$postMessage      = admFuncVariableIsValid($_POST, 'ecard_message', 'html');\n\n$funcClass       = new FunctionClass($gL10n);\n$photoAlbum      = new TablePhotos($gDb);\n$photoAlbum->readDataByUuid($postPhotoUuid);\n$imageUrl        = SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $postPhotoUuid, 'photo_nr' => $postPhotoNr, 'max_width' => $gSettingsManager->getInt('ecard_card_picture_width'), 'max_height' => $gSettingsManager->getInt('ecard_card_picture_height')));\n$imageServerPath = ADMIDIO_PATH . FOLDER_DATA . '/photos/'.$photoAlbum->getValue('pho_begin', 'Y-m-d').'_'.$photoAlbum->getValue('pho_id').'/'.$postPhotoNr.'.jpg';\n\n$_SESSION['ecard_request'] = $_POST;\n\ntry {\n    // check the CSRF token of the form against the session token\n    SecurityUtils::validateCsrfToken($_POST['admidio-csrf-token']);\n} catch (AdmException $exception) {\n    $exception->showHtml();\n    // => EXIT\n}\n\n// check if user has right to view the album\nif (!$photoAlbum->isVisible()) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\n// the logged-in user has no valid mail address stored in his profile, which can be used as sender\nif ($gValidLogin && $gCurrentUser->getValue('EMAIL') === '') {\n    $gMessage->show($gL10n->get('SYS_CURRENT_USER_NO_EMAIL', array('<a href=\"'.ADMIDIO_URL.FOLDER_MODULES.'/profile/profile.php\">', '</a>')));\n    // => EXIT\n}\n\n$senderName  = $gCurrentUser->getValue('FIRST_NAME').' '.$gCurrentUser->getValue('LAST_NAME');\n$senderEmail = $gCurrentUser->getValue('EMAIL');\n\nif (!isset($_POST['ecard_recipients']) || !is_array($_POST['ecard_recipients'])) {\n    $_SESSION['ecard_request']['ecard_recipients'] = '';\n    $gMessage->show($gL10n->get('SYS_FIELD_EMPTY', array($gL10n->get('SYS_TO'))));\n    // => EXIT\n}\n\nif ($postMessage === '') {\n    $gMessage->show($gL10n->get('SYS_FIELD_EMPTY', array($gL10n->get('SYS_MESSAGE'))));\n    // => EXIT\n}\n\n// read template from file system\n$ecardDataToParse = $funcClass->getEcardTemplate($postTemplateName);\n\n// if template was not found then show error\nif ($ecardDataToParse === null) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// check if user has right to send mail to selected roles and users\n$arrayRoles = array();\n$arrayUsers = array();\n$receiverString = implode(' | ', $_POST['ecard_recipients']);\n$sqlEmailField  = '';\n\nforeach ($_POST['ecard_recipients'] as $value) {\n    if (str_contains($value, 'groupID')) {\n        $roleId = (int) substr($value, 9);\n        if ($gCurrentUser->hasRightSendMailToRole($roleId)) {\n            $arrayRoles[] = $roleId;\n        }\n    } else {\n        $arrayUsers[] = $value;\n    }\n}\n\nif (count($arrayRoles) === 0 && count($arrayUsers) === 0) {\n    $ecardSendResult = false;\n} else {\n    $ecardSendResult = true;\n}\n\n// object to handle the current message in the database\n$message = new TableMessage($gDb);\n$message->setValue('msg_type', TableMessage::MESSAGE_TYPE_EMAIL);\n$message->setValue('msg_subject', $gL10n->get('SYS_GREETING_CARD').': '.$gL10n->get('SYS_NEW_MESSAGE_RECEIVED'));\n$message->setValue('msg_usr_id_sender', $gCurrentUserId);\n\n// set condition if email should only send to the email address of the user field\n// with the internal name 'EMAIL'\nif (!$gSettingsManager->getBool('mail_send_to_all_addresses')) {\n    $sqlEmailField = ' AND field.usf_name_intern = \\'EMAIL\\' ';\n}\n\nif (count($arrayRoles) > 0) {\n    // Wenn schon dann alle Namen und die dazugeh\u00f6rigen Emails auslesen und in die versand Liste hinzuf\u00fcgen\n    $sql = 'SELECT DISTINCT first_name.usd_value AS first_name, last_name.usd_value AS last_name, email.usd_value AS email, rol_name\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n        INNER JOIN '.TBL_USERS.'\n                ON usr_id = mem_usr_id\n        INNER JOIN ' . TBL_USER_DATA . ' AS email\n                ON email.usd_usr_id = usr_id\n               AND LENGTH(email.usd_value) > 0\n        INNER JOIN ' . TBL_USER_FIELDS . ' AS field\n                ON field.usf_id = email.usd_usf_id\n               AND field.usf_type = \\'EMAIL\\'\n                   ' . $sqlEmailField . '\n        INNER JOIN '.TBL_USER_DATA.' AS last_name\n                ON last_name.usd_usr_id = usr_id\n               AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n        INNER JOIN '.TBL_USER_DATA.' AS first_name\n                ON first_name.usd_usr_id = usr_id\n               AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n             WHERE rol_id           IN ('.implode(',', $arrayRoles).')\n               AND cat_org_id       = ? -- $gCurrentOrgId\n               AND mem_begin       <= ? -- DATE_NOW\n               AND mem_end          > ? -- DATE_NOW\n               AND usr_valid        = true\n          ORDER BY last_name, first_name';\n    $queryParams = array(\n        $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n        $gProfileFields->getProperty('FIRST_NAME', 'usf_id'),\n        $gCurrentOrgId,\n        DATE_NOW,\n        DATE_NOW\n    );\n    $usersStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    while ($row = $usersStatement->fetch()) {\n        if ($ecardSendResult) {\n            // create and send ecard\n            $ecardHtmlData   = $funcClass->parseEcardTemplate($imageUrl, $postMessage, $ecardDataToParse, $row['first_name'].' '.$row['last_name'], $row['email']);\n            $ecardSendResult = $funcClass->sendEcard($senderName, $senderEmail, $ecardHtmlData, $row['first_name'], $row['last_name'], $row['email'], $imageServerPath);\n        }\n    }\n\n    // add roles to message object\n    foreach ($arrayRoles as $roleId) {\n        $message->addRole($roleId, 0);\n    }\n}\n\nif (count($arrayUsers) > 0) {\n    $sql = 'SELECT DISTINCT first_name.usd_value AS first_name, last_name.usd_value AS last_name, email.usd_value AS email\n              FROM '.TBL_USERS.'\n        INNER JOIN ' . TBL_USER_DATA . ' AS email\n                ON email.usd_usr_id = usr_id\n               AND LENGTH(email.usd_value) > 0\n        INNER JOIN ' . TBL_USER_FIELDS . ' AS field\n                ON field.usf_id = email.usd_usf_id\n               AND field.usf_type = \\'EMAIL\\'\n                   ' . $sqlEmailField . '\n        INNER JOIN '.TBL_USER_DATA.' AS last_name\n                ON last_name.usd_usr_id = usr_id\n               AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n        INNER JOIN '.TBL_USER_DATA.' AS first_name\n                ON first_name.usd_usr_id = usr_id\n               AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n             WHERE usr_id           IN ('.implode(',', $arrayUsers).')\n               AND usr_valid        = true\n          ORDER BY last_name, first_name';\n    $queryParams = array(\n        $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n        $gProfileFields->getProperty('FIRST_NAME', 'usf_id')\n    );\n    $usersStatement = $gDb->queryPrepared($sql, $queryParams);\n\n    while ($row = $usersStatement->fetch()) {\n        if ($ecardSendResult) {\n            // create and send ecard\n            $ecardHtmlData   = $funcClass->parseEcardTemplate($imageUrl, $postMessage, $ecardDataToParse, $row['first_name'].' '.$row['last_name'], $row['email']);\n            $ecardSendResult = $funcClass->sendEcard($senderName, $senderEmail, $ecardHtmlData, $row['first_name'], $row['last_name'], $row['email'], $imageServerPath);\n        }\n    }\n\n    // add roles to message object\n    foreach ($arrayUsers as $userId) {\n        $message->addUser($userId);\n    }\n}\n\n// show result\nif ($ecardSendResult) {\n    $message->addContent($ecardHtmlData);\n    $message->save();\n\n    $gMessage->setForwardUrl($gNavigation->getPreviousUrl());\n    $gMessage->show($gL10n->get('SYS_ECARD_SUCCESSFULLY_SEND'));\n// => EXIT\n} else {\n    $gMessage->show($gL10n->get('SYS_ECARD_NOT_SUCCESSFULLY_SEND'));\n    // => EXIT\n}\n", "<?php\n/**\n ***********************************************************************************************\n * Form for sending ecards\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * photo_uuid: UUID of photo album whose image you want to send\n * photo_nr:   Number of the photo of the chosen album\n * user_uuid:  (optional) UUID of the user who should receive the ecard\n ***********************************************************************************************\n */\nrequire_once(__DIR__ . '/../../system/common.php');\nrequire_once(__DIR__ . '/ecard_function.php');\nrequire(__DIR__ . '/../../system/login_valid.php');\n\n// Initialize and check the parameters\n$getPhotoUuid = admFuncVariableIsValid($_GET, 'photo_uuid', 'string', array('requireValue' => true));\n$getUserUuid  = admFuncVariableIsValid($_GET, 'user_uuid', 'string');\n$getPhotoNr   = admFuncVariableIsValid($_GET, 'photo_nr', 'int', array('requireValue' => true));\n$showPage     = admFuncVariableIsValid($_GET, 'show_page', 'int', array('defaultValue' => 1));\n\n// Initialisierung lokaler Variablen\n$funcClass = new FunctionClass($gL10n);\n$templates = $funcClass->getFileNames(ADMIDIO_PATH . FOLDER_DATA . '/ecard_templates');\n$headline  = $gL10n->get('SYS_SEND_GREETING_CARD');\n\n// check if the module is enabled and disallow access if it's disabled\nif (!$gSettingsManager->getBool('enable_ecard_module')) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n    // => EXIT\n}\n\n// Drop URL on navigation stack\n$gNavigation->addUrl(CURRENT_URL, $headline);\n\n// Create photo album object or read from session\nif (isset($_SESSION['photo_album']) && (int) $_SESSION['photo_album']->getValue('pho_uuid') === $getPhotoUuid) {\n    $photoAlbum =& $_SESSION['photo_album'];\n} else {\n    $photoAlbum = new TablePhotos($gDb);\n    $photoAlbum->readDataByUuid($getPhotoUuid);\n\n    $_SESSION['photo_album'] = $photoAlbum;\n}\n\n// check if user has right to view the album\nif (!$photoAlbum->isVisible()) {\n    $gMessage->show($gL10n->get('SYS_INVALID_PAGE_VIEW'));\n    // => EXIT\n}\n\nif ($gValidLogin && $gCurrentUser->getValue('EMAIL') === '') {\n    // the logged in user has no valid mail address stored in his profile, which can be used as sender\n    $gMessage->show($gL10n->get('SYS_CURRENT_USER_NO_EMAIL', array('<a href=\"'.ADMIDIO_URL.FOLDER_MODULES.'/profile/profile.php\">', '</a>')));\n    // => EXIT\n}\n\nif ($getUserUuid !== '') {\n    // UUID was set than read contact data of this user\n    $user = new User($gDb, $gProfileFields);\n    $user->readDataByUuid($getUserUuid);\n\n    // check if the current user has the right communicate with that member\n    if ((!$gCurrentUser->editUsers() && !isMember((int) $user->getValue('usr_id'))) || strlen($user->getValue('usr_id')) === 0) {\n        $gMessage->show($gL10n->get('SYS_USER_ID_NOT_FOUND'));\n        // => EXIT\n    }\n\n    // check if the member has a valid email address\n    if (!StringUtils::strValidCharacters($user->getValue('EMAIL'), 'email')) {\n        $gMessage->show($gL10n->get('SYS_USER_NO_EMAIL', array($user->getValue('FIRST_NAME').' '.$user->getValue('LAST_NAME'))));\n        // => EXIT\n    }\n}\n\nif (isset($_SESSION['ecard_request'])) {\n    // if user is returned to this form after he submit it,\n    // then try to restore all values that he has entered before\n    $template   = $_SESSION['ecard_request']['ecard_template'];\n    $recipients = $_SESSION['ecard_request']['ecard_recipients'];\n    $message    = $_SESSION['ecard_request']['ecard_message'];\n} else {\n    $template   = $gSettingsManager->getString('ecard_template');\n    $recipients = null;\n    $message    = '';\n}\n\n// create html page object\n$page = new HtmlPage('admidio-ecards', $headline);\n\n$page->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/lightbox/ekko-lightbox.min.js');\n\n$page->addJavascript(\n    '\n    $(document).delegate(\"*[data-toggle=\\\"lightbox\\\"]\", \"click\", function(event) {\n        event.preventDefault();\n        $(this).ekkoLightbox();\n    });\n\n    $(\"#btn_ecard_preview\").click(function(event) {\n        event.preventDefault();\n        $(\"#ecard_form input[id=\\'submit_action\\']\").val(\"preview\");\n        $(\"#ecard_form textarea[name=\\'ecard_message\\']\").text(CKEDITOR.instances.ecard_message.getData());\n\n        $.post({ // create an AJAX call...\n            data: $(\"#ecard_form\").serialize(), // get the form data\n            url: \"ecard_preview.php\", // the file to call\n            success: function(response) { // on success..\n                $(\".modal-dialog\").attr(\"class\", \"modal-dialog modal-lg\");\n                $(\".modal-content\").html(response);\n                $(\"#admidio-modal\").modal();\n            }\n        });\n\n        return false;\n    });',\n    true\n);\n\n// show form\n$form = new HtmlForm('ecard_form', 'ecard_send.php', $page);\n$form->addInput('submit_action', '', '', array('property' => HtmlForm::FIELD_HIDDEN));\n$form->addInput('photo_uuid', '', $getPhotoUuid, array('property' => HtmlForm::FIELD_HIDDEN));\n$form->addInput('photo_nr', '', $getPhotoNr, array('property' => HtmlForm::FIELD_HIDDEN));\n\n$form->openGroupBox('gb_layout', $gL10n->get('SYS_LAYOUT'));\n$form->addCustomContent($gL10n->get('SYS_PHOTO'), '\n    <a data-toggle=\"lightbox\" data-type=\"image\" data-title=\"'.$gL10n->get('SYS_PREVIEW').'\"\n        href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $getPhotoNr, 'max_width' => $gSettingsManager->getInt('photo_show_width'), 'max_height' => $gSettingsManager->getInt('photo_show_height'))).'\"><img\n        src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $getPhotoNr, 'max_width' => $gSettingsManager->getInt('ecard_thumbs_scale'), 'max_height' => $gSettingsManager->getInt('ecard_thumbs_scale'))).'\"\n        class=\"imageFrame\" alt=\"'.$gL10n->get('SYS_VIEW_PICTURE_FULL_SIZED').'\"  title=\"'.$gL10n->get('SYS_VIEW_PICTURE_FULL_SIZED').'\" />\n    </a>');\n$templates = array_keys(FileSystemUtils::getDirectoryContent(ADMIDIO_PATH . FOLDER_DATA . '/ecard_templates', false, false, array(FileSystemUtils::CONTENT_TYPE_FILE)));\nif (!is_array($templates)) {\n    $gMessage->show($gL10n->get('SYS_TEMPLATE_FOLDER_OPEN'));\n    // => EXIT\n}\n// create new array without file extension in visual value\n$newTemplateArray = array();\nforeach ($templates as $templateName) {\n    $newTemplateArray[$templateName] = ucfirst(preg_replace('/[_-]/', ' ', str_replace('.tpl', '', $templateName)));\n}\nunset($templateName);\n$form->addSelectBox(\n    'ecard_template',\n    $gL10n->get('SYS_TEMPLATE'),\n    $newTemplateArray,\n    array('defaultValue' => $template, 'property' => HtmlForm::FIELD_REQUIRED, 'showContextDependentFirstEntry' => false)\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_contact_details', $gL10n->get('SYS_CONTACT_DETAILS'));\n\n// create list with all possible recipients\n$list = array();\n\n// list all roles where login users could send mails to\n$arrayMailRoles = $gCurrentUser->getRolesWriteMails();\n\n$sql = 'SELECT rol_id, rol_name\n          FROM '.TBL_ROLES.'\n    INNER JOIN '.TBL_CATEGORIES.'\n            ON cat_id = rol_cat_id\n         WHERE rol_id IN ('.Database::getQmForValues($arrayMailRoles).')\n           AND cat_name_intern <> \\'EVENTS\\'\n      ORDER BY rol_name';\n$statement = $gDb->queryPrepared($sql, $arrayMailRoles);\n\nwhile ($row = $statement->fetch()) {\n    $list[] = array('groupID: '.$row['rol_id'], $row['rol_name'], $gL10n->get('SYS_ROLES'));\n}\n\n// select all users\n$arrayRoles = array_merge($arrayMailRoles, $gCurrentUser->getRolesViewMemberships());\n$arrayUniqueRoles = array_unique($arrayRoles);\n\n$sql = 'SELECT DISTINCT usr_id, first_name.usd_value AS first_name, last_name.usd_value AS last_name\n          FROM '.TBL_MEMBERS.'\n    INNER JOIN '.TBL_USERS.'\n            ON usr_id = mem_usr_id\n     LEFT JOIN '.TBL_USER_DATA.' AS last_name\n            ON last_name.usd_usr_id = usr_id\n           AND last_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'LAST_NAME\\', \\'usf_id\\')\n     LEFT JOIN '.TBL_USER_DATA.' AS first_name\n            ON first_name.usd_usr_id = usr_id\n           AND first_name.usd_usf_id = ? -- $gProfileFields->getProperty(\\'FIRST_NAME\\', \\'usf_id\\')\n         WHERE usr_valid  = true\n           AND mem_begin <= ? -- DATE_NOW\n           AND mem_end    > ? -- DATE_NOW\n           AND mem_rol_id IN ('.implode(',', $arrayUniqueRoles).')\n      GROUP BY usr_id, first_name.usd_value, last_name.usd_value\n      ORDER BY last_name, first_name';\n$queryParams = array(\n    $gProfileFields->getProperty('LAST_NAME', 'usf_id'),\n    $gProfileFields->getProperty('FIRST_NAME', 'usf_id'),\n    DATE_NOW,\n    DATE_NOW\n);\n$statement = $gDb->queryPrepared($sql, $queryParams);\n\nwhile ($row = $statement->fetch()) {\n    $list[] = array($row['usr_id'], $row['last_name']. ', '.$row['first_name'], $gL10n->get('SYS_MEMBERS'));\n}\n\n$form->addSelectBox(\n    'ecard_recipients',\n    $gL10n->get('SYS_TO'),\n    $list,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'defaultValue' => $recipients, 'multiselect' => true)\n);\n$form->addLine();\n$form->addInput(\n    'name_from',\n    $gL10n->get('SYS_YOUR_NAME'),\n    $gCurrentUser->getValue('FIRST_NAME'). ' '. $gCurrentUser->getValue('LAST_NAME'),\n    array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n);\n$form->addInput(\n    'mail_from',\n    $gL10n->get('SYS_YOUR_EMAIL'),\n    $gCurrentUser->getValue('EMAIL'),\n    array('maxLength' => 50, 'property' => HtmlForm::FIELD_DISABLED)\n);\n$form->closeGroupBox();\n$form->openGroupBox('gb_message', $gL10n->get('SYS_MESSAGE'), 'admidio-panel-editor');\n$form->addEditor(\n    'ecard_message',\n    '',\n    $message,\n    array('property' => HtmlForm::FIELD_REQUIRED, 'toolbar' => 'AdmidioGuestbook')\n);\n$form->closeGroupBox();\n$form->openButtonGroup();\n$form->addButton('btn_ecard_preview', $gL10n->get('SYS_PREVIEW'), array('icon' => 'fa-eye', 'class' => 'admidio-margin-bottom'));\n$form->addSubmitButton('btn_ecard_submit', $gL10n->get('SYS_SEND'), array('icon' => 'fa-envelope'));\n$form->closeButtonGroup();\n\n// add form to html page and show page\n$page->addHtml($form->show());\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Show a list of all photo albums\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n *\n * Parameters:\n *\n * photo_uuid : UUID of album which photos should be shown\n * headline   : Headline of the module that will be displayed\n *              (Default) PHO_PHOTO_ALBUMS\n * start_thumbnail : Number of the thumbnail which is the first that should be shown\n * start      : Position of query recordset where the visual output should start\n *\n *****************************************************************************/\nrequire_once(__DIR__ . '/../../system/common.php');\n\n// check if the module is enabled and disallow access if it's disabled\nif ((int) $gSettingsManager->get('enable_photo_module') === 0) {\n    $gMessage->show($gL10n->get('SYS_MODULE_DISABLED'));\n// => EXIT\n} elseif ((int) $gSettingsManager->get('enable_photo_module') === 2) {\n    // only logged-in users can access the module\n    require(__DIR__ . '/../../system/login_valid.php');\n}\n\n// Initialize and check the parameters\n$getPhotoUuid      = admFuncVariableIsValid($_GET, 'photo_uuid', 'string');\n$getHeadline       = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('PHO_PHOTO_ALBUMS')));\n$getStart          = admFuncVariableIsValid($_GET, 'start', 'int');\n$getStartThumbnail = admFuncVariableIsValid($_GET, 'start_thumbnail', 'int', array('defaultValue' => 1));\n$getPhotoNr        = admFuncVariableIsValid($_GET, 'photo_nr', 'int');\n\nunset($_SESSION['photo_album_request'], $_SESSION['ecard_request']);\n\n// Fotoalbums-Objekt erzeugen oder aus Session lesen\nif (isset($_SESSION['photo_album']) && $_SESSION['photo_album']->getValue('pho_uuid') === $getPhotoUuid) {\n    $photoAlbum =& $_SESSION['photo_album'];\n} else {\n    // einlesen des Albums falls noch nicht in Session gespeichert\n    $photoAlbum = new TablePhotos($gDb);\n    if ($getPhotoUuid !== '') {\n        $photoAlbum->readDataByUuid($getPhotoUuid);\n    }\n\n    $_SESSION['photo_album'] = $photoAlbum;\n}\n\n// set headline of module\nif ($getPhotoUuid !== '') {\n    // check if the current user could view this photo album\n    if (!$photoAlbum->isVisible()) {\n        $gMessage->show($gL10n->get('SYS_NO_RIGHTS'));\n        // => EXIT\n    }\n\n    $headline = $photoAlbum->getValue('pho_name');\n\n    // Drop URL on navigation stack\n    $gNavigation->addUrl(CURRENT_URL, $headline);\n} else {\n    $headline = $getHeadline;\n\n    // Navigation of the module starts here\n    $gNavigation->addStartUrl(CURRENT_URL, $headline, 'fa-image');\n}\n\n// create html page object\n$page = new HtmlPage('admidio-photos', $headline);\n\n// add rss feed to photos\nif ($gSettingsManager->getBool('enable_rss')) {\n    $page->addRssFile(\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/rss_photos.php', array('headline' => $getHeadline)),\n        $gL10n->get('SYS_RSS_FEED_FOR_VAR', array($gCurrentOrganization->getValue('org_longname'). ' - '.$getHeadline))\n    );\n}\n\nif ($photoAlbum->isEditable()) {\n    $page->addJavascript(\n        '\n        /**\n         * rotate image\n         * @param {int}    img\n         * @param {string} direction\n         */\n        function imageRotate(img, direction) {\n            $.get(\"'.ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_function.php\", {photo_uuid: \"'.$getPhotoUuid.'\", photo_nr: img, job: \"rotate\", direction: direction}, function(data) {\n                // Appending the random number is necessary to trick the browser cache\n                $(\"#img_\" + img).attr(\"src\", \"'.SecurityUtils::encodeUrl(\n            ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php',\n            array('photo_uuid' => $getPhotoUuid, 'thumb' => 1)\n        ).'&photo_nr=\" + img + \"&rand=\" + Math.random());\n                return true;\n            });\n        }'\n    );\n}\n\n// integrate bootstrap ekko lightbox addon\nif ((int) $gSettingsManager->get('photo_show_mode') === 1) {\n    $page->addCssFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/lightbox/ekko-lightbox.css');\n    $page->addJavascriptFile(ADMIDIO_URL . FOLDER_LIBS_CLIENT . '/lightbox/ekko-lightbox.js');\n\n    $page->addJavascript(\n        '\n        $(document).delegate(\"*[data-toggle=\\\"lightbox\\\"]\", \"click\", function(event) {\n            event.preventDefault();\n            $(this).ekkoLightbox();\n        });',\n        true\n    );\n}\n\n// if a photo number was committed then simulate a left mouse click\nif ($getPhotoNr > 0) {\n    $page->addJavascript('$(\"#img_'.$getPhotoNr.'\").trigger(\"click\");', true);\n}\n\nif ($gCurrentUser->editPhotoRight()) {\n    // show link to create new album\n    $page->addPageFunctionsMenuItem(\n        'menu_item_photos_new_album',\n        $gL10n->get('PHO_CREATE_ALBUM'),\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_new.php', array('mode' => 'new', 'photo_uuid' => $getPhotoUuid)),\n        'fa-plus-circle'\n    );\n\n    if ($getPhotoUuid !== '') {\n        // show link to edit album\n        $page->addPageFunctionsMenuItem(\n            'menu_item_photos_edit_album',\n            $gL10n->get('PHO_EDIT_ALBUM'),\n            SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_new.php', array('mode' => 'change', 'photo_uuid' => $getPhotoUuid)),\n            'fa-edit'\n        );\n\n        // show link to upload photos\n        $page->addPageFunctionsMenuItem(\n            'menu_item_photos_upload_photo',\n            $gL10n->get('PHO_UPLOAD_PHOTOS'),\n            SecurityUtils::encodeUrl(ADMIDIO_URL.'/adm_program/system/file_upload.php', array('module' => 'photos', 'uuid' => $getPhotoUuid)),\n            'fa-upload'\n        );\n    }\n}\n\n// show link to download photos if enabled\nif ($gSettingsManager->getBool('photo_download_enabled') && $photoAlbum->getValue('pho_quantity') > 0) {\n    // show link to download photos\n    $page->addPageFunctionsMenuItem(\n        'menu_item_photos_download',\n        $gL10n->get('SYS_DOWNLOAD_ALBUM'),\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_download.php', array('photo_uuid' => $getPhotoUuid)),\n        'fa-download'\n    );\n}\n\nif ($getPhotoUuid !== '') {\n    // show additional album information\n    $datePeriod = $photoAlbum->getValue('pho_begin', $gSettingsManager->getString('system_date'));\n\n    if ($photoAlbum->getValue('pho_end') !== $photoAlbum->getValue('pho_begin') && strlen($photoAlbum->getValue('pho_end')) > 0) {\n        $datePeriod .= ' '.$gL10n->get('SYS_DATE_TO').' '.$photoAlbum->getValue('pho_end', $gSettingsManager->getString('system_date'));\n    }\n\n    // Notice for users with foto edit right that this album is locked\n    if ($photoAlbum->getValue('pho_locked') == 1) {\n        $page->addHtml('<p class=\"card-text\"><div class=\"alert alert-warning alert-small\" role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>'.$gL10n->get('PHO_ALBUM_NOT_APPROVED').'</div></p>');\n    }\n\n    $page->addHtml('\n    <p class=\"lead\">\n        <p class=\"font-weight-bold\">' . $datePeriod . '</p>\n        <p>' . $photoAlbum->countImages() . ' ' . $gL10n->get('PHO_PHOTOGRAPHER') . ' ' . $photoAlbum->getValue('pho_photographers') . '</p>');\n\n    if (strlen($photoAlbum->getValue('pho_description')) > 0) {\n        $page->addHtml('<p>' . $photoAlbum->getValue('pho_description', 'html') . '</p>');\n    }\n\n    $page->addHtml('</p>');\n}\n\n// THUMBNAILS\n// Only if current album contains images\nif ($photoAlbum->getValue('pho_quantity') > 0) {\n    $photoThumbnailTable = '';\n    $firstPhotoNr        = 1;\n    $lastPhotoNr         = $gSettingsManager->getInt('photo_thumbs_page');\n\n    // Open the correct album page when image number has been set\n    if ($getPhotoNr > 0) {\n        $firstPhotoNr = (round(($getPhotoNr - 1) / $gSettingsManager->getInt('photo_thumbs_page')) * $gSettingsManager->getInt('photo_thumbs_page')) + 1;\n        $lastPhotoNr  = $firstPhotoNr + $gSettingsManager->getInt('photo_thumbs_page') - 1;\n    }\n\n    // create thumbnail container\n    $page->addHtml('<div class=\"row\">');\n\n    for ($actThumbnail = $firstPhotoNr; $actThumbnail <= $lastPhotoNr && $actThumbnail <= $photoAlbum->getValue('pho_quantity'); ++$actThumbnail) {\n        if ($actThumbnail <= $photoAlbum->getValue('pho_quantity')) {\n            $photoThumbnailTable .= '<div class=\"col-sm-6 col-lg-4 col-xl-3 admidio-album-thumbnail\" id=\"div_image_'.$actThumbnail.'\">';\n\n            // Popup window\n            if ((int) $gSettingsManager->get('photo_show_mode') === 0) {\n                $photoThumbnailTable .= '\n                        <img class=\"rounded\" id=\"img_'.$actThumbnail.'\" style=\"cursor: pointer\"\n                            onclick=\"window.open(\\''.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_presenter.php', array('photo_nr' => $actThumbnail, 'photo_uuid' => $getPhotoUuid)).'\\',\\'msg\\', \\'height='.($gSettingsManager->getInt('photo_show_height') + 300).', width='.($gSettingsManager->getInt('photo_show_width')+70).',left=162,top=5\\')\"\n                            src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail, 'thumb' => 1)).'\" alt=\"'.$actThumbnail.'\" />';\n            }\n\n            // Bootstrap modal with lightbox\n            elseif ((int) $gSettingsManager->get('photo_show_mode') === 1) {\n                $photoThumbnailTable .= '\n                        <a data-gallery=\"admidio-gallery\" data-type=\"image\" data-parent=\".admidio-album-thumbnail\" data-toggle=\"lightbox\" data-title=\"'.$headline.'\"\n                            href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail, 'max_width' => $gSettingsManager->getInt('photo_show_width'), 'max_height' => $gSettingsManager->getInt('photo_show_height'))).'\"><img\n                            class=\"rounded\" id=\"img_'.$actThumbnail.'\" src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail, 'thumb' => 1)).'\" alt=\"'.$actThumbnail.'\" /></a>';\n            }\n\n            // Same window\n            elseif ((int) $gSettingsManager->get('photo_show_mode') === 2) {\n                $photoThumbnailTable .= '\n                        <a href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_presenter.php', array('photo_nr' => $actThumbnail, 'photo_uuid' => $getPhotoUuid)).'\"><img\n                            class=\"rounded\" id=\"img_'.$actThumbnail.'\" src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail, 'thumb' => 1)).'\" alt=\"'.$actThumbnail.'\" />\n                        </a>';\n            }\n\n            if ($gCurrentUser->editPhotoRight() || ($gValidLogin && $gSettingsManager->getBool('enable_ecard_module')) || $gSettingsManager->getBool('photo_download_enabled')) {\n                $photoThumbnailTable .= '<div id=\"image_preferences_'.$actThumbnail.'\" class=\"text-center\" style=\"width: ' . $gSettingsManager->getInt('photo_thumbs_scale') . 'px\">';\n            }\n\n\n            if ($gValidLogin && $gSettingsManager->getBool('enable_ecard_module')) {\n                $photoThumbnailTable .= '\n                        <a class=\"admidio-icon-link\" href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/ecards/ecards.php', array('photo_nr' => $actThumbnail, 'photo_uuid' => $getPhotoUuid, 'show_page' => $getPhotoNr)).'\">\n                            <i class=\"fas fa-envelope\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('PHO_PHOTO_SEND_ECARD').'\"></i></a>';\n            }\n\n            if ($gSettingsManager->getBool('photo_download_enabled')) {\n                // show link to download photo\n                $photoThumbnailTable .= '\n                        <a class=\"admidio-icon-link\" href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_download.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $actThumbnail)).'\">\n                            <i class=\"fas fa-download\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('SYS_DOWNLOAD_PHOTO').'\"></i></a>';\n            }\n\n            // buttons for moderation\n            if ($gCurrentUser->editPhotoRight()) {\n                $photoThumbnailTable .= '\n                        <a class=\"admidio-icon-link\" href=\"javascript:void(0)\" onclick=\"return imageRotate('.$actThumbnail.', \\'right\\')\">\n                            <i class=\"fas fa-redo-alt\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('PHO_PHOTO_ROTATE_RIGHT').'\"></i></a>\n                        <a class=\"admidio-icon-link\"  href=\"javascript:void(0)\" onclick=\"return imageRotate('.$actThumbnail.', \\'left\\')\">\n                            <i class=\"fas fa-undo-alt\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('PHO_PHOTO_ROTATE_LEFT').'\"></i></a>\n                        <a class=\"admidio-icon-link openPopup\" href=\"javascript:void(0);\"\n                            data-href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.'/adm_program/system/popup_message.php', array('type' => 'pho', 'element_id' => 'div_image_'.$actThumbnail,\n                            'database_id' => $actThumbnail, 'database_id_2' => $getPhotoUuid)).'\">\n                            <i class=\"fas fa-trash-alt\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('SYS_DELETE').'\"></i></a>';\n            }\n\n            if ($gCurrentUser->editPhotoRight() || ($gValidLogin && $gSettingsManager->getBool('enable_ecard_module')) || $gSettingsManager->getBool('photo_download_enabled')) {\n                $photoThumbnailTable .= '</div>';\n            }\n            $photoThumbnailTable .= '</div>';\n        }\n    }\n\n    // the lightbox should be able to go through the whole album, therefore we must\n    // integrate links to the photos of the album pages to this page and container but hidden\n    if ((int) $gSettingsManager->get('photo_show_mode') === 1) {\n        $photoThumbnailTableShown = false;\n\n        for ($hiddenPhotoNr = 1; $hiddenPhotoNr <= $photoAlbum->getValue('pho_quantity'); ++$hiddenPhotoNr) {\n            if ($hiddenPhotoNr >= $firstPhotoNr && $hiddenPhotoNr <= $actThumbnail) {\n                if (!$photoThumbnailTableShown) {\n                    $page->addHtml($photoThumbnailTable);\n                    $photoThumbnailTableShown = true;\n                }\n            } else {\n                $page->addHtml('\n                    <a class=\"d-none\" data-gallery=\"admidio-gallery\" data-type=\"image\" data-toggle=\"lightbox\" data-title=\"'.$headline.'\"\n                        href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $getPhotoUuid, 'photo_nr' => $hiddenPhotoNr, 'max_width' => $gSettingsManager->getInt('photo_show_width'), 'max_height' => $gSettingsManager->getInt('photo_show_height'))).'\">&nbsp;</a>\n                ');\n            }\n        }\n        $page->addHtml('</div>');   // close album-container\n    } else {\n        // show photos if lightbox is not used\n        $photoThumbnailTable .= '</div>';   // close album-container\n        $page->addHtml($photoThumbnailTable);\n    }\n\n    // show information about user who creates the recordset and changed it\n    $page->addHtml(admFuncShowCreateChangeInfoById(\n        $photoAlbum->getValue('pho_usr_id_create'),\n        $photoAlbum->getValue('pho_timestamp_create'),\n        $photoAlbum->getValue('pho_usr_id_change'),\n        $photoAlbum->getValue('pho_timestamp_change')\n    ));\n\n    // show page navigations through thumbnails\n    $page->addHtml(admFuncGeneratePagination(\n        SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photos.php', array('photo_uuid' => $photoAlbum->getValue('pho_uuid'))),\n        $photoAlbum->getValue('pho_quantity'),\n        $gSettingsManager->getInt('photo_thumbs_page'),\n        $getPhotoNr,\n        true,\n        'photo_nr'\n    ));\n}\n// Album list\n\n// show all albums of the current level\n$sql = 'SELECT *\n          FROM '.TBL_PHOTOS.'\n         WHERE pho_org_id = ? -- $gCurrentOrgId';\n$queryParams = array($gCurrentOrgId);\nif ($getPhotoUuid !== '') {\n    $sql .= '\n        AND pho_pho_id_parent = ? -- $photoAlbum->getValue(\\'pho_id\\')';\n    $queryParams[] = $photoAlbum->getValue('pho_id');\n} else {\n    $sql .= '\n        AND (pho_pho_id_parent IS NULL) ';\n}\n\nif (!$gCurrentUser->editPhotoRight()) {\n    $sql .= '\n        AND pho_locked = false ';\n}\n\n$sql .= '\n    ORDER BY pho_begin DESC';\n\n$albumStatement = $gDb->queryPrepared($sql, $queryParams);\n$albumList      = $albumStatement->fetchAll();\n$albumsCount    = $albumStatement->rowCount();\n\nif ($albumsCount > 0) {\n    // if there are photos in the current album and a sub albums exists, then show a separator\n    if ($photoAlbum->getValue('pho_quantity') > 0) {\n        $page->addHtml('<hr />');\n    }\n\n    $childPhotoAlbum = new TablePhotos($gDb);\n\n    $page->addHtml('<div class=\"row admidio-margin-bottom\">');\n\n    for ($x = $getStart; $x <= $getStart + $gSettingsManager->getInt('photo_albums_per_page') - 1 && $x < $albumsCount; ++$x) {\n        $htmlLock = '';\n\n        $childPhotoAlbum->clear();\n        $childPhotoAlbum->setArray($albumList[$x]);\n\n        // folder of the album\n        $albumFolder = ADMIDIO_PATH . FOLDER_DATA . '/photos/' . $childPhotoAlbum->getValue('pho_begin', 'Y-m-d') . '_' . $childPhotoAlbum->getValue('pho_id');\n\n        // show album if album is not locked, or it has child albums or the user has the photo module edit right\n        if ((is_dir($albumFolder) && $childPhotoAlbum->isVisible())\n        || $childPhotoAlbum->hasChildAlbums()) {\n            // Get random image for preview\n            $shuffleImage = $childPhotoAlbum->shuffleImage();\n\n            // album title\n            if (is_dir($albumFolder) || $childPhotoAlbum->hasChildAlbums()) {\n                $albumTitle = '<a href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photos.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'))).'\">'.$childPhotoAlbum->getValue('pho_name').'</a>';\n            } else {\n                $albumTitle = $childPhotoAlbum->getValue('pho_name');\n            }\n\n            $albumDate = $childPhotoAlbum->getValue('pho_begin', $gSettingsManager->getString('system_date'));\n            if ($childPhotoAlbum->getValue('pho_end') !== $childPhotoAlbum->getValue('pho_begin')) {\n                $albumDate .= ' '.$gL10n->get('SYS_DATE_TO').' '.$childPhotoAlbum->getValue('pho_end', $gSettingsManager->getString('system_date'));\n            }\n\n            $page->addHtml('\n                <div class=\"admidio-album col-sm-6 col-lg-4 col-xl-3\" id=\"panel_pho_'.$childPhotoAlbum->getValue('pho_uuid').'\">\n                    <div class=\"card admidio-card\">\n                        <a href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photos.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'))).'\"><img\n                            class=\"card-img-top\" src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_show.php', array('photo_uuid' => $shuffleImage['shuffle_pho_uuid'], 'photo_nr' => $shuffleImage['shuffle_img_nr'], 'thumb' => 1)).'\" alt=\"'.$gL10n->get('SYS_PHOTOS').'\" /></a>\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">'.$albumTitle);\n            // if user has admin rights for photo module then show some functions\n            if ($gCurrentUser->editPhotoRight()) {\n                if ((bool) $childPhotoAlbum->getValue('pho_locked') === false) {\n                    $htmlLock = '<a class=\"dropdown-item btn\" href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_function.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'), 'mode' => 'lock')).'\">\n                                            <i class=\"fas fa-lock\" data-toggle=\"tooltip\"></i> '.$gL10n->get('PHO_ALBUM_LOCK').'</a>';\n                }\n\n                $page->addHtml('\n                                    <div class=\"dropdown float-right\">\n                                        <a class=\"\" href=\"#\" role=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                                            <i class=\"fas fa-chevron-circle-down\" data-toggle=\"tooltip\"></i></a>\n                                        <div class=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenuButton\">\n                                            <a class=\"dropdown-item btn\" href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_new.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'), 'mode' => 'change')).'\">\n                                                <i class=\"fas fa-edit\" data-toggle=\"tooltip\"></i> '.$gL10n->get('PHO_EDIT_ALBUM').'</a>\n                                            ' .$htmlLock . '\n                                            <a class=\"dropdown-item btn openPopup\" href=\"javascript:void(0);\"\n                                                data-href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.'/adm_program/system/popup_message.php', array('type' => 'pho_album', 'element_id' => 'panel_pho_' . $childPhotoAlbum->getValue('pho_uuid'),\n                                            'name' => $childPhotoAlbum->getValue('pho_name'), 'database_id' => $childPhotoAlbum->getValue('pho_uuid'))).'\">\n                                                <i class=\"fas fa-trash-alt\" data-toggle=\"tooltip\"></i> '.$gL10n->get('PHO_ALBUM_DELETE').'</a>\n                                        </div>\n                                    </div>');\n            }\n            $page->addHtml('</h5>\n\n                            <p class=\"card-text\">' . $albumDate . '</p>');\n\n            if (strlen($childPhotoAlbum->getValue('pho_description')) > 0) {\n                $albumDescription = $childPhotoAlbum->getValue('pho_description', 'html');\n\n                if (strlen($albumDescription) > 200) {\n                    // read first 200 chars of text, then search for last space and cut the text there. After that add a \"more\" link\n                    $textPrev = substr($albumDescription, 0, 200);\n                    $maxPosPrev = strrpos($textPrev, ' ');\n                    $albumDescription = substr($textPrev, 0, $maxPosPrev).\n                                        ' <span class=\"collapse\" id=\"viewdetails'.$childPhotoAlbum->getValue('pho_uuid').'\">'.substr($albumDescription, $maxPosPrev).'.\n                                        </span> <a class=\"admidio-icon-link\" data-toggle=\"collapse\" data-target=\"#viewdetails'.$childPhotoAlbum->getValue('uuid').'\"><i class=\"fas fa-angle-double-right\" data-toggle=\"tooltip\" title=\"'.$gL10n->get('SYS_MORE').'\"></i></a>';\n                }\n\n                $page->addHtml('<p class=\"card-text\">' . $albumDescription . '</p>');\n            }\n\n            $page->addHtml('<p class=\"card-text\">' . $childPhotoAlbum->countImages() . ' ' . $gL10n->get('PHO_PHOTOGRAPHER') . ' ' . $childPhotoAlbum->getValue('pho_photographers') . '</p>');\n\n            // Notice for users with foto edit rights that the folder of the album doesn't exist\n            if (!is_dir($albumFolder) && !$childPhotoAlbum->hasChildAlbums() && $gCurrentUser->editPhotoRight()) {\n                $page->addHtml('<p class=\"card-text\"><div class=\"alert alert-warning alert-small\" role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>'.$gL10n->get('PHO_FOLDER_NOT_FOUND').'</div></p>');\n            }\n\n            // Notice for users with foto edit right that this album is locked\n            if ($childPhotoAlbum->getValue('pho_locked') == 1) {\n                $page->addHtml('<p class=\"card-text\"><div class=\"alert alert-warning alert-small\" role=\"alert\"><i class=\"fas fa-exclamation-triangle\"></i>'.$gL10n->get('PHO_ALBUM_NOT_APPROVED').'</div></p>');\n            }\n\n            if ($gCurrentUser->editPhotoRight() && $childPhotoAlbum->getValue('pho_locked') == 1) {\n                $page->addHtml('<button class=\"btn btn-primary\" onclick=\"window.location.href=\\''.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photo_album_function.php', array('photo_uuid' => $childPhotoAlbum->getValue('pho_uuid'), 'mode' => 'unlock')).'\\'\">\n                                    '.$gL10n->get('PHO_ALBUM_UNLOCK').'\n                                </button>');\n            }\n\n            $page->addHtml('</div>\n                    </div>\n                </div>\n            ');\n        }//Ende wenn Ordner existiert\n    }//for\n\n    $page->addHtml('</div>');\n}\n\n// Empty album, if the album contains neither photos nor sub-folders\nif ($albumsCount === 0 && ($photoAlbum->getValue('pho_quantity') == 0 || strlen($photoAlbum->getValue('pho_quantity')) === 0)) {  // alle vorhandenen Albumen werden ignoriert\n    $page->addHtml($gL10n->get('PHO_NO_ALBUM_CONTENT'));\n}\n\n// If necessary show links to navigate to next and previous albums of the query\n$baseUrl = SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/photos/photos.php', array('photo_uuid' => $getPhotoUuid));\n$page->addHtml(admFuncGeneratePagination($baseUrl, $albumsCount, $gSettingsManager->getInt('photo_albums_per_page'), $getStart));\n\n// show html of complete page\n$page->show();\n", "<?php\n/**\n ***********************************************************************************************\n * Class manages access to database table adm_photos\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/**\n * Diese Klasse dient dazu ein Fotoveranstaltungsobjekt zu erstellen.\n * Eine Fotoveranstaltung kann ueber diese Klasse in der Datenbank verwaltet werden.\n *\n * Beside the methods of the parent class there are the following additional methods:\n *\n * countImages($phoId = 0)     - Rekursive Funktion gibt die Anzahl aller Bilder\n *                               inkl. der Unteralben zurueck\n * shuffleImage($phoId = 0)    - Rekursive Funktion zum Auswaehlen eines\n *                               Beispielbildes aus einem moeglichst hohen Album\n * createFolder()              - erzeugt den entsprechenden Ordner unter adm_my_files/photos\n * deleteInDatabase($photoId)  - Rekursive Funktion die die uebergebene Veranstaltung\n *                               und alle Unterveranstaltungen loescht\n * deleteInFilesystem($folder) - Rekursive Funktion die alles innerhalb des uebergebenen\n *                               Ordners mit Unterordnern und allen Dateien loescht\n */\nclass TablePhotos extends TableAccess\n{\n    /**\n     * @var bool|null Flag if this album has child albums\n     */\n    protected $hasChildAlbums;\n\n    /**\n     * Constructor that will create an object of a recordset of the table adm_photos.\n     * If the id is set than the specific photo album will be loaded.\n     * @param Database $database Object of the class Database. This should be the default global object **$gDb**.\n     * @param int      $phoId    The recordset of the photo album with this id will be loaded. If id isn't set than an empty object of the table is created.\n     */\n    public function __construct(Database $database, $phoId = 0)\n    {\n        parent::__construct($database, TBL_PHOTOS, 'pho', $phoId);\n    }\n\n    /**\n     * Initialize all necessary data of this object.\n     * @return void\n     */\n    public function clear()\n    {\n        parent::clear();\n\n        $this->hasChildAlbums = null;\n    }\n\n    /**\n     * Rekursive Funktion gibt die Anzahl aller Bilder inkl. der Unteralben zurueck\n     * pho_id noetig fuer rekursiven Aufruf\n     * @param int $phoId\n     * @return int\n     */\n    public function countImages($phoId = 0)\n    {\n        $totalImages = 0;\n\n        // If no phoId is set, calculate the amount of pictures in the current album\n        if ($phoId === 0) {\n            $phoId = (int) $this->getValue('pho_id');\n            $totalImages = (int) $this->getValue('pho_quantity');\n        }\n\n        // Get all sub-albums\n        $sql = 'SELECT pho_id, pho_quantity\n                  FROM '.TBL_PHOTOS.'\n                 WHERE pho_pho_id_parent = ? -- $phoId\n                   AND pho_locked = false';\n        $childAlbumsStatement = $this->db->queryPrepared($sql, array($phoId));\n\n        while ($phoRow = $childAlbumsStatement->fetch()) {\n            $totalImages += (int) $phoRow['pho_quantity'] + $this->countImages((int) $phoRow['pho_id']);\n        }\n\n        return $totalImages;\n    }\n\n    /**\n     * Legt den Ordner fuer die Veranstaltung im Dateisystem an\n     * @return array<string,string>|null\n     */\n    public function createFolder()\n    {\n        // Ordner fuer die Veranstaltung anlegen\n        $folderName = $this->getValue('pho_begin', 'Y-m-d') . '_' . (int) $this->getValue('pho_id');\n        try {\n            FileSystemUtils::createDirectoryIfNotExists(ADMIDIO_PATH . FOLDER_DATA . '/photos/' . $folderName);\n        } catch (\\RuntimeException $exception) {\n            return array(\n                'text' => 'SYS_FOLDER_NOT_CREATED',\n                'path' => 'adm_my_files/photos/' . $folderName\n            );\n        }\n\n        return null;\n    }\n\n    /**\n     * Deletes the selected photo album and all sub photo albums.\n     * After that the class will be initialize.\n     * @return bool **true** if no error occurred\n     */\n    public function delete()\n    {\n        if ($this->deleteInDatabase((int) $this->getValue('pho_id'))) {\n            return parent::delete();\n        }\n\n        return false;\n    }\n\n    /**\n     * Rekursive Funktion die die uebergebene Veranstaltung und alle Unterveranstaltungen loescht\n     * @param int $photoId\n     * @return bool\n     */\n    public function deleteInDatabase($photoId)\n    {\n        $returnValue = true;\n\n        $this->db->startTransaction();\n\n        // erst einmal rekursiv zur tiefsten Tochterveranstaltung gehen\n        $sql = 'SELECT pho_id\n                  FROM '.TBL_PHOTOS.'\n                 WHERE pho_pho_id_parent = ? -- $photoId';\n        $childAlbumStatement = $this->db->queryPrepared($sql, array($photoId));\n\n        while ($phoId = $childAlbumStatement->fetchColumn()) {\n            if ($returnValue) {\n                $returnValue = $this->deleteInDatabase((int) $phoId);\n            }\n        }\n\n        // nun DB-Eintrag und Ordner loeschen\n        if ($returnValue) {\n            // Ordnerpfad zusammensetzen\n            $folder = ADMIDIO_PATH . FOLDER_DATA. '/photos/'.$this->getValue('pho_begin', 'Y-m-d').'_'.$photoId;\n\n            // aktuellen Ordner incl. Unterordner und Dateien loeschen, falls er existiert\n            try {\n                $dirDeleted = FileSystemUtils::deleteDirectoryIfExists($folder, true);\n\n                if ($dirDeleted) {\n                    // Veranstaltung jetzt in DB loeschen\n                    $sql = 'DELETE FROM '.TBL_PHOTOS.'\n                             WHERE pho_id = ? -- $photoId';\n                    $this->db->queryPrepared($sql, array($photoId));\n                }\n            } catch (\\RuntimeException $exception) {\n            }\n        }\n\n        $this->db->endTransaction();\n\n        return $returnValue;\n    }\n\n    /**\n     * Get the value of a column of the database table.\n     * If the value was manipulated before with **setValue** than the manipulated value is returned.\n     * @param string $columnName The name of the database column whose value should be read\n     * @param string $format          Returns the field value in a special format **text**, **html**, **database**\n     *                                or datetime (detailed description in method description)\n     *                                * 'd.m.Y' : a date or timestamp field accepts the format of the PHP date() function\n     *                                * 'html'  : returns the value in html-format if this is necessary for that field type.\n     *                                * 'database' : returns the value that is stored in database with no format applied\n     * @return int|string|bool Returns the value of the database column.\n     *                         If the value was manipulated before with **setValue** than the manipulated value is returned.\n     */\n    public function getValue($columnName, $format = '')\n    {\n        if ($columnName === 'pho_description' && $format === 'html') {\n            $value = nl2br(parent::getValue($columnName));\n        } else {\n            $value = parent::getValue($columnName, $format);\n        }\n\n        return $value;\n    }\n\n    /**\n     * Check if this album has one or more child albums.\n     * @return bool Return **true** if child albums exists.\n     */\n    public function hasChildAlbums()\n    {\n        if ($this->hasChildAlbums === null) {\n            $sql = 'SELECT COUNT(*) AS count\n                      FROM '.TBL_PHOTOS.'\n                     WHERE pho_pho_id_parent = ? -- $this->getValue(\\'pho_id\\')';\n            $countChildAlbums = $this->db->queryPrepared($sql, array((int) $this->getValue('pho_id')));\n\n            $this->hasChildAlbums = $countChildAlbums->fetchColumn() > 0;\n        }\n\n        return $this->hasChildAlbums;\n    }\n\n    /**\n     * This method checks if the current user is allowed to edit this photo album. Therefore\n     * the photo album must be visible to the user and must be of the current organization.\n     * The user must be a member of at least one role that have the right to manage photo albums.\n     * @return bool Return true if the current user is allowed to edit this photo album\n     */\n    public function isEditable()\n    {\n        global $gCurrentUser;\n\n        return $gCurrentUser->editPhotoRight() && ($this->isVisible() || (int) $this->getValue('pho_id') === 0);\n    }\n\n    /**\n     * This method checks if the current user is allowed to view this photo album. Therefore\n     * the album must be from the current organization and should not be locked or the user\n     * is a module administrator.\n     * @return bool Return true if the current user is allowed to view this photo album\n     */\n    public function isVisible()\n    {\n        // current photo album must belong to current organization\n        if ($this->getValue('pho_id') > 0 && (int) $this->getValue('pho_org_id') !== $GLOBALS['gCurrentOrgId']) {\n            return false;\n        }\n        // locked photo album could only be viewed by module administrators\n        elseif ($this->getValue('pho_locked') && !$GLOBALS['gCurrentUser']->editPhotoRight()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Save all changed columns of the recordset in table of database. Therefore the class remembers if it's\n     * a new record or if only an update is necessary. The update statement will only update\n     * the changed columns. If the table has columns for creator or editor than these column\n     * with their timestamp will be updated.\n     * The current organization will be set per default.\n     * @param bool $updateFingerPrint Default **true**. Will update the creator or editor of the recordset if table has columns like **usr_id_create** or **usr_id_changed**\n     * @return bool If an update or insert into the database was done then return true, otherwise false.\n     */\n    public function save($updateFingerPrint = true)\n    {\n        if ($this->newRecord) {\n            $this->setValue('pho_org_id', $GLOBALS['gCurrentOrgId']);\n        }\n\n        return parent::save($updateFingerPrint);\n    }\n\n    /**\n     * Rekursive Funktion zum Auswaehlen eines Beispielbildes aus einem moeglichst hohen Album\n     * Rueckgabe eines Arrays mit allen noetigen Infos um den Link zu erstellen\n     * @param int $phoId\n     * @return array\n     */\n    public function shuffleImage($phoId = 0)\n    {\n        $shuffleImage = array('shuffle_pho_id' => 0, 'shuffle_img_nr' => 0, 'shuffle_img_begin' => '');\n\n        // wurde keine ID uebergeben, dann versuchen das Zufallsbild aus dem aktuellen Album zu nehmen\n        if ($phoId === 0) {\n            $phoId = (int) $this->getValue('pho_id');\n            $shuffleImage['shuffle_pho_id']    = $phoId;\n            $shuffleImage['shuffle_pho_uuid']  = $this->getValue('pho_uuid');\n            $shuffleImage['shuffle_img_begin'] = $this->getValue('pho_begin', 'Y-m-d');\n\n            if ($this->getValue('pho_quantity') > 0) {\n                $shuffleImage['shuffle_img_nr'] = mt_rand(1, (int) $this->getValue('pho_quantity'));\n            }\n        }\n\n        if ($shuffleImage['shuffle_img_nr'] === 0) {\n            // kein Bild vorhanden, dann in einem Unteralbum suchen\n            $sql = 'SELECT pho_id, pho_uuid, pho_begin, pho_quantity\n                      FROM '.TBL_PHOTOS.'\n                     WHERE pho_pho_id_parent = ? -- $phoId\n                       AND pho_locked = false\n                  ORDER BY pho_quantity DESC';\n            $childAlbumsStatement = $this->db->queryPrepared($sql, array($phoId));\n\n            while ($phoRow = $childAlbumsStatement->fetch()) {\n                if ($shuffleImage['shuffle_img_nr'] === 0) {\n                    $shuffleImage['shuffle_pho_id']    = (int) $phoRow['pho_id'];\n                    $shuffleImage['shuffle_pho_uuid']  = $phoRow['pho_uuid'];\n                    $shuffleImage['shuffle_img_begin'] = $phoRow['pho_begin'];\n\n                    if ($phoRow['pho_quantity'] > 0) {\n                        $shuffleImage['shuffle_img_nr'] = mt_rand(1, $phoRow['pho_quantity']);\n                    } else {\n                        $shuffleImage = $this->shuffleImage((int) $phoRow['pho_id']);\n                    }\n                }\n            }\n        }\n\n        return $shuffleImage;\n    }\n}\n"], "filenames": ["adm_program/modules/ecards/ecard_send.php", "adm_program/modules/ecards/ecards.php", "adm_program/modules/photos/photos.php", "adm_program/system/classes/TablePhotos.php"], "buggy_code_start_loc": [13, 22, 62, 235], "buggy_code_end_loc": [62, 79, 63, 236], "fixing_code_start_loc": [14, 22, 62, 235], "fixing_code_end_loc": [69, 75, 63, 236], "type": "CWE-284", "message": "Improper Access Control in GitHub repository admidio/admidio prior to 4.2.9.", "other": {"cve": {"id": "CVE-2023-3303", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-23T13:15:10.587", "lastModified": "2023-06-28T15:19:14.713", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in GitHub repository admidio/admidio prior to 4.2.9."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:admidio:admidio:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.2.9", "matchCriteriaId": "E38D2EC2-B220-473C-ABD0-5CD26F447C2E"}]}]}], "references": [{"url": "https://github.com/admidio/admidio/commit/3d8bafaa4e9b7a314ffdf548622a8c7b38faee8a", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/65d260cc-55a9-4e71-888d-cb2f66c071af", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/admidio/admidio/commit/3d8bafaa4e9b7a314ffdf548622a8c7b38faee8a"}}