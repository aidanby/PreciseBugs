{"buggy_code": ["[![Ubuntu](https://img.shields.io/badge/Ubuntu-E95420?style=for-the-badge\\&logo=ubuntu\\&logoColor=white)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Mac OS](https://img.shields.io/badge/mac%20os-000000?style=for-the-badge\\&logo=macos\\&logoColor=F0F0F0)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Windows](https://img.shields.io/badge/Windows-0078D6?style=for-the-badge\\&logo=windows\\&logoColor=white)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Public workflows that use this action.](https://img.shields.io/endpoint?style=for-the-badge\\&url=https%3A%2F%2Fused-by.vercel.app%2Fapi%2Fgithub-actions%2Fused-by%3Faction%3Dtj-actions%2Fchanged-files%26badge%3Dtrue)](https://github.com/search?o=desc\\&q=tj-actions+changed-files+language%3AYAML\\&s=\\&type=Code)\n\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/4a625e9b62794b5b98e169c15c0e673c)](https://www.codacy.com/gh/tj-actions/changed-files/dashboard?utm_source=github.com\\&utm_medium=referral\\&utm_content=tj-actions/changed-files\\&utm_campaign=Badge_Grade)\n[![CI](https://github.com/tj-actions/changed-files/actions/workflows/test.yml/badge.svg)](https://github.com/tj-actions/changed-files/actions/workflows/test.yml)\n[![Update release version.](https://github.com/tj-actions/changed-files/actions/workflows/sync-release-version.yml/badge.svg)](https://github.com/tj-actions/changed-files/actions/workflows/sync-release-version.yml)\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-22-orange.svg?style=flat-square)](#contributors-)\n\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n## changed-files\n\nEffortlessly track all changed files and directories relative to a target branch, preceding commit or the last remote commit returning **relative paths** from the project root using this GitHub action.\n\n> \\[!NOTE]\n>\n> *   This action solely identifies files that have changed within the context of events such as `pull_request*`, `push`, and more. However, it doesn't detect pending uncommitted changes created during the workflow execution.\n>\n>     See: https://github.com/tj-actions/verify-changed-files instead\n\n## Table of contents\n\n*   [Features \ud83d\ude80](#features-)\n*   [Usage \ud83d\udcbb](#usage-)\n    *   [On `pull_request` \ud83d\udd00](#on-pull_request-)\n        *   [Using local .git history \ud83d\udcc1](#using-local-git-history-)\n        *   [Using Github's API :octocat:](#using-githubs-api-octocat)\n    *   [On `push` \u2b06\ufe0f](#on-push-\ufe0f)\n    *   [Other supported events :electron:](#other-supported-events-electron)\n*   [Inputs \u2699\ufe0f](#inputs-\ufe0f)\n*   [Useful Acronyms \ud83e\uddee](#useful-acronyms-)\n*   [Outputs \ud83d\udce4](#outputs-)\n*   [Versioning \ud83c\udff7\ufe0f](#versioning-\ufe0f)\n*   [Examples \ud83d\udcc4](#examples-)\n*   [Real-world usage \ud83c\udf10](#real-world-usage-)\n    *   [Open source projects \ud83d\udce6](#open-source-projects-)\n    *   [Scalability Example \ud83d\udcc8](#scalability-example-)\n*   [Important Notice \u26a0\ufe0f](#important-notice-\ufe0f)\n*   [Migration guide \ud83d\udd04](#migration-guide-)\n*   [Credits \ud83d\udc4f](#credits-)\n*   [Report Bugs \ud83d\udc1b](#report-bugs-)\n*   [Contributors \u2728](#contributors-)\n\n## Features \ud83d\ude80\n\n*   Fast execution, averaging 0-10 seconds.\n*   Leverages either [Github's REST API](https://docs.github.com/en/rest/reference/repos#list-commits) or [Git's native diff](https://git-scm.com/docs/git-diff) to determine changed files.\n*   Facilitates easy debugging.\n*   Scales to handle large/mono repositories.\n*   Supports Git submodules.\n*   Supports [merge queues](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue) for pull requests.\n*   Generates escaped [JSON output for running matrix jobs](https://github.com/tj-actions/changed-files/blob/main/.github/workflows/matrix-test.yml) based on changed files.\n*   Lists changed directories.\n    *   Limits matching changed directories to a specified maximum depth.\n    *   Optionally excludes the current directory.\n*   Writes outputs to a designated `.txt` or `.json` file for further processing.\n*   Restores deleted files to their previous location or a newly specified location.\n*   Supports fetching a fixed number of commits which improves performance.\n*   Compatible with all platforms (Linux, MacOS, Windows).\n*   Supports [GitHub-hosted runners](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners).\n*   Supports [GitHub Enterprise Server](https://docs.github.com/en/enterprise-server@3.3/admin/github-actions/getting-started-with-github-actions-for-your-enterprise/getting-started-with-github-actions-for-github-enterprise-server).\n*   Supports [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners).\n*   Lists all files and directories that have changed:\n    *   Between the current pull request branch and the last commit on the target branch.\n    *   Between the last commit and the current pushed change.\n    *   Between the last remote branch commit and the current HEAD.\n*   Restricts change detection to a subset of files and directories:\n    *   Provides boolean output indicating changes in specific files.\n    *   Uses [Glob pattern](https://codepen.io/mrmlnc/pen/OXQjMe) matching.\n        *   Supports Globstar.\n        *   Supports brace expansion.\n        *   Supports negation.\n    *   Uses [YAML](https://yaml.org/) syntax for specifying patterns.\n        *   Supports [YAML anchors & aliases](https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml#L8-L12).\n        *   Supports [YAML multi-line strings](https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml#L13-L16).\n\nAnd many more...\n\n## Usage \ud83d\udcbb\n\n> \\[!IMPORTANT]\n>\n> *   **Push Events**: When configuring [`actions/checkout`](https://github.com/actions/checkout#usage), make sure to set [`fetch-depth`](https://github.com/actions/checkout#usage) to either `0` or `2`, depending on your use case.\n> *   **Mono Repositories**: To avoid pulling the entire branch history, you can utilize the default [`actions/checkout`](https://github.com/actions/checkout#usage)'s [`fetch-depth`](https://github.com/actions/checkout#usage) of `1` for [`pull_request`](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request) events.\n> *   **Quoting Multiline Inputs**: Avoid using single or double quotes for [multiline](https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml#L13-L16) inputs. The value is already a string separated by a newline character. Refer to the [Examples](#examples-) section for more information.\n> *   **Credentials Persistence**: If [`fetch-depth`](https://github.com/actions/checkout#usage) is not set to 0, make sure to set [`persist-credentials`](https://github.com/actions/checkout#usage)  to `true` when configuring [`actions/checkout`](https://github.com/actions/checkout#usage).\n> *   **Matching Files and Folders**: To match all files and folders under a directory, this requires a globstar pattern e.g. `dir_name/**` which matches any number of subdirectories and files.\n\nVisit the [discussions for more information](https://github.com/tj-actions/changed-files/discussions) or [create a new discussion](https://github.com/tj-actions/changed-files/discussions/new/choose) for usage-related questions.\n\n### On [`pull_request`](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request) \ud83d\udd00\n\nDetect changes to all files in a Pull request relative to the target branch or since the last pushed commit.\n\n#### Using local .git history \ud83d\udcc1\n\n```yaml\nname: CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  # ------------------------------------------------------------------------------------------------------------------------------------------------\n  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.\n  # ------------------------------------------------------------------------------------------------------------------------------------------------\n  changed_files:\n    runs-on: ubuntu-latest  # windows-latest || macos-latest\n    name: Test changed-files\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # OR \"2\" -> To retrieve the preceding commit.\n\n      # Example 1\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v40\n        \n        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g\n        # with:\n        #   since_last_remote_commit: true \n\n      - name: List all changed files\n        run: |\n          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do\n            echo \"$file was changed\"\n          done\n\n      # Example 2\n      - name: Get all changed markdown files\n        id: changed-markdown-files\n        uses: tj-actions/changed-files@v40\n        with:\n          # Avoid using single or double quotes for multiline patterns\n          files: |\n             **.md\n\n      - name: List all changed files markdown files\n        if: steps.changed-markdown-files.outputs.any_changed == 'true'\n        run: |\n          for file in ${{ steps.changed-markdown-files.outputs.all_changed_files }}; do\n            echo \"$file was changed\"\n          done\n\n      # Example 3\n      - name: Get all test, doc and src files that have changed\n        id: changed-files-yaml\n        uses: tj-actions/changed-files@v40\n        with:\n          files_yaml: |\n            doc:\n              - '**.md'\n              - docs/**\n              - README.md\n            test:\n              - test/**\n              - '!test/**.md'\n            src:\n              - src/**\n          # Optionally set `files_yaml_from_source_file` to read the YAML from a file. e.g `files_yaml_from_source_file: .github/changed-files.yml`\n\n      - name: Run step if test file(s) change\n        # NOTE: Ensure all outputs are prefixed by the same key used above e.g. `test_(...)` | `doc_(...)` | `src_(...)` when trying to access the `any_changed` output.\n        if: steps.changed-files-yaml.outputs.test_any_changed == 'true'  \n        run: |\n          echo \"One or more test file(s) has changed.\"\n          echo \"List all the files that have changed: ${{ steps.changed-files-yaml.outputs.test_all_changed_files }}\"\n      \n      - name: Run step if doc file(s) change\n        if: steps.changed-files-yaml.outputs.doc_any_changed == 'true'\n        run: |\n          echo \"One or more doc file(s) has changed.\"\n          echo \"List all the files that have changed: ${{ steps.changed-files-yaml.outputs.doc_all_changed_files }}\"\n\n      # Example 3\n      - name: Get changed files in the docs folder\n        id: changed-files-specific\n        uses: tj-actions/changed-files@v40\n        with:\n          files: docs/*.{js,html}  # Alternatively using: `docs/**`\n          files_ignore: docs/static.js\n\n      - name: Run step if any file(s) in the docs folder change\n        if: steps.changed-files-specific.outputs.any_changed == 'true'\n        run: |\n          echo \"One or more files in the docs folder has changed.\"\n          echo \"List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}\"\n```\n\n#### Using Github's API :octocat:\n\n```yaml\nname: CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  # -------------------------------------------------------------\n  # Event `pull_request`: Returns all changed pull request files.\n  # --------------------------------------------------------------\n  changed_files:\n    # NOTE:\n    # - This is limited to pull_request* events and would raise an error for other events.\n    # - A maximum of 3000 files can be returned.\n    # - For more flexibility and no limitations see \"Using local .git history\" above.\n\n    runs-on: ubuntu-latest  # windows-latest || macos-latest\n    name: Test changed-files\n    permissions:\n      pull-requests: read\n\n    steps:\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v40\n\n      - name: List all changed files\n        run: |\n          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do\n            echo \"$file was changed\"\n          done\n```\n\n### On [`push`](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push) \u2b06\ufe0f\n\nDetect changes to files made since the last pushed commit.\n\n```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  # -------------------------------------------------------------\n  # Using GitHub's API is not supported for push events\n  # -------------------------------------------------------------\n  # \n  # ----------------------------------------------------------------------------------------------\n  # Using local .git history\n  # ----------------------------------------------------------------------------------------------\n  # Event `push`: Compare the preceding remote commit -> to the current commit of the main branch \n  # ----------------------------------------------------------------------------------------------\n  changed_files:\n    runs-on: ubuntu-latest  # windows-latest || macos-latest\n    name: Test changed-files\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # OR \"2\" -> To retrieve the preceding commit.\n\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v40\n\n      # NOTE: `since_last_remote_commit: true` is implied by default and falls back to the previous local commit.\n\n      - name: List all changed files\n        run: |\n          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do\n            echo \"$file was changed\"\n          done\n      ...\n```\n\n### Other supported events :electron:\n\n*   [schedule](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule)\n*   [release](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release)\n*   [workflow\\_dispatch](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch)\n*   [merge\\_group](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#merge_group)\n*   [issue\\_comment](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#issue_comment)\n*   ...and many more\n\nTo access more examples, navigate to the [Examples](#examples-) section.\n\nIf you feel generous and want to show some extra appreciation:\n\nSupport this project with a :star:\n\n[![Buy me a coffee][buymeacoffee-shield]][buymeacoffee]\n\n[buymeacoffee]: https://www.buymeacoffee.com/jackton1\n\n[buymeacoffee-shield]: https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\n\n> \\[!IMPORTANT]\n>\n> *   When using `files_yaml*` inputs:\n>     *   All keys must start with a letter or `_` and contain only alphanumeric characters, `-`, or `_`.\n>         For example, `test` or `test_key` or `tesT-key` are all valid.\n\n## Inputs \u2699\ufe0f\n\n<!-- AUTO-DOC-INPUT:START - Do not remove or modify this section -->\n\n```yaml\n- uses: tj-actions/changed-files@v40\n  id: changed-files\n  with:\n    # Github API URL.\n    # Type: string\n    # Default: \"${{ github.api_url }}\"\n    api_url: ''\n\n    # Specify a different base commit SHA or branch used \n    # for comparing changes \n    # Type: string\n    base_sha: ''\n\n    # Exclude changes outside the current directory and show path \n    # names relative to it. NOTE: This requires you to \n    # specify the top-level directory via the `path` input. \n    # Type: boolean\n    # Default: \"true\"\n    diff_relative: ''\n\n    # Output unique changed directories instead of filenames. NOTE: This \n    # returns `.` for changed files located in the current \n    # working directory which defaults to `$GITHUB_WORKSPACE`. \n    # Type: boolean\n    # Default: \"false\"\n    dir_names: ''\n\n    # Include only directories that have been deleted as opposed \n    # to directory names of files that have been deleted \n    # in the `deleted_files` output when `dir_names` is set to \n    # `true`. \n    # Type: boolean\n    # Default: \"false\"\n    dir_names_deleted_files_include_only_deleted_dirs: ''\n\n    # Exclude the current directory represented by `.` from the \n    # output when `dir_names` is set to `true`. \n    # Type: boolean\n    # Default: \"false\"\n    dir_names_exclude_current_dir: ''\n\n    # File and directory patterns to include in the output \n    # when `dir_names` is set to `true`. NOTE: This returns \n    # only the matching files and also the directory names. \n    # Type: string\n    dir_names_include_files: ''\n\n    # Separator used to split the `dir_names_include_files` input\n    # Type: string\n    # Default: \"\\n\"\n    dir_names_include_files_separator: ''\n\n    # Limit the directory output to a maximum depth e.g \n    # `test/test1/test2` with max depth of `2` returns `test/test1`. \n    # Type: string\n    dir_names_max_depth: ''\n\n    # Escape JSON output.\n    # Type: boolean\n    # Default: \"true\"\n    escape_json: ''\n\n    # Fail when the initial diff fails.\n    # Type: boolean\n    # Default: \"false\"\n    fail_on_initial_diff_error: ''\n\n    # Fail when the submodule diff fails.\n    # Type: boolean\n    # Default: \"false\"\n    fail_on_submodule_diff_error: ''\n\n    # Fetch additional history for submodules.\n    # Type: boolean\n    # Default: \"false\"\n    fetch_additional_submodule_history: ''\n\n    # Depth of additional branch history fetched. NOTE: This can \n    # be adjusted to resolve errors with insufficient history. \n    # Type: string\n    # Default: \"50\"\n    fetch_depth: ''\n\n    # File and directory patterns used to detect changes (Defaults to the entire repo if unset). \n    # NOTE: Multiline file/directory patterns should not include quotes. \n    # Type: string\n    files: ''\n\n    # Source file(s) used to populate the `files` input.\n    # Type: string\n    files_from_source_file: ''\n\n    # Separator used to split the `files_from_source_file` input.\n    # Type: string\n    # Default: \"\\n\"\n    files_from_source_file_separator: ''\n\n    # Ignore changes to these file(s). NOTE: Multiline file/directory patterns \n    # should not include quotes. \n    # Type: string\n    files_ignore: ''\n\n    # Source file(s) used to populate the `files_ignore` input\n    # Type: string\n    files_ignore_from_source_file: ''\n\n    # Separator used to split the `files_ignore_from_source_file` input\n    # Type: string\n    # Default: \"\\n\"\n    files_ignore_from_source_file_separator: ''\n\n    # Separator used to split the `files_ignore` input\n    # Type: string\n    # Default: \"\\n\"\n    files_ignore_separator: ''\n\n    # YAML used to define a set of file patterns \n    # to ignore changes \n    # Type: string\n    files_ignore_yaml: ''\n\n    # Source file(s) used to populate the `files_ignore_yaml` input. Example: \n    # https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml \n    # Type: string\n    files_ignore_yaml_from_source_file: ''\n\n    # Separator used to split the `files_ignore_yaml_from_source_file` input\n    # Type: string\n    # Default: \"\\n\"\n    files_ignore_yaml_from_source_file_separator: ''\n\n    # Separator used to split the `files` input\n    # Type: string\n    # Default: \"\\n\"\n    files_separator: ''\n\n    # YAML used to define a set of file patterns \n    # to detect changes \n    # Type: string\n    files_yaml: ''\n\n    # Source file(s) used to populate the `files_yaml` input. Example: \n    # https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml \n    # Type: string\n    files_yaml_from_source_file: ''\n\n    # Separator used to split the `files_yaml_from_source_file` input\n    # Type: string\n    # Default: \"\\n\"\n    files_yaml_from_source_file_separator: ''\n\n    # Include `all_old_new_renamed_files` output. Note this can generate a large \n    # output See: #501. \n    # Type: boolean\n    # Default: \"false\"\n    include_all_old_new_renamed_files: ''\n\n    # Output list of changed files in a JSON formatted \n    # string which can be used for matrix jobs. Example: \n    # https://github.com/tj-actions/changed-files/blob/main/.github/workflows/matrix-test.yml \n    # Type: boolean\n    # Default: \"false\"\n    json: ''\n\n    # Apply the negation patterns first. NOTE: This affects how \n    # changed files are matched. \n    # Type: boolean\n    # Default: \"false\"\n    negation_patterns_first: ''\n\n    # Split character for old and new renamed filename pairs.\n    # Type: string\n    # Default: \" \"\n    old_new_files_separator: ''\n\n    # Split character for old and new filename pairs.\n    # Type: string\n    # Default: \",\"\n    old_new_separator: ''\n\n    # Directory to store output files.\n    # Type: string\n    # Default: \".github/outputs\"\n    output_dir: ''\n\n    # Output renamed files as deleted and added files.\n    # Type: boolean\n    # Default: \"false\"\n    output_renamed_files_as_deleted_and_added: ''\n\n    # Specify a relative path under `$GITHUB_WORKSPACE` to locate the \n    # repository. \n    # Type: string\n    # Default: \".\"\n    path: ''\n\n    # Use non-ASCII characters to match files and output the \n    # filenames completely verbatim by setting this to `false` \n    # Type: boolean\n    # Default: \"true\"\n    quotepath: ''\n\n    # Recover deleted files.\n    # Type: boolean\n    # Default: \"false\"\n    recover_deleted_files: ''\n\n    # Recover deleted files to a new destination directory, defaults \n    # to the original location. \n    # Type: string\n    recover_deleted_files_to_destination: ''\n\n    # File and directory patterns used to recover deleted files, \n    # defaults to the patterns provided via the `files`, `files_from_source_file`, \n    # `files_ignore` and `files_ignore_from_source_file` inputs or all deleted files if \n    # no patterns are provided. \n    # Type: string\n    recover_files: ''\n\n    # File and directory patterns to ignore when recovering deleted \n    # files. \n    # Type: string\n    recover_files_ignore: ''\n\n    # Separator used to split the `recover_files_ignore` input\n    # Type: string\n    # Default: \"\\n\"\n    recover_files_ignore_separator: ''\n\n    # Separator used to split the `recover_files` input\n    # Type: string\n    # Default: \"\\n\"\n    recover_files_separator: ''\n\n    # Split character for output strings.\n    # Type: string\n    # Default: \" \"\n    separator: ''\n\n    # Specify a different commit SHA or branch used for \n    # comparing changes \n    # Type: string\n    sha: ''\n\n    # Get changed files for commits whose timestamp is older \n    # than the given time. \n    # Type: string\n    since: ''\n\n    # Use the last commit on the remote branch as \n    # the `base_sha`. Defaults to the last non-merge commit on \n    # the target branch for pull request events and the \n    # previous remote commit of the current branch for push \n    # events. \n    # Type: boolean\n    # Default: \"false\"\n    since_last_remote_commit: ''\n\n    # Skip the initial fetch to improve performance for shallow \n    # repositories. NOTE: This could lead to errors with missing \n    # history and the intended use is limited to when \n    # you've fetched the history necessary to perform the diff. \n    # Type: boolean\n    # Default: \"false\"\n    skip_initial_fetch: ''\n\n    # GitHub token used to fetch changed files from Github's \n    # API. \n    # Type: string\n    # Default: \"${{ github.token }}\"\n    token: ''\n\n    # Get changed files for commits whose timestamp is earlier \n    # than the given time. \n    # Type: string\n    until: ''\n\n    # Write outputs to the `output_dir` defaults to `.github/outputs` folder. \n    # NOTE: This creates a `.txt` file by default and \n    # a `.json` file if `json` is set to `true`. \n    # Type: boolean\n    # Default: \"false\"\n    write_output_files: ''\n\n```\n\n<!-- AUTO-DOC-INPUT:END -->\n\n## Useful Acronyms \ud83e\uddee\n\n|  Acronym  |   Meaning    |\n|:---------:|:------------:|\n|     A     |    Added     |\n|     C     |    Copied    |\n|     M     |   Modified   |\n|     D     |   Deleted    |\n|     R     |   Renamed    |\n|     T     | Type changed |\n|     U     |   Unmerged   |\n|     X     |   Unknown    |\n\n> \\[!IMPORTANT]\n>\n> *   When using `files_yaml*` inputs:\n>     *   it's required to prefix all outputs with the key to ensure that the correct outputs are accessible.\n>\n>         For example, if you use `test` as the key, you can access outputs like `added_files`, `any_changed`, and so on by prefixing them with the key `test_added_files` or `test_any_changed` etc.\n\n## Outputs \ud83d\udce4\n\n<!-- AUTO-DOC-OUTPUT:START - Do not remove or modify this section -->\n\n|                                                                     OUTPUT                                                                     |  TYPE  |                                                                                                                                                       DESCRIPTION                                                                                                                                                       |\n|------------------------------------------------------------------------------------------------------------------------------------------------|--------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|                                      <a name=\"output_added_files\"></a>[added\\_files](#output_added_files)                                       | string |                                                                                                                                       Returns only files that are <br>Added (A).                                                                                                                                        |\n|                             <a name=\"output_added_files_count\"></a>[added\\_files\\_count](#output_added_files_count)                              | string |                                                                                                                                           Returns the number of `added_files`                                                                                                                                           |\n|          <a name=\"output_all_changed_and_modified_files\"></a>[all\\_changed\\_and\\_modified\\_files](#output_all_changed_and_modified_files)          | string |                                                                                                                     Returns all changed and modified <br>files i.e. *a combination of (ACMRDTUX)*                                                                                                                       |\n| <a name=\"output_all_changed_and_modified_files_count\"></a>[all\\_changed\\_and\\_modified\\_files\\_count](#output_all_changed_and_modified_files_count) | string |                                                                                                                                 Returns the number of `all_changed_and_modified_files`                                                                                                                                  |\n|                             <a name=\"output_all_changed_files\"></a>[all\\_changed\\_files](#output_all_changed_files)                              | string |                                                                                                       Returns all changed files i.e. <br>*a combination of all added, copied, modified and renamed files (ACMR)*                                                                                                        |\n|                    <a name=\"output_all_changed_files_count\"></a>[all\\_changed\\_files\\_count](#output_all_changed_files_count)                     | string |                                                                                                                                        Returns the number of `all_changed_files`                                                                                                                                        |\n|                            <a name=\"output_all_modified_files\"></a>[all\\_modified\\_files](#output_all_modified_files)                            | string |                                                                                                 Returns all changed files i.e. <br>*a combination of all added, copied, modified, renamed and deleted files (ACMRD)*.                                                                                                   |\n|                   <a name=\"output_all_modified_files_count\"></a>[all\\_modified\\_files\\_count](#output_all_modified_files_count)                   | string |                                                                                                                                       Returns the number of `all_modified_files`                                                                                                                                        |\n|                 <a name=\"output_all_old_new_renamed_files\"></a>[all\\_old\\_new\\_renamed\\_files](#output_all_old_new_renamed_files)                  | string | Returns only files that are <br>Renamed and lists their old <br>and new names. **NOTE:** This <br>requires setting `include_all_old_new_renamed_files` to `true`. <br>Also, keep in mind that <br>this output is global and <br>wouldn't be nested in outputs <br>generated when the `*_yaml_*` input <br>is used. (R)  |\n|        <a name=\"output_all_old_new_renamed_files_count\"></a>[all\\_old\\_new\\_renamed\\_files\\_count](#output_all_old_new_renamed_files_count)         | string |                                                                                                                                    Returns the number of `all_old_new_renamed_files`                                                                                                                                    |\n|                                      <a name=\"output_any_changed\"></a>[any\\_changed](#output_any_changed)                                       | string |                                                     Returns `true` when any of <br>the filenames provided using the <br>`files*` or `files_ignore*` inputs has changed. i.e. <br>*includes a combination of all added, copied, modified and renamed files (ACMR)*.                                                      |\n|                                      <a name=\"output_any_deleted\"></a>[any\\_deleted](#output_any_deleted)                                       | string |                                                                                            Returns `true` when any of <br>the filenames provided using the <br>`files*` or `files_ignore*` inputs has been deleted. <br>(D)                                                                                             |\n|                                     <a name=\"output_any_modified\"></a>[any\\_modified](#output_any_modified)                                     | string |                                            Returns `true` when any of <br>the filenames provided using the <br>`files*` or `files_ignore*` inputs has been modified. <br>i.e. *includes a combination of all added, copied, modified, renamed, and deleted files (ACMRD)*.                                              |\n|                                     <a name=\"output_changed_keys\"></a>[changed\\_keys](#output_changed_keys)                                     | string |                                                                     Returns all changed YAML keys <br>when the `files_yaml` input is <br>used. i.e. *key that contains any path that has either been added, copied, modified, and renamed (ACMR)*                                                                       |\n|                                     <a name=\"output_copied_files\"></a>[copied\\_files](#output_copied_files)                                     | string |                                                                                                                                      Returns only files that are <br>Copied (C).                                                                                                                                        |\n|                            <a name=\"output_copied_files_count\"></a>[copied\\_files\\_count](#output_copied_files_count)                            | string |                                                                                                                                          Returns the number of `copied_files`                                                                                                                                           |\n|                                   <a name=\"output_deleted_files\"></a>[deleted\\_files](#output_deleted_files)                                    | string |                                                                                                                                      Returns only files that are <br>Deleted (D).                                                                                                                                       |\n|                          <a name=\"output_deleted_files_count\"></a>[deleted\\_files\\_count](#output_deleted_files_count)                           | string |                                                                                                                                          Returns the number of `deleted_files`                                                                                                                                          |\n|                                  <a name=\"output_modified_files\"></a>[modified\\_files](#output_modified_files)                                  | string |                                                                                                                                     Returns only files that are <br>Modified (M).                                                                                                                                       |\n|                         <a name=\"output_modified_files_count\"></a>[modified\\_files\\_count](#output_modified_files_count)                         | string |                                                                                                                                         Returns the number of `modified_files`                                                                                                                                          |\n|                                   <a name=\"output_modified_keys\"></a>[modified\\_keys](#output_modified_keys)                                    | string |                                                                    Returns all modified YAML keys <br>when the `files_yaml` input is <br>used. i.e. *key that contains any path that has either been added, copied, modified, and deleted (ACMRD)*                                                                      |\n|                                     <a name=\"output_only_changed\"></a>[only\\_changed](#output_only_changed)                                     | string |                                                            Returns `true` when only files <br>provided using the `files*` or `files_ignore*` inputs <br>has changed. i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.                                                             |\n|                                     <a name=\"output_only_deleted\"></a>[only\\_deleted](#output_only_deleted)                                     | string |                                                                                                   Returns `true` when only files <br>provided using the `files*` or `files_ignore*` inputs <br>has been deleted. (D)                                                                                                    |\n|                                   <a name=\"output_only_modified\"></a>[only\\_modified](#output_only_modified)                                    | string |                                                                                                Returns `true` when only files <br>provided using the `files*` or `files_ignore*` inputs <br>has been modified. (ACMRD).                                                                                                 |\n|                          <a name=\"output_other_changed_files\"></a>[other\\_changed\\_files](#output_other_changed_files)                           | string |                                                                              Returns all other changed files <br>not listed in the files <br>input i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.                                                                               |\n|                 <a name=\"output_other_changed_files_count\"></a>[other\\_changed\\_files\\_count](#output_other_changed_files_count)                  | string |                                                                                                                                       Returns the number of `other_changed_files`                                                                                                                                       |\n|                          <a name=\"output_other_deleted_files\"></a>[other\\_deleted\\_files](#output_other_deleted_files)                           | string |                                                                                                  Returns all other deleted files <br>not listed in the files <br>input i.e. *a  combination of all deleted files (D)*                                                                                                   |\n|                 <a name=\"output_other_deleted_files_count\"></a>[other\\_deleted\\_files\\_count](#output_other_deleted_files_count)                  | string |                                                                                                                                       Returns the number of `other_deleted_files`                                                                                                                                       |\n|                         <a name=\"output_other_modified_files\"></a>[other\\_modified\\_files](#output_other_modified_files)                         | string |                                                                                 Returns all other modified files <br>not listed in the files <br>input i.e. *a combination of all added, copied, modified, and deleted files (ACMRD)*                                                                                   |\n|                <a name=\"output_other_modified_files_count\"></a>[other\\_modified\\_files\\_count](#output_other_modified_files_count)                | string |                                                                                                                                      Returns the number of `other_modified_files`                                                                                                                                       |\n|                                   <a name=\"output_renamed_files\"></a>[renamed\\_files](#output_renamed_files)                                    | string |                                                                                                                                      Returns only files that are <br>Renamed (R).                                                                                                                                       |\n|                          <a name=\"output_renamed_files_count\"></a>[renamed\\_files\\_count](#output_renamed_files_count)                           | string |                                                                                                                                          Returns the number of `renamed_files`                                                                                                                                          |\n|                            <a name=\"output_type_changed_files\"></a>[type\\_changed\\_files](#output_type_changed_files)                            | string |                                                                                                                             Returns only files that have <br>their file type changed (T).                                                                                                                               |\n|                   <a name=\"output_type_changed_files_count\"></a>[type\\_changed\\_files\\_count](#output_type_changed_files_count)                   | string |                                                                                                                                       Returns the number of `type_changed_files`                                                                                                                                        |\n|                                   <a name=\"output_unknown_files\"></a>[unknown\\_files](#output_unknown_files)                                    | string |                                                                                                                                      Returns only files that are <br>Unknown (X).                                                                                                                                       |\n|                          <a name=\"output_unknown_files_count\"></a>[unknown\\_files\\_count](#output_unknown_files_count)                           | string |                                                                                                                                          Returns the number of `unknown_files`                                                                                                                                          |\n|                                  <a name=\"output_unmerged_files\"></a>[unmerged\\_files](#output_unmerged_files)                                  | string |                                                                                                                                     Returns only files that are <br>Unmerged (U).                                                                                                                                       |\n|                         <a name=\"output_unmerged_files_count\"></a>[unmerged\\_files\\_count](#output_unmerged_files_count)                         | string |                                                                                                                                         Returns the number of `unmerged_files`                                                                                                                                          |\n\n<!-- AUTO-DOC-OUTPUT:END -->\n\n## Versioning \ud83c\udff7\ufe0f\n\nThis GitHub Action follows the principles of [Semantic Versioning](https://semver.org) for versioning releases.\n\nThe format of the version string is as follows:\n\n*   major: indicates significant changes or new features that may not be backward compatible.\n\n*   minor: indicates minor changes or new features that are backward compatible.\n\n*   patch: indicates bug fixes or other small changes that are backward compatible.\n\n## Examples \ud83d\udcc4\n\n<details>\n<summary>Get all changed files in the current branch</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n...\n```\n\n</details>\n\n<details>\n<summary>Get all changed files and use a comma separator</summary>\n\n```yaml\n...\n    - name: Get all changed files and use a comma separator in the output\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        separator: \",\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary> Get all changed files and list all added files</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n\n    - name: List all added files\n      run: |\n        for file in ${{ steps.changed-files.outputs.added_files }}; do\n          echo \"$file was added\"\n        done\n...\n```\n\nSee [outputs](#outputs) for a list of all available outputs.\n\n</details>\n\n<details>\n<summary>Get all changed files and optionally run a step if a file was modified</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n\n    - name: Run a step if my-file.txt was modified\n      if: contains(steps.changed-files.outputs.modified_files, 'my-file.txt')\n      run: |\n        echo \"my-file.txt file has been modified.\"\n...\n```\n\nSee [outputs](#outputs) for a list of all available outputs.\n\n</details>\n\n<details>\n<summary>Get all changed files and write the outputs to a txt file</summary>\n\n```yaml\n...\n\n   - name: Get changed files and write the outputs to a Txt file\n     id: changed-files-write-output-files-txt\n     uses: ./\n     with:\n       write_output_files: true\n\n   - name: Verify the contents of the .github/outputs/added_files.txt file\n     run: |\n       cat .github/outputs/added_files.txt\n...\n```\n\n</details>\n\n<details>\n<summary>Get all changed files and write the outputs to a json file</summary>\n\n```yaml\n...\n   - name: Get changed files and write the outputs to a JSON file\n     id: changed-files-write-output-files-json\n     uses: ./\n     with:\n       json: true\n       write_output_files: true\n\n   - name: Verify the contents of the .github/outputs/added_files.json file\n     run: |\n       cat .github/outputs/added_files.json\n...\n```\n\n</details>\n\n<details>\n<summary>Get all changed files using a list of files</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        files: |\n          my-file.txt\n          *.sh\n          *.png\n          !*.md\n          test_directory/**\n          **/*.sql\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files using a list of files and take action based on the changes</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files-specific\n      uses: tj-actions/changed-files@v40\n      with:\n        files: |\n          my-file.txt\n          *.sh\n          *.png\n          !*.md\n          test_directory/**\n          **/*.sql\n\n    - name: Run step if any of the listed files above change\n      if: steps.changed-files-specific.outputs.any_changed == 'true'\n      run: |\n        echo \"One or more files listed above has changed.\"\n\n    - name: Run step if only the files listed above change\n      if: steps.changed-files-specific.outputs.only_changed == 'true'\n      run: |\n        echo \"Only files listed above have changed.\"\n\n    - name: Run step if any of the listed files above is deleted\n      if: steps.changed-files-specific.outputs.any_deleted == 'true'\n      run: |\n        for file in ${{ steps.changed-files-specific.outputs.deleted_files }}; do\n          echo \"$file was deleted\"\n        done\n\n    - name: Run step if all listed files above have been deleted\n      if: steps.changed-files-specific.outputs.only_deleted == 'true'\n      run: |\n        for file in ${{ steps.changed-files-specific.outputs.deleted_files }}; do\n          echo \"$file was deleted\"\n        done\n...\n```\n\nSee [outputs](#outputs) for a list of all available outputs.\n\n</details>\n\n<details>\n<summary>Get all changed files using a source file or list of file(s) to populate to files input</summary>\n\n```yaml\n...\n    - name: Get changed files using a source file or list of file(s) to populate to files input.\n      id: changed-files-specific-source-file\n      uses: tj-actions/changed-files@v40\n      with:\n        files_from_source_file: test/changed-files-list.txt\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get changed files using a source file or list of file(s) to populate to files input and optionally specify more files</summary>\n\n```yaml\n...\n    - name: Get changed files using a source file or list of file(s) to populate to files input and optionally specify more files.\n      id: changed-files-specific-source-file-and-specify-files\n      uses: tj-actions/changed-files@v40\n      with:\n        files_from_source_file: |\n          test/changed-files-list.txt\n        files: |\n          test.txt\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n\n<summary>Get all changed files using a different SHA</summary>\n\n```yaml\n...\n    - name: Get changed files using a different SHA\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        sha: ${{ github.event.pull_request.head.sha }}\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files using a different base SHA</summary>\n\n```yaml\n...\n    - name: Get changed files using a different base SHA\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        base_sha: ${{ github.event.pull_request.base.sha }}\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files between the previous tag and the current tag</summary>\n\n```yaml\n...\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v40\n\n      - name: Get changed files in the .github folder\n        id: changed-files-specific\n        uses: tj-actions/changed-files@v40\n        with:\n          base_sha: ${{ steps.get-base-sha.outputs.base_sha }}\n          files: .github/**\n\n      - name: Run step if any file(s) in the .github folder change\n        if: steps.changed-files-specific.outputs.any_changed == 'true'\n        run: |\n          echo \"One or more files in the .github folder has changed.\"\n          echo \"List all the files that have changed: ${{ steps.changed-files-specific.outputs.all_changed_files }}\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files for a repository located in a different path</summary>\n\n```yaml\n...\n    - name: Checkout into dir1\n      uses: actions/checkout@v4\n      with:\n        fetch-depth: 0\n        path: dir1\n\n    - name: Run changed-files with defaults in dir1\n      id: changed-files-for-dir1\n      uses: tj-actions/changed-files@v40\n      with:\n        path: dir1\n\n    - name: List all added files in dir1\n      run: |\n        for file in ${{ steps.changed-files-for-dir1.outputs.added_files }}; do\n          echo \"$file was added\"\n        done\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files with non-\u00e4\u0161\u0107\u012f\u00ed characters i.e (Filename in other languages)</summary>\n\n```yaml\n...\n    - name: Run changed-files with quotepath disabled\n      id: changed-files-quotepath\n      uses: tj-actions/changed-files@v40\n      with:\n        quotepath: \"false\"\n\n    - name: Run changed-files with quotepath disabled for a specified list of file(s)\n      id: changed-files-quotepath-specific\n      uses: ./\n      with:\n        files: test/test-\u00e8.txt\n        quotepath: \"false\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files using the last successful commit of the base branch</summary>\n\n<ul>\n    <li>\n        <details>\n        <summary>Push event</summary>\n\n```yaml\n...\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6\n\n      - uses: nrwl/nx-set-shas@v3\n        id: last_successful_commit_push\n        with:\n          main-branch-name: ${{ steps.branch-name.outputs.current_branch }} # Get the last successful commit for the current branch.\n          workflow-id: 'test.yml'\n\n      - name: Run changed-files with the commit of the last successful test workflow run\n        id: changed-files-base-sha-push\n        uses: tj-actions/changed-files@v40\n        with:\n          base_sha: ${{ steps.last_successful_commit_push.outputs.base }}\n...\n```\n\n</details>\n</li>\n\n<li>\n<details>\n<summary>Pull request events </summary>\n\n```yaml\n...\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v5\n\n      - uses: nrwl/nx-set-shas@v3\n        id: last_successful_commit_pull_request\n        with:\n          main-branch-name: ${{ steps.branch-name.outputs.base_ref_branch }} # Get the last successful commit on the master or main branch\n          workflow_id: 'test.yml'\n\n      - name: Run changed-files with the commit of the last successful test workflow run on the main branch\n        id: changed-files-base-sha-pull-request\n        uses: tj-actions/changed-files@v40\n        with:\n          base_sha: ${{ steps.last_successful_commit_pull_request.outputs.base }}\n...\n```\n\n</details>\n</li>\n</ul>\n\n> **Warning**\n>\n> This setting overrides the commit sha used by setting `since_last_remote_commit` to true.\n> It is recommended to use either solution that works for your use case.\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files but only return the directory names</summary>\n\n```yaml\n...\n    - name: Run changed-files with dir_names\n      id: changed-files-dir-names\n      uses: tj-actions/changed-files@v40\n      with:\n        dir_names: \"true\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files and return JSON formatted outputs</summary>\n\n```yaml\n...\n    - name: Run changed-files with JSON output\n      id: changed-files-json\n      uses: tj-actions/changed-files@v40\n      with:\n        json: \"true\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files by commits pushed in the past</summary>\n\n```yaml\n...\n    - name: Get changed-files since 2022-08-19\n      id: changed-files-since\n      uses: tj-actions/changed-files@v40\n      with:\n        since: \"2022-08-19\"\n\n    - name: Get changed-files until 2022-08-20\n      id: changed-files-until\n      uses: tj-actions/changed-files@v40\n      with:\n        until: \"2022-08-20\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n## Real-world usage \ud83c\udf10\n\n### Open source projects \ud83d\udce6\n\n*   [vitejs/vite: uses tj-actions/changed-files to automate testing](https://github.com/vitejs/vite/blob/8da04227d6f818a8ad9efc0056101968037c2e36/.github/workflows/ci.yml#L61)\n\n*   [qgis/QGIS: uses tj-actions/changed-files to automate spell checking](https://github.com/qgis/QGIS/blob/a5333497e90ac9de4ca70463d8e0b64c3f294d63/.github/workflows/code_layout.yml#L147)\n\n*   [coder/code-server: uses tj-actions/changed-files to automate detecting changes and run steps based on the outcome](https://github.com/coder/code-server/blob/c32a31d802f679846876b8ad9aacff6cf7b5361d/.github/workflows/build.yaml#L48)\n\n*   [tldr-pages/tldr: uses tj-actions/changed-files to automate detecting spelling errors](https://github.com/tldr-pages/tldr/blob/main/.github/workflows/codespell.yml#L14)\n\n*   [nodejs/docker-node: uses tj-actions/changed-files to generate matrix jobs based on changes detected](https://github.com/nodejs/docker-node/blob/3c4fa6daf06a4786d202f2f610351837806a0380/.github/workflows/build-test.yml#L29)\n\n*   [refined-github: uses tj-actions/changed-files to automate test URL validation in added/edited files](https://github.com/refined-github/refined-github/blob/b754bfe58904da8a599d7876fdaaf18302785629/.github/workflows/features.yml#L35)\n\n*   [aws-doc-sdk-examples: uses tj-actions/changed-files to automate testing](https://github.com/awsdocs/aws-doc-sdk-examples/blob/2393723ef6b0cad9502f4852f5c72f7be58ca89d/.github/workflows/javascript.yml#L22)\n\n*   [nhost: uses tj-actions/changed-files to automate testing based on changes detected](https://github.com/nhost/nhost/blob/main/.github/workflows/ci.yaml#L44-L48)\n\n*   [qmk\\_firmware uses tj-actions/changed-files to run linters](https://github.com/qmk/qmk_firmware/blob/7a737235ffd49c32d2c5561e8fe53fd96baa7f96/.github/workflows/lint.yml#L30)\n\nAnd many more...\n\n### Scalability Example \ud83d\udcc8\n\n![image](https://github.com/tj-actions/changed-files/assets/17484350/23767413-4c51-42fb-ab1c-39ef72c44904)\n\n## Important Notice \u26a0\ufe0f\n\n> \\[!IMPORTANT]\n>\n> *   Spaces in file names can introduce bugs when using bash loops. See: [#216](https://github.com/tj-actions/changed-files/issues/216)\n>     However, this action will handle spaces in file names, with a recommendation of using a separator to prevent any hidden issues.\n>\n>     ![Screen Shot 2021-10-23 at 9 37 34 AM](https://user-images.githubusercontent.com/17484350/138558767-b13c90bf-a1ae-4e86-9520-70a6a4624f41.png)\n\n## Migration guide \ud83d\udd04\n\nWith the switch from using grep's Extended regex to match files to the natively supported workflow glob pattern matching syntax introduced in [v13](https://github.com/tj-actions/changed-files/releases/tag/v13) you'll need to modify patterns used to match `files`.\n\n```diff\n...\n      - name: Get specific changed files\n        id: changed-files-specific\n        uses: tj-actions/changed-files@v24\n        with:\n          files: |\n-            \\.sh$\n-            .(sql|py)$\n-            ^(dir1|dir2)\n+            **/*.{sh,sql,py}\n+            {dir1,dir2}/**\n```\n\n*   Free software: [MIT license](LICENSE)\n\n## Credits \ud83d\udc4f\n\nThis package was created with [cookiecutter-action](https://github.com/tj-actions/cookiecutter-action).\n\n*   [tj-actions/auto-doc](https://github.com/tj-actions/auto-doc)\n*   [tj-actions/verify-changed-files](https://github.com/tj-actions/verify-changed-files)\n*   [tj-actions/demo](https://github.com/tj-actions/demo)\n*   [tj-actions/demo2](https://github.com/tj-actions/demo2)\n*   [tj-actions/demo3](https://github.com/tj-actions/demo3)\n*   [tj-actions/release-tagger](https://github.com/tj-actions/release-tagger)\n\n## Report Bugs \ud83d\udc1b\n\nReport bugs at https://github.com/tj-actions/changed-files/issues.\n\nIf you are reporting a bug, please include:\n\n*   Your operating system name and version.\n*   Any details about your workflow that might be helpful in troubleshooting. (**NOTE**: Ensure that you include full log outputs with debugging enabled)\n*   Detailed steps to reproduce the bug.\n\n## Contributors \u2728\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore-start -->\n\n<!-- markdownlint-disable -->\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars.githubusercontent.com/u/2119212?v=4?s=100\" width=\"100px;\" alt=\"Josh Soref\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=jsoref\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/monoxgas\"><img src=\"https://avatars.githubusercontent.com/u/1223016?v=4?s=100\" width=\"100px;\" alt=\"Nick Landers\"/><br /><sub><b>Nick Landers</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=monoxgas\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Kras4ooo\"><img src=\"https://avatars.githubusercontent.com/u/1948054?v=4?s=100\" width=\"100px;\" alt=\"Krasimir Nikolov\"/><br /><sub><b>Krasimir Nikolov</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=Kras4ooo\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=Kras4ooo\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/IvanPizhenko\"><img src=\"https://avatars.githubusercontent.com/u/11859904?v=4?s=100\" width=\"100px;\" alt=\"Ivan Pizhenko\"/><br /><sub><b>Ivan Pizhenko</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=IvanPizhenko\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=IvanPizhenko\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/talva-tr\"><img src=\"https://avatars.githubusercontent.com/u/82046981?v=4?s=100\" width=\"100px;\" alt=\"talva-tr\"/><br /><sub><b>talva-tr</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=talva-tr\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bandism.net/\"><img src=\"https://avatars.githubusercontent.com/u/22633385?v=4?s=100\" width=\"100px;\" alt=\"Ikko Ashimine\"/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=eltociear\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zamiell\"><img src=\"https://avatars.githubusercontent.com/u/5511220?v=4?s=100\" width=\"100px;\" alt=\"James\"/><br /><sub><b>James</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=Zamiell\" title=\"Documentation\">\ud83d\udcd6</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/wushujames\"><img src=\"https://avatars.githubusercontent.com/u/677529?v=4?s=100\" width=\"100px;\" alt=\"James Cheng\"/><br /><sub><b>James Cheng</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=wushujames\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://qiita.com/SUZUKI_Masaya\"><img src=\"https://avatars.githubusercontent.com/u/15100604?v=4?s=100\" width=\"100px;\" alt=\"Masaya Suzuki\"/><br /><sub><b>Masaya Suzuki</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=massongit\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fagai.net\"><img src=\"https://avatars.githubusercontent.com/u/1772112?v=4?s=100\" width=\"100px;\" alt=\"fagai\"/><br /><sub><b>fagai</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=fagai\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/pkit\"><img src=\"https://avatars.githubusercontent.com/u/805654?v=4?s=100\" width=\"100px;\" alt=\"Constantine Peresypkin\"/><br /><sub><b>Constantine Peresypkin</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=pkit\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/deronnax\"><img src=\"https://avatars.githubusercontent.com/u/439279?v=4?s=100\" width=\"100px;\" alt=\"Mathieu Dupuy\"/><br /><sub><b>Mathieu Dupuy</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=deronnax\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JoeOvo\"><img src=\"https://avatars.githubusercontent.com/u/100686542?v=4?s=100\" width=\"100px;\" alt=\"Joe Moggridge\"/><br /><sub><b>Joe Moggridge</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=JoeOvo\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.credly.com/users/thyarles/badges\"><img src=\"https://avatars.githubusercontent.com/u/1340046?v=4?s=100\" width=\"100px;\" alt=\"Charles Santos\"/><br /><sub><b>Charles Santos</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=thyarles\" title=\"Code\">\ud83d\udcbb</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kostiantyn-korniienko-aurea\"><img src=\"https://avatars.githubusercontent.com/u/37180625?v=4?s=100\" width=\"100px;\" alt=\"Kostiantyn Korniienko\"/><br /><sub><b>Kostiantyn Korniienko</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=kostiantyn-korniienko-aurea\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lpulley\"><img src=\"https://avatars.githubusercontent.com/u/7193187?v=4?s=100\" width=\"100px;\" alt=\"Logan Pulley\"/><br /><sub><b>Logan Pulley</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=lpulley\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/kenji-miyake/\"><img src=\"https://avatars.githubusercontent.com/u/31987104?v=4?s=100\" width=\"100px;\" alt=\"Kenji Miyake\"/><br /><sub><b>Kenji Miyake</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=kenji-miyake\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/adonisgarciac\"><img src=\"https://avatars.githubusercontent.com/u/71078987?v=4?s=100\" width=\"100px;\" alt=\"adonisgarciac\"/><br /><sub><b>adonisgarciac</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=adonisgarciac\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=adonisgarciac\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cfernhout\"><img src=\"https://avatars.githubusercontent.com/u/22294606?v=4?s=100\" width=\"100px;\" alt=\"Chiel Fernhout\"/><br /><sub><b>Chiel Fernhout</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=cfernhout\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/albertoperdomo2\"><img src=\"https://avatars.githubusercontent.com/u/62241095?v=4?s=100\" width=\"100px;\" alt=\"Alberto Perdomo\"/><br /><sub><b>Alberto Perdomo</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=albertoperdomo2\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://arthurvolant.com\"><img src=\"https://avatars.githubusercontent.com/u/37664438?v=4?s=100\" width=\"100px;\" alt=\"Arthur\"/><br /><sub><b>Arthur</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/issues?q=author%3AV0lantis\" title=\"Bug reports\">\ud83d\udc1b</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=V0lantis\" title=\"Code\">\ud83d\udcbb</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rodrigorfk\"><img src=\"https://avatars.githubusercontent.com/u/1995033?v=4?s=100\" width=\"100px;\" alt=\"Rodrigo Fior Kuntzer\"/><br /><sub><b>Rodrigo Fior Kuntzer</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=rodrigorfk\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=rodrigorfk\" title=\"Tests\">\u26a0\ufe0f</a> <a href=\"https://github.com/tj-actions/changed-files/issues?q=author%3Arodrigorfk\" title=\"Bug reports\">\ud83d\udc1b</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n", "name: Changed Files\ndescription: Get all Added, Copied, Modified, Deleted, Renamed, Type changed, Unmerged, and Unknown files.\nauthor: tj-actions\n\ninputs:\n  separator:\n    description: \"Split character for output strings.\"\n    required: false\n    default: \" \"\n  include_all_old_new_renamed_files:\n    description: \"Include `all_old_new_renamed_files` output. Note this can generate a large output See: #501.\"\n    required: false\n    default: \"false\"\n  old_new_separator:\n    description: \"Split character for old and new filename pairs.\"\n    required: false\n    default: \",\"\n  old_new_files_separator:\n    description: \"Split character for old and new renamed filename pairs.\"\n    required: false\n    default: \" \"\n  files_from_source_file:\n    description: \"Source file(s) used to populate the `files` input.\"\n    required: false\n    default: \"\"\n  files_from_source_file_separator:\n    description: \"Separator used to split the `files_from_source_file` input.\"\n    default: \"\\n\"\n    required: false\n  files:\n    description: |\n      File and directory patterns used to detect changes (Defaults to the entire repo if unset).\n      NOTE: Multiline file/directory patterns should not include quotes.\n    required: false\n    default: \"\"\n  files_separator:\n    description: \"Separator used to split the `files` input\"\n    default: \"\\n\"\n    required: false\n  files_yaml:\n    description: \"YAML used to define a set of file patterns to detect changes\"\n    required: false\n    default: \"\"\n  files_yaml_from_source_file:\n    description: \"Source file(s) used to populate the `files_yaml` input. Example: https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml\"\n    required: false\n    default: \"\"\n  files_yaml_from_source_file_separator:\n    description: 'Separator used to split the `files_yaml_from_source_file` input'\n    default: \"\\n\"\n    required: false\n  files_ignore_yaml:\n    description: \"YAML used to define a set of file patterns to ignore changes\"\n    required: false\n    default: \"\"\n  files_ignore_yaml_from_source_file:\n    description: \"Source file(s) used to populate the `files_ignore_yaml` input. Example: https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml\"\n    required: false\n    default: \"\"\n  files_ignore_yaml_from_source_file_separator:\n    description: 'Separator used to split the `files_ignore_yaml_from_source_file` input'\n    default: \"\\n\"\n    required: false\n  files_ignore:\n    description: \"Ignore changes to these file(s). NOTE: Multiline file/directory patterns should not include quotes.\"\n    required: false\n    default: \"\"\n  files_ignore_separator:\n    description: \"Separator used to split the `files_ignore` input\"\n    default: \"\\n\"\n    required: false\n  files_ignore_from_source_file:\n    description: \"Source file(s) used to populate the `files_ignore` input\"\n    required: false\n    default: \"\"\n  files_ignore_from_source_file_separator:\n    description: 'Separator used to split the `files_ignore_from_source_file` input'\n    default: \"\\n\"\n    required: false\n  sha:\n    description: \"Specify a different commit SHA or branch used for comparing changes\"\n    required: false\n  base_sha:\n    description: \"Specify a different base commit SHA or branch used for comparing changes\"\n    required: false\n  since:\n    description: \"Get changed files for commits whose timestamp is older than the given time.\"\n    required: false\n    default: \"\"\n  until:\n    description: \"Get changed files for commits whose timestamp is earlier than the given time.\"\n    required: false\n    default: \"\"\n  path:\n    description: \"Specify a relative path under `$GITHUB_WORKSPACE` to locate the repository.\"\n    required: false\n    default: \".\"\n  quotepath:\n    description: \"Use non-ASCII characters to match files and output the filenames completely verbatim by setting this to `false`\"\n    default: \"true\"\n    required: false\n  diff_relative:\n    description: \"Exclude changes outside the current directory and show path names relative to it. NOTE: This requires you to specify the top-level directory via the `path` input.\"\n    required: false\n    default: \"true\"\n  dir_names:\n    default: \"false\"\n    description: \"Output unique changed directories instead of filenames. NOTE: This returns `.` for changed files located in the current working directory which defaults to `$GITHUB_WORKSPACE`.\"\n    required: false\n  dir_names_max_depth:\n    description: \"Limit the directory output to a maximum depth e.g `test/test1/test2` with max depth of `2` returns `test/test1`.\"\n    required: false\n  dir_names_exclude_current_dir:\n    description: \"Exclude the current directory represented by `.` from the output when `dir_names` is set to `true`.\"\n    required: false\n    default: \"false\"\n  dir_names_include_files:\n    description: \"File and directory patterns to include in the output when `dir_names` is set to `true`. NOTE: This returns only the matching files and also the directory names.\"\n    required: false\n    default: \"\"\n  dir_names_include_files_separator:\n    description: \"Separator used to split the `dir_names_include_files` input\"\n    default: \"\\n\"\n    required: false\n  dir_names_deleted_files_include_only_deleted_dirs:\n    description: \"Include only directories that have been deleted as opposed to directory names of files that have been deleted in the `deleted_files` output when `dir_names` is set to `true`.\"\n    required: false\n    default: \"false\"\n  json:\n    description: \"Output list of changed files in a JSON formatted string which can be used for matrix jobs. Example: https://github.com/tj-actions/changed-files/blob/main/.github/workflows/matrix-test.yml\"\n    required: false\n    default: \"false\"\n  escape_json:\n    description: \"Escape JSON output.\"\n    required: false\n    default: \"true\"\n  fetch_depth:\n    description: \"Depth of additional branch history fetched. NOTE: This can be adjusted to resolve errors with insufficient history.\"\n    required: false\n    default: \"50\"\n  skip_initial_fetch:\n    description: |\n      Skip the initial fetch to improve performance for shallow repositories. \n      NOTE: This could lead to errors with missing history and the intended use is limited to when you've fetched the history necessary to perform the diff.\n    required: false\n    default: \"false\"\n  fetch_additional_submodule_history:\n    description: \"Fetch additional history for submodules.\"\n    required: false\n    default: \"false\"\n  since_last_remote_commit:\n    description: \"Use the last commit on the remote branch as the `base_sha`. Defaults to the last non-merge commit on the target branch for pull request events and the previous remote commit of the current branch for push events.\"\n    required: false\n    default: \"false\"\n  write_output_files:\n    description: \"Write outputs to the `output_dir` defaults to `.github/outputs` folder. NOTE: This creates a `.txt` file by default and a `.json` file if `json` is set to `true`.\"\n    required: false\n    default: \"false\"\n  output_dir:\n    description: \"Directory to store output files.\"\n    required: false\n    default: \".github/outputs\"\n  output_renamed_files_as_deleted_and_added:\n    description: \"Output renamed files as deleted and added files.\"\n    required: false\n    default: \"false\"\n  recover_deleted_files:\n    description: \"Recover deleted files.\"\n    required: false\n    default: \"false\"\n  recover_deleted_files_to_destination:\n    description: \"Recover deleted files to a new destination directory, defaults to the original location.\"\n    required: false\n    default: \"\"\n  recover_files:\n    description: |\n      File and directory patterns used to recover deleted files,\n      defaults to the patterns provided via the `files`, `files_from_source_file`, `files_ignore` and `files_ignore_from_source_file` inputs \n      or all deleted files if no patterns are provided.\n    required: false\n    default: \"\"\n  recover_files_separator:\n    description: \"Separator used to split the `recover_files` input\"\n    default: \"\\n\"\n    required: false\n  recover_files_ignore:\n    description: \"File and directory patterns to ignore when recovering deleted files.\"\n    required: false\n    default: \"\"\n  recover_files_ignore_separator:\n    description: \"Separator used to split the `recover_files_ignore` input\"\n    default: \"\\n\"\n    required: false\n  token:\n    description: \"GitHub token used to fetch changed files from Github's API.\"\n    required: false\n    default: ${{ github.token }}\n  api_url:\n    description: \"Github API URL.\"\n    required: false\n    default: ${{ github.api_url }}\n  fail_on_initial_diff_error:\n    description: \"Fail when the initial diff fails.\"\n    required: false\n    default: \"false\"\n  fail_on_submodule_diff_error:\n    description: \"Fail when the submodule diff fails.\"\n    required: false\n    default: \"false\"\n  negation_patterns_first:\n    description: \"Apply the negation patterns first. NOTE: This affects how changed files are matched.\"\n    required: false\n    default: \"false\"\n\noutputs:\n  added_files:\n    description: \"Returns only files that are Added (A).\"\n  added_files_count:\n    description: \"Returns the number of `added_files`\"\n  copied_files:\n    description: \"Returns only files that are Copied (C).\"\n  copied_files_count:\n    description: \"Returns the number of `copied_files`\"\n  deleted_files:\n    description: \"Returns only files that are Deleted (D).\"\n  deleted_files_count:\n    description: \"Returns the number of `deleted_files`\"\n  modified_files:\n    description: \"Returns only files that are Modified (M).\"\n  modified_files_count:\n    description: \"Returns the number of `modified_files`\"\n  renamed_files:\n    description: \"Returns only files that are Renamed (R).\"\n  renamed_files_count:\n    description: \"Returns the number of `renamed_files`\"\n  all_old_new_renamed_files:\n    description:   \"Returns only files that are Renamed and lists their old and new names. **NOTE:** This requires setting `include_all_old_new_renamed_files` to `true`. Also, keep in mind that this output is global and wouldn't be nested in outputs generated when the `*_yaml_*` input is used. (R)\"\n  all_old_new_renamed_files_count:\n    description:   \"Returns the number of `all_old_new_renamed_files`\"\n  type_changed_files:\n    description: \"Returns only files that have their file type changed (T).\"\n  type_changed_files_count:\n    description: \"Returns the number of `type_changed_files`\"\n  unmerged_files:\n    description: \"Returns only files that are Unmerged (U).\"\n  unmerged_files_count:\n    description: \"Returns the number of `unmerged_files`\"\n  unknown_files:\n    description: \"Returns only files that are Unknown (X).\"\n  unknown_files_count:\n    description: \"Returns the number of `unknown_files`\"\n  all_changed_and_modified_files:\n    description: \"Returns all changed and modified files i.e. *a combination of (ACMRDTUX)*\"\n  all_changed_and_modified_files_count:\n    description: \"Returns the number of `all_changed_and_modified_files`\"\n  all_changed_files:\n    description: \"Returns all changed files i.e. *a combination of all added, copied, modified and renamed files (ACMR)*\"\n  all_changed_files_count:\n    description: \"Returns the number of `all_changed_files`\"\n  any_changed:\n    description: \"Returns `true` when any of the filenames provided using the `files*` or `files_ignore*` inputs has changed. i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.\"\n  only_changed:\n    description: \"Returns `true` when only files provided using the `files*` or `files_ignore*` inputs has changed. i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.\"\n  other_changed_files:\n    description: \"Returns all other changed files not listed in the files input i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.\"\n  other_changed_files_count:\n    description: \"Returns the number of `other_changed_files`\"\n  all_modified_files:\n    description: \"Returns all changed files i.e. *a combination of all added, copied, modified, renamed and deleted files (ACMRD)*.\"\n  all_modified_files_count:\n    description: \"Returns the number of `all_modified_files`\"\n  any_modified:\n    description: \"Returns `true` when any of the filenames provided using the `files*` or `files_ignore*` inputs has been modified. i.e. *includes a combination of all added, copied, modified, renamed, and deleted files (ACMRD)*.\"\n  only_modified:\n    description: \"Returns `true` when only files provided using the `files*` or `files_ignore*` inputs has been modified. (ACMRD).\"\n  other_modified_files:\n    description: \"Returns all other modified files not listed in the files input i.e. *a combination of all added, copied, modified, and deleted files (ACMRD)*\"\n  other_modified_files_count:\n    description: \"Returns the number of `other_modified_files`\"\n  any_deleted:\n    description: \"Returns `true` when any of the filenames provided using the `files*` or `files_ignore*` inputs has been deleted. (D)\"\n  only_deleted:\n    description: \"Returns `true` when only files provided using the `files*` or `files_ignore*` inputs has been deleted. (D)\"\n  other_deleted_files:\n    description: \"Returns all other deleted files not listed in the files input i.e. *a  combination of all deleted files (D)*\"\n  other_deleted_files_count:\n    description: \"Returns the number of `other_deleted_files`\"\n  modified_keys:\n    description: \"Returns all modified YAML keys when the `files_yaml` input is used. i.e. *key that contains any path that has either been added, copied, modified, and deleted (ACMRD)*\"\n  changed_keys:\n    description: \"Returns all changed YAML keys when the `files_yaml` input is used. i.e. *key that contains any path that has either been added, copied, modified, and renamed (ACMR)*\"\n\nruns:\n  using: 'node20'\n  main: 'dist/index.js'\n\nbranding:\n  icon: file-text\n  color: white\n", "import * as core from '@actions/core'\nimport path from 'path'\nimport {\n  ChangedFiles,\n  ChangeTypeEnum,\n  getAllChangeTypeFiles,\n  getChangeTypeFiles\n} from './changedFiles'\nimport {Inputs} from './inputs'\nimport {getOutputKey, setArrayOutput, setOutput, exists} from './utils'\n\nconst getArrayFromPaths = (\n  paths: string | string[],\n  inputs: Inputs\n): string[] => {\n  return Array.isArray(paths) ? paths : paths.split(inputs.separator)\n}\n\nexport const setOutputsAndGetModifiedAndChangedFilesStatus = async ({\n  allDiffFiles,\n  allFilteredDiffFiles,\n  inputs,\n  filePatterns = [],\n  outputPrefix = '',\n  workingDirectory\n}: {\n  allDiffFiles: ChangedFiles\n  allFilteredDiffFiles: ChangedFiles\n  inputs: Inputs\n  filePatterns?: string[]\n  outputPrefix?: string\n  workingDirectory?: string\n}): Promise<{anyModified: boolean; anyChanged: boolean}> => {\n  const addedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Added]\n  })\n  core.debug(`Added files: ${JSON.stringify(addedFiles)}`)\n  await setOutput({\n    key: getOutputKey('added_files', outputPrefix),\n    value: addedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n  await setOutput({\n    key: getOutputKey('added_files_count', outputPrefix),\n    value: addedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const copiedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Copied]\n  })\n  core.debug(`Copied files: ${JSON.stringify(copiedFiles)}`)\n  await setOutput({\n    key: getOutputKey('copied_files', outputPrefix),\n    value: copiedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('copied_files_count', outputPrefix),\n    value: copiedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const modifiedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Modified]\n  })\n  core.debug(`Modified files: ${JSON.stringify(modifiedFiles)}`)\n  await setOutput({\n    key: getOutputKey('modified_files', outputPrefix),\n    value: modifiedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('modified_files_count', outputPrefix),\n    value: modifiedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const renamedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Renamed]\n  })\n  core.debug(`Renamed files: ${JSON.stringify(renamedFiles)}`)\n  await setOutput({\n    key: getOutputKey('renamed_files', outputPrefix),\n    value: renamedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('renamed_files_count', outputPrefix),\n    value: renamedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const typeChangedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.TypeChanged]\n  })\n  core.debug(`Type changed files: ${JSON.stringify(typeChangedFiles)}`)\n  await setOutput({\n    key: getOutputKey('type_changed_files', outputPrefix),\n    value: typeChangedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('type_changed_files_count', outputPrefix),\n    value: typeChangedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const unmergedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Unmerged]\n  })\n  core.debug(`Unmerged files: ${JSON.stringify(unmergedFiles)}`)\n  await setOutput({\n    key: getOutputKey('unmerged_files', outputPrefix),\n    value: unmergedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('unmerged_files_count', outputPrefix),\n    value: unmergedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const unknownFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Unknown]\n  })\n  core.debug(`Unknown files: ${JSON.stringify(unknownFiles)}`)\n  await setOutput({\n    key: getOutputKey('unknown_files', outputPrefix),\n    value: unknownFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('unknown_files_count', outputPrefix),\n    value: unknownFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const allChangedAndModifiedFiles = await getAllChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles\n  })\n  core.debug(\n    `All changed and modified files: ${JSON.stringify(\n      allChangedAndModifiedFiles\n    )}`\n  )\n  await setOutput({\n    key: getOutputKey('all_changed_and_modified_files', outputPrefix),\n    value: allChangedAndModifiedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('all_changed_and_modified_files_count', outputPrefix),\n    value: allChangedAndModifiedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const allChangedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [\n      ChangeTypeEnum.Added,\n      ChangeTypeEnum.Copied,\n      ChangeTypeEnum.Modified,\n      ChangeTypeEnum.Renamed\n    ]\n  })\n  core.debug(`All changed files: ${JSON.stringify(allChangedFiles)}`)\n  await setOutput({\n    key: getOutputKey('all_changed_files', outputPrefix),\n    value: allChangedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('all_changed_files_count', outputPrefix),\n    value: allChangedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  await setOutput({\n    key: getOutputKey('any_changed', outputPrefix),\n    value: allChangedFiles.paths.length > 0 && filePatterns.length > 0,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  const allOtherChangedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allDiffFiles,\n    changeTypes: [\n      ChangeTypeEnum.Added,\n      ChangeTypeEnum.Copied,\n      ChangeTypeEnum.Modified,\n      ChangeTypeEnum.Renamed\n    ]\n  })\n  core.debug(`All other changed files: ${JSON.stringify(allOtherChangedFiles)}`)\n\n  const allOtherChangedFilesPaths: string[] = getArrayFromPaths(\n    allOtherChangedFiles.paths,\n    inputs\n  )\n  const allChangedFilesPaths: string[] = getArrayFromPaths(\n    allChangedFiles.paths,\n    inputs\n  )\n\n  const otherChangedFiles = allOtherChangedFilesPaths.filter(\n    (filePath: string) => !allChangedFilesPaths.includes(filePath)\n  )\n\n  const onlyChanged =\n    otherChangedFiles.length === 0 &&\n    allChangedFiles.paths.length > 0 &&\n    filePatterns.length > 0\n\n  await setOutput({\n    key: getOutputKey('only_changed', outputPrefix),\n    value: onlyChanged,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  await setArrayOutput({\n    key: 'other_changed_files',\n    inputs,\n    value: otherChangedFiles,\n    outputPrefix\n  })\n\n  await setOutput({\n    key: getOutputKey('other_changed_files_count', outputPrefix),\n    value: otherChangedFiles.length.toString(),\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const allModifiedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [\n      ChangeTypeEnum.Added,\n      ChangeTypeEnum.Copied,\n      ChangeTypeEnum.Modified,\n      ChangeTypeEnum.Renamed,\n      ChangeTypeEnum.Deleted\n    ]\n  })\n  core.debug(`All modified files: ${JSON.stringify(allModifiedFiles)}`)\n  await setOutput({\n    key: getOutputKey('all_modified_files', outputPrefix),\n    value: allModifiedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('all_modified_files_count', outputPrefix),\n    value: allModifiedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  await setOutput({\n    key: getOutputKey('any_modified', outputPrefix),\n    value: allModifiedFiles.paths.length > 0 && filePatterns.length > 0,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  const allOtherModifiedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allDiffFiles,\n    changeTypes: [\n      ChangeTypeEnum.Added,\n      ChangeTypeEnum.Copied,\n      ChangeTypeEnum.Modified,\n      ChangeTypeEnum.Renamed,\n      ChangeTypeEnum.Deleted\n    ]\n  })\n\n  const allOtherModifiedFilesPaths: string[] = getArrayFromPaths(\n    allOtherModifiedFiles.paths,\n    inputs\n  )\n\n  const allModifiedFilesPaths: string[] = getArrayFromPaths(\n    allModifiedFiles.paths,\n    inputs\n  )\n\n  const otherModifiedFiles = allOtherModifiedFilesPaths.filter(\n    (filePath: string) => !allModifiedFilesPaths.includes(filePath)\n  )\n\n  const onlyModified =\n    otherModifiedFiles.length === 0 &&\n    allModifiedFiles.paths.length > 0 &&\n    filePatterns.length > 0\n\n  await setOutput({\n    key: getOutputKey('only_modified', outputPrefix),\n    value: onlyModified,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  await setArrayOutput({\n    key: 'other_modified_files',\n    inputs,\n    value: otherModifiedFiles,\n    outputPrefix\n  })\n\n  await setOutput({\n    key: getOutputKey('other_modified_files_count', outputPrefix),\n    value: otherModifiedFiles.length.toString(),\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const deletedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Deleted]\n  })\n  core.debug(`Deleted files: ${JSON.stringify(deletedFiles)}`)\n\n  if (\n    inputs.dirNamesDeletedFilesIncludeOnlyDeletedDirs &&\n    inputs.dirNames &&\n    workingDirectory\n  ) {\n    const newDeletedFilesPaths: string[] = []\n    for (const deletedPath of getArrayFromPaths(deletedFiles.paths, inputs)) {\n      const dirPath = path.join(workingDirectory, deletedPath)\n      core.debug(`Checking if directory exists: ${dirPath}`)\n      if (!(await exists(dirPath))) {\n        core.debug(`Directory not found: ${dirPath}`)\n        newDeletedFilesPaths.push(deletedPath)\n      }\n    }\n    deletedFiles.paths = inputs.json\n      ? newDeletedFilesPaths\n      : newDeletedFilesPaths.join(inputs.separator)\n    deletedFiles.count = newDeletedFilesPaths.length.toString()\n    core.debug(`New deleted files: ${JSON.stringify(deletedFiles)}`)\n  }\n\n  await setOutput({\n    key: getOutputKey('deleted_files', outputPrefix),\n    value: deletedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n\n  await setOutput({\n    key: getOutputKey('deleted_files_count', outputPrefix),\n    value: deletedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  await setOutput({\n    key: getOutputKey('any_deleted', outputPrefix),\n    value: deletedFiles.paths.length > 0 && filePatterns.length > 0,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  const allOtherDeletedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allDiffFiles,\n    changeTypes: [ChangeTypeEnum.Deleted]\n  })\n\n  const allOtherDeletedFilesPaths: string[] = getArrayFromPaths(\n    allOtherDeletedFiles.paths,\n    inputs\n  )\n\n  const deletedFilesPaths: string[] = getArrayFromPaths(\n    deletedFiles.paths,\n    inputs\n  )\n\n  const otherDeletedFiles = allOtherDeletedFilesPaths.filter(\n    filePath => !deletedFilesPaths.includes(filePath)\n  )\n\n  const onlyDeleted =\n    otherDeletedFiles.length === 0 &&\n    deletedFiles.paths.length > 0 &&\n    filePatterns.length > 0\n\n  await setOutput({\n    key: getOutputKey('only_deleted', outputPrefix),\n    value: onlyDeleted,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  await setArrayOutput({\n    key: 'other_deleted_files',\n    inputs,\n    value: otherDeletedFiles,\n    outputPrefix\n  })\n\n  await setOutput({\n    key: getOutputKey('other_deleted_files_count', outputPrefix),\n    value: otherDeletedFiles.length.toString(),\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  return {\n    anyModified: allModifiedFiles.paths.length > 0 && filePatterns.length > 0,\n    anyChanged: allChangedFiles.paths.length > 0 && filePatterns.length > 0\n  }\n}\n", "import * as core from '@actions/core'\n\nexport type Inputs = {\n  files: string\n  filesSeparator: string\n  filesFromSourceFile: string\n  filesFromSourceFileSeparator: string\n  filesYaml: string\n  filesYamlFromSourceFile: string\n  filesYamlFromSourceFileSeparator: string\n  filesIgnore: string\n  filesIgnoreSeparator: string\n  filesIgnoreFromSourceFile: string\n  filesIgnoreFromSourceFileSeparator: string\n  filesIgnoreYaml: string\n  filesIgnoreYamlFromSourceFile: string\n  filesIgnoreYamlFromSourceFileSeparator: string\n  separator: string\n  includeAllOldNewRenamedFiles: boolean\n  oldNewSeparator: string\n  oldNewFilesSeparator: string\n  sha: string\n  baseSha: string\n  since: string\n  until: string\n  path: string\n  quotePath: boolean\n  diffRelative: boolean\n  dirNames: boolean\n  dirNamesMaxDepth?: number\n  dirNamesExcludeCurrentDir: boolean\n  dirNamesIncludeFiles: string\n  dirNamesIncludeFilesSeparator: string\n  dirNamesDeletedFilesIncludeOnlyDeletedDirs: boolean\n  json: boolean\n  escapeJson: boolean\n  fetchDepth?: number\n  fetchSubmoduleHistory: boolean\n  sinceLastRemoteCommit: boolean\n  writeOutputFiles: boolean\n  outputDir: string\n  outputRenamedFilesAsDeletedAndAdded: boolean\n  recoverDeletedFiles: boolean\n  recoverDeletedFilesToDestination: string\n  recoverFiles: string\n  recoverFilesSeparator: string\n  recoverFilesIgnore: string\n  recoverFilesIgnoreSeparator: string\n  token: string\n  apiUrl: string\n  skipInitialFetch: boolean\n  failOnInitialDiffError: boolean\n  failOnSubmoduleDiffError: boolean\n  negationPatternsFirst: boolean\n}\n\nexport const getInputs = (): Inputs => {\n  const files = core.getInput('files', {required: false})\n  const filesSeparator = core.getInput('files_separator', {\n    required: false,\n    trimWhitespace: false\n  })\n  const filesIgnore = core.getInput('files_ignore', {required: false})\n  const filesIgnoreSeparator = core.getInput('files_ignore_separator', {\n    required: false,\n    trimWhitespace: false\n  })\n  const filesFromSourceFile = core.getInput('files_from_source_file', {\n    required: false\n  })\n  const filesFromSourceFileSeparator = core.getInput(\n    'files_from_source_file_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const filesYaml = core.getInput('files_yaml', {required: false})\n  const filesYamlFromSourceFile = core.getInput('files_yaml_from_source_file', {\n    required: false\n  })\n  const filesYamlFromSourceFileSeparator = core.getInput(\n    'files_yaml_from_source_file_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const filesIgnoreFromSourceFile = core.getInput(\n    'files_ignore_from_source_file',\n    {required: false}\n  )\n  const filesIgnoreFromSourceFileSeparator = core.getInput(\n    'files_ignore_from_source_file_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const filesIgnoreYaml = core.getInput('files_ignore_yaml', {required: false})\n  const filesIgnoreYamlFromSourceFile = core.getInput(\n    'files_ignore_yaml_from_source_file',\n    {required: false}\n  )\n  const filesIgnoreYamlFromSourceFileSeparator = core.getInput(\n    'files_ignore_yaml_from_source_file_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const separator = core.getInput('separator', {\n    required: true,\n    trimWhitespace: false\n  })\n  const includeAllOldNewRenamedFiles = core.getBooleanInput(\n    'include_all_old_new_renamed_files',\n    {required: false}\n  )\n  const oldNewSeparator = core.getInput('old_new_separator', {\n    required: true,\n    trimWhitespace: false\n  })\n  const oldNewFilesSeparator = core.getInput('old_new_files_separator', {\n    required: true,\n    trimWhitespace: false\n  })\n  const sha = core.getInput('sha', {required: false})\n  const baseSha = core.getInput('base_sha', {required: false})\n  const since = core.getInput('since', {required: false})\n  const until = core.getInput('until', {required: false})\n  const path = core.getInput('path', {required: false})\n  const quotePath = core.getBooleanInput('quotepath', {required: false})\n  const diffRelative = core.getBooleanInput('diff_relative', {required: false})\n  const dirNames = core.getBooleanInput('dir_names', {required: false})\n  const dirNamesMaxDepth = core.getInput('dir_names_max_depth', {\n    required: false\n  })\n  const dirNamesExcludeCurrentDir = core.getBooleanInput(\n    'dir_names_exclude_current_dir',\n    {\n      required: false\n    }\n  )\n  const dirNamesIncludeFiles = core.getInput('dir_names_include_files', {\n    required: false\n  })\n  const dirNamesIncludeFilesSeparator = core.getInput(\n    'dir_names_include_files_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const json = core.getBooleanInput('json', {required: false})\n  const escapeJson = core.getBooleanInput('escape_json', {required: false})\n  const fetchDepth = core.getInput('fetch_depth', {required: false})\n  const sinceLastRemoteCommit = core.getBooleanInput(\n    'since_last_remote_commit',\n    {required: false}\n  )\n  const writeOutputFiles = core.getBooleanInput('write_output_files', {\n    required: false\n  })\n  const outputDir = core.getInput('output_dir', {required: false})\n  const outputRenamedFilesAsDeletedAndAdded = core.getBooleanInput(\n    'output_renamed_files_as_deleted_and_added',\n    {required: false}\n  )\n  const recoverDeletedFiles = core.getBooleanInput('recover_deleted_files', {\n    required: false\n  })\n  const recoverDeletedFilesToDestination = core.getInput(\n    'recover_deleted_files_to_destination',\n    {required: false}\n  )\n  const recoverFiles = core.getInput('recover_files', {required: false})\n  const recoverFilesSeparator = core.getInput('recover_files_separator', {\n    required: false,\n    trimWhitespace: false\n  })\n  const recoverFilesIgnore = core.getInput('recover_files_ignore', {\n    required: false\n  })\n  const recoverFilesIgnoreSeparator = core.getInput(\n    'recover_files_ignore_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const token = core.getInput('token', {required: false})\n  const apiUrl = core.getInput('api_url', {required: false})\n  const skipInitialFetch = core.getBooleanInput('skip_initial_fetch', {\n    required: false\n  })\n  const fetchSubmoduleHistory = core.getBooleanInput(\n    'fetch_additional_submodule_history',\n    {\n      required: false\n    }\n  )\n  const failOnInitialDiffError = core.getBooleanInput(\n    'fail_on_initial_diff_error',\n    {\n      required: false\n    }\n  )\n  const failOnSubmoduleDiffError = core.getBooleanInput(\n    'fail_on_submodule_diff_error',\n    {\n      required: false\n    }\n  )\n  const dirNamesDeletedFilesIncludeOnlyDeletedDirs = core.getBooleanInput(\n    'dir_names_deleted_files_include_only_deleted_dirs',\n    {\n      required: false\n    }\n  )\n\n  const negationPatternsFirst = core.getBooleanInput(\n    'negation_patterns_first',\n    {\n      required: false\n    }\n  )\n\n  const inputs: Inputs = {\n    files,\n    filesSeparator,\n    filesFromSourceFile,\n    filesFromSourceFileSeparator,\n    filesYaml,\n    filesYamlFromSourceFile,\n    filesYamlFromSourceFileSeparator,\n    filesIgnore,\n    filesIgnoreSeparator,\n    filesIgnoreFromSourceFile,\n    filesIgnoreFromSourceFileSeparator,\n    filesIgnoreYaml,\n    filesIgnoreYamlFromSourceFile,\n    filesIgnoreYamlFromSourceFileSeparator,\n    failOnInitialDiffError,\n    failOnSubmoduleDiffError,\n    separator,\n    // Not Supported via REST API\n    sha,\n    baseSha,\n    since,\n    until,\n    path,\n    quotePath,\n    diffRelative,\n    sinceLastRemoteCommit,\n    recoverDeletedFiles,\n    recoverDeletedFilesToDestination,\n    recoverFiles,\n    recoverFilesSeparator,\n    recoverFilesIgnore,\n    recoverFilesIgnoreSeparator,\n    includeAllOldNewRenamedFiles,\n    oldNewSeparator,\n    oldNewFilesSeparator,\n    skipInitialFetch,\n    fetchSubmoduleHistory,\n    dirNamesDeletedFilesIncludeOnlyDeletedDirs,\n    // End Not Supported via REST API\n    dirNames,\n    dirNamesExcludeCurrentDir,\n    dirNamesIncludeFiles,\n    dirNamesIncludeFilesSeparator,\n    json,\n    escapeJson,\n    writeOutputFiles,\n    outputDir,\n    outputRenamedFilesAsDeletedAndAdded,\n    token,\n    apiUrl,\n    negationPatternsFirst\n  }\n\n  if (fetchDepth) {\n    inputs.fetchDepth = Math.max(parseInt(fetchDepth, 10), 2)\n  }\n\n  if (dirNamesMaxDepth) {\n    inputs.dirNamesMaxDepth = parseInt(dirNamesMaxDepth, 10)\n  }\n\n  return inputs\n}\n", "import * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport path from 'path'\nimport {\n  processChangedFiles,\n  ChangeTypeEnum,\n  getAllDiffFiles,\n  getChangedFilesFromGithubAPI,\n  getRenamedFiles\n} from './changedFiles'\nimport {\n  DiffResult,\n  getSHAForNonPullRequestEvent,\n  getSHAForPullRequestEvent\n} from './commitSha'\nimport {Env, getEnv} from './env'\nimport {getInputs, Inputs} from './inputs'\nimport {\n  getFilePatterns,\n  getRecoverFilePatterns,\n  getSubmodulePath,\n  getYamlFilePatterns,\n  hasLocalGitDirectory,\n  isRepoShallow,\n  recoverDeletedFiles,\n  setOutput,\n  submoduleExists,\n  updateGitGlobalConfig,\n  verifyMinimumGitVersion\n} from './utils'\n\nconst getChangedFilesFromLocalGitHistory = async ({\n  inputs,\n  env,\n  workingDirectory,\n  filePatterns,\n  yamlFilePatterns\n}: {\n  inputs: Inputs\n  env: Env\n  workingDirectory: string\n  filePatterns: string[]\n  yamlFilePatterns: Record<string, string[]>\n}): Promise<void> => {\n  await verifyMinimumGitVersion()\n\n  let quotePathValue = 'on'\n\n  if (!inputs.quotePath) {\n    quotePathValue = 'off'\n  }\n\n  await updateGitGlobalConfig({\n    name: 'core.quotepath',\n    value: quotePathValue\n  })\n\n  if (inputs.diffRelative) {\n    await updateGitGlobalConfig({\n      name: 'diff.relative',\n      value: 'true'\n    })\n  }\n\n  const isShallow = await isRepoShallow({cwd: workingDirectory})\n  const hasSubmodule = await submoduleExists({cwd: workingDirectory})\n  let gitFetchExtraArgs = ['--no-tags', '--prune', '--recurse-submodules']\n  const isTag = env.GITHUB_REF?.startsWith('refs/tags/')\n  const outputRenamedFilesAsDeletedAndAdded =\n    inputs.outputRenamedFilesAsDeletedAndAdded\n  let submodulePaths: string[] = []\n\n  if (hasSubmodule) {\n    submodulePaths = await getSubmodulePath({cwd: workingDirectory})\n  }\n\n  if (isTag) {\n    gitFetchExtraArgs = ['--prune', '--no-recurse-submodules']\n  }\n\n  let diffResult: DiffResult\n\n  if (!github.context.payload.pull_request?.base?.ref) {\n    core.info(`Running on a ${github.context.eventName || 'push'} event...`)\n    diffResult = await getSHAForNonPullRequestEvent(\n      inputs,\n      env,\n      workingDirectory,\n      isShallow,\n      hasSubmodule,\n      gitFetchExtraArgs,\n      isTag\n    )\n  } else {\n    core.info(\n      `Running on a ${github.context.eventName || 'pull_request'} (${\n        github.context.payload.action\n      }) event...`\n    )\n    diffResult = await getSHAForPullRequestEvent(\n      inputs,\n      env,\n      workingDirectory,\n      isShallow,\n      hasSubmodule,\n      gitFetchExtraArgs\n    )\n  }\n\n  if (diffResult.initialCommit) {\n    core.info('This is the first commit for this repository; exiting...')\n    core.endGroup()\n    return\n  }\n\n  core.info(\n    `Retrieving changes between ${diffResult.previousSha} (${diffResult.targetBranch}) \u2192 ${diffResult.currentSha} (${diffResult.currentBranch})`\n  )\n\n  const allDiffFiles = await getAllDiffFiles({\n    workingDirectory,\n    hasSubmodule,\n    diffResult,\n    submodulePaths,\n    outputRenamedFilesAsDeletedAndAdded,\n    fetchSubmoduleHistory: inputs.fetchSubmoduleHistory,\n    failOnInitialDiffError: inputs.failOnInitialDiffError,\n    failOnSubmoduleDiffError: inputs.failOnSubmoduleDiffError\n  })\n  core.debug(`All diff files: ${JSON.stringify(allDiffFiles)}`)\n  core.info('All Done!')\n  core.endGroup()\n\n  if (inputs.recoverDeletedFiles) {\n    let recoverPatterns = getRecoverFilePatterns({inputs})\n\n    if (recoverPatterns.length > 0 && filePatterns.length > 0) {\n      core.info('No recover patterns found; defaulting to file patterns')\n      recoverPatterns = filePatterns\n    }\n\n    await recoverDeletedFiles({\n      inputs,\n      workingDirectory,\n      deletedFiles: allDiffFiles[ChangeTypeEnum.Deleted],\n      recoverPatterns,\n      diffResult,\n      hasSubmodule,\n      submodulePaths\n    })\n  }\n\n  await processChangedFiles({\n    filePatterns,\n    allDiffFiles,\n    inputs,\n    yamlFilePatterns,\n    workingDirectory\n  })\n\n  if (inputs.includeAllOldNewRenamedFiles) {\n    core.startGroup('changed-files-all-old-new-renamed-files')\n    const allOldNewRenamedFiles = await getRenamedFiles({\n      inputs,\n      workingDirectory,\n      hasSubmodule,\n      diffResult,\n      submodulePaths\n    })\n    core.debug(`All old new renamed files: ${allOldNewRenamedFiles}`)\n    await setOutput({\n      key: 'all_old_new_renamed_files',\n      value: allOldNewRenamedFiles.paths,\n      writeOutputFiles: inputs.writeOutputFiles,\n      outputDir: inputs.outputDir,\n      json: inputs.json\n    })\n    await setOutput({\n      key: 'all_old_new_renamed_files_count',\n      value: allOldNewRenamedFiles.count,\n      writeOutputFiles: inputs.writeOutputFiles,\n      outputDir: inputs.outputDir,\n      json: inputs.json\n    })\n    core.info('All Done!')\n    core.endGroup()\n  }\n}\n\nconst getChangedFilesFromRESTAPI = async ({\n  inputs,\n  filePatterns,\n  yamlFilePatterns\n}: {\n  inputs: Inputs\n  filePatterns: string[]\n  yamlFilePatterns: Record<string, string[]>\n}): Promise<void> => {\n  const allDiffFiles = await getChangedFilesFromGithubAPI({\n    inputs\n  })\n  core.debug(`All diff files: ${JSON.stringify(allDiffFiles)}`)\n  core.info('All Done!')\n\n  await processChangedFiles({\n    filePatterns,\n    allDiffFiles,\n    inputs,\n    yamlFilePatterns\n  })\n}\n\nexport async function run(): Promise<void> {\n  core.startGroup('changed-files')\n\n  const env = await getEnv()\n  core.debug(`Env: ${JSON.stringify(env, null, 2)}`)\n\n  const inputs = getInputs()\n  core.debug(`Inputs: ${JSON.stringify(inputs, null, 2)}`)\n\n  core.debug(`Github Context: ${JSON.stringify(github.context, null, 2)}`)\n\n  const workingDirectory = path.resolve(\n    env.GITHUB_WORKSPACE || process.cwd(),\n    inputs.path\n  )\n  core.debug(`Working directory: ${workingDirectory}`)\n\n  const hasGitDirectory = await hasLocalGitDirectory({workingDirectory})\n  core.debug(`Has git directory: ${hasGitDirectory}`)\n\n  const filePatterns = await getFilePatterns({\n    inputs,\n    workingDirectory\n  })\n  core.debug(`File patterns: ${filePatterns}`)\n\n  const yamlFilePatterns = await getYamlFilePatterns({\n    inputs,\n    workingDirectory\n  })\n  core.debug(`Yaml file patterns: ${JSON.stringify(yamlFilePatterns)}`)\n\n  if (\n    inputs.token &&\n    github.context.payload.pull_request?.number &&\n    !hasGitDirectory\n  ) {\n    core.info(\"Using GitHub's REST API to get changed files\")\n    const unsupportedInputs: (keyof Inputs)[] = [\n      'sha',\n      'baseSha',\n      'since',\n      'until',\n      'sinceLastRemoteCommit',\n      'recoverDeletedFiles',\n      'recoverDeletedFilesToDestination',\n      'recoverFiles',\n      'recoverFilesIgnore',\n      'includeAllOldNewRenamedFiles',\n      'skipInitialFetch',\n      'fetchSubmoduleHistory',\n      'dirNamesDeletedFilesIncludeOnlyDeletedDirs'\n    ]\n\n    for (const input of unsupportedInputs) {\n      if (inputs[input]) {\n        core.warning(\n          `Input \"${input}\" is not supported when using GitHub's REST API to get changed files`\n        )\n      }\n    }\n    await getChangedFilesFromRESTAPI({\n      inputs,\n      filePatterns,\n      yamlFilePatterns\n    })\n  } else {\n    if (!hasGitDirectory) {\n      core.setFailed(\n        \"Can't find local .git directory. Please run actions/checkout before this action\"\n      )\n      return\n    }\n\n    core.info('Using local .git directory')\n    await getChangedFilesFromLocalGitHistory({\n      inputs,\n      env,\n      workingDirectory,\n      filePatterns,\n      yamlFilePatterns\n    })\n  }\n}\n\n/* istanbul ignore if */\nif (!process.env.TESTING) {\n  // eslint-disable-next-line github/no-then\n  run().catch(e => {\n    core.setFailed(e.message || e)\n  })\n}\n", "/*global AsyncIterableIterator*/\nimport * as core from '@actions/core'\nimport * as exec from '@actions/exec'\nimport * as github from '@actions/github'\nimport {createReadStream, promises as fs} from 'fs'\nimport {readFile} from 'fs/promises'\nimport {flattenDeep} from 'lodash'\nimport mm from 'micromatch'\nimport * as path from 'path'\nimport {createInterface} from 'readline'\nimport {parseDocument} from 'yaml'\nimport {ChangedFiles, ChangeTypeEnum} from './changedFiles'\nimport {DiffResult} from './commitSha'\nimport {Inputs} from './inputs'\n\nconst MINIMUM_GIT_VERSION = '2.18.0'\n\nexport const isWindows = (): boolean => {\n  return process.platform === 'win32'\n}\n\n/**\n * Normalize file path separators to '/' on Linux/macOS and '\\\\' on Windows\n * @param p - file path\n * @returns file path with normalized separators\n */\nexport const normalizeSeparators = (p: string): string => {\n  // Windows\n  if (isWindows()) {\n    // Convert slashes on Windows\n    p = p.replace(/\\//g, '\\\\')\n\n    // Remove redundant slashes\n    const isUnc = /^\\\\\\\\+[^\\\\]/.test(p) // e.g. \\\\hello\n    return (isUnc ? '\\\\' : '') + p.replace(/\\\\\\\\+/g, '\\\\') // preserve leading \\\\ for UNC\n  }\n\n  // Remove redundant slashes\n  return p.replace(/\\/\\/+/g, '/')\n}\n\n/**\n * Trims unnecessary trailing slash from file path\n * @param p - file path\n * @returns file path without unnecessary trailing slash\n */\nconst safeTrimTrailingSeparator = (p: string): string => {\n  // Empty path\n  if (!p) {\n    return ''\n  }\n\n  // Normalize separators\n  p = normalizeSeparators(p)\n\n  // No trailing slash\n  if (!p.endsWith(path.sep)) {\n    return p\n  }\n\n  // Check '/' on Linux/macOS and '\\' on Windows\n  if (p === path.sep) {\n    return p\n  }\n\n  // On Windows, avoid trimming the drive root, e.g. C:\\ or \\\\hello\n  if (isWindows() && /^[A-Z]:\\\\$/i.test(p)) {\n    return p\n  }\n\n  // Trim trailing slash\n  return p.substring(0, p.length - 1)\n}\n\n/**\n * Gets the dirname of a path, similar to the Node.js path.dirname() function except that this function\n * also works for Windows UNC root paths, e.g. \\\\hello\\world\n * @param p - file path\n * @returns dirname of path\n */\nexport const getDirname = (p: string): string => {\n  // Normalize slashes and trim unnecessary trailing slash\n  p = safeTrimTrailingSeparator(p)\n\n  // Windows UNC root, e.g. \\\\hello or \\\\hello\\world\n  if (isWindows() && /^\\\\\\\\[^\\\\]+(\\\\[^\\\\]+)?$/.test(p)) {\n    return p\n  }\n\n  // Get dirname\n  let result = path.dirname(p)\n\n  // Trim trailing slash for Windows UNC root, e.g. \\\\hello\\world\\\n  if (isWindows() && /^\\\\\\\\[^\\\\]+\\\\[^\\\\]+\\\\$/.test(result)) {\n    result = safeTrimTrailingSeparator(result)\n  }\n\n  return result\n}\n\n/**\n * Converts the version string to a number\n * @param version - version string\n * @returns version number\n */\nconst versionToNumber = (version: string): number => {\n  const [major, minor, patch] = version.split('.').map(Number)\n  return major * 1000000 + minor * 1000 + patch\n}\n\n/**\n * Verifies the minimum required git version\n * @returns minimum required git version\n * @throws Minimum git version requirement is not met\n * @throws Git is not installed\n * @throws Git is not found in PATH\n * @throws An unexpected error occurred\n */\nexport const verifyMinimumGitVersion = async (): Promise<void> => {\n  const {exitCode, stdout, stderr} = await exec.getExecOutput(\n    'git',\n    ['--version'],\n    {silent: !core.isDebug()}\n  )\n\n  if (exitCode !== 0) {\n    throw new Error(stderr || 'An unexpected error occurred')\n  }\n\n  const gitVersion = stdout.trim()\n\n  if (versionToNumber(gitVersion) < versionToNumber(MINIMUM_GIT_VERSION)) {\n    throw new Error(\n      `Minimum required git version is ${MINIMUM_GIT_VERSION}, your version is ${gitVersion}`\n    )\n  }\n}\n\n/**\n * Checks if a path exists\n * @param filePath - path to check\n * @returns path exists\n */\nexport const exists = async (filePath: string): Promise<boolean> => {\n  try {\n    await fs.access(filePath)\n    return true\n  } catch {\n    return false\n  }\n}\n\n/**\n * Generates lines of a file as an async iterable iterator\n * @param filePath - path of file to read\n * @param excludedFiles - whether to exclude files\n */\nasync function* lineOfFileGenerator({\n  filePath,\n  excludedFiles\n}: {\n  filePath: string\n  excludedFiles: boolean\n}): AsyncIterableIterator<string> {\n  const fileStream = createReadStream(filePath)\n  /* istanbul ignore next */\n  fileStream.on('error', error => {\n    throw error\n  })\n  const rl = createInterface({\n    input: fileStream,\n    crlfDelay: Infinity\n  })\n  for await (const line of rl) {\n    if (!line.startsWith('#') && line !== '') {\n      if (excludedFiles) {\n        if (line.startsWith('!')) {\n          yield line\n        } else {\n          yield `!${line}`\n        }\n      } else {\n        yield line\n      }\n    }\n  }\n}\n\n/**\n * Gets the file patterns from a source file\n * @param filePaths - paths of files to read\n * @param excludedFiles - whether to exclude the file patterns\n */\nconst getFilesFromSourceFile = async ({\n  filePaths,\n  excludedFiles = false\n}: {\n  filePaths: string[]\n  excludedFiles?: boolean\n}): Promise<string[]> => {\n  const lines: string[] = []\n  for (const filePath of filePaths) {\n    for await (const line of lineOfFileGenerator({filePath, excludedFiles})) {\n      lines.push(line)\n    }\n  }\n  return lines\n}\n\n/**\n * Sets the global git configs\n * @param name - name of config\n * @param value - value of config\n * @throws Couldn't update git global config\n */\nexport const updateGitGlobalConfig = async ({\n  name,\n  value\n}: {\n  name: string\n  value: string\n}): Promise<void> => {\n  const {exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['config', '--global', name, value],\n    {\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  /* istanbul ignore if */\n  if (exitCode !== 0 || stderr) {\n    core.warning(stderr || `Couldn't update git global config ${name}`)\n  }\n}\n\n/**\n * Checks if a git repository is shallow\n * @param cwd - working directory\n * @returns repository is shallow\n */\nexport const isRepoShallow = async ({cwd}: {cwd: string}): Promise<boolean> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--is-shallow-repository'],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  return stdout.trim() === 'true'\n}\n\n/**\n * Checks if a submodule exists\n * @param cwd - working directory\n * @returns submodule exists\n */\nexport const submoduleExists = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<boolean> => {\n  const {stdout, exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['submodule', 'status'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    core.warning(stderr || \"Couldn't list submodules\")\n    return false\n  }\n\n  return stdout.trim() !== ''\n}\n\n/**\n * Fetches the git repository\n * @param args - arguments for fetch command\n * @param cwd - working directory\n */\nexport const gitFetch = async ({\n  args,\n  cwd\n}: {\n  args: string[]\n  cwd: string\n}): Promise<number> => {\n  const {exitCode} = await exec.getExecOutput('git', ['fetch', '-q', ...args], {\n    cwd,\n    ignoreReturnCode: true,\n    silent: !core.isDebug()\n  })\n\n  return exitCode\n}\n\n/**\n * Fetches the git repository submodules\n * @param args - arguments for fetch command\n * @param cwd - working directory\n */\nexport const gitFetchSubmodules = async ({\n  args,\n  cwd\n}: {\n  args: string[]\n  cwd: string\n}): Promise<void> => {\n  const {exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['submodule', 'foreach', 'git', 'fetch', '-q', ...args],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  /* istanbul ignore if */\n  if (exitCode !== 0) {\n    core.warning(stderr || \"Couldn't fetch submodules\")\n  }\n}\n\n/**\n * Retrieves all the submodule paths\n * @param cwd - working directory\n */\nexport const getSubmodulePath = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<string[]> => {\n  const {exitCode, stdout, stderr} = await exec.getExecOutput(\n    'git',\n    ['submodule', 'status'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    core.warning(stderr || \"Couldn't get submodule names\")\n    return []\n  }\n\n  return stdout\n    .trim()\n    .split('\\n')\n    .map((line: string) => normalizeSeparators(line.trim().split(' ')[1]))\n}\n\n/**\n * Retrieves commit sha of a submodule from a parent commit\n * @param cwd - working directory\n * @param parentSha1 - parent commit sha\n * @param parentSha2 - parent commit sha\n * @param submodulePath - path of submodule\n * @param diff - diff type between parent commits (`..` or `...`)\n */\nexport const gitSubmoduleDiffSHA = async ({\n  cwd,\n  parentSha1,\n  parentSha2,\n  submodulePath,\n  diff\n}: {\n  cwd: string\n  parentSha1: string\n  parentSha2: string\n  submodulePath: string\n  diff: string\n}): Promise<{previousSha?: string; currentSha?: string}> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['diff', `${parentSha1}${diff}${parentSha2}`, '--', submodulePath],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  const subprojectCommitPreRegex =\n    /^(?<preCommit>-)Subproject commit (?<commitHash>.+)$/m\n  const subprojectCommitCurRegex =\n    /^(?<curCommit>\\+)Subproject commit (?<commitHash>.+)$/m\n\n  const previousSha =\n    subprojectCommitPreRegex.exec(stdout)?.groups?.commitHash ||\n    '4b825dc642cb6eb9a060e54bf8d69288fbee4904'\n  const currentSha = subprojectCommitCurRegex.exec(stdout)?.groups?.commitHash\n\n  if (currentSha) {\n    return {previousSha, currentSha}\n  }\n\n  core.debug(\n    `No submodule commit found for ${submodulePath} between ${parentSha1}${diff}${parentSha2}`\n  )\n  return {}\n}\n\nexport const gitRenamedFiles = async ({\n  cwd,\n  sha1,\n  sha2,\n  diff,\n  oldNewSeparator,\n  isSubmodule = false,\n  parentDir = ''\n}: {\n  cwd: string\n  sha1: string\n  sha2: string\n  diff: string\n  oldNewSeparator: string\n  isSubmodule?: boolean\n  parentDir?: string\n}): Promise<string[]> => {\n  const {exitCode, stderr, stdout} = await exec.getExecOutput(\n    'git',\n    [\n      'diff',\n      '--name-status',\n      '--ignore-submodules=all',\n      '--diff-filter=R',\n      `${sha1}${diff}${sha2}`\n    ],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    if (isSubmodule) {\n      core.warning(\n        stderr ||\n          `Failed to get renamed files for submodule between: ${sha1}${diff}${sha2}`\n      )\n      core.warning(\n        'Please ensure that submodules are initialized and up to date. See: https://github.com/actions/checkout#usage'\n      )\n    } else {\n      core.error(\n        stderr || `Failed to get renamed files between: ${sha1}${diff}${sha2}`\n      )\n      throw new Error('Unable to get renamed files')\n    }\n\n    return []\n  }\n\n  return stdout\n    .trim()\n    .split('\\n')\n    .filter(Boolean)\n    .map((line: string) => {\n      core.debug(`Renamed file: ${line}`)\n      const [, oldPath, newPath] = line.split('\\t')\n      if (isSubmodule) {\n        return `${normalizeSeparators(\n          path.join(parentDir, oldPath)\n        )}${oldNewSeparator}${normalizeSeparators(\n          path.join(parentDir, newPath)\n        )}`\n      }\n      return `${normalizeSeparators(\n        oldPath\n      )}${oldNewSeparator}${normalizeSeparators(newPath)}`\n    })\n}\n\n/**\n * Retrieves all the changed files between two commits\n * @param cwd - working directory\n * @param sha1 - commit sha\n * @param sha2 - commit sha\n * @param diff - diff type between parent commits (`..` or `...`)\n * @param isSubmodule - is the repo a submodule\n * @param parentDir - parent directory of the submodule\n * @param outputRenamedFilesAsDeletedAndAdded - output renamed files as deleted and added\n * @param failOnInitialDiffError - fail if the initial diff fails\n * @param failOnSubmoduleDiffError - fail if the submodule diff fails\n */\nexport const getAllChangedFiles = async ({\n  cwd,\n  sha1,\n  sha2,\n  diff,\n  isSubmodule = false,\n  parentDir = '',\n  outputRenamedFilesAsDeletedAndAdded = false,\n  failOnInitialDiffError = false,\n  failOnSubmoduleDiffError = false\n}: {\n  cwd: string\n  sha1: string\n  sha2: string\n  diff: string\n  isSubmodule?: boolean\n  parentDir?: string\n  outputRenamedFilesAsDeletedAndAdded?: boolean\n  failOnInitialDiffError?: boolean\n  failOnSubmoduleDiffError?: boolean\n}): Promise<ChangedFiles> => {\n  const {exitCode, stdout, stderr} = await exec.getExecOutput(\n    'git',\n    [\n      'diff',\n      '--name-status',\n      '--ignore-submodules=all',\n      `--diff-filter=ACDMRTUX`,\n      `${sha1}${diff}${sha2}`\n    ],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n  const changedFiles: ChangedFiles = {\n    [ChangeTypeEnum.Added]: [],\n    [ChangeTypeEnum.Copied]: [],\n    [ChangeTypeEnum.Deleted]: [],\n    [ChangeTypeEnum.Modified]: [],\n    [ChangeTypeEnum.Renamed]: [],\n    [ChangeTypeEnum.TypeChanged]: [],\n    [ChangeTypeEnum.Unmerged]: [],\n    [ChangeTypeEnum.Unknown]: []\n  }\n\n  if (exitCode !== 0) {\n    if (failOnInitialDiffError && !isSubmodule) {\n      throw new Error(\n        `Failed to get changed files between: ${sha1}${diff}${sha2}: ${stderr}`\n      )\n    } else if (failOnSubmoduleDiffError && isSubmodule) {\n      throw new Error(\n        `Failed to get changed files for submodule between: ${sha1}${diff}${sha2}: ${stderr}`\n      )\n    }\n  }\n\n  if (exitCode !== 0) {\n    if (isSubmodule) {\n      core.warning(\n        stderr ||\n          `Failed to get changed files for submodule between: ${sha1}${diff}${sha2}`\n      )\n      core.warning(\n        'Please ensure that submodules are initialized and up to date. See: https://github.com/actions/checkout#usage'\n      )\n    } else {\n      core.warning(\n        stderr || `Failed to get changed files between: ${sha1}${diff}${sha2}`\n      )\n    }\n\n    return changedFiles\n  }\n\n  const lines = stdout.split('\\n').filter(Boolean)\n\n  for (const line of lines) {\n    const [changeType, filePath, newPath = ''] = line.split('\\t')\n    const normalizedFilePath = isSubmodule\n      ? normalizeSeparators(path.join(parentDir, filePath))\n      : normalizeSeparators(filePath)\n    const normalizedNewPath = isSubmodule\n      ? normalizeSeparators(path.join(parentDir, newPath))\n      : normalizeSeparators(newPath)\n\n    if (changeType.startsWith('R')) {\n      if (outputRenamedFilesAsDeletedAndAdded) {\n        changedFiles[ChangeTypeEnum.Deleted].push(normalizedFilePath)\n        changedFiles[ChangeTypeEnum.Added].push(normalizedNewPath)\n      } else {\n        changedFiles[ChangeTypeEnum.Renamed].push(normalizedNewPath)\n      }\n    } else {\n      changedFiles[changeType as ChangeTypeEnum].push(normalizedFilePath)\n    }\n  }\n  return changedFiles\n}\n\n/**\n * Filters the changed files by the file patterns\n * @param allDiffFiles - all the changed files\n * @param filePatterns - file patterns to filter by\n */\nexport const getFilteredChangedFiles = async ({\n  allDiffFiles,\n  filePatterns\n}: {\n  allDiffFiles: ChangedFiles\n  filePatterns: string[]\n}): Promise<ChangedFiles> => {\n  const changedFiles: ChangedFiles = {\n    [ChangeTypeEnum.Added]: [],\n    [ChangeTypeEnum.Copied]: [],\n    [ChangeTypeEnum.Deleted]: [],\n    [ChangeTypeEnum.Modified]: [],\n    [ChangeTypeEnum.Renamed]: [],\n    [ChangeTypeEnum.TypeChanged]: [],\n    [ChangeTypeEnum.Unmerged]: [],\n    [ChangeTypeEnum.Unknown]: []\n  }\n  const hasFilePatterns = filePatterns.length > 0\n  const isWin = isWindows()\n\n  for (const changeType of Object.keys(allDiffFiles)) {\n    const files = allDiffFiles[changeType as ChangeTypeEnum]\n    if (hasFilePatterns) {\n      changedFiles[changeType as ChangeTypeEnum] = mm(files, filePatterns, {\n        dot: true,\n        windows: isWin,\n        noext: true\n      }).map(normalizeSeparators)\n    } else {\n      changedFiles[changeType as ChangeTypeEnum] = files\n    }\n  }\n\n  return changedFiles\n}\n\nexport const gitLog = async ({\n  args,\n  cwd\n}: {\n  args: string[]\n  cwd: string\n}): Promise<string> => {\n  const {stdout} = await exec.getExecOutput('git', ['log', ...args], {\n    cwd,\n    silent: !core.isDebug()\n  })\n\n  return stdout.trim()\n}\n\nexport const getHeadSha = async ({cwd}: {cwd: string}): Promise<string> => {\n  const {stdout} = await exec.getExecOutput('git', ['rev-parse', 'HEAD'], {\n    cwd,\n    silent: !core.isDebug()\n  })\n\n  return stdout.trim()\n}\n\nexport const isInsideWorkTree = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<boolean> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--is-inside-work-tree'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  return stdout.trim() === 'true'\n}\n\nexport const getRemoteBranchHeadSha = async ({\n  cwd,\n  branch\n}: {\n  cwd: string\n  branch: string\n}): Promise<string> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', `origin/${branch}`],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  return stdout.trim()\n}\n\nexport const getCurrentBranchName = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<string> => {\n  const {stdout, exitCode} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--abbrev-ref', 'HEAD'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    return ''\n  }\n\n  return stdout.trim()\n}\n\nexport const getParentSha = async ({cwd}: {cwd: string}): Promise<string> => {\n  const {stdout, exitCode} = await exec.getExecOutput(\n    'git',\n    ['rev-list', '-n', '1', 'HEAD^'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    return ''\n  }\n\n  return stdout.trim()\n}\n\nexport const verifyCommitSha = async ({\n  sha,\n  cwd,\n  showAsErrorMessage = true\n}: {\n  sha: string\n  cwd: string\n  showAsErrorMessage?: boolean\n}): Promise<number> => {\n  const {exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--verify', `${sha}^{commit}`],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    if (showAsErrorMessage) {\n      core.error(`Unable to locate the commit sha: ${sha}`)\n      core.error(\n        \"Please verify that the commit sha is correct, and increase the 'fetch_depth' input if needed\"\n      )\n      core.debug(stderr)\n    } else {\n      core.warning(`Unable to locate the commit sha: ${sha}`)\n      core.debug(stderr)\n    }\n  }\n\n  return exitCode\n}\n\n/**\n * Clean the sha from the input which could be a branch name or a commit sha.\n *\n * If the input is a valid commit sha, return it as is.\n *\n * If the input is a branch name, get the HEAD sha of that branch and return it.\n *\n * @param sha The input string, which could be a branch name or a commit sha.\n * @param cwd The working directory.\n * @param token The GitHub token.\n * @returns The cleaned SHA string.\n */\nexport const cleanShaInput = async ({\n  sha,\n  cwd,\n  token\n}: {\n  sha: string\n  cwd: string\n  token: string\n}): Promise<string> => {\n  // Check if the input is a valid commit sha\n  if (!sha) {\n    return sha\n  }\n  // Check if the input is a valid commit sha\n  const {stdout, exitCode} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--verify', `${sha}^{commit}`],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    const octokit = github.getOctokit(token)\n    // If it's not a valid commit sha, assume it's a branch name and get the HEAD sha\n    const {data: refData} = await octokit.rest.git.getRef({\n      owner: github.context.repo.owner,\n      repo: github.context.repo.repo,\n      ref: `heads/${sha}`\n    })\n\n    return refData.object.sha\n  }\n\n  return stdout.trim()\n}\nexport const getPreviousGitTag = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<{tag: string; sha: string}> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['tag', '--sort=-creatordate'],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  const tags = stdout.trim().split('\\n')\n\n  if (tags.length < 2) {\n    core.warning('No previous tag found')\n    return {tag: '', sha: ''}\n  }\n\n  const previousTag = tags[1]\n\n  const {stdout: stdout2} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', previousTag],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  const sha = stdout2.trim()\n\n  return {tag: previousTag, sha}\n}\n\nexport const canDiffCommits = async ({\n  cwd,\n  sha1,\n  sha2,\n  diff\n}: {\n  cwd: string\n  sha1: string\n  sha2: string\n  diff: string\n}): Promise<boolean> => {\n  if (diff === '...') {\n    const mergeBase = await getMergeBase(cwd, sha1, sha2)\n\n    if (!mergeBase) {\n      core.warning(`Unable to find merge base between ${sha1} and ${sha2}`)\n      return false\n    }\n\n    const {exitCode, stderr} = await exec.getExecOutput(\n      'git',\n      ['log', '--format=%H', `${mergeBase}..${sha2}`],\n      {\n        cwd,\n        ignoreReturnCode: true,\n        silent: !core.isDebug()\n      }\n    )\n\n    if (exitCode !== 0) {\n      core.warning(stderr || `Error checking commit history`)\n      return false\n    }\n\n    return true\n  } else {\n    const {exitCode, stderr} = await exec.getExecOutput(\n      'git',\n      ['diff', '--quiet', sha1, sha2],\n      {\n        cwd,\n        ignoreReturnCode: true,\n        silent: !core.isDebug()\n      }\n    )\n\n    if (exitCode !== 0) {\n      core.warning(stderr || `Error checking commit history`)\n      return false\n    }\n\n    return true\n  }\n}\n\nconst getMergeBase = async (\n  cwd: string,\n  sha1: string,\n  sha2: string\n): Promise<string | null> => {\n  const {exitCode, stdout} = await exec.getExecOutput(\n    'git',\n    ['merge-base', sha1, sha2],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    return null\n  }\n\n  return stdout.trim()\n}\n\nexport const getDirnameMaxDepth = ({\n  relativePath,\n  dirNamesMaxDepth,\n  excludeCurrentDir\n}: {\n  relativePath: string\n  dirNamesMaxDepth?: number\n  excludeCurrentDir?: boolean\n}): string => {\n  const pathArr = getDirname(relativePath).split(path.sep)\n  const maxDepth = Math.min(dirNamesMaxDepth || pathArr.length, pathArr.length)\n  let output = pathArr[0]\n\n  for (let i = 1; i < maxDepth; i++) {\n    output = path.join(output, pathArr[i])\n  }\n\n  if (excludeCurrentDir && output === '.') {\n    return ''\n  }\n\n  return normalizeSeparators(output)\n}\n\nexport const jsonOutput = ({\n  value,\n  shouldEscape\n}: {\n  value: string | string[] | boolean\n  shouldEscape: boolean\n}): string => {\n  const result = JSON.stringify(value)\n\n  return shouldEscape ? result.replace(/\"/g, '\\\\\"') : result\n}\n\nexport const getDirNamesIncludeFilesPattern = ({\n  inputs\n}: {\n  inputs: Inputs\n}): string[] => {\n  return inputs.dirNamesIncludeFiles\n    .split(inputs.dirNamesIncludeFilesSeparator)\n    .filter(Boolean)\n}\n\nexport const getFilePatterns = async ({\n  inputs,\n  workingDirectory\n}: {\n  inputs: Inputs\n  workingDirectory: string\n}): Promise<string[]> => {\n  let cleanedFilePatterns: string[] = []\n\n  if (inputs.files) {\n    const filesPatterns = inputs.files\n      .split(inputs.filesSeparator)\n      .filter(Boolean)\n\n    cleanedFilePatterns.push(...filesPatterns)\n\n    core.debug(`files patterns: ${filesPatterns.join('\\n')}`)\n  }\n\n  if (inputs.filesFromSourceFile !== '') {\n    const inputFilesFromSourceFile = inputs.filesFromSourceFile\n      .split(inputs.filesFromSourceFileSeparator)\n      .filter(Boolean)\n      .map(p => path.join(workingDirectory, p))\n\n    core.debug(`files from source file: ${inputFilesFromSourceFile}`)\n\n    const filesFromSourceFiles = await getFilesFromSourceFile({\n      filePaths: inputFilesFromSourceFile\n    })\n\n    core.debug(\n      `files from source files patterns: ${filesFromSourceFiles.join('\\n')}`\n    )\n\n    cleanedFilePatterns.push(...filesFromSourceFiles)\n  }\n\n  if (inputs.filesIgnore) {\n    const filesIgnorePatterns = inputs.filesIgnore\n      .split(inputs.filesIgnoreSeparator)\n      .filter(Boolean)\n      .map(p => {\n        if (!p.startsWith('!')) {\n          p = `!${p}`\n        }\n        return p\n      })\n\n    core.debug(`files ignore patterns: ${filesIgnorePatterns.join('\\n')}`)\n\n    cleanedFilePatterns.push(...filesIgnorePatterns)\n  }\n\n  if (inputs.filesIgnoreFromSourceFile) {\n    const inputFilesIgnoreFromSourceFile = inputs.filesIgnoreFromSourceFile\n      .split(inputs.filesIgnoreFromSourceFileSeparator)\n      .filter(Boolean)\n      .map(p => path.join(workingDirectory, p))\n\n    core.debug(\n      `files ignore from source file: ${inputFilesIgnoreFromSourceFile}`\n    )\n\n    const filesIgnoreFromSourceFiles = await getFilesFromSourceFile({\n      filePaths: inputFilesIgnoreFromSourceFile,\n      excludedFiles: true\n    })\n\n    core.debug(\n      `files ignore from source files patterns: ${filesIgnoreFromSourceFiles.join(\n        '\\n'\n      )}`\n    )\n\n    cleanedFilePatterns.push(...filesIgnoreFromSourceFiles)\n  }\n\n  if (inputs.negationPatternsFirst) {\n    cleanedFilePatterns.sort((a, b) => {\n      return a.startsWith('!') ? -1 : b.startsWith('!') ? 1 : 0\n    })\n  }\n\n  // Reorder file patterns '**' should come first\n  if (cleanedFilePatterns.includes('**')) {\n    cleanedFilePatterns.sort((a, b) => {\n      return a === '**' ? -1 : b === '**' ? 1 : 0\n    })\n  }\n\n  if (isWindows()) {\n    cleanedFilePatterns = cleanedFilePatterns.map(pattern =>\n      pattern.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n')\n    )\n  }\n\n  core.debug(`Input file patterns: \\n${cleanedFilePatterns.join('\\n')}`)\n\n  return cleanedFilePatterns\n}\n\n// Example YAML input:\n//  filesYaml: |\n//     frontend:\n//       - frontend/**\n//     backend:\n//       - backend/**\n//     test: test/**\n//     shared: &shared\n//       - common/**\n//     lib:\n//       - *shared\n//       - lib/**\n// Return an Object:\n// {\n//   frontend: ['frontend/**'],\n//   backend: ['backend/**'],\n//   test: ['test/**'],\n//   shared: ['common/**'],\n//   lib: ['common/**', 'lib/**']\n// }\n\ntype YamlObject = {\n  [key: string]: string | string[] | [string[], string]\n}\n\nconst getYamlFilePatternsFromContents = async ({\n  content = '',\n  filePath = '',\n  excludedFiles = false\n}: {\n  content?: string\n  filePath?: string\n  excludedFiles?: boolean\n}): Promise<Record<string, string[]>> => {\n  const filePatterns: Record<string, string[]> = {}\n  let source = ''\n\n  if (filePath) {\n    if (!(await exists(filePath))) {\n      core.error(`File does not exist: ${filePath}`)\n      throw new Error(`File does not exist: ${filePath}`)\n    }\n\n    source = await readFile(filePath, 'utf8')\n  } else {\n    source = content\n  }\n\n  const doc = parseDocument(source, {merge: true, schema: 'failsafe'})\n\n  if (doc.errors.length > 0) {\n    if (filePath) {\n      throw new Error(`YAML errors in ${filePath}: ${doc.errors}`)\n    } else {\n      throw new Error(`YAML errors: ${doc.errors}`)\n    }\n  }\n\n  if (doc.warnings.length > 0) {\n    if (filePath) {\n      throw new Error(`YAML warnings in ${filePath}: ${doc.warnings}`)\n    } else {\n      throw new Error(`YAML warnings: ${doc.warnings}`)\n    }\n  }\n\n  const yamlObject = doc.toJS() as YamlObject\n\n  for (const key in yamlObject) {\n    let value = yamlObject[key]\n\n    if (typeof value === 'string' && value.includes('\\n')) {\n      value = value.split('\\n')\n    }\n\n    if (typeof value === 'string') {\n      value = value.trim()\n\n      if (value) {\n        filePatterns[key] = [\n          excludedFiles && !value.startsWith('!') ? `!${value}` : value\n        ]\n      }\n    } else if (Array.isArray(value)) {\n      filePatterns[key] = flattenDeep(value)\n        .filter(v => v.trim() !== '')\n        .map(v => {\n          if (excludedFiles && !v.startsWith('!')) {\n            v = `!${v}`\n          }\n          return v\n        })\n    }\n  }\n\n  return filePatterns\n}\n\nexport const getYamlFilePatterns = async ({\n  inputs,\n  workingDirectory\n}: {\n  inputs: Inputs\n  workingDirectory: string\n}): Promise<Record<string, string[]>> => {\n  let filePatterns: Record<string, string[]> = {}\n  if (inputs.filesYaml) {\n    filePatterns = {\n      ...(await getYamlFilePatternsFromContents({content: inputs.filesYaml}))\n    }\n  }\n\n  if (inputs.filesYamlFromSourceFile) {\n    const inputFilesYamlFromSourceFile = inputs.filesYamlFromSourceFile\n      .split(inputs.filesYamlFromSourceFileSeparator)\n      .filter(p => p !== '')\n      .map(p => path.join(workingDirectory, p))\n\n    core.debug(`files yaml from source file: ${inputFilesYamlFromSourceFile}`)\n\n    for (const filePath of inputFilesYamlFromSourceFile) {\n      const newFilePatterns = await getYamlFilePatternsFromContents({filePath})\n      for (const key in newFilePatterns) {\n        if (key in filePatterns) {\n          core.warning(\n            `files_yaml_from_source_file: Duplicated key ${key} detected in ${filePath}, the ${filePatterns[key]} will be overwritten by ${newFilePatterns[key]}.`\n          )\n        }\n      }\n\n      filePatterns = {\n        ...filePatterns,\n        ...newFilePatterns\n      }\n    }\n  }\n\n  if (inputs.filesIgnoreYaml) {\n    const newIgnoreFilePatterns = await getYamlFilePatternsFromContents({\n      content: inputs.filesIgnoreYaml,\n      excludedFiles: true\n    })\n\n    for (const key in newIgnoreFilePatterns) {\n      if (key in filePatterns) {\n        core.warning(\n          `files_ignore_yaml: Duplicated key ${key} detected, the ${filePatterns[key]} will be overwritten by ${newIgnoreFilePatterns[key]}.`\n        )\n      }\n    }\n  }\n\n  if (inputs.filesIgnoreYamlFromSourceFile) {\n    const inputFilesIgnoreYamlFromSourceFile =\n      inputs.filesIgnoreYamlFromSourceFile\n        .split(inputs.filesIgnoreYamlFromSourceFileSeparator)\n        .filter(p => p !== '')\n        .map(p => path.join(workingDirectory, p))\n\n    core.debug(\n      `files ignore yaml from source file: ${inputFilesIgnoreYamlFromSourceFile}`\n    )\n\n    for (const filePath of inputFilesIgnoreYamlFromSourceFile) {\n      const newIgnoreFilePatterns = await getYamlFilePatternsFromContents({\n        filePath,\n        excludedFiles: true\n      })\n\n      for (const key in newIgnoreFilePatterns) {\n        if (key in filePatterns) {\n          core.warning(\n            `files_ignore_yaml_from_source_file: Duplicated key ${key} detected in ${filePath}, the ${filePatterns[key]} will be overwritten by ${newIgnoreFilePatterns[key]}.`\n          )\n        }\n      }\n\n      filePatterns = {\n        ...filePatterns,\n        ...newIgnoreFilePatterns\n      }\n    }\n  }\n\n  return filePatterns\n}\n\nexport const getRecoverFilePatterns = ({\n  inputs\n}: {\n  inputs: Inputs\n}): string[] => {\n  let filePatterns: string[] = inputs.recoverFiles.split(\n    inputs.recoverFilesSeparator\n  )\n\n  if (inputs.recoverFilesIgnore) {\n    const ignoreFilePatterns = inputs.recoverFilesIgnore.split(\n      inputs.recoverFilesSeparator\n    )\n\n    filePatterns = filePatterns.concat(\n      ignoreFilePatterns.map(p => {\n        if (p.startsWith('!')) {\n          return p\n        } else {\n          return `!${p}`\n        }\n      })\n    )\n  }\n\n  core.debug(`recover file patterns: ${filePatterns}`)\n\n  return filePatterns.filter(Boolean)\n}\n\nexport const getOutputKey = (key: string, outputPrefix: string): string => {\n  return outputPrefix ? `${outputPrefix}_${key}` : key\n}\n\nexport const setArrayOutput = async ({\n  key,\n  inputs,\n  value,\n  outputPrefix\n}: {\n  key: string\n  inputs: Inputs\n  value: string[]\n  outputPrefix?: string\n}): Promise<void> => {\n  core.debug(`${key}: ${JSON.stringify(value)}`)\n  await setOutput({\n    key: outputPrefix ? getOutputKey(key, outputPrefix) : key,\n    value: inputs.json ? value : value.join(inputs.separator),\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson\n  })\n}\n\nexport const setOutput = async ({\n  key,\n  value,\n  writeOutputFiles,\n  outputDir,\n  json = false,\n  shouldEscape = false\n}: {\n  key: string\n  value: string | string[] | boolean\n  writeOutputFiles: boolean\n  outputDir: string\n  json?: boolean\n  shouldEscape?: boolean\n}): Promise<void> => {\n  let cleanedValue\n  if (json) {\n    cleanedValue = jsonOutput({value, shouldEscape})\n  } else {\n    cleanedValue = value.toString().trim()\n  }\n\n  core.setOutput(key, cleanedValue)\n\n  if (writeOutputFiles) {\n    const extension = json ? 'json' : 'txt'\n    const outputFilePath = path.join(outputDir, `${key}.${extension}`)\n\n    if (!(await exists(outputDir))) {\n      await fs.mkdir(outputDir, {recursive: true})\n    }\n    await fs.writeFile(outputFilePath, cleanedValue.replace(/\\\\\"/g, '\"'))\n  }\n}\n\nconst getDeletedFileContents = async ({\n  cwd,\n  filePath,\n  sha\n}: {\n  cwd: string\n  filePath: string\n  sha: string\n}): Promise<string> => {\n  const {stdout, exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['show', `${sha}:${filePath}`],\n    {\n      cwd,\n      silent: !core.isDebug(),\n      ignoreReturnCode: true\n    }\n  )\n\n  if (exitCode !== 0) {\n    throw new Error(\n      `Error getting file content from git history \"${filePath}\": ${stderr}`\n    )\n  }\n\n  return stdout\n}\n\nexport const recoverDeletedFiles = async ({\n  inputs,\n  workingDirectory,\n  deletedFiles,\n  recoverPatterns,\n  diffResult,\n  hasSubmodule,\n  submodulePaths\n}: {\n  inputs: Inputs\n  workingDirectory: string\n  deletedFiles: string[]\n  recoverPatterns: string[]\n  diffResult: DiffResult\n  hasSubmodule: boolean\n  submodulePaths: string[]\n}): Promise<void> => {\n  let recoverableDeletedFiles = deletedFiles\n  core.debug(`recoverable deleted files: ${recoverableDeletedFiles}`)\n\n  if (recoverPatterns.length > 0) {\n    recoverableDeletedFiles = mm(deletedFiles, recoverPatterns, {\n      dot: true,\n      windows: isWindows(),\n      noext: true\n    })\n    core.debug(`filtered recoverable deleted files: ${recoverableDeletedFiles}`)\n  }\n\n  for (const deletedFile of recoverableDeletedFiles) {\n    let target = path.join(workingDirectory, deletedFile)\n\n    if (inputs.recoverDeletedFilesToDestination) {\n      target = path.join(\n        workingDirectory,\n        inputs.recoverDeletedFilesToDestination,\n        deletedFile\n      )\n    }\n\n    let deletedFileContents: string\n\n    const submodulePath = submodulePaths.find(p => deletedFile.startsWith(p))\n\n    if (hasSubmodule && submodulePath) {\n      const submoduleShaResult = await gitSubmoduleDiffSHA({\n        cwd: workingDirectory,\n        parentSha1: diffResult.previousSha,\n        parentSha2: diffResult.currentSha,\n        submodulePath,\n        diff: diffResult.diff\n      })\n\n      if (submoduleShaResult.previousSha) {\n        core.debug(\n          `recovering deleted file \"${deletedFile}\" from submodule ${submodulePath} from ${submoduleShaResult.previousSha}`\n        )\n        deletedFileContents = await getDeletedFileContents({\n          cwd: path.join(workingDirectory, submodulePath),\n          // E.g. submodulePath = test/demo and deletedFile = test/demo/.github/README.md => filePath => .github/README.md\n          filePath: deletedFile.replace(submodulePath, '').substring(1),\n          sha: submoduleShaResult.previousSha\n        })\n      } else {\n        core.warning(\n          `Unable to recover deleted file \"${deletedFile}\" from submodule ${submodulePath} from ${submoduleShaResult.previousSha}`\n        )\n        continue\n      }\n    } else {\n      core.debug(\n        `recovering deleted file \"${deletedFile}\" from ${diffResult.previousSha}`\n      )\n      deletedFileContents = await getDeletedFileContents({\n        cwd: workingDirectory,\n        filePath: deletedFile,\n        sha: diffResult.previousSha\n      })\n    }\n\n    core.debug(`recovered deleted file \"${deletedFile}\"`)\n\n    if (!(await exists(path.dirname(target)))) {\n      core.debug(`creating directory \"${path.dirname(target)}\"`)\n      await fs.mkdir(path.dirname(target), {recursive: true})\n    }\n    core.debug(`writing file \"${target}\"`)\n    await fs.writeFile(target, deletedFileContents)\n    core.debug(`wrote file \"${target}\"`)\n  }\n}\n\nexport const hasLocalGitDirectory = async ({\n  workingDirectory\n}: {\n  workingDirectory: string\n}): Promise<boolean> => {\n  return await isInsideWorkTree({\n    cwd: workingDirectory\n  })\n}\n"], "fixing_code": ["[![Ubuntu](https://img.shields.io/badge/Ubuntu-E95420?style=for-the-badge\\&logo=ubuntu\\&logoColor=white)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Mac OS](https://img.shields.io/badge/mac%20os-000000?style=for-the-badge\\&logo=macos\\&logoColor=F0F0F0)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Windows](https://img.shields.io/badge/Windows-0078D6?style=for-the-badge\\&logo=windows\\&logoColor=white)](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on)\n[![Public workflows that use this action.](https://img.shields.io/endpoint?style=for-the-badge\\&url=https%3A%2F%2Fused-by.vercel.app%2Fapi%2Fgithub-actions%2Fused-by%3Faction%3Dtj-actions%2Fchanged-files%26badge%3Dtrue)](https://github.com/search?o=desc\\&q=tj-actions+changed-files+language%3AYAML\\&s=\\&type=Code)\n\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/4a625e9b62794b5b98e169c15c0e673c)](https://www.codacy.com/gh/tj-actions/changed-files/dashboard?utm_source=github.com\\&utm_medium=referral\\&utm_content=tj-actions/changed-files\\&utm_campaign=Badge_Grade)\n[![CI](https://github.com/tj-actions/changed-files/actions/workflows/test.yml/badge.svg)](https://github.com/tj-actions/changed-files/actions/workflows/test.yml)\n[![Update release version.](https://github.com/tj-actions/changed-files/actions/workflows/sync-release-version.yml/badge.svg)](https://github.com/tj-actions/changed-files/actions/workflows/sync-release-version.yml)\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-22-orange.svg?style=flat-square)](#contributors-)\n\n<!-- ALL-CONTRIBUTORS-BADGE:END -->\n\n## changed-files\n\nEffortlessly track all changed files and directories relative to a target branch, preceding commit or the last remote commit returning **relative paths** from the project root using this GitHub action.\n\n> \\[!NOTE]\n>\n> *   This action solely identifies files that have changed within the context of events such as `pull_request*`, `push`, and more. However, it doesn't detect pending uncommitted changes created during the workflow execution.\n>\n>     See: https://github.com/tj-actions/verify-changed-files instead\n\n## Table of contents\n\n*   [Features \ud83d\ude80](#features-)\n*   [Usage \ud83d\udcbb](#usage-)\n    *   [On `pull_request` \ud83d\udd00](#on-pull_request-)\n        *   [Using local .git history \ud83d\udcc1](#using-local-git-history-)\n        *   [Using Github's API :octocat:](#using-githubs-api-octocat)\n    *   [On `push` \u2b06\ufe0f](#on-push-\ufe0f)\n    *   [Other supported events :electron:](#other-supported-events-electron)\n*   [Inputs \u2699\ufe0f](#inputs-\ufe0f)\n*   [Useful Acronyms \ud83e\uddee](#useful-acronyms-)\n*   [Outputs \ud83d\udce4](#outputs-)\n*   [Versioning \ud83c\udff7\ufe0f](#versioning-\ufe0f)\n*   [Examples \ud83d\udcc4](#examples-)\n*   [Real-world usage \ud83c\udf10](#real-world-usage-)\n    *   [Open source projects \ud83d\udce6](#open-source-projects-)\n    *   [Scalability Example \ud83d\udcc8](#scalability-example-)\n*   [Important Notice \u26a0\ufe0f](#important-notice-\ufe0f)\n*   [Migration guide \ud83d\udd04](#migration-guide-)\n*   [Credits \ud83d\udc4f](#credits-)\n*   [Report Bugs \ud83d\udc1b](#report-bugs-)\n*   [Contributors \u2728](#contributors-)\n\n## Features \ud83d\ude80\n\n*   Fast execution, averaging 0-10 seconds.\n*   Leverages either [Github's REST API](https://docs.github.com/en/rest/reference/repos#list-commits) or [Git's native diff](https://git-scm.com/docs/git-diff) to determine changed files.\n*   Facilitates easy debugging.\n*   Scales to handle large/mono repositories.\n*   Supports Git submodules.\n*   Supports [merge queues](https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue) for pull requests.\n*   Generates escaped [JSON output for running matrix jobs](https://github.com/tj-actions/changed-files/blob/main/.github/workflows/matrix-test.yml) based on changed files.\n*   Lists changed directories.\n    *   Limits matching changed directories to a specified maximum depth.\n    *   Optionally excludes the current directory.\n*   Writes outputs to a designated `.txt` or `.json` file for further processing.\n*   Restores deleted files to their previous location or a newly specified location.\n*   Supports fetching a fixed number of commits which improves performance.\n*   Compatible with all platforms (Linux, MacOS, Windows).\n*   Supports [GitHub-hosted runners](https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners).\n*   Supports [GitHub Enterprise Server](https://docs.github.com/en/enterprise-server@3.3/admin/github-actions/getting-started-with-github-actions-for-your-enterprise/getting-started-with-github-actions-for-github-enterprise-server).\n*   Supports [self-hosted runners](https://docs.github.com/en/actions/hosting-your-own-runners/about-self-hosted-runners).\n*   Lists all files and directories that have changed:\n    *   Between the current pull request branch and the last commit on the target branch.\n    *   Between the last commit and the current pushed change.\n    *   Between the last remote branch commit and the current HEAD.\n*   Restricts change detection to a subset of files and directories:\n    *   Provides boolean output indicating changes in specific files.\n    *   Uses [Glob pattern](https://codepen.io/mrmlnc/pen/OXQjMe) matching.\n        *   Supports Globstar.\n        *   Supports brace expansion.\n        *   Supports negation.\n    *   Uses [YAML](https://yaml.org/) syntax for specifying patterns.\n        *   Supports [YAML anchors & aliases](https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml#L8-L12).\n        *   Supports [YAML multi-line strings](https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml#L13-L16).\n\nAnd many more...\n\n## Usage \ud83d\udcbb\n\n> \\[!IMPORTANT]\n>\n> *   **Push Events**: When configuring [`actions/checkout`](https://github.com/actions/checkout#usage), make sure to set [`fetch-depth`](https://github.com/actions/checkout#usage) to either `0` or `2`, depending on your use case.\n> *   **Mono Repositories**: To avoid pulling the entire branch history, you can utilize the default [`actions/checkout`](https://github.com/actions/checkout#usage)'s [`fetch-depth`](https://github.com/actions/checkout#usage) of `1` for [`pull_request`](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request) events.\n> *   **Quoting Multiline Inputs**: Avoid using single or double quotes for [multiline](https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml#L13-L16) inputs. The value is already a string separated by a newline character. Refer to the [Examples](#examples-) section for more information.\n> *   **Credentials Persistence**: If [`fetch-depth`](https://github.com/actions/checkout#usage) is not set to 0, make sure to set [`persist-credentials`](https://github.com/actions/checkout#usage)  to `true` when configuring [`actions/checkout`](https://github.com/actions/checkout#usage).\n> *   **Matching Files and Folders**: To match all files and folders under a directory, this requires a globstar pattern e.g. `dir_name/**` which matches any number of subdirectories and files.\n\nVisit the [discussions for more information](https://github.com/tj-actions/changed-files/discussions) or [create a new discussion](https://github.com/tj-actions/changed-files/discussions/new/choose) for usage-related questions.\n\n### On [`pull_request`](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request) \ud83d\udd00\n\nDetect changes to all files in a Pull request relative to the target branch or since the last pushed commit.\n\n#### Using local .git history \ud83d\udcc1\n\n```yaml\nname: CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  # ------------------------------------------------------------------------------------------------------------------------------------------------\n  # Event `pull_request`: Compare the last commit of the main branch or last remote commit of the PR branch -> to the current commit of a PR branch.\n  # ------------------------------------------------------------------------------------------------------------------------------------------------\n  changed_files:\n    runs-on: ubuntu-latest  # windows-latest || macos-latest\n    name: Test changed-files\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # OR \"2\" -> To retrieve the preceding commit.\n\n      # Example 1\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v40\n        with:\n          safe_output: false # true by default, set to false because we are using an environment variable to store the output and avoid command injection.\n        \n        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g\n        # with:\n        #   since_last_remote_commit: true \n\n      - name: List all changed files\n        env:\n          ALL_CHANGED_FILES: |-\n            ${{ steps.changed-files.outputs.all_changed_files }}\n        run: |\n          for file in \"$ALL_CHANGED_FILES\"; do\n            echo \"$file was changed\"\n          done\n\n      # Example 2\n      - name: Get all changed markdown files\n        id: changed-markdown-files\n        uses: tj-actions/changed-files@v40\n        with:\n          safe_output: false # true by default, set to false because we are using an environment variable to store the output and avoid command injection.\n          # Avoid using single or double quotes for multiline patterns\n          files: |\n             **.md\n\n      - name: List all changed files markdown files\n        if: steps.changed-markdown-files.outputs.any_changed == 'true'\n        env:\n          ALL_CHANGED_FILES: |-\n            ${{ steps.changed-markdown-files.outputs.all_changed_files }}\n        run: |\n          for file in \"$ALL_CHANGED_FILES\"; do\n            echo \"$file was changed\"\n          done\n\n      # Example 3\n      - name: Get all test, doc and src files that have changed\n        id: changed-files-yaml\n        uses: tj-actions/changed-files@v40\n        with:\n          safe_output: false # true by default, set to false because we are using an environment variable to store the output and avoid command injection.\n          files_yaml: |\n            doc:\n              - '**.md'\n              - docs/**\n              - README.md\n            test:\n              - test/**\n              - '!test/**.md'\n            src:\n              - src/**\n          # Optionally set `files_yaml_from_source_file` to read the YAML from a file. e.g `files_yaml_from_source_file: .github/changed-files.yml`\n\n      - name: Run step if test file(s) change\n        # NOTE: Ensure all outputs are prefixed by the same key used above e.g. `test_(...)` | `doc_(...)` | `src_(...)` when trying to access the `any_changed` output.\n        if: steps.changed-files-yaml.outputs.test_any_changed == 'true'  \n        env:\n          TEST_ALL_CHANGED_FILES: |-\n            ${{ steps.changed-files-yaml.outputs.test_all_changed_files }}\n        run: |\n          echo \"One or more test file(s) has changed.\"\n          echo \"List all the files that have changed: $TEST_ALL_CHANGED_FILES\"\n      \n      - name: Run step if doc file(s) change\n        if: steps.changed-files-yaml.outputs.doc_any_changed == 'true'\n        env:\n          DOC_ALL_CHANGED_FILES: |-\n            ${{ steps.changed-files-yaml.outputs.doc_all_changed_files }}\n        run: |\n          echo \"One or more doc file(s) has changed.\"\n          echo \"List all the files that have changed: $DOC_ALL_CHANGED_FILES\"\n\n      # Example 3\n      - name: Get changed files in the docs folder\n        id: changed-files-specific\n        uses: tj-actions/changed-files@v40\n        with:\n          safe_output: false # true by default, set to false because we are using an environment variable to store the output and avoid command injection.\n          files: docs/*.{js,html}  # Alternatively using: `docs/**`\n          files_ignore: docs/static.js\n\n      - name: Run step if any file(s) in the docs folder change\n        if: steps.changed-files-specific.outputs.any_changed == 'true'\n        env:\n          ALL_CHANGED_FILES: |-\n            ${{ steps.changed-files-specific.outputs.all_changed_files }}\n        run: |\n          echo \"One or more files in the docs folder has changed.\"\n          echo \"List all the files that have changed: $ALL_CHANGED_FILES\"\n```\n\n#### Using Github's API :octocat:\n\n```yaml\nname: CI\n\non:\n  pull_request:\n    branches:\n      - main\n\njobs:\n  # -------------------------------------------------------------\n  # Event `pull_request`: Returns all changed pull request files.\n  # --------------------------------------------------------------\n  changed_files:\n    # NOTE:\n    # - This is limited to pull_request* events and would raise an error for other events.\n    # - A maximum of 3000 files can be returned.\n    # - For more flexibility and no limitations see \"Using local .git history\" above.\n\n    runs-on: ubuntu-latest  # windows-latest || macos-latest\n    name: Test changed-files\n    permissions:\n      pull-requests: read\n\n    steps:\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v40\n        with:\n          safe_output: false # true by default, set to false because we are using an environment variable to store the output and avoid command injection.\n\n      - name: List all changed files\n        env:\n          ALL_CHANGED_FILES: |-\n            ${{ steps.changed-files.outputs.all_changed_files }}\n        run: |\n          for file in \"$ALL_CHANGED_FILES\"; do\n            echo \"$file was changed\"\n          done\n```\n\n### On [`push`](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push) \u2b06\ufe0f\n\nDetect changes to files made since the last pushed commit.\n\n```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  # -------------------------------------------------------------\n  # Using GitHub's API is not supported for push events\n  # -------------------------------------------------------------\n  # \n  # ----------------------------------------------------------------------------------------------\n  # Using local .git history\n  # ----------------------------------------------------------------------------------------------\n  # Event `push`: Compare the preceding remote commit -> to the current commit of the main branch \n  # ----------------------------------------------------------------------------------------------\n  changed_files:\n    runs-on: ubuntu-latest  # windows-latest || macos-latest\n    name: Test changed-files\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0  # OR \"2\" -> To retrieve the preceding commit.\n\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v40\n        with:\n          safe_output: false # true by default, set to false because we are using an environment variable to store the output and avoid command injection.\n\n      # NOTE: `since_last_remote_commit: true` is implied by default and falls back to the previous local commit.\n\n      - name: List all changed files\n        env:\n          ALL_CHANGED_FILES: |-\n            ${{ steps.changed-files.outputs.all_changed_files }}\n        run: |\n          for file in \"$ALL_CHANGED_FILES\"; do\n            echo \"$file was changed\"\n          done\n      ...\n```\n\n### Other supported events :electron:\n\n*   [schedule](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule)\n*   [release](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release)\n*   [workflow\\_dispatch](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch)\n*   [merge\\_group](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#merge_group)\n*   [issue\\_comment](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#issue_comment)\n*   ...and many more\n\nTo access more examples, navigate to the [Examples](#examples-) section.\n\nIf you feel generous and want to show some extra appreciation:\n\nSupport this project with a :star:\n\n[![Buy me a coffee][buymeacoffee-shield]][buymeacoffee]\n\n[buymeacoffee]: https://www.buymeacoffee.com/jackton1\n\n[buymeacoffee-shield]: https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png\n\n> \\[!IMPORTANT]\n>\n> *   When using `files_yaml*` inputs:\n>     *   All keys must start with a letter or `_` and contain only alphanumeric characters, `-`, or `_`.\n>         For example, `test` or `test_key` or `tesT-key` are all valid.\n\n## Inputs \u2699\ufe0f\n\n<!-- AUTO-DOC-INPUT:START - Do not remove or modify this section -->\n\n```yaml\n- uses: tj-actions/changed-files@v40\n  id: changed-files\n  with:\n    # Github API URL.\n    # Type: string\n    # Default: \"${{ github.api_url }}\"\n    api_url: ''\n\n    # Specify a different base commit SHA or branch used \n    # for comparing changes \n    # Type: string\n    base_sha: ''\n\n    # Exclude changes outside the current directory and show path \n    # names relative to it. NOTE: This requires you to \n    # specify the top-level directory via the `path` input. \n    # Type: boolean\n    # Default: \"true\"\n    diff_relative: ''\n\n    # Output unique changed directories instead of filenames. NOTE: This \n    # returns `.` for changed files located in the current \n    # working directory which defaults to `$GITHUB_WORKSPACE`. \n    # Type: boolean\n    # Default: \"false\"\n    dir_names: ''\n\n    # Include only directories that have been deleted as opposed \n    # to directory names of files that have been deleted \n    # in the `deleted_files` output when `dir_names` is set to \n    # `true`. \n    # Type: boolean\n    # Default: \"false\"\n    dir_names_deleted_files_include_only_deleted_dirs: ''\n\n    # Exclude the current directory represented by `.` from the \n    # output when `dir_names` is set to `true`. \n    # Type: boolean\n    # Default: \"false\"\n    dir_names_exclude_current_dir: ''\n\n    # File and directory patterns to include in the output \n    # when `dir_names` is set to `true`. NOTE: This returns \n    # only the matching files and also the directory names. \n    # Type: string\n    dir_names_include_files: ''\n\n    # Separator used to split the `dir_names_include_files` input\n    # Type: string\n    # Default: \"\\n\"\n    dir_names_include_files_separator: ''\n\n    # Limit the directory output to a maximum depth e.g \n    # `test/test1/test2` with max depth of `2` returns `test/test1`. \n    # Type: string\n    dir_names_max_depth: ''\n\n    # Escape JSON output.\n    # Type: boolean\n    # Default: \"true\"\n    escape_json: ''\n\n    # Fail when the initial diff fails.\n    # Type: boolean\n    # Default: \"false\"\n    fail_on_initial_diff_error: ''\n\n    # Fail when the submodule diff fails.\n    # Type: boolean\n    # Default: \"false\"\n    fail_on_submodule_diff_error: ''\n\n    # Fetch additional history for submodules.\n    # Type: boolean\n    # Default: \"false\"\n    fetch_additional_submodule_history: ''\n\n    # Depth of additional branch history fetched. NOTE: This can \n    # be adjusted to resolve errors with insufficient history. \n    # Type: string\n    # Default: \"50\"\n    fetch_depth: ''\n\n    # File and directory patterns used to detect changes (Defaults to the entire repo if unset). \n    # NOTE: Multiline file/directory patterns should not include quotes. \n    # Type: string\n    files: ''\n\n    # Source file(s) used to populate the `files` input.\n    # Type: string\n    files_from_source_file: ''\n\n    # Separator used to split the `files_from_source_file` input.\n    # Type: string\n    # Default: \"\\n\"\n    files_from_source_file_separator: ''\n\n    # Ignore changes to these file(s). NOTE: Multiline file/directory patterns \n    # should not include quotes. \n    # Type: string\n    files_ignore: ''\n\n    # Source file(s) used to populate the `files_ignore` input\n    # Type: string\n    files_ignore_from_source_file: ''\n\n    # Separator used to split the `files_ignore_from_source_file` input\n    # Type: string\n    # Default: \"\\n\"\n    files_ignore_from_source_file_separator: ''\n\n    # Separator used to split the `files_ignore` input\n    # Type: string\n    # Default: \"\\n\"\n    files_ignore_separator: ''\n\n    # YAML used to define a set of file patterns \n    # to ignore changes \n    # Type: string\n    files_ignore_yaml: ''\n\n    # Source file(s) used to populate the `files_ignore_yaml` input. Example: \n    # https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml \n    # Type: string\n    files_ignore_yaml_from_source_file: ''\n\n    # Separator used to split the `files_ignore_yaml_from_source_file` input\n    # Type: string\n    # Default: \"\\n\"\n    files_ignore_yaml_from_source_file_separator: ''\n\n    # Separator used to split the `files` input\n    # Type: string\n    # Default: \"\\n\"\n    files_separator: ''\n\n    # YAML used to define a set of file patterns \n    # to detect changes \n    # Type: string\n    files_yaml: ''\n\n    # Source file(s) used to populate the `files_yaml` input. Example: \n    # https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml \n    # Type: string\n    files_yaml_from_source_file: ''\n\n    # Separator used to split the `files_yaml_from_source_file` input\n    # Type: string\n    # Default: \"\\n\"\n    files_yaml_from_source_file_separator: ''\n\n    # Include `all_old_new_renamed_files` output. Note this can generate a large \n    # output See: #501. \n    # Type: boolean\n    # Default: \"false\"\n    include_all_old_new_renamed_files: ''\n\n    # Output list of changed files in a JSON formatted \n    # string which can be used for matrix jobs. Example: \n    # https://github.com/tj-actions/changed-files/blob/main/.github/workflows/matrix-test.yml \n    # Type: boolean\n    # Default: \"false\"\n    json: ''\n\n    # Apply the negation patterns first. NOTE: This affects how \n    # changed files are matched. \n    # Type: boolean\n    # Default: \"false\"\n    negation_patterns_first: ''\n\n    # Split character for old and new renamed filename pairs.\n    # Type: string\n    # Default: \" \"\n    old_new_files_separator: ''\n\n    # Split character for old and new filename pairs.\n    # Type: string\n    # Default: \",\"\n    old_new_separator: ''\n\n    # Directory to store output files.\n    # Type: string\n    # Default: \".github/outputs\"\n    output_dir: ''\n\n    # Output renamed files as deleted and added files.\n    # Type: boolean\n    # Default: \"false\"\n    output_renamed_files_as_deleted_and_added: ''\n\n    # Specify a relative path under `$GITHUB_WORKSPACE` to locate the \n    # repository. \n    # Type: string\n    # Default: \".\"\n    path: ''\n\n    # Use non-ASCII characters to match files and output the \n    # filenames completely verbatim by setting this to `false` \n    # Type: boolean\n    # Default: \"true\"\n    quotepath: ''\n\n    # Recover deleted files.\n    # Type: boolean\n    # Default: \"false\"\n    recover_deleted_files: ''\n\n    # Recover deleted files to a new destination directory, defaults \n    # to the original location. \n    # Type: string\n    recover_deleted_files_to_destination: ''\n\n    # File and directory patterns used to recover deleted files, \n    # defaults to the patterns provided via the `files`, `files_from_source_file`, \n    # `files_ignore` and `files_ignore_from_source_file` inputs or all deleted files if \n    # no patterns are provided. \n    # Type: string\n    recover_files: ''\n\n    # File and directory patterns to ignore when recovering deleted \n    # files. \n    # Type: string\n    recover_files_ignore: ''\n\n    # Separator used to split the `recover_files_ignore` input\n    # Type: string\n    # Default: \"\\n\"\n    recover_files_ignore_separator: ''\n\n    # Separator used to split the `recover_files` input\n    # Type: string\n    # Default: \"\\n\"\n    recover_files_separator: ''\n\n    # Split character for output strings.\n    # Type: string\n    # Default: \" \"\n    separator: ''\n\n    # Specify a different commit SHA or branch used for \n    # comparing changes \n    # Type: string\n    sha: ''\n\n    # Get changed files for commits whose timestamp is older \n    # than the given time. \n    # Type: string\n    since: ''\n\n    # Use the last commit on the remote branch as \n    # the `base_sha`. Defaults to the last non-merge commit on \n    # the target branch for pull request events and the \n    # previous remote commit of the current branch for push \n    # events. \n    # Type: boolean\n    # Default: \"false\"\n    since_last_remote_commit: ''\n\n    # Skip the initial fetch to improve performance for shallow \n    # repositories. NOTE: This could lead to errors with missing \n    # history and the intended use is limited to when \n    # you've fetched the history necessary to perform the diff. \n    # Type: boolean\n    # Default: \"false\"\n    skip_initial_fetch: ''\n\n    # GitHub token used to fetch changed files from Github's \n    # API. \n    # Type: string\n    # Default: \"${{ github.token }}\"\n    token: ''\n\n    # Get changed files for commits whose timestamp is earlier \n    # than the given time. \n    # Type: string\n    until: ''\n\n    # Write outputs to the `output_dir` defaults to `.github/outputs` folder. \n    # NOTE: This creates a `.txt` file by default and \n    # a `.json` file if `json` is set to `true`. \n    # Type: boolean\n    # Default: \"false\"\n    write_output_files: ''\n\n```\n\n<!-- AUTO-DOC-INPUT:END -->\n\n## Useful Acronyms \ud83e\uddee\n\n|  Acronym  |   Meaning    |\n|:---------:|:------------:|\n|     A     |    Added     |\n|     C     |    Copied    |\n|     M     |   Modified   |\n|     D     |   Deleted    |\n|     R     |   Renamed    |\n|     T     | Type changed |\n|     U     |   Unmerged   |\n|     X     |   Unknown    |\n\n> \\[!IMPORTANT]\n>\n> *   When using `files_yaml*` inputs:\n>     *   it's required to prefix all outputs with the key to ensure that the correct outputs are accessible.\n>\n>         For example, if you use `test` as the key, you can access outputs like `added_files`, `any_changed`, and so on by prefixing them with the key `test_added_files` or `test_any_changed` etc.\n\n## Outputs \ud83d\udce4\n\n<!-- AUTO-DOC-OUTPUT:START - Do not remove or modify this section -->\n\n|                                                                     OUTPUT                                                                     |  TYPE  |                                                                                                                                                       DESCRIPTION                                                                                                                                                       |\n|------------------------------------------------------------------------------------------------------------------------------------------------|--------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|                                      <a name=\"output_added_files\"></a>[added\\_files](#output_added_files)                                       | string |                                                                                                                                       Returns only files that are <br>Added (A).                                                                                                                                        |\n|                             <a name=\"output_added_files_count\"></a>[added\\_files\\_count](#output_added_files_count)                              | string |                                                                                                                                           Returns the number of `added_files`                                                                                                                                           |\n|          <a name=\"output_all_changed_and_modified_files\"></a>[all\\_changed\\_and\\_modified\\_files](#output_all_changed_and_modified_files)          | string |                                                                                                                     Returns all changed and modified <br>files i.e. *a combination of (ACMRDTUX)*                                                                                                                       |\n| <a name=\"output_all_changed_and_modified_files_count\"></a>[all\\_changed\\_and\\_modified\\_files\\_count](#output_all_changed_and_modified_files_count) | string |                                                                                                                                 Returns the number of `all_changed_and_modified_files`                                                                                                                                  |\n|                             <a name=\"output_all_changed_files\"></a>[all\\_changed\\_files](#output_all_changed_files)                              | string |                                                                                                       Returns all changed files i.e. <br>*a combination of all added, copied, modified and renamed files (ACMR)*                                                                                                        |\n|                    <a name=\"output_all_changed_files_count\"></a>[all\\_changed\\_files\\_count](#output_all_changed_files_count)                     | string |                                                                                                                                        Returns the number of `all_changed_files`                                                                                                                                        |\n|                            <a name=\"output_all_modified_files\"></a>[all\\_modified\\_files](#output_all_modified_files)                            | string |                                                                                                 Returns all changed files i.e. <br>*a combination of all added, copied, modified, renamed and deleted files (ACMRD)*.                                                                                                   |\n|                   <a name=\"output_all_modified_files_count\"></a>[all\\_modified\\_files\\_count](#output_all_modified_files_count)                   | string |                                                                                                                                       Returns the number of `all_modified_files`                                                                                                                                        |\n|                 <a name=\"output_all_old_new_renamed_files\"></a>[all\\_old\\_new\\_renamed\\_files](#output_all_old_new_renamed_files)                  | string | Returns only files that are <br>Renamed and lists their old <br>and new names. **NOTE:** This <br>requires setting `include_all_old_new_renamed_files` to `true`. <br>Also, keep in mind that <br>this output is global and <br>wouldn't be nested in outputs <br>generated when the `*_yaml_*` input <br>is used. (R)  |\n|        <a name=\"output_all_old_new_renamed_files_count\"></a>[all\\_old\\_new\\_renamed\\_files\\_count](#output_all_old_new_renamed_files_count)         | string |                                                                                                                                    Returns the number of `all_old_new_renamed_files`                                                                                                                                    |\n|                                      <a name=\"output_any_changed\"></a>[any\\_changed](#output_any_changed)                                       | string |                                                     Returns `true` when any of <br>the filenames provided using the <br>`files*` or `files_ignore*` inputs has changed. i.e. <br>*includes a combination of all added, copied, modified and renamed files (ACMR)*.                                                      |\n|                                      <a name=\"output_any_deleted\"></a>[any\\_deleted](#output_any_deleted)                                       | string |                                                                                            Returns `true` when any of <br>the filenames provided using the <br>`files*` or `files_ignore*` inputs has been deleted. <br>(D)                                                                                             |\n|                                     <a name=\"output_any_modified\"></a>[any\\_modified](#output_any_modified)                                     | string |                                            Returns `true` when any of <br>the filenames provided using the <br>`files*` or `files_ignore*` inputs has been modified. <br>i.e. *includes a combination of all added, copied, modified, renamed, and deleted files (ACMRD)*.                                              |\n|                                     <a name=\"output_changed_keys\"></a>[changed\\_keys](#output_changed_keys)                                     | string |                                                                     Returns all changed YAML keys <br>when the `files_yaml` input is <br>used. i.e. *key that contains any path that has either been added, copied, modified, and renamed (ACMR)*                                                                       |\n|                                     <a name=\"output_copied_files\"></a>[copied\\_files](#output_copied_files)                                     | string |                                                                                                                                      Returns only files that are <br>Copied (C).                                                                                                                                        |\n|                            <a name=\"output_copied_files_count\"></a>[copied\\_files\\_count](#output_copied_files_count)                            | string |                                                                                                                                          Returns the number of `copied_files`                                                                                                                                           |\n|                                   <a name=\"output_deleted_files\"></a>[deleted\\_files](#output_deleted_files)                                    | string |                                                                                                                                      Returns only files that are <br>Deleted (D).                                                                                                                                       |\n|                          <a name=\"output_deleted_files_count\"></a>[deleted\\_files\\_count](#output_deleted_files_count)                           | string |                                                                                                                                          Returns the number of `deleted_files`                                                                                                                                          |\n|                                  <a name=\"output_modified_files\"></a>[modified\\_files](#output_modified_files)                                  | string |                                                                                                                                     Returns only files that are <br>Modified (M).                                                                                                                                       |\n|                         <a name=\"output_modified_files_count\"></a>[modified\\_files\\_count](#output_modified_files_count)                         | string |                                                                                                                                         Returns the number of `modified_files`                                                                                                                                          |\n|                                   <a name=\"output_modified_keys\"></a>[modified\\_keys](#output_modified_keys)                                    | string |                                                                    Returns all modified YAML keys <br>when the `files_yaml` input is <br>used. i.e. *key that contains any path that has either been added, copied, modified, and deleted (ACMRD)*                                                                      |\n|                                     <a name=\"output_only_changed\"></a>[only\\_changed](#output_only_changed)                                     | string |                                                            Returns `true` when only files <br>provided using the `files*` or `files_ignore*` inputs <br>has changed. i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.                                                             |\n|                                     <a name=\"output_only_deleted\"></a>[only\\_deleted](#output_only_deleted)                                     | string |                                                                                                   Returns `true` when only files <br>provided using the `files*` or `files_ignore*` inputs <br>has been deleted. (D)                                                                                                    |\n|                                   <a name=\"output_only_modified\"></a>[only\\_modified](#output_only_modified)                                    | string |                                                                                                Returns `true` when only files <br>provided using the `files*` or `files_ignore*` inputs <br>has been modified. (ACMRD).                                                                                                 |\n|                          <a name=\"output_other_changed_files\"></a>[other\\_changed\\_files](#output_other_changed_files)                           | string |                                                                              Returns all other changed files <br>not listed in the files <br>input i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.                                                                               |\n|                 <a name=\"output_other_changed_files_count\"></a>[other\\_changed\\_files\\_count](#output_other_changed_files_count)                  | string |                                                                                                                                       Returns the number of `other_changed_files`                                                                                                                                       |\n|                          <a name=\"output_other_deleted_files\"></a>[other\\_deleted\\_files](#output_other_deleted_files)                           | string |                                                                                                  Returns all other deleted files <br>not listed in the files <br>input i.e. *a  combination of all deleted files (D)*                                                                                                   |\n|                 <a name=\"output_other_deleted_files_count\"></a>[other\\_deleted\\_files\\_count](#output_other_deleted_files_count)                  | string |                                                                                                                                       Returns the number of `other_deleted_files`                                                                                                                                       |\n|                         <a name=\"output_other_modified_files\"></a>[other\\_modified\\_files](#output_other_modified_files)                         | string |                                                                                 Returns all other modified files <br>not listed in the files <br>input i.e. *a combination of all added, copied, modified, and deleted files (ACMRD)*                                                                                   |\n|                <a name=\"output_other_modified_files_count\"></a>[other\\_modified\\_files\\_count](#output_other_modified_files_count)                | string |                                                                                                                                      Returns the number of `other_modified_files`                                                                                                                                       |\n|                                   <a name=\"output_renamed_files\"></a>[renamed\\_files](#output_renamed_files)                                    | string |                                                                                                                                      Returns only files that are <br>Renamed (R).                                                                                                                                       |\n|                          <a name=\"output_renamed_files_count\"></a>[renamed\\_files\\_count](#output_renamed_files_count)                           | string |                                                                                                                                          Returns the number of `renamed_files`                                                                                                                                          |\n|                            <a name=\"output_type_changed_files\"></a>[type\\_changed\\_files](#output_type_changed_files)                            | string |                                                                                                                             Returns only files that have <br>their file type changed (T).                                                                                                                               |\n|                   <a name=\"output_type_changed_files_count\"></a>[type\\_changed\\_files\\_count](#output_type_changed_files_count)                   | string |                                                                                                                                       Returns the number of `type_changed_files`                                                                                                                                        |\n|                                   <a name=\"output_unknown_files\"></a>[unknown\\_files](#output_unknown_files)                                    | string |                                                                                                                                      Returns only files that are <br>Unknown (X).                                                                                                                                       |\n|                          <a name=\"output_unknown_files_count\"></a>[unknown\\_files\\_count](#output_unknown_files_count)                           | string |                                                                                                                                          Returns the number of `unknown_files`                                                                                                                                          |\n|                                  <a name=\"output_unmerged_files\"></a>[unmerged\\_files](#output_unmerged_files)                                  | string |                                                                                                                                     Returns only files that are <br>Unmerged (U).                                                                                                                                       |\n|                         <a name=\"output_unmerged_files_count\"></a>[unmerged\\_files\\_count](#output_unmerged_files_count)                         | string |                                                                                                                                         Returns the number of `unmerged_files`                                                                                                                                          |\n\n<!-- AUTO-DOC-OUTPUT:END -->\n\n## Versioning \ud83c\udff7\ufe0f\n\nThis GitHub Action follows the principles of [Semantic Versioning](https://semver.org) for versioning releases.\n\nThe format of the version string is as follows:\n\n*   major: indicates significant changes or new features that may not be backward compatible.\n\n*   minor: indicates minor changes or new features that are backward compatible.\n\n*   patch: indicates bug fixes or other small changes that are backward compatible.\n\n## Examples \ud83d\udcc4\n\n<details>\n<summary>Get all changed files in the current branch</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n...\n```\n\n</details>\n\n<details>\n<summary>Get all changed files and use a comma separator</summary>\n\n```yaml\n...\n    - name: Get all changed files and use a comma separator in the output\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        separator: \",\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary> Get all changed files and list all added files</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        safe_output: false\n\n    - name: List all added files\n      env:\n        ADDED_FILES: |-\n          ${{ steps.changed-files.outputs.added_files }}\n      run: |\n        for file in \"$ADDED_FILES\"; do\n          echo \"$file was added\"\n        done\n...\n```\n\nSee [outputs](#outputs) for a list of all available outputs.\n\n</details>\n\n<details>\n<summary>Get all changed files and optionally run a step if a file was modified</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        safe_output: false\n\n    - name: Run a step if my-file.txt was modified\n      if: contains(steps.changed-files.outputs.modified_files, 'my-file.txt')\n      run: |\n        echo \"my-file.txt file has been modified.\"\n...\n```\n\nSee [outputs](#outputs) for a list of all available outputs.\n\n</details>\n\n<details>\n<summary>Get all changed files and write the outputs to a txt file</summary>\n\n```yaml\n...\n\n   - name: Get changed files and write the outputs to a Txt file\n     id: changed-files-write-output-files-txt\n     uses: tj-actions/changed-files@v40\n     with:\n       safe_output: false\n       write_output_files: true\n\n   - name: Verify the contents of the .github/outputs/added_files.txt file\n     run: |\n       cat .github/outputs/added_files.txt\n...\n```\n\n</details>\n\n<details>\n<summary>Get all changed files and write the outputs to a json file</summary>\n\n```yaml\n...\n   - name: Get changed files and write the outputs to a JSON file\n     id: changed-files-write-output-files-json\n     uses: tj-actions/changed-files@v40\n     with:\n       safe_output: false\n       json: true\n       write_output_files: true\n\n   - name: Verify the contents of the .github/outputs/added_files.json file\n     run: |\n       cat .github/outputs/added_files.json\n...\n```\n\n</details>\n\n<details>\n<summary>Get all changed files using a list of files</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        files: |\n          my-file.txt\n          *.sh\n          *.png\n          !*.md\n          test_directory/**\n          **/*.sql\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files using a list of files and take action based on the changes</summary>\n\n```yaml\n...\n    - name: Get changed files\n      id: changed-files-specific\n      uses: tj-actions/changed-files@v40\n      with:\n        safe_output: false\n        files: |\n          my-file.txt\n          *.sh\n          *.png\n          !*.md\n          test_directory/**\n          **/*.sql\n\n    - name: Run step if any of the listed files above change\n      if: steps.changed-files-specific.outputs.any_changed == 'true'\n      run: |\n        echo \"One or more files listed above has changed.\"\n\n    - name: Run step if only the files listed above change\n      if: steps.changed-files-specific.outputs.only_changed == 'true'\n      run: |\n        echo \"Only files listed above have changed.\"\n\n    - name: Run step if any of the listed files above is deleted\n      if: steps.changed-files-specific.outputs.any_deleted == 'true'\n      env:\n        DELETED_FILES: |-\n          ${{ steps.changed-files-specific.outputs.deleted_files }}\n      run: |\n        for file in \"$DELETED_FILES\"; do\n          echo \"$file was deleted\"\n        done\n\n    - name: Run step if all listed files above have been deleted\n      if: steps.changed-files-specific.outputs.only_deleted == 'true'\n      env:\n        DELETED_FILES: |-\n          ${{ steps.changed-files-specific.outputs.deleted_files }}\n      run: |\n        for file in \"$DELETED_FILES\"; do\n          echo \"$file was deleted\"\n        done\n...\n```\n\nSee [outputs](#outputs) for a list of all available outputs.\n\n</details>\n\n<details>\n<summary>Get all changed files using a source file or list of file(s) to populate to files input</summary>\n\n```yaml\n...\n    - name: Get changed files using a source file or list of file(s) to populate to files input.\n      id: changed-files-specific-source-file\n      uses: tj-actions/changed-files@v40\n      with:\n        files_from_source_file: test/changed-files-list.txt\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get changed files using a source file or list of file(s) to populate to files input and optionally specify more files</summary>\n\n```yaml\n...\n    - name: Get changed files using a source file or list of file(s) to populate to files input and optionally specify more files.\n      id: changed-files-specific-source-file-and-specify-files\n      uses: tj-actions/changed-files@v40\n      with:\n        files_from_source_file: |\n          test/changed-files-list.txt\n        files: |\n          test.txt\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n\n<summary>Get all changed files using a different SHA</summary>\n\n```yaml\n...\n    - name: Get changed files using a different SHA\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        sha: ${{ github.event.pull_request.head.sha }}\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files using a different base SHA</summary>\n\n```yaml\n...\n    - name: Get changed files using a different base SHA\n      id: changed-files\n      uses: tj-actions/changed-files@v40\n      with:\n        base_sha: ${{ github.event.pull_request.base.sha }}\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files between the previous tag and the current tag</summary>\n\n```yaml\n...\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    name: Release\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Get changed files\n        id: changed-files\n        uses: tj-actions/changed-files@v40\n\n      - name: Get changed files in the .github folder\n        id: changed-files-specific\n        uses: tj-actions/changed-files@v40\n        with:\n          safe_output: false\n          base_sha: ${{ steps.get-base-sha.outputs.base_sha }}\n          files: .github/**\n\n      - name: Run step if any file(s) in the .github folder change\n        if: steps.changed-files-specific.outputs.any_changed == 'true'\n        env:\n          ALL_CHANGED_FILES: |-\n            ${{ steps.changed-files-specific.outputs.all_changed_files }}\n        run: |\n          echo \"One or more files in the .github folder has changed.\"\n          echo \"List all the files that have changed: $ALL_CHANGED_FILES\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files for a repository located in a different path</summary>\n\n```yaml\n...\n    - name: Checkout into dir1\n      uses: actions/checkout@v4\n      with:\n        fetch-depth: 0\n        path: dir1\n\n    - name: Run changed-files with defaults in dir1\n      id: changed-files-for-dir1\n      uses: tj-actions/changed-files@v40\n      with:\n        safe_output: false\n        path: dir1\n\n    - name: List all added files in dir1\n      env:\n        ADDED_FILES: |-\n          ${{ steps.changed-files-for-dir1.outputs.added_files }}\n      run: |\n        for file in \"$ADDED_FILES\"; do\n          echo \"$file was added\"\n        done\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files with non-\u00e4\u0161\u0107\u012f\u00ed characters i.e (Filename in other languages)</summary>\n\n```yaml\n...\n    - name: Run changed-files with quotepath disabled\n      id: changed-files-quotepath\n      uses: tj-actions/changed-files@v40\n      with:\n        quotepath: \"false\"\n\n    - name: Run changed-files with quotepath disabled for a specified list of file(s)\n      id: changed-files-quotepath-specific\n      uses: tj-actions/changed-files@v40\n      with:\n        files: test/test-\u00e8.txt\n        quotepath: \"false\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files using the last successful commit of the base branch</summary>\n\n<ul>\n    <li>\n        <details>\n        <summary>Push event</summary>\n\n```yaml\n...\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v6\n\n      - uses: nrwl/nx-set-shas@v3\n        id: last_successful_commit_push\n        with:\n          main-branch-name: ${{ steps.branch-name.outputs.current_branch }} # Get the last successful commit for the current branch.\n          workflow-id: 'test.yml'\n\n      - name: Run changed-files with the commit of the last successful test workflow run\n        id: changed-files-base-sha-push\n        uses: tj-actions/changed-files@v40\n        with:\n          base_sha: ${{ steps.last_successful_commit_push.outputs.base }}\n...\n```\n\n</details>\n</li>\n\n<li>\n<details>\n<summary>Pull request events </summary>\n\n```yaml\n...\n      - name: Get branch name\n        id: branch-name\n        uses: tj-actions/branch-names@v5\n\n      - uses: nrwl/nx-set-shas@v3\n        id: last_successful_commit_pull_request\n        with:\n          main-branch-name: ${{ steps.branch-name.outputs.base_ref_branch }} # Get the last successful commit on the master or main branch\n          workflow_id: 'test.yml'\n\n      - name: Run changed-files with the commit of the last successful test workflow run on the main branch\n        id: changed-files-base-sha-pull-request\n        uses: tj-actions/changed-files@v40\n        with:\n          base_sha: ${{ steps.last_successful_commit_pull_request.outputs.base }}\n...\n```\n\n</details>\n</li>\n</ul>\n\n> **Warning**\n>\n> This setting overrides the commit sha used by setting `since_last_remote_commit` to true.\n> It is recommended to use either solution that works for your use case.\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files but only return the directory names</summary>\n\n```yaml\n...\n    - name: Run changed-files with dir_names\n      id: changed-files-dir-names\n      uses: tj-actions/changed-files@v40\n      with:\n        dir_names: \"true\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files and return JSON formatted outputs</summary>\n\n```yaml\n...\n    - name: Run changed-files with JSON output\n      id: changed-files-json\n      uses: tj-actions/changed-files@v40\n      with:\n        json: \"true\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n<details>\n<summary>Get all changed files by commits pushed in the past</summary>\n\n```yaml\n...\n    - name: Get changed-files since 2022-08-19\n      id: changed-files-since\n      uses: tj-actions/changed-files@v40\n      with:\n        since: \"2022-08-19\"\n\n    - name: Get changed-files until 2022-08-20\n      id: changed-files-until\n      uses: tj-actions/changed-files@v40\n      with:\n        until: \"2022-08-20\"\n...\n```\n\nSee [inputs](#inputs) for more information.\n\n</details>\n\n## Real-world usage \ud83c\udf10\n\n### Open source projects \ud83d\udce6\n\n*   [vitejs/vite: uses tj-actions/changed-files to automate testing](https://github.com/vitejs/vite/blob/8da04227d6f818a8ad9efc0056101968037c2e36/.github/workflows/ci.yml#L61)\n\n*   [qgis/QGIS: uses tj-actions/changed-files to automate spell checking](https://github.com/qgis/QGIS/blob/a5333497e90ac9de4ca70463d8e0b64c3f294d63/.github/workflows/code_layout.yml#L147)\n\n*   [coder/code-server: uses tj-actions/changed-files to automate detecting changes and run steps based on the outcome](https://github.com/coder/code-server/blob/c32a31d802f679846876b8ad9aacff6cf7b5361d/.github/workflows/build.yaml#L48)\n\n*   [tldr-pages/tldr: uses tj-actions/changed-files to automate detecting spelling errors](https://github.com/tldr-pages/tldr/blob/main/.github/workflows/codespell.yml#L14)\n\n*   [nodejs/docker-node: uses tj-actions/changed-files to generate matrix jobs based on changes detected](https://github.com/nodejs/docker-node/blob/3c4fa6daf06a4786d202f2f610351837806a0380/.github/workflows/build-test.yml#L29)\n\n*   [refined-github: uses tj-actions/changed-files to automate test URL validation in added/edited files](https://github.com/refined-github/refined-github/blob/b754bfe58904da8a599d7876fdaaf18302785629/.github/workflows/features.yml#L35)\n\n*   [aws-doc-sdk-examples: uses tj-actions/changed-files to automate testing](https://github.com/awsdocs/aws-doc-sdk-examples/blob/2393723ef6b0cad9502f4852f5c72f7be58ca89d/.github/workflows/javascript.yml#L22)\n\n*   [nhost: uses tj-actions/changed-files to automate testing based on changes detected](https://github.com/nhost/nhost/blob/main/.github/workflows/ci.yaml#L44-L48)\n\n*   [qmk\\_firmware uses tj-actions/changed-files to run linters](https://github.com/qmk/qmk_firmware/blob/7a737235ffd49c32d2c5561e8fe53fd96baa7f96/.github/workflows/lint.yml#L30)\n\nAnd many more...\n\n### Scalability Example \ud83d\udcc8\n\n![image](https://github.com/tj-actions/changed-files/assets/17484350/23767413-4c51-42fb-ab1c-39ef72c44904)\n\n## Important Notice \u26a0\ufe0f\n\n> \\[!IMPORTANT]\n>\n> *   Spaces in file names can introduce bugs when using bash loops. See: [#216](https://github.com/tj-actions/changed-files/issues/216)\n>     However, this action will handle spaces in file names, with a recommendation of using a separator to prevent any hidden issues.\n>\n>     ![Screen Shot 2021-10-23 at 9 37 34 AM](https://user-images.githubusercontent.com/17484350/138558767-b13c90bf-a1ae-4e86-9520-70a6a4624f41.png)\n\n## Migration guide \ud83d\udd04\n\nWith the switch from using grep's Extended regex to match files to the natively supported workflow glob pattern matching syntax introduced in [v13](https://github.com/tj-actions/changed-files/releases/tag/v13) you'll need to modify patterns used to match `files`.\n\n```diff\n...\n      - name: Get specific changed files\n        id: changed-files-specific\n        uses: tj-actions/changed-files@v24\n        with:\n          files: |\n-            \\.sh$\n-            .(sql|py)$\n-            ^(dir1|dir2)\n+            **/*.{sh,sql,py}\n+            {dir1,dir2}/**\n```\n\n*   Free software: [MIT license](LICENSE)\n\n## Credits \ud83d\udc4f\n\nThis package was created with [cookiecutter-action](https://github.com/tj-actions/cookiecutter-action).\n\n*   [tj-actions/auto-doc](https://github.com/tj-actions/auto-doc)\n*   [tj-actions/verify-changed-files](https://github.com/tj-actions/verify-changed-files)\n*   [tj-actions/demo](https://github.com/tj-actions/demo)\n*   [tj-actions/demo2](https://github.com/tj-actions/demo2)\n*   [tj-actions/demo3](https://github.com/tj-actions/demo3)\n*   [tj-actions/release-tagger](https://github.com/tj-actions/release-tagger)\n\n## Report Bugs \ud83d\udc1b\n\nReport bugs at https://github.com/tj-actions/changed-files/issues.\n\nIf you are reporting a bug, please include:\n\n*   Your operating system name and version.\n*   Any details about your workflow that might be helpful in troubleshooting. (**NOTE**: Ensure that you include full log outputs with debugging enabled)\n*   Detailed steps to reproduce the bug.\n\n## Contributors \u2728\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore-start -->\n\n<!-- markdownlint-disable -->\n\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars.githubusercontent.com/u/2119212?v=4?s=100\" width=\"100px;\" alt=\"Josh Soref\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=jsoref\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/monoxgas\"><img src=\"https://avatars.githubusercontent.com/u/1223016?v=4?s=100\" width=\"100px;\" alt=\"Nick Landers\"/><br /><sub><b>Nick Landers</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=monoxgas\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Kras4ooo\"><img src=\"https://avatars.githubusercontent.com/u/1948054?v=4?s=100\" width=\"100px;\" alt=\"Krasimir Nikolov\"/><br /><sub><b>Krasimir Nikolov</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=Kras4ooo\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=Kras4ooo\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/IvanPizhenko\"><img src=\"https://avatars.githubusercontent.com/u/11859904?v=4?s=100\" width=\"100px;\" alt=\"Ivan Pizhenko\"/><br /><sub><b>Ivan Pizhenko</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=IvanPizhenko\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=IvanPizhenko\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/talva-tr\"><img src=\"https://avatars.githubusercontent.com/u/82046981?v=4?s=100\" width=\"100px;\" alt=\"talva-tr\"/><br /><sub><b>talva-tr</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=talva-tr\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://bandism.net/\"><img src=\"https://avatars.githubusercontent.com/u/22633385?v=4?s=100\" width=\"100px;\" alt=\"Ikko Ashimine\"/><br /><sub><b>Ikko Ashimine</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=eltociear\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/Zamiell\"><img src=\"https://avatars.githubusercontent.com/u/5511220?v=4?s=100\" width=\"100px;\" alt=\"James\"/><br /><sub><b>James</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=Zamiell\" title=\"Documentation\">\ud83d\udcd6</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/wushujames\"><img src=\"https://avatars.githubusercontent.com/u/677529?v=4?s=100\" width=\"100px;\" alt=\"James Cheng\"/><br /><sub><b>James Cheng</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=wushujames\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://qiita.com/SUZUKI_Masaya\"><img src=\"https://avatars.githubusercontent.com/u/15100604?v=4?s=100\" width=\"100px;\" alt=\"Masaya Suzuki\"/><br /><sub><b>Masaya Suzuki</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=massongit\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://fagai.net\"><img src=\"https://avatars.githubusercontent.com/u/1772112?v=4?s=100\" width=\"100px;\" alt=\"fagai\"/><br /><sub><b>fagai</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=fagai\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/pkit\"><img src=\"https://avatars.githubusercontent.com/u/805654?v=4?s=100\" width=\"100px;\" alt=\"Constantine Peresypkin\"/><br /><sub><b>Constantine Peresypkin</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=pkit\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/deronnax\"><img src=\"https://avatars.githubusercontent.com/u/439279?v=4?s=100\" width=\"100px;\" alt=\"Mathieu Dupuy\"/><br /><sub><b>Mathieu Dupuy</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=deronnax\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/JoeOvo\"><img src=\"https://avatars.githubusercontent.com/u/100686542?v=4?s=100\" width=\"100px;\" alt=\"Joe Moggridge\"/><br /><sub><b>Joe Moggridge</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=JoeOvo\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.credly.com/users/thyarles/badges\"><img src=\"https://avatars.githubusercontent.com/u/1340046?v=4?s=100\" width=\"100px;\" alt=\"Charles Santos\"/><br /><sub><b>Charles Santos</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=thyarles\" title=\"Code\">\ud83d\udcbb</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/kostiantyn-korniienko-aurea\"><img src=\"https://avatars.githubusercontent.com/u/37180625?v=4?s=100\" width=\"100px;\" alt=\"Kostiantyn Korniienko\"/><br /><sub><b>Kostiantyn Korniienko</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=kostiantyn-korniienko-aurea\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/lpulley\"><img src=\"https://avatars.githubusercontent.com/u/7193187?v=4?s=100\" width=\"100px;\" alt=\"Logan Pulley\"/><br /><sub><b>Logan Pulley</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=lpulley\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://www.linkedin.com/in/kenji-miyake/\"><img src=\"https://avatars.githubusercontent.com/u/31987104?v=4?s=100\" width=\"100px;\" alt=\"Kenji Miyake\"/><br /><sub><b>Kenji Miyake</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=kenji-miyake\" title=\"Code\">\ud83d\udcbb</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/adonisgarciac\"><img src=\"https://avatars.githubusercontent.com/u/71078987?v=4?s=100\" width=\"100px;\" alt=\"adonisgarciac\"/><br /><sub><b>adonisgarciac</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=adonisgarciac\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=adonisgarciac\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/cfernhout\"><img src=\"https://avatars.githubusercontent.com/u/22294606?v=4?s=100\" width=\"100px;\" alt=\"Chiel Fernhout\"/><br /><sub><b>Chiel Fernhout</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=cfernhout\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/albertoperdomo2\"><img src=\"https://avatars.githubusercontent.com/u/62241095?v=4?s=100\" width=\"100px;\" alt=\"Alberto Perdomo\"/><br /><sub><b>Alberto Perdomo</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=albertoperdomo2\" title=\"Documentation\">\ud83d\udcd6</a></td>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://arthurvolant.com\"><img src=\"https://avatars.githubusercontent.com/u/37664438?v=4?s=100\" width=\"100px;\" alt=\"Arthur\"/><br /><sub><b>Arthur</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/issues?q=author%3AV0lantis\" title=\"Bug reports\">\ud83d\udc1b</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=V0lantis\" title=\"Code\">\ud83d\udcbb</a></td>\n    </tr>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"14.28%\"><a href=\"https://github.com/rodrigorfk\"><img src=\"https://avatars.githubusercontent.com/u/1995033?v=4?s=100\" width=\"100px;\" alt=\"Rodrigo Fior Kuntzer\"/><br /><sub><b>Rodrigo Fior Kuntzer</b></sub></a><br /><a href=\"https://github.com/tj-actions/changed-files/commits?author=rodrigorfk\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/tj-actions/changed-files/commits?author=rodrigorfk\" title=\"Tests\">\u26a0\ufe0f</a> <a href=\"https://github.com/tj-actions/changed-files/issues?q=author%3Arodrigorfk\" title=\"Bug reports\">\ud83d\udc1b</a></td>\n    </tr>\n  </tbody>\n</table>\n\n<!-- markdownlint-restore -->\n\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n", "name: Changed Files\ndescription: Get all Added, Copied, Modified, Deleted, Renamed, Type changed, Unmerged, and Unknown files.\nauthor: tj-actions\n\ninputs:\n  separator:\n    description: \"Split character for output strings.\"\n    required: false\n    default: \" \"\n  include_all_old_new_renamed_files:\n    description: \"Include `all_old_new_renamed_files` output. Note this can generate a large output See: #501.\"\n    required: false\n    default: \"false\"\n  old_new_separator:\n    description: \"Split character for old and new filename pairs.\"\n    required: false\n    default: \",\"\n  old_new_files_separator:\n    description: \"Split character for old and new renamed filename pairs.\"\n    required: false\n    default: \" \"\n  files_from_source_file:\n    description: \"Source file(s) used to populate the `files` input.\"\n    required: false\n    default: \"\"\n  files_from_source_file_separator:\n    description: \"Separator used to split the `files_from_source_file` input.\"\n    default: \"\\n\"\n    required: false\n  files:\n    description: |\n      File and directory patterns used to detect changes (Defaults to the entire repo if unset).\n      NOTE: Multiline file/directory patterns should not include quotes.\n    required: false\n    default: \"\"\n  files_separator:\n    description: \"Separator used to split the `files` input\"\n    default: \"\\n\"\n    required: false\n  files_yaml:\n    description: \"YAML used to define a set of file patterns to detect changes\"\n    required: false\n    default: \"\"\n  files_yaml_from_source_file:\n    description: \"Source file(s) used to populate the `files_yaml` input. Example: https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml\"\n    required: false\n    default: \"\"\n  files_yaml_from_source_file_separator:\n    description: 'Separator used to split the `files_yaml_from_source_file` input'\n    default: \"\\n\"\n    required: false\n  files_ignore_yaml:\n    description: \"YAML used to define a set of file patterns to ignore changes\"\n    required: false\n    default: \"\"\n  files_ignore_yaml_from_source_file:\n    description: \"Source file(s) used to populate the `files_ignore_yaml` input. Example: https://github.com/tj-actions/changed-files/blob/main/test/changed-files.yml\"\n    required: false\n    default: \"\"\n  files_ignore_yaml_from_source_file_separator:\n    description: 'Separator used to split the `files_ignore_yaml_from_source_file` input'\n    default: \"\\n\"\n    required: false\n  files_ignore:\n    description: \"Ignore changes to these file(s). NOTE: Multiline file/directory patterns should not include quotes.\"\n    required: false\n    default: \"\"\n  files_ignore_separator:\n    description: \"Separator used to split the `files_ignore` input\"\n    default: \"\\n\"\n    required: false\n  files_ignore_from_source_file:\n    description: \"Source file(s) used to populate the `files_ignore` input\"\n    required: false\n    default: \"\"\n  files_ignore_from_source_file_separator:\n    description: 'Separator used to split the `files_ignore_from_source_file` input'\n    default: \"\\n\"\n    required: false\n  sha:\n    description: \"Specify a different commit SHA or branch used for comparing changes\"\n    required: false\n  base_sha:\n    description: \"Specify a different base commit SHA or branch used for comparing changes\"\n    required: false\n  since:\n    description: \"Get changed files for commits whose timestamp is older than the given time.\"\n    required: false\n    default: \"\"\n  until:\n    description: \"Get changed files for commits whose timestamp is earlier than the given time.\"\n    required: false\n    default: \"\"\n  path:\n    description: \"Specify a relative path under `$GITHUB_WORKSPACE` to locate the repository.\"\n    required: false\n    default: \".\"\n  quotepath:\n    description: \"Use non-ASCII characters to match files and output the filenames completely verbatim by setting this to `false`\"\n    default: \"true\"\n    required: false\n  diff_relative:\n    description: \"Exclude changes outside the current directory and show path names relative to it. NOTE: This requires you to specify the top-level directory via the `path` input.\"\n    required: false\n    default: \"true\"\n  dir_names:\n    default: \"false\"\n    description: \"Output unique changed directories instead of filenames. NOTE: This returns `.` for changed files located in the current working directory which defaults to `$GITHUB_WORKSPACE`.\"\n    required: false\n  dir_names_max_depth:\n    description: \"Limit the directory output to a maximum depth e.g `test/test1/test2` with max depth of `2` returns `test/test1`.\"\n    required: false\n  dir_names_exclude_current_dir:\n    description: \"Exclude the current directory represented by `.` from the output when `dir_names` is set to `true`.\"\n    required: false\n    default: \"false\"\n  dir_names_include_files:\n    description: \"File and directory patterns to include in the output when `dir_names` is set to `true`. NOTE: This returns only the matching files and also the directory names.\"\n    required: false\n    default: \"\"\n  dir_names_include_files_separator:\n    description: \"Separator used to split the `dir_names_include_files` input\"\n    default: \"\\n\"\n    required: false\n  dir_names_deleted_files_include_only_deleted_dirs:\n    description: \"Include only directories that have been deleted as opposed to directory names of files that have been deleted in the `deleted_files` output when `dir_names` is set to `true`.\"\n    required: false\n    default: \"false\"\n  json:\n    description: \"Output list of changed files in a JSON formatted string which can be used for matrix jobs. Example: https://github.com/tj-actions/changed-files/blob/main/.github/workflows/matrix-test.yml\"\n    required: false\n    default: \"false\"\n  escape_json:\n    description: \"Escape JSON output.\"\n    required: false\n    default: \"true\"\n  safe_output:\n    description: \"Apply sanitization to output filenames before being set as output.\"\n    required: false\n    default: \"true\"\n  fetch_depth:\n    description: \"Depth of additional branch history fetched. NOTE: This can be adjusted to resolve errors with insufficient history.\"\n    required: false\n    default: \"50\"\n  skip_initial_fetch:\n    description: |\n      Skip the initial fetch to improve performance for shallow repositories. \n      NOTE: This could lead to errors with missing history and the intended use is limited to when you've fetched the history necessary to perform the diff.\n    required: false\n    default: \"false\"\n  fetch_additional_submodule_history:\n    description: \"Fetch additional history for submodules.\"\n    required: false\n    default: \"false\"\n  since_last_remote_commit:\n    description: \"Use the last commit on the remote branch as the `base_sha`. Defaults to the last non-merge commit on the target branch for pull request events and the previous remote commit of the current branch for push events.\"\n    required: false\n    default: \"false\"\n  write_output_files:\n    description: \"Write outputs to the `output_dir` defaults to `.github/outputs` folder. NOTE: This creates a `.txt` file by default and a `.json` file if `json` is set to `true`.\"\n    required: false\n    default: \"false\"\n  output_dir:\n    description: \"Directory to store output files.\"\n    required: false\n    default: \".github/outputs\"\n  output_renamed_files_as_deleted_and_added:\n    description: \"Output renamed files as deleted and added files.\"\n    required: false\n    default: \"false\"\n  recover_deleted_files:\n    description: \"Recover deleted files.\"\n    required: false\n    default: \"false\"\n  recover_deleted_files_to_destination:\n    description: \"Recover deleted files to a new destination directory, defaults to the original location.\"\n    required: false\n    default: \"\"\n  recover_files:\n    description: |\n      File and directory patterns used to recover deleted files,\n      defaults to the patterns provided via the `files`, `files_from_source_file`, `files_ignore` and `files_ignore_from_source_file` inputs \n      or all deleted files if no patterns are provided.\n    required: false\n    default: \"\"\n  recover_files_separator:\n    description: \"Separator used to split the `recover_files` input\"\n    default: \"\\n\"\n    required: false\n  recover_files_ignore:\n    description: \"File and directory patterns to ignore when recovering deleted files.\"\n    required: false\n    default: \"\"\n  recover_files_ignore_separator:\n    description: \"Separator used to split the `recover_files_ignore` input\"\n    default: \"\\n\"\n    required: false\n  token:\n    description: \"GitHub token used to fetch changed files from Github's API.\"\n    required: false\n    default: ${{ github.token }}\n  api_url:\n    description: \"Github API URL.\"\n    required: false\n    default: ${{ github.api_url }}\n  fail_on_initial_diff_error:\n    description: \"Fail when the initial diff fails.\"\n    required: false\n    default: \"false\"\n  fail_on_submodule_diff_error:\n    description: \"Fail when the submodule diff fails.\"\n    required: false\n    default: \"false\"\n  negation_patterns_first:\n    description: \"Apply the negation patterns first. NOTE: This affects how changed files are matched.\"\n    required: false\n    default: \"false\"\n\noutputs:\n  added_files:\n    description: \"Returns only files that are Added (A).\"\n  added_files_count:\n    description: \"Returns the number of `added_files`\"\n  copied_files:\n    description: \"Returns only files that are Copied (C).\"\n  copied_files_count:\n    description: \"Returns the number of `copied_files`\"\n  deleted_files:\n    description: \"Returns only files that are Deleted (D).\"\n  deleted_files_count:\n    description: \"Returns the number of `deleted_files`\"\n  modified_files:\n    description: \"Returns only files that are Modified (M).\"\n  modified_files_count:\n    description: \"Returns the number of `modified_files`\"\n  renamed_files:\n    description: \"Returns only files that are Renamed (R).\"\n  renamed_files_count:\n    description: \"Returns the number of `renamed_files`\"\n  all_old_new_renamed_files:\n    description:   \"Returns only files that are Renamed and lists their old and new names. **NOTE:** This requires setting `include_all_old_new_renamed_files` to `true`. Also, keep in mind that this output is global and wouldn't be nested in outputs generated when the `*_yaml_*` input is used. (R)\"\n  all_old_new_renamed_files_count:\n    description:   \"Returns the number of `all_old_new_renamed_files`\"\n  type_changed_files:\n    description: \"Returns only files that have their file type changed (T).\"\n  type_changed_files_count:\n    description: \"Returns the number of `type_changed_files`\"\n  unmerged_files:\n    description: \"Returns only files that are Unmerged (U).\"\n  unmerged_files_count:\n    description: \"Returns the number of `unmerged_files`\"\n  unknown_files:\n    description: \"Returns only files that are Unknown (X).\"\n  unknown_files_count:\n    description: \"Returns the number of `unknown_files`\"\n  all_changed_and_modified_files:\n    description: \"Returns all changed and modified files i.e. *a combination of (ACMRDTUX)*\"\n  all_changed_and_modified_files_count:\n    description: \"Returns the number of `all_changed_and_modified_files`\"\n  all_changed_files:\n    description: \"Returns all changed files i.e. *a combination of all added, copied, modified and renamed files (ACMR)*\"\n  all_changed_files_count:\n    description: \"Returns the number of `all_changed_files`\"\n  any_changed:\n    description: \"Returns `true` when any of the filenames provided using the `files*` or `files_ignore*` inputs has changed. i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.\"\n  only_changed:\n    description: \"Returns `true` when only files provided using the `files*` or `files_ignore*` inputs has changed. i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.\"\n  other_changed_files:\n    description: \"Returns all other changed files not listed in the files input i.e. *includes a combination of all added, copied, modified and renamed files (ACMR)*.\"\n  other_changed_files_count:\n    description: \"Returns the number of `other_changed_files`\"\n  all_modified_files:\n    description: \"Returns all changed files i.e. *a combination of all added, copied, modified, renamed and deleted files (ACMRD)*.\"\n  all_modified_files_count:\n    description: \"Returns the number of `all_modified_files`\"\n  any_modified:\n    description: \"Returns `true` when any of the filenames provided using the `files*` or `files_ignore*` inputs has been modified. i.e. *includes a combination of all added, copied, modified, renamed, and deleted files (ACMRD)*.\"\n  only_modified:\n    description: \"Returns `true` when only files provided using the `files*` or `files_ignore*` inputs has been modified. (ACMRD).\"\n  other_modified_files:\n    description: \"Returns all other modified files not listed in the files input i.e. *a combination of all added, copied, modified, and deleted files (ACMRD)*\"\n  other_modified_files_count:\n    description: \"Returns the number of `other_modified_files`\"\n  any_deleted:\n    description: \"Returns `true` when any of the filenames provided using the `files*` or `files_ignore*` inputs has been deleted. (D)\"\n  only_deleted:\n    description: \"Returns `true` when only files provided using the `files*` or `files_ignore*` inputs has been deleted. (D)\"\n  other_deleted_files:\n    description: \"Returns all other deleted files not listed in the files input i.e. *a  combination of all deleted files (D)*\"\n  other_deleted_files_count:\n    description: \"Returns the number of `other_deleted_files`\"\n  modified_keys:\n    description: \"Returns all modified YAML keys when the `files_yaml` input is used. i.e. *key that contains any path that has either been added, copied, modified, and deleted (ACMRD)*\"\n  changed_keys:\n    description: \"Returns all changed YAML keys when the `files_yaml` input is used. i.e. *key that contains any path that has either been added, copied, modified, and renamed (ACMR)*\"\n\nruns:\n  using: 'node20'\n  main: 'dist/index.js'\n\nbranding:\n  icon: file-text\n  color: white\n", "import * as core from '@actions/core'\nimport path from 'path'\nimport {\n  ChangedFiles,\n  ChangeTypeEnum,\n  getAllChangeTypeFiles,\n  getChangeTypeFiles\n} from './changedFiles'\nimport {Inputs} from './inputs'\nimport {getOutputKey, setArrayOutput, setOutput, exists} from './utils'\n\nconst getArrayFromPaths = (\n  paths: string | string[],\n  inputs: Inputs\n): string[] => {\n  return Array.isArray(paths) ? paths : paths.split(inputs.separator)\n}\n\nexport const setOutputsAndGetModifiedAndChangedFilesStatus = async ({\n  allDiffFiles,\n  allFilteredDiffFiles,\n  inputs,\n  filePatterns = [],\n  outputPrefix = '',\n  workingDirectory\n}: {\n  allDiffFiles: ChangedFiles\n  allFilteredDiffFiles: ChangedFiles\n  inputs: Inputs\n  filePatterns?: string[]\n  outputPrefix?: string\n  workingDirectory?: string\n}): Promise<{anyModified: boolean; anyChanged: boolean}> => {\n  const addedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Added]\n  })\n  core.debug(`Added files: ${JSON.stringify(addedFiles)}`)\n  await setOutput({\n    key: getOutputKey('added_files', outputPrefix),\n    value: addedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n  await setOutput({\n    key: getOutputKey('added_files_count', outputPrefix),\n    value: addedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const copiedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Copied]\n  })\n  core.debug(`Copied files: ${JSON.stringify(copiedFiles)}`)\n  await setOutput({\n    key: getOutputKey('copied_files', outputPrefix),\n    value: copiedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('copied_files_count', outputPrefix),\n    value: copiedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const modifiedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Modified]\n  })\n  core.debug(`Modified files: ${JSON.stringify(modifiedFiles)}`)\n  await setOutput({\n    key: getOutputKey('modified_files', outputPrefix),\n    value: modifiedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('modified_files_count', outputPrefix),\n    value: modifiedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const renamedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Renamed]\n  })\n  core.debug(`Renamed files: ${JSON.stringify(renamedFiles)}`)\n  await setOutput({\n    key: getOutputKey('renamed_files', outputPrefix),\n    value: renamedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('renamed_files_count', outputPrefix),\n    value: renamedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const typeChangedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.TypeChanged]\n  })\n  core.debug(`Type changed files: ${JSON.stringify(typeChangedFiles)}`)\n  await setOutput({\n    key: getOutputKey('type_changed_files', outputPrefix),\n    value: typeChangedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('type_changed_files_count', outputPrefix),\n    value: typeChangedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const unmergedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Unmerged]\n  })\n  core.debug(`Unmerged files: ${JSON.stringify(unmergedFiles)}`)\n  await setOutput({\n    key: getOutputKey('unmerged_files', outputPrefix),\n    value: unmergedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('unmerged_files_count', outputPrefix),\n    value: unmergedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const unknownFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Unknown]\n  })\n  core.debug(`Unknown files: ${JSON.stringify(unknownFiles)}`)\n  await setOutput({\n    key: getOutputKey('unknown_files', outputPrefix),\n    value: unknownFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('unknown_files_count', outputPrefix),\n    value: unknownFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const allChangedAndModifiedFiles = await getAllChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles\n  })\n  core.debug(\n    `All changed and modified files: ${JSON.stringify(\n      allChangedAndModifiedFiles\n    )}`\n  )\n  await setOutput({\n    key: getOutputKey('all_changed_and_modified_files', outputPrefix),\n    value: allChangedAndModifiedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('all_changed_and_modified_files_count', outputPrefix),\n    value: allChangedAndModifiedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const allChangedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [\n      ChangeTypeEnum.Added,\n      ChangeTypeEnum.Copied,\n      ChangeTypeEnum.Modified,\n      ChangeTypeEnum.Renamed\n    ]\n  })\n  core.debug(`All changed files: ${JSON.stringify(allChangedFiles)}`)\n  await setOutput({\n    key: getOutputKey('all_changed_files', outputPrefix),\n    value: allChangedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('all_changed_files_count', outputPrefix),\n    value: allChangedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  await setOutput({\n    key: getOutputKey('any_changed', outputPrefix),\n    value: allChangedFiles.paths.length > 0 && filePatterns.length > 0,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  const allOtherChangedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allDiffFiles,\n    changeTypes: [\n      ChangeTypeEnum.Added,\n      ChangeTypeEnum.Copied,\n      ChangeTypeEnum.Modified,\n      ChangeTypeEnum.Renamed\n    ]\n  })\n  core.debug(`All other changed files: ${JSON.stringify(allOtherChangedFiles)}`)\n\n  const allOtherChangedFilesPaths: string[] = getArrayFromPaths(\n    allOtherChangedFiles.paths,\n    inputs\n  )\n  const allChangedFilesPaths: string[] = getArrayFromPaths(\n    allChangedFiles.paths,\n    inputs\n  )\n\n  const otherChangedFiles = allOtherChangedFilesPaths.filter(\n    (filePath: string) => !allChangedFilesPaths.includes(filePath)\n  )\n\n  const onlyChanged =\n    otherChangedFiles.length === 0 &&\n    allChangedFiles.paths.length > 0 &&\n    filePatterns.length > 0\n\n  await setOutput({\n    key: getOutputKey('only_changed', outputPrefix),\n    value: onlyChanged,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  await setArrayOutput({\n    key: 'other_changed_files',\n    inputs,\n    value: otherChangedFiles,\n    outputPrefix\n  })\n\n  await setOutput({\n    key: getOutputKey('other_changed_files_count', outputPrefix),\n    value: otherChangedFiles.length.toString(),\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const allModifiedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [\n      ChangeTypeEnum.Added,\n      ChangeTypeEnum.Copied,\n      ChangeTypeEnum.Modified,\n      ChangeTypeEnum.Renamed,\n      ChangeTypeEnum.Deleted\n    ]\n  })\n  core.debug(`All modified files: ${JSON.stringify(allModifiedFiles)}`)\n  await setOutput({\n    key: getOutputKey('all_modified_files', outputPrefix),\n    value: allModifiedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('all_modified_files_count', outputPrefix),\n    value: allModifiedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  await setOutput({\n    key: getOutputKey('any_modified', outputPrefix),\n    value: allModifiedFiles.paths.length > 0 && filePatterns.length > 0,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  const allOtherModifiedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allDiffFiles,\n    changeTypes: [\n      ChangeTypeEnum.Added,\n      ChangeTypeEnum.Copied,\n      ChangeTypeEnum.Modified,\n      ChangeTypeEnum.Renamed,\n      ChangeTypeEnum.Deleted\n    ]\n  })\n\n  const allOtherModifiedFilesPaths: string[] = getArrayFromPaths(\n    allOtherModifiedFiles.paths,\n    inputs\n  )\n\n  const allModifiedFilesPaths: string[] = getArrayFromPaths(\n    allModifiedFiles.paths,\n    inputs\n  )\n\n  const otherModifiedFiles = allOtherModifiedFilesPaths.filter(\n    (filePath: string) => !allModifiedFilesPaths.includes(filePath)\n  )\n\n  const onlyModified =\n    otherModifiedFiles.length === 0 &&\n    allModifiedFiles.paths.length > 0 &&\n    filePatterns.length > 0\n\n  await setOutput({\n    key: getOutputKey('only_modified', outputPrefix),\n    value: onlyModified,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  await setArrayOutput({\n    key: 'other_modified_files',\n    inputs,\n    value: otherModifiedFiles,\n    outputPrefix\n  })\n\n  await setOutput({\n    key: getOutputKey('other_modified_files_count', outputPrefix),\n    value: otherModifiedFiles.length.toString(),\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  const deletedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allFilteredDiffFiles,\n    changeTypes: [ChangeTypeEnum.Deleted]\n  })\n  core.debug(`Deleted files: ${JSON.stringify(deletedFiles)}`)\n\n  if (\n    inputs.dirNamesDeletedFilesIncludeOnlyDeletedDirs &&\n    inputs.dirNames &&\n    workingDirectory\n  ) {\n    const newDeletedFilesPaths: string[] = []\n    for (const deletedPath of getArrayFromPaths(deletedFiles.paths, inputs)) {\n      const dirPath = path.join(workingDirectory, deletedPath)\n      core.debug(`Checking if directory exists: ${dirPath}`)\n      if (!(await exists(dirPath))) {\n        core.debug(`Directory not found: ${dirPath}`)\n        newDeletedFilesPaths.push(deletedPath)\n      }\n    }\n    deletedFiles.paths = inputs.json\n      ? newDeletedFilesPaths\n      : newDeletedFilesPaths.join(inputs.separator)\n    deletedFiles.count = newDeletedFilesPaths.length.toString()\n    core.debug(`New deleted files: ${JSON.stringify(deletedFiles)}`)\n  }\n\n  await setOutput({\n    key: getOutputKey('deleted_files', outputPrefix),\n    value: deletedFiles.paths,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n\n  await setOutput({\n    key: getOutputKey('deleted_files_count', outputPrefix),\n    value: deletedFiles.count,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  await setOutput({\n    key: getOutputKey('any_deleted', outputPrefix),\n    value: deletedFiles.paths.length > 0 && filePatterns.length > 0,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  const allOtherDeletedFiles = await getChangeTypeFiles({\n    inputs,\n    changedFiles: allDiffFiles,\n    changeTypes: [ChangeTypeEnum.Deleted]\n  })\n\n  const allOtherDeletedFilesPaths: string[] = getArrayFromPaths(\n    allOtherDeletedFiles.paths,\n    inputs\n  )\n\n  const deletedFilesPaths: string[] = getArrayFromPaths(\n    deletedFiles.paths,\n    inputs\n  )\n\n  const otherDeletedFiles = allOtherDeletedFilesPaths.filter(\n    filePath => !deletedFilesPaths.includes(filePath)\n  )\n\n  const onlyDeleted =\n    otherDeletedFiles.length === 0 &&\n    deletedFiles.paths.length > 0 &&\n    filePatterns.length > 0\n\n  await setOutput({\n    key: getOutputKey('only_deleted', outputPrefix),\n    value: onlyDeleted,\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json\n  })\n\n  await setArrayOutput({\n    key: 'other_deleted_files',\n    inputs,\n    value: otherDeletedFiles,\n    outputPrefix\n  })\n\n  await setOutput({\n    key: getOutputKey('other_deleted_files_count', outputPrefix),\n    value: otherDeletedFiles.length.toString(),\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir\n  })\n\n  return {\n    anyModified: allModifiedFiles.paths.length > 0 && filePatterns.length > 0,\n    anyChanged: allChangedFiles.paths.length > 0 && filePatterns.length > 0\n  }\n}\n", "import * as core from '@actions/core'\n\nexport type Inputs = {\n  files: string\n  filesSeparator: string\n  filesFromSourceFile: string\n  filesFromSourceFileSeparator: string\n  filesYaml: string\n  filesYamlFromSourceFile: string\n  filesYamlFromSourceFileSeparator: string\n  filesIgnore: string\n  filesIgnoreSeparator: string\n  filesIgnoreFromSourceFile: string\n  filesIgnoreFromSourceFileSeparator: string\n  filesIgnoreYaml: string\n  filesIgnoreYamlFromSourceFile: string\n  filesIgnoreYamlFromSourceFileSeparator: string\n  separator: string\n  includeAllOldNewRenamedFiles: boolean\n  oldNewSeparator: string\n  oldNewFilesSeparator: string\n  sha: string\n  baseSha: string\n  since: string\n  until: string\n  path: string\n  quotePath: boolean\n  diffRelative: boolean\n  dirNames: boolean\n  dirNamesMaxDepth?: number\n  dirNamesExcludeCurrentDir: boolean\n  dirNamesIncludeFiles: string\n  dirNamesIncludeFilesSeparator: string\n  dirNamesDeletedFilesIncludeOnlyDeletedDirs: boolean\n  json: boolean\n  escapeJson: boolean\n  safeOutput: boolean\n  fetchDepth?: number\n  fetchSubmoduleHistory: boolean\n  sinceLastRemoteCommit: boolean\n  writeOutputFiles: boolean\n  outputDir: string\n  outputRenamedFilesAsDeletedAndAdded: boolean\n  recoverDeletedFiles: boolean\n  recoverDeletedFilesToDestination: string\n  recoverFiles: string\n  recoverFilesSeparator: string\n  recoverFilesIgnore: string\n  recoverFilesIgnoreSeparator: string\n  token: string\n  apiUrl: string\n  skipInitialFetch: boolean\n  failOnInitialDiffError: boolean\n  failOnSubmoduleDiffError: boolean\n  negationPatternsFirst: boolean\n}\n\nexport const getInputs = (): Inputs => {\n  const files = core.getInput('files', {required: false})\n  const filesSeparator = core.getInput('files_separator', {\n    required: false,\n    trimWhitespace: false\n  })\n  const filesIgnore = core.getInput('files_ignore', {required: false})\n  const filesIgnoreSeparator = core.getInput('files_ignore_separator', {\n    required: false,\n    trimWhitespace: false\n  })\n  const filesFromSourceFile = core.getInput('files_from_source_file', {\n    required: false\n  })\n  const filesFromSourceFileSeparator = core.getInput(\n    'files_from_source_file_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const filesYaml = core.getInput('files_yaml', {required: false})\n  const filesYamlFromSourceFile = core.getInput('files_yaml_from_source_file', {\n    required: false\n  })\n  const filesYamlFromSourceFileSeparator = core.getInput(\n    'files_yaml_from_source_file_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const filesIgnoreFromSourceFile = core.getInput(\n    'files_ignore_from_source_file',\n    {required: false}\n  )\n  const filesIgnoreFromSourceFileSeparator = core.getInput(\n    'files_ignore_from_source_file_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const filesIgnoreYaml = core.getInput('files_ignore_yaml', {required: false})\n  const filesIgnoreYamlFromSourceFile = core.getInput(\n    'files_ignore_yaml_from_source_file',\n    {required: false}\n  )\n  const filesIgnoreYamlFromSourceFileSeparator = core.getInput(\n    'files_ignore_yaml_from_source_file_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const separator = core.getInput('separator', {\n    required: true,\n    trimWhitespace: false\n  })\n  const includeAllOldNewRenamedFiles = core.getBooleanInput(\n    'include_all_old_new_renamed_files',\n    {required: false}\n  )\n  const oldNewSeparator = core.getInput('old_new_separator', {\n    required: true,\n    trimWhitespace: false\n  })\n  const oldNewFilesSeparator = core.getInput('old_new_files_separator', {\n    required: true,\n    trimWhitespace: false\n  })\n  const sha = core.getInput('sha', {required: false})\n  const baseSha = core.getInput('base_sha', {required: false})\n  const since = core.getInput('since', {required: false})\n  const until = core.getInput('until', {required: false})\n  const path = core.getInput('path', {required: false})\n  const quotePath = core.getBooleanInput('quotepath', {required: false})\n  const diffRelative = core.getBooleanInput('diff_relative', {required: false})\n  const dirNames = core.getBooleanInput('dir_names', {required: false})\n  const dirNamesMaxDepth = core.getInput('dir_names_max_depth', {\n    required: false\n  })\n  const dirNamesExcludeCurrentDir = core.getBooleanInput(\n    'dir_names_exclude_current_dir',\n    {\n      required: false\n    }\n  )\n  const dirNamesIncludeFiles = core.getInput('dir_names_include_files', {\n    required: false\n  })\n  const dirNamesIncludeFilesSeparator = core.getInput(\n    'dir_names_include_files_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const json = core.getBooleanInput('json', {required: false})\n  const escapeJson = core.getBooleanInput('escape_json', {required: false})\n  const safeOutput = core.getBooleanInput('safe_output', {required: false})\n  const fetchDepth = core.getInput('fetch_depth', {required: false})\n  const sinceLastRemoteCommit = core.getBooleanInput(\n    'since_last_remote_commit',\n    {required: false}\n  )\n  const writeOutputFiles = core.getBooleanInput('write_output_files', {\n    required: false\n  })\n  const outputDir = core.getInput('output_dir', {required: false})\n  const outputRenamedFilesAsDeletedAndAdded = core.getBooleanInput(\n    'output_renamed_files_as_deleted_and_added',\n    {required: false}\n  )\n  const recoverDeletedFiles = core.getBooleanInput('recover_deleted_files', {\n    required: false\n  })\n  const recoverDeletedFilesToDestination = core.getInput(\n    'recover_deleted_files_to_destination',\n    {required: false}\n  )\n  const recoverFiles = core.getInput('recover_files', {required: false})\n  const recoverFilesSeparator = core.getInput('recover_files_separator', {\n    required: false,\n    trimWhitespace: false\n  })\n  const recoverFilesIgnore = core.getInput('recover_files_ignore', {\n    required: false\n  })\n  const recoverFilesIgnoreSeparator = core.getInput(\n    'recover_files_ignore_separator',\n    {\n      required: false,\n      trimWhitespace: false\n    }\n  )\n  const token = core.getInput('token', {required: false})\n  const apiUrl = core.getInput('api_url', {required: false})\n  const skipInitialFetch = core.getBooleanInput('skip_initial_fetch', {\n    required: false\n  })\n  const fetchSubmoduleHistory = core.getBooleanInput(\n    'fetch_additional_submodule_history',\n    {\n      required: false\n    }\n  )\n  const failOnInitialDiffError = core.getBooleanInput(\n    'fail_on_initial_diff_error',\n    {\n      required: false\n    }\n  )\n  const failOnSubmoduleDiffError = core.getBooleanInput(\n    'fail_on_submodule_diff_error',\n    {\n      required: false\n    }\n  )\n  const dirNamesDeletedFilesIncludeOnlyDeletedDirs = core.getBooleanInput(\n    'dir_names_deleted_files_include_only_deleted_dirs',\n    {\n      required: false\n    }\n  )\n\n  const negationPatternsFirst = core.getBooleanInput(\n    'negation_patterns_first',\n    {\n      required: false\n    }\n  )\n\n  const inputs: Inputs = {\n    files,\n    filesSeparator,\n    filesFromSourceFile,\n    filesFromSourceFileSeparator,\n    filesYaml,\n    filesYamlFromSourceFile,\n    filesYamlFromSourceFileSeparator,\n    filesIgnore,\n    filesIgnoreSeparator,\n    filesIgnoreFromSourceFile,\n    filesIgnoreFromSourceFileSeparator,\n    filesIgnoreYaml,\n    filesIgnoreYamlFromSourceFile,\n    filesIgnoreYamlFromSourceFileSeparator,\n    failOnInitialDiffError,\n    failOnSubmoduleDiffError,\n    separator,\n    // Not Supported via REST API\n    sha,\n    baseSha,\n    since,\n    until,\n    path,\n    quotePath,\n    diffRelative,\n    sinceLastRemoteCommit,\n    recoverDeletedFiles,\n    recoverDeletedFilesToDestination,\n    recoverFiles,\n    recoverFilesSeparator,\n    recoverFilesIgnore,\n    recoverFilesIgnoreSeparator,\n    includeAllOldNewRenamedFiles,\n    oldNewSeparator,\n    oldNewFilesSeparator,\n    skipInitialFetch,\n    fetchSubmoduleHistory,\n    dirNamesDeletedFilesIncludeOnlyDeletedDirs,\n    // End Not Supported via REST API\n    dirNames,\n    dirNamesExcludeCurrentDir,\n    dirNamesIncludeFiles,\n    dirNamesIncludeFilesSeparator,\n    json,\n    escapeJson,\n    safeOutput,\n    writeOutputFiles,\n    outputDir,\n    outputRenamedFilesAsDeletedAndAdded,\n    token,\n    apiUrl,\n    negationPatternsFirst\n  }\n\n  if (fetchDepth) {\n    inputs.fetchDepth = Math.max(parseInt(fetchDepth, 10), 2)\n  }\n\n  if (dirNamesMaxDepth) {\n    inputs.dirNamesMaxDepth = parseInt(dirNamesMaxDepth, 10)\n  }\n\n  return inputs\n}\n", "import * as core from '@actions/core'\nimport * as github from '@actions/github'\nimport path from 'path'\nimport {\n  processChangedFiles,\n  ChangeTypeEnum,\n  getAllDiffFiles,\n  getChangedFilesFromGithubAPI,\n  getRenamedFiles\n} from './changedFiles'\nimport {\n  DiffResult,\n  getSHAForNonPullRequestEvent,\n  getSHAForPullRequestEvent\n} from './commitSha'\nimport {Env, getEnv} from './env'\nimport {getInputs, Inputs} from './inputs'\nimport {\n  getFilePatterns,\n  getRecoverFilePatterns,\n  getSubmodulePath,\n  getYamlFilePatterns,\n  hasLocalGitDirectory,\n  isRepoShallow,\n  recoverDeletedFiles,\n  setOutput,\n  submoduleExists,\n  updateGitGlobalConfig,\n  verifyMinimumGitVersion\n} from './utils'\n\nconst getChangedFilesFromLocalGitHistory = async ({\n  inputs,\n  env,\n  workingDirectory,\n  filePatterns,\n  yamlFilePatterns\n}: {\n  inputs: Inputs\n  env: Env\n  workingDirectory: string\n  filePatterns: string[]\n  yamlFilePatterns: Record<string, string[]>\n}): Promise<void> => {\n  await verifyMinimumGitVersion()\n\n  let quotePathValue = 'on'\n\n  if (!inputs.quotePath) {\n    quotePathValue = 'off'\n  }\n\n  await updateGitGlobalConfig({\n    name: 'core.quotepath',\n    value: quotePathValue\n  })\n\n  if (inputs.diffRelative) {\n    await updateGitGlobalConfig({\n      name: 'diff.relative',\n      value: 'true'\n    })\n  }\n\n  const isShallow = await isRepoShallow({cwd: workingDirectory})\n  const hasSubmodule = await submoduleExists({cwd: workingDirectory})\n  let gitFetchExtraArgs = ['--no-tags', '--prune', '--recurse-submodules']\n  const isTag = env.GITHUB_REF?.startsWith('refs/tags/')\n  const outputRenamedFilesAsDeletedAndAdded =\n    inputs.outputRenamedFilesAsDeletedAndAdded\n  let submodulePaths: string[] = []\n\n  if (hasSubmodule) {\n    submodulePaths = await getSubmodulePath({cwd: workingDirectory})\n  }\n\n  if (isTag) {\n    gitFetchExtraArgs = ['--prune', '--no-recurse-submodules']\n  }\n\n  let diffResult: DiffResult\n\n  if (!github.context.payload.pull_request?.base?.ref) {\n    core.info(`Running on a ${github.context.eventName || 'push'} event...`)\n    diffResult = await getSHAForNonPullRequestEvent(\n      inputs,\n      env,\n      workingDirectory,\n      isShallow,\n      hasSubmodule,\n      gitFetchExtraArgs,\n      isTag\n    )\n  } else {\n    core.info(\n      `Running on a ${github.context.eventName || 'pull_request'} (${\n        github.context.payload.action\n      }) event...`\n    )\n    diffResult = await getSHAForPullRequestEvent(\n      inputs,\n      env,\n      workingDirectory,\n      isShallow,\n      hasSubmodule,\n      gitFetchExtraArgs\n    )\n  }\n\n  if (diffResult.initialCommit) {\n    core.info('This is the first commit for this repository; exiting...')\n    core.endGroup()\n    return\n  }\n\n  core.info(\n    `Retrieving changes between ${diffResult.previousSha} (${diffResult.targetBranch}) \u2192 ${diffResult.currentSha} (${diffResult.currentBranch})`\n  )\n\n  const allDiffFiles = await getAllDiffFiles({\n    workingDirectory,\n    hasSubmodule,\n    diffResult,\n    submodulePaths,\n    outputRenamedFilesAsDeletedAndAdded,\n    fetchSubmoduleHistory: inputs.fetchSubmoduleHistory,\n    failOnInitialDiffError: inputs.failOnInitialDiffError,\n    failOnSubmoduleDiffError: inputs.failOnSubmoduleDiffError\n  })\n  core.debug(`All diff files: ${JSON.stringify(allDiffFiles)}`)\n  core.info('All Done!')\n  core.endGroup()\n\n  if (inputs.recoverDeletedFiles) {\n    let recoverPatterns = getRecoverFilePatterns({inputs})\n\n    if (recoverPatterns.length > 0 && filePatterns.length > 0) {\n      core.info('No recover patterns found; defaulting to file patterns')\n      recoverPatterns = filePatterns\n    }\n\n    await recoverDeletedFiles({\n      inputs,\n      workingDirectory,\n      deletedFiles: allDiffFiles[ChangeTypeEnum.Deleted],\n      recoverPatterns,\n      diffResult,\n      hasSubmodule,\n      submodulePaths\n    })\n  }\n\n  await processChangedFiles({\n    filePatterns,\n    allDiffFiles,\n    inputs,\n    yamlFilePatterns,\n    workingDirectory\n  })\n\n  if (inputs.includeAllOldNewRenamedFiles) {\n    core.startGroup('changed-files-all-old-new-renamed-files')\n    const allOldNewRenamedFiles = await getRenamedFiles({\n      inputs,\n      workingDirectory,\n      hasSubmodule,\n      diffResult,\n      submodulePaths\n    })\n    core.debug(`All old new renamed files: ${allOldNewRenamedFiles}`)\n    await setOutput({\n      key: 'all_old_new_renamed_files',\n      value: allOldNewRenamedFiles.paths,\n      writeOutputFiles: inputs.writeOutputFiles,\n      outputDir: inputs.outputDir,\n      json: inputs.json,\n      safeOutput: inputs.safeOutput\n    })\n    await setOutput({\n      key: 'all_old_new_renamed_files_count',\n      value: allOldNewRenamedFiles.count,\n      writeOutputFiles: inputs.writeOutputFiles,\n      outputDir: inputs.outputDir,\n      json: inputs.json\n    })\n    core.info('All Done!')\n    core.endGroup()\n  }\n}\n\nconst getChangedFilesFromRESTAPI = async ({\n  inputs,\n  filePatterns,\n  yamlFilePatterns\n}: {\n  inputs: Inputs\n  filePatterns: string[]\n  yamlFilePatterns: Record<string, string[]>\n}): Promise<void> => {\n  const allDiffFiles = await getChangedFilesFromGithubAPI({\n    inputs\n  })\n  core.debug(`All diff files: ${JSON.stringify(allDiffFiles)}`)\n  core.info('All Done!')\n\n  await processChangedFiles({\n    filePatterns,\n    allDiffFiles,\n    inputs,\n    yamlFilePatterns\n  })\n}\n\nexport async function run(): Promise<void> {\n  core.startGroup('changed-files')\n\n  const env = await getEnv()\n  core.debug(`Env: ${JSON.stringify(env, null, 2)}`)\n\n  const inputs = getInputs()\n  core.debug(`Inputs: ${JSON.stringify(inputs, null, 2)}`)\n\n  core.debug(`Github Context: ${JSON.stringify(github.context, null, 2)}`)\n\n  const workingDirectory = path.resolve(\n    env.GITHUB_WORKSPACE || process.cwd(),\n    inputs.path\n  )\n  core.debug(`Working directory: ${workingDirectory}`)\n\n  const hasGitDirectory = await hasLocalGitDirectory({workingDirectory})\n  core.debug(`Has git directory: ${hasGitDirectory}`)\n\n  const filePatterns = await getFilePatterns({\n    inputs,\n    workingDirectory\n  })\n  core.debug(`File patterns: ${filePatterns}`)\n\n  const yamlFilePatterns = await getYamlFilePatterns({\n    inputs,\n    workingDirectory\n  })\n  core.debug(`Yaml file patterns: ${JSON.stringify(yamlFilePatterns)}`)\n\n  if (\n    inputs.token &&\n    github.context.payload.pull_request?.number &&\n    !hasGitDirectory\n  ) {\n    core.info(\"Using GitHub's REST API to get changed files\")\n    const unsupportedInputs: (keyof Inputs)[] = [\n      'sha',\n      'baseSha',\n      'since',\n      'until',\n      'sinceLastRemoteCommit',\n      'recoverDeletedFiles',\n      'recoverDeletedFilesToDestination',\n      'recoverFiles',\n      'recoverFilesIgnore',\n      'includeAllOldNewRenamedFiles',\n      'skipInitialFetch',\n      'fetchSubmoduleHistory',\n      'dirNamesDeletedFilesIncludeOnlyDeletedDirs'\n    ]\n\n    for (const input of unsupportedInputs) {\n      if (inputs[input]) {\n        core.warning(\n          `Input \"${input}\" is not supported when using GitHub's REST API to get changed files`\n        )\n      }\n    }\n    await getChangedFilesFromRESTAPI({\n      inputs,\n      filePatterns,\n      yamlFilePatterns\n    })\n  } else {\n    if (!hasGitDirectory) {\n      core.setFailed(\n        \"Can't find local .git directory. Please run actions/checkout before this action\"\n      )\n      return\n    }\n\n    core.info('Using local .git directory')\n    await getChangedFilesFromLocalGitHistory({\n      inputs,\n      env,\n      workingDirectory,\n      filePatterns,\n      yamlFilePatterns\n    })\n  }\n}\n\n/* istanbul ignore if */\nif (!process.env.TESTING) {\n  // eslint-disable-next-line github/no-then\n  run().catch(e => {\n    core.setFailed(e.message || e)\n  })\n}\n", "/*global AsyncIterableIterator*/\nimport * as core from '@actions/core'\nimport * as exec from '@actions/exec'\nimport * as github from '@actions/github'\nimport {createReadStream, promises as fs} from 'fs'\nimport {readFile} from 'fs/promises'\nimport {flattenDeep} from 'lodash'\nimport mm from 'micromatch'\nimport * as path from 'path'\nimport {createInterface} from 'readline'\nimport {parseDocument} from 'yaml'\nimport {ChangedFiles, ChangeTypeEnum} from './changedFiles'\nimport {DiffResult} from './commitSha'\nimport {Inputs} from './inputs'\n\nconst MINIMUM_GIT_VERSION = '2.18.0'\n\nexport const isWindows = (): boolean => {\n  return process.platform === 'win32'\n}\n\n/**\n * Normalize file path separators to '/' on Linux/macOS and '\\\\' on Windows\n * @param p - file path\n * @returns file path with normalized separators\n */\nexport const normalizeSeparators = (p: string): string => {\n  // Windows\n  if (isWindows()) {\n    // Convert slashes on Windows\n    p = p.replace(/\\//g, '\\\\')\n\n    // Remove redundant slashes\n    const isUnc = /^\\\\\\\\+[^\\\\]/.test(p) // e.g. \\\\hello\n    return (isUnc ? '\\\\' : '') + p.replace(/\\\\\\\\+/g, '\\\\') // preserve leading \\\\ for UNC\n  }\n\n  // Remove redundant slashes\n  return p.replace(/\\/\\/+/g, '/')\n}\n\n/**\n * Trims unnecessary trailing slash from file path\n * @param p - file path\n * @returns file path without unnecessary trailing slash\n */\nconst safeTrimTrailingSeparator = (p: string): string => {\n  // Empty path\n  if (!p) {\n    return ''\n  }\n\n  // Normalize separators\n  p = normalizeSeparators(p)\n\n  // No trailing slash\n  if (!p.endsWith(path.sep)) {\n    return p\n  }\n\n  // Check '/' on Linux/macOS and '\\' on Windows\n  if (p === path.sep) {\n    return p\n  }\n\n  // On Windows, avoid trimming the drive root, e.g. C:\\ or \\\\hello\n  if (isWindows() && /^[A-Z]:\\\\$/i.test(p)) {\n    return p\n  }\n\n  // Trim trailing slash\n  return p.substring(0, p.length - 1)\n}\n\n/**\n * Gets the dirname of a path, similar to the Node.js path.dirname() function except that this function\n * also works for Windows UNC root paths, e.g. \\\\hello\\world\n * @param p - file path\n * @returns dirname of path\n */\nexport const getDirname = (p: string): string => {\n  // Normalize slashes and trim unnecessary trailing slash\n  p = safeTrimTrailingSeparator(p)\n\n  // Windows UNC root, e.g. \\\\hello or \\\\hello\\world\n  if (isWindows() && /^\\\\\\\\[^\\\\]+(\\\\[^\\\\]+)?$/.test(p)) {\n    return p\n  }\n\n  // Get dirname\n  let result = path.dirname(p)\n\n  // Trim trailing slash for Windows UNC root, e.g. \\\\hello\\world\\\n  if (isWindows() && /^\\\\\\\\[^\\\\]+\\\\[^\\\\]+\\\\$/.test(result)) {\n    result = safeTrimTrailingSeparator(result)\n  }\n\n  return result\n}\n\n/**\n * Converts the version string to a number\n * @param version - version string\n * @returns version number\n */\nconst versionToNumber = (version: string): number => {\n  const [major, minor, patch] = version.split('.').map(Number)\n  return major * 1000000 + minor * 1000 + patch\n}\n\n/**\n * Verifies the minimum required git version\n * @returns minimum required git version\n * @throws Minimum git version requirement is not met\n * @throws Git is not installed\n * @throws Git is not found in PATH\n * @throws An unexpected error occurred\n */\nexport const verifyMinimumGitVersion = async (): Promise<void> => {\n  const {exitCode, stdout, stderr} = await exec.getExecOutput(\n    'git',\n    ['--version'],\n    {silent: !core.isDebug()}\n  )\n\n  if (exitCode !== 0) {\n    throw new Error(stderr || 'An unexpected error occurred')\n  }\n\n  const gitVersion = stdout.trim()\n\n  if (versionToNumber(gitVersion) < versionToNumber(MINIMUM_GIT_VERSION)) {\n    throw new Error(\n      `Minimum required git version is ${MINIMUM_GIT_VERSION}, your version is ${gitVersion}`\n    )\n  }\n}\n\n/**\n * Checks if a path exists\n * @param filePath - path to check\n * @returns path exists\n */\nexport const exists = async (filePath: string): Promise<boolean> => {\n  try {\n    await fs.access(filePath)\n    return true\n  } catch {\n    return false\n  }\n}\n\n/**\n * Generates lines of a file as an async iterable iterator\n * @param filePath - path of file to read\n * @param excludedFiles - whether to exclude files\n */\nasync function* lineOfFileGenerator({\n  filePath,\n  excludedFiles\n}: {\n  filePath: string\n  excludedFiles: boolean\n}): AsyncIterableIterator<string> {\n  const fileStream = createReadStream(filePath)\n  /* istanbul ignore next */\n  fileStream.on('error', error => {\n    throw error\n  })\n  const rl = createInterface({\n    input: fileStream,\n    crlfDelay: Infinity\n  })\n  for await (const line of rl) {\n    if (!line.startsWith('#') && line !== '') {\n      if (excludedFiles) {\n        if (line.startsWith('!')) {\n          yield line\n        } else {\n          yield `!${line}`\n        }\n      } else {\n        yield line\n      }\n    }\n  }\n}\n\n/**\n * Gets the file patterns from a source file\n * @param filePaths - paths of files to read\n * @param excludedFiles - whether to exclude the file patterns\n */\nconst getFilesFromSourceFile = async ({\n  filePaths,\n  excludedFiles = false\n}: {\n  filePaths: string[]\n  excludedFiles?: boolean\n}): Promise<string[]> => {\n  const lines: string[] = []\n  for (const filePath of filePaths) {\n    for await (const line of lineOfFileGenerator({filePath, excludedFiles})) {\n      lines.push(line)\n    }\n  }\n  return lines\n}\n\n/**\n * Sets the global git configs\n * @param name - name of config\n * @param value - value of config\n * @throws Couldn't update git global config\n */\nexport const updateGitGlobalConfig = async ({\n  name,\n  value\n}: {\n  name: string\n  value: string\n}): Promise<void> => {\n  const {exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['config', '--global', name, value],\n    {\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  /* istanbul ignore if */\n  if (exitCode !== 0 || stderr) {\n    core.warning(stderr || `Couldn't update git global config ${name}`)\n  }\n}\n\n/**\n * Checks if a git repository is shallow\n * @param cwd - working directory\n * @returns repository is shallow\n */\nexport const isRepoShallow = async ({cwd}: {cwd: string}): Promise<boolean> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--is-shallow-repository'],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  return stdout.trim() === 'true'\n}\n\n/**\n * Checks if a submodule exists\n * @param cwd - working directory\n * @returns submodule exists\n */\nexport const submoduleExists = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<boolean> => {\n  const {stdout, exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['submodule', 'status'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    core.warning(stderr || \"Couldn't list submodules\")\n    return false\n  }\n\n  return stdout.trim() !== ''\n}\n\n/**\n * Fetches the git repository\n * @param args - arguments for fetch command\n * @param cwd - working directory\n */\nexport const gitFetch = async ({\n  args,\n  cwd\n}: {\n  args: string[]\n  cwd: string\n}): Promise<number> => {\n  const {exitCode} = await exec.getExecOutput('git', ['fetch', '-q', ...args], {\n    cwd,\n    ignoreReturnCode: true,\n    silent: !core.isDebug()\n  })\n\n  return exitCode\n}\n\n/**\n * Fetches the git repository submodules\n * @param args - arguments for fetch command\n * @param cwd - working directory\n */\nexport const gitFetchSubmodules = async ({\n  args,\n  cwd\n}: {\n  args: string[]\n  cwd: string\n}): Promise<void> => {\n  const {exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['submodule', 'foreach', 'git', 'fetch', '-q', ...args],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  /* istanbul ignore if */\n  if (exitCode !== 0) {\n    core.warning(stderr || \"Couldn't fetch submodules\")\n  }\n}\n\n/**\n * Retrieves all the submodule paths\n * @param cwd - working directory\n */\nexport const getSubmodulePath = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<string[]> => {\n  const {exitCode, stdout, stderr} = await exec.getExecOutput(\n    'git',\n    ['submodule', 'status'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    core.warning(stderr || \"Couldn't get submodule names\")\n    return []\n  }\n\n  return stdout\n    .trim()\n    .split('\\n')\n    .map((line: string) => normalizeSeparators(line.trim().split(' ')[1]))\n}\n\n/**\n * Retrieves commit sha of a submodule from a parent commit\n * @param cwd - working directory\n * @param parentSha1 - parent commit sha\n * @param parentSha2 - parent commit sha\n * @param submodulePath - path of submodule\n * @param diff - diff type between parent commits (`..` or `...`)\n */\nexport const gitSubmoduleDiffSHA = async ({\n  cwd,\n  parentSha1,\n  parentSha2,\n  submodulePath,\n  diff\n}: {\n  cwd: string\n  parentSha1: string\n  parentSha2: string\n  submodulePath: string\n  diff: string\n}): Promise<{previousSha?: string; currentSha?: string}> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['diff', `${parentSha1}${diff}${parentSha2}`, '--', submodulePath],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  const subprojectCommitPreRegex =\n    /^(?<preCommit>-)Subproject commit (?<commitHash>.+)$/m\n  const subprojectCommitCurRegex =\n    /^(?<curCommit>\\+)Subproject commit (?<commitHash>.+)$/m\n\n  const previousSha =\n    subprojectCommitPreRegex.exec(stdout)?.groups?.commitHash ||\n    '4b825dc642cb6eb9a060e54bf8d69288fbee4904'\n  const currentSha = subprojectCommitCurRegex.exec(stdout)?.groups?.commitHash\n\n  if (currentSha) {\n    return {previousSha, currentSha}\n  }\n\n  core.debug(\n    `No submodule commit found for ${submodulePath} between ${parentSha1}${diff}${parentSha2}`\n  )\n  return {}\n}\n\nexport const gitRenamedFiles = async ({\n  cwd,\n  sha1,\n  sha2,\n  diff,\n  oldNewSeparator,\n  isSubmodule = false,\n  parentDir = ''\n}: {\n  cwd: string\n  sha1: string\n  sha2: string\n  diff: string\n  oldNewSeparator: string\n  isSubmodule?: boolean\n  parentDir?: string\n}): Promise<string[]> => {\n  const {exitCode, stderr, stdout} = await exec.getExecOutput(\n    'git',\n    [\n      'diff',\n      '--name-status',\n      '--ignore-submodules=all',\n      '--diff-filter=R',\n      `${sha1}${diff}${sha2}`\n    ],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    if (isSubmodule) {\n      core.warning(\n        stderr ||\n          `Failed to get renamed files for submodule between: ${sha1}${diff}${sha2}`\n      )\n      core.warning(\n        'Please ensure that submodules are initialized and up to date. See: https://github.com/actions/checkout#usage'\n      )\n    } else {\n      core.error(\n        stderr || `Failed to get renamed files between: ${sha1}${diff}${sha2}`\n      )\n      throw new Error('Unable to get renamed files')\n    }\n\n    return []\n  }\n\n  return stdout\n    .trim()\n    .split('\\n')\n    .filter(Boolean)\n    .map((line: string) => {\n      core.debug(`Renamed file: ${line}`)\n      const [, oldPath, newPath] = line.split('\\t')\n      if (isSubmodule) {\n        return `${normalizeSeparators(\n          path.join(parentDir, oldPath)\n        )}${oldNewSeparator}${normalizeSeparators(\n          path.join(parentDir, newPath)\n        )}`\n      }\n      return `${normalizeSeparators(\n        oldPath\n      )}${oldNewSeparator}${normalizeSeparators(newPath)}`\n    })\n}\n\n/**\n * Retrieves all the changed files between two commits\n * @param cwd - working directory\n * @param sha1 - commit sha\n * @param sha2 - commit sha\n * @param diff - diff type between parent commits (`..` or `...`)\n * @param isSubmodule - is the repo a submodule\n * @param parentDir - parent directory of the submodule\n * @param outputRenamedFilesAsDeletedAndAdded - output renamed files as deleted and added\n * @param failOnInitialDiffError - fail if the initial diff fails\n * @param failOnSubmoduleDiffError - fail if the submodule diff fails\n */\nexport const getAllChangedFiles = async ({\n  cwd,\n  sha1,\n  sha2,\n  diff,\n  isSubmodule = false,\n  parentDir = '',\n  outputRenamedFilesAsDeletedAndAdded = false,\n  failOnInitialDiffError = false,\n  failOnSubmoduleDiffError = false\n}: {\n  cwd: string\n  sha1: string\n  sha2: string\n  diff: string\n  isSubmodule?: boolean\n  parentDir?: string\n  outputRenamedFilesAsDeletedAndAdded?: boolean\n  failOnInitialDiffError?: boolean\n  failOnSubmoduleDiffError?: boolean\n}): Promise<ChangedFiles> => {\n  const {exitCode, stdout, stderr} = await exec.getExecOutput(\n    'git',\n    [\n      'diff',\n      '--name-status',\n      '--ignore-submodules=all',\n      `--diff-filter=ACDMRTUX`,\n      `${sha1}${diff}${sha2}`\n    ],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n  const changedFiles: ChangedFiles = {\n    [ChangeTypeEnum.Added]: [],\n    [ChangeTypeEnum.Copied]: [],\n    [ChangeTypeEnum.Deleted]: [],\n    [ChangeTypeEnum.Modified]: [],\n    [ChangeTypeEnum.Renamed]: [],\n    [ChangeTypeEnum.TypeChanged]: [],\n    [ChangeTypeEnum.Unmerged]: [],\n    [ChangeTypeEnum.Unknown]: []\n  }\n\n  if (exitCode !== 0) {\n    if (failOnInitialDiffError && !isSubmodule) {\n      throw new Error(\n        `Failed to get changed files between: ${sha1}${diff}${sha2}: ${stderr}`\n      )\n    } else if (failOnSubmoduleDiffError && isSubmodule) {\n      throw new Error(\n        `Failed to get changed files for submodule between: ${sha1}${diff}${sha2}: ${stderr}`\n      )\n    }\n  }\n\n  if (exitCode !== 0) {\n    if (isSubmodule) {\n      core.warning(\n        stderr ||\n          `Failed to get changed files for submodule between: ${sha1}${diff}${sha2}`\n      )\n      core.warning(\n        'Please ensure that submodules are initialized and up to date. See: https://github.com/actions/checkout#usage'\n      )\n    } else {\n      core.warning(\n        stderr || `Failed to get changed files between: ${sha1}${diff}${sha2}`\n      )\n    }\n\n    return changedFiles\n  }\n\n  const lines = stdout.split('\\n').filter(Boolean)\n\n  for (const line of lines) {\n    const [changeType, filePath, newPath = ''] = line.split('\\t')\n    const normalizedFilePath = isSubmodule\n      ? normalizeSeparators(path.join(parentDir, filePath))\n      : normalizeSeparators(filePath)\n    const normalizedNewPath = isSubmodule\n      ? normalizeSeparators(path.join(parentDir, newPath))\n      : normalizeSeparators(newPath)\n\n    if (changeType.startsWith('R')) {\n      if (outputRenamedFilesAsDeletedAndAdded) {\n        changedFiles[ChangeTypeEnum.Deleted].push(normalizedFilePath)\n        changedFiles[ChangeTypeEnum.Added].push(normalizedNewPath)\n      } else {\n        changedFiles[ChangeTypeEnum.Renamed].push(normalizedNewPath)\n      }\n    } else {\n      changedFiles[changeType as ChangeTypeEnum].push(normalizedFilePath)\n    }\n  }\n  return changedFiles\n}\n\n/**\n * Filters the changed files by the file patterns\n * @param allDiffFiles - all the changed files\n * @param filePatterns - file patterns to filter by\n */\nexport const getFilteredChangedFiles = async ({\n  allDiffFiles,\n  filePatterns\n}: {\n  allDiffFiles: ChangedFiles\n  filePatterns: string[]\n}): Promise<ChangedFiles> => {\n  const changedFiles: ChangedFiles = {\n    [ChangeTypeEnum.Added]: [],\n    [ChangeTypeEnum.Copied]: [],\n    [ChangeTypeEnum.Deleted]: [],\n    [ChangeTypeEnum.Modified]: [],\n    [ChangeTypeEnum.Renamed]: [],\n    [ChangeTypeEnum.TypeChanged]: [],\n    [ChangeTypeEnum.Unmerged]: [],\n    [ChangeTypeEnum.Unknown]: []\n  }\n  const hasFilePatterns = filePatterns.length > 0\n  const isWin = isWindows()\n\n  for (const changeType of Object.keys(allDiffFiles)) {\n    const files = allDiffFiles[changeType as ChangeTypeEnum]\n    if (hasFilePatterns) {\n      changedFiles[changeType as ChangeTypeEnum] = mm(files, filePatterns, {\n        dot: true,\n        windows: isWin,\n        noext: true\n      }).map(normalizeSeparators)\n    } else {\n      changedFiles[changeType as ChangeTypeEnum] = files\n    }\n  }\n\n  return changedFiles\n}\n\nexport const gitLog = async ({\n  args,\n  cwd\n}: {\n  args: string[]\n  cwd: string\n}): Promise<string> => {\n  const {stdout} = await exec.getExecOutput('git', ['log', ...args], {\n    cwd,\n    silent: !core.isDebug()\n  })\n\n  return stdout.trim()\n}\n\nexport const getHeadSha = async ({cwd}: {cwd: string}): Promise<string> => {\n  const {stdout} = await exec.getExecOutput('git', ['rev-parse', 'HEAD'], {\n    cwd,\n    silent: !core.isDebug()\n  })\n\n  return stdout.trim()\n}\n\nexport const isInsideWorkTree = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<boolean> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--is-inside-work-tree'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  return stdout.trim() === 'true'\n}\n\nexport const getRemoteBranchHeadSha = async ({\n  cwd,\n  branch\n}: {\n  cwd: string\n  branch: string\n}): Promise<string> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', `origin/${branch}`],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  return stdout.trim()\n}\n\nexport const getCurrentBranchName = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<string> => {\n  const {stdout, exitCode} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--abbrev-ref', 'HEAD'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    return ''\n  }\n\n  return stdout.trim()\n}\n\nexport const getParentSha = async ({cwd}: {cwd: string}): Promise<string> => {\n  const {stdout, exitCode} = await exec.getExecOutput(\n    'git',\n    ['rev-list', '-n', '1', 'HEAD^'],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    return ''\n  }\n\n  return stdout.trim()\n}\n\nexport const verifyCommitSha = async ({\n  sha,\n  cwd,\n  showAsErrorMessage = true\n}: {\n  sha: string\n  cwd: string\n  showAsErrorMessage?: boolean\n}): Promise<number> => {\n  const {exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--verify', `${sha}^{commit}`],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    if (showAsErrorMessage) {\n      core.error(`Unable to locate the commit sha: ${sha}`)\n      core.error(\n        \"Please verify that the commit sha is correct, and increase the 'fetch_depth' input if needed\"\n      )\n      core.debug(stderr)\n    } else {\n      core.warning(`Unable to locate the commit sha: ${sha}`)\n      core.debug(stderr)\n    }\n  }\n\n  return exitCode\n}\n\n/**\n * Clean the sha from the input which could be a branch name or a commit sha.\n *\n * If the input is a valid commit sha, return it as is.\n *\n * If the input is a branch name, get the HEAD sha of that branch and return it.\n *\n * @param sha The input string, which could be a branch name or a commit sha.\n * @param cwd The working directory.\n * @param token The GitHub token.\n * @returns The cleaned SHA string.\n */\nexport const cleanShaInput = async ({\n  sha,\n  cwd,\n  token\n}: {\n  sha: string\n  cwd: string\n  token: string\n}): Promise<string> => {\n  // Check if the input is a valid commit sha\n  if (!sha) {\n    return sha\n  }\n  // Check if the input is a valid commit sha\n  const {stdout, exitCode} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', '--verify', `${sha}^{commit}`],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    const octokit = github.getOctokit(token)\n    // If it's not a valid commit sha, assume it's a branch name and get the HEAD sha\n    const {data: refData} = await octokit.rest.git.getRef({\n      owner: github.context.repo.owner,\n      repo: github.context.repo.repo,\n      ref: `heads/${sha}`\n    })\n\n    return refData.object.sha\n  }\n\n  return stdout.trim()\n}\nexport const getPreviousGitTag = async ({\n  cwd\n}: {\n  cwd: string\n}): Promise<{tag: string; sha: string}> => {\n  const {stdout} = await exec.getExecOutput(\n    'git',\n    ['tag', '--sort=-creatordate'],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  const tags = stdout.trim().split('\\n')\n\n  if (tags.length < 2) {\n    core.warning('No previous tag found')\n    return {tag: '', sha: ''}\n  }\n\n  const previousTag = tags[1]\n\n  const {stdout: stdout2} = await exec.getExecOutput(\n    'git',\n    ['rev-parse', previousTag],\n    {\n      cwd,\n      silent: !core.isDebug()\n    }\n  )\n\n  const sha = stdout2.trim()\n\n  return {tag: previousTag, sha}\n}\n\nexport const canDiffCommits = async ({\n  cwd,\n  sha1,\n  sha2,\n  diff\n}: {\n  cwd: string\n  sha1: string\n  sha2: string\n  diff: string\n}): Promise<boolean> => {\n  if (diff === '...') {\n    const mergeBase = await getMergeBase(cwd, sha1, sha2)\n\n    if (!mergeBase) {\n      core.warning(`Unable to find merge base between ${sha1} and ${sha2}`)\n      return false\n    }\n\n    const {exitCode, stderr} = await exec.getExecOutput(\n      'git',\n      ['log', '--format=%H', `${mergeBase}..${sha2}`],\n      {\n        cwd,\n        ignoreReturnCode: true,\n        silent: !core.isDebug()\n      }\n    )\n\n    if (exitCode !== 0) {\n      core.warning(stderr || `Error checking commit history`)\n      return false\n    }\n\n    return true\n  } else {\n    const {exitCode, stderr} = await exec.getExecOutput(\n      'git',\n      ['diff', '--quiet', sha1, sha2],\n      {\n        cwd,\n        ignoreReturnCode: true,\n        silent: !core.isDebug()\n      }\n    )\n\n    if (exitCode !== 0) {\n      core.warning(stderr || `Error checking commit history`)\n      return false\n    }\n\n    return true\n  }\n}\n\nconst getMergeBase = async (\n  cwd: string,\n  sha1: string,\n  sha2: string\n): Promise<string | null> => {\n  const {exitCode, stdout} = await exec.getExecOutput(\n    'git',\n    ['merge-base', sha1, sha2],\n    {\n      cwd,\n      ignoreReturnCode: true,\n      silent: !core.isDebug()\n    }\n  )\n\n  if (exitCode !== 0) {\n    return null\n  }\n\n  return stdout.trim()\n}\n\nexport const getDirnameMaxDepth = ({\n  relativePath,\n  dirNamesMaxDepth,\n  excludeCurrentDir\n}: {\n  relativePath: string\n  dirNamesMaxDepth?: number\n  excludeCurrentDir?: boolean\n}): string => {\n  const pathArr = getDirname(relativePath).split(path.sep)\n  const maxDepth = Math.min(dirNamesMaxDepth || pathArr.length, pathArr.length)\n  let output = pathArr[0]\n\n  for (let i = 1; i < maxDepth; i++) {\n    output = path.join(output, pathArr[i])\n  }\n\n  if (excludeCurrentDir && output === '.') {\n    return ''\n  }\n\n  return normalizeSeparators(output)\n}\n\nexport const jsonOutput = ({\n  value,\n  shouldEscape\n}: {\n  value: string | string[] | boolean\n  shouldEscape: boolean\n}): string => {\n  const result = JSON.stringify(value)\n\n  return shouldEscape ? result.replace(/\"/g, '\\\\\"') : result\n}\n\nexport const getDirNamesIncludeFilesPattern = ({\n  inputs\n}: {\n  inputs: Inputs\n}): string[] => {\n  return inputs.dirNamesIncludeFiles\n    .split(inputs.dirNamesIncludeFilesSeparator)\n    .filter(Boolean)\n}\n\nexport const getFilePatterns = async ({\n  inputs,\n  workingDirectory\n}: {\n  inputs: Inputs\n  workingDirectory: string\n}): Promise<string[]> => {\n  let cleanedFilePatterns: string[] = []\n\n  if (inputs.files) {\n    const filesPatterns = inputs.files\n      .split(inputs.filesSeparator)\n      .filter(Boolean)\n\n    cleanedFilePatterns.push(...filesPatterns)\n\n    core.debug(`files patterns: ${filesPatterns.join('\\n')}`)\n  }\n\n  if (inputs.filesFromSourceFile !== '') {\n    const inputFilesFromSourceFile = inputs.filesFromSourceFile\n      .split(inputs.filesFromSourceFileSeparator)\n      .filter(Boolean)\n      .map(p => path.join(workingDirectory, p))\n\n    core.debug(`files from source file: ${inputFilesFromSourceFile}`)\n\n    const filesFromSourceFiles = await getFilesFromSourceFile({\n      filePaths: inputFilesFromSourceFile\n    })\n\n    core.debug(\n      `files from source files patterns: ${filesFromSourceFiles.join('\\n')}`\n    )\n\n    cleanedFilePatterns.push(...filesFromSourceFiles)\n  }\n\n  if (inputs.filesIgnore) {\n    const filesIgnorePatterns = inputs.filesIgnore\n      .split(inputs.filesIgnoreSeparator)\n      .filter(Boolean)\n      .map(p => {\n        if (!p.startsWith('!')) {\n          p = `!${p}`\n        }\n        return p\n      })\n\n    core.debug(`files ignore patterns: ${filesIgnorePatterns.join('\\n')}`)\n\n    cleanedFilePatterns.push(...filesIgnorePatterns)\n  }\n\n  if (inputs.filesIgnoreFromSourceFile) {\n    const inputFilesIgnoreFromSourceFile = inputs.filesIgnoreFromSourceFile\n      .split(inputs.filesIgnoreFromSourceFileSeparator)\n      .filter(Boolean)\n      .map(p => path.join(workingDirectory, p))\n\n    core.debug(\n      `files ignore from source file: ${inputFilesIgnoreFromSourceFile}`\n    )\n\n    const filesIgnoreFromSourceFiles = await getFilesFromSourceFile({\n      filePaths: inputFilesIgnoreFromSourceFile,\n      excludedFiles: true\n    })\n\n    core.debug(\n      `files ignore from source files patterns: ${filesIgnoreFromSourceFiles.join(\n        '\\n'\n      )}`\n    )\n\n    cleanedFilePatterns.push(...filesIgnoreFromSourceFiles)\n  }\n\n  if (inputs.negationPatternsFirst) {\n    cleanedFilePatterns.sort((a, b) => {\n      return a.startsWith('!') ? -1 : b.startsWith('!') ? 1 : 0\n    })\n  }\n\n  // Reorder file patterns '**' should come first\n  if (cleanedFilePatterns.includes('**')) {\n    cleanedFilePatterns.sort((a, b) => {\n      return a === '**' ? -1 : b === '**' ? 1 : 0\n    })\n  }\n\n  if (isWindows()) {\n    cleanedFilePatterns = cleanedFilePatterns.map(pattern =>\n      pattern.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n')\n    )\n  }\n\n  core.debug(`Input file patterns: \\n${cleanedFilePatterns.join('\\n')}`)\n\n  return cleanedFilePatterns\n}\n\n// Example YAML input:\n//  filesYaml: |\n//     frontend:\n//       - frontend/**\n//     backend:\n//       - backend/**\n//     test: test/**\n//     shared: &shared\n//       - common/**\n//     lib:\n//       - *shared\n//       - lib/**\n// Return an Object:\n// {\n//   frontend: ['frontend/**'],\n//   backend: ['backend/**'],\n//   test: ['test/**'],\n//   shared: ['common/**'],\n//   lib: ['common/**', 'lib/**']\n// }\n\ntype YamlObject = {\n  [key: string]: string | string[] | [string[], string]\n}\n\nconst getYamlFilePatternsFromContents = async ({\n  content = '',\n  filePath = '',\n  excludedFiles = false\n}: {\n  content?: string\n  filePath?: string\n  excludedFiles?: boolean\n}): Promise<Record<string, string[]>> => {\n  const filePatterns: Record<string, string[]> = {}\n  let source = ''\n\n  if (filePath) {\n    if (!(await exists(filePath))) {\n      core.error(`File does not exist: ${filePath}`)\n      throw new Error(`File does not exist: ${filePath}`)\n    }\n\n    source = await readFile(filePath, 'utf8')\n  } else {\n    source = content\n  }\n\n  const doc = parseDocument(source, {merge: true, schema: 'failsafe'})\n\n  if (doc.errors.length > 0) {\n    if (filePath) {\n      throw new Error(`YAML errors in ${filePath}: ${doc.errors}`)\n    } else {\n      throw new Error(`YAML errors: ${doc.errors}`)\n    }\n  }\n\n  if (doc.warnings.length > 0) {\n    if (filePath) {\n      throw new Error(`YAML warnings in ${filePath}: ${doc.warnings}`)\n    } else {\n      throw new Error(`YAML warnings: ${doc.warnings}`)\n    }\n  }\n\n  const yamlObject = doc.toJS() as YamlObject\n\n  for (const key in yamlObject) {\n    let value = yamlObject[key]\n\n    if (typeof value === 'string' && value.includes('\\n')) {\n      value = value.split('\\n')\n    }\n\n    if (typeof value === 'string') {\n      value = value.trim()\n\n      if (value) {\n        filePatterns[key] = [\n          excludedFiles && !value.startsWith('!') ? `!${value}` : value\n        ]\n      }\n    } else if (Array.isArray(value)) {\n      filePatterns[key] = flattenDeep(value)\n        .filter(v => v.trim() !== '')\n        .map(v => {\n          if (excludedFiles && !v.startsWith('!')) {\n            v = `!${v}`\n          }\n          return v\n        })\n    }\n  }\n\n  return filePatterns\n}\n\nexport const getYamlFilePatterns = async ({\n  inputs,\n  workingDirectory\n}: {\n  inputs: Inputs\n  workingDirectory: string\n}): Promise<Record<string, string[]>> => {\n  let filePatterns: Record<string, string[]> = {}\n  if (inputs.filesYaml) {\n    filePatterns = {\n      ...(await getYamlFilePatternsFromContents({content: inputs.filesYaml}))\n    }\n  }\n\n  if (inputs.filesYamlFromSourceFile) {\n    const inputFilesYamlFromSourceFile = inputs.filesYamlFromSourceFile\n      .split(inputs.filesYamlFromSourceFileSeparator)\n      .filter(p => p !== '')\n      .map(p => path.join(workingDirectory, p))\n\n    core.debug(`files yaml from source file: ${inputFilesYamlFromSourceFile}`)\n\n    for (const filePath of inputFilesYamlFromSourceFile) {\n      const newFilePatterns = await getYamlFilePatternsFromContents({filePath})\n      for (const key in newFilePatterns) {\n        if (key in filePatterns) {\n          core.warning(\n            `files_yaml_from_source_file: Duplicated key ${key} detected in ${filePath}, the ${filePatterns[key]} will be overwritten by ${newFilePatterns[key]}.`\n          )\n        }\n      }\n\n      filePatterns = {\n        ...filePatterns,\n        ...newFilePatterns\n      }\n    }\n  }\n\n  if (inputs.filesIgnoreYaml) {\n    const newIgnoreFilePatterns = await getYamlFilePatternsFromContents({\n      content: inputs.filesIgnoreYaml,\n      excludedFiles: true\n    })\n\n    for (const key in newIgnoreFilePatterns) {\n      if (key in filePatterns) {\n        core.warning(\n          `files_ignore_yaml: Duplicated key ${key} detected, the ${filePatterns[key]} will be overwritten by ${newIgnoreFilePatterns[key]}.`\n        )\n      }\n    }\n  }\n\n  if (inputs.filesIgnoreYamlFromSourceFile) {\n    const inputFilesIgnoreYamlFromSourceFile =\n      inputs.filesIgnoreYamlFromSourceFile\n        .split(inputs.filesIgnoreYamlFromSourceFileSeparator)\n        .filter(p => p !== '')\n        .map(p => path.join(workingDirectory, p))\n\n    core.debug(\n      `files ignore yaml from source file: ${inputFilesIgnoreYamlFromSourceFile}`\n    )\n\n    for (const filePath of inputFilesIgnoreYamlFromSourceFile) {\n      const newIgnoreFilePatterns = await getYamlFilePatternsFromContents({\n        filePath,\n        excludedFiles: true\n      })\n\n      for (const key in newIgnoreFilePatterns) {\n        if (key in filePatterns) {\n          core.warning(\n            `files_ignore_yaml_from_source_file: Duplicated key ${key} detected in ${filePath}, the ${filePatterns[key]} will be overwritten by ${newIgnoreFilePatterns[key]}.`\n          )\n        }\n      }\n\n      filePatterns = {\n        ...filePatterns,\n        ...newIgnoreFilePatterns\n      }\n    }\n  }\n\n  return filePatterns\n}\n\nexport const getRecoverFilePatterns = ({\n  inputs\n}: {\n  inputs: Inputs\n}): string[] => {\n  let filePatterns: string[] = inputs.recoverFiles.split(\n    inputs.recoverFilesSeparator\n  )\n\n  if (inputs.recoverFilesIgnore) {\n    const ignoreFilePatterns = inputs.recoverFilesIgnore.split(\n      inputs.recoverFilesSeparator\n    )\n\n    filePatterns = filePatterns.concat(\n      ignoreFilePatterns.map(p => {\n        if (p.startsWith('!')) {\n          return p\n        } else {\n          return `!${p}`\n        }\n      })\n    )\n  }\n\n  core.debug(`recover file patterns: ${filePatterns}`)\n\n  return filePatterns.filter(Boolean)\n}\n\nexport const getOutputKey = (key: string, outputPrefix: string): string => {\n  return outputPrefix ? `${outputPrefix}_${key}` : key\n}\n\nexport const setArrayOutput = async ({\n  key,\n  inputs,\n  value,\n  outputPrefix\n}: {\n  key: string\n  inputs: Inputs\n  value: string[]\n  outputPrefix?: string\n}): Promise<void> => {\n  core.debug(`${key}: ${JSON.stringify(value)}`)\n  await setOutput({\n    key: outputPrefix ? getOutputKey(key, outputPrefix) : key,\n    value: inputs.json ? value : value.join(inputs.separator),\n    writeOutputFiles: inputs.writeOutputFiles,\n    outputDir: inputs.outputDir,\n    json: inputs.json,\n    shouldEscape: inputs.escapeJson,\n    safeOutput: inputs.safeOutput\n  })\n}\n\nexport const setOutput = async ({\n  key,\n  value,\n  writeOutputFiles,\n  outputDir,\n  json = false,\n  shouldEscape = false,\n  safeOutput = false\n}: {\n  key: string\n  value: string | string[] | boolean\n  writeOutputFiles: boolean\n  outputDir: string\n  json?: boolean\n  shouldEscape?: boolean\n  safeOutput?: boolean\n}): Promise<void> => {\n  let cleanedValue\n  if (json) {\n    cleanedValue = jsonOutput({value, shouldEscape})\n  } else {\n    cleanedValue = value.toString().trim()\n  }\n\n  // if safeOutput is true, escape special characters for bash shell\n  if (safeOutput) {\n    cleanedValue = cleanedValue.replace(/[$()`|&;]/g, '\\\\$&')\n  }\n\n  core.setOutput(key, cleanedValue)\n\n  if (writeOutputFiles) {\n    const extension = json ? 'json' : 'txt'\n    const outputFilePath = path.join(outputDir, `${key}.${extension}`)\n\n    if (!(await exists(outputDir))) {\n      await fs.mkdir(outputDir, {recursive: true})\n    }\n    await fs.writeFile(outputFilePath, cleanedValue.replace(/\\\\\"/g, '\"'))\n  }\n}\n\nconst getDeletedFileContents = async ({\n  cwd,\n  filePath,\n  sha\n}: {\n  cwd: string\n  filePath: string\n  sha: string\n}): Promise<string> => {\n  const {stdout, exitCode, stderr} = await exec.getExecOutput(\n    'git',\n    ['show', `${sha}:${filePath}`],\n    {\n      cwd,\n      silent: !core.isDebug(),\n      ignoreReturnCode: true\n    }\n  )\n\n  if (exitCode !== 0) {\n    throw new Error(\n      `Error getting file content from git history \"${filePath}\": ${stderr}`\n    )\n  }\n\n  return stdout\n}\n\nexport const recoverDeletedFiles = async ({\n  inputs,\n  workingDirectory,\n  deletedFiles,\n  recoverPatterns,\n  diffResult,\n  hasSubmodule,\n  submodulePaths\n}: {\n  inputs: Inputs\n  workingDirectory: string\n  deletedFiles: string[]\n  recoverPatterns: string[]\n  diffResult: DiffResult\n  hasSubmodule: boolean\n  submodulePaths: string[]\n}): Promise<void> => {\n  let recoverableDeletedFiles = deletedFiles\n  core.debug(`recoverable deleted files: ${recoverableDeletedFiles}`)\n\n  if (recoverPatterns.length > 0) {\n    recoverableDeletedFiles = mm(deletedFiles, recoverPatterns, {\n      dot: true,\n      windows: isWindows(),\n      noext: true\n    })\n    core.debug(`filtered recoverable deleted files: ${recoverableDeletedFiles}`)\n  }\n\n  for (const deletedFile of recoverableDeletedFiles) {\n    let target = path.join(workingDirectory, deletedFile)\n\n    if (inputs.recoverDeletedFilesToDestination) {\n      target = path.join(\n        workingDirectory,\n        inputs.recoverDeletedFilesToDestination,\n        deletedFile\n      )\n    }\n\n    let deletedFileContents: string\n\n    const submodulePath = submodulePaths.find(p => deletedFile.startsWith(p))\n\n    if (hasSubmodule && submodulePath) {\n      const submoduleShaResult = await gitSubmoduleDiffSHA({\n        cwd: workingDirectory,\n        parentSha1: diffResult.previousSha,\n        parentSha2: diffResult.currentSha,\n        submodulePath,\n        diff: diffResult.diff\n      })\n\n      if (submoduleShaResult.previousSha) {\n        core.debug(\n          `recovering deleted file \"${deletedFile}\" from submodule ${submodulePath} from ${submoduleShaResult.previousSha}`\n        )\n        deletedFileContents = await getDeletedFileContents({\n          cwd: path.join(workingDirectory, submodulePath),\n          // E.g. submodulePath = test/demo and deletedFile = test/demo/.github/README.md => filePath => .github/README.md\n          filePath: deletedFile.replace(submodulePath, '').substring(1),\n          sha: submoduleShaResult.previousSha\n        })\n      } else {\n        core.warning(\n          `Unable to recover deleted file \"${deletedFile}\" from submodule ${submodulePath} from ${submoduleShaResult.previousSha}`\n        )\n        continue\n      }\n    } else {\n      core.debug(\n        `recovering deleted file \"${deletedFile}\" from ${diffResult.previousSha}`\n      )\n      deletedFileContents = await getDeletedFileContents({\n        cwd: workingDirectory,\n        filePath: deletedFile,\n        sha: diffResult.previousSha\n      })\n    }\n\n    core.debug(`recovered deleted file \"${deletedFile}\"`)\n\n    if (!(await exists(path.dirname(target)))) {\n      core.debug(`creating directory \"${path.dirname(target)}\"`)\n      await fs.mkdir(path.dirname(target), {recursive: true})\n    }\n    core.debug(`writing file \"${target}\"`)\n    await fs.writeFile(target, deletedFileContents)\n    core.debug(`wrote file \"${target}\"`)\n  }\n}\n\nexport const hasLocalGitDirectory = async ({\n  workingDirectory\n}: {\n  workingDirectory: string\n}): Promise<boolean> => {\n  return await isInsideWorkTree({\n    cwd: workingDirectory\n  })\n}\n"], "filenames": ["README.md", "action.yml", "src/changedFilesOutput.ts", "src/inputs.ts", "src/main.ts", "src/utils.ts"], "buggy_code_start_loc": [125, 134, 46, 36, 176, 1327], "buggy_code_end_loc": [1019, 134, 423, 274, 177, 1350], "fixing_code_start_loc": [126, 135, 46, 37, 176, 1327], "fixing_code_end_loc": [1073, 139, 434, 278, 178, 1359], "type": "CWE-77", "message": "tj-actions/changed-files is a Github action to retrieve all files and directories. Prior to 41.0.0, the `tj-actions/changed-files` workflow allows for command injection in changed filenames, allowing an attacker to execute arbitrary code and potentially leak secrets. This issue may lead to arbitrary command execution in the GitHub Runner. This vulnerability has been addressed in version 41.0.0. Users are advised to upgrade.", "other": {"cve": {"id": "CVE-2023-51664", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-27T17:15:08.340", "lastModified": "2024-01-04T16:57:12.717", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "tj-actions/changed-files is a Github action to retrieve all files and directories. Prior to 41.0.0, the `tj-actions/changed-files` workflow allows for command injection in changed filenames, allowing an attacker to execute arbitrary code and potentially leak secrets. This issue may lead to arbitrary command execution in the GitHub Runner. This vulnerability has been addressed in version 41.0.0. Users are advised to upgrade."}, {"lang": "es", "value": "tj-actions/changed-files es una acci\u00f3n de Github para recuperar todos los archivos y directorios. Antes de 41.0.0, el workflow `tj-actions/changed-files` permit\u00eda la inyecci\u00f3n de comandos en nombres de archivos modificados, lo que permit\u00eda a un atacante ejecutar c\u00f3digo arbitrario y potencialmente filtrar secretos. Este problema puede provocar la ejecuci\u00f3n de comandos arbitrarios en GitHub Runner. Esta vulnerabilidad se ha solucionado en la versi\u00f3n 41.0.0. Se recomienda a los usuarios que actualicen."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tj-actions:changed-files:*:*:*:*:*:*:*:*", "versionEndExcluding": "41.0.0", "matchCriteriaId": "ADB03E6A-6453-465B-9CC2-5E3EB68046AF"}]}]}], "references": [{"url": "https://github.com/tj-actions/changed-files/commit/0102c07446a3cad972f4afcbd0ee4dbc4b6d2d1b", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tj-actions/changed-files/commit/716b1e13042866565e00e85fd4ec490e186c4a2f", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tj-actions/changed-files/commit/ff2f6e6b91913a7be42be1b5917330fe442f2ede", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/tj-actions/changed-files/security/advisories/GHSA-mcph-m25j-8j63", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/tj-actions/changed-files/commit/0102c07446a3cad972f4afcbd0ee4dbc4b6d2d1b"}}