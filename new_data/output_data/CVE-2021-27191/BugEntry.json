{"buggy_code": ["import { getIPRange } from './index';\n\nconst successResponsev4 = [\n  '192.168.1.128',\n  '192.168.1.129',\n  '192.168.1.130',\n  '192.168.1.131',\n  '192.168.1.132',\n  '192.168.1.133',\n  '192.168.1.134',\n  '192.168.1.135',\n];\n\nconst successResponsev6 = [\n  '::ffff:102:304',\n  '::ffff:102:305',\n  '::ffff:102:306',\n  '::ffff:102:307',\n]\n\ndescribe('convert', () => {\n  describe('for cidr notation', () => {\n    it('should return an error if the IP address supplied is invalid', () => {\n      const fn = () => getIPRange('abc');\n      expect(fn).toThrow();\n    });\n\n    it('should return an error if the IP address is not in CIDR notation', () => {\n      const fn = () => getIPRange('10.1.128.0');\n      expect(fn).toThrow();\n    });\n\n    it('should return an error if the IP address uses numbers which are too high', () => {\n      const fn = () => getIPRange('192.168.1.134/256');\n      expect(fn).toThrow();\n    });\n\n    it('should return an array of IP addresses within the specified range', () => {\n      expect(getIPRange('192.168.1.134/29')).toEqual(successResponsev4);\n    });\n\n    it('should support IPv6', () => {\n      expect(getIPRange('0:0:0:0:0:ffff:102:304/126')).toEqual(successResponsev6);\n    });\n  });\n});\n\ndescribe('for two IP addresses', () => {\n  it('should return an error if one of the IP addresses supplied is invalid', () => {\n    const fn = () => getIPRange('abc', '192.168.0.1');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one of the IP addresses supplied is invalid', () => {\n    const fn = () => getIPRange('192.168.0.1', 'abc');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one of the IP addresses is in CIDR notation', () => {\n    const fn = () => getIPRange('10.1.128.0/29', '10.1.128.0');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one of the IP addresses is in CIDR notation', () => {\n    const fn = () => getIPRange('10.1.128.0', '10.1.128.0/29');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one IP address has numbers which are too high', () => {\n    const fn = () => getIPRange('192.168.1.134/256', '192.168.1.134');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one IP address has numbers which are too high', () => {\n    const fn = () => getIPRange('192.168.1.134', '192.168.1.134/256');\n    expect(fn).toThrow();\n  });\n\n  it('should return an array of IP addresses within the specified range', () => {\n    expect(getIPRange('192.168.1.128', '192.168.1.135')).toEqual(successResponsev4);\n  });\n\n  it('should support IPv6', () => {\n    expect(getIPRange('::ffff:102:304', '::ffff:102:307')).toEqual(successResponsev6);\n  });\n\n  it('should support hyphenated range in IPv4', () => {\n    expect(getIPRange('192.168.1.128-192.168.1.135')).toEqual(successResponsev4);\n  });\n\n  it('should support hyphenated range in IPv5', () => {\n    expect(getIPRange('::ffff:102:304-::ffff:102:307')).toEqual(successResponsev6);\n  });\n});\n", "import { toLong, fromLong } from 'ip';\n// @ts-ignore\nimport { Address4, Address6 } from 'ip-address';\n\nconst getIPv4 = (ip: string): Address4 | null => {\n  try {\n    return new Address4(ip);\n  } catch (err) {\n    return null;\n  }\n};\n\nconst getIPv6 = (ip: string): Address6 | null => {\n  try {\n    return new Address6(ip);\n  } catch (err) {\n    return null;\n  }\n};\n\nconst getRangev4 = (ip1: string, ip2: string) => {\n  const ips = [];\n\n  let firstAddressLong = toLong(ip1);\n  const lastAddressLong = toLong(ip2);\n\n  for (firstAddressLong; firstAddressLong <= lastAddressLong; firstAddressLong++)\n    ips.push(fromLong(firstAddressLong));\n\n  return ips;\n};\n\nconst getRangev6 = (ip1: string, ip2: string) => {\n  const ips = [];\n\n  const firstAddress = new Address6(ip1);\n  const lastAddress = new Address6(ip2);\n\n  for (let i = firstAddress.bigInteger(); i <= lastAddress.bigInteger(); i++) {\n    ips.push(Address6.fromBigInteger(i).correctForm());\n  }\n\n  return ips;\n};\n\nconst isCIDR = (ipCIDR: Address4 | Address6): boolean => Boolean(ipCIDR.parsedSubnet);\n\nconst isRange = (ipRange: string): boolean => ipRange.indexOf('-') !== -1;\n\nconst getIPRange = (ip1: string, ip2?: string): Array<string> => {\n  const ip1v4 = getIPv4(ip1);\n  const ip1v6 = getIPv6(ip1);\n\n  //\n  // Two IPs\n  //\n  if (ip2) {\n    // IPv4\n    const ip2v4 = getIPv4(ip2);\n    if (ip1v4.valid && ip2v4.valid && !ip1v4.parsedSubnet && !ip2v4.parsedSubnet) {\n      return getRangev4(ip1v4.correctForm(), ip2v4.correctForm());\n    }\n\n    // IPv6\n    const ip2v6 = getIPv6(ip2);\n    if (ip1v6.valid && ip2v6.valid && !ip1v6.parsedSubnet && !ip2v6.parsedSubnet) {\n      return getRangev6(ip1v6.correctForm(), ip2v6.correctForm());\n    }\n\n    // IPs do not match version, or are invalid\n    throw new Error('Cannot get range of two IPs if they are not both valid and the same version');\n  }\n\n  //\n  // CIDR\n  //\n  if (isCIDR(ip1v4)) {\n    return getRangev4(ip1v4.startAddress().correctForm(), ip1v4.endAddress().correctForm());\n  }\n\n  if (isCIDR(ip1v6)) {\n    return getRangev6(ip1v6.startAddress().correctForm(), ip1v6.endAddress().correctForm());\n  }\n\n  //\n  // Hyphenated Range\n  //\n  if (isRange(ip1)) {\n    const [firstAddress, lastAddress] = ip1.split('-');\n    return getIPRange(firstAddress, lastAddress);\n  }\n\n  // Did not match any of the above\n  throw new Error('IP supplied is not valid');\n};\n\nexport { getIPRange };\n"], "fixing_code": ["import { getIPRange } from './index';\n\nconst successResponsev4 = [\n  '192.168.1.128',\n  '192.168.1.129',\n  '192.168.1.130',\n  '192.168.1.131',\n  '192.168.1.132',\n  '192.168.1.133',\n  '192.168.1.134',\n  '192.168.1.135',\n];\n\nconst successResponsev6 = [\n  '::ffff:102:304',\n  '::ffff:102:305',\n  '::ffff:102:306',\n  '::ffff:102:307',\n]\n\ndescribe('convert', () => {\n  describe('for cidr notation', () => {\n    it('should return an error if the IP address supplied is invalid', () => {\n      const fn = () => getIPRange('abc');\n      expect(fn).toThrow();\n    });\n\n    it('should return an error if the IP address is not in CIDR notation', () => {\n      const fn = () => getIPRange('10.1.128.0');\n      expect(fn).toThrow();\n    });\n\n    it('should return an error if the IP address uses numbers which are too high', () => {\n      const fn = () => getIPRange('192.168.1.134/256');\n      expect(fn).toThrow();\n    });\n\n    it('should return an array of IP addresses within the specified range', () => {\n      expect(getIPRange('192.168.1.134/29')).toEqual(successResponsev4);\n    });\n\n    it('should support IPv6', () => {\n      expect(getIPRange('0:0:0:0:0:ffff:102:304/126')).toEqual(successResponsev6);\n    });\n  });\n});\n\ndescribe('for two IP addresses', () => {\n  it('should return an error if one of the IP addresses supplied is invalid', () => {\n    const fn = () => getIPRange('abc', '192.168.0.1');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one of the IP addresses supplied is invalid', () => {\n    const fn = () => getIPRange('192.168.0.1', 'abc');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one of the IP addresses is in CIDR notation', () => {\n    const fn = () => getIPRange('10.1.128.0/29', '10.1.128.0');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one of the IP addresses is in CIDR notation', () => {\n    const fn = () => getIPRange('10.1.128.0', '10.1.128.0/29');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one IP address has numbers which are too high', () => {\n    const fn = () => getIPRange('192.168.1.134/256', '192.168.1.134');\n    expect(fn).toThrow();\n  });\n\n  it('should return an error if one IP address has numbers which are too high', () => {\n    const fn = () => getIPRange('192.168.1.134', '192.168.1.134/256');\n    expect(fn).toThrow();\n  });\n\n  it('should return an array of IP addresses within the specified range', () => {\n    expect(getIPRange('192.168.1.128', '192.168.1.135')).toEqual(successResponsev4);\n  });\n\n  it('should support IPv6', () => {\n    expect(getIPRange('::ffff:102:304', '::ffff:102:307')).toEqual(successResponsev6);\n  });\n\n  it('should support hyphenated range in IPv4', () => {\n    expect(getIPRange('192.168.1.128-192.168.1.135')).toEqual(successResponsev4);\n  });\n\n  it('should support hyphenated range in IPv5', () => {\n    expect(getIPRange('::ffff:102:304-::ffff:102:307')).toEqual(successResponsev6);\n  });\n\n  it('should throw if the range is greater than 10000 default', () => {\n    const throwFn = () => getIPRange('128.0.0.0/1');\n    expect(throwFn).toThrow('Too many IPs in range. Total number: 2147483647. Max count is 10000, to increase, set the limit with the MAX_RANGE environment variable');\n  });\n\n  it('should throw if the range is greater than process.env.MAX_RANGE', () => {\n    process.env.MAX_RANGE = '5000';\n\n    const throwFn = () => getIPRange('128.0.0.0/1');\n    expect(throwFn).toThrow('Too many IPs in range. Total number: 2147483647. Max count is 5000, to increase, set the limit with the MAX_RANGE environment variable');\n  });\n});\n", "import { toLong, fromLong } from 'ip';\n// @ts-ignore\nimport { Address4, Address6 } from 'ip-address';\n\n// Set default max range\nlet maxRange = 10000;\n\nconst getIPv4 = (ip: string): Address4 | null => {\n  try {\n    return new Address4(ip);\n  } catch (err) {\n    return null;\n  }\n};\n\nconst getIPv6 = (ip: string): Address6 | null => {\n  try {\n    return new Address6(ip);\n  } catch (err) {\n    return null;\n  }\n};\n\nconst getRangev4 = (ip1: string, ip2: string) => {\n  const ips = [];\n\n  let firstAddressLong = toLong(ip1);\n  const lastAddressLong = toLong(ip2);\n\n  const totalIPs = lastAddressLong - firstAddressLong;\n\n  // Prevent DoS\n  if (totalIPs > maxRange) {\n    throw new Error(`Too many IPs in range. Total number: ${totalIPs}. Max count is ${maxRange}, to increase, set the limit with the MAX_RANGE environment variable`)\n  }\n\n  for (firstAddressLong; firstAddressLong <= lastAddressLong; firstAddressLong++)\n    ips.push(fromLong(firstAddressLong));\n\n  return ips;\n};\n\nconst getRangev6 = (ip1: string, ip2: string) => {\n  const ips = [];\n\n  const firstAddress = new Address6(ip1);\n  const lastAddress = new Address6(ip2);\n\n  for (let i = firstAddress.bigInteger(); i <= lastAddress.bigInteger(); i++) {\n    ips.push(Address6.fromBigInteger(i).correctForm());\n  }\n\n  return ips;\n};\n\nconst isCIDR = (ipCIDR: Address4 | Address6): boolean => Boolean(ipCIDR.parsedSubnet);\n\nconst isRange = (ipRange: string): boolean => ipRange.indexOf('-') !== -1;\n\nconst getIPRange = (ip1: string, ip2?: string): Array<string> => {\n  maxRange = parseInt(process.env.MAX_RANGE || '10000');\n\n  const ip1v4 = getIPv4(ip1);\n  const ip1v6 = getIPv6(ip1);\n\n  //\n  // Two IPs\n  //\n  if (ip2) {\n    // IPv4\n    const ip2v4 = getIPv4(ip2);\n    if (ip1v4.valid && ip2v4.valid && !ip1v4.parsedSubnet && !ip2v4.parsedSubnet) {\n      return getRangev4(ip1v4.correctForm(), ip2v4.correctForm());\n    }\n\n    // IPv6\n    const ip2v6 = getIPv6(ip2);\n    if (ip1v6.valid && ip2v6.valid && !ip1v6.parsedSubnet && !ip2v6.parsedSubnet) {\n      return getRangev6(ip1v6.correctForm(), ip2v6.correctForm());\n    }\n\n    // IPs do not match version, or are invalid\n    throw new Error('Cannot get range of two IPs if they are not both valid and the same version');\n  }\n\n  //\n  // CIDR\n  //\n  if (isCIDR(ip1v4)) {\n    return getRangev4(ip1v4.startAddress().correctForm(), ip1v4.endAddress().correctForm());\n  }\n\n  if (isCIDR(ip1v6)) {\n    return getRangev6(ip1v6.startAddress().correctForm(), ip1v6.endAddress().correctForm());\n  }\n\n  //\n  // Hyphenated Range\n  //\n  if (isRange(ip1)) {\n    const [firstAddress, lastAddress] = ip1.split('-');\n    return getIPRange(firstAddress, lastAddress);\n  }\n\n  // Did not match any of the above\n  throw new Error('IP supplied is not valid');\n};\n\nexport { getIPRange };\n"], "filenames": ["index.test.ts", "index.ts"], "buggy_code_start_loc": [93, 3], "buggy_code_end_loc": [93, 50], "fixing_code_start_loc": [94, 4], "fixing_code_end_loc": [106, 63], "type": "NVD-CWE-noinfo", "message": "The get-ip-range package before 4.0.0 for Node.js is vulnerable to denial of service (DoS) if the range is untrusted input. An attacker could send a large range (such as 128.0.0.0/1) that causes resource exhaustion.", "other": {"cve": {"id": "CVE-2021-27191", "sourceIdentifier": "cve@mitre.org", "published": "2021-02-11T18:15:18.347", "lastModified": "2022-04-29T17:42:39.610", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The get-ip-range package before 4.0.0 for Node.js is vulnerable to denial of service (DoS) if the range is untrusted input. An attacker could send a large range (such as 128.0.0.0/1) that causes resource exhaustion."}, {"lang": "es", "value": "El paquete get-ip-range versiones anteriores a 4.0.0 para Node.js, es vulnerable a una denegaci\u00f3n de servicio (DoS) si el rango es una entrada no confiable.&#xa0;Un atacante podr\u00eda enviar un rango grande (tal y como 128.0.0.0/1) que cause el agotamiento de los recursos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:get-ip-range_project:get-ip-range:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "4.0.0", "matchCriteriaId": "C8EA0B74-91C3-46C5-8FF7-985B08966C02"}]}]}], "references": [{"url": "https://advisory.checkmarx.net/advisory/CX-2021-4304", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/JoeScho/get-ip-range/commit/98ca22b815c77273cbab259811ab0976118e13b6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20210319-0002/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/get-ip-range", "source": "cve@mitre.org", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/JoeScho/get-ip-range/commit/98ca22b815c77273cbab259811ab0976118e13b6"}}