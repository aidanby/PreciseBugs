{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\Media;\n\nuse Conner\\Tagging\\Model\\Tagged;\nuse \\Intervention\\Image\\ImageManagerStatic as Image;\nuse MicroweberPackages\\Media\\Models\\Media;\nuse MicroweberPackages\\Media\\Models\\MediaThumbnail;\nuse MicroweberPackages\\Utils\\Media\\Thumbnailer;\nuse MicroweberPackages\\Utils\\System\\Files;\n\n\nclass MediaManager\n{\n    public $app;\n    public $tables = array();\n    public $table_prefix = false;\n    public $download_remote_images = false;\n    public $no_cache;\n\n    public $thumbnails_path_in_userfiles = 'cache/thumbnails';\n\n    public function __construct($app = null)\n    {\n        if (!is_object($this->app)) {\n            if (is_object($app)) {\n                $this->app = $app;\n            } else {\n                $this->app = mw();\n            }\n        }\n\n        $this->tables['media'] = 'media';\n    }\n\n    public function get_picture($content_id, $for = 'content', $full = false)\n    {\n        if ($for == 'post' or $for == 'posts' or $for == 'page' or $for == 'pages') {\n            $for = 'content';\n        } elseif ($for == 'category' or $for == 'categories') {\n            $for = 'categories';\n        }\n\n        $media = app()->media_repository->getPictureByRelIdAndRelType($content_id, $for);\n        if (!empty($media)) {\n\n            if ($full) {\n                return $media;\n            }\n            return $media['filename'];\n        }\n\n        return false;\n    }\n\n    public function get_first_image_from_html($html)\n    {\n        if (preg_match('/<img.+?src=\"(.+?)\"/', $html, $matches)) {\n            return $matches[1];\n        } elseif (preg_match('/<img.+?src=\\'(.+?)\\'/', $html, $matches)) {\n            return $matches[1];\n        } else {\n            return false;\n        }\n    }\n\n    public function get_by_id($id)\n    {\n\n        $table = $this->tables['media'];\n        $id = intval($id);\n        if ($id == 0) {\n            return false;\n        }\n        $params = array();\n        $params['id'] = $id;\n        $params['limit'] = 1;\n\n        $params['table'] = $table;\n        $params['cache_group'] = 'media/' . $id;\n\n        $q = $this->get($params);\n        if (is_array($q) and isset($q[0])) {\n            $content = $q[0];\n\n            if (isset($content['image_options'])) {\n                $content['image_options'] = @json_decode($content['image_options'], true);\n            }\n\n\n        } else {\n            return false;\n        }\n\n        return $content;\n    }\n\n    public function upload_progress_check()\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            mw_error('not logged in as admin');\n        }\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref_str = md5($_SERVER['HTTP_REFERER']);\n        } else {\n            $ref_str = 'no_HTTP_REFERER';\n        }\n        $ref_str = 'no_HTTP_REFERER';\n        $cache_id = 'upload_progress_' . $ref_str;\n        $cache_group = 'media/global';\n\n        $cache_content = $this->app->cache_manager->get($cache_id, $cache_group);\n        if ($cache_content != false) {\n            if (isset($cache_content['tmp_name']) != false) {\n                if (isset($cache_content['f']) != false) {\n                    $filename = $cache_content['tmp_name'];\n                    if (is_file($filename)) {\n                        $filesize = filesize($filename);\n                    }\n\n                    $filename = $cache_content['f'];\n\n                    if (is_file($filename)) {\n                        $filesize = filesize($filename);\n                    }\n\n                    $perc = $this->app->format->percent($filesize, $cache_content['size']);\n\n                    return $perc;\n                }\n            }\n        }\n    }\n\n    public function upload($data)\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            mw_error('not logged in as admin');\n        }\n        $files_utils = new Files();\n\n\n        ini_set('upload_max_filesize', '2500M');\n        // ini_set('memory_limit', '256M');\n        ini_set('max_execution_time', 0);\n        ini_set('post_max_size', '2500M');\n        ini_set('max_input_time', 9999999);\n\n        // ini_set(\"session.upload_progress.enabled\", 1);\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref_str = md5($_SERVER['HTTP_REFERER']);\n        } else {\n            $ref_str = 'no_HTTP_REFERER';\n        }\n        $ref_str = 'no_HTTP_REFERER';\n        $cache_id = 'upload_progress_' . $ref_str;\n        $cache_group = 'media/global';\n\n        $target_path = media_base_path() . 'uploaded' . DS;\n        $target_path = normalize_path($target_path, 1);\n\n        if (!is_dir($target_path)) {\n            mkdir_recursive($target_path);\n        }\n        $rerturn = array();\n\n        if ((!isset($_FILES) or empty($_FILES)) and isset($data['file'])) {\n            if (isset($data['name'])) {\n                $data['name'] = mw()->url_manager->clean_url_wrappers($data['name']);\n\n                $is_dangerous_file = $files_utils->is_dangerous_file($data['name']);\n                if ($is_dangerous_file) {\n                    return;\n                }\n\n\n                $f = $target_path . $data['name'];\n                if (is_file($f)) {\n                    $f = $target_path . date('YmdHis') . $data['name'];\n                }\n\n                $df = strpos($data['file'], 'base64,');\n                if ($df != false) {\n                    //   $df = substr($data['file'], 0, $df);\n                    $data['file'] = substr($data['file'], $df + 7);\n                    $data['file'] = str_replace(' ', '+', $data['file']);\n                    //    d($data['file']);\n                }\n\n                $up = $this->base64_to_file($data['file'], $f);\n\n                $rerturn['src'] = $this->app->url_manager->link_to_file($f);\n                $rerturn['name'] = $data['name'];\n\n                return json_encode($rerturn);\n            }\n        } else {\n            $allowedExts = array('jpg', 'jpeg', 'gif', 'png', 'bmp');\n\n            //$upl = $this->app->cache_manager->save($_FILES, $cache_id, $cache_group);\n            foreach ($_FILES as $item) {\n                $item['name'] = mw()->url_manager->clean_url_wrappers($item['name']);\n                $extension = get_file_extension($item['name']);\n\n                $is_dangerous_file = $files_utils->is_dangerous_file($data['name']);\n                if ($is_dangerous_file) {\n                    return;\n                }\n\n                if (in_array($extension, $allowedExts)) {\n                    if ($item['error'] > 0) {\n                        mw_error('Error: ' . $item['error']);\n                    } else {\n                        $upl = $this->app->cache_manager->save($item, $cache_id, $cache_group);\n\n                        $f = $target_path . $item['name'];\n                        if (is_file($f)) {\n                            $f = $target_path . date('YmdHis') . $item['name'];\n                        }\n\n                        $progress = (array)$item;\n                        $progress['f'] = $f;\n                        $upl = $this->app->cache_manager->save($progress, $cache_id, $cache_group);\n\n                        if (move_uploaded_file($item['tmp_name'], $f)) {\n                            $rerturn['src'] = $this->app->url_manager->link_to_file($f);\n                            $rerturn['name'] = $item['name'];\n                        }\n                    }\n                } else {\n                    mw_error('Invalid file ext');\n                }\n\n                //\n                //            $input = fopen(\"php://input\", \"r\");\n                //            $temp = tmpfile();\n                //\n                //            $realSize = stream_copy_to_stream($input, $temp);\n                //            fclose($input);\n                //\n                //\n                //\n                //\n                //            $target = fopen($f, \"w\");\n                //            fseek($temp, 0, SEEK_SET);\n                //            stream_copy_to_stream($temp, $target);\n                //            $rerturn['src'] = $this->app->url_manager->link_to_file($f);\n                //            $rerturn['name'] = $item['name'];\n                //            fclose($target);\n            }\n        }\n\n        exit(json_encode($rerturn));\n    }\n\n    private function base64_to_file($data, $target)\n    {\n        touch($target);\n        if (is_writable($target) == false) {\n            exit(\"$target is not writable\");\n        }\n        $whandle = fopen($target, 'wb');\n        stream_filter_append($whandle, 'convert.base64-decode', STREAM_FILTER_WRITE);\n        fwrite($whandle, $data);\n        fclose($whandle);\n    }\n\n    public function reorder($data)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        if ($adm == false) {\n            mw_error('Error: not logged in as admin.' . __FILE__ . __LINE__);\n        }\n\n        $table = $this->tables['media'];\n        foreach ($data as $value) {\n            if (is_array($value)) {\n                $indx = array();\n                $i = 0;\n                foreach ($value as $value2) {\n                    $indx[$i] = $value2;\n                    ++$i;\n                }\n\n                $this->app->database_manager->update_position_field($table, $indx);\n\n                return true;\n                // d($indx);\n            }\n        }\n    }\n\n    public function delete($data)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        $ids_to_delete = array();\n        if (!isset($data['id']) and (!is_array($data) and intval($data) > 0)) {\n            $ids_to_delete[] = intval($data);\n        } elseif (isset($data['id']) and is_array($data['id'])) {\n            $ids_to_delete = $data['id'];\n        } elseif (isset($data['id']) and !is_array($data['id'])) {\n            $ids_to_delete[] = intval($data['id']);\n        } elseif (isset($data['ids']) and is_array($data['ids'])) {\n            $ids_to_delete = $data['ids'];\n        } elseif (isset($data['ids']) and !is_array($data['ids'])) {\n            $ids_to_delete = explode(',', $data['ids']);\n        }\n        if ($ids_to_delete) {\n            foreach ($ids_to_delete as $delete) {\n                $c_id = intval($delete);\n                $pic_data = $this->get_by_id($c_id);\n\n\n                if ($adm == false) {\n                    if ($pic_data['created_by'] != $this->app->user_manager->id()) {\n                        mw_error('Error: not logged in as admin to delete media.');\n                    }\n                }\n//                if (isset($pic_data['filename'])) {\n//                    $fn_remove = $this->app->url_manager->to_path($pic_data['filename']);\n//                    if (is_file($fn_remove)) {\n//                        @unlink($fn_remove);\n//                    }\n//                }\n\n                $this->app->database_manager->delete_by_id('media', $c_id);\n            }\n\n            return true;\n        }\n    }\n\n    public function get_all($params)\n    {\n        if (!is_array($params)) {\n            $params = parse_params($params);\n        }\n        $table = $this->tables['media'];\n        $params['table'] = $table;\n\n        return $this->app->database_manager->get($params);\n    }\n\n    public function get($params)\n    {\n        $table = $this->tables['media'];\n\n        if ($params != false and !is_array($params) and intval($params) > 0) {\n            $params2 = array();\n\n            $params2['rel_type'] = 'content';\n            $params2['rel_id'] = intval($params);\n            $params = $params2;\n        } else {\n            $params = parse_params($params);\n        }\n\n        if (!isset($params['rel_type']) and isset($params['for'])) {\n            $params['rel_type'] = $this->app->database_manager->assoc_table_name($params['for']);\n        }\n        if (!isset($params['rel_type'])) {\n            $params['rel_type'] = 'content';\n        }\n\n        if (!isset($params['limit'])) {\n            $params['limit'] = 'nolimit';\n        }\n\n        $params['table'] = $table;\n        $params['order_by'] = 'position ASC';\n//d($params);\n        $data = $this->app->database_manager->get($params);\n        if (isset($params['single'])) {\n            if (isset($data['image_options']) and !is_array($data['image_options'])) {\n                $data['image_options'] = @json_decode($data['image_options'], true);\n            }\n            return $data;\n        }\n        // if (media_base_url()) {\n        if (!empty($data)) {\n            $return = array();\n            foreach ($data as $item) {\n                if (isset($item['filename']) and $item['filename'] != false) {\n                    if (!stristr($item['filename'], '{SITE_URL}')\n                        and !stristr($item['filename'], '{MEDIA_URL}')\n                        and !stristr($item['filename'], '://')\n                        and !stristr($item['filename'], media_base_url())\n                    ) {\n                        $item['filename'] = media_base_url() . $item['filename'];\n                    }\n                }\n\n                if (isset($item['title']) and $item['title'] != '') {\n                    $item['title'] = html_entity_decode($item['title']);\n                    $item['title'] = strip_tags($item['title']);\n                    $item['title'] = $this->app->format->clean_html($item['title']);\n                }\n\n                if (isset($item['image_options']) and !is_array($item['image_options'])) {\n                    $item['image_options'] = @json_decode($item['image_options'], true);\n                }\n\n\n                $return[] = $item;\n            }\n\n            $data = $return;\n        }\n        // }\n\n        return $data;\n    }\n\n    public function save($data)\n    {\n        $s = array();\n\n        if (isset($data['content-id'])) {\n            $t = trim($data['content-id']);\n            $s['rel_id'] = $t;\n            $s['rel_type'] = 'content';\n        } elseif (isset($data['content_id'])) {\n            $t = trim($data['content_id']);\n            $s['rel_id'] = $t;\n            $s['rel_type'] = 'content';\n            $s['rel_type'] = 'content';\n        }\n\n        if (isset($data['for'])) {\n            $t = trim($data['for']);\n            $t = $this->app->database_manager->assoc_table_name($t);\n            $s['rel_type'] = $t;\n        }\n        if (isset($data['rel_id'])) {\n            $t = $data['rel_id'];\n            $s['rel_id'] = $t;\n        }\n        if (isset($data['rel_type'])) {\n            $t = $data['rel_type'];\n            $s['rel_type'] = $t;\n        }\n\n        if (isset($data['for-id'])) {\n            $t = trim($data['for-id']);\n            $s['rel_id'] = $t;\n        }\n\n        if (isset($data['for_id'])) {\n            $t = trim($data['for_id']);\n            $s['rel_id'] = $t;\n        }\n\n        if (isset($data['id'])) {\n            $t = intval($data['id']);\n            $s['id'] = $t;\n        }\n\n        if (isset($data['title'])) {\n            $t = ($data['title']);\n            $s['title'] = $t;\n        }\n        if (!isset($data['src']) and isset($data['filename'])) {\n            $data['src'] = $data['filename'];\n        }\n\n        if (isset($data['src'])) {\n            $host = (parse_url(site_url()));\n\n            $host_dir = false;\n            if (isset($host['host'])) {\n                $host_dir = $host['host'];\n                $host_dir = str_ireplace('www.', '', $host_dir);\n                $host_dir = str_ireplace('.', '-', $host_dir);\n            }\n\n            $url2dir = $this->app->url_manager->to_path($data['src']);\n            $uploaded_files_dir = media_base_path() . DS . 'uploaded';\n\n            if (isset($s['rel_type']) and isset($s['rel_id'])) {\n                $s['rel_type'] = str_replace('..', '', $s['rel_type']);\n\n                $move_uploaded_files_dir = media_base_path() . 'downloaded' . DS . $s['rel_type'] . DS;\n                $move_uploaded_files_dir_index = media_base_path() . 'downloaded' . DS . $s['rel_type'] . DS . 'index.php';\n\n                $uploaded_files_dir = normalize_path($uploaded_files_dir);\n                if (!is_dir($move_uploaded_files_dir)) {\n                    mkdir_recursive($move_uploaded_files_dir);\n                    @touch($move_uploaded_files_dir_index);\n                }\n\n                $url2dir = normalize_path($url2dir, false);\n\n                $dl_remote = $this->download_remote_images;\n\n                if (isset($data['allow_remote_download']) and $data['allow_remote_download']) {\n                    $dl_remote = $data['allow_remote_download'];\n                }\n\n                if ($dl_remote and isset($data['src'])) {\n                    $ext = get_file_extension($data['src']);\n                    $data['media_type'] = $this->_guess_media_type_from_file_ext($ext);\n                    if ($data['media_type'] != false) {\n                        // starting download\n\n                        $is_remote = strtolower($data['src']);\n\n                        if (strstr($is_remote, 'http:') || strstr($is_remote, 'https:')) {\n                            $dl_host = (parse_url($is_remote));\n\n                            $dl_host_host_dir = false;\n                            if (isset($dl_host['host'])) {\n                                $dl_host_host_dir = $dl_host['host'];\n                                $dl_host_host_dir = str_ireplace('www.', '', $dl_host_host_dir);\n                                $dl_host_host_dir = str_ireplace('.', '-', $dl_host_host_dir);\n                            }\n\n                            $move_uploaded_files_dir = $move_uploaded_files_dir . 'external' . DS;\n                            if ($dl_host_host_dir) {\n                                $move_uploaded_files_dir = $move_uploaded_files_dir . $dl_host_host_dir . DS;\n                            }\n\n                            if (!is_dir($move_uploaded_files_dir)) {\n                                mkdir_recursive($move_uploaded_files_dir);\n                            }\n\n                            $newfile = basename($data['src']);\n\n                            $newfile = preg_replace('/[^\\w\\._]+/', '_', $newfile);\n                            $newfile = $move_uploaded_files_dir . $newfile;\n\n                            if (!is_file($newfile)) {\n                                mw()->http->url($data['src'])->download($newfile);\n                            }\n                            if (is_file($newfile)) {\n                                $url2dir = $this->app->url_manager->to_path($newfile);\n                            }\n                        }\n                    }\n                }\n\n                if (is_file($url2dir)) {\n                    $data['src'] = $this->app->url_manager->link_to_file($url2dir);\n                }\n            }\n\n            $s['filename'] = $data['src'];\n        }\n\n        if (!isset($data['position']) and !isset($s['id'])) {\n            $s['position'] = 9999999;\n        }\n\n        if (isset($data['for_id'])) {\n            $t = trim($data['for_id']);\n            $s['rel_id'] = $t;\n        }\n\n        if ((!isset($s['id']) or (isset($s['id']) and $s['id'] == 0))\n            and isset($s['filename'])\n            and isset($s['rel_id'])\n            and isset($s['rel_type'])\n        ) {\n            $s['filename'] = str_replace(site_url(), '{SITE_URL}', $s['filename']);\n            $check = array();\n            $check['rel_type'] = $s['rel_type'];\n            $check['rel_id'] = $s['rel_id'];\n            $check['filename'] = $s['filename'];\n            $check['single'] = true;\n            $check = $this->get_all($check);\n            if (isset($check['id'])) {\n                $s['id'] = $check['id'];\n            }\n        }\n\n        if (!isset($s['id']) and isset($s['filename']) and !isset($data['media_type'])) {\n            $ext = get_file_extension($s['filename']);\n            $data['media_type'] = $this->_guess_media_type_from_file_ext($ext);\n        }\n\n        if (isset($data['media_type'])) {\n            $t = $this->app->database_manager->escape_string($data['media_type']);\n            $s['media_type'] = $t;\n        }\n\n        if (isset($data['tags'])) {\n            $s['tags'] = $data['tags'];\n        }\n\n\n        if (isset($data['image_options'])) {\n            $s['image_options'] = @json_encode($data['image_options']);\n        }\n\n        if (isset($s['filename']) && is_array($s['filename'])) {\n            if (isset($s['filename']['error'])) {\n                return false;\n            }\n        }\n\n        if (isset($s['rel_type']) and isset($s['rel_id'])) {\n            $s['rel_id'] = trim($s['rel_id']);\n            $table = $this->tables['media'];\n            $s = $this->app->database_manager->extended_save($table, $s);\n            $this->app->cache_manager->delete('media');\n\n            return $s;\n        } elseif (isset($s['id'])) {\n            $table = $this->tables['media'];\n            $s = $this->app->database_manager->extended_save($table, $s);\n            $this->app->cache_manager->delete('media');\n\n            return $s;\n        } else {\n            mw_error('Invalid data');\n        }\n    }\n\n    public function tags($media_id = false, $return_full = false)\n    {\n        /* $data = array();\n         $data['table'] = $this->tables['media'];\n         if ($media_id) {\n             $data['id'] = intval($media_id);\n         }\n         return $this->app->tags_manager->get_values($data, $return_full);*/\n\n        $query = Tagged::query();\n        $query->where('taggable_type', 'media');\n\n        if ($media_id) {\n            $query->where('taggable_id', $media_id);\n        }\n        $tags = $query->get();\n        $pluck = $tags->pluck('tag_name');\n        if ($return_full) {\n            return $tags;\n        } else {\n            return $pluck->toArray();\n        }\n    }\n\n\n    public function pixum($width = 150, $height = false)\n    {\n        $cache_folder = media_base_path() . 'pixum' . DS;\n        if ($height) {\n            $h = $height;\n        } else {\n            $h = $width;\n        }\n        $h = intval($h);\n        $w = intval($width);\n        if ($h == 0) {\n            $h = 1;\n        }\n\n        if ($w == 0) {\n            $w = 1;\n        }\n        $extension = '.png';\n\n        $hash = 'pixum-' . ($h) . 'x' . $w;\n        $cachefile = normalize_path($cache_folder . DS . $hash . $extension, false);\n        if (!file_exists($cachefile)) {\n            $dirname_file = dirname($cachefile);\n            if (!is_dir($dirname_file)) {\n                mkdir_recursive($dirname_file);\n            }\n\n            $img = imagecreatetruecolor($w, $h);\n\n            $white = imagecolorallocatealpha($img, 239, 236, 236, 0);\n            imagefill($img, 0, 0, $white);\n            imagealphablending($img, false);\n            imagesavealpha($img, true);\n            imagepng($img, $cachefile);\n            imagedestroy($img);\n        }\n        if (file_exists($cachefile)) {\n            $url = media_base_url() . 'pixum/' . $hash . $extension;\n        } else {\n            $url = $this->app->url_manager->site('api_nosession/pixum_img') . '?width=' . $width . '&height=' . $height;\n        }\n\n        return $url;\n    }\n\n    public function pixum_img()\n    {\n        $mime_type = 'image/png';\n        $extension = '.png';\n        $cache_folder = media_base_path() . 'pixum' . DS;\n        $cache_folder = normalize_path($cache_folder, true);\n\n        if (!is_dir($cache_folder)) {\n            mkdir_recursive($cache_folder);\n        }\n\n        if (isset($_REQUEST['width'])) {\n            $w = $_REQUEST['width'];\n        } else {\n            $w = 1;\n        }\n\n        if (isset($_REQUEST['height'])) {\n            $h = $_REQUEST['height'];\n        } else {\n            $h = 1;\n        }\n        $h = intval($h);\n        $w = intval($w);\n        if ($h == 0) {\n            $h = 1;\n        }\n\n        if ($w == 0) {\n            $w = 1;\n        }\n        $hash = 'pixum-' . ($h) . 'x' . $w;\n        $cachefile = $cache_folder . '/' . $hash . $extension;\n\n        header('Content-Type: image/png');\n\n        if (!file_exists($cachefile)) {\n            try {\n                $img = @imagecreatetruecolor($w, $h);\n            } catch (\\Exception $e) {\n                exit;\n            }\n\n            if (!$img) {\n                exit;\n            }\n\n\n            $white = imagecolorallocatealpha($img, 239, 236, 236, 0);\n            imagefill($img, 0, 0, $white);\n            imagealphablending($img, false);\n            imagesavealpha($img, true);\n            imagepng($img, $cachefile);\n            imagedestroy($img);\n            $fp = fopen($cachefile, 'rb');\n            fpassthru($fp);\n            exit;\n        } else {\n            $fp = fopen($cachefile, 'rb');\n            fpassthru($fp);\n            exit;\n        }\n    }\n\n    private function _guess_media_type_from_file_ext($ext)\n    {\n        $type = false;\n        switch ($ext) {\n            case 'jpeg':\n            case 'jpg':\n            case 'png':\n            case 'gif':\n            case 'bpm':\n            case 'svg':\n                $type = 'picture';\n                break;\n            case 'avi':\n            case 'ogg':\n            case 'flv':\n            case 'mp4':\n            case 'qt':\n            case 'mpeg':\n                $type = 'video';\n                break;\n            case 'mp3':\n            case 'wav':\n            case 'flac':\n                $type = 'audio';\n                break;\n        }\n\n        return $type;\n    }\n\n    private function svgScaleHack($svg, $minWidth, $minHeight)\n    {\n        $reW = '/(.*<svg[^>]* width=\")([\\d.]+px)(.*)/si';\n        $reH = '/(.*<svg[^>]* height=\")([\\d.]+px)(.*)/si';\n        preg_match($reW, $svg, $mw);\n        preg_match($reH, $svg, $mh);\n\n        if (!isset($mw[2]) and isset($mh[2])) {\n            $mw[2] = $mh[2];\n        }\n\n        if (empty($mw)) {\n            $width = floatval($minWidth);\n            $height = floatval($minHeight);\n        } else {\n            $width = floatval($mw[2]);\n            $height = floatval($mh[2]);\n        }\n\n        if (!$width || !$height) {\n            return false;\n        }\n\n        // scale to make width and height big enough\n        $scale = 1;\n        if ($width < $minWidth) {\n            $scale = $minWidth / $width;\n        }\n        if ($height < $minHeight) {\n            $scale = max($scale, ($minHeight / $height));\n        }\n        $scale = 1;\n\n        $svg = preg_replace($reW, \"\\${1}{$width}px\\${3}\", $svg);\n        $svg = preg_replace($reH, \"\\${1}{$height}px\\${3}\", $svg);\n\n        return $svg;\n    }\n\n    public function thumbnail($src, $width = 200, $height = null, $crop = null)\n    {\n        if ($src == false) {\n            return $this->pixum($width, $height);\n        }\n\n        if (is_array($src)) {\n            extract($src);\n        }\n\n        if (!is_string($src)) {\n            return $this->pixum($width, $height);\n        }\n\n\n        $src = html_entity_decode($src);\n        $src = htmlspecialchars_decode($src);\n\n        $surl = $this->app->url_manager->site();\n        $src = str_replace('{SITE_URL}', $surl, $src);\n        $src = str_replace('%7BSITE_URL%7D', $surl, $src);\n        $base_src = str_replace($surl, '', $src);\n\n        if (!isset($width)) {\n            $width = 200;\n        } else {\n            $width = intval($width);\n        }\n\n        $src = strtok($src, '?');\n        if (!isset($height)) {\n            $height = 0;\n        } else {\n            $height = intval($height);\n        }\n\n        $cd = $this->_thumbnails_path() . $width . DS;\n        $cd_relative = $this->thumbnails_path_in_userfiles . DS . $width . DS;\n\n        $ext = strtolower(get_file_extension($base_src));\n\n\n        $cache = ($base_src . $width . $height) . '.' . $ext;\n\n        $cache = str_replace(' ', '_', $cache);\n\n        $ext = strtolower(get_file_extension($src));\n\n\n        if ($this->_is_webp_supported()) {\n            $ext = 'webp';\n        }\n        $is_remote = false;\n        if (!stristr($src, $surl)) {\n            if (strstr($src, 'http://')) {\n                $is_remote = true;\n            } elseif (strstr($src, 'https://')) {\n                $is_remote = true;\n            }\n        }\n\n        $cache_id_data = array();\n        $cache_id_data['mtime'] = '';\n        if (!$is_remote and @is_file($base_src)) {\n            $cache_id_data['mtime'] = filemtime($base_src);\n        }\n        $cache_id_data['base_src'] = $base_src;\n        $cache_id_data['ext'] = $ext;\n\n\n        $src_for_db = $src;\n        if (!$is_remote) {\n            $src_for_db = str_replace(site_url(), '{SITE_URL}', $src);\n        }\n\n        $cache_id_data['src'] = $src_for_db;\n\n        $cache_id_data['width'] = $width;\n        $cache_id_data['height'] = $height;\n        if ($crop) {\n            $cache_id_data['crop'] = $crop;\n        }\n        $cache_id_without_ext = 'tn-' . $this->tn_cache_id($cache_id_data);\n        $cache_id = $cache_id_without_ext . '.' . $ext;\n        $cache_path = $cd . $cache_id;\n        $cache_path_relative = $cd_relative . $cache_id;\n        $cache_path = normalize_path($cache_path, false);\n        $cache_path_relative = normalize_path($cache_path_relative, false);\n        //dump($cache_path);\n        if ($is_remote) {\n            return $src;\n        } elseif (@is_file($cache_path)) {\n            $cache_path = $this->app->url_manager->link_to_file($cache_path);\n            return $cache_path;\n        } else {\n            if (stristr($base_src, 'pixum_img')) {\n                return $this->pixum($width, $height);\n            }\n            $file_exists_local = url2dir($src);\n            if (!@is_file($file_exists_local)) {\n                return $this->pixum($width, $height);\n            }\n\n\n//            if (!defined('MW_NO_OUTPUT_CACHE')) {\n//               define('MW_NO_OUTPUT_CACHE', true);\n//            }\n\n            // $cache_id_data['cache_path'] = $cache_path;\n            $cache_id_data['cache_path_relative'] = $cache_path_relative;\n//            if (!get_option($cache_id_without_ext, 'media_tn_temp')) {\n//                save_option($cache_id_without_ext, @json_encode($cache_id_data), 'media_tn_temp');\n//            }\n\n\n            //$check = MediaThumbnail::where('filename', $cache_id_without_ext)->first();\n            $check = app()->media_repository->getThumbnailCachedItem($cache_id_without_ext);\n\n\n            if (!$check) {\n                $media_tn_temp = new MediaThumbnail();\n                $media_tn_temp->filename = $cache_id_without_ext;\n                //$media_tn_temp->filename = null;\n                $media_tn_temp->image_options = $cache_id_data;\n                $media_tn_temp->save();\n\n                return $this->app->url_manager->site('api/image-generate-tn-request/') . $media_tn_temp->id . '?saved';\n            } elseif (isset($check['image_options']) and isset($check['image_options']['cache_path_relative'])) {\n                $file_check = normalize_path(userfiles_path() . '' . $check['image_options']['cache_path_relative'], false);\n                if (is_file($file_check)) {\n                    return userfiles_url() . $check['image_options']['cache_path_relative'];\n                }\n\n            }\n\n            return $this->app->url_manager->site('api/image-generate-tn-request/') . $check['id'] . '?finded';\n        }\n\n    }\n\n    public function thumbnail_img($params)\n    {\n\n        if (php_can_use_func('ini_set')) {\n            ini_set('memory_limit', '-1');\n        }\n\n        // ini_set('memory_limit', '256M');\n\n        extract($params);\n\n        if (!isset($width)) {\n            $width = 200;\n        } else {\n            $width = intval($width);\n        }\n\n        if (!isset($height)) {\n            $height = null;\n        } else {\n            $height = intval($height);\n        }\n\n        if (!isset($crop)) {\n            $crop = null;\n        } else {\n            $crop = trim($crop);\n        }\n\n\n        if (!isset($src) or $src == false) {\n            return $this->pixum($width, $height);\n        }\n\n        $src = strtok($src, '?');\n\n        $surl = $this->app->url_manager->site();\n        $local = false;\n\n        $media_url = media_base_url();\n        $media_url = trim($media_url);\n        $src = str_replace('{SITE_URL}', $surl, $src);\n        $src = str_replace('%7BSITE_URL%7D', $surl, $src);\n        $src = str_replace('..', '', $src);\n\n        if (strstr($src, $surl) or strpos($src, $surl)) {\n            $src = str_replace($surl . '/', $surl, $src);\n            //$src = str_replace($media_url, '', $src);\n            $src = str_replace($surl, '', $src);\n            $src = ltrim($src, DS);\n            $src = ltrim($src, '/');\n            $src = rtrim($src, DS);\n            $src = rtrim($src, '/');\n            //$src = media_base_path() . $src;\n            $src = MW_ROOTPATH . $src;\n            $src = normalize_path($src, false);\n        } else {\n            $src = $this->app->url_manager->clean_url_wrappers($src);\n\n            $src1 = media_base_path() . $src;\n            $src1 = normalize_path($src1, false);\n\n            $src2 = MW_ROOTPATH . $src;\n            $src2 = normalize_path($src2, false);\n            $src3 = strtolower($src2);\n\n            if (is_file($src1)) {\n                $src = $src1;\n            } elseif (is_file($src2)) {\n                $src = $src2;\n            } elseif (is_file($src3)) {\n                $src = $src3;\n            } else {\n                $no_img = true;\n\n                if ($no_img) {\n                    return $this->pixum_img();\n                }\n            }\n        }\n        $media_root = media_base_path();\n\n        $cd = $this->_thumbnails_path() . $width . DS;\n\n        if (!is_dir($cd)) {\n            mkdir_recursive($cd);\n        }\n\n        $index_file = $cd . 'index.html';\n        if (!is_file($index_file)) {\n            file_put_contents($index_file, 'Thumbnail directory is not allowed');\n        }\n        if (!isset($ext)) {\n            $ext = strtolower(get_file_extension($src));\n        }\n        if ($ext == 'webp') {\n            if (!$this->_is_webp_supported()) {\n                $ext = strtolower(get_file_extension($src));\n\n            }\n        }\n\n        // $cache = md5(serialize($params)) . '.' . $ext;\n        $cache = $this->tn_cache_id($params) . '.' . $ext;\n\n        $cache = str_replace('..', '', $cache);\n\n        if (isset($cache_id)) {\n            $cache = str_replace('..', '', $cache_id);\n\n            // $cache = url_title($cache_id);\n        }\n//        if(!isset($cache_path)){\n//            $cache_path = $cd . $cache;\n//        }\n        $cache_path = $cd . $cache;\n        if (isset($cache_path_relative)) {\n            $cache_path = normalize_path(userfiles_path() . $cache_path_relative, false);\n        }\n//        if (!file_exists($cache_path)) {\n//                if(!isset($cache_path)){\n//                $cache_path = $cd . $cache;\n//                }\n//        }\n\n        if (file_exists($cache_path)) {\n\n            if (!isset($return_cache_path)) {\n\n                //   if (!isset($return_cache_path) and isset($params['cache_id'])) {\n                //    delete_option($cache_id, 'media_tn_temp');\n                //   }\n\n\n                if (!headers_sent()) {\n                    if (isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {\n                        $if_modified_since = preg_replace('/;.*$/', '', $_SERVER['HTTP_IF_MODIFIED_SINCE']);\n                    } else {\n                        $if_modified_since = '';\n                    }\n                    $mtime = filemtime($src);\n                    $gmdate_mod = gmdate('D, d M Y H:i:s', $mtime) . ' GMT';\n                    if ($if_modified_since == $gmdate_mod) {\n                        // header('HTTP/1.0 304 Not Modified');\n                    }\n                }\n            }\n\n        } else {\n            $src = $this->app->url_manager->clean_url_wrappers($src);\n\n            if (file_exists($src)) {\n                if (($ext) == 'svg') {\n                    $res1 = file_get_contents($src);\n                    $res1 = $this->svgScaleHack($res1, $width, $height);\n                    file_put_contents($cache_path, $res1);\n                } else {\n                    if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'gif' || $ext == 'png' || $ext == 'bmp' || $ext == 'webp') {\n\n                        if (!$height) {\n                            $height = $width;\n                        }\n                        $tn = new Thumbnailer($src);\n                        $thumbOptions = array('height' => $height, 'width' => $width);\n                        if ($crop) {\n                            $thumbOptions['crop'] = $crop;\n                        }\n\n                        $cache_path_dir = dirname($cache_path);\n                        if (!is_dir($cache_path_dir)) {\n                            mkdir_recursive($cache_path_dir);\n                        }\n                        $tn->createThumb($thumbOptions, $cache_path);\n\n//                        if (!isset($return_cache_path) and isset($params['cache_id'])) {\n//                       delete_option($params['cache_id'], 'media_tn_temp');\n//                        }\n\n\n                        if (!defined('MW_NO_OUTPUT_CACHE')) {\n                            define('MW_NO_OUTPUT_CACHE', true);\n                        }\n\n\n                        unset($tn);\n\n                    } else {\n                        return $this->pixum_img();\n                    }\n                }\n            }\n        }\n\n\n        if (isset($return_cache_path) and $return_cache_path) {\n            return $cache_path;\n        }\n\n        if (is_file($cache_path)) {\n            $ext = get_file_extension($cache_path);\n            if ($ext == 'jpg') {\n                $ext = 'jpeg';\n            }\n\n//        if (isset($return_cache_path)) {\n//            delete_option($cache_id, 'media_tn_temp');\n//            return $cache_path;\n//        }\n\n            if ($ext == 'svg') {\n                header('Content-Type: image/svg+xml');\n            } else {\n                header('Content-Type: image/' . $ext);\n            }\n\n            header('Content-Length: ' . filesize($cache_path));\n            readfile($cache_path);\n            exit;\n        } else {\n            return $this->pixum_img();\n        }\n    }\n\n\n    public function create_media_dir($params)\n    {\n        must_have_access();\n        $resp = array();\n        // $target_path = media_base_path() . 'uploaded' . DS;\n        $target_path = media_uploads_path();\n        $fn_path = media_base_path();\n        if (isset($_REQUEST['path']) and trim($_REQUEST['path']) != '') {\n            $_REQUEST['path'] = urldecode($_REQUEST['path']);\n\n            $fn_path = $target_path . DS . $_REQUEST['path'] . DS;\n            $fn_path = str_replace('..', '', $fn_path);\n            $fn_path = normalize_path($fn_path, false);\n\n            $target_path = $fn_path;\n        }\n        if (!isset($_REQUEST['name'])) {\n            $resp = array('error' => 'You must send new_folder parameter');\n        } else {\n            $fn_new_folder_path = $_REQUEST['name'];\n            $fn_new_folder_path = urldecode($fn_new_folder_path);\n            $fn_new_folder_path = str_replace('..', '', $fn_new_folder_path);\n            $fn_new_folder_path_new = $target_path . DS . $fn_new_folder_path;\n            $fn_path = normalize_path($fn_new_folder_path_new, false);\n            if (!is_dir($fn_path)) {\n                mkdir_recursive($fn_path);\n                $resp = array('success' => 'Folder ' . $fn_path . ' is created');\n            } else {\n                $resp = array('error' => 'Folder ' . $fn_new_folder_path . ' already exists');\n            }\n        }\n\n        return $resp;\n    }\n\n    public function delete_media_file($params)\n    {\n        must_have_access();\n\n        // $target_path = media_base_path() . 'uploaded' . DS;\n        $target_path = media_uploads_path();\n        $target_path = normalize_path($target_path, 0);\n        $path_restirct = userfiles_path();\n\n        $fn_remove_path = $_REQUEST['path'];\n        $resp = array();\n        if ($fn_remove_path != false and is_array($fn_remove_path)) {\n            foreach ($fn_remove_path as $key => $value) {\n                $fn_remove = $this->app->url_manager->to_path($value);\n\n                if (isset($fn_remove) and trim($fn_remove) != '' and trim($fn_remove) != 'false') {\n                    $path = urldecode($fn_remove);\n                    $path = normalize_path($path, 0);\n                    $path = str_replace('..', '', $path);\n                    $path = str_replace($path_restirct, '', $path);\n                    $target_path = userfiles_path() . DS . $path;\n                    $target_path = normalize_path($target_path, false);\n\n                    //  if (stristr($target_path, media_base_path())) {\n                    if (stristr($target_path, media_uploads_path())) {\n                        if (is_dir($target_path)) {\n                            mw('MicroweberPackages\\Utils\\System\\Files')->rmdir($target_path, false);\n                            $resp = array('success' => 'Directory ' . $target_path . ' is deleted');\n                        } elseif (is_file($target_path)) {\n                            unlink($target_path);\n                            $resp = array('success' => 'File ' . basename($target_path) . ' is deleted');\n                        } else {\n                            $resp = array('error' => 'Not valid file or folder ' . $target_path . ' ');\n                        }\n                    } else {\n                        $resp = array('error' => 'Not allowed to delete on ' . $target_path . ' ');\n                    }\n                }\n            }\n        }\n\n        return $resp;\n    }\n\n    public function tn_cache_id($params)\n    {\n\n        $tnhash = crc32(json_encode($params));\n        if (isset($params['src'])) {\n            $src = basename($params['src']);\n            $src = no_ext($src);\n            if ($src) {\n                $src = str_slug($src);\n                $tnhash = $src . '-' . $tnhash;\n            }\n        }\n\n        return $tnhash;\n    }\n\n    public function relative_media_start_path()\n    {\n\n\n        static $path;\n        if ($path == false) {\n            $environment = \\App::environment();\n\n            $path = MW_MEDIA_FOLDER_NAME . '/' . $environment . '';\n        }\n\n        return $path;\n    }\n\n\n    private function _is_webp_supported()\n    {\n        if (function_exists('imagewebp') and $_SERVER and isset($_SERVER['HTTP_ACCEPT']) and is_string($_SERVER['HTTP_ACCEPT']) and strpos($_SERVER['HTTP_ACCEPT'], 'image/webp') !== false) {\n            return true;\n        }\n    }\n\n    private function _thumbnails_path()\n    {\n        $userfiles_dir = userfiles_path();\n        // $userfiles_dir = media_base_path();\n        $userfiles_cache_dir = normalize_path($userfiles_dir . $this->thumbnails_path_in_userfiles);\n\n        // media_base_path() . 'thumbnail' . DS;\n\n        return $userfiles_cache_dir;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\Media;\n\nuse Conner\\Tagging\\Model\\Tagged;\nuse \\Intervention\\Image\\ImageManagerStatic as Image;\nuse MicroweberPackages\\Helper\\HTMLClean;\nuse MicroweberPackages\\Media\\Models\\Media;\nuse MicroweberPackages\\Media\\Models\\MediaThumbnail;\nuse MicroweberPackages\\Utils\\Media\\Thumbnailer;\nuse MicroweberPackages\\Utils\\System\\Files;\n\n\nclass MediaManager\n{\n    public $app;\n    public $tables = array();\n    public $table_prefix = false;\n    public $download_remote_images = false;\n    public $no_cache;\n\n    public $thumbnails_path_in_userfiles = 'cache/thumbnails';\n\n    public function __construct($app = null)\n    {\n        if (!is_object($this->app)) {\n            if (is_object($app)) {\n                $this->app = $app;\n            } else {\n                $this->app = mw();\n            }\n        }\n\n        $this->tables['media'] = 'media';\n    }\n\n    public function get_picture($content_id, $for = 'content', $full = false)\n    {\n        if ($for == 'post' or $for == 'posts' or $for == 'page' or $for == 'pages') {\n            $for = 'content';\n        } elseif ($for == 'category' or $for == 'categories') {\n            $for = 'categories';\n        }\n\n        $media = app()->media_repository->getPictureByRelIdAndRelType($content_id, $for);\n        if (!empty($media)) {\n\n            if ($full) {\n                return $media;\n            }\n            return $media['filename'];\n        }\n\n        return false;\n    }\n\n    public function get_first_image_from_html($html)\n    {\n        if (preg_match('/<img.+?src=\"(.+?)\"/', $html, $matches)) {\n            return $matches[1];\n        } elseif (preg_match('/<img.+?src=\\'(.+?)\\'/', $html, $matches)) {\n            return $matches[1];\n        } else {\n            return false;\n        }\n    }\n\n    public function get_by_id($id)\n    {\n\n        $table = $this->tables['media'];\n        $id = intval($id);\n        if ($id == 0) {\n            return false;\n        }\n        $params = array();\n        $params['id'] = $id;\n        $params['limit'] = 1;\n\n        $params['table'] = $table;\n        $params['cache_group'] = 'media/' . $id;\n\n        $q = $this->get($params);\n        if (is_array($q) and isset($q[0])) {\n            $content = $q[0];\n\n            if (isset($content['image_options'])) {\n                $content['image_options'] = @json_decode($content['image_options'], true);\n            }\n\n\n        } else {\n            return false;\n        }\n\n        return $content;\n    }\n\n    public function upload_progress_check()\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            mw_error('not logged in as admin');\n        }\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref_str = md5($_SERVER['HTTP_REFERER']);\n        } else {\n            $ref_str = 'no_HTTP_REFERER';\n        }\n        $ref_str = 'no_HTTP_REFERER';\n        $cache_id = 'upload_progress_' . $ref_str;\n        $cache_group = 'media/global';\n\n        $cache_content = $this->app->cache_manager->get($cache_id, $cache_group);\n        if ($cache_content != false) {\n            if (isset($cache_content['tmp_name']) != false) {\n                if (isset($cache_content['f']) != false) {\n                    $filename = $cache_content['tmp_name'];\n                    if (is_file($filename)) {\n                        $filesize = filesize($filename);\n                    }\n\n                    $filename = $cache_content['f'];\n\n                    if (is_file($filename)) {\n                        $filesize = filesize($filename);\n                    }\n\n                    $perc = $this->app->format->percent($filesize, $cache_content['size']);\n\n                    return $perc;\n                }\n            }\n        }\n    }\n\n    public function upload($data)\n    {\n        if ($this->app->user_manager->is_admin() == false) {\n            mw_error('not logged in as admin');\n        }\n        $files_utils = new Files();\n\n\n        ini_set('upload_max_filesize', '2500M');\n        // ini_set('memory_limit', '256M');\n        ini_set('max_execution_time', 0);\n        ini_set('post_max_size', '2500M');\n        ini_set('max_input_time', 9999999);\n\n        // ini_set(\"session.upload_progress.enabled\", 1);\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref_str = md5($_SERVER['HTTP_REFERER']);\n        } else {\n            $ref_str = 'no_HTTP_REFERER';\n        }\n        $ref_str = 'no_HTTP_REFERER';\n        $cache_id = 'upload_progress_' . $ref_str;\n        $cache_group = 'media/global';\n\n        $target_path = media_base_path() . 'uploaded' . DS;\n        $target_path = normalize_path($target_path, 1);\n\n        if (!is_dir($target_path)) {\n            mkdir_recursive($target_path);\n        }\n        $rerturn = array();\n\n        if ((!isset($_FILES) or empty($_FILES)) and isset($data['file'])) {\n            if (isset($data['name'])) {\n                $data['name'] = mw()->url_manager->clean_url_wrappers($data['name']);\n\n                $is_dangerous_file = $files_utils->is_dangerous_file($data['name']);\n                if ($is_dangerous_file) {\n                    return;\n                }\n\n\n                $f = $target_path . $data['name'];\n                if (is_file($f)) {\n                    $f = $target_path . date('YmdHis') . $data['name'];\n                }\n\n                $df = strpos($data['file'], 'base64,');\n                if ($df != false) {\n                    //   $df = substr($data['file'], 0, $df);\n                    $data['file'] = substr($data['file'], $df + 7);\n                    $data['file'] = str_replace(' ', '+', $data['file']);\n                    //    d($data['file']);\n                }\n\n                $up = $this->base64_to_file($data['file'], $f);\n\n                $rerturn['src'] = $this->app->url_manager->link_to_file($f);\n                $rerturn['name'] = $data['name'];\n\n                return json_encode($rerturn);\n            }\n        } else {\n            $allowedExts = array('jpg', 'jpeg', 'gif', 'png', 'bmp');\n\n            //$upl = $this->app->cache_manager->save($_FILES, $cache_id, $cache_group);\n            foreach ($_FILES as $item) {\n                $item['name'] = mw()->url_manager->clean_url_wrappers($item['name']);\n                $extension = get_file_extension($item['name']);\n\n                $is_dangerous_file = $files_utils->is_dangerous_file($data['name']);\n                if ($is_dangerous_file) {\n                    return;\n                }\n\n                if (in_array($extension, $allowedExts)) {\n                    if ($item['error'] > 0) {\n                        mw_error('Error: ' . $item['error']);\n                    } else {\n                        $upl = $this->app->cache_manager->save($item, $cache_id, $cache_group);\n\n                        $f = $target_path . $item['name'];\n                        if (is_file($f)) {\n                            $f = $target_path . date('YmdHis') . $item['name'];\n                        }\n\n                        $progress = (array)$item;\n                        $progress['f'] = $f;\n                        $upl = $this->app->cache_manager->save($progress, $cache_id, $cache_group);\n\n                        if (move_uploaded_file($item['tmp_name'], $f)) {\n                            $rerturn['src'] = $this->app->url_manager->link_to_file($f);\n                            $rerturn['name'] = $item['name'];\n                        }\n                    }\n                } else {\n                    mw_error('Invalid file ext');\n                }\n\n                //\n                //            $input = fopen(\"php://input\", \"r\");\n                //            $temp = tmpfile();\n                //\n                //            $realSize = stream_copy_to_stream($input, $temp);\n                //            fclose($input);\n                //\n                //\n                //\n                //\n                //            $target = fopen($f, \"w\");\n                //            fseek($temp, 0, SEEK_SET);\n                //            stream_copy_to_stream($temp, $target);\n                //            $rerturn['src'] = $this->app->url_manager->link_to_file($f);\n                //            $rerturn['name'] = $item['name'];\n                //            fclose($target);\n            }\n        }\n\n        exit(json_encode($rerturn));\n    }\n\n    private function base64_to_file($data, $target)\n    {\n        touch($target);\n        if (is_writable($target) == false) {\n            exit(\"$target is not writable\");\n        }\n        $whandle = fopen($target, 'wb');\n        stream_filter_append($whandle, 'convert.base64-decode', STREAM_FILTER_WRITE);\n        fwrite($whandle, $data);\n        fclose($whandle);\n    }\n\n    public function reorder($data)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        if ($adm == false) {\n            mw_error('Error: not logged in as admin.' . __FILE__ . __LINE__);\n        }\n\n        $table = $this->tables['media'];\n        foreach ($data as $value) {\n            if (is_array($value)) {\n                $indx = array();\n                $i = 0;\n                foreach ($value as $value2) {\n                    $indx[$i] = $value2;\n                    ++$i;\n                }\n\n                $this->app->database_manager->update_position_field($table, $indx);\n\n                return true;\n                // d($indx);\n            }\n        }\n    }\n\n    public function delete($data)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        $ids_to_delete = array();\n        if (!isset($data['id']) and (!is_array($data) and intval($data) > 0)) {\n            $ids_to_delete[] = intval($data);\n        } elseif (isset($data['id']) and is_array($data['id'])) {\n            $ids_to_delete = $data['id'];\n        } elseif (isset($data['id']) and !is_array($data['id'])) {\n            $ids_to_delete[] = intval($data['id']);\n        } elseif (isset($data['ids']) and is_array($data['ids'])) {\n            $ids_to_delete = $data['ids'];\n        } elseif (isset($data['ids']) and !is_array($data['ids'])) {\n            $ids_to_delete = explode(',', $data['ids']);\n        }\n        if ($ids_to_delete) {\n            foreach ($ids_to_delete as $delete) {\n                $c_id = intval($delete);\n                $pic_data = $this->get_by_id($c_id);\n\n\n                if ($adm == false) {\n                    if ($pic_data['created_by'] != $this->app->user_manager->id()) {\n                        mw_error('Error: not logged in as admin to delete media.');\n                    }\n                }\n//                if (isset($pic_data['filename'])) {\n//                    $fn_remove = $this->app->url_manager->to_path($pic_data['filename']);\n//                    if (is_file($fn_remove)) {\n//                        @unlink($fn_remove);\n//                    }\n//                }\n\n                $this->app->database_manager->delete_by_id('media', $c_id);\n            }\n\n            return true;\n        }\n    }\n\n    public function get_all($params)\n    {\n        if (!is_array($params)) {\n            $params = parse_params($params);\n        }\n        $table = $this->tables['media'];\n        $params['table'] = $table;\n\n        return $this->app->database_manager->get($params);\n    }\n\n    public function get($params)\n    {\n        $table = $this->tables['media'];\n\n        if ($params != false and !is_array($params) and intval($params) > 0) {\n            $params2 = array();\n\n            $params2['rel_type'] = 'content';\n            $params2['rel_id'] = intval($params);\n            $params = $params2;\n        } else {\n            $params = parse_params($params);\n        }\n\n        if (!isset($params['rel_type']) and isset($params['for'])) {\n            $params['rel_type'] = $this->app->database_manager->assoc_table_name($params['for']);\n        }\n        if (!isset($params['rel_type'])) {\n            $params['rel_type'] = 'content';\n        }\n\n        if (!isset($params['limit'])) {\n            $params['limit'] = 'nolimit';\n        }\n\n        $params['table'] = $table;\n        $params['order_by'] = 'position ASC';\n//d($params);\n        $data = $this->app->database_manager->get($params);\n        if (isset($params['single'])) {\n            if (isset($data['image_options']) and !is_array($data['image_options'])) {\n                $data['image_options'] = @json_decode($data['image_options'], true);\n            }\n            return $data;\n        }\n        // if (media_base_url()) {\n        if (!empty($data)) {\n            $return = array();\n            foreach ($data as $item) {\n                if (isset($item['filename']) and $item['filename'] != false) {\n                    if (!stristr($item['filename'], '{SITE_URL}')\n                        and !stristr($item['filename'], '{MEDIA_URL}')\n                        and !stristr($item['filename'], '://')\n                        and !stristr($item['filename'], media_base_url())\n                    ) {\n                        $item['filename'] = media_base_url() . $item['filename'];\n                    }\n                }\n\n                if (isset($item['title']) and $item['title'] != '') {\n                    $item['title'] = html_entity_decode($item['title']);\n                    $item['title'] = strip_tags($item['title']);\n                    $item['title'] = $this->app->format->clean_html($item['title']);\n                }\n\n                if (isset($item['image_options']) and !is_array($item['image_options'])) {\n                    $item['image_options'] = @json_decode($item['image_options'], true);\n                }\n\n\n                $return[] = $item;\n            }\n\n            $data = $return;\n        }\n        // }\n\n        return $data;\n    }\n\n    public function save($data)\n    {\n        $s = array();\n\n        if (isset($data['content-id'])) {\n            $t = trim($data['content-id']);\n            $s['rel_id'] = $t;\n            $s['rel_type'] = 'content';\n        } elseif (isset($data['content_id'])) {\n            $t = trim($data['content_id']);\n            $s['rel_id'] = $t;\n            $s['rel_type'] = 'content';\n            $s['rel_type'] = 'content';\n        }\n\n        if (isset($data['for'])) {\n            $t = trim($data['for']);\n            $t = $this->app->database_manager->assoc_table_name($t);\n            $s['rel_type'] = $t;\n        }\n        if (isset($data['rel_id'])) {\n            $t = $data['rel_id'];\n            $s['rel_id'] = $t;\n        }\n        if (isset($data['rel_type'])) {\n            $t = $data['rel_type'];\n            $s['rel_type'] = $t;\n        }\n\n        if (isset($data['for-id'])) {\n            $t = trim($data['for-id']);\n            $s['rel_id'] = $t;\n        }\n\n        if (isset($data['for_id'])) {\n            $t = trim($data['for_id']);\n            $s['rel_id'] = $t;\n        }\n\n        if (isset($data['id'])) {\n            $t = intval($data['id']);\n            $s['id'] = $t;\n        }\n\n        if (isset($data['title'])) {\n            $t = ($data['title']);\n            $s['title'] = $t;\n        }\n        if (!isset($data['src']) and isset($data['filename'])) {\n            $data['src'] = $data['filename'];\n        }\n\n        if (isset($data['src'])) {\n            $host = (parse_url(site_url()));\n\n            $host_dir = false;\n            if (isset($host['host'])) {\n                $host_dir = $host['host'];\n                $host_dir = str_ireplace('www.', '', $host_dir);\n                $host_dir = str_ireplace('.', '-', $host_dir);\n            }\n\n            $url2dir = $this->app->url_manager->to_path($data['src']);\n            $uploaded_files_dir = media_base_path() . DS . 'uploaded';\n\n            if (isset($s['rel_type']) and isset($s['rel_id'])) {\n                $s['rel_type'] = str_replace('..', '', $s['rel_type']);\n\n                $move_uploaded_files_dir = media_base_path() . 'downloaded' . DS . $s['rel_type'] . DS;\n                $move_uploaded_files_dir_index = media_base_path() . 'downloaded' . DS . $s['rel_type'] . DS . 'index.php';\n\n                $uploaded_files_dir = normalize_path($uploaded_files_dir);\n                if (!is_dir($move_uploaded_files_dir)) {\n                    mkdir_recursive($move_uploaded_files_dir);\n                    @touch($move_uploaded_files_dir_index);\n                }\n\n                $url2dir = normalize_path($url2dir, false);\n\n                $dl_remote = $this->download_remote_images;\n\n                if (isset($data['allow_remote_download']) and $data['allow_remote_download']) {\n                    $dl_remote = $data['allow_remote_download'];\n                }\n\n                if ($dl_remote and isset($data['src'])) {\n                    $ext = get_file_extension($data['src']);\n                    $data['media_type'] = $this->_guess_media_type_from_file_ext($ext);\n                    if ($data['media_type'] != false) {\n                        // starting download\n\n                        $is_remote = strtolower($data['src']);\n\n                        if (strstr($is_remote, 'http:') || strstr($is_remote, 'https:')) {\n                            $dl_host = (parse_url($is_remote));\n\n                            $dl_host_host_dir = false;\n                            if (isset($dl_host['host'])) {\n                                $dl_host_host_dir = $dl_host['host'];\n                                $dl_host_host_dir = str_ireplace('www.', '', $dl_host_host_dir);\n                                $dl_host_host_dir = str_ireplace('.', '-', $dl_host_host_dir);\n                            }\n\n                            $move_uploaded_files_dir = $move_uploaded_files_dir . 'external' . DS;\n                            if ($dl_host_host_dir) {\n                                $move_uploaded_files_dir = $move_uploaded_files_dir . $dl_host_host_dir . DS;\n                            }\n\n                            if (!is_dir($move_uploaded_files_dir)) {\n                                mkdir_recursive($move_uploaded_files_dir);\n                            }\n\n                            $newfile = basename($data['src']);\n\n                            $newfile = preg_replace('/[^\\w\\._]+/', '_', $newfile);\n                            $newfile = $move_uploaded_files_dir . $newfile;\n\n                            if (!is_file($newfile)) {\n                                mw()->http->url($data['src'])->download($newfile);\n                            }\n                            if (is_file($newfile)) {\n                                $url2dir = $this->app->url_manager->to_path($newfile);\n                            }\n                        }\n                    }\n                }\n\n                if (is_file($url2dir)) {\n                    $data['src'] = $this->app->url_manager->link_to_file($url2dir);\n                }\n            }\n\n            $s['filename'] = $data['src'];\n        }\n\n        if (!isset($data['position']) and !isset($s['id'])) {\n            $s['position'] = 9999999;\n        }\n\n        if (isset($data['for_id'])) {\n            $t = trim($data['for_id']);\n            $s['rel_id'] = $t;\n        }\n\n        if ((!isset($s['id']) or (isset($s['id']) and $s['id'] == 0))\n            and isset($s['filename'])\n            and isset($s['rel_id'])\n            and isset($s['rel_type'])\n        ) {\n            $s['filename'] = str_replace(site_url(), '{SITE_URL}', $s['filename']);\n            $check = array();\n            $check['rel_type'] = $s['rel_type'];\n            $check['rel_id'] = $s['rel_id'];\n            $check['filename'] = $s['filename'];\n            $check['single'] = true;\n            $check = $this->get_all($check);\n            if (isset($check['id'])) {\n                $s['id'] = $check['id'];\n            }\n        }\n\n        if (!isset($s['id']) and isset($s['filename']) and !isset($data['media_type'])) {\n            $ext = get_file_extension($s['filename']);\n            $data['media_type'] = $this->_guess_media_type_from_file_ext($ext);\n        }\n\n        if (isset($data['media_type'])) {\n            $t = $this->app->database_manager->escape_string($data['media_type']);\n            $s['media_type'] = $t;\n        }\n\n        if (isset($data['tags'])) {\n            $s['tags'] = $data['tags'];\n        }\n\n\n        if (isset($data['image_options'])) {\n            $s['image_options'] = @json_encode($data['image_options']);\n        }\n\n        if (isset($s['filename']) && is_array($s['filename'])) {\n            if (isset($s['filename']['error'])) {\n                return false;\n            }\n        }\n\n        if (isset($s['rel_type']) and isset($s['rel_id'])) {\n            $s['rel_id'] = trim($s['rel_id']);\n            $table = $this->tables['media'];\n            $s = $this->app->database_manager->extended_save($table, $s);\n            $this->app->cache_manager->delete('media');\n\n            return $s;\n        } elseif (isset($s['id'])) {\n            $table = $this->tables['media'];\n            $s = $this->app->database_manager->extended_save($table, $s);\n            $this->app->cache_manager->delete('media');\n\n            return $s;\n        } else {\n            mw_error('Invalid data');\n        }\n    }\n\n    public function tags($media_id = false, $return_full = false)\n    {\n        /* $data = array();\n         $data['table'] = $this->tables['media'];\n         if ($media_id) {\n             $data['id'] = intval($media_id);\n         }\n         return $this->app->tags_manager->get_values($data, $return_full);*/\n\n        $query = Tagged::query();\n        $query->where('taggable_type', 'media');\n\n        if ($media_id) {\n            $query->where('taggable_id', $media_id);\n        }\n        $tags = $query->get();\n        $pluck = $tags->pluck('tag_name');\n        if ($return_full) {\n            return $tags;\n        } else {\n            return $pluck->toArray();\n        }\n    }\n\n\n    public function pixum($width = 150, $height = false)\n    {\n        $cache_folder = media_base_path() . 'pixum' . DS;\n        if ($height) {\n            $h = $height;\n        } else {\n            $h = $width;\n        }\n        $h = intval($h);\n        $w = intval($width);\n        if ($h == 0) {\n            $h = 1;\n        }\n\n        if ($w == 0) {\n            $w = 1;\n        }\n        $extension = '.png';\n\n        $hash = 'pixum-' . ($h) . 'x' . $w;\n        $cachefile = normalize_path($cache_folder . DS . $hash . $extension, false);\n        if (!file_exists($cachefile)) {\n            $dirname_file = dirname($cachefile);\n            if (!is_dir($dirname_file)) {\n                mkdir_recursive($dirname_file);\n            }\n\n            $img = imagecreatetruecolor($w, $h);\n\n            $white = imagecolorallocatealpha($img, 239, 236, 236, 0);\n            imagefill($img, 0, 0, $white);\n            imagealphablending($img, false);\n            imagesavealpha($img, true);\n            imagepng($img, $cachefile);\n            imagedestroy($img);\n        }\n        if (file_exists($cachefile)) {\n            $url = media_base_url() . 'pixum/' . $hash . $extension;\n        } else {\n            $url = $this->app->url_manager->site('api_nosession/pixum_img') . '?width=' . $width . '&height=' . $height;\n        }\n\n        return $url;\n    }\n\n    public function pixum_img()\n    {\n        $mime_type = 'image/png';\n        $extension = '.png';\n        $cache_folder = media_base_path() . 'pixum' . DS;\n        $cache_folder = normalize_path($cache_folder, true);\n\n        if (!is_dir($cache_folder)) {\n            mkdir_recursive($cache_folder);\n        }\n\n        if (isset($_REQUEST['width'])) {\n            $w = $_REQUEST['width'];\n        } else {\n            $w = 1;\n        }\n\n        if (isset($_REQUEST['height'])) {\n            $h = $_REQUEST['height'];\n        } else {\n            $h = 1;\n        }\n        $h = intval($h);\n        $w = intval($w);\n        if ($h == 0) {\n            $h = 1;\n        }\n\n        if ($w == 0) {\n            $w = 1;\n        }\n        $hash = 'pixum-' . ($h) . 'x' . $w;\n        $cachefile = $cache_folder . '/' . $hash . $extension;\n\n        header('Content-Type: image/png');\n\n        if (!file_exists($cachefile)) {\n            try {\n                $img = @imagecreatetruecolor($w, $h);\n            } catch (\\Exception $e) {\n                exit;\n            }\n\n            if (!$img) {\n                exit;\n            }\n\n\n            $white = imagecolorallocatealpha($img, 239, 236, 236, 0);\n            imagefill($img, 0, 0, $white);\n            imagealphablending($img, false);\n            imagesavealpha($img, true);\n            imagepng($img, $cachefile);\n            imagedestroy($img);\n            $fp = fopen($cachefile, 'rb');\n            fpassthru($fp);\n            exit;\n        } else {\n            $fp = fopen($cachefile, 'rb');\n            fpassthru($fp);\n            exit;\n        }\n    }\n\n    private function _guess_media_type_from_file_ext($ext)\n    {\n        $type = false;\n        switch ($ext) {\n            case 'jpeg':\n            case 'jpg':\n            case 'png':\n            case 'gif':\n            case 'bpm':\n            case 'svg':\n                $type = 'picture';\n                break;\n            case 'avi':\n            case 'ogg':\n            case 'flv':\n            case 'mp4':\n            case 'qt':\n            case 'mpeg':\n                $type = 'video';\n                break;\n            case 'mp3':\n            case 'wav':\n            case 'flac':\n                $type = 'audio';\n                break;\n        }\n\n        return $type;\n    }\n\n    private function svgScaleHack($svg, $minWidth, $minHeight)\n    {\n        $reW = '/(.*<svg[^>]* width=\")([\\d.]+px)(.*)/si';\n        $reH = '/(.*<svg[^>]* height=\")([\\d.]+px)(.*)/si';\n        preg_match($reW, $svg, $mw);\n        preg_match($reH, $svg, $mh);\n\n        if (!isset($mw[2]) and isset($mh[2])) {\n            $mw[2] = $mh[2];\n        }\n\n        if (empty($mw)) {\n            $width = floatval($minWidth);\n            $height = floatval($minHeight);\n        } else {\n            $width = floatval($mw[2]);\n            $height = floatval($mh[2]);\n        }\n\n        if (!$width || !$height) {\n            return false;\n        }\n\n        // scale to make width and height big enough\n        $scale = 1;\n        if ($width < $minWidth) {\n            $scale = $minWidth / $width;\n        }\n        if ($height < $minHeight) {\n            $scale = max($scale, ($minHeight / $height));\n        }\n        $scale = 1;\n\n        $svg = preg_replace($reW, \"\\${1}{$width}px\\${3}\", $svg);\n        $svg = preg_replace($reH, \"\\${1}{$height}px\\${3}\", $svg);\n\n        return $svg;\n    }\n\n    public function thumbnail($src, $width = 200, $height = null, $crop = null)\n    {\n        if ($src == false) {\n            return $this->pixum($width, $height);\n        }\n\n        if (is_array($src)) {\n            extract($src);\n        }\n\n        if (!is_string($src)) {\n            return $this->pixum($width, $height);\n        }\n\n\n        $src = html_entity_decode($src);\n        $src = htmlspecialchars_decode($src);\n\n        $surl = $this->app->url_manager->site();\n        $src = str_replace('{SITE_URL}', $surl, $src);\n        $src = str_replace('%7BSITE_URL%7D', $surl, $src);\n        $base_src = str_replace($surl, '', $src);\n\n        if (!isset($width)) {\n            $width = 200;\n        } else {\n            $width = intval($width);\n        }\n\n        $src = strtok($src, '?');\n        if (!isset($height)) {\n            $height = 0;\n        } else {\n            $height = intval($height);\n        }\n\n        $cd = $this->_thumbnails_path() . $width . DS;\n        $cd_relative = $this->thumbnails_path_in_userfiles . DS . $width . DS;\n\n        $ext = strtolower(get_file_extension($base_src));\n\n\n        $cache = ($base_src . $width . $height) . '.' . $ext;\n\n        $cache = str_replace(' ', '_', $cache);\n\n        $ext = strtolower(get_file_extension($src));\n\n\n        if ($this->_is_webp_supported()) {\n            $ext = 'webp';\n        }\n        $is_remote = false;\n        if (!stristr($src, $surl)) {\n            if (strstr($src, 'http://')) {\n                $is_remote = true;\n            } elseif (strstr($src, 'https://')) {\n                $is_remote = true;\n            }\n        }\n\n        $cache_id_data = array();\n        $cache_id_data['mtime'] = '';\n        if (!$is_remote and @is_file($base_src)) {\n            $cache_id_data['mtime'] = filemtime($base_src);\n        }\n        $cache_id_data['base_src'] = $base_src;\n        $cache_id_data['ext'] = $ext;\n\n\n        $src_for_db = $src;\n        if (!$is_remote) {\n            $src_for_db = str_replace(site_url(), '{SITE_URL}', $src);\n        }\n\n        $cache_id_data['src'] = $src_for_db;\n\n        $cache_id_data['width'] = $width;\n        $cache_id_data['height'] = $height;\n        if ($crop) {\n            $cache_id_data['crop'] = $crop;\n        }\n        $cache_id_without_ext = 'tn-' . $this->tn_cache_id($cache_id_data);\n        $cache_id = $cache_id_without_ext . '.' . $ext;\n        $cache_path = $cd . $cache_id;\n        $cache_path_relative = $cd_relative . $cache_id;\n        $cache_path = normalize_path($cache_path, false);\n        $cache_path_relative = normalize_path($cache_path_relative, false);\n        //dump($cache_path);\n        if ($is_remote) {\n            return $src;\n        } elseif (@is_file($cache_path)) {\n            $cache_path = $this->app->url_manager->link_to_file($cache_path);\n            return $cache_path;\n        } else {\n            if (stristr($base_src, 'pixum_img')) {\n                return $this->pixum($width, $height);\n            }\n            $file_exists_local = url2dir($src);\n            if (!@is_file($file_exists_local)) {\n                return $this->pixum($width, $height);\n            }\n\n\n//            if (!defined('MW_NO_OUTPUT_CACHE')) {\n//               define('MW_NO_OUTPUT_CACHE', true);\n//            }\n\n            // $cache_id_data['cache_path'] = $cache_path;\n            $cache_id_data['cache_path_relative'] = $cache_path_relative;\n//            if (!get_option($cache_id_without_ext, 'media_tn_temp')) {\n//                save_option($cache_id_without_ext, @json_encode($cache_id_data), 'media_tn_temp');\n//            }\n\n\n            //$check = MediaThumbnail::where('filename', $cache_id_without_ext)->first();\n            $check = app()->media_repository->getThumbnailCachedItem($cache_id_without_ext);\n\n\n            if (!$check) {\n                $media_tn_temp = new MediaThumbnail();\n                $media_tn_temp->filename = $cache_id_without_ext;\n                //$media_tn_temp->filename = null;\n                $media_tn_temp->image_options = $cache_id_data;\n                $media_tn_temp->save();\n\n                return $this->app->url_manager->site('api/image-generate-tn-request/') . $media_tn_temp->id . '?saved';\n            } elseif (isset($check['image_options']) and isset($check['image_options']['cache_path_relative'])) {\n                $file_check = normalize_path(userfiles_path() . '' . $check['image_options']['cache_path_relative'], false);\n                if (is_file($file_check)) {\n                    return userfiles_url() . $check['image_options']['cache_path_relative'];\n                }\n\n            }\n\n            return $this->app->url_manager->site('api/image-generate-tn-request/') . $check['id'] . '?finded';\n        }\n\n    }\n\n    public function thumbnail_img($params)\n    {\n\n        if (php_can_use_func('ini_set')) {\n            ini_set('memory_limit', '-1');\n        }\n\n        // ini_set('memory_limit', '256M');\n\n        extract($params);\n\n        if (!isset($width)) {\n            $width = 200;\n        } else {\n            $width = intval($width);\n        }\n\n        if (!isset($height)) {\n            $height = null;\n        } else {\n            $height = intval($height);\n        }\n\n        if (!isset($crop)) {\n            $crop = null;\n        } else {\n            $crop = trim($crop);\n        }\n\n\n        if (!isset($src) or $src == false) {\n            return $this->pixum($width, $height);\n        }\n\n        $src = strtok($src, '?');\n\n        $surl = $this->app->url_manager->site();\n        $local = false;\n\n        $media_url = media_base_url();\n        $media_url = trim($media_url);\n        $src = str_replace('{SITE_URL}', $surl, $src);\n        $src = str_replace('%7BSITE_URL%7D', $surl, $src);\n        $src = str_replace('..', '', $src);\n\n        if (strstr($src, $surl) or strpos($src, $surl)) {\n            $src = str_replace($surl . '/', $surl, $src);\n            //$src = str_replace($media_url, '', $src);\n            $src = str_replace($surl, '', $src);\n            $src = ltrim($src, DS);\n            $src = ltrim($src, '/');\n            $src = rtrim($src, DS);\n            $src = rtrim($src, '/');\n            //$src = media_base_path() . $src;\n            $src = MW_ROOTPATH . $src;\n            $src = normalize_path($src, false);\n        } else {\n            $src = $this->app->url_manager->clean_url_wrappers($src);\n\n            $src1 = media_base_path() . $src;\n            $src1 = normalize_path($src1, false);\n\n            $src2 = MW_ROOTPATH . $src;\n            $src2 = normalize_path($src2, false);\n            $src3 = strtolower($src2);\n\n            if (is_file($src1)) {\n                $src = $src1;\n            } elseif (is_file($src2)) {\n                $src = $src2;\n            } elseif (is_file($src3)) {\n                $src = $src3;\n            } else {\n                $no_img = true;\n\n                if ($no_img) {\n                    return $this->pixum_img();\n                }\n            }\n        }\n        $media_root = media_base_path();\n\n        $cd = $this->_thumbnails_path() . $width . DS;\n\n        if (!is_dir($cd)) {\n            mkdir_recursive($cd);\n        }\n\n        $index_file = $cd . 'index.html';\n        if (!is_file($index_file)) {\n            file_put_contents($index_file, 'Thumbnail directory is not allowed');\n        }\n        if (!isset($ext)) {\n            $ext = strtolower(get_file_extension($src));\n        }\n        if ($ext == 'webp') {\n            if (!$this->_is_webp_supported()) {\n                $ext = strtolower(get_file_extension($src));\n\n            }\n        }\n\n        // $cache = md5(serialize($params)) . '.' . $ext;\n        $cache = $this->tn_cache_id($params) . '.' . $ext;\n\n        $cache = str_replace('..', '', $cache);\n\n        if (isset($cache_id)) {\n            $cache = str_replace('..', '', $cache_id);\n\n            // $cache = url_title($cache_id);\n        }\n//        if(!isset($cache_path)){\n//            $cache_path = $cd . $cache;\n//        }\n        $cache_path = $cd . $cache;\n        if (isset($cache_path_relative)) {\n            $cache_path = normalize_path(userfiles_path() . $cache_path_relative, false);\n        }\n//        if (!file_exists($cache_path)) {\n//                if(!isset($cache_path)){\n//                $cache_path = $cd . $cache;\n//                }\n//        }\n\n        if (file_exists($cache_path)) {\n\n            if (!isset($return_cache_path)) {\n\n                //   if (!isset($return_cache_path) and isset($params['cache_id'])) {\n                //    delete_option($cache_id, 'media_tn_temp');\n                //   }\n\n\n                if (!headers_sent()) {\n                    if (isset($_SERVER['HTTP_IF_MODIFIED_SINCE'])) {\n                        $if_modified_since = preg_replace('/;.*$/', '', $_SERVER['HTTP_IF_MODIFIED_SINCE']);\n                    } else {\n                        $if_modified_since = '';\n                    }\n                    $mtime = filemtime($src);\n                    $gmdate_mod = gmdate('D, d M Y H:i:s', $mtime) . ' GMT';\n                    if ($if_modified_since == $gmdate_mod) {\n                        // header('HTTP/1.0 304 Not Modified');\n                    }\n                }\n            }\n\n        } else {\n            $src = $this->app->url_manager->clean_url_wrappers($src);\n\n            if (file_exists($src)) {\n                if (($ext) == 'svg') {\n                    $res1 = file_get_contents($src);\n                    $res1 = $this->svgScaleHack($res1, $width, $height);\n                    file_put_contents($cache_path, $res1);\n                } else {\n                    if ($ext == 'jpg' || $ext == 'jpeg' || $ext == 'gif' || $ext == 'png' || $ext == 'bmp' || $ext == 'webp') {\n\n                        if (!$height) {\n                            $height = $width;\n                        }\n                        $tn = new Thumbnailer($src);\n                        $thumbOptions = array('height' => $height, 'width' => $width);\n                        if ($crop) {\n                            $thumbOptions['crop'] = $crop;\n                        }\n\n                        $cache_path_dir = dirname($cache_path);\n                        if (!is_dir($cache_path_dir)) {\n                            mkdir_recursive($cache_path_dir);\n                        }\n                        $tn->createThumb($thumbOptions, $cache_path);\n\n//                        if (!isset($return_cache_path) and isset($params['cache_id'])) {\n//                       delete_option($params['cache_id'], 'media_tn_temp');\n//                        }\n\n\n                        if (!defined('MW_NO_OUTPUT_CACHE')) {\n                            define('MW_NO_OUTPUT_CACHE', true);\n                        }\n\n\n                        unset($tn);\n\n                    } else {\n                        return $this->pixum_img();\n                    }\n                }\n            }\n        }\n\n\n        if (isset($return_cache_path) and $return_cache_path) {\n            return $cache_path;\n        }\n\n        if (is_file($cache_path)) {\n            $ext = get_file_extension($cache_path);\n            if ($ext == 'jpg') {\n                $ext = 'jpeg';\n            }\n\n//        if (isset($return_cache_path)) {\n//            delete_option($cache_id, 'media_tn_temp');\n//            return $cache_path;\n//        }\n\n            if ($ext == 'svg') {\n                header('Content-Type: image/svg+xml');\n            } else {\n                header('Content-Type: image/' . $ext);\n            }\n\n            header('Content-Length: ' . filesize($cache_path));\n            readfile($cache_path);\n            exit;\n        } else {\n            return $this->pixum_img();\n        }\n    }\n\n\n    public function create_media_dir($params)\n    {\n\n        $clean = new HTMLClean();\n        $_REQUEST = $clean->cleanArray($_REQUEST);\n\n        must_have_access();\n        $resp = array();\n        // $target_path = media_base_path() . 'uploaded' . DS;\n        $target_path = media_uploads_path();\n        $fn_path = media_base_path();\n        if (isset($_REQUEST['path']) and trim($_REQUEST['path']) != '') {\n            $_REQUEST['path'] = urldecode($_REQUEST['path']);\n\n            $fn_path = $target_path . DS . $_REQUEST['path'] . DS;\n            $fn_path = str_replace('..', '', $fn_path);\n            $fn_path = normalize_path($fn_path, false);\n\n            $target_path = $fn_path;\n        }\n        if (!isset($_REQUEST['name']) || empty($_REQUEST['name'])) {\n            $resp = array('error' => 'You must send new_folder parameter');\n        } else {\n            $fn_new_folder_path = $_REQUEST['name'];\n            $fn_new_folder_path = urldecode($fn_new_folder_path);\n            $fn_new_folder_path = str_replace('..', '', $fn_new_folder_path);\n            $fn_new_folder_path_new = $target_path . DS . $fn_new_folder_path;\n            $fn_path = normalize_path($fn_new_folder_path_new, false);\n            if (!is_dir($fn_path)) {\n                mkdir_recursive($fn_path);\n                $resp = array('success' => 'Folder ' . $fn_path . ' is created');\n            } else {\n                $resp = array('error' => 'Folder ' . $fn_new_folder_path . ' already exists');\n            }\n        }\n\n        return $resp;\n    }\n\n    public function delete_media_file($params)\n    {\n        must_have_access();\n\n        // $target_path = media_base_path() . 'uploaded' . DS;\n        $target_path = media_uploads_path();\n        $target_path = normalize_path($target_path, 0);\n        $path_restirct = userfiles_path();\n\n        $fn_remove_path = $_REQUEST['path'];\n        $resp = array();\n        if ($fn_remove_path != false and is_array($fn_remove_path)) {\n            foreach ($fn_remove_path as $key => $value) {\n                $fn_remove = $this->app->url_manager->to_path($value);\n\n                if (isset($fn_remove) and trim($fn_remove) != '' and trim($fn_remove) != 'false') {\n                    $path = urldecode($fn_remove);\n                    $path = normalize_path($path, 0);\n                    $path = str_replace('..', '', $path);\n                    $path = str_replace($path_restirct, '', $path);\n                    $target_path = userfiles_path() . DS . $path;\n                    $target_path = normalize_path($target_path, false);\n\n                    //  if (stristr($target_path, media_base_path())) {\n                    if (stristr($target_path, media_uploads_path())) {\n                        if (is_dir($target_path)) {\n                            mw('MicroweberPackages\\Utils\\System\\Files')->rmdir($target_path, false);\n                            $resp = array('success' => 'Directory ' . $target_path . ' is deleted');\n                        } elseif (is_file($target_path)) {\n                            unlink($target_path);\n                            $resp = array('success' => 'File ' . basename($target_path) . ' is deleted');\n                        } else {\n                            $resp = array('error' => 'Not valid file or folder ' . $target_path . ' ');\n                        }\n                    } else {\n                        $resp = array('error' => 'Not allowed to delete on ' . $target_path . ' ');\n                    }\n                }\n            }\n        }\n\n        return $resp;\n    }\n\n    public function tn_cache_id($params)\n    {\n\n        $tnhash = crc32(json_encode($params));\n        if (isset($params['src'])) {\n            $src = basename($params['src']);\n            $src = no_ext($src);\n            if ($src) {\n                $src = str_slug($src);\n                $tnhash = $src . '-' . $tnhash;\n            }\n        }\n\n        return $tnhash;\n    }\n\n    public function relative_media_start_path()\n    {\n\n\n        static $path;\n        if ($path == false) {\n            $environment = \\App::environment();\n\n            $path = MW_MEDIA_FOLDER_NAME . '/' . $environment . '';\n        }\n\n        return $path;\n    }\n\n\n    private function _is_webp_supported()\n    {\n        if (function_exists('imagewebp') and $_SERVER and isset($_SERVER['HTTP_ACCEPT']) and is_string($_SERVER['HTTP_ACCEPT']) and strpos($_SERVER['HTTP_ACCEPT'], 'image/webp') !== false) {\n            return true;\n        }\n    }\n\n    private function _thumbnails_path()\n    {\n        $userfiles_dir = userfiles_path();\n        // $userfiles_dir = media_base_path();\n        $userfiles_cache_dir = normalize_path($userfiles_dir . $this->thumbnails_path_in_userfiles);\n\n        // media_base_path() . 'thumbnail' . DS;\n\n        return $userfiles_cache_dir;\n    }\n}\n"], "filenames": ["src/MicroweberPackages/Media/MediaManager.php"], "buggy_code_start_loc": [6], "buggy_code_end_loc": [1202], "fixing_code_start_loc": [7], "fixing_code_end_loc": [1207], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 1.3.", "other": {"cve": {"id": "CVE-2022-0763", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-26T10:15:08.547", "lastModified": "2022-03-08T17:25:17.980", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository microweber/microweber prior to 1.3."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio de GitHub microweber/microweber versiones anteriores a 1.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3", "matchCriteriaId": "CEE7F7A1-F20B-4F8B-A3DE-989A059B7E0E"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/c897d0dc159849763a813184d9b75b966c6360bf", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/6de9c621-740d-4d7a-9d77-d90c6c87f3b6", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/c897d0dc159849763a813184d9b75b966c6360bf"}}