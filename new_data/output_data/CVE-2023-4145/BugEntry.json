{"buggy_code": ["{\n  \"name\": \"pimcore/customer-management-framework-bundle\",\n  \"license\": \"GPL-3.0-or-later\",\n  \"type\": \"pimcore-bundle\",\n  \"config\": {\n    \"sort-packages\": true,\n    \"preferred-install\": {\n      \"pimcore/pimcore\": \"source\",\n      \"*\": \"dist\"\n    },\n    \"allow-plugins\": {\n      \"ocramius/package-versions\": true\n    }\n  },\n  \"require\": {\n    \"php\": \"^8.0\",\n    \"box/spout\": \"^3.0\",\n    \"doctrine/dbal\": \"^2.13.1 || ^3.4.2\",\n    \"doctrine/migrations\": \"^3.0.2\",\n    \"dragonmantank/cron-expression\": \"^3.0.2\",\n    \"drewm/mailchimp-api\": \"^2.2\",\n    \"guzzlehttp/guzzle\": \"^7.2\",\n    \"knplabs/knp-components\": \"^3\",\n    \"pear/archive_tar\": \"^1.4.3\",\n    \"pimcore/number-sequence-generator\": \"^1.0.5\",\n    \"pimcore/object-merger\": \"^3.0\",\n    \"pimcore/pimcore\": \"^10.5\",\n    \"pimcore/search-query-parser\": \"^1.3\",\n    \"symfony/asset\": \"^5.3\",\n    \"symfony/config\": \"^5.3\",\n    \"symfony/console\": \"^5.3\",\n    \"symfony/dependency-injection\": \"^5.3.3\",\n    \"symfony/event-dispatcher\": \"^5.4\",\n    \"symfony/http-foundation\": \"^5.3.7\",\n    \"symfony/http-kernel\": \"^5.4\",\n    \"symfony/options-resolver\": \"^5.2\",\n    \"symfony/routing\": \"^5.3\",\n    \"symfony/security-bundle\": \"^5.4\",\n    \"symfony/security-core\": \"^5.4\",\n    \"symfony/security-guard\": \"^5.3\",\n    \"symfony/security-http\": \"^5.4\",\n    \"symfony/stopwatch\": \"^5.2\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"^9.5\",\n    \"codeception/codeception\": \"^4.1.12\",\n    \"codeception/module-symfony\": \"^1.6\",\n    \"codeception/phpunit-wrapper\": \"^9\",\n    \"codeception/module-asserts\": \"^2\",\n    \"php-http/guzzle7-adapter\": \"^0.1.1\",\n    \"hwi/oauth-bundle\": \"^1.3.0\",\n    \"phpstan/phpstan\": \"^1.9\",\n    \"phpstan/phpstan-symfony\": \"^1.2.14\"\n  },\n  \"suggest\": {\n    \"hwi/oauth-bundle\": \"^1.3.0\",\n    \"php-http/httplug-bundle\": \"^1.20.0\",\n    \"php-http/guzzle7-adapter\": \"^0.1.1\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"CustomerManagementFrameworkBundle\\\\\": \"src/\",\n      \"Pimcore\\\\\": \"core-extension/Pimcore/\"\n    },\n    \"exclude-from-classmap\": [\n      \"frontend/\",\n      \"frontend-samples/\",\n      \"install/\"\n    ]\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"CustomerManagementFrameworkBundle\\\\Tests\\\\\": \"tests\",\n      \"Pimcore\\\\Model\\\\DataObject\\\\\": \"var/classes/DataObject\"\n    },\n    \"files\": [\n      \"kernel/Kernel.php\"\n    ]\n  },\n  \"extra\": {\n    \"pimcore\": {\n      \"bundles\": [\n        \"CustomerManagementFrameworkBundle\\\\PimcoreCustomerManagementFrameworkBundle\"\n      ]\n    }\n  }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace CustomerManagementFrameworkBundle\\View\\Formatter;\n\nuse Carbon\\Carbon;\nuse CustomerManagementFrameworkBundle\\Model\\CustomerSegmentInterface;\nuse Pimcore\\Model\\DataObject\\ClassDefinition;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass DefaultViewFormatter implements ViewFormatterInterface\n{\n    /**\n     * @var TranslatorInterface\n     */\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    protected $locale;\n\n    /**\n     * @param string $messageId\n     * @param mixed $parameters\n     *\n     * @return string\n     */\n    public function translate($messageId, $parameters = [])\n    {\n        if (!is_array($parameters)) {\n            if (!empty($parameters)) {\n                $parameters = [$parameters];\n            } else {\n                $parameters = [];\n            }\n        }\n\n        return $this->translator->trans($messageId, $parameters, 'admin');\n    }\n\n    /**\n     * @param Data $fd\n     *\n     * @return string\n     */\n    public function getLabelByFieldDefinition(Data $fd)\n    {\n        return $this->translate($fd->getTitle());\n    }\n\n    public function getLabelByFieldName(ClassDefinition $class, $fieldName)\n    {\n        if ($fieldName == 'id') {\n            return 'ID';\n        }\n\n        $fd = $class->getFieldDefinition($fieldName);\n\n        return $this->getLabelByFieldDefinition($fd);\n    }\n\n    /**\n     * @param Data $fd\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function formatValueByFieldDefinition(Data $fd, $value)\n    {\n        if ($fd instanceof Data\\Checkbox || $fd instanceof Data\\Consent) {\n            return $this->formatBooleanValue($value);\n        }\n\n        if ($fd instanceof Data\\Datetime) {\n            return $this->formatDatetimeValue($value);\n        }\n\n        if ($fd instanceof Data\\Date) {\n            return $this->formatDatetimeValue($value, true);\n        }\n\n        if (is_array($value)) {\n            $result = [];\n            foreach ($value as $val) {\n                $result[] = $this->formatValueByFieldDefinition($fd, $val);\n            }\n\n            return implode(\"\\n\", $result);\n        }\n\n        return $this->formatValue($value);\n    }\n\n    /**\n     * @param mixed $value\n     *\n     * @return mixed\n     */\n    public function formatValue($value)\n    {\n        if ($value instanceof CustomerSegmentInterface) {\n            return $this->formatSegmentValue($value);\n        }\n\n        return $value;\n    }\n\n    /**\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function formatBooleanValue($value)\n    {\n        return $value ? 'true' : 'false';\n    }\n\n    /**\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function formatDatetimeValue($value, $dateOnly = false)\n    {\n        $this->applyLocale();\n\n        if (is_object($value) && method_exists($value, 'getTimestamp')) {\n            $value = date('Y-m-d H:i:s', $value->getTimestamp());\n        }\n\n        $date = Carbon::parse($value);\n\n        if ($dateOnly) {\n            return $date->formatLocalized('%x');\n        }\n\n        return $date->formatLocalized('%x %X');\n    }\n\n    /**\n     * @param string $locale\n     */\n    public function setLocale($locale)\n    {\n        $this->locale = $locale;\n    }\n\n    /**\n     * @return string\n     */\n    public function getLocale()\n    {\n        return $this->locale;\n    }\n\n    /**\n     * @param CustomerSegmentInterface $segment\n     *\n     * @return string\n     */\n    protected function formatSegmentValue(CustomerSegmentInterface $segment)\n    {\n        return sprintf('<span class=\"label label-default\">%s</span>', $segment->getName());\n    }\n\n    protected function getLanguageFromLocale($locale)\n    {\n        return explode('_', $locale)[0];\n    }\n\n    /**\n     * @return string\n     */\n    protected function applyLocale()\n    {\n        $locale = $this->getLocale() ?: \\Pimcore::getContainer()->get('pimcore.locale')->getLocale();\n\n        $dateLocaleMap = [\n            'de' => 'de_AT',\n        ];\n\n        setlocale(LC_TIME, isset($dateLocaleMap[$locale]) ? $dateLocaleMap[$locale] : $locale);\n        Carbon::setLocale($this->getLanguageFromLocale($locale));\n\n        return $locale;\n    }\n}\n"], "fixing_code": ["{\n  \"name\": \"pimcore/customer-management-framework-bundle\",\n  \"license\": \"GPL-3.0-or-later\",\n  \"type\": \"pimcore-bundle\",\n  \"config\": {\n    \"sort-packages\": true,\n    \"preferred-install\": {\n      \"pimcore/pimcore\": \"source\",\n      \"*\": \"dist\"\n    },\n    \"allow-plugins\": {\n      \"ocramius/package-versions\": true\n    }\n  },\n  \"require\": {\n    \"php\": \"^8.0\",\n    \"box/spout\": \"^3.0\",\n    \"doctrine/dbal\": \"^2.13.1 || ^3.4.2\",\n    \"doctrine/migrations\": \"^3.0.2\",\n    \"dragonmantank/cron-expression\": \"^3.0.2\",\n    \"drewm/mailchimp-api\": \"^2.2\",\n    \"guzzlehttp/guzzle\": \"^7.2\",\n    \"knplabs/knp-components\": \"^3\",\n    \"pear/archive_tar\": \"^1.4.3\",\n    \"pimcore/number-sequence-generator\": \"^1.0.5\",\n    \"pimcore/object-merger\": \"^3.0\",\n    \"pimcore/pimcore\": \"^10.5.21\",\n    \"pimcore/search-query-parser\": \"^1.3\",\n    \"symfony/asset\": \"^5.3\",\n    \"symfony/config\": \"^5.3\",\n    \"symfony/console\": \"^5.3\",\n    \"symfony/dependency-injection\": \"^5.3.3\",\n    \"symfony/event-dispatcher\": \"^5.4\",\n    \"symfony/http-foundation\": \"^5.3.7\",\n    \"symfony/http-kernel\": \"^5.4\",\n    \"symfony/options-resolver\": \"^5.2\",\n    \"symfony/routing\": \"^5.3\",\n    \"symfony/security-bundle\": \"^5.4\",\n    \"symfony/security-core\": \"^5.4\",\n    \"symfony/security-guard\": \"^5.3\",\n    \"symfony/security-http\": \"^5.4\",\n    \"symfony/stopwatch\": \"^5.2\"\n  },\n  \"require-dev\": {\n    \"phpunit/phpunit\": \"^9.5\",\n    \"codeception/codeception\": \"^4.1.12\",\n    \"codeception/module-symfony\": \"^1.6\",\n    \"codeception/phpunit-wrapper\": \"^9\",\n    \"codeception/module-asserts\": \"^2\",\n    \"php-http/guzzle7-adapter\": \"^0.1.1\",\n    \"hwi/oauth-bundle\": \"^1.3.0\",\n    \"phpstan/phpstan\": \"^1.9\",\n    \"phpstan/phpstan-symfony\": \"^1.2.14\"\n  },\n  \"suggest\": {\n    \"hwi/oauth-bundle\": \"^1.3.0\",\n    \"php-http/httplug-bundle\": \"^1.20.0\",\n    \"php-http/guzzle7-adapter\": \"^0.1.1\"\n  },\n  \"autoload\": {\n    \"psr-4\": {\n      \"CustomerManagementFrameworkBundle\\\\\": \"src/\",\n      \"Pimcore\\\\\": \"core-extension/Pimcore/\"\n    },\n    \"exclude-from-classmap\": [\n      \"frontend/\",\n      \"frontend-samples/\",\n      \"install/\"\n    ]\n  },\n  \"autoload-dev\": {\n    \"psr-4\": {\n      \"CustomerManagementFrameworkBundle\\\\Tests\\\\\": \"tests\",\n      \"Pimcore\\\\Model\\\\DataObject\\\\\": \"var/classes/DataObject\"\n    },\n    \"files\": [\n      \"kernel/Kernel.php\"\n    ]\n  },\n  \"extra\": {\n    \"pimcore\": {\n      \"bundles\": [\n        \"CustomerManagementFrameworkBundle\\\\PimcoreCustomerManagementFrameworkBundle\"\n      ]\n    }\n  }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace CustomerManagementFrameworkBundle\\View\\Formatter;\n\nuse Carbon\\Carbon;\nuse CustomerManagementFrameworkBundle\\Model\\CustomerSegmentInterface;\nuse Pimcore\\Model\\DataObject\\ClassDefinition;\nuse Pimcore\\Model\\DataObject\\ClassDefinition\\Data;\nuse Pimcore\\Security\\SecurityHelper;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\nclass DefaultViewFormatter implements ViewFormatterInterface\n{\n    /**\n     * @var TranslatorInterface\n     */\n    protected $translator;\n\n    public function __construct(TranslatorInterface $translator)\n    {\n        $this->translator = $translator;\n    }\n\n    protected $locale;\n\n    /**\n     * @param string $messageId\n     * @param mixed $parameters\n     *\n     * @return string\n     */\n    public function translate($messageId, $parameters = [])\n    {\n        if (!is_array($parameters)) {\n            if (!empty($parameters)) {\n                $parameters = [$parameters];\n            } else {\n                $parameters = [];\n            }\n        }\n\n        return $this->translator->trans($messageId, $parameters, 'admin');\n    }\n\n    /**\n     * @param Data $fd\n     *\n     * @return string\n     */\n    public function getLabelByFieldDefinition(Data $fd)\n    {\n        return $this->translate($fd->getTitle());\n    }\n\n    public function getLabelByFieldName(ClassDefinition $class, $fieldName)\n    {\n        if ($fieldName == 'id') {\n            return 'ID';\n        }\n\n        $fd = $class->getFieldDefinition($fieldName);\n\n        return $this->getLabelByFieldDefinition($fd);\n    }\n\n    /**\n     * @param Data $fd\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function formatValueByFieldDefinition(Data $fd, $value)\n    {\n        if ($fd instanceof Data\\Checkbox || $fd instanceof Data\\Consent) {\n            return $this->formatBooleanValue($value);\n        }\n\n        if ($fd instanceof Data\\Datetime) {\n            return $this->formatDatetimeValue($value);\n        }\n\n        if ($fd instanceof Data\\Date) {\n            return $this->formatDatetimeValue($value, true);\n        }\n\n        if (is_array($value)) {\n            $result = [];\n            foreach ($value as $val) {\n                $result[] = $this->formatValueByFieldDefinition($fd, $val);\n            }\n\n            return implode(\"\\n\", $result);\n        }\n\n        return $this->formatValue($value);\n    }\n\n    /**\n     * @param mixed $value\n     *\n     * @return mixed\n     */\n    public function formatValue($value)\n    {\n        if ($value instanceof CustomerSegmentInterface) {\n            return $this->formatSegmentValue($value);\n        }\n\n        return $value;\n    }\n\n    /**\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function formatBooleanValue($value)\n    {\n        return $value ? 'true' : 'false';\n    }\n\n    /**\n     * @param mixed $value\n     *\n     * @return string\n     */\n    public function formatDatetimeValue($value, $dateOnly = false)\n    {\n        $this->applyLocale();\n\n        if (is_object($value) && method_exists($value, 'getTimestamp')) {\n            $value = date('Y-m-d H:i:s', $value->getTimestamp());\n        }\n\n        $date = Carbon::parse($value);\n\n        if ($dateOnly) {\n            return $date->formatLocalized('%x');\n        }\n\n        return $date->formatLocalized('%x %X');\n    }\n\n    /**\n     * @param string $locale\n     */\n    public function setLocale($locale)\n    {\n        $this->locale = $locale;\n    }\n\n    /**\n     * @return string\n     */\n    public function getLocale()\n    {\n        return $this->locale;\n    }\n\n    /**\n     * @param CustomerSegmentInterface $segment\n     *\n     * @return string\n     */\n    protected function formatSegmentValue(CustomerSegmentInterface $segment)\n    {\n        return sprintf('<span class=\"label label-default\">%s</span>', SecurityHelper::convertHtmlSpecialChars($segment->getName()));\n    }\n\n    protected function getLanguageFromLocale($locale)\n    {\n        return explode('_', $locale)[0];\n    }\n\n    /**\n     * @return string\n     */\n    protected function applyLocale()\n    {\n        $locale = $this->getLocale() ?: \\Pimcore::getContainer()->get('pimcore.locale')->getLocale();\n\n        $dateLocaleMap = [\n            'de' => 'de_AT',\n        ];\n\n        setlocale(LC_TIME, isset($dateLocaleMap[$locale]) ? $dateLocaleMap[$locale] : $locale);\n        Carbon::setLocale($this->getLanguageFromLocale($locale));\n\n        return $locale;\n    }\n}\n"], "filenames": ["composer.json", "src/View/Formatter/DefaultViewFormatter.php"], "buggy_code_start_loc": [27, 21], "buggy_code_end_loc": [28, 180], "fixing_code_start_loc": [27, 22], "fixing_code_end_loc": [28, 181], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/customer-data-framework prior to 3.4.2.", "other": {"cve": {"id": "CVE-2023-4145", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-03T17:15:12.237", "lastModified": "2023-08-08T19:33:04.777", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/customer-data-framework prior to 3.4.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:customer_data_framework:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.4.2", "matchCriteriaId": "543793ED-F820-45C3-82BE-0FAF67C5952A"}]}]}], "references": [{"url": "https://github.com/pimcore/customer-data-framework/commit/72f45dd537a706954e7a71c99fbe318640e846a2", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/ce852777-2994-40b4-bb4e-c4d10023eeb0", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/customer-data-framework/commit/72f45dd537a706954e7a71c99fbe318640e846a2"}}