{"buggy_code": ["<?php\n\n/**\n * @file controllers/grid/navigationMenus/NavigationMenuItemsGridHandler.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class NavigationMenuItemsGridHandler\n * @ingroup controllers_grid_navigationMenus\n *\n * @brief Handle NavigationMenuItems grid requests.\n */\n\nimport('lib.pkp.classes.controllers.grid.GridHandler');\nimport('lib.pkp.classes.controllers.grid.DataObjectGridCellProvider');\nimport('controllers.grid.navigationMenus.form.NavigationMenuItemsForm');\n\nclass NavigationMenuItemsGridHandler extends GridHandler {\n\n\t/**\n\t * Constructor\n\t */\n\tfunction __construct() {\n\t\tparent::__construct();\n\t\t$this->addRoleAssignment(\n\t\t\tROLE_ID_MANAGER,\n\t\t\t$ops = array(\n\t\t\t\t'fetchGrid', 'fetchRow',\n\t\t\t\t'addNavigationMenuItem', 'editNavigationMenuItem',\n\t\t\t\t'updateNavigationMenuItem',\n\t\t\t\t'deleteNavigationMenuItem', 'saveSequence',\n\t\t\t)\n\t\t);\n\t\t$this->addRoleAssignment(ROLE_ID_SITE_ADMIN, $ops);\n\t}\n\n\t//\n\t// Overridden template methods\n\t//\n\t/**\n\t * @copydoc GridHandler::authorize()\n\t */\n\tfunction authorize($request, &$args, $roleAssignments) {\n\t\t$context = $request->getContext();\n\t\t$contextId = $context?$context->getId():CONTEXT_ID_NONE;\n\n\t\timport('lib.pkp.classes.security.authorization.PolicySet');\n\t\t$rolePolicy = new PolicySet(COMBINING_PERMIT_OVERRIDES);\n\n\t\timport('lib.pkp.classes.security.authorization.RoleBasedHandlerOperationPolicy');\n\t\tforeach($roleAssignments as $role => $operations) {\n\t\t\t$rolePolicy->addPolicy(new RoleBasedHandlerOperationPolicy($request, $role, $operations));\n\t\t}\n\t\t$this->addPolicy($rolePolicy);\n\n\t\t$navigationMenuItemId = $request->getUserVar('navigationMenuItemId');\n\t\tif ($navigationMenuItemId) {\n\t\t\t$navigationMenuItemDao = DAORegistry::getDAO('NavigationMenuItemDAO'); /* @var $navigationMenuItemDao NavigationMenuItemDAO */\n\t\t\t$navigationMenuItem = $navigationMenuItemDao->getById($navigationMenuItemId);\n\t\t\tif (!$navigationMenuItem ||  $navigationMenuItem->getContextId() != $contextId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn parent::authorize($request, $args, $roleAssignments);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::initialize()\n\t */\n\tfunction initialize($request, $args = null) {\n\t\tparent::initialize($request, $args);\n\n\t\t// Basic grid configuration\n\t\t$this->setTitle('manager.navigationMenuItems');\n\n\t\t// Set the no items row text\n\t\t$this->setEmptyRowText('grid.navigationMenus.navigationMenuItems.noneExist');\n\n\t\t// Columns\n\t\timport('lib.pkp.controllers.grid.navigationMenus.NavigationMenuItemsGridCellProvider');\n\t\t$navigationMenuItemsCellProvider = new NavigationMenuItemsGridCellProvider();\n\t\t$this->addColumn(\n\t\t\tnew GridColumn('title',\n\t\t\t\t'common.title',\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\t$navigationMenuItemsCellProvider\n\t\t\t)\n\t\t);\n\n\t\t// Load language components\n\t\tAppLocale::requireComponents(LOCALE_COMPONENT_PKP_MANAGER);\n\n\t\t// Add grid action.\n\t\t$router = $request->getRouter();\n\n\t\timport('lib.pkp.classes.linkAction.request.AjaxModal');\n\n\t\t$this->addAction(\n\t\t\tnew LinkAction(\n\t\t\t\t'addNavigationMenuItem',\n\t\t\t\tnew AjaxModal(\n\t\t\t\t\t$router->url($request, null, null, 'addNavigationMenuItem', null, null),\n\t\t\t\t\t__('grid.action.addNavigationMenuItem'),\n\t\t\t\t\t'modal_add_item',\n\t\t\t\t\ttrue\n\t\t\t\t),\n\t\t\t\t__('grid.action.addNavigationMenuItem'),\n\t\t\t\t'add_item'\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::loadData()\n\t */\n\tprotected function loadData($request, $filter) {\n\t\t$context = $request->getContext();\n\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\t$navigationMenuItemDao = DAORegistry::getDAO('NavigationMenuItemDAO'); /* @var $navigationMenuItemDao NavigationMenuItemDAO */\n\t\treturn $navigationMenuItemDao->getByContextId($contextId);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::getRowInstance()\n\t */\n\tprotected function getRowInstance() {\n\t\timport('lib.pkp.controllers.grid.navigationMenus.NavigationMenuItemsGridRow');\n\t\treturn new NavigationMenuItemsGridRow();\n\n\t}\n\n\t//\n\t// Public grid actions.\n\t//\n\t/**\n\t * Update NavigationMenuItem\n\t * @param $args array\n\t * @param $request Request\n\t * @return JSONMessage JSON object\n\t */\n\tfunction updateNavigationMenuItem($args, $request) {\n\t\t$navigationMenuItemId = (int)$request->getUserVar('navigationMenuItemId');\n\t\t$navigationMenuId = (int)$request->getUserVar('navigationMenuId');\n\t\t$navigationMenuIdParent = (int)$request->getUserVar('navigationMenuIdParent');\n\t\t$context = $request->getContext();\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\timport('controllers.grid.navigationMenus.form.NavigationMenuItemsForm');\n\t\t$navigationMenuItemForm = new NavigationMenuItemsForm($contextId, $navigationMenuItemId, $navigationMenuIdParent);\n\n\t\t$navigationMenuItemForm->readInputData();\n\n\t\tif ($navigationMenuItemForm->validate()) {\n\t\t\t$navigationMenuItemForm->execute();\n\n\t\t\tif ($navigationMenuItemId) {\n\t\t\t\t// Successful edit of an existing $navigationMenuItem.\n\t\t\t\t$notificationLocaleKey = 'notification.editedNavigationMenuItem';\n\t\t\t} else {\n\t\t\t\t// Successful added a new $navigationMenuItemForm.\n\t\t\t\t$notificationLocaleKey = 'notification.addedNavigationMenuItem';\n\t\t\t}\n\n\t\t\t// Record the notification to user.\n\t\t\t$notificationManager = new NotificationManager();\n\t\t\t$user = $request->getUser();\n\t\t\t$notificationManager->createTrivialNotification($user->getId(), NOTIFICATION_TYPE_SUCCESS, array('contents' => __($notificationLocaleKey)));\n\n\t\t\t// Prepare the grid row data.\n\t\t\treturn DAO::getDataChangedEvent($navigationMenuItemId);\n\t\t} else {\n\t\t\treturn new JSONMessage(false);\n\t\t}\n\t}\n\n\t/**\n\t * Display form to edit a navigation menu item object.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction editNavigationMenuItem($args, $request) {\n\t\t$navigationMenuItemId = (int) $request->getUserVar('navigationMenuItemId');\n\t\t$navigationMenuIdParent = (int) $request->getUserVar('navigationMenuIdParent');\n\t\t$context = $request->getContext();\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\t$navigationMenuItemForm = new NavigationMenuItemsForm($contextId, $navigationMenuItemId, $navigationMenuIdParent);\n\t\t$navigationMenuItemForm->initData();\n\n\t\treturn new JSONMessage(true, $navigationMenuItemForm->fetch($request));\n\t}\n\n\t/**\n\t * Add NavigationMenuItem\n\t * @param $args array\n\t * @param $request Request\n\t * @return JSONMessage JSON object\n\t */\n\tfunction addNavigationMenuItem($args, $request) {\n\t\t$navigationMenuItemId = (int)$request->getUserVar('navigationMenuItemId');\n\t\t$navigationMenuIdParent = (int)$request->getUserVar('navigationMenuIdParent');\n\t\t$context = $request->getContext();\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\timport('controllers.grid.navigationMenus.form.NavigationMenuItemsForm');\n\t\t$navigationMenuItemForm = new NavigationMenuItemsForm($contextId, $navigationMenuItemId, $navigationMenuIdParent);\n\n\t\t$navigationMenuItemForm->initData();\n\n\t\treturn new JSONMessage(true, $navigationMenuItemForm->fetch($request));\n\t}\n\n\t/**\n\t * Delete a navigation Menu item.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction deleteNavigationMenuItem($args, $request) {\n\t\t$navigationMenuItemId = (int) $request->getUserVar('navigationMenuItemId');\n\n\t\t$context = $request->getContext();\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\t$navigationMenuItemDao = DAORegistry::getDAO('NavigationMenuItemDAO'); /* @var $navigationMenuItemDao NavigationMenuItemDAO */\n\t\t$navigationMenuItem = $navigationMenuItemDao->getById($navigationMenuItemId, $contextId);\n\t\tif ($navigationMenuItem) {\n\t\t\t$navigationMenuItemDao->deleteObject($navigationMenuItem);\n\n\t\t\t// Create notification.\n\t\t\t$notificationManager = new NotificationManager();\n\t\t\t$user = $request->getUser();\n\t\t\t$notificationManager->createTrivialNotification($user->getId(), NOTIFICATION_TYPE_SUCCESS, array('contents' => __('notification.removedNavigationMenuItem')));\n\n\t\t\treturn DAO::getDataChangedEvent($navigationMenuItemId);\n\t\t}\n\n\t\treturn new JSONMessage(false);\n\t}\n}\n\n\n"], "fixing_code": ["<?php\n\n/**\n * @file controllers/grid/navigationMenus/NavigationMenuItemsGridHandler.inc.php\n *\n * Copyright (c) 2014-2021 Simon Fraser University\n * Copyright (c) 2003-2021 John Willinsky\n * Distributed under the GNU GPL v3. For full terms see the file docs/COPYING.\n *\n * @class NavigationMenuItemsGridHandler\n * @ingroup controllers_grid_navigationMenus\n *\n * @brief Handle NavigationMenuItems grid requests.\n */\n\nimport('lib.pkp.classes.controllers.grid.GridHandler');\nimport('lib.pkp.classes.controllers.grid.DataObjectGridCellProvider');\nimport('controllers.grid.navigationMenus.form.NavigationMenuItemsForm');\n\nclass NavigationMenuItemsGridHandler extends GridHandler {\n\n\t/**\n\t * Constructor\n\t */\n\tfunction __construct() {\n\t\tparent::__construct();\n\t\t$this->addRoleAssignment(\n\t\t\tROLE_ID_MANAGER,\n\t\t\t$ops = array(\n\t\t\t\t'fetchGrid', 'fetchRow',\n\t\t\t\t'addNavigationMenuItem', 'editNavigationMenuItem',\n\t\t\t\t'updateNavigationMenuItem',\n\t\t\t\t'deleteNavigationMenuItem', 'saveSequence',\n\t\t\t)\n\t\t);\n\t\t$this->addRoleAssignment(ROLE_ID_SITE_ADMIN, $ops);\n\t}\n\n\t//\n\t// Overridden template methods\n\t//\n\t/**\n\t * @copydoc GridHandler::authorize()\n\t */\n\tfunction authorize($request, &$args, $roleAssignments) {\n\t\t$context = $request->getContext();\n\t\t$contextId = $context?$context->getId():CONTEXT_ID_NONE;\n\n\t\timport('lib.pkp.classes.security.authorization.PolicySet');\n\t\t$rolePolicy = new PolicySet(COMBINING_PERMIT_OVERRIDES);\n\n\t\timport('lib.pkp.classes.security.authorization.RoleBasedHandlerOperationPolicy');\n\t\tforeach($roleAssignments as $role => $operations) {\n\t\t\t$rolePolicy->addPolicy(new RoleBasedHandlerOperationPolicy($request, $role, $operations));\n\t\t}\n\t\t$this->addPolicy($rolePolicy);\n\n\t\t$navigationMenuItemId = $request->getUserVar('navigationMenuItemId');\n\t\tif ($navigationMenuItemId) {\n\t\t\t$navigationMenuItemDao = DAORegistry::getDAO('NavigationMenuItemDAO'); /* @var $navigationMenuItemDao NavigationMenuItemDAO */\n\t\t\t$navigationMenuItem = $navigationMenuItemDao->getById($navigationMenuItemId);\n\t\t\tif (!$navigationMenuItem ||  $navigationMenuItem->getContextId() != $contextId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn parent::authorize($request, $args, $roleAssignments);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::initialize()\n\t */\n\tfunction initialize($request, $args = null) {\n\t\tparent::initialize($request, $args);\n\n\t\t// Basic grid configuration\n\t\t$this->setTitle('manager.navigationMenuItems');\n\n\t\t// Set the no items row text\n\t\t$this->setEmptyRowText('grid.navigationMenus.navigationMenuItems.noneExist');\n\n\t\t// Columns\n\t\timport('lib.pkp.controllers.grid.navigationMenus.NavigationMenuItemsGridCellProvider');\n\t\t$navigationMenuItemsCellProvider = new NavigationMenuItemsGridCellProvider();\n\t\t$this->addColumn(\n\t\t\tnew GridColumn('title',\n\t\t\t\t'common.title',\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\t$navigationMenuItemsCellProvider\n\t\t\t)\n\t\t);\n\n\t\t// Load language components\n\t\tAppLocale::requireComponents(LOCALE_COMPONENT_PKP_MANAGER);\n\n\t\t// Add grid action.\n\t\t$router = $request->getRouter();\n\n\t\timport('lib.pkp.classes.linkAction.request.AjaxModal');\n\n\t\t$this->addAction(\n\t\t\tnew LinkAction(\n\t\t\t\t'addNavigationMenuItem',\n\t\t\t\tnew AjaxModal(\n\t\t\t\t\t$router->url($request, null, null, 'addNavigationMenuItem', null, null),\n\t\t\t\t\t__('grid.action.addNavigationMenuItem'),\n\t\t\t\t\t'modal_add_item',\n\t\t\t\t\ttrue\n\t\t\t\t),\n\t\t\t\t__('grid.action.addNavigationMenuItem'),\n\t\t\t\t'add_item'\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::loadData()\n\t */\n\tprotected function loadData($request, $filter) {\n\t\t$context = $request->getContext();\n\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\t$navigationMenuItemDao = DAORegistry::getDAO('NavigationMenuItemDAO'); /* @var $navigationMenuItemDao NavigationMenuItemDAO */\n\t\treturn $navigationMenuItemDao->getByContextId($contextId);\n\t}\n\n\t/**\n\t * @copydoc GridHandler::getRowInstance()\n\t */\n\tprotected function getRowInstance() {\n\t\timport('lib.pkp.controllers.grid.navigationMenus.NavigationMenuItemsGridRow');\n\t\treturn new NavigationMenuItemsGridRow();\n\n\t}\n\n\t//\n\t// Public grid actions.\n\t//\n\t/**\n\t * Update NavigationMenuItem\n\t * @param $args array\n\t * @param $request Request\n\t * @return JSONMessage JSON object\n\t */\n\tfunction updateNavigationMenuItem($args, $request) {\n\t\t$navigationMenuItemId = (int)$request->getUserVar('navigationMenuItemId');\n\t\t$navigationMenuId = (int)$request->getUserVar('navigationMenuId');\n\t\t$navigationMenuIdParent = (int)$request->getUserVar('navigationMenuIdParent');\n\t\t$context = $request->getContext();\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\timport('controllers.grid.navigationMenus.form.NavigationMenuItemsForm');\n\t\t$navigationMenuItemForm = new NavigationMenuItemsForm($contextId, $navigationMenuItemId, $navigationMenuIdParent);\n\n\t\t$navigationMenuItemForm->readInputData();\n\n\t\tif ($navigationMenuItemForm->validate()) {\n\t\t\t$navigationMenuItemForm->execute();\n\n\t\t\tif ($navigationMenuItemId) {\n\t\t\t\t// Successful edit of an existing $navigationMenuItem.\n\t\t\t\t$notificationLocaleKey = 'notification.editedNavigationMenuItem';\n\t\t\t} else {\n\t\t\t\t// Successful added a new $navigationMenuItemForm.\n\t\t\t\t$notificationLocaleKey = 'notification.addedNavigationMenuItem';\n\t\t\t}\n\n\t\t\t// Record the notification to user.\n\t\t\t$notificationManager = new NotificationManager();\n\t\t\t$user = $request->getUser();\n\t\t\t$notificationManager->createTrivialNotification($user->getId(), NOTIFICATION_TYPE_SUCCESS, array('contents' => __($notificationLocaleKey)));\n\n\t\t\t// Prepare the grid row data.\n\t\t\treturn DAO::getDataChangedEvent($navigationMenuItemId);\n\t\t} else {\n\t\t\treturn new JSONMessage(false);\n\t\t}\n\t}\n\n\t/**\n\t * Display form to edit a navigation menu item object.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction editNavigationMenuItem($args, $request) {\n\t\t$navigationMenuItemId = (int) $request->getUserVar('navigationMenuItemId');\n\t\t$navigationMenuIdParent = (int) $request->getUserVar('navigationMenuIdParent');\n\t\t$context = $request->getContext();\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\t$navigationMenuItemForm = new NavigationMenuItemsForm($contextId, $navigationMenuItemId, $navigationMenuIdParent);\n\t\t$navigationMenuItemForm->initData();\n\n\t\treturn new JSONMessage(true, $navigationMenuItemForm->fetch($request));\n\t}\n\n\t/**\n\t * Add NavigationMenuItem\n\t * @param $args array\n\t * @param $request Request\n\t * @return JSONMessage JSON object\n\t */\n\tfunction addNavigationMenuItem($args, $request) {\n\t\t$navigationMenuItemId = (int)$request->getUserVar('navigationMenuItemId');\n\t\t$navigationMenuIdParent = (int)$request->getUserVar('navigationMenuIdParent');\n\t\t$context = $request->getContext();\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\timport('controllers.grid.navigationMenus.form.NavigationMenuItemsForm');\n\t\t$navigationMenuItemForm = new NavigationMenuItemsForm($contextId, $navigationMenuItemId, $navigationMenuIdParent);\n\n\t\t$navigationMenuItemForm->initData();\n\n\t\treturn new JSONMessage(true, $navigationMenuItemForm->fetch($request));\n\t}\n\n\t/**\n\t * Delete a navigation Menu item.\n\t * @param $args array\n\t * @param $request PKPRequest\n\t * @return JSONMessage JSON object\n\t */\n\tfunction deleteNavigationMenuItem($args, $request) {\n\t\tif (!$request->checkCSRF()) return new JSONMessage(false);\n\n\t\t$navigationMenuItemId = (int) $request->getUserVar('navigationMenuItemId');\n\n\t\t$context = $request->getContext();\n\t\t$contextId = CONTEXT_ID_NONE;\n\t\tif ($context) {\n\t\t\t$contextId = $context->getId();\n\t\t}\n\n\t\t$navigationMenuItemDao = DAORegistry::getDAO('NavigationMenuItemDAO'); /* @var $navigationMenuItemDao NavigationMenuItemDAO */\n\t\t$navigationMenuItem = $navigationMenuItemDao->getById($navigationMenuItemId, $contextId);\n\t\tif ($navigationMenuItem) {\n\t\t\t$navigationMenuItemDao->deleteObject($navigationMenuItem);\n\n\t\t\t// Create notification.\n\t\t\t$notificationManager = new NotificationManager();\n\t\t\t$user = $request->getUser();\n\t\t\t$notificationManager->createTrivialNotification($user->getId(), NOTIFICATION_TYPE_SUCCESS, array('contents' => __('notification.removedNavigationMenuItem')));\n\n\t\t\treturn DAO::getDataChangedEvent($navigationMenuItemId);\n\t\t}\n\n\t\treturn new JSONMessage(false);\n\t}\n}\n\n\n"], "filenames": ["controllers/grid/navigationMenus/NavigationMenuItemsGridHandler.inc.php"], "buggy_code_start_loc": [237], "buggy_code_end_loc": [237], "fixing_code_start_loc": [238], "fixing_code_end_loc": [240], "type": "CWE-352", "message": "Cross-Site Request Forgery in GitHub repository pkp/pkp-lib prior to 3.3.0-16.\n\n", "other": {"cve": {"id": "CVE-2023-5900", "sourceIdentifier": "security@huntr.dev", "published": "2023-11-07T04:24:31.623", "lastModified": "2024-01-21T03:04:30.337", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery in GitHub repository pkp/pkp-lib prior to 3.3.0-16.\n\n"}, {"lang": "es", "value": "Falta autorizaci\u00f3n en el repositorio de GitHub pkp/pkp-lib anterior a 3.3.0-16."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sfu:pkp_web_application_library:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.3.0-16", "matchCriteriaId": "60CE0E67-FCF5-4A26-A91E-514946B97D99"}]}]}], "references": [{"url": "https://github.com/pkp/pkp-lib/commit/4d77a00be9050fac7eb8d2d1cbedcdaaa1a5a803", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/c3f011d4-9f76-4b2b-b3d4-a5e2ecd2e354", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pkp/pkp-lib/commit/4d77a00be9050fac7eb8d2d1cbedcdaaa1a5a803"}}