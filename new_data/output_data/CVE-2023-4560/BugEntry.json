{"buggy_code": ["<?php\nnamespace Omeka\\Controller\\Admin;\n\nuse Doctrine\\ORM\\EntityManager;\nuse Omeka\\Entity\\ApiKey;\nuse Omeka\\Form\\ConfirmForm;\nuse Omeka\\Form\\UserBatchUpdateForm;\nuse Omeka\\Form\\UserForm;\nuse Omeka\\Mvc\\Exception;\nuse Omeka\\Stdlib\\Message;\nuse Laminas\\Mvc\\Controller\\AbstractActionController;\nuse Laminas\\View\\Model\\ViewModel;\n\nclass UserController extends AbstractActionController\n{\n    /**\n     * @var EntityManager\n     */\n    protected $entityManager;\n\n    /**\n     * @param EntityManager $entityManager\n     */\n    public function __construct(EntityManager $entityManager)\n    {\n        $this->entityManager = $entityManager;\n    }\n\n    public function searchAction()\n    {\n        $view = new ViewModel;\n        $view->setVariable('query', $this->params()->fromQuery());\n        return $view;\n    }\n\n    public function browseAction()\n    {\n        $this->browse()->setDefaults('users');\n        $response = $this->api()->search('users', $this->params()->fromQuery());\n        $this->paginator($response->getTotalResults());\n\n        $formDeleteSelected = $this->getForm(ConfirmForm::class);\n        $formDeleteSelected->setAttribute('action', $this->url()->fromRoute(null, ['action' => 'batch-delete'], true));\n        $formDeleteSelected->setButtonLabel('Confirm Delete'); // @translate\n        $formDeleteSelected->setAttribute('id', 'confirm-delete-selected');\n\n        $formDeleteAll = $this->getForm(ConfirmForm::class);\n        $formDeleteAll->setAttribute('action', $this->url()->fromRoute(null, ['action' => 'batch-delete-all'], true));\n        $formDeleteAll->setButtonLabel('Confirm Delete'); // @translate\n        $formDeleteAll->setAttribute('id', 'confirm-delete-all');\n        $formDeleteAll->get('submit')->setAttribute('disabled', true);\n\n        $view = new ViewModel;\n        $view->setVariable('users', $response->getContent());\n        $view->setVariable('formDeleteSelected', $formDeleteSelected);\n        $view->setVariable('formDeleteAll', $formDeleteAll);\n        return $view;\n    }\n\n    public function showAction()\n    {\n        $response = $this->api()->read('users', $this->params('id'));\n\n        $view = new ViewModel;\n        $view->setVariable('user', $response->getContent());\n        return $view;\n    }\n\n    public function showDetailsAction()\n    {\n        $response = $this->api()->read('users', $this->params('id'));\n\n        $view = new ViewModel;\n        $view->setTerminal(true);\n        $view->setVariable('resource', $response->getContent());\n        return $view;\n    }\n\n    public function sidebarSelectAction()\n    {\n        $this->setBrowseDefaults('created');\n        $response = $this->api()->search('users', $this->params()->fromQuery());\n        $this->paginator($response->getTotalResults());\n\n        $view = new ViewModel;\n        $view->setVariable('users', $response->getContent());\n        $view->setVariable('searchValue', $this->params()->fromQuery('search'));\n        $view->setTerminal(true);\n        return $view;\n    }\n\n    public function addAction()\n    {\n        $changeRole = $this->userIsAllowed('Omeka\\Entity\\User', 'change-role');\n        $changeRoleAdmin = $this->userIsAllowed('Omeka\\Entity\\User', 'change-role-admin');\n        $activateUser = $this->userIsAllowed('Omeka\\Entity\\User', 'activate-user');\n\n        $form = $this->getForm(UserForm::class, [\n            'include_role' => $changeRole,\n            'include_admin_roles' => $changeRoleAdmin,\n            'include_is_active' => $activateUser,\n        ]);\n        $form->remove('user-settings');\n        $form->getInputFilter()->remove('user-settings');\n\n        if ($this->getRequest()->isPost()) {\n            $form->setData($this->params()->fromPost());\n            if ($form->isValid()) {\n                $formData = $form->getData();\n                $response = $this->api($form)->create('users', $formData['user-information']);\n                if ($response) {\n                    $user = $response->getContent()->getEntity();\n                    $this->mailer()->sendUserActivation($user);\n                    $message = new Message(\n                        'User successfully created. %s', // @translate\n                        sprintf(\n                            '<a href=\"%s\">%s</a>',\n                            htmlspecialchars($this->url()->fromRoute(null, [], true)),\n                            $this->translate('Add another user?')\n                        ));\n                    $message->setEscapeHtml(false);\n                    $this->messenger()->addSuccess($message);\n                    return $this->redirect()->toUrl($response->getContent()->url());\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $view = new ViewModel;\n        $view->setVariable('form', $form);\n        return $view;\n    }\n\n    public function editAction()\n    {\n        $id = $this->params('id');\n\n        $readResponse = $this->api()->read('users', $id);\n        $user = $readResponse->getContent();\n        $userEntity = $user->getEntity();\n        $currentUser = $userEntity === $this->identity();\n        $keys = $userEntity->getKeys();\n\n        $changeRole = $this->userIsAllowed($userEntity, 'change-role');\n        $changeRoleAdmin = $this->userIsAllowed($userEntity, 'change-role-admin');\n        $activateUser = $this->userIsAllowed($userEntity, 'activate-user');\n\n        $form = $this->getForm(UserForm::class, [\n            'user_id' => $id,\n            'include_role' => $changeRole,\n            'include_admin_roles' => $changeRoleAdmin,\n            'include_is_active' => $activateUser,\n            'current_password' => $currentUser,\n            'include_password' => true,\n            'include_key' => true,\n        ]);\n        $form->setAttribute('action', $this->getRequest()->getRequestUri());\n\n        $data = $user->jsonSerialize();\n        $form->get('user-information')->populateValues($data);\n        $form->get('change-password')->populateValues($data);\n\n        // Only expose key IDs and values to the view\n        $viewKeys = [];\n        foreach ($keys as $keyId => $key) {\n            $viewKeys[$keyId] = $key->getLabel();\n        }\n\n        $view = new ViewModel;\n        $view->setVariable('user', $user);\n        $view->setVariable('form', $form);\n        $view->setVariable('keys', $viewKeys);\n\n        $successMessages = [];\n\n        if ($this->getRequest()->isPost()) {\n            $postData = $this->params()->fromPost();\n            $form->setData($postData);\n            if ($form->isValid()) {\n                $values = $form->getData();\n                $passwordValues = $values['change-password'];\n                $response = $this->api($form)->update('users', $id, $values['user-information']);\n\n                // Stop early if the API update fails\n                if (!$response) {\n                    return $view;\n                }\n                $this->messenger()->addSuccess('User successfully updated'); // @translate\n\n                if (!empty($values['user-settings'])) {\n                    foreach ($values['user-settings'] as $settingId => $settingValue) {\n                        $this->userSettings()->set($settingId, $settingValue, $id);\n                    }\n                }\n\n                if (!empty($passwordValues['password-confirm']['password'])) {\n                    if (!$this->userIsAllowed($userEntity, 'change-password')) {\n                        throw new Exception\\PermissionDeniedException(\n                            'User does not have permission to change the password'\n                        );\n                    }\n                    if ($currentUser && !$userEntity->verifyPassword($passwordValues['current-password'])) {\n                        $this->messenger()->addError('The current password entered was invalid'); // @translate\n                        return $view;\n                    }\n                    $userEntity->setPassword($passwordValues['password-confirm']['password']);\n                    $successMessages[] = 'Password successfully changed'; // @translate\n                }\n\n                $keyPersisted = false;\n                if (!empty($values['edit-keys']['new-key-label']) || !empty($postData['delete'])) {\n                    if (!$this->userIsAllowed($userEntity, 'edit-keys')) {\n                        throw new Exception\\PermissionDeniedException(\n                            'User does not have permission to edit API keys'\n                        );\n                    }\n\n                    // Create a new API key.\n                    if (!empty($values['edit-keys']['new-key-label'])) {\n                        $key = new ApiKey;\n                        $key->setId();\n                        $key->setLabel($values['edit-keys']['new-key-label']);\n                        $key->setOwner($userEntity);\n                        $keyId = $key->getId();\n                        $keyCredential = $key->setCredential();\n                        $this->entityManager->persist($key);\n                        $keyPersisted = true;\n                    }\n\n                    // Remove any keys marked for deletion\n                    if (!empty($postData['delete']) && is_array($postData['delete'])) {\n                        foreach ($postData['delete'] as $deleteId) {\n                            $keys->remove($deleteId);\n                        }\n                        $successMessages[] = 'Key(s) successfully deleted'; // @translate\n                    }\n                }\n\n                $this->entityManager->flush();\n\n                if ($keyPersisted) {\n                    $message = new Message(\n                        'API key successfully created.<br><br>Here is your key ID and credential for access to the API. WARNING: \"key_credential\" will be unretrievable after you navigate away from this page.<br><br>key_identity: <code>%1$s</code><br>key_credential: <code>%2$s</code>', // @translate\n                        $keyId, $keyCredential\n                    );\n                    $message->setEscapeHtml(false);\n                    $this->messenger()->addWarning($message);\n                }\n\n                foreach ($successMessages as $message) {\n                    $this->messenger()->addSuccess($message);\n                }\n                return $this->redirect()->refresh();\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n        return $view;\n    }\n\n    public function deleteConfirmAction()\n    {\n        $resource = $this->api()->read('users', $this->params('id'))->getContent();\n\n        $view = new ViewModel;\n        $view->setTerminal(true);\n        $view->setTemplate('common/delete-confirm-details');\n        $view->setVariable('resource', $resource);\n        $view->setVariable('resourceLabel', 'user'); // @translate\n        $view->setVariable('partialPath', 'omeka/admin/user/show-details');\n        return $view;\n    }\n\n    public function deleteAction()\n    {\n        if ($this->getRequest()->isPost()) {\n            $form = $this->getForm(ConfirmForm::class);\n            $form->setData($this->getRequest()->getPost());\n            if ($form->isValid()) {\n                $response = $this->api($form)->delete('users', $this->params('id'));\n                if ($response) {\n                    $this->messenger()->addSuccess('User successfully deleted'); // @translate\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n        return $this->redirect()->toRoute(\n            'admin/default',\n            ['action' => 'browse'],\n            true\n        );\n    }\n\n    public function batchDeleteAction()\n    {\n        if (!$this->getRequest()->isPost()) {\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $resourceIds = $this->params()->fromPost('resource_ids', []);\n        $resourceIds = array_filter(array_unique(array_map('intval', $resourceIds)));\n        if (!$resourceIds) {\n            $this->messenger()->addError('You must select at least one user to batch delete.'); // @translate\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $userId = $this->identity()->getId();\n        $key = array_search($userId, $resourceIds);\n        if ($key !== false) {\n            $this->messenger()->addError('You can\u2019t delete yourself.'); // @translate\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $form = $this->getForm(ConfirmForm::class);\n        $form->setData($this->getRequest()->getPost());\n        if ($form->isValid()) {\n            $response = $this->api($form)->batchDelete('users', $resourceIds, [], ['continueOnError' => true]);\n            if ($response) {\n                $this->messenger()->addSuccess('Users successfully deleted'); // @translate\n            }\n        } else {\n            $this->messenger()->addFormErrors($form);\n        }\n        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n    }\n\n    public function batchDeleteAllAction()\n    {\n        if (!$this->getRequest()->isPost()) {\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        // Derive the query, removing limiting and sorting params.\n        $query = json_decode($this->params()->fromPost('query', []), true);\n        unset($query['submit'], $query['page'], $query['per_page'], $query['limit'],\n            $query['offset'], $query['sort_by'], $query['sort_order']);\n\n        $form = $this->getForm(ConfirmForm::class);\n        $form->setData($this->getRequest()->getPost());\n        if ($form->isValid()) {\n            $job = $this->jobDispatcher()->dispatch('Omeka\\Job\\BatchDelete', [\n                'resource' => 'users',\n                'query' => $query,\n            ]);\n            $this->messenger()->addSuccess('Deleting users. This may take a while.'); // @translate\n        } else {\n            $this->messenger()->addFormErrors($form);\n        }\n        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n    }\n\n    /**\n     * Batch update selected users (except current one).\n     */\n    public function batchEditAction()\n    {\n        if (!$this->getRequest()->isPost()) {\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $resourceIds = $this->params()->fromPost('resource_ids', []);\n        $resourceIds = array_filter(array_unique(array_map('intval', $resourceIds)));\n        if (!$resourceIds) {\n            $this->messenger()->addError('You must select at least one user to batch edit.'); // @translate\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $userId = $this->identity()->getId();\n        $key = array_search($userId, $resourceIds);\n        if ($key !== false) {\n            $this->messenger()->addError('For security reasons, you can\u2019t batch edit yourself.'); // @translate\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $form = $this->getForm(UserBatchUpdateForm::class);\n        $form->setAttribute('id', 'batch-edit-user');\n        if ($this->params()->fromPost('batch_update')) {\n            $data = $this->params()->fromPost();\n            $form->setData($data);\n\n            if ($form->isValid()) {\n                $data = $form->preprocessData();\n\n                foreach ($data as $collectionAction => $properties) {\n                    $this->api($form)->batchUpdate('users', $resourceIds, $properties, [\n                        'continueOnError' => true,\n                        'collectionAction' => $collectionAction,\n                        'detachEntities' => false,\n                    ]);\n                }\n\n                $this->messenger()->addSuccess('Users successfully edited'); // @translate\n                return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $resources = [];\n        foreach ($resourceIds as $resourceId) {\n            $resources[] = $this->api()->read('users', $resourceId)->getContent();\n        }\n\n        $view = new ViewModel;\n        $view->setVariable('form', $form);\n        $view->setVariable('resources', $resources);\n        $view->setVariable('query', []);\n        $view->setVariable('count', null);\n        return $view;\n    }\n\n    /**\n     * Batch update all users (except current one) returned from a query.\n     */\n    public function batchEditAllAction()\n    {\n        if (!$this->getRequest()->isPost()) {\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        // Derive the query, removing limiting and sorting params.\n        $query = json_decode($this->params()->fromPost('query', []), true);\n        unset($query['submit'], $query['page'], $query['per_page'], $query['limit'],\n            $query['offset'], $query['sort_by'], $query['sort_order']);\n        // TODO Count without the current user.\n        $count = $this->api()->search('users', ['limit' => 0] + $query)->getTotalResults();\n\n        $form = $this->getForm(UserBatchUpdateForm::class);\n        $form->setAttribute('id', 'batch-edit-user');\n        if ($this->params()->fromPost('batch_update')) {\n            $data = $this->params()->fromPost();\n            $form->setData($data);\n\n            if ($form->isValid()) {\n                $data = $form->preprocessData();\n\n                $job = $this->jobDispatcher()->dispatch('Omeka\\Job\\BatchUpdate', [\n                    'resource' => 'users',\n                    'query' => $query,\n                    'data' => $data['replace'] ?? [],\n                    'data_remove' => $data['remove'] ?? [],\n                    'data_append' => $data['append'] ?? [],\n                ]);\n\n                $this->messenger()->addSuccess('Editing users. This may take a while.'); // @translate\n                return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $view = new ViewModel;\n        $view->setTemplate('omeka/admin/user/batch-edit.phtml');\n        $view->setVariable('form', $form);\n        $view->setVariable('resources', []);\n        $view->setVariable('query', $query);\n        $view->setVariable('count', $count);\n        return $view;\n    }\n}\n"], "fixing_code": ["<?php\nnamespace Omeka\\Controller\\Admin;\n\nuse Doctrine\\ORM\\EntityManager;\nuse Omeka\\Entity\\ApiKey;\nuse Omeka\\Form\\ConfirmForm;\nuse Omeka\\Form\\UserBatchUpdateForm;\nuse Omeka\\Form\\UserForm;\nuse Omeka\\Mvc\\Exception;\nuse Omeka\\Stdlib\\Message;\nuse Laminas\\Mvc\\Controller\\AbstractActionController;\nuse Laminas\\View\\Model\\ViewModel;\n\nclass UserController extends AbstractActionController\n{\n    /**\n     * @var EntityManager\n     */\n    protected $entityManager;\n\n    /**\n     * @param EntityManager $entityManager\n     */\n    public function __construct(EntityManager $entityManager)\n    {\n        $this->entityManager = $entityManager;\n    }\n\n    public function searchAction()\n    {\n        $view = new ViewModel;\n        $view->setVariable('query', $this->params()->fromQuery());\n        return $view;\n    }\n\n    public function browseAction()\n    {\n        $this->browse()->setDefaults('users');\n        $response = $this->api()->search('users', $this->params()->fromQuery());\n        $this->paginator($response->getTotalResults());\n\n        $formDeleteSelected = $this->getForm(ConfirmForm::class);\n        $formDeleteSelected->setAttribute('action', $this->url()->fromRoute(null, ['action' => 'batch-delete'], true));\n        $formDeleteSelected->setButtonLabel('Confirm Delete'); // @translate\n        $formDeleteSelected->setAttribute('id', 'confirm-delete-selected');\n\n        $formDeleteAll = $this->getForm(ConfirmForm::class);\n        $formDeleteAll->setAttribute('action', $this->url()->fromRoute(null, ['action' => 'batch-delete-all'], true));\n        $formDeleteAll->setButtonLabel('Confirm Delete'); // @translate\n        $formDeleteAll->setAttribute('id', 'confirm-delete-all');\n        $formDeleteAll->get('submit')->setAttribute('disabled', true);\n\n        $view = new ViewModel;\n        $view->setVariable('users', $response->getContent());\n        $view->setVariable('formDeleteSelected', $formDeleteSelected);\n        $view->setVariable('formDeleteAll', $formDeleteAll);\n        return $view;\n    }\n\n    public function showAction()\n    {\n        $response = $this->api()->read('users', $this->params('id'));\n\n        $view = new ViewModel;\n        $view->setVariable('user', $response->getContent());\n        return $view;\n    }\n\n    public function showDetailsAction()\n    {\n        $response = $this->api()->read('users', $this->params('id'));\n\n        $view = new ViewModel;\n        $view->setTerminal(true);\n        $view->setVariable('resource', $response->getContent());\n        return $view;\n    }\n\n    public function sidebarSelectAction()\n    {\n        $this->setBrowseDefaults('created');\n        $response = $this->api()->search('users', $this->params()->fromQuery());\n        $this->paginator($response->getTotalResults());\n\n        $view = new ViewModel;\n        $view->setVariable('users', $response->getContent());\n        $view->setVariable('searchValue', $this->params()->fromQuery('search'));\n        $view->setTerminal(true);\n        return $view;\n    }\n\n    public function addAction()\n    {\n        $changeRole = $this->userIsAllowed('Omeka\\Entity\\User', 'change-role');\n        $changeRoleAdmin = $this->userIsAllowed('Omeka\\Entity\\User', 'change-role-admin');\n        $activateUser = $this->userIsAllowed('Omeka\\Entity\\User', 'activate-user');\n\n        $form = $this->getForm(UserForm::class, [\n            'include_role' => $changeRole,\n            'include_admin_roles' => $changeRoleAdmin,\n            'include_is_active' => $activateUser,\n        ]);\n        $form->remove('user-settings');\n        $form->getInputFilter()->remove('user-settings');\n\n        if ($this->getRequest()->isPost()) {\n            $form->setData($this->params()->fromPost());\n            if ($form->isValid()) {\n                $formData = $form->getData();\n                $response = $this->api($form)->create('users', $formData['user-information']);\n                if ($response) {\n                    $user = $response->getContent()->getEntity();\n                    $this->mailer()->sendUserActivation($user);\n                    $message = new Message(\n                        'User successfully created. %s', // @translate\n                        sprintf(\n                            '<a href=\"%s\">%s</a>',\n                            htmlspecialchars($this->url()->fromRoute(null, [], true)),\n                            $this->translate('Add another user?')\n                        ));\n                    $message->setEscapeHtml(false);\n                    $this->messenger()->addSuccess($message);\n                    return $this->redirect()->toUrl($response->getContent()->url());\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $view = new ViewModel;\n        $view->setVariable('form', $form);\n        return $view;\n    }\n\n    public function editAction()\n    {\n        $id = $this->params('id');\n\n        $readResponse = $this->api()->read('users', $id);\n        $user = $readResponse->getContent();\n        $userEntity = $user->getEntity();\n\n        if (!$this->userIsAllowed($userEntity, 'update')) {\n            throw new Exception\\PermissionDeniedException;\n        }\n\n        $currentUser = $userEntity === $this->identity();\n        $keys = $userEntity->getKeys();\n\n        $changeRole = $this->userIsAllowed($userEntity, 'change-role');\n        $changeRoleAdmin = $this->userIsAllowed($userEntity, 'change-role-admin');\n        $activateUser = $this->userIsAllowed($userEntity, 'activate-user');\n\n        $form = $this->getForm(UserForm::class, [\n            'user_id' => $id,\n            'include_role' => $changeRole,\n            'include_admin_roles' => $changeRoleAdmin,\n            'include_is_active' => $activateUser,\n            'current_password' => $currentUser,\n            'include_password' => true,\n            'include_key' => true,\n        ]);\n        $form->setAttribute('action', $this->getRequest()->getRequestUri());\n\n        $data = $user->jsonSerialize();\n        $form->get('user-information')->populateValues($data);\n        $form->get('change-password')->populateValues($data);\n\n        // Only expose key IDs and values to the view\n        $viewKeys = [];\n        foreach ($keys as $keyId => $key) {\n            $viewKeys[$keyId] = $key->getLabel();\n        }\n\n        $view = new ViewModel;\n        $view->setVariable('user', $user);\n        $view->setVariable('form', $form);\n        $view->setVariable('keys', $viewKeys);\n\n        $successMessages = [];\n\n        if ($this->getRequest()->isPost()) {\n            $postData = $this->params()->fromPost();\n            $form->setData($postData);\n            if ($form->isValid()) {\n                $values = $form->getData();\n                $passwordValues = $values['change-password'];\n                $response = $this->api($form)->update('users', $id, $values['user-information']);\n\n                // Stop early if the API update fails\n                if (!$response) {\n                    return $view;\n                }\n                $this->messenger()->addSuccess('User successfully updated'); // @translate\n\n                if (!empty($values['user-settings'])) {\n                    foreach ($values['user-settings'] as $settingId => $settingValue) {\n                        $this->userSettings()->set($settingId, $settingValue, $id);\n                    }\n                }\n\n                if (!empty($passwordValues['password-confirm']['password'])) {\n                    if (!$this->userIsAllowed($userEntity, 'change-password')) {\n                        throw new Exception\\PermissionDeniedException(\n                            'User does not have permission to change the password'\n                        );\n                    }\n                    if ($currentUser && !$userEntity->verifyPassword($passwordValues['current-password'])) {\n                        $this->messenger()->addError('The current password entered was invalid'); // @translate\n                        return $view;\n                    }\n                    $userEntity->setPassword($passwordValues['password-confirm']['password']);\n                    $successMessages[] = 'Password successfully changed'; // @translate\n                }\n\n                $keyPersisted = false;\n                if (!empty($values['edit-keys']['new-key-label']) || !empty($postData['delete'])) {\n                    if (!$this->userIsAllowed($userEntity, 'edit-keys')) {\n                        throw new Exception\\PermissionDeniedException(\n                            'User does not have permission to edit API keys'\n                        );\n                    }\n\n                    // Create a new API key.\n                    if (!empty($values['edit-keys']['new-key-label'])) {\n                        $key = new ApiKey;\n                        $key->setId();\n                        $key->setLabel($values['edit-keys']['new-key-label']);\n                        $key->setOwner($userEntity);\n                        $keyId = $key->getId();\n                        $keyCredential = $key->setCredential();\n                        $this->entityManager->persist($key);\n                        $keyPersisted = true;\n                    }\n\n                    // Remove any keys marked for deletion\n                    if (!empty($postData['delete']) && is_array($postData['delete'])) {\n                        foreach ($postData['delete'] as $deleteId) {\n                            $keys->remove($deleteId);\n                        }\n                        $successMessages[] = 'Key(s) successfully deleted'; // @translate\n                    }\n                }\n\n                $this->entityManager->flush();\n\n                if ($keyPersisted) {\n                    $message = new Message(\n                        'API key successfully created.<br><br>Here is your key ID and credential for access to the API. WARNING: \"key_credential\" will be unretrievable after you navigate away from this page.<br><br>key_identity: <code>%1$s</code><br>key_credential: <code>%2$s</code>', // @translate\n                        $keyId, $keyCredential\n                    );\n                    $message->setEscapeHtml(false);\n                    $this->messenger()->addWarning($message);\n                }\n\n                foreach ($successMessages as $message) {\n                    $this->messenger()->addSuccess($message);\n                }\n                return $this->redirect()->refresh();\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n        return $view;\n    }\n\n    public function deleteConfirmAction()\n    {\n        $resource = $this->api()->read('users', $this->params('id'))->getContent();\n\n        $view = new ViewModel;\n        $view->setTerminal(true);\n        $view->setTemplate('common/delete-confirm-details');\n        $view->setVariable('resource', $resource);\n        $view->setVariable('resourceLabel', 'user'); // @translate\n        $view->setVariable('partialPath', 'omeka/admin/user/show-details');\n        return $view;\n    }\n\n    public function deleteAction()\n    {\n        if ($this->getRequest()->isPost()) {\n            $form = $this->getForm(ConfirmForm::class);\n            $form->setData($this->getRequest()->getPost());\n            if ($form->isValid()) {\n                $response = $this->api($form)->delete('users', $this->params('id'));\n                if ($response) {\n                    $this->messenger()->addSuccess('User successfully deleted'); // @translate\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n        return $this->redirect()->toRoute(\n            'admin/default',\n            ['action' => 'browse'],\n            true\n        );\n    }\n\n    public function batchDeleteAction()\n    {\n        if (!$this->getRequest()->isPost()) {\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $resourceIds = $this->params()->fromPost('resource_ids', []);\n        $resourceIds = array_filter(array_unique(array_map('intval', $resourceIds)));\n        if (!$resourceIds) {\n            $this->messenger()->addError('You must select at least one user to batch delete.'); // @translate\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $userId = $this->identity()->getId();\n        $key = array_search($userId, $resourceIds);\n        if ($key !== false) {\n            $this->messenger()->addError('You can\u2019t delete yourself.'); // @translate\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $form = $this->getForm(ConfirmForm::class);\n        $form->setData($this->getRequest()->getPost());\n        if ($form->isValid()) {\n            $response = $this->api($form)->batchDelete('users', $resourceIds, [], ['continueOnError' => true]);\n            if ($response) {\n                $this->messenger()->addSuccess('Users successfully deleted'); // @translate\n            }\n        } else {\n            $this->messenger()->addFormErrors($form);\n        }\n        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n    }\n\n    public function batchDeleteAllAction()\n    {\n        if (!$this->getRequest()->isPost()) {\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        // Derive the query, removing limiting and sorting params.\n        $query = json_decode($this->params()->fromPost('query', []), true);\n        unset($query['submit'], $query['page'], $query['per_page'], $query['limit'],\n            $query['offset'], $query['sort_by'], $query['sort_order']);\n\n        $form = $this->getForm(ConfirmForm::class);\n        $form->setData($this->getRequest()->getPost());\n        if ($form->isValid()) {\n            $job = $this->jobDispatcher()->dispatch('Omeka\\Job\\BatchDelete', [\n                'resource' => 'users',\n                'query' => $query,\n            ]);\n            $this->messenger()->addSuccess('Deleting users. This may take a while.'); // @translate\n        } else {\n            $this->messenger()->addFormErrors($form);\n        }\n        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n    }\n\n    /**\n     * Batch update selected users (except current one).\n     */\n    public function batchEditAction()\n    {\n        if (!$this->getRequest()->isPost()) {\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $resourceIds = $this->params()->fromPost('resource_ids', []);\n        $resourceIds = array_filter(array_unique(array_map('intval', $resourceIds)));\n        if (!$resourceIds) {\n            $this->messenger()->addError('You must select at least one user to batch edit.'); // @translate\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $userId = $this->identity()->getId();\n        $key = array_search($userId, $resourceIds);\n        if ($key !== false) {\n            $this->messenger()->addError('For security reasons, you can\u2019t batch edit yourself.'); // @translate\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        $form = $this->getForm(UserBatchUpdateForm::class);\n        $form->setAttribute('id', 'batch-edit-user');\n        if ($this->params()->fromPost('batch_update')) {\n            $data = $this->params()->fromPost();\n            $form->setData($data);\n\n            if ($form->isValid()) {\n                $data = $form->preprocessData();\n\n                foreach ($data as $collectionAction => $properties) {\n                    $this->api($form)->batchUpdate('users', $resourceIds, $properties, [\n                        'continueOnError' => true,\n                        'collectionAction' => $collectionAction,\n                        'detachEntities' => false,\n                    ]);\n                }\n\n                $this->messenger()->addSuccess('Users successfully edited'); // @translate\n                return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $resources = [];\n        foreach ($resourceIds as $resourceId) {\n            $resources[] = $this->api()->read('users', $resourceId)->getContent();\n        }\n\n        $view = new ViewModel;\n        $view->setVariable('form', $form);\n        $view->setVariable('resources', $resources);\n        $view->setVariable('query', []);\n        $view->setVariable('count', null);\n        return $view;\n    }\n\n    /**\n     * Batch update all users (except current one) returned from a query.\n     */\n    public function batchEditAllAction()\n    {\n        if (!$this->getRequest()->isPost()) {\n            return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n        }\n\n        // Derive the query, removing limiting and sorting params.\n        $query = json_decode($this->params()->fromPost('query', []), true);\n        unset($query['submit'], $query['page'], $query['per_page'], $query['limit'],\n            $query['offset'], $query['sort_by'], $query['sort_order']);\n        // TODO Count without the current user.\n        $count = $this->api()->search('users', ['limit' => 0] + $query)->getTotalResults();\n\n        $form = $this->getForm(UserBatchUpdateForm::class);\n        $form->setAttribute('id', 'batch-edit-user');\n        if ($this->params()->fromPost('batch_update')) {\n            $data = $this->params()->fromPost();\n            $form->setData($data);\n\n            if ($form->isValid()) {\n                $data = $form->preprocessData();\n\n                $job = $this->jobDispatcher()->dispatch('Omeka\\Job\\BatchUpdate', [\n                    'resource' => 'users',\n                    'query' => $query,\n                    'data' => $data['replace'] ?? [],\n                    'data_remove' => $data['remove'] ?? [],\n                    'data_append' => $data['append'] ?? [],\n                ]);\n\n                $this->messenger()->addSuccess('Editing users. This may take a while.'); // @translate\n                return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $view = new ViewModel;\n        $view->setTemplate('omeka/admin/user/batch-edit.phtml');\n        $view->setVariable('form', $form);\n        $view->setVariable('resources', []);\n        $view->setVariable('query', $query);\n        $view->setVariable('count', $count);\n        return $view;\n    }\n}\n"], "filenames": ["application/src/Controller/Admin/UserController.php"], "buggy_code_start_loc": [141], "buggy_code_end_loc": [141], "fixing_code_start_loc": [142], "fixing_code_end_loc": [147], "type": "CWE-612", "message": "Improper Authorization of Index Containing Sensitive Information in GitHub repository omeka/omeka-s prior to 4.0.4.", "other": {"cve": {"id": "CVE-2023-4560", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-28T01:15:10.793", "lastModified": "2023-08-29T16:26:23.543", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authorization of Index Containing Sensitive Information in GitHub repository omeka/omeka-s prior to 4.0.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-612"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:omeka:omeka_s:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.4", "matchCriteriaId": "AF685518-97E7-40B8-98E4-CD25C852C7B0"}]}]}], "references": [{"url": "https://github.com/omeka/omeka-s/commit/b3d8871f22e50ff96a7070fd0be18a0df7b6cbe7", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/86f06e28-ed8d-4f96-b4ad-e47f2fe94ba6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/omeka/omeka-s/commit/b3d8871f22e50ff96a7070fd0be18a0df7b6cbe7"}}