{"buggy_code": ["from rest_framework import permissions, status, viewsets\nfrom rest_framework.permissions import AllowAny, IsAdminUser\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nimport ownphotos.settings\nfrom api.api_util import path_to_dict\nfrom api.date_time_extractor import DEFAULT_RULES_JSON, PREDEFINED_RULES_JSON\nfrom api.models import User\nfrom api.permissions import IsRegistrationAllowed, IsUserOrReadOnly\nfrom api.serializers.user import (\n    DeleteUserSerializer,\n    ManageUserSerializer,\n    UserSerializer,\n)\nfrom api.util import logger\n\n\nclass DefaultRulesView(APIView):\n    def get(self, request, format=None):\n        res = DEFAULT_RULES_JSON\n        return Response(res)\n\n\nclass PredefinedRulesView(APIView):\n    def get(self, request, format=None):\n        res = PREDEFINED_RULES_JSON\n        return Response(res)\n\n\nclass RootPathTreeView(APIView):\n    permission_classes = (IsAdminUser,)\n\n    def get(self, request, format=None):\n        try:\n            path = self.request.query_params.get(\"path\")\n            if path:\n                res = [path_to_dict(path)]\n            else:\n                res = [path_to_dict(ownphotos.settings.DATA_ROOT)]\n            return Response(res)\n        except Exception as e:\n            logger.exception(str(e))\n            return Response({\"message\": str(e)})\n\n\nclass FirstTimeSetupPermission(permissions.BasePermission):\n    message = \"Check if the first time setup is done\"\n\n    def has_permission(self, request, view):\n        return not User.objects.filter(is_superuser=True).exists()\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n\n    serializer_class = UserSerializer\n\n    permission_classes = (IsUserOrReadOnly,)\n\n    def get_queryset(self):\n        queryset = (\n            User.objects.exclude(is_active=False)\n            .only(\n                \"id\",\n                \"username\",\n                \"email\",\n                \"scan_directory\",\n                \"transcode_videos\",\n                \"confidence\",\n                \"confidence_person\",\n                \"semantic_search_topk\",\n                \"first_name\",\n                \"last_name\",\n                \"date_joined\",\n                \"avatar\",\n                \"nextcloud_server_address\",\n                \"nextcloud_username\",\n                \"nextcloud_scan_directory\",\n                \"favorite_min_rating\",\n                \"image_scale\",\n                \"save_metadata_to_disk\",\n                \"datetime_rules\",\n                \"default_timezone\",\n                \"is_superuser\",\n            )\n            .order_by(\"id\")\n        )\n        return queryset\n\n    def get_permissions(self):\n        if self.action == \"create\":\n            self.permission_classes = [\n                IsRegistrationAllowed | FirstTimeSetupPermission | IsAdminUser\n            ]\n        elif self.action == \"list\":\n            self.permission_classes = (AllowAny,)\n        elif self.request.method == \"GET\" or self.request.method == \"POST\":\n            self.permission_classes = (AllowAny,)\n        else:\n            self.permission_classes = (IsUserOrReadOnly,)\n        return super(UserViewSet, self).get_permissions()\n\n    def retrieve(self, *args, **kwargs):\n        return super(UserViewSet, self).retrieve(*args, **kwargs)\n\n    def list(self, *args, **kwargs):\n        return super(UserViewSet, self).list(*args, **kwargs)\n\n\nclass DeleteUserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all().order_by(\"id\")\n    serializer_class = DeleteUserSerializer\n    permission_classes = (IsAdminUser,)\n\n    def destroy(self, request, *args, **kwargs):\n        if not request.user.is_superuser:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n        instance = self.get_object()\n\n        if instance.is_superuser:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n        return super().destroy(request, *args, **kwargs)\n\n\nclass ManageUserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all().order_by(\"id\")\n    serializer_class = ManageUserSerializer\n    permission_classes = (IsAdminUser,)\n\n    def retrieve(self, *args, **kwargs):\n        return super(ManageUserViewSet, self).retrieve(*args, **kwargs)\n\n    def list(self, *args, **kwargs):\n        return super(ManageUserViewSet, self).list(*args, **kwargs)\n", "\"\"\"ownphotos URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/1.11/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.conf.urls import url, include\n    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n\"\"\"\n\nfrom constance import config as site_config\nfrom django.conf import settings\nfrom django.conf.urls import url\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.urls import include\nfrom rest_framework import routers\nfrom rest_framework_simplejwt.serializers import (\n    TokenObtainPairSerializer,\n    TokenRefreshSerializer,\n)\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nfrom api.views import (\n    album_auto,\n    albums,\n    dataviz,\n    faces,\n    jobs,\n    photos,\n    search,\n    sharing,\n    timezone,\n    upload,\n    user,\n    views,\n)\nfrom nextcloud import views as nextcloud_views\n\n\nclass TokenObtainPairSerializer(TokenObtainPairSerializer):\n    @classmethod\n    def get_token(cls, user):\n        token = super(TokenObtainPairSerializer, cls).get_token(user)\n\n        token[\"name\"] = user.get_username()\n        token[\"is_admin\"] = user.is_superuser\n        token[\"first_name\"] = user.first_name\n        token[\"last_name\"] = user.last_name\n        token[\"scan_directory\"] = user.scan_directory\n        token[\"confidence\"] = user.confidence\n        token[\"semantic_search_topk\"] = user.semantic_search_topk\n        token[\"nextcloud_server_address\"] = user.nextcloud_server_address\n        token[\"nextcloud_username\"] = user.nextcloud_username\n        # ...\n\n        return token\n\n\nclass TokenObtainPairView(TokenObtainPairView):\n    serializer_class = TokenObtainPairSerializer\n\n    def post(self, request, *args, **kwargs):\n        response = super(TokenObtainPairView, self).post(request, *args, **kwargs)\n        response.set_cookie(\"jwt\", response.data[\"access\"])\n        response.set_cookie(\"test\", \"obtain\")\n        response[\"Access-Control-Allow-Credentials\"] = True\n        return response\n\n\nclass TokenRefreshView(TokenRefreshView):\n    serializer_class = TokenRefreshSerializer\n\n    def post(self, request, *args, **kwargs):\n        response = super(TokenRefreshView, self).post(request, *args, **kwargs)\n        response.set_cookie(\"jwt\", response.data[\"access\"])\n        response.set_cookie(\"test\", \"refresh\")\n        response[\"Access-Control-Allow-Credentials\"] = True\n        return response\n\n\nrouter = routers.DefaultRouter()\n\nrouter.register(r\"api/user\", user.UserViewSet, basename=\"user\")\nrouter.register(r\"api/manage/user\", user.ManageUserViewSet)\nrouter.register(r\"api/delete/user\", user.DeleteUserViewSet)\n\nrouter.register(\n    r\"api/albums/auto/list\", album_auto.AlbumAutoListViewSet, basename=\"album_auto\"\n)\nrouter.register(\n    r\"api/albums/date/list\", albums.AlbumDateListViewSet, basename=\"album_date\"\n)\nrouter.register(\n    r\"api/albums/person/list\", albums.AlbumPersonListViewSet, basename=\"person\"\n)\nrouter.register(\n    r\"api/albums/thing/list\", albums.AlbumThingListViewSet, basename=\"album_thing\"\n)\nrouter.register(\n    r\"api/albums/place/list\", albums.AlbumPlaceListViewSet, basename=\"album_place\"\n)\nrouter.register(\n    r\"api/albums/user/list\", albums.AlbumUserListViewSet, basename=\"album_user\"\n)\n\nrouter.register(\n    r\"api/albums/user/edit\", views.AlbumUserEditViewSet, basename=\"album_user\"\n)\n\nrouter.register(\n    r\"api/albums/user/shared/tome\",\n    sharing.SharedToMeAlbumUserListViewSet,\n    basename=\"album_user\",\n)\nrouter.register(\n    r\"api/albums/user/shared/fromme\",\n    sharing.SharedFromMeAlbumUserListViewSet,\n    basename=\"album_user\",\n)\n\nrouter.register(r\"api/albums/auto\", album_auto.AlbumAutoViewSet, basename=\"album_auto\")\nrouter.register(r\"api/albums/person\", albums.AlbumPersonViewSet, basename=\"person\")\nrouter.register(r\"api/albums/date\", albums.AlbumDateViewSet, basename=\"album_date\")\nrouter.register(r\"api/albums/thing\", albums.AlbumThingViewSet, basename=\"album_thing\")\nrouter.register(r\"api/albums/place\", albums.AlbumPlaceViewSet, basename=\"album_place\")\nrouter.register(r\"api/albums/user\", albums.AlbumUserViewSet, basename=\"album_user\")\n\nrouter.register(r\"api/persons\", albums.PersonViewSet, basename=\"person\")\n\nrouter.register(\n    r\"api/photos/shared/tome\",\n    sharing.SharedToMePhotoSuperSimpleListViewSet,\n    basename=\"photo\",\n)\nrouter.register(\n    r\"api/photos/shared/fromme\",\n    sharing.SharedFromMePhotoSuperSimpleListViewSet,\n    basename=\"photo\",\n)\n\nrouter.register(\n    r\"api/photos/notimestamp\",\n    photos.NoTimestampPhotoViewSet,\n    basename=\"photo\",\n)\n\nrouter.register(\n    r\"api/photos/notimestamp/list\",\n    photos.NoTimestampPhotoHashListViewSet,\n    basename=\"photo\",\n)\n\nrouter.register(r\"api/photos/edit\", photos.PhotoEditViewSet, basename=\"photo\")\n\nrouter.register(\n    r\"api/photos/recentlyadded\", photos.RecentlyAddedPhotoListViewSet, basename=\"photo\"\n)\nrouter.register(\n    r\"api/photos/favorites\", photos.FavoritePhotoListViewset, basename=\"photo\"\n)\nrouter.register(r\"api/photos/hidden\", photos.HiddenPhotoListViewset, basename=\"photo\")\nrouter.register(r\"api/photos/searchlist\", search.SearchListViewSet, basename=\"photo\")\n\nrouter.register(r\"api/photos/public\", photos.PublicPhotoListViewset, basename=\"photo\")\n\nrouter.register(r\"api/photos\", photos.PhotoViewSet, basename=\"photo\")\n\nrouter.register(\n    r\"api/faces/incomplete\", faces.FaceIncompleteListViewSet, basename=\"face\"\n)\n\nrouter.register(r\"api/faces\", faces.FaceListView, basename=\"face\")\n\nrouter.register(\n    r\"api/faces/inferred/list\", faces.FaceInferredListViewSet, basename=\"face\"\n)\n\nrouter.register(\n    r\"api/faces/labeled/list\", faces.FaceLabeledListViewSet, basename=\"face\"\n)\n\nrouter.register(r\"api/exists\", upload.UploadPhotoExists, basename=\"exists\")\n\nrouter.register(r\"api/jobs\", jobs.LongRunningJobViewSet)\nurlpatterns = [\n    url(r\"^\", include(router.urls)),\n    url(r\"^admin/\", admin.site.urls),\n    url(r\"^api/sitesettings\", views.SiteSettingsView.as_view()),\n    url(r\"^api/dirtree\", user.RootPathTreeView.as_view()),\n    url(r\"^api/labelfaces\", faces.SetFacePersonLabel.as_view()),\n    url(r\"^api/deletefaces\", faces.DeleteFaces.as_view()),\n    url(r\"^api/photosedit/delete\", photos.DeletePhotos.as_view()),\n    url(r\"^api/photosedit/duplicate/delete\", photos.DeleteDuplicatePhotos.as_view()),\n    url(r\"^api/photosedit/setdeleted\", photos.SetPhotosDeleted.as_view()),\n    url(r\"^api/photosedit/favorite\", photos.SetPhotosFavorite.as_view()),\n    url(r\"^api/photosedit/hide\", photos.SetPhotosHidden.as_view()),\n    url(r\"^api/photosedit/makepublic\", photos.SetPhotosPublic.as_view()),\n    url(r\"^api/photosedit/share\", photos.SetPhotosShared.as_view()),\n    url(r\"^api/photosedit/generateim2txt\", photos.GeneratePhotoCaption.as_view()),\n    url(r\"^api/useralbum/share\", views.SetUserAlbumShared.as_view()),\n    url(r\"^api/trainfaces\", faces.TrainFaceView.as_view()),\n    url(r\"^api/clusterfaces\", dataviz.ClusterFaceView.as_view()),\n    url(r\"^api/socialgraph\", dataviz.SocialGraphView.as_view()),\n    url(r\"^api/scanphotos\", views.ScanPhotosView.as_view()),\n    url(r\"^api/scanuploadedphotos\", views.FullScanPhotosView.as_view()),\n    url(r\"^api/fullscanphotos\", views.FullScanPhotosView.as_view()),\n    url(r\"^api/scanfaces\", faces.ScanFacesView.as_view()),\n    url(r\"^api/deletemissingphotos\", views.DeleteMissingPhotosView.as_view()),\n    url(r\"^api/autoalbumgen\", album_auto.AutoAlbumGenerateView.as_view()),\n    url(r\"^api/autoalbumtitlegen\", album_auto.RegenerateAutoAlbumTitles.as_view()),\n    url(r\"^api/searchtermexamples\", views.SearchTermExamples.as_view()),\n    url(r\"^api/locationsunburst\", dataviz.LocationSunburst.as_view()),\n    url(r\"^api/locationtimeline\", dataviz.LocationTimeline.as_view()),\n    url(r\"^api/defaultrules\", user.DefaultRulesView.as_view()),\n    url(r\"^api/predefinedrules\", user.PredefinedRulesView.as_view()),\n    url(r\"^api/stats\", dataviz.StatsView.as_view()),\n    url(r\"^api/locclust\", dataviz.LocationClustersView.as_view()),\n    url(r\"^api/photomonthcounts\", dataviz.PhotoMonthCountsView.as_view()),\n    url(r\"^api/wordcloud\", dataviz.SearchTermWordCloudView.as_view()),\n    url(r\"^api/auth/token/obtain/$\", TokenObtainPairView.as_view()),\n    url(r\"^api/auth/token/refresh/$\", TokenRefreshView.as_view()),\n    url(\n        r\"^media/(?P<path>.*)/(?P<fname>.*)\",\n        views.MediaAccessFullsizeOriginalView.as_view(),\n        name=\"media\",\n    ),\n    url(r\"^api/rqavailable/$\", jobs.QueueAvailabilityView.as_view()),\n    url(r\"^api/rqjobstat/$\", jobs.RQJobStatView.as_view()),\n    url(r\"^api/rqjoblist/$\", jobs.ListAllRQJobsView.as_view()),\n    url(r\"^api/nextcloud/listdir\", nextcloud_views.ListDir.as_view()),\n    url(r\"^api/nextcloud/scanphotos\", nextcloud_views.ScanPhotosView.as_view()),\n    url(r\"^api/photos/download\", views.ZipListPhotosView.as_view()),\n    url(r\"^api/timezones\", timezone.TimeZoneView.as_view()),\n]\nurlpatterns += [url(\"api/django-rq/\", include(\"django_rq.urls\"))]\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n\nif site_config.ALLOW_UPLOAD:\n    urlpatterns += [\n        url(r\"api/upload/complete/\", upload.UploadPhotosChunkedComplete.as_view())\n    ]\n    urlpatterns += [url(r\"api/upload/\", upload.UploadPhotosChunked.as_view())]\n\n\nif settings.DEBUG:\n    from drf_spectacular.views import (\n        SpectacularAPIView,\n        SpectacularRedocView,\n        SpectacularSwaggerView,\n    )\n\n    urlpatterns += [url(r\"^api/silk/\", include(\"silk.urls\", namespace=\"silk\"))]\n    urlpatterns += [\n        url(r\"^api/schema\", SpectacularAPIView.as_view(), name=\"schema\"),\n        url(r\"^api/swagger\", SpectacularSwaggerView.as_view(), name=\"swagger-ui\"),\n        url(r\"^api/redoc\", SpectacularRedocView.as_view(), name=\"redoc\"),\n    ]\n"], "fixing_code": ["from rest_framework import permissions, status, viewsets\nfrom rest_framework.permissions import AllowAny, IsAdminUser, IsAuthenticated\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\n\nimport ownphotos.settings\nfrom api.api_util import path_to_dict\nfrom api.date_time_extractor import DEFAULT_RULES_JSON, PREDEFINED_RULES_JSON\nfrom api.models import User\nfrom api.permissions import IsRegistrationAllowed, IsUserOrReadOnly\nfrom api.serializers.user import (\n    DeleteUserSerializer,\n    ManageUserSerializer,\n    UserSerializer,\n)\nfrom api.util import logger\n\n\nclass DefaultRulesView(APIView):\n    def get(self, request, format=None):\n        res = DEFAULT_RULES_JSON\n        return Response(res)\n\n\nclass PredefinedRulesView(APIView):\n    def get(self, request, format=None):\n        res = PREDEFINED_RULES_JSON\n        return Response(res)\n\n\nclass RootPathTreeView(APIView):\n    permission_classes = (IsAdminUser,)\n\n    def get(self, request, format=None):\n        try:\n            path = self.request.query_params.get(\"path\")\n            if path:\n                res = [path_to_dict(path)]\n            else:\n                res = [path_to_dict(ownphotos.settings.DATA_ROOT)]\n            return Response(res)\n        except Exception as e:\n            logger.exception(str(e))\n            return Response({\"message\": str(e)})\n\nclass IsFirstTimeSetupView(APIView):\n    permission_classes = (AllowAny,)\n\n    def get(self, request, format=None):\n        try:\n            return Response({\"isFirstTimeSetup\": not User.objects.filter(is_superuser=True).exists()})\n        except Exception as e:\n            logger.exception(str(e))\n            return Response({\"message\": str(e)})\n\nclass FirstTimeSetupPermission(permissions.BasePermission):\n    message = \"Check if the first time setup is done\"\n\n    def has_permission(self, request, view):\n        return not User.objects.filter(is_superuser=True).exists()\n\n\nclass UserViewSet(viewsets.ModelViewSet):\n\n    serializer_class = UserSerializer\n\n    permission_classes = (IsAdminUser,)\n\n    def get_queryset(self):\n        queryset = (\n            User.objects.exclude(is_active=False)\n            .only(\n                \"id\",\n                \"username\",\n                \"email\",\n                \"scan_directory\",\n                \"transcode_videos\",\n                \"confidence\",\n                \"confidence_person\",\n                \"semantic_search_topk\",\n                \"first_name\",\n                \"last_name\",\n                \"date_joined\",\n                \"avatar\",\n                \"nextcloud_server_address\",\n                \"nextcloud_username\",\n                \"nextcloud_scan_directory\",\n                \"favorite_min_rating\",\n                \"image_scale\",\n                \"save_metadata_to_disk\",\n                \"datetime_rules\",\n                \"default_timezone\",\n                \"is_superuser\",\n            )\n            .order_by(\"id\")\n        )\n        return queryset\n\n    def get_permissions(self):\n        if self.action == \"create\":\n            self.permission_classes = [\n                IsRegistrationAllowed | FirstTimeSetupPermission | IsAdminUser\n            ]\n        if self.request.method == \"POST\":\n            self.permission_classes = (AllowAny,)\n        return super(UserViewSet, self).get_permissions()\n\n    def create(self, request, *args, **kwargs):\n        if User.objects.filter(is_superuser=True).exists() and not request.user.is_superuser:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n        return super(UserViewSet, self).create(request, *args, **kwargs)\n\n    def retrieve(self, *args, **kwargs):\n        return super(UserViewSet, self).retrieve(*args, **kwargs)\n\n    def list(self, *args, **kwargs):\n        return super(UserViewSet, self).list(*args, **kwargs)\n\n\nclass DeleteUserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all().order_by(\"id\")\n    serializer_class = DeleteUserSerializer\n    permission_classes = (IsAdminUser,)\n\n    def destroy(self, request, *args, **kwargs):\n        if not request.user.is_superuser:\n            return Response(status=status.HTTP_401_UNAUTHORIZED)\n        instance = self.get_object()\n\n        if instance.is_superuser:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n\n        return super().destroy(request, *args, **kwargs)\n\n\nclass ManageUserViewSet(viewsets.ModelViewSet):\n    queryset = User.objects.all().order_by(\"id\")\n    serializer_class = ManageUserSerializer\n    permission_classes = (IsAdminUser,)\n\n    def retrieve(self, *args, **kwargs):\n        return super(ManageUserViewSet, self).retrieve(*args, **kwargs)\n\n    def list(self, *args, **kwargs):\n        return super(ManageUserViewSet, self).list(*args, **kwargs)\n", "\"\"\"ownphotos URL Configuration\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/1.11/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  url(r'^$', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  url(r'^$', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.conf.urls import url, include\n    2. Add a URL to urlpatterns:  url(r'^blog/', include('blog.urls'))\n\"\"\"\n\nfrom constance import config as site_config\nfrom django.conf import settings\nfrom django.conf.urls import url\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\nfrom django.urls import include\nfrom rest_framework import routers\nfrom rest_framework_simplejwt.serializers import (\n    TokenObtainPairSerializer,\n    TokenRefreshSerializer,\n)\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nfrom api.views import (\n    album_auto,\n    albums,\n    dataviz,\n    faces,\n    jobs,\n    photos,\n    search,\n    sharing,\n    timezone,\n    upload,\n    user,\n    views,\n)\nfrom nextcloud import views as nextcloud_views\n\n\nclass TokenObtainPairSerializer(TokenObtainPairSerializer):\n    @classmethod\n    def get_token(cls, user):\n        token = super(TokenObtainPairSerializer, cls).get_token(user)\n\n        token[\"name\"] = user.get_username()\n        token[\"is_admin\"] = user.is_superuser\n        token[\"first_name\"] = user.first_name\n        token[\"last_name\"] = user.last_name\n        token[\"scan_directory\"] = user.scan_directory\n        token[\"confidence\"] = user.confidence\n        token[\"semantic_search_topk\"] = user.semantic_search_topk\n        token[\"nextcloud_server_address\"] = user.nextcloud_server_address\n        token[\"nextcloud_username\"] = user.nextcloud_username\n        # ...\n\n        return token\n\n\nclass TokenObtainPairView(TokenObtainPairView):\n    serializer_class = TokenObtainPairSerializer\n\n    def post(self, request, *args, **kwargs):\n        response = super(TokenObtainPairView, self).post(request, *args, **kwargs)\n        response.set_cookie(\"jwt\", response.data[\"access\"])\n        response.set_cookie(\"test\", \"obtain\")\n        response[\"Access-Control-Allow-Credentials\"] = True\n        return response\n\n\nclass TokenRefreshView(TokenRefreshView):\n    serializer_class = TokenRefreshSerializer\n\n    def post(self, request, *args, **kwargs):\n        response = super(TokenRefreshView, self).post(request, *args, **kwargs)\n        response.set_cookie(\"jwt\", response.data[\"access\"])\n        response.set_cookie(\"test\", \"refresh\")\n        response[\"Access-Control-Allow-Credentials\"] = True\n        return response\n\n\nrouter = routers.DefaultRouter()\n\nrouter.register(r\"api/user\", user.UserViewSet, basename=\"user\")\nrouter.register(r\"api/manage/user\", user.ManageUserViewSet)\nrouter.register(r\"api/delete/user\", user.DeleteUserViewSet)\n\nrouter.register(\n    r\"api/albums/auto/list\", album_auto.AlbumAutoListViewSet, basename=\"album_auto\"\n)\nrouter.register(\n    r\"api/albums/date/list\", albums.AlbumDateListViewSet, basename=\"album_date\"\n)\nrouter.register(\n    r\"api/albums/person/list\", albums.AlbumPersonListViewSet, basename=\"person\"\n)\nrouter.register(\n    r\"api/albums/thing/list\", albums.AlbumThingListViewSet, basename=\"album_thing\"\n)\nrouter.register(\n    r\"api/albums/place/list\", albums.AlbumPlaceListViewSet, basename=\"album_place\"\n)\nrouter.register(\n    r\"api/albums/user/list\", albums.AlbumUserListViewSet, basename=\"album_user\"\n)\n\nrouter.register(\n    r\"api/albums/user/edit\", views.AlbumUserEditViewSet, basename=\"album_user\"\n)\n\nrouter.register(\n    r\"api/albums/user/shared/tome\",\n    sharing.SharedToMeAlbumUserListViewSet,\n    basename=\"album_user\",\n)\nrouter.register(\n    r\"api/albums/user/shared/fromme\",\n    sharing.SharedFromMeAlbumUserListViewSet,\n    basename=\"album_user\",\n)\n\nrouter.register(r\"api/albums/auto\", album_auto.AlbumAutoViewSet, basename=\"album_auto\")\nrouter.register(r\"api/albums/person\", albums.AlbumPersonViewSet, basename=\"person\")\nrouter.register(r\"api/albums/date\", albums.AlbumDateViewSet, basename=\"album_date\")\nrouter.register(r\"api/albums/thing\", albums.AlbumThingViewSet, basename=\"album_thing\")\nrouter.register(r\"api/albums/place\", albums.AlbumPlaceViewSet, basename=\"album_place\")\nrouter.register(r\"api/albums/user\", albums.AlbumUserViewSet, basename=\"album_user\")\n\nrouter.register(r\"api/persons\", albums.PersonViewSet, basename=\"person\")\n\nrouter.register(\n    r\"api/photos/shared/tome\",\n    sharing.SharedToMePhotoSuperSimpleListViewSet,\n    basename=\"photo\",\n)\nrouter.register(\n    r\"api/photos/shared/fromme\",\n    sharing.SharedFromMePhotoSuperSimpleListViewSet,\n    basename=\"photo\",\n)\n\nrouter.register(\n    r\"api/photos/notimestamp\",\n    photos.NoTimestampPhotoViewSet,\n    basename=\"photo\",\n)\n\nrouter.register(\n    r\"api/photos/notimestamp/list\",\n    photos.NoTimestampPhotoHashListViewSet,\n    basename=\"photo\",\n)\n\nrouter.register(r\"api/photos/edit\", photos.PhotoEditViewSet, basename=\"photo\")\n\nrouter.register(\n    r\"api/photos/recentlyadded\", photos.RecentlyAddedPhotoListViewSet, basename=\"photo\"\n)\nrouter.register(\n    r\"api/photos/favorites\", photos.FavoritePhotoListViewset, basename=\"photo\"\n)\nrouter.register(r\"api/photos/hidden\", photos.HiddenPhotoListViewset, basename=\"photo\")\nrouter.register(r\"api/photos/searchlist\", search.SearchListViewSet, basename=\"photo\")\n\nrouter.register(r\"api/photos/public\", photos.PublicPhotoListViewset, basename=\"photo\")\n\nrouter.register(r\"api/photos\", photos.PhotoViewSet, basename=\"photo\")\n\nrouter.register(\n    r\"api/faces/incomplete\", faces.FaceIncompleteListViewSet, basename=\"face\"\n)\n\nrouter.register(r\"api/faces\", faces.FaceListView, basename=\"face\")\n\nrouter.register(\n    r\"api/faces/inferred/list\", faces.FaceInferredListViewSet, basename=\"face\"\n)\n\nrouter.register(\n    r\"api/faces/labeled/list\", faces.FaceLabeledListViewSet, basename=\"face\"\n)\n\nrouter.register(r\"api/exists\", upload.UploadPhotoExists, basename=\"exists\")\n\nrouter.register(r\"api/jobs\", jobs.LongRunningJobViewSet)\nurlpatterns = [\n    url(r\"^\", include(router.urls)),\n    url(r\"^admin/\", admin.site.urls),\n    url(r\"^api/sitesettings\", views.SiteSettingsView.as_view()),\n    url(r\"^api/firsttimesetup\", user.IsFirstTimeSetupView.as_view()),\n    url(r\"^api/dirtree\", user.RootPathTreeView.as_view()),\n    url(r\"^api/labelfaces\", faces.SetFacePersonLabel.as_view()),\n    url(r\"^api/deletefaces\", faces.DeleteFaces.as_view()),\n    url(r\"^api/photosedit/delete\", photos.DeletePhotos.as_view()),\n    url(r\"^api/photosedit/duplicate/delete\", photos.DeleteDuplicatePhotos.as_view()),\n    url(r\"^api/photosedit/setdeleted\", photos.SetPhotosDeleted.as_view()),\n    url(r\"^api/photosedit/favorite\", photos.SetPhotosFavorite.as_view()),\n    url(r\"^api/photosedit/hide\", photos.SetPhotosHidden.as_view()),\n    url(r\"^api/photosedit/makepublic\", photos.SetPhotosPublic.as_view()),\n    url(r\"^api/photosedit/share\", photos.SetPhotosShared.as_view()),\n    url(r\"^api/photosedit/generateim2txt\", photos.GeneratePhotoCaption.as_view()),\n    url(r\"^api/useralbum/share\", views.SetUserAlbumShared.as_view()),\n    url(r\"^api/trainfaces\", faces.TrainFaceView.as_view()),\n    url(r\"^api/clusterfaces\", dataviz.ClusterFaceView.as_view()),\n    url(r\"^api/socialgraph\", dataviz.SocialGraphView.as_view()),\n    url(r\"^api/scanphotos\", views.ScanPhotosView.as_view()),\n    url(r\"^api/scanuploadedphotos\", views.FullScanPhotosView.as_view()),\n    url(r\"^api/fullscanphotos\", views.FullScanPhotosView.as_view()),\n    url(r\"^api/scanfaces\", faces.ScanFacesView.as_view()),\n    url(r\"^api/deletemissingphotos\", views.DeleteMissingPhotosView.as_view()),\n    url(r\"^api/autoalbumgen\", album_auto.AutoAlbumGenerateView.as_view()),\n    url(r\"^api/autoalbumtitlegen\", album_auto.RegenerateAutoAlbumTitles.as_view()),\n    url(r\"^api/searchtermexamples\", views.SearchTermExamples.as_view()),\n    url(r\"^api/locationsunburst\", dataviz.LocationSunburst.as_view()),\n    url(r\"^api/locationtimeline\", dataviz.LocationTimeline.as_view()),\n    url(r\"^api/defaultrules\", user.DefaultRulesView.as_view()),\n    url(r\"^api/predefinedrules\", user.PredefinedRulesView.as_view()),\n    url(r\"^api/stats\", dataviz.StatsView.as_view()),\n    url(r\"^api/locclust\", dataviz.LocationClustersView.as_view()),\n    url(r\"^api/photomonthcounts\", dataviz.PhotoMonthCountsView.as_view()),\n    url(r\"^api/wordcloud\", dataviz.SearchTermWordCloudView.as_view()),\n    url(r\"^api/auth/token/obtain/$\", TokenObtainPairView.as_view()),\n    url(r\"^api/auth/token/refresh/$\", TokenRefreshView.as_view()),\n    url(\n        r\"^media/(?P<path>.*)/(?P<fname>.*)\",\n        views.MediaAccessFullsizeOriginalView.as_view(),\n        name=\"media\",\n    ),\n    url(r\"^api/rqavailable/$\", jobs.QueueAvailabilityView.as_view()),\n    url(r\"^api/rqjobstat/$\", jobs.RQJobStatView.as_view()),\n    url(r\"^api/rqjoblist/$\", jobs.ListAllRQJobsView.as_view()),\n    url(r\"^api/nextcloud/listdir\", nextcloud_views.ListDir.as_view()),\n    url(r\"^api/nextcloud/scanphotos\", nextcloud_views.ScanPhotosView.as_view()),\n    url(r\"^api/photos/download\", views.ZipListPhotosView.as_view()),\n    url(r\"^api/timezones\", timezone.TimeZoneView.as_view()),\n]\nurlpatterns += [url(\"api/django-rq/\", include(\"django_rq.urls\"))]\nurlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n\nif site_config.ALLOW_UPLOAD:\n    urlpatterns += [\n        url(r\"api/upload/complete/\", upload.UploadPhotosChunkedComplete.as_view())\n    ]\n    urlpatterns += [url(r\"api/upload/\", upload.UploadPhotosChunked.as_view())]\n\n\nif settings.DEBUG:\n    from drf_spectacular.views import (\n        SpectacularAPIView,\n        SpectacularRedocView,\n        SpectacularSwaggerView,\n    )\n\n    urlpatterns += [url(r\"^api/silk/\", include(\"silk.urls\", namespace=\"silk\"))]\n    urlpatterns += [\n        url(r\"^api/schema\", SpectacularAPIView.as_view(), name=\"schema\"),\n        url(r\"^api/swagger\", SpectacularSwaggerView.as_view(), name=\"swagger-ui\"),\n        url(r\"^api/redoc\", SpectacularRedocView.as_view(), name=\"redoc\"),\n    ]\n"], "filenames": ["api/views/user.py", "ownphotos/urls.py"], "buggy_code_start_loc": [2, 195], "buggy_code_end_loc": [101, 195], "fixing_code_start_loc": [2, 196], "fixing_code_end_loc": [112, 197], "type": "NVD-CWE-Other", "message": "api/views/user.py in LibrePhotos before e19e539 has incorrect access control.", "other": {"cve": {"id": "CVE-2023-22903", "sourceIdentifier": "cve@mitre.org", "published": "2023-01-10T06:15:09.947", "lastModified": "2023-03-28T14:15:07.313", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "api/views/user.py in LibrePhotos before e19e539 has incorrect access control."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librephotos_project:librephotos:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023-01-09", "matchCriteriaId": "63F1A949-95F6-4C1A-9516-444D4E790A4A"}]}]}], "references": [{"url": "https://github.com/LibrePhotos/librephotos/commit/e19e539356df77f6f59e7d1eea22d452b268e120", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://raw.githubusercontent.com/go-compile/security-advisories/master/CVE-2023-22903.pdf", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/LibrePhotos/librephotos/commit/e19e539356df77f6f59e7d1eea22d452b268e120"}}