{"buggy_code": ["//Adapted from http://www.codeproject.com/KB/debug/postmortemdebug_standalone1.aspx#_Reading_a_Minidump_with%20Visual%20Stud\r\n//Modified for use by Npp\r\n\r\n// This file is part of Notepad++ project\r\n// Copyright (C)2021 Don HO <don.h@free.fr>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// at your option any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n\r\n#include <shlwapi.h>\r\n#include \"MiniDumper.h\"\r\n\r\nLPCTSTR msgTitle = TEXT(\"Notepad++ crash analysis\");\r\n\r\nMiniDumper::MiniDumper()\r\n{\r\n}\r\n\r\nbool MiniDumper::writeDump(EXCEPTION_POINTERS * pExceptionInfo)\r\n{\r\n\tTCHAR szDumpPath[MAX_PATH];\r\n\tTCHAR szScratch[MAX_PATH];\r\n\tLPCTSTR szResult = NULL;\r\n\tbool retval = false;\r\n\r\n\tHMODULE hDll = ::LoadLibrary( TEXT(\"DBGHELP.DLL\") );\t//that wont work on older windows version than XP, #care :)\r\n\r\n\tif (hDll)\r\n\t{\r\n\t\tMINIDUMPWRITEDUMP pDump = (MINIDUMPWRITEDUMP)::GetProcAddress( hDll, \"MiniDumpWriteDump\" );\r\n\t\tif (pDump)\r\n\t\t{\r\n\t\t\t::GetModuleFileName(NULL, szDumpPath, MAX_PATH);\r\n\t\t\t::PathRemoveFileSpec(szDumpPath);\r\n\t\t\twcscat_s(szDumpPath, TEXT(\"\\\\NppDump.dmp\"));\r\n\r\n\t\t\t// ask the user if they want to save a dump file\r\n\t\t\tint msgret = ::MessageBox(NULL, TEXT(\"Do you want to save a dump file?\\r\\nDoing so can aid in developing Notepad++.\"), msgTitle, MB_YESNO);\r\n\t\t\tif (msgret == IDYES)\r\n\t\t\t{\r\n\t\t\t\t// create the file\r\n\t\t\t\tHANDLE hFile = ::CreateFile( szDumpPath, GENERIC_WRITE, FILE_SHARE_WRITE, NULL, CREATE_ALWAYS,\r\n\t\t\t\t\t\t\t\t\t\t\tFILE_ATTRIBUTE_NORMAL, NULL );\r\n\r\n\t\t\t\tif (hFile!=INVALID_HANDLE_VALUE)\r\n\t\t\t\t{\r\n\t\t\t\t\t_MINIDUMP_EXCEPTION_INFORMATION ExInfo;\r\n\r\n\t\t\t\t\tExInfo.ThreadId = ::GetCurrentThreadId();\r\n\t\t\t\t\tExInfo.ExceptionPointers = pExceptionInfo;\r\n\t\t\t\t\tExInfo.ClientPointers = NULL;\r\n\r\n\t\t\t\t\t// write the dump\r\n\t\t\t\t\tBOOL bOK = pDump( GetCurrentProcess(), GetCurrentProcessId(), hFile, MiniDumpNormal, &ExInfo, NULL, NULL );\r\n\t\t\t\t\tif (bOK)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twsprintf( szScratch, TEXT(\"Saved dump file to '%s'\"), szDumpPath );\r\n\t\t\t\t\t\tszResult = szScratch;\r\n\t\t\t\t\t\tretval = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twsprintf( szScratch, TEXT(\"Failed to save dump file to '%s' (error %d)\"), szDumpPath, GetLastError() );\r\n\t\t\t\t\t\tszResult = szScratch;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t::CloseHandle(hFile);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\twsprintf( szScratch, TEXT(\"Failed to create dump file '%s' (error %d)\"), szDumpPath, GetLastError() );\r\n\t\t\t\t\tszResult = szScratch;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tszResult = TEXT(\"The debugging DLL is outdated,\\r\\nfind a recent copy of dbghelp.dll and install it.\");\r\n\t\t}\r\n\t\t::FreeLibrary(hDll);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tszResult = TEXT(\"Unable to load the debugging DLL,\\r\\nfind a recent copy of dbghelp.dll and install it.\");\r\n\t}\r\n\r\n\tif (szResult)\r\n\t\t::MessageBox(NULL, szResult, msgTitle, MB_OK);\r\n\r\n\treturn retval;\r\n}\r\n", "// This file is part of Notepad++ project\r\n// Copyright (C)2021 Don HO <don.h@free.fr>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// at your option any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n#include <time.h>\r\n#include <shlwapi.h>\r\n#include <shlobj.h>\r\n#include \"Parameters.h\"\r\n#include \"ScintillaEditView.h\"\r\n#include \"keys.h\"\r\n#include \"localization.h\"\r\n#include \"localizationString.h\"\r\n#include \"UserDefineDialog.h\"\r\n#include \"WindowsDlgRc.h\"\r\n\r\n#pragma warning(disable : 4996) // for GetVersionEx()\r\n\r\nusing namespace std;\r\n\r\nnamespace // anonymous namespace\r\n{\r\n\r\n\r\nstruct WinMenuKeyDefinition //more or less matches accelerator table definition, easy copy/paste\r\n{\r\n\t//const TCHAR * name;\t//name retrieved from menu?\r\n\tint vKey;\r\n\tint functionId;\r\n\tbool isCtrl;\r\n\tbool isAlt;\r\n\tbool isShift;\r\n\tconst TCHAR * specialName;\t\t//Used when no real menu name exists (in case of toggle for example)\r\n};\r\n\r\n\r\nstruct ScintillaKeyDefinition\r\n{\r\n\tconst TCHAR * name;\r\n\tint functionId;\r\n\tbool isCtrl;\r\n\tbool isAlt;\r\n\tbool isShift;\r\n\tint vKey;\r\n\tint redirFunctionId;\t//this gets set  when a function is being redirected through Notepad++ if Scintilla doesnt do it properly :)\r\n};\r\n\r\n\r\n/*!\r\n** \\brief array of accelerator keys for all std menu items\r\n**\r\n** values can be 0 for vKey, which means its unused\r\n*/\r\nstatic const WinMenuKeyDefinition winKeyDefs[] =\r\n{\r\n\t// V_KEY,    COMMAND_ID,                                    Ctrl,  Alt,   Shift, cmdName\r\n\t// -------------------------------------------------------------------------------------\r\n\t//\r\n\t{ VK_N,       IDM_FILE_NEW,                                 true,  false, false, nullptr },\r\n\t{ VK_O,       IDM_FILE_OPEN,                                true,  false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_OPEN_FOLDER,                         false, false, false, TEXT(\"Open containing folder in Explorer\") },\r\n\t{ VK_NULL,    IDM_FILE_OPEN_CMD,                            false, false, false, TEXT(\"Open containing folder in Command Prompt\") },\r\n\t{ VK_NULL,    IDM_FILE_OPEN_DEFAULT_VIEWER,                 false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_OPENFOLDERASWORSPACE,                false, false, false, nullptr },\r\n\t{ VK_R,       IDM_FILE_RELOAD,                              true,  false, false, nullptr },\r\n\t{ VK_S,       IDM_FILE_SAVE,                                true,  false, false, nullptr },\r\n\t{ VK_S,       IDM_FILE_SAVEAS,                              true,  true,  false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_SAVECOPYAS,                          false, false, false, nullptr },\r\n\t{ VK_S,       IDM_FILE_SAVEALL,                             true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_FILE_RENAME,                              false, false, false, nullptr },\r\n\t{ VK_W,       IDM_FILE_CLOSE,                               true,  false, false, nullptr },\r\n\t{ VK_W,       IDM_FILE_CLOSEALL,                            true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_FILE_CLOSEALL_BUT_CURRENT,                false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_CLOSEALL_TOLEFT,                     false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_CLOSEALL_TORIGHT,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_CLOSEALL_UNCHANGED,                  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_DELETE,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_LOADSESSION,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_SAVESESSION,                         false, false, false, nullptr },\r\n\t{ VK_P,       IDM_FILE_PRINT,                               true,  false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_PRINTNOW,                            false, false, false, nullptr },\r\n\t{ VK_F4,      IDM_FILE_EXIT,                                false, true,  false, nullptr },\r\n\t{ VK_T,       IDM_FILE_RESTORELASTCLOSEDFILE,               true,  false, true,  TEXT(\"Restore Recent Closed File\")},\r\n\r\n//\t{ VK_NULL,    IDM_EDIT_UNDO,                                false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_REDO,                                false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_CUT,                                 false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_COPY,                                false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_PASTE,                               false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_DELETE,                              false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_SELECTALL,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_BEGINENDSELECT,                      false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_EDIT_FULLPATHTOCLIP,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_FILENAMETOCLIP,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CURRENTDIRTOCLIP,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_COPY_ALL_NAMES,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_COPY_ALL_PATHS,                      false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_EDIT_INS_TAB,                             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_RMV_TAB,                             false, false, false, nullptr },\r\n\t{ VK_U,       IDM_EDIT_UPPERCASE,                           true,  false, true,  nullptr },\r\n\t{ VK_U,       IDM_EDIT_LOWERCASE,                           true,  false, false, nullptr },\r\n\t{ VK_U,       IDM_EDIT_PROPERCASE_FORCE,                    false, true,  false, nullptr },\r\n\t{ VK_U,       IDM_EDIT_PROPERCASE_BLEND,                    false, true,  true,  nullptr },\r\n\t{ VK_U,       IDM_EDIT_SENTENCECASE_FORCE,                  true,  true,  false, nullptr },\r\n\t{ VK_U,       IDM_EDIT_SENTENCECASE_BLEND,                  true,  true,  true,  nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_INVERTCASE,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_RANDOMCASE,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_REMOVE_CONSECUTIVE_DUP_LINES,        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_REMOVE_ANY_DUP_LINES,                false, false, false, nullptr },\r\n\t{ VK_I,       IDM_EDIT_SPLIT_LINES,                         true,  false, false, nullptr },\r\n\t{ VK_J,       IDM_EDIT_JOIN_LINES,                          true,  false, false, nullptr },\r\n\t{ VK_UP,      IDM_EDIT_LINE_UP,                             true,  false, true,  nullptr },\r\n\t{ VK_DOWN,    IDM_EDIT_LINE_DOWN,                           true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_REMOVEEMPTYLINES,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_REMOVEEMPTYLINESWITHBLANK,           false, false, false, nullptr },\r\n\t{ VK_RETURN,  IDM_EDIT_BLANKLINEABOVECURRENT,               true,  true,  false, nullptr },\r\n\t{ VK_RETURN,  IDM_EDIT_BLANKLINEBELOWCURRENT,               true,  true,  true,  nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_LEXICOGRAPHIC_ASCENDING,   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_LEXICOGRAPHIC_DESCENDING,  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_LEXICO_CASE_INSENS_ASCENDING,   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_LEXICO_CASE_INSENS_DESCENDING,  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_INTEGER_ASCENDING,         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_INTEGER_DESCENDING,        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_DECIMALCOMMA_ASCENDING,    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_DECIMALCOMMA_DESCENDING,   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_DECIMALDOT_ASCENDING,      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_DECIMALDOT_DESCENDING,     false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_REVERSE_ORDER,             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_RANDOMLY,                  false, false, false, nullptr },\r\n\t{ VK_Q,       IDM_EDIT_BLOCK_COMMENT,                       true,  false, false, nullptr },\r\n\t{ VK_K,       IDM_EDIT_BLOCK_COMMENT_SET,                   true,  false, false, nullptr },\r\n\t{ VK_K,       IDM_EDIT_BLOCK_UNCOMMENT,                     true,  false, true,  nullptr },\r\n\t{ VK_Q,       IDM_EDIT_STREAM_COMMENT,                      true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_STREAM_UNCOMMENT,                    false, false, false, nullptr },\r\n\t{ VK_SPACE,   IDM_EDIT_AUTOCOMPLETE,                        true,  false, false, nullptr },\r\n\t{ VK_SPACE,   IDM_EDIT_AUTOCOMPLETE_PATH,                   true,  true,  false, nullptr },\r\n\t{ VK_RETURN,  IDM_EDIT_AUTOCOMPLETE_CURRENTFILE,            true,  false, false, nullptr },\r\n\t{ VK_SPACE,   IDM_EDIT_FUNCCALLTIP,                         true,  false, true,  nullptr },\r\n\t{ VK_UP,      IDM_EDIT_FUNCCALLTIP_PREVIOUS,                false, true,  false, nullptr },\r\n\t{ VK_DOWN,    IDM_EDIT_FUNCCALLTIP_NEXT,                    false, true,  false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_INSERT_DATETIME_SHORT,               false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_INSERT_DATETIME_LONG,                false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_INSERT_DATETIME_CUSTOMIZED,          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_TODOS,                             false, false, false, TEXT(\"EOL Conversion to Windows (CR LF)\") },\r\n\t{ VK_NULL,    IDM_FORMAT_TOUNIX,                            false, false, false, TEXT(\"EOL Conversion to Unix (LF)\") },\r\n\t{ VK_NULL,    IDM_FORMAT_TOMAC,                             false, false, false, TEXT(\"EOL Conversion to Macintosh (CR)\") },\r\n\t{ VK_NULL,    IDM_EDIT_TRIMTRAILING,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_TRIMLINEHEAD,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_TRIM_BOTH,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_EOL2WS,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_TRIMALL,                             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_TAB2SW,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SW2TAB_ALL,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SW2TAB_LEADING,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_PASTE_AS_HTML,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_PASTE_AS_RTF,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_COPY_BINARY,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CUT_BINARY,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_PASTE_BINARY,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_OPENASFILE,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_OPENINFOLDER,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SEARCHONINTERNET,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CHANGESEARCHENGINE,                  false, false, false, nullptr },\r\n//  { VK_NULL,    IDM_EDIT_COLUMNMODETIP,                       false, false, false, nullptr },\r\n\t{ VK_C,       IDM_EDIT_COLUMNMODE,                          false, true,  false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CHAR_PANEL,                          false, false, false, TEXT(\"Toggle Character Panel\") },\r\n\t{ VK_NULL,    IDM_EDIT_CLIPBOARDHISTORY_PANEL,              false, false, false, TEXT(\"Toggle Clipboard History\") },\r\n\t{ VK_NULL,    IDM_EDIT_SETREADONLY,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CLEARREADONLY,                       false, false, false, nullptr },\r\n\t{ VK_F,       IDM_SEARCH_FIND,                              true,  false, false, nullptr },\r\n\t{ VK_F,       IDM_SEARCH_FINDINFILES,                       true,  false, true,  nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_FINDNEXT,                          false, false, false, nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_FINDPREV,                          false, false, true,  nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_SETANDFINDNEXT,                    true,  false, false, nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_SETANDFINDPREV,                    true,  false, true,  nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_VOLATILE_FINDNEXT,                 true,  true,  false, nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_VOLATILE_FINDPREV,                 true,  true,  true,  nullptr },\r\n\t{ VK_H,       IDM_SEARCH_REPLACE,                           true,  false, false, nullptr },\r\n\t{ VK_I,       IDM_SEARCH_FINDINCREMENT,                     true,  true,  false, nullptr },\r\n\t{ VK_F7,      IDM_FOCUS_ON_FOUND_RESULTS,                   false, false, false, nullptr },\r\n\t{ VK_F4,      IDM_SEARCH_GOTOPREVFOUND,                     false, false, true,  nullptr },\r\n\t{ VK_F4,      IDM_SEARCH_GOTONEXTFOUND,                     false, false, false, nullptr },\r\n\t{ VK_G,       IDM_SEARCH_GOTOLINE,                          true,  false, false, nullptr },\r\n\t{ VK_B,       IDM_SEARCH_GOTOMATCHINGBRACE,                 true,  false, false, nullptr },\r\n\t{ VK_B,       IDM_SEARCH_SELECTMATCHINGBRACES,              true,  true,  false, nullptr },\r\n\t{ VK_M,       IDM_SEARCH_MARK,                              true,  false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT1,                       false, false, false, TEXT(\"Style all using 1st style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT2,                       false, false, false, TEXT(\"Style all using 2nd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT3,                       false, false, false, TEXT(\"Style all using 3rd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT4,                       false, false, false, TEXT(\"Style all using 4th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT5,                       false, false, false, TEXT(\"Style all using 5th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT1,                       false, false, false, TEXT(\"Style one using 1st style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT2,                       false, false, false, TEXT(\"Style one using 2nd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT3,                       false, false, false, TEXT(\"Style one using 3rd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT4,                       false, false, false, TEXT(\"Style one using 4th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT5,                       false, false, false, TEXT(\"Style one using 5th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT1,                     false, false, false, TEXT(\"Clear 1st style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT2,                     false, false, false, TEXT(\"Clear 2nd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT3,                     false, false, false, TEXT(\"Clear 3rd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT4,                     false, false, false, TEXT(\"Clear 4th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT5,                     false, false, false, TEXT(\"Clear 5th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_CLEARALLMARKS,                     false, false, false, TEXT(\"Clear all styles\") },\r\n\t{ VK_1,       IDM_SEARCH_GOPREVMARKER1,                     true,  false, true,  TEXT(\"Previous style of 1st style\") },\r\n\t{ VK_2,       IDM_SEARCH_GOPREVMARKER2,                     true,  false, true,  TEXT(\"Previous style of 2nd style\") },\r\n\t{ VK_3,       IDM_SEARCH_GOPREVMARKER3,                     true,  false, true,  TEXT(\"Previous style of 3rd style\") },\r\n\t{ VK_4,       IDM_SEARCH_GOPREVMARKER4,                     true,  false, true,  TEXT(\"Previous style of 4th style\") },\r\n\t{ VK_5,       IDM_SEARCH_GOPREVMARKER5,                     true,  false, true,  TEXT(\"Previous style of 5th style\") },\r\n\t{ VK_0,       IDM_SEARCH_GOPREVMARKER_DEF,                  true,  false, true,  TEXT(\"Previous style of Find Mark style\") },\r\n\t{ VK_1,       IDM_SEARCH_GONEXTMARKER1,                     true,  false, false, TEXT(\"Next style of 1st style\") },\r\n\t{ VK_2,       IDM_SEARCH_GONEXTMARKER2,                     true,  false, false, TEXT(\"Next style of 2nd style\") },\r\n\t{ VK_3,       IDM_SEARCH_GONEXTMARKER3,                     true,  false, false, TEXT(\"Next style of 3rd style\") },\r\n\t{ VK_4,       IDM_SEARCH_GONEXTMARKER4,                     true,  false, false, TEXT(\"Next style of 4th style\") },\r\n\t{ VK_5,       IDM_SEARCH_GONEXTMARKER5,                     true,  false, false, TEXT(\"Next style of 5th style\") },\r\n\t{ VK_0,       IDM_SEARCH_GONEXTMARKER_DEF,                  true,  false, false, TEXT(\"Next style of Find Mark style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE1TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 1st Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE2TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 2nd Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE3TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 3rd Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE4TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 4th Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE5TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 5th Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_ALLSTYLESTOCLIP,                   false, false, false, TEXT(\"Copy Styled Text of All Styles\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKEDTOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of Find Mark style\") },\r\n\t{ VK_F2,      IDM_SEARCH_TOGGLE_BOOKMARK,                   true,  false, false, nullptr },\r\n\t{ VK_F2,      IDM_SEARCH_NEXT_BOOKMARK,                     false, false, false, nullptr },\r\n\t{ VK_F2,      IDM_SEARCH_PREV_BOOKMARK,                     false, false, true, nullptr  },\r\n\t{ VK_NULL,    IDM_SEARCH_CLEAR_BOOKMARKS,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_CUTMARKEDLINES,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_COPYMARKEDLINES,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_PASTEMARKEDLINES,                  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_DELETEMARKEDLINES,                 false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_DELETEUNMARKEDLINES,               false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_INVERSEMARKS,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_FINDCHARINRANGE,                   false, false, false, nullptr },\r\n\t\t\t\t \r\n\t{ VK_NULL,    IDM_VIEW_ALWAYSONTOP,                         false, false, false, nullptr },\r\n\t{ VK_F11,     IDM_VIEW_FULLSCREENTOGGLE,                    false, false, false, nullptr },\r\n\t{ VK_F12,     IDM_VIEW_POSTIT,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_DISTRACTIONFREE,                     false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_VIEW_IN_FIREFOX,                          false, false, false, TEXT(\"View current file in Firefox\") },\r\n\t{ VK_NULL,    IDM_VIEW_IN_CHROME,                           false, false, false, TEXT(\"View current file in Chrome\") },\r\n\t{ VK_NULL,    IDM_VIEW_IN_IE,                               false, false, false, TEXT(\"View current file in IE\") },\r\n\t{ VK_NULL,    IDM_VIEW_IN_EDGE,                             false, false, false, TEXT(\"View current file in Edge\")  },\r\n\r\n\t{ VK_NULL,    IDM_VIEW_TAB_SPACE,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_EOL,                                 false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_ALL_CHARACTERS,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_INDENT_GUIDE,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_WRAP_SYMBOL,                         false, false, false, nullptr },\r\n//  { VK_NULL,    IDM_VIEW_ZOOMIN,                              false, false, false, nullptr },\r\n//  { VK_NULL,    IDM_VIEW_ZOOMOUT,                             false, false, false, nullptr },\r\n//  { VK_NULL,    IDM_VIEW_ZOOMRESTORE,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_GOTO_ANOTHER_VIEW,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_CLONE_TO_ANOTHER_VIEW,               false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_GOTO_NEW_INSTANCE,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_LOAD_IN_NEW_INSTANCE,                false, false, false, nullptr },\r\n\r\n\t{ VK_NUMPAD1, IDM_VIEW_TAB1,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD2, IDM_VIEW_TAB2,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD3, IDM_VIEW_TAB3,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD4, IDM_VIEW_TAB4,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD5, IDM_VIEW_TAB5,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD6, IDM_VIEW_TAB6,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD7, IDM_VIEW_TAB7,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD8, IDM_VIEW_TAB8,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD9, IDM_VIEW_TAB9,                                true,  false, false, nullptr },\r\n\t{ VK_NEXT,    IDM_VIEW_TAB_NEXT,                            true,  false, false, nullptr },\r\n\t{ VK_PRIOR,   IDM_VIEW_TAB_PREV,                            true,  false, false, nullptr },\r\n\t{ VK_NEXT,    IDM_VIEW_TAB_MOVEFORWARD,                     true,  false, true,  nullptr },\r\n\t{ VK_PRIOR,   IDM_VIEW_TAB_MOVEBACKWARD,                    true,  false, true,  nullptr },\r\n\t{ VK_TAB,     IDC_PREV_DOC,                                 true,  false, true,  TEXT(\"Switch to previous document\") },\r\n\t{ VK_TAB,     IDC_NEXT_DOC,                                 true,  false, false, TEXT(\"Switch to next document\") },\r\n\t{ VK_NULL,    IDM_VIEW_WRAP,                                false, false, false, nullptr },\r\n\t{ VK_H,       IDM_VIEW_HIDELINES,                           false, true,  false, nullptr },\r\n\t{ VK_F8,      IDM_VIEW_SWITCHTO_OTHER_VIEW,                 false, false, false, nullptr },\r\n\r\n\t{ VK_0,       IDM_VIEW_FOLDALL,                             false, true,  false, nullptr },\r\n\t{ VK_0,       IDM_VIEW_UNFOLDALL,                           false, true,  true,  nullptr },\r\n\t{ VK_F,       IDM_VIEW_FOLD_CURRENT,                        true,  true,  false, nullptr },\r\n\t{ VK_F,       IDM_VIEW_UNFOLD_CURRENT,                      true,  true,  true,  nullptr },\r\n\t{ VK_1,       IDM_VIEW_FOLD_1,                              false, true,  false, TEXT(\"Fold Level 1\") },\r\n\t{ VK_2,       IDM_VIEW_FOLD_2,                              false, true,  false, TEXT(\"Fold Level 2\") },\r\n\t{ VK_3,       IDM_VIEW_FOLD_3,                              false, true,  false, TEXT(\"Fold Level 3\") },\r\n\t{ VK_4,       IDM_VIEW_FOLD_4,                              false, true,  false, TEXT(\"Fold Level 4\") },\r\n\t{ VK_5,       IDM_VIEW_FOLD_5,                              false, true,  false, TEXT(\"Fold Level 5\") },\r\n\t{ VK_6,       IDM_VIEW_FOLD_6,                              false, true,  false, TEXT(\"Fold Level 6\") },\r\n\t{ VK_7,       IDM_VIEW_FOLD_7,                              false, true,  false, TEXT(\"Fold Level 7\") },\r\n\t{ VK_8,       IDM_VIEW_FOLD_8,                              false, true,  false, TEXT(\"Fold Level 8\") },\r\n\r\n\t{ VK_1,       IDM_VIEW_UNFOLD_1,                            false, true,  true,  TEXT(\"Unfold Level 1\") },\r\n\t{ VK_2,       IDM_VIEW_UNFOLD_2,                            false, true,  true,  TEXT(\"Unfold Level 2\") },\r\n\t{ VK_3,       IDM_VIEW_UNFOLD_3,                            false, true,  true,  TEXT(\"Unfold Level 3\") },\r\n\t{ VK_4,       IDM_VIEW_UNFOLD_4,                            false, true,  true,  TEXT(\"Unfold Level 4\") },\r\n\t{ VK_5,       IDM_VIEW_UNFOLD_5,                            false, true,  true,  TEXT(\"Unfold Level 5\") },\r\n\t{ VK_6,       IDM_VIEW_UNFOLD_6,                            false, true,  true,  TEXT(\"Unfold Level 6\") },\r\n\t{ VK_7,       IDM_VIEW_UNFOLD_7,                            false, true,  true,  TEXT(\"Unfold Level 7\") },\r\n\t{ VK_8,       IDM_VIEW_UNFOLD_8,                            false, true,  true,  TEXT(\"Unfold Level 8\") },\r\n\t{ VK_NULL,    IDM_VIEW_SUMMARY,                             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_PROJECT_PANEL_1,                     false, false, false, TEXT(\"Toggle Project Panel 1\") },\r\n\t{ VK_NULL,    IDM_VIEW_PROJECT_PANEL_2,                     false, false, false, TEXT(\"Toggle Project Panel 2\") },\r\n\t{ VK_NULL,    IDM_VIEW_PROJECT_PANEL_3,                     false, false, false, TEXT(\"Toggle Project Panel 3\") },\r\n\t{ VK_NULL,    IDM_VIEW_FILEBROWSER,                         false, false, false, TEXT(\"Toggle Folder as Workspace\") },\r\n\t{ VK_NULL,    IDM_VIEW_DOC_MAP,                             false, false, false, TEXT(\"Toggle Document Map\") },\r\n\t{ VK_NULL,    IDM_VIEW_DOCLIST,                             false, false, false, TEXT(\"Toggle Document List\") },\r\n\t{ VK_NULL,    IDM_VIEW_FUNC_LIST,                           false, false, false, TEXT(\"Toggle Function List\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_PROJECT_PANEL_1,            false, false, false, TEXT(\"Switch to Project Panel 1\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_PROJECT_PANEL_2,            false, false, false, TEXT(\"Switch to Project Panel 2\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_PROJECT_PANEL_3,            false, false, false, TEXT(\"Switch to Project Panel 3\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_FILEBROWSER,                false, false, false, TEXT(\"Switch to Folder as Workspace\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_FUNC_LIST,                  false, false, false, TEXT(\"Switch to Function List\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_DOCLIST,                    false, false, false, TEXT(\"Switch to Document List\") },\r\n\t{ VK_NULL,    IDM_VIEW_SYNSCROLLV,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_SYNSCROLLH,                          false, false, false, nullptr },\r\n\t{ VK_R,       IDM_EDIT_RTL,                                 true,  true,  false, nullptr },\r\n\t{ VK_L,       IDM_EDIT_LTR,                                 true,  true,  false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_MONITORING,                          false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_FORMAT_ANSI,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_AS_UTF_8,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_UTF_8,                             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_UTF_16BE,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_UTF_16LE,                          false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_6,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1256,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_13,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1257,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_14,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_5,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_MAC_CYRILLIC,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_KOI8R_CYRILLIC,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_KOI8U_CYRILLIC,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1251,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1250,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_437,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_720,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_737,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_775,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_850,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_852,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_855,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_857,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_858,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_860,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_861,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_862,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_863,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_865,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_866,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_869,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_BIG5,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_GB2312,                            false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_2,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_7,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1253,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_8,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1255,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_SHIFT_JIS,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_EUC_KR,                            false, false, false, nullptr },\r\n\t//{ VK_NULL,    IDM_FORMAT_ISO_8859_10,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_15,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_4,                        false, false, false, nullptr },\r\n\t//{ VK_NULL,    IDM_FORMAT_ISO_8859_16,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_3,                        false, false, false, nullptr },\r\n\t//{ VK_NULL,    IDM_FORMAT_ISO_8859_11,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_TIS_620,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_9,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1254,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1252,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_1,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1258,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_ANSI,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_AS_UTF_8,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_UTF_8,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_UTF_16BE,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_UTF_16LE,                    false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_LANG_USER_DLG,                            false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_LANG_USER,                                false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_LANG_OPENUDLDIR,                          false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_SETTING_PREFERENCE,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_LANGSTYLE_CONFIG_DLG,                     false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SETTING_SHORTCUT_MAPPER,                  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SETTING_IMPORTPLUGIN,                     false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SETTING_IMPORTSTYLETHEMS,                 false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SETTING_EDITCONTEXTMENU,                  false, false, false, nullptr },\r\n\r\n\t{ VK_R,       IDC_EDIT_TOGGLEMACRORECORDING,                true,  false, true,  TEXT(\"Toggle macro recording\")},\r\n\t{ VK_NULL,    IDM_MACRO_STARTRECORDINGMACRO,                false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_MACRO_STOPRECORDINGMACRO,                 false, false, false, nullptr },\r\n\t{ VK_P,       IDM_MACRO_PLAYBACKRECORDEDMACRO,              true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_MACRO_SAVECURRENTMACRO,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_MACRO_RUNMULTIMACRODLG,                   false, false, false, nullptr },\r\n\r\n\t{ VK_F5,      IDM_EXECUTE,                                  false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FN_ASC,                       false, false, false, TEXT(\"Sort By Name A to Z\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FN_DSC,                       false, false, false, TEXT(\"Sort By Name Z to A\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FP_ASC,                       false, false, false, TEXT(\"Sort By Path A to Z\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FP_DSC,                       false, false, false, TEXT(\"Sort By Path Z to A\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FT_ASC,                       false, false, false, TEXT(\"Sort By Type A to Z\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FT_DSC,                       false, false, false, TEXT(\"Sort By Type Z to A\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FS_ASC,                       false, false, false, TEXT(\"Sort By Size Smaller to Larger\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FS_DSC,                       false, false, false, TEXT(\"Sort By Size Larger to Smaller\") },\r\n\r\n\t{ VK_NULL,    IDM_CMDLINEARGUMENTS,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_HOMESWEETHOME,                            false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_PROJECTPAGE,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_ONLINEDOCUMENT,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORUM,                                    false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_ONLINESUPPORT,                            false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_PLUGINSHOME,                              false, false, false, nullptr },\r\n\r\n\t// The following two commands are not in menu if (nppGUI._doesExistUpdater == 0).\r\n\t// They cannot be derived from menu then, only for this reason the text is specified here.\r\n\t// In localized environments, the text comes preferably from xml Menu/Main/Commands.\r\n\t{ VK_NULL,    IDM_UPDATE_NPP,                               false, false, false, TEXT(\"Update Notepad++\") },\r\n\t{ VK_NULL,    IDM_CONFUPDATERPROXY,                         false, false, false, TEXT(\"Set Updater Proxy...\") },\r\n\t{ VK_NULL,    IDM_DEBUGINFO,                                false, false, false, nullptr },\r\n\t{ VK_F1,      IDM_ABOUT,                                    false, false, false, nullptr }\r\n};\r\n\r\n\r\n\r\n\r\n/*!\r\n** \\brief array of accelerator keys for all possible scintilla functions\r\n**\r\n** values can be 0 for vKey, which means its unused\r\n*/\r\nstatic const ScintillaKeyDefinition scintKeyDefs[] =\r\n{\r\n\t{TEXT(\"SCI_CUT\"),                     SCI_CUT,                     true,  false, false, VK_X,        IDM_EDIT_CUT},\r\n\t{TEXT(\"\"),                            SCI_CUT,                     false, false, true,  VK_DELETE,   0},\r\n\t{TEXT(\"SCI_COPY\"),                    SCI_COPY,                    true,  false, false, VK_C,        IDM_EDIT_COPY},\r\n\t{TEXT(\"\"),                            SCI_COPY,                    true,  false, false, VK_INSERT,   0},\r\n\t{TEXT(\"SCI_PASTE\"),                   SCI_PASTE,                   true,  false, false, VK_V,        IDM_EDIT_PASTE},\r\n\t{TEXT(\"\"),                            SCI_PASTE,                   false, false, true,  VK_INSERT,   0},\r\n\t{TEXT(\"SCI_SELECTALL\"),               SCI_SELECTALL,               true,  false, false, VK_A,        IDM_EDIT_SELECTALL},\r\n\t{TEXT(\"SCI_CLEAR\"),                   SCI_CLEAR,                   false, false, false, VK_DELETE,   IDM_EDIT_DELETE},\r\n\t{TEXT(\"SCI_CLEARALL\"),                SCI_CLEARALL,                false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_UNDO\"),                    SCI_UNDO,                    true,  false, false, VK_Z,        IDM_EDIT_UNDO},\r\n\t{TEXT(\"\"),                            SCI_UNDO,                    false, true,  false, VK_BACK,     0},\r\n\t{TEXT(\"SCI_REDO\"),                    SCI_REDO,                    true,  false, false, VK_Y,        IDM_EDIT_REDO},\r\n\t{TEXT(\"\"),                            SCI_REDO,                    true,  false, true,  VK_Z,        0},\r\n\t{TEXT(\"SCI_NEWLINE\"),                 SCI_NEWLINE,                 false, false, false, VK_RETURN,   0},\r\n\t{TEXT(\"\"),                            SCI_NEWLINE,                 false, false, true,  VK_RETURN,   0},\r\n\t{TEXT(\"SCI_TAB\"),                     SCI_TAB,                     false, false, false, VK_TAB,      0},\r\n\t{TEXT(\"SCI_BACKTAB\"),                 SCI_BACKTAB,                 false, false, true,  VK_TAB,      0},\r\n\t{TEXT(\"SCI_FORMFEED\"),                SCI_FORMFEED,                false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_ZOOMIN\"),                  SCI_ZOOMIN,                  true,  false, false, VK_ADD,      IDM_VIEW_ZOOMIN},\r\n\t{TEXT(\"SCI_ZOOMOUT\"),                 SCI_ZOOMOUT,                 true,  false, false, VK_SUBTRACT, IDM_VIEW_ZOOMOUT},\r\n\t{TEXT(\"SCI_SETZOOM\"),                 SCI_SETZOOM,                 true,  false, false, VK_DIVIDE,   IDM_VIEW_ZOOMRESTORE},\r\n\t{TEXT(\"SCI_SELECTIONDUPLICATE\"),      SCI_SELECTIONDUPLICATE,      true,  false, false, VK_D,        IDM_EDIT_DUP_LINE},\r\n\t{TEXT(\"SCI_LINESJOIN\"),               SCI_LINESJOIN,               false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_SCROLLCARET\"),             SCI_SCROLLCARET,             false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_EDITTOGGLEOVERTYPE\"),      SCI_EDITTOGGLEOVERTYPE,      false, false, false, VK_INSERT,   0},\r\n\t{TEXT(\"SCI_MOVECARETINSIDEVIEW\"),     SCI_MOVECARETINSIDEVIEW,     false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_LINEDOWN\"),                SCI_LINEDOWN,                false, false, false, VK_DOWN,     0},\r\n\t{TEXT(\"SCI_LINEDOWNEXTEND\"),          SCI_LINEDOWNEXTEND,          false, false, true,  VK_DOWN,     0},\r\n\t{TEXT(\"SCI_LINEDOWNRECTEXTEND\"),      SCI_LINEDOWNRECTEXTEND,      false, true,  true,  VK_DOWN,     0},\r\n\t{TEXT(\"SCI_LINESCROLLDOWN\"),          SCI_LINESCROLLDOWN,          true,  false, false, VK_DOWN,     0},\r\n\t{TEXT(\"SCI_LINEUP\"),                  SCI_LINEUP,                  false, false, false, VK_UP,       0},\r\n\t{TEXT(\"SCI_LINEUPEXTEND\"),            SCI_LINEUPEXTEND,            false, false, true,  VK_UP,       0},\r\n\t{TEXT(\"SCI_LINEUPRECTEXTEND\"),        SCI_LINEUPRECTEXTEND,        false, true,  true,  VK_UP,       0},\r\n\t{TEXT(\"SCI_LINESCROLLUP\"),            SCI_LINESCROLLUP,            true,  false, false, VK_UP,       0},\r\n\t{TEXT(\"SCI_PARADOWN\"),                SCI_PARADOWN,                true,  false, false, VK_OEM_6,    0},\r\n\t{TEXT(\"SCI_PARADOWNEXTEND\"),          SCI_PARADOWNEXTEND,          true,  false, true,  VK_OEM_6,    0},\r\n\t{TEXT(\"SCI_PARAUP\"),                  SCI_PARAUP,                  true,  false, false, VK_OEM_4,    0},\r\n\t{TEXT(\"SCI_PARAUPEXTEND\"),            SCI_PARAUPEXTEND,            true,  false, true,  VK_OEM_4,    0},\r\n\t{TEXT(\"SCI_CHARLEFT\"),                SCI_CHARLEFT,                false, false, false, VK_LEFT,     0},\r\n\t{TEXT(\"SCI_CHARLEFTEXTEND\"),          SCI_CHARLEFTEXTEND,          false, false, true,  VK_LEFT,     0},\r\n\t{TEXT(\"SCI_CHARLEFTRECTEXTEND\"),      SCI_CHARLEFTRECTEXTEND,      false, true,  true,  VK_LEFT,     0},\r\n\t{TEXT(\"SCI_CHARRIGHT\"),               SCI_CHARRIGHT,               false, false, false, VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_CHARRIGHTEXTEND\"),         SCI_CHARRIGHTEXTEND,         false, false, true,  VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_CHARRIGHTRECTEXTEND\"),     SCI_CHARRIGHTRECTEXTEND,     false, true,  true,  VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_WORDLEFT\"),                SCI_WORDLEFT,                true,  false, false, VK_LEFT,     0},\r\n\t{TEXT(\"SCI_WORDLEFTEXTEND\"),          SCI_WORDLEFTEXTEND,          true,  false, true,  VK_LEFT,     0},\r\n\t{TEXT(\"SCI_WORDRIGHT\"),               SCI_WORDRIGHT,               true,  false, false, VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_WORDRIGHTEXTEND\"),         SCI_WORDRIGHTEXTEND,         false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_WORDLEFTEND\"),             SCI_WORDLEFTEND,             false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_WORDLEFTENDEXTEND\"),       SCI_WORDLEFTENDEXTEND,       false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_WORDRIGHTEND\"),            SCI_WORDRIGHTEND,            false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_WORDRIGHTENDEXTEND\"),      SCI_WORDRIGHTENDEXTEND,      true,  false, true,  VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_WORDPARTLEFT\"),            SCI_WORDPARTLEFT,            true,  false, false, VK_OEM_2,    0},\r\n\t{TEXT(\"SCI_WORDPARTLEFTEXTEND\"),      SCI_WORDPARTLEFTEXTEND,      true,  false, true,  VK_OEM_2,    0},\r\n\t{TEXT(\"SCI_WORDPARTRIGHT\"),           SCI_WORDPARTRIGHT,           true,  false, false, VK_OEM_5,    0},\r\n\t{TEXT(\"SCI_WORDPARTRIGHTEXTEND\"),     SCI_WORDPARTRIGHTEXTEND,     true,  false, true,  VK_OEM_5,    0},\r\n\t{TEXT(\"SCI_HOME\"),                    SCI_HOME,                    false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMEEXTEND\"),              SCI_HOMEEXTEND,              false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMERECTEXTEND\"),          SCI_HOMERECTEXTEND,          false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMEDISPLAY\"),             SCI_HOMEDISPLAY,             false, true,  false, VK_HOME,     0},\r\n\t{TEXT(\"SCI_HOMEDISPLAYEXTEND\"),       SCI_HOMEDISPLAYEXTEND,       false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMEWRAP\"),                SCI_HOMEWRAP,                false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMEWRAPEXTEND\"),          SCI_HOMEWRAPEXTEND,          false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOME\"),                  SCI_VCHOME,                  false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOMEEXTEND\"),            SCI_VCHOMEEXTEND,            false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOMERECTEXTEND\"),        SCI_VCHOMERECTEXTEND,        false, true,  true,  VK_HOME,     0},\r\n\t{TEXT(\"SCI_VCHOMEDISPLAY\"),           SCI_VCHOMEDISPLAY,           false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOMEDISPLAYEXTEND\"),     SCI_VCHOMEDISPLAYEXTEND,     false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOMEWRAP\"),              SCI_VCHOMEWRAP,              false, false, false, VK_HOME,     0},\r\n\t{TEXT(\"SCI_VCHOMEWRAPEXTEND\"),        SCI_VCHOMEWRAPEXTEND,        false, false, true,  VK_HOME,     0},\r\n\t{TEXT(\"SCI_LINEEND\"),                 SCI_LINEEND,                 false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_LINEENDWRAPEXTEND\"),       SCI_LINEENDWRAPEXTEND,       false, false, true,  VK_END,      0},\r\n\t{TEXT(\"SCI_LINEENDRECTEXTEND\"),       SCI_LINEENDRECTEXTEND,       false, true,  true,  VK_END,      0},\r\n\t{TEXT(\"SCI_LINEENDDISPLAY\"),          SCI_LINEENDDISPLAY,          false, true,  false, VK_END,      0},\r\n\t{TEXT(\"SCI_LINEENDDISPLAYEXTEND\"),    SCI_LINEENDDISPLAYEXTEND,    false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_LINEENDWRAP\"),             SCI_LINEENDWRAP,             false, false, false, VK_END,      0},\r\n\t{TEXT(\"SCI_LINEENDEXTEND\"),           SCI_LINEENDEXTEND,           false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_DOCUMENTSTART\"),           SCI_DOCUMENTSTART,           true,  false, false, VK_HOME,     0},\r\n\t{TEXT(\"SCI_DOCUMENTSTARTEXTEND\"),     SCI_DOCUMENTSTARTEXTEND,     true,  false, true,  VK_HOME,     0},\r\n\t{TEXT(\"SCI_DOCUMENTEND\"),             SCI_DOCUMENTEND,             true,  false, false, VK_END,      0},\r\n\t{TEXT(\"SCI_DOCUMENTENDEXTEND\"),       SCI_DOCUMENTENDEXTEND,       true,  false, true,  VK_END,      0},\r\n\t{TEXT(\"SCI_PAGEUP\"),                  SCI_PAGEUP,                  false, false, false, VK_PRIOR,    0},\r\n\t{TEXT(\"SCI_PAGEUPEXTEND\"),            SCI_PAGEUPEXTEND,            false, false, true,  VK_PRIOR,    0},\r\n\t{TEXT(\"SCI_PAGEUPRECTEXTEND\"),        SCI_PAGEUPRECTEXTEND,        false, true,  true,  VK_PRIOR,    0},\r\n\t{TEXT(\"SCI_PAGEDOWN\"),                SCI_PAGEDOWN,                false, false, false, VK_NEXT,     0},\r\n\t{TEXT(\"SCI_PAGEDOWNEXTEND\"),          SCI_PAGEDOWNEXTEND,          false, false, true,  VK_NEXT,     0},\r\n\t{TEXT(\"SCI_PAGEDOWNRECTEXTEND\"),      SCI_PAGEDOWNRECTEXTEND,      false, true,  true,  VK_NEXT,     0},\r\n\t{TEXT(\"SCI_STUTTEREDPAGEUP\"),         SCI_STUTTEREDPAGEUP,         false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_STUTTEREDPAGEUPEXTEND\"),   SCI_STUTTEREDPAGEUPEXTEND,   false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_STUTTEREDPAGEDOWN\"),       SCI_STUTTEREDPAGEDOWN,       false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_STUTTEREDPAGEDOWNEXTEND\"), SCI_STUTTEREDPAGEDOWNEXTEND, false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_DELETEBACK\"),              SCI_DELETEBACK,              false, false, false, VK_BACK,     0},\r\n\t{TEXT(\"\"),                            SCI_DELETEBACK,              false, false, true,  VK_BACK,     0},\r\n\t{TEXT(\"SCI_DELETEBACKNOTLINE\"),       SCI_DELETEBACKNOTLINE,       false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_DELWORDLEFT\"),             SCI_DELWORDLEFT,             true,  false, false, VK_BACK,     0},\r\n\t{TEXT(\"SCI_DELWORDRIGHT\"),            SCI_DELWORDRIGHT,            true,  false, false, VK_DELETE,   0},\r\n\t{TEXT(\"SCI_DELLINELEFT\"),             SCI_DELLINELEFT,             true,  false, true,  VK_BACK,     0},\r\n\t{TEXT(\"SCI_DELLINERIGHT\"),            SCI_DELLINERIGHT,            true,  false, true,  VK_DELETE,   0},\r\n\t{TEXT(\"SCI_LINEDELETE\"),              SCI_LINEDELETE,              true,  false, true,  VK_L,        0},\r\n\t{TEXT(\"SCI_LINECUT\"),                 SCI_LINECUT,                 true,  false, false, VK_L,        0},\r\n\t{TEXT(\"SCI_LINECOPY\"),                SCI_LINECOPY,                true,  false, true,  VK_X,        0},\r\n\t{TEXT(\"SCI_LINETRANSPOSE\"),           SCI_LINETRANSPOSE,           true,  false, false, VK_T,        0},\r\n\t{TEXT(\"SCI_LINEDUPLICATE\"),           SCI_LINEDUPLICATE,           false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_CANCEL\"),                  SCI_CANCEL,                  false, false, false, VK_ESCAPE,   0},\r\n\t{TEXT(\"SCI_SWAPMAINANCHORCARET\"),     SCI_SWAPMAINANCHORCARET,     false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_ROTATESELECTION\"),         SCI_ROTATESELECTION,         false, false, false, 0,           0}\r\n};\r\n\r\n\r\ntypedef void (WINAPI *PGNSI)(LPSYSTEM_INFO);\r\n\r\nint strVal(const TCHAR *str, int base)\r\n{\r\n\tif (!str) return -1;\r\n\tif (!str[0]) return 0;\r\n\r\n\tTCHAR *finStr;\r\n\tint result = generic_strtol(str, &finStr, base);\r\n\tif (*finStr != '\\0')\r\n\t\treturn -1;\r\n\treturn result;\r\n}\r\n\r\n\r\nint decStrVal(const TCHAR *str)\r\n{\r\n\treturn strVal(str, 10);\r\n}\r\n\r\nint hexStrVal(const TCHAR *str)\r\n{\r\n\treturn strVal(str, 16);\r\n}\r\n\r\nint getKwClassFromName(const TCHAR *str)\r\n{\r\n\tif (!lstrcmp(TEXT(\"instre1\"), str)) return LANG_INDEX_INSTR;\r\n\tif (!lstrcmp(TEXT(\"instre2\"), str)) return LANG_INDEX_INSTR2;\r\n\tif (!lstrcmp(TEXT(\"type1\"), str)) return LANG_INDEX_TYPE;\r\n\tif (!lstrcmp(TEXT(\"type2\"), str)) return LANG_INDEX_TYPE2;\r\n\tif (!lstrcmp(TEXT(\"type3\"), str)) return LANG_INDEX_TYPE3;\r\n\tif (!lstrcmp(TEXT(\"type4\"), str)) return LANG_INDEX_TYPE4;\r\n\tif (!lstrcmp(TEXT(\"type5\"), str)) return LANG_INDEX_TYPE5;\r\n\tif (!lstrcmp(TEXT(\"type6\"), str)) return LANG_INDEX_TYPE6;\r\n\tif (!lstrcmp(TEXT(\"type7\"), str)) return LANG_INDEX_TYPE7;\r\n\r\n\tif ((str[1] == '\\0') && (str[0] >= '0') && (str[0] <= '8')) // up to KEYWORDSET_MAX\r\n\t\treturn str[0] - '0';\r\n\r\n\treturn -1;\r\n}\r\n\r\n\t\r\nsize_t getAsciiLenFromBase64Len(size_t base64StrLen)\r\n{\r\n\treturn (base64StrLen % 4) ? 0 : (base64StrLen - base64StrLen / 4);\r\n}\r\n\r\n\r\nint base64ToAscii(char *dest, const char *base64Str)\r\n{\r\n\tstatic const int base64IndexArray[123] =\r\n\t{\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, 62, -1, -1, -1, 63,\r\n\t\t52, 53, 54, 55 ,56, 57, 58, 59,\r\n\t\t60, 61, -1, -1, -1, -1, -1, -1,\r\n\t\t-1,  0,  1,  2,  3,  4,  5,  6,\r\n\t\t\t7,  8,  9, 10, 11, 12, 13, 14,\r\n\t\t15, 16, 17, 18, 19, 20, 21, 22,\r\n\t\t23, 24, 25, -1, -1, -1, -1 ,-1,\r\n\t\t-1, 26, 27, 28, 29, 30, 31, 32,\r\n\t\t33, 34, 35, 36, 37, 38, 39, 40,\r\n\t\t41, 42, 43, 44, 45, 46, 47, 48,\r\n\t\t49, 50, 51\r\n\t};\r\n\r\n\tsize_t b64StrLen = strlen(base64Str);\r\n\tsize_t nbLoop = b64StrLen / 4;\r\n\r\n\tsize_t i = 0;\r\n\tint k = 0;\r\n\r\n\tenum {b64_just, b64_1padded, b64_2padded} padd = b64_just;\r\n\tfor ( ; i < nbLoop ; i++)\r\n\t{\r\n\t\tsize_t j = i * 4;\r\n\t\tUCHAR uc0, uc1, uc2, uc3, p0, p1;\r\n\r\n\t\tuc0 = (UCHAR)base64IndexArray[base64Str[j]];\r\n\t\tuc1 = (UCHAR)base64IndexArray[base64Str[j+1]];\r\n\t\tuc2 = (UCHAR)base64IndexArray[base64Str[j+2]];\r\n\t\tuc3 = (UCHAR)base64IndexArray[base64Str[j+3]];\r\n\r\n\t\tif ((static_cast<char>(uc0) == -1) || (static_cast<char>(uc1) == -1) || (static_cast<char>(uc2) == -1) || (static_cast<char>(uc3) == -1))\r\n\t\t\treturn -1;\r\n\r\n\t\tif (base64Str[j+2] == '=') // && (uc3 == '=')\r\n\t\t{\r\n\t\t\tuc2 = uc3 = 0;\r\n\t\t\tpadd = b64_2padded;\r\n\t\t}\r\n\t\telse if (base64Str[j+3] == '=')\r\n\t\t{\r\n\t\t\tuc3 = 0;\r\n\t\t\tpadd = b64_1padded;\r\n\t\t}\r\n\r\n\t\tp0 = uc0 << 2;\r\n\t\tp1 = uc1 << 2;\r\n\t\tp1 >>= 6;\r\n\t\tdest[k++] = p0 | p1;\r\n\r\n\t\tp0 = uc1 << 4;\r\n\t\tp1 = uc2 << 2;\r\n\t\tp1 >>= 4;\r\n\t\tdest[k++] = p0 | p1;\r\n\r\n\t\tp0 = uc2 << 6;\r\n\t\tp1 = uc3;\r\n\t\tdest[k++] = p0 | p1;\r\n\t}\r\n\r\n\t//dest[k] = '\\0';\r\n\tif (padd == b64_1padded)\r\n\t//\tdest[k-1] = '\\0';\r\n\t\treturn k-1;\r\n\telse if (padd == b64_2padded)\r\n\t//\tdest[k-2] = '\\0';\r\n\t\treturn k-2;\r\n\r\n\treturn k;\r\n}\r\n\r\n} // anonymous namespace\r\n\r\n\r\nvoid cutString(const TCHAR* str2cut, vector<generic_string>& patternVect)\r\n{\r\n\tif (str2cut == nullptr) return;\r\n\r\n\tconst TCHAR *pBegin = str2cut;\r\n\tconst TCHAR *pEnd = pBegin;\r\n\r\n\twhile (*pEnd != '\\0')\r\n\t{\r\n\t\tif (_istspace(*pEnd))\r\n\t\t{\r\n\t\t\tif (pBegin != pEnd)\r\n\t\t\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n\t\t\tpBegin = pEnd + 1;\r\n\t\t\r\n\t\t}\r\n\t\t++pEnd;\r\n\t}\r\n\r\n\tif (pBegin != pEnd)\r\n\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n}\r\n\r\nvoid cutStringBy(const TCHAR* str2cut, vector<generic_string>& patternVect, char byChar, bool allowEmptyStr)\r\n{\r\n\tif (str2cut == nullptr) return;\r\n\r\n\tconst TCHAR* pBegin = str2cut;\r\n\tconst TCHAR* pEnd = pBegin;\r\n\r\n\twhile (*pEnd != '\\0')\r\n\t{\r\n\t\tif (*pEnd == byChar)\r\n\t\t{\r\n\t\t\tif (allowEmptyStr)\r\n\t\t\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n\t\t\telse if (pBegin != pEnd)\r\n\t\t\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n\t\t\tpBegin = pEnd + 1;\r\n\t\t}\r\n\t\t++pEnd;\r\n\t}\r\n\tif (allowEmptyStr)\r\n\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n\telse if (pBegin != pEnd)\r\n\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n}\r\n\r\n\r\nstd::wstring LocalizationSwitcher::getLangFromXmlFileName(const wchar_t *fn) const\r\n{\r\n\tsize_t nbItem = sizeof(localizationDefs)/sizeof(LocalizationSwitcher::LocalizationDefinition);\r\n\tfor (size_t i = 0 ; i < nbItem ; ++i)\r\n\t{\r\n\t\tif (0 == wcsicmp(fn, localizationDefs[i]._xmlFileName))\r\n\t\t\treturn localizationDefs[i]._langName;\r\n\t}\r\n\treturn std::wstring();\r\n}\r\n\r\n\r\nstd::wstring LocalizationSwitcher::getXmlFilePathFromLangName(const wchar_t *langName) const\r\n{\r\n\tfor (size_t i = 0, len = _localizationList.size(); i < len ; ++i)\r\n\t{\r\n\t\tif (0 == wcsicmp(langName, _localizationList[i].first.c_str()))\r\n\t\t\treturn _localizationList[i].second;\r\n\t}\r\n\treturn std::wstring();\r\n}\r\n\r\n\r\nbool LocalizationSwitcher::addLanguageFromXml(const std::wstring& xmlFullPath)\r\n{\r\n\twchar_t * fn = ::PathFindFileNameW(xmlFullPath.c_str());\r\n\twstring foundLang = getLangFromXmlFileName(fn);\r\n\tif (!foundLang.empty())\r\n\t{\r\n\t\t_localizationList.push_back(pair<wstring, wstring>(foundLang, xmlFullPath));\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\nbool LocalizationSwitcher::switchToLang(const wchar_t *lang2switch) const\r\n{\r\n\twstring langPath = getXmlFilePathFromLangName(lang2switch);\r\n\tif (langPath.empty())\r\n\t\treturn false;\r\n\r\n\treturn ::CopyFileW(langPath.c_str(), _nativeLangPath.c_str(), FALSE) != FALSE;\r\n}\r\n\r\n\r\ngeneric_string ThemeSwitcher::getThemeFromXmlFileName(const TCHAR *xmlFullPath) const\r\n{\r\n\tif (!xmlFullPath || !xmlFullPath[0])\r\n\t\treturn generic_string();\r\n\tgeneric_string fn(::PathFindFileName(xmlFullPath));\r\n\tPathRemoveExtension(const_cast<TCHAR *>(fn.c_str()));\r\n\treturn fn;\r\n}\r\n\r\n\r\nwinVer NppParameters::getWindowsVersion()\r\n{\r\n\tOSVERSIONINFOEX osvi;\r\n\tSYSTEM_INFO si;\r\n\tPGNSI pGNSI;\r\n\r\n\tZeroMemory(&si, sizeof(SYSTEM_INFO));\r\n\tZeroMemory(&osvi, sizeof(OSVERSIONINFOEX));\r\n\r\n\tosvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);\r\n\tBOOL bOsVersionInfoEx = GetVersionEx ((OSVERSIONINFO *)&osvi);\r\n\tif (!bOsVersionInfoEx)\r\n\t{\r\n\t\tosvi.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);\r\n\t\tif (! GetVersionEx ( (OSVERSIONINFO *) &osvi) )\r\n\t\t\treturn WV_UNKNOWN;\r\n\t}\r\n\r\n\tpGNSI = (PGNSI) GetProcAddress(GetModuleHandle(TEXT(\"kernel32.dll\")), \"GetNativeSystemInfo\");\r\n\tif (pGNSI != NULL)\r\n\t\tpGNSI(&si);\r\n\telse\r\n\t\tGetSystemInfo(&si);\r\n\r\n\tswitch (si.wProcessorArchitecture)\r\n\t{\r\n\tcase PROCESSOR_ARCHITECTURE_IA64:\r\n\t\t_platForm = PF_IA64;\r\n\t\tbreak;\r\n\r\n\tcase PROCESSOR_ARCHITECTURE_AMD64:\r\n\t\t_platForm = PF_X64;\r\n\t\tbreak;\r\n\r\n\tcase PROCESSOR_ARCHITECTURE_INTEL:\r\n\t\t_platForm = PF_X86;\r\n\t\tbreak;\r\n\r\n\tcase PROCESSOR_ARCHITECTURE_ARM64:\r\n\t\t_platForm = PF_ARM64;\r\n\t\tbreak;\r\n\r\n\tdefault:\r\n\t\t_platForm = PF_UNKNOWN;\r\n\t}\r\n\r\n   switch (osvi.dwPlatformId)\r\n   {\r\n\t\tcase VER_PLATFORM_WIN32_NT:\r\n\t\t{\r\n\t\t\tif (osvi.dwMajorVersion == 10 && osvi.dwMinorVersion == 0)\r\n\t\t\t\treturn WV_WIN10;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 3)\r\n\t\t\t\treturn WV_WIN81;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 2)\r\n\t\t\t\treturn WV_WIN8;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 1)\r\n\t\t\t\treturn WV_WIN7;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 0)\r\n\t\t\t\treturn WV_VISTA;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 2)\r\n\t\t\t{\r\n\t\t\t\tif (osvi.wProductType == VER_NT_WORKSTATION && si.wProcessorArchitecture==PROCESSOR_ARCHITECTURE_AMD64)\r\n\t\t\t\t\treturn WV_XPX64;\r\n\t\t\t\treturn WV_S2003;\r\n\t\t\t}\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 1)\r\n\t\t\t\treturn WV_XP;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 0)\r\n\t\t\t\treturn WV_W2K;\r\n\r\n\t\t\tif (osvi.dwMajorVersion <= 4)\r\n\t\t\t\treturn WV_NT;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// Test for the Windows Me/98/95.\r\n\t\tcase VER_PLATFORM_WIN32_WINDOWS:\r\n\t\t{\r\n\t\t\tif (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 0)\r\n\t\t\t\treturn WV_95;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 10)\r\n\t\t\t\treturn WV_98;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 90)\r\n\t\t\t\treturn WV_ME;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tcase VER_PLATFORM_WIN32s:\r\n\t\t\treturn WV_WIN32S;\r\n\r\n\t\tdefault:\r\n\t\t\treturn WV_UNKNOWN;\r\n   }\r\n\r\n   return WV_UNKNOWN;\r\n}\r\n\r\n\r\nNppParameters::NppParameters()\r\n{\r\n\t//Get windows version\r\n\t_winVersion = getWindowsVersion();\r\n\r\n\t// Prepare for default path\r\n\tTCHAR nppPath[MAX_PATH];\r\n\t::GetModuleFileName(NULL, nppPath, MAX_PATH);\r\n\r\n\tPathRemoveFileSpec(nppPath);\r\n\t_nppPath = nppPath;\r\n\r\n\t//Initialize current directory to startup directory\r\n\tTCHAR curDir[MAX_PATH];\r\n\t::GetCurrentDirectory(MAX_PATH, curDir);\r\n\t_currentDirectory = curDir;\r\n\r\n\t_appdataNppDir.clear();\r\n\tgeneric_string notepadStylePath(_nppPath);\r\n\tpathAppend(notepadStylePath, notepadStyleFile);\r\n\r\n\t_asNotepadStyle = (PathFileExists(notepadStylePath.c_str()) == TRUE);\r\n\r\n\t//Load initial accelerator key definitions\r\n\tinitMenuKeys();\r\n\tinitScintillaKeys();\r\n}\r\n\r\n\r\nNppParameters::~NppParameters()\r\n{\r\n\tfor (int i = 0 ; i < _nbLang ; ++i)\r\n\t\tdelete _langList[i];\r\n\tfor (int i = 0 ; i < _nbRecentFile ; ++i)\r\n\t\tdelete _LRFileList[i];\r\n\tfor (int i = 0 ; i < _nbUserLang ; ++i)\r\n\t\tdelete _userLangArray[i];\r\n\tif (_hUXTheme)\r\n\t\tFreeLibrary(_hUXTheme);\r\n\r\n\tfor (std::vector<TiXmlDocument *>::iterator it = _pXmlExternalLexerDoc.begin(), end = _pXmlExternalLexerDoc.end(); it != end; ++it )\r\n\t\tdelete (*it);\r\n\r\n\t_pXmlExternalLexerDoc.clear();\r\n}\r\n\r\n\r\nbool NppParameters::reloadStylers(const TCHAR* stylePath)\r\n{\r\n\tdelete _pXmlUserStylerDoc;\r\n\r\n\tconst TCHAR* stylePathToLoad = stylePath != nullptr ? stylePath : _stylerPath.c_str();\r\n\t_pXmlUserStylerDoc = new TiXmlDocument(stylePathToLoad);\r\n\r\n\tbool loadOkay = _pXmlUserStylerDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tif (!_pNativeLangSpeaker)\r\n\t\t{\r\n\t\t\t::MessageBox(NULL, stylePathToLoad, TEXT(\"Load stylers.xml failed\"), MB_OK);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_pNativeLangSpeaker->messageBox(\"LoadStylersFailed\",\r\n\t\t\t\tNULL,\r\n\t\t\t\tTEXT(\"Load \\\"$STR_REPLACE$\\\" failed!\"),\r\n\t\t\t\tTEXT(\"Load stylers.xml failed\"),\r\n\t\t\t\tMB_OK,\r\n\t\t\t\t0,\r\n\t\t\t\tstylePathToLoad);\r\n\t\t}\r\n\t\tdelete _pXmlUserStylerDoc;\r\n\t\t_pXmlUserStylerDoc = NULL;\r\n\t\treturn false;\r\n\t}\r\n\t_lexerStylerVect.clear();\r\n\t_widgetStyleArray.clear();\r\n\r\n\tgetUserStylersFromXmlTree();\r\n\r\n\t//  Reload plugin styles.\r\n\tfor ( size_t i = 0; i < getExternalLexerDoc()->size(); ++i)\r\n\t{\r\n\t\tgetExternalLexerFromXmlTree( getExternalLexerDoc()->at(i) );\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::reloadLang()\r\n{\r\n\t// use user path\r\n\tgeneric_string nativeLangPath(_localizationSwitcher._nativeLangPath);\r\n\r\n\t// if \"nativeLang.xml\" does not exist, use npp path\r\n\tif (!PathFileExists(nativeLangPath.c_str()))\r\n\t{\r\n\t\tnativeLangPath = _nppPath;\r\n\t\tpathAppend(nativeLangPath, generic_string(TEXT(\"nativeLang.xml\")));\r\n\t\tif (!PathFileExists(nativeLangPath.c_str()))\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\tdelete _pXmlNativeLangDocA;\r\n\r\n\t_pXmlNativeLangDocA = new TiXmlDocumentA();\r\n\r\n\tbool loadOkay = _pXmlNativeLangDocA->LoadUnicodeFilePath(nativeLangPath.c_str());\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlNativeLangDocA;\r\n\t\t_pXmlNativeLangDocA = nullptr;\r\n\t\treturn false;\r\n\t}\r\n\treturn loadOkay;\r\n}\r\n\r\ngeneric_string NppParameters::getSpecialFolderLocation(int folderKind)\r\n{\r\n\tTCHAR path[MAX_PATH];\r\n\tconst HRESULT specialLocationResult = SHGetFolderPath(nullptr, folderKind, nullptr, SHGFP_TYPE_CURRENT, path);\r\n\r\n\tgeneric_string result;\r\n\tif (SUCCEEDED(specialLocationResult))\r\n\t{\r\n\t\tresult = path;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\ngeneric_string NppParameters::getSettingsFolder()\r\n{\r\n\tif (_isLocal)\r\n\t\treturn _nppPath;\r\n\r\n\tgeneric_string settingsFolderPath = getSpecialFolderLocation(CSIDL_APPDATA);\r\n\r\n\tif (settingsFolderPath.empty())\r\n\t\treturn _nppPath;\r\n\r\n\tpathAppend(settingsFolderPath, TEXT(\"Notepad++\"));\r\n\treturn settingsFolderPath;\r\n}\r\n\r\n\r\nbool NppParameters::load()\r\n{\r\n\tL_END = L_EXTERNAL;\r\n\tbool isAllLaoded = true;\r\n\r\n\t_isx64 = sizeof(void *) == 8;\r\n\r\n\t// Make localConf.xml path\r\n\tgeneric_string localConfPath(_nppPath);\r\n\tpathAppend(localConfPath, localConfFile);\r\n\r\n\t// Test if localConf.xml exist\r\n\t_isLocal = (PathFileExists(localConfPath.c_str()) == TRUE);\r\n\r\n\t// Under vista and windows 7, the usage of doLocalConf.xml is not allowed\r\n\t// if Notepad++ is installed in \"program files\" directory, because of UAC\r\n\tif (_isLocal)\r\n\t{\r\n\t\t// We check if OS is Vista or greater version\r\n\t\tif (_winVersion >= WV_VISTA)\r\n\t\t{\r\n\t\t\tgeneric_string progPath = getSpecialFolderLocation(CSIDL_PROGRAM_FILES);\r\n\t\t\tTCHAR nppDirLocation[MAX_PATH];\r\n\t\t\twcscpy_s(nppDirLocation, _nppPath.c_str());\r\n\t\t\t::PathRemoveFileSpec(nppDirLocation);\r\n\r\n\t\t\tif  (progPath == nppDirLocation)\r\n\t\t\t\t_isLocal = false;\r\n\t\t}\r\n\t}\r\n\r\n\t_pluginRootDir = _nppPath;\r\n\tpathAppend(_pluginRootDir, TEXT(\"plugins\"));\r\n\r\n\t//\r\n\t// the 3rd priority: general default configuration\r\n\t//\r\n\tgeneric_string nppPluginRootParent;\r\n\tif (_isLocal)\r\n\t{\r\n\t\t_userPath = nppPluginRootParent = _nppPath;\r\n\t\t_userPluginConfDir = _pluginRootDir;\r\n\t\tpathAppend(_userPluginConfDir, TEXT(\"Config\"));\r\n\t}\r\n\telse\r\n\t{\r\n\t\t_userPath = getSpecialFolderLocation(CSIDL_APPDATA);\r\n\r\n\t\tpathAppend(_userPath, TEXT(\"Notepad++\"));\r\n\t\tif (!PathFileExists(_userPath.c_str()))\r\n\t\t\t::CreateDirectory(_userPath.c_str(), NULL);\r\n\r\n\t\t_appdataNppDir = _userPluginConfDir = _userPath;\r\n\t\tpathAppend(_userPluginConfDir, TEXT(\"plugins\"));\r\n\t\tif (!PathFileExists(_userPluginConfDir.c_str()))\r\n\t\t\t::CreateDirectory(_userPluginConfDir.c_str(), NULL);\r\n\t\tpathAppend(_userPluginConfDir, TEXT(\"Config\"));\r\n\t\tif (!PathFileExists(_userPluginConfDir.c_str()))\r\n\t\t\t::CreateDirectory(_userPluginConfDir.c_str(), NULL);\r\n\r\n\t\t// For PluginAdmin to launch the wingup with UAC\r\n\t\tsetElevationRequired(true);\r\n\t}\r\n\r\n\t_pluginConfDir = _pluginRootDir; // for plugin list home\r\n\tpathAppend(_pluginConfDir, TEXT(\"Config\"));\r\n\r\n\tif (!PathFileExists(nppPluginRootParent.c_str()))\r\n\t\t::CreateDirectory(nppPluginRootParent.c_str(), NULL);\r\n\tif (!PathFileExists(_pluginRootDir.c_str()))\r\n\t\t::CreateDirectory(_pluginRootDir.c_str(), NULL);\r\n\r\n\t_sessionPath = _userPath; // Session stock the absolute file path, it should never be on cloud\r\n\r\n\t// Detection cloud settings\r\n\tgeneric_string cloudChoicePath{_userPath};\r\n\tcloudChoicePath += TEXT(\"\\\\cloud\\\\choice\");\r\n\r\n\t//\r\n\t// the 2nd priority: cloud Choice Path\r\n\t//\r\n\tif (::PathFileExists(cloudChoicePath.c_str()))\r\n\t{\r\n\t\t// Read cloud choice\r\n\t\tstd::string cloudChoiceStr = getFileContent(cloudChoicePath.c_str());\r\n\t\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\t\tstd::wstring cloudChoiceStrW = wmc.char2wchar(cloudChoiceStr.c_str(), SC_CP_UTF8);\r\n\r\n\t\tif (!cloudChoiceStrW.empty() && ::PathFileExists(cloudChoiceStrW.c_str()))\r\n\t\t{\r\n\t\t\t_userPath = cloudChoiceStrW;\r\n\t\t\t_nppGUI._cloudPath = cloudChoiceStrW;\r\n\t\t\t_initialCloudChoice = _nppGUI._cloudPath;\r\n\t\t}\r\n\t}\r\n\r\n\t//\r\n\t// the 1st priority: custom settings dir via command line argument\r\n\t//\r\n\tif (!_cmdSettingsDir.empty())\r\n\t{\r\n\t\tif (!::PathIsDirectory(_cmdSettingsDir.c_str()))\r\n\t\t{\r\n\t\t\t// The following text is not translatable.\r\n\t\t\t// _pNativeLangSpeaker is initialized AFTER _userPath being dterminated because nativeLang.xml is from from _userPath.\r\n\t\t\tgeneric_string errMsg = TEXT(\"The given path\\r\");\r\n\t\t\terrMsg += _cmdSettingsDir;\r\n\t\t\terrMsg += TEXT(\"\\nvia command line \\\"-settingsDir=\\\" is not a valid directory.\\rThis argument will be ignored.\");\r\n\t\t\t::MessageBox(NULL, errMsg.c_str(), TEXT(\"Invalid directory\"), MB_OK);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_userPath = _cmdSettingsDir;\r\n\t\t\t_sessionPath = _userPath; // reset session path\r\n\t\t}\r\n\t}\r\n\r\n\t//-------------------------------------//\r\n\t// Transparent function for w2k and xp //\r\n\t//-------------------------------------//\r\n\tHMODULE hUser32 = ::GetModuleHandle(TEXT(\"User32\"));\r\n\tif (hUser32)\r\n\t\t_transparentFuncAddr = (WNDPROC)::GetProcAddress(hUser32, \"SetLayeredWindowAttributes\");\r\n\r\n\t//---------------------------------------------//\r\n\t// Dlg theme texture function for xp and vista //\r\n\t//---------------------------------------------//\r\n\t_hUXTheme = ::LoadLibrary(TEXT(\"uxtheme.dll\"));\r\n\tif (_hUXTheme)\r\n\t\t_enableThemeDialogTextureFuncAddr = (WNDPROC)::GetProcAddress(_hUXTheme, \"EnableThemeDialogTexture\");\r\n\r\n\t//--------------------------//\r\n\t// langs.xml : for per user //\r\n\t//--------------------------//\r\n\tgeneric_string langs_xml_path(_userPath);\r\n\tpathAppend(langs_xml_path, TEXT(\"langs.xml\"));\r\n\r\n\tBOOL doRecover = FALSE;\r\n\tif (::PathFileExists(langs_xml_path.c_str()))\r\n\t{\r\n\t\tWIN32_FILE_ATTRIBUTE_DATA attributes;\r\n\r\n\t\tif (GetFileAttributesEx(langs_xml_path.c_str(), GetFileExInfoStandard, &attributes) != 0)\r\n\t\t{\r\n\t\t\tif (attributes.nFileSizeLow == 0 && attributes.nFileSizeHigh == 0)\r\n\t\t\t{\r\n\t\t\t\tif (_pNativeLangSpeaker)\r\n\t\t\t\t{\r\n\t\t\t\t\tdoRecover = _pNativeLangSpeaker->messageBox(\"LoadLangsFailed\",\r\n\t\t\t\t\t\tNULL,\r\n\t\t\t\t\t\tTEXT(\"Load langs.xml failed!\\rDo you want to recover your langs.xml?\"),\r\n\t\t\t\t\t\tTEXT(\"Configurator\"),\r\n\t\t\t\t\t\tMB_YESNO);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdoRecover = ::MessageBox(NULL, TEXT(\"Load langs.xml failed!\\rDo you want to recover your langs.xml?\"), TEXT(\"Configurator\"), MB_YESNO);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t\tdoRecover = true;\r\n\r\n\tif (doRecover)\r\n\t{\r\n\t\tgeneric_string srcLangsPath(_nppPath);\r\n\t\tpathAppend(srcLangsPath, TEXT(\"langs.model.xml\"));\r\n\t\t::CopyFile(srcLangsPath.c_str(), langs_xml_path.c_str(), FALSE);\r\n\t}\r\n\r\n\t_pXmlDoc = new TiXmlDocument(langs_xml_path);\r\n\r\n\r\n\tbool loadOkay = _pXmlDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tif (_pNativeLangSpeaker)\r\n\t\t{\r\n\t\t\t_pNativeLangSpeaker->messageBox(\"LoadLangsFailedFinal\",\r\n\t\t\t\tNULL,\r\n\t\t\t\tTEXT(\"Load langs.xml failed!\"),\r\n\t\t\t\tTEXT(\"Configurator\"),\r\n\t\t\t\tMB_OK);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t::MessageBox(NULL, TEXT(\"Load langs.xml failed!\"), TEXT(\"Configurator\"), MB_OK);\r\n\t\t}\r\n\r\n\t\tdelete _pXmlDoc;\r\n\t\t_pXmlDoc = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\telse\r\n\t\tgetLangKeywordsFromXmlTree();\r\n\r\n\t//---------------------------//\r\n\t// config.xml : for per user //\r\n\t//---------------------------//\r\n\tgeneric_string configPath(_userPath);\r\n\tpathAppend(configPath, TEXT(\"config.xml\"));\r\n\r\n\tgeneric_string srcConfigPath(_nppPath);\r\n\tpathAppend(srcConfigPath, TEXT(\"config.model.xml\"));\r\n\r\n\tif (!::PathFileExists(configPath.c_str()))\r\n\t\t::CopyFile(srcConfigPath.c_str(), configPath.c_str(), FALSE);\r\n\r\n\t_pXmlUserDoc = new TiXmlDocument(configPath);\r\n\tloadOkay = _pXmlUserDoc->LoadFile();\r\n\t\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tTiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));\r\n\t\t_pXmlUserDoc->LinkEndChild(decl);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tgetUserParametersFromXmlTree();\r\n\t}\r\n\r\n\t//----------------------------//\r\n\t// stylers.xml : for per user //\r\n\t//----------------------------//\r\n\r\n\t_stylerPath = _userPath;\r\n\tpathAppend(_stylerPath, TEXT(\"stylers.xml\"));\r\n\r\n\tif (!PathFileExists(_stylerPath.c_str()))\r\n\t{\r\n\t\tgeneric_string srcStylersPath(_nppPath);\r\n\t\tpathAppend(srcStylersPath, TEXT(\"stylers.model.xml\"));\r\n\r\n\t\t::CopyFile(srcStylersPath.c_str(), _stylerPath.c_str(), TRUE);\r\n\t}\r\n\r\n\tif (_nppGUI._themeName.empty() || (!PathFileExists(_nppGUI._themeName.c_str())))\r\n\t\t_nppGUI._themeName.assign(_stylerPath);\r\n\r\n\t_pXmlUserStylerDoc = new TiXmlDocument(_nppGUI._themeName.c_str());\r\n\r\n\tloadOkay = _pXmlUserStylerDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tif (_pNativeLangSpeaker)\r\n\t\t{\r\n\t\t\t_pNativeLangSpeaker->messageBox(\"LoadStylersFailed\",\r\n\t\t\t\tNULL,\r\n\t\t\t\tTEXT(\"Load \\\"$STR_REPLACE$\\\" failed!\"),\r\n\t\t\t\tTEXT(\"Load stylers.xml failed\"),\r\n\t\t\t\tMB_OK,\r\n\t\t\t\t0,\r\n\t\t\t\t_stylerPath.c_str());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t::MessageBox(NULL, _stylerPath.c_str(), TEXT(\"Load stylers.xml failed\"), MB_OK);\r\n\t\t}\r\n\t\tdelete _pXmlUserStylerDoc;\r\n\t\t_pXmlUserStylerDoc = NULL;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\telse\r\n\t\tgetUserStylersFromXmlTree();\r\n\r\n\t_themeSwitcher._stylesXmlPath = _stylerPath;\r\n\t// Firstly, add the default theme\r\n\t_themeSwitcher.addDefaultThemeFromXml(_stylerPath);\r\n\r\n\t//-----------------------------------//\r\n\t// userDefineLang.xml : for per user //\r\n\t//-----------------------------------//\r\n\t_userDefineLangsFolderPath = _userDefineLangPath = _userPath;\r\n\tpathAppend(_userDefineLangPath, TEXT(\"userDefineLang.xml\"));\r\n\tpathAppend(_userDefineLangsFolderPath, TEXT(\"userDefineLangs\"));\r\n\r\n\tstd::vector<generic_string> udlFiles;\r\n\tgetFilesInFolder(udlFiles, TEXT(\"*.xml\"), _userDefineLangsFolderPath);\r\n\r\n\t_pXmlUserLangDoc = new TiXmlDocument(_userDefineLangPath);\r\n\tloadOkay = _pXmlUserLangDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlUserLangDoc;\r\n\t\t_pXmlUserLangDoc = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tauto r = addUserDefineLangsFromXmlTree(_pXmlUserLangDoc);\r\n\t\tif (r.second - r.first > 0)\r\n\t\t\t_pXmlUserLangsDoc.push_back(UdlXmlFileState(_pXmlUserLangDoc, false, r));\r\n\t}\r\n\r\n\tfor (const auto& i : udlFiles)\r\n\t{\r\n\t\tauto udlDoc = new TiXmlDocument(i);\r\n\t\tloadOkay = udlDoc->LoadFile();\r\n\t\tif (!loadOkay)\r\n\t\t{\r\n\t\t\tdelete udlDoc;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tauto r = addUserDefineLangsFromXmlTree(udlDoc);\r\n\t\t\tif (r.second - r.first > 0)\r\n\t\t\t\t_pXmlUserLangsDoc.push_back(UdlXmlFileState(udlDoc, false, r));\r\n\t\t}\r\n\t}\r\n\r\n\t//----------------------------------------------//\r\n\t// nativeLang.xml : for per user\t\t\t\t//\r\n\t// In case of absence of user's nativeLang.xml, //\r\n\t// We'll look in the Notepad++ Dir.\t\t\t //\r\n\t//----------------------------------------------//\r\n\r\n\tgeneric_string nativeLangPath;\r\n\tnativeLangPath = _userPath;\r\n\tpathAppend(nativeLangPath, TEXT(\"nativeLang.xml\"));\r\n\r\n\t// LocalizationSwitcher should use always user path\r\n\t_localizationSwitcher._nativeLangPath = nativeLangPath;\r\n\r\n\tif (!_startWithLocFileName.empty()) // localization argument detected, use user wished localization\r\n\t{\r\n\t\t// overwrite nativeLangPath variable\r\n\t\tnativeLangPath = _nppPath;\r\n\t\tpathAppend(nativeLangPath, TEXT(\"localization\\\\\"));\r\n\t\tpathAppend(nativeLangPath, _startWithLocFileName);\r\n\t}\r\n\telse // use %appdata% location, or (if absence then) npp installed location\r\n\t{\r\n\t\tif (!PathFileExists(nativeLangPath.c_str()))\r\n\t\t{\r\n\t\t\tnativeLangPath = _nppPath;\r\n\t\t\tpathAppend(nativeLangPath, TEXT(\"nativeLang.xml\"));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t_pXmlNativeLangDocA = new TiXmlDocumentA();\r\n\r\n\tloadOkay = _pXmlNativeLangDocA->LoadUnicodeFilePath(nativeLangPath.c_str());\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlNativeLangDocA;\r\n\t\t_pXmlNativeLangDocA = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\r\n\t//---------------------------------//\r\n\t// toolbarIcons.xml : for per user //\r\n\t//---------------------------------//\r\n\tgeneric_string toolbarIconsPath(_userPath);\r\n\tpathAppend(toolbarIconsPath, TEXT(\"toolbarIcons.xml\"));\r\n\r\n\t_pXmlToolIconsDoc = new TiXmlDocument(toolbarIconsPath);\r\n\tloadOkay = _pXmlToolIconsDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlToolIconsDoc;\r\n\t\t_pXmlToolIconsDoc = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\r\n\t//------------------------------//\r\n\t// shortcuts.xml : for per user //\r\n\t//------------------------------//\r\n\t_shortcutsPath = _userPath;\r\n\tpathAppend(_shortcutsPath, TEXT(\"shortcuts.xml\"));\r\n\r\n\tif (!PathFileExists(_shortcutsPath.c_str()))\r\n\t{\r\n\t\tgeneric_string srcShortcutsPath(_nppPath);\r\n\t\tpathAppend(srcShortcutsPath, TEXT(\"shortcuts.xml\"));\r\n\r\n\t\t::CopyFile(srcShortcutsPath.c_str(), _shortcutsPath.c_str(), TRUE);\r\n\t}\r\n\r\n\t_pXmlShortcutDoc = new TiXmlDocument(_shortcutsPath);\r\n\tloadOkay = _pXmlShortcutDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlShortcutDoc;\r\n\t\t_pXmlShortcutDoc = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tgetShortcutsFromXmlTree();\r\n\t\tgetMacrosFromXmlTree();\r\n\t\tgetUserCmdsFromXmlTree();\r\n\r\n\t\t// fill out _scintillaModifiedKeys :\r\n\t\t// those user defined Scintilla key will be used remap Scintilla Key Array\r\n\t\tgetScintKeysFromXmlTree();\r\n\t}\r\n\r\n\t//---------------------------------//\r\n\t// contextMenu.xml : for per user //\r\n\t//---------------------------------//\r\n\t_contextMenuPath = _userPath;\r\n\tpathAppend(_contextMenuPath, TEXT(\"contextMenu.xml\"));\r\n\r\n\tif (!PathFileExists(_contextMenuPath.c_str()))\r\n\t{\r\n\t\tgeneric_string srcContextMenuPath(_nppPath);\r\n\t\tpathAppend(srcContextMenuPath, TEXT(\"contextMenu.xml\"));\r\n\r\n\t\t::CopyFile(srcContextMenuPath.c_str(), _contextMenuPath.c_str(), TRUE);\r\n\t}\r\n\r\n\t_pXmlContextMenuDocA = new TiXmlDocumentA();\r\n\tloadOkay = _pXmlContextMenuDocA->LoadUnicodeFilePath(_contextMenuPath.c_str());\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlContextMenuDocA;\r\n\t\t_pXmlContextMenuDocA = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\r\n\t//----------------------------//\r\n\t// session.xml : for per user //\r\n\t//----------------------------//\r\n\r\n\tpathAppend(_sessionPath, TEXT(\"session.xml\"));\r\n\r\n\t// Don't load session.xml if not required in order to speed up!!\r\n\tconst NppGUI & nppGUI = (NppParameters::getInstance()).getNppGUI();\r\n\tif (nppGUI._rememberLastSession)\r\n\t{\r\n\t\tTiXmlDocument* pXmlSessionDoc = new TiXmlDocument(_sessionPath);\r\n\r\n\t\tloadOkay = pXmlSessionDoc->LoadFile();\r\n\t\tif (!loadOkay)\r\n\t\t\tisAllLaoded = false;\r\n\t\telse\r\n\t\t\tgetSessionFromXmlTree(pXmlSessionDoc, _session);\r\n\r\n\t\tdelete pXmlSessionDoc;\r\n\r\n\t\tfor (size_t i = 0, len = _pXmlExternalLexerDoc.size() ; i < len ; ++i)\r\n\t\t\tif (_pXmlExternalLexerDoc[i])\r\n\t\t\t\tdelete _pXmlExternalLexerDoc[i];\r\n\t}\r\n\r\n\t//-------------------------------------------------------------//\r\n\t// enableSelectFgColor.xml : for per user                      //\r\n\t// This empty xml file is optional - user adds this empty file //\r\n\t// manually in order to set selected text's foreground color.  //\r\n\t//-------------------------------------------------------------//\r\n\tgeneric_string enableSelectFgColorPath = _userPath;\r\n\tpathAppend(enableSelectFgColorPath, TEXT(\"enableSelectFgColor.xml\"));\r\n\r\n\tif (PathFileExists(enableSelectFgColorPath.c_str()))\r\n\t{\r\n\t\t_isSelectFgColorEnabled = true;\r\n\t}\r\n\r\n\r\n\tgeneric_string filePath, filePath2, issueFileName;\r\n\r\n\tfilePath = _nppPath;\r\n\tissueFileName = nppLogNetworkDriveIssue;\r\n\tissueFileName += TEXT(\".xml\");\r\n\tpathAppend(filePath, issueFileName);\r\n\t_doNppLogNetworkDriveIssue = (PathFileExists(filePath.c_str()) == TRUE);\r\n\tif (!_doNppLogNetworkDriveIssue)\r\n\t{\r\n\t\tfilePath2 = _userPath;\r\n\t\tpathAppend(filePath2, issueFileName);\r\n\t\t_doNppLogNetworkDriveIssue = (PathFileExists(filePath2.c_str()) == TRUE);\r\n\t}\r\n\r\n\tfilePath = _nppPath;\r\n\tissueFileName = nppLogNulContentCorruptionIssue;\r\n\tissueFileName += TEXT(\".xml\");\r\n\tpathAppend(filePath, issueFileName);\r\n\t_doNppLogNulContentCorruptionIssue = (PathFileExists(filePath.c_str()) == TRUE);\r\n\tif (!_doNppLogNulContentCorruptionIssue)\r\n\t{\r\n\t\tfilePath2 = _userPath;\r\n\t\tpathAppend(filePath2, issueFileName);\r\n\t\t_doNppLogNulContentCorruptionIssue = (PathFileExists(filePath2.c_str()) == TRUE);\r\n\t}\r\n\r\n\r\n\r\n\r\n\treturn isAllLaoded;\r\n}\r\n\r\n\r\nvoid NppParameters::destroyInstance()\r\n{\r\n\tdelete _pXmlDoc;\r\n\tdelete _pXmlUserDoc;\r\n\tdelete _pXmlUserStylerDoc;\r\n\t\r\n\t//delete _pXmlUserLangDoc; will be deleted in the vector\r\n\tfor (auto l : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tdelete l._udlXmlDoc;\r\n\t}\r\n\r\n\tdelete _pXmlNativeLangDocA;\r\n\tdelete _pXmlToolIconsDoc;\r\n\tdelete _pXmlShortcutDoc;\r\n\tdelete _pXmlContextMenuDocA;\r\n\tdelete _pXmlBlacklistDoc;\r\n\tdelete \tgetInstancePointer();\r\n}\r\n\r\n\r\nvoid NppParameters::saveConfig_xml()\r\n{\r\n\tif (_pXmlUserDoc)\r\n\t\t_pXmlUserDoc->SaveFile();\r\n}\r\n\r\n\r\nvoid NppParameters::setWorkSpaceFilePath(int i, const TCHAR* wsFile)\r\n{\r\n\tif (i < 0 || i > 2 || !wsFile)\r\n\t\treturn;\r\n\t_workSpaceFilePathes[i] = wsFile;\r\n}\r\n\r\n\r\nvoid NppParameters::removeTransparent(HWND hwnd)\r\n{\r\n\tif (hwnd != NULL)\r\n\t\t::SetWindowLongPtr(hwnd, GWL_EXSTYLE,  ::GetWindowLongPtr(hwnd, GWL_EXSTYLE) & ~0x00080000);\r\n}\r\n\r\n\r\nvoid NppParameters::SetTransparent(HWND hwnd, int percent)\r\n{\r\n\tif (nullptr != _transparentFuncAddr)\r\n\t{\r\n\t\t::SetWindowLongPtr(hwnd, GWL_EXSTYLE, ::GetWindowLongPtr(hwnd, GWL_EXSTYLE) | 0x00080000);\r\n\t\tif (percent > 255)\r\n\t\t\tpercent = 255;\r\n\t\tif (percent < 0)\r\n\t\t\tpercent = 0;\r\n\t\t_transparentFuncAddr(hwnd, 0, percent, 0x00000002);\r\n\t}\r\n}\r\n\r\n\r\nbool NppParameters::isExistingExternalLangName(const char* newName) const\r\n{\r\n\tif ((!newName) || (!newName[0]))\r\n\t\treturn true;\r\n\r\n\tfor (int i = 0 ; i < _nbExternalLang ; ++i)\r\n\t{\r\n\t\tif (_externalLangArray[i]->_name == newName)\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\nconst TCHAR* NppParameters::getUserDefinedLangNameFromExt(TCHAR *ext, TCHAR *fullName) const\r\n{\r\n\tif ((!ext) || (!ext[0]))\r\n\t\treturn nullptr;\r\n\r\n\tstd::vector<generic_string> extVect;\r\n\tint iMatched = -1;\r\n\tfor (int i = 0 ; i < _nbUserLang ; ++i)\r\n\t{\r\n\t\textVect.clear();\r\n\t\tcutString(_userLangArray[i]->_ext.c_str(), extVect);\r\n\r\n\t\t// Force to use dark mode UDL in dark mode or to use  light mode UDL in light mode\r\n\t\tfor (size_t j = 0, len = extVect.size(); j < len; ++j)\r\n\t\t{\r\n\t\t\tif (!generic_stricmp(extVect[j].c_str(), ext) || (_tcschr(fullName, '.') && !generic_stricmp(extVect[j].c_str(), fullName)))\r\n\t\t\t{\r\n\t\t\t\t// preserve ext matched UDL\r\n\t\t\t\tiMatched = i;\r\n\r\n\t\t\t\tif (((NppDarkMode::isEnabled() && _userLangArray[i]->_isDarkModeTheme)) ||\r\n\t\t\t\t\t((!NppDarkMode::isEnabled() && !_userLangArray[i]->_isDarkModeTheme)))\r\n\t\t\t\t\treturn _userLangArray[i]->_name.c_str();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// In case that we are in dark mode but no dark UDL or we are in light mode but no light UDL\r\n\t// We use it anyway\r\n\tif (iMatched >= 0)\r\n\t{\r\n\t\treturn _userLangArray[iMatched]->_name.c_str();\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\n\r\nint NppParameters::getExternalLangIndexFromName(const TCHAR* externalLangName) const\r\n{\r\n\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\tfor (int i = 0 ; i < _nbExternalLang ; ++i)\r\n\t{\r\n\t\tif (!lstrcmp(externalLangName, wmc.char2wchar(_externalLangArray[i]->_name.c_str(), CP_ACP)))\r\n\t\t\treturn i;\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n\r\nUserLangContainer* NppParameters::getULCFromName(const TCHAR *userLangName)\r\n{\r\n\tfor (int i = 0 ; i < _nbUserLang ; ++i)\r\n\t{\r\n\t\tif (0 == lstrcmp(userLangName, _userLangArray[i]->_name.c_str()))\r\n\t\t\treturn _userLangArray[i];\r\n\t}\r\n\r\n\t//qui doit etre jamais passer\r\n\treturn nullptr;\r\n}\r\n\r\n\r\nCOLORREF NppParameters::getCurLineHilitingColour()\r\n{\r\n\tconst Style * pStyle = _widgetStyleArray.findByName(TEXT(\"Current line background colour\"));\r\n\tif (!pStyle)\r\n\t\treturn COLORREF(-1);\r\n\treturn pStyle->_bgColor;\r\n}\r\n\r\n\r\nvoid NppParameters::setCurLineHilitingColour(COLORREF colour2Set)\r\n{\r\n\tStyle * pStyle = _widgetStyleArray.findByName(TEXT(\"Current line background colour\"));\r\n\tif (!pStyle)\r\n\t\treturn;\r\n\tpStyle->_bgColor = colour2Set;\r\n}\r\n\r\n\r\n\r\nstatic int CALLBACK EnumFontFamExProc(const LOGFONT* lpelfe, const TEXTMETRIC*, DWORD, LPARAM lParam)\r\n{\r\n\tstd::vector<generic_string>& strVect = *(std::vector<generic_string> *)lParam;\r\n\tconst int32_t vectSize = static_cast<int32_t>(strVect.size());\r\n\tconst TCHAR* lfFaceName = ((ENUMLOGFONTEX*)lpelfe)->elfLogFont.lfFaceName;\r\n\r\n\t//Search through all the fonts, EnumFontFamiliesEx never states anything about order\r\n\t//Start at the end though, that's the most likely place to find a duplicate\r\n\tfor (int i = vectSize - 1 ; i >= 0 ; i--)\r\n\t{\r\n\t\tif (0 == lstrcmp(strVect[i].c_str(), lfFaceName))\r\n\t\t\treturn 1;\t//we already have seen this typeface, ignore it\r\n\t}\r\n\r\n\t//We can add the font\r\n\t//Add the face name and not the full name, we do not care about any styles\r\n\tstrVect.push_back(lfFaceName);\r\n\treturn 1; // I want to get all fonts\r\n}\r\n\r\n\r\nvoid NppParameters::setFontList(HWND hWnd)\r\n{\r\n\t//---------------//\r\n\t// Sys font list //\r\n\t//---------------//\r\n\tLOGFONT lf;\r\n\t_fontlist.clear();\r\n\t_fontlist.reserve(64); // arbitrary\r\n\t_fontlist.push_back(generic_string());\r\n\r\n\tlf.lfCharSet = DEFAULT_CHARSET;\r\n\tlf.lfFaceName[0]='\\0';\r\n\tlf.lfPitchAndFamily = 0;\r\n\tHDC hDC = ::GetDC(hWnd);\r\n\t::EnumFontFamiliesEx(hDC, &lf, EnumFontFamExProc, reinterpret_cast<LPARAM>(&_fontlist), 0);\r\n}\r\n\r\nbool NppParameters::isInFontList(const generic_string& fontName2Search) const\r\n{\r\n\tif (fontName2Search.empty())\r\n\t\treturn false;\r\n\r\n\tfor (size_t i = 0, len = _fontlist.size(); i < len; i++)\r\n\t{\r\n\t\tif (_fontlist[i] == fontName2Search)\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nHFONT NppParameters::getDefaultUIFont()\r\n{\r\n\tstatic HFONT g_defaultMessageFont = []() {\r\n\t\tNONCLIENTMETRICS ncm = { sizeof(ncm) };\r\n\t\tSystemParametersInfo(SPI_GETNONCLIENTMETRICS, sizeof(ncm), &ncm, 0);\r\n\r\n\t\treturn CreateFontIndirect(&ncm.lfMessageFont);\r\n\t}();\r\n\treturn g_defaultMessageFont;\r\n}\r\n\r\nvoid NppParameters::getLangKeywordsFromXmlTree()\r\n{\r\n\tTiXmlNode *root =\r\n\t\t_pXmlDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\tif (!root) return;\r\n\tfeedKeyWordsParameters(root);\r\n}\r\n\r\n\r\nvoid NppParameters::getExternalLexerFromXmlTree(TiXmlDocument* externalLexerDoc)\r\n{\r\n\tTiXmlNode *root = externalLexerDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\tif (!root) return;\r\n\tfeedKeyWordsParameters(root);\r\n\tfeedStylerArray(root);\r\n}\r\n\r\n\r\nint NppParameters::addExternalLangToEnd(ExternalLangContainer * externalLang)\r\n{\r\n\t_externalLangArray[_nbExternalLang] = externalLang;\r\n\t++_nbExternalLang;\r\n\t++L_END;\r\n\treturn _nbExternalLang-1;\r\n}\r\n\r\n\r\nbool NppParameters::getUserStylersFromXmlTree()\r\n{\r\n\tTiXmlNode *root = _pXmlUserStylerDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\tif (!root) return false;\r\n\treturn feedStylerArray(root);\r\n}\r\n\r\n\r\nbool NppParameters::getUserParametersFromXmlTree()\r\n{\r\n\tif (!_pXmlUserDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\t// Get GUI parameters\r\n\tfeedGUIParameters(root);\r\n\r\n\t// Get History parameters\r\n\tfeedFileListParameters(root);\r\n\r\n\t// Erase the History root\r\n\tTiXmlNode *node = root->FirstChildElement(TEXT(\"History\"));\r\n\troot->RemoveChild(node);\r\n\r\n\t// Add a new empty History root\r\n\tTiXmlElement HistoryNode(TEXT(\"History\"));\r\n\troot->InsertEndChild(HistoryNode);\r\n\r\n\t//Get Find history parameters\r\n\tfeedFindHistoryParameters(root);\r\n\r\n\t//Get Project Panel parameters\r\n\tfeedProjectPanelsParameters(root);\r\n\r\n\t//Get File browser parameters\r\n\tfeedFileBrowserParameters(root);\r\n\r\n\treturn true;\r\n}\r\n\r\n\r\nstd::pair<unsigned char, unsigned char> NppParameters::addUserDefineLangsFromXmlTree(TiXmlDocument *tixmldoc)\r\n{\r\n\tif (!tixmldoc)\r\n\t\treturn std::make_pair(static_cast<unsigned char>(0), static_cast<unsigned char>(0));\r\n\r\n\tTiXmlNode *root = tixmldoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn std::make_pair(static_cast<unsigned char>(0), static_cast<unsigned char>(0));\r\n\r\n\treturn feedUserLang(root);\r\n}\r\n\r\n\r\n\r\nbool NppParameters::getShortcutsFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedShortcut(root);\r\n\treturn true;\r\n}\r\n\r\n\r\nbool NppParameters::getMacrosFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedMacros(root);\r\n\treturn true;\r\n}\r\n\r\n\r\nbool NppParameters::getUserCmdsFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedUserCmds(root);\r\n\treturn true;\r\n}\r\n\r\n\r\nbool NppParameters::getPluginCmdsFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedPluginCustomizedCmds(root);\r\n\treturn true;\r\n}\r\n\r\n\r\nbool NppParameters::getScintKeysFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedScintKeys(root);\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::getBlackListFromXmlTree()\r\n{\r\n\tif (!_pXmlBlacklistDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlBlacklistDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\treturn feedBlacklist(root);\r\n}\r\n\r\nvoid NppParameters::initMenuKeys()\r\n{\r\n\tint nbCommands = sizeof(winKeyDefs)/sizeof(WinMenuKeyDefinition);\r\n\tWinMenuKeyDefinition wkd;\r\n\tfor (int i = 0; i < nbCommands; ++i)\r\n\t{\r\n\t\twkd = winKeyDefs[i];\r\n\t\tShortcut sc((wkd.specialName ? wkd.specialName : TEXT(\"\")), wkd.isCtrl, wkd.isAlt, wkd.isShift, static_cast<unsigned char>(wkd.vKey));\r\n\t\t_shortcuts.push_back( CommandShortcut(sc, wkd.functionId) );\r\n\t}\r\n}\r\n\r\nvoid NppParameters::initScintillaKeys()\r\n{\r\n\tint nbCommands = sizeof(scintKeyDefs)/sizeof(ScintillaKeyDefinition);\r\n\r\n\t//Warning! Matching function have to be consecutive\r\n\tScintillaKeyDefinition skd;\r\n\tint prevIndex = -1;\r\n\tint prevID = -1;\r\n\tfor (int i = 0; i < nbCommands; ++i)\r\n\t{\r\n\t\tskd = scintKeyDefs[i];\r\n\t\tif (skd.functionId == prevID)\r\n\t\t{\r\n\t\t\tKeyCombo kc;\r\n\t\t\tkc._isCtrl = skd.isCtrl;\r\n\t\t\tkc._isAlt = skd.isAlt;\r\n\t\t\tkc._isShift = skd.isShift;\r\n\t\t\tkc._key = static_cast<unsigned char>(skd.vKey);\r\n\t\t\t_scintillaKeyCommands[prevIndex].addKeyCombo(kc);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tShortcut s = Shortcut(skd.name, skd.isCtrl, skd.isAlt, skd.isShift, static_cast<unsigned char>(skd.vKey));\r\n\t\t\tScintillaKeyMap sm = ScintillaKeyMap(s, skd.functionId, skd.redirFunctionId);\r\n\t\t\t_scintillaKeyCommands.push_back(sm);\r\n\t\t\t++prevIndex;\r\n\t\t}\r\n\t\tprevID = skd.functionId;\r\n\t}\r\n}\r\nbool NppParameters::reloadContextMenuFromXmlTree(HMENU mainMenuHadle, HMENU pluginsMenu)\r\n{\r\n\t_contextMenuItems.clear();\r\n\treturn getContextMenuFromXmlTree(mainMenuHadle, pluginsMenu);\r\n}\r\n\r\nint NppParameters::getCmdIdFromMenuEntryItemName(HMENU mainMenuHadle, const generic_string& menuEntryName, const generic_string& menuItemName)\r\n{\r\n\tint nbMenuEntry = ::GetMenuItemCount(mainMenuHadle);\r\n\tfor (int i = 0; i < nbMenuEntry; ++i)\r\n\t{\r\n\t\tTCHAR menuEntryString[64];\r\n\t\t::GetMenuString(mainMenuHadle, i, menuEntryString, 64, MF_BYPOSITION);\r\n\t\tif (generic_stricmp(menuEntryName.c_str(), purgeMenuItemString(menuEntryString).c_str()) == 0)\r\n\t\t{\r\n\t\t\tvector< pair<HMENU, int> > parentMenuPos;\r\n\t\t\tHMENU topMenu = ::GetSubMenu(mainMenuHadle, i);\r\n\t\t\tint maxTopMenuPos = ::GetMenuItemCount(topMenu);\r\n\t\t\tHMENU currMenu = topMenu;\r\n\t\t\tint currMaxMenuPos = maxTopMenuPos;\r\n\r\n\t\t\tint currMenuPos = 0;\r\n\t\t\tbool notFound = false;\r\n\r\n\t\t\tdo {\r\n\t\t\t\tif (::GetSubMenu(currMenu, currMenuPos))\r\n\t\t\t\t{\r\n\t\t\t\t\t//  Go into sub menu\r\n\t\t\t\t\tparentMenuPos.push_back(::make_pair(currMenu, currMenuPos));\r\n\t\t\t\t\tcurrMenu = ::GetSubMenu(currMenu, currMenuPos);\r\n\t\t\t\t\tcurrMenuPos = 0;\r\n\t\t\t\t\tcurrMaxMenuPos = ::GetMenuItemCount(currMenu);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t//  Check current menu position.\r\n\t\t\t\t\tTCHAR cmdStr[256];\r\n\t\t\t\t\t::GetMenuString(currMenu, currMenuPos, cmdStr, 256, MF_BYPOSITION);\r\n\t\t\t\t\tif (generic_stricmp(menuItemName.c_str(), purgeMenuItemString(cmdStr).c_str()) == 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ::GetMenuItemID(currMenu, currMenuPos);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((currMenuPos >= currMaxMenuPos) && (parentMenuPos.size() > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcurrMenu = parentMenuPos.back().first;\r\n\t\t\t\t\t\tcurrMenuPos = parentMenuPos.back().second;\r\n\t\t\t\t\t\tparentMenuPos.pop_back();\r\n\t\t\t\t\t\tcurrMaxMenuPos = ::GetMenuItemCount(currMenu);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((currMenu == topMenu) && (currMenuPos >= maxTopMenuPos))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnotFound = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t++currMenuPos;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} while (!notFound);\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nint NppParameters::getPluginCmdIdFromMenuEntryItemName(HMENU pluginsMenu, const generic_string& pluginName, const generic_string& pluginCmdName)\r\n{\r\n\tint nbPlugins = ::GetMenuItemCount(pluginsMenu);\r\n\tfor (int i = 0; i < nbPlugins; ++i)\r\n\t{\r\n\t\tTCHAR menuItemString[256];\r\n\t\t::GetMenuString(pluginsMenu, i, menuItemString, 256, MF_BYPOSITION);\r\n\t\tif (generic_stricmp(pluginName.c_str(), purgeMenuItemString(menuItemString).c_str()) == 0)\r\n\t\t{\r\n\t\t\tHMENU pluginMenu = ::GetSubMenu(pluginsMenu, i);\r\n\t\t\tint nbPluginCmd = ::GetMenuItemCount(pluginMenu);\r\n\t\t\tfor (int j = 0; j < nbPluginCmd; ++j)\r\n\t\t\t{\r\n\t\t\t\tTCHAR pluginCmdStr[256];\r\n\t\t\t\t::GetMenuString(pluginMenu, j, pluginCmdStr, 256, MF_BYPOSITION);\r\n\t\t\t\tif (generic_stricmp(pluginCmdName.c_str(), purgeMenuItemString(pluginCmdStr).c_str()) == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ::GetMenuItemID(pluginMenu, j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nbool NppParameters::getContextMenuFromXmlTree(HMENU mainMenuHadle, HMENU pluginsMenu)\r\n{\r\n\tif (!_pXmlContextMenuDocA)\r\n\t\treturn false;\r\n\tTiXmlNodeA *root = _pXmlContextMenuDocA->FirstChild(\"NotepadPlus\");\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\tNativeLangSpeaker* pNativeSpeaker = (NppParameters::getInstance()).getNativeLangSpeaker();\r\n\r\n\tTiXmlNodeA *contextMenuRoot = root->FirstChildElement(\"ScintillaContextMenu\");\r\n\tif (contextMenuRoot)\r\n\t{\r\n\t\tfor (TiXmlNodeA *childNode = contextMenuRoot->FirstChildElement(\"Item\");\r\n\t\t\tchildNode ;\r\n\t\t\tchildNode = childNode->NextSibling(\"Item\") )\r\n\t\t{\r\n\t\t\tconst char *folderNameDefaultA = (childNode->ToElement())->Attribute(\"FolderName\");\r\n\t\t\tconst char *folderNameTranslateID_A = (childNode->ToElement())->Attribute(\"TranslateID\");\r\n\t\t\tconst char *displayAsA = (childNode->ToElement())->Attribute(\"ItemNameAs\");\r\n\r\n\t\t\tgeneric_string folderName;\r\n\t\t\tgeneric_string displayAs;\r\n\t\t\tfolderName = folderNameDefaultA ? wmc.char2wchar(folderNameDefaultA, SC_CP_UTF8) : TEXT(\"\");\r\n\t\t\tdisplayAs = displayAsA ? wmc.char2wchar(displayAsA, SC_CP_UTF8) : TEXT(\"\");\r\n\r\n\t\t\tif (folderNameTranslateID_A)\r\n\t\t\t{\r\n\t\t\t\tfolderName = pNativeSpeaker->getLocalizedStrFromID(folderNameTranslateID_A, folderName);\r\n\t\t\t}\r\n\r\n\t\t\tint id;\r\n\t\t\tconst char *idStr = (childNode->ToElement())->Attribute(\"id\", &id);\r\n\t\t\tif (idStr)\r\n\t\t\t{\r\n\t\t\t\t_contextMenuItems.push_back(MenuItemUnit(id, displayAs.c_str(), folderName.c_str()));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst char *menuEntryNameA = (childNode->ToElement())->Attribute(\"MenuEntryName\");\r\n\t\t\t\tconst char *menuItemNameA = (childNode->ToElement())->Attribute(\"MenuItemName\");\r\n\r\n\t\t\t\tgeneric_string menuEntryName;\r\n\t\t\t\tgeneric_string menuItemName;\r\n\t\t\t\tmenuEntryName = menuEntryNameA?wmc.char2wchar(menuEntryNameA, SC_CP_UTF8):TEXT(\"\");\r\n\t\t\t\tmenuItemName = menuItemNameA?wmc.char2wchar(menuItemNameA, SC_CP_UTF8):TEXT(\"\");\r\n\r\n\t\t\t\tif (!menuEntryName.empty() && !menuItemName.empty())\r\n\t\t\t\t{\r\n\t\t\t\t\tint cmd = getCmdIdFromMenuEntryItemName(mainMenuHadle, menuEntryName, menuItemName);\r\n\t\t\t\t\tif (cmd != -1)\r\n\t\t\t\t\t\t_contextMenuItems.push_back(MenuItemUnit(cmd, displayAs.c_str(), folderName.c_str()));\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tconst char *pluginNameA = (childNode->ToElement())->Attribute(\"PluginEntryName\");\r\n\t\t\t\t\tconst char *pluginCmdNameA = (childNode->ToElement())->Attribute(\"PluginCommandItemName\");\r\n\r\n\t\t\t\t\tgeneric_string pluginName;\r\n\t\t\t\t\tgeneric_string pluginCmdName;\r\n\t\t\t\t\tpluginName = pluginNameA?wmc.char2wchar(pluginNameA, SC_CP_UTF8):TEXT(\"\");\r\n\t\t\t\t\tpluginCmdName = pluginCmdNameA?wmc.char2wchar(pluginCmdNameA, SC_CP_UTF8):TEXT(\"\");\r\n\r\n\t\t\t\t\t// if plugin menu existing plls the value of PluginEntryName and PluginCommandItemName are valid\r\n\t\t\t\t\tif (pluginsMenu && !pluginName.empty() && !pluginCmdName.empty())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint pluginCmdId = getPluginCmdIdFromMenuEntryItemName(pluginsMenu, pluginName, pluginCmdName);\r\n\t\t\t\t\t\tif (pluginCmdId != -1)\r\n\t\t\t\t\t\t\t_contextMenuItems.push_back(MenuItemUnit(pluginCmdId, displayAs.c_str(), folderName.c_str()));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n\r\nvoid NppParameters::setWorkingDir(const TCHAR * newPath)\r\n{\r\n\tif (newPath && newPath[0])\r\n\t{\r\n\t\t_currentDirectory = newPath;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (PathFileExists(_nppGUI._defaultDirExp))\r\n\t\t\t_currentDirectory = _nppGUI._defaultDirExp;\r\n\t\telse\r\n\t\t\t_currentDirectory = _nppPath.c_str();\r\n\t}\r\n}\r\n\r\nbool NppParameters::loadSession(Session & session, const TCHAR *sessionFileName)\r\n{\r\n\tTiXmlDocument *pXmlSessionDocument = new TiXmlDocument(sessionFileName);\r\n\tbool loadOkay = pXmlSessionDocument->LoadFile();\r\n\tif (loadOkay)\r\n\t\tloadOkay = getSessionFromXmlTree(pXmlSessionDocument, session);\r\n\r\n\tdelete pXmlSessionDocument;\r\n\treturn loadOkay;\r\n}\r\n\r\n\r\nbool NppParameters::getSessionFromXmlTree(TiXmlDocument *pSessionDoc, Session& session)\r\n{\r\n\tif (!pSessionDoc)\r\n\t\treturn false;\r\n\t\r\n\tTiXmlNode *root = pSessionDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *sessionRoot = root->FirstChildElement(TEXT(\"Session\"));\r\n\tif (!sessionRoot)\r\n\t\treturn false;\r\n\r\n\tTiXmlElement *actView = sessionRoot->ToElement();\r\n\tint index = 0;\r\n\tconst TCHAR *str = actView->Attribute(TEXT(\"activeView\"), &index);\r\n\tif (str)\r\n\t{\r\n\t\tsession._activeView = index;\r\n\t}\r\n\r\n\tconst size_t nbView = 2;\r\n\tTiXmlNode *viewRoots[nbView];\r\n\tviewRoots[0] = sessionRoot->FirstChildElement(TEXT(\"mainView\"));\r\n\tviewRoots[1] = sessionRoot->FirstChildElement(TEXT(\"subView\"));\r\n\tfor (size_t k = 0; k < nbView; ++k)\r\n\t{\r\n\t\tif (viewRoots[k])\r\n\t\t{\r\n\t\t\tint index2 = 0;\r\n\t\t\tTiXmlElement *actIndex = viewRoots[k]->ToElement();\r\n\t\t\tstr = actIndex->Attribute(TEXT(\"activeIndex\"), &index2);\r\n\t\t\tif (str)\r\n\t\t\t{\r\n\t\t\t\tif (k == 0)\r\n\t\t\t\t\tsession._activeMainIndex = index2;\r\n\t\t\t\telse // k == 1\r\n\t\t\t\t\tsession._activeSubIndex = index2;\r\n\t\t\t}\r\n\t\t\tfor (TiXmlNode *childNode = viewRoots[k]->FirstChildElement(TEXT(\"File\"));\r\n\t\t\t\tchildNode ;\r\n\t\t\t\tchildNode = childNode->NextSibling(TEXT(\"File\")) )\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR *fileName = (childNode->ToElement())->Attribute(TEXT(\"filename\"));\r\n\t\t\t\tif (fileName)\r\n\t\t\t\t{\r\n\t\t\t\t\tPosition position;\r\n\t\t\t\t\tconst TCHAR* posStr = (childNode->ToElement())->Attribute(TEXT(\"firstVisibleLine\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._firstVisibleLine = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"xOffset\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._xOffset = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"startPos\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._startPos = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"endPos\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._endPos = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"selMode\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._selMode = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"scrollWidth\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._scrollWidth = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"offset\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._offset = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"wrapCount\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._wrapCount = static_cast<intptr_t>(_ttoi64(posStr));\r\n\r\n\t\t\t\t\tMapPosition mapPosition;\r\n\t\t\t\t\tconst TCHAR* mapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapFirstVisibleDisplayLine\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._firstVisibleDisplayLine = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapFirstVisibleDocLine\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._firstVisibleDocLine = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapLastVisibleDocLine\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._lastVisibleDocLine = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapNbLine\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._nbLine = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapHigherPos\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._higherPos = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapWidth\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._width = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapHeight\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._height = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapKByteInDoc\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._KByteInDoc = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapWrapIndentMode\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._wrapIndentMode = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tconst TCHAR *boolStr = (childNode->ToElement())->Attribute(TEXT(\"mapIsWrap\"));\r\n\t\t\t\t\tif (boolStr)\r\n\t\t\t\t\t\tmapPosition._isWrap = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\t\t\t\t\tconst TCHAR *langName;\r\n\t\t\t\t\tlangName = (childNode->ToElement())->Attribute(TEXT(\"lang\"));\r\n\t\t\t\t\tint encoding = -1;\r\n\t\t\t\t\tconst TCHAR *encStr = (childNode->ToElement())->Attribute(TEXT(\"encoding\"), &encoding);\r\n\t\t\t\t\tconst TCHAR *backupFilePath = (childNode->ToElement())->Attribute(TEXT(\"backupFilePath\"));\r\n\r\n\t\t\t\t\tFILETIME fileModifiedTimestamp;\r\n\t\t\t\t\t(childNode->ToElement())->Attribute(TEXT(\"originalFileLastModifTimestamp\"), reinterpret_cast<int32_t*>(&fileModifiedTimestamp.dwLowDateTime));\r\n\t\t\t\t\t(childNode->ToElement())->Attribute(TEXT(\"originalFileLastModifTimestampHigh\"), reinterpret_cast<int32_t*>(&fileModifiedTimestamp.dwHighDateTime));\r\n\r\n\t\t\t\t\tbool isUserReadOnly = false;\r\n\t\t\t\t\tconst TCHAR *boolStrReadOnly = (childNode->ToElement())->Attribute(TEXT(\"userReadOnly\"));\r\n\t\t\t\t\tif (boolStrReadOnly)\r\n\t\t\t\t\t\tisUserReadOnly = _wcsicmp(TEXT(\"yes\"), boolStrReadOnly) == 0;\r\n\r\n\t\t\t\t\tsessionFileInfo sfi(fileName, langName, encStr ? encoding : -1, isUserReadOnly, position, backupFilePath, fileModifiedTimestamp, mapPosition);\r\n\r\n\t\t\t\t\tfor (TiXmlNode *markNode = childNode->FirstChildElement(TEXT(\"Mark\"));\r\n\t\t\t\t\t\tmarkNode;\r\n\t\t\t\t\t\tmarkNode = markNode->NextSibling(TEXT(\"Mark\")))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst TCHAR* lineNumberStr = (markNode->ToElement())->Attribute(TEXT(\"line\"));\r\n\t\t\t\t\t\tif (lineNumberStr)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsfi._marks.push_back(static_cast<size_t>(_ttoi64(lineNumberStr)));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (TiXmlNode *foldNode = childNode->FirstChildElement(TEXT(\"Fold\"));\r\n\t\t\t\t\t\tfoldNode;\r\n\t\t\t\t\t\tfoldNode = foldNode->NextSibling(TEXT(\"Fold\")))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst TCHAR *lineNumberStr = (foldNode->ToElement())->Attribute(TEXT(\"line\"));\r\n\t\t\t\t\t\tif (lineNumberStr)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsfi._foldStates.push_back(static_cast<size_t>(_ttoi64(lineNumberStr)));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (k == 0)\r\n\t\t\t\t\t\tsession._mainViewFiles.push_back(sfi);\r\n\t\t\t\t\telse // k == 1\r\n\t\t\t\t\t\tsession._subViewFiles.push_back(sfi);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Node structure and naming corresponds to config.xml\r\n\tTiXmlNode *fileBrowserRoot = sessionRoot->FirstChildElement(TEXT(\"FileBrowser\"));\r\n\tif (fileBrowserRoot)\r\n\t{\r\n\t\tconst TCHAR *selectedItemPath = (fileBrowserRoot->ToElement())->Attribute(TEXT(\"latestSelectedItem\"));\r\n\t\tif (selectedItemPath)\r\n\t\t{\r\n\t\t\tsession._fileBrowserSelectedItem = selectedItemPath;\r\n\t\t}\r\n\r\n\t\tfor (TiXmlNode *childNode = fileBrowserRoot->FirstChildElement(TEXT(\"root\"));\r\n\t\t\tchildNode;\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"root\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *fileName = (childNode->ToElement())->Attribute(TEXT(\"foldername\"));\r\n\t\t\tif (fileName)\r\n\t\t\t{\r\n\t\t\t\tsession._fileBrowserRoots.push_back({ fileName });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nvoid NppParameters::feedFileListParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *historyRoot = node->FirstChildElement(TEXT(\"History\"));\r\n\tif (!historyRoot) return;\r\n\r\n\t// nbMaxFile value\r\n\tint nbMaxFile;\r\n\tconst TCHAR *strVal = (historyRoot->ToElement())->Attribute(TEXT(\"nbMaxFile\"), &nbMaxFile);\r\n\tif (strVal && (nbMaxFile >= 0) && (nbMaxFile <= 50))\r\n\t\t_nbMaxRecentFile = nbMaxFile;\r\n\r\n\t// customLen value\r\n\tint customLen;\r\n\tstrVal = (historyRoot->ToElement())->Attribute(TEXT(\"customLength\"), &customLen);\r\n\tif (strVal)\r\n\t\t_recentFileCustomLength = customLen;\r\n\r\n\t// inSubMenu value\r\n\tstrVal = (historyRoot->ToElement())->Attribute(TEXT(\"inSubMenu\"));\r\n\tif (strVal)\r\n\t\t_putRecentFileInSubMenu = (lstrcmp(strVal, TEXT(\"yes\")) == 0);\r\n\r\n\tfor (TiXmlNode *childNode = historyRoot->FirstChildElement(TEXT(\"File\"));\r\n\t\tchildNode && (_nbRecentFile < NB_MAX_LRF_FILE);\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"File\")) )\r\n\t{\r\n\t\tconst TCHAR *filePath = (childNode->ToElement())->Attribute(TEXT(\"filename\"));\r\n\t\tif (filePath)\r\n\t\t{\r\n\t\t\t_LRFileList[_nbRecentFile] = new generic_string(filePath);\r\n\t\t\t++_nbRecentFile;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedFileBrowserParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *fileBrowserRoot = node->FirstChildElement(TEXT(\"FileBrowser\"));\r\n\tif (!fileBrowserRoot) return;\r\n\r\n\tconst TCHAR *selectedItemPath = (fileBrowserRoot->ToElement())->Attribute(TEXT(\"latestSelectedItem\"));\r\n\tif (selectedItemPath)\r\n\t{\r\n\t\t_fileBrowserSelectedItemPath = selectedItemPath;\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = fileBrowserRoot->FirstChildElement(TEXT(\"root\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"root\")) )\r\n\t{\r\n\t\tconst TCHAR *filePath = (childNode->ToElement())->Attribute(TEXT(\"foldername\"));\r\n\t\tif (filePath)\r\n\t\t{\r\n\t\t\t_fileBrowserRoot.push_back(filePath);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedProjectPanelsParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *projPanelRoot = node->FirstChildElement(TEXT(\"ProjectPanels\"));\r\n\tif (!projPanelRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = projPanelRoot->FirstChildElement(TEXT(\"ProjectPanel\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"ProjectPanel\")) )\r\n\t{\r\n\t\tint index = 0;\r\n\t\tconst TCHAR *idStr = (childNode->ToElement())->Attribute(TEXT(\"id\"), &index);\r\n\t\tif (idStr && (index >= 0 && index <= 2))\r\n\t\t{\r\n\t\t\tconst TCHAR *filePath = (childNode->ToElement())->Attribute(TEXT(\"workSpaceFile\"));\r\n\t\t\tif (filePath)\r\n\t\t\t{\r\n\t\t\t\t_workSpaceFilePathes[index] = filePath;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedFindHistoryParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *findHistoryRoot = node->FirstChildElement(TEXT(\"FindHistory\"));\r\n\tif (!findHistoryRoot) return;\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"nbMaxFindHistoryPath\"), &_findHistory._nbMaxFindHistoryPath);\r\n\tif (_findHistory._nbMaxFindHistoryPath > NB_MAX_FINDHISTORY_PATH)\r\n\t{\r\n\t\t_findHistory._nbMaxFindHistoryPath = NB_MAX_FINDHISTORY_PATH;\r\n\t}\r\n\tif ((_findHistory._nbMaxFindHistoryPath > 0) && (_findHistory._nbMaxFindHistoryPath <= NB_MAX_FINDHISTORY_PATH))\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = findHistoryRoot->FirstChildElement(TEXT(\"Path\"));\r\n\t\t\tchildNode && (_findHistory._findHistoryPaths.size() < NB_MAX_FINDHISTORY_PATH);\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"Path\")) )\r\n\t\t{\r\n\t\t\tconst TCHAR *filePath = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\tif (filePath)\r\n\t\t\t{\r\n\t\t\t\t_findHistory._findHistoryPaths.push_back(generic_string(filePath));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"nbMaxFindHistoryFilter\"), &_findHistory._nbMaxFindHistoryFilter);\r\n\tif (_findHistory._nbMaxFindHistoryFilter > NB_MAX_FINDHISTORY_FILTER)\r\n\t{\r\n\t\t_findHistory._nbMaxFindHistoryFilter = NB_MAX_FINDHISTORY_FILTER;\r\n\t}\r\n\tif ((_findHistory._nbMaxFindHistoryFilter > 0) && (_findHistory._nbMaxFindHistoryFilter <= NB_MAX_FINDHISTORY_FILTER))\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = findHistoryRoot->FirstChildElement(TEXT(\"Filter\"));\r\n\t\t\tchildNode && (_findHistory._findHistoryFilters.size() < NB_MAX_FINDHISTORY_FILTER);\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"Filter\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *fileFilter = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\tif (fileFilter)\r\n\t\t\t{\r\n\t\t\t\t_findHistory._findHistoryFilters.push_back(generic_string(fileFilter));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"nbMaxFindHistoryFind\"), &_findHistory._nbMaxFindHistoryFind);\r\n\tif (_findHistory._nbMaxFindHistoryFind > NB_MAX_FINDHISTORY_FIND)\r\n\t{\r\n\t\t_findHistory._nbMaxFindHistoryFind = NB_MAX_FINDHISTORY_FIND;\r\n\t}\r\n\tif ((_findHistory._nbMaxFindHistoryFind > 0) && (_findHistory._nbMaxFindHistoryFind <= NB_MAX_FINDHISTORY_FIND))\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = findHistoryRoot->FirstChildElement(TEXT(\"Find\"));\r\n\t\t\tchildNode && (_findHistory._findHistoryFinds.size() < NB_MAX_FINDHISTORY_FIND);\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"Find\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *fileFind = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\tif (fileFind)\r\n\t\t\t{\r\n\t\t\t\t_findHistory._findHistoryFinds.push_back(generic_string(fileFind));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"nbMaxFindHistoryReplace\"), &_findHistory._nbMaxFindHistoryReplace);\r\n\tif (_findHistory._nbMaxFindHistoryReplace > NB_MAX_FINDHISTORY_REPLACE)\r\n\t{\r\n\t\t_findHistory._nbMaxFindHistoryReplace = NB_MAX_FINDHISTORY_REPLACE;\r\n\t}\r\n\tif ((_findHistory._nbMaxFindHistoryReplace > 0) && (_findHistory._nbMaxFindHistoryReplace <= NB_MAX_FINDHISTORY_REPLACE))\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = findHistoryRoot->FirstChildElement(TEXT(\"Replace\"));\r\n\t\t\tchildNode && (_findHistory._findHistoryReplaces.size() < NB_MAX_FINDHISTORY_REPLACE);\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"Replace\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *fileReplace = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\tif (fileReplace)\r\n\t\t\t{\r\n\t\t\t\t_findHistory._findHistoryReplaces.push_back(generic_string(fileReplace));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst TCHAR *boolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"matchWord\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isMatchWord = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"matchCase\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isMatchCase = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"wrap\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isWrap = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"directionDown\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isDirectionDown = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifRecuisive\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifRecuisive = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifInHiddenFolder\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifInHiddenFolder = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifProjectPanel1\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifProjectPanel_1 = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifProjectPanel2\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifProjectPanel_2 = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifProjectPanel3\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifProjectPanel_3 = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifFilterFollowsDoc\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFilterFollowDoc = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifFolderFollowsDoc\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFolderFollowDoc = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tint mode = 0;\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"searchMode\"), &mode);\r\n\tif (boolStr)\r\n\t\t_findHistory._searchMode = (FindHistory::searchMode)mode;\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"transparencyMode\"), &mode);\r\n\tif (boolStr)\r\n\t\t_findHistory._transparencyMode = (FindHistory::transparencyMode)mode;\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"transparency\"), &_findHistory._transparency);\r\n\tif (_findHistory._transparency <= 0 || _findHistory._transparency > 200)\r\n\t\t_findHistory._transparency = 150;\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"dotMatchesNewline\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._dotMatchesNewline = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"isSearch2ButtonsMode\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isSearch2ButtonsMode = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"regexBackward4PowerUser\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._regexBackward4PowerUser = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n}\r\n\r\nvoid NppParameters::feedShortcut(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *shortcutsRoot = node->FirstChildElement(TEXT(\"InternalCommands\"));\r\n\tif (!shortcutsRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = shortcutsRoot->FirstChildElement(TEXT(\"Shortcut\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Shortcut\")) )\r\n\t{\r\n\t\tint id;\r\n\t\tconst TCHAR *idStr = (childNode->ToElement())->Attribute(TEXT(\"id\"), &id);\r\n\t\tif (idStr)\r\n\t\t{\r\n\t\t\t//find the commandid that matches this Shortcut sc and alter it, push back its index in the modified list, if not present\r\n\t\t\tsize_t len = _shortcuts.size();\r\n\t\t\tfor (size_t i = 0; i < len; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (_shortcuts[i].getID() == (unsigned long)id)\r\n\t\t\t\t{\t//found our match\r\n\t\t\t\t\tgetShortcuts(childNode, _shortcuts[i]);\r\n\t\t\t\t\taddUserModifiedIndex(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedMacros(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *macrosRoot = node->FirstChildElement(TEXT(\"Macros\"));\r\n\tif (!macrosRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = macrosRoot->FirstChildElement(TEXT(\"Macro\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Macro\")) )\r\n\t{\r\n\t\tShortcut sc;\r\n\t\tif (getShortcuts(childNode, sc))// && sc.isValid())\r\n\t\t{\r\n\t\t\tMacro macro;\r\n\t\t\tgetActions(childNode, macro);\r\n\t\t\tint cmdID = ID_MACRO + static_cast<int32_t>(_macros.size());\r\n\t\t\tMacroShortcut ms(sc, macro, cmdID);\r\n\t\t\t_macros.push_back(ms);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::getActions(TiXmlNode *node, Macro & macro)\r\n{\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"Action\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Action\")) )\r\n\t{\r\n\t\tint type;\r\n\t\tconst TCHAR *typeStr = (childNode->ToElement())->Attribute(TEXT(\"type\"), &type);\r\n\t\tif ((!typeStr) || (type > 3))\r\n\t\t\tcontinue;\r\n\r\n\t\tint msg = 0;\r\n\t\t(childNode->ToElement())->Attribute(TEXT(\"message\"), &msg);\r\n\r\n\t\tint wParam = 0;\r\n\t\t(childNode->ToElement())->Attribute(TEXT(\"wParam\"), &wParam);\r\n\r\n\t\tint lParam = 0;\r\n\t\t(childNode->ToElement())->Attribute(TEXT(\"lParam\"), &lParam);\r\n\r\n\t\tconst TCHAR *sParam = (childNode->ToElement())->Attribute(TEXT(\"sParam\"));\r\n\t\tif (!sParam)\r\n\t\t\tsParam = TEXT(\"\");\r\n\t\trecordedMacroStep step(msg, wParam, lParam, sParam, type);\r\n\t\tif (step.isValid())\r\n\t\t\tmacro.push_back(step);\r\n\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedUserCmds(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *userCmdsRoot = node->FirstChildElement(TEXT(\"UserDefinedCommands\"));\r\n\tif (!userCmdsRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = userCmdsRoot->FirstChildElement(TEXT(\"Command\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Command\")) )\r\n\t{\r\n\t\tShortcut sc;\r\n\t\tif (getShortcuts(childNode, sc))\r\n\t\t{\r\n\t\t\tTiXmlNode *aNode = childNode->FirstChild();\r\n\t\t\tif (aNode)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR *cmdStr = aNode->Value();\r\n\t\t\t\tif (cmdStr)\r\n\t\t\t\t{\r\n\t\t\t\t\tint cmdID = ID_USER_CMD + static_cast<int32_t>(_userCommands.size());\r\n\t\t\t\t\tUserCommand uc(sc, cmdStr, cmdID);\r\n\t\t\t\t\t_userCommands.push_back(uc);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedPluginCustomizedCmds(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *pluginCustomizedCmdsRoot = node->FirstChildElement(TEXT(\"PluginCommands\"));\r\n\tif (!pluginCustomizedCmdsRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = pluginCustomizedCmdsRoot->FirstChildElement(TEXT(\"PluginCommand\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"PluginCommand\")) )\r\n\t{\r\n\t\tconst TCHAR *moduleName = (childNode->ToElement())->Attribute(TEXT(\"moduleName\"));\r\n\t\tif (!moduleName)\r\n\t\t\tcontinue;\r\n\r\n\t\tint internalID = -1;\r\n\t\tconst TCHAR *internalIDStr = (childNode->ToElement())->Attribute(TEXT(\"internalID\"), &internalID);\r\n\r\n\t\tif (!internalIDStr)\r\n\t\t\tcontinue;\r\n\r\n\t\t//Find the corresponding plugincommand and alter it, put the index in the list\r\n\t\tsize_t len = _pluginCommands.size();\r\n\t\tfor (size_t i = 0; i < len; ++i)\r\n\t\t{\r\n\t\t\tPluginCmdShortcut & pscOrig = _pluginCommands[i];\r\n\t\t\tif (!generic_strnicmp(pscOrig.getModuleName(), moduleName, lstrlen(moduleName)) && pscOrig.getInternalID() == internalID)\r\n\t\t\t{\r\n\t\t\t\t//Found matching command\r\n\t\t\t\tgetShortcuts(childNode, _pluginCommands[i]);\r\n\t\t\t\taddPluginModifiedIndex(i);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedScintKeys(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *scintKeysRoot = node->FirstChildElement(TEXT(\"ScintillaKeys\"));\r\n\tif (!scintKeysRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = scintKeysRoot->FirstChildElement(TEXT(\"ScintKey\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"ScintKey\")) )\r\n\t{\r\n\t\tint scintKey;\r\n\t\tconst TCHAR *keyStr = (childNode->ToElement())->Attribute(TEXT(\"ScintID\"), &scintKey);\r\n\t\tif (!keyStr)\r\n\t\t\tcontinue;\r\n\r\n\t\tint menuID;\r\n\t\tkeyStr = (childNode->ToElement())->Attribute(TEXT(\"menuCmdID\"), &menuID);\r\n\t\tif (!keyStr)\r\n\t\t\tcontinue;\r\n\r\n\t\t//Find the corresponding scintillacommand and alter it, put the index in the list\r\n\t\tsize_t len = _scintillaKeyCommands.size();\r\n\t\tfor (int32_t i = 0; i < static_cast<int32_t>(len); ++i)\r\n\t\t{\r\n\t\t\tScintillaKeyMap & skmOrig = _scintillaKeyCommands[i];\r\n\t\t\tif (skmOrig.getScintillaKeyID() == (unsigned long)scintKey && skmOrig.getMenuCmdID() == menuID)\r\n\t\t\t{\r\n\t\t\t\t//Found matching command\r\n\t\t\t\t_scintillaKeyCommands[i].clearDups();\r\n\t\t\t\tgetShortcuts(childNode, _scintillaKeyCommands[i]);\r\n\t\t\t\t_scintillaKeyCommands[i].setKeyComboByIndex(0, _scintillaKeyCommands[i].getKeyCombo());\r\n\t\t\t\taddScintillaModifiedIndex(i);\r\n\t\t\t\tKeyCombo kc;\r\n\t\t\t\tfor (TiXmlNode *nextNode = childNode->FirstChildElement(TEXT(\"NextKey\"));\r\n\t\t\t\t\tnextNode ;\r\n\t\t\t\t\tnextNode = nextNode->NextSibling(TEXT(\"NextKey\")))\r\n\t\t\t\t{\r\n\t\t\t\t\tconst TCHAR *str = (nextNode->ToElement())->Attribute(TEXT(\"Ctrl\"));\r\n\t\t\t\t\tif (!str)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tkc._isCtrl = (lstrcmp(TEXT(\"yes\"), str) == 0);\r\n\r\n\t\t\t\t\tstr = (nextNode->ToElement())->Attribute(TEXT(\"Alt\"));\r\n\t\t\t\t\tif (!str)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tkc._isAlt = (lstrcmp(TEXT(\"yes\"), str) == 0);\r\n\r\n\t\t\t\t\tstr = (nextNode->ToElement())->Attribute(TEXT(\"Shift\"));\r\n\t\t\t\t\tif (!str)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tkc._isShift = (lstrcmp(TEXT(\"yes\"), str) == 0);\r\n\r\n\t\t\t\t\tint key;\r\n\t\t\t\t\tstr = (nextNode->ToElement())->Attribute(TEXT(\"Key\"), &key);\r\n\t\t\t\t\tif (!str)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tkc._key = static_cast<unsigned char>(key);\r\n\t\t\t\t\t_scintillaKeyCommands[i].addKeyCombo(kc);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nbool NppParameters::feedBlacklist(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *blackListRoot = node->FirstChildElement(TEXT(\"PluginBlackList\"));\r\n\tif (!blackListRoot) return false;\r\n\r\n\tfor (TiXmlNode *childNode = blackListRoot->FirstChildElement(TEXT(\"Plugin\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Plugin\")) )\r\n\t{\r\n\t\tconst TCHAR *name = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\tif (name)\r\n\t\t{\r\n\t\t\t_blacklist.push_back(name);\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::getShortcuts(TiXmlNode *node, Shortcut & sc)\r\n{\r\n\tif (!node) return false;\r\n\r\n\tconst TCHAR *name = (node->ToElement())->Attribute(TEXT(\"name\"));\r\n\tif (!name)\r\n\t\tname = TEXT(\"\");\r\n\r\n\tbool isCtrl = false;\r\n\tconst TCHAR *isCtrlStr = (node->ToElement())->Attribute(TEXT(\"Ctrl\"));\r\n\tif (isCtrlStr)\r\n\t\tisCtrl = (lstrcmp(TEXT(\"yes\"), isCtrlStr) == 0);\r\n\r\n\tbool isAlt = false;\r\n\tconst TCHAR *isAltStr = (node->ToElement())->Attribute(TEXT(\"Alt\"));\r\n\tif (isAltStr)\r\n\t\tisAlt = (lstrcmp(TEXT(\"yes\"), isAltStr) == 0);\r\n\r\n\tbool isShift = false;\r\n\tconst TCHAR *isShiftStr = (node->ToElement())->Attribute(TEXT(\"Shift\"));\r\n\tif (isShiftStr)\r\n\t\tisShift = (lstrcmp(TEXT(\"yes\"), isShiftStr) == 0);\r\n\r\n\tint key;\r\n\tconst TCHAR *keyStr = (node->ToElement())->Attribute(TEXT(\"Key\"), &key);\r\n\tif (!keyStr)\r\n\t\treturn false;\r\n\r\n\tsc = Shortcut(name, isCtrl, isAlt, isShift, static_cast<unsigned char>(key));\r\n\treturn true;\r\n}\r\n\r\n\r\nstd::pair<unsigned char, unsigned char> NppParameters::feedUserLang(TiXmlNode *node)\r\n{\r\n\tint iBegin = _nbUserLang;\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"UserLang\"));\r\n\t\tchildNode && (_nbUserLang < NB_MAX_USER_LANG);\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"UserLang\")) )\r\n\t{\r\n\t\tconst TCHAR* name = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\tconst TCHAR* ext = (childNode->ToElement())->Attribute(TEXT(\"ext\"));\r\n\t\tconst TCHAR* darkModeTheme = (childNode->ToElement())->Attribute(TEXT(\"darkModeTheme\"));\r\n\t\tconst TCHAR* udlVersion = (childNode->ToElement())->Attribute(TEXT(\"udlVersion\"));\r\n\r\n\t\tif (!name || !name[0] || !ext)\r\n\t\t{\r\n\t\t\t// UserLang name is missing, just ignore this entry\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tbool isDarkModeTheme = false;\r\n\r\n\t\tif (darkModeTheme && darkModeTheme[0])\r\n\t\t{\r\n\t\t\tisDarkModeTheme = (lstrcmp(TEXT(\"yes\"), darkModeTheme) == 0);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t_userLangArray[_nbUserLang] = new UserLangContainer(name, ext, isDarkModeTheme, udlVersion ? udlVersion : TEXT(\"\"));\r\n\r\n\t\t\t++_nbUserLang;\r\n\r\n\t\t\tTiXmlNode *settingsRoot = childNode->FirstChildElement(TEXT(\"Settings\"));\r\n\t\t\tif (!settingsRoot)\r\n\t\t\t\tthrow std::runtime_error(\"NppParameters::feedUserLang : Settings node is missing\");\r\n\r\n\t\t\tfeedUserSettings(settingsRoot);\r\n\r\n\t\t\tTiXmlNode *keywordListsRoot = childNode->FirstChildElement(TEXT(\"KeywordLists\"));\r\n\t\t\tif (!keywordListsRoot)\r\n\t\t\t\tthrow std::runtime_error(\"NppParameters::feedUserLang : KeywordLists node is missing\");\r\n\r\n\t\t\tfeedUserKeywordList(keywordListsRoot);\r\n\r\n\t\t\tTiXmlNode *stylesRoot = childNode->FirstChildElement(TEXT(\"Styles\"));\r\n\t\t\tif (!stylesRoot)\r\n\t\t\t\tthrow std::runtime_error(\"NppParameters::feedUserLang : Styles node is missing\");\r\n\r\n\t\t\tfeedUserStyles(stylesRoot);\r\n\r\n\t\t\t// styles that were not read from xml file should get default values\r\n\t\t\tfor (int i = 0 ; i < SCE_USER_STYLE_TOTAL_STYLES ; ++i)\r\n\t\t\t{\r\n\t\t\t\tconst Style * pStyle = _userLangArray[_nbUserLang - 1]->_styles.findByID(i);\r\n\t\t\t\tif (!pStyle)\r\n\t\t\t\t\t_userLangArray[_nbUserLang - 1]->_styles.addStyler(i, globalMappper().styleNameMapper[i]);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tcatch (const std::exception&)\r\n\t\t{\r\n\t\t\tdelete _userLangArray[--_nbUserLang];\r\n\t\t}\r\n\t}\r\n\tint iEnd = _nbUserLang;\r\n\treturn pair<unsigned char, unsigned char>(static_cast<unsigned char>(iBegin), static_cast<unsigned char>(iEnd));\r\n}\r\n\r\nbool NppParameters::importUDLFromFile(const generic_string& sourceFile)\r\n{\r\n\tTiXmlDocument *pXmlUserLangDoc = new TiXmlDocument(sourceFile);\r\n\r\n\tbool loadOkay = pXmlUserLangDoc->LoadFile();\r\n\tif (loadOkay)\r\n\t{\r\n\t\tauto r = addUserDefineLangsFromXmlTree(pXmlUserLangDoc);\r\n\t\tloadOkay = (r.second - r.first) != 0;\r\n\t\tif (loadOkay)\r\n\t\t{\r\n\t\t\t_pXmlUserLangsDoc.push_back(UdlXmlFileState(nullptr, true, r));\r\n\r\n\t\t\t// imported UDL from xml file will be added into default udl, so we should make default udl dirty\r\n\t\t\tsetUdlXmlDirtyFromXmlDoc(_pXmlUserLangDoc);\r\n\t\t}\r\n\t}\r\n\tdelete pXmlUserLangDoc;\r\n\treturn loadOkay;\r\n}\r\n\r\nbool NppParameters::exportUDLToFile(size_t langIndex2export, const generic_string& fileName2save)\r\n{\r\n\tif (langIndex2export >= NB_MAX_USER_LANG)\r\n\t\treturn false;\r\n\r\n\tif (static_cast<int32_t>(langIndex2export) >= _nbUserLang)\r\n\t\treturn false;\r\n\r\n\tTiXmlDocument *pNewXmlUserLangDoc = new TiXmlDocument(fileName2save);\r\n\tTiXmlNode *newRoot2export = pNewXmlUserLangDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\r\n\tinsertUserLang2Tree(newRoot2export, _userLangArray[langIndex2export]);\r\n\tbool result = pNewXmlUserLangDoc->SaveFile();\r\n\r\n\tdelete pNewXmlUserLangDoc;\r\n\treturn result;\r\n}\r\n\r\nLangType NppParameters::getLangFromExt(const TCHAR *ext)\r\n{\r\n\tint i = getNbLang();\r\n\ti--;\r\n\twhile (i >= 0)\r\n\t{\r\n\t\tLang *l = getLangFromIndex(i--);\r\n\r\n\t\tconst TCHAR *defList = l->getDefaultExtList();\r\n\t\tconst TCHAR *userList = NULL;\r\n\r\n\t\tLexerStylerArray &lsa = getLStylerArray();\r\n\t\tconst TCHAR *lName = l->getLangName();\r\n\t\tLexerStyler *pLS = lsa.getLexerStylerByName(lName);\r\n\r\n\t\tif (pLS)\r\n\t\t\tuserList = pLS->getLexerUserExt();\r\n\r\n\t\tgeneric_string list;\r\n\t\tif (defList)\r\n\t\t\tlist += defList;\r\n\r\n\t\tif (userList)\r\n\t\t{\r\n\t\t\tlist += TEXT(\" \");\r\n\t\t\tlist += userList;\r\n\t\t}\r\n\t\tif (isInList(ext, list.c_str()))\r\n\t\t\treturn l->getLangID();\r\n\t}\r\n\treturn L_TEXT;\r\n}\r\n\r\nvoid NppParameters::setCloudChoice(const TCHAR *pathChoice)\r\n{\r\n\tgeneric_string cloudChoicePath = getSettingsFolder();\r\n\tcloudChoicePath += TEXT(\"\\\\cloud\\\\\");\r\n\r\n\tif (!PathFileExists(cloudChoicePath.c_str()))\r\n\t{\r\n\t\t::CreateDirectory(cloudChoicePath.c_str(), NULL);\r\n\t}\r\n\tcloudChoicePath += TEXT(\"choice\");\r\n\r\n\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\tstd::string cloudPathA = wmc.wchar2char(pathChoice, SC_CP_UTF8);\r\n\r\n\twriteFileContent(cloudChoicePath.c_str(), cloudPathA.c_str());\r\n}\r\n\r\nvoid NppParameters::removeCloudChoice()\r\n{\r\n\tgeneric_string cloudChoicePath = getSettingsFolder();\r\n\r\n\tcloudChoicePath += TEXT(\"\\\\cloud\\\\choice\");\r\n\tif (PathFileExists(cloudChoicePath.c_str()))\r\n\t{\r\n\t\t::DeleteFile(cloudChoicePath.c_str());\r\n\t}\r\n}\r\n\r\nbool NppParameters::isCloudPathChanged() const\r\n{\r\n\tif (_initialCloudChoice == _nppGUI._cloudPath)\r\n\t\treturn false;\r\n\telse if (_initialCloudChoice.size() - _nppGUI._cloudPath.size() == 1)\r\n\t{\r\n\t\tTCHAR c = _initialCloudChoice.at(_initialCloudChoice.size()-1);\r\n\t\tif (c == '\\\\' || c == '/')\r\n\t\t{\r\n\t\t\tif (_initialCloudChoice.find(_nppGUI._cloudPath) == 0)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\telse if (_nppGUI._cloudPath.size() - _initialCloudChoice.size() == 1)\r\n\t{\r\n\t\tTCHAR c = _nppGUI._cloudPath.at(_nppGUI._cloudPath.size() - 1);\r\n\t\tif (c == '\\\\' || c == '/')\r\n\t\t{\r\n\t\t\tif (_nppGUI._cloudPath.find(_initialCloudChoice) == 0)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::writeSettingsFilesOnCloudForThe1stTime(const generic_string & cloudSettingsPath)\r\n{\r\n\tbool isOK = false;\r\n\r\n\tif (cloudSettingsPath.empty())\r\n\t\treturn false;\r\n\r\n\t// config.xml\r\n\tgeneric_string cloudConfigPath = cloudSettingsPath;\r\n\tpathAppend(cloudConfigPath, TEXT(\"config.xml\"));\r\n\tif (!::PathFileExists(cloudConfigPath.c_str()) && _pXmlUserDoc)\r\n\t{\r\n\t\tisOK = _pXmlUserDoc->SaveFile(cloudConfigPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// stylers.xml\r\n\tgeneric_string cloudStylersPath = cloudSettingsPath;\r\n\tpathAppend(cloudStylersPath, TEXT(\"stylers.xml\"));\r\n\tif (!::PathFileExists(cloudStylersPath.c_str()) && _pXmlUserStylerDoc)\r\n\t{\r\n\t\tisOK = _pXmlUserStylerDoc->SaveFile(cloudStylersPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// langs.xml\r\n\tgeneric_string cloudLangsPath = cloudSettingsPath;\r\n\tpathAppend(cloudLangsPath, TEXT(\"langs.xml\"));\r\n\tif (!::PathFileExists(cloudLangsPath.c_str()) && _pXmlUserDoc)\r\n\t{\r\n\t\tisOK = _pXmlDoc->SaveFile(cloudLangsPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// userDefineLang.xml\r\n\tgeneric_string cloudUserLangsPath = cloudSettingsPath;\r\n\tpathAppend(cloudUserLangsPath, TEXT(\"userDefineLang.xml\"));\r\n\tif (!::PathFileExists(cloudUserLangsPath.c_str()) && _pXmlUserLangDoc)\r\n\t{\r\n\t\tisOK = _pXmlUserLangDoc->SaveFile(cloudUserLangsPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// shortcuts.xml\r\n\tgeneric_string cloudShortcutsPath = cloudSettingsPath;\r\n\tpathAppend(cloudShortcutsPath, TEXT(\"shortcuts.xml\"));\r\n\tif (!::PathFileExists(cloudShortcutsPath.c_str()) && _pXmlShortcutDoc)\r\n\t{\r\n\t\tisOK = _pXmlShortcutDoc->SaveFile(cloudShortcutsPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// contextMenu.xml\r\n\tgeneric_string cloudContextMenuPath = cloudSettingsPath;\r\n\tpathAppend(cloudContextMenuPath, TEXT(\"contextMenu.xml\"));\r\n\tif (!::PathFileExists(cloudContextMenuPath.c_str()) && _pXmlContextMenuDocA)\r\n\t{\r\n\t\tisOK = _pXmlContextMenuDocA->SaveUnicodeFilePath(cloudContextMenuPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// nativeLang.xml\r\n\tgeneric_string cloudNativeLangPath = cloudSettingsPath;\r\n\tpathAppend(cloudNativeLangPath, TEXT(\"nativeLang.xml\"));\r\n\tif (!::PathFileExists(cloudNativeLangPath.c_str()) && _pXmlNativeLangDocA)\r\n\t{\r\n\t\tisOK = _pXmlNativeLangDocA->SaveUnicodeFilePath(cloudNativeLangPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\n/*\r\nDefault UDL + Created + Imported\r\n\r\n*/\r\nvoid NppParameters::writeDefaultUDL()\r\n{\r\n\tbool firstCleanDone = false;\r\n\tstd::vector<bool> deleteState;\r\n\tfor (auto udl : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tif (!_pXmlUserLangDoc)\r\n\t\t{\r\n\t\t\t_pXmlUserLangDoc = new TiXmlDocument(_userDefineLangPath);\r\n\t\t\tTiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));\r\n\t\t\t_pXmlUserLangDoc->LinkEndChild(decl);\r\n\t\t\t_pXmlUserLangDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t\t}\r\n\r\n\t\tbool toDelete = (udl._indexRange.second - udl._indexRange.first) == 0;\r\n\t\tdeleteState.push_back(toDelete);\r\n\t\tif ((!udl._udlXmlDoc || udl._udlXmlDoc == _pXmlUserLangDoc) && udl._isDirty && !toDelete) // new created or/and imported UDL plus _pXmlUserLangDoc (if exist)\r\n\t\t{\r\n\t\t\tTiXmlNode *root = _pXmlUserLangDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\t\tif (root && !firstCleanDone)\r\n\t\t\t{\r\n\t\t\t\t_pXmlUserLangDoc->RemoveChild(root);\r\n\t\t\t\t_pXmlUserLangDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t\t\t\tfirstCleanDone = true;\r\n\t\t\t}\r\n\r\n\t\t\troot = _pXmlUserLangDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\r\n\t\t\tfor (int i = udl._indexRange.first; i < udl._indexRange.second; ++i)\r\n\t\t\t{\r\n\t\t\t\tinsertUserLang2Tree(root, _userLangArray[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tbool deleteAll = true;\r\n\tfor (bool del : deleteState)\r\n\t{\r\n\t\tif (!del)\r\n\t\t{\r\n\t\t\tdeleteAll = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (firstCleanDone) // at least one udl is for saving, the udl to be deleted are ignored\r\n\t{\r\n\t\t_pXmlUserLangDoc->SaveFile();\r\n\t}\r\n\telse if (deleteAll)\r\n\t{\r\n\t\tif (::PathFileExists(_userDefineLangPath.c_str()))\r\n\t\t{\r\n\t\t\t::DeleteFile(_userDefineLangPath.c_str());\r\n\t\t}\r\n\t}\r\n\t// else nothing to change, do nothing\r\n}\r\n\r\nvoid NppParameters::writeNonDefaultUDL()\r\n{\r\n\tfor (auto udl : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tif (udl._isDirty && udl._udlXmlDoc != nullptr && udl._udlXmlDoc != _pXmlUserLangDoc)\r\n\t\t{\r\n\t\t\tif (udl._indexRange.second == udl._indexRange.first) // no more udl for this xmldoc container\r\n\t\t\t{\r\n\t\t\t\t// no need to save, delete file\r\n\t\t\t\tconst TCHAR* docFilePath = udl._udlXmlDoc->Value();\r\n\t\t\t\tif (docFilePath && ::PathFileExists(docFilePath))\r\n\t\t\t\t{\r\n\t\t\t\t\t::DeleteFile(docFilePath);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tTiXmlNode *root = udl._udlXmlDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\t\t\tif (root)\r\n\t\t\t\t{\r\n\t\t\t\t\tudl._udlXmlDoc->RemoveChild(root);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tudl._udlXmlDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\r\n\t\t\t\troot = udl._udlXmlDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\r\n\t\t\t\tfor (int i = udl._indexRange.first; i < udl._indexRange.second; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tinsertUserLang2Tree(root, _userLangArray[i]);\r\n\t\t\t\t}\r\n\t\t\t\tudl._udlXmlDoc->SaveFile();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::writeNeed2SaveUDL()\r\n{\r\n\twriteDefaultUDL();\r\n\twriteNonDefaultUDL();\r\n}\r\n\r\n\r\nvoid NppParameters::insertCmd(TiXmlNode *shortcutsRoot, const CommandShortcut & cmd)\r\n{\r\n\tconst KeyCombo & key = cmd.getKeyCombo();\r\n\tTiXmlNode *sc = shortcutsRoot->InsertEndChild(TiXmlElement(TEXT(\"Shortcut\")));\r\n\tsc->ToElement()->SetAttribute(TEXT(\"id\"), cmd.getID());\r\n\tsc->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tsc->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tsc->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tsc->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n}\r\n\r\n\r\nvoid NppParameters::insertMacro(TiXmlNode *macrosRoot, const MacroShortcut & macro)\r\n{\r\n\tconst KeyCombo & key = macro.getKeyCombo();\r\n\tTiXmlNode *macroRoot = macrosRoot->InsertEndChild(TiXmlElement(TEXT(\"Macro\")));\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"name\"), macro.getMenuName());\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n\r\n\tfor (size_t i = 0, len = macro._macro.size(); i < len ; ++i)\r\n\t{\r\n\t\tTiXmlNode *actionNode = macroRoot->InsertEndChild(TiXmlElement(TEXT(\"Action\")));\r\n\t\tconst recordedMacroStep & action = macro._macro[i];\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"type\"), action._macroType);\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"message\"), action._message);\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"wParam\"), static_cast<int>(action._wParameter));\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"lParam\"), static_cast<int>(action._lParameter));\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"sParam\"), action._sParameter.c_str());\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::insertUserCmd(TiXmlNode *userCmdRoot, const UserCommand & userCmd)\r\n{\r\n\tconst KeyCombo & key = userCmd.getKeyCombo();\r\n\tTiXmlNode *cmdRoot = userCmdRoot->InsertEndChild(TiXmlElement(TEXT(\"Command\")));\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"name\"), userCmd.getMenuName());\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n\tcmdRoot->InsertEndChild(TiXmlText(userCmd._cmd.c_str()));\r\n}\r\n\r\n\r\nvoid NppParameters::insertPluginCmd(TiXmlNode *pluginCmdRoot, const PluginCmdShortcut & pluginCmd)\r\n{\r\n\tconst KeyCombo & key = pluginCmd.getKeyCombo();\r\n\tTiXmlNode *pluginCmdNode = pluginCmdRoot->InsertEndChild(TiXmlElement(TEXT(\"PluginCommand\")));\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"moduleName\"), pluginCmd.getModuleName());\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"internalID\"), pluginCmd.getInternalID());\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n}\r\n\r\n\r\nvoid NppParameters::insertScintKey(TiXmlNode *scintKeyRoot, const ScintillaKeyMap & scintKeyMap)\r\n{\r\n\tTiXmlNode *keyRoot = scintKeyRoot->InsertEndChild(TiXmlElement(TEXT(\"ScintKey\")));\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"ScintID\"), scintKeyMap.getScintillaKeyID());\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"menuCmdID\"), scintKeyMap.getMenuCmdID());\r\n\r\n\t//Add main shortcut\r\n\tKeyCombo key = scintKeyMap.getKeyComboByIndex(0);\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n\r\n\t//Add additional shortcuts\r\n\tsize_t size = scintKeyMap.getSize();\r\n\tif (size > 1)\r\n\t{\r\n\t\tfor (size_t i = 1; i < size; ++i)\r\n\t\t{\r\n\t\t\tTiXmlNode *keyNext = keyRoot->InsertEndChild(TiXmlElement(TEXT(\"NextKey\")));\r\n\t\t\tkey = scintKeyMap.getKeyComboByIndex(i);\r\n\t\t\tkeyNext->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\t\tkeyNext->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\t\tkeyNext->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\t\tkeyNext->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::writeSession(const Session & session, const TCHAR *fileName)\r\n{\r\n\tconst TCHAR *pathName = fileName?fileName:_sessionPath.c_str();\r\n\r\n\tTiXmlDocument* pXmlSessionDoc = new TiXmlDocument(pathName);\r\n\r\n\tTiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));\r\n\tpXmlSessionDoc->LinkEndChild(decl);\r\n\r\n\tTiXmlNode *root = pXmlSessionDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\r\n\tif (root)\r\n\t{\r\n\t\tTiXmlNode *sessionNode = root->InsertEndChild(TiXmlElement(TEXT(\"Session\")));\r\n\t\t(sessionNode->ToElement())->SetAttribute(TEXT(\"activeView\"), static_cast<int32_t>(session._activeView));\r\n\r\n\t\tstruct ViewElem {\r\n\t\t\tTiXmlNode *viewNode;\r\n\t\t\tvector<sessionFileInfo> *viewFiles;\r\n\t\t\tsize_t activeIndex;\r\n\t\t};\r\n\t\tconst int nbElem = 2;\r\n\t\tViewElem viewElems[nbElem];\r\n\t\tviewElems[0].viewNode = sessionNode->InsertEndChild(TiXmlElement(TEXT(\"mainView\")));\r\n\t\tviewElems[1].viewNode = sessionNode->InsertEndChild(TiXmlElement(TEXT(\"subView\")));\r\n\t\tviewElems[0].viewFiles = (vector<sessionFileInfo> *)(&(session._mainViewFiles));\r\n\t\tviewElems[1].viewFiles = (vector<sessionFileInfo> *)(&(session._subViewFiles));\r\n\t\tviewElems[0].activeIndex = session._activeMainIndex;\r\n\t\tviewElems[1].activeIndex = session._activeSubIndex;\r\n\r\n\t\tfor (size_t k = 0; k < nbElem ; ++k)\r\n\t\t{\r\n\t\t\t(viewElems[k].viewNode->ToElement())->SetAttribute(TEXT(\"activeIndex\"), static_cast<int32_t>(viewElems[k].activeIndex));\r\n\t\t\tvector<sessionFileInfo> & viewSessionFiles = *(viewElems[k].viewFiles);\r\n\r\n\t\t\tfor (size_t i = 0, len = viewElems[k].viewFiles->size(); i < len ; ++i)\r\n\t\t\t{\r\n\t\t\t\tTiXmlNode *fileNameNode = viewElems[k].viewNode->InsertEndChild(TiXmlElement(TEXT(\"File\")));\r\n\r\n\t\t\t\tTCHAR szInt64[64];\r\n\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"firstVisibleLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._firstVisibleLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"xOffset\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._xOffset), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"scrollWidth\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._scrollWidth), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"startPos\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._startPos), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"endPos\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._endPos), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"selMode\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._selMode), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"offset\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._offset), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"wrapCount\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._wrapCount), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"lang\"), viewSessionFiles[i]._langName.c_str());\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"encoding\"), viewSessionFiles[i]._encoding);\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"userReadOnly\"), (viewSessionFiles[i]._isUserReadOnly && !viewSessionFiles[i]._isMonitoring) ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"filename\"), viewSessionFiles[i]._fileName.c_str());\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"backupFilePath\"), viewSessionFiles[i]._backupFilePath.c_str());\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"originalFileLastModifTimestamp\"), static_cast<int32_t>(viewSessionFiles[i]._originalFileLastModifTimestamp.dwLowDateTime));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"originalFileLastModifTimestampHigh\"), static_cast<int32_t>(viewSessionFiles[i]._originalFileLastModifTimestamp.dwHighDateTime));\r\n\r\n\t\t\t\t// docMap \r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapFirstVisibleDisplayLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._firstVisibleDisplayLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapFirstVisibleDocLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._firstVisibleDocLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapLastVisibleDocLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._lastVisibleDocLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapNbLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._nbLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapHigherPos\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._higherPos), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapWidth\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._width), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapHeight\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._height), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapKByteInDoc\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._KByteInDoc), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapWrapIndentMode\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._wrapIndentMode), szInt64, 10));\r\n\t\t\t\tfileNameNode->ToElement()->SetAttribute(TEXT(\"mapIsWrap\"), viewSessionFiles[i]._mapPos._isWrap ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\t\t\t\tfor (size_t j = 0, len = viewSessionFiles[i]._marks.size() ; j < len ; ++j)\r\n\t\t\t\t{\r\n\t\t\t\t\tsize_t markLine = viewSessionFiles[i]._marks[j];\r\n\t\t\t\t\tTiXmlNode *markNode = fileNameNode->InsertEndChild(TiXmlElement(TEXT(\"Mark\")));\r\n\t\t\t\t\tmarkNode->ToElement()->SetAttribute(TEXT(\"line\"), _ui64tot(static_cast<ULONGLONG>(markLine), szInt64, 10));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (size_t j = 0, len = viewSessionFiles[i]._foldStates.size() ; j < len ; ++j)\r\n\t\t\t\t{\r\n\t\t\t\t\tsize_t foldLine = viewSessionFiles[i]._foldStates[j];\r\n\t\t\t\t\tTiXmlNode *foldNode = fileNameNode->InsertEndChild(TiXmlElement(TEXT(\"Fold\")));\r\n\t\t\t\t\tfoldNode->ToElement()->SetAttribute(TEXT(\"line\"), _ui64tot(static_cast<ULONGLONG>(foldLine), szInt64, 10));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (session._includeFileBrowser)\r\n\t\t{\r\n\t\t\t// Node structure and naming corresponds to config.xml\r\n\t\t\tTiXmlNode* fileBrowserRootNode = sessionNode->InsertEndChild(TiXmlElement(TEXT(\"FileBrowser\")));\r\n\t\t\tfileBrowserRootNode->ToElement()->SetAttribute(TEXT(\"latestSelectedItem\"), session._fileBrowserSelectedItem.c_str());\r\n\t\t\tfor (const auto& root : session._fileBrowserRoots)\r\n\t\t\t{\r\n\t\t\t\tTiXmlNode *fileNameNode = fileBrowserRootNode->InsertEndChild(TiXmlElement(TEXT(\"root\")));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"foldername\"), root.c_str());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpXmlSessionDoc->SaveFile();\r\n\r\n\tdelete pXmlSessionDoc;\r\n}\r\n\r\n\r\nvoid NppParameters::writeShortcuts()\r\n{\r\n\tif (!_isAnyShortcutModified) return;\r\n\r\n\tif (!_pXmlShortcutDoc)\r\n\t{\r\n\t\t//do the treatment\r\n\t\t_pXmlShortcutDoc = new TiXmlDocument(_shortcutsPath);\r\n\t\tTiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));\r\n\t\t_pXmlShortcutDoc->LinkEndChild(decl);\r\n\t}\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t{\r\n\t\troot = _pXmlShortcutDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *cmdRoot = root->FirstChild(TEXT(\"InternalCommands\"));\r\n\tif (cmdRoot)\r\n\t\troot->RemoveChild(cmdRoot);\r\n\r\n\tcmdRoot = root->InsertEndChild(TiXmlElement(TEXT(\"InternalCommands\")));\r\n\tfor (size_t i = 0, len = _customizedShortcuts.size(); i < len ; ++i)\r\n\t{\r\n\t\tsize_t index = _customizedShortcuts[i];\r\n\t\tCommandShortcut csc = _shortcuts[index];\r\n\t\tinsertCmd(cmdRoot, csc);\r\n\t}\r\n\r\n\tTiXmlNode *macrosRoot = root->FirstChild(TEXT(\"Macros\"));\r\n\tif (macrosRoot)\r\n\t\troot->RemoveChild(macrosRoot);\r\n\r\n\tmacrosRoot = root->InsertEndChild(TiXmlElement(TEXT(\"Macros\")));\r\n\r\n\tfor (size_t i = 0, len = _macros.size(); i < len ; ++i)\r\n\t{\r\n\t\tinsertMacro(macrosRoot, _macros[i]);\r\n\t}\r\n\r\n\tTiXmlNode *userCmdRoot = root->FirstChild(TEXT(\"UserDefinedCommands\"));\r\n\tif (userCmdRoot)\r\n\t\troot->RemoveChild(userCmdRoot);\r\n\r\n\tuserCmdRoot = root->InsertEndChild(TiXmlElement(TEXT(\"UserDefinedCommands\")));\r\n\r\n\tfor (size_t i = 0, len = _userCommands.size(); i < len ; ++i)\r\n\t{\r\n\t\tinsertUserCmd(userCmdRoot, _userCommands[i]);\r\n\t}\r\n\r\n\tTiXmlNode *pluginCmdRoot = root->FirstChild(TEXT(\"PluginCommands\"));\r\n\tif (pluginCmdRoot)\r\n\t\troot->RemoveChild(pluginCmdRoot);\r\n\r\n\tpluginCmdRoot = root->InsertEndChild(TiXmlElement(TEXT(\"PluginCommands\")));\r\n\tfor (size_t i = 0, len = _pluginCustomizedCmds.size(); i < len ; ++i)\r\n\t{\r\n\t\tinsertPluginCmd(pluginCmdRoot, _pluginCommands[_pluginCustomizedCmds[i]]);\r\n\t}\r\n\r\n\tTiXmlNode *scitillaKeyRoot = root->FirstChild(TEXT(\"ScintillaKeys\"));\r\n\tif (scitillaKeyRoot)\r\n\t\troot->RemoveChild(scitillaKeyRoot);\r\n\r\n\tscitillaKeyRoot = root->InsertEndChild(TiXmlElement(TEXT(\"ScintillaKeys\")));\r\n\tfor (size_t i = 0, len = _scintillaModifiedKeyIndices.size(); i < len ; ++i)\r\n\t{\r\n\t\tinsertScintKey(scitillaKeyRoot, _scintillaKeyCommands[_scintillaModifiedKeyIndices[i]]);\r\n\t}\r\n\t_pXmlShortcutDoc->SaveFile();\r\n}\r\n\r\n\r\nint NppParameters::addUserLangToEnd(const UserLangContainer & userLang, const TCHAR *newName)\r\n{\r\n\tif (isExistingUserLangName(newName))\r\n\t\treturn -1;\r\n\tunsigned char iBegin = _nbUserLang;\r\n\t_userLangArray[_nbUserLang] = new UserLangContainer();\r\n\t*(_userLangArray[_nbUserLang]) = userLang;\r\n\t_userLangArray[_nbUserLang]->_name = newName;\r\n\t++_nbUserLang;\r\n\tunsigned char iEnd = _nbUserLang;\r\n\r\n\t_pXmlUserLangsDoc.push_back(UdlXmlFileState(nullptr, true, make_pair(iBegin, iEnd)));\r\n\r\n\t// imported UDL from xml file will be added into default udl, so we should make default udl dirty\r\n\tsetUdlXmlDirtyFromXmlDoc(_pXmlUserLangDoc);\r\n\r\n\treturn _nbUserLang-1;\r\n}\r\n\r\n\r\nvoid NppParameters::removeUserLang(size_t index)\r\n{\r\n\tif (static_cast<int32_t>(index) >= _nbUserLang)\r\n\t\treturn;\r\n\tdelete _userLangArray[index];\r\n\r\n\tfor (int32_t i = static_cast<int32_t>(index); i < (_nbUserLang - 1); ++i)\r\n\t\t_userLangArray[i] = _userLangArray[i+1];\r\n\t_nbUserLang--;\r\n\r\n\tremoveIndexFromXmlUdls(index);\r\n}\r\n\r\n\r\nvoid NppParameters::feedUserSettings(TiXmlNode *settingsRoot)\r\n{\r\n\tconst TCHAR *boolStr;\r\n\tTiXmlNode *globalSettingNode = settingsRoot->FirstChildElement(TEXT(\"Global\"));\r\n\tif (globalSettingNode)\r\n\t{\r\n\t\tboolStr = (globalSettingNode->ToElement())->Attribute(TEXT(\"caseIgnored\"));\r\n\t\tif (boolStr)\r\n\t\t\t_userLangArray[_nbUserLang - 1]->_isCaseIgnored = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\t\tboolStr = (globalSettingNode->ToElement())->Attribute(TEXT(\"allowFoldOfComments\"));\r\n\t\tif (boolStr)\r\n\t\t\t_userLangArray[_nbUserLang - 1]->_allowFoldOfComments = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\t\t(globalSettingNode->ToElement())->Attribute(TEXT(\"forcePureLC\"), &_userLangArray[_nbUserLang - 1]->_forcePureLC);\r\n\t\t(globalSettingNode->ToElement())->Attribute(TEXT(\"decimalSeparator\"), &_userLangArray[_nbUserLang - 1]->_decimalSeparator);\r\n\r\n\t\tboolStr = (globalSettingNode->ToElement())->Attribute(TEXT(\"foldCompact\"));\r\n\t\tif (boolStr)\r\n\t\t\t_userLangArray[_nbUserLang - 1]->_foldCompact = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\t}\r\n\r\n\tTiXmlNode *prefixNode = settingsRoot->FirstChildElement(TEXT(\"Prefix\"));\r\n\tif (prefixNode)\r\n\t{\r\n\t\tconst TCHAR *udlVersion = _userLangArray[_nbUserLang - 1]->_udlVersion.c_str();\r\n\t\tif (!lstrcmp(udlVersion, TEXT(\"2.1\")) || !lstrcmp(udlVersion, TEXT(\"2.0\")))\r\n\t\t{\r\n\t\t\tfor (int i = 0 ; i < SCE_USER_TOTAL_KEYWORD_GROUPS ; ++i)\r\n\t\t\t{\r\n\t\t\t\tboolStr = (prefixNode->ToElement())->Attribute(globalMappper().keywordNameMapper[i+SCE_USER_KWLIST_KEYWORDS1]);\r\n\t\t\t\tif (boolStr)\r\n\t\t\t\t\t_userLangArray[_nbUserLang - 1]->_isPrefix[i] = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\t// support for old style (pre 2.0)\r\n\t\t{\r\n\t\t\tTCHAR names[SCE_USER_TOTAL_KEYWORD_GROUPS][7] = {TEXT(\"words1\"), TEXT(\"words2\"), TEXT(\"words3\"), TEXT(\"words4\")};\r\n\t\t\tfor (int i = 0 ; i < 4 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tboolStr = (prefixNode->ToElement())->Attribute(names[i]);\r\n\t\t\t\tif (boolStr)\r\n\t\t\t\t\t_userLangArray[_nbUserLang - 1]->_isPrefix[i] = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::feedUserKeywordList(TiXmlNode *node)\r\n{\r\n\tconst TCHAR * udlVersion = _userLangArray[_nbUserLang - 1]->_udlVersion.c_str();\r\n\tint id = -1;\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"Keywords\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Keywords\")))\r\n\t{\r\n\t\tconst TCHAR * keywordsName = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\tTiXmlNode *valueNode = childNode->FirstChild();\r\n\t\tif (valueNode)\r\n\t\t{\r\n\t\t\tconst TCHAR *kwl = nullptr;\r\n\t\t\tif (!lstrcmp(udlVersion, TEXT(\"\")) && !lstrcmp(keywordsName, TEXT(\"Delimiters\")))\t// support for old style (pre 2.0)\r\n\t\t\t{\r\n\t\t\t\tbasic_string<TCHAR> temp;\r\n\t\t\t\tkwl = (valueNode)?valueNode->Value():TEXT(\"000000\");\r\n\r\n\t\t\t\ttemp += TEXT(\"00\");\t if (kwl[0] != '0') temp += kwl[0];\t temp += TEXT(\" 01\");\r\n\t\t\t\ttemp += TEXT(\" 02\");\tif (kwl[3] != '0') temp += kwl[3];\r\n\t\t\t\ttemp += TEXT(\" 03\");\tif (kwl[1] != '0') temp += kwl[1];\t temp += TEXT(\" 04\");\r\n\t\t\t\ttemp += TEXT(\" 05\");\tif (kwl[4] != '0') temp += kwl[4];\r\n\t\t\t\ttemp += TEXT(\" 06\");\tif (kwl[2] != '0') temp += kwl[2];\t temp += TEXT(\" 07\");\r\n\t\t\t\ttemp += TEXT(\" 08\");\tif (kwl[5] != '0') temp += kwl[5];\r\n\r\n\t\t\t\ttemp += TEXT(\" 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23\");\r\n\t\t\t\twcscpy_s(_userLangArray[_nbUserLang - 1]->_keywordLists[SCE_USER_KWLIST_DELIMITERS], temp.c_str());\r\n\t\t\t}\r\n\t\t\telse if (!lstrcmp(keywordsName, TEXT(\"Comment\")))\r\n\t\t\t{\r\n\t\t\t\tkwl = (valueNode)?valueNode->Value():TEXT(\"\");\r\n\t\t\t\t//int len = _tcslen(kwl);\r\n\t\t\t\tbasic_string<TCHAR> temp{TEXT(\" \")};\r\n\r\n\t\t\t\ttemp += kwl;\r\n\t\t\t\tsize_t pos = 0;\r\n\r\n\t\t\t\tpos = temp.find(TEXT(\" 0\"));\r\n\t\t\t\twhile (pos != string::npos)\r\n\t\t\t\t{\r\n\t\t\t\t\ttemp.replace(pos, 2, TEXT(\" 00\"));\r\n\t\t\t\t\tpos = temp.find(TEXT(\" 0\"), pos+1);\r\n\t\t\t\t}\r\n\t\t\t\tpos = temp.find(TEXT(\" 1\"));\r\n\t\t\t\twhile (pos != string::npos)\r\n\t\t\t\t{\r\n\t\t\t\t\ttemp.replace(pos, 2, TEXT(\" 03\"));\r\n\t\t\t\t\tpos = temp.find(TEXT(\" 1\"));\r\n\t\t\t\t}\r\n\t\t\t\tpos = temp.find(TEXT(\" 2\"));\r\n\t\t\t\twhile (pos != string::npos)\r\n\t\t\t\t{\r\n\t\t\t\t\ttemp.replace(pos, 2, TEXT(\" 04\"));\r\n\t\t\t\t\tpos = temp.find(TEXT(\" 2\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttemp += TEXT(\" 01 02\");\r\n\t\t\t\tif (temp[0] == ' ')\r\n\t\t\t\t\ttemp.erase(0, 1);\r\n\r\n\t\t\t\twcscpy_s(_userLangArray[_nbUserLang - 1]->_keywordLists[SCE_USER_KWLIST_COMMENTS], temp.c_str());\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tkwl = (valueNode)?valueNode->Value():TEXT(\"\");\r\n\t\t\t\tif (globalMappper().keywordIdMapper.find(keywordsName) != globalMappper().keywordIdMapper.end())\r\n\t\t\t\t{\r\n\t\t\t\t\tid = globalMappper().keywordIdMapper[keywordsName];\r\n\t\t\t\t\tif (_tcslen(kwl) < max_char)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twcscpy_s(_userLangArray[_nbUserLang - 1]->_keywordLists[id], kwl);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twcscpy_s(_userLangArray[_nbUserLang - 1]->_keywordLists[id], TEXT(\"imported string too long, needs to be < max_char(30720)\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedUserStyles(TiXmlNode *node)\r\n{\r\n\tint id = -1;\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"WordsStyle\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"WordsStyle\")))\r\n\t{\r\n\t\tconst TCHAR *styleName = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\tif (styleName)\r\n\t\t{\r\n\t\t\tif (globalMappper().styleIdMapper.find(styleName) != globalMappper().styleIdMapper.end())\r\n\t\t\t{\r\n\t\t\t\tid = globalMappper().styleIdMapper[styleName];\r\n\t\t\t\t_userLangArray[_nbUserLang - 1]->_styles.addStyler((id | L_USER << 16), childNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nbool NppParameters::feedStylerArray(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *styleRoot = node->FirstChildElement(TEXT(\"LexerStyles\"));\r\n\tif (!styleRoot) return false;\r\n\r\n\t// For each lexer\r\n\tfor (TiXmlNode *childNode = styleRoot->FirstChildElement(TEXT(\"LexerType\"));\r\n\t\t childNode ;\r\n\t\t childNode = childNode->NextSibling(TEXT(\"LexerType\")) )\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *lexerName = element->Attribute(TEXT(\"name\"));\r\n\t\tconst TCHAR *lexerDesc = element->Attribute(TEXT(\"desc\"));\r\n\t\tconst TCHAR *lexerUserExt = element->Attribute(TEXT(\"ext\"));\r\n\t\tconst TCHAR *lexerExcluded = element->Attribute(TEXT(\"excluded\"));\r\n\t\tif (lexerName)\r\n\t\t{\r\n\t\t\t_lexerStylerVect.addLexerStyler(lexerName, lexerDesc, lexerUserExt, childNode);\r\n\t\t\tif (lexerExcluded != NULL && (lstrcmp(lexerExcluded, TEXT(\"yes\")) == 0))\r\n\t\t\t{\r\n\t\t\t\tint index = getExternalLangIndexFromName(lexerName);\r\n\t\t\t\tif (index != -1)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)(index + L_EXTERNAL)));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_lexerStylerVect.sort();\r\n\r\n\t// The global styles for all lexers\r\n\tTiXmlNode *globalStyleRoot = node->FirstChildElement(TEXT(\"GlobalStyles\"));\r\n\tif (!globalStyleRoot) return false;\r\n\r\n\tfor (TiXmlNode *childNode = globalStyleRoot->FirstChildElement(TEXT(\"WidgetStyle\"));\r\n\t\t childNode ;\r\n\t\t childNode = childNode->NextSibling(TEXT(\"WidgetStyle\")) )\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *styleIDStr = element->Attribute(TEXT(\"styleID\"));\r\n\r\n\t\tint styleID = -1;\r\n\t\tif ((styleID = decStrVal(styleIDStr)) != -1)\r\n\t\t{\r\n\t\t\t_widgetStyleArray.addStyler(styleID, childNode);\r\n\t\t}\r\n\t}\r\n\tconst Style* pStyle = _widgetStyleArray.findByName(TEXT(\"EOL custom color\"));\r\n\tif (!pStyle)\r\n\t{\r\n\t\tTiXmlNode* eolColorkNode = globalStyleRoot->InsertEndChild(TiXmlElement(TEXT(\"WidgetStyle\")));\r\n\t\teolColorkNode->ToElement()->SetAttribute(TEXT(\"name\"), TEXT(\"EOL custom color\"));\r\n\t\teolColorkNode->ToElement()->SetAttribute(TEXT(\"styleID\"), TEXT(\"0\"));\r\n\t\teolColorkNode->ToElement()->SetAttribute(TEXT(\"fgColor\"), TEXT(\"DADADA\"));\r\n\r\n\t\t_widgetStyleArray.addStyler(0, eolColorkNode);\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nvoid LexerStylerArray::addLexerStyler(const TCHAR *lexerName, const TCHAR *lexerDesc, const TCHAR *lexerUserExt , TiXmlNode *lexerNode)\r\n{\r\n\t_lexerStylerVect.emplace_back();\r\n\tLexerStyler & ls = _lexerStylerVect.back();\r\n\tls.setLexerName(lexerName);\r\n\tif (lexerDesc)\r\n\t\tls.setLexerDesc(lexerDesc);\r\n\r\n\tif (lexerUserExt)\r\n\t\tls.setLexerUserExt(lexerUserExt);\r\n\r\n\tfor (TiXmlNode *childNode = lexerNode->FirstChildElement(TEXT(\"WordsStyle\"));\r\n\t\t childNode ;\r\n\t\t childNode = childNode->NextSibling(TEXT(\"WordsStyle\")) )\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *styleIDStr = element->Attribute(TEXT(\"styleID\"));\r\n\r\n\t\tif (styleIDStr)\r\n\t\t{\r\n\t\t\tint styleID = -1;\r\n\t\t\tif ((styleID = decStrVal(styleIDStr)) != -1)\r\n\t\t\t{\r\n\t\t\t\tls.addStyler(styleID, childNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid StyleArray::addStyler(int styleID, TiXmlNode *styleNode)\r\n{\r\n\tbool isUser = styleID >> 16 == L_USER;\r\n\tif (isUser)\r\n\t{\r\n\t\tstyleID = (styleID & 0xFFFF);\r\n\t\tif (styleID >= SCE_USER_STYLE_TOTAL_STYLES || findByID(styleID))\r\n\t\t\treturn;\r\n\t}\r\n\r\n\t_styleVect.emplace_back();\r\n\tStyle & s = _styleVect.back();\r\n\ts._styleID = styleID;\r\n\r\n\tif (styleNode)\r\n\t{\r\n\t\tTiXmlElement *element = styleNode->ToElement();\r\n\r\n\t\t// TODO: translate to English\r\n\t\t// Pour _fgColor, _bgColor :\r\n\t\t// RGB() | (result & 0xFF000000) c'est pour le cas de -1 (0xFFFFFFFF)\r\n\t\t// retourn\u00e9 par hexStrVal(str)\r\n\t\tconst TCHAR *str = element->Attribute(TEXT(\"name\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\tif (isUser)\r\n\t\t\t\ts._styleDesc = globalMappper().styleNameMapper[styleID];\r\n\t\t\telse\r\n\t\t\t\ts._styleDesc = str;\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"fgColor\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\tunsigned long result = hexStrVal(str);\r\n\t\t\ts._fgColor = (RGB((result >> 16) & 0xFF, (result >> 8) & 0xFF, result & 0xFF)) | (result & 0xFF000000);\r\n\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"bgColor\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\tunsigned long result = hexStrVal(str);\r\n\t\t\ts._bgColor = (RGB((result >> 16) & 0xFF, (result >> 8) & 0xFF, result & 0xFF)) | (result & 0xFF000000);\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"colorStyle\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._colorStyle = decStrVal(str);\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"fontName\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._fontName = str;\r\n\t\t\ts._isFontEnabled = true;\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"fontStyle\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._fontStyle = decStrVal(str);\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"fontSize\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._fontSize = decStrVal(str);\r\n\t\t}\r\n\t\tstr = element->Attribute(TEXT(\"nesting\"));\r\n\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._nesting = decStrVal(str);\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"keywordClass\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._keywordClass = getKwClassFromName(str);\r\n\t\t}\r\n\r\n\t\tTiXmlNode *v = styleNode->FirstChild();\r\n\t\tif (v)\r\n\t\t{\r\n\t\t\ts._keywords = v->Value();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nbool NppParameters::writeRecentFileHistorySettings(int nbMaxFile) const\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *historyNode = nppRoot->FirstChildElement(TEXT(\"History\"));\r\n\tif (!historyNode)\r\n\t{\r\n\t\thistoryNode = nppRoot->InsertEndChild(TiXmlElement(TEXT(\"History\")));\r\n\t}\r\n\r\n\t(historyNode->ToElement())->SetAttribute(TEXT(\"nbMaxFile\"), nbMaxFile!=-1?nbMaxFile:_nbMaxRecentFile);\r\n\t(historyNode->ToElement())->SetAttribute(TEXT(\"inSubMenu\"), _putRecentFileInSubMenu?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(historyNode->ToElement())->SetAttribute(TEXT(\"customLength\"), _recentFileCustomLength);\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::writeProjectPanelsSettings() const\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *oldProjPanelRootNode = nppRoot->FirstChildElement(TEXT(\"ProjectPanels\"));\r\n\tif (oldProjPanelRootNode)\r\n\t{\r\n\t\t// Erase the Project Panel root\r\n\t\tnppRoot->RemoveChild(oldProjPanelRootNode);\r\n\t}\r\n\r\n\t// Create the Project Panel root\r\n\tTiXmlElement projPanelRootNode{TEXT(\"ProjectPanels\")};\r\n\r\n\t// Add 3 Project Panel parameters\r\n\tfor (int32_t i = 0 ; i < 3 ; ++i)\r\n\t{\r\n\t\tTiXmlElement projPanelNode{TEXT(\"ProjectPanel\")};\r\n\t\t(projPanelNode.ToElement())->SetAttribute(TEXT(\"id\"), i);\r\n\t\t(projPanelNode.ToElement())->SetAttribute(TEXT(\"workSpaceFile\"), _workSpaceFilePathes[i]);\r\n\r\n\t\t(projPanelRootNode.ToElement())->InsertEndChild(projPanelNode);\r\n\t}\r\n\r\n\t// (Re)Insert the Project Panel root\r\n\t(nppRoot->ToElement())->InsertEndChild(projPanelRootNode);\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::writeFileBrowserSettings(const vector<generic_string> & rootPaths, const generic_string & latestSelectedItemPath) const\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *oldFileBrowserRootNode = nppRoot->FirstChildElement(TEXT(\"FileBrowser\"));\r\n\tif (oldFileBrowserRootNode)\r\n\t{\r\n\t\t// Erase the file broser root\r\n\t\tnppRoot->RemoveChild(oldFileBrowserRootNode);\r\n\t}\r\n\r\n\t// Create the file browser root\r\n\tTiXmlElement fileBrowserRootNode{ TEXT(\"FileBrowser\") };\r\n\r\n\tif (rootPaths.size() != 0)\r\n\t{\r\n\t\tfileBrowserRootNode.SetAttribute(TEXT(\"latestSelectedItem\"), latestSelectedItemPath.c_str());\r\n\r\n\t\t// add roots\r\n\t\tsize_t len = rootPaths.size();\r\n\t\tfor (size_t i = 0; i < len; ++i)\r\n\t\t{\r\n\t\t\tTiXmlElement fbRootNode{ TEXT(\"root\") };\r\n\t\t\t(fbRootNode.ToElement())->SetAttribute(TEXT(\"foldername\"), rootPaths[i].c_str());\r\n\r\n\t\t\t(fileBrowserRootNode.ToElement())->InsertEndChild(fbRootNode);\r\n\t\t}\r\n\t}\r\n\r\n\t// (Re)Insert the file browser root\r\n\t(nppRoot->ToElement())->InsertEndChild(fileBrowserRootNode);\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::writeHistory(const TCHAR *fullpath)\r\n{\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *historyNode = nppRoot->FirstChildElement(TEXT(\"History\"));\r\n\tif (!historyNode)\r\n\t{\r\n\t\thistoryNode = nppRoot->InsertEndChild(TiXmlElement(TEXT(\"History\")));\r\n\t}\r\n\r\n\tTiXmlElement recentFileNode(TEXT(\"File\"));\r\n\t(recentFileNode.ToElement())->SetAttribute(TEXT(\"filename\"), fullpath);\r\n\r\n\t(historyNode->ToElement())->InsertEndChild(recentFileNode);\r\n\treturn true;\r\n}\r\n\r\nTiXmlNode * NppParameters::getChildElementByAttribut(TiXmlNode *pere, const TCHAR *childName,\\\r\n\t\t\tconst TCHAR *attributName, const TCHAR *attributVal) const\r\n{\r\n\tfor (TiXmlNode *childNode = pere->FirstChildElement(childName);\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(childName))\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *val = element->Attribute(attributName);\r\n\t\tif (val)\r\n\t\t{\r\n\t\t\tif (!lstrcmp(val, attributVal))\r\n\t\t\t\treturn childNode;\r\n\t\t}\r\n\t}\r\n\treturn NULL;\r\n}\r\n\r\n// 2 restes : L_H, L_USER\r\nLangType NppParameters::getLangIDFromStr(const TCHAR *langName)\r\n{\r\n\tint lang = static_cast<int32_t>(L_TEXT);\r\n\tfor (; lang < L_EXTERNAL; ++lang)\r\n\t{\r\n\t\tconst TCHAR * name = ScintillaEditView::_langNameInfoArray[lang]._langName;\r\n\t\tif (!lstrcmp(name, langName)) //found lang?\r\n\t\t{\r\n\t\t\treturn (LangType)lang;\r\n\t\t}\r\n\t}\r\n\r\n\t//Cannot find language, check if its an external one\r\n\r\n\tLangType l = (LangType)lang;\r\n\tif (l == L_EXTERNAL) //try find external lexer\r\n\t{\r\n\t\tint id = NppParameters::getInstance().getExternalLangIndexFromName(langName);\r\n\t\tif (id != -1) return (LangType)(id + L_EXTERNAL);\r\n\t}\r\n\r\n\treturn L_TEXT;\r\n}\r\n\r\ngeneric_string NppParameters::getLocPathFromStr(const generic_string & localizationCode)\r\n{\r\n\tif (localizationCode == TEXT(\"af\"))\r\n\t\treturn TEXT(\"afrikaans.xml\");\r\n\tif (localizationCode == TEXT(\"sq\"))\r\n\t\treturn TEXT(\"albanian.xml\");\r\n\tif (localizationCode == TEXT(\"ar\") || localizationCode == TEXT(\"ar-dz\") || localizationCode == TEXT(\"ar-bh\") || localizationCode == TEXT(\"ar-eg\") ||localizationCode == TEXT(\"ar-iq\") || localizationCode == TEXT(\"ar-jo\") || localizationCode == TEXT(\"ar-kw\") || localizationCode == TEXT(\"ar-lb\") || localizationCode == TEXT(\"ar-ly\") || localizationCode == TEXT(\"ar-ma\") || localizationCode == TEXT(\"ar-om\") || localizationCode == TEXT(\"ar-qa\") || localizationCode == TEXT(\"ar-sa\") || localizationCode == TEXT(\"ar-sy\") || localizationCode == TEXT(\"ar-tn\") || localizationCode == TEXT(\"ar-ae\") || localizationCode == TEXT(\"ar-ye\"))\r\n\t\treturn TEXT(\"arabic.xml\");\r\n\tif (localizationCode == TEXT(\"an\"))\r\n\t\treturn TEXT(\"aragonese.xml\");\r\n\tif (localizationCode == TEXT(\"az\"))\r\n\t\treturn TEXT(\"azerbaijani.xml\");\r\n\tif (localizationCode == TEXT(\"eu\"))\r\n\t\treturn TEXT(\"basque.xml\");\r\n\tif (localizationCode == TEXT(\"be\"))\r\n\t\treturn TEXT(\"belarusian.xml\");\r\n\tif (localizationCode == TEXT(\"bn\"))\r\n\t\treturn TEXT(\"bengali.xml\");\r\n\tif (localizationCode == TEXT(\"bs\"))\r\n\t\treturn TEXT(\"bosnian.xml\");\r\n\tif (localizationCode == TEXT(\"pt-br\"))\r\n\t\treturn TEXT(\"brazilian_portuguese.xml\");\r\n\tif (localizationCode == TEXT(\"br-fr\"))\r\n\t\treturn TEXT(\"breton.xml\");\r\n\tif (localizationCode == TEXT(\"bg\"))\r\n\t\treturn TEXT(\"bulgarian.xml\");\r\n\tif (localizationCode == TEXT(\"ca\"))\r\n\t\treturn TEXT(\"catalan.xml\");\r\n\tif (localizationCode == TEXT(\"zh-tw\") || localizationCode == TEXT(\"zh-hk\") || localizationCode == TEXT(\"zh-sg\"))\r\n\t\treturn TEXT(\"taiwaneseMandarin.xml\");\r\n\tif (localizationCode == TEXT(\"zh\") || localizationCode == TEXT(\"zh-cn\"))\r\n\t\treturn TEXT(\"chineseSimplified.xml\");\r\n\tif (localizationCode == TEXT(\"co\") || localizationCode == TEXT(\"co-fr\"))\r\n\t\treturn TEXT(\"corsican.xml\");\r\n\tif (localizationCode == TEXT(\"hr\"))\r\n\t\treturn TEXT(\"croatian.xml\");\r\n\tif (localizationCode == TEXT(\"cs\"))\r\n\t\treturn TEXT(\"czech.xml\");\r\n\tif (localizationCode == TEXT(\"da\"))\r\n\t\treturn TEXT(\"danish.xml\");\r\n\tif (localizationCode == TEXT(\"nl\") || localizationCode == TEXT(\"nl-be\"))\r\n\t\treturn TEXT(\"dutch.xml\");\r\n\tif (localizationCode == TEXT(\"eo\"))\r\n\t\treturn TEXT(\"esperanto.xml\");\r\n\tif (localizationCode == TEXT(\"et\"))\r\n\t\treturn TEXT(\"estonian.xml\");\r\n\tif (localizationCode == TEXT(\"fa\"))\r\n\t\treturn TEXT(\"farsi.xml\");\r\n\tif (localizationCode == TEXT(\"fi\"))\r\n\t\treturn TEXT(\"finnish.xml\");\r\n\tif (localizationCode == TEXT(\"fr\") || localizationCode == TEXT(\"fr-be\") || localizationCode == TEXT(\"fr-ca\") || localizationCode == TEXT(\"fr-fr\") || localizationCode == TEXT(\"fr-lu\") || localizationCode == TEXT(\"fr-mc\") || localizationCode == TEXT(\"fr-ch\"))\r\n\t\treturn TEXT(\"french.xml\");\r\n\tif (localizationCode == TEXT(\"fur\"))\r\n\t\treturn TEXT(\"friulian.xml\");\r\n\tif (localizationCode == TEXT(\"gl\"))\r\n\t\treturn TEXT(\"galician.xml\");\r\n\tif (localizationCode == TEXT(\"ka\"))\r\n\t\treturn TEXT(\"georgian.xml\");\r\n\tif (localizationCode == TEXT(\"de\") || localizationCode == TEXT(\"de-at\") || localizationCode == TEXT(\"de-de\") || localizationCode == TEXT(\"de-li\") || localizationCode == TEXT(\"de-lu\") || localizationCode == TEXT(\"de-ch\"))\r\n\t\treturn TEXT(\"german.xml\");\r\n\tif (localizationCode == TEXT(\"el\"))\r\n\t\treturn TEXT(\"greek.xml\");\r\n\tif (localizationCode == TEXT(\"gu\"))\r\n\t\treturn TEXT(\"gujarati.xml\");\r\n\tif (localizationCode == TEXT(\"he\"))\r\n\t\treturn TEXT(\"hebrew.xml\");\r\n\tif (localizationCode == TEXT(\"hi\"))\r\n\t\treturn TEXT(\"hindi.xml\");\r\n\tif (localizationCode == TEXT(\"hu\"))\r\n\t\treturn TEXT(\"hungarian.xml\");\r\n\tif (localizationCode == TEXT(\"id\"))\r\n\t\treturn TEXT(\"indonesian.xml\");\r\n\tif (localizationCode == TEXT(\"it\") || localizationCode == TEXT(\"it-ch\"))\r\n\t\treturn TEXT(\"italian.xml\");\r\n\tif (localizationCode == TEXT(\"ja\"))\r\n\t\treturn TEXT(\"japanese.xml\");\r\n\tif (localizationCode == TEXT(\"kn\"))\r\n\t\treturn TEXT(\"kannada.xml\");\r\n\tif (localizationCode == TEXT(\"kk\"))\r\n\t\treturn TEXT(\"kazakh.xml\");\r\n\tif (localizationCode == TEXT(\"ko\") || localizationCode == TEXT(\"ko-kp\") || localizationCode == TEXT(\"ko-kr\"))\r\n\t\treturn TEXT(\"korean.xml\");\r\n\tif (localizationCode == TEXT(\"ku\"))\r\n\t\treturn TEXT(\"kurdish.xml\");\r\n\tif (localizationCode == TEXT(\"ky\"))\r\n\t\treturn TEXT(\"kyrgyz.xml\");\r\n\tif (localizationCode == TEXT(\"lv\"))\r\n\t\treturn TEXT(\"latvian.xml\");\r\n\tif (localizationCode == TEXT(\"lt\"))\r\n\t\treturn TEXT(\"lithuanian.xml\");\r\n\tif (localizationCode == TEXT(\"lb\"))\r\n\t\treturn TEXT(\"luxembourgish.xml\");\r\n\tif (localizationCode == TEXT(\"mk\"))\r\n\t\treturn TEXT(\"macedonian.xml\");\r\n\tif (localizationCode == TEXT(\"ms\"))\r\n\t\treturn TEXT(\"malay.xml\");\r\n\tif (localizationCode == TEXT(\"mr\"))\r\n\t\treturn TEXT(\"marathi.xml\");\r\n\tif (localizationCode == TEXT(\"mn\"))\r\n\t\treturn TEXT(\"mongolian.xml\");\r\n\tif (localizationCode == TEXT(\"no\") || localizationCode == TEXT(\"nb\"))\r\n\t\treturn TEXT(\"norwegian.xml\");\r\n\tif (localizationCode == TEXT(\"nn\"))\r\n\t\treturn TEXT(\"nynorsk.xml\");\r\n\tif (localizationCode == TEXT(\"oc\"))\r\n\t\treturn TEXT(\"occitan.xml\");\r\n\tif (localizationCode == TEXT(\"pl\"))\r\n\t\treturn TEXT(\"polish.xml\");\r\n\tif (localizationCode == TEXT(\"pt\") || localizationCode == TEXT(\"pt-pt\"))\r\n\t\treturn TEXT(\"portuguese.xml\");\r\n\tif (localizationCode == TEXT(\"pa\") || localizationCode == TEXT(\"pa-in\"))\r\n\t\treturn TEXT(\"punjabi.xml\");\r\n\tif (localizationCode == TEXT(\"ro\") || localizationCode == TEXT(\"ro-mo\"))\r\n\t\treturn TEXT(\"romanian.xml\");\r\n\tif (localizationCode == TEXT(\"ru\") || localizationCode == TEXT(\"ru-mo\"))\r\n\t\treturn TEXT(\"russian.xml\");\r\n\tif (localizationCode == TEXT(\"sc\"))\r\n\t\treturn TEXT(\"sardinian.xml\");\r\n\tif (localizationCode == TEXT(\"sr\"))\r\n\t\treturn TEXT(\"serbian.xml\");\r\n\tif (localizationCode == TEXT(\"sr-cyrl-ba\") || localizationCode == TEXT(\"sr-cyrl-sp\"))\r\n\t\treturn TEXT(\"serbianCyrillic.xml\");\r\n\tif (localizationCode == TEXT(\"si\"))\r\n\t\treturn TEXT(\"sinhala.xml\");\r\n\tif (localizationCode == TEXT(\"sk\"))\r\n\t\treturn TEXT(\"slovak.xml\");\r\n\tif (localizationCode == TEXT(\"sl\"))\r\n\t\treturn TEXT(\"slovenian.xml\");\r\n\tif (localizationCode == TEXT(\"es\") || localizationCode == TEXT(\"es-bo\") || localizationCode == TEXT(\"es-cl\") || localizationCode == TEXT(\"es-co\") || localizationCode == TEXT(\"es-cr\") || localizationCode == TEXT(\"es-do\") || localizationCode == TEXT(\"es-ec\") || localizationCode == TEXT(\"es-sv\") || localizationCode == TEXT(\"es-gt\") || localizationCode == TEXT(\"es-hn\") || localizationCode == TEXT(\"es-mx\") || localizationCode == TEXT(\"es-ni\") || localizationCode == TEXT(\"es-pa\") || localizationCode == TEXT(\"es-py\") || localizationCode == TEXT(\"es-pe\") || localizationCode == TEXT(\"es-pr\") || localizationCode == TEXT(\"es-es\") || localizationCode == TEXT(\"es-uy\") || localizationCode == TEXT(\"es-ve\"))\r\n\t\treturn TEXT(\"spanish.xml\");\r\n\tif (localizationCode == TEXT(\"es-ar\"))\r\n\t\treturn TEXT(\"spanish_ar.xml\");\r\n\tif (localizationCode == TEXT(\"sv\"))\r\n\t\treturn TEXT(\"swedish.xml\");\r\n\tif (localizationCode == TEXT(\"tl\"))\r\n\t\treturn TEXT(\"tagalog.xml\");\r\n\tif (localizationCode == TEXT(\"tg-cyrl-tj\"))\r\n\t\treturn TEXT(\"tajikCyrillic.xml\");\r\n\tif (localizationCode == TEXT(\"ta\"))\r\n\t\treturn TEXT(\"tamil.xml\");\r\n\tif (localizationCode == TEXT(\"tt\"))\r\n\t\treturn TEXT(\"tatar.xml\");\r\n\tif (localizationCode == TEXT(\"te\"))\r\n\t\treturn TEXT(\"telugu.xml\");\r\n\tif (localizationCode == TEXT(\"th\"))\r\n\t\treturn TEXT(\"thai.xml\");\r\n\tif (localizationCode == TEXT(\"tr\"))\r\n\t\treturn TEXT(\"turkish.xml\");\r\n\tif (localizationCode == TEXT(\"uk\"))\r\n\t\treturn TEXT(\"ukrainian.xml\");\r\n\tif (localizationCode == TEXT(\"ur\") || localizationCode == TEXT(\"ur-pk\"))\r\n\t\treturn TEXT(\"urdu.xml\");\r\n\tif (localizationCode == TEXT(\"ug-cn\"))\r\n\t\treturn TEXT(\"uyghur.xml\");\r\n\tif (localizationCode == TEXT(\"uz\"))\r\n\t\treturn TEXT(\"uzbek.xml\");\r\n\tif (localizationCode == TEXT(\"uz-cyrl-uz\"))\r\n\t\treturn TEXT(\"uzbekCyrillic.xml\");\r\n\tif (localizationCode == TEXT(\"vec\"))\r\n\t\treturn TEXT(\"venetian.xml\");\r\n\tif (localizationCode == TEXT(\"vi\") || localizationCode == TEXT(\"vi-vn\"))\r\n\t\treturn TEXT(\"vietnamese.xml\");\r\n\tif (localizationCode == TEXT(\"cy-gb\"))\r\n\t\treturn TEXT(\"welsh.xml\");\r\n\tif (localizationCode == TEXT(\"zu\") || localizationCode == TEXT(\"zu-za\"))\r\n\t\treturn TEXT(\"zulu.xml\");\r\n\tif (localizationCode == TEXT(\"ne\") || localizationCode == TEXT(\"nep\"))\r\n\t\treturn TEXT(\"nepali.xml\");\r\n\tif (localizationCode == TEXT(\"oc-aranes\"))\r\n\t\treturn TEXT(\"aranese.xml\");\r\n\tif (localizationCode == TEXT(\"exy\"))\r\n\t\treturn TEXT(\"extremaduran.xml\");\r\n\tif (localizationCode == TEXT(\"keb\"))\r\n\t\treturn TEXT(\"kabyle.xml\");\r\n\tif (localizationCode == TEXT(\"lij\"))\r\n\t\treturn TEXT(\"ligurian.xml\");\r\n\tif (localizationCode == TEXT(\"ga\"))\r\n\t\treturn TEXT(\"irish.xml\");\r\n\tif (localizationCode == TEXT(\"sgs\"))\r\n\t\treturn TEXT(\"samogitian.xml\");\r\n\tif (localizationCode == TEXT(\"yue\"))\r\n\t\treturn TEXT(\"hongKongCantonese.xml\");\r\n\tif (localizationCode == TEXT(\"ab\") || localizationCode == TEXT(\"abk\"))\r\n\t\treturn TEXT(\"abkhazian.xml\");\r\n\r\n\treturn generic_string();\r\n}\r\n\r\n\r\nvoid NppParameters::feedKeyWordsParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *langRoot = node->FirstChildElement(TEXT(\"Languages\"));\r\n\tif (!langRoot)\r\n\t\treturn;\r\n\r\n\tfor (TiXmlNode *langNode = langRoot->FirstChildElement(TEXT(\"Language\"));\r\n\t\tlangNode ;\r\n\t\tlangNode = langNode->NextSibling(TEXT(\"Language\")) )\r\n\t{\r\n\t\tif (_nbLang < NB_LANG)\r\n\t\t{\r\n\t\t\tTiXmlElement* element = langNode->ToElement();\r\n\t\t\tconst TCHAR* name = element->Attribute(TEXT(\"name\"));\r\n\t\t\tif (name)\r\n\t\t\t{\r\n\t\t\t\t_langList[_nbLang] = new Lang(getLangIDFromStr(name), name);\r\n\t\t\t\t_langList[_nbLang]->setDefaultExtList(element->Attribute(TEXT(\"ext\")));\r\n\t\t\t\t_langList[_nbLang]->setCommentLineSymbol(element->Attribute(TEXT(\"commentLine\")));\r\n\t\t\t\t_langList[_nbLang]->setCommentStart(element->Attribute(TEXT(\"commentStart\")));\r\n\t\t\t\t_langList[_nbLang]->setCommentEnd(element->Attribute(TEXT(\"commentEnd\")));\r\n\r\n\t\t\t\tint tabSettings;\r\n\t\t\t\tif (element->Attribute(TEXT(\"tabSettings\"), &tabSettings))\r\n\t\t\t\t\t_langList[_nbLang]->setTabInfo(tabSettings);\r\n\r\n\t\t\t\tfor (TiXmlNode *kwNode = langNode->FirstChildElement(TEXT(\"Keywords\"));\r\n\t\t\t\t\tkwNode ;\r\n\t\t\t\t\tkwNode = kwNode->NextSibling(TEXT(\"Keywords\")) )\r\n\t\t\t\t{\r\n\t\t\t\t\tconst TCHAR *indexName = (kwNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\t\t\tTiXmlNode *kwVal = kwNode->FirstChild();\r\n\t\t\t\t\tconst TCHAR *keyWords = TEXT(\"\");\r\n\t\t\t\t\tif ((indexName) && (kwVal))\r\n\t\t\t\t\t\tkeyWords = kwVal->Value();\r\n\r\n\t\t\t\t\tint i = getKwClassFromName(indexName);\r\n\r\n\t\t\t\t\tif (i >= 0 && i <= KEYWORDSET_MAX)\r\n\t\t\t\t\t\t_langList[_nbLang]->setWords(keyWords, i);\r\n\t\t\t\t}\r\n\t\t\t\t++_nbLang;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nextern \"C\" {\r\ntypedef DWORD (WINAPI * EESFUNC) (LPCTSTR, LPTSTR, DWORD);\r\n}\r\n\r\nvoid NppParameters::feedGUIParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *GUIRoot = node->FirstChildElement(TEXT(\"GUIConfigs\"));\r\n\tif (nullptr == GUIRoot)\r\n\t\treturn;\r\n\r\n\tfor (TiXmlNode *childNode = GUIRoot->FirstChildElement(TEXT(\"GUIConfig\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"GUIConfig\")) )\r\n\t{\r\n\t\tTiXmlElement* element = childNode->ToElement();\r\n\t\tconst TCHAR* nm = element->Attribute(TEXT(\"name\"));\r\n\t\tif (nullptr == nm)\r\n\t\t\tcontinue;\r\n\r\n\t\tif (!lstrcmp(nm, TEXT(\"ToolBar\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"visible\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._toolbarShow = false;\r\n\t\t\t\telse// if (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._toolbarShow = true;\r\n\t\t\t}\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tval = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"small\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_SMALL;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"large\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_LARGE;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"small2\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_SMALL2;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"large2\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_LARGE2;\r\n\t\t\t\t\telse //if (!lstrcmp(val, TEXT(\"standard\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_STANDARD;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"StatusBar\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"hide\")))\r\n\t\t\t\t\t\t_nppGUI._statusBarShow = false;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"show\")))\r\n\t\t\t\t\t\t_nppGUI._statusBarShow = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"MenuBar\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"hide\")))\r\n\t\t\t\t\t\t_nppGUI._menuBarShow = false;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"show\")))\r\n\t\t\t\t\t\t_nppGUI._menuBarShow = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TabBar\")))\r\n\t\t{\r\n\t\t\tbool isFailed = false;\r\n\t\t\tint oldValue = _nppGUI._tabStatus;\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"dragAndDrop\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus = TAB_DRAGNDROP;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus = 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"drawTopBar\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_DRAWTOPBAR;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"drawInactiveTab\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_DRAWINACTIVETAB;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"reduce\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_REDUCE;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"closeButton\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_CLOSEBUTTON;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"doubleClick2Close\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_DBCLK2CLOSE;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\t\t\tval = element->Attribute(TEXT(\"vertical\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_VERTICAL;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"multiLine\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_MULTILINE;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"hide\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_HIDE;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"quitOnEmpty\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_QUITONEMPTY;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"iconSetNumber\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"1\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_ALTICONS;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"0\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (isFailed)\r\n\t\t\t\t_nppGUI._tabStatus = oldValue;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Auto-detection\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"yesOld\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = cdEnabledOld;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"autoOld\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledOld | cdAutoUpdate);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"Update2EndOld\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledOld | cdGo2end);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"autoUpdate2EndOld\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledOld | cdAutoUpdate | cdGo2end);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = cdEnabledNew;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"auto\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledNew | cdAutoUpdate);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"Update2End\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledNew | cdGo2end);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"autoUpdate2End\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledNew | cdAutoUpdate | cdGo2end);\r\n\t\t\t\t\telse //(!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = cdDisabled;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TrayIcon\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._isMinimizedToTray = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"RememberLastSession\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._rememberLastSession = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._rememberLastSession = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"DetectEncoding\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._detectEncoding = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._detectEncoding = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"SaveAllConfirm\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._saveAllConfirm = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._saveAllConfirm = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (lstrcmp(nm, TEXT(\"MaitainIndent\")) == 0)\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._maitainIndent = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._maitainIndent = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// <GUIConfig name=\"MarkAll\" matchCase=\"yes\" wholeWordOnly=\"yes\" </GUIConfig>\r\n\t\telse if (!lstrcmp(nm, TEXT(\"MarkAll\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"matchCase\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._markAllCaseSensitive = true;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._markAllCaseSensitive = false;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"wholeWordOnly\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._markAllWordOnly = true;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._markAllWordOnly = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// <GUIConfig name=\"SmartHighLight\" matchCase=\"yes\" wholeWordOnly=\"yes\" useFindSettings=\"no\">yes</GUIConfig>\r\n\t\telse if (!lstrcmp(nm, TEXT(\"SmartHighLight\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._enableSmartHilite = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._enableSmartHilite = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"matchCase\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._smartHiliteCaseSensitive = true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._smartHiliteCaseSensitive = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"wholeWordOnly\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._smartHiliteWordOnly = true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._smartHiliteWordOnly = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"useFindSettings\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._smartHiliteUseFindSettings = true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._smartHiliteUseFindSettings = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"onAnotherView\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._smartHiliteOnAnotherView = true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._smartHiliteOnAnotherView = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TagsMatchHighLight\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._enableTagsMatchHilite = !lstrcmp(val, TEXT(\"yes\"));\r\n\t\t\t\t\tconst TCHAR *tahl = element->Attribute(TEXT(\"TagAttrHighLight\"));\r\n\t\t\t\t\tif (tahl)\r\n\t\t\t\t\t\t_nppGUI._enableTagAttrsHilite = !lstrcmp(tahl, TEXT(\"yes\"));\r\n\r\n\t\t\t\t\ttahl = element->Attribute(TEXT(\"HighLightNonHtmlZone\"));\r\n\t\t\t\t\tif (tahl)\r\n\t\t\t\t\t\t_nppGUI._enableHiliteNonHTMLZone = !lstrcmp(tahl, TEXT(\"yes\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TaskList\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._doTaskList = (!lstrcmp(val, TEXT(\"yes\")))?true:false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"MRU\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._styleMRU = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"URL\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tint const i = generic_atoi (val);\r\n\t\t\t\t\tif ((i >= urlMin) && (i <= urlMax))\r\n\t\t\t\t\t\t_nppGUI._styleURL = urlMode(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"uriCustomizedSchemes\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t_nppGUI._uriSchemes = val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"CheckHistoryFiles\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._checkHistoryFiles = false;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t\t_nppGUI._checkHistoryFiles = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"ScintillaViewsSplitter\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"vertical\")))\r\n\t\t\t\t\t\t_nppGUI._splitterPos = POS_VERTICAL;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"horizontal\")))\r\n\t\t\t\t\t\t_nppGUI._splitterPos = POS_HORIZOTAL;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"UserDefineDlg\")))\r\n\t\t{\r\n\t\t\tbool isFailed = false;\r\n\t\t\tint oldValue = _nppGUI._userDefineDlgStatus;\r\n\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"hide\")))\r\n\t\t\t\t\t\t_nppGUI._userDefineDlgStatus = 0;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"show\")))\r\n\t\t\t\t\t\t_nppGUI._userDefineDlgStatus = UDD_SHOW;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tisFailed = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"position\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"docked\")))\r\n\t\t\t\t\t_nppGUI._userDefineDlgStatus |= UDD_DOCKED;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"undocked\")))\r\n\t\t\t\t\t_nppGUI._userDefineDlgStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\t\t\tif (isFailed)\r\n\t\t\t\t_nppGUI._userDefineDlgStatus = oldValue;\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TabSetting\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"size\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._tabSize = i;\r\n\r\n\t\t\tif ((_nppGUI._tabSize == -1) || (_nppGUI._tabSize == 0))\r\n\t\t\t\t_nppGUI._tabSize = 4;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"replaceBySpace\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._tabReplacedBySpace = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Caret\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"width\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._caretWidth = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"blinkRate\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._caretBlinkRate = i;\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"ScintillaGlobalSettings\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"enableMultiSelection\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._enableMultiSelection = true;\r\n\t\t\t\telse if (lstrcmp(val, TEXT(\"no\")) == 0)\r\n\t\t\t\t\t_nppGUI._enableMultiSelection = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"AppPosition\")))\r\n\t\t{\r\n\t\t\tRECT oldRect = _nppGUI._appPos;\r\n\t\t\tbool fuckUp = true;\r\n\t\t\tint i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"x\"), &i))\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._appPos.left = i;\r\n\r\n\t\t\t\tif (element->Attribute(TEXT(\"y\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._appPos.top = i;\r\n\r\n\t\t\t\t\tif (element->Attribute(TEXT(\"width\"), &i))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_nppGUI._appPos.right = i;\r\n\r\n\t\t\t\t\t\tif (element->Attribute(TEXT(\"height\"), &i))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_nppGUI._appPos.bottom = i;\r\n\t\t\t\t\t\t\tfuckUp = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (fuckUp)\r\n\t\t\t\t_nppGUI._appPos = oldRect;\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"isMaximized\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._isMaximized = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"FindWindowPosition\")))\r\n\t\t{\r\n\t\t\tRECT oldRect = _nppGUI._findWindowPos;\r\n\t\t\tbool incomplete = true;\r\n\t\t\tint i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"left\"), &i))\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._findWindowPos.left = i;\r\n\r\n\t\t\t\tif (element->Attribute(TEXT(\"top\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._findWindowPos.top = i;\r\n\r\n\t\t\t\t\tif (element->Attribute(TEXT(\"right\"), &i))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_nppGUI._findWindowPos.right = i;\r\n\r\n\t\t\t\t\t\tif (element->Attribute(TEXT(\"bottom\"), &i))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_nppGUI._findWindowPos.bottom = i;\r\n\t\t\t\t\t\t\tincomplete = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (incomplete)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._findWindowPos = oldRect;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"isLessModeOn\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._findWindowLessMode = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"FinderConfig\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"wrappedLines\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._finderLinesAreCurrentlyWrapped = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"purgeBeforeEverySearch\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._finderPurgeBeforeEverySearch = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"showOnlyOneEntryPerFoundLine\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._finderShowOnlyOneEntryPerFoundLine = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"NewDocDefaultSettings\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"format\"), &i))\r\n\t\t\t{\r\n\t\t\t\tEolType newFormat = EolType::osdefault;\r\n\t\t\t\tswitch (i)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase static_cast<LPARAM>(EolType::windows) :\r\n\t\t\t\t\t\tnewFormat = EolType::windows;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase static_cast<LPARAM>(EolType::macos) :\r\n\t\t\t\t\t\tnewFormat = EolType::macos;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase static_cast<LPARAM>(EolType::unix) :\r\n\t\t\t\t\t\tnewFormat = EolType::unix;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tassert(false and \"invalid buffer format - fallback to default\");\r\n\t\t\t\t}\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._format = newFormat;\r\n\t\t\t}\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"encoding\"), &i))\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._unicodeMode = (UniMode)i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"lang\"), &i))\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._lang = (LangType)i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"codepage\"), &i))\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._codepage = (LangType)i;\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"openAnsiAsUTF8\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._openAnsiAsUtf8 = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"langsExcluded\")))\r\n\t\t{\r\n\t\t\t// TODO\r\n\t\t\tint g0 = 0; // up to 8\r\n\t\t\tint g1 = 0; // up to 16\r\n\t\t\tint g2 = 0; // up to 24\r\n\t\t\tint g3 = 0; // up to 32\r\n\t\t\tint g4 = 0; // up to 40\r\n\t\t\tint g5 = 0; // up to 48\r\n\t\t\tint g6 = 0; // up to 56\r\n\t\t\tint g7 = 0; // up to 64\r\n\t\t\tint g8 = 0; // up to 72\r\n\t\t\tint g9 = 0; // up to 80\r\n\t\t\tint g10= 0; // up to 88\r\n\t\t\tint g11= 0; // up to 96\r\n\t\t\tint g12= 0; // up to 104\r\n\r\n\t\t\t// TODO some refactoring needed here....\r\n\t\t\t{\r\n\t\t\t\tint i;\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr0\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg0 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr1\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg1 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr2\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg2 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr3\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg3 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr4\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg4 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr5\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg5 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr6\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg6 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr7\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg7 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr8\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg8 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr9\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg9 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr10\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg10 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr11\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg11 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr12\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg12 = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tUCHAR mask = 1;\r\n\t\t\tfor (int i = 0 ; i < 8 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g0)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 8 ; i < 16 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g1)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 16 ; i < 24 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g2)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 24 ; i < 32 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g3)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 32 ; i < 40 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g4)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 40 ; i < 48 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g5)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 48 ; i < 56 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g6)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 56 ; i < 64 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g7)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 64; i < 72; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g8)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 72; i < 80; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g9)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 80; i < 88; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g10)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 88; i < 96; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g11)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 96; i < 104; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g12)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"langMenuCompact\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._isLangMenuCompact = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Print\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"lineNumber\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._printLineNumber = (!lstrcmp(val, TEXT(\"yes\")));\r\n\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"printOption\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._printOption = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"headerLeft\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._headerLeft = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"headerMiddle\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._headerMiddle = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"headerRight\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._headerRight = val;\r\n\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"footerLeft\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._footerLeft = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"footerMiddle\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._footerMiddle = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"footerRight\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._footerRight = val;\r\n\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"headerFontName\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._headerFontName = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"footerFontName\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._footerFontName = val;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"headerFontStyle\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._headerFontStyle = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"footerFontStyle\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._footerFontStyle = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"headerFontSize\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._headerFontSize = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"footerFontSize\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._footerFontSize = i;\r\n\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"margeLeft\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._marge.left = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"margeTop\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._marge.top = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"margeRight\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._marge.right = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"margeBottom\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._marge.bottom = i;\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"ScintillaPrimaryView\")))\r\n\t\t{\r\n\t\t\tfeedScintillaParam(element);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Backup\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"action\"), &i))\r\n\t\t\t\t_nppGUI._backup = (BackupFeature)i;\r\n\r\n\t\t\tconst TCHAR *bDir = element->Attribute(TEXT(\"useCustumDir\"));\r\n\t\t\tif (bDir)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._useDir = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\t\t\t}\r\n\t\t\tconst TCHAR *pDir = element->Attribute(TEXT(\"dir\"));\r\n\t\t\tif (pDir)\r\n\t\t\t\t_nppGUI._backupDir = pDir;\r\n\r\n\t\t\tconst TCHAR *isSnapshotModeStr = element->Attribute(TEXT(\"isSnapshotMode\"));\r\n\t\t\tif (isSnapshotModeStr && !lstrcmp(isSnapshotModeStr, TEXT(\"no\")))\r\n\t\t\t\t_nppGUI._isSnapshotMode = false;\r\n\r\n\t\t\tint timing;\r\n\t\t\tif (element->Attribute(TEXT(\"snapshotBackupTiming\"), &timing))\r\n\t\t\t\t_nppGUI._snapshotBackupTiming = timing;\r\n\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"DockingManager\")))\r\n\t\t{\r\n\t\t\tfeedDockingManager(element);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"globalOverride\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *bDir = element->Attribute(TEXT(\"fg\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableFg = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"bg\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableBg = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"font\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableFont = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"fontSize\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableFontSize = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"bold\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableBold = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"italic\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableItalic = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"underline\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableUnderLine = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"auto-completion\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"autoCAction\"), &i))\r\n\t\t\t\t_nppGUI._autocStatus = static_cast<NppGUI::AutocStatus>(i);\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"triggerFromNbChar\"), &i))\r\n\t\t\t\t_nppGUI._autocFromLen = i;\r\n\r\n\t\t\tconst TCHAR * optName = element->Attribute(TEXT(\"autoCIgnoreNumbers\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._autocIgnoreNumbers = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"insertSelectedItemUseENTER\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._autocInsertSelectedUseENTER = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"insertSelectedItemUseTAB\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._autocInsertSelectedUseTAB = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"funcParams\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._funcParams = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"auto-insert\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * optName = element->Attribute(TEXT(\"htmlXmlTag\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doHtmlXmlTag = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"parentheses\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doParentheses = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"brackets\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doBrackets = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"curlyBrackets\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doCurlyBrackets = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"quotes\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doQuotes = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"doubleQuotes\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doDoubleQuotes = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tfor (TiXmlNode *subChildNode = childNode->FirstChildElement(TEXT(\"UserDefinePair\"));\r\n\t\t\t\t subChildNode;\r\n\t\t\t\t subChildNode = subChildNode->NextSibling(TEXT(\"UserDefinePair\")) )\r\n\t\t\t{\r\n\t\t\t\tint open = -1;\r\n\t\t\t\tint openVal = 0;\r\n\t\t\t\tconst TCHAR *openValStr = (subChildNode->ToElement())->Attribute(TEXT(\"open\"), &openVal);\r\n\t\t\t\tif (openValStr && (openVal >= 0 && openVal < 128))\r\n\t\t\t\t\topen = openVal;\r\n\r\n\t\t\t\tint close = -1;\r\n\t\t\t\tint closeVal = 0;\r\n\t\t\t\tconst TCHAR *closeValStr = (subChildNode->ToElement())->Attribute(TEXT(\"close\"), &closeVal);\r\n\t\t\t\tif (closeValStr && (closeVal >= 0 && closeVal <= 128))\r\n\t\t\t\t\tclose = closeVal;\r\n\r\n\t\t\t\tif (open != -1 && close != -1)\r\n\t\t\t\t\t_nppGUI._matchedPairConf._matchedPairsInit.push_back(pair<char, char>(char(open), char(close)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"sessionExt\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._definedSessionExt = val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"workspaceExt\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._definedWorkspaceExt = val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"noUpdate\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._autoUpdateOpt._doAutoUpdate = (!lstrcmp(val, TEXT(\"yes\")))?false:true;\r\n\r\n\t\t\t\tint i;\r\n\t\t\t\tval = element->Attribute(TEXT(\"intervalDays\"), &i);\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._autoUpdateOpt._intervalDays = i;\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"nextUpdateDate\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._autoUpdateOpt._nextUpdateDate = Date(val);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"openSaveDir\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * value = element->Attribute(TEXT(\"value\"));\r\n\t\t\tif (value && value[0])\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(value, TEXT(\"1\")) == 0)\r\n\t\t\t\t\t_nppGUI._openSaveDir = dir_last;\r\n\t\t\t\telse if (lstrcmp(value, TEXT(\"2\")) == 0)\r\n\t\t\t\t\t_nppGUI._openSaveDir = dir_userDef;\r\n\t\t\t\telse\r\n\t\t\t\t\t_nppGUI._openSaveDir = dir_followCurrent;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR * path = element->Attribute(TEXT(\"defaultDirPath\"));\r\n\t\t\tif (path && path[0])\r\n\t\t\t{\r\n\t\t\t\tlstrcpyn(_nppGUI._defaultDir, path, MAX_PATH);\r\n\t\t\t\t::ExpandEnvironmentStrings(_nppGUI._defaultDir, _nppGUI._defaultDirExp, MAX_PATH);\r\n\t\t\t}\r\n \t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"titleBar\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * value = element->Attribute(TEXT(\"short\"));\r\n\t\t\t_nppGUI._shortTitlebar = false;\t//default state\r\n\t\t\tif (value && value[0])\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(value, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._shortTitlebar = true;\r\n\t\t\t\telse if (lstrcmp(value, TEXT(\"no\")) == 0)\r\n\t\t\t\t\t_nppGUI._shortTitlebar = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"stylerTheme\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *themePath = element->Attribute(TEXT(\"path\"));\r\n\t\t\tif (themePath != NULL && themePath[0])\r\n\t\t\t\t_nppGUI._themeName.assign(themePath);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"insertDateTime\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* customFormat = element->Attribute(TEXT(\"customizedFormat\"));\r\n\t\t\tif (customFormat != NULL && customFormat[0])\r\n\t\t\t\t_nppGUI._dateTimeFormat = customFormat;\r\n\r\n\t\t\tconst TCHAR* value = element->Attribute(TEXT(\"reverseDefaultOrder\"));\r\n\t\t\tif (value && value[0])\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(value, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._dateTimeReverseDefaultOrder = true;\r\n\t\t\t\telse if (lstrcmp(value, TEXT(\"no\")) == 0)\r\n\t\t\t\t\t_nppGUI._dateTimeReverseDefaultOrder = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"wordCharList\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * value = element->Attribute(TEXT(\"useDefault\"));\r\n\t\t\tif (value && value[0])\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(value, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._isWordCharDefault = true;\r\n\t\t\t\telse if (lstrcmp(value, TEXT(\"no\")) == 0)\r\n\t\t\t\t\t_nppGUI._isWordCharDefault = false;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR *charsAddedW = element->Attribute(TEXT(\"charsAdded\"));\r\n\t\t\tif (charsAddedW)\r\n\t\t\t{\r\n\t\t\t\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\t\t\t\t_nppGUI._customWordChars = wmc.wchar2char(charsAddedW, SC_CP_UTF8);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"delimiterSelection\")))\r\n\t\t{\r\n\t\t\tint leftmost = 0;\r\n\t\t\telement->Attribute(TEXT(\"leftmostDelimiter\"), &leftmost);\r\n\t\t\tif (leftmost > 0 && leftmost < 256)\r\n\t\t\t\t_nppGUI._leftmostDelimiter = static_cast<char>(leftmost);\r\n\r\n\t\t\tint rightmost = 0;\r\n\t\t\telement->Attribute(TEXT(\"rightmostDelimiter\"), &rightmost);\r\n\t\t\tif (rightmost > 0 && rightmost < 256)\r\n\t\t\t\t_nppGUI._rightmostDelimiter = static_cast<char>(rightmost);\r\n\r\n\t\t\tconst TCHAR *delimiterSelectionOnEntireDocument = element->Attribute(TEXT(\"delimiterSelectionOnEntireDocument\"));\r\n\t\t\tif (delimiterSelectionOnEntireDocument != NULL && !lstrcmp(delimiterSelectionOnEntireDocument, TEXT(\"yes\")))\r\n\t\t\t\t_nppGUI._delimiterSelectionOnEntireDocument = true;\r\n\t\t\telse\r\n\t\t\t\t_nppGUI._delimiterSelectionOnEntireDocument = false;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"multiInst\")))\r\n\t\t{\r\n\t\t\tint val = 0;\r\n\t\t\telement->Attribute(TEXT(\"setting\"), &val);\r\n\t\t\tif (val < 0 || val > 2)\r\n\t\t\t\tval = 0;\r\n\t\t\t_nppGUI._multiInstSetting = (MultiInstSetting)val;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"searchEngine\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"searchEngineChoice\"), &i))\r\n\t\t\t\t_nppGUI._searchEngineChoice = static_cast<NppGUI::SearchEngineChoice>(i);\r\n\r\n\t\t\tconst TCHAR * searchEngineCustom = element->Attribute(TEXT(\"searchEngineCustom\"));\r\n\t\t\tif (searchEngineCustom && searchEngineCustom[0])\r\n\t\t\t\t_nppGUI._searchEngineCustom = searchEngineCustom;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Searching\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* optNameMonoFont = element->Attribute(TEXT(\"monospacedFontFindDlg\"));\r\n\t\t\tif (optNameMonoFont)\r\n\t\t\t\t_nppGUI._monospacedFontFindDlg = (lstrcmp(optNameMonoFont, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\t//This is an option from previous versions of notepad++.  It is handled for compatibility with older settings.\r\n\t\t\tconst TCHAR* optStopFillingFindField = element->Attribute(TEXT(\"stopFillingFindField\"));\r\n\t\t\tif (optStopFillingFindField) \r\n\t\t\t{\r\n\t\t\t\t_nppGUI._fillFindFieldWithSelected = (lstrcmp(optStopFillingFindField, TEXT(\"no\")) == 0);\r\n\t\t\t\t_nppGUI._fillFindFieldSelectCaret = _nppGUI._fillFindFieldWithSelected;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR* optFillFindFieldWithSelected = element->Attribute(TEXT(\"fillFindFieldWithSelected\"));\r\n\t\t\tif (optFillFindFieldWithSelected)\r\n\t\t\t\t_nppGUI._fillFindFieldWithSelected = (lstrcmp(optFillFindFieldWithSelected, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optFillFindFieldSelectCaret = element->Attribute(TEXT(\"fillFindFieldSelectCaret\"));\r\n\t\t\tif (optFillFindFieldSelectCaret)\r\n\t\t\t\t_nppGUI._fillFindFieldSelectCaret = (lstrcmp(optFillFindFieldSelectCaret, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optFindDlgAlwaysVisible = element->Attribute(TEXT(\"findDlgAlwaysVisible\"));\r\n\t\t\tif (optFindDlgAlwaysVisible)\r\n\t\t\t\t_nppGUI._findDlgAlwaysVisible = (lstrcmp(optFindDlgAlwaysVisible, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optConfirmReplaceOpenDocs = element->Attribute(TEXT(\"confirmReplaceInAllOpenDocs\"));\r\n\t\t\tif (optConfirmReplaceOpenDocs)\r\n\t\t\t\t_nppGUI._confirmReplaceInAllOpenDocs = (lstrcmp(optConfirmReplaceOpenDocs, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optReplaceStopsWithoutFindingNext = element->Attribute(TEXT(\"replaceStopsWithoutFindingNext\"));\r\n\t\t\tif (optReplaceStopsWithoutFindingNext)\r\n\t\t\t\t_nppGUI._replaceStopsWithoutFindingNext = (lstrcmp(optReplaceStopsWithoutFindingNext, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"MISC\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * optName = element->Attribute(TEXT(\"fileSwitcherWithoutExtColumn\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._fileSwitcherWithoutExtColumn = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\t\t\t\r\n\t\t\tint i = 0;\r\n\t\t\tif (element->Attribute(TEXT(\"fileSwitcherExtWidth\"), &i))\r\n\t\t\t\t_nppGUI._fileSwitcherExtWidth = i;\r\n\r\n\t\t\tconst TCHAR * optNamePath = element->Attribute(TEXT(\"fileSwitcherWithoutPathColumn\"));\r\n\t\t\tif (optNamePath)\r\n\t\t\t\t_nppGUI._fileSwitcherWithoutPathColumn = (lstrcmp(optNamePath, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"fileSwitcherPathWidth\"), &i))\r\n\t\t\t\t_nppGUI._fileSwitcherPathWidth = i;\r\n\r\n\t\t\tconst TCHAR * optNameBackSlashEscape = element->Attribute(TEXT(\"backSlashIsEscapeCharacterForSql\"));\r\n\t\t\tif (optNameBackSlashEscape && !lstrcmp(optNameBackSlashEscape, TEXT(\"no\")))\r\n\t\t\t\t_nppGUI._backSlashIsEscapeCharacterForSql = false;\r\n\r\n\t\t\tconst TCHAR * optNameWriteTechnologyEngine = element->Attribute(TEXT(\"writeTechnologyEngine\"));\r\n\t\t\tif (optNameWriteTechnologyEngine)\r\n\t\t\t\t_nppGUI._writeTechnologyEngine = (lstrcmp(optNameWriteTechnologyEngine, TEXT(\"1\")) == 0) ? directWriteTechnology : defaultTechnology;\r\n\r\n\t\t\tconst TCHAR * optNameFolderDroppedOpenFiles = element->Attribute(TEXT(\"isFolderDroppedOpenFiles\"));\r\n\t\t\tif (optNameFolderDroppedOpenFiles)\r\n\t\t\t\t_nppGUI._isFolderDroppedOpenFiles = (lstrcmp(optNameFolderDroppedOpenFiles, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR * optDocPeekOnTab = element->Attribute(TEXT(\"docPeekOnTab\"));\r\n\t\t\tif (optDocPeekOnTab)\r\n\t\t\t\t_nppGUI._isDocPeekOnTab = (lstrcmp(optDocPeekOnTab, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR * optDocPeekOnMap = element->Attribute(TEXT(\"docPeekOnMap\"));\r\n\t\t\tif (optDocPeekOnMap)\r\n\t\t\t\t_nppGUI._isDocPeekOnMap = (lstrcmp(optDocPeekOnMap, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optSortFunctionList = element->Attribute(TEXT(\"sortFunctionList\"));\r\n\t\t\tif (optSortFunctionList)\r\n\t\t\t\t_nppGUI._shouldSortFunctionList = (lstrcmp(optSortFunctionList, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* saveDlgExtFilterToAllTypes = element->Attribute(TEXT(\"saveDlgExtFilterToAllTypes\"));\r\n\t\t\tif (saveDlgExtFilterToAllTypes)\r\n\t\t\t\t_nppGUI._setSaveDlgExtFiltToAllTypes = (lstrcmp(saveDlgExtFilterToAllTypes, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR * optMuteSounds = element->Attribute(TEXT(\"muteSounds\"));\r\n\t\t\tif (optMuteSounds)\r\n\t\t\t\t_nppGUI._muteSounds = lstrcmp(optMuteSounds, TEXT(\"yes\")) == 0;\r\n\r\n\t\t\tconst TCHAR * optEnableFoldCmdToggable = element->Attribute(TEXT(\"enableFoldCmdToggable\"));\r\n\t\t\tif (optEnableFoldCmdToggable)\r\n\t\t\t\t_nppGUI._enableFoldCmdToggable = lstrcmp(optEnableFoldCmdToggable, TEXT(\"yes\")) == 0;\r\n\r\n\t\t\tconst TCHAR * hideMenuRightShortcuts = element->Attribute(TEXT(\"hideMenuRightShortcuts\"));\r\n\t\t\tif (hideMenuRightShortcuts)\r\n\t\t\t\t_nppGUI._hideMenuRightShortcuts = lstrcmp(hideMenuRightShortcuts, TEXT(\"yes\")) == 0;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"commandLineInterpreter\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *node = childNode->FirstChild();\r\n\t\t\tif (node)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR *cli = node->Value();\r\n\t\t\t\tif (cli && cli[0])\r\n\t\t\t\t\t_nppGUI._commandLineInterpreter.assign(cli);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"DarkMode\")))\r\n\t\t{\r\n\t\t\tauto parseYesNoBoolAttribute = [&element](const TCHAR* name, bool defaultValue = false)->bool {\r\n\t\t\t\tconst TCHAR* val = element->Attribute(name);\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t};\r\n\r\n\t\t\t_nppGUI._darkmode._isEnabled = parseYesNoBoolAttribute(TEXT(\"enable\"));\r\n\r\n\t\t\t//_nppGUI._darkmode._isEnabledPlugin = parseYesNoBoolAttribute(TEXT(\"enablePlugin\"));\r\n\r\n\t\t\tint i;\r\n\t\t\tconst TCHAR* val;\r\n\t\t\tval = element->Attribute(TEXT(\"colorTone\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._colorTone = static_cast<NppDarkMode::ColorTone>(i);\r\n\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorTop\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.pureBackground = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorMenuHotTrack\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.hotBackground = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorActive\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.softerBackground = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorMain\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.background = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorError\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.errorBackground = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorText\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.text = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorDarkText\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.darkerText = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorDisabledText\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.disabledText = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorLinkText\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.linkText = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorEdge\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.edge = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorHotEdge\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.hotEdge = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorDisabledEdge\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.disabledEdge = i;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedScintillaParam(TiXmlNode *node)\r\n{\r\n\tTiXmlElement* element = node->ToElement();\r\n\r\n\t// Line Number Margin\r\n\tconst TCHAR *nm = element->Attribute(TEXT(\"lineNumberMargin\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._lineNumberMarginShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._lineNumberMarginShow = false;\r\n\t}\r\n\r\n\t// Line Number Margin dynamic width\r\n\tnm = element->Attribute(TEXT(\"lineNumberDynamicWidth\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._lineNumberMarginDynamicWidth = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._lineNumberMarginDynamicWidth = false;\r\n\t}\r\n\r\n\t// Bookmark Margin\r\n\tnm = element->Attribute(TEXT(\"bookMarkMargin\"));\r\n\tif (nm)\r\n\t{\r\n\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._bookMarkMarginShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._bookMarkMarginShow = false;\r\n\t}\r\n\r\n\t// Indent GuideLine\r\n\tnm = element->Attribute(TEXT(\"indentGuideLine\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._indentGuideLineShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._indentGuideLineShow= false;\r\n\t}\r\n\r\n\t// Folder Mark Style\r\n\tnm = element->Attribute(TEXT(\"folderMarkStyle\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"box\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_BOX;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"circle\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_CIRCLE;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"arrow\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_ARROW;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"simple\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_SIMPLE;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"none\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_NONE;\r\n\t}\r\n\r\n\t// Line Wrap method\r\n\tnm = element->Attribute(TEXT(\"lineWrapMethod\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"default\")))\r\n\t\t\t_svp._lineWrapMethod = LINEWRAP_DEFAULT;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"aligned\")))\r\n\t\t\t_svp._lineWrapMethod = LINEWRAP_ALIGNED;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"indent\")))\r\n\t\t\t_svp._lineWrapMethod = LINEWRAP_INDENT;\r\n\t}\r\n\r\n\t// Current Line Highlighting State\r\n\tnm = element->Attribute(TEXT(\"currentLineHilitingShow\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._currentLineHiliteMode = LINEHILITE_HILITE;\r\n\t\telse\r\n\t\t\t_svp._currentLineHiliteMode = LINEHILITE_NONE;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tconst TCHAR* currentLineModeStr = element->Attribute(TEXT(\"currentLineIndicator\"));\r\n\t\tif (currentLineModeStr && currentLineModeStr[0])\r\n\t\t{\r\n\t\t\tif (lstrcmp(currentLineModeStr, TEXT(\"1\")) == 0)\r\n\t\t\t\t_svp._currentLineHiliteMode = LINEHILITE_HILITE;\r\n\t\t\telse if (lstrcmp(currentLineModeStr, TEXT(\"2\")) == 0)\r\n\t\t\t\t_svp._currentLineHiliteMode = LINEHILITE_FRAME;\r\n\t\t\telse\r\n\t\t\t\t_svp._currentLineHiliteMode = LINEHILITE_NONE;\r\n\t\t}\r\n\t}\r\n\r\n\t// Current Line Frame Width\r\n\tnm = element->Attribute(TEXT(\"currentLineFrameWidth\"));\r\n\tif (nm)\r\n\t{\r\n\t\tunsigned char frameWidth{ 1 };\r\n\t\ttry\r\n\t\t{\r\n\t\t\tframeWidth = static_cast<unsigned char>(std::stoi(nm));\r\n\t\t}\r\n\t\tcatch (...)\r\n\t\t{\r\n\t\t\t// do nothing. frameWidth is already set to '1'.\r\n\t\t}\r\n\t\t_svp._currentLineFrameWidth = (frameWidth < 1) ? 1 : (frameWidth > 6) ? 6 : frameWidth;\r\n\t}\r\n\r\n\t// Virtual Space\r\n\tnm = element->Attribute(TEXT(\"virtualSpace\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._virtualSpace = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._virtualSpace = false;\r\n\t}\r\n\r\n\t// Scrolling Beyond Last Line State\r\n\tnm = element->Attribute(TEXT(\"scrollBeyondLastLine\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._scrollBeyondLastLine = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._scrollBeyondLastLine = false;\r\n\t}\r\n\r\n\t// Do not change selection or caret position when right-clicking with mouse\r\n\tnm = element->Attribute(TEXT(\"rightClickKeepsSelection\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._rightClickKeepsSelection = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._rightClickKeepsSelection = false;\r\n\t}\r\n\r\n\t// Disable Advanced Scrolling\r\n\tnm = element->Attribute(TEXT(\"disableAdvancedScrolling\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._disableAdvancedScrolling = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._disableAdvancedScrolling = false;\r\n\t}\r\n\r\n\t// Current wrap symbol visibility State\r\n\tnm = element->Attribute(TEXT(\"wrapSymbolShow\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._wrapSymbolShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._wrapSymbolShow = false;\r\n\t}\r\n\r\n\t// Do Wrap\r\n\tnm = element->Attribute(TEXT(\"Wrap\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._doWrap = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._doWrap = false;\r\n\t}\r\n\r\n\t// Do Edge\r\n\tnm = element->Attribute(TEXT(\"isEdgeBgMode\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._isEdgeBgMode = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._isEdgeBgMode = false;\r\n\t}\r\n\r\n\t// Do Scintilla border edge\r\n\tnm = element->Attribute(TEXT(\"borderEdge\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._showBorderEdge = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._showBorderEdge = false;\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"edgeMultiColumnPos\"));\r\n\tif (nm)\r\n\t{\r\n\t\tstr2numberVector(nm, _svp._edgeMultiColumnPos);\r\n\t}\r\n\r\n\tint val;\r\n\tnm = element->Attribute(TEXT(\"zoom\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\t_svp._zoom = val;\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"zoom2\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\t_svp._zoom2 = val;\r\n\t}\r\n\r\n\t// White Space visibility State\r\n\tnm = element->Attribute(TEXT(\"whiteSpaceShow\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._whiteSpaceShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._whiteSpaceShow = false;\r\n\t}\r\n\r\n\t// EOL visibility State\r\n\tnm = element->Attribute(TEXT(\"eolShow\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._eolShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._eolShow = false;\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"eolMode\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 0 && val <= 3)\r\n\t\t\t_svp._eolMode = static_cast<ScintillaViewParams::crlfMode>(val);\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"borderWidth\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 0 && val <= 30)\r\n\t\t\t_svp._borderWidth = val;\r\n\t}\r\n\r\n\t// Do antialiased font\r\n\tnm = element->Attribute(TEXT(\"smoothFont\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._doSmoothFont = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._doSmoothFont = false;\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"paddingLeft\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 0 && val <= 30)\r\n\t\t\t_svp._paddingLeft = static_cast<unsigned char>(val);\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"paddingRight\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 0 && val <= 30)\r\n\t\t\t_svp._paddingRight = static_cast<unsigned char>(val);\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"distractionFreeDivPart\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 3 && val <= 9)\r\n\t\t\t_svp._distractionFreeDivPart = static_cast<unsigned char>(val);\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::feedDockingManager(TiXmlNode *node)\r\n{\r\n\tTiXmlElement *element = node->ToElement();\r\n\r\n\tint i;\r\n\tif (element->Attribute(TEXT(\"leftWidth\"), &i))\r\n\t\t_nppGUI._dockingData._leftWidth = i;\r\n\r\n\tif (element->Attribute(TEXT(\"rightWidth\"), &i))\r\n\t\t_nppGUI._dockingData._rightWidth = i;\r\n\r\n\tif (element->Attribute(TEXT(\"topHeight\"), &i))\r\n\t\t_nppGUI._dockingData._topHeight = i;\r\n\r\n\tif (element->Attribute(TEXT(\"bottomHeight\"), &i))\r\n\t\t_nppGUI._dockingData._bottomHight = i;\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"FloatingWindow\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"FloatingWindow\")) )\r\n\t{\r\n\t\tTiXmlElement *floatElement = childNode->ToElement();\r\n\t\tint cont;\r\n\t\tif (floatElement->Attribute(TEXT(\"cont\"), &cont))\r\n\t\t{\r\n\t\t\tint x = 0;\r\n\t\t\tint y = 0;\r\n\t\t\tint w = 100;\r\n\t\t\tint h = 100;\r\n\r\n\t\t\tfloatElement->Attribute(TEXT(\"x\"), &x);\r\n\t\t\tfloatElement->Attribute(TEXT(\"y\"), &y);\r\n\t\t\tfloatElement->Attribute(TEXT(\"width\"), &w);\r\n\t\t\tfloatElement->Attribute(TEXT(\"height\"), &h);\r\n\t\t\t_nppGUI._dockingData._flaotingWindowInfo.push_back(FloatingWindowInfo(cont, x, y, w, h));\r\n\t\t}\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"PluginDlg\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"PluginDlg\")) )\r\n\t{\r\n\t\tTiXmlElement *dlgElement = childNode->ToElement();\r\n\t\tconst TCHAR *name = dlgElement->Attribute(TEXT(\"pluginName\"));\r\n\r\n\t\tint id;\r\n\t\tconst TCHAR *idStr = dlgElement->Attribute(TEXT(\"id\"), &id);\r\n\t\tif (name && idStr)\r\n\t\t{\r\n\t\t\tint curr = 0; // on left\r\n\t\t\tint prev = 0; // on left\r\n\r\n\t\t\tdlgElement->Attribute(TEXT(\"curr\"), &curr);\r\n\t\t\tdlgElement->Attribute(TEXT(\"prev\"), &prev);\r\n\r\n\t\t\tbool isVisible = false;\r\n\t\t\tconst TCHAR *val = dlgElement->Attribute(TEXT(\"isVisible\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tisVisible = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t\t}\r\n\r\n\t\t\t_nppGUI._dockingData._pluginDockInfo.push_back(PluginDlgDockingInfo(name, id, curr, prev, isVisible));\r\n\t\t}\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"ActiveTabs\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"ActiveTabs\")) )\r\n\t{\r\n\t\tTiXmlElement *dlgElement = childNode->ToElement();\r\n\r\n\t\tint cont;\r\n\t\tif (dlgElement->Attribute(TEXT(\"cont\"), &cont))\r\n\t\t{\r\n\t\t\tint activeTab = 0;\r\n\t\t\tdlgElement->Attribute(TEXT(\"activeTab\"), &activeTab);\r\n\t\t\t_nppGUI._dockingData._containerTabInfo.push_back(ContainerTabInfo(cont, activeTab));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::duplicateDockingManager(TiXmlNode* dockMngNode, TiXmlElement* dockMngElmt2Clone)\r\n{\r\n\tif (!dockMngNode || !dockMngElmt2Clone) return;\r\n\r\n\tTiXmlElement *dockMngElmt = dockMngNode->ToElement();\r\n\t\r\n\tint i;\r\n\tif (dockMngElmt->Attribute(TEXT(\"leftWidth\"), &i))\r\n\t\tdockMngElmt2Clone->SetAttribute(TEXT(\"leftWidth\"), i);\r\n\r\n\tif (dockMngElmt->Attribute(TEXT(\"rightWidth\"), &i))\r\n\t\tdockMngElmt2Clone->SetAttribute(TEXT(\"rightWidth\"), i);\r\n\r\n\tif (dockMngElmt->Attribute(TEXT(\"topHeight\"), &i))\r\n\t\tdockMngElmt2Clone->SetAttribute(TEXT(\"topHeight\"), i);\r\n\r\n\tif (dockMngElmt->Attribute(TEXT(\"bottomHeight\"), &i))\r\n\t\tdockMngElmt2Clone->SetAttribute(TEXT(\"bottomHeight\"), i);\r\n\r\n\r\n\tfor (TiXmlNode *childNode = dockMngNode->FirstChildElement(TEXT(\"FloatingWindow\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"FloatingWindow\")))\r\n\t{\r\n\t\tTiXmlElement *floatElement = childNode->ToElement();\r\n\t\tint cont;\r\n\t\tif (floatElement->Attribute(TEXT(\"cont\"), &cont))\r\n\t\t{\r\n\t\t\tTiXmlElement FWNode(TEXT(\"FloatingWindow\"));\r\n\t\t\tFWNode.SetAttribute(TEXT(\"cont\"), cont);\r\n\r\n\t\t\tint x = 0;\r\n\t\t\tint y = 0;\r\n\t\t\tint w = 100;\r\n\t\t\tint h = 100;\r\n\r\n\t\t\tfloatElement->Attribute(TEXT(\"x\"), &x);\r\n\t\t\tFWNode.SetAttribute(TEXT(\"x\"), x);\r\n\r\n\t\t\tfloatElement->Attribute(TEXT(\"y\"), &y);\r\n\t\t\tFWNode.SetAttribute(TEXT(\"y\"), y);\r\n\t\t\t\r\n\t\t\tfloatElement->Attribute(TEXT(\"width\"), &w);\r\n\t\t\tFWNode.SetAttribute(TEXT(\"width\"), w);\r\n\t\t\t\r\n\t\t\tfloatElement->Attribute(TEXT(\"height\"), &h);\r\n\t\t\tFWNode.SetAttribute(TEXT(\"height\"), h);\r\n\r\n\t\t\tdockMngElmt2Clone->InsertEndChild(FWNode);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = dockMngNode->FirstChildElement(TEXT(\"PluginDlg\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"PluginDlg\")))\r\n\t{\r\n\t\tTiXmlElement *dlgElement = childNode->ToElement();\r\n\t\tconst TCHAR *name = dlgElement->Attribute(TEXT(\"pluginName\"));\r\n\t\tTiXmlElement PDNode(TEXT(\"PluginDlg\"));\r\n\r\n\t\tint id;\r\n\t\tconst TCHAR *idStr = dlgElement->Attribute(TEXT(\"id\"), &id);\r\n\t\tif (name && idStr)\r\n\t\t{\r\n\t\t\tint curr = 0; // on left\r\n\t\t\tint prev = 0; // on left\r\n\r\n\t\t\tdlgElement->Attribute(TEXT(\"curr\"), &curr);\r\n\t\t\tdlgElement->Attribute(TEXT(\"prev\"), &prev);\r\n\r\n\t\t\tbool isVisible = false;\r\n\t\t\tconst TCHAR *val = dlgElement->Attribute(TEXT(\"isVisible\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tisVisible = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t\t}\r\n\r\n\t\t\tPDNode.SetAttribute(TEXT(\"pluginName\"), name);\r\n\t\t\tPDNode.SetAttribute(TEXT(\"id\"), idStr);\r\n\t\t\tPDNode.SetAttribute(TEXT(\"curr\"), curr);\r\n\t\t\tPDNode.SetAttribute(TEXT(\"prev\"), prev);\r\n\t\t\tPDNode.SetAttribute(TEXT(\"isVisible\"), isVisible ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\t\t\tdockMngElmt2Clone->InsertEndChild(PDNode);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = dockMngNode->FirstChildElement(TEXT(\"ActiveTabs\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"ActiveTabs\")))\r\n\t{\r\n\t\tTiXmlElement *dlgElement = childNode->ToElement();\r\n\t\tTiXmlElement CTNode(TEXT(\"ActiveTabs\"));\r\n\t\tint cont;\r\n\t\tif (dlgElement->Attribute(TEXT(\"cont\"), &cont))\r\n\t\t{\r\n\t\t\tint activeTab = 0;\r\n\t\t\tdlgElement->Attribute(TEXT(\"activeTab\"), &activeTab);\r\n\r\n\t\t\tCTNode.SetAttribute(TEXT(\"cont\"), cont);\r\n\t\t\tCTNode.SetAttribute(TEXT(\"activeTab\"), activeTab);\r\n\r\n\t\t\tdockMngElmt2Clone->InsertEndChild(CTNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nbool NppParameters::writeScintillaParams()\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tconst TCHAR *pViewName = TEXT(\"ScintillaPrimaryView\");\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *configsRoot = nppRoot->FirstChildElement(TEXT(\"GUIConfigs\"));\r\n\tif (!configsRoot)\r\n\t{\r\n\t\tconfigsRoot = nppRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfigs\")));\r\n\t}\r\n\r\n\tTiXmlNode *scintNode = getChildElementByAttribut(configsRoot, TEXT(\"GUIConfig\"), TEXT(\"name\"), pViewName);\r\n\tif (!scintNode)\r\n\t{\r\n\t\tscintNode = configsRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\")));\r\n\t\t(scintNode->ToElement())->SetAttribute(TEXT(\"name\"), pViewName);\r\n\t}\r\n\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"lineNumberMargin\"), _svp._lineNumberMarginShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"lineNumberDynamicWidth\"), _svp._lineNumberMarginDynamicWidth ?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"bookMarkMargin\"), _svp._bookMarkMarginShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"indentGuideLine\"), _svp._indentGuideLineShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\tconst TCHAR *pFolderStyleStr = (_svp._folderStyle == FOLDER_STYLE_SIMPLE)?TEXT(\"simple\"):\r\n\t\t\t\t\t\t\t\t\t(_svp._folderStyle == FOLDER_STYLE_ARROW)?TEXT(\"arrow\"):\r\n\t\t\t\t\t\t\t\t\t\t(_svp._folderStyle == FOLDER_STYLE_CIRCLE)?TEXT(\"circle\"):\r\n\t\t\t\t\t\t\t\t\t\t(_svp._folderStyle == FOLDER_STYLE_NONE)?TEXT(\"none\"):TEXT(\"box\");\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"folderMarkStyle\"), pFolderStyleStr);\r\n\r\n\tconst TCHAR *pWrapMethodStr = (_svp._lineWrapMethod == LINEWRAP_ALIGNED)?TEXT(\"aligned\"):\r\n\t\t\t\t\t\t\t\t(_svp._lineWrapMethod == LINEWRAP_INDENT)?TEXT(\"indent\"):TEXT(\"default\");\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"lineWrapMethod\"), pWrapMethodStr);\r\n\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"currentLineIndicator\"), _svp._currentLineHiliteMode);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"currentLineFrameWidth\"), _svp._currentLineFrameWidth);\r\n\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"virtualSpace\"), _svp._virtualSpace?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"scrollBeyondLastLine\"), _svp._scrollBeyondLastLine?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"rightClickKeepsSelection\"), _svp._rightClickKeepsSelection ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"disableAdvancedScrolling\"), _svp._disableAdvancedScrolling?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"wrapSymbolShow\"), _svp._wrapSymbolShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"Wrap\"), _svp._doWrap?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"borderEdge\"), _svp._showBorderEdge ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\tgeneric_string edgeColumnPosStr;\r\n\tfor (auto i : _svp._edgeMultiColumnPos)\r\n\t{\r\n\t\tstd::string s = std::to_string(i);\r\n\t\tedgeColumnPosStr += generic_string(s.begin(), s.end());\r\n\t\tedgeColumnPosStr += TEXT(\" \");\r\n\t}\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"isEdgeBgMode\"), _svp._isEdgeBgMode ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"edgeMultiColumnPos\"), edgeColumnPosStr);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"zoom\"), static_cast<int>(_svp._zoom));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"zoom2\"), static_cast<int>(_svp._zoom2));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"whiteSpaceShow\"), _svp._whiteSpaceShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"eolShow\"), _svp._eolShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"eolMode\"), _svp._eolMode);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"borderWidth\"), _svp._borderWidth);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"smoothFont\"), _svp._doSmoothFont ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"paddingLeft\"), _svp._paddingLeft);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"paddingRight\"), _svp._paddingRight);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"distractionFreeDivPart\"), _svp._distractionFreeDivPart);\r\n\treturn true;\r\n}\r\n\r\nvoid NppParameters::createXmlTreeFromGUIParams()\r\n{\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *oldGUIRoot = nppRoot->FirstChildElement(TEXT(\"GUIConfigs\"));\r\n\tTiXmlElement* dockMngNodeDup = nullptr;\r\n\tTiXmlNode* dockMngNodeOriginal = nullptr;\r\n\tif (oldGUIRoot && _nppGUI._isCmdlineNosessionActivated)\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = oldGUIRoot->FirstChildElement(TEXT(\"GUIConfig\"));\r\n\t\t\tchildNode;\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"GUIConfig\")))\r\n\t\t{\r\n\t\t\tTiXmlElement* element = childNode->ToElement();\r\n\t\t\tconst TCHAR* nm = element->Attribute(TEXT(\"name\"));\r\n\t\t\tif (nullptr == nm)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tif (!lstrcmp(nm, TEXT(\"DockingManager\")))\r\n\t\t\t{\r\n\t\t\t\tdockMngNodeOriginal = childNode;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Copy DockingParamNode\r\n\t\tif (dockMngNodeOriginal)\r\n\t\t{\r\n\t\t\tdockMngNodeDup = new TiXmlElement(TEXT(\"GUIConfig\"));\r\n\t\t\tdockMngNodeDup->SetAttribute(TEXT(\"name\"), TEXT(\"DockingManager\"));\r\n\r\n\t\t\tduplicateDockingManager(dockMngNodeOriginal, dockMngNodeDup);\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove the old root nod if it exist\r\n\tif (oldGUIRoot)\r\n\t{\r\n\t\tnppRoot->RemoveChild(oldGUIRoot);\r\n\t}\r\n\r\n\tTiXmlNode *newGUIRoot = nppRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfigs\")));\r\n\r\n\t// <GUIConfig name=\"ToolBar\" visible=\"yes\">standard</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"ToolBar\"));\r\n\t\tconst TCHAR *pStr = (_nppGUI._toolbarShow) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"visible\"), pStr);\r\n\r\n\t\tif (_nppGUI._toolBarStatus == TB_SMALL)\r\n\t\t\tpStr = TEXT(\"small\");\r\n\t\telse if (_nppGUI._toolBarStatus == TB_LARGE)\r\n\t\t\tpStr = TEXT(\"large\");\r\n\t\telse if (_nppGUI._toolBarStatus == TB_SMALL2)\r\n\t\t\tpStr = TEXT(\"small2\");\r\n\t\telse if (_nppGUI._toolBarStatus == TB_LARGE2)\r\n\t\t\tpStr = TEXT(\"large2\");\r\n\t\telse //if (_nppGUI._toolBarStatus == TB_STANDARD)\r\n\t\t\tpStr = TEXT(\"standard\");\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"StatusBar\">show</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"StatusBar\"));\r\n\t\tconst TCHAR *pStr = _nppGUI._statusBarShow ? TEXT(\"show\") : TEXT(\"hide\");\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"TabBar\" dragAndDrop=\"yes\" drawTopBar=\"yes\" drawInactiveTab=\"yes\" reduce=\"yes\" closeButton=\"yes\" doubleClick2Close=\"no\" vertical=\"no\" multiLine=\"no\" hide=\"no\" quitOnEmpty=\"no\" iconSetNumber=\"0\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"TabBar\"));\r\n\r\n\t\tconst TCHAR *pStr = (_nppGUI._tabStatus & TAB_DRAWTOPBAR) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"dragAndDrop\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_DRAGNDROP) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"drawTopBar\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_DRAWINACTIVETAB) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"drawInactiveTab\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_REDUCE) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"reduce\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_CLOSEBUTTON) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"closeButton\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_DBCLK2CLOSE) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"doubleClick2Close\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_VERTICAL) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"vertical\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_MULTILINE) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"multiLine\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_HIDE) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"hide\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_QUITONEMPTY) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"quitOnEmpty\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_ALTICONS) ? TEXT(\"1\") : TEXT(\"0\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"iconSetNumber\"), pStr);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"ScintillaViewsSplitter\">vertical</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"ScintillaViewsSplitter\"));\r\n\t\tconst TCHAR *pStr = _nppGUI._splitterPos == POS_VERTICAL ? TEXT(\"vertical\") : TEXT(\"horizontal\");\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"UserDefineDlg\" position=\"undocked\">hide</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"UserDefineDlg\"));\r\n\t\tconst TCHAR *pStr = (_nppGUI._userDefineDlgStatus & UDD_DOCKED) ? TEXT(\"docked\") : TEXT(\"undocked\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"position\"), pStr);\r\n\t\tpStr = (_nppGUI._userDefineDlgStatus & UDD_SHOW) ? TEXT(\"show\") : TEXT(\"hide\");\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"TabSetting\" size = \"4\" replaceBySpace = \"no\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"TabSetting\"));\r\n\t\tconst TCHAR *pStr = _nppGUI._tabReplacedBySpace ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"replaceBySpace\"), pStr);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"size\"), _nppGUI._tabSize);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"AppPosition\" x = \"3900\" y = \"446\" width = \"2160\" height = \"1380\" isMaximized = \"no\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"AppPosition\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"x\"), _nppGUI._appPos.left);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"y\"), _nppGUI._appPos.top);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"width\"), _nppGUI._appPos.right);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"height\"), _nppGUI._appPos.bottom);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"isMaximized\"), _nppGUI._isMaximized ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"FindWindowPosition\" left=\"134\" top=\"320\" right=\"723\" bottom=\"684\" />\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"FindWindowPosition\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"left\"), _nppGUI._findWindowPos.left);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"top\"), _nppGUI._findWindowPos.top);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"right\"), _nppGUI._findWindowPos.right);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"bottom\"), _nppGUI._findWindowPos.bottom);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"isLessModeOn\"), _nppGUI._findWindowLessMode ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"FinderConfig\" wrappedLines=\"no\" purgeBeforeEverySearch=\"no\" showOnlyOneEntryPerFoundLine=\"yes\"/>\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"FinderConfig\"));\r\n\t\tconst TCHAR* pStr = _nppGUI._finderLinesAreCurrentlyWrapped ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"wrappedLines\"), pStr);\r\n\t\tpStr = _nppGUI._finderPurgeBeforeEverySearch ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"purgeBeforeEverySearch\"), pStr);\r\n\t\tpStr = _nppGUI._finderShowOnlyOneEntryPerFoundLine ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"showOnlyOneEntryPerFoundLine\"), pStr);\r\n\r\n\t}\r\n\r\n\t// <GUIConfig name=\"noUpdate\" intervalDays=\"15\" nextUpdateDate=\"20161022\">no</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *element = insertGUIConfigBoolNode(newGUIRoot, TEXT(\"noUpdate\"), !_nppGUI._autoUpdateOpt._doAutoUpdate);\r\n\t\telement->SetAttribute(TEXT(\"intervalDays\"), _nppGUI._autoUpdateOpt._intervalDays);\r\n\t\telement->SetAttribute(TEXT(\"nextUpdateDate\"), _nppGUI._autoUpdateOpt._nextUpdateDate.toString().c_str());\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Auto-detection\">yes</GUIConfig>\t\r\n\t{\r\n\t\tconst TCHAR *pStr = TEXT(\"no\");\r\n\r\n\t\tif (_nppGUI._fileAutoDetection & cdEnabledOld)\r\n\t\t{\r\n\t\t\tpStr = TEXT(\"yesOld\");\r\n\r\n\t\t\tif ((_nppGUI._fileAutoDetection & cdAutoUpdate) && (_nppGUI._fileAutoDetection & cdGo2end))\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"autoUpdate2EndOld\");\r\n\t\t\t}\r\n\t\t\telse if (_nppGUI._fileAutoDetection & cdAutoUpdate)\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"autoOld\");\r\n\t\t\t}\r\n\t\t\telse if (_nppGUI._fileAutoDetection & cdGo2end)\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"Update2EndOld\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (_nppGUI._fileAutoDetection & cdEnabledNew)\r\n\t\t{\r\n\t\t\tpStr = TEXT(\"yes\");\r\n\r\n\t\t\tif ((_nppGUI._fileAutoDetection & cdAutoUpdate) && (_nppGUI._fileAutoDetection & cdGo2end))\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"autoUpdate2End\");\r\n\t\t\t}\r\n\t\t\telse if (_nppGUI._fileAutoDetection & cdAutoUpdate)\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"auto\");\r\n\t\t\t}\r\n\t\t\telse if (_nppGUI._fileAutoDetection & cdGo2end)\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"Update2End\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Auto-detection\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"CheckHistoryFiles\">no</GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"CheckHistoryFiles\"), _nppGUI._checkHistoryFiles);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"TrayIcon\">no</GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"TrayIcon\"), _nppGUI._isMinimizedToTray);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"MaitainIndent\">yes</GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"MaitainIndent\"), _nppGUI._maitainIndent);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"TagsMatchHighLight\" TagAttrHighLight = \"yes\" HighLightNonHtmlZone = \"no\">yes< / GUIConfig>\r\n\t{\r\n\t\tTiXmlElement * ele = insertGUIConfigBoolNode(newGUIRoot, TEXT(\"TagsMatchHighLight\"), _nppGUI._enableTagsMatchHilite);\r\n\t\tele->SetAttribute(TEXT(\"TagAttrHighLight\"), _nppGUI._enableTagAttrsHilite ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tele->SetAttribute(TEXT(\"HighLightNonHtmlZone\"), _nppGUI._enableHiliteNonHTMLZone ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"RememberLastSession\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"RememberLastSession\"), _nppGUI._rememberLastSession);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"DetectEncoding\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"DetectEncoding\"), _nppGUI._detectEncoding);\r\n\t}\r\n\t\r\n\t// <GUIConfig name = \"SaveAllConfirm\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"SaveAllConfirm\"), _nppGUI._saveAllConfirm);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"NewDocDefaultSettings\" format = \"0\" encoding = \"0\" lang = \"3\" codepage = \"-1\" openAnsiAsUTF8 = \"no\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"NewDocDefaultSettings\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"format\"), static_cast<int32_t>(_nppGUI._newDocDefaultSettings._format));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"encoding\"), _nppGUI._newDocDefaultSettings._unicodeMode);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"lang\"), _nppGUI._newDocDefaultSettings._lang);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"codepage\"), _nppGUI._newDocDefaultSettings._codepage);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"openAnsiAsUTF8\"), _nppGUI._newDocDefaultSettings._openAnsiAsUtf8 ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"langsExcluded\" gr0 = \"0\" gr1 = \"0\" gr2 = \"0\" gr3 = \"0\" gr4 = \"0\" gr5 = \"0\" gr6 = \"0\" gr7 = \"0\" langMenuCompact = \"yes\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"langsExcluded\"));\r\n\t\twriteExcludedLangList(GUIConfigElement);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"langMenuCompact\"), _nppGUI._isLangMenuCompact ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Print\" lineNumber=\"no\" printOption=\"0\" headerLeft=\"$(FULL_CURRENT_PATH)\" headerMiddle=\"\" headerRight=\"$(LONG_DATE) $(TIME)\" headerFontName=\"IBMPC\" headerFontStyle=\"1\" headerFontSize=\"8\" footerLeft=\"\" footerMiddle=\"-$(CURRENT_PRINTING_PAGE)-\" footerRight=\"\" footerFontName=\"\" footerFontStyle=\"0\" footerFontSize=\"9\" margeLeft=\"0\" margeTop=\"0\" margeRight=\"0\" margeBottom=\"0\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Print\"));\r\n\t\twritePrintSetting(GUIConfigElement);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Backup\" action=\"0\" useCustumDir=\"no\" dir=\"\" isSnapshotMode=\"yes\" snapshotBackupTiming=\"7000\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Backup\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"action\"), _nppGUI._backup);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"useCustumDir\"), _nppGUI._useDir ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"dir\"), _nppGUI._backupDir.c_str());\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"isSnapshotMode\"), _nppGUI._isSnapshotMode ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"snapshotBackupTiming\"), static_cast<int32_t>(_nppGUI._snapshotBackupTiming));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"TaskList\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"TaskList\"), _nppGUI._doTaskList);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"MRU\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"MRU\"), _nppGUI._styleMRU);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"URL\">2</GUIConfig>\r\n\t{\r\n\t\tTCHAR szStr [12] = TEXT(\"0\");\r\n\t\tgeneric_itoa(_nppGUI._styleURL, szStr, 10);\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"URL\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(szStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"uriCustomizedSchemes\">svn://</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"uriCustomizedSchemes\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._uriSchemes.c_str()));\r\n\t}\r\n\t// <GUIConfig name = \"globalOverride\" fg = \"no\" bg = \"no\" font = \"no\" fontSize = \"no\" bold = \"no\" italic = \"no\" underline = \"no\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"globalOverride\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fg\"), _nppGUI._globalOverride.enableFg ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"bg\"), _nppGUI._globalOverride.enableBg ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"font\"), _nppGUI._globalOverride.enableFont ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fontSize\"), _nppGUI._globalOverride.enableFontSize ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"bold\"), _nppGUI._globalOverride.enableBold ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"italic\"), _nppGUI._globalOverride.enableItalic ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"underline\"), _nppGUI._globalOverride.enableUnderLine ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"auto-completion\" autoCAction = \"3\" triggerFromNbChar = \"1\" funcParams = \"yes\" autoCIgnoreNumbers = \"yes\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"auto-completion\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"autoCAction\"), _nppGUI._autocStatus);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"triggerFromNbChar\"), static_cast<int32_t>(_nppGUI._autocFromLen));\r\n\r\n\t\tconst TCHAR * pStr = _nppGUI._autocIgnoreNumbers ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"autoCIgnoreNumbers\"), pStr);\r\n\r\n\t\tpStr = _nppGUI._autocInsertSelectedUseENTER ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"insertSelectedItemUseENTER\"), pStr);\r\n\r\n\t\tpStr = _nppGUI._autocInsertSelectedUseTAB ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"insertSelectedItemUseTAB\"), pStr);\r\n\r\n\t\tpStr = _nppGUI._funcParams ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"funcParams\"), pStr);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"auto-insert\" parentheses = \"yes\" brackets = \"yes\" curlyBrackets = \"yes\" quotes = \"no\" doubleQuotes = \"yes\" htmlXmlTag = \"yes\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"auto-insert\"));\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"parentheses\"), _nppGUI._matchedPairConf._doParentheses ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"brackets\"), _nppGUI._matchedPairConf._doBrackets ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"curlyBrackets\"), _nppGUI._matchedPairConf._doCurlyBrackets ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"quotes\"), _nppGUI._matchedPairConf._doQuotes ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"doubleQuotes\"), _nppGUI._matchedPairConf._doDoubleQuotes ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"htmlXmlTag\"), _nppGUI._matchedPairConf._doHtmlXmlTag ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\t\tTiXmlElement hist_element{ TEXT(\"\") };\r\n\t\thist_element.SetValue(TEXT(\"UserDefinePair\"));\r\n\t\tfor (size_t i = 0, nb = _nppGUI._matchedPairConf._matchedPairs.size(); i < nb; ++i)\r\n\t\t{\r\n\t\t\tint open = _nppGUI._matchedPairConf._matchedPairs[i].first;\r\n\t\t\tint close = _nppGUI._matchedPairConf._matchedPairs[i].second;\r\n\r\n\t\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"open\"), open);\r\n\t\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"close\"), close);\r\n\t\t\tGUIConfigElement->InsertEndChild(hist_element);\r\n\t\t}\r\n\t}\r\n\r\n\t// <GUIConfig name = \"sessionExt\">< / GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"sessionExt\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._definedSessionExt.c_str()));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"workspaceExt\"></GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"workspaceExt\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._definedWorkspaceExt.c_str()));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"MenuBar\">show</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"MenuBar\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._menuBarShow ? TEXT(\"show\") : TEXT(\"hide\")));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Caret\" width=\"1\" blinkRate=\"250\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Caret\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"width\"), _nppGUI._caretWidth);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"blinkRate\"), _nppGUI._caretBlinkRate);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"ScintillaGlobalSettings\" enableMultiSelection=\"no\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"ScintillaGlobalSettings\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"enableMultiSelection\"), _nppGUI._enableMultiSelection ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"openSaveDir\" value=\"0\" defaultDirPath=\"\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"openSaveDir\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"value\"), _nppGUI._openSaveDir);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"defaultDirPath\"), _nppGUI._defaultDir);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"titleBar\" short=\"no\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"titleBar\"));\r\n\t\tconst TCHAR *pStr = (_nppGUI._shortTitlebar) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"short\"), pStr);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"stylerTheme\" path=\"C:\\sources\\notepad-plus-plus\\PowerEditor\\visual.net\\..\\bin\\stylers.xml\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"stylerTheme\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"path\"), _nppGUI._themeName.c_str());\r\n\t}\r\n\r\n\t// <GUIConfig name=\"insertDateTime\" path=\"C:\\sources\\notepad-plus-plus\\PowerEditor\\visual.net\\..\\bin\\stylers.xml\" />\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"insertDateTime\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customizedFormat\"), _nppGUI._dateTimeFormat.c_str());\r\n\t\tconst TCHAR* pStr = (_nppGUI._dateTimeReverseDefaultOrder) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"reverseDefaultOrder\"), pStr);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"wordCharList\" useDefault=\"yes\" charsAdded=\".$%\"  />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"wordCharList\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"useDefault\"), _nppGUI._isWordCharDefault ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\t\tconst wchar_t* charsAddStr = wmc.char2wchar(_nppGUI._customWordChars.c_str(), SC_CP_UTF8);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"charsAdded\"), charsAddStr);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"delimiterSelection\" leftmostDelimiter=\"40\" rightmostDelimiter=\"41\" delimiterSelectionOnEntireDocument=\"no\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"delimiterSelection\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"leftmostDelimiter\"), _nppGUI._leftmostDelimiter);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"rightmostDelimiter\"), _nppGUI._rightmostDelimiter);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"delimiterSelectionOnEntireDocument\"), _nppGUI._delimiterSelectionOnEntireDocument ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"multiInst\" setting=\"0\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"multiInst\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"setting\"), _nppGUI._multiInstSetting);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"MISC\" fileSwitcherWithoutExtColumn=\"no\" backSlashIsEscapeCharacterForSql=\"yes\" isFolderDroppedOpenFiles=\"no\" saveDlgExtFilterToAllTypes=\"no\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"MISC\"));\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fileSwitcherWithoutExtColumn\"), _nppGUI._fileSwitcherWithoutExtColumn ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fileSwitcherExtWidth\"), _nppGUI._fileSwitcherExtWidth);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fileSwitcherWithoutPathColumn\"), _nppGUI._fileSwitcherWithoutPathColumn ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fileSwitcherPathWidth\"), _nppGUI._fileSwitcherPathWidth);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"backSlashIsEscapeCharacterForSql\"), _nppGUI._backSlashIsEscapeCharacterForSql ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"writeTechnologyEngine\"), _nppGUI._writeTechnologyEngine);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"isFolderDroppedOpenFiles\"), _nppGUI._isFolderDroppedOpenFiles ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"docPeekOnTab\"), _nppGUI._isDocPeekOnTab ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"docPeekOnMap\"), _nppGUI._isDocPeekOnMap ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"sortFunctionList\"), _nppGUI._shouldSortFunctionList ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"saveDlgExtFilterToAllTypes\"), _nppGUI._setSaveDlgExtFiltToAllTypes ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"muteSounds\"), _nppGUI._muteSounds ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"enableFoldCmdToggable\"), _nppGUI._enableFoldCmdToggable ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"hideMenuRightShortcuts\"), _nppGUI._hideMenuRightShortcuts ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Searching\" \"monospacedFontFindDlg\"=\"no\" stopFillingFindField=\"no\" findDlgAlwaysVisible=\"no\" confirmReplaceOpenDocs=\"yes\" confirmMacroReplaceOpenDocs=\"yes\" confirmReplaceInFiles=\"yes\" confirmMacroReplaceInFiles=\"yes\" replaceStopsWithoutFindingNext=\"no\"/>\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Searching\"));\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"monospacedFontFindDlg\"), _nppGUI._monospacedFontFindDlg ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fillFindFieldWithSelected\"), _nppGUI._fillFindFieldWithSelected ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fillFindFieldSelectCaret\"), _nppGUI._fillFindFieldSelectCaret ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"findDlgAlwaysVisible\"), _nppGUI._findDlgAlwaysVisible ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"confirmReplaceInAllOpenDocs\"), _nppGUI._confirmReplaceInAllOpenDocs ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"replaceStopsWithoutFindingNext\"), _nppGUI._replaceStopsWithoutFindingNext ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"searchEngine\" searchEngineChoice=\"2\" searchEngineCustom=\"\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"searchEngine\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"searchEngineChoice\"), _nppGUI._searchEngineChoice);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"searchEngineCustom\"), _nppGUI._searchEngineCustom);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"MarkAll\" matchCase=\"no\" wholeWordOnly=\"yes\" </GUIConfig>\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"MarkAll\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"matchCase\"), _nppGUI._markAllCaseSensitive ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"wholeWordOnly\"), _nppGUI._markAllWordOnly ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"SmartHighLight\" matchCase=\"no\" wholeWordOnly=\"yes\" useFindSettings=\"no\" onAnotherView=\"no\">yes</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = insertGUIConfigBoolNode(newGUIRoot, TEXT(\"SmartHighLight\"), _nppGUI._enableSmartHilite);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"matchCase\"), _nppGUI._smartHiliteCaseSensitive ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"wholeWordOnly\"), _nppGUI._smartHiliteWordOnly ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"useFindSettings\"), _nppGUI._smartHiliteUseFindSettings ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"onAnotherView\"), _nppGUI._smartHiliteOnAnotherView ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"commandLineInterpreter\">powershell</GUIConfig>\r\n\tif (_nppGUI._commandLineInterpreter.compare(CMD_INTERPRETER))\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"commandLineInterpreter\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._commandLineInterpreter.c_str()));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"DarkMode\" enable=\"no\" colorTone=\"0\" />\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"DarkMode\"));\r\n\r\n\t\tauto setYesNoBoolAttribute = [&GUIConfigElement](const TCHAR* name, bool value) {\r\n\t\t\tconst TCHAR* pStr = value ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\t\tGUIConfigElement->SetAttribute(name, pStr);\r\n\t\t};\r\n\r\n\t\tsetYesNoBoolAttribute(TEXT(\"enable\"), _nppGUI._darkmode._isEnabled);\r\n\t\t//setYesNoBoolAttribute(TEXT(\"enablePlugin\"), _nppGUI._darkmode._isEnabledPlugin);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"colorTone\"), _nppGUI._darkmode._colorTone);\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorTop\"), _nppGUI._darkmode._customColors.pureBackground);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorMenuHotTrack\"), _nppGUI._darkmode._customColors.hotBackground);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorActive\"), _nppGUI._darkmode._customColors.softerBackground);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorMain\"), _nppGUI._darkmode._customColors.background);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorError\"), _nppGUI._darkmode._customColors.errorBackground);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorText\"), _nppGUI._darkmode._customColors.text);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorDarkText\"), _nppGUI._darkmode._customColors.darkerText);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorDisabledText\"), _nppGUI._darkmode._customColors.disabledText);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorLinkText\"), _nppGUI._darkmode._customColors.linkText);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorEdge\"), _nppGUI._darkmode._customColors.edge);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorHotEdge\"), _nppGUI._darkmode._customColors.hotEdge);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorDisabledEdge\"), _nppGUI._darkmode._customColors.disabledEdge);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"ScintillaPrimaryView\" lineNumberMargin=\"show\" bookMarkMargin=\"show\" indentGuideLine=\"show\" folderMarkStyle=\"box\" lineWrapMethod=\"aligned\" currentLineHilitingShow=\"show\" scrollBeyondLastLine=\"no\" rightClickKeepsSelection=\"no\" disableAdvancedScrolling=\"no\" wrapSymbolShow=\"hide\" Wrap=\"no\" borderEdge=\"yes\" edge=\"no\" edgeNbColumn=\"80\" zoom=\"0\" zoom2=\"0\" whiteSpaceShow=\"hide\" eolShow=\"hide\" borderWidth=\"2\" smoothFont=\"no\" />\r\n\twriteScintillaParams();\r\n\r\n\t// <GUIConfig name=\"DockingManager\" leftWidth=\"328\" rightWidth=\"359\" topHeight=\"200\" bottomHeight=\"436\">\r\n\t// ...\r\n\tif (_nppGUI._isCmdlineNosessionActivated && dockMngNodeDup)\r\n\t{\r\n\t\tnewGUIRoot->InsertEndChild(*dockMngNodeDup);\r\n\t\tdelete dockMngNodeDup;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tinsertDockingParamNode(newGUIRoot);\r\n\t}\r\n}\r\n\r\nbool NppParameters::writeFindHistory()\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *findHistoryRoot = nppRoot->FirstChildElement(TEXT(\"FindHistory\"));\r\n\tif (!findHistoryRoot)\r\n\t{\r\n\t\tTiXmlElement element(TEXT(\"FindHistory\"));\r\n\t\tfindHistoryRoot = nppRoot->InsertEndChild(element);\r\n\t}\r\n\tfindHistoryRoot->Clear();\r\n\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"nbMaxFindHistoryPath\"),\t_findHistory._nbMaxFindHistoryPath);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"nbMaxFindHistoryFilter\"),  _findHistory._nbMaxFindHistoryFilter);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"nbMaxFindHistoryFind\"),\t_findHistory._nbMaxFindHistoryFind);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"nbMaxFindHistoryReplace\"), _findHistory._nbMaxFindHistoryReplace);\r\n\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"matchWord\"),\t\t\t\t_findHistory._isMatchWord?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"matchCase\"),\t\t\t\t_findHistory._isMatchCase?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"wrap\"),\t\t\t\t\t_findHistory._isWrap?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"directionDown\"),\t\t\t_findHistory._isDirectionDown?TEXT(\"yes\"):TEXT(\"no\"));\r\n\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifRecuisive\"),\t\t\t_findHistory._isFifRecuisive?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifInHiddenFolder\"),\t\t_findHistory._isFifInHiddenFolder?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifProjectPanel1\"),\t    \t_findHistory._isFifProjectPanel_1?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifProjectPanel2\"),\t      \t_findHistory._isFifProjectPanel_2?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifProjectPanel3\"),\t       \t_findHistory._isFifProjectPanel_3?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifFilterFollowsDoc\"),\t_findHistory._isFilterFollowDoc?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifFolderFollowsDoc\"),\t_findHistory._isFolderFollowDoc?TEXT(\"yes\"):TEXT(\"no\"));\r\n\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"searchMode\"), _findHistory._searchMode);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"transparencyMode\"), _findHistory._transparencyMode);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"transparency\"), _findHistory._transparency);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"dotMatchesNewline\"),\t\t_findHistory._dotMatchesNewline?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"isSearch2ButtonsMode\"),\t\t_findHistory._isSearch2ButtonsMode?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"regexBackward4PowerUser\"),\t\t_findHistory._regexBackward4PowerUser ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\tTiXmlElement hist_element{TEXT(\"\")};\r\n\r\n\thist_element.SetValue(TEXT(\"Path\"));\r\n\tfor (size_t i = 0, len = _findHistory._findHistoryPaths.size(); i < len; ++i)\r\n\t{\r\n\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"name\"), _findHistory._findHistoryPaths[i].c_str());\r\n\t\tfindHistoryRoot->InsertEndChild(hist_element);\r\n\t}\r\n\r\n\thist_element.SetValue(TEXT(\"Filter\"));\r\n\tfor (size_t i = 0, len = _findHistory._findHistoryFilters.size(); i < len; ++i)\r\n\t{\r\n\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"name\"), _findHistory._findHistoryFilters[i].c_str());\r\n\t\tfindHistoryRoot->InsertEndChild(hist_element);\r\n\t}\r\n\r\n\thist_element.SetValue(TEXT(\"Find\"));\r\n\tfor (size_t i = 0, len = _findHistory._findHistoryFinds.size(); i < len; ++i)\r\n\t{\r\n\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"name\"), _findHistory._findHistoryFinds[i].c_str());\r\n\t\tfindHistoryRoot->InsertEndChild(hist_element);\r\n\t}\r\n\r\n\thist_element.SetValue(TEXT(\"Replace\"));\r\n\tfor (size_t i = 0, len = _findHistory._findHistoryReplaces.size(); i < len; ++i)\r\n\t{\r\n\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"name\"), _findHistory._findHistoryReplaces[i].c_str());\r\n\t\tfindHistoryRoot->InsertEndChild(hist_element);\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nvoid NppParameters::insertDockingParamNode(TiXmlNode *GUIRoot)\r\n{\r\n\tTiXmlElement DMNode(TEXT(\"GUIConfig\"));\r\n\tDMNode.SetAttribute(TEXT(\"name\"), TEXT(\"DockingManager\"));\r\n\tDMNode.SetAttribute(TEXT(\"leftWidth\"), _nppGUI._dockingData._leftWidth);\r\n\tDMNode.SetAttribute(TEXT(\"rightWidth\"), _nppGUI._dockingData._rightWidth);\r\n\tDMNode.SetAttribute(TEXT(\"topHeight\"), _nppGUI._dockingData._topHeight);\r\n\tDMNode.SetAttribute(TEXT(\"bottomHeight\"), _nppGUI._dockingData._bottomHight);\r\n\r\n\tfor (size_t i = 0, len = _nppGUI._dockingData._flaotingWindowInfo.size(); i < len ; ++i)\r\n\t{\r\n\t\tFloatingWindowInfo & fwi = _nppGUI._dockingData._flaotingWindowInfo[i];\r\n\t\tTiXmlElement FWNode(TEXT(\"FloatingWindow\"));\r\n\t\tFWNode.SetAttribute(TEXT(\"cont\"), fwi._cont);\r\n\t\tFWNode.SetAttribute(TEXT(\"x\"), fwi._pos.left);\r\n\t\tFWNode.SetAttribute(TEXT(\"y\"), fwi._pos.top);\r\n\t\tFWNode.SetAttribute(TEXT(\"width\"), fwi._pos.right);\r\n\t\tFWNode.SetAttribute(TEXT(\"height\"), fwi._pos.bottom);\r\n\r\n\t\tDMNode.InsertEndChild(FWNode);\r\n\t}\r\n\r\n\tfor (size_t i = 0, len = _nppGUI._dockingData._pluginDockInfo.size() ; i < len ; ++i)\r\n\t{\r\n\t\tPluginDlgDockingInfo & pdi = _nppGUI._dockingData._pluginDockInfo[i];\r\n\t\tTiXmlElement PDNode(TEXT(\"PluginDlg\"));\r\n\t\tPDNode.SetAttribute(TEXT(\"pluginName\"), pdi._name);\r\n\t\tPDNode.SetAttribute(TEXT(\"id\"), pdi._internalID);\r\n\t\tPDNode.SetAttribute(TEXT(\"curr\"), pdi._currContainer);\r\n\t\tPDNode.SetAttribute(TEXT(\"prev\"), pdi._prevContainer);\r\n\t\tPDNode.SetAttribute(TEXT(\"isVisible\"), pdi._isVisible?TEXT(\"yes\"):TEXT(\"no\"));\r\n\r\n\t\tDMNode.InsertEndChild(PDNode);\r\n\t}\r\n\r\n\tfor (size_t i = 0, len = _nppGUI._dockingData._containerTabInfo.size(); i < len ; ++i)\r\n\t{\r\n\t\tContainerTabInfo & cti = _nppGUI._dockingData._containerTabInfo[i];\r\n\t\tTiXmlElement CTNode(TEXT(\"ActiveTabs\"));\r\n\t\tCTNode.SetAttribute(TEXT(\"cont\"), cti._cont);\r\n\t\tCTNode.SetAttribute(TEXT(\"activeTab\"), cti._activeTab);\r\n\t\tDMNode.InsertEndChild(CTNode);\r\n\t}\r\n\r\n\tGUIRoot->InsertEndChild(DMNode);\r\n}\r\n\r\nvoid NppParameters::writePrintSetting(TiXmlElement *element)\r\n{\r\n\tconst TCHAR *pStr = _nppGUI._printSettings._printLineNumber?TEXT(\"yes\"):TEXT(\"no\");\r\n\telement->SetAttribute(TEXT(\"lineNumber\"), pStr);\r\n\r\n\telement->SetAttribute(TEXT(\"printOption\"), _nppGUI._printSettings._printOption);\r\n\r\n\telement->SetAttribute(TEXT(\"headerLeft\"), _nppGUI._printSettings._headerLeft.c_str());\r\n\telement->SetAttribute(TEXT(\"headerMiddle\"), _nppGUI._printSettings._headerMiddle.c_str());\r\n\telement->SetAttribute(TEXT(\"headerRight\"), _nppGUI._printSettings._headerRight.c_str());\r\n\telement->SetAttribute(TEXT(\"footerLeft\"), _nppGUI._printSettings._footerLeft.c_str());\r\n\telement->SetAttribute(TEXT(\"footerMiddle\"), _nppGUI._printSettings._footerMiddle.c_str());\r\n\telement->SetAttribute(TEXT(\"footerRight\"), _nppGUI._printSettings._footerRight.c_str());\r\n\r\n\telement->SetAttribute(TEXT(\"headerFontName\"), _nppGUI._printSettings._headerFontName.c_str());\r\n\telement->SetAttribute(TEXT(\"headerFontStyle\"), _nppGUI._printSettings._headerFontStyle);\r\n\telement->SetAttribute(TEXT(\"headerFontSize\"), _nppGUI._printSettings._headerFontSize);\r\n\telement->SetAttribute(TEXT(\"footerFontName\"), _nppGUI._printSettings._footerFontName.c_str());\r\n\telement->SetAttribute(TEXT(\"footerFontStyle\"), _nppGUI._printSettings._footerFontStyle);\r\n\telement->SetAttribute(TEXT(\"footerFontSize\"), _nppGUI._printSettings._footerFontSize);\r\n\r\n\telement->SetAttribute(TEXT(\"margeLeft\"), _nppGUI._printSettings._marge.left);\r\n\telement->SetAttribute(TEXT(\"margeRight\"), _nppGUI._printSettings._marge.right);\r\n\telement->SetAttribute(TEXT(\"margeTop\"), _nppGUI._printSettings._marge.top);\r\n\telement->SetAttribute(TEXT(\"margeBottom\"), _nppGUI._printSettings._marge.bottom);\r\n}\r\n\r\nvoid NppParameters::writeExcludedLangList(TiXmlElement *element)\r\n{\r\n\tint g0 = 0; // up to 8\r\n\tint g1 = 0; // up to 16\r\n\tint g2 = 0; // up to 24\r\n\tint g3 = 0; // up to 32\r\n\tint g4 = 0; // up to 40\r\n\tint g5 = 0; // up to 48\r\n\tint g6 = 0; // up to 56\r\n\tint g7 = 0; // up to 64\r\n\tint g8 = 0; // up to 72\r\n\tint g9 = 0; // up to 80\r\n\tint g10= 0; // up to 88\r\n\tint g11= 0; // up to 96\r\n\tint g12= 0; // up to 104\r\n\r\n\tconst int groupNbMember = 8;\r\n\r\n\tfor (size_t i = 0, len = _nppGUI._excludedLangList.size(); i < len ; ++i)\r\n\t{\r\n\t\tLangType langType = _nppGUI._excludedLangList[i]._langType;\r\n\t\tif (langType >= L_EXTERNAL && langType < L_END)\r\n\t\t\tcontinue;\r\n\r\n\t\tint nGrp = langType / groupNbMember;\r\n\t\tint nMask = 1 << langType % groupNbMember;\r\n\r\n\r\n\t\tswitch (nGrp)\r\n\t\t{\r\n\t\t\tcase 0 :\r\n\t\t\t\tg0 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1 :\r\n\t\t\t\tg1 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2 :\r\n\t\t\t\tg2 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3 :\r\n\t\t\t\tg3 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4 :\r\n\t\t\t\tg4 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5 :\r\n\t\t\t\tg5 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6 :\r\n\t\t\t\tg6 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7 :\r\n\t\t\t\tg7 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\tg8 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 9:\r\n\t\t\t\tg9 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 10:\r\n\t\t\t\tg10 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 11:\r\n\t\t\t\tg11 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12:\r\n\t\t\t\tg12 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\telement->SetAttribute(TEXT(\"gr0\"), g0);\r\n\telement->SetAttribute(TEXT(\"gr1\"), g1);\r\n\telement->SetAttribute(TEXT(\"gr2\"), g2);\r\n\telement->SetAttribute(TEXT(\"gr3\"), g3);\r\n\telement->SetAttribute(TEXT(\"gr4\"), g4);\r\n\telement->SetAttribute(TEXT(\"gr5\"), g5);\r\n\telement->SetAttribute(TEXT(\"gr6\"), g6);\r\n\telement->SetAttribute(TEXT(\"gr7\"), g7);\r\n\telement->SetAttribute(TEXT(\"gr8\"), g8);\r\n\telement->SetAttribute(TEXT(\"gr9\"), g9);\r\n\telement->SetAttribute(TEXT(\"gr10\"), g10);\r\n\telement->SetAttribute(TEXT(\"gr11\"), g11);\r\n\telement->SetAttribute(TEXT(\"gr12\"), g12);\r\n}\r\n\r\nTiXmlElement * NppParameters::insertGUIConfigBoolNode(TiXmlNode *r2w, const TCHAR *name, bool bVal)\r\n{\r\n\tconst TCHAR *pStr = bVal?TEXT(\"yes\"):TEXT(\"no\");\r\n\tTiXmlElement *GUIConfigElement = (r2w->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\tGUIConfigElement->SetAttribute(TEXT(\"name\"), name);\r\n\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\treturn GUIConfigElement;\r\n}\r\n\r\nint RGB2int(COLORREF color)\r\n{\r\n\treturn (((((DWORD)color) & 0x0000FF) << 16) | ((((DWORD)color) & 0x00FF00)) | ((((DWORD)color) & 0xFF0000) >> 16));\r\n}\r\n\r\nint NppParameters::langTypeToCommandID(LangType lt) const\r\n{\r\n\tint id;\r\n\tswitch (lt)\r\n\t{\r\n\t\tcase L_C :\r\n\t\t\tid = IDM_LANG_C; break;\r\n\t\tcase L_CPP :\r\n\t\t\tid = IDM_LANG_CPP; break;\r\n\t\tcase L_JAVA :\r\n\t\t\tid = IDM_LANG_JAVA;\tbreak;\r\n\t\tcase L_CS :\r\n\t\t\tid = IDM_LANG_CS; break;\r\n\t\tcase L_OBJC :\r\n\t\t\tid = IDM_LANG_OBJC;\tbreak;\r\n\t\tcase L_HTML :\r\n\t\t\tid = IDM_LANG_HTML;\tbreak;\r\n\t\tcase L_XML :\r\n\t\t\tid = IDM_LANG_XML; break;\r\n\t\tcase L_JS :\r\n\t\tcase L_JAVASCRIPT:\r\n\t\t\tid = IDM_LANG_JS; break;\r\n\t\tcase L_JSON:\r\n\t\t\tid = IDM_LANG_JSON; break;\r\n\t\tcase L_PHP :\r\n\t\t\tid = IDM_LANG_PHP; break;\r\n\t\tcase L_ASP :\r\n\t\t\tid = IDM_LANG_ASP; break;\r\n\t\tcase L_JSP :\r\n\t\t\tid = IDM_LANG_JSP; break;\r\n\t\tcase L_CSS :\r\n\t\t\tid = IDM_LANG_CSS; break;\r\n\t\tcase L_LUA :\r\n\t\t\tid = IDM_LANG_LUA; break;\r\n\t\tcase L_PERL :\r\n\t\t\tid = IDM_LANG_PERL; break;\r\n\t\tcase L_PYTHON :\r\n\t\t\tid = IDM_LANG_PYTHON; break;\r\n\t\tcase L_BATCH :\r\n\t\t\tid = IDM_LANG_BATCH; break;\r\n\t\tcase L_PASCAL :\r\n\t\t\tid = IDM_LANG_PASCAL; break;\r\n\t\tcase L_MAKEFILE :\r\n\t\t\tid = IDM_LANG_MAKEFILE;\tbreak;\r\n\t\tcase L_INI :\r\n\t\t\tid = IDM_LANG_INI; break;\r\n\t\tcase L_ASCII :\r\n\t\t\tid = IDM_LANG_ASCII; break;\r\n\t\tcase L_RC :\r\n\t\t\tid = IDM_LANG_RC; break;\r\n\t\tcase L_TEX :\r\n\t\t\tid = IDM_LANG_TEX; break;\r\n\t\tcase L_FORTRAN :\r\n\t\t\tid = IDM_LANG_FORTRAN; break;\r\n\t\tcase L_FORTRAN_77 :\r\n\t\t\tid = IDM_LANG_FORTRAN_77; break;\r\n\t\tcase L_BASH :\r\n\t\t\tid = IDM_LANG_BASH; break;\r\n\t\tcase L_FLASH :\r\n\t\t\tid = IDM_LANG_FLASH; break;\r\n\t\tcase L_NSIS :\r\n\t\t\tid = IDM_LANG_NSIS; break;\r\n\t\tcase L_USER :\r\n\t\t\tid = IDM_LANG_USER; break;\r\n\t\tcase L_SQL :\r\n\t\t\tid = IDM_LANG_SQL; break;\r\n\t\tcase L_VB :\r\n\t\t\tid = IDM_LANG_VB; break;\r\n\t\tcase L_TCL :\r\n\t\t\tid = IDM_LANG_TCL; break;\r\n\r\n\t\tcase L_LISP :\r\n\t\t\tid = IDM_LANG_LISP; break;\r\n\t\tcase L_SCHEME :\r\n\t\t\tid = IDM_LANG_SCHEME; break;\r\n\t\tcase L_ASM :\r\n\t\t\tid = IDM_LANG_ASM; break;\r\n\t\tcase L_DIFF :\r\n\t\t\tid = IDM_LANG_DIFF; break;\r\n\t\tcase L_PROPS :\r\n\t\t\tid = IDM_LANG_PROPS; break;\r\n\t\tcase L_PS :\r\n\t\t\tid = IDM_LANG_PS; break;\r\n\t\tcase L_RUBY :\r\n\t\t\tid = IDM_LANG_RUBY; break;\r\n\t\tcase L_SMALLTALK :\r\n\t\t\tid = IDM_LANG_SMALLTALK; break;\r\n\t\tcase L_VHDL :\r\n\t\t\tid = IDM_LANG_VHDL; break;\r\n\r\n\t\tcase L_ADA :\r\n\t\t\tid = IDM_LANG_ADA; break;\r\n\t\tcase L_MATLAB :\r\n\t\t\tid = IDM_LANG_MATLAB; break;\r\n\r\n\t\tcase L_HASKELL :\r\n\t\t\tid = IDM_LANG_HASKELL; break;\r\n\r\n\t\tcase L_KIX :\r\n\t\t\tid = IDM_LANG_KIX; break;\r\n\t\tcase L_AU3 :\r\n\t\t\tid = IDM_LANG_AU3; break;\r\n\t\tcase L_VERILOG :\r\n\t\t\tid = IDM_LANG_VERILOG; break;\r\n\t\tcase L_CAML :\r\n\t\t\tid = IDM_LANG_CAML; break;\r\n\r\n\t\tcase L_INNO :\r\n\t\t\tid = IDM_LANG_INNO; break;\r\n\r\n\t\tcase L_CMAKE :\r\n\t\t\tid = IDM_LANG_CMAKE; break;\r\n\r\n\t\tcase L_YAML :\r\n\t\t\tid = IDM_LANG_YAML; break;\r\n\r\n\t\tcase L_COBOL :\r\n\t\t\tid = IDM_LANG_COBOL; break;\r\n\r\n\t\tcase L_D :\r\n\t\t\tid = IDM_LANG_D; break;\r\n\r\n\t\tcase L_GUI4CLI :\r\n\t\t\tid = IDM_LANG_GUI4CLI; break;\r\n\r\n\t\tcase L_POWERSHELL :\r\n\t\t\tid = IDM_LANG_POWERSHELL; break;\r\n\r\n\t\tcase L_R :\r\n\t\t\tid = IDM_LANG_R; break;\r\n\r\n\t\tcase L_COFFEESCRIPT :\r\n\t\t\tid = IDM_LANG_COFFEESCRIPT; break;\r\n\r\n\t\tcase L_BAANC:\r\n\t\t\tid = IDM_LANG_BAANC; break;\r\n\r\n\t\tcase L_SREC :\r\n\t\t\tid = IDM_LANG_SREC; break;\r\n\r\n\t\tcase L_IHEX :\r\n\t\t\tid = IDM_LANG_IHEX; break;\r\n\r\n\t\tcase L_TEHEX :\r\n\t\t\tid = IDM_LANG_TEHEX; break;\r\n\r\n\t\tcase L_SWIFT:\r\n\t\t\tid = IDM_LANG_SWIFT; break;\r\n\r\n\t\tcase L_ASN1 :\r\n\t\t\tid = IDM_LANG_ASN1; break;\r\n\r\n        case L_AVS :\r\n\t\t\tid = IDM_LANG_AVS; break;\r\n\r\n\t\tcase L_BLITZBASIC :\r\n\t\t\tid = IDM_LANG_BLITZBASIC; break;\r\n\r\n\t\tcase L_PUREBASIC :\r\n\t\t\tid = IDM_LANG_PUREBASIC; break;\r\n\r\n\t\tcase L_FREEBASIC :\r\n\t\t\tid = IDM_LANG_FREEBASIC; break;\r\n\r\n\t\tcase L_CSOUND :\r\n\t\t\tid = IDM_LANG_CSOUND; break;\r\n\r\n\t\tcase L_ERLANG :\r\n\t\t\tid = IDM_LANG_ERLANG; break;\r\n\r\n\t\tcase L_ESCRIPT :\r\n\t\t\tid = IDM_LANG_ESCRIPT; break;\r\n\r\n\t\tcase L_FORTH :\r\n\t\t\tid = IDM_LANG_FORTH; break;\r\n\r\n\t\tcase L_LATEX :\r\n\t\t\tid = IDM_LANG_LATEX; break;\r\n\r\n\t\tcase L_MMIXAL :\r\n\t\t\tid = IDM_LANG_MMIXAL; break;\r\n\r\n\t\tcase L_NIM :\r\n\t\t\tid = IDM_LANG_NIM; break;\r\n\r\n\t\tcase L_NNCRONTAB :\r\n\t\t\tid = IDM_LANG_NNCRONTAB; break;\r\n\r\n\t\tcase L_OSCRIPT :\r\n\t\t\tid = IDM_LANG_OSCRIPT; break;\r\n\r\n\t\tcase L_REBOL :\r\n\t\t\tid = IDM_LANG_REBOL; break;\r\n\r\n\t\tcase L_REGISTRY :\r\n\t\t\tid = IDM_LANG_REGISTRY; break;\r\n\r\n\t\tcase L_RUST :\r\n\t\t\tid = IDM_LANG_RUST; break;\r\n\r\n\t\tcase L_SPICE :\r\n\t\t\tid = IDM_LANG_SPICE; break;\r\n\r\n\t\tcase L_TXT2TAGS :\r\n\t\t\tid = IDM_LANG_TXT2TAGS; break;\r\n\r\n\t\tcase L_VISUALPROLOG:\r\n\t\t\tid = IDM_LANG_VISUALPROLOG; break;\r\n\r\n\t\tcase L_TYPESCRIPT:\r\n\t\t\tid = IDM_LANG_TYPESCRIPT; break;\r\n\r\n\t\tcase L_SEARCHRESULT :\r\n\t\t\tid = -1;\tbreak;\r\n\r\n\t\tcase L_TEXT :\r\n\t\t\tid = IDM_LANG_TEXT;\tbreak;\r\n\r\n\r\n\t\tdefault :\r\n\t\t\tif (lt >= L_EXTERNAL && lt < L_END)\r\n\t\t\t\tid = lt - L_EXTERNAL + IDM_LANG_EXTERNAL;\r\n\t\t\telse\r\n\t\t\t\tid = IDM_LANG_TEXT;\r\n\t}\r\n\treturn id;\r\n}\r\n\r\ngeneric_string NppParameters:: getWinVersionStr() const\r\n{\r\n\tswitch (_winVersion)\r\n\t{\r\n\t\tcase WV_WIN32S: return TEXT(\"Windows 3.1\");\r\n\t\tcase WV_95: return TEXT(\"Windows 95\");\r\n\t\tcase WV_98: return TEXT(\"Windows 98\");\r\n\t\tcase WV_ME: return TEXT(\"Windows Millennium Edition\");\r\n\t\tcase WV_NT: return TEXT(\"Windows NT\");\r\n\t\tcase WV_W2K: return TEXT(\"Windows 2000\");\r\n\t\tcase WV_XP: return TEXT(\"Windows XP\");\r\n\t\tcase WV_S2003: return TEXT(\"Windows Server 2003\");\r\n\t\tcase WV_XPX64: return TEXT(\"Windows XP 64 bits\");\r\n\t\tcase WV_VISTA: return TEXT(\"Windows Vista\");\r\n\t\tcase WV_WIN7: return TEXT(\"Windows 7\");\r\n\t\tcase WV_WIN8: return TEXT(\"Windows 8\");\r\n\t\tcase WV_WIN81: return TEXT(\"Windows 8.1\");\r\n\t\tcase WV_WIN10: return TEXT(\"Windows 10\");\r\n\t\tdefault: /*case WV_UNKNOWN:*/ return TEXT(\"Windows unknown version\");\r\n\t}\r\n}\r\n\r\ngeneric_string NppParameters::getWinVerBitStr() const\r\n{\r\n\tswitch (_platForm)\r\n\t{\r\n\tcase PF_X86:\r\n\t\treturn TEXT(\"32-bit\");\r\n\r\n\tcase PF_X64:\r\n\tcase PF_IA64:\r\n\tcase PF_ARM64:\r\n\t\treturn TEXT(\"64-bit\");\r\n\r\n\tdefault:\r\n\t\treturn TEXT(\"Unknown-bit\");\r\n\t}\r\n}\r\n\r\ngeneric_string NppParameters::writeStyles(LexerStylerArray & lexersStylers, StyleArray & globalStylers)\r\n{\r\n\tTiXmlNode *lexersRoot = (_pXmlUserStylerDoc->FirstChild(TEXT(\"NotepadPlus\")))->FirstChildElement(TEXT(\"LexerStyles\"));\r\n\tfor (TiXmlNode *childNode = lexersRoot->FirstChildElement(TEXT(\"LexerType\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"LexerType\")))\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *nm = element->Attribute(TEXT(\"name\"));\r\n\r\n\t\tLexerStyler *pLs = _lexerStylerVect.getLexerStylerByName(nm);\r\n\t\tLexerStyler *pLs2 = lexersStylers.getLexerStylerByName(nm);\r\n\r\n\t\tif (pLs)\r\n\t\t{\r\n\t\t\tconst TCHAR *extStr = pLs->getLexerUserExt();\r\n\t\t\telement->SetAttribute(TEXT(\"ext\"), extStr);\r\n\t\t\tfor (TiXmlNode *grChildNode = childNode->FirstChildElement(TEXT(\"WordsStyle\"));\r\n\t\t\t\t\tgrChildNode ;\r\n\t\t\t\t\tgrChildNode = grChildNode->NextSibling(TEXT(\"WordsStyle\")))\r\n\t\t\t{\r\n\t\t\t\tTiXmlElement *grElement = grChildNode->ToElement();\r\n\t\t\t\tconst TCHAR *styleName = grElement->Attribute(TEXT(\"name\"));\r\n\t\t\t\tconst Style * pStyle = pLs->findByName(styleName);\r\n\t\t\t\tStyle * pStyle2Sync = pLs2 ? pLs2->findByName(styleName) : nullptr;\r\n\t\t\t\tif (pStyle && pStyle2Sync)\r\n\t\t\t\t{\r\n\t\t\t\t\twriteStyle2Element(*pStyle, *pStyle2Sync, grElement);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (size_t x = 0; x < _pXmlExternalLexerDoc.size(); ++x)\r\n\t{\r\n\t\tTiXmlNode* lexersRoot2 = ( _pXmlExternalLexerDoc[x]->FirstChild(TEXT(\"NotepadPlus\")))->FirstChildElement(TEXT(\"LexerStyles\"));\r\n\t\tfor (TiXmlNode* childNode = lexersRoot2->FirstChildElement(TEXT(\"LexerType\"));\r\n\t\t\tchildNode ;\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"LexerType\")))\r\n\t\t{\r\n\t\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\t\tconst TCHAR *nm = element->Attribute(TEXT(\"name\"));\r\n\r\n\t\t\tLexerStyler *pLs = _lexerStylerVect.getLexerStylerByName(nm);\r\n\t\t\tLexerStyler *pLs2 = lexersStylers.getLexerStylerByName(nm);\r\n\r\n\t\t\tif (pLs)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR *extStr = pLs->getLexerUserExt();\r\n\t\t\t\telement->SetAttribute(TEXT(\"ext\"), extStr);\r\n\r\n\t\t\t\tfor (TiXmlNode *grChildNode = childNode->FirstChildElement(TEXT(\"WordsStyle\"));\r\n\t\t\t\t\t\tgrChildNode ;\r\n\t\t\t\t\t\tgrChildNode = grChildNode->NextSibling(TEXT(\"WordsStyle\")))\r\n\t\t\t\t{\r\n\t\t\t\t\tTiXmlElement *grElement = grChildNode->ToElement();\r\n\t\t\t\t\tconst TCHAR *styleName = grElement->Attribute(TEXT(\"name\"));\r\n\t\t\t\t\tconst Style * pStyle = pLs->findByName(styleName);\r\n\t\t\t\t\tStyle * pStyle2Sync = pLs2 ? pLs2->findByName(styleName) : nullptr;\r\n\t\t\t\t\tif (pStyle && pStyle2Sync)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twriteStyle2Element(*pStyle, *pStyle2Sync, grElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t_pXmlExternalLexerDoc[x]->SaveFile();\r\n\t}\r\n\r\n\tTiXmlNode *globalStylesRoot = (_pXmlUserStylerDoc->FirstChild(TEXT(\"NotepadPlus\")))->FirstChildElement(TEXT(\"GlobalStyles\"));\r\n\r\n\tfor (TiXmlNode *childNode = globalStylesRoot->FirstChildElement(TEXT(\"WidgetStyle\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"WidgetStyle\")))\r\n\t{\r\n\t\tTiXmlElement *pElement = childNode->ToElement();\r\n\t\tconst TCHAR *styleName = pElement->Attribute(TEXT(\"name\"));\r\n\t\tconst Style * pStyle = _widgetStyleArray.findByName(styleName);\r\n\t\tStyle * pStyle2Sync = globalStylers.findByName(styleName);\r\n\t\tif (pStyle && pStyle2Sync)\r\n\t\t{\r\n\t\t\twriteStyle2Element(*pStyle, *pStyle2Sync, pElement);\r\n\t\t}\r\n\t}\r\n\r\n\tbool isSaved = _pXmlUserStylerDoc->SaveFile();\r\n\tif (!isSaved)\r\n\t{\r\n\t\tauto savePath = _themeSwitcher.getSavePathFrom(_pXmlUserStylerDoc->Value());\r\n\t\tif (!savePath.empty())\r\n\t\t{\r\n\t\t\t_pXmlUserStylerDoc->SaveFile(savePath.c_str());\r\n\t\t\treturn savePath;\r\n\t\t}\r\n\t}\r\n\treturn TEXT(\"\");\r\n}\r\n\r\n\r\nbool NppParameters::insertTabInfo(const TCHAR *langName, int tabInfo)\r\n{\r\n\tif (!_pXmlDoc) return false;\r\n\tTiXmlNode *langRoot = (_pXmlDoc->FirstChild(TEXT(\"NotepadPlus\")))->FirstChildElement(TEXT(\"Languages\"));\r\n\tfor (TiXmlNode *childNode = langRoot->FirstChildElement(TEXT(\"Language\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Language\")))\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *nm = element->Attribute(TEXT(\"name\"));\r\n\t\tif (nm && lstrcmp(langName, nm) == 0)\r\n\t\t{\r\n\t\t\tchildNode->ToElement()->SetAttribute(TEXT(\"tabSettings\"), tabInfo);\r\n\t\t\t_pXmlDoc->SaveFile();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nvoid NppParameters::writeStyle2Element(const Style & style2Write, Style & style2Sync, TiXmlElement *element)\r\n{\r\n\tif (HIBYTE(HIWORD(style2Write._fgColor)) != 0xFF)\r\n\t{\r\n\t\tint rgbVal = RGB2int(style2Write._fgColor);\r\n\t\tTCHAR fgStr[7];\r\n\t\twsprintf(fgStr, TEXT(\"%.6X\"), rgbVal);\r\n\t\telement->SetAttribute(TEXT(\"fgColor\"), fgStr);\r\n\t}\r\n\r\n\tif (HIBYTE(HIWORD(style2Write._bgColor)) != 0xFF)\r\n\t{\r\n\t\tint rgbVal = RGB2int(style2Write._bgColor);\r\n\t\tTCHAR bgStr[7];\r\n\t\twsprintf(bgStr, TEXT(\"%.6X\"), rgbVal);\r\n\t\telement->SetAttribute(TEXT(\"bgColor\"), bgStr);\r\n\t}\r\n\r\n\tif (style2Write._colorStyle != COLORSTYLE_ALL)\r\n\t{\r\n\t\telement->SetAttribute(TEXT(\"colorStyle\"), style2Write._colorStyle);\r\n\t}\r\n\r\n\tif (!style2Write._fontName.empty())\r\n\t{\r\n\t\tconst TCHAR * oldFontName = element->Attribute(TEXT(\"fontName\"));\r\n\t\tif (oldFontName && oldFontName != style2Write._fontName)\r\n\t\t{\r\n\t\t\telement->SetAttribute(TEXT(\"fontName\"), style2Write._fontName);\r\n\t\t\tstyle2Sync._fontName = style2Write._fontName;\r\n\t\t}\r\n\t}\r\n\r\n\tif (style2Write._fontSize != STYLE_NOT_USED)\r\n\t{\r\n\t\tif (!style2Write._fontSize)\r\n\t\t\telement->SetAttribute(TEXT(\"fontSize\"), TEXT(\"\"));\r\n\t\telse\r\n\t\t\telement->SetAttribute(TEXT(\"fontSize\"), style2Write._fontSize);\r\n\t}\r\n\r\n\tif (style2Write._fontStyle != STYLE_NOT_USED)\r\n\t{\r\n\t\telement->SetAttribute(TEXT(\"fontStyle\"), style2Write._fontStyle);\r\n\t}\r\n\r\n\r\n\tif (!style2Write._keywords.empty())\r\n\t{\r\n\t\tTiXmlNode *teteDeNoeud = element->LastChild();\r\n\r\n\t\tif (teteDeNoeud)\r\n\t\t\tteteDeNoeud->SetValue(style2Write._keywords.c_str());\r\n\t\telse\r\n\t\t\telement->InsertEndChild(TiXmlText(style2Write._keywords.c_str()));\r\n\t}\r\n}\r\n\r\nvoid NppParameters::insertUserLang2Tree(TiXmlNode *node, UserLangContainer *userLang)\r\n{\r\n\tTiXmlElement *rootElement = (node->InsertEndChild(TiXmlElement(TEXT(\"UserLang\"))))->ToElement();\r\n\r\n\tTCHAR temp[32];\r\n\tgeneric_string udlVersion;\r\n\tudlVersion += generic_itoa(SCE_UDL_VERSION_MAJOR, temp, 10);\r\n\tudlVersion += TEXT(\".\");\r\n\tudlVersion += generic_itoa(SCE_UDL_VERSION_MINOR, temp, 10);\r\n\r\n\trootElement->SetAttribute(TEXT(\"name\"), userLang->_name);\r\n\trootElement->SetAttribute(TEXT(\"ext\"), userLang->_ext);\r\n\tif (userLang->_isDarkModeTheme)\r\n\t\trootElement->SetAttribute(TEXT(\"darkModeTheme\"), TEXT(\"yes\"));\r\n\trootElement->SetAttribute(TEXT(\"udlVersion\"), udlVersion.c_str());\r\n\r\n\tTiXmlElement *settingsElement = (rootElement->InsertEndChild(TiXmlElement(TEXT(\"Settings\"))))->ToElement();\r\n\t{\r\n\t\tTiXmlElement *globalElement = (settingsElement->InsertEndChild(TiXmlElement(TEXT(\"Global\"))))->ToElement();\r\n\t\tglobalElement->SetAttribute(TEXT(\"caseIgnored\"),\t\t\tuserLang->_isCaseIgnored ? TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\tglobalElement->SetAttribute(TEXT(\"allowFoldOfComments\"),\tuserLang->_allowFoldOfComments ? TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\tglobalElement->SetAttribute(TEXT(\"foldCompact\"),\t\t\tuserLang->_foldCompact ? TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\tglobalElement->SetAttribute(TEXT(\"forcePureLC\"),\t\t\tuserLang->_forcePureLC);\r\n\t\tglobalElement->SetAttribute(TEXT(\"decimalSeparator\"),\t   userLang->_decimalSeparator);\r\n\r\n\t\tTiXmlElement *prefixElement = (settingsElement->InsertEndChild(TiXmlElement(TEXT(\"Prefix\"))))->ToElement();\r\n\t\tfor (int i = 0 ; i < SCE_USER_TOTAL_KEYWORD_GROUPS ; ++i)\r\n\t\t\tprefixElement->SetAttribute(globalMappper().keywordNameMapper[i+SCE_USER_KWLIST_KEYWORDS1], userLang->_isPrefix[i]?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t}\r\n\r\n\tTiXmlElement *kwlElement = (rootElement->InsertEndChild(TiXmlElement(TEXT(\"KeywordLists\"))))->ToElement();\r\n\r\n\tfor (int i = 0 ; i < SCE_USER_KWLIST_TOTAL ; ++i)\r\n\t{\r\n\t\tTiXmlElement *kwElement = (kwlElement->InsertEndChild(TiXmlElement(TEXT(\"Keywords\"))))->ToElement();\r\n\t\tkwElement->SetAttribute(TEXT(\"name\"), globalMappper().keywordNameMapper[i]);\r\n\t\tkwElement->InsertEndChild(TiXmlText(userLang->_keywordLists[i]));\r\n\t}\r\n\r\n\tTiXmlElement *styleRootElement = (rootElement->InsertEndChild(TiXmlElement(TEXT(\"Styles\"))))->ToElement();\r\n\r\n\tfor (const Style & style2Write : userLang->_styles)\r\n\t{\r\n\t\tTiXmlElement *styleElement = (styleRootElement->InsertEndChild(TiXmlElement(TEXT(\"WordsStyle\"))))->ToElement();\r\n\r\n\t\tif (style2Write._styleID == -1)\r\n\t\t\tcontinue;\r\n\r\n\t\tstyleElement->SetAttribute(TEXT(\"name\"), style2Write._styleDesc);\r\n\r\n\t\t//if (HIBYTE(HIWORD(style2Write._fgColor)) != 0xFF)\r\n\t\t{\r\n\t\t\tint rgbVal = RGB2int(style2Write._fgColor);\r\n\t\t\tTCHAR fgStr[7];\r\n\t\t\twsprintf(fgStr, TEXT(\"%.6X\"), rgbVal);\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"fgColor\"), fgStr);\r\n\t\t}\r\n\r\n\t\t//if (HIBYTE(HIWORD(style2Write._bgColor)) != 0xFF)\r\n\t\t{\r\n\t\t\tint rgbVal = RGB2int(style2Write._bgColor);\r\n\t\t\tTCHAR bgStr[7];\r\n\t\t\twsprintf(bgStr, TEXT(\"%.6X\"), rgbVal);\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"bgColor\"), bgStr);\r\n\t\t}\r\n\r\n\t\tif (style2Write._colorStyle != COLORSTYLE_ALL)\r\n\t\t{\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"colorStyle\"), style2Write._colorStyle);\r\n\t\t}\r\n\r\n\t\tif (!style2Write._fontName.empty())\r\n\t\t{\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"fontName\"), style2Write._fontName);\r\n\t\t}\r\n\r\n\t\tif (style2Write._fontStyle == STYLE_NOT_USED)\r\n\t\t{\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"fontStyle\"), TEXT(\"0\"));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"fontStyle\"), style2Write._fontStyle);\r\n\t\t}\r\n\r\n\t\tif (style2Write._fontSize != STYLE_NOT_USED)\r\n\t\t{\r\n\t\t\tif (!style2Write._fontSize)\r\n\t\t\t\tstyleElement->SetAttribute(TEXT(\"fontSize\"), TEXT(\"\"));\r\n\t\t\telse\r\n\t\t\t\tstyleElement->SetAttribute(TEXT(\"fontSize\"), style2Write._fontSize);\r\n\t\t}\r\n\r\n\t\tstyleElement->SetAttribute(TEXT(\"nesting\"), style2Write._nesting);\r\n\t}\r\n}\r\n\r\nvoid NppParameters::addUserModifiedIndex(size_t index)\r\n{\r\n\tsize_t len = _customizedShortcuts.size();\r\n\tbool found = false;\r\n\tfor (size_t i = 0; i < len; ++i)\r\n\t{\r\n\t\tif (_customizedShortcuts[i] == index)\r\n\t\t{\r\n\t\t\tfound = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (!found)\r\n\t{\r\n\t\t_customizedShortcuts.push_back(index);\r\n\t}\r\n}\r\n\r\nvoid NppParameters::addPluginModifiedIndex(size_t index)\r\n{\r\n\tsize_t len = _pluginCustomizedCmds.size();\r\n\tbool found = false;\r\n\tfor (size_t i = 0; i < len; ++i)\r\n\t{\r\n\t\tif (_pluginCustomizedCmds[i] == index)\r\n\t\t{\r\n\t\t\tfound = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (!found)\r\n\t{\r\n\t\t_pluginCustomizedCmds.push_back(index);\r\n\t}\r\n}\r\n\r\nvoid NppParameters::addScintillaModifiedIndex(int index)\r\n{\r\n\tsize_t len = _scintillaModifiedKeyIndices.size();\r\n\tbool found = false;\r\n\tfor (size_t i = 0; i < len; ++i)\r\n\t{\r\n\t\tif (_scintillaModifiedKeyIndices[i] == index)\r\n\t\t{\r\n\t\t\tfound = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (!found)\r\n\t{\r\n\t\t_scintillaModifiedKeyIndices.push_back(index);\r\n\t}\r\n}\r\n\r\nvoid NppParameters::safeWow64EnableWow64FsRedirection(BOOL Wow64FsEnableRedirection)\r\n{\r\n\tHMODULE kernel = GetModuleHandle(TEXT(\"kernel32\"));\r\n\tif (kernel)\r\n\t{\r\n\t\tBOOL isWow64 = FALSE;\r\n\t\ttypedef BOOL (WINAPI *LPFN_ISWOW64PROCESS) (HANDLE, PBOOL);\r\n\t\tLPFN_ISWOW64PROCESS IsWow64ProcessFunc = (LPFN_ISWOW64PROCESS) GetProcAddress(kernel,\"IsWow64Process\");\r\n\r\n\t\tif (IsWow64ProcessFunc)\r\n\t\t{\r\n\t\t\tIsWow64ProcessFunc(GetCurrentProcess(),&isWow64);\r\n\r\n\t\t\tif (isWow64)\r\n\t\t\t{\r\n\t\t\t\ttypedef BOOL (WINAPI *LPFN_WOW64ENABLEWOW64FSREDIRECTION)(BOOL);\r\n\t\t\t\tLPFN_WOW64ENABLEWOW64FSREDIRECTION Wow64EnableWow64FsRedirectionFunc = (LPFN_WOW64ENABLEWOW64FSREDIRECTION)GetProcAddress(kernel, \"Wow64EnableWow64FsRedirection\");\r\n\t\t\t\tif (Wow64EnableWow64FsRedirectionFunc)\r\n\t\t\t\t{\r\n\t\t\t\t\tWow64EnableWow64FsRedirectionFunc(Wow64FsEnableRedirection);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::setUdlXmlDirtyFromIndex(size_t i)\r\n{\r\n\tfor (auto& uxfs : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tif (i >= uxfs._indexRange.first && i < uxfs._indexRange.second)\r\n\t\t{\r\n\t\t\tuxfs._isDirty = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\nConsidering we have done:\r\nload default UDL:  3 languges\r\nload a UDL file:   1 languge\r\nload a UDL file:   2 languges\r\ncreate a UDL:      1 languge\r\nimported a UDL:    1 languge\r\n\r\nthe evolution to remove UDL one by one:\r\n\r\n0[D1]                        0[D1]                        0[D1]                         [D1]                         [D1]\r\n1[D2]                        1[D2]                        1[D2]                        0[D2]                         [D2]\r\n2[D3]  [DUDL, <0,3>]         2[D3]  [DUDL, <0,3>]         2[D3]  [DUDL, <0,3>]         1[D3]  [DUDL, <0,2>]          [D3]  [DUDL, <0,0>]\r\n3[U1]  [NUDL, <3,4>]         3[U1]  [NUDL, <3,4>]         3[U1]  [NUDL, <3,4>]         2[U1]  [NUDL, <2,3>]          [U1]  [NUDL, <0,0>]\r\n4[U2]                        4[U2]                         [U2]                         [U2]                         [U2]\r\n5[U2]  [NUDL, <4,6>]         5[U2]  [NUDL, <4,6>]         4[U2]  [NUDL, <4,5>]         3[U2]  [NUDL, <3,4>]         0[U2]  [NUDL, <0,1>]\r\n6[C1]  [NULL, <6,7>]          [C1]  [NULL, <6,6>]          [C1]  [NULL, <5,5>]          [C1]  [NULL, <4,4>]          [C1]  [NULL, <1,1>]\r\n7[I1]  [NULL, <7,8>]         6[I1]  [NULL, <6,7>]         5[I1]  [NULL, <5,6>]         4[I1]  [NULL, <4,5>]         1[I1]  [NULL, <1,2>]\r\n*/\r\nvoid NppParameters::removeIndexFromXmlUdls(size_t i)\r\n{\r\n\tbool isUpdateBegin = false;\r\n\tfor (auto& uxfs : _pXmlUserLangsDoc)\r\n\t{\r\n\t\t// Find index\r\n\t\tif (!isUpdateBegin && (i >= uxfs._indexRange.first && i < uxfs._indexRange.second)) // found it\r\n\t\t{\r\n\t\t\tif (uxfs._indexRange.second > 0)\r\n\t\t\t\tuxfs._indexRange.second -= 1;\r\n\t\t\tuxfs._isDirty = true;\r\n\r\n\t\t\tisUpdateBegin = true;\r\n\t\t}\r\n\r\n\t\t// Update\r\n\t\telse if (isUpdateBegin)\r\n\t\t{\r\n\t\t\tif (uxfs._indexRange.first > 0)\r\n\t\t\t\tuxfs._indexRange.first -= 1;\r\n\t\t\tif (uxfs._indexRange.second > 0)\r\n\t\t\t\tuxfs._indexRange.second -= 1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::setUdlXmlDirtyFromXmlDoc(const TiXmlDocument* xmlDoc)\r\n{\r\n\tfor (auto& uxfs : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tif (xmlDoc == uxfs._udlXmlDoc)\r\n\t\t{\r\n\t\t\tuxfs._isDirty = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nDate::Date(const TCHAR *dateStr)\r\n{\r\n\t// timeStr should be Notepad++ date format : YYYYMMDD\r\n\tassert(dateStr);\r\n\tint D = lstrlen(dateStr);\r\n\r\n\tif ( 8==D )\r\n\t{\r\n\t\tgeneric_string ds(dateStr);\r\n\t\tgeneric_string yyyy(ds, 0, 4);\r\n\t\tgeneric_string mm(ds, 4, 2);\r\n\t\tgeneric_string dd(ds, 6, 2);\r\n\r\n\t\tint y = generic_atoi(yyyy.c_str());\r\n\t\tint m = generic_atoi(mm.c_str());\r\n\t\tint d = generic_atoi(dd.c_str());\r\n\r\n\t\tif ((y > 0 && y <= 9999) && (m > 0 && m <= 12) && (d > 0 && d <= 31))\r\n\t\t{\r\n\t\t\t_year = y;\r\n\t\t\t_month = m;\r\n\t\t\t_day = d;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tnow();\r\n}\r\n\r\n// The constructor which makes the date of number of days from now\r\n// nbDaysFromNow could be negative if user want to make a date in the past\r\n// if the value of nbDaysFromNow is 0 then the date will be now\r\nDate::Date(int nbDaysFromNow)\r\n{\r\n\tconst time_t oneDay = (60 * 60 * 24);\r\n\r\n\ttime_t rawtime;\r\n\ttm* timeinfo;\r\n\r\n\ttime(&rawtime);\r\n\trawtime += (nbDaysFromNow * oneDay);\r\n\r\n\ttimeinfo = localtime(&rawtime);\r\n\tif (timeinfo)\r\n\t{\r\n\t\t_year = timeinfo->tm_year + 1900;\r\n\t\t_month = timeinfo->tm_mon + 1;\r\n\t\t_day = timeinfo->tm_mday;\r\n\t}\r\n}\r\n\r\nvoid Date::now()\r\n{\r\n\ttime_t rawtime;\r\n\ttm* timeinfo;\r\n\r\n\ttime(&rawtime);\r\n\ttimeinfo = localtime(&rawtime);\r\n\tif (timeinfo)\r\n\t{\r\n\t\t_year = timeinfo->tm_year + 1900;\r\n\t\t_month = timeinfo->tm_mon + 1;\r\n\t\t_day = timeinfo->tm_mday;\r\n\t}\r\n}\r\n\r\n\r\nEolType convertIntToFormatType(int value, EolType defvalue)\r\n{\r\n\tswitch (value)\r\n\t{\r\n\t\tcase static_cast<LPARAM>(EolType::windows) :\r\n\t\t\treturn EolType::windows;\r\n\t\tcase static_cast<LPARAM>(EolType::macos) :\r\n\t\t\t\treturn EolType::macos;\r\n\t\tcase static_cast<LPARAM>(EolType::unix) :\r\n\t\t\treturn EolType::unix;\r\n\t\tdefault:\r\n\t\t\treturn defvalue;\r\n\t}\r\n}\r\n"], "fixing_code": ["//Adapted from http://www.codeproject.com/KB/debug/postmortemdebug_standalone1.aspx#_Reading_a_Minidump_with%20Visual%20Stud\r\n//Modified for use by Npp\r\n\r\n// This file is part of Notepad++ project\r\n// Copyright (C)2021 Don HO <don.h@free.fr>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// at your option any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n\r\n#include <shlwapi.h>\r\n#include \"MiniDumper.h\"\r\n\r\nLPCTSTR msgTitle = TEXT(\"Notepad++ crash analysis\");\r\n\r\nMiniDumper::MiniDumper()\r\n{\r\n}\r\n\r\nbool MiniDumper::writeDump(EXCEPTION_POINTERS * pExceptionInfo)\r\n{\r\n\tTCHAR szDumpPath[MAX_PATH];\r\n\tTCHAR szScratch[MAX_PATH];\r\n\tLPCTSTR szResult = NULL;\r\n\tbool retval = false;\r\n\r\n\tHMODULE hDll = ::LoadLibraryEx(TEXT(\"DBGHELP.DLL\"), nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);\t//that wont work on older windows version than XP, #care :)\r\n\r\n\tif (hDll)\r\n\t{\r\n\t\tMINIDUMPWRITEDUMP pDump = (MINIDUMPWRITEDUMP)::GetProcAddress( hDll, \"MiniDumpWriteDump\" );\r\n\t\tif (pDump)\r\n\t\t{\r\n\t\t\t::GetModuleFileName(NULL, szDumpPath, MAX_PATH);\r\n\t\t\t::PathRemoveFileSpec(szDumpPath);\r\n\t\t\twcscat_s(szDumpPath, TEXT(\"\\\\NppDump.dmp\"));\r\n\r\n\t\t\t// ask the user if they want to save a dump file\r\n\t\t\tint msgret = ::MessageBox(NULL, TEXT(\"Do you want to save a dump file?\\r\\nDoing so can aid in developing Notepad++.\"), msgTitle, MB_YESNO);\r\n\t\t\tif (msgret == IDYES)\r\n\t\t\t{\r\n\t\t\t\t// create the file\r\n\t\t\t\tHANDLE hFile = ::CreateFile( szDumpPath, GENERIC_WRITE, FILE_SHARE_WRITE, NULL, CREATE_ALWAYS,\r\n\t\t\t\t\t\t\t\t\t\t\tFILE_ATTRIBUTE_NORMAL, NULL );\r\n\r\n\t\t\t\tif (hFile!=INVALID_HANDLE_VALUE)\r\n\t\t\t\t{\r\n\t\t\t\t\t_MINIDUMP_EXCEPTION_INFORMATION ExInfo;\r\n\r\n\t\t\t\t\tExInfo.ThreadId = ::GetCurrentThreadId();\r\n\t\t\t\t\tExInfo.ExceptionPointers = pExceptionInfo;\r\n\t\t\t\t\tExInfo.ClientPointers = NULL;\r\n\r\n\t\t\t\t\t// write the dump\r\n\t\t\t\t\tBOOL bOK = pDump( GetCurrentProcess(), GetCurrentProcessId(), hFile, MiniDumpNormal, &ExInfo, NULL, NULL );\r\n\t\t\t\t\tif (bOK)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twsprintf( szScratch, TEXT(\"Saved dump file to '%s'\"), szDumpPath );\r\n\t\t\t\t\t\tszResult = szScratch;\r\n\t\t\t\t\t\tretval = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twsprintf( szScratch, TEXT(\"Failed to save dump file to '%s' (error %d)\"), szDumpPath, GetLastError() );\r\n\t\t\t\t\t\tszResult = szScratch;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t::CloseHandle(hFile);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\twsprintf( szScratch, TEXT(\"Failed to create dump file '%s' (error %d)\"), szDumpPath, GetLastError() );\r\n\t\t\t\t\tszResult = szScratch;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tszResult = TEXT(\"The debugging DLL is outdated,\\r\\nfind a recent copy of dbghelp.dll and install it.\");\r\n\t\t}\r\n\t\t::FreeLibrary(hDll);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tszResult = TEXT(\"Unable to load the debugging DLL,\\r\\nfind a recent copy of dbghelp.dll and install it.\");\r\n\t}\r\n\r\n\tif (szResult)\r\n\t\t::MessageBox(NULL, szResult, msgTitle, MB_OK);\r\n\r\n\treturn retval;\r\n}\r\n", "// This file is part of Notepad++ project\r\n// Copyright (C)2021 Don HO <don.h@free.fr>\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// at your option any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n\r\n#include <time.h>\r\n#include <shlwapi.h>\r\n#include <shlobj.h>\r\n#include \"Parameters.h\"\r\n#include \"ScintillaEditView.h\"\r\n#include \"keys.h\"\r\n#include \"localization.h\"\r\n#include \"localizationString.h\"\r\n#include \"UserDefineDialog.h\"\r\n#include \"WindowsDlgRc.h\"\r\n\r\n#pragma warning(disable : 4996) // for GetVersionEx()\r\n\r\nusing namespace std;\r\n\r\nnamespace // anonymous namespace\r\n{\r\n\r\n\r\nstruct WinMenuKeyDefinition //more or less matches accelerator table definition, easy copy/paste\r\n{\r\n\t//const TCHAR * name;\t//name retrieved from menu?\r\n\tint vKey;\r\n\tint functionId;\r\n\tbool isCtrl;\r\n\tbool isAlt;\r\n\tbool isShift;\r\n\tconst TCHAR * specialName;\t\t//Used when no real menu name exists (in case of toggle for example)\r\n};\r\n\r\n\r\nstruct ScintillaKeyDefinition\r\n{\r\n\tconst TCHAR * name;\r\n\tint functionId;\r\n\tbool isCtrl;\r\n\tbool isAlt;\r\n\tbool isShift;\r\n\tint vKey;\r\n\tint redirFunctionId;\t//this gets set  when a function is being redirected through Notepad++ if Scintilla doesnt do it properly :)\r\n};\r\n\r\n\r\n/*!\r\n** \\brief array of accelerator keys for all std menu items\r\n**\r\n** values can be 0 for vKey, which means its unused\r\n*/\r\nstatic const WinMenuKeyDefinition winKeyDefs[] =\r\n{\r\n\t// V_KEY,    COMMAND_ID,                                    Ctrl,  Alt,   Shift, cmdName\r\n\t// -------------------------------------------------------------------------------------\r\n\t//\r\n\t{ VK_N,       IDM_FILE_NEW,                                 true,  false, false, nullptr },\r\n\t{ VK_O,       IDM_FILE_OPEN,                                true,  false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_OPEN_FOLDER,                         false, false, false, TEXT(\"Open containing folder in Explorer\") },\r\n\t{ VK_NULL,    IDM_FILE_OPEN_CMD,                            false, false, false, TEXT(\"Open containing folder in Command Prompt\") },\r\n\t{ VK_NULL,    IDM_FILE_OPEN_DEFAULT_VIEWER,                 false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_OPENFOLDERASWORSPACE,                false, false, false, nullptr },\r\n\t{ VK_R,       IDM_FILE_RELOAD,                              true,  false, false, nullptr },\r\n\t{ VK_S,       IDM_FILE_SAVE,                                true,  false, false, nullptr },\r\n\t{ VK_S,       IDM_FILE_SAVEAS,                              true,  true,  false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_SAVECOPYAS,                          false, false, false, nullptr },\r\n\t{ VK_S,       IDM_FILE_SAVEALL,                             true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_FILE_RENAME,                              false, false, false, nullptr },\r\n\t{ VK_W,       IDM_FILE_CLOSE,                               true,  false, false, nullptr },\r\n\t{ VK_W,       IDM_FILE_CLOSEALL,                            true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_FILE_CLOSEALL_BUT_CURRENT,                false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_CLOSEALL_TOLEFT,                     false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_CLOSEALL_TORIGHT,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_CLOSEALL_UNCHANGED,                  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_DELETE,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_LOADSESSION,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_SAVESESSION,                         false, false, false, nullptr },\r\n\t{ VK_P,       IDM_FILE_PRINT,                               true,  false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FILE_PRINTNOW,                            false, false, false, nullptr },\r\n\t{ VK_F4,      IDM_FILE_EXIT,                                false, true,  false, nullptr },\r\n\t{ VK_T,       IDM_FILE_RESTORELASTCLOSEDFILE,               true,  false, true,  TEXT(\"Restore Recent Closed File\")},\r\n\r\n//\t{ VK_NULL,    IDM_EDIT_UNDO,                                false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_REDO,                                false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_CUT,                                 false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_COPY,                                false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_PASTE,                               false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_DELETE,                              false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_EDIT_SELECTALL,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_BEGINENDSELECT,                      false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_EDIT_FULLPATHTOCLIP,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_FILENAMETOCLIP,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CURRENTDIRTOCLIP,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_COPY_ALL_NAMES,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_COPY_ALL_PATHS,                      false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_EDIT_INS_TAB,                             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_RMV_TAB,                             false, false, false, nullptr },\r\n\t{ VK_U,       IDM_EDIT_UPPERCASE,                           true,  false, true,  nullptr },\r\n\t{ VK_U,       IDM_EDIT_LOWERCASE,                           true,  false, false, nullptr },\r\n\t{ VK_U,       IDM_EDIT_PROPERCASE_FORCE,                    false, true,  false, nullptr },\r\n\t{ VK_U,       IDM_EDIT_PROPERCASE_BLEND,                    false, true,  true,  nullptr },\r\n\t{ VK_U,       IDM_EDIT_SENTENCECASE_FORCE,                  true,  true,  false, nullptr },\r\n\t{ VK_U,       IDM_EDIT_SENTENCECASE_BLEND,                  true,  true,  true,  nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_INVERTCASE,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_RANDOMCASE,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_REMOVE_CONSECUTIVE_DUP_LINES,        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_REMOVE_ANY_DUP_LINES,                false, false, false, nullptr },\r\n\t{ VK_I,       IDM_EDIT_SPLIT_LINES,                         true,  false, false, nullptr },\r\n\t{ VK_J,       IDM_EDIT_JOIN_LINES,                          true,  false, false, nullptr },\r\n\t{ VK_UP,      IDM_EDIT_LINE_UP,                             true,  false, true,  nullptr },\r\n\t{ VK_DOWN,    IDM_EDIT_LINE_DOWN,                           true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_REMOVEEMPTYLINES,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_REMOVEEMPTYLINESWITHBLANK,           false, false, false, nullptr },\r\n\t{ VK_RETURN,  IDM_EDIT_BLANKLINEABOVECURRENT,               true,  true,  false, nullptr },\r\n\t{ VK_RETURN,  IDM_EDIT_BLANKLINEBELOWCURRENT,               true,  true,  true,  nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_LEXICOGRAPHIC_ASCENDING,   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_LEXICOGRAPHIC_DESCENDING,  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_LEXICO_CASE_INSENS_ASCENDING,   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_LEXICO_CASE_INSENS_DESCENDING,  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_INTEGER_ASCENDING,         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_INTEGER_DESCENDING,        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_DECIMALCOMMA_ASCENDING,    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_DECIMALCOMMA_DESCENDING,   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_DECIMALDOT_ASCENDING,      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_DECIMALDOT_DESCENDING,     false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_REVERSE_ORDER,             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SORTLINES_RANDOMLY,                  false, false, false, nullptr },\r\n\t{ VK_Q,       IDM_EDIT_BLOCK_COMMENT,                       true,  false, false, nullptr },\r\n\t{ VK_K,       IDM_EDIT_BLOCK_COMMENT_SET,                   true,  false, false, nullptr },\r\n\t{ VK_K,       IDM_EDIT_BLOCK_UNCOMMENT,                     true,  false, true,  nullptr },\r\n\t{ VK_Q,       IDM_EDIT_STREAM_COMMENT,                      true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_STREAM_UNCOMMENT,                    false, false, false, nullptr },\r\n\t{ VK_SPACE,   IDM_EDIT_AUTOCOMPLETE,                        true,  false, false, nullptr },\r\n\t{ VK_SPACE,   IDM_EDIT_AUTOCOMPLETE_PATH,                   true,  true,  false, nullptr },\r\n\t{ VK_RETURN,  IDM_EDIT_AUTOCOMPLETE_CURRENTFILE,            true,  false, false, nullptr },\r\n\t{ VK_SPACE,   IDM_EDIT_FUNCCALLTIP,                         true,  false, true,  nullptr },\r\n\t{ VK_UP,      IDM_EDIT_FUNCCALLTIP_PREVIOUS,                false, true,  false, nullptr },\r\n\t{ VK_DOWN,    IDM_EDIT_FUNCCALLTIP_NEXT,                    false, true,  false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_INSERT_DATETIME_SHORT,               false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_INSERT_DATETIME_LONG,                false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_INSERT_DATETIME_CUSTOMIZED,          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_TODOS,                             false, false, false, TEXT(\"EOL Conversion to Windows (CR LF)\") },\r\n\t{ VK_NULL,    IDM_FORMAT_TOUNIX,                            false, false, false, TEXT(\"EOL Conversion to Unix (LF)\") },\r\n\t{ VK_NULL,    IDM_FORMAT_TOMAC,                             false, false, false, TEXT(\"EOL Conversion to Macintosh (CR)\") },\r\n\t{ VK_NULL,    IDM_EDIT_TRIMTRAILING,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_TRIMLINEHEAD,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_TRIM_BOTH,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_EOL2WS,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_TRIMALL,                             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_TAB2SW,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SW2TAB_ALL,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SW2TAB_LEADING,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_PASTE_AS_HTML,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_PASTE_AS_RTF,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_COPY_BINARY,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CUT_BINARY,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_PASTE_BINARY,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_OPENASFILE,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_OPENINFOLDER,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_SEARCHONINTERNET,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CHANGESEARCHENGINE,                  false, false, false, nullptr },\r\n//  { VK_NULL,    IDM_EDIT_COLUMNMODETIP,                       false, false, false, nullptr },\r\n\t{ VK_C,       IDM_EDIT_COLUMNMODE,                          false, true,  false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CHAR_PANEL,                          false, false, false, TEXT(\"Toggle Character Panel\") },\r\n\t{ VK_NULL,    IDM_EDIT_CLIPBOARDHISTORY_PANEL,              false, false, false, TEXT(\"Toggle Clipboard History\") },\r\n\t{ VK_NULL,    IDM_EDIT_SETREADONLY,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_EDIT_CLEARREADONLY,                       false, false, false, nullptr },\r\n\t{ VK_F,       IDM_SEARCH_FIND,                              true,  false, false, nullptr },\r\n\t{ VK_F,       IDM_SEARCH_FINDINFILES,                       true,  false, true,  nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_FINDNEXT,                          false, false, false, nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_FINDPREV,                          false, false, true,  nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_SETANDFINDNEXT,                    true,  false, false, nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_SETANDFINDPREV,                    true,  false, true,  nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_VOLATILE_FINDNEXT,                 true,  true,  false, nullptr },\r\n\t{ VK_F3,      IDM_SEARCH_VOLATILE_FINDPREV,                 true,  true,  true,  nullptr },\r\n\t{ VK_H,       IDM_SEARCH_REPLACE,                           true,  false, false, nullptr },\r\n\t{ VK_I,       IDM_SEARCH_FINDINCREMENT,                     true,  true,  false, nullptr },\r\n\t{ VK_F7,      IDM_FOCUS_ON_FOUND_RESULTS,                   false, false, false, nullptr },\r\n\t{ VK_F4,      IDM_SEARCH_GOTOPREVFOUND,                     false, false, true,  nullptr },\r\n\t{ VK_F4,      IDM_SEARCH_GOTONEXTFOUND,                     false, false, false, nullptr },\r\n\t{ VK_G,       IDM_SEARCH_GOTOLINE,                          true,  false, false, nullptr },\r\n\t{ VK_B,       IDM_SEARCH_GOTOMATCHINGBRACE,                 true,  false, false, nullptr },\r\n\t{ VK_B,       IDM_SEARCH_SELECTMATCHINGBRACES,              true,  true,  false, nullptr },\r\n\t{ VK_M,       IDM_SEARCH_MARK,                              true,  false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT1,                       false, false, false, TEXT(\"Style all using 1st style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT2,                       false, false, false, TEXT(\"Style all using 2nd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT3,                       false, false, false, TEXT(\"Style all using 3rd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT4,                       false, false, false, TEXT(\"Style all using 4th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKALLEXT5,                       false, false, false, TEXT(\"Style all using 5th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT1,                       false, false, false, TEXT(\"Style one using 1st style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT2,                       false, false, false, TEXT(\"Style one using 2nd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT3,                       false, false, false, TEXT(\"Style one using 3rd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT4,                       false, false, false, TEXT(\"Style one using 4th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKONEEXT5,                       false, false, false, TEXT(\"Style one using 5th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT1,                     false, false, false, TEXT(\"Clear 1st style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT2,                     false, false, false, TEXT(\"Clear 2nd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT3,                     false, false, false, TEXT(\"Clear 3rd style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT4,                     false, false, false, TEXT(\"Clear 4th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_UNMARKALLEXT5,                     false, false, false, TEXT(\"Clear 5th style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_CLEARALLMARKS,                     false, false, false, TEXT(\"Clear all styles\") },\r\n\t{ VK_1,       IDM_SEARCH_GOPREVMARKER1,                     true,  false, true,  TEXT(\"Previous style of 1st style\") },\r\n\t{ VK_2,       IDM_SEARCH_GOPREVMARKER2,                     true,  false, true,  TEXT(\"Previous style of 2nd style\") },\r\n\t{ VK_3,       IDM_SEARCH_GOPREVMARKER3,                     true,  false, true,  TEXT(\"Previous style of 3rd style\") },\r\n\t{ VK_4,       IDM_SEARCH_GOPREVMARKER4,                     true,  false, true,  TEXT(\"Previous style of 4th style\") },\r\n\t{ VK_5,       IDM_SEARCH_GOPREVMARKER5,                     true,  false, true,  TEXT(\"Previous style of 5th style\") },\r\n\t{ VK_0,       IDM_SEARCH_GOPREVMARKER_DEF,                  true,  false, true,  TEXT(\"Previous style of Find Mark style\") },\r\n\t{ VK_1,       IDM_SEARCH_GONEXTMARKER1,                     true,  false, false, TEXT(\"Next style of 1st style\") },\r\n\t{ VK_2,       IDM_SEARCH_GONEXTMARKER2,                     true,  false, false, TEXT(\"Next style of 2nd style\") },\r\n\t{ VK_3,       IDM_SEARCH_GONEXTMARKER3,                     true,  false, false, TEXT(\"Next style of 3rd style\") },\r\n\t{ VK_4,       IDM_SEARCH_GONEXTMARKER4,                     true,  false, false, TEXT(\"Next style of 4th style\") },\r\n\t{ VK_5,       IDM_SEARCH_GONEXTMARKER5,                     true,  false, false, TEXT(\"Next style of 5th style\") },\r\n\t{ VK_0,       IDM_SEARCH_GONEXTMARKER_DEF,                  true,  false, false, TEXT(\"Next style of Find Mark style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE1TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 1st Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE2TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 2nd Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE3TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 3rd Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE4TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 4th Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_STYLE5TOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of 5th Style\") },\r\n\t{ VK_NULL,    IDM_SEARCH_ALLSTYLESTOCLIP,                   false, false, false, TEXT(\"Copy Styled Text of All Styles\") },\r\n\t{ VK_NULL,    IDM_SEARCH_MARKEDTOCLIP,                      false, false, false, TEXT(\"Copy Styled Text of Find Mark style\") },\r\n\t{ VK_F2,      IDM_SEARCH_TOGGLE_BOOKMARK,                   true,  false, false, nullptr },\r\n\t{ VK_F2,      IDM_SEARCH_NEXT_BOOKMARK,                     false, false, false, nullptr },\r\n\t{ VK_F2,      IDM_SEARCH_PREV_BOOKMARK,                     false, false, true, nullptr  },\r\n\t{ VK_NULL,    IDM_SEARCH_CLEAR_BOOKMARKS,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_CUTMARKEDLINES,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_COPYMARKEDLINES,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_PASTEMARKEDLINES,                  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_DELETEMARKEDLINES,                 false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_DELETEUNMARKEDLINES,               false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_INVERSEMARKS,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SEARCH_FINDCHARINRANGE,                   false, false, false, nullptr },\r\n\t\t\t\t \r\n\t{ VK_NULL,    IDM_VIEW_ALWAYSONTOP,                         false, false, false, nullptr },\r\n\t{ VK_F11,     IDM_VIEW_FULLSCREENTOGGLE,                    false, false, false, nullptr },\r\n\t{ VK_F12,     IDM_VIEW_POSTIT,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_DISTRACTIONFREE,                     false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_VIEW_IN_FIREFOX,                          false, false, false, TEXT(\"View current file in Firefox\") },\r\n\t{ VK_NULL,    IDM_VIEW_IN_CHROME,                           false, false, false, TEXT(\"View current file in Chrome\") },\r\n\t{ VK_NULL,    IDM_VIEW_IN_IE,                               false, false, false, TEXT(\"View current file in IE\") },\r\n\t{ VK_NULL,    IDM_VIEW_IN_EDGE,                             false, false, false, TEXT(\"View current file in Edge\")  },\r\n\r\n\t{ VK_NULL,    IDM_VIEW_TAB_SPACE,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_EOL,                                 false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_ALL_CHARACTERS,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_INDENT_GUIDE,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_WRAP_SYMBOL,                         false, false, false, nullptr },\r\n//  { VK_NULL,    IDM_VIEW_ZOOMIN,                              false, false, false, nullptr },\r\n//  { VK_NULL,    IDM_VIEW_ZOOMOUT,                             false, false, false, nullptr },\r\n//  { VK_NULL,    IDM_VIEW_ZOOMRESTORE,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_GOTO_ANOTHER_VIEW,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_CLONE_TO_ANOTHER_VIEW,               false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_GOTO_NEW_INSTANCE,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_LOAD_IN_NEW_INSTANCE,                false, false, false, nullptr },\r\n\r\n\t{ VK_NUMPAD1, IDM_VIEW_TAB1,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD2, IDM_VIEW_TAB2,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD3, IDM_VIEW_TAB3,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD4, IDM_VIEW_TAB4,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD5, IDM_VIEW_TAB5,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD6, IDM_VIEW_TAB6,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD7, IDM_VIEW_TAB7,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD8, IDM_VIEW_TAB8,                                true,  false, false, nullptr },\r\n\t{ VK_NUMPAD9, IDM_VIEW_TAB9,                                true,  false, false, nullptr },\r\n\t{ VK_NEXT,    IDM_VIEW_TAB_NEXT,                            true,  false, false, nullptr },\r\n\t{ VK_PRIOR,   IDM_VIEW_TAB_PREV,                            true,  false, false, nullptr },\r\n\t{ VK_NEXT,    IDM_VIEW_TAB_MOVEFORWARD,                     true,  false, true,  nullptr },\r\n\t{ VK_PRIOR,   IDM_VIEW_TAB_MOVEBACKWARD,                    true,  false, true,  nullptr },\r\n\t{ VK_TAB,     IDC_PREV_DOC,                                 true,  false, true,  TEXT(\"Switch to previous document\") },\r\n\t{ VK_TAB,     IDC_NEXT_DOC,                                 true,  false, false, TEXT(\"Switch to next document\") },\r\n\t{ VK_NULL,    IDM_VIEW_WRAP,                                false, false, false, nullptr },\r\n\t{ VK_H,       IDM_VIEW_HIDELINES,                           false, true,  false, nullptr },\r\n\t{ VK_F8,      IDM_VIEW_SWITCHTO_OTHER_VIEW,                 false, false, false, nullptr },\r\n\r\n\t{ VK_0,       IDM_VIEW_FOLDALL,                             false, true,  false, nullptr },\r\n\t{ VK_0,       IDM_VIEW_UNFOLDALL,                           false, true,  true,  nullptr },\r\n\t{ VK_F,       IDM_VIEW_FOLD_CURRENT,                        true,  true,  false, nullptr },\r\n\t{ VK_F,       IDM_VIEW_UNFOLD_CURRENT,                      true,  true,  true,  nullptr },\r\n\t{ VK_1,       IDM_VIEW_FOLD_1,                              false, true,  false, TEXT(\"Fold Level 1\") },\r\n\t{ VK_2,       IDM_VIEW_FOLD_2,                              false, true,  false, TEXT(\"Fold Level 2\") },\r\n\t{ VK_3,       IDM_VIEW_FOLD_3,                              false, true,  false, TEXT(\"Fold Level 3\") },\r\n\t{ VK_4,       IDM_VIEW_FOLD_4,                              false, true,  false, TEXT(\"Fold Level 4\") },\r\n\t{ VK_5,       IDM_VIEW_FOLD_5,                              false, true,  false, TEXT(\"Fold Level 5\") },\r\n\t{ VK_6,       IDM_VIEW_FOLD_6,                              false, true,  false, TEXT(\"Fold Level 6\") },\r\n\t{ VK_7,       IDM_VIEW_FOLD_7,                              false, true,  false, TEXT(\"Fold Level 7\") },\r\n\t{ VK_8,       IDM_VIEW_FOLD_8,                              false, true,  false, TEXT(\"Fold Level 8\") },\r\n\r\n\t{ VK_1,       IDM_VIEW_UNFOLD_1,                            false, true,  true,  TEXT(\"Unfold Level 1\") },\r\n\t{ VK_2,       IDM_VIEW_UNFOLD_2,                            false, true,  true,  TEXT(\"Unfold Level 2\") },\r\n\t{ VK_3,       IDM_VIEW_UNFOLD_3,                            false, true,  true,  TEXT(\"Unfold Level 3\") },\r\n\t{ VK_4,       IDM_VIEW_UNFOLD_4,                            false, true,  true,  TEXT(\"Unfold Level 4\") },\r\n\t{ VK_5,       IDM_VIEW_UNFOLD_5,                            false, true,  true,  TEXT(\"Unfold Level 5\") },\r\n\t{ VK_6,       IDM_VIEW_UNFOLD_6,                            false, true,  true,  TEXT(\"Unfold Level 6\") },\r\n\t{ VK_7,       IDM_VIEW_UNFOLD_7,                            false, true,  true,  TEXT(\"Unfold Level 7\") },\r\n\t{ VK_8,       IDM_VIEW_UNFOLD_8,                            false, true,  true,  TEXT(\"Unfold Level 8\") },\r\n\t{ VK_NULL,    IDM_VIEW_SUMMARY,                             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_PROJECT_PANEL_1,                     false, false, false, TEXT(\"Toggle Project Panel 1\") },\r\n\t{ VK_NULL,    IDM_VIEW_PROJECT_PANEL_2,                     false, false, false, TEXT(\"Toggle Project Panel 2\") },\r\n\t{ VK_NULL,    IDM_VIEW_PROJECT_PANEL_3,                     false, false, false, TEXT(\"Toggle Project Panel 3\") },\r\n\t{ VK_NULL,    IDM_VIEW_FILEBROWSER,                         false, false, false, TEXT(\"Toggle Folder as Workspace\") },\r\n\t{ VK_NULL,    IDM_VIEW_DOC_MAP,                             false, false, false, TEXT(\"Toggle Document Map\") },\r\n\t{ VK_NULL,    IDM_VIEW_DOCLIST,                             false, false, false, TEXT(\"Toggle Document List\") },\r\n\t{ VK_NULL,    IDM_VIEW_FUNC_LIST,                           false, false, false, TEXT(\"Toggle Function List\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_PROJECT_PANEL_1,            false, false, false, TEXT(\"Switch to Project Panel 1\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_PROJECT_PANEL_2,            false, false, false, TEXT(\"Switch to Project Panel 2\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_PROJECT_PANEL_3,            false, false, false, TEXT(\"Switch to Project Panel 3\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_FILEBROWSER,                false, false, false, TEXT(\"Switch to Folder as Workspace\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_FUNC_LIST,                  false, false, false, TEXT(\"Switch to Function List\") },\r\n\t{ VK_NULL,    IDM_VIEW_SWITCHTO_DOCLIST,                    false, false, false, TEXT(\"Switch to Document List\") },\r\n\t{ VK_NULL,    IDM_VIEW_SYNSCROLLV,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_SYNSCROLLH,                          false, false, false, nullptr },\r\n\t{ VK_R,       IDM_EDIT_RTL,                                 true,  true,  false, nullptr },\r\n\t{ VK_L,       IDM_EDIT_LTR,                                 true,  true,  false, nullptr },\r\n\t{ VK_NULL,    IDM_VIEW_MONITORING,                          false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_FORMAT_ANSI,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_AS_UTF_8,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_UTF_8,                             false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_UTF_16BE,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_UTF_16LE,                          false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_6,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1256,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_13,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1257,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_14,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_5,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_MAC_CYRILLIC,                      false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_KOI8R_CYRILLIC,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_KOI8U_CYRILLIC,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1251,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1250,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_437,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_720,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_737,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_775,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_850,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_852,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_855,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_857,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_858,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_860,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_861,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_862,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_863,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_865,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_866,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_DOS_869,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_BIG5,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_GB2312,                            false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_2,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_7,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1253,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_8,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1255,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_SHIFT_JIS,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_EUC_KR,                            false, false, false, nullptr },\r\n\t//{ VK_NULL,    IDM_FORMAT_ISO_8859_10,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_15,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_4,                        false, false, false, nullptr },\r\n\t//{ VK_NULL,    IDM_FORMAT_ISO_8859_16,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_3,                        false, false, false, nullptr },\r\n\t//{ VK_NULL,    IDM_FORMAT_ISO_8859_11,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_TIS_620,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_9,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1254,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1252,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_ISO_8859_1,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_WIN_1258,                          false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_ANSI,                        false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_AS_UTF_8,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_UTF_8,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_UTF_16BE,                    false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORMAT_CONV2_UTF_16LE,                    false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_LANG_USER_DLG,                            false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_LANG_USER,                                false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_LANG_OPENUDLDIR,                          false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_SETTING_PREFERENCE,                       false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_LANGSTYLE_CONFIG_DLG,                     false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SETTING_SHORTCUT_MAPPER,                  false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SETTING_IMPORTPLUGIN,                     false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SETTING_IMPORTSTYLETHEMS,                 false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_SETTING_EDITCONTEXTMENU,                  false, false, false, nullptr },\r\n\r\n\t{ VK_R,       IDC_EDIT_TOGGLEMACRORECORDING,                true,  false, true,  TEXT(\"Toggle macro recording\")},\r\n\t{ VK_NULL,    IDM_MACRO_STARTRECORDINGMACRO,                false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_MACRO_STOPRECORDINGMACRO,                 false, false, false, nullptr },\r\n\t{ VK_P,       IDM_MACRO_PLAYBACKRECORDEDMACRO,              true,  false, true,  nullptr },\r\n\t{ VK_NULL,    IDM_MACRO_SAVECURRENTMACRO,                   false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_MACRO_RUNMULTIMACRODLG,                   false, false, false, nullptr },\r\n\r\n\t{ VK_F5,      IDM_EXECUTE,                                  false, false, false, nullptr },\r\n\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FN_ASC,                       false, false, false, TEXT(\"Sort By Name A to Z\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FN_DSC,                       false, false, false, TEXT(\"Sort By Name Z to A\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FP_ASC,                       false, false, false, TEXT(\"Sort By Path A to Z\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FP_DSC,                       false, false, false, TEXT(\"Sort By Path Z to A\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FT_ASC,                       false, false, false, TEXT(\"Sort By Type A to Z\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FT_DSC,                       false, false, false, TEXT(\"Sort By Type Z to A\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FS_ASC,                       false, false, false, TEXT(\"Sort By Size Smaller to Larger\") },\r\n\t{ VK_NULL,    IDM_WINDOW_SORT_FS_DSC,                       false, false, false, TEXT(\"Sort By Size Larger to Smaller\") },\r\n\r\n\t{ VK_NULL,    IDM_CMDLINEARGUMENTS,                         false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_HOMESWEETHOME,                            false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_PROJECTPAGE,                              false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_ONLINEDOCUMENT,                           false, false, false, nullptr },\r\n\t{ VK_NULL,    IDM_FORUM,                                    false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_ONLINESUPPORT,                            false, false, false, nullptr },\r\n//\t{ VK_NULL,    IDM_PLUGINSHOME,                              false, false, false, nullptr },\r\n\r\n\t// The following two commands are not in menu if (nppGUI._doesExistUpdater == 0).\r\n\t// They cannot be derived from menu then, only for this reason the text is specified here.\r\n\t// In localized environments, the text comes preferably from xml Menu/Main/Commands.\r\n\t{ VK_NULL,    IDM_UPDATE_NPP,                               false, false, false, TEXT(\"Update Notepad++\") },\r\n\t{ VK_NULL,    IDM_CONFUPDATERPROXY,                         false, false, false, TEXT(\"Set Updater Proxy...\") },\r\n\t{ VK_NULL,    IDM_DEBUGINFO,                                false, false, false, nullptr },\r\n\t{ VK_F1,      IDM_ABOUT,                                    false, false, false, nullptr }\r\n};\r\n\r\n\r\n\r\n\r\n/*!\r\n** \\brief array of accelerator keys for all possible scintilla functions\r\n**\r\n** values can be 0 for vKey, which means its unused\r\n*/\r\nstatic const ScintillaKeyDefinition scintKeyDefs[] =\r\n{\r\n\t{TEXT(\"SCI_CUT\"),                     SCI_CUT,                     true,  false, false, VK_X,        IDM_EDIT_CUT},\r\n\t{TEXT(\"\"),                            SCI_CUT,                     false, false, true,  VK_DELETE,   0},\r\n\t{TEXT(\"SCI_COPY\"),                    SCI_COPY,                    true,  false, false, VK_C,        IDM_EDIT_COPY},\r\n\t{TEXT(\"\"),                            SCI_COPY,                    true,  false, false, VK_INSERT,   0},\r\n\t{TEXT(\"SCI_PASTE\"),                   SCI_PASTE,                   true,  false, false, VK_V,        IDM_EDIT_PASTE},\r\n\t{TEXT(\"\"),                            SCI_PASTE,                   false, false, true,  VK_INSERT,   0},\r\n\t{TEXT(\"SCI_SELECTALL\"),               SCI_SELECTALL,               true,  false, false, VK_A,        IDM_EDIT_SELECTALL},\r\n\t{TEXT(\"SCI_CLEAR\"),                   SCI_CLEAR,                   false, false, false, VK_DELETE,   IDM_EDIT_DELETE},\r\n\t{TEXT(\"SCI_CLEARALL\"),                SCI_CLEARALL,                false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_UNDO\"),                    SCI_UNDO,                    true,  false, false, VK_Z,        IDM_EDIT_UNDO},\r\n\t{TEXT(\"\"),                            SCI_UNDO,                    false, true,  false, VK_BACK,     0},\r\n\t{TEXT(\"SCI_REDO\"),                    SCI_REDO,                    true,  false, false, VK_Y,        IDM_EDIT_REDO},\r\n\t{TEXT(\"\"),                            SCI_REDO,                    true,  false, true,  VK_Z,        0},\r\n\t{TEXT(\"SCI_NEWLINE\"),                 SCI_NEWLINE,                 false, false, false, VK_RETURN,   0},\r\n\t{TEXT(\"\"),                            SCI_NEWLINE,                 false, false, true,  VK_RETURN,   0},\r\n\t{TEXT(\"SCI_TAB\"),                     SCI_TAB,                     false, false, false, VK_TAB,      0},\r\n\t{TEXT(\"SCI_BACKTAB\"),                 SCI_BACKTAB,                 false, false, true,  VK_TAB,      0},\r\n\t{TEXT(\"SCI_FORMFEED\"),                SCI_FORMFEED,                false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_ZOOMIN\"),                  SCI_ZOOMIN,                  true,  false, false, VK_ADD,      IDM_VIEW_ZOOMIN},\r\n\t{TEXT(\"SCI_ZOOMOUT\"),                 SCI_ZOOMOUT,                 true,  false, false, VK_SUBTRACT, IDM_VIEW_ZOOMOUT},\r\n\t{TEXT(\"SCI_SETZOOM\"),                 SCI_SETZOOM,                 true,  false, false, VK_DIVIDE,   IDM_VIEW_ZOOMRESTORE},\r\n\t{TEXT(\"SCI_SELECTIONDUPLICATE\"),      SCI_SELECTIONDUPLICATE,      true,  false, false, VK_D,        IDM_EDIT_DUP_LINE},\r\n\t{TEXT(\"SCI_LINESJOIN\"),               SCI_LINESJOIN,               false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_SCROLLCARET\"),             SCI_SCROLLCARET,             false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_EDITTOGGLEOVERTYPE\"),      SCI_EDITTOGGLEOVERTYPE,      false, false, false, VK_INSERT,   0},\r\n\t{TEXT(\"SCI_MOVECARETINSIDEVIEW\"),     SCI_MOVECARETINSIDEVIEW,     false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_LINEDOWN\"),                SCI_LINEDOWN,                false, false, false, VK_DOWN,     0},\r\n\t{TEXT(\"SCI_LINEDOWNEXTEND\"),          SCI_LINEDOWNEXTEND,          false, false, true,  VK_DOWN,     0},\r\n\t{TEXT(\"SCI_LINEDOWNRECTEXTEND\"),      SCI_LINEDOWNRECTEXTEND,      false, true,  true,  VK_DOWN,     0},\r\n\t{TEXT(\"SCI_LINESCROLLDOWN\"),          SCI_LINESCROLLDOWN,          true,  false, false, VK_DOWN,     0},\r\n\t{TEXT(\"SCI_LINEUP\"),                  SCI_LINEUP,                  false, false, false, VK_UP,       0},\r\n\t{TEXT(\"SCI_LINEUPEXTEND\"),            SCI_LINEUPEXTEND,            false, false, true,  VK_UP,       0},\r\n\t{TEXT(\"SCI_LINEUPRECTEXTEND\"),        SCI_LINEUPRECTEXTEND,        false, true,  true,  VK_UP,       0},\r\n\t{TEXT(\"SCI_LINESCROLLUP\"),            SCI_LINESCROLLUP,            true,  false, false, VK_UP,       0},\r\n\t{TEXT(\"SCI_PARADOWN\"),                SCI_PARADOWN,                true,  false, false, VK_OEM_6,    0},\r\n\t{TEXT(\"SCI_PARADOWNEXTEND\"),          SCI_PARADOWNEXTEND,          true,  false, true,  VK_OEM_6,    0},\r\n\t{TEXT(\"SCI_PARAUP\"),                  SCI_PARAUP,                  true,  false, false, VK_OEM_4,    0},\r\n\t{TEXT(\"SCI_PARAUPEXTEND\"),            SCI_PARAUPEXTEND,            true,  false, true,  VK_OEM_4,    0},\r\n\t{TEXT(\"SCI_CHARLEFT\"),                SCI_CHARLEFT,                false, false, false, VK_LEFT,     0},\r\n\t{TEXT(\"SCI_CHARLEFTEXTEND\"),          SCI_CHARLEFTEXTEND,          false, false, true,  VK_LEFT,     0},\r\n\t{TEXT(\"SCI_CHARLEFTRECTEXTEND\"),      SCI_CHARLEFTRECTEXTEND,      false, true,  true,  VK_LEFT,     0},\r\n\t{TEXT(\"SCI_CHARRIGHT\"),               SCI_CHARRIGHT,               false, false, false, VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_CHARRIGHTEXTEND\"),         SCI_CHARRIGHTEXTEND,         false, false, true,  VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_CHARRIGHTRECTEXTEND\"),     SCI_CHARRIGHTRECTEXTEND,     false, true,  true,  VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_WORDLEFT\"),                SCI_WORDLEFT,                true,  false, false, VK_LEFT,     0},\r\n\t{TEXT(\"SCI_WORDLEFTEXTEND\"),          SCI_WORDLEFTEXTEND,          true,  false, true,  VK_LEFT,     0},\r\n\t{TEXT(\"SCI_WORDRIGHT\"),               SCI_WORDRIGHT,               true,  false, false, VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_WORDRIGHTEXTEND\"),         SCI_WORDRIGHTEXTEND,         false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_WORDLEFTEND\"),             SCI_WORDLEFTEND,             false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_WORDLEFTENDEXTEND\"),       SCI_WORDLEFTENDEXTEND,       false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_WORDRIGHTEND\"),            SCI_WORDRIGHTEND,            false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_WORDRIGHTENDEXTEND\"),      SCI_WORDRIGHTENDEXTEND,      true,  false, true,  VK_RIGHT,    0},\r\n\t{TEXT(\"SCI_WORDPARTLEFT\"),            SCI_WORDPARTLEFT,            true,  false, false, VK_OEM_2,    0},\r\n\t{TEXT(\"SCI_WORDPARTLEFTEXTEND\"),      SCI_WORDPARTLEFTEXTEND,      true,  false, true,  VK_OEM_2,    0},\r\n\t{TEXT(\"SCI_WORDPARTRIGHT\"),           SCI_WORDPARTRIGHT,           true,  false, false, VK_OEM_5,    0},\r\n\t{TEXT(\"SCI_WORDPARTRIGHTEXTEND\"),     SCI_WORDPARTRIGHTEXTEND,     true,  false, true,  VK_OEM_5,    0},\r\n\t{TEXT(\"SCI_HOME\"),                    SCI_HOME,                    false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMEEXTEND\"),              SCI_HOMEEXTEND,              false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMERECTEXTEND\"),          SCI_HOMERECTEXTEND,          false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMEDISPLAY\"),             SCI_HOMEDISPLAY,             false, true,  false, VK_HOME,     0},\r\n\t{TEXT(\"SCI_HOMEDISPLAYEXTEND\"),       SCI_HOMEDISPLAYEXTEND,       false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMEWRAP\"),                SCI_HOMEWRAP,                false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_HOMEWRAPEXTEND\"),          SCI_HOMEWRAPEXTEND,          false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOME\"),                  SCI_VCHOME,                  false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOMEEXTEND\"),            SCI_VCHOMEEXTEND,            false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOMERECTEXTEND\"),        SCI_VCHOMERECTEXTEND,        false, true,  true,  VK_HOME,     0},\r\n\t{TEXT(\"SCI_VCHOMEDISPLAY\"),           SCI_VCHOMEDISPLAY,           false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOMEDISPLAYEXTEND\"),     SCI_VCHOMEDISPLAYEXTEND,     false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_VCHOMEWRAP\"),              SCI_VCHOMEWRAP,              false, false, false, VK_HOME,     0},\r\n\t{TEXT(\"SCI_VCHOMEWRAPEXTEND\"),        SCI_VCHOMEWRAPEXTEND,        false, false, true,  VK_HOME,     0},\r\n\t{TEXT(\"SCI_LINEEND\"),                 SCI_LINEEND,                 false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_LINEENDWRAPEXTEND\"),       SCI_LINEENDWRAPEXTEND,       false, false, true,  VK_END,      0},\r\n\t{TEXT(\"SCI_LINEENDRECTEXTEND\"),       SCI_LINEENDRECTEXTEND,       false, true,  true,  VK_END,      0},\r\n\t{TEXT(\"SCI_LINEENDDISPLAY\"),          SCI_LINEENDDISPLAY,          false, true,  false, VK_END,      0},\r\n\t{TEXT(\"SCI_LINEENDDISPLAYEXTEND\"),    SCI_LINEENDDISPLAYEXTEND,    false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_LINEENDWRAP\"),             SCI_LINEENDWRAP,             false, false, false, VK_END,      0},\r\n\t{TEXT(\"SCI_LINEENDEXTEND\"),           SCI_LINEENDEXTEND,           false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_DOCUMENTSTART\"),           SCI_DOCUMENTSTART,           true,  false, false, VK_HOME,     0},\r\n\t{TEXT(\"SCI_DOCUMENTSTARTEXTEND\"),     SCI_DOCUMENTSTARTEXTEND,     true,  false, true,  VK_HOME,     0},\r\n\t{TEXT(\"SCI_DOCUMENTEND\"),             SCI_DOCUMENTEND,             true,  false, false, VK_END,      0},\r\n\t{TEXT(\"SCI_DOCUMENTENDEXTEND\"),       SCI_DOCUMENTENDEXTEND,       true,  false, true,  VK_END,      0},\r\n\t{TEXT(\"SCI_PAGEUP\"),                  SCI_PAGEUP,                  false, false, false, VK_PRIOR,    0},\r\n\t{TEXT(\"SCI_PAGEUPEXTEND\"),            SCI_PAGEUPEXTEND,            false, false, true,  VK_PRIOR,    0},\r\n\t{TEXT(\"SCI_PAGEUPRECTEXTEND\"),        SCI_PAGEUPRECTEXTEND,        false, true,  true,  VK_PRIOR,    0},\r\n\t{TEXT(\"SCI_PAGEDOWN\"),                SCI_PAGEDOWN,                false, false, false, VK_NEXT,     0},\r\n\t{TEXT(\"SCI_PAGEDOWNEXTEND\"),          SCI_PAGEDOWNEXTEND,          false, false, true,  VK_NEXT,     0},\r\n\t{TEXT(\"SCI_PAGEDOWNRECTEXTEND\"),      SCI_PAGEDOWNRECTEXTEND,      false, true,  true,  VK_NEXT,     0},\r\n\t{TEXT(\"SCI_STUTTEREDPAGEUP\"),         SCI_STUTTEREDPAGEUP,         false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_STUTTEREDPAGEUPEXTEND\"),   SCI_STUTTEREDPAGEUPEXTEND,   false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_STUTTEREDPAGEDOWN\"),       SCI_STUTTEREDPAGEDOWN,       false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_STUTTEREDPAGEDOWNEXTEND\"), SCI_STUTTEREDPAGEDOWNEXTEND, false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_DELETEBACK\"),              SCI_DELETEBACK,              false, false, false, VK_BACK,     0},\r\n\t{TEXT(\"\"),                            SCI_DELETEBACK,              false, false, true,  VK_BACK,     0},\r\n\t{TEXT(\"SCI_DELETEBACKNOTLINE\"),       SCI_DELETEBACKNOTLINE,       false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_DELWORDLEFT\"),             SCI_DELWORDLEFT,             true,  false, false, VK_BACK,     0},\r\n\t{TEXT(\"SCI_DELWORDRIGHT\"),            SCI_DELWORDRIGHT,            true,  false, false, VK_DELETE,   0},\r\n\t{TEXT(\"SCI_DELLINELEFT\"),             SCI_DELLINELEFT,             true,  false, true,  VK_BACK,     0},\r\n\t{TEXT(\"SCI_DELLINERIGHT\"),            SCI_DELLINERIGHT,            true,  false, true,  VK_DELETE,   0},\r\n\t{TEXT(\"SCI_LINEDELETE\"),              SCI_LINEDELETE,              true,  false, true,  VK_L,        0},\r\n\t{TEXT(\"SCI_LINECUT\"),                 SCI_LINECUT,                 true,  false, false, VK_L,        0},\r\n\t{TEXT(\"SCI_LINECOPY\"),                SCI_LINECOPY,                true,  false, true,  VK_X,        0},\r\n\t{TEXT(\"SCI_LINETRANSPOSE\"),           SCI_LINETRANSPOSE,           true,  false, false, VK_T,        0},\r\n\t{TEXT(\"SCI_LINEDUPLICATE\"),           SCI_LINEDUPLICATE,           false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_CANCEL\"),                  SCI_CANCEL,                  false, false, false, VK_ESCAPE,   0},\r\n\t{TEXT(\"SCI_SWAPMAINANCHORCARET\"),     SCI_SWAPMAINANCHORCARET,     false, false, false, 0,           0},\r\n\t{TEXT(\"SCI_ROTATESELECTION\"),         SCI_ROTATESELECTION,         false, false, false, 0,           0}\r\n};\r\n\r\n\r\ntypedef void (WINAPI *PGNSI)(LPSYSTEM_INFO);\r\n\r\nint strVal(const TCHAR *str, int base)\r\n{\r\n\tif (!str) return -1;\r\n\tif (!str[0]) return 0;\r\n\r\n\tTCHAR *finStr;\r\n\tint result = generic_strtol(str, &finStr, base);\r\n\tif (*finStr != '\\0')\r\n\t\treturn -1;\r\n\treturn result;\r\n}\r\n\r\n\r\nint decStrVal(const TCHAR *str)\r\n{\r\n\treturn strVal(str, 10);\r\n}\r\n\r\nint hexStrVal(const TCHAR *str)\r\n{\r\n\treturn strVal(str, 16);\r\n}\r\n\r\nint getKwClassFromName(const TCHAR *str)\r\n{\r\n\tif (!lstrcmp(TEXT(\"instre1\"), str)) return LANG_INDEX_INSTR;\r\n\tif (!lstrcmp(TEXT(\"instre2\"), str)) return LANG_INDEX_INSTR2;\r\n\tif (!lstrcmp(TEXT(\"type1\"), str)) return LANG_INDEX_TYPE;\r\n\tif (!lstrcmp(TEXT(\"type2\"), str)) return LANG_INDEX_TYPE2;\r\n\tif (!lstrcmp(TEXT(\"type3\"), str)) return LANG_INDEX_TYPE3;\r\n\tif (!lstrcmp(TEXT(\"type4\"), str)) return LANG_INDEX_TYPE4;\r\n\tif (!lstrcmp(TEXT(\"type5\"), str)) return LANG_INDEX_TYPE5;\r\n\tif (!lstrcmp(TEXT(\"type6\"), str)) return LANG_INDEX_TYPE6;\r\n\tif (!lstrcmp(TEXT(\"type7\"), str)) return LANG_INDEX_TYPE7;\r\n\r\n\tif ((str[1] == '\\0') && (str[0] >= '0') && (str[0] <= '8')) // up to KEYWORDSET_MAX\r\n\t\treturn str[0] - '0';\r\n\r\n\treturn -1;\r\n}\r\n\r\n\t\r\nsize_t getAsciiLenFromBase64Len(size_t base64StrLen)\r\n{\r\n\treturn (base64StrLen % 4) ? 0 : (base64StrLen - base64StrLen / 4);\r\n}\r\n\r\n\r\nint base64ToAscii(char *dest, const char *base64Str)\r\n{\r\n\tstatic const int base64IndexArray[123] =\r\n\t{\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, -1, -1, -1, -1, -1,\r\n\t\t-1, -1, -1, 62, -1, -1, -1, 63,\r\n\t\t52, 53, 54, 55 ,56, 57, 58, 59,\r\n\t\t60, 61, -1, -1, -1, -1, -1, -1,\r\n\t\t-1,  0,  1,  2,  3,  4,  5,  6,\r\n\t\t\t7,  8,  9, 10, 11, 12, 13, 14,\r\n\t\t15, 16, 17, 18, 19, 20, 21, 22,\r\n\t\t23, 24, 25, -1, -1, -1, -1 ,-1,\r\n\t\t-1, 26, 27, 28, 29, 30, 31, 32,\r\n\t\t33, 34, 35, 36, 37, 38, 39, 40,\r\n\t\t41, 42, 43, 44, 45, 46, 47, 48,\r\n\t\t49, 50, 51\r\n\t};\r\n\r\n\tsize_t b64StrLen = strlen(base64Str);\r\n\tsize_t nbLoop = b64StrLen / 4;\r\n\r\n\tsize_t i = 0;\r\n\tint k = 0;\r\n\r\n\tenum {b64_just, b64_1padded, b64_2padded} padd = b64_just;\r\n\tfor ( ; i < nbLoop ; i++)\r\n\t{\r\n\t\tsize_t j = i * 4;\r\n\t\tUCHAR uc0, uc1, uc2, uc3, p0, p1;\r\n\r\n\t\tuc0 = (UCHAR)base64IndexArray[base64Str[j]];\r\n\t\tuc1 = (UCHAR)base64IndexArray[base64Str[j+1]];\r\n\t\tuc2 = (UCHAR)base64IndexArray[base64Str[j+2]];\r\n\t\tuc3 = (UCHAR)base64IndexArray[base64Str[j+3]];\r\n\r\n\t\tif ((static_cast<char>(uc0) == -1) || (static_cast<char>(uc1) == -1) || (static_cast<char>(uc2) == -1) || (static_cast<char>(uc3) == -1))\r\n\t\t\treturn -1;\r\n\r\n\t\tif (base64Str[j+2] == '=') // && (uc3 == '=')\r\n\t\t{\r\n\t\t\tuc2 = uc3 = 0;\r\n\t\t\tpadd = b64_2padded;\r\n\t\t}\r\n\t\telse if (base64Str[j+3] == '=')\r\n\t\t{\r\n\t\t\tuc3 = 0;\r\n\t\t\tpadd = b64_1padded;\r\n\t\t}\r\n\r\n\t\tp0 = uc0 << 2;\r\n\t\tp1 = uc1 << 2;\r\n\t\tp1 >>= 6;\r\n\t\tdest[k++] = p0 | p1;\r\n\r\n\t\tp0 = uc1 << 4;\r\n\t\tp1 = uc2 << 2;\r\n\t\tp1 >>= 4;\r\n\t\tdest[k++] = p0 | p1;\r\n\r\n\t\tp0 = uc2 << 6;\r\n\t\tp1 = uc3;\r\n\t\tdest[k++] = p0 | p1;\r\n\t}\r\n\r\n\t//dest[k] = '\\0';\r\n\tif (padd == b64_1padded)\r\n\t//\tdest[k-1] = '\\0';\r\n\t\treturn k-1;\r\n\telse if (padd == b64_2padded)\r\n\t//\tdest[k-2] = '\\0';\r\n\t\treturn k-2;\r\n\r\n\treturn k;\r\n}\r\n\r\n} // anonymous namespace\r\n\r\n\r\nvoid cutString(const TCHAR* str2cut, vector<generic_string>& patternVect)\r\n{\r\n\tif (str2cut == nullptr) return;\r\n\r\n\tconst TCHAR *pBegin = str2cut;\r\n\tconst TCHAR *pEnd = pBegin;\r\n\r\n\twhile (*pEnd != '\\0')\r\n\t{\r\n\t\tif (_istspace(*pEnd))\r\n\t\t{\r\n\t\t\tif (pBegin != pEnd)\r\n\t\t\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n\t\t\tpBegin = pEnd + 1;\r\n\t\t\r\n\t\t}\r\n\t\t++pEnd;\r\n\t}\r\n\r\n\tif (pBegin != pEnd)\r\n\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n}\r\n\r\nvoid cutStringBy(const TCHAR* str2cut, vector<generic_string>& patternVect, char byChar, bool allowEmptyStr)\r\n{\r\n\tif (str2cut == nullptr) return;\r\n\r\n\tconst TCHAR* pBegin = str2cut;\r\n\tconst TCHAR* pEnd = pBegin;\r\n\r\n\twhile (*pEnd != '\\0')\r\n\t{\r\n\t\tif (*pEnd == byChar)\r\n\t\t{\r\n\t\t\tif (allowEmptyStr)\r\n\t\t\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n\t\t\telse if (pBegin != pEnd)\r\n\t\t\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n\t\t\tpBegin = pEnd + 1;\r\n\t\t}\r\n\t\t++pEnd;\r\n\t}\r\n\tif (allowEmptyStr)\r\n\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n\telse if (pBegin != pEnd)\r\n\t\tpatternVect.emplace_back(pBegin, pEnd);\r\n}\r\n\r\n\r\nstd::wstring LocalizationSwitcher::getLangFromXmlFileName(const wchar_t *fn) const\r\n{\r\n\tsize_t nbItem = sizeof(localizationDefs)/sizeof(LocalizationSwitcher::LocalizationDefinition);\r\n\tfor (size_t i = 0 ; i < nbItem ; ++i)\r\n\t{\r\n\t\tif (0 == wcsicmp(fn, localizationDefs[i]._xmlFileName))\r\n\t\t\treturn localizationDefs[i]._langName;\r\n\t}\r\n\treturn std::wstring();\r\n}\r\n\r\n\r\nstd::wstring LocalizationSwitcher::getXmlFilePathFromLangName(const wchar_t *langName) const\r\n{\r\n\tfor (size_t i = 0, len = _localizationList.size(); i < len ; ++i)\r\n\t{\r\n\t\tif (0 == wcsicmp(langName, _localizationList[i].first.c_str()))\r\n\t\t\treturn _localizationList[i].second;\r\n\t}\r\n\treturn std::wstring();\r\n}\r\n\r\n\r\nbool LocalizationSwitcher::addLanguageFromXml(const std::wstring& xmlFullPath)\r\n{\r\n\twchar_t * fn = ::PathFindFileNameW(xmlFullPath.c_str());\r\n\twstring foundLang = getLangFromXmlFileName(fn);\r\n\tif (!foundLang.empty())\r\n\t{\r\n\t\t_localizationList.push_back(pair<wstring, wstring>(foundLang, xmlFullPath));\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\nbool LocalizationSwitcher::switchToLang(const wchar_t *lang2switch) const\r\n{\r\n\twstring langPath = getXmlFilePathFromLangName(lang2switch);\r\n\tif (langPath.empty())\r\n\t\treturn false;\r\n\r\n\treturn ::CopyFileW(langPath.c_str(), _nativeLangPath.c_str(), FALSE) != FALSE;\r\n}\r\n\r\n\r\ngeneric_string ThemeSwitcher::getThemeFromXmlFileName(const TCHAR *xmlFullPath) const\r\n{\r\n\tif (!xmlFullPath || !xmlFullPath[0])\r\n\t\treturn generic_string();\r\n\tgeneric_string fn(::PathFindFileName(xmlFullPath));\r\n\tPathRemoveExtension(const_cast<TCHAR *>(fn.c_str()));\r\n\treturn fn;\r\n}\r\n\r\n\r\nwinVer NppParameters::getWindowsVersion()\r\n{\r\n\tOSVERSIONINFOEX osvi;\r\n\tSYSTEM_INFO si;\r\n\tPGNSI pGNSI;\r\n\r\n\tZeroMemory(&si, sizeof(SYSTEM_INFO));\r\n\tZeroMemory(&osvi, sizeof(OSVERSIONINFOEX));\r\n\r\n\tosvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);\r\n\tBOOL bOsVersionInfoEx = GetVersionEx ((OSVERSIONINFO *)&osvi);\r\n\tif (!bOsVersionInfoEx)\r\n\t{\r\n\t\tosvi.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);\r\n\t\tif (! GetVersionEx ( (OSVERSIONINFO *) &osvi) )\r\n\t\t\treturn WV_UNKNOWN;\r\n\t}\r\n\r\n\tpGNSI = (PGNSI) GetProcAddress(GetModuleHandle(TEXT(\"kernel32.dll\")), \"GetNativeSystemInfo\");\r\n\tif (pGNSI != NULL)\r\n\t\tpGNSI(&si);\r\n\telse\r\n\t\tGetSystemInfo(&si);\r\n\r\n\tswitch (si.wProcessorArchitecture)\r\n\t{\r\n\tcase PROCESSOR_ARCHITECTURE_IA64:\r\n\t\t_platForm = PF_IA64;\r\n\t\tbreak;\r\n\r\n\tcase PROCESSOR_ARCHITECTURE_AMD64:\r\n\t\t_platForm = PF_X64;\r\n\t\tbreak;\r\n\r\n\tcase PROCESSOR_ARCHITECTURE_INTEL:\r\n\t\t_platForm = PF_X86;\r\n\t\tbreak;\r\n\r\n\tcase PROCESSOR_ARCHITECTURE_ARM64:\r\n\t\t_platForm = PF_ARM64;\r\n\t\tbreak;\r\n\r\n\tdefault:\r\n\t\t_platForm = PF_UNKNOWN;\r\n\t}\r\n\r\n   switch (osvi.dwPlatformId)\r\n   {\r\n\t\tcase VER_PLATFORM_WIN32_NT:\r\n\t\t{\r\n\t\t\tif (osvi.dwMajorVersion == 10 && osvi.dwMinorVersion == 0)\r\n\t\t\t\treturn WV_WIN10;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 3)\r\n\t\t\t\treturn WV_WIN81;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 2)\r\n\t\t\t\treturn WV_WIN8;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 1)\r\n\t\t\t\treturn WV_WIN7;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 6 && osvi.dwMinorVersion == 0)\r\n\t\t\t\treturn WV_VISTA;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 2)\r\n\t\t\t{\r\n\t\t\t\tif (osvi.wProductType == VER_NT_WORKSTATION && si.wProcessorArchitecture==PROCESSOR_ARCHITECTURE_AMD64)\r\n\t\t\t\t\treturn WV_XPX64;\r\n\t\t\t\treturn WV_S2003;\r\n\t\t\t}\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 1)\r\n\t\t\t\treturn WV_XP;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 0)\r\n\t\t\t\treturn WV_W2K;\r\n\r\n\t\t\tif (osvi.dwMajorVersion <= 4)\r\n\t\t\t\treturn WV_NT;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\t// Test for the Windows Me/98/95.\r\n\t\tcase VER_PLATFORM_WIN32_WINDOWS:\r\n\t\t{\r\n\t\t\tif (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 0)\r\n\t\t\t\treturn WV_95;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 10)\r\n\t\t\t\treturn WV_98;\r\n\r\n\t\t\tif (osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 90)\r\n\t\t\t\treturn WV_ME;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tcase VER_PLATFORM_WIN32s:\r\n\t\t\treturn WV_WIN32S;\r\n\r\n\t\tdefault:\r\n\t\t\treturn WV_UNKNOWN;\r\n   }\r\n\r\n   return WV_UNKNOWN;\r\n}\r\n\r\n\r\nNppParameters::NppParameters()\r\n{\r\n\t//Get windows version\r\n\t_winVersion = getWindowsVersion();\r\n\r\n\t// Prepare for default path\r\n\tTCHAR nppPath[MAX_PATH];\r\n\t::GetModuleFileName(NULL, nppPath, MAX_PATH);\r\n\r\n\tPathRemoveFileSpec(nppPath);\r\n\t_nppPath = nppPath;\r\n\r\n\t//Initialize current directory to startup directory\r\n\tTCHAR curDir[MAX_PATH];\r\n\t::GetCurrentDirectory(MAX_PATH, curDir);\r\n\t_currentDirectory = curDir;\r\n\r\n\t_appdataNppDir.clear();\r\n\tgeneric_string notepadStylePath(_nppPath);\r\n\tpathAppend(notepadStylePath, notepadStyleFile);\r\n\r\n\t_asNotepadStyle = (PathFileExists(notepadStylePath.c_str()) == TRUE);\r\n\r\n\t//Load initial accelerator key definitions\r\n\tinitMenuKeys();\r\n\tinitScintillaKeys();\r\n}\r\n\r\n\r\nNppParameters::~NppParameters()\r\n{\r\n\tfor (int i = 0 ; i < _nbLang ; ++i)\r\n\t\tdelete _langList[i];\r\n\tfor (int i = 0 ; i < _nbRecentFile ; ++i)\r\n\t\tdelete _LRFileList[i];\r\n\tfor (int i = 0 ; i < _nbUserLang ; ++i)\r\n\t\tdelete _userLangArray[i];\r\n\tif (_hUXTheme)\r\n\t\tFreeLibrary(_hUXTheme);\r\n\r\n\tfor (std::vector<TiXmlDocument *>::iterator it = _pXmlExternalLexerDoc.begin(), end = _pXmlExternalLexerDoc.end(); it != end; ++it )\r\n\t\tdelete (*it);\r\n\r\n\t_pXmlExternalLexerDoc.clear();\r\n}\r\n\r\n\r\nbool NppParameters::reloadStylers(const TCHAR* stylePath)\r\n{\r\n\tdelete _pXmlUserStylerDoc;\r\n\r\n\tconst TCHAR* stylePathToLoad = stylePath != nullptr ? stylePath : _stylerPath.c_str();\r\n\t_pXmlUserStylerDoc = new TiXmlDocument(stylePathToLoad);\r\n\r\n\tbool loadOkay = _pXmlUserStylerDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tif (!_pNativeLangSpeaker)\r\n\t\t{\r\n\t\t\t::MessageBox(NULL, stylePathToLoad, TEXT(\"Load stylers.xml failed\"), MB_OK);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_pNativeLangSpeaker->messageBox(\"LoadStylersFailed\",\r\n\t\t\t\tNULL,\r\n\t\t\t\tTEXT(\"Load \\\"$STR_REPLACE$\\\" failed!\"),\r\n\t\t\t\tTEXT(\"Load stylers.xml failed\"),\r\n\t\t\t\tMB_OK,\r\n\t\t\t\t0,\r\n\t\t\t\tstylePathToLoad);\r\n\t\t}\r\n\t\tdelete _pXmlUserStylerDoc;\r\n\t\t_pXmlUserStylerDoc = NULL;\r\n\t\treturn false;\r\n\t}\r\n\t_lexerStylerVect.clear();\r\n\t_widgetStyleArray.clear();\r\n\r\n\tgetUserStylersFromXmlTree();\r\n\r\n\t//  Reload plugin styles.\r\n\tfor ( size_t i = 0; i < getExternalLexerDoc()->size(); ++i)\r\n\t{\r\n\t\tgetExternalLexerFromXmlTree( getExternalLexerDoc()->at(i) );\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::reloadLang()\r\n{\r\n\t// use user path\r\n\tgeneric_string nativeLangPath(_localizationSwitcher._nativeLangPath);\r\n\r\n\t// if \"nativeLang.xml\" does not exist, use npp path\r\n\tif (!PathFileExists(nativeLangPath.c_str()))\r\n\t{\r\n\t\tnativeLangPath = _nppPath;\r\n\t\tpathAppend(nativeLangPath, generic_string(TEXT(\"nativeLang.xml\")));\r\n\t\tif (!PathFileExists(nativeLangPath.c_str()))\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\tdelete _pXmlNativeLangDocA;\r\n\r\n\t_pXmlNativeLangDocA = new TiXmlDocumentA();\r\n\r\n\tbool loadOkay = _pXmlNativeLangDocA->LoadUnicodeFilePath(nativeLangPath.c_str());\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlNativeLangDocA;\r\n\t\t_pXmlNativeLangDocA = nullptr;\r\n\t\treturn false;\r\n\t}\r\n\treturn loadOkay;\r\n}\r\n\r\ngeneric_string NppParameters::getSpecialFolderLocation(int folderKind)\r\n{\r\n\tTCHAR path[MAX_PATH];\r\n\tconst HRESULT specialLocationResult = SHGetFolderPath(nullptr, folderKind, nullptr, SHGFP_TYPE_CURRENT, path);\r\n\r\n\tgeneric_string result;\r\n\tif (SUCCEEDED(specialLocationResult))\r\n\t{\r\n\t\tresult = path;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\n\r\ngeneric_string NppParameters::getSettingsFolder()\r\n{\r\n\tif (_isLocal)\r\n\t\treturn _nppPath;\r\n\r\n\tgeneric_string settingsFolderPath = getSpecialFolderLocation(CSIDL_APPDATA);\r\n\r\n\tif (settingsFolderPath.empty())\r\n\t\treturn _nppPath;\r\n\r\n\tpathAppend(settingsFolderPath, TEXT(\"Notepad++\"));\r\n\treturn settingsFolderPath;\r\n}\r\n\r\n\r\nbool NppParameters::load()\r\n{\r\n\tL_END = L_EXTERNAL;\r\n\tbool isAllLaoded = true;\r\n\r\n\t_isx64 = sizeof(void *) == 8;\r\n\r\n\t// Make localConf.xml path\r\n\tgeneric_string localConfPath(_nppPath);\r\n\tpathAppend(localConfPath, localConfFile);\r\n\r\n\t// Test if localConf.xml exist\r\n\t_isLocal = (PathFileExists(localConfPath.c_str()) == TRUE);\r\n\r\n\t// Under vista and windows 7, the usage of doLocalConf.xml is not allowed\r\n\t// if Notepad++ is installed in \"program files\" directory, because of UAC\r\n\tif (_isLocal)\r\n\t{\r\n\t\t// We check if OS is Vista or greater version\r\n\t\tif (_winVersion >= WV_VISTA)\r\n\t\t{\r\n\t\t\tgeneric_string progPath = getSpecialFolderLocation(CSIDL_PROGRAM_FILES);\r\n\t\t\tTCHAR nppDirLocation[MAX_PATH];\r\n\t\t\twcscpy_s(nppDirLocation, _nppPath.c_str());\r\n\t\t\t::PathRemoveFileSpec(nppDirLocation);\r\n\r\n\t\t\tif  (progPath == nppDirLocation)\r\n\t\t\t\t_isLocal = false;\r\n\t\t}\r\n\t}\r\n\r\n\t_pluginRootDir = _nppPath;\r\n\tpathAppend(_pluginRootDir, TEXT(\"plugins\"));\r\n\r\n\t//\r\n\t// the 3rd priority: general default configuration\r\n\t//\r\n\tgeneric_string nppPluginRootParent;\r\n\tif (_isLocal)\r\n\t{\r\n\t\t_userPath = nppPluginRootParent = _nppPath;\r\n\t\t_userPluginConfDir = _pluginRootDir;\r\n\t\tpathAppend(_userPluginConfDir, TEXT(\"Config\"));\r\n\t}\r\n\telse\r\n\t{\r\n\t\t_userPath = getSpecialFolderLocation(CSIDL_APPDATA);\r\n\r\n\t\tpathAppend(_userPath, TEXT(\"Notepad++\"));\r\n\t\tif (!PathFileExists(_userPath.c_str()))\r\n\t\t\t::CreateDirectory(_userPath.c_str(), NULL);\r\n\r\n\t\t_appdataNppDir = _userPluginConfDir = _userPath;\r\n\t\tpathAppend(_userPluginConfDir, TEXT(\"plugins\"));\r\n\t\tif (!PathFileExists(_userPluginConfDir.c_str()))\r\n\t\t\t::CreateDirectory(_userPluginConfDir.c_str(), NULL);\r\n\t\tpathAppend(_userPluginConfDir, TEXT(\"Config\"));\r\n\t\tif (!PathFileExists(_userPluginConfDir.c_str()))\r\n\t\t\t::CreateDirectory(_userPluginConfDir.c_str(), NULL);\r\n\r\n\t\t// For PluginAdmin to launch the wingup with UAC\r\n\t\tsetElevationRequired(true);\r\n\t}\r\n\r\n\t_pluginConfDir = _pluginRootDir; // for plugin list home\r\n\tpathAppend(_pluginConfDir, TEXT(\"Config\"));\r\n\r\n\tif (!PathFileExists(nppPluginRootParent.c_str()))\r\n\t\t::CreateDirectory(nppPluginRootParent.c_str(), NULL);\r\n\tif (!PathFileExists(_pluginRootDir.c_str()))\r\n\t\t::CreateDirectory(_pluginRootDir.c_str(), NULL);\r\n\r\n\t_sessionPath = _userPath; // Session stock the absolute file path, it should never be on cloud\r\n\r\n\t// Detection cloud settings\r\n\tgeneric_string cloudChoicePath{_userPath};\r\n\tcloudChoicePath += TEXT(\"\\\\cloud\\\\choice\");\r\n\r\n\t//\r\n\t// the 2nd priority: cloud Choice Path\r\n\t//\r\n\tif (::PathFileExists(cloudChoicePath.c_str()))\r\n\t{\r\n\t\t// Read cloud choice\r\n\t\tstd::string cloudChoiceStr = getFileContent(cloudChoicePath.c_str());\r\n\t\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\t\tstd::wstring cloudChoiceStrW = wmc.char2wchar(cloudChoiceStr.c_str(), SC_CP_UTF8);\r\n\r\n\t\tif (!cloudChoiceStrW.empty() && ::PathFileExists(cloudChoiceStrW.c_str()))\r\n\t\t{\r\n\t\t\t_userPath = cloudChoiceStrW;\r\n\t\t\t_nppGUI._cloudPath = cloudChoiceStrW;\r\n\t\t\t_initialCloudChoice = _nppGUI._cloudPath;\r\n\t\t}\r\n\t}\r\n\r\n\t//\r\n\t// the 1st priority: custom settings dir via command line argument\r\n\t//\r\n\tif (!_cmdSettingsDir.empty())\r\n\t{\r\n\t\tif (!::PathIsDirectory(_cmdSettingsDir.c_str()))\r\n\t\t{\r\n\t\t\t// The following text is not translatable.\r\n\t\t\t// _pNativeLangSpeaker is initialized AFTER _userPath being dterminated because nativeLang.xml is from from _userPath.\r\n\t\t\tgeneric_string errMsg = TEXT(\"The given path\\r\");\r\n\t\t\terrMsg += _cmdSettingsDir;\r\n\t\t\terrMsg += TEXT(\"\\nvia command line \\\"-settingsDir=\\\" is not a valid directory.\\rThis argument will be ignored.\");\r\n\t\t\t::MessageBox(NULL, errMsg.c_str(), TEXT(\"Invalid directory\"), MB_OK);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t_userPath = _cmdSettingsDir;\r\n\t\t\t_sessionPath = _userPath; // reset session path\r\n\t\t}\r\n\t}\r\n\r\n\t//-------------------------------------//\r\n\t// Transparent function for w2k and xp //\r\n\t//-------------------------------------//\r\n\tHMODULE hUser32 = ::GetModuleHandle(TEXT(\"User32\"));\r\n\tif (hUser32)\r\n\t\t_transparentFuncAddr = (WNDPROC)::GetProcAddress(hUser32, \"SetLayeredWindowAttributes\");\r\n\r\n\t//---------------------------------------------//\r\n\t// Dlg theme texture function for xp and vista //\r\n\t//---------------------------------------------//\r\n\t_hUXTheme = ::LoadLibraryEx(TEXT(\"uxtheme.dll\"), nullptr, LOAD_LIBRARY_SEARCH_SYSTEM32);\r\n\tif (_hUXTheme)\r\n\t\t_enableThemeDialogTextureFuncAddr = (WNDPROC)::GetProcAddress(_hUXTheme, \"EnableThemeDialogTexture\");\r\n\r\n\t//--------------------------//\r\n\t// langs.xml : for per user //\r\n\t//--------------------------//\r\n\tgeneric_string langs_xml_path(_userPath);\r\n\tpathAppend(langs_xml_path, TEXT(\"langs.xml\"));\r\n\r\n\tBOOL doRecover = FALSE;\r\n\tif (::PathFileExists(langs_xml_path.c_str()))\r\n\t{\r\n\t\tWIN32_FILE_ATTRIBUTE_DATA attributes;\r\n\r\n\t\tif (GetFileAttributesEx(langs_xml_path.c_str(), GetFileExInfoStandard, &attributes) != 0)\r\n\t\t{\r\n\t\t\tif (attributes.nFileSizeLow == 0 && attributes.nFileSizeHigh == 0)\r\n\t\t\t{\r\n\t\t\t\tif (_pNativeLangSpeaker)\r\n\t\t\t\t{\r\n\t\t\t\t\tdoRecover = _pNativeLangSpeaker->messageBox(\"LoadLangsFailed\",\r\n\t\t\t\t\t\tNULL,\r\n\t\t\t\t\t\tTEXT(\"Load langs.xml failed!\\rDo you want to recover your langs.xml?\"),\r\n\t\t\t\t\t\tTEXT(\"Configurator\"),\r\n\t\t\t\t\t\tMB_YESNO);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tdoRecover = ::MessageBox(NULL, TEXT(\"Load langs.xml failed!\\rDo you want to recover your langs.xml?\"), TEXT(\"Configurator\"), MB_YESNO);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t\tdoRecover = true;\r\n\r\n\tif (doRecover)\r\n\t{\r\n\t\tgeneric_string srcLangsPath(_nppPath);\r\n\t\tpathAppend(srcLangsPath, TEXT(\"langs.model.xml\"));\r\n\t\t::CopyFile(srcLangsPath.c_str(), langs_xml_path.c_str(), FALSE);\r\n\t}\r\n\r\n\t_pXmlDoc = new TiXmlDocument(langs_xml_path);\r\n\r\n\r\n\tbool loadOkay = _pXmlDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tif (_pNativeLangSpeaker)\r\n\t\t{\r\n\t\t\t_pNativeLangSpeaker->messageBox(\"LoadLangsFailedFinal\",\r\n\t\t\t\tNULL,\r\n\t\t\t\tTEXT(\"Load langs.xml failed!\"),\r\n\t\t\t\tTEXT(\"Configurator\"),\r\n\t\t\t\tMB_OK);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t::MessageBox(NULL, TEXT(\"Load langs.xml failed!\"), TEXT(\"Configurator\"), MB_OK);\r\n\t\t}\r\n\r\n\t\tdelete _pXmlDoc;\r\n\t\t_pXmlDoc = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\telse\r\n\t\tgetLangKeywordsFromXmlTree();\r\n\r\n\t//---------------------------//\r\n\t// config.xml : for per user //\r\n\t//---------------------------//\r\n\tgeneric_string configPath(_userPath);\r\n\tpathAppend(configPath, TEXT(\"config.xml\"));\r\n\r\n\tgeneric_string srcConfigPath(_nppPath);\r\n\tpathAppend(srcConfigPath, TEXT(\"config.model.xml\"));\r\n\r\n\tif (!::PathFileExists(configPath.c_str()))\r\n\t\t::CopyFile(srcConfigPath.c_str(), configPath.c_str(), FALSE);\r\n\r\n\t_pXmlUserDoc = new TiXmlDocument(configPath);\r\n\tloadOkay = _pXmlUserDoc->LoadFile();\r\n\t\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tTiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));\r\n\t\t_pXmlUserDoc->LinkEndChild(decl);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tgetUserParametersFromXmlTree();\r\n\t}\r\n\r\n\t//----------------------------//\r\n\t// stylers.xml : for per user //\r\n\t//----------------------------//\r\n\r\n\t_stylerPath = _userPath;\r\n\tpathAppend(_stylerPath, TEXT(\"stylers.xml\"));\r\n\r\n\tif (!PathFileExists(_stylerPath.c_str()))\r\n\t{\r\n\t\tgeneric_string srcStylersPath(_nppPath);\r\n\t\tpathAppend(srcStylersPath, TEXT(\"stylers.model.xml\"));\r\n\r\n\t\t::CopyFile(srcStylersPath.c_str(), _stylerPath.c_str(), TRUE);\r\n\t}\r\n\r\n\tif (_nppGUI._themeName.empty() || (!PathFileExists(_nppGUI._themeName.c_str())))\r\n\t\t_nppGUI._themeName.assign(_stylerPath);\r\n\r\n\t_pXmlUserStylerDoc = new TiXmlDocument(_nppGUI._themeName.c_str());\r\n\r\n\tloadOkay = _pXmlUserStylerDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tif (_pNativeLangSpeaker)\r\n\t\t{\r\n\t\t\t_pNativeLangSpeaker->messageBox(\"LoadStylersFailed\",\r\n\t\t\t\tNULL,\r\n\t\t\t\tTEXT(\"Load \\\"$STR_REPLACE$\\\" failed!\"),\r\n\t\t\t\tTEXT(\"Load stylers.xml failed\"),\r\n\t\t\t\tMB_OK,\r\n\t\t\t\t0,\r\n\t\t\t\t_stylerPath.c_str());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t::MessageBox(NULL, _stylerPath.c_str(), TEXT(\"Load stylers.xml failed\"), MB_OK);\r\n\t\t}\r\n\t\tdelete _pXmlUserStylerDoc;\r\n\t\t_pXmlUserStylerDoc = NULL;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\telse\r\n\t\tgetUserStylersFromXmlTree();\r\n\r\n\t_themeSwitcher._stylesXmlPath = _stylerPath;\r\n\t// Firstly, add the default theme\r\n\t_themeSwitcher.addDefaultThemeFromXml(_stylerPath);\r\n\r\n\t//-----------------------------------//\r\n\t// userDefineLang.xml : for per user //\r\n\t//-----------------------------------//\r\n\t_userDefineLangsFolderPath = _userDefineLangPath = _userPath;\r\n\tpathAppend(_userDefineLangPath, TEXT(\"userDefineLang.xml\"));\r\n\tpathAppend(_userDefineLangsFolderPath, TEXT(\"userDefineLangs\"));\r\n\r\n\tstd::vector<generic_string> udlFiles;\r\n\tgetFilesInFolder(udlFiles, TEXT(\"*.xml\"), _userDefineLangsFolderPath);\r\n\r\n\t_pXmlUserLangDoc = new TiXmlDocument(_userDefineLangPath);\r\n\tloadOkay = _pXmlUserLangDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlUserLangDoc;\r\n\t\t_pXmlUserLangDoc = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tauto r = addUserDefineLangsFromXmlTree(_pXmlUserLangDoc);\r\n\t\tif (r.second - r.first > 0)\r\n\t\t\t_pXmlUserLangsDoc.push_back(UdlXmlFileState(_pXmlUserLangDoc, false, r));\r\n\t}\r\n\r\n\tfor (const auto& i : udlFiles)\r\n\t{\r\n\t\tauto udlDoc = new TiXmlDocument(i);\r\n\t\tloadOkay = udlDoc->LoadFile();\r\n\t\tif (!loadOkay)\r\n\t\t{\r\n\t\t\tdelete udlDoc;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tauto r = addUserDefineLangsFromXmlTree(udlDoc);\r\n\t\t\tif (r.second - r.first > 0)\r\n\t\t\t\t_pXmlUserLangsDoc.push_back(UdlXmlFileState(udlDoc, false, r));\r\n\t\t}\r\n\t}\r\n\r\n\t//----------------------------------------------//\r\n\t// nativeLang.xml : for per user\t\t\t\t//\r\n\t// In case of absence of user's nativeLang.xml, //\r\n\t// We'll look in the Notepad++ Dir.\t\t\t //\r\n\t//----------------------------------------------//\r\n\r\n\tgeneric_string nativeLangPath;\r\n\tnativeLangPath = _userPath;\r\n\tpathAppend(nativeLangPath, TEXT(\"nativeLang.xml\"));\r\n\r\n\t// LocalizationSwitcher should use always user path\r\n\t_localizationSwitcher._nativeLangPath = nativeLangPath;\r\n\r\n\tif (!_startWithLocFileName.empty()) // localization argument detected, use user wished localization\r\n\t{\r\n\t\t// overwrite nativeLangPath variable\r\n\t\tnativeLangPath = _nppPath;\r\n\t\tpathAppend(nativeLangPath, TEXT(\"localization\\\\\"));\r\n\t\tpathAppend(nativeLangPath, _startWithLocFileName);\r\n\t}\r\n\telse // use %appdata% location, or (if absence then) npp installed location\r\n\t{\r\n\t\tif (!PathFileExists(nativeLangPath.c_str()))\r\n\t\t{\r\n\t\t\tnativeLangPath = _nppPath;\r\n\t\t\tpathAppend(nativeLangPath, TEXT(\"nativeLang.xml\"));\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t_pXmlNativeLangDocA = new TiXmlDocumentA();\r\n\r\n\tloadOkay = _pXmlNativeLangDocA->LoadUnicodeFilePath(nativeLangPath.c_str());\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlNativeLangDocA;\r\n\t\t_pXmlNativeLangDocA = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\r\n\t//---------------------------------//\r\n\t// toolbarIcons.xml : for per user //\r\n\t//---------------------------------//\r\n\tgeneric_string toolbarIconsPath(_userPath);\r\n\tpathAppend(toolbarIconsPath, TEXT(\"toolbarIcons.xml\"));\r\n\r\n\t_pXmlToolIconsDoc = new TiXmlDocument(toolbarIconsPath);\r\n\tloadOkay = _pXmlToolIconsDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlToolIconsDoc;\r\n\t\t_pXmlToolIconsDoc = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\r\n\t//------------------------------//\r\n\t// shortcuts.xml : for per user //\r\n\t//------------------------------//\r\n\t_shortcutsPath = _userPath;\r\n\tpathAppend(_shortcutsPath, TEXT(\"shortcuts.xml\"));\r\n\r\n\tif (!PathFileExists(_shortcutsPath.c_str()))\r\n\t{\r\n\t\tgeneric_string srcShortcutsPath(_nppPath);\r\n\t\tpathAppend(srcShortcutsPath, TEXT(\"shortcuts.xml\"));\r\n\r\n\t\t::CopyFile(srcShortcutsPath.c_str(), _shortcutsPath.c_str(), TRUE);\r\n\t}\r\n\r\n\t_pXmlShortcutDoc = new TiXmlDocument(_shortcutsPath);\r\n\tloadOkay = _pXmlShortcutDoc->LoadFile();\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlShortcutDoc;\r\n\t\t_pXmlShortcutDoc = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tgetShortcutsFromXmlTree();\r\n\t\tgetMacrosFromXmlTree();\r\n\t\tgetUserCmdsFromXmlTree();\r\n\r\n\t\t// fill out _scintillaModifiedKeys :\r\n\t\t// those user defined Scintilla key will be used remap Scintilla Key Array\r\n\t\tgetScintKeysFromXmlTree();\r\n\t}\r\n\r\n\t//---------------------------------//\r\n\t// contextMenu.xml : for per user //\r\n\t//---------------------------------//\r\n\t_contextMenuPath = _userPath;\r\n\tpathAppend(_contextMenuPath, TEXT(\"contextMenu.xml\"));\r\n\r\n\tif (!PathFileExists(_contextMenuPath.c_str()))\r\n\t{\r\n\t\tgeneric_string srcContextMenuPath(_nppPath);\r\n\t\tpathAppend(srcContextMenuPath, TEXT(\"contextMenu.xml\"));\r\n\r\n\t\t::CopyFile(srcContextMenuPath.c_str(), _contextMenuPath.c_str(), TRUE);\r\n\t}\r\n\r\n\t_pXmlContextMenuDocA = new TiXmlDocumentA();\r\n\tloadOkay = _pXmlContextMenuDocA->LoadUnicodeFilePath(_contextMenuPath.c_str());\r\n\tif (!loadOkay)\r\n\t{\r\n\t\tdelete _pXmlContextMenuDocA;\r\n\t\t_pXmlContextMenuDocA = nullptr;\r\n\t\tisAllLaoded = false;\r\n\t}\r\n\r\n\t//----------------------------//\r\n\t// session.xml : for per user //\r\n\t//----------------------------//\r\n\r\n\tpathAppend(_sessionPath, TEXT(\"session.xml\"));\r\n\r\n\t// Don't load session.xml if not required in order to speed up!!\r\n\tconst NppGUI & nppGUI = (NppParameters::getInstance()).getNppGUI();\r\n\tif (nppGUI._rememberLastSession)\r\n\t{\r\n\t\tTiXmlDocument* pXmlSessionDoc = new TiXmlDocument(_sessionPath);\r\n\r\n\t\tloadOkay = pXmlSessionDoc->LoadFile();\r\n\t\tif (!loadOkay)\r\n\t\t\tisAllLaoded = false;\r\n\t\telse\r\n\t\t\tgetSessionFromXmlTree(pXmlSessionDoc, _session);\r\n\r\n\t\tdelete pXmlSessionDoc;\r\n\r\n\t\tfor (size_t i = 0, len = _pXmlExternalLexerDoc.size() ; i < len ; ++i)\r\n\t\t\tif (_pXmlExternalLexerDoc[i])\r\n\t\t\t\tdelete _pXmlExternalLexerDoc[i];\r\n\t}\r\n\r\n\t//-------------------------------------------------------------//\r\n\t// enableSelectFgColor.xml : for per user                      //\r\n\t// This empty xml file is optional - user adds this empty file //\r\n\t// manually in order to set selected text's foreground color.  //\r\n\t//-------------------------------------------------------------//\r\n\tgeneric_string enableSelectFgColorPath = _userPath;\r\n\tpathAppend(enableSelectFgColorPath, TEXT(\"enableSelectFgColor.xml\"));\r\n\r\n\tif (PathFileExists(enableSelectFgColorPath.c_str()))\r\n\t{\r\n\t\t_isSelectFgColorEnabled = true;\r\n\t}\r\n\r\n\r\n\tgeneric_string filePath, filePath2, issueFileName;\r\n\r\n\tfilePath = _nppPath;\r\n\tissueFileName = nppLogNetworkDriveIssue;\r\n\tissueFileName += TEXT(\".xml\");\r\n\tpathAppend(filePath, issueFileName);\r\n\t_doNppLogNetworkDriveIssue = (PathFileExists(filePath.c_str()) == TRUE);\r\n\tif (!_doNppLogNetworkDriveIssue)\r\n\t{\r\n\t\tfilePath2 = _userPath;\r\n\t\tpathAppend(filePath2, issueFileName);\r\n\t\t_doNppLogNetworkDriveIssue = (PathFileExists(filePath2.c_str()) == TRUE);\r\n\t}\r\n\r\n\tfilePath = _nppPath;\r\n\tissueFileName = nppLogNulContentCorruptionIssue;\r\n\tissueFileName += TEXT(\".xml\");\r\n\tpathAppend(filePath, issueFileName);\r\n\t_doNppLogNulContentCorruptionIssue = (PathFileExists(filePath.c_str()) == TRUE);\r\n\tif (!_doNppLogNulContentCorruptionIssue)\r\n\t{\r\n\t\tfilePath2 = _userPath;\r\n\t\tpathAppend(filePath2, issueFileName);\r\n\t\t_doNppLogNulContentCorruptionIssue = (PathFileExists(filePath2.c_str()) == TRUE);\r\n\t}\r\n\r\n\r\n\r\n\r\n\treturn isAllLaoded;\r\n}\r\n\r\n\r\nvoid NppParameters::destroyInstance()\r\n{\r\n\tdelete _pXmlDoc;\r\n\tdelete _pXmlUserDoc;\r\n\tdelete _pXmlUserStylerDoc;\r\n\t\r\n\t//delete _pXmlUserLangDoc; will be deleted in the vector\r\n\tfor (auto l : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tdelete l._udlXmlDoc;\r\n\t}\r\n\r\n\tdelete _pXmlNativeLangDocA;\r\n\tdelete _pXmlToolIconsDoc;\r\n\tdelete _pXmlShortcutDoc;\r\n\tdelete _pXmlContextMenuDocA;\r\n\tdelete _pXmlBlacklistDoc;\r\n\tdelete \tgetInstancePointer();\r\n}\r\n\r\n\r\nvoid NppParameters::saveConfig_xml()\r\n{\r\n\tif (_pXmlUserDoc)\r\n\t\t_pXmlUserDoc->SaveFile();\r\n}\r\n\r\n\r\nvoid NppParameters::setWorkSpaceFilePath(int i, const TCHAR* wsFile)\r\n{\r\n\tif (i < 0 || i > 2 || !wsFile)\r\n\t\treturn;\r\n\t_workSpaceFilePathes[i] = wsFile;\r\n}\r\n\r\n\r\nvoid NppParameters::removeTransparent(HWND hwnd)\r\n{\r\n\tif (hwnd != NULL)\r\n\t\t::SetWindowLongPtr(hwnd, GWL_EXSTYLE,  ::GetWindowLongPtr(hwnd, GWL_EXSTYLE) & ~0x00080000);\r\n}\r\n\r\n\r\nvoid NppParameters::SetTransparent(HWND hwnd, int percent)\r\n{\r\n\tif (nullptr != _transparentFuncAddr)\r\n\t{\r\n\t\t::SetWindowLongPtr(hwnd, GWL_EXSTYLE, ::GetWindowLongPtr(hwnd, GWL_EXSTYLE) | 0x00080000);\r\n\t\tif (percent > 255)\r\n\t\t\tpercent = 255;\r\n\t\tif (percent < 0)\r\n\t\t\tpercent = 0;\r\n\t\t_transparentFuncAddr(hwnd, 0, percent, 0x00000002);\r\n\t}\r\n}\r\n\r\n\r\nbool NppParameters::isExistingExternalLangName(const char* newName) const\r\n{\r\n\tif ((!newName) || (!newName[0]))\r\n\t\treturn true;\r\n\r\n\tfor (int i = 0 ; i < _nbExternalLang ; ++i)\r\n\t{\r\n\t\tif (_externalLangArray[i]->_name == newName)\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\n\r\nconst TCHAR* NppParameters::getUserDefinedLangNameFromExt(TCHAR *ext, TCHAR *fullName) const\r\n{\r\n\tif ((!ext) || (!ext[0]))\r\n\t\treturn nullptr;\r\n\r\n\tstd::vector<generic_string> extVect;\r\n\tint iMatched = -1;\r\n\tfor (int i = 0 ; i < _nbUserLang ; ++i)\r\n\t{\r\n\t\textVect.clear();\r\n\t\tcutString(_userLangArray[i]->_ext.c_str(), extVect);\r\n\r\n\t\t// Force to use dark mode UDL in dark mode or to use  light mode UDL in light mode\r\n\t\tfor (size_t j = 0, len = extVect.size(); j < len; ++j)\r\n\t\t{\r\n\t\t\tif (!generic_stricmp(extVect[j].c_str(), ext) || (_tcschr(fullName, '.') && !generic_stricmp(extVect[j].c_str(), fullName)))\r\n\t\t\t{\r\n\t\t\t\t// preserve ext matched UDL\r\n\t\t\t\tiMatched = i;\r\n\r\n\t\t\t\tif (((NppDarkMode::isEnabled() && _userLangArray[i]->_isDarkModeTheme)) ||\r\n\t\t\t\t\t((!NppDarkMode::isEnabled() && !_userLangArray[i]->_isDarkModeTheme)))\r\n\t\t\t\t\treturn _userLangArray[i]->_name.c_str();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// In case that we are in dark mode but no dark UDL or we are in light mode but no light UDL\r\n\t// We use it anyway\r\n\tif (iMatched >= 0)\r\n\t{\r\n\t\treturn _userLangArray[iMatched]->_name.c_str();\r\n\t}\r\n\r\n\treturn nullptr;\r\n}\r\n\r\n\r\nint NppParameters::getExternalLangIndexFromName(const TCHAR* externalLangName) const\r\n{\r\n\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\tfor (int i = 0 ; i < _nbExternalLang ; ++i)\r\n\t{\r\n\t\tif (!lstrcmp(externalLangName, wmc.char2wchar(_externalLangArray[i]->_name.c_str(), CP_ACP)))\r\n\t\t\treturn i;\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\n\r\nUserLangContainer* NppParameters::getULCFromName(const TCHAR *userLangName)\r\n{\r\n\tfor (int i = 0 ; i < _nbUserLang ; ++i)\r\n\t{\r\n\t\tif (0 == lstrcmp(userLangName, _userLangArray[i]->_name.c_str()))\r\n\t\t\treturn _userLangArray[i];\r\n\t}\r\n\r\n\t//qui doit etre jamais passer\r\n\treturn nullptr;\r\n}\r\n\r\n\r\nCOLORREF NppParameters::getCurLineHilitingColour()\r\n{\r\n\tconst Style * pStyle = _widgetStyleArray.findByName(TEXT(\"Current line background colour\"));\r\n\tif (!pStyle)\r\n\t\treturn COLORREF(-1);\r\n\treturn pStyle->_bgColor;\r\n}\r\n\r\n\r\nvoid NppParameters::setCurLineHilitingColour(COLORREF colour2Set)\r\n{\r\n\tStyle * pStyle = _widgetStyleArray.findByName(TEXT(\"Current line background colour\"));\r\n\tif (!pStyle)\r\n\t\treturn;\r\n\tpStyle->_bgColor = colour2Set;\r\n}\r\n\r\n\r\n\r\nstatic int CALLBACK EnumFontFamExProc(const LOGFONT* lpelfe, const TEXTMETRIC*, DWORD, LPARAM lParam)\r\n{\r\n\tstd::vector<generic_string>& strVect = *(std::vector<generic_string> *)lParam;\r\n\tconst int32_t vectSize = static_cast<int32_t>(strVect.size());\r\n\tconst TCHAR* lfFaceName = ((ENUMLOGFONTEX*)lpelfe)->elfLogFont.lfFaceName;\r\n\r\n\t//Search through all the fonts, EnumFontFamiliesEx never states anything about order\r\n\t//Start at the end though, that's the most likely place to find a duplicate\r\n\tfor (int i = vectSize - 1 ; i >= 0 ; i--)\r\n\t{\r\n\t\tif (0 == lstrcmp(strVect[i].c_str(), lfFaceName))\r\n\t\t\treturn 1;\t//we already have seen this typeface, ignore it\r\n\t}\r\n\r\n\t//We can add the font\r\n\t//Add the face name and not the full name, we do not care about any styles\r\n\tstrVect.push_back(lfFaceName);\r\n\treturn 1; // I want to get all fonts\r\n}\r\n\r\n\r\nvoid NppParameters::setFontList(HWND hWnd)\r\n{\r\n\t//---------------//\r\n\t// Sys font list //\r\n\t//---------------//\r\n\tLOGFONT lf;\r\n\t_fontlist.clear();\r\n\t_fontlist.reserve(64); // arbitrary\r\n\t_fontlist.push_back(generic_string());\r\n\r\n\tlf.lfCharSet = DEFAULT_CHARSET;\r\n\tlf.lfFaceName[0]='\\0';\r\n\tlf.lfPitchAndFamily = 0;\r\n\tHDC hDC = ::GetDC(hWnd);\r\n\t::EnumFontFamiliesEx(hDC, &lf, EnumFontFamExProc, reinterpret_cast<LPARAM>(&_fontlist), 0);\r\n}\r\n\r\nbool NppParameters::isInFontList(const generic_string& fontName2Search) const\r\n{\r\n\tif (fontName2Search.empty())\r\n\t\treturn false;\r\n\r\n\tfor (size_t i = 0, len = _fontlist.size(); i < len; i++)\r\n\t{\r\n\t\tif (_fontlist[i] == fontName2Search)\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nHFONT NppParameters::getDefaultUIFont()\r\n{\r\n\tstatic HFONT g_defaultMessageFont = []() {\r\n\t\tNONCLIENTMETRICS ncm = { sizeof(ncm) };\r\n\t\tSystemParametersInfo(SPI_GETNONCLIENTMETRICS, sizeof(ncm), &ncm, 0);\r\n\r\n\t\treturn CreateFontIndirect(&ncm.lfMessageFont);\r\n\t}();\r\n\treturn g_defaultMessageFont;\r\n}\r\n\r\nvoid NppParameters::getLangKeywordsFromXmlTree()\r\n{\r\n\tTiXmlNode *root =\r\n\t\t_pXmlDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\tif (!root) return;\r\n\tfeedKeyWordsParameters(root);\r\n}\r\n\r\n\r\nvoid NppParameters::getExternalLexerFromXmlTree(TiXmlDocument* externalLexerDoc)\r\n{\r\n\tTiXmlNode *root = externalLexerDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\tif (!root) return;\r\n\tfeedKeyWordsParameters(root);\r\n\tfeedStylerArray(root);\r\n}\r\n\r\n\r\nint NppParameters::addExternalLangToEnd(ExternalLangContainer * externalLang)\r\n{\r\n\t_externalLangArray[_nbExternalLang] = externalLang;\r\n\t++_nbExternalLang;\r\n\t++L_END;\r\n\treturn _nbExternalLang-1;\r\n}\r\n\r\n\r\nbool NppParameters::getUserStylersFromXmlTree()\r\n{\r\n\tTiXmlNode *root = _pXmlUserStylerDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\tif (!root) return false;\r\n\treturn feedStylerArray(root);\r\n}\r\n\r\n\r\nbool NppParameters::getUserParametersFromXmlTree()\r\n{\r\n\tif (!_pXmlUserDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\t// Get GUI parameters\r\n\tfeedGUIParameters(root);\r\n\r\n\t// Get History parameters\r\n\tfeedFileListParameters(root);\r\n\r\n\t// Erase the History root\r\n\tTiXmlNode *node = root->FirstChildElement(TEXT(\"History\"));\r\n\troot->RemoveChild(node);\r\n\r\n\t// Add a new empty History root\r\n\tTiXmlElement HistoryNode(TEXT(\"History\"));\r\n\troot->InsertEndChild(HistoryNode);\r\n\r\n\t//Get Find history parameters\r\n\tfeedFindHistoryParameters(root);\r\n\r\n\t//Get Project Panel parameters\r\n\tfeedProjectPanelsParameters(root);\r\n\r\n\t//Get File browser parameters\r\n\tfeedFileBrowserParameters(root);\r\n\r\n\treturn true;\r\n}\r\n\r\n\r\nstd::pair<unsigned char, unsigned char> NppParameters::addUserDefineLangsFromXmlTree(TiXmlDocument *tixmldoc)\r\n{\r\n\tif (!tixmldoc)\r\n\t\treturn std::make_pair(static_cast<unsigned char>(0), static_cast<unsigned char>(0));\r\n\r\n\tTiXmlNode *root = tixmldoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn std::make_pair(static_cast<unsigned char>(0), static_cast<unsigned char>(0));\r\n\r\n\treturn feedUserLang(root);\r\n}\r\n\r\n\r\n\r\nbool NppParameters::getShortcutsFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedShortcut(root);\r\n\treturn true;\r\n}\r\n\r\n\r\nbool NppParameters::getMacrosFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedMacros(root);\r\n\treturn true;\r\n}\r\n\r\n\r\nbool NppParameters::getUserCmdsFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedUserCmds(root);\r\n\treturn true;\r\n}\r\n\r\n\r\nbool NppParameters::getPluginCmdsFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedPluginCustomizedCmds(root);\r\n\treturn true;\r\n}\r\n\r\n\r\nbool NppParameters::getScintKeysFromXmlTree()\r\n{\r\n\tif (!_pXmlShortcutDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tfeedScintKeys(root);\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::getBlackListFromXmlTree()\r\n{\r\n\tif (!_pXmlBlacklistDoc)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *root = _pXmlBlacklistDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\treturn feedBlacklist(root);\r\n}\r\n\r\nvoid NppParameters::initMenuKeys()\r\n{\r\n\tint nbCommands = sizeof(winKeyDefs)/sizeof(WinMenuKeyDefinition);\r\n\tWinMenuKeyDefinition wkd;\r\n\tfor (int i = 0; i < nbCommands; ++i)\r\n\t{\r\n\t\twkd = winKeyDefs[i];\r\n\t\tShortcut sc((wkd.specialName ? wkd.specialName : TEXT(\"\")), wkd.isCtrl, wkd.isAlt, wkd.isShift, static_cast<unsigned char>(wkd.vKey));\r\n\t\t_shortcuts.push_back( CommandShortcut(sc, wkd.functionId) );\r\n\t}\r\n}\r\n\r\nvoid NppParameters::initScintillaKeys()\r\n{\r\n\tint nbCommands = sizeof(scintKeyDefs)/sizeof(ScintillaKeyDefinition);\r\n\r\n\t//Warning! Matching function have to be consecutive\r\n\tScintillaKeyDefinition skd;\r\n\tint prevIndex = -1;\r\n\tint prevID = -1;\r\n\tfor (int i = 0; i < nbCommands; ++i)\r\n\t{\r\n\t\tskd = scintKeyDefs[i];\r\n\t\tif (skd.functionId == prevID)\r\n\t\t{\r\n\t\t\tKeyCombo kc;\r\n\t\t\tkc._isCtrl = skd.isCtrl;\r\n\t\t\tkc._isAlt = skd.isAlt;\r\n\t\t\tkc._isShift = skd.isShift;\r\n\t\t\tkc._key = static_cast<unsigned char>(skd.vKey);\r\n\t\t\t_scintillaKeyCommands[prevIndex].addKeyCombo(kc);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tShortcut s = Shortcut(skd.name, skd.isCtrl, skd.isAlt, skd.isShift, static_cast<unsigned char>(skd.vKey));\r\n\t\t\tScintillaKeyMap sm = ScintillaKeyMap(s, skd.functionId, skd.redirFunctionId);\r\n\t\t\t_scintillaKeyCommands.push_back(sm);\r\n\t\t\t++prevIndex;\r\n\t\t}\r\n\t\tprevID = skd.functionId;\r\n\t}\r\n}\r\nbool NppParameters::reloadContextMenuFromXmlTree(HMENU mainMenuHadle, HMENU pluginsMenu)\r\n{\r\n\t_contextMenuItems.clear();\r\n\treturn getContextMenuFromXmlTree(mainMenuHadle, pluginsMenu);\r\n}\r\n\r\nint NppParameters::getCmdIdFromMenuEntryItemName(HMENU mainMenuHadle, const generic_string& menuEntryName, const generic_string& menuItemName)\r\n{\r\n\tint nbMenuEntry = ::GetMenuItemCount(mainMenuHadle);\r\n\tfor (int i = 0; i < nbMenuEntry; ++i)\r\n\t{\r\n\t\tTCHAR menuEntryString[64];\r\n\t\t::GetMenuString(mainMenuHadle, i, menuEntryString, 64, MF_BYPOSITION);\r\n\t\tif (generic_stricmp(menuEntryName.c_str(), purgeMenuItemString(menuEntryString).c_str()) == 0)\r\n\t\t{\r\n\t\t\tvector< pair<HMENU, int> > parentMenuPos;\r\n\t\t\tHMENU topMenu = ::GetSubMenu(mainMenuHadle, i);\r\n\t\t\tint maxTopMenuPos = ::GetMenuItemCount(topMenu);\r\n\t\t\tHMENU currMenu = topMenu;\r\n\t\t\tint currMaxMenuPos = maxTopMenuPos;\r\n\r\n\t\t\tint currMenuPos = 0;\r\n\t\t\tbool notFound = false;\r\n\r\n\t\t\tdo {\r\n\t\t\t\tif (::GetSubMenu(currMenu, currMenuPos))\r\n\t\t\t\t{\r\n\t\t\t\t\t//  Go into sub menu\r\n\t\t\t\t\tparentMenuPos.push_back(::make_pair(currMenu, currMenuPos));\r\n\t\t\t\t\tcurrMenu = ::GetSubMenu(currMenu, currMenuPos);\r\n\t\t\t\t\tcurrMenuPos = 0;\r\n\t\t\t\t\tcurrMaxMenuPos = ::GetMenuItemCount(currMenu);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t//  Check current menu position.\r\n\t\t\t\t\tTCHAR cmdStr[256];\r\n\t\t\t\t\t::GetMenuString(currMenu, currMenuPos, cmdStr, 256, MF_BYPOSITION);\r\n\t\t\t\t\tif (generic_stricmp(menuItemName.c_str(), purgeMenuItemString(cmdStr).c_str()) == 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn ::GetMenuItemID(currMenu, currMenuPos);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((currMenuPos >= currMaxMenuPos) && (parentMenuPos.size() > 0))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcurrMenu = parentMenuPos.back().first;\r\n\t\t\t\t\t\tcurrMenuPos = parentMenuPos.back().second;\r\n\t\t\t\t\t\tparentMenuPos.pop_back();\r\n\t\t\t\t\t\tcurrMaxMenuPos = ::GetMenuItemCount(currMenu);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ((currMenu == topMenu) && (currMenuPos >= maxTopMenuPos))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnotFound = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t++currMenuPos;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} while (!notFound);\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nint NppParameters::getPluginCmdIdFromMenuEntryItemName(HMENU pluginsMenu, const generic_string& pluginName, const generic_string& pluginCmdName)\r\n{\r\n\tint nbPlugins = ::GetMenuItemCount(pluginsMenu);\r\n\tfor (int i = 0; i < nbPlugins; ++i)\r\n\t{\r\n\t\tTCHAR menuItemString[256];\r\n\t\t::GetMenuString(pluginsMenu, i, menuItemString, 256, MF_BYPOSITION);\r\n\t\tif (generic_stricmp(pluginName.c_str(), purgeMenuItemString(menuItemString).c_str()) == 0)\r\n\t\t{\r\n\t\t\tHMENU pluginMenu = ::GetSubMenu(pluginsMenu, i);\r\n\t\t\tint nbPluginCmd = ::GetMenuItemCount(pluginMenu);\r\n\t\t\tfor (int j = 0; j < nbPluginCmd; ++j)\r\n\t\t\t{\r\n\t\t\t\tTCHAR pluginCmdStr[256];\r\n\t\t\t\t::GetMenuString(pluginMenu, j, pluginCmdStr, 256, MF_BYPOSITION);\r\n\t\t\t\tif (generic_stricmp(pluginCmdName.c_str(), purgeMenuItemString(pluginCmdStr).c_str()) == 0)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn ::GetMenuItemID(pluginMenu, j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nbool NppParameters::getContextMenuFromXmlTree(HMENU mainMenuHadle, HMENU pluginsMenu)\r\n{\r\n\tif (!_pXmlContextMenuDocA)\r\n\t\treturn false;\r\n\tTiXmlNodeA *root = _pXmlContextMenuDocA->FirstChild(\"NotepadPlus\");\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\tNativeLangSpeaker* pNativeSpeaker = (NppParameters::getInstance()).getNativeLangSpeaker();\r\n\r\n\tTiXmlNodeA *contextMenuRoot = root->FirstChildElement(\"ScintillaContextMenu\");\r\n\tif (contextMenuRoot)\r\n\t{\r\n\t\tfor (TiXmlNodeA *childNode = contextMenuRoot->FirstChildElement(\"Item\");\r\n\t\t\tchildNode ;\r\n\t\t\tchildNode = childNode->NextSibling(\"Item\") )\r\n\t\t{\r\n\t\t\tconst char *folderNameDefaultA = (childNode->ToElement())->Attribute(\"FolderName\");\r\n\t\t\tconst char *folderNameTranslateID_A = (childNode->ToElement())->Attribute(\"TranslateID\");\r\n\t\t\tconst char *displayAsA = (childNode->ToElement())->Attribute(\"ItemNameAs\");\r\n\r\n\t\t\tgeneric_string folderName;\r\n\t\t\tgeneric_string displayAs;\r\n\t\t\tfolderName = folderNameDefaultA ? wmc.char2wchar(folderNameDefaultA, SC_CP_UTF8) : TEXT(\"\");\r\n\t\t\tdisplayAs = displayAsA ? wmc.char2wchar(displayAsA, SC_CP_UTF8) : TEXT(\"\");\r\n\r\n\t\t\tif (folderNameTranslateID_A)\r\n\t\t\t{\r\n\t\t\t\tfolderName = pNativeSpeaker->getLocalizedStrFromID(folderNameTranslateID_A, folderName);\r\n\t\t\t}\r\n\r\n\t\t\tint id;\r\n\t\t\tconst char *idStr = (childNode->ToElement())->Attribute(\"id\", &id);\r\n\t\t\tif (idStr)\r\n\t\t\t{\r\n\t\t\t\t_contextMenuItems.push_back(MenuItemUnit(id, displayAs.c_str(), folderName.c_str()));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst char *menuEntryNameA = (childNode->ToElement())->Attribute(\"MenuEntryName\");\r\n\t\t\t\tconst char *menuItemNameA = (childNode->ToElement())->Attribute(\"MenuItemName\");\r\n\r\n\t\t\t\tgeneric_string menuEntryName;\r\n\t\t\t\tgeneric_string menuItemName;\r\n\t\t\t\tmenuEntryName = menuEntryNameA?wmc.char2wchar(menuEntryNameA, SC_CP_UTF8):TEXT(\"\");\r\n\t\t\t\tmenuItemName = menuItemNameA?wmc.char2wchar(menuItemNameA, SC_CP_UTF8):TEXT(\"\");\r\n\r\n\t\t\t\tif (!menuEntryName.empty() && !menuItemName.empty())\r\n\t\t\t\t{\r\n\t\t\t\t\tint cmd = getCmdIdFromMenuEntryItemName(mainMenuHadle, menuEntryName, menuItemName);\r\n\t\t\t\t\tif (cmd != -1)\r\n\t\t\t\t\t\t_contextMenuItems.push_back(MenuItemUnit(cmd, displayAs.c_str(), folderName.c_str()));\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tconst char *pluginNameA = (childNode->ToElement())->Attribute(\"PluginEntryName\");\r\n\t\t\t\t\tconst char *pluginCmdNameA = (childNode->ToElement())->Attribute(\"PluginCommandItemName\");\r\n\r\n\t\t\t\t\tgeneric_string pluginName;\r\n\t\t\t\t\tgeneric_string pluginCmdName;\r\n\t\t\t\t\tpluginName = pluginNameA?wmc.char2wchar(pluginNameA, SC_CP_UTF8):TEXT(\"\");\r\n\t\t\t\t\tpluginCmdName = pluginCmdNameA?wmc.char2wchar(pluginCmdNameA, SC_CP_UTF8):TEXT(\"\");\r\n\r\n\t\t\t\t\t// if plugin menu existing plls the value of PluginEntryName and PluginCommandItemName are valid\r\n\t\t\t\t\tif (pluginsMenu && !pluginName.empty() && !pluginCmdName.empty())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tint pluginCmdId = getPluginCmdIdFromMenuEntryItemName(pluginsMenu, pluginName, pluginCmdName);\r\n\t\t\t\t\t\tif (pluginCmdId != -1)\r\n\t\t\t\t\t\t\t_contextMenuItems.push_back(MenuItemUnit(pluginCmdId, displayAs.c_str(), folderName.c_str()));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\n\r\nvoid NppParameters::setWorkingDir(const TCHAR * newPath)\r\n{\r\n\tif (newPath && newPath[0])\r\n\t{\r\n\t\t_currentDirectory = newPath;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (PathFileExists(_nppGUI._defaultDirExp))\r\n\t\t\t_currentDirectory = _nppGUI._defaultDirExp;\r\n\t\telse\r\n\t\t\t_currentDirectory = _nppPath.c_str();\r\n\t}\r\n}\r\n\r\nbool NppParameters::loadSession(Session & session, const TCHAR *sessionFileName)\r\n{\r\n\tTiXmlDocument *pXmlSessionDocument = new TiXmlDocument(sessionFileName);\r\n\tbool loadOkay = pXmlSessionDocument->LoadFile();\r\n\tif (loadOkay)\r\n\t\tloadOkay = getSessionFromXmlTree(pXmlSessionDocument, session);\r\n\r\n\tdelete pXmlSessionDocument;\r\n\treturn loadOkay;\r\n}\r\n\r\n\r\nbool NppParameters::getSessionFromXmlTree(TiXmlDocument *pSessionDoc, Session& session)\r\n{\r\n\tif (!pSessionDoc)\r\n\t\treturn false;\r\n\t\r\n\tTiXmlNode *root = pSessionDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t\treturn false;\r\n\r\n\tTiXmlNode *sessionRoot = root->FirstChildElement(TEXT(\"Session\"));\r\n\tif (!sessionRoot)\r\n\t\treturn false;\r\n\r\n\tTiXmlElement *actView = sessionRoot->ToElement();\r\n\tint index = 0;\r\n\tconst TCHAR *str = actView->Attribute(TEXT(\"activeView\"), &index);\r\n\tif (str)\r\n\t{\r\n\t\tsession._activeView = index;\r\n\t}\r\n\r\n\tconst size_t nbView = 2;\r\n\tTiXmlNode *viewRoots[nbView];\r\n\tviewRoots[0] = sessionRoot->FirstChildElement(TEXT(\"mainView\"));\r\n\tviewRoots[1] = sessionRoot->FirstChildElement(TEXT(\"subView\"));\r\n\tfor (size_t k = 0; k < nbView; ++k)\r\n\t{\r\n\t\tif (viewRoots[k])\r\n\t\t{\r\n\t\t\tint index2 = 0;\r\n\t\t\tTiXmlElement *actIndex = viewRoots[k]->ToElement();\r\n\t\t\tstr = actIndex->Attribute(TEXT(\"activeIndex\"), &index2);\r\n\t\t\tif (str)\r\n\t\t\t{\r\n\t\t\t\tif (k == 0)\r\n\t\t\t\t\tsession._activeMainIndex = index2;\r\n\t\t\t\telse // k == 1\r\n\t\t\t\t\tsession._activeSubIndex = index2;\r\n\t\t\t}\r\n\t\t\tfor (TiXmlNode *childNode = viewRoots[k]->FirstChildElement(TEXT(\"File\"));\r\n\t\t\t\tchildNode ;\r\n\t\t\t\tchildNode = childNode->NextSibling(TEXT(\"File\")) )\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR *fileName = (childNode->ToElement())->Attribute(TEXT(\"filename\"));\r\n\t\t\t\tif (fileName)\r\n\t\t\t\t{\r\n\t\t\t\t\tPosition position;\r\n\t\t\t\t\tconst TCHAR* posStr = (childNode->ToElement())->Attribute(TEXT(\"firstVisibleLine\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._firstVisibleLine = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"xOffset\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._xOffset = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"startPos\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._startPos = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"endPos\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._endPos = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"selMode\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._selMode = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"scrollWidth\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._scrollWidth = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"offset\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._offset = static_cast<intptr_t>(_ttoi64(posStr));\r\n\t\t\t\t\tposStr = (childNode->ToElement())->Attribute(TEXT(\"wrapCount\"));\r\n\t\t\t\t\tif (posStr)\r\n\t\t\t\t\t\tposition._wrapCount = static_cast<intptr_t>(_ttoi64(posStr));\r\n\r\n\t\t\t\t\tMapPosition mapPosition;\r\n\t\t\t\t\tconst TCHAR* mapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapFirstVisibleDisplayLine\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._firstVisibleDisplayLine = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapFirstVisibleDocLine\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._firstVisibleDocLine = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapLastVisibleDocLine\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._lastVisibleDocLine = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapNbLine\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._nbLine = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapHigherPos\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._higherPos = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapWidth\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._width = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapHeight\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._height = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapKByteInDoc\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._KByteInDoc = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tmapPosStr = (childNode->ToElement())->Attribute(TEXT(\"mapWrapIndentMode\"));\r\n\t\t\t\t\tif (mapPosStr)\r\n\t\t\t\t\t\tmapPosition._wrapIndentMode = static_cast<intptr_t>(_ttoi64(mapPosStr));\r\n\t\t\t\t\tconst TCHAR *boolStr = (childNode->ToElement())->Attribute(TEXT(\"mapIsWrap\"));\r\n\t\t\t\t\tif (boolStr)\r\n\t\t\t\t\t\tmapPosition._isWrap = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\t\t\t\t\tconst TCHAR *langName;\r\n\t\t\t\t\tlangName = (childNode->ToElement())->Attribute(TEXT(\"lang\"));\r\n\t\t\t\t\tint encoding = -1;\r\n\t\t\t\t\tconst TCHAR *encStr = (childNode->ToElement())->Attribute(TEXT(\"encoding\"), &encoding);\r\n\t\t\t\t\tconst TCHAR *backupFilePath = (childNode->ToElement())->Attribute(TEXT(\"backupFilePath\"));\r\n\r\n\t\t\t\t\tFILETIME fileModifiedTimestamp;\r\n\t\t\t\t\t(childNode->ToElement())->Attribute(TEXT(\"originalFileLastModifTimestamp\"), reinterpret_cast<int32_t*>(&fileModifiedTimestamp.dwLowDateTime));\r\n\t\t\t\t\t(childNode->ToElement())->Attribute(TEXT(\"originalFileLastModifTimestampHigh\"), reinterpret_cast<int32_t*>(&fileModifiedTimestamp.dwHighDateTime));\r\n\r\n\t\t\t\t\tbool isUserReadOnly = false;\r\n\t\t\t\t\tconst TCHAR *boolStrReadOnly = (childNode->ToElement())->Attribute(TEXT(\"userReadOnly\"));\r\n\t\t\t\t\tif (boolStrReadOnly)\r\n\t\t\t\t\t\tisUserReadOnly = _wcsicmp(TEXT(\"yes\"), boolStrReadOnly) == 0;\r\n\r\n\t\t\t\t\tsessionFileInfo sfi(fileName, langName, encStr ? encoding : -1, isUserReadOnly, position, backupFilePath, fileModifiedTimestamp, mapPosition);\r\n\r\n\t\t\t\t\tfor (TiXmlNode *markNode = childNode->FirstChildElement(TEXT(\"Mark\"));\r\n\t\t\t\t\t\tmarkNode;\r\n\t\t\t\t\t\tmarkNode = markNode->NextSibling(TEXT(\"Mark\")))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst TCHAR* lineNumberStr = (markNode->ToElement())->Attribute(TEXT(\"line\"));\r\n\t\t\t\t\t\tif (lineNumberStr)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsfi._marks.push_back(static_cast<size_t>(_ttoi64(lineNumberStr)));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (TiXmlNode *foldNode = childNode->FirstChildElement(TEXT(\"Fold\"));\r\n\t\t\t\t\t\tfoldNode;\r\n\t\t\t\t\t\tfoldNode = foldNode->NextSibling(TEXT(\"Fold\")))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst TCHAR *lineNumberStr = (foldNode->ToElement())->Attribute(TEXT(\"line\"));\r\n\t\t\t\t\t\tif (lineNumberStr)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tsfi._foldStates.push_back(static_cast<size_t>(_ttoi64(lineNumberStr)));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (k == 0)\r\n\t\t\t\t\t\tsession._mainViewFiles.push_back(sfi);\r\n\t\t\t\t\telse // k == 1\r\n\t\t\t\t\t\tsession._subViewFiles.push_back(sfi);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Node structure and naming corresponds to config.xml\r\n\tTiXmlNode *fileBrowserRoot = sessionRoot->FirstChildElement(TEXT(\"FileBrowser\"));\r\n\tif (fileBrowserRoot)\r\n\t{\r\n\t\tconst TCHAR *selectedItemPath = (fileBrowserRoot->ToElement())->Attribute(TEXT(\"latestSelectedItem\"));\r\n\t\tif (selectedItemPath)\r\n\t\t{\r\n\t\t\tsession._fileBrowserSelectedItem = selectedItemPath;\r\n\t\t}\r\n\r\n\t\tfor (TiXmlNode *childNode = fileBrowserRoot->FirstChildElement(TEXT(\"root\"));\r\n\t\t\tchildNode;\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"root\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *fileName = (childNode->ToElement())->Attribute(TEXT(\"foldername\"));\r\n\t\t\tif (fileName)\r\n\t\t\t{\r\n\t\t\t\tsession._fileBrowserRoots.push_back({ fileName });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nvoid NppParameters::feedFileListParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *historyRoot = node->FirstChildElement(TEXT(\"History\"));\r\n\tif (!historyRoot) return;\r\n\r\n\t// nbMaxFile value\r\n\tint nbMaxFile;\r\n\tconst TCHAR *strVal = (historyRoot->ToElement())->Attribute(TEXT(\"nbMaxFile\"), &nbMaxFile);\r\n\tif (strVal && (nbMaxFile >= 0) && (nbMaxFile <= 50))\r\n\t\t_nbMaxRecentFile = nbMaxFile;\r\n\r\n\t// customLen value\r\n\tint customLen;\r\n\tstrVal = (historyRoot->ToElement())->Attribute(TEXT(\"customLength\"), &customLen);\r\n\tif (strVal)\r\n\t\t_recentFileCustomLength = customLen;\r\n\r\n\t// inSubMenu value\r\n\tstrVal = (historyRoot->ToElement())->Attribute(TEXT(\"inSubMenu\"));\r\n\tif (strVal)\r\n\t\t_putRecentFileInSubMenu = (lstrcmp(strVal, TEXT(\"yes\")) == 0);\r\n\r\n\tfor (TiXmlNode *childNode = historyRoot->FirstChildElement(TEXT(\"File\"));\r\n\t\tchildNode && (_nbRecentFile < NB_MAX_LRF_FILE);\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"File\")) )\r\n\t{\r\n\t\tconst TCHAR *filePath = (childNode->ToElement())->Attribute(TEXT(\"filename\"));\r\n\t\tif (filePath)\r\n\t\t{\r\n\t\t\t_LRFileList[_nbRecentFile] = new generic_string(filePath);\r\n\t\t\t++_nbRecentFile;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedFileBrowserParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *fileBrowserRoot = node->FirstChildElement(TEXT(\"FileBrowser\"));\r\n\tif (!fileBrowserRoot) return;\r\n\r\n\tconst TCHAR *selectedItemPath = (fileBrowserRoot->ToElement())->Attribute(TEXT(\"latestSelectedItem\"));\r\n\tif (selectedItemPath)\r\n\t{\r\n\t\t_fileBrowserSelectedItemPath = selectedItemPath;\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = fileBrowserRoot->FirstChildElement(TEXT(\"root\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"root\")) )\r\n\t{\r\n\t\tconst TCHAR *filePath = (childNode->ToElement())->Attribute(TEXT(\"foldername\"));\r\n\t\tif (filePath)\r\n\t\t{\r\n\t\t\t_fileBrowserRoot.push_back(filePath);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedProjectPanelsParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *projPanelRoot = node->FirstChildElement(TEXT(\"ProjectPanels\"));\r\n\tif (!projPanelRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = projPanelRoot->FirstChildElement(TEXT(\"ProjectPanel\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"ProjectPanel\")) )\r\n\t{\r\n\t\tint index = 0;\r\n\t\tconst TCHAR *idStr = (childNode->ToElement())->Attribute(TEXT(\"id\"), &index);\r\n\t\tif (idStr && (index >= 0 && index <= 2))\r\n\t\t{\r\n\t\t\tconst TCHAR *filePath = (childNode->ToElement())->Attribute(TEXT(\"workSpaceFile\"));\r\n\t\t\tif (filePath)\r\n\t\t\t{\r\n\t\t\t\t_workSpaceFilePathes[index] = filePath;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedFindHistoryParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *findHistoryRoot = node->FirstChildElement(TEXT(\"FindHistory\"));\r\n\tif (!findHistoryRoot) return;\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"nbMaxFindHistoryPath\"), &_findHistory._nbMaxFindHistoryPath);\r\n\tif (_findHistory._nbMaxFindHistoryPath > NB_MAX_FINDHISTORY_PATH)\r\n\t{\r\n\t\t_findHistory._nbMaxFindHistoryPath = NB_MAX_FINDHISTORY_PATH;\r\n\t}\r\n\tif ((_findHistory._nbMaxFindHistoryPath > 0) && (_findHistory._nbMaxFindHistoryPath <= NB_MAX_FINDHISTORY_PATH))\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = findHistoryRoot->FirstChildElement(TEXT(\"Path\"));\r\n\t\t\tchildNode && (_findHistory._findHistoryPaths.size() < NB_MAX_FINDHISTORY_PATH);\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"Path\")) )\r\n\t\t{\r\n\t\t\tconst TCHAR *filePath = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\tif (filePath)\r\n\t\t\t{\r\n\t\t\t\t_findHistory._findHistoryPaths.push_back(generic_string(filePath));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"nbMaxFindHistoryFilter\"), &_findHistory._nbMaxFindHistoryFilter);\r\n\tif (_findHistory._nbMaxFindHistoryFilter > NB_MAX_FINDHISTORY_FILTER)\r\n\t{\r\n\t\t_findHistory._nbMaxFindHistoryFilter = NB_MAX_FINDHISTORY_FILTER;\r\n\t}\r\n\tif ((_findHistory._nbMaxFindHistoryFilter > 0) && (_findHistory._nbMaxFindHistoryFilter <= NB_MAX_FINDHISTORY_FILTER))\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = findHistoryRoot->FirstChildElement(TEXT(\"Filter\"));\r\n\t\t\tchildNode && (_findHistory._findHistoryFilters.size() < NB_MAX_FINDHISTORY_FILTER);\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"Filter\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *fileFilter = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\tif (fileFilter)\r\n\t\t\t{\r\n\t\t\t\t_findHistory._findHistoryFilters.push_back(generic_string(fileFilter));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"nbMaxFindHistoryFind\"), &_findHistory._nbMaxFindHistoryFind);\r\n\tif (_findHistory._nbMaxFindHistoryFind > NB_MAX_FINDHISTORY_FIND)\r\n\t{\r\n\t\t_findHistory._nbMaxFindHistoryFind = NB_MAX_FINDHISTORY_FIND;\r\n\t}\r\n\tif ((_findHistory._nbMaxFindHistoryFind > 0) && (_findHistory._nbMaxFindHistoryFind <= NB_MAX_FINDHISTORY_FIND))\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = findHistoryRoot->FirstChildElement(TEXT(\"Find\"));\r\n\t\t\tchildNode && (_findHistory._findHistoryFinds.size() < NB_MAX_FINDHISTORY_FIND);\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"Find\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *fileFind = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\tif (fileFind)\r\n\t\t\t{\r\n\t\t\t\t_findHistory._findHistoryFinds.push_back(generic_string(fileFind));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"nbMaxFindHistoryReplace\"), &_findHistory._nbMaxFindHistoryReplace);\r\n\tif (_findHistory._nbMaxFindHistoryReplace > NB_MAX_FINDHISTORY_REPLACE)\r\n\t{\r\n\t\t_findHistory._nbMaxFindHistoryReplace = NB_MAX_FINDHISTORY_REPLACE;\r\n\t}\r\n\tif ((_findHistory._nbMaxFindHistoryReplace > 0) && (_findHistory._nbMaxFindHistoryReplace <= NB_MAX_FINDHISTORY_REPLACE))\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = findHistoryRoot->FirstChildElement(TEXT(\"Replace\"));\r\n\t\t\tchildNode && (_findHistory._findHistoryReplaces.size() < NB_MAX_FINDHISTORY_REPLACE);\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"Replace\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *fileReplace = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\tif (fileReplace)\r\n\t\t\t{\r\n\t\t\t\t_findHistory._findHistoryReplaces.push_back(generic_string(fileReplace));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst TCHAR *boolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"matchWord\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isMatchWord = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"matchCase\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isMatchCase = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"wrap\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isWrap = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"directionDown\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isDirectionDown = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifRecuisive\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifRecuisive = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifInHiddenFolder\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifInHiddenFolder = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifProjectPanel1\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifProjectPanel_1 = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifProjectPanel2\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifProjectPanel_2 = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifProjectPanel3\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFifProjectPanel_3 = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifFilterFollowsDoc\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFilterFollowDoc = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"fifFolderFollowsDoc\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isFolderFollowDoc = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tint mode = 0;\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"searchMode\"), &mode);\r\n\tif (boolStr)\r\n\t\t_findHistory._searchMode = (FindHistory::searchMode)mode;\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"transparencyMode\"), &mode);\r\n\tif (boolStr)\r\n\t\t_findHistory._transparencyMode = (FindHistory::transparencyMode)mode;\r\n\r\n\t(findHistoryRoot->ToElement())->Attribute(TEXT(\"transparency\"), &_findHistory._transparency);\r\n\tif (_findHistory._transparency <= 0 || _findHistory._transparency > 200)\r\n\t\t_findHistory._transparency = 150;\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"dotMatchesNewline\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._dotMatchesNewline = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"isSearch2ButtonsMode\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._isSearch2ButtonsMode = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\tboolStr = (findHistoryRoot->ToElement())->Attribute(TEXT(\"regexBackward4PowerUser\"));\r\n\tif (boolStr)\r\n\t\t_findHistory._regexBackward4PowerUser = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n}\r\n\r\nvoid NppParameters::feedShortcut(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *shortcutsRoot = node->FirstChildElement(TEXT(\"InternalCommands\"));\r\n\tif (!shortcutsRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = shortcutsRoot->FirstChildElement(TEXT(\"Shortcut\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Shortcut\")) )\r\n\t{\r\n\t\tint id;\r\n\t\tconst TCHAR *idStr = (childNode->ToElement())->Attribute(TEXT(\"id\"), &id);\r\n\t\tif (idStr)\r\n\t\t{\r\n\t\t\t//find the commandid that matches this Shortcut sc and alter it, push back its index in the modified list, if not present\r\n\t\t\tsize_t len = _shortcuts.size();\r\n\t\t\tfor (size_t i = 0; i < len; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (_shortcuts[i].getID() == (unsigned long)id)\r\n\t\t\t\t{\t//found our match\r\n\t\t\t\t\tgetShortcuts(childNode, _shortcuts[i]);\r\n\t\t\t\t\taddUserModifiedIndex(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedMacros(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *macrosRoot = node->FirstChildElement(TEXT(\"Macros\"));\r\n\tif (!macrosRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = macrosRoot->FirstChildElement(TEXT(\"Macro\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Macro\")) )\r\n\t{\r\n\t\tShortcut sc;\r\n\t\tif (getShortcuts(childNode, sc))// && sc.isValid())\r\n\t\t{\r\n\t\t\tMacro macro;\r\n\t\t\tgetActions(childNode, macro);\r\n\t\t\tint cmdID = ID_MACRO + static_cast<int32_t>(_macros.size());\r\n\t\t\tMacroShortcut ms(sc, macro, cmdID);\r\n\t\t\t_macros.push_back(ms);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::getActions(TiXmlNode *node, Macro & macro)\r\n{\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"Action\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Action\")) )\r\n\t{\r\n\t\tint type;\r\n\t\tconst TCHAR *typeStr = (childNode->ToElement())->Attribute(TEXT(\"type\"), &type);\r\n\t\tif ((!typeStr) || (type > 3))\r\n\t\t\tcontinue;\r\n\r\n\t\tint msg = 0;\r\n\t\t(childNode->ToElement())->Attribute(TEXT(\"message\"), &msg);\r\n\r\n\t\tint wParam = 0;\r\n\t\t(childNode->ToElement())->Attribute(TEXT(\"wParam\"), &wParam);\r\n\r\n\t\tint lParam = 0;\r\n\t\t(childNode->ToElement())->Attribute(TEXT(\"lParam\"), &lParam);\r\n\r\n\t\tconst TCHAR *sParam = (childNode->ToElement())->Attribute(TEXT(\"sParam\"));\r\n\t\tif (!sParam)\r\n\t\t\tsParam = TEXT(\"\");\r\n\t\trecordedMacroStep step(msg, wParam, lParam, sParam, type);\r\n\t\tif (step.isValid())\r\n\t\t\tmacro.push_back(step);\r\n\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedUserCmds(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *userCmdsRoot = node->FirstChildElement(TEXT(\"UserDefinedCommands\"));\r\n\tif (!userCmdsRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = userCmdsRoot->FirstChildElement(TEXT(\"Command\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Command\")) )\r\n\t{\r\n\t\tShortcut sc;\r\n\t\tif (getShortcuts(childNode, sc))\r\n\t\t{\r\n\t\t\tTiXmlNode *aNode = childNode->FirstChild();\r\n\t\t\tif (aNode)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR *cmdStr = aNode->Value();\r\n\t\t\t\tif (cmdStr)\r\n\t\t\t\t{\r\n\t\t\t\t\tint cmdID = ID_USER_CMD + static_cast<int32_t>(_userCommands.size());\r\n\t\t\t\t\tUserCommand uc(sc, cmdStr, cmdID);\r\n\t\t\t\t\t_userCommands.push_back(uc);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedPluginCustomizedCmds(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *pluginCustomizedCmdsRoot = node->FirstChildElement(TEXT(\"PluginCommands\"));\r\n\tif (!pluginCustomizedCmdsRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = pluginCustomizedCmdsRoot->FirstChildElement(TEXT(\"PluginCommand\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"PluginCommand\")) )\r\n\t{\r\n\t\tconst TCHAR *moduleName = (childNode->ToElement())->Attribute(TEXT(\"moduleName\"));\r\n\t\tif (!moduleName)\r\n\t\t\tcontinue;\r\n\r\n\t\tint internalID = -1;\r\n\t\tconst TCHAR *internalIDStr = (childNode->ToElement())->Attribute(TEXT(\"internalID\"), &internalID);\r\n\r\n\t\tif (!internalIDStr)\r\n\t\t\tcontinue;\r\n\r\n\t\t//Find the corresponding plugincommand and alter it, put the index in the list\r\n\t\tsize_t len = _pluginCommands.size();\r\n\t\tfor (size_t i = 0; i < len; ++i)\r\n\t\t{\r\n\t\t\tPluginCmdShortcut & pscOrig = _pluginCommands[i];\r\n\t\t\tif (!generic_strnicmp(pscOrig.getModuleName(), moduleName, lstrlen(moduleName)) && pscOrig.getInternalID() == internalID)\r\n\t\t\t{\r\n\t\t\t\t//Found matching command\r\n\t\t\t\tgetShortcuts(childNode, _pluginCommands[i]);\r\n\t\t\t\taddPluginModifiedIndex(i);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedScintKeys(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *scintKeysRoot = node->FirstChildElement(TEXT(\"ScintillaKeys\"));\r\n\tif (!scintKeysRoot) return;\r\n\r\n\tfor (TiXmlNode *childNode = scintKeysRoot->FirstChildElement(TEXT(\"ScintKey\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"ScintKey\")) )\r\n\t{\r\n\t\tint scintKey;\r\n\t\tconst TCHAR *keyStr = (childNode->ToElement())->Attribute(TEXT(\"ScintID\"), &scintKey);\r\n\t\tif (!keyStr)\r\n\t\t\tcontinue;\r\n\r\n\t\tint menuID;\r\n\t\tkeyStr = (childNode->ToElement())->Attribute(TEXT(\"menuCmdID\"), &menuID);\r\n\t\tif (!keyStr)\r\n\t\t\tcontinue;\r\n\r\n\t\t//Find the corresponding scintillacommand and alter it, put the index in the list\r\n\t\tsize_t len = _scintillaKeyCommands.size();\r\n\t\tfor (int32_t i = 0; i < static_cast<int32_t>(len); ++i)\r\n\t\t{\r\n\t\t\tScintillaKeyMap & skmOrig = _scintillaKeyCommands[i];\r\n\t\t\tif (skmOrig.getScintillaKeyID() == (unsigned long)scintKey && skmOrig.getMenuCmdID() == menuID)\r\n\t\t\t{\r\n\t\t\t\t//Found matching command\r\n\t\t\t\t_scintillaKeyCommands[i].clearDups();\r\n\t\t\t\tgetShortcuts(childNode, _scintillaKeyCommands[i]);\r\n\t\t\t\t_scintillaKeyCommands[i].setKeyComboByIndex(0, _scintillaKeyCommands[i].getKeyCombo());\r\n\t\t\t\taddScintillaModifiedIndex(i);\r\n\t\t\t\tKeyCombo kc;\r\n\t\t\t\tfor (TiXmlNode *nextNode = childNode->FirstChildElement(TEXT(\"NextKey\"));\r\n\t\t\t\t\tnextNode ;\r\n\t\t\t\t\tnextNode = nextNode->NextSibling(TEXT(\"NextKey\")))\r\n\t\t\t\t{\r\n\t\t\t\t\tconst TCHAR *str = (nextNode->ToElement())->Attribute(TEXT(\"Ctrl\"));\r\n\t\t\t\t\tif (!str)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tkc._isCtrl = (lstrcmp(TEXT(\"yes\"), str) == 0);\r\n\r\n\t\t\t\t\tstr = (nextNode->ToElement())->Attribute(TEXT(\"Alt\"));\r\n\t\t\t\t\tif (!str)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tkc._isAlt = (lstrcmp(TEXT(\"yes\"), str) == 0);\r\n\r\n\t\t\t\t\tstr = (nextNode->ToElement())->Attribute(TEXT(\"Shift\"));\r\n\t\t\t\t\tif (!str)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tkc._isShift = (lstrcmp(TEXT(\"yes\"), str) == 0);\r\n\r\n\t\t\t\t\tint key;\r\n\t\t\t\t\tstr = (nextNode->ToElement())->Attribute(TEXT(\"Key\"), &key);\r\n\t\t\t\t\tif (!str)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\tkc._key = static_cast<unsigned char>(key);\r\n\t\t\t\t\t_scintillaKeyCommands[i].addKeyCombo(kc);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nbool NppParameters::feedBlacklist(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *blackListRoot = node->FirstChildElement(TEXT(\"PluginBlackList\"));\r\n\tif (!blackListRoot) return false;\r\n\r\n\tfor (TiXmlNode *childNode = blackListRoot->FirstChildElement(TEXT(\"Plugin\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Plugin\")) )\r\n\t{\r\n\t\tconst TCHAR *name = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\tif (name)\r\n\t\t{\r\n\t\t\t_blacklist.push_back(name);\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::getShortcuts(TiXmlNode *node, Shortcut & sc)\r\n{\r\n\tif (!node) return false;\r\n\r\n\tconst TCHAR *name = (node->ToElement())->Attribute(TEXT(\"name\"));\r\n\tif (!name)\r\n\t\tname = TEXT(\"\");\r\n\r\n\tbool isCtrl = false;\r\n\tconst TCHAR *isCtrlStr = (node->ToElement())->Attribute(TEXT(\"Ctrl\"));\r\n\tif (isCtrlStr)\r\n\t\tisCtrl = (lstrcmp(TEXT(\"yes\"), isCtrlStr) == 0);\r\n\r\n\tbool isAlt = false;\r\n\tconst TCHAR *isAltStr = (node->ToElement())->Attribute(TEXT(\"Alt\"));\r\n\tif (isAltStr)\r\n\t\tisAlt = (lstrcmp(TEXT(\"yes\"), isAltStr) == 0);\r\n\r\n\tbool isShift = false;\r\n\tconst TCHAR *isShiftStr = (node->ToElement())->Attribute(TEXT(\"Shift\"));\r\n\tif (isShiftStr)\r\n\t\tisShift = (lstrcmp(TEXT(\"yes\"), isShiftStr) == 0);\r\n\r\n\tint key;\r\n\tconst TCHAR *keyStr = (node->ToElement())->Attribute(TEXT(\"Key\"), &key);\r\n\tif (!keyStr)\r\n\t\treturn false;\r\n\r\n\tsc = Shortcut(name, isCtrl, isAlt, isShift, static_cast<unsigned char>(key));\r\n\treturn true;\r\n}\r\n\r\n\r\nstd::pair<unsigned char, unsigned char> NppParameters::feedUserLang(TiXmlNode *node)\r\n{\r\n\tint iBegin = _nbUserLang;\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"UserLang\"));\r\n\t\tchildNode && (_nbUserLang < NB_MAX_USER_LANG);\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"UserLang\")) )\r\n\t{\r\n\t\tconst TCHAR* name = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\tconst TCHAR* ext = (childNode->ToElement())->Attribute(TEXT(\"ext\"));\r\n\t\tconst TCHAR* darkModeTheme = (childNode->ToElement())->Attribute(TEXT(\"darkModeTheme\"));\r\n\t\tconst TCHAR* udlVersion = (childNode->ToElement())->Attribute(TEXT(\"udlVersion\"));\r\n\r\n\t\tif (!name || !name[0] || !ext)\r\n\t\t{\r\n\t\t\t// UserLang name is missing, just ignore this entry\r\n\t\t\tcontinue;\r\n\t\t}\r\n\r\n\t\tbool isDarkModeTheme = false;\r\n\r\n\t\tif (darkModeTheme && darkModeTheme[0])\r\n\t\t{\r\n\t\t\tisDarkModeTheme = (lstrcmp(TEXT(\"yes\"), darkModeTheme) == 0);\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\t_userLangArray[_nbUserLang] = new UserLangContainer(name, ext, isDarkModeTheme, udlVersion ? udlVersion : TEXT(\"\"));\r\n\r\n\t\t\t++_nbUserLang;\r\n\r\n\t\t\tTiXmlNode *settingsRoot = childNode->FirstChildElement(TEXT(\"Settings\"));\r\n\t\t\tif (!settingsRoot)\r\n\t\t\t\tthrow std::runtime_error(\"NppParameters::feedUserLang : Settings node is missing\");\r\n\r\n\t\t\tfeedUserSettings(settingsRoot);\r\n\r\n\t\t\tTiXmlNode *keywordListsRoot = childNode->FirstChildElement(TEXT(\"KeywordLists\"));\r\n\t\t\tif (!keywordListsRoot)\r\n\t\t\t\tthrow std::runtime_error(\"NppParameters::feedUserLang : KeywordLists node is missing\");\r\n\r\n\t\t\tfeedUserKeywordList(keywordListsRoot);\r\n\r\n\t\t\tTiXmlNode *stylesRoot = childNode->FirstChildElement(TEXT(\"Styles\"));\r\n\t\t\tif (!stylesRoot)\r\n\t\t\t\tthrow std::runtime_error(\"NppParameters::feedUserLang : Styles node is missing\");\r\n\r\n\t\t\tfeedUserStyles(stylesRoot);\r\n\r\n\t\t\t// styles that were not read from xml file should get default values\r\n\t\t\tfor (int i = 0 ; i < SCE_USER_STYLE_TOTAL_STYLES ; ++i)\r\n\t\t\t{\r\n\t\t\t\tconst Style * pStyle = _userLangArray[_nbUserLang - 1]->_styles.findByID(i);\r\n\t\t\t\tif (!pStyle)\r\n\t\t\t\t\t_userLangArray[_nbUserLang - 1]->_styles.addStyler(i, globalMappper().styleNameMapper[i]);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tcatch (const std::exception&)\r\n\t\t{\r\n\t\t\tdelete _userLangArray[--_nbUserLang];\r\n\t\t}\r\n\t}\r\n\tint iEnd = _nbUserLang;\r\n\treturn pair<unsigned char, unsigned char>(static_cast<unsigned char>(iBegin), static_cast<unsigned char>(iEnd));\r\n}\r\n\r\nbool NppParameters::importUDLFromFile(const generic_string& sourceFile)\r\n{\r\n\tTiXmlDocument *pXmlUserLangDoc = new TiXmlDocument(sourceFile);\r\n\r\n\tbool loadOkay = pXmlUserLangDoc->LoadFile();\r\n\tif (loadOkay)\r\n\t{\r\n\t\tauto r = addUserDefineLangsFromXmlTree(pXmlUserLangDoc);\r\n\t\tloadOkay = (r.second - r.first) != 0;\r\n\t\tif (loadOkay)\r\n\t\t{\r\n\t\t\t_pXmlUserLangsDoc.push_back(UdlXmlFileState(nullptr, true, r));\r\n\r\n\t\t\t// imported UDL from xml file will be added into default udl, so we should make default udl dirty\r\n\t\t\tsetUdlXmlDirtyFromXmlDoc(_pXmlUserLangDoc);\r\n\t\t}\r\n\t}\r\n\tdelete pXmlUserLangDoc;\r\n\treturn loadOkay;\r\n}\r\n\r\nbool NppParameters::exportUDLToFile(size_t langIndex2export, const generic_string& fileName2save)\r\n{\r\n\tif (langIndex2export >= NB_MAX_USER_LANG)\r\n\t\treturn false;\r\n\r\n\tif (static_cast<int32_t>(langIndex2export) >= _nbUserLang)\r\n\t\treturn false;\r\n\r\n\tTiXmlDocument *pNewXmlUserLangDoc = new TiXmlDocument(fileName2save);\r\n\tTiXmlNode *newRoot2export = pNewXmlUserLangDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\r\n\tinsertUserLang2Tree(newRoot2export, _userLangArray[langIndex2export]);\r\n\tbool result = pNewXmlUserLangDoc->SaveFile();\r\n\r\n\tdelete pNewXmlUserLangDoc;\r\n\treturn result;\r\n}\r\n\r\nLangType NppParameters::getLangFromExt(const TCHAR *ext)\r\n{\r\n\tint i = getNbLang();\r\n\ti--;\r\n\twhile (i >= 0)\r\n\t{\r\n\t\tLang *l = getLangFromIndex(i--);\r\n\r\n\t\tconst TCHAR *defList = l->getDefaultExtList();\r\n\t\tconst TCHAR *userList = NULL;\r\n\r\n\t\tLexerStylerArray &lsa = getLStylerArray();\r\n\t\tconst TCHAR *lName = l->getLangName();\r\n\t\tLexerStyler *pLS = lsa.getLexerStylerByName(lName);\r\n\r\n\t\tif (pLS)\r\n\t\t\tuserList = pLS->getLexerUserExt();\r\n\r\n\t\tgeneric_string list;\r\n\t\tif (defList)\r\n\t\t\tlist += defList;\r\n\r\n\t\tif (userList)\r\n\t\t{\r\n\t\t\tlist += TEXT(\" \");\r\n\t\t\tlist += userList;\r\n\t\t}\r\n\t\tif (isInList(ext, list.c_str()))\r\n\t\t\treturn l->getLangID();\r\n\t}\r\n\treturn L_TEXT;\r\n}\r\n\r\nvoid NppParameters::setCloudChoice(const TCHAR *pathChoice)\r\n{\r\n\tgeneric_string cloudChoicePath = getSettingsFolder();\r\n\tcloudChoicePath += TEXT(\"\\\\cloud\\\\\");\r\n\r\n\tif (!PathFileExists(cloudChoicePath.c_str()))\r\n\t{\r\n\t\t::CreateDirectory(cloudChoicePath.c_str(), NULL);\r\n\t}\r\n\tcloudChoicePath += TEXT(\"choice\");\r\n\r\n\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\tstd::string cloudPathA = wmc.wchar2char(pathChoice, SC_CP_UTF8);\r\n\r\n\twriteFileContent(cloudChoicePath.c_str(), cloudPathA.c_str());\r\n}\r\n\r\nvoid NppParameters::removeCloudChoice()\r\n{\r\n\tgeneric_string cloudChoicePath = getSettingsFolder();\r\n\r\n\tcloudChoicePath += TEXT(\"\\\\cloud\\\\choice\");\r\n\tif (PathFileExists(cloudChoicePath.c_str()))\r\n\t{\r\n\t\t::DeleteFile(cloudChoicePath.c_str());\r\n\t}\r\n}\r\n\r\nbool NppParameters::isCloudPathChanged() const\r\n{\r\n\tif (_initialCloudChoice == _nppGUI._cloudPath)\r\n\t\treturn false;\r\n\telse if (_initialCloudChoice.size() - _nppGUI._cloudPath.size() == 1)\r\n\t{\r\n\t\tTCHAR c = _initialCloudChoice.at(_initialCloudChoice.size()-1);\r\n\t\tif (c == '\\\\' || c == '/')\r\n\t\t{\r\n\t\t\tif (_initialCloudChoice.find(_nppGUI._cloudPath) == 0)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\telse if (_nppGUI._cloudPath.size() - _initialCloudChoice.size() == 1)\r\n\t{\r\n\t\tTCHAR c = _nppGUI._cloudPath.at(_nppGUI._cloudPath.size() - 1);\r\n\t\tif (c == '\\\\' || c == '/')\r\n\t\t{\r\n\t\t\tif (_nppGUI._cloudPath.find(_initialCloudChoice) == 0)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::writeSettingsFilesOnCloudForThe1stTime(const generic_string & cloudSettingsPath)\r\n{\r\n\tbool isOK = false;\r\n\r\n\tif (cloudSettingsPath.empty())\r\n\t\treturn false;\r\n\r\n\t// config.xml\r\n\tgeneric_string cloudConfigPath = cloudSettingsPath;\r\n\tpathAppend(cloudConfigPath, TEXT(\"config.xml\"));\r\n\tif (!::PathFileExists(cloudConfigPath.c_str()) && _pXmlUserDoc)\r\n\t{\r\n\t\tisOK = _pXmlUserDoc->SaveFile(cloudConfigPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// stylers.xml\r\n\tgeneric_string cloudStylersPath = cloudSettingsPath;\r\n\tpathAppend(cloudStylersPath, TEXT(\"stylers.xml\"));\r\n\tif (!::PathFileExists(cloudStylersPath.c_str()) && _pXmlUserStylerDoc)\r\n\t{\r\n\t\tisOK = _pXmlUserStylerDoc->SaveFile(cloudStylersPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// langs.xml\r\n\tgeneric_string cloudLangsPath = cloudSettingsPath;\r\n\tpathAppend(cloudLangsPath, TEXT(\"langs.xml\"));\r\n\tif (!::PathFileExists(cloudLangsPath.c_str()) && _pXmlUserDoc)\r\n\t{\r\n\t\tisOK = _pXmlDoc->SaveFile(cloudLangsPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// userDefineLang.xml\r\n\tgeneric_string cloudUserLangsPath = cloudSettingsPath;\r\n\tpathAppend(cloudUserLangsPath, TEXT(\"userDefineLang.xml\"));\r\n\tif (!::PathFileExists(cloudUserLangsPath.c_str()) && _pXmlUserLangDoc)\r\n\t{\r\n\t\tisOK = _pXmlUserLangDoc->SaveFile(cloudUserLangsPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// shortcuts.xml\r\n\tgeneric_string cloudShortcutsPath = cloudSettingsPath;\r\n\tpathAppend(cloudShortcutsPath, TEXT(\"shortcuts.xml\"));\r\n\tif (!::PathFileExists(cloudShortcutsPath.c_str()) && _pXmlShortcutDoc)\r\n\t{\r\n\t\tisOK = _pXmlShortcutDoc->SaveFile(cloudShortcutsPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// contextMenu.xml\r\n\tgeneric_string cloudContextMenuPath = cloudSettingsPath;\r\n\tpathAppend(cloudContextMenuPath, TEXT(\"contextMenu.xml\"));\r\n\tif (!::PathFileExists(cloudContextMenuPath.c_str()) && _pXmlContextMenuDocA)\r\n\t{\r\n\t\tisOK = _pXmlContextMenuDocA->SaveUnicodeFilePath(cloudContextMenuPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\t// nativeLang.xml\r\n\tgeneric_string cloudNativeLangPath = cloudSettingsPath;\r\n\tpathAppend(cloudNativeLangPath, TEXT(\"nativeLang.xml\"));\r\n\tif (!::PathFileExists(cloudNativeLangPath.c_str()) && _pXmlNativeLangDocA)\r\n\t{\r\n\t\tisOK = _pXmlNativeLangDocA->SaveUnicodeFilePath(cloudNativeLangPath.c_str());\r\n\t\tif (!isOK)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\n/*\r\nDefault UDL + Created + Imported\r\n\r\n*/\r\nvoid NppParameters::writeDefaultUDL()\r\n{\r\n\tbool firstCleanDone = false;\r\n\tstd::vector<bool> deleteState;\r\n\tfor (auto udl : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tif (!_pXmlUserLangDoc)\r\n\t\t{\r\n\t\t\t_pXmlUserLangDoc = new TiXmlDocument(_userDefineLangPath);\r\n\t\t\tTiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));\r\n\t\t\t_pXmlUserLangDoc->LinkEndChild(decl);\r\n\t\t\t_pXmlUserLangDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t\t}\r\n\r\n\t\tbool toDelete = (udl._indexRange.second - udl._indexRange.first) == 0;\r\n\t\tdeleteState.push_back(toDelete);\r\n\t\tif ((!udl._udlXmlDoc || udl._udlXmlDoc == _pXmlUserLangDoc) && udl._isDirty && !toDelete) // new created or/and imported UDL plus _pXmlUserLangDoc (if exist)\r\n\t\t{\r\n\t\t\tTiXmlNode *root = _pXmlUserLangDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\t\tif (root && !firstCleanDone)\r\n\t\t\t{\r\n\t\t\t\t_pXmlUserLangDoc->RemoveChild(root);\r\n\t\t\t\t_pXmlUserLangDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t\t\t\tfirstCleanDone = true;\r\n\t\t\t}\r\n\r\n\t\t\troot = _pXmlUserLangDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\r\n\t\t\tfor (int i = udl._indexRange.first; i < udl._indexRange.second; ++i)\r\n\t\t\t{\r\n\t\t\t\tinsertUserLang2Tree(root, _userLangArray[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tbool deleteAll = true;\r\n\tfor (bool del : deleteState)\r\n\t{\r\n\t\tif (!del)\r\n\t\t{\r\n\t\t\tdeleteAll = false;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (firstCleanDone) // at least one udl is for saving, the udl to be deleted are ignored\r\n\t{\r\n\t\t_pXmlUserLangDoc->SaveFile();\r\n\t}\r\n\telse if (deleteAll)\r\n\t{\r\n\t\tif (::PathFileExists(_userDefineLangPath.c_str()))\r\n\t\t{\r\n\t\t\t::DeleteFile(_userDefineLangPath.c_str());\r\n\t\t}\r\n\t}\r\n\t// else nothing to change, do nothing\r\n}\r\n\r\nvoid NppParameters::writeNonDefaultUDL()\r\n{\r\n\tfor (auto udl : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tif (udl._isDirty && udl._udlXmlDoc != nullptr && udl._udlXmlDoc != _pXmlUserLangDoc)\r\n\t\t{\r\n\t\t\tif (udl._indexRange.second == udl._indexRange.first) // no more udl for this xmldoc container\r\n\t\t\t{\r\n\t\t\t\t// no need to save, delete file\r\n\t\t\t\tconst TCHAR* docFilePath = udl._udlXmlDoc->Value();\r\n\t\t\t\tif (docFilePath && ::PathFileExists(docFilePath))\r\n\t\t\t\t{\r\n\t\t\t\t\t::DeleteFile(docFilePath);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tTiXmlNode *root = udl._udlXmlDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\t\t\t\tif (root)\r\n\t\t\t\t{\r\n\t\t\t\t\tudl._udlXmlDoc->RemoveChild(root);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tudl._udlXmlDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\r\n\t\t\t\troot = udl._udlXmlDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\r\n\t\t\t\tfor (int i = udl._indexRange.first; i < udl._indexRange.second; ++i)\r\n\t\t\t\t{\r\n\t\t\t\t\tinsertUserLang2Tree(root, _userLangArray[i]);\r\n\t\t\t\t}\r\n\t\t\t\tudl._udlXmlDoc->SaveFile();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::writeNeed2SaveUDL()\r\n{\r\n\twriteDefaultUDL();\r\n\twriteNonDefaultUDL();\r\n}\r\n\r\n\r\nvoid NppParameters::insertCmd(TiXmlNode *shortcutsRoot, const CommandShortcut & cmd)\r\n{\r\n\tconst KeyCombo & key = cmd.getKeyCombo();\r\n\tTiXmlNode *sc = shortcutsRoot->InsertEndChild(TiXmlElement(TEXT(\"Shortcut\")));\r\n\tsc->ToElement()->SetAttribute(TEXT(\"id\"), cmd.getID());\r\n\tsc->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tsc->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tsc->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tsc->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n}\r\n\r\n\r\nvoid NppParameters::insertMacro(TiXmlNode *macrosRoot, const MacroShortcut & macro)\r\n{\r\n\tconst KeyCombo & key = macro.getKeyCombo();\r\n\tTiXmlNode *macroRoot = macrosRoot->InsertEndChild(TiXmlElement(TEXT(\"Macro\")));\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"name\"), macro.getMenuName());\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tmacroRoot->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n\r\n\tfor (size_t i = 0, len = macro._macro.size(); i < len ; ++i)\r\n\t{\r\n\t\tTiXmlNode *actionNode = macroRoot->InsertEndChild(TiXmlElement(TEXT(\"Action\")));\r\n\t\tconst recordedMacroStep & action = macro._macro[i];\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"type\"), action._macroType);\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"message\"), action._message);\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"wParam\"), static_cast<int>(action._wParameter));\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"lParam\"), static_cast<int>(action._lParameter));\r\n\t\tactionNode->ToElement()->SetAttribute(TEXT(\"sParam\"), action._sParameter.c_str());\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::insertUserCmd(TiXmlNode *userCmdRoot, const UserCommand & userCmd)\r\n{\r\n\tconst KeyCombo & key = userCmd.getKeyCombo();\r\n\tTiXmlNode *cmdRoot = userCmdRoot->InsertEndChild(TiXmlElement(TEXT(\"Command\")));\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"name\"), userCmd.getMenuName());\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tcmdRoot->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n\tcmdRoot->InsertEndChild(TiXmlText(userCmd._cmd.c_str()));\r\n}\r\n\r\n\r\nvoid NppParameters::insertPluginCmd(TiXmlNode *pluginCmdRoot, const PluginCmdShortcut & pluginCmd)\r\n{\r\n\tconst KeyCombo & key = pluginCmd.getKeyCombo();\r\n\tTiXmlNode *pluginCmdNode = pluginCmdRoot->InsertEndChild(TiXmlElement(TEXT(\"PluginCommand\")));\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"moduleName\"), pluginCmd.getModuleName());\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"internalID\"), pluginCmd.getInternalID());\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tpluginCmdNode->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n}\r\n\r\n\r\nvoid NppParameters::insertScintKey(TiXmlNode *scintKeyRoot, const ScintillaKeyMap & scintKeyMap)\r\n{\r\n\tTiXmlNode *keyRoot = scintKeyRoot->InsertEndChild(TiXmlElement(TEXT(\"ScintKey\")));\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"ScintID\"), scintKeyMap.getScintillaKeyID());\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"menuCmdID\"), scintKeyMap.getMenuCmdID());\r\n\r\n\t//Add main shortcut\r\n\tKeyCombo key = scintKeyMap.getKeyComboByIndex(0);\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\tkeyRoot->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n\r\n\t//Add additional shortcuts\r\n\tsize_t size = scintKeyMap.getSize();\r\n\tif (size > 1)\r\n\t{\r\n\t\tfor (size_t i = 1; i < size; ++i)\r\n\t\t{\r\n\t\t\tTiXmlNode *keyNext = keyRoot->InsertEndChild(TiXmlElement(TEXT(\"NextKey\")));\r\n\t\t\tkey = scintKeyMap.getKeyComboByIndex(i);\r\n\t\t\tkeyNext->ToElement()->SetAttribute(TEXT(\"Ctrl\"), key._isCtrl?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\t\tkeyNext->ToElement()->SetAttribute(TEXT(\"Alt\"), key._isAlt?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\t\tkeyNext->ToElement()->SetAttribute(TEXT(\"Shift\"), key._isShift?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\t\tkeyNext->ToElement()->SetAttribute(TEXT(\"Key\"), key._key);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::writeSession(const Session & session, const TCHAR *fileName)\r\n{\r\n\tconst TCHAR *pathName = fileName?fileName:_sessionPath.c_str();\r\n\r\n\tTiXmlDocument* pXmlSessionDoc = new TiXmlDocument(pathName);\r\n\r\n\tTiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));\r\n\tpXmlSessionDoc->LinkEndChild(decl);\r\n\r\n\tTiXmlNode *root = pXmlSessionDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\r\n\tif (root)\r\n\t{\r\n\t\tTiXmlNode *sessionNode = root->InsertEndChild(TiXmlElement(TEXT(\"Session\")));\r\n\t\t(sessionNode->ToElement())->SetAttribute(TEXT(\"activeView\"), static_cast<int32_t>(session._activeView));\r\n\r\n\t\tstruct ViewElem {\r\n\t\t\tTiXmlNode *viewNode;\r\n\t\t\tvector<sessionFileInfo> *viewFiles;\r\n\t\t\tsize_t activeIndex;\r\n\t\t};\r\n\t\tconst int nbElem = 2;\r\n\t\tViewElem viewElems[nbElem];\r\n\t\tviewElems[0].viewNode = sessionNode->InsertEndChild(TiXmlElement(TEXT(\"mainView\")));\r\n\t\tviewElems[1].viewNode = sessionNode->InsertEndChild(TiXmlElement(TEXT(\"subView\")));\r\n\t\tviewElems[0].viewFiles = (vector<sessionFileInfo> *)(&(session._mainViewFiles));\r\n\t\tviewElems[1].viewFiles = (vector<sessionFileInfo> *)(&(session._subViewFiles));\r\n\t\tviewElems[0].activeIndex = session._activeMainIndex;\r\n\t\tviewElems[1].activeIndex = session._activeSubIndex;\r\n\r\n\t\tfor (size_t k = 0; k < nbElem ; ++k)\r\n\t\t{\r\n\t\t\t(viewElems[k].viewNode->ToElement())->SetAttribute(TEXT(\"activeIndex\"), static_cast<int32_t>(viewElems[k].activeIndex));\r\n\t\t\tvector<sessionFileInfo> & viewSessionFiles = *(viewElems[k].viewFiles);\r\n\r\n\t\t\tfor (size_t i = 0, len = viewElems[k].viewFiles->size(); i < len ; ++i)\r\n\t\t\t{\r\n\t\t\t\tTiXmlNode *fileNameNode = viewElems[k].viewNode->InsertEndChild(TiXmlElement(TEXT(\"File\")));\r\n\r\n\t\t\t\tTCHAR szInt64[64];\r\n\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"firstVisibleLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._firstVisibleLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"xOffset\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._xOffset), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"scrollWidth\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._scrollWidth), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"startPos\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._startPos), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"endPos\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._endPos), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"selMode\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._selMode), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"offset\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._offset), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"wrapCount\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._wrapCount), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"lang\"), viewSessionFiles[i]._langName.c_str());\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"encoding\"), viewSessionFiles[i]._encoding);\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"userReadOnly\"), (viewSessionFiles[i]._isUserReadOnly && !viewSessionFiles[i]._isMonitoring) ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"filename\"), viewSessionFiles[i]._fileName.c_str());\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"backupFilePath\"), viewSessionFiles[i]._backupFilePath.c_str());\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"originalFileLastModifTimestamp\"), static_cast<int32_t>(viewSessionFiles[i]._originalFileLastModifTimestamp.dwLowDateTime));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"originalFileLastModifTimestampHigh\"), static_cast<int32_t>(viewSessionFiles[i]._originalFileLastModifTimestamp.dwHighDateTime));\r\n\r\n\t\t\t\t// docMap \r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapFirstVisibleDisplayLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._firstVisibleDisplayLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapFirstVisibleDocLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._firstVisibleDocLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapLastVisibleDocLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._lastVisibleDocLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapNbLine\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._nbLine), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapHigherPos\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._higherPos), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapWidth\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._width), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapHeight\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._height), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapKByteInDoc\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._KByteInDoc), szInt64, 10));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"mapWrapIndentMode\"), _i64tot(static_cast<LONGLONG>(viewSessionFiles[i]._mapPos._wrapIndentMode), szInt64, 10));\r\n\t\t\t\tfileNameNode->ToElement()->SetAttribute(TEXT(\"mapIsWrap\"), viewSessionFiles[i]._mapPos._isWrap ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\t\t\t\tfor (size_t j = 0, len = viewSessionFiles[i]._marks.size() ; j < len ; ++j)\r\n\t\t\t\t{\r\n\t\t\t\t\tsize_t markLine = viewSessionFiles[i]._marks[j];\r\n\t\t\t\t\tTiXmlNode *markNode = fileNameNode->InsertEndChild(TiXmlElement(TEXT(\"Mark\")));\r\n\t\t\t\t\tmarkNode->ToElement()->SetAttribute(TEXT(\"line\"), _ui64tot(static_cast<ULONGLONG>(markLine), szInt64, 10));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (size_t j = 0, len = viewSessionFiles[i]._foldStates.size() ; j < len ; ++j)\r\n\t\t\t\t{\r\n\t\t\t\t\tsize_t foldLine = viewSessionFiles[i]._foldStates[j];\r\n\t\t\t\t\tTiXmlNode *foldNode = fileNameNode->InsertEndChild(TiXmlElement(TEXT(\"Fold\")));\r\n\t\t\t\t\tfoldNode->ToElement()->SetAttribute(TEXT(\"line\"), _ui64tot(static_cast<ULONGLONG>(foldLine), szInt64, 10));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (session._includeFileBrowser)\r\n\t\t{\r\n\t\t\t// Node structure and naming corresponds to config.xml\r\n\t\t\tTiXmlNode* fileBrowserRootNode = sessionNode->InsertEndChild(TiXmlElement(TEXT(\"FileBrowser\")));\r\n\t\t\tfileBrowserRootNode->ToElement()->SetAttribute(TEXT(\"latestSelectedItem\"), session._fileBrowserSelectedItem.c_str());\r\n\t\t\tfor (const auto& root : session._fileBrowserRoots)\r\n\t\t\t{\r\n\t\t\t\tTiXmlNode *fileNameNode = fileBrowserRootNode->InsertEndChild(TiXmlElement(TEXT(\"root\")));\r\n\t\t\t\t(fileNameNode->ToElement())->SetAttribute(TEXT(\"foldername\"), root.c_str());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpXmlSessionDoc->SaveFile();\r\n\r\n\tdelete pXmlSessionDoc;\r\n}\r\n\r\n\r\nvoid NppParameters::writeShortcuts()\r\n{\r\n\tif (!_isAnyShortcutModified) return;\r\n\r\n\tif (!_pXmlShortcutDoc)\r\n\t{\r\n\t\t//do the treatment\r\n\t\t_pXmlShortcutDoc = new TiXmlDocument(_shortcutsPath);\r\n\t\tTiXmlDeclaration* decl = new TiXmlDeclaration(TEXT(\"1.0\"), TEXT(\"UTF-8\"), TEXT(\"\"));\r\n\t\t_pXmlShortcutDoc->LinkEndChild(decl);\r\n\t}\r\n\r\n\tTiXmlNode *root = _pXmlShortcutDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!root)\r\n\t{\r\n\t\troot = _pXmlShortcutDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *cmdRoot = root->FirstChild(TEXT(\"InternalCommands\"));\r\n\tif (cmdRoot)\r\n\t\troot->RemoveChild(cmdRoot);\r\n\r\n\tcmdRoot = root->InsertEndChild(TiXmlElement(TEXT(\"InternalCommands\")));\r\n\tfor (size_t i = 0, len = _customizedShortcuts.size(); i < len ; ++i)\r\n\t{\r\n\t\tsize_t index = _customizedShortcuts[i];\r\n\t\tCommandShortcut csc = _shortcuts[index];\r\n\t\tinsertCmd(cmdRoot, csc);\r\n\t}\r\n\r\n\tTiXmlNode *macrosRoot = root->FirstChild(TEXT(\"Macros\"));\r\n\tif (macrosRoot)\r\n\t\troot->RemoveChild(macrosRoot);\r\n\r\n\tmacrosRoot = root->InsertEndChild(TiXmlElement(TEXT(\"Macros\")));\r\n\r\n\tfor (size_t i = 0, len = _macros.size(); i < len ; ++i)\r\n\t{\r\n\t\tinsertMacro(macrosRoot, _macros[i]);\r\n\t}\r\n\r\n\tTiXmlNode *userCmdRoot = root->FirstChild(TEXT(\"UserDefinedCommands\"));\r\n\tif (userCmdRoot)\r\n\t\troot->RemoveChild(userCmdRoot);\r\n\r\n\tuserCmdRoot = root->InsertEndChild(TiXmlElement(TEXT(\"UserDefinedCommands\")));\r\n\r\n\tfor (size_t i = 0, len = _userCommands.size(); i < len ; ++i)\r\n\t{\r\n\t\tinsertUserCmd(userCmdRoot, _userCommands[i]);\r\n\t}\r\n\r\n\tTiXmlNode *pluginCmdRoot = root->FirstChild(TEXT(\"PluginCommands\"));\r\n\tif (pluginCmdRoot)\r\n\t\troot->RemoveChild(pluginCmdRoot);\r\n\r\n\tpluginCmdRoot = root->InsertEndChild(TiXmlElement(TEXT(\"PluginCommands\")));\r\n\tfor (size_t i = 0, len = _pluginCustomizedCmds.size(); i < len ; ++i)\r\n\t{\r\n\t\tinsertPluginCmd(pluginCmdRoot, _pluginCommands[_pluginCustomizedCmds[i]]);\r\n\t}\r\n\r\n\tTiXmlNode *scitillaKeyRoot = root->FirstChild(TEXT(\"ScintillaKeys\"));\r\n\tif (scitillaKeyRoot)\r\n\t\troot->RemoveChild(scitillaKeyRoot);\r\n\r\n\tscitillaKeyRoot = root->InsertEndChild(TiXmlElement(TEXT(\"ScintillaKeys\")));\r\n\tfor (size_t i = 0, len = _scintillaModifiedKeyIndices.size(); i < len ; ++i)\r\n\t{\r\n\t\tinsertScintKey(scitillaKeyRoot, _scintillaKeyCommands[_scintillaModifiedKeyIndices[i]]);\r\n\t}\r\n\t_pXmlShortcutDoc->SaveFile();\r\n}\r\n\r\n\r\nint NppParameters::addUserLangToEnd(const UserLangContainer & userLang, const TCHAR *newName)\r\n{\r\n\tif (isExistingUserLangName(newName))\r\n\t\treturn -1;\r\n\tunsigned char iBegin = _nbUserLang;\r\n\t_userLangArray[_nbUserLang] = new UserLangContainer();\r\n\t*(_userLangArray[_nbUserLang]) = userLang;\r\n\t_userLangArray[_nbUserLang]->_name = newName;\r\n\t++_nbUserLang;\r\n\tunsigned char iEnd = _nbUserLang;\r\n\r\n\t_pXmlUserLangsDoc.push_back(UdlXmlFileState(nullptr, true, make_pair(iBegin, iEnd)));\r\n\r\n\t// imported UDL from xml file will be added into default udl, so we should make default udl dirty\r\n\tsetUdlXmlDirtyFromXmlDoc(_pXmlUserLangDoc);\r\n\r\n\treturn _nbUserLang-1;\r\n}\r\n\r\n\r\nvoid NppParameters::removeUserLang(size_t index)\r\n{\r\n\tif (static_cast<int32_t>(index) >= _nbUserLang)\r\n\t\treturn;\r\n\tdelete _userLangArray[index];\r\n\r\n\tfor (int32_t i = static_cast<int32_t>(index); i < (_nbUserLang - 1); ++i)\r\n\t\t_userLangArray[i] = _userLangArray[i+1];\r\n\t_nbUserLang--;\r\n\r\n\tremoveIndexFromXmlUdls(index);\r\n}\r\n\r\n\r\nvoid NppParameters::feedUserSettings(TiXmlNode *settingsRoot)\r\n{\r\n\tconst TCHAR *boolStr;\r\n\tTiXmlNode *globalSettingNode = settingsRoot->FirstChildElement(TEXT(\"Global\"));\r\n\tif (globalSettingNode)\r\n\t{\r\n\t\tboolStr = (globalSettingNode->ToElement())->Attribute(TEXT(\"caseIgnored\"));\r\n\t\tif (boolStr)\r\n\t\t\t_userLangArray[_nbUserLang - 1]->_isCaseIgnored = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\t\tboolStr = (globalSettingNode->ToElement())->Attribute(TEXT(\"allowFoldOfComments\"));\r\n\t\tif (boolStr)\r\n\t\t\t_userLangArray[_nbUserLang - 1]->_allowFoldOfComments = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\r\n\t\t(globalSettingNode->ToElement())->Attribute(TEXT(\"forcePureLC\"), &_userLangArray[_nbUserLang - 1]->_forcePureLC);\r\n\t\t(globalSettingNode->ToElement())->Attribute(TEXT(\"decimalSeparator\"), &_userLangArray[_nbUserLang - 1]->_decimalSeparator);\r\n\r\n\t\tboolStr = (globalSettingNode->ToElement())->Attribute(TEXT(\"foldCompact\"));\r\n\t\tif (boolStr)\r\n\t\t\t_userLangArray[_nbUserLang - 1]->_foldCompact = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\t}\r\n\r\n\tTiXmlNode *prefixNode = settingsRoot->FirstChildElement(TEXT(\"Prefix\"));\r\n\tif (prefixNode)\r\n\t{\r\n\t\tconst TCHAR *udlVersion = _userLangArray[_nbUserLang - 1]->_udlVersion.c_str();\r\n\t\tif (!lstrcmp(udlVersion, TEXT(\"2.1\")) || !lstrcmp(udlVersion, TEXT(\"2.0\")))\r\n\t\t{\r\n\t\t\tfor (int i = 0 ; i < SCE_USER_TOTAL_KEYWORD_GROUPS ; ++i)\r\n\t\t\t{\r\n\t\t\t\tboolStr = (prefixNode->ToElement())->Attribute(globalMappper().keywordNameMapper[i+SCE_USER_KWLIST_KEYWORDS1]);\r\n\t\t\t\tif (boolStr)\r\n\t\t\t\t\t_userLangArray[_nbUserLang - 1]->_isPrefix[i] = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\t// support for old style (pre 2.0)\r\n\t\t{\r\n\t\t\tTCHAR names[SCE_USER_TOTAL_KEYWORD_GROUPS][7] = {TEXT(\"words1\"), TEXT(\"words2\"), TEXT(\"words3\"), TEXT(\"words4\")};\r\n\t\t\tfor (int i = 0 ; i < 4 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tboolStr = (prefixNode->ToElement())->Attribute(names[i]);\r\n\t\t\t\tif (boolStr)\r\n\t\t\t\t\t_userLangArray[_nbUserLang - 1]->_isPrefix[i] = (lstrcmp(TEXT(\"yes\"), boolStr) == 0);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::feedUserKeywordList(TiXmlNode *node)\r\n{\r\n\tconst TCHAR * udlVersion = _userLangArray[_nbUserLang - 1]->_udlVersion.c_str();\r\n\tint id = -1;\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"Keywords\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Keywords\")))\r\n\t{\r\n\t\tconst TCHAR * keywordsName = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\tTiXmlNode *valueNode = childNode->FirstChild();\r\n\t\tif (valueNode)\r\n\t\t{\r\n\t\t\tconst TCHAR *kwl = nullptr;\r\n\t\t\tif (!lstrcmp(udlVersion, TEXT(\"\")) && !lstrcmp(keywordsName, TEXT(\"Delimiters\")))\t// support for old style (pre 2.0)\r\n\t\t\t{\r\n\t\t\t\tbasic_string<TCHAR> temp;\r\n\t\t\t\tkwl = (valueNode)?valueNode->Value():TEXT(\"000000\");\r\n\r\n\t\t\t\ttemp += TEXT(\"00\");\t if (kwl[0] != '0') temp += kwl[0];\t temp += TEXT(\" 01\");\r\n\t\t\t\ttemp += TEXT(\" 02\");\tif (kwl[3] != '0') temp += kwl[3];\r\n\t\t\t\ttemp += TEXT(\" 03\");\tif (kwl[1] != '0') temp += kwl[1];\t temp += TEXT(\" 04\");\r\n\t\t\t\ttemp += TEXT(\" 05\");\tif (kwl[4] != '0') temp += kwl[4];\r\n\t\t\t\ttemp += TEXT(\" 06\");\tif (kwl[2] != '0') temp += kwl[2];\t temp += TEXT(\" 07\");\r\n\t\t\t\ttemp += TEXT(\" 08\");\tif (kwl[5] != '0') temp += kwl[5];\r\n\r\n\t\t\t\ttemp += TEXT(\" 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23\");\r\n\t\t\t\twcscpy_s(_userLangArray[_nbUserLang - 1]->_keywordLists[SCE_USER_KWLIST_DELIMITERS], temp.c_str());\r\n\t\t\t}\r\n\t\t\telse if (!lstrcmp(keywordsName, TEXT(\"Comment\")))\r\n\t\t\t{\r\n\t\t\t\tkwl = (valueNode)?valueNode->Value():TEXT(\"\");\r\n\t\t\t\t//int len = _tcslen(kwl);\r\n\t\t\t\tbasic_string<TCHAR> temp{TEXT(\" \")};\r\n\r\n\t\t\t\ttemp += kwl;\r\n\t\t\t\tsize_t pos = 0;\r\n\r\n\t\t\t\tpos = temp.find(TEXT(\" 0\"));\r\n\t\t\t\twhile (pos != string::npos)\r\n\t\t\t\t{\r\n\t\t\t\t\ttemp.replace(pos, 2, TEXT(\" 00\"));\r\n\t\t\t\t\tpos = temp.find(TEXT(\" 0\"), pos+1);\r\n\t\t\t\t}\r\n\t\t\t\tpos = temp.find(TEXT(\" 1\"));\r\n\t\t\t\twhile (pos != string::npos)\r\n\t\t\t\t{\r\n\t\t\t\t\ttemp.replace(pos, 2, TEXT(\" 03\"));\r\n\t\t\t\t\tpos = temp.find(TEXT(\" 1\"));\r\n\t\t\t\t}\r\n\t\t\t\tpos = temp.find(TEXT(\" 2\"));\r\n\t\t\t\twhile (pos != string::npos)\r\n\t\t\t\t{\r\n\t\t\t\t\ttemp.replace(pos, 2, TEXT(\" 04\"));\r\n\t\t\t\t\tpos = temp.find(TEXT(\" 2\"));\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttemp += TEXT(\" 01 02\");\r\n\t\t\t\tif (temp[0] == ' ')\r\n\t\t\t\t\ttemp.erase(0, 1);\r\n\r\n\t\t\t\twcscpy_s(_userLangArray[_nbUserLang - 1]->_keywordLists[SCE_USER_KWLIST_COMMENTS], temp.c_str());\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tkwl = (valueNode)?valueNode->Value():TEXT(\"\");\r\n\t\t\t\tif (globalMappper().keywordIdMapper.find(keywordsName) != globalMappper().keywordIdMapper.end())\r\n\t\t\t\t{\r\n\t\t\t\t\tid = globalMappper().keywordIdMapper[keywordsName];\r\n\t\t\t\t\tif (_tcslen(kwl) < max_char)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twcscpy_s(_userLangArray[_nbUserLang - 1]->_keywordLists[id], kwl);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twcscpy_s(_userLangArray[_nbUserLang - 1]->_keywordLists[id], TEXT(\"imported string too long, needs to be < max_char(30720)\"));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedUserStyles(TiXmlNode *node)\r\n{\r\n\tint id = -1;\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"WordsStyle\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"WordsStyle\")))\r\n\t{\r\n\t\tconst TCHAR *styleName = (childNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\tif (styleName)\r\n\t\t{\r\n\t\t\tif (globalMappper().styleIdMapper.find(styleName) != globalMappper().styleIdMapper.end())\r\n\t\t\t{\r\n\t\t\t\tid = globalMappper().styleIdMapper[styleName];\r\n\t\t\t\t_userLangArray[_nbUserLang - 1]->_styles.addStyler((id | L_USER << 16), childNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nbool NppParameters::feedStylerArray(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *styleRoot = node->FirstChildElement(TEXT(\"LexerStyles\"));\r\n\tif (!styleRoot) return false;\r\n\r\n\t// For each lexer\r\n\tfor (TiXmlNode *childNode = styleRoot->FirstChildElement(TEXT(\"LexerType\"));\r\n\t\t childNode ;\r\n\t\t childNode = childNode->NextSibling(TEXT(\"LexerType\")) )\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *lexerName = element->Attribute(TEXT(\"name\"));\r\n\t\tconst TCHAR *lexerDesc = element->Attribute(TEXT(\"desc\"));\r\n\t\tconst TCHAR *lexerUserExt = element->Attribute(TEXT(\"ext\"));\r\n\t\tconst TCHAR *lexerExcluded = element->Attribute(TEXT(\"excluded\"));\r\n\t\tif (lexerName)\r\n\t\t{\r\n\t\t\t_lexerStylerVect.addLexerStyler(lexerName, lexerDesc, lexerUserExt, childNode);\r\n\t\t\tif (lexerExcluded != NULL && (lstrcmp(lexerExcluded, TEXT(\"yes\")) == 0))\r\n\t\t\t{\r\n\t\t\t\tint index = getExternalLangIndexFromName(lexerName);\r\n\t\t\t\tif (index != -1)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)(index + L_EXTERNAL)));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_lexerStylerVect.sort();\r\n\r\n\t// The global styles for all lexers\r\n\tTiXmlNode *globalStyleRoot = node->FirstChildElement(TEXT(\"GlobalStyles\"));\r\n\tif (!globalStyleRoot) return false;\r\n\r\n\tfor (TiXmlNode *childNode = globalStyleRoot->FirstChildElement(TEXT(\"WidgetStyle\"));\r\n\t\t childNode ;\r\n\t\t childNode = childNode->NextSibling(TEXT(\"WidgetStyle\")) )\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *styleIDStr = element->Attribute(TEXT(\"styleID\"));\r\n\r\n\t\tint styleID = -1;\r\n\t\tif ((styleID = decStrVal(styleIDStr)) != -1)\r\n\t\t{\r\n\t\t\t_widgetStyleArray.addStyler(styleID, childNode);\r\n\t\t}\r\n\t}\r\n\tconst Style* pStyle = _widgetStyleArray.findByName(TEXT(\"EOL custom color\"));\r\n\tif (!pStyle)\r\n\t{\r\n\t\tTiXmlNode* eolColorkNode = globalStyleRoot->InsertEndChild(TiXmlElement(TEXT(\"WidgetStyle\")));\r\n\t\teolColorkNode->ToElement()->SetAttribute(TEXT(\"name\"), TEXT(\"EOL custom color\"));\r\n\t\teolColorkNode->ToElement()->SetAttribute(TEXT(\"styleID\"), TEXT(\"0\"));\r\n\t\teolColorkNode->ToElement()->SetAttribute(TEXT(\"fgColor\"), TEXT(\"DADADA\"));\r\n\r\n\t\t_widgetStyleArray.addStyler(0, eolColorkNode);\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nvoid LexerStylerArray::addLexerStyler(const TCHAR *lexerName, const TCHAR *lexerDesc, const TCHAR *lexerUserExt , TiXmlNode *lexerNode)\r\n{\r\n\t_lexerStylerVect.emplace_back();\r\n\tLexerStyler & ls = _lexerStylerVect.back();\r\n\tls.setLexerName(lexerName);\r\n\tif (lexerDesc)\r\n\t\tls.setLexerDesc(lexerDesc);\r\n\r\n\tif (lexerUserExt)\r\n\t\tls.setLexerUserExt(lexerUserExt);\r\n\r\n\tfor (TiXmlNode *childNode = lexerNode->FirstChildElement(TEXT(\"WordsStyle\"));\r\n\t\t childNode ;\r\n\t\t childNode = childNode->NextSibling(TEXT(\"WordsStyle\")) )\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *styleIDStr = element->Attribute(TEXT(\"styleID\"));\r\n\r\n\t\tif (styleIDStr)\r\n\t\t{\r\n\t\t\tint styleID = -1;\r\n\t\t\tif ((styleID = decStrVal(styleIDStr)) != -1)\r\n\t\t\t{\r\n\t\t\t\tls.addStyler(styleID, childNode);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid StyleArray::addStyler(int styleID, TiXmlNode *styleNode)\r\n{\r\n\tbool isUser = styleID >> 16 == L_USER;\r\n\tif (isUser)\r\n\t{\r\n\t\tstyleID = (styleID & 0xFFFF);\r\n\t\tif (styleID >= SCE_USER_STYLE_TOTAL_STYLES || findByID(styleID))\r\n\t\t\treturn;\r\n\t}\r\n\r\n\t_styleVect.emplace_back();\r\n\tStyle & s = _styleVect.back();\r\n\ts._styleID = styleID;\r\n\r\n\tif (styleNode)\r\n\t{\r\n\t\tTiXmlElement *element = styleNode->ToElement();\r\n\r\n\t\t// TODO: translate to English\r\n\t\t// Pour _fgColor, _bgColor :\r\n\t\t// RGB() | (result & 0xFF000000) c'est pour le cas de -1 (0xFFFFFFFF)\r\n\t\t// retourn\u00e9 par hexStrVal(str)\r\n\t\tconst TCHAR *str = element->Attribute(TEXT(\"name\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\tif (isUser)\r\n\t\t\t\ts._styleDesc = globalMappper().styleNameMapper[styleID];\r\n\t\t\telse\r\n\t\t\t\ts._styleDesc = str;\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"fgColor\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\tunsigned long result = hexStrVal(str);\r\n\t\t\ts._fgColor = (RGB((result >> 16) & 0xFF, (result >> 8) & 0xFF, result & 0xFF)) | (result & 0xFF000000);\r\n\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"bgColor\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\tunsigned long result = hexStrVal(str);\r\n\t\t\ts._bgColor = (RGB((result >> 16) & 0xFF, (result >> 8) & 0xFF, result & 0xFF)) | (result & 0xFF000000);\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"colorStyle\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._colorStyle = decStrVal(str);\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"fontName\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._fontName = str;\r\n\t\t\ts._isFontEnabled = true;\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"fontStyle\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._fontStyle = decStrVal(str);\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"fontSize\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._fontSize = decStrVal(str);\r\n\t\t}\r\n\t\tstr = element->Attribute(TEXT(\"nesting\"));\r\n\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._nesting = decStrVal(str);\r\n\t\t}\r\n\r\n\t\tstr = element->Attribute(TEXT(\"keywordClass\"));\r\n\t\tif (str)\r\n\t\t{\r\n\t\t\ts._keywordClass = getKwClassFromName(str);\r\n\t\t}\r\n\r\n\t\tTiXmlNode *v = styleNode->FirstChild();\r\n\t\tif (v)\r\n\t\t{\r\n\t\t\ts._keywords = v->Value();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nbool NppParameters::writeRecentFileHistorySettings(int nbMaxFile) const\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *historyNode = nppRoot->FirstChildElement(TEXT(\"History\"));\r\n\tif (!historyNode)\r\n\t{\r\n\t\thistoryNode = nppRoot->InsertEndChild(TiXmlElement(TEXT(\"History\")));\r\n\t}\r\n\r\n\t(historyNode->ToElement())->SetAttribute(TEXT(\"nbMaxFile\"), nbMaxFile!=-1?nbMaxFile:_nbMaxRecentFile);\r\n\t(historyNode->ToElement())->SetAttribute(TEXT(\"inSubMenu\"), _putRecentFileInSubMenu?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(historyNode->ToElement())->SetAttribute(TEXT(\"customLength\"), _recentFileCustomLength);\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::writeProjectPanelsSettings() const\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *oldProjPanelRootNode = nppRoot->FirstChildElement(TEXT(\"ProjectPanels\"));\r\n\tif (oldProjPanelRootNode)\r\n\t{\r\n\t\t// Erase the Project Panel root\r\n\t\tnppRoot->RemoveChild(oldProjPanelRootNode);\r\n\t}\r\n\r\n\t// Create the Project Panel root\r\n\tTiXmlElement projPanelRootNode{TEXT(\"ProjectPanels\")};\r\n\r\n\t// Add 3 Project Panel parameters\r\n\tfor (int32_t i = 0 ; i < 3 ; ++i)\r\n\t{\r\n\t\tTiXmlElement projPanelNode{TEXT(\"ProjectPanel\")};\r\n\t\t(projPanelNode.ToElement())->SetAttribute(TEXT(\"id\"), i);\r\n\t\t(projPanelNode.ToElement())->SetAttribute(TEXT(\"workSpaceFile\"), _workSpaceFilePathes[i]);\r\n\r\n\t\t(projPanelRootNode.ToElement())->InsertEndChild(projPanelNode);\r\n\t}\r\n\r\n\t// (Re)Insert the Project Panel root\r\n\t(nppRoot->ToElement())->InsertEndChild(projPanelRootNode);\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::writeFileBrowserSettings(const vector<generic_string> & rootPaths, const generic_string & latestSelectedItemPath) const\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *oldFileBrowserRootNode = nppRoot->FirstChildElement(TEXT(\"FileBrowser\"));\r\n\tif (oldFileBrowserRootNode)\r\n\t{\r\n\t\t// Erase the file broser root\r\n\t\tnppRoot->RemoveChild(oldFileBrowserRootNode);\r\n\t}\r\n\r\n\t// Create the file browser root\r\n\tTiXmlElement fileBrowserRootNode{ TEXT(\"FileBrowser\") };\r\n\r\n\tif (rootPaths.size() != 0)\r\n\t{\r\n\t\tfileBrowserRootNode.SetAttribute(TEXT(\"latestSelectedItem\"), latestSelectedItemPath.c_str());\r\n\r\n\t\t// add roots\r\n\t\tsize_t len = rootPaths.size();\r\n\t\tfor (size_t i = 0; i < len; ++i)\r\n\t\t{\r\n\t\t\tTiXmlElement fbRootNode{ TEXT(\"root\") };\r\n\t\t\t(fbRootNode.ToElement())->SetAttribute(TEXT(\"foldername\"), rootPaths[i].c_str());\r\n\r\n\t\t\t(fileBrowserRootNode.ToElement())->InsertEndChild(fbRootNode);\r\n\t\t}\r\n\t}\r\n\r\n\t// (Re)Insert the file browser root\r\n\t(nppRoot->ToElement())->InsertEndChild(fileBrowserRootNode);\r\n\treturn true;\r\n}\r\n\r\nbool NppParameters::writeHistory(const TCHAR *fullpath)\r\n{\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *historyNode = nppRoot->FirstChildElement(TEXT(\"History\"));\r\n\tif (!historyNode)\r\n\t{\r\n\t\thistoryNode = nppRoot->InsertEndChild(TiXmlElement(TEXT(\"History\")));\r\n\t}\r\n\r\n\tTiXmlElement recentFileNode(TEXT(\"File\"));\r\n\t(recentFileNode.ToElement())->SetAttribute(TEXT(\"filename\"), fullpath);\r\n\r\n\t(historyNode->ToElement())->InsertEndChild(recentFileNode);\r\n\treturn true;\r\n}\r\n\r\nTiXmlNode * NppParameters::getChildElementByAttribut(TiXmlNode *pere, const TCHAR *childName,\\\r\n\t\t\tconst TCHAR *attributName, const TCHAR *attributVal) const\r\n{\r\n\tfor (TiXmlNode *childNode = pere->FirstChildElement(childName);\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(childName))\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *val = element->Attribute(attributName);\r\n\t\tif (val)\r\n\t\t{\r\n\t\t\tif (!lstrcmp(val, attributVal))\r\n\t\t\t\treturn childNode;\r\n\t\t}\r\n\t}\r\n\treturn NULL;\r\n}\r\n\r\n// 2 restes : L_H, L_USER\r\nLangType NppParameters::getLangIDFromStr(const TCHAR *langName)\r\n{\r\n\tint lang = static_cast<int32_t>(L_TEXT);\r\n\tfor (; lang < L_EXTERNAL; ++lang)\r\n\t{\r\n\t\tconst TCHAR * name = ScintillaEditView::_langNameInfoArray[lang]._langName;\r\n\t\tif (!lstrcmp(name, langName)) //found lang?\r\n\t\t{\r\n\t\t\treturn (LangType)lang;\r\n\t\t}\r\n\t}\r\n\r\n\t//Cannot find language, check if its an external one\r\n\r\n\tLangType l = (LangType)lang;\r\n\tif (l == L_EXTERNAL) //try find external lexer\r\n\t{\r\n\t\tint id = NppParameters::getInstance().getExternalLangIndexFromName(langName);\r\n\t\tif (id != -1) return (LangType)(id + L_EXTERNAL);\r\n\t}\r\n\r\n\treturn L_TEXT;\r\n}\r\n\r\ngeneric_string NppParameters::getLocPathFromStr(const generic_string & localizationCode)\r\n{\r\n\tif (localizationCode == TEXT(\"af\"))\r\n\t\treturn TEXT(\"afrikaans.xml\");\r\n\tif (localizationCode == TEXT(\"sq\"))\r\n\t\treturn TEXT(\"albanian.xml\");\r\n\tif (localizationCode == TEXT(\"ar\") || localizationCode == TEXT(\"ar-dz\") || localizationCode == TEXT(\"ar-bh\") || localizationCode == TEXT(\"ar-eg\") ||localizationCode == TEXT(\"ar-iq\") || localizationCode == TEXT(\"ar-jo\") || localizationCode == TEXT(\"ar-kw\") || localizationCode == TEXT(\"ar-lb\") || localizationCode == TEXT(\"ar-ly\") || localizationCode == TEXT(\"ar-ma\") || localizationCode == TEXT(\"ar-om\") || localizationCode == TEXT(\"ar-qa\") || localizationCode == TEXT(\"ar-sa\") || localizationCode == TEXT(\"ar-sy\") || localizationCode == TEXT(\"ar-tn\") || localizationCode == TEXT(\"ar-ae\") || localizationCode == TEXT(\"ar-ye\"))\r\n\t\treturn TEXT(\"arabic.xml\");\r\n\tif (localizationCode == TEXT(\"an\"))\r\n\t\treturn TEXT(\"aragonese.xml\");\r\n\tif (localizationCode == TEXT(\"az\"))\r\n\t\treturn TEXT(\"azerbaijani.xml\");\r\n\tif (localizationCode == TEXT(\"eu\"))\r\n\t\treturn TEXT(\"basque.xml\");\r\n\tif (localizationCode == TEXT(\"be\"))\r\n\t\treturn TEXT(\"belarusian.xml\");\r\n\tif (localizationCode == TEXT(\"bn\"))\r\n\t\treturn TEXT(\"bengali.xml\");\r\n\tif (localizationCode == TEXT(\"bs\"))\r\n\t\treturn TEXT(\"bosnian.xml\");\r\n\tif (localizationCode == TEXT(\"pt-br\"))\r\n\t\treturn TEXT(\"brazilian_portuguese.xml\");\r\n\tif (localizationCode == TEXT(\"br-fr\"))\r\n\t\treturn TEXT(\"breton.xml\");\r\n\tif (localizationCode == TEXT(\"bg\"))\r\n\t\treturn TEXT(\"bulgarian.xml\");\r\n\tif (localizationCode == TEXT(\"ca\"))\r\n\t\treturn TEXT(\"catalan.xml\");\r\n\tif (localizationCode == TEXT(\"zh-tw\") || localizationCode == TEXT(\"zh-hk\") || localizationCode == TEXT(\"zh-sg\"))\r\n\t\treturn TEXT(\"taiwaneseMandarin.xml\");\r\n\tif (localizationCode == TEXT(\"zh\") || localizationCode == TEXT(\"zh-cn\"))\r\n\t\treturn TEXT(\"chineseSimplified.xml\");\r\n\tif (localizationCode == TEXT(\"co\") || localizationCode == TEXT(\"co-fr\"))\r\n\t\treturn TEXT(\"corsican.xml\");\r\n\tif (localizationCode == TEXT(\"hr\"))\r\n\t\treturn TEXT(\"croatian.xml\");\r\n\tif (localizationCode == TEXT(\"cs\"))\r\n\t\treturn TEXT(\"czech.xml\");\r\n\tif (localizationCode == TEXT(\"da\"))\r\n\t\treturn TEXT(\"danish.xml\");\r\n\tif (localizationCode == TEXT(\"nl\") || localizationCode == TEXT(\"nl-be\"))\r\n\t\treturn TEXT(\"dutch.xml\");\r\n\tif (localizationCode == TEXT(\"eo\"))\r\n\t\treturn TEXT(\"esperanto.xml\");\r\n\tif (localizationCode == TEXT(\"et\"))\r\n\t\treturn TEXT(\"estonian.xml\");\r\n\tif (localizationCode == TEXT(\"fa\"))\r\n\t\treturn TEXT(\"farsi.xml\");\r\n\tif (localizationCode == TEXT(\"fi\"))\r\n\t\treturn TEXT(\"finnish.xml\");\r\n\tif (localizationCode == TEXT(\"fr\") || localizationCode == TEXT(\"fr-be\") || localizationCode == TEXT(\"fr-ca\") || localizationCode == TEXT(\"fr-fr\") || localizationCode == TEXT(\"fr-lu\") || localizationCode == TEXT(\"fr-mc\") || localizationCode == TEXT(\"fr-ch\"))\r\n\t\treturn TEXT(\"french.xml\");\r\n\tif (localizationCode == TEXT(\"fur\"))\r\n\t\treturn TEXT(\"friulian.xml\");\r\n\tif (localizationCode == TEXT(\"gl\"))\r\n\t\treturn TEXT(\"galician.xml\");\r\n\tif (localizationCode == TEXT(\"ka\"))\r\n\t\treturn TEXT(\"georgian.xml\");\r\n\tif (localizationCode == TEXT(\"de\") || localizationCode == TEXT(\"de-at\") || localizationCode == TEXT(\"de-de\") || localizationCode == TEXT(\"de-li\") || localizationCode == TEXT(\"de-lu\") || localizationCode == TEXT(\"de-ch\"))\r\n\t\treturn TEXT(\"german.xml\");\r\n\tif (localizationCode == TEXT(\"el\"))\r\n\t\treturn TEXT(\"greek.xml\");\r\n\tif (localizationCode == TEXT(\"gu\"))\r\n\t\treturn TEXT(\"gujarati.xml\");\r\n\tif (localizationCode == TEXT(\"he\"))\r\n\t\treturn TEXT(\"hebrew.xml\");\r\n\tif (localizationCode == TEXT(\"hi\"))\r\n\t\treturn TEXT(\"hindi.xml\");\r\n\tif (localizationCode == TEXT(\"hu\"))\r\n\t\treturn TEXT(\"hungarian.xml\");\r\n\tif (localizationCode == TEXT(\"id\"))\r\n\t\treturn TEXT(\"indonesian.xml\");\r\n\tif (localizationCode == TEXT(\"it\") || localizationCode == TEXT(\"it-ch\"))\r\n\t\treturn TEXT(\"italian.xml\");\r\n\tif (localizationCode == TEXT(\"ja\"))\r\n\t\treturn TEXT(\"japanese.xml\");\r\n\tif (localizationCode == TEXT(\"kn\"))\r\n\t\treturn TEXT(\"kannada.xml\");\r\n\tif (localizationCode == TEXT(\"kk\"))\r\n\t\treturn TEXT(\"kazakh.xml\");\r\n\tif (localizationCode == TEXT(\"ko\") || localizationCode == TEXT(\"ko-kp\") || localizationCode == TEXT(\"ko-kr\"))\r\n\t\treturn TEXT(\"korean.xml\");\r\n\tif (localizationCode == TEXT(\"ku\"))\r\n\t\treturn TEXT(\"kurdish.xml\");\r\n\tif (localizationCode == TEXT(\"ky\"))\r\n\t\treturn TEXT(\"kyrgyz.xml\");\r\n\tif (localizationCode == TEXT(\"lv\"))\r\n\t\treturn TEXT(\"latvian.xml\");\r\n\tif (localizationCode == TEXT(\"lt\"))\r\n\t\treturn TEXT(\"lithuanian.xml\");\r\n\tif (localizationCode == TEXT(\"lb\"))\r\n\t\treturn TEXT(\"luxembourgish.xml\");\r\n\tif (localizationCode == TEXT(\"mk\"))\r\n\t\treturn TEXT(\"macedonian.xml\");\r\n\tif (localizationCode == TEXT(\"ms\"))\r\n\t\treturn TEXT(\"malay.xml\");\r\n\tif (localizationCode == TEXT(\"mr\"))\r\n\t\treturn TEXT(\"marathi.xml\");\r\n\tif (localizationCode == TEXT(\"mn\"))\r\n\t\treturn TEXT(\"mongolian.xml\");\r\n\tif (localizationCode == TEXT(\"no\") || localizationCode == TEXT(\"nb\"))\r\n\t\treturn TEXT(\"norwegian.xml\");\r\n\tif (localizationCode == TEXT(\"nn\"))\r\n\t\treturn TEXT(\"nynorsk.xml\");\r\n\tif (localizationCode == TEXT(\"oc\"))\r\n\t\treturn TEXT(\"occitan.xml\");\r\n\tif (localizationCode == TEXT(\"pl\"))\r\n\t\treturn TEXT(\"polish.xml\");\r\n\tif (localizationCode == TEXT(\"pt\") || localizationCode == TEXT(\"pt-pt\"))\r\n\t\treturn TEXT(\"portuguese.xml\");\r\n\tif (localizationCode == TEXT(\"pa\") || localizationCode == TEXT(\"pa-in\"))\r\n\t\treturn TEXT(\"punjabi.xml\");\r\n\tif (localizationCode == TEXT(\"ro\") || localizationCode == TEXT(\"ro-mo\"))\r\n\t\treturn TEXT(\"romanian.xml\");\r\n\tif (localizationCode == TEXT(\"ru\") || localizationCode == TEXT(\"ru-mo\"))\r\n\t\treturn TEXT(\"russian.xml\");\r\n\tif (localizationCode == TEXT(\"sc\"))\r\n\t\treturn TEXT(\"sardinian.xml\");\r\n\tif (localizationCode == TEXT(\"sr\"))\r\n\t\treturn TEXT(\"serbian.xml\");\r\n\tif (localizationCode == TEXT(\"sr-cyrl-ba\") || localizationCode == TEXT(\"sr-cyrl-sp\"))\r\n\t\treturn TEXT(\"serbianCyrillic.xml\");\r\n\tif (localizationCode == TEXT(\"si\"))\r\n\t\treturn TEXT(\"sinhala.xml\");\r\n\tif (localizationCode == TEXT(\"sk\"))\r\n\t\treturn TEXT(\"slovak.xml\");\r\n\tif (localizationCode == TEXT(\"sl\"))\r\n\t\treturn TEXT(\"slovenian.xml\");\r\n\tif (localizationCode == TEXT(\"es\") || localizationCode == TEXT(\"es-bo\") || localizationCode == TEXT(\"es-cl\") || localizationCode == TEXT(\"es-co\") || localizationCode == TEXT(\"es-cr\") || localizationCode == TEXT(\"es-do\") || localizationCode == TEXT(\"es-ec\") || localizationCode == TEXT(\"es-sv\") || localizationCode == TEXT(\"es-gt\") || localizationCode == TEXT(\"es-hn\") || localizationCode == TEXT(\"es-mx\") || localizationCode == TEXT(\"es-ni\") || localizationCode == TEXT(\"es-pa\") || localizationCode == TEXT(\"es-py\") || localizationCode == TEXT(\"es-pe\") || localizationCode == TEXT(\"es-pr\") || localizationCode == TEXT(\"es-es\") || localizationCode == TEXT(\"es-uy\") || localizationCode == TEXT(\"es-ve\"))\r\n\t\treturn TEXT(\"spanish.xml\");\r\n\tif (localizationCode == TEXT(\"es-ar\"))\r\n\t\treturn TEXT(\"spanish_ar.xml\");\r\n\tif (localizationCode == TEXT(\"sv\"))\r\n\t\treturn TEXT(\"swedish.xml\");\r\n\tif (localizationCode == TEXT(\"tl\"))\r\n\t\treturn TEXT(\"tagalog.xml\");\r\n\tif (localizationCode == TEXT(\"tg-cyrl-tj\"))\r\n\t\treturn TEXT(\"tajikCyrillic.xml\");\r\n\tif (localizationCode == TEXT(\"ta\"))\r\n\t\treturn TEXT(\"tamil.xml\");\r\n\tif (localizationCode == TEXT(\"tt\"))\r\n\t\treturn TEXT(\"tatar.xml\");\r\n\tif (localizationCode == TEXT(\"te\"))\r\n\t\treturn TEXT(\"telugu.xml\");\r\n\tif (localizationCode == TEXT(\"th\"))\r\n\t\treturn TEXT(\"thai.xml\");\r\n\tif (localizationCode == TEXT(\"tr\"))\r\n\t\treturn TEXT(\"turkish.xml\");\r\n\tif (localizationCode == TEXT(\"uk\"))\r\n\t\treturn TEXT(\"ukrainian.xml\");\r\n\tif (localizationCode == TEXT(\"ur\") || localizationCode == TEXT(\"ur-pk\"))\r\n\t\treturn TEXT(\"urdu.xml\");\r\n\tif (localizationCode == TEXT(\"ug-cn\"))\r\n\t\treturn TEXT(\"uyghur.xml\");\r\n\tif (localizationCode == TEXT(\"uz\"))\r\n\t\treturn TEXT(\"uzbek.xml\");\r\n\tif (localizationCode == TEXT(\"uz-cyrl-uz\"))\r\n\t\treturn TEXT(\"uzbekCyrillic.xml\");\r\n\tif (localizationCode == TEXT(\"vec\"))\r\n\t\treturn TEXT(\"venetian.xml\");\r\n\tif (localizationCode == TEXT(\"vi\") || localizationCode == TEXT(\"vi-vn\"))\r\n\t\treturn TEXT(\"vietnamese.xml\");\r\n\tif (localizationCode == TEXT(\"cy-gb\"))\r\n\t\treturn TEXT(\"welsh.xml\");\r\n\tif (localizationCode == TEXT(\"zu\") || localizationCode == TEXT(\"zu-za\"))\r\n\t\treturn TEXT(\"zulu.xml\");\r\n\tif (localizationCode == TEXT(\"ne\") || localizationCode == TEXT(\"nep\"))\r\n\t\treturn TEXT(\"nepali.xml\");\r\n\tif (localizationCode == TEXT(\"oc-aranes\"))\r\n\t\treturn TEXT(\"aranese.xml\");\r\n\tif (localizationCode == TEXT(\"exy\"))\r\n\t\treturn TEXT(\"extremaduran.xml\");\r\n\tif (localizationCode == TEXT(\"keb\"))\r\n\t\treturn TEXT(\"kabyle.xml\");\r\n\tif (localizationCode == TEXT(\"lij\"))\r\n\t\treturn TEXT(\"ligurian.xml\");\r\n\tif (localizationCode == TEXT(\"ga\"))\r\n\t\treturn TEXT(\"irish.xml\");\r\n\tif (localizationCode == TEXT(\"sgs\"))\r\n\t\treturn TEXT(\"samogitian.xml\");\r\n\tif (localizationCode == TEXT(\"yue\"))\r\n\t\treturn TEXT(\"hongKongCantonese.xml\");\r\n\tif (localizationCode == TEXT(\"ab\") || localizationCode == TEXT(\"abk\"))\r\n\t\treturn TEXT(\"abkhazian.xml\");\r\n\r\n\treturn generic_string();\r\n}\r\n\r\n\r\nvoid NppParameters::feedKeyWordsParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *langRoot = node->FirstChildElement(TEXT(\"Languages\"));\r\n\tif (!langRoot)\r\n\t\treturn;\r\n\r\n\tfor (TiXmlNode *langNode = langRoot->FirstChildElement(TEXT(\"Language\"));\r\n\t\tlangNode ;\r\n\t\tlangNode = langNode->NextSibling(TEXT(\"Language\")) )\r\n\t{\r\n\t\tif (_nbLang < NB_LANG)\r\n\t\t{\r\n\t\t\tTiXmlElement* element = langNode->ToElement();\r\n\t\t\tconst TCHAR* name = element->Attribute(TEXT(\"name\"));\r\n\t\t\tif (name)\r\n\t\t\t{\r\n\t\t\t\t_langList[_nbLang] = new Lang(getLangIDFromStr(name), name);\r\n\t\t\t\t_langList[_nbLang]->setDefaultExtList(element->Attribute(TEXT(\"ext\")));\r\n\t\t\t\t_langList[_nbLang]->setCommentLineSymbol(element->Attribute(TEXT(\"commentLine\")));\r\n\t\t\t\t_langList[_nbLang]->setCommentStart(element->Attribute(TEXT(\"commentStart\")));\r\n\t\t\t\t_langList[_nbLang]->setCommentEnd(element->Attribute(TEXT(\"commentEnd\")));\r\n\r\n\t\t\t\tint tabSettings;\r\n\t\t\t\tif (element->Attribute(TEXT(\"tabSettings\"), &tabSettings))\r\n\t\t\t\t\t_langList[_nbLang]->setTabInfo(tabSettings);\r\n\r\n\t\t\t\tfor (TiXmlNode *kwNode = langNode->FirstChildElement(TEXT(\"Keywords\"));\r\n\t\t\t\t\tkwNode ;\r\n\t\t\t\t\tkwNode = kwNode->NextSibling(TEXT(\"Keywords\")) )\r\n\t\t\t\t{\r\n\t\t\t\t\tconst TCHAR *indexName = (kwNode->ToElement())->Attribute(TEXT(\"name\"));\r\n\t\t\t\t\tTiXmlNode *kwVal = kwNode->FirstChild();\r\n\t\t\t\t\tconst TCHAR *keyWords = TEXT(\"\");\r\n\t\t\t\t\tif ((indexName) && (kwVal))\r\n\t\t\t\t\t\tkeyWords = kwVal->Value();\r\n\r\n\t\t\t\t\tint i = getKwClassFromName(indexName);\r\n\r\n\t\t\t\t\tif (i >= 0 && i <= KEYWORDSET_MAX)\r\n\t\t\t\t\t\t_langList[_nbLang]->setWords(keyWords, i);\r\n\t\t\t\t}\r\n\t\t\t\t++_nbLang;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nextern \"C\" {\r\ntypedef DWORD (WINAPI * EESFUNC) (LPCTSTR, LPTSTR, DWORD);\r\n}\r\n\r\nvoid NppParameters::feedGUIParameters(TiXmlNode *node)\r\n{\r\n\tTiXmlNode *GUIRoot = node->FirstChildElement(TEXT(\"GUIConfigs\"));\r\n\tif (nullptr == GUIRoot)\r\n\t\treturn;\r\n\r\n\tfor (TiXmlNode *childNode = GUIRoot->FirstChildElement(TEXT(\"GUIConfig\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"GUIConfig\")) )\r\n\t{\r\n\t\tTiXmlElement* element = childNode->ToElement();\r\n\t\tconst TCHAR* nm = element->Attribute(TEXT(\"name\"));\r\n\t\tif (nullptr == nm)\r\n\t\t\tcontinue;\r\n\r\n\t\tif (!lstrcmp(nm, TEXT(\"ToolBar\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"visible\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._toolbarShow = false;\r\n\t\t\t\telse// if (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._toolbarShow = true;\r\n\t\t\t}\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tval = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"small\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_SMALL;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"large\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_LARGE;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"small2\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_SMALL2;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"large2\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_LARGE2;\r\n\t\t\t\t\telse //if (!lstrcmp(val, TEXT(\"standard\")))\r\n\t\t\t\t\t\t_nppGUI._toolBarStatus = TB_STANDARD;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"StatusBar\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"hide\")))\r\n\t\t\t\t\t\t_nppGUI._statusBarShow = false;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"show\")))\r\n\t\t\t\t\t\t_nppGUI._statusBarShow = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"MenuBar\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"hide\")))\r\n\t\t\t\t\t\t_nppGUI._menuBarShow = false;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"show\")))\r\n\t\t\t\t\t\t_nppGUI._menuBarShow = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TabBar\")))\r\n\t\t{\r\n\t\t\tbool isFailed = false;\r\n\t\t\tint oldValue = _nppGUI._tabStatus;\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"dragAndDrop\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus = TAB_DRAGNDROP;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus = 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"drawTopBar\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_DRAWTOPBAR;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"drawInactiveTab\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_DRAWINACTIVETAB;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"reduce\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_REDUCE;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"closeButton\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_CLOSEBUTTON;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"doubleClick2Close\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_DBCLK2CLOSE;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\t\t\tval = element->Attribute(TEXT(\"vertical\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_VERTICAL;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"multiLine\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_MULTILINE;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"hide\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_HIDE;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"quitOnEmpty\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_QUITONEMPTY;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"iconSetNumber\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"1\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= TAB_ALTICONS;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"0\")))\r\n\t\t\t\t\t_nppGUI._tabStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\r\n\t\t\tif (isFailed)\r\n\t\t\t\t_nppGUI._tabStatus = oldValue;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Auto-detection\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"yesOld\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = cdEnabledOld;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"autoOld\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledOld | cdAutoUpdate);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"Update2EndOld\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledOld | cdGo2end);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"autoUpdate2EndOld\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledOld | cdAutoUpdate | cdGo2end);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = cdEnabledNew;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"auto\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledNew | cdAutoUpdate);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"Update2End\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledNew | cdGo2end);\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"autoUpdate2End\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = (cdEnabledNew | cdAutoUpdate | cdGo2end);\r\n\t\t\t\t\telse //(!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._fileAutoDetection = cdDisabled;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TrayIcon\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._isMinimizedToTray = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"RememberLastSession\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._rememberLastSession = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._rememberLastSession = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"DetectEncoding\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._detectEncoding = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._detectEncoding = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"SaveAllConfirm\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._saveAllConfirm = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._saveAllConfirm = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (lstrcmp(nm, TEXT(\"MaitainIndent\")) == 0)\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._maitainIndent = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._maitainIndent = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t// <GUIConfig name=\"MarkAll\" matchCase=\"yes\" wholeWordOnly=\"yes\" </GUIConfig>\r\n\t\telse if (!lstrcmp(nm, TEXT(\"MarkAll\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"matchCase\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._markAllCaseSensitive = true;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._markAllCaseSensitive = false;\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"wholeWordOnly\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._markAllWordOnly = true;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t_nppGUI._markAllWordOnly = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// <GUIConfig name=\"SmartHighLight\" matchCase=\"yes\" wholeWordOnly=\"yes\" useFindSettings=\"no\">yes</GUIConfig>\r\n\t\telse if (!lstrcmp(nm, TEXT(\"SmartHighLight\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._enableSmartHilite = true;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\t_nppGUI._enableSmartHilite = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"matchCase\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._smartHiliteCaseSensitive = true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._smartHiliteCaseSensitive = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"wholeWordOnly\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._smartHiliteWordOnly = true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._smartHiliteWordOnly = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"useFindSettings\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._smartHiliteUseFindSettings = true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._smartHiliteUseFindSettings = false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"onAnotherView\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t\t_nppGUI._smartHiliteOnAnotherView = true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._smartHiliteOnAnotherView = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TagsMatchHighLight\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._enableTagsMatchHilite = !lstrcmp(val, TEXT(\"yes\"));\r\n\t\t\t\t\tconst TCHAR *tahl = element->Attribute(TEXT(\"TagAttrHighLight\"));\r\n\t\t\t\t\tif (tahl)\r\n\t\t\t\t\t\t_nppGUI._enableTagAttrsHilite = !lstrcmp(tahl, TEXT(\"yes\"));\r\n\r\n\t\t\t\t\ttahl = element->Attribute(TEXT(\"HighLightNonHtmlZone\"));\r\n\t\t\t\t\tif (tahl)\r\n\t\t\t\t\t\t_nppGUI._enableHiliteNonHTMLZone = !lstrcmp(tahl, TEXT(\"yes\"));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TaskList\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._doTaskList = (!lstrcmp(val, TEXT(\"yes\")))?true:false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"MRU\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._styleMRU = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"URL\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tint const i = generic_atoi (val);\r\n\t\t\t\t\tif ((i >= urlMin) && (i <= urlMax))\r\n\t\t\t\t\t\t_nppGUI._styleURL = urlMode(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"uriCustomizedSchemes\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t_nppGUI._uriSchemes = val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"CheckHistoryFiles\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\t_nppGUI._checkHistoryFiles = false;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t\t_nppGUI._checkHistoryFiles = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"ScintillaViewsSplitter\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"vertical\")))\r\n\t\t\t\t\t\t_nppGUI._splitterPos = POS_VERTICAL;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"horizontal\")))\r\n\t\t\t\t\t\t_nppGUI._splitterPos = POS_HORIZOTAL;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"UserDefineDlg\")))\r\n\t\t{\r\n\t\t\tbool isFailed = false;\r\n\t\t\tint oldValue = _nppGUI._userDefineDlgStatus;\r\n\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"hide\")))\r\n\t\t\t\t\t\t_nppGUI._userDefineDlgStatus = 0;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"show\")))\r\n\t\t\t\t\t\t_nppGUI._userDefineDlgStatus = UDD_SHOW;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tisFailed = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"position\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (!lstrcmp(val, TEXT(\"docked\")))\r\n\t\t\t\t\t_nppGUI._userDefineDlgStatus |= UDD_DOCKED;\r\n\t\t\t\telse if (!lstrcmp(val, TEXT(\"undocked\")))\r\n\t\t\t\t\t_nppGUI._userDefineDlgStatus |= 0;\r\n\t\t\t\telse\r\n\t\t\t\t\tisFailed = true;\r\n\t\t\t}\r\n\t\t\tif (isFailed)\r\n\t\t\t\t_nppGUI._userDefineDlgStatus = oldValue;\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"TabSetting\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"size\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._tabSize = i;\r\n\r\n\t\t\tif ((_nppGUI._tabSize == -1) || (_nppGUI._tabSize == 0))\r\n\t\t\t\t_nppGUI._tabSize = 4;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"replaceBySpace\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._tabReplacedBySpace = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Caret\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"width\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._caretWidth = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"blinkRate\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._caretBlinkRate = i;\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"ScintillaGlobalSettings\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"enableMultiSelection\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(val, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._enableMultiSelection = true;\r\n\t\t\t\telse if (lstrcmp(val, TEXT(\"no\")) == 0)\r\n\t\t\t\t\t_nppGUI._enableMultiSelection = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"AppPosition\")))\r\n\t\t{\r\n\t\t\tRECT oldRect = _nppGUI._appPos;\r\n\t\t\tbool fuckUp = true;\r\n\t\t\tint i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"x\"), &i))\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._appPos.left = i;\r\n\r\n\t\t\t\tif (element->Attribute(TEXT(\"y\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._appPos.top = i;\r\n\r\n\t\t\t\t\tif (element->Attribute(TEXT(\"width\"), &i))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_nppGUI._appPos.right = i;\r\n\r\n\t\t\t\t\t\tif (element->Attribute(TEXT(\"height\"), &i))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_nppGUI._appPos.bottom = i;\r\n\t\t\t\t\t\t\tfuckUp = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (fuckUp)\r\n\t\t\t\t_nppGUI._appPos = oldRect;\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"isMaximized\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._isMaximized = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"FindWindowPosition\")))\r\n\t\t{\r\n\t\t\tRECT oldRect = _nppGUI._findWindowPos;\r\n\t\t\tbool incomplete = true;\r\n\t\t\tint i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"left\"), &i))\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._findWindowPos.left = i;\r\n\r\n\t\t\t\tif (element->Attribute(TEXT(\"top\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\t_nppGUI._findWindowPos.top = i;\r\n\r\n\t\t\t\t\tif (element->Attribute(TEXT(\"right\"), &i))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t_nppGUI._findWindowPos.right = i;\r\n\r\n\t\t\t\t\t\tif (element->Attribute(TEXT(\"bottom\"), &i))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t_nppGUI._findWindowPos.bottom = i;\r\n\t\t\t\t\t\t\tincomplete = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (incomplete)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._findWindowPos = oldRect;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"isLessModeOn\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._findWindowLessMode = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"FinderConfig\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"wrappedLines\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._finderLinesAreCurrentlyWrapped = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"purgeBeforeEverySearch\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._finderPurgeBeforeEverySearch = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t\t}\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"showOnlyOneEntryPerFoundLine\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._finderShowOnlyOneEntryPerFoundLine = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"NewDocDefaultSettings\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"format\"), &i))\r\n\t\t\t{\r\n\t\t\t\tEolType newFormat = EolType::osdefault;\r\n\t\t\t\tswitch (i)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase static_cast<LPARAM>(EolType::windows) :\r\n\t\t\t\t\t\tnewFormat = EolType::windows;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase static_cast<LPARAM>(EolType::macos) :\r\n\t\t\t\t\t\tnewFormat = EolType::macos;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase static_cast<LPARAM>(EolType::unix) :\r\n\t\t\t\t\t\tnewFormat = EolType::unix;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tassert(false and \"invalid buffer format - fallback to default\");\r\n\t\t\t\t}\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._format = newFormat;\r\n\t\t\t}\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"encoding\"), &i))\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._unicodeMode = (UniMode)i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"lang\"), &i))\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._lang = (LangType)i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"codepage\"), &i))\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._codepage = (LangType)i;\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"openAnsiAsUTF8\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._newDocDefaultSettings._openAnsiAsUtf8 = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"langsExcluded\")))\r\n\t\t{\r\n\t\t\t// TODO\r\n\t\t\tint g0 = 0; // up to 8\r\n\t\t\tint g1 = 0; // up to 16\r\n\t\t\tint g2 = 0; // up to 24\r\n\t\t\tint g3 = 0; // up to 32\r\n\t\t\tint g4 = 0; // up to 40\r\n\t\t\tint g5 = 0; // up to 48\r\n\t\t\tint g6 = 0; // up to 56\r\n\t\t\tint g7 = 0; // up to 64\r\n\t\t\tint g8 = 0; // up to 72\r\n\t\t\tint g9 = 0; // up to 80\r\n\t\t\tint g10= 0; // up to 88\r\n\t\t\tint g11= 0; // up to 96\r\n\t\t\tint g12= 0; // up to 104\r\n\r\n\t\t\t// TODO some refactoring needed here....\r\n\t\t\t{\r\n\t\t\t\tint i;\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr0\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg0 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr1\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg1 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr2\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg2 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr3\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg3 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr4\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg4 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr5\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg5 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr6\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg6 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr7\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg7 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr8\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg8 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr9\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg9 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr10\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg10 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr11\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg11 = i;\r\n\t\t\t\t}\r\n\t\t\t\tif (element->Attribute(TEXT(\"gr12\"), &i))\r\n\t\t\t\t{\r\n\t\t\t\t\tif (i <= 255)\r\n\t\t\t\t\t\tg12 = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tUCHAR mask = 1;\r\n\t\t\tfor (int i = 0 ; i < 8 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g0)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 8 ; i < 16 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g1)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 16 ; i < 24 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g2)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 24 ; i < 32 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g3)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 32 ; i < 40 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g4)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 40 ; i < 48 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g5)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 48 ; i < 56 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g6)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 56 ; i < 64 ; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g7)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 64; i < 72; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g8)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 72; i < 80; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g9)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 80; i < 88; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g10)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 88; i < 96; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g11)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tmask = 1;\r\n\t\t\tfor (int i = 96; i < 104; ++i)\r\n\t\t\t{\r\n\t\t\t\tif (mask & g12)\r\n\t\t\t\t\t_nppGUI._excludedLangList.push_back(LangMenuItem((LangType)i));\r\n\t\t\t\tmask <<= 1;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"langMenuCompact\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._isLangMenuCompact = (!lstrcmp(val, TEXT(\"yes\")));\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Print\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* val = element->Attribute(TEXT(\"lineNumber\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._printLineNumber = (!lstrcmp(val, TEXT(\"yes\")));\r\n\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"printOption\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._printOption = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"headerLeft\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._headerLeft = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"headerMiddle\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._headerMiddle = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"headerRight\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._headerRight = val;\r\n\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"footerLeft\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._footerLeft = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"footerMiddle\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._footerMiddle = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"footerRight\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._footerRight = val;\r\n\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"headerFontName\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._headerFontName = val;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"footerFontName\"));\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._printSettings._footerFontName = val;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"headerFontStyle\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._headerFontStyle = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"footerFontStyle\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._footerFontStyle = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"headerFontSize\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._headerFontSize = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"footerFontSize\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._footerFontSize = i;\r\n\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"margeLeft\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._marge.left = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"margeTop\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._marge.top = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"margeRight\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._marge.right = i;\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"margeBottom\"), &i))\r\n\t\t\t\t_nppGUI._printSettings._marge.bottom = i;\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"ScintillaPrimaryView\")))\r\n\t\t{\r\n\t\t\tfeedScintillaParam(element);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Backup\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"action\"), &i))\r\n\t\t\t\t_nppGUI._backup = (BackupFeature)i;\r\n\r\n\t\t\tconst TCHAR *bDir = element->Attribute(TEXT(\"useCustumDir\"));\r\n\t\t\tif (bDir)\r\n\t\t\t{\r\n\t\t\t\t_nppGUI._useDir = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\t\t\t}\r\n\t\t\tconst TCHAR *pDir = element->Attribute(TEXT(\"dir\"));\r\n\t\t\tif (pDir)\r\n\t\t\t\t_nppGUI._backupDir = pDir;\r\n\r\n\t\t\tconst TCHAR *isSnapshotModeStr = element->Attribute(TEXT(\"isSnapshotMode\"));\r\n\t\t\tif (isSnapshotModeStr && !lstrcmp(isSnapshotModeStr, TEXT(\"no\")))\r\n\t\t\t\t_nppGUI._isSnapshotMode = false;\r\n\r\n\t\t\tint timing;\r\n\t\t\tif (element->Attribute(TEXT(\"snapshotBackupTiming\"), &timing))\r\n\t\t\t\t_nppGUI._snapshotBackupTiming = timing;\r\n\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"DockingManager\")))\r\n\t\t{\r\n\t\t\tfeedDockingManager(element);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"globalOverride\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *bDir = element->Attribute(TEXT(\"fg\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableFg = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"bg\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableBg = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"font\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableFont = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"fontSize\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableFontSize = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"bold\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableBold = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"italic\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableItalic = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tbDir = element->Attribute(TEXT(\"underline\"));\r\n\t\t\tif (bDir)\r\n\t\t\t\t_nppGUI._globalOverride.enableUnderLine = (lstrcmp(bDir, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"auto-completion\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"autoCAction\"), &i))\r\n\t\t\t\t_nppGUI._autocStatus = static_cast<NppGUI::AutocStatus>(i);\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"triggerFromNbChar\"), &i))\r\n\t\t\t\t_nppGUI._autocFromLen = i;\r\n\r\n\t\t\tconst TCHAR * optName = element->Attribute(TEXT(\"autoCIgnoreNumbers\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._autocIgnoreNumbers = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"insertSelectedItemUseENTER\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._autocInsertSelectedUseENTER = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"insertSelectedItemUseTAB\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._autocInsertSelectedUseTAB = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"funcParams\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._funcParams = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"auto-insert\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * optName = element->Attribute(TEXT(\"htmlXmlTag\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doHtmlXmlTag = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"parentheses\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doParentheses = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"brackets\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doBrackets = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"curlyBrackets\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doCurlyBrackets = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"quotes\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doQuotes = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\toptName = element->Attribute(TEXT(\"doubleQuotes\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._matchedPairConf._doDoubleQuotes = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tfor (TiXmlNode *subChildNode = childNode->FirstChildElement(TEXT(\"UserDefinePair\"));\r\n\t\t\t\t subChildNode;\r\n\t\t\t\t subChildNode = subChildNode->NextSibling(TEXT(\"UserDefinePair\")) )\r\n\t\t\t{\r\n\t\t\t\tint open = -1;\r\n\t\t\t\tint openVal = 0;\r\n\t\t\t\tconst TCHAR *openValStr = (subChildNode->ToElement())->Attribute(TEXT(\"open\"), &openVal);\r\n\t\t\t\tif (openValStr && (openVal >= 0 && openVal < 128))\r\n\t\t\t\t\topen = openVal;\r\n\r\n\t\t\t\tint close = -1;\r\n\t\t\t\tint closeVal = 0;\r\n\t\t\t\tconst TCHAR *closeValStr = (subChildNode->ToElement())->Attribute(TEXT(\"close\"), &closeVal);\r\n\t\t\t\tif (closeValStr && (closeVal >= 0 && closeVal <= 128))\r\n\t\t\t\t\tclose = closeVal;\r\n\r\n\t\t\t\tif (open != -1 && close != -1)\r\n\t\t\t\t\t_nppGUI._matchedPairConf._matchedPairsInit.push_back(pair<char, char>(char(open), char(close)));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"sessionExt\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._definedSessionExt = val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"workspaceExt\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._definedWorkspaceExt = val;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"noUpdate\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *n = childNode->FirstChild();\r\n\t\t\tif (n)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR* val = n->Value();\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._autoUpdateOpt._doAutoUpdate = (!lstrcmp(val, TEXT(\"yes\")))?false:true;\r\n\r\n\t\t\t\tint i;\r\n\t\t\t\tval = element->Attribute(TEXT(\"intervalDays\"), &i);\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._autoUpdateOpt._intervalDays = i;\r\n\r\n\t\t\t\tval = element->Attribute(TEXT(\"nextUpdateDate\"));\r\n\t\t\t\tif (val)\r\n\t\t\t\t\t_nppGUI._autoUpdateOpt._nextUpdateDate = Date(val);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"openSaveDir\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * value = element->Attribute(TEXT(\"value\"));\r\n\t\t\tif (value && value[0])\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(value, TEXT(\"1\")) == 0)\r\n\t\t\t\t\t_nppGUI._openSaveDir = dir_last;\r\n\t\t\t\telse if (lstrcmp(value, TEXT(\"2\")) == 0)\r\n\t\t\t\t\t_nppGUI._openSaveDir = dir_userDef;\r\n\t\t\t\telse\r\n\t\t\t\t\t_nppGUI._openSaveDir = dir_followCurrent;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR * path = element->Attribute(TEXT(\"defaultDirPath\"));\r\n\t\t\tif (path && path[0])\r\n\t\t\t{\r\n\t\t\t\tlstrcpyn(_nppGUI._defaultDir, path, MAX_PATH);\r\n\t\t\t\t::ExpandEnvironmentStrings(_nppGUI._defaultDir, _nppGUI._defaultDirExp, MAX_PATH);\r\n\t\t\t}\r\n \t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"titleBar\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * value = element->Attribute(TEXT(\"short\"));\r\n\t\t\t_nppGUI._shortTitlebar = false;\t//default state\r\n\t\t\tif (value && value[0])\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(value, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._shortTitlebar = true;\r\n\t\t\t\telse if (lstrcmp(value, TEXT(\"no\")) == 0)\r\n\t\t\t\t\t_nppGUI._shortTitlebar = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"stylerTheme\")))\r\n\t\t{\r\n\t\t\tconst TCHAR *themePath = element->Attribute(TEXT(\"path\"));\r\n\t\t\tif (themePath != NULL && themePath[0])\r\n\t\t\t\t_nppGUI._themeName.assign(themePath);\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"insertDateTime\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* customFormat = element->Attribute(TEXT(\"customizedFormat\"));\r\n\t\t\tif (customFormat != NULL && customFormat[0])\r\n\t\t\t\t_nppGUI._dateTimeFormat = customFormat;\r\n\r\n\t\t\tconst TCHAR* value = element->Attribute(TEXT(\"reverseDefaultOrder\"));\r\n\t\t\tif (value && value[0])\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(value, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._dateTimeReverseDefaultOrder = true;\r\n\t\t\t\telse if (lstrcmp(value, TEXT(\"no\")) == 0)\r\n\t\t\t\t\t_nppGUI._dateTimeReverseDefaultOrder = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\telse if (!lstrcmp(nm, TEXT(\"wordCharList\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * value = element->Attribute(TEXT(\"useDefault\"));\r\n\t\t\tif (value && value[0])\r\n\t\t\t{\r\n\t\t\t\tif (lstrcmp(value, TEXT(\"yes\")) == 0)\r\n\t\t\t\t\t_nppGUI._isWordCharDefault = true;\r\n\t\t\t\telse if (lstrcmp(value, TEXT(\"no\")) == 0)\r\n\t\t\t\t\t_nppGUI._isWordCharDefault = false;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR *charsAddedW = element->Attribute(TEXT(\"charsAdded\"));\r\n\t\t\tif (charsAddedW)\r\n\t\t\t{\r\n\t\t\t\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\t\t\t\t_nppGUI._customWordChars = wmc.wchar2char(charsAddedW, SC_CP_UTF8);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"delimiterSelection\")))\r\n\t\t{\r\n\t\t\tint leftmost = 0;\r\n\t\t\telement->Attribute(TEXT(\"leftmostDelimiter\"), &leftmost);\r\n\t\t\tif (leftmost > 0 && leftmost < 256)\r\n\t\t\t\t_nppGUI._leftmostDelimiter = static_cast<char>(leftmost);\r\n\r\n\t\t\tint rightmost = 0;\r\n\t\t\telement->Attribute(TEXT(\"rightmostDelimiter\"), &rightmost);\r\n\t\t\tif (rightmost > 0 && rightmost < 256)\r\n\t\t\t\t_nppGUI._rightmostDelimiter = static_cast<char>(rightmost);\r\n\r\n\t\t\tconst TCHAR *delimiterSelectionOnEntireDocument = element->Attribute(TEXT(\"delimiterSelectionOnEntireDocument\"));\r\n\t\t\tif (delimiterSelectionOnEntireDocument != NULL && !lstrcmp(delimiterSelectionOnEntireDocument, TEXT(\"yes\")))\r\n\t\t\t\t_nppGUI._delimiterSelectionOnEntireDocument = true;\r\n\t\t\telse\r\n\t\t\t\t_nppGUI._delimiterSelectionOnEntireDocument = false;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"multiInst\")))\r\n\t\t{\r\n\t\t\tint val = 0;\r\n\t\t\telement->Attribute(TEXT(\"setting\"), &val);\r\n\t\t\tif (val < 0 || val > 2)\r\n\t\t\t\tval = 0;\r\n\t\t\t_nppGUI._multiInstSetting = (MultiInstSetting)val;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"searchEngine\")))\r\n\t\t{\r\n\t\t\tint i;\r\n\t\t\tif (element->Attribute(TEXT(\"searchEngineChoice\"), &i))\r\n\t\t\t\t_nppGUI._searchEngineChoice = static_cast<NppGUI::SearchEngineChoice>(i);\r\n\r\n\t\t\tconst TCHAR * searchEngineCustom = element->Attribute(TEXT(\"searchEngineCustom\"));\r\n\t\t\tif (searchEngineCustom && searchEngineCustom[0])\r\n\t\t\t\t_nppGUI._searchEngineCustom = searchEngineCustom;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"Searching\")))\r\n\t\t{\r\n\t\t\tconst TCHAR* optNameMonoFont = element->Attribute(TEXT(\"monospacedFontFindDlg\"));\r\n\t\t\tif (optNameMonoFont)\r\n\t\t\t\t_nppGUI._monospacedFontFindDlg = (lstrcmp(optNameMonoFont, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\t//This is an option from previous versions of notepad++.  It is handled for compatibility with older settings.\r\n\t\t\tconst TCHAR* optStopFillingFindField = element->Attribute(TEXT(\"stopFillingFindField\"));\r\n\t\t\tif (optStopFillingFindField) \r\n\t\t\t{\r\n\t\t\t\t_nppGUI._fillFindFieldWithSelected = (lstrcmp(optStopFillingFindField, TEXT(\"no\")) == 0);\r\n\t\t\t\t_nppGUI._fillFindFieldSelectCaret = _nppGUI._fillFindFieldWithSelected;\r\n\t\t\t}\r\n\r\n\t\t\tconst TCHAR* optFillFindFieldWithSelected = element->Attribute(TEXT(\"fillFindFieldWithSelected\"));\r\n\t\t\tif (optFillFindFieldWithSelected)\r\n\t\t\t\t_nppGUI._fillFindFieldWithSelected = (lstrcmp(optFillFindFieldWithSelected, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optFillFindFieldSelectCaret = element->Attribute(TEXT(\"fillFindFieldSelectCaret\"));\r\n\t\t\tif (optFillFindFieldSelectCaret)\r\n\t\t\t\t_nppGUI._fillFindFieldSelectCaret = (lstrcmp(optFillFindFieldSelectCaret, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optFindDlgAlwaysVisible = element->Attribute(TEXT(\"findDlgAlwaysVisible\"));\r\n\t\t\tif (optFindDlgAlwaysVisible)\r\n\t\t\t\t_nppGUI._findDlgAlwaysVisible = (lstrcmp(optFindDlgAlwaysVisible, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optConfirmReplaceOpenDocs = element->Attribute(TEXT(\"confirmReplaceInAllOpenDocs\"));\r\n\t\t\tif (optConfirmReplaceOpenDocs)\r\n\t\t\t\t_nppGUI._confirmReplaceInAllOpenDocs = (lstrcmp(optConfirmReplaceOpenDocs, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optReplaceStopsWithoutFindingNext = element->Attribute(TEXT(\"replaceStopsWithoutFindingNext\"));\r\n\t\t\tif (optReplaceStopsWithoutFindingNext)\r\n\t\t\t\t_nppGUI._replaceStopsWithoutFindingNext = (lstrcmp(optReplaceStopsWithoutFindingNext, TEXT(\"yes\")) == 0);\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"MISC\")))\r\n\t\t{\r\n\t\t\tconst TCHAR * optName = element->Attribute(TEXT(\"fileSwitcherWithoutExtColumn\"));\r\n\t\t\tif (optName)\r\n\t\t\t\t_nppGUI._fileSwitcherWithoutExtColumn = (lstrcmp(optName, TEXT(\"yes\")) == 0);\r\n\t\t\t\r\n\t\t\tint i = 0;\r\n\t\t\tif (element->Attribute(TEXT(\"fileSwitcherExtWidth\"), &i))\r\n\t\t\t\t_nppGUI._fileSwitcherExtWidth = i;\r\n\r\n\t\t\tconst TCHAR * optNamePath = element->Attribute(TEXT(\"fileSwitcherWithoutPathColumn\"));\r\n\t\t\tif (optNamePath)\r\n\t\t\t\t_nppGUI._fileSwitcherWithoutPathColumn = (lstrcmp(optNamePath, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tif (element->Attribute(TEXT(\"fileSwitcherPathWidth\"), &i))\r\n\t\t\t\t_nppGUI._fileSwitcherPathWidth = i;\r\n\r\n\t\t\tconst TCHAR * optNameBackSlashEscape = element->Attribute(TEXT(\"backSlashIsEscapeCharacterForSql\"));\r\n\t\t\tif (optNameBackSlashEscape && !lstrcmp(optNameBackSlashEscape, TEXT(\"no\")))\r\n\t\t\t\t_nppGUI._backSlashIsEscapeCharacterForSql = false;\r\n\r\n\t\t\tconst TCHAR * optNameWriteTechnologyEngine = element->Attribute(TEXT(\"writeTechnologyEngine\"));\r\n\t\t\tif (optNameWriteTechnologyEngine)\r\n\t\t\t\t_nppGUI._writeTechnologyEngine = (lstrcmp(optNameWriteTechnologyEngine, TEXT(\"1\")) == 0) ? directWriteTechnology : defaultTechnology;\r\n\r\n\t\t\tconst TCHAR * optNameFolderDroppedOpenFiles = element->Attribute(TEXT(\"isFolderDroppedOpenFiles\"));\r\n\t\t\tif (optNameFolderDroppedOpenFiles)\r\n\t\t\t\t_nppGUI._isFolderDroppedOpenFiles = (lstrcmp(optNameFolderDroppedOpenFiles, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR * optDocPeekOnTab = element->Attribute(TEXT(\"docPeekOnTab\"));\r\n\t\t\tif (optDocPeekOnTab)\r\n\t\t\t\t_nppGUI._isDocPeekOnTab = (lstrcmp(optDocPeekOnTab, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR * optDocPeekOnMap = element->Attribute(TEXT(\"docPeekOnMap\"));\r\n\t\t\tif (optDocPeekOnMap)\r\n\t\t\t\t_nppGUI._isDocPeekOnMap = (lstrcmp(optDocPeekOnMap, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* optSortFunctionList = element->Attribute(TEXT(\"sortFunctionList\"));\r\n\t\t\tif (optSortFunctionList)\r\n\t\t\t\t_nppGUI._shouldSortFunctionList = (lstrcmp(optSortFunctionList, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR* saveDlgExtFilterToAllTypes = element->Attribute(TEXT(\"saveDlgExtFilterToAllTypes\"));\r\n\t\t\tif (saveDlgExtFilterToAllTypes)\r\n\t\t\t\t_nppGUI._setSaveDlgExtFiltToAllTypes = (lstrcmp(saveDlgExtFilterToAllTypes, TEXT(\"yes\")) == 0);\r\n\r\n\t\t\tconst TCHAR * optMuteSounds = element->Attribute(TEXT(\"muteSounds\"));\r\n\t\t\tif (optMuteSounds)\r\n\t\t\t\t_nppGUI._muteSounds = lstrcmp(optMuteSounds, TEXT(\"yes\")) == 0;\r\n\r\n\t\t\tconst TCHAR * optEnableFoldCmdToggable = element->Attribute(TEXT(\"enableFoldCmdToggable\"));\r\n\t\t\tif (optEnableFoldCmdToggable)\r\n\t\t\t\t_nppGUI._enableFoldCmdToggable = lstrcmp(optEnableFoldCmdToggable, TEXT(\"yes\")) == 0;\r\n\r\n\t\t\tconst TCHAR * hideMenuRightShortcuts = element->Attribute(TEXT(\"hideMenuRightShortcuts\"));\r\n\t\t\tif (hideMenuRightShortcuts)\r\n\t\t\t\t_nppGUI._hideMenuRightShortcuts = lstrcmp(hideMenuRightShortcuts, TEXT(\"yes\")) == 0;\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"commandLineInterpreter\")))\r\n\t\t{\r\n\t\t\tTiXmlNode *node = childNode->FirstChild();\r\n\t\t\tif (node)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR *cli = node->Value();\r\n\t\t\t\tif (cli && cli[0])\r\n\t\t\t\t\t_nppGUI._commandLineInterpreter.assign(cli);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (!lstrcmp(nm, TEXT(\"DarkMode\")))\r\n\t\t{\r\n\t\t\tauto parseYesNoBoolAttribute = [&element](const TCHAR* name, bool defaultValue = false)->bool {\r\n\t\t\t\tconst TCHAR* val = element->Attribute(name);\r\n\t\t\t\tif (val)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!lstrcmp(val, TEXT(\"yes\")))\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\telse if (!lstrcmp(val, TEXT(\"no\")))\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn defaultValue;\r\n\t\t\t};\r\n\r\n\t\t\t_nppGUI._darkmode._isEnabled = parseYesNoBoolAttribute(TEXT(\"enable\"));\r\n\r\n\t\t\t//_nppGUI._darkmode._isEnabledPlugin = parseYesNoBoolAttribute(TEXT(\"enablePlugin\"));\r\n\r\n\t\t\tint i;\r\n\t\t\tconst TCHAR* val;\r\n\t\t\tval = element->Attribute(TEXT(\"colorTone\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._colorTone = static_cast<NppDarkMode::ColorTone>(i);\r\n\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorTop\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.pureBackground = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorMenuHotTrack\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.hotBackground = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorActive\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.softerBackground = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorMain\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.background = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorError\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.errorBackground = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorText\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.text = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorDarkText\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.darkerText = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorDisabledText\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.disabledText = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorLinkText\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.linkText = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorEdge\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.edge = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorHotEdge\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.hotEdge = i;\r\n\r\n\t\t\tval = element->Attribute(TEXT(\"customColorDisabledEdge\"), &i);\r\n\t\t\tif (val)\r\n\t\t\t\t_nppGUI._darkmode._customColors.disabledEdge = i;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::feedScintillaParam(TiXmlNode *node)\r\n{\r\n\tTiXmlElement* element = node->ToElement();\r\n\r\n\t// Line Number Margin\r\n\tconst TCHAR *nm = element->Attribute(TEXT(\"lineNumberMargin\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._lineNumberMarginShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._lineNumberMarginShow = false;\r\n\t}\r\n\r\n\t// Line Number Margin dynamic width\r\n\tnm = element->Attribute(TEXT(\"lineNumberDynamicWidth\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._lineNumberMarginDynamicWidth = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._lineNumberMarginDynamicWidth = false;\r\n\t}\r\n\r\n\t// Bookmark Margin\r\n\tnm = element->Attribute(TEXT(\"bookMarkMargin\"));\r\n\tif (nm)\r\n\t{\r\n\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._bookMarkMarginShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._bookMarkMarginShow = false;\r\n\t}\r\n\r\n\t// Indent GuideLine\r\n\tnm = element->Attribute(TEXT(\"indentGuideLine\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._indentGuideLineShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._indentGuideLineShow= false;\r\n\t}\r\n\r\n\t// Folder Mark Style\r\n\tnm = element->Attribute(TEXT(\"folderMarkStyle\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"box\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_BOX;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"circle\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_CIRCLE;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"arrow\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_ARROW;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"simple\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_SIMPLE;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"none\")))\r\n\t\t\t_svp._folderStyle = FOLDER_STYLE_NONE;\r\n\t}\r\n\r\n\t// Line Wrap method\r\n\tnm = element->Attribute(TEXT(\"lineWrapMethod\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"default\")))\r\n\t\t\t_svp._lineWrapMethod = LINEWRAP_DEFAULT;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"aligned\")))\r\n\t\t\t_svp._lineWrapMethod = LINEWRAP_ALIGNED;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"indent\")))\r\n\t\t\t_svp._lineWrapMethod = LINEWRAP_INDENT;\r\n\t}\r\n\r\n\t// Current Line Highlighting State\r\n\tnm = element->Attribute(TEXT(\"currentLineHilitingShow\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._currentLineHiliteMode = LINEHILITE_HILITE;\r\n\t\telse\r\n\t\t\t_svp._currentLineHiliteMode = LINEHILITE_NONE;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tconst TCHAR* currentLineModeStr = element->Attribute(TEXT(\"currentLineIndicator\"));\r\n\t\tif (currentLineModeStr && currentLineModeStr[0])\r\n\t\t{\r\n\t\t\tif (lstrcmp(currentLineModeStr, TEXT(\"1\")) == 0)\r\n\t\t\t\t_svp._currentLineHiliteMode = LINEHILITE_HILITE;\r\n\t\t\telse if (lstrcmp(currentLineModeStr, TEXT(\"2\")) == 0)\r\n\t\t\t\t_svp._currentLineHiliteMode = LINEHILITE_FRAME;\r\n\t\t\telse\r\n\t\t\t\t_svp._currentLineHiliteMode = LINEHILITE_NONE;\r\n\t\t}\r\n\t}\r\n\r\n\t// Current Line Frame Width\r\n\tnm = element->Attribute(TEXT(\"currentLineFrameWidth\"));\r\n\tif (nm)\r\n\t{\r\n\t\tunsigned char frameWidth{ 1 };\r\n\t\ttry\r\n\t\t{\r\n\t\t\tframeWidth = static_cast<unsigned char>(std::stoi(nm));\r\n\t\t}\r\n\t\tcatch (...)\r\n\t\t{\r\n\t\t\t// do nothing. frameWidth is already set to '1'.\r\n\t\t}\r\n\t\t_svp._currentLineFrameWidth = (frameWidth < 1) ? 1 : (frameWidth > 6) ? 6 : frameWidth;\r\n\t}\r\n\r\n\t// Virtual Space\r\n\tnm = element->Attribute(TEXT(\"virtualSpace\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._virtualSpace = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._virtualSpace = false;\r\n\t}\r\n\r\n\t// Scrolling Beyond Last Line State\r\n\tnm = element->Attribute(TEXT(\"scrollBeyondLastLine\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._scrollBeyondLastLine = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._scrollBeyondLastLine = false;\r\n\t}\r\n\r\n\t// Do not change selection or caret position when right-clicking with mouse\r\n\tnm = element->Attribute(TEXT(\"rightClickKeepsSelection\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._rightClickKeepsSelection = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._rightClickKeepsSelection = false;\r\n\t}\r\n\r\n\t// Disable Advanced Scrolling\r\n\tnm = element->Attribute(TEXT(\"disableAdvancedScrolling\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._disableAdvancedScrolling = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._disableAdvancedScrolling = false;\r\n\t}\r\n\r\n\t// Current wrap symbol visibility State\r\n\tnm = element->Attribute(TEXT(\"wrapSymbolShow\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._wrapSymbolShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._wrapSymbolShow = false;\r\n\t}\r\n\r\n\t// Do Wrap\r\n\tnm = element->Attribute(TEXT(\"Wrap\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._doWrap = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._doWrap = false;\r\n\t}\r\n\r\n\t// Do Edge\r\n\tnm = element->Attribute(TEXT(\"isEdgeBgMode\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._isEdgeBgMode = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._isEdgeBgMode = false;\r\n\t}\r\n\r\n\t// Do Scintilla border edge\r\n\tnm = element->Attribute(TEXT(\"borderEdge\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._showBorderEdge = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._showBorderEdge = false;\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"edgeMultiColumnPos\"));\r\n\tif (nm)\r\n\t{\r\n\t\tstr2numberVector(nm, _svp._edgeMultiColumnPos);\r\n\t}\r\n\r\n\tint val;\r\n\tnm = element->Attribute(TEXT(\"zoom\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\t_svp._zoom = val;\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"zoom2\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\t_svp._zoom2 = val;\r\n\t}\r\n\r\n\t// White Space visibility State\r\n\tnm = element->Attribute(TEXT(\"whiteSpaceShow\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._whiteSpaceShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._whiteSpaceShow = false;\r\n\t}\r\n\r\n\t// EOL visibility State\r\n\tnm = element->Attribute(TEXT(\"eolShow\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"show\")))\r\n\t\t\t_svp._eolShow = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"hide\")))\r\n\t\t\t_svp._eolShow = false;\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"eolMode\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 0 && val <= 3)\r\n\t\t\t_svp._eolMode = static_cast<ScintillaViewParams::crlfMode>(val);\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"borderWidth\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 0 && val <= 30)\r\n\t\t\t_svp._borderWidth = val;\r\n\t}\r\n\r\n\t// Do antialiased font\r\n\tnm = element->Attribute(TEXT(\"smoothFont\"));\r\n\tif (nm)\r\n\t{\r\n\t\tif (!lstrcmp(nm, TEXT(\"yes\")))\r\n\t\t\t_svp._doSmoothFont = true;\r\n\t\telse if (!lstrcmp(nm, TEXT(\"no\")))\r\n\t\t\t_svp._doSmoothFont = false;\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"paddingLeft\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 0 && val <= 30)\r\n\t\t\t_svp._paddingLeft = static_cast<unsigned char>(val);\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"paddingRight\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 0 && val <= 30)\r\n\t\t\t_svp._paddingRight = static_cast<unsigned char>(val);\r\n\t}\r\n\r\n\tnm = element->Attribute(TEXT(\"distractionFreeDivPart\"), &val);\r\n\tif (nm)\r\n\t{\r\n\t\tif (val >= 3 && val <= 9)\r\n\t\t\t_svp._distractionFreeDivPart = static_cast<unsigned char>(val);\r\n\t}\r\n}\r\n\r\n\r\nvoid NppParameters::feedDockingManager(TiXmlNode *node)\r\n{\r\n\tTiXmlElement *element = node->ToElement();\r\n\r\n\tint i;\r\n\tif (element->Attribute(TEXT(\"leftWidth\"), &i))\r\n\t\t_nppGUI._dockingData._leftWidth = i;\r\n\r\n\tif (element->Attribute(TEXT(\"rightWidth\"), &i))\r\n\t\t_nppGUI._dockingData._rightWidth = i;\r\n\r\n\tif (element->Attribute(TEXT(\"topHeight\"), &i))\r\n\t\t_nppGUI._dockingData._topHeight = i;\r\n\r\n\tif (element->Attribute(TEXT(\"bottomHeight\"), &i))\r\n\t\t_nppGUI._dockingData._bottomHight = i;\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"FloatingWindow\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"FloatingWindow\")) )\r\n\t{\r\n\t\tTiXmlElement *floatElement = childNode->ToElement();\r\n\t\tint cont;\r\n\t\tif (floatElement->Attribute(TEXT(\"cont\"), &cont))\r\n\t\t{\r\n\t\t\tint x = 0;\r\n\t\t\tint y = 0;\r\n\t\t\tint w = 100;\r\n\t\t\tint h = 100;\r\n\r\n\t\t\tfloatElement->Attribute(TEXT(\"x\"), &x);\r\n\t\t\tfloatElement->Attribute(TEXT(\"y\"), &y);\r\n\t\t\tfloatElement->Attribute(TEXT(\"width\"), &w);\r\n\t\t\tfloatElement->Attribute(TEXT(\"height\"), &h);\r\n\t\t\t_nppGUI._dockingData._flaotingWindowInfo.push_back(FloatingWindowInfo(cont, x, y, w, h));\r\n\t\t}\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"PluginDlg\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"PluginDlg\")) )\r\n\t{\r\n\t\tTiXmlElement *dlgElement = childNode->ToElement();\r\n\t\tconst TCHAR *name = dlgElement->Attribute(TEXT(\"pluginName\"));\r\n\r\n\t\tint id;\r\n\t\tconst TCHAR *idStr = dlgElement->Attribute(TEXT(\"id\"), &id);\r\n\t\tif (name && idStr)\r\n\t\t{\r\n\t\t\tint curr = 0; // on left\r\n\t\t\tint prev = 0; // on left\r\n\r\n\t\t\tdlgElement->Attribute(TEXT(\"curr\"), &curr);\r\n\t\t\tdlgElement->Attribute(TEXT(\"prev\"), &prev);\r\n\r\n\t\t\tbool isVisible = false;\r\n\t\t\tconst TCHAR *val = dlgElement->Attribute(TEXT(\"isVisible\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tisVisible = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t\t}\r\n\r\n\t\t\t_nppGUI._dockingData._pluginDockInfo.push_back(PluginDlgDockingInfo(name, id, curr, prev, isVisible));\r\n\t\t}\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = node->FirstChildElement(TEXT(\"ActiveTabs\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"ActiveTabs\")) )\r\n\t{\r\n\t\tTiXmlElement *dlgElement = childNode->ToElement();\r\n\r\n\t\tint cont;\r\n\t\tif (dlgElement->Attribute(TEXT(\"cont\"), &cont))\r\n\t\t{\r\n\t\t\tint activeTab = 0;\r\n\t\t\tdlgElement->Attribute(TEXT(\"activeTab\"), &activeTab);\r\n\t\t\t_nppGUI._dockingData._containerTabInfo.push_back(ContainerTabInfo(cont, activeTab));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::duplicateDockingManager(TiXmlNode* dockMngNode, TiXmlElement* dockMngElmt2Clone)\r\n{\r\n\tif (!dockMngNode || !dockMngElmt2Clone) return;\r\n\r\n\tTiXmlElement *dockMngElmt = dockMngNode->ToElement();\r\n\t\r\n\tint i;\r\n\tif (dockMngElmt->Attribute(TEXT(\"leftWidth\"), &i))\r\n\t\tdockMngElmt2Clone->SetAttribute(TEXT(\"leftWidth\"), i);\r\n\r\n\tif (dockMngElmt->Attribute(TEXT(\"rightWidth\"), &i))\r\n\t\tdockMngElmt2Clone->SetAttribute(TEXT(\"rightWidth\"), i);\r\n\r\n\tif (dockMngElmt->Attribute(TEXT(\"topHeight\"), &i))\r\n\t\tdockMngElmt2Clone->SetAttribute(TEXT(\"topHeight\"), i);\r\n\r\n\tif (dockMngElmt->Attribute(TEXT(\"bottomHeight\"), &i))\r\n\t\tdockMngElmt2Clone->SetAttribute(TEXT(\"bottomHeight\"), i);\r\n\r\n\r\n\tfor (TiXmlNode *childNode = dockMngNode->FirstChildElement(TEXT(\"FloatingWindow\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"FloatingWindow\")))\r\n\t{\r\n\t\tTiXmlElement *floatElement = childNode->ToElement();\r\n\t\tint cont;\r\n\t\tif (floatElement->Attribute(TEXT(\"cont\"), &cont))\r\n\t\t{\r\n\t\t\tTiXmlElement FWNode(TEXT(\"FloatingWindow\"));\r\n\t\t\tFWNode.SetAttribute(TEXT(\"cont\"), cont);\r\n\r\n\t\t\tint x = 0;\r\n\t\t\tint y = 0;\r\n\t\t\tint w = 100;\r\n\t\t\tint h = 100;\r\n\r\n\t\t\tfloatElement->Attribute(TEXT(\"x\"), &x);\r\n\t\t\tFWNode.SetAttribute(TEXT(\"x\"), x);\r\n\r\n\t\t\tfloatElement->Attribute(TEXT(\"y\"), &y);\r\n\t\t\tFWNode.SetAttribute(TEXT(\"y\"), y);\r\n\t\t\t\r\n\t\t\tfloatElement->Attribute(TEXT(\"width\"), &w);\r\n\t\t\tFWNode.SetAttribute(TEXT(\"width\"), w);\r\n\t\t\t\r\n\t\t\tfloatElement->Attribute(TEXT(\"height\"), &h);\r\n\t\t\tFWNode.SetAttribute(TEXT(\"height\"), h);\r\n\r\n\t\t\tdockMngElmt2Clone->InsertEndChild(FWNode);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = dockMngNode->FirstChildElement(TEXT(\"PluginDlg\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"PluginDlg\")))\r\n\t{\r\n\t\tTiXmlElement *dlgElement = childNode->ToElement();\r\n\t\tconst TCHAR *name = dlgElement->Attribute(TEXT(\"pluginName\"));\r\n\t\tTiXmlElement PDNode(TEXT(\"PluginDlg\"));\r\n\r\n\t\tint id;\r\n\t\tconst TCHAR *idStr = dlgElement->Attribute(TEXT(\"id\"), &id);\r\n\t\tif (name && idStr)\r\n\t\t{\r\n\t\t\tint curr = 0; // on left\r\n\t\t\tint prev = 0; // on left\r\n\r\n\t\t\tdlgElement->Attribute(TEXT(\"curr\"), &curr);\r\n\t\t\tdlgElement->Attribute(TEXT(\"prev\"), &prev);\r\n\r\n\t\t\tbool isVisible = false;\r\n\t\t\tconst TCHAR *val = dlgElement->Attribute(TEXT(\"isVisible\"));\r\n\t\t\tif (val)\r\n\t\t\t{\r\n\t\t\t\tisVisible = (lstrcmp(val, TEXT(\"yes\")) == 0);\r\n\t\t\t}\r\n\r\n\t\t\tPDNode.SetAttribute(TEXT(\"pluginName\"), name);\r\n\t\t\tPDNode.SetAttribute(TEXT(\"id\"), idStr);\r\n\t\t\tPDNode.SetAttribute(TEXT(\"curr\"), curr);\r\n\t\t\tPDNode.SetAttribute(TEXT(\"prev\"), prev);\r\n\t\t\tPDNode.SetAttribute(TEXT(\"isVisible\"), isVisible ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\t\t\tdockMngElmt2Clone->InsertEndChild(PDNode);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (TiXmlNode *childNode = dockMngNode->FirstChildElement(TEXT(\"ActiveTabs\"));\r\n\t\tchildNode;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"ActiveTabs\")))\r\n\t{\r\n\t\tTiXmlElement *dlgElement = childNode->ToElement();\r\n\t\tTiXmlElement CTNode(TEXT(\"ActiveTabs\"));\r\n\t\tint cont;\r\n\t\tif (dlgElement->Attribute(TEXT(\"cont\"), &cont))\r\n\t\t{\r\n\t\t\tint activeTab = 0;\r\n\t\t\tdlgElement->Attribute(TEXT(\"activeTab\"), &activeTab);\r\n\r\n\t\t\tCTNode.SetAttribute(TEXT(\"cont\"), cont);\r\n\t\t\tCTNode.SetAttribute(TEXT(\"activeTab\"), activeTab);\r\n\r\n\t\t\tdockMngElmt2Clone->InsertEndChild(CTNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nbool NppParameters::writeScintillaParams()\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tconst TCHAR *pViewName = TEXT(\"ScintillaPrimaryView\");\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *configsRoot = nppRoot->FirstChildElement(TEXT(\"GUIConfigs\"));\r\n\tif (!configsRoot)\r\n\t{\r\n\t\tconfigsRoot = nppRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfigs\")));\r\n\t}\r\n\r\n\tTiXmlNode *scintNode = getChildElementByAttribut(configsRoot, TEXT(\"GUIConfig\"), TEXT(\"name\"), pViewName);\r\n\tif (!scintNode)\r\n\t{\r\n\t\tscintNode = configsRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\")));\r\n\t\t(scintNode->ToElement())->SetAttribute(TEXT(\"name\"), pViewName);\r\n\t}\r\n\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"lineNumberMargin\"), _svp._lineNumberMarginShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"lineNumberDynamicWidth\"), _svp._lineNumberMarginDynamicWidth ?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"bookMarkMargin\"), _svp._bookMarkMarginShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"indentGuideLine\"), _svp._indentGuideLineShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\tconst TCHAR *pFolderStyleStr = (_svp._folderStyle == FOLDER_STYLE_SIMPLE)?TEXT(\"simple\"):\r\n\t\t\t\t\t\t\t\t\t(_svp._folderStyle == FOLDER_STYLE_ARROW)?TEXT(\"arrow\"):\r\n\t\t\t\t\t\t\t\t\t\t(_svp._folderStyle == FOLDER_STYLE_CIRCLE)?TEXT(\"circle\"):\r\n\t\t\t\t\t\t\t\t\t\t(_svp._folderStyle == FOLDER_STYLE_NONE)?TEXT(\"none\"):TEXT(\"box\");\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"folderMarkStyle\"), pFolderStyleStr);\r\n\r\n\tconst TCHAR *pWrapMethodStr = (_svp._lineWrapMethod == LINEWRAP_ALIGNED)?TEXT(\"aligned\"):\r\n\t\t\t\t\t\t\t\t(_svp._lineWrapMethod == LINEWRAP_INDENT)?TEXT(\"indent\"):TEXT(\"default\");\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"lineWrapMethod\"), pWrapMethodStr);\r\n\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"currentLineIndicator\"), _svp._currentLineHiliteMode);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"currentLineFrameWidth\"), _svp._currentLineFrameWidth);\r\n\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"virtualSpace\"), _svp._virtualSpace?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"scrollBeyondLastLine\"), _svp._scrollBeyondLastLine?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"rightClickKeepsSelection\"), _svp._rightClickKeepsSelection ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"disableAdvancedScrolling\"), _svp._disableAdvancedScrolling?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"wrapSymbolShow\"), _svp._wrapSymbolShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"Wrap\"), _svp._doWrap?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"borderEdge\"), _svp._showBorderEdge ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\tgeneric_string edgeColumnPosStr;\r\n\tfor (auto i : _svp._edgeMultiColumnPos)\r\n\t{\r\n\t\tstd::string s = std::to_string(i);\r\n\t\tedgeColumnPosStr += generic_string(s.begin(), s.end());\r\n\t\tedgeColumnPosStr += TEXT(\" \");\r\n\t}\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"isEdgeBgMode\"), _svp._isEdgeBgMode ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"edgeMultiColumnPos\"), edgeColumnPosStr);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"zoom\"), static_cast<int>(_svp._zoom));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"zoom2\"), static_cast<int>(_svp._zoom2));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"whiteSpaceShow\"), _svp._whiteSpaceShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"eolShow\"), _svp._eolShow?TEXT(\"show\"):TEXT(\"hide\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"eolMode\"), _svp._eolMode);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"borderWidth\"), _svp._borderWidth);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"smoothFont\"), _svp._doSmoothFont ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"paddingLeft\"), _svp._paddingLeft);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"paddingRight\"), _svp._paddingRight);\r\n\t(scintNode->ToElement())->SetAttribute(TEXT(\"distractionFreeDivPart\"), _svp._distractionFreeDivPart);\r\n\treturn true;\r\n}\r\n\r\nvoid NppParameters::createXmlTreeFromGUIParams()\r\n{\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *oldGUIRoot = nppRoot->FirstChildElement(TEXT(\"GUIConfigs\"));\r\n\tTiXmlElement* dockMngNodeDup = nullptr;\r\n\tTiXmlNode* dockMngNodeOriginal = nullptr;\r\n\tif (oldGUIRoot && _nppGUI._isCmdlineNosessionActivated)\r\n\t{\r\n\t\tfor (TiXmlNode *childNode = oldGUIRoot->FirstChildElement(TEXT(\"GUIConfig\"));\r\n\t\t\tchildNode;\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"GUIConfig\")))\r\n\t\t{\r\n\t\t\tTiXmlElement* element = childNode->ToElement();\r\n\t\t\tconst TCHAR* nm = element->Attribute(TEXT(\"name\"));\r\n\t\t\tif (nullptr == nm)\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\tif (!lstrcmp(nm, TEXT(\"DockingManager\")))\r\n\t\t\t{\r\n\t\t\t\tdockMngNodeOriginal = childNode;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Copy DockingParamNode\r\n\t\tif (dockMngNodeOriginal)\r\n\t\t{\r\n\t\t\tdockMngNodeDup = new TiXmlElement(TEXT(\"GUIConfig\"));\r\n\t\t\tdockMngNodeDup->SetAttribute(TEXT(\"name\"), TEXT(\"DockingManager\"));\r\n\r\n\t\t\tduplicateDockingManager(dockMngNodeOriginal, dockMngNodeDup);\r\n\t\t}\r\n\t}\r\n\r\n\t// Remove the old root nod if it exist\r\n\tif (oldGUIRoot)\r\n\t{\r\n\t\tnppRoot->RemoveChild(oldGUIRoot);\r\n\t}\r\n\r\n\tTiXmlNode *newGUIRoot = nppRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfigs\")));\r\n\r\n\t// <GUIConfig name=\"ToolBar\" visible=\"yes\">standard</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"ToolBar\"));\r\n\t\tconst TCHAR *pStr = (_nppGUI._toolbarShow) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"visible\"), pStr);\r\n\r\n\t\tif (_nppGUI._toolBarStatus == TB_SMALL)\r\n\t\t\tpStr = TEXT(\"small\");\r\n\t\telse if (_nppGUI._toolBarStatus == TB_LARGE)\r\n\t\t\tpStr = TEXT(\"large\");\r\n\t\telse if (_nppGUI._toolBarStatus == TB_SMALL2)\r\n\t\t\tpStr = TEXT(\"small2\");\r\n\t\telse if (_nppGUI._toolBarStatus == TB_LARGE2)\r\n\t\t\tpStr = TEXT(\"large2\");\r\n\t\telse //if (_nppGUI._toolBarStatus == TB_STANDARD)\r\n\t\t\tpStr = TEXT(\"standard\");\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"StatusBar\">show</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"StatusBar\"));\r\n\t\tconst TCHAR *pStr = _nppGUI._statusBarShow ? TEXT(\"show\") : TEXT(\"hide\");\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"TabBar\" dragAndDrop=\"yes\" drawTopBar=\"yes\" drawInactiveTab=\"yes\" reduce=\"yes\" closeButton=\"yes\" doubleClick2Close=\"no\" vertical=\"no\" multiLine=\"no\" hide=\"no\" quitOnEmpty=\"no\" iconSetNumber=\"0\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"TabBar\"));\r\n\r\n\t\tconst TCHAR *pStr = (_nppGUI._tabStatus & TAB_DRAWTOPBAR) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"dragAndDrop\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_DRAGNDROP) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"drawTopBar\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_DRAWINACTIVETAB) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"drawInactiveTab\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_REDUCE) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"reduce\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_CLOSEBUTTON) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"closeButton\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_DBCLK2CLOSE) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"doubleClick2Close\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_VERTICAL) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"vertical\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_MULTILINE) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"multiLine\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_HIDE) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"hide\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_QUITONEMPTY) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"quitOnEmpty\"), pStr);\r\n\r\n\t\tpStr = (_nppGUI._tabStatus & TAB_ALTICONS) ? TEXT(\"1\") : TEXT(\"0\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"iconSetNumber\"), pStr);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"ScintillaViewsSplitter\">vertical</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"ScintillaViewsSplitter\"));\r\n\t\tconst TCHAR *pStr = _nppGUI._splitterPos == POS_VERTICAL ? TEXT(\"vertical\") : TEXT(\"horizontal\");\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"UserDefineDlg\" position=\"undocked\">hide</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"UserDefineDlg\"));\r\n\t\tconst TCHAR *pStr = (_nppGUI._userDefineDlgStatus & UDD_DOCKED) ? TEXT(\"docked\") : TEXT(\"undocked\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"position\"), pStr);\r\n\t\tpStr = (_nppGUI._userDefineDlgStatus & UDD_SHOW) ? TEXT(\"show\") : TEXT(\"hide\");\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"TabSetting\" size = \"4\" replaceBySpace = \"no\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"TabSetting\"));\r\n\t\tconst TCHAR *pStr = _nppGUI._tabReplacedBySpace ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"replaceBySpace\"), pStr);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"size\"), _nppGUI._tabSize);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"AppPosition\" x = \"3900\" y = \"446\" width = \"2160\" height = \"1380\" isMaximized = \"no\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"AppPosition\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"x\"), _nppGUI._appPos.left);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"y\"), _nppGUI._appPos.top);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"width\"), _nppGUI._appPos.right);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"height\"), _nppGUI._appPos.bottom);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"isMaximized\"), _nppGUI._isMaximized ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"FindWindowPosition\" left=\"134\" top=\"320\" right=\"723\" bottom=\"684\" />\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"FindWindowPosition\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"left\"), _nppGUI._findWindowPos.left);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"top\"), _nppGUI._findWindowPos.top);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"right\"), _nppGUI._findWindowPos.right);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"bottom\"), _nppGUI._findWindowPos.bottom);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"isLessModeOn\"), _nppGUI._findWindowLessMode ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"FinderConfig\" wrappedLines=\"no\" purgeBeforeEverySearch=\"no\" showOnlyOneEntryPerFoundLine=\"yes\"/>\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"FinderConfig\"));\r\n\t\tconst TCHAR* pStr = _nppGUI._finderLinesAreCurrentlyWrapped ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"wrappedLines\"), pStr);\r\n\t\tpStr = _nppGUI._finderPurgeBeforeEverySearch ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"purgeBeforeEverySearch\"), pStr);\r\n\t\tpStr = _nppGUI._finderShowOnlyOneEntryPerFoundLine ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"showOnlyOneEntryPerFoundLine\"), pStr);\r\n\r\n\t}\r\n\r\n\t// <GUIConfig name=\"noUpdate\" intervalDays=\"15\" nextUpdateDate=\"20161022\">no</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *element = insertGUIConfigBoolNode(newGUIRoot, TEXT(\"noUpdate\"), !_nppGUI._autoUpdateOpt._doAutoUpdate);\r\n\t\telement->SetAttribute(TEXT(\"intervalDays\"), _nppGUI._autoUpdateOpt._intervalDays);\r\n\t\telement->SetAttribute(TEXT(\"nextUpdateDate\"), _nppGUI._autoUpdateOpt._nextUpdateDate.toString().c_str());\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Auto-detection\">yes</GUIConfig>\t\r\n\t{\r\n\t\tconst TCHAR *pStr = TEXT(\"no\");\r\n\r\n\t\tif (_nppGUI._fileAutoDetection & cdEnabledOld)\r\n\t\t{\r\n\t\t\tpStr = TEXT(\"yesOld\");\r\n\r\n\t\t\tif ((_nppGUI._fileAutoDetection & cdAutoUpdate) && (_nppGUI._fileAutoDetection & cdGo2end))\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"autoUpdate2EndOld\");\r\n\t\t\t}\r\n\t\t\telse if (_nppGUI._fileAutoDetection & cdAutoUpdate)\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"autoOld\");\r\n\t\t\t}\r\n\t\t\telse if (_nppGUI._fileAutoDetection & cdGo2end)\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"Update2EndOld\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (_nppGUI._fileAutoDetection & cdEnabledNew)\r\n\t\t{\r\n\t\t\tpStr = TEXT(\"yes\");\r\n\r\n\t\t\tif ((_nppGUI._fileAutoDetection & cdAutoUpdate) && (_nppGUI._fileAutoDetection & cdGo2end))\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"autoUpdate2End\");\r\n\t\t\t}\r\n\t\t\telse if (_nppGUI._fileAutoDetection & cdAutoUpdate)\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"auto\");\r\n\t\t\t}\r\n\t\t\telse if (_nppGUI._fileAutoDetection & cdGo2end)\r\n\t\t\t{\r\n\t\t\t\tpStr = TEXT(\"Update2End\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Auto-detection\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"CheckHistoryFiles\">no</GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"CheckHistoryFiles\"), _nppGUI._checkHistoryFiles);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"TrayIcon\">no</GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"TrayIcon\"), _nppGUI._isMinimizedToTray);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"MaitainIndent\">yes</GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"MaitainIndent\"), _nppGUI._maitainIndent);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"TagsMatchHighLight\" TagAttrHighLight = \"yes\" HighLightNonHtmlZone = \"no\">yes< / GUIConfig>\r\n\t{\r\n\t\tTiXmlElement * ele = insertGUIConfigBoolNode(newGUIRoot, TEXT(\"TagsMatchHighLight\"), _nppGUI._enableTagsMatchHilite);\r\n\t\tele->SetAttribute(TEXT(\"TagAttrHighLight\"), _nppGUI._enableTagAttrsHilite ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tele->SetAttribute(TEXT(\"HighLightNonHtmlZone\"), _nppGUI._enableHiliteNonHTMLZone ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"RememberLastSession\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"RememberLastSession\"), _nppGUI._rememberLastSession);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"DetectEncoding\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"DetectEncoding\"), _nppGUI._detectEncoding);\r\n\t}\r\n\t\r\n\t// <GUIConfig name = \"SaveAllConfirm\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"SaveAllConfirm\"), _nppGUI._saveAllConfirm);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"NewDocDefaultSettings\" format = \"0\" encoding = \"0\" lang = \"3\" codepage = \"-1\" openAnsiAsUTF8 = \"no\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"NewDocDefaultSettings\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"format\"), static_cast<int32_t>(_nppGUI._newDocDefaultSettings._format));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"encoding\"), _nppGUI._newDocDefaultSettings._unicodeMode);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"lang\"), _nppGUI._newDocDefaultSettings._lang);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"codepage\"), _nppGUI._newDocDefaultSettings._codepage);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"openAnsiAsUTF8\"), _nppGUI._newDocDefaultSettings._openAnsiAsUtf8 ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"langsExcluded\" gr0 = \"0\" gr1 = \"0\" gr2 = \"0\" gr3 = \"0\" gr4 = \"0\" gr5 = \"0\" gr6 = \"0\" gr7 = \"0\" langMenuCompact = \"yes\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"langsExcluded\"));\r\n\t\twriteExcludedLangList(GUIConfigElement);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"langMenuCompact\"), _nppGUI._isLangMenuCompact ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Print\" lineNumber=\"no\" printOption=\"0\" headerLeft=\"$(FULL_CURRENT_PATH)\" headerMiddle=\"\" headerRight=\"$(LONG_DATE) $(TIME)\" headerFontName=\"IBMPC\" headerFontStyle=\"1\" headerFontSize=\"8\" footerLeft=\"\" footerMiddle=\"-$(CURRENT_PRINTING_PAGE)-\" footerRight=\"\" footerFontName=\"\" footerFontStyle=\"0\" footerFontSize=\"9\" margeLeft=\"0\" margeTop=\"0\" margeRight=\"0\" margeBottom=\"0\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Print\"));\r\n\t\twritePrintSetting(GUIConfigElement);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Backup\" action=\"0\" useCustumDir=\"no\" dir=\"\" isSnapshotMode=\"yes\" snapshotBackupTiming=\"7000\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Backup\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"action\"), _nppGUI._backup);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"useCustumDir\"), _nppGUI._useDir ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"dir\"), _nppGUI._backupDir.c_str());\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"isSnapshotMode\"), _nppGUI._isSnapshotMode ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"snapshotBackupTiming\"), static_cast<int32_t>(_nppGUI._snapshotBackupTiming));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"TaskList\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"TaskList\"), _nppGUI._doTaskList);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"MRU\">yes< / GUIConfig>\r\n\t{\r\n\t\tinsertGUIConfigBoolNode(newGUIRoot, TEXT(\"MRU\"), _nppGUI._styleMRU);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"URL\">2</GUIConfig>\r\n\t{\r\n\t\tTCHAR szStr [12] = TEXT(\"0\");\r\n\t\tgeneric_itoa(_nppGUI._styleURL, szStr, 10);\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"URL\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(szStr));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"uriCustomizedSchemes\">svn://</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"uriCustomizedSchemes\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._uriSchemes.c_str()));\r\n\t}\r\n\t// <GUIConfig name = \"globalOverride\" fg = \"no\" bg = \"no\" font = \"no\" fontSize = \"no\" bold = \"no\" italic = \"no\" underline = \"no\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"globalOverride\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fg\"), _nppGUI._globalOverride.enableFg ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"bg\"), _nppGUI._globalOverride.enableBg ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"font\"), _nppGUI._globalOverride.enableFont ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fontSize\"), _nppGUI._globalOverride.enableFontSize ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"bold\"), _nppGUI._globalOverride.enableBold ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"italic\"), _nppGUI._globalOverride.enableItalic ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"underline\"), _nppGUI._globalOverride.enableUnderLine ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name = \"auto-completion\" autoCAction = \"3\" triggerFromNbChar = \"1\" funcParams = \"yes\" autoCIgnoreNumbers = \"yes\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"auto-completion\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"autoCAction\"), _nppGUI._autocStatus);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"triggerFromNbChar\"), static_cast<int32_t>(_nppGUI._autocFromLen));\r\n\r\n\t\tconst TCHAR * pStr = _nppGUI._autocIgnoreNumbers ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"autoCIgnoreNumbers\"), pStr);\r\n\r\n\t\tpStr = _nppGUI._autocInsertSelectedUseENTER ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"insertSelectedItemUseENTER\"), pStr);\r\n\r\n\t\tpStr = _nppGUI._autocInsertSelectedUseTAB ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"insertSelectedItemUseTAB\"), pStr);\r\n\r\n\t\tpStr = _nppGUI._funcParams ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"funcParams\"), pStr);\r\n\t}\r\n\r\n\t// <GUIConfig name = \"auto-insert\" parentheses = \"yes\" brackets = \"yes\" curlyBrackets = \"yes\" quotes = \"no\" doubleQuotes = \"yes\" htmlXmlTag = \"yes\" / >\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"auto-insert\"));\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"parentheses\"), _nppGUI._matchedPairConf._doParentheses ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"brackets\"), _nppGUI._matchedPairConf._doBrackets ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"curlyBrackets\"), _nppGUI._matchedPairConf._doCurlyBrackets ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"quotes\"), _nppGUI._matchedPairConf._doQuotes ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"doubleQuotes\"), _nppGUI._matchedPairConf._doDoubleQuotes ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"htmlXmlTag\"), _nppGUI._matchedPairConf._doHtmlXmlTag ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\t\tTiXmlElement hist_element{ TEXT(\"\") };\r\n\t\thist_element.SetValue(TEXT(\"UserDefinePair\"));\r\n\t\tfor (size_t i = 0, nb = _nppGUI._matchedPairConf._matchedPairs.size(); i < nb; ++i)\r\n\t\t{\r\n\t\t\tint open = _nppGUI._matchedPairConf._matchedPairs[i].first;\r\n\t\t\tint close = _nppGUI._matchedPairConf._matchedPairs[i].second;\r\n\r\n\t\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"open\"), open);\r\n\t\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"close\"), close);\r\n\t\t\tGUIConfigElement->InsertEndChild(hist_element);\r\n\t\t}\r\n\t}\r\n\r\n\t// <GUIConfig name = \"sessionExt\">< / GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"sessionExt\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._definedSessionExt.c_str()));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"workspaceExt\"></GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"workspaceExt\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._definedWorkspaceExt.c_str()));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"MenuBar\">show</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"MenuBar\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._menuBarShow ? TEXT(\"show\") : TEXT(\"hide\")));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Caret\" width=\"1\" blinkRate=\"250\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Caret\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"width\"), _nppGUI._caretWidth);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"blinkRate\"), _nppGUI._caretBlinkRate);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"ScintillaGlobalSettings\" enableMultiSelection=\"no\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"ScintillaGlobalSettings\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"enableMultiSelection\"), _nppGUI._enableMultiSelection ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"openSaveDir\" value=\"0\" defaultDirPath=\"\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"openSaveDir\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"value\"), _nppGUI._openSaveDir);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"defaultDirPath\"), _nppGUI._defaultDir);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"titleBar\" short=\"no\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"titleBar\"));\r\n\t\tconst TCHAR *pStr = (_nppGUI._shortTitlebar) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"short\"), pStr);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"stylerTheme\" path=\"C:\\sources\\notepad-plus-plus\\PowerEditor\\visual.net\\..\\bin\\stylers.xml\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"stylerTheme\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"path\"), _nppGUI._themeName.c_str());\r\n\t}\r\n\r\n\t// <GUIConfig name=\"insertDateTime\" path=\"C:\\sources\\notepad-plus-plus\\PowerEditor\\visual.net\\..\\bin\\stylers.xml\" />\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"insertDateTime\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customizedFormat\"), _nppGUI._dateTimeFormat.c_str());\r\n\t\tconst TCHAR* pStr = (_nppGUI._dateTimeReverseDefaultOrder) ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"reverseDefaultOrder\"), pStr);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"wordCharList\" useDefault=\"yes\" charsAdded=\".$%\"  />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"wordCharList\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"useDefault\"), _nppGUI._isWordCharDefault ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tWcharMbcsConvertor& wmc = WcharMbcsConvertor::getInstance();\r\n\t\tconst wchar_t* charsAddStr = wmc.char2wchar(_nppGUI._customWordChars.c_str(), SC_CP_UTF8);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"charsAdded\"), charsAddStr);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"delimiterSelection\" leftmostDelimiter=\"40\" rightmostDelimiter=\"41\" delimiterSelectionOnEntireDocument=\"no\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"delimiterSelection\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"leftmostDelimiter\"), _nppGUI._leftmostDelimiter);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"rightmostDelimiter\"), _nppGUI._rightmostDelimiter);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"delimiterSelectionOnEntireDocument\"), _nppGUI._delimiterSelectionOnEntireDocument ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"multiInst\" setting=\"0\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"multiInst\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"setting\"), _nppGUI._multiInstSetting);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"MISC\" fileSwitcherWithoutExtColumn=\"no\" backSlashIsEscapeCharacterForSql=\"yes\" isFolderDroppedOpenFiles=\"no\" saveDlgExtFilterToAllTypes=\"no\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"MISC\"));\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fileSwitcherWithoutExtColumn\"), _nppGUI._fileSwitcherWithoutExtColumn ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fileSwitcherExtWidth\"), _nppGUI._fileSwitcherExtWidth);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fileSwitcherWithoutPathColumn\"), _nppGUI._fileSwitcherWithoutPathColumn ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fileSwitcherPathWidth\"), _nppGUI._fileSwitcherPathWidth);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"backSlashIsEscapeCharacterForSql\"), _nppGUI._backSlashIsEscapeCharacterForSql ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"writeTechnologyEngine\"), _nppGUI._writeTechnologyEngine);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"isFolderDroppedOpenFiles\"), _nppGUI._isFolderDroppedOpenFiles ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"docPeekOnTab\"), _nppGUI._isDocPeekOnTab ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"docPeekOnMap\"), _nppGUI._isDocPeekOnMap ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"sortFunctionList\"), _nppGUI._shouldSortFunctionList ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"saveDlgExtFilterToAllTypes\"), _nppGUI._setSaveDlgExtFiltToAllTypes ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"muteSounds\"), _nppGUI._muteSounds ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"enableFoldCmdToggable\"), _nppGUI._enableFoldCmdToggable ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"hideMenuRightShortcuts\"), _nppGUI._hideMenuRightShortcuts ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"Searching\" \"monospacedFontFindDlg\"=\"no\" stopFillingFindField=\"no\" findDlgAlwaysVisible=\"no\" confirmReplaceOpenDocs=\"yes\" confirmMacroReplaceOpenDocs=\"yes\" confirmReplaceInFiles=\"yes\" confirmMacroReplaceInFiles=\"yes\" replaceStopsWithoutFindingNext=\"no\"/>\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"Searching\"));\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"monospacedFontFindDlg\"), _nppGUI._monospacedFontFindDlg ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fillFindFieldWithSelected\"), _nppGUI._fillFindFieldWithSelected ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"fillFindFieldSelectCaret\"), _nppGUI._fillFindFieldSelectCaret ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"findDlgAlwaysVisible\"), _nppGUI._findDlgAlwaysVisible ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"confirmReplaceInAllOpenDocs\"), _nppGUI._confirmReplaceInAllOpenDocs ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"replaceStopsWithoutFindingNext\"), _nppGUI._replaceStopsWithoutFindingNext ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"searchEngine\" searchEngineChoice=\"2\" searchEngineCustom=\"\" />\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"searchEngine\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"searchEngineChoice\"), _nppGUI._searchEngineChoice);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"searchEngineCustom\"), _nppGUI._searchEngineCustom);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"MarkAll\" matchCase=\"no\" wholeWordOnly=\"yes\" </GUIConfig>\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"MarkAll\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"matchCase\"), _nppGUI._markAllCaseSensitive ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"wholeWordOnly\"), _nppGUI._markAllWordOnly ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"SmartHighLight\" matchCase=\"no\" wholeWordOnly=\"yes\" useFindSettings=\"no\" onAnotherView=\"no\">yes</GUIConfig>\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = insertGUIConfigBoolNode(newGUIRoot, TEXT(\"SmartHighLight\"), _nppGUI._enableSmartHilite);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"matchCase\"), _nppGUI._smartHiliteCaseSensitive ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"wholeWordOnly\"), _nppGUI._smartHiliteWordOnly ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"useFindSettings\"), _nppGUI._smartHiliteUseFindSettings ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"onAnotherView\"), _nppGUI._smartHiliteOnAnotherView ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"commandLineInterpreter\">powershell</GUIConfig>\r\n\tif (_nppGUI._commandLineInterpreter.compare(CMD_INTERPRETER))\r\n\t{\r\n\t\tTiXmlElement *GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"commandLineInterpreter\"));\r\n\t\tGUIConfigElement->InsertEndChild(TiXmlText(_nppGUI._commandLineInterpreter.c_str()));\r\n\t}\r\n\r\n\t// <GUIConfig name=\"DarkMode\" enable=\"no\" colorTone=\"0\" />\r\n\t{\r\n\t\tTiXmlElement* GUIConfigElement = (newGUIRoot->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"name\"), TEXT(\"DarkMode\"));\r\n\r\n\t\tauto setYesNoBoolAttribute = [&GUIConfigElement](const TCHAR* name, bool value) {\r\n\t\t\tconst TCHAR* pStr = value ? TEXT(\"yes\") : TEXT(\"no\");\r\n\t\t\tGUIConfigElement->SetAttribute(name, pStr);\r\n\t\t};\r\n\r\n\t\tsetYesNoBoolAttribute(TEXT(\"enable\"), _nppGUI._darkmode._isEnabled);\r\n\t\t//setYesNoBoolAttribute(TEXT(\"enablePlugin\"), _nppGUI._darkmode._isEnabledPlugin);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"colorTone\"), _nppGUI._darkmode._colorTone);\r\n\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorTop\"), _nppGUI._darkmode._customColors.pureBackground);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorMenuHotTrack\"), _nppGUI._darkmode._customColors.hotBackground);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorActive\"), _nppGUI._darkmode._customColors.softerBackground);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorMain\"), _nppGUI._darkmode._customColors.background);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorError\"), _nppGUI._darkmode._customColors.errorBackground);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorText\"), _nppGUI._darkmode._customColors.text);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorDarkText\"), _nppGUI._darkmode._customColors.darkerText);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorDisabledText\"), _nppGUI._darkmode._customColors.disabledText);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorLinkText\"), _nppGUI._darkmode._customColors.linkText);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorEdge\"), _nppGUI._darkmode._customColors.edge);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorHotEdge\"), _nppGUI._darkmode._customColors.hotEdge);\r\n\t\tGUIConfigElement->SetAttribute(TEXT(\"customColorDisabledEdge\"), _nppGUI._darkmode._customColors.disabledEdge);\r\n\t}\r\n\r\n\t// <GUIConfig name=\"ScintillaPrimaryView\" lineNumberMargin=\"show\" bookMarkMargin=\"show\" indentGuideLine=\"show\" folderMarkStyle=\"box\" lineWrapMethod=\"aligned\" currentLineHilitingShow=\"show\" scrollBeyondLastLine=\"no\" rightClickKeepsSelection=\"no\" disableAdvancedScrolling=\"no\" wrapSymbolShow=\"hide\" Wrap=\"no\" borderEdge=\"yes\" edge=\"no\" edgeNbColumn=\"80\" zoom=\"0\" zoom2=\"0\" whiteSpaceShow=\"hide\" eolShow=\"hide\" borderWidth=\"2\" smoothFont=\"no\" />\r\n\twriteScintillaParams();\r\n\r\n\t// <GUIConfig name=\"DockingManager\" leftWidth=\"328\" rightWidth=\"359\" topHeight=\"200\" bottomHeight=\"436\">\r\n\t// ...\r\n\tif (_nppGUI._isCmdlineNosessionActivated && dockMngNodeDup)\r\n\t{\r\n\t\tnewGUIRoot->InsertEndChild(*dockMngNodeDup);\r\n\t\tdelete dockMngNodeDup;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tinsertDockingParamNode(newGUIRoot);\r\n\t}\r\n}\r\n\r\nbool NppParameters::writeFindHistory()\r\n{\r\n\tif (!_pXmlUserDoc) return false;\r\n\r\n\tTiXmlNode *nppRoot = _pXmlUserDoc->FirstChild(TEXT(\"NotepadPlus\"));\r\n\tif (!nppRoot)\r\n\t{\r\n\t\tnppRoot = _pXmlUserDoc->InsertEndChild(TiXmlElement(TEXT(\"NotepadPlus\")));\r\n\t}\r\n\r\n\tTiXmlNode *findHistoryRoot = nppRoot->FirstChildElement(TEXT(\"FindHistory\"));\r\n\tif (!findHistoryRoot)\r\n\t{\r\n\t\tTiXmlElement element(TEXT(\"FindHistory\"));\r\n\t\tfindHistoryRoot = nppRoot->InsertEndChild(element);\r\n\t}\r\n\tfindHistoryRoot->Clear();\r\n\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"nbMaxFindHistoryPath\"),\t_findHistory._nbMaxFindHistoryPath);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"nbMaxFindHistoryFilter\"),  _findHistory._nbMaxFindHistoryFilter);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"nbMaxFindHistoryFind\"),\t_findHistory._nbMaxFindHistoryFind);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"nbMaxFindHistoryReplace\"), _findHistory._nbMaxFindHistoryReplace);\r\n\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"matchWord\"),\t\t\t\t_findHistory._isMatchWord?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"matchCase\"),\t\t\t\t_findHistory._isMatchCase?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"wrap\"),\t\t\t\t\t_findHistory._isWrap?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"directionDown\"),\t\t\t_findHistory._isDirectionDown?TEXT(\"yes\"):TEXT(\"no\"));\r\n\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifRecuisive\"),\t\t\t_findHistory._isFifRecuisive?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifInHiddenFolder\"),\t\t_findHistory._isFifInHiddenFolder?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifProjectPanel1\"),\t    \t_findHistory._isFifProjectPanel_1?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifProjectPanel2\"),\t      \t_findHistory._isFifProjectPanel_2?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifProjectPanel3\"),\t       \t_findHistory._isFifProjectPanel_3?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifFilterFollowsDoc\"),\t_findHistory._isFilterFollowDoc?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"fifFolderFollowsDoc\"),\t_findHistory._isFolderFollowDoc?TEXT(\"yes\"):TEXT(\"no\"));\r\n\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"searchMode\"), _findHistory._searchMode);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"transparencyMode\"), _findHistory._transparencyMode);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"transparency\"), _findHistory._transparency);\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"dotMatchesNewline\"),\t\t_findHistory._dotMatchesNewline?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"isSearch2ButtonsMode\"),\t\t_findHistory._isSearch2ButtonsMode?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t(findHistoryRoot->ToElement())->SetAttribute(TEXT(\"regexBackward4PowerUser\"),\t\t_findHistory._regexBackward4PowerUser ? TEXT(\"yes\") : TEXT(\"no\"));\r\n\r\n\tTiXmlElement hist_element{TEXT(\"\")};\r\n\r\n\thist_element.SetValue(TEXT(\"Path\"));\r\n\tfor (size_t i = 0, len = _findHistory._findHistoryPaths.size(); i < len; ++i)\r\n\t{\r\n\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"name\"), _findHistory._findHistoryPaths[i].c_str());\r\n\t\tfindHistoryRoot->InsertEndChild(hist_element);\r\n\t}\r\n\r\n\thist_element.SetValue(TEXT(\"Filter\"));\r\n\tfor (size_t i = 0, len = _findHistory._findHistoryFilters.size(); i < len; ++i)\r\n\t{\r\n\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"name\"), _findHistory._findHistoryFilters[i].c_str());\r\n\t\tfindHistoryRoot->InsertEndChild(hist_element);\r\n\t}\r\n\r\n\thist_element.SetValue(TEXT(\"Find\"));\r\n\tfor (size_t i = 0, len = _findHistory._findHistoryFinds.size(); i < len; ++i)\r\n\t{\r\n\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"name\"), _findHistory._findHistoryFinds[i].c_str());\r\n\t\tfindHistoryRoot->InsertEndChild(hist_element);\r\n\t}\r\n\r\n\thist_element.SetValue(TEXT(\"Replace\"));\r\n\tfor (size_t i = 0, len = _findHistory._findHistoryReplaces.size(); i < len; ++i)\r\n\t{\r\n\t\t(hist_element.ToElement())->SetAttribute(TEXT(\"name\"), _findHistory._findHistoryReplaces[i].c_str());\r\n\t\tfindHistoryRoot->InsertEndChild(hist_element);\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nvoid NppParameters::insertDockingParamNode(TiXmlNode *GUIRoot)\r\n{\r\n\tTiXmlElement DMNode(TEXT(\"GUIConfig\"));\r\n\tDMNode.SetAttribute(TEXT(\"name\"), TEXT(\"DockingManager\"));\r\n\tDMNode.SetAttribute(TEXT(\"leftWidth\"), _nppGUI._dockingData._leftWidth);\r\n\tDMNode.SetAttribute(TEXT(\"rightWidth\"), _nppGUI._dockingData._rightWidth);\r\n\tDMNode.SetAttribute(TEXT(\"topHeight\"), _nppGUI._dockingData._topHeight);\r\n\tDMNode.SetAttribute(TEXT(\"bottomHeight\"), _nppGUI._dockingData._bottomHight);\r\n\r\n\tfor (size_t i = 0, len = _nppGUI._dockingData._flaotingWindowInfo.size(); i < len ; ++i)\r\n\t{\r\n\t\tFloatingWindowInfo & fwi = _nppGUI._dockingData._flaotingWindowInfo[i];\r\n\t\tTiXmlElement FWNode(TEXT(\"FloatingWindow\"));\r\n\t\tFWNode.SetAttribute(TEXT(\"cont\"), fwi._cont);\r\n\t\tFWNode.SetAttribute(TEXT(\"x\"), fwi._pos.left);\r\n\t\tFWNode.SetAttribute(TEXT(\"y\"), fwi._pos.top);\r\n\t\tFWNode.SetAttribute(TEXT(\"width\"), fwi._pos.right);\r\n\t\tFWNode.SetAttribute(TEXT(\"height\"), fwi._pos.bottom);\r\n\r\n\t\tDMNode.InsertEndChild(FWNode);\r\n\t}\r\n\r\n\tfor (size_t i = 0, len = _nppGUI._dockingData._pluginDockInfo.size() ; i < len ; ++i)\r\n\t{\r\n\t\tPluginDlgDockingInfo & pdi = _nppGUI._dockingData._pluginDockInfo[i];\r\n\t\tTiXmlElement PDNode(TEXT(\"PluginDlg\"));\r\n\t\tPDNode.SetAttribute(TEXT(\"pluginName\"), pdi._name);\r\n\t\tPDNode.SetAttribute(TEXT(\"id\"), pdi._internalID);\r\n\t\tPDNode.SetAttribute(TEXT(\"curr\"), pdi._currContainer);\r\n\t\tPDNode.SetAttribute(TEXT(\"prev\"), pdi._prevContainer);\r\n\t\tPDNode.SetAttribute(TEXT(\"isVisible\"), pdi._isVisible?TEXT(\"yes\"):TEXT(\"no\"));\r\n\r\n\t\tDMNode.InsertEndChild(PDNode);\r\n\t}\r\n\r\n\tfor (size_t i = 0, len = _nppGUI._dockingData._containerTabInfo.size(); i < len ; ++i)\r\n\t{\r\n\t\tContainerTabInfo & cti = _nppGUI._dockingData._containerTabInfo[i];\r\n\t\tTiXmlElement CTNode(TEXT(\"ActiveTabs\"));\r\n\t\tCTNode.SetAttribute(TEXT(\"cont\"), cti._cont);\r\n\t\tCTNode.SetAttribute(TEXT(\"activeTab\"), cti._activeTab);\r\n\t\tDMNode.InsertEndChild(CTNode);\r\n\t}\r\n\r\n\tGUIRoot->InsertEndChild(DMNode);\r\n}\r\n\r\nvoid NppParameters::writePrintSetting(TiXmlElement *element)\r\n{\r\n\tconst TCHAR *pStr = _nppGUI._printSettings._printLineNumber?TEXT(\"yes\"):TEXT(\"no\");\r\n\telement->SetAttribute(TEXT(\"lineNumber\"), pStr);\r\n\r\n\telement->SetAttribute(TEXT(\"printOption\"), _nppGUI._printSettings._printOption);\r\n\r\n\telement->SetAttribute(TEXT(\"headerLeft\"), _nppGUI._printSettings._headerLeft.c_str());\r\n\telement->SetAttribute(TEXT(\"headerMiddle\"), _nppGUI._printSettings._headerMiddle.c_str());\r\n\telement->SetAttribute(TEXT(\"headerRight\"), _nppGUI._printSettings._headerRight.c_str());\r\n\telement->SetAttribute(TEXT(\"footerLeft\"), _nppGUI._printSettings._footerLeft.c_str());\r\n\telement->SetAttribute(TEXT(\"footerMiddle\"), _nppGUI._printSettings._footerMiddle.c_str());\r\n\telement->SetAttribute(TEXT(\"footerRight\"), _nppGUI._printSettings._footerRight.c_str());\r\n\r\n\telement->SetAttribute(TEXT(\"headerFontName\"), _nppGUI._printSettings._headerFontName.c_str());\r\n\telement->SetAttribute(TEXT(\"headerFontStyle\"), _nppGUI._printSettings._headerFontStyle);\r\n\telement->SetAttribute(TEXT(\"headerFontSize\"), _nppGUI._printSettings._headerFontSize);\r\n\telement->SetAttribute(TEXT(\"footerFontName\"), _nppGUI._printSettings._footerFontName.c_str());\r\n\telement->SetAttribute(TEXT(\"footerFontStyle\"), _nppGUI._printSettings._footerFontStyle);\r\n\telement->SetAttribute(TEXT(\"footerFontSize\"), _nppGUI._printSettings._footerFontSize);\r\n\r\n\telement->SetAttribute(TEXT(\"margeLeft\"), _nppGUI._printSettings._marge.left);\r\n\telement->SetAttribute(TEXT(\"margeRight\"), _nppGUI._printSettings._marge.right);\r\n\telement->SetAttribute(TEXT(\"margeTop\"), _nppGUI._printSettings._marge.top);\r\n\telement->SetAttribute(TEXT(\"margeBottom\"), _nppGUI._printSettings._marge.bottom);\r\n}\r\n\r\nvoid NppParameters::writeExcludedLangList(TiXmlElement *element)\r\n{\r\n\tint g0 = 0; // up to 8\r\n\tint g1 = 0; // up to 16\r\n\tint g2 = 0; // up to 24\r\n\tint g3 = 0; // up to 32\r\n\tint g4 = 0; // up to 40\r\n\tint g5 = 0; // up to 48\r\n\tint g6 = 0; // up to 56\r\n\tint g7 = 0; // up to 64\r\n\tint g8 = 0; // up to 72\r\n\tint g9 = 0; // up to 80\r\n\tint g10= 0; // up to 88\r\n\tint g11= 0; // up to 96\r\n\tint g12= 0; // up to 104\r\n\r\n\tconst int groupNbMember = 8;\r\n\r\n\tfor (size_t i = 0, len = _nppGUI._excludedLangList.size(); i < len ; ++i)\r\n\t{\r\n\t\tLangType langType = _nppGUI._excludedLangList[i]._langType;\r\n\t\tif (langType >= L_EXTERNAL && langType < L_END)\r\n\t\t\tcontinue;\r\n\r\n\t\tint nGrp = langType / groupNbMember;\r\n\t\tint nMask = 1 << langType % groupNbMember;\r\n\r\n\r\n\t\tswitch (nGrp)\r\n\t\t{\r\n\t\t\tcase 0 :\r\n\t\t\t\tg0 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 1 :\r\n\t\t\t\tg1 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2 :\r\n\t\t\t\tg2 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3 :\r\n\t\t\t\tg3 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4 :\r\n\t\t\t\tg4 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5 :\r\n\t\t\t\tg5 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6 :\r\n\t\t\t\tg6 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7 :\r\n\t\t\t\tg7 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\tg8 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 9:\r\n\t\t\t\tg9 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 10:\r\n\t\t\t\tg10 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 11:\r\n\t\t\t\tg11 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 12:\r\n\t\t\t\tg12 |= nMask;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\telement->SetAttribute(TEXT(\"gr0\"), g0);\r\n\telement->SetAttribute(TEXT(\"gr1\"), g1);\r\n\telement->SetAttribute(TEXT(\"gr2\"), g2);\r\n\telement->SetAttribute(TEXT(\"gr3\"), g3);\r\n\telement->SetAttribute(TEXT(\"gr4\"), g4);\r\n\telement->SetAttribute(TEXT(\"gr5\"), g5);\r\n\telement->SetAttribute(TEXT(\"gr6\"), g6);\r\n\telement->SetAttribute(TEXT(\"gr7\"), g7);\r\n\telement->SetAttribute(TEXT(\"gr8\"), g8);\r\n\telement->SetAttribute(TEXT(\"gr9\"), g9);\r\n\telement->SetAttribute(TEXT(\"gr10\"), g10);\r\n\telement->SetAttribute(TEXT(\"gr11\"), g11);\r\n\telement->SetAttribute(TEXT(\"gr12\"), g12);\r\n}\r\n\r\nTiXmlElement * NppParameters::insertGUIConfigBoolNode(TiXmlNode *r2w, const TCHAR *name, bool bVal)\r\n{\r\n\tconst TCHAR *pStr = bVal?TEXT(\"yes\"):TEXT(\"no\");\r\n\tTiXmlElement *GUIConfigElement = (r2w->InsertEndChild(TiXmlElement(TEXT(\"GUIConfig\"))))->ToElement();\r\n\tGUIConfigElement->SetAttribute(TEXT(\"name\"), name);\r\n\tGUIConfigElement->InsertEndChild(TiXmlText(pStr));\r\n\treturn GUIConfigElement;\r\n}\r\n\r\nint RGB2int(COLORREF color)\r\n{\r\n\treturn (((((DWORD)color) & 0x0000FF) << 16) | ((((DWORD)color) & 0x00FF00)) | ((((DWORD)color) & 0xFF0000) >> 16));\r\n}\r\n\r\nint NppParameters::langTypeToCommandID(LangType lt) const\r\n{\r\n\tint id;\r\n\tswitch (lt)\r\n\t{\r\n\t\tcase L_C :\r\n\t\t\tid = IDM_LANG_C; break;\r\n\t\tcase L_CPP :\r\n\t\t\tid = IDM_LANG_CPP; break;\r\n\t\tcase L_JAVA :\r\n\t\t\tid = IDM_LANG_JAVA;\tbreak;\r\n\t\tcase L_CS :\r\n\t\t\tid = IDM_LANG_CS; break;\r\n\t\tcase L_OBJC :\r\n\t\t\tid = IDM_LANG_OBJC;\tbreak;\r\n\t\tcase L_HTML :\r\n\t\t\tid = IDM_LANG_HTML;\tbreak;\r\n\t\tcase L_XML :\r\n\t\t\tid = IDM_LANG_XML; break;\r\n\t\tcase L_JS :\r\n\t\tcase L_JAVASCRIPT:\r\n\t\t\tid = IDM_LANG_JS; break;\r\n\t\tcase L_JSON:\r\n\t\t\tid = IDM_LANG_JSON; break;\r\n\t\tcase L_PHP :\r\n\t\t\tid = IDM_LANG_PHP; break;\r\n\t\tcase L_ASP :\r\n\t\t\tid = IDM_LANG_ASP; break;\r\n\t\tcase L_JSP :\r\n\t\t\tid = IDM_LANG_JSP; break;\r\n\t\tcase L_CSS :\r\n\t\t\tid = IDM_LANG_CSS; break;\r\n\t\tcase L_LUA :\r\n\t\t\tid = IDM_LANG_LUA; break;\r\n\t\tcase L_PERL :\r\n\t\t\tid = IDM_LANG_PERL; break;\r\n\t\tcase L_PYTHON :\r\n\t\t\tid = IDM_LANG_PYTHON; break;\r\n\t\tcase L_BATCH :\r\n\t\t\tid = IDM_LANG_BATCH; break;\r\n\t\tcase L_PASCAL :\r\n\t\t\tid = IDM_LANG_PASCAL; break;\r\n\t\tcase L_MAKEFILE :\r\n\t\t\tid = IDM_LANG_MAKEFILE;\tbreak;\r\n\t\tcase L_INI :\r\n\t\t\tid = IDM_LANG_INI; break;\r\n\t\tcase L_ASCII :\r\n\t\t\tid = IDM_LANG_ASCII; break;\r\n\t\tcase L_RC :\r\n\t\t\tid = IDM_LANG_RC; break;\r\n\t\tcase L_TEX :\r\n\t\t\tid = IDM_LANG_TEX; break;\r\n\t\tcase L_FORTRAN :\r\n\t\t\tid = IDM_LANG_FORTRAN; break;\r\n\t\tcase L_FORTRAN_77 :\r\n\t\t\tid = IDM_LANG_FORTRAN_77; break;\r\n\t\tcase L_BASH :\r\n\t\t\tid = IDM_LANG_BASH; break;\r\n\t\tcase L_FLASH :\r\n\t\t\tid = IDM_LANG_FLASH; break;\r\n\t\tcase L_NSIS :\r\n\t\t\tid = IDM_LANG_NSIS; break;\r\n\t\tcase L_USER :\r\n\t\t\tid = IDM_LANG_USER; break;\r\n\t\tcase L_SQL :\r\n\t\t\tid = IDM_LANG_SQL; break;\r\n\t\tcase L_VB :\r\n\t\t\tid = IDM_LANG_VB; break;\r\n\t\tcase L_TCL :\r\n\t\t\tid = IDM_LANG_TCL; break;\r\n\r\n\t\tcase L_LISP :\r\n\t\t\tid = IDM_LANG_LISP; break;\r\n\t\tcase L_SCHEME :\r\n\t\t\tid = IDM_LANG_SCHEME; break;\r\n\t\tcase L_ASM :\r\n\t\t\tid = IDM_LANG_ASM; break;\r\n\t\tcase L_DIFF :\r\n\t\t\tid = IDM_LANG_DIFF; break;\r\n\t\tcase L_PROPS :\r\n\t\t\tid = IDM_LANG_PROPS; break;\r\n\t\tcase L_PS :\r\n\t\t\tid = IDM_LANG_PS; break;\r\n\t\tcase L_RUBY :\r\n\t\t\tid = IDM_LANG_RUBY; break;\r\n\t\tcase L_SMALLTALK :\r\n\t\t\tid = IDM_LANG_SMALLTALK; break;\r\n\t\tcase L_VHDL :\r\n\t\t\tid = IDM_LANG_VHDL; break;\r\n\r\n\t\tcase L_ADA :\r\n\t\t\tid = IDM_LANG_ADA; break;\r\n\t\tcase L_MATLAB :\r\n\t\t\tid = IDM_LANG_MATLAB; break;\r\n\r\n\t\tcase L_HASKELL :\r\n\t\t\tid = IDM_LANG_HASKELL; break;\r\n\r\n\t\tcase L_KIX :\r\n\t\t\tid = IDM_LANG_KIX; break;\r\n\t\tcase L_AU3 :\r\n\t\t\tid = IDM_LANG_AU3; break;\r\n\t\tcase L_VERILOG :\r\n\t\t\tid = IDM_LANG_VERILOG; break;\r\n\t\tcase L_CAML :\r\n\t\t\tid = IDM_LANG_CAML; break;\r\n\r\n\t\tcase L_INNO :\r\n\t\t\tid = IDM_LANG_INNO; break;\r\n\r\n\t\tcase L_CMAKE :\r\n\t\t\tid = IDM_LANG_CMAKE; break;\r\n\r\n\t\tcase L_YAML :\r\n\t\t\tid = IDM_LANG_YAML; break;\r\n\r\n\t\tcase L_COBOL :\r\n\t\t\tid = IDM_LANG_COBOL; break;\r\n\r\n\t\tcase L_D :\r\n\t\t\tid = IDM_LANG_D; break;\r\n\r\n\t\tcase L_GUI4CLI :\r\n\t\t\tid = IDM_LANG_GUI4CLI; break;\r\n\r\n\t\tcase L_POWERSHELL :\r\n\t\t\tid = IDM_LANG_POWERSHELL; break;\r\n\r\n\t\tcase L_R :\r\n\t\t\tid = IDM_LANG_R; break;\r\n\r\n\t\tcase L_COFFEESCRIPT :\r\n\t\t\tid = IDM_LANG_COFFEESCRIPT; break;\r\n\r\n\t\tcase L_BAANC:\r\n\t\t\tid = IDM_LANG_BAANC; break;\r\n\r\n\t\tcase L_SREC :\r\n\t\t\tid = IDM_LANG_SREC; break;\r\n\r\n\t\tcase L_IHEX :\r\n\t\t\tid = IDM_LANG_IHEX; break;\r\n\r\n\t\tcase L_TEHEX :\r\n\t\t\tid = IDM_LANG_TEHEX; break;\r\n\r\n\t\tcase L_SWIFT:\r\n\t\t\tid = IDM_LANG_SWIFT; break;\r\n\r\n\t\tcase L_ASN1 :\r\n\t\t\tid = IDM_LANG_ASN1; break;\r\n\r\n        case L_AVS :\r\n\t\t\tid = IDM_LANG_AVS; break;\r\n\r\n\t\tcase L_BLITZBASIC :\r\n\t\t\tid = IDM_LANG_BLITZBASIC; break;\r\n\r\n\t\tcase L_PUREBASIC :\r\n\t\t\tid = IDM_LANG_PUREBASIC; break;\r\n\r\n\t\tcase L_FREEBASIC :\r\n\t\t\tid = IDM_LANG_FREEBASIC; break;\r\n\r\n\t\tcase L_CSOUND :\r\n\t\t\tid = IDM_LANG_CSOUND; break;\r\n\r\n\t\tcase L_ERLANG :\r\n\t\t\tid = IDM_LANG_ERLANG; break;\r\n\r\n\t\tcase L_ESCRIPT :\r\n\t\t\tid = IDM_LANG_ESCRIPT; break;\r\n\r\n\t\tcase L_FORTH :\r\n\t\t\tid = IDM_LANG_FORTH; break;\r\n\r\n\t\tcase L_LATEX :\r\n\t\t\tid = IDM_LANG_LATEX; break;\r\n\r\n\t\tcase L_MMIXAL :\r\n\t\t\tid = IDM_LANG_MMIXAL; break;\r\n\r\n\t\tcase L_NIM :\r\n\t\t\tid = IDM_LANG_NIM; break;\r\n\r\n\t\tcase L_NNCRONTAB :\r\n\t\t\tid = IDM_LANG_NNCRONTAB; break;\r\n\r\n\t\tcase L_OSCRIPT :\r\n\t\t\tid = IDM_LANG_OSCRIPT; break;\r\n\r\n\t\tcase L_REBOL :\r\n\t\t\tid = IDM_LANG_REBOL; break;\r\n\r\n\t\tcase L_REGISTRY :\r\n\t\t\tid = IDM_LANG_REGISTRY; break;\r\n\r\n\t\tcase L_RUST :\r\n\t\t\tid = IDM_LANG_RUST; break;\r\n\r\n\t\tcase L_SPICE :\r\n\t\t\tid = IDM_LANG_SPICE; break;\r\n\r\n\t\tcase L_TXT2TAGS :\r\n\t\t\tid = IDM_LANG_TXT2TAGS; break;\r\n\r\n\t\tcase L_VISUALPROLOG:\r\n\t\t\tid = IDM_LANG_VISUALPROLOG; break;\r\n\r\n\t\tcase L_TYPESCRIPT:\r\n\t\t\tid = IDM_LANG_TYPESCRIPT; break;\r\n\r\n\t\tcase L_SEARCHRESULT :\r\n\t\t\tid = -1;\tbreak;\r\n\r\n\t\tcase L_TEXT :\r\n\t\t\tid = IDM_LANG_TEXT;\tbreak;\r\n\r\n\r\n\t\tdefault :\r\n\t\t\tif (lt >= L_EXTERNAL && lt < L_END)\r\n\t\t\t\tid = lt - L_EXTERNAL + IDM_LANG_EXTERNAL;\r\n\t\t\telse\r\n\t\t\t\tid = IDM_LANG_TEXT;\r\n\t}\r\n\treturn id;\r\n}\r\n\r\ngeneric_string NppParameters:: getWinVersionStr() const\r\n{\r\n\tswitch (_winVersion)\r\n\t{\r\n\t\tcase WV_WIN32S: return TEXT(\"Windows 3.1\");\r\n\t\tcase WV_95: return TEXT(\"Windows 95\");\r\n\t\tcase WV_98: return TEXT(\"Windows 98\");\r\n\t\tcase WV_ME: return TEXT(\"Windows Millennium Edition\");\r\n\t\tcase WV_NT: return TEXT(\"Windows NT\");\r\n\t\tcase WV_W2K: return TEXT(\"Windows 2000\");\r\n\t\tcase WV_XP: return TEXT(\"Windows XP\");\r\n\t\tcase WV_S2003: return TEXT(\"Windows Server 2003\");\r\n\t\tcase WV_XPX64: return TEXT(\"Windows XP 64 bits\");\r\n\t\tcase WV_VISTA: return TEXT(\"Windows Vista\");\r\n\t\tcase WV_WIN7: return TEXT(\"Windows 7\");\r\n\t\tcase WV_WIN8: return TEXT(\"Windows 8\");\r\n\t\tcase WV_WIN81: return TEXT(\"Windows 8.1\");\r\n\t\tcase WV_WIN10: return TEXT(\"Windows 10\");\r\n\t\tdefault: /*case WV_UNKNOWN:*/ return TEXT(\"Windows unknown version\");\r\n\t}\r\n}\r\n\r\ngeneric_string NppParameters::getWinVerBitStr() const\r\n{\r\n\tswitch (_platForm)\r\n\t{\r\n\tcase PF_X86:\r\n\t\treturn TEXT(\"32-bit\");\r\n\r\n\tcase PF_X64:\r\n\tcase PF_IA64:\r\n\tcase PF_ARM64:\r\n\t\treturn TEXT(\"64-bit\");\r\n\r\n\tdefault:\r\n\t\treturn TEXT(\"Unknown-bit\");\r\n\t}\r\n}\r\n\r\ngeneric_string NppParameters::writeStyles(LexerStylerArray & lexersStylers, StyleArray & globalStylers)\r\n{\r\n\tTiXmlNode *lexersRoot = (_pXmlUserStylerDoc->FirstChild(TEXT(\"NotepadPlus\")))->FirstChildElement(TEXT(\"LexerStyles\"));\r\n\tfor (TiXmlNode *childNode = lexersRoot->FirstChildElement(TEXT(\"LexerType\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"LexerType\")))\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *nm = element->Attribute(TEXT(\"name\"));\r\n\r\n\t\tLexerStyler *pLs = _lexerStylerVect.getLexerStylerByName(nm);\r\n\t\tLexerStyler *pLs2 = lexersStylers.getLexerStylerByName(nm);\r\n\r\n\t\tif (pLs)\r\n\t\t{\r\n\t\t\tconst TCHAR *extStr = pLs->getLexerUserExt();\r\n\t\t\telement->SetAttribute(TEXT(\"ext\"), extStr);\r\n\t\t\tfor (TiXmlNode *grChildNode = childNode->FirstChildElement(TEXT(\"WordsStyle\"));\r\n\t\t\t\t\tgrChildNode ;\r\n\t\t\t\t\tgrChildNode = grChildNode->NextSibling(TEXT(\"WordsStyle\")))\r\n\t\t\t{\r\n\t\t\t\tTiXmlElement *grElement = grChildNode->ToElement();\r\n\t\t\t\tconst TCHAR *styleName = grElement->Attribute(TEXT(\"name\"));\r\n\t\t\t\tconst Style * pStyle = pLs->findByName(styleName);\r\n\t\t\t\tStyle * pStyle2Sync = pLs2 ? pLs2->findByName(styleName) : nullptr;\r\n\t\t\t\tif (pStyle && pStyle2Sync)\r\n\t\t\t\t{\r\n\t\t\t\t\twriteStyle2Element(*pStyle, *pStyle2Sync, grElement);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (size_t x = 0; x < _pXmlExternalLexerDoc.size(); ++x)\r\n\t{\r\n\t\tTiXmlNode* lexersRoot2 = ( _pXmlExternalLexerDoc[x]->FirstChild(TEXT(\"NotepadPlus\")))->FirstChildElement(TEXT(\"LexerStyles\"));\r\n\t\tfor (TiXmlNode* childNode = lexersRoot2->FirstChildElement(TEXT(\"LexerType\"));\r\n\t\t\tchildNode ;\r\n\t\t\tchildNode = childNode->NextSibling(TEXT(\"LexerType\")))\r\n\t\t{\r\n\t\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\t\tconst TCHAR *nm = element->Attribute(TEXT(\"name\"));\r\n\r\n\t\t\tLexerStyler *pLs = _lexerStylerVect.getLexerStylerByName(nm);\r\n\t\t\tLexerStyler *pLs2 = lexersStylers.getLexerStylerByName(nm);\r\n\r\n\t\t\tif (pLs)\r\n\t\t\t{\r\n\t\t\t\tconst TCHAR *extStr = pLs->getLexerUserExt();\r\n\t\t\t\telement->SetAttribute(TEXT(\"ext\"), extStr);\r\n\r\n\t\t\t\tfor (TiXmlNode *grChildNode = childNode->FirstChildElement(TEXT(\"WordsStyle\"));\r\n\t\t\t\t\t\tgrChildNode ;\r\n\t\t\t\t\t\tgrChildNode = grChildNode->NextSibling(TEXT(\"WordsStyle\")))\r\n\t\t\t\t{\r\n\t\t\t\t\tTiXmlElement *grElement = grChildNode->ToElement();\r\n\t\t\t\t\tconst TCHAR *styleName = grElement->Attribute(TEXT(\"name\"));\r\n\t\t\t\t\tconst Style * pStyle = pLs->findByName(styleName);\r\n\t\t\t\t\tStyle * pStyle2Sync = pLs2 ? pLs2->findByName(styleName) : nullptr;\r\n\t\t\t\t\tif (pStyle && pStyle2Sync)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twriteStyle2Element(*pStyle, *pStyle2Sync, grElement);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t_pXmlExternalLexerDoc[x]->SaveFile();\r\n\t}\r\n\r\n\tTiXmlNode *globalStylesRoot = (_pXmlUserStylerDoc->FirstChild(TEXT(\"NotepadPlus\")))->FirstChildElement(TEXT(\"GlobalStyles\"));\r\n\r\n\tfor (TiXmlNode *childNode = globalStylesRoot->FirstChildElement(TEXT(\"WidgetStyle\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"WidgetStyle\")))\r\n\t{\r\n\t\tTiXmlElement *pElement = childNode->ToElement();\r\n\t\tconst TCHAR *styleName = pElement->Attribute(TEXT(\"name\"));\r\n\t\tconst Style * pStyle = _widgetStyleArray.findByName(styleName);\r\n\t\tStyle * pStyle2Sync = globalStylers.findByName(styleName);\r\n\t\tif (pStyle && pStyle2Sync)\r\n\t\t{\r\n\t\t\twriteStyle2Element(*pStyle, *pStyle2Sync, pElement);\r\n\t\t}\r\n\t}\r\n\r\n\tbool isSaved = _pXmlUserStylerDoc->SaveFile();\r\n\tif (!isSaved)\r\n\t{\r\n\t\tauto savePath = _themeSwitcher.getSavePathFrom(_pXmlUserStylerDoc->Value());\r\n\t\tif (!savePath.empty())\r\n\t\t{\r\n\t\t\t_pXmlUserStylerDoc->SaveFile(savePath.c_str());\r\n\t\t\treturn savePath;\r\n\t\t}\r\n\t}\r\n\treturn TEXT(\"\");\r\n}\r\n\r\n\r\nbool NppParameters::insertTabInfo(const TCHAR *langName, int tabInfo)\r\n{\r\n\tif (!_pXmlDoc) return false;\r\n\tTiXmlNode *langRoot = (_pXmlDoc->FirstChild(TEXT(\"NotepadPlus\")))->FirstChildElement(TEXT(\"Languages\"));\r\n\tfor (TiXmlNode *childNode = langRoot->FirstChildElement(TEXT(\"Language\"));\r\n\t\tchildNode ;\r\n\t\tchildNode = childNode->NextSibling(TEXT(\"Language\")))\r\n\t{\r\n\t\tTiXmlElement *element = childNode->ToElement();\r\n\t\tconst TCHAR *nm = element->Attribute(TEXT(\"name\"));\r\n\t\tif (nm && lstrcmp(langName, nm) == 0)\r\n\t\t{\r\n\t\t\tchildNode->ToElement()->SetAttribute(TEXT(\"tabSettings\"), tabInfo);\r\n\t\t\t_pXmlDoc->SaveFile();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nvoid NppParameters::writeStyle2Element(const Style & style2Write, Style & style2Sync, TiXmlElement *element)\r\n{\r\n\tif (HIBYTE(HIWORD(style2Write._fgColor)) != 0xFF)\r\n\t{\r\n\t\tint rgbVal = RGB2int(style2Write._fgColor);\r\n\t\tTCHAR fgStr[7];\r\n\t\twsprintf(fgStr, TEXT(\"%.6X\"), rgbVal);\r\n\t\telement->SetAttribute(TEXT(\"fgColor\"), fgStr);\r\n\t}\r\n\r\n\tif (HIBYTE(HIWORD(style2Write._bgColor)) != 0xFF)\r\n\t{\r\n\t\tint rgbVal = RGB2int(style2Write._bgColor);\r\n\t\tTCHAR bgStr[7];\r\n\t\twsprintf(bgStr, TEXT(\"%.6X\"), rgbVal);\r\n\t\telement->SetAttribute(TEXT(\"bgColor\"), bgStr);\r\n\t}\r\n\r\n\tif (style2Write._colorStyle != COLORSTYLE_ALL)\r\n\t{\r\n\t\telement->SetAttribute(TEXT(\"colorStyle\"), style2Write._colorStyle);\r\n\t}\r\n\r\n\tif (!style2Write._fontName.empty())\r\n\t{\r\n\t\tconst TCHAR * oldFontName = element->Attribute(TEXT(\"fontName\"));\r\n\t\tif (oldFontName && oldFontName != style2Write._fontName)\r\n\t\t{\r\n\t\t\telement->SetAttribute(TEXT(\"fontName\"), style2Write._fontName);\r\n\t\t\tstyle2Sync._fontName = style2Write._fontName;\r\n\t\t}\r\n\t}\r\n\r\n\tif (style2Write._fontSize != STYLE_NOT_USED)\r\n\t{\r\n\t\tif (!style2Write._fontSize)\r\n\t\t\telement->SetAttribute(TEXT(\"fontSize\"), TEXT(\"\"));\r\n\t\telse\r\n\t\t\telement->SetAttribute(TEXT(\"fontSize\"), style2Write._fontSize);\r\n\t}\r\n\r\n\tif (style2Write._fontStyle != STYLE_NOT_USED)\r\n\t{\r\n\t\telement->SetAttribute(TEXT(\"fontStyle\"), style2Write._fontStyle);\r\n\t}\r\n\r\n\r\n\tif (!style2Write._keywords.empty())\r\n\t{\r\n\t\tTiXmlNode *teteDeNoeud = element->LastChild();\r\n\r\n\t\tif (teteDeNoeud)\r\n\t\t\tteteDeNoeud->SetValue(style2Write._keywords.c_str());\r\n\t\telse\r\n\t\t\telement->InsertEndChild(TiXmlText(style2Write._keywords.c_str()));\r\n\t}\r\n}\r\n\r\nvoid NppParameters::insertUserLang2Tree(TiXmlNode *node, UserLangContainer *userLang)\r\n{\r\n\tTiXmlElement *rootElement = (node->InsertEndChild(TiXmlElement(TEXT(\"UserLang\"))))->ToElement();\r\n\r\n\tTCHAR temp[32];\r\n\tgeneric_string udlVersion;\r\n\tudlVersion += generic_itoa(SCE_UDL_VERSION_MAJOR, temp, 10);\r\n\tudlVersion += TEXT(\".\");\r\n\tudlVersion += generic_itoa(SCE_UDL_VERSION_MINOR, temp, 10);\r\n\r\n\trootElement->SetAttribute(TEXT(\"name\"), userLang->_name);\r\n\trootElement->SetAttribute(TEXT(\"ext\"), userLang->_ext);\r\n\tif (userLang->_isDarkModeTheme)\r\n\t\trootElement->SetAttribute(TEXT(\"darkModeTheme\"), TEXT(\"yes\"));\r\n\trootElement->SetAttribute(TEXT(\"udlVersion\"), udlVersion.c_str());\r\n\r\n\tTiXmlElement *settingsElement = (rootElement->InsertEndChild(TiXmlElement(TEXT(\"Settings\"))))->ToElement();\r\n\t{\r\n\t\tTiXmlElement *globalElement = (settingsElement->InsertEndChild(TiXmlElement(TEXT(\"Global\"))))->ToElement();\r\n\t\tglobalElement->SetAttribute(TEXT(\"caseIgnored\"),\t\t\tuserLang->_isCaseIgnored ? TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\tglobalElement->SetAttribute(TEXT(\"allowFoldOfComments\"),\tuserLang->_allowFoldOfComments ? TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\tglobalElement->SetAttribute(TEXT(\"foldCompact\"),\t\t\tuserLang->_foldCompact ? TEXT(\"yes\"):TEXT(\"no\"));\r\n\t\tglobalElement->SetAttribute(TEXT(\"forcePureLC\"),\t\t\tuserLang->_forcePureLC);\r\n\t\tglobalElement->SetAttribute(TEXT(\"decimalSeparator\"),\t   userLang->_decimalSeparator);\r\n\r\n\t\tTiXmlElement *prefixElement = (settingsElement->InsertEndChild(TiXmlElement(TEXT(\"Prefix\"))))->ToElement();\r\n\t\tfor (int i = 0 ; i < SCE_USER_TOTAL_KEYWORD_GROUPS ; ++i)\r\n\t\t\tprefixElement->SetAttribute(globalMappper().keywordNameMapper[i+SCE_USER_KWLIST_KEYWORDS1], userLang->_isPrefix[i]?TEXT(\"yes\"):TEXT(\"no\"));\r\n\t}\r\n\r\n\tTiXmlElement *kwlElement = (rootElement->InsertEndChild(TiXmlElement(TEXT(\"KeywordLists\"))))->ToElement();\r\n\r\n\tfor (int i = 0 ; i < SCE_USER_KWLIST_TOTAL ; ++i)\r\n\t{\r\n\t\tTiXmlElement *kwElement = (kwlElement->InsertEndChild(TiXmlElement(TEXT(\"Keywords\"))))->ToElement();\r\n\t\tkwElement->SetAttribute(TEXT(\"name\"), globalMappper().keywordNameMapper[i]);\r\n\t\tkwElement->InsertEndChild(TiXmlText(userLang->_keywordLists[i]));\r\n\t}\r\n\r\n\tTiXmlElement *styleRootElement = (rootElement->InsertEndChild(TiXmlElement(TEXT(\"Styles\"))))->ToElement();\r\n\r\n\tfor (const Style & style2Write : userLang->_styles)\r\n\t{\r\n\t\tTiXmlElement *styleElement = (styleRootElement->InsertEndChild(TiXmlElement(TEXT(\"WordsStyle\"))))->ToElement();\r\n\r\n\t\tif (style2Write._styleID == -1)\r\n\t\t\tcontinue;\r\n\r\n\t\tstyleElement->SetAttribute(TEXT(\"name\"), style2Write._styleDesc);\r\n\r\n\t\t//if (HIBYTE(HIWORD(style2Write._fgColor)) != 0xFF)\r\n\t\t{\r\n\t\t\tint rgbVal = RGB2int(style2Write._fgColor);\r\n\t\t\tTCHAR fgStr[7];\r\n\t\t\twsprintf(fgStr, TEXT(\"%.6X\"), rgbVal);\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"fgColor\"), fgStr);\r\n\t\t}\r\n\r\n\t\t//if (HIBYTE(HIWORD(style2Write._bgColor)) != 0xFF)\r\n\t\t{\r\n\t\t\tint rgbVal = RGB2int(style2Write._bgColor);\r\n\t\t\tTCHAR bgStr[7];\r\n\t\t\twsprintf(bgStr, TEXT(\"%.6X\"), rgbVal);\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"bgColor\"), bgStr);\r\n\t\t}\r\n\r\n\t\tif (style2Write._colorStyle != COLORSTYLE_ALL)\r\n\t\t{\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"colorStyle\"), style2Write._colorStyle);\r\n\t\t}\r\n\r\n\t\tif (!style2Write._fontName.empty())\r\n\t\t{\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"fontName\"), style2Write._fontName);\r\n\t\t}\r\n\r\n\t\tif (style2Write._fontStyle == STYLE_NOT_USED)\r\n\t\t{\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"fontStyle\"), TEXT(\"0\"));\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstyleElement->SetAttribute(TEXT(\"fontStyle\"), style2Write._fontStyle);\r\n\t\t}\r\n\r\n\t\tif (style2Write._fontSize != STYLE_NOT_USED)\r\n\t\t{\r\n\t\t\tif (!style2Write._fontSize)\r\n\t\t\t\tstyleElement->SetAttribute(TEXT(\"fontSize\"), TEXT(\"\"));\r\n\t\t\telse\r\n\t\t\t\tstyleElement->SetAttribute(TEXT(\"fontSize\"), style2Write._fontSize);\r\n\t\t}\r\n\r\n\t\tstyleElement->SetAttribute(TEXT(\"nesting\"), style2Write._nesting);\r\n\t}\r\n}\r\n\r\nvoid NppParameters::addUserModifiedIndex(size_t index)\r\n{\r\n\tsize_t len = _customizedShortcuts.size();\r\n\tbool found = false;\r\n\tfor (size_t i = 0; i < len; ++i)\r\n\t{\r\n\t\tif (_customizedShortcuts[i] == index)\r\n\t\t{\r\n\t\t\tfound = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (!found)\r\n\t{\r\n\t\t_customizedShortcuts.push_back(index);\r\n\t}\r\n}\r\n\r\nvoid NppParameters::addPluginModifiedIndex(size_t index)\r\n{\r\n\tsize_t len = _pluginCustomizedCmds.size();\r\n\tbool found = false;\r\n\tfor (size_t i = 0; i < len; ++i)\r\n\t{\r\n\t\tif (_pluginCustomizedCmds[i] == index)\r\n\t\t{\r\n\t\t\tfound = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (!found)\r\n\t{\r\n\t\t_pluginCustomizedCmds.push_back(index);\r\n\t}\r\n}\r\n\r\nvoid NppParameters::addScintillaModifiedIndex(int index)\r\n{\r\n\tsize_t len = _scintillaModifiedKeyIndices.size();\r\n\tbool found = false;\r\n\tfor (size_t i = 0; i < len; ++i)\r\n\t{\r\n\t\tif (_scintillaModifiedKeyIndices[i] == index)\r\n\t\t{\r\n\t\t\tfound = true;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tif (!found)\r\n\t{\r\n\t\t_scintillaModifiedKeyIndices.push_back(index);\r\n\t}\r\n}\r\n\r\nvoid NppParameters::safeWow64EnableWow64FsRedirection(BOOL Wow64FsEnableRedirection)\r\n{\r\n\tHMODULE kernel = GetModuleHandle(TEXT(\"kernel32\"));\r\n\tif (kernel)\r\n\t{\r\n\t\tBOOL isWow64 = FALSE;\r\n\t\ttypedef BOOL (WINAPI *LPFN_ISWOW64PROCESS) (HANDLE, PBOOL);\r\n\t\tLPFN_ISWOW64PROCESS IsWow64ProcessFunc = (LPFN_ISWOW64PROCESS) GetProcAddress(kernel,\"IsWow64Process\");\r\n\r\n\t\tif (IsWow64ProcessFunc)\r\n\t\t{\r\n\t\t\tIsWow64ProcessFunc(GetCurrentProcess(),&isWow64);\r\n\r\n\t\t\tif (isWow64)\r\n\t\t\t{\r\n\t\t\t\ttypedef BOOL (WINAPI *LPFN_WOW64ENABLEWOW64FSREDIRECTION)(BOOL);\r\n\t\t\t\tLPFN_WOW64ENABLEWOW64FSREDIRECTION Wow64EnableWow64FsRedirectionFunc = (LPFN_WOW64ENABLEWOW64FSREDIRECTION)GetProcAddress(kernel, \"Wow64EnableWow64FsRedirection\");\r\n\t\t\t\tif (Wow64EnableWow64FsRedirectionFunc)\r\n\t\t\t\t{\r\n\t\t\t\t\tWow64EnableWow64FsRedirectionFunc(Wow64FsEnableRedirection);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::setUdlXmlDirtyFromIndex(size_t i)\r\n{\r\n\tfor (auto& uxfs : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tif (i >= uxfs._indexRange.first && i < uxfs._indexRange.second)\r\n\t\t{\r\n\t\t\tuxfs._isDirty = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\nConsidering we have done:\r\nload default UDL:  3 languges\r\nload a UDL file:   1 languge\r\nload a UDL file:   2 languges\r\ncreate a UDL:      1 languge\r\nimported a UDL:    1 languge\r\n\r\nthe evolution to remove UDL one by one:\r\n\r\n0[D1]                        0[D1]                        0[D1]                         [D1]                         [D1]\r\n1[D2]                        1[D2]                        1[D2]                        0[D2]                         [D2]\r\n2[D3]  [DUDL, <0,3>]         2[D3]  [DUDL, <0,3>]         2[D3]  [DUDL, <0,3>]         1[D3]  [DUDL, <0,2>]          [D3]  [DUDL, <0,0>]\r\n3[U1]  [NUDL, <3,4>]         3[U1]  [NUDL, <3,4>]         3[U1]  [NUDL, <3,4>]         2[U1]  [NUDL, <2,3>]          [U1]  [NUDL, <0,0>]\r\n4[U2]                        4[U2]                         [U2]                         [U2]                         [U2]\r\n5[U2]  [NUDL, <4,6>]         5[U2]  [NUDL, <4,6>]         4[U2]  [NUDL, <4,5>]         3[U2]  [NUDL, <3,4>]         0[U2]  [NUDL, <0,1>]\r\n6[C1]  [NULL, <6,7>]          [C1]  [NULL, <6,6>]          [C1]  [NULL, <5,5>]          [C1]  [NULL, <4,4>]          [C1]  [NULL, <1,1>]\r\n7[I1]  [NULL, <7,8>]         6[I1]  [NULL, <6,7>]         5[I1]  [NULL, <5,6>]         4[I1]  [NULL, <4,5>]         1[I1]  [NULL, <1,2>]\r\n*/\r\nvoid NppParameters::removeIndexFromXmlUdls(size_t i)\r\n{\r\n\tbool isUpdateBegin = false;\r\n\tfor (auto& uxfs : _pXmlUserLangsDoc)\r\n\t{\r\n\t\t// Find index\r\n\t\tif (!isUpdateBegin && (i >= uxfs._indexRange.first && i < uxfs._indexRange.second)) // found it\r\n\t\t{\r\n\t\t\tif (uxfs._indexRange.second > 0)\r\n\t\t\t\tuxfs._indexRange.second -= 1;\r\n\t\t\tuxfs._isDirty = true;\r\n\r\n\t\t\tisUpdateBegin = true;\r\n\t\t}\r\n\r\n\t\t// Update\r\n\t\telse if (isUpdateBegin)\r\n\t\t{\r\n\t\t\tif (uxfs._indexRange.first > 0)\r\n\t\t\t\tuxfs._indexRange.first -= 1;\r\n\t\t\tif (uxfs._indexRange.second > 0)\r\n\t\t\t\tuxfs._indexRange.second -= 1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid NppParameters::setUdlXmlDirtyFromXmlDoc(const TiXmlDocument* xmlDoc)\r\n{\r\n\tfor (auto& uxfs : _pXmlUserLangsDoc)\r\n\t{\r\n\t\tif (xmlDoc == uxfs._udlXmlDoc)\r\n\t\t{\r\n\t\t\tuxfs._isDirty = true;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nDate::Date(const TCHAR *dateStr)\r\n{\r\n\t// timeStr should be Notepad++ date format : YYYYMMDD\r\n\tassert(dateStr);\r\n\tint D = lstrlen(dateStr);\r\n\r\n\tif ( 8==D )\r\n\t{\r\n\t\tgeneric_string ds(dateStr);\r\n\t\tgeneric_string yyyy(ds, 0, 4);\r\n\t\tgeneric_string mm(ds, 4, 2);\r\n\t\tgeneric_string dd(ds, 6, 2);\r\n\r\n\t\tint y = generic_atoi(yyyy.c_str());\r\n\t\tint m = generic_atoi(mm.c_str());\r\n\t\tint d = generic_atoi(dd.c_str());\r\n\r\n\t\tif ((y > 0 && y <= 9999) && (m > 0 && m <= 12) && (d > 0 && d <= 31))\r\n\t\t{\r\n\t\t\t_year = y;\r\n\t\t\t_month = m;\r\n\t\t\t_day = d;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tnow();\r\n}\r\n\r\n// The constructor which makes the date of number of days from now\r\n// nbDaysFromNow could be negative if user want to make a date in the past\r\n// if the value of nbDaysFromNow is 0 then the date will be now\r\nDate::Date(int nbDaysFromNow)\r\n{\r\n\tconst time_t oneDay = (60 * 60 * 24);\r\n\r\n\ttime_t rawtime;\r\n\ttm* timeinfo;\r\n\r\n\ttime(&rawtime);\r\n\trawtime += (nbDaysFromNow * oneDay);\r\n\r\n\ttimeinfo = localtime(&rawtime);\r\n\tif (timeinfo)\r\n\t{\r\n\t\t_year = timeinfo->tm_year + 1900;\r\n\t\t_month = timeinfo->tm_mon + 1;\r\n\t\t_day = timeinfo->tm_mday;\r\n\t}\r\n}\r\n\r\nvoid Date::now()\r\n{\r\n\ttime_t rawtime;\r\n\ttm* timeinfo;\r\n\r\n\ttime(&rawtime);\r\n\ttimeinfo = localtime(&rawtime);\r\n\tif (timeinfo)\r\n\t{\r\n\t\t_year = timeinfo->tm_year + 1900;\r\n\t\t_month = timeinfo->tm_mon + 1;\r\n\t\t_day = timeinfo->tm_mday;\r\n\t}\r\n}\r\n\r\n\r\nEolType convertIntToFormatType(int value, EolType defvalue)\r\n{\r\n\tswitch (value)\r\n\t{\r\n\t\tcase static_cast<LPARAM>(EolType::windows) :\r\n\t\t\treturn EolType::windows;\r\n\t\tcase static_cast<LPARAM>(EolType::macos) :\r\n\t\t\t\treturn EolType::macos;\r\n\t\tcase static_cast<LPARAM>(EolType::unix) :\r\n\t\t\treturn EolType::unix;\r\n\t\tdefault:\r\n\t\t\treturn defvalue;\r\n\t}\r\n}\r\n"], "filenames": ["PowerEditor/src/MISC/Exception/MiniDumper.cpp", "PowerEditor/src/Parameters.cpp"], "buggy_code_start_loc": [37, 1172], "buggy_code_end_loc": [38, 1173], "fixing_code_start_loc": [37, 1172], "fixing_code_end_loc": [38, 1173], "type": "CWE-427", "message": "Notepad++ versions 8.4.1 and before are vulnerable to DLL hijacking where an attacker can replace the vulnerable dll (UxTheme.dll) with his own dll and run arbitrary code in the context of Notepad++.", "other": {"cve": {"id": "CVE-2022-32168", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2022-09-28T09:15:09.520", "lastModified": "2022-09-29T16:22:15.200", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Notepad++ versions 8.4.1 and before are vulnerable to DLL hijacking where an attacker can replace the vulnerable dll (UxTheme.dll) with his own dll and run arbitrary code in the context of Notepad++."}, {"lang": "es", "value": "Notepad++ versiones 8.4.1 y anteriores, son vulnerables a un secuestro de DLL, donde un atacante puede reemplazar la dll vulnerable (UxTheme.dll) por su propia dll y ejecutar c\u00f3digo arbitrario en el contexto de Notepad++"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "vulnerabilitylab@mend.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 5.9}]}, "weaknesses": [{"source": "vulnerabilitylab@mend.io", "type": "Primary", "description": [{"lang": "en", "value": "CWE-427"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:notepad-plus-plus:notepad\\+\\+:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.3", "versionEndExcluding": "8.4.5", "matchCriteriaId": "CC679137-8D40-4D8B-B833-A3F8DFD55840"}]}]}], "references": [{"url": "https://github.com/notepad-plus-plus/notepad-plus-plus/commit/85d7215d9b3e0d5a8433fc31aec4f2966821051e", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.mend.io/vulnerability-database/CVE-2022-32168", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/notepad-plus-plus/notepad-plus-plus/commit/85d7215d9b3e0d5a8433fc31aec4f2966821051e"}}