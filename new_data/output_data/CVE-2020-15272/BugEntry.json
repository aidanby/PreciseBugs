{"buggy_code": ["# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog], and this project adheres to [Semantic\nVersioning].\n\n## [Unreleased]\n\n- _No changes yet_\n\n## [1.0.0] - 2020-10-22\n\n- Run the Action to get the git tag annotation of the current tag.\n- Run the Action to get the git tag annotation of a specified tag.\n\n[keep a changelog]: https://keepachangelog.com/en/1.0.0/\n[semantic versioning]: https://semver.org/spec/v2.0.0.html\n", "name: 'Git Tag Annotation'\ndescription: 'Get the annotation associated with a git tag'\nauthor: 'Eric Cornelissen'\n\ninputs:\n  tag:\n    description: 'tag of interest (defaults to the GITHUB_REF environment variable)'\n    required: false\n\noutputs:\n  git-tag-annotation:\n    description: 'The git tag annotation'\n\nruns:\n  using: 'node12'\n  main: 'lib/index.js'\n\nbranding:\n  icon: 'git-commit'\n  color: 'gray-dark'\n", "const core = require('@actions/core');\nconst { exec } = require('child_process');\n\nfunction main() {\n  try {\n    let tag = process.env.GITHUB_REF;\n    if (core.getInput('tag')) {\n      tag = `refs/tags/${core.getInput('tag')}`;\n    }\n\n    exec(`git for-each-ref --format='%(contents)' ${tag}`, (err, stdout) => {\n      if (err) {\n        core.setFailed(err);\n      } else {\n        core.setOutput('git-tag-annotation', stdout);\n      }\n    });\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nmodule.exports = main;\n", "const core = require('@actions/core');\nconst child_process = require('child_process');\n\nconst main = require('../src/main.js');\n\njest.mock('@actions/core');\njest.mock('child_process');\n\nbeforeEach(() => {\n  core.getInput.mockClear();\n  core.setFailed.mockClear();\n  core.setOutput.mockClear();\n\n  child_process.exec.mockClear();\n});\n\nit.each([\n  \"v1.2.3\",\n  \"v0.3.14\",\n])('uses the tag from the environment (%s)', (tag) => {\n  process.env.GITHUB_REF = `refs/tags/${tag}`;\n\n  main();\n\n  expect(child_process.exec).toHaveBeenCalledWith(\n    `git for-each-ref --format='%(contents)' refs/tags/${tag}`,\n    expect.any(Function),\n  );\n});\n\nit('tries to get a tag from the input', () => {\n  core.getInput.mockReturnValue(undefined);\n\n  main();\n\n  expect(core.getInput).toHaveBeenCalledTimes(1);\n});\n\nit.each([\n  \"v3.2.1\",\n  \"v0.2.718\",\n])('uses the tag from the input (%s)', (tag) => {\n  core.getInput.mockReturnValue(tag);\n\n  main();\n\n  expect(core.getInput).toHaveBeenCalledTimes(2);\n  expect(child_process.exec).toHaveBeenCalledWith(\n    `git for-each-ref --format='%(contents)' refs/tags/${tag}`,\n    expect.any(Function),\n  );\n});\n\nit('outputs the annotation', (done) => {\n  const annotation = \"Hello world!\";\n  child_process.exec.mockImplementation((_, fn) => {\n    fn(null, annotation);\n\n    expect(core.setOutput).toHaveBeenCalledTimes(1);\n    expect(core.setOutput).toHaveBeenCalledWith(\n      'git-tag-annotation',\n      annotation,\n    );\n    done();\n  });\n\n  main();\n});\n\nit('sets an error if the annotation could not be found', (done) => {\n  child_process.exec.mockImplementation((_, fn) => {\n    fn(\"Something went wrong!\", null);\n\n    expect(core.setOutput).not.toHaveBeenCalled();\n    expect(core.setFailed).toHaveBeenCalledTimes(1);\n    done();\n  });\n\n  main();\n});\n\nit('sets an error if exec fails', () => {\n  child_process.exec.mockImplementation(() => {\n    throw new Error({ message: \"Something went wrong\" })\n  });\n\n  main();\n\n  expect(core.setOutput).not.toHaveBeenCalled();\n  expect(core.setFailed).toHaveBeenCalledTimes(1);\n});\n"], "fixing_code": ["# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog], and this project adheres to [Semantic\nVersioning].\n\n## [Unreleased]\n\n- _No changes yet_\n\n## [1.0.1] - 2020-10-24\n\n- Update Action icon.\n- Fix shell injection vulnerability.\n\n## [1.0.0] - 2020-10-22\n\n- Run the Action to get the git tag annotation of the current tag.\n- Run the Action to get the git tag annotation of a specified tag.\n\n[keep a changelog]: https://keepachangelog.com/en/1.0.0/\n[semantic versioning]: https://semver.org/spec/v2.0.0.html\n", "name: 'Git Tag Annotation'\ndescription: 'Get the annotation associated with a git tag'\nauthor: 'Eric Cornelissen'\n\ninputs:\n  tag:\n    description: 'tag of interest (defaults to the GITHUB_REF environment variable)'\n    required: false\n\noutputs:\n  git-tag-annotation:\n    description: 'The git tag annotation'\n\nruns:\n  using: 'node12'\n  main: 'lib/index.js'\n\nbranding:\n  icon: 'tag'\n  color: 'gray-dark'\n", "const core = require('@actions/core');\nconst { exec } = require('child_process');\n\n// Based on https://stackoverflow.com/a/22827128\nfunction escapeShellArg(arg) {\n  return arg.replace(/'/g, `'\\\\''`);\n}\n\nfunction main() {\n  try {\n    let tag = process.env.GITHUB_REF;\n    if (core.getInput('tag')) {\n      tag = `refs/tags/${core.getInput('tag')}`;\n    }\n\n    exec(\n      `git for-each-ref --format='%(contents)' '${escapeShellArg(tag)}'`,\n      (err, stdout) => {\n        if (err) {\n          core.setFailed(err);\n        } else {\n          core.setOutput('git-tag-annotation', stdout);\n        }\n      },\n    );\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nmodule.exports = main;\n", "const core = require('@actions/core');\nconst child_process = require('child_process');\n\nconst main = require('../src/main.js');\n\njest.mock('@actions/core');\njest.mock('child_process');\n\nbeforeEach(() => {\n  core.getInput.mockClear();\n  core.setFailed.mockClear();\n  core.setOutput.mockClear();\n\n  child_process.exec.mockClear();\n});\n\nit.each([\n  \"v1.2.3\",\n  \"v0.3.14\",\n])('uses the tag from the environment (%s)', (tag) => {\n  process.env.GITHUB_REF = `refs/tags/${tag}`;\n\n  main();\n\n  expect(child_process.exec).toHaveBeenCalledWith(\n    `git for-each-ref --format='%(contents)' 'refs/tags/${tag}'`,\n    expect.any(Function),\n  );\n});\n\nit('tries to get a tag from the input', () => {\n  core.getInput.mockReturnValue(undefined);\n\n  main();\n\n  expect(core.getInput).toHaveBeenCalledTimes(1);\n});\n\nit.each([\n  \"v3.2.1\",\n  \"v0.2.718\",\n])('uses the tag from the input (%s)', (tag) => {\n  core.getInput.mockReturnValue(tag);\n\n  main();\n\n  expect(core.getInput).toHaveBeenCalledTimes(2);\n  expect(child_process.exec).toHaveBeenCalledWith(\n    `git for-each-ref --format='%(contents)' 'refs/tags/${tag}'`,\n    expect.any(Function),\n  );\n});\n\nit('outputs the annotation', (done) => {\n  const annotation = \"Hello world!\";\n  child_process.exec.mockImplementation((_, fn) => {\n    fn(null, annotation);\n\n    expect(core.setOutput).toHaveBeenCalledTimes(1);\n    expect(core.setOutput).toHaveBeenCalledWith(\n      'git-tag-annotation',\n      annotation,\n    );\n    done();\n  });\n\n  main();\n});\n\nit('sets an error if the annotation could not be found', (done) => {\n  child_process.exec.mockImplementation((_, fn) => {\n    fn(\"Something went wrong!\", null);\n\n    expect(core.setOutput).not.toHaveBeenCalled();\n    expect(core.setFailed).toHaveBeenCalledTimes(1);\n    done();\n  });\n\n  main();\n});\n\nit('sets an error if exec fails', () => {\n  child_process.exec.mockImplementation(() => {\n    throw new Error({ message: \"Something went wrong\" })\n  });\n\n  main();\n\n  expect(core.setOutput).not.toHaveBeenCalled();\n  expect(core.setFailed).toHaveBeenCalledTimes(1);\n});\n\nit('escapes malicious values from the input', () => {\n  core.getInput.mockReturnValue(`'; $(cat /etc/shadow)`);\n\n  main();\n\n  expect(child_process.exec).toHaveBeenCalledWith(\n    \"git for-each-ref --format='%(contents)' 'refs/tags/'\\\\''; $(cat /etc/shadow)'\",\n    expect.any(Function),\n  );\n});\n"], "filenames": ["CHANGELOG.md", "action.yml", "src/main.js", "test/main.test.js"], "buggy_code_start_loc": [11, 19, 2, 26], "buggy_code_end_loc": [11, 20, 18, 91], "fixing_code_start_loc": [12, 19, 3, 26], "fixing_code_end_loc": [17, 20, 26, 103], "type": "CWE-78", "message": "In the git-tag-annotation-action (open source GitHub Action) before version 1.0.1, an attacker can execute arbitrary (*) shell commands if they can control the value of [the `tag` input] or manage to alter the value of [the `GITHUB_REF` environment variable]. The problem has been patched in version 1.0.1. If you don't use the `tag` input you are most likely safe. The `GITHUB_REF` environment variable is protected by the GitHub Actions environment so attacks from there should be impossible. If you must use the `tag` input and cannot upgrade to `> 1.0.0` make sure that the value is not controlled by another Action.", "other": {"cve": {"id": "CVE-2020-15272", "sourceIdentifier": "security-advisories@github.com", "published": "2020-10-26T19:15:12.770", "lastModified": "2020-10-28T00:00:15.150", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In the git-tag-annotation-action (open source GitHub Action) before version 1.0.1, an attacker can execute arbitrary (*) shell commands if they can control the value of [the `tag` input] or manage to alter the value of [the `GITHUB_REF` environment variable]. The problem has been patched in version 1.0.1. If you don't use the `tag` input you are most likely safe. The `GITHUB_REF` environment variable is protected by the GitHub Actions environment so attacks from there should be impossible. If you must use the `tag` input and cannot upgrade to `> 1.0.0` make sure that the value is not controlled by another Action."}, {"lang": "es", "value": "En la git-tag-annotation-action (GitHub Action de c\u00f3digo abierto) versiones anteriores a 1.0.1, un atacante puede ejecutar comandos de shell arbitrarios (*) si puede controlar el valor de [the \"tag\" input] o lograr alterar la valor de [the \"GITHUB_REF\" environment variable]. El problema ha sido parcheado en la versi\u00f3n 1.0.1.&#xa0;Si no usa la entrada \"tag\", lo m\u00e1s probable es que est\u00e9 seguro.&#xa0;La variable de entorno \"GITHUB_REF\" est\u00e1 protegida por el entorno de GitHub Actions, por lo que los ataques desde all\u00ed deber\u00edan ser imposibles.&#xa0;Si debe utilizar la entrada \"tag\" y no puede actualizar a \"versiones posteriores a 1.0.0\", aseg\u00farese de que el valor no est\u00e9 controlado por otra Acci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.6, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 5.8}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:git-tag-annotation-action_project:git-tag-annotation-action:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.1", "matchCriteriaId": "B85C9E7D-AEBC-4F87-8234-10AA658A7EBE"}]}]}], "references": [{"url": "https://github.com/ericcornelissen/git-tag-annotation-action/commit/9f30756375cc4b1b6c66f274fc9c591fa901455a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ericcornelissen/git-tag-annotation-action/releases/tag/v1.0.1", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/ericcornelissen/git-tag-annotation-action/security/advisories/GHSA-hgx2-4pp9-357g", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ericcornelissen/git-tag-annotation-action/commit/9f30756375cc4b1b6c66f274fc9c591fa901455a"}}