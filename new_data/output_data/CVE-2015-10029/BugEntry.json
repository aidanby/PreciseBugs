{"buggy_code": ["## 3.1\n\n- Added [Travis CI](https://travis-ci.org/) configuration\n\n## 3.0\n\n- Changed from expat XML library to libxml and XMLReader\n- Changed API.  Added `->load()` and changed `->parse()`\n\n## 2.2\n\n- Added [Composer](https://getcomposer.org/) package information\n\n## 2.1\n\n- Improved compliance against [RFC 7033](http://tools.ietf.org/html/rfc7033):\n    - Changed default language identifier from `default` to `und`\n    - Ensure property values are strings\n\n## 2.0\n\n- Removed support for &lt;Expires&gt; element as per definition\n  of JRD in [RFC 7033](http://tools.ietf.org/html/rfc7033).\n\n## 1.0\n\n- Initial release\n", "<?php\n/*\n * SimpleXRD\n *\n * Copyright (C) Kelvin Mo 2012\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * 3. The name of the author may not be used to endorse or promote\n *    products derived from this software without specific prior\n *    written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * A simple XRD parser.\n *\n * This XRD parser supports all the features of XRD which can be translated into\n * its JSON representation under RFC 6415.  This means that the parser does\n * not support extensibility under the XRD specification.\n *\n * Using the parser is straightforward.  Assuming the XRD code has been loaded\n * into a variable called $xml. Then the code is simply\n *\n * <code>\n * $parser = new SimpleXRD();\n * $parser->load($xml);\n * $jrd = $parser->parse();\n * $parser->close();\n * </code>\n *\n * @see http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html, RFC 6415, RFC 7033\n */\nclass SimpleXRD {\n    /**\n     * XRD namespace constant\n     */\n    const XRD_NS = 'http://docs.oasis-open.org/ns/xri/xrd-1.0';\n\n    /**\n     * XSI namespace constant\n     */\n    const XSI_NS = 'http://www.w3.org/2001/XMLSchema-instance';\n\n    /**\n     * XML reader\n     * @var resource\n     */\n    private $reader;\n    \n    /**\n     * XML namespace constant\n     * @var string\n     */\n    private $XML_NS = 'http://www.w3.org/XML/1998/namespace';\n\n    /**\n     * JRD equivalent document\n     * @var array\n     */\n    private $jrd = array();\n    \n    /**\n     * Creates an instance of the XRD parser.\n     *\n     * This constructor also initialises the underlying XML parser.\n     */\n    public function __construct() {\n        $this->reader = new XMLReader();\n    }\n    \n    /**\n     * Frees memory associated with the underlying XML parser.\n     *\n     * Note that only the memory associated with the underlying XML parser is\n     * freed.  Memory associated with the class itself is not freed.\n     *\n     */\n    public function close() {\n        $this->reader->close();\n    }\n\n    /**\n     * Loads an XRD document.\n     *\n     * @param string $xml the XML document to load\n     */\n    public function load($xml) {\n        $this->reader->xml($xml);\n    }\n    \n    /**\n     * Parses the loaded XRD document and returns the JRD-equivalent structure.\n     *\n     * The $include_expires parameter determines whether the Expires element should\n     * be parsed.  Under the original host-meta JRD RFC 6415, the Expires element is\n     * part of the JRD specification.  However, that element has been removed from the\n     * WebFinger RFC 7033.\n     *\n     * @param bool $include_expires whether the Expires element should be parsed\n     * @return array the JRD equivalent structure\n     */\n    public function parse($include_expires = false) {\n        while ($this->reader->read()) {            \n            if (($this->reader->nodeType == XMLReader::ELEMENT) \n                && ($this->reader->namespaceURI == self::XRD_NS)) {\n                switch ($this->reader->localName) {\n                    case 'XRD':\n                        $this->jrd = array();                        \n                        break;\n                    case 'Expires':\n                        if ($include_expires) $this->jrd['expires'] = $this->reader->readString();\n                        break;\n                    case 'Subject':\n                        $this->jrd['subject'] = $this->reader->readString();\n                        break;\n                    case 'Alias':\n                        if (!isset($this->jrd['aliases'])) $this->jrd['aliases'] = array();\n                        $this->jrd['aliases'][] = $this->reader->readString();\n                        break;\n                    case 'Link':\n                        if (!isset($this->jrd['links'])) $this->jrd['links'] = array();\n                        $this->jrd['links'][] = $this->parseLink();\n                        break;\n                    case 'Property':\n                        if (!isset($this->jrd['properties'])) $this->jrd['properties'] = array();\n                        $this->parseProperty($this->jrd['properties']);\n                        break;\n                }\n            \n            }\n        }\n        return $this->jrd;\n    }\n\n    /**\n     * Parses the Link element.\n     *\n     * @return array the parsed JRD element\n     */\n    private function parseLink() {\n        $link = array();\n\n        while ($this->reader->moveToNextAttribute()) {\n            if ($this->reader->namespaceURI == '') {\n                $link[$this->reader->localName] = $this->reader->value;\n            }\n        }\n\n        $this->reader->moveToElement();\n        if ($this->reader->isEmptyElement) return $link;\n\n        while ($this->reader->read()) {\n            if (($this->reader->nodeType == XMLReader::END_ELEMENT) &&\n                ($this->reader->namespaceURI == self::XRD_NS) &&\n                ($this->reader->localName == 'Link'))\n                break;\n\n            if (($this->reader->nodeType == XMLReader::ELEMENT) \n                && ($this->reader->namespaceURI == self::XRD_NS)) {\n                switch ($this->reader->localName) {\n                    case 'Property':\n                        if (!isset($link['properties'])) $link['properties'] = array();\n                        $this->parseProperty($link['properties']);\n                        break;\n                    case 'Title':\n                        if ($this->reader->xmlLang) {\n                            $lang = $this->reader->xmlLang;\n                        } else {\n                            $lang = 'und';\n                        }\n                        if (!isset($link['titles'])) $link['titles'] = array();\n                        $link['titles'][$lang] = $this->reader->readString();\n                        break;\n                }\n            }\n        }\n\n        return $link;\n    }\n\n    /**\n     * Parses the Property element.\n     *\n     * The Property element can be a child of either the root XRD\n     * element or the Link element\n     *\n     * @param array &$el the parent JRD element\n     */\n    private function parseProperty(&$el) {\n        $type = $this->reader->getAttribute('type');\n        if ($this->reader->getAttributeNs('nil', self::XSI_NS)) {\n            $value = null;\n        } else {\n            $value = $this->reader->readString();\n        }\n        $el[$this->reader->getAttribute('type')] = $value;\n\n        $this->reader->next();\n    }\n}\n?>\n"], "fixing_code": ["## 3.1.1\n\n- Changed XML loading code to prevent XML external entity processing attacks\n\n## 3.1\n\n- Added [Travis CI](https://travis-ci.org/) configuration\n\n## 3.0\n\n- Changed from expat XML library to libxml and XMLReader\n- Changed API.  Added `->load()` and changed `->parse()`\n\n## 2.2\n\n- Added [Composer](https://getcomposer.org/) package information\n\n## 2.1\n\n- Improved compliance against [RFC 7033](http://tools.ietf.org/html/rfc7033):\n    - Changed default language identifier from `default` to `und`\n    - Ensure property values are strings\n\n## 2.0\n\n- Removed support for &lt;Expires&gt; element as per definition\n  of JRD in [RFC 7033](http://tools.ietf.org/html/rfc7033).\n\n## 1.0\n\n- Initial release\n", "<?php\n/*\n * SimpleXRD\n *\n * Copyright (C) Kelvin Mo 2012\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *\n * 3. The name of the author may not be used to endorse or promote\n *    products derived from this software without specific prior\n *    written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS\n * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY\n * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN\n * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * A simple XRD parser.\n *\n * This XRD parser supports all the features of XRD which can be translated into\n * its JSON representation under RFC 6415.  This means that the parser does\n * not support extensibility under the XRD specification.\n *\n * Using the parser is straightforward.  Assuming the XRD code has been loaded\n * into a variable called $xml. Then the code is simply\n *\n * <code>\n * $parser = new SimpleXRD();\n * $parser->load($xml);\n * $jrd = $parser->parse();\n * $parser->close();\n * </code>\n *\n * @see http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html, RFC 6415, RFC 7033\n */\nclass SimpleXRD {\n    /**\n     * XRD namespace constant\n     */\n    const XRD_NS = 'http://docs.oasis-open.org/ns/xri/xrd-1.0';\n\n    /**\n     * XSI namespace constant\n     */\n    const XSI_NS = 'http://www.w3.org/2001/XMLSchema-instance';\n\n    /**\n     * XML reader\n     * @var resource\n     */\n    private $reader;\n\n    /**\n     * XML namespace constant\n     * @var string\n     */\n    private $XML_NS = 'http://www.w3.org/XML/1998/namespace';\n\n    /**\n     * JRD equivalent document\n     * @var array\n     */\n    private $jrd = array();\n\n    /**\n     * Creates an instance of the XRD parser.\n     *\n     * This constructor also initialises the underlying XML parser.\n     */\n    public function __construct() {\n        $this->reader = new XMLReader();\n    }\n\n    /**\n     * Frees memory associated with the underlying XML parser.\n     *\n     * Note that only the memory associated with the underlying XML parser is\n     * freed.  Memory associated with the class itself is not freed.\n     *\n     */\n    public function close() {\n        $this->reader->close();\n    }\n\n    /**\n     * Loads an XRD document.\n     *\n     * @param string $xml the XML document to load\n     */\n    public function load($xml) {\n        $this->reader->xml($xml, null, LIBXML_NONET);\n    }\n\n    /**\n     * Parses the loaded XRD document and returns the JRD-equivalent structure.\n     *\n     * The $include_expires parameter determines whether the Expires element should\n     * be parsed.  Under the original host-meta JRD RFC 6415, the Expires element is\n     * part of the JRD specification.  However, that element has been removed from the\n     * WebFinger RFC 7033.\n     *\n     * @param bool $include_expires whether the Expires element should be parsed\n     * @return array the JRD equivalent structure\n     */\n    public function parse($include_expires = false) {\n        while ($this->reader->read()) {\n            if (($this->reader->nodeType == XMLReader::ELEMENT)\n                && ($this->reader->namespaceURI == self::XRD_NS)) {\n                switch ($this->reader->localName) {\n                    case 'XRD':\n                        $this->jrd = array();\n                        break;\n                    case 'Expires':\n                        if ($include_expires) $this->jrd['expires'] = $this->reader->readString();\n                        break;\n                    case 'Subject':\n                        $this->jrd['subject'] = $this->reader->readString();\n                        break;\n                    case 'Alias':\n                        if (!isset($this->jrd['aliases'])) $this->jrd['aliases'] = array();\n                        $this->jrd['aliases'][] = $this->reader->readString();\n                        break;\n                    case 'Link':\n                        if (!isset($this->jrd['links'])) $this->jrd['links'] = array();\n                        $this->jrd['links'][] = $this->parseLink();\n                        break;\n                    case 'Property':\n                        if (!isset($this->jrd['properties'])) $this->jrd['properties'] = array();\n                        $this->parseProperty($this->jrd['properties']);\n                        break;\n                }\n\n            }\n        }\n        return $this->jrd;\n    }\n\n    /**\n     * Parses the Link element.\n     *\n     * @return array the parsed JRD element\n     */\n    private function parseLink() {\n        $link = array();\n\n        while ($this->reader->moveToNextAttribute()) {\n            if ($this->reader->namespaceURI == '') {\n                $link[$this->reader->localName] = $this->reader->value;\n            }\n        }\n\n        $this->reader->moveToElement();\n        if ($this->reader->isEmptyElement) return $link;\n\n        while ($this->reader->read()) {\n            if (($this->reader->nodeType == XMLReader::END_ELEMENT) &&\n                ($this->reader->namespaceURI == self::XRD_NS) &&\n                ($this->reader->localName == 'Link'))\n                break;\n\n            if (($this->reader->nodeType == XMLReader::ELEMENT)\n                && ($this->reader->namespaceURI == self::XRD_NS)) {\n                switch ($this->reader->localName) {\n                    case 'Property':\n                        if (!isset($link['properties'])) $link['properties'] = array();\n                        $this->parseProperty($link['properties']);\n                        break;\n                    case 'Title':\n                        if ($this->reader->xmlLang) {\n                            $lang = $this->reader->xmlLang;\n                        } else {\n                            $lang = 'und';\n                        }\n                        if (!isset($link['titles'])) $link['titles'] = array();\n                        $link['titles'][$lang] = $this->reader->readString();\n                        break;\n                }\n            }\n        }\n\n        return $link;\n    }\n\n    /**\n     * Parses the Property element.\n     *\n     * The Property element can be a child of either the root XRD\n     * element or the Link element\n     *\n     * @param array &$el the parent JRD element\n     */\n    private function parseProperty(&$el) {\n        $type = $this->reader->getAttribute('type');\n        if ($this->reader->getAttributeNs('nil', self::XSI_NS)) {\n            $value = null;\n        } else {\n            $value = $this->reader->readString();\n        }\n        $el[$this->reader->getAttribute('type')] = $value;\n\n        $this->reader->next();\n    }\n}\n?>\n"], "filenames": ["CHANGELOG.md", "simplexrd/simplexrd.class.php"], "buggy_code_start_loc": [0, 71], "buggy_code_end_loc": [0, 181], "fixing_code_start_loc": [1, 71], "fixing_code_end_loc": [5, 181], "type": "CWE-611", "message": "A vulnerability classified as problematic was found in kelvinmo simplexrd up to 3.1.0. This vulnerability affects unknown code of the file simplexrd/simplexrd.class.php. The manipulation leads to xml external entity reference. Upgrading to version 3.1.1 is able to address this issue. The name of the patch is 4c9f2e028523ed705b555eca2c18c64e71f1a35d. It is recommended to upgrade the affected component. VDB-217630 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10029", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T20:15:09.147", "lastModified": "2023-01-12T20:07:41.200", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic was found in kelvinmo simplexrd up to 3.1.0. This vulnerability affects unknown code of the file simplexrd/simplexrd.class.php. The manipulation leads to xml external entity reference. Upgrading to version 3.1.1 is able to address this issue. The name of the patch is 4c9f2e028523ed705b555eca2c18c64e71f1a35d. It is recommended to upgrade the affected component. VDB-217630 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.4, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:simplexrd_project:simplexrd:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.1", "matchCriteriaId": "52C019C8-4EBB-45DE-9106-077E96309B04"}]}]}], "references": [{"url": "https://github.com/kelvinmo/simplexrd/commit/4c9f2e028523ed705b555eca2c18c64e71f1a35d", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kelvinmo/simplexrd/releases/tag/v3.1.1", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217630", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217630", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kelvinmo/simplexrd/commit/4c9f2e028523ed705b555eca2c18c64e71f1a35d"}}