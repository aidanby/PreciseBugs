{"buggy_code": ["aenum==2.2.4\nalembic==1.4.2\napispec==4.0.0\napispec-webframeworks==0.5.2\nappdirs==1.4.4\nAPScheduler==3.6.3\narrow==0.15.8\nasn1crypto==1.4.0\nattrdict==2.0.1\nattrs==19.3.0\nbabelfish==0.5.5\nbeautifulsoup4==4.9.1\nbencode3==0.1.0\nCacheControl==0.12.6\ncertifi==2020.6.20\ncffi==1.14.1\nchardet==3.0.4\nclick==7.1.2\ncloudscraper==1.2.46\nconfigobj==5.0.6\ncryptography==3.2.1\ndecorator==4.4.2\ndeluge-client==1.9.0\ndirsync==2.2.5\ndogpile.cache==1.0.2\necdsa==0.14.1\nenzyme==0.4.1\nfake-useragent==0.1.11\nfeedparser==6.0.2\nfuture==0.18.2\ngntp==1.0.3\nguessit==3.1.1\nhachoir==3.1.1\nhtml5lib==1.1\nhttplib2==0.18.1\nidna==2.10\nimportlib-metadata==1.7.0\nipaddress==1.0.23\nknowit==0.2.4\nlockfile==0.12.2\nlxml==4.6.1\nMako==1.1.3\nmarkdown2==2.3.9\nMarkupSafe==1.1.1\nmarshmallow==3.8.0\nmarshmallow-sqlalchemy==0.23.1\nmarshmallow-enum==1.5.1\nmsgpack==1.0.0\nMultipartPostHandler==0.1.0\nmutagen==1.45.1\noauth2==1.9.0.post1\noauthlib==3.1.0\npackaging==20.4\npbr==5.4.5\nPint==0.14\nprofilehooks==1.11.2\npyasn1==0.4.8\npyasn1-modules==0.2.8\npycparser==2.20\nPyJWT==1.7.1\npymediainfo==4.2.1\nPyMySQL==0.10.0\npynzb==0.1.0\npyparsing==2.4.7\npysrt==1.1.2\npython-dateutil==2.7.5\npython-editor==1.0.4\npython-jose==3.2.0\npython-keycloak-client==0.2.3\npython-twitter==3.5\npytz==2020.1\npyxdg==0.26\nPyYAML==5.3.1\nrarfile==3.1\nrebulk==2.0.1\nrequests==2.24.0\nrequests-oauthlib==1.3.0\nrequests-toolbelt==0.9.1\nrsa==4.6\nSend2Trash==1.5.0\nsentry-sdk==0.19.5\nservice-identity==18.1.0\nsgmllib3k==1.0.0\nsimplejson==3.17.2\nsix==1.15.0\nsoupsieve==2.0.1\nSQLAlchemy==1.3.18\nSQLAlchemy-Utils==0.36.8\nstevedore==3.2.0\nsubliminal==2.1.0\ntornado==6.0.4\ntwilio==6.44.2\ntzlocal==2.1\nUnidecode==1.1.1\nurllib3==1.25.10\nwebencodings==0.5.1\nxmltodict==0.12.0\nzipp==3.1.0\n", "# ##############################################################################\n#  Author: echel0n <echel0n@sickrage.ca>\n#  URL: https://sickrage.ca/\n#  Git: https://git.sickrage.ca/SiCKRAGE/sickrage.git\n#  -\n#  This file is part of SiCKRAGE.\n#  -\n#  SiCKRAGE is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#  -\n#  SiCKRAGE is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  -\n#  You should have received a copy of the GNU General Public License\n#  along with SiCKRAGE.  If not, see <http://www.gnu.org/licenses/>.\n# ##############################################################################\nimport functools\nimport time\nimport traceback\nimport types\nfrom concurrent.futures.thread import ThreadPoolExecutor\nfrom typing import Optional, Awaitable\nfrom urllib.parse import urlparse, urljoin\n\nfrom jose import ExpiredSignatureError\nfrom keycloak.exceptions import KeycloakClientError\nfrom mako.exceptions import RichTraceback\nfrom tornado import locale\nfrom tornado.web import RequestHandler\n\nimport sickrage\nfrom sickrage.core.helpers import is_ip_whitelisted, torrent_webui_url\n\n\nclass BaseHandler(RequestHandler):\n    def __init__(self, application, request, **kwargs):\n        super(BaseHandler, self).__init__(application, request, **kwargs)\n\n        self.executor = ThreadPoolExecutor(thread_name_prefix='TORNADO-Thread')\n\n        self.startTime = time.time()\n\n    def data_received(self, chunk: bytes) -> Optional[Awaitable[None]]:\n        pass\n\n    def get_user_locale(self):\n        return locale.get(sickrage.app.config.gui.gui_lang)\n\n    def write_error(self, status_code, **kwargs):\n        if status_code not in [401, 404] and \"exc_info\" in kwargs:\n            exc_info = kwargs[\"exc_info\"]\n            error = repr(exc_info[1])\n\n            sickrage.app.log.error(error)\n\n            if self.settings.get(\"debug\"):\n                trace_info = ''.join([f\"{line}<br>\" for line in traceback.format_exception(*exc_info)])\n                request_info = ''.join([f\"<strong>{k}</strong>: {v}<br>\" for k, v in self.request.__dict__.items()])\n\n                self.set_header('Content-Type', 'text/html')\n                return self.write(f\"\"\"<html>\n                                 <title>{error}</title>\n                                 <body>\n                                    <button onclick=\"window.location='{sickrage.app.config.general.web_root}/logs/';\">View Log(Errors)</button>\n                                    <button onclick=\"window.location='{sickrage.app.config.general.web_root}/home/restart?pid={sickrage.app.pid}&force=1';\">Restart SiCKRAGE</button>\n                                    <button onclick=\"window.location='{sickrage.app.config.general.web_root}/logout';\">Logout</button>\n                                    <h2>Error</h2>\n                                    <p>{error}</p>\n                                    <h2>Traceback</h2>\n                                    <p>{trace_info}</p>\n                                    <h2>Request Info</h2>\n                                    <p>{request_info}</p>\n                                 </body>\n                               </html>\"\"\")\n\n    def get_current_user(self):\n        if is_ip_whitelisted(self.request.remote_ip):\n            return True\n        elif sickrage.app.config.general.sso_auth_enabled and sickrage.app.auth_server.health:\n            try:\n                access_token = self.get_secure_cookie('_sr_access_token')\n                refresh_token = self.get_secure_cookie('_sr_refresh_token')\n                if not all([access_token, refresh_token]):\n                    return\n\n                certs = sickrage.app.auth_server.certs()\n                if not certs:\n                    return\n\n                try:\n                    return sickrage.app.auth_server.decode_token(access_token.decode(\"utf-8\"), certs)\n                except (KeycloakClientError, ExpiredSignatureError):\n                    token = sickrage.app.auth_server.refresh_token(refresh_token.decode(\"utf-8\"))\n                    if not token:\n                        return\n\n                    self.set_secure_cookie('_sr_access_token', token['access_token'])\n                    self.set_secure_cookie('_sr_refresh_token', token['refresh_token'])\n                    return sickrage.app.auth_server.decode_token(token['access_token'], certs)\n            except Exception as e:\n                return\n        elif sickrage.app.config.general.local_auth_enabled:\n            cookie = self.get_secure_cookie('_sr').decode() if self.get_secure_cookie('_sr') else None\n            if cookie == sickrage.app.config.general.api_v1_key:\n                return True\n\n    def render_string(self, template_name, **kwargs):\n        template_kwargs = {\n            'title': \"\",\n            'header': \"\",\n            'topmenu': \"\",\n            'submenu': \"\",\n            'controller': \"home\",\n            'action': \"index\",\n            'srPID': sickrage.app.pid,\n            'srHttpsEnabled': sickrage.app.config.general.enable_https or bool(self.request.headers.get('X-Forwarded-Proto') == 'https'),\n            'srHost': self.request.headers.get('X-Forwarded-Host', self.request.host.split(':')[0]),\n            'srHttpPort': self.request.headers.get('X-Forwarded-Port', sickrage.app.config.general.web_port),\n            'srHttpsPort': sickrage.app.config.general.web_port,\n            'srHandleReverseProxy': sickrage.app.config.general.handle_reverse_proxy,\n            'srDefaultPage': sickrage.app.config.general.default_page.value,\n            'srWebRoot': sickrage.app.config.general.web_root,\n            'srLocale': self.get_user_locale().code,\n            'srLocaleDir': sickrage.LOCALE_DIR,\n            'srStartTime': self.startTime,\n            'makoStartTime': time.time(),\n            'overall_stats': None,\n            'torrent_webui_url': torrent_webui_url(),\n            'application': self.application,\n            'request': self.request,\n        }\n\n        template_kwargs.update(self.get_template_namespace())\n        template_kwargs.update(kwargs)\n\n        try:\n            return self.application.settings['templates'][template_name].render_unicode(**template_kwargs)\n        except Exception:\n            kwargs['title'] = _('HTTP Error 500')\n            kwargs['header'] = _('HTTP Error 500')\n            kwargs['backtrace'] = RichTraceback()\n            template_kwargs.update(kwargs)\n\n            sickrage.app.log.error(\"%s: %s\" % (str(kwargs['backtrace'].error.__class__.__name__), kwargs['backtrace'].error))\n\n            return self.application.settings['templates']['errors/500.mako'].render_unicode(**template_kwargs)\n\n    def render(self, template_name, **kwargs):\n        self.write(self.render_string(template_name, **kwargs))\n\n    def set_default_headers(self):\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\")\n        self.set_header('Access-Control-Allow-Methods', 'POST, GET, PUT, PATCH, DELETE, OPTIONS')\n        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n\n    def redirect(self, url, permanent=True, status=None):\n        if sickrage.app.config.general.web_root not in url:\n            url = urljoin(sickrage.app.config.general.web_root + '/', url.lstrip('/'))\n        super(BaseHandler, self).redirect(url, permanent, status)\n\n    def previous_url(self):\n        url = urlparse(self.request.headers.get(\"referer\", \"/{}/\".format(sickrage.app.config.general.default_page.value)))\n        return url._replace(scheme=\"\", netloc=\"\").geturl()\n\n    def _genericMessage(self, subject, message):\n        return self.render('generic_message.mako',\n                           message=message,\n                           subject=subject,\n                           title=\"\",\n                           controller='root',\n                           action='genericmessage')\n\n    def get_url(self, url):\n        if sickrage.app.config.general.web_root not in url:\n            url = urljoin(sickrage.app.config.general.web_root + '/', url.lstrip('/'))\n        url = urljoin(\"{}://{}\".format(self.request.protocol, self.request.host), url)\n        return url\n\n    def run_async(self, method):\n        @functools.wraps(method)\n        async def wrapper(self, *args, **kwargs):\n            await sickrage.app.wserver.io_loop.run_in_executor(self.executor, functools.partial(method, *args, **kwargs))\n\n        return types.MethodType(wrapper, self)\n\n    def prepare(self):\n        method_name = self.request.method.lower()\n        method = self.run_async(getattr(self, method_name))\n        setattr(self, method_name, method)\n\n    def options(self, *args, **kwargs):\n        self.set_status(204)\n        self.finish()\n"], "fixing_code": ["aenum==2.2.4\nalembic==1.4.2\napispec==4.0.0\napispec-webframeworks==0.5.2\nappdirs==1.4.4\nAPScheduler==3.6.3\narrow==0.15.8\nasn1crypto==1.4.0\nattrdict==2.0.1\nattrs==19.3.0\nbabelfish==0.5.5\nbeautifulsoup4==4.9.1\nbencode3==0.1.0\nbleach==3.3.0\nCacheControl==0.12.6\ncertifi==2020.6.20\ncffi==1.14.1\nchardet==3.0.4\nclick==7.1.2\ncloudscraper==1.2.46\nconfigobj==5.0.6\ncryptography==3.2.1\ndecorator==4.4.2\ndeluge-client==1.9.0\ndirsync==2.2.5\ndogpile.cache==1.0.2\necdsa==0.14.1\nenzyme==0.4.1\nfake-useragent==0.1.11\nfeedparser==6.0.2\nfuture==0.18.2\ngntp==1.0.3\nguessit==3.1.1\nhachoir==3.1.1\nhtml5lib==1.1\nhttplib2==0.18.1\nidna==2.10\nimportlib-metadata==1.7.0\nipaddress==1.0.23\nknowit==0.2.4\nlockfile==0.12.2\nlxml==4.6.1\nMako==1.1.3\nmarkdown2==2.3.9\nMarkupSafe==1.1.1\nmarshmallow==3.8.0\nmarshmallow-sqlalchemy==0.23.1\nmarshmallow-enum==1.5.1\nmsgpack==1.0.0\nMultipartPostHandler==0.1.0\nmutagen==1.45.1\noauth2==1.9.0.post1\noauthlib==3.1.0\npackaging==20.4\npbr==5.4.5\nPint==0.14\nprofilehooks==1.11.2\npyasn1==0.4.8\npyasn1-modules==0.2.8\npycparser==2.20\nPyJWT==1.7.1\npymediainfo==4.2.1\nPyMySQL==0.10.0\npynzb==0.1.0\npyparsing==2.4.7\npysrt==1.1.2\npython-dateutil==2.7.5\npython-editor==1.0.4\npython-jose==3.2.0\npython-keycloak-client==0.2.3\npython-twitter==3.5\npytz==2020.1\npyxdg==0.26\nPyYAML==5.3.1\nrarfile==3.1\nrebulk==2.0.1\nrequests==2.24.0\nrequests-oauthlib==1.3.0\nrequests-toolbelt==0.9.1\nrsa==4.6\nSend2Trash==1.5.0\nsentry-sdk==0.19.5\nservice-identity==18.1.0\nsgmllib3k==1.0.0\nsimplejson==3.17.2\nsix==1.15.0\nsoupsieve==2.0.1\nSQLAlchemy==1.3.18\nSQLAlchemy-Utils==0.36.8\nstevedore==3.2.0\nsubliminal==2.1.0\ntornado==6.0.4\ntwilio==6.44.2\ntzlocal==2.1\nUnidecode==1.1.1\nurllib3==1.25.10\nwebencodings==0.5.1\nxmltodict==0.12.0\nzipp==3.1.0\n", "# ##############################################################################\n#  Author: echel0n <echel0n@sickrage.ca>\n#  URL: https://sickrage.ca/\n#  Git: https://git.sickrage.ca/SiCKRAGE/sickrage.git\n#  -\n#  This file is part of SiCKRAGE.\n#  -\n#  SiCKRAGE is free software: you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation, either version 3 of the License, or\n#  (at your option) any later version.\n#  -\n#  SiCKRAGE is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#  -\n#  You should have received a copy of the GNU General Public License\n#  along with SiCKRAGE.  If not, see <http://www.gnu.org/licenses/>.\n# ##############################################################################\nimport functools\nimport html\nimport time\nimport traceback\nimport types\nfrom concurrent.futures.thread import ThreadPoolExecutor\nfrom typing import Optional, Awaitable\nfrom urllib.parse import urlparse, urljoin\n\nimport bleach\nfrom jose import ExpiredSignatureError\nfrom keycloak.exceptions import KeycloakClientError\nfrom mako.exceptions import RichTraceback\nfrom tornado import locale, escape\nfrom tornado.web import RequestHandler\n\nimport sickrage\nfrom sickrage.core.helpers import is_ip_whitelisted, torrent_webui_url\n\n\nclass BaseHandler(RequestHandler):\n    def __init__(self, application, request, **kwargs):\n        super(BaseHandler, self).__init__(application, request, **kwargs)\n\n        self.executor = ThreadPoolExecutor(thread_name_prefix='TORNADO-Thread')\n\n        self.startTime = time.time()\n\n    def data_received(self, chunk: bytes) -> Optional[Awaitable[None]]:\n        pass\n\n    def get_user_locale(self):\n        return locale.get(sickrage.app.config.gui.gui_lang)\n\n    def write_error(self, status_code, **kwargs):\n        if status_code not in [401, 404] and \"exc_info\" in kwargs:\n            exc_info = kwargs[\"exc_info\"]\n            error = repr(exc_info[1])\n\n            sickrage.app.log.error(error)\n\n            if self.settings.get(\"debug\"):\n                trace_info = ''.join([f\"{line}<br>\" for line in traceback.format_exception(*exc_info)])\n                request_info = ''.join([f\"<strong>{k}</strong>: {v}<br>\" for k, v in self.request.__dict__.items()])\n\n                self.set_header('Content-Type', 'text/html')\n                return self.write(f\"\"\"<html>\n                                 <title>{error}</title>\n                                 <body>\n                                    <button onclick=\"window.location='{sickrage.app.config.general.web_root}/logs/';\">View Log(Errors)</button>\n                                    <button onclick=\"window.location='{sickrage.app.config.general.web_root}/home/restart?pid={sickrage.app.pid}&force=1';\">Restart SiCKRAGE</button>\n                                    <button onclick=\"window.location='{sickrage.app.config.general.web_root}/logout';\">Logout</button>\n                                    <h2>Error</h2>\n                                    <p>{error}</p>\n                                    <h2>Traceback</h2>\n                                    <p>{trace_info}</p>\n                                    <h2>Request Info</h2>\n                                    <p>{request_info}</p>\n                                 </body>\n                               </html>\"\"\")\n\n    def get_current_user(self):\n        if is_ip_whitelisted(self.request.remote_ip):\n            return True\n        elif sickrage.app.config.general.sso_auth_enabled and sickrage.app.auth_server.health:\n            try:\n                access_token = self.get_secure_cookie('_sr_access_token')\n                refresh_token = self.get_secure_cookie('_sr_refresh_token')\n                if not all([access_token, refresh_token]):\n                    return\n\n                certs = sickrage.app.auth_server.certs()\n                if not certs:\n                    return\n\n                try:\n                    return sickrage.app.auth_server.decode_token(access_token.decode(\"utf-8\"), certs)\n                except (KeycloakClientError, ExpiredSignatureError):\n                    token = sickrage.app.auth_server.refresh_token(refresh_token.decode(\"utf-8\"))\n                    if not token:\n                        return\n\n                    self.set_secure_cookie('_sr_access_token', token['access_token'])\n                    self.set_secure_cookie('_sr_refresh_token', token['refresh_token'])\n                    return sickrage.app.auth_server.decode_token(token['access_token'], certs)\n            except Exception as e:\n                return\n        elif sickrage.app.config.general.local_auth_enabled:\n            cookie = self.get_secure_cookie('_sr').decode() if self.get_secure_cookie('_sr') else None\n            if cookie == sickrage.app.config.general.api_v1_key:\n                return True\n\n    def render_string(self, template_name, **kwargs):\n        template_kwargs = {\n            'title': \"\",\n            'header': \"\",\n            'topmenu': \"\",\n            'submenu': \"\",\n            'controller': \"home\",\n            'action': \"index\",\n            'srPID': sickrage.app.pid,\n            'srHttpsEnabled': sickrage.app.config.general.enable_https or bool(self.request.headers.get('X-Forwarded-Proto') == 'https'),\n            'srHost': self.request.headers.get('X-Forwarded-Host', self.request.host.split(':')[0]),\n            'srHttpPort': self.request.headers.get('X-Forwarded-Port', sickrage.app.config.general.web_port),\n            'srHttpsPort': sickrage.app.config.general.web_port,\n            'srHandleReverseProxy': sickrage.app.config.general.handle_reverse_proxy,\n            'srDefaultPage': sickrage.app.config.general.default_page.value,\n            'srWebRoot': sickrage.app.config.general.web_root,\n            'srLocale': self.get_user_locale().code,\n            'srLocaleDir': sickrage.LOCALE_DIR,\n            'srStartTime': self.startTime,\n            'makoStartTime': time.time(),\n            'overall_stats': None,\n            'torrent_webui_url': torrent_webui_url(),\n            'application': self.application,\n            'request': self.request,\n        }\n\n        template_kwargs.update(self.get_template_namespace())\n        template_kwargs.update(kwargs)\n\n        try:\n            return self.application.settings['templates'][template_name].render_unicode(**template_kwargs)\n        except Exception:\n            kwargs['title'] = _('HTTP Error 500')\n            kwargs['header'] = _('HTTP Error 500')\n            kwargs['backtrace'] = RichTraceback()\n            template_kwargs.update(kwargs)\n\n            sickrage.app.log.error(\"%s: %s\" % (str(kwargs['backtrace'].error.__class__.__name__), kwargs['backtrace'].error))\n\n            return self.application.settings['templates']['errors/500.mako'].render_unicode(**template_kwargs)\n\n    def render(self, template_name, **kwargs):\n        self.write(self.render_string(template_name, **kwargs))\n\n    def set_default_headers(self):\n        self.set_header(\"Access-Control-Allow-Origin\", \"*\")\n        self.set_header(\"Access-Control-Allow-Headers\", \"Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With\")\n        self.set_header('Access-Control-Allow-Methods', 'POST, GET, PUT, PATCH, DELETE, OPTIONS')\n        self.set_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0')\n\n    def redirect(self, url, permanent=True, status=None):\n        if sickrage.app.config.general.web_root not in url:\n            url = urljoin(sickrage.app.config.general.web_root + '/', url.lstrip('/'))\n        super(BaseHandler, self).redirect(url, permanent, status)\n\n    def previous_url(self):\n        url = urlparse(self.request.headers.get(\"referer\", \"/{}/\".format(sickrage.app.config.general.default_page.value)))\n        return url._replace(scheme=\"\", netloc=\"\").geturl()\n\n    def _genericMessage(self, subject, message):\n        return self.render('generic_message.mako',\n                           message=message,\n                           subject=subject,\n                           title=\"\",\n                           controller='root',\n                           action='genericmessage')\n\n    def get_url(self, url):\n        if sickrage.app.config.general.web_root not in url:\n            url = urljoin(sickrage.app.config.general.web_root + '/', url.lstrip('/'))\n        url = urljoin(\"{}://{}\".format(self.request.protocol, self.request.host), url)\n        return url\n\n    def run_async(self, method):\n        @functools.wraps(method)\n        async def wrapper(self, *args, **kwargs):\n            await sickrage.app.wserver.io_loop.run_in_executor(self.executor, functools.partial(method, *args, **kwargs))\n\n        return types.MethodType(wrapper, self)\n\n    def prepare(self):\n        method_name = self.request.method.lower()\n        method = self.run_async(getattr(self, method_name))\n        setattr(self, method_name, method)\n\n    def options(self, *args, **kwargs):\n        self.set_status(204)\n        self.finish()\n\n    def get_argument(self, *args, **kwargs):\n        value = super(BaseHandler, self).get_argument(*args, **kwargs)\n\n        try:\n            return bleach.clean(value)\n        except TypeError:\n            return value\n"], "filenames": ["requirements.txt", "sickrage/core/webserver/handlers/base.py"], "buggy_code_start_loc": [13, 21], "buggy_code_end_loc": [13, 198], "fixing_code_start_loc": [14, 22], "fixing_code_end_loc": [15, 209], "type": "CWE-79", "message": "In SiCKRAGE, versions 9.3.54.dev1 to 10.0.11.dev1 are vulnerable to Reflected Cross-Site-Scripting (XSS) due to user input not being validated properly in the `quicksearch` feature. Therefore, an attacker can steal a user's sessionID to masquerade as a victim user, to carry out any actions in the context of the user.", "other": {"cve": {"id": "CVE-2021-25926", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-04-12T14:15:16.413", "lastModified": "2021-04-20T02:49:12.277", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In SiCKRAGE, versions 9.3.54.dev1 to 10.0.11.dev1 are vulnerable to Reflected Cross-Site-Scripting (XSS) due to user input not being validated properly in the `quicksearch` feature. Therefore, an attacker can steal a user's sessionID to masquerade as a victim user, to carry out any actions in the context of the user."}, {"lang": "es", "value": "En SiCKRAGE, versiones 9.3.54.dev1 versiones hasta 10.0.11.dev1, son vulnerables a un ataque de tipo Cross-Site-Scripting (XSS) Reflejado, debido a que la entrada del usuario no est\u00e1 siendo comprobada apropiadamente en la funcionalidad \"quicksearch\".&#xa0;Por lo tanto, un atacante puede robar el ID de sesi\u00f3n de un usuario para hacerse pasar por un usuario v\u00edctima, para llevar a cabo cualquier acci\u00f3n en el contexto del usuario"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sickrage:sickrage:*:*:*:*:*:*:*:*", "versionStartIncluding": "9.3.55", "versionEndIncluding": "10.0.11", "matchCriteriaId": "A1C31FB1-4641-47C8-9549-133F23022087"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sickrage:sickrage:9.3.54:dev1:*:*:*:*:*:*", "matchCriteriaId": "85A76B51-B436-44F0-B25E-BFC0EA9D57EC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sickrage:sickrage:10.0.11:dev1:*:*:*:*:*:*", "matchCriteriaId": "256E21C4-7299-4471-AC05-91C99C507A80"}]}]}], "references": [{"url": "https://github.com/SiCKRAGE/SiCKRAGE/commit/9f42426727e16609ad3d1337f6637588b8ed28e4", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25926,", "source": "vulnerabilitylab@mend.io", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/SiCKRAGE/SiCKRAGE/commit/9f42426727e16609ad3d1337f6637588b8ed28e4"}}