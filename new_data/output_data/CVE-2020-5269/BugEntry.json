{"buggy_code": ["{**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n *}\n{capture name='tr_count'}{counter name='tr_count'}{/capture}\n<tbody>\n{if count($list)}\n{foreach $list AS $index => $tr}\n\t<tr{if $position_identifier} id=\"tr_{$position_group_identifier}_{$tr.$identifier}_{if isset($tr.position['position'])}{$tr.position['position']}{else}0{/if}\"{/if} class=\"{if isset($tr.class)}{$tr.class}{/if} {if $tr@iteration is odd by 1}odd{/if}\"{if isset($tr.color) && $color_on_bg} style=\"background-color: {$tr.color}\"{/if} >\n\t\t{if $bulk_actions && $has_bulk_actions}\n\t\t\t<td class=\"row-selector text-center\">\n\t\t\t\t{if isset($list_skip_actions.delete)}\n\t\t\t\t\t{if !in_array($tr.$identifier, $list_skip_actions.delete)}\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"{$list_id}Box[]\" value=\"{$tr.$identifier}\"{if isset($checked_boxes) && is_array($checked_boxes) && in_array({$tr.$identifier}, $checked_boxes)} checked=\"checked\"{/if} class=\"noborder\" />\n\t\t\t\t\t{/if}\n\t\t\t\t{else}\n\t\t\t\t\t<input type=\"checkbox\" name=\"{$list_id}Box[]\" value=\"{$tr.$identifier}\"{if isset($checked_boxes) && is_array($checked_boxes) && in_array({$tr.$identifier}, $checked_boxes)} checked=\"checked\"{/if} class=\"noborder\" />\n\t\t\t\t{/if}\n\t\t\t</td>\n\t\t{/if}\n\t\t{foreach $fields_display AS $key => $params}\n\t\t\t{block name=\"open_td\"}\n\t\t\t\t<td\n\t\t\t\t\t{if isset($params.position)}\n\t\t\t\t\t\tid=\"td_{if !empty($position_group_identifier)}{$position_group_identifier}{else}0{/if}_{$tr.$identifier}{if $smarty.capture.tr_count > 1}_{($smarty.capture.tr_count - 1)|intval}{/if}\"\n\t\t\t\t\t{/if}\n\t\t\t\t\tclass=\"{strip}{if !$no_link}pointer{/if}\n\t\t\t\t\t{if isset($params.position) && $order_by == 'position'  && $order_way != 'DESC'} dragHandle{/if}\n\t\t\t\t\t{if isset($params.class)} {$params.class}{/if}\n\t\t\t\t\t{if isset($params.align)} {$params.align}{/if}{/strip}\"\n\t\t\t\t\t{if (!isset($params.position) && !$no_link && !isset($params.remove_onclick))}\n            {if isset($tr.link) }\n              onclick=\"document.location = '{$tr.link}'\">\n            {else}\n              onclick=\"document.location = '{$current_index|addslashes|escape:'html':'UTF-8'}&amp;{$identifier|escape:'html':'UTF-8'}={$tr.$identifier|escape:'html':'UTF-8'}{if $view}&amp;view{else}&amp;update{/if}{$table|escape:'html':'UTF-8'}{if $page > 1}&amp;page={$page|intval}{/if}&amp;token={$token|escape:'html':'UTF-8'}'\">\n            {/if}\n\t\t\t\t\t{else}\n\t\t\t\t\t>\n\t\t\t\t{/if}\n\t\t\t{/block}\n\t\t\t{block name=\"td_content\"}\n\t\t\t\t{if isset($params.prefix)}{$params.prefix}{/if}\n\t\t\t\t{if isset($params.badge_success) && $params.badge_success && isset($tr.badge_success) && $tr.badge_success == $params.badge_success}<span class=\"badge badge-success\">{/if}\n\t\t\t\t{if isset($params.badge_warning) && $params.badge_warning && isset($tr.badge_warning) && $tr.badge_warning == $params.badge_warning}<span class=\"badge badge-warning\">{/if}\n\t\t\t\t{if isset($params.badge_danger) && $params.badge_danger && isset($tr.badge_danger) && $tr.badge_danger == $params.badge_danger}<span class=\"badge badge-danger\">{/if}\n\t\t\t\t{if isset($params.color) && isset($tr[$params.color])}\n\t\t\t\t\t<span class=\"label color_field\" style=\"background-color:{$tr[$params.color]};color:{if Tools::getBrightness($tr[$params.color]) < 128}white{else}#383838{/if}\">\n\t\t\t\t{/if}\n\t\t\t\t{if isset($tr.$key)}\n\t\t\t\t\t{if isset($params.active)}\n\t\t\t\t\t\t{$tr.$key}\n\t\t\t\t\t{elseif isset($params.callback)}\n\t\t\t\t\t\t{if isset($params.maxlength) && Tools::strlen($tr.$key) > $params.maxlength}\n\t\t\t\t\t\t\t<span title=\"{$tr.$key}\">{$tr.$key|truncate:$params.maxlength:'...'}</span>\n\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t{$tr.$key}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.activeVisu)}\n\t\t\t\t\t\t{if $tr.$key}\n\t\t\t\t\t\t\t<i class=\"icon-check-ok\"></i> {l s='Enabled' d='Admin.Global'}\n\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t<i class=\"icon-remove\"></i> {l s='Disabled' d='Admin.Global'}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.position)}\n\t\t\t\t\t\t{if !$filters_has_value && $order_by == 'position' && $order_way != 'DESC'}\n\t\t\t\t\t\t\t<div class=\"dragGroup\">\n\t\t\t\t\t\t\t\t<div class=\"positions\">\n\t\t\t\t\t\t\t\t\t{$tr.$key.position + 1}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t{$tr.$key.position + 1}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.image)}\n\t\t\t\t\t\t{$tr.$key}\n\t\t\t\t\t{elseif isset($params.icon)}\n\t\t\t\t\t\t{if is_array($tr[$key])}\n\t\t\t\t\t\t\t{if isset($tr[$key]['class'])}\n\t\t\t\t\t\t\t\t<i class=\"{$tr[$key]['class']}\"></i>\n\t\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t\t<img src=\"../img/admin/{$tr[$key]['src']}\" alt=\"{$tr[$key]['alt']}\" title=\"{$tr[$key]['alt']}\" />\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'price'}\n\t\t\t\t\t\t{if isset($tr.id_currency)}\n\t\t\t\t\t\t\t{displayPrice price=$tr.$key currency=$tr.id_currency}\n\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t{displayPrice price=$tr.$key}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.float)}\n\t\t\t\t\t\t{$tr.$key}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'date'}\n\t\t\t\t\t\t{dateFormat date=$tr.$key full=0}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'datetime'}\n\t\t\t\t\t\t{dateFormat date=$tr.$key full=1}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'decimal'}\n\t\t\t\t\t\t{$tr.$key|string_format:\"%.2f\"}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'percent'}\n\t\t\t\t\t\t{$tr.$key} {l s='%'}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'bool'}\n            {if $tr.$key == 1}\n              {l s='Yes' d='Admin.Global'}\n            {elseif $tr.$key == 0 && $tr.$key != ''}\n              {l s='No' d='Admin.Global'}\n            {/if}\n\t\t\t\t\t{* If type is 'editable', an input is created *}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'editable' && isset($tr.id)}\n\t\t\t\t\t\t<input type=\"text\" name=\"{$key}_{$tr.id}\" value=\"{$tr.$key|escape:'html':'UTF-8'}\" class=\"{$key}\" />\n\t\t\t\t\t{elseif $key == 'color'}\n\t\t\t\t\t\t{if !is_array($tr.$key)}\n\t\t\t\t\t\t<div style=\"background-color: {$tr.$key};\" class=\"attributes-color-container\"></div>\n\t\t\t\t\t\t{else} {*TEXTURE*}\n\t\t\t\t\t\t<img src=\"{$tr.$key.texture}\" alt=\"{$tr.name}\" class=\"attributes-color-container\" />\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.maxlength) && Tools::strlen($tr.$key) > $params.maxlength}\n\t\t\t\t\t\t<span title=\"{$tr.$key|escape:'html':'UTF-8'}\">{$tr.$key|truncate:$params.maxlength:'...'|escape:'html':'UTF-8'}</span>\n\t\t\t\t\t{else}\n\t\t\t\t\t\t{$tr.$key|escape:'html':'UTF-8'}\n\t\t\t\t\t{/if}\n\t\t\t\t{else}\n\t\t\t\t\t{block name=\"default_field\"}--{/block}\n\t\t\t\t{/if}\n\t\t\t\t{if isset($params.suffix)}{$params.suffix}{/if}\n\t\t\t\t{if isset($params.color) && isset($tr.color)}\n\t\t\t\t\t</span>\n\t\t\t\t{/if}\n\t\t\t\t{if isset($params.badge_danger) && $params.badge_danger && isset($tr.badge_danger) && $tr.badge_danger == $params.badge_danger}</span>{/if}\n\t\t\t\t{if isset($params.badge_warning) && $params.badge_warning && isset($tr.badge_warning) && $tr.badge_warning == $params.badge_warning}</span>{/if}\n\t\t\t\t{if isset($params.badge_success) && $params.badge_success && isset($tr.badge_success) && $tr.badge_success == $params.badge_success}</span>{/if}\n\t\t\t{/block}\n\t\t\t{block name=\"close_td\"}\n\t\t\t\t</td>\n\t\t\t{/block}\n\t\t{/foreach}\n\n\t{if $multishop_active && $shop_link_type}\n\t\t<td title=\"{$tr.shop_name}\">\n\t\t\t{if isset($tr.shop_short_name)}\n\t\t\t\t{$tr.shop_short_name}\n\t\t\t{else}\n\t\t\t\t{$tr.shop_name}\n\t\t\t{/if}\n\t\t</td>\n\t{/if}\n\t{if $has_actions}\n\t\t<td class=\"text-right\">\n\t\t\t{assign var='compiled_actions' value=array()}\n\t\t\t{foreach $actions AS $key => $action}\n\t\t\t\t{if isset($tr.$action)}\n\t\t\t\t\t{if $key == 0}\n\t\t\t\t\t\t{assign var='action' value=$action}\n\t\t\t\t\t{/if}\n\t\t\t\t\t{if $action == 'delete' && $actions|@count > 2}\n\t\t\t\t\t\t{$compiled_actions[] = 'divider'}\n\t\t\t\t\t{/if}\n\t\t\t\t\t{$compiled_actions[] = $tr.$action}\n\t\t\t\t{/if}\n\t\t\t{/foreach}\n\t\t\t{if $compiled_actions|count > 0}\n\t\t\t\t{if $compiled_actions|count > 1}<div class=\"btn-group-action\">{/if}\n\t\t\t\t<div class=\"btn-group pull-right\">\n\t\t\t\t\t{$compiled_actions[0]}\n\t\t\t\t\t{if $compiled_actions|count > 1}\n\t\t\t\t\t<button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n\t\t\t\t\t\t<i class=\"icon-caret-down\"></i>&nbsp;\n\t\t\t\t\t</button>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t\t\t{foreach $compiled_actions AS $key => $action}\n\t\t\t\t\t\t\t{if $key != 0}\n\t\t\t\t\t\t\t<li{if $action == 'divider' && $compiled_actions|count > 3} class=\"divider\"{/if}>\n\t\t\t\t\t\t\t\t{if $action != 'divider'}{$action}{/if}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{/foreach}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t{if $compiled_actions|count > 1}</div>{/if}\n\t\t\t{/if}\n\t\t</td>\n\t{/if}\n\t</tr>\n{/foreach}\n{else}\n\t<tr>\n\t\t<td class=\"list-empty\" colspan=\"{count($fields_display)+1}\">\n\t\t\t<div class=\"list-empty-msg\">\n\t\t\t\t<i class=\"icon-warning-sign list-empty-icon\"></i>\n\t\t\t\t{l s='No records found'}\n\t\t\t</div>\n\t\t</td>\n\t</tr>\n{/if}\n</tbody>\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @property Feature $object\n */\nclass AdminFeaturesControllerCore extends AdminController\n{\n    public $bootstrap = true;\n    protected $position_identifier = 'id_feature';\n    protected $feature_name;\n\n    public function __construct()\n    {\n        $this->table = 'feature';\n        $this->className = 'Feature';\n        $this->list_id = 'feature';\n        $this->identifier = 'id_feature';\n        $this->lang = true;\n\n        parent::__construct();\n\n        $this->fields_list = array(\n            'id_feature' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n            ),\n            'name' => array(\n                'title' => $this->trans('Name', array(), 'Admin.Global'),\n                'width' => 'auto',\n                'filter_key' => 'b!name',\n            ),\n            'value' => array(\n                'title' => $this->trans('Values', array(), 'Admin.Global'),\n                'orderby' => false,\n                'search' => false,\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n            ),\n            'position' => array(\n                'title' => $this->trans('Position', array(), 'Admin.Global'),\n                'filter_key' => 'a!position',\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n                'position' => 'position',\n            ),\n        );\n\n        $this->bulk_actions = array(\n            'delete' => array(\n                'text' => $this->trans('Delete selected', array(), 'Admin.Actions'),\n                'icon' => 'icon-trash',\n                'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning'),\n            ),\n        );\n    }\n\n    /**\n     * AdminController::renderList() override.\n     *\n     * @see AdminController::renderList()\n     */\n    public function renderList()\n    {\n        $this->addRowAction('view');\n        $this->addRowAction('edit');\n        $this->addRowAction('delete');\n\n        return parent::renderList();\n    }\n\n    /**\n     * Change object type to feature value (use when processing a feature value).\n     */\n    protected function setTypeValue()\n    {\n        $this->table = 'feature_value';\n        $this->className = 'FeatureValue';\n        $this->identifier = 'id_feature_value';\n    }\n\n    /**\n     * Change object type to feature (use when processing a feature).\n     */\n    protected function setTypeFeature()\n    {\n        $this->table = 'feature';\n        $this->className = 'Feature';\n        $this->identifier = 'id_feature';\n    }\n\n    public function renderView()\n    {\n        if (($id = Tools::getValue('id_feature'))) {\n            $this->setTypeValue();\n            $this->list_id = 'feature_value';\n            $this->lang = true;\n\n            // Action for list\n            $this->addRowAction('edit');\n            $this->addRowAction('delete');\n\n            if (!Validate::isLoadedObject($obj = new Feature((int) $id))) {\n                $this->errors[] = $this->trans('An error occurred while updating the status for an object.', array(), 'Admin.Notifications.Error') . ' <b>' . $this->table . '</b> ' . $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n\n                return;\n            }\n\n            $this->feature_name = $obj->name;\n            $this->toolbar_title = $this->feature_name[$this->context->employee->id_lang];\n            $this->fields_list = array(\n                'id_feature_value' => array(\n                    'title' => $this->trans('ID', array(), 'Admin.Global'),\n                    'align' => 'center',\n                    'class' => 'fixed-width-xs',\n                ),\n                'value' => array(\n                    'title' => $this->trans('Value', array(), 'Admin.Global'),\n                ),\n            );\n\n            $this->_where = sprintf('AND `id_feature` = %d', (int) $id);\n            self::$currentIndex = self::$currentIndex . '&id_feature=' . (int) $id . '&viewfeature';\n            $this->processFilter();\n\n            return parent::renderList();\n        }\n    }\n\n    /**\n     * AdminController::renderForm() override.\n     *\n     * @see AdminController::renderForm()\n     */\n    public function renderForm()\n    {\n        $this->toolbar_title = $this->trans('Add a new feature', array(), 'Admin.Catalog.Feature');\n        $this->fields_form = array(\n            'legend' => array(\n                'title' => $this->trans('Feature', array(), 'Admin.Catalog.Feature'),\n                'icon' => 'icon-info-sign',\n            ),\n            'input' => array(\n                array(\n                    'type' => 'text',\n                    'label' => $this->trans('Name', array(), 'Admin.Global'),\n                    'name' => 'name',\n                    'lang' => true,\n                    'size' => 33,\n                    'hint' => $this->trans('Invalid characters:', array(), 'Admin.Notifications.Info') . ' <>;=#{}',\n                    'required' => true,\n                ),\n            ),\n        );\n\n        if (Shop::isFeatureActive()) {\n            $this->fields_form['input'][] = array(\n                'type' => 'shop',\n                'label' => $this->trans('Shop association', array(), 'Admin.Global'),\n                'name' => 'checkBoxShopAsso',\n            );\n        }\n\n        $this->fields_form['submit'] = array(\n            'title' => $this->trans('Save', array(), 'Admin.Actions'),\n        );\n\n        return parent::renderForm();\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        if (Feature::isFeatureActive()) {\n            if (empty($this->display)) {\n                $this->page_header_toolbar_btn['new_feature'] = array(\n                    'href' => self::$currentIndex . '&addfeature&token=' . $this->token,\n                    'desc' => $this->trans('Add new feature', array(), 'Admin.Catalog.Feature'),\n                    'icon' => 'process-icon-new',\n                );\n\n                $this->page_header_toolbar_btn['new_feature_value'] = array(\n                    'href' => self::$currentIndex . '&addfeature_value&id_feature=' . (int) Tools::getValue('id_feature') . '&token=' . $this->token,\n                    'desc' => $this->trans('Add new feature value', array(), 'Admin.Catalog.Help'),\n                    'icon' => 'process-icon-new',\n                );\n            }\n        }\n\n        if ($this->display == 'view') {\n            $this->page_header_toolbar_btn['new_feature_value'] = array(\n                'href' => self::$currentIndex . '&addfeature_value&id_feature=' . (int) Tools::getValue('id_feature') . '&token=' . $this->token,\n                'desc' => $this->trans('Add new feature value', array(), 'Admin.Catalog.Help'),\n                'icon' => 'process-icon-new',\n            );\n        }\n\n        parent::initPageHeaderToolbar();\n    }\n\n    /**\n     * AdminController::initToolbar() override.\n     *\n     * @see AdminController::initToolbar()\n     */\n    public function initToolbar()\n    {\n        switch ($this->display) {\n            case 'editFeatureValue':\n            case 'add':\n            case 'edit':\n                $this->toolbar_btn['save'] = array(\n                    'href' => '#',\n                    'desc' => $this->trans('Save', array(), 'Admin.Actions'),\n                );\n\n                if ($this->display == 'editFeatureValue') {\n                    $this->toolbar_btn['save-and-stay'] = array(\n                        'short' => 'SaveAndStay',\n                        'href' => '#',\n                        'desc' => $this->trans('Save and add another value', array(), 'Admin.Catalog.Help'),\n                        'force_desc' => true,\n                    );\n                }\n\n                // Default cancel button - like old back link\n                $back = Tools::safeOutput(Tools::getValue('back', ''));\n                if (empty($back)) {\n                    $back = self::$currentIndex . '&token=' . $this->token;\n                }\n\n                $this->toolbar_btn['back'] = array(\n                    'href' => $back,\n                    'desc' => $this->trans('Back to the list', array(), 'Admin.Catalog.Help'),\n                );\n\n                break;\n            case 'view':\n                $this->toolbar_btn['newAttributes'] = array(\n                    'href' => self::$currentIndex . '&addfeature_value&id_feature=' . (int) Tools::getValue('id_feature') . '&token=' . $this->token,\n                    'desc' => $this->trans('Add new feature values', array(), 'Admin.Catalog.Help'),\n                );\n                $this->toolbar_btn['back'] = array(\n                    'href' => self::$currentIndex . '&token=' . $this->token,\n                    'desc' => $this->trans('Back to the list', array(), 'Admin.Catalog.Help'),\n                );\n\n                break;\n            default:\n                parent::initToolbar();\n        }\n    }\n\n    public function initToolbarTitle()\n    {\n        $bread_extended = $this->breadcrumbs;\n\n        switch ($this->display) {\n            case 'edit':\n                $bread_extended[] = $this->trans('Edit New Feature', array(), 'Admin.Catalog.Feature');\n                $this->addMetaTitle($bread_extended[count($bread_extended) - 1]);\n\n                break;\n\n            case 'add':\n                $bread_extended[] = $this->trans('Add New Feature', array(), 'Admin.Catalog.Feature');\n                $this->addMetaTitle($bread_extended[count($bread_extended) - 1]);\n\n                break;\n\n            case 'view':\n                $bread_extended[] = $this->feature_name[$this->context->employee->id_lang];\n                $this->addMetaTitle($bread_extended[count($bread_extended) - 1]);\n\n                break;\n\n            case 'editFeatureValue':\n                if (Tools::getValue('id_feature_value')) {\n                    if (($id = Tools::getValue('id_feature'))) {\n                        if (Validate::isLoadedObject($obj = new Feature((int) $id))) {\n                            $bread_extended[] = '<a href=\"' . Context::getContext()->link->getAdminLink('AdminFeatures') . '&id_feature=' . $id . '&viewfeature\">' . $obj->name[$this->context->employee->id_lang] . '</a>';\n                        }\n\n                        if (Validate::isLoadedObject($obj = new FeatureValue((int) Tools::getValue('id_feature_value')))) {\n                            $bread_extended[] = $this->trans('Edit: %value%', array('%value%' => $obj->value[$this->context->employee->id_lang]), 'Admin.Catalog.Feature');\n                        }\n                    } else {\n                        $bread_extended[] = $this->trans('Edit Value', array(), 'Admin.Catalog.Feature');\n                    }\n                } else {\n                    $bread_extended[] = $this->trans('Add New Value', array(), 'Admin.Catalog.Feature');\n                }\n\n                if (count($bread_extended) > 0) {\n                    $this->addMetaTitle($bread_extended[count($bread_extended) - 1]);\n                }\n\n                break;\n        }\n\n        $this->toolbar_title = $bread_extended;\n    }\n\n    /**\n     * AdminController::renderForm() override.\n     *\n     * @see AdminController::renderForm()\n     */\n    public function initFormFeatureValue()\n    {\n        $this->setTypeValue();\n\n        $this->fields_form[0]['form'] = array(\n            'legend' => array(\n                'title' => $this->trans('Feature value', array(), 'Admin.Catalog.Feature'),\n                'icon' => 'icon-info-sign',\n            ),\n            'input' => array(\n                array(\n                    'type' => 'select',\n                    'label' => $this->trans('Feature', array(), 'Admin.Catalog.Feature'),\n                    'name' => 'id_feature',\n                    'options' => array(\n                        'query' => Feature::getFeatures($this->context->language->id),\n                        'id' => 'id_feature',\n                        'name' => 'name',\n                    ),\n                    'required' => true,\n                ),\n                array(\n                    'type' => 'text',\n                    'label' => $this->trans('Value', array(), 'Admin.Global'),\n                    'name' => 'value',\n                    'lang' => true,\n                    'size' => 33,\n                    'hint' => $this->trans('Invalid characters:', array(), 'Admin.Notifications.Info') . ' <>;=#{}',\n                    'required' => true,\n                ),\n            ),\n            'submit' => array(\n                'title' => $this->trans('Save', array(), 'Admin.Actions'),\n            ),\n            'buttons' => array(\n                'save-and-stay' => array(\n                    'title' => $this->trans('Save then add another value', array(), 'Admin.Catalog.Feature'),\n                    'name' => 'submitAdd' . $this->table . 'AndStay',\n                    'type' => 'submit',\n                    'class' => 'btn btn-default pull-right',\n                    'icon' => 'process-icon-save',\n                ),\n            ),\n        );\n\n        $this->fields_value['id_feature'] = (int) Tools::getValue('id_feature');\n\n        // Create Object FeatureValue\n        $feature_value = new FeatureValue(Tools::getValue('id_feature_value'));\n\n        $this->tpl_vars = array(\n            'feature_value' => $feature_value,\n        );\n\n        $this->getlanguages();\n        $helper = new HelperForm();\n        $helper->show_cancel_button = true;\n\n        $back = Tools::safeOutput(Tools::getValue('back', ''));\n        if (empty($back)) {\n            $back = self::$currentIndex . '&token=' . $this->token;\n        }\n        if (!Validate::isCleanHtml($back)) {\n            die(Tools::displayError());\n        }\n\n        $helper->back_url = $back;\n        $helper->currentIndex = self::$currentIndex;\n        $helper->token = $this->token;\n        $helper->table = $this->table;\n        $helper->identifier = $this->identifier;\n        $helper->override_folder = 'feature_value/';\n        $helper->id = $feature_value->id;\n        $helper->toolbar_scroll = false;\n        $helper->tpl_vars = $this->tpl_vars;\n        $helper->languages = $this->_languages;\n        $helper->default_form_language = $this->default_form_language;\n        $helper->allow_employee_form_lang = $this->allow_employee_form_lang;\n        $helper->fields_value = $this->getFieldsValue($feature_value);\n        $helper->toolbar_btn = $this->toolbar_btn;\n        $helper->title = $this->trans('Add a new feature value', array(), 'Admin.Catalog.Feature');\n        $this->content .= $helper->generateForm($this->fields_form);\n    }\n\n    /**\n     * AdminController::initContent() override.\n     *\n     * @see AdminController::initContent()\n     */\n    public function initContent()\n    {\n        if (Feature::isFeatureActive()) {\n            if ($this->display == 'edit' || $this->display == 'add') {\n                if (!$this->loadObject(true)) {\n                    return;\n                }\n                $this->content .= $this->renderForm();\n            } elseif ($this->display == 'view') {\n                // Some controllers use the view action without an object\n                if ($this->className) {\n                    $this->loadObject(true);\n                }\n                $this->content .= $this->renderView();\n            } elseif ($this->display == 'editFeatureValue') {\n                if (!$this->object = new FeatureValue((int) Tools::getValue('id_feature_value'))) {\n                    return;\n                }\n                $this->content .= $this->initFormFeatureValue();\n            } elseif ($this->display != 'view' && !$this->ajax) {\n                // If a feature value was saved, we need to reset the values to display the list\n                $this->setTypeFeature();\n                $this->content .= $this->renderList();\n                /* reset all attributes filter */\n                if (!Tools::getValue('submitFilterfeature_value', 0) && !Tools::getIsset('id_feature_value')) {\n                    $this->processResetFilters('feature_value');\n                }\n            }\n        } else {\n            $adminPerformanceUrl = $this->context->link->getAdminLink('AdminPerformance');\n            $url = '<a href=\"' . $adminPerformanceUrl . '#featuresDetachables\">' . $this->trans('Performance', array(), 'Admin.Global') . '</a>';\n            $this->displayWarning($this->trans('This feature has been disabled. You can activate it here: %url%.', array('%url%' => $url), 'Admin.Catalog.Notification'));\n        }\n\n        $this->context->smarty->assign(array(\n            'content' => $this->content,\n        ));\n    }\n\n    public function initProcess()\n    {\n        // Are we working on feature values?\n        if (Tools::getValue('id_feature_value')\n            || Tools::isSubmit('deletefeature_value')\n            || Tools::isSubmit('submitAddfeature_value')\n            || Tools::isSubmit('addfeature_value')\n            || Tools::isSubmit('updatefeature_value')\n            || Tools::isSubmit('submitBulkdeletefeature_value')) {\n            $this->setTypeValue();\n        }\n\n        if (Tools::getIsset('viewfeature')) {\n            $this->list_id = 'feature_value';\n\n            if (isset($_POST['submitReset' . $this->list_id])) {\n                $this->processResetFilters();\n            }\n        } else {\n            $this->list_id = 'feature';\n            $this->_defaultOrderBy = 'position';\n            $this->_defaultOrderWay = 'ASC';\n        }\n\n        parent::initProcess();\n    }\n\n    public function postProcess()\n    {\n        if (!Feature::isFeatureActive()) {\n            return;\n        }\n\n        /* set location with current index */\n        if (Tools::getIsset('id_feature') && Tools::getIsset('viewfeature')) {\n            self::$currentIndex = self::$currentIndex . '&id_feature=' . Tools::getValue('id_feature', 0) . '&viewfeature';\n        }\n\n        if ($this->table == 'feature_value' && ($this->action == 'save' || $this->action == 'delete' || $this->action == 'bulkDelete')) {\n            Hook::exec(\n                'displayFeatureValuePostProcess',\n                array('errors' => &$this->errors)\n            );\n        } // send errors as reference to allow displayFeatureValuePostProcess to stop saving process\n        else {\n            Hook::exec(\n                'displayFeaturePostProcess',\n                array('errors' => &$this->errors)\n            );\n        } // send errors as reference to allow displayFeaturePostProcess to stop saving process\n\n        parent::postProcess();\n\n        if ($this->table == 'feature_value' && ($this->display == 'edit' || $this->display == 'add')) {\n            $this->display = 'editFeatureValue';\n        }\n    }\n\n    /**\n     * Override processAdd to change SaveAndStay button action.\n     *\n     * @see classes/AdminControllerCore::processAdd()\n     */\n    public function processAdd()\n    {\n        $object = parent::processAdd();\n\n        if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay') && !count($this->errors)) {\n            if ($this->table == 'feature_value' && ($this->display == 'edit' || $this->display == 'add')) {\n                $this->redirect_after = self::$currentIndex . '&addfeature_value&id_feature=' . (int) Tools::getValue('id_feature') . '&token=' . $this->token;\n            } else {\n                $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=&conf=3&update' . $this->table . '&token=' . $this->token;\n            }\n        } elseif (Tools::isSubmit('submitAdd' . $this->table . 'AndStay') && count($this->errors)) {\n            $this->display = 'editFeatureValue';\n        }\n\n        return $object;\n    }\n\n    /**\n     * Override processUpdate to change SaveAndStay button action.\n     *\n     * @see classes/AdminControllerCore::processUpdate()\n     */\n    public function processUpdate()\n    {\n        $object = parent::processUpdate();\n\n        if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay') && !count($this->errors)) {\n            $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=&conf=3&update' . $this->table . '&token=' . $this->token;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Call the right method for creating or updating object.\n     *\n     * @return mixed\n     */\n    public function processSave()\n    {\n        if ($this->table == 'feature') {\n            $id_feature = (int) Tools::getValue('id_feature');\n            // Adding last position to the feature if not exist\n            if ($id_feature <= 0) {\n                $sql = 'SELECT `position`+1\n\t\t\t\t\t\tFROM `' . _DB_PREFIX_ . 'feature`\n\t\t\t\t\t\tORDER BY position DESC';\n                // set the position of the new feature in $_POST for postProcess() method\n                $_POST['position'] = Db::getInstance()->getValue($sql);\n            }\n            // clean \\n\\r characters\n            foreach ($_POST as $key => $value) {\n                if (preg_match('/^name_/Ui', $key)) {\n                    $_POST[$key] = str_replace('\\n', '', str_replace('\\r', '', $value));\n                }\n            }\n        }\n\n        return parent::processSave();\n    }\n\n    /**\n     * AdminController::getList() override.\n     *\n     * @see AdminController::getList()\n     *\n     * @param int $id_lang\n     * @param string|null $order_by\n     * @param string|null $order_way\n     * @param int $start\n     * @param int|null $limit\n     * @param int|bool $id_lang_shop\n     *\n     * @throws PrestaShopException\n     */\n    public function getList($id_lang, $order_by = null, $order_way = null, $start = 0, $limit = null, $id_lang_shop = false)\n    {\n        if ($this->table == 'feature_value') {\n            $this->_where .= ' AND (a.custom = 0 OR a.custom IS NULL)';\n        }\n\n        parent::getList($id_lang, $order_by, $order_way, $start, $limit, $id_lang_shop);\n\n        if ($this->table == 'feature') {\n            $nb_items = count($this->_list);\n            for ($i = 0; $i < $nb_items; ++$i) {\n                $item = &$this->_list[$i];\n\n                $query = new DbQuery();\n                $query->select('COUNT(fv.id_feature_value) as count_values');\n                $query->from('feature_value', 'fv');\n                $query->where('fv.id_feature =' . (int) $item['id_feature']);\n                $query->where('(fv.custom=0 OR fv.custom IS NULL)');\n                $res = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue($query);\n                $item['value'] = (int) $res;\n                unset($query);\n            }\n        }\n    }\n\n    public function ajaxProcessUpdatePositions()\n    {\n        if ($this->access('edit')) {\n            $way = (int) Tools::getValue('way');\n            $id_feature = (int) Tools::getValue('id');\n            $positions = Tools::getValue('feature');\n\n            $new_positions = array();\n            foreach ($positions as $v) {\n                if (!empty($v)) {\n                    $new_positions[] = $v;\n                }\n            }\n\n            foreach ($new_positions as $position => $value) {\n                $pos = explode('_', $value);\n\n                if (isset($pos[2]) && (int) $pos[2] === $id_feature) {\n                    if ($feature = new Feature((int) $pos[2])) {\n                        if (isset($position) && $feature->updatePosition($way, $position, $id_feature)) {\n                            echo 'ok position ' . (int) $position . ' for feature ' . (int) $pos[1] . '\\r\\n';\n                        } else {\n                            echo '{\"hasError\" : true, \"errors\" : \"Can not update feature ' . (int) $id_feature . ' to position ' . (int) $position . ' \"}';\n                        }\n                    } else {\n                        echo '{\"hasError\" : true, \"errors\" : \"This feature (' . (int) $id_feature . ') can t be loaded\"}';\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n}\n"], "fixing_code": ["{**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n *}\n{capture name='tr_count'}{counter name='tr_count'}{/capture}\n<tbody>\n{if count($list)}\n{foreach $list AS $index => $tr}\n\t<tr{if $position_identifier} id=\"tr_{$position_group_identifier}_{$tr.$identifier}_{if isset($tr.position['position'])}{$tr.position['position']}{else}0{/if}\"{/if} class=\"{if isset($tr.class)}{$tr.class}{/if} {if $tr@iteration is odd by 1}odd{/if}\"{if isset($tr.color) && $color_on_bg} style=\"background-color: {$tr.color}\"{/if} >\n\t\t{if $bulk_actions && $has_bulk_actions}\n\t\t\t<td class=\"row-selector text-center\">\n\t\t\t\t{if isset($list_skip_actions.delete)}\n\t\t\t\t\t{if !in_array($tr.$identifier, $list_skip_actions.delete)}\n\t\t\t\t\t\t<input type=\"checkbox\" name=\"{$list_id}Box[]\" value=\"{$tr.$identifier}\"{if isset($checked_boxes) && is_array($checked_boxes) && in_array({$tr.$identifier}, $checked_boxes)} checked=\"checked\"{/if} class=\"noborder\" />\n\t\t\t\t\t{/if}\n\t\t\t\t{else}\n\t\t\t\t\t<input type=\"checkbox\" name=\"{$list_id}Box[]\" value=\"{$tr.$identifier}\"{if isset($checked_boxes) && is_array($checked_boxes) && in_array({$tr.$identifier}, $checked_boxes)} checked=\"checked\"{/if} class=\"noborder\" />\n\t\t\t\t{/if}\n\t\t\t</td>\n\t\t{/if}\n\t\t{foreach $fields_display AS $key => $params}\n\t\t\t{block name=\"open_td\"}\n\t\t\t\t<td\n\t\t\t\t\t{if isset($params.position)}\n\t\t\t\t\t\tid=\"td_{if !empty($position_group_identifier)}{$position_group_identifier}{else}0{/if}_{$tr.$identifier}{if $smarty.capture.tr_count > 1}_{($smarty.capture.tr_count - 1)|intval}{/if}\"\n\t\t\t\t\t{/if}\n\t\t\t\t\tclass=\"{strip}{if !$no_link}pointer{/if}\n\t\t\t\t\t{if isset($params.position) && $order_by == 'position'  && $order_way != 'DESC'} dragHandle{/if}\n\t\t\t\t\t{if isset($params.class)} {$params.class}{/if}\n\t\t\t\t\t{if isset($params.align)} {$params.align}{/if}{/strip}\"\n\t\t\t\t\t{if (!isset($params.position) && !$no_link && !isset($params.remove_onclick))}\n            {if isset($tr.link) }\n              onclick=\"document.location = '{$tr.link|addslashes|escape:'html':'UTF-8'}'\">\n            {else}\n              onclick=\"document.location = '{$current_index|addslashes|escape:'html':'UTF-8'}&amp;{$identifier|escape:'html':'UTF-8'}={$tr.$identifier|escape:'html':'UTF-8'}{if $view}&amp;view{else}&amp;update{/if}{$table|escape:'html':'UTF-8'}{if $page > 1}&amp;page={$page|intval}{/if}&amp;token={$token|escape:'html':'UTF-8'}'\">\n            {/if}\n\t\t\t\t\t{else}\n\t\t\t\t\t>\n\t\t\t\t{/if}\n\t\t\t{/block}\n\t\t\t{block name=\"td_content\"}\n\t\t\t\t{if isset($params.prefix)}{$params.prefix}{/if}\n\t\t\t\t{if isset($params.badge_success) && $params.badge_success && isset($tr.badge_success) && $tr.badge_success == $params.badge_success}<span class=\"badge badge-success\">{/if}\n\t\t\t\t{if isset($params.badge_warning) && $params.badge_warning && isset($tr.badge_warning) && $tr.badge_warning == $params.badge_warning}<span class=\"badge badge-warning\">{/if}\n\t\t\t\t{if isset($params.badge_danger) && $params.badge_danger && isset($tr.badge_danger) && $tr.badge_danger == $params.badge_danger}<span class=\"badge badge-danger\">{/if}\n\t\t\t\t{if isset($params.color) && isset($tr[$params.color])}\n\t\t\t\t\t<span class=\"label color_field\" style=\"background-color:{$tr[$params.color]};color:{if Tools::getBrightness($tr[$params.color]) < 128}white{else}#383838{/if}\">\n\t\t\t\t{/if}\n\t\t\t\t{if isset($tr.$key)}\n\t\t\t\t\t{if isset($params.active)}\n\t\t\t\t\t\t{$tr.$key}\n\t\t\t\t\t{elseif isset($params.callback)}\n\t\t\t\t\t\t{if isset($params.maxlength) && Tools::strlen($tr.$key) > $params.maxlength}\n\t\t\t\t\t\t\t<span title=\"{$tr.$key}\">{$tr.$key|truncate:$params.maxlength:'...'}</span>\n\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t{$tr.$key}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.activeVisu)}\n\t\t\t\t\t\t{if $tr.$key}\n\t\t\t\t\t\t\t<i class=\"icon-check-ok\"></i> {l s='Enabled' d='Admin.Global'}\n\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t<i class=\"icon-remove\"></i> {l s='Disabled' d='Admin.Global'}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.position)}\n\t\t\t\t\t\t{if !$filters_has_value && $order_by == 'position' && $order_way != 'DESC'}\n\t\t\t\t\t\t\t<div class=\"dragGroup\">\n\t\t\t\t\t\t\t\t<div class=\"positions\">\n\t\t\t\t\t\t\t\t\t{$tr.$key.position + 1}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t{$tr.$key.position + 1}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.image)}\n\t\t\t\t\t\t{$tr.$key}\n\t\t\t\t\t{elseif isset($params.icon)}\n\t\t\t\t\t\t{if is_array($tr[$key])}\n\t\t\t\t\t\t\t{if isset($tr[$key]['class'])}\n\t\t\t\t\t\t\t\t<i class=\"{$tr[$key]['class']}\"></i>\n\t\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t\t<img src=\"../img/admin/{$tr[$key]['src']}\" alt=\"{$tr[$key]['alt']}\" title=\"{$tr[$key]['alt']}\" />\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'price'}\n\t\t\t\t\t\t{if isset($tr.id_currency)}\n\t\t\t\t\t\t\t{displayPrice price=$tr.$key currency=$tr.id_currency}\n\t\t\t\t\t\t{else}\n\t\t\t\t\t\t\t{displayPrice price=$tr.$key}\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.float)}\n\t\t\t\t\t\t{$tr.$key}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'date'}\n\t\t\t\t\t\t{dateFormat date=$tr.$key full=0}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'datetime'}\n\t\t\t\t\t\t{dateFormat date=$tr.$key full=1}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'decimal'}\n\t\t\t\t\t\t{$tr.$key|string_format:\"%.2f\"}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'percent'}\n\t\t\t\t\t\t{$tr.$key} {l s='%'}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'bool'}\n            {if $tr.$key == 1}\n              {l s='Yes' d='Admin.Global'}\n            {elseif $tr.$key == 0 && $tr.$key != ''}\n              {l s='No' d='Admin.Global'}\n            {/if}\n\t\t\t\t\t{* If type is 'editable', an input is created *}\n\t\t\t\t\t{elseif isset($params.type) && $params.type == 'editable' && isset($tr.id)}\n\t\t\t\t\t\t<input type=\"text\" name=\"{$key}_{$tr.id}\" value=\"{$tr.$key|escape:'html':'UTF-8'}\" class=\"{$key}\" />\n\t\t\t\t\t{elseif $key == 'color'}\n\t\t\t\t\t\t{if !is_array($tr.$key)}\n\t\t\t\t\t\t<div style=\"background-color: {$tr.$key};\" class=\"attributes-color-container\"></div>\n\t\t\t\t\t\t{else} {*TEXTURE*}\n\t\t\t\t\t\t<img src=\"{$tr.$key.texture}\" alt=\"{$tr.name}\" class=\"attributes-color-container\" />\n\t\t\t\t\t\t{/if}\n\t\t\t\t\t{elseif isset($params.maxlength) && Tools::strlen($tr.$key) > $params.maxlength}\n\t\t\t\t\t\t<span title=\"{$tr.$key|escape:'html':'UTF-8'}\">{$tr.$key|truncate:$params.maxlength:'...'|escape:'html':'UTF-8'}</span>\n\t\t\t\t\t{else}\n\t\t\t\t\t\t{$tr.$key|escape:'html':'UTF-8'}\n\t\t\t\t\t{/if}\n\t\t\t\t{else}\n\t\t\t\t\t{block name=\"default_field\"}--{/block}\n\t\t\t\t{/if}\n\t\t\t\t{if isset($params.suffix)}{$params.suffix}{/if}\n\t\t\t\t{if isset($params.color) && isset($tr.color)}\n\t\t\t\t\t</span>\n\t\t\t\t{/if}\n\t\t\t\t{if isset($params.badge_danger) && $params.badge_danger && isset($tr.badge_danger) && $tr.badge_danger == $params.badge_danger}</span>{/if}\n\t\t\t\t{if isset($params.badge_warning) && $params.badge_warning && isset($tr.badge_warning) && $tr.badge_warning == $params.badge_warning}</span>{/if}\n\t\t\t\t{if isset($params.badge_success) && $params.badge_success && isset($tr.badge_success) && $tr.badge_success == $params.badge_success}</span>{/if}\n\t\t\t{/block}\n\t\t\t{block name=\"close_td\"}\n\t\t\t\t</td>\n\t\t\t{/block}\n\t\t{/foreach}\n\n\t{if $multishop_active && $shop_link_type}\n\t\t<td title=\"{$tr.shop_name}\">\n\t\t\t{if isset($tr.shop_short_name)}\n\t\t\t\t{$tr.shop_short_name}\n\t\t\t{else}\n\t\t\t\t{$tr.shop_name}\n\t\t\t{/if}\n\t\t</td>\n\t{/if}\n\t{if $has_actions}\n\t\t<td class=\"text-right\">\n\t\t\t{assign var='compiled_actions' value=array()}\n\t\t\t{foreach $actions AS $key => $action}\n\t\t\t\t{if isset($tr.$action)}\n\t\t\t\t\t{if $key == 0}\n\t\t\t\t\t\t{assign var='action' value=$action}\n\t\t\t\t\t{/if}\n\t\t\t\t\t{if $action == 'delete' && $actions|@count > 2}\n\t\t\t\t\t\t{$compiled_actions[] = 'divider'}\n\t\t\t\t\t{/if}\n\t\t\t\t\t{$compiled_actions[] = $tr.$action}\n\t\t\t\t{/if}\n\t\t\t{/foreach}\n\t\t\t{if $compiled_actions|count > 0}\n\t\t\t\t{if $compiled_actions|count > 1}<div class=\"btn-group-action\">{/if}\n\t\t\t\t<div class=\"btn-group pull-right\">\n\t\t\t\t\t{$compiled_actions[0]}\n\t\t\t\t\t{if $compiled_actions|count > 1}\n\t\t\t\t\t<button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">\n\t\t\t\t\t\t<i class=\"icon-caret-down\"></i>&nbsp;\n\t\t\t\t\t</button>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t\t\t{foreach $compiled_actions AS $key => $action}\n\t\t\t\t\t\t\t{if $key != 0}\n\t\t\t\t\t\t\t<li{if $action == 'divider' && $compiled_actions|count > 3} class=\"divider\"{/if}>\n\t\t\t\t\t\t\t\t{if $action != 'divider'}{$action}{/if}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t{/if}\n\t\t\t\t\t\t{/foreach}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t{/if}\n\t\t\t\t</div>\n\t\t\t\t{if $compiled_actions|count > 1}</div>{/if}\n\t\t\t{/if}\n\t\t</td>\n\t{/if}\n\t</tr>\n{/foreach}\n{else}\n\t<tr>\n\t\t<td class=\"list-empty\" colspan=\"{count($fields_display)+1}\">\n\t\t\t<div class=\"list-empty-msg\">\n\t\t\t\t<i class=\"icon-warning-sign list-empty-icon\"></i>\n\t\t\t\t{l s='No records found'}\n\t\t\t</div>\n\t\t</td>\n\t</tr>\n{/if}\n</tbody>\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @property Feature $object\n */\nclass AdminFeaturesControllerCore extends AdminController\n{\n    public $bootstrap = true;\n    protected $position_identifier = 'id_feature';\n    protected $feature_name;\n\n    public function __construct()\n    {\n        $this->table = 'feature';\n        $this->className = 'Feature';\n        $this->list_id = 'feature';\n        $this->identifier = 'id_feature';\n        $this->lang = true;\n\n        parent::__construct();\n\n        $this->fields_list = array(\n            'id_feature' => array(\n                'title' => $this->trans('ID', array(), 'Admin.Global'),\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n            ),\n            'name' => array(\n                'title' => $this->trans('Name', array(), 'Admin.Global'),\n                'width' => 'auto',\n                'filter_key' => 'b!name',\n            ),\n            'value' => array(\n                'title' => $this->trans('Values', array(), 'Admin.Global'),\n                'orderby' => false,\n                'search' => false,\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n            ),\n            'position' => array(\n                'title' => $this->trans('Position', array(), 'Admin.Global'),\n                'filter_key' => 'a!position',\n                'align' => 'center',\n                'class' => 'fixed-width-xs',\n                'position' => 'position',\n            ),\n        );\n\n        $this->bulk_actions = array(\n            'delete' => array(\n                'text' => $this->trans('Delete selected', array(), 'Admin.Actions'),\n                'icon' => 'icon-trash',\n                'confirm' => $this->trans('Delete selected items?', array(), 'Admin.Notifications.Warning'),\n            ),\n        );\n    }\n\n    /**\n     * AdminController::renderList() override.\n     *\n     * @see AdminController::renderList()\n     */\n    public function renderList()\n    {\n        $this->addRowAction('view');\n        $this->addRowAction('edit');\n        $this->addRowAction('delete');\n\n        return parent::renderList();\n    }\n\n    /**\n     * Change object type to feature value (use when processing a feature value).\n     */\n    protected function setTypeValue()\n    {\n        $this->table = 'feature_value';\n        $this->className = 'FeatureValue';\n        $this->identifier = 'id_feature_value';\n    }\n\n    /**\n     * Change object type to feature (use when processing a feature).\n     */\n    protected function setTypeFeature()\n    {\n        $this->table = 'feature';\n        $this->className = 'Feature';\n        $this->identifier = 'id_feature';\n    }\n\n    public function renderView()\n    {\n        if (($id = (int) Tools::getValue('id_feature'))) {\n            $this->setTypeValue();\n            $this->list_id = 'feature_value';\n            $this->lang = true;\n\n            // Action for list\n            $this->addRowAction('edit');\n            $this->addRowAction('delete');\n\n            if (!Validate::isLoadedObject($obj = new Feature((int) $id))) {\n                $this->errors[] = $this->trans('An error occurred while updating the status for an object.', array(), 'Admin.Notifications.Error') . ' <b>' . $this->table . '</b> ' . $this->trans('(cannot load object)', array(), 'Admin.Notifications.Error');\n\n                return;\n            }\n\n            $this->feature_name = $obj->name;\n            $this->toolbar_title = $this->feature_name[$this->context->employee->id_lang];\n            $this->fields_list = array(\n                'id_feature_value' => array(\n                    'title' => $this->trans('ID', array(), 'Admin.Global'),\n                    'align' => 'center',\n                    'class' => 'fixed-width-xs',\n                ),\n                'value' => array(\n                    'title' => $this->trans('Value', array(), 'Admin.Global'),\n                ),\n            );\n\n            $this->_where = sprintf('AND `id_feature` = %d', (int) $id);\n            self::$currentIndex = self::$currentIndex . '&id_feature=' . (int) $id . '&viewfeature';\n            $this->processFilter();\n\n            return parent::renderList();\n        }\n    }\n\n    /**\n     * AdminController::renderForm() override.\n     *\n     * @see AdminController::renderForm()\n     */\n    public function renderForm()\n    {\n        $this->toolbar_title = $this->trans('Add a new feature', array(), 'Admin.Catalog.Feature');\n        $this->fields_form = array(\n            'legend' => array(\n                'title' => $this->trans('Feature', array(), 'Admin.Catalog.Feature'),\n                'icon' => 'icon-info-sign',\n            ),\n            'input' => array(\n                array(\n                    'type' => 'text',\n                    'label' => $this->trans('Name', array(), 'Admin.Global'),\n                    'name' => 'name',\n                    'lang' => true,\n                    'size' => 33,\n                    'hint' => $this->trans('Invalid characters:', array(), 'Admin.Notifications.Info') . ' <>;=#{}',\n                    'required' => true,\n                ),\n            ),\n        );\n\n        if (Shop::isFeatureActive()) {\n            $this->fields_form['input'][] = array(\n                'type' => 'shop',\n                'label' => $this->trans('Shop association', array(), 'Admin.Global'),\n                'name' => 'checkBoxShopAsso',\n            );\n        }\n\n        $this->fields_form['submit'] = array(\n            'title' => $this->trans('Save', array(), 'Admin.Actions'),\n        );\n\n        return parent::renderForm();\n    }\n\n    public function initPageHeaderToolbar()\n    {\n        if (Feature::isFeatureActive()) {\n            if (empty($this->display)) {\n                $this->page_header_toolbar_btn['new_feature'] = array(\n                    'href' => self::$currentIndex . '&addfeature&token=' . $this->token,\n                    'desc' => $this->trans('Add new feature', array(), 'Admin.Catalog.Feature'),\n                    'icon' => 'process-icon-new',\n                );\n\n                $this->page_header_toolbar_btn['new_feature_value'] = array(\n                    'href' => self::$currentIndex . '&addfeature_value&id_feature=' . (int) Tools::getValue('id_feature') . '&token=' . $this->token,\n                    'desc' => $this->trans('Add new feature value', array(), 'Admin.Catalog.Help'),\n                    'icon' => 'process-icon-new',\n                );\n            }\n        }\n\n        if ($this->display == 'view') {\n            $this->page_header_toolbar_btn['new_feature_value'] = array(\n                'href' => self::$currentIndex . '&addfeature_value&id_feature=' . (int) Tools::getValue('id_feature') . '&token=' . $this->token,\n                'desc' => $this->trans('Add new feature value', array(), 'Admin.Catalog.Help'),\n                'icon' => 'process-icon-new',\n            );\n        }\n\n        parent::initPageHeaderToolbar();\n    }\n\n    /**\n     * AdminController::initToolbar() override.\n     *\n     * @see AdminController::initToolbar()\n     */\n    public function initToolbar()\n    {\n        switch ($this->display) {\n            case 'editFeatureValue':\n            case 'add':\n            case 'edit':\n                $this->toolbar_btn['save'] = array(\n                    'href' => '#',\n                    'desc' => $this->trans('Save', array(), 'Admin.Actions'),\n                );\n\n                if ($this->display == 'editFeatureValue') {\n                    $this->toolbar_btn['save-and-stay'] = array(\n                        'short' => 'SaveAndStay',\n                        'href' => '#',\n                        'desc' => $this->trans('Save and add another value', array(), 'Admin.Catalog.Help'),\n                        'force_desc' => true,\n                    );\n                }\n\n                // Default cancel button - like old back link\n                $back = Tools::safeOutput(Tools::getValue('back', ''));\n                if (empty($back)) {\n                    $back = self::$currentIndex . '&token=' . $this->token;\n                }\n\n                $this->toolbar_btn['back'] = array(\n                    'href' => $back,\n                    'desc' => $this->trans('Back to the list', array(), 'Admin.Catalog.Help'),\n                );\n\n                break;\n            case 'view':\n                $this->toolbar_btn['newAttributes'] = array(\n                    'href' => self::$currentIndex . '&addfeature_value&id_feature=' . (int) Tools::getValue('id_feature') . '&token=' . $this->token,\n                    'desc' => $this->trans('Add new feature values', array(), 'Admin.Catalog.Help'),\n                );\n                $this->toolbar_btn['back'] = array(\n                    'href' => self::$currentIndex . '&token=' . $this->token,\n                    'desc' => $this->trans('Back to the list', array(), 'Admin.Catalog.Help'),\n                );\n\n                break;\n            default:\n                parent::initToolbar();\n        }\n    }\n\n    public function initToolbarTitle()\n    {\n        $bread_extended = $this->breadcrumbs;\n\n        switch ($this->display) {\n            case 'edit':\n                $bread_extended[] = $this->trans('Edit New Feature', array(), 'Admin.Catalog.Feature');\n                $this->addMetaTitle($bread_extended[count($bread_extended) - 1]);\n\n                break;\n\n            case 'add':\n                $bread_extended[] = $this->trans('Add New Feature', array(), 'Admin.Catalog.Feature');\n                $this->addMetaTitle($bread_extended[count($bread_extended) - 1]);\n\n                break;\n\n            case 'view':\n                $bread_extended[] = $this->feature_name[$this->context->employee->id_lang];\n                $this->addMetaTitle($bread_extended[count($bread_extended) - 1]);\n\n                break;\n\n            case 'editFeatureValue':\n                if (Tools::getValue('id_feature_value')) {\n                    if (($id = (int) Tools::getValue('id_feature'))) {\n                        if (Validate::isLoadedObject($obj = new Feature((int) $id))) {\n                            $bread_extended[] = '<a href=\"' . Context::getContext()->link->getAdminLink('AdminFeatures') . '&id_feature=' . $id . '&viewfeature\">' . $obj->name[$this->context->employee->id_lang] . '</a>';\n                        }\n\n                        if (Validate::isLoadedObject($obj = new FeatureValue((int) Tools::getValue('id_feature_value')))) {\n                            $bread_extended[] = $this->trans('Edit: %value%', array('%value%' => $obj->value[$this->context->employee->id_lang]), 'Admin.Catalog.Feature');\n                        }\n                    } else {\n                        $bread_extended[] = $this->trans('Edit Value', array(), 'Admin.Catalog.Feature');\n                    }\n                } else {\n                    $bread_extended[] = $this->trans('Add New Value', array(), 'Admin.Catalog.Feature');\n                }\n\n                if (count($bread_extended) > 0) {\n                    $this->addMetaTitle($bread_extended[count($bread_extended) - 1]);\n                }\n\n                break;\n        }\n\n        $this->toolbar_title = $bread_extended;\n    }\n\n    /**\n     * AdminController::renderForm() override.\n     *\n     * @see AdminController::renderForm()\n     */\n    public function initFormFeatureValue()\n    {\n        $this->setTypeValue();\n\n        $this->fields_form[0]['form'] = array(\n            'legend' => array(\n                'title' => $this->trans('Feature value', array(), 'Admin.Catalog.Feature'),\n                'icon' => 'icon-info-sign',\n            ),\n            'input' => array(\n                array(\n                    'type' => 'select',\n                    'label' => $this->trans('Feature', array(), 'Admin.Catalog.Feature'),\n                    'name' => 'id_feature',\n                    'options' => array(\n                        'query' => Feature::getFeatures($this->context->language->id),\n                        'id' => 'id_feature',\n                        'name' => 'name',\n                    ),\n                    'required' => true,\n                ),\n                array(\n                    'type' => 'text',\n                    'label' => $this->trans('Value', array(), 'Admin.Global'),\n                    'name' => 'value',\n                    'lang' => true,\n                    'size' => 33,\n                    'hint' => $this->trans('Invalid characters:', array(), 'Admin.Notifications.Info') . ' <>;=#{}',\n                    'required' => true,\n                ),\n            ),\n            'submit' => array(\n                'title' => $this->trans('Save', array(), 'Admin.Actions'),\n            ),\n            'buttons' => array(\n                'save-and-stay' => array(\n                    'title' => $this->trans('Save then add another value', array(), 'Admin.Catalog.Feature'),\n                    'name' => 'submitAdd' . $this->table . 'AndStay',\n                    'type' => 'submit',\n                    'class' => 'btn btn-default pull-right',\n                    'icon' => 'process-icon-save',\n                ),\n            ),\n        );\n\n        $this->fields_value['id_feature'] = (int) Tools::getValue('id_feature');\n\n        // Create Object FeatureValue\n        $feature_value = new FeatureValue(Tools::getValue('id_feature_value'));\n\n        $this->tpl_vars = array(\n            'feature_value' => $feature_value,\n        );\n\n        $this->getlanguages();\n        $helper = new HelperForm();\n        $helper->show_cancel_button = true;\n\n        $back = Tools::safeOutput(Tools::getValue('back', ''));\n        if (empty($back)) {\n            $back = self::$currentIndex . '&token=' . $this->token;\n        }\n        if (!Validate::isCleanHtml($back)) {\n            die(Tools::displayError());\n        }\n\n        $helper->back_url = $back;\n        $helper->currentIndex = self::$currentIndex;\n        $helper->token = $this->token;\n        $helper->table = $this->table;\n        $helper->identifier = $this->identifier;\n        $helper->override_folder = 'feature_value/';\n        $helper->id = $feature_value->id;\n        $helper->toolbar_scroll = false;\n        $helper->tpl_vars = $this->tpl_vars;\n        $helper->languages = $this->_languages;\n        $helper->default_form_language = $this->default_form_language;\n        $helper->allow_employee_form_lang = $this->allow_employee_form_lang;\n        $helper->fields_value = $this->getFieldsValue($feature_value);\n        $helper->toolbar_btn = $this->toolbar_btn;\n        $helper->title = $this->trans('Add a new feature value', array(), 'Admin.Catalog.Feature');\n        $this->content .= $helper->generateForm($this->fields_form);\n    }\n\n    /**\n     * AdminController::initContent() override.\n     *\n     * @see AdminController::initContent()\n     */\n    public function initContent()\n    {\n        if (Feature::isFeatureActive()) {\n            if ($this->display == 'edit' || $this->display == 'add') {\n                if (!$this->loadObject(true)) {\n                    return;\n                }\n                $this->content .= $this->renderForm();\n            } elseif ($this->display == 'view') {\n                // Some controllers use the view action without an object\n                if ($this->className) {\n                    $this->loadObject(true);\n                }\n                $this->content .= $this->renderView();\n            } elseif ($this->display == 'editFeatureValue') {\n                if (!$this->object = new FeatureValue((int) Tools::getValue('id_feature_value'))) {\n                    return;\n                }\n                $this->content .= $this->initFormFeatureValue();\n            } elseif ($this->display != 'view' && !$this->ajax) {\n                // If a feature value was saved, we need to reset the values to display the list\n                $this->setTypeFeature();\n                $this->content .= $this->renderList();\n                /* reset all attributes filter */\n                if (!Tools::getValue('submitFilterfeature_value', 0) && !Tools::getIsset('id_feature_value')) {\n                    $this->processResetFilters('feature_value');\n                }\n            }\n        } else {\n            $adminPerformanceUrl = $this->context->link->getAdminLink('AdminPerformance');\n            $url = '<a href=\"' . $adminPerformanceUrl . '#featuresDetachables\">' . $this->trans('Performance', array(), 'Admin.Global') . '</a>';\n            $this->displayWarning($this->trans('This feature has been disabled. You can activate it here: %url%.', array('%url%' => $url), 'Admin.Catalog.Notification'));\n        }\n\n        $this->context->smarty->assign(array(\n            'content' => $this->content,\n        ));\n    }\n\n    public function initProcess()\n    {\n        // Are we working on feature values?\n        if (Tools::getValue('id_feature_value')\n            || Tools::isSubmit('deletefeature_value')\n            || Tools::isSubmit('submitAddfeature_value')\n            || Tools::isSubmit('addfeature_value')\n            || Tools::isSubmit('updatefeature_value')\n            || Tools::isSubmit('submitBulkdeletefeature_value')) {\n            $this->setTypeValue();\n        }\n\n        if (Tools::getIsset('viewfeature')) {\n            $this->list_id = 'feature_value';\n\n            if (isset($_POST['submitReset' . $this->list_id])) {\n                $this->processResetFilters();\n            }\n        } else {\n            $this->list_id = 'feature';\n            $this->_defaultOrderBy = 'position';\n            $this->_defaultOrderWay = 'ASC';\n        }\n\n        parent::initProcess();\n    }\n\n    public function postProcess()\n    {\n        if (!Feature::isFeatureActive()) {\n            return;\n        }\n\n        /* set location with current index */\n        if (Tools::getIsset('id_feature') && Tools::getIsset('viewfeature')) {\n            self::$currentIndex = self::$currentIndex . '&id_feature=' . Tools::getValue('id_feature', 0) . '&viewfeature';\n        }\n\n        if ($this->table == 'feature_value' && ($this->action == 'save' || $this->action == 'delete' || $this->action == 'bulkDelete')) {\n            Hook::exec(\n                'displayFeatureValuePostProcess',\n                array('errors' => &$this->errors)\n            );\n        } // send errors as reference to allow displayFeatureValuePostProcess to stop saving process\n        else {\n            Hook::exec(\n                'displayFeaturePostProcess',\n                array('errors' => &$this->errors)\n            );\n        } // send errors as reference to allow displayFeaturePostProcess to stop saving process\n\n        parent::postProcess();\n\n        if ($this->table == 'feature_value' && ($this->display == 'edit' || $this->display == 'add')) {\n            $this->display = 'editFeatureValue';\n        }\n    }\n\n    /**\n     * Override processAdd to change SaveAndStay button action.\n     *\n     * @see classes/AdminControllerCore::processAdd()\n     */\n    public function processAdd()\n    {\n        $object = parent::processAdd();\n\n        if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay') && !count($this->errors)) {\n            if ($this->table == 'feature_value' && ($this->display == 'edit' || $this->display == 'add')) {\n                $this->redirect_after = self::$currentIndex . '&addfeature_value&id_feature=' . (int) Tools::getValue('id_feature') . '&token=' . $this->token;\n            } else {\n                $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=&conf=3&update' . $this->table . '&token=' . $this->token;\n            }\n        } elseif (Tools::isSubmit('submitAdd' . $this->table . 'AndStay') && count($this->errors)) {\n            $this->display = 'editFeatureValue';\n        }\n\n        return $object;\n    }\n\n    /**\n     * Override processUpdate to change SaveAndStay button action.\n     *\n     * @see classes/AdminControllerCore::processUpdate()\n     */\n    public function processUpdate()\n    {\n        $object = parent::processUpdate();\n\n        if (Tools::isSubmit('submitAdd' . $this->table . 'AndStay') && !count($this->errors)) {\n            $this->redirect_after = self::$currentIndex . '&' . $this->identifier . '=&conf=3&update' . $this->table . '&token=' . $this->token;\n        }\n\n        return $object;\n    }\n\n    /**\n     * Call the right method for creating or updating object.\n     *\n     * @return mixed\n     */\n    public function processSave()\n    {\n        if ($this->table == 'feature') {\n            $id_feature = (int) Tools::getValue('id_feature');\n            // Adding last position to the feature if not exist\n            if ($id_feature <= 0) {\n                $sql = 'SELECT `position`+1\n\t\t\t\t\t\tFROM `' . _DB_PREFIX_ . 'feature`\n\t\t\t\t\t\tORDER BY position DESC';\n                // set the position of the new feature in $_POST for postProcess() method\n                $_POST['position'] = Db::getInstance()->getValue($sql);\n            }\n            // clean \\n\\r characters\n            foreach ($_POST as $key => $value) {\n                if (preg_match('/^name_/Ui', $key)) {\n                    $_POST[$key] = str_replace('\\n', '', str_replace('\\r', '', $value));\n                }\n            }\n        }\n\n        return parent::processSave();\n    }\n\n    /**\n     * AdminController::getList() override.\n     *\n     * @see AdminController::getList()\n     *\n     * @param int $id_lang\n     * @param string|null $order_by\n     * @param string|null $order_way\n     * @param int $start\n     * @param int|null $limit\n     * @param int|bool $id_lang_shop\n     *\n     * @throws PrestaShopException\n     */\n    public function getList($id_lang, $order_by = null, $order_way = null, $start = 0, $limit = null, $id_lang_shop = false)\n    {\n        if ($this->table == 'feature_value') {\n            $this->_where .= ' AND (a.custom = 0 OR a.custom IS NULL)';\n        }\n\n        parent::getList($id_lang, $order_by, $order_way, $start, $limit, $id_lang_shop);\n\n        if ($this->table == 'feature') {\n            $nb_items = count($this->_list);\n            for ($i = 0; $i < $nb_items; ++$i) {\n                $item = &$this->_list[$i];\n\n                $query = new DbQuery();\n                $query->select('COUNT(fv.id_feature_value) as count_values');\n                $query->from('feature_value', 'fv');\n                $query->where('fv.id_feature =' . (int) $item['id_feature']);\n                $query->where('(fv.custom=0 OR fv.custom IS NULL)');\n                $res = Db::getInstance(_PS_USE_SQL_SLAVE_)->getValue($query);\n                $item['value'] = (int) $res;\n                unset($query);\n            }\n        }\n    }\n\n    public function ajaxProcessUpdatePositions()\n    {\n        if ($this->access('edit')) {\n            $way = (int) Tools::getValue('way');\n            $id_feature = (int) Tools::getValue('id');\n            $positions = Tools::getValue('feature');\n\n            $new_positions = array();\n            foreach ($positions as $v) {\n                if (!empty($v)) {\n                    $new_positions[] = $v;\n                }\n            }\n\n            foreach ($new_positions as $position => $value) {\n                $pos = explode('_', $value);\n\n                if (isset($pos[2]) && (int) $pos[2] === $id_feature) {\n                    if ($feature = new Feature((int) $pos[2])) {\n                        if (isset($position) && $feature->updatePosition($way, $position, $id_feature)) {\n                            echo 'ok position ' . (int) $position . ' for feature ' . (int) $pos[1] . '\\r\\n';\n                        } else {\n                            echo '{\"hasError\" : true, \"errors\" : \"Can not update feature ' . (int) $id_feature . ' to position ' . (int) $position . ' \"}';\n                        }\n                    } else {\n                        echo '{\"hasError\" : true, \"errors\" : \"This feature (' . (int) $id_feature . ') can t be loaded\"}';\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n}\n"], "filenames": ["admin-dev/themes/default/template/helpers/list/list_content.tpl", "controllers/admin/AdminFeaturesController.php"], "buggy_code_start_loc": [53, 118], "buggy_code_end_loc": [54, 303], "fixing_code_start_loc": [53, 118], "fixing_code_end_loc": [54, 303], "type": "CWE-79", "message": "In PrestaShop between versions 1.7.6.1 and 1.7.6.5, there is a reflected XSS on AdminFeatures page by using the `id_feature` parameter. The problem is fixed in 1.7.6.5", "other": {"cve": {"id": "CVE-2020-5269", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-20T17:15:15.430", "lastModified": "2020-04-23T19:09:09.463", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop between versions 1.7.6.1 and 1.7.6.5, there is a reflected XSS on AdminFeatures page by using the `id_feature` parameter. The problem is fixed in 1.7.6.5"}, {"lang": "es", "value": "En PrestaShop entre las versiones 1.7.6.1 y 1.7.6.5, hay  una vulnerabilidad de tipo XSS reflejado en la p\u00e1gina AdminFeatures usando el par\u00e1metro \"id_feature\". El problema se corrigi\u00f3 en la versi\u00f3n 1.7.6.5"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.7.6.1", "versionEndExcluding": "1.7.6.5", "matchCriteriaId": "11E90591-68C5-457C-97CE-88B3EA9146A2"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/9efca621a0b74b82dafa91e6b955120036e31334", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-87jh-7xpg-6v93", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/9efca621a0b74b82dafa91e6b955120036e31334"}}