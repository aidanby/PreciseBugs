{"buggy_code": ["/*\n * XWD image format\n *\n * Copyright (c) 2012 Paul B Mahol\n *\n * This file is part of FFmpeg.\n *\n * FFmpeg is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * FFmpeg is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with FFmpeg; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n#include <inttypes.h>\n\n#include \"libavutil/imgutils.h\"\n#include \"avcodec.h\"\n#include \"bytestream.h\"\n#include \"internal.h\"\n#include \"xwd.h\"\n\nstatic int xwd_decode_frame(AVCodecContext *avctx, void *data,\n                            int *got_frame, AVPacket *avpkt)\n{\n    AVFrame *p = data;\n    const uint8_t *buf = avpkt->data;\n    int i, ret, buf_size = avpkt->size;\n    uint32_t version, header_size, vclass, ncolors;\n    uint32_t xoffset, be, bpp, lsize, rsize;\n    uint32_t pixformat, pixdepth, bunit, bitorder, bpad;\n    uint32_t rgb[3];\n    uint8_t *ptr;\n    GetByteContext gb;\n\n    if (buf_size < XWD_HEADER_SIZE)\n        return AVERROR_INVALIDDATA;\n\n    bytestream2_init(&gb, buf, buf_size);\n    header_size = bytestream2_get_be32u(&gb);\n\n    version = bytestream2_get_be32u(&gb);\n    if (version != XWD_VERSION) {\n        av_log(avctx, AV_LOG_ERROR, \"unsupported version\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (buf_size < header_size || header_size < XWD_HEADER_SIZE) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid header size\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    pixformat     = bytestream2_get_be32u(&gb);\n    pixdepth      = bytestream2_get_be32u(&gb);\n    avctx->width  = bytestream2_get_be32u(&gb);\n    avctx->height = bytestream2_get_be32u(&gb);\n    xoffset       = bytestream2_get_be32u(&gb);\n    be            = bytestream2_get_be32u(&gb);\n    bunit         = bytestream2_get_be32u(&gb);\n    bitorder      = bytestream2_get_be32u(&gb);\n    bpad          = bytestream2_get_be32u(&gb);\n    bpp           = bytestream2_get_be32u(&gb);\n    lsize         = bytestream2_get_be32u(&gb);\n    vclass        = bytestream2_get_be32u(&gb);\n    rgb[0]        = bytestream2_get_be32u(&gb);\n    rgb[1]        = bytestream2_get_be32u(&gb);\n    rgb[2]        = bytestream2_get_be32u(&gb);\n    bytestream2_skipu(&gb, 8);\n    ncolors       = bytestream2_get_be32u(&gb);\n    bytestream2_skipu(&gb, header_size - (XWD_HEADER_SIZE - 20));\n\n    av_log(avctx, AV_LOG_DEBUG,\n           \"pixformat %\"PRIu32\", pixdepth %\"PRIu32\", bunit %\"PRIu32\", bitorder %\"PRIu32\", bpad %\"PRIu32\"\\n\",\n           pixformat, pixdepth, bunit, bitorder, bpad);\n    av_log(avctx, AV_LOG_DEBUG,\n           \"vclass %\"PRIu32\", ncolors %\"PRIu32\", bpp %\"PRIu32\", be %\"PRIu32\", lsize %\"PRIu32\", xoffset %\"PRIu32\"\\n\",\n           vclass, ncolors, bpp, be, lsize, xoffset);\n    av_log(avctx, AV_LOG_DEBUG,\n           \"red %0\"PRIx32\", green %0\"PRIx32\", blue %0\"PRIx32\"\\n\",\n           rgb[0], rgb[1], rgb[2]);\n\n    if (pixformat > XWD_Z_PIXMAP) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid pixmap format\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (pixdepth == 0 || pixdepth > 32) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid pixmap depth\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (xoffset) {\n        avpriv_request_sample(avctx, \"xoffset %\"PRIu32\"\", xoffset);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    if (be > 1) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid byte order\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bitorder > 1) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bitmap bit order\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bunit != 8 && bunit != 16 && bunit != 32) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bitmap unit\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bpad != 8 && bpad != 16 && bpad != 32) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bitmap scan-line pad\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bpp == 0 || bpp > 32) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bits per pixel\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (ncolors > 256) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid number of entries in colormap\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if ((ret = av_image_check_size(avctx->width, avctx->height, 0, NULL)) < 0)\n        return ret;\n\n    rsize = FFALIGN(avctx->width * bpp, bpad) / 8;\n    if (lsize < rsize) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bytes per scan-line\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bytestream2_get_bytes_left(&gb) < ncolors * XWD_CMAP_SIZE + (uint64_t)avctx->height * lsize) {\n        av_log(avctx, AV_LOG_ERROR, \"input buffer too small\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (pixformat != XWD_Z_PIXMAP) {\n        avpriv_report_missing_feature(avctx, \"Pixmap format %\"PRIu32, pixformat);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    avctx->pix_fmt = AV_PIX_FMT_NONE;\n    switch (vclass) {\n    case XWD_STATIC_GRAY:\n    case XWD_GRAY_SCALE:\n        if (bpp != 1 && bpp != 8)\n            return AVERROR_INVALIDDATA;\n        if (pixdepth == 1) {\n            avctx->pix_fmt = AV_PIX_FMT_MONOWHITE;\n        } else if (pixdepth == 8) {\n            avctx->pix_fmt = AV_PIX_FMT_GRAY8;\n        }\n        break;\n    case XWD_STATIC_COLOR:\n    case XWD_PSEUDO_COLOR:\n        if (bpp == 8)\n            avctx->pix_fmt = AV_PIX_FMT_PAL8;\n        break;\n    case XWD_TRUE_COLOR:\n    case XWD_DIRECT_COLOR:\n        if (bpp != 16 && bpp != 24 && bpp != 32)\n            return AVERROR_INVALIDDATA;\n        if (bpp == 16 && pixdepth == 15) {\n            if (rgb[0] == 0x7C00 && rgb[1] == 0x3E0 && rgb[2] == 0x1F)\n                avctx->pix_fmt = be ? AV_PIX_FMT_RGB555BE : AV_PIX_FMT_RGB555LE;\n            else if (rgb[0] == 0x1F && rgb[1] == 0x3E0 && rgb[2] == 0x7C00)\n                avctx->pix_fmt = be ? AV_PIX_FMT_BGR555BE : AV_PIX_FMT_BGR555LE;\n        } else if (bpp == 16 && pixdepth == 16) {\n            if (rgb[0] == 0xF800 && rgb[1] == 0x7E0 && rgb[2] == 0x1F)\n                avctx->pix_fmt = be ? AV_PIX_FMT_RGB565BE : AV_PIX_FMT_RGB565LE;\n            else if (rgb[0] == 0x1F && rgb[1] == 0x7E0 && rgb[2] == 0xF800)\n                avctx->pix_fmt = be ? AV_PIX_FMT_BGR565BE : AV_PIX_FMT_BGR565LE;\n        } else if (bpp == 24) {\n            if (rgb[0] == 0xFF0000 && rgb[1] == 0xFF00 && rgb[2] == 0xFF)\n                avctx->pix_fmt = be ? AV_PIX_FMT_RGB24 : AV_PIX_FMT_BGR24;\n            else if (rgb[0] == 0xFF && rgb[1] == 0xFF00 && rgb[2] == 0xFF0000)\n                avctx->pix_fmt = be ? AV_PIX_FMT_BGR24 : AV_PIX_FMT_RGB24;\n        } else if (bpp == 32) {\n            if (rgb[0] == 0xFF0000 && rgb[1] == 0xFF00 && rgb[2] == 0xFF)\n                avctx->pix_fmt = be ? AV_PIX_FMT_ARGB : AV_PIX_FMT_BGRA;\n            else if (rgb[0] == 0xFF && rgb[1] == 0xFF00 && rgb[2] == 0xFF0000)\n                avctx->pix_fmt = be ? AV_PIX_FMT_ABGR : AV_PIX_FMT_RGBA;\n        }\n        bytestream2_skipu(&gb, ncolors * XWD_CMAP_SIZE);\n        break;\n    default:\n        av_log(avctx, AV_LOG_ERROR, \"invalid visual class\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (avctx->pix_fmt == AV_PIX_FMT_NONE) {\n        avpriv_request_sample(avctx,\n                              \"Unknown file: bpp %\"PRIu32\", pixdepth %\"PRIu32\", vclass %\"PRIu32\"\",\n                              bpp, pixdepth, vclass);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    if ((ret = ff_get_buffer(avctx, p, 0)) < 0)\n        return ret;\n\n    p->key_frame = 1;\n    p->pict_type = AV_PICTURE_TYPE_I;\n\n    if (avctx->pix_fmt == AV_PIX_FMT_PAL8) {\n        uint32_t *dst = (uint32_t *)p->data[1];\n        uint8_t red, green, blue;\n\n        for (i = 0; i < ncolors; i++) {\n\n            bytestream2_skipu(&gb, 4); // skip colormap entry number\n            red    = bytestream2_get_byteu(&gb);\n            bytestream2_skipu(&gb, 1);\n            green  = bytestream2_get_byteu(&gb);\n            bytestream2_skipu(&gb, 1);\n            blue   = bytestream2_get_byteu(&gb);\n            bytestream2_skipu(&gb, 3); // skip bitmask flag and padding\n\n            dst[i] = red << 16 | green << 8 | blue;\n        }\n    }\n\n    ptr = p->data[0];\n    for (i = 0; i < avctx->height; i++) {\n        bytestream2_get_bufferu(&gb, ptr, rsize);\n        bytestream2_skipu(&gb, lsize - rsize);\n        ptr += p->linesize[0];\n    }\n\n    *got_frame       = 1;\n\n    return buf_size;\n}\n\nAVCodec ff_xwd_decoder = {\n    .name           = \"xwd\",\n    .long_name      = NULL_IF_CONFIG_SMALL(\"XWD (X Window Dump) image\"),\n    .type           = AVMEDIA_TYPE_VIDEO,\n    .id             = AV_CODEC_ID_XWD,\n    .decode         = xwd_decode_frame,\n    .capabilities   = AV_CODEC_CAP_DR1,\n};\n"], "fixing_code": ["/*\n * XWD image format\n *\n * Copyright (c) 2012 Paul B Mahol\n *\n * This file is part of FFmpeg.\n *\n * FFmpeg is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * FFmpeg is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with FFmpeg; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n */\n\n#include <inttypes.h>\n\n#include \"libavutil/imgutils.h\"\n#include \"avcodec.h\"\n#include \"bytestream.h\"\n#include \"internal.h\"\n#include \"xwd.h\"\n\nstatic int xwd_decode_frame(AVCodecContext *avctx, void *data,\n                            int *got_frame, AVPacket *avpkt)\n{\n    AVFrame *p = data;\n    const uint8_t *buf = avpkt->data;\n    int i, ret, buf_size = avpkt->size;\n    uint32_t version, header_size, vclass, ncolors;\n    uint32_t xoffset, be, bpp, lsize, rsize;\n    uint32_t pixformat, pixdepth, bunit, bitorder, bpad;\n    uint32_t rgb[3];\n    uint8_t *ptr;\n    GetByteContext gb;\n\n    if (buf_size < XWD_HEADER_SIZE)\n        return AVERROR_INVALIDDATA;\n\n    bytestream2_init(&gb, buf, buf_size);\n    header_size = bytestream2_get_be32u(&gb);\n\n    version = bytestream2_get_be32u(&gb);\n    if (version != XWD_VERSION) {\n        av_log(avctx, AV_LOG_ERROR, \"unsupported version\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (buf_size < header_size || header_size < XWD_HEADER_SIZE) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid header size\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    pixformat     = bytestream2_get_be32u(&gb);\n    pixdepth      = bytestream2_get_be32u(&gb);\n    avctx->width  = bytestream2_get_be32u(&gb);\n    avctx->height = bytestream2_get_be32u(&gb);\n    xoffset       = bytestream2_get_be32u(&gb);\n    be            = bytestream2_get_be32u(&gb);\n    bunit         = bytestream2_get_be32u(&gb);\n    bitorder      = bytestream2_get_be32u(&gb);\n    bpad          = bytestream2_get_be32u(&gb);\n    bpp           = bytestream2_get_be32u(&gb);\n    lsize         = bytestream2_get_be32u(&gb);\n    vclass        = bytestream2_get_be32u(&gb);\n    rgb[0]        = bytestream2_get_be32u(&gb);\n    rgb[1]        = bytestream2_get_be32u(&gb);\n    rgb[2]        = bytestream2_get_be32u(&gb);\n    bytestream2_skipu(&gb, 8);\n    ncolors       = bytestream2_get_be32u(&gb);\n    bytestream2_skipu(&gb, header_size - (XWD_HEADER_SIZE - 20));\n\n    av_log(avctx, AV_LOG_DEBUG,\n           \"pixformat %\"PRIu32\", pixdepth %\"PRIu32\", bunit %\"PRIu32\", bitorder %\"PRIu32\", bpad %\"PRIu32\"\\n\",\n           pixformat, pixdepth, bunit, bitorder, bpad);\n    av_log(avctx, AV_LOG_DEBUG,\n           \"vclass %\"PRIu32\", ncolors %\"PRIu32\", bpp %\"PRIu32\", be %\"PRIu32\", lsize %\"PRIu32\", xoffset %\"PRIu32\"\\n\",\n           vclass, ncolors, bpp, be, lsize, xoffset);\n    av_log(avctx, AV_LOG_DEBUG,\n           \"red %0\"PRIx32\", green %0\"PRIx32\", blue %0\"PRIx32\"\\n\",\n           rgb[0], rgb[1], rgb[2]);\n\n    if (pixformat > XWD_Z_PIXMAP) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid pixmap format\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (pixdepth == 0 || pixdepth > 32) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid pixmap depth\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (xoffset) {\n        avpriv_request_sample(avctx, \"xoffset %\"PRIu32\"\", xoffset);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    if (be > 1) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid byte order\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bitorder > 1) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bitmap bit order\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bunit != 8 && bunit != 16 && bunit != 32) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bitmap unit\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bpad != 8 && bpad != 16 && bpad != 32) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bitmap scan-line pad\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bpp == 0 || bpp > 32) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bits per pixel\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (ncolors > 256) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid number of entries in colormap\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if ((ret = av_image_check_size(avctx->width, avctx->height, 0, NULL)) < 0)\n        return ret;\n\n    rsize = FFALIGN(avctx->width * bpp, bpad) / 8;\n    if (lsize < rsize) {\n        av_log(avctx, AV_LOG_ERROR, \"invalid bytes per scan-line\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (bytestream2_get_bytes_left(&gb) < ncolors * XWD_CMAP_SIZE + (uint64_t)avctx->height * lsize) {\n        av_log(avctx, AV_LOG_ERROR, \"input buffer too small\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (pixformat != XWD_Z_PIXMAP) {\n        avpriv_report_missing_feature(avctx, \"Pixmap format %\"PRIu32, pixformat);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    avctx->pix_fmt = AV_PIX_FMT_NONE;\n    switch (vclass) {\n    case XWD_STATIC_GRAY:\n    case XWD_GRAY_SCALE:\n        if (bpp != 1 && bpp != 8)\n            return AVERROR_INVALIDDATA;\n        if (bpp == 1 && pixdepth == 1) {\n            avctx->pix_fmt = AV_PIX_FMT_MONOWHITE;\n        } else if (bpp == 8 && pixdepth == 8) {\n            avctx->pix_fmt = AV_PIX_FMT_GRAY8;\n        }\n        break;\n    case XWD_STATIC_COLOR:\n    case XWD_PSEUDO_COLOR:\n        if (bpp == 8)\n            avctx->pix_fmt = AV_PIX_FMT_PAL8;\n        break;\n    case XWD_TRUE_COLOR:\n    case XWD_DIRECT_COLOR:\n        if (bpp != 16 && bpp != 24 && bpp != 32)\n            return AVERROR_INVALIDDATA;\n        if (bpp == 16 && pixdepth == 15) {\n            if (rgb[0] == 0x7C00 && rgb[1] == 0x3E0 && rgb[2] == 0x1F)\n                avctx->pix_fmt = be ? AV_PIX_FMT_RGB555BE : AV_PIX_FMT_RGB555LE;\n            else if (rgb[0] == 0x1F && rgb[1] == 0x3E0 && rgb[2] == 0x7C00)\n                avctx->pix_fmt = be ? AV_PIX_FMT_BGR555BE : AV_PIX_FMT_BGR555LE;\n        } else if (bpp == 16 && pixdepth == 16) {\n            if (rgb[0] == 0xF800 && rgb[1] == 0x7E0 && rgb[2] == 0x1F)\n                avctx->pix_fmt = be ? AV_PIX_FMT_RGB565BE : AV_PIX_FMT_RGB565LE;\n            else if (rgb[0] == 0x1F && rgb[1] == 0x7E0 && rgb[2] == 0xF800)\n                avctx->pix_fmt = be ? AV_PIX_FMT_BGR565BE : AV_PIX_FMT_BGR565LE;\n        } else if (bpp == 24) {\n            if (rgb[0] == 0xFF0000 && rgb[1] == 0xFF00 && rgb[2] == 0xFF)\n                avctx->pix_fmt = be ? AV_PIX_FMT_RGB24 : AV_PIX_FMT_BGR24;\n            else if (rgb[0] == 0xFF && rgb[1] == 0xFF00 && rgb[2] == 0xFF0000)\n                avctx->pix_fmt = be ? AV_PIX_FMT_BGR24 : AV_PIX_FMT_RGB24;\n        } else if (bpp == 32) {\n            if (rgb[0] == 0xFF0000 && rgb[1] == 0xFF00 && rgb[2] == 0xFF)\n                avctx->pix_fmt = be ? AV_PIX_FMT_ARGB : AV_PIX_FMT_BGRA;\n            else if (rgb[0] == 0xFF && rgb[1] == 0xFF00 && rgb[2] == 0xFF0000)\n                avctx->pix_fmt = be ? AV_PIX_FMT_ABGR : AV_PIX_FMT_RGBA;\n        }\n        bytestream2_skipu(&gb, ncolors * XWD_CMAP_SIZE);\n        break;\n    default:\n        av_log(avctx, AV_LOG_ERROR, \"invalid visual class\\n\");\n        return AVERROR_INVALIDDATA;\n    }\n\n    if (avctx->pix_fmt == AV_PIX_FMT_NONE) {\n        avpriv_request_sample(avctx,\n                              \"Unknown file: bpp %\"PRIu32\", pixdepth %\"PRIu32\", vclass %\"PRIu32\"\",\n                              bpp, pixdepth, vclass);\n        return AVERROR_PATCHWELCOME;\n    }\n\n    if ((ret = ff_get_buffer(avctx, p, 0)) < 0)\n        return ret;\n\n    p->key_frame = 1;\n    p->pict_type = AV_PICTURE_TYPE_I;\n\n    if (avctx->pix_fmt == AV_PIX_FMT_PAL8) {\n        uint32_t *dst = (uint32_t *)p->data[1];\n        uint8_t red, green, blue;\n\n        for (i = 0; i < ncolors; i++) {\n\n            bytestream2_skipu(&gb, 4); // skip colormap entry number\n            red    = bytestream2_get_byteu(&gb);\n            bytestream2_skipu(&gb, 1);\n            green  = bytestream2_get_byteu(&gb);\n            bytestream2_skipu(&gb, 1);\n            blue   = bytestream2_get_byteu(&gb);\n            bytestream2_skipu(&gb, 3); // skip bitmask flag and padding\n\n            dst[i] = red << 16 | green << 8 | blue;\n        }\n    }\n\n    ptr = p->data[0];\n    for (i = 0; i < avctx->height; i++) {\n        bytestream2_get_bufferu(&gb, ptr, rsize);\n        bytestream2_skipu(&gb, lsize - rsize);\n        ptr += p->linesize[0];\n    }\n\n    *got_frame       = 1;\n\n    return buf_size;\n}\n\nAVCodec ff_xwd_decoder = {\n    .name           = \"xwd\",\n    .long_name      = NULL_IF_CONFIG_SMALL(\"XWD (X Window Dump) image\"),\n    .type           = AVMEDIA_TYPE_VIDEO,\n    .id             = AV_CODEC_ID_XWD,\n    .decode         = xwd_decode_frame,\n    .capabilities   = AV_CODEC_CAP_DR1,\n};\n"], "filenames": ["libavcodec/xwddec.c"], "buggy_code_start_loc": [160], "buggy_code_end_loc": [163], "fixing_code_start_loc": [160], "fixing_code_end_loc": [163], "type": "CWE-119", "message": "Heap-based buffer overflow in the xwd_decode_frame function in libavcodec/xwddec.c in FFmpeg before 2.8.12, 3.0.x before 3.0.8, 3.1.x before 3.1.8, 3.2.x before 3.2.5, and 3.3.x before 3.3.1 allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via a crafted file.", "other": {"cve": {"id": "CVE-2017-9991", "sourceIdentifier": "cve@mitre.org", "published": "2017-06-28T06:29:00.457", "lastModified": "2017-07-05T14:53:12.527", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Heap-based buffer overflow in the xwd_decode_frame function in libavcodec/xwddec.c in FFmpeg before 2.8.12, 3.0.x before 3.0.8, 3.1.x before 3.1.8, 3.2.x before 3.2.5, and 3.3.x before 3.3.1 allows remote attackers to cause a denial of service (application crash) or possibly have unspecified other impact via a crafted file."}, {"lang": "es", "value": "Buffer overflow en la memoria din\u00e1mica -heap- en la funci\u00f3n xwd_decode_frame en el archivo libavcodec/xwddec.c en Ffmpeg en sus versiones anteriores a la 2.8.12, 3.0.x en sus versiones anteriores a la 3.0.8, 3.1.x en sus versiones anteriores a la 3.1.8, 3.2.x en sus versiones anteriores a la 3.2.5, y 3.3.x en sus versiones anteriores a la 3.3.1 permite a un atacante remoto causar una denegaci\u00f3n de servicio (ca\u00edda de la aplicaci\u00f3n ) u otro posible impacto no especificado mediante la manipulaci\u00f3n del archivo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.8.11", "matchCriteriaId": "B998D047-BA80-4A34-B961-4F8EEB4423F0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0:*:*:*:*:*:*:*", "matchCriteriaId": "C6E85AA0-559E-4EC5-AF61-100732EF0643"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "3E86E3C4-946B-4E89-B0C1-010046D8D478"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "94E316AE-DF67-40B7-99CE-CE30BFECC4C7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "368CB50E-729C-4CA3-A6E4-67A277354255"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "10FD1F85-27FB-4E8B-A2D0-529A048701C9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "263617D0-E1EF-49DB-B10A-1FF66D8FDFA0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "816B3124-59AD-4209-BD11-D7B8F2898E3F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "47F33A28-B1A4-4498-BE03-C02831CC30E6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1:*:*:*:*:*:*:*", "matchCriteriaId": "1A730657-04E4-4802-8336-DB067AF00C5A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "77E8C6C8-4849-4475-8271-CAD3ECE761CC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "59A336FF-56BE-4B09-827E-887FCF0A018B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "E6FB6CF6-F80E-4570-8790-F43D2F035A07"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "95D2E370-7B0E-451F-9802-D4C272C4902E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "A040488F-32AA-4451-B922-45B17D2AEA90"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "A7338D2F-2815-4848-B022-CD35E4620093"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "BC513E18-4938-4424-88B3-58D57FB9A617"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2:*:*:*:*:*:*:*", "matchCriteriaId": "21F765CB-B78E-42A3-BB22-D9FC515694B3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "F5DFEAF5-8003-4EDB-B2B3-9022052939C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "498C4AE1-3763-4F6F-873A-AB67B86D25F2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "D86E67CD-9D1A-4544-A0E8-2D2476CCF988"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "F2551ED3-EC8F-4ABC-9C50-C0567CEE7CC2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ffmpeg:ffmpeg:3.3:*:*:*:*:*:*:*", "matchCriteriaId": "ABC38E2D-3FA2-446B-B5BA-24E98BAA0EEE"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/99316", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=1399", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/FFmpeg/FFmpeg/commit/441026fcb13ac23aa10edc312bdacb6445a0ad06", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/FFmpeg/FFmpeg/commit/441026fcb13ac23aa10edc312bdacb6445a0ad06"}}