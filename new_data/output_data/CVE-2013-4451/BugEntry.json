{"buggy_code": ["package Gitolite::Rc;\n\n# everything to do with 'rc'.  Also defines some 'constants'\n# ----------------------------------------------------------------------\n\n@EXPORT = qw(\n  %rc\n  glrc\n  query_rc\n  version\n  trigger\n  _which\n\n  $REMOTE_COMMAND_PATT\n  $REF_OR_FILENAME_PATT\n  $REPONAME_PATT\n  $REPOPATT_PATT\n  $USERNAME_PATT\n  $UNSAFE_PATT\n);\n\nuse Exporter 'import';\nuse Getopt::Long;\n\nuse Gitolite::Common;\n\n# ----------------------------------------------------------------------\n\nour %rc;\nour $non_core;\n\n# ----------------------------------------------------------------------\n\n# pre-populate some important rc keys\n# ----------------------------------------------------------------------\n\n$rc{GL_BINDIR} = $ENV{GL_BINDIR};\n$rc{GL_LIBDIR} = $ENV{GL_LIBDIR};\n\n# these keys could be overridden by the rc file later\n$rc{GL_REPO_BASE}  = \"$ENV{HOME}/repositories\";\n$rc{GL_ADMIN_BASE} = \"$ENV{HOME}/.gitolite\";\n$rc{LOG_TEMPLATE}  = \"$ENV{HOME}/.gitolite/logs/gitolite-%y-%m.log\";\n\n# variables that should probably never be changed but someone will want to, I'll bet...\n# ----------------------------------------------------------------------\n\n#<<<\n$REMOTE_COMMAND_PATT  =                qr(^[-0-9a-zA-Z._\\@/+ :,\\%=]*$);\n$REF_OR_FILENAME_PATT =     qr(^[0-9a-zA-Z][-0-9a-zA-Z._\\@/+ :,]*$);\n$REPONAME_PATT        =  qr(^\\@?[0-9a-zA-Z][-0-9a-zA-Z._\\@/+]*$);\n$REPOPATT_PATT        = qr(^\\@?[[0-9a-zA-Z][-0-9a-zA-Z._\\@/+\\\\^$|()[\\]*?{},]*$);\n$USERNAME_PATT        =  qr(^\\@?[0-9a-zA-Z][-0-9a-zA-Z._\\@+]*$);\n\n$UNSAFE_PATT          = qr([`~#\\$\\&()|;<>]);\n#>>>\n\n# ----------------------------------------------------------------------\n\n# find the rc file and 'do' it\n# ----------------------------------------------------------------------\nmy $current_data_version = \"3.2\";\n\nmy $rc = glrc('filename');\nif (-r $rc and -s $rc) {\n    do $rc or die $@;\n}\nif ( defined($GL_ADMINDIR) ) {\n    say2 \"\";\n    say2 \"FATAL: '$rc' seems to be for older gitolite; please see doc/g2migr.mkd\\n\" . \"(online at http://gitolite.com/gitolite/g2migr.html)\";\n\n    exit 1;\n}\n\n# let values specified in rc file override our internal ones\n# ----------------------------------------------------------------------\n@rc{ keys %RC } = values %RC;\n\n# expand the non_core list into INPUT, PRE_GIT, etc using 'ENABLE' settings\nnon_core_expand() if $rc{ENABLE};\n\n# add internal triggers\n# ----------------------------------------------------------------------\n\n# is the server/repo in a writable state (i.e., not down for maintenance etc)\nunshift @{ $rc{ACCESS_1} }, 'Writable::access_1';\n\n# (testing only) override the rc file silently\n# ----------------------------------------------------------------------\n# use an env var that is highly unlikely to appear in real life :)\ndo $ENV{G3T_RC} if exists $ENV{G3T_RC} and -r $ENV{G3T_RC};\n\n# setup some perl/rc/env vars, plus umask\n# ----------------------------------------------------------------------\n\numask $rc{UMASK};\n\nunshift @INC, \"$rc{LOCAL_CODE}/lib\" if $rc{LOCAL_CODE};\n\n$ENV{PATH} = \"$ENV{GL_BINDIR}:$ENV{PATH}\" unless $ENV{PATH} =~ /^$ENV{GL_BINDIR}:/;\n\n{\n    $rc{GL_TID} = $ENV{GL_TID} ||= $$;\n    # TID: loosely, transaction ID.  The first PID at the entry point passes\n    # it down to all its children so you can track each access, across all the\n    # various commands it spawns and actions it generates.\n\n    $rc{GL_LOGFILE} = $ENV{GL_LOGFILE} ||= gen_lfn( $rc{LOG_TEMPLATE} );\n}\n\n# these two are meant to help externally written commands (see\n# src/commands/writable for an example)\n$ENV{GL_REPO_BASE}  = $rc{GL_REPO_BASE};\n$ENV{GL_ADMIN_BASE} = $rc{GL_ADMIN_BASE};\n\n# ----------------------------------------------------------------------\n\nuse strict;\nuse warnings;\n\n# ----------------------------------------------------------------------\n\nmy $glrc_default_text = '';\n{\n    local $/ = undef;\n    $glrc_default_text = <DATA>;\n}\n\n# ----------------------------------------------------------------------\n\nsub non_core_expand {\n    my %enable;\n\n    for my $e ( @{ $rc{ENABLE} } ) {\n        my ($name, $arg) = split ' ', $e, 2;\n        # store args as the hash value for the name\n        $enable{$name} = $arg || '';\n\n        # for now, we pretend everything is a command, because commands\n        # are the only thing that the non_core list does not contain\n        $rc{COMMANDS}{$name} = $arg || 1;\n    }\n\n    # bring in additional non-core specs from the rc file, if given\n    if (my $nc2 = $rc{NON_CORE}) {\n        for ($non_core, $nc2) {\n            # beat 'em into shape :)\n            s/#.*//g;\n            s/[ \\t]+/ /g; s/^ //mg; s/ $//mg;\n            s/\\n+/\\n/g;\n        }\n\n        for ( split \"\\n\", $nc2 ) {\n            next unless /\\S/;\n            my ($name, $where, $module, $before, $name2) = split ' ', $_;\n            if (not $before) {\n                $non_core .= \"$name $where $module\\n\";\n                next;\n            }\n            die if $before ne 'before';\n            $non_core =~ s(^(?=$name2 $where( |$)))($name $where $module\\n)m;\n        }\n    }\n\n    my @data = split \"\\n\", $non_core || '';\n    for (@data) {\n        next if /^\\s*(#|$)/;\n        my ($name, $where, $module) = split ' ', $_;\n\n        # if it appears here, it's not a command, so delete it.  At the end of\n        # this loop, what's left in $rc{COMMANDS} will be those names in the\n        # enable list that do not appear in the non_core list.\n        delete $rc{COMMANDS}{$name};\n\n        next unless exists $enable{$name};\n\n        # module to call is name if specified as \".\"\n        $module = $name if $module eq \".\";\n\n        # module to call is \"name::pre_git\" or such if specified as \"::\"\n        ( $module = $name ) .= \"::\" . lc($where) if $module eq '::';\n\n        # append arguments, if supplied\n        $module .= \" $enable{$name}\" if $enable{$name};\n\n        push @{ $rc{$where} }, $module;\n    }\n}\n\n# exported functions\n# ----------------------------------------------------------------------\n\nsub glrc {\n    my $cmd = shift;\n    if ( $cmd eq 'default-filename' ) {\n        return \"$ENV{HOME}/.gitolite.rc\";\n    } elsif ( $cmd eq 'default-text' ) {\n        return $glrc_default_text if $glrc_default_text;\n        _die \"rc file default text not set; this should not happen!\";\n    } elsif ( $cmd eq 'filename' ) {\n        # where is the rc file?\n\n        # search $HOME first\n        return \"$ENV{HOME}/.gitolite.rc\" if -f \"$ENV{HOME}/.gitolite.rc\";\n\n        return '';\n    } elsif ( $cmd eq 'current-data-version' ) {\n        return $current_data_version;\n    } else {\n        _die \"unknown argument to glrc: '$cmd'\";\n    }\n}\n\nmy $all   = 0;\nmy $nonl  = 0;\nmy $quiet = 0;\n\nsub query_rc {\n\n    my @vars = args();\n\n    no strict 'refs';\n\n    if ($all) {\n        for my $e ( sort keys %rc ) {\n            print \"$e=\" . ( defined( $rc{$e} ) ? $rc{$e} : 'undef' ) . \"\\n\";\n        }\n        exit 0;\n    }\n\n    my $cv = \\%rc;  # current \"value\"\n    while (@vars) {\n        my $v = shift @vars;\n\n        # dig into the rc hash, using each var as a component\n        if (not ref($cv)) {\n            _warn \"unused arguments...\";\n            last;\n        } elsif (ref($cv) eq 'HASH') {\n            $cv = $cv->{$v} || '';\n        } elsif (ref($cv) eq 'ARRAY') {\n            $cv = $cv->[$v] || '';\n        } else {\n            _die \"dont know what to do with \" . ref($cv) . \" item in the rc file\";\n        }\n    }\n\n    # we've run out of arguments so $cv is what we have.  If we're supposed to\n    # be quiet, we don't have to print anything so let's get that done first:\n    exit ( $cv ? 0 : 1 ) if $quiet;     # shell truth\n\n    # print values (notice we ignore the '-n' option if it's a ref)\n    if (ref($cv) eq 'HASH') {\n        print join(\"\\n\", sort keys %$cv), \"\\n\" if %$cv;\n    } elsif (ref($cv) eq 'ARRAY') {\n        print join(\"\\n\", @$cv), \"\\n\" if @$cv;\n    } else {\n        print $cv . ( $nonl ? '' : \"\\n\" ) if $cv;\n    }\n    exit ( $cv ? 0 : 1 );   # shell truth\n}\n\nsub version {\n    my $version = '';\n    $version = '(unknown)';\n    for (\"$ENV{GL_BINDIR}/VERSION\") {\n        $version = slurp($_) if -r $_;\n    }\n    chomp($version);\n    return $version;\n}\n\nsub trigger {\n    my $rc_section = shift;\n\n    # if arg-2 (now arg-1, due to the 'shift' above) exists, it is a repo\n    # name, so setup env from options\n    require Gitolite::Conf::Load;\n    Gitolite::Conf::Load->import('env_options');\n    env_options($_[0]) if $_[0];\n\n    if ( exists $rc{$rc_section} ) {\n        if ( ref( $rc{$rc_section} ) ne 'ARRAY' ) {\n            _die \"'$rc_section' section in rc file is not a perl list\";\n        } else {\n            for my $s ( @{ $rc{$rc_section} } ) {\n                my ( $pgm, @args ) = split ' ', $s;\n\n                if ( my ( $module, $sub ) = ( $pgm =~ /^(.*)::(\\w+)$/ ) ) {\n\n                    require Gitolite::Triggers;\n                    trace( 1, 'trigger', $module, $sub, @args, $rc_section, @_ );\n                    Gitolite::Triggers::run( $module, $sub, @args, $rc_section, @_ );\n\n                } else {\n                    $pgm = _which(\"triggers/$pgm\", 'x');\n\n                    _warn(\"skipped trigger '$s' (not found or not executable)\"), next if not $pgm;\n                    trace( 2, \"command: $s\" );\n                    _system( $pgm, @args, $rc_section, @_ );    # they better all return with 0 exit codes!\n                }\n            }\n        }\n        return;\n    }\n    trace( 2, \"'$rc_section' not found in rc\" );\n}\n\nsub _which {\n    # looks for a file in LOCAL_CODE or GL_BINDIR.  Returns whichever exists\n    # (LOCAL_CODE preferred if defined) or 0 if not found.\n    my $file = shift;\n    my $mode = shift;   # could be 'x' or 'r'\n\n    my @files = (\"$rc{GL_BINDIR}/$file\");\n    unshift @files, (\"$rc{LOCAL_CODE}/$file\") if $rc{LOCAL_CODE};\n\n    for my $f ( @files ) {\n        return $f if -x $f;\n        return $f if -r $f and $mode eq 'r';\n    }\n\n    return 0;\n}\n\n# ----------------------------------------------------------------------\n\n=for args\nUsage:  gitolite query-rc -a\n        gitolite query-rc [-n] [-q] rc-variable\n\n    -a          print all variables and values (first level only)\n    -n          do not append a newline if variable is scalar\n    -q          exit code only (shell truth; 0 is success)\n\nQuery the rc hash.  Second and subsequent arguments dig deeper into the hash.\nThe examples are for the default configuration; yours may be different.\n\nSingle values:\n    gitolite query-rc GL_ADMIN_BASE     # prints \"/home/git/.gitolite\" or similar\n    gitolite query-rc UMASK             # prints \"63\" (that's 0077 in decimal!)\n\nHashes:\n    gitolite query-rc COMMANDS\n        # prints \"desc\", \"help\", \"info\", \"perms\", \"writable\", one per line\n    gitolite query-rc COMMANDS help     # prints 1\n    gitolite query-rc -q COMMANDS help  # prints nothing; exit code is 0\n    gitolite query-rc COMMANDS fork     # prints nothing; exit code is 1\n\nArrays (somewhat less useful):\n    gitolite query-rc POST_GIT          # prints nothing; exit code is 0\n    gitolite query-rc POST_COMPILE      # prints 4 lines\n    gitolite query-rc POST_COMPILE 0    # prints the first of those 4 lines\n\nExplore:\n    gitolite query-rc -a\n    # prints all first level variables and values, one per line.  Any that are\n    # listed as HASH or ARRAY can be explored further in subsequent commands.\n=cut\n\nsub args {\n    my $help = 0;\n\n    GetOptions(\n        'all|a'   => \\$all,\n        'nonl|n'  => \\$nonl,\n        'quiet|q' => \\$quiet,\n        'help|h'  => \\$help,\n    ) or usage();\n\n    usage(\"'-a' cannot be combined with other arguments or options\") if $all and ( @ARGV or $nonl or $quiet );\n    usage() if not $all and not @ARGV or $help;\n    return @ARGV;\n}\n\n# ----------------------------------------------------------------------\n\nBEGIN { $non_core = \"\n    # No user-servicable parts inside.  Warranty void if seal broken.  Refer\n    # servicing to authorised service center only.\n\n    continuation-lines      SYNTACTIC_SUGAR .\n    keysubdirs-as-groups    SYNTACTIC_SUGAR .\n    macros                  SYNTACTIC_SUGAR .\n    refex-expr              SYNTACTIC_SUGAR .\n\n    renice                  PRE_GIT         .\n\n    CpuTime                 INPUT           ::\n    CpuTime                 POST_GIT        ::\n\n    Shell                   INPUT           ::\n\n    Alias                   INPUT           ::\n\n    Mirroring               INPUT           ::\n    Mirroring               PRE_GIT         ::\n    Mirroring               POST_GIT        ::\n\n    refex-expr              ACCESS_2        RefexExpr::access_2\n\n    RepoUmask               PRE_GIT         ::\n    RepoUmask               POST_CREATE     ::\n\n    partial-copy            PRE_GIT         .\n\n    upstream                PRE_GIT         .\n\n    no-create-on-read       PRE_CREATE      AutoCreate::deny_R\n    no-auto-create          PRE_CREATE      AutoCreate::deny_RW\n\n    ssh-authkeys-split      POST_COMPILE    post-compile/ssh-authkeys-split\n    ssh-authkeys            POST_COMPILE    post-compile/ssh-authkeys\n    Shell                   POST_COMPILE    post-compile/ssh-authkeys-shell-users\n\n    set-default-roles       POST_CREATE     .\n\n    git-config              POST_COMPILE    post-compile/update-git-configs\n    git-config              POST_CREATE     post-compile/update-git-configs\n\n    gitweb                  POST_CREATE     post-compile/update-gitweb-access-list\n    gitweb                  POST_COMPILE    post-compile/update-gitweb-access-list\n\n    cgit                    POST_COMPILE    post-compile/update-description-file\n\n    daemon                  POST_CREATE     post-compile/update-git-daemon-access-list\n    daemon                  POST_COMPILE    post-compile/update-git-daemon-access-list\n\n    repo-specific-hooks     POST_COMPILE    .\n    repo-specific-hooks     POST_CREATE     .\n\";\n}\n\n1;\n\n# ----------------------------------------------------------------------\n\n__DATA__\n# configuration variables for gitolite\n\n# This file is in perl syntax.  But you do NOT need to know perl to edit it --\n# just mind the commas, use single quotes unless you know what you're doing,\n# and make sure the brackets and braces stay matched up!\n\n# (Tip: perl allows a comma after the last item in a list also!)\n\n# HELP for commands can be had by running the command with \"-h\".\n\n# HELP for all the other FEATURES can be found in the documentation (look for\n# \"list of non-core programs shipped with gitolite\" in the master index) or\n# directly in the corresponding source file.\n\n%RC = (\n\n    # ------------------------------------------------------------------\n\n    # default umask gives you perms of '0700'; see the rc file docs for\n    # how/why you might change this\n    UMASK                           =>  0077,\n\n    # look for \"git-config\" in the documentation\n    GIT_CONFIG_KEYS                 =>  '',\n\n    # comment out if you don't need all the extra detail in the logfile\n    LOG_EXTRA                       =>  1,\n\n    # roles.  add more roles (like MANAGER, TESTER, ...) here.\n    #   WARNING: if you make changes to this hash, you MUST run 'gitolite\n    #   compile' afterward, and possibly also 'gitolite trigger POST_COMPILE'\n    ROLES => {\n        READERS                     =>  1,\n        WRITERS                     =>  1,\n    },\n\n    # ------------------------------------------------------------------\n\n    # rc variables used by various features\n\n    # the 'info' command prints this as additional info, if it is set\n        # SITE_INFO                 =>  'Please see http://blahblah/gitolite for more help',\n\n    # the 'desc' command uses this\n        # WRITER_CAN_UPDATE_DESC    =>  1,\n\n    # the CpuTime feature uses these\n        # display user, system, and elapsed times to user after each git operation\n        # DISPLAY_CPU_TIME          =>  1,\n        # display a warning if total CPU times (u, s, cu, cs) crosses this limit\n        # CPU_TIME_WARN_LIMIT       =>  0.1,\n\n    # the Mirroring feature needs this\n        # HOSTNAME                  =>  \"foo\",\n\n    # if you enabled 'Shell', you need this\n        # SHELL_USERS_LIST          =>  \"$ENV{HOME}/.gitolite.shell-users\",\n\n    # ------------------------------------------------------------------\n\n    # suggested locations for site-local gitolite code (see cust.html)\n\n        # this one is managed directly on the server\n        # LOCAL_CODE                =>  \"$ENV{HOME}/local\",\n\n        # or you can use this, which lets you put everything in a subdirectory\n        # called \"local\" in your gitolite-admin repo.  For a SECURITY WARNING\n        # on this, see http://gitolite.com/gitolite/cust.html#pushcode\n        # LOCAL_CODE                =>  \"$rc{GL_ADMIN_BASE}/local\",\n\n    # ------------------------------------------------------------------\n\n    # List of commands and features to enable\n\n    ENABLE => [\n\n        # COMMANDS\n\n            # These are the commands enabled by default\n            'help',\n            'desc',\n            'info',\n            'perms',\n            'writable',\n\n            # Uncomment or add new commands here.\n            # 'create',\n            # 'fork',\n            # 'mirror',\n            # 'sskm',\n            # 'D',\n\n        # These FEATURES are enabled by default.\n\n            # essential (unless you're using smart-http mode)\n            'ssh-authkeys',\n\n            # creates git-config enties from gitolite.conf file entries like 'config foo.bar = baz'\n            'git-config',\n\n            # creates git-daemon-export-ok files; if you don't use git-daemon, comment this out\n            'daemon',\n\n            # creates projects.list file; if you don't use gitweb, comment this out\n            'gitweb',\n\n        # These FEATURES are disabled by default; uncomment to enable.  If you\n        # need to add new ones, ask on the mailing list :-)\n\n        # user-visible behaviour\n\n            # prevent wild repos auto-create on fetch/clone\n            # 'no-create-on-read',\n            # no auto-create at all (don't forget to enable the 'create' command!)\n            # 'no-auto-create',\n\n            # access a repo by another (possibly legacy) name\n            # 'Alias',\n\n            # give some users direct shell access\n            # 'Shell',\n\n            # set default roles from lines like 'option default.roles-1 = ...', etc.\n            # 'set-default-roles',\n\n        # system admin stuff\n\n            # enable mirroring (don't forget to set the HOSTNAME too!)\n            # 'Mirroring',\n\n            # allow people to submit pub files with more than one key in them\n            # 'ssh-authkeys-split',\n\n            # selective read control hack\n            # 'partial-copy',\n\n            # manage local, gitolite-controlled, copies of read-only upstream repos\n            # 'upstream',\n\n            # updates 'description' file instead of 'gitweb.description' config item\n            # 'cgit',\n\n            # allow repo-specific hooks to be added\n            # 'repo-specific-hooks',\n\n        # performance, logging, monitoring...\n\n            # be nice\n            # 'renice 10',\n\n            # log CPU times (user, system, cumulative user, cumulative system)\n            # 'CpuTime',\n\n        # syntactic_sugar for gitolite.conf and included files\n\n            # allow backslash-escaped continuation lines in gitolite.conf\n            # 'continuation-lines',\n\n            # create implicit user groups from directory names in keydir/\n            # 'keysubdirs-as-groups',\n\n            # allow simple line-oriented macros\n            # 'macros',\n\n    ],\n\n);\n\n# ------------------------------------------------------------------------------\n# per perl rules, this should be the last line in such a file:\n1;\n\n# Local variables:\n# mode: perl\n# End:\n# vim: set syn=perl:\n"], "fixing_code": ["package Gitolite::Rc;\n\n# everything to do with 'rc'.  Also defines some 'constants'\n# ----------------------------------------------------------------------\n\n@EXPORT = qw(\n  %rc\n  glrc\n  query_rc\n  version\n  trigger\n  _which\n\n  $REMOTE_COMMAND_PATT\n  $REF_OR_FILENAME_PATT\n  $REPONAME_PATT\n  $REPOPATT_PATT\n  $USERNAME_PATT\n  $UNSAFE_PATT\n);\n\nuse Exporter 'import';\nuse Getopt::Long;\n\nuse Gitolite::Common;\n\n# ----------------------------------------------------------------------\n\nour %rc;\nour $non_core;\n\n# ----------------------------------------------------------------------\n\n# pre-populate some important rc keys\n# ----------------------------------------------------------------------\n\n$rc{GL_BINDIR} = $ENV{GL_BINDIR};\n$rc{GL_LIBDIR} = $ENV{GL_LIBDIR};\n\n# these keys could be overridden by the rc file later\n$rc{GL_REPO_BASE}  = \"$ENV{HOME}/repositories\";\n$rc{GL_ADMIN_BASE} = \"$ENV{HOME}/.gitolite\";\n$rc{LOG_TEMPLATE}  = \"$ENV{HOME}/.gitolite/logs/gitolite-%y-%m.log\";\n\n# variables that should probably never be changed but someone will want to, I'll bet...\n# ----------------------------------------------------------------------\n\n#<<<\n$REMOTE_COMMAND_PATT  =                qr(^[-0-9a-zA-Z._\\@/+ :,\\%=]*$);\n$REF_OR_FILENAME_PATT =     qr(^[0-9a-zA-Z][-0-9a-zA-Z._\\@/+ :,]*$);\n$REPONAME_PATT        =  qr(^\\@?[0-9a-zA-Z][-0-9a-zA-Z._\\@/+]*$);\n$REPOPATT_PATT        = qr(^\\@?[[0-9a-zA-Z][-0-9a-zA-Z._\\@/+\\\\^$|()[\\]*?{},]*$);\n$USERNAME_PATT        =  qr(^\\@?[0-9a-zA-Z][-0-9a-zA-Z._\\@+]*$);\n\n$UNSAFE_PATT          = qr([`~#\\$\\&()|;<>]);\n#>>>\n\n# ----------------------------------------------------------------------\n\n# find the rc file and 'do' it\n# ----------------------------------------------------------------------\nmy $current_data_version = \"3.2\";\n\nmy $rc = glrc('filename');\nif (-r $rc and -s $rc) {\n    do $rc or die $@;\n}\nif ( defined($GL_ADMINDIR) ) {\n    say2 \"\";\n    say2 \"FATAL: '$rc' seems to be for older gitolite; please see doc/g2migr.mkd\\n\" . \"(online at http://gitolite.com/gitolite/g2migr.html)\";\n\n    exit 1;\n}\n\n# let values specified in rc file override our internal ones\n# ----------------------------------------------------------------------\n@rc{ keys %RC } = values %RC;\n\n# expand the non_core list into INPUT, PRE_GIT, etc using 'ENABLE' settings\nnon_core_expand() if $rc{ENABLE};\n\n# add internal triggers\n# ----------------------------------------------------------------------\n\n# is the server/repo in a writable state (i.e., not down for maintenance etc)\nunshift @{ $rc{ACCESS_1} }, 'Writable::access_1';\n\n# (testing only) override the rc file silently\n# ----------------------------------------------------------------------\n# use an env var that is highly unlikely to appear in real life :)\ndo $ENV{G3T_RC} if exists $ENV{G3T_RC} and -r $ENV{G3T_RC};\n\n# setup some perl/rc/env vars, plus umask\n# ----------------------------------------------------------------------\n\numask ( $rc{UMASK} || 0077 );\n\nunshift @INC, \"$rc{LOCAL_CODE}/lib\" if $rc{LOCAL_CODE};\n\n$ENV{PATH} = \"$ENV{GL_BINDIR}:$ENV{PATH}\" unless $ENV{PATH} =~ /^$ENV{GL_BINDIR}:/;\n\n{\n    $rc{GL_TID} = $ENV{GL_TID} ||= $$;\n    # TID: loosely, transaction ID.  The first PID at the entry point passes\n    # it down to all its children so you can track each access, across all the\n    # various commands it spawns and actions it generates.\n\n    $rc{GL_LOGFILE} = $ENV{GL_LOGFILE} ||= gen_lfn( $rc{LOG_TEMPLATE} );\n}\n\n# these two are meant to help externally written commands (see\n# src/commands/writable for an example)\n$ENV{GL_REPO_BASE}  = $rc{GL_REPO_BASE};\n$ENV{GL_ADMIN_BASE} = $rc{GL_ADMIN_BASE};\n\n# ----------------------------------------------------------------------\n\nuse strict;\nuse warnings;\n\n# ----------------------------------------------------------------------\n\nmy $glrc_default_text = '';\n{\n    local $/ = undef;\n    $glrc_default_text = <DATA>;\n}\n\n# ----------------------------------------------------------------------\n\nsub non_core_expand {\n    my %enable;\n\n    for my $e ( @{ $rc{ENABLE} } ) {\n        my ($name, $arg) = split ' ', $e, 2;\n        # store args as the hash value for the name\n        $enable{$name} = $arg || '';\n\n        # for now, we pretend everything is a command, because commands\n        # are the only thing that the non_core list does not contain\n        $rc{COMMANDS}{$name} = $arg || 1;\n    }\n\n    # bring in additional non-core specs from the rc file, if given\n    if (my $nc2 = $rc{NON_CORE}) {\n        for ($non_core, $nc2) {\n            # beat 'em into shape :)\n            s/#.*//g;\n            s/[ \\t]+/ /g; s/^ //mg; s/ $//mg;\n            s/\\n+/\\n/g;\n        }\n\n        for ( split \"\\n\", $nc2 ) {\n            next unless /\\S/;\n            my ($name, $where, $module, $before, $name2) = split ' ', $_;\n            if (not $before) {\n                $non_core .= \"$name $where $module\\n\";\n                next;\n            }\n            die if $before ne 'before';\n            $non_core =~ s(^(?=$name2 $where( |$)))($name $where $module\\n)m;\n        }\n    }\n\n    my @data = split \"\\n\", $non_core || '';\n    for (@data) {\n        next if /^\\s*(#|$)/;\n        my ($name, $where, $module) = split ' ', $_;\n\n        # if it appears here, it's not a command, so delete it.  At the end of\n        # this loop, what's left in $rc{COMMANDS} will be those names in the\n        # enable list that do not appear in the non_core list.\n        delete $rc{COMMANDS}{$name};\n\n        next unless exists $enable{$name};\n\n        # module to call is name if specified as \".\"\n        $module = $name if $module eq \".\";\n\n        # module to call is \"name::pre_git\" or such if specified as \"::\"\n        ( $module = $name ) .= \"::\" . lc($where) if $module eq '::';\n\n        # append arguments, if supplied\n        $module .= \" $enable{$name}\" if $enable{$name};\n\n        push @{ $rc{$where} }, $module;\n    }\n}\n\n# exported functions\n# ----------------------------------------------------------------------\n\nsub glrc {\n    my $cmd = shift;\n    if ( $cmd eq 'default-filename' ) {\n        return \"$ENV{HOME}/.gitolite.rc\";\n    } elsif ( $cmd eq 'default-text' ) {\n        return $glrc_default_text if $glrc_default_text;\n        _die \"rc file default text not set; this should not happen!\";\n    } elsif ( $cmd eq 'filename' ) {\n        # where is the rc file?\n\n        # search $HOME first\n        return \"$ENV{HOME}/.gitolite.rc\" if -f \"$ENV{HOME}/.gitolite.rc\";\n\n        return '';\n    } elsif ( $cmd eq 'current-data-version' ) {\n        return $current_data_version;\n    } else {\n        _die \"unknown argument to glrc: '$cmd'\";\n    }\n}\n\nmy $all   = 0;\nmy $nonl  = 0;\nmy $quiet = 0;\n\nsub query_rc {\n\n    my @vars = args();\n\n    no strict 'refs';\n\n    if ($all) {\n        for my $e ( sort keys %rc ) {\n            print \"$e=\" . ( defined( $rc{$e} ) ? $rc{$e} : 'undef' ) . \"\\n\";\n        }\n        exit 0;\n    }\n\n    my $cv = \\%rc;  # current \"value\"\n    while (@vars) {\n        my $v = shift @vars;\n\n        # dig into the rc hash, using each var as a component\n        if (not ref($cv)) {\n            _warn \"unused arguments...\";\n            last;\n        } elsif (ref($cv) eq 'HASH') {\n            $cv = $cv->{$v} || '';\n        } elsif (ref($cv) eq 'ARRAY') {\n            $cv = $cv->[$v] || '';\n        } else {\n            _die \"dont know what to do with \" . ref($cv) . \" item in the rc file\";\n        }\n    }\n\n    # we've run out of arguments so $cv is what we have.  If we're supposed to\n    # be quiet, we don't have to print anything so let's get that done first:\n    exit ( $cv ? 0 : 1 ) if $quiet;     # shell truth\n\n    # print values (notice we ignore the '-n' option if it's a ref)\n    if (ref($cv) eq 'HASH') {\n        print join(\"\\n\", sort keys %$cv), \"\\n\" if %$cv;\n    } elsif (ref($cv) eq 'ARRAY') {\n        print join(\"\\n\", @$cv), \"\\n\" if @$cv;\n    } else {\n        print $cv . ( $nonl ? '' : \"\\n\" ) if $cv;\n    }\n    exit ( $cv ? 0 : 1 );   # shell truth\n}\n\nsub version {\n    my $version = '';\n    $version = '(unknown)';\n    for (\"$ENV{GL_BINDIR}/VERSION\") {\n        $version = slurp($_) if -r $_;\n    }\n    chomp($version);\n    return $version;\n}\n\nsub trigger {\n    my $rc_section = shift;\n\n    # if arg-2 (now arg-1, due to the 'shift' above) exists, it is a repo\n    # name, so setup env from options\n    require Gitolite::Conf::Load;\n    Gitolite::Conf::Load->import('env_options');\n    env_options($_[0]) if $_[0];\n\n    if ( exists $rc{$rc_section} ) {\n        if ( ref( $rc{$rc_section} ) ne 'ARRAY' ) {\n            _die \"'$rc_section' section in rc file is not a perl list\";\n        } else {\n            for my $s ( @{ $rc{$rc_section} } ) {\n                my ( $pgm, @args ) = split ' ', $s;\n\n                if ( my ( $module, $sub ) = ( $pgm =~ /^(.*)::(\\w+)$/ ) ) {\n\n                    require Gitolite::Triggers;\n                    trace( 1, 'trigger', $module, $sub, @args, $rc_section, @_ );\n                    Gitolite::Triggers::run( $module, $sub, @args, $rc_section, @_ );\n\n                } else {\n                    $pgm = _which(\"triggers/$pgm\", 'x');\n\n                    _warn(\"skipped trigger '$s' (not found or not executable)\"), next if not $pgm;\n                    trace( 2, \"command: $s\" );\n                    _system( $pgm, @args, $rc_section, @_ );    # they better all return with 0 exit codes!\n                }\n            }\n        }\n        return;\n    }\n    trace( 2, \"'$rc_section' not found in rc\" );\n}\n\nsub _which {\n    # looks for a file in LOCAL_CODE or GL_BINDIR.  Returns whichever exists\n    # (LOCAL_CODE preferred if defined) or 0 if not found.\n    my $file = shift;\n    my $mode = shift;   # could be 'x' or 'r'\n\n    my @files = (\"$rc{GL_BINDIR}/$file\");\n    unshift @files, (\"$rc{LOCAL_CODE}/$file\") if $rc{LOCAL_CODE};\n\n    for my $f ( @files ) {\n        return $f if -x $f;\n        return $f if -r $f and $mode eq 'r';\n    }\n\n    return 0;\n}\n\n# ----------------------------------------------------------------------\n\n=for args\nUsage:  gitolite query-rc -a\n        gitolite query-rc [-n] [-q] rc-variable\n\n    -a          print all variables and values (first level only)\n    -n          do not append a newline if variable is scalar\n    -q          exit code only (shell truth; 0 is success)\n\nQuery the rc hash.  Second and subsequent arguments dig deeper into the hash.\nThe examples are for the default configuration; yours may be different.\n\nSingle values:\n    gitolite query-rc GL_ADMIN_BASE     # prints \"/home/git/.gitolite\" or similar\n    gitolite query-rc UMASK             # prints \"63\" (that's 0077 in decimal!)\n\nHashes:\n    gitolite query-rc COMMANDS\n        # prints \"desc\", \"help\", \"info\", \"perms\", \"writable\", one per line\n    gitolite query-rc COMMANDS help     # prints 1\n    gitolite query-rc -q COMMANDS help  # prints nothing; exit code is 0\n    gitolite query-rc COMMANDS fork     # prints nothing; exit code is 1\n\nArrays (somewhat less useful):\n    gitolite query-rc POST_GIT          # prints nothing; exit code is 0\n    gitolite query-rc POST_COMPILE      # prints 4 lines\n    gitolite query-rc POST_COMPILE 0    # prints the first of those 4 lines\n\nExplore:\n    gitolite query-rc -a\n    # prints all first level variables and values, one per line.  Any that are\n    # listed as HASH or ARRAY can be explored further in subsequent commands.\n=cut\n\nsub args {\n    my $help = 0;\n\n    GetOptions(\n        'all|a'   => \\$all,\n        'nonl|n'  => \\$nonl,\n        'quiet|q' => \\$quiet,\n        'help|h'  => \\$help,\n    ) or usage();\n\n    usage(\"'-a' cannot be combined with other arguments or options\") if $all and ( @ARGV or $nonl or $quiet );\n    usage() if not $all and not @ARGV or $help;\n    return @ARGV;\n}\n\n# ----------------------------------------------------------------------\n\nBEGIN { $non_core = \"\n    # No user-servicable parts inside.  Warranty void if seal broken.  Refer\n    # servicing to authorised service center only.\n\n    continuation-lines      SYNTACTIC_SUGAR .\n    keysubdirs-as-groups    SYNTACTIC_SUGAR .\n    macros                  SYNTACTIC_SUGAR .\n    refex-expr              SYNTACTIC_SUGAR .\n\n    renice                  PRE_GIT         .\n\n    CpuTime                 INPUT           ::\n    CpuTime                 POST_GIT        ::\n\n    Shell                   INPUT           ::\n\n    Alias                   INPUT           ::\n\n    Mirroring               INPUT           ::\n    Mirroring               PRE_GIT         ::\n    Mirroring               POST_GIT        ::\n\n    refex-expr              ACCESS_2        RefexExpr::access_2\n\n    RepoUmask               PRE_GIT         ::\n    RepoUmask               POST_CREATE     ::\n\n    partial-copy            PRE_GIT         .\n\n    upstream                PRE_GIT         .\n\n    no-create-on-read       PRE_CREATE      AutoCreate::deny_R\n    no-auto-create          PRE_CREATE      AutoCreate::deny_RW\n\n    ssh-authkeys-split      POST_COMPILE    post-compile/ssh-authkeys-split\n    ssh-authkeys            POST_COMPILE    post-compile/ssh-authkeys\n    Shell                   POST_COMPILE    post-compile/ssh-authkeys-shell-users\n\n    set-default-roles       POST_CREATE     .\n\n    git-config              POST_COMPILE    post-compile/update-git-configs\n    git-config              POST_CREATE     post-compile/update-git-configs\n\n    gitweb                  POST_CREATE     post-compile/update-gitweb-access-list\n    gitweb                  POST_COMPILE    post-compile/update-gitweb-access-list\n\n    cgit                    POST_COMPILE    post-compile/update-description-file\n\n    daemon                  POST_CREATE     post-compile/update-git-daemon-access-list\n    daemon                  POST_COMPILE    post-compile/update-git-daemon-access-list\n\n    repo-specific-hooks     POST_COMPILE    .\n    repo-specific-hooks     POST_CREATE     .\n\";\n}\n\n1;\n\n# ----------------------------------------------------------------------\n\n__DATA__\n# configuration variables for gitolite\n\n# This file is in perl syntax.  But you do NOT need to know perl to edit it --\n# just mind the commas, use single quotes unless you know what you're doing,\n# and make sure the brackets and braces stay matched up!\n\n# (Tip: perl allows a comma after the last item in a list also!)\n\n# HELP for commands can be had by running the command with \"-h\".\n\n# HELP for all the other FEATURES can be found in the documentation (look for\n# \"list of non-core programs shipped with gitolite\" in the master index) or\n# directly in the corresponding source file.\n\n%RC = (\n\n    # ------------------------------------------------------------------\n\n    # default umask gives you perms of '0700'; see the rc file docs for\n    # how/why you might change this\n    UMASK                           =>  0077,\n\n    # look for \"git-config\" in the documentation\n    GIT_CONFIG_KEYS                 =>  '',\n\n    # comment out if you don't need all the extra detail in the logfile\n    LOG_EXTRA                       =>  1,\n\n    # roles.  add more roles (like MANAGER, TESTER, ...) here.\n    #   WARNING: if you make changes to this hash, you MUST run 'gitolite\n    #   compile' afterward, and possibly also 'gitolite trigger POST_COMPILE'\n    ROLES => {\n        READERS                     =>  1,\n        WRITERS                     =>  1,\n    },\n\n    # ------------------------------------------------------------------\n\n    # rc variables used by various features\n\n    # the 'info' command prints this as additional info, if it is set\n        # SITE_INFO                 =>  'Please see http://blahblah/gitolite for more help',\n\n    # the 'desc' command uses this\n        # WRITER_CAN_UPDATE_DESC    =>  1,\n\n    # the CpuTime feature uses these\n        # display user, system, and elapsed times to user after each git operation\n        # DISPLAY_CPU_TIME          =>  1,\n        # display a warning if total CPU times (u, s, cu, cs) crosses this limit\n        # CPU_TIME_WARN_LIMIT       =>  0.1,\n\n    # the Mirroring feature needs this\n        # HOSTNAME                  =>  \"foo\",\n\n    # if you enabled 'Shell', you need this\n        # SHELL_USERS_LIST          =>  \"$ENV{HOME}/.gitolite.shell-users\",\n\n    # ------------------------------------------------------------------\n\n    # suggested locations for site-local gitolite code (see cust.html)\n\n        # this one is managed directly on the server\n        # LOCAL_CODE                =>  \"$ENV{HOME}/local\",\n\n        # or you can use this, which lets you put everything in a subdirectory\n        # called \"local\" in your gitolite-admin repo.  For a SECURITY WARNING\n        # on this, see http://gitolite.com/gitolite/cust.html#pushcode\n        # LOCAL_CODE                =>  \"$rc{GL_ADMIN_BASE}/local\",\n\n    # ------------------------------------------------------------------\n\n    # List of commands and features to enable\n\n    ENABLE => [\n\n        # COMMANDS\n\n            # These are the commands enabled by default\n            'help',\n            'desc',\n            'info',\n            'perms',\n            'writable',\n\n            # Uncomment or add new commands here.\n            # 'create',\n            # 'fork',\n            # 'mirror',\n            # 'sskm',\n            # 'D',\n\n        # These FEATURES are enabled by default.\n\n            # essential (unless you're using smart-http mode)\n            'ssh-authkeys',\n\n            # creates git-config enties from gitolite.conf file entries like 'config foo.bar = baz'\n            'git-config',\n\n            # creates git-daemon-export-ok files; if you don't use git-daemon, comment this out\n            'daemon',\n\n            # creates projects.list file; if you don't use gitweb, comment this out\n            'gitweb',\n\n        # These FEATURES are disabled by default; uncomment to enable.  If you\n        # need to add new ones, ask on the mailing list :-)\n\n        # user-visible behaviour\n\n            # prevent wild repos auto-create on fetch/clone\n            # 'no-create-on-read',\n            # no auto-create at all (don't forget to enable the 'create' command!)\n            # 'no-auto-create',\n\n            # access a repo by another (possibly legacy) name\n            # 'Alias',\n\n            # give some users direct shell access\n            # 'Shell',\n\n            # set default roles from lines like 'option default.roles-1 = ...', etc.\n            # 'set-default-roles',\n\n        # system admin stuff\n\n            # enable mirroring (don't forget to set the HOSTNAME too!)\n            # 'Mirroring',\n\n            # allow people to submit pub files with more than one key in them\n            # 'ssh-authkeys-split',\n\n            # selective read control hack\n            # 'partial-copy',\n\n            # manage local, gitolite-controlled, copies of read-only upstream repos\n            # 'upstream',\n\n            # updates 'description' file instead of 'gitweb.description' config item\n            # 'cgit',\n\n            # allow repo-specific hooks to be added\n            # 'repo-specific-hooks',\n\n        # performance, logging, monitoring...\n\n            # be nice\n            # 'renice 10',\n\n            # log CPU times (user, system, cumulative user, cumulative system)\n            # 'CpuTime',\n\n        # syntactic_sugar for gitolite.conf and included files\n\n            # allow backslash-escaped continuation lines in gitolite.conf\n            # 'continuation-lines',\n\n            # create implicit user groups from directory names in keydir/\n            # 'keysubdirs-as-groups',\n\n            # allow simple line-oriented macros\n            # 'macros',\n\n    ],\n\n);\n\n# ------------------------------------------------------------------------------\n# per perl rules, this should be the last line in such a file:\n1;\n\n# Local variables:\n# mode: perl\n# End:\n# vim: set syn=perl:\n"], "filenames": ["src/lib/Gitolite/Rc.pm"], "buggy_code_start_loc": [96], "buggy_code_end_loc": [97], "fixing_code_start_loc": [96], "fixing_code_end_loc": [97], "type": "CWE-264", "message": "gitolite commit fa06a34 through 3.5.3 might allow attackers to have unspecified impact via vectors involving world-writable permissions when creating (1) ~/.gitolite.rc, (2) ~/.gitolite, or (3) ~/repositories/gitolite-admin.git on fresh installs.", "other": {"cve": {"id": "CVE-2013-4451", "sourceIdentifier": "secalert@redhat.com", "published": "2018-09-21T17:29:00.420", "lastModified": "2018-11-19T20:40:06.557", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "gitolite commit fa06a34 through 3.5.3 might allow attackers to have unspecified impact via vectors involving world-writable permissions when creating (1) ~/.gitolite.rc, (2) ~/.gitolite, or (3) ~/repositories/gitolite-admin.git on fresh installs."}, {"lang": "es", "value": "gitolite con commit con ID fa06a34 hasta la versi\u00f3n 3.5.3 podr\u00eda permitir que se produzca un impacto no especificado mediante vectores que involucran permisos de edici\u00f3n global cuando se crea (1) ~/.gitolite.rc, (2) ~/.gitolite o (3) ~/repositories/gitolite-admin.git en nuevas instalaciones."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gitolite:gitolite:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.0", "versionEndIncluding": "3.5.3", "matchCriteriaId": "B212DBCA-10D8-4630-947B-8ABF99452006"}]}]}], "references": [{"url": "https://github.com/sitaramc/gitolite/commit/3dad4f8e3214d6ab5f71823019a624fa48b055a3", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://groups.google.com/forum/#!topic/gitolite/Tu1sjaf7A4A/discussion", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.openwall.com/lists/oss-security/2013/10/21/11", "source": "secalert@redhat.com", "tags": ["Mailing List", "Patch"]}, {"url": "https://www.securityfocus.com/bid/63237", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/sitaramc/gitolite/commit/3dad4f8e3214d6ab5f71823019a624fa48b055a3"}}