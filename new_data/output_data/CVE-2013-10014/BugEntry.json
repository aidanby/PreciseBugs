{"buggy_code": ["<?php\n\n/**\n *  2Moons\n *  Copyright (C) 2012 Jan Kr\u00f6pke\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package 2Moons\n * @author Jan Kr\u00f6pke <info@2moons.cc>\n * @copyright 2012 Jan Kr\u00f6pke <info@2moons.cc>\n * @license http://www.gnu.org/licenses/gpl.html GNU GPLv3 License\n * @version 1.7.0 (2013-01-17)\n * @info $Id$\n * @link http://2moons.cc/\n */\n\nrequire_once(ROOT_PATH . 'includes/classes/class.FleetFunctions.php');\n\nclass ShowFleetStep1Page extends AbstractPage\n{\n\tpublic static $requireModule = MODULE_FLEET_TABLE;\n\n\tfunction __construct() \n\t{\n\t\tparent::__construct();\n\t}\n\t\n\tpublic function show()\n\t{\n\t\tglobal $USER, $PLANET, $resource, $pricelist, $reslist, $LNG;\n\t\t\n\t\t$targetGalaxy \t\t\t= HTTP::_GP('galaxy', $PLANET['galaxy']);\n\t\t$targetSystem \t\t\t= HTTP::_GP('system', $PLANET['system']);\n\t\t$targetPlanet\t\t\t= HTTP::_GP('planet', $PLANET['planet']);\n\t\t$targetType \t\t\t= HTTP::_GP('type', $PLANET['planet_type']);\n\t\t\n\t\t$mission\t\t\t\t= HTTP::_GP('target_mission', 0);\n\t\t\t\t\n\t\t$Fleet\t\t= array();\n\t\t$FleetRoom\t= 0;\n\t\tforeach ($reslist['fleet'] as $id => $ShipID)\n\t\t{\n\t\t\t$amount\t\t \t\t\t\t= max(0, round(HTTP::_GP('ship'.$ShipID, 0.0, 0.0)));\n\t\t\t\n\t\t\tif ($amount < 1 || $ShipID == 212) continue;\n\n\t\t\t$Fleet[$ShipID]\t\t\t\t= $amount;\n\t\t\t$FleetRoom\t\t\t   \t   += $pricelist[$ShipID]['capacity'] * $amount;\n\t\t}\n\t\t\n\t\t$FleetRoom\t*= 1 + $USER['factor']['ShipStorage'];\n\t\t\n\t\tif (empty($Fleet))\n\t\t\tFleetFunctions::GotoFleetPage();\n\t\n\t\t$FleetData\t= array(\n\t\t\t'fleetroom'\t\t\t=> floattostring($FleetRoom),\n\t\t\t'gamespeed'\t\t\t=> FleetFunctions::GetGameSpeedFactor(),\n\t\t\t'fleetspeedfactor'\t=> max(0, 1 + $USER['factor']['FlyTime']),\n\t\t\t'planet'\t\t\t=> array('galaxy' => $PLANET['galaxy'], 'system' => $PLANET['system'], 'planet' => $PLANET['planet'], 'planet_type' => $PLANET['planet_type']),\n\t\t\t'maxspeed'\t\t\t=> FleetFunctions::GetFleetMaxSpeed($Fleet, $USER),\n\t\t\t'ships'\t\t\t\t=> FleetFunctions::GetFleetShipInfo($Fleet, $USER),\n\t\t);\n\t\t\n\t\t$token\t\t= getRandomString();\n\t\t\n\t\t$_SESSION['fleet'][$token]\t= array(\n\t\t\t'time'\t\t=> TIMESTAMP,\n\t\t\t'fleet'\t\t=> $Fleet,\n\t\t\t'fleetRoom'\t=> $FleetRoom,\n\t\t);\n\n\t\t$shortcutList\t= $this->GetUserShotcut();\n\t\t$colonyList \t= $this->GetColonyList();\n\t\t$ACSList \t\t= $this->GetAvalibleACS();\n\t\t\n\t\tif(!empty($shortcutList)) {\n\t\t\t$shortcutAmount\t= max(array_keys($shortcutList));\n\t\t} else {\n\t\t\t$shortcutAmount\t= 0;\n\t\t}\n\t\t\n\t\t$this->tplObj->loadscript('flotten.js');\n\t\t$this->tplObj->execscript('updateVars();FleetTime();window.setInterval(\"FleetTime()\", 1000);');\n\t\t$this->tplObj->assign_vars(array(\n\t\t\t'token'\t\t\t=> $token,\n\t\t\t'mission'\t\t=> $mission,\n\t\t\t'shortcutList'\t=> $shortcutList,\n\t\t\t'shortcutMax'\t=> $shortcutAmount,\n\t\t\t'colonyList' \t=> $colonyList,\n\t\t\t'ACSList' \t\t=> $ACSList,\n\t\t\t'galaxy' \t\t=> $targetGalaxy,\n\t\t\t'system' \t\t=> $targetSystem,\n\t\t\t'planet' \t\t=> $targetPlanet,\n\t\t\t'type'\t\t\t=> $targetType,\n\t\t\t'speedSelect'\t=> FleetFunctions::$allowedSpeed,\n\t\t\t'typeSelect'   \t=> array(1 => $LNG['type_planet'][1], 2 => $LNG['type_planet'][2], 3 => $LNG['type_planet'][3]),\n\t\t\t'fleetdata'\t\t=> $FleetData,\n\t\t));\n\t\t\n\t\t$this->display('page.fleetStep1.default.tpl');\n\t}\n\t\n\tpublic function saveShortcuts()\n\t{\n\t\tglobal $USER, $LNG;\n\t\t\n\t\tif(!isset($_REQUEST['shortcut'])) {\n\t\t\t$this->sendJSON($LNG['fl_shortcut_saved']);\n\t\t}\n\t\t\n\t\t$Shortcut\t\t= array();\n\t\t$ShortcutData\t= $_REQUEST['shortcut'];\n\t\t$ShortcutUser\t= $this->GetUserShotcut();\n\t\tforeach($ShortcutData as $ID => $Data) {\n\t\t\tif(!isset($ShortcutUser[$ID])) {\n\t\t\t\tif(empty($Data['name']) || empty($Data['galaxy']) || empty($Data['system']) || empty($Data['planet'])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$GLOBALS['DATABASE']->query(\"INSERT INTO \".SHORTCUTS.\" \n\t\t\t\tSET ownerID = \".$USER['id'].\",\n\t\t\t\tname = '\".$GLOBALS['DATABASE']->sql_escape($Data['name']).\"', \n\t\t\t\tgalaxy = \".((int) $Data['galaxy']).\", \n\t\t\t\tsystem = \".((int) $Data['system']).\",\n\t\t\t\tplanet = \".((int) $Data['planet']).\",\n\t\t\t\ttype = \".((int) $Data['type']).\";\");\n\t\t\t} elseif(empty($Data['name'])) {\n\t\t\t\t$GLOBALS['DATABASE']->query(\"DELETE FROM \".SHORTCUTS.\" WHERE shortcutID = \".((int) $ID).\" AND ownerID = \".$USER['id'].\";\");\n\t\t\t} else {\n\t\t\t\t$Data['ownerID']\t\t= $USER['id'];\n\t\t\t\t$Data['shortcutID']\t\t= $ID;\n\t\t\t\tif($Data != $ShortcutUser[$ID]) {\n\t\t\t\t\t$GLOBALS['DATABASE']->query(\"UPDATE \".SHORTCUTS.\" \n\t\t\t\t\tSET name = '\".$GLOBALS['DATABASE']->sql_escape($Data['name']).\"', \n\t\t\t\t\tgalaxy = \".((int) $Data['galaxy']).\", \n\t\t\t\t\tsystem = \".((int) $Data['system']).\",\n\t\t\t\t\tplanet = \".((int) $Data['planet']).\",\n\t\t\t\t\ttype = \".((int) $Data['type']).\"\n\t\t\t\t\tWHERE shortcutID = \".((int) $ID).\" AND ownerID = \".$USER['id'].\";\");\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t$this->sendJSON($LNG['fl_shortcut_saved']);\n\t}\n\t\n\tprivate function GetColonyList()\n\t{\n\t\tglobal $PLANET, $USER;\n\t\t\n\t\t$ColonyList\t= array();\n\t\t\n\t\tforeach($USER['PLANETS'] as $CurPlanetID => $CurPlanet)\n\t\t{\n\t\t\tif ($PLANET['id'] == $CurPlanet['id'])\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t$ColonyList[] = array(\n\t\t\t\t'name'\t\t=> $CurPlanet['name'],\n\t\t\t\t'galaxy'\t=> $CurPlanet['galaxy'],\n\t\t\t\t'system'\t=> $CurPlanet['system'],\n\t\t\t\t'planet'\t=> $CurPlanet['planet'],\n\t\t\t\t'type'\t\t=> $CurPlanet['planet_type'],\n\t\t\t);\t\n\t\t}\n\t\t\t\n\t\treturn $ColonyList;\n\t}\n\t\n\tprivate function GetUserShotcut()\n\t{\n\t\tglobal $USER;\n\t\t\n\t\tif (!isModulAvalible(MODULE_SHORTCUTS))\n\t\t\treturn array();\n\t\t\t\n\t\t$ShortcutResult\t= $GLOBALS['DATABASE']->query(\"SELECT * FROM \".SHORTCUTS.\" WHERE ownerID = \".$USER['id'].\";\");\n\t\t\t\n\t\t$ShortcutList\t= array();\n\n\t\twhile($ShortcutRow = $GLOBALS['DATABASE']->fetch_array($ShortcutResult)) {\t\t\t\t\t\t\n\t\t\t$ShortcutList[$ShortcutRow['shortcutID']] = $ShortcutRow;\n\t\t}\n\t\t\n\t\t$GLOBALS['DATABASE']->free_result($ShortcutResult);\n\t\t\n\t\treturn $ShortcutList;\n\t}\n\t\n\tprivate function GetAvalibleACS()\n\t{\n\t\tglobal $USER, $CONF;\n\t\t\n\t\t$ACSResult \t= $GLOBALS['DATABASE']->query(\"SELECT acs.id, acs.name, planet.galaxy, planet.system, planet.planet, planet.planet_type \n\t\tFROM \".USERS_ACS.\"\n\t\tINNER JOIN \".AKS.\" acs ON acsID = acs.id\n\t\tINNER JOIN \".PLANETS.\" planet ON planet.id = acs.target \n\t\tWHERE userID = \".$USER['id'].\" AND \".Config::get('max_fleets_per_acs').\" > (SELECT COUNT(*) FROM \".FLEETS.\" WHERE fleet_group = acsID);\");\n\t\t\n\t\t$ACSList\t= array();\n\t\t\n\t\twhile($ACSRow = $GLOBALS['DATABASE']->fetch_array($ACSResult)) {\n\t\t\t$ACSList[]\t= $ACSRow;\n\t\t}\n\t\t\n\t\t$GLOBALS['DATABASE']->free_result($ACSResult);\n\t\t\n\t\treturn $ACSList;\n\t}\n\t\n\tfunction checkTarget()\n\t{\n\t\tglobal $PLANET, $LNG, $UNI, $CONF, $USER, $resource;\n\t\t$TargetGalaxy \t\t\t\t\t= HTTP::_GP('galaxy', 0);\n\t\t$TargetSystem \t\t\t\t\t= HTTP::_GP('system', 0);\n\t\t$TargetPlanet\t\t\t\t\t= HTTP::_GP('planet', 0);\n\t\t$TargetPlanettype \t\t\t\t= HTTP::_GP('planet_type', 1);\n\t\n\t\tif($TargetGalaxy == $PLANET['galaxy'] && $TargetSystem == $PLANET['system'] && $TargetPlanet == $PLANET['planet'] && $TargetPlanettype == $PLANET['planet_type'])\n\t\t{\n\t\t\t$this->sendJSON($LNG['fl_error_same_planet']);\n\t\t}\n\t\t\n\t\tif ($TargetPlanet != Config::get('max_planets') + 1) {\n\t\t\t$Data\t= $GLOBALS['DATABASE']->getFirstRow(\"SELECT u.id, u.urlaubs_modus, u.user_lastip, u.authattack, p.destruyed, p.der_metal, p.der_crystal, p.destruyed FROM \".USERS.\" as u, \".PLANETS.\" as p WHERE p.universe = \".$UNI.\" AND p.galaxy = \".$TargetGalaxy.\" AND p.system = \".$TargetSystem.\" AND p.planet = \".$TargetPlanet.\"  AND p.planet_type = '\".(($TargetPlanettype == 2) ? 1 : $TargetPlanettype).\"' AND u.id = p.id_owner;\");\n\n\t\t\tif ($TargetPlanettype == 3 && !isset($Data))\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_error_no_moon']);\n\t\t\t}\n\t\t\telseif ($TargetPlanettype != 2 && $Data['urlaubs_modus'])\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_in_vacation_player']);\n\t\t\t}\n\t\t\telseif ($Data['id'] != $USER['id'] && Config::get('adm_attack') == 1 && $Data['authattack'] > $USER['authlevel'])\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_admin_attack']);\n\t\t\t}\n\t\t\telseif ($Data['destruyed'] != 0)\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_error_not_avalible']);\n\t\t\t}\n\t\t\telseif($TargetPlanettype == 2 && $Data['der_metal'] == 0 && $Data['der_crystal'] == 0)\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_error_empty_derbis']);\n\t\t\t}\n\t\t\telseif(ENABLE_MULTIALERT && $USER['id'] != $Data['id'] && $USER['authlevel'] != AUTH_ADM && $USER['user_lastip'] == $Data['user_lastip'] && $GLOBALS['DATABASE']->getFirstCell(\"SELECT (SELECT COUNT(*) FROM \".MULTI.\" WHERE userID = \".$USER['id'].\") + (SELECT COUNT(*) FROM \".MULTI.\" WHERE userID = \".$Data['id'].\")\") != 2)\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_multi_alarm']);\n\t\t\t}\n\t\t} else {\n\t\t\tif ($USER[$resource[124]] == 0)\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_target_not_exists']);\n\t\t\t}\n\t\t\t\n\t\t\t$activeExpedition\t= FleetFunctions::GetCurrentFleets($USER['id'], 15);\n\n\t\t\tif ($activeExpedition >= FleetFunctions::getExpeditionLimit($USER))\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_no_expedition_slot']);\n\t\t\t}\n\t\t}\n\t\t$this->sendJSON('OK');\t\n\t}\n}", "<?php\n\n/**\n *  2Moons\n *  Copyright (C) 2012 Jan Kr\u00f6pke\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package 2Moons\n * @author Jan Kr\u00f6pke <info@2moons.cc>\n * @copyright 2012 Jan Kr\u00f6pke <info@2moons.cc>\n * @license http://www.gnu.org/licenses/gpl.html GNU GPLv3 License\n * @version 1.7.0 (2013-01-17)\n * @info $Id$\n * @link http://2moons.cc/\n */\n\nrequire_once(ROOT_PATH . 'includes/classes/class.FleetFunctions.php');\n\n\nclass ShowFleetTablePage extends AbstractPage\n{\n\tpublic static $requireModule = MODULE_FLEET_TABLE;\n\n\tfunction __construct() \n\t{\n\t\tparent::__construct();\n\t}\n\t\n\tpublic function createACS($fleetID, $fleetData) {\n\t\tglobal $USER;\n\t\t\n\t\t$rand \t\t\t= mt_rand(100000, 999999999);\n\t\t$acsName\t \t= 'AG'.$rand;\n\t\t$acsCreator\t\t= $USER['id'];\n\n\t\t$GLOBALS['DATABASE']->query(\"INSERT INTO \".AKS.\" SET\n\t\t\t\t\tname = '\".$GLOBALS['DATABASE']->sql_escape($acsName).\"',\n\t\t\t\t\tankunft = \".$fleetData['fleet_start_time'].\",\n\t\t\t\t\ttarget = \".$fleetData['fleet_end_id'].\";\");\n\t\t$acsID\t= $GLOBALS['DATABASE']->GetInsertID();\n\t\t\n\t\t$GLOBALS['DATABASE']->multi_query(\"INSERT INTO \".USERS_ACS.\" SET\n\t\t\t\t\tacsID = \".$acsID.\",\n\t\t\t\t\tuserID = \".$USER['id'].\";\n\t\t\t\t\tUPDATE \".FLEETS.\" SET\n\t\t\t\t\tfleet_group = \".$acsID.\"\n\t\t\t\t\tWHERE fleet_id = \".$fleetID.\";\");\n\t\t\t\t\t\n\t\treturn array(\n\t\t\t'name' \t\t\t=> $acsName,\n\t\t\t'id' \t\t\t=> $acsID,\n\t\t);\n\t}\n\t\n\tpublic function loadACS($fleetID, $fleetData) {\n\t\tglobal $USER;\n\t\t\n\t\t$acsResult = $GLOBALS['DATABASE']->query(\"SELECT id, name \n\t\tFROM \".USERS_ACS.\" \n\t\tINNER JOIN \".AKS.\" ON acsID = id \n\t\tWHERE userID = \".$USER['id'].\" AND acsID = \".$fleetData['fleet_group'].\";\");\n\t\t\n\t\treturn $GLOBALS['DATABASE']->fetch_array($acsResult);\n\t}\n\t\n\tpublic function getACSPageData($fleetID)\n\t{\n\t\tglobal $USER, $PLANET, $LNG, $UNI;\n\t\t\n\t\t$fleetResult\t= $GLOBALS['DATABASE']->query(\"SELECT fleet_start_time, fleet_end_id, fleet_group, fleet_mess \n\t\t\t\t\t\t\t\t\t  FROM \".FLEETS.\"\n\t\t\t\t\t\t\t\t\t  WHERE fleet_id = \".$fleetID.\";\");\n\n\t\tif ($GLOBALS['DATABASE']->numRows($fleetResult) != 1)\n\t\t\treturn array();\n\t\t\t\t\t\n\t\t$fleetData \t\t= $GLOBALS['DATABASE']->fetch_array($fleetResult);\n\t\t$GLOBALS['DATABASE']->free_result($fleetResult);\n\t\t\n\t\tif ($fleetData['fleet_mess'] == 1 || $fleetData['fleet_start_time'] <= TIMESTAMP)\n\t\t\treturn array();\n\t\t\t\t\n\t\tif ($fleetData['fleet_group'] == 0)\n\t\t\t$acsData\t= $this->createACS($fleetID, $fleetData);\n\t\telse\n\t\t\t$acsData\t= $this->loadACS($fleetID, $fleetData);\n\t\n\t\tif (empty($acsData))\n\t\t\treturn array();\n\t\t\t\n\t\t$acsName\t= HTTP::_GP('acsName', '', UTF8_SUPPORT);\n\t\tif(!empty($acsName)) {\n\t\t\tif(!CheckName($acsName))\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_acs_newname_alphanum']);\n\t\t\t}\n\t\t\t\n\t\t\t$GLOBALS['DATABASE']->query(\"UPDATE \".AKS.\" SET name = '\".$GLOBALS['DATABASE']->sql_escape($acsName).\"' WHERE id = \".$acsData['id'].\";\");\n\t\t\t$this->sendJSON(false);\n\t\t}\n\t\t\n\t\t$invitedUsers\t= array();\n\t\t$userResult \t= $GLOBALS['DATABASE']->query(\"SELECT id, username\n\t\t\t\t\t\t\t\t\t  FROM \".USERS_ACS.\"\n\t\t\t\t\t\t\t\t\t  INNER JOIN \".USERS.\" ON userID = id \n\t\t\t\t\t\t\t\t\t  WHERE acsID = \".$acsData['id'].\";\");\n\t\t\n\t\twhile($userRow = $GLOBALS['DATABASE']->fetch_array($userResult))\n\t\t{\n\t\t\t$invitedUsers[$userRow['id']]\t= $userRow['username'];\n\t\t}\n\n\t\t$GLOBALS['DATABASE']->free_result($userResult);\n\t\t\n\t\t$newUser\t\t= HTTP::_GP('username', '', UTF8_SUPPORT);\n\t\t$statusMessage\t= \"\";\n\t\tif(!empty($newUser))\n\t\t{\n\t\t\t$newUserID\t\t\t\t= $GLOBALS['DATABASE']->getFirstCell(\"SELECT id FROM \".USERS.\" WHERE universe = \".$UNI.\" AND username = '\".$GLOBALS['DATABASE']->sql_escape($newUser).\"';\");\n\t\t\t\t\n\t\t\tif(empty($newUserID)) {\n\t\t\t\t$statusMessage\t\t\t= $LNG['fl_player'].\" \".$newUser.\" \".$LNG['fl_dont_exist'];\n\t\t\t} elseif(isset($invitedUsers[$newUserID])) {\n\t\t\t\t$statusMessage\t\t\t= $LNG['fl_player'].\" \".$newUser.\" \".$LNG['fl_already_invited'];\n\t\t\t} else {\n\t\t\t\t$statusMessage\t\t\t= $LNG['fl_player'].\" \".$newUser.\" \".$LNG['fl_add_to_attack'];\n\t\t\t\t\n\t\t\t\t$GLOBALS['DATABASE']->query(\"INSERT INTO \".USERS_ACS.\" SET acsID = \".$acsData['id'].\", userID = \".$newUserID.\";\");\n\t\t\t\t\n\t\t\t\t$invitedUsers[$newUserID]\t= $newUser;\n\t\t\t\t\n\t\t\t\t$inviteTitle\t\t\t= $LNG['fl_acs_invitation_title'];\n\t\t\t\t$inviteMessage \t\t\t= $LNG['fl_player'] . $USER['username'] . $LNG['fl_acs_invitation_message'];\n\t\t\t\tSendSimpleMessage($newUserID, $USER['id'], TIMESTAMP, 1, $USER['username'], $inviteTitle, $inviteMessage);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array(\n\t\t\t'invitedUsers'\t=> $invitedUsers,\n\t\t\t'acsName'\t\t=> $acsData['name'],\n\t\t\t'mainFleetID'\t=> $fleetID,\n\t\t\t'statusMessage'\t=> $statusMessage,\n\t\t);\n\t}\n\t\n\tpublic function show()\n\t{\n\t\tglobal $USER, $PLANET, $reslist, $resource, $LNG;\n\t\t\n\t\t$acsData\t\t\t= array();\n\t\t$FleetID\t\t\t= HTTP::_GP('fleetID', 0);\n\t\t$GetAction\t\t\t= HTTP::_GP('action', \"\");\n\t\n\t\t$this->tplObj->loadscript('flotten.js');\n\t\t\n\t\tif(!empty($FleetID) && !IsVacationMode($USER))\n\t\t{\n\t\t\tswitch($GetAction){\n\t\t\t\tcase \"sendfleetback\":\n\t\t\t\t\tFleetFunctions::SendFleetBack($USER, $FleetID);\n\t\t\t\tbreak;\n\t\t\t\tcase \"acs\":\n\t\t\t\t\t$acsData\t= $this->getACSPageData($FleetID);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t$techExpedition      = $USER[$resource[124]];\n\n\t\tif ($techExpedition >= 1)\n\t\t{\n\t\t\t$activeExpedition   = FleetFunctions::GetCurrentFleets($USER['id'], 15);\n\t\t\t$maxExpedition \t\t= floor(sqrt($techExpedition));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$activeExpedition \t= 0;\n\t\t\t$maxExpedition \t\t= 0;\n\t\t}\n\n\t\t$maxFleetSlots\t= FleetFunctions::GetMaxFleetSlots($USER);\n\n\t\t$targetGalaxy\t= HTTP::_GP('galaxy', $PLANET['galaxy']);\n\t\t$targetSystem\t= HTTP::_GP('system', $PLANET['system']);\n\t\t$targetPlanet\t= HTTP::_GP('planet', $PLANET['planet']);\n\t\t$targetType\t\t= HTTP::_GP('planettype', $PLANET['planet_type']);\n\t\t$targetMission\t= HTTP::_GP('target_mission', 0);\n\t\t\n\t\t$fleetResult \t\t= $GLOBALS['DATABASE']->query(\"SELECT * FROM \".FLEETS.\" WHERE fleet_owner = \".$USER['id'].\" AND fleet_mission <> 10 ORDER BY fleet_end_time ASC;\");\n\t\t$activeFleetSlots\t= $GLOBALS['DATABASE']->numRows($fleetResult);\n\n\t\t$FlyingFleetList\t= array();\n\t\t\n\t\twhile ($fleetsRow = $GLOBALS['DATABASE']->fetch_array($fleetResult))\n\t\t{\n\t\t\t$fleet = explode(\";\", $fleetsRow['fleet_array']);\n\n            $FleetList  = array();\n\n\t\t\tforeach ($fleet as $shipDetail)\n\t\t\t{\n\t\t\t\tif (empty($shipDetail))\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$ship = explode(\",\", $shipDetail);\n\t\t\t\t\n\t\t\t\t$FleetList[$fleetsRow['fleet_id']][$ship[0]] = $ship[1];\n\t\t\t}\n\t\t\t\n\t\t\tif($fleetsRow['fleet_mission'] == 4 && $fleetsRow['fleet_mess'] == FLEET_OUTWARD)\n\t\t\t{\n\t\t\t\t$returnTime\t= $fleetsRow['fleet_start_time'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$returnTime\t= $fleetsRow['fleet_end_time'];\n\t\t\t}\n\t\t\t\n\t\t\t$FlyingFleetList[]\t= array(\n\t\t\t\t'id'\t\t\t=> $fleetsRow['fleet_id'],\n\t\t\t\t'mission'\t\t=> $fleetsRow['fleet_mission'],\n\t\t\t\t'state'\t\t\t=> $fleetsRow['fleet_mess'],\n\t\t\t\t'startGalaxy'\t=> $fleetsRow['fleet_start_galaxy'],\n\t\t\t\t'startSystem'\t=> $fleetsRow['fleet_start_system'],\n\t\t\t\t'startPlanet'\t=> $fleetsRow['fleet_start_planet'],\n\t\t\t\t'startTime'\t\t=> _date($LNG['php_tdformat'], $fleetsRow['fleet_start_time'], $USER['timezone']),\n\t\t\t\t'endGalaxy'\t\t=> $fleetsRow['fleet_end_galaxy'],\n\t\t\t\t'endSystem'\t\t=> $fleetsRow['fleet_end_system'],\n\t\t\t\t'endPlanet'\t\t=> $fleetsRow['fleet_end_planet'],\n\t\t\t\t'endTime'\t\t=> _date($LNG['php_tdformat'], $fleetsRow['fleet_end_time'], $USER['timezone']),\n\t\t\t\t'amount'\t\t=> pretty_number($fleetsRow['fleet_amount']),\n\t\t\t\t'returntime'\t=> $returnTime,\n\t\t\t\t'resttime'\t\t=> $returnTime - TIMESTAMP,\n\t\t\t\t'FleetList'\t\t=> $FleetList[$fleetsRow['fleet_id']],\n\t\t\t);\n\t\t}\n\n\t\t$GLOBALS['DATABASE']->free_result($fleetResult);\n\t\t\n\t\t$FleetsOnPlanet\t= array();\n\t\t\n\t\tforeach($reslist['fleet'] as $FleetID)\n\t\t{\n\t\t\tif ($PLANET[$resource[$FleetID]] == 0)\n\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t$FleetsOnPlanet[]\t= array(\n\t\t\t\t'id'\t=> $FleetID,\n\t\t\t\t'speed'\t=> FleetFunctions::GetFleetMaxSpeed($FleetID, $USER),\n\t\t\t\t'count'\t=> $PLANET[$resource[$FleetID]],\n\t\t\t);\n\t\t}\n\t\t\n\t\t$this->tplObj->assign_vars(array(\n\t\t\t'FleetsOnPlanet'\t\t=> $FleetsOnPlanet,\n\t\t\t'FlyingFleetList'\t\t=> $FlyingFleetList,\n\t\t\t'activeExpedition'\t\t=> $activeExpedition,\n\t\t\t'maxExpedition'\t\t\t=> $maxExpedition,\n\t\t\t'activeFleetSlots'\t\t=> $activeFleetSlots,\n\t\t\t'maxFleetSlots'\t\t\t=> $maxFleetSlots,\n\t\t\t'targetGalaxy'\t\t\t=> $targetGalaxy,\n\t\t\t'targetSystem'\t\t\t=> $targetSystem,\n\t\t\t'targetPlanet'\t\t\t=> $targetPlanet,\n\t\t\t'targetType'\t\t\t=> $targetType,\n\t\t\t'targetMission'\t\t\t=> $targetMission,\n\t\t\t'acsData'\t\t\t\t=> $acsData,\n\t\t\t'isVacation'\t\t\t=> IsVacationMode($USER),\n\t\t\t'bonusAttack'\t\t\t=> $USER[$resource[109]] * 10 + (1 + abs($USER['factor']['Attack'])) * 100,\n\t\t\t'bonusDefensive'\t\t=> $USER[$resource[110]] * 10 + (1 + abs($USER['factor']['Defensive'])) * 100,\n\t\t\t'bonusShield'\t\t\t=> $USER[$resource[111]] * 10 + (1 + abs($USER['factor']['Shield'])) * 100,\n\t\t\t'bonusCombustion'\t\t=> $USER[$resource[115]] * 10,\n\t\t\t'bonusImpulse'\t\t\t=> $USER[$resource[117]] * 20,\n\t\t\t'bonusHyperspace'\t\t=> $USER[$resource[118]] * 30,\n\t\t));\n\t\t\n\t\t$this->display('page.fleetTable.default.tpl');\n\t}\n}", "<?php\n\n/**\n *  2Moons\n *  Copyright (C) 2012 Jan Kr\u00f6pke\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package 2Moons\n * @author Jan Kr\u00f6pke <info@2moons.cc>\n * @copyright 2012 Jan Kr\u00f6pke <info@2moons.cc>\n * @license http://www.gnu.org/licenses/gpl.html GNU GPLv3 License\n * @version 1.7.0 (2013-01-17)\n * @info $Id$\n * @link http://2moons.cc/\n */\n\nrequire_once(ROOT_PATH . 'includes/classes/class.FleetFunctions.php');\nrequire_once(ROOT_PATH . 'includes/classes/class.GalaxyRows.php');\n\nclass ShowGalaxyPage extends AbstractPage\n{\n    public static $requireModule = MODULE_RESEARCH;\n\n\tfunction __construct() \n\t{\n\t\tparent::__construct();\n\t}\n\t\n\tpublic function show()\n\t{\n\t\tglobal $USER, $PLANET, $resource, $LNG, $reslist, $CONF;\n\n\t\t$action \t\t= HTTP::_GP('action', '');\n\t\t$galaxyLeft\t\t= HTTP::_GP('galaxyLeft', '');\n\t\t$galaxyRight\t= HTTP::_GP('galaxyRight', '');\n\t\t$systemLeft\t\t= HTTP::_GP('systemLeft', '');\n\t\t$systemRight\t= HTTP::_GP('systemRight', '');\n\t\t$galaxy\t\t\t= min(max(HTTP::_GP('galaxy', $PLANET['galaxy']), 1), Config::get('max_galaxy'));\n\t\t$system\t\t\t= min(max(HTTP::_GP('system', $PLANET['system']), 1), Config::get('max_system'));\n\t\t$planet\t\t\t= min(max(HTTP::_GP('planet', $PLANET['planet']), 1), Config::get('max_planets'));\n\t\t$type\t\t\t= HTTP::_GP('type', 1);\n\t\t$current\t\t= HTTP::_GP('current', 0);\n\t\t\t\n        if (!empty($galaxyLeft))\n            $galaxy\t= max($galaxy - 1, 1);\n        elseif (!empty($galaxyRight))\n            $galaxy\t= min($galaxy + 1, Config::get('max_galaxy'));\n\n        if (!empty($systemLeft))\n            $system\t= max($system - 1, 1);\n        elseif (!empty($systemRight))\n            $system\t= min($system + 1, Config::get('max_system'));\n\n\t\tif ($galaxy != $PLANET['galaxy'] || $system != $PLANET['system'])\n\t\t{\n\t\t\tif($PLANET['deuterium'] < Config::get('deuterium_cost_galaxy'))\n\t\t\t{\t\n\t\t\t\t$this->printMessage($LNG['gl_no_deuterium_to_view_galaxy'], array(\"game.php?page=galaxy\", 3));\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\t$PLANET['deuterium']\t-= Config::get('deuterium_cost_galaxy');\n            }\n\t\t}\n\n        $targetDefensive    = $reslist['defense'];\n        $targetDefensive[]\t= 502;\n\t\t$MissleSelector[0]\t= $LNG['gl_all_defenses'];\n\t\t\n\t\tforeach($targetDefensive  as $Element)\n\t\t{\t\n\t\t\t$MissleSelector[$Element] = $LNG['tech'][$Element];\n\t\t}\n\t\t\t\t\n\t\t$galaxyRows\t= new GalaxyRows;\n\t\t$galaxyRows->setGalaxy($galaxy);\n\t\t$galaxyRows->setSystem($system);\n\t\t$Result\t= $galaxyRows->getGalaxyData();\n\n        $this->tplObj->loadscript('galaxy.js');\n        $this->tplObj->assign_vars(array(\n\t\t\t'GalaxyRows'\t\t\t\t=> $Result,\n\t\t\t'planetcount'\t\t\t\t=> sprintf($LNG['gl_populed_planets'], count($Result)),\n\t\t\t'action'\t\t\t\t\t=> $action,\n\t\t\t'galaxy'\t\t\t\t\t=> $galaxy,\n\t\t\t'system'\t\t\t\t\t=> $system,\n\t\t\t'planet'\t\t\t\t\t=> $planet,\n\t\t\t'type'\t\t\t\t\t\t=> $type,\n\t\t\t'current'\t\t\t\t\t=> $current,\n\t\t\t'maxfleetcount'\t\t\t\t=> FleetFunctions::GetCurrentFleets($USER['id']),\n\t\t\t'fleetmax'\t\t\t\t\t=> FleetFunctions::GetMaxFleetSlots($USER),\n\t\t\t'currentmip'\t\t\t\t=> $PLANET[$resource[503]],\n\t\t\t'grecyclers'   \t\t\t\t=> $PLANET[$resource[219]],\n\t\t\t'recyclers'   \t\t\t\t=> $PLANET[$resource[209]],\n\t\t\t'spyprobes'   \t\t\t\t=> $PLANET[$resource[210]],\n\t\t\t'missile_count'\t\t\t\t=> sprintf($LNG['gl_missil_to_launch'], $PLANET[$resource[503]]),\n\t\t\t'spyShips'\t\t\t\t\t=> array(210 => $USER['spio_anz']),\n\t\t\t'settings_fleetactions'\t\t=> $USER['settings_fleetactions'],\n\t\t\t'current_galaxy'\t\t\t=> $PLANET['galaxy'],\n\t\t\t'current_system'\t\t\t=> $PLANET['system'],\n\t\t\t'current_planet'\t\t\t=> $PLANET['planet'],\n\t\t\t'planet_type' \t\t\t\t=> $PLANET['planet_type'],\n            'max_planets'               => Config::get('max_planets'),\n\t\t\t'MissleSelector'\t\t\t=> $MissleSelector,\n\t\t\t'ShortStatus'\t\t\t\t=> array(\n\t\t\t\t'vacation'\t\t\t\t\t=> $LNG['gl_short_vacation'],\n\t\t\t\t'banned'\t\t\t\t\t=> $LNG['gl_short_ban'],\n\t\t\t\t'inactive'\t\t\t\t\t=> $LNG['gl_short_inactive'],\n\t\t\t\t'longinactive'\t\t\t\t=> $LNG['gl_short_long_inactive'],\n\t\t\t\t'noob'\t\t\t\t\t\t=> $LNG['gl_short_newbie'],\n\t\t\t\t'strong'\t\t\t\t\t=> $LNG['gl_short_strong'],\n\t\t\t\t'enemy'\t\t\t\t\t\t=> $LNG['gl_short_enemy'],\n\t\t\t\t'friend'\t\t\t\t\t=> $LNG['gl_short_friend'],\n\t\t\t\t'member'\t\t\t\t\t=> $LNG['gl_short_member'],\n\t\t\t),\n\t\t));\n\t\t\n\t\t$this->display('page.galaxy.default.tpl');\n\t}\n}", "<?php\n\n/**\n *  2Moons\n *  Copyright (C) 2012 Jan Kr\u00f6pke\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package 2Moons\n * @author Jan Kr\u00f6pke <info@2moons.cc>\n * @copyright 2012 Jan Kr\u00f6pke <info@2moons.cc>\n * @license http://www.gnu.org/licenses/gpl.html GNU GPLv3 License\n * @version 1.7.0 (2013-01-17)\n * @info $Id$\n * @link http://2moons.cc/\n */\n\n\nclass ShowInformationPage extends AbstractPage\n{\n\tpublic static $requireModule = MODULE_INFORMATION;\n\t\n\tprotected $disableEcoSystem = true;\n\n\tfunction __construct() \n\t{\n\t\tparent::__construct();\n\t}\n\t\t\n\tstatic function getNextJumpWaitTime($lastTime)\n\t{\n\t\tglobal $CONF;\n\t\t\n\t\treturn $lastTime + Config::get('gate_wait_time');\n\t}\n\n\tpublic function sendFleet()\n\t{\n\t\tglobal $PLANET, $USER, $resource, $LNG, $reslist;\n\n\t\t$NextJumpTime = self::getNextJumpWaitTime($PLANET['last_jump_time']);\n\t\t\n\t\tif (TIMESTAMP < $NextJumpTime) {\n\t\t\t$this->sendJSON(array('message' => $LNG['in_jump_gate_already_used'].' '.pretty_time($NextJumpTime - TIMESTAMP), 'error' => true));\n\t\t}\n\t\t\n\t\t$TargetPlanet = HTTP::_GP('jmpto', $PLANET['id']);\n\t\t$TargetGate   = $GLOBALS['DATABASE']->getFirstRow(\"SELECT id, last_jump_time FROM \".PLANETS.\" WHERE id = \".$TargetPlanet.\" AND id_owner = \".$USER['id'].\" AND sprungtor > 0;\");\n\n\t\tif (!isset($TargetGate) || $TargetPlanet == $PLANET['id']) {\n\t\t\t$this->sendJSON(array('message' => $LNG['in_jump_gate_doesnt_have_one'], 'error' => true));\n\t\t}\n\t\t\n\t\t$NextJumpTime   = self::getNextJumpWaitTime($TargetGate['last_jump_time']);\n\t\t\t\t\n\t\tif (TIMESTAMP < $NextJumpTime) {\n\t\t\t$this->sendJSON(array('message' => $LNG['in_jump_gate_not_ready_target'].' '.pretty_time($NextJumpTime - TIMESTAMP), 'error' => true));\n\t\t}\n\t\t\n\t\t$ShipArray\t\t= array();\n\t\t$SubQueryOri\t= \"\";\n\t\t$SubQueryDes\t= \"\";\n\t\t$Ships\t\t\t= HTTP::_GP('ship', array());\n\t\t\n\t\tforeach($reslist['fleet'] as $Ship)\n\t\t{\n\t\t\tif(!isset($Ships[$Ship]) || $Ship == 212)\n\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t$ShipArray[$Ship]\t= max(0, min($Ships[$Ship], $PLANET[$resource[$Ship]]));\n\t\t\t\t\t\n\t\t\tif(empty($ShipArray[$Ship]))\n\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\n\t\t\t$SubQueryOri \t\t.= $resource[$Ship].\" = \".$resource[$Ship].\" - \".$ShipArray[$Ship].\", \";\n\t\t\t$SubQueryDes \t\t.= $resource[$Ship].\" = \".$resource[$Ship].\" + \".$ShipArray[$Ship].\", \";\n\t\t\t$PLANET[$resource[$Ship]] -= $ShipArray[$Ship];\n\t\t}\n\n\t\tif (empty($SubQueryOri)) {\n\t\t\t$this->sendJSON(array('message' => $LNG['in_jump_gate_error_data'], 'error' => true));\n\t\t}\n\t\t\n\t\t$JumpTime\t= TIMESTAMP;\n\n\t\t$SQL  = \"UPDATE \".PLANETS.\" SET \";\n\t\t$SQL .= $SubQueryOri;\n\t\t$SQL .= \"last_jump_time = \".$JumpTime.\" \";\n\t\t$SQL .= \"WHERE \";\n\t\t$SQL .= \"id = \". $PLANET['id'].\";\";\n\t\t$SQL .= \"UPDATE \".PLANETS.\" SET \";\n\t\t$SQL .= $SubQueryDes;\n\t\t$SQL .= \"last_jump_time = \".$JumpTime.\" \";\n\t\t$SQL .= \"WHERE \";\n\t\t$SQL .= \"id = \".$TargetPlanet.\";\";\n\t\t$GLOBALS['DATABASE']->multi_query($SQL);\n\n\t\t$PLANET['last_jump_time'] \t= $JumpTime;\n\t\t$NextJumpTime\t= self::getNextJumpWaitTime($PLANET['last_jump_time']);\n\t\t$this->sendJSON(array('message' => sprintf($LNG['in_jump_gate_done'], pretty_time($NextJumpTime - TIMESTAMP)), 'error' => false));\n\t}\n\n\tprivate function getAvalibleFleets()\n\t{\n\t\tglobal $reslist, $resource, $PLANET;\n\n        $fleetList  = array();\n\n\t\tforeach($reslist['fleet'] as $Ship)\n\t\t{\n\t\t\tif ($Ship == 212 || $PLANET[$resource[$Ship]] <= 0)\n\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t$fleetList[$Ship]\t= $PLANET[$resource[$Ship]];\n\t\t}\n\t\t\t\t\n\t\treturn $fleetList;\n\t}\n\n\tpublic function destroyMissiles()\n\t{\n\t\tglobal $resource, $PLANET;\n\t\t\n\t\t$Missle\t= HTTP::_GP('missile', array());\n\t\t$PLANET[$resource[502]]\t-= max(0, min($Missle[502], $PLANET[$resource[502]]));\n\t\t$PLANET[$resource[503]]\t-= max(0, min($Missle[503], $PLANET[$resource[503]]));\n\t\t\n\t\t$GLOBALS['DATABASE']->query(\"UPDATE \".PLANETS.\" SET \".$resource[502].\" = \".$PLANET[$resource[502]].\", \".$resource[503].\" = \".$PLANET[$resource[503]].\" WHERE id = \".$PLANET['id'].\";\");\n\t\t\n\t\t$this->sendJSON(array($PLANET[$resource[502]], $PLANET[$resource[503]]));\n\t}\n\n\tprivate function getTargetGates()\n\t{\n\t\tglobal $resource, $USER, $PLANET;\n\t\t\t\t\t\t\t\t\n\t\t$Order = $USER['planet_sort_order'] == 1 ? \"DESC\" : \"ASC\" ;\n\t\t$Sort  = $USER['planet_sort'];\n\n        switch($Sort) {\n            case 1:\n                $OrderBy\t= \"galaxy, system, planet, planet_type \". $Order;\n                break;\n            case 2:\n                $OrderBy\t= \"name \". $Order;\n                break;\n            default:\n                $OrderBy\t= \"id \". $Order;\n                break;\n        }\n\t\t\t\t\n\t\t\t\t\n        $moonResult\t= $GLOBALS['DATABASE']->query(\"SELECT id, name, galaxy, system, planet, last_jump_time, \".$resource[43].\" FROM \".PLANETS.\" WHERE id != \".$PLANET['id'].\" AND id_owner = \". $USER['id'] .\" AND planet_type = '3' AND \".$resource[43].\" > 0 ORDER BY \".$OrderBy.\";\");\n        $moonList\t= array();\n\n        while($moonRow = $GLOBALS['DATABASE']->fetch_array($moonResult)) {\n\t\t\t$NextJumpTime\t\t\t\t= self::getNextJumpWaitTime($moonRow['last_jump_time']);\n\t\t\t$moonList[$moonRow['id']]\t= '['.$moonRow['galaxy'].':'.$moonRow['system'].':'.$moonRow['planet'].'] '.$moonRow['name'].(TIMESTAMP < $NextJumpTime ? ' ('.pretty_time($NextJumpTime - TIMESTAMP).')':'');\n\t\t}\n\t\t\n\t\t$GLOBALS['DATABASE']->free_result($moonResult);\n\n\t\treturn $moonList;\n\t}\n\n\tpublic function show()\n\t{\n\t\tglobal $USER, $PLANET, $dpath, $LNG, $resource, $pricelist, $reslist, $CombatCaps, $ProdGrid, $CONF;\n\n\t\t$elementID \t= HTTP::_GP('id', 0);\n\t\t\n\t\t$this->setWindow('popup');\n\t\t$this->initTemplate();\n\t\t\n\t\t$productionTable\t= array();\n\t\t$FleetInfo\t\t\t= array();\n\t\t$MissileList\t\t= array();\n\t\t$gateData\t\t\t= array();\n\n\t\t$CurrentLevel\t\t= 0;\n\t\t\n\t\t$ressIDs\t\t\t= array_merge(array(), $reslist['resstype'][1], $reslist['resstype'][2]);\n\t\t\n\t\tif(in_array($elementID, $reslist['prod']) && in_array($elementID, $reslist['build']))\n\t\t{\n\t\t\t$BuildLevelFactor\t= 10;\n\t\t\t$BuildTemp       \t= $PLANET['temp_max'];\n\t\t\t$CurrentLevel\t\t= $PLANET[$resource[$elementID]];\n\t\t\t$BuildEnergy\t\t= $USER[$resource[113]];\n\t\t\t$BuildLevel     \t= max($CurrentLevel, 0);\n\t\t\t$BuildStartLvl   \t= max($CurrentLevel - 2, 0);\n\t\t\t\t\t\t\n\t\t\tfor($BuildLevel = $BuildStartLvl; $BuildLevel < $BuildStartLvl + 15; $BuildLevel++)\n\t\t\t{\n\t\t\t\tforeach($ressIDs as $ID) \n\t\t\t\t{\n\t\t\t\t\tif(!isset($ProdGrid[$elementID]['production'][$ID]))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\t$Production\t= eval(ResourceUpdate::getProd($ProdGrid[$elementID]['production'][$ID]));\n\t\t\t\t\t\n\t\t\t\t\tif($ID != 911) {\n\t\t\t\t\t\t$Production\t*= Config::get('resource_multiplier');\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$productionTable['production'][$BuildLevel][$ID]\t= $Production;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$productionTable['usedResource']\t= array_keys($productionTable['production'][$BuildStartLvl]);\n\t\t}\n\t\telseif(in_array($elementID, $reslist['storage']))\n\t\t{\n\t\t\t$BuildLevelFactor\t= 10;\n\t\t\t$BuildTemp       \t= $PLANET['temp_max'];\n\t\t\t$CurrentLevel\t\t= $PLANET[$resource[$elementID]];\n\t\t\t$BuildEnergy\t\t= $USER[$resource[113]];\n\t\t\t$BuildLevel     \t= max($CurrentLevel, 0);\n\t\t\t$BuildStartLvl   \t= max($CurrentLevel - 2, 0);\n\t\t\t\t\t\t\n\t\t\tfor($BuildLevel = $BuildStartLvl; $BuildLevel < $BuildStartLvl + 15; $BuildLevel++)\n\t\t\t{\n\t\t\t\tforeach($ressIDs as $ID) \n\t\t\t\t{\n\t\t\t\t\tif(!isset($ProdGrid[$elementID]['storage'][$ID]))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\t$productionTable['storage'][$BuildLevel][$ID]\t= round(eval(ResourceUpdate::getProd($ProdGrid[$elementID]['storage'][$ID]))) * Config::get('resource_multiplier') * STORAGE_FACTOR;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$productionTable['usedResource']\t= array_keys($productionTable['storage'][$BuildStartLvl]);\n\t\t}\n\t\telseif(in_array($elementID, $reslist['fleet']))\n\t\t{\n\t\t\t$FleetInfo\t= array(\n\t\t\t\t'structure'\t\t=> $pricelist[$elementID]['cost'][901] + $pricelist[$elementID]['cost'][902],\n\t\t\t\t'tech'\t\t\t=> $pricelist[$elementID]['tech'],\n\t\t\t\t'attack'\t\t=> $CombatCaps[$elementID]['attack'],\n\t\t\t\t'shield'\t\t=> $CombatCaps[$elementID]['shield'],\n\t\t\t\t'capacity'\t\t=> $pricelist[$elementID]['capacity'],\n\t\t\t\t'speed1'\t\t=> $pricelist[$elementID]['speed'],\n\t\t\t\t'speed2'\t\t=> $pricelist[$elementID]['speed2'],\n\t\t\t\t'consumption1'\t=> $pricelist[$elementID]['consumption'],\n\t\t\t\t'consumption2'\t=> $pricelist[$elementID]['consumption2'],\n\t\t\t\t'rapidfire'\t\t=> array(\n\t\t\t\t\t'from'\t=> array(),\n\t\t\t\t\t'to'\t=> array(),\n\t\t\t\t),\n\t\t\t);\n\t\t\t\t\n\t\t\t$fleetIDs\t= array_merge($reslist['fleet'], $reslist['defense']);\n\t\t\t\n\t\t\tforeach($fleetIDs as $fleetID)\n\t\t\t{\n\t\t\t\tif (isset($CombatCaps[$elementID]['sd']) && !empty($CombatCaps[$elementID]['sd'][$fleetID])) {\n\t\t\t\t\t$FleetInfo['rapidfire']['to'][$fleetID] = $CombatCaps[$elementID]['sd'][$fleetID];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (isset($CombatCaps[$fleetID]['sd']) && !empty($CombatCaps[$fleetID]['sd'][$elementID])) {\n\t\t\t\t\t$FleetInfo['rapidfire']['from'][$fleetID] = $CombatCaps[$fleetID]['sd'][$elementID];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telseif (in_array($elementID, $reslist['defense']))\n\t\t{\n\t\t\t$FleetInfo\t= array(\n\t\t\t\t'structure'\t\t=> $pricelist[$elementID]['cost'][901] + $pricelist[$elementID]['cost'][902],\n\t\t\t\t'attack'\t\t=> $CombatCaps[$elementID]['attack'],\n\t\t\t\t'shield'\t\t=> $CombatCaps[$elementID]['shield'],\n\t\t\t\t'rapidfire'\t\t=> array(\n\t\t\t\t\t'from'\t=> array(),\n\t\t\t\t\t'to'\t=> array(),\n\t\t\t\t),\n\t\t\t);\n\t\t\t\t\n\t\t\t$fleetIDs\t= array_merge($reslist['fleet'], $reslist['defense']);\n\t\t\t\n\t\t\tforeach($fleetIDs as $fleetID)\n\t\t\t{\n\t\t\t\tif (isset($CombatCaps[$elementID]['sd']) && !empty($CombatCaps[$elementID]['sd'][$fleetID])) {\n\t\t\t\t\t$FleetInfo['rapidfire']['to'][$fleetID] = $CombatCaps[$elementID]['sd'][$fleetID];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (isset($CombatCaps[$fleetID]['sd']) && !empty($CombatCaps[$fleetID]['sd'][$elementID])) {\n\t\t\t\t\t$FleetInfo['rapidfire']['from'][$fleetID] = $CombatCaps[$fleetID]['sd'][$elementID];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif($elementID == 43 && $PLANET[$resource[43]] > 0)\n\t\t{\n\t\t\t$this->tplObj->loadscript('gate.js');\n\t\t\t$nextTime\t= self::getNextJumpWaitTime($PLANET['last_jump_time']);\n\t\t\t$gateData\t= array(\n\t\t\t\t'nextTime'\t=> _date($LNG['php_tdformat'], $nextTime, $USER['timezone']),\n\t\t\t\t'restTime'\t=> max(0, $nextTime - TIMESTAMP),\n\t\t\t\t'startLink'\t=> $PLANET['name'].' '.strip_tags(BuildPlanetAdressLink($PLANET)),\n\t\t\t\t'gateList' \t=> $this->getTargetGates(),\n\t\t\t\t'fleetList'\t=> $this->getAvalibleFleets(),\n\t\t\t);\n\t\t}\n\t\telseif($elementID == 44 && $PLANET[$resource[44]] > 0)\n\t\t{\t\t\t\t\t\t\t\t\n\t\t\t$MissileList\t= array(\n\t\t\t\t502\t=> $PLANET[$resource[502]],\n\t\t\t\t503\t=> $PLANET[$resource[503]]\n\t\t\t);\n\t\t}\n\n\t\t$this->tplObj->assign_vars(array(\t\t\n\t\t\t'elementID'\t\t\t=> $elementID,\n\t\t\t'productionTable'\t=> $productionTable,\n\t\t\t'CurrentLevel'\t\t=> $CurrentLevel,\n\t\t\t'MissileList'\t\t=> $MissileList,\n\t\t\t'Bonus'\t\t\t\t=> BuildFunctions::getAvalibleBonus($elementID),\n\t\t\t'FleetInfo'\t\t\t=> $FleetInfo,\n\t\t\t'gateData'\t\t\t=> $gateData,\n\t\t));\n\t\t\n\t\t$this->display('page.infomation.default.tpl');\n\t}\n}"], "fixing_code": ["<?php\n\n/**\n *  2Moons\n *  Copyright (C) 2012 Jan Kr\u00f6pke\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package 2Moons\n * @author Jan Kr\u00f6pke <info@2moons.cc>\n * @copyright 2012 Jan Kr\u00f6pke <info@2moons.cc>\n * @license http://www.gnu.org/licenses/gpl.html GNU GPLv3 License\n * @version 1.7.0 (2013-01-17)\n * @info $Id$\n * @link http://2moons.cc/\n */\n\nrequire_once(ROOT_PATH . 'includes/classes/class.FleetFunctions.php');\n\nclass ShowFleetStep1Page extends AbstractPage\n{\n\tpublic static $requireModule = MODULE_FLEET_TABLE;\n\n\tfunction __construct() \n\t{\n\t\tparent::__construct();\n\t}\n\t\n\tpublic function show()\n\t{\n\t\tglobal $USER, $PLANET, $resource, $pricelist, $reslist, $LNG;\n\t\t\n\t\t$targetGalaxy \t\t\t= HTTP::_GP('galaxy', (int) $PLANET['galaxy']);\n\t\t$targetSystem \t\t\t= HTTP::_GP('system', (int) $PLANET['system']);\n\t\t$targetPlanet\t\t\t= HTTP::_GP('planet', (int) $PLANET['planet']);\n\t\t$targetType \t\t\t= HTTP::_GP('type', (int) $PLANET['planet_type']);\n\t\t\n\t\t$mission\t\t\t\t= HTTP::_GP('target_mission', 0);\n\t\t\t\t\n\t\t$Fleet\t\t= array();\n\t\t$FleetRoom\t= 0;\n\t\tforeach ($reslist['fleet'] as $id => $ShipID)\n\t\t{\n\t\t\t$amount\t\t \t\t\t\t= max(0, round(HTTP::_GP('ship'.$ShipID, 0.0, 0.0)));\n\t\t\t\n\t\t\tif ($amount < 1 || $ShipID == 212) continue;\n\n\t\t\t$Fleet[$ShipID]\t\t\t\t= $amount;\n\t\t\t$FleetRoom\t\t\t   \t   += $pricelist[$ShipID]['capacity'] * $amount;\n\t\t}\n\t\t\n\t\t$FleetRoom\t*= 1 + $USER['factor']['ShipStorage'];\n\t\t\n\t\tif (empty($Fleet))\n\t\t\tFleetFunctions::GotoFleetPage();\n\t\n\t\t$FleetData\t= array(\n\t\t\t'fleetroom'\t\t\t=> floattostring($FleetRoom),\n\t\t\t'gamespeed'\t\t\t=> FleetFunctions::GetGameSpeedFactor(),\n\t\t\t'fleetspeedfactor'\t=> max(0, 1 + $USER['factor']['FlyTime']),\n\t\t\t'planet'\t\t\t=> array('galaxy' => $PLANET['galaxy'], 'system' => $PLANET['system'], 'planet' => $PLANET['planet'], 'planet_type' => $PLANET['planet_type']),\n\t\t\t'maxspeed'\t\t\t=> FleetFunctions::GetFleetMaxSpeed($Fleet, $USER),\n\t\t\t'ships'\t\t\t\t=> FleetFunctions::GetFleetShipInfo($Fleet, $USER),\n\t\t);\n\t\t\n\t\t$token\t\t= getRandomString();\n\t\t\n\t\t$_SESSION['fleet'][$token]\t= array(\n\t\t\t'time'\t\t=> TIMESTAMP,\n\t\t\t'fleet'\t\t=> $Fleet,\n\t\t\t'fleetRoom'\t=> $FleetRoom,\n\t\t);\n\n\t\t$shortcutList\t= $this->GetUserShotcut();\n\t\t$colonyList \t= $this->GetColonyList();\n\t\t$ACSList \t\t= $this->GetAvalibleACS();\n\t\t\n\t\tif(!empty($shortcutList)) {\n\t\t\t$shortcutAmount\t= max(array_keys($shortcutList));\n\t\t} else {\n\t\t\t$shortcutAmount\t= 0;\n\t\t}\n\t\t\n\t\t$this->tplObj->loadscript('flotten.js');\n\t\t$this->tplObj->execscript('updateVars();FleetTime();window.setInterval(\"FleetTime()\", 1000);');\n\t\t$this->tplObj->assign_vars(array(\n\t\t\t'token'\t\t\t=> $token,\n\t\t\t'mission'\t\t=> $mission,\n\t\t\t'shortcutList'\t=> $shortcutList,\n\t\t\t'shortcutMax'\t=> $shortcutAmount,\n\t\t\t'colonyList' \t=> $colonyList,\n\t\t\t'ACSList' \t\t=> $ACSList,\n\t\t\t'galaxy' \t\t=> $targetGalaxy,\n\t\t\t'system' \t\t=> $targetSystem,\n\t\t\t'planet' \t\t=> $targetPlanet,\n\t\t\t'type'\t\t\t=> $targetType,\n\t\t\t'speedSelect'\t=> FleetFunctions::$allowedSpeed,\n\t\t\t'typeSelect'   \t=> array(1 => $LNG['type_planet'][1], 2 => $LNG['type_planet'][2], 3 => $LNG['type_planet'][3]),\n\t\t\t'fleetdata'\t\t=> $FleetData,\n\t\t));\n\t\t\n\t\t$this->display('page.fleetStep1.default.tpl');\n\t}\n\t\n\tpublic function saveShortcuts()\n\t{\n\t\tglobal $USER, $LNG;\n\t\t\n\t\tif(!isset($_REQUEST['shortcut'])) {\n\t\t\t$this->sendJSON($LNG['fl_shortcut_saved']);\n\t\t}\n\t\t\n\t\t$Shortcut\t\t= array();\n\t\t$ShortcutData\t= $_REQUEST['shortcut'];\n\t\t$ShortcutUser\t= $this->GetUserShotcut();\n\t\tforeach($ShortcutData as $ID => $Data) {\n\t\t\tif(!isset($ShortcutUser[$ID])) {\n\t\t\t\tif(empty($Data['name']) || empty($Data['galaxy']) || empty($Data['system']) || empty($Data['planet'])) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$GLOBALS['DATABASE']->query(\"INSERT INTO \".SHORTCUTS.\" \n\t\t\t\tSET ownerID = \".$USER['id'].\",\n\t\t\t\tname = '\".$GLOBALS['DATABASE']->sql_escape($Data['name']).\"', \n\t\t\t\tgalaxy = \".((int) $Data['galaxy']).\", \n\t\t\t\tsystem = \".((int) $Data['system']).\",\n\t\t\t\tplanet = \".((int) $Data['planet']).\",\n\t\t\t\ttype = \".((int) $Data['type']).\";\");\n\t\t\t} elseif(empty($Data['name'])) {\n\t\t\t\t$GLOBALS['DATABASE']->query(\"DELETE FROM \".SHORTCUTS.\" WHERE shortcutID = \".((int) $ID).\" AND ownerID = \".$USER['id'].\";\");\n\t\t\t} else {\n\t\t\t\t$Data['ownerID']\t\t= $USER['id'];\n\t\t\t\t$Data['shortcutID']\t\t= $ID;\n\t\t\t\tif($Data != $ShortcutUser[$ID]) {\n\t\t\t\t\t$GLOBALS['DATABASE']->query(\"UPDATE \".SHORTCUTS.\" \n\t\t\t\t\tSET name = '\".$GLOBALS['DATABASE']->sql_escape($Data['name']).\"', \n\t\t\t\t\tgalaxy = \".((int) $Data['galaxy']).\", \n\t\t\t\t\tsystem = \".((int) $Data['system']).\",\n\t\t\t\t\tplanet = \".((int) $Data['planet']).\",\n\t\t\t\t\ttype = \".((int) $Data['type']).\"\n\t\t\t\t\tWHERE shortcutID = \".((int) $ID).\" AND ownerID = \".$USER['id'].\";\");\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\t$this->sendJSON($LNG['fl_shortcut_saved']);\n\t}\n\t\n\tprivate function GetColonyList()\n\t{\n\t\tglobal $PLANET, $USER;\n\t\t\n\t\t$ColonyList\t= array();\n\t\t\n\t\tforeach($USER['PLANETS'] as $CurPlanetID => $CurPlanet)\n\t\t{\n\t\t\tif ($PLANET['id'] == $CurPlanet['id'])\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t$ColonyList[] = array(\n\t\t\t\t'name'\t\t=> $CurPlanet['name'],\n\t\t\t\t'galaxy'\t=> $CurPlanet['galaxy'],\n\t\t\t\t'system'\t=> $CurPlanet['system'],\n\t\t\t\t'planet'\t=> $CurPlanet['planet'],\n\t\t\t\t'type'\t\t=> $CurPlanet['planet_type'],\n\t\t\t);\t\n\t\t}\n\t\t\t\n\t\treturn $ColonyList;\n\t}\n\t\n\tprivate function GetUserShotcut()\n\t{\n\t\tglobal $USER;\n\t\t\n\t\tif (!isModulAvalible(MODULE_SHORTCUTS))\n\t\t\treturn array();\n\t\t\t\n\t\t$ShortcutResult\t= $GLOBALS['DATABASE']->query(\"SELECT * FROM \".SHORTCUTS.\" WHERE ownerID = \".$USER['id'].\";\");\n\t\t\t\n\t\t$ShortcutList\t= array();\n\n\t\twhile($ShortcutRow = $GLOBALS['DATABASE']->fetch_array($ShortcutResult)) {\t\t\t\t\t\t\n\t\t\t$ShortcutList[$ShortcutRow['shortcutID']] = $ShortcutRow;\n\t\t}\n\t\t\n\t\t$GLOBALS['DATABASE']->free_result($ShortcutResult);\n\t\t\n\t\treturn $ShortcutList;\n\t}\n\t\n\tprivate function GetAvalibleACS()\n\t{\n\t\tglobal $USER, $CONF;\n\t\t\n\t\t$ACSResult \t= $GLOBALS['DATABASE']->query(\"SELECT acs.id, acs.name, planet.galaxy, planet.system, planet.planet, planet.planet_type \n\t\tFROM \".USERS_ACS.\"\n\t\tINNER JOIN \".AKS.\" acs ON acsID = acs.id\n\t\tINNER JOIN \".PLANETS.\" planet ON planet.id = acs.target \n\t\tWHERE userID = \".$USER['id'].\" AND \".Config::get('max_fleets_per_acs').\" > (SELECT COUNT(*) FROM \".FLEETS.\" WHERE fleet_group = acsID);\");\n\t\t\n\t\t$ACSList\t= array();\n\t\t\n\t\twhile($ACSRow = $GLOBALS['DATABASE']->fetch_array($ACSResult)) {\n\t\t\t$ACSList[]\t= $ACSRow;\n\t\t}\n\t\t\n\t\t$GLOBALS['DATABASE']->free_result($ACSResult);\n\t\t\n\t\treturn $ACSList;\n\t}\n\t\n\tfunction checkTarget()\n\t{\n\t\tglobal $PLANET, $LNG, $UNI, $CONF, $USER, $resource;\n\t\t$TargetGalaxy \t\t\t\t\t= HTTP::_GP('galaxy', 0);\n\t\t$TargetSystem \t\t\t\t\t= HTTP::_GP('system', 0);\n\t\t$TargetPlanet\t\t\t\t\t= HTTP::_GP('planet', 0);\n\t\t$TargetPlanettype \t\t\t\t= HTTP::_GP('planet_type', 1);\n\t\n\t\tif($TargetGalaxy == $PLANET['galaxy'] && $TargetSystem == $PLANET['system'] && $TargetPlanet == $PLANET['planet'] && $TargetPlanettype == $PLANET['planet_type'])\n\t\t{\n\t\t\t$this->sendJSON($LNG['fl_error_same_planet']);\n\t\t}\n\t\t\n\t\tif ($TargetPlanet != Config::get('max_planets') + 1) {\n\t\t\t$Data\t= $GLOBALS['DATABASE']->getFirstRow(\"SELECT u.id, u.urlaubs_modus, u.user_lastip, u.authattack, p.destruyed, p.der_metal, p.der_crystal, p.destruyed FROM \".USERS.\" as u, \".PLANETS.\" as p WHERE p.universe = \".$UNI.\" AND p.galaxy = \".$TargetGalaxy.\" AND p.system = \".$TargetSystem.\" AND p.planet = \".$TargetPlanet.\"  AND p.planet_type = '\".(($TargetPlanettype == 2) ? 1 : $TargetPlanettype).\"' AND u.id = p.id_owner;\");\n\n\t\t\tif ($TargetPlanettype == 3 && !isset($Data))\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_error_no_moon']);\n\t\t\t}\n\t\t\telseif ($TargetPlanettype != 2 && $Data['urlaubs_modus'])\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_in_vacation_player']);\n\t\t\t}\n\t\t\telseif ($Data['id'] != $USER['id'] && Config::get('adm_attack') == 1 && $Data['authattack'] > $USER['authlevel'])\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_admin_attack']);\n\t\t\t}\n\t\t\telseif ($Data['destruyed'] != 0)\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_error_not_avalible']);\n\t\t\t}\n\t\t\telseif($TargetPlanettype == 2 && $Data['der_metal'] == 0 && $Data['der_crystal'] == 0)\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_error_empty_derbis']);\n\t\t\t}\n\t\t\telseif(ENABLE_MULTIALERT && $USER['id'] != $Data['id'] && $USER['authlevel'] != AUTH_ADM && $USER['user_lastip'] == $Data['user_lastip'] && $GLOBALS['DATABASE']->getFirstCell(\"SELECT (SELECT COUNT(*) FROM \".MULTI.\" WHERE userID = \".$USER['id'].\") + (SELECT COUNT(*) FROM \".MULTI.\" WHERE userID = \".$Data['id'].\")\") != 2)\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_multi_alarm']);\n\t\t\t}\n\t\t} else {\n\t\t\tif ($USER[$resource[124]] == 0)\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_target_not_exists']);\n\t\t\t}\n\t\t\t\n\t\t\t$activeExpedition\t= FleetFunctions::GetCurrentFleets($USER['id'], 15);\n\n\t\t\tif ($activeExpedition >= FleetFunctions::getExpeditionLimit($USER))\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_no_expedition_slot']);\n\t\t\t}\n\t\t}\n\t\t$this->sendJSON('OK');\t\n\t}\n}", "<?php\n\n/**\n *  2Moons\n *  Copyright (C) 2012 Jan Kr\u00f6pke\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package 2Moons\n * @author Jan Kr\u00f6pke <info@2moons.cc>\n * @copyright 2012 Jan Kr\u00f6pke <info@2moons.cc>\n * @license http://www.gnu.org/licenses/gpl.html GNU GPLv3 License\n * @version 1.7.0 (2013-01-17)\n * @info $Id$\n * @link http://2moons.cc/\n */\n\nrequire_once(ROOT_PATH . 'includes/classes/class.FleetFunctions.php');\n\n\nclass ShowFleetTablePage extends AbstractPage\n{\n\tpublic static $requireModule = MODULE_FLEET_TABLE;\n\n\tfunction __construct() \n\t{\n\t\tparent::__construct();\n\t}\n\t\n\tpublic function createACS($fleetID, $fleetData) {\n\t\tglobal $USER;\n\t\t\n\t\t$rand \t\t\t= mt_rand(100000, 999999999);\n\t\t$acsName\t \t= 'AG'.$rand;\n\t\t$acsCreator\t\t= $USER['id'];\n\n\t\t$GLOBALS['DATABASE']->query(\"INSERT INTO \".AKS.\" SET\n\t\t\t\t\tname = '\".$GLOBALS['DATABASE']->sql_escape($acsName).\"',\n\t\t\t\t\tankunft = \".$fleetData['fleet_start_time'].\",\n\t\t\t\t\ttarget = \".$fleetData['fleet_end_id'].\";\");\n\t\t$acsID\t= $GLOBALS['DATABASE']->GetInsertID();\n\t\t\n\t\t$GLOBALS['DATABASE']->multi_query(\"INSERT INTO \".USERS_ACS.\" SET\n\t\t\t\t\tacsID = \".$acsID.\",\n\t\t\t\t\tuserID = \".$USER['id'].\";\n\t\t\t\t\tUPDATE \".FLEETS.\" SET\n\t\t\t\t\tfleet_group = \".$acsID.\"\n\t\t\t\t\tWHERE fleet_id = \".$fleetID.\";\");\n\t\t\t\t\t\n\t\treturn array(\n\t\t\t'name' \t\t\t=> $acsName,\n\t\t\t'id' \t\t\t=> $acsID,\n\t\t);\n\t}\n\t\n\tpublic function loadACS($fleetID, $fleetData) {\n\t\tglobal $USER;\n\t\t\n\t\t$acsResult = $GLOBALS['DATABASE']->query(\"SELECT id, name \n\t\tFROM \".USERS_ACS.\" \n\t\tINNER JOIN \".AKS.\" ON acsID = id \n\t\tWHERE userID = \".$USER['id'].\" AND acsID = \".$fleetData['fleet_group'].\";\");\n\t\t\n\t\treturn $GLOBALS['DATABASE']->fetch_array($acsResult);\n\t}\n\t\n\tpublic function getACSPageData($fleetID)\n\t{\n\t\tglobal $USER, $PLANET, $LNG, $UNI;\n\t\t\n\t\t$fleetResult\t= $GLOBALS['DATABASE']->query(\"SELECT fleet_start_time, fleet_end_id, fleet_group, fleet_mess \n\t\t\t\t\t\t\t\t\t  FROM \".FLEETS.\"\n\t\t\t\t\t\t\t\t\t  WHERE fleet_id = \".$fleetID.\";\");\n\n\t\tif ($GLOBALS['DATABASE']->numRows($fleetResult) != 1)\n\t\t\treturn array();\n\t\t\t\t\t\n\t\t$fleetData \t\t= $GLOBALS['DATABASE']->fetch_array($fleetResult);\n\t\t$GLOBALS['DATABASE']->free_result($fleetResult);\n\t\t\n\t\tif ($fleetData['fleet_mess'] == 1 || $fleetData['fleet_start_time'] <= TIMESTAMP)\n\t\t\treturn array();\n\t\t\t\t\n\t\tif ($fleetData['fleet_group'] == 0)\n\t\t\t$acsData\t= $this->createACS($fleetID, $fleetData);\n\t\telse\n\t\t\t$acsData\t= $this->loadACS($fleetID, $fleetData);\n\t\n\t\tif (empty($acsData))\n\t\t\treturn array();\n\t\t\t\n\t\t$acsName\t= HTTP::_GP('acsName', '', UTF8_SUPPORT);\n\t\tif(!empty($acsName)) {\n\t\t\tif(!CheckName($acsName))\n\t\t\t{\n\t\t\t\t$this->sendJSON($LNG['fl_acs_newname_alphanum']);\n\t\t\t}\n\t\t\t\n\t\t\t$GLOBALS['DATABASE']->query(\"UPDATE \".AKS.\" SET name = '\".$GLOBALS['DATABASE']->sql_escape($acsName).\"' WHERE id = \".$acsData['id'].\";\");\n\t\t\t$this->sendJSON(false);\n\t\t}\n\t\t\n\t\t$invitedUsers\t= array();\n\t\t$userResult \t= $GLOBALS['DATABASE']->query(\"SELECT id, username\n\t\t\t\t\t\t\t\t\t  FROM \".USERS_ACS.\"\n\t\t\t\t\t\t\t\t\t  INNER JOIN \".USERS.\" ON userID = id \n\t\t\t\t\t\t\t\t\t  WHERE acsID = \".$acsData['id'].\";\");\n\t\t\n\t\twhile($userRow = $GLOBALS['DATABASE']->fetch_array($userResult))\n\t\t{\n\t\t\t$invitedUsers[$userRow['id']]\t= $userRow['username'];\n\t\t}\n\n\t\t$GLOBALS['DATABASE']->free_result($userResult);\n\t\t\n\t\t$newUser\t\t= HTTP::_GP('username', '', UTF8_SUPPORT);\n\t\t$statusMessage\t= \"\";\n\t\tif(!empty($newUser))\n\t\t{\n\t\t\t$newUserID\t\t\t\t= $GLOBALS['DATABASE']->getFirstCell(\"SELECT id FROM \".USERS.\" WHERE universe = \".$UNI.\" AND username = '\".$GLOBALS['DATABASE']->sql_escape($newUser).\"';\");\n\t\t\t\t\n\t\t\tif(empty($newUserID)) {\n\t\t\t\t$statusMessage\t\t\t= $LNG['fl_player'].\" \".$newUser.\" \".$LNG['fl_dont_exist'];\n\t\t\t} elseif(isset($invitedUsers[$newUserID])) {\n\t\t\t\t$statusMessage\t\t\t= $LNG['fl_player'].\" \".$newUser.\" \".$LNG['fl_already_invited'];\n\t\t\t} else {\n\t\t\t\t$statusMessage\t\t\t= $LNG['fl_player'].\" \".$newUser.\" \".$LNG['fl_add_to_attack'];\n\t\t\t\t\n\t\t\t\t$GLOBALS['DATABASE']->query(\"INSERT INTO \".USERS_ACS.\" SET acsID = \".$acsData['id'].\", userID = \".$newUserID.\";\");\n\t\t\t\t\n\t\t\t\t$invitedUsers[$newUserID]\t= $newUser;\n\t\t\t\t\n\t\t\t\t$inviteTitle\t\t\t= $LNG['fl_acs_invitation_title'];\n\t\t\t\t$inviteMessage \t\t\t= $LNG['fl_player'] . $USER['username'] . $LNG['fl_acs_invitation_message'];\n\t\t\t\tSendSimpleMessage($newUserID, $USER['id'], TIMESTAMP, 1, $USER['username'], $inviteTitle, $inviteMessage);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array(\n\t\t\t'invitedUsers'\t=> $invitedUsers,\n\t\t\t'acsName'\t\t=> $acsData['name'],\n\t\t\t'mainFleetID'\t=> $fleetID,\n\t\t\t'statusMessage'\t=> $statusMessage,\n\t\t);\n\t}\n\t\n\tpublic function show()\n\t{\n\t\tglobal $USER, $PLANET, $reslist, $resource, $LNG;\n\t\t\n\t\t$acsData\t\t\t= array();\n\t\t$FleetID\t\t\t= HTTP::_GP('fleetID', 0);\n\t\t$GetAction\t\t\t= HTTP::_GP('action', \"\");\n\t\n\t\t$this->tplObj->loadscript('flotten.js');\n\t\t\n\t\tif(!empty($FleetID) && !IsVacationMode($USER))\n\t\t{\n\t\t\tswitch($GetAction){\n\t\t\t\tcase \"sendfleetback\":\n\t\t\t\t\tFleetFunctions::SendFleetBack($USER, $FleetID);\n\t\t\t\tbreak;\n\t\t\t\tcase \"acs\":\n\t\t\t\t\t$acsData\t= $this->getACSPageData($FleetID);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t$techExpedition      = $USER[$resource[124]];\n\n\t\tif ($techExpedition >= 1)\n\t\t{\n\t\t\t$activeExpedition   = FleetFunctions::GetCurrentFleets($USER['id'], 15);\n\t\t\t$maxExpedition \t\t= floor(sqrt($techExpedition));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$activeExpedition \t= 0;\n\t\t\t$maxExpedition \t\t= 0;\n\t\t}\n\n\t\t$maxFleetSlots\t= FleetFunctions::GetMaxFleetSlots($USER);\n\n\t\t$targetGalaxy\t= HTTP::_GP('galaxy', (int) $PLANET['galaxy']);\n\t\t$targetSystem\t= HTTP::_GP('system', (int) $PLANET['system']);\n\t\t$targetPlanet\t= HTTP::_GP('planet', (int) $PLANET['planet']);\n\t\t$targetType\t\t= HTTP::_GP('planettype', (int) $PLANET['planet_type']);\n\t\t$targetMission\t= HTTP::_GP('target_mission', 0);\n\t\t\n\t\t$fleetResult \t\t= $GLOBALS['DATABASE']->query(\"SELECT * FROM \".FLEETS.\" WHERE fleet_owner = \".$USER['id'].\" AND fleet_mission <> 10 ORDER BY fleet_end_time ASC;\");\n\t\t$activeFleetSlots\t= $GLOBALS['DATABASE']->numRows($fleetResult);\n\n\t\t$FlyingFleetList\t= array();\n\t\t\n\t\twhile ($fleetsRow = $GLOBALS['DATABASE']->fetch_array($fleetResult))\n\t\t{\n\t\t\t$fleet = explode(\";\", $fleetsRow['fleet_array']);\n\n            $FleetList  = array();\n\n\t\t\tforeach ($fleet as $shipDetail)\n\t\t\t{\n\t\t\t\tif (empty($shipDetail))\n\t\t\t\t\tcontinue;\n\n\t\t\t\t$ship = explode(\",\", $shipDetail);\n\t\t\t\t\n\t\t\t\t$FleetList[$fleetsRow['fleet_id']][$ship[0]] = $ship[1];\n\t\t\t}\n\t\t\t\n\t\t\tif($fleetsRow['fleet_mission'] == 4 && $fleetsRow['fleet_mess'] == FLEET_OUTWARD)\n\t\t\t{\n\t\t\t\t$returnTime\t= $fleetsRow['fleet_start_time'];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$returnTime\t= $fleetsRow['fleet_end_time'];\n\t\t\t}\n\t\t\t\n\t\t\t$FlyingFleetList[]\t= array(\n\t\t\t\t'id'\t\t\t=> $fleetsRow['fleet_id'],\n\t\t\t\t'mission'\t\t=> $fleetsRow['fleet_mission'],\n\t\t\t\t'state'\t\t\t=> $fleetsRow['fleet_mess'],\n\t\t\t\t'startGalaxy'\t=> $fleetsRow['fleet_start_galaxy'],\n\t\t\t\t'startSystem'\t=> $fleetsRow['fleet_start_system'],\n\t\t\t\t'startPlanet'\t=> $fleetsRow['fleet_start_planet'],\n\t\t\t\t'startTime'\t\t=> _date($LNG['php_tdformat'], $fleetsRow['fleet_start_time'], $USER['timezone']),\n\t\t\t\t'endGalaxy'\t\t=> $fleetsRow['fleet_end_galaxy'],\n\t\t\t\t'endSystem'\t\t=> $fleetsRow['fleet_end_system'],\n\t\t\t\t'endPlanet'\t\t=> $fleetsRow['fleet_end_planet'],\n\t\t\t\t'endTime'\t\t=> _date($LNG['php_tdformat'], $fleetsRow['fleet_end_time'], $USER['timezone']),\n\t\t\t\t'amount'\t\t=> pretty_number($fleetsRow['fleet_amount']),\n\t\t\t\t'returntime'\t=> $returnTime,\n\t\t\t\t'resttime'\t\t=> $returnTime - TIMESTAMP,\n\t\t\t\t'FleetList'\t\t=> $FleetList[$fleetsRow['fleet_id']],\n\t\t\t);\n\t\t}\n\n\t\t$GLOBALS['DATABASE']->free_result($fleetResult);\n\t\t\n\t\t$FleetsOnPlanet\t= array();\n\t\t\n\t\tforeach($reslist['fleet'] as $FleetID)\n\t\t{\n\t\t\tif ($PLANET[$resource[$FleetID]] == 0)\n\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t$FleetsOnPlanet[]\t= array(\n\t\t\t\t'id'\t=> $FleetID,\n\t\t\t\t'speed'\t=> FleetFunctions::GetFleetMaxSpeed($FleetID, $USER),\n\t\t\t\t'count'\t=> $PLANET[$resource[$FleetID]],\n\t\t\t);\n\t\t}\n\t\t\n\t\t$this->tplObj->assign_vars(array(\n\t\t\t'FleetsOnPlanet'\t\t=> $FleetsOnPlanet,\n\t\t\t'FlyingFleetList'\t\t=> $FlyingFleetList,\n\t\t\t'activeExpedition'\t\t=> $activeExpedition,\n\t\t\t'maxExpedition'\t\t\t=> $maxExpedition,\n\t\t\t'activeFleetSlots'\t\t=> $activeFleetSlots,\n\t\t\t'maxFleetSlots'\t\t\t=> $maxFleetSlots,\n\t\t\t'targetGalaxy'\t\t\t=> $targetGalaxy,\n\t\t\t'targetSystem'\t\t\t=> $targetSystem,\n\t\t\t'targetPlanet'\t\t\t=> $targetPlanet,\n\t\t\t'targetType'\t\t\t=> $targetType,\n\t\t\t'targetMission'\t\t\t=> $targetMission,\n\t\t\t'acsData'\t\t\t\t=> $acsData,\n\t\t\t'isVacation'\t\t\t=> IsVacationMode($USER),\n\t\t\t'bonusAttack'\t\t\t=> $USER[$resource[109]] * 10 + (1 + abs($USER['factor']['Attack'])) * 100,\n\t\t\t'bonusDefensive'\t\t=> $USER[$resource[110]] * 10 + (1 + abs($USER['factor']['Defensive'])) * 100,\n\t\t\t'bonusShield'\t\t\t=> $USER[$resource[111]] * 10 + (1 + abs($USER['factor']['Shield'])) * 100,\n\t\t\t'bonusCombustion'\t\t=> $USER[$resource[115]] * 10,\n\t\t\t'bonusImpulse'\t\t\t=> $USER[$resource[117]] * 20,\n\t\t\t'bonusHyperspace'\t\t=> $USER[$resource[118]] * 30,\n\t\t));\n\t\t\n\t\t$this->display('page.fleetTable.default.tpl');\n\t}\n}", "<?php\n\n/**\n *  2Moons\n *  Copyright (C) 2012 Jan Kr\u00f6pke\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package 2Moons\n * @author Jan Kr\u00f6pke <info@2moons.cc>\n * @copyright 2012 Jan Kr\u00f6pke <info@2moons.cc>\n * @license http://www.gnu.org/licenses/gpl.html GNU GPLv3 License\n * @version 1.7.0 (2013-01-17)\n * @info $Id$\n * @link http://2moons.cc/\n */\n\nrequire_once(ROOT_PATH . 'includes/classes/class.FleetFunctions.php');\nrequire_once(ROOT_PATH . 'includes/classes/class.GalaxyRows.php');\n\nclass ShowGalaxyPage extends AbstractPage\n{\n    public static $requireModule = MODULE_RESEARCH;\n\n\tfunction __construct() \n\t{\n\t\tparent::__construct();\n\t}\n\t\n\tpublic function show()\n\t{\n\t\tglobal $USER, $PLANET, $resource, $LNG, $reslist, $CONF;\n\n\t\t$action \t\t= HTTP::_GP('action', '');\n\t\t$galaxyLeft\t\t= HTTP::_GP('galaxyLeft', '');\n\t\t$galaxyRight\t= HTTP::_GP('galaxyRight', '');\n\t\t$systemLeft\t\t= HTTP::_GP('systemLeft', '');\n\t\t$systemRight\t= HTTP::_GP('systemRight', '');\n\t\t$galaxy\t\t\t= min(max(HTTP::_GP('galaxy', (int) $PLANET['galaxy']), 1), Config::get('max_galaxy'));\n\t\t$system\t\t\t= min(max(HTTP::_GP('system', (int) $PLANET['system']), 1), Config::get('max_system'));\n\t\t$planet\t\t\t= min(max(HTTP::_GP('planet', (int) $PLANET['planet']), 1), Config::get('max_planets'));\n\t\t$type\t\t\t= HTTP::_GP('type', 1);\n\t\t$current\t\t= HTTP::_GP('current', 0);\n\t\t\n        if (!empty($galaxyLeft))\n            $galaxy\t= max($galaxy - 1, 1);\n        elseif (!empty($galaxyRight))\n            $galaxy\t= min($galaxy + 1, Config::get('max_galaxy'));\n\n        if (!empty($systemLeft))\n            $system\t= max($system - 1, 1);\n        elseif (!empty($systemRight))\n            $system\t= min($system + 1, Config::get('max_system'));\n\n\t\tif ($galaxy != $PLANET['galaxy'] || $system != $PLANET['system'])\n\t\t{\n\t\t\tif($PLANET['deuterium'] < Config::get('deuterium_cost_galaxy'))\n\t\t\t{\t\n\t\t\t\t$this->printMessage($LNG['gl_no_deuterium_to_view_galaxy'], array(\"game.php?page=galaxy\", 3));\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\t$PLANET['deuterium']\t-= Config::get('deuterium_cost_galaxy');\n            }\n\t\t}\n\n        $targetDefensive    = $reslist['defense'];\n        $targetDefensive[]\t= 502;\n\t\t$MissleSelector[0]\t= $LNG['gl_all_defenses'];\n\t\t\n\t\tforeach($targetDefensive  as $Element)\n\t\t{\t\n\t\t\t$MissleSelector[$Element] = $LNG['tech'][$Element];\n\t\t}\n\t\t\t\t\n\t\t$galaxyRows\t= new GalaxyRows;\n\t\t$galaxyRows->setGalaxy($galaxy);\n\t\t$galaxyRows->setSystem($system);\n\t\t$Result\t= $galaxyRows->getGalaxyData();\n\n        $this->tplObj->loadscript('galaxy.js');\n        $this->tplObj->assign_vars(array(\n\t\t\t'GalaxyRows'\t\t\t\t=> $Result,\n\t\t\t'planetcount'\t\t\t\t=> sprintf($LNG['gl_populed_planets'], count($Result)),\n\t\t\t'action'\t\t\t\t\t=> $action,\n\t\t\t'galaxy'\t\t\t\t\t=> $galaxy,\n\t\t\t'system'\t\t\t\t\t=> $system,\n\t\t\t'planet'\t\t\t\t\t=> $planet,\n\t\t\t'type'\t\t\t\t\t\t=> $type,\n\t\t\t'current'\t\t\t\t\t=> $current,\n\t\t\t'maxfleetcount'\t\t\t\t=> FleetFunctions::GetCurrentFleets($USER['id']),\n\t\t\t'fleetmax'\t\t\t\t\t=> FleetFunctions::GetMaxFleetSlots($USER),\n\t\t\t'currentmip'\t\t\t\t=> $PLANET[$resource[503]],\n\t\t\t'grecyclers'   \t\t\t\t=> $PLANET[$resource[219]],\n\t\t\t'recyclers'   \t\t\t\t=> $PLANET[$resource[209]],\n\t\t\t'spyprobes'   \t\t\t\t=> $PLANET[$resource[210]],\n\t\t\t'missile_count'\t\t\t\t=> sprintf($LNG['gl_missil_to_launch'], $PLANET[$resource[503]]),\n\t\t\t'spyShips'\t\t\t\t\t=> array(210 => $USER['spio_anz']),\n\t\t\t'settings_fleetactions'\t\t=> $USER['settings_fleetactions'],\n\t\t\t'current_galaxy'\t\t\t=> $PLANET['galaxy'],\n\t\t\t'current_system'\t\t\t=> $PLANET['system'],\n\t\t\t'current_planet'\t\t\t=> $PLANET['planet'],\n\t\t\t'planet_type' \t\t\t\t=> $PLANET['planet_type'],\n            'max_planets'               => Config::get('max_planets'),\n\t\t\t'MissleSelector'\t\t\t=> $MissleSelector,\n\t\t\t'ShortStatus'\t\t\t\t=> array(\n\t\t\t\t'vacation'\t\t\t\t\t=> $LNG['gl_short_vacation'],\n\t\t\t\t'banned'\t\t\t\t\t=> $LNG['gl_short_ban'],\n\t\t\t\t'inactive'\t\t\t\t\t=> $LNG['gl_short_inactive'],\n\t\t\t\t'longinactive'\t\t\t\t=> $LNG['gl_short_long_inactive'],\n\t\t\t\t'noob'\t\t\t\t\t\t=> $LNG['gl_short_newbie'],\n\t\t\t\t'strong'\t\t\t\t\t=> $LNG['gl_short_strong'],\n\t\t\t\t'enemy'\t\t\t\t\t\t=> $LNG['gl_short_enemy'],\n\t\t\t\t'friend'\t\t\t\t\t=> $LNG['gl_short_friend'],\n\t\t\t\t'member'\t\t\t\t\t=> $LNG['gl_short_member'],\n\t\t\t),\n\t\t));\n\t\t\n\t\t$this->display('page.galaxy.default.tpl');\n\t}\n}", "<?php\n\n/**\n *  2Moons\n *  Copyright (C) 2012 Jan Kr\u00f6pke\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n *\n * @package 2Moons\n * @author Jan Kr\u00f6pke <info@2moons.cc>\n * @copyright 2012 Jan Kr\u00f6pke <info@2moons.cc>\n * @license http://www.gnu.org/licenses/gpl.html GNU GPLv3 License\n * @version 1.7.0 (2013-01-17)\n * @info $Id$\n * @link http://2moons.cc/\n */\n\n\nclass ShowInformationPage extends AbstractPage\n{\n\tpublic static $requireModule = MODULE_INFORMATION;\n\t\n\tprotected $disableEcoSystem = true;\n\n\tfunction __construct() \n\t{\n\t\tparent::__construct();\n\t}\n\t\t\n\tstatic function getNextJumpWaitTime($lastTime)\n\t{\n\t\tglobal $CONF;\n\t\t\n\t\treturn $lastTime + Config::get('gate_wait_time');\n\t}\n\n\tpublic function sendFleet()\n\t{\n\t\tglobal $PLANET, $USER, $resource, $LNG, $reslist;\n\n\t\t$NextJumpTime = self::getNextJumpWaitTime($PLANET['last_jump_time']);\n\t\t\n\t\tif (TIMESTAMP < $NextJumpTime) {\n\t\t\t$this->sendJSON(array('message' => $LNG['in_jump_gate_already_used'].' '.pretty_time($NextJumpTime - TIMESTAMP), 'error' => true));\n\t\t}\n\t\t\n\t\t$TargetPlanet = HTTP::_GP('jmpto', (int) $PLANET['id']);\n\t\t$TargetGate   = $GLOBALS['DATABASE']->getFirstRow(\"SELECT id, last_jump_time FROM \".PLANETS.\" WHERE id = \".$TargetPlanet.\" AND id_owner = \".$USER['id'].\" AND sprungtor > 0;\");\n\n\t\tif (!isset($TargetGate) || $TargetPlanet == $PLANET['id']) {\n\t\t\t$this->sendJSON(array('message' => $LNG['in_jump_gate_doesnt_have_one'], 'error' => true));\n\t\t}\n\t\t\n\t\t$NextJumpTime   = self::getNextJumpWaitTime($TargetGate['last_jump_time']);\n\t\t\t\t\n\t\tif (TIMESTAMP < $NextJumpTime) {\n\t\t\t$this->sendJSON(array('message' => $LNG['in_jump_gate_not_ready_target'].' '.pretty_time($NextJumpTime - TIMESTAMP), 'error' => true));\n\t\t}\n\t\t\n\t\t$ShipArray\t\t= array();\n\t\t$SubQueryOri\t= \"\";\n\t\t$SubQueryDes\t= \"\";\n\t\t$Ships\t\t\t= HTTP::_GP('ship', array());\n\t\t\n\t\tforeach($reslist['fleet'] as $Ship)\n\t\t{\n\t\t\tif(!isset($Ships[$Ship]) || $Ship == 212)\n\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t$ShipArray[$Ship]\t= max(0, min($Ships[$Ship], $PLANET[$resource[$Ship]]));\n\t\t\t\t\t\n\t\t\tif(empty($ShipArray[$Ship]))\n\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\n\t\t\t$SubQueryOri \t\t.= $resource[$Ship].\" = \".$resource[$Ship].\" - \".$ShipArray[$Ship].\", \";\n\t\t\t$SubQueryDes \t\t.= $resource[$Ship].\" = \".$resource[$Ship].\" + \".$ShipArray[$Ship].\", \";\n\t\t\t$PLANET[$resource[$Ship]] -= $ShipArray[$Ship];\n\t\t}\n\n\t\tif (empty($SubQueryOri)) {\n\t\t\t$this->sendJSON(array('message' => $LNG['in_jump_gate_error_data'], 'error' => true));\n\t\t}\n\t\t\n\t\t$JumpTime\t= TIMESTAMP;\n\n\t\t$SQL  = \"UPDATE \".PLANETS.\" SET \";\n\t\t$SQL .= $SubQueryOri;\n\t\t$SQL .= \"last_jump_time = \".$JumpTime.\" \";\n\t\t$SQL .= \"WHERE \";\n\t\t$SQL .= \"id = \". $PLANET['id'].\";\";\n\t\t$SQL .= \"UPDATE \".PLANETS.\" SET \";\n\t\t$SQL .= $SubQueryDes;\n\t\t$SQL .= \"last_jump_time = \".$JumpTime.\" \";\n\t\t$SQL .= \"WHERE \";\n\t\t$SQL .= \"id = \".$TargetPlanet.\";\";\n\t\t$GLOBALS['DATABASE']->multi_query($SQL);\n\n\t\t$PLANET['last_jump_time'] \t= $JumpTime;\n\t\t$NextJumpTime\t= self::getNextJumpWaitTime($PLANET['last_jump_time']);\n\t\t$this->sendJSON(array('message' => sprintf($LNG['in_jump_gate_done'], pretty_time($NextJumpTime - TIMESTAMP)), 'error' => false));\n\t}\n\n\tprivate function getAvalibleFleets()\n\t{\n\t\tglobal $reslist, $resource, $PLANET;\n\n        $fleetList  = array();\n\n\t\tforeach($reslist['fleet'] as $Ship)\n\t\t{\n\t\t\tif ($Ship == 212 || $PLANET[$resource[$Ship]] <= 0)\n\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t$fleetList[$Ship]\t= $PLANET[$resource[$Ship]];\n\t\t}\n\t\t\t\t\n\t\treturn $fleetList;\n\t}\n\n\tpublic function destroyMissiles()\n\t{\n\t\tglobal $resource, $PLANET;\n\t\t\n\t\t$Missle\t= HTTP::_GP('missile', array());\n\t\t$PLANET[$resource[502]]\t-= max(0, min($Missle[502], $PLANET[$resource[502]]));\n\t\t$PLANET[$resource[503]]\t-= max(0, min($Missle[503], $PLANET[$resource[503]]));\n\t\t\n\t\t$GLOBALS['DATABASE']->query(\"UPDATE \".PLANETS.\" SET \".$resource[502].\" = \".$PLANET[$resource[502]].\", \".$resource[503].\" = \".$PLANET[$resource[503]].\" WHERE id = \".$PLANET['id'].\";\");\n\t\t\n\t\t$this->sendJSON(array($PLANET[$resource[502]], $PLANET[$resource[503]]));\n\t}\n\n\tprivate function getTargetGates()\n\t{\n\t\tglobal $resource, $USER, $PLANET;\n\t\t\t\t\t\t\t\t\n\t\t$Order = $USER['planet_sort_order'] == 1 ? \"DESC\" : \"ASC\" ;\n\t\t$Sort  = $USER['planet_sort'];\n\n        switch($Sort) {\n            case 1:\n                $OrderBy\t= \"galaxy, system, planet, planet_type \". $Order;\n                break;\n            case 2:\n                $OrderBy\t= \"name \". $Order;\n                break;\n            default:\n                $OrderBy\t= \"id \". $Order;\n                break;\n        }\n\t\t\t\t\n\t\t\t\t\n        $moonResult\t= $GLOBALS['DATABASE']->query(\"SELECT id, name, galaxy, system, planet, last_jump_time, \".$resource[43].\" FROM \".PLANETS.\" WHERE id != \".$PLANET['id'].\" AND id_owner = \". $USER['id'] .\" AND planet_type = '3' AND \".$resource[43].\" > 0 ORDER BY \".$OrderBy.\";\");\n        $moonList\t= array();\n\n        while($moonRow = $GLOBALS['DATABASE']->fetch_array($moonResult)) {\n\t\t\t$NextJumpTime\t\t\t\t= self::getNextJumpWaitTime($moonRow['last_jump_time']);\n\t\t\t$moonList[$moonRow['id']]\t= '['.$moonRow['galaxy'].':'.$moonRow['system'].':'.$moonRow['planet'].'] '.$moonRow['name'].(TIMESTAMP < $NextJumpTime ? ' ('.pretty_time($NextJumpTime - TIMESTAMP).')':'');\n\t\t}\n\t\t\n\t\t$GLOBALS['DATABASE']->free_result($moonResult);\n\n\t\treturn $moonList;\n\t}\n\n\tpublic function show()\n\t{\n\t\tglobal $USER, $PLANET, $dpath, $LNG, $resource, $pricelist, $reslist, $CombatCaps, $ProdGrid, $CONF;\n\n\t\t$elementID \t= HTTP::_GP('id', 0);\n\t\t\n\t\t$this->setWindow('popup');\n\t\t$this->initTemplate();\n\t\t\n\t\t$productionTable\t= array();\n\t\t$FleetInfo\t\t\t= array();\n\t\t$MissileList\t\t= array();\n\t\t$gateData\t\t\t= array();\n\n\t\t$CurrentLevel\t\t= 0;\n\t\t\n\t\t$ressIDs\t\t\t= array_merge(array(), $reslist['resstype'][1], $reslist['resstype'][2]);\n\t\t\n\t\tif(in_array($elementID, $reslist['prod']) && in_array($elementID, $reslist['build']))\n\t\t{\n\t\t\t$BuildLevelFactor\t= 10;\n\t\t\t$BuildTemp       \t= $PLANET['temp_max'];\n\t\t\t$CurrentLevel\t\t= $PLANET[$resource[$elementID]];\n\t\t\t$BuildEnergy\t\t= $USER[$resource[113]];\n\t\t\t$BuildLevel     \t= max($CurrentLevel, 0);\n\t\t\t$BuildStartLvl   \t= max($CurrentLevel - 2, 0);\n\t\t\t\t\t\t\n\t\t\tfor($BuildLevel = $BuildStartLvl; $BuildLevel < $BuildStartLvl + 15; $BuildLevel++)\n\t\t\t{\n\t\t\t\tforeach($ressIDs as $ID) \n\t\t\t\t{\n\t\t\t\t\tif(!isset($ProdGrid[$elementID]['production'][$ID]))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\t$Production\t= eval(ResourceUpdate::getProd($ProdGrid[$elementID]['production'][$ID]));\n\t\t\t\t\t\n\t\t\t\t\tif($ID != 911) {\n\t\t\t\t\t\t$Production\t*= Config::get('resource_multiplier');\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$productionTable['production'][$BuildLevel][$ID]\t= $Production;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$productionTable['usedResource']\t= array_keys($productionTable['production'][$BuildStartLvl]);\n\t\t}\n\t\telseif(in_array($elementID, $reslist['storage']))\n\t\t{\n\t\t\t$BuildLevelFactor\t= 10;\n\t\t\t$BuildTemp       \t= $PLANET['temp_max'];\n\t\t\t$CurrentLevel\t\t= $PLANET[$resource[$elementID]];\n\t\t\t$BuildEnergy\t\t= $USER[$resource[113]];\n\t\t\t$BuildLevel     \t= max($CurrentLevel, 0);\n\t\t\t$BuildStartLvl   \t= max($CurrentLevel - 2, 0);\n\t\t\t\t\t\t\n\t\t\tfor($BuildLevel = $BuildStartLvl; $BuildLevel < $BuildStartLvl + 15; $BuildLevel++)\n\t\t\t{\n\t\t\t\tforeach($ressIDs as $ID) \n\t\t\t\t{\n\t\t\t\t\tif(!isset($ProdGrid[$elementID]['storage'][$ID]))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\n\t\t\t\t\t$productionTable['storage'][$BuildLevel][$ID]\t= round(eval(ResourceUpdate::getProd($ProdGrid[$elementID]['storage'][$ID]))) * Config::get('resource_multiplier') * STORAGE_FACTOR;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t$productionTable['usedResource']\t= array_keys($productionTable['storage'][$BuildStartLvl]);\n\t\t}\n\t\telseif(in_array($elementID, $reslist['fleet']))\n\t\t{\n\t\t\t$FleetInfo\t= array(\n\t\t\t\t'structure'\t\t=> $pricelist[$elementID]['cost'][901] + $pricelist[$elementID]['cost'][902],\n\t\t\t\t'tech'\t\t\t=> $pricelist[$elementID]['tech'],\n\t\t\t\t'attack'\t\t=> $CombatCaps[$elementID]['attack'],\n\t\t\t\t'shield'\t\t=> $CombatCaps[$elementID]['shield'],\n\t\t\t\t'capacity'\t\t=> $pricelist[$elementID]['capacity'],\n\t\t\t\t'speed1'\t\t=> $pricelist[$elementID]['speed'],\n\t\t\t\t'speed2'\t\t=> $pricelist[$elementID]['speed2'],\n\t\t\t\t'consumption1'\t=> $pricelist[$elementID]['consumption'],\n\t\t\t\t'consumption2'\t=> $pricelist[$elementID]['consumption2'],\n\t\t\t\t'rapidfire'\t\t=> array(\n\t\t\t\t\t'from'\t=> array(),\n\t\t\t\t\t'to'\t=> array(),\n\t\t\t\t),\n\t\t\t);\n\t\t\t\t\n\t\t\t$fleetIDs\t= array_merge($reslist['fleet'], $reslist['defense']);\n\t\t\t\n\t\t\tforeach($fleetIDs as $fleetID)\n\t\t\t{\n\t\t\t\tif (isset($CombatCaps[$elementID]['sd']) && !empty($CombatCaps[$elementID]['sd'][$fleetID])) {\n\t\t\t\t\t$FleetInfo['rapidfire']['to'][$fleetID] = $CombatCaps[$elementID]['sd'][$fleetID];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (isset($CombatCaps[$fleetID]['sd']) && !empty($CombatCaps[$fleetID]['sd'][$elementID])) {\n\t\t\t\t\t$FleetInfo['rapidfire']['from'][$fleetID] = $CombatCaps[$fleetID]['sd'][$elementID];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telseif (in_array($elementID, $reslist['defense']))\n\t\t{\n\t\t\t$FleetInfo\t= array(\n\t\t\t\t'structure'\t\t=> $pricelist[$elementID]['cost'][901] + $pricelist[$elementID]['cost'][902],\n\t\t\t\t'attack'\t\t=> $CombatCaps[$elementID]['attack'],\n\t\t\t\t'shield'\t\t=> $CombatCaps[$elementID]['shield'],\n\t\t\t\t'rapidfire'\t\t=> array(\n\t\t\t\t\t'from'\t=> array(),\n\t\t\t\t\t'to'\t=> array(),\n\t\t\t\t),\n\t\t\t);\n\t\t\t\t\n\t\t\t$fleetIDs\t= array_merge($reslist['fleet'], $reslist['defense']);\n\t\t\t\n\t\t\tforeach($fleetIDs as $fleetID)\n\t\t\t{\n\t\t\t\tif (isset($CombatCaps[$elementID]['sd']) && !empty($CombatCaps[$elementID]['sd'][$fleetID])) {\n\t\t\t\t\t$FleetInfo['rapidfire']['to'][$fleetID] = $CombatCaps[$elementID]['sd'][$fleetID];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (isset($CombatCaps[$fleetID]['sd']) && !empty($CombatCaps[$fleetID]['sd'][$elementID])) {\n\t\t\t\t\t$FleetInfo['rapidfire']['from'][$fleetID] = $CombatCaps[$fleetID]['sd'][$elementID];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif($elementID == 43 && $PLANET[$resource[43]] > 0)\n\t\t{\n\t\t\t$this->tplObj->loadscript('gate.js');\n\t\t\t$nextTime\t= self::getNextJumpWaitTime($PLANET['last_jump_time']);\n\t\t\t$gateData\t= array(\n\t\t\t\t'nextTime'\t=> _date($LNG['php_tdformat'], $nextTime, $USER['timezone']),\n\t\t\t\t'restTime'\t=> max(0, $nextTime - TIMESTAMP),\n\t\t\t\t'startLink'\t=> $PLANET['name'].' '.strip_tags(BuildPlanetAdressLink($PLANET)),\n\t\t\t\t'gateList' \t=> $this->getTargetGates(),\n\t\t\t\t'fleetList'\t=> $this->getAvalibleFleets(),\n\t\t\t);\n\t\t}\n\t\telseif($elementID == 44 && $PLANET[$resource[44]] > 0)\n\t\t{\t\t\t\t\t\t\t\t\n\t\t\t$MissileList\t= array(\n\t\t\t\t502\t=> $PLANET[$resource[502]],\n\t\t\t\t503\t=> $PLANET[$resource[503]]\n\t\t\t);\n\t\t}\n\n\t\t$this->tplObj->assign_vars(array(\t\t\n\t\t\t'elementID'\t\t\t=> $elementID,\n\t\t\t'productionTable'\t=> $productionTable,\n\t\t\t'CurrentLevel'\t\t=> $CurrentLevel,\n\t\t\t'MissileList'\t\t=> $MissileList,\n\t\t\t'Bonus'\t\t\t\t=> BuildFunctions::getAvalibleBonus($elementID),\n\t\t\t'FleetInfo'\t\t\t=> $FleetInfo,\n\t\t\t'gateData'\t\t\t=> $gateData,\n\t\t));\n\t\t\n\t\t$this->display('page.infomation.default.tpl');\n\t}\n}"], "filenames": ["includes/pages/game/class.ShowFleetStep1Page.php", "includes/pages/game/class.ShowFleetTablePage.php", "includes/pages/game/class.ShowGalaxyPage.php", "includes/pages/game/class.ShowInformationPage.php"], "buggy_code_start_loc": [44, 195, 50, 58], "buggy_code_end_loc": [48, 199, 56, 59], "fixing_code_start_loc": [44, 195, 50, 58], "fixing_code_end_loc": [48, 199, 56, 59], "type": "CWE-89", "message": "A vulnerability classified as critical has been found in oktora24 2moons. Affected is an unknown function. The manipulation leads to sql injection. The name of the patch is 1b09cf7672eb85b5b0c8a4de321f7a4ad87b09a7. It is recommended to apply a patch to fix this issue. VDB-218898 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2013-10014", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-19T10:15:10.483", "lastModified": "2023-01-27T17:56:38.307", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as critical has been found in oktora24 2moons. Affected is an unknown function. The manipulation leads to sql injection. The name of the patch is 1b09cf7672eb85b5b0c8a4de321f7a4ad87b09a7. It is recommended to apply a patch to fix this issue. VDB-218898 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:2moons_project:2moons:*:*:*:*:*:*:*:*", "versionEndExcluding": "2013-01-18", "matchCriteriaId": "6186EDD9-F991-4E84-8560-D66DD2A0F2C0"}]}]}], "references": [{"url": "https://github.com/oktora24/2moons/commit/1b09cf7672eb85b5b0c8a4de321f7a4ad87b09a7", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218898", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218898", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/oktora24/2moons/commit/1b09cf7672eb85b5b0c8a4de321f7a4ad87b09a7"}}