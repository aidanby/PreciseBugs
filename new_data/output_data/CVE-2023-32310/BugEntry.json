{"buggy_code": ["package io.dataease.service.panel;\n\nimport com.google.gson.Gson;\nimport io.dataease.auth.api.dto.CurrentRoleDto;\nimport io.dataease.auth.api.dto.CurrentUserDto;\nimport io.dataease.commons.constants.SysLogConstants;\nimport io.dataease.commons.utils.DeLogUtils;\nimport io.dataease.ext.ExtPanelShareMapper;\nimport io.dataease.commons.model.AuthURD;\nimport io.dataease.commons.utils.AuthUtils;\nimport io.dataease.commons.utils.BeanUtils;\nimport io.dataease.commons.utils.CommonBeanFactory;\nimport io.dataease.controller.request.panel.PanelShareFineDto;\nimport io.dataease.controller.request.panel.PanelShareRemoveRequest;\nimport io.dataease.controller.request.panel.PanelShareRequest;\nimport io.dataease.controller.request.panel.PanelShareSearchRequest;\nimport io.dataease.controller.sys.base.BaseGridRequest;\nimport io.dataease.dto.panel.PanelShareDto;\nimport io.dataease.dto.panel.PanelShareOutDTO;\nimport io.dataease.dto.panel.PanelSharePo;\nimport io.dataease.plugins.common.base.domain.PanelGroup;\nimport io.dataease.plugins.common.base.domain.PanelShare;\nimport io.dataease.plugins.common.base.domain.PanelShareExample;\nimport io.dataease.plugins.common.base.mapper.PanelGroupMapper;\nimport io.dataease.plugins.common.base.mapper.PanelShareMapper;\nimport io.dataease.service.message.DeMsgutil;\nimport lombok.Data;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Service\npublic class ShareService {\n\n    @Autowired(required = false)\n    private PanelShareMapper mapper;\n\n    @Resource\n    private PanelGroupMapper panelGroupMapper;\n\n    @Resource\n    private ExtPanelShareMapper extPanelShareMapper;\n\n    /**\n     * 1.\u67e5\u8be2\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u5206\u4eab\u7ed9\u4e86\u54ea\u4e9b\u76ee\u6807\n     * 2.\u8fc7\u6ee4\u51fa\u65b0\u589e\u7684\u76ee\u6807\n     * 3.\u8fc7\u6ee4\u51fa\u51cf\u5c11\u7684\u76ee\u6807\n     * 4.\u6279\u91cf\u5220\u9664\n     * 5.\u6279\u91cf\u65b0\u589e\n     * 6.\u53d1\u9001\u53d6\u6d88\u5206\u4eab\u6d88\u606f\n     * 7.\u53d1\u9001\u65b0\u589e\u5206\u4eab\u6d88\u606f\n     *\n     * @param panelShareFineDto\n     */\n    @Transactional\n    public void fineSave(PanelShareFineDto panelShareFineDto) {\n\n        List<PanelShare> addShares = new ArrayList<>();// \u65b0\u589e\u7684\u5206\u4eab\n        List<Long> redShareIdLists = new ArrayList<>();// \u53d6\u6d88\u7684\u5206\u4eab\n\n        String panelGroupId = panelShareFineDto.getResourceId();\n        AuthURD authURD = panelShareFineDto.getAuthURD();\n        AuthURD sharedAuthURD = new AuthURD();\n        AuthURD addAuthURD = new AuthURD();\n\n        Map<Integer, List<Long>> authURDMap = new HashMap<>();\n        authURDMap.put(0, authURD.getUserIds());\n        authURDMap.put(1, authURD.getRoleIds());\n        authURDMap.put(2, authURD.getDeptIds());\n        PanelShareSearchRequest request = new PanelShareSearchRequest();\n        request.setCurrentUserName(AuthUtils.getUser().getUsername());\n        request.setResourceId(panelGroupId);\n        // \u5f53\u524d\u7528\u6237\u5df2\u7ecf\u5206\u4eab\u51fa\u53bb\u7684\n        List<PanelShare> panelShares = extPanelShareMapper.queryWithResource(request);\n        Map<Integer, List<TempShareNode>> typeSharedMap = panelShares.stream().map(this::convertNode)\n                .collect(Collectors.groupingBy(TempShareNode::getType));\n\n        for (Map.Entry<Integer, List<Long>> entry : authURDMap.entrySet()) {\n            Integer key = entry.getKey();\n            List<TempShareNode> shareNodes;\n            if (null == typeSharedMap || null == typeSharedMap.get(key)) {\n                shareNodes = new ArrayList<>();\n            } else {\n                shareNodes = typeSharedMap.get(key);\n            }\n            List<Long> value = entry.getValue();\n            if (null != value) {\n                Map<String, Object> dataMap = filterData(value, shareNodes);\n                List<Long> newIds = (List<Long>) dataMap.get(\"add\");\n                for (int i = 0; i < newIds.size(); i++) {\n                    Long id = newIds.get(i);\n                    PanelShare share = new PanelShare();\n                    share.setCreateTime(System.currentTimeMillis());\n                    share.setPanelGroupId(panelGroupId);\n                    share.setTargetId(id);\n                    share.setType(key);\n                    addShares.add(share);\n                }\n                List<TempShareNode> redNodes = (List<TempShareNode>) dataMap.get(\"red\");\n                List<Long> redIds = redNodes.stream().map(TempShareNode::getShareId).distinct()\n                        .collect(Collectors.toList());\n\n                redShareIdLists.addAll(redIds);\n                buildRedAuthURD(key,\n                        redNodes.stream().map(TempShareNode::getTargetId).distinct().collect(Collectors.toList()),\n                        sharedAuthURD);\n                buildRedAuthURD(key, newIds, addAuthURD);\n            }\n\n        }\n\n        if (CollectionUtils.isNotEmpty(redShareIdLists)) {\n            extPanelShareMapper.batchDelete(redShareIdLists);\n        }\n\n        if (CollectionUtils.isNotEmpty(addShares)) {\n            extPanelShareMapper.batchInsert(addShares, AuthUtils.getUser().getUsername());\n        }\n\n        PanelGroup panelGroup = panelGroupMapper.selectByPrimaryKey(panelGroupId);\n\n        if (CollectionUtils.isNotEmpty(addAuthURD.getUserIds())) {\n            addAuthURD.getUserIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(sharedAuthURD.getUserIds()) || !sharedAuthURD.getUserIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.SHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.USER);\n                }\n            });\n        }\n        if (CollectionUtils.isNotEmpty(addAuthURD.getRoleIds())) {\n            addAuthURD.getRoleIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(sharedAuthURD.getRoleIds()) || !sharedAuthURD.getRoleIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.SHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.ROLE);\n                }\n            });\n        }\n        if (CollectionUtils.isNotEmpty(addAuthURD.getDeptIds())) {\n            addAuthURD.getDeptIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(sharedAuthURD.getDeptIds()) || !sharedAuthURD.getDeptIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.SHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.DEPT);\n                }\n            });\n        }\n\n        if (CollectionUtils.isNotEmpty(sharedAuthURD.getUserIds())) {\n            sharedAuthURD.getUserIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(addAuthURD.getUserIds()) || !addAuthURD.getUserIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.USER);\n                }\n            });\n        }\n\n        if (CollectionUtils.isNotEmpty(sharedAuthURD.getRoleIds())) {\n            sharedAuthURD.getRoleIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(addAuthURD.getRoleIds()) || !addAuthURD.getRoleIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.ROLE);\n                }\n            });\n        }\n        if (CollectionUtils.isNotEmpty(sharedAuthURD.getDeptIds())) {\n            sharedAuthURD.getDeptIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(addAuthURD.getDeptIds()) || !addAuthURD.getDeptIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.DEPT);\n                }\n            });\n        }\n\n\n        // \u4ee5\u4e0a\u662f\u4e1a\u52a1\u4ee3\u7801\n        // \u4e0b\u9762\u662f\u6d88\u606f\u53d1\u9001\n        Set<Long> addUserIdSet = AuthUtils.userIdsByURD(addAuthURD);\n        Set<Long> redUserIdSet = AuthUtils.userIdsByURD(sharedAuthURD);\n\n        CurrentUserDto user = AuthUtils.getUser();\n        Gson gson = new Gson();\n        String msg = panelGroup.getName();\n\n        List<String> msgParam = new ArrayList<>();\n        msgParam.add(panelGroupId);\n        addUserIdSet.forEach(userId -> {\n            if (!redUserIdSet.contains(userId) && !user.getUserId().equals(userId)) {\n                DeMsgutil.sendMsg(userId, 2L, user.getNickName() + \" \u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\uff0c\u8bf7\u67e5\u6536!\", gson.toJson(msgParam));\n            }\n        });\n\n        redUserIdSet.forEach(userId -> {\n            if (!addUserIdSet.contains(userId) && !user.getUserId().equals(userId)) {\n                DeMsgutil.sendMsg(userId, 3L, user.getNickName() + \" \u53d6\u6d88\u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\uff0c\u8bf7\u67e5\u6536!\",\n                        gson.toJson(msgParam));\n            }\n        });\n\n    }\n\n    private void buildRedAuthURD(Integer type, List<Long> redIds, AuthURD authURD) {\n        if (type == 0) {\n            authURD.setUserIds(redIds);\n        }\n        if (type == 1) {\n            authURD.setRoleIds(redIds);\n        }\n        if (type == 2) {\n            authURD.setDeptIds(redIds);\n        }\n    }\n\n    /**\n     * @param newTargets \u65b0\u7684\u5206\u4eab\u76ee\u6807\n     * @param shareNodes \u5df2\u666f\u5206\u4eab\u76ee\u6807\n     * @return\n     */\n    private Map<String, Object> filterData(List<Long> newTargets, List<TempShareNode> shareNodes) {\n        Map<String, Object> result = new HashMap<>();\n        List<Long> newUserIds = new ArrayList<>();\n        for (int i = 0; i < newTargets.size(); i++) {\n            Long newTargetId = newTargets.get(i);\n            Boolean isNew = true;\n            for (int j = 0; j < shareNodes.size(); j++) {\n                TempShareNode shareNode = shareNodes.get(j);\n                Long sharedId = shareNode.getTargetId();\n                if (newTargetId.equals(sharedId)) {\n                    shareNode.setMatched(true); // \u5df2\u5206\u4eab \u91cd\u65b0\u547d\u4e2d\n                    isNew = false;\n                }\n            }\n            if (isNew) {\n                // \u83b7\u53d6\u65b0\u589e\u7684\n                newUserIds.add(newTargetId);\n            }\n        }\n        // \u83b7\u53d6\u9700\u8981\u53d6\u6d88\u5206\u4eab\u7684\n        List<TempShareNode> missNodes = shareNodes.stream().filter(item -> !item.getMatched())\n                .collect(Collectors.toList());\n        result.put(\"add\", newUserIds);\n        result.put(\"red\", missNodes);\n        return result;\n    }\n\n    @Data\n    private class TempShareNode {\n        private Long shareId;\n        private Integer type;\n        private Long targetId;\n        private Boolean matched = false;\n\n        public boolean targetMatch(Long tid) {\n            return targetId.equals(tid);\n        }\n    }\n\n    private TempShareNode convertNode(PanelShare panelShare) {\n        return BeanUtils.copyBean(new TempShareNode(), panelShare);\n    }\n\n    @Transactional\n    public void save(PanelShareRequest request) {\n        List<PanelGroup> panelGroups = queryGroup(request.getPanelIds());\n        // 1.\u5148\u6839\u636e\u4eea\u8868\u677f\u5220\u9664\u6240\u6709\u5df2\u7ecf\u5206\u4eab\u7684\n        Integer type = request.getType();\n        List<String> panelIds = request.getPanelIds();\n        List<Long> targetIds = request.getTargetIds();\n        // \u4f7f\u7528\u539f\u751f\u5bf9\u8c61\u4f1a\u5bfc\u81f4\u4e8b\u7269\u5931\u6548 \u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u4f7f\u7528spring\u4ee3\u7406\u5bf9\u8c61\n        if (CollectionUtils.isNotEmpty(panelIds)) {\n            ShareService proxy = CommonBeanFactory.getBean(ShareService.class);\n            panelIds.forEach(panelId -> proxy.delete(panelId, type));\n        }\n        if (CollectionUtils.isEmpty(targetIds))\n            return;\n\n        long now = System.currentTimeMillis();\n        List<PanelShare> shares = panelIds.stream().flatMap(panelId -> targetIds.stream().map(targetId -> {\n            PanelShare share = new PanelShare();\n            share.setCreateTime(now);\n            share.setPanelGroupId(panelId);\n            share.setTargetId(targetId);\n            share.setType(type);\n            return share;\n        })).collect(Collectors.toList());\n        if (CollectionUtils.isNotEmpty(shares)) {\n            extPanelShareMapper.batchInsert(shares, AuthUtils.getUser().getUsername());\n        }\n\n        // \u4e0b\u9762\u662f\u53d1\u9001\u63d0\u9192\u6d88\u606f\u903b\u8f91\n        Set<Long> userIdSet;\n        AuthURD authURD = new AuthURD();\n        if (type == 0) {\n            authURD.setUserIds(targetIds);\n        }\n        if (type == 1) {\n            authURD.setRoleIds(targetIds);\n        }\n        if (type == 2) {\n            authURD.setDeptIds(targetIds);\n        }\n        userIdSet = AuthUtils.userIdsByURD(authURD);\n\n        CurrentUserDto user = AuthUtils.getUser();\n        String msg = StringUtils.joinWith(\"\uff0c\",\n                panelGroups.stream().map(PanelGroup::getName).collect(Collectors.toList()));\n        Gson gson = new Gson();\n        userIdSet.forEach(userId -> DeMsgutil.sendMsg(userId, 2L, user.getNickName() + \" \u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\u7ed9\u60a8\uff0c\u8bf7\u67e5\u6536!\",\n                gson.toJson(panelIds)));\n\n    }\n\n    private List<PanelGroup> queryGroup(List<String> panelIds) {\n        return panelIds.stream().map(panelGroupMapper::selectByPrimaryKey).collect(Collectors.toList());\n    }\n\n    /**\n     * panel_group_id\u5efa\u4e86\u7d22\u5f15 \u6548\u7387\u4e0d\u4f1a\u5f88\u5dee\n     *\n     * @param panel_group_id\n     */\n    @Transactional\n    public void delete(String panel_group_id, Integer type) {\n        PanelShareExample example = new PanelShareExample();\n        PanelShareExample.Criteria criteria = example.createCriteria();\n        criteria.andPanelGroupIdEqualTo(panel_group_id);\n        if (type != null) {\n            criteria.andTypeEqualTo(type);\n        }\n        mapper.deleteByExample(example);\n    }\n\n    public List<PanelSharePo> shareOut() {\n        return null;\n    }\n\n    public List<PanelSharePo> queryShareOut() {\n        String username = AuthUtils.getUser().getUsername();\n        return extPanelShareMapper.queryOut(username);\n    }\n\n    public List<PanelShareDto> queryTree(BaseGridRequest request) {\n        CurrentUserDto user = AuthUtils.getUser();\n        Long userId = user.getUserId();\n        Long deptId = user.getDeptId();\n        List<Long> roleIds = user.getRoles().stream().map(CurrentRoleDto::getId).collect(Collectors.toList());\n\n        Map<String, Object> param = new HashMap<>();\n        param.put(\"userId\", userId);\n        param.put(\"deptId\", deptId);\n        param.put(\"roleIds\", CollectionUtils.isNotEmpty(roleIds) ? roleIds : null);\n\n        List<PanelSharePo> data = extPanelShareMapper.query(param);\n        List<PanelShareDto> dtoLists = data.stream().map(po -> BeanUtils.copyBean(new PanelShareDto(), po))\n                .collect(Collectors.toList());\n        return convertTree(dtoLists);\n    }\n\n    // List\u6784\u5efaTree\n    private List<PanelShareDto> convertTree(List<PanelShareDto> data) {\n        String username = AuthUtils.getUser().getUsername();\n        Map<String, List<PanelShareDto>> map = data.stream()\n                .filter(panelShareDto -> StringUtils.isNotEmpty(panelShareDto.getCreator())\n                        && !StringUtils.equals(username, panelShareDto.getCreator()))\n                .collect(Collectors.groupingBy(PanelShareDto::getCreator));\n        return map.entrySet().stream().map(entry -> {\n            PanelShareDto panelShareDto = new PanelShareDto();\n            panelShareDto.setName(entry.getKey());\n            panelShareDto.setChildren(entry.getValue());\n            return panelShareDto;\n        }).collect(Collectors.toList());\n    }\n\n    public List<PanelShare> queryWithResource(PanelShareSearchRequest request) {\n        String username = AuthUtils.getUser().getUsername();\n        request.setCurrentUserName(username);\n        return extPanelShareMapper.queryWithResource(request);\n    }\n\n    public List<PanelShareOutDTO> queryTargets(String panelId) {\n        String username = AuthUtils.getUser().getUsername();\n        List<PanelShareOutDTO> targets = extPanelShareMapper.queryTargets(panelId, username);\n        if (CollectionUtils.isEmpty(targets))\n            return new ArrayList<>();\n        return targets.stream().filter(item -> StringUtils.isNotEmpty(item.getTargetName()))\n                .collect(Collectors.collectingAndThen(Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(item -> item.getPanelId() + item.getType() + item.getTargetId()))), ArrayList::new));\n    }\n\n    public void removeSharesyPanel(String panelId) {\n        PanelGroup panelGroup = panelGroupMapper.selectByPrimaryKey(panelId);\n        PanelShareRemoveRequest request = new PanelShareRemoveRequest();\n        request.setPanelId(panelId);\n        List<PanelShareOutDTO> panelShareOutDTOS = queryTargets(panelId);\n        extPanelShareMapper.removeShares(request);\n        if (CollectionUtils.isEmpty(panelShareOutDTOS) || ObjectUtils.isEmpty(panelGroup) || StringUtils.isBlank(panelGroup.getName())) {\n            return;\n        }\n        panelShareOutDTOS.forEach(shareOut -> {\n            SysLogConstants.SOURCE_TYPE buiType = buiType(shareOut.getType());\n            DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelId, panelGroup.getPid(), shareOut.getTargetId(), buiType);\n        });\n\n        Map<Integer, List<PanelShareOutDTO>> listMap = panelShareOutDTOS.stream().collect(Collectors.groupingBy(dto -> dto.getType()));\n        AuthURD urd = new AuthURD();\n        for (Map.Entry<Integer, List<PanelShareOutDTO>> entry : listMap.entrySet()) {\n            List<PanelShareOutDTO> dtoList = entry.getValue();\n            if (CollectionUtils.isNotEmpty(dtoList)) {\n                List<Long> curTargetIds = dtoList.stream().map(dto -> Long.parseLong(dto.getTargetId())).collect(Collectors.toList());\n                buildRedAuthURD(entry.getKey(), curTargetIds, urd);\n            }\n        }\n        Set<Long> userIds = AuthUtils.userIdsByURD(urd);\n        if (CollectionUtils.isNotEmpty(userIds)) {\n            CurrentUserDto user = AuthUtils.getUser();\n            Gson gson = new Gson();\n            userIds.forEach(userId -> {\n                if (!user.getUserId().equals(userId)) {\n                    String msg = panelGroup.getName();\n                    List<String> msgParam = new ArrayList<>();\n                    msgParam.add(panelId);\n                    DeMsgutil.sendMsg(userId, 3L, user.getNickName() + \" \u53d6\u6d88\u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\uff0c\u8bf7\u67e5\u6536!\", gson.toJson(msgParam));\n                }\n            });\n        }\n    }\n\n    private SysLogConstants.SOURCE_TYPE buiType(Integer type) {\n        SysLogConstants.SOURCE_TYPE targetType = SysLogConstants.SOURCE_TYPE.USER;\n        if (type == 1) {\n            targetType = SysLogConstants.SOURCE_TYPE.ROLE;\n        } else if (type == 2) {\n            targetType = SysLogConstants.SOURCE_TYPE.DEPT;\n        }\n        return targetType;\n    }\n\n    @Transactional\n    public void removeShares(PanelShareRemoveRequest removeRequest) {\n        String panelId = removeRequest.getPanelId();\n        PanelGroup panelGroup = panelGroupMapper.selectByPrimaryKey(panelId);\n\n        extPanelShareMapper.removeShares(removeRequest);\n\n        SysLogConstants.SOURCE_TYPE targetType = buiType(removeRequest.getType());\n\n        DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelId, panelGroup.getPid(), removeRequest.getTargetId(), targetType);\n\n        AuthURD sharedAuthURD = new AuthURD();\n        List<Long> removeIds = new ArrayList<Long>() {{\n            add(removeRequest.getTargetId());\n        }};\n        buildRedAuthURD(removeRequest.getType(), removeIds, sharedAuthURD);\n        CurrentUserDto user = AuthUtils.getUser();\n        Gson gson = new Gson();\n\n        String msg = panelGroup.getName();\n\n        List<String> msgParam = new ArrayList<>();\n        msgParam.add(panelId);\n        Set<Long> redIds = AuthUtils.userIdsByURD(sharedAuthURD);\n        redIds.forEach(userId -> {\n            if (!user.getUserId().equals(userId)) {\n                DeMsgutil.sendMsg(userId, 3L, user.getNickName() + \" \u53d6\u6d88\u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\uff0c\u8bf7\u67e5\u6536!\",\n                        gson.toJson(msgParam));\n            }\n        });\n\n    }\n\n}\n"], "fixing_code": ["package io.dataease.service.panel;\n\nimport com.google.gson.Gson;\nimport io.dataease.auth.api.dto.CurrentRoleDto;\nimport io.dataease.auth.api.dto.CurrentUserDto;\nimport io.dataease.commons.constants.SysLogConstants;\nimport io.dataease.commons.model.AuthURD;\nimport io.dataease.commons.utils.AuthUtils;\nimport io.dataease.commons.utils.BeanUtils;\nimport io.dataease.commons.utils.CommonBeanFactory;\nimport io.dataease.commons.utils.DeLogUtils;\nimport io.dataease.controller.request.panel.PanelShareFineDto;\nimport io.dataease.controller.request.panel.PanelShareRemoveRequest;\nimport io.dataease.controller.request.panel.PanelShareRequest;\nimport io.dataease.controller.request.panel.PanelShareSearchRequest;\nimport io.dataease.controller.sys.base.BaseGridRequest;\nimport io.dataease.dto.panel.PanelShareDto;\nimport io.dataease.dto.panel.PanelShareOutDTO;\nimport io.dataease.dto.panel.PanelSharePo;\nimport io.dataease.ext.ExtPanelShareMapper;\nimport io.dataease.plugins.common.base.domain.PanelGroup;\nimport io.dataease.plugins.common.base.domain.PanelShare;\nimport io.dataease.plugins.common.base.domain.PanelShareExample;\nimport io.dataease.plugins.common.base.mapper.PanelGroupMapper;\nimport io.dataease.plugins.common.base.mapper.PanelShareMapper;\nimport io.dataease.service.message.DeMsgutil;\nimport lombok.Data;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.ObjectUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport javax.annotation.Resource;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n@Service\npublic class ShareService {\n\n    @Autowired(required = false)\n    private PanelShareMapper mapper;\n\n    @Resource\n    private PanelGroupMapper panelGroupMapper;\n\n    @Resource\n    private ExtPanelShareMapper extPanelShareMapper;\n\n    /**\n     * 1.\u67e5\u8be2\u5f53\u524d\u8282\u70b9\u5df2\u7ecf\u5206\u4eab\u7ed9\u4e86\u54ea\u4e9b\u76ee\u6807\n     * 2.\u8fc7\u6ee4\u51fa\u65b0\u589e\u7684\u76ee\u6807\n     * 3.\u8fc7\u6ee4\u51fa\u51cf\u5c11\u7684\u76ee\u6807\n     * 4.\u6279\u91cf\u5220\u9664\n     * 5.\u6279\u91cf\u65b0\u589e\n     * 6.\u53d1\u9001\u53d6\u6d88\u5206\u4eab\u6d88\u606f\n     * 7.\u53d1\u9001\u65b0\u589e\u5206\u4eab\u6d88\u606f\n     *\n     * @param panelShareFineDto\n     */\n    @Transactional\n    public void fineSave(PanelShareFineDto panelShareFineDto) {\n\n        List<PanelShare> addShares = new ArrayList<>();// \u65b0\u589e\u7684\u5206\u4eab\n        List<Long> redShareIdLists = new ArrayList<>();// \u53d6\u6d88\u7684\u5206\u4eab\n\n        String panelGroupId = panelShareFineDto.getResourceId();\n        AuthURD authURD = panelShareFineDto.getAuthURD();\n        AuthURD sharedAuthURD = new AuthURD();\n        AuthURD addAuthURD = new AuthURD();\n\n        Map<Integer, List<Long>> authURDMap = new HashMap<>();\n        authURDMap.put(0, authURD.getUserIds());\n        authURDMap.put(1, authURD.getRoleIds());\n        authURDMap.put(2, authURD.getDeptIds());\n        PanelShareSearchRequest request = new PanelShareSearchRequest();\n        request.setCurrentUserName(AuthUtils.getUser().getUsername());\n        request.setResourceId(panelGroupId);\n        // \u5f53\u524d\u7528\u6237\u5df2\u7ecf\u5206\u4eab\u51fa\u53bb\u7684\n        List<PanelShare> panelShares = extPanelShareMapper.queryWithResource(request);\n        Map<Integer, List<TempShareNode>> typeSharedMap = panelShares.stream().map(this::convertNode)\n                .collect(Collectors.groupingBy(TempShareNode::getType));\n\n        for (Map.Entry<Integer, List<Long>> entry : authURDMap.entrySet()) {\n            Integer key = entry.getKey();\n            List<TempShareNode> shareNodes;\n            if (null == typeSharedMap || null == typeSharedMap.get(key)) {\n                shareNodes = new ArrayList<>();\n            } else {\n                shareNodes = typeSharedMap.get(key);\n            }\n            List<Long> value = entry.getValue();\n            if (null != value) {\n                Map<String, Object> dataMap = filterData(value, shareNodes);\n                List<Long> newIds = (List<Long>) dataMap.get(\"add\");\n                for (int i = 0; i < newIds.size(); i++) {\n                    Long id = newIds.get(i);\n                    PanelShare share = new PanelShare();\n                    share.setCreateTime(System.currentTimeMillis());\n                    share.setPanelGroupId(panelGroupId);\n                    share.setTargetId(id);\n                    share.setType(key);\n                    addShares.add(share);\n                }\n                List<TempShareNode> redNodes = (List<TempShareNode>) dataMap.get(\"red\");\n                List<Long> redIds = redNodes.stream().map(TempShareNode::getShareId).distinct()\n                        .collect(Collectors.toList());\n\n                redShareIdLists.addAll(redIds);\n                buildRedAuthURD(key,\n                        redNodes.stream().map(TempShareNode::getTargetId).distinct().collect(Collectors.toList()),\n                        sharedAuthURD);\n                buildRedAuthURD(key, newIds, addAuthURD);\n            }\n\n        }\n\n        if (CollectionUtils.isNotEmpty(redShareIdLists)) {\n            extPanelShareMapper.batchDelete(redShareIdLists);\n        }\n\n        if (CollectionUtils.isNotEmpty(addShares)) {\n            extPanelShareMapper.batchInsert(addShares, AuthUtils.getUser().getUsername());\n        }\n\n        PanelGroup panelGroup = panelGroupMapper.selectByPrimaryKey(panelGroupId);\n\n        if (CollectionUtils.isNotEmpty(addAuthURD.getUserIds())) {\n            addAuthURD.getUserIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(sharedAuthURD.getUserIds()) || !sharedAuthURD.getUserIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.SHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.USER);\n                }\n            });\n        }\n        if (CollectionUtils.isNotEmpty(addAuthURD.getRoleIds())) {\n            addAuthURD.getRoleIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(sharedAuthURD.getRoleIds()) || !sharedAuthURD.getRoleIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.SHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.ROLE);\n                }\n            });\n        }\n        if (CollectionUtils.isNotEmpty(addAuthURD.getDeptIds())) {\n            addAuthURD.getDeptIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(sharedAuthURD.getDeptIds()) || !sharedAuthURD.getDeptIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.SHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.DEPT);\n                }\n            });\n        }\n\n        if (CollectionUtils.isNotEmpty(sharedAuthURD.getUserIds())) {\n            sharedAuthURD.getUserIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(addAuthURD.getUserIds()) || !addAuthURD.getUserIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.USER);\n                }\n            });\n        }\n\n        if (CollectionUtils.isNotEmpty(sharedAuthURD.getRoleIds())) {\n            sharedAuthURD.getRoleIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(addAuthURD.getRoleIds()) || !addAuthURD.getRoleIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.ROLE);\n                }\n            });\n        }\n        if (CollectionUtils.isNotEmpty(sharedAuthURD.getDeptIds())) {\n            sharedAuthURD.getDeptIds().forEach(id -> {\n                if (CollectionUtils.isEmpty(addAuthURD.getDeptIds()) || !addAuthURD.getDeptIds().contains(id)) {\n                    DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelGroupId, panelGroup.getPid(), id, SysLogConstants.SOURCE_TYPE.DEPT);\n                }\n            });\n        }\n\n\n        // \u4ee5\u4e0a\u662f\u4e1a\u52a1\u4ee3\u7801\n        // \u4e0b\u9762\u662f\u6d88\u606f\u53d1\u9001\n        Set<Long> addUserIdSet = AuthUtils.userIdsByURD(addAuthURD);\n        Set<Long> redUserIdSet = AuthUtils.userIdsByURD(sharedAuthURD);\n\n        CurrentUserDto user = AuthUtils.getUser();\n        Gson gson = new Gson();\n        String msg = panelGroup.getName();\n\n        List<String> msgParam = new ArrayList<>();\n        msgParam.add(panelGroupId);\n        addUserIdSet.forEach(userId -> {\n            if (!redUserIdSet.contains(userId) && !user.getUserId().equals(userId)) {\n                DeMsgutil.sendMsg(userId, 2L, user.getNickName() + \" \u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\uff0c\u8bf7\u67e5\u6536!\", gson.toJson(msgParam));\n            }\n        });\n\n        redUserIdSet.forEach(userId -> {\n            if (!addUserIdSet.contains(userId) && !user.getUserId().equals(userId)) {\n                DeMsgutil.sendMsg(userId, 3L, user.getNickName() + \" \u53d6\u6d88\u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\uff0c\u8bf7\u67e5\u6536!\",\n                        gson.toJson(msgParam));\n            }\n        });\n\n    }\n\n    private void buildRedAuthURD(Integer type, List<Long> redIds, AuthURD authURD) {\n        if (type == 0) {\n            authURD.setUserIds(redIds);\n        }\n        if (type == 1) {\n            authURD.setRoleIds(redIds);\n        }\n        if (type == 2) {\n            authURD.setDeptIds(redIds);\n        }\n    }\n\n    /**\n     * @param newTargets \u65b0\u7684\u5206\u4eab\u76ee\u6807\n     * @param shareNodes \u5df2\u666f\u5206\u4eab\u76ee\u6807\n     * @return\n     */\n    private Map<String, Object> filterData(List<Long> newTargets, List<TempShareNode> shareNodes) {\n        Map<String, Object> result = new HashMap<>();\n        List<Long> newUserIds = new ArrayList<>();\n        for (int i = 0; i < newTargets.size(); i++) {\n            Long newTargetId = newTargets.get(i);\n            Boolean isNew = true;\n            for (int j = 0; j < shareNodes.size(); j++) {\n                TempShareNode shareNode = shareNodes.get(j);\n                Long sharedId = shareNode.getTargetId();\n                if (newTargetId.equals(sharedId)) {\n                    shareNode.setMatched(true); // \u5df2\u5206\u4eab \u91cd\u65b0\u547d\u4e2d\n                    isNew = false;\n                }\n            }\n            if (isNew) {\n                // \u83b7\u53d6\u65b0\u589e\u7684\n                newUserIds.add(newTargetId);\n            }\n        }\n        // \u83b7\u53d6\u9700\u8981\u53d6\u6d88\u5206\u4eab\u7684\n        List<TempShareNode> missNodes = shareNodes.stream().filter(item -> !item.getMatched())\n                .collect(Collectors.toList());\n        result.put(\"add\", newUserIds);\n        result.put(\"red\", missNodes);\n        return result;\n    }\n\n    @Data\n    private class TempShareNode {\n        private Long shareId;\n        private Integer type;\n        private Long targetId;\n        private Boolean matched = false;\n\n        public boolean targetMatch(Long tid) {\n            return targetId.equals(tid);\n        }\n    }\n\n    private TempShareNode convertNode(PanelShare panelShare) {\n        return BeanUtils.copyBean(new TempShareNode(), panelShare);\n    }\n\n    @Transactional\n    public void save(PanelShareRequest request) {\n        List<PanelGroup> panelGroups = queryGroup(request.getPanelIds());\n        // 1.\u5148\u6839\u636e\u4eea\u8868\u677f\u5220\u9664\u6240\u6709\u5df2\u7ecf\u5206\u4eab\u7684\n        Integer type = request.getType();\n        List<String> panelIds = request.getPanelIds();\n        List<Long> targetIds = request.getTargetIds();\n        // \u4f7f\u7528\u539f\u751f\u5bf9\u8c61\u4f1a\u5bfc\u81f4\u4e8b\u7269\u5931\u6548 \u6240\u4ee5\u8fd9\u91cc\u9700\u8981\u4f7f\u7528spring\u4ee3\u7406\u5bf9\u8c61\n        if (CollectionUtils.isNotEmpty(panelIds)) {\n            ShareService proxy = CommonBeanFactory.getBean(ShareService.class);\n            panelIds.forEach(panelId -> proxy.delete(panelId, type));\n        }\n        if (CollectionUtils.isEmpty(targetIds))\n            return;\n\n        long now = System.currentTimeMillis();\n        List<PanelShare> shares = panelIds.stream().flatMap(panelId -> targetIds.stream().map(targetId -> {\n            PanelShare share = new PanelShare();\n            share.setCreateTime(now);\n            share.setPanelGroupId(panelId);\n            share.setTargetId(targetId);\n            share.setType(type);\n            return share;\n        })).collect(Collectors.toList());\n        if (CollectionUtils.isNotEmpty(shares)) {\n            extPanelShareMapper.batchInsert(shares, AuthUtils.getUser().getUsername());\n        }\n\n        // \u4e0b\u9762\u662f\u53d1\u9001\u63d0\u9192\u6d88\u606f\u903b\u8f91\n        Set<Long> userIdSet;\n        AuthURD authURD = new AuthURD();\n        if (type == 0) {\n            authURD.setUserIds(targetIds);\n        }\n        if (type == 1) {\n            authURD.setRoleIds(targetIds);\n        }\n        if (type == 2) {\n            authURD.setDeptIds(targetIds);\n        }\n        userIdSet = AuthUtils.userIdsByURD(authURD);\n\n        CurrentUserDto user = AuthUtils.getUser();\n        String msg = StringUtils.joinWith(\"\uff0c\",\n                panelGroups.stream().map(PanelGroup::getName).collect(Collectors.toList()));\n        Gson gson = new Gson();\n        userIdSet.forEach(userId -> DeMsgutil.sendMsg(userId, 2L, user.getNickName() + \" \u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\u7ed9\u60a8\uff0c\u8bf7\u67e5\u6536!\",\n                gson.toJson(panelIds)));\n\n    }\n\n    private List<PanelGroup> queryGroup(List<String> panelIds) {\n        return panelIds.stream().map(panelGroupMapper::selectByPrimaryKey).collect(Collectors.toList());\n    }\n\n    /**\n     * panel_group_id\u5efa\u4e86\u7d22\u5f15 \u6548\u7387\u4e0d\u4f1a\u5f88\u5dee\n     *\n     * @param panel_group_id\n     */\n    @Transactional\n    public void delete(String panel_group_id, Integer type) {\n        PanelShareExample example = new PanelShareExample();\n        PanelShareExample.Criteria criteria = example.createCriteria();\n        criteria.andPanelGroupIdEqualTo(panel_group_id);\n        if (type != null) {\n            criteria.andTypeEqualTo(type);\n        }\n        mapper.deleteByExample(example);\n    }\n\n    public List<PanelSharePo> shareOut() {\n        return null;\n    }\n\n    public List<PanelSharePo> queryShareOut() {\n        String username = AuthUtils.getUser().getUsername();\n        return extPanelShareMapper.queryOut(username);\n    }\n\n    public List<PanelShareDto> queryTree(BaseGridRequest request) {\n        CurrentUserDto user = AuthUtils.getUser();\n        Long userId = user.getUserId();\n        Long deptId = user.getDeptId();\n        List<Long> roleIds = user.getRoles().stream().map(CurrentRoleDto::getId).collect(Collectors.toList());\n\n        Map<String, Object> param = new HashMap<>();\n        param.put(\"userId\", userId);\n        param.put(\"deptId\", deptId);\n        param.put(\"roleIds\", CollectionUtils.isNotEmpty(roleIds) ? roleIds : null);\n\n        List<PanelSharePo> data = extPanelShareMapper.query(param);\n        List<PanelShareDto> dtoLists = data.stream().map(po -> BeanUtils.copyBean(new PanelShareDto(), po))\n                .collect(Collectors.toList());\n        return convertTree(dtoLists);\n    }\n\n    // List\u6784\u5efaTree\n    private List<PanelShareDto> convertTree(List<PanelShareDto> data) {\n        String username = AuthUtils.getUser().getUsername();\n        Map<String, List<PanelShareDto>> map = data.stream()\n                .filter(panelShareDto -> StringUtils.isNotEmpty(panelShareDto.getCreator())\n                        && !StringUtils.equals(username, panelShareDto.getCreator()))\n                .collect(Collectors.groupingBy(PanelShareDto::getCreator));\n        return map.entrySet().stream().map(entry -> {\n            PanelShareDto panelShareDto = new PanelShareDto();\n            panelShareDto.setName(entry.getKey());\n            panelShareDto.setChildren(entry.getValue());\n            return panelShareDto;\n        }).collect(Collectors.toList());\n    }\n\n    public List<PanelShare> queryWithResource(PanelShareSearchRequest request) {\n        String username = AuthUtils.getUser().getUsername();\n        request.setCurrentUserName(username);\n        return extPanelShareMapper.queryWithResource(request);\n    }\n\n    public List<PanelShareOutDTO> queryTargets(String panelId) {\n        String username = AuthUtils.getUser().getUsername();\n        List<PanelShareOutDTO> targets = extPanelShareMapper.queryTargets(panelId, username);\n        if (CollectionUtils.isEmpty(targets))\n            return new ArrayList<>();\n        return targets.stream().filter(item -> StringUtils.isNotEmpty(item.getTargetName()))\n                .collect(Collectors.collectingAndThen(Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(item -> item.getPanelId() + item.getType() + item.getTargetId()))), ArrayList::new));\n    }\n\n    public void removeSharesyPanel(String panelId) {\n        PanelGroup panelGroup = panelGroupMapper.selectByPrimaryKey(panelId);\n        PanelShareRemoveRequest request = new PanelShareRemoveRequest();\n        request.setPanelId(panelId);\n        List<PanelShareOutDTO> panelShareOutDTOS = queryTargets(panelId);\n        if (CollectionUtils.isEmpty(panelShareOutDTOS) || ObjectUtils.isEmpty(panelGroup)) {\n            return;\n        }\n        extPanelShareMapper.removeShares(request);\n        if (StringUtils.isBlank(panelGroup.getName())) {\n            return;\n        }\n        panelShareOutDTOS.forEach(shareOut -> {\n            SysLogConstants.SOURCE_TYPE buiType = buiType(shareOut.getType());\n            DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelId, panelGroup.getPid(), shareOut.getTargetId(), buiType);\n        });\n\n        Map<Integer, List<PanelShareOutDTO>> listMap = panelShareOutDTOS.stream().collect(Collectors.groupingBy(dto -> dto.getType()));\n        AuthURD urd = new AuthURD();\n        for (Map.Entry<Integer, List<PanelShareOutDTO>> entry : listMap.entrySet()) {\n            List<PanelShareOutDTO> dtoList = entry.getValue();\n            if (CollectionUtils.isNotEmpty(dtoList)) {\n                List<Long> curTargetIds = dtoList.stream().map(dto -> Long.parseLong(dto.getTargetId())).collect(Collectors.toList());\n                buildRedAuthURD(entry.getKey(), curTargetIds, urd);\n            }\n        }\n        Set<Long> userIds = AuthUtils.userIdsByURD(urd);\n        if (CollectionUtils.isNotEmpty(userIds)) {\n            CurrentUserDto user = AuthUtils.getUser();\n            Gson gson = new Gson();\n            userIds.forEach(userId -> {\n                if (!user.getUserId().equals(userId)) {\n                    String msg = panelGroup.getName();\n                    List<String> msgParam = new ArrayList<>();\n                    msgParam.add(panelId);\n                    DeMsgutil.sendMsg(userId, 3L, user.getNickName() + \" \u53d6\u6d88\u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\uff0c\u8bf7\u67e5\u6536!\", gson.toJson(msgParam));\n                }\n            });\n        }\n    }\n\n    private SysLogConstants.SOURCE_TYPE buiType(Integer type) {\n        SysLogConstants.SOURCE_TYPE targetType = SysLogConstants.SOURCE_TYPE.USER;\n        if (type == 1) {\n            targetType = SysLogConstants.SOURCE_TYPE.ROLE;\n        } else if (type == 2) {\n            targetType = SysLogConstants.SOURCE_TYPE.DEPT;\n        }\n        return targetType;\n    }\n\n    @Transactional\n    public void removeShares(PanelShareRemoveRequest removeRequest) {\n        String panelId = removeRequest.getPanelId();\n        PanelGroup panelGroup = panelGroupMapper.selectByPrimaryKey(panelId);\n\n        extPanelShareMapper.removeShares(removeRequest);\n\n        SysLogConstants.SOURCE_TYPE targetType = buiType(removeRequest.getType());\n\n        DeLogUtils.save(SysLogConstants.OPERATE_TYPE.UNSHARE, SysLogConstants.SOURCE_TYPE.PANEL, panelId, panelGroup.getPid(), removeRequest.getTargetId(), targetType);\n\n        AuthURD sharedAuthURD = new AuthURD();\n        List<Long> removeIds = new ArrayList<Long>() {{\n            add(removeRequest.getTargetId());\n        }};\n        buildRedAuthURD(removeRequest.getType(), removeIds, sharedAuthURD);\n        CurrentUserDto user = AuthUtils.getUser();\n        Gson gson = new Gson();\n\n        String msg = panelGroup.getName();\n\n        List<String> msgParam = new ArrayList<>();\n        msgParam.add(panelId);\n        Set<Long> redIds = AuthUtils.userIdsByURD(sharedAuthURD);\n        redIds.forEach(userId -> {\n            if (!user.getUserId().equals(userId)) {\n                DeMsgutil.sendMsg(userId, 3L, user.getNickName() + \" \u53d6\u6d88\u5206\u4eab\u4e86\u4eea\u8868\u677f\u3010\" + msg + \"\u3011\uff0c\u8bf7\u67e5\u6536!\",\n                        gson.toJson(msgParam));\n            }\n        });\n\n    }\n\n}\n"], "filenames": ["backend/src/main/java/io/dataease/service/panel/ShareService.java"], "buggy_code_start_loc": [7], "buggy_code_end_loc": [395], "fixing_code_start_loc": [6], "fixing_code_end_loc": [398], "type": "CWE-639", "message": "DataEase is an open source data visualization and analysis tool. The API interface for DataEase delete dashboard and delete system messages is vulnerable to insecure direct object references (IDOR). This could result in a user deleting another user's dashboard or messages or interfering with the interface for marking messages read. The vulnerability has been fixed in v1.18.7. There are no known workarounds aside from upgrading.", "other": {"cve": {"id": "CVE-2023-32310", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-01T16:15:09.643", "lastModified": "2023-06-09T17:24:45.173", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "DataEase is an open source data visualization and analysis tool. The API interface for DataEase delete dashboard and delete system messages is vulnerable to insecure direct object references (IDOR). This could result in a user deleting another user's dashboard or messages or interfering with the interface for marking messages read. The vulnerability has been fixed in v1.18.7. There are no known workarounds aside from upgrading."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-639"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dataease:dataease:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.18.7", "matchCriteriaId": "C93D0BD1-CE9D-4B2C-B865-66A271A8451C"}]}]}], "references": [{"url": "https://github.com/dataease/dataease/commit/72f428e87b5395c03d2f94ef6185fc247ddbc8dc", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/dataease/dataease/pull/5342", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/dataease/dataease/releases/tag/v1.18.7", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/dataease/dataease/security/advisories/GHSA-7hv6-gv38-78wj", "source": "security-advisories@github.com", "tags": ["Exploit", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/dataease/dataease/commit/72f428e87b5395c03d2f94ef6185fc247ddbc8dc"}}