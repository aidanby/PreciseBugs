{"buggy_code": ["using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing K4os.Hash.xxHash;\nusing SharpCompress.Archives;\nusing SharpCompress.Common;\nusing SharpCompress.Readers;\n\nnamespace OpenUtau.Classic {\n\n    public class VoicebankInstaller {\n        const string kCharacterTxt = \"character.txt\";\n        const string kCharacterYaml = \"character.yaml\";\n        const string kInstallTxt = \"install.txt\";\n\n        private string basePath;\n        private readonly Action<double, string> progress;\n        private readonly Encoding archiveEncoding;\n        private readonly Encoding textEncoding;\n\n        public VoicebankInstaller(string basePath, Action<double, string> progress, Encoding archiveEncoding, Encoding textEncoding) {\n            Directory.CreateDirectory(basePath);\n            this.basePath = basePath;\n            this.progress = progress;\n            this.archiveEncoding = archiveEncoding ?? Encoding.GetEncoding(\"shift_jis\");\n            this.textEncoding = textEncoding ?? Encoding.GetEncoding(\"shift_jis\");\n        }\n\n        public void LoadArchive(string path) {\n            progress.Invoke(0, \"Analyzing archive...\");\n            var readerOptions = new ReaderOptions {\n                ArchiveEncoding = new ArchiveEncoding(archiveEncoding, archiveEncoding)\n            };\n            var extractionOptions = new ExtractionOptions {\n                Overwrite = true,\n            };\n            using (var archive = ArchiveFactory.Open(path, readerOptions)) {\n                var touches = new List<string>();\n                AdjustBasePath(archive, path, touches);\n                int total = archive.Entries.Count();\n                int count = 0;\n                bool hasCharacterYaml = archive.Entries.Any(e => e.Key.EndsWith(kCharacterYaml));\n                foreach (var entry in archive.Entries) {\n                    var filePath = Path.Combine(basePath, entry.Key);\n                    Directory.CreateDirectory(Path.GetDirectoryName(filePath));\n                    if (!entry.IsDirectory && entry.Key != kInstallTxt) {\n                        entry.WriteToFile(Path.Combine(basePath, entry.Key), extractionOptions);\n                        if (!hasCharacterYaml && filePath.EndsWith(kCharacterTxt)) {\n                            var config = new VoicebankConfig() {\n                                TextFileEncoding = textEncoding.WebName,\n                            };\n                            using (var stream = File.Open(filePath.Replace(\".txt\", \".yaml\"), FileMode.Create)) {\n                                config.Save(stream);\n                            }\n                        }\n                    }\n                    progress.Invoke(100.0 * ++count / total, entry.Key);\n                }\n                foreach (var touch in touches) {\n                    File.WriteAllText(touch, \"\\n\");\n                    var config = new VoicebankConfig() {\n                        TextFileEncoding = textEncoding.WebName,\n                    };\n                    using (var stream = File.Open(touch.Replace(\".txt\", \".yaml\"), FileMode.Create)) {\n                        config.Save(stream);\n                    }\n                }\n            }\n        }\n\n        private void AdjustBasePath(IArchive archive, string archivePath, List<string> touches) {\n            var dirsAndFiles = archive.Entries.Select(e => e.Key).ToHashSet();\n            var rootDirs = archive.Entries\n                .Where(e => e.IsDirectory)\n                .Where(e => (e.Key.IndexOf('\\\\') < 0 || e.Key.IndexOf('\\\\') == e.Key.Length - 1)\n                         && (e.Key.IndexOf('/') < 0 || e.Key.IndexOf('/') == e.Key.Length - 1))\n                .ToArray();\n            var rootFiles = archive.Entries\n                .Where(e => !e.IsDirectory)\n                .Where(e => !e.Key.Contains('\\\\') && !e.Key.Contains('/') && e.Key != kInstallTxt)\n                .ToArray();\n            if (rootFiles.Count() > 0) {\n                // Need to create root folder.\n                basePath = Path.Combine(basePath, Path.GetFileNameWithoutExtension(archivePath).Trim());\n                if (rootFiles.Where(e => e.Key == kCharacterTxt).Count() == 0) {\n                    // Need to create character.txt.\n                    touches.Add(Path.Combine(basePath, kCharacterTxt));\n                }\n                return;\n            }\n            foreach (var rootDir in rootDirs) {\n                if (!dirsAndFiles.Contains($\"{rootDir.Key}{kCharacterTxt}\") &&\n                    !dirsAndFiles.Contains($\"{rootDir.Key}\\\\{kCharacterTxt}\") &&\n                    !dirsAndFiles.Contains($\"{rootDir.Key}/{kCharacterTxt}\")) {\n                    touches.Add(Path.Combine(basePath, rootDir.Key, kCharacterTxt));\n                }\n            }\n        }\n\n        static string HashPath(string path) {\n            string file = Path.GetFileName(path);\n            string dir = Path.GetDirectoryName(path);\n            file = $\"{XXH32.DigestOf(Encoding.UTF8.GetBytes(file)):x8}\";\n            if (string.IsNullOrEmpty(dir)) {\n                return file;\n            }\n            return Path.Combine(HashPath(dir), file);\n        }\n    }\n}\n"], "fixing_code": ["using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing K4os.Hash.xxHash;\nusing SharpCompress.Archives;\nusing SharpCompress.Common;\nusing SharpCompress.Readers;\n\nnamespace OpenUtau.Classic {\n\n    public class VoicebankInstaller {\n        const string kCharacterTxt = \"character.txt\";\n        const string kCharacterYaml = \"character.yaml\";\n        const string kInstallTxt = \"install.txt\";\n\n        private string basePath;\n        private readonly Action<double, string> progress;\n        private readonly Encoding archiveEncoding;\n        private readonly Encoding textEncoding;\n\n        public VoicebankInstaller(string basePath, Action<double, string> progress, Encoding archiveEncoding, Encoding textEncoding) {\n            Directory.CreateDirectory(basePath);\n            this.basePath = basePath;\n            this.progress = progress;\n            this.archiveEncoding = archiveEncoding ?? Encoding.GetEncoding(\"shift_jis\");\n            this.textEncoding = textEncoding ?? Encoding.GetEncoding(\"shift_jis\");\n        }\n\n        public void LoadArchive(string path) {\n            progress.Invoke(0, \"Analyzing archive...\");\n            var readerOptions = new ReaderOptions {\n                ArchiveEncoding = new ArchiveEncoding(archiveEncoding, archiveEncoding)\n            };\n            var extractionOptions = new ExtractionOptions {\n                Overwrite = true,\n            };\n            using (var archive = ArchiveFactory.Open(path, readerOptions)) {\n                var touches = new List<string>();\n                AdjustBasePath(archive, path, touches);\n                int total = archive.Entries.Count();\n                int count = 0;\n                bool hasCharacterYaml = archive.Entries.Any(e => e.Key.EndsWith(kCharacterYaml));\n                foreach (var entry in archive.Entries) {\n                    if (!(entry.Key.Contains(\"..\")))//detect zipSlip attack\n                    {\n                        var filePath = Path.Combine(basePath, entry.Key);\n                        Directory.CreateDirectory(Path.GetDirectoryName(filePath));\n                        if (!entry.IsDirectory && entry.Key != kInstallTxt) {\n                            entry.WriteToFile(Path.Combine(basePath, entry.Key), extractionOptions);\n                            if (!hasCharacterYaml && filePath.EndsWith(kCharacterTxt)) {\n                                var config = new VoicebankConfig() {\n                                    TextFileEncoding = textEncoding.WebName,\n                                };\n                                using (var stream = File.Open(filePath.Replace(\".txt\", \".yaml\"), FileMode.Create)) {\n                                    config.Save(stream);\n                                }\n                            }\n                        } \n                    }\n                    progress.Invoke(100.0 * ++count / total, entry.Key);\n                }\n                foreach (var touch in touches) {\n                    File.WriteAllText(touch, \"\\n\");\n                    var config = new VoicebankConfig() {\n                        TextFileEncoding = textEncoding.WebName,\n                    };\n                    using (var stream = File.Open(touch.Replace(\".txt\", \".yaml\"), FileMode.Create)) {\n                        config.Save(stream);\n                    }\n                }\n            }\n        }\n\n        private void AdjustBasePath(IArchive archive, string archivePath, List<string> touches) {\n            var dirsAndFiles = archive.Entries.Select(e => e.Key).ToHashSet();\n            var rootDirs = archive.Entries\n                .Where(e => e.IsDirectory)\n                .Where(e => (e.Key.IndexOf('\\\\') < 0 || e.Key.IndexOf('\\\\') == e.Key.Length - 1)\n                         && (e.Key.IndexOf('/') < 0 || e.Key.IndexOf('/') == e.Key.Length - 1))\n                .ToArray();\n            var rootFiles = archive.Entries\n                .Where(e => !e.IsDirectory)\n                .Where(e => !e.Key.Contains('\\\\') && !e.Key.Contains('/') && e.Key != kInstallTxt)\n                .ToArray();\n            if (rootFiles.Count() > 0) {\n                // Need to create root folder.\n                basePath = Path.Combine(basePath, Path.GetFileNameWithoutExtension(archivePath).Trim());\n                if (rootFiles.Where(e => e.Key == kCharacterTxt).Count() == 0) {\n                    // Need to create character.txt.\n                    touches.Add(Path.Combine(basePath, kCharacterTxt));\n                }\n                return;\n            }\n            foreach (var rootDir in rootDirs) {\n                if (!dirsAndFiles.Contains($\"{rootDir.Key}{kCharacterTxt}\") &&\n                    !dirsAndFiles.Contains($\"{rootDir.Key}\\\\{kCharacterTxt}\") &&\n                    !dirsAndFiles.Contains($\"{rootDir.Key}/{kCharacterTxt}\")) {\n                    touches.Add(Path.Combine(basePath, rootDir.Key, kCharacterTxt));\n                }\n            }\n        }\n\n        static string HashPath(string path) {\n            string file = Path.GetFileName(path);\n            string dir = Path.GetDirectoryName(path);\n            file = $\"{XXH32.DigestOf(Encoding.UTF8.GetBytes(file)):x8}\";\n            if (string.IsNullOrEmpty(dir)) {\n                return file;\n            }\n            return Path.Combine(HashPath(dir), file);\n        }\n    }\n}\n"], "filenames": ["OpenUtau.Core/Classic/VoicebankInstaller.cs"], "buggy_code_start_loc": [46], "buggy_code_end_loc": [58], "fixing_code_start_loc": [46], "fixing_code_end_loc": [61], "type": "CWE-22", "message": "A vulnerability was found in stakira OpenUtau. It has been classified as critical. This affects the function VoicebankInstaller of the file OpenUtau.Core/Classic/VoicebankInstaller.cs of the component ZIP Archive Handler. The manipulation leads to path traversal. Upgrading to version 0.0.991 is able to address this issue. The name of the patch is 849a0a6912aac8b1c28cc32aa1132a3140caff4a. It is recommended to upgrade the affected component. The identifier VDB-217617 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-4880", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T13:15:09.700", "lastModified": "2023-01-12T18:54:47.407", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in stakira OpenUtau. It has been classified as critical. This affects the function VoicebankInstaller of the file OpenUtau.Core/Classic/VoicebankInstaller.cs of the component ZIP Archive Handler. The manipulation leads to path traversal. Upgrading to version 0.0.991 is able to address this issue. The name of the patch is 849a0a6912aac8b1c28cc32aa1132a3140caff4a. It is recommended to upgrade the affected component. The identifier VDB-217617 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openutau:openutau:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.0.991", "matchCriteriaId": "5795F45C-3968-4F8B-A00F-A40F85059171"}]}]}], "references": [{"url": "https://github.com/stakira/OpenUtau/commit/849a0a6912aac8b1c28cc32aa1132a3140caff4a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/stakira/OpenUtau/pull/544", "source": "cna@vuldb.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/stakira/OpenUtau/releases/tag/build%2F0.0.991", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217617", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217617", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/stakira/OpenUtau/commit/849a0a6912aac8b1c28cc32aa1132a3140caff4a"}}