{"buggy_code": ["<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- Account -->\n<article class=\"main\">\n    <header>\n\t\t<h1><?php echo I18n::__('account_h1') ?></h1>\n\t\t<nav>\n            <?php echo $toolbar ?>\n        </nav>\n    </header>\n    <form\n        id=\"form-<?php echo $record->getMeta('type') ?>\"\n        class=\"panel panel-<?php echo $record->getMeta('type') ?> action-changepassword\"\n        method=\"POST\"\n        accept-charset=\"utf-8\"\n        enctype=\"multipart/form-data\">        \n        <!-- changepassword form -->\n        <fieldset>\n            <legend><?php echo I18n::__('account_legend_changepassword') ?></legend>\n            <div\n                class=\"row <?php echo $record->hasError('pw') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-pw\">\n                    <?php echo I18n::__('user_label_pw') ?>\n                </label>\n                <input\n                    type=\"password\"\n                    id=\"user-pw\"\n                    name=\"pw\"\n                    value=\"\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('pwnew') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-pw-new\">\n                    <?php echo I18n::__('account_label_newpassword') ?>\n                </label>\n                <input\n                    type=\"password\"\n                    id=\"user-pw-new\"\n                    name=\"pw_new\"\n                    value=\"\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('pwrepeated') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-pw-new\">\n                    <?php echo I18n::__('account_label_repeatedpassword') ?>\n                </label>\n                <input\n                    type=\"password\"\n                    id=\"user-pw-repeated\"\n                    name=\"pw_repeated\"\n                    value=\"\"\n                    required=\"required\" />\n            </div>\n        </fieldset>\n        <!-- End of changepassword form -->\n        <div class=\"buttons\">\n            <input type=\"submit\" name=\"submit\" value=\"<?php echo I18n::__('account_submit_changepassword') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of Login -->\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- Account -->\n<article class=\"main\">\n    <header>\n\t\t<h1><?php echo I18n::__('account_h1') ?></h1>\n\t\t<nav>\n            <?php echo $toolbar ?>\n        </nav>\n    </header>\n    <form\n        id=\"form-<?php echo $record->getMeta('type') ?>\"\n        class=\"panel panel-<?php echo $record->getMeta('type') ?> action-profile\"\n        method=\"POST\"\n        accept-charset=\"utf-8\"\n        enctype=\"multipart/form-data\">\n        <div>\n            <img\n        \t\tsrc=\"<?php echo Gravatar::src($record->email, 72) ?>\"\n        \t\tclass=\"gravatar-account circular no-shadow\"\n        \t\twidth=\"72\"\n        \t\theight=\"72\"\n        \t\talt=\"<?php echo htmlspecialchars($record->getName()) ?>\" />\n        </div>     \n        <!-- account form -->\n        <fieldset>\n            <legend><?php echo I18n::__('account_legend') ?></legend>\n            <div\n                class=\"row <?php echo $record->hasError('name') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-name\">\n                    <?php echo I18n::__('user_label_name') ?>\n                </label>\n                <input\n                    type=\"text\"\n                    id=\"user-name\"\n                    name=\"dialog[name]\"\n                    value=\"<?php echo htmlspecialchars($record->name) ?>\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('email') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-email\">\n                    <?php echo I18n::__('user_label_email') ?>\n                </label>\n                <input\n                    type=\"email\"\n                    id=\"user-email\"\n                    name=\"dialog[email]\"\n                    value=\"<?php echo htmlspecialchars($record->email) ?>\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('shortname') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-shortname\">\n                    <?php echo I18n::__('user_label_shortname') ?>\n                </label>\n                <input\n                    type=\"text\"\n                    id=\"user-shortname\"\n                    name=\"dialog[shortname]\"\n                    value=\"<?php echo htmlspecialchars($record->shortname) ?>\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('screenname') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-screenname\">\n                    <?php echo I18n::__('user_label_screenname') ?>\n                </label>\n                <select\n                    id=\"user-screenname\"\n                    name=\"dialog[screenname]\">\n                    <?php foreach (array('name','email','shortname') as $_attr_name): ?>\n                    <option\n                        value=\"<?php echo $_attr_name ?>\"\n                        <?php echo ($record->screenname == $_attr_name) ? 'selected=\"selected\"' : '' ?>>\n                        <?php echo I18n::__('user_label_'.$_attr_name) ?>\n                    </option>\n                    <?php endforeach ?>\n                </select>\n            </div>\n        </fieldset>\n        <!-- End of account form -->\n        <div class=\"buttons\">\n            <input type=\"submit\" name=\"submit\" value=\"<?php echo I18n::__('account_submit') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of Account -->\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- Login -->\n<?php if (isset($message)): ?>\n<!-- notifications of the current user -->\n<div\n    id=\"notification\"\n    class=\"notification\">\n    <div class=\"alert alert-error\">\n        <?php echo Flight::textile($message) ?>\n    </div>\n</div>\n<!-- End of notifications -->\n<?php endif ?>\n<article class=\"main\">\n    <header>\n\t\t<h1><?php echo I18n::__('login_h1') ?></h1>\n    </header>\n    <form\n        id=\"form-login\"\n        class=\"panel login\"\n        method=\"POST\"\n        accept-charset=\"utf-8\">\n        <div>\n            <input type=\"hidden\" name=\"dialog[type]\" value=\"<?php echo $record->getMeta('type') ?>\" />\n            <input type=\"hidden\" name=\"dialog[id]\" value=\"<?php echo $record->getId() ?>\" />\n            <input\n                type=\"hidden\"\n                name=\"dialog[stamp]\"\n                value=\"<?php echo htmlspecialchars($record->stamp) ?>\" />\n            <input\n                type=\"hidden\"\n                name=\"dialog[ipaddr]\"\n                value=\"<?php echo htmlspecialchars($record->ipaddr) ?>\" />\n            <input\n                type=\"hidden\"\n                name=\"dialog[attempt]\"\n                value=\"<?php echo htmlspecialchars($record->attempt) ?>\" />\n            <input type=\"hidden\" name=\"goto\" value=\"<?php echo $goto ?>\" />\n        </div>\n        <fieldset>\n            <legend><?php echo I18n::__('login_legend') ?></legend>\n            <div\n                class=\"row <?php echo $record->hasError('uname') ? 'error' : '' ?>\">\n                <label\n                    for=\"login-username\">\n                    <?php echo I18n::__('login_label_username') ?>\n                </label>\n                <input\n                    type=\"text\"\n                    id=\"login-username\"\n                    name=\"dialog[uname]\"\n                    value=\"<?php echo htmlspecialchars($record->uname) ?>\"\n                    required=\"required\"\n \t\t\t\t\tautofocus=\"autofocus\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('pw') ? 'error' : '' ?>\">\n                <label\n                    for=\"login-password\">\n                    <?php echo I18n::__('login_label_password') ?>\n                </label>\n                <input\n                    type=\"password\"\n                    id=\"login-password\"\n                    name=\"dialog[pw]\"\n                    value=\"\"\n                    required=\"required\" />\n            </div>\n        </fieldset>\n        <div class=\"buttons\">\n            <a\n                href=\"<?php echo Url::build('/lostpassword') ?>\"\n                class=\"btn\">\n                <?php echo I18n::__('login_link_lostpassword') ?>\n            </a>\n            <input type=\"submit\" name=\"submit\" value=\"<?php echo I18n::__('login_submit') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of Login -->\n", "<?php\n/**\n * Template to aquire a new password.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- Login -->\n<?php if (isset($message)): ?>\n<!-- notifications of the current user -->\n<div\n    id=\"notification\"\n    class=\"notification\">\n    <div class=\"alert alert-warning\">\n        <?php echo Flight::textile($message) ?>\n    </div>\n</div>\n<!-- End of notifications -->\n<?php endif ?>\n<article class=\"main\">\n    <header>\n\t\t<h1><?php echo I18n::__('lostpassword_h1') ?></h1>\n    </header>\n    <form\n        id=\"form-lostpassword\"\n        class=\"panel lostpassword\"\n        method=\"POST\"\n        accept-charset=\"utf-8\">\n        <fieldset>\n            <legend><?php echo I18n::__('lostpassword_legend') ?></legend>\n            <div\n                class=\"row\">\n                <label\n                    for=\"lostpassword-username\">\n                    <?php echo I18n::__('lostpassword_label_username') ?>\n                </label>\n                <input\n                    type=\"email\"\n                    id=\"lostpassword-username\"\n                    name=\"dialog[uname]\"\n                    value=\"<?php echo htmlspecialchars($uname) ?>\"\n                    required=\"required\"\n \t\t\t\t\tautofocus=\"autofocus\" />\n            </div>\n        </fieldset>\n        <div class=\"buttons\">\n            <a\n                href=\"<?php echo Url::build('/login') ?>\"\n                class=\"btn\">\n                <?php echo I18n::__('lostpassword_link_login') ?>\n            </a>\n            <input type=\"submit\" name=\"submit\" value=\"<?php echo I18n::__('lostpassword_submit') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of Login -->\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- admin index page -->\n<article class=\"main\">\n\t<header>\n    \t<h1><?php echo I18n::__('admin_h1') ?></h1>\n\t</header>\n\t<form\n        id=\"form-<?php echo $record->getMeta('type') ?>\"\n        class=\"panel panel-<?php echo $record->getMeta('type') ?> action-edit\"\n        method=\"POST\"\n        accept-charset=\"utf-8\"\n        enctype=\"multipart/form-data\">\n        <?php echo $form_details ?>\n        <div class=\"buttons\">\n            <input\n                type=\"submit\"\n                name=\"submit\"\n                accesskey=\"s\"\n                value=\"<?php echo I18n::__('admin_submit_setting') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of admin index page -->\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<article class=\"main\">\n    <header id=\"header-toolbar\" class=\"fixable\">\n        <h1><?php echo I18n::__(\"{$type}_h1\") ?></h1>\n        <nav>\n            <?php echo $toolbar ?>\n        </nav>\n    </header>\n    <!-- scaffold edit form -->\n    <form\n        id=\"form-<?php echo $record->getMeta('type') ?>\"\n        class=\"panel panel-<?php echo $record->getMeta('type') ?> action-<?php echo $current_action ?>\"\n        method=\"POST\"\n        accept-charset=\"utf-8\"\n        enctype=\"multipart/form-data\">\n        \n        <!-- form details -->\n        <?php echo $form_details ?>\n        <!-- end of form details -->\n        \n        <!-- Scaffold buttons -->\n        <div class=\"buttons\">\n            <select name=\"next_action\">\n                <?php foreach ($actions[$current_action] as $action): ?>\n                <option\n                    value=\"<?php echo $action ?>\"\n                    <?php echo ($next_action == $action) ? 'selected=\"selected\"' : '' ?>><?php echo I18n::__(\"action_{$action}_select\") ?></option>\n                <?php endforeach ?>\n            </select>\n            <input\n                type=\"submit\"\n                name=\"submit\"\n                accesskey=\"s\"\n                value=\"<?php echo I18n::__('scaffold_submit_apply_action') ?>\" />\n        </div>\n        <!-- End of Scaffold buttons -->\n    </form>\n</article>\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Account controller.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @version $Id$\n */\nclass Controller_Account extends Controller\n{\n    /**\n     * Holds the template to render.\n     *\n     * @var string\n     */\n    public $template;\n\n    /**\n     * Displays the currently logged user account.\n     *\n     * A GET request will simply display the page and a POST request will change\n     * the user account.\n     */\n    public function index()\n    {\n        session_start();\n        Auth::check();\n        $this->template = 'account/index';\n        \n        if (Flight::request()->method == 'POST') {\n            Flight::get('user')->import(Flight::request()->data->dialog);\n            try {\n                R::store(Flight::get('user'));\n                Flight::get('user')->notify(I18n::__('account_edit_success'), 'success');\n                $this->redirect('/account/');\n            }\n            catch (Exception $e) {\n                Flight::get('user')->notify(I18n::__('account_edit_failure'), 'error');\n            }    \n        }\n        \n        $this->render();\n    }\n    \n    /**\n     * Displays a page to change the password.\n     *\n     * A GET request will simply display the page and a POST request will try to\n     * change the password.\n     */\n    public function changepassword()\n    {\n        session_start();\n        Auth::check();\n        $this->template = 'account/changepassword';\n        \n        if (Flight::request()->method == 'POST') {\n            if (Flight::get('user')->changePassword(\n                Flight::request()->data->pw,\n                Flight::request()->data->pw_new,\n                Flight::request()->data->pw_repeated\n            )) {\n                try {\n                    R::store(Flight::get('user'));\n                    Flight::get('user')->notify(I18n::__('account_changepassword_success'), 'success');\n                    $this->redirect('/account/');\n                }\n                catch (Exception $e) {\n                    //Whoops, what nu?\n                }\n            }\n            else {\n                Flight::get('user')->notify(I18n::__('account_changepassword_failure'), 'error');\n            }    \n        }\n        \n        $this->render();\n    }\n    \n    /**\n     * Renders the account page.\n     */\n    protected function render()\n    {\n\t    Flight::render('shared/notification', array(), 'notification');\n\t    //\n        Flight::render('shared/navigation/account', array(), 'navigation_account');\n\t\tFlight::render('shared/navigation/main', array(), 'navigation_main');\n        Flight::render('shared/navigation', array(), 'navigation');\n        Flight::render('account/toolbar', array(), 'toolbar');\n\t\tFlight::render('shared/header', array(), 'header');\n\t\tFlight::render('shared/footer', array(), 'footer');\n\t\tFlight::render($this->template, array(\n\t\t    'record' => Flight::get('user')\n\t\t), 'content');\n        Flight::render('html5', array(\n            'title' => I18n::__(\"account_head_title\"),\n            'language' => Flight::get('language')\n        ));\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Login controller.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @version $Id$\n */\nclass Controller_Login extends Controller\n{\n    /**\n     * May hold a message (textile) to the user that want to re-enter a password.\n     */\n    public $message;\n\n    /**\n     * Renders the login page.\n     *\n     * Renders the login page and handles a login attempt on POST if no valid\n     * session already exists. If credentials given are correct a session is started\n     * and the client is redirected to the originally requested URL or the /cms page if\n     * no URL was provided.\n     */\n    public function index()\n    {\n        session_start();\n        if ( ! isset($_SESSION['login_id'])) {\n            $_SESSION['login_id'] = 0;\n        }\n        $login = R::load('login', $_SESSION['login_id']);\n        if (Flight::request()->method == 'POST') {\n            try {\n                $login = R::graph( Flight::request()->data->dialog, TRUE );\n                if ($login->trial()) {\n                    //you must trial before store because of pw reset in update\n                    $_SESSION['user']['id'] = $login->user->getId();\n                    $_SESSION['backend']['language'] = Flight::get('language');\n                    $login->user->sid = session_id();\n                    R::store($login);\n                    $this->redirect(Flight::request()->data->goto, $raw = true);\n                }\n                $this->message = I18n::__('login_failed');\n                R::store($login);\n            } catch (Exception $e) {\n                error_log($e);\n                //uups, login could not be saved\n            }\n        }\n        // either no yet submitted or the credentials given failed\n        if ( Flight::request()->query->goto == '' || Flight::request()->query->goto == '/login' ) {\n            $goto = '/cms';\n        } else {\n            $goto = Flight::request()->query->goto;\n        }\n        Flight::render('account/login', array(\n            'goto' => htmlspecialchars($goto),\n            'record' => $login,\n            'message' => $this->message\n        ), 'content');\n        Flight::render('html5', array(\n            'title' => I18n::__('login_head_title'),\n            'language' => Flight::get('language'),\n            'stylesheets' => array('custom', 'default')\n        ));\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Lostpassword controller.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @version $Id$\n */\nclass Controller_Lostpassword extends Controller\n{\n    /**\n     * Holds the template to render.\n     *\n     * @var string\n     */\n    public $template = 'account/lostpassword';\n    \n    /**\n     * Holds the username entered by the password seeking party.\n     */\n    public $uname = '';\n    \n    /**\n     * May hold a message (textile) to the user that want to re-enter a password.\n     */\n    public $message;\n\n    /**\n     * Displays a page to request a new password.\n     *\n     * A GET request will simply display the page and a POST request will change\n     * the user account.\n     */\n    public function index()\n    {\n        if (Flight::request()->method == 'POST') {\n            $this->uname = Flight::request()->data->dialog['uname'];\n            if ( ! $user = R::findOne('user', ' email = ? LIMIT 1 ', array($this->uname))) {\n                $this->message = I18n::__('lostpassword_user_unknown');\n            } elseif ( ! $user->requestPassword()) {\n                $this->message = I18n::__('lostpassword_email_failed');\n            } else {\n                $this->redirect('login');\n            }\n        }\n        \n        $this->render();\n    }\n    \n    /**\n     * Renders the lostpassword page.\n     */\n    protected function render()\n    {\n\t\tFlight::render($this->template, array(\n\t\t    'uname' => $this->uname,\n\t\t    'message' => $this->message\n\t\t), 'content');\n        Flight::render('html5', array(\n            'title' => I18n::__(\"lostpassword_head_title\"),\n            'language' => Flight::get('language'),\n            'stylesheets' => array('custom', 'default')\n        ));\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Scaffold controller.\n *\n * @todo Main points:\n *  - Allow different layouts\n *\n * @package Cinnebar\n * @subpackage Controller\n * @version $Id$\n */\nclass Controller_Scaffold extends Controller\n{\n    /**\n     * Container for javascripts to load.\n     *\n     * @var array\n     */\n    public $javascripts = array(\n        '/js/jquery.mjs.nestedSortable'\n    );\n\n    /**\n     * Holds the base url.\n     *\n     * @var string\n     */\n    public $base_url;\n\n    /**\n     * Holds the type of the bean(s) to handle.\n     *\n     * @var string\n     */\n    public $type;\n\n    /**\n     * Holds the id of the bean to handle.\n     *\n     * @var int\n     */\n    public $id;\n\n    /**\n     * Holds possible actions.\n     *\n     * @var array\n     */\n    public $actions;\n\n    /**\n     * Holds the name of the action that was requested.\n     *\n     * @var string\n     */\n    public $action;\n\n    /**\n     * Holds the name of the layout to use.\n     *\n     * @var string\n     */\n    public $layout;\n\n    /**\n     * Holds the real template to render.\n     *\n     * @var string\n     */\n    public $template;\n\n    /**\n     * Holds a instance of the bean to handle.\n     *\n     * @var RedBean_OODBBean\n     */\n    public $record;\n\n    /**\n     * Holds a instance of a filter bean.\n     *\n     * @var RedBean_OODBBean\n     */\n    public $filter;\n\n    /**\n     * Container for beans to browse.\n     *\n     * @var array\n     */\n    public $records = array();\n\n    /**\n     * Holds the maximum number of records per page.\n     *\n     * @var int\n     */\n    public $limit = CINNEBAR_RECORDS_PER_PAGE;\n\n    /**\n     * Holds the default layout for index.\n     *\n     * @var string\n     */\n    public $default_layout = 'table';\n\n    /**\n     * Holds the total number of beans found.\n     *\n     * @var int\n     */\n    public $total_records = 0;\n\n    /**\n     * Container for selected beans.\n     *\n     * @var array\n     */\n    public $selection = array();\n\n    /**\n     * Holds the current page.\n     *\n     * @var int\n     */\n    public $page = 1;\n\n    /**\n     * Holds the current order index.\n     *\n     * @var int\n     */\n    public $order = 0;\n\n    /**\n     * Holds the current sort dir(ection) index.\n     *\n     * @var int\n     */\n    public $dir = 0;\n\n    /**\n     * Container for order dir(ections).\n     *\n     * @var array\n     */\n    public $dir_map = array(\n        0 => 'ASC',\n        1 => 'DESC'\n    );\n\n    /**\n     * Holds a instance of a Pagination class.\n     *\n     * @var Pagination\n     */\n    public $pagination;\n\n    /**\n     * Constructs a new Scaffold controller.\n     *\n     * @todo get rid of eval and develop gestalt more\n     *\n     * @param string $base_url for scaffold links and redirects\n     * @param string $type of the bean to scaffold\n     * @param int (optional) $id of the bean to handle\n     */\n    public function __construct($base_url, $type, $id = null)\n    {\n        session_start();\n        Auth::check();\n        if (Flight::get('user')->hasfoxylisteditor()) {\n            $this->javascripts[] = '/js/table-edits.min';\n            $this->javascripts[] = '/js/foxylisteditor';\n        }\n        $this->limit = Flight::get('user')->getRecordsPerPage($type);\n        $this->base_url = $base_url;\n        $this->type = $type;\n        $this->id = $id;\n        $this->layout = $this->default_layout;\n        try {\n            $this->record = R::load($type, $id);\n        } catch (Exception $e) {\n            error_log(\"Scaffold::__construct() tried to load a bean, but failed. Check if your database is not frozen and a table for the bean type exists. If not unfreeze and try again.\\n\".$e);\n            exit('No bean type could be created. Unfreeze your database.');\n        }\n        $this->actions = $this->record->getActions();\n        if (! isset($_SESSION['scaffold'][$this->type])) {\n            $_SESSION['scaffold'][$this->type]['filter']['id'] = 0;\n            // next action\n            $_SESSION['scaffold'][$this->type]['index']['next_action'] = 'idle';\n            $_SESSION['scaffold'][$this->type]['add']['next_action'] = 'add';\n            $_SESSION['scaffold'][$this->type]['edit']['next_action'] = 'edit';\n            $_SESSION['scaffold'][$this->type]['delete']['next_action'] = 'index';\n        }\n        $this->filter = R::load('filter', $_SESSION['scaffold'][$this->type]['filter']['id']);\n    }\n\n    /**\n     * Detach a record.\n     *\n     * @param string $subtype the type of bean to handle\n     * @param int (optional) id of the bean to detach\n     * @return void\n     */\n    public function detach($subtype, $id = 0)\n    {\n        $record = R::load($subtype, $id);\n        R::begin();\n        try {\n            R::trash($record);//store or trash -- nothing else works here\n            R::commit();\n            return true;\n        } catch (Exception $e) {\n            error_log($e);\n            R::rollback();\n            return false;\n        }\n    }\n\n    /**\n     * Attach a record.\n     *\n     * To use the attach function you will need to have subform templates in your model\n     * folder. For example see model/person/own/address.\n     *\n     * @param string $prefix either own or shared\n     * @param string $subtype the type of bean to handle\n     * @param int (optional) id of the bean to detach\n     * @return void\n     */\n    public function attach($prefix, $subtype, $id = 0)\n    {\n        $index = md5(microtime(true));\n        $_subrecord = R::dispense($subtype);\n        Flight::render(sprintf('model/%s/%s/%s', $this->type, $prefix, $subtype), array(\n            'record' => $this->record,\n            '_'.$subtype => $_subrecord,\n            'index' => $index\n        ));\n        return true;\n    }\n\n    /**\n     * This function is called by an AJAX post request in case user\n     * has foxylisteditor set to true and saved a record in list view.\n     *\n     * @return void\n     */\n    public function inline()\n    {\n        $data = Flight::request()->data;\n        foreach ($data as $key => $value) {\n            $this->record->{$key} = $value;\n        }\n        try {\n            R::store($this->record);\n            $ret = 'good';\n        } catch (Exception $e) {\n            error_log($e);\n            $ret = 'bad';\n        }\n        echo json_encode(['result' => $ret]);\n        return true;\n    }\n\n    /**\n     * Returns true or false wether the bean was stored or not.\n     *\n     * The current bean is challanged to be stored wrapped in a transaction. When the bean was\n     * successfully stored a message is send to the user telling about that. In case the store\n     * fails a failure message is send to the current user.\n     *\n     * @uses $record\n     * @param string $redbeanAction can be either trash or store\n     * @return bool\n     */\n    protected function doRedbeanAction($redbeanAction = 'store')\n    {\n        R::begin();\n        try {\n            R::$redbeanAction($this->record);//store or trash -- nothing else works here\n            R::commit();\n            $this->notifyAbout('success');\n            return true;\n        } catch (Exception $e) {\n            error_log($e);\n            R::rollback();\n            $this->notifyAbout('error');\n            return false;\n        }\n    }\n\n    /**\n     * Add a notification for currnet user.\n     *\n     * @param string $type of the notification (alert)\n     * @param int (optional) $count number of beans affected\n     */\n    protected function notifyAbout($type, $count = null)\n    {\n        Flight::get('user')->notify(I18n::__(\n            \"scaffold_{$type}_{$this->action}\",\n            null,\n            array($count)\n        ), $type);\n    }\n\n    /**\n     * Loads a bean collection according to filter or all if no filter was applied.\n     *\n     * @uses $filter\n     * @uses $records\n     * @return bool\n     */\n    protected function getCollection()\n    {\n        $where = $this->filter->buildWhereClause();\n        if (! $attributes = $this->record->getAttributes($this->layout)) {\n            if (! $gestalt = R::findOne('gestalt', ' name = ? ', array($this->record->getMeta('type')))) {\n                $attributes = array(\n                    'name' => 'id',\n                    'sort' => array(\n                        'name' => $this->record->getMeta('type').'.name'\n                    ),\n                    'filter' => array(\n                        'tag' => 'number'\n                    )\n                );\n            } else {\n                $attributes = $gestalt->getVirtualAttributes();\n            }\n        }\n        $order = $attributes[$this->order]['sort']['name'].' '.$this->dir_map[$this->dir];\n        $sqlCollection = $this->record->getSql(\n            \"DISTINCT({$this->type}.id) AS id, \" . $attributes[$this->order]['sort']['name'],\n            $where,\n            $order,\n            $this->offset($this->page, $this->limit),\n            $this->limit\n        );\n        $sqlTotal = $this->record->getSql(\n            \"COUNT(DISTINCT({$this->type}.id)) AS total\",\n            $where,\n            $order\n        );\n        $this->total_records = 0;\n        try {\n            //R::debug(true);\n            $rows = R::getAssoc($sqlCollection, $this->filter->getFilterValues());\n            $this->records = R::batch($this->type, array_keys($rows));\n            //R::debug(false);\n            //R::debug(true);\n            $this->total_records = R::getCell(\n                $sqlTotal,\n                $this->filter->getFilterValues()\n            );\n            //R::debug(false);\n            return true;\n        } catch (Exception $e) {\n            $this->records = array();\n            return false;\n        }\n    }\n\n    /**\n     * Returns the offset calculated from the current page number and limit of rows per page.\n     *\n     * @param int $page\n     * @param int $limit\n     * @return int\n     */\n    protected function offset($page, $limit)\n    {\n        return ($page - 1) * $limit;\n    }\n\n    /**\n     * Returns the id of a bean at a certain (filtered) list position or the id of\n     * the current bean if the query failed.\n     *\n     * @uses Model_Filter::buildWhereClause()\n     * @uses Model::getSql()\n     * @param int $offset\n     * @return mixed $idOfTheBeanAtPositionInFilteredListOrFalse\n     */\n    protected function id_at_offset($offset)\n    {\n        $offset--; //because we count page 1..2..3.. where the offset has to be 0..1..2..\n        if ($offset < 0) {\n            return false;\n        }\n        $where = $this->filter->buildWhereClause();\n        $attributes = $this->record->getAttributes($this->layout);\n        $order = $attributes[$this->order]['sort']['name'].' '.$this->dir_map[$this->dir];\n        try {\n            return R::getCell(\n                $this->record->getSql(\"DISTINCT({$this->type}.id) AS id, \" . $attributes[$this->order]['sort']['name'], $where, $order, $offset, 1),\n                $this->filter->getFilterValues()\n            );\n        } catch (Exception $e) {\n            error_log($e);\n            return false;\n        }\n    }\n\n    /**\n     * Sets the next_action in scaffold session var.\n     *\n     * @uses $record\n     * @uses $action\n     * @param string $next_action\n     */\n    protected function setNextAction($action)\n    {\n        $_SESSION['scaffold'][$this->type][$this->action]['next_action'] = $action;\n    }\n\n    /**\n     * Returns the next_action.\n     *\n     * @return string $next_action\n     */\n    protected function getNextAction()\n    {\n        return $_SESSION['scaffold'][$this->type][$this->action]['next_action'];\n    }\n\n    /**\n     * Apply a given action to a selection of beans.\n     *\n     * @param mixed $selection of beans on which the given action should be applied\n     * @param string $action to apply\n     */\n    protected function applyToSelection($selection = null, $action = 'idle')\n    {\n        if (empty($selection)) {\n            return false;\n        }\n        if (! is_array($selection)) {\n            return false;\n        }\n        Permission::check(Flight::get('user'), $this->type, $action);\n        R::begin();\n        try {\n            foreach ($selection as $id => $switch) {\n                $record = R::load($this->type, $id);\n                $record->$action();\n            }\n            R::commit();\n            $this->notifyAbout('success', count($selection));\n            return true;\n        } catch (Exception $e) {\n            R::rollback();\n            $this->notifyAbout('error', count($selection));\n            return false;\n        }\n    }\n\n    /**\n     * Displays the index page of a given type.\n     *\n     * On a GET request a list view of the beans is represented where on a POST request\n     * the choosen action is applied to all selected beans of a collection.\n     *\n     * @param string $layout\n     * @param int $page\n     * @param int $order\n     * @param int $dir\n     */\n    public function index($layout, $page, $order, $dir)\n    {\n        Permission::check(Flight::get('user'), $this->type, 'index');\n        $this->action = 'index';\n        $this->layout = $layout;\n        $this->page = $page;\n        $this->order = $order;\n        $this->dir = $dir;\n        //$this->template = \"model/{$this->type}/{$this->layout}\";\n        $this->template = \"scaffold/{$this->layout}\";\n        if (Flight::request()->method == 'POST') {\n            //clear filter?\n            if (Flight::request()->data->submit == I18n::__('filter_submit_clear')) {\n                R::trash($this->filter);\n                $_SESSION['scaffold'][$this->type]['filter']['id'] = 0;\n                $this->redirect(\"{$this->base_url}/{$this->type}/{$this->layout}\");\n            }\n            //refresh filter\n            if (Flight::request()->data->submit == I18n::__('filter_submit_refresh')) {\n                $this->filter = R::graph(Flight::request()->data->filter, true);\n                try {\n                    R::store($this->filter);\n                    $_SESSION['scaffold'][$this->type]['filter']['id'] = $this->filter->getId();\n                    $this->redirect(\"{$this->base_url}/{$this->type}/{$this->layout}\");\n                } catch (Exception $e) {\n                    Flight::get('user')->notify(I18n::__('action_filter_error', null, array(), 'error'));\n                }\n            }\n            //handle a selection\n            $this->selection = Flight::request()->data->selection;\n            if ($this->applyToSelection(\n                $this->selection[$this->type],\n                Flight::request()->data->next_action\n            )) {\n                $this->redirect(\"{$this->base_url}/{$this->type}/\");\n            }\n        }\n        $this->getCollection();\n        if (R::count($this->type) == 0) {\n            if (Permission::check(Flight::get('user'), $this->type, 'add')) {\n                Flight::get('user')->notify(I18n::__('scaffold_no_records_add_one'));\n                //return $this->add($this->layout);//this would not work because we dont set form action\n                $this->redirect(\"{$this->base_url}/{$this->type}/add/{$this->layout}\");\n            }\n        }\n\n        $this->pagination = new Pagination(\n            Url::build(\"{$this->base_url}/{$this->type}/\"),\n            $this->page,\n            $this->limit,\n            $this->layout,\n            $this->order,\n            $this->dir,\n            $this->total_records\n        );\n\n        $this->render();\n    }\n\n    /**\n     * Displays page to add a new bean of given type.\n     *\n     * On a GET request a form is represented that has to be filled in by the client. On a POST\n     * request a new bean is created and the client is redirected to a choosen next url.\n     *\n     * @param string $layout\n     */\n    public function add($layout)\n    {\n        Permission::check(Flight::get('user'), $this->type, 'add');\n        $this->layout = $layout;\n        $this->action = 'add';\n        $this->template = \"model/{$this->type}/add\";\n        if (! Flight::view()->exists($this->template)) {\n            // if there is no special \"add\" template, we fallback to \"edit\"\n            $this->template = \"model/{$this->type}/edit\";\n            if (! Flight::view()->exists($this->template)) {\n                // if there is no special \"edit\" template, we fallback to \"edit\"\n                $this->template = \"scaffold/edit\";\n            }\n        }\n        if (Flight::request()->method == 'POST') {\n            $this->record = R::graph(Flight::request()->data->dialog, true);\n            $this->setNextAction(Flight::request()->data->next_action);\n            if ($this->doRedbeanAction()) {\n                if ($this->getNextAction() == 'add') {\n                    $this->redirect(\"{$this->base_url}/{$this->type}/add/{$this->layout}/\");\n                } elseif ($this->getNextAction() == 'edit') {\n                    $this->redirect(\"{$this->base_url}/{$this->type}/edit/{$this->record->getId()}/1/0/0/\");\n                }\n                $this->redirect(\"{$this->base_url}/{$this->type}/{$this->layout}/\");\n            }\n        } else {\n            if ($this->record->getId()) {\n                $this->record = R::dup($this->record);\n                Flight::get('user')->notify(I18n::__('scaffold_dup_goto_original', null, array(\n                    Url::build(\"{$this->base_url}/{$this->type}/edit/{$this->id}/1/0/0/{$this->layout}/\")\n                )));\n            }\n        }\n        $this->render();\n    }\n\n    /**\n     * Displays page to edit an existing bean.\n     *\n     * On a GET request a form is presented to edit the bean. On a POST request the changed bean\n     * is stored and the client is redirected.\n     *\n     * @param int $page\n     * @param int $order\n     * @param int $dir\n     * @param string $layout\n     */\n    public function edit($page, $order, $dir, $layout)\n    {\n        Permission::check(Flight::get('user'), $this->type, 'read');\n        $this->action = 'edit';\n        $this->page = $page;\n        $this->order = $order;\n        $this->dir = $dir;\n        $this->layout = $layout;\n        $this->template = \"model/{$this->type}/edit\";\n        if (! Flight::view()->exists($this->template)) {\n            // if there is no special \"edit\" template, we fallback to \"scaffold/edit\"\n            $this->template = \"scaffold/edit\";\n        }\n        if (Flight::request()->method == 'POST') {\n            Permission::check(Flight::get('user'), $this->type, 'edit');//check for edit perm now\n            $this->record = R::graph(Flight::request()->data->dialog, true);\n            $this->setNextAction(Flight::request()->data->next_action);\n            if ($this->doRedbeanAction()) {\n                if ($this->getNextAction() == 'edit') {\n                    $this->redirect(\"{$this->base_url}/{$this->type}/edit/{$this->record->getId()}/{$this->page}/{$this->order}/{$this->dir}/{$this->layout}/\");\n                } elseif ($this->getNextAction() == 'next_edit' &&\n                                                $next_id = $this->id_at_offset($this->page + 1)) {\n                    $next_page = $this->page + 1;\n                    $this->redirect(\"{$this->base_url}/{$this->type}/edit/{$next_id}/{$next_page}/{$this->order}/{$this->dir}/{$this->layout}/\");\n                } elseif ($this->getNextAction() == 'prev_edit' &&\n                                                $prev_id = $this->id_at_offset($this->page - 1)) {\n                    $prev_page = $this->page - 1;\n                    $this->redirect(\"{$this->base_url}/{$this->type}/edit/{$prev_id}/{$prev_page}/{$this->order}/{$this->dir}/{$this->layout}/\");\n                }\n                $this->redirect(\"{$this->base_url}/{$this->type}/{$this->layout}/\");\n            }\n        }\n        $this->render();\n    }\n\n    /**\n     * Renders a scaffold page.\n     *\n     * @todo Think about:\n     *  - Make the 'html5' layout configurable\n     */\n    protected function render()\n    {\n        Flight::render('shared/notification', array(\n           'record' => $this->record\n        ), 'notification');\n        //\n        Flight::render('shared/navigation/account', array(), 'navigation_account');\n        Flight::render('shared/navigation/main', array(), 'navigation_main');\n        Flight::render('shared/navigation', array(), 'navigation');\n        Flight::render('scaffold/toolbar', array(\n            'record' => $this->record,\n            'base_url' => $this->base_url,\n            'type' => $this->type,\n            'layout' => $this->layout,\n            'page' => $this->page,\n            'order' => $this->order,\n            'dir' => $this->dir\n        ), 'toolbar');\n        Flight::render('shared/header', array(), 'header');\n        Flight::render('shared/footer', array(\n            'pagination' => $this->pagination\n        ), 'footer');\n        Flight::render($this->template, array(\n            'filter' => $this->filter,\n            'record' => $this->record,\n            'records' => $this->records,\n            'selection' => $this->selection,\n            'total_records' => $this->total_records,\n            'dir_map' => $this->dir_map\n        ), 'form_details');\n        Flight::render('scaffold/form', array(\n            'actions' => $this->actions,\n            'current_action' => $this->action,\n            'next_action' => $this->getNextAction(),\n            'record' => $this->record,\n            'records' => $this->records\n        ), 'content');\n        Flight::render('html5', array(\n            'title' => I18n::__(\"scaffold_head_title_{$this->action}\", null, array(\n                I18n::__(\"domain_{$this->type}\")\n            )),\n            'language' => Flight::get('language'),\n            'javascripts' => $this->javascripts\n        ));\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Model\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Model.\n *\n * @package Cinnebar\n * @subpackage Model\n * @version $Id$\n */\nclass Model extends RedBean_SimpleModel\n{\n    /**\n     * Defines the validation mode to throw an exception.\n     */\n    const VALIDATION_MODE_EXCEPTION = 1;\n\n    /**\n     * Defines the validation mode to store an valid or invalid state with the bean.\n     */\n    const VALIDATION_MODE_IMPLICIT = 2;\n\n    /**\n     * Defines the validation mode to simply return the result of a validation.\n     */\n    const VALIDATION_MODE_EXPLICIT = 4;\n\n    /**\n     * Container for the validators.\n     *\n     * @var array\n     */\n    protected $validators = array();\n\n    /**\n     * Holds the validation mode where 1 = Exception, 2 = Implicit attribute, 4 = Explicit.\n     * Affects all beans.\n     *\n     * @var int\n     */\n    protected static $validation_mode = self::VALIDATION_MODE_EXCEPTION;\n\n    /**\n     * Container for the converters.\n     *\n     * @var array\n     */\n    protected $converters = array();\n\n    /**\n     * Container for the errors.\n     *\n     * @var array\n     */\n    protected $errors = array();\n\n    /**\n     * Holds the auto tag status.\n     *\n     * @var bool\n     */\n    protected $auto_tag = false;\n\n    /**\n     * Holds the default actions.\n     *\n     * @var array\n     */\n    protected $actions =  array(\n        'index' => array('idle', 'expunge'),\n        'add' => array('add', 'edit', 'index'),\n        'edit' => array('edit', 'next_edit', 'prev_edit', 'index'),\n        'delete' => array('index')\n    );\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * Returns an array with attributes for lists.\n     *\n     * @param string (optional) $layout\n     * @return array\n     */\n    public function getAttributes($layout = 'table')\n    {\n        return array();\n        /*\n        return array(\n            array(\n                'name' => 'id',\n                'sort' => array(\n                    'name' => $this->bean->getMeta('type').'.name'\n                ),\n                'filter' => array(\n                    'tag' => 'number'\n                )\n            )\n        );\n        */\n    }\n\n    /**\n     * Returns the attribute of the related bean.\n     *\n     * @param string $bean_attribute the first part is the bean, second the attribute\n     * @return string\n     */\n    public function relatedOne($bean_attribute)\n    {\n        $parts = explode('_', $bean_attribute);\n        if (!$this->bean->{$parts[0]}) {\n            return '';\n        }\n        return $this->bean->{$parts[0]}->{$parts[1]};\n    }\n\n    /**\n     * Returns a string representing a boolean state of an beans attribute.\n     *\n     * @param string $attribute name to represent as a true or false string\n     * @return string\n     */\n    public function boolean($attribute)\n    {\n        if ($this->bean->{$attribute}) {\n            return I18n::__('bool_true');\n        }\n        return I18n::__('bool_false');\n    }\n\n    /**\n     * Returns a localized datetime string.\n     *\n     * @param string $attribute name to localize\n     * @return string\n     */\n    public function localizedDateTime($attribute)\n    {\n        if (! Flight::setlocale()) {\n            return $this->bean->{$attribute};\n        }\n        $templates = Flight::get('templates');\n        return strftime($templates['datetime'], strtotime($this->bean->{$attribute}));\n    }\n\n    /**\n     * Returns a localized date string.\n     *\n     * @param string $attribute name to localize\n     * @return string\n     */\n    public function localizedDate($attribute)\n    {\n        if (! Flight::setlocale()) {\n            return $this->bean->{$attribute};\n        }\n        $templates = Flight::get('templates');\n        return strftime($templates['date'], strtotime($this->bean->{$attribute}));\n    }\n\n    /**\n     * Returns a localized time string.\n     *\n     * @param string $attribute name to localize\n     * @return string\n     */\n    public function localizedTime($attribute)\n    {\n        if (! Flight::setlocale()) {\n            return $this->bean->{$attribute};\n        }\n        $templates = Flight::get('templates');\n        return strftime($templates['time'], strtotime($this->bean->{$attribute}));\n    }\n\n    /**\n     * Renders a decimal value nicely.\n     *\n     * @param string $attribute\n     * @param int $decimals defaults to 3\n     * @param string $decimal_point defaults to '.'\n     * @param string $thousands_separator defaults to ','\n     * @return string\n     */\n    public function decimal($attribute, $decimals = 3, $decimal_point = ',', $thousands_separator = '.')\n    {\n        if (! $this->bean->{$attribute}) {\n            return '';\n        }\n        return number_format((float)$this->bean->{$attribute}, $decimals, $decimal_point, $thousands_separator);\n    }\n\n    /**\n     * Returns the root bean of a hierarchy.\n     *\n     * If the optional parameter is set the last bean before the parent bean with\n     * the given id will be returnded. Stop by sitesfolder id for example when you\n     * want to cut the tree a certain level when building a simple cms based on domain.\n     *\n     * @uses getRoot() to return the domain up one level\n     *\n     * @param int (optional) $stop_id of the domain to cut the bubble up route\n     * @return RedBeanPHP\\OODBBean $root\n     */\n    public function getRoot($stop_id = 0)\n    {\n        if (! $this->bean->{$this->bean->getMeta('type')}) {\n            return $this->bean;\n        }\n        if ($this->bean->{$this->bean->getMeta('type')}->getId() == $stop_id) {\n            return $this->bean;\n        }\n        return $this->bean->{$this->bean->getMeta('type')}->getRoot($stop_id);\n    }\n\n    /**\n     * Returns an array with direct descendents of this bean.\n     *\n     * @return array $children\n     */\n    public function getChildren()\n    {\n        $own = 'own'.ucfirst($this->bean->getMeta('type'));\n        return $this->bean->{$own};\n    }\n\n    /**\n     * Returns SQL string.\n     *\n     * Use with DISTINCT([table].id) to fetch all beans or use with COUNT(DISTINCT([table].id))\n     * to get the total number of records matching the optional where clause.\n     *\n     * @param string (optional) $fields to select\n     * @param string (optional) $where\n     * @param string (optional) $order\n     * @param int (optional) $offset\n     * @param int (optional) $limit\n     * @return string $sql\n     */\n    public function getSql($fields = 'id', $where = '1', $order = null, $offset = null, $limit = null)\n    {\n        $sql = <<<SQL\n    \tSELECT\n    \t    {$fields}\n    \tFROM\n    \t    {$this->bean->getMeta('type')}\n    \tWHERE\n    \t    {$where}\nSQL;\n        //add optional order by\n        if ($order) {\n            $sql .= \" ORDER BY {$order}\";\n        }\n        //add optional limit\n        if ($offset || $limit) {\n            $sql .= \" LIMIT {$offset}, {$limit}\";\n        }\n        return $sql;\n    }\n\n    /**\n     * Returns automatic keywords for this bean.\n     *\n     * @param array (optional) $tags which the user may has entered\n     * @return array\n     */\n    public function keywords()\n    {\n        return array(\n            $this->bean->getId()\n        );\n    }\n\n    /**\n     * Returns an array of possible actions.\n     *\n     * Overwrite this function on your bean models.\n     *\n     * @return array\n     */\n    public function getActions()\n    {\n        return $this->actions;\n    }\n\n    /**\n     * Sets an action.\n     *\n     * @param string $action\n     * @param array $actions\n     * @return void\n     */\n    public function setAction($action = '', $actions = array())\n    {\n        $this->actions[$action] = $actions;\n        return null;\n    }\n\n    /**\n     * Sets all actions.\n     *\n     * @param array $actions\n     * @return void\n     */\n    public function setActions($actions = array())\n    {\n        $this->actions = $actions;\n        return null;\n    }\n\n    /**\n     * Expunge is an alias of R::trash().\n     */\n    public function expunge()\n    {\n        R::trash($this->bean);\n    }\n\n    /**\n     * Returns or sets the auto tag flag.\n     *\n     * @param bool (optional) $switch\n     * @return bool\n     */\n    public function autoTag($switch = null)\n    {\n        if ($switch !== null) {\n            $this->auto_tag = $switch;\n        }\n        return $this->auto_tag;\n    }\n\n    /**\n     * Returns or sets the auto info flag.\n     *\n     * @param bool (optional) $switch\n     * @return bool\n     */\n    public function autoInfo($switch = null)\n    {\n        if ($switch !== null) {\n            $this->auto_info = $switch;\n        }\n        return $this->auto_info;\n    }\n\n    /**\n     * Returns a *i18n bean for this bean.\n     *\n     * A i18n bean means an internationalized version of a bean where the localizeable fields\n     * are stored in a bean that extends the original beans name with the string 'i18n'.\n     * If there is no i18n version for the asked language then the default language is\n     * looked up and duplicated.\n     *\n     * @param string $language iso code of the wanted language\n     * @return RedBean_OODBBean\n     */\n    public function i18n($language)\n    {\n        $i18nType = $this->bean->getMeta('type').'i18n';\n        if (! $i18n = R::findOne($i18nType, $this->bean->getMeta('type').'_id = ? AND language = ?', array($this->bean->getId(), $language))) {\n            $i18n = R::dispense($i18nType);\n            $i18n->language = $language;\n            $i18n->name = $this->bean->name;\n        }\n        return $i18n;\n    }\n\n    /**\n     * Returns the translated word for a beans name attribute.\n     *\n     * @return string\n     */\n    public function translated()\n    {\n        return $this->bean->i18n(Flight::get('user')->getLanguage())->name;\n    }\n\n    /**\n     * Update.\n     */\n    public function update()\n    {\n        $this->convert();\n        $this->validate();\n    }\n\n    /**\n     * This is called after the bean was updated.\n     *\n     * @return void\n     */\n    public function after_update()\n    {\n        if ($this->autoTag()) {\n            $this->setAutoTags();\n        }\n    }\n\n    /**\n     * setAutoTags()\n     *\n     * @uses keywords()\n     * @return array $tags\n     */\n    protected function setAutoTags()\n    {\n        if (! $this->bean->getId()) {\n            return false;\n        }\n        $tags = array();\n        foreach ($this->keywords() as $n=>$keyword) {\n            if (trim($keyword) == '') {\n                continue;\n            }\n            $tags[] = trim($keyword);\n        }\n        R::tag($this->bean, $tags);\n        return $tags;\n    }\n\n    /**\n     * Adds an error to the general errors or to a certain attribute if the optional parameter is set.\n     *\n     * @param string $errorText\n     * @param string (optional) $attribute\n     * @return void\n     */\n    public function addError($errorText, $attribute = '')\n    {\n        $this->errors[$attribute][] = $errorText;\n    }\n\n    /**\n     * Returns the errors of this model.\n     *\n     * @return array $errors\n     */\n    public function getErrors()\n    {\n        return $this->errors;\n    }\n\n    /**\n     * Returns true if model has errors.\n     *\n     * If the optional parameter is set a certain attribute is tested for having an error or not.\n     *\n     * @uses Cinnebar_Model::$errors\n     * @param string (optional) $attribute\n     * @return bool $hasErrorOrHasNoError\n     */\n    public function hasError($attribute = '')\n    {\n        if ($attribute === '') {\n            return ! empty($this->errors);\n        }\n        return isset($this->errors[$attribute]);\n    }\n\n    /**\n     * Alias for {@link hasError()} call without an special attribute.\n     *\n     * @return bool $hasErrorsOrNone\n     */\n    public function hasErrors()\n    {\n        return $this->hasError();\n    }\n\n    /**\n     * Set the validation mode.\n     *\n     * This applies to all your beans at once.\n     *\n     * @param bool $mode\n     */\n    public function setValidationMode($mode)\n    {\n        self::$validation_mode = $mode;\n    }\n\n    /**\n     * Returns the current validation mode.\n     *\n     * @return bool\n     */\n    public function getValidationMode()\n    {\n        return self::$validation_mode;\n    }\n\n    /**\n     * Add a validator to the attribute.\n     *\n     * @param string $attribute\n     * @param mixed $validator\n     *\n     * @return Model $this\n     */\n    public function addValidator($attribute, $validator)\n    {\n        if (! is_array($validator)) {\n            $validator = array($validator);\n        }\n        foreach ($validator as $oneValidator) {\n            $this->validators[$attribute][] = $oneValidator;\n        }\n        return $this;\n    }\n\n    /**\n     * Returns true or false wether the model validates or not.\n     *\n     * @uses $invalid\n     *\n     * @return bool\n     * @throws Exception_Validation if validation mode is set to exception (default)\n     */\n    public function validate()\n    {\n        if (isset($this->bean->invalid) && $this->bean->invalid) {\n            $this->bean->invalid = false;\n        }\n        if (empty($this->validators)) {\n            return true;\n        }\n        $suggest = true;\n        foreach ($this->validators as $attribute => $attributeValidators) {\n            foreach ($attributeValidators as $validator) {\n                if (! $validator->validate($this->bean->$attribute)) {\n                    $suggest = false;\n                    $this->addError(I18n::__(strtolower(get_class($validator)).'_invalid'), $attribute);\n                }\n            }\n        }\n        if ($suggest === true) {\n            return true;\n        }\n        //validation failed, react according to validation mode\n        switch (self::$validation_mode) {\n            case self::VALIDATION_MODE_EXCEPTION:\n                throw new Exception_Validation(\"Invalid {$this->bean->getMeta('type')}#{$this->bean->getId()}\");\n                break;\n            case self::VALIDATION_MODE_IMPLICIT:\n                $this->bean->invalid = true;\n                break;\n            default:\n                //nothing, only return false\n        }\n        return false;\n    }\n\n    /**\n     * Add a converter to the attribute.\n     *\n     * @param string $attribute\n     * @param mixed $converter\n     *\n     * @return Model $this\n     */\n    public function addConverter($attribute, $converter)\n    {\n        if (! is_array($converter)) {\n            $converter = array($converter);\n        }\n        foreach ($converter as $oneConverter) {\n            $this->converters[$attribute][] = $oneConverter;\n        }\n        return $this;\n    }\n\n    /**\n     * Runs all converters of this model.\n     *\n     * @return void\n     */\n    public function convert()\n    {\n        if (empty($this->converters)) {\n            return;\n        }\n        foreach ($this->converters as $attribute => $attributeConverters) {\n            foreach ($attributeConverters as $converter) {\n                $this->bean->$attribute = $converter->convert($this->bean->$attribute);\n            }\n        }\n        return;\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Model\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Criteria model.\n *\n * @package Cinnebar\n * @subpackage Model\n * @version $Id$\n */\nclass Model_Criteria extends Model\n{\n    /**\n     * Container for the map of search operators.\n     *\n     * @var array\n     */\n    public $map = array(\n \t\t'like' => '%1$s like ?',\n \t\t'notlike' => '%1$s not like ?',\n \t\t'eq' => '%1$s = ?',\n \t\t'neq' => '%1$s != ?',\n \t\t'bw' => '%1$s like ?',\n \t\t'ew' => '%1$s like ?',\n \t\t'lt' => '%1$s < ?',\n \t\t'gt' => '%1$s > ?',\n \t    'in' => '%1$s in (%2$s)'\n \t\t//'between' => __('filter_op_between'),\n \t\t//'istrue' => __('filter_op_istrue'),\n \t\t//'isfalse' => __('filter_op_isfalse')\n \t);\n\n    /**\n     * Holds possible search operators depending on the filter tag type.\n     *\n     * A simple scaffold filter criteria will always use the first operator. E.g. if you\n     * have a filter tag text then the where clause will use bw (begins with).\n     *\n     * @var array\n     */\n    public $operators = array(\n        'text' => array('bw', 'ew', 'eq', 'neq', 'like', 'notlike'),\n        'number' => array('eq', 'gt', 'lt', 'neq'),\n        'date' => array('eq', 'gt', 'lt', 'neq'),\n        'time' => array('eq', 'gt', 'lt', 'neq'),\n        'datetime' => array('eq', 'gt', 'lt', 'neq'),\n        'email' => array('bw', 'ew', 'eq', 'neq', 'like', 'notlike'),\n        'textarea' => array('bw', 'ew', 'eq', 'neq', 'like', 'notlike'),\n        'in' => array('in'),\n        'select' => array('eq'),\n        'bool' => array('eq')\n     );\n\n     /**\n      * Container for characters that have to be escaped for usage with SQL.\n      *\n      * @var array\n      */\n     public $pat = array('%', '_');\n\n     /**\n      * Container for escaped charaters.\n      *\n      * @var array\n      */\n     public $rep = array('\\%', '\\_');\n     \n     /**\n      * Prepares a value according to its tag and returns it.\n      *\n      * @param string the value to convert\n      * @return mixed\n      */\n     public function convertToText($value)\n     {\n         return $value;\n     }\n     \n     /**\n      * Prepares a value according to its tag and returns it.\n      *\n      * @param string the value to convert\n      * @return mixed\n      */\n     public function convertToNumber($value)\n     {\n         return (float)str_replace(',', '.', $value);\n         //return $value;\n     }\n     \n     /**\n      * Prepares a value according to its tag and returns it.\n      *\n      * @param string the value to convert\n      * @return mixed\n      */\n     public function convertToEmail($value)\n     {\n         return $value;\n     }\n     \n     /**\n      * Prepares a value according to its tag and returns it.\n      *\n      * @param string the value to convert\n      * @return mixed\n      */\n     public function convertToTextarea($value)\n     {\n         return $value;\n     }\n     \n     /**\n      * Prepares a value according to its tag and returns it.\n      *\n      * @param string the value to convert\n      * @return mixed\n      */\n     public function convertToIn($value)\n     {\n         return $value;\n     }\n     \n     /**\n      * Prepares a value according to its tag and returns it.\n      *\n      * @param string the value to convert\n      * @return mixed\n      */\n     public function convertToBool($value)\n     {\n         return $value;\n     }\n     \n     /**\n      * Prepares a value according to its tag and returns it.\n      *\n      * @param string the value to convert\n      * @return mixed\n      */\n     public function convertToSelect($value)\n     {\n         return $value;\n     }\n     \n     /**\n      * Returns a mysql datetime string.\n      *\n      * @param string the value to convert\n      * @return string\n      */\n     public function convertToDatetime($value)\n     {\n         return date('Y-m-d H:i:s', strtotime($value));\n     }\n     \n     /**\n      * Returns a mysql date string.\n      *\n      * @param string the value to convert\n      * @return string\n      */\n     public function convertToDate($value)\n     {\n         return date('Y-m-d', strtotime($value));\n     }\n    \n    /**\n     * Returns a string to use as part of a SQL query.\n     *\n     * @throws an exception when criteria operator has no template definded in map\n     * @uses $map\n     * @uses mask_filter_value()\n     * @param Model_Filter $filter\n     * @return string\n     */\n    public function makeWherePart(Model_Filter $filter)\n    {\n        if ( ! isset($this->map[$this->bean->op])) throw new Exception('Filter operator has no template');\n        $template = $this->map[$this->bean->op];\n        $value = $this->mask_filter_value($filter);\n        return sprintf($template, $this->bean->attribute, $value);\n    }\n    \n    /**\n     * Masks the criterias value and stacks it into the filter values.\n     *\n     * @uses Model_Filter::$filter_values where the values of our criterias are stacked up\n     * @param Model_Filter $filter\n     * @return void\n     */\n    protected function mask_filter_value(Model_Filter $filter)\n    {\n        $add_to_filter_values = true;\n    \tswitch ($this->bean->op) {\n    \t\tcase 'like':\n    \t\t\t$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';\n    \t\t\tbreak;\n    \t\tcase 'notlike':\n    \t\t\t$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';\n    \t\t\tbreak;\n    \t\tcase 'bw':\n    \t\t\t$value = str_replace($this->pat, $this->rep, $this->bean->value).'%';\n    \t\t\tbreak;\n    \t\tcase 'ew':\n    \t\t\t$value = '%'.str_replace($this->pat, $this->rep, $this->bean->value);\n    \t\t\tbreak;\n    \t\tcase 'in':\n    \t\t    $_sharedSubName = 'shared'.ucfirst(strtolower($this->bean->substitute));\n    \t\t    $ids = array_keys($this->bean->{$_sharedSubName});\n    \t\t    $value = implode(', ', $ids);\n    \t\t    $add_to_filter_values = false;\n    \t\t    break;\n    \t\tdefault:\n    \t\t\t$value = $this->bean->value;\n    \t}\n    \tif ($add_to_filter_values) {\n    \t    $converter = 'convertTo' . ucfirst(strtolower($this->bean->tag));\n    \t    $filter->filter_values[] = $this->$converter($value);\n    \t}\n    \treturn $value;\n    }\n    \n    /**\n     * Returns array with possible operators for the given tag type.\n     *\n     * @return array $operators\n     */\n    public function operators()\n    {\n        if (isset($this->operators[$this->bean->tag])) return $this->operators[$this->bean->tag];\n        return array();\n    }\n    \n    /**\n     * Setup validators.\n     */\n    public function dispense()\n    {\n        $this->addValidator('attribute', new Validator_HasValue());\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- Account -->\n<article class=\"main\">\n    <header>\n\t\t<h1><?php echo I18n::__('account_h1') ?></h1>\n\t\t<nav>\n            <?php echo $toolbar ?>\n        </nav>\n    </header>\n    <form\n        id=\"form-<?php echo $record->getMeta('type') ?>\"\n        class=\"panel panel-<?php echo $record->getMeta('type') ?> action-changepassword\"\n        method=\"POST\"\n        accept-charset=\"utf-8\"\n        enctype=\"multipart/form-data\">\n\n        <input type=\"hidden\" name=\"token\" value=\"<?php echo Model::getCSRFToken() ?>\" />\n\n        <!-- changepassword form -->\n        <fieldset>\n            <legend><?php echo I18n::__('account_legend_changepassword') ?></legend>\n            <div\n                class=\"row <?php echo $record->hasError('pw') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-pw\">\n                    <?php echo I18n::__('user_label_pw') ?>\n                </label>\n                <input\n                    type=\"password\"\n                    id=\"user-pw\"\n                    name=\"pw\"\n                    value=\"\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('pwnew') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-pw-new\">\n                    <?php echo I18n::__('account_label_newpassword') ?>\n                </label>\n                <input\n                    type=\"password\"\n                    id=\"user-pw-new\"\n                    name=\"pw_new\"\n                    value=\"\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('pwrepeated') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-pw-new\">\n                    <?php echo I18n::__('account_label_repeatedpassword') ?>\n                </label>\n                <input\n                    type=\"password\"\n                    id=\"user-pw-repeated\"\n                    name=\"pw_repeated\"\n                    value=\"\"\n                    required=\"required\" />\n            </div>\n        </fieldset>\n        <!-- End of changepassword form -->\n        <div class=\"buttons\">\n            <input type=\"submit\" name=\"submit\" value=\"<?php echo I18n::__('account_submit_changepassword') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of Login -->\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- Account -->\n<article class=\"main\">\n    <header>\n\t\t<h1><?php echo I18n::__('account_h1') ?></h1>\n\t\t<nav>\n            <?php echo $toolbar ?>\n        </nav>\n    </header>\n    <form\n        id=\"form-<?php echo $record->getMeta('type') ?>\"\n        class=\"panel panel-<?php echo $record->getMeta('type') ?> action-profile\"\n        method=\"POST\"\n        accept-charset=\"utf-8\"\n        enctype=\"multipart/form-data\">\n\n        <input type=\"hidden\" name=\"token\" value=\"<?php echo Model::getCSRFToken() ?>\" />\n        \n        <div>\n            <img\n        \t\tsrc=\"<?php echo Gravatar::src($record->email, 72) ?>\"\n        \t\tclass=\"gravatar-account circular no-shadow\"\n        \t\twidth=\"72\"\n        \t\theight=\"72\"\n        \t\talt=\"<?php echo htmlspecialchars($record->getName()) ?>\" />\n        </div>\n        <!-- account form -->\n        <fieldset>\n            <legend><?php echo I18n::__('account_legend') ?></legend>\n            <div\n                class=\"row <?php echo $record->hasError('name') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-name\">\n                    <?php echo I18n::__('user_label_name') ?>\n                </label>\n                <input\n                    type=\"text\"\n                    id=\"user-name\"\n                    name=\"dialog[name]\"\n                    value=\"<?php echo htmlspecialchars($record->name) ?>\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('email') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-email\">\n                    <?php echo I18n::__('user_label_email') ?>\n                </label>\n                <input\n                    type=\"email\"\n                    id=\"user-email\"\n                    name=\"dialog[email]\"\n                    value=\"<?php echo htmlspecialchars($record->email) ?>\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('shortname') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-shortname\">\n                    <?php echo I18n::__('user_label_shortname') ?>\n                </label>\n                <input\n                    type=\"text\"\n                    id=\"user-shortname\"\n                    name=\"dialog[shortname]\"\n                    value=\"<?php echo htmlspecialchars($record->shortname) ?>\"\n                    required=\"required\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('screenname') ? 'error' : '' ?>\">\n                <label\n                    for=\"user-screenname\">\n                    <?php echo I18n::__('user_label_screenname') ?>\n                </label>\n                <select\n                    id=\"user-screenname\"\n                    name=\"dialog[screenname]\">\n                    <?php foreach (array('name','email','shortname') as $_attr_name): ?>\n                    <option\n                        value=\"<?php echo $_attr_name ?>\"\n                        <?php echo ($record->screenname == $_attr_name) ? 'selected=\"selected\"' : '' ?>>\n                        <?php echo I18n::__('user_label_'.$_attr_name) ?>\n                    </option>\n                    <?php endforeach ?>\n                </select>\n            </div>\n        </fieldset>\n        <!-- End of account form -->\n        <div class=\"buttons\">\n            <input type=\"submit\" name=\"submit\" value=\"<?php echo I18n::__('account_submit') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of Account -->\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- Login -->\n<?php if (isset($message)): ?>\n<!-- notifications of the current user -->\n<div\n    id=\"notification\"\n    class=\"notification\">\n    <div class=\"alert alert-error\">\n        <?php echo Flight::textile($message) ?>\n    </div>\n</div>\n<!-- End of notifications -->\n<?php endif ?>\n<article class=\"main\">\n    <header>\n\t\t<h1><?php echo I18n::__('login_h1') ?></h1>\n    </header>\n    <form\n        id=\"form-login\"\n        class=\"panel login\"\n        method=\"POST\"\n        accept-charset=\"utf-8\">\n\n        <input type=\"hidden\" name=\"token\" value=\"<?php echo Model::getCSRFToken() ?>\" />\n\n        <div>\n            <input type=\"hidden\" name=\"dialog[type]\" value=\"<?php echo $record->getMeta('type') ?>\" />\n            <input type=\"hidden\" name=\"dialog[id]\" value=\"<?php echo $record->getId() ?>\" />\n            <input\n                type=\"hidden\"\n                name=\"dialog[stamp]\"\n                value=\"<?php echo htmlspecialchars($record->stamp) ?>\" />\n            <input\n                type=\"hidden\"\n                name=\"dialog[ipaddr]\"\n                value=\"<?php echo htmlspecialchars($record->ipaddr) ?>\" />\n            <input\n                type=\"hidden\"\n                name=\"dialog[attempt]\"\n                value=\"<?php echo htmlspecialchars($record->attempt) ?>\" />\n            <input type=\"hidden\" name=\"goto\" value=\"<?php echo $goto ?>\" />\n        </div>\n        <fieldset>\n            <legend><?php echo I18n::__('login_legend') ?></legend>\n            <div\n                class=\"row <?php echo $record->hasError('uname') ? 'error' : '' ?>\">\n                <label\n                    for=\"login-username\">\n                    <?php echo I18n::__('login_label_username') ?>\n                </label>\n                <input\n                    type=\"text\"\n                    id=\"login-username\"\n                    name=\"dialog[uname]\"\n                    value=\"<?php echo htmlspecialchars($record->uname) ?>\"\n                    required=\"required\"\n \t\t\t\t\tautofocus=\"autofocus\" />\n            </div>\n            <div\n                class=\"row <?php echo $record->hasError('pw') ? 'error' : '' ?>\">\n                <label\n                    for=\"login-password\">\n                    <?php echo I18n::__('login_label_password') ?>\n                </label>\n                <input\n                    type=\"password\"\n                    id=\"login-password\"\n                    name=\"dialog[pw]\"\n                    value=\"\"\n                    required=\"required\" />\n            </div>\n        </fieldset>\n        <div class=\"buttons\">\n            <a\n                href=\"<?php echo Url::build('/lostpassword') ?>\"\n                class=\"btn\">\n                <?php echo I18n::__('login_link_lostpassword') ?>\n            </a>\n            <input type=\"submit\" name=\"submit\" value=\"<?php echo I18n::__('login_submit') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of Login -->\n", "<?php\n/**\n * Template to aquire a new password.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- Login -->\n<?php if (isset($message)): ?>\n<!-- notifications of the current user -->\n<div\n    id=\"notification\"\n    class=\"notification\">\n    <div class=\"alert alert-warning\">\n        <?php echo Flight::textile($message) ?>\n    </div>\n</div>\n<!-- End of notifications -->\n<?php endif ?>\n<article class=\"main\">\n    <header>\n\t\t<h1><?php echo I18n::__('lostpassword_h1') ?></h1>\n    </header>\n    <form\n        id=\"form-lostpassword\"\n        class=\"panel lostpassword\"\n        method=\"POST\"\n        accept-charset=\"utf-8\">\n\n        <input type=\"hidden\" name=\"token\" value=\"<?php echo Model::getCSRFToken() ?>\" />\n\n        <fieldset>\n            <legend><?php echo I18n::__('lostpassword_legend') ?></legend>\n            <div\n                class=\"row\">\n                <label\n                    for=\"lostpassword-username\">\n                    <?php echo I18n::__('lostpassword_label_username') ?>\n                </label>\n                <input\n                    type=\"email\"\n                    id=\"lostpassword-username\"\n                    name=\"dialog[uname]\"\n                    value=\"<?php echo htmlspecialchars($uname) ?>\"\n                    required=\"required\"\n \t\t\t\t\tautofocus=\"autofocus\" />\n            </div>\n        </fieldset>\n        <div class=\"buttons\">\n            <a\n                href=\"<?php echo Url::build('/login') ?>\"\n                class=\"btn\">\n                <?php echo I18n::__('lostpassword_link_login') ?>\n            </a>\n            <input type=\"submit\" name=\"submit\" value=\"<?php echo I18n::__('lostpassword_submit') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of Login -->\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<!-- admin index page -->\n<article class=\"main\">\n\t<header>\n    \t<h1><?php echo I18n::__('admin_h1') ?></h1>\n\t</header>\n\t<form\n        id=\"form-<?php echo $record->getMeta('type') ?>\"\n        class=\"panel panel-<?php echo $record->getMeta('type') ?> action-edit\"\n        method=\"POST\"\n        accept-charset=\"utf-8\"\n        enctype=\"multipart/form-data\">\n\n        <input type=\"hidden\" name=\"token\" value=\"<?php echo Model::getCSRFToken() ?>\" />\n\n        <?php echo $form_details ?>\n        <div class=\"buttons\">\n            <input\n                type=\"submit\"\n                name=\"submit\"\n                accesskey=\"s\"\n                value=\"<?php echo I18n::__('admin_submit_setting') ?>\" />\n        </div>\n    </form>\n</article>\n<!-- End of admin index page -->\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Template\n * @author $Author$\n * @version $Id$\n */\n?>\n<article class=\"main\">\n    <header id=\"header-toolbar\" class=\"fixable\">\n        <h1><?php echo I18n::__(\"{$type}_h1\") ?></h1>\n        <nav>\n            <?php echo $toolbar ?>\n        </nav>\n    </header>\n    <!-- scaffold edit form -->\n    <form\n        id=\"form-<?php echo $record->getMeta('type') ?>\"\n        class=\"panel panel-<?php echo $record->getMeta('type') ?> action-<?php echo $current_action ?>\"\n        method=\"POST\"\n        accept-charset=\"utf-8\"\n        enctype=\"multipart/form-data\">\n\n        <input type=\"hidden\" name=\"token\" value=\"<?php echo Model::getCSRFToken() ?>\" />\n\n        <!-- form details -->\n        <?php echo $form_details ?>\n        <!-- end of form details -->\n\n        <!-- Scaffold buttons -->\n        <div class=\"buttons\">\n            <select name=\"next_action\">\n                <?php foreach ($actions[$current_action] as $action): ?>\n                <option\n                    value=\"<?php echo $action ?>\"\n                    <?php echo ($next_action == $action) ? 'selected=\"selected\"' : '' ?>><?php echo I18n::__(\"action_{$action}_select\") ?></option>\n                <?php endforeach ?>\n            </select>\n            <input\n                type=\"submit\"\n                name=\"submit\"\n                accesskey=\"s\"\n                value=\"<?php echo I18n::__('scaffold_submit_apply_action') ?>\" />\n        </div>\n        <!-- End of Scaffold buttons -->\n    </form>\n</article>\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Account controller.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @version $Id$\n */\nclass Controller_Account extends Controller\n{\n    /**\n     * Holds the template to render.\n     *\n     * @var string\n     */\n    public $template;\n\n    /**\n     * Displays the currently logged user account.\n     *\n     * A GET request will simply display the page and a POST request will change\n     * the user account.\n     */\n    public function index()\n    {\n        session_start();\n        Auth::check();\n        $this->template = 'account/index';\n\n        if (Flight::request()->method == 'POST') {\n            if (! Model::validateCSRFToken(Flight::request()->data->token)) {\n                $this->redirect(\"/logout\");\n            }\n            Flight::get('user')->import(Flight::request()->data->dialog);\n            try {\n                R::store(Flight::get('user'));\n                Flight::get('user')->notify(I18n::__('account_edit_success'), 'success');\n                $this->redirect('/account/');\n            } catch (Exception $e) {\n                Flight::get('user')->notify(I18n::__('account_edit_failure'), 'error');\n            }\n        }\n\n        $this->render();\n    }\n\n    /**\n     * Displays a page to change the password.\n     *\n     * A GET request will simply display the page and a POST request will try to\n     * change the password.\n     */\n    public function changepassword()\n    {\n        session_start();\n        Auth::check();\n        $this->template = 'account/changepassword';\n\n        if (Flight::request()->method == 'POST') {\n            if (! Model::validateCSRFToken(Flight::request()->data->token)) {\n                $this->redirect(\"/logout\");\n            }\n            if (Flight::get('user')->changePassword(\n                Flight::request()->data->pw,\n                Flight::request()->data->pw_new,\n                Flight::request()->data->pw_repeated\n            )) {\n                try {\n                    R::store(Flight::get('user'));\n                    Flight::get('user')->notify(I18n::__('account_changepassword_success'), 'success');\n                    $this->redirect('/account/');\n                } catch (Exception $e) {\n                    //Whoops, what nu?\n                }\n            } else {\n                Flight::get('user')->notify(I18n::__('account_changepassword_failure'), 'error');\n            }\n        }\n\n        $this->render();\n    }\n\n    /**\n     * Renders the account page.\n     */\n    protected function render()\n    {\n        Flight::render('shared/notification', array(), 'notification');\n        //\n        Flight::render('shared/navigation/account', array(), 'navigation_account');\n        Flight::render('shared/navigation/main', array(), 'navigation_main');\n        Flight::render('shared/navigation', array(), 'navigation');\n        Flight::render('account/toolbar', array(), 'toolbar');\n        Flight::render('shared/header', array(), 'header');\n        Flight::render('shared/footer', array(), 'footer');\n        Flight::render($this->template, array(\n            'record' => Flight::get('user')\n        ), 'content');\n        Flight::render('html5', array(\n            'title' => I18n::__(\"account_head_title\"),\n            'language' => Flight::get('language')\n        ));\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Login controller.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @version $Id$\n */\nclass Controller_Login extends Controller\n{\n    /**\n     * May hold a message (textile) to the user that want to re-enter a password.\n     */\n    public $message;\n\n    /**\n     * Renders the login page.\n     *\n     * Renders the login page and handles a login attempt on POST if no valid\n     * session already exists. If credentials given are correct a session is started\n     * and the client is redirected to the originally requested URL or the /cms page if\n     * no URL was provided.\n     */\n    public function index()\n    {\n        session_start();\n        if (! isset($_SESSION['login_id'])) {\n            $_SESSION['login_id'] = 0;\n        }\n        $login = R::load('login', $_SESSION['login_id']);\n        if (Flight::request()->method == 'POST') {\n            if (! Model::validateCSRFToken(Flight::request()->data->token)) {\n                $this->redirect(\"/logout\");\n            }\n            try {\n                $login = R::graph(Flight::request()->data->dialog, true);\n                if ($login->trial()) {\n                    //you must trial before store because of pw reset in update\n                    $_SESSION['user']['id'] = $login->user->getId();\n                    $_SESSION['backend']['language'] = Flight::get('language');\n                    $login->user->sid = session_id();\n                    R::store($login);\n                    $this->redirect(Flight::request()->data->goto, $raw = true);\n                }\n                $this->message = I18n::__('login_failed');\n                R::store($login);\n            } catch (Exception $e) {\n                error_log($e);\n                //uups, login could not be saved\n            }\n        }\n        // either no yet submitted or the credentials given failed\n        if (Flight::request()->query->goto == '' || Flight::request()->query->goto == '/login') {\n            $goto = '/cms';\n        } else {\n            $goto = Flight::request()->query->goto;\n        }\n        Flight::render('account/login', array(\n            'goto' => htmlspecialchars($goto),\n            'record' => $login,\n            'message' => $this->message\n        ), 'content');\n        Flight::render('html5', array(\n            'title' => I18n::__('login_head_title'),\n            'language' => Flight::get('language'),\n            'stylesheets' => array('custom', 'default')\n        ));\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Lostpassword controller.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @version $Id$\n */\nclass Controller_Lostpassword extends Controller\n{\n    /**\n     * Holds the template to render.\n     *\n     * @var string\n     */\n    public $template = 'account/lostpassword';\n\n    /**\n     * Holds the username entered by the password seeking party.\n     */\n    public $uname = '';\n\n    /**\n     * May hold a message (textile) to the user that want to re-enter a password.\n     */\n    public $message;\n\n    /**\n     * Displays a page to request a new password.\n     *\n     * A GET request will simply display the page and a POST request will change\n     * the user account.\n     */\n    public function index()\n    {\n        if (Flight::request()->method == 'POST') {\n            if (! Model::validateCSRFToken(Flight::request()->data->token)) {\n                $this->redirect(\"/logout\");\n            }\n            $this->uname = Flight::request()->data->dialog['uname'];\n            if (! $user = R::findOne('user', ' email = ? LIMIT 1 ', array($this->uname))) {\n                $this->message = I18n::__('lostpassword_user_unknown');\n            } elseif (! $user->requestPassword()) {\n                $this->message = I18n::__('lostpassword_email_failed');\n            } else {\n                $this->redirect('login');\n            }\n        }\n\n        $this->render();\n    }\n\n    /**\n     * Renders the lostpassword page.\n     */\n    protected function render()\n    {\n        Flight::render($this->template, array(\n            'uname' => $this->uname,\n            'message' => $this->message\n        ), 'content');\n        Flight::render('html5', array(\n            'title' => I18n::__(\"lostpassword_head_title\"),\n            'language' => Flight::get('language'),\n            'stylesheets' => array('custom', 'default')\n        ));\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Controller\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Scaffold controller.\n *\n * @todo Main points:\n *  - Allow different layouts\n *\n * @package Cinnebar\n * @subpackage Controller\n * @version $Id$\n */\nclass Controller_Scaffold extends Controller\n{\n    /**\n     * Container for javascripts to load.\n     *\n     * @var array\n     */\n    public $javascripts = array(\n        '/js/jquery.mjs.nestedSortable'\n    );\n\n    /**\n     * Holds the base url.\n     *\n     * @var string\n     */\n    public $base_url;\n\n    /**\n     * Holds the type of the bean(s) to handle.\n     *\n     * @var string\n     */\n    public $type;\n\n    /**\n     * Holds the id of the bean to handle.\n     *\n     * @var int\n     */\n    public $id;\n\n    /**\n     * Holds possible actions.\n     *\n     * @var array\n     */\n    public $actions;\n\n    /**\n     * Holds the name of the action that was requested.\n     *\n     * @var string\n     */\n    public $action;\n\n    /**\n     * Holds the name of the layout to use.\n     *\n     * @var string\n     */\n    public $layout;\n\n    /**\n     * Holds the real template to render.\n     *\n     * @var string\n     */\n    public $template;\n\n    /**\n     * Holds a instance of the bean to handle.\n     *\n     * @var RedBean_OODBBean\n     */\n    public $record;\n\n    /**\n     * Holds a instance of a filter bean.\n     *\n     * @var RedBean_OODBBean\n     */\n    public $filter;\n\n    /**\n     * Container for beans to browse.\n     *\n     * @var array\n     */\n    public $records = array();\n\n    /**\n     * Holds the maximum number of records per page.\n     *\n     * @var int\n     */\n    public $limit = CINNEBAR_RECORDS_PER_PAGE;\n\n    /**\n     * Holds the default layout for index.\n     *\n     * @var string\n     */\n    public $default_layout = 'table';\n\n    /**\n     * Holds the total number of beans found.\n     *\n     * @var int\n     */\n    public $total_records = 0;\n\n    /**\n     * Container for selected beans.\n     *\n     * @var array\n     */\n    public $selection = array();\n\n    /**\n     * Holds the current page.\n     *\n     * @var int\n     */\n    public $page = 1;\n\n    /**\n     * Holds the current order index.\n     *\n     * @var int\n     */\n    public $order = 0;\n\n    /**\n     * Holds the current sort dir(ection) index.\n     *\n     * @var int\n     */\n    public $dir = 0;\n\n    /**\n     * Container for order dir(ections).\n     *\n     * @var array\n     */\n    public $dir_map = array(\n        0 => 'ASC',\n        1 => 'DESC'\n    );\n\n    /**\n     * Holds a instance of a Pagination class.\n     *\n     * @var Pagination\n     */\n    public $pagination;\n\n    /**\n     * Constructs a new Scaffold controller.\n     *\n     * @todo get rid of eval and develop gestalt more\n     *\n     * @param string $base_url for scaffold links and redirects\n     * @param string $type of the bean to scaffold\n     * @param int (optional) $id of the bean to handle\n     */\n    public function __construct($base_url, $type, $id = null)\n    {\n        session_start();\n        Auth::check();\n        if (Flight::get('user')->hasfoxylisteditor()) {\n            $this->javascripts[] = '/js/table-edits.min';\n            $this->javascripts[] = '/js/foxylisteditor';\n        }\n        $this->limit = Flight::get('user')->getRecordsPerPage($type);\n        $this->base_url = $base_url;\n        $this->type = $type;\n        $this->id = $id;\n        $this->layout = $this->default_layout;\n        try {\n            $this->record = R::load($type, $id);\n        } catch (Exception $e) {\n            error_log(\"Scaffold::__construct() tried to load a bean, but failed. Check if your database is not frozen and a table for the bean type exists. If not unfreeze and try again.\\n\".$e);\n            exit('No bean type could be created. Unfreeze your database.');\n        }\n        $this->actions = $this->record->getActions();\n        if (! isset($_SESSION['scaffold'][$this->type])) {\n            $_SESSION['scaffold'][$this->type]['filter']['id'] = 0;\n            // next action\n            $_SESSION['scaffold'][$this->type]['index']['next_action'] = 'idle';\n            $_SESSION['scaffold'][$this->type]['add']['next_action'] = 'add';\n            $_SESSION['scaffold'][$this->type]['edit']['next_action'] = 'edit';\n            $_SESSION['scaffold'][$this->type]['delete']['next_action'] = 'index';\n        }\n        $this->filter = R::load('filter', $_SESSION['scaffold'][$this->type]['filter']['id']);\n    }\n\n    /**\n     * Detach a record.\n     *\n     * @param string $subtype the type of bean to handle\n     * @param int (optional) id of the bean to detach\n     * @return void\n     */\n    public function detach($subtype, $id = 0)\n    {\n        $record = R::load($subtype, $id);\n        R::begin();\n        try {\n            R::trash($record);//store or trash -- nothing else works here\n            R::commit();\n            return true;\n        } catch (Exception $e) {\n            error_log($e);\n            R::rollback();\n            return false;\n        }\n    }\n\n    /**\n     * Attach a record.\n     *\n     * To use the attach function you will need to have subform templates in your model\n     * folder. For example see model/person/own/address.\n     *\n     * @param string $prefix either own or shared\n     * @param string $subtype the type of bean to handle\n     * @param int (optional) id of the bean to detach\n     * @return void\n     */\n    public function attach($prefix, $subtype, $id = 0)\n    {\n        $index = md5(microtime(true));\n        $_subrecord = R::dispense($subtype);\n        Flight::render(sprintf('model/%s/%s/%s', $this->type, $prefix, $subtype), array(\n            'record' => $this->record,\n            '_'.$subtype => $_subrecord,\n            'index' => $index\n        ));\n        return true;\n    }\n\n    /**\n     * This function is called by an AJAX post request in case user\n     * has foxylisteditor set to true and saved a record in list view.\n     *\n     * @return void\n     */\n    public function inline()\n    {\n        $data = Flight::request()->data;\n        foreach ($data as $key => $value) {\n            $this->record->{$key} = $value;\n        }\n        try {\n            R::store($this->record);\n            $ret = 'good';\n        } catch (Exception $e) {\n            error_log($e);\n            $ret = 'bad';\n        }\n        echo json_encode(['result' => $ret]);\n        return true;\n    }\n\n    /**\n     * Returns true or false wether the bean was stored or not.\n     *\n     * The current bean is challanged to be stored wrapped in a transaction. When the bean was\n     * successfully stored a message is send to the user telling about that. In case the store\n     * fails a failure message is send to the current user.\n     *\n     * @uses $record\n     * @param string $redbeanAction can be either trash or store\n     * @return bool\n     */\n    protected function doRedbeanAction($redbeanAction = 'store')\n    {\n        R::begin();\n        try {\n            R::$redbeanAction($this->record);//store or trash -- nothing else works here\n            R::commit();\n            $this->notifyAbout('success');\n            return true;\n        } catch (Exception $e) {\n            error_log($e);\n            R::rollback();\n            $this->notifyAbout('error');\n            return false;\n        }\n    }\n\n    /**\n     * Add a notification for currnet user.\n     *\n     * @param string $type of the notification (alert)\n     * @param int (optional) $count number of beans affected\n     */\n    protected function notifyAbout($type, $count = null)\n    {\n        Flight::get('user')->notify(I18n::__(\n            \"scaffold_{$type}_{$this->action}\",\n            null,\n            array($count)\n        ), $type);\n    }\n\n    /**\n     * Loads a bean collection according to filter or all if no filter was applied.\n     *\n     * @uses $filter\n     * @uses $records\n     * @return bool\n     */\n    protected function getCollection()\n    {\n        $where = $this->filter->buildWhereClause();\n        if (! $attributes = $this->record->getAttributes($this->layout)) {\n            if (! $gestalt = R::findOne('gestalt', ' name = ? ', array($this->record->getMeta('type')))) {\n                $attributes = array(\n                    'name' => 'id',\n                    'sort' => array(\n                        'name' => $this->record->getMeta('type').'.name'\n                    ),\n                    'filter' => array(\n                        'tag' => 'number'\n                    )\n                );\n            } else {\n                $attributes = $gestalt->getVirtualAttributes();\n            }\n        }\n        $order = $attributes[$this->order]['sort']['name'].' '.$this->dir_map[$this->dir];\n        $sqlCollection = $this->record->getSql(\n            \"DISTINCT({$this->type}.id) AS id, \" . $attributes[$this->order]['sort']['name'],\n            $where,\n            $order,\n            $this->offset($this->page, $this->limit),\n            $this->limit\n        );\n        $sqlTotal = $this->record->getSql(\n            \"COUNT(DISTINCT({$this->type}.id)) AS total\",\n            $where,\n            $order\n        );\n        $this->total_records = 0;\n        try {\n            //R::debug(true);\n            $rows = R::getAssoc($sqlCollection, $this->filter->getFilterValues());\n            $this->records = R::batch($this->type, array_keys($rows));\n            //R::debug(false);\n            //R::debug(true);\n            $this->total_records = R::getCell(\n                $sqlTotal,\n                $this->filter->getFilterValues()\n            );\n            //R::debug(false);\n            return true;\n        } catch (Exception $e) {\n            $this->records = array();\n            return false;\n        }\n    }\n\n    /**\n     * Returns the offset calculated from the current page number and limit of rows per page.\n     *\n     * @param int $page\n     * @param int $limit\n     * @return int\n     */\n    protected function offset($page, $limit)\n    {\n        return ($page - 1) * $limit;\n    }\n\n    /**\n     * Returns the id of a bean at a certain (filtered) list position or the id of\n     * the current bean if the query failed.\n     *\n     * @uses Model_Filter::buildWhereClause()\n     * @uses Model::getSql()\n     * @param int $offset\n     * @return mixed $idOfTheBeanAtPositionInFilteredListOrFalse\n     */\n    protected function id_at_offset($offset)\n    {\n        $offset--; //because we count page 1..2..3.. where the offset has to be 0..1..2..\n        if ($offset < 0) {\n            return false;\n        }\n        $where = $this->filter->buildWhereClause();\n        $attributes = $this->record->getAttributes($this->layout);\n        $order = $attributes[$this->order]['sort']['name'].' '.$this->dir_map[$this->dir];\n        try {\n            return R::getCell(\n                $this->record->getSql(\"DISTINCT({$this->type}.id) AS id, \" . $attributes[$this->order]['sort']['name'], $where, $order, $offset, 1),\n                $this->filter->getFilterValues()\n            );\n        } catch (Exception $e) {\n            error_log($e);\n            return false;\n        }\n    }\n\n    /**\n     * Sets the next_action in scaffold session var.\n     *\n     * @uses $record\n     * @uses $action\n     * @param string $next_action\n     */\n    protected function setNextAction($action)\n    {\n        $_SESSION['scaffold'][$this->type][$this->action]['next_action'] = $action;\n    }\n\n    /**\n     * Returns the next_action.\n     *\n     * @return string $next_action\n     */\n    protected function getNextAction()\n    {\n        return $_SESSION['scaffold'][$this->type][$this->action]['next_action'];\n    }\n\n    /**\n     * Apply a given action to a selection of beans.\n     *\n     * @param mixed $selection of beans on which the given action should be applied\n     * @param string $action to apply\n     */\n    protected function applyToSelection($selection = null, $action = 'idle')\n    {\n        if (empty($selection)) {\n            return false;\n        }\n        if (! is_array($selection)) {\n            return false;\n        }\n        Permission::check(Flight::get('user'), $this->type, $action);\n        R::begin();\n        try {\n            foreach ($selection as $id => $switch) {\n                $record = R::load($this->type, $id);\n                $record->$action();\n            }\n            R::commit();\n            $this->notifyAbout('success', count($selection));\n            return true;\n        } catch (Exception $e) {\n            R::rollback();\n            $this->notifyAbout('error', count($selection));\n            return false;\n        }\n    }\n\n    /**\n     * Displays the index page of a given type.\n     *\n     * On a GET request a list view of the beans is represented where on a POST request\n     * the choosen action is applied to all selected beans of a collection.\n     *\n     * @param string $layout\n     * @param int $page\n     * @param int $order\n     * @param int $dir\n     */\n    public function index($layout, $page, $order, $dir)\n    {\n        Permission::check(Flight::get('user'), $this->type, 'index');\n        $this->action = 'index';\n        $this->layout = $layout;\n        $this->page = $page;\n        $this->order = $order;\n        $this->dir = $dir;\n        //$this->template = \"model/{$this->type}/{$this->layout}\";\n        $this->template = \"scaffold/{$this->layout}\";\n        if (Flight::request()->method == 'POST') {\n            if (! Model::validateCSRFToken(Flight::request()->data->token)) {\n                $this->redirect(\"/logout\");\n            }\n            //clear filter?\n            if (Flight::request()->data->submit == I18n::__('filter_submit_clear')) {\n                R::trash($this->filter);\n                $_SESSION['scaffold'][$this->type]['filter']['id'] = 0;\n                $this->redirect(\"{$this->base_url}/{$this->type}/{$this->layout}\");\n            }\n            //refresh filter\n            if (Flight::request()->data->submit == I18n::__('filter_submit_refresh')) {\n                $this->filter = R::graph(Flight::request()->data->filter, true);\n                try {\n                    R::store($this->filter);\n                    $_SESSION['scaffold'][$this->type]['filter']['id'] = $this->filter->getId();\n                    $this->redirect(\"{$this->base_url}/{$this->type}/{$this->layout}\");\n                } catch (Exception $e) {\n                    Flight::get('user')->notify(I18n::__('action_filter_error', null, array(), 'error'));\n                }\n            }\n            //handle a selection\n            $this->selection = Flight::request()->data->selection;\n            if ($this->applyToSelection(\n                $this->selection[$this->type],\n                Flight::request()->data->next_action\n            )) {\n                $this->redirect(\"{$this->base_url}/{$this->type}/\");\n            }\n        }\n        $this->getCollection();\n        if (R::count($this->type) == 0) {\n            if (Permission::check(Flight::get('user'), $this->type, 'add')) {\n                Flight::get('user')->notify(I18n::__('scaffold_no_records_add_one'));\n                //return $this->add($this->layout);//this would not work because we dont set form action\n                $this->redirect(\"{$this->base_url}/{$this->type}/add/{$this->layout}\");\n            }\n        }\n\n        $this->pagination = new Pagination(\n            Url::build(\"{$this->base_url}/{$this->type}/\"),\n            $this->page,\n            $this->limit,\n            $this->layout,\n            $this->order,\n            $this->dir,\n            $this->total_records\n        );\n\n        $this->render();\n    }\n\n    /**\n     * Displays page to add a new bean of given type.\n     *\n     * On a GET request a form is represented that has to be filled in by the client. On a POST\n     * request a new bean is created and the client is redirected to a choosen next url.\n     *\n     * @param string $layout\n     */\n    public function add($layout)\n    {\n        Permission::check(Flight::get('user'), $this->type, 'add');\n        $this->layout = $layout;\n        $this->action = 'add';\n        $this->template = \"model/{$this->type}/add\";\n        if (! Flight::view()->exists($this->template)) {\n            // if there is no special \"add\" template, we fallback to \"edit\"\n            $this->template = \"model/{$this->type}/edit\";\n            if (! Flight::view()->exists($this->template)) {\n                // if there is no special \"edit\" template, we fallback to \"edit\"\n                $this->template = \"scaffold/edit\";\n            }\n        }\n        if (Flight::request()->method == 'POST') {\n            if (! Model::validateCSRFToken(Flight::request()->data->token)) {\n                $this->redirect(\"/logout\");\n            }\n            $this->record = R::graph(Flight::request()->data->dialog, true);\n            $this->setNextAction(Flight::request()->data->next_action);\n            if ($this->doRedbeanAction()) {\n                if ($this->getNextAction() == 'add') {\n                    $this->redirect(\"{$this->base_url}/{$this->type}/add/{$this->layout}/\");\n                } elseif ($this->getNextAction() == 'edit') {\n                    $this->redirect(\"{$this->base_url}/{$this->type}/edit/{$this->record->getId()}/1/0/0/\");\n                }\n                $this->redirect(\"{$this->base_url}/{$this->type}/{$this->layout}/\");\n            }\n        } else {\n            if ($this->record->getId()) {\n                $this->record = R::dup($this->record);\n                Flight::get('user')->notify(I18n::__('scaffold_dup_goto_original', null, array(\n                    Url::build(\"{$this->base_url}/{$this->type}/edit/{$this->id}/1/0/0/{$this->layout}/\")\n                )));\n            }\n        }\n        $this->render();\n    }\n\n    /**\n     * Displays page to edit an existing bean.\n     *\n     * On a GET request a form is presented to edit the bean. On a POST request the changed bean\n     * is stored and the client is redirected.\n     *\n     * @param int $page\n     * @param int $order\n     * @param int $dir\n     * @param string $layout\n     */\n    public function edit($page, $order, $dir, $layout)\n    {\n        Permission::check(Flight::get('user'), $this->type, 'read');\n        $this->action = 'edit';\n        $this->page = $page;\n        $this->order = $order;\n        $this->dir = $dir;\n        $this->layout = $layout;\n        $this->template = \"model/{$this->type}/edit\";\n        if (! Flight::view()->exists($this->template)) {\n            // if there is no special \"edit\" template, we fallback to \"scaffold/edit\"\n            $this->template = \"scaffold/edit\";\n        }\n        if (Flight::request()->method == 'POST') {\n            if (! Model::validateCSRFToken(Flight::request()->data->token)) {\n                $this->redirect(\"/logout\");\n            }\n            Permission::check(Flight::get('user'), $this->type, 'edit');//check for edit perm now\n            $this->record = R::graph(Flight::request()->data->dialog, true);\n            $this->setNextAction(Flight::request()->data->next_action);\n            if ($this->doRedbeanAction()) {\n                if ($this->getNextAction() == 'edit') {\n                    $this->redirect(\"{$this->base_url}/{$this->type}/edit/{$this->record->getId()}/{$this->page}/{$this->order}/{$this->dir}/{$this->layout}/\");\n                } elseif ($this->getNextAction() == 'next_edit' &&\n                                                $next_id = $this->id_at_offset($this->page + 1)) {\n                    $next_page = $this->page + 1;\n                    $this->redirect(\"{$this->base_url}/{$this->type}/edit/{$next_id}/{$next_page}/{$this->order}/{$this->dir}/{$this->layout}/\");\n                } elseif ($this->getNextAction() == 'prev_edit' &&\n                                                $prev_id = $this->id_at_offset($this->page - 1)) {\n                    $prev_page = $this->page - 1;\n                    $this->redirect(\"{$this->base_url}/{$this->type}/edit/{$prev_id}/{$prev_page}/{$this->order}/{$this->dir}/{$this->layout}/\");\n                }\n                $this->redirect(\"{$this->base_url}/{$this->type}/{$this->layout}/\");\n            }\n        }\n        $this->render();\n    }\n\n    /**\n     * Renders a scaffold page.\n     *\n     * @todo Think about:\n     *  - Make the 'html5' layout configurable\n     */\n    protected function render()\n    {\n        Flight::render('shared/notification', array(\n           'record' => $this->record\n        ), 'notification');\n        //\n        Flight::render('shared/navigation/account', array(), 'navigation_account');\n        Flight::render('shared/navigation/main', array(), 'navigation_main');\n        Flight::render('shared/navigation', array(), 'navigation');\n        Flight::render('scaffold/toolbar', array(\n            'record' => $this->record,\n            'base_url' => $this->base_url,\n            'type' => $this->type,\n            'layout' => $this->layout,\n            'page' => $this->page,\n            'order' => $this->order,\n            'dir' => $this->dir\n        ), 'toolbar');\n        Flight::render('shared/header', array(), 'header');\n        Flight::render('shared/footer', array(\n            'pagination' => $this->pagination\n        ), 'footer');\n        Flight::render($this->template, array(\n            'filter' => $this->filter,\n            'record' => $this->record,\n            'records' => $this->records,\n            'selection' => $this->selection,\n            'total_records' => $this->total_records,\n            'dir_map' => $this->dir_map\n        ), 'form_details');\n        Flight::render('scaffold/form', array(\n            'actions' => $this->actions,\n            'current_action' => $this->action,\n            'next_action' => $this->getNextAction(),\n            'record' => $this->record,\n            'records' => $this->records\n        ), 'content');\n        Flight::render('html5', array(\n            'title' => I18n::__(\"scaffold_head_title_{$this->action}\", null, array(\n                I18n::__(\"domain_{$this->type}\")\n            )),\n            'language' => Flight::get('language'),\n            'javascripts' => $this->javascripts\n        ));\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Model\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Model.\n *\n * @package Cinnebar\n * @subpackage Model\n * @version $Id$\n */\nclass Model extends RedBean_SimpleModel\n{\n    /**\n     * Defines the validation mode to throw an exception.\n     */\n    const VALIDATION_MODE_EXCEPTION = 1;\n\n    /**\n     * Defines the validation mode to store an valid or invalid state with the bean.\n     */\n    const VALIDATION_MODE_IMPLICIT = 2;\n\n    /**\n     * Defines the validation mode to simply return the result of a validation.\n     */\n    const VALIDATION_MODE_EXPLICIT = 4;\n\n    /**\n     * Container for the validators.\n     *\n     * @var array\n     */\n    protected $validators = array();\n\n    /**\n     * Holds the validation mode where 1 = Exception, 2 = Implicit attribute, 4 = Explicit.\n     * Affects all beans.\n     *\n     * @var int\n     */\n    protected static $validation_mode = self::VALIDATION_MODE_EXCEPTION;\n\n    /**\n     * Container for the converters.\n     *\n     * @var array\n     */\n    protected $converters = array();\n\n    /**\n     * Container for the errors.\n     *\n     * @var array\n     */\n    protected $errors = array();\n\n    /**\n     * Holds the auto tag status.\n     *\n     * @var bool\n     */\n    protected $auto_tag = false;\n\n    /**\n     * Holds the default actions.\n     *\n     * @var array\n     */\n    protected $actions =  array(\n        'index' => array('idle', 'expunge'),\n        'add' => array('add', 'edit', 'index'),\n        'edit' => array('edit', 'next_edit', 'prev_edit', 'index'),\n        'delete' => array('index')\n    );\n\n    /**\n     * Constructor.\n     */\n    public function __construct()\n    {\n    }\n\n    /**\n     * Returns a \"random\" string to prevent CSRF.\n     *\n     * @return string\n     */\n    public static function getCSRFToken()\n    {\n        @session_start();\n        if (empty($_SESSION['csrf_tokens'])) {\n            $_SESSION['csrf_tokens'] = [];\n        }\n        $nonce = md5(uniqid(rand(), true));\n        $_SESSION['csrf_tokens'][$nonce] = true;\n        return $nonce;\n    }\n\n    /**\n     * Returns wether the CSRF token validates or not.\n     *\n     * @param string $token\n     * @return bool\n     */\n    public static function validateCSRFToken($token)\n    {\n        @session_start();\n        if (isset($_SESSION['csrf_tokens'][$token])) {\n            unset($_SESSION['csrf_tokens'][$token]);\n            error_log('Good user');\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Returns an array with attributes for lists.\n     *\n     * @param string (optional) $layout\n     * @return array\n     */\n    public function getAttributes($layout = 'table')\n    {\n        return array();\n        /*\n        return array(\n            array(\n                'name' => 'id',\n                'sort' => array(\n                    'name' => $this->bean->getMeta('type').'.name'\n                ),\n                'filter' => array(\n                    'tag' => 'number'\n                )\n            )\n        );\n        */\n    }\n\n    /**\n     * Returns the attribute of the related bean.\n     *\n     * @param string $bean_attribute the first part is the bean, second the attribute\n     * @return string\n     */\n    public function relatedOne($bean_attribute)\n    {\n        $parts = explode('_', $bean_attribute);\n        if (!$this->bean->{$parts[0]}) {\n            return '';\n        }\n        return $this->bean->{$parts[0]}->{$parts[1]};\n    }\n\n    /**\n     * Returns a string representing a boolean state of an beans attribute.\n     *\n     * @param string $attribute name to represent as a true or false string\n     * @return string\n     */\n    public function boolean($attribute)\n    {\n        if ($this->bean->{$attribute}) {\n            return I18n::__('bool_true');\n        }\n        return I18n::__('bool_false');\n    }\n\n    /**\n     * Returns a localized datetime string.\n     *\n     * @param string $attribute name to localize\n     * @return string\n     */\n    public function localizedDateTime($attribute)\n    {\n        if (! Flight::setlocale()) {\n            return $this->bean->{$attribute};\n        }\n        $templates = Flight::get('templates');\n        return strftime($templates['datetime'], strtotime($this->bean->{$attribute}));\n    }\n\n    /**\n     * Returns a localized date string.\n     *\n     * @param string $attribute name to localize\n     * @return string\n     */\n    public function localizedDate($attribute)\n    {\n        if (! Flight::setlocale()) {\n            return $this->bean->{$attribute};\n        }\n        $templates = Flight::get('templates');\n        return strftime($templates['date'], strtotime($this->bean->{$attribute}));\n    }\n\n    /**\n     * Returns a localized time string.\n     *\n     * @param string $attribute name to localize\n     * @return string\n     */\n    public function localizedTime($attribute)\n    {\n        if (! Flight::setlocale()) {\n            return $this->bean->{$attribute};\n        }\n        $templates = Flight::get('templates');\n        return strftime($templates['time'], strtotime($this->bean->{$attribute}));\n    }\n\n    /**\n     * Renders a decimal value nicely.\n     *\n     * @param string $attribute\n     * @param int $decimals defaults to 3\n     * @param string $decimal_point defaults to '.'\n     * @param string $thousands_separator defaults to ','\n     * @return string\n     */\n    public function decimal($attribute, $decimals = 3, $decimal_point = ',', $thousands_separator = '.')\n    {\n        if (! $this->bean->{$attribute}) {\n            return '';\n        }\n        return number_format((float)$this->bean->{$attribute}, $decimals, $decimal_point, $thousands_separator);\n    }\n\n    /**\n     * Returns the root bean of a hierarchy.\n     *\n     * If the optional parameter is set the last bean before the parent bean with\n     * the given id will be returnded. Stop by sitesfolder id for example when you\n     * want to cut the tree a certain level when building a simple cms based on domain.\n     *\n     * @uses getRoot() to return the domain up one level\n     *\n     * @param int (optional) $stop_id of the domain to cut the bubble up route\n     * @return RedBeanPHP\\OODBBean $root\n     */\n    public function getRoot($stop_id = 0)\n    {\n        if (! $this->bean->{$this->bean->getMeta('type')}) {\n            return $this->bean;\n        }\n        if ($this->bean->{$this->bean->getMeta('type')}->getId() == $stop_id) {\n            return $this->bean;\n        }\n        return $this->bean->{$this->bean->getMeta('type')}->getRoot($stop_id);\n    }\n\n    /**\n     * Returns an array with direct descendents of this bean.\n     *\n     * @return array $children\n     */\n    public function getChildren()\n    {\n        $own = 'own'.ucfirst($this->bean->getMeta('type'));\n        return $this->bean->{$own};\n    }\n\n    /**\n     * Returns SQL string.\n     *\n     * Use with DISTINCT([table].id) to fetch all beans or use with COUNT(DISTINCT([table].id))\n     * to get the total number of records matching the optional where clause.\n     *\n     * @param string (optional) $fields to select\n     * @param string (optional) $where\n     * @param string (optional) $order\n     * @param int (optional) $offset\n     * @param int (optional) $limit\n     * @return string $sql\n     */\n    public function getSql($fields = 'id', $where = '1', $order = null, $offset = null, $limit = null)\n    {\n        $sql = <<<SQL\n    \tSELECT\n    \t    {$fields}\n    \tFROM\n    \t    {$this->bean->getMeta('type')}\n    \tWHERE\n    \t    {$where}\nSQL;\n        //add optional order by\n        if ($order) {\n            $sql .= \" ORDER BY {$order}\";\n        }\n        //add optional limit\n        if ($offset || $limit) {\n            $sql .= \" LIMIT {$offset}, {$limit}\";\n        }\n        return $sql;\n    }\n\n    /**\n     * Returns automatic keywords for this bean.\n     *\n     * @param array (optional) $tags which the user may has entered\n     * @return array\n     */\n    public function keywords()\n    {\n        return array(\n            $this->bean->getId()\n        );\n    }\n\n    /**\n     * Returns an array of possible actions.\n     *\n     * Overwrite this function on your bean models.\n     *\n     * @return array\n     */\n    public function getActions()\n    {\n        return $this->actions;\n    }\n\n    /**\n     * Sets an action.\n     *\n     * @param string $action\n     * @param array $actions\n     * @return void\n     */\n    public function setAction($action = '', $actions = array())\n    {\n        $this->actions[$action] = $actions;\n        return null;\n    }\n\n    /**\n     * Sets all actions.\n     *\n     * @param array $actions\n     * @return void\n     */\n    public function setActions($actions = array())\n    {\n        $this->actions = $actions;\n        return null;\n    }\n\n    /**\n     * Expunge is an alias of R::trash().\n     */\n    public function expunge()\n    {\n        R::trash($this->bean);\n    }\n\n    /**\n     * Returns or sets the auto tag flag.\n     *\n     * @param bool (optional) $switch\n     * @return bool\n     */\n    public function autoTag($switch = null)\n    {\n        if ($switch !== null) {\n            $this->auto_tag = $switch;\n        }\n        return $this->auto_tag;\n    }\n\n    /**\n     * Returns or sets the auto info flag.\n     *\n     * @param bool (optional) $switch\n     * @return bool\n     */\n    public function autoInfo($switch = null)\n    {\n        if ($switch !== null) {\n            $this->auto_info = $switch;\n        }\n        return $this->auto_info;\n    }\n\n    /**\n     * Returns a *i18n bean for this bean.\n     *\n     * A i18n bean means an internationalized version of a bean where the localizeable fields\n     * are stored in a bean that extends the original beans name with the string 'i18n'.\n     * If there is no i18n version for the asked language then the default language is\n     * looked up and duplicated.\n     *\n     * @param string $language iso code of the wanted language\n     * @return RedBean_OODBBean\n     */\n    public function i18n($language)\n    {\n        $i18nType = $this->bean->getMeta('type').'i18n';\n        if (! $i18n = R::findOne($i18nType, $this->bean->getMeta('type').'_id = ? AND language = ?', array($this->bean->getId(), $language))) {\n            $i18n = R::dispense($i18nType);\n            $i18n->language = $language;\n            $i18n->name = $this->bean->name;\n        }\n        return $i18n;\n    }\n\n    /**\n     * Returns the translated word for a beans name attribute.\n     *\n     * @return string\n     */\n    public function translated()\n    {\n        return $this->bean->i18n(Flight::get('user')->getLanguage())->name;\n    }\n\n    /**\n     * Update.\n     */\n    public function update()\n    {\n        $this->convert();\n        $this->validate();\n    }\n\n    /**\n     * This is called after the bean was updated.\n     *\n     * @return void\n     */\n    public function after_update()\n    {\n        if ($this->autoTag()) {\n            $this->setAutoTags();\n        }\n    }\n\n    /**\n     * setAutoTags()\n     *\n     * @uses keywords()\n     * @return array $tags\n     */\n    protected function setAutoTags()\n    {\n        if (! $this->bean->getId()) {\n            return false;\n        }\n        $tags = array();\n        foreach ($this->keywords() as $n=>$keyword) {\n            if (trim($keyword) == '') {\n                continue;\n            }\n            $tags[] = trim($keyword);\n        }\n        R::tag($this->bean, $tags);\n        return $tags;\n    }\n\n    /**\n     * Adds an error to the general errors or to a certain attribute if the optional parameter is set.\n     *\n     * @param string $errorText\n     * @param string (optional) $attribute\n     * @return void\n     */\n    public function addError($errorText, $attribute = '')\n    {\n        $this->errors[$attribute][] = $errorText;\n    }\n\n    /**\n     * Returns the errors of this model.\n     *\n     * @return array $errors\n     */\n    public function getErrors()\n    {\n        return $this->errors;\n    }\n\n    /**\n     * Returns true if model has errors.\n     *\n     * If the optional parameter is set a certain attribute is tested for having an error or not.\n     *\n     * @uses Cinnebar_Model::$errors\n     * @param string (optional) $attribute\n     * @return bool $hasErrorOrHasNoError\n     */\n    public function hasError($attribute = '')\n    {\n        if ($attribute === '') {\n            return ! empty($this->errors);\n        }\n        return isset($this->errors[$attribute]);\n    }\n\n    /**\n     * Alias for {@link hasError()} call without an special attribute.\n     *\n     * @return bool $hasErrorsOrNone\n     */\n    public function hasErrors()\n    {\n        return $this->hasError();\n    }\n\n    /**\n     * Set the validation mode.\n     *\n     * This applies to all your beans at once.\n     *\n     * @param bool $mode\n     */\n    public function setValidationMode($mode)\n    {\n        self::$validation_mode = $mode;\n    }\n\n    /**\n     * Returns the current validation mode.\n     *\n     * @return bool\n     */\n    public function getValidationMode()\n    {\n        return self::$validation_mode;\n    }\n\n    /**\n     * Add a validator to the attribute.\n     *\n     * @param string $attribute\n     * @param mixed $validator\n     *\n     * @return Model $this\n     */\n    public function addValidator($attribute, $validator)\n    {\n        if (! is_array($validator)) {\n            $validator = array($validator);\n        }\n        foreach ($validator as $oneValidator) {\n            $this->validators[$attribute][] = $oneValidator;\n        }\n        return $this;\n    }\n\n    /**\n     * Returns true or false wether the model validates or not.\n     *\n     * @uses $invalid\n     *\n     * @return bool\n     * @throws Exception_Validation if validation mode is set to exception (default)\n     */\n    public function validate()\n    {\n        if (isset($this->bean->invalid) && $this->bean->invalid) {\n            $this->bean->invalid = false;\n        }\n        if (empty($this->validators)) {\n            return true;\n        }\n        $suggest = true;\n        foreach ($this->validators as $attribute => $attributeValidators) {\n            foreach ($attributeValidators as $validator) {\n                if (! $validator->validate($this->bean->$attribute)) {\n                    $suggest = false;\n                    $this->addError(I18n::__(strtolower(get_class($validator)).'_invalid'), $attribute);\n                }\n            }\n        }\n        if ($suggest === true) {\n            return true;\n        }\n        //validation failed, react according to validation mode\n        switch (self::$validation_mode) {\n            case self::VALIDATION_MODE_EXCEPTION:\n                throw new Exception_Validation(\"Invalid {$this->bean->getMeta('type')}#{$this->bean->getId()}\");\n                break;\n            case self::VALIDATION_MODE_IMPLICIT:\n                $this->bean->invalid = true;\n                break;\n            default:\n                //nothing, only return false\n        }\n        return false;\n    }\n\n    /**\n     * Add a converter to the attribute.\n     *\n     * @param string $attribute\n     * @param mixed $converter\n     *\n     * @return Model $this\n     */\n    public function addConverter($attribute, $converter)\n    {\n        if (! is_array($converter)) {\n            $converter = array($converter);\n        }\n        foreach ($converter as $oneConverter) {\n            $this->converters[$attribute][] = $oneConverter;\n        }\n        return $this;\n    }\n\n    /**\n     * Runs all converters of this model.\n     *\n     * @return void\n     */\n    public function convert()\n    {\n        if (empty($this->converters)) {\n            return;\n        }\n        foreach ($this->converters as $attribute => $attributeConverters) {\n            foreach ($attributeConverters as $converter) {\n                $this->bean->$attribute = $converter->convert($this->bean->$attribute);\n            }\n        }\n        return;\n    }\n}\n", "<?php\n/**\n * Cinnebar.\n *\n * @package Cinnebar\n * @subpackage Model\n * @author $Author$\n * @version $Id$\n */\n\n/**\n * Criteria model.\n *\n * @package Cinnebar\n * @subpackage Model\n * @version $Id$\n */\nclass Model_Criteria extends Model\n{\n    /**\n     * Container for the map of search operators.\n     *\n     * @var array\n     */\n    public $map = array(\n        'like' => '%1$s like ?',\n        'notlike' => '%1$s not like ?',\n        'eq' => '%1$s = ?',\n        'neq' => '%1$s != ?',\n        'bw' => '%1$s like ?',\n        'ew' => '%1$s like ?',\n        'lt' => '%1$s < ?',\n        'gt' => '%1$s > ?',\n        'in' => '%1$s in (%2$s)'\n        //'between' => __('filter_op_between'),\n        //'istrue' => __('filter_op_istrue'),\n        //'isfalse' => __('filter_op_isfalse')\n    );\n\n    /**\n     * Holds possible search operators depending on the filter tag type.\n     *\n     * A simple scaffold filter criteria will always use the first operator. E.g. if you\n     * have a filter tag text then the where clause will use bw (begins with).\n     *\n     * @var array\n     */\n    public $operators = array(\n        'text' => array('bw', 'ew', 'eq', 'neq', 'like', 'notlike'),\n        'number' => array('eq', 'gt', 'lt', 'neq'),\n        'date' => array('eq', 'gt', 'lt', 'neq'),\n        'time' => array('eq', 'gt', 'lt', 'neq'),\n        'datetime' => array('eq', 'gt', 'lt', 'neq'),\n        'email' => array('bw', 'ew', 'eq', 'neq', 'like', 'notlike'),\n        'textarea' => array('bw', 'ew', 'eq', 'neq', 'like', 'notlike'),\n        'in' => array('in'),\n        'select' => array('eq'),\n        'bool' => array('eq')\n     );\n\n    /**\n     * Container for characters that have to be escaped for usage with SQL.\n     *\n     * @var array\n     */\n    public $pat = array('%', '_');\n\n    /**\n     * Container for escaped charaters.\n     *\n     * @var array\n     */\n    public $rep = array('\\%', '\\_');\n\n    /**\n     * Prepares a value according to its tag and returns it.\n     *\n     * @param string the value to convert\n     * @return mixed\n     */\n    public function convertToText($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Prepares a value according to its tag and returns it.\n     *\n     * @param string the value to convert\n     * @return mixed\n     */\n    public function convertToNumber($value)\n    {\n        return (float)str_replace(',', '.', $value);\n        //return $value;\n    }\n\n    /**\n     * Prepares a value according to its tag and returns it.\n     *\n     * @param string the value to convert\n     * @return mixed\n     */\n    public function convertToEmail($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Prepares a value according to its tag and returns it.\n     *\n     * @param string the value to convert\n     * @return mixed\n     */\n    public function convertToTextarea($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Prepares a value according to its tag and returns it.\n     *\n     * @param string the value to convert\n     * @return mixed\n     */\n    public function convertToIn($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Prepares a value according to its tag and returns it.\n     *\n     * @param string the value to convert\n     * @return mixed\n     */\n    public function convertToBool($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Prepares a value according to its tag and returns it.\n     *\n     * @param string the value to convert\n     * @return mixed\n     */\n    public function convertToSelect($value)\n    {\n        return $value;\n    }\n\n    /**\n     * Returns a mysql datetime string.\n     *\n     * @param string the value to convert\n     * @return string\n     */\n    public function convertToDatetime($value)\n    {\n        return date('Y-m-d H:i:s', strtotime($value));\n    }\n\n    /**\n     * Returns a mysql date string.\n     *\n     * @param string the value to convert\n     * @return string\n     */\n    public function convertToDate($value)\n    {\n        return date('Y-m-d', strtotime($value));\n    }\n\n    /**\n     * Returns a mysql time string.\n     *\n     * @param string the value to convert\n     * @return string\n     */\n    public function convertToTime($value)\n    {\n        return date('H:i:s', strtotime($value));\n    }\n\n    /**\n     * Returns a string to use as part of a SQL query.\n     *\n     * @throws an exception when criteria operator has no template definded in map\n     * @uses $map\n     * @uses mask_filter_value()\n     * @param Model_Filter $filter\n     * @return string\n     */\n    public function makeWherePart(Model_Filter $filter)\n    {\n        if (! isset($this->map[$this->bean->op])) {\n            throw new Exception('Filter operator has no template');\n        }\n        $template = $this->map[$this->bean->op];\n        $value = $this->mask_filter_value($filter);\n        return sprintf($template, $this->bean->attribute, $value);\n    }\n\n    /**\n     * Masks the criterias value and stacks it into the filter values.\n     *\n     * @uses Model_Filter::$filter_values where the values of our criterias are stacked up\n     * @param Model_Filter $filter\n     * @return void\n     */\n    protected function mask_filter_value(Model_Filter $filter)\n    {\n        $add_to_filter_values = true;\n        switch ($this->bean->op) {\n            case 'like':\n                $value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';\n                break;\n            case 'notlike':\n                $value = '%'.str_replace($this->pat, $this->rep, $this->bean->value).'%';\n                break;\n            case 'bw':\n                $value = str_replace($this->pat, $this->rep, $this->bean->value).'%';\n                break;\n            case 'ew':\n                $value = '%'.str_replace($this->pat, $this->rep, $this->bean->value);\n                break;\n            case 'in':\n                $_sharedSubName = 'shared'.ucfirst(strtolower($this->bean->substitute));\n                $ids = array_keys($this->bean->{$_sharedSubName});\n                $value = implode(', ', $ids);\n                $add_to_filter_values = false;\n                break;\n            default:\n                $value = $this->bean->value;\n        }\n        if ($add_to_filter_values) {\n            $converter = 'convertTo' . ucfirst(strtolower($this->bean->tag));\n            $filter->filter_values[] = $this->$converter($value);\n        }\n        return $value;\n    }\n\n    /**\n     * Returns array with possible operators for the given tag type.\n     *\n     * @return array $operators\n     */\n    public function operators()\n    {\n        if (isset($this->operators[$this->bean->tag])) {\n            return $this->operators[$this->bean->tag];\n        }\n        return array();\n    }\n\n    /**\n     * Setup validators.\n     */\n    public function dispense()\n    {\n        $this->addValidator('attribute', new Validator_HasValue());\n    }\n}\n"], "filenames": ["app/res/tpl/account/changepassword.php", "app/res/tpl/account/index.php", "app/res/tpl/account/login.php", "app/res/tpl/account/lostpassword.php", "app/res/tpl/admin/index.php", "app/res/tpl/scaffold/form.php", "src/Controller/Account.php", "src/Controller/Login.php", "src/Controller/Lostpassword.php", "src/Controller/Scaffold.php", "src/Model.php", "src/Model/Criteria.php"], "buggy_code_start_loc": [24, 24, 31, 31, 21, 25, 38, 36, 26, 490, 87, 26], "buggy_code_end_loc": [25, 33, 31, 31, 21, 30, 105, 60, 68, 607, 87, 242], "fixing_code_start_loc": [24, 25, 32, 32, 22, 25, 38, 36, 26, 491, 88, 26], "fixing_code_end_loc": [28, 36, 35, 35, 25, 32, 108, 63, 71, 617, 121, 257], "type": "CWE-352", "message": "A vulnerability was found in sah-comp bienlein and classified as problematic. This issue affects some unknown processing. The manipulation leads to cross-site request forgery. The attack may be initiated remotely. The name of the patch is d7836a4f2b241e4745ede194f0f6fb47199cab6b. It is recommended to apply a patch to fix this issue. The identifier VDB-216473 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2020-36622", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-21T19:15:12.127", "lastModified": "2022-12-28T18:45:35.433", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in sah-comp bienlein and classified as problematic. This issue affects some unknown processing. The manipulation leads to cross-site request forgery. The attack may be initiated remotely. The name of the patch is d7836a4f2b241e4745ede194f0f6fb47199cab6b. It is recommended to apply a patch to fix this issue. The identifier VDB-216473 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}, {"lang": "en", "value": "CWE-862"}, {"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bienlein_project:bienlein:*:*:*:*:*:*:*:*", "versionEndExcluding": "2020-09-28", "matchCriteriaId": "C9381F0A-554F-4C72-9B46-0AD0E6933804"}]}]}], "references": [{"url": "https://github.com/sah-comp/bienlein/commit/d7836a4f2b241e4745ede194f0f6fb47199cab6b", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216473", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/sah-comp/bienlein/commit/d7836a4f2b241e4745ede194f0f6fb47199cab6b"}}