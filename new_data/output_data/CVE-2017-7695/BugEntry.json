{"buggy_code": ["<?php\n\t/*\n\t\tClass: BigTreeStorage\n\t\t\tFacilitates the storage, deletion, and replacement of files (whether local or cloud stored).\n\t*/\n\n\tclass BigTreeStorage {\n\n\t\tvar $AutoJPEG = false;\n\t\tvar $DisabledFileError = false;\n\t\tvar $DisabledExtensionRegEx = '/\\\\.(exe|com|bat|php|rb|py|cgi|pl|sh|asp|aspx)$/i';\n\t\tvar $Service = \"\";\n\t\tvar $Cloud = false;\n\t\tvar $Settings;\n\n\t\t/*\n\t\t\tConstructor:\n\t\t\t\tRetrieves the current desired service and image processing availability.\n\t\t*/\n\n\t\tfunction __construct() {\n\t\t\tglobal $cms;\n\t\t\t\n\t\t\t// Get by reference because we modify it.\n\t\t\t$this->Settings = &$cms->autoSaveSetting(\"bigtree-internal-storage\");\n\t\t\t\n\t\t\tif (!empty($this->Settings->Service)) {\n\t\t\t\tif ($this->Settings->Service == \"s3\" || $this->Settings->Service == \"amazon\") {\n\t\t\t\t\t$this->Cloud = new BigTreeCloudStorage(\"amazon\");\n\t\t\t\t} elseif ($this->Settings->Service == \"rackspace\") {\n\t\t\t\t\t$this->Cloud = new BigTreeCloudStorage(\"rackspace\");\n\t\t\t\t} elseif ($this->Settings->Service == \"google\") {\n\t\t\t\t\t$this->Cloud = new BigTreeCloudStorage(\"google\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t\tFunction: convertJPEG\n\t\t\t\tInternal function for turning PNGs uploaded into JPG\n\t\t*/\n\n\t\tprotected function convertJPEG($file,$name) {\n\t\t\tglobal $bigtree;\n\n\t\t\t// Try to figure out what this file is\n\t\t\tlist($iwidth,$iheight,$itype,$iattr) = @getimagesize($file);\n\n\t\t\tif (($this->AutoJPEG || $bigtree[\"config\"][\"image_force_jpeg\"]) && $itype == IMAGETYPE_PNG) {\n\t\t\t\t// See if this PNG has any alpha channels, if it does we're not doing a JPG conversion.\n\t\t\t\t$alpha = ord(@file_get_contents($file,null,null,25,1));\n\t\t\t\tif ($alpha != 4 && $alpha != 6) {\n\t\t\t\t\t// Convert the PNG to JPG\n\t\t\t\t\t$source = imagecreatefrompng($file);\n\t\t\t\t\timagejpeg($source,$file,$bigtree[\"config\"][\"image_quality\"]);\n\t\t\t\t\timagedestroy($source);\n\n\t\t\t\t\t// If they originally uploaded a JPG we rotated into a PNG, we don't want to change the desired filename, but if they uploaded a PNG the new file should be JPG\n\t\t\t\t\tif (strtolower(substr($name,-3,3)) == \"png\") {\n\t\t\t\t\t\t$name = substr($name,0,-3).\"jpg\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $name;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: delete\n\t\t\t\tDeletes a file from the active storage service.\n\n\t\t\tParameters:\n\t\t\t\tfile_location - The URL of the file.\n\t\t*/\n\n\t\tfunction delete($file_location) {\n\t\t\t// Make sure we're using IPLs so we don't get it confused with cloud\n\t\t\t$file_location = str_replace(array(STATIC_ROOT,WWW_ROOT),array(\"{staticroot}\",\"{wwwroot}\"),$file_location);\n\t\t\t// Cloud\n\t\t\tif (substr($file_location,0,4) == \"http\" || substr($file_location,0,2) == \"//\") {\n\t\t\t\t// Try to get the container and pointer\n\t\t\t\t$parts = explode(\"/\",$file_location);\n\t\t\t\t$domain = $parts[2];\n\t\t\t\t$container = $parts[3];\n\t\t\t\t$pointer_parts = array_slice($parts,4);\n\t\t\t\tif ($domain == \"s3.amazonaws.com\") {\n\t\t\t\t\t$service = \"amazon\";\n\t\t\t\t} elseif ($domain == \"storage.googleapis.com\") {\n\t\t\t\t\t$service = \"google\";\n\t\t\t\t} else {\n\t\t\t\t\t$service = \"rackspace\";\n\t\t\t\t\t// Need to figure out the actual container\n\t\t\t\t\t$container = false;\n\t\t\t\t\t$cloud = ($this->Settings->Service == $service) ? $this->Cloud : new BigTreeCloudStorage;\n\t\t\t\t\tforeach ($cloud->Settings[\"rackspace\"][\"container_cdn_urls\"] as $c => $url) {\n\t\t\t\t\t\tif ($url == \"http://$domain\") {\n\t\t\t\t\t\t\t$container = $c;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!$container) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t$pointer_parts = array_slice($parts,3);\n\t\t\t\t}\n\n\t\t\t\tif ($this->Settings->Service == $service) {\n\t\t\t\t\t$pointer = implode(\"/\",$pointer_parts);\n\t\t\t\t\t$this->Cloud->deleteFile($container,$pointer);\n\t\t\t\t\tif ($this->Settings->Container == $container) {\n\t\t\t\t\t\tsqlquery(\"DELETE FROM bigtree_caches WHERE `identifier` = 'org.bigtreecms.cloudfiles' AND `key` = '\".sqlescape($pointer).\"'\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// We might have already made an instance for Rackspace\n\t\t\t\t\t$cloud = isset($cloud) ? $cloud : new BigTreeCloudStorage($service);\n\t\t\t\t\t$cloud->deleteFile($container,implode(\"/\",$pointer_parts));\n\t\t\t\t}\n\t\t\t// Local\n\t\t\t} else {\n\t\t\t\tunlink(str_replace(array(\"{wwwroot}\",\"{staticroot}\"),SITE_ROOT,$file_location));\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t\tFunction: replace\n\t\t\t\tStores a file to the current storage service and replaces any existing file with the same file_name.\n\n\t\t\tParameters:\n\t\t\t\tlocal_file - The absolute path to the local file you wish to store.\n\t\t\t\tfile_name - The file name at the storage end point.\n\t\t\t\trelative_path - The path (relative to SITE_ROOT or the bucket / container root) in which to store the file.\n\t\t\t\tremove_original - Whether to delete the local_file or not.\n\n\t\t\tReturns:\n\t\t\t\tThe URL of the stored file.\n\t\t*/\n\n\t\tfunction replace($local_file,$file_name,$relative_path,$remove_original = true) {\n\t\t\t// Make sure there are no path exploits\n\t\t\t$file_name = BigTree::cleanFile($file_name);\n\t\t\t\n\t\t\t// If the file name ends in a disabled extension, fail.\n\t\t\tif (preg_match($this->DisabledExtensionRegEx, $file_name)) {\n\t\t\t\t$this->DisabledFileError = true;\n\t\t\t\tunlink($local_file);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If we're auto converting images to JPG from PNG\n\t\t\t$file_name = $this->convertJPEG($local_file,$file_name);\n\t\t\t// Enforce trailing slashe on relative_path\n\t\t\t$relative_path = $relative_path ? rtrim($relative_path,\"/\").\"/\" : \"files/\";\n\n\t\t\tif ($this->Cloud) {\n\t\t\t\t$success = $this->Cloud->uploadFile($local_file,$this->Settings->Container,$relative_path.$file_name,true);\n\t\t\t\tif ($success) {\n\t\t\t\t\tsqlquery(\"UPDATE bigtree_caches SET value = '\".sqlescape(json_encode(array(\"name\" => $file_name,\"path\" => $relative_path.$file_name,\"size\" => filesize($local_file)))).\"' WHERE `identifier` = 'org.bigtreecms.cloudfiles' AND `key` = '\".sqlescape($relative_path.$file_name).\"'\");\n\t\t\t\t}\n\t\t\t\tif ($remove_original) {\n\t\t\t\t\tunlink($local_file);\n\t\t\t\t}\n\t\t\t\treturn $success;\n\t\t\t} else {\n\t\t\t\tif ($remove_original) {\n\t\t\t\t\t$success = BigTree::moveFile($local_file,SITE_ROOT.$relative_path.$file_name);\n\t\t\t\t} else {\n\t\t\t\t\t$success = BigTree::copyFile($local_file,SITE_ROOT.$relative_path.$file_name);\n\t\t\t\t}\n\t\t\t\tif ($success) {\n\t\t\t\t\treturn \"{staticroot}\".$relative_path.$file_name;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t\tFunction: store\n\t\t\t\tStores a file to the current storage service and finds a unique filename if collisions exist.\n\n\t\t\tParameters:\n\t\t\t\tlocal_file - The absolute path to the local file you wish to store.\n\t\t\t\tfile_name - The desired file name at the storage end point.\n\t\t\t\trelative_path - The path (relative to SITE_ROOT or the bucket / container root) in which to store the file.\n\t\t\t\tremove_original - Whether to delete the local_file or not.\n\t\t\t\tprefixes - A list of file prefixes that also need to be accounted for when checking file name availability.\n\n\t\t\tReturns:\n\t\t\t\tThe URL of the stored file.\n\t\t*/\n\n\t\tfunction store($local_file,$file_name,$relative_path,$remove_original = true,$prefixes = array()) {\n\t\t\t// Make sure there are no path exploits\n\t\t\t$file_name = BigTree::cleanFile($file_name);\n\n\t\t\t// If the file name ends in a disabled extension, fail.\n\t\t\tif (preg_match($this->DisabledExtensionRegEx, $file_name)) {\n\t\t\t\t$this->DisabledFileError = true;\n\t\t\t\tunlink($local_file);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If we're auto converting images to JPG from PNG\n\t\t\t$file_name = $this->convertJPEG($local_file,$file_name);\n\t\t\t// Enforce trailing slashe on relative_path\n\t\t\t$relative_path = $relative_path ? rtrim($relative_path,\"/\").\"/\" : \"files/\";\n\n\t\t\tif ($this->Cloud) {\n\t\t\t\t// Clean up the file name\n\t\t\t\tglobal $cms;\n\t\t\t\t$parts = BigTree::pathInfo($file_name);\n\t\t\t\t$clean_name = $cms->urlify($parts[\"filename\"]);\n\t\t\t\tif (strlen($clean_name) > 50) {\n\t\t\t\t\t$clean_name = substr($clean_name,0,50);\n\t\t\t\t}\n\t\t\t\t// Best case name\n\t\t\t\t$file_name = $clean_name.\".\".strtolower($parts[\"extension\"]);\n\t\t\t\t$x = 2;\n\t\t\t\t// Make sure we have a unique name\n\t\t\t\twhile (!$file_name || sqlrows(sqlquery(\"SELECT `timestamp` FROM bigtree_caches WHERE `identifier` = 'org.bigtreecms.cloudfiles' AND `key` = '\".sqlescape($relative_path.$file_name).\"'\"))) {\n\t\t\t\t\t$file_name = $clean_name.\"-$x.\".strtolower($parts[\"extension\"]);\n\t\t\t\t\t$x++;\n\n\t\t\t\t\t// Check all the prefixes, make sure they don't exist either\n\t\t\t\t\tif (is_array($prefixes) && count($prefixes)) {\n\t\t\t\t\t\t$prefix_query = array();\n\t\t\t\t\t\tforeach ($prefixes as $prefix) {\n\t\t\t\t\t\t\t$prefix_query[] = \"`key` = '\".sqlescape($relative_path.$prefix.$file_name).\"'\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sqlrows(sqlquery(\"SELECT `timestamp` FROM bigtree_caches WHERE identifier = 'org.bigtreecms.cloudfiles' AND (\".implode(\" OR \",$prefix_query).\")\"))) {\n\t\t\t\t\t\t\t$file_name = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Upload it\n\t\t\t\t$success = $this->Cloud->uploadFile($local_file,$this->Settings->Container,$relative_path.$file_name,true);\n\t\t\t\tif ($success) {\n\t\t\t\t\tsqlquery(\"INSERT INTO bigtree_caches (`identifier`,`key`,`value`) VALUES ('org.bigtreecms.cloudfiles','\".sqlescape($relative_path.$file_name).\"','\".sqlescape(json_encode(array(\"name\" => $file_name,\"path\" => $relative_path.$file_name,\"size\" => filesize($local_file)))).\"')\");\n\t\t\t\t}\n\t\t\t\tif ($remove_original) {\n\t\t\t\t\tunlink($local_file);\n\t\t\t\t}\n\t\t\t\treturn $success;\n\t\t\t} else {\n\t\t\t\t$safe_name = BigTree::getAvailableFileName(SITE_ROOT.$relative_path,$file_name,$prefixes);\n\t\t\t\tif ($remove_original) {\n\t\t\t\t\t$success = BigTree::moveFile($local_file,SITE_ROOT.$relative_path.$safe_name);\n\t\t\t\t} else {\n\t\t\t\t\t$success = BigTree::copyFile($local_file,SITE_ROOT.$relative_path.$safe_name);\n\t\t\t\t}\n\t\t\t\tif ($success) {\n\t\t\t\t\treturn \"{staticroot}\".$relative_path.$safe_name;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Backwards compatibility\n\tclass BigTreeUploadService extends BigTreeStorage {\n\t\tfunction upload($local_file,$file_name,$relative_path,$remove_original = true) {\n\t\t\treturn $this->store($local_file,$file_name,$relative_path,$remove_original);\n\t\t}\n\t}"], "fixing_code": ["<?php\n\t/*\n\t\tClass: BigTreeStorage\n\t\t\tFacilitates the storage, deletion, and replacement of files (whether local or cloud stored).\n\t*/\n\n\tclass BigTreeStorage {\n\n\t\tvar $AutoJPEG = false;\n\t\tvar $DisabledFileError = false;\n\t\tvar $DisabledExtensionRegEx = '/\\\\.(exe|com|bat|php|rb|py|cgi|pl|sh|asp|aspx)/i';\n\t\tvar $Service = \"\";\n\t\tvar $Cloud = false;\n\t\tvar $Settings;\n\n\t\t/*\n\t\t\tConstructor:\n\t\t\t\tRetrieves the current desired service and image processing availability.\n\t\t*/\n\n\t\tfunction __construct() {\n\t\t\tglobal $cms;\n\t\t\t\n\t\t\t// Get by reference because we modify it.\n\t\t\t$this->Settings = &$cms->autoSaveSetting(\"bigtree-internal-storage\");\n\t\t\t\n\t\t\tif (!empty($this->Settings->Service)) {\n\t\t\t\tif ($this->Settings->Service == \"s3\" || $this->Settings->Service == \"amazon\") {\n\t\t\t\t\t$this->Cloud = new BigTreeCloudStorage(\"amazon\");\n\t\t\t\t} elseif ($this->Settings->Service == \"rackspace\") {\n\t\t\t\t\t$this->Cloud = new BigTreeCloudStorage(\"rackspace\");\n\t\t\t\t} elseif ($this->Settings->Service == \"google\") {\n\t\t\t\t\t$this->Cloud = new BigTreeCloudStorage(\"google\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t\tFunction: convertJPEG\n\t\t\t\tInternal function for turning PNGs uploaded into JPG\n\t\t*/\n\n\t\tprotected function convertJPEG($file,$name) {\n\t\t\tglobal $bigtree;\n\n\t\t\t// Try to figure out what this file is\n\t\t\tlist($iwidth,$iheight,$itype,$iattr) = @getimagesize($file);\n\n\t\t\tif (($this->AutoJPEG || $bigtree[\"config\"][\"image_force_jpeg\"]) && $itype == IMAGETYPE_PNG) {\n\t\t\t\t// See if this PNG has any alpha channels, if it does we're not doing a JPG conversion.\n\t\t\t\t$alpha = ord(@file_get_contents($file,null,null,25,1));\n\t\t\t\tif ($alpha != 4 && $alpha != 6) {\n\t\t\t\t\t// Convert the PNG to JPG\n\t\t\t\t\t$source = imagecreatefrompng($file);\n\t\t\t\t\timagejpeg($source,$file,$bigtree[\"config\"][\"image_quality\"]);\n\t\t\t\t\timagedestroy($source);\n\n\t\t\t\t\t// If they originally uploaded a JPG we rotated into a PNG, we don't want to change the desired filename, but if they uploaded a PNG the new file should be JPG\n\t\t\t\t\tif (strtolower(substr($name,-3,3)) == \"png\") {\n\t\t\t\t\t\t$name = substr($name,0,-3).\"jpg\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $name;\n\t\t}\n\n\t\t/*\n\t\t\tFunction: delete\n\t\t\t\tDeletes a file from the active storage service.\n\n\t\t\tParameters:\n\t\t\t\tfile_location - The URL of the file.\n\t\t*/\n\n\t\tfunction delete($file_location) {\n\t\t\t// Make sure we're using IPLs so we don't get it confused with cloud\n\t\t\t$file_location = str_replace(array(STATIC_ROOT,WWW_ROOT),array(\"{staticroot}\",\"{wwwroot}\"),$file_location);\n\t\t\t// Cloud\n\t\t\tif (substr($file_location,0,4) == \"http\" || substr($file_location,0,2) == \"//\") {\n\t\t\t\t// Try to get the container and pointer\n\t\t\t\t$parts = explode(\"/\",$file_location);\n\t\t\t\t$domain = $parts[2];\n\t\t\t\t$container = $parts[3];\n\t\t\t\t$pointer_parts = array_slice($parts,4);\n\t\t\t\tif ($domain == \"s3.amazonaws.com\") {\n\t\t\t\t\t$service = \"amazon\";\n\t\t\t\t} elseif ($domain == \"storage.googleapis.com\") {\n\t\t\t\t\t$service = \"google\";\n\t\t\t\t} else {\n\t\t\t\t\t$service = \"rackspace\";\n\t\t\t\t\t// Need to figure out the actual container\n\t\t\t\t\t$container = false;\n\t\t\t\t\t$cloud = ($this->Settings->Service == $service) ? $this->Cloud : new BigTreeCloudStorage;\n\t\t\t\t\tforeach ($cloud->Settings[\"rackspace\"][\"container_cdn_urls\"] as $c => $url) {\n\t\t\t\t\t\tif ($url == \"http://$domain\") {\n\t\t\t\t\t\t\t$container = $c;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!$container) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\t$pointer_parts = array_slice($parts,3);\n\t\t\t\t}\n\n\t\t\t\tif ($this->Settings->Service == $service) {\n\t\t\t\t\t$pointer = implode(\"/\",$pointer_parts);\n\t\t\t\t\t$this->Cloud->deleteFile($container,$pointer);\n\t\t\t\t\tif ($this->Settings->Container == $container) {\n\t\t\t\t\t\tsqlquery(\"DELETE FROM bigtree_caches WHERE `identifier` = 'org.bigtreecms.cloudfiles' AND `key` = '\".sqlescape($pointer).\"'\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// We might have already made an instance for Rackspace\n\t\t\t\t\t$cloud = isset($cloud) ? $cloud : new BigTreeCloudStorage($service);\n\t\t\t\t\t$cloud->deleteFile($container,implode(\"/\",$pointer_parts));\n\t\t\t\t}\n\t\t\t// Local\n\t\t\t} else {\n\t\t\t\tunlink(str_replace(array(\"{wwwroot}\",\"{staticroot}\"),SITE_ROOT,$file_location));\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t\tFunction: replace\n\t\t\t\tStores a file to the current storage service and replaces any existing file with the same file_name.\n\n\t\t\tParameters:\n\t\t\t\tlocal_file - The absolute path to the local file you wish to store.\n\t\t\t\tfile_name - The file name at the storage end point.\n\t\t\t\trelative_path - The path (relative to SITE_ROOT or the bucket / container root) in which to store the file.\n\t\t\t\tremove_original - Whether to delete the local_file or not.\n\n\t\t\tReturns:\n\t\t\t\tThe URL of the stored file.\n\t\t*/\n\n\t\tfunction replace($local_file,$file_name,$relative_path,$remove_original = true) {\n\t\t\t// Make sure there are no path exploits\n\t\t\t$file_name = BigTree::cleanFile($file_name);\n\t\t\t\n\t\t\t// If the file name ends in a disabled extension, fail.\n\t\t\tif (preg_match($this->DisabledExtensionRegEx, $file_name)) {\n\t\t\t\t$this->DisabledFileError = true;\n\t\t\t\tunlink($local_file);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If we're auto converting images to JPG from PNG\n\t\t\t$file_name = $this->convertJPEG($local_file,$file_name);\n\t\t\t// Enforce trailing slashe on relative_path\n\t\t\t$relative_path = $relative_path ? rtrim($relative_path,\"/\").\"/\" : \"files/\";\n\n\t\t\tif ($this->Cloud) {\n\t\t\t\t$success = $this->Cloud->uploadFile($local_file,$this->Settings->Container,$relative_path.$file_name,true);\n\t\t\t\tif ($success) {\n\t\t\t\t\tsqlquery(\"UPDATE bigtree_caches SET value = '\".sqlescape(json_encode(array(\"name\" => $file_name,\"path\" => $relative_path.$file_name,\"size\" => filesize($local_file)))).\"' WHERE `identifier` = 'org.bigtreecms.cloudfiles' AND `key` = '\".sqlescape($relative_path.$file_name).\"'\");\n\t\t\t\t}\n\t\t\t\tif ($remove_original) {\n\t\t\t\t\tunlink($local_file);\n\t\t\t\t}\n\t\t\t\treturn $success;\n\t\t\t} else {\n\t\t\t\tif ($remove_original) {\n\t\t\t\t\t$success = BigTree::moveFile($local_file,SITE_ROOT.$relative_path.$file_name);\n\t\t\t\t} else {\n\t\t\t\t\t$success = BigTree::copyFile($local_file,SITE_ROOT.$relative_path.$file_name);\n\t\t\t\t}\n\t\t\t\tif ($success) {\n\t\t\t\t\treturn \"{staticroot}\".$relative_path.$file_name;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/*\n\t\t\tFunction: store\n\t\t\t\tStores a file to the current storage service and finds a unique filename if collisions exist.\n\n\t\t\tParameters:\n\t\t\t\tlocal_file - The absolute path to the local file you wish to store.\n\t\t\t\tfile_name - The desired file name at the storage end point.\n\t\t\t\trelative_path - The path (relative to SITE_ROOT or the bucket / container root) in which to store the file.\n\t\t\t\tremove_original - Whether to delete the local_file or not.\n\t\t\t\tprefixes - A list of file prefixes that also need to be accounted for when checking file name availability.\n\n\t\t\tReturns:\n\t\t\t\tThe URL of the stored file.\n\t\t*/\n\n\t\tfunction store($local_file,$file_name,$relative_path,$remove_original = true,$prefixes = array()) {\n\t\t\t// Make sure there are no path exploits\n\t\t\t$file_name = BigTree::cleanFile($file_name);\n\n\t\t\t// If the file name ends in a disabled extension, fail.\n\t\t\tif (preg_match($this->DisabledExtensionRegEx, $file_name)) {\n\t\t\t\t$this->DisabledFileError = true;\n\t\t\t\tunlink($local_file);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If we're auto converting images to JPG from PNG\n\t\t\t$file_name = $this->convertJPEG($local_file,$file_name);\n\t\t\t// Enforce trailing slashe on relative_path\n\t\t\t$relative_path = $relative_path ? rtrim($relative_path,\"/\").\"/\" : \"files/\";\n\n\t\t\tif ($this->Cloud) {\n\t\t\t\t// Clean up the file name\n\t\t\t\tglobal $cms;\n\t\t\t\t$parts = BigTree::pathInfo($file_name);\n\t\t\t\t$clean_name = $cms->urlify($parts[\"filename\"]);\n\t\t\t\tif (strlen($clean_name) > 50) {\n\t\t\t\t\t$clean_name = substr($clean_name,0,50);\n\t\t\t\t}\n\t\t\t\t// Best case name\n\t\t\t\t$file_name = $clean_name.\".\".strtolower($parts[\"extension\"]);\n\t\t\t\t$x = 2;\n\t\t\t\t// Make sure we have a unique name\n\t\t\t\twhile (!$file_name || sqlrows(sqlquery(\"SELECT `timestamp` FROM bigtree_caches WHERE `identifier` = 'org.bigtreecms.cloudfiles' AND `key` = '\".sqlescape($relative_path.$file_name).\"'\"))) {\n\t\t\t\t\t$file_name = $clean_name.\"-$x.\".strtolower($parts[\"extension\"]);\n\t\t\t\t\t$x++;\n\n\t\t\t\t\t// Check all the prefixes, make sure they don't exist either\n\t\t\t\t\tif (is_array($prefixes) && count($prefixes)) {\n\t\t\t\t\t\t$prefix_query = array();\n\t\t\t\t\t\tforeach ($prefixes as $prefix) {\n\t\t\t\t\t\t\t$prefix_query[] = \"`key` = '\".sqlescape($relative_path.$prefix.$file_name).\"'\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (sqlrows(sqlquery(\"SELECT `timestamp` FROM bigtree_caches WHERE identifier = 'org.bigtreecms.cloudfiles' AND (\".implode(\" OR \",$prefix_query).\")\"))) {\n\t\t\t\t\t\t\t$file_name = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Upload it\n\t\t\t\t$success = $this->Cloud->uploadFile($local_file,$this->Settings->Container,$relative_path.$file_name,true);\n\t\t\t\tif ($success) {\n\t\t\t\t\tsqlquery(\"INSERT INTO bigtree_caches (`identifier`,`key`,`value`) VALUES ('org.bigtreecms.cloudfiles','\".sqlescape($relative_path.$file_name).\"','\".sqlescape(json_encode(array(\"name\" => $file_name,\"path\" => $relative_path.$file_name,\"size\" => filesize($local_file)))).\"')\");\n\t\t\t\t}\n\t\t\t\tif ($remove_original) {\n\t\t\t\t\tunlink($local_file);\n\t\t\t\t}\n\t\t\t\treturn $success;\n\t\t\t} else {\n\t\t\t\t$safe_name = BigTree::getAvailableFileName(SITE_ROOT.$relative_path,$file_name,$prefixes);\n\t\t\t\tif ($remove_original) {\n\t\t\t\t\t$success = BigTree::moveFile($local_file,SITE_ROOT.$relative_path.$safe_name);\n\t\t\t\t} else {\n\t\t\t\t\t$success = BigTree::copyFile($local_file,SITE_ROOT.$relative_path.$safe_name);\n\t\t\t\t}\n\t\t\t\tif ($success) {\n\t\t\t\t\treturn \"{staticroot}\".$relative_path.$safe_name;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Backwards compatibility\n\tclass BigTreeUploadService extends BigTreeStorage {\n\t\tfunction upload($local_file,$file_name,$relative_path,$remove_original = true) {\n\t\t\treturn $this->store($local_file,$file_name,$relative_path,$remove_original);\n\t\t}\n\t}"], "filenames": ["core/inc/bigtree/apis/storage.php"], "buggy_code_start_loc": [11], "buggy_code_end_loc": [12], "fixing_code_start_loc": [11], "fixing_code_end_loc": [12], "type": "CWE-434", "message": "Unrestricted File Upload exists in BigTree CMS before 4.2.17: if an attacker uploads an 'xxx.php[space]' file, they could bypass a safety check and execute any code.", "other": {"cve": {"id": "CVE-2017-7695", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-11T23:59:00.237", "lastModified": "2017-04-17T16:55:36.003", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unrestricted File Upload exists in BigTree CMS before 4.2.17: if an attacker uploads an 'xxx.php[space]' file, they could bypass a safety check and execute any code."}, {"lang": "es", "value": "Carga de archivos no restringida existe en BigTree CMS en versiones anteriores a 4.2.17: si un atacante carga un archivo 'xxx.php [espacio]', podr\u00edan pasar por alto una comprobaci\u00f3n de seguridad y ejecutar cualquier c\u00f3digo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bigtreecms:bigtree_cms:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.2.16", "matchCriteriaId": "D362609F-A022-495D-966B-96CE91A84B73"}]}]}], "references": [{"url": "http://www.math1as.com/bigtree_upload.txt", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/bigtreecms/BigTree-CMS/commit/8cf4212ea40e1b843e1aecf4b24681b0964ec04c", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/bigtreecms/BigTree-CMS/issues/276", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}]}, "github_commit_url": "https://github.com/bigtreecms/BigTree-CMS/commit/8cf4212ea40e1b843e1aecf4b24681b0964ec04c"}}