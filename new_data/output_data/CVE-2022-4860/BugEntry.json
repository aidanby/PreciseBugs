{"buggy_code": ["from pymongo import MongoClient\nfrom pymongo import ReadPreference\nimport json as _json\nimport os\nimport mysql.connector as mysql\nimport requests\n\nrequests.packages.urllib3.disable_warnings()\n\n# NOTE get_user_info_from_auth2 sets up the initial dict.\n# The following functions update certain fields in the dict.\n# So get_user_info_from_auth2 must be called before get_internal_users and get_user_orgs_count\n\nmetrics_mysql_password = os.environ[\"METRICS_MYSQL_PWD\"]\nmongoDB_metrics_connection = os.environ[\"MONGO_PATH\"]\n\nprofile_url = os.environ[\"PROFILE_URL\"]\nkb_internal_user_url = os.environ[\"KB_INTERNAL_USER_URL\"]\nsql_host = os.environ[\"SQL_HOST\"]\nquery_on = os.environ[\"QUERY_ON\"]\n\nto_auth2 = os.environ[\"AUTH2_SUFFIX\"]\nto_groups = os.environ[\"GRP_SUFFIX\"]\nto_workspace = os.environ[\"WRK_SUFFIX\"]\n\n_CT = \"content-type\"\n_AJ = \"application/json\"\n\n\ndef get_dev_token_users_from_mongo():\n    \"\"\" get auth2 list of users with dev_tokens \"\"\"\n\n    client_auth2 = MongoClient(mongoDB_metrics_connection + to_auth2)\n    db_auth2 = client_auth2.auth2\n\n    dev_users_list = list()\n    dev_token_users_query = db_auth2.users.find({\"roles\": \"DevToken\"},{\"user\":1, \"email\":1, \"_id\":0})\n    for record in dev_token_users_query:\n        dev_users_list.append(record[\"user\"])\n    client_auth2.close()\n    return dev_users_list\n\ndef get_user_info_from_auth2():\n    \"\"\" get auth2 info and kbase_internal_users. Creates initial dict for the data. \"\"\"\n\n    client_auth2 = MongoClient(mongoDB_metrics_connection + to_auth2)\n    db_auth2 = client_auth2.auth2\n\n    user_stats_dict = {}  # dict that will have userid as the key,\n    # value is a dict with name, signup_date, last_signin_date,\n    # and email (that gets values from this function)\n    # orcid may be present and populated by this function.\n    # later called functions will populate kbase_internal_user, num_orgs and ...\n\n    user_info_query = db_auth2.users.find(\n        {}, {\"_id\": 0, \"user\": 1, \"email\": 1, \"display\": 1, \"create\": 1, \"login\": 1}\n    )\n    for record in user_info_query:\n        if record[\"user\"] == \"***ROOT***\":\n            continue\n        user_stats_dict[record[\"user\"]] = {\n            \"name\": record[\"display\"],\n            \"signup_date\": record[\"create\"],\n            \"last_signin_date\": record[\"login\"],\n            \"email\": record[\"email\"],\n            \"kbase_internal_user\": False,\n            \"institution\": None,\n            \"country\": None,\n            \"orcid\": None,\n            \"globus_login\": False,\n            \"google_login\": False,\n            \"num_orgs\": 0,\n            \"narrative_count\": 0,\n            \"shared_count\": 0,\n            \"narratives_shared\": 0,\n            \"department\": None,\n            \"job_title\": None,\n            \"job_title_other\" : None,\n            \"city\" : None,\n            \"state\" : None,\n            \"postal_code\" : None,\n            \"funding_source\" : None,\n            \"research_statement\" : None,\n            \"research_interests\" : None,\n            \"avatar_option\" : None,\n            \"gravatar_default\" : None,\n            \"how_u_hear_selected\" : None,\n            \"how_u_hear_other\" : None,\n        }\n\n    # Get all users with an ORCID authentication set up.\n    users_login_query = db_auth2.users.find(\n#        {\"idents.prov\": \"OrcID\"},\n        {},\n        {\"user\": 1, \"idents.prov\": 1, \"idents.prov_id\": 1, \"_id\": 0},\n    )\n    for record in users_login_query:\n        for ident in record[\"idents\"]:\n            if ident[\"prov\"] == \"OrcID\":\n                # just use the first orcid seen.\n                user_stats_dict[record[\"user\"]][\"orcid\"] = ident[\"prov_id\"]\n                #continue\n            elif ident[\"prov\"] == \"Globus\":\n                user_stats_dict[record[\"user\"]][\"globus_login\"] = True\n            elif ident[\"prov\"] == \"Google\":\n                user_stats_dict[record[\"user\"]][\"google_login\"] = True\n\n    client_auth2.close()\n    return user_stats_dict\n\n\ndef get_internal_users(user_stats_dict):\n    \"\"\"\n    Gets the internal users from the kb_internal_staff google sheet that Roy maintains.\n    \"\"\"\n    params = ((\"tqx\", \"out:csv\"), (\"sheet\", \"KBaseStaffAccounts\"))\n    response = requests.get(kb_internal_user_url, params=params)\n    if response.status_code != 200:\n        print(\n            \"ERROR - KB INTERNAL USER GOOGLE SHEET RESPONSE STATUS CODE : \"\n            + str(response.status_code)\n        )\n        print(\n            \"KB INTERNAL USER will not get updated until this is fixed. Rest of the uuser upload should work.\"\n        )\n        return user_stats_dict\n    lines = response.text.split(\"\\n\")\n    if len(lines) < 390:\n        print(\n            \"SOMETHING IS WRONG WITH KBASE INTERNAL USERS LIST: \"\n            + str(response.status_code)\n        )\n    users_not_found_count = 0\n    for line in lines:\n        elements = line.split(\",\")\n        user = elements[0][1:-1].strip()\n        if user in user_stats_dict:\n            user_stats_dict[user][\"kbase_internal_user\"] = True\n        else:\n            print(\"Username :\" + user + \": was not found\")\n            users_not_found_count += 1\n            print(\n                \"KBase Username ::\"\n                + str(user)\n                + \"::  was not found in the DB\"\n            )\n    if users_not_found_count > 0:\n        print(\n            \"NUMBER OF USERS FOUND IN KB_INTERNAL GOOGLE SHEET THAT WERE NOT FOUND IN THE AUTH2 RECORDS : \"\n            + str(users_not_found_count)\n        )\n\n    return user_stats_dict\n\n\ndef get_user_orgs_count(user_stats_dict):\n    \"\"\" Gets the count of the orgs that users belong to and populates the onging data structure\"\"\"\n\n    client_orgs = MongoClient(mongoDB_metrics_connection + to_groups)\n    db_orgs = client_orgs.groups\n    orgs_query = db_orgs.groups.find({}, {\"name\": 1, \"memb.user\": 1, \"_id\": 0})\n    for record in orgs_query:\n        for memb in record[\"memb\"]:\n            if memb[\"user\"] in user_stats_dict:\n                user_stats_dict[memb[\"user\"]][\"num_orgs\"] += 1\n    client_orgs.close()\n    return user_stats_dict\n\n\ndef get_user_narrative_stats(user_stats_dict):\n    \"\"\"\n    gets narrative summary stats (number of naratives, \n    number of shares, number of narratives shared for each user\n    \"\"\"\n    client_workspace = MongoClient(mongoDB_metrics_connection + to_workspace)\n    db_workspace = client_workspace.workspace\n    ws_user_dict = {}\n    # Get all the legitimate narratives and and their respective user (not del, saved(not_temp))\n    all_nar_cursor = db_workspace.workspaces.find(\n        {\"del\": False, \"meta\": {\"k\": \"is_temporary\", \"v\": \"false\"}},\n        {\"owner\": 1, \"ws\": 1, \"name\": 1, \"_id\": 0},\n    )\n    for record in all_nar_cursor:\n        # TO REMOVE OLD WORKSPACE METHOD OF 1 WS for all narratives.\n        if \"name\" in record and record[\"name\"] == record[\"owner\"] + \":home\":\n            continue\n        # narrative to user mapping\n        ws_user_dict[record[\"ws\"]] = record[\"owner\"]\n        # increment user narrative count\n        user_stats_dict[record[\"owner\"]][\"narrative_count\"] += 1\n\n    # Get all the narratives that have been shared and how many times they have been shared.\n    aggregation_string = [\n        {\"$match\": {\"perm\": {\"$in\": [10, 20, 30]}}},\n        {\"$group\": {\"_id\": \"$id\", \"shared_count\": {\"$sum\": 1}}},\n    ]\n    all_shared_perms_cursor = db_workspace.workspaceACLs.aggregate(aggregation_string)\n\n    for record in db_workspace.workspaceACLs.aggregate(aggregation_string):\n        if record[\"_id\"] in ws_user_dict:\n            user_stats_dict[ws_user_dict[record[\"_id\"]]][\"shared_count\"] += record[\n                \"shared_count\"\n            ]\n            user_stats_dict[ws_user_dict[record[\"_id\"]]][\"narratives_shared\"] += 1\n\n    return user_stats_dict\n\ndef get_profile_info(user_stats_dict):\n    \"\"\"\n    Gets the institution(organization), country, department, job_title and job_title_other\n    information for the user from the profile information\n    \"\"\"\n    url = profile_url\n    headers = dict()\n    arg_hash = {\n        \"method\": \"UserProfile.get_user_profile\",\n        \"params\": [list(user_stats_dict.keys())],\n        \"version\": \"1.1\",\n        \"id\": 123,\n    }\n    body = _json.dumps(arg_hash)\n    timeout = 1800\n    trust_all_ssl_certificates = 1\n\n    ret = requests.post(\n        url,\n        data=body,\n        headers=headers,\n        timeout=timeout,\n        verify=not trust_all_ssl_certificates,\n    )\n    ret.encoding = \"utf-8\"\n    if ret.status_code == 500:\n        if ret.headers.get(_CT) == _AJ:\n            err = ret.json()\n            if \"error\" in err:\n                raise Exception(err)\n            else:\n                raise Exception(ret.text)\n        else:\n            raise Exception(ret.text)\n    if not ret.ok:\n        ret.raise_for_status()\n    resp = ret.json()\n    if \"result\" not in resp:\n        raise Exception(\"An unknown error occurred in the response\")\n    print(str(len(resp[\"result\"][0])))\n    replaceDict = {\"-\": \" \", \")\": \" \", \".\": \" \", \"(\": \"\", \"/\": \"\", \",\": \"\", \" +\": \" \"}\n    counter = 0\n    for obj in resp[\"result\"][0]:\n        if obj is None:\n            continue\n        counter += 1\n        if obj[\"user\"][\"username\"] in user_stats_dict:\n            user_stats_dict[obj[\"user\"][\"username\"]][\"department\"] = obj[\"profile\"][\n\t        \"userdata\"\n            ].get(\"department\")\n            \n            user_stats_dict[obj[\"user\"][\"username\"]][\"job_title\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"jobTitle\")\n            \n            user_stats_dict[obj[\"user\"][\"username\"]][\"job_title_other\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"jobTitleOther\")\n            \n            user_stats_dict[obj[\"user\"][\"username\"]][\"country\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"country\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"city\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"city\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"state\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"state\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"postal_code\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"postalCode\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"funding_source\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"fundingSource\")            \n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"research_statement\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"country\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"avatar_option\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"avatarOption\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"gravatar_default\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"gravatarDefault\")\n\n            research_interests_list = obj[\"profile\"][\"userdata\"].get('researchInterests')\n            research_interests = None\n            if research_interests_list is not None:\n                research_interests_list.sort()\n                research_interests = \", \" . join(map(str, research_interests_list))\n            user_stats_dict[obj[\"user\"][\"username\"]][\"research_interests\"] = research_interests\n            \n            institution = obj[\"profile\"][\"userdata\"].get(\"organization\")\n            if institution == None:\n                if \"affiliations\" in obj[\"profile\"][\"userdata\"]:\n                    affiliations = obj[\"profile\"][\"userdata\"][\"affiliations\"]\n                    try:\n                        institution = affiliations[0][\"organization\"]\n                    except IndexError:\n                        try:\n                            institution = obj[\"profile\"][\"userdata\"][\"organization\"]\n                        except:\n                            pass\n            if institution:\n                for key, replacement in replaceDict.items():\n                    # institution = institution.str.replace(key, replacement)\n                    institution = institution.replace(key, replacement)\n                institution = institution.rstrip()\n            user_stats_dict[obj[\"user\"][\"username\"]][\"institution\"] = institution\n\n            #How did you hear about KBase part\n            how_u_hear_other = None\n            how_u_hear_selected = None\n            survey_data = obj[\"profile\"].get('surveydata')\n            if survey_data:\n                how_u_hear_selected_list = list()\n                referral_sources = obj[\"profile\"][\"surveydata\"].get(\"referralSources\")\n                if referral_sources:\n                    responses = obj[\"profile\"][\"surveydata\"][\"referralSources\"].get(\"response\")\n                    for response in responses:\n                        if response == \"other\" and responses[response]:\n#                            print(\"OTHER Response: \" + str(response) + \" : Value : \" + str(responses[response]))\n                            how_u_hear_other = str(responses[response]).rstrip()\n                        elif responses[response]:\n                            how_u_hear_selected_list.append(response)                                \n#                            print(\"Response: \" + str(response) + \" : Value : \" + str(responses[response]))\n                if len(how_u_hear_selected_list) > 0:\n                    how_u_hear_selected_list.sort()\n                    how_u_hear_selected = \"::\".join(how_u_hear_selected_list)\n            user_stats_dict[obj[\"user\"][\"username\"]][\"how_u_hear_selected\"] = how_u_hear_selected\n            user_stats_dict[obj[\"user\"][\"username\"]][\"how_u_hear_other\"] = how_u_hear_other\n\n    return user_stats_dict\n\n\ndef upload_user_data(user_stats_dict):\n    \"\"\"\n    Takes the User Stats dict that is populated by the other functions and \n    then populates the user_info and user_system_summary_stats tables\n    in the metrics MySQL DB.\n    \"\"\"\n    total_users = len(user_stats_dict.keys())\n    rows_info_inserted = 0\n    rows_info_updated = 0\n    rows_stats_inserted = 0\n    # connect to mysql\n    db_connection = mysql.connect(\n        host=sql_host, user=\"metrics\", passwd=metrics_mysql_password, database=\"metrics\"\n    )\n\n    cursor = db_connection.cursor()\n    query = \"use \" + query_on\n    cursor.execute(query)\n\n    counter_user_id = -1\n    get_max_user_id_q = (\n\t\"select max(user_id) from metrics.user_info \"\n    )\n    cursor.execute(get_max_user_id_q)\n    for row in cursor:\n        counter_user_id = row[0]\n        \n    # get all existing users\n    existing_user_info = dict()\n    query = (\n        \"select username, display_name, email, orcid, globus_login, google_login, \"\n        \"kb_internal_user, institution, country, \"\n        \"signup_date, last_signin_date, department, job_title, job_title_other, \"\n        \"city, state, postal_code, funding_source, research_statement, \"\n        \"research_interests, avatar_option, gravatar_default , \"\n        \"how_u_hear_selected, how_u_hear_other from metrics.user_info\"\n    )\n    cursor.execute(query)\n    for (\n            username,\n            display_name,\n            email,\n            orcid,\n            globus_login,\n            google_login,\n            kb_internal_user,\n            institution,\n            country,\n            signup_date,\n            last_signin_date,\n            department,\n            job_title,\n            job_title_other,\n            city,\n            state,\n            postal_code,\n            funding_source,\n            research_statement,\n            research_interests,\n            avatar_option,\n            gravatar_default,\n            how_u_hear_selected,\n            how_u_hear_other\n    ) in cursor:\n        existing_user_info[username] = {\n            \"name\": display_name,\n            \"email\": email,\n            \"orcid\": orcid,\n            \"globus_login\": globus_login,\n            \"google_login\": google_login,\n            \"kb_internal_user\": kb_internal_user,\n            \"institution\": institution,\n            \"country\": country,\n            \"signup_date\": signup_date,\n            \"last_signin_date\": last_signin_date,\n            \"department\": department,\n            \"job_title\": job_title,\n            \"job_title_other\": job_title_other,\n            \"city\" : city,\n            \"state\" : state,\n            \"postal_code\" : postal_code,\n            \"funding_source\" : funding_source,\n            \"research_statement\" : research_statement,\n            \"research_interests\" : research_interests,\n            \"avatar_option\" : avatar_option,\n            \"gravatar_default\" : gravatar_default,\n            \"how_u_hear_selected\" : how_u_hear_selected,\n            \"how_u_hear_other\" : how_u_hear_other\n        }\n\n    print(\"Number of existing users:\" + str(len(existing_user_info)))\n\n    prep_cursor = db_connection.cursor(prepared=True)\n    user_info_insert_statement = (\n        \"insert into user_info \"\n        \"(username, display_name, email, orcid, \"\n        \"globus_login, google_login, \"\n        \"user_id, kb_internal_user, institution, \"\n        \"country, signup_date, last_signin_date, \"\n        \"department, job_title, job_title_other, \"\n        \"city, state, postal_code, funding_source, \"\n        \"research_statement, research_interests, \"\n        \"avatar_option, gravatar_default, \"\n        \"how_u_hear_selected, how_u_hear_other)\"\n        \"values(%s, %s, %s, %s, \"\n        \"%s, %s, \"\n        \"%s, %s, %s, \"\n        \"%s, %s, %s, \"\n        \"%s, %s, %s, \"\n        \"%s, %s, %s, %s, \"\n        \"%s, %s, \"\n        \"%s, %s, \"\n        \"%s, %s);\")\n\n    update_prep_cursor = db_connection.cursor(prepared=True)\n    user_info_update_statement = (\n        \"update user_info \"\n        \"set display_name = %s, email = %s, \"\n        \"orcid = %s, globus_login = %s, \"\n        \"google_login = %s, kb_internal_user = %s, \"\n        \"institution = %s, country = %s, \"\n        \"signup_date = %s, last_signin_date = %s, \"\n        \"department = %s, job_title = %s, \"\n        \"job_title_other = %s, \"\n        \"city = %s, state = %s, \"\n        \"postal_code = %s, funding_source = %s, \"\n        \"research_statement = %s, \"\n        \"research_interests = %s, \"\n        \"avatar_option = %s, \"\n        \"gravatar_default = %s, \"\n        \"how_u_hear_selected = %s, \"\n        \"how_u_hear_other = %s \"\n        \"where username = %s;\"\n    )\n\n    new_user_info_count = 0\n    users_info_updated_count = 0\n\n    for username in user_stats_dict:\n        # check if new user_info exists in the existing user info, if not insert the record.\n        if username not in existing_user_info:\n            counter_user_id += 1\n            input = (\n                username,\n                user_stats_dict[username][\"name\"],\n                user_stats_dict[username][\"email\"],\n                user_stats_dict[username][\"orcid\"],\n                user_stats_dict[username][\"globus_login\"],\n                user_stats_dict[username][\"google_login\"],\n                counter_user_id,\n                user_stats_dict[username][\"kbase_internal_user\"],\n                user_stats_dict[username][\"institution\"],\n                user_stats_dict[username][\"country\"],\n                user_stats_dict[username][\"signup_date\"],\n                user_stats_dict[username][\"last_signin_date\"],\n                user_stats_dict[username][\"department\"],\n                user_stats_dict[username][\"job_title\"],\n                user_stats_dict[username][\"job_title_other\"],\n                user_stats_dict[username][\"city\"],\n                user_stats_dict[username][\"state\"],\n                user_stats_dict[username][\"postal_code\"],\n                user_stats_dict[username][\"funding_source\"],\n                user_stats_dict[username][\"research_statement\"],\n                user_stats_dict[username][\"research_interests\"],\n                user_stats_dict[username][\"avatar_option\"],\n                user_stats_dict[username][\"gravatar_default\"],\n                user_stats_dict[username][\"how_u_hear_selected\"],\n                user_stats_dict[username][\"how_u_hear_other\"],\n            )\n            prep_cursor.execute(user_info_insert_statement, input)\n            new_user_info_count += 1\n        else:\n            # Check if anything has changed in the user_info, if so update the record\n            if not (\n                (\n                    user_stats_dict[username][\"last_signin_date\"] is None\n                    or user_stats_dict[username][\"last_signin_date\"].strftime(\n                        \"%Y-%m-%d %H:%M:%S\"\n                    )\n                    == str(existing_user_info[username][\"last_signin_date\"])\n                )\n                and (\n                    user_stats_dict[username][\"signup_date\"].strftime(\n                        \"%Y-%m-%d %H:%M:%S\"\n                    )\n                    == str(existing_user_info[username][\"signup_date\"])\n                )\n                and user_stats_dict[username][\"country\"]\n                    == existing_user_info[username][\"country\"]\n                and user_stats_dict[username][\"institution\"]\n                    == existing_user_info[username][\"institution\"]\n                and user_stats_dict[username][\"kbase_internal_user\"]\n                    == existing_user_info[username][\"kb_internal_user\"]\n                and user_stats_dict[username][\"orcid\"]\n                    == existing_user_info[username][\"orcid\"]\n                and user_stats_dict[username][\"globus_login\"]\n                    == existing_user_info[username][\"globus_login\"]\n                and user_stats_dict[username][\"google_login\"]\n                    == existing_user_info[username][\"google_login\"]\n                and user_stats_dict[username][\"email\"]\n                    == existing_user_info[username][\"email\"]\n                and user_stats_dict[username][\"name\"]\n                    == existing_user_info[username][\"name\"]\n                and user_stats_dict[username][\"department\"]\n                    == existing_user_info[username][\"department\"]\n                and user_stats_dict[username][\"job_title\"]\n                    == existing_user_info[username][\"job_title\"]\n                and user_stats_dict[username][\"job_title_other\"]\n                    == existing_user_info[username][\"job_title_other\"]\n                and user_stats_dict[username][\"city\"]\n                    == existing_user_info[username][\"city\"]\n                and user_stats_dict[username][\"state\"]\n                    == existing_user_info[username][\"state\"]\n                and user_stats_dict[username][\"postal_code\"]\n                    == existing_user_info[username][\"postal_code\"]\n                and user_stats_dict[username][\"funding_source\"]\n                    == existing_user_info[username][\"funding_source\"]\n                and user_stats_dict[username][\"research_statement\"]\n                    == existing_user_info[username][\"research_statement\"]\n                and user_stats_dict[username][\"research_interests\"]\n                    == existing_user_info[username][\"research_interests\"]\n                and user_stats_dict[username][\"avatar_option\"]\n                    == existing_user_info[username][\"avatar_option\"]\n                and user_stats_dict[username][\"gravatar_default\"]\n                    == existing_user_info[username][\"gravatar_default\"]\n                and user_stats_dict[username][\"how_u_hear_selected\"]\n                    == existing_user_info[username][\"how_u_hear_selected\"]\n                and user_stats_dict[username][\"how_u_hear_other\"]\n                    == existing_user_info[username][\"how_u_hear_other\"]\n            ):\n                input = (\n                    user_stats_dict[username][\"name\"],\n                    user_stats_dict[username][\"email\"],\n                    user_stats_dict[username][\"orcid\"],\n                    user_stats_dict[username][\"globus_login\"],\n                    user_stats_dict[username][\"google_login\"],\n                    user_stats_dict[username][\"kbase_internal_user\"],\n                    user_stats_dict[username][\"institution\"],\n                    user_stats_dict[username][\"country\"],\n                    user_stats_dict[username][\"signup_date\"],\n                    user_stats_dict[username][\"last_signin_date\"],\n                    user_stats_dict[username][\"department\"],\n                    user_stats_dict[username][\"job_title\"],\n                    user_stats_dict[username][\"job_title_other\"],\n                    user_stats_dict[username][\"city\"],\n                    user_stats_dict[username][\"state\"],\n                    user_stats_dict[username][\"postal_code\"],\n                    user_stats_dict[username][\"funding_source\"],\n                    user_stats_dict[username][\"research_statement\"],\n                    user_stats_dict[username][\"research_interests\"],\n                    user_stats_dict[username][\"avatar_option\"],\n                    user_stats_dict[username][\"gravatar_default\"],\n                    user_stats_dict[username][\"how_u_hear_selected\"],\n                    user_stats_dict[username][\"how_u_hear_other\"],\n                    username,\n                )\n                update_prep_cursor.execute(user_info_update_statement, input)\n                users_info_updated_count += 1\n    db_connection.commit()\n\n    print(\"Number of new users info inserted:\" + str(new_user_info_count))\n    print(\"Number of users updated:\" + str(users_info_updated_count))\n\n    dev_tokens_users = get_dev_token_users_from_mongo()\n    #print(\"dev_tokens_users: \" + str(dev_tokens_users))\n\n    ####################\n    # TRIED DO UPDATE WITH PASSED LIST NONE OF THIS WORKED\n    # HAD To build up the entire string\n    #    update_new_dev_tokens_statement = (\n    #        \"update user_info set dev_token_first_seen = now() \"\n    #        \"where dev_token_first_seen is null and \"\n    #        \"username in (%s)\"\n    #        )\n    #    sql_params = \",\".join(dev_tokens_users)\n    #    sql_params = (dev_tokens_users,)\n    #    sql_params = ([str(dev_tokens_users)])\n    #    cursor.execute(update_new_dev_tokens_statement, [sql_params])\n    #    cursor.execute(\"update user_info set dev_token_first_seen = now() \"\n    #                   \"where dev_token_first_seen is null and \"\n    #                   \"username in (%s)\" % ', '.join('?' * len(dev_tokens_users)), dev_tokens_users)\n    #    update_new_dev_tokens_statement = (\n    #        \"update user_info set dev_token_first_seen = now() \"\n    #        \"where dev_token_first_seen is null and \"\n    #        \"username in (%s)\" % ', '.join('?' * len(dev_tokens_users)), dev_tokens_users\n    #        )\n    #    cursor.execute(\"SELECT foo.y FROM foo WHERE foo.x in (%s)\" % ', '.join('?' * len(s)), s)\n    dev_tokens_string = \"', '\".join(dev_tokens_users)\n    update_new_dev_tokens_statement = (\n        \"update user_info set dev_token_first_seen = now() \"\n        \"where dev_token_first_seen is null and \"\n        \"username in ('\" + dev_tokens_string + \"')\"\n        )\n    cursor.execute(update_new_dev_tokens_statement)\n    db_connection.commit()\n    \n    # NOW DO USER SUMMARY STATS\n    user_summary_stats_insert_statement = (\n        \"insert into user_system_summary_stats \"\n        \"(username,num_orgs, narrative_count, \"\n        \"shared_count, narratives_shared) \"\n        \"values(%s,%s,%s,%s,%s);\"\n    )\n\n    existing_user_summary_stats = dict()\n    query = (\n        \"select username, num_orgs, narrative_count, shared_count, narratives_shared \"\n        \"from user_system_summary_stats_current\"\n    )\n    cursor.execute(query)\n    for (\n        username,\n        num_orgs,\n        narrative_count,\n        shared_count,\n        narratives_shared,\n    ) in cursor:\n        existing_user_summary_stats[username] = {\n            \"num_orgs\": num_orgs,\n            \"narrative_count\": narrative_count,\n            \"shared_count\": shared_count,\n            \"narratives_shared\": narratives_shared,\n        }\n    print(\"Number of existing user summaries:\" + str(len(existing_user_summary_stats)))\n\n    new_user_summary_count = 0\n    existing_user_summary_count = 0\n    for username in user_stats_dict:\n        if username not in existing_user_summary_stats:\n            # if user does not exist insert\n            input = (\n                username,\n                user_stats_dict[username][\"num_orgs\"],\n                user_stats_dict[username][\"narrative_count\"],\n                user_stats_dict[username][\"shared_count\"],\n                user_stats_dict[username][\"narratives_shared\"],\n            )\n            prep_cursor.execute(user_summary_stats_insert_statement, input)\n            new_user_summary_count += 1\n        else:\n            # else see if the new data differs from the most recent snapshot. If it does differ, do an insert\n            if not (\n                user_stats_dict[username][\"num_orgs\"]\n                == existing_user_summary_stats[username][\"num_orgs\"]\n                and user_stats_dict[username][\"narrative_count\"]\n                == existing_user_summary_stats[username][\"narrative_count\"]\n                and user_stats_dict[username][\"shared_count\"]\n                == existing_user_summary_stats[username][\"shared_count\"]\n                and user_stats_dict[username][\"narratives_shared\"]\n                == existing_user_summary_stats[username][\"narratives_shared\"]\n            ):\n                input = (\n                    username,\n                    user_stats_dict[username][\"num_orgs\"],\n                    user_stats_dict[username][\"narrative_count\"],\n                    user_stats_dict[username][\"shared_count\"],\n                    user_stats_dict[username][\"narratives_shared\"],\n                )\n                prep_cursor.execute(user_summary_stats_insert_statement, input)\n                existing_user_summary_count += 1\n\n    db_connection.commit()\n\n    # THIS CODE is to update any of the 434 excluded users that had accounts made for them\n    # but never logged in. In case any of them ever do log in, they will be removed from\n    # the excluded list\n    query = \"UPDATE metrics.user_info set exclude = False where last_signin_date is not NULL\"\n    cursor.execute(query)\n    db_connection.commit()\n\n    print(\"Number of new users summary inserted:\" + str(new_user_summary_count))\n    print(\n        \"Number of existing users summary inserted:\" + str(existing_user_summary_count)\n    )\n\n    return 1\n\n"], "fixing_code": ["from pymongo import MongoClient\nfrom pymongo import ReadPreference\nimport json as _json\nimport os\nimport mysql.connector as mysql\nimport requests\n\nrequests.packages.urllib3.disable_warnings()\n\n# NOTE get_user_info_from_auth2 sets up the initial dict.\n# The following functions update certain fields in the dict.\n# So get_user_info_from_auth2 must be called before get_internal_users and get_user_orgs_count\n\nmetrics_mysql_password = os.environ[\"METRICS_MYSQL_PWD\"]\nmongoDB_metrics_connection = os.environ[\"MONGO_PATH\"]\n\nprofile_url = os.environ[\"PROFILE_URL\"]\nkb_internal_user_url = os.environ[\"KB_INTERNAL_USER_URL\"]\nsql_host = os.environ[\"SQL_HOST\"]\nquery_on = os.environ[\"QUERY_ON\"]\n\nto_auth2 = os.environ[\"AUTH2_SUFFIX\"]\nto_groups = os.environ[\"GRP_SUFFIX\"]\nto_workspace = os.environ[\"WRK_SUFFIX\"]\n\n_CT = \"content-type\"\n_AJ = \"application/json\"\n\n\ndef get_dev_token_users_from_mongo():\n    \"\"\" get auth2 list of users with dev_tokens \"\"\"\n\n    client_auth2 = MongoClient(mongoDB_metrics_connection + to_auth2)\n    db_auth2 = client_auth2.auth2\n\n    dev_users_list = list()\n    dev_token_users_query = db_auth2.users.find({\"roles\": \"DevToken\"},{\"user\":1, \"email\":1, \"_id\":0})\n    for record in dev_token_users_query:\n        dev_users_list.append(record[\"user\"])\n    client_auth2.close()\n    return dev_users_list\n\ndef get_user_info_from_auth2():\n    \"\"\" get auth2 info and kbase_internal_users. Creates initial dict for the data. \"\"\"\n\n    client_auth2 = MongoClient(mongoDB_metrics_connection + to_auth2)\n    db_auth2 = client_auth2.auth2\n\n    user_stats_dict = {}  # dict that will have userid as the key,\n    # value is a dict with name, signup_date, last_signin_date,\n    # and email (that gets values from this function)\n    # orcid may be present and populated by this function.\n    # later called functions will populate kbase_internal_user, num_orgs and ...\n\n    user_info_query = db_auth2.users.find(\n        {}, {\"_id\": 0, \"user\": 1, \"email\": 1, \"display\": 1, \"create\": 1, \"login\": 1}\n    )\n    for record in user_info_query:\n        if record[\"user\"] == \"***ROOT***\":\n            continue\n        user_stats_dict[record[\"user\"]] = {\n            \"name\": record[\"display\"],\n            \"signup_date\": record[\"create\"],\n            \"last_signin_date\": record[\"login\"],\n            \"email\": record[\"email\"],\n            \"kbase_internal_user\": False,\n            \"institution\": None,\n            \"country\": None,\n            \"orcid\": None,\n            \"globus_login\": False,\n            \"google_login\": False,\n            \"num_orgs\": 0,\n            \"narrative_count\": 0,\n            \"shared_count\": 0,\n            \"narratives_shared\": 0,\n            \"department\": None,\n            \"job_title\": None,\n            \"job_title_other\" : None,\n            \"city\" : None,\n            \"state\" : None,\n            \"postal_code\" : None,\n            \"funding_source\" : None,\n            \"research_statement\" : None,\n            \"research_interests\" : None,\n            \"avatar_option\" : None,\n            \"gravatar_default\" : None,\n            \"how_u_hear_selected\" : None,\n            \"how_u_hear_other\" : None,\n        }\n\n    # Get all users with an ORCID authentication set up.\n    users_login_query = db_auth2.users.find(\n#        {\"idents.prov\": \"OrcID\"},\n        {},\n        {\"user\": 1, \"idents.prov\": 1, \"idents.prov_id\": 1, \"_id\": 0},\n    )\n    for record in users_login_query:\n        for ident in record[\"idents\"]:\n            if ident[\"prov\"] == \"OrcID\":\n                # just use the first orcid seen.\n                user_stats_dict[record[\"user\"]][\"orcid\"] = ident[\"prov_id\"]\n                #continue\n            elif ident[\"prov\"] == \"Globus\":\n                user_stats_dict[record[\"user\"]][\"globus_login\"] = True\n            elif ident[\"prov\"] == \"Google\":\n                user_stats_dict[record[\"user\"]][\"google_login\"] = True\n\n    client_auth2.close()\n    return user_stats_dict\n\n\ndef get_internal_users(user_stats_dict):\n    \"\"\"\n    Gets the internal users from the kb_internal_staff google sheet that Roy maintains.\n    \"\"\"\n    params = ((\"tqx\", \"out:csv\"), (\"sheet\", \"KBaseStaffAccounts\"))\n    response = requests.get(kb_internal_user_url, params=params)\n    if response.status_code != 200:\n        print(\n            \"ERROR - KB INTERNAL USER GOOGLE SHEET RESPONSE STATUS CODE : \"\n            + str(response.status_code)\n        )\n        print(\n            \"KB INTERNAL USER will not get updated until this is fixed. Rest of the uuser upload should work.\"\n        )\n        return user_stats_dict\n    lines = response.text.split(\"\\n\")\n    if len(lines) < 390:\n        print(\n            \"SOMETHING IS WRONG WITH KBASE INTERNAL USERS LIST: \"\n            + str(response.status_code)\n        )\n    users_not_found_count = 0\n    for line in lines:\n        elements = line.split(\",\")\n        user = elements[0][1:-1].strip()\n        if user in user_stats_dict:\n            user_stats_dict[user][\"kbase_internal_user\"] = True\n        else:\n            print(\"Username :\" + user + \": was not found\")\n            users_not_found_count += 1\n            print(\n                \"KBase Username ::\"\n                + str(user)\n                + \"::  was not found in the DB\"\n            )\n    if users_not_found_count > 0:\n        print(\n            \"NUMBER OF USERS FOUND IN KB_INTERNAL GOOGLE SHEET THAT WERE NOT FOUND IN THE AUTH2 RECORDS : \"\n            + str(users_not_found_count)\n        )\n\n    return user_stats_dict\n\n\ndef get_user_orgs_count(user_stats_dict):\n    \"\"\" Gets the count of the orgs that users belong to and populates the onging data structure\"\"\"\n\n    client_orgs = MongoClient(mongoDB_metrics_connection + to_groups)\n    db_orgs = client_orgs.groups\n    orgs_query = db_orgs.groups.find({}, {\"name\": 1, \"memb.user\": 1, \"_id\": 0})\n    for record in orgs_query:\n        for memb in record[\"memb\"]:\n            if memb[\"user\"] in user_stats_dict:\n                user_stats_dict[memb[\"user\"]][\"num_orgs\"] += 1\n    client_orgs.close()\n    return user_stats_dict\n\n\ndef get_user_narrative_stats(user_stats_dict):\n    \"\"\"\n    gets narrative summary stats (number of naratives, \n    number of shares, number of narratives shared for each user\n    \"\"\"\n    client_workspace = MongoClient(mongoDB_metrics_connection + to_workspace)\n    db_workspace = client_workspace.workspace\n    ws_user_dict = {}\n    # Get all the legitimate narratives and and their respective user (not del, saved(not_temp))\n    all_nar_cursor = db_workspace.workspaces.find(\n        {\"del\": False, \"meta\": {\"k\": \"is_temporary\", \"v\": \"false\"}},\n        {\"owner\": 1, \"ws\": 1, \"name\": 1, \"_id\": 0},\n    )\n    for record in all_nar_cursor:\n        # TO REMOVE OLD WORKSPACE METHOD OF 1 WS for all narratives.\n        if \"name\" in record and record[\"name\"] == record[\"owner\"] + \":home\":\n            continue\n        # narrative to user mapping\n        ws_user_dict[record[\"ws\"]] = record[\"owner\"]\n        # increment user narrative count\n        user_stats_dict[record[\"owner\"]][\"narrative_count\"] += 1\n\n    # Get all the narratives that have been shared and how many times they have been shared.\n    aggregation_string = [\n        {\"$match\": {\"perm\": {\"$in\": [10, 20, 30]}}},\n        {\"$group\": {\"_id\": \"$id\", \"shared_count\": {\"$sum\": 1}}},\n    ]\n    all_shared_perms_cursor = db_workspace.workspaceACLs.aggregate(aggregation_string)\n\n    for record in db_workspace.workspaceACLs.aggregate(aggregation_string):\n        if record[\"_id\"] in ws_user_dict:\n            user_stats_dict[ws_user_dict[record[\"_id\"]]][\"shared_count\"] += record[\n                \"shared_count\"\n            ]\n            user_stats_dict[ws_user_dict[record[\"_id\"]]][\"narratives_shared\"] += 1\n\n    return user_stats_dict\n\ndef get_profile_info(user_stats_dict):\n    \"\"\"\n    Gets the institution(organization), country, department, job_title and job_title_other\n    information for the user from the profile information\n    \"\"\"\n    url = profile_url\n    headers = dict()\n    arg_hash = {\n        \"method\": \"UserProfile.get_user_profile\",\n        \"params\": [list(user_stats_dict.keys())],\n        \"version\": \"1.1\",\n        \"id\": 123,\n    }\n    body = _json.dumps(arg_hash)\n    timeout = 1800\n    trust_all_ssl_certificates = 1\n\n    ret = requests.post(\n        url,\n        data=body,\n        headers=headers,\n        timeout=timeout,\n        verify=not trust_all_ssl_certificates,\n    )\n    ret.encoding = \"utf-8\"\n    if ret.status_code == 500:\n        if ret.headers.get(_CT) == _AJ:\n            err = ret.json()\n            if \"error\" in err:\n                raise Exception(err)\n            else:\n                raise Exception(ret.text)\n        else:\n            raise Exception(ret.text)\n    if not ret.ok:\n        ret.raise_for_status()\n    resp = ret.json()\n    if \"result\" not in resp:\n        raise Exception(\"An unknown error occurred in the response\")\n    print(str(len(resp[\"result\"][0])))\n    replaceDict = {\"-\": \" \", \")\": \" \", \".\": \" \", \"(\": \"\", \"/\": \"\", \",\": \"\", \" +\": \" \"}\n    counter = 0\n    for obj in resp[\"result\"][0]:\n        if obj is None:\n            continue\n        counter += 1\n        if obj[\"user\"][\"username\"] in user_stats_dict:\n            user_stats_dict[obj[\"user\"][\"username\"]][\"department\"] = obj[\"profile\"][\n\t        \"userdata\"\n            ].get(\"department\")\n            \n            user_stats_dict[obj[\"user\"][\"username\"]][\"job_title\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"jobTitle\")\n            \n            user_stats_dict[obj[\"user\"][\"username\"]][\"job_title_other\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"jobTitleOther\")\n            \n            user_stats_dict[obj[\"user\"][\"username\"]][\"country\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"country\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"city\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"city\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"state\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"state\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"postal_code\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"postalCode\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"funding_source\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"fundingSource\")            \n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"research_statement\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"country\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"avatar_option\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"avatarOption\")\n\n            user_stats_dict[obj[\"user\"][\"username\"]][\"gravatar_default\"] = obj[\"profile\"][\n                \"userdata\"\n            ].get(\"gravatarDefault\")\n\n            research_interests_list = obj[\"profile\"][\"userdata\"].get('researchInterests')\n            research_interests = None\n            if research_interests_list is not None:\n                research_interests_list.sort()\n                research_interests = \", \" . join(map(str, research_interests_list))\n            user_stats_dict[obj[\"user\"][\"username\"]][\"research_interests\"] = research_interests\n            \n            institution = obj[\"profile\"][\"userdata\"].get(\"organization\")\n            if institution == None:\n                if \"affiliations\" in obj[\"profile\"][\"userdata\"]:\n                    affiliations = obj[\"profile\"][\"userdata\"][\"affiliations\"]\n                    try:\n                        institution = affiliations[0][\"organization\"]\n                    except IndexError:\n                        try:\n                            institution = obj[\"profile\"][\"userdata\"][\"organization\"]\n                        except:\n                            pass\n            if institution:\n                for key, replacement in replaceDict.items():\n                    # institution = institution.str.replace(key, replacement)\n                    institution = institution.replace(key, replacement)\n                institution = institution.rstrip()\n            user_stats_dict[obj[\"user\"][\"username\"]][\"institution\"] = institution\n\n            #How did you hear about KBase part\n            how_u_hear_other = None\n            how_u_hear_selected = None\n            survey_data = obj[\"profile\"].get('surveydata')\n            if survey_data:\n                how_u_hear_selected_list = list()\n                referral_sources = obj[\"profile\"][\"surveydata\"].get(\"referralSources\")\n                if referral_sources:\n                    responses = obj[\"profile\"][\"surveydata\"][\"referralSources\"].get(\"response\")\n                    for response in responses:\n                        if response == \"other\" and responses[response]:\n#                            print(\"OTHER Response: \" + str(response) + \" : Value : \" + str(responses[response]))\n                            how_u_hear_other = str(responses[response]).rstrip()\n                        elif responses[response]:\n                            how_u_hear_selected_list.append(response)                                \n#                            print(\"Response: \" + str(response) + \" : Value : \" + str(responses[response]))\n                if len(how_u_hear_selected_list) > 0:\n                    how_u_hear_selected_list.sort()\n                    how_u_hear_selected = \"::\".join(how_u_hear_selected_list)\n            user_stats_dict[obj[\"user\"][\"username\"]][\"how_u_hear_selected\"] = how_u_hear_selected\n            user_stats_dict[obj[\"user\"][\"username\"]][\"how_u_hear_other\"] = how_u_hear_other\n\n    return user_stats_dict\n\n\ndef upload_user_data(user_stats_dict):\n    \"\"\"\n    Takes the User Stats dict that is populated by the other functions and \n    then populates the user_info and user_system_summary_stats tables\n    in the metrics MySQL DB.\n    \"\"\"\n    total_users = len(user_stats_dict.keys())\n    rows_info_inserted = 0\n    rows_info_updated = 0\n    rows_stats_inserted = 0\n    # connect to mysql\n    db_connection = mysql.connect(\n        host=sql_host, user=\"metrics\", passwd=metrics_mysql_password, database=\"metrics\"\n    )\n\n    cursor = db_connection.cursor()\n    query = \"use \" + query_on\n    cursor.execute(query)\n\n    counter_user_id = -1\n    get_max_user_id_q = (\n\t\"select max(user_id) from metrics.user_info \"\n    )\n    cursor.execute(get_max_user_id_q)\n    for row in cursor:\n        counter_user_id = row[0]\n        \n    # get all existing users\n    existing_user_info = dict()\n    query = (\n        \"select username, display_name, email, orcid, globus_login, google_login, \"\n        \"kb_internal_user, institution, country, \"\n        \"signup_date, last_signin_date, department, job_title, job_title_other, \"\n        \"city, state, postal_code, funding_source, research_statement, \"\n        \"research_interests, avatar_option, gravatar_default , \"\n        \"how_u_hear_selected, how_u_hear_other from metrics.user_info\"\n    )\n    cursor.execute(query)\n    for (\n            username,\n            display_name,\n            email,\n            orcid,\n            globus_login,\n            google_login,\n            kb_internal_user,\n            institution,\n            country,\n            signup_date,\n            last_signin_date,\n            department,\n            job_title,\n            job_title_other,\n            city,\n            state,\n            postal_code,\n            funding_source,\n            research_statement,\n            research_interests,\n            avatar_option,\n            gravatar_default,\n            how_u_hear_selected,\n            how_u_hear_other\n    ) in cursor:\n        existing_user_info[username] = {\n            \"name\": display_name,\n            \"email\": email,\n            \"orcid\": orcid,\n            \"globus_login\": globus_login,\n            \"google_login\": google_login,\n            \"kb_internal_user\": kb_internal_user,\n            \"institution\": institution,\n            \"country\": country,\n            \"signup_date\": signup_date,\n            \"last_signin_date\": last_signin_date,\n            \"department\": department,\n            \"job_title\": job_title,\n            \"job_title_other\": job_title_other,\n            \"city\" : city,\n            \"state\" : state,\n            \"postal_code\" : postal_code,\n            \"funding_source\" : funding_source,\n            \"research_statement\" : research_statement,\n            \"research_interests\" : research_interests,\n            \"avatar_option\" : avatar_option,\n            \"gravatar_default\" : gravatar_default,\n            \"how_u_hear_selected\" : how_u_hear_selected,\n            \"how_u_hear_other\" : how_u_hear_other\n        }\n\n    print(\"Number of existing users:\" + str(len(existing_user_info)))\n\n    prep_cursor = db_connection.cursor(prepared=True)\n    user_info_insert_statement = (\n        \"insert into user_info \"\n        \"(username, display_name, email, orcid, \"\n        \"globus_login, google_login, \"\n        \"user_id, kb_internal_user, institution, \"\n        \"country, signup_date, last_signin_date, \"\n        \"department, job_title, job_title_other, \"\n        \"city, state, postal_code, funding_source, \"\n        \"research_statement, research_interests, \"\n        \"avatar_option, gravatar_default, \"\n        \"how_u_hear_selected, how_u_hear_other)\"\n        \"values(%s, %s, %s, %s, \"\n        \"%s, %s, \"\n        \"%s, %s, %s, \"\n        \"%s, %s, %s, \"\n        \"%s, %s, %s, \"\n        \"%s, %s, %s, %s, \"\n        \"%s, %s, \"\n        \"%s, %s, \"\n        \"%s, %s);\")\n\n    update_prep_cursor = db_connection.cursor(prepared=True)\n    user_info_update_statement = (\n        \"update user_info \"\n        \"set display_name = %s, email = %s, \"\n        \"orcid = %s, globus_login = %s, \"\n        \"google_login = %s, kb_internal_user = %s, \"\n        \"institution = %s, country = %s, \"\n        \"signup_date = %s, last_signin_date = %s, \"\n        \"department = %s, job_title = %s, \"\n        \"job_title_other = %s, \"\n        \"city = %s, state = %s, \"\n        \"postal_code = %s, funding_source = %s, \"\n        \"research_statement = %s, \"\n        \"research_interests = %s, \"\n        \"avatar_option = %s, \"\n        \"gravatar_default = %s, \"\n        \"how_u_hear_selected = %s, \"\n        \"how_u_hear_other = %s \"\n        \"where username = %s;\"\n    )\n\n    new_user_info_count = 0\n    users_info_updated_count = 0\n\n    for username in user_stats_dict:\n        # check if new user_info exists in the existing user info, if not insert the record.\n        if username not in existing_user_info:\n            counter_user_id += 1\n            input = (\n                username,\n                user_stats_dict[username][\"name\"],\n                user_stats_dict[username][\"email\"],\n                user_stats_dict[username][\"orcid\"],\n                user_stats_dict[username][\"globus_login\"],\n                user_stats_dict[username][\"google_login\"],\n                counter_user_id,\n                user_stats_dict[username][\"kbase_internal_user\"],\n                user_stats_dict[username][\"institution\"],\n                user_stats_dict[username][\"country\"],\n                user_stats_dict[username][\"signup_date\"],\n                user_stats_dict[username][\"last_signin_date\"],\n                user_stats_dict[username][\"department\"],\n                user_stats_dict[username][\"job_title\"],\n                user_stats_dict[username][\"job_title_other\"],\n                user_stats_dict[username][\"city\"],\n                user_stats_dict[username][\"state\"],\n                user_stats_dict[username][\"postal_code\"],\n                user_stats_dict[username][\"funding_source\"],\n                user_stats_dict[username][\"research_statement\"],\n                user_stats_dict[username][\"research_interests\"],\n                user_stats_dict[username][\"avatar_option\"],\n                user_stats_dict[username][\"gravatar_default\"],\n                user_stats_dict[username][\"how_u_hear_selected\"],\n                user_stats_dict[username][\"how_u_hear_other\"],\n            )\n            prep_cursor.execute(user_info_insert_statement, input)\n            new_user_info_count += 1\n        else:\n            # Check if anything has changed in the user_info, if so update the record\n            if not (\n                (\n                    user_stats_dict[username][\"last_signin_date\"] is None\n                    or user_stats_dict[username][\"last_signin_date\"].strftime(\n                        \"%Y-%m-%d %H:%M:%S\"\n                    )\n                    == str(existing_user_info[username][\"last_signin_date\"])\n                )\n                and (\n                    user_stats_dict[username][\"signup_date\"].strftime(\n                        \"%Y-%m-%d %H:%M:%S\"\n                    )\n                    == str(existing_user_info[username][\"signup_date\"])\n                )\n                and user_stats_dict[username][\"country\"]\n                    == existing_user_info[username][\"country\"]\n                and user_stats_dict[username][\"institution\"]\n                    == existing_user_info[username][\"institution\"]\n                and user_stats_dict[username][\"kbase_internal_user\"]\n                    == existing_user_info[username][\"kb_internal_user\"]\n                and user_stats_dict[username][\"orcid\"]\n                    == existing_user_info[username][\"orcid\"]\n                and user_stats_dict[username][\"globus_login\"]\n                    == existing_user_info[username][\"globus_login\"]\n                and user_stats_dict[username][\"google_login\"]\n                    == existing_user_info[username][\"google_login\"]\n                and user_stats_dict[username][\"email\"]\n                    == existing_user_info[username][\"email\"]\n                and user_stats_dict[username][\"name\"]\n                    == existing_user_info[username][\"name\"]\n                and user_stats_dict[username][\"department\"]\n                    == existing_user_info[username][\"department\"]\n                and user_stats_dict[username][\"job_title\"]\n                    == existing_user_info[username][\"job_title\"]\n                and user_stats_dict[username][\"job_title_other\"]\n                    == existing_user_info[username][\"job_title_other\"]\n                and user_stats_dict[username][\"city\"]\n                    == existing_user_info[username][\"city\"]\n                and user_stats_dict[username][\"state\"]\n                    == existing_user_info[username][\"state\"]\n                and user_stats_dict[username][\"postal_code\"]\n                    == existing_user_info[username][\"postal_code\"]\n                and user_stats_dict[username][\"funding_source\"]\n                    == existing_user_info[username][\"funding_source\"]\n                and user_stats_dict[username][\"research_statement\"]\n                    == existing_user_info[username][\"research_statement\"]\n                and user_stats_dict[username][\"research_interests\"]\n                    == existing_user_info[username][\"research_interests\"]\n                and user_stats_dict[username][\"avatar_option\"]\n                    == existing_user_info[username][\"avatar_option\"]\n                and user_stats_dict[username][\"gravatar_default\"]\n                    == existing_user_info[username][\"gravatar_default\"]\n                and user_stats_dict[username][\"how_u_hear_selected\"]\n                    == existing_user_info[username][\"how_u_hear_selected\"]\n                and user_stats_dict[username][\"how_u_hear_other\"]\n                    == existing_user_info[username][\"how_u_hear_other\"]\n            ):\n                input = (\n                    user_stats_dict[username][\"name\"],\n                    user_stats_dict[username][\"email\"],\n                    user_stats_dict[username][\"orcid\"],\n                    user_stats_dict[username][\"globus_login\"],\n                    user_stats_dict[username][\"google_login\"],\n                    user_stats_dict[username][\"kbase_internal_user\"],\n                    user_stats_dict[username][\"institution\"],\n                    user_stats_dict[username][\"country\"],\n                    user_stats_dict[username][\"signup_date\"],\n                    user_stats_dict[username][\"last_signin_date\"],\n                    user_stats_dict[username][\"department\"],\n                    user_stats_dict[username][\"job_title\"],\n                    user_stats_dict[username][\"job_title_other\"],\n                    user_stats_dict[username][\"city\"],\n                    user_stats_dict[username][\"state\"],\n                    user_stats_dict[username][\"postal_code\"],\n                    user_stats_dict[username][\"funding_source\"],\n                    user_stats_dict[username][\"research_statement\"],\n                    user_stats_dict[username][\"research_interests\"],\n                    user_stats_dict[username][\"avatar_option\"],\n                    user_stats_dict[username][\"gravatar_default\"],\n                    user_stats_dict[username][\"how_u_hear_selected\"],\n                    user_stats_dict[username][\"how_u_hear_other\"],\n                    username,\n                )\n                update_prep_cursor.execute(user_info_update_statement, input)\n                users_info_updated_count += 1\n    db_connection.commit()\n\n    print(\"Number of new users info inserted:\" + str(new_user_info_count))\n    print(\"Number of users updated:\" + str(users_info_updated_count))\n\n    dev_tokens_users = get_dev_token_users_from_mongo()\n    update_new_dev_tokens_statement = (\n        \"update user_info set dev_token_first_seen = now() \"\n        \"where dev_token_first_seen is null and \"\n        \"username in (\" + (\"%s, \" * (len(dev_tokens_users) - 1)) + \"%s)\"\n        )\n#    print(\"update_new_dev_tokens_statement : \" + update_new_dev_tokens_statement)\n    update_dev_tokens_prep_cursor = db_connection.cursor(prepared=True)\n    update_dev_tokens_prep_cursor.execute(update_new_dev_tokens_statement, dev_tokens_users)\n    db_connection.commit()\n    \n    # NOW DO USER SUMMARY STATS\n    user_summary_stats_insert_statement = (\n        \"insert into user_system_summary_stats \"\n        \"(username,num_orgs, narrative_count, \"\n        \"shared_count, narratives_shared) \"\n        \"values(%s,%s,%s,%s,%s);\"\n    )\n\n    existing_user_summary_stats = dict()\n    query = (\n        \"select username, num_orgs, narrative_count, shared_count, narratives_shared \"\n        \"from user_system_summary_stats_current\"\n    )\n    cursor.execute(query)\n    for (\n        username,\n        num_orgs,\n        narrative_count,\n        shared_count,\n        narratives_shared,\n    ) in cursor:\n        existing_user_summary_stats[username] = {\n            \"num_orgs\": num_orgs,\n            \"narrative_count\": narrative_count,\n            \"shared_count\": shared_count,\n            \"narratives_shared\": narratives_shared,\n        }\n    print(\"Number of existing user summaries:\" + str(len(existing_user_summary_stats)))\n\n    new_user_summary_count = 0\n    existing_user_summary_count = 0\n    for username in user_stats_dict:\n        if username not in existing_user_summary_stats:\n            # if user does not exist insert\n            input = (\n                username,\n                user_stats_dict[username][\"num_orgs\"],\n                user_stats_dict[username][\"narrative_count\"],\n                user_stats_dict[username][\"shared_count\"],\n                user_stats_dict[username][\"narratives_shared\"],\n            )\n            prep_cursor.execute(user_summary_stats_insert_statement, input)\n            new_user_summary_count += 1\n        else:\n            # else see if the new data differs from the most recent snapshot. If it does differ, do an insert\n            if not (\n                user_stats_dict[username][\"num_orgs\"]\n                == existing_user_summary_stats[username][\"num_orgs\"]\n                and user_stats_dict[username][\"narrative_count\"]\n                == existing_user_summary_stats[username][\"narrative_count\"]\n                and user_stats_dict[username][\"shared_count\"]\n                == existing_user_summary_stats[username][\"shared_count\"]\n                and user_stats_dict[username][\"narratives_shared\"]\n                == existing_user_summary_stats[username][\"narratives_shared\"]\n            ):\n                input = (\n                    username,\n                    user_stats_dict[username][\"num_orgs\"],\n                    user_stats_dict[username][\"narrative_count\"],\n                    user_stats_dict[username][\"shared_count\"],\n                    user_stats_dict[username][\"narratives_shared\"],\n                )\n                prep_cursor.execute(user_summary_stats_insert_statement, input)\n                existing_user_summary_count += 1\n\n    db_connection.commit()\n\n    # THIS CODE is to update any of the 434 excluded users that had accounts made for them\n    # but never logged in. In case any of them ever do log in, they will be removed from\n    # the excluded list\n    query = \"UPDATE metrics.user_info set exclude = False where last_signin_date is not NULL\"\n    cursor.execute(query)\n    db_connection.commit()\n\n    print(\"Number of new users summary inserted:\" + str(new_user_summary_count))\n    print(\n        \"Number of existing users summary inserted:\" + str(existing_user_summary_count)\n    )\n\n    return 1\n\n"], "filenames": ["source/daily_cron_jobs/methods_upload_user_stats.py"], "buggy_code_start_loc": [613], "buggy_code_end_loc": [643], "fixing_code_start_loc": [612], "fixing_code_end_loc": [621], "type": "CWE-89", "message": "A vulnerability was found in KBase Metrics. It has been classified as critical. This affects the function upload_user_data of the file source/daily_cron_jobs/methods_upload_user_stats.py. The manipulation leads to sql injection. The name of the patch is 959dfb6b05991e30b0fa972a1ecdcaae8e1dae6d. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217059.", "other": {"cve": {"id": "CVE-2022-4860", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-30T12:15:09.583", "lastModified": "2023-01-06T18:56:35.230", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in KBase Metrics. It has been classified as critical. This affects the function upload_user_data of the file source/daily_cron_jobs/methods_upload_user_stats.py. The manipulation leads to sql injection. The name of the patch is 959dfb6b05991e30b0fa972a1ecdcaae8e1dae6d. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-217059."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kbase:metrics:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-05-22", "matchCriteriaId": "CDA06807-0CD1-4E8D-8682-388FC52FEFF5"}]}]}], "references": [{"url": "https://github.com/kbase/metrics/commit/959dfb6b05991e30b0fa972a1ecdcaae8e1dae6d", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kbase/metrics/pull/77", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217059", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217059", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kbase/metrics/commit/959dfb6b05991e30b0fa972a1ecdcaae8e1dae6d"}}