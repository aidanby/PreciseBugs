{"buggy_code": ["<%#\nCopyright 2013-2020 the original author or authors from the JHipster project.\n\nThis file is part of the JHipster project, see https://www.jhipster.tech/\nfor more information.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-%>\npackage <%= packageName %>.web.rest\n\n<%_ if (authenticationType === 'oauth2') { _%>\n    <%_ if (reactive) { _%>\nimport <%= packageName %>.security.getCurrentUserLogin\n    <%_ } _%>\nimport <%= packageName %>.service.UserService\nimport <%= packageName %>.service.dto.<%= asDto('User') %>\n\nimport org.slf4j.LoggerFactory\nimport org.springframework.security.authentication.AbstractAuthenticationToken;\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\n<%_ if (reactive) { _%>\nimport reactor.core.publisher.Mono\n<%_ } else { _%>\nimport javax.servlet.http.HttpServletRequest\n<%_ } _%>\n\nimport java.security.Principal\n\n/**\n * REST controller for managing the current user's account.\n */\n@RestController\n@RequestMapping(\"/api\")\nclass AccountResource(private val userService: UserService) {\n\n    internal class AccountResourceException(message: String) : RuntimeException(message)\n\n    private val log = LoggerFactory.getLogger(javaClass)\n\n    /**\n     * `GET  /account` : get the current user.\n     *\n     * @param principal the current user; resolves to `null` if not authenticated.\n     * @return the current user.\n     * @throws AccountResourceException `500 (Internal Server Error)` if the user couldn't be returned.\n     */\n    @GetMapping(\"/account\")\n    fun getAccount(principal: Principal?): <% if (reactive) { %>Mono<<%= asDto('User') %>><% } else { %><%= asDto('User') %><% } %> =\n        if (principal is AbstractAuthenticationToken) {\n            userService.getUserFromAuthentication(principal)\n        } else {\n            throw AccountResourceException(\"User could not be found\")\n        }\n\n    companion object {\n        private const val serialVersionUID = 1L\n    }\n}\n<%_ } else if (skipUserManagement) { _%>\n<%_ if (!reactive) { _%>\nimport <%= packageName %>.security.getCurrentUserLogin\n<%_ } _%>\nimport com.fasterxml.jackson.annotation.JsonCreator\nimport org.springframework.security.core.GrantedAuthority\n<%_ if (!reactive) { _%>\nimport org.springframework.security.core.context.SecurityContextHolder\n<%_ } else { _%>\nimport org.springframework.security.core.context.ReactiveSecurityContextHolder\nimport org.springframework.security.core.context.SecurityContext\nimport org.springframework.security.core.userdetails.UserDetails\n<%_ } _%>\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\n<%_ if (reactive) { _%>\nimport reactor.core.publisher.Mono\n<%_ } _%>\n\n@RestController\n@RequestMapping(\"/api\")\nclass AccountResource {\n\n    internal class AccountResourceException : RuntimeException()\n\n    /**\n     * {@code GET  /account} : get the current user.\n     *\n     * @return the current user.\n     * @throws AccountResourceException {@code 500 (Internal Server Error)} if the user couldn't be returned.\n     */\n    @GetMapping(\"/account\")\n    <%_ if (!reactive) { _%>\n    fun getAccount(): UserVM {\n        val login = getCurrentUserLogin()\n            .orElseThrow { AccountResourceException() }\n        val authorities = SecurityContextHolder.getContext().authentication.authorities\n            .mapNotNullTo(mutableSetOf()) { it.authority }\n        return UserVM(login, authorities)\n    <%_ } else { _%>\n    fun getAccount(): Mono<UserVM> {\n        return ReactiveSecurityContextHolder.getContext()\n            .map { SecurityContext.getAuthentication(it) }\n            .map { authentication -> {\n                String login;\n                if (authentication.principal is UserDetails) {\n                    login = authentication.principal.username\n                } else if (authentication.principal is String) {\n                    login = authentication.principal\n                } else {\n                    throw AccountResourceException()\n                }\n                val authorities = authentication.authorities()\n                    .map { GrantedAuthority.getAuthority(it) }\n                    .toSet()\n                return UserVM(login, authorities)\n            }}\n            .switchIfEmpty(Mono.error(AccountResourceException()))\n    <%_ } _%>\n    }\n\n    data class UserVM @JsonCreator constructor(val login: String, val authorities: Set<String>) {\n\n        fun isActivated() = true\n    }\n}\n<%_ } else { _%>\n<%_ if (authenticationType === 'session' && !reactive) { _%>\nimport <%= packageName %>.domain.PersistentToken\nimport <%= packageName %>.repository.PersistentTokenRepository\n<%_ } _%>\nimport <%= packageName %>.repository.UserRepository\nimport <%= packageName %>.security.getCurrentUserLogin\nimport <%= packageName %>.service.MailService\nimport <%= packageName %>.service.UserService\nimport <%= packageName %>.service.dto.PasswordChangeDTO\nimport <%= packageName %>.service.dto.<%= asDto('User') %>\nimport <%= packageName %>.web.rest.errors.EmailAlreadyUsedException\nimport <%= packageName %>.web.rest.errors.InvalidPasswordException\nimport <%= packageName %>.web.rest.errors.LoginAlreadyUsedException\nimport <%= packageName %>.web.rest.vm.KeyAndPasswordVM\nimport <%= packageName %>.web.rest.vm.ManagedUserVM\n\n<% if (authenticationType === 'session' && !reactive) { %>\nimport org.apache.commons.lang3.StringUtils\n<% } %>\nimport org.slf4j.LoggerFactory\nimport org.springframework.http.HttpStatus\n<% if (authenticationType === 'session' && !reactive) { %>\nimport org.springframework.web.bind.annotation.DeleteMapping\n<% } %>\nimport org.springframework.web.bind.annotation.GetMapping\n<% if (authenticationType === 'session' && !reactive) { %>\nimport org.springframework.web.bind.annotation.PathVariable\n<% } %>\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.ResponseStatus\nimport org.springframework.web.bind.annotation.RestController\n<%_ if (reactive) { _%>\nimport org.springframework.web.server.ServerWebExchange\nimport reactor.core.publisher.Mono\n<%_ } _%>\n\n<%_ if (!reactive) { _%>\nimport javax.servlet.http.HttpServletRequest\n<%_ } _%>\nimport javax.validation.Valid\n<%_ if (authenticationType === 'session' && !reactive) { _%>\nimport java.io.UnsupportedEncodingException\nimport java.net.URLDecoder\n<%_ } _%>\n<%_ if (reactive) { _%>\nimport java.security.Principal\n<%_ } _%>\n\n/**\n * REST controller for managing the current user's account.\n */\n@RestController\n@RequestMapping(\"/api\")\nclass AccountResource(\n    private val userRepository: UserRepository,\n    private val userService: UserService,\n    private val mailService: MailService<% if (authenticationType === 'session' && !reactive) { %>,\n    private val persistentTokenRepository: PersistentTokenRepository<%_ } %>\n) {\n\n    internal class AccountResourceException(message: String) : RuntimeException(message)\n\n    private val log = LoggerFactory.getLogger(javaClass)\n\n    /**\n     * `POST  /register` : register the user.\n     *\n     * @param managedUserVM the managed user View Model.\n     * @throws InvalidPasswordException `400 (Bad Request)` if the password is incorrect.\n     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already used.\n     * @throws LoginAlreadyUsedException `400 (Bad Request)` if the login is already used.\n     */\n    @PostMapping(\"/register\")\n    @ResponseStatus(HttpStatus.CREATED)\n    fun registerAccount(@Valid @RequestBody managedUserVM: ManagedUserVM) <% if (reactive) { %>: Mono<Void> <% } %>{\n        if (!checkPasswordLength(managedUserVM.password)) {\n            throw InvalidPasswordException()\n        }\n        <%_ if (!reactive) { _%>\n        val user = userService.registerUser(managedUserVM, managedUserVM.password!!)\n        mailService.sendActivationEmail(user)\n        <%_ } else { _%>\n        return userService.registerUser(managedUserVM, managedUserVM.password!!)\n            .doOnSuccess(mailService::sendActivationEmail)\n            .then()\n        <%_ } _%>\n    }\n\n    /**\n     * `GET  /activate` : activate the registered user.\n     *\n     * @param key the activation key.\n     * @throws RuntimeException `500 (Internal Server Error)` if the user couldn't be activated.\n     */\n    @GetMapping(\"/activate\")\n    fun activateAccount(@RequestParam(value = \"key\") key: String) <% if (reactive) { %>: Mono<Void> <% } %>{\n        <%_ if (!reactive) { _%>\n        val user = userService.activateRegistration(key)\n        if (!user.isPresent) {\n            throw AccountResourceException(\"No user was found for this activation key\")\n        }\n        <%_ } else { _%>\n        return userService.activateRegistration(key)\n            .switchIfEmpty(Mono.error(AccountResourceException(\"No user was found for this activation key\")))\n            .then()\n        <%_ } _%>\n    }\n\n    /**\n     * `GET  /authenticate` : check if the user is authenticated, and return its login.\n     *\n     * @param request the HTTP request.\n     * @return the login if the user is authenticated.\n     */\n    @GetMapping(\"/authenticate\")\n    <%_ if (!reactive) { _%>\n    fun isAuthenticated(request: HttpServletRequest): String? {\n        log.debug(\"REST request to check if the current user is authenticated\")\n        return request.remoteUser\n    <%_ } else { _%>\n    fun isAuthenticated(request: ServerWebExchange): Mono<String?> {\n        log.debug(\"REST request to check if the current user is authenticated\")\n        return request.getPrincipal<Principal>().map(Principal::getName)\n    <%_ } _%>\n    }\n\n    /**\n     * `GET  /account` : get the current user.\n     *\n     * @return the current user.\n     * @throws RuntimeException `500 (Internal Server Error)` if the user couldn't be returned.\n     */\n    @GetMapping(\"/account\")\n    fun getAccount(): <% if (reactive) { %>Mono<<%= asDto('User') %>><% } else { %><%= asDto('User') %><% } %> =\n        userService.getUserWithAuthorities()\n            .map { <%= asDto('User') %>(it) }\n            <%_ if (!reactive) { _%>\n            .orElseThrow { AccountResourceException(\"User could not be found\") }\n            <%_ } else { _%>\n            .switchIfEmpty(Mono.error(AccountResourceException(\"User could not be found\")))\n            <%_ } _%>\n\n    /**\n     * POST  /account : update the current user information.\n     *\n     * @param userDTO the current user information\n     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already used.\n     * @throws RuntimeException `500 (Internal Server Error)` if the user login wasn't found.\n     */\n    @PostMapping(\"/account\")\n    <%_ if (!reactive) { _%>\n    fun saveAccount(@Valid @RequestBody userDTO: <%= asDto('User') %>) {\n        val userLogin = getCurrentUserLogin()\n            .orElseThrow { AccountResourceException(\"\") }\n        val existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.email)\n        if (existingUser.isPresent && !existingUser.get().login.equals(userLogin, ignoreCase = true)) {\n            throw EmailAlreadyUsedException()\n        }\n        val user = userRepository.findOneByLogin(userLogin)\n        if (!user.isPresent) {\n            throw AccountResourceException(\"User could not be found\")\n        }\n        userService.updateUser(\n            userDTO.firstName, userDTO.lastName, userDTO.email,\n            userDTO.langKey<% if (['sql', 'mongodb', 'couchbase'].includes(databaseType)) { %>, userDTO.imageUrl<% } %>\n        )\n    }\n    <%_ } else { _%>\n    fun saveAccount(@Valid @RequestBody userDTO: <%= asDto('User') %>): Mono<Void> =\n        getCurrentUserLogin()\n            .switchIfEmpty(Mono.error(AccountResourceException(\"Current user login not found\")))\n            .flatMap { userLogin ->\n                userRepository.findOneByEmailIgnoreCase(userDTO.email)\n                    .filter { existingUser -> !existingUser.login.equals(userLogin, ignoreCase = true) }\n                    .hasElement()\n                    .flatMap { emailExists ->\n                        if (emailExists!!) {\n                            throw EmailAlreadyUsedException()\n                        }\n                        userRepository.findOneByLogin(userLogin)\n                    }\n            }\n            .switchIfEmpty(Mono.error(AccountResourceException(\"User could not be found\")))\n            .flatMap {\n                userService.updateUser(\n                    userDTO.firstName, userDTO.lastName, userDTO.email, userDTO.langKey<% if (['sql', 'mongodb', 'couchbase'].includes(databaseType)) { %>, userDTO.imageUrl<% } %>\n                )\n            }\n    <%_ } _%>\n\n    /**\n     * POST  /account/change-password : changes the current user's password.\n     *\n     * @param passwordChangeDto current and new password.\n     * @throws InvalidPasswordException `400 (Bad Request)` if the new password is incorrect.\n     */\n    @PostMapping(path = [\"/account/change-password\"])\n    fun changePassword(@RequestBody passwordChangeDto: PasswordChangeDTO) <% if (reactive) { %>: Mono<Void> <% } %>{\n        if (!checkPasswordLength(passwordChangeDto.newPassword)) {\n            throw InvalidPasswordException()\n        }\n        <% if (reactive) { %>return <% } %>userService.changePassword(passwordChangeDto.currentPassword!!, passwordChangeDto.newPassword!!)\n    }<% if (authenticationType === 'session' && !reactive) { %>\n\n    /**\n     * GET  /account/sessions : get the current open sessions.\n     *\n     * @return the current open sessions\n     * @throws RuntimeException `500 (Internal Server Error)` if the current open sessions couldn't be retrieved\n     */\n    @GetMapping(\"/account/sessions\")\n    fun getCurrentSessions(): List<PersistentToken> =\n        persistentTokenRepository.findByUser(\n            userRepository.findOneByLogin(getCurrentUserLogin()\n                .orElseThrow { AccountResourceException(\"Current user login not found\") })\n                .orElseThrow { AccountResourceException(\"User could not be found\") }\n        )\n\n    /**\n     *` DELETE  /account/sessions?series={series}` : invalidate an existing session.\n     *\n     * - You can only delete your own sessions, not any other user's session\n     * - If you delete one of your existing sessions, and that you are currently logged in on that session, you will\n     *   still be able to use that session, until you quit your browser: it does not work in real time (there is\n     *   no API for that), it only removes the \"remember me\" cookie\n     * - This is also true if you invalidate your current session: you will still be able to use it until you close\n     *   your browser or that the session times out. But automatic login (the \"remember me\" cookie) will not work\n     *   anymore.\n     *   There is an API to invalidate the current session, but there is no API to check which session uses which\n     *   cookie.\n     *\n     * @param series the series of an existing session.\n     * @throws UnsupportedEncodingException if the series couldn't be URL decoded.\n     */\n    @DeleteMapping(\"/account/sessions/{series}\")\n    @Throws(UnsupportedEncodingException::class)\n    fun invalidateSession(@PathVariable series: String) {\n        val decodedSeries = URLDecoder.decode(series, \"UTF-8\")\n        getCurrentUserLogin()\n            .flatMap(userRepository::findOneByLogin)\n            .ifPresent { u ->\n                persistentTokenRepository.findByUser(u).stream()\n                    .filter { persistentToken -> StringUtils.equals(persistentToken.series, decodedSeries) }\n                    <%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>\n                    .findAny().ifPresent { persistentTokenRepository.deleteById(decodedSeries) }\n                    <%_ } else if (databaseType === 'couchbase'){ _%>\n                .findAny().ifPresent { persistentTokenRepository.deleteBySeries(decodedSeries) }\n                <%_ } else { _%>\n                    .findAny().ifPresent(persistentTokenRepository::delete)\n                <%_ } _%>\n            }\n    }<% } %>\n\n    /**\n     * POST   /account/reset-password/init : Send an email to reset the password of the user\n     *\n     * @param mail the mail of the user\n     */\n    @PostMapping(path = [\"/account/reset-password/init\"])\n    <%_ if (!reactive) { _%>\n    fun requestPasswordReset(@RequestBody mail: String) {\n        val user = userService.requestPasswordReset(mail)\n        if (user.isPresent()) {\n            mailService.sendPasswordResetMail(user.get())\n        } else {\n            // Pretend the request has been successful to prevent checking which emails really exist\n            // but log that an invalid attempt has been made\n            log.warn(\"Password reset requested for non existing mail '$mail'\");\n        }\n    }\n    <%_ } else { _%>\n    fun requestPasswordReset(@RequestBody mail: String): Mono<Void> =\n        userService.requestPasswordReset(mail)\n            .doOnSuccess {\n                if (it != null)  {\n                    mailService.sendPasswordResetMail(it)\n                } else {\n                    // Pretend the request has been successful to prevent checking which emails really exist\n                    // but log that an invalid attempt has been made\n                    log.warn(\"Password reset request for non existing email '$mail'\")\n                }\n            }.then()\n    <%_ } _%>\n\n    /**\n     * `POST   /account/reset-password/finish` : Finish to reset the password of the user.\n     *\n     * @param keyAndPassword the generated key and the new password.\n     * @throws InvalidPasswordException `400 (Bad Request)` if the password is incorrect.\n     * @throws RuntimeException `500 (Internal Server Error)` if the password could not be reset.\n     */\n    @PostMapping(path = [\"/account/reset-password/finish\"])\n    fun finishPasswordReset(@RequestBody keyAndPassword: KeyAndPasswordVM) <% if (reactive) { %>: Mono<Void> <% } %>{\n        if (!checkPasswordLength(keyAndPassword.newPassword)) {\n            throw InvalidPasswordException()\n        }\n        <%_ if (!reactive) { _%>\n        val user = userService.completePasswordReset(keyAndPassword.newPassword!!, keyAndPassword.key!!)\n\n        if (!user.isPresent) {\n            throw AccountResourceException(\"No user was found for this reset key\")\n        }\n        <%_ } else { _%>\n        return userService.completePasswordReset(keyAndPassword.newPassword!!, keyAndPassword.key!!)\n            .switchIfEmpty(Mono.error(AccountResourceException(\"No user was found for this reset key\")))\n            .then()\n        <%_ } _%>\n    }\n}\n\nprivate fun checkPasswordLength(password: String?) =\n    !password.isNullOrEmpty() &&\n        password.length >= ManagedUserVM.PASSWORD_MIN_LENGTH &&\n        password.length <= ManagedUserVM.PASSWORD_MAX_LENGTH\n<%_ } _%>\n"], "fixing_code": ["<%#\nCopyright 2013-2020 the original author or authors from the JHipster project.\n\nThis file is part of the JHipster project, see https://www.jhipster.tech/\nfor more information.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n-%>\npackage <%= packageName %>.web.rest\n\n<%_ if (authenticationType === 'oauth2') { _%>\n    <%_ if (reactive) { _%>\nimport <%= packageName %>.security.getCurrentUserLogin\n    <%_ } _%>\nimport <%= packageName %>.service.UserService\nimport <%= packageName %>.service.dto.<%= asDto('User') %>\n\nimport org.slf4j.LoggerFactory\nimport org.springframework.security.authentication.AbstractAuthenticationToken;\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\n<%_ if (reactive) { _%>\nimport reactor.core.publisher.Mono\n<%_ } else { _%>\nimport javax.servlet.http.HttpServletRequest\n<%_ } _%>\n\nimport java.security.Principal\n\n/**\n * REST controller for managing the current user's account.\n */\n@RestController\n@RequestMapping(\"/api\")\nclass AccountResource(private val userService: UserService) {\n\n    internal class AccountResourceException(message: String) : RuntimeException(message)\n\n    private val log = LoggerFactory.getLogger(javaClass)\n\n    /**\n     * `GET  /account` : get the current user.\n     *\n     * @param principal the current user; resolves to `null` if not authenticated.\n     * @return the current user.\n     * @throws AccountResourceException `500 (Internal Server Error)` if the user couldn't be returned.\n     */\n    @GetMapping(\"/account\")\n    fun getAccount(principal: Principal?): <% if (reactive) { %>Mono<<%= asDto('User') %>><% } else { %><%= asDto('User') %><% } %> =\n        if (principal is AbstractAuthenticationToken) {\n            userService.getUserFromAuthentication(principal)\n        } else {\n            throw AccountResourceException(\"User could not be found\")\n        }\n\n    companion object {\n        private const val serialVersionUID = 1L\n    }\n}\n<%_ } else if (skipUserManagement) { _%>\n<%_ if (!reactive) { _%>\nimport <%= packageName %>.security.getCurrentUserLogin\n<%_ } _%>\nimport com.fasterxml.jackson.annotation.JsonCreator\nimport org.springframework.security.core.GrantedAuthority\n<%_ if (!reactive) { _%>\nimport org.springframework.security.core.context.SecurityContextHolder\n<%_ } else { _%>\nimport org.springframework.security.core.context.ReactiveSecurityContextHolder\nimport org.springframework.security.core.context.SecurityContext\nimport org.springframework.security.core.userdetails.UserDetails\n<%_ } _%>\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\n<%_ if (reactive) { _%>\nimport reactor.core.publisher.Mono\n<%_ } _%>\n\n@RestController\n@RequestMapping(\"/api\")\nclass AccountResource {\n\n    internal class AccountResourceException : RuntimeException()\n\n    /**\n     * {@code GET  /account} : get the current user.\n     *\n     * @return the current user.\n     * @throws AccountResourceException {@code 500 (Internal Server Error)} if the user couldn't be returned.\n     */\n    @GetMapping(\"/account\")\n    <%_ if (!reactive) { _%>\n    fun getAccount(): UserVM {\n        val login = getCurrentUserLogin()\n            .orElseThrow { AccountResourceException() }\n        val authorities = SecurityContextHolder.getContext().authentication.authorities\n            .mapNotNullTo(mutableSetOf()) { it.authority }\n        return UserVM(login, authorities)\n    <%_ } else { _%>\n    fun getAccount(): Mono<UserVM> {\n        return ReactiveSecurityContextHolder.getContext()\n            .map { SecurityContext.getAuthentication(it) }\n            .map { authentication -> {\n                String login;\n                if (authentication.principal is UserDetails) {\n                    login = authentication.principal.username\n                } else if (authentication.principal is String) {\n                    login = authentication.principal\n                } else {\n                    throw AccountResourceException()\n                }\n                val authorities = authentication.authorities()\n                    .map { GrantedAuthority.getAuthority(it) }\n                    .toSet()\n                return UserVM(login, authorities)\n            }}\n            .switchIfEmpty(Mono.error(AccountResourceException()))\n    <%_ } _%>\n    }\n\n    data class UserVM @JsonCreator constructor(val login: String, val authorities: Set<String>) {\n\n        fun isActivated() = true\n    }\n}\n<%_ } else { _%>\n<%_ if (authenticationType === 'session' && !reactive) { _%>\nimport <%= packageName %>.domain.PersistentToken\nimport <%= packageName %>.repository.PersistentTokenRepository\n<%_ } _%>\nimport <%= packageName %>.repository.UserRepository\nimport <%= packageName %>.security.getCurrentUserLogin\nimport <%= packageName %>.service.MailService\nimport <%= packageName %>.service.UserService\nimport <%= packageName %>.service.dto.PasswordChangeDTO\nimport <%= packageName %>.service.dto.<%= asDto('User') %>\nimport <%= packageName %>.web.rest.errors.EmailAlreadyUsedException\nimport <%= packageName %>.web.rest.errors.InvalidPasswordException\nimport <%= packageName %>.web.rest.errors.LoginAlreadyUsedException\nimport <%= packageName %>.web.rest.vm.KeyAndPasswordVM\nimport <%= packageName %>.web.rest.vm.ManagedUserVM\n\n<% if (authenticationType === 'session' && !reactive) { %>\nimport org.apache.commons.lang3.StringUtils\n<% } %>\nimport org.slf4j.LoggerFactory\nimport org.springframework.http.HttpStatus\n<% if (authenticationType === 'session' && !reactive) { %>\nimport org.springframework.web.bind.annotation.DeleteMapping\n<% } %>\nimport org.springframework.web.bind.annotation.GetMapping\n<% if (authenticationType === 'session' && !reactive) { %>\nimport org.springframework.web.bind.annotation.PathVariable\n<% } %>\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestBody\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.ResponseStatus\nimport org.springframework.web.bind.annotation.RestController\n<%_ if (reactive) { _%>\nimport org.springframework.web.server.ServerWebExchange\nimport reactor.core.publisher.Mono\n<%_ } _%>\n\n<%_ if (!reactive) { _%>\nimport javax.servlet.http.HttpServletRequest\n<%_ } _%>\nimport javax.validation.Valid\n<%_ if (authenticationType === 'session' && !reactive) { _%>\nimport java.io.UnsupportedEncodingException\nimport java.net.URLDecoder\n<%_ } _%>\n<%_ if (reactive) { _%>\nimport java.security.Principal\n<%_ } _%>\n\n/**\n * REST controller for managing the current user's account.\n */\n@RestController\n@RequestMapping(\"/api\")\nclass AccountResource(\n    private val userRepository: UserRepository,\n    private val userService: UserService,\n    private val mailService: MailService<% if (authenticationType === 'session' && !reactive) { %>,\n    private val persistentTokenRepository: PersistentTokenRepository<%_ } %>\n) {\n\n    internal class AccountResourceException(message: String) : RuntimeException(message)\n\n    private val log = LoggerFactory.getLogger(javaClass)\n\n    /**\n     * `POST  /register` : register the user.\n     *\n     * @param managedUserVM the managed user View Model.\n     * @throws InvalidPasswordException `400 (Bad Request)` if the password is incorrect.\n     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already used.\n     * @throws LoginAlreadyUsedException `400 (Bad Request)` if the login is already used.\n     */\n    @PostMapping(\"/register\")\n    @ResponseStatus(HttpStatus.CREATED)\n    fun registerAccount(@Valid @RequestBody managedUserVM: ManagedUserVM) <% if (reactive) { %>: Mono<Void> <% } %>{\n        if (!checkPasswordLength(managedUserVM.password)) {\n            throw InvalidPasswordException()\n        }\n        <%_ if (!reactive) { _%>\n        val user = userService.registerUser(managedUserVM, managedUserVM.password!!)\n        mailService.sendActivationEmail(user)\n        <%_ } else { _%>\n        return userService.registerUser(managedUserVM, managedUserVM.password!!)\n            .doOnSuccess(mailService::sendActivationEmail)\n            .then()\n        <%_ } _%>\n    }\n\n    /**\n     * `GET  /activate` : activate the registered user.\n     *\n     * @param key the activation key.\n     * @throws RuntimeException `500 (Internal Server Error)` if the user couldn't be activated.\n     */\n    @GetMapping(\"/activate\")\n    fun activateAccount(@RequestParam(value = \"key\") key: String) <% if (reactive) { %>: Mono<Void> <% } %>{\n        <%_ if (!reactive) { _%>\n        val user = userService.activateRegistration(key)\n        if (!user.isPresent) {\n            throw AccountResourceException(\"No user was found for this activation key\")\n        }\n        <%_ } else { _%>\n        return userService.activateRegistration(key)\n            .switchIfEmpty(Mono.error(AccountResourceException(\"No user was found for this activation key\")))\n            .then()\n        <%_ } _%>\n    }\n\n    /**\n     * `GET  /authenticate` : check if the user is authenticated, and return its login.\n     *\n     * @param request the HTTP request.\n     * @return the login if the user is authenticated.\n     */\n    @GetMapping(\"/authenticate\")\n    <%_ if (!reactive) { _%>\n    fun isAuthenticated(request: HttpServletRequest): String? {\n        log.debug(\"REST request to check if the current user is authenticated\")\n        return request.remoteUser\n    <%_ } else { _%>\n    fun isAuthenticated(request: ServerWebExchange): Mono<String?> {\n        log.debug(\"REST request to check if the current user is authenticated\")\n        return request.getPrincipal<Principal>().map(Principal::getName)\n    <%_ } _%>\n    }\n\n    /**\n     * `GET  /account` : get the current user.\n     *\n     * @return the current user.\n     * @throws RuntimeException `500 (Internal Server Error)` if the user couldn't be returned.\n     */\n    @GetMapping(\"/account\")\n    fun getAccount(): <% if (reactive) { %>Mono<<%= asDto('User') %>><% } else { %><%= asDto('User') %><% } %> =\n        userService.getUserWithAuthorities()\n            .map { <%= asDto('User') %>(it) }\n            <%_ if (!reactive) { _%>\n            .orElseThrow { AccountResourceException(\"User could not be found\") }\n            <%_ } else { _%>\n            .switchIfEmpty(Mono.error(AccountResourceException(\"User could not be found\")))\n            <%_ } _%>\n\n    /**\n     * POST  /account : update the current user information.\n     *\n     * @param userDTO the current user information\n     * @throws EmailAlreadyUsedException `400 (Bad Request)` if the email is already used.\n     * @throws RuntimeException `500 (Internal Server Error)` if the user login wasn't found.\n     */\n    @PostMapping(\"/account\")\n    <%_ if (!reactive) { _%>\n    fun saveAccount(@Valid @RequestBody userDTO: <%= asDto('User') %>) {\n        val userLogin = getCurrentUserLogin()\n            .orElseThrow { AccountResourceException(\"\") }\n        val existingUser = userRepository.findOneByEmailIgnoreCase(userDTO.email)\n        if (existingUser.isPresent && !existingUser.get().login.equals(userLogin, ignoreCase = true)) {\n            throw EmailAlreadyUsedException()\n        }\n        val user = userRepository.findOneByLogin(userLogin)\n        if (!user.isPresent) {\n            throw AccountResourceException(\"User could not be found\")\n        }\n        userService.updateUser(\n            userDTO.firstName, userDTO.lastName, userDTO.email,\n            userDTO.langKey<% if (['sql', 'mongodb', 'couchbase'].includes(databaseType)) { %>, userDTO.imageUrl<% } %>\n        )\n    }\n    <%_ } else { _%>\n    fun saveAccount(@Valid @RequestBody userDTO: <%= asDto('User') %>): Mono<Void> =\n        getCurrentUserLogin()\n            .switchIfEmpty(Mono.error(AccountResourceException(\"Current user login not found\")))\n            .flatMap { userLogin ->\n                userRepository.findOneByEmailIgnoreCase(userDTO.email)\n                    .filter { existingUser -> !existingUser.login.equals(userLogin, ignoreCase = true) }\n                    .hasElement()\n                    .flatMap { emailExists ->\n                        if (emailExists!!) {\n                            throw EmailAlreadyUsedException()\n                        }\n                        userRepository.findOneByLogin(userLogin)\n                    }\n            }\n            .switchIfEmpty(Mono.error(AccountResourceException(\"User could not be found\")))\n            .flatMap {\n                userService.updateUser(\n                    userDTO.firstName, userDTO.lastName, userDTO.email, userDTO.langKey<% if (['sql', 'mongodb', 'couchbase'].includes(databaseType)) { %>, userDTO.imageUrl<% } %>\n                )\n            }\n    <%_ } _%>\n\n    /**\n     * POST  /account/change-password : changes the current user's password.\n     *\n     * @param passwordChangeDto current and new password.\n     * @throws InvalidPasswordException `400 (Bad Request)` if the new password is incorrect.\n     */\n    @PostMapping(path = [\"/account/change-password\"])\n    fun changePassword(@RequestBody passwordChangeDto: PasswordChangeDTO) <% if (reactive) { %>: Mono<Void> <% } %>{\n        if (!checkPasswordLength(passwordChangeDto.newPassword)) {\n            throw InvalidPasswordException()\n        }\n        <% if (reactive) { %>return <% } %>userService.changePassword(passwordChangeDto.currentPassword!!, passwordChangeDto.newPassword!!)\n    }<% if (authenticationType === 'session' && !reactive) { %>\n\n    /**\n     * GET  /account/sessions : get the current open sessions.\n     *\n     * @return the current open sessions\n     * @throws RuntimeException `500 (Internal Server Error)` if the current open sessions couldn't be retrieved\n     */\n    @GetMapping(\"/account/sessions\")\n    fun getCurrentSessions(): List<PersistentToken> =\n        persistentTokenRepository.findByUser(\n            userRepository.findOneByLogin(getCurrentUserLogin()\n                .orElseThrow { AccountResourceException(\"Current user login not found\") })\n                .orElseThrow { AccountResourceException(\"User could not be found\") }\n        )\n\n    /**\n     *` DELETE  /account/sessions?series={series}` : invalidate an existing session.\n     *\n     * - You can only delete your own sessions, not any other user's session\n     * - If you delete one of your existing sessions, and that you are currently logged in on that session, you will\n     *   still be able to use that session, until you quit your browser: it does not work in real time (there is\n     *   no API for that), it only removes the \"remember me\" cookie\n     * - This is also true if you invalidate your current session: you will still be able to use it until you close\n     *   your browser or that the session times out. But automatic login (the \"remember me\" cookie) will not work\n     *   anymore.\n     *   There is an API to invalidate the current session, but there is no API to check which session uses which\n     *   cookie.\n     *\n     * @param series the series of an existing session.\n     * @throws UnsupportedEncodingException if the series couldn't be URL decoded.\n     */\n    @DeleteMapping(\"/account/sessions/{series}\")\n    @Throws(UnsupportedEncodingException::class)\n    fun invalidateSession(@PathVariable series: String) {\n        val decodedSeries = URLDecoder.decode(series, \"UTF-8\")\n        getCurrentUserLogin()\n            .flatMap(userRepository::findOneByLogin)\n            .ifPresent { u ->\n                persistentTokenRepository.findByUser(u).stream()\n                    .filter { persistentToken -> StringUtils.equals(persistentToken.series, decodedSeries) }\n                    <%_ if (databaseType === 'sql' || databaseType === 'mongodb') { _%>\n                    .findAny().ifPresent { persistentTokenRepository.deleteById(decodedSeries) }\n                    <%_ } else if (databaseType === 'couchbase'){ _%>\n                .findAny().ifPresent { persistentTokenRepository.deleteBySeries(decodedSeries) }\n                <%_ } else { _%>\n                    .findAny().ifPresent(persistentTokenRepository::delete)\n                <%_ } _%>\n            }\n    }<% } %>\n\n    /**\n     * POST   /account/reset-password/init : Send an email to reset the password of the user\n     *\n     * @param mail the mail of the user\n     */\n    @PostMapping(path = [\"/account/reset-password/init\"])\n    <%_ if (!reactive) { _%>\n    fun requestPasswordReset(@RequestBody mail: String) {\n        val user = userService.requestPasswordReset(mail)\n        if (user.isPresent()) {\n            mailService.sendPasswordResetMail(user.get())\n        } else {\n            // Pretend the request has been successful to prevent checking which emails really exist\n            // but log that an invalid attempt has been made\n            log.warn(\"Password reset requested for non existing mail\");\n        }\n    }\n    <%_ } else { _%>\n    fun requestPasswordReset(@RequestBody mail: String): Mono<Void> =\n        userService.requestPasswordReset(mail)\n            .doOnSuccess {\n                if (it != null)  {\n                    mailService.sendPasswordResetMail(it)\n                } else {\n                    // Pretend the request has been successful to prevent checking which emails really exist\n                    // but log that an invalid attempt has been made\n                    log.warn(\"Password reset request for non existing email\")\n                }\n            }.then()\n    <%_ } _%>\n\n    /**\n     * `POST   /account/reset-password/finish` : Finish to reset the password of the user.\n     *\n     * @param keyAndPassword the generated key and the new password.\n     * @throws InvalidPasswordException `400 (Bad Request)` if the password is incorrect.\n     * @throws RuntimeException `500 (Internal Server Error)` if the password could not be reset.\n     */\n    @PostMapping(path = [\"/account/reset-password/finish\"])\n    fun finishPasswordReset(@RequestBody keyAndPassword: KeyAndPasswordVM) <% if (reactive) { %>: Mono<Void> <% } %>{\n        if (!checkPasswordLength(keyAndPassword.newPassword)) {\n            throw InvalidPasswordException()\n        }\n        <%_ if (!reactive) { _%>\n        val user = userService.completePasswordReset(keyAndPassword.newPassword!!, keyAndPassword.key!!)\n\n        if (!user.isPresent) {\n            throw AccountResourceException(\"No user was found for this reset key\")\n        }\n        <%_ } else { _%>\n        return userService.completePasswordReset(keyAndPassword.newPassword!!, keyAndPassword.key!!)\n            .switchIfEmpty(Mono.error(AccountResourceException(\"No user was found for this reset key\")))\n            .then()\n        <%_ } _%>\n    }\n}\n\nprivate fun checkPasswordLength(password: String?) =\n    !password.isNullOrEmpty() &&\n        password.length >= ManagedUserVM.PASSWORD_MIN_LENGTH &&\n        password.length <= ManagedUserVM.PASSWORD_MAX_LENGTH\n<%_ } _%>\n"], "filenames": ["generators/server/templates/src/main/kotlin/package/web/rest/AccountResource.kt.ejs"], "buggy_code_start_loc": [409], "buggy_code_end_loc": [422], "fixing_code_start_loc": [409], "fixing_code_end_loc": [422], "type": "CWE-117", "message": "In generator-jhipster-kotlin version 1.6.0 log entries are created for invalid password reset attempts. As the email is provided by a user and the api is public this can be used by an attacker to forge log entries. This is vulnerable to https://cwe.mitre.org/data/definitions/117.html This problem affects only application generated with jwt or session authentication. Applications using oauth are not vulnerable. This issue has been fixed in version 1.7.0.", "other": {"cve": {"id": "CVE-2020-4072", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-25T20:15:11.350", "lastModified": "2020-07-10T21:20:34.387", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In generator-jhipster-kotlin version 1.6.0 log entries are created for invalid password reset attempts. As the email is provided by a user and the api is public this can be used by an attacker to forge log entries. This is vulnerable to https://cwe.mitre.org/data/definitions/117.html This problem affects only application generated with jwt or session authentication. Applications using oauth are not vulnerable. This issue has been fixed in version 1.7.0."}, {"lang": "es", "value": "En generator-jhipster-kotlin versi\u00f3n 1.6.0, son creadas entradas de registro para intentos de restablecimiento de contrase\u00f1a no v\u00e1lidos. Como el correo electr\u00f3nico lo proporciona un usuario y la API es p\u00fablica, un atacante puede usarla para falsificar entradas de registro. Esto es vulnerable para https://cwe.mitre.org/data/definitions/117.html. Este problema afecta solo a las aplicaciones generadas con jwt o autenticaci\u00f3n de sesi\u00f3n. Las aplicaciones que usan oauth no son vulnerables. Este problema ha sido corregido en la versi\u00f3n 1.7.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-117"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jhipster:generator-jhipster-kotlin:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.0", "matchCriteriaId": "7ED11C73-DCF1-493C-82B5-68E9FB07EE7B"}]}]}], "references": [{"url": "https://github.com/jhipster/jhipster-kotlin/commit/426ccab85e7e0da562643200637b99b6a2a99449", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jhipster/jhipster-kotlin/security/advisories/GHSA-pfxf-wh96-fvjc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://owasp.org/www-community/attacks/Log_Injection", "source": "security-advisories@github.com", "tags": ["Technical Description"]}, {"url": "https://www.baeldung.com/jvm-log-forging", "source": "security-advisories@github.com", "tags": ["Technical Description"]}]}, "github_commit_url": "https://github.com/jhipster/jhipster-kotlin/commit/426ccab85e7e0da562643200637b99b6a2a99449"}}