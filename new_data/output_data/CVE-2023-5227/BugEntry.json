{"buggy_code": ["<?php\n\n/**\n * The category image class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2016-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2016-09-08\n */\n\nnamespace phpMyFAQ\\Category;\n\nuse phpMyFAQ\\Configuration;\n\n/**\n * Class CategoryImage\n *\n * @package phpMyFAQ\\Category\n */\nclass CategoryImage\n{\n    /** @var string */\n    private const UPLOAD_DIR = PMF_ROOT_DIR . '/images/';\n\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * @var bool\n     */\n    private bool $isUpload = false;\n\n    /**\n     * @var array\n     */\n    private array $uploadedFile = [];\n\n    /**\n     * @var string\n     */\n    private string $fileName = '';\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config Configuration object\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Sets the uploaded file array from $_FILES.\n     *\n     * @param array $uploadedFile\n     *\n     * @return CategoryImage\n     */\n    public function setUploadedFile(array $uploadedFile): CategoryImage\n    {\n        if (isset($uploadedFile['error']) && UPLOAD_ERR_OK === $uploadedFile['error']) {\n            $this->isUpload = true;\n        }\n        $this->uploadedFile = $uploadedFile;\n\n        return $this;\n    }\n\n    /**\n     * Returns the filename for the given category ID and language.\n     *\n     * @param int    $categoryId\n     * @param string $categoryName\n     * @return string\n     */\n    public function getFileName(int $categoryId, string $categoryName): string\n    {\n        if ($this->isUpload) {\n            $this->setFileName(\n                sprintf(\n                    'category-%d-%s.%s',\n                    $categoryId,\n                    $categoryName,\n                    $this->getFileExtension($this->uploadedFile['type'])\n                )\n            );\n        }\n\n        return $this->fileName;\n    }\n\n    /**\n     * Returns the filename.\n     *\n     * @param string $fileName\n     * @return CategoryImage\n     */\n    public function setFileName(string $fileName): CategoryImage\n    {\n        $this->fileName = $fileName;\n\n        return $this;\n    }\n\n    /**\n     * Returns the image file extension from a given MIME type.\n     *\n     * @param string $mimeType\n     * @return string\n     */\n    private function getFileExtension(string $mimeType): string\n    {\n        $mapping = [\n            'image/gif' => 'gif',\n            'image/jpeg' => 'jpg',\n            'image/png' => 'png'\n        ];\n\n        return $mapping[$mimeType] ?? '';\n    }\n\n    /**\n     * Uploads the current file and moves it into the images/ folder.\n     *\n     * @return bool\n     */\n    public function upload(): bool\n    {\n        if (\n            $this->isUpload && is_uploaded_file($this->uploadedFile['tmp_name'])\n            && $this->uploadedFile['size'] < $this->config->get('records.maxAttachmentSize')\n        ) {\n            if (false === getimagesize($this->uploadedFile['tmp_name'])) {\n                return false;\n            }\n            if (move_uploaded_file($this->uploadedFile['tmp_name'], self::UPLOAD_DIR . $this->fileName)) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Deletes the current file, returns true, if no file is available.\n     *\n     * @return bool\n     */\n    public function delete(): bool\n    {\n        if (is_file(self::UPLOAD_DIR . $this->fileName)) {\n            return unlink(self::UPLOAD_DIR . $this->fileName);\n        }\n\n        return true;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The category image class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2016-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2016-09-08\n */\n\nnamespace phpMyFAQ\\Category;\n\nuse phpMyFAQ\\Configuration;\n\n/**\n * Class CategoryImage\n *\n * @package phpMyFAQ\\Category\n */\nclass CategoryImage\n{\n    /** @var string */\n    private const UPLOAD_DIR = PMF_ROOT_DIR . '/images/';\n\n    /**\n     * @var Configuration\n     */\n    private Configuration $config;\n\n    /**\n     * @var bool\n     */\n    private bool $isUpload = false;\n\n    /**\n     * @var array\n     */\n    private array $uploadedFile = [];\n\n    /**\n     * @var string\n     */\n    private string $fileName = '';\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config Configuration object\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Sets the uploaded file array from $_FILES.\n     *\n     * @param array $uploadedFile\n     *\n     * @return CategoryImage\n     */\n    public function setUploadedFile(array $uploadedFile): CategoryImage\n    {\n        if (isset($uploadedFile['error']) && UPLOAD_ERR_OK === $uploadedFile['error']) {\n            $this->isUpload = true;\n        }\n        $this->uploadedFile = $uploadedFile;\n\n        return $this;\n    }\n\n    /**\n     * Returns the filename for the given category ID and language.\n     *\n     * @param int    $categoryId\n     * @param string $categoryName\n     * @return string\n     */\n    public function getFileName(int $categoryId, string $categoryName): string\n    {\n        if ($this->isUpload) {\n            $this->setFileName(\n                sprintf(\n                    'category-%d-%s.%s',\n                    $categoryId,\n                    $categoryName,\n                    $this->getFileExtension($this->uploadedFile['type'])\n                )\n            );\n        }\n\n        return $this->fileName;\n    }\n\n    /**\n     * Returns the filename.\n     *\n     * @param string $fileName\n     * @return CategoryImage\n     */\n    public function setFileName(string $fileName): CategoryImage\n    {\n        $this->fileName = $fileName;\n\n        return $this;\n    }\n\n    /**\n     * Returns the image file extension from a given MIME type.\n     *\n     * @param string $mimeType\n     * @return string\n     */\n    private function getFileExtension(string $mimeType): string\n    {\n        $mapping = [\n            'image/gif' => 'gif',\n            'image/jpeg' => 'jpg',\n            'image/png' => 'png'\n        ];\n\n        return $mapping[$mimeType] ?? '';\n    }\n\n    /**\n     * Checks for valid image MIME types, returns true if valid\n     * @param string $file\n     * @return bool\n     */\n    private function isValidMimeType(string $file): bool\n    {\n        $types = ['image/jpeg','image/gif','image/png'];\n        $type = mime_content_type($file);\n\n        return in_array($type, $types);\n    }\n\n    /**\n     * Uploads the current file and moves it into the images/ folder.\n     *\n     * @return bool\n     */\n    public function upload(): bool\n    {\n        if (\n            $this->isUpload && is_uploaded_file($this->uploadedFile['tmp_name'])\n            && $this->uploadedFile['size'] < $this->config->get('records.maxAttachmentSize')\n        ) {\n            if (!getimagesize($this->uploadedFile['tmp_name'])) {\n                return false;\n            }\n\n            if (!$this->isValidMimeType($this->uploadedFile['tmp_name'])) {\n                return false;\n            }\n\n            if (!move_uploaded_file($this->uploadedFile['tmp_name'], self::UPLOAD_DIR . $this->fileName)) {\n                return false;\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Deletes the current file, returns true, if no file is available.\n     *\n     * @return bool\n     */\n    public function delete(): bool\n    {\n        if (is_file(self::UPLOAD_DIR . $this->fileName)) {\n            return unlink(self::UPLOAD_DIR . $this->fileName);\n        }\n\n        return true;\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/Category/CategoryImage.php"], "buggy_code_start_loc": [132], "buggy_code_end_loc": [150], "fixing_code_start_loc": [133], "fixing_code_end_loc": [169], "type": "CWE-434", "message": "Unrestricted Upload of File with Dangerous Type in GitHub repository thorsten/phpmyfaq prior to 3.1.8.", "other": {"cve": {"id": "CVE-2023-5227", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-30T01:15:39.070", "lastModified": "2023-10-02T16:52:16.400", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Unrestricted Upload of File with Dangerous Type in GitHub repository thorsten/phpmyfaq prior to 3.1.8."}, {"lang": "es", "value": "Carga sin Restricciones de Archivos con Tipo Peligroso en el repositorio de GitHub thorsten/phpmyfaq antes de 3.1.8."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.8", "matchCriteriaId": "268E620F-3F05-4A1E-A49B-046B7CC8796C"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/abf52487422ce47195c8a80bd904a7af39f60297", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/a335c013-db75-4120-872c-42059c7100e8", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/abf52487422ce47195c8a80bd904a7af39f60297"}}