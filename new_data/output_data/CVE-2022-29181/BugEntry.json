{"buggy_code": ["# Nokogiri Changelog\n\nNokogiri follows [Semantic Versioning](https://semver.org/), please see the [README.md](README.md) for details.\n\n---\n\n## 1.14.0 / unreleased\n\n### Notes\n\n#### Faster, more reliable installation: Native Gem for ARM64 Linux\n\nThis version of Nokogiri ships full native gem support for the `aarch64-linux` platform, which should support AWS Graviton and other ARM Linux platforms. Please note that glibc >= 2.29 is required for aarch64-linux systems, see [Supported Platforms](https://nokogiri.org/#supported-platforms) for more information.\n\n\n#### Maven-managed JRuby dependencies\n\nThis version of Nokogiri uses [`jar-dependencies`](https://github.com/mkristian/jar-dependencies) to manage most of the vendored Java dependencies. `nokogiri -v` now outputs maven metadata for all Java dependencies, and `Nokogiri::VERSION_INFO` also contains this metadata. [[#2432](https://github.com/sparklemotion/nokogiri/issues/2432)]\n\n\n### Dependencies\n\n* [JRuby] Vendored Jing is updated from com.thaiopensource:jing:20091111 to nu.validator:jing:20200702VNU.\n* [JRuby] New dependency on Saxon-HE 9.6.0-4 (via nu.validator:jing:20200702VNU).\n\n\n### Fixed\n\n* [CRuby] UTF-16-encoded documents longer than ~4000 code points now serialize properly. Previously the serialized document was corrupted when it exceeded the length of libxml2's internal string buffer. [[#752](https://github.com/sparklemotion/nokogiri/issues/752)]\n* [HTML5] The Gumbo parser now correctly handles text at the end of `form` elements.\n\n\n### Improved\n\n* Compare `Encoding` objects rather than compare their names. This is a slight performance improvement and is future-proof. [[#2454](https://github.com/sparklemotion/nokogiri/issues/2454)] (Thanks, [@casperisfine](https://github.com/casperisfine)!)\n* Avoid compile-time conflict with system-installed `gumbo.h` on OpenBSD. [[#2464](https://github.com/sparklemotion/nokogiri/issues/2464)]\n* Remove calls to `vasprintf` in favor of platform-independent `rb_vsprintf`\n* Prefer `ruby_xmalloc` to `malloc` within the C extension. [[#2480](https://github.com/sparklemotion/nokogiri/issues/2480)] (Thanks, [@Garfield96](https://github.com/Garfield96)!)\n* Installation from source on systems missing libiconv will once again generate a helpful error message (broken since v1.11.0). [#2505]\n\n\n## 1.13.5 / 2022-05-04\n\n### Security\n\n* [CRuby] Vendored libxml2 is updated to address [CVE-2022-29824](https://nvd.nist.gov/vuln/detail/CVE-2022-29824). See [GHSA-cgx6-hpwq-fhv5](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-cgx6-hpwq-fhv5) for more information.\n\n\n### Dependencies\n\n* [CRuby] Vendored libxml2 is updated from v2.9.13 to [v2.9.14](https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.9.14).\n\n\n### Improvements\n\n* [CRuby] The libxml2 HTML parser no longer exhibits quadratic behavior when recovering some broken markup related to start-of-tag and bare `<` characters.\n\n\n### Changed\n\n* [CRuby] The libxml2 HTML parser in v2.9.14 recovers from some broken markup differently. Notably, the XML CDATA escape sequence `<![CDATA[` and incorrectly-opened comments will result in HTML text nodes starting with `&lt;!` instead of skipping the invalid tag. This behavior is a direct result of the [quadratic-behavior fix](https://gitlab.gnome.org/GNOME/libxml2/-/commit/798bdf1) noted above. The behavior of downstream sanitizers relying on this behavior will also change. Some tests describing the changed behavior are in [`test/html4/test_comments.rb`](https://github.com/sparklemotion/nokogiri/blob/3ed5bf2b5a367cb9dc6e329c5a1c512e1dd4565d/test/html4/test_comments.rb#L187-L204).\n\n\n## 1.13.4 / 2022-04-11\n\n### Security\n\n* Address [CVE-2022-24836](https://nvd.nist.gov/vuln/detail/CVE-2022-24836), a regular expression denial-of-service vulnerability. See [GHSA-crjr-9rc5-ghw8](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-crjr-9rc5-ghw8) for more information.\n* [CRuby] Vendored zlib is updated to address [CVE-2018-25032](https://nvd.nist.gov/vuln/detail/CVE-2018-25032). See [GHSA-v6gp-9mmm-c6p5](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-v6gp-9mmm-c6p5) for more information.\n* [JRuby] Vendored Xerces-J (`xerces:xercesImpl`) is updated to address [CVE-2022-23437](https://nvd.nist.gov/vuln/detail/CVE-2022-23437). See [GHSA-xxx9-3xcr-gjj3](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xxx9-3xcr-gjj3) for more information.\n* [JRuby] Vendored nekohtml (`org.cyberneko.html`) is updated to address [CVE-2022-24839](https://nvd.nist.gov/vuln/detail/CVE-2022-24839). See [GHSA-gx8x-g87m-h5q6](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-gx8x-g87m-h5q6) for more information.\n\n\n### Dependencies\n\n* [CRuby] Vendored zlib is updated from 1.2.11 to 1.2.12. (See [LICENSE-DEPENDENCIES.md](https://github.com/sparklemotion/nokogiri/blob/v1.13.x/LICENSE-DEPENDENCIES.md#platform-releases) for details on which packages redistribute this library.)\n* [JRuby] Vendored Xerces-J (`xerces:xercesImpl`) is updated from 2.12.0 to 2.12.2.\n* [JRuby] Vendored nekohtml (`org.cyberneko.html`) is updated from a fork of 1.9.21 to 1.9.22.noko2. This fork is now publicly developed at https://github.com/sparklemotion/nekohtml\n\n\n## 1.13.3 / 2022-02-21\n\n### Fixed\n\n* [CRuby] Revert a HTML4 parser bug in libxml 2.9.13 (introduced in Nokogiri v1.13.2). The bug causes libxml2's HTML4 parser to fail to recover when encountering a bare `<` character in some contexts. This version of Nokogiri restores the earlier behavior, which is to recover from the parse error and treat the `<` as normal character data (which will be serialized as `&lt;` in a text node). The bug (and the fix) is only relevant when the `RECOVER` parse option is set, as it is by default. [[#2461](https://github.com/sparklemotion/nokogiri/issues/2461)]\n\n\n## 1.13.2 / 2022-02-21\n\n### Security\n\n* [CRuby] Vendored libxml2 is updated from 2.9.12 to 2.9.13. This update addresses [CVE-2022-23308](https://nvd.nist.gov/vuln/detail/CVE-2022-23308).\n* [CRuby] Vendored libxslt is updated from 1.1.34 to 1.1.35. This update addresses [CVE-2021-30560](https://nvd.nist.gov/vuln/detail/CVE-2021-30560).\n\nPlease see [GHSA-fq42-c5rg-92c2](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-fq42-c5rg-92c2) for more information about these CVEs.\n\n\n### Dependencies\n\n* [CRuby] Vendored libxml2 is updated from 2.9.12 to 2.9.13. Full changelog is available at https://download.gnome.org/sources/libxml2/2.9/libxml2-2.9.13.news\n* [CRuby] Vendored libxslt is updated from 1.1.34 to 1.1.35. Full changelog is available at https://download.gnome.org/sources/libxslt/1.1/libxslt-1.1.35.news\n\n\n## 1.13.1 / 2022-01-13\n\n### Fixed\n\n* Fix `Nokogiri::XSLT.quote_params` regression in v1.13.0 that raised an exception when non-string stylesheet parameters were passed. Non-string parameters (e.g., integers and symbols) are now explicitly supported and both keys and values will be stringified with `#to_s`. [[#2418](https://github.com/sparklemotion/nokogiri/issues/2418)]\n* Fix CSS selector query regression in v1.13.0 that raised an `Nokogiri::XML::XPath::SyntaxError` when parsing XPath attributes mixed into the CSS query. Although this mash-up of XPath and CSS syntax previously worked unintentionally, it is now an officially supported feature and is documented as such. [[#2419](https://github.com/sparklemotion/nokogiri/issues/2419)]\n\n\n## 1.13.0 / 2022-01-06\n\n### Notes\n\n#### Ruby\n\nThis release introduces native gem support for Ruby 3.1. Please note that Windows users should use the `x64-mingw-ucrt` platform gem for Ruby 3.1, and `x64-mingw32` for Ruby 2.6&ndash;3.0 (see [RubyInstaller 3.1.0 release notes](https://rubyinstaller.org/2021/12/31/rubyinstaller-3.1.0-1-released.html)).\n\nThis release ends support for:\n\n* Ruby 2.5, for which [official support ended 2021-03-31](https://www.ruby-lang.org/en/downloads/branches/).\n* JRuby 9.2, which is a Ruby 2.5-compatible release.\n\n\n#### Faster, more reliable installation: Native Gem for ARM64 Linux\n\nThis version of Nokogiri ships experimental native gem support for the `aarch64-linux` platform, which should support AWS Graviton and other ARM Linux platforms. We don't yet have CI running for this platform, and so we're interested in hearing back from y'all whether this is working, and what problems you're seeing. Please send us feedback here: [Feedback: Have you used the `aarch64-linux` native gem?](https://github.com/sparklemotion/nokogiri/discussions/2359)\n\n\n#### Publishing\n\nThis version of Nokogiri opts-in to the [\"MFA required to publish\" setting](https://guides.rubygems.org/mfa-requirement-opt-in/) on Rubygems.org. This and all future Nokogiri gem files must be published to Rubygems by an account with multi-factor authentication enabled. This should provide some additional protection against supply-chain attacks.\n\nA related discussion about Trust exists at [#2357](https://github.com/sparklemotion/nokogiri/issues/2357) in which I invite you to participate if you have feelings or opinions on this topic.\n\n\n### Dependencies\n\n* [CRuby] Vendored libiconv is updated from 1.15 to 1.16. (Note that libiconv is only redistributed in the native windows and native darwin gems, see [`LICENSE-DEPENDENCIES.md`](LICENSE-DEPENDENCIES.md) for more information.) [[#2206](https://github.com/sparklemotion/nokogiri/issues/2206)]\n* [CRuby] Upgrade mini_portile2 dependency from `~> 2.6.1` to `~> 2.7.0`. (\"ruby\" platform gem only.)\n\n\n### Improved\n\n* `{XML,HTML4}::DocumentFragment` constructors all now take an optional parse options parameter or block (similar to Document constructors). [[#1692](https://github.com/sparklemotion/nokogiri/issues/1692)] (Thanks, [@JackMc](https://github.com/JackMc)!)\n* `Nokogiri::CSS.xpath_for` allows an `XPathVisitor` to be injected, for finer-grained control over how CSS queries are translated into XPath.\n* [CRuby] `XML::Reader#encoding` will return the encoding detected by the parser when it's not passed to the constructor. [[#980](https://github.com/sparklemotion/nokogiri/issues/980)]\n* [CRuby] Handle abruptly-closed HTML comments as recommended by WHATWG. (Thanks to [tehryanx](https://hackerone.com/tehryanx?type=user) for reporting!)\n* [CRuby] `Node#line` is no longer capped at 65535. libxml v2.9.0 and later support a new parse option, exposed as `Nokogiri::XML::ParseOptions::PARSE_BIG_LINES`, which is turned on by default in `ParseOptions::DEFAULT_{XML,XSLT,HTML,SCHEMA}` (Note that JRuby already supported large line numbers.) [[#1764](https://github.com/sparklemotion/nokogiri/issues/1764), [#1493](https://github.com/sparklemotion/nokogiri/issues/1493), [#1617](https://github.com/sparklemotion/nokogiri/issues/1617), [#1505](https://github.com/sparklemotion/nokogiri/issues/1505), [#1003](https://github.com/sparklemotion/nokogiri/issues/1003), [#533](https://github.com/sparklemotion/nokogiri/issues/533)]\n* [CRuby] If a cycle is introduced when reparenting a node (i.e., the node becomes its own ancestor), a `RuntimeError` is raised. libxml2 does no checking for this, which means cycles would otherwise result in infinite loops on subsequent operations. (Note that JRuby already did this.) [[#1912](https://github.com/sparklemotion/nokogiri/issues/1912)]\n* [CRuby] Source builds will download zlib and libiconv via HTTPS. (\"ruby\" platform gem only.) [[#2391](https://github.com/sparklemotion/nokogiri/issues/2391)] (Thanks, [@jmartin-r7](https://github.com/jmartin-r7)!)\n* [JRuby] `Node#line` behavior has been modified to return the line number of the node in the _final DOM structure_. This behavior is different from CRuby, which returns the node's position in the _input string_. Ideally the two implementations would be the same, but at least is now officially documented and tested. The real-world impact of this change is that the value returned in JRuby is greater by 1 to account for the XML prolog in the output. [[#2380](https://github.com/sparklemotion/nokogiri/issues/2380)] (Thanks, [@dabdine](https://github.com/dabdine)!)\n\n\n### Fixed\n\n* CSS queries on HTML5 documents now correctly match foreign elements (SVG, MathML) when namespaces are not specified in the query. [[#2376](https://github.com/sparklemotion/nokogiri/issues/2376)]\n* `XML::Builder` blocks restore context properly when exceptions are raised. [[#2372](https://github.com/sparklemotion/nokogiri/issues/2372)] (Thanks, [@ric2b](https://github.com/ric2b) and [@rinthedev](https://github.com/rinthedev)!)\n* The `Nokogiri::CSS::Parser` cache now uses the `XPathVisitor` configuration as part of the cache key, preventing incorrect cache results from being returned when multiple `XPathVisitor` options are being used.\n* Error recovery from in-context parsing (e.g., `Node#parse`) now always uses the correct `DocumentFragment` class. Previously `Nokogiri::HTML4::DocumentFragment` was always used, even for XML documents. [[#1158](https://github.com/sparklemotion/nokogiri/issues/1158)]\n* `DocumentFragment#>` now works properly, matching a CSS selector against only the fragment roots. [[#1857](https://github.com/sparklemotion/nokogiri/issues/1857)]\n* `XML::DocumentFragment#errors` now correctly contains any parsing errors encountered. Previously this was always empty. (Note that `HTML::DocumentFragment#errors` already did this.)\n* [CRuby] Fix memory leak in `Document#canonicalize` when inclusive namespaces are passed in. [[#2345](https://github.com/sparklemotion/nokogiri/issues/2345)]\n* [CRuby] Fix memory leak in `Document#canonicalize` when an argument type error is raised. [[#2345](https://github.com/sparklemotion/nokogiri/issues/2345)]\n* [CRuby] Fix memory leak in `EncodingHandler` where iconv handlers were not being cleaned up. [[#2345](https://github.com/sparklemotion/nokogiri/issues/2345)]\n* [CRuby] Fix memory leak in XPath custom handlers where string arguments were not being cleaned up. [[#2345](https://github.com/sparklemotion/nokogiri/issues/2345)]\n* [CRuby] Fix memory leak in `Reader#base_uri` where the string returned by libxml2 was not freed. [[#2347](https://github.com/sparklemotion/nokogiri/issues/2347)]\n* [JRuby] Deleting a `Namespace` from a `NodeSet` no longer modifies the `href` to be the default namespace URL.\n* [JRuby] Fix XHTML formatting of closing tags for non-container elements. [[#2355](https://github.com/sparklemotion/nokogiri/issues/2355)]\n\n\n### Deprecated\n\n* Passing a `Nokogiri::XML::Node` as the second parameter to `Node.new` is deprecated and will generate a warning. This parameter should be a kind of `Nokogiri::XML::Document`. This will become an error in a future version of Nokogiri. [[#975](https://github.com/sparklemotion/nokogiri/issues/975)]\n* `Nokogiri::CSS::Parser`, `Nokogiri::CSS::Tokenizer`, and `Nokogiri::CSS::Node` are now internal-only APIs that are no longer documented, and should not be considered stable. With the introduction of `XPathVisitor` injection into `Nokogiri::CSS.xpath_for` there should be no reason to rely on these internal APIs.\n* CSS-to-XPath utility classes `Nokogiri::CSS::XPathVisitorAlwaysUseBuiltins` and `XPathVisitorOptimallyUseBuiltins` are deprecated. Prefer `Nokogiri::CSS::XPathVisitor` with appropriate constructor arguments. These classes will be removed in a future version of Nokogiri.\n\n\n## 1.12.5 / 2021-09-27\n\n### Security\n\n[JRuby] Address CVE-2021-41098 ([GHSA-2rr5-8q37-2w7h](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-2rr5-8q37-2w7h)).\n\nIn Nokogiri v1.12.4 and earlier, on JRuby only, the SAX parsers resolve external entities (XXE) by default. This fix turns off entity-resolution-by-default in the JRuby SAX parsers to match the CRuby SAX parsers' behavior.\n\nCRuby users are not affected by this CVE.\n\n\n### Fixed\n\n* [CRuby] `Document#to_xhtml` properly serializes self-closing tags in libxml > 2.9.10. A behavior change introduced in libxml 2.9.11 resulted in emitting start and and tags (e.g., `<br></br>`) instead of a self-closing tag (e.g., `<br/>`) in previous Nokogiri versions. [[#2324](https://github.com/sparklemotion/nokogiri/issues/2324)]\n\n\n## 1.12.4 / 2021-08-29\n\n### Notable fix: Namespace inheritance\n\nNamespace behavior when reparenting nodes has historically been poorly specified and the behavior diverged between CRuby and JRuby. As a result, making this behavior consistent in v1.12.0 introduced a breaking change.\n\nThis patch release reverts the Builder behavior present in v1.12.0..v1.12.3 but keeps the Document behavior. This release also introduces a Document attribute to allow affected users to easily change this behavior for their legacy code without invasive changes.\n\n\n#### Compensating Feature in XML::Document\n\nThis release of Nokogiri introduces a new `Document` boolean attribute, `namespace_inheritance`, which controls whether children should inherit a namespace when they are reparented. `Nokogiri::XML:Document` defaults this attribute to `false` meaning \"do not inherit,\" thereby making explicit the behavior change introduced in v1.12.0.\n\nCRuby users who desire the pre-v1.12.0 behavior may set `document.namespace_inheritance = true` before reparenting nodes.\n\nSee https://nokogiri.org/rdoc/Nokogiri/XML/Document.html#namespace_inheritance-instance_method for example usage.\n\n\n#### Fix for XML::Builder\n\nHowever, recognizing that we want `Builder`-created children to inherit namespaces, Builder now will set `namespace_inheritance=true` on the underlying document for both JRuby and CRuby. This means that, on CRuby, the pre-v1.12.0 behavior is restored.\n\nUsers who want to turn this behavior off may pass a keyword argument to the Builder constructor like so:\n\n``` ruby\nNokogiri::XML::Builder.new(namespace_inheritance: false)\n```\n\nSee https://nokogiri.org/rdoc/Nokogiri/XML/Builder.html#label-Namespace+inheritance for example usage.\n\n\n#### Downstream gem maintainers\n\nNote that any downstream gems may want to specifically omit Nokogiri v1.12.0--v1.12.3 from their dependency specification if they rely on child namespace inheritance:\n\n``` ruby\nGem::Specification.new do |gem|\n  # ...\n  gem.add_runtime_dependency 'nokogiri', '!=1.12.3', '!=1.12.2', '!=1.12.1', '!=1.12.0'\n  # ...\nend\n```\n\n\n### Fixed\n\n* [JRuby] Fix NPE in Schema parsing when an imported resource doesn't have a `systemId`. [[#2296](https://github.com/sparklemotion/nokogiri/issues/2296)] (Thanks, [@pepijnve](https://github.com/pepijnve)!)\n\n\n## 1.12.3 / 2021-08-10\n\n### Fixed\n\n* [CRuby] Fix compilation of libgumbo on older systems with versions of GCC that give errors on C99-isms. Affected systems include RHEL6, RHEL7, and SLES12. [[#2302](https://github.com/sparklemotion/nokogiri/issues/2302)]\n\n\n## 1.12.2 / 2021-08-04\n\n### Fixed\n\n* [CRuby] Ensure that C extension files in non-native gem installations are loaded using `require` and rely on `$LOAD_PATH` instead of using `require_relative`. This issue only exists when deleting shared libraries that exist outside the extensions directory, something users occasionally do to conserve disk space. [[#2300](https://github.com/sparklemotion/nokogiri/issues/2300)]\n\n\n## 1.12.1 / 2021-08-03\n\n### Fixed\n\n* [CRuby] Fix compilation of libgumbo on BSD systems by avoiding GNU-isms. [[#2298](https://github.com/sparklemotion/nokogiri/issues/2298)]\n\n\n## 1.12.0 / 2021-08-02\n\n### Notable Addition: HTML5 Support (CRuby only)\n\n__HTML5 support__ has been added (to CRuby only) by merging [Nokogumbo](https://github.com/rubys/nokogumbo) into Nokogiri. The Nokogumbo public API has been preserved, so this functionality is available under the `Nokogiri::HTML5` namespace. [[#2204](https://github.com/sparklemotion/nokogiri/issues/2204)]\n\nPlease note that HTML5 support is not available for JRuby in this version. However, we feel it is important to think about JRuby and we hope to work on this in the future. If you're interested in helping with HTML5 support on JRuby, please reach out to the maintainers by commenting on issue [#2227](https://github.com/sparklemotion/nokogiri/issues/2227).\n\nMany thanks to Sam Ruby, Steve Checkoway, and Craig Barnes for creating and maintaining Nokogumbo and supporting the Gumbo HTML5 parser. They're now Nokogiri core contributors with all the powers and privileges pertaining thereto. \ud83d\ude4c\n\n\n### Notable Change: `Nokogiri::HTML4` module and namespace\n\n`Nokogiri::HTML` has been renamed to `Nokogiri::HTML4`, and `Nokogiri::HTML` is aliased to preserve backwards-compatibility. `Nokogiri::HTML` and `Nokogiri::HTML4` parse methods still use libxml2's (or NekoHTML's) HTML4 parser in the v1.12 release series. \n\nTake special note that if you rely on the class name of an object in your code, objects will now report a class of `Nokogiri::HTML4::Foo` where they previously reported `Nokogiri::HTML::Foo`. Instead of relying on the string returned by `Object#class`, prefer `Class#===` or `Object#is_a?` or `Object#instance_of?`.\n\nFuture releases of Nokogiri may deprecate `HTML` methods or otherwise change this behavior, so please start using `HTML4` in place of `HTML`.\n\n\n### Added\n\n* [CRuby] `Nokogiri::VERSION_INFO[\"libxslt\"][\"datetime_enabled\"]` is a new boolean value which describes whether libxslt (or, more properly, libexslt) has compiled-in datetime support. This generally going to be `true`, but some distros ship without this support (e.g., some mingw UCRT-based packages, see https://github.com/msys2/MINGW-packages/pull/8957). See [#2272](https://github.com/sparklemotion/nokogiri/issues/2272) for more details.\n\n\n### Changed\n\n* Introduce a new constant, `Nokogiri::XML::ParseOptions::DEFAULT_XSLT`, which adds the libxslt-preferred options of `NOENT | DTDLOAD | DTDATTR | NOCDATA` to `ParseOptions::DEFAULT_XML`.\n* `Nokogiri.XSLT` parses stylesheets using `ParseOptions::DEFAULT_XSLT`, which should make some edge-case XSL transformations match libxslt's default behavior. [[#1940](https://github.com/sparklemotion/nokogiri/issues/1940)]\n\n\n### Fixed\n\n* [CRuby] Namespaced attributes are handled properly when their parent node is reparented into another document. Previously, the namespace may have gotten dropped. [[#2228](https://github.com/sparklemotion/nokogiri/issues/2228)]\n* [CRuby] Reparented nodes no longer inherit their parent's namespace. Previously, a node without a namespace was forced to adopt its parent's namespace. [[#1712](https://github.com/sparklemotion/nokogiri/issues/1712), [#425](https://github.com/sparklemotion/nokogiri/issues/425)]\n\n\n### Improved\n\n* [CRuby] Speed up (slightly) the compile time of packaged libraries `libiconv`, `libxml2`, and `libxslt` by using autoconf's `--disable-dependency-tracking` option. (\"ruby\" platform gem only.)\n\n\n### Deprecated\n\n* Deprecating Nokogumbo's `Nokogiri::HTML5.get`. This method will be removed in a future version of Nokogiri.\n\n\n### Dependencies\n\n* [CRuby] Upgrade mini_portile2 dependency from `~> 2.5.0` to `~> 2.6.1`. (\"ruby\" platform gem only.)\n\n\n## 1.11.7 / 2021-06-02\n\n### Fixed\n\n* [CRuby] Backporting an upstream fix to XPath recursion depth limits which impacted some users of complex XPath queries. This issue is present in libxml 2.9.11 and 2.9.12. [[#2257](https://github.com/sparklemotion/nokogiri/issues/2257)]\n\n\n## 1.11.6 / 2021-05-26\n\n### Fixed\n\n* [CRuby] `DocumentFragment#path` now does proper error-checking to handle behavior introduced in libxml > 2.9.10. In v1.11.4 and v1.11.5, calling `DocumentFragment#path` could result in a segfault.\n\n\n## 1.11.5 / 2021-05-19\n\n### Fixed\n\n[Windows CRuby] Work around segfault at process exit on Windows when using libxml2 system DLLs.\n\nlibxml 2.9.12 introduced new behavior to avoid memory leaks when unloading libxml2 shared libraries (see [libxml/!66](https://gitlab.gnome.org/GNOME/libxml2/-/merge_requests/66)). Early testing caught this segfault on non-Windows platforms (see [#2059](https://github.com/sparklemotion/nokogiri/issues/2059) and [libxml@956534e](https://gitlab.gnome.org/GNOME/libxml2/-/commit/956534e02ef280795a187c16f6ac04e107f23c5d)) but it was incompletely fixed and is still an issue on Windows platforms that are using system DLLs.\n\nWe work around this by configuring libxml2 in this situation to use its default memory management functions. Note that if Nokogiri is not on Windows, or is not using shared system libraries, it will will continue to configure libxml2 to use Ruby's memory management functions. `Nokogiri::VERSION_INFO[\"libxml\"][\"memory_management\"]` will allow you to verify when the default memory management functions are being used. [[#2241](https://github.com/sparklemotion/nokogiri/issues/2241)]\n\n\n### Added\n\n`Nokogiri::VERSION_INFO[\"libxml\"]` now contains the key `\"memory_management\"` to declare whether libxml2 is using its `default` memory management functions, or whether it uses the memory management functions from `ruby`. See above for more details.\n\n\n## 1.11.4 / 2021-05-14\n\n### Security\n\n[CRuby] Vendored libxml2 upgraded to v2.9.12 which addresses:\n\n- [CVE-2019-20388](https://security.archlinux.org/CVE-2019-20388)\n- [CVE-2020-24977](https://security.archlinux.org/CVE-2020-24977)\n- [CVE-2021-3517](https://security.archlinux.org/CVE-2021-3517)\n- [CVE-2021-3518](https://security.archlinux.org/CVE-2021-3518)\n- [CVE-2021-3537](https://security.archlinux.org/CVE-2021-3537)\n- [CVE-2021-3541](https://security.archlinux.org/CVE-2021-3541)\n\nNote that two additional CVEs were addressed upstream but are not relevant to this release. [CVE-2021-3516](https://security.archlinux.org/CVE-2021-3516) via `xmllint` is not present in Nokogiri, and [CVE-2020-7595](https://security.archlinux.org/CVE-2020-7595) has been patched in Nokogiri since v1.10.8 (see [#1992](https://github.com/sparklemotion/nokogiri/issues/1992)).\n\nPlease see [nokogiri/GHSA-7rrm-v45f-jp64 ](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-7rrm-v45f-jp64) or [#2233](https://github.com/sparklemotion/nokogiri/issues/2233) for a more complete analysis of these CVEs and patches.\n\n\n### Dependencies\n\n* [CRuby] vendored libxml2 is updated from 2.9.10 to 2.9.12. (Note that 2.9.11 was skipped because it was superseded by 2.9.12 a few hours after its release.)\n\n\n## 1.11.3 / 2021-04-07\n\n### Fixed\n\n* [CRuby] Passing non-`Node` objects to `Document#root=` now raises an `ArgumentError` exception. Previously this likely segfaulted. [[#1900](https://github.com/sparklemotion/nokogiri/issues/1900)]\n* [JRuby] Passing non-`Node` objects to `Document#root=` now raises an `ArgumentError` exception. Previously this raised a `TypeError` exception.\n* [CRuby] arm64/aarch64 systems (like Apple's M1) can now compile libxml2 and libxslt from source (though we continue to strongly advise users to install the native gems for the best possible experience)\n\n\n## 1.11.2 / 2021-03-11\n\n### Fixed\n\n* [CRuby] `NodeSet` may now safely contain `Node` objects from multiple documents. Previously the GC lifecycle of the parent `Document` objects could lead to nodes being GCed while still in scope. [[#1952](https://github.com/sparklemotion/nokogiri/issues/1952#issuecomment-770856928)]\n* [CRuby] Patch libxml2 to avoid \"huge input lookup\" errors on large CDATA elements. (See upstream [GNOME/libxml2#200](https://gitlab.gnome.org/GNOME/libxml2/-/issues/200) and [GNOME/libxml2!100](https://gitlab.gnome.org/GNOME/libxml2/-/merge_requests/100).) [[#2132](https://github.com/sparklemotion/nokogiri/issues/2132)].\n* [CRuby+Windows] Enable Nokogumbo (and other downstream gems) to compile and link against `nokogiri.so` by including `LDFLAGS` in `Nokogiri::VERSION_INFO`. [[#2167](https://github.com/sparklemotion/nokogiri/issues/2167)]\n* [CRuby] `{XML,HTML}::Document.parse` now invokes `#initialize` exactly once. Previously `#initialize` was invoked twice on each object.\n* [JRuby] `{XML,HTML}::Document.parse` now invokes `#initialize` exactly once. Previously `#initialize` was not called, which was a problem for subclassing such as done by `Loofah`.\n\n\n### Improved\n\n* Reduce the number of object allocations needed when parsing an `HTML::DocumentFragment`. [[#2087](https://github.com/sparklemotion/nokogiri/issues/2087)] (Thanks, [@ashmaroli](https://github.com/ashmaroli)!)\n* [JRuby] Update the algorithm used to calculate `Node#line` to be wrong less-often. The underlying parser, Xerces, does not track line numbers, and so we've always used a hacky solution for this method. [[#1223](https://github.com/sparklemotion/nokogiri/issues/1223), [#2177](https://github.com/sparklemotion/nokogiri/issues/2177)]\n* Introduce `--enable-system-libraries` and `--disable-system-libraries` flags to `extconf.rb`. These flags provide the same functionality as `--use-system-libraries` and the `NOKOGIRI_USE_SYSTEM_LIBRARIES` environment variable, but are more idiomatic. [[#2193](https://github.com/sparklemotion/nokogiri/issues/2193)] (Thanks, [@eregon](https://github.com/eregon)!)\n* [TruffleRuby] `--disable-static` is now the default on TruffleRuby when the packaged libraries are used. This is more flexible and compiles faster. (Note, though, that the default on TR is still to use system libraries.) [[#2191](https://github.com/sparklemotion/nokogiri/issues/2191#issuecomment-780724627), [#2193](https://github.com/sparklemotion/nokogiri/issues/2193)] (Thanks, [@eregon](https://github.com/eregon)!)\n\n\n### Changed\n\n* `Nokogiri::XML::Path` is now a Module (previously it has been a Class). It has been acting solely as a Module since v1.0.0. See [8461c74](https://github.com/sparklemotion/nokogiri/commit/8461c74).\n\n\n## 1.11.1 / 2021-01-06\n\n### Fixed\n\n* [CRuby] If `libxml-ruby` is loaded before `nokogiri`, the SAX and Push parsers no longer call `libxml-ruby`'s handlers. Instead, they defensively override the libxml2 global handler before parsing. [[#2168](https://github.com/sparklemotion/nokogiri/issues/2168)]\n\n\n## 1.11.0 / 2021-01-03\n\n### Notes\n\n#### Faster, more reliable installation: Native Gems for Linux and OSX/Darwin\n\n\"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries. This results in **much faster installation** and **more reliable installation**, which as you probably know are the biggest headaches for Nokogiri users. \n\nWe've been shipping native Windows gems since 2009, but starting in v1.11.0 we are also shipping native gems for these platforms:\n\n- Linux: `x86-linux` and `x86_64-linux` -- including musl platforms like alpine\n- OSX/Darwin: `x86_64-darwin` and `arm64-darwin`\n\nWe'd appreciate your thoughts and feedback on this work at [#2075](https://github.com/sparklemotion/nokogiri/issues/2075).\n\n\n### Dependencies\n\n#### Ruby\n\nThis release introduces support for Ruby 2.7 and 3.0 in the precompiled native gems.\n\nThis release ends support for:\n\n* Ruby 2.3, for which [official support ended on 2019-03-31](https://www.ruby-lang.org/en/news/2019/03/31/support-of-ruby-2-3-has-ended/) [[#1886](https://github.com/sparklemotion/nokogiri/issues/1886)] (Thanks [@ashmaroli](https://github.com/ashmaroli)!)\n* Ruby 2.4, for which [official support ended on 2020-04-05](https://www.ruby-lang.org/en/news/2020/04/05/support-of-ruby-2-4-has-ended/)\n* JRuby 9.1, which is the Ruby 2.3-compatible release.\n\n\n#### Gems\n\n* Explicitly add racc as a runtime dependency. [[#1988](https://github.com/sparklemotion/nokogiri/issues/1988)] (Thanks, [@voxik](https://github.com/voxik)!)\n* [MRI] Upgrade mini_portile2 dependency from `~> 2.4.0` to `~> 2.5.0` [[#2005](https://github.com/sparklemotion/nokogiri/issues/2005)] (Thanks, [@alejandroperea](https://github.com/alejandroperea)!)\n\n\n### Security\n\nSee note below about CVE-2020-26247 in the \"Changed\" subsection entitled \"XML::Schema parsing treats input as untrusted by default\".\n\n\n### Added\n\n* Add Node methods for manipulating \"keyword attributes\" (for example, `class` and `rel`): `#kwattr_values`, `#kwattr_add`, `#kwattr_append`, and `#kwattr_remove`. [[#2000](https://github.com/sparklemotion/nokogiri/issues/2000)]\n* Add support for CSS queries `a:has(> b)`, `a:has(~ b)`, and `a:has(+ b)`. [[#688](https://github.com/sparklemotion/nokogiri/issues/688)] (Thanks, [@jonathanhefner](https://github.com/jonathanhefner)!)\n* Add `Node#value?` to better match expected semantics of a Hash-like object. [[#1838](https://github.com/sparklemotion/nokogiri/issues/1838), [#1840](https://github.com/sparklemotion/nokogiri/issues/1840)] (Thanks, [@MatzFan](https://github.com/MatzFan)!)\n* [CRuby] Add `Nokogiri::XML::Node#line=` for use by downstream libs like nokogumbo. [[#1918](https://github.com/sparklemotion/nokogiri/issues/1918)] (Thanks, [@stevecheckoway](https://github.com/stevecheckoway)!)\n* `nokogiri.gemspec` is back after a 10-year hiatus. We still prefer you use the official releases, but `main` is pretty stable these days, and YOLO.\n\n\n### Performance\n\n* [CRuby] The CSS `~=` operator and class selector `.` are about 2x faster. [[#2137](https://github.com/sparklemotion/nokogiri/issues/2137), [#2135](https://github.com/sparklemotion/nokogiri/issues/2135)]\n* [CRuby] Patch libxml2 to call `strlen` from `xmlStrlen` rather than the naive implementation, because `strlen` is generally optimized for the architecture. [[#2144](https://github.com/sparklemotion/nokogiri/issues/2144)] (Thanks, [@ilyazub](https://github.com/ilyazub)!)\n* Improve performance of some namespace operations. [[#1916](https://github.com/sparklemotion/nokogiri/issues/1916)] (Thanks, [@ashmaroli](https://github.com/ashmaroli)!)\n* Remove unnecessary array allocations from Node serialization methods [[#1911](https://github.com/sparklemotion/nokogiri/issues/1911)] (Thanks, [@ashmaroli](https://github.com/ashmaroli)!)\n* Avoid creation of unnecessary zero-length String objects. [[#1970](https://github.com/sparklemotion/nokogiri/issues/1970)] (Thanks, [@ashmaroli](https://github.com/ashmaroli)!)\n* Always compile libxml2 and libxslt with '-O2' [[#2022](https://github.com/sparklemotion/nokogiri/issues/2022), [#2100](https://github.com/sparklemotion/nokogiri/issues/2100)] (Thanks, [@ilyazub](https://github.com/ilyazub)!)\n* [JRuby] Lots of code cleanup and performance improvements. [[#1934](https://github.com/sparklemotion/nokogiri/issues/1934)] (Thanks, [@kares](https://github.com/kares)!)\n* [CRuby] `RelaxNG.from_document` no longer leaks memory. [[#2114](https://github.com/sparklemotion/nokogiri/issues/2114)]\n\n\n### Improved\n\n* [CRuby] Handle incorrectly-closed HTML comments as WHATWG recommends for browsers. [[#2058](https://github.com/sparklemotion/nokogiri/issues/2058)] (Thanks to HackerOne user [mayflower](https://hackerone.com/mayflower?type=user) for reporting this!)\n* `{HTML,XML}::Document#parse` now accept `Pathname` objects. Previously this worked only if the referenced file was less than 4096 bytes long; longer files resulted in undefined behavior because the `read` method would be repeatedly invoked. [[#1821](https://github.com/sparklemotion/nokogiri/issues/1821), [#2110](https://github.com/sparklemotion/nokogiri/issues/2110)] (Thanks, [@doriantaylor](https://github.com/doriantaylor) and [@phokz](https://github.com/phokz)!)\n* [CRuby] Nokogumbo builds faster because it can now use header files provided by Nokogiri. [[#1788](https://github.com/sparklemotion/nokogiri/issues/1788)] (Thanks, [@stevecheckoway](https://github.com/stevecheckoway)!)\n* Add `frozen_string_literal: true` magic comment to all `lib` files. [[#1745](https://github.com/sparklemotion/nokogiri/issues/1745)] (Thanks, [@oniofchaos](https://github.com/oniofchaos)!)\n* [JRuby] Clean up deprecated calls into JRuby. [[#2027](https://github.com/sparklemotion/nokogiri/issues/2027)] (Thanks, [@headius](https://github.com/headius)!)\n\n\n### Fixed\n\n* HTML Parsing in \"strict\" mode (i.e., the `RECOVER` parse option not set) now correctly raises a `XML::SyntaxError` exception. Previously the value of the `RECOVER` bit was being ignored by CRuby and was misinterpreted by JRuby. [[#2130](https://github.com/sparklemotion/nokogiri/issues/2130)]\n* The CSS `~=` operator now correctly handles non-space whitespace in the `class` attribute. commit e45dedd\n* The switch to turn off the CSS-to-XPath cache is now thread-local, rather than being shared mutable state. [[#1935](https://github.com/sparklemotion/nokogiri/issues/1935)]\n* The Node methods `add_previous_sibling`, `previous=`, `before`, `add_next_sibling`, `next=`, `after`, `replace`, and `swap` now correctly use their parent as the context node for parsing markup. These methods now also raise a `RuntimeError` if they are called on a node with no parent. [[nokogumbo#160](https://github.com/rubys/nokogumbo/issues/160)]\n* [JRuby] `XML::Schema` XSD validation errors are captured in `XML::Schema#errors`. These errors were previously ignored.\n* [JRuby] Standardize reading from IO like objects, including StringIO. [[#1888](https://github.com/sparklemotion/nokogiri/issues/1888), [#1897](https://github.com/sparklemotion/nokogiri/issues/1897)]\n* [JRuby] Fix how custom XPath function namespaces are inferred to be less naive. [[#1890](https://github.com/sparklemotion/nokogiri/issues/1890), [#2148](https://github.com/sparklemotion/nokogiri/issues/2148)]\n* [JRuby] Clarify exception message when custom XPath functions can't be resolved.\n* [JRuby] Comparison of Node to Document with `Node#<=>` now matches CRuby/libxml2 behavior.\n* [CRuby] Syntax errors are now correctly captured in `Document#errors` for short HTML documents. Previously the SAX parser used for encoding detection was clobbering libxml2's global error handler.\n* [CRuby] Fixed installation on AIX with respect to `vasprintf`. [[#1908](https://github.com/sparklemotion/nokogiri/issues/1908)]\n* [CRuby] On some platforms, avoid symbol name collision with glibc's `canonicalize`. [[#2105](https://github.com/sparklemotion/nokogiri/issues/2105)]\n* [Windows Visual C++] Fixed compiler warnings and errors. [[#2061](https://github.com/sparklemotion/nokogiri/issues/2061), [#2068](https://github.com/sparklemotion/nokogiri/issues/2068)]\n* [CRuby] Fixed Nokogumbo integration which broke in the v1.11.0 release candidates. [[#1788](https://github.com/sparklemotion/nokogiri/issues/1788)] (Thanks, [@stevecheckoway](https://github.com/stevecheckoway)!)\n* [JRuby] Fixed document encoding regression in v1.11.0 release candidates. [[#2080](https://github.com/sparklemotion/nokogiri/issues/2080), [#2083](https://github.com/sparklemotion/nokogiri/issues/2083)] (Thanks, [@thbar](https://github.com/thbar)!)\n\n\n### Removed\n\n* The internal method `Nokogiri::CSS::Parser.cache_on=` has been removed. Use `.set_cache` if you need to muck with the cache internals.\n* The class method `Nokogiri::CSS::Parser.parse` has been removed. This was originally deprecated in 2009 in 13db61b. Use `Nokogiri::CSS.parse` instead.\n\n\n### Changed\n\n#### `XML::Schema` input is now \"untrusted\" by default\n\nAddress [CVE-2020-26247](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vr8q-g5c7-m54m).\n\nIn Nokogiri versions <= 1.11.0.rc3, XML Schemas parsed by `Nokogiri::XML::Schema` were **trusted** by default, allowing external resources to be accessed over the network, potentially enabling XXE or SSRF attacks.\n\nThis behavior is counter to the security policy intended by Nokogiri maintainers, which is to treat all input as **untrusted** by default whenever possible.\n\nPlease note that this security fix was pushed into a new minor version, 1.11.x, rather than a patch release to the 1.10.x branch, because it is a breaking change for some schemas and the risk was assessed to be \"Low Severity\".\n\nMore information and instructions for enabling \"trusted input\" behavior in v1.11.0.rc4 and later is available at the [public advisory](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vr8q-g5c7-m54m).\n\n\n#### HTML parser now obeys the `strict` or `norecover` parsing option\n\n(Also noted above in the \"Fixed\" section) HTML Parsing in \"strict\" mode (i.e., the `RECOVER` parse option not set) now correctly raises a `XML::SyntaxError` exception. Previously the value of the `RECOVER` bit was being ignored by CRuby and was misinterpreted by JRuby.\n\nIf you're using the default parser options, you will be unaffected by this fix. If you're passing `strict` or `norecover` to your HTML parser call, you may be surprised to see that the parser now fails to recover and raises a `XML::SyntaxError` exception. Given the number of HTML documents on the internet that libxml2 would consider to be ill-formed, this is probably not what you want, and you can omit setting that parse option to restore the behavior that you have been relying upon.\n\nApologies to anyone inconvenienced by this breaking bugfix being present in a minor release, but I felt it was appropriate to introduce this fix because it's straightforward to fix any code that has been relying on this buggy behavior.\n\n\n#### `VersionInfo`, the output of `nokogiri -v`, and related constants\n\nThis release changes the metadata provided in `Nokogiri::VersionInfo` which also affects the output of `nokogiri -v`. Some related constants have also been changed. If you're using `VersionInfo` programmatically, or relying on constants related to underlying library versions, please read the detailed changes for `Nokogiri::VersionInfo` at [#2139](https://github.com/sparklemotion/nokogiri/issues/2139) and accept our apologies for the inconvenience.\n\n\n## 1.10.10 / 2020-07-06\n\n### Features\n\n* [MRI] Cross-built Windows gems now support Ruby 2.7 [[#2029](https://github.com/sparklemotion/nokogiri/issues/2029)]. Note that prior to this release, the v1.11.x prereleases provided this support.\n\n\n## 1.10.9 / 2020-03-01\n\n### Fixed\n\n* [MRI] Raise an exception when Nokogiri detects a specific libxml2 edge case involving blank Schema nodes wrapped by Ruby objects that would cause a segfault. Currently no fix is available upstream, so we're preventing a dangerous operation and informing users to code around it if possible. [[#1985](https://github.com/sparklemotion/nokogiri/issues/1985), [#2001](https://github.com/sparklemotion/nokogiri/issues/2001)]\n* [JRuby] Change `NodeSet#to_a` to return a RubyArray instead of Object, for compilation under JRuby 9.2.9 and later. [[#1968](https://github.com/sparklemotion/nokogiri/issues/1968), [#1969](https://github.com/sparklemotion/nokogiri/issues/1969)] (Thanks, [@headius](https://github.com/headius)!)\n\n\n## 1.10.8 / 2020-02-10\n\n### Security\n\n[MRI] Pulled in upstream patch from libxml that addresses CVE-2020-7595. Full details are available in [#1992](https://github.com/sparklemotion/nokogiri/issues/1992). Note that this patch is not yet (as of 2020-02-10) in an upstream release of libxml.\n\n\n## 1.10.7 / 2019-12-03\n\n### Fixed\n\n* [MRI] Ensure the patch applied in v1.10.6 works with GNU `patch`. [[#1954](https://github.com/sparklemotion/nokogiri/issues/1954)]\n\n\n## 1.10.6 / 2019-12-03\n\n### Fixed\n\n* [MRI] Fix FreeBSD installation of vendored libxml2. [[#1941](https://github.com/sparklemotion/nokogiri/issues/1941), [#1953](https://github.com/sparklemotion/nokogiri/issues/1953)] (Thanks, [@nurse](https://github.com/nurse)!)\n\n\n## 1.10.5 / 2019-10-31\n\n### Security\n\n[MRI] Vendored libxslt upgraded to v1.1.34 which addresses three CVEs for libxslt:\n\n* CVE-2019-13117\n* CVE-2019-13118\n* CVE-2019-18197\n* CVE-2019-19956\n\nMore details are available at [#1943](https://github.com/sparklemotion/nokogiri/issues/1943).\n\n\n### Dependencies\n\n* [MRI] vendored libxml2 is updated from 2.9.9 to 2.9.10\n* [MRI] vendored libxslt is updated from 1.1.33 to 1.1.34\n\n\n## 1.10.4 / 2019-08-11\n\n### Security\n\nAddress CVE-2019-5477 ([#1915](https://github.com/sparklemotion/nokogiri/issues/1915)).\n\nA command injection vulnerability in Nokogiri v1.10.3 and earlier allows commands to be executed in a subprocess by Ruby's `Kernel.open` method. Processes are vulnerable only if the undocumented method `Nokogiri::CSS::Tokenizer#load_file` is being passed untrusted user input.\n\nThis vulnerability appears in code generated by the Rexical gem versions v1.0.6 and earlier. Rexical is used by Nokogiri to generate lexical scanner code for parsing CSS queries. The underlying vulnerability was addressed in Rexical v1.0.7 and Nokogiri upgraded to this version of Rexical in Nokogiri v1.10.4.\n\nThis CVE's public notice is [#1915](https://github.com/sparklemotion/nokogiri/issues/1915)\n\n\n## 1.10.3 / 2019-04-22\n\n### Security\n\n[MRI] Pulled in upstream patch from libxslt that addresses CVE-2019-11068. Full details are available in [#1892](https://github.com/sparklemotion/nokogiri/issues/1892). Note that this patch is not yet (as of 2019-04-22) in an upstream release of libxslt.\n\n\n## 1.10.2 / 2019-03-24\n\n### Security\n\n* [MRI] Remove support from vendored libxml2 for future script macros. [[#1871](https://github.com/sparklemotion/nokogiri/issues/1871)]\n* [MRI] Remove support from vendored libxml2 for server-side includes within attributes. [[#1877](https://github.com/sparklemotion/nokogiri/issues/1877)]\n\n\n### Fixed\n\n* [JRuby] Fix node ownership in duplicated documents. [[#1060](https://github.com/sparklemotion/nokogiri/issues/1060)]\n* [JRuby] Rethrow exceptions caught by Java SAX handler. [[#1847](https://github.com/sparklemotion/nokogiri/issues/1847), [#1872](https://github.com/sparklemotion/nokogiri/issues/1872)] (Thanks, [@adjam](https://github.com/adjam)!)\n\n\n## 1.10.1 / 2019-01-13\n\n### Added\n\n* [MRI] During installation, handle Xcode 10's new library path. [[#1801](https://github.com/sparklemotion/nokogiri/issues/1801), [#1851](https://github.com/sparklemotion/nokogiri/issues/1851)] (Thanks, [@mlj](https://github.com/mlj) and [@deepj](https://github.com/deepj)!)\n* Avoid unnecessary creation of `Proc`s in many methods. [[#1776](https://github.com/sparklemotion/nokogiri/issues/1776)] (Thanks, [@chopraanmol1](https://github.com/chopraanmol1)!)\n\n\n### Fixed\n\n* CSS selector `:has()` now correctly matches against any descendant. Previously this selector matched against only direct children). [[#350](https://github.com/sparklemotion/nokogiri/issues/350)] (Thanks, [@Phrogz](https://github.com/Phrogz)!)\n* `NodeSet#attr` now returns `nil` if it's empty. Previously this raised a NoMethodError.\n* [MRI] XPath errors are no longer suppressed during `XSLT::Stylesheet#transform`. Previously these errors were suppressed which led to silent failures and a subsequent segfault. [[#1802](https://github.com/sparklemotion/nokogiri/issues/1802)]\n\n\n## 1.10.0 / 2019-01-04\n\n### Added\n\n* [MRI] Cross-built Windows gems now support Ruby 2.6 [[#1842](https://github.com/sparklemotion/nokogiri/issues/1842), [#1850](https://github.com/sparklemotion/nokogiri/issues/1850)]\n\n\n### Dependencies\n\n* This release ends support for Ruby 2.2, for which [official support ended on 2018-03-31](https://www.ruby-lang.org/en/news/2018/06/20/support-of-ruby-2-2-has-ended/) [[#1841](https://github.com/sparklemotion/nokogiri/issues/1841)]\n* This release ends support for JRuby 1.7, for which [official support ended on 2017-11-21](https://github.com/jruby/jruby/issues/4112) [[#1741](https://github.com/sparklemotion/nokogiri/issues/1741)]\n* [MRI] libxml2 is updated from 2.9.8 to 2.9.9\n* [MRI] libxslt is updated from 1.1.32 to 1.1.33\n\n\n## 1.9.1 / 2018-12-17\n\n### Fixed\n\n* Fix a bug introduced in v1.9.0 where `XML::DocumentFragment#dup` no longer returned an instance of the callee's class, instead always returning an `XML::DocumentFragment`. This notably broke any subclass of `XML::DocumentFragment` including `HTML::DocumentFragment` as well as the Loofah gem's `Loofah::HTML::DocumentFragment`. [[#1846](https://github.com/sparklemotion/nokogiri/issues/1846)]\n\n\n## 1.9.0 / 2018-12-17\n\n### Security\n\n* [JRuby] Upgrade Xerces dependency from 2.11.0 to 2.12.0 to address upstream vulnerability CVE-2012-0881 [[#1831](https://github.com/sparklemotion/nokogiri/issues/1831)] (Thanks [@grajagandev](https://github.com/grajagandev) for reporting.)\n\n\n### Improved\n\n* Decrease installation size by removing many unneeded files (e.g., `/test`) from the packaged gems. [[#1719](https://github.com/sparklemotion/nokogiri/issues/1719)] (Thanks, [@stevecrozz](https://github.com/stevecrozz)!)\n\n\n### Added\n\n* `XML::Attr#value=` allows HTML node attribute values to be set to either a blank string or an empty boolean attribute. [[#1800](https://github.com/sparklemotion/nokogiri/issues/1800)]\n* Introduce `XML::Node#wrap` which does what `XML::NodeSet#wrap` has always done, but for a single node. [[#1531](https://github.com/sparklemotion/nokogiri/issues/1531)] (Thanks, [@ethirajsrinivasan](https://github.com/ethirajsrinivasan)!)\n* [MRI] Improve installation experience on macOS High Sierra (Darwin). [[#1812](https://github.com/sparklemotion/nokogiri/issues/1812), [#1813](https://github.com/sparklemotion/nokogiri/issues/1813)] (Thanks, [@gpakosz](https://github.com/gpakosz) and [@nurse](https://github.com/nurse)!)\n* [MRI] `Node#dup` supports copying a node directly to a new document. See the method documentation for details.\n* [MRI] `DocumentFragment#dup` is now more memory-efficient, avoiding making unnecessary copies. [[#1063](https://github.com/sparklemotion/nokogiri/issues/1063)]\n* [JRuby] `NodeSet` has been rewritten to improve performance! [[#1795](https://github.com/sparklemotion/nokogiri/issues/1795)]\n\n\n### Fixed\n\n* `NodeSet#each` now returns `self` instead of zero. [[#1822](https://github.com/sparklemotion/nokogiri/issues/1822)] (Thanks, [@olehif](https://github.com/olehif)!)\n* [MRI] Address a memory leak when using `XML::Builder` to create nodes with namespaces. [[#1810](https://github.com/sparklemotion/nokogiri/issues/1810)]\n* [MRI] Address a memory leak when unparenting a DTD. [[#1784](https://github.com/sparklemotion/nokogiri/issues/1784)] (Thanks, [@stevecheckoway](https://github.com/stevecheckoway)!)\n* [MRI] Use `RbConfig::CONFIG` instead of `::MAKEFILE_CONFIG` to fix installations that use Makefile macros. [[#1820](https://github.com/sparklemotion/nokogiri/issues/1820)] (Thanks, [@nobu](https://github.com/nobu)!)\n* [JRuby] Decrease large memory usage when making nested XPath queries. [[#1749](https://github.com/sparklemotion/nokogiri/issues/1749)]\n* [JRuby] Fix failing tests on JRuby 9.2.x\n* [JRuby] Fix default namespaces in nodes reparented into a different document [[#1774](https://github.com/sparklemotion/nokogiri/issues/1774)]\n* [JRuby] Fix support for Java 9. [[#1759](https://github.com/sparklemotion/nokogiri/issues/1759)] (Thanks, [@Taywee](https://github.com/Taywee)!)\n\n\n### Dependencies\n\n* [MRI] Upgrade mini_portile2 dependency from `~> 2.3.0` to `~> 2.4.0`\n\n\n## 1.8.5 / 2018-10-04\n\n### Security\n\n[MRI] Pulled in upstream patches from libxml2 that address CVE-2018-14404 and CVE-2018-14567. Full details are available in [#1785](https://github.com/sparklemotion/nokogiri/issues/1785). Note that these patches are not yet (as of 2018-10-04) in an upstream release of libxml2.\n\n\n### Fixed\n\n* [MRI] Fix regression in installation when building against system libraries, where some systems would not be able to find libxml2 or libxslt when present. (Regression introduced in v1.8.3.) [[#1722](https://github.com/sparklemotion/nokogiri/issues/1722)]\n* [JRuby] Fix node reparenting when the destination doc is empty. [[#1773](https://github.com/sparklemotion/nokogiri/issues/1773)]\n\n\n## 1.8.4 / 2018-07-03\n\n### Fixed\n\n* [MRI] Fix memory leak when creating nodes with namespaces. (Introduced in v1.5.7) [[#1771](https://github.com/sparklemotion/nokogiri/issues/1771)]\n\n\n## 1.8.3 / 2018-06-16\n\n### Security\n\n[MRI] Behavior in libxml2 has been reverted which caused CVE-2018-8048 (loofah gem), CVE-2018-3740 (sanitize gem), and CVE-2018-3741 (rails-html-sanitizer gem). The commit in question is here:\n\n> https://github.com/GNOME/libxml2/commit/960f0e2\n\nand more information is available about this commit and its impact here:\n\n> https://github.com/flavorjones/loofah/issues/144\n\nThis release simply reverts the libxml2 commit in question to protect users of Nokogiri's vendored libraries from similar vulnerabilities.\n\nIf you're offended by what happened here, I'd kindly ask that you comment on the upstream bug report here:\n\n> https://bugzilla.gnome.org/show_bug.cgi?id=769760\n\n\n### More Security\n\n[MRI] Vendored libxml2 upgraded to v2.9.8 which addresses CVE-2016-9318 [[#1582](https://github.com/sparklemotion/nokogiri/issues/1582)].\n\n\n### Dependencies\n\n* [MRI] libxml2 is updated from 2.9.7 to 2.9.8\n\n\n### Added\n\n* `Node#classes`, `#add_class`, `#append_class`, and `#remove_class` are added.\n* `NodeSet#append_class` is added.\n* `NodeSet#remove_attribute` is a new alias for `NodeSet#remove_attr`.\n* `NodeSet#each` now returns an `Enumerator` when no block is passed (Thanks, [@park53kr](https://github.com/park53kr)!)\n* [JRuby] General improvements in JRuby implementation (Thanks, [@kares](https://github.com/kares)!)\n\n\n### Fixed\n\n* CSS attribute selectors now gracefully handle queries using integers. [[#711](https://github.com/sparklemotion/nokogiri/issues/711)]\n* Handle ASCII-8BIT encoding on fragment input [[#553](https://github.com/sparklemotion/nokogiri/issues/553)]\n* Handle non-string return values within `Reader` [[#898](https://github.com/sparklemotion/nokogiri/issues/898)]\n* [JRuby] Allow `Node#replace` to insert Comment and CDATA nodes. [[#1666](https://github.com/sparklemotion/nokogiri/issues/1666)]\n* [JRuby] Stability and speed improvements to `Node`, `Sax::PushParser`, and the JRuby implementation [[#1708](https://github.com/sparklemotion/nokogiri/issues/1708), [#1710](https://github.com/sparklemotion/nokogiri/issues/1710), [#1501](https://github.com/sparklemotion/nokogiri/issues/1501)]\n\n\n## 1.8.2 / 2018-01-29\n\n### Security\n\n[MRI] The update of vendored libxml2 from 2.9.5 to 2.9.7 addresses at least one published vulnerability, CVE-2017-15412. [[#1714](https://github.com/sparklemotion/nokogiri/issues/1714) has complete details]\n\n\n### Dependencies\n\n* [MRI] libxml2 is updated from 2.9.5 to 2.9.7\n* [MRI] libxslt is updated from 1.1.30 to 1.1.32\n\n\n### Added\n\n* [MRI] OpenBSD installation should be a bit easier now. [[#1685](https://github.com/sparklemotion/nokogiri/issues/1685)] (Thanks, [@jeremyevans](https://github.com/jeremyevans)!)\n* [MRI] Cross-built Windows gems now support Ruby 2.5\n\n\n### Fixed\n\n* `Node#serialize` once again returns UTF-8-encoded strings. [[#1659](https://github.com/sparklemotion/nokogiri/issues/1659)]\n* [JRuby] made SAX parsing of characters consistent with C implementation [[#1676](https://github.com/sparklemotion/nokogiri/issues/1676)] (Thanks, [[@andrew](https://github.com/andrew)-aladev](https://github.com/andrew-aladev)!)\n* [MRI] Predefined entities, when inspected, no longer cause a segfault. [[#1238](https://github.com/sparklemotion/nokogiri/issues/1238)]\n\n\n## 1.8.1 / 2017-09-19\n\n### Dependencies\n\n* [MRI] libxml2 is updated from 2.9.4 to 2.9.5.\n* [MRI] libxslt is updated from 1.1.29 to 1.1.30.\n* [MRI] optional dependency on the pkg-config gem has had its constraint loosened to `~> 1.1` (from `~> 1.1.7`). [[#1660](https://github.com/sparklemotion/nokogiri/issues/1660)]\n* [MRI] Upgrade mini_portile2 dependency from `~> 2.2.0` to `~> 2.3.0`, which will validate checksums on the vendored libxml2 and libxslt tarballs before using them.\n\n\n### Fixed\n\n* `NodeSet#first` with an integer argument longer than the length of the `NodeSet` now correctly clamps the length of the returned `NodeSet` to the original length. [[#1650](https://github.com/sparklemotion/nokogiri/issues/1650)] (Thanks, [@Derenge](https://github.com/Derenge)!)\n* [MRI] Ensure CData.new raises TypeError if the `content` argument is not implicitly convertible into a string. [[#1669](https://github.com/sparklemotion/nokogiri/issues/1669)]\n\n\n## 1.8.0 / 2017-06-04\n\n### Dependencies\n\nThis release ends support for Ruby 2.1 on Windows in the `x86-mingw32` and `x64-mingw32` platform gems (containing pre-compiled DLLs). Official support ended for Ruby 2.1 on 2017-04-01.\n\nPlease note that this deprecation note only applies to the precompiled Windows gems. Ruby 2.1 continues to be supported (for now) in the default gem when compiled on installation.\n\n\n### Dependencies\n\n* [Windows] Upgrade iconv from 1.14 to 1.15 (unless --use-system-libraries)\n* [Windows] Upgrade zlib from 1.2.8 to 1.2.11 (unless --use-system-libraries)\n* [MRI] Upgrade rake-compiler dependency from 0.9.2 to 1.0.3\n* [MRI] Upgrade mini-portile2 dependency from `~> 2.1.0` to `~> 2.2.0`\n* [JRuby] Removed support for `jruby --1.8` code paths. [[#1607](https://github.com/sparklemotion/nokogiri/issues/1607)] (Thanks, [@kares](https://github.com/kares)!)\n* [MRI Windows] Retrieve zlib source from http://zlib.net/fossils to avoid deprecation issues going forward. See [#1632](https://github.com/sparklemotion/nokogiri/issues/1632) for details around this problem.\n\n### Added\n\n* `NodeSet#clone` is now an alias for `NodeSet#dup` [[#1503](https://github.com/sparklemotion/nokogiri/issues/1503)] (Thanks, [@stephankaag](https://github.com/stephankaag)!)\n* Allow Processing Instructions and Comments as children of a document root. [[#1033](https://github.com/sparklemotion/nokogiri/issues/1033)] (Thanks, [@windwiny](https://github.com/windwiny)!)\n* [MRI] `PushParser#replace_entities` and `#replace_entities=` will control whether entities are replaced or not. [[#1017](https://github.com/sparklemotion/nokogiri/issues/1017)] (Thanks, [@spraints](https://github.com/spraints)!)\n* [MRI] `SyntaxError#to_s` now includes line number, column number, and log level if made available by the parser. [[#1304](https://github.com/sparklemotion/nokogiri/issues/1304), [#1637](https://github.com/sparklemotion/nokogiri/issues/1637)] (Thanks, [@spk](https://github.com/spk) and [@ccarruitero](https://github.com/ccarruitero)!)\n* [MRI] Cross-built Windows gems now support Ruby 2.4\n* [MRI] Support for frozen string literals. [[#1413](https://github.com/sparklemotion/nokogiri/issues/1413)]\n* [MRI] Support for installing Nokogiri on a machine in FIPS-enabled mode [[#1544](https://github.com/sparklemotion/nokogiri/issues/1544)]\n* [MRI] Vendored libraries are verified with SHA-256 hashes (formerly some MD5 hashes were used) [[#1544](https://github.com/sparklemotion/nokogiri/issues/1544)]\n* [JRuby] (performance) remove unnecessary synchronization of class-cache [[#1563](https://github.com/sparklemotion/nokogiri/issues/1563)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] (performance) remove unnecessary cloning of objects in XPath searches [[#1563](https://github.com/sparklemotion/nokogiri/issues/1563)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] (performance) more performance improvements, particularly in XPath, Reader, XmlNode, and XmlNodeSet [[#1597](https://github.com/sparklemotion/nokogiri/issues/1597)] (Thanks, [@kares](https://github.com/kares)!)\n\n\n### Fixed\n\n* `HTML::SAX::Parser#parse_io` now correctly parses HTML and not XML [[#1577](https://github.com/sparklemotion/nokogiri/issues/1577)] (Thanks for the test case, [@gregors](https://github.com/gregors)!)\n* Support installation on systems with a `lib64` site config. [[#1562](https://github.com/sparklemotion/nokogiri/issues/1562)]\n* [MRI] on OpenBSD, do not require gcc if using system libraries [[#1515](https://github.com/sparklemotion/nokogiri/issues/1515)] (Thanks, [@jeremyevans](https://github.com/jeremyevans)!)\n* [MRI] `XML::Attr.new` checks type of Document arg to prevent segfaults. [[#1477](https://github.com/sparklemotion/nokogiri/issues/1477)]\n* [MRI] Prefer xmlCharStrdup (and friends) to strdup (and friends), which can cause problems on some platforms. [[#1517](https://github.com/sparklemotion/nokogiri/issues/1517)] (Thanks, [@jeremy](https://github.com/jeremy)!)\n* [JRuby] correctly append a text node before another text node [[#1318](https://github.com/sparklemotion/nokogiri/issues/1318)] (Thanks, [@jkraemer](https://github.com/jkraemer)!)\n* [JRuby] custom xpath functions returning an integer now work correctly [[#1595](https://github.com/sparklemotion/nokogiri/issues/1595)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] serializing (`#to_html`, `#to_s`, et al) a document with explicit encoding now works correctly. [[#1281](https://github.com/sparklemotion/nokogiri/issues/1281), [#1440](https://github.com/sparklemotion/nokogiri/issues/1440)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] `XML::Reader` now returns parse errors [[#1586](https://github.com/sparklemotion/nokogiri/issues/1586)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] Empty `NodeSet`s are now decorated properly. [[#1319](https://github.com/sparklemotion/nokogiri/issues/1319)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] Merged nodes no longer results in Java exceptions during XPath queries. [[#1320](https://github.com/sparklemotion/nokogiri/issues/1320)] (Thanks, [@kares](https://github.com/kares)!)\n\n\n## 1.7.2 / 2017-05-09\n\n### Security\n\n[MRI] Upstream libxslt patches are applied to the vendored libxslt 1.1.29 which address CVE-2017-5029 and CVE-2016-4738.\n\nFor more information:\n\n* [#1634](https://github.com/sparklemotion/nokogiri/issues/1634)\n* http://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-5029.html\n* http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4738.html\n\n\n## 1.7.1 / 2017-03-19\n\n### Security\n\n[MRI] Upstream libxml2 patches are applied to the vendored libxml 2.9.4 which address CVE-2016-4658 and CVE-2016-5131.\n\nFor more information:\n\n* [#1615](https://github.com/sparklemotion/nokogiri/issues/1615)\n* http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4658.html\n* http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-5131.html\n\n\n## 1.7.0.1 / 2017-01-04\n\n### Fixed\n\n* Fix OpenBSD support. ([#1569](https://github.com/sparklemotion/nokogiri/issues/1569)) (related to [#1543](https://github.com/sparklemotion/nokogiri/issues/1543))\n\n\n## 1.7.0 / 2016-12-26\n\n### Added\n\n* Remove deprecation warnings in Ruby 2.4.0 ([#1545](https://github.com/sparklemotion/nokogiri/issues/1545)) (Thanks, [@matthewd](https://github.com/matthewd)!)\n* Support egcc compiler on OpenBSD ([#1543](https://github.com/sparklemotion/nokogiri/issues/1543)) (Thanks, [@frenkel](https://github.com/frenkel) and [@knu](https://github.com/knu)!)\n\n\n### Dependencies\n\nThis release ends support for:\n\n* Ruby 1.9.2, for which official support ended on 2014-07-31\n* Ruby 1.9.3, for which official support ended on 2015-02-23\n* Ruby 2.0.0, for which official support ended on 2016-02-24\n* MacRuby, which hasn't been actively supported since 2015-01-13 (see https://github.com/MacRuby/MacRuby/commit/f76b9d6e99c18236db617e8aceb12c27d593a483)\n\n\n## 1.6.8.1 / 2016-10-03\n\n### Dependencies\n\nRemoves required dependency on the `pkg-config` gem. This dependency\nwas introduced in v1.6.8 and, because it's distributed under LGPL, was\nobjectionable to many Nokogiri users ([#1488](https://github.com/sparklemotion/nokogiri/issues/1488), [#1496](https://github.com/sparklemotion/nokogiri/issues/1496)).\n\nThis version makes `pkg-config` an optional dependency. If it's\ninstalled, it's used; but otherwise Nokogiri will attempt to work\naround its absence.\n\n\n## 1.6.8 / 2016-06-06\n\n### Security\n\n[MRI] Bundled libxml2 is upgraded to 2.9.4, which fixes many security issues. Many of these had previously been patched in the vendored libxml 2.9.2 in the 1.6.7.x branch, but some are newer.\n\nSee these libxml2 email posts for more:\n\n* https://mail.gnome.org/archives/xml/2015-November/msg00012.html\n* https://mail.gnome.org/archives/xml/2016-May/msg00023.html\n\nFor a more detailed analysis, you may care to read Canonical's take on these security issues:\n\n* http://www.ubuntu.com/usn/usn-2994-1\n\n\n[MRI] Bundled libxslt is upgraded to 1.1.29, which fixes a security issue as well as many long-known outstanding bugs, some features, some portability improvements, and general cleanup.\n\nSee this libxslt email post for more:\n\n* https://mail.gnome.org/archives/xslt/2016-May/msg00004.html\n\n\n### Added\n\nSeveral changes were made to improve performance:\n\n* [MRI] Simplify `NodeSet#to_a` with a minor speed-up. ([#1397](https://github.com/sparklemotion/nokogiri/issues/1397))\n* `XML::Node#ancestors` optimization. ([#1297](https://github.com/sparklemotion/nokogiri/issues/1297)) (Thanks, Bruno Sutic!)\n* Use `Symbol#to_proc` where we weren't previously. ([#1296](https://github.com/sparklemotion/nokogiri/issues/1296)) (Thanks, Bruno Sutic!)\n* `XML::DTD#each` uses implicit block calls. (Thanks, [@glaucocustodio](https://github.com/glaucocustodio)!)\n* Fall back to the `pkg-config` gem if we're having trouble finding the system libxml2. This should help many FreeBSD users. ([#1417](https://github.com/sparklemotion/nokogiri/issues/1417))\n* Set document encoding appropriately even on blank document. ([#1043](https://github.com/sparklemotion/nokogiri/issues/1043)) (Thanks, [@batter](https://github.com/batter)!)\n\n\n### Fixed\n\n* [JRuby] fix slow add_child ([#692](https://github.com/sparklemotion/nokogiri/issues/692))\n* [JRuby] fix load errors when deploying to JRuby/Torquebox ([#1114](https://github.com/sparklemotion/nokogiri/issues/1114)) (Thanks, [@atambo](https://github.com/atambo) and [@jvshahid](https://github.com/jvshahid)!)\n* [JRuby] fix NPE when inspecting nodes returned by `NodeSet#drop` ([#1042](https://github.com/sparklemotion/nokogiri/issues/1042)) (Thanks, [@mkristian](https://github.com/mkristian)!)\n* [JRuby] fix nil attriubte node's namespace in reader ([#1327](https://github.com/sparklemotion/nokogiri/issues/1327)) (Thanks, [@codekitchen](https://github.com/codekitchen)!)\n* [JRuby] fix Nokogiri munging unicode characters that require more than 2 bytes ([#1113](https://github.com/sparklemotion/nokogiri/issues/1113)) (Thanks, [@mkristian](https://github.com/mkristian)!)\n* [JRuby] allow unlinking an unparented node ([#1112](https://github.com/sparklemotion/nokogiri/issues/1112), [#1152](https://github.com/sparklemotion/nokogiri/issues/1152)) (Thanks, [@esse](https://github.com/esse)!)\n* [JRuby] allow Fragment parsing on a frozen string ([#444](https://github.com/sparklemotion/nokogiri/issues/444), [#1077](https://github.com/sparklemotion/nokogiri/issues/1077))\n* [JRuby] HTML `style` tags are no longer encoded ([#1316](https://github.com/sparklemotion/nokogiri/issues/1316)) (Thanks, [@tbeauvais](https://github.com/tbeauvais)!)\n* [MRI] fix assertion failure while accessing attribute node's namespace in reader ([#843](https://github.com/sparklemotion/nokogiri/issues/843)) (Thanks, [@2potatocakes](https://github.com/2potatocakes)!)\n* [MRI] fix issue with GCing namespace nodes returned in an xpath query. ([#1155](https://github.com/sparklemotion/nokogiri/issues/1155))\n* [MRI] Ensure C strings are null-terminated. ([#1381](https://github.com/sparklemotion/nokogiri/issues/1381))\n* [MRI] Ensure Rubygems is loaded before using mini_portile2 at installation. ([#1393](https://github.com/sparklemotion/nokogiri/issues/1393), [#1411](https://github.com/sparklemotion/nokogiri/issues/1411)) (Thanks, [@JonRowe](https://github.com/JonRowe)!)\n* [MRI] Handling another edge case where the `libxml-ruby` gem's global callbacks were smashing the heap. ([#1426](https://github.com/sparklemotion/nokogiri/issues/1426)). (Thanks to [@bbergstrom](https://github.com/bbergstrom) for providing an isolated test case!)\n* [MRI] Ensure encodings are passed to `Sax::Parser` xmldecl callback. ([#844](https://github.com/sparklemotion/nokogiri/issues/844))\n* [MRI] Ensure default ns prefix is applied correctly when reparenting nodes to another document. ([#391](https://github.com/sparklemotion/nokogiri/issues/391)) (Thanks, [@ylecuyer](https://github.com/ylecuyer)!)\n* [MRI] Ensure Reader handles non-existent attributes as expected. ([#1254](https://github.com/sparklemotion/nokogiri/issues/1254)) (Thanks, [@ccutrer](https://github.com/ccutrer)!)\n* [MRI] Cleanup around namespace handling when reparenting nodes. ([#1332](https://github.com/sparklemotion/nokogiri/issues/1332), [#1333](https://github.com/sparklemotion/nokogiri/issues/1333), [#1444](https://github.com/sparklemotion/nokogiri/issues/1444)) (Thanks, [@cuttrer](https://github.com/cuttrer) and [@bradleybeddoes](https://github.com/bradleybeddoes)!)\n* unescape special characters in CSS queries ([#1303](https://github.com/sparklemotion/nokogiri/issues/1303)) (Thanks, [@twalpole](https://github.com/twalpole)!)\n* consistently handle empty documents ([#1349](https://github.com/sparklemotion/nokogiri/issues/1349))\n* Update to mini_portile2 2.1.0 to address whitespace-handling during patching. ([#1402](https://github.com/sparklemotion/nokogiri/issues/1402))\n* Fix encoding of xml node namespaces.\n* Work around issue installing Nokogiri on overlayfs (commonly used in Docker containers). ([#1370](https://github.com/sparklemotion/nokogiri/issues/1370), [#1405](https://github.com/sparklemotion/nokogiri/issues/1405))\n\n\n\n### Notes\n\n* Removed legacy code remaining from Ruby 1.8.x support.\n* Removed legacy code remaining from REE support.\n* Removing hacky workarounds for bugs in some older versions of libxml2.\n* Handling C strings in a forward-compatible manner, see https://github.com/ruby/ruby/blob/v2_2_0/NEWS#L319\n\n\n## 1.6.7.2 / 2016-01-20\n\nThis version pulls in several upstream patches to the vendored libxml2 and libxslt to address:\n\n* CVE-2015-7499\n\nUbuntu classifies this as \"Priority: Low\", RedHat classifies this as \"Impact: Moderate\", and NIST classifies this as \"Severity: 5.0 (MEDIUM)\".\n\nMITRE record is https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7499\n\n\n## 1.6.7.1 / 2015-12-16\n\nThis version pulls in several upstream patches to the vendored libxml2 and libxslt to address:\n\n* CVE-2015-5312\n* CVE-2015-7497\n* CVE-2015-7498\n* CVE-2015-7499\n* CVE-2015-7500\n* CVE-2015-8241\n* CVE-2015-8242\n* CVE-2015-8317\n\nSee also http://www.ubuntu.com/usn/usn-2834-1/\n\n\n## 1.6.7 / 2015-11-29\n\n### Added\n\nThis version supports native builds on Windows using the RubyInstaller\nDevKit. It also supports Ruby 2.2.x on Windows, as well as making\nseveral other improvements to the installation process on various\nplatforms.\n\n### Security\n\nThis version also includes the security patches already applied in\nv1.6.6.3 and v1.6.6.4 to the vendored libxml2 and libxslt source.\nSee [#1374](https://github.com/sparklemotion/nokogiri/issues/1374) and [#1376](https://github.com/sparklemotion/nokogiri/issues/1376) for details.\n\n### Added\n\n* Cross-built gems now have a proper ruby version requirement. ([#1266](https://github.com/sparklemotion/nokogiri/issues/1266))\n* Ruby 2.2.x is supported on Windows.\n* Native build is supported on Windows.\n* [MRI] libxml2 and libxslt `config.guess` files brought up to date. ([#1326](https://github.com/sparklemotion/nokogiri/issues/1326)) (Thanks, [[@hernan](https://github.com/hernan)-erasmo](https://github.com/hernan-erasmo)!)\n* [JRuby] fix error in validating files with jruby ([#1355](https://github.com/sparklemotion/nokogiri/issues/1355), [#1361](https://github.com/sparklemotion/nokogiri/issues/1361)) (Thanks, [@twalpole](https://github.com/twalpole)!)\n* [MRI, OSX] Patch to handle nonstandard location of `iconv.h`. ([#1206](https://github.com/sparklemotion/nokogiri/issues/1206), [#1210](https://github.com/sparklemotion/nokogiri/issues/1210), [#1218](https://github.com/sparklemotion/nokogiri/issues/1218), [#1345](https://github.com/sparklemotion/nokogiri/issues/1345)) (Thanks, [@neonichu](https://github.com/neonichu)!)\n\n### Fixed\n\n* [JRuby] reset the namespace cache when replacing the document's innerHtml ([#1265](https://github.com/sparklemotion/nokogiri/issues/1265)) (Thanks, [@mkristian](https://github.com/mkristian)!)\n* [JRuby] `Document#parse` should support IO objects that respond to `#read`. ([#1124](https://github.com/sparklemotion/nokogiri/issues/1124)) (Thanks, Jake Byman!)\n* [MRI] Duplicate-id errors when setting the `id` attribute on HTML documents are now silenced. ([#1262](https://github.com/sparklemotion/nokogiri/issues/1262))\n* [JRuby] SAX parser cuts texts in pieces when square brackets exist. ([#1261](https://github.com/sparklemotion/nokogiri/issues/1261))\n* [JRuby] Namespaced attributes aren't removed by remove_attribute. ([#1299](https://github.com/sparklemotion/nokogiri/issues/1299))\n\n\n## 1.6.6.4 / 2015-11-19\n\nThis version pulls in an upstream patch to the vendored libxml2 to address:\n\n* unclosed comment uninitialized access issue ([#1376](https://github.com/sparklemotion/nokogiri/issues/1376))\n\nThis issue was assigned CVE-2015-8710 after the fact. See http://seclists.org/oss-sec/2015/q4/616 for details.\n\n\n## 1.6.6.3 / 2015-11-16\n\nThis version pulls in several upstream patches to the vendored libxml2 and libxslt to address:\n\n* CVE-2015-1819\n* CVE-2015-7941_1\n* CVE-2015-7941_2\n* CVE-2015-7942\n* CVE-2015-7942-2\n* CVE-2015-8035\n* CVE-2015-7995\n\nSee [#1374](https://github.com/sparklemotion/nokogiri/issues/1374) for details.\n\n\n## 1.6.6.2 / 2015-01-23\n\n### Fixed\n\n* Fixed installation issue affecting compiler arguments. ([#1230](https://github.com/sparklemotion/nokogiri/issues/1230))\n\n\n## 1.6.6.1 / 2015-01-22\n\nNote that 1.6.6.0 was not released.\n\n\n### Added\n\n* Unified `Node` and `NodeSet` implementations of `#search`, `#xpath` and `#css`.\n* Added `Node#lang` and `Node#lang=`.\n* `bin/nokogiri` passes the URI to `parse()` if an HTTP URL is given.\n* `bin/nokogiri` now loads `~/.nokogirirc` so user can define helper methods, etc.\n* `bin/nokogiri` can be configured to use Pry instead of IRB by adding a couple of lines to ~/.nokogirirc. ([#1198](https://github.com/sparklemotion/nokogiri/issues/1198))\n* `bin/nokogiri` can better handle urls from STDIN (aiding use of xargs). ([#1065](https://github.com/sparklemotion/nokogiri/issues/1065))\n* JRuby 9K support.\n\n\n### Fixed\n\n* `DocumentFragment#search` now matches against root nodes. ([#1205](https://github.com/sparklemotion/nokogiri/issues/1205))\n* (MRI) More fixes related to handling libxml2 parse errors during `DocumentFragment#dup`. ([#1196](https://github.com/sparklemotion/nokogiri/issues/1196))\n* (JRuby) Builder now handles namespace hrefs properly when there is a default ns. ([#1039](https://github.com/sparklemotion/nokogiri/issues/1039))\n* (JRuby) Clear the XPath cache on attr removal. ([#1109](https://github.com/sparklemotion/nokogiri/issues/1109))\n* `XML::Comment.new` argument types are now consistent and safe (and documented) across MRI and JRuby. ([#1224](https://github.com/sparklemotion/nokogiri/issues/1224))\n* (MRI) Restoring support for Ruby 1.9.2 that was broken in v1.6.4.1 and v1.6.5. ([#1207](https://github.com/sparklemotion/nokogiri/issues/1207))\n* Check if `zlib` is available before building `libxml2`. ([#1188](https://github.com/sparklemotion/nokogiri/issues/1188))\n* (JRuby) HtmlSaxPushParser now exists. ([#1147](https://github.com/sparklemotion/nokogiri/issues/1147)) (Thanks, Piotr Szmielew!)\n\n\n## 1.6.5 / 2014-11-26\n\n### Added\n\n* Implement `Slop#respond_to_missing?`. ([#1176](https://github.com/sparklemotion/nokogiri/issues/1176))\n* Optimized the XPath query generated by an `an+b` CSS query.\n\n\n### Fixed\n\n* Capture non-parse errors from `Document#dup` in `Document#errors`. ([#1196](https://github.com/sparklemotion/nokogiri/issues/1196))\n* (JRuby) `Document#canonicalize` parameters are now consistent with MRI. ([#1189](https://github.com/sparklemotion/nokogiri/issues/1189))\n\n\n## 1.6.4.1 / 2014-11-05\n\n### Fixed\n\n* (MRI) Fix a bug where CFLAGS passed in are dropped. ([#1188](https://github.com/sparklemotion/nokogiri/issues/1188))\n* Fix a bug where CSS selector :nth(n) did not work. ([#1187](https://github.com/sparklemotion/nokogiri/issues/1187))\n\n\n## 1.6.4 / 2014-11-04\n\n### Added\n\n* (MRI) Bundled Libxml2 is upgraded to 2.9.2.\n* (MRI) `nokogiri --version` will include a list of applied patches.\n* (MRI) Nokogiri no longer prints messages directly to TTY while building the extension.\n* (MRI) Detect and help user fix a missing /usr/include/iconv.h on OS X. ([#1111](https://github.com/sparklemotion/nokogiri/issues/1111))\n* (MRI) Improve the iconv detection for building libxml2.\n\n### Fixed\n\n* (MRI) Fix `DocumentFragment#element_children` ([#1138](https://github.com/sparklemotion/nokogiri/issues/1138)).\n* Fix a bug with CSS attribute selector without any prefix where \"foo [bar]\" was treated as \"foo[bar]\". ([#1174](https://github.com/sparklemotion/nokogiri/issues/1174))\n\n\n## 1.6.3.1 / 2014-07-21\n\n### Fixed\n\n* Addressing an Apple Macintosh installation problem for GCC users. [#1130](https://github.com/sparklemotion/nokogiri/issues/1130) (Thanks, [@zenspider](https://github.com/zenspider)!)\n\n\n## 1.6.3 / 2014-07-20\n\n### Added\n\n* Added `Node#document?` and `Node#processing_instruction?`\n\n\n### Fixed\n\n* [JRuby] Fix Ruby memory exhaustion vulnerability. [#1087](https://github.com/sparklemotion/nokogiri/issues/1087) (Thanks, [@ocher](https://github.com/ocher))\n* [MRI] Fix segfault during GC when using `libxml-ruby` and `nokogiri` together in multi-threaded environment. [#895](https://github.com/sparklemotion/nokogiri/issues/895) (Thanks, [@ender672](https://github.com/ender672)!)\n* Building on OSX 10.9 stock ruby 2.0.0 now works. [#1101](https://github.com/sparklemotion/nokogiri/issues/1101) (Thanks, [@zenspider](https://github.com/zenspider)!)\n* `Node#parse` now works again for HTML document nodes (broken in 1.6.2+).\n* Processing instructions can now be added via `Node#add_next_sibling`.\n\n\n## 1.6.2.1 / 2014-05-13\n\n### Fixed\n\n* Fix statically-linked libxml2 installation when using universal builds of Ruby. [#1104](https://github.com/sparklemotion/nokogiri/issues/1104)\n* Patching `mini_portile` to address the git dependency detailed in [#1102](https://github.com/sparklemotion/nokogiri/issues/1102).\n* Library load fix to address segfault reported on some systems. [#1097](https://github.com/sparklemotion/nokogiri/issues/1097)\n\n\n## 1.6.2 / 2014-05-12\n\n### Security\n\nA set of security and bugfix patches have been backported from the libxml2 and libxslt repositories onto the version of 2.8.0 packaged with Nokogiri, including these notable security fixes:\n\n* https://git.gnome.org/browse/libxml2/commit/?id=4629ee02ac649c27f9c0cf98ba017c6b5526070f\n* CVE-2013-2877 https://git.gnome.org/browse/libxml2/commit/?id=e50ba8164eee06461c73cd8abb9b46aa0be81869\n* CVE-2014-0191 https://git.gnome.org/browse/libxml2/commit/?id=9cd1c3cfbd32655d60572c0a413e017260c854df\n\nIt is recommended that you upgrade from 1.6.x to this version as soon as possible.\n\n### Dependencies\n\nNow requires libxml >= 2.6.21 (was previously >= 2.6.17).\n\n### Added\n\n* Add cross building of fat binary gems for 64-Bit Windows (x64-mingw32) and add support for native builds on Windows. [#864](https://github.com/sparklemotion/nokogiri/issues/864), [#989](https://github.com/sparklemotion/nokogiri/issues/989), [#1072](https://github.com/sparklemotion/nokogiri/issues/1072)\n* (MRI) Alias CP932 to Windows-31J if iconv does not support Windows-31J.\n* (MRI) Nokogiri now links packaged libraries statically. To disable static linking, pass --disable-static to `extconf.rb`. [#923](https://github.com/sparklemotion/nokogiri/issues/923)\n* (MRI) Fix a library path (LIBPATH) precedence problem caused by CRuby bug [#9760](https://github.com/sparklemotion/nokogiri/issues/9760).\n* (MRI) Nokogiri automatically deletes directories of packaged libraries only used during build. To keep them for debugging purposes, pass --disable-clean to `extconf.rb`. [#952](https://github.com/sparklemotion/nokogiri/issues/952)\n* (MRI) Nokogiri now builds libxml2 properly with iconv support on platforms where libiconv is installed outside the system default directories, such as FreeBSD.\n* Add support for an-b in nth selectors. [#886](https://github.com/sparklemotion/nokogiri/issues/886) (Thanks, Magnus Bergmark!)\n* Add support for bare and multiple `:not()` functions in selectors. [#887](https://github.com/sparklemotion/nokogiri/issues/887) (Thanks, Magnus Bergmark!)\n* (MRI) Add an `extconf.rb` option --use-system-libraries, alternative to setting the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES.\n* (MRI) Update packaged libraries: libxslt to 1.1.28, zlib to 1.2.8, and libiconv to 1.14, respectively.\n* `Nokogiri::HTML::Document#title=` and `#meta_encoding`= now always add an element if not present, trying hard to find the best place to put it.\n* `Nokogiri::XML::DTD#html_dtd?` and `#html5_dtd?` are added.\n* `Nokogiri::XML::Node#prepend_child` is added. [#664](https://github.com/sparklemotion/nokogiri/issues/664)\n* `Nokogiri::XML::SAX::ParserContext#recovery` is added. [#453](https://github.com/sparklemotion/nokogiri/issues/453)\n* Fix documentation for `XML::Node#namespace`. [#803](https://github.com/sparklemotion/nokogiri/issues/803) [#802](https://github.com/sparklemotion/nokogiri/issues/802) (Thanks, Hoylen Sue)\n* Allow `Nokogiri::XML::Node#parse` from unparented non-element nodes. [#407](https://github.com/sparklemotion/nokogiri/issues/407)\n\n### Fixed\n\n* Ensure :only-child pseudo class works within :not pseudo class. [#858](https://github.com/sparklemotion/nokogiri/issues/858) (Thanks, Yamagishi Kazutoshi!)\n* Don't call pkg_config when using bundled libraries in `extconf.rb` [#931](https://github.com/sparklemotion/nokogiri/issues/931) (Thanks, Shota Fukumori!)\n* `Nokogiri.parse()` does not mistake a non-HTML document like a RSS document as HTML document. [#932](https://github.com/sparklemotion/nokogiri/issues/932) (Thanks, Yamagishi Kazutoshi!)\n* (MRI) Perform a node type check before adding a child node to another. Previously adding a text node to another as a child could cause a SEGV. [#1092](https://github.com/sparklemotion/nokogiri/issues/1092)\n* (JRuby) XSD validation crashes in Java version. [#373](https://github.com/sparklemotion/nokogiri/issues/373)\n* (JRuby) Document already has a root node error while using Builder. [#646](https://github.com/sparklemotion/nokogiri/issues/646)\n* (JRuby) c14n tests are all passing on JRuby. [#226](https://github.com/sparklemotion/nokogiri/issues/226)\n* Parsing empty documents raise `SyntaxError` in strict mode. [#1005](https://github.com/sparklemotion/nokogiri/issues/1005)\n* (JRuby) Make xpath faster by caching the xpath context. [#741](https://github.com/sparklemotion/nokogiri/issues/741)\n* (JRuby) XML SAX push parser leaks memory on JRuby, but not on MRI. [#998](https://github.com/sparklemotion/nokogiri/issues/998)\n* (JRuby) Inconsistent behavior aliasing the default namespace. [#940](https://github.com/sparklemotion/nokogiri/issues/940)\n* (JRuby) Inconsistent behavior between parsing and adding namespaces. [#943](https://github.com/sparklemotion/nokogiri/issues/943)\n* (JRuby) Xpath returns inconsistent result set on cloned document with namespaces and attributes. [#1034](https://github.com/sparklemotion/nokogiri/issues/1034)\n* (JRuby) Java-Implementation forgets element namespaces [#902](https://github.com/sparklemotion/nokogiri/issues/902)\n* (JRuby) JRuby-Nokogiri does not recognise attributes inside namespaces [#1081](https://github.com/sparklemotion/nokogiri/issues/1081)\n* (JRuby) JRuby-Nokogiri has different comment node name [#1080](https://github.com/sparklemotion/nokogiri/issues/1080)\n* (JRuby) JAXPExtensionsProvider / Java 7 / Secure Processing [#1070](https://github.com/sparklemotion/nokogiri/issues/1070)\n\n## 1.6.1 / 2013-12-14\n\n### Fixed\n\n* (JRuby) Fix out of memory bug when certain invalid documents are parsed.\n* (JRuby) Fix regression of billion-laughs vulnerability. [#586](https://github.com/sparklemotion/nokogiri/issues/586)\n\n\n## 1.6.0 / 2013-06-08\n\nThis release was based on v1.5.10 and 1.6.0.rc1, and contains changes\nmentioned in both.\n\n### Deprecations\n\n* Remove pre 1.9 monitoring from Travis.\n\n\n## 1.6.0.rc1 / 2013-04-14\n\nThis release was based on v1.5.9, and so does not contain any fixes\nmentioned in the notes for v1.5.10.\n\n### Notes\n\n* mini_portile is now a runtime dependency\n* Ruby 1.9.2 and higher now required\n\n\n### Added\n\n* (MRI) Source code for libxml 2.8.0 and libxslt 1.2.26 is packaged with the gem. These libraries are compiled at gem install time unless the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES is set. VERSION_INFO (also `nokogiri -v`) exposes whether libxml was compiled from packaged source, or the system library was used.\n* (Windows) libxml upgraded to 2.8.0\n\n\n### Dependencies\n\n* Support for Ruby 1.8.7 and prior has been dropped\n\n\n## 1.5.11 / 2013-12-14\n\n### Fixed\n\n* (JRuby) Fix out of memory bug when certain invalid documents are parsed.\n* (JRuby) Fix regression of billion-laughs vulnerability. [#586](https://github.com/sparklemotion/nokogiri/issues/586)\n\n\n## 1.5.10 / 2013-06-07\n\n### Fixed\n\n* (JRuby) Fix \"null document\" error when parsing an empty IO in jruby 1.7.3. [#883](https://github.com/sparklemotion/nokogiri/issues/883)\n* (JRuby) Fix schema validation when XSD has DOCTYPE set to DTD. [#912](https://github.com/sparklemotion/nokogiri/issues/912) (Thanks, Patrick Cheng!)\n* (MRI) Fix segfault when there is no default subelement for an HTML node. [#917](https://github.com/sparklemotion/nokogiri/issues/917)\n\n\n### Notes\n\n* Use rb_ary_entry instead of RARRAY_PTR (you know, for Rubinius). [#877](https://github.com/sparklemotion/nokogiri/issues/877) (Thanks, Dirkjan Bussink!)\n* Fix TypeError when running tests. [#900](https://github.com/sparklemotion/nokogiri/issues/900) (Thanks, C\u00e9dric Boutillier!)\n\n\n## 1.5.9 / 2013-03-21\n\n### Fixed\n\n* Ensure that prefixed attributes are properly namespaced when reparented. [#869](https://github.com/sparklemotion/nokogiri/issues/869)\n* Fix for inconsistent namespaced attribute access for SVG nested in HTML. [#861](https://github.com/sparklemotion/nokogiri/issues/861)\n* (MRI) Fixed a memory leak in fragment parsing if nodes are not all subsequently reparented. [#856](https://github.com/sparklemotion/nokogiri/issues/856)\n\n\n## 1.5.8 / 2013-03-19\n\n### Fixed\n\n* (JRuby) Fix EmptyStackException thrown by elements with xlink:href attributes and no base_uri [#534](https://github.com/sparklemotion/nokogiri/issues/534), [#805](https://github.com/sparklemotion/nokogiri/issues/805). (Thanks, Patrick Quinn and Brian Hoffman!)\n* Fixes duplicate attributes issue introduced in 1.5.7. [#865](https://github.com/sparklemotion/nokogiri/issues/865)\n* Allow use of a prefixed namespace on a root node using `Nokogiri::XML::Builder` [#868](https://github.com/sparklemotion/nokogiri/issues/868)\n\n\n## 1.5.7 / 2013-03-18\n\n### Added\n\n* Windows support for Ruby 2.0.\n\n\n### Fixed\n\n* `SAX::Parser.parse_io` throw an error when used with lower case encoding. [#828](https://github.com/sparklemotion/nokogiri/issues/828)\n* (JRuby) Java Nokogiri is finally green (passes all tests) under 1.8 and 1.9 mode. High five everyone. [#798](https://github.com/sparklemotion/nokogiri/issues/798), [#705](https://github.com/sparklemotion/nokogiri/issues/705)\n* (JRuby) `Nokogiri::XML::Reader` broken (as a pull parser) on jruby - reads the whole XML document. [#831](https://github.com/sparklemotion/nokogiri/issues/831)\n* (JRuby) JRuby hangs parsing \"&amp;\". [#837](https://github.com/sparklemotion/nokogiri/issues/837)\n* (JRuby) JRuby NPE parsing an invalid XML instruction. [#838](https://github.com/sparklemotion/nokogiri/issues/838)\n* (JRuby) `Node#content=` incompatibility. [#839](https://github.com/sparklemotion/nokogiri/issues/839)\n* (JRuby) to_xhtml doesn't print the last slash for self-closing tags in JRuby. [#834](https://github.com/sparklemotion/nokogiri/issues/834)\n* (JRuby) Adding an `EntityReference` after a Text node mangles the entity in JRuby. [#835](https://github.com/sparklemotion/nokogiri/issues/835)\n* (JRuby) JRuby version inconsistency: nil for empty attributes. [#818](https://github.com/sparklemotion/nokogiri/issues/818)\n* CSS queries for classes (e.g., \".foo\") now treat all whitespace identically. [#854](https://github.com/sparklemotion/nokogiri/issues/854)\n* Namespace behavior cleaned up and made consistent between JRuby and MRI. [#846](https://github.com/sparklemotion/nokogiri/issues/846), [#801](https://github.com/sparklemotion/nokogiri/issues/801) (Thanks, Michael Klein!)\n* (MRI) SAX parser handles empty processing instructions. [#845](https://github.com/sparklemotion/nokogiri/issues/845)\n\n\n## 1.5.6 / 2012-12-19\n\n### Added\n\n* Improved performance of `XML::Document#collect_namespaces`. [#761](https://github.com/sparklemotion/nokogiri/issues/761) (Thanks, Juergen Mangler!)\n* New callback `SAX::Document#processing_instruction` (Thanks, Kitaiti Makoto!)\n* `Node#native_content=` allows setting unescaped node content. [#768](https://github.com/sparklemotion/nokogiri/issues/768)\n* XPath lookup with namespaces supports symbol keys. [#729](https://github.com/sparklemotion/nokogiri/issues/729) (Thanks, Ben Langfeld.)\n* `XML::Node#[]=` stringifies values. [#729](https://github.com/sparklemotion/nokogiri/issues/729) (Thanks, Ben Langfeld.)\n* `bin/nokogiri` will process a document from $stdin\n* `bin/nokogiri -e` will execute a program from the command line\n* (JRuby) `bin/nokogiri --version` will print the Xerces and NekoHTML versions.\n\n\n### Fixed\n\n* Nokogiri now detects XSLT transform errors. [#731](https://github.com/sparklemotion/nokogiri/issues/731) (Thanks, Justin Fitzsimmons!)\n* Don't throw an Error when trying to replace top-level text node in DocumentFragment. [#775](https://github.com/sparklemotion/nokogiri/issues/775)\n* Raise an ArgumentError if an invalid encoding is passed to the SAX parser. [#756](https://github.com/sparklemotion/nokogiri/issues/756) (Thanks, Bradley Schaefer!)\n* Prefixed element inconsistency between CRuby and JRuby. [#712](https://github.com/sparklemotion/nokogiri/issues/712)\n* (JRuby) space prior to xml preamble causes nokogiri to fail parsing. (fixed along with [#748](https://github.com/sparklemotion/nokogiri/issues/748)) [#790](https://github.com/sparklemotion/nokogiri/issues/790)\n* (JRuby) Fixed the bug `Nokogiri::XML::Node#content` inconsistency between Java and C. [#794](https://github.com/sparklemotion/nokogiri/issues/794), [#797](https://github.com/sparklemotion/nokogiri/issues/797)\n* (JRuby) raises INVALID_CHARACTER_ERR exception when EntityReference name starts with '#'. [#719](https://github.com/sparklemotion/nokogiri/issues/719)\n* (JRuby) doesn't coerce namespaces out of strings on a direct subclass of Node. [#715](https://github.com/sparklemotion/nokogiri/issues/715)\n* (JRuby) `Node#content` now renders newlines properly. [#737](https://github.com/sparklemotion/nokogiri/issues/737) (Thanks, Piotr Szmielew!)\n* (JRuby) Unknown namespace are ignore when the recover option is used. [#748](https://github.com/sparklemotion/nokogiri/issues/748)\n* (JRuby) XPath queries for namespaces should not throw exceptions when called twice in a row. [#764](https://github.com/sparklemotion/nokogiri/issues/764)\n* (JRuby) More consistent (with libxml2) whitespace formatting when emitting XML. [#771](https://github.com/sparklemotion/nokogiri/issues/771)\n* (JRuby) namespaced attributes broken when appending raw xml to builder. [#770](https://github.com/sparklemotion/nokogiri/issues/770)\n* (JRuby) `Nokogiri::XML::Document#wrap` raises undefined method `length' for nil:NilClass when trying to << to a node. [#781](https://github.com/sparklemotion/nokogiri/issues/781)\n* (JRuby) Fixed \"bad file descriptor\" bug when closing open file descriptors. [#495](https://github.com/sparklemotion/nokogiri/issues/495)\n* (JRuby) JRuby/CRuby incompatibility for attribute decorators. [#785](https://github.com/sparklemotion/nokogiri/issues/785)\n* (JRuby) Issues parsing valid XML with no internal subset in the DTD. [#547](https://github.com/sparklemotion/nokogiri/issues/547), [#811](https://github.com/sparklemotion/nokogiri/issues/811)\n* (JRuby) Issues parsing valid node content when it contains colons. [#728](https://github.com/sparklemotion/nokogiri/issues/728)\n* (JRuby) Correctly parse the doc type of html documents. [#733](https://github.com/sparklemotion/nokogiri/issues/733)\n* (JRuby) Include dtd in the xml output when a builder is used with create_internal_subset. [#751](https://github.com/sparklemotion/nokogiri/issues/751)\n* (JRuby) builder requires textwrappers for valid utf8 in jruby, not in mri. [#784](https://github.com/sparklemotion/nokogiri/issues/784)\n\n\n## 1.5.5 / 2012-06-24\n\n### Added\n\n* Much-improved support for JRuby in 1.9 mode! Yay!\n\n### Fixed\n\n* Regression in JRuby Nokogiri add_previous_sibling (1.5.0 -> 1.5.1) [#691](https://github.com/sparklemotion/nokogiri/issues/691) (Thanks, John Shahid!)\n* JRuby unable to create HTML doc if URL arg provided [#674](https://github.com/sparklemotion/nokogiri/issues/674) (Thanks, John Shahid!)\n* JRuby raises NullPointerException when given HTML document is nil or empty string. [#699](https://github.com/sparklemotion/nokogiri/issues/699)\n* JRuby 1.9 error, uncaught throw 'encoding_found', has been fixed. [#673](https://github.com/sparklemotion/nokogiri/issues/673)\n* Invalid encoding returned in JRuby with US-ASCII. [#583](https://github.com/sparklemotion/nokogiri/issues/583)\n* XmlSaxPushParser raises IndexOutOfBoundsException when over 512 characters are given. [#567](https://github.com/sparklemotion/nokogiri/issues/567), [#615](https://github.com/sparklemotion/nokogiri/issues/615)\n* When xpath evaluation returns empty `NodeSet`, decorating `NodeSet`'s base document raises exception. [#514](https://github.com/sparklemotion/nokogiri/issues/514)\n* JRuby raises exception when xpath with namespace is specified. pull request [#681](https://github.com/sparklemotion/nokogiri/issues/681) (Thanks, Piotr Szmielew)\n* JRuby renders nodes without their namespace when subclassing Node. [#695](https://github.com/sparklemotion/nokogiri/issues/695)\n* JRuby raises NAMESPACE_ERR (org.w3c.dom.DOMException) while instantiating `RDF::RDFXML::Writer`. [#683](https://github.com/sparklemotion/nokogiri/issues/683)\n* JRuby is not able to use namespaces in xpath. [#493](https://github.com/sparklemotion/nokogiri/issues/493)\n* JRuby's Entity resolving should be consistent with C-Nokogiri [#704](https://github.com/sparklemotion/nokogiri/issues/704), [#647](https://github.com/sparklemotion/nokogiri/issues/647), [#703](https://github.com/sparklemotion/nokogiri/issues/703)\n\n\n## 1.5.4 / 2012-06-12\n\n### Added\n\n* The \"nokogiri\" script now has more verbose output when passed the `--rng` option. [#675](https://github.com/sparklemotion/nokogiri/issues/675) (Thanks, Dan Radez!)\n* Build support on hardened Debian systems that use `-Werror=format-security`. [#680](https://github.com/sparklemotion/nokogiri/issues/680).\n* Better build support for systems with pkg-config. [#584](https://github.com/sparklemotion/nokogiri/issues/584)\n* Better build support for systems with multiple iconv installations.\n\n### Fixed\n\n* Segmentation fault when creating a comment node for a DocumentFragment. [#677](https://github.com/sparklemotion/nokogiri/issues/677), [#678](https://github.com/sparklemotion/nokogiri/issues/678).\n* Treat '.' as xpath in `at()` and `search()`. [#690](https://github.com/sparklemotion/nokogiri/issues/690)\n\n### Security\n\n(MRI) Default parse options for XML documents were changed to not make network connections during document parsing, to avoid XXE vulnerability. [#693](https://github.com/sparklemotion/nokogiri/issues/693)\n\nTo re-enable this behavior, the configuration method `nononet` may be called, like this:\n\n``` ruby\nNokogiri::XML::Document.parse(xml) { |config| config.nononet }\n```\n\nInsert your own joke about double-negatives here.\n\n\n## 1.5.3 / 2012-06-01\n\n### Added\n\n* Support for \"prefixless\" CSS selectors ~, > and + like jQuery supports. [#621](https://github.com/sparklemotion/nokogiri/issues/621), [#623](https://github.com/sparklemotion/nokogiri/issues/623). (Thanks, David Lee!)\n* Attempting to improve installation on homebrew 0.9 (with regards to iconv). Isn't package management convenient?\n\n### Fixed\n\n* Custom xpath functions with empty nodeset arguments cause a segfault. [#634](https://github.com/sparklemotion/nokogiri/issues/634).\n* `Nokogiri::XML::Node#css` now works for XML documents with default namespaces when the rule contains attribute selector without namespace.\n* Fixed marshalling bugs around how arguments are passed to (and returned from) XSLT custom xpath functions. [#640](https://github.com/sparklemotion/nokogiri/issues/640).\n* `Nokogiri::XML::Reader#outer_xml` is broken in JRuby [#617](https://github.com/sparklemotion/nokogiri/issues/617)\n* `Nokogiri::XML::Attribute` on JRuby returns a nil namespace [#647](https://github.com/sparklemotion/nokogiri/issues/647)\n* `Nokogiri::XML::Node#namespace=` cannot set a namespace without a prefix on JRuby [#648](https://github.com/sparklemotion/nokogiri/issues/648)\n* (JRuby) 1.9 mode causes dead lock while running rake [#571](https://github.com/sparklemotion/nokogiri/issues/571)\n* `HTML::Document#meta_encoding` does not raise exception on docs with malformed content-type. [#655](https://github.com/sparklemotion/nokogiri/issues/655)\n* Fixing segfault related to unsupported encodings in in-context parsing on 1.8.7. [#643](https://github.com/sparklemotion/nokogiri/issues/643)\n* (JRuby) Concurrency issue in XPath parsing. [#682](https://github.com/sparklemotion/nokogiri/issues/682)\n\n\n## 1.5.2 / 2012-03-09\n\nRepackaging of 1.5.1 with a gemspec that is compatible with older Rubies. [#631](https://github.com/sparklemotion/nokogiri/issues/631), [#632](https://github.com/sparklemotion/nokogiri/issues/632).\n\n\n## 1.5.1 / 2012-03-09\n\n### Added\n\n* `XML::Builder#comment` allows creation of comment nodes.\n* CSS searches now support namespaced attributes. [#593](https://github.com/sparklemotion/nokogiri/issues/593)\n* Java integration feature is added. Now, `XML::Document.wrap` and `XML::Document#to_java` methods are available.\n* RelaxNG validator support in the `nokogiri` cli utility. [#591](https://github.com/sparklemotion/nokogiri/issues/591) (thanks, Dan Radez!)\n\n### Fixed\n\n* Fix many memory leaks and segfault opportunities. Thanks, Tim Elliott!\n* extconf searches homebrew paths if homebrew is installed.\n* Inconsistent behavior of Nokogiri 1.5.0 Java [#620](https://github.com/sparklemotion/nokogiri/issues/620)\n* Inheriting from `Nokogiri::XML::Node` on JRuby (1.6.4/5) fails [#560](https://github.com/sparklemotion/nokogiri/issues/560)\n* `XML::Attr` nodes are not allowed to be added as node children, so an exception is raised. [#558](https://github.com/sparklemotion/nokogiri/issues/558)\n* No longer defensively \"pickle\" adjacent text nodes on `Node#add_next_sibling` and `Node#add_previous_sibling` calls. [#595](https://github.com/sparklemotion/nokogiri/issues/595).\n* Java version inconsistency: it returns nil for empty attributes [#589](https://github.com/sparklemotion/nokogiri/issues/589)\n* to_xhtml incorrectly generates `<p /></p>` when tag is empty [#557](https://github.com/sparklemotion/nokogiri/issues/557)\n* `Document#add_child` now accepts a `Node`, `NodeSet`, `DocumentFragment`, or `String`. [#546](https://github.com/sparklemotion/nokogiri/issues/546).\n* `Document#create_element` now recognizes namespaces containing non-word characters (like \"SOAP-ENV\"). This is mostly relevant to users of Builder, which calls `Document#create_element` for nearly everything. [#531](https://github.com/sparklemotion/nokogiri/issues/531).\n* File encoding broken in 1.5.0 / jruby / windows [#529](https://github.com/sparklemotion/nokogiri/issues/529)\n* Java version does not return namespace defs as attrs for `::HTML` [#542](https://github.com/sparklemotion/nokogiri/issues/542)\n* Bad file descriptor with Nokogiri 1.5.0 [#495](https://github.com/sparklemotion/nokogiri/issues/495)\n* remove_namespace! doesn't work in pure java version [#492](https://github.com/sparklemotion/nokogiri/issues/492)\n* The Nokogiri Java native build throws a null pointer exception when ActiveSupport's .blank? method is called directly on a parsed object. [#489](https://github.com/sparklemotion/nokogiri/issues/489)\n* 1.5.0 Not using correct character encoding [#488](https://github.com/sparklemotion/nokogiri/issues/488)\n* Raw XML string in XML Builder broken on JRuby [#486](https://github.com/sparklemotion/nokogiri/issues/486)\n* Nokogiri 1.5.0 XML generation broken on JRuby [#484](https://github.com/sparklemotion/nokogiri/issues/484)\n* Do not allow multiple root nodes. [#550](https://github.com/sparklemotion/nokogiri/issues/550)\n* Fixes for custom XPath functions. [#605](https://github.com/sparklemotion/nokogiri/issues/605), [#606](https://github.com/sparklemotion/nokogiri/issues/606) (thanks, Juan Wajnerman!)\n* `Node#to_xml` does not override `:save_with` if it is provided. [#505](https://github.com/sparklemotion/nokogiri/issues/505)\n* `Node#set` is a private method (JRuby). [#564](https://github.com/sparklemotion/nokogiri/issues/564) (thanks, Nick Sieger!)\n* C14n cleanup and `Node#canonicalize` (thanks, Ivan Pirlik!) [#563](https://github.com/sparklemotion/nokogiri/issues/563)\n\n\n## 1.5.0 / 2011-07-01\n\n### Notes\n\n* See changelog from 1.4.7\n\n### Added\n\n* extracted sets of `Node::SaveOptions` into `Node::SaveOptions::DEFAULT_{X,H,XH}TML` (refactor)\n\n### Fixed\n\n* default output of XML on JRuby is no longer formatted due to inconsistent whitespace handling. [#415](https://github.com/sparklemotion/nokogiri/issues/415)\n* (JRuby) making empty `NodeSet`s with null `nodes` member safe to operate on. [#443](https://github.com/sparklemotion/nokogiri/issues/443)\n* Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding.\n* Add support for `<meta charset=\"...\">`.\n\n\n## 1.5.0 beta3 / 2010-12-02\n\n### Notes\n\n* JRuby performance tuning\n* See changelog from 1.4.4\n\n### Fixed\n\n* `Node#inner_text` no longer returns nil. (JRuby) [#264](https://github.com/sparklemotion/nokogiri/issues/264)\n\n\n## 1.5.0 beta2 / 2010-07-30\n\n### Notes\n\n* See changelog from 1.4.3\n\n\n## 1.5.0 beta1 / 2010-05-22\n\n### Notes\n\n* JRuby support is provided by a new pure-java backend.\n\n### Dependencies\n\n* Ruby 1.8.6 is deprecated. Nokogiri will install, but official support is ended.\n* LibXML 2.6.16 and earlier are deprecated. Nokogiri will refuse to install.\n\n### Removed\n\n* FFI support is removed.\n\n\n## 1.4.7 / 2011-07-01\n\n### Fixed\n\n* Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding. Thanks, Timothy Elliott ([@ender672](https://github.com/ender672))! [#478](https://github.com/sparklemotion/nokogiri/issues/478)\n\n\n## 1.4.6 / 2011-06-19\n\n### Notes\n\n* This version is functionally identical to 1.4.5.\n* Ruby 1.8.6 support has been restored.\n\n\n## 1.4.5 / 2011-05-19\n\n### Added\n\n* `Nokogiri::HTML::Document#title` accessor gets and sets the document title.\n* extracted sets of `Node::SaveOptions` into `Node::SaveOptions::DEFAULT_{X,H,XH}TML` (refactor)\n* Raise an exception if a string is passed to `Nokogiri::XML::Schema#validate`. [#406](https://github.com/sparklemotion/nokogiri/issues/406)\n\n### Fixed\n\n* `Node#serialize`-and-friends now accepts a `SaveOption` object as the, erm, save object.\n* `Nokogiri::CSS::Parser` has-a `Nokogiri::CSS::Tokenizer`\n* (JRUBY+FFI only) Weak references are now threadsafe. [#355](https://github.com/sparklemotion/nokogiri/issues/355)\n* Make direct `start_element()` callback (currently used for `HTML::SAX::Parser`) pass attributes in assoc array, just as emulated `start_element()` callback does.  rel. [#356](https://github.com/sparklemotion/nokogiri/issues/356)\n* `HTML::SAX::Parser` should call back a block given to `parse*()` if any, just as `XML::SAX::Parser` does.\n* Add further encoding detection to HTML parser that libxml2 does not do.\n* `Document#remove_namespaces!` now handles attributes with namespaces. [#396](https://github.com/sparklemotion/nokogiri/issues/396)\n* `XSLT::Stylesheet#transform` no longer segfaults when handed a non-`XML::Document`. [#452](https://github.com/sparklemotion/nokogiri/issues/452)\n* `XML::Reader` no longer segfaults when under GC pressure. [#439](https://github.com/sparklemotion/nokogiri/issues/439)\n\n\n## 1.4.4 / 2010-11-15\n\n### Added\n\n* `XML::Node#children=` sets the node's inner html (much like #inner_html=), but returns the reparent node(s).\n* XSLT supports function extensions. [#336](https://github.com/sparklemotion/nokogiri/issues/336)\n* XPath bind parameter substitution. [#329](https://github.com/sparklemotion/nokogiri/issues/329)\n* `XML::Reader` node type constants. [#369](https://github.com/sparklemotion/nokogiri/issues/369)\n* SAX Parser context provides line and column information\n\n### Fixed\n\n* `XML::DTD#attributes` returns an empty hash instead of nil when there are no attributes.\n* `XML::DTD#{keys,each}` now work as expected. [#324](https://github.com/sparklemotion/nokogiri/issues/324)\n* `{XML,HTML}::DocumentFragment.{new,parse}` no longer strip leading and trailing whitespace. [#319](https://github.com/sparklemotion/nokogiri/issues/319)\n* `XML::Node#{add_child,add_previous_sibling,add_next_sibling,replace}` return a `NodeSet` when passed a string.\n* Unclosed tags parsed more robustly in fragments. [#315](https://github.com/sparklemotion/nokogiri/issues/315)\n* `XML::Node#{replace,add_previous_sibling,add_next_sibling}` edge cases fixed related to libxml's text node merging. [#308](https://github.com/sparklemotion/nokogiri/issues/308)\n* Fixed a segfault when GC occurs during xpath handler argument marshalling. [#345](https://github.com/sparklemotion/nokogiri/issues/345)\n* Added hack to `Slop` decorator to work with previously defined methods. [#330](https://github.com/sparklemotion/nokogiri/issues/330)\n* Fix a memory leak when duplicating child nodes. [#353](https://github.com/sparklemotion/nokogiri/issues/353)\n* Fixed off-by-one bug with `nth-last-{child,of-type}` CSS selectors when NOT using `an+b` notation. [#354](https://github.com/sparklemotion/nokogiri/issues/354)\n* Fixed passing of non-namespace attributes to `SAX::Document#start_element`. [#356](https://github.com/sparklemotion/nokogiri/issues/356)\n* Workaround for libxml2 in-context parsing bug. [#362](https://github.com/sparklemotion/nokogiri/issues/362)\n* Fixed `NodeSet#wrap` on nodes within a fragment. [#331](https://github.com/sparklemotion/nokogiri/issues/331)\n\n\n## 1.4.3 / 2010-07-28\n\n### Added\n\n* `XML::Reader#empty_element?` returns true for empty elements. [#262](https://github.com/sparklemotion/nokogiri/issues/262)\n* `Node#remove_namespaces!` now removes namespace *declarations* as well. [#294](https://github.com/sparklemotion/nokogiri/issues/294)\n* `NodeSet#at_xpath`, `NodeSet#at_css` and `NodeSet#>` do what the corresponding methods of `Node` do.\n\n### Fixed\n\n* `XML::NodeSet#{include?,delete,push}` accept an `XML::Namespace`\n* `XML::Document#parse` added for parsing in the context of a document\n* `XML::DocumentFragment#inner_html=` works with contextual parsing! [#298](https://github.com/sparklemotion/nokogiri/issues/298), [#281](https://github.com/sparklemotion/nokogiri/issues/281)\n* `lib/nokogiri/css/parser.y` Combined CSS functions + pseudo selectors fixed\n* Reparenting text nodes is safe, even when the operation frees adjacent merged nodes. [#283](https://github.com/sparklemotion/nokogiri/issues/283)\n* Fixed libxml2 versionitis issue with `xmlFirstElementChild` et al. [#303](https://github.com/sparklemotion/nokogiri/issues/303)\n* `XML::Attr#add_namespace` now works as expected. [#252](https://github.com/sparklemotion/nokogiri/issues/252)\n* `HTML::DocumentFragment` uses the string's encoding. [#305](https://github.com/sparklemotion/nokogiri/issues/305)\n* Fix the CSS3 selector translation rule for the general sibling combinator (a.k.a. preceding selector) that incorrectly converted \"E ~ F G\" to \"//F//G[preceding-sibling::E]\".\n\n\n## 1.4.2 / 2010-05-22\n\n### Added\n\n* `XML::Node#parse` will parse XML or HTML fragments with respect to the context node.\n* `XML::Node#namespaces` returns all namespaces defined in the node and all ancestor nodes (previously did not return ancestors' namespace definitions).\n* Added `Enumerable` to `XML::Node`\n* `Nokogiri::XML::Schema#validate` now uses xmlSchemaValidateFile if a filename is passed, which is faster and more memory-efficient. GH [#219](https://github.com/sparklemotion/nokogiri/issues/219)\n* `XML::Document#create_entity` will create new `EntityDecl` objects. GH [#174](https://github.com/sparklemotion/nokogiri/issues/174)\n* JRuby FFI implementation no longer uses `ObjectSpace._id2ref`, instead using Charles Nutter's rocking Weakling gem.\n* `Nokogiri::XML::Node#first_element_child` fetch the first child node that is an ELEMENT node.\n* `Nokogiri::XML::Node#last_element_child` fetch the last child node that is an ELEMENT node.\n* `Nokogiri::XML::Node#elements` fetch all children nodes that are ELEMENT nodes.\n* `Nokogiri::XML::Node#add_child`, `#add_previous_sibling`, `#before`, `#add_next_sibling`, `#after`, `#inner_html`, `#swap` and `#replace` all now accept a `Node`, `DocumentFragment`, `NodeSet`, or a string containing markup.\n* `Node#fragment?` indicates whether a node is a `DocumentFragment`.\n\n### Fixed\n\n* `XML::NodeSet` is now always decorated (if the document has decorators). GH [#198](https://github.com/sparklemotion/nokogiri/issues/198)\n* `XML::NodeSet#slice` gracefully handles offset+length larger than the set length. GH [#200](https://github.com/sparklemotion/nokogiri/issues/200)\n* `XML::Node#content=` safely unlinks previous content. GH [#203](https://github.com/sparklemotion/nokogiri/issues/203)\n* `XML::Node#namespace=` takes nil as a parameter\n* `XML::Node#xpath` returns things other than `NodeSet` objects. GH [#208](https://github.com/sparklemotion/nokogiri/issues/208)\n* `XSLT::StyleSheet#transform` accepts hashes for parameters. GH [#223](https://github.com/sparklemotion/nokogiri/issues/223)\n* Psuedo selectors inside `not()` work. GH [#205](https://github.com/sparklemotion/nokogiri/issues/205)\n* `XML::Builder` doesn't break when nodes are unlinked. Thanks to vihai! GH [#228](https://github.com/sparklemotion/nokogiri/issues/228)\n* Encoding can be forced on the SAX parser. Thanks Eugene Pimenov! GH [#204](https://github.com/sparklemotion/nokogiri/issues/204)\n* `XML::DocumentFragment` uses `XML::Node#parse` to determine children.\n* Fixed a memory leak in xml reader. Thanks sdor! GH [#244](https://github.com/sparklemotion/nokogiri/issues/244)\n* `Node#replace` returns the new child node as claimed in the RDoc. Previously returned +self+.\n\n### Notes\n\n* The Windows gems now bundle DLLs for libxml 2.7.6 and libxslt 1.1.26. Prior to this release, libxml 2.7.3 and libxslt 1.1.24 were bundled.\n\n\n## 1.4.1 / 2009-12-10\n\n### Added\n\n* Added `Nokogiri::LIBXML_ICONV_ENABLED`\n* Alias `Node#[]` to `Node#attr`\n* `XML::Node#next_element` added\n* `XML::Node#>` added for searching a nodes immediate children\n* `XML::NodeSet#reverse` added\n* Added fragment support to `Node#add_child`, `Node#add_next_sibling`, `Node#add_previous_sibling`, and `Node#replace`.\n* `XML::Node#previous_element` implemented\n* Rubinius support\n* Ths CSS selector engine now supports `:has()`\n* `XML::NodeSet#filter()` was added\n* `XML::Node.next=` and .previous= are aliases for add_next_sibling and add_previous_sibling. GH [#183](https://github.com/sparklemotion/nokogiri/issues/183)\n\n### Fixed\n\n* XML fragments with namespaces do not raise an exception (regression in 1.4.0)\n* `Node#matches?` works in nodes contained by a `DocumentFragment`. GH [#158](https://github.com/sparklemotion/nokogiri/issues/158)\n* `Document` should not define `add_namespace()` method. GH [#169](https://github.com/sparklemotion/nokogiri/issues/169)\n* `XPath` queries returning namespace declarations do not segfault.\n* `Node#replace` works with nodes from different documents. GH [#162](https://github.com/sparklemotion/nokogiri/issues/162)\n* Adding `XML::Document#collect_namespaces`\n* Fixed bugs in the SOAP4R adapter\n* Fixed bug in `XML::Node#next_element` for certain edge cases\n* Fixed load path issue with JRuby under Windows. GH [#160](https://github.com/sparklemotion/nokogiri/issues/160).\n* `XSLT#apply_to` will honor the \"output method\". Thanks richardlehane!\n* Fragments containing leading text nodes with newlines now parse properly. GH [#178](https://github.com/sparklemotion/nokogiri/issues/178).\n\n\n## 1.4.0 / 2009-10-30\n\n### Added\n\n* `Node#at_xpath` returns the first element of the `NodeSet` matching the XPath expression.\n* `Node#at_css` returns the first element of the `NodeSet` matching the CSS selector.\n* `NodeSet#|` for unions GH [#119](https://github.com/sparklemotion/nokogiri/issues/119) (Thanks Serabe!)\n* `NodeSet#inspect` makes prettier output\n* `Node#inspect` implemented for more rubyish document inspecting\n* Added `XML::DTD#external_id`\n* Added `XML::DTD#system_id`\n* Added `XML::ElementContent` for DTD Element content validity\n* Better namespace declaration support in `Nokogiri::XML::Builder`\n* Added `XML::Node#external_subset`\n* Added `XML::Node#create_external_subset`\n* Added `XML::Node#create_internal_subset`\n* XML Builder can append raw strings (GH [#141](https://github.com/sparklemotion/nokogiri/issues/141), patch from dudleyf)\n* `XML::SAX::ParserContext` added\n* `XML::Document#remove_namespaces!` for the namespace-impaired\n\n### Fixed\n\n* returns nil when HTML documents do not declare a meta encoding tag. GH [#115](https://github.com/sparklemotion/nokogiri/issues/115)\n* Uses `RbConfig::CONFIG['host_os']` to adjust `ENV['PATH']` GH [#113](https://github.com/sparklemotion/nokogiri/issues/113)\n* `NodeSet#search` is more efficient GH [#119](https://github.com/sparklemotion/nokogiri/issues/119) (Thanks Serabe!)\n* `NodeSet#xpath` handles custom xpath functions\n* Fixing a SEGV when `XML::Reader` gets attributes for current node\n* `Node#inner_html` takes the same arguments as `Node#to_html` GH [#117](https://github.com/sparklemotion/nokogiri/issues/117)\n* `DocumentFragment#css` delegates to it's child nodes GH [#123](https://github.com/sparklemotion/nokogiri/issues/123)\n* `NodeSet#[]` works with slices larger than `NodeSet#length` GH [#131](https://github.com/sparklemotion/nokogiri/issues/131)\n* Reparented nodes maintain their namespace. GH [#134](https://github.com/sparklemotion/nokogiri/issues/134)\n* Fixed SEGV when adding an `XML::Document` to `NodeSet`\n* `XML::SyntaxError` can be duplicated. GH [#148](https://github.com/sparklemotion/nokogiri/issues/148)\n\n### Removed\n\n* Hpricot compatibility layer removed\n\n\n## 1.3.3 / 2009-07-26\n\n### Added\n\n* `NodeSet#children` returns all children of all nodes\n\n### Fixed\n\n* Override libxml-ruby's global error handler\n* `ParseOption#strict` fixed\n* Fixed a segfault when sending an empty string to `Node#inner_html=` GH [#88](https://github.com/sparklemotion/nokogiri/issues/88)\n* String encoding is now set to UTF-8 in Ruby 1.9\n* Fixed a segfault when moving root nodes between documents. GH [#91](https://github.com/sparklemotion/nokogiri/issues/91)\n* Fixed an O(n) penalty on node creation. GH [#101](https://github.com/sparklemotion/nokogiri/issues/101)\n* Allowing XML documents to be output as HTML documents\n\n### Deprecations\n\n* Hpricot compatibility layer will be removed in 1.4.0\n\n\n## 1.3.2 / 2009-06-22\n\n### Added\n\n* `Nokogiri::XML::DTD#validate` will validate your document\n\n### Fixed\n\n* `Nokogiri::XML::NodeSet#search` will search top level nodes. GH [#73](https://github.com/sparklemotion/nokogiri/issues/73)\n* Removed namespace related methods from `Nokogiri::XML::Document`\n* Fixed a segfault when a namespace was added twice\n* Made nokogiri work with Snow Leopard GH [#79](https://github.com/sparklemotion/nokogiri/issues/79)\n* Mailing list has moved to: http://groups.google.com/group/nokogiri-talk\n* HTML fragments now correctly handle comments and CDATA blocks. GH [#78](https://github.com/sparklemotion/nokogiri/issues/78)\n* `Nokogiri::XML::Document#clone` is now an alias of dup\n\n### Deprecations\n\n* `Nokogiri::XML::SAX::Document#start_element_ns` is deprecated, please switch to `Nokogiri::XML::SAX::Document#start_element_namespace`\n* `Nokogiri::XML::SAX::Document#end_element_ns` is deprecated, please switch to `Nokogiri::XML::SAX::Document#end_element_namespace`\n\n\n## 1.3.1 / 2009-06-07\n\n### Fixed\n\n* `extconf.rb` checks for optional RelaxNG and Schema functions\n* Namespace nodes are added to the Document node cache\n\n\n## 1.3.0 / 2009-05-30\n\n### Added\n\n* Builder changes scope based on block arity\n* Builder supports methods ending in underscore similar to tagz\n* `Nokogiri::XML::Node#<=>` compares nodes based on Document position\n* `Nokogiri::XML::Node#matches?` returns true if Node can be found with given selector.\n* `Nokogiri::XML::Node#ancestors` now returns an `Nokogiri::XML::NodeSet`\n* `Nokogiri::XML::Node#ancestors` will match parents against optional selector\n* `Nokogiri::HTML::Document#meta_encoding` for getting the meta encoding\n* `Nokogiri::HTML::Document#meta_encoding=` for setting the meta encoding\n* `Nokogiri::XML::Document#encoding=` to set the document encoding\n* `Nokogiri::XML::Schema` for validating documents against XSD schema\n* `Nokogiri::XML::RelaxNG` for validating documents against RelaxNG schema\n* `Nokogiri::HTML::ElementDescription` for fetching HTML element descriptions\n* `Nokogiri::XML::Node#description` to fetch the node description\n* `Nokogiri::XML::Node#accept` implements Visitor pattern\n* `bin/nokogiri` for easily examining documents (Thanks Yutaka HARA!)\n* `Nokogiri::XML::NodeSet` now supports more Array and Enumerable operators: index, delete, slice, - (difference), + (concatenation), & (intersection), push, pop, shift, ==\n* `Nokogiri.XML`, `Nokogiri.HTML` take blocks that receive `Nokogiri::XML::ParseOptions` objects\n* `Nokogiri::XML::Node#namespace` returns a `Nokogiri::XML::Namespace`\n* `Nokogiri::XML::Node#namespace=` for setting a node's namespace\n* `Nokogiri::XML::DocumentFragment` and `Nokogiri::HTML::DocumentFragment` have a sensible API and a more robust implementation.\n* JRuby 1.3.0 support via FFI.\n\n### Fixed\n\n* Fixed a problem with nil passed to CDATA constructor\n* Fragment method deals with regular expression characters (Thanks Joel!) LH [#73](https://github.com/sparklemotion/nokogiri/issues/73)\n* Fixing builder scope issues LH [#61](https://github.com/sparklemotion/nokogiri/issues/61), LH [#74](https://github.com/sparklemotion/nokogiri/issues/74), LH [#70](https://github.com/sparklemotion/nokogiri/issues/70)\n* Fixed a problem when adding a child could remove the child namespace LH[#78](https://github.com/sparklemotion/nokogiri/issues/78)\n* Fixed bug with unlinking a node then reparenting it. (GH[#22](https://github.com/sparklemotion/nokogiri/issues/22))\n* Fixed failure to catch errors during XSLT parsing (GH[#32](https://github.com/sparklemotion/nokogiri/issues/32))\n* Fixed a bug with attribute conditions in CSS selectors (GH[#36](https://github.com/sparklemotion/nokogiri/issues/36))\n* Fixed intolerance of HTML attributes without values in `Node#{before/after/inner_html=}`. (GH[#35](https://github.com/sparklemotion/nokogiri/issues/35))\n\n\n## 1.2.3 / 2009-03-22\n\n### Fixed\n\n* Fixing bug where a node is passed in to `Node#new`\n* Namespace should be assigned on DocumentFragment creation. LH [#66](https://github.com/sparklemotion/nokogiri/issues/66)\n* `Nokogiri::XML::NodeSet#dup` works GH [#10](https://github.com/sparklemotion/nokogiri/issues/10)\n* `Nokogiri::HTML` returns an empty Document when given a blank string GH[#11](https://github.com/sparklemotion/nokogiri/issues/11)\n* Adding a child will remove duplicate namespace declarations LH [#67](https://github.com/sparklemotion/nokogiri/issues/67)\n* Builder methods take a hash as a second argument\n\n\n## 1.2.2 / 2009-03-14\n\n### Added\n\n* Nokogiri may be used with soap4r. See `XSD::XMLParser::Nokogiri`\n* `Nokogiri::XML::Node#inner_html=` to set the inner html for a node\n* Nokogiri builder interface improvements\n* `Nokogiri::XML::Node#swap` swaps html for current node (LH [#50](https://github.com/sparklemotion/nokogiri/issues/50))\n\n### Fixed\n\n* Fixed a tag nesting problem in the Builder API (LH [#41](https://github.com/sparklemotion/nokogiri/issues/41))\n* `Nokogiri::HTML.fragment` will properly handle text only nodes (LH [#43](https://github.com/sparklemotion/nokogiri/issues/43))\n* `Nokogiri::XML::Node#before` will prepend text nodes (LH [#44](https://github.com/sparklemotion/nokogiri/issues/44))\n* `Nokogiri::XML::Node#after` will append text nodes\n* `Nokogiri::XML::Node#search` automatically registers root namespaces (LH [#42](https://github.com/sparklemotion/nokogiri/issues/42))\n* `Nokogiri::XML::NodeSet#search` automatically registers namespaces\n* `Nokogiri::HTML::NamedCharacters` delegates to libxml2\n* `Nokogiri::XML::Node#[]` can take a symbol (LH [#48](https://github.com/sparklemotion/nokogiri/issues/48))\n* vasprintf for windows updated.  Thanks Geoffroy Couprie!\n* `Nokogiri::XML::Node#[]=` should not encode entities (LH [#55](https://github.com/sparklemotion/nokogiri/issues/55))\n* Namespaces should be copied to reparented nodes (LH [#56](https://github.com/sparklemotion/nokogiri/issues/56))\n* Nokogiri uses encoding set on the string for default in Ruby 1.9\n* `Document#dup` should create a new document of the same type (LH [#59](https://github.com/sparklemotion/nokogiri/issues/59))\n* `Document` should not have a parent method (LH [#64](https://github.com/sparklemotion/nokogiri/issues/64))\n\n\n## 1.2.1 / 2009-02-23\n\n### Fixed\n\n* Fixed a CSS selector space bug\n* Fixed Ruby 1.9 String Encoding (Thanks \u89d2\u8c37\u3055\u3093\uff01)\n\n\n## 1.2.0 / 2009-02-22\n\n### Added\n\n* CSS search now supports CSS3 namespace queries\n* Namespaces on the root node are automatically registered\n* CSS queries use the default namespace\n* `Nokogiri::XML::Document#encoding` get encoding used for this document\n* `Nokogiri::XML::Document#url` get the document url\n* `Nokogiri::XML::Node#add_namespace` add a namespace to the node LH[#38](https://github.com/sparklemotion/nokogiri/issues/38)\n* `Nokogiri::XML::Node#each` iterate over attribute name, value pairs\n* `Nokogiri::XML::Node#keys` get all attribute names\n* `Nokogiri::XML::Node#line` get the line number for a node (Thanks Dirkjan Bussink!)\n* `Nokogiri::XML::Node#serialize` now takes an optional encoding parameter\n* `Nokogiri::XML::Node#to_html`, to_xml, and to_xhtml take an optional encoding\n* `Nokogiri::XML::Node#to_str`\n* `Nokogiri::XML::Node#to_xhtml` to produce XHTML documents\n* `Nokogiri::XML::Node#values` get all attribute values\n* `Nokogiri::XML::Node#write_to` writes the node to an IO object with optional encoding\n* `Nokogiri::XML::ProcessingInstruction.new`\n* `Nokogiri::XML::SAX::PushParser` for all your push parsing needs.\n\n### Fixed\n\n* Fixed `Nokogiri::XML::Document#dup`\n* Fixed header detection. Thanks rubikitch!\n* Fixed a problem where invalid CSS would cause the parser to hang\n\n### Deprecations\n\n* `Nokogiri::XML::Node.new_from_str` will be deprecated in 1.3.0\n\n### Changed\n\n* `Nokogiri::HTML.fragment` now returns an XML::DocumentFragment (LH [#32](https://github.com/sparklemotion/nokogiri/issues/32))\n\n\n## 1.1.1\n\n### Added\n\n* Added `XML::Node#elem?`\n* Added `XML::Node#attribute_nodes`\n* Added `XML::Attr`\n* `XML::Node#delete` added.\n* `XML::NodeSet#inner_html` added.\n\n### Fixed\n\n* Not including an HTML entity for \\r for HTML nodes.\n* Removed `CSS::SelectorHandler` and `XML::XPathHandler`\n* `XML::Node#attributes` returns an `Attr` node for the value.\n* `XML::NodeSet` implements `to_xml`\n\n\n## 1.1.0\n\n### Added\n\n* Custom XPath functions are now supported.  See `Nokogiri::XML::Node#xpath`\n* Custom CSS pseudo classes are now supported.  See `Nokogiri::XML::Node#css`\n* `Nokogiri::XML::Node#<<` will add a child to the current node\n\n### Fixed\n\n* Mutex lock on CSS cache access\n* Fixed build problems with GCC 3.3.5\n* `XML::Node#to_xml` now takes an indentation argument\n* `XML::Node#dup` takes an optional depth argument\n* `XML::Node#add_previous_sibling` returns new sibling node.\n\n\n## 1.0.7\n\n### Fixed\n\n* Fixed memory leak when using Dike\n* SAX parser now parses IO streams\n* Comment nodes have their own class\n* `Nokogiri()` should delegate to `Nokogiri.parse()`\n* Prepending rather than appending to `ENV['PATH']` on windows\n* Fixed a bug in complex CSS negation selectors\n\n\n## 1.0.6\n\n### Fixed\n\n* XPath Parser raises a `SyntaxError` on parse failure\n* CSS Parser raises a `SyntaxError` on parse failure\n* `filter()` and `not()` hpricot compatibility added\n* CSS searches via `Node#search` are now always relative\n* CSS to XPath conversion is now cached\n\n\n## 1.0.5\n\n### Fixed\n\n* Added mailing list and ticket tracking information to the `README.txt`\n* Sets `ENV['PATH']` on windows if it doesn't exist\n* Caching results of `NodeSet#[]` on `Document`\n\n\n## 1.0.4\n\n### Fixed\n\n* Changed memory management from weak refs to document refs\n* Plugged some memory leaks\n* Builder blocks can call methods from surrounding contexts\n\n\n## 1.0.3\n\n### Fixed\n\n* `NodeSet` now implements `to_ary`\n* `XML::Document` should not implement parent\n* More GC Bugs fixed.  (Mike is AWESOME!)\n* Removed RARRAY_LEN for 1.8.5 compatibility.  Thanks Shane Hanna.\n* `inner_html` fixed. (Thanks Yehuda!)\n\n\n## 1.0.2\n\n### Fixed\n\n* `extconf.rb` should not check for frex and racc\n\n\n## 1.0.1\n\n### Fixed\n\n* Made sure `extconf.rb` searched libdir and prefix so that ports libxml/ruby will link properly.  Thanks lucsky!\n\n\n## 1.0.0 / 2008-07-13\n\n### Added\n\n* Birthday!\n", "package nokogiri;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.apache.xerces.parsers.AbstractSAXParser;\nimport org.cyberneko.html.parsers.SAXParser;\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.RubyFixnum;\nimport org.jruby.RubyString;\nimport org.jruby.anno.JRubyClass;\nimport org.jruby.anno.JRubyMethod;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\nimport org.xml.sax.SAXException;\n\nimport nokogiri.internals.NokogiriHandler;\nimport static nokogiri.internals.NokogiriHelpers.rubyStringToString;\n\n/**\n * Class for Nokogiri::HTML4::SAX::ParserContext.\n *\n * @author serabe\n * @author Patrick Mahoney <pat@polycrystal.org>\n * @author Yoko Harada <yokolet@gmail.com>\n */\n@JRubyClass(name = \"Nokogiri::HTML4::SAX::ParserContext\", parent = \"Nokogiri::XML::SAX::ParserContext\")\npublic class Html4SaxParserContext extends XmlSaxParserContext\n{\n  private static final long serialVersionUID = 1L;\n\n  static Html4SaxParserContext\n  newInstance(final Ruby runtime, final RubyClass klazz)\n  {\n    Html4SaxParserContext instance = new Html4SaxParserContext(runtime, klazz);\n    instance.initialize(runtime);\n    return instance;\n  }\n\n  public\n  Html4SaxParserContext(Ruby ruby, RubyClass rubyClass)\n  {\n    super(ruby, rubyClass);\n  }\n\n  @Override\n  protected AbstractSAXParser\n  createParser() throws SAXException\n  {\n    SAXParser parser = new SAXParser();\n\n    try {\n      parser.setProperty(\n        \"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\n        \"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      // NekoHTML should not try to guess the encoding based on the meta\n      // tags or other information in the document.  This is already\n      // handled by the EncodingReader.\n      parser.setFeature(\"http://cyberneko.org/html/features/scanner/ignore-specified-charset\", true);\n      return parser;\n    } catch (SAXException ex) {\n      throw new SAXException(\n        \"Problem while creating HTML4 SAX Parser: \" + ex.toString());\n    }\n  }\n\n  @JRubyMethod(name = \"memory\", meta = true)\n  public static IRubyObject\n  parse_memory(ThreadContext context,\n               IRubyObject klazz,\n               IRubyObject data,\n               IRubyObject encoding)\n  {\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klazz);\n    String javaEncoding = findEncodingName(context, encoding);\n    if (javaEncoding != null) {\n      CharSequence input = applyEncoding(rubyStringToString(data.convertToString()), javaEncoding);\n      ByteArrayInputStream istream = new ByteArrayInputStream(input.toString().getBytes());\n      ctx.setInputSource(istream);\n      ctx.getInputSource().setEncoding(javaEncoding);\n    }\n    return ctx;\n  }\n\n  public enum EncodingType {\n    NONE(0, \"NONE\"),\n    UTF_8(1, \"UTF-8\"),\n    UTF16LE(2, \"UTF16LE\"),\n    UTF16BE(3, \"UTF16BE\"),\n    UCS4LE(4, \"UCS4LE\"),\n    UCS4BE(5, \"UCS4BE\"),\n    EBCDIC(6, \"EBCDIC\"),\n    UCS4_2143(7, \"ICS4-2143\"),\n    UCS4_3412(8, \"UCS4-3412\"),\n    UCS2(9, \"UCS2\"),\n    ISO_8859_1(10, \"ISO-8859-1\"),\n    ISO_8859_2(11, \"ISO-8859-2\"),\n    ISO_8859_3(12, \"ISO-8859-3\"),\n    ISO_8859_4(13, \"ISO-8859-4\"),\n    ISO_8859_5(14, \"ISO-8859-5\"),\n    ISO_8859_6(15, \"ISO-8859-6\"),\n    ISO_8859_7(16, \"ISO-8859-7\"),\n    ISO_8859_8(17, \"ISO-8859-8\"),\n    ISO_8859_9(18, \"ISO-8859-9\"),\n    ISO_2022_JP(19, \"ISO-2022-JP\"),\n    SHIFT_JIS(20, \"SHIFT-JIS\"),\n    EUC_JP(21, \"EUC-JP\"),\n    ASCII(22, \"ASCII\");\n\n    private final int value;\n    private final String name;\n\n    EncodingType(int value, String name)\n    {\n      this.value = value;\n      this.name = name;\n    }\n\n    public int getValue()\n    {\n      return value;\n    }\n\n    public String toString()\n    {\n      return name;\n    }\n\n    private static transient EncodingType[] values;\n\n    // NOTE: assuming ordinal == value\n    static EncodingType get(final int ordinal)\n    {\n      EncodingType[] values = EncodingType.values;\n      if (values == null) {\n        values = EncodingType.values();\n        EncodingType.values = values;\n      }\n      if (ordinal >= 0 && ordinal < values.length) {\n        return values[ordinal];\n      }\n      return null;\n    }\n\n  }\n\n  private static String\n  findEncodingName(final int value)\n  {\n    EncodingType type = EncodingType.get(value);\n    if (type == null) { return null; }\n    assert type.value == value;\n    return type.name;\n  }\n\n  private static String\n  findEncodingName(ThreadContext context, IRubyObject encoding)\n  {\n    String rubyEncoding = null;\n    if (encoding instanceof RubyString) {\n      rubyEncoding = rubyStringToString((RubyString) encoding);\n    } else if (encoding instanceof RubyFixnum) {\n      rubyEncoding = findEncodingName(RubyFixnum.fix2int((RubyFixnum) encoding));\n    }\n    if (rubyEncoding == null) { return null; }\n    try {\n      return Charset.forName(rubyEncoding).displayName();\n    } catch (UnsupportedCharsetException e) {\n      throw context.getRuntime().newEncodingCompatibilityError(rubyEncoding + \"is not supported\");\n    } catch (IllegalCharsetNameException e) {\n      throw context.getRuntime().newEncodingError(e.getMessage());\n    }\n  }\n\n  private static final Pattern CHARSET_PATTERN = Pattern.compile(\"charset(()|\\\\s)=(()|\\\\s)([a-z]|-|_|\\\\d)+\",\n      Pattern.CASE_INSENSITIVE);\n\n  private static CharSequence\n  applyEncoding(final String input, final String enc)\n  {\n    int start_pos = 0;\n    int end_pos = 0;\n    if (containsIgnoreCase(input, \"charset\")) {\n      Matcher m = CHARSET_PATTERN.matcher(input);\n      while (m.find()) {\n        start_pos = m.start();\n        end_pos = m.end();\n      }\n    }\n    if (start_pos != end_pos) {\n      return new StringBuilder(input).replace(start_pos, end_pos, \"charset=\" + enc);\n    }\n    return input;\n  }\n\n  private static boolean\n  containsIgnoreCase(final String str, final String sub)\n  {\n    final int len = sub.length();\n    final int max = str.length() - len;\n\n    if (len == 0) { return true; }\n    final char c0Lower = Character.toLowerCase(sub.charAt(0));\n    final char c0Upper = Character.toUpperCase(sub.charAt(0));\n\n    for (int i = 0; i <= max; i++) {\n      final char ch = str.charAt(i);\n      if (ch != c0Lower && Character.toLowerCase(ch) != c0Lower && Character.toUpperCase(ch) != c0Upper) {\n        continue; // first char doesn't match\n      }\n\n      if (str.regionMatches(true, i + 1, sub, 0 + 1, len - 1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @JRubyMethod(name = \"file\", meta = true)\n  public static IRubyObject\n  parse_file(ThreadContext context,\n             IRubyObject klass,\n             IRubyObject data,\n             IRubyObject encoding)\n  {\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);\n    ctx.setInputSourceFile(context, data);\n    String javaEncoding = findEncodingName(context, encoding);\n    if (javaEncoding != null) {\n      ctx.getInputSource().setEncoding(javaEncoding);\n    }\n    return ctx;\n  }\n\n  @JRubyMethod(name = \"io\", meta = true)\n  public static IRubyObject\n  parse_io(ThreadContext context,\n           IRubyObject klass,\n           IRubyObject data,\n           IRubyObject encoding)\n  {\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);\n    ctx.setIOInputSource(context, data, context.nil);\n    String javaEncoding = findEncodingName(context, encoding);\n    if (javaEncoding != null) {\n      ctx.getInputSource().setEncoding(javaEncoding);\n    }\n    return ctx;\n  }\n\n  /**\n   * Create a new parser context that will read from a raw input stream.\n   * Meant to be run in a separate thread by Html4SaxPushParser.\n   */\n  static Html4SaxParserContext\n  parse_stream(final Ruby runtime, RubyClass klass, InputStream stream)\n  {\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(runtime, klass);\n    ctx.setInputSource(stream);\n    return ctx;\n  }\n\n  @Override\n  protected void\n  preParse(final Ruby runtime, IRubyObject handlerRuby, NokogiriHandler handler)\n  {\n    // this function is meant to be empty.  It overrides the one in XmlSaxParserContext\n  }\n\n}\n", "package nokogiri;\n\nimport nokogiri.internals.*;\nimport org.apache.xerces.parsers.AbstractSAXParser;\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.RubyFixnum;\nimport org.jruby.anno.JRubyClass;\nimport org.jruby.anno.JRubyMethod;\nimport org.jruby.exceptions.RaiseException;\nimport org.jruby.runtime.Helpers;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport static org.jruby.runtime.Helpers.invoke;\n\n/**\n * Base class for the SAX parsers.\n *\n * @author Patrick Mahoney <pat@polycrystal.org>\n * @author Yoko Harada <yokolet@gmail.com>\n */\n@JRubyClass(name = \"Nokogiri::XML::SAX::ParserContext\")\npublic class XmlSaxParserContext extends ParserContext\n{\n  private static final long serialVersionUID = 1L;\n\n  protected static final String FEATURE_NAMESPACES =\n    \"http://xml.org/sax/features/namespaces\";\n  protected static final String FEATURE_NAMESPACE_PREFIXES =\n    \"http://xml.org/sax/features/namespace-prefixes\";\n  protected static final String FEATURE_LOAD_EXTERNAL_DTD =\n    \"http://apache.org/xml/features/nonvalidating/load-external-dtd\";\n  protected static final String FEATURE_CONTINUE_AFTER_FATAL_ERROR =\n    \"http://apache.org/xml/features/continue-after-fatal-error\";\n\n  protected AbstractSAXParser parser;\n\n  protected NokogiriHandler handler;\n  protected NokogiriErrorHandler errorHandler;\n  private boolean replaceEntities = true;\n  private boolean recovery = false;\n\n  public\n  XmlSaxParserContext(final Ruby ruby, RubyClass rubyClass)\n  {\n    super(ruby, rubyClass);\n  }\n\n  protected void\n  initialize(Ruby runtime)\n  {\n    try {\n      parser = createParser();\n    } catch (SAXException se) {\n      // Unexpected failure in XML subsystem\n      RaiseException ex = runtime.newRuntimeError(se.toString());\n      ex.initCause(se);\n      throw ex;\n    }\n  }\n\n  /**\n   * Create and return a copy of this object.\n   *\n   * @return a clone of this object\n   */\n  @Override\n  public Object\n  clone() throws CloneNotSupportedException\n  {\n    return super.clone();\n  }\n\n  protected AbstractSAXParser\n  createParser() throws SAXException\n  {\n    XmlSaxParser parser = new XmlSaxParser();\n    parser.setFeature(FEATURE_NAMESPACE_PREFIXES, true);\n    parser.setFeature(FEATURE_LOAD_EXTERNAL_DTD, false);\n    return parser;\n  }\n\n  /**\n   * Create a new parser context that will parse the string\n   * <code>data</code>.\n   */\n  @JRubyMethod(name = \"memory\", meta = true)\n  public static IRubyObject\n  parse_memory(ThreadContext context,\n               IRubyObject klazz,\n               IRubyObject data)\n  {\n    final Ruby runtime = context.runtime;\n    XmlSaxParserContext ctx = newInstance(runtime, (RubyClass) klazz);\n    ctx.initialize(runtime);\n    ctx.setStringInputSource(context, data, runtime.getNil());\n    return ctx;\n  }\n\n  /**\n   * Create a new parser context that will read from the file\n   * <code>data</code> and parse.\n   */\n  @JRubyMethod(name = \"file\", meta = true)\n  public static IRubyObject\n  parse_file(ThreadContext context,\n             IRubyObject klazz,\n             IRubyObject data)\n  {\n    final Ruby runtime = context.runtime;\n    XmlSaxParserContext ctx = newInstance(runtime, (RubyClass) klazz);\n    ctx.initialize(context.getRuntime());\n    ctx.setInputSourceFile(context, data);\n    return ctx;\n  }\n\n  /**\n   * Create a new parser context that will read from the IO or\n   * StringIO <code>data</code> and parse.\n   *\n   * TODO: Currently ignores encoding <code>enc</code>.\n   */\n  @JRubyMethod(name = \"io\", meta = true)\n  public static IRubyObject\n  parse_io(ThreadContext context,\n           IRubyObject klazz,\n           IRubyObject data,\n           IRubyObject enc)\n  {\n    //int encoding = (int)enc.convertToInteger().getLongValue();\n    final Ruby runtime = context.runtime;\n    XmlSaxParserContext ctx = newInstance(runtime, (RubyClass) klazz);\n    ctx.initialize(runtime);\n    ctx.setIOInputSource(context, data, runtime.getNil());\n    return ctx;\n  }\n\n  /**\n   * Create a new parser context that will read from a raw input stream.\n   * Meant to be run in a separate thread by XmlSaxPushParser.\n   */\n  static XmlSaxParserContext\n  parse_stream(final Ruby runtime, RubyClass klazz, InputStream stream)\n  {\n    XmlSaxParserContext ctx = newInstance(runtime, klazz);\n    ctx.initialize(runtime);\n    ctx.setInputSource(stream);\n    return ctx;\n  }\n\n  private static XmlSaxParserContext\n  newInstance(final Ruby runtime, final RubyClass klazz)\n  {\n    return (XmlSaxParserContext) NokogiriService.XML_SAXPARSER_CONTEXT_ALLOCATOR.allocate(runtime, klazz);\n  }\n\n  public final NokogiriHandler\n  getNokogiriHandler() { return handler; }\n\n  public final NokogiriErrorHandler\n  getNokogiriErrorHandler() { return errorHandler; }\n\n  /**\n   * Perform any initialization prior to parsing with the handler\n   * <code>handlerRuby</code>. Convenience hook for subclasses.\n   */\n  protected void\n  preParse(Ruby runtime, IRubyObject handlerRuby, NokogiriHandler handler)\n  {\n    ((XmlSaxParser) parser).setXmlDeclHandler(handler);\n    if (recovery) {\n      try {\n        parser.setFeature(FEATURE_CONTINUE_AFTER_FATAL_ERROR, true);\n      } catch (Exception e) {\n        // Unexpected failure in XML subsystem\n        throw runtime.newRuntimeError(e.getMessage());\n      }\n    }\n  }\n\n  protected void\n  postParse(Ruby runtime, IRubyObject handlerRuby, NokogiriHandler handler)\n  {\n    // noop\n  }\n\n  protected void\n  do_parse() throws SAXException, IOException\n  {\n    parser.parse(getInputSource());\n  }\n\n  protected static Options\n  defaultParseOptions(ThreadContext context)\n  {\n    return new ParserContext.Options(\n             RubyFixnum.fix2long(Helpers.invoke(context,\n                                 ((RubyClass)context.getRuntime().getClassFromPath(\"Nokogiri::XML::ParseOptions\"))\n                                 .getConstant(\"DEFAULT_XML\"),\n                                 \"to_i\"))\n           );\n  }\n\n  @JRubyMethod\n  public IRubyObject\n  parse_with(ThreadContext context, IRubyObject handlerRuby)\n  {\n    final Ruby runtime = context.getRuntime();\n\n    if (!invoke(context, handlerRuby, \"respond_to?\", runtime.newSymbol(\"document\")).isTrue()) {\n      throw runtime.newArgumentError(\"argument must respond_to document\");\n    }\n\n    /* TODO: how should we pass in parse options? */\n    ParserContext.Options options = defaultParseOptions(context);\n\n    errorHandler = new NokogiriStrictErrorHandler(runtime, options.noError, options.noWarning);\n    handler = new NokogiriHandler(runtime, handlerRuby, errorHandler);\n\n    preParse(runtime, handlerRuby, handler);\n    parser.setContentHandler(handler);\n    parser.setErrorHandler(handler);\n    parser.setEntityResolver(new NokogiriEntityResolver(runtime, errorHandler, options));\n\n    try {\n      parser.setProperty(\"http://xml.org/sax/properties/lexical-handler\", handler);\n    } catch (Exception ex) {\n      throw runtime.newRuntimeError(\"Problem while creating XML SAX Parser: \" + ex.toString());\n    }\n\n    try {\n      try {\n        do_parse();\n      } catch (SAXParseException ex) {\n        // A bad document (<foo><bar></foo>) should call the\n        // error handler instead of raising a SAX exception.\n\n        // However, an EMPTY document should raise a RuntimeError.\n        // This is a bit kludgy, but AFAIK SAX doesn't distinguish\n        // between empty and bad whereas Nokogiri does.\n        String message = ex.getMessage();\n        if (message != null && message.contains(\"Premature end of file.\") && stringDataSize < 1) {\n          throw runtime.newRuntimeError(\"couldn't parse document: \" + message);\n        }\n        handler.error(ex);\n      }\n    } catch (SAXException ex) {\n      // Unexpected failure in XML subsystem\n      throw runtime.newRuntimeError(ex.getMessage());\n    } catch (IOException ex) {\n      throw runtime.newIOErrorFromException(ex);\n    }\n\n    postParse(runtime, handlerRuby, handler);\n\n    return runtime.getNil();\n  }\n\n  /**\n   * Can take a boolean assignment.\n   *\n   * @param context\n   * @param value\n   * @return\n   */\n  @JRubyMethod(name = \"replace_entities=\")\n  public IRubyObject\n  set_replace_entities(ThreadContext context, IRubyObject value)\n  {\n    replaceEntities = value.isTrue();\n    return this;\n  }\n\n  @JRubyMethod(name = \"replace_entities\")\n  public IRubyObject\n  get_replace_entities(ThreadContext context)\n  {\n    return context.runtime.newBoolean(replaceEntities);\n  }\n\n  /**\n   * Can take a boolean assignment.\n   *\n   * @param context\n   * @param value\n   * @return\n   */\n  @JRubyMethod(name = \"recovery=\")\n  public IRubyObject\n  set_recovery(ThreadContext context, IRubyObject value)\n  {\n    recovery = value.isTrue();\n    return this;\n  }\n\n  @JRubyMethod(name = \"recovery\")\n  public IRubyObject\n  get_recovery(ThreadContext context)\n  {\n    return context.runtime.newBoolean(recovery);\n  }\n\n  @JRubyMethod(name = \"column\")\n  public IRubyObject\n  column(ThreadContext context)\n  {\n    final Integer number = handler.getColumn();\n    if (number == null) { return context.getRuntime().getNil(); }\n    return RubyFixnum.newFixnum(context.getRuntime(), number.longValue());\n  }\n\n  @JRubyMethod(name = \"line\")\n  public IRubyObject\n  line(ThreadContext context)\n  {\n    final Integer number = handler.getLine();\n    if (number == null) { return context.getRuntime().getNil(); }\n    return RubyFixnum.newFixnum(context.getRuntime(), number.longValue());\n  }\n}\n", "package nokogiri.internals;\n\nimport static nokogiri.internals.NokogiriHelpers.rubyStringToString;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.concurrent.Callable;\n\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.RubyObject;\nimport org.jruby.RubyString;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\nimport org.jruby.util.ByteList;\nimport org.jruby.util.IOInputStream;\nimport org.xml.sax.InputSource;\n\n/**\n * Base class for the various parser contexts.  Handles converting\n * Ruby objects to InputSource objects.\n *\n * @author Patrick Mahoney <pat@polycrystal.org>\n * @author Yoko Harada <yokolet@gmail.com>\n */\npublic abstract class ParserContext extends RubyObject\n{\n  private static final long serialVersionUID = 1L;\n\n  protected InputSource source = null;\n  protected IRubyObject detected_encoding = null;\n  protected int stringDataSize = -1;\n  protected String java_encoding;\n\n  public\n  ParserContext(Ruby runtime)\n  {\n    // default to class 'Object' because this class isn't exposed to Ruby\n    super(runtime, runtime.getObject());\n  }\n\n  public\n  ParserContext(Ruby runtime, RubyClass klass)\n  {\n    super(runtime, klass);\n  }\n\n  protected InputSource\n  getInputSource()\n  {\n    return source;\n  }\n\n  public void\n  setIOInputSource(ThreadContext context, IRubyObject data, IRubyObject url)\n  {\n    source = new InputSource();\n    ParserContext.setUrl(context, source, url);\n\n    source.setByteStream(new IOInputStream(data));\n    if (java_encoding != null) {\n      source.setEncoding(java_encoding);\n    }\n  }\n\n  public void\n  setStringInputSource(ThreadContext context, IRubyObject data, IRubyObject url)\n  {\n    source = new InputSource();\n    ParserContext.setUrl(context, source, url);\n\n    Ruby ruby = context.getRuntime();\n\n    if (!(data instanceof RubyString)) {\n      throw ruby.newArgumentError(\"must be kind_of String\");\n    }\n\n    RubyString stringData = (RubyString) data;\n\n    if (stringData.encoding(context) != null) {\n      RubyString stringEncoding = stringData.encoding(context).asString();\n      String encName = NokogiriHelpers.getValidEncodingOrNull(stringEncoding);\n      if (encName != null) {\n        java_encoding = encName;\n      }\n    }\n\n    ByteList bytes = stringData.getByteList();\n\n    stringDataSize = bytes.length() - bytes.begin();\n    ByteArrayInputStream stream = new ByteArrayInputStream(bytes.unsafeBytes(), bytes.begin(), bytes.length());\n    source.setByteStream(stream);\n    source.setEncoding(java_encoding);\n  }\n\n  public static void\n  setUrl(ThreadContext context, InputSource source, IRubyObject url)\n  {\n    String path = rubyStringToString(url);\n    // Dir.chdir might be called at some point before this.\n    if (path != null) {\n      try {\n        URI uri = URI.create(path);\n        source.setSystemId(uri.toURL().toString());\n      } catch (Exception ex) {\n        // fallback to the old behavior\n        File file = new File(path);\n        if (file.isAbsolute()) {\n          source.setSystemId(path);\n        } else {\n          String pwd = context.getRuntime().getCurrentDirectory();\n          String absolutePath;\n          try {\n            absolutePath = new File(pwd, path).getCanonicalPath();\n          } catch (IOException e) {\n            absolutePath = new File(pwd, path).getAbsolutePath();\n          }\n          source.setSystemId(absolutePath);\n        }\n      }\n    }\n  }\n\n  protected void\n  setEncoding(String encoding)\n  {\n    source.setEncoding(encoding);\n  }\n\n  /**\n   * Set the InputSource to read from <code>file</code>, a String filename.\n   */\n  public void\n  setInputSourceFile(ThreadContext context, IRubyObject file)\n  {\n    source = new InputSource();\n    ParserContext.setUrl(context, source, file);\n  }\n\n  /**\n   * Set the InputSource from <code>stream</code>.\n   */\n  public void\n  setInputSource(InputStream stream)\n  {\n    source = new InputSource(stream);\n  }\n\n  /**\n   * Wrap Nokogiri parser options in a utility class.  This is\n   * read-only.\n   */\n  public static class Options\n  {\n    protected static final long STRICT = 0;\n    protected static final long RECOVER = 1;\n    protected static final long NOENT = 2;\n    protected static final long DTDLOAD = 4;\n    protected static final long DTDATTR = 8;\n    protected static final long DTDVALID = 16;\n    protected static final long NOERROR = 32;\n    protected static final long NOWARNING = 64;\n    protected static final long PEDANTIC = 128;\n    protected static final long NOBLANKS = 256;\n    protected static final long SAX1 = 512;\n    protected static final long XINCLUDE = 1024;\n    protected static final long NONET = 2048;\n    protected static final long NODICT = 4096;\n    protected static final long NSCLEAN = 8192;\n    protected static final long NOCDATA = 16384;\n    protected static final long NOXINCNODE = 32768;\n\n    public final boolean strict;\n    public final boolean recover;\n    public final boolean noEnt;\n    public final boolean dtdLoad;\n    public final boolean dtdAttr;\n    public final boolean dtdValid;\n    public final boolean noError;\n    public final boolean noWarning;\n    public final boolean pedantic;\n    public final boolean noBlanks;\n    public final boolean sax1;\n    public final boolean xInclude;\n    public final boolean noNet;\n    public final boolean noDict;\n    public final boolean nsClean;\n    public final boolean noCdata;\n    public final boolean noXIncNode;\n\n    protected static boolean\n    test(long options, long mask)\n    {\n      return ((options & mask) == mask);\n    }\n\n    public\n    Options(long options)\n    {\n      strict = ((options & RECOVER) == STRICT);\n      recover = test(options, RECOVER);\n      noEnt = test(options, NOENT);\n      dtdLoad = test(options, DTDLOAD);\n      dtdAttr = test(options, DTDATTR);\n      dtdValid = test(options, DTDVALID);\n      noError = test(options, NOERROR);\n      noWarning = test(options, NOWARNING);\n      pedantic = test(options, PEDANTIC);\n      noBlanks = test(options, NOBLANKS);\n      sax1 = test(options, SAX1);\n      xInclude = test(options, XINCLUDE);\n      noNet = test(options, NONET);\n      noDict = test(options, NODICT);\n      nsClean = test(options, NSCLEAN);\n      noCdata = test(options, NOCDATA);\n      noXIncNode = test(options, NOXINCNODE);\n    }\n  }\n\n  /*\n  public static class NokogiriXInlcudeEntityResolver implements org.xml.sax.EntityResolver {\n      InputSource source;\n      public NokogiriXInlcudeEntityResolver(InputSource source) {\n          this.source = source;\n      }\n\n      @Override\n      public InputSource resolveEntity(String publicId, String systemId)\n              throws SAXException, IOException {\n          if (systemId != null) source.setSystemId(systemId);\n          if (publicId != null) source.setPublicId(publicId);\n          return source;\n      }\n  } */\n\n  public static abstract class ParserTask<T extends ParserContext> implements Callable<T>\n  {\n\n    protected final ThreadContext context; // TODO does not seem like a good idea!?\n    protected final IRubyObject handler;\n    protected final T parser;\n\n    protected\n    ParserTask(ThreadContext context, IRubyObject handler, T parser)\n    {\n      this.context = context;\n      this.handler = handler;\n      this.parser = parser;\n    }\n\n  }\n\n}\n", "#include <nokogiri.h>\n\nVALUE cNokogiriHtml4SaxParserContext ;\n\nstatic void\ndeallocate(xmlParserCtxtPtr ctxt)\n{\n  NOKOGIRI_DEBUG_START(ctxt);\n\n  ctxt->sax = NULL;\n\n  htmlFreeParserCtxt(ctxt);\n\n  NOKOGIRI_DEBUG_END(ctxt);\n}\n\nstatic VALUE\nparse_memory(VALUE klass, VALUE data, VALUE encoding)\n{\n  htmlParserCtxtPtr ctxt;\n\n  if (NIL_P(data)) {\n    rb_raise(rb_eArgError, \"data cannot be nil\");\n  }\n  if (!(int)RSTRING_LEN(data)) {\n    rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n  }\n\n  ctxt = htmlCreateMemoryParserCtxt(StringValuePtr(data),\n                                    (int)RSTRING_LEN(data));\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  if (RTEST(encoding)) {\n    xmlCharEncodingHandlerPtr enc = xmlFindCharEncodingHandler(StringValueCStr(encoding));\n    if (enc != NULL) {\n      xmlSwitchToEncoding(ctxt, enc);\n      if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {\n        rb_raise(rb_eRuntimeError, \"Unsupported encoding %s\",\n                 StringValueCStr(encoding));\n      }\n    }\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\nstatic VALUE\nparse_file(VALUE klass, VALUE filename, VALUE encoding)\n{\n  htmlParserCtxtPtr ctxt = htmlCreateFileParserCtxt(\n                             StringValueCStr(filename),\n                             StringValueCStr(encoding)\n                           );\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\nstatic VALUE\nparse_doc(VALUE ctxt_val)\n{\n  htmlParserCtxtPtr ctxt = (htmlParserCtxtPtr)ctxt_val;\n  htmlParseDocument(ctxt);\n  return Qnil;\n}\n\nstatic VALUE\nparse_doc_finalize(VALUE ctxt_val)\n{\n  htmlParserCtxtPtr ctxt = (htmlParserCtxtPtr)ctxt_val;\n\n  if (ctxt->myDoc) {\n    xmlFreeDoc(ctxt->myDoc);\n  }\n\n  NOKOGIRI_SAX_TUPLE_DESTROY(ctxt->userData);\n  return Qnil;\n}\n\nstatic VALUE\nparse_with(VALUE self, VALUE sax_handler)\n{\n  htmlParserCtxtPtr ctxt;\n  htmlSAXHandlerPtr sax;\n\n  if (!rb_obj_is_kind_of(sax_handler, cNokogiriXmlSaxParser)) {\n    rb_raise(rb_eArgError, \"argument must be a Nokogiri::XML::SAX::Parser\");\n  }\n\n  Data_Get_Struct(self, htmlParserCtxt, ctxt);\n  Data_Get_Struct(sax_handler, htmlSAXHandler, sax);\n\n  /* Free the sax handler since we'll assign our own */\n  if (ctxt->sax && ctxt->sax != (xmlSAXHandlerPtr)&xmlDefaultSAXHandler) {\n    xmlFree(ctxt->sax);\n  }\n\n  ctxt->sax = sax;\n  ctxt->userData = (void *)NOKOGIRI_SAX_TUPLE_NEW(ctxt, sax_handler);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  rb_ensure(parse_doc, (VALUE)ctxt, parse_doc_finalize, (VALUE)ctxt);\n\n  return self;\n}\n\nvoid\nnoko_init_html_sax_parser_context()\n{\n  assert(cNokogiriXmlSaxParserContext);\n  cNokogiriHtml4SaxParserContext = rb_define_class_under(mNokogiriHtml4Sax, \"ParserContext\",\n                                   cNokogiriXmlSaxParserContext);\n\n  rb_define_singleton_method(cNokogiriHtml4SaxParserContext, \"memory\", parse_memory, 2);\n  rb_define_singleton_method(cNokogiriHtml4SaxParserContext, \"file\", parse_file, 2);\n\n  rb_define_method(cNokogiriHtml4SaxParserContext, \"parse_with\", parse_with, 1);\n}\n", "#include <nokogiri.h>\n\nVALUE cNokogiriXmlSaxParserContext ;\n\nstatic void\ndeallocate(xmlParserCtxtPtr ctxt)\n{\n  NOKOGIRI_DEBUG_START(ctxt);\n\n  ctxt->sax = NULL;\n\n  xmlFreeParserCtxt(ctxt);\n\n  NOKOGIRI_DEBUG_END(ctxt);\n}\n\n/*\n * call-seq:\n *  parse_io(io, encoding)\n *\n * Parse +io+ object with +encoding+\n */\nstatic VALUE\nparse_io(VALUE klass, VALUE io, VALUE encoding)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlCharEncoding enc = (xmlCharEncoding)NUM2INT(encoding);\n\n  ctxt = xmlCreateIOParserCtxt(NULL, NULL,\n                               (xmlInputReadCallback)noko_io_read,\n                               (xmlInputCloseCallback)noko_io_close,\n                               (void *)io, enc);\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\n/*\n * call-seq:\n *  parse_file(filename)\n *\n * Parse file given +filename+\n */\nstatic VALUE\nparse_file(VALUE klass, VALUE filename)\n{\n  xmlParserCtxtPtr ctxt = xmlCreateFileParserCtxt(StringValueCStr(filename));\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\n/*\n * call-seq:\n *  parse_memory(data)\n *\n * Parse the XML stored in memory in +data+\n */\nstatic VALUE\nparse_memory(VALUE klass, VALUE data)\n{\n  xmlParserCtxtPtr ctxt;\n\n  if (NIL_P(data)) {\n    rb_raise(rb_eArgError, \"data cannot be nil\");\n  }\n  if (!(int)RSTRING_LEN(data)) {\n    rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n  }\n\n  ctxt = xmlCreateMemoryParserCtxt(StringValuePtr(data),\n                                   (int)RSTRING_LEN(data));\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\nstatic VALUE\nparse_doc(VALUE ctxt_val)\n{\n  xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr)ctxt_val;\n  xmlParseDocument(ctxt);\n  return Qnil;\n}\n\nstatic VALUE\nparse_doc_finalize(VALUE ctxt_val)\n{\n  xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr)ctxt_val;\n\n  if (NULL != ctxt->myDoc) {\n    xmlFreeDoc(ctxt->myDoc);\n  }\n\n  NOKOGIRI_SAX_TUPLE_DESTROY(ctxt->userData);\n  return Qnil;\n}\n\n/*\n * call-seq:\n *  parse_with(sax_handler)\n *\n * Use +sax_handler+ and parse the current document\n */\nstatic VALUE\nparse_with(VALUE self, VALUE sax_handler)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlSAXHandlerPtr sax;\n\n  if (!rb_obj_is_kind_of(sax_handler, cNokogiriXmlSaxParser)) {\n    rb_raise(rb_eArgError, \"argument must be a Nokogiri::XML::SAX::Parser\");\n  }\n\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n  Data_Get_Struct(sax_handler, xmlSAXHandler, sax);\n\n  /* Free the sax handler since we'll assign our own */\n  if (ctxt->sax && ctxt->sax != (xmlSAXHandlerPtr)&xmlDefaultSAXHandler) {\n    xmlFree(ctxt->sax);\n  }\n\n  ctxt->sax = sax;\n  ctxt->userData = (void *)NOKOGIRI_SAX_TUPLE_NEW(ctxt, sax_handler);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  rb_ensure(parse_doc, (VALUE)ctxt, parse_doc_finalize, (VALUE)ctxt);\n\n  return Qnil;\n}\n\n/*\n * call-seq:\n *  replace_entities=(boolean)\n *\n * Should this parser replace entities?  &amp; will get converted to '&' if\n * set to true\n */\nstatic VALUE\nset_replace_entities(VALUE self, VALUE value)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if (Qfalse == value) {\n    ctxt->replaceEntities = 0;\n  } else {\n    ctxt->replaceEntities = 1;\n  }\n\n  return value;\n}\n\n/*\n * call-seq:\n *  replace_entities\n *\n * Should this parser replace entities?  &amp; will get converted to '&' if\n * set to true\n */\nstatic VALUE\nget_replace_entities(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if (0 == ctxt->replaceEntities) {\n    return Qfalse;\n  } else {\n    return Qtrue;\n  }\n}\n\n/*\n * call-seq: line\n *\n * Get the current line the parser context is processing.\n */\nstatic VALUE\nline(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlParserInputPtr io;\n\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  io = ctxt->input;\n  if (io) {\n    return INT2NUM(io->line);\n  }\n\n  return Qnil;\n}\n\n/*\n * call-seq: column\n *\n * Get the current column the parser context is processing.\n */\nstatic VALUE\ncolumn(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlParserInputPtr io;\n\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  io = ctxt->input;\n  if (io) {\n    return INT2NUM(io->col);\n  }\n\n  return Qnil;\n}\n\n/*\n * call-seq:\n *  recovery=(boolean)\n *\n * Should this parser recover from structural errors? It will not stop processing\n * file on structural errors if set to true\n */\nstatic VALUE\nset_recovery(VALUE self, VALUE value)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if (value == Qfalse) {\n    ctxt->recovery = 0;\n  } else {\n    ctxt->recovery = 1;\n  }\n\n  return value;\n}\n\n/*\n * call-seq:\n *  recovery\n *\n * Should this parser recover from structural errors? It will not stop processing\n * file on structural errors if set to true\n */\nstatic VALUE\nget_recovery(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if (ctxt->recovery == 0) {\n    return Qfalse;\n  } else {\n    return Qtrue;\n  }\n}\n\nvoid\nnoko_init_xml_sax_parser_context()\n{\n  cNokogiriXmlSaxParserContext = rb_define_class_under(mNokogiriXmlSax, \"ParserContext\", rb_cObject);\n\n  rb_undef_alloc_func(cNokogiriXmlSaxParserContext);\n\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"io\", parse_io, 2);\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"memory\", parse_memory, 1);\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"file\", parse_file, 1);\n\n  rb_define_method(cNokogiriXmlSaxParserContext, \"parse_with\", parse_with, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"replace_entities=\", set_replace_entities, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"replace_entities\", get_replace_entities, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"recovery=\", set_recovery, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"recovery\", get_recovery, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"line\", line, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"column\", column, 0);\n}\n", "# frozen_string_literal: true\n\nmodule Nokogiri\n  module HTML4\n    ###\n    # Nokogiri lets you write a SAX parser to process HTML but get HTML correction features.\n    #\n    # See Nokogiri::HTML4::SAX::Parser for a basic example of using a SAX parser with HTML.\n    #\n    # For more information on SAX parsers, see Nokogiri::XML::SAX\n    module SAX\n      ###\n      # This class lets you perform SAX style parsing on HTML with HTML error correction.\n      #\n      # Here is a basic usage example:\n      #\n      #   class MyDoc < Nokogiri::XML::SAX::Document\n      #     def start_element name, attributes = []\n      #       puts \"found a #{name}\"\n      #     end\n      #   end\n      #\n      #   parser = Nokogiri::HTML4::SAX::Parser.new(MyDoc.new)\n      #   parser.parse(File.read(ARGV[0], mode: 'rb'))\n      #\n      # For more information on SAX parsers, see Nokogiri::XML::SAX\n      class Parser < Nokogiri::XML::SAX::Parser\n        ###\n        # Parse html stored in +data+ using +encoding+\n        def parse_memory(data, encoding = \"UTF-8\")\n          raise ArgumentError unless data\n          return if data.empty?\n\n          ctx = ParserContext.memory(data, encoding)\n          yield ctx if block_given?\n          ctx.parse_with(self)\n        end\n\n        ###\n        # Parse given +io+\n        def parse_io(io, encoding = \"UTF-8\")\n          check_encoding(encoding)\n          @encoding = encoding\n          ctx = ParserContext.io(io, ENCODINGS[encoding])\n          yield ctx if block_given?\n          ctx.parse_with(self)\n        end\n\n        ###\n        # Parse a file with +filename+\n        def parse_file(filename, encoding = \"UTF-8\")\n          raise ArgumentError unless filename\n          raise Errno::ENOENT unless File.exist?(filename)\n          raise Errno::EISDIR if File.directory?(filename)\n\n          ctx = ParserContext.file(filename, encoding)\n          yield ctx if block_given?\n          ctx.parse_with(self)\n        end\n      end\n    end\n  end\nend\n", "# -*- coding: utf-8 -*-\n# frozen_string_literal: true\n\nrequire \"helper\"\n\nmodule Nokogiri\n  module HTML\n    module SAX\n      class TestParser < Nokogiri::SAX::TestCase\n        def setup\n          super\n          @parser = HTML::SAX::Parser.new(Doc.new)\n        end\n\n        def test_parse_empty_document\n          # This caused a segfault in libxml 2.6.x\n          assert_nil(@parser.parse(\"\"))\n        end\n\n        def test_parse_empty_file\n          # Make sure empty files don't break stuff\n          empty_file_name = File.join(ASSETS_DIR, \"bogus.xml\")\n          @parser.parse_file(empty_file_name) # assert_nothing_raised\n        end\n\n        def test_parse_file\n          @parser.parse_file(HTML_FILE)\n\n          # Take a look at the comment in test_parse_document to know\n          # a possible reason to this difference.\n          if Nokogiri.uses_libxml?\n            assert_equal(1111, @parser.document.end_elements.length)\n          else\n            assert_equal(1120, @parser.document.end_elements.length)\n          end\n        end\n\n        def test_parse_file_nil_argument\n          assert_raises(ArgumentError) do\n            @parser.parse_file(nil)\n          end\n        end\n\n        def test_parse_file_non_existant\n          assert_raises(Errno::ENOENT) do\n            @parser.parse_file(\"there_is_no_reasonable_way_this_file_exists\")\n          end\n        end\n\n        def test_parse_file_with_dir\n          assert_raises(Errno::EISDIR) do\n            @parser.parse_file(File.dirname(__FILE__))\n          end\n        end\n\n        def test_parse_memory_nil\n          assert_raises(ArgumentError) do\n            @parser.parse_memory(nil)\n          end\n        end\n\n        def test_parse_force_encoding\n          @parser.parse_memory(<<-HTML, \"UTF-8\")\n          <meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\">\n          \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\n          HTML\n          assert_equal(\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\",\n            @parser.document.data.join.strip)\n        end\n\n        def test_parse_document\n          @parser.parse_memory(<<-eoxml)\n            <p>Paragraph 1</p>\n            <p>Paragraph 2</p>\n          eoxml\n\n          # JRuby version is different because of the internal implementation\n          # JRuby version uses NekoHTML which inserts empty \"head\" elements.\n          #\n          # Currently following features are set:\n          # \"http://cyberneko.org/html/properties/names/elems\" => \"lower\"\n          # \"http://cyberneko.org/html/properties/names/attrs\" => \"lower\"\n          if Nokogiri.uses_libxml?\n            assert_equal([[\"html\", []], [\"body\", []], [\"p\", []], [\"p\", []]],\n              @parser.document.start_elements)\n          else\n            assert_equal([[\"html\", []], [\"head\", []], [\"body\", []], [\"p\", []], [\"p\", []]],\n              @parser.document.start_elements)\n          end\n        end\n\n        def test_parser_attributes\n          html = <<~eohtml\n            <html>\n              <head>\n                <title>hello</title>\n              </head>\n            <body>\n              <img src=\"face.jpg\" title=\"daddy &amp; me\">\n              <hr noshade size=\"2\">\n            </body>\n            </html>\n          eohtml\n\n          block_called = false\n          @parser.parse(html) do |ctx|\n            block_called = true\n            ctx.replace_entities = true\n          end\n\n          assert(block_called)\n\n          noshade_value = if Nokogiri.uses_libxml?(\"< 2.7.7\")\n            [\"noshade\", \"noshade\"]\n          else\n            [\"noshade\", nil]\n          end\n\n          assert_equal([\n            [\"html\", []],\n            [\"head\", []],\n            [\"title\", []],\n            [\"body\", []],\n            [\"img\", [\n              [\"src\", \"face.jpg\"],\n              [\"title\", \"daddy & me\"],\n            ],],\n            [\"hr\", [\n              noshade_value,\n              [\"size\", \"2\"],\n            ],],\n          ], @parser.document.start_elements)\n        end\n\n        HTML_WITH_BR_TAG = <<-EOF\n        <html>\n          <head></head>\n          <body>\n            <div>\n              hello\n              <br>\n            </div>\n\n            <div>\n              hello again\n            </div>\n          </body>\n        </html>\n        EOF\n\n        def test_parsing_dom_error_from_string\n          @parser.parse(HTML_WITH_BR_TAG)\n          assert_equal(6, @parser.document.start_elements.length)\n        end\n\n        def test_parsing_dom_error_from_io\n          @parser.parse(StringIO.new(HTML_WITH_BR_TAG))\n          assert_equal(6, @parser.document.start_elements.length)\n        end\n\n        def test_empty_processing_instruction\n          @parser.parse_memory(\"<strong>this will segfault<?strong>\")\n        end\n      end\n    end\n  end\nend\n", "# -*- coding: utf-8 -*-\n# frozen_string_literal: true\n\nrequire \"helper\"\n\nmodule Nokogiri\n  module HTML\n    module SAX\n      class TestParserContext < Nokogiri::SAX::TestCase\n        def test_from_io\n          ctx = ParserContext.new(StringIO.new(\"fo\"), \"UTF-8\")\n          assert(ctx)\n        end\n\n        def test_from_string\n          ctx = ParserContext.new(\"blah blah\")\n          assert(ctx)\n        end\n\n        def test_parse_with\n          ctx = ParserContext.new(\"blah\")\n          assert_raises(ArgumentError) do\n            ctx.parse_with(nil)\n          end\n        end\n\n        def test_parse_with_sax_parser\n          # assert_nothing_raised do\n          xml = \"<root />\"\n          ctx = ParserContext.new(xml)\n          parser = Parser.new(Doc.new)\n          ctx.parse_with(parser)\n          # end\n        end\n\n        def test_from_file\n          # assert_nothing_raised do\n          ctx = ParserContext.file(HTML_FILE, \"UTF-8\")\n          parser = Parser.new(Doc.new)\n          ctx.parse_with(parser)\n          # end\n        end\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"helper\"\n\nmodule Nokogiri\n  module SAX\n    class TestCase\n      describe Nokogiri::XML::SAX::Parser do\n        let(:parser) { Nokogiri::XML::SAX::Parser.new(Doc.new) }\n\n        it :test_parser_context_yielded_io do\n          doc = Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(doc)\n          xml = \"<foo a='&amp;b'/>\"\n\n          block_called = false\n          parser.parse(StringIO.new(xml)) do |ctx|\n            block_called = true\n            ctx.replace_entities = true\n          end\n\n          assert(block_called)\n\n          assert_equal([[\"foo\", [[\"a\", \"&b\"]]]], doc.start_elements)\n        end\n\n        it :test_parser_context_yielded_in_memory do\n          doc = Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(doc)\n          xml = \"<foo a='&amp;b'/>\"\n\n          block_called = false\n          parser.parse(xml) do |ctx|\n            block_called = true\n            ctx.replace_entities = true\n          end\n\n          assert(block_called)\n\n          assert_equal([[\"foo\", [[\"a\", \"&b\"]]]], doc.start_elements)\n        end\n\n        it :test_empty_decl do\n          parser = Nokogiri::XML::SAX::Parser.new(Doc.new)\n\n          xml = \"<root />\"\n          parser.parse(xml)\n          assert(parser.document.start_document_called)\n          assert_nil(parser.document.xmldecls)\n        end\n\n        it :test_xml_decl do\n          [\n            ['<?xml version=\"1.0\" ?>', [\"1.0\"]],\n            ['<?xml version=\"1.0\" encoding=\"UTF-8\" ?>', [\"1.0\", \"UTF-8\"]],\n            ['<?xml version=\"1.0\" standalone=\"yes\"?>', [\"1.0\", \"yes\"]],\n            ['<?xml version=\"1.0\" standalone=\"no\"?>', [\"1.0\", \"no\"]],\n            ['<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>', [\"1.0\", \"UTF-8\", \"no\"]],\n            ['<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>', [\"1.0\", \"ISO-8859-1\", \"yes\"]],\n          ].each do |decl, value|\n            parser = Nokogiri::XML::SAX::Parser.new(Doc.new)\n\n            xml = \"#{decl}\\n<root />\"\n            parser.parse(xml)\n            assert(parser.document.start_document_called)\n            assert_equal(value, parser.document.xmldecls)\n          end\n        end\n\n        it :test_parse_empty do\n          assert_raises(RuntimeError) do\n            parser.parse(\"\")\n          end\n        end\n\n        it :test_namespace_declaration_order_is_saved do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>\n              <a foo:bar='hello' />\n            </root>\n          EOF\n          assert_equal(2, parser.document.start_elements_namespace.length)\n          el = parser.document.start_elements_namespace.first\n          namespaces = el.last\n          assert_equal([\"foo\", \"http://foo.example.com/\"], namespaces.first)\n          assert_equal([nil, \"http://example.com/\"], namespaces.last)\n        end\n\n        it :test_bad_document_calls_error_handler do\n          parser.parse(\"<foo><bar></foo>\")\n          assert(parser.document.errors)\n          refute_empty(parser.document.errors)\n        end\n\n        it :test_namespace_are_super_fun_to_parse do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/'>\n              <a foo:bar='hello' />\n              <b xmlns:foo='http://bar.example.com/'>\n                <a foo:bar='hello' />\n              </b>\n              <foo:bar>hello world</foo:bar>\n            </root>\n          EOF\n\n          refute_empty(parser.document.start_elements_namespace)\n          el = parser.document.start_elements_namespace[1]\n          assert_equal(\"a\", el.first)\n          assert_equal(1, el[1].length)\n\n          attribute = el[1].first\n          assert_equal(\"bar\", attribute.localname)\n          assert_equal(\"foo\", attribute.prefix)\n          assert_equal(\"hello\", attribute.value)\n          assert_equal(\"http://foo.example.com/\", attribute.uri)\n        end\n\n        it :test_sax_v1_namespace_attribute_declarations do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>\n              <a foo:bar='hello' />\n              <b xmlns:foo='http://bar.example.com/'>\n                <a foo:bar='hello' />\n              </b>\n              <foo:bar>hello world</foo:bar>\n            </root>\n          EOF\n          refute_empty(parser.document.start_elements)\n          elm = parser.document.start_elements.first\n          assert_equal(\"root\", elm.first)\n          assert_includes(elm[1], [\"xmlns:foo\", \"http://foo.example.com/\"])\n          assert_includes(elm[1], [\"xmlns\", \"http://example.com/\"])\n        end\n\n        it :test_sax_v1_namespace_nodes do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>\n              <a foo:bar='hello' />\n              <b xmlns:foo='http://bar.example.com/'>\n                <a foo:bar='hello' />\n              </b>\n              <foo:bar>hello world</foo:bar>\n            </root>\n          EOF\n          assert_equal(5, parser.document.start_elements.length)\n          assert_includes(parser.document.start_elements.map(&:first), \"foo:bar\")\n          assert_includes(parser.document.end_elements.map(&:first), \"foo:bar\")\n        end\n\n        it :test_start_is_called_without_namespace do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>\n            <foo:f><bar></foo:f>\n            </root>\n          EOF\n          assert_equal(\n            [\"root\", \"foo:f\", \"bar\"],\n            parser.document.start_elements.map(&:first)\n          )\n        end\n\n        it :test_parser_sets_encoding do\n          parser = Nokogiri::XML::SAX::Parser.new(Doc.new, \"UTF-8\")\n          assert_equal(\"UTF-8\", parser.encoding)\n        end\n\n        it :test_errors_set_after_parsing_bad_dom do\n          doc = Nokogiri::XML(\"<foo><bar></foo>\")\n          assert(doc.errors)\n\n          parser.parse(\"<foo><bar></foo>\")\n          assert(parser.document.errors)\n          refute_empty(parser.document.errors)\n\n          doc.errors.each do |error|\n            assert_equal(\"UTF-8\", error.message.encoding.name)\n          end\n\n          # when using JRuby Nokogiri, more errors will be generated as the DOM\n          # parser continue to parse an ill formed document, while the sax parser\n          # will stop at the first error\n          unless Nokogiri.jruby?\n            assert_equal(doc.errors.length, parser.document.errors.length)\n          end\n        end\n\n        it :test_parse_with_memory_argument do\n          parser.parse(File.read(XML_FILE))\n          refute_empty(parser.document.cdata_blocks)\n        end\n\n        it :test_parse_with_io_argument do\n          File.open(XML_FILE, \"rb\") do |f|\n            parser.parse(f)\n          end\n          refute_empty(parser.document.cdata_blocks)\n        end\n\n        it :test_parse_io do\n          call_parse_io_with_encoding(\"UTF-8\")\n        end\n\n        # issue #828\n        it :test_parse_io_lower_case_encoding do\n          call_parse_io_with_encoding(\"utf-8\")\n        end\n\n        def call_parse_io_with_encoding(encoding)\n          File.open(XML_FILE, \"rb\") do |f|\n            parser.parse_io(f, encoding)\n          end\n          refute_empty(parser.document.cdata_blocks)\n\n          called = false\n          parser.document.start_elements.flatten.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n\n          called = false\n          parser.document.end_elements.flatten.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n\n          called = false\n          parser.document.data.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n\n          called = false\n          parser.document.comments.flatten.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n\n          called = false\n          parser.document.cdata_blocks.flatten.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n        end\n\n        it :test_parse_file do\n          parser.parse_file(XML_FILE)\n\n          assert_raises(ArgumentError) do\n            parser.parse_file(nil)\n          end\n\n          assert_raises(Errno::ENOENT) do\n            parser.parse_file(\"\")\n          end\n          assert_raises(Errno::EISDIR) do\n            parser.parse_file(File.expand_path(File.dirname(__FILE__)))\n          end\n        end\n\n        it :test_render_parse_nil_param do\n          assert_raises(ArgumentError) { parser.parse_memory(nil) }\n        end\n\n        it :test_bad_encoding_args do\n          assert_raises(ArgumentError) { Nokogiri::XML::SAX::Parser.new(Doc.new, \"not an encoding\") }\n          assert_raises(ArgumentError) { parser.parse_io(StringIO.new(\"<root/>\"), \"not an encoding\") }\n        end\n\n        it :test_ctag do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">\n              <![CDATA[ This is a comment ]]>\n              Paragraph 1\n            </p>\n          EOF\n          assert_equal([\" This is a comment \"], parser.document.cdata_blocks)\n        end\n\n        it :test_comment do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">\n              <!-- This is a comment -->\n              Paragraph 1\n            </p>\n          EOF\n          assert_equal([\" This is a comment \"], parser.document.comments)\n        end\n\n        it :test_characters do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">Paragraph 1</p>\n          EOF\n          assert_equal([\"Paragraph 1\"], parser.document.data)\n        end\n\n        it :test_end_document do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">Paragraph 1</p>\n          EOF\n          assert(parser.document.end_document_called)\n        end\n\n        it :test_end_element do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">Paragraph 1</p>\n          EOF\n          assert_equal([[\"p\"]], parser.document.end_elements)\n        end\n\n        it :test_start_element_attrs do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">Paragraph 1</p>\n          EOF\n          assert_equal([[\"p\", [[\"id\", \"asdfasdf\"]]]], parser.document.start_elements)\n        end\n\n        it :test_start_element_attrs_include_namespaces do\n          parser.parse_memory(<<~EOF)\n            <p xmlns:foo='http://foo.example.com/'>Paragraph 1</p>\n          EOF\n          assert_equal(\n            [[\"p\", [[\"xmlns:foo\", \"http://foo.example.com/\"]]]],\n            parser.document.start_elements\n          )\n        end\n\n        it :test_processing_instruction do\n          parser.parse_memory(<<~EOF)\n            <?xml-stylesheet href=\"a.xsl\" type=\"text/xsl\"?>\n            <?xml version=\"1.0\"?>\n          EOF\n          assert_equal(\n            [[\"xml-stylesheet\", 'href=\"a.xsl\" type=\"text/xsl\"']],\n            parser.document.processing_instructions\n          )\n        end\n\n        it :test_parse_document do\n          skip_unless_libxml2(\"JRuby SAXParser only parses well-formed XML documents\")\n          parser.parse_memory(<<~EOF)\n            <p>Paragraph 1</p>\n            <p>Paragraph 2</p>\n          EOF\n        end\n\n        it :test_parser_attributes do\n          xml = <<~EOF\n            <?xml version=\"1.0\" ?><root><foo a=\"&amp;b\" c=\"&gt;d\" /></root>\n          EOF\n\n          block_called = false\n          parser.parse(xml) do |ctx|\n            block_called = true\n            ctx.replace_entities = true\n          end\n\n          assert(block_called)\n\n          assert_equal(\n            [[\"root\", []], [\"foo\", [[\"a\", \"&b\"], [\"c\", \">d\"]]]], parser.document.start_elements\n          )\n        end\n\n        it :test_recovery_from_incorrect_xml do\n          xml = <<~EOF\n            <?xml version=\"1.0\" ?><Root><Data><?xml version='1.0'?><Item>hey</Item></Data><Data><Item>hey yourself</Item></Data></Root>\n          EOF\n\n          block_called = false\n          parser.parse(xml) do |ctx|\n            block_called = true\n            ctx.recovery = true\n          end\n\n          assert(block_called)\n\n          assert_equal(\n            [[\"Root\", []], [\"Data\", []], [\"Item\", []], [\"Data\", []], [\"Item\", []]],\n            parser.document.start_elements\n          )\n        end\n\n        it :test_square_bracket_in_text do\n          # issue 1261\n          xml = <<~EOF\n            <tu tuid=\"87dea04cf60af103ff09d1dba36ae820\" segtype=\"block\">\n              <prop type=\"x-smartling-string-variant\">en:#:home_page:#:stories:#:[6]:#:name</prop>\n              <tuv xml:lang=\"en-US\"><seg>Sandy S.</seg></tuv>\n            </tu>\n          EOF\n          parser.parse(xml)\n          assert_includes(parser.document.data, \"en:#:home_page:#:stories:#:[6]:#:name\")\n        end\n\n        it :test_large_cdata_is_handled do\n          skip(\"see #2132 and https://gitlab.gnome.org/GNOME/libxml2/-/issues/200\") if Nokogiri.uses_libxml?(\"<=2.9.10\")\n\n          template = <<~EOF\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <soapenv:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://example.com\">\n               <soapenv:Header>\n                  <AuthHeader xsi:type=\"ns:vAuthHeader\">\n                  <userName xsi:type=\"xsd:string\">gorilla</userName>\n                  <password xsi:type=\"xsd:string\">secret</password>\n                </AuthHeader>\n               </soapenv:Header>\n              <soapenv:Body>\n                <ns:checkToken soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n                  <checkToken xsi:type=\"xsd:string\"><![CDATA[%s]]></checkToken>\n                </ns:checkToken>\n               </soapenv:Body>\n            </soapenv:Envelope>\n          EOF\n\n          factor = 10\n          huge_data = \"a\" * (1024 * 1024 * factor)\n          xml = StringIO.new(template % huge_data)\n\n          handler = Nokogiri::SAX::TestCase::Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(handler)\n          parser.parse(xml)\n\n          assert_predicate(handler.errors, :empty?)\n        end\n\n        it \"does not resolve entities by default\" do\n          xml = <<~EOF\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <!DOCTYPE doc [\n              <!ENTITY local SYSTEM \"file:///#{File.expand_path(__FILE__)}\">\n              <!ENTITY custom \"resolved>\n            ]>\n            <doc><foo>&local;</foo><foo>&custom;</foo></doc>\n          EOF\n\n          doc = Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(doc)\n          parser.parse(xml)\n\n          assert_nil(doc.data)\n        end\n\n        it \"does not resolve network external entities by default\" do\n          xml = <<~EOF\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <!DOCTYPE doc [\n              <!ENTITY remote SYSTEM \"http://0.0.0.0:8080/evil.dtd\">\n            ]>\n            <doc><foo>&remote;</foo></doc>\n          EOF\n\n          doc = Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(doc)\n          parser.parse(xml)\n\n          assert_nil(doc.data)\n        end\n\n        it \"handles parser warnings\" do\n          skip_unless_libxml2(\"this is testing error message formatting in the C extension\")\n          xml = <<~XML\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <doc xmlns=\"x\">\n              this element's ns definition is crafted to raise a warning\n              from libxml2's SAX2.c:xmlSAX2AttributeInternal()\n            </doc>\n          XML\n          parser.parse(xml)\n          refute_empty(parser.document.warnings)\n          assert_match(/URI .* is not absolute/, parser.document.warnings.first)\n        end\n      end\n    end\n  end\nend\n", "# -*- coding: utf-8 -*-\n# frozen_string_literal: true\n\nrequire \"helper\"\n\nmodule Nokogiri\n  module XML\n    module SAX\n      class TestParserContext < Nokogiri::SAX::TestCase\n        def setup\n          super\n          @xml = <<~EOF\n            <hello>\n\n            world\n            <inter>\n                <net>\n                </net>\n            </inter>\n\n            </hello>\n          EOF\n        end\n\n        class Counter < Nokogiri::XML::SAX::Document\n          attr_accessor :context, :lines, :columns\n\n          def initialize\n            super\n            @context = nil\n            @lines   = []\n            @columns = []\n          end\n\n          def start_element(name, attrs = [])\n            @lines << [name, context.line]\n            @columns << [name, context.column]\n          end\n        end\n\n        def test_line_numbers\n          sax_handler = Counter.new\n\n          parser = Nokogiri::XML::SAX::Parser.new(sax_handler)\n          parser.parse(@xml) do |ctx|\n            sax_handler.context = ctx\n          end\n\n          assert_equal([[\"hello\", 1], [\"inter\", 4], [\"net\", 5]],\n            sax_handler.lines)\n        end\n\n        def test_column_numbers\n          sax_handler = Counter.new\n\n          parser = Nokogiri::XML::SAX::Parser.new(sax_handler)\n          parser.parse(@xml) do |ctx|\n            sax_handler.context = ctx\n          end\n\n          assert_equal([[\"hello\", 7], [\"inter\", 7], [\"net\", 9]],\n            sax_handler.columns)\n        end\n\n        def test_replace_entities\n          pc = ParserContext.new(StringIO.new(\"<root />\"), \"UTF-8\")\n          pc.replace_entities = false\n          refute(pc.replace_entities)\n\n          pc.replace_entities = true\n          assert(pc.replace_entities)\n        end\n\n        def test_recovery\n          pc = ParserContext.new(StringIO.new(\"<root />\"), \"UTF-8\")\n          pc.recovery = false\n          refute(pc.recovery)\n\n          pc.recovery = true\n          assert(pc.recovery)\n        end\n\n        def test_from_io\n          ctx = ParserContext.new(StringIO.new(\"fo\"), \"UTF-8\")\n          assert(ctx)\n        end\n\n        def test_from_string\n          assert(ParserContext.new(\"blah blah\"))\n        end\n\n        def test_parse_with\n          ctx = ParserContext.new(\"blah\")\n          assert_raises(ArgumentError) do\n            ctx.parse_with(nil)\n          end\n        end\n\n        def test_parse_with_sax_parser\n          xml = \"<root />\"\n          ctx = ParserContext.new(xml)\n          parser = Parser.new(Doc.new)\n          assert_nil(ctx.parse_with(parser))\n        end\n\n        def test_from_file\n          ctx = ParserContext.file(XML_FILE)\n          parser = Parser.new(Doc.new)\n          assert_nil(ctx.parse_with(parser))\n        end\n\n        def test_parse_with_returns_nil\n          xml = \"<root />\"\n          ctx = ParserContext.new(xml)\n          parser = Parser.new(Doc.new)\n          assert_nil(ctx.parse_with(parser))\n        end\n      end\n    end\n  end\nend\n"], "fixing_code": ["# Nokogiri Changelog\n\nNokogiri follows [Semantic Versioning](https://semver.org/), please see the [README.md](README.md) for details.\n\n---\n\n## 1.14.0 / unreleased\n\n### Notes\n\n#### Faster, more reliable installation: Native Gem for ARM64 Linux\n\nThis version of Nokogiri ships full native gem support for the `aarch64-linux` platform, which should support AWS Graviton and other ARM Linux platforms. Please note that glibc >= 2.29 is required for aarch64-linux systems, see [Supported Platforms](https://nokogiri.org/#supported-platforms) for more information.\n\n\n#### Maven-managed JRuby dependencies\n\nThis version of Nokogiri uses [`jar-dependencies`](https://github.com/mkristian/jar-dependencies) to manage most of the vendored Java dependencies. `nokogiri -v` now outputs maven metadata for all Java dependencies, and `Nokogiri::VERSION_INFO` also contains this metadata. [[#2432](https://github.com/sparklemotion/nokogiri/issues/2432)]\n\n\n### Dependencies\n\n* [JRuby] Vendored Jing is updated from com.thaiopensource:jing:20091111 to nu.validator:jing:20200702VNU.\n* [JRuby] New dependency on Saxon-HE 9.6.0-4 (via nu.validator:jing:20200702VNU).\n\n\n### Fixed\n\n* [CRuby] UTF-16-encoded documents longer than ~4000 code points now serialize properly. Previously the serialized document was corrupted when it exceeded the length of libxml2's internal string buffer. [[#752](https://github.com/sparklemotion/nokogiri/issues/752)]\n* [HTML5] The Gumbo parser now correctly handles text at the end of `form` elements.\n* `{HTML4,XML}::SAX::{Parser,ParserContext}` constructor methods now raise `TypeError` instead of segfaulting when an incorrect type is passed. (Thanks to [@agustingianni](https://github.com/agustingianni) from the Github Security Lab for reporting!)\n\n\n### Improved\n\n* Compare `Encoding` objects rather than compare their names. This is a slight performance improvement and is future-proof. [[#2454](https://github.com/sparklemotion/nokogiri/issues/2454)] (Thanks, [@casperisfine](https://github.com/casperisfine)!)\n* Avoid compile-time conflict with system-installed `gumbo.h` on OpenBSD. [[#2464](https://github.com/sparklemotion/nokogiri/issues/2464)]\n* Remove calls to `vasprintf` in favor of platform-independent `rb_vsprintf`\n* Prefer `ruby_xmalloc` to `malloc` within the C extension. [[#2480](https://github.com/sparklemotion/nokogiri/issues/2480)] (Thanks, [@Garfield96](https://github.com/Garfield96)!)\n* Installation from source on systems missing libiconv will once again generate a helpful error message (broken since v1.11.0). [[#2505](https://github.com/sparklemotion/nokogiri/issues/2505)]\n\n\n## 1.13.5 / 2022-05-04\n\n### Security\n\n* [CRuby] Vendored libxml2 is updated to address [CVE-2022-29824](https://nvd.nist.gov/vuln/detail/CVE-2022-29824). See [GHSA-cgx6-hpwq-fhv5](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-cgx6-hpwq-fhv5) for more information.\n\n\n### Dependencies\n\n* [CRuby] Vendored libxml2 is updated from v2.9.13 to [v2.9.14](https://gitlab.gnome.org/GNOME/libxml2/-/releases/v2.9.14).\n\n\n### Improvements\n\n* [CRuby] The libxml2 HTML parser no longer exhibits quadratic behavior when recovering some broken markup related to start-of-tag and bare `<` characters.\n\n\n### Changed\n\n* [CRuby] The libxml2 HTML parser in v2.9.14 recovers from some broken markup differently. Notably, the XML CDATA escape sequence `<![CDATA[` and incorrectly-opened comments will result in HTML text nodes starting with `&lt;!` instead of skipping the invalid tag. This behavior is a direct result of the [quadratic-behavior fix](https://gitlab.gnome.org/GNOME/libxml2/-/commit/798bdf1) noted above. The behavior of downstream sanitizers relying on this behavior will also change. Some tests describing the changed behavior are in [`test/html4/test_comments.rb`](https://github.com/sparklemotion/nokogiri/blob/3ed5bf2b5a367cb9dc6e329c5a1c512e1dd4565d/test/html4/test_comments.rb#L187-L204).\n\n\n## 1.13.4 / 2022-04-11\n\n### Security\n\n* Address [CVE-2022-24836](https://nvd.nist.gov/vuln/detail/CVE-2022-24836), a regular expression denial-of-service vulnerability. See [GHSA-crjr-9rc5-ghw8](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-crjr-9rc5-ghw8) for more information.\n* [CRuby] Vendored zlib is updated to address [CVE-2018-25032](https://nvd.nist.gov/vuln/detail/CVE-2018-25032). See [GHSA-v6gp-9mmm-c6p5](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-v6gp-9mmm-c6p5) for more information.\n* [JRuby] Vendored Xerces-J (`xerces:xercesImpl`) is updated to address [CVE-2022-23437](https://nvd.nist.gov/vuln/detail/CVE-2022-23437). See [GHSA-xxx9-3xcr-gjj3](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xxx9-3xcr-gjj3) for more information.\n* [JRuby] Vendored nekohtml (`org.cyberneko.html`) is updated to address [CVE-2022-24839](https://nvd.nist.gov/vuln/detail/CVE-2022-24839). See [GHSA-gx8x-g87m-h5q6](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-gx8x-g87m-h5q6) for more information.\n\n\n### Dependencies\n\n* [CRuby] Vendored zlib is updated from 1.2.11 to 1.2.12. (See [LICENSE-DEPENDENCIES.md](https://github.com/sparklemotion/nokogiri/blob/v1.13.x/LICENSE-DEPENDENCIES.md#platform-releases) for details on which packages redistribute this library.)\n* [JRuby] Vendored Xerces-J (`xerces:xercesImpl`) is updated from 2.12.0 to 2.12.2.\n* [JRuby] Vendored nekohtml (`org.cyberneko.html`) is updated from a fork of 1.9.21 to 1.9.22.noko2. This fork is now publicly developed at https://github.com/sparklemotion/nekohtml\n\n\n## 1.13.3 / 2022-02-21\n\n### Fixed\n\n* [CRuby] Revert a HTML4 parser bug in libxml 2.9.13 (introduced in Nokogiri v1.13.2). The bug causes libxml2's HTML4 parser to fail to recover when encountering a bare `<` character in some contexts. This version of Nokogiri restores the earlier behavior, which is to recover from the parse error and treat the `<` as normal character data (which will be serialized as `&lt;` in a text node). The bug (and the fix) is only relevant when the `RECOVER` parse option is set, as it is by default. [[#2461](https://github.com/sparklemotion/nokogiri/issues/2461)]\n\n\n## 1.13.2 / 2022-02-21\n\n### Security\n\n* [CRuby] Vendored libxml2 is updated from 2.9.12 to 2.9.13. This update addresses [CVE-2022-23308](https://nvd.nist.gov/vuln/detail/CVE-2022-23308).\n* [CRuby] Vendored libxslt is updated from 1.1.34 to 1.1.35. This update addresses [CVE-2021-30560](https://nvd.nist.gov/vuln/detail/CVE-2021-30560).\n\nPlease see [GHSA-fq42-c5rg-92c2](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-fq42-c5rg-92c2) for more information about these CVEs.\n\n\n### Dependencies\n\n* [CRuby] Vendored libxml2 is updated from 2.9.12 to 2.9.13. Full changelog is available at https://download.gnome.org/sources/libxml2/2.9/libxml2-2.9.13.news\n* [CRuby] Vendored libxslt is updated from 1.1.34 to 1.1.35. Full changelog is available at https://download.gnome.org/sources/libxslt/1.1/libxslt-1.1.35.news\n\n\n## 1.13.1 / 2022-01-13\n\n### Fixed\n\n* Fix `Nokogiri::XSLT.quote_params` regression in v1.13.0 that raised an exception when non-string stylesheet parameters were passed. Non-string parameters (e.g., integers and symbols) are now explicitly supported and both keys and values will be stringified with `#to_s`. [[#2418](https://github.com/sparklemotion/nokogiri/issues/2418)]\n* Fix CSS selector query regression in v1.13.0 that raised an `Nokogiri::XML::XPath::SyntaxError` when parsing XPath attributes mixed into the CSS query. Although this mash-up of XPath and CSS syntax previously worked unintentionally, it is now an officially supported feature and is documented as such. [[#2419](https://github.com/sparklemotion/nokogiri/issues/2419)]\n\n\n## 1.13.0 / 2022-01-06\n\n### Notes\n\n#### Ruby\n\nThis release introduces native gem support for Ruby 3.1. Please note that Windows users should use the `x64-mingw-ucrt` platform gem for Ruby 3.1, and `x64-mingw32` for Ruby 2.6&ndash;3.0 (see [RubyInstaller 3.1.0 release notes](https://rubyinstaller.org/2021/12/31/rubyinstaller-3.1.0-1-released.html)).\n\nThis release ends support for:\n\n* Ruby 2.5, for which [official support ended 2021-03-31](https://www.ruby-lang.org/en/downloads/branches/).\n* JRuby 9.2, which is a Ruby 2.5-compatible release.\n\n\n#### Faster, more reliable installation: Native Gem for ARM64 Linux\n\nThis version of Nokogiri ships experimental native gem support for the `aarch64-linux` platform, which should support AWS Graviton and other ARM Linux platforms. We don't yet have CI running for this platform, and so we're interested in hearing back from y'all whether this is working, and what problems you're seeing. Please send us feedback here: [Feedback: Have you used the `aarch64-linux` native gem?](https://github.com/sparklemotion/nokogiri/discussions/2359)\n\n\n#### Publishing\n\nThis version of Nokogiri opts-in to the [\"MFA required to publish\" setting](https://guides.rubygems.org/mfa-requirement-opt-in/) on Rubygems.org. This and all future Nokogiri gem files must be published to Rubygems by an account with multi-factor authentication enabled. This should provide some additional protection against supply-chain attacks.\n\nA related discussion about Trust exists at [#2357](https://github.com/sparklemotion/nokogiri/issues/2357) in which I invite you to participate if you have feelings or opinions on this topic.\n\n\n### Dependencies\n\n* [CRuby] Vendored libiconv is updated from 1.15 to 1.16. (Note that libiconv is only redistributed in the native windows and native darwin gems, see [`LICENSE-DEPENDENCIES.md`](LICENSE-DEPENDENCIES.md) for more information.) [[#2206](https://github.com/sparklemotion/nokogiri/issues/2206)]\n* [CRuby] Upgrade mini_portile2 dependency from `~> 2.6.1` to `~> 2.7.0`. (\"ruby\" platform gem only.)\n\n\n### Improved\n\n* `{XML,HTML4}::DocumentFragment` constructors all now take an optional parse options parameter or block (similar to Document constructors). [[#1692](https://github.com/sparklemotion/nokogiri/issues/1692)] (Thanks, [@JackMc](https://github.com/JackMc)!)\n* `Nokogiri::CSS.xpath_for` allows an `XPathVisitor` to be injected, for finer-grained control over how CSS queries are translated into XPath.\n* [CRuby] `XML::Reader#encoding` will return the encoding detected by the parser when it's not passed to the constructor. [[#980](https://github.com/sparklemotion/nokogiri/issues/980)]\n* [CRuby] Handle abruptly-closed HTML comments as recommended by WHATWG. (Thanks to [tehryanx](https://hackerone.com/tehryanx?type=user) for reporting!)\n* [CRuby] `Node#line` is no longer capped at 65535. libxml v2.9.0 and later support a new parse option, exposed as `Nokogiri::XML::ParseOptions::PARSE_BIG_LINES`, which is turned on by default in `ParseOptions::DEFAULT_{XML,XSLT,HTML,SCHEMA}` (Note that JRuby already supported large line numbers.) [[#1764](https://github.com/sparklemotion/nokogiri/issues/1764), [#1493](https://github.com/sparklemotion/nokogiri/issues/1493), [#1617](https://github.com/sparklemotion/nokogiri/issues/1617), [#1505](https://github.com/sparklemotion/nokogiri/issues/1505), [#1003](https://github.com/sparklemotion/nokogiri/issues/1003), [#533](https://github.com/sparklemotion/nokogiri/issues/533)]\n* [CRuby] If a cycle is introduced when reparenting a node (i.e., the node becomes its own ancestor), a `RuntimeError` is raised. libxml2 does no checking for this, which means cycles would otherwise result in infinite loops on subsequent operations. (Note that JRuby already did this.) [[#1912](https://github.com/sparklemotion/nokogiri/issues/1912)]\n* [CRuby] Source builds will download zlib and libiconv via HTTPS. (\"ruby\" platform gem only.) [[#2391](https://github.com/sparklemotion/nokogiri/issues/2391)] (Thanks, [@jmartin-r7](https://github.com/jmartin-r7)!)\n* [JRuby] `Node#line` behavior has been modified to return the line number of the node in the _final DOM structure_. This behavior is different from CRuby, which returns the node's position in the _input string_. Ideally the two implementations would be the same, but at least is now officially documented and tested. The real-world impact of this change is that the value returned in JRuby is greater by 1 to account for the XML prolog in the output. [[#2380](https://github.com/sparklemotion/nokogiri/issues/2380)] (Thanks, [@dabdine](https://github.com/dabdine)!)\n\n\n### Fixed\n\n* CSS queries on HTML5 documents now correctly match foreign elements (SVG, MathML) when namespaces are not specified in the query. [[#2376](https://github.com/sparklemotion/nokogiri/issues/2376)]\n* `XML::Builder` blocks restore context properly when exceptions are raised. [[#2372](https://github.com/sparklemotion/nokogiri/issues/2372)] (Thanks, [@ric2b](https://github.com/ric2b) and [@rinthedev](https://github.com/rinthedev)!)\n* The `Nokogiri::CSS::Parser` cache now uses the `XPathVisitor` configuration as part of the cache key, preventing incorrect cache results from being returned when multiple `XPathVisitor` options are being used.\n* Error recovery from in-context parsing (e.g., `Node#parse`) now always uses the correct `DocumentFragment` class. Previously `Nokogiri::HTML4::DocumentFragment` was always used, even for XML documents. [[#1158](https://github.com/sparklemotion/nokogiri/issues/1158)]\n* `DocumentFragment#>` now works properly, matching a CSS selector against only the fragment roots. [[#1857](https://github.com/sparklemotion/nokogiri/issues/1857)]\n* `XML::DocumentFragment#errors` now correctly contains any parsing errors encountered. Previously this was always empty. (Note that `HTML::DocumentFragment#errors` already did this.)\n* [CRuby] Fix memory leak in `Document#canonicalize` when inclusive namespaces are passed in. [[#2345](https://github.com/sparklemotion/nokogiri/issues/2345)]\n* [CRuby] Fix memory leak in `Document#canonicalize` when an argument type error is raised. [[#2345](https://github.com/sparklemotion/nokogiri/issues/2345)]\n* [CRuby] Fix memory leak in `EncodingHandler` where iconv handlers were not being cleaned up. [[#2345](https://github.com/sparklemotion/nokogiri/issues/2345)]\n* [CRuby] Fix memory leak in XPath custom handlers where string arguments were not being cleaned up. [[#2345](https://github.com/sparklemotion/nokogiri/issues/2345)]\n* [CRuby] Fix memory leak in `Reader#base_uri` where the string returned by libxml2 was not freed. [[#2347](https://github.com/sparklemotion/nokogiri/issues/2347)]\n* [JRuby] Deleting a `Namespace` from a `NodeSet` no longer modifies the `href` to be the default namespace URL.\n* [JRuby] Fix XHTML formatting of closing tags for non-container elements. [[#2355](https://github.com/sparklemotion/nokogiri/issues/2355)]\n\n\n### Deprecated\n\n* Passing a `Nokogiri::XML::Node` as the second parameter to `Node.new` is deprecated and will generate a warning. This parameter should be a kind of `Nokogiri::XML::Document`. This will become an error in a future version of Nokogiri. [[#975](https://github.com/sparklemotion/nokogiri/issues/975)]\n* `Nokogiri::CSS::Parser`, `Nokogiri::CSS::Tokenizer`, and `Nokogiri::CSS::Node` are now internal-only APIs that are no longer documented, and should not be considered stable. With the introduction of `XPathVisitor` injection into `Nokogiri::CSS.xpath_for` there should be no reason to rely on these internal APIs.\n* CSS-to-XPath utility classes `Nokogiri::CSS::XPathVisitorAlwaysUseBuiltins` and `XPathVisitorOptimallyUseBuiltins` are deprecated. Prefer `Nokogiri::CSS::XPathVisitor` with appropriate constructor arguments. These classes will be removed in a future version of Nokogiri.\n\n\n## 1.12.5 / 2021-09-27\n\n### Security\n\n[JRuby] Address CVE-2021-41098 ([GHSA-2rr5-8q37-2w7h](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-2rr5-8q37-2w7h)).\n\nIn Nokogiri v1.12.4 and earlier, on JRuby only, the SAX parsers resolve external entities (XXE) by default. This fix turns off entity-resolution-by-default in the JRuby SAX parsers to match the CRuby SAX parsers' behavior.\n\nCRuby users are not affected by this CVE.\n\n\n### Fixed\n\n* [CRuby] `Document#to_xhtml` properly serializes self-closing tags in libxml > 2.9.10. A behavior change introduced in libxml 2.9.11 resulted in emitting start and and tags (e.g., `<br></br>`) instead of a self-closing tag (e.g., `<br/>`) in previous Nokogiri versions. [[#2324](https://github.com/sparklemotion/nokogiri/issues/2324)]\n\n\n## 1.12.4 / 2021-08-29\n\n### Notable fix: Namespace inheritance\n\nNamespace behavior when reparenting nodes has historically been poorly specified and the behavior diverged between CRuby and JRuby. As a result, making this behavior consistent in v1.12.0 introduced a breaking change.\n\nThis patch release reverts the Builder behavior present in v1.12.0..v1.12.3 but keeps the Document behavior. This release also introduces a Document attribute to allow affected users to easily change this behavior for their legacy code without invasive changes.\n\n\n#### Compensating Feature in XML::Document\n\nThis release of Nokogiri introduces a new `Document` boolean attribute, `namespace_inheritance`, which controls whether children should inherit a namespace when they are reparented. `Nokogiri::XML:Document` defaults this attribute to `false` meaning \"do not inherit,\" thereby making explicit the behavior change introduced in v1.12.0.\n\nCRuby users who desire the pre-v1.12.0 behavior may set `document.namespace_inheritance = true` before reparenting nodes.\n\nSee https://nokogiri.org/rdoc/Nokogiri/XML/Document.html#namespace_inheritance-instance_method for example usage.\n\n\n#### Fix for XML::Builder\n\nHowever, recognizing that we want `Builder`-created children to inherit namespaces, Builder now will set `namespace_inheritance=true` on the underlying document for both JRuby and CRuby. This means that, on CRuby, the pre-v1.12.0 behavior is restored.\n\nUsers who want to turn this behavior off may pass a keyword argument to the Builder constructor like so:\n\n``` ruby\nNokogiri::XML::Builder.new(namespace_inheritance: false)\n```\n\nSee https://nokogiri.org/rdoc/Nokogiri/XML/Builder.html#label-Namespace+inheritance for example usage.\n\n\n#### Downstream gem maintainers\n\nNote that any downstream gems may want to specifically omit Nokogiri v1.12.0--v1.12.3 from their dependency specification if they rely on child namespace inheritance:\n\n``` ruby\nGem::Specification.new do |gem|\n  # ...\n  gem.add_runtime_dependency 'nokogiri', '!=1.12.3', '!=1.12.2', '!=1.12.1', '!=1.12.0'\n  # ...\nend\n```\n\n\n### Fixed\n\n* [JRuby] Fix NPE in Schema parsing when an imported resource doesn't have a `systemId`. [[#2296](https://github.com/sparklemotion/nokogiri/issues/2296)] (Thanks, [@pepijnve](https://github.com/pepijnve)!)\n\n\n## 1.12.3 / 2021-08-10\n\n### Fixed\n\n* [CRuby] Fix compilation of libgumbo on older systems with versions of GCC that give errors on C99-isms. Affected systems include RHEL6, RHEL7, and SLES12. [[#2302](https://github.com/sparklemotion/nokogiri/issues/2302)]\n\n\n## 1.12.2 / 2021-08-04\n\n### Fixed\n\n* [CRuby] Ensure that C extension files in non-native gem installations are loaded using `require` and rely on `$LOAD_PATH` instead of using `require_relative`. This issue only exists when deleting shared libraries that exist outside the extensions directory, something users occasionally do to conserve disk space. [[#2300](https://github.com/sparklemotion/nokogiri/issues/2300)]\n\n\n## 1.12.1 / 2021-08-03\n\n### Fixed\n\n* [CRuby] Fix compilation of libgumbo on BSD systems by avoiding GNU-isms. [[#2298](https://github.com/sparklemotion/nokogiri/issues/2298)]\n\n\n## 1.12.0 / 2021-08-02\n\n### Notable Addition: HTML5 Support (CRuby only)\n\n__HTML5 support__ has been added (to CRuby only) by merging [Nokogumbo](https://github.com/rubys/nokogumbo) into Nokogiri. The Nokogumbo public API has been preserved, so this functionality is available under the `Nokogiri::HTML5` namespace. [[#2204](https://github.com/sparklemotion/nokogiri/issues/2204)]\n\nPlease note that HTML5 support is not available for JRuby in this version. However, we feel it is important to think about JRuby and we hope to work on this in the future. If you're interested in helping with HTML5 support on JRuby, please reach out to the maintainers by commenting on issue [#2227](https://github.com/sparklemotion/nokogiri/issues/2227).\n\nMany thanks to Sam Ruby, Steve Checkoway, and Craig Barnes for creating and maintaining Nokogumbo and supporting the Gumbo HTML5 parser. They're now Nokogiri core contributors with all the powers and privileges pertaining thereto. \ud83d\ude4c\n\n\n### Notable Change: `Nokogiri::HTML4` module and namespace\n\n`Nokogiri::HTML` has been renamed to `Nokogiri::HTML4`, and `Nokogiri::HTML` is aliased to preserve backwards-compatibility. `Nokogiri::HTML` and `Nokogiri::HTML4` parse methods still use libxml2's (or NekoHTML's) HTML4 parser in the v1.12 release series. \n\nTake special note that if you rely on the class name of an object in your code, objects will now report a class of `Nokogiri::HTML4::Foo` where they previously reported `Nokogiri::HTML::Foo`. Instead of relying on the string returned by `Object#class`, prefer `Class#===` or `Object#is_a?` or `Object#instance_of?`.\n\nFuture releases of Nokogiri may deprecate `HTML` methods or otherwise change this behavior, so please start using `HTML4` in place of `HTML`.\n\n\n### Added\n\n* [CRuby] `Nokogiri::VERSION_INFO[\"libxslt\"][\"datetime_enabled\"]` is a new boolean value which describes whether libxslt (or, more properly, libexslt) has compiled-in datetime support. This generally going to be `true`, but some distros ship without this support (e.g., some mingw UCRT-based packages, see https://github.com/msys2/MINGW-packages/pull/8957). See [#2272](https://github.com/sparklemotion/nokogiri/issues/2272) for more details.\n\n\n### Changed\n\n* Introduce a new constant, `Nokogiri::XML::ParseOptions::DEFAULT_XSLT`, which adds the libxslt-preferred options of `NOENT | DTDLOAD | DTDATTR | NOCDATA` to `ParseOptions::DEFAULT_XML`.\n* `Nokogiri.XSLT` parses stylesheets using `ParseOptions::DEFAULT_XSLT`, which should make some edge-case XSL transformations match libxslt's default behavior. [[#1940](https://github.com/sparklemotion/nokogiri/issues/1940)]\n\n\n### Fixed\n\n* [CRuby] Namespaced attributes are handled properly when their parent node is reparented into another document. Previously, the namespace may have gotten dropped. [[#2228](https://github.com/sparklemotion/nokogiri/issues/2228)]\n* [CRuby] Reparented nodes no longer inherit their parent's namespace. Previously, a node without a namespace was forced to adopt its parent's namespace. [[#1712](https://github.com/sparklemotion/nokogiri/issues/1712), [#425](https://github.com/sparklemotion/nokogiri/issues/425)]\n\n\n### Improved\n\n* [CRuby] Speed up (slightly) the compile time of packaged libraries `libiconv`, `libxml2`, and `libxslt` by using autoconf's `--disable-dependency-tracking` option. (\"ruby\" platform gem only.)\n\n\n### Deprecated\n\n* Deprecating Nokogumbo's `Nokogiri::HTML5.get`. This method will be removed in a future version of Nokogiri.\n\n\n### Dependencies\n\n* [CRuby] Upgrade mini_portile2 dependency from `~> 2.5.0` to `~> 2.6.1`. (\"ruby\" platform gem only.)\n\n\n## 1.11.7 / 2021-06-02\n\n### Fixed\n\n* [CRuby] Backporting an upstream fix to XPath recursion depth limits which impacted some users of complex XPath queries. This issue is present in libxml 2.9.11 and 2.9.12. [[#2257](https://github.com/sparklemotion/nokogiri/issues/2257)]\n\n\n## 1.11.6 / 2021-05-26\n\n### Fixed\n\n* [CRuby] `DocumentFragment#path` now does proper error-checking to handle behavior introduced in libxml > 2.9.10. In v1.11.4 and v1.11.5, calling `DocumentFragment#path` could result in a segfault.\n\n\n## 1.11.5 / 2021-05-19\n\n### Fixed\n\n[Windows CRuby] Work around segfault at process exit on Windows when using libxml2 system DLLs.\n\nlibxml 2.9.12 introduced new behavior to avoid memory leaks when unloading libxml2 shared libraries (see [libxml/!66](https://gitlab.gnome.org/GNOME/libxml2/-/merge_requests/66)). Early testing caught this segfault on non-Windows platforms (see [#2059](https://github.com/sparklemotion/nokogiri/issues/2059) and [libxml@956534e](https://gitlab.gnome.org/GNOME/libxml2/-/commit/956534e02ef280795a187c16f6ac04e107f23c5d)) but it was incompletely fixed and is still an issue on Windows platforms that are using system DLLs.\n\nWe work around this by configuring libxml2 in this situation to use its default memory management functions. Note that if Nokogiri is not on Windows, or is not using shared system libraries, it will will continue to configure libxml2 to use Ruby's memory management functions. `Nokogiri::VERSION_INFO[\"libxml\"][\"memory_management\"]` will allow you to verify when the default memory management functions are being used. [[#2241](https://github.com/sparklemotion/nokogiri/issues/2241)]\n\n\n### Added\n\n`Nokogiri::VERSION_INFO[\"libxml\"]` now contains the key `\"memory_management\"` to declare whether libxml2 is using its `default` memory management functions, or whether it uses the memory management functions from `ruby`. See above for more details.\n\n\n## 1.11.4 / 2021-05-14\n\n### Security\n\n[CRuby] Vendored libxml2 upgraded to v2.9.12 which addresses:\n\n- [CVE-2019-20388](https://security.archlinux.org/CVE-2019-20388)\n- [CVE-2020-24977](https://security.archlinux.org/CVE-2020-24977)\n- [CVE-2021-3517](https://security.archlinux.org/CVE-2021-3517)\n- [CVE-2021-3518](https://security.archlinux.org/CVE-2021-3518)\n- [CVE-2021-3537](https://security.archlinux.org/CVE-2021-3537)\n- [CVE-2021-3541](https://security.archlinux.org/CVE-2021-3541)\n\nNote that two additional CVEs were addressed upstream but are not relevant to this release. [CVE-2021-3516](https://security.archlinux.org/CVE-2021-3516) via `xmllint` is not present in Nokogiri, and [CVE-2020-7595](https://security.archlinux.org/CVE-2020-7595) has been patched in Nokogiri since v1.10.8 (see [#1992](https://github.com/sparklemotion/nokogiri/issues/1992)).\n\nPlease see [nokogiri/GHSA-7rrm-v45f-jp64 ](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-7rrm-v45f-jp64) or [#2233](https://github.com/sparklemotion/nokogiri/issues/2233) for a more complete analysis of these CVEs and patches.\n\n\n### Dependencies\n\n* [CRuby] vendored libxml2 is updated from 2.9.10 to 2.9.12. (Note that 2.9.11 was skipped because it was superseded by 2.9.12 a few hours after its release.)\n\n\n## 1.11.3 / 2021-04-07\n\n### Fixed\n\n* [CRuby] Passing non-`Node` objects to `Document#root=` now raises an `ArgumentError` exception. Previously this likely segfaulted. [[#1900](https://github.com/sparklemotion/nokogiri/issues/1900)]\n* [JRuby] Passing non-`Node` objects to `Document#root=` now raises an `ArgumentError` exception. Previously this raised a `TypeError` exception.\n* [CRuby] arm64/aarch64 systems (like Apple's M1) can now compile libxml2 and libxslt from source (though we continue to strongly advise users to install the native gems for the best possible experience)\n\n\n## 1.11.2 / 2021-03-11\n\n### Fixed\n\n* [CRuby] `NodeSet` may now safely contain `Node` objects from multiple documents. Previously the GC lifecycle of the parent `Document` objects could lead to nodes being GCed while still in scope. [[#1952](https://github.com/sparklemotion/nokogiri/issues/1952#issuecomment-770856928)]\n* [CRuby] Patch libxml2 to avoid \"huge input lookup\" errors on large CDATA elements. (See upstream [GNOME/libxml2#200](https://gitlab.gnome.org/GNOME/libxml2/-/issues/200) and [GNOME/libxml2!100](https://gitlab.gnome.org/GNOME/libxml2/-/merge_requests/100).) [[#2132](https://github.com/sparklemotion/nokogiri/issues/2132)].\n* [CRuby+Windows] Enable Nokogumbo (and other downstream gems) to compile and link against `nokogiri.so` by including `LDFLAGS` in `Nokogiri::VERSION_INFO`. [[#2167](https://github.com/sparklemotion/nokogiri/issues/2167)]\n* [CRuby] `{XML,HTML}::Document.parse` now invokes `#initialize` exactly once. Previously `#initialize` was invoked twice on each object.\n* [JRuby] `{XML,HTML}::Document.parse` now invokes `#initialize` exactly once. Previously `#initialize` was not called, which was a problem for subclassing such as done by `Loofah`.\n\n\n### Improved\n\n* Reduce the number of object allocations needed when parsing an `HTML::DocumentFragment`. [[#2087](https://github.com/sparklemotion/nokogiri/issues/2087)] (Thanks, [@ashmaroli](https://github.com/ashmaroli)!)\n* [JRuby] Update the algorithm used to calculate `Node#line` to be wrong less-often. The underlying parser, Xerces, does not track line numbers, and so we've always used a hacky solution for this method. [[#1223](https://github.com/sparklemotion/nokogiri/issues/1223), [#2177](https://github.com/sparklemotion/nokogiri/issues/2177)]\n* Introduce `--enable-system-libraries` and `--disable-system-libraries` flags to `extconf.rb`. These flags provide the same functionality as `--use-system-libraries` and the `NOKOGIRI_USE_SYSTEM_LIBRARIES` environment variable, but are more idiomatic. [[#2193](https://github.com/sparklemotion/nokogiri/issues/2193)] (Thanks, [@eregon](https://github.com/eregon)!)\n* [TruffleRuby] `--disable-static` is now the default on TruffleRuby when the packaged libraries are used. This is more flexible and compiles faster. (Note, though, that the default on TR is still to use system libraries.) [[#2191](https://github.com/sparklemotion/nokogiri/issues/2191#issuecomment-780724627), [#2193](https://github.com/sparklemotion/nokogiri/issues/2193)] (Thanks, [@eregon](https://github.com/eregon)!)\n\n\n### Changed\n\n* `Nokogiri::XML::Path` is now a Module (previously it has been a Class). It has been acting solely as a Module since v1.0.0. See [8461c74](https://github.com/sparklemotion/nokogiri/commit/8461c74).\n\n\n## 1.11.1 / 2021-01-06\n\n### Fixed\n\n* [CRuby] If `libxml-ruby` is loaded before `nokogiri`, the SAX and Push parsers no longer call `libxml-ruby`'s handlers. Instead, they defensively override the libxml2 global handler before parsing. [[#2168](https://github.com/sparklemotion/nokogiri/issues/2168)]\n\n\n## 1.11.0 / 2021-01-03\n\n### Notes\n\n#### Faster, more reliable installation: Native Gems for Linux and OSX/Darwin\n\n\"Native gems\" contain pre-compiled libraries for a specific machine architecture. On supported platforms, this removes the need for compiling the C extension and the packaged libraries. This results in **much faster installation** and **more reliable installation**, which as you probably know are the biggest headaches for Nokogiri users. \n\nWe've been shipping native Windows gems since 2009, but starting in v1.11.0 we are also shipping native gems for these platforms:\n\n- Linux: `x86-linux` and `x86_64-linux` -- including musl platforms like alpine\n- OSX/Darwin: `x86_64-darwin` and `arm64-darwin`\n\nWe'd appreciate your thoughts and feedback on this work at [#2075](https://github.com/sparklemotion/nokogiri/issues/2075).\n\n\n### Dependencies\n\n#### Ruby\n\nThis release introduces support for Ruby 2.7 and 3.0 in the precompiled native gems.\n\nThis release ends support for:\n\n* Ruby 2.3, for which [official support ended on 2019-03-31](https://www.ruby-lang.org/en/news/2019/03/31/support-of-ruby-2-3-has-ended/) [[#1886](https://github.com/sparklemotion/nokogiri/issues/1886)] (Thanks [@ashmaroli](https://github.com/ashmaroli)!)\n* Ruby 2.4, for which [official support ended on 2020-04-05](https://www.ruby-lang.org/en/news/2020/04/05/support-of-ruby-2-4-has-ended/)\n* JRuby 9.1, which is the Ruby 2.3-compatible release.\n\n\n#### Gems\n\n* Explicitly add racc as a runtime dependency. [[#1988](https://github.com/sparklemotion/nokogiri/issues/1988)] (Thanks, [@voxik](https://github.com/voxik)!)\n* [MRI] Upgrade mini_portile2 dependency from `~> 2.4.0` to `~> 2.5.0` [[#2005](https://github.com/sparklemotion/nokogiri/issues/2005)] (Thanks, [@alejandroperea](https://github.com/alejandroperea)!)\n\n\n### Security\n\nSee note below about CVE-2020-26247 in the \"Changed\" subsection entitled \"XML::Schema parsing treats input as untrusted by default\".\n\n\n### Added\n\n* Add Node methods for manipulating \"keyword attributes\" (for example, `class` and `rel`): `#kwattr_values`, `#kwattr_add`, `#kwattr_append`, and `#kwattr_remove`. [[#2000](https://github.com/sparklemotion/nokogiri/issues/2000)]\n* Add support for CSS queries `a:has(> b)`, `a:has(~ b)`, and `a:has(+ b)`. [[#688](https://github.com/sparklemotion/nokogiri/issues/688)] (Thanks, [@jonathanhefner](https://github.com/jonathanhefner)!)\n* Add `Node#value?` to better match expected semantics of a Hash-like object. [[#1838](https://github.com/sparklemotion/nokogiri/issues/1838), [#1840](https://github.com/sparklemotion/nokogiri/issues/1840)] (Thanks, [@MatzFan](https://github.com/MatzFan)!)\n* [CRuby] Add `Nokogiri::XML::Node#line=` for use by downstream libs like nokogumbo. [[#1918](https://github.com/sparklemotion/nokogiri/issues/1918)] (Thanks, [@stevecheckoway](https://github.com/stevecheckoway)!)\n* `nokogiri.gemspec` is back after a 10-year hiatus. We still prefer you use the official releases, but `main` is pretty stable these days, and YOLO.\n\n\n### Performance\n\n* [CRuby] The CSS `~=` operator and class selector `.` are about 2x faster. [[#2137](https://github.com/sparklemotion/nokogiri/issues/2137), [#2135](https://github.com/sparklemotion/nokogiri/issues/2135)]\n* [CRuby] Patch libxml2 to call `strlen` from `xmlStrlen` rather than the naive implementation, because `strlen` is generally optimized for the architecture. [[#2144](https://github.com/sparklemotion/nokogiri/issues/2144)] (Thanks, [@ilyazub](https://github.com/ilyazub)!)\n* Improve performance of some namespace operations. [[#1916](https://github.com/sparklemotion/nokogiri/issues/1916)] (Thanks, [@ashmaroli](https://github.com/ashmaroli)!)\n* Remove unnecessary array allocations from Node serialization methods [[#1911](https://github.com/sparklemotion/nokogiri/issues/1911)] (Thanks, [@ashmaroli](https://github.com/ashmaroli)!)\n* Avoid creation of unnecessary zero-length String objects. [[#1970](https://github.com/sparklemotion/nokogiri/issues/1970)] (Thanks, [@ashmaroli](https://github.com/ashmaroli)!)\n* Always compile libxml2 and libxslt with '-O2' [[#2022](https://github.com/sparklemotion/nokogiri/issues/2022), [#2100](https://github.com/sparklemotion/nokogiri/issues/2100)] (Thanks, [@ilyazub](https://github.com/ilyazub)!)\n* [JRuby] Lots of code cleanup and performance improvements. [[#1934](https://github.com/sparklemotion/nokogiri/issues/1934)] (Thanks, [@kares](https://github.com/kares)!)\n* [CRuby] `RelaxNG.from_document` no longer leaks memory. [[#2114](https://github.com/sparklemotion/nokogiri/issues/2114)]\n\n\n### Improved\n\n* [CRuby] Handle incorrectly-closed HTML comments as WHATWG recommends for browsers. [[#2058](https://github.com/sparklemotion/nokogiri/issues/2058)] (Thanks to HackerOne user [mayflower](https://hackerone.com/mayflower?type=user) for reporting this!)\n* `{HTML,XML}::Document#parse` now accept `Pathname` objects. Previously this worked only if the referenced file was less than 4096 bytes long; longer files resulted in undefined behavior because the `read` method would be repeatedly invoked. [[#1821](https://github.com/sparklemotion/nokogiri/issues/1821), [#2110](https://github.com/sparklemotion/nokogiri/issues/2110)] (Thanks, [@doriantaylor](https://github.com/doriantaylor) and [@phokz](https://github.com/phokz)!)\n* [CRuby] Nokogumbo builds faster because it can now use header files provided by Nokogiri. [[#1788](https://github.com/sparklemotion/nokogiri/issues/1788)] (Thanks, [@stevecheckoway](https://github.com/stevecheckoway)!)\n* Add `frozen_string_literal: true` magic comment to all `lib` files. [[#1745](https://github.com/sparklemotion/nokogiri/issues/1745)] (Thanks, [@oniofchaos](https://github.com/oniofchaos)!)\n* [JRuby] Clean up deprecated calls into JRuby. [[#2027](https://github.com/sparklemotion/nokogiri/issues/2027)] (Thanks, [@headius](https://github.com/headius)!)\n\n\n### Fixed\n\n* HTML Parsing in \"strict\" mode (i.e., the `RECOVER` parse option not set) now correctly raises a `XML::SyntaxError` exception. Previously the value of the `RECOVER` bit was being ignored by CRuby and was misinterpreted by JRuby. [[#2130](https://github.com/sparklemotion/nokogiri/issues/2130)]\n* The CSS `~=` operator now correctly handles non-space whitespace in the `class` attribute. commit e45dedd\n* The switch to turn off the CSS-to-XPath cache is now thread-local, rather than being shared mutable state. [[#1935](https://github.com/sparklemotion/nokogiri/issues/1935)]\n* The Node methods `add_previous_sibling`, `previous=`, `before`, `add_next_sibling`, `next=`, `after`, `replace`, and `swap` now correctly use their parent as the context node for parsing markup. These methods now also raise a `RuntimeError` if they are called on a node with no parent. [[nokogumbo#160](https://github.com/rubys/nokogumbo/issues/160)]\n* [JRuby] `XML::Schema` XSD validation errors are captured in `XML::Schema#errors`. These errors were previously ignored.\n* [JRuby] Standardize reading from IO like objects, including StringIO. [[#1888](https://github.com/sparklemotion/nokogiri/issues/1888), [#1897](https://github.com/sparklemotion/nokogiri/issues/1897)]\n* [JRuby] Fix how custom XPath function namespaces are inferred to be less naive. [[#1890](https://github.com/sparklemotion/nokogiri/issues/1890), [#2148](https://github.com/sparklemotion/nokogiri/issues/2148)]\n* [JRuby] Clarify exception message when custom XPath functions can't be resolved.\n* [JRuby] Comparison of Node to Document with `Node#<=>` now matches CRuby/libxml2 behavior.\n* [CRuby] Syntax errors are now correctly captured in `Document#errors` for short HTML documents. Previously the SAX parser used for encoding detection was clobbering libxml2's global error handler.\n* [CRuby] Fixed installation on AIX with respect to `vasprintf`. [[#1908](https://github.com/sparklemotion/nokogiri/issues/1908)]\n* [CRuby] On some platforms, avoid symbol name collision with glibc's `canonicalize`. [[#2105](https://github.com/sparklemotion/nokogiri/issues/2105)]\n* [Windows Visual C++] Fixed compiler warnings and errors. [[#2061](https://github.com/sparklemotion/nokogiri/issues/2061), [#2068](https://github.com/sparklemotion/nokogiri/issues/2068)]\n* [CRuby] Fixed Nokogumbo integration which broke in the v1.11.0 release candidates. [[#1788](https://github.com/sparklemotion/nokogiri/issues/1788)] (Thanks, [@stevecheckoway](https://github.com/stevecheckoway)!)\n* [JRuby] Fixed document encoding regression in v1.11.0 release candidates. [[#2080](https://github.com/sparklemotion/nokogiri/issues/2080), [#2083](https://github.com/sparklemotion/nokogiri/issues/2083)] (Thanks, [@thbar](https://github.com/thbar)!)\n\n\n### Removed\n\n* The internal method `Nokogiri::CSS::Parser.cache_on=` has been removed. Use `.set_cache` if you need to muck with the cache internals.\n* The class method `Nokogiri::CSS::Parser.parse` has been removed. This was originally deprecated in 2009 in 13db61b. Use `Nokogiri::CSS.parse` instead.\n\n\n### Changed\n\n#### `XML::Schema` input is now \"untrusted\" by default\n\nAddress [CVE-2020-26247](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vr8q-g5c7-m54m).\n\nIn Nokogiri versions <= 1.11.0.rc3, XML Schemas parsed by `Nokogiri::XML::Schema` were **trusted** by default, allowing external resources to be accessed over the network, potentially enabling XXE or SSRF attacks.\n\nThis behavior is counter to the security policy intended by Nokogiri maintainers, which is to treat all input as **untrusted** by default whenever possible.\n\nPlease note that this security fix was pushed into a new minor version, 1.11.x, rather than a patch release to the 1.10.x branch, because it is a breaking change for some schemas and the risk was assessed to be \"Low Severity\".\n\nMore information and instructions for enabling \"trusted input\" behavior in v1.11.0.rc4 and later is available at the [public advisory](https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-vr8q-g5c7-m54m).\n\n\n#### HTML parser now obeys the `strict` or `norecover` parsing option\n\n(Also noted above in the \"Fixed\" section) HTML Parsing in \"strict\" mode (i.e., the `RECOVER` parse option not set) now correctly raises a `XML::SyntaxError` exception. Previously the value of the `RECOVER` bit was being ignored by CRuby and was misinterpreted by JRuby.\n\nIf you're using the default parser options, you will be unaffected by this fix. If you're passing `strict` or `norecover` to your HTML parser call, you may be surprised to see that the parser now fails to recover and raises a `XML::SyntaxError` exception. Given the number of HTML documents on the internet that libxml2 would consider to be ill-formed, this is probably not what you want, and you can omit setting that parse option to restore the behavior that you have been relying upon.\n\nApologies to anyone inconvenienced by this breaking bugfix being present in a minor release, but I felt it was appropriate to introduce this fix because it's straightforward to fix any code that has been relying on this buggy behavior.\n\n\n#### `VersionInfo`, the output of `nokogiri -v`, and related constants\n\nThis release changes the metadata provided in `Nokogiri::VersionInfo` which also affects the output of `nokogiri -v`. Some related constants have also been changed. If you're using `VersionInfo` programmatically, or relying on constants related to underlying library versions, please read the detailed changes for `Nokogiri::VersionInfo` at [#2139](https://github.com/sparklemotion/nokogiri/issues/2139) and accept our apologies for the inconvenience.\n\n\n## 1.10.10 / 2020-07-06\n\n### Features\n\n* [MRI] Cross-built Windows gems now support Ruby 2.7 [[#2029](https://github.com/sparklemotion/nokogiri/issues/2029)]. Note that prior to this release, the v1.11.x prereleases provided this support.\n\n\n## 1.10.9 / 2020-03-01\n\n### Fixed\n\n* [MRI] Raise an exception when Nokogiri detects a specific libxml2 edge case involving blank Schema nodes wrapped by Ruby objects that would cause a segfault. Currently no fix is available upstream, so we're preventing a dangerous operation and informing users to code around it if possible. [[#1985](https://github.com/sparklemotion/nokogiri/issues/1985), [#2001](https://github.com/sparklemotion/nokogiri/issues/2001)]\n* [JRuby] Change `NodeSet#to_a` to return a RubyArray instead of Object, for compilation under JRuby 9.2.9 and later. [[#1968](https://github.com/sparklemotion/nokogiri/issues/1968), [#1969](https://github.com/sparklemotion/nokogiri/issues/1969)] (Thanks, [@headius](https://github.com/headius)!)\n\n\n## 1.10.8 / 2020-02-10\n\n### Security\n\n[MRI] Pulled in upstream patch from libxml that addresses CVE-2020-7595. Full details are available in [#1992](https://github.com/sparklemotion/nokogiri/issues/1992). Note that this patch is not yet (as of 2020-02-10) in an upstream release of libxml.\n\n\n## 1.10.7 / 2019-12-03\n\n### Fixed\n\n* [MRI] Ensure the patch applied in v1.10.6 works with GNU `patch`. [[#1954](https://github.com/sparklemotion/nokogiri/issues/1954)]\n\n\n## 1.10.6 / 2019-12-03\n\n### Fixed\n\n* [MRI] Fix FreeBSD installation of vendored libxml2. [[#1941](https://github.com/sparklemotion/nokogiri/issues/1941), [#1953](https://github.com/sparklemotion/nokogiri/issues/1953)] (Thanks, [@nurse](https://github.com/nurse)!)\n\n\n## 1.10.5 / 2019-10-31\n\n### Security\n\n[MRI] Vendored libxslt upgraded to v1.1.34 which addresses three CVEs for libxslt:\n\n* CVE-2019-13117\n* CVE-2019-13118\n* CVE-2019-18197\n* CVE-2019-19956\n\nMore details are available at [#1943](https://github.com/sparklemotion/nokogiri/issues/1943).\n\n\n### Dependencies\n\n* [MRI] vendored libxml2 is updated from 2.9.9 to 2.9.10\n* [MRI] vendored libxslt is updated from 1.1.33 to 1.1.34\n\n\n## 1.10.4 / 2019-08-11\n\n### Security\n\nAddress CVE-2019-5477 ([#1915](https://github.com/sparklemotion/nokogiri/issues/1915)).\n\nA command injection vulnerability in Nokogiri v1.10.3 and earlier allows commands to be executed in a subprocess by Ruby's `Kernel.open` method. Processes are vulnerable only if the undocumented method `Nokogiri::CSS::Tokenizer#load_file` is being passed untrusted user input.\n\nThis vulnerability appears in code generated by the Rexical gem versions v1.0.6 and earlier. Rexical is used by Nokogiri to generate lexical scanner code for parsing CSS queries. The underlying vulnerability was addressed in Rexical v1.0.7 and Nokogiri upgraded to this version of Rexical in Nokogiri v1.10.4.\n\nThis CVE's public notice is [#1915](https://github.com/sparklemotion/nokogiri/issues/1915)\n\n\n## 1.10.3 / 2019-04-22\n\n### Security\n\n[MRI] Pulled in upstream patch from libxslt that addresses CVE-2019-11068. Full details are available in [#1892](https://github.com/sparklemotion/nokogiri/issues/1892). Note that this patch is not yet (as of 2019-04-22) in an upstream release of libxslt.\n\n\n## 1.10.2 / 2019-03-24\n\n### Security\n\n* [MRI] Remove support from vendored libxml2 for future script macros. [[#1871](https://github.com/sparklemotion/nokogiri/issues/1871)]\n* [MRI] Remove support from vendored libxml2 for server-side includes within attributes. [[#1877](https://github.com/sparklemotion/nokogiri/issues/1877)]\n\n\n### Fixed\n\n* [JRuby] Fix node ownership in duplicated documents. [[#1060](https://github.com/sparklemotion/nokogiri/issues/1060)]\n* [JRuby] Rethrow exceptions caught by Java SAX handler. [[#1847](https://github.com/sparklemotion/nokogiri/issues/1847), [#1872](https://github.com/sparklemotion/nokogiri/issues/1872)] (Thanks, [@adjam](https://github.com/adjam)!)\n\n\n## 1.10.1 / 2019-01-13\n\n### Added\n\n* [MRI] During installation, handle Xcode 10's new library path. [[#1801](https://github.com/sparklemotion/nokogiri/issues/1801), [#1851](https://github.com/sparklemotion/nokogiri/issues/1851)] (Thanks, [@mlj](https://github.com/mlj) and [@deepj](https://github.com/deepj)!)\n* Avoid unnecessary creation of `Proc`s in many methods. [[#1776](https://github.com/sparklemotion/nokogiri/issues/1776)] (Thanks, [@chopraanmol1](https://github.com/chopraanmol1)!)\n\n\n### Fixed\n\n* CSS selector `:has()` now correctly matches against any descendant. Previously this selector matched against only direct children). [[#350](https://github.com/sparklemotion/nokogiri/issues/350)] (Thanks, [@Phrogz](https://github.com/Phrogz)!)\n* `NodeSet#attr` now returns `nil` if it's empty. Previously this raised a NoMethodError.\n* [MRI] XPath errors are no longer suppressed during `XSLT::Stylesheet#transform`. Previously these errors were suppressed which led to silent failures and a subsequent segfault. [[#1802](https://github.com/sparklemotion/nokogiri/issues/1802)]\n\n\n## 1.10.0 / 2019-01-04\n\n### Added\n\n* [MRI] Cross-built Windows gems now support Ruby 2.6 [[#1842](https://github.com/sparklemotion/nokogiri/issues/1842), [#1850](https://github.com/sparklemotion/nokogiri/issues/1850)]\n\n\n### Dependencies\n\n* This release ends support for Ruby 2.2, for which [official support ended on 2018-03-31](https://www.ruby-lang.org/en/news/2018/06/20/support-of-ruby-2-2-has-ended/) [[#1841](https://github.com/sparklemotion/nokogiri/issues/1841)]\n* This release ends support for JRuby 1.7, for which [official support ended on 2017-11-21](https://github.com/jruby/jruby/issues/4112) [[#1741](https://github.com/sparklemotion/nokogiri/issues/1741)]\n* [MRI] libxml2 is updated from 2.9.8 to 2.9.9\n* [MRI] libxslt is updated from 1.1.32 to 1.1.33\n\n\n## 1.9.1 / 2018-12-17\n\n### Fixed\n\n* Fix a bug introduced in v1.9.0 where `XML::DocumentFragment#dup` no longer returned an instance of the callee's class, instead always returning an `XML::DocumentFragment`. This notably broke any subclass of `XML::DocumentFragment` including `HTML::DocumentFragment` as well as the Loofah gem's `Loofah::HTML::DocumentFragment`. [[#1846](https://github.com/sparklemotion/nokogiri/issues/1846)]\n\n\n## 1.9.0 / 2018-12-17\n\n### Security\n\n* [JRuby] Upgrade Xerces dependency from 2.11.0 to 2.12.0 to address upstream vulnerability CVE-2012-0881 [[#1831](https://github.com/sparklemotion/nokogiri/issues/1831)] (Thanks [@grajagandev](https://github.com/grajagandev) for reporting.)\n\n\n### Improved\n\n* Decrease installation size by removing many unneeded files (e.g., `/test`) from the packaged gems. [[#1719](https://github.com/sparklemotion/nokogiri/issues/1719)] (Thanks, [@stevecrozz](https://github.com/stevecrozz)!)\n\n\n### Added\n\n* `XML::Attr#value=` allows HTML node attribute values to be set to either a blank string or an empty boolean attribute. [[#1800](https://github.com/sparklemotion/nokogiri/issues/1800)]\n* Introduce `XML::Node#wrap` which does what `XML::NodeSet#wrap` has always done, but for a single node. [[#1531](https://github.com/sparklemotion/nokogiri/issues/1531)] (Thanks, [@ethirajsrinivasan](https://github.com/ethirajsrinivasan)!)\n* [MRI] Improve installation experience on macOS High Sierra (Darwin). [[#1812](https://github.com/sparklemotion/nokogiri/issues/1812), [#1813](https://github.com/sparklemotion/nokogiri/issues/1813)] (Thanks, [@gpakosz](https://github.com/gpakosz) and [@nurse](https://github.com/nurse)!)\n* [MRI] `Node#dup` supports copying a node directly to a new document. See the method documentation for details.\n* [MRI] `DocumentFragment#dup` is now more memory-efficient, avoiding making unnecessary copies. [[#1063](https://github.com/sparklemotion/nokogiri/issues/1063)]\n* [JRuby] `NodeSet` has been rewritten to improve performance! [[#1795](https://github.com/sparklemotion/nokogiri/issues/1795)]\n\n\n### Fixed\n\n* `NodeSet#each` now returns `self` instead of zero. [[#1822](https://github.com/sparklemotion/nokogiri/issues/1822)] (Thanks, [@olehif](https://github.com/olehif)!)\n* [MRI] Address a memory leak when using `XML::Builder` to create nodes with namespaces. [[#1810](https://github.com/sparklemotion/nokogiri/issues/1810)]\n* [MRI] Address a memory leak when unparenting a DTD. [[#1784](https://github.com/sparklemotion/nokogiri/issues/1784)] (Thanks, [@stevecheckoway](https://github.com/stevecheckoway)!)\n* [MRI] Use `RbConfig::CONFIG` instead of `::MAKEFILE_CONFIG` to fix installations that use Makefile macros. [[#1820](https://github.com/sparklemotion/nokogiri/issues/1820)] (Thanks, [@nobu](https://github.com/nobu)!)\n* [JRuby] Decrease large memory usage when making nested XPath queries. [[#1749](https://github.com/sparklemotion/nokogiri/issues/1749)]\n* [JRuby] Fix failing tests on JRuby 9.2.x\n* [JRuby] Fix default namespaces in nodes reparented into a different document [[#1774](https://github.com/sparklemotion/nokogiri/issues/1774)]\n* [JRuby] Fix support for Java 9. [[#1759](https://github.com/sparklemotion/nokogiri/issues/1759)] (Thanks, [@Taywee](https://github.com/Taywee)!)\n\n\n### Dependencies\n\n* [MRI] Upgrade mini_portile2 dependency from `~> 2.3.0` to `~> 2.4.0`\n\n\n## 1.8.5 / 2018-10-04\n\n### Security\n\n[MRI] Pulled in upstream patches from libxml2 that address CVE-2018-14404 and CVE-2018-14567. Full details are available in [#1785](https://github.com/sparklemotion/nokogiri/issues/1785). Note that these patches are not yet (as of 2018-10-04) in an upstream release of libxml2.\n\n\n### Fixed\n\n* [MRI] Fix regression in installation when building against system libraries, where some systems would not be able to find libxml2 or libxslt when present. (Regression introduced in v1.8.3.) [[#1722](https://github.com/sparklemotion/nokogiri/issues/1722)]\n* [JRuby] Fix node reparenting when the destination doc is empty. [[#1773](https://github.com/sparklemotion/nokogiri/issues/1773)]\n\n\n## 1.8.4 / 2018-07-03\n\n### Fixed\n\n* [MRI] Fix memory leak when creating nodes with namespaces. (Introduced in v1.5.7) [[#1771](https://github.com/sparklemotion/nokogiri/issues/1771)]\n\n\n## 1.8.3 / 2018-06-16\n\n### Security\n\n[MRI] Behavior in libxml2 has been reverted which caused CVE-2018-8048 (loofah gem), CVE-2018-3740 (sanitize gem), and CVE-2018-3741 (rails-html-sanitizer gem). The commit in question is here:\n\n> https://github.com/GNOME/libxml2/commit/960f0e2\n\nand more information is available about this commit and its impact here:\n\n> https://github.com/flavorjones/loofah/issues/144\n\nThis release simply reverts the libxml2 commit in question to protect users of Nokogiri's vendored libraries from similar vulnerabilities.\n\nIf you're offended by what happened here, I'd kindly ask that you comment on the upstream bug report here:\n\n> https://bugzilla.gnome.org/show_bug.cgi?id=769760\n\n\n### More Security\n\n[MRI] Vendored libxml2 upgraded to v2.9.8 which addresses CVE-2016-9318 [[#1582](https://github.com/sparklemotion/nokogiri/issues/1582)].\n\n\n### Dependencies\n\n* [MRI] libxml2 is updated from 2.9.7 to 2.9.8\n\n\n### Added\n\n* `Node#classes`, `#add_class`, `#append_class`, and `#remove_class` are added.\n* `NodeSet#append_class` is added.\n* `NodeSet#remove_attribute` is a new alias for `NodeSet#remove_attr`.\n* `NodeSet#each` now returns an `Enumerator` when no block is passed (Thanks, [@park53kr](https://github.com/park53kr)!)\n* [JRuby] General improvements in JRuby implementation (Thanks, [@kares](https://github.com/kares)!)\n\n\n### Fixed\n\n* CSS attribute selectors now gracefully handle queries using integers. [[#711](https://github.com/sparklemotion/nokogiri/issues/711)]\n* Handle ASCII-8BIT encoding on fragment input [[#553](https://github.com/sparklemotion/nokogiri/issues/553)]\n* Handle non-string return values within `Reader` [[#898](https://github.com/sparklemotion/nokogiri/issues/898)]\n* [JRuby] Allow `Node#replace` to insert Comment and CDATA nodes. [[#1666](https://github.com/sparklemotion/nokogiri/issues/1666)]\n* [JRuby] Stability and speed improvements to `Node`, `Sax::PushParser`, and the JRuby implementation [[#1708](https://github.com/sparklemotion/nokogiri/issues/1708), [#1710](https://github.com/sparklemotion/nokogiri/issues/1710), [#1501](https://github.com/sparklemotion/nokogiri/issues/1501)]\n\n\n## 1.8.2 / 2018-01-29\n\n### Security\n\n[MRI] The update of vendored libxml2 from 2.9.5 to 2.9.7 addresses at least one published vulnerability, CVE-2017-15412. [[#1714](https://github.com/sparklemotion/nokogiri/issues/1714) has complete details]\n\n\n### Dependencies\n\n* [MRI] libxml2 is updated from 2.9.5 to 2.9.7\n* [MRI] libxslt is updated from 1.1.30 to 1.1.32\n\n\n### Added\n\n* [MRI] OpenBSD installation should be a bit easier now. [[#1685](https://github.com/sparklemotion/nokogiri/issues/1685)] (Thanks, [@jeremyevans](https://github.com/jeremyevans)!)\n* [MRI] Cross-built Windows gems now support Ruby 2.5\n\n\n### Fixed\n\n* `Node#serialize` once again returns UTF-8-encoded strings. [[#1659](https://github.com/sparklemotion/nokogiri/issues/1659)]\n* [JRuby] made SAX parsing of characters consistent with C implementation [[#1676](https://github.com/sparklemotion/nokogiri/issues/1676)] (Thanks, [[@andrew](https://github.com/andrew)-aladev](https://github.com/andrew-aladev)!)\n* [MRI] Predefined entities, when inspected, no longer cause a segfault. [[#1238](https://github.com/sparklemotion/nokogiri/issues/1238)]\n\n\n## 1.8.1 / 2017-09-19\n\n### Dependencies\n\n* [MRI] libxml2 is updated from 2.9.4 to 2.9.5.\n* [MRI] libxslt is updated from 1.1.29 to 1.1.30.\n* [MRI] optional dependency on the pkg-config gem has had its constraint loosened to `~> 1.1` (from `~> 1.1.7`). [[#1660](https://github.com/sparklemotion/nokogiri/issues/1660)]\n* [MRI] Upgrade mini_portile2 dependency from `~> 2.2.0` to `~> 2.3.0`, which will validate checksums on the vendored libxml2 and libxslt tarballs before using them.\n\n\n### Fixed\n\n* `NodeSet#first` with an integer argument longer than the length of the `NodeSet` now correctly clamps the length of the returned `NodeSet` to the original length. [[#1650](https://github.com/sparklemotion/nokogiri/issues/1650)] (Thanks, [@Derenge](https://github.com/Derenge)!)\n* [MRI] Ensure CData.new raises TypeError if the `content` argument is not implicitly convertible into a string. [[#1669](https://github.com/sparklemotion/nokogiri/issues/1669)]\n\n\n## 1.8.0 / 2017-06-04\n\n### Dependencies\n\nThis release ends support for Ruby 2.1 on Windows in the `x86-mingw32` and `x64-mingw32` platform gems (containing pre-compiled DLLs). Official support ended for Ruby 2.1 on 2017-04-01.\n\nPlease note that this deprecation note only applies to the precompiled Windows gems. Ruby 2.1 continues to be supported (for now) in the default gem when compiled on installation.\n\n\n### Dependencies\n\n* [Windows] Upgrade iconv from 1.14 to 1.15 (unless --use-system-libraries)\n* [Windows] Upgrade zlib from 1.2.8 to 1.2.11 (unless --use-system-libraries)\n* [MRI] Upgrade rake-compiler dependency from 0.9.2 to 1.0.3\n* [MRI] Upgrade mini-portile2 dependency from `~> 2.1.0` to `~> 2.2.0`\n* [JRuby] Removed support for `jruby --1.8` code paths. [[#1607](https://github.com/sparklemotion/nokogiri/issues/1607)] (Thanks, [@kares](https://github.com/kares)!)\n* [MRI Windows] Retrieve zlib source from http://zlib.net/fossils to avoid deprecation issues going forward. See [#1632](https://github.com/sparklemotion/nokogiri/issues/1632) for details around this problem.\n\n### Added\n\n* `NodeSet#clone` is now an alias for `NodeSet#dup` [[#1503](https://github.com/sparklemotion/nokogiri/issues/1503)] (Thanks, [@stephankaag](https://github.com/stephankaag)!)\n* Allow Processing Instructions and Comments as children of a document root. [[#1033](https://github.com/sparklemotion/nokogiri/issues/1033)] (Thanks, [@windwiny](https://github.com/windwiny)!)\n* [MRI] `PushParser#replace_entities` and `#replace_entities=` will control whether entities are replaced or not. [[#1017](https://github.com/sparklemotion/nokogiri/issues/1017)] (Thanks, [@spraints](https://github.com/spraints)!)\n* [MRI] `SyntaxError#to_s` now includes line number, column number, and log level if made available by the parser. [[#1304](https://github.com/sparklemotion/nokogiri/issues/1304), [#1637](https://github.com/sparklemotion/nokogiri/issues/1637)] (Thanks, [@spk](https://github.com/spk) and [@ccarruitero](https://github.com/ccarruitero)!)\n* [MRI] Cross-built Windows gems now support Ruby 2.4\n* [MRI] Support for frozen string literals. [[#1413](https://github.com/sparklemotion/nokogiri/issues/1413)]\n* [MRI] Support for installing Nokogiri on a machine in FIPS-enabled mode [[#1544](https://github.com/sparklemotion/nokogiri/issues/1544)]\n* [MRI] Vendored libraries are verified with SHA-256 hashes (formerly some MD5 hashes were used) [[#1544](https://github.com/sparklemotion/nokogiri/issues/1544)]\n* [JRuby] (performance) remove unnecessary synchronization of class-cache [[#1563](https://github.com/sparklemotion/nokogiri/issues/1563)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] (performance) remove unnecessary cloning of objects in XPath searches [[#1563](https://github.com/sparklemotion/nokogiri/issues/1563)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] (performance) more performance improvements, particularly in XPath, Reader, XmlNode, and XmlNodeSet [[#1597](https://github.com/sparklemotion/nokogiri/issues/1597)] (Thanks, [@kares](https://github.com/kares)!)\n\n\n### Fixed\n\n* `HTML::SAX::Parser#parse_io` now correctly parses HTML and not XML [[#1577](https://github.com/sparklemotion/nokogiri/issues/1577)] (Thanks for the test case, [@gregors](https://github.com/gregors)!)\n* Support installation on systems with a `lib64` site config. [[#1562](https://github.com/sparklemotion/nokogiri/issues/1562)]\n* [MRI] on OpenBSD, do not require gcc if using system libraries [[#1515](https://github.com/sparklemotion/nokogiri/issues/1515)] (Thanks, [@jeremyevans](https://github.com/jeremyevans)!)\n* [MRI] `XML::Attr.new` checks type of Document arg to prevent segfaults. [[#1477](https://github.com/sparklemotion/nokogiri/issues/1477)]\n* [MRI] Prefer xmlCharStrdup (and friends) to strdup (and friends), which can cause problems on some platforms. [[#1517](https://github.com/sparklemotion/nokogiri/issues/1517)] (Thanks, [@jeremy](https://github.com/jeremy)!)\n* [JRuby] correctly append a text node before another text node [[#1318](https://github.com/sparklemotion/nokogiri/issues/1318)] (Thanks, [@jkraemer](https://github.com/jkraemer)!)\n* [JRuby] custom xpath functions returning an integer now work correctly [[#1595](https://github.com/sparklemotion/nokogiri/issues/1595)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] serializing (`#to_html`, `#to_s`, et al) a document with explicit encoding now works correctly. [[#1281](https://github.com/sparklemotion/nokogiri/issues/1281), [#1440](https://github.com/sparklemotion/nokogiri/issues/1440)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] `XML::Reader` now returns parse errors [[#1586](https://github.com/sparklemotion/nokogiri/issues/1586)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] Empty `NodeSet`s are now decorated properly. [[#1319](https://github.com/sparklemotion/nokogiri/issues/1319)] (Thanks, [@kares](https://github.com/kares)!)\n* [JRuby] Merged nodes no longer results in Java exceptions during XPath queries. [[#1320](https://github.com/sparklemotion/nokogiri/issues/1320)] (Thanks, [@kares](https://github.com/kares)!)\n\n\n## 1.7.2 / 2017-05-09\n\n### Security\n\n[MRI] Upstream libxslt patches are applied to the vendored libxslt 1.1.29 which address CVE-2017-5029 and CVE-2016-4738.\n\nFor more information:\n\n* [#1634](https://github.com/sparklemotion/nokogiri/issues/1634)\n* http://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-5029.html\n* http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4738.html\n\n\n## 1.7.1 / 2017-03-19\n\n### Security\n\n[MRI] Upstream libxml2 patches are applied to the vendored libxml 2.9.4 which address CVE-2016-4658 and CVE-2016-5131.\n\nFor more information:\n\n* [#1615](https://github.com/sparklemotion/nokogiri/issues/1615)\n* http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-4658.html\n* http://people.canonical.com/~ubuntu-security/cve/2016/CVE-2016-5131.html\n\n\n## 1.7.0.1 / 2017-01-04\n\n### Fixed\n\n* Fix OpenBSD support. ([#1569](https://github.com/sparklemotion/nokogiri/issues/1569)) (related to [#1543](https://github.com/sparklemotion/nokogiri/issues/1543))\n\n\n## 1.7.0 / 2016-12-26\n\n### Added\n\n* Remove deprecation warnings in Ruby 2.4.0 ([#1545](https://github.com/sparklemotion/nokogiri/issues/1545)) (Thanks, [@matthewd](https://github.com/matthewd)!)\n* Support egcc compiler on OpenBSD ([#1543](https://github.com/sparklemotion/nokogiri/issues/1543)) (Thanks, [@frenkel](https://github.com/frenkel) and [@knu](https://github.com/knu)!)\n\n\n### Dependencies\n\nThis release ends support for:\n\n* Ruby 1.9.2, for which official support ended on 2014-07-31\n* Ruby 1.9.3, for which official support ended on 2015-02-23\n* Ruby 2.0.0, for which official support ended on 2016-02-24\n* MacRuby, which hasn't been actively supported since 2015-01-13 (see https://github.com/MacRuby/MacRuby/commit/f76b9d6e99c18236db617e8aceb12c27d593a483)\n\n\n## 1.6.8.1 / 2016-10-03\n\n### Dependencies\n\nRemoves required dependency on the `pkg-config` gem. This dependency\nwas introduced in v1.6.8 and, because it's distributed under LGPL, was\nobjectionable to many Nokogiri users ([#1488](https://github.com/sparklemotion/nokogiri/issues/1488), [#1496](https://github.com/sparklemotion/nokogiri/issues/1496)).\n\nThis version makes `pkg-config` an optional dependency. If it's\ninstalled, it's used; but otherwise Nokogiri will attempt to work\naround its absence.\n\n\n## 1.6.8 / 2016-06-06\n\n### Security\n\n[MRI] Bundled libxml2 is upgraded to 2.9.4, which fixes many security issues. Many of these had previously been patched in the vendored libxml 2.9.2 in the 1.6.7.x branch, but some are newer.\n\nSee these libxml2 email posts for more:\n\n* https://mail.gnome.org/archives/xml/2015-November/msg00012.html\n* https://mail.gnome.org/archives/xml/2016-May/msg00023.html\n\nFor a more detailed analysis, you may care to read Canonical's take on these security issues:\n\n* http://www.ubuntu.com/usn/usn-2994-1\n\n\n[MRI] Bundled libxslt is upgraded to 1.1.29, which fixes a security issue as well as many long-known outstanding bugs, some features, some portability improvements, and general cleanup.\n\nSee this libxslt email post for more:\n\n* https://mail.gnome.org/archives/xslt/2016-May/msg00004.html\n\n\n### Added\n\nSeveral changes were made to improve performance:\n\n* [MRI] Simplify `NodeSet#to_a` with a minor speed-up. ([#1397](https://github.com/sparklemotion/nokogiri/issues/1397))\n* `XML::Node#ancestors` optimization. ([#1297](https://github.com/sparklemotion/nokogiri/issues/1297)) (Thanks, Bruno Sutic!)\n* Use `Symbol#to_proc` where we weren't previously. ([#1296](https://github.com/sparklemotion/nokogiri/issues/1296)) (Thanks, Bruno Sutic!)\n* `XML::DTD#each` uses implicit block calls. (Thanks, [@glaucocustodio](https://github.com/glaucocustodio)!)\n* Fall back to the `pkg-config` gem if we're having trouble finding the system libxml2. This should help many FreeBSD users. ([#1417](https://github.com/sparklemotion/nokogiri/issues/1417))\n* Set document encoding appropriately even on blank document. ([#1043](https://github.com/sparklemotion/nokogiri/issues/1043)) (Thanks, [@batter](https://github.com/batter)!)\n\n\n### Fixed\n\n* [JRuby] fix slow add_child ([#692](https://github.com/sparklemotion/nokogiri/issues/692))\n* [JRuby] fix load errors when deploying to JRuby/Torquebox ([#1114](https://github.com/sparklemotion/nokogiri/issues/1114)) (Thanks, [@atambo](https://github.com/atambo) and [@jvshahid](https://github.com/jvshahid)!)\n* [JRuby] fix NPE when inspecting nodes returned by `NodeSet#drop` ([#1042](https://github.com/sparklemotion/nokogiri/issues/1042)) (Thanks, [@mkristian](https://github.com/mkristian)!)\n* [JRuby] fix nil attriubte node's namespace in reader ([#1327](https://github.com/sparklemotion/nokogiri/issues/1327)) (Thanks, [@codekitchen](https://github.com/codekitchen)!)\n* [JRuby] fix Nokogiri munging unicode characters that require more than 2 bytes ([#1113](https://github.com/sparklemotion/nokogiri/issues/1113)) (Thanks, [@mkristian](https://github.com/mkristian)!)\n* [JRuby] allow unlinking an unparented node ([#1112](https://github.com/sparklemotion/nokogiri/issues/1112), [#1152](https://github.com/sparklemotion/nokogiri/issues/1152)) (Thanks, [@esse](https://github.com/esse)!)\n* [JRuby] allow Fragment parsing on a frozen string ([#444](https://github.com/sparklemotion/nokogiri/issues/444), [#1077](https://github.com/sparklemotion/nokogiri/issues/1077))\n* [JRuby] HTML `style` tags are no longer encoded ([#1316](https://github.com/sparklemotion/nokogiri/issues/1316)) (Thanks, [@tbeauvais](https://github.com/tbeauvais)!)\n* [MRI] fix assertion failure while accessing attribute node's namespace in reader ([#843](https://github.com/sparklemotion/nokogiri/issues/843)) (Thanks, [@2potatocakes](https://github.com/2potatocakes)!)\n* [MRI] fix issue with GCing namespace nodes returned in an xpath query. ([#1155](https://github.com/sparklemotion/nokogiri/issues/1155))\n* [MRI] Ensure C strings are null-terminated. ([#1381](https://github.com/sparklemotion/nokogiri/issues/1381))\n* [MRI] Ensure Rubygems is loaded before using mini_portile2 at installation. ([#1393](https://github.com/sparklemotion/nokogiri/issues/1393), [#1411](https://github.com/sparklemotion/nokogiri/issues/1411)) (Thanks, [@JonRowe](https://github.com/JonRowe)!)\n* [MRI] Handling another edge case where the `libxml-ruby` gem's global callbacks were smashing the heap. ([#1426](https://github.com/sparklemotion/nokogiri/issues/1426)). (Thanks to [@bbergstrom](https://github.com/bbergstrom) for providing an isolated test case!)\n* [MRI] Ensure encodings are passed to `Sax::Parser` xmldecl callback. ([#844](https://github.com/sparklemotion/nokogiri/issues/844))\n* [MRI] Ensure default ns prefix is applied correctly when reparenting nodes to another document. ([#391](https://github.com/sparklemotion/nokogiri/issues/391)) (Thanks, [@ylecuyer](https://github.com/ylecuyer)!)\n* [MRI] Ensure Reader handles non-existent attributes as expected. ([#1254](https://github.com/sparklemotion/nokogiri/issues/1254)) (Thanks, [@ccutrer](https://github.com/ccutrer)!)\n* [MRI] Cleanup around namespace handling when reparenting nodes. ([#1332](https://github.com/sparklemotion/nokogiri/issues/1332), [#1333](https://github.com/sparklemotion/nokogiri/issues/1333), [#1444](https://github.com/sparklemotion/nokogiri/issues/1444)) (Thanks, [@cuttrer](https://github.com/cuttrer) and [@bradleybeddoes](https://github.com/bradleybeddoes)!)\n* unescape special characters in CSS queries ([#1303](https://github.com/sparklemotion/nokogiri/issues/1303)) (Thanks, [@twalpole](https://github.com/twalpole)!)\n* consistently handle empty documents ([#1349](https://github.com/sparklemotion/nokogiri/issues/1349))\n* Update to mini_portile2 2.1.0 to address whitespace-handling during patching. ([#1402](https://github.com/sparklemotion/nokogiri/issues/1402))\n* Fix encoding of xml node namespaces.\n* Work around issue installing Nokogiri on overlayfs (commonly used in Docker containers). ([#1370](https://github.com/sparklemotion/nokogiri/issues/1370), [#1405](https://github.com/sparklemotion/nokogiri/issues/1405))\n\n\n\n### Notes\n\n* Removed legacy code remaining from Ruby 1.8.x support.\n* Removed legacy code remaining from REE support.\n* Removing hacky workarounds for bugs in some older versions of libxml2.\n* Handling C strings in a forward-compatible manner, see https://github.com/ruby/ruby/blob/v2_2_0/NEWS#L319\n\n\n## 1.6.7.2 / 2016-01-20\n\nThis version pulls in several upstream patches to the vendored libxml2 and libxslt to address:\n\n* CVE-2015-7499\n\nUbuntu classifies this as \"Priority: Low\", RedHat classifies this as \"Impact: Moderate\", and NIST classifies this as \"Severity: 5.0 (MEDIUM)\".\n\nMITRE record is https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7499\n\n\n## 1.6.7.1 / 2015-12-16\n\nThis version pulls in several upstream patches to the vendored libxml2 and libxslt to address:\n\n* CVE-2015-5312\n* CVE-2015-7497\n* CVE-2015-7498\n* CVE-2015-7499\n* CVE-2015-7500\n* CVE-2015-8241\n* CVE-2015-8242\n* CVE-2015-8317\n\nSee also http://www.ubuntu.com/usn/usn-2834-1/\n\n\n## 1.6.7 / 2015-11-29\n\n### Added\n\nThis version supports native builds on Windows using the RubyInstaller\nDevKit. It also supports Ruby 2.2.x on Windows, as well as making\nseveral other improvements to the installation process on various\nplatforms.\n\n### Security\n\nThis version also includes the security patches already applied in\nv1.6.6.3 and v1.6.6.4 to the vendored libxml2 and libxslt source.\nSee [#1374](https://github.com/sparklemotion/nokogiri/issues/1374) and [#1376](https://github.com/sparklemotion/nokogiri/issues/1376) for details.\n\n### Added\n\n* Cross-built gems now have a proper ruby version requirement. ([#1266](https://github.com/sparklemotion/nokogiri/issues/1266))\n* Ruby 2.2.x is supported on Windows.\n* Native build is supported on Windows.\n* [MRI] libxml2 and libxslt `config.guess` files brought up to date. ([#1326](https://github.com/sparklemotion/nokogiri/issues/1326)) (Thanks, [[@hernan](https://github.com/hernan)-erasmo](https://github.com/hernan-erasmo)!)\n* [JRuby] fix error in validating files with jruby ([#1355](https://github.com/sparklemotion/nokogiri/issues/1355), [#1361](https://github.com/sparklemotion/nokogiri/issues/1361)) (Thanks, [@twalpole](https://github.com/twalpole)!)\n* [MRI, OSX] Patch to handle nonstandard location of `iconv.h`. ([#1206](https://github.com/sparklemotion/nokogiri/issues/1206), [#1210](https://github.com/sparklemotion/nokogiri/issues/1210), [#1218](https://github.com/sparklemotion/nokogiri/issues/1218), [#1345](https://github.com/sparklemotion/nokogiri/issues/1345)) (Thanks, [@neonichu](https://github.com/neonichu)!)\n\n### Fixed\n\n* [JRuby] reset the namespace cache when replacing the document's innerHtml ([#1265](https://github.com/sparklemotion/nokogiri/issues/1265)) (Thanks, [@mkristian](https://github.com/mkristian)!)\n* [JRuby] `Document#parse` should support IO objects that respond to `#read`. ([#1124](https://github.com/sparklemotion/nokogiri/issues/1124)) (Thanks, Jake Byman!)\n* [MRI] Duplicate-id errors when setting the `id` attribute on HTML documents are now silenced. ([#1262](https://github.com/sparklemotion/nokogiri/issues/1262))\n* [JRuby] SAX parser cuts texts in pieces when square brackets exist. ([#1261](https://github.com/sparklemotion/nokogiri/issues/1261))\n* [JRuby] Namespaced attributes aren't removed by remove_attribute. ([#1299](https://github.com/sparklemotion/nokogiri/issues/1299))\n\n\n## 1.6.6.4 / 2015-11-19\n\nThis version pulls in an upstream patch to the vendored libxml2 to address:\n\n* unclosed comment uninitialized access issue ([#1376](https://github.com/sparklemotion/nokogiri/issues/1376))\n\nThis issue was assigned CVE-2015-8710 after the fact. See http://seclists.org/oss-sec/2015/q4/616 for details.\n\n\n## 1.6.6.3 / 2015-11-16\n\nThis version pulls in several upstream patches to the vendored libxml2 and libxslt to address:\n\n* CVE-2015-1819\n* CVE-2015-7941_1\n* CVE-2015-7941_2\n* CVE-2015-7942\n* CVE-2015-7942-2\n* CVE-2015-8035\n* CVE-2015-7995\n\nSee [#1374](https://github.com/sparklemotion/nokogiri/issues/1374) for details.\n\n\n## 1.6.6.2 / 2015-01-23\n\n### Fixed\n\n* Fixed installation issue affecting compiler arguments. ([#1230](https://github.com/sparklemotion/nokogiri/issues/1230))\n\n\n## 1.6.6.1 / 2015-01-22\n\nNote that 1.6.6.0 was not released.\n\n\n### Added\n\n* Unified `Node` and `NodeSet` implementations of `#search`, `#xpath` and `#css`.\n* Added `Node#lang` and `Node#lang=`.\n* `bin/nokogiri` passes the URI to `parse()` if an HTTP URL is given.\n* `bin/nokogiri` now loads `~/.nokogirirc` so user can define helper methods, etc.\n* `bin/nokogiri` can be configured to use Pry instead of IRB by adding a couple of lines to ~/.nokogirirc. ([#1198](https://github.com/sparklemotion/nokogiri/issues/1198))\n* `bin/nokogiri` can better handle urls from STDIN (aiding use of xargs). ([#1065](https://github.com/sparklemotion/nokogiri/issues/1065))\n* JRuby 9K support.\n\n\n### Fixed\n\n* `DocumentFragment#search` now matches against root nodes. ([#1205](https://github.com/sparklemotion/nokogiri/issues/1205))\n* (MRI) More fixes related to handling libxml2 parse errors during `DocumentFragment#dup`. ([#1196](https://github.com/sparklemotion/nokogiri/issues/1196))\n* (JRuby) Builder now handles namespace hrefs properly when there is a default ns. ([#1039](https://github.com/sparklemotion/nokogiri/issues/1039))\n* (JRuby) Clear the XPath cache on attr removal. ([#1109](https://github.com/sparklemotion/nokogiri/issues/1109))\n* `XML::Comment.new` argument types are now consistent and safe (and documented) across MRI and JRuby. ([#1224](https://github.com/sparklemotion/nokogiri/issues/1224))\n* (MRI) Restoring support for Ruby 1.9.2 that was broken in v1.6.4.1 and v1.6.5. ([#1207](https://github.com/sparklemotion/nokogiri/issues/1207))\n* Check if `zlib` is available before building `libxml2`. ([#1188](https://github.com/sparklemotion/nokogiri/issues/1188))\n* (JRuby) HtmlSaxPushParser now exists. ([#1147](https://github.com/sparklemotion/nokogiri/issues/1147)) (Thanks, Piotr Szmielew!)\n\n\n## 1.6.5 / 2014-11-26\n\n### Added\n\n* Implement `Slop#respond_to_missing?`. ([#1176](https://github.com/sparklemotion/nokogiri/issues/1176))\n* Optimized the XPath query generated by an `an+b` CSS query.\n\n\n### Fixed\n\n* Capture non-parse errors from `Document#dup` in `Document#errors`. ([#1196](https://github.com/sparklemotion/nokogiri/issues/1196))\n* (JRuby) `Document#canonicalize` parameters are now consistent with MRI. ([#1189](https://github.com/sparklemotion/nokogiri/issues/1189))\n\n\n## 1.6.4.1 / 2014-11-05\n\n### Fixed\n\n* (MRI) Fix a bug where CFLAGS passed in are dropped. ([#1188](https://github.com/sparklemotion/nokogiri/issues/1188))\n* Fix a bug where CSS selector :nth(n) did not work. ([#1187](https://github.com/sparklemotion/nokogiri/issues/1187))\n\n\n## 1.6.4 / 2014-11-04\n\n### Added\n\n* (MRI) Bundled Libxml2 is upgraded to 2.9.2.\n* (MRI) `nokogiri --version` will include a list of applied patches.\n* (MRI) Nokogiri no longer prints messages directly to TTY while building the extension.\n* (MRI) Detect and help user fix a missing /usr/include/iconv.h on OS X. ([#1111](https://github.com/sparklemotion/nokogiri/issues/1111))\n* (MRI) Improve the iconv detection for building libxml2.\n\n### Fixed\n\n* (MRI) Fix `DocumentFragment#element_children` ([#1138](https://github.com/sparklemotion/nokogiri/issues/1138)).\n* Fix a bug with CSS attribute selector without any prefix where \"foo [bar]\" was treated as \"foo[bar]\". ([#1174](https://github.com/sparklemotion/nokogiri/issues/1174))\n\n\n## 1.6.3.1 / 2014-07-21\n\n### Fixed\n\n* Addressing an Apple Macintosh installation problem for GCC users. [#1130](https://github.com/sparklemotion/nokogiri/issues/1130) (Thanks, [@zenspider](https://github.com/zenspider)!)\n\n\n## 1.6.3 / 2014-07-20\n\n### Added\n\n* Added `Node#document?` and `Node#processing_instruction?`\n\n\n### Fixed\n\n* [JRuby] Fix Ruby memory exhaustion vulnerability. [#1087](https://github.com/sparklemotion/nokogiri/issues/1087) (Thanks, [@ocher](https://github.com/ocher))\n* [MRI] Fix segfault during GC when using `libxml-ruby` and `nokogiri` together in multi-threaded environment. [#895](https://github.com/sparklemotion/nokogiri/issues/895) (Thanks, [@ender672](https://github.com/ender672)!)\n* Building on OSX 10.9 stock ruby 2.0.0 now works. [#1101](https://github.com/sparklemotion/nokogiri/issues/1101) (Thanks, [@zenspider](https://github.com/zenspider)!)\n* `Node#parse` now works again for HTML document nodes (broken in 1.6.2+).\n* Processing instructions can now be added via `Node#add_next_sibling`.\n\n\n## 1.6.2.1 / 2014-05-13\n\n### Fixed\n\n* Fix statically-linked libxml2 installation when using universal builds of Ruby. [#1104](https://github.com/sparklemotion/nokogiri/issues/1104)\n* Patching `mini_portile` to address the git dependency detailed in [#1102](https://github.com/sparklemotion/nokogiri/issues/1102).\n* Library load fix to address segfault reported on some systems. [#1097](https://github.com/sparklemotion/nokogiri/issues/1097)\n\n\n## 1.6.2 / 2014-05-12\n\n### Security\n\nA set of security and bugfix patches have been backported from the libxml2 and libxslt repositories onto the version of 2.8.0 packaged with Nokogiri, including these notable security fixes:\n\n* https://git.gnome.org/browse/libxml2/commit/?id=4629ee02ac649c27f9c0cf98ba017c6b5526070f\n* CVE-2013-2877 https://git.gnome.org/browse/libxml2/commit/?id=e50ba8164eee06461c73cd8abb9b46aa0be81869\n* CVE-2014-0191 https://git.gnome.org/browse/libxml2/commit/?id=9cd1c3cfbd32655d60572c0a413e017260c854df\n\nIt is recommended that you upgrade from 1.6.x to this version as soon as possible.\n\n### Dependencies\n\nNow requires libxml >= 2.6.21 (was previously >= 2.6.17).\n\n### Added\n\n* Add cross building of fat binary gems for 64-Bit Windows (x64-mingw32) and add support for native builds on Windows. [#864](https://github.com/sparklemotion/nokogiri/issues/864), [#989](https://github.com/sparklemotion/nokogiri/issues/989), [#1072](https://github.com/sparklemotion/nokogiri/issues/1072)\n* (MRI) Alias CP932 to Windows-31J if iconv does not support Windows-31J.\n* (MRI) Nokogiri now links packaged libraries statically. To disable static linking, pass --disable-static to `extconf.rb`. [#923](https://github.com/sparklemotion/nokogiri/issues/923)\n* (MRI) Fix a library path (LIBPATH) precedence problem caused by CRuby bug [#9760](https://github.com/sparklemotion/nokogiri/issues/9760).\n* (MRI) Nokogiri automatically deletes directories of packaged libraries only used during build. To keep them for debugging purposes, pass --disable-clean to `extconf.rb`. [#952](https://github.com/sparklemotion/nokogiri/issues/952)\n* (MRI) Nokogiri now builds libxml2 properly with iconv support on platforms where libiconv is installed outside the system default directories, such as FreeBSD.\n* Add support for an-b in nth selectors. [#886](https://github.com/sparklemotion/nokogiri/issues/886) (Thanks, Magnus Bergmark!)\n* Add support for bare and multiple `:not()` functions in selectors. [#887](https://github.com/sparklemotion/nokogiri/issues/887) (Thanks, Magnus Bergmark!)\n* (MRI) Add an `extconf.rb` option --use-system-libraries, alternative to setting the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES.\n* (MRI) Update packaged libraries: libxslt to 1.1.28, zlib to 1.2.8, and libiconv to 1.14, respectively.\n* `Nokogiri::HTML::Document#title=` and `#meta_encoding`= now always add an element if not present, trying hard to find the best place to put it.\n* `Nokogiri::XML::DTD#html_dtd?` and `#html5_dtd?` are added.\n* `Nokogiri::XML::Node#prepend_child` is added. [#664](https://github.com/sparklemotion/nokogiri/issues/664)\n* `Nokogiri::XML::SAX::ParserContext#recovery` is added. [#453](https://github.com/sparklemotion/nokogiri/issues/453)\n* Fix documentation for `XML::Node#namespace`. [#803](https://github.com/sparklemotion/nokogiri/issues/803) [#802](https://github.com/sparklemotion/nokogiri/issues/802) (Thanks, Hoylen Sue)\n* Allow `Nokogiri::XML::Node#parse` from unparented non-element nodes. [#407](https://github.com/sparklemotion/nokogiri/issues/407)\n\n### Fixed\n\n* Ensure :only-child pseudo class works within :not pseudo class. [#858](https://github.com/sparklemotion/nokogiri/issues/858) (Thanks, Yamagishi Kazutoshi!)\n* Don't call pkg_config when using bundled libraries in `extconf.rb` [#931](https://github.com/sparklemotion/nokogiri/issues/931) (Thanks, Shota Fukumori!)\n* `Nokogiri.parse()` does not mistake a non-HTML document like a RSS document as HTML document. [#932](https://github.com/sparklemotion/nokogiri/issues/932) (Thanks, Yamagishi Kazutoshi!)\n* (MRI) Perform a node type check before adding a child node to another. Previously adding a text node to another as a child could cause a SEGV. [#1092](https://github.com/sparklemotion/nokogiri/issues/1092)\n* (JRuby) XSD validation crashes in Java version. [#373](https://github.com/sparklemotion/nokogiri/issues/373)\n* (JRuby) Document already has a root node error while using Builder. [#646](https://github.com/sparklemotion/nokogiri/issues/646)\n* (JRuby) c14n tests are all passing on JRuby. [#226](https://github.com/sparklemotion/nokogiri/issues/226)\n* Parsing empty documents raise `SyntaxError` in strict mode. [#1005](https://github.com/sparklemotion/nokogiri/issues/1005)\n* (JRuby) Make xpath faster by caching the xpath context. [#741](https://github.com/sparklemotion/nokogiri/issues/741)\n* (JRuby) XML SAX push parser leaks memory on JRuby, but not on MRI. [#998](https://github.com/sparklemotion/nokogiri/issues/998)\n* (JRuby) Inconsistent behavior aliasing the default namespace. [#940](https://github.com/sparklemotion/nokogiri/issues/940)\n* (JRuby) Inconsistent behavior between parsing and adding namespaces. [#943](https://github.com/sparklemotion/nokogiri/issues/943)\n* (JRuby) Xpath returns inconsistent result set on cloned document with namespaces and attributes. [#1034](https://github.com/sparklemotion/nokogiri/issues/1034)\n* (JRuby) Java-Implementation forgets element namespaces [#902](https://github.com/sparklemotion/nokogiri/issues/902)\n* (JRuby) JRuby-Nokogiri does not recognise attributes inside namespaces [#1081](https://github.com/sparklemotion/nokogiri/issues/1081)\n* (JRuby) JRuby-Nokogiri has different comment node name [#1080](https://github.com/sparklemotion/nokogiri/issues/1080)\n* (JRuby) JAXPExtensionsProvider / Java 7 / Secure Processing [#1070](https://github.com/sparklemotion/nokogiri/issues/1070)\n\n## 1.6.1 / 2013-12-14\n\n### Fixed\n\n* (JRuby) Fix out of memory bug when certain invalid documents are parsed.\n* (JRuby) Fix regression of billion-laughs vulnerability. [#586](https://github.com/sparklemotion/nokogiri/issues/586)\n\n\n## 1.6.0 / 2013-06-08\n\nThis release was based on v1.5.10 and 1.6.0.rc1, and contains changes\nmentioned in both.\n\n### Deprecations\n\n* Remove pre 1.9 monitoring from Travis.\n\n\n## 1.6.0.rc1 / 2013-04-14\n\nThis release was based on v1.5.9, and so does not contain any fixes\nmentioned in the notes for v1.5.10.\n\n### Notes\n\n* mini_portile is now a runtime dependency\n* Ruby 1.9.2 and higher now required\n\n\n### Added\n\n* (MRI) Source code for libxml 2.8.0 and libxslt 1.2.26 is packaged with the gem. These libraries are compiled at gem install time unless the environment variable NOKOGIRI_USE_SYSTEM_LIBRARIES is set. VERSION_INFO (also `nokogiri -v`) exposes whether libxml was compiled from packaged source, or the system library was used.\n* (Windows) libxml upgraded to 2.8.0\n\n\n### Dependencies\n\n* Support for Ruby 1.8.7 and prior has been dropped\n\n\n## 1.5.11 / 2013-12-14\n\n### Fixed\n\n* (JRuby) Fix out of memory bug when certain invalid documents are parsed.\n* (JRuby) Fix regression of billion-laughs vulnerability. [#586](https://github.com/sparklemotion/nokogiri/issues/586)\n\n\n## 1.5.10 / 2013-06-07\n\n### Fixed\n\n* (JRuby) Fix \"null document\" error when parsing an empty IO in jruby 1.7.3. [#883](https://github.com/sparklemotion/nokogiri/issues/883)\n* (JRuby) Fix schema validation when XSD has DOCTYPE set to DTD. [#912](https://github.com/sparklemotion/nokogiri/issues/912) (Thanks, Patrick Cheng!)\n* (MRI) Fix segfault when there is no default subelement for an HTML node. [#917](https://github.com/sparklemotion/nokogiri/issues/917)\n\n\n### Notes\n\n* Use rb_ary_entry instead of RARRAY_PTR (you know, for Rubinius). [#877](https://github.com/sparklemotion/nokogiri/issues/877) (Thanks, Dirkjan Bussink!)\n* Fix TypeError when running tests. [#900](https://github.com/sparklemotion/nokogiri/issues/900) (Thanks, C\u00e9dric Boutillier!)\n\n\n## 1.5.9 / 2013-03-21\n\n### Fixed\n\n* Ensure that prefixed attributes are properly namespaced when reparented. [#869](https://github.com/sparklemotion/nokogiri/issues/869)\n* Fix for inconsistent namespaced attribute access for SVG nested in HTML. [#861](https://github.com/sparklemotion/nokogiri/issues/861)\n* (MRI) Fixed a memory leak in fragment parsing if nodes are not all subsequently reparented. [#856](https://github.com/sparklemotion/nokogiri/issues/856)\n\n\n## 1.5.8 / 2013-03-19\n\n### Fixed\n\n* (JRuby) Fix EmptyStackException thrown by elements with xlink:href attributes and no base_uri [#534](https://github.com/sparklemotion/nokogiri/issues/534), [#805](https://github.com/sparklemotion/nokogiri/issues/805). (Thanks, Patrick Quinn and Brian Hoffman!)\n* Fixes duplicate attributes issue introduced in 1.5.7. [#865](https://github.com/sparklemotion/nokogiri/issues/865)\n* Allow use of a prefixed namespace on a root node using `Nokogiri::XML::Builder` [#868](https://github.com/sparklemotion/nokogiri/issues/868)\n\n\n## 1.5.7 / 2013-03-18\n\n### Added\n\n* Windows support for Ruby 2.0.\n\n\n### Fixed\n\n* `SAX::Parser.parse_io` throw an error when used with lower case encoding. [#828](https://github.com/sparklemotion/nokogiri/issues/828)\n* (JRuby) Java Nokogiri is finally green (passes all tests) under 1.8 and 1.9 mode. High five everyone. [#798](https://github.com/sparklemotion/nokogiri/issues/798), [#705](https://github.com/sparklemotion/nokogiri/issues/705)\n* (JRuby) `Nokogiri::XML::Reader` broken (as a pull parser) on jruby - reads the whole XML document. [#831](https://github.com/sparklemotion/nokogiri/issues/831)\n* (JRuby) JRuby hangs parsing \"&amp;\". [#837](https://github.com/sparklemotion/nokogiri/issues/837)\n* (JRuby) JRuby NPE parsing an invalid XML instruction. [#838](https://github.com/sparklemotion/nokogiri/issues/838)\n* (JRuby) `Node#content=` incompatibility. [#839](https://github.com/sparklemotion/nokogiri/issues/839)\n* (JRuby) to_xhtml doesn't print the last slash for self-closing tags in JRuby. [#834](https://github.com/sparklemotion/nokogiri/issues/834)\n* (JRuby) Adding an `EntityReference` after a Text node mangles the entity in JRuby. [#835](https://github.com/sparklemotion/nokogiri/issues/835)\n* (JRuby) JRuby version inconsistency: nil for empty attributes. [#818](https://github.com/sparklemotion/nokogiri/issues/818)\n* CSS queries for classes (e.g., \".foo\") now treat all whitespace identically. [#854](https://github.com/sparklemotion/nokogiri/issues/854)\n* Namespace behavior cleaned up and made consistent between JRuby and MRI. [#846](https://github.com/sparklemotion/nokogiri/issues/846), [#801](https://github.com/sparklemotion/nokogiri/issues/801) (Thanks, Michael Klein!)\n* (MRI) SAX parser handles empty processing instructions. [#845](https://github.com/sparklemotion/nokogiri/issues/845)\n\n\n## 1.5.6 / 2012-12-19\n\n### Added\n\n* Improved performance of `XML::Document#collect_namespaces`. [#761](https://github.com/sparklemotion/nokogiri/issues/761) (Thanks, Juergen Mangler!)\n* New callback `SAX::Document#processing_instruction` (Thanks, Kitaiti Makoto!)\n* `Node#native_content=` allows setting unescaped node content. [#768](https://github.com/sparklemotion/nokogiri/issues/768)\n* XPath lookup with namespaces supports symbol keys. [#729](https://github.com/sparklemotion/nokogiri/issues/729) (Thanks, Ben Langfeld.)\n* `XML::Node#[]=` stringifies values. [#729](https://github.com/sparklemotion/nokogiri/issues/729) (Thanks, Ben Langfeld.)\n* `bin/nokogiri` will process a document from $stdin\n* `bin/nokogiri -e` will execute a program from the command line\n* (JRuby) `bin/nokogiri --version` will print the Xerces and NekoHTML versions.\n\n\n### Fixed\n\n* Nokogiri now detects XSLT transform errors. [#731](https://github.com/sparklemotion/nokogiri/issues/731) (Thanks, Justin Fitzsimmons!)\n* Don't throw an Error when trying to replace top-level text node in DocumentFragment. [#775](https://github.com/sparklemotion/nokogiri/issues/775)\n* Raise an ArgumentError if an invalid encoding is passed to the SAX parser. [#756](https://github.com/sparklemotion/nokogiri/issues/756) (Thanks, Bradley Schaefer!)\n* Prefixed element inconsistency between CRuby and JRuby. [#712](https://github.com/sparklemotion/nokogiri/issues/712)\n* (JRuby) space prior to xml preamble causes nokogiri to fail parsing. (fixed along with [#748](https://github.com/sparklemotion/nokogiri/issues/748)) [#790](https://github.com/sparklemotion/nokogiri/issues/790)\n* (JRuby) Fixed the bug `Nokogiri::XML::Node#content` inconsistency between Java and C. [#794](https://github.com/sparklemotion/nokogiri/issues/794), [#797](https://github.com/sparklemotion/nokogiri/issues/797)\n* (JRuby) raises INVALID_CHARACTER_ERR exception when EntityReference name starts with '#'. [#719](https://github.com/sparklemotion/nokogiri/issues/719)\n* (JRuby) doesn't coerce namespaces out of strings on a direct subclass of Node. [#715](https://github.com/sparklemotion/nokogiri/issues/715)\n* (JRuby) `Node#content` now renders newlines properly. [#737](https://github.com/sparklemotion/nokogiri/issues/737) (Thanks, Piotr Szmielew!)\n* (JRuby) Unknown namespace are ignore when the recover option is used. [#748](https://github.com/sparklemotion/nokogiri/issues/748)\n* (JRuby) XPath queries for namespaces should not throw exceptions when called twice in a row. [#764](https://github.com/sparklemotion/nokogiri/issues/764)\n* (JRuby) More consistent (with libxml2) whitespace formatting when emitting XML. [#771](https://github.com/sparklemotion/nokogiri/issues/771)\n* (JRuby) namespaced attributes broken when appending raw xml to builder. [#770](https://github.com/sparklemotion/nokogiri/issues/770)\n* (JRuby) `Nokogiri::XML::Document#wrap` raises undefined method `length' for nil:NilClass when trying to << to a node. [#781](https://github.com/sparklemotion/nokogiri/issues/781)\n* (JRuby) Fixed \"bad file descriptor\" bug when closing open file descriptors. [#495](https://github.com/sparklemotion/nokogiri/issues/495)\n* (JRuby) JRuby/CRuby incompatibility for attribute decorators. [#785](https://github.com/sparklemotion/nokogiri/issues/785)\n* (JRuby) Issues parsing valid XML with no internal subset in the DTD. [#547](https://github.com/sparklemotion/nokogiri/issues/547), [#811](https://github.com/sparklemotion/nokogiri/issues/811)\n* (JRuby) Issues parsing valid node content when it contains colons. [#728](https://github.com/sparklemotion/nokogiri/issues/728)\n* (JRuby) Correctly parse the doc type of html documents. [#733](https://github.com/sparklemotion/nokogiri/issues/733)\n* (JRuby) Include dtd in the xml output when a builder is used with create_internal_subset. [#751](https://github.com/sparklemotion/nokogiri/issues/751)\n* (JRuby) builder requires textwrappers for valid utf8 in jruby, not in mri. [#784](https://github.com/sparklemotion/nokogiri/issues/784)\n\n\n## 1.5.5 / 2012-06-24\n\n### Added\n\n* Much-improved support for JRuby in 1.9 mode! Yay!\n\n### Fixed\n\n* Regression in JRuby Nokogiri add_previous_sibling (1.5.0 -> 1.5.1) [#691](https://github.com/sparklemotion/nokogiri/issues/691) (Thanks, John Shahid!)\n* JRuby unable to create HTML doc if URL arg provided [#674](https://github.com/sparklemotion/nokogiri/issues/674) (Thanks, John Shahid!)\n* JRuby raises NullPointerException when given HTML document is nil or empty string. [#699](https://github.com/sparklemotion/nokogiri/issues/699)\n* JRuby 1.9 error, uncaught throw 'encoding_found', has been fixed. [#673](https://github.com/sparklemotion/nokogiri/issues/673)\n* Invalid encoding returned in JRuby with US-ASCII. [#583](https://github.com/sparklemotion/nokogiri/issues/583)\n* XmlSaxPushParser raises IndexOutOfBoundsException when over 512 characters are given. [#567](https://github.com/sparklemotion/nokogiri/issues/567), [#615](https://github.com/sparklemotion/nokogiri/issues/615)\n* When xpath evaluation returns empty `NodeSet`, decorating `NodeSet`'s base document raises exception. [#514](https://github.com/sparklemotion/nokogiri/issues/514)\n* JRuby raises exception when xpath with namespace is specified. pull request [#681](https://github.com/sparklemotion/nokogiri/issues/681) (Thanks, Piotr Szmielew)\n* JRuby renders nodes without their namespace when subclassing Node. [#695](https://github.com/sparklemotion/nokogiri/issues/695)\n* JRuby raises NAMESPACE_ERR (org.w3c.dom.DOMException) while instantiating `RDF::RDFXML::Writer`. [#683](https://github.com/sparklemotion/nokogiri/issues/683)\n* JRuby is not able to use namespaces in xpath. [#493](https://github.com/sparklemotion/nokogiri/issues/493)\n* JRuby's Entity resolving should be consistent with C-Nokogiri [#704](https://github.com/sparklemotion/nokogiri/issues/704), [#647](https://github.com/sparklemotion/nokogiri/issues/647), [#703](https://github.com/sparklemotion/nokogiri/issues/703)\n\n\n## 1.5.4 / 2012-06-12\n\n### Added\n\n* The \"nokogiri\" script now has more verbose output when passed the `--rng` option. [#675](https://github.com/sparklemotion/nokogiri/issues/675) (Thanks, Dan Radez!)\n* Build support on hardened Debian systems that use `-Werror=format-security`. [#680](https://github.com/sparklemotion/nokogiri/issues/680).\n* Better build support for systems with pkg-config. [#584](https://github.com/sparklemotion/nokogiri/issues/584)\n* Better build support for systems with multiple iconv installations.\n\n### Fixed\n\n* Segmentation fault when creating a comment node for a DocumentFragment. [#677](https://github.com/sparklemotion/nokogiri/issues/677), [#678](https://github.com/sparklemotion/nokogiri/issues/678).\n* Treat '.' as xpath in `at()` and `search()`. [#690](https://github.com/sparklemotion/nokogiri/issues/690)\n\n### Security\n\n(MRI) Default parse options for XML documents were changed to not make network connections during document parsing, to avoid XXE vulnerability. [#693](https://github.com/sparklemotion/nokogiri/issues/693)\n\nTo re-enable this behavior, the configuration method `nononet` may be called, like this:\n\n``` ruby\nNokogiri::XML::Document.parse(xml) { |config| config.nononet }\n```\n\nInsert your own joke about double-negatives here.\n\n\n## 1.5.3 / 2012-06-01\n\n### Added\n\n* Support for \"prefixless\" CSS selectors ~, > and + like jQuery supports. [#621](https://github.com/sparklemotion/nokogiri/issues/621), [#623](https://github.com/sparklemotion/nokogiri/issues/623). (Thanks, David Lee!)\n* Attempting to improve installation on homebrew 0.9 (with regards to iconv). Isn't package management convenient?\n\n### Fixed\n\n* Custom xpath functions with empty nodeset arguments cause a segfault. [#634](https://github.com/sparklemotion/nokogiri/issues/634).\n* `Nokogiri::XML::Node#css` now works for XML documents with default namespaces when the rule contains attribute selector without namespace.\n* Fixed marshalling bugs around how arguments are passed to (and returned from) XSLT custom xpath functions. [#640](https://github.com/sparklemotion/nokogiri/issues/640).\n* `Nokogiri::XML::Reader#outer_xml` is broken in JRuby [#617](https://github.com/sparklemotion/nokogiri/issues/617)\n* `Nokogiri::XML::Attribute` on JRuby returns a nil namespace [#647](https://github.com/sparklemotion/nokogiri/issues/647)\n* `Nokogiri::XML::Node#namespace=` cannot set a namespace without a prefix on JRuby [#648](https://github.com/sparklemotion/nokogiri/issues/648)\n* (JRuby) 1.9 mode causes dead lock while running rake [#571](https://github.com/sparklemotion/nokogiri/issues/571)\n* `HTML::Document#meta_encoding` does not raise exception on docs with malformed content-type. [#655](https://github.com/sparklemotion/nokogiri/issues/655)\n* Fixing segfault related to unsupported encodings in in-context parsing on 1.8.7. [#643](https://github.com/sparklemotion/nokogiri/issues/643)\n* (JRuby) Concurrency issue in XPath parsing. [#682](https://github.com/sparklemotion/nokogiri/issues/682)\n\n\n## 1.5.2 / 2012-03-09\n\nRepackaging of 1.5.1 with a gemspec that is compatible with older Rubies. [#631](https://github.com/sparklemotion/nokogiri/issues/631), [#632](https://github.com/sparklemotion/nokogiri/issues/632).\n\n\n## 1.5.1 / 2012-03-09\n\n### Added\n\n* `XML::Builder#comment` allows creation of comment nodes.\n* CSS searches now support namespaced attributes. [#593](https://github.com/sparklemotion/nokogiri/issues/593)\n* Java integration feature is added. Now, `XML::Document.wrap` and `XML::Document#to_java` methods are available.\n* RelaxNG validator support in the `nokogiri` cli utility. [#591](https://github.com/sparklemotion/nokogiri/issues/591) (thanks, Dan Radez!)\n\n### Fixed\n\n* Fix many memory leaks and segfault opportunities. Thanks, Tim Elliott!\n* extconf searches homebrew paths if homebrew is installed.\n* Inconsistent behavior of Nokogiri 1.5.0 Java [#620](https://github.com/sparklemotion/nokogiri/issues/620)\n* Inheriting from `Nokogiri::XML::Node` on JRuby (1.6.4/5) fails [#560](https://github.com/sparklemotion/nokogiri/issues/560)\n* `XML::Attr` nodes are not allowed to be added as node children, so an exception is raised. [#558](https://github.com/sparklemotion/nokogiri/issues/558)\n* No longer defensively \"pickle\" adjacent text nodes on `Node#add_next_sibling` and `Node#add_previous_sibling` calls. [#595](https://github.com/sparklemotion/nokogiri/issues/595).\n* Java version inconsistency: it returns nil for empty attributes [#589](https://github.com/sparklemotion/nokogiri/issues/589)\n* to_xhtml incorrectly generates `<p /></p>` when tag is empty [#557](https://github.com/sparklemotion/nokogiri/issues/557)\n* `Document#add_child` now accepts a `Node`, `NodeSet`, `DocumentFragment`, or `String`. [#546](https://github.com/sparklemotion/nokogiri/issues/546).\n* `Document#create_element` now recognizes namespaces containing non-word characters (like \"SOAP-ENV\"). This is mostly relevant to users of Builder, which calls `Document#create_element` for nearly everything. [#531](https://github.com/sparklemotion/nokogiri/issues/531).\n* File encoding broken in 1.5.0 / jruby / windows [#529](https://github.com/sparklemotion/nokogiri/issues/529)\n* Java version does not return namespace defs as attrs for `::HTML` [#542](https://github.com/sparklemotion/nokogiri/issues/542)\n* Bad file descriptor with Nokogiri 1.5.0 [#495](https://github.com/sparklemotion/nokogiri/issues/495)\n* remove_namespace! doesn't work in pure java version [#492](https://github.com/sparklemotion/nokogiri/issues/492)\n* The Nokogiri Java native build throws a null pointer exception when ActiveSupport's .blank? method is called directly on a parsed object. [#489](https://github.com/sparklemotion/nokogiri/issues/489)\n* 1.5.0 Not using correct character encoding [#488](https://github.com/sparklemotion/nokogiri/issues/488)\n* Raw XML string in XML Builder broken on JRuby [#486](https://github.com/sparklemotion/nokogiri/issues/486)\n* Nokogiri 1.5.0 XML generation broken on JRuby [#484](https://github.com/sparklemotion/nokogiri/issues/484)\n* Do not allow multiple root nodes. [#550](https://github.com/sparklemotion/nokogiri/issues/550)\n* Fixes for custom XPath functions. [#605](https://github.com/sparklemotion/nokogiri/issues/605), [#606](https://github.com/sparklemotion/nokogiri/issues/606) (thanks, Juan Wajnerman!)\n* `Node#to_xml` does not override `:save_with` if it is provided. [#505](https://github.com/sparklemotion/nokogiri/issues/505)\n* `Node#set` is a private method (JRuby). [#564](https://github.com/sparklemotion/nokogiri/issues/564) (thanks, Nick Sieger!)\n* C14n cleanup and `Node#canonicalize` (thanks, Ivan Pirlik!) [#563](https://github.com/sparklemotion/nokogiri/issues/563)\n\n\n## 1.5.0 / 2011-07-01\n\n### Notes\n\n* See changelog from 1.4.7\n\n### Added\n\n* extracted sets of `Node::SaveOptions` into `Node::SaveOptions::DEFAULT_{X,H,XH}TML` (refactor)\n\n### Fixed\n\n* default output of XML on JRuby is no longer formatted due to inconsistent whitespace handling. [#415](https://github.com/sparklemotion/nokogiri/issues/415)\n* (JRuby) making empty `NodeSet`s with null `nodes` member safe to operate on. [#443](https://github.com/sparklemotion/nokogiri/issues/443)\n* Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding.\n* Add support for `<meta charset=\"...\">`.\n\n\n## 1.5.0 beta3 / 2010-12-02\n\n### Notes\n\n* JRuby performance tuning\n* See changelog from 1.4.4\n\n### Fixed\n\n* `Node#inner_text` no longer returns nil. (JRuby) [#264](https://github.com/sparklemotion/nokogiri/issues/264)\n\n\n## 1.5.0 beta2 / 2010-07-30\n\n### Notes\n\n* See changelog from 1.4.3\n\n\n## 1.5.0 beta1 / 2010-05-22\n\n### Notes\n\n* JRuby support is provided by a new pure-java backend.\n\n### Dependencies\n\n* Ruby 1.8.6 is deprecated. Nokogiri will install, but official support is ended.\n* LibXML 2.6.16 and earlier are deprecated. Nokogiri will refuse to install.\n\n### Removed\n\n* FFI support is removed.\n\n\n## 1.4.7 / 2011-07-01\n\n### Fixed\n\n* Fix a bug in advanced encoding detection that leads to partially duplicated document when parsing an HTML file with unknown encoding. Thanks, Timothy Elliott ([@ender672](https://github.com/ender672))! [#478](https://github.com/sparklemotion/nokogiri/issues/478)\n\n\n## 1.4.6 / 2011-06-19\n\n### Notes\n\n* This version is functionally identical to 1.4.5.\n* Ruby 1.8.6 support has been restored.\n\n\n## 1.4.5 / 2011-05-19\n\n### Added\n\n* `Nokogiri::HTML::Document#title` accessor gets and sets the document title.\n* extracted sets of `Node::SaveOptions` into `Node::SaveOptions::DEFAULT_{X,H,XH}TML` (refactor)\n* Raise an exception if a string is passed to `Nokogiri::XML::Schema#validate`. [#406](https://github.com/sparklemotion/nokogiri/issues/406)\n\n### Fixed\n\n* `Node#serialize`-and-friends now accepts a `SaveOption` object as the, erm, save object.\n* `Nokogiri::CSS::Parser` has-a `Nokogiri::CSS::Tokenizer`\n* (JRUBY+FFI only) Weak references are now threadsafe. [#355](https://github.com/sparklemotion/nokogiri/issues/355)\n* Make direct `start_element()` callback (currently used for `HTML::SAX::Parser`) pass attributes in assoc array, just as emulated `start_element()` callback does.  rel. [#356](https://github.com/sparklemotion/nokogiri/issues/356)\n* `HTML::SAX::Parser` should call back a block given to `parse*()` if any, just as `XML::SAX::Parser` does.\n* Add further encoding detection to HTML parser that libxml2 does not do.\n* `Document#remove_namespaces!` now handles attributes with namespaces. [#396](https://github.com/sparklemotion/nokogiri/issues/396)\n* `XSLT::Stylesheet#transform` no longer segfaults when handed a non-`XML::Document`. [#452](https://github.com/sparklemotion/nokogiri/issues/452)\n* `XML::Reader` no longer segfaults when under GC pressure. [#439](https://github.com/sparklemotion/nokogiri/issues/439)\n\n\n## 1.4.4 / 2010-11-15\n\n### Added\n\n* `XML::Node#children=` sets the node's inner html (much like #inner_html=), but returns the reparent node(s).\n* XSLT supports function extensions. [#336](https://github.com/sparklemotion/nokogiri/issues/336)\n* XPath bind parameter substitution. [#329](https://github.com/sparklemotion/nokogiri/issues/329)\n* `XML::Reader` node type constants. [#369](https://github.com/sparklemotion/nokogiri/issues/369)\n* SAX Parser context provides line and column information\n\n### Fixed\n\n* `XML::DTD#attributes` returns an empty hash instead of nil when there are no attributes.\n* `XML::DTD#{keys,each}` now work as expected. [#324](https://github.com/sparklemotion/nokogiri/issues/324)\n* `{XML,HTML}::DocumentFragment.{new,parse}` no longer strip leading and trailing whitespace. [#319](https://github.com/sparklemotion/nokogiri/issues/319)\n* `XML::Node#{add_child,add_previous_sibling,add_next_sibling,replace}` return a `NodeSet` when passed a string.\n* Unclosed tags parsed more robustly in fragments. [#315](https://github.com/sparklemotion/nokogiri/issues/315)\n* `XML::Node#{replace,add_previous_sibling,add_next_sibling}` edge cases fixed related to libxml's text node merging. [#308](https://github.com/sparklemotion/nokogiri/issues/308)\n* Fixed a segfault when GC occurs during xpath handler argument marshalling. [#345](https://github.com/sparklemotion/nokogiri/issues/345)\n* Added hack to `Slop` decorator to work with previously defined methods. [#330](https://github.com/sparklemotion/nokogiri/issues/330)\n* Fix a memory leak when duplicating child nodes. [#353](https://github.com/sparklemotion/nokogiri/issues/353)\n* Fixed off-by-one bug with `nth-last-{child,of-type}` CSS selectors when NOT using `an+b` notation. [#354](https://github.com/sparklemotion/nokogiri/issues/354)\n* Fixed passing of non-namespace attributes to `SAX::Document#start_element`. [#356](https://github.com/sparklemotion/nokogiri/issues/356)\n* Workaround for libxml2 in-context parsing bug. [#362](https://github.com/sparklemotion/nokogiri/issues/362)\n* Fixed `NodeSet#wrap` on nodes within a fragment. [#331](https://github.com/sparklemotion/nokogiri/issues/331)\n\n\n## 1.4.3 / 2010-07-28\n\n### Added\n\n* `XML::Reader#empty_element?` returns true for empty elements. [#262](https://github.com/sparklemotion/nokogiri/issues/262)\n* `Node#remove_namespaces!` now removes namespace *declarations* as well. [#294](https://github.com/sparklemotion/nokogiri/issues/294)\n* `NodeSet#at_xpath`, `NodeSet#at_css` and `NodeSet#>` do what the corresponding methods of `Node` do.\n\n### Fixed\n\n* `XML::NodeSet#{include?,delete,push}` accept an `XML::Namespace`\n* `XML::Document#parse` added for parsing in the context of a document\n* `XML::DocumentFragment#inner_html=` works with contextual parsing! [#298](https://github.com/sparklemotion/nokogiri/issues/298), [#281](https://github.com/sparklemotion/nokogiri/issues/281)\n* `lib/nokogiri/css/parser.y` Combined CSS functions + pseudo selectors fixed\n* Reparenting text nodes is safe, even when the operation frees adjacent merged nodes. [#283](https://github.com/sparklemotion/nokogiri/issues/283)\n* Fixed libxml2 versionitis issue with `xmlFirstElementChild` et al. [#303](https://github.com/sparklemotion/nokogiri/issues/303)\n* `XML::Attr#add_namespace` now works as expected. [#252](https://github.com/sparklemotion/nokogiri/issues/252)\n* `HTML::DocumentFragment` uses the string's encoding. [#305](https://github.com/sparklemotion/nokogiri/issues/305)\n* Fix the CSS3 selector translation rule for the general sibling combinator (a.k.a. preceding selector) that incorrectly converted \"E ~ F G\" to \"//F//G[preceding-sibling::E]\".\n\n\n## 1.4.2 / 2010-05-22\n\n### Added\n\n* `XML::Node#parse` will parse XML or HTML fragments with respect to the context node.\n* `XML::Node#namespaces` returns all namespaces defined in the node and all ancestor nodes (previously did not return ancestors' namespace definitions).\n* Added `Enumerable` to `XML::Node`\n* `Nokogiri::XML::Schema#validate` now uses xmlSchemaValidateFile if a filename is passed, which is faster and more memory-efficient. GH [#219](https://github.com/sparklemotion/nokogiri/issues/219)\n* `XML::Document#create_entity` will create new `EntityDecl` objects. GH [#174](https://github.com/sparklemotion/nokogiri/issues/174)\n* JRuby FFI implementation no longer uses `ObjectSpace._id2ref`, instead using Charles Nutter's rocking Weakling gem.\n* `Nokogiri::XML::Node#first_element_child` fetch the first child node that is an ELEMENT node.\n* `Nokogiri::XML::Node#last_element_child` fetch the last child node that is an ELEMENT node.\n* `Nokogiri::XML::Node#elements` fetch all children nodes that are ELEMENT nodes.\n* `Nokogiri::XML::Node#add_child`, `#add_previous_sibling`, `#before`, `#add_next_sibling`, `#after`, `#inner_html`, `#swap` and `#replace` all now accept a `Node`, `DocumentFragment`, `NodeSet`, or a string containing markup.\n* `Node#fragment?` indicates whether a node is a `DocumentFragment`.\n\n### Fixed\n\n* `XML::NodeSet` is now always decorated (if the document has decorators). GH [#198](https://github.com/sparklemotion/nokogiri/issues/198)\n* `XML::NodeSet#slice` gracefully handles offset+length larger than the set length. GH [#200](https://github.com/sparklemotion/nokogiri/issues/200)\n* `XML::Node#content=` safely unlinks previous content. GH [#203](https://github.com/sparklemotion/nokogiri/issues/203)\n* `XML::Node#namespace=` takes nil as a parameter\n* `XML::Node#xpath` returns things other than `NodeSet` objects. GH [#208](https://github.com/sparklemotion/nokogiri/issues/208)\n* `XSLT::StyleSheet#transform` accepts hashes for parameters. GH [#223](https://github.com/sparklemotion/nokogiri/issues/223)\n* Psuedo selectors inside `not()` work. GH [#205](https://github.com/sparklemotion/nokogiri/issues/205)\n* `XML::Builder` doesn't break when nodes are unlinked. Thanks to vihai! GH [#228](https://github.com/sparklemotion/nokogiri/issues/228)\n* Encoding can be forced on the SAX parser. Thanks Eugene Pimenov! GH [#204](https://github.com/sparklemotion/nokogiri/issues/204)\n* `XML::DocumentFragment` uses `XML::Node#parse` to determine children.\n* Fixed a memory leak in xml reader. Thanks sdor! GH [#244](https://github.com/sparklemotion/nokogiri/issues/244)\n* `Node#replace` returns the new child node as claimed in the RDoc. Previously returned +self+.\n\n### Notes\n\n* The Windows gems now bundle DLLs for libxml 2.7.6 and libxslt 1.1.26. Prior to this release, libxml 2.7.3 and libxslt 1.1.24 were bundled.\n\n\n## 1.4.1 / 2009-12-10\n\n### Added\n\n* Added `Nokogiri::LIBXML_ICONV_ENABLED`\n* Alias `Node#[]` to `Node#attr`\n* `XML::Node#next_element` added\n* `XML::Node#>` added for searching a nodes immediate children\n* `XML::NodeSet#reverse` added\n* Added fragment support to `Node#add_child`, `Node#add_next_sibling`, `Node#add_previous_sibling`, and `Node#replace`.\n* `XML::Node#previous_element` implemented\n* Rubinius support\n* Ths CSS selector engine now supports `:has()`\n* `XML::NodeSet#filter()` was added\n* `XML::Node.next=` and .previous= are aliases for add_next_sibling and add_previous_sibling. GH [#183](https://github.com/sparklemotion/nokogiri/issues/183)\n\n### Fixed\n\n* XML fragments with namespaces do not raise an exception (regression in 1.4.0)\n* `Node#matches?` works in nodes contained by a `DocumentFragment`. GH [#158](https://github.com/sparklemotion/nokogiri/issues/158)\n* `Document` should not define `add_namespace()` method. GH [#169](https://github.com/sparklemotion/nokogiri/issues/169)\n* `XPath` queries returning namespace declarations do not segfault.\n* `Node#replace` works with nodes from different documents. GH [#162](https://github.com/sparklemotion/nokogiri/issues/162)\n* Adding `XML::Document#collect_namespaces`\n* Fixed bugs in the SOAP4R adapter\n* Fixed bug in `XML::Node#next_element` for certain edge cases\n* Fixed load path issue with JRuby under Windows. GH [#160](https://github.com/sparklemotion/nokogiri/issues/160).\n* `XSLT#apply_to` will honor the \"output method\". Thanks richardlehane!\n* Fragments containing leading text nodes with newlines now parse properly. GH [#178](https://github.com/sparklemotion/nokogiri/issues/178).\n\n\n## 1.4.0 / 2009-10-30\n\n### Added\n\n* `Node#at_xpath` returns the first element of the `NodeSet` matching the XPath expression.\n* `Node#at_css` returns the first element of the `NodeSet` matching the CSS selector.\n* `NodeSet#|` for unions GH [#119](https://github.com/sparklemotion/nokogiri/issues/119) (Thanks Serabe!)\n* `NodeSet#inspect` makes prettier output\n* `Node#inspect` implemented for more rubyish document inspecting\n* Added `XML::DTD#external_id`\n* Added `XML::DTD#system_id`\n* Added `XML::ElementContent` for DTD Element content validity\n* Better namespace declaration support in `Nokogiri::XML::Builder`\n* Added `XML::Node#external_subset`\n* Added `XML::Node#create_external_subset`\n* Added `XML::Node#create_internal_subset`\n* XML Builder can append raw strings (GH [#141](https://github.com/sparklemotion/nokogiri/issues/141), patch from dudleyf)\n* `XML::SAX::ParserContext` added\n* `XML::Document#remove_namespaces!` for the namespace-impaired\n\n### Fixed\n\n* returns nil when HTML documents do not declare a meta encoding tag. GH [#115](https://github.com/sparklemotion/nokogiri/issues/115)\n* Uses `RbConfig::CONFIG['host_os']` to adjust `ENV['PATH']` GH [#113](https://github.com/sparklemotion/nokogiri/issues/113)\n* `NodeSet#search` is more efficient GH [#119](https://github.com/sparklemotion/nokogiri/issues/119) (Thanks Serabe!)\n* `NodeSet#xpath` handles custom xpath functions\n* Fixing a SEGV when `XML::Reader` gets attributes for current node\n* `Node#inner_html` takes the same arguments as `Node#to_html` GH [#117](https://github.com/sparklemotion/nokogiri/issues/117)\n* `DocumentFragment#css` delegates to it's child nodes GH [#123](https://github.com/sparklemotion/nokogiri/issues/123)\n* `NodeSet#[]` works with slices larger than `NodeSet#length` GH [#131](https://github.com/sparklemotion/nokogiri/issues/131)\n* Reparented nodes maintain their namespace. GH [#134](https://github.com/sparklemotion/nokogiri/issues/134)\n* Fixed SEGV when adding an `XML::Document` to `NodeSet`\n* `XML::SyntaxError` can be duplicated. GH [#148](https://github.com/sparklemotion/nokogiri/issues/148)\n\n### Removed\n\n* Hpricot compatibility layer removed\n\n\n## 1.3.3 / 2009-07-26\n\n### Added\n\n* `NodeSet#children` returns all children of all nodes\n\n### Fixed\n\n* Override libxml-ruby's global error handler\n* `ParseOption#strict` fixed\n* Fixed a segfault when sending an empty string to `Node#inner_html=` GH [#88](https://github.com/sparklemotion/nokogiri/issues/88)\n* String encoding is now set to UTF-8 in Ruby 1.9\n* Fixed a segfault when moving root nodes between documents. GH [#91](https://github.com/sparklemotion/nokogiri/issues/91)\n* Fixed an O(n) penalty on node creation. GH [#101](https://github.com/sparklemotion/nokogiri/issues/101)\n* Allowing XML documents to be output as HTML documents\n\n### Deprecations\n\n* Hpricot compatibility layer will be removed in 1.4.0\n\n\n## 1.3.2 / 2009-06-22\n\n### Added\n\n* `Nokogiri::XML::DTD#validate` will validate your document\n\n### Fixed\n\n* `Nokogiri::XML::NodeSet#search` will search top level nodes. GH [#73](https://github.com/sparklemotion/nokogiri/issues/73)\n* Removed namespace related methods from `Nokogiri::XML::Document`\n* Fixed a segfault when a namespace was added twice\n* Made nokogiri work with Snow Leopard GH [#79](https://github.com/sparklemotion/nokogiri/issues/79)\n* Mailing list has moved to: http://groups.google.com/group/nokogiri-talk\n* HTML fragments now correctly handle comments and CDATA blocks. GH [#78](https://github.com/sparklemotion/nokogiri/issues/78)\n* `Nokogiri::XML::Document#clone` is now an alias of dup\n\n### Deprecations\n\n* `Nokogiri::XML::SAX::Document#start_element_ns` is deprecated, please switch to `Nokogiri::XML::SAX::Document#start_element_namespace`\n* `Nokogiri::XML::SAX::Document#end_element_ns` is deprecated, please switch to `Nokogiri::XML::SAX::Document#end_element_namespace`\n\n\n## 1.3.1 / 2009-06-07\n\n### Fixed\n\n* `extconf.rb` checks for optional RelaxNG and Schema functions\n* Namespace nodes are added to the Document node cache\n\n\n## 1.3.0 / 2009-05-30\n\n### Added\n\n* Builder changes scope based on block arity\n* Builder supports methods ending in underscore similar to tagz\n* `Nokogiri::XML::Node#<=>` compares nodes based on Document position\n* `Nokogiri::XML::Node#matches?` returns true if Node can be found with given selector.\n* `Nokogiri::XML::Node#ancestors` now returns an `Nokogiri::XML::NodeSet`\n* `Nokogiri::XML::Node#ancestors` will match parents against optional selector\n* `Nokogiri::HTML::Document#meta_encoding` for getting the meta encoding\n* `Nokogiri::HTML::Document#meta_encoding=` for setting the meta encoding\n* `Nokogiri::XML::Document#encoding=` to set the document encoding\n* `Nokogiri::XML::Schema` for validating documents against XSD schema\n* `Nokogiri::XML::RelaxNG` for validating documents against RelaxNG schema\n* `Nokogiri::HTML::ElementDescription` for fetching HTML element descriptions\n* `Nokogiri::XML::Node#description` to fetch the node description\n* `Nokogiri::XML::Node#accept` implements Visitor pattern\n* `bin/nokogiri` for easily examining documents (Thanks Yutaka HARA!)\n* `Nokogiri::XML::NodeSet` now supports more Array and Enumerable operators: index, delete, slice, - (difference), + (concatenation), & (intersection), push, pop, shift, ==\n* `Nokogiri.XML`, `Nokogiri.HTML` take blocks that receive `Nokogiri::XML::ParseOptions` objects\n* `Nokogiri::XML::Node#namespace` returns a `Nokogiri::XML::Namespace`\n* `Nokogiri::XML::Node#namespace=` for setting a node's namespace\n* `Nokogiri::XML::DocumentFragment` and `Nokogiri::HTML::DocumentFragment` have a sensible API and a more robust implementation.\n* JRuby 1.3.0 support via FFI.\n\n### Fixed\n\n* Fixed a problem with nil passed to CDATA constructor\n* Fragment method deals with regular expression characters (Thanks Joel!) LH [#73](https://github.com/sparklemotion/nokogiri/issues/73)\n* Fixing builder scope issues LH [#61](https://github.com/sparklemotion/nokogiri/issues/61), LH [#74](https://github.com/sparklemotion/nokogiri/issues/74), LH [#70](https://github.com/sparklemotion/nokogiri/issues/70)\n* Fixed a problem when adding a child could remove the child namespace LH[#78](https://github.com/sparklemotion/nokogiri/issues/78)\n* Fixed bug with unlinking a node then reparenting it. (GH[#22](https://github.com/sparklemotion/nokogiri/issues/22))\n* Fixed failure to catch errors during XSLT parsing (GH[#32](https://github.com/sparklemotion/nokogiri/issues/32))\n* Fixed a bug with attribute conditions in CSS selectors (GH[#36](https://github.com/sparklemotion/nokogiri/issues/36))\n* Fixed intolerance of HTML attributes without values in `Node#{before/after/inner_html=}`. (GH[#35](https://github.com/sparklemotion/nokogiri/issues/35))\n\n\n## 1.2.3 / 2009-03-22\n\n### Fixed\n\n* Fixing bug where a node is passed in to `Node#new`\n* Namespace should be assigned on DocumentFragment creation. LH [#66](https://github.com/sparklemotion/nokogiri/issues/66)\n* `Nokogiri::XML::NodeSet#dup` works GH [#10](https://github.com/sparklemotion/nokogiri/issues/10)\n* `Nokogiri::HTML` returns an empty Document when given a blank string GH[#11](https://github.com/sparklemotion/nokogiri/issues/11)\n* Adding a child will remove duplicate namespace declarations LH [#67](https://github.com/sparklemotion/nokogiri/issues/67)\n* Builder methods take a hash as a second argument\n\n\n## 1.2.2 / 2009-03-14\n\n### Added\n\n* Nokogiri may be used with soap4r. See `XSD::XMLParser::Nokogiri`\n* `Nokogiri::XML::Node#inner_html=` to set the inner html for a node\n* Nokogiri builder interface improvements\n* `Nokogiri::XML::Node#swap` swaps html for current node (LH [#50](https://github.com/sparklemotion/nokogiri/issues/50))\n\n### Fixed\n\n* Fixed a tag nesting problem in the Builder API (LH [#41](https://github.com/sparklemotion/nokogiri/issues/41))\n* `Nokogiri::HTML.fragment` will properly handle text only nodes (LH [#43](https://github.com/sparklemotion/nokogiri/issues/43))\n* `Nokogiri::XML::Node#before` will prepend text nodes (LH [#44](https://github.com/sparklemotion/nokogiri/issues/44))\n* `Nokogiri::XML::Node#after` will append text nodes\n* `Nokogiri::XML::Node#search` automatically registers root namespaces (LH [#42](https://github.com/sparklemotion/nokogiri/issues/42))\n* `Nokogiri::XML::NodeSet#search` automatically registers namespaces\n* `Nokogiri::HTML::NamedCharacters` delegates to libxml2\n* `Nokogiri::XML::Node#[]` can take a symbol (LH [#48](https://github.com/sparklemotion/nokogiri/issues/48))\n* vasprintf for windows updated.  Thanks Geoffroy Couprie!\n* `Nokogiri::XML::Node#[]=` should not encode entities (LH [#55](https://github.com/sparklemotion/nokogiri/issues/55))\n* Namespaces should be copied to reparented nodes (LH [#56](https://github.com/sparklemotion/nokogiri/issues/56))\n* Nokogiri uses encoding set on the string for default in Ruby 1.9\n* `Document#dup` should create a new document of the same type (LH [#59](https://github.com/sparklemotion/nokogiri/issues/59))\n* `Document` should not have a parent method (LH [#64](https://github.com/sparklemotion/nokogiri/issues/64))\n\n\n## 1.2.1 / 2009-02-23\n\n### Fixed\n\n* Fixed a CSS selector space bug\n* Fixed Ruby 1.9 String Encoding (Thanks \u89d2\u8c37\u3055\u3093\uff01)\n\n\n## 1.2.0 / 2009-02-22\n\n### Added\n\n* CSS search now supports CSS3 namespace queries\n* Namespaces on the root node are automatically registered\n* CSS queries use the default namespace\n* `Nokogiri::XML::Document#encoding` get encoding used for this document\n* `Nokogiri::XML::Document#url` get the document url\n* `Nokogiri::XML::Node#add_namespace` add a namespace to the node LH[#38](https://github.com/sparklemotion/nokogiri/issues/38)\n* `Nokogiri::XML::Node#each` iterate over attribute name, value pairs\n* `Nokogiri::XML::Node#keys` get all attribute names\n* `Nokogiri::XML::Node#line` get the line number for a node (Thanks Dirkjan Bussink!)\n* `Nokogiri::XML::Node#serialize` now takes an optional encoding parameter\n* `Nokogiri::XML::Node#to_html`, to_xml, and to_xhtml take an optional encoding\n* `Nokogiri::XML::Node#to_str`\n* `Nokogiri::XML::Node#to_xhtml` to produce XHTML documents\n* `Nokogiri::XML::Node#values` get all attribute values\n* `Nokogiri::XML::Node#write_to` writes the node to an IO object with optional encoding\n* `Nokogiri::XML::ProcessingInstruction.new`\n* `Nokogiri::XML::SAX::PushParser` for all your push parsing needs.\n\n### Fixed\n\n* Fixed `Nokogiri::XML::Document#dup`\n* Fixed header detection. Thanks rubikitch!\n* Fixed a problem where invalid CSS would cause the parser to hang\n\n### Deprecations\n\n* `Nokogiri::XML::Node.new_from_str` will be deprecated in 1.3.0\n\n### Changed\n\n* `Nokogiri::HTML.fragment` now returns an XML::DocumentFragment (LH [#32](https://github.com/sparklemotion/nokogiri/issues/32))\n\n\n## 1.1.1\n\n### Added\n\n* Added `XML::Node#elem?`\n* Added `XML::Node#attribute_nodes`\n* Added `XML::Attr`\n* `XML::Node#delete` added.\n* `XML::NodeSet#inner_html` added.\n\n### Fixed\n\n* Not including an HTML entity for \\r for HTML nodes.\n* Removed `CSS::SelectorHandler` and `XML::XPathHandler`\n* `XML::Node#attributes` returns an `Attr` node for the value.\n* `XML::NodeSet` implements `to_xml`\n\n\n## 1.1.0\n\n### Added\n\n* Custom XPath functions are now supported.  See `Nokogiri::XML::Node#xpath`\n* Custom CSS pseudo classes are now supported.  See `Nokogiri::XML::Node#css`\n* `Nokogiri::XML::Node#<<` will add a child to the current node\n\n### Fixed\n\n* Mutex lock on CSS cache access\n* Fixed build problems with GCC 3.3.5\n* `XML::Node#to_xml` now takes an indentation argument\n* `XML::Node#dup` takes an optional depth argument\n* `XML::Node#add_previous_sibling` returns new sibling node.\n\n\n## 1.0.7\n\n### Fixed\n\n* Fixed memory leak when using Dike\n* SAX parser now parses IO streams\n* Comment nodes have their own class\n* `Nokogiri()` should delegate to `Nokogiri.parse()`\n* Prepending rather than appending to `ENV['PATH']` on windows\n* Fixed a bug in complex CSS negation selectors\n\n\n## 1.0.6\n\n### Fixed\n\n* XPath Parser raises a `SyntaxError` on parse failure\n* CSS Parser raises a `SyntaxError` on parse failure\n* `filter()` and `not()` hpricot compatibility added\n* CSS searches via `Node#search` are now always relative\n* CSS to XPath conversion is now cached\n\n\n## 1.0.5\n\n### Fixed\n\n* Added mailing list and ticket tracking information to the `README.txt`\n* Sets `ENV['PATH']` on windows if it doesn't exist\n* Caching results of `NodeSet#[]` on `Document`\n\n\n## 1.0.4\n\n### Fixed\n\n* Changed memory management from weak refs to document refs\n* Plugged some memory leaks\n* Builder blocks can call methods from surrounding contexts\n\n\n## 1.0.3\n\n### Fixed\n\n* `NodeSet` now implements `to_ary`\n* `XML::Document` should not implement parent\n* More GC Bugs fixed.  (Mike is AWESOME!)\n* Removed RARRAY_LEN for 1.8.5 compatibility.  Thanks Shane Hanna.\n* `inner_html` fixed. (Thanks Yehuda!)\n\n\n## 1.0.2\n\n### Fixed\n\n* `extconf.rb` should not check for frex and racc\n\n\n## 1.0.1\n\n### Fixed\n\n* Made sure `extconf.rb` searched libdir and prefix so that ports libxml/ruby will link properly.  Thanks lucsky!\n\n\n## 1.0.0 / 2008-07-13\n\n### Added\n\n* Birthday!\n", "package nokogiri;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.nio.charset.IllegalCharsetNameException;\nimport java.nio.charset.UnsupportedCharsetException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.apache.xerces.parsers.AbstractSAXParser;\nimport org.cyberneko.html.parsers.SAXParser;\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.RubyFixnum;\nimport org.jruby.RubyString;\nimport org.jruby.anno.JRubyClass;\nimport org.jruby.anno.JRubyMethod;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\nimport org.xml.sax.SAXException;\n\nimport nokogiri.internals.NokogiriHandler;\nimport static nokogiri.internals.NokogiriHelpers.rubyStringToString;\n\n/**\n * Class for Nokogiri::HTML4::SAX::ParserContext.\n *\n * @author serabe\n * @author Patrick Mahoney <pat@polycrystal.org>\n * @author Yoko Harada <yokolet@gmail.com>\n */\n@JRubyClass(name = \"Nokogiri::HTML4::SAX::ParserContext\", parent = \"Nokogiri::XML::SAX::ParserContext\")\npublic class Html4SaxParserContext extends XmlSaxParserContext\n{\n  private static final long serialVersionUID = 1L;\n\n  static Html4SaxParserContext\n  newInstance(final Ruby runtime, final RubyClass klazz)\n  {\n    Html4SaxParserContext instance = new Html4SaxParserContext(runtime, klazz);\n    instance.initialize(runtime);\n    return instance;\n  }\n\n  public\n  Html4SaxParserContext(Ruby ruby, RubyClass rubyClass)\n  {\n    super(ruby, rubyClass);\n  }\n\n  @Override\n  protected AbstractSAXParser\n  createParser() throws SAXException\n  {\n    SAXParser parser = new SAXParser();\n\n    try {\n      parser.setProperty(\n        \"http://cyberneko.org/html/properties/names/elems\", \"lower\");\n      parser.setProperty(\n        \"http://cyberneko.org/html/properties/names/attrs\", \"lower\");\n\n      // NekoHTML should not try to guess the encoding based on the meta\n      // tags or other information in the document.  This is already\n      // handled by the EncodingReader.\n      parser.setFeature(\"http://cyberneko.org/html/features/scanner/ignore-specified-charset\", true);\n      return parser;\n    } catch (SAXException ex) {\n      throw new SAXException(\n        \"Problem while creating HTML4 SAX Parser: \" + ex.toString());\n    }\n  }\n\n  @JRubyMethod(name = \"memory\", meta = true)\n  public static IRubyObject\n  parse_memory(ThreadContext context,\n               IRubyObject klazz,\n               IRubyObject data,\n               IRubyObject encoding)\n  {\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klazz);\n    String javaEncoding = findEncodingName(context, encoding);\n    if (javaEncoding != null) {\n      CharSequence input = applyEncoding(rubyStringToString(data.convertToString()), javaEncoding);\n      ByteArrayInputStream istream = new ByteArrayInputStream(input.toString().getBytes());\n      ctx.setInputSource(istream);\n      ctx.getInputSource().setEncoding(javaEncoding);\n    }\n    return ctx;\n  }\n\n  public enum EncodingType {\n    NONE(0, \"NONE\"),\n    UTF_8(1, \"UTF-8\"),\n    UTF16LE(2, \"UTF16LE\"),\n    UTF16BE(3, \"UTF16BE\"),\n    UCS4LE(4, \"UCS4LE\"),\n    UCS4BE(5, \"UCS4BE\"),\n    EBCDIC(6, \"EBCDIC\"),\n    UCS4_2143(7, \"ICS4-2143\"),\n    UCS4_3412(8, \"UCS4-3412\"),\n    UCS2(9, \"UCS2\"),\n    ISO_8859_1(10, \"ISO-8859-1\"),\n    ISO_8859_2(11, \"ISO-8859-2\"),\n    ISO_8859_3(12, \"ISO-8859-3\"),\n    ISO_8859_4(13, \"ISO-8859-4\"),\n    ISO_8859_5(14, \"ISO-8859-5\"),\n    ISO_8859_6(15, \"ISO-8859-6\"),\n    ISO_8859_7(16, \"ISO-8859-7\"),\n    ISO_8859_8(17, \"ISO-8859-8\"),\n    ISO_8859_9(18, \"ISO-8859-9\"),\n    ISO_2022_JP(19, \"ISO-2022-JP\"),\n    SHIFT_JIS(20, \"SHIFT-JIS\"),\n    EUC_JP(21, \"EUC-JP\"),\n    ASCII(22, \"ASCII\");\n\n    private final int value;\n    private final String name;\n\n    EncodingType(int value, String name)\n    {\n      this.value = value;\n      this.name = name;\n    }\n\n    public int getValue()\n    {\n      return value;\n    }\n\n    public String toString()\n    {\n      return name;\n    }\n\n    private static transient EncodingType[] values;\n\n    // NOTE: assuming ordinal == value\n    static EncodingType get(final int ordinal)\n    {\n      EncodingType[] values = EncodingType.values;\n      if (values == null) {\n        values = EncodingType.values();\n        EncodingType.values = values;\n      }\n      if (ordinal >= 0 && ordinal < values.length) {\n        return values[ordinal];\n      }\n      return null;\n    }\n\n  }\n\n  private static String\n  findEncodingName(final int value)\n  {\n    EncodingType type = EncodingType.get(value);\n    if (type == null) { return null; }\n    assert type.value == value;\n    return type.name;\n  }\n\n  private static String\n  findEncodingName(ThreadContext context, IRubyObject encoding)\n  {\n    String rubyEncoding = null;\n    if (encoding instanceof RubyString) {\n      rubyEncoding = rubyStringToString((RubyString) encoding);\n    } else if (encoding instanceof RubyFixnum) {\n      rubyEncoding = findEncodingName(RubyFixnum.fix2int((RubyFixnum) encoding));\n    }\n    if (rubyEncoding == null) { return null; }\n    try {\n      return Charset.forName(rubyEncoding).displayName();\n    } catch (UnsupportedCharsetException e) {\n      throw context.getRuntime().newEncodingCompatibilityError(rubyEncoding + \"is not supported\");\n    } catch (IllegalCharsetNameException e) {\n      throw context.getRuntime().newEncodingError(e.getMessage());\n    }\n  }\n\n  private static final Pattern CHARSET_PATTERN = Pattern.compile(\"charset(()|\\\\s)=(()|\\\\s)([a-z]|-|_|\\\\d)+\",\n      Pattern.CASE_INSENSITIVE);\n\n  private static CharSequence\n  applyEncoding(final String input, final String enc)\n  {\n    int start_pos = 0;\n    int end_pos = 0;\n    if (containsIgnoreCase(input, \"charset\")) {\n      Matcher m = CHARSET_PATTERN.matcher(input);\n      while (m.find()) {\n        start_pos = m.start();\n        end_pos = m.end();\n      }\n    }\n    if (start_pos != end_pos) {\n      return new StringBuilder(input).replace(start_pos, end_pos, \"charset=\" + enc);\n    }\n    return input;\n  }\n\n  private static boolean\n  containsIgnoreCase(final String str, final String sub)\n  {\n    final int len = sub.length();\n    final int max = str.length() - len;\n\n    if (len == 0) { return true; }\n    final char c0Lower = Character.toLowerCase(sub.charAt(0));\n    final char c0Upper = Character.toUpperCase(sub.charAt(0));\n\n    for (int i = 0; i <= max; i++) {\n      final char ch = str.charAt(i);\n      if (ch != c0Lower && Character.toLowerCase(ch) != c0Lower && Character.toUpperCase(ch) != c0Upper) {\n        continue; // first char doesn't match\n      }\n\n      if (str.regionMatches(true, i + 1, sub, 0 + 1, len - 1)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @JRubyMethod(name = \"file\", meta = true)\n  public static IRubyObject\n  parse_file(ThreadContext context,\n             IRubyObject klass,\n             IRubyObject data,\n             IRubyObject encoding)\n  {\n    if (!(data instanceof RubyString)) {\n      throw context.getRuntime().newTypeError(\"data must be kind_of String\");\n    }\n    if (!(encoding instanceof RubyString)) {\n      throw context.getRuntime().newTypeError(\"data must be kind_of String\");\n    }\n\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);\n    ctx.setInputSourceFile(context, data);\n    String javaEncoding = findEncodingName(context, encoding);\n    if (javaEncoding != null) {\n      ctx.getInputSource().setEncoding(javaEncoding);\n    }\n    return ctx;\n  }\n\n  @JRubyMethod(name = \"io\", meta = true)\n  public static IRubyObject\n  parse_io(ThreadContext context,\n           IRubyObject klass,\n           IRubyObject data,\n           IRubyObject encoding)\n  {\n    if (!(encoding instanceof RubyFixnum)) {\n      throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");\n    }\n\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(context.runtime, (RubyClass) klass);\n    ctx.setIOInputSource(context, data, context.nil);\n    String javaEncoding = findEncodingName(context, encoding);\n    if (javaEncoding != null) {\n      ctx.getInputSource().setEncoding(javaEncoding);\n    }\n    return ctx;\n  }\n\n  /**\n   * Create a new parser context that will read from a raw input stream.\n   * Meant to be run in a separate thread by Html4SaxPushParser.\n   */\n  static Html4SaxParserContext\n  parse_stream(final Ruby runtime, RubyClass klass, InputStream stream)\n  {\n    Html4SaxParserContext ctx = Html4SaxParserContext.newInstance(runtime, klass);\n    ctx.setInputSource(stream);\n    return ctx;\n  }\n\n  @Override\n  protected void\n  preParse(final Ruby runtime, IRubyObject handlerRuby, NokogiriHandler handler)\n  {\n    // this function is meant to be empty.  It overrides the one in XmlSaxParserContext\n  }\n\n}\n", "package nokogiri;\n\nimport nokogiri.internals.*;\nimport org.apache.xerces.parsers.AbstractSAXParser;\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.RubyFixnum;\nimport org.jruby.anno.JRubyClass;\nimport org.jruby.anno.JRubyMethod;\nimport org.jruby.exceptions.RaiseException;\nimport org.jruby.runtime.Helpers;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.SAXParseException;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport static org.jruby.runtime.Helpers.invoke;\n\n/**\n * Base class for the SAX parsers.\n *\n * @author Patrick Mahoney <pat@polycrystal.org>\n * @author Yoko Harada <yokolet@gmail.com>\n */\n@JRubyClass(name = \"Nokogiri::XML::SAX::ParserContext\")\npublic class XmlSaxParserContext extends ParserContext\n{\n  private static final long serialVersionUID = 1L;\n\n  protected static final String FEATURE_NAMESPACES =\n    \"http://xml.org/sax/features/namespaces\";\n  protected static final String FEATURE_NAMESPACE_PREFIXES =\n    \"http://xml.org/sax/features/namespace-prefixes\";\n  protected static final String FEATURE_LOAD_EXTERNAL_DTD =\n    \"http://apache.org/xml/features/nonvalidating/load-external-dtd\";\n  protected static final String FEATURE_CONTINUE_AFTER_FATAL_ERROR =\n    \"http://apache.org/xml/features/continue-after-fatal-error\";\n\n  protected AbstractSAXParser parser;\n\n  protected NokogiriHandler handler;\n  protected NokogiriErrorHandler errorHandler;\n  private boolean replaceEntities = true;\n  private boolean recovery = false;\n\n  public\n  XmlSaxParserContext(final Ruby ruby, RubyClass rubyClass)\n  {\n    super(ruby, rubyClass);\n  }\n\n  protected void\n  initialize(Ruby runtime)\n  {\n    try {\n      parser = createParser();\n    } catch (SAXException se) {\n      // Unexpected failure in XML subsystem\n      RaiseException ex = runtime.newRuntimeError(se.toString());\n      ex.initCause(se);\n      throw ex;\n    }\n  }\n\n  /**\n   * Create and return a copy of this object.\n   *\n   * @return a clone of this object\n   */\n  @Override\n  public Object\n  clone() throws CloneNotSupportedException\n  {\n    return super.clone();\n  }\n\n  protected AbstractSAXParser\n  createParser() throws SAXException\n  {\n    XmlSaxParser parser = new XmlSaxParser();\n    parser.setFeature(FEATURE_NAMESPACE_PREFIXES, true);\n    parser.setFeature(FEATURE_LOAD_EXTERNAL_DTD, false);\n    return parser;\n  }\n\n  /**\n   * Create a new parser context that will parse the string\n   * <code>data</code>.\n   */\n  @JRubyMethod(name = \"memory\", meta = true)\n  public static IRubyObject\n  parse_memory(ThreadContext context,\n               IRubyObject klazz,\n               IRubyObject data)\n  {\n    final Ruby runtime = context.runtime;\n    XmlSaxParserContext ctx = newInstance(runtime, (RubyClass) klazz);\n    ctx.initialize(runtime);\n    ctx.setStringInputSource(context, data, runtime.getNil());\n    return ctx;\n  }\n\n  /**\n   * Create a new parser context that will read from the file\n   * <code>data</code> and parse.\n   */\n  @JRubyMethod(name = \"file\", meta = true)\n  public static IRubyObject\n  parse_file(ThreadContext context,\n             IRubyObject klazz,\n             IRubyObject data)\n  {\n    final Ruby runtime = context.runtime;\n    XmlSaxParserContext ctx = newInstance(runtime, (RubyClass) klazz);\n    ctx.initialize(context.getRuntime());\n    ctx.setInputSourceFile(context, data);\n    return ctx;\n  }\n\n  /**\n   * Create a new parser context that will read from the IO or\n   * StringIO <code>data</code> and parse.\n   *\n   * TODO: Currently ignores encoding <code>enc</code>.\n   */\n  @JRubyMethod(name = \"io\", meta = true)\n  public static IRubyObject\n  parse_io(ThreadContext context,\n           IRubyObject klazz,\n           IRubyObject data,\n           IRubyObject encoding)\n  {\n    // check the type of the unused encoding to match behavior of CRuby\n    if (!(encoding instanceof RubyFixnum)) {\n      throw context.getRuntime().newTypeError(\"encoding must be kind_of String\");\n    }\n    final Ruby runtime = context.runtime;\n    XmlSaxParserContext ctx = newInstance(runtime, (RubyClass) klazz);\n    ctx.initialize(runtime);\n    ctx.setIOInputSource(context, data, runtime.getNil());\n    return ctx;\n  }\n\n  /**\n   * Create a new parser context that will read from a raw input stream.\n   * Meant to be run in a separate thread by XmlSaxPushParser.\n   */\n  static XmlSaxParserContext\n  parse_stream(final Ruby runtime, RubyClass klazz, InputStream stream)\n  {\n    XmlSaxParserContext ctx = newInstance(runtime, klazz);\n    ctx.initialize(runtime);\n    ctx.setInputSource(stream);\n    return ctx;\n  }\n\n  private static XmlSaxParserContext\n  newInstance(final Ruby runtime, final RubyClass klazz)\n  {\n    return (XmlSaxParserContext) NokogiriService.XML_SAXPARSER_CONTEXT_ALLOCATOR.allocate(runtime, klazz);\n  }\n\n  public final NokogiriHandler\n  getNokogiriHandler() { return handler; }\n\n  public final NokogiriErrorHandler\n  getNokogiriErrorHandler() { return errorHandler; }\n\n  /**\n   * Perform any initialization prior to parsing with the handler\n   * <code>handlerRuby</code>. Convenience hook for subclasses.\n   */\n  protected void\n  preParse(Ruby runtime, IRubyObject handlerRuby, NokogiriHandler handler)\n  {\n    ((XmlSaxParser) parser).setXmlDeclHandler(handler);\n    if (recovery) {\n      try {\n        parser.setFeature(FEATURE_CONTINUE_AFTER_FATAL_ERROR, true);\n      } catch (Exception e) {\n        // Unexpected failure in XML subsystem\n        throw runtime.newRuntimeError(e.getMessage());\n      }\n    }\n  }\n\n  protected void\n  postParse(Ruby runtime, IRubyObject handlerRuby, NokogiriHandler handler)\n  {\n    // noop\n  }\n\n  protected void\n  do_parse() throws SAXException, IOException\n  {\n    parser.parse(getInputSource());\n  }\n\n  protected static Options\n  defaultParseOptions(ThreadContext context)\n  {\n    return new ParserContext.Options(\n             RubyFixnum.fix2long(Helpers.invoke(context,\n                                 ((RubyClass)context.getRuntime().getClassFromPath(\"Nokogiri::XML::ParseOptions\"))\n                                 .getConstant(\"DEFAULT_XML\"),\n                                 \"to_i\"))\n           );\n  }\n\n  @JRubyMethod\n  public IRubyObject\n  parse_with(ThreadContext context, IRubyObject handlerRuby)\n  {\n    final Ruby runtime = context.getRuntime();\n\n    if (!invoke(context, handlerRuby, \"respond_to?\", runtime.newSymbol(\"document\")).isTrue()) {\n      throw runtime.newArgumentError(\"argument must respond_to document\");\n    }\n\n    /* TODO: how should we pass in parse options? */\n    ParserContext.Options options = defaultParseOptions(context);\n\n    errorHandler = new NokogiriStrictErrorHandler(runtime, options.noError, options.noWarning);\n    handler = new NokogiriHandler(runtime, handlerRuby, errorHandler);\n\n    preParse(runtime, handlerRuby, handler);\n    parser.setContentHandler(handler);\n    parser.setErrorHandler(handler);\n    parser.setEntityResolver(new NokogiriEntityResolver(runtime, errorHandler, options));\n\n    try {\n      parser.setProperty(\"http://xml.org/sax/properties/lexical-handler\", handler);\n    } catch (Exception ex) {\n      throw runtime.newRuntimeError(\"Problem while creating XML SAX Parser: \" + ex.toString());\n    }\n\n    try {\n      try {\n        do_parse();\n      } catch (SAXParseException ex) {\n        // A bad document (<foo><bar></foo>) should call the\n        // error handler instead of raising a SAX exception.\n\n        // However, an EMPTY document should raise a RuntimeError.\n        // This is a bit kludgy, but AFAIK SAX doesn't distinguish\n        // between empty and bad whereas Nokogiri does.\n        String message = ex.getMessage();\n        if (message != null && message.contains(\"Premature end of file.\") && stringDataSize < 1) {\n          throw runtime.newRuntimeError(\"couldn't parse document: \" + message);\n        }\n        handler.error(ex);\n      }\n    } catch (SAXException ex) {\n      // Unexpected failure in XML subsystem\n      throw runtime.newRuntimeError(ex.getMessage());\n    } catch (IOException ex) {\n      throw runtime.newIOErrorFromException(ex);\n    }\n\n    postParse(runtime, handlerRuby, handler);\n\n    return runtime.getNil();\n  }\n\n  /**\n   * Can take a boolean assignment.\n   *\n   * @param context\n   * @param value\n   * @return\n   */\n  @JRubyMethod(name = \"replace_entities=\")\n  public IRubyObject\n  set_replace_entities(ThreadContext context, IRubyObject value)\n  {\n    replaceEntities = value.isTrue();\n    return this;\n  }\n\n  @JRubyMethod(name = \"replace_entities\")\n  public IRubyObject\n  get_replace_entities(ThreadContext context)\n  {\n    return context.runtime.newBoolean(replaceEntities);\n  }\n\n  /**\n   * Can take a boolean assignment.\n   *\n   * @param context\n   * @param value\n   * @return\n   */\n  @JRubyMethod(name = \"recovery=\")\n  public IRubyObject\n  set_recovery(ThreadContext context, IRubyObject value)\n  {\n    recovery = value.isTrue();\n    return this;\n  }\n\n  @JRubyMethod(name = \"recovery\")\n  public IRubyObject\n  get_recovery(ThreadContext context)\n  {\n    return context.runtime.newBoolean(recovery);\n  }\n\n  @JRubyMethod(name = \"column\")\n  public IRubyObject\n  column(ThreadContext context)\n  {\n    final Integer number = handler.getColumn();\n    if (number == null) { return context.getRuntime().getNil(); }\n    return RubyFixnum.newFixnum(context.getRuntime(), number.longValue());\n  }\n\n  @JRubyMethod(name = \"line\")\n  public IRubyObject\n  line(ThreadContext context)\n  {\n    final Integer number = handler.getLine();\n    if (number == null) { return context.getRuntime().getNil(); }\n    return RubyFixnum.newFixnum(context.getRuntime(), number.longValue());\n  }\n}\n", "package nokogiri.internals;\n\nimport static nokogiri.internals.NokogiriHelpers.rubyStringToString;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URI;\nimport java.util.concurrent.Callable;\n\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.RubyObject;\nimport org.jruby.RubyString;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\nimport org.jruby.util.ByteList;\nimport org.jruby.util.IOInputStream;\nimport org.xml.sax.InputSource;\n\n/**\n * Base class for the various parser contexts.  Handles converting\n * Ruby objects to InputSource objects.\n *\n * @author Patrick Mahoney <pat@polycrystal.org>\n * @author Yoko Harada <yokolet@gmail.com>\n */\npublic abstract class ParserContext extends RubyObject\n{\n  private static final long serialVersionUID = 1L;\n\n  protected InputSource source = null;\n  protected IRubyObject detected_encoding = null;\n  protected int stringDataSize = -1;\n  protected String java_encoding;\n\n  public\n  ParserContext(Ruby runtime)\n  {\n    // default to class 'Object' because this class isn't exposed to Ruby\n    super(runtime, runtime.getObject());\n  }\n\n  public\n  ParserContext(Ruby runtime, RubyClass klass)\n  {\n    super(runtime, klass);\n  }\n\n  protected InputSource\n  getInputSource()\n  {\n    return source;\n  }\n\n  public void\n  setIOInputSource(ThreadContext context, IRubyObject data, IRubyObject url)\n  {\n    source = new InputSource();\n    ParserContext.setUrl(context, source, url);\n\n    Ruby ruby = context.getRuntime();\n\n    if (!(data.respondsTo(\"read\"))) {\n      throw ruby.newTypeError(\"must respond to :read\");\n    }\n\n    source.setByteStream(new IOInputStream(data));\n    if (java_encoding != null) {\n      source.setEncoding(java_encoding);\n    }\n  }\n\n  public void\n  setStringInputSource(ThreadContext context, IRubyObject data, IRubyObject url)\n  {\n    source = new InputSource();\n    ParserContext.setUrl(context, source, url);\n\n    Ruby ruby = context.getRuntime();\n\n    if (!(data instanceof RubyString)) {\n      throw ruby.newTypeError(\"must be kind_of String\");\n    }\n\n    RubyString stringData = (RubyString) data;\n\n    if (stringData.encoding(context) != null) {\n      RubyString stringEncoding = stringData.encoding(context).asString();\n      String encName = NokogiriHelpers.getValidEncodingOrNull(stringEncoding);\n      if (encName != null) {\n        java_encoding = encName;\n      }\n    }\n\n    ByteList bytes = stringData.getByteList();\n\n    stringDataSize = bytes.length() - bytes.begin();\n    ByteArrayInputStream stream = new ByteArrayInputStream(bytes.unsafeBytes(), bytes.begin(), bytes.length());\n    source.setByteStream(stream);\n    source.setEncoding(java_encoding);\n  }\n\n  public static void\n  setUrl(ThreadContext context, InputSource source, IRubyObject url)\n  {\n    String path = rubyStringToString(url);\n    // Dir.chdir might be called at some point before this.\n    if (path != null) {\n      try {\n        URI uri = URI.create(path);\n        source.setSystemId(uri.toURL().toString());\n      } catch (Exception ex) {\n        // fallback to the old behavior\n        File file = new File(path);\n        if (file.isAbsolute()) {\n          source.setSystemId(path);\n        } else {\n          String pwd = context.getRuntime().getCurrentDirectory();\n          String absolutePath;\n          try {\n            absolutePath = new File(pwd, path).getCanonicalPath();\n          } catch (IOException e) {\n            absolutePath = new File(pwd, path).getAbsolutePath();\n          }\n          source.setSystemId(absolutePath);\n        }\n      }\n    }\n  }\n\n  protected void\n  setEncoding(String encoding)\n  {\n    source.setEncoding(encoding);\n  }\n\n  /**\n   * Set the InputSource to read from <code>file</code>, a String filename.\n   */\n  public void\n  setInputSourceFile(ThreadContext context, IRubyObject file)\n  {\n    source = new InputSource();\n    ParserContext.setUrl(context, source, file);\n  }\n\n  /**\n   * Set the InputSource from <code>stream</code>.\n   */\n  public void\n  setInputSource(InputStream stream)\n  {\n    source = new InputSource(stream);\n  }\n\n  /**\n   * Wrap Nokogiri parser options in a utility class.  This is\n   * read-only.\n   */\n  public static class Options\n  {\n    protected static final long STRICT = 0;\n    protected static final long RECOVER = 1;\n    protected static final long NOENT = 2;\n    protected static final long DTDLOAD = 4;\n    protected static final long DTDATTR = 8;\n    protected static final long DTDVALID = 16;\n    protected static final long NOERROR = 32;\n    protected static final long NOWARNING = 64;\n    protected static final long PEDANTIC = 128;\n    protected static final long NOBLANKS = 256;\n    protected static final long SAX1 = 512;\n    protected static final long XINCLUDE = 1024;\n    protected static final long NONET = 2048;\n    protected static final long NODICT = 4096;\n    protected static final long NSCLEAN = 8192;\n    protected static final long NOCDATA = 16384;\n    protected static final long NOXINCNODE = 32768;\n\n    public final boolean strict;\n    public final boolean recover;\n    public final boolean noEnt;\n    public final boolean dtdLoad;\n    public final boolean dtdAttr;\n    public final boolean dtdValid;\n    public final boolean noError;\n    public final boolean noWarning;\n    public final boolean pedantic;\n    public final boolean noBlanks;\n    public final boolean sax1;\n    public final boolean xInclude;\n    public final boolean noNet;\n    public final boolean noDict;\n    public final boolean nsClean;\n    public final boolean noCdata;\n    public final boolean noXIncNode;\n\n    protected static boolean\n    test(long options, long mask)\n    {\n      return ((options & mask) == mask);\n    }\n\n    public\n    Options(long options)\n    {\n      strict = ((options & RECOVER) == STRICT);\n      recover = test(options, RECOVER);\n      noEnt = test(options, NOENT);\n      dtdLoad = test(options, DTDLOAD);\n      dtdAttr = test(options, DTDATTR);\n      dtdValid = test(options, DTDVALID);\n      noError = test(options, NOERROR);\n      noWarning = test(options, NOWARNING);\n      pedantic = test(options, PEDANTIC);\n      noBlanks = test(options, NOBLANKS);\n      sax1 = test(options, SAX1);\n      xInclude = test(options, XINCLUDE);\n      noNet = test(options, NONET);\n      noDict = test(options, NODICT);\n      nsClean = test(options, NSCLEAN);\n      noCdata = test(options, NOCDATA);\n      noXIncNode = test(options, NOXINCNODE);\n    }\n  }\n\n  /*\n  public static class NokogiriXInlcudeEntityResolver implements org.xml.sax.EntityResolver {\n      InputSource source;\n      public NokogiriXInlcudeEntityResolver(InputSource source) {\n          this.source = source;\n      }\n\n      @Override\n      public InputSource resolveEntity(String publicId, String systemId)\n              throws SAXException, IOException {\n          if (systemId != null) source.setSystemId(systemId);\n          if (publicId != null) source.setPublicId(publicId);\n          return source;\n      }\n  } */\n\n  public static abstract class ParserTask<T extends ParserContext> implements Callable<T>\n  {\n\n    protected final ThreadContext context; // TODO does not seem like a good idea!?\n    protected final IRubyObject handler;\n    protected final T parser;\n\n    protected\n    ParserTask(ThreadContext context, IRubyObject handler, T parser)\n    {\n      this.context = context;\n      this.handler = handler;\n      this.parser = parser;\n    }\n\n  }\n\n}\n", "#include <nokogiri.h>\n\nVALUE cNokogiriHtml4SaxParserContext ;\n\nstatic void\ndeallocate(xmlParserCtxtPtr ctxt)\n{\n  NOKOGIRI_DEBUG_START(ctxt);\n\n  ctxt->sax = NULL;\n\n  htmlFreeParserCtxt(ctxt);\n\n  NOKOGIRI_DEBUG_END(ctxt);\n}\n\nstatic VALUE\nparse_memory(VALUE klass, VALUE data, VALUE encoding)\n{\n  htmlParserCtxtPtr ctxt;\n\n  Check_Type(data, T_STRING);\n\n  if (!(int)RSTRING_LEN(data)) {\n    rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n  }\n\n  ctxt = htmlCreateMemoryParserCtxt(StringValuePtr(data),\n                                    (int)RSTRING_LEN(data));\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  if (RTEST(encoding)) {\n    xmlCharEncodingHandlerPtr enc = xmlFindCharEncodingHandler(StringValueCStr(encoding));\n    if (enc != NULL) {\n      xmlSwitchToEncoding(ctxt, enc);\n      if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {\n        rb_raise(rb_eRuntimeError, \"Unsupported encoding %s\",\n                 StringValueCStr(encoding));\n      }\n    }\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\nstatic VALUE\nparse_file(VALUE klass, VALUE filename, VALUE encoding)\n{\n  htmlParserCtxtPtr ctxt = htmlCreateFileParserCtxt(\n                             StringValueCStr(filename),\n                             StringValueCStr(encoding)\n                           );\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\nstatic VALUE\nparse_doc(VALUE ctxt_val)\n{\n  htmlParserCtxtPtr ctxt = (htmlParserCtxtPtr)ctxt_val;\n  htmlParseDocument(ctxt);\n  return Qnil;\n}\n\nstatic VALUE\nparse_doc_finalize(VALUE ctxt_val)\n{\n  htmlParserCtxtPtr ctxt = (htmlParserCtxtPtr)ctxt_val;\n\n  if (ctxt->myDoc) {\n    xmlFreeDoc(ctxt->myDoc);\n  }\n\n  NOKOGIRI_SAX_TUPLE_DESTROY(ctxt->userData);\n  return Qnil;\n}\n\nstatic VALUE\nparse_with(VALUE self, VALUE sax_handler)\n{\n  htmlParserCtxtPtr ctxt;\n  htmlSAXHandlerPtr sax;\n\n  if (!rb_obj_is_kind_of(sax_handler, cNokogiriXmlSaxParser)) {\n    rb_raise(rb_eArgError, \"argument must be a Nokogiri::XML::SAX::Parser\");\n  }\n\n  Data_Get_Struct(self, htmlParserCtxt, ctxt);\n  Data_Get_Struct(sax_handler, htmlSAXHandler, sax);\n\n  /* Free the sax handler since we'll assign our own */\n  if (ctxt->sax && ctxt->sax != (xmlSAXHandlerPtr)&xmlDefaultSAXHandler) {\n    xmlFree(ctxt->sax);\n  }\n\n  ctxt->sax = sax;\n  ctxt->userData = (void *)NOKOGIRI_SAX_TUPLE_NEW(ctxt, sax_handler);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  rb_ensure(parse_doc, (VALUE)ctxt, parse_doc_finalize, (VALUE)ctxt);\n\n  return self;\n}\n\nvoid\nnoko_init_html_sax_parser_context()\n{\n  assert(cNokogiriXmlSaxParserContext);\n  cNokogiriHtml4SaxParserContext = rb_define_class_under(mNokogiriHtml4Sax, \"ParserContext\",\n                                   cNokogiriXmlSaxParserContext);\n\n  rb_define_singleton_method(cNokogiriHtml4SaxParserContext, \"memory\", parse_memory, 2);\n  rb_define_singleton_method(cNokogiriHtml4SaxParserContext, \"file\", parse_file, 2);\n\n  rb_define_method(cNokogiriHtml4SaxParserContext, \"parse_with\", parse_with, 1);\n}\n", "#include <nokogiri.h>\n\nVALUE cNokogiriXmlSaxParserContext ;\n\nstatic ID id_read;\n\nstatic void\ndeallocate(xmlParserCtxtPtr ctxt)\n{\n  NOKOGIRI_DEBUG_START(ctxt);\n\n  ctxt->sax = NULL;\n\n  xmlFreeParserCtxt(ctxt);\n\n  NOKOGIRI_DEBUG_END(ctxt);\n}\n\n/*\n * call-seq:\n *  parse_io(io, encoding)\n *\n * Parse +io+ object with +encoding+\n */\nstatic VALUE\nparse_io(VALUE klass, VALUE io, VALUE encoding)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlCharEncoding enc = (xmlCharEncoding)NUM2INT(encoding);\n\n  if (!rb_respond_to(io, id_read)) {\n    rb_raise(rb_eTypeError, \"argument expected to respond to :read\");\n  }\n\n  ctxt = xmlCreateIOParserCtxt(NULL, NULL,\n                               (xmlInputReadCallback)noko_io_read,\n                               (xmlInputCloseCallback)noko_io_close,\n                               (void *)io, enc);\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\n/*\n * call-seq:\n *  parse_file(filename)\n *\n * Parse file given +filename+\n */\nstatic VALUE\nparse_file(VALUE klass, VALUE filename)\n{\n  xmlParserCtxtPtr ctxt = xmlCreateFileParserCtxt(StringValueCStr(filename));\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\n/*\n * call-seq:\n *  parse_memory(data)\n *\n * Parse the XML stored in memory in +data+\n */\nstatic VALUE\nparse_memory(VALUE klass, VALUE data)\n{\n  xmlParserCtxtPtr ctxt;\n\n  Check_Type(data, T_STRING);\n\n  if (!(int)RSTRING_LEN(data)) {\n    rb_raise(rb_eRuntimeError, \"data cannot be empty\");\n  }\n\n  ctxt = xmlCreateMemoryParserCtxt(StringValuePtr(data),\n                                   (int)RSTRING_LEN(data));\n  if (ctxt->sax) {\n    xmlFree(ctxt->sax);\n    ctxt->sax = NULL;\n  }\n\n  return Data_Wrap_Struct(klass, NULL, deallocate, ctxt);\n}\n\nstatic VALUE\nparse_doc(VALUE ctxt_val)\n{\n  xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr)ctxt_val;\n  xmlParseDocument(ctxt);\n  return Qnil;\n}\n\nstatic VALUE\nparse_doc_finalize(VALUE ctxt_val)\n{\n  xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr)ctxt_val;\n\n  if (NULL != ctxt->myDoc) {\n    xmlFreeDoc(ctxt->myDoc);\n  }\n\n  NOKOGIRI_SAX_TUPLE_DESTROY(ctxt->userData);\n  return Qnil;\n}\n\n/*\n * call-seq:\n *  parse_with(sax_handler)\n *\n * Use +sax_handler+ and parse the current document\n */\nstatic VALUE\nparse_with(VALUE self, VALUE sax_handler)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlSAXHandlerPtr sax;\n\n  if (!rb_obj_is_kind_of(sax_handler, cNokogiriXmlSaxParser)) {\n    rb_raise(rb_eArgError, \"argument must be a Nokogiri::XML::SAX::Parser\");\n  }\n\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n  Data_Get_Struct(sax_handler, xmlSAXHandler, sax);\n\n  /* Free the sax handler since we'll assign our own */\n  if (ctxt->sax && ctxt->sax != (xmlSAXHandlerPtr)&xmlDefaultSAXHandler) {\n    xmlFree(ctxt->sax);\n  }\n\n  ctxt->sax = sax;\n  ctxt->userData = (void *)NOKOGIRI_SAX_TUPLE_NEW(ctxt, sax_handler);\n\n  xmlSetStructuredErrorFunc(NULL, NULL);\n\n  rb_ensure(parse_doc, (VALUE)ctxt, parse_doc_finalize, (VALUE)ctxt);\n\n  return Qnil;\n}\n\n/*\n * call-seq:\n *  replace_entities=(boolean)\n *\n * Should this parser replace entities?  &amp; will get converted to '&' if\n * set to true\n */\nstatic VALUE\nset_replace_entities(VALUE self, VALUE value)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if (Qfalse == value) {\n    ctxt->replaceEntities = 0;\n  } else {\n    ctxt->replaceEntities = 1;\n  }\n\n  return value;\n}\n\n/*\n * call-seq:\n *  replace_entities\n *\n * Should this parser replace entities?  &amp; will get converted to '&' if\n * set to true\n */\nstatic VALUE\nget_replace_entities(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if (0 == ctxt->replaceEntities) {\n    return Qfalse;\n  } else {\n    return Qtrue;\n  }\n}\n\n/*\n * call-seq: line\n *\n * Get the current line the parser context is processing.\n */\nstatic VALUE\nline(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlParserInputPtr io;\n\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  io = ctxt->input;\n  if (io) {\n    return INT2NUM(io->line);\n  }\n\n  return Qnil;\n}\n\n/*\n * call-seq: column\n *\n * Get the current column the parser context is processing.\n */\nstatic VALUE\ncolumn(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  xmlParserInputPtr io;\n\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  io = ctxt->input;\n  if (io) {\n    return INT2NUM(io->col);\n  }\n\n  return Qnil;\n}\n\n/*\n * call-seq:\n *  recovery=(boolean)\n *\n * Should this parser recover from structural errors? It will not stop processing\n * file on structural errors if set to true\n */\nstatic VALUE\nset_recovery(VALUE self, VALUE value)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if (value == Qfalse) {\n    ctxt->recovery = 0;\n  } else {\n    ctxt->recovery = 1;\n  }\n\n  return value;\n}\n\n/*\n * call-seq:\n *  recovery\n *\n * Should this parser recover from structural errors? It will not stop processing\n * file on structural errors if set to true\n */\nstatic VALUE\nget_recovery(VALUE self)\n{\n  xmlParserCtxtPtr ctxt;\n  Data_Get_Struct(self, xmlParserCtxt, ctxt);\n\n  if (ctxt->recovery == 0) {\n    return Qfalse;\n  } else {\n    return Qtrue;\n  }\n}\n\nvoid\nnoko_init_xml_sax_parser_context()\n{\n  cNokogiriXmlSaxParserContext = rb_define_class_under(mNokogiriXmlSax, \"ParserContext\", rb_cObject);\n\n  rb_undef_alloc_func(cNokogiriXmlSaxParserContext);\n\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"io\", parse_io, 2);\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"memory\", parse_memory, 1);\n  rb_define_singleton_method(cNokogiriXmlSaxParserContext, \"file\", parse_file, 1);\n\n  rb_define_method(cNokogiriXmlSaxParserContext, \"parse_with\", parse_with, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"replace_entities=\", set_replace_entities, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"replace_entities\", get_replace_entities, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"recovery=\", set_recovery, 1);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"recovery\", get_recovery, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"line\", line, 0);\n  rb_define_method(cNokogiriXmlSaxParserContext, \"column\", column, 0);\n\n  id_read = rb_intern(\"read\");\n}\n", "# frozen_string_literal: true\n\nmodule Nokogiri\n  module HTML4\n    ###\n    # Nokogiri lets you write a SAX parser to process HTML but get HTML correction features.\n    #\n    # See Nokogiri::HTML4::SAX::Parser for a basic example of using a SAX parser with HTML.\n    #\n    # For more information on SAX parsers, see Nokogiri::XML::SAX\n    module SAX\n      ###\n      # This class lets you perform SAX style parsing on HTML with HTML error correction.\n      #\n      # Here is a basic usage example:\n      #\n      #   class MyDoc < Nokogiri::XML::SAX::Document\n      #     def start_element name, attributes = []\n      #       puts \"found a #{name}\"\n      #     end\n      #   end\n      #\n      #   parser = Nokogiri::HTML4::SAX::Parser.new(MyDoc.new)\n      #   parser.parse(File.read(ARGV[0], mode: 'rb'))\n      #\n      # For more information on SAX parsers, see Nokogiri::XML::SAX\n      class Parser < Nokogiri::XML::SAX::Parser\n        ###\n        # Parse html stored in +data+ using +encoding+\n        def parse_memory(data, encoding = \"UTF-8\")\n          raise TypeError unless String === data\n          return if data.empty?\n\n          ctx = ParserContext.memory(data, encoding)\n          yield ctx if block_given?\n          ctx.parse_with(self)\n        end\n\n        ###\n        # Parse given +io+\n        def parse_io(io, encoding = \"UTF-8\")\n          check_encoding(encoding)\n          @encoding = encoding\n          ctx = ParserContext.io(io, ENCODINGS[encoding])\n          yield ctx if block_given?\n          ctx.parse_with(self)\n        end\n\n        ###\n        # Parse a file with +filename+\n        def parse_file(filename, encoding = \"UTF-8\")\n          raise ArgumentError unless filename\n          raise Errno::ENOENT unless File.exist?(filename)\n          raise Errno::EISDIR if File.directory?(filename)\n\n          ctx = ParserContext.file(filename, encoding)\n          yield ctx if block_given?\n          ctx.parse_with(self)\n        end\n      end\n    end\n  end\nend\n", "# -*- coding: utf-8 -*-\n# frozen_string_literal: true\n\nrequire \"helper\"\n\nmodule Nokogiri\n  module HTML\n    module SAX\n      class TestParser < Nokogiri::SAX::TestCase\n        def setup\n          super\n          @parser = HTML::SAX::Parser.new(Doc.new)\n        end\n\n        def test_parse_empty_document\n          # This caused a segfault in libxml 2.6.x\n          assert_nil(@parser.parse(\"\"))\n        end\n\n        def test_parse_empty_file\n          # Make sure empty files don't break stuff\n          empty_file_name = File.join(ASSETS_DIR, \"bogus.xml\")\n          @parser.parse_file(empty_file_name) # assert_nothing_raised\n        end\n\n        def test_parse_file\n          @parser.parse_file(HTML_FILE)\n\n          # Take a look at the comment in test_parse_document to know\n          # a possible reason to this difference.\n          if Nokogiri.uses_libxml?\n            assert_equal(1111, @parser.document.end_elements.length)\n          else\n            assert_equal(1120, @parser.document.end_elements.length)\n          end\n        end\n\n        def test_parse_file_nil_argument\n          assert_raises(ArgumentError) do\n            @parser.parse_file(nil)\n          end\n        end\n\n        def test_parse_file_non_existant\n          assert_raises(Errno::ENOENT) do\n            @parser.parse_file(\"there_is_no_reasonable_way_this_file_exists\")\n          end\n        end\n\n        def test_parse_file_with_dir\n          assert_raises(Errno::EISDIR) do\n            @parser.parse_file(File.dirname(__FILE__))\n          end\n        end\n\n        def test_parse_memory_nil\n          assert_raises(TypeError) do\n            @parser.parse_memory(nil)\n          end\n        end\n\n        def test_parse_force_encoding\n          @parser.parse_memory(<<-HTML, \"UTF-8\")\n          <meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\">\n          \u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\n          HTML\n          assert_equal(\"\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f\",\n            @parser.document.data.join.strip)\n        end\n\n        def test_parse_document\n          @parser.parse_memory(<<-eoxml)\n            <p>Paragraph 1</p>\n            <p>Paragraph 2</p>\n          eoxml\n\n          # JRuby version is different because of the internal implementation\n          # JRuby version uses NekoHTML which inserts empty \"head\" elements.\n          #\n          # Currently following features are set:\n          # \"http://cyberneko.org/html/properties/names/elems\" => \"lower\"\n          # \"http://cyberneko.org/html/properties/names/attrs\" => \"lower\"\n          if Nokogiri.uses_libxml?\n            assert_equal([[\"html\", []], [\"body\", []], [\"p\", []], [\"p\", []]],\n              @parser.document.start_elements)\n          else\n            assert_equal([[\"html\", []], [\"head\", []], [\"body\", []], [\"p\", []], [\"p\", []]],\n              @parser.document.start_elements)\n          end\n        end\n\n        def test_parser_attributes\n          html = <<~eohtml\n            <html>\n              <head>\n                <title>hello</title>\n              </head>\n            <body>\n              <img src=\"face.jpg\" title=\"daddy &amp; me\">\n              <hr noshade size=\"2\">\n            </body>\n            </html>\n          eohtml\n\n          block_called = false\n          @parser.parse(html) do |ctx|\n            block_called = true\n            ctx.replace_entities = true\n          end\n\n          assert(block_called)\n\n          noshade_value = if Nokogiri.uses_libxml?(\"< 2.7.7\")\n            [\"noshade\", \"noshade\"]\n          else\n            [\"noshade\", nil]\n          end\n\n          assert_equal([\n            [\"html\", []],\n            [\"head\", []],\n            [\"title\", []],\n            [\"body\", []],\n            [\"img\", [\n              [\"src\", \"face.jpg\"],\n              [\"title\", \"daddy & me\"],\n            ],],\n            [\"hr\", [\n              noshade_value,\n              [\"size\", \"2\"],\n            ],],\n          ], @parser.document.start_elements)\n        end\n\n        HTML_WITH_BR_TAG = <<-EOF\n        <html>\n          <head></head>\n          <body>\n            <div>\n              hello\n              <br>\n            </div>\n\n            <div>\n              hello again\n            </div>\n          </body>\n        </html>\n        EOF\n\n        def test_parsing_dom_error_from_string\n          @parser.parse(HTML_WITH_BR_TAG)\n          assert_equal(6, @parser.document.start_elements.length)\n        end\n\n        def test_parsing_dom_error_from_io\n          @parser.parse(StringIO.new(HTML_WITH_BR_TAG))\n          assert_equal(6, @parser.document.start_elements.length)\n        end\n\n        def test_empty_processing_instruction\n          @parser.parse_memory(\"<strong>this will segfault<?strong>\")\n        end\n\n        it \"handles invalid types gracefully\" do\n          assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse(0xcafecafe) }\n          assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse_memory(0xcafecafe) }\n          assert_raises(TypeError) { Nokogiri::HTML::SAX::Parser.new.parse_io(0xcafecafe) }\n        end\n      end\n    end\n  end\nend\n", "# -*- coding: utf-8 -*-\n# frozen_string_literal: true\n\nrequire \"helper\"\n\nmodule Nokogiri\n  module HTML\n    module SAX\n      class TestParserContext < Nokogiri::SAX::TestCase\n        def test_from_io\n          ctx = ParserContext.new(StringIO.new(\"fo\"), \"UTF-8\")\n          assert(ctx)\n        end\n\n        def test_from_string\n          ctx = ParserContext.new(\"blah blah\")\n          assert(ctx)\n        end\n\n        def test_parse_with\n          ctx = ParserContext.new(\"blah\")\n          assert_raises(ArgumentError) do\n            ctx.parse_with(nil)\n          end\n        end\n\n        def test_parse_with_sax_parser\n          # assert_nothing_raised do\n          xml = \"<root />\"\n          ctx = ParserContext.new(xml)\n          parser = Parser.new(Doc.new)\n          ctx.parse_with(parser)\n          # end\n        end\n\n        def test_from_file\n          # assert_nothing_raised do\n          ctx = ParserContext.file(HTML_FILE, \"UTF-8\")\n          parser = Parser.new(Doc.new)\n          ctx.parse_with(parser)\n          # end\n        end\n\n        def test_graceful_handling_of_invalid_types\n          assert_raises(TypeError) { ParserContext.new(0xcafecafe) }\n          assert_raises(TypeError) { ParserContext.memory(0xcafecafe, \"UTF-8\") }\n          assert_raises(TypeError) { ParserContext.io(0xcafecafe, 1) }\n          assert_raises(TypeError) { ParserContext.io(StringIO.new(\"asdf\"), \"should be an index into ENCODINGS\") }\n          assert_raises(TypeError) { ParserContext.file(0xcafecafe, \"UTF-8\") }\n          assert_raises(TypeError) { ParserContext.file(\"path/to/file\", 0xcafecafe) }\n        end\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nrequire \"helper\"\n\nmodule Nokogiri\n  module SAX\n    class TestCase\n      describe Nokogiri::XML::SAX::Parser do\n        let(:parser) { Nokogiri::XML::SAX::Parser.new(Doc.new) }\n\n        it :test_parser_context_yielded_io do\n          doc = Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(doc)\n          xml = \"<foo a='&amp;b'/>\"\n\n          block_called = false\n          parser.parse(StringIO.new(xml)) do |ctx|\n            block_called = true\n            ctx.replace_entities = true\n          end\n\n          assert(block_called)\n\n          assert_equal([[\"foo\", [[\"a\", \"&b\"]]]], doc.start_elements)\n        end\n\n        it :test_parser_context_yielded_in_memory do\n          doc = Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(doc)\n          xml = \"<foo a='&amp;b'/>\"\n\n          block_called = false\n          parser.parse(xml) do |ctx|\n            block_called = true\n            ctx.replace_entities = true\n          end\n\n          assert(block_called)\n\n          assert_equal([[\"foo\", [[\"a\", \"&b\"]]]], doc.start_elements)\n        end\n\n        it :test_empty_decl do\n          parser = Nokogiri::XML::SAX::Parser.new(Doc.new)\n\n          xml = \"<root />\"\n          parser.parse(xml)\n          assert(parser.document.start_document_called)\n          assert_nil(parser.document.xmldecls)\n        end\n\n        it :test_xml_decl do\n          [\n            ['<?xml version=\"1.0\" ?>', [\"1.0\"]],\n            ['<?xml version=\"1.0\" encoding=\"UTF-8\" ?>', [\"1.0\", \"UTF-8\"]],\n            ['<?xml version=\"1.0\" standalone=\"yes\"?>', [\"1.0\", \"yes\"]],\n            ['<?xml version=\"1.0\" standalone=\"no\"?>', [\"1.0\", \"no\"]],\n            ['<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>', [\"1.0\", \"UTF-8\", \"no\"]],\n            ['<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>', [\"1.0\", \"ISO-8859-1\", \"yes\"]],\n          ].each do |decl, value|\n            parser = Nokogiri::XML::SAX::Parser.new(Doc.new)\n\n            xml = \"#{decl}\\n<root />\"\n            parser.parse(xml)\n            assert(parser.document.start_document_called)\n            assert_equal(value, parser.document.xmldecls)\n          end\n        end\n\n        it :test_parse_empty do\n          assert_raises(RuntimeError) do\n            parser.parse(\"\")\n          end\n        end\n\n        it \"handles invalid types gracefully\" do\n          assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse(0xcafecafe) }\n          assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse_memory(0xcafecafe) }\n          assert_raises(TypeError) { Nokogiri::XML::SAX::Parser.new.parse_io(0xcafecafe) }\n        end\n\n        it :test_namespace_declaration_order_is_saved do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>\n              <a foo:bar='hello' />\n            </root>\n          EOF\n          assert_equal(2, parser.document.start_elements_namespace.length)\n          el = parser.document.start_elements_namespace.first\n          namespaces = el.last\n          assert_equal([\"foo\", \"http://foo.example.com/\"], namespaces.first)\n          assert_equal([nil, \"http://example.com/\"], namespaces.last)\n        end\n\n        it :test_bad_document_calls_error_handler do\n          parser.parse(\"<foo><bar></foo>\")\n          assert(parser.document.errors)\n          refute_empty(parser.document.errors)\n        end\n\n        it :test_namespace_are_super_fun_to_parse do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/'>\n              <a foo:bar='hello' />\n              <b xmlns:foo='http://bar.example.com/'>\n                <a foo:bar='hello' />\n              </b>\n              <foo:bar>hello world</foo:bar>\n            </root>\n          EOF\n\n          refute_empty(parser.document.start_elements_namespace)\n          el = parser.document.start_elements_namespace[1]\n          assert_equal(\"a\", el.first)\n          assert_equal(1, el[1].length)\n\n          attribute = el[1].first\n          assert_equal(\"bar\", attribute.localname)\n          assert_equal(\"foo\", attribute.prefix)\n          assert_equal(\"hello\", attribute.value)\n          assert_equal(\"http://foo.example.com/\", attribute.uri)\n        end\n\n        it :test_sax_v1_namespace_attribute_declarations do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>\n              <a foo:bar='hello' />\n              <b xmlns:foo='http://bar.example.com/'>\n                <a foo:bar='hello' />\n              </b>\n              <foo:bar>hello world</foo:bar>\n            </root>\n          EOF\n          refute_empty(parser.document.start_elements)\n          elm = parser.document.start_elements.first\n          assert_equal(\"root\", elm.first)\n          assert_includes(elm[1], [\"xmlns:foo\", \"http://foo.example.com/\"])\n          assert_includes(elm[1], [\"xmlns\", \"http://example.com/\"])\n        end\n\n        it :test_sax_v1_namespace_nodes do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>\n              <a foo:bar='hello' />\n              <b xmlns:foo='http://bar.example.com/'>\n                <a foo:bar='hello' />\n              </b>\n              <foo:bar>hello world</foo:bar>\n            </root>\n          EOF\n          assert_equal(5, parser.document.start_elements.length)\n          assert_includes(parser.document.start_elements.map(&:first), \"foo:bar\")\n          assert_includes(parser.document.end_elements.map(&:first), \"foo:bar\")\n        end\n\n        it :test_start_is_called_without_namespace do\n          parser.parse(<<~EOF)\n            <root xmlns:foo='http://foo.example.com/' xmlns='http://example.com/'>\n            <foo:f><bar></foo:f>\n            </root>\n          EOF\n          assert_equal(\n            [\"root\", \"foo:f\", \"bar\"],\n            parser.document.start_elements.map(&:first)\n          )\n        end\n\n        it :test_parser_sets_encoding do\n          parser = Nokogiri::XML::SAX::Parser.new(Doc.new, \"UTF-8\")\n          assert_equal(\"UTF-8\", parser.encoding)\n        end\n\n        it :test_errors_set_after_parsing_bad_dom do\n          doc = Nokogiri::XML(\"<foo><bar></foo>\")\n          assert(doc.errors)\n\n          parser.parse(\"<foo><bar></foo>\")\n          assert(parser.document.errors)\n          refute_empty(parser.document.errors)\n\n          doc.errors.each do |error|\n            assert_equal(\"UTF-8\", error.message.encoding.name)\n          end\n\n          # when using JRuby Nokogiri, more errors will be generated as the DOM\n          # parser continue to parse an ill formed document, while the sax parser\n          # will stop at the first error\n          unless Nokogiri.jruby?\n            assert_equal(doc.errors.length, parser.document.errors.length)\n          end\n        end\n\n        it :test_parse_with_memory_argument do\n          parser.parse(File.read(XML_FILE))\n          refute_empty(parser.document.cdata_blocks)\n        end\n\n        it :test_parse_with_io_argument do\n          File.open(XML_FILE, \"rb\") do |f|\n            parser.parse(f)\n          end\n          refute_empty(parser.document.cdata_blocks)\n        end\n\n        it :test_parse_io do\n          call_parse_io_with_encoding(\"UTF-8\")\n        end\n\n        # issue #828\n        it :test_parse_io_lower_case_encoding do\n          call_parse_io_with_encoding(\"utf-8\")\n        end\n\n        def call_parse_io_with_encoding(encoding)\n          File.open(XML_FILE, \"rb\") do |f|\n            parser.parse_io(f, encoding)\n          end\n          refute_empty(parser.document.cdata_blocks)\n\n          called = false\n          parser.document.start_elements.flatten.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n\n          called = false\n          parser.document.end_elements.flatten.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n\n          called = false\n          parser.document.data.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n\n          called = false\n          parser.document.comments.flatten.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n\n          called = false\n          parser.document.cdata_blocks.flatten.each do |thing|\n            assert_equal(\"UTF-8\", thing.encoding.name)\n            called = true\n          end\n          assert(called)\n        end\n\n        it :test_parse_file do\n          parser.parse_file(XML_FILE)\n\n          assert_raises(ArgumentError) do\n            parser.parse_file(nil)\n          end\n\n          assert_raises(Errno::ENOENT) do\n            parser.parse_file(\"\")\n          end\n          assert_raises(Errno::EISDIR) do\n            parser.parse_file(File.expand_path(File.dirname(__FILE__)))\n          end\n        end\n\n        it :test_render_parse_nil_param do\n          assert_raises(TypeError) { parser.parse_memory(nil) }\n        end\n\n        it :test_bad_encoding_args do\n          assert_raises(ArgumentError) { Nokogiri::XML::SAX::Parser.new(Doc.new, \"not an encoding\") }\n          assert_raises(ArgumentError) { parser.parse_io(StringIO.new(\"<root/>\"), \"not an encoding\") }\n        end\n\n        it :test_ctag do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">\n              <![CDATA[ This is a comment ]]>\n              Paragraph 1\n            </p>\n          EOF\n          assert_equal([\" This is a comment \"], parser.document.cdata_blocks)\n        end\n\n        it :test_comment do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">\n              <!-- This is a comment -->\n              Paragraph 1\n            </p>\n          EOF\n          assert_equal([\" This is a comment \"], parser.document.comments)\n        end\n\n        it :test_characters do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">Paragraph 1</p>\n          EOF\n          assert_equal([\"Paragraph 1\"], parser.document.data)\n        end\n\n        it :test_end_document do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">Paragraph 1</p>\n          EOF\n          assert(parser.document.end_document_called)\n        end\n\n        it :test_end_element do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">Paragraph 1</p>\n          EOF\n          assert_equal([[\"p\"]], parser.document.end_elements)\n        end\n\n        it :test_start_element_attrs do\n          parser.parse_memory(<<~EOF)\n            <p id=\"asdfasdf\">Paragraph 1</p>\n          EOF\n          assert_equal([[\"p\", [[\"id\", \"asdfasdf\"]]]], parser.document.start_elements)\n        end\n\n        it :test_start_element_attrs_include_namespaces do\n          parser.parse_memory(<<~EOF)\n            <p xmlns:foo='http://foo.example.com/'>Paragraph 1</p>\n          EOF\n          assert_equal(\n            [[\"p\", [[\"xmlns:foo\", \"http://foo.example.com/\"]]]],\n            parser.document.start_elements\n          )\n        end\n\n        it :test_processing_instruction do\n          parser.parse_memory(<<~EOF)\n            <?xml-stylesheet href=\"a.xsl\" type=\"text/xsl\"?>\n            <?xml version=\"1.0\"?>\n          EOF\n          assert_equal(\n            [[\"xml-stylesheet\", 'href=\"a.xsl\" type=\"text/xsl\"']],\n            parser.document.processing_instructions\n          )\n        end\n\n        it :test_parse_document do\n          skip_unless_libxml2(\"JRuby SAXParser only parses well-formed XML documents\")\n          parser.parse_memory(<<~EOF)\n            <p>Paragraph 1</p>\n            <p>Paragraph 2</p>\n          EOF\n        end\n\n        it :test_parser_attributes do\n          xml = <<~EOF\n            <?xml version=\"1.0\" ?><root><foo a=\"&amp;b\" c=\"&gt;d\" /></root>\n          EOF\n\n          block_called = false\n          parser.parse(xml) do |ctx|\n            block_called = true\n            ctx.replace_entities = true\n          end\n\n          assert(block_called)\n\n          assert_equal(\n            [[\"root\", []], [\"foo\", [[\"a\", \"&b\"], [\"c\", \">d\"]]]], parser.document.start_elements\n          )\n        end\n\n        it :test_recovery_from_incorrect_xml do\n          xml = <<~EOF\n            <?xml version=\"1.0\" ?><Root><Data><?xml version='1.0'?><Item>hey</Item></Data><Data><Item>hey yourself</Item></Data></Root>\n          EOF\n\n          block_called = false\n          parser.parse(xml) do |ctx|\n            block_called = true\n            ctx.recovery = true\n          end\n\n          assert(block_called)\n\n          assert_equal(\n            [[\"Root\", []], [\"Data\", []], [\"Item\", []], [\"Data\", []], [\"Item\", []]],\n            parser.document.start_elements\n          )\n        end\n\n        it :test_square_bracket_in_text do\n          # issue 1261\n          xml = <<~EOF\n            <tu tuid=\"87dea04cf60af103ff09d1dba36ae820\" segtype=\"block\">\n              <prop type=\"x-smartling-string-variant\">en:#:home_page:#:stories:#:[6]:#:name</prop>\n              <tuv xml:lang=\"en-US\"><seg>Sandy S.</seg></tuv>\n            </tu>\n          EOF\n          parser.parse(xml)\n          assert_includes(parser.document.data, \"en:#:home_page:#:stories:#:[6]:#:name\")\n        end\n\n        it :test_large_cdata_is_handled do\n          skip(\"see #2132 and https://gitlab.gnome.org/GNOME/libxml2/-/issues/200\") if Nokogiri.uses_libxml?(\"<=2.9.10\")\n\n          template = <<~EOF\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <soapenv:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:ns=\"http://example.com\">\n               <soapenv:Header>\n                  <AuthHeader xsi:type=\"ns:vAuthHeader\">\n                  <userName xsi:type=\"xsd:string\">gorilla</userName>\n                  <password xsi:type=\"xsd:string\">secret</password>\n                </AuthHeader>\n               </soapenv:Header>\n              <soapenv:Body>\n                <ns:checkToken soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n                  <checkToken xsi:type=\"xsd:string\"><![CDATA[%s]]></checkToken>\n                </ns:checkToken>\n               </soapenv:Body>\n            </soapenv:Envelope>\n          EOF\n\n          factor = 10\n          huge_data = \"a\" * (1024 * 1024 * factor)\n          xml = StringIO.new(template % huge_data)\n\n          handler = Nokogiri::SAX::TestCase::Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(handler)\n          parser.parse(xml)\n\n          assert_predicate(handler.errors, :empty?)\n        end\n\n        it \"does not resolve entities by default\" do\n          xml = <<~EOF\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <!DOCTYPE doc [\n              <!ENTITY local SYSTEM \"file:///#{File.expand_path(__FILE__)}\">\n              <!ENTITY custom \"resolved>\n            ]>\n            <doc><foo>&local;</foo><foo>&custom;</foo></doc>\n          EOF\n\n          doc = Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(doc)\n          parser.parse(xml)\n\n          assert_nil(doc.data)\n        end\n\n        it \"does not resolve network external entities by default\" do\n          xml = <<~EOF\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <!DOCTYPE doc [\n              <!ENTITY remote SYSTEM \"http://0.0.0.0:8080/evil.dtd\">\n            ]>\n            <doc><foo>&remote;</foo></doc>\n          EOF\n\n          doc = Doc.new\n          parser = Nokogiri::XML::SAX::Parser.new(doc)\n          parser.parse(xml)\n\n          assert_nil(doc.data)\n        end\n\n        it \"handles parser warnings\" do\n          skip_unless_libxml2(\"this is testing error message formatting in the C extension\")\n          xml = <<~XML\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n            <doc xmlns=\"x\">\n              this element's ns definition is crafted to raise a warning\n              from libxml2's SAX2.c:xmlSAX2AttributeInternal()\n            </doc>\n          XML\n          parser.parse(xml)\n          refute_empty(parser.document.warnings)\n          assert_match(/URI .* is not absolute/, parser.document.warnings.first)\n        end\n      end\n    end\n  end\nend\n", "# -*- coding: utf-8 -*-\n# frozen_string_literal: true\n\nrequire \"helper\"\n\nmodule Nokogiri\n  module XML\n    module SAX\n      class TestParserContext < Nokogiri::SAX::TestCase\n        def setup\n          super\n          @xml = <<~EOF\n            <hello>\n\n            world\n            <inter>\n                <net>\n                </net>\n            </inter>\n\n            </hello>\n          EOF\n        end\n\n        class Counter < Nokogiri::XML::SAX::Document\n          attr_accessor :context, :lines, :columns\n\n          def initialize\n            super\n            @context = nil\n            @lines   = []\n            @columns = []\n          end\n\n          def start_element(name, attrs = [])\n            @lines << [name, context.line]\n            @columns << [name, context.column]\n          end\n        end\n\n        def test_line_numbers\n          sax_handler = Counter.new\n\n          parser = Nokogiri::XML::SAX::Parser.new(sax_handler)\n          parser.parse(@xml) do |ctx|\n            sax_handler.context = ctx\n          end\n\n          assert_equal([[\"hello\", 1], [\"inter\", 4], [\"net\", 5]],\n            sax_handler.lines)\n        end\n\n        def test_column_numbers\n          sax_handler = Counter.new\n\n          parser = Nokogiri::XML::SAX::Parser.new(sax_handler)\n          parser.parse(@xml) do |ctx|\n            sax_handler.context = ctx\n          end\n\n          assert_equal([[\"hello\", 7], [\"inter\", 7], [\"net\", 9]],\n            sax_handler.columns)\n        end\n\n        def test_replace_entities\n          pc = ParserContext.new(StringIO.new(\"<root />\"), \"UTF-8\")\n          pc.replace_entities = false\n          refute(pc.replace_entities)\n\n          pc.replace_entities = true\n          assert(pc.replace_entities)\n        end\n\n        def test_recovery\n          pc = ParserContext.new(StringIO.new(\"<root />\"), \"UTF-8\")\n          pc.recovery = false\n          refute(pc.recovery)\n\n          pc.recovery = true\n          assert(pc.recovery)\n        end\n\n        def test_graceful_handling_of_invalid_types\n          assert_raises(TypeError) { ParserContext.new(0xcafecafe) }\n          assert_raises(TypeError) { ParserContext.memory(0xcafecafe) }\n          assert_raises(TypeError) { ParserContext.io(0xcafecafe, 1) }\n          assert_raises(TypeError) { ParserContext.io(StringIO.new(\"asdf\"), \"should be an index into ENCODINGS\") }\n        end\n\n        def test_from_io\n          ctx = ParserContext.new(StringIO.new(\"fo\"), \"UTF-8\")\n          assert(ctx)\n        end\n\n        def test_from_string\n          assert(ParserContext.new(\"blah blah\"))\n        end\n\n        def test_parse_with\n          ctx = ParserContext.new(\"blah\")\n          assert_raises(ArgumentError) do\n            ctx.parse_with(nil)\n          end\n        end\n\n        def test_parse_with_sax_parser\n          xml = \"<root />\"\n          ctx = ParserContext.new(xml)\n          parser = Parser.new(Doc.new)\n          assert_nil(ctx.parse_with(parser))\n        end\n\n        def test_from_file\n          ctx = ParserContext.file(XML_FILE)\n          parser = Parser.new(Doc.new)\n          assert_nil(ctx.parse_with(parser))\n        end\n\n        def test_parse_with_returns_nil\n          xml = \"<root />\"\n          ctx = ParserContext.new(xml)\n          parser = Parser.new(Doc.new)\n          assert_nil(ctx.parse_with(parser))\n        end\n      end\n    end\n  end\nend\n"], "filenames": ["CHANGELOG.md", "ext/java/nokogiri/Html4SaxParserContext.java", "ext/java/nokogiri/XmlSaxParserContext.java", "ext/java/nokogiri/internals/ParserContext.java", "ext/nokogiri/html4_sax_parser_context.c", "ext/nokogiri/xml_sax_parser_context.c", "lib/nokogiri/html4/sax/parser.rb", "test/html4/sax/test_parser.rb", "test/html4/sax/test_parser_context.rb", "test/xml/sax/test_parser.rb", "test/xml/sax/test_parser_context.rb"], "buggy_code_start_loc": [30, 233, 134, 62, 22, 3, 31, 57, 42, 75, 82], "buggy_code_end_loc": [40, 249, 137, 79, 25, 282, 32, 163, 42, 267, 82], "fixing_code_start_loc": [31, 234, 134, 63, 22, 4, 31, 57, 43, 76, 83], "fixing_code_end_loc": [41, 261, 140, 85, 24, 289, 32, 170, 52, 273, 90], "type": "CWE-241", "message": "Nokogiri is an open source XML and HTML library for Ruby. Nokogiri prior to version 1.13.6 does not type-check all inputs into the XML and HTML4 SAX parsers, allowing specially crafted untrusted inputs to cause illegal memory access errors (segfault) or reads from unrelated memory. Version 1.13.6 contains a patch for this issue. As a workaround, ensure the untrusted input is a `String` by calling `#to_s` or equivalent.", "other": {"cve": {"id": "CVE-2022-29181", "sourceIdentifier": "security-advisories@github.com", "published": "2022-05-20T19:15:08.203", "lastModified": "2023-02-16T02:31:15.450", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Nokogiri is an open source XML and HTML library for Ruby. Nokogiri prior to version 1.13.6 does not type-check all inputs into the XML and HTML4 SAX parsers, allowing specially crafted untrusted inputs to cause illegal memory access errors (segfault) or reads from unrelated memory. Version 1.13.6 contains a patch for this issue. As a workaround, ensure the untrusted input is a `String` by calling `#to_s` or equivalent."}, {"lang": "es", "value": "Nokogiri es una biblioteca XML y HTML de c\u00f3digo abierto para Ruby. En versiones anteriores a 1.13.6, Nokogiri no comprobaba todas las entradas en los analizadores SAX de XML y HTML4, lo que permit\u00eda que entradas no confiables especialmente dise\u00f1adas causaran errores de acceso a memoria ilegales (segfault) o lecturas de memoria no relacionadas. La versi\u00f3n 1.13.6 contiene un parche para este problema. Como mitigaci\u00f3n, aseg\u00farese de que la entrada no confiable es una \"String\" llamando a \"#to_s\" o su equivalente"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-241"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-843"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:nokogiri:nokogiri:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "1.13.6", "matchCriteriaId": "DF66B3C9-F1EC-49ED-894B-8AE55B52427A"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:apple:macos:*:*:*:*:*:*:*:*", "versionStartIncluding": "13.0", "versionEndExcluding": "13.1", "matchCriteriaId": "454702CC-FB2E-4D17-AEAF-A428925B44A4"}]}]}], "references": [{"url": "http://seclists.org/fulldisclosure/2022/Dec/23", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/sparklemotion/nokogiri/releases/tag/v1.13.6", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/sparklemotion/nokogiri/security/advisories/GHSA-xh29-r2w5-wx8m", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202208-29", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://securitylab.github.com/advisories/GHSL-2022-031_GHSL-2022-032_Nokogiri/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://support.apple.com/kb/HT213532", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/sparklemotion/nokogiri/commit/db05ba9a1bd4b90aa6c76742cf6102a7c7297267"}}