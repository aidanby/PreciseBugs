{"buggy_code": ["# Full list of environment variables that can be used with BookStack.\n# Selectively copy these to your '.env' file as required.\n# Each option is shown with it's default value.\n# Do not copy this whole file to use as your '.env' file.\n\n# Application environment\n# Can be 'production', 'development', 'testing' or 'demo'\nAPP_ENV=production\n\n# Enable debug mode\n# Shows advanced debug information and errors.\n# CAN EXPOSE OTHER VARIABLES, LEAVE DISABLED\nAPP_DEBUG=false\n\n# Application key\n# Used for encryption where needed.\n# Run `php artisan key:generate` to generate a valid key.\nAPP_KEY=SomeRandomString\n\n# Application URL\n# This must be the root URL that you want to host BookStack on.\n# All URL's in BookStack will be generated using this value.\nAPP_URL=https://example.com\n\n# Application default language\n# The default language choice to show.\n# May be overridden by user-preference or visitor browser settings.\nAPP_LANG=en\n\n# Auto-detect language for public visitors.\n# Uses browser-sent headers to infer a language.\n# APP_LANG will be used if such a header is not provided.\nAPP_AUTO_LANG_PUBLIC=true\n\n# Application timezone\n# Used where dates are displayed such as on exported content.\n# Valid timezone values can be found here: https://www.php.net/manual/en/timezones.php\nAPP_TIMEZONE=UTC\n\n# Application theme\n# Used to specific a themes/<APP_THEME> folder where BookStack UI\n# overrides can be made. Defaults to disabled.\nAPP_THEME=false\n\n# Trusted proxies\n# Used to indicate trust of systems that proxy to the application so\n# certain header values (Such as \"X-Forwarded-For\") can be used from the\n# incoming proxy request to provide origin detail.\n# Set to an IP address, or multiple comma seperated IP addresses.\n# Can alternatively be set to \"*\" to trust all proxy addresses.\nAPP_PROXIES=null\n\n# Database details\n# Host can contain a port (localhost:3306) or a separate DB_PORT option can be used.\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=database_database\nDB_USERNAME=database_username\nDB_PASSWORD=database_user_password\n\n# MySQL specific connection options\n# Path to Certificate Authority (CA) certificate file for your MySQL instance.\n# When this option is used host name identity verification will be performed\n# which checks the hostname, used by the client, against names within the\n# certificate itself (Common Name or Subject Alternative Name).\nMYSQL_ATTR_SSL_CA=\"/path/to/ca.pem\"\n\n# Mail system to use\n# Can be 'smtp' or 'sendmail'\nMAIL_DRIVER=smtp\n\n# Mail sending options\nMAIL_FROM=mail@bookstackapp.com\nMAIL_FROM_NAME=BookStack\n\n# SMTP mail options\nMAIL_HOST=localhost\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\n# Cache & Session driver to use\n# Can be 'file', 'database', 'memcached' or 'redis'\nCACHE_DRIVER=file\nSESSION_DRIVER=file\n\n# Session configuration\nSESSION_LIFETIME=120\nSESSION_COOKIE_NAME=bookstack_session\nSESSION_SECURE_COOKIE=false\n\n# Cache key prefix\n# Can be used to prevent conflicts multiple BookStack instances use the same store.\nCACHE_PREFIX=bookstack\n\n# Memcached server configuration\n# If using a UNIX socket path for the host, set the port to 0\n# This follows the following format: HOST:PORT:WEIGHT\n# For multiple servers separate with a comma\nMEMCACHED_SERVERS=127.0.0.1:11211:100\n\n# Redis server configuration\n# This follows the following format: HOST:PORT:DATABASE\n# or, if using a password: HOST:PORT:DATABASE:PASSWORD\n# For multiple servers separate with a comma. These will be clustered.\nREDIS_SERVERS=127.0.0.1:6379:0\n\n# Queue driver to use\n# Can be 'sync', 'database' or 'redis'\nQUEUE_CONNECTION=sync\n\n# Storage system to use\n# Can be 'local', 'local_secure' or 's3'\nSTORAGE_TYPE=local\n\n# Image storage system to use\n# Defaults to the value of STORAGE_TYPE if unset.\n# Accepts the same values as STORAGE_TYPE.\nSTORAGE_IMAGE_TYPE=local\n\n# Attachment storage system to use\n# Defaults to the value of STORAGE_TYPE if unset.\n# Accepts the same values as STORAGE_TYPE although 'local' will be forced to 'local_secure'.\nSTORAGE_ATTACHMENT_TYPE=local_secure\n\n# Amazon S3 storage configuration\nSTORAGE_S3_KEY=your-s3-key\nSTORAGE_S3_SECRET=your-s3-secret\nSTORAGE_S3_BUCKET=s3-bucket-name\nSTORAGE_S3_REGION=s3-bucket-region\n\n# S3 endpoint to use for storage calls\n# Only set this if using a non-Amazon s3-compatible service such as Minio\nSTORAGE_S3_ENDPOINT=https://my-custom-s3-compatible.service.com:8001\n\n# Storage URL prefix\n# Used as a base for any generated image urls.\n# An s3-format URL will be generated if not set.\nSTORAGE_URL=false\n\n# Authentication method to use\n# Can be 'standard', 'ldap', 'saml2' or 'oidc'\nAUTH_METHOD=standard\n\n# Social authentication configuration\n# All disabled by default.\n# Refer to https://www.bookstackapp.com/docs/admin/third-party-auth/\n\nAZURE_APP_ID=false\nAZURE_APP_SECRET=false\nAZURE_TENANT=false\nAZURE_AUTO_REGISTER=false\nAZURE_AUTO_CONFIRM_EMAIL=false\n\nDISCORD_APP_ID=false\nDISCORD_APP_SECRET=false\nDISCORD_AUTO_REGISTER=false\nDISCORD_AUTO_CONFIRM_EMAIL=false\n\nFACEBOOK_APP_ID=false\nFACEBOOK_APP_SECRET=false\nFACEBOOK_AUTO_REGISTER=false\nFACEBOOK_AUTO_CONFIRM_EMAIL=false\n\nGITHUB_APP_ID=false\nGITHUB_APP_SECRET=false\nGITHUB_AUTO_REGISTER=false\nGITHUB_AUTO_CONFIRM_EMAIL=false\n\nGITLAB_APP_ID=false\nGITLAB_APP_SECRET=false\nGITLAB_BASE_URI=false\nGITLAB_AUTO_REGISTER=false\nGITLAB_AUTO_CONFIRM_EMAIL=false\n\nGOOGLE_APP_ID=false\nGOOGLE_APP_SECRET=false\nGOOGLE_SELECT_ACCOUNT=false\nGOOGLE_AUTO_REGISTER=false\nGOOGLE_AUTO_CONFIRM_EMAIL=false\n\nOKTA_BASE_URL=false\nOKTA_APP_ID=false\nOKTA_APP_SECRET=false\nOKTA_AUTO_REGISTER=false\nOKTA_AUTO_CONFIRM_EMAIL=false\n\nSLACK_APP_ID=false\nSLACK_APP_SECRET=false\nSLACK_AUTO_REGISTER=false\nSLACK_AUTO_CONFIRM_EMAIL=false\n\nTWITCH_APP_ID=false\nTWITCH_APP_SECRET=false\nTWITCH_AUTO_REGISTER=false\nTWITCH_AUTO_CONFIRM_EMAIL=false\n\nTWITTER_APP_ID=false\nTWITTER_APP_SECRET=false\nTWITTER_AUTO_REGISTER=false\nTWITTER_AUTO_CONFIRM_EMAIL=false\n\n# LDAP authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/ldap-auth/\nLDAP_SERVER=false\nLDAP_BASE_DN=false\nLDAP_DN=false\nLDAP_PASS=false\nLDAP_USER_FILTER=false\nLDAP_VERSION=false\nLDAP_START_TLS=false\nLDAP_TLS_INSECURE=false\nLDAP_ID_ATTRIBUTE=uid\nLDAP_EMAIL_ATTRIBUTE=mail\nLDAP_DISPLAY_NAME_ATTRIBUTE=cn\nLDAP_THUMBNAIL_ATTRIBUTE=null\nLDAP_FOLLOW_REFERRALS=true\nLDAP_DUMP_USER_DETAILS=false\n\n# LDAP group sync configuration\n# Refer to https://www.bookstackapp.com/docs/admin/ldap-auth/\nLDAP_USER_TO_GROUPS=false\nLDAP_GROUP_ATTRIBUTE=\"memberOf\"\nLDAP_REMOVE_FROM_GROUPS=false\n\n# SAML authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/saml2-auth/\nSAML2_NAME=SSO\nSAML2_EMAIL_ATTRIBUTE=email\nSAML2_DISPLAY_NAME_ATTRIBUTES=username\nSAML2_EXTERNAL_ID_ATTRIBUTE=null\nSAML2_IDP_ENTITYID=null\nSAML2_IDP_SSO=null\nSAML2_IDP_SLO=null\nSAML2_IDP_x509=null\nSAML2_ONELOGIN_OVERRIDES=null\nSAML2_DUMP_USER_DETAILS=false\nSAML2_AUTOLOAD_METADATA=false\nSAML2_IDP_AUTHNCONTEXT=true\nSAML2_SP_x509=null\nSAML2_SP_x509_KEY=null\n\n# SAML group sync configuration\n# Refer to https://www.bookstackapp.com/docs/admin/saml2-auth/\nSAML2_USER_TO_GROUPS=false\nSAML2_GROUP_ATTRIBUTE=group\nSAML2_REMOVE_FROM_GROUPS=false\n\n# OpenID Connect authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/oidc-auth/\nOIDC_NAME=SSO\nOIDC_DISPLAY_NAME_CLAIMS=name\nOIDC_CLIENT_ID=null\nOIDC_CLIENT_SECRET=null\nOIDC_ISSUER=null\nOIDC_ISSUER_DISCOVER=false\nOIDC_PUBLIC_KEY=null\nOIDC_AUTH_ENDPOINT=null\nOIDC_TOKEN_ENDPOINT=null\nOIDC_DUMP_USER_DETAILS=false\n\n# Disable default third-party services such as Gravatar and Draw.IO\n# Service-specific options will override this option\nDISABLE_EXTERNAL_SERVICES=false\n\n# Use custom avatar service, Sets fetch URL\n# Possible placeholders: ${hash} ${size} ${email}\n# If set, Avatars will be fetched regardless of DISABLE_EXTERNAL_SERVICES option.\n# Example: AVATAR_URL=https://seccdn.libravatar.org/avatar/${hash}?s=${size}&d=identicon\nAVATAR_URL=\n\n# Enable diagrams.net integration\n# Can simply be true/false to enable/disable the integration.\n# Alternatively, It can be URL to the diagrams.net instance you want to use.\n# For URLs, The following URL parameters should be included: embed=1&proto=json&spin=1\nDRAWIO=true\n\n# Default item listing view\n# Used for public visitors and user's without a preference.\n# Can be 'list' or 'grid'.\nAPP_VIEWS_BOOKS=list\nAPP_VIEWS_BOOKSHELVES=grid\nAPP_VIEWS_BOOKSHELF=grid\n\n# Use dark mode by default\n# Will be overriden by any user/session preference.\nAPP_DEFAULT_DARK_MODE=false\n\n# Page revision limit\n# Number of page revisions to keep in the system before deleting old revisions.\n# If set to 'false' a limit will not be enforced.\nREVISION_LIMIT=50\n\n# Recycle Bin Lifetime\n# The number of days that content will remain in the recycle bin before\n# being considered for auto-removal. It is not a guarantee that content will\n# be removed after this time.\n# Set to 0 for no recycle bin functionality.\n# Set to -1 for unlimited recycle bin lifetime.\nRECYCLE_BIN_LIFETIME=30\n\n# File Upload Limit\n# Maximum file size, in megabytes, that can be uploaded to the system.\nFILE_UPLOAD_SIZE_LIMIT=50\n\n# Export Page Size\n# Primarily used to determine page size of PDF exports.\n# Can be 'a4' or 'letter'.\nEXPORT_PAGE_SIZE=a4\n\n# Allow <script> tags in page content\n# Note, if set to 'true' the page editor may still escape scripts.\nALLOW_CONTENT_SCRIPTS=false\n\n# Indicate if robots/crawlers should crawl your instance.\n# Can be 'true', 'false' or 'null'.\n# The behaviour of the default 'null' option will depend on the 'app-public' admin setting.\n# Contents of the robots.txt file can be overridden, making this option obsolete.\nALLOW_ROBOTS=null\n\n# Allow server-side fetches to be performed to potentially unknown\n# and user-provided locations. Primarily used in exports when loading\n# in externally referenced assets.\n# Can be 'true' or 'false'.\nALLOW_UNTRUSTED_SERVER_FETCHING=false\n\n# A list of hosts that BookStack can be iframed within.\n# Space separated if multiple. BookStack host domain is auto-inferred.\n# For Example: ALLOWED_IFRAME_HOSTS=\"https://example.com https://a.example.com\"\n# Setting this option will also auto-adjust cookies to be SameSite=None.\nALLOWED_IFRAME_HOSTS=null\n\n# The default and maximum item-counts for listing API requests.\nAPI_DEFAULT_ITEM_COUNT=100\nAPI_MAX_ITEM_COUNT=500\n\n# The number of API requests that can be made per minute by a single user.\nAPI_REQUESTS_PER_MIN=180\n\n# Enable the logging of failed email+password logins with the given message.\n# The default log channel below uses the php 'error_log' function which commonly\n# results in messages being output to the webserver error logs.\n# The message can contain a %u parameter which will be replaced with the login\n# user identifier (Username or email).\nLOG_FAILED_LOGIN_MESSAGE=false\nLOG_FAILED_LOGIN_CHANNEL=errorlog_plain_webserver\n", "<?php\n\n/**\n * Global app configuration options.\n *\n * Changes to these config files are not supported by BookStack and may break upon updates.\n * Configuration should be altered via the `.env` file or environment variables.\n * Do not edit this file unless you're happy to maintain any changes yourself.\n */\n\nreturn [\n\n    // The environment to run BookStack in.\n    // Options: production, development, demo, testing\n    'env' => env('APP_ENV', 'production'),\n\n    // Enter the application in debug mode.\n    // Shows much more verbose error messages. Has potential to show\n    // private configuration variables so should remain disabled in public.\n    'debug' => env('APP_DEBUG', false),\n\n    // The number of revisions to keep in the database.\n    // Once this limit is reached older revisions will be deleted.\n    // If set to false then a limit will not be enforced.\n    'revision_limit' => env('REVISION_LIMIT', 50),\n\n    // The number of days that content will remain in the recycle bin before\n    // being considered for auto-removal. It is not a guarantee that content will\n    // be removed after this time.\n    // Set to 0 for no recycle bin functionality.\n    // Set to -1 for unlimited recycle bin lifetime.\n    'recycle_bin_lifetime' => env('RECYCLE_BIN_LIFETIME', 30),\n\n    // The limit for all uploaded files, including images and attachments in MB.\n    'upload_limit' => env('FILE_UPLOAD_SIZE_LIMIT', 50),\n\n    // Allow <script> tags to entered within page content.\n    // <script> tags are escaped by default.\n    // Even when overridden the WYSIWYG editor may still escape script content.\n    'allow_content_scripts' => env('ALLOW_CONTENT_SCRIPTS', false),\n\n    // Allow server-side fetches to be performed to potentially unknown\n    // and user-provided locations. Primarily used in exports when loading\n    // in externally referenced assets.\n    'allow_untrusted_server_fetching' => env('ALLOW_UNTRUSTED_SERVER_FETCHING', false),\n\n    // Override the default behaviour for allowing crawlers to crawl the instance.\n    // May be ignored if view has be overridden or modified.\n    // Defaults to null since, if not set, 'app-public' status used instead.\n    'allow_robots' => env('ALLOW_ROBOTS', null),\n\n    // Application Base URL, Used by laravel in development commands\n    // and used by BookStack in URL generation.\n    'url' => env('APP_URL', '') === 'http://bookstack.dev' ? '' : env('APP_URL', ''),\n\n    // A list of hosts that BookStack can be iframed within.\n    // Space separated if multiple. BookStack host domain is auto-inferred.\n    'iframe_hosts' => env('ALLOWED_IFRAME_HOSTS', null),\n\n    // Application timezone for back-end date functions.\n    'timezone' => env('APP_TIMEZONE', 'UTC'),\n\n    // Default locale to use\n    'locale' => env('APP_LANG', 'en'),\n\n    // Locales available\n    'locales' => ['en', 'ar', 'bg', 'bs', 'ca', 'cs', 'da', 'de', 'de_informal', 'es', 'es_AR', 'et', 'fa', 'fr', 'he', 'hr', 'hu', 'id', 'it', 'ja', 'ko', 'lt', 'lv', 'nl', 'nb', 'pt', 'pt_BR', 'sk', 'sl', 'sv', 'pl',  'ru', 'th', 'tr', 'uk', 'vi', 'zh_CN', 'zh_TW'],\n\n    //  Application Fallback Locale\n    'fallback_locale' => 'en',\n\n    // Faker Locale\n    'faker_locale' => 'en_GB',\n\n    // Enable right-to-left text control.\n    'rtl' => false,\n\n    // Auto-detect the locale for public users\n    // For public users their locale can be guessed by headers sent by their\n    // browser. This is usually set by users in their browser settings.\n    // If not found the default app locale will be used.\n    'auto_detect_locale' => env('APP_AUTO_LANG_PUBLIC', true),\n\n    // Encryption key\n    'key' => env('APP_KEY', 'AbAZchsay4uBTU33RubBzLKw203yqSqr'),\n\n    // Encryption cipher\n    'cipher' => 'AES-256-CBC',\n\n    // Application Services Provides\n    'providers' => [\n\n        // Laravel Framework Service Providers...\n        Illuminate\\Auth\\AuthServiceProvider::class,\n        Illuminate\\Broadcasting\\BroadcastServiceProvider::class,\n        Illuminate\\Bus\\BusServiceProvider::class,\n        Illuminate\\Cache\\CacheServiceProvider::class,\n        Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider::class,\n        Illuminate\\Cookie\\CookieServiceProvider::class,\n        Illuminate\\Database\\DatabaseServiceProvider::class,\n        Illuminate\\Encryption\\EncryptionServiceProvider::class,\n        Illuminate\\Filesystem\\FilesystemServiceProvider::class,\n        Illuminate\\Foundation\\Providers\\FoundationServiceProvider::class,\n        Illuminate\\Hashing\\HashServiceProvider::class,\n        Illuminate\\Mail\\MailServiceProvider::class,\n        Illuminate\\Pipeline\\PipelineServiceProvider::class,\n        Illuminate\\Queue\\QueueServiceProvider::class,\n        Illuminate\\Redis\\RedisServiceProvider::class,\n        Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider::class,\n        Illuminate\\Session\\SessionServiceProvider::class,\n        Illuminate\\Validation\\ValidationServiceProvider::class,\n        Illuminate\\View\\ViewServiceProvider::class,\n        Illuminate\\Notifications\\NotificationServiceProvider::class,\n        SocialiteProviders\\Manager\\ServiceProvider::class,\n\n        // Third party service providers\n        Intervention\\Image\\ImageServiceProvider::class,\n        Barryvdh\\DomPDF\\ServiceProvider::class,\n        Barryvdh\\Snappy\\ServiceProvider::class,\n\n        // BookStack replacement service providers (Extends Laravel)\n        BookStack\\Providers\\PaginationServiceProvider::class,\n        BookStack\\Providers\\TranslationServiceProvider::class,\n\n        // BookStack custom service providers\n        BookStack\\Providers\\ThemeServiceProvider::class,\n        BookStack\\Providers\\AuthServiceProvider::class,\n        BookStack\\Providers\\AppServiceProvider::class,\n        BookStack\\Providers\\BroadcastServiceProvider::class,\n        BookStack\\Providers\\EventServiceProvider::class,\n        BookStack\\Providers\\RouteServiceProvider::class,\n        BookStack\\Providers\\CustomFacadeProvider::class,\n        BookStack\\Providers\\CustomValidationServiceProvider::class,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Class Aliases\n    |--------------------------------------------------------------------------\n    |\n    | This array of class aliases will be registered when this application\n    | is started. However, feel free to register as many as you wish as\n    | the aliases are \"lazy\" loaded so they don't hinder performance.\n    |\n    */\n\n    // Class aliases, Registered on application start\n    'aliases' => [\n        // Laravel\n        'App'          => Illuminate\\Support\\Facades\\App::class,\n        'Arr'          => Illuminate\\Support\\Arr::class,\n        'Artisan'      => Illuminate\\Support\\Facades\\Artisan::class,\n        'Auth'         => Illuminate\\Support\\Facades\\Auth::class,\n        'Blade'        => Illuminate\\Support\\Facades\\Blade::class,\n        'Bus'          => Illuminate\\Support\\Facades\\Bus::class,\n        'Cache'        => Illuminate\\Support\\Facades\\Cache::class,\n        'Config'       => Illuminate\\Support\\Facades\\Config::class,\n        'Cookie'       => Illuminate\\Support\\Facades\\Cookie::class,\n        'Crypt'        => Illuminate\\Support\\Facades\\Crypt::class,\n        'Date'         => Illuminate\\Support\\Facades\\Date::class,\n        'DB'           => Illuminate\\Support\\Facades\\DB::class,\n        'Eloquent'     => Illuminate\\Database\\Eloquent\\Model::class,\n        'Event'        => Illuminate\\Support\\Facades\\Event::class,\n        'File'         => Illuminate\\Support\\Facades\\File::class,\n        'Gate'         => Illuminate\\Support\\Facades\\Gate::class,\n        'Hash'         => Illuminate\\Support\\Facades\\Hash::class,\n        'Http'         => Illuminate\\Support\\Facades\\Http::class,\n        'Lang'         => Illuminate\\Support\\Facades\\Lang::class,\n        'Log'          => Illuminate\\Support\\Facades\\Log::class,\n        'Mail'         => Illuminate\\Support\\Facades\\Mail::class,\n        'Notification' => Illuminate\\Support\\Facades\\Notification::class,\n        'Password'     => Illuminate\\Support\\Facades\\Password::class,\n        'Queue'        => Illuminate\\Support\\Facades\\Queue::class,\n        'RateLimiter'  => Illuminate\\Support\\Facades\\RateLimiter::class,\n        'Redirect'     => Illuminate\\Support\\Facades\\Redirect::class,\n        // 'Redis'        => Illuminate\\Support\\Facades\\Redis::class,\n        'Request'      => Illuminate\\Support\\Facades\\Request::class,\n        'Response'     => Illuminate\\Support\\Facades\\Response::class,\n        'Route'        => Illuminate\\Support\\Facades\\Route::class,\n        'Schema'       => Illuminate\\Support\\Facades\\Schema::class,\n        'Session'      => Illuminate\\Support\\Facades\\Session::class,\n        'Storage'      => Illuminate\\Support\\Facades\\Storage::class,\n        'Str'          => Illuminate\\Support\\Str::class,\n        'URL'          => Illuminate\\Support\\Facades\\URL::class,\n        'Validator'    => Illuminate\\Support\\Facades\\Validator::class,\n        'View'         => Illuminate\\Support\\Facades\\View::class,\n\n        // Laravel Packages\n        'Socialite'    => Laravel\\Socialite\\Facades\\Socialite::class,\n\n        // Third Party\n        'ImageTool' => Intervention\\Image\\Facades\\Image::class,\n        'DomPDF'    => Barryvdh\\DomPDF\\Facade::class,\n        'SnappyPDF' => Barryvdh\\Snappy\\Facades\\SnappyPdf::class,\n\n        // Custom BookStack\n        'Activity'    => BookStack\\Facades\\Activity::class,\n        'Permissions' => BookStack\\Facades\\Permissions::class,\n        'Theme'       => BookStack\\Facades\\Theme::class,\n    ],\n\n    // Proxy configuration\n    'proxies' => env('APP_PROXIES', ''),\n\n];\n", "<?php\n\nnamespace BookStack\\Entities\\Tools;\n\nuse BookStack\\Entities\\Models\\Book;\nuse BookStack\\Entities\\Models\\Chapter;\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Entities\\Tools\\Markdown\\HtmlToMarkdown;\nuse BookStack\\Uploads\\ImageService;\nuse DOMDocument;\nuse DOMElement;\nuse DOMXPath;\nuse Exception;\nuse Throwable;\n\nclass ExportFormatter\n{\n    protected $imageService;\n    protected $pdfGenerator;\n\n    /**\n     * ExportService constructor.\n     */\n    public function __construct(ImageService $imageService, PdfGenerator $pdfGenerator)\n    {\n        $this->imageService = $imageService;\n        $this->pdfGenerator = $pdfGenerator;\n    }\n\n    /**\n     * Convert a page to a self-contained HTML file.\n     * Includes required CSS & image content. Images are base64 encoded into the HTML.\n     *\n     * @throws Throwable\n     */\n    public function pageToContainedHtml(Page $page)\n    {\n        $page->html = (new PageContent($page))->render();\n        $pageHtml = view('pages.export', [\n            'page'   => $page,\n            'format' => 'html',\n        ])->render();\n\n        return $this->containHtml($pageHtml);\n    }\n\n    /**\n     * Convert a chapter to a self-contained HTML file.\n     *\n     * @throws Throwable\n     */\n    public function chapterToContainedHtml(Chapter $chapter)\n    {\n        $pages = $chapter->getVisiblePages();\n        $pages->each(function ($page) {\n            $page->html = (new PageContent($page))->render();\n        });\n        $html = view('chapters.export', [\n            'chapter' => $chapter,\n            'pages'   => $pages,\n            'format'  => 'html',\n        ])->render();\n\n        return $this->containHtml($html);\n    }\n\n    /**\n     * Convert a book to a self-contained HTML file.\n     *\n     * @throws Throwable\n     */\n    public function bookToContainedHtml(Book $book)\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $html = view('books.export', [\n            'book'         => $book,\n            'bookChildren' => $bookTree,\n            'format'       => 'html',\n        ])->render();\n\n        return $this->containHtml($html);\n    }\n\n    /**\n     * Convert a page to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function pageToPdf(Page $page)\n    {\n        $page->html = (new PageContent($page))->render();\n        $html = view('pages.export', [\n            'page'   => $page,\n            'format' => 'pdf',\n            'engine' => $this->pdfGenerator->getActiveEngine(),\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert a chapter to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function chapterToPdf(Chapter $chapter)\n    {\n        $pages = $chapter->getVisiblePages();\n        $pages->each(function ($page) {\n            $page->html = (new PageContent($page))->render();\n        });\n\n        $html = view('chapters.export', [\n            'chapter' => $chapter,\n            'pages'   => $pages,\n            'format'  => 'pdf',\n            'engine'  => $this->pdfGenerator->getActiveEngine(),\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert a book to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function bookToPdf(Book $book)\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $html = view('books.export', [\n            'book'         => $book,\n            'bookChildren' => $bookTree,\n            'format'       => 'pdf',\n            'engine'       => $this->pdfGenerator->getActiveEngine(),\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert normal web-page HTML to a PDF.\n     *\n     * @throws Exception\n     */\n    protected function htmlToPdf(string $html): string\n    {\n        $html = $this->containHtml($html);\n        $html = $this->replaceIframesWithLinks($html);\n        $html = $this->openDetailElements($html);\n\n        return $this->pdfGenerator->fromHtml($html);\n    }\n\n    /**\n     * Within the given HTML content, Open any detail blocks.\n     */\n    protected function openDetailElements(string $html): string\n    {\n        libxml_use_internal_errors(true);\n\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n\n        $details = $xPath->query('//details');\n        /** @var DOMElement $detail */\n        foreach ($details as $detail) {\n            $detail->setAttribute('open', 'open');\n        }\n\n        return $doc->saveHTML();\n    }\n\n    /**\n     * Within the given HTML content, replace any iframe elements\n     * with anchor links within paragraph blocks.\n     */\n    protected function replaceIframesWithLinks(string $html): string\n    {\n        libxml_use_internal_errors(true);\n\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n\n        $iframes = $xPath->query('//iframe');\n        /** @var DOMElement $iframe */\n        foreach ($iframes as $iframe) {\n            $link = $iframe->getAttribute('src');\n            if (strpos($link, '//') === 0) {\n                $link = 'https:' . $link;\n            }\n\n            $anchor = $doc->createElement('a', $link);\n            $anchor->setAttribute('href', $link);\n            $paragraph = $doc->createElement('p');\n            $paragraph->appendChild($anchor);\n            $iframe->parentNode->replaceChild($paragraph, $iframe);\n        }\n\n        return $doc->saveHTML();\n    }\n\n    /**\n     * Bundle of the contents of a html file to be self-contained.\n     *\n     * @throws Exception\n     */\n    protected function containHtml(string $htmlContent): string\n    {\n        $imageTagsOutput = [];\n        preg_match_all(\"/\\<img.*?src\\=(\\'|\\\")(.*?)(\\'|\\\").*?\\>/i\", $htmlContent, $imageTagsOutput);\n\n        // Replace image src with base64 encoded image strings\n        if (isset($imageTagsOutput[0]) && count($imageTagsOutput[0]) > 0) {\n            foreach ($imageTagsOutput[0] as $index => $imgMatch) {\n                $oldImgTagString = $imgMatch;\n                $srcString = $imageTagsOutput[2][$index];\n                $imageEncoded = $this->imageService->imageUriToBase64($srcString);\n                if ($imageEncoded === null) {\n                    $imageEncoded = $srcString;\n                }\n                $newImgTagString = str_replace($srcString, $imageEncoded, $oldImgTagString);\n                $htmlContent = str_replace($oldImgTagString, $newImgTagString, $htmlContent);\n            }\n        }\n\n        $linksOutput = [];\n        preg_match_all(\"/\\<a.*href\\=(\\'|\\\")(.*?)(\\'|\\\").*?\\>/i\", $htmlContent, $linksOutput);\n\n        // Replace image src with base64 encoded image strings\n        if (isset($linksOutput[0]) && count($linksOutput[0]) > 0) {\n            foreach ($linksOutput[0] as $index => $linkMatch) {\n                $oldLinkString = $linkMatch;\n                $srcString = $linksOutput[2][$index];\n                if (strpos(trim($srcString), 'http') !== 0) {\n                    $newSrcString = url($srcString);\n                    $newLinkString = str_replace($srcString, $newSrcString, $oldLinkString);\n                    $htmlContent = str_replace($oldLinkString, $newLinkString, $htmlContent);\n                }\n            }\n        }\n\n        // Replace any relative links with system domain\n        return $htmlContent;\n    }\n\n    /**\n     * Converts the page contents into simple plain text.\n     * This method filters any bad looking content to provide a nice final output.\n     */\n    public function pageToPlainText(Page $page): string\n    {\n        $html = (new PageContent($page))->render();\n        $text = strip_tags($html);\n        // Replace multiple spaces with single spaces\n        $text = preg_replace('/\\ {2,}/', ' ', $text);\n        // Reduce multiple horrid whitespace characters.\n        $text = preg_replace('/(\\x0A|\\xA0|\\x0A|\\r|\\n){2,}/su', \"\\n\\n\", $text);\n        $text = html_entity_decode($text);\n        // Add title\n        $text = $page->name . \"\\n\\n\" . $text;\n\n        return $text;\n    }\n\n    /**\n     * Convert a chapter into a plain text string.\n     */\n    public function chapterToPlainText(Chapter $chapter): string\n    {\n        $text = $chapter->name . \"\\n\\n\";\n        $text .= $chapter->description . \"\\n\\n\";\n        foreach ($chapter->getVisiblePages() as $page) {\n            $text .= $this->pageToPlainText($page);\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a book into a plain text string.\n     */\n    public function bookToPlainText(Book $book): string\n    {\n        $bookTree = (new BookContents($book))->getTree(false, false);\n        $text = $book->name . \"\\n\\n\";\n        foreach ($bookTree as $bookChild) {\n            if ($bookChild->isA('chapter')) {\n                $text .= $this->chapterToPlainText($bookChild);\n            } else {\n                $text .= $this->pageToPlainText($bookChild);\n            }\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a page to a Markdown file.\n     */\n    public function pageToMarkdown(Page $page): string\n    {\n        if ($page->markdown) {\n            return '# ' . $page->name . \"\\n\\n\" . $page->markdown;\n        }\n\n        return '# ' . $page->name . \"\\n\\n\" . (new HtmlToMarkdown($page->html))->convert();\n    }\n\n    /**\n     * Convert a chapter to a Markdown file.\n     */\n    public function chapterToMarkdown(Chapter $chapter): string\n    {\n        $text = '# ' . $chapter->name . \"\\n\\n\";\n        $text .= $chapter->description . \"\\n\\n\";\n        foreach ($chapter->pages as $page) {\n            $text .= $this->pageToMarkdown($page) . \"\\n\\n\";\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a book into a plain text string.\n     */\n    public function bookToMarkdown(Book $book): string\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $text = '# ' . $book->name . \"\\n\\n\";\n        foreach ($bookTree as $bookChild) {\n            if ($bookChild instanceof Chapter) {\n                $text .= $this->chapterToMarkdown($bookChild);\n            } else {\n                $text .= $this->pageToMarkdown($bookChild);\n            }\n        }\n\n        return $text;\n    }\n}\n", "<?php\n\nnamespace BookStack\\Http\\Middleware;\n\nuse BookStack\\Util\\CspService;\nuse Closure;\nuse Illuminate\\Http\\Request;\n\nclass ApplyCspRules\n{\n    /**\n     * @var CspService\n     */\n    protected $cspService;\n\n    public function __construct(CspService $cspService)\n    {\n        $this->cspService = $cspService;\n    }\n\n    /**\n     * Handle an incoming request.\n     *\n     * @param Request $request\n     * @param Closure $next\n     *\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        view()->share('cspNonce', $this->cspService->getNonce());\n        if ($this->cspService->allowedIFrameHostsConfigured()) {\n            config()->set('session.same_site', 'none');\n        }\n\n        $response = $next($request);\n\n        $this->cspService->setFrameAncestors($response);\n        $this->cspService->setScriptSrc($response);\n        $this->cspService->setObjectSrc($response);\n        $this->cspService->setBaseUri($response);\n\n        return $response;\n    }\n}\n", "<?php\n\nnamespace BookStack\\Util;\n\nuse Illuminate\\Support\\Str;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass CspService\n{\n    /** @var string */\n    protected $nonce;\n\n    public function __construct(string $nonce = '')\n    {\n        $this->nonce = $nonce ?: Str::random(24);\n    }\n\n    /**\n     * Get the nonce value for CSP.\n     */\n    public function getNonce(): string\n    {\n        return $this->nonce;\n    }\n\n    /**\n     * Sets CSP 'script-src' headers to restrict the forms of script that can\n     * run on the page.\n     */\n    public function setScriptSrc(Response $response)\n    {\n        if (config('app.allow_content_scripts')) {\n            return;\n        }\n\n        $parts = [\n            'http:',\n            'https:',\n            '\\'nonce-' . $this->nonce . '\\'',\n            '\\'strict-dynamic\\'',\n        ];\n\n        $value = 'script-src ' . implode(' ', $parts);\n        $response->headers->set('Content-Security-Policy', $value, false);\n    }\n\n    /**\n     * Sets CSP \"frame-ancestors\" headers to restrict the hosts that BookStack can be\n     * iframed within. Also adjusts the cookie samesite options so that cookies will\n     * operate in the third-party context.\n     */\n    public function setFrameAncestors(Response $response)\n    {\n        $iframeHosts = $this->getAllowedIframeHosts();\n        array_unshift($iframeHosts, \"'self'\");\n        $cspValue = 'frame-ancestors ' . implode(' ', $iframeHosts);\n        $response->headers->set('Content-Security-Policy', $cspValue, false);\n    }\n\n    /**\n     * Check if the user has configured some allowed iframe hosts.\n     */\n    public function allowedIFrameHostsConfigured(): bool\n    {\n        return count($this->getAllowedIframeHosts()) > 0;\n    }\n\n    /**\n     * Sets CSP 'object-src' headers to restrict the types of dynamic content\n     * that can be embedded on the page.\n     */\n    public function setObjectSrc(Response $response)\n    {\n        if (config('app.allow_content_scripts')) {\n            return;\n        }\n\n        $response->headers->set('Content-Security-Policy', 'object-src \\'self\\'', false);\n    }\n\n    /**\n     * Sets CSP 'base-uri' headers to restrict what base tags can be set on\n     * the page to prevent manipulation of relative links.\n     */\n    public function setBaseUri(Response $response)\n    {\n        $response->headers->set('Content-Security-Policy', 'base-uri \\'self\\'', false);\n    }\n\n    protected function getAllowedIframeHosts(): array\n    {\n        $hosts = config('app.iframe_hosts', '');\n\n        return array_filter(explode(' ', $hosts));\n    }\n}\n", "<!doctype html>\n<html lang=\"{{ config('app.lang') }}\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>@yield('title')</title>\n\n    @include('common.export-styles', ['format' => $format, 'engine' => $engine ?? ''])\n    @include('common.export-custom-head')\n</head>\n<body>\n<div class=\"page-content\">\n    @yield('content')\n</div>\n</body>\n</html>", "<?php\n\nnamespace Tests\\Entity;\n\nuse BookStack\\Auth\\Role;\nuse BookStack\\Entities\\Models\\Book;\nuse BookStack\\Entities\\Models\\Chapter;\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Entities\\Tools\\PdfGenerator;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Str;\nuse Tests\\TestCase;\n\nclass ExportTest extends TestCase\n{\n    public function test_page_text_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.txt\"');\n    }\n\n    public function test_page_pdf_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.pdf\"');\n    }\n\n    public function test_page_html_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.html\"');\n    }\n\n    public function test_book_text_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($book->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.txt\"');\n    }\n\n    public function test_book_pdf_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.pdf\"');\n    }\n\n    public function test_book_html_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($book->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.html\"');\n    }\n\n    public function test_book_html_export_shows_chapter_descriptions()\n    {\n        $chapterDesc = 'My custom test chapter description ' . Str::random(12);\n        $chapter = Chapter::query()->first();\n        $chapter->description = $chapterDesc;\n        $chapter->save();\n\n        $book = $chapter->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/html'));\n        $resp->assertSee($chapterDesc);\n    }\n\n    public function test_chapter_text_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages[0];\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($chapter->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.txt\"');\n    }\n\n    public function test_chapter_pdf_export()\n    {\n        $chapter = Chapter::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.pdf\"');\n    }\n\n    public function test_chapter_html_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages[0];\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($chapter->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.html\"');\n    }\n\n    public function test_page_html_export_contains_custom_head_if_set()\n    {\n        $page = Page::query()->first();\n\n        $customHeadContent = '<style>p{color: red;}</style>';\n        $this->setSettings(['app-custom-head' => $customHeadContent]);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee($customHeadContent, false);\n    }\n\n    public function test_page_html_export_does_not_break_with_only_comments_in_custom_head()\n    {\n        $page = Page::query()->first();\n\n        $customHeadContent = '<!-- A comment -->';\n        $this->setSettings(['app-custom-head' => $customHeadContent]);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($customHeadContent, false);\n    }\n\n    public function test_page_html_export_use_absolute_dates()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee($page->created_at->formatLocalized('%e %B %Y %H:%M:%S'));\n        $resp->assertDontSee($page->created_at->diffForHumans());\n        $resp->assertSee($page->updated_at->formatLocalized('%e %B %Y %H:%M:%S'));\n        $resp->assertDontSee($page->updated_at->diffForHumans());\n    }\n\n    public function test_page_export_does_not_include_user_or_revision_links()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertDontSee($page->getUrl('/revisions'));\n        $resp->assertDontSee($page->createdBy->getProfileUrl());\n        $resp->assertSee($page->createdBy->name);\n    }\n\n    public function test_page_export_sets_right_data_type_for_svg_embeds()\n    {\n        $page = Page::query()->first();\n        Storage::disk('local')->makeDirectory('uploads/images/gallery');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test.svg', '<svg></svg>');\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\">';\n        $page->save();\n\n        $this->asEditor();\n        $resp = $this->get($page->getUrl('/export/html'));\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test.svg');\n\n        $resp->assertStatus(200);\n        $resp->assertSee('<img src=\"data:image/svg+xml;base64', false);\n    }\n\n    public function test_page_image_containment_works_on_multiple_images_within_a_single_line()\n    {\n        $page = Page::query()->first();\n        Storage::disk('local')->makeDirectory('uploads/images/gallery');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test.svg', '<svg></svg>');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test2.svg', '<svg></svg>');\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\" class=\"a\"><img src=\"http://localhost/uploads/images/gallery/svg_test2.svg\" class=\"b\">';\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test.svg');\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test2.svg');\n\n        $resp->assertDontSee('http://localhost/uploads/images/gallery/svg_test');\n    }\n\n    public function test_page_export_contained_html_image_fetches_only_run_when_url_points_to_image_upload_folder()\n    {\n        $page = Page::query()->first();\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\"/>'\n            . '<img src=\"http://localhost/uploads/svg_test.svg\"/>'\n            . '<img src=\"/uploads/svg_test.svg\"/>';\n        $storageDisk = Storage::disk('local');\n        $storageDisk->makeDirectory('uploads/images/gallery');\n        $storageDisk->put('uploads/images/gallery/svg_test.svg', '<svg>good</svg>');\n        $storageDisk->put('uploads/svg_test.svg', '<svg>bad</svg>');\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n\n        $storageDisk->delete('uploads/images/gallery/svg_test.svg');\n        $storageDisk->delete('uploads/svg_test.svg');\n\n        $resp->assertDontSee('http://localhost/uploads/images/gallery/svg_test.svg', false);\n        $resp->assertSee('http://localhost/uploads/svg_test.svg');\n        $resp->assertSee('src=\"/uploads/svg_test.svg\"', false);\n    }\n\n    public function test_page_export_contained_html_does_not_allow_upward_traversal_with_local()\n    {\n        $contents = file_get_contents(public_path('.htaccess'));\n        config()->set('filesystems.images', 'local');\n\n        $page = Page::query()->first();\n        $page->html = '<img src=\"http://localhost/uploads/images/../../.htaccess\"/>';\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertDontSee(base64_encode($contents));\n    }\n\n    public function test_page_export_contained_html_does_not_allow_upward_traversal_with_local_secure()\n    {\n        $testFilePath = storage_path('logs/test.txt');\n        config()->set('filesystems.images', 'local_secure');\n        file_put_contents($testFilePath, 'I am a cat');\n\n        $page = Page::query()->first();\n        $page->html = '<img src=\"http://localhost/uploads/images/../../logs/test.txt\"/>';\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertDontSee(base64_encode('I am a cat'));\n        unlink($testFilePath);\n    }\n\n    public function test_exports_removes_scripts_from_custom_head()\n    {\n        $entities = [\n            Page::query()->first(), Chapter::query()->first(), Book::query()->first(),\n        ];\n        setting()->put('app-custom-head', '<script>window.donkey = \"cat\";</script><style>.my-test-class { color: red; }</style>');\n\n        foreach ($entities as $entity) {\n            $resp = $this->asEditor()->get($entity->getUrl('/export/html'));\n            $resp->assertDontSee('window.donkey');\n            $resp->assertDontSee('script');\n            $resp->assertSee('.my-test-class { color: red; }');\n        }\n    }\n\n    public function test_page_export_with_deleted_creator_and_updater()\n    {\n        $user = $this->getViewer(['name' => 'ExportWizardTheFifth']);\n        $page = Page::query()->first();\n        $page->created_by = $user->id;\n        $page->updated_by = $user->id;\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee('ExportWizardTheFifth');\n\n        $user->delete();\n        $resp = $this->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertDontSee('ExportWizardTheFifth');\n    }\n\n    public function test_page_pdf_export_converts_iframes_to_links()\n    {\n        $page = Page::query()->first()->forceFill([\n            'html'     => '<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/ShqUjt33uOs\"></iframe>',\n        ]);\n        $page->save();\n\n        $pdfHtml = '';\n        $mockPdfGenerator = $this->mock(PdfGenerator::class);\n        $mockPdfGenerator->shouldReceive('fromHtml')\n            ->with(\\Mockery::capture($pdfHtml))\n            ->andReturn('');\n        $mockPdfGenerator->shouldReceive('getActiveEngine')->andReturn(PdfGenerator::ENGINE_DOMPDF);\n\n        $this->asEditor()->get($page->getUrl('/export/pdf'));\n        $this->assertStringNotContainsString('iframe>', $pdfHtml);\n        $this->assertStringContainsString('<p><a href=\"https://www.youtube.com/embed/ShqUjt33uOs\">https://www.youtube.com/embed/ShqUjt33uOs</a></p>', $pdfHtml);\n    }\n\n    public function test_page_pdf_export_opens_details_blocks()\n    {\n        $page = Page::query()->first()->forceFill([\n            'html'     => '<details><summary>Hello</summary><p>Content!</p></details>',\n        ]);\n        $page->save();\n\n        $pdfHtml = '';\n        $mockPdfGenerator = $this->mock(PdfGenerator::class);\n        $mockPdfGenerator->shouldReceive('fromHtml')\n            ->with(\\Mockery::capture($pdfHtml))\n            ->andReturn('');\n        $mockPdfGenerator->shouldReceive('getActiveEngine')->andReturn(PdfGenerator::ENGINE_DOMPDF);\n\n        $this->asEditor()->get($page->getUrl('/export/pdf'));\n        $this->assertStringContainsString('<details open=\"open\"', $pdfHtml);\n    }\n\n    public function test_page_markdown_export()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.md\"');\n    }\n\n    public function test_page_markdown_export_uses_existing_markdown_if_apparent()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '# A header',\n            'html'     => '<h1>Dogcat</h1>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee('A header');\n        $resp->assertDontSee('Dogcat');\n    }\n\n    public function test_page_markdown_export_converts_html_where_no_markdown()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1><p>Some <strong>bold</strong> text</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\nSome **bold** text\");\n    }\n\n    public function test_page_markdown_export_does_not_convert_callouts()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1><p class=\"callout info\">Some callout text</p><p>Another line</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\n<p class=\\\"callout info\\\">Some callout text</p>\\n\\nAnother line\", false);\n    }\n\n    public function test_page_markdown_export_handles_bookstacks_wysiwyg_codeblock_format()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1>' . \"\\r\\n\" . '<pre id=\"bkmrk-var-a-%3D-%27cat%27%3B\"><code class=\"language-JavaScript\">var a = \\'cat\\';</code></pre><p>Another line</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\n```JavaScript\\nvar a = 'cat';\\n```\\n\\nAnother line\", false);\n    }\n\n    public function test_chapter_markdown_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages()->first();\n        $resp = $this->asEditor()->get($chapter->getUrl('/export/markdown'));\n\n        $resp->assertSee('# ' . $chapter->name);\n        $resp->assertSee('# ' . $page->name);\n    }\n\n    public function test_book_markdown_export()\n    {\n        $book = Book::query()->whereHas('pages')->whereHas('chapters')->first();\n        $chapter = $book->chapters()->first();\n        $page = $chapter->pages()->first();\n        $resp = $this->asEditor()->get($book->getUrl('/export/markdown'));\n\n        $resp->assertSee('# ' . $book->name);\n        $resp->assertSee('# ' . $chapter->name);\n        $resp->assertSee('# ' . $page->name);\n    }\n\n    public function test_export_option_only_visible_and_accessible_with_permission()\n    {\n        $book = Book::query()->whereHas('pages')->whereHas('chapters')->first();\n        $chapter = $book->chapters()->first();\n        $page = $chapter->pages()->first();\n        $entities = [$book, $chapter, $page];\n        $user = $this->getViewer();\n        $this->actingAs($user);\n\n        foreach ($entities as $entity) {\n            $resp = $this->get($entity->getUrl());\n            $resp->assertSee('/export/pdf');\n        }\n\n        /** @var Role $role */\n        $this->removePermissionFromUser($user, 'content-export');\n\n        foreach ($entities as $entity) {\n            $resp = $this->get($entity->getUrl());\n            $resp->assertDontSee('/export/pdf');\n            $resp = $this->get($entity->getUrl('/export/pdf'));\n            $this->assertPermissionError($resp);\n        }\n    }\n\n    public function test_wkhtmltopdf_only_used_when_allow_untrusted_is_true()\n    {\n        /** @var Page $page */\n        $page = Page::query()->first();\n\n        config()->set('snappy.pdf.binary', '/abc123');\n        config()->set('app.allow_untrusted_server_fetching', false);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(200); // Sucessful response with invalid snappy binary indicates dompdf usage.\n\n        config()->set('app.allow_untrusted_server_fetching', true);\n        $resp = $this->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(500); // Bad response indicates wkhtml usage\n    }\n}\n", "<?php\n\nnamespace Tests;\n\nuse BookStack\\Util\\CspService;\n\nclass SecurityHeaderTest extends TestCase\n{\n    public function test_cookies_samesite_lax_by_default()\n    {\n        $resp = $this->get('/');\n        foreach ($resp->headers->getCookies() as $cookie) {\n            $this->assertEquals('lax', $cookie->getSameSite());\n        }\n    }\n\n    public function test_cookies_samesite_none_when_iframe_hosts_set()\n    {\n        $this->runWithEnv('ALLOWED_IFRAME_HOSTS', 'http://example.com', function () {\n            $resp = $this->get('/');\n            foreach ($resp->headers->getCookies() as $cookie) {\n                $this->assertEquals('none', $cookie->getSameSite());\n            }\n        });\n    }\n\n    public function test_secure_cookies_controlled_by_app_url()\n    {\n        $this->runWithEnv('APP_URL', 'http://example.com', function () {\n            $resp = $this->get('/');\n            foreach ($resp->headers->getCookies() as $cookie) {\n                $this->assertFalse($cookie->isSecure());\n            }\n        });\n\n        $this->runWithEnv('APP_URL', 'https://example.com', function () {\n            $resp = $this->get('/');\n            foreach ($resp->headers->getCookies() as $cookie) {\n                $this->assertTrue($cookie->isSecure());\n            }\n        });\n    }\n\n    public function test_iframe_csp_self_only_by_default()\n    {\n        $resp = $this->get('/');\n        $frameHeader = $this->getCspHeader($resp, 'frame-ancestors');\n\n        $this->assertEquals('frame-ancestors \\'self\\'', $frameHeader);\n    }\n\n    public function test_iframe_csp_includes_extra_hosts_if_configured()\n    {\n        $this->runWithEnv('ALLOWED_IFRAME_HOSTS', 'https://a.example.com https://b.example.com', function () {\n            $resp = $this->get('/');\n            $frameHeader = $this->getCspHeader($resp, 'frame-ancestors');\n\n            $this->assertNotEmpty($frameHeader);\n            $this->assertEquals('frame-ancestors \\'self\\' https://a.example.com https://b.example.com', $frameHeader);\n        });\n    }\n\n    public function test_script_csp_set_on_responses()\n    {\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'script-src');\n        $this->assertStringContainsString('\\'strict-dynamic\\'', $scriptHeader);\n        $this->assertStringContainsString('\\'nonce-', $scriptHeader);\n    }\n\n    public function test_script_csp_nonce_matches_nonce_used_in_custom_head()\n    {\n        $this->setSettings(['app-custom-head' => '<script>console.log(\"cat\");</script>']);\n        $resp = $this->get('/login');\n        $scriptHeader = $this->getCspHeader($resp, 'script-src');\n\n        $nonce = app()->make(CspService::class)->getNonce();\n        $this->assertStringContainsString('nonce-' . $nonce, $scriptHeader);\n        $resp->assertSee('<script nonce=\"' . $nonce . '\">console.log(\"cat\");</script>', false);\n    }\n\n    public function test_script_csp_nonce_changes_per_request()\n    {\n        $resp = $this->get('/');\n        $firstHeader = $this->getCspHeader($resp, 'script-src');\n\n        $this->refreshApplication();\n\n        $resp = $this->get('/');\n        $secondHeader = $this->getCspHeader($resp, 'script-src');\n\n        $this->assertNotEquals($firstHeader, $secondHeader);\n    }\n\n    public function test_allow_content_scripts_settings_controls_csp_script_headers()\n    {\n        config()->set('app.allow_content_scripts', true);\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'script-src');\n        $this->assertEmpty($scriptHeader);\n\n        config()->set('app.allow_content_scripts', false);\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'script-src');\n        $this->assertNotEmpty($scriptHeader);\n    }\n\n    public function test_object_src_csp_header_set()\n    {\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'object-src');\n        $this->assertEquals('object-src \\'self\\'', $scriptHeader);\n    }\n\n    public function test_base_uri_csp_header_set()\n    {\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'base-uri');\n        $this->assertEquals('base-uri \\'self\\'', $scriptHeader);\n    }\n\n    public function test_cache_control_headers_are_strict_on_responses_when_logged_in()\n    {\n        $this->asEditor();\n        $resp = $this->get('/');\n        $resp->assertHeader('Cache-Control', 'max-age=0, no-store, private');\n        $resp->assertHeader('Pragma', 'no-cache');\n        $resp->assertHeader('Expires', 'Sun, 12 Jul 2015 19:01:00 GMT');\n    }\n\n    /**\n     * Get the value of the first CSP header of the given type.\n     */\n    protected function getCspHeader(TestResponse $resp, string $type): string\n    {\n        $cspHeaders = collect($resp->headers->all('Content-Security-Policy'));\n\n        return $cspHeaders->filter(function ($val) use ($type) {\n            return strpos($val, $type) === 0;\n        })->first() ?? '';\n    }\n}\n"], "fixing_code": ["# Full list of environment variables that can be used with BookStack.\n# Selectively copy these to your '.env' file as required.\n# Each option is shown with it's default value.\n# Do not copy this whole file to use as your '.env' file.\n\n# Application environment\n# Can be 'production', 'development', 'testing' or 'demo'\nAPP_ENV=production\n\n# Enable debug mode\n# Shows advanced debug information and errors.\n# CAN EXPOSE OTHER VARIABLES, LEAVE DISABLED\nAPP_DEBUG=false\n\n# Application key\n# Used for encryption where needed.\n# Run `php artisan key:generate` to generate a valid key.\nAPP_KEY=SomeRandomString\n\n# Application URL\n# This must be the root URL that you want to host BookStack on.\n# All URL's in BookStack will be generated using this value.\nAPP_URL=https://example.com\n\n# Application default language\n# The default language choice to show.\n# May be overridden by user-preference or visitor browser settings.\nAPP_LANG=en\n\n# Auto-detect language for public visitors.\n# Uses browser-sent headers to infer a language.\n# APP_LANG will be used if such a header is not provided.\nAPP_AUTO_LANG_PUBLIC=true\n\n# Application timezone\n# Used where dates are displayed such as on exported content.\n# Valid timezone values can be found here: https://www.php.net/manual/en/timezones.php\nAPP_TIMEZONE=UTC\n\n# Application theme\n# Used to specific a themes/<APP_THEME> folder where BookStack UI\n# overrides can be made. Defaults to disabled.\nAPP_THEME=false\n\n# Trusted proxies\n# Used to indicate trust of systems that proxy to the application so\n# certain header values (Such as \"X-Forwarded-For\") can be used from the\n# incoming proxy request to provide origin detail.\n# Set to an IP address, or multiple comma seperated IP addresses.\n# Can alternatively be set to \"*\" to trust all proxy addresses.\nAPP_PROXIES=null\n\n# Database details\n# Host can contain a port (localhost:3306) or a separate DB_PORT option can be used.\nDB_HOST=localhost\nDB_PORT=3306\nDB_DATABASE=database_database\nDB_USERNAME=database_username\nDB_PASSWORD=database_user_password\n\n# MySQL specific connection options\n# Path to Certificate Authority (CA) certificate file for your MySQL instance.\n# When this option is used host name identity verification will be performed\n# which checks the hostname, used by the client, against names within the\n# certificate itself (Common Name or Subject Alternative Name).\nMYSQL_ATTR_SSL_CA=\"/path/to/ca.pem\"\n\n# Mail system to use\n# Can be 'smtp' or 'sendmail'\nMAIL_DRIVER=smtp\n\n# Mail sending options\nMAIL_FROM=mail@bookstackapp.com\nMAIL_FROM_NAME=BookStack\n\n# SMTP mail options\nMAIL_HOST=localhost\nMAIL_PORT=1025\nMAIL_USERNAME=null\nMAIL_PASSWORD=null\nMAIL_ENCRYPTION=null\n\n# Cache & Session driver to use\n# Can be 'file', 'database', 'memcached' or 'redis'\nCACHE_DRIVER=file\nSESSION_DRIVER=file\n\n# Session configuration\nSESSION_LIFETIME=120\nSESSION_COOKIE_NAME=bookstack_session\nSESSION_SECURE_COOKIE=false\n\n# Cache key prefix\n# Can be used to prevent conflicts multiple BookStack instances use the same store.\nCACHE_PREFIX=bookstack\n\n# Memcached server configuration\n# If using a UNIX socket path for the host, set the port to 0\n# This follows the following format: HOST:PORT:WEIGHT\n# For multiple servers separate with a comma\nMEMCACHED_SERVERS=127.0.0.1:11211:100\n\n# Redis server configuration\n# This follows the following format: HOST:PORT:DATABASE\n# or, if using a password: HOST:PORT:DATABASE:PASSWORD\n# For multiple servers separate with a comma. These will be clustered.\nREDIS_SERVERS=127.0.0.1:6379:0\n\n# Queue driver to use\n# Can be 'sync', 'database' or 'redis'\nQUEUE_CONNECTION=sync\n\n# Storage system to use\n# Can be 'local', 'local_secure' or 's3'\nSTORAGE_TYPE=local\n\n# Image storage system to use\n# Defaults to the value of STORAGE_TYPE if unset.\n# Accepts the same values as STORAGE_TYPE.\nSTORAGE_IMAGE_TYPE=local\n\n# Attachment storage system to use\n# Defaults to the value of STORAGE_TYPE if unset.\n# Accepts the same values as STORAGE_TYPE although 'local' will be forced to 'local_secure'.\nSTORAGE_ATTACHMENT_TYPE=local_secure\n\n# Amazon S3 storage configuration\nSTORAGE_S3_KEY=your-s3-key\nSTORAGE_S3_SECRET=your-s3-secret\nSTORAGE_S3_BUCKET=s3-bucket-name\nSTORAGE_S3_REGION=s3-bucket-region\n\n# S3 endpoint to use for storage calls\n# Only set this if using a non-Amazon s3-compatible service such as Minio\nSTORAGE_S3_ENDPOINT=https://my-custom-s3-compatible.service.com:8001\n\n# Storage URL prefix\n# Used as a base for any generated image urls.\n# An s3-format URL will be generated if not set.\nSTORAGE_URL=false\n\n# Authentication method to use\n# Can be 'standard', 'ldap', 'saml2' or 'oidc'\nAUTH_METHOD=standard\n\n# Social authentication configuration\n# All disabled by default.\n# Refer to https://www.bookstackapp.com/docs/admin/third-party-auth/\n\nAZURE_APP_ID=false\nAZURE_APP_SECRET=false\nAZURE_TENANT=false\nAZURE_AUTO_REGISTER=false\nAZURE_AUTO_CONFIRM_EMAIL=false\n\nDISCORD_APP_ID=false\nDISCORD_APP_SECRET=false\nDISCORD_AUTO_REGISTER=false\nDISCORD_AUTO_CONFIRM_EMAIL=false\n\nFACEBOOK_APP_ID=false\nFACEBOOK_APP_SECRET=false\nFACEBOOK_AUTO_REGISTER=false\nFACEBOOK_AUTO_CONFIRM_EMAIL=false\n\nGITHUB_APP_ID=false\nGITHUB_APP_SECRET=false\nGITHUB_AUTO_REGISTER=false\nGITHUB_AUTO_CONFIRM_EMAIL=false\n\nGITLAB_APP_ID=false\nGITLAB_APP_SECRET=false\nGITLAB_BASE_URI=false\nGITLAB_AUTO_REGISTER=false\nGITLAB_AUTO_CONFIRM_EMAIL=false\n\nGOOGLE_APP_ID=false\nGOOGLE_APP_SECRET=false\nGOOGLE_SELECT_ACCOUNT=false\nGOOGLE_AUTO_REGISTER=false\nGOOGLE_AUTO_CONFIRM_EMAIL=false\n\nOKTA_BASE_URL=false\nOKTA_APP_ID=false\nOKTA_APP_SECRET=false\nOKTA_AUTO_REGISTER=false\nOKTA_AUTO_CONFIRM_EMAIL=false\n\nSLACK_APP_ID=false\nSLACK_APP_SECRET=false\nSLACK_AUTO_REGISTER=false\nSLACK_AUTO_CONFIRM_EMAIL=false\n\nTWITCH_APP_ID=false\nTWITCH_APP_SECRET=false\nTWITCH_AUTO_REGISTER=false\nTWITCH_AUTO_CONFIRM_EMAIL=false\n\nTWITTER_APP_ID=false\nTWITTER_APP_SECRET=false\nTWITTER_AUTO_REGISTER=false\nTWITTER_AUTO_CONFIRM_EMAIL=false\n\n# LDAP authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/ldap-auth/\nLDAP_SERVER=false\nLDAP_BASE_DN=false\nLDAP_DN=false\nLDAP_PASS=false\nLDAP_USER_FILTER=false\nLDAP_VERSION=false\nLDAP_START_TLS=false\nLDAP_TLS_INSECURE=false\nLDAP_ID_ATTRIBUTE=uid\nLDAP_EMAIL_ATTRIBUTE=mail\nLDAP_DISPLAY_NAME_ATTRIBUTE=cn\nLDAP_THUMBNAIL_ATTRIBUTE=null\nLDAP_FOLLOW_REFERRALS=true\nLDAP_DUMP_USER_DETAILS=false\n\n# LDAP group sync configuration\n# Refer to https://www.bookstackapp.com/docs/admin/ldap-auth/\nLDAP_USER_TO_GROUPS=false\nLDAP_GROUP_ATTRIBUTE=\"memberOf\"\nLDAP_REMOVE_FROM_GROUPS=false\n\n# SAML authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/saml2-auth/\nSAML2_NAME=SSO\nSAML2_EMAIL_ATTRIBUTE=email\nSAML2_DISPLAY_NAME_ATTRIBUTES=username\nSAML2_EXTERNAL_ID_ATTRIBUTE=null\nSAML2_IDP_ENTITYID=null\nSAML2_IDP_SSO=null\nSAML2_IDP_SLO=null\nSAML2_IDP_x509=null\nSAML2_ONELOGIN_OVERRIDES=null\nSAML2_DUMP_USER_DETAILS=false\nSAML2_AUTOLOAD_METADATA=false\nSAML2_IDP_AUTHNCONTEXT=true\nSAML2_SP_x509=null\nSAML2_SP_x509_KEY=null\n\n# SAML group sync configuration\n# Refer to https://www.bookstackapp.com/docs/admin/saml2-auth/\nSAML2_USER_TO_GROUPS=false\nSAML2_GROUP_ATTRIBUTE=group\nSAML2_REMOVE_FROM_GROUPS=false\n\n# OpenID Connect authentication configuration\n# Refer to https://www.bookstackapp.com/docs/admin/oidc-auth/\nOIDC_NAME=SSO\nOIDC_DISPLAY_NAME_CLAIMS=name\nOIDC_CLIENT_ID=null\nOIDC_CLIENT_SECRET=null\nOIDC_ISSUER=null\nOIDC_ISSUER_DISCOVER=false\nOIDC_PUBLIC_KEY=null\nOIDC_AUTH_ENDPOINT=null\nOIDC_TOKEN_ENDPOINT=null\nOIDC_DUMP_USER_DETAILS=false\n\n# Disable default third-party services such as Gravatar and Draw.IO\n# Service-specific options will override this option\nDISABLE_EXTERNAL_SERVICES=false\n\n# Use custom avatar service, Sets fetch URL\n# Possible placeholders: ${hash} ${size} ${email}\n# If set, Avatars will be fetched regardless of DISABLE_EXTERNAL_SERVICES option.\n# Example: AVATAR_URL=https://seccdn.libravatar.org/avatar/${hash}?s=${size}&d=identicon\nAVATAR_URL=\n\n# Enable diagrams.net integration\n# Can simply be true/false to enable/disable the integration.\n# Alternatively, It can be URL to the diagrams.net instance you want to use.\n# For URLs, The following URL parameters should be included: embed=1&proto=json&spin=1\nDRAWIO=true\n\n# Default item listing view\n# Used for public visitors and user's without a preference.\n# Can be 'list' or 'grid'.\nAPP_VIEWS_BOOKS=list\nAPP_VIEWS_BOOKSHELVES=grid\nAPP_VIEWS_BOOKSHELF=grid\n\n# Use dark mode by default\n# Will be overriden by any user/session preference.\nAPP_DEFAULT_DARK_MODE=false\n\n# Page revision limit\n# Number of page revisions to keep in the system before deleting old revisions.\n# If set to 'false' a limit will not be enforced.\nREVISION_LIMIT=50\n\n# Recycle Bin Lifetime\n# The number of days that content will remain in the recycle bin before\n# being considered for auto-removal. It is not a guarantee that content will\n# be removed after this time.\n# Set to 0 for no recycle bin functionality.\n# Set to -1 for unlimited recycle bin lifetime.\nRECYCLE_BIN_LIFETIME=30\n\n# File Upload Limit\n# Maximum file size, in megabytes, that can be uploaded to the system.\nFILE_UPLOAD_SIZE_LIMIT=50\n\n# Export Page Size\n# Primarily used to determine page size of PDF exports.\n# Can be 'a4' or 'letter'.\nEXPORT_PAGE_SIZE=a4\n\n# Allow <script> tags in page content\n# Note, if set to 'true' the page editor may still escape scripts.\nALLOW_CONTENT_SCRIPTS=false\n\n# Indicate if robots/crawlers should crawl your instance.\n# Can be 'true', 'false' or 'null'.\n# The behaviour of the default 'null' option will depend on the 'app-public' admin setting.\n# Contents of the robots.txt file can be overridden, making this option obsolete.\nALLOW_ROBOTS=null\n\n# Allow server-side fetches to be performed to potentially unknown\n# and user-provided locations. Primarily used in exports when loading\n# in externally referenced assets.\n# Can be 'true' or 'false'.\nALLOW_UNTRUSTED_SERVER_FETCHING=false\n\n# A list of hosts that BookStack can be iframed within.\n# Space separated if multiple. BookStack host domain is auto-inferred.\n# For Example: ALLOWED_IFRAME_HOSTS=\"https://example.com https://a.example.com\"\n# Setting this option will also auto-adjust cookies to be SameSite=None.\nALLOWED_IFRAME_HOSTS=null\n\n# A list of sources/hostnames that can be loaded within iframes within BookStack.\n# Space separated if multiple. BookStack host domain is auto-inferred.\n# Can be set to a lone \"*\" to allow all sources for iframe content (Not advised).\n# Defaults to a set of common services.\n# Current host and source for the \"DRAWIO\" setting will be auto-appended to the sources configured.\nALLOWED_IFRAME_SOURCES=\"https://*.draw.io https://*.youtube.com https://*.youtube-nocookie.com https://*.vimeo.com\"\n\n# The default and maximum item-counts for listing API requests.\nAPI_DEFAULT_ITEM_COUNT=100\nAPI_MAX_ITEM_COUNT=500\n\n# The number of API requests that can be made per minute by a single user.\nAPI_REQUESTS_PER_MIN=180\n\n# Enable the logging of failed email+password logins with the given message.\n# The default log channel below uses the php 'error_log' function which commonly\n# results in messages being output to the webserver error logs.\n# The message can contain a %u parameter which will be replaced with the login\n# user identifier (Username or email).\nLOG_FAILED_LOGIN_MESSAGE=false\nLOG_FAILED_LOGIN_CHANNEL=errorlog_plain_webserver\n", "<?php\n\n/**\n * Global app configuration options.\n *\n * Changes to these config files are not supported by BookStack and may break upon updates.\n * Configuration should be altered via the `.env` file or environment variables.\n * Do not edit this file unless you're happy to maintain any changes yourself.\n */\n\nreturn [\n\n    // The environment to run BookStack in.\n    // Options: production, development, demo, testing\n    'env' => env('APP_ENV', 'production'),\n\n    // Enter the application in debug mode.\n    // Shows much more verbose error messages. Has potential to show\n    // private configuration variables so should remain disabled in public.\n    'debug' => env('APP_DEBUG', false),\n\n    // The number of revisions to keep in the database.\n    // Once this limit is reached older revisions will be deleted.\n    // If set to false then a limit will not be enforced.\n    'revision_limit' => env('REVISION_LIMIT', 50),\n\n    // The number of days that content will remain in the recycle bin before\n    // being considered for auto-removal. It is not a guarantee that content will\n    // be removed after this time.\n    // Set to 0 for no recycle bin functionality.\n    // Set to -1 for unlimited recycle bin lifetime.\n    'recycle_bin_lifetime' => env('RECYCLE_BIN_LIFETIME', 30),\n\n    // The limit for all uploaded files, including images and attachments in MB.\n    'upload_limit' => env('FILE_UPLOAD_SIZE_LIMIT', 50),\n\n    // Allow <script> tags to entered within page content.\n    // <script> tags are escaped by default.\n    // Even when overridden the WYSIWYG editor may still escape script content.\n    'allow_content_scripts' => env('ALLOW_CONTENT_SCRIPTS', false),\n\n    // Allow server-side fetches to be performed to potentially unknown\n    // and user-provided locations. Primarily used in exports when loading\n    // in externally referenced assets.\n    'allow_untrusted_server_fetching' => env('ALLOW_UNTRUSTED_SERVER_FETCHING', false),\n\n    // Override the default behaviour for allowing crawlers to crawl the instance.\n    // May be ignored if view has be overridden or modified.\n    // Defaults to null since, if not set, 'app-public' status used instead.\n    'allow_robots' => env('ALLOW_ROBOTS', null),\n\n    // Application Base URL, Used by laravel in development commands\n    // and used by BookStack in URL generation.\n    'url' => env('APP_URL', '') === 'http://bookstack.dev' ? '' : env('APP_URL', ''),\n\n    // A list of hosts that BookStack can be iframed within.\n    // Space separated if multiple. BookStack host domain is auto-inferred.\n    'iframe_hosts' => env('ALLOWED_IFRAME_HOSTS', null),\n\n    // A list of sources/hostnames that can be loaded within iframes within BookStack.\n    // Space separated if multiple. BookStack host domain is auto-inferred.\n    // Can be set to a lone \"*\" to allow all sources for iframe content (Not advised).\n    // Defaults to a set of common services.\n    // Current host and source for the \"DRAWIO\" setting will be auto-appended to the sources configured.\n    'iframe_sources' => env('ALLOWED_IFRAME_SOURCES', 'https://*.draw.io https://*.youtube.com https://*.youtube-nocookie.com https://*.vimeo.com'),\n\n    // Application timezone for back-end date functions.\n    'timezone' => env('APP_TIMEZONE', 'UTC'),\n\n    // Default locale to use\n    'locale' => env('APP_LANG', 'en'),\n\n    // Locales available\n    'locales' => ['en', 'ar', 'bg', 'bs', 'ca', 'cs', 'da', 'de', 'de_informal', 'es', 'es_AR', 'et', 'fa', 'fr', 'he', 'hr', 'hu', 'id', 'it', 'ja', 'ko', 'lt', 'lv', 'nl', 'nb', 'pt', 'pt_BR', 'sk', 'sl', 'sv', 'pl',  'ru', 'th', 'tr', 'uk', 'vi', 'zh_CN', 'zh_TW'],\n\n    //  Application Fallback Locale\n    'fallback_locale' => 'en',\n\n    // Faker Locale\n    'faker_locale' => 'en_GB',\n\n    // Enable right-to-left text control.\n    'rtl' => false,\n\n    // Auto-detect the locale for public users\n    // For public users their locale can be guessed by headers sent by their\n    // browser. This is usually set by users in their browser settings.\n    // If not found the default app locale will be used.\n    'auto_detect_locale' => env('APP_AUTO_LANG_PUBLIC', true),\n\n    // Encryption key\n    'key' => env('APP_KEY', 'AbAZchsay4uBTU33RubBzLKw203yqSqr'),\n\n    // Encryption cipher\n    'cipher' => 'AES-256-CBC',\n\n    // Application Services Provides\n    'providers' => [\n\n        // Laravel Framework Service Providers...\n        Illuminate\\Auth\\AuthServiceProvider::class,\n        Illuminate\\Broadcasting\\BroadcastServiceProvider::class,\n        Illuminate\\Bus\\BusServiceProvider::class,\n        Illuminate\\Cache\\CacheServiceProvider::class,\n        Illuminate\\Foundation\\Providers\\ConsoleSupportServiceProvider::class,\n        Illuminate\\Cookie\\CookieServiceProvider::class,\n        Illuminate\\Database\\DatabaseServiceProvider::class,\n        Illuminate\\Encryption\\EncryptionServiceProvider::class,\n        Illuminate\\Filesystem\\FilesystemServiceProvider::class,\n        Illuminate\\Foundation\\Providers\\FoundationServiceProvider::class,\n        Illuminate\\Hashing\\HashServiceProvider::class,\n        Illuminate\\Mail\\MailServiceProvider::class,\n        Illuminate\\Pipeline\\PipelineServiceProvider::class,\n        Illuminate\\Queue\\QueueServiceProvider::class,\n        Illuminate\\Redis\\RedisServiceProvider::class,\n        Illuminate\\Auth\\Passwords\\PasswordResetServiceProvider::class,\n        Illuminate\\Session\\SessionServiceProvider::class,\n        Illuminate\\Validation\\ValidationServiceProvider::class,\n        Illuminate\\View\\ViewServiceProvider::class,\n        Illuminate\\Notifications\\NotificationServiceProvider::class,\n        SocialiteProviders\\Manager\\ServiceProvider::class,\n\n        // Third party service providers\n        Intervention\\Image\\ImageServiceProvider::class,\n        Barryvdh\\DomPDF\\ServiceProvider::class,\n        Barryvdh\\Snappy\\ServiceProvider::class,\n\n        // BookStack replacement service providers (Extends Laravel)\n        BookStack\\Providers\\PaginationServiceProvider::class,\n        BookStack\\Providers\\TranslationServiceProvider::class,\n\n        // BookStack custom service providers\n        BookStack\\Providers\\ThemeServiceProvider::class,\n        BookStack\\Providers\\AuthServiceProvider::class,\n        BookStack\\Providers\\AppServiceProvider::class,\n        BookStack\\Providers\\BroadcastServiceProvider::class,\n        BookStack\\Providers\\EventServiceProvider::class,\n        BookStack\\Providers\\RouteServiceProvider::class,\n        BookStack\\Providers\\CustomFacadeProvider::class,\n        BookStack\\Providers\\CustomValidationServiceProvider::class,\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Class Aliases\n    |--------------------------------------------------------------------------\n    |\n    | This array of class aliases will be registered when this application\n    | is started. However, feel free to register as many as you wish as\n    | the aliases are \"lazy\" loaded so they don't hinder performance.\n    |\n    */\n\n    // Class aliases, Registered on application start\n    'aliases' => [\n        // Laravel\n        'App'          => Illuminate\\Support\\Facades\\App::class,\n        'Arr'          => Illuminate\\Support\\Arr::class,\n        'Artisan'      => Illuminate\\Support\\Facades\\Artisan::class,\n        'Auth'         => Illuminate\\Support\\Facades\\Auth::class,\n        'Blade'        => Illuminate\\Support\\Facades\\Blade::class,\n        'Bus'          => Illuminate\\Support\\Facades\\Bus::class,\n        'Cache'        => Illuminate\\Support\\Facades\\Cache::class,\n        'Config'       => Illuminate\\Support\\Facades\\Config::class,\n        'Cookie'       => Illuminate\\Support\\Facades\\Cookie::class,\n        'Crypt'        => Illuminate\\Support\\Facades\\Crypt::class,\n        'Date'         => Illuminate\\Support\\Facades\\Date::class,\n        'DB'           => Illuminate\\Support\\Facades\\DB::class,\n        'Eloquent'     => Illuminate\\Database\\Eloquent\\Model::class,\n        'Event'        => Illuminate\\Support\\Facades\\Event::class,\n        'File'         => Illuminate\\Support\\Facades\\File::class,\n        'Gate'         => Illuminate\\Support\\Facades\\Gate::class,\n        'Hash'         => Illuminate\\Support\\Facades\\Hash::class,\n        'Http'         => Illuminate\\Support\\Facades\\Http::class,\n        'Lang'         => Illuminate\\Support\\Facades\\Lang::class,\n        'Log'          => Illuminate\\Support\\Facades\\Log::class,\n        'Mail'         => Illuminate\\Support\\Facades\\Mail::class,\n        'Notification' => Illuminate\\Support\\Facades\\Notification::class,\n        'Password'     => Illuminate\\Support\\Facades\\Password::class,\n        'Queue'        => Illuminate\\Support\\Facades\\Queue::class,\n        'RateLimiter'  => Illuminate\\Support\\Facades\\RateLimiter::class,\n        'Redirect'     => Illuminate\\Support\\Facades\\Redirect::class,\n        // 'Redis'        => Illuminate\\Support\\Facades\\Redis::class,\n        'Request'      => Illuminate\\Support\\Facades\\Request::class,\n        'Response'     => Illuminate\\Support\\Facades\\Response::class,\n        'Route'        => Illuminate\\Support\\Facades\\Route::class,\n        'Schema'       => Illuminate\\Support\\Facades\\Schema::class,\n        'Session'      => Illuminate\\Support\\Facades\\Session::class,\n        'Storage'      => Illuminate\\Support\\Facades\\Storage::class,\n        'Str'          => Illuminate\\Support\\Str::class,\n        'URL'          => Illuminate\\Support\\Facades\\URL::class,\n        'Validator'    => Illuminate\\Support\\Facades\\Validator::class,\n        'View'         => Illuminate\\Support\\Facades\\View::class,\n\n        // Laravel Packages\n        'Socialite'    => Laravel\\Socialite\\Facades\\Socialite::class,\n\n        // Third Party\n        'ImageTool' => Intervention\\Image\\Facades\\Image::class,\n        'DomPDF'    => Barryvdh\\DomPDF\\Facade::class,\n        'SnappyPDF' => Barryvdh\\Snappy\\Facades\\SnappyPdf::class,\n\n        // Custom BookStack\n        'Activity'    => BookStack\\Facades\\Activity::class,\n        'Permissions' => BookStack\\Facades\\Permissions::class,\n        'Theme'       => BookStack\\Facades\\Theme::class,\n    ],\n\n    // Proxy configuration\n    'proxies' => env('APP_PROXIES', ''),\n\n];\n", "<?php\n\nnamespace BookStack\\Entities\\Tools;\n\nuse BookStack\\Entities\\Models\\Book;\nuse BookStack\\Entities\\Models\\Chapter;\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Entities\\Tools\\Markdown\\HtmlToMarkdown;\nuse BookStack\\Uploads\\ImageService;\nuse BookStack\\Util\\CspService;\nuse DOMDocument;\nuse DOMElement;\nuse DOMXPath;\nuse Exception;\nuse Throwable;\n\nclass ExportFormatter\n{\n    protected ImageService $imageService;\n    protected PdfGenerator $pdfGenerator;\n    protected CspService $cspService;\n\n    /**\n     * ExportService constructor.\n     */\n    public function __construct(ImageService $imageService, PdfGenerator $pdfGenerator, CspService $cspService)\n    {\n        $this->imageService = $imageService;\n        $this->pdfGenerator = $pdfGenerator;\n        $this->cspService = $cspService;\n    }\n\n    /**\n     * Convert a page to a self-contained HTML file.\n     * Includes required CSS & image content. Images are base64 encoded into the HTML.\n     *\n     * @throws Throwable\n     */\n    public function pageToContainedHtml(Page $page)\n    {\n        $page->html = (new PageContent($page))->render();\n        $pageHtml = view('pages.export', [\n            'page'       => $page,\n            'format'     => 'html',\n            'cspContent' => $this->cspService->getCspMetaTagValue(),\n        ])->render();\n\n        return $this->containHtml($pageHtml);\n    }\n\n    /**\n     * Convert a chapter to a self-contained HTML file.\n     *\n     * @throws Throwable\n     */\n    public function chapterToContainedHtml(Chapter $chapter)\n    {\n        $pages = $chapter->getVisiblePages();\n        $pages->each(function ($page) {\n            $page->html = (new PageContent($page))->render();\n        });\n        $html = view('chapters.export', [\n            'chapter'    => $chapter,\n            'pages'      => $pages,\n            'format'     => 'html',\n            'cspContent' => $this->cspService->getCspMetaTagValue(),\n        ])->render();\n\n        return $this->containHtml($html);\n    }\n\n    /**\n     * Convert a book to a self-contained HTML file.\n     *\n     * @throws Throwable\n     */\n    public function bookToContainedHtml(Book $book)\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $html = view('books.export', [\n            'book'         => $book,\n            'bookChildren' => $bookTree,\n            'format'       => 'html',\n            'cspContent'   => $this->cspService->getCspMetaTagValue(),\n        ])->render();\n\n        return $this->containHtml($html);\n    }\n\n    /**\n     * Convert a page to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function pageToPdf(Page $page)\n    {\n        $page->html = (new PageContent($page))->render();\n        $html = view('pages.export', [\n            'page'   => $page,\n            'format' => 'pdf',\n            'engine' => $this->pdfGenerator->getActiveEngine(),\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert a chapter to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function chapterToPdf(Chapter $chapter)\n    {\n        $pages = $chapter->getVisiblePages();\n        $pages->each(function ($page) {\n            $page->html = (new PageContent($page))->render();\n        });\n\n        $html = view('chapters.export', [\n            'chapter' => $chapter,\n            'pages'   => $pages,\n            'format'  => 'pdf',\n            'engine'  => $this->pdfGenerator->getActiveEngine(),\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert a book to a PDF file.\n     *\n     * @throws Throwable\n     */\n    public function bookToPdf(Book $book)\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $html = view('books.export', [\n            'book'         => $book,\n            'bookChildren' => $bookTree,\n            'format'       => 'pdf',\n            'engine'       => $this->pdfGenerator->getActiveEngine(),\n        ])->render();\n\n        return $this->htmlToPdf($html);\n    }\n\n    /**\n     * Convert normal web-page HTML to a PDF.\n     *\n     * @throws Exception\n     */\n    protected function htmlToPdf(string $html): string\n    {\n        $html = $this->containHtml($html);\n        $html = $this->replaceIframesWithLinks($html);\n        $html = $this->openDetailElements($html);\n\n        return $this->pdfGenerator->fromHtml($html);\n    }\n\n    /**\n     * Within the given HTML content, Open any detail blocks.\n     */\n    protected function openDetailElements(string $html): string\n    {\n        libxml_use_internal_errors(true);\n\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n\n        $details = $xPath->query('//details');\n        /** @var DOMElement $detail */\n        foreach ($details as $detail) {\n            $detail->setAttribute('open', 'open');\n        }\n\n        return $doc->saveHTML();\n    }\n\n    /**\n     * Within the given HTML content, replace any iframe elements\n     * with anchor links within paragraph blocks.\n     */\n    protected function replaceIframesWithLinks(string $html): string\n    {\n        libxml_use_internal_errors(true);\n\n        $doc = new DOMDocument();\n        $doc->loadHTML(mb_convert_encoding($html, 'HTML-ENTITIES', 'UTF-8'));\n        $xPath = new DOMXPath($doc);\n\n        $iframes = $xPath->query('//iframe');\n        /** @var DOMElement $iframe */\n        foreach ($iframes as $iframe) {\n            $link = $iframe->getAttribute('src');\n            if (strpos($link, '//') === 0) {\n                $link = 'https:' . $link;\n            }\n\n            $anchor = $doc->createElement('a', $link);\n            $anchor->setAttribute('href', $link);\n            $paragraph = $doc->createElement('p');\n            $paragraph->appendChild($anchor);\n            $iframe->parentNode->replaceChild($paragraph, $iframe);\n        }\n\n        return $doc->saveHTML();\n    }\n\n    /**\n     * Bundle of the contents of a html file to be self-contained.\n     *\n     * @throws Exception\n     */\n    protected function containHtml(string $htmlContent): string\n    {\n        $imageTagsOutput = [];\n        preg_match_all(\"/\\<img.*?src\\=(\\'|\\\")(.*?)(\\'|\\\").*?\\>/i\", $htmlContent, $imageTagsOutput);\n\n        // Replace image src with base64 encoded image strings\n        if (isset($imageTagsOutput[0]) && count($imageTagsOutput[0]) > 0) {\n            foreach ($imageTagsOutput[0] as $index => $imgMatch) {\n                $oldImgTagString = $imgMatch;\n                $srcString = $imageTagsOutput[2][$index];\n                $imageEncoded = $this->imageService->imageUriToBase64($srcString);\n                if ($imageEncoded === null) {\n                    $imageEncoded = $srcString;\n                }\n                $newImgTagString = str_replace($srcString, $imageEncoded, $oldImgTagString);\n                $htmlContent = str_replace($oldImgTagString, $newImgTagString, $htmlContent);\n            }\n        }\n\n        $linksOutput = [];\n        preg_match_all(\"/\\<a.*href\\=(\\'|\\\")(.*?)(\\'|\\\").*?\\>/i\", $htmlContent, $linksOutput);\n\n        // Replace image src with base64 encoded image strings\n        if (isset($linksOutput[0]) && count($linksOutput[0]) > 0) {\n            foreach ($linksOutput[0] as $index => $linkMatch) {\n                $oldLinkString = $linkMatch;\n                $srcString = $linksOutput[2][$index];\n                if (strpos(trim($srcString), 'http') !== 0) {\n                    $newSrcString = url($srcString);\n                    $newLinkString = str_replace($srcString, $newSrcString, $oldLinkString);\n                    $htmlContent = str_replace($oldLinkString, $newLinkString, $htmlContent);\n                }\n            }\n        }\n\n        // Replace any relative links with system domain\n        return $htmlContent;\n    }\n\n    /**\n     * Converts the page contents into simple plain text.\n     * This method filters any bad looking content to provide a nice final output.\n     */\n    public function pageToPlainText(Page $page): string\n    {\n        $html = (new PageContent($page))->render();\n        $text = strip_tags($html);\n        // Replace multiple spaces with single spaces\n        $text = preg_replace('/\\ {2,}/', ' ', $text);\n        // Reduce multiple horrid whitespace characters.\n        $text = preg_replace('/(\\x0A|\\xA0|\\x0A|\\r|\\n){2,}/su', \"\\n\\n\", $text);\n        $text = html_entity_decode($text);\n        // Add title\n        $text = $page->name . \"\\n\\n\" . $text;\n\n        return $text;\n    }\n\n    /**\n     * Convert a chapter into a plain text string.\n     */\n    public function chapterToPlainText(Chapter $chapter): string\n    {\n        $text = $chapter->name . \"\\n\\n\";\n        $text .= $chapter->description . \"\\n\\n\";\n        foreach ($chapter->getVisiblePages() as $page) {\n            $text .= $this->pageToPlainText($page);\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a book into a plain text string.\n     */\n    public function bookToPlainText(Book $book): string\n    {\n        $bookTree = (new BookContents($book))->getTree(false, false);\n        $text = $book->name . \"\\n\\n\";\n        foreach ($bookTree as $bookChild) {\n            if ($bookChild->isA('chapter')) {\n                $text .= $this->chapterToPlainText($bookChild);\n            } else {\n                $text .= $this->pageToPlainText($bookChild);\n            }\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a page to a Markdown file.\n     */\n    public function pageToMarkdown(Page $page): string\n    {\n        if ($page->markdown) {\n            return '# ' . $page->name . \"\\n\\n\" . $page->markdown;\n        }\n\n        return '# ' . $page->name . \"\\n\\n\" . (new HtmlToMarkdown($page->html))->convert();\n    }\n\n    /**\n     * Convert a chapter to a Markdown file.\n     */\n    public function chapterToMarkdown(Chapter $chapter): string\n    {\n        $text = '# ' . $chapter->name . \"\\n\\n\";\n        $text .= $chapter->description . \"\\n\\n\";\n        foreach ($chapter->pages as $page) {\n            $text .= $this->pageToMarkdown($page) . \"\\n\\n\";\n        }\n\n        return $text;\n    }\n\n    /**\n     * Convert a book into a plain text string.\n     */\n    public function bookToMarkdown(Book $book): string\n    {\n        $bookTree = (new BookContents($book))->getTree(false, true);\n        $text = '# ' . $book->name . \"\\n\\n\";\n        foreach ($bookTree as $bookChild) {\n            if ($bookChild instanceof Chapter) {\n                $text .= $this->chapterToMarkdown($bookChild);\n            } else {\n                $text .= $this->pageToMarkdown($bookChild);\n            }\n        }\n\n        return $text;\n    }\n}\n", "<?php\n\nnamespace BookStack\\Http\\Middleware;\n\nuse BookStack\\Util\\CspService;\nuse Closure;\nuse Illuminate\\Http\\Request;\n\nclass ApplyCspRules\n{\n    protected CspService $cspService;\n\n    public function __construct(CspService $cspService)\n    {\n        $this->cspService = $cspService;\n    }\n\n    /**\n     * Handle an incoming request.\n     *\n     * @param Request $request\n     * @param Closure $next\n     *\n     * @return mixed\n     */\n    public function handle($request, Closure $next)\n    {\n        view()->share('cspNonce', $this->cspService->getNonce());\n        if ($this->cspService->allowedIFrameHostsConfigured()) {\n            config()->set('session.same_site', 'none');\n        }\n\n        $response = $next($request);\n\n        $cspHeader = $this->cspService->getCspHeader();\n        $response->headers->set('Content-Security-Policy', $cspHeader, false);\n\n        return $response;\n    }\n}\n", "<?php\n\nnamespace BookStack\\Util;\n\nuse Illuminate\\Support\\Str;\n\nclass CspService\n{\n    protected string $nonce;\n\n    public function __construct(string $nonce = '')\n    {\n        $this->nonce = $nonce ?: Str::random(24);\n    }\n\n    /**\n     * Get the nonce value for CSP.\n     */\n    public function getNonce(): string\n    {\n        return $this->nonce;\n    }\n\n    /**\n     * Get the CSP headers for the application\n     */\n    public function getCspHeader(): string\n    {\n        $headers = [\n            $this->getFrameAncestors(),\n            $this->getFrameSrc(),\n            $this->getScriptSrc(),\n            $this->getObjectSrc(),\n            $this->getBaseUri(),\n        ];\n\n        return implode('; ', array_filter($headers));\n    }\n\n    /**\n     * Get the CSP rules for the application for a HTML meta tag.\n     */\n    public function getCspMetaTagValue(): string\n    {\n        $headers = [\n            $this->getFrameSrc(),\n            $this->getScriptSrc(),\n            $this->getObjectSrc(),\n            $this->getBaseUri(),\n        ];\n\n        return implode('; ', array_filter($headers));\n    }\n\n    /**\n     * Check if the user has configured some allowed iframe hosts.\n     */\n    public function allowedIFrameHostsConfigured(): bool\n    {\n        return count($this->getAllowedIframeHosts()) > 0;\n    }\n\n    /**\n     * Create CSP 'script-src' rule to restrict the forms of script that can run on the page.\n     */\n    protected function getScriptSrc(): string\n    {\n        if (config('app.allow_content_scripts')) {\n            return '';\n        }\n\n        $parts = [\n            'http:',\n            'https:',\n            '\\'nonce-' . $this->nonce . '\\'',\n            '\\'strict-dynamic\\'',\n        ];\n\n        return 'script-src ' . implode(' ', $parts);\n    }\n\n    /**\n     * Create CSP \"frame-ancestors\" rule to restrict the hosts that BookStack can be iframed within.\n     */\n    protected function getFrameAncestors(): string\n    {\n        $iframeHosts = $this->getAllowedIframeHosts();\n        array_unshift($iframeHosts, \"'self'\");\n        return 'frame-ancestors ' . implode(' ', $iframeHosts);\n    }\n\n    /**\n     * Creates CSP \"frame-src\" rule to restrict what hosts/sources can be loaded\n     * within iframes to provide an allow-list-style approach to iframe content.\n     */\n    protected function getFrameSrc(): string\n    {\n        $iframeHosts = $this->getAllowedIframeSources();\n        array_unshift($iframeHosts, \"'self'\");\n        return 'frame-src ' . implode(' ', $iframeHosts);\n    }\n\n    /**\n     * Creates CSP 'object-src' rule to restrict the types of dynamic content\n     * that can be embedded on the page.\n     */\n    protected function getObjectSrc(): string\n    {\n        if (config('app.allow_content_scripts')) {\n            return '';\n        }\n\n        return \"object-src 'self'\";\n    }\n\n    /**\n     * Creates CSP 'base-uri' rule to restrict what base tags can be set on\n     * the page to prevent manipulation of relative links.\n     */\n    protected function getBaseUri(): string\n    {\n        return \"base-uri 'self'\";\n    }\n\n    protected function getAllowedIframeHosts(): array\n    {\n        $hosts = config('app.iframe_hosts', '');\n\n        return array_filter(explode(' ', $hosts));\n    }\n\n    protected function getAllowedIframeSources(): array\n    {\n        $sources = config('app.iframe_sources', '');\n        $hosts = array_filter(explode(' ', $sources));\n\n        // Extract drawing service url to allow embedding if active\n        $drawioConfigValue = config('services.drawio');\n        if ($drawioConfigValue) {\n            $drawioSource = is_string($drawioConfigValue) ? $drawioConfigValue : 'https://embed.diagrams.net/';\n            $drawioSourceParsed = parse_url($drawioSource);\n            $drawioHost = $drawioSourceParsed['scheme'] . '://' . $drawioSourceParsed['host'];\n            $hosts[] = $drawioHost;\n        }\n\n        return $hosts;\n    }\n}\n", "<!doctype html>\n<html lang=\"{{ config('app.lang') }}\">\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n    <title>@yield('title')</title>\n\n    @if($cspContent ?? false)\n        <meta http-equiv=\"Content-Security-Policy\" content=\"{{ $cspContent }}\">\n    @endif\n\n    @include('common.export-styles', ['format' => $format, 'engine' => $engine ?? ''])\n    @include('common.export-custom-head')\n</head>\n<body>\n<div class=\"page-content\">\n    @yield('content')\n</div>\n</body>\n</html>", "<?php\n\nnamespace Tests\\Entity;\n\nuse BookStack\\Auth\\Role;\nuse BookStack\\Entities\\Models\\Book;\nuse BookStack\\Entities\\Models\\Chapter;\nuse BookStack\\Entities\\Models\\Page;\nuse BookStack\\Entities\\Tools\\PdfGenerator;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Str;\nuse Tests\\TestCase;\n\nclass ExportTest extends TestCase\n{\n    public function test_page_text_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.txt\"');\n    }\n\n    public function test_page_pdf_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.pdf\"');\n    }\n\n    public function test_page_html_export()\n    {\n        $page = Page::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.html\"');\n    }\n\n    public function test_book_text_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($book->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.txt\"');\n    }\n\n    public function test_book_pdf_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.pdf\"');\n    }\n\n    public function test_book_html_export()\n    {\n        $page = Page::query()->first();\n        $book = $page->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($book->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $book->slug . '.html\"');\n    }\n\n    public function test_book_html_export_shows_chapter_descriptions()\n    {\n        $chapterDesc = 'My custom test chapter description ' . Str::random(12);\n        $chapter = Chapter::query()->first();\n        $chapter->description = $chapterDesc;\n        $chapter->save();\n\n        $book = $chapter->book;\n        $this->asEditor();\n\n        $resp = $this->get($book->getUrl('/export/html'));\n        $resp->assertSee($chapterDesc);\n    }\n\n    public function test_chapter_text_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages[0];\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/plaintext'));\n        $resp->assertStatus(200);\n        $resp->assertSee($chapter->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.txt\"');\n    }\n\n    public function test_chapter_pdf_export()\n    {\n        $chapter = Chapter::query()->first();\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/pdf'));\n        $resp->assertStatus(200);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.pdf\"');\n    }\n\n    public function test_chapter_html_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages[0];\n        $this->asEditor();\n\n        $resp = $this->get($chapter->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($chapter->name);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $chapter->slug . '.html\"');\n    }\n\n    public function test_page_html_export_contains_custom_head_if_set()\n    {\n        $page = Page::query()->first();\n\n        $customHeadContent = '<style>p{color: red;}</style>';\n        $this->setSettings(['app-custom-head' => $customHeadContent]);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee($customHeadContent, false);\n    }\n\n    public function test_page_html_export_does_not_break_with_only_comments_in_custom_head()\n    {\n        $page = Page::query()->first();\n\n        $customHeadContent = '<!-- A comment -->';\n        $this->setSettings(['app-custom-head' => $customHeadContent]);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertSee($customHeadContent, false);\n    }\n\n    public function test_page_html_export_use_absolute_dates()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee($page->created_at->formatLocalized('%e %B %Y %H:%M:%S'));\n        $resp->assertDontSee($page->created_at->diffForHumans());\n        $resp->assertSee($page->updated_at->formatLocalized('%e %B %Y %H:%M:%S'));\n        $resp->assertDontSee($page->updated_at->diffForHumans());\n    }\n\n    public function test_page_export_does_not_include_user_or_revision_links()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertDontSee($page->getUrl('/revisions'));\n        $resp->assertDontSee($page->createdBy->getProfileUrl());\n        $resp->assertSee($page->createdBy->name);\n    }\n\n    public function test_page_export_sets_right_data_type_for_svg_embeds()\n    {\n        $page = Page::query()->first();\n        Storage::disk('local')->makeDirectory('uploads/images/gallery');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test.svg', '<svg></svg>');\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\">';\n        $page->save();\n\n        $this->asEditor();\n        $resp = $this->get($page->getUrl('/export/html'));\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test.svg');\n\n        $resp->assertStatus(200);\n        $resp->assertSee('<img src=\"data:image/svg+xml;base64', false);\n    }\n\n    public function test_page_image_containment_works_on_multiple_images_within_a_single_line()\n    {\n        $page = Page::query()->first();\n        Storage::disk('local')->makeDirectory('uploads/images/gallery');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test.svg', '<svg></svg>');\n        Storage::disk('local')->put('uploads/images/gallery/svg_test2.svg', '<svg></svg>');\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\" class=\"a\"><img src=\"http://localhost/uploads/images/gallery/svg_test2.svg\" class=\"b\">';\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test.svg');\n        Storage::disk('local')->delete('uploads/images/gallery/svg_test2.svg');\n\n        $resp->assertDontSee('http://localhost/uploads/images/gallery/svg_test');\n    }\n\n    public function test_page_export_contained_html_image_fetches_only_run_when_url_points_to_image_upload_folder()\n    {\n        $page = Page::query()->first();\n        $page->html = '<img src=\"http://localhost/uploads/images/gallery/svg_test.svg\"/>'\n            . '<img src=\"http://localhost/uploads/svg_test.svg\"/>'\n            . '<img src=\"/uploads/svg_test.svg\"/>';\n        $storageDisk = Storage::disk('local');\n        $storageDisk->makeDirectory('uploads/images/gallery');\n        $storageDisk->put('uploads/images/gallery/svg_test.svg', '<svg>good</svg>');\n        $storageDisk->put('uploads/svg_test.svg', '<svg>bad</svg>');\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n\n        $storageDisk->delete('uploads/images/gallery/svg_test.svg');\n        $storageDisk->delete('uploads/svg_test.svg');\n\n        $resp->assertDontSee('http://localhost/uploads/images/gallery/svg_test.svg', false);\n        $resp->assertSee('http://localhost/uploads/svg_test.svg');\n        $resp->assertSee('src=\"/uploads/svg_test.svg\"', false);\n    }\n\n    public function test_page_export_contained_html_does_not_allow_upward_traversal_with_local()\n    {\n        $contents = file_get_contents(public_path('.htaccess'));\n        config()->set('filesystems.images', 'local');\n\n        $page = Page::query()->first();\n        $page->html = '<img src=\"http://localhost/uploads/images/../../.htaccess\"/>';\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertDontSee(base64_encode($contents));\n    }\n\n    public function test_page_export_contained_html_does_not_allow_upward_traversal_with_local_secure()\n    {\n        $testFilePath = storage_path('logs/test.txt');\n        config()->set('filesystems.images', 'local_secure');\n        file_put_contents($testFilePath, 'I am a cat');\n\n        $page = Page::query()->first();\n        $page->html = '<img src=\"http://localhost/uploads/images/../../logs/test.txt\"/>';\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertDontSee(base64_encode('I am a cat'));\n        unlink($testFilePath);\n    }\n\n    public function test_exports_removes_scripts_from_custom_head()\n    {\n        $entities = [\n            Page::query()->first(), Chapter::query()->first(), Book::query()->first(),\n        ];\n        setting()->put('app-custom-head', '<script>window.donkey = \"cat\";</script><style>.my-test-class { color: red; }</style>');\n\n        foreach ($entities as $entity) {\n            $resp = $this->asEditor()->get($entity->getUrl('/export/html'));\n            $resp->assertDontSee('window.donkey');\n            $resp->assertDontSee('<script', false);\n            $resp->assertSee('.my-test-class { color: red; }');\n        }\n    }\n\n    public function test_page_export_with_deleted_creator_and_updater()\n    {\n        $user = $this->getViewer(['name' => 'ExportWizardTheFifth']);\n        $page = Page::query()->first();\n        $page->created_by = $user->id;\n        $page->updated_by = $user->id;\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/html'));\n        $resp->assertSee('ExportWizardTheFifth');\n\n        $user->delete();\n        $resp = $this->get($page->getUrl('/export/html'));\n        $resp->assertStatus(200);\n        $resp->assertDontSee('ExportWizardTheFifth');\n    }\n\n    public function test_page_pdf_export_converts_iframes_to_links()\n    {\n        $page = Page::query()->first()->forceFill([\n            'html'     => '<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/ShqUjt33uOs\"></iframe>',\n        ]);\n        $page->save();\n\n        $pdfHtml = '';\n        $mockPdfGenerator = $this->mock(PdfGenerator::class);\n        $mockPdfGenerator->shouldReceive('fromHtml')\n            ->with(\\Mockery::capture($pdfHtml))\n            ->andReturn('');\n        $mockPdfGenerator->shouldReceive('getActiveEngine')->andReturn(PdfGenerator::ENGINE_DOMPDF);\n\n        $this->asEditor()->get($page->getUrl('/export/pdf'));\n        $this->assertStringNotContainsString('iframe>', $pdfHtml);\n        $this->assertStringContainsString('<p><a href=\"https://www.youtube.com/embed/ShqUjt33uOs\">https://www.youtube.com/embed/ShqUjt33uOs</a></p>', $pdfHtml);\n    }\n\n    public function test_page_pdf_export_opens_details_blocks()\n    {\n        $page = Page::query()->first()->forceFill([\n            'html'     => '<details><summary>Hello</summary><p>Content!</p></details>',\n        ]);\n        $page->save();\n\n        $pdfHtml = '';\n        $mockPdfGenerator = $this->mock(PdfGenerator::class);\n        $mockPdfGenerator->shouldReceive('fromHtml')\n            ->with(\\Mockery::capture($pdfHtml))\n            ->andReturn('');\n        $mockPdfGenerator->shouldReceive('getActiveEngine')->andReturn(PdfGenerator::ENGINE_DOMPDF);\n\n        $this->asEditor()->get($page->getUrl('/export/pdf'));\n        $this->assertStringContainsString('<details open=\"open\"', $pdfHtml);\n    }\n\n    public function test_page_markdown_export()\n    {\n        $page = Page::query()->first();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertStatus(200);\n        $resp->assertSee($page->name);\n        $resp->assertHeader('Content-Disposition', 'attachment; filename=\"' . $page->slug . '.md\"');\n    }\n\n    public function test_page_markdown_export_uses_existing_markdown_if_apparent()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '# A header',\n            'html'     => '<h1>Dogcat</h1>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee('A header');\n        $resp->assertDontSee('Dogcat');\n    }\n\n    public function test_page_markdown_export_converts_html_where_no_markdown()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1><p>Some <strong>bold</strong> text</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\nSome **bold** text\");\n    }\n\n    public function test_page_markdown_export_does_not_convert_callouts()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1><p class=\"callout info\">Some callout text</p><p>Another line</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\n<p class=\\\"callout info\\\">Some callout text</p>\\n\\nAnother line\", false);\n    }\n\n    public function test_page_markdown_export_handles_bookstacks_wysiwyg_codeblock_format()\n    {\n        $page = Page::query()->first()->forceFill([\n            'markdown' => '',\n            'html'     => '<h1>Dogcat</h1>' . \"\\r\\n\" . '<pre id=\"bkmrk-var-a-%3D-%27cat%27%3B\"><code class=\"language-JavaScript\">var a = \\'cat\\';</code></pre><p>Another line</p>',\n        ]);\n        $page->save();\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/markdown'));\n        $resp->assertSee(\"# Dogcat\\n\\n```JavaScript\\nvar a = 'cat';\\n```\\n\\nAnother line\", false);\n    }\n\n    public function test_chapter_markdown_export()\n    {\n        $chapter = Chapter::query()->first();\n        $page = $chapter->pages()->first();\n        $resp = $this->asEditor()->get($chapter->getUrl('/export/markdown'));\n\n        $resp->assertSee('# ' . $chapter->name);\n        $resp->assertSee('# ' . $page->name);\n    }\n\n    public function test_book_markdown_export()\n    {\n        $book = Book::query()->whereHas('pages')->whereHas('chapters')->first();\n        $chapter = $book->chapters()->first();\n        $page = $chapter->pages()->first();\n        $resp = $this->asEditor()->get($book->getUrl('/export/markdown'));\n\n        $resp->assertSee('# ' . $book->name);\n        $resp->assertSee('# ' . $chapter->name);\n        $resp->assertSee('# ' . $page->name);\n    }\n\n    public function test_export_option_only_visible_and_accessible_with_permission()\n    {\n        $book = Book::query()->whereHas('pages')->whereHas('chapters')->first();\n        $chapter = $book->chapters()->first();\n        $page = $chapter->pages()->first();\n        $entities = [$book, $chapter, $page];\n        $user = $this->getViewer();\n        $this->actingAs($user);\n\n        foreach ($entities as $entity) {\n            $resp = $this->get($entity->getUrl());\n            $resp->assertSee('/export/pdf');\n        }\n\n        /** @var Role $role */\n        $this->removePermissionFromUser($user, 'content-export');\n\n        foreach ($entities as $entity) {\n            $resp = $this->get($entity->getUrl());\n            $resp->assertDontSee('/export/pdf');\n            $resp = $this->get($entity->getUrl('/export/pdf'));\n            $this->assertPermissionError($resp);\n        }\n    }\n\n    public function test_wkhtmltopdf_only_used_when_allow_untrusted_is_true()\n    {\n        /** @var Page $page */\n        $page = Page::query()->first();\n\n        config()->set('snappy.pdf.binary', '/abc123');\n        config()->set('app.allow_untrusted_server_fetching', false);\n\n        $resp = $this->asEditor()->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(200); // Sucessful response with invalid snappy binary indicates dompdf usage.\n\n        config()->set('app.allow_untrusted_server_fetching', true);\n        $resp = $this->get($page->getUrl('/export/pdf'));\n        $resp->assertStatus(500); // Bad response indicates wkhtml usage\n    }\n\n    public function test_html_exports_contain_csp_meta_tag()\n    {\n        $entities = [\n            Page::query()->first(),\n            Book::query()->first(),\n            Chapter::query()->first(),\n        ];\n\n        foreach ($entities as $entity) {\n            $resp = $this->asEditor()->get($entity->getUrl('/export/html'));\n            $resp->assertElementExists('head meta[http-equiv=\"Content-Security-Policy\"][content*=\"script-src \"]');\n        }\n    }\n}\n", "<?php\n\nnamespace Tests;\n\nuse BookStack\\Util\\CspService;\n\nclass SecurityHeaderTest extends TestCase\n{\n    public function test_cookies_samesite_lax_by_default()\n    {\n        $resp = $this->get('/');\n        foreach ($resp->headers->getCookies() as $cookie) {\n            $this->assertEquals('lax', $cookie->getSameSite());\n        }\n    }\n\n    public function test_cookies_samesite_none_when_iframe_hosts_set()\n    {\n        $this->runWithEnv('ALLOWED_IFRAME_HOSTS', 'http://example.com', function () {\n            $resp = $this->get('/');\n            foreach ($resp->headers->getCookies() as $cookie) {\n                $this->assertEquals('none', $cookie->getSameSite());\n            }\n        });\n    }\n\n    public function test_secure_cookies_controlled_by_app_url()\n    {\n        $this->runWithEnv('APP_URL', 'http://example.com', function () {\n            $resp = $this->get('/');\n            foreach ($resp->headers->getCookies() as $cookie) {\n                $this->assertFalse($cookie->isSecure());\n            }\n        });\n\n        $this->runWithEnv('APP_URL', 'https://example.com', function () {\n            $resp = $this->get('/');\n            foreach ($resp->headers->getCookies() as $cookie) {\n                $this->assertTrue($cookie->isSecure());\n            }\n        });\n    }\n\n    public function test_iframe_csp_self_only_by_default()\n    {\n        $resp = $this->get('/');\n        $frameHeader = $this->getCspHeader($resp, 'frame-ancestors');\n\n        $this->assertEquals('frame-ancestors \\'self\\'', $frameHeader);\n    }\n\n    public function test_iframe_csp_includes_extra_hosts_if_configured()\n    {\n        $this->runWithEnv('ALLOWED_IFRAME_HOSTS', 'https://a.example.com https://b.example.com', function () {\n            $resp = $this->get('/');\n            $frameHeader = $this->getCspHeader($resp, 'frame-ancestors');\n\n            $this->assertNotEmpty($frameHeader);\n            $this->assertEquals('frame-ancestors \\'self\\' https://a.example.com https://b.example.com', $frameHeader);\n        });\n    }\n\n    public function test_script_csp_set_on_responses()\n    {\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'script-src');\n        $this->assertStringContainsString('\\'strict-dynamic\\'', $scriptHeader);\n        $this->assertStringContainsString('\\'nonce-', $scriptHeader);\n    }\n\n    public function test_script_csp_nonce_matches_nonce_used_in_custom_head()\n    {\n        $this->setSettings(['app-custom-head' => '<script>console.log(\"cat\");</script>']);\n        $resp = $this->get('/login');\n        $scriptHeader = $this->getCspHeader($resp, 'script-src');\n\n        $nonce = app()->make(CspService::class)->getNonce();\n        $this->assertStringContainsString('nonce-' . $nonce, $scriptHeader);\n        $resp->assertSee('<script nonce=\"' . $nonce . '\">console.log(\"cat\");</script>', false);\n    }\n\n    public function test_script_csp_nonce_changes_per_request()\n    {\n        $resp = $this->get('/');\n        $firstHeader = $this->getCspHeader($resp, 'script-src');\n\n        $this->refreshApplication();\n\n        $resp = $this->get('/');\n        $secondHeader = $this->getCspHeader($resp, 'script-src');\n\n        $this->assertNotEquals($firstHeader, $secondHeader);\n    }\n\n    public function test_allow_content_scripts_settings_controls_csp_script_headers()\n    {\n        config()->set('app.allow_content_scripts', true);\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'script-src');\n        $this->assertEmpty($scriptHeader);\n\n        config()->set('app.allow_content_scripts', false);\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'script-src');\n        $this->assertNotEmpty($scriptHeader);\n    }\n\n    public function test_object_src_csp_header_set()\n    {\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'object-src');\n        $this->assertEquals('object-src \\'self\\'', $scriptHeader);\n    }\n\n    public function test_base_uri_csp_header_set()\n    {\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'base-uri');\n        $this->assertEquals('base-uri \\'self\\'', $scriptHeader);\n    }\n\n    public function test_frame_src_csp_header_set()\n    {\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'frame-src');\n        $this->assertEquals('frame-src \\'self\\' https://*.draw.io https://*.youtube.com https://*.youtube-nocookie.com https://*.vimeo.com', $scriptHeader);\n    }\n\n    public function test_frame_src_csp_header_has_drawio_host_added()\n    {\n        config()->set([\n            'app.iframe_sources' => 'https://example.com',\n            'services.drawio'   => 'https://diagrams.example.com/testing?cat=dog',\n        ]);\n\n        $resp = $this->get('/');\n        $scriptHeader = $this->getCspHeader($resp, 'frame-src');\n        $this->assertEquals('frame-src \\'self\\' https://example.com https://diagrams.example.com', $scriptHeader);\n    }\n\n    public function test_cache_control_headers_are_strict_on_responses_when_logged_in()\n    {\n        $this->asEditor();\n        $resp = $this->get('/');\n        $resp->assertHeader('Cache-Control', 'max-age=0, no-store, private');\n        $resp->assertHeader('Pragma', 'no-cache');\n        $resp->assertHeader('Expires', 'Sun, 12 Jul 2015 19:01:00 GMT');\n    }\n\n    /**\n     * Get the value of the first CSP header of the given type.\n     */\n    protected function getCspHeader(TestResponse $resp, string $type): string\n    {\n        $cspHeaders = explode('; ', $resp->headers->get('Content-Security-Policy'));\n\n        foreach ($cspHeaders as $cspHeader) {\n            if (strpos($cspHeader, $type) === 0) {\n                return $cspHeader;\n            }\n        }\n\n        return '';\n    }\n}\n"], "filenames": [".env.example.complete", "app/Config/app.php", "app/Entities/Tools/ExportFormatter.php", "app/Http/Middleware/ApplyCspRules.php", "app/Util/CspService.php", "resources/views/layouts/export.blade.php", "tests/Entity/ExportTest.php", "tests/SecurityHeaderTest.php"], "buggy_code_start_loc": [333, 58, 9, 11, 6, 5, 271, 121], "buggy_code_end_loc": [333, 58, 78, 42, 95, 5, 450, 141], "fixing_code_start_loc": [334, 59, 10, 11, 5, 6, 271, 122], "fixing_code_end_loc": [341, 66, 85, 37, 148, 10, 465, 164], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository bookstackapp/bookstack prior to v22.02.3.", "other": {"cve": {"id": "CVE-2022-0877", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-08T13:15:08.153", "lastModified": "2022-03-11T17:59:47.587", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository bookstackapp/bookstack prior to v22.02.3."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio GitHub bookstackapp/bookstack versiones anteriores a v22.02.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bookstackapp:bookstack:*:*:*:*:*:*:*:*", "versionEndExcluding": "22.02.3", "matchCriteriaId": "756A4324-51E8-4895-BE48-F60E78512BD3"}]}]}], "references": [{"url": "https://github.com/bookstackapp/bookstack/commit/856fca8289b7370cafa033ea21c408e7d4303fd6", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b04df4e3-ae5a-4dc6-81ec-496248b15f3c", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bookstackapp/bookstack/commit/856fca8289b7370cafa033ea21c408e7d4303fd6"}}