{"buggy_code": ["\ufeffvar fs = require('fs');\nvar expect = require('chai').expect;\nvar zipper = require('../main.js');\nvar JSZip = require('jszip');\n\nvar localMemory = {}; // used for passing variables between tests\n\n\ndescribe(\"Unzipping synchronously\", function () {\n\n    it(\"unzips a .zip file in memory without errors\", function () {\n\n        localMemory.T1ZippedFS = zipper.sync.unzip(\"./tests/assets/hello.zip\").memory();\n    });\n\n    it(\"checks if the ZippedFS object contains correct data\", function () {\n\n        expect(localMemory.T1ZippedFS.contents()).to.include(\"hello/says-hello\") &&\n        expect(localMemory.T1ZippedFS.read(\"hello/says-hello\", 'text')).to.equal(\"Hello\") &&\n        expect(localMemory.T1ZippedFS.contents()).to.include(\"hello/world/says-world\") &&\n        expect(localMemory.T1ZippedFS.read(\"hello/world/says-world\", 'text')).to.equal(\"World\");\n    });\n\n    it(\"unzips a .zip file to disk without errors\", function () {\n\n        fs.mkdirSync(\"./tests/assets/hello-sync-unzip\");\n        zipper.sync.unzip(\"./tests/assets/hello.zip\").save(\"./tests/assets/hello-sync-unzip/\");\n    });\n\n    it(\"checks if unzipped files on disk contain correct data\", function (done) {\n\n        fs.readFile(\"./tests/assets/hello-sync-unzip/hello/says-hello\", 'utf8', function (err, data) {\n\n            if (err)\n                throw err;\n\n            expect(data).to.equal(\"Hello\");\n\n            fs.readFile(\"./tests/assets/hello-sync-unzip/hello/world/says-world\", 'utf8', function (err, world_data) {\n\n                if (err)\n                    throw err;\n\n                expect(world_data).to.equal(\"World\");\n\n                done();\n            });\n        });\n    });\n\n    it(\"unzips a file directly from the buffer containing it\", function () {\n\n        var buff = fs.readFileSync(\"./tests/assets/hello.zip\");\n\n        localMemory.T5ZippedFS = zipper.sync.unzip(buff).memory();\n    });\n\n    it(\"checks if the ZippedFS object contains correct data\", function () {\n\n        expect(localMemory.T5ZippedFS.contents()).to.include(\"hello/says-hello\") &&\n        expect(localMemory.T5ZippedFS.read(\"hello/says-hello\", 'text')).to.equal(\"Hello\") &&\n        expect(localMemory.T5ZippedFS.contents()).to.include(\"hello/world/says-world\") &&\n        expect(localMemory.T5ZippedFS.read(\"hello/world/says-world\", 'text')).to.equal(\"World\");\n    });\n\n    it(\"uses existing folders without throwing EEXIST error\", function() {\n        zipper.sync.unzip(\"./tests/assets/hello.zip\").save(\"./tests/assets/hello-unzip-exists\");\n    });\n\n});\n"], "fixing_code": ["\ufeffvar fs = require('fs');\nvar expect = require('chai').expect;\nvar zipper = require('../main.js');\nvar JSZip = require('jszip');\n\nvar localMemory = {}; // used for passing variables between tests\n\n\ndescribe(\"Unzipping synchronously\", function () {\n\n    it(\"unzips a .zip file in memory without errors\", function () {\n\n        localMemory.T1ZippedFS = zipper.sync.unzip(\"./tests/assets/hello.zip\").memory();\n    });\n\n    it(\"checks if the ZippedFS object contains correct data\", function () {\n\n        expect(localMemory.T1ZippedFS.contents()).to.include(\"hello/says-hello\") &&\n        expect(localMemory.T1ZippedFS.read(\"hello/says-hello\", 'text')).to.equal(\"Hello\") &&\n        expect(localMemory.T1ZippedFS.contents()).to.include(\"hello/world/says-world\") &&\n        expect(localMemory.T1ZippedFS.read(\"hello/world/says-world\", 'text')).to.equal(\"World\");\n    });\n\n    it(\"unzips a .zip file to disk without errors\", function () {\n\n        fs.mkdirSync(\"./tests/assets/hello-sync-unzip\");\n        zipper.sync.unzip(\"./tests/assets/hello.zip\").save(\"./tests/assets/hello-sync-unzip/\");\n    });\n\n    it(\"should raise an error when an entry is outside extraction path\", function () {\n        fs.mkdirSync(\"./tests/assets/zip-slip-sync\");\n        expect(\n            zipper.sync.unzip(\"./tests/assets/zip-slip.zip\").save(\"./tests/assets/zip-slip-sync\")\n        ).to.throw(\"Entry is outside the extraction path\")\n    });\n\n    it(\"checks if unzipped files on disk contain correct data\", function (done) {\n\n        fs.readFile(\"./tests/assets/hello-sync-unzip/hello/says-hello\", 'utf8', function (err, data) {\n\n            if (err)\n                throw err;\n\n            expect(data).to.equal(\"Hello\");\n\n            fs.readFile(\"./tests/assets/hello-sync-unzip/hello/world/says-world\", 'utf8', function (err, world_data) {\n\n                if (err)\n                    throw err;\n\n                expect(world_data).to.equal(\"World\");\n\n                done();\n            });\n        });\n    });\n\n    it(\"unzips a file directly from the buffer containing it\", function () {\n\n        var buff = fs.readFileSync(\"./tests/assets/hello.zip\");\n\n        localMemory.T5ZippedFS = zipper.sync.unzip(buff).memory();\n    });\n\n    it(\"checks if the ZippedFS object contains correct data\", function () {\n\n        expect(localMemory.T5ZippedFS.contents()).to.include(\"hello/says-hello\") &&\n        expect(localMemory.T5ZippedFS.read(\"hello/says-hello\", 'text')).to.equal(\"Hello\") &&\n        expect(localMemory.T5ZippedFS.contents()).to.include(\"hello/world/says-world\") &&\n        expect(localMemory.T5ZippedFS.read(\"hello/world/says-world\", 'text')).to.equal(\"World\");\n    });\n\n    it(\"uses existing folders without throwing EEXIST error\", function() {\n        zipper.sync.unzip(\"./tests/assets/hello.zip\").save(\"./tests/assets/hello-unzip-exists\");\n    });\n\n});\n"], "filenames": ["tests/unzip.sync.test.js"], "buggy_code_start_loc": [27], "buggy_code_end_loc": [27], "fixing_code_start_loc": [28], "fixing_code_end_loc": [35], "type": "CWE-668", "message": "The package zip-local before 0.3.5 are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) which can lead to an extraction of a crafted file outside the intended extraction directory.", "other": {"cve": {"id": "CVE-2021-23484", "sourceIdentifier": "report@snyk.io", "published": "2022-01-28T22:15:09.010", "lastModified": "2022-02-04T02:00:02.040", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The package zip-local before 0.3.5 are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) which can lead to an extraction of a crafted file outside the intended extraction directory."}, {"lang": "es", "value": "El paquete zip-local versiones anteriores a 0.3.5, es vulnerable a una escritura de archivos arbitrarios por medio de la extracci\u00f3n de archivos (Zip Slip), que puede conllevar a una extracci\u00f3n de un archivo dise\u00f1ado fuera del directorio de extracci\u00f3n previsto"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-668"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zip-local_project:zip-local:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.3.5", "matchCriteriaId": "700EED5A-6499-4376-B7F7-09EC3A8E5000"}]}]}], "references": [{"url": "https://github.com/Mostafa-Samir/zip-local/blob/master/main.js%23L365", "source": "report@snyk.io", "tags": ["Broken Link", "Third Party Advisory"]}, {"url": "https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-ZIPLOCAL-2327477", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Mostafa-Samir/zip-local/commit/949446a95a660c0752b1db0c654f0fd619ae6085"}}