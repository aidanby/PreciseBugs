{"buggy_code": ["import screenfull from './screenfull';\nimport {\n\tchevronLeft,\n\tchevronRight,\n\tclose,\n\tdownloadBold,\n\tfacebook,\n\tframeExpand,\n\tframeMinimize,\n\tloading,\n\tpinterest,\n\tshareArrow,\n\ttwitter,\n\tzoomInBold,\n\tzoomOutBold,\n} from '@elementor/e-icons';\n\nmodule.exports = elementorModules.ViewModule.extend( {\n\toldAspectRatio: null,\n\n\toldAnimation: null,\n\n\tswiper: null,\n\n\tplayer: null,\n\n\tisFontIconSvgExperiment: elementorFrontend.config.experimentalFeatures.e_font_icon_svg,\n\n\tgetDefaultSettings: function() {\n\t\treturn {\n\t\t\tclasses: {\n\t\t\t\taspectRatio: 'elementor-aspect-ratio-%s',\n\t\t\t\titem: 'elementor-lightbox-item',\n\t\t\t\timage: 'elementor-lightbox-image',\n\t\t\t\tvideoContainer: 'elementor-video-container',\n\t\t\t\tvideoWrapper: 'elementor-fit-aspect-ratio',\n\t\t\t\tplayButton: 'elementor-custom-embed-play',\n\t\t\t\tplayButtonIcon: 'fa',\n\t\t\t\tplaying: 'elementor-playing',\n\t\t\t\thidden: 'elementor-hidden',\n\t\t\t\tinvisible: 'elementor-invisible',\n\t\t\t\tpreventClose: 'elementor-lightbox-prevent-close',\n\t\t\t\tslideshow: {\n\t\t\t\t\tcontainer: 'swiper-container',\n\t\t\t\t\tslidesWrapper: 'swiper-wrapper',\n\t\t\t\t\tprevButton: 'elementor-swiper-button elementor-swiper-button-prev',\n\t\t\t\t\tnextButton: 'elementor-swiper-button elementor-swiper-button-next',\n\t\t\t\t\tprevButtonIcon: 'eicon-chevron-left',\n\t\t\t\t\tnextButtonIcon: 'eicon-chevron-right',\n\t\t\t\t\tslide: 'swiper-slide',\n\t\t\t\t\theader: 'elementor-slideshow__header',\n\t\t\t\t\tfooter: 'elementor-slideshow__footer',\n\t\t\t\t\ttitle: 'elementor-slideshow__title',\n\t\t\t\t\tdescription: 'elementor-slideshow__description',\n\t\t\t\t\tcounter: 'elementor-slideshow__counter',\n\t\t\t\t\ticonExpand: 'eicon-frame-expand',\n\t\t\t\t\ticonShrink: 'eicon-frame-minimize',\n\t\t\t\t\ticonZoomIn: 'eicon-zoom-in-bold',\n\t\t\t\t\ticonZoomOut: 'eicon-zoom-out-bold',\n\t\t\t\t\ticonShare: 'eicon-share-arrow',\n\t\t\t\t\tshareMenu: 'elementor-slideshow__share-menu',\n\t\t\t\t\tshareLinks: 'elementor-slideshow__share-links',\n\t\t\t\t\thideUiVisibility: 'elementor-slideshow--ui-hidden',\n\t\t\t\t\tshareMode: 'elementor-slideshow--share-mode',\n\t\t\t\t\tfullscreenMode: 'elementor-slideshow--fullscreen-mode',\n\t\t\t\t\tzoomMode: 'elementor-slideshow--zoom-mode',\n\t\t\t\t},\n\t\t\t},\n\t\t\tselectors: {\n\t\t\t\timage: '.elementor-lightbox-image',\n\t\t\t\tlinks: 'a, [data-elementor-lightbox]',\n\t\t\t\tslideshow: {\n\t\t\t\t\tactiveSlide: '.swiper-slide-active',\n\t\t\t\t\tprevSlide: '.swiper-slide-prev',\n\t\t\t\t\tnextSlide: '.swiper-slide-next',\n\t\t\t\t},\n\t\t\t},\n\t\t\tmodalOptions: {\n\t\t\t\tid: 'elementor-lightbox',\n\t\t\t\tentranceAnimation: 'zoomIn',\n\t\t\t\tvideoAspectRatio: 169,\n\t\t\t\tposition: {\n\t\t\t\t\tenable: false,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\n\tgetModal: function() {\n\t\tif ( ! module.exports.modal ) {\n\t\t\tthis.initModal();\n\t\t}\n\n\t\treturn module.exports.modal;\n\t},\n\n\tinitModal: function() {\n\t\tconst closeIcon = {};\n\n\t\t// If the experiment is active the closeIcon should be an entire SVG element otherwise it should pass the eicon class name.\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\tcloseIcon.iconElement = close.element;\n\t\t} else {\n\t\t\tcloseIcon.iconClass = 'eicon-close';\n\t\t}\n\n\t\tconst modal = module.exports.modal = elementorFrontend.getDialogsManager().createWidget( 'lightbox', {\n\t\t\tclassName: 'elementor-lightbox',\n\t\t\tcloseButton: true,\n\t\t\tcloseButtonOptions: {\n\t\t\t\t...closeIcon,\n\t\t\t\tattributes: {\n\t\t\t\t\ttabindex: 0,\n\t\t\t\t\trole: 'button',\n\t\t\t\t\t'aria-label': elementorFrontend.config.i18n.close + ' (Esc)',\n\t\t\t\t},\n\t\t\t},\n\t\t\tselectors: {\n\t\t\t\tpreventClose: '.' + this.getSettings( 'classes.preventClose' ),\n\t\t\t},\n\t\t\thide: {\n\t\t\t\tonClick: true,\n\t\t\t},\n\t\t} );\n\n\t\tmodal.on( 'hide', function() {\n\t\t\tmodal.setMessage( '' );\n\t\t} );\n\t},\n\n\tshowModal: function( options ) {\n\t\tif ( options.url && ! options.url.startsWith( 'http' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.elements.$closeButton = this.getModal().getElements( 'closeButton' );\n\n\t\tthis.$buttons = this.elements.$closeButton;\n\n\t\tthis.focusedButton = null;\n\n\t\tconst self = this,\n\t\t\tdefaultOptions = self.getDefaultSettings().modalOptions;\n\n\t\tself.id = options.id;\n\n\t\tself.setSettings( 'modalOptions', jQuery.extend( defaultOptions, options.modalOptions ) );\n\n\t\tconst modal = self.getModal();\n\n\t\tmodal.setID( self.getSettings( 'modalOptions.id' ) );\n\n\t\tmodal.onShow = function() {\n\t\t\tDialogsManager.getWidgetType( 'lightbox' ).prototype.onShow.apply( modal, arguments );\n\n\t\t\tself.setEntranceAnimation();\n\t\t};\n\n\t\tmodal.onHide = function() {\n\t\t\tDialogsManager.getWidgetType( 'lightbox' ).prototype.onHide.apply( modal, arguments );\n\n\t\t\tmodal.getElements( 'message' ).removeClass( 'animated' );\n\n\t\t\tif ( screenfull.isFullscreen ) {\n\t\t\t\tself.deactivateFullscreen();\n\t\t\t}\n\n\t\t\tself.unbindHotKeys();\n\t\t};\n\n\t\tswitch ( options.type ) {\n\t\t\tcase 'video':\n\t\t\t\tself.setVideoContent( options );\n\n\t\t\t\tbreak;\n\t\t\tcase 'image':\n\t\t\t\tconst slides = [ {\n\t\t\t\t\timage: options.url,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\ttitle: options.title,\n\t\t\t\t\tdescription: options.description,\n\t\t\t\t} ];\n\n\t\t\t\toptions.slideshow = {\n\t\t\t\t\tslides,\n\t\t\t\t\tswiper: {\n\t\t\t\t\t\tloop: false,\n\t\t\t\t\t\tpagination: false,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase 'slideshow':\n\t\t\t\tself.setSlideshowContent( options.slideshow );\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tself.setHTMLContent( options.html );\n\t\t}\n\n\t\tmodal.show();\n\t},\n\n\tcreateLightbox: function( element ) {\n\t\tlet lightboxData = {};\n\n\t\tif ( element.dataset.elementorLightbox ) {\n\t\t\tlightboxData = JSON.parse( element.dataset.elementorLightbox );\n\t\t}\n\n\t\tif ( lightboxData.type && 'slideshow' !== lightboxData.type ) {\n\t\t\tthis.showModal( lightboxData );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! element.dataset.elementorLightboxSlideshow ) {\n\t\t\tconst slideshowID = 'single-img';\n\n\t\t\tthis.showModal( {\n\t\t\t\ttype: 'image',\n\t\t\t\tid: slideshowID,\n\t\t\t\turl: element.href,\n\t\t\t\ttitle: element.dataset.elementorLightboxTitle,\n\t\t\t\tdescription: element.dataset.elementorLightboxDescription,\n\t\t\t\tmodalOptions: {\n\t\t\t\t\tid: 'elementor-lightbox-slideshow-' + slideshowID,\n\t\t\t\t},\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst initialSlideURL = element.dataset.elementorLightboxVideo || element.href;\n\n\t\tthis.openSlideshow( element.dataset.elementorLightboxSlideshow, initialSlideURL );\n\t},\n\n\tsetHTMLContent: function( html ) {\n\t\tif ( window.elementorCommon ) {\n\t\t\telementorCommon.helpers.hardDeprecated( 'elementorFrontend.utils.lightbox.setHTMLContent', '3.1.4' );\n\t\t}\n\n\t\tthis.getModal().setMessage( html );\n\t},\n\n\tsetVideoContent: function( options ) {\n\t\tconst $ = jQuery,\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\t$videoContainer = $( '<div>', { class: `${ classes.videoContainer } ${ classes.preventClose }` } ),\n\t\t\t$videoWrapper = $( '<div>', { class: classes.videoWrapper } ),\n\t\t\tmodal = this.getModal();\n\n\t\tlet $videoElement;\n\n\t\tif ( 'hosted' === options.videoType ) {\n\t\t\tconst videoParams = $.extend( { src: options.url, autoplay: '' }, options.videoParams );\n\n\t\t\t$videoElement = $( '<video>', videoParams );\n\t\t} else {\n\t\t\tlet apiProvider = elementorFrontend.utils.baseVideoLoader;\n\n\t\t\tif ( -1 !== options.url.indexOf( 'vimeo.com' ) ) {\n\t\t\t\tapiProvider = elementorFrontend.utils.vimeo;\n\t\t\t} else if ( options.url.match( /^(?:https?:\\/\\/)?(?:www\\.)?(?:m\\.)?(?:youtu\\.be\\/|youtube\\.com)/ ) ) {\n\t\t\t\tapiProvider = elementorFrontend.utils.youtube;\n\t\t\t}\n\n\t\t\t$videoElement = $( '<iframe>', { src: apiProvider.getAutoplayURL( options.url ), allowfullscreen: 1 } );\n\t\t}\n\n\t\t$videoContainer.append( $videoWrapper );\n\n\t\t$videoWrapper.append( $videoElement );\n\n\t\tmodal.setMessage( $videoContainer );\n\n\t\tthis.setVideoAspectRatio();\n\n\t\tconst onHideMethod = modal.onHide;\n\n\t\tmodal.onHide = function() {\n\t\t\tonHideMethod();\n\n\t\t\tthis.$buttons = jQuery();\n\t\t\tthis.focusedButton = null;\n\n\t\t\tmodal.getElements( 'message' ).removeClass( 'elementor-fit-aspect-ratio' );\n\t\t};\n\t},\n\n\tgetShareLinks: function() {\n\t\tconst { i18n } = elementorFrontend.config,\n\t\t\tsocialNetworks = {\n\t\t\t\tfacebook: {\n\t\t\t\t\tlabel: i18n.shareOnFacebook,\n\t\t\t\t\ticonElement: facebook,\n\t\t\t\t},\n\t\t\t\ttwitter: {\n\t\t\t\t\tlabel: i18n.shareOnTwitter,\n\t\t\t\t\ticonElement: twitter,\n\t\t\t\t},\n\t\t\t\tpinterest: {\n\t\t\t\t\tlabel: i18n.pinIt,\n\t\t\t\t\ticonElement: pinterest,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$ = jQuery,\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\tselectors = this.getSettings( 'selectors' ),\n\t\t\t$linkList = $( '<div>', { class: classes.slideshow.shareLinks } ),\n\t\t\t$activeSlide = this.getSlide( 'active' ),\n\t\t\t$image = $activeSlide.find( selectors.image ),\n\t\t\tvideoUrl = $activeSlide.data( 'elementor-slideshow-video' );\n\n\t\tlet itemUrl;\n\n\t\tif ( videoUrl ) {\n\t\t\titemUrl = videoUrl;\n\t\t} else {\n\t\t\titemUrl = $image.attr( 'src' );\n\t\t}\n\n\t\t$.each( socialNetworks, ( key, data ) => {\n\t\t\tconst networkLabel = data.label,\n\t\t\t\t$link = $( '<a>', { href: this.createShareLink( key, itemUrl ), target: '_blank' } ).text( networkLabel ),\n\t\t\t\t$socialNetworkIconElement = this.isFontIconSvgExperiment ? $( data.iconElement.element ) : $( '<i>', { class: 'eicon-' + key } );\n\n\t\t\t$link.prepend( $socialNetworkIconElement );\n\t\t\t$linkList.append( $link );\n\t\t} );\n\n\t\tif ( ! videoUrl ) {\n\t\t\tconst $downloadIcon = this.isFontIconSvgExperiment ? $( downloadBold.element ) : $( '<i>', { class: 'eicon-download-bold' } );\n\n\t\t\t$downloadIcon.attr( 'aria-label', i18n.download );\n\n\t\t\t$linkList.append( $( '<a>', { href: itemUrl, download: '' } )\n\t\t\t\t.text( i18n.downloadImage )\n\t\t\t\t.prepend( $downloadIcon ) );\n\t\t}\n\n\t\treturn $linkList;\n\t},\n\n\tcreateShareLink: function( networkName, itemUrl ) {\n\t\tconst options = {};\n\n\t\tif ( 'pinterest' === networkName ) {\n\t\t\toptions.image = encodeURIComponent( itemUrl );\n\t\t} else {\n\t\t\tconst hash = elementorFrontend.utils.urlActions.createActionHash( 'lightbox', {\n\t\t\t\tid: this.id,\n\t\t\t\turl: itemUrl,\n\t\t\t} );\n\n\t\t\toptions.url = encodeURIComponent( location.href.replace( /#.*/, '' ) ) + hash;\n\t\t}\n\n\t\treturn ShareLink.getNetworkLink( networkName, options );\n\t},\n\n\tgetSlideshowHeader: function() {\n\t\tconst { i18n } = elementorFrontend.config,\n\t\t\t$ = jQuery,\n\t\t\tshowCounter = 'yes' === elementorFrontend.getKitSettings( 'lightbox_enable_counter' ),\n\t\t\tshowFullscreen = 'yes' === elementorFrontend.getKitSettings( 'lightbox_enable_fullscreen' ),\n\t\t\tshowZoom = 'yes' === elementorFrontend.getKitSettings( 'lightbox_enable_zoom' ),\n\t\t\tshowShare = 'yes' === elementorFrontend.getKitSettings( 'lightbox_enable_share' ),\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\tslideshowClasses = classes.slideshow,\n\t\t\telements = this.elements;\n\n\t\tif ( ! ( showCounter || showFullscreen || showZoom || showShare ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\telements.$header = $( '<header>', { class: slideshowClasses.header + ' ' + classes.preventClose } );\n\n\t\tif ( showShare ) {\n\t\t\tconst iconElement = this.isFontIconSvgExperiment ? shareArrow.element : '<i>';\n\n\t\t\telements.$iconShare = $( iconElement, {\n\t\t\t\tclass: slideshowClasses.iconShare,\n\t\t\t\trole: 'button',\n\t\t\t\t'aria-label': i18n.share,\n\t\t\t\t'aria-expanded': false,\n\t\t\t} ).append( $( '<span>' ) );\n\n\t\t\tconst $shareLinks = $( '<div>' );\n\n\t\t\t$shareLinks.on( 'click', ( e ) => {\n\t\t\t\te.stopPropagation();\n\t\t\t} );\n\n\t\t\telements.$shareMenu = $( '<div>', { class: slideshowClasses.shareMenu } ).append( $shareLinks );\n\n\t\t\telements.$iconShare.add( elements.$shareMenu ).on( 'click', this.toggleShareMenu );\n\n\t\t\telements.$header.append( elements.$iconShare, elements.$shareMenu );\n\n\t\t\tthis.$buttons = this.$buttons.add( elements.$iconShare );\n\t\t}\n\n\t\tif ( showZoom ) {\n\t\t\tconst iconElement = this.isFontIconSvgExperiment ? zoomInBold.element : '<i>',\n\t\t\t\tshowZoomElements = [],\n\t\t\t\tshowZoomAttrs = {\n\t\t\t\t\trole: 'switch',\n\t\t\t\t\t'aria-checked': false,\n\t\t\t\t\t'aria-label': i18n.zoom,\n\t\t\t\t},\n\t\t\t\tzoomAttrs = {\n\t\t\t\t\t...showZoomAttrs,\n\t\t\t\t};\n\n\t\t\tif ( ! this.isFontIconSvgExperiment ) {\n\t\t\t\tzoomAttrs.class = slideshowClasses.iconZoomIn;\n\t\t\t}\n\n\t\t\telements.$iconZoom = $( iconElement ).attr( zoomAttrs ).on( 'click', this.toggleZoomMode );\n\n\t\t\tshowZoomElements.push( elements.$iconZoom );\n\n\t\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\t\telements.$iconZoomOut = $( zoomOutBold.element )\n\t\t\t\t\t.attr( showZoomAttrs )\n\t\t\t\t\t.addClass( classes.hidden )\n\t\t\t\t\t.on( 'click', this.toggleZoomMode );\n\n\t\t\t\tshowZoomElements.push( elements.$iconZoomOut );\n\t\t\t}\n\n\t\t\telements.$header.append( showZoomElements );\n\n\t\t\tthis.$buttons = this.$buttons.add( showZoomElements );\n\t\t}\n\n\t\tif ( showFullscreen ) {\n\t\t\tconst iconElement = this.isFontIconSvgExperiment ? frameExpand.element : '<i>',\n\t\t\t\tfullScreenElements = [],\n\t\t\t\tfullScreenAttrs = {\n\t\t\t\t\trole: 'switch',\n\t\t\t\t\t'aria-checked': false,\n\t\t\t\t\t'aria-label': i18n.fullscreen,\n\t\t\t\t},\n\t\t\t\texpandAttrs = {\n\t\t\t\t\t...fullScreenAttrs,\n\t\t\t\t};\n\n\t\t\t// Only if the experiment is not active, we use the class-name in order to render the icon.\n\t\t\tif ( ! this.isFontIconSvgExperiment ) {\n\t\t\t\texpandAttrs.class = slideshowClasses.iconExpand;\n\t\t\t}\n\n\t\t\telements.$iconExpand = $( iconElement )\n\t\t\t\t.append( $( '<span>' ), $( '<span>' ) )\n\t\t\t\t.attr( expandAttrs )\n\t\t\t\t.on( 'click', this.toggleFullscreen );\n\n\t\t\tfullScreenElements.push( elements.$iconExpand );\n\n\t\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\t\telements.$iconMinimize = $( frameMinimize.element )\n\t\t\t\t\t.attr( fullScreenAttrs )\n\t\t\t\t\t.addClass( classes.hidden )\n\t\t\t\t\t.on( 'click', this.toggleFullscreen );\n\n\t\t\t\tfullScreenElements.push( elements.$iconMinimize );\n\t\t\t}\n\n\t\t\telements.$header.append( fullScreenElements );\n\t\t\tthis.$buttons = this.$buttons.add( fullScreenElements );\n\t\t}\n\n\t\tif ( showCounter ) {\n\t\t\telements.$counter = $( '<span>', { class: slideshowClasses.counter } );\n\t\t\telements.$header.append( elements.$counter );\n\t\t}\n\n\t\treturn elements.$header;\n\t},\n\n\ttoggleFullscreen: function() {\n\t\tif ( screenfull.isFullscreen ) {\n\t\t\tthis.deactivateFullscreen();\n\t\t} else if ( screenfull.isEnabled ) {\n\t\t\tthis.activateFullscreen();\n\t\t}\n\t},\n\n\ttoggleZoomMode: function() {\n\t\tif ( 1 !== this.swiper.zoom.scale ) {\n\t\t\tthis.deactivateZoom();\n\t\t} else {\n\t\t\tthis.activateZoom();\n\t\t}\n\t},\n\n\ttoggleShareMenu: function() {\n\t\tif ( this.shareMode ) {\n\t\t\tthis.deactivateShareMode();\n\t\t} else {\n\t\t\tthis.elements.$shareMenu.html( this.getShareLinks() );\n\n\t\t\tthis.activateShareMode();\n\t\t}\n\t},\n\n\tactivateShareMode: function() {\n\t\tconst classes = this.getSettings( 'classes' );\n\n\t\tthis.elements.$container.addClass( classes.slideshow.shareMode );\n\n\t\tthis.elements.$iconShare.attr( 'aria-expanded', true );\n\n\t\t// Prevent swiper interactions while in share mode\n\t\tthis.swiper.detachEvents();\n\n\t\t// Temporarily replace tabbable buttons with share-menu items\n\t\tthis.$originalButtons = this.$buttons;\n\t\tthis.$buttons = this.elements.$iconShare.add( this.elements.$shareMenu.find( 'a' ) );\n\n\t\tthis.shareMode = true;\n\t},\n\n\tdeactivateShareMode: function() {\n\t\tconst classes = this.getSettings( 'classes' );\n\n\t\tthis.elements.$container.removeClass( classes.slideshow.shareMode );\n\t\tthis.elements.$iconShare.attr( 'aria-expanded', false );\n\n\t\tthis.swiper.attachEvents();\n\n\t\tthis.$buttons = this.$originalButtons;\n\n\t\tthis.shareMode = false;\n\t},\n\n\tactivateFullscreen: function() {\n\t\tconst classes = this.getSettings( 'classes' );\n\t\tscreenfull.request( this.elements.$container.parents( '.dialog-widget' )[ 0 ] );\n\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\tthis.elements.$iconExpand.addClass( classes.hidden ).attr( 'aria-checked', 'false' );\n\t\t\tthis.elements.$iconMinimize.removeClass( classes.hidden ).attr( 'aria-checked', 'true' );\n\t\t} else {\n\t\t\tthis.elements.$iconExpand\n\t\t\t\t.removeClass( classes.slideshow.iconExpand )\n\t\t\t\t.addClass( classes.slideshow.iconShrink )\n\t\t\t\t.attr( 'aria-checked', 'true' );\n\t\t}\n\n\t\tthis.elements.$container.addClass( classes.slideshow.fullscreenMode );\n\t},\n\n\tdeactivateFullscreen: function() {\n\t\tconst classes = this.getSettings( 'classes' );\n\t\tscreenfull.exit();\n\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\tthis.elements.$iconExpand.removeClass( classes.hidden ).attr( 'aria-checked', 'true' );\n\t\t\tthis.elements.$iconMinimize.addClass( classes.hidden ).attr( 'aria-checked', 'false' );\n\t\t} else {\n\t\t\tthis.elements.$iconExpand\n\t\t\t\t.removeClass( classes.slideshow.iconShrink )\n\t\t\t\t.addClass( classes.slideshow.iconExpand )\n\t\t\t\t.attr( 'aria-checked', 'false' );\n\t\t}\n\n\t\tthis.elements.$container.removeClass( classes.slideshow.fullscreenMode );\n\t},\n\n\tactivateZoom: function() {\n\t\tconst swiper = this.swiper,\n\t\t\telements = this.elements,\n\t\t\tclasses = this.getSettings( 'classes' );\n\n\t\tswiper.zoom.in();\n\t\tswiper.allowSlideNext = false;\n\t\tswiper.allowSlidePrev = false;\n\t\tswiper.allowTouchMove = false;\n\t\telements.$container.addClass( classes.slideshow.zoomMode );\n\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\telements.$iconZoom.addClass( classes.hidden ).attr( 'aria-checked', 'false' );\n\t\t\telements.$iconZoomOut.removeClass( classes.hidden ).attr( 'aria-checked', 'true' );\n\t\t} else {\n\t\t\telements.$iconZoom.removeClass( classes.slideshow.iconZoomIn ).addClass( classes.slideshow.iconZoomOut );\n\t\t}\n\t},\n\n\tdeactivateZoom: function() {\n\t\tconst swiper = this.swiper,\n\t\t\telements = this.elements,\n\t\t\tclasses = this.getSettings( 'classes' );\n\n\t\tswiper.zoom.out();\n\t\tswiper.allowSlideNext = true;\n\t\tswiper.allowSlidePrev = true;\n\t\tswiper.allowTouchMove = true;\n\t\telements.$container.removeClass( classes.slideshow.zoomMode );\n\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\telements.$iconZoom.removeClass( classes.hidden ).attr( 'aria-checked', 'true' );\n\t\t\telements.$iconZoomOut.addClass( classes.hidden ).attr( 'aria-checked', 'false' );\n\t\t} else {\n\t\t\telements.$iconZoom.removeClass( classes.slideshow.iconZoomOut ).addClass( classes.slideshow.iconZoomIn );\n\t\t}\n\t},\n\n\tgetSlideshowFooter: function() {\n\t\tconst $ = jQuery,\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\t$footer = $( '<footer>', { class: classes.slideshow.footer + ' ' + classes.preventClose } ),\n\t\t\t$title = $( '<div>', { class: classes.slideshow.title } ),\n\t\t\t$description = $( '<div>', { class: classes.slideshow.description } );\n\n\t\t$footer.append( $title, $description );\n\n\t\treturn $footer;\n\t},\n\n\tsetSlideshowContent: function( options ) {\n\t\tconst { i18n } = elementorFrontend.config,\n\t\t\t$ = jQuery,\n\t\t\tisSingleSlide = 1 === options.slides.length,\n\t\t\thasTitle = '' !== elementorFrontend.getKitSettings( 'lightbox_title_src' ),\n\t\t\thasDescription = '' !== elementorFrontend.getKitSettings( 'lightbox_description_src' ),\n\t\t\tshowFooter = hasTitle || hasDescription,\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\tslideshowClasses = classes.slideshow,\n\t\t\t$container = $( '<div>', { class: slideshowClasses.container } ),\n\t\t\t$slidesWrapper = $( '<div>', { class: slideshowClasses.slidesWrapper } );\n\n\t\tlet $prevButton, $nextButton;\n\n\t\toptions.slides.forEach( ( slide ) => {\n\t\t\tlet slideClass = slideshowClasses.slide + ' ' + classes.item;\n\n\t\t\tif ( slide.video ) {\n\t\t\t\tslideClass += ' ' + classes.video;\n\t\t\t}\n\n\t\t\tconst $slide = $( '<div>', { class: slideClass } );\n\n\t\t\tif ( slide.video ) {\n\t\t\t\t$slide.attr( 'data-elementor-slideshow-video', slide.video );\n\n\t\t\t\tconst playVideoLoadingElement = this.isFontIconSvgExperiment ? loading.element : '<i>',\n\t\t\t\t\t$playIcon = $( '<div>', { class: classes.playButton } )\n\t\t\t\t\t\t.html( $( playVideoLoadingElement ).attr( 'aria-label', i18n.playVideo ).addClass( classes.playButtonIcon ) );\n\n\t\t\t\t$slide.append( $playIcon );\n\t\t\t} else {\n\t\t\t\tconst $zoomContainer = $( '<div>', { class: 'swiper-zoom-container' } ),\n\t\t\t\t\t$slidePlaceholder = $( '<div class=\"swiper-lazy-preloader\"></div>' ),\n\t\t\t\t\timageAttributes = {\n\t\t\t\t\t\t'data-src': slide.image,\n\t\t\t\t\t\tclass: classes.image + ' ' + classes.preventClose + ' swiper-lazy',\n\t\t\t\t\t};\n\n\t\t\t\tif ( slide.title ) {\n\t\t\t\t\timageAttributes[ 'data-title' ] = slide.title;\n\t\t\t\t\timageAttributes.alt = slide.title;\n\t\t\t\t}\n\n\t\t\t\tif ( slide.description ) {\n\t\t\t\t\timageAttributes[ 'data-description' ] = slide.description;\n\t\t\t\t\timageAttributes.alt += ' - ' + slide.description;\n\t\t\t\t}\n\n\t\t\t\tconst $slideImage = $( '<img>', imageAttributes );\n\n\t\t\t\t$zoomContainer.append( [ $slideImage, $slidePlaceholder ] );\n\t\t\t\t$slide.append( $zoomContainer );\n\t\t\t}\n\n\t\t\t$slidesWrapper.append( $slide );\n\t\t} );\n\n\t\tthis.elements.$container = $container;\n\t\tthis.elements.$header = this.getSlideshowHeader();\n\n\t\t$container\n\t\t\t.prepend( this.elements.$header )\n\t\t\t.append( $slidesWrapper );\n\n\t\tif ( ! isSingleSlide ) {\n\t\t\tconst $prevButtonIcon = this.isFontIconSvgExperiment ? $( chevronLeft.element ) : $( '<i>', { class: slideshowClasses.prevButtonIcon } ),\n\t\t\t\t$nextButtonIcon = this.isFontIconSvgExperiment ? $( chevronRight.element ) : $( '<i>', { class: slideshowClasses.nextButtonIcon } );\n\n\t\t\t$prevButton = $( '<div>', { class: slideshowClasses.prevButton + ' ' + classes.preventClose, 'aria-label': i18n.previous } ).html( $prevButtonIcon );\n\t\t\t$nextButton = $( '<div>', { class: slideshowClasses.nextButton + ' ' + classes.preventClose, 'aria-label': i18n.next } ).html( $nextButtonIcon );\n\n\t\t\t$container.append(\n\t\t\t\t$nextButton,\n\t\t\t\t$prevButton,\n\t\t\t);\n\n\t\t\tthis.$buttons = this.$buttons.add( $nextButton ).add( $prevButton );\n\t\t}\n\n\t\tif ( showFooter ) {\n\t\t\tthis.elements.$footer = this.getSlideshowFooter();\n\t\t\t$container.append( this.elements.$footer );\n\t\t}\n\n\t\tthis.setSettings( 'hideUiTimeout', '' );\n\n\t\t$container.on( 'click mousemove keypress', this.showLightboxUi );\n\n\t\tconst modal = this.getModal();\n\n\t\tmodal.setMessage( $container );\n\n\t\tconst onShowMethod = modal.onShow;\n\n\t\tmodal.onShow = async () => {\n\t\t\tonShowMethod();\n\n\t\t\tconst swiperOptions = {\n\t\t\t\tpagination: {\n\t\t\t\t\tel: '.' + slideshowClasses.counter,\n\t\t\t\t\ttype: 'fraction',\n\t\t\t\t},\n\t\t\t\ton: {\n\t\t\t\t\tslideChangeTransitionEnd: this.onSlideChange,\n\t\t\t\t},\n\t\t\t\tlazy: {\n\t\t\t\t\tloadPrevNext: true,\n\t\t\t\t},\n\t\t\t\tzoom: true,\n\t\t\t\tspaceBetween: 100,\n\t\t\t\tgrabCursor: true,\n\t\t\t\trunCallbacksOnInit: false,\n\t\t\t\tloop: true,\n\t\t\t\tkeyboard: true,\n\t\t\t\thandleElementorBreakpoints: true,\n\t\t\t};\n\n\t\t\tif ( ! isSingleSlide ) {\n\t\t\t\tswiperOptions.navigation = {\n\t\t\t\t\tprevEl: $prevButton,\n\t\t\t\t\tnextEl: $nextButton,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif ( options.swiper ) {\n\t\t\t\t$.extend( swiperOptions, options.swiper );\n\t\t\t}\n\n\t\t\tconst Swiper = elementorFrontend.utils.swiper;\n\n\t\t\tthis.swiper = await new Swiper( $container, swiperOptions );\n\n\t\t\t// Expose the swiper instance in the frontend\n\t\t\t$container.data( 'swiper', this.swiper );\n\n\t\t\tthis.setVideoAspectRatio();\n\n\t\t\tthis.playSlideVideo();\n\n\t\t\tif ( showFooter ) {\n\t\t\t\tthis.updateFooterText();\n\t\t\t}\n\n\t\t\tthis.bindHotKeys();\n\n\t\t\tthis.makeButtonsAccessible();\n\t\t};\n\t},\n\n\tmakeButtonsAccessible: function() {\n\t\tthis.$buttons\n\t\t\t.attr( 'tabindex', 0 )\n\t\t\t.on( 'keypress', ( event ) => {\n\t\t\t\tconst ENTER_KEY = 13,\n\t\t\t\t\tSPACE_KEY = 32;\n\n\t\t\t\tif ( ENTER_KEY === event.which || SPACE_KEY === event.which ) {\n\t\t\t\t\tjQuery( event.currentTarget ).trigger( 'click' );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\n\tshowLightboxUi: function() {\n\t\tconst slideshowClasses = this.getSettings( 'classes' ).slideshow;\n\n\t\tthis.elements.$container.removeClass( slideshowClasses.hideUiVisibility );\n\n\t\tclearTimeout( this.getSettings( 'hideUiTimeout' ) );\n\n\t\tthis.setSettings( 'hideUiTimeout', setTimeout( () => {\n\t\t\tif ( ! this.shareMode ) {\n\t\t\t\tthis.elements.$container.addClass( slideshowClasses.hideUiVisibility );\n\t\t\t}\n\t\t}, 3500 ) );\n\t},\n\n\tbindHotKeys: function() {\n\t\tthis.getModal().getElements( 'window' ).on( 'keydown', this.activeKeyDown );\n\t},\n\n\tunbindHotKeys: function() {\n\t\tthis.getModal().getElements( 'window' ).off( 'keydown', this.activeKeyDown );\n\t},\n\n\tactiveKeyDown: function( event ) {\n\t\tthis.showLightboxUi();\n\n\t\tconst TAB_KEY = 9;\n\n\t\tif ( event.which === TAB_KEY ) {\n\t\t\tconst $buttons = this.$buttons;\n\n\t\t\tlet focusedButton,\n\t\t\t\tisFirst = false,\n\t\t\t\tisLast = false;\n\n\t\t\t$buttons.each( ( index ) => {\n\t\t\t\tconst item = $buttons[ index ];\n\n\t\t\t\tif ( jQuery( item ).is( ':focus' ) ) {\n\t\t\t\t\tfocusedButton = item;\n\t\t\t\t\tisFirst = 0 === index;\n\t\t\t\t\tisLast = $buttons.length - 1 === index;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( event.shiftKey ) {\n\t\t\t\tif ( isFirst ) {\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t$buttons.last().trigger( 'focus' );\n\t\t\t\t}\n\t\t\t} else if ( isLast || ! focusedButton ) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t$buttons.first().trigger( 'focus' );\n\t\t\t}\n\t\t}\n\t},\n\n\tsetVideoAspectRatio: function( aspectRatio ) {\n\t\taspectRatio = aspectRatio || this.getSettings( 'modalOptions.videoAspectRatio' );\n\n\t\tconst $widgetContent = this.getModal().getElements( 'widgetContent' ),\n\t\t\toldAspectRatio = this.oldAspectRatio,\n\t\t\taspectRatioClass = this.getSettings( 'classes.aspectRatio' );\n\n\t\tthis.oldAspectRatio = aspectRatio;\n\n\t\tif ( oldAspectRatio ) {\n\t\t\t$widgetContent.removeClass( aspectRatioClass.replace( '%s', oldAspectRatio ) );\n\t\t}\n\n\t\tif ( aspectRatio ) {\n\t\t\t$widgetContent.addClass( aspectRatioClass.replace( '%s', aspectRatio ) );\n\t\t}\n\t},\n\n\tgetSlide: function( slideState ) {\n\t\treturn jQuery( this.swiper.slides ).filter( this.getSettings( 'selectors.slideshow.' + slideState + 'Slide' ) );\n\t},\n\n\tupdateFooterText: function() {\n\t\tif ( ! this.elements.$footer ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst classes = this.getSettings( 'classes' ),\n\t\t\t$activeSlide = this.getSlide( 'active' ),\n\t\t\t$image = $activeSlide.find( '.elementor-lightbox-image' ),\n\t\t\ttitleText = $image.data( 'title' ),\n\t\t\tdescriptionText = $image.data( 'description' ),\n\t\t\t$title = this.elements.$footer.find( '.' + classes.slideshow.title ),\n\t\t\t$description = this.elements.$footer.find( '.' + classes.slideshow.description );\n\n\t\t$title.text( titleText || '' );\n\t\t$description.text( descriptionText || '' );\n\t},\n\n\tplaySlideVideo: function() {\n\t\tconst $activeSlide = this.getSlide( 'active' ),\n\t\t\tvideoURL = $activeSlide.data( 'elementor-slideshow-video' );\n\n\t\tif ( ! videoURL ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst classes = this.getSettings( 'classes' ),\n\t\t\t$videoContainer = jQuery( '<div>', { class: classes.videoContainer + ' ' + classes.invisible } ),\n\t\t\t$videoWrapper = jQuery( '<div>', { class: classes.videoWrapper } ),\n\t\t\t$playIcon = $activeSlide.children( '.' + classes.playButton );\n\n\t\tlet videoType, apiProvider;\n\n\t\t$videoContainer.append( $videoWrapper );\n\n\t\t$activeSlide.append( $videoContainer );\n\n\t\tif ( -1 !== videoURL.indexOf( 'vimeo.com' ) ) {\n\t\t\tvideoType = 'vimeo';\n\t\t\tapiProvider = elementorFrontend.utils.vimeo;\n\t\t} else if ( videoURL.match( /^(?:https?:\\/\\/)?(?:www\\.)?(?:m\\.)?(?:youtu\\.be\\/|youtube\\.com)/ ) ) {\n\t\t\tvideoType = 'youtube';\n\t\t\tapiProvider = elementorFrontend.utils.youtube;\n\t\t}\n\n\t\tconst videoID = apiProvider.getVideoIDFromURL( videoURL );\n\n\t\tapiProvider.onApiReady( ( apiObject ) => {\n\t\t\tif ( 'youtube' === videoType ) {\n\t\t\t\tthis.prepareYTVideo( apiObject, videoID, $videoContainer, $videoWrapper, $playIcon );\n\t\t\t} else if ( 'vimeo' === videoType ) {\n\t\t\t\tthis.prepareVimeoVideo( apiObject, videoURL, $videoContainer, $videoWrapper, $playIcon );\n\t\t\t}\n\t\t} );\n\n\t\t$playIcon.addClass( classes.playing ).removeClass( classes.hidden );\n\t},\n\n\tprepareYTVideo: function( YT, videoID, $videoContainer, $videoWrapper, $playIcon ) {\n\t\tconst classes = this.getSettings( 'classes' ),\n\t\t\t$videoPlaceholderElement = jQuery( '<div>' );\n\t\tlet startStateCode = YT.PlayerState.PLAYING;\n\n\t\t$videoWrapper.append( $videoPlaceholderElement );\n\n\t\t// Since version 67, Chrome doesn't fire the `PLAYING` state at start time\n\t\tif ( window.chrome ) {\n\t\t\tstartStateCode = YT.PlayerState.UNSTARTED;\n\t\t}\n\n\t\t$videoContainer.addClass( 'elementor-loading' + ' ' + classes.invisible );\n\n\t\tthis.player = new YT.Player( $videoPlaceholderElement[ 0 ], {\n\t\t\tvideoId: videoID,\n\t\t\tevents: {\n\t\t\t\tonReady: () => {\n\t\t\t\t\t$playIcon.addClass( classes.hidden );\n\n\t\t\t\t\t$videoContainer.removeClass( classes.invisible );\n\n\t\t\t\t\tthis.player.playVideo();\n\t\t\t\t},\n\t\t\t\tonStateChange: ( event ) => {\n\t\t\t\t\tif ( event.data === startStateCode ) {\n\t\t\t\t\t\t$videoContainer.removeClass( 'elementor-loading' + ' ' + classes.invisible );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tplayerVars: {\n\t\t\t\tcontrols: 0,\n\t\t\t\trel: 0,\n\t\t\t},\n\t\t} );\n\t},\n\n\tprepareVimeoVideo: function( Vimeo, videoURL, $videoContainer, $videoWrapper, $playIcon ) {\n\t\tconst classes = this.getSettings( 'classes' ),\n\t\t\tvimeoOptions = {\n\t\t\t\turl: videoURL,\n\t\t\t\tautoplay: true,\n\t\t\t\ttransparent: false,\n\t\t\t\tplaysinline: false,\n\t\t\t};\n\n\t\tthis.player = new Vimeo.Player( $videoWrapper, vimeoOptions );\n\n\t\tthis.player.ready().then( () => {\n\t\t\t$playIcon.addClass( classes.hidden );\n\n\t\t\t$videoContainer.removeClass( classes.invisible );\n\t\t} );\n\t},\n\n\tsetEntranceAnimation: function( animation ) {\n\t\tanimation = animation || elementorFrontend.getCurrentDeviceSetting( this.getSettings( 'modalOptions' ), 'entranceAnimation' );\n\n\t\tconst $widgetMessage = this.getModal().getElements( 'message' );\n\n\t\tif ( this.oldAnimation ) {\n\t\t\t$widgetMessage.removeClass( this.oldAnimation );\n\t\t}\n\n\t\tthis.oldAnimation = animation;\n\n\t\tif ( animation ) {\n\t\t\t$widgetMessage.addClass( 'animated ' + animation );\n\t\t}\n\t},\n\n\topenSlideshow: function( slideshowID, initialSlideURL ) {\n\t\tconst $allSlideshowLinks = jQuery( this.getSettings( 'selectors.links' ) ).filter( ( index, element ) => {\n\t\t\tconst $element = jQuery( element );\n\n\t\t\treturn slideshowID === element.dataset.elementorLightboxSlideshow && ! $element.parent( '.swiper-slide-duplicate' ).length && ! $element.parents( '.slick-cloned' ).length;\n\t\t} );\n\n\t\tconst slides = [];\n\n\t\tlet initialSlideIndex = 0;\n\n\t\t$allSlideshowLinks.each( function() {\n\t\t\tconst slideVideo = this.dataset.elementorLightboxVideo;\n\n\t\t\tlet slideIndex = this.dataset.elementorLightboxIndex;\n\n\t\t\tif ( undefined === slideIndex ) {\n\t\t\t\tslideIndex = $allSlideshowLinks.index( this );\n\t\t\t}\n\n\t\t\tif ( initialSlideURL === this.href || ( slideVideo && initialSlideURL === slideVideo ) ) {\n\t\t\t\tinitialSlideIndex = slideIndex;\n\t\t\t}\n\n\t\t\tconst slideData = {\n\t\t\t\timage: this.href,\n\t\t\t\tindex: slideIndex,\n\t\t\t\ttitle: this.dataset.elementorLightboxTitle,\n\t\t\t\tdescription: this.dataset.elementorLightboxDescription,\n\t\t\t};\n\n\t\t\tif ( slideVideo ) {\n\t\t\t\tslideData.video = slideVideo;\n\t\t\t}\n\n\t\t\tslides.push( slideData );\n\t\t} );\n\n\t\tslides.sort( ( a, b ) => a.index - b.index );\n\n\t\tthis.showModal( {\n\t\t\ttype: 'slideshow',\n\t\t\tid: slideshowID,\n\t\t\tmodalOptions: {\n\t\t\t\tid: 'elementor-lightbox-slideshow-' + slideshowID,\n\t\t\t},\n\t\t\tslideshow: {\n\t\t\t\tslides: slides,\n\t\t\t\tswiper: {\n\t\t\t\t\tinitialSlide: +initialSlideIndex,\n\t\t\t\t},\n\t\t\t},\n\t\t} );\n\t},\n\n\tonSlideChange: function() {\n\t\tthis\n\t\t\t.getSlide( 'prev' )\n\t\t\t.add( this.getSlide( 'next' ) )\n\t\t\t.add( this.getSlide( 'active' ) )\n\t\t\t.find( '.' + this.getSettings( 'classes.videoWrapper' ) )\n\t\t\t.remove();\n\n\t\tthis.playSlideVideo();\n\n\t\tthis.updateFooterText();\n\t},\n} );\n"], "fixing_code": ["import screenfull from './screenfull';\nimport {\n\tchevronLeft,\n\tchevronRight,\n\tclose,\n\tdownloadBold,\n\tfacebook,\n\tframeExpand,\n\tframeMinimize,\n\tloading,\n\tpinterest,\n\tshareArrow,\n\ttwitter,\n\tzoomInBold,\n\tzoomOutBold,\n} from '@elementor/e-icons';\n\nmodule.exports = elementorModules.ViewModule.extend( {\n\toldAspectRatio: null,\n\n\toldAnimation: null,\n\n\tswiper: null,\n\n\tplayer: null,\n\n\tisFontIconSvgExperiment: elementorFrontend.config.experimentalFeatures.e_font_icon_svg,\n\n\tgetDefaultSettings: function() {\n\t\treturn {\n\t\t\tclasses: {\n\t\t\t\taspectRatio: 'elementor-aspect-ratio-%s',\n\t\t\t\titem: 'elementor-lightbox-item',\n\t\t\t\timage: 'elementor-lightbox-image',\n\t\t\t\tvideoContainer: 'elementor-video-container',\n\t\t\t\tvideoWrapper: 'elementor-fit-aspect-ratio',\n\t\t\t\tplayButton: 'elementor-custom-embed-play',\n\t\t\t\tplayButtonIcon: 'fa',\n\t\t\t\tplaying: 'elementor-playing',\n\t\t\t\thidden: 'elementor-hidden',\n\t\t\t\tinvisible: 'elementor-invisible',\n\t\t\t\tpreventClose: 'elementor-lightbox-prevent-close',\n\t\t\t\tslideshow: {\n\t\t\t\t\tcontainer: 'swiper-container',\n\t\t\t\t\tslidesWrapper: 'swiper-wrapper',\n\t\t\t\t\tprevButton: 'elementor-swiper-button elementor-swiper-button-prev',\n\t\t\t\t\tnextButton: 'elementor-swiper-button elementor-swiper-button-next',\n\t\t\t\t\tprevButtonIcon: 'eicon-chevron-left',\n\t\t\t\t\tnextButtonIcon: 'eicon-chevron-right',\n\t\t\t\t\tslide: 'swiper-slide',\n\t\t\t\t\theader: 'elementor-slideshow__header',\n\t\t\t\t\tfooter: 'elementor-slideshow__footer',\n\t\t\t\t\ttitle: 'elementor-slideshow__title',\n\t\t\t\t\tdescription: 'elementor-slideshow__description',\n\t\t\t\t\tcounter: 'elementor-slideshow__counter',\n\t\t\t\t\ticonExpand: 'eicon-frame-expand',\n\t\t\t\t\ticonShrink: 'eicon-frame-minimize',\n\t\t\t\t\ticonZoomIn: 'eicon-zoom-in-bold',\n\t\t\t\t\ticonZoomOut: 'eicon-zoom-out-bold',\n\t\t\t\t\ticonShare: 'eicon-share-arrow',\n\t\t\t\t\tshareMenu: 'elementor-slideshow__share-menu',\n\t\t\t\t\tshareLinks: 'elementor-slideshow__share-links',\n\t\t\t\t\thideUiVisibility: 'elementor-slideshow--ui-hidden',\n\t\t\t\t\tshareMode: 'elementor-slideshow--share-mode',\n\t\t\t\t\tfullscreenMode: 'elementor-slideshow--fullscreen-mode',\n\t\t\t\t\tzoomMode: 'elementor-slideshow--zoom-mode',\n\t\t\t\t},\n\t\t\t},\n\t\t\tselectors: {\n\t\t\t\timage: '.elementor-lightbox-image',\n\t\t\t\tlinks: 'a, [data-elementor-lightbox]',\n\t\t\t\tslideshow: {\n\t\t\t\t\tactiveSlide: '.swiper-slide-active',\n\t\t\t\t\tprevSlide: '.swiper-slide-prev',\n\t\t\t\t\tnextSlide: '.swiper-slide-next',\n\t\t\t\t},\n\t\t\t},\n\t\t\tmodalOptions: {\n\t\t\t\tid: 'elementor-lightbox',\n\t\t\t\tentranceAnimation: 'zoomIn',\n\t\t\t\tvideoAspectRatio: 169,\n\t\t\t\tposition: {\n\t\t\t\t\tenable: false,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\n\tgetModal: function() {\n\t\tif ( ! module.exports.modal ) {\n\t\t\tthis.initModal();\n\t\t}\n\n\t\treturn module.exports.modal;\n\t},\n\n\tinitModal: function() {\n\t\tconst closeIcon = {};\n\n\t\t// If the experiment is active the closeIcon should be an entire SVG element otherwise it should pass the eicon class name.\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\tcloseIcon.iconElement = close.element;\n\t\t} else {\n\t\t\tcloseIcon.iconClass = 'eicon-close';\n\t\t}\n\n\t\tconst modal = module.exports.modal = elementorFrontend.getDialogsManager().createWidget( 'lightbox', {\n\t\t\tclassName: 'elementor-lightbox',\n\t\t\tcloseButton: true,\n\t\t\tcloseButtonOptions: {\n\t\t\t\t...closeIcon,\n\t\t\t\tattributes: {\n\t\t\t\t\ttabindex: 0,\n\t\t\t\t\trole: 'button',\n\t\t\t\t\t'aria-label': elementorFrontend.config.i18n.close + ' (Esc)',\n\t\t\t\t},\n\t\t\t},\n\t\t\tselectors: {\n\t\t\t\tpreventClose: '.' + this.getSettings( 'classes.preventClose' ),\n\t\t\t},\n\t\t\thide: {\n\t\t\t\tonClick: true,\n\t\t\t},\n\t\t} );\n\n\t\tmodal.on( 'hide', function() {\n\t\t\tmodal.setMessage( '' );\n\t\t} );\n\t},\n\n\tshowModal: function( options ) {\n\t\tif ( options.url && ! options.url.startsWith( 'http' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.elements.$closeButton = this.getModal().getElements( 'closeButton' );\n\n\t\tthis.$buttons = this.elements.$closeButton;\n\n\t\tthis.focusedButton = null;\n\n\t\tconst self = this,\n\t\t\tdefaultOptions = self.getDefaultSettings().modalOptions;\n\n\t\tself.id = options.id;\n\n\t\tself.setSettings( 'modalOptions', jQuery.extend( defaultOptions, options.modalOptions ) );\n\n\t\tconst modal = self.getModal();\n\n\t\tmodal.setID( self.getSettings( 'modalOptions.id' ) );\n\n\t\tmodal.onShow = function() {\n\t\t\tDialogsManager.getWidgetType( 'lightbox' ).prototype.onShow.apply( modal, arguments );\n\n\t\t\tself.setEntranceAnimation();\n\t\t};\n\n\t\tmodal.onHide = function() {\n\t\t\tDialogsManager.getWidgetType( 'lightbox' ).prototype.onHide.apply( modal, arguments );\n\n\t\t\tmodal.getElements( 'message' ).removeClass( 'animated' );\n\n\t\t\tif ( screenfull.isFullscreen ) {\n\t\t\t\tself.deactivateFullscreen();\n\t\t\t}\n\n\t\t\tself.unbindHotKeys();\n\t\t};\n\n\t\tswitch ( options.type ) {\n\t\t\tcase 'video':\n\t\t\t\tself.setVideoContent( options );\n\n\t\t\t\tbreak;\n\t\t\tcase 'image':\n\t\t\t\tconst slides = [ {\n\t\t\t\t\timage: options.url,\n\t\t\t\t\tindex: 0,\n\t\t\t\t\ttitle: options.title,\n\t\t\t\t\tdescription: options.description,\n\t\t\t\t} ];\n\n\t\t\t\toptions.slideshow = {\n\t\t\t\t\tslides,\n\t\t\t\t\tswiper: {\n\t\t\t\t\t\tloop: false,\n\t\t\t\t\t\tpagination: false,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tcase 'slideshow':\n\t\t\t\tself.setSlideshowContent( options.slideshow );\n\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tself.setHTMLContent( options.html );\n\t\t}\n\n\t\tmodal.show();\n\t},\n\n\tcreateLightbox: function( element ) {\n\t\tlet lightboxData = {};\n\n\t\tif ( element.dataset.elementorLightbox ) {\n\t\t\tlightboxData = JSON.parse( element.dataset.elementorLightbox );\n\t\t}\n\n\t\tif ( lightboxData.type && 'slideshow' !== lightboxData.type ) {\n\t\t\tthis.showModal( lightboxData );\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! element.dataset.elementorLightboxSlideshow ) {\n\t\t\tconst slideshowID = 'single-img';\n\n\t\t\tthis.showModal( {\n\t\t\t\ttype: 'image',\n\t\t\t\tid: slideshowID,\n\t\t\t\turl: element.href,\n\t\t\t\ttitle: element.dataset.elementorLightboxTitle,\n\t\t\t\tdescription: element.dataset.elementorLightboxDescription,\n\t\t\t\tmodalOptions: {\n\t\t\t\t\tid: 'elementor-lightbox-slideshow-' + slideshowID,\n\t\t\t\t},\n\t\t\t} );\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst initialSlideURL = element.dataset.elementorLightboxVideo || element.href;\n\n\t\tthis.openSlideshow( element.dataset.elementorLightboxSlideshow, initialSlideURL );\n\t},\n\n\tsetHTMLContent: function( html ) {\n\t\tif ( window.elementorCommon ) {\n\t\t\telementorCommon.helpers.hardDeprecated( 'elementorFrontend.utils.lightbox.setHTMLContent', '3.1.4' );\n\t\t}\n\n\t\tthis.getModal().setMessage( html );\n\t},\n\n\tsetVideoContent: function( options ) {\n\t\tconst $ = jQuery,\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\t$videoContainer = $( '<div>', { class: `${ classes.videoContainer } ${ classes.preventClose }` } ),\n\t\t\t$videoWrapper = $( '<div>', { class: classes.videoWrapper } ),\n\t\t\tmodal = this.getModal();\n\n\t\tlet $videoElement;\n\n\t\tif ( 'hosted' === options.videoType ) {\n\t\t\tconst videoParams = $.extend( { src: options.url, autoplay: '' }, options.videoParams );\n\n\t\t\t$videoElement = $( '<video>', videoParams );\n\t\t} else {\n\t\t\tlet apiProvider;\n\n\t\t\tif ( -1 !== options.url.indexOf( 'vimeo.com' ) ) {\n\t\t\t\tapiProvider = elementorFrontend.utils.vimeo;\n\t\t\t} else if ( options.url.match( /^(?:https?:\\/\\/)?(?:www\\.)?(?:m\\.)?(?:youtu\\.be\\/|youtube\\.com)/ ) ) {\n\t\t\t\tapiProvider = elementorFrontend.utils.youtube;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$videoElement = $( '<iframe>', { src: apiProvider.getAutoplayURL( options.url ), allowfullscreen: 1 } );\n\t\t}\n\n\t\t$videoContainer.append( $videoWrapper );\n\n\t\t$videoWrapper.append( $videoElement );\n\n\t\tmodal.setMessage( $videoContainer );\n\n\t\tthis.setVideoAspectRatio();\n\n\t\tconst onHideMethod = modal.onHide;\n\n\t\tmodal.onHide = function() {\n\t\t\tonHideMethod();\n\n\t\t\tthis.$buttons = jQuery();\n\t\t\tthis.focusedButton = null;\n\n\t\t\tmodal.getElements( 'message' ).removeClass( 'elementor-fit-aspect-ratio' );\n\t\t};\n\t},\n\n\tgetShareLinks: function() {\n\t\tconst { i18n } = elementorFrontend.config,\n\t\t\tsocialNetworks = {\n\t\t\t\tfacebook: {\n\t\t\t\t\tlabel: i18n.shareOnFacebook,\n\t\t\t\t\ticonElement: facebook,\n\t\t\t\t},\n\t\t\t\ttwitter: {\n\t\t\t\t\tlabel: i18n.shareOnTwitter,\n\t\t\t\t\ticonElement: twitter,\n\t\t\t\t},\n\t\t\t\tpinterest: {\n\t\t\t\t\tlabel: i18n.pinIt,\n\t\t\t\t\ticonElement: pinterest,\n\t\t\t\t},\n\t\t\t},\n\t\t\t$ = jQuery,\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\tselectors = this.getSettings( 'selectors' ),\n\t\t\t$linkList = $( '<div>', { class: classes.slideshow.shareLinks } ),\n\t\t\t$activeSlide = this.getSlide( 'active' ),\n\t\t\t$image = $activeSlide.find( selectors.image ),\n\t\t\tvideoUrl = $activeSlide.data( 'elementor-slideshow-video' );\n\n\t\tlet itemUrl;\n\n\t\tif ( videoUrl ) {\n\t\t\titemUrl = videoUrl;\n\t\t} else {\n\t\t\titemUrl = $image.attr( 'src' );\n\t\t}\n\n\t\t$.each( socialNetworks, ( key, data ) => {\n\t\t\tconst networkLabel = data.label,\n\t\t\t\t$link = $( '<a>', { href: this.createShareLink( key, itemUrl ), target: '_blank' } ).text( networkLabel ),\n\t\t\t\t$socialNetworkIconElement = this.isFontIconSvgExperiment ? $( data.iconElement.element ) : $( '<i>', { class: 'eicon-' + key } );\n\n\t\t\t$link.prepend( $socialNetworkIconElement );\n\t\t\t$linkList.append( $link );\n\t\t} );\n\n\t\tif ( ! videoUrl ) {\n\t\t\tconst $downloadIcon = this.isFontIconSvgExperiment ? $( downloadBold.element ) : $( '<i>', { class: 'eicon-download-bold' } );\n\n\t\t\t$downloadIcon.attr( 'aria-label', i18n.download );\n\n\t\t\t$linkList.append( $( '<a>', { href: itemUrl, download: '' } )\n\t\t\t\t.text( i18n.downloadImage )\n\t\t\t\t.prepend( $downloadIcon ) );\n\t\t}\n\n\t\treturn $linkList;\n\t},\n\n\tcreateShareLink: function( networkName, itemUrl ) {\n\t\tconst options = {};\n\n\t\tif ( 'pinterest' === networkName ) {\n\t\t\toptions.image = encodeURIComponent( itemUrl );\n\t\t} else {\n\t\t\tconst hash = elementorFrontend.utils.urlActions.createActionHash( 'lightbox', {\n\t\t\t\tid: this.id,\n\t\t\t\turl: itemUrl,\n\t\t\t} );\n\n\t\t\toptions.url = encodeURIComponent( location.href.replace( /#.*/, '' ) ) + hash;\n\t\t}\n\n\t\treturn ShareLink.getNetworkLink( networkName, options );\n\t},\n\n\tgetSlideshowHeader: function() {\n\t\tconst { i18n } = elementorFrontend.config,\n\t\t\t$ = jQuery,\n\t\t\tshowCounter = 'yes' === elementorFrontend.getKitSettings( 'lightbox_enable_counter' ),\n\t\t\tshowFullscreen = 'yes' === elementorFrontend.getKitSettings( 'lightbox_enable_fullscreen' ),\n\t\t\tshowZoom = 'yes' === elementorFrontend.getKitSettings( 'lightbox_enable_zoom' ),\n\t\t\tshowShare = 'yes' === elementorFrontend.getKitSettings( 'lightbox_enable_share' ),\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\tslideshowClasses = classes.slideshow,\n\t\t\telements = this.elements;\n\n\t\tif ( ! ( showCounter || showFullscreen || showZoom || showShare ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\telements.$header = $( '<header>', { class: slideshowClasses.header + ' ' + classes.preventClose } );\n\n\t\tif ( showShare ) {\n\t\t\tconst iconElement = this.isFontIconSvgExperiment ? shareArrow.element : '<i>';\n\n\t\t\telements.$iconShare = $( iconElement, {\n\t\t\t\tclass: slideshowClasses.iconShare,\n\t\t\t\trole: 'button',\n\t\t\t\t'aria-label': i18n.share,\n\t\t\t\t'aria-expanded': false,\n\t\t\t} ).append( $( '<span>' ) );\n\n\t\t\tconst $shareLinks = $( '<div>' );\n\n\t\t\t$shareLinks.on( 'click', ( e ) => {\n\t\t\t\te.stopPropagation();\n\t\t\t} );\n\n\t\t\telements.$shareMenu = $( '<div>', { class: slideshowClasses.shareMenu } ).append( $shareLinks );\n\n\t\t\telements.$iconShare.add( elements.$shareMenu ).on( 'click', this.toggleShareMenu );\n\n\t\t\telements.$header.append( elements.$iconShare, elements.$shareMenu );\n\n\t\t\tthis.$buttons = this.$buttons.add( elements.$iconShare );\n\t\t}\n\n\t\tif ( showZoom ) {\n\t\t\tconst iconElement = this.isFontIconSvgExperiment ? zoomInBold.element : '<i>',\n\t\t\t\tshowZoomElements = [],\n\t\t\t\tshowZoomAttrs = {\n\t\t\t\t\trole: 'switch',\n\t\t\t\t\t'aria-checked': false,\n\t\t\t\t\t'aria-label': i18n.zoom,\n\t\t\t\t},\n\t\t\t\tzoomAttrs = {\n\t\t\t\t\t...showZoomAttrs,\n\t\t\t\t};\n\n\t\t\tif ( ! this.isFontIconSvgExperiment ) {\n\t\t\t\tzoomAttrs.class = slideshowClasses.iconZoomIn;\n\t\t\t}\n\n\t\t\telements.$iconZoom = $( iconElement ).attr( zoomAttrs ).on( 'click', this.toggleZoomMode );\n\n\t\t\tshowZoomElements.push( elements.$iconZoom );\n\n\t\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\t\telements.$iconZoomOut = $( zoomOutBold.element )\n\t\t\t\t\t.attr( showZoomAttrs )\n\t\t\t\t\t.addClass( classes.hidden )\n\t\t\t\t\t.on( 'click', this.toggleZoomMode );\n\n\t\t\t\tshowZoomElements.push( elements.$iconZoomOut );\n\t\t\t}\n\n\t\t\telements.$header.append( showZoomElements );\n\n\t\t\tthis.$buttons = this.$buttons.add( showZoomElements );\n\t\t}\n\n\t\tif ( showFullscreen ) {\n\t\t\tconst iconElement = this.isFontIconSvgExperiment ? frameExpand.element : '<i>',\n\t\t\t\tfullScreenElements = [],\n\t\t\t\tfullScreenAttrs = {\n\t\t\t\t\trole: 'switch',\n\t\t\t\t\t'aria-checked': false,\n\t\t\t\t\t'aria-label': i18n.fullscreen,\n\t\t\t\t},\n\t\t\t\texpandAttrs = {\n\t\t\t\t\t...fullScreenAttrs,\n\t\t\t\t};\n\n\t\t\t// Only if the experiment is not active, we use the class-name in order to render the icon.\n\t\t\tif ( ! this.isFontIconSvgExperiment ) {\n\t\t\t\texpandAttrs.class = slideshowClasses.iconExpand;\n\t\t\t}\n\n\t\t\telements.$iconExpand = $( iconElement )\n\t\t\t\t.append( $( '<span>' ), $( '<span>' ) )\n\t\t\t\t.attr( expandAttrs )\n\t\t\t\t.on( 'click', this.toggleFullscreen );\n\n\t\t\tfullScreenElements.push( elements.$iconExpand );\n\n\t\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\t\telements.$iconMinimize = $( frameMinimize.element )\n\t\t\t\t\t.attr( fullScreenAttrs )\n\t\t\t\t\t.addClass( classes.hidden )\n\t\t\t\t\t.on( 'click', this.toggleFullscreen );\n\n\t\t\t\tfullScreenElements.push( elements.$iconMinimize );\n\t\t\t}\n\n\t\t\telements.$header.append( fullScreenElements );\n\t\t\tthis.$buttons = this.$buttons.add( fullScreenElements );\n\t\t}\n\n\t\tif ( showCounter ) {\n\t\t\telements.$counter = $( '<span>', { class: slideshowClasses.counter } );\n\t\t\telements.$header.append( elements.$counter );\n\t\t}\n\n\t\treturn elements.$header;\n\t},\n\n\ttoggleFullscreen: function() {\n\t\tif ( screenfull.isFullscreen ) {\n\t\t\tthis.deactivateFullscreen();\n\t\t} else if ( screenfull.isEnabled ) {\n\t\t\tthis.activateFullscreen();\n\t\t}\n\t},\n\n\ttoggleZoomMode: function() {\n\t\tif ( 1 !== this.swiper.zoom.scale ) {\n\t\t\tthis.deactivateZoom();\n\t\t} else {\n\t\t\tthis.activateZoom();\n\t\t}\n\t},\n\n\ttoggleShareMenu: function() {\n\t\tif ( this.shareMode ) {\n\t\t\tthis.deactivateShareMode();\n\t\t} else {\n\t\t\tthis.elements.$shareMenu.html( this.getShareLinks() );\n\n\t\t\tthis.activateShareMode();\n\t\t}\n\t},\n\n\tactivateShareMode: function() {\n\t\tconst classes = this.getSettings( 'classes' );\n\n\t\tthis.elements.$container.addClass( classes.slideshow.shareMode );\n\n\t\tthis.elements.$iconShare.attr( 'aria-expanded', true );\n\n\t\t// Prevent swiper interactions while in share mode\n\t\tthis.swiper.detachEvents();\n\n\t\t// Temporarily replace tabbable buttons with share-menu items\n\t\tthis.$originalButtons = this.$buttons;\n\t\tthis.$buttons = this.elements.$iconShare.add( this.elements.$shareMenu.find( 'a' ) );\n\n\t\tthis.shareMode = true;\n\t},\n\n\tdeactivateShareMode: function() {\n\t\tconst classes = this.getSettings( 'classes' );\n\n\t\tthis.elements.$container.removeClass( classes.slideshow.shareMode );\n\t\tthis.elements.$iconShare.attr( 'aria-expanded', false );\n\n\t\tthis.swiper.attachEvents();\n\n\t\tthis.$buttons = this.$originalButtons;\n\n\t\tthis.shareMode = false;\n\t},\n\n\tactivateFullscreen: function() {\n\t\tconst classes = this.getSettings( 'classes' );\n\t\tscreenfull.request( this.elements.$container.parents( '.dialog-widget' )[ 0 ] );\n\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\tthis.elements.$iconExpand.addClass( classes.hidden ).attr( 'aria-checked', 'false' );\n\t\t\tthis.elements.$iconMinimize.removeClass( classes.hidden ).attr( 'aria-checked', 'true' );\n\t\t} else {\n\t\t\tthis.elements.$iconExpand\n\t\t\t\t.removeClass( classes.slideshow.iconExpand )\n\t\t\t\t.addClass( classes.slideshow.iconShrink )\n\t\t\t\t.attr( 'aria-checked', 'true' );\n\t\t}\n\n\t\tthis.elements.$container.addClass( classes.slideshow.fullscreenMode );\n\t},\n\n\tdeactivateFullscreen: function() {\n\t\tconst classes = this.getSettings( 'classes' );\n\t\tscreenfull.exit();\n\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\tthis.elements.$iconExpand.removeClass( classes.hidden ).attr( 'aria-checked', 'true' );\n\t\t\tthis.elements.$iconMinimize.addClass( classes.hidden ).attr( 'aria-checked', 'false' );\n\t\t} else {\n\t\t\tthis.elements.$iconExpand\n\t\t\t\t.removeClass( classes.slideshow.iconShrink )\n\t\t\t\t.addClass( classes.slideshow.iconExpand )\n\t\t\t\t.attr( 'aria-checked', 'false' );\n\t\t}\n\n\t\tthis.elements.$container.removeClass( classes.slideshow.fullscreenMode );\n\t},\n\n\tactivateZoom: function() {\n\t\tconst swiper = this.swiper,\n\t\t\telements = this.elements,\n\t\t\tclasses = this.getSettings( 'classes' );\n\n\t\tswiper.zoom.in();\n\t\tswiper.allowSlideNext = false;\n\t\tswiper.allowSlidePrev = false;\n\t\tswiper.allowTouchMove = false;\n\t\telements.$container.addClass( classes.slideshow.zoomMode );\n\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\telements.$iconZoom.addClass( classes.hidden ).attr( 'aria-checked', 'false' );\n\t\t\telements.$iconZoomOut.removeClass( classes.hidden ).attr( 'aria-checked', 'true' );\n\t\t} else {\n\t\t\telements.$iconZoom.removeClass( classes.slideshow.iconZoomIn ).addClass( classes.slideshow.iconZoomOut );\n\t\t}\n\t},\n\n\tdeactivateZoom: function() {\n\t\tconst swiper = this.swiper,\n\t\t\telements = this.elements,\n\t\t\tclasses = this.getSettings( 'classes' );\n\n\t\tswiper.zoom.out();\n\t\tswiper.allowSlideNext = true;\n\t\tswiper.allowSlidePrev = true;\n\t\tswiper.allowTouchMove = true;\n\t\telements.$container.removeClass( classes.slideshow.zoomMode );\n\n\t\tif ( this.isFontIconSvgExperiment ) {\n\t\t\telements.$iconZoom.removeClass( classes.hidden ).attr( 'aria-checked', 'true' );\n\t\t\telements.$iconZoomOut.addClass( classes.hidden ).attr( 'aria-checked', 'false' );\n\t\t} else {\n\t\t\telements.$iconZoom.removeClass( classes.slideshow.iconZoomOut ).addClass( classes.slideshow.iconZoomIn );\n\t\t}\n\t},\n\n\tgetSlideshowFooter: function() {\n\t\tconst $ = jQuery,\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\t$footer = $( '<footer>', { class: classes.slideshow.footer + ' ' + classes.preventClose } ),\n\t\t\t$title = $( '<div>', { class: classes.slideshow.title } ),\n\t\t\t$description = $( '<div>', { class: classes.slideshow.description } );\n\n\t\t$footer.append( $title, $description );\n\n\t\treturn $footer;\n\t},\n\n\tsetSlideshowContent: function( options ) {\n\t\tconst { i18n } = elementorFrontend.config,\n\t\t\t$ = jQuery,\n\t\t\tisSingleSlide = 1 === options.slides.length,\n\t\t\thasTitle = '' !== elementorFrontend.getKitSettings( 'lightbox_title_src' ),\n\t\t\thasDescription = '' !== elementorFrontend.getKitSettings( 'lightbox_description_src' ),\n\t\t\tshowFooter = hasTitle || hasDescription,\n\t\t\tclasses = this.getSettings( 'classes' ),\n\t\t\tslideshowClasses = classes.slideshow,\n\t\t\t$container = $( '<div>', { class: slideshowClasses.container } ),\n\t\t\t$slidesWrapper = $( '<div>', { class: slideshowClasses.slidesWrapper } );\n\n\t\tlet $prevButton, $nextButton;\n\n\t\toptions.slides.forEach( ( slide ) => {\n\t\t\tlet slideClass = slideshowClasses.slide + ' ' + classes.item;\n\n\t\t\tif ( slide.video ) {\n\t\t\t\tslideClass += ' ' + classes.video;\n\t\t\t}\n\n\t\t\tconst $slide = $( '<div>', { class: slideClass } );\n\n\t\t\tif ( slide.video ) {\n\t\t\t\t$slide.attr( 'data-elementor-slideshow-video', slide.video );\n\n\t\t\t\tconst playVideoLoadingElement = this.isFontIconSvgExperiment ? loading.element : '<i>',\n\t\t\t\t\t$playIcon = $( '<div>', { class: classes.playButton } )\n\t\t\t\t\t\t.html( $( playVideoLoadingElement ).attr( 'aria-label', i18n.playVideo ).addClass( classes.playButtonIcon ) );\n\n\t\t\t\t$slide.append( $playIcon );\n\t\t\t} else {\n\t\t\t\tconst $zoomContainer = $( '<div>', { class: 'swiper-zoom-container' } ),\n\t\t\t\t\t$slidePlaceholder = $( '<div class=\"swiper-lazy-preloader\"></div>' ),\n\t\t\t\t\timageAttributes = {\n\t\t\t\t\t\t'data-src': slide.image,\n\t\t\t\t\t\tclass: classes.image + ' ' + classes.preventClose + ' swiper-lazy',\n\t\t\t\t\t};\n\n\t\t\t\tif ( slide.title ) {\n\t\t\t\t\timageAttributes[ 'data-title' ] = slide.title;\n\t\t\t\t\timageAttributes.alt = slide.title;\n\t\t\t\t}\n\n\t\t\t\tif ( slide.description ) {\n\t\t\t\t\timageAttributes[ 'data-description' ] = slide.description;\n\t\t\t\t\timageAttributes.alt += ' - ' + slide.description;\n\t\t\t\t}\n\n\t\t\t\tconst $slideImage = $( '<img>', imageAttributes );\n\n\t\t\t\t$zoomContainer.append( [ $slideImage, $slidePlaceholder ] );\n\t\t\t\t$slide.append( $zoomContainer );\n\t\t\t}\n\n\t\t\t$slidesWrapper.append( $slide );\n\t\t} );\n\n\t\tthis.elements.$container = $container;\n\t\tthis.elements.$header = this.getSlideshowHeader();\n\n\t\t$container\n\t\t\t.prepend( this.elements.$header )\n\t\t\t.append( $slidesWrapper );\n\n\t\tif ( ! isSingleSlide ) {\n\t\t\tconst $prevButtonIcon = this.isFontIconSvgExperiment ? $( chevronLeft.element ) : $( '<i>', { class: slideshowClasses.prevButtonIcon } ),\n\t\t\t\t$nextButtonIcon = this.isFontIconSvgExperiment ? $( chevronRight.element ) : $( '<i>', { class: slideshowClasses.nextButtonIcon } );\n\n\t\t\t$prevButton = $( '<div>', { class: slideshowClasses.prevButton + ' ' + classes.preventClose, 'aria-label': i18n.previous } ).html( $prevButtonIcon );\n\t\t\t$nextButton = $( '<div>', { class: slideshowClasses.nextButton + ' ' + classes.preventClose, 'aria-label': i18n.next } ).html( $nextButtonIcon );\n\n\t\t\t$container.append(\n\t\t\t\t$nextButton,\n\t\t\t\t$prevButton,\n\t\t\t);\n\n\t\t\tthis.$buttons = this.$buttons.add( $nextButton ).add( $prevButton );\n\t\t}\n\n\t\tif ( showFooter ) {\n\t\t\tthis.elements.$footer = this.getSlideshowFooter();\n\t\t\t$container.append( this.elements.$footer );\n\t\t}\n\n\t\tthis.setSettings( 'hideUiTimeout', '' );\n\n\t\t$container.on( 'click mousemove keypress', this.showLightboxUi );\n\n\t\tconst modal = this.getModal();\n\n\t\tmodal.setMessage( $container );\n\n\t\tconst onShowMethod = modal.onShow;\n\n\t\tmodal.onShow = async () => {\n\t\t\tonShowMethod();\n\n\t\t\tconst swiperOptions = {\n\t\t\t\tpagination: {\n\t\t\t\t\tel: '.' + slideshowClasses.counter,\n\t\t\t\t\ttype: 'fraction',\n\t\t\t\t},\n\t\t\t\ton: {\n\t\t\t\t\tslideChangeTransitionEnd: this.onSlideChange,\n\t\t\t\t},\n\t\t\t\tlazy: {\n\t\t\t\t\tloadPrevNext: true,\n\t\t\t\t},\n\t\t\t\tzoom: true,\n\t\t\t\tspaceBetween: 100,\n\t\t\t\tgrabCursor: true,\n\t\t\t\trunCallbacksOnInit: false,\n\t\t\t\tloop: true,\n\t\t\t\tkeyboard: true,\n\t\t\t\thandleElementorBreakpoints: true,\n\t\t\t};\n\n\t\t\tif ( ! isSingleSlide ) {\n\t\t\t\tswiperOptions.navigation = {\n\t\t\t\t\tprevEl: $prevButton,\n\t\t\t\t\tnextEl: $nextButton,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif ( options.swiper ) {\n\t\t\t\t$.extend( swiperOptions, options.swiper );\n\t\t\t}\n\n\t\t\tconst Swiper = elementorFrontend.utils.swiper;\n\n\t\t\tthis.swiper = await new Swiper( $container, swiperOptions );\n\n\t\t\t// Expose the swiper instance in the frontend\n\t\t\t$container.data( 'swiper', this.swiper );\n\n\t\t\tthis.setVideoAspectRatio();\n\n\t\t\tthis.playSlideVideo();\n\n\t\t\tif ( showFooter ) {\n\t\t\t\tthis.updateFooterText();\n\t\t\t}\n\n\t\t\tthis.bindHotKeys();\n\n\t\t\tthis.makeButtonsAccessible();\n\t\t};\n\t},\n\n\tmakeButtonsAccessible: function() {\n\t\tthis.$buttons\n\t\t\t.attr( 'tabindex', 0 )\n\t\t\t.on( 'keypress', ( event ) => {\n\t\t\t\tconst ENTER_KEY = 13,\n\t\t\t\t\tSPACE_KEY = 32;\n\n\t\t\t\tif ( ENTER_KEY === event.which || SPACE_KEY === event.which ) {\n\t\t\t\t\tjQuery( event.currentTarget ).trigger( 'click' );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\n\tshowLightboxUi: function() {\n\t\tconst slideshowClasses = this.getSettings( 'classes' ).slideshow;\n\n\t\tthis.elements.$container.removeClass( slideshowClasses.hideUiVisibility );\n\n\t\tclearTimeout( this.getSettings( 'hideUiTimeout' ) );\n\n\t\tthis.setSettings( 'hideUiTimeout', setTimeout( () => {\n\t\t\tif ( ! this.shareMode ) {\n\t\t\t\tthis.elements.$container.addClass( slideshowClasses.hideUiVisibility );\n\t\t\t}\n\t\t}, 3500 ) );\n\t},\n\n\tbindHotKeys: function() {\n\t\tthis.getModal().getElements( 'window' ).on( 'keydown', this.activeKeyDown );\n\t},\n\n\tunbindHotKeys: function() {\n\t\tthis.getModal().getElements( 'window' ).off( 'keydown', this.activeKeyDown );\n\t},\n\n\tactiveKeyDown: function( event ) {\n\t\tthis.showLightboxUi();\n\n\t\tconst TAB_KEY = 9;\n\n\t\tif ( event.which === TAB_KEY ) {\n\t\t\tconst $buttons = this.$buttons;\n\n\t\t\tlet focusedButton,\n\t\t\t\tisFirst = false,\n\t\t\t\tisLast = false;\n\n\t\t\t$buttons.each( ( index ) => {\n\t\t\t\tconst item = $buttons[ index ];\n\n\t\t\t\tif ( jQuery( item ).is( ':focus' ) ) {\n\t\t\t\t\tfocusedButton = item;\n\t\t\t\t\tisFirst = 0 === index;\n\t\t\t\t\tisLast = $buttons.length - 1 === index;\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( event.shiftKey ) {\n\t\t\t\tif ( isFirst ) {\n\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t$buttons.last().trigger( 'focus' );\n\t\t\t\t}\n\t\t\t} else if ( isLast || ! focusedButton ) {\n\t\t\t\tevent.preventDefault();\n\n\t\t\t\t$buttons.first().trigger( 'focus' );\n\t\t\t}\n\t\t}\n\t},\n\n\tsetVideoAspectRatio: function( aspectRatio ) {\n\t\taspectRatio = aspectRatio || this.getSettings( 'modalOptions.videoAspectRatio' );\n\n\t\tconst $widgetContent = this.getModal().getElements( 'widgetContent' ),\n\t\t\toldAspectRatio = this.oldAspectRatio,\n\t\t\taspectRatioClass = this.getSettings( 'classes.aspectRatio' );\n\n\t\tthis.oldAspectRatio = aspectRatio;\n\n\t\tif ( oldAspectRatio ) {\n\t\t\t$widgetContent.removeClass( aspectRatioClass.replace( '%s', oldAspectRatio ) );\n\t\t}\n\n\t\tif ( aspectRatio ) {\n\t\t\t$widgetContent.addClass( aspectRatioClass.replace( '%s', aspectRatio ) );\n\t\t}\n\t},\n\n\tgetSlide: function( slideState ) {\n\t\treturn jQuery( this.swiper.slides ).filter( this.getSettings( 'selectors.slideshow.' + slideState + 'Slide' ) );\n\t},\n\n\tupdateFooterText: function() {\n\t\tif ( ! this.elements.$footer ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst classes = this.getSettings( 'classes' ),\n\t\t\t$activeSlide = this.getSlide( 'active' ),\n\t\t\t$image = $activeSlide.find( '.elementor-lightbox-image' ),\n\t\t\ttitleText = $image.data( 'title' ),\n\t\t\tdescriptionText = $image.data( 'description' ),\n\t\t\t$title = this.elements.$footer.find( '.' + classes.slideshow.title ),\n\t\t\t$description = this.elements.$footer.find( '.' + classes.slideshow.description );\n\n\t\t$title.text( titleText || '' );\n\t\t$description.text( descriptionText || '' );\n\t},\n\n\tplaySlideVideo: function() {\n\t\tconst $activeSlide = this.getSlide( 'active' ),\n\t\t\tvideoURL = $activeSlide.data( 'elementor-slideshow-video' );\n\n\t\tif ( ! videoURL ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst classes = this.getSettings( 'classes' ),\n\t\t\t$videoContainer = jQuery( '<div>', { class: classes.videoContainer + ' ' + classes.invisible } ),\n\t\t\t$videoWrapper = jQuery( '<div>', { class: classes.videoWrapper } ),\n\t\t\t$playIcon = $activeSlide.children( '.' + classes.playButton );\n\n\t\tlet videoType, apiProvider;\n\n\t\t$videoContainer.append( $videoWrapper );\n\n\t\t$activeSlide.append( $videoContainer );\n\n\t\tif ( -1 !== videoURL.indexOf( 'vimeo.com' ) ) {\n\t\t\tvideoType = 'vimeo';\n\t\t\tapiProvider = elementorFrontend.utils.vimeo;\n\t\t} else if ( videoURL.match( /^(?:https?:\\/\\/)?(?:www\\.)?(?:m\\.)?(?:youtu\\.be\\/|youtube\\.com)/ ) ) {\n\t\t\tvideoType = 'youtube';\n\t\t\tapiProvider = elementorFrontend.utils.youtube;\n\t\t}\n\n\t\tconst videoID = apiProvider.getVideoIDFromURL( videoURL );\n\n\t\tapiProvider.onApiReady( ( apiObject ) => {\n\t\t\tif ( 'youtube' === videoType ) {\n\t\t\t\tthis.prepareYTVideo( apiObject, videoID, $videoContainer, $videoWrapper, $playIcon );\n\t\t\t} else if ( 'vimeo' === videoType ) {\n\t\t\t\tthis.prepareVimeoVideo( apiObject, videoURL, $videoContainer, $videoWrapper, $playIcon );\n\t\t\t}\n\t\t} );\n\n\t\t$playIcon.addClass( classes.playing ).removeClass( classes.hidden );\n\t},\n\n\tprepareYTVideo: function( YT, videoID, $videoContainer, $videoWrapper, $playIcon ) {\n\t\tconst classes = this.getSettings( 'classes' ),\n\t\t\t$videoPlaceholderElement = jQuery( '<div>' );\n\t\tlet startStateCode = YT.PlayerState.PLAYING;\n\n\t\t$videoWrapper.append( $videoPlaceholderElement );\n\n\t\t// Since version 67, Chrome doesn't fire the `PLAYING` state at start time\n\t\tif ( window.chrome ) {\n\t\t\tstartStateCode = YT.PlayerState.UNSTARTED;\n\t\t}\n\n\t\t$videoContainer.addClass( 'elementor-loading' + ' ' + classes.invisible );\n\n\t\tthis.player = new YT.Player( $videoPlaceholderElement[ 0 ], {\n\t\t\tvideoId: videoID,\n\t\t\tevents: {\n\t\t\t\tonReady: () => {\n\t\t\t\t\t$playIcon.addClass( classes.hidden );\n\n\t\t\t\t\t$videoContainer.removeClass( classes.invisible );\n\n\t\t\t\t\tthis.player.playVideo();\n\t\t\t\t},\n\t\t\t\tonStateChange: ( event ) => {\n\t\t\t\t\tif ( event.data === startStateCode ) {\n\t\t\t\t\t\t$videoContainer.removeClass( 'elementor-loading' + ' ' + classes.invisible );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tplayerVars: {\n\t\t\t\tcontrols: 0,\n\t\t\t\trel: 0,\n\t\t\t},\n\t\t} );\n\t},\n\n\tprepareVimeoVideo: function( Vimeo, videoURL, $videoContainer, $videoWrapper, $playIcon ) {\n\t\tconst classes = this.getSettings( 'classes' ),\n\t\t\tvimeoOptions = {\n\t\t\t\turl: videoURL,\n\t\t\t\tautoplay: true,\n\t\t\t\ttransparent: false,\n\t\t\t\tplaysinline: false,\n\t\t\t};\n\n\t\tthis.player = new Vimeo.Player( $videoWrapper, vimeoOptions );\n\n\t\tthis.player.ready().then( () => {\n\t\t\t$playIcon.addClass( classes.hidden );\n\n\t\t\t$videoContainer.removeClass( classes.invisible );\n\t\t} );\n\t},\n\n\tsetEntranceAnimation: function( animation ) {\n\t\tanimation = animation || elementorFrontend.getCurrentDeviceSetting( this.getSettings( 'modalOptions' ), 'entranceAnimation' );\n\n\t\tconst $widgetMessage = this.getModal().getElements( 'message' );\n\n\t\tif ( this.oldAnimation ) {\n\t\t\t$widgetMessage.removeClass( this.oldAnimation );\n\t\t}\n\n\t\tthis.oldAnimation = animation;\n\n\t\tif ( animation ) {\n\t\t\t$widgetMessage.addClass( 'animated ' + animation );\n\t\t}\n\t},\n\n\topenSlideshow: function( slideshowID, initialSlideURL ) {\n\t\tconst $allSlideshowLinks = jQuery( this.getSettings( 'selectors.links' ) ).filter( ( index, element ) => {\n\t\t\tconst $element = jQuery( element );\n\n\t\t\treturn slideshowID === element.dataset.elementorLightboxSlideshow && ! $element.parent( '.swiper-slide-duplicate' ).length && ! $element.parents( '.slick-cloned' ).length;\n\t\t} );\n\n\t\tconst slides = [];\n\n\t\tlet initialSlideIndex = 0;\n\n\t\t$allSlideshowLinks.each( function() {\n\t\t\tconst slideVideo = this.dataset.elementorLightboxVideo;\n\n\t\t\tlet slideIndex = this.dataset.elementorLightboxIndex;\n\n\t\t\tif ( undefined === slideIndex ) {\n\t\t\t\tslideIndex = $allSlideshowLinks.index( this );\n\t\t\t}\n\n\t\t\tif ( initialSlideURL === this.href || ( slideVideo && initialSlideURL === slideVideo ) ) {\n\t\t\t\tinitialSlideIndex = slideIndex;\n\t\t\t}\n\n\t\t\tconst slideData = {\n\t\t\t\timage: this.href,\n\t\t\t\tindex: slideIndex,\n\t\t\t\ttitle: this.dataset.elementorLightboxTitle,\n\t\t\t\tdescription: this.dataset.elementorLightboxDescription,\n\t\t\t};\n\n\t\t\tif ( slideVideo ) {\n\t\t\t\tslideData.video = slideVideo;\n\t\t\t}\n\n\t\t\tslides.push( slideData );\n\t\t} );\n\n\t\tslides.sort( ( a, b ) => a.index - b.index );\n\n\t\tthis.showModal( {\n\t\t\ttype: 'slideshow',\n\t\t\tid: slideshowID,\n\t\t\tmodalOptions: {\n\t\t\t\tid: 'elementor-lightbox-slideshow-' + slideshowID,\n\t\t\t},\n\t\t\tslideshow: {\n\t\t\t\tslides: slides,\n\t\t\t\tswiper: {\n\t\t\t\t\tinitialSlide: +initialSlideIndex,\n\t\t\t\t},\n\t\t\t},\n\t\t} );\n\t},\n\n\tonSlideChange: function() {\n\t\tthis\n\t\t\t.getSlide( 'prev' )\n\t\t\t.add( this.getSlide( 'next' ) )\n\t\t\t.add( this.getSlide( 'active' ) )\n\t\t\t.find( '.' + this.getSettings( 'classes.videoWrapper' ) )\n\t\t\t.remove();\n\n\t\tthis.playSlideVideo();\n\n\t\tthis.updateFooterText();\n\t},\n} );\n"], "filenames": ["assets/dev/js/frontend/utils/lightbox/lightbox.js"], "buggy_code_start_loc": [259], "buggy_code_end_loc": [264], "fixing_code_start_loc": [259], "fixing_code_end_loc": [267], "type": "NVD-CWE-noinfo", "message": "The Elementor Website Builder WordPress plugin before 3.5.5 does not filter out user-controlled URLs from being loaded into the DOM. This could be used to inject rogue iframes that point to malicious URLs.", "other": {"cve": {"id": "CVE-2022-4953", "sourceIdentifier": "contact@wpscan.com", "published": "2023-08-14T20:15:10.193", "lastModified": "2024-01-16T16:15:10.240", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The Elementor Website Builder WordPress plugin before 3.5.5 does not filter out user-controlled URLs from being loaded into the DOM. This could be used to inject rogue iframes that point to malicious URLs."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:elementor:website_builder:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "3.5.5", "matchCriteriaId": "675854B7-A3C5-4A34-879B-B7E3C294F35C"}]}]}], "references": [{"url": "https://github.com/elementor/elementor/commit/292fc49e0f979bd52d838f0326d1faaebfa59f5e", "source": "contact@wpscan.com", "tags": ["Patch"]}, {"url": "https://wpscan.com/vulnerability/8273357e-f9e1-44bc-8082-8faab838eda7", "source": "contact@wpscan.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/elementor/elementor/commit/292fc49e0f979bd52d838f0326d1faaebfa59f5e"}}