{"buggy_code": ["/*\n * file:       InputStreamHelper.java\n * author:     Jon Iles\n * copyright:  (c) Packwood Software 2016\n * date:       06/06/2016\n */\n\n/*\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by the\n * Free Software Foundation; either version 2.1 of the License, or (at your\n * option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this library; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n */\n\npackage net.sf.mpxj.common;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipException;\nimport java.util.zip.ZipInputStream;\n\n/**\n * Helper methods for dealing with InputStreams.\n */\npublic class InputStreamHelper\n{\n   /**\n    * Copy the data from an InputStream to a temp file.\n    *\n    * @param inputStream data source\n    * @param tempFileSuffix suffix to use for temp file\n    * @return File instance\n    */\n   public static File writeStreamToTempFile(InputStream inputStream, String tempFileSuffix) throws IOException\n   {\n      FileOutputStream outputStream = null;\n\n      try\n      {\n         File file = File.createTempFile(\"mpxj\", tempFileSuffix);\n         outputStream = new FileOutputStream(file);\n         byte[] buffer = new byte[1024];\n         while (true)\n         {\n            int bytesRead = inputStream.read(buffer);\n            if (bytesRead == -1)\n            {\n               break;\n            }\n            outputStream.write(buffer, 0, bytesRead);\n         }\n         return file;\n      }\n\n      finally\n      {\n         if (outputStream != null)\n         {\n            outputStream.close();\n         }\n      }\n   }\n\n   /**\n    * Expands a zip file input stream into a temporary directory.\n    *\n    * @param inputStream zip file input stream\n    * @return File instance representing the temporary directory\n    */\n   public static File writeZipStreamToTempDir(InputStream inputStream) throws IOException\n   {\n      File dir = FileHelper.createTempDir();\n\n      try\n      {\n         processZipStream(dir, inputStream);\n      }\n\n      catch (ZipException ex)\n      {\n         // Java doesn't support zip files with zero byte entries.\n         // We could use a different library which does handle these zip files, but\n         // I'm reluctant to add new dependencies just for this. Rather than\n         // propagating the error, we'll just stop at this point and see if we\n         // can make sense of anything we have extracted from the zip file so far.\n         // For what it's worth I haven't come across a valid compressed schedule file\n         // which includes zero bytes files.\n         if (!ex.getMessage().equals(\"only DEFLATED entries can have EXT descriptor\"))\n         {\n            throw ex;\n         }\n      }\n\n      return dir;\n   }\n\n   /**\n    * Expands a zip file input stream into a temporary directory.\n    *\n    * @param dir temporary directory\n    * @param inputStream zip file input stream\n    */\n   private static void processZipStream(File dir, InputStream inputStream) throws IOException\n   {\n      ZipInputStream zip = new ZipInputStream(inputStream);\n      while (true)\n      {\n         ZipEntry entry = zip.getNextEntry();\n         if (entry == null)\n         {\n            break;\n         }\n\n         File file = new File(dir, entry.getName());\n         if (entry.isDirectory())\n         {\n            FileHelper.mkdirsQuietly(file);\n            continue;\n         }\n\n         File parent = file.getParentFile();\n         if (parent != null)\n         {\n            FileHelper.mkdirsQuietly(parent);\n         }\n\n         FileOutputStream fos = new FileOutputStream(file);\n         byte[] bytes = new byte[1024];\n         int length;\n         while ((length = zip.read(bytes)) >= 0)\n         {\n            fos.write(bytes, 0, length);\n         }\n         fos.close();\n      }\n   }\n}\n"], "fixing_code": ["/*\n * file:       InputStreamHelper.java\n * author:     Jon Iles\n * copyright:  (c) Packwood Software 2016\n * date:       06/06/2016\n */\n\n/*\n * This library is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as published by the\n * Free Software Foundation; either version 2.1 of the License, or (at your\n * option) any later version.\n *\n * This library is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public\n * License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this library; if not, write to the Free Software Foundation, Inc.,\n * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.\n */\n\npackage net.sf.mpxj.common;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipException;\nimport java.util.zip.ZipInputStream;\n\n/**\n * Helper methods for dealing with InputStreams.\n */\npublic class InputStreamHelper\n{\n   /**\n    * Copy the data from an InputStream to a temp file.\n    *\n    * @param inputStream data source\n    * @param tempFileSuffix suffix to use for temp file\n    * @return File instance\n    */\n   public static File writeStreamToTempFile(InputStream inputStream, String tempFileSuffix) throws IOException\n   {\n      FileOutputStream outputStream = null;\n\n      try\n      {\n         File file = File.createTempFile(\"mpxj\", tempFileSuffix);\n         outputStream = new FileOutputStream(file);\n         byte[] buffer = new byte[1024];\n         while (true)\n         {\n            int bytesRead = inputStream.read(buffer);\n            if (bytesRead == -1)\n            {\n               break;\n            }\n            outputStream.write(buffer, 0, bytesRead);\n         }\n         return file;\n      }\n\n      finally\n      {\n         if (outputStream != null)\n         {\n            outputStream.close();\n         }\n      }\n   }\n\n   /**\n    * Expands a zip file input stream into a temporary directory.\n    *\n    * @param inputStream zip file input stream\n    * @return File instance representing the temporary directory\n    */\n   public static File writeZipStreamToTempDir(InputStream inputStream) throws IOException\n   {\n      File dir = FileHelper.createTempDir();\n\n      try\n      {\n         processZipStream(dir, inputStream);\n      }\n\n      catch (ZipException ex)\n      {\n         // Java doesn't support zip files with zero byte entries.\n         // We could use a different library which does handle these zip files, but\n         // I'm reluctant to add new dependencies just for this. Rather than\n         // propagating the error, we'll just stop at this point and see if we\n         // can make sense of anything we have extracted from the zip file so far.\n         // For what it's worth I haven't come across a valid compressed schedule file\n         // which includes zero bytes files.\n         if (!ex.getMessage().equals(\"only DEFLATED entries can have EXT descriptor\"))\n         {\n            throw ex;\n         }\n      }\n\n      return dir;\n   }\n\n   /**\n    * Expands a zip file input stream into a temporary directory.\n    *\n    * @param dir temporary directory\n    * @param inputStream zip file input stream\n    */\n   private static void processZipStream(File dir, InputStream inputStream) throws IOException\n   {\n      String canonicalDestinationDirPath = dir.getCanonicalPath();\n      ZipInputStream zip = new ZipInputStream(inputStream);\n      while (true)\n      {\n         ZipEntry entry = zip.getNextEntry();\n         if (entry == null)\n         {\n            break;\n         }\n\n         File file = new File(dir, entry.getName());\n\n         // https://snyk.io/research/zip-slip-vulnerability\n         String canonicalDestinationFile = file.getCanonicalPath();\n         if (!canonicalDestinationFile.startsWith(canonicalDestinationDirPath + File.separator))\n         {\n            throw new IOException(\"Entry is outside of the target dir: \" + entry.getName());\n         }\n\n         if (entry.isDirectory())\n         {\n            FileHelper.mkdirsQuietly(file);\n            continue;\n         }\n\n         File parent = file.getParentFile();\n         if (parent != null)\n         {\n            FileHelper.mkdirsQuietly(parent);\n         }\n\n         FileOutputStream fos = new FileOutputStream(file);\n         byte[] bytes = new byte[1024];\n         int length;\n         while ((length = zip.read(bytes)) >= 0)\n         {\n            fos.write(bytes, 0, length);\n         }\n         fos.close();\n      }\n   }\n}\n"], "filenames": ["src/main/java/net/sf/mpxj/common/InputStreamHelper.java"], "buggy_code_start_loc": [116], "buggy_code_end_loc": [126], "fixing_code_start_loc": [117], "fixing_code_end_loc": [136], "type": "CWE-22", "message": "common/InputStreamHelper.java in Packwood MPXJ before 8.3.5 allows directory traversal in the zip stream handler flow, leading to the writing of files to arbitrary locations.", "other": {"cve": {"id": "CVE-2020-35460", "sourceIdentifier": "cve@mitre.org", "published": "2020-12-14T23:15:12.267", "lastModified": "2022-08-06T03:53:49.017", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "common/InputStreamHelper.java in Packwood MPXJ before 8.3.5 allows directory traversal in the zip stream handler flow, leading to the writing of files to arbitrary locations."}, {"lang": "es", "value": "El archivo common/InputStreamHelper.java en Packwood MPXJ versiones anteriores a 8.3.5, permite un salto de directorio en el flujo del manejador de tramas zip, conllevando a una escritura de archivos en ubicaciones arbitrarias"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mpxj:mpxj:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.3.5", "matchCriteriaId": "8038898C-9199-4460-9016-497E318B3A77"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:*:*:*:*:*:*:*:*", "versionStartIncluding": "17.7", "versionEndIncluding": "17.12", "matchCriteriaId": "08FA59A8-6A62-4B33-8952-D6E658F8DAC9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:16.1:*:*:*:*:*:*:*", "matchCriteriaId": "D55A54FD-7DD1-49CD-BE81-0BE73990943C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:16.2:*:*:*:*:*:*:*", "matchCriteriaId": "82EB08C0-2D46-4635-88DF-E54F6452D3A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:18.8:*:*:*:*:*:*:*", "matchCriteriaId": "202AD518-2E9B-4062-B063-9858AE1F9CE2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:19.12:*:*:*:*:*:*:*", "matchCriteriaId": "10864586-270E-4ACF-BDCC-ECFCD299305F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:21.12:*:*:*:*:*:*:*", "matchCriteriaId": "E9C55C69-E22E-4B80-9371-5CD821D79FE2"}]}]}], "references": [{"url": "http://www.mpxj.org/changes-report.html#a8.3.5", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/joniles/mpxj/commit/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpujan2021.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/joniles/mpxj/commit/8eaf4225048ea5ba7e59ef4556dab2098fcc4a1d"}}