{"buggy_code": ["<?php\n# MantisConnect - A webservice interface to Mantis Bug Tracker\n# Copyright (C) 2004-2012  Victor Boctor - vboctor@users.sourceforge.net\n# This program is distributed under dual licensing.  These include\n# GPL and a commercial licenses.  Victor Boctor reserves the right to\n# change the license of future releases.\n# See docs/ folder for more details\n\nrequire_once( dirname( __FILE__ ) . DIRECTORY_SEPARATOR . 'mc_core.php' );\n\n/**\n * Check if an issue with the given id exists.\n *\n * @param string $p_username  The name of the user trying to access the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue to check.\n * @return boolean  true if there is an issue with the given id, false otherwise.\n */\nfunction mc_issue_exists( $p_username, $p_password, $p_issue_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn false;\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readonly_access( $t_user_id, $t_project_id ) ) {\n\n\t\t// if we return an error here, then we answered the question!\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Get all details about an issue.\n *\n * @param string $p_username  The name of the user trying to access the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue to retrieve.\n * @return Array that represents an IssueData structure\n */\nfunction mc_issue_get( $p_username, $p_password, $p_issue_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', 'Issue does not exist.' );\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readonly_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif( !access_has_bug_level( VIEWER, $p_issue_id, $t_user_id ) ){\n\t    return mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_bug = bug_get( $p_issue_id, true );\n\t$t_issue_data = array();\n\n\t$t_issue_data['id'] = $p_issue_id;\n\t$t_issue_data['view_state'] = mci_enum_get_array_by_id( $t_bug->view_state, 'view_state', $t_lang );\n\t$t_issue_data['last_updated'] = timestamp_to_iso8601( $t_bug->last_updated, false );\n\n\t$t_issue_data['project'] = mci_project_as_array_by_id( $t_bug->project_id );\n\t$t_issue_data['category'] = mci_get_category( $t_bug->category_id );\n\t$t_issue_data['priority'] = mci_enum_get_array_by_id( $t_bug->priority, 'priority', $t_lang );\n\t$t_issue_data['severity'] = mci_enum_get_array_by_id( $t_bug->severity, 'severity', $t_lang );\n\t$t_issue_data['status'] = mci_enum_get_array_by_id( $t_bug->status, 'status', $t_lang );\n\n\t$t_issue_data['reporter'] = mci_account_get_array_by_id( $t_bug->reporter_id );\n\t$t_issue_data['summary'] = $t_bug->summary;\n\t$t_issue_data['version'] = mci_null_if_empty( $t_bug->version );\n\t$t_issue_data['build'] = mci_null_if_empty( $t_bug->build );\n\t$t_issue_data['profile_id'] = mci_null_if_empty( $t_bug->profile_id );\n\t$t_issue_data['platform'] = mci_null_if_empty( $t_bug->platform );\n\t$t_issue_data['os'] = mci_null_if_empty( $t_bug->os );\n\t$t_issue_data['os_build'] = mci_null_if_empty( $t_bug->os_build );\n\t$t_issue_data['reproducibility'] = mci_enum_get_array_by_id( $t_bug->reproducibility, 'reproducibility', $t_lang );\n\t$t_issue_data['date_submitted'] = timestamp_to_iso8601( $t_bug->date_submitted, false );\n\t$t_issue_data['sticky'] = $t_bug->sticky;\n\n\t$t_issue_data['sponsorship_total'] = $t_bug->sponsorship_total;\n\n\tif( !empty( $t_bug->handler_id ) ) {\n\t\t$t_issue_data['handler'] = mci_account_get_array_by_id( $t_bug->handler_id );\n\t}\n\n\t$t_issue_data['projection'] = mci_enum_get_array_by_id( $t_bug->projection, 'projection', $t_lang );\n\t$t_issue_data['eta'] = mci_enum_get_array_by_id( $t_bug->eta, 'eta', $t_lang );\n\n\t$t_issue_data['resolution'] = mci_enum_get_array_by_id( $t_bug->resolution, 'resolution', $t_lang );\n\t$t_issue_data['fixed_in_version'] = mci_null_if_empty( $t_bug->fixed_in_version );\n\t$t_issue_data['target_version'] = mci_null_if_empty( $t_bug->target_version );\n\t$t_issue_data['due_date'] = mci_issue_get_due_date( $t_bug );\n\n\t$t_issue_data['description'] = $t_bug->description;\n\t$t_issue_data['steps_to_reproduce'] = mci_null_if_empty( $t_bug->steps_to_reproduce );\n\t$t_issue_data['additional_information'] = mci_null_if_empty( $t_bug->additional_information );\n\n\t$t_issue_data['attachments'] = mci_issue_get_attachments( $p_issue_id );\n\t$t_issue_data['relationships'] = mci_issue_get_relationships( $p_issue_id, $t_user_id );\n\t$t_issue_data['notes'] = mci_issue_get_notes( $p_issue_id );\n\t$t_issue_data['custom_fields'] = mci_issue_get_custom_fields( $p_issue_id );\n\t$t_issue_data['monitors'] = mci_account_get_array_by_ids( bug_get_monitors ( $p_issue_id ) );\n\t$t_issue_data['tags'] = mci_issue_get_tags_for_bug_id( $p_issue_id , $t_user_id );\n\t\n\treturn $t_issue_data;\n}\n\n/**\n * Returns the category name, possibly null if no category is assigned\n * \n * @param int $p_category_id\n * @return string \n */\nfunction mci_get_category( $p_category_id ) {\n\tif ( $p_category_id == 0 )\n\t\treturn '';\n\t\t\n\treturn mci_null_if_empty( category_get_name( $p_category_id ) );\n}\n\n/**\n * \n * @param BugData $bug\n * @return soapval the value to be encoded as the due date\n */\nfunction mci_issue_get_due_date( $p_bug ) {\n\tif ( access_has_bug_level( config_get( 'due_date_view_threshold' ), $p_bug->id )  && !date_is_null( $p_bug->due_date ) ) {\n\t\treturn new soapval( 'due_date', 'xsd:dateTime', timestamp_to_iso8601( $p_bug->due_date, false ) );\n\t} else {\n\t\treturn new soapval( 'due_date','xsd:dateTime', null );\n\t}\n\t\n}\n\n/**\n * Sets the supplied array of custom field values to the specified issue id.\n *\n * @param $p_issue_id   Issue id to apply custom field values to.\n * @param $p_custom_fields  The array of custom field values as described in the webservice complex types.\n * @param boolean $p_log_insert create history logs for new values\n */\nfunction mci_issue_set_custom_fields( $p_issue_id, &$p_custom_fields, $p_log_insert ) {\n\t# set custom field values on the submitted issue\n\tif( isset( $p_custom_fields ) && is_array( $p_custom_fields ) ) {\n\t\tforeach( $p_custom_fields as $t_custom_field ) {\n\t\t\t# get custom field id from object ref\n\t\t\t$t_custom_field_id = mci_get_custom_field_id_from_objectref( $t_custom_field['field'] );\n\n\t\t\tif( $t_custom_field_id == 0 ) {\n\t\t\t\treturn new soap_fault( 'Client', '', 'Custom field ' . $t_custom_field['field']['name'] . ' not found.' );\n\t\t\t}\n\n\t\t\t# skip if current user doesn't have login access.\n\t\t\tif( !custom_field_has_write_access( $t_custom_field_id, $p_issue_id ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$t_value = $t_custom_field['value'];\n\n\t\t\tif( !custom_field_validate( $t_custom_field_id, $t_value ) ) {\n\t\t\t\treturn new soap_fault( 'Client', '', 'Invalid custom field value for field id ' . $t_custom_field_id . ' .');\n\t\t\t}\n\n\t\t\tif( !custom_field_set_value( $t_custom_field_id, $p_issue_id, $t_value, $p_log_insert  ) ) {\n\t\t\t\treturn new soap_fault( 'Server', '', 'Unable to set custom field value for field id ' . $t_custom_field_id . ' to issue ' . $p_issue_id. ' .' );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Get the custom field values associated with the specified issue id.\n *\n * @param $p_issue_id   Issue id to get the custom field values for.\n *\n * @return null if no custom field defined for the project that contains the issue, or if no custom\n *              fields are accessible to the current user.\n */\nfunction mci_issue_get_custom_fields( $p_issue_id ) {\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\n\t$t_custom_fields = array();\n\t$t_related_custom_field_ids = custom_field_get_linked_ids( $t_project_id );\n\n\tforeach( $t_related_custom_field_ids as $t_id ) {\n\t\t$t_def = custom_field_get_definition( $t_id );\n\n\t\tif( custom_field_has_read_access( $t_id, $p_issue_id ) ) {\n\n\t\t\t# user has not access to read this custom field.\n\t\t\t$t_value = custom_field_get_value( $t_id, $p_issue_id );\n\t\t\tif( $t_value === false ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t# return a blank string if the custom field value is undefined\n\t\t\tif( $t_value === null ) {\n\t\t\t\t$t_value = '';\n\t\t\t}\n\n\t\t\t$t_custom_field_value = array();\n\t\t\t$t_custom_field_value['field'] = array();\n\t\t\t$t_custom_field_value['field']['id'] = $t_id;\n\t\t\t$t_custom_field_value['field']['name'] = $t_def['name'];\n\t\t\t$t_custom_field_value['value'] = $t_value;\n\n\t\t\t$t_custom_fields[] = $t_custom_field_value;\n\t\t}\n\t}\n\n\t# foreach\n\n\treturn( count( $t_custom_fields ) == 0 ? null : $t_custom_fields );\n}\n\n/**\n * Get the attachments of an issue.\n *\n * @param integer $p_issue_id  The id of the issue to retrieve the attachments for\n * @return Array that represents an AttachmentData structure\n */\nfunction mci_issue_get_attachments( $p_issue_id ) {\n\t$t_attachment_rows = bug_get_attachments( $p_issue_id );\n\t\n\tif ( $t_attachment_rows == null) {\n\t\treturn array();\n\t}\n\t\n\t$t_result = array();\n\tforeach( $t_attachment_rows as $t_attachment_row ) {\n\t\tif ( !file_can_view_bug_attachments( $p_issue_id, (int)$t_attachment_row['user_id'] ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t$t_attachment = array();\n\t\t$t_attachment['id'] = $t_attachment_row['id'];\n\t\t$t_attachment['filename'] = $t_attachment_row['filename'];\n\t\t$t_attachment['size'] = $t_attachment_row['filesize'];\n\t\t$t_attachment['content_type'] = $t_attachment_row['file_type'];\n\t\t$t_attachment['date_submitted'] = timestamp_to_iso8601( $t_attachment_row['date_added'], false );\n\t\t$t_attachment['download_url'] = mci_get_mantis_path() . 'file_download.php?file_id=' . $t_attachment_row['id'] . '&amp;type=bug';\n\t\t$t_attachment['user_id'] = $t_attachment_row['user_id'];\n\t\t$t_result[] = $t_attachment;\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get the relationships of an issue.\n *\n * @param integer $p_issue_id  The id of the issue to retrieve the relationships for\n * @return Array that represents an RelationShipData structure\n */\nfunction mci_issue_get_relationships( $p_issue_id, $p_user_id ) {\n\t$t_relationships = array();\n\n\t$t_src_relationships = relationship_get_all_src( $p_issue_id );\n\tforeach( $t_src_relationships as $t_relship_row ) {\n\t\tif( access_has_bug_level( config_get( 'mc_readonly_access_level_threshold' ), $t_relship_row->dest_bug_id, $p_user_id ) ) {\n\t\t\t$t_relationship = array();\n\t\t\t$t_reltype = array();\n\t\t\t$t_relationship['id'] = $t_relship_row->id;\n\t\t\t$t_reltype['id'] = $t_relship_row->type;\n\t\t\t$t_reltype['name'] = relationship_get_description_src_side( $t_relship_row->type );\n\t\t\t$t_relationship['type'] = $t_reltype;\n\t\t\t$t_relationship['target_id'] = $t_relship_row->dest_bug_id;\n\t\t\t$t_relationships[] = $t_relationship;\n\t\t}\n\t}\n\n\t$t_dest_relationships = relationship_get_all_dest( $p_issue_id );\n\tforeach( $t_dest_relationships as $t_relship_row ) {\n\t\tif( access_has_bug_level( config_get( 'mc_readonly_access_level_threshold' ), $t_relship_row->src_bug_id, $p_user_id ) ) {\n\t\t\t$t_relationship = array();\n\t\t\t$t_relationship['id'] = $t_relship_row->id;\n\t\t\t$t_reltype = array();\n\t\t\t$t_reltype['id'] = relationship_get_complementary_type( $t_relship_row->type );\n\t\t\t$t_reltype['name'] = relationship_get_description_dest_side( $t_relship_row->type );\n\t\t\t$t_relationship['type'] = $t_reltype;\n\t\t\t$t_relationship['target_id'] = $t_relship_row->src_bug_id;\n\t\t\t$t_relationships[] = $t_relationship;\n\t\t}\n\t}\n\n\treturn (count( $t_relationships ) == 0 ? null : $t_relationships );\n}\n\n/**\n * Get all visible notes for a specific issue\n *\n * @param integer $p_issue_id  The id of the issue to retrieve the notes for\n * @return Array that represents an IssueNoteData structure\n */\nfunction mci_issue_get_notes( $p_issue_id ) {\n\t$t_user_id = auth_get_current_user_id();\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\t$t_user_bugnote_order = 'ASC'; // always get the notes in ascending order for consistency to the calling application.\n\t$t_has_time_tracking_access = access_has_bug_level( config_get( 'time_tracking_view_threshold' ), $p_issue_id );\n\t\n\t$t_result = array();\n\tforeach( bugnote_get_all_visible_bugnotes( $p_issue_id, $t_user_bugnote_order, 0 ) as $t_value ) {\n\t\t$t_bugnote = array();\n\t\t$t_bugnote['id'] = $t_value->id;\n\t\t$t_bugnote['reporter'] = mci_account_get_array_by_id( $t_value->reporter_id );\n\t\t$t_bugnote['date_submitted'] = timestamp_to_iso8601( $t_value->date_submitted, false );\n\t\t$t_bugnote['last_modified'] = timestamp_to_iso8601( $t_value->last_modified, false );\n\t\t$t_bugnote['text'] = $t_value->note;\n\t\t$t_bugnote['view_state'] = mci_enum_get_array_by_id( $t_value->view_state, 'view_state', $t_lang );\n\t\t$t_bugnote['time_tracking'] = $t_has_time_tracking_access ? $t_value->time_tracking : 0;\n\t\t$t_bugnote['note_type'] = $t_value->note_type;\n\t\t$t_bugnote['note_attr'] = $t_value->note_attr;\n\t\t\n\t\t$t_result[] = $t_bugnote;\n\t}\n\n\treturn (count( $t_result ) == 0 ? null : $t_result );\n}\n\n/**\n * Sets the monitors of the specified issue\n * \n * <p>This functions performs access level checks and only performs operations which would\n * modify the existing monitors list.</p>\n * \n * @param int $p_issue_id the issue id to set the monitors for\n * @param int $p_user_id the user which requests the monitor change\n * @param array $p_monitors An array of arrays with the <em>id</em> field set to the id \n *  of the users which should monitor this issue.\n */\nfunction mci_issue_set_monitors( $p_issue_id , $p_user_id, $p_monitors ) {\n    \n    $t_existing_monitors = bug_get_monitors( $p_issue_id );\n\n    $t_monitors = array();\n    foreach ( $p_monitors as $t_monitor ) \n        $t_monitors[] = $t_monitor['id'];\n    \n    foreach ( $t_monitors as $t_user_id ) {\n        \n    \tif ( $p_user_id == $t_user_id ) {\n    \t\tif ( ! access_has_bug_level( config_get( 'monitor_bug_threshold' ), $p_issue_id ) )\n    \t\t    continue;\n\t    } else {\n\t    \tif ( !access_has_bug_level( config_get( 'monitor_add_others_bug_threshold' ), $p_issue_id ) )\n\t    \t    continue;\n\t    }\n\t        \n       if ( in_array( $p_user_id, $t_existing_monitors) )\n           continue;\n\t        \n        bug_monitor( $p_issue_id, $t_user_id);\n    }\n    \n    foreach ( $t_existing_monitors as $t_user_id ) {\n\n    \tif ( $p_user_id == $t_user_id ) {\n    \t\tif ( ! access_has_bug_level( config_get( 'monitor_bug_threshold' ), $p_issue_id ) )\n    \t\t    continue;\n\t    } else {\n\t    \tif ( !access_has_bug_level( config_get( 'monitor_delete_others_bug_threshold' ), $p_issue_id ) )\n\t    \t    continue;\n\t    }\n        \n        if ( in_array( $p_user_id, $t_monitors) )\n            continue;\n            \n        bug_unmonitor( $p_issue_id, $t_user_id);\n    }\n                \n}\n\n/**\n * Get the biggest issue id currently used.\n *\n * @param string $p_username  The name of the user trying to retrieve the information\n * @param string $p_password  The password of the user.\n * @param int    $p_project_id\t-1 default project, 0 for all projects, otherwise project id.\n * @return integer  The biggest used issue id.\n */\nfunction mc_issue_get_biggest_id( $p_username, $p_password, $p_project_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_any = defined( 'META_FILTER_ANY' ) ? META_FILTER_ANY : 'any';\n\t$t_none = defined( 'META_FILTER_NONE' ) ? META_FILTER_NONE : 'none';\n\n\t$t_filter = array(\n\t\t'show_category' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_severity' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_status' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'highlight_changed' => 0,\n\t\t'reporter_id' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'handler_id' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_resolution' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_build' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_version' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'hide_status' => Array(\n\t\t\t'0' => $t_none,\n\t\t),\n\t\t'user_monitor' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'dir' => 'DESC',\n\t\t'sort' => 'id',\n\t);\n\n\t$t_page_number = 1;\n\t$t_per_page = 1;\n\t$t_bug_count = 0;\n\t$t_page_count = 0;\n\n\t# Get project id, if -1, then retrieve the current which will be the default since there is no cookie.\n\t$t_project_id = $p_project_id;\n\tif( $t_project_id == -1 ) {\n\t\t$t_project_id = helper_get_current_project();\n\t}\n\n\tif(( $t_project_id > 0 ) && !project_exists( $t_project_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Project '$t_project_id' does not exist.\" );\n\t}\n\n\tif( !mci_has_readonly_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_rows = filter_get_bug_rows( $t_page_number, $t_per_page, $t_page_count, $t_bug_count, $t_filter, $t_project_id, $t_user_id );\n\tif( count( $t_rows ) == 0 ) {\n\t\treturn 0;\n\t} else {\n\t\treturn $t_rows[0]->id;\n\t}\n}\n\n/**\n * Get the id of an issue via the issue's summary.\n *\n * @param string $p_username  The name of the user trying to delete the issue.\n * @param string $p_password  The password of the user.\n * @param string $p_summary  The summary of the issue to retrieve.\n * @return integer  The id of the issue with the given summary, 0 if there is no such issue.\n */\nfunction mc_issue_get_id_from_summary( $p_username, $p_password, $p_summary ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\n\t$query = \"SELECT id\n\t\tFROM $t_bug_table\n\t\tWHERE summary = \" . db_param();\n\n\t$result = db_query_bound( $query, Array( $p_summary ), 1 );\n\n\tif( db_num_rows( $result ) == 0 ) {\n\t\treturn 0;\n\t} else {\n\t\twhile(( $row = db_fetch_array( $result ) ) !== false ) {\n\t\t\t$t_issue_id = (int) $row['id'];\n\t\t\t$t_project_id = bug_get_field( $t_issue_id, 'project_id' );\n\n\t\t\tif( mci_has_readonly_access( $t_user_id, $t_project_id ) ) {\n\t\t\t\treturn $t_issue_id;\n\t\t\t}\n\t\t}\n\n\t\t// no issue found that belongs to a project that the user has read access to.\n\t\treturn 0;\n\t}\n}\n\n/**\n * Add an issue to the database.\n *\n * @param string $p_username  The name of the user trying to add the issue.\n * @param string $p_password  The password of the user.\n * @param Array $p_issue  A IssueData structure containing information about the new issue.\n * @return integer  The id of the created issue.\n */\nfunction mc_issue_add( $p_username, $p_password, $p_issue ) {\n\t\n\tglobal $g_project_override;\n\t\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_project = $p_issue['project'];\n\n\t$t_project_id = mci_get_project_id( $t_project );\n\t$g_project_override = $t_project_id; // ensure that helper_get_current_project() calls resolve to this project id\n\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_handler_id = isset( $p_issue['handler'] ) ? mci_get_user_id( $p_issue['handler'] ) : 0;\n\t$t_priority_id = isset( $p_issue['priority'] ) ? mci_get_priority_id( $p_issue['priority'] ) : config_get( 'default_bug_priority' );\n\t$t_severity_id = isset( $p_issue['severity'] ) ?  mci_get_severity_id( $p_issue['severity'] ) : config_get( 'default_bug_severity' );\n\t$t_status_id = isset( $p_issue['status'] ) ? mci_get_status_id( $p_issue['status'] ) : config_get( 'bug_submit_status' );\n\t$t_reproducibility_id = isset( $p_issue['reproducibility'] ) ?  mci_get_reproducibility_id( $p_issue['reproducibility'] ) : config_get( 'default_bug_reproducibility' );\n\t$t_resolution_id =  isset( $p_issue['resolution'] ) ? mci_get_resolution_id( $p_issue['resolution'] ) : config_get('default_bug_resolution');\n\t$t_projection_id = isset( $p_issue['projection'] ) ? mci_get_projection_id( $p_issue['projection'] ) : config_get('default_bug_resolution');\n\t$t_eta_id = isset( $p_issue['eta'] ) ? mci_get_eta_id( $p_issue['eta'] ) : config_get('default_bug_eta');\n\t$t_view_state_id = isset( $p_issue['view_state'] ) ?  mci_get_view_state_id( $p_issue['view_state'] ) : config_get( 'default_bug_view_status' );\n\t$t_reporter_id = isset( $p_issue['reporter'] ) ? mci_get_user_id( $p_issue['reporter'] )  : 0;\n\t$t_summary = $p_issue['summary'];\n\t$t_description = $p_issue['description'];\n\t$t_notes = isset( $p_issue['notes'] ) ? $p_issue['notes'] : array();\n\n\tif( $t_reporter_id == 0 ) {\n\t\t$t_reporter_id = $t_user_id;\n\t} else {\n\t\tif( $t_reporter_id != $t_user_id ) {\n\n\t\t\t# Make sure that active user has access level required to specify a different reporter.\n\t\t\t$t_specify_reporter_access_level = config_get( 'mc_specify_reporter_on_add_access_level_threshold' );\n\t\t\tif( !access_has_project_level( $t_specify_reporter_access_level, $t_project_id, $t_user_id ) ) {\n\t\t\t\treturn mci_soap_fault_access_denied( $t_user_id, \"Active user does not have access level required to specify a different issue reporter\" );\n\t\t\t}\n\t\t}\n\t}\n\n\tif(( $t_project_id == 0 ) || !project_exists( $t_project_id ) ) {\n\t\tif( $t_project_id == 0 ) {\n\t\t\treturn new soap_fault( 'Client', '', \"Project '\" . $t_project['name'] . \"' does not exist.\" );\n\t\t} else {\n\t\t\treturn new soap_fault( 'Client', '', \"Project with id '\" . $t_project_id . \"' does not exist.\" );\n\t\t}\n\t}\n\n\tif( !access_has_project_level( config_get( 'report_bug_threshold' ), $t_project_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( \"User '$t_user_id' does not have access right to report issues\" );\n\t}\n\n\t#if ( !access_has_project_level( config_get( 'report_bug_threshold' ), $t_project_id ) ||\n\t#\t!access_has_project_level( config_get( 'report_bug_threshold' ), $t_project_id, $v_reporter ) ) {\n\t#\treturn new soap_fault( 'Client', '', \"User does not have access right to report issues.\" );\n\t#}\n\n\tif(( $t_handler_id != 0 ) && !user_exists( $t_handler_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"User '$t_handler_id' does not exist.\" );\n\t}\n\n\t$t_category = isset ( $p_issue['category'] ) ? $p_issue['category'] : null;\n\t\n\t$t_category_id = translate_category_name_to_id( $t_category, $t_project_id );\n\tif ( $t_category_id == 0 && !config_get( 'allow_no_category' ) ) {\n\t\tif ( !isset( $p_issue['category'] ) || is_blank( $p_issue['category'] ) ) {\n\t\t\treturn new soap_fault( 'Client', '', \"Category field must be supplied.\" );\n\t\t} else {\n\t\t\treturn new soap_fault( 'Client', '', \"Category '\" . $p_issue['category'] . \"' not found for project '$t_project_id'.\" );\n\t\t}\n\t}\n\n\tif ( isset( $p_issue['version'] ) && !is_blank( $p_issue['version'] ) && !version_get_id( $p_issue['version'], $t_project_id ) ) {\n\t\t$t_version = $p_issue['version'];\n\n\t\t$t_error_when_version_not_found = config_get( 'mc_error_when_version_not_found' );\n\t\tif( $t_error_when_version_not_found == ON ) {\n\t\t\t$t_project_name = project_get_name( $t_project_id );\n\t\t\treturn new soap_fault( 'Client', '', \"Version '$t_version' does not exist in project '$t_project_name'.\" );\n\t\t} else {\n\t\t\t$t_version_when_not_found = config_get( 'mc_version_when_not_found' );\n\t\t\t$t_version = $t_version_when_not_found;\n\t\t}\n\t}\n\n\tif ( is_blank( $t_summary ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Mandatory field 'summary' is missing.\" );\n\t}\n\n\tif ( is_blank( $t_description ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Mandatory field 'description' is missing.\" );\n\t}\n\n\t$t_bug_data = new BugData;\n\t$t_bug_data->profile_id = 0;\n\t$t_bug_data->project_id = $t_project_id;\n\t$t_bug_data->reporter_id = $t_reporter_id;\n\t$t_bug_data->handler_id = $t_handler_id;\n\t$t_bug_data->priority = $t_priority_id;\n\t$t_bug_data->severity = $t_severity_id;\n\t$t_bug_data->reproducibility = $t_reproducibility_id;\n\t$t_bug_data->status = $t_status_id;\n\t$t_bug_data->resolution = $t_resolution_id;\n\t$t_bug_data->projection = $t_projection_id;\n\t$t_bug_data->category_id = $t_category_id;\n\t$t_bug_data->date_submitted = isset( $p_issue['date_submitted'] ) ? $p_issue['date_submitted'] : '';\n\t$t_bug_data->last_updated = isset( $p_issue['last_updated'] ) ? $p_issue['last_updated'] : '';\n\t$t_bug_data->eta = $t_eta_id;\n\t$t_bug_data->profile_id = isset ( $p_issue['profile_id'] ) ? $p_issue['profile_id'] : 0;\n\t$t_bug_data->os = isset( $p_issue['os'] ) ? $p_issue['os'] : '';\n\t$t_bug_data->os_build = isset( $p_issue['os_build'] ) ? $p_issue['os_build'] : '';\n\t$t_bug_data->platform = isset( $p_issue['platform'] ) ? $p_issue['platform'] : '';\n\t$t_bug_data->version = isset( $p_issue['version'] ) ? $p_issue['version'] : '';\n\t$t_bug_data->fixed_in_version = isset( $p_issue['fixed_in_version'] ) ? $p_issue['fixed_in_version'] : '';\n\t$t_bug_data->build = isset( $p_issue['build'] ) ? $p_issue['build'] : '';\n\t$t_bug_data->view_state = $t_view_state_id;\n\t$t_bug_data->summary = $t_summary;\n\t$t_bug_data->sponsorship_total = isset( $p_issue['sponsorship_total'] ) ? $p_issue['sponsorship_total'] : 0;\n\tif (  isset ( $p_issue['sticky']) && \n\t     access_has_project_level( config_get( 'set_bug_sticky_threshold', null, null, $t_project_id ), $t_project_id ) ) {\n\t    $t_bug_data->sticky = $p_issue['sticky'];\n\t}\n\t\n\tif ( isset( $p_issue['due_date'] ) && access_has_global_level( config_get( 'due_date_update_threshold' ) ) ) {\n\t\t$t_bug_data->due_date = mci_iso8601_to_timestamp( $p_issue['due_date'] );\n\t} else {\n\t\t$t_bug_data->due_date = date_get_null();\n\t}\n\n\tif( access_has_project_level( config_get( 'roadmap_update_threshold' ), $t_bug_data->project_id, $t_user_id ) ) {\n\t\t$t_bug_data->target_version = isset( $p_issue['target_version'] ) ? $p_issue['target_version'] : '';\n\t}\n\t\n\t# omitted:\n\t# var $bug_text_id\n\t# $t_bug_data->profile_id;\n\t# extended info\n\t$t_bug_data->description = $t_description;\n\t$t_bug_data->steps_to_reproduce = isset( $p_issue['steps_to_reproduce'] ) ? $p_issue['steps_to_reproduce'] : '';\n\t$t_bug_data->additional_information = isset( $p_issue['additional_information'] ) ? $p_issue['additional_information'] : '';\n\n\t# submit the issue\n\t$t_issue_id = $t_bug_data->create();\n\n\tmci_issue_set_custom_fields( $t_issue_id, $p_issue['custom_fields'], false );\n\tif ( isset ( $p_issue['monitors'] ) )\n\t    mci_issue_set_monitors( $t_issue_id , $t_user_id, $p_issue['monitors'] );\n\n\tif( isset( $t_notes ) && is_array( $t_notes ) ) {\n\t\tforeach( $t_notes as $t_note ) {\n\t\t\tif( isset( $t_note['view_state'] ) ) {\n\t\t\t\t$t_view_state = $t_note['view_state'];\n\t\t\t} else {\n\t\t\t\t$t_view_state = config_get( 'default_bugnote_view_status' );\n\t\t\t}\n\t\t\t\n\t\t\t$note_type = isset ( $t_note['note_type'] ) ? (int) $t_note['note_type'] : BUGNOTE;\n\t\t\t$note_attr = isset ( $t_note['note_type'] ) ? $t_note['note_attr'] : '';\n\n\t\t\t$t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n\t\t\tbugnote_add( $t_issue_id, $t_note['text'], mci_get_time_tracking_from_note( $t_issue_id, $t_note ), $t_view_state_id == VS_PRIVATE, $note_type, $note_attr, $t_user_id, FALSE );\n\t\t}\n\t}\n\t\n\tif ( isset ( $p_issue['tags']) && is_array ( $p_issue['tags']) ) {\n\t\tmci_tag_set_for_issue( $t_issue_id, $p_issue['tags'], $t_user_id );\n\t}\t\n\n\temail_new_bug( $t_issue_id );\n\n\treturn $t_issue_id;\n}\n\n/**\n * Update Issue in database\n *\n * Created By KGB\n * @param string $p_username The name of the user trying to add the issue.\n * @param string $p_password The password of the user.\n * @param Array $p_issue A IssueData structure containing information about the new issue.\n * @return integer The id of the created issue.\n */\nfunction mc_issue_update( $p_username, $p_password, $p_issue_id, $p_issue ) {\n\tglobal $g_project_override;\n\t\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' does not exist.\" );\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$g_project_override = $t_project_id; // ensure that helper_get_current_project() calls resolve to this project id\n\n\t$t_project_id = mci_get_project_id( $p_issue['project'] );\n\t$t_reporter_id = isset( $p_issue['reporter'] ) ? mci_get_user_id( $p_issue['reporter'] )  : $t_user_id ;\n\t$t_handler_id = isset( $p_issue['handler'] ) ? mci_get_user_id( $p_issue['handler'] ) : 0;\n\t$t_project = $p_issue['project'];\n\t$t_summary = isset( $p_issue['summary'] ) ? $p_issue['summary'] : '';\n\t$t_description = isset( $p_issue['description'] ) ? $p_issue['description'] : '';\n\t\n\t\n\tif(( $t_project_id == 0 ) || !project_exists( $t_project_id ) ) {\n\t\tif( $t_project_id == 0 ) {\n\t\t\treturn new soap_fault( 'Client', '', \"Project '\" . $t_project['name'] . \"' does not exist.\" );\n\t\t}\n\t\treturn new soap_fault( 'Client', '', \"Project '$t_project_id' does not exist.\" );\n\t}\n\n\tif( !access_has_bug_level( config_get( 'update_bug_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id,  \"Not enough rights to update issues\" );\n\t}\n\n\tif(( $t_handler_id != 0 ) && !user_exists( $t_handler_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"User '$t_handler_id' does not exist.\" );\n\t}\n\n\t$t_category = isset ( $p_issue['category'] ) ? $p_issue['category'] : null;\n\t\n\t$t_category_id = translate_category_name_to_id( $t_category, $t_project_id );\n\tif ( $t_category_id == 0 && !config_get( 'allow_no_category' ) ) {\n\t\tif ( isset( $p_issue['category'] ) && !is_blank( $p_issue['category'] ) ) {\n\t\t\treturn new soap_fault( 'Client', '', \"Category field must be supplied.\" );\n\t\t} else {\n\t\t\treturn new soap_fault( 'Client', '', \"Category '\" . $p_issue['category'] . \"' not found for project '$t_project_name'.\" );\n\t\t}\n\t}\n\n\tif ( isset( $p_issue['version'] ) && !is_blank( $p_issue['version'] ) && !version_get_id( $p_issue['version'], $t_project_id ) ) {\n\t\t$t_error_when_version_not_found = config_get( 'mc_error_when_version_not_found' );\n\t\tif( $t_error_when_version_not_found == ON ) {\n\t\t\t$t_project_name = project_get_name( $t_project_id );\n\t\t\treturn new soap_fault( 'Client', '', \"Version '\" . $p_issue['version'] . \"' does not exist in project '$t_project_name'.\" );\n\t\t} else {\n\t\t\t$t_version_when_not_found = config_get( 'mc_version_when_not_found' );\n\t\t\t$p_issue['version'] = $t_version_when_not_found;\n\t\t}\n\t}\n\n\tif ( is_blank( $t_summary ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Mandatory field 'summary' is missing.\" );\n\t}\n\n\tif ( is_blank( $t_description ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Mandatory field 'description' is missing.\" );\n\t}\n\n\t// fields which we expect to always be set\n\t$t_bug_data = bug_get( $p_issue_id, true );\n\t$t_bug_data->project_id = $t_project_id;\n\t$t_bug_data->reporter_id = $t_reporter_id;\n\t$t_bug_data->handler_id = $t_handler_id;\n\t$t_bug_data->category_id = $t_category_id;\n\t$t_bug_data->summary = $t_summary;\n\t$t_bug_data->description = $t_description;\n\n\t// fields which might not be set\n\tif ( isset ( $p_issue['steps_to_reproduce'] ) )\n\t\t$t_bug_data->steps_to_reproduce = $p_issue['steps_to_reproduce'];\n\tif ( isset ( $p_issue['additional_information'] ) )\n\t\t$t_bug_data->additional_information = $p_issue['additional_information'];\n\tif ( isset( $p_issue['priority'] ) )\n\t\t$t_bug_data->priority = mci_get_priority_id( $p_issue['priority'] );\n\tif ( isset( $p_issue['severity'] ) )\n\t\t$t_bug_data->severity = mci_get_severity_id( $p_issue['severity'] );\n\tif ( isset( $p_issue['status'] ) )\n\t\t$t_bug_data->status = mci_get_status_id ( $p_issue['status'] );\n\tif ( isset ( $p_issue['reproducibility'] ) )\n\t\t$t_bug_data->reproducibility = mci_get_reproducibility_id( $p_issue['reproducibility'] );\n\tif ( isset ( $p_issue['resolution'] ) )\n\t\t$t_bug_data->resolution = mci_get_resolution_id( $p_issue['resolution'] );\n\tif ( isset ( $p_issue['projection'] ) )\n\t\t$t_bug_data->projection = mci_get_projection_id( $p_issue['projection'] );\n\tif ( isset ( $p_issue['eta'] ) )\n\t\t$t_bug_data->eta = mci_get_eta_id( $p_issue['eta'] );\n\tif ( isset ( $p_issue['view_state'] ) )\n\t\t$t_bug_data->view_state = mci_get_view_state_id( $p_issue['view_state'] );\n\tif ( isset ( $p_issue['date_submitted'] ) )\n\t\t$t_bug_data->date_submitted = $p_issue['date_submitted'];\n\tif ( isset ( $p_issue['date_updated'] ) )\n\t\t$t_bug_data->last_updated = $p_issue['last_updated'];\n\tif ( isset ( $p_issue['profile_id'] ) )\n\t\t$t_bug_data->profile_id = $p_issue['profile_id'];\n\tif ( isset ( $p_issue['os'] ) )\n\t\t$t_bug_data->os = $p_issue['os'];\n\tif ( isset ( $p_issue['os_build'] ) )\n\t\t$t_bug_data->os_build = $p_issue['os_build'];\n\tif ( isset ( $p_issue['build'] ) )\n\t\t$t_bug_data->build = $p_issue['build'];\n\tif ( isset ( $p_issue['platform'] ) )\n\t\t$t_bug_data->platform = $p_issue['platform'];\n\tif ( isset ( $p_issue['version'] ) )\n\t\t$t_bug_data->version = $p_issue['version'];\n\tif ( isset ( $p_issue['fixed_in_version'] ) )\n\t\t$t_bug_data->fixed_in_version = $p_issue['fixed_in_version'];\n\tif (  isset ( $p_issue['sticky']) && access_has_bug_level( config_get( 'set_bug_sticky_threshold' ), $t_bug_data->id ) ) {\n\t    $t_bug_data->sticky = $p_issue['sticky'];\n\t}\n\n\tif ( isset( $p_issue['due_date'] ) && access_has_global_level( config_get( 'due_date_update_threshold' ) ) ) {\n\t\t$t_bug_data->due_date = mci_iso8601_to_timestamp( $p_issue['due_date'] );\n\t} else {\n\t\t$t_bug_data->due_date = date_get_null();\n\t}\n\n\tif( access_has_project_level( config_get( 'roadmap_update_threshold' ), $t_bug_data->project_id, $t_user_id ) ) {\n\t\t$t_bug_data->target_version = isset( $p_issue['target_version'] ) ? $p_issue['target_version'] : '';\n\t}\n\n\tmci_issue_set_custom_fields( $p_issue_id, $p_issue['custom_fields'], true );\n\tif ( isset ( $p_issue['monitors'] ) )\n\t    mci_issue_set_monitors( $p_issue_id , $t_user_id, $p_issue['monitors'] );\n\n\tif ( isset( $p_issue['notes'] ) && is_array( $p_issue['notes'] ) ) {\n\n\t\t$t_bugnotes = bugnote_get_all_visible_bugnotes( $p_issue_id, 'DESC', 0 );\n\t\t$t_bugnotes_by_id = array();\n\t\tforeach ( $t_bugnotes as $t_bugnote ) {\n\t\t\t$t_bugnotes_by_id[$t_bugnote->id] = $t_bugnote;\n\t\t}\n\n\t\tforeach ( $p_issue['notes'] as $t_note ) {\n\t\t\tif ( isset( $t_note['view_state'] ) ) {\n\t\t\t\t$t_view_state = $t_note['view_state'];\n\t\t\t} else {\n\t\t\t\t$t_view_state = config_get( 'default_bugnote_view_status' );\n\t\t\t}\n\n\t\t\tif ( isset( $t_note['id'] ) && ( (int)$t_note['id'] > 0 ) ) {\n\t\t\t\t$t_bugnote_id = (integer)$t_note['id'];\n\n\t\t\t\t$t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n\n\t\t\t\tif ( array_key_exists( $t_bugnote_id , $t_bugnotes_by_id) ) {\n\n\t\t\t\t\t$t_bugnote_changed = false;\n\n\t\t\t\t\tif ( $t_bugnote->note !== $t_note['text']) {\n\t\t\t\t\t\tbugnote_set_text( $t_bugnote_id, $t_note['text'] );\n\t\t\t\t\t\t$t_bugnote_changed = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $t_bugnote->view_state !== $t_view_state_id ) {\n\t\t\t\t\t\tbugnote_set_view_state( $t_bugnote_id, $t_view_state_id == VS_PRIVATE );\n\t\t\t\t\t\t$t_bugnote_changed = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isset( $t_note['time_tracking']) && $t_note['time_tracking'] !== $t_bugnote->time_tracking ) {\n\t\t\t\t\t\tbugnote_set_time_tracking( $t_bugnote_id, mci_get_time_tracking_from_note( $p_issue_id, $t_note ) );\n\t\t\t\t\t\t$t_bugnote_changed = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $t_bugnote_changed ) {\n\t\t\t\t\t\tbugnote_date_update( $t_bugnote_id );\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n\t\t\t\t\n\t\t\t\t$note_type = isset ( $t_note['note_type'] ) ? (int) $t_note['note_type'] : BUGNOTE;\n\t\t\t    $note_attr = isset ( $t_note['note_type'] ) ? $t_note['note_attr'] : '';\n\t\t\t\t\n\t\t\t\tbugnote_add( $p_issue_id, $t_note['text'], mci_get_time_tracking_from_note( $p_issue_id, $t_note ), $t_view_state_id == VS_PRIVATE, $note_type, $note_attr, $t_user_id, FALSE );\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif ( isset ( $p_issue['tags']) && is_array ( $p_issue['tags']) ) {\n\t\tmci_tag_set_for_issue( $p_issue_id, $p_issue['tags'] , $t_user_id );\n\t}\n\t\n\t# submit the issue\n\treturn $t_is_success = $t_bug_data->update( /* update_extended */ true, /* bypass_email */ false);\n}\n\nfunction mc_issue_set_tags ( $p_username, $p_password, $p_issue_id, $p_tags ) {\n\t\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' does not exist.\" );\n\t}\n\t\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\t\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\tmci_tag_set_for_issue( $p_issue_id,  $p_tags, $t_user_id );\n\t\n\treturn true;\n}\n\n/**\n * Delete the specified issue.\n *\n * @param string $p_username  The name of the user trying to delete the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue to delete.\n * @return boolean  True if the issue has been deleted successfully, false otherwise.\n */\nfunction mc_issue_delete( $p_username, $p_password, $p_issue_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' does not exist.\");\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\treturn bug_delete( $p_issue_id );\n}\n\n/**\n * Add a note to an existing issue.\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue to add the note to.\n * @param IssueNoteData $p_note  The note to add.\n * @return integer The id of the added note.\n */\nfunction mc_issue_note_add( $p_username, $p_password, $p_issue_id, $p_note ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( (integer) $p_issue_id < 1 ) {\n\t\treturn new soap_fault( 'Client', '', \"Invalid issue id '$p_issue_id'\" );\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' does not exist.\" );\n\t}\n\n\tif ( !isset( $p_note['text'] ) || is_blank( $p_note['text'] ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue note text must not be blank.\" );\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif( !access_has_bug_level( config_get( 'add_bugnote_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id, \"You do not have access rights to add notes to this issue\" );\n\t}\n\n\tif( bug_is_readonly( $p_issue_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id, \"Issue '$p_issue_id' is readonly\" );\n\t}\n\n\tif( isset( $p_note['view_state'] ) ) {\n\t\t$t_view_state = $p_note['view_state'];\n\t} else {\n\t\t$t_view_state = array(\n\t\t\t'id' => config_get( 'default_bug_view_status' ),\n\t\t);\n\t}\n\t\n\t$t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n\t\n\t$note_type = isset ( $p_note['note_type'] ) ? (int) $p_note['note_type'] : BUGNOTE;\n\t$note_attr = isset ( $p_note['note_type'] ) ? $p_note['note_attr'] : '';\n\n\treturn bugnote_add( $p_issue_id, $p_note['text'], mci_get_time_tracking_from_note( $p_issue_id, $p_note ), $t_view_state_id == VS_PRIVATE, $note_type, $note_attr, $t_user_id );\n}\n\n/**\n * Delete a note given its id.\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_note_id  The id of the note to be deleted.\n * @return true: success, false: failure\n */\nfunction mc_issue_note_delete( $p_username, $p_password, $p_issue_note_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( (integer) $p_issue_note_id < 1 ) {\n\t\treturn new soap_fault( 'Client', '', \"Invalid issue note id '$p_issue_note_id'.\");\n\t}\n\n\tif( !bugnote_exists( $p_issue_note_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue note '$p_issue_note_id' does not exist.\");\n\t}\n\n\t$t_issue_id = bugnote_get_field( $p_issue_note_id, 'bug_id' );\n\t$t_project_id = bug_get_field( $t_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$t_reporter_id = bugnote_get_field( $p_issue_note_id, 'reporter_id' );\t\n\t\n\t// mirrors check from bugnote_delete.php\n\tif ( ( $t_user_id != $t_reporter_id ) || ( OFF == config_get( 'bugnote_allow_user_edit_delete' ) ) ) {\n\t    if ( !access_has_bugnote_level( config_get( 'delete_bugnote_threshold' ), $p_issue_note_id ) ) {\n\t        return mci_soap_fault_access_denied( $t_user_id );\n\t    }\n\t}\n\n\treturn bugnote_delete( $p_issue_note_id );\n}\n\n/**\n * Update a note\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * param string $p_password  The password of the user.\n * @param IssueNoteData $p_note  The note to update.\n * @return true on success, false on failure\n */\nfunction mc_issue_note_update( $p_username, $p_password, $p_note ) {\n    $t_user_id = mci_check_login( $p_username, $p_password );\n    \n    if( $t_user_id === false ) {\n        return mci_soap_fault_login_failed();\n    }\n\n    if ( !isset( $p_note['id'] ) || is_blank( $p_note['id'] ) ) {\n        return new soap_fault( 'Client', '', \"Issue id must not be blank.\" );\n    }\n    \n    if ( !isset( $p_note['text'] ) || is_blank( $p_note['text'] ) ) {\n        return new soap_fault( 'Client', '', \"Issue note text must not be blank.\" );\n    }\n    \n    $t_issue_note_id = $p_note['id'];\n\n    if( !bugnote_exists( $t_issue_note_id ) ) {\n        return new soap_fault( 'Server', '', \"Issue note '$t_issue_note_id' does not exist.\" );\n    }\n    \n\t$t_issue_id = bugnote_get_field( $t_issue_note_id, 'bug_id' );\n\t\n\t$t_project_id = bug_get_field( $t_issue_id, 'project_id' );\n\n    if( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n        return mci_soap_fault_access_denied( $t_user_id );\n    }\n\n    if( !access_has_bug_level( config_get( 'add_bugnote_threshold' ), $t_issue_id, $t_user_id ) ) {\n        return mci_soap_fault_access_denied( $t_user_id, \"You do not have access rights to add notes to this issue\" );\n    }\n\n    if( bug_is_readonly( $t_issue_id ) ) {\n        return mci_soap_fault_access_denied( $t_user_id, \"Issue ' . $t_issue_id . ' is readonly\" );\n    }\n\n    if( isset( $p_note['view_state'] )) {\n        $t_view_state = $p_note['view_state'];\n        $t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n        bugnote_set_view_state( $t_issue_note_id, $t_view_state_id );\n    }\n\n    bugnote_set_text( $t_issue_note_id, $p_note['text'] );\n\n    return bugnote_date_update( $t_issue_note_id );\n}\n\n/**\n * Submit a new relationship.\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue of the source issue.\n * @param RelationshipData $p_relationship  The relationship to add.\n * @return integer The id of the added relationship.\n */\nfunction mc_issue_relationship_add( $p_username, $p_password, $p_issue_id, $p_relationship ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\t$t_dest_issue_id = $p_relationship['target_id'];\n\t$t_rel_type = $p_relationship['type'];\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t# user has access to update the bug...\n\tif( !access_has_bug_level( config_get( 'update_bug_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id, \"Active user does not have access level required to add a relationship to this issue\" );\n\t}\n\n\t# source and destination bugs are the same bug...\n\tif( $p_issue_id == $t_dest_issue_id ) {\n\t\treturn new soap_fault( 'Client', '', \"An issue can't be related to itself.\" );\n\t}\n\n\t# the related bug exists...\n\tif( !bug_exists( $t_dest_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$t_dest_issue_id' not found.\" );\n\t}\n\n\t# bug is not read-only...\n\tif( bug_is_readonly( $p_issue_id ) ) {\n\t\treturn new mci_soap_fault_access_denied( $t_user_id, \"Issue '$p_issue_id' is readonly\" );\n\t}\n\n\t# user can access to the related bug at least as viewer...\n\tif( !access_has_bug_level( VIEWER, $t_dest_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id, \"The issue '$t_dest_issue_id' requires higher access level\" );\n\t}\n\n\t$t_old_id_relationship = relationship_same_type_exists( $p_issue_id, $t_dest_issue_id, $t_rel_type['id'] );\n\n\tif( $t_old_id_relationship == 0 ) {\n\t\trelationship_add( $p_issue_id, $t_dest_issue_id, $t_rel_type['id'] );\n\n\t\t// The above function call into MantisBT does not seem to return a valid BugRelationshipData object.\n\t\t// So we call db_insert_id in order to find the id of the created relationship.\n\t\t$t_relationship_id = db_insert_id( db_get_table( 'mantis_bug_relationship_table' ) );\n\n\t\t# Add log line to the history (both bugs)\n\t\thistory_log_event_special( $p_issue_id, BUG_ADD_RELATIONSHIP, $t_rel_type['id'], $t_dest_issue_id );\n\t\thistory_log_event_special( $t_dest_issue_id, BUG_ADD_RELATIONSHIP, relationship_get_complementary_type( $t_rel_type['id'] ), $p_issue_id );\n\n\t\t# update bug last updated for both bugs\n\t\tbug_update_date( $p_issue_id );\n\t\tbug_update_date( $t_dest_issue_id );\n\n\t\t# send email notification to the users addressed by both the bugs\n\t\temail_relationship_added( $p_issue_id, $t_dest_issue_id, $t_rel_type['id'] );\n\t\temail_relationship_added( $t_dest_issue_id, $p_issue_id, relationship_get_complementary_type( $t_rel_type['id'] ) );\n\n\t\treturn $t_relationship_id;\n\t} else {\n\t\treturn new soap_fault( 'Client', '', \"Relationship already exists.\" );\n\t}\n}\n\n/**\n * Delete the relationship with the specified target id.\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the source issue for the relationship\n * @param integer $p_relationship_id  The id of relationship to delete.\n * @return true: success, false: failure\n */\nfunction mc_issue_relationship_delete( $p_username, $p_password, $p_issue_id, $p_relationship_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t# user has access to update the bug...\n\tif( !access_has_bug_level( config_get( 'update_bug_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id , \"Active user does not have access level required to remove a relationship from this issue.\" );\n\t}\n\n\t# bug is not read-only...\n\tif( bug_is_readonly( $p_issue_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id , \"Issue '$p_issue_id' is readonly.\" );\n\t}\n\n\t# retrieve the destination bug of the relationship\n\t$t_dest_issue_id = relationship_get_linked_bug_id( $p_relationship_id, $p_issue_id );\n\n\t# user can access to the related bug at least as viewer, if it's exist...\n\tif( bug_exists( $t_dest_issue_id ) ) {\n\t\tif( !access_has_bug_level( VIEWER, $t_dest_issue_id, $t_user_id ) ) {\n\t\t\treturn mci_soap_fault_access_denied( $t_user_id , \"The issue '$t_dest_issue_id' requires higher access level.\" );\n\t\t}\n\t}\n\n\t$t_bug_relationship_data = relationship_get( $p_relationship_id );\n\t$t_rel_type = $t_bug_relationship_data->type;\n\n\t# delete relationship from the DB\n\trelationship_delete( $p_relationship_id );\n\n\t# update bug last updated\n\tbug_update_date( $p_issue_id );\n\tbug_update_date ( $t_dest_issue_id );\n\n\t# set the rel_type for both bug and dest_bug based on $t_rel_type and on who is the dest bug\n\tif( $p_issue_id == $t_bug_relationship_data->src_bug_id ) {\n\t\t$t_bug_rel_type = $t_rel_type;\n\t\t$t_dest_bug_rel_type = relationship_get_complementary_type( $t_rel_type );\n\t} else {\n\t\t$t_bug_rel_type = relationship_get_complementary_type( $t_rel_type );\n\t\t$t_dest_bug_rel_type = $t_rel_type;\n\t}\n\n\t# send email and update the history for the src issue\n\thistory_log_event_special( $p_issue_id, BUG_DEL_RELATIONSHIP, $t_bug_rel_type, $t_dest_issue_id );\n\temail_relationship_deleted( $p_issue_id, $t_dest_issue_id, $t_bug_rel_type );\n\n\tif( bug_exists( $t_dest_issue_id ) ) {\n\n\t\t# send email and update the history for the dest issue\n\t\thistory_log_event_special( $t_dest_issue_id, BUG_DEL_RELATIONSHIP, $t_dest_bug_rel_type, $p_issue_id );\n\t\temail_relationship_deleted( $t_dest_issue_id, $p_issue_id, $t_dest_bug_rel_type );\n\t}\n\n\treturn true;\n}\n\n/**\n * Log a checkin event on the issue\n *\n * @param string $p_username  The name of the user trying to access the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id The id of the issue to log a checkin.\n * @param string $p_comment   The comment to add\n * @param boolean $p_fixed    True if the issue is to be set to fixed\n * @return boolean  true success, false otherwise.\n */\nfunction mc_issue_checkin( $p_username, $p_password, $p_issue_id, $p_comment, $p_fixed ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' not found.\" );\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\thelper_call_custom_function( 'checkin', array( $p_issue_id, $p_comment, '', '', $p_fixed ) );\n\n\treturn true;\n}\n\n/**\n * Returns the date in iso8601 format, with proper timezone offset applied\n * \n * @param string $p_date the date in iso8601 format\n * @return int the timestamp\n */\nfunction mci_iso8601_to_timestamp( $p_date ) {\n\t\n\t// retrieve the offset, seems to be lost by nusoap\n\t$t_utc_date = new DateTime( $p_date, new DateTimeZone( 'UTC' ) );\n\t$t_timezone = new DateTimeZone( date_default_timezone_get() );\n\t$t_offset = $t_timezone->getOffset( $t_utc_date ); \n\t\n\t$t_raw_timestamp = iso8601_to_timestamp( $p_date );\n\t\n\treturn $t_raw_timestamp - $t_offset;\n\t\n}\n\n\n/**\n * Returns an array for SOAP encoding from a BugData object\n * \n * @param BugData $p_issue_data\n * @param int $p_user_id\n * @param string $p_lang\n * @return array The issue as an array\n */\nfunction mci_issue_data_as_array( $p_issue_data, $p_user_id, $p_lang ) {\n\t\n\t\t$t_id = $p_issue_data->id;\n\n\t\t$t_issue = array();\n\t\t$t_issue['id'] = $t_id;\n\t\t$t_issue['view_state'] = mci_enum_get_array_by_id( $p_issue_data->view_state, 'view_state', $p_lang );\n\t\t$t_issue['last_updated'] = timestamp_to_iso8601( $p_issue_data->last_updated, false );\n\n\t\t$t_issue['project'] = mci_project_as_array_by_id( $p_issue_data->project_id );\n\t\t$t_issue['category'] = mci_get_category( $p_issue_data->category_id );\n\t\t$t_issue['priority'] = mci_enum_get_array_by_id( $p_issue_data->priority, 'priority', $p_lang );\n\t\t$t_issue['severity'] = mci_enum_get_array_by_id( $p_issue_data->severity, 'severity', $p_lang );\n\t\t$t_issue['status'] = mci_enum_get_array_by_id( $p_issue_data->status, 'status', $p_lang );\n\n\t\t$t_issue['reporter'] = mci_account_get_array_by_id( $p_issue_data->reporter_id );\n\t\t$t_issue['summary'] = $p_issue_data->summary;\n\t\t$t_issue['version'] = mci_null_if_empty( $p_issue_data->version );\n\t\t$t_issue['build'] = mci_null_if_empty( $p_issue_data->build );\n\t\t$t_issue['profile_id'] = mci_null_if_empty( $p_issue_data->profile_id );\n\t\t$t_issue['platform'] = mci_null_if_empty( $p_issue_data->platform );\n\t\t$t_issue['os'] = mci_null_if_empty( $p_issue_data->os );\n\t\t$t_issue['os_build'] = mci_null_if_empty( $p_issue_data->os_build );\n\t\t$t_issue['reproducibility'] = mci_enum_get_array_by_id( $p_issue_data->reproducibility, 'reproducibility', $p_lang );\n\t\t$t_issue['date_submitted'] = timestamp_to_iso8601( $p_issue_data->date_submitted, false );\n\t\t$t_issue['sticky'] = $p_issue_data->sticky;\n\t\t\n\t\t$t_issue['sponsorship_total'] = $p_issue_data->sponsorship_total;\n\n\t\tif( !empty( $p_issue_data->handler_id ) ) {\n\t\t\t$t_issue['handler'] = mci_account_get_array_by_id( $p_issue_data->handler_id );\n\t\t}\n\t\t$t_issue['projection'] = mci_enum_get_array_by_id( $p_issue_data->projection, 'projection', $p_lang );\n\t\t$t_issue['eta'] = mci_enum_get_array_by_id( $p_issue_data->eta, 'eta', $p_lang );\n\n\t\t$t_issue['resolution'] = mci_enum_get_array_by_id( $p_issue_data->resolution, 'resolution', $p_lang );\n\t\t$t_issue['fixed_in_version'] = mci_null_if_empty( $p_issue_data->fixed_in_version );\n\t\t$t_issue['target_version'] = mci_null_if_empty( $p_issue_data->target_version );\n\n\t\t$t_issue['description'] = bug_get_text_field( $t_id, 'description' );\n\n\t\t$t_steps_to_reproduce = bug_get_text_field( $t_id, 'steps_to_reproduce' );\n\t\t$t_issue['steps_to_reproduce'] = mci_null_if_empty( $t_steps_to_reproduce );\n\n\t\t$t_additional_information = bug_get_text_field( $t_id, 'additional_information' );\n\t\t$t_issue['additional_information'] = mci_null_if_empty( $t_additional_information );\n\n\t\t$t_issue['attachments'] = mci_issue_get_attachments( $p_issue_data->id );\n\t\t$t_issue['relationships'] = mci_issue_get_relationships( $p_issue_data->id, $p_user_id );\n\t\t$t_issue['notes'] = mci_issue_get_notes( $p_issue_data->id );\n\t\t$t_issue['custom_fields'] = mci_issue_get_custom_fields( $p_issue_data->id );\n\t\t$t_issue['tags'] = mci_issue_get_tags_for_bug_id( $p_issue_data->id, $p_user_id );\n\t\t\n\t\treturn $t_issue;\n}\n\nfunction mci_issue_get_tags_for_bug_id( $p_bug_id, $p_user_id ) {\n\t\n\tif ( !access_has_global_level( config_get( 'tag_view_threshold' ), $p_user_id ) )\n\t\treturn array();\n\t\n\t$t_tag_rows = tag_bug_get_attached( $p_bug_id );\n\t$t_result = array();\n\t\n\tforeach ( $t_tag_rows as $t_tag_row ) {\n\t\t$t_result[] = array (\n\t\t\t'id' => $t_tag_row['id'],\n\t\t\t'name' => $t_tag_row['name']\n\t\t);\n\t}\n\t\n\treturn $t_result;\n}\n"], "fixing_code": ["<?php\n# MantisConnect - A webservice interface to Mantis Bug Tracker\n# Copyright (C) 2004-2012  Victor Boctor - vboctor@users.sourceforge.net\n# This program is distributed under dual licensing.  These include\n# GPL and a commercial licenses.  Victor Boctor reserves the right to\n# change the license of future releases.\n# See docs/ folder for more details\n\nrequire_once( dirname( __FILE__ ) . DIRECTORY_SEPARATOR . 'mc_core.php' );\n\n/**\n * Check if an issue with the given id exists.\n *\n * @param string $p_username  The name of the user trying to access the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue to check.\n * @return boolean  true if there is an issue with the given id, false otherwise.\n */\nfunction mc_issue_exists( $p_username, $p_password, $p_issue_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn false;\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readonly_access( $t_user_id, $t_project_id ) ) {\n\n\t\t// if we return an error here, then we answered the question!\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Get all details about an issue.\n *\n * @param string $p_username  The name of the user trying to access the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue to retrieve.\n * @return Array that represents an IssueData structure\n */\nfunction mc_issue_get( $p_username, $p_password, $p_issue_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', 'Issue does not exist.' );\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readonly_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif( !access_has_bug_level( VIEWER, $p_issue_id, $t_user_id ) ){\n\t    return mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_bug = bug_get( $p_issue_id, true );\n\t$t_issue_data = array();\n\n\t$t_issue_data['id'] = $p_issue_id;\n\t$t_issue_data['view_state'] = mci_enum_get_array_by_id( $t_bug->view_state, 'view_state', $t_lang );\n\t$t_issue_data['last_updated'] = timestamp_to_iso8601( $t_bug->last_updated, false );\n\n\t$t_issue_data['project'] = mci_project_as_array_by_id( $t_bug->project_id );\n\t$t_issue_data['category'] = mci_get_category( $t_bug->category_id );\n\t$t_issue_data['priority'] = mci_enum_get_array_by_id( $t_bug->priority, 'priority', $t_lang );\n\t$t_issue_data['severity'] = mci_enum_get_array_by_id( $t_bug->severity, 'severity', $t_lang );\n\t$t_issue_data['status'] = mci_enum_get_array_by_id( $t_bug->status, 'status', $t_lang );\n\n\t$t_issue_data['reporter'] = mci_account_get_array_by_id( $t_bug->reporter_id );\n\t$t_issue_data['summary'] = $t_bug->summary;\n\t$t_issue_data['version'] = mci_null_if_empty( $t_bug->version );\n\t$t_issue_data['build'] = mci_null_if_empty( $t_bug->build );\n\t$t_issue_data['profile_id'] = mci_null_if_empty( $t_bug->profile_id );\n\t$t_issue_data['platform'] = mci_null_if_empty( $t_bug->platform );\n\t$t_issue_data['os'] = mci_null_if_empty( $t_bug->os );\n\t$t_issue_data['os_build'] = mci_null_if_empty( $t_bug->os_build );\n\t$t_issue_data['reproducibility'] = mci_enum_get_array_by_id( $t_bug->reproducibility, 'reproducibility', $t_lang );\n\t$t_issue_data['date_submitted'] = timestamp_to_iso8601( $t_bug->date_submitted, false );\n\t$t_issue_data['sticky'] = $t_bug->sticky;\n\n\t$t_issue_data['sponsorship_total'] = $t_bug->sponsorship_total;\n\n\tif( !empty( $t_bug->handler_id ) ) {\n\t\t$t_issue_data['handler'] = mci_account_get_array_by_id( $t_bug->handler_id );\n\t}\n\n\t$t_issue_data['projection'] = mci_enum_get_array_by_id( $t_bug->projection, 'projection', $t_lang );\n\t$t_issue_data['eta'] = mci_enum_get_array_by_id( $t_bug->eta, 'eta', $t_lang );\n\n\t$t_issue_data['resolution'] = mci_enum_get_array_by_id( $t_bug->resolution, 'resolution', $t_lang );\n\t$t_issue_data['fixed_in_version'] = mci_null_if_empty( $t_bug->fixed_in_version );\n\t$t_issue_data['target_version'] = mci_null_if_empty( $t_bug->target_version );\n\t$t_issue_data['due_date'] = mci_issue_get_due_date( $t_bug );\n\n\t$t_issue_data['description'] = $t_bug->description;\n\t$t_issue_data['steps_to_reproduce'] = mci_null_if_empty( $t_bug->steps_to_reproduce );\n\t$t_issue_data['additional_information'] = mci_null_if_empty( $t_bug->additional_information );\n\n\t$t_issue_data['attachments'] = mci_issue_get_attachments( $p_issue_id );\n\t$t_issue_data['relationships'] = mci_issue_get_relationships( $p_issue_id, $t_user_id );\n\t$t_issue_data['notes'] = mci_issue_get_notes( $p_issue_id );\n\t$t_issue_data['custom_fields'] = mci_issue_get_custom_fields( $p_issue_id );\n\t$t_issue_data['monitors'] = mci_account_get_array_by_ids( bug_get_monitors ( $p_issue_id ) );\n\t$t_issue_data['tags'] = mci_issue_get_tags_for_bug_id( $p_issue_id , $t_user_id );\n\t\n\treturn $t_issue_data;\n}\n\n/**\n * Returns the category name, possibly null if no category is assigned\n * \n * @param int $p_category_id\n * @return string \n */\nfunction mci_get_category( $p_category_id ) {\n\tif ( $p_category_id == 0 )\n\t\treturn '';\n\t\t\n\treturn mci_null_if_empty( category_get_name( $p_category_id ) );\n}\n\n/**\n * \n * @param BugData $bug\n * @return soapval the value to be encoded as the due date\n */\nfunction mci_issue_get_due_date( $p_bug ) {\n\tif ( access_has_bug_level( config_get( 'due_date_view_threshold' ), $p_bug->id )  && !date_is_null( $p_bug->due_date ) ) {\n\t\treturn new soapval( 'due_date', 'xsd:dateTime', timestamp_to_iso8601( $p_bug->due_date, false ) );\n\t} else {\n\t\treturn new soapval( 'due_date','xsd:dateTime', null );\n\t}\n\t\n}\n\n/**\n * Sets the supplied array of custom field values to the specified issue id.\n *\n * @param $p_issue_id   Issue id to apply custom field values to.\n * @param $p_custom_fields  The array of custom field values as described in the webservice complex types.\n * @param boolean $p_log_insert create history logs for new values\n */\nfunction mci_issue_set_custom_fields( $p_issue_id, &$p_custom_fields, $p_log_insert ) {\n\t# set custom field values on the submitted issue\n\tif( isset( $p_custom_fields ) && is_array( $p_custom_fields ) ) {\n\t\tforeach( $p_custom_fields as $t_custom_field ) {\n\t\t\t# get custom field id from object ref\n\t\t\t$t_custom_field_id = mci_get_custom_field_id_from_objectref( $t_custom_field['field'] );\n\n\t\t\tif( $t_custom_field_id == 0 ) {\n\t\t\t\treturn new soap_fault( 'Client', '', 'Custom field ' . $t_custom_field['field']['name'] . ' not found.' );\n\t\t\t}\n\n\t\t\t# skip if current user doesn't have login access.\n\t\t\tif( !custom_field_has_write_access( $t_custom_field_id, $p_issue_id ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$t_value = $t_custom_field['value'];\n\n\t\t\tif( !custom_field_validate( $t_custom_field_id, $t_value ) ) {\n\t\t\t\treturn new soap_fault( 'Client', '', 'Invalid custom field value for field id ' . $t_custom_field_id . ' .');\n\t\t\t}\n\n\t\t\tif( !custom_field_set_value( $t_custom_field_id, $p_issue_id, $t_value, $p_log_insert  ) ) {\n\t\t\t\treturn new soap_fault( 'Server', '', 'Unable to set custom field value for field id ' . $t_custom_field_id . ' to issue ' . $p_issue_id. ' .' );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Get the custom field values associated with the specified issue id.\n *\n * @param $p_issue_id   Issue id to get the custom field values for.\n *\n * @return null if no custom field defined for the project that contains the issue, or if no custom\n *              fields are accessible to the current user.\n */\nfunction mci_issue_get_custom_fields( $p_issue_id ) {\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\n\t$t_custom_fields = array();\n\t$t_related_custom_field_ids = custom_field_get_linked_ids( $t_project_id );\n\n\tforeach( $t_related_custom_field_ids as $t_id ) {\n\t\t$t_def = custom_field_get_definition( $t_id );\n\n\t\tif( custom_field_has_read_access( $t_id, $p_issue_id ) ) {\n\n\t\t\t# user has not access to read this custom field.\n\t\t\t$t_value = custom_field_get_value( $t_id, $p_issue_id );\n\t\t\tif( $t_value === false ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t# return a blank string if the custom field value is undefined\n\t\t\tif( $t_value === null ) {\n\t\t\t\t$t_value = '';\n\t\t\t}\n\n\t\t\t$t_custom_field_value = array();\n\t\t\t$t_custom_field_value['field'] = array();\n\t\t\t$t_custom_field_value['field']['id'] = $t_id;\n\t\t\t$t_custom_field_value['field']['name'] = $t_def['name'];\n\t\t\t$t_custom_field_value['value'] = $t_value;\n\n\t\t\t$t_custom_fields[] = $t_custom_field_value;\n\t\t}\n\t}\n\n\t# foreach\n\n\treturn( count( $t_custom_fields ) == 0 ? null : $t_custom_fields );\n}\n\n/**\n * Get the attachments of an issue.\n *\n * @param integer $p_issue_id  The id of the issue to retrieve the attachments for\n * @return Array that represents an AttachmentData structure\n */\nfunction mci_issue_get_attachments( $p_issue_id ) {\n\t$t_attachment_rows = bug_get_attachments( $p_issue_id );\n\t\n\tif ( $t_attachment_rows == null) {\n\t\treturn array();\n\t}\n\t\n\t$t_result = array();\n\tforeach( $t_attachment_rows as $t_attachment_row ) {\n\t\tif ( !file_can_view_bug_attachments( $p_issue_id, (int)$t_attachment_row['user_id'] ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t$t_attachment = array();\n\t\t$t_attachment['id'] = $t_attachment_row['id'];\n\t\t$t_attachment['filename'] = $t_attachment_row['filename'];\n\t\t$t_attachment['size'] = $t_attachment_row['filesize'];\n\t\t$t_attachment['content_type'] = $t_attachment_row['file_type'];\n\t\t$t_attachment['date_submitted'] = timestamp_to_iso8601( $t_attachment_row['date_added'], false );\n\t\t$t_attachment['download_url'] = mci_get_mantis_path() . 'file_download.php?file_id=' . $t_attachment_row['id'] . '&amp;type=bug';\n\t\t$t_attachment['user_id'] = $t_attachment_row['user_id'];\n\t\t$t_result[] = $t_attachment;\n\t}\n\n\treturn $t_result;\n}\n\n/**\n * Get the relationships of an issue.\n *\n * @param integer $p_issue_id  The id of the issue to retrieve the relationships for\n * @return Array that represents an RelationShipData structure\n */\nfunction mci_issue_get_relationships( $p_issue_id, $p_user_id ) {\n\t$t_relationships = array();\n\n\t$t_src_relationships = relationship_get_all_src( $p_issue_id );\n\tforeach( $t_src_relationships as $t_relship_row ) {\n\t\tif( access_has_bug_level( config_get( 'mc_readonly_access_level_threshold' ), $t_relship_row->dest_bug_id, $p_user_id ) ) {\n\t\t\t$t_relationship = array();\n\t\t\t$t_reltype = array();\n\t\t\t$t_relationship['id'] = $t_relship_row->id;\n\t\t\t$t_reltype['id'] = $t_relship_row->type;\n\t\t\t$t_reltype['name'] = relationship_get_description_src_side( $t_relship_row->type );\n\t\t\t$t_relationship['type'] = $t_reltype;\n\t\t\t$t_relationship['target_id'] = $t_relship_row->dest_bug_id;\n\t\t\t$t_relationships[] = $t_relationship;\n\t\t}\n\t}\n\n\t$t_dest_relationships = relationship_get_all_dest( $p_issue_id );\n\tforeach( $t_dest_relationships as $t_relship_row ) {\n\t\tif( access_has_bug_level( config_get( 'mc_readonly_access_level_threshold' ), $t_relship_row->src_bug_id, $p_user_id ) ) {\n\t\t\t$t_relationship = array();\n\t\t\t$t_relationship['id'] = $t_relship_row->id;\n\t\t\t$t_reltype = array();\n\t\t\t$t_reltype['id'] = relationship_get_complementary_type( $t_relship_row->type );\n\t\t\t$t_reltype['name'] = relationship_get_description_dest_side( $t_relship_row->type );\n\t\t\t$t_relationship['type'] = $t_reltype;\n\t\t\t$t_relationship['target_id'] = $t_relship_row->src_bug_id;\n\t\t\t$t_relationships[] = $t_relationship;\n\t\t}\n\t}\n\n\treturn (count( $t_relationships ) == 0 ? null : $t_relationships );\n}\n\n/**\n * Get all visible notes for a specific issue\n *\n * @param integer $p_issue_id  The id of the issue to retrieve the notes for\n * @return Array that represents an IssueNoteData structure\n */\nfunction mci_issue_get_notes( $p_issue_id ) {\n\t$t_user_id = auth_get_current_user_id();\n\t$t_lang = mci_get_user_lang( $t_user_id );\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\t$t_user_bugnote_order = 'ASC'; // always get the notes in ascending order for consistency to the calling application.\n\t$t_has_time_tracking_access = access_has_bug_level( config_get( 'time_tracking_view_threshold' ), $p_issue_id );\n\t\n\t$t_result = array();\n\tforeach( bugnote_get_all_visible_bugnotes( $p_issue_id, $t_user_bugnote_order, 0 ) as $t_value ) {\n\t\t$t_bugnote = array();\n\t\t$t_bugnote['id'] = $t_value->id;\n\t\t$t_bugnote['reporter'] = mci_account_get_array_by_id( $t_value->reporter_id );\n\t\t$t_bugnote['date_submitted'] = timestamp_to_iso8601( $t_value->date_submitted, false );\n\t\t$t_bugnote['last_modified'] = timestamp_to_iso8601( $t_value->last_modified, false );\n\t\t$t_bugnote['text'] = $t_value->note;\n\t\t$t_bugnote['view_state'] = mci_enum_get_array_by_id( $t_value->view_state, 'view_state', $t_lang );\n\t\t$t_bugnote['time_tracking'] = $t_has_time_tracking_access ? $t_value->time_tracking : 0;\n\t\t$t_bugnote['note_type'] = $t_value->note_type;\n\t\t$t_bugnote['note_attr'] = $t_value->note_attr;\n\t\t\n\t\t$t_result[] = $t_bugnote;\n\t}\n\n\treturn (count( $t_result ) == 0 ? null : $t_result );\n}\n\n/**\n * Sets the monitors of the specified issue\n * \n * <p>This functions performs access level checks and only performs operations which would\n * modify the existing monitors list.</p>\n * \n * @param int $p_issue_id the issue id to set the monitors for\n * @param int $p_user_id the user which requests the monitor change\n * @param array $p_monitors An array of arrays with the <em>id</em> field set to the id \n *  of the users which should monitor this issue.\n */\nfunction mci_issue_set_monitors( $p_issue_id , $p_user_id, $p_monitors ) {\n    \n    $t_existing_monitors = bug_get_monitors( $p_issue_id );\n\n    $t_monitors = array();\n    foreach ( $p_monitors as $t_monitor ) \n        $t_monitors[] = $t_monitor['id'];\n    \n    foreach ( $t_monitors as $t_user_id ) {\n        \n    \tif ( $p_user_id == $t_user_id ) {\n    \t\tif ( ! access_has_bug_level( config_get( 'monitor_bug_threshold' ), $p_issue_id ) )\n    \t\t    continue;\n\t    } else {\n\t    \tif ( !access_has_bug_level( config_get( 'monitor_add_others_bug_threshold' ), $p_issue_id ) )\n\t    \t    continue;\n\t    }\n\t        \n       if ( in_array( $p_user_id, $t_existing_monitors) )\n           continue;\n\t        \n        bug_monitor( $p_issue_id, $t_user_id);\n    }\n    \n    foreach ( $t_existing_monitors as $t_user_id ) {\n\n    \tif ( $p_user_id == $t_user_id ) {\n    \t\tif ( ! access_has_bug_level( config_get( 'monitor_bug_threshold' ), $p_issue_id ) )\n    \t\t    continue;\n\t    } else {\n\t    \tif ( !access_has_bug_level( config_get( 'monitor_delete_others_bug_threshold' ), $p_issue_id ) )\n\t    \t    continue;\n\t    }\n        \n        if ( in_array( $p_user_id, $t_monitors) )\n            continue;\n            \n        bug_unmonitor( $p_issue_id, $t_user_id);\n    }\n                \n}\n\n/**\n * Get the biggest issue id currently used.\n *\n * @param string $p_username  The name of the user trying to retrieve the information\n * @param string $p_password  The password of the user.\n * @param int    $p_project_id\t-1 default project, 0 for all projects, otherwise project id.\n * @return integer  The biggest used issue id.\n */\nfunction mc_issue_get_biggest_id( $p_username, $p_password, $p_project_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_any = defined( 'META_FILTER_ANY' ) ? META_FILTER_ANY : 'any';\n\t$t_none = defined( 'META_FILTER_NONE' ) ? META_FILTER_NONE : 'none';\n\n\t$t_filter = array(\n\t\t'show_category' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_severity' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_status' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'highlight_changed' => 0,\n\t\t'reporter_id' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'handler_id' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_resolution' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_build' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'show_version' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'hide_status' => Array(\n\t\t\t'0' => $t_none,\n\t\t),\n\t\t'user_monitor' => Array(\n\t\t\t'0' => $t_any,\n\t\t),\n\t\t'dir' => 'DESC',\n\t\t'sort' => 'id',\n\t);\n\n\t$t_page_number = 1;\n\t$t_per_page = 1;\n\t$t_bug_count = 0;\n\t$t_page_count = 0;\n\n\t# Get project id, if -1, then retrieve the current which will be the default since there is no cookie.\n\t$t_project_id = $p_project_id;\n\tif( $t_project_id == -1 ) {\n\t\t$t_project_id = helper_get_current_project();\n\t}\n\n\tif(( $t_project_id > 0 ) && !project_exists( $t_project_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Project '$t_project_id' does not exist.\" );\n\t}\n\n\tif( !mci_has_readonly_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_rows = filter_get_bug_rows( $t_page_number, $t_per_page, $t_page_count, $t_bug_count, $t_filter, $t_project_id, $t_user_id );\n\tif( count( $t_rows ) == 0 ) {\n\t\treturn 0;\n\t} else {\n\t\treturn $t_rows[0]->id;\n\t}\n}\n\n/**\n * Get the id of an issue via the issue's summary.\n *\n * @param string $p_username  The name of the user trying to delete the issue.\n * @param string $p_password  The password of the user.\n * @param string $p_summary  The summary of the issue to retrieve.\n * @return integer  The id of the issue with the given summary, 0 if there is no such issue.\n */\nfunction mc_issue_get_id_from_summary( $p_username, $p_password, $p_summary ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_bug_table = db_get_table( 'mantis_bug_table' );\n\n\t$query = \"SELECT id\n\t\tFROM $t_bug_table\n\t\tWHERE summary = \" . db_param();\n\n\t$result = db_query_bound( $query, Array( $p_summary ), 1 );\n\n\tif( db_num_rows( $result ) == 0 ) {\n\t\treturn 0;\n\t} else {\n\t\twhile(( $row = db_fetch_array( $result ) ) !== false ) {\n\t\t\t$t_issue_id = (int) $row['id'];\n\t\t\t$t_project_id = bug_get_field( $t_issue_id, 'project_id' );\n\n\t\t\tif( mci_has_readonly_access( $t_user_id, $t_project_id ) ) {\n\t\t\t\treturn $t_issue_id;\n\t\t\t}\n\t\t}\n\n\t\t// no issue found that belongs to a project that the user has read access to.\n\t\treturn 0;\n\t}\n}\n\n/**\n * Add an issue to the database.\n *\n * @param string $p_username  The name of the user trying to add the issue.\n * @param string $p_password  The password of the user.\n * @param Array $p_issue  A IssueData structure containing information about the new issue.\n * @return integer  The id of the created issue.\n */\nfunction mc_issue_add( $p_username, $p_password, $p_issue ) {\n\t\n\tglobal $g_project_override;\n\t\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_project = $p_issue['project'];\n\n\t$t_project_id = mci_get_project_id( $t_project );\n\t$g_project_override = $t_project_id; // ensure that helper_get_current_project() calls resolve to this project id\n\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t$t_handler_id = isset( $p_issue['handler'] ) ? mci_get_user_id( $p_issue['handler'] ) : 0;\n\t$t_priority_id = isset( $p_issue['priority'] ) ? mci_get_priority_id( $p_issue['priority'] ) : config_get( 'default_bug_priority' );\n\t$t_severity_id = isset( $p_issue['severity'] ) ?  mci_get_severity_id( $p_issue['severity'] ) : config_get( 'default_bug_severity' );\n\t$t_status_id = isset( $p_issue['status'] ) ? mci_get_status_id( $p_issue['status'] ) : config_get( 'bug_submit_status' );\n\t$t_reproducibility_id = isset( $p_issue['reproducibility'] ) ?  mci_get_reproducibility_id( $p_issue['reproducibility'] ) : config_get( 'default_bug_reproducibility' );\n\t$t_resolution_id =  isset( $p_issue['resolution'] ) ? mci_get_resolution_id( $p_issue['resolution'] ) : config_get('default_bug_resolution');\n\t$t_projection_id = isset( $p_issue['projection'] ) ? mci_get_projection_id( $p_issue['projection'] ) : config_get('default_bug_resolution');\n\t$t_eta_id = isset( $p_issue['eta'] ) ? mci_get_eta_id( $p_issue['eta'] ) : config_get('default_bug_eta');\n\t$t_view_state_id = isset( $p_issue['view_state'] ) ?  mci_get_view_state_id( $p_issue['view_state'] ) : config_get( 'default_bug_view_status' );\n\t$t_reporter_id = isset( $p_issue['reporter'] ) ? mci_get_user_id( $p_issue['reporter'] )  : 0;\n\t$t_summary = $p_issue['summary'];\n\t$t_description = $p_issue['description'];\n\t$t_notes = isset( $p_issue['notes'] ) ? $p_issue['notes'] : array();\n\n\tif( $t_reporter_id == 0 ) {\n\t\t$t_reporter_id = $t_user_id;\n\t} else {\n\t\tif( $t_reporter_id != $t_user_id ) {\n\n\t\t\t# Make sure that active user has access level required to specify a different reporter.\n\t\t\t$t_specify_reporter_access_level = config_get( 'mc_specify_reporter_on_add_access_level_threshold' );\n\t\t\tif( !access_has_project_level( $t_specify_reporter_access_level, $t_project_id, $t_user_id ) ) {\n\t\t\t\treturn mci_soap_fault_access_denied( $t_user_id, \"Active user does not have access level required to specify a different issue reporter\" );\n\t\t\t}\n\t\t}\n\t}\n\n\tif(( $t_project_id == 0 ) || !project_exists( $t_project_id ) ) {\n\t\tif( $t_project_id == 0 ) {\n\t\t\treturn new soap_fault( 'Client', '', \"Project '\" . $t_project['name'] . \"' does not exist.\" );\n\t\t} else {\n\t\t\treturn new soap_fault( 'Client', '', \"Project with id '\" . $t_project_id . \"' does not exist.\" );\n\t\t}\n\t}\n\n\tif( !access_has_project_level( config_get( 'report_bug_threshold' ), $t_project_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( \"User '$t_user_id' does not have access right to report issues\" );\n\t}\n\n\t#if ( !access_has_project_level( config_get( 'report_bug_threshold' ), $t_project_id ) ||\n\t#\t!access_has_project_level( config_get( 'report_bug_threshold' ), $t_project_id, $v_reporter ) ) {\n\t#\treturn new soap_fault( 'Client', '', \"User does not have access right to report issues.\" );\n\t#}\n\n\tif(( $t_handler_id != 0 ) && !user_exists( $t_handler_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"User '$t_handler_id' does not exist.\" );\n\t}\n\n\t$t_category = isset ( $p_issue['category'] ) ? $p_issue['category'] : null;\n\t\n\t$t_category_id = translate_category_name_to_id( $t_category, $t_project_id );\n\tif ( $t_category_id == 0 && !config_get( 'allow_no_category' ) ) {\n\t\tif ( !isset( $p_issue['category'] ) || is_blank( $p_issue['category'] ) ) {\n\t\t\treturn new soap_fault( 'Client', '', \"Category field must be supplied.\" );\n\t\t} else {\n\t\t\treturn new soap_fault( 'Client', '', \"Category '\" . $p_issue['category'] . \"' not found for project '$t_project_id'.\" );\n\t\t}\n\t}\n\n\tif ( isset( $p_issue['version'] ) && !is_blank( $p_issue['version'] ) && !version_get_id( $p_issue['version'], $t_project_id ) ) {\n\t\t$t_version = $p_issue['version'];\n\n\t\t$t_error_when_version_not_found = config_get( 'mc_error_when_version_not_found' );\n\t\tif( $t_error_when_version_not_found == ON ) {\n\t\t\t$t_project_name = project_get_name( $t_project_id );\n\t\t\treturn new soap_fault( 'Client', '', \"Version '$t_version' does not exist in project '$t_project_name'.\" );\n\t\t} else {\n\t\t\t$t_version_when_not_found = config_get( 'mc_version_when_not_found' );\n\t\t\t$t_version = $t_version_when_not_found;\n\t\t}\n\t}\n\n\tif ( is_blank( $t_summary ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Mandatory field 'summary' is missing.\" );\n\t}\n\n\tif ( is_blank( $t_description ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Mandatory field 'description' is missing.\" );\n\t}\n\n\t$t_bug_data = new BugData;\n\t$t_bug_data->profile_id = 0;\n\t$t_bug_data->project_id = $t_project_id;\n\t$t_bug_data->reporter_id = $t_reporter_id;\n\t$t_bug_data->handler_id = $t_handler_id;\n\t$t_bug_data->priority = $t_priority_id;\n\t$t_bug_data->severity = $t_severity_id;\n\t$t_bug_data->reproducibility = $t_reproducibility_id;\n\t$t_bug_data->status = $t_status_id;\n\t$t_bug_data->resolution = $t_resolution_id;\n\t$t_bug_data->projection = $t_projection_id;\n\t$t_bug_data->category_id = $t_category_id;\n\t$t_bug_data->date_submitted = isset( $p_issue['date_submitted'] ) ? $p_issue['date_submitted'] : '';\n\t$t_bug_data->last_updated = isset( $p_issue['last_updated'] ) ? $p_issue['last_updated'] : '';\n\t$t_bug_data->eta = $t_eta_id;\n\t$t_bug_data->profile_id = isset ( $p_issue['profile_id'] ) ? $p_issue['profile_id'] : 0;\n\t$t_bug_data->os = isset( $p_issue['os'] ) ? $p_issue['os'] : '';\n\t$t_bug_data->os_build = isset( $p_issue['os_build'] ) ? $p_issue['os_build'] : '';\n\t$t_bug_data->platform = isset( $p_issue['platform'] ) ? $p_issue['platform'] : '';\n\t$t_bug_data->version = isset( $p_issue['version'] ) ? $p_issue['version'] : '';\n\t$t_bug_data->fixed_in_version = isset( $p_issue['fixed_in_version'] ) ? $p_issue['fixed_in_version'] : '';\n\t$t_bug_data->build = isset( $p_issue['build'] ) ? $p_issue['build'] : '';\n\t$t_bug_data->view_state = $t_view_state_id;\n\t$t_bug_data->summary = $t_summary;\n\t$t_bug_data->sponsorship_total = isset( $p_issue['sponsorship_total'] ) ? $p_issue['sponsorship_total'] : 0;\n\tif (  isset ( $p_issue['sticky']) && \n\t     access_has_project_level( config_get( 'set_bug_sticky_threshold', null, null, $t_project_id ), $t_project_id ) ) {\n\t    $t_bug_data->sticky = $p_issue['sticky'];\n\t}\n\t\n\tif ( isset( $p_issue['due_date'] ) && access_has_global_level( config_get( 'due_date_update_threshold' ) ) ) {\n\t\t$t_bug_data->due_date = mci_iso8601_to_timestamp( $p_issue['due_date'] );\n\t} else {\n\t\t$t_bug_data->due_date = date_get_null();\n\t}\n\n\tif( access_has_project_level( config_get( 'roadmap_update_threshold' ), $t_bug_data->project_id, $t_user_id ) ) {\n\t\t$t_bug_data->target_version = isset( $p_issue['target_version'] ) ? $p_issue['target_version'] : '';\n\t}\n\t\n\t# omitted:\n\t# var $bug_text_id\n\t# $t_bug_data->profile_id;\n\t# extended info\n\t$t_bug_data->description = $t_description;\n\t$t_bug_data->steps_to_reproduce = isset( $p_issue['steps_to_reproduce'] ) ? $p_issue['steps_to_reproduce'] : '';\n\t$t_bug_data->additional_information = isset( $p_issue['additional_information'] ) ? $p_issue['additional_information'] : '';\n\n\t# submit the issue\n\t$t_issue_id = $t_bug_data->create();\n\n\tmci_issue_set_custom_fields( $t_issue_id, $p_issue['custom_fields'], false );\n\tif ( isset ( $p_issue['monitors'] ) )\n\t    mci_issue_set_monitors( $t_issue_id , $t_user_id, $p_issue['monitors'] );\n\n\tif( isset( $t_notes ) && is_array( $t_notes ) ) {\n\t\tforeach( $t_notes as $t_note ) {\n\t\t\tif( isset( $t_note['view_state'] ) ) {\n\t\t\t\t$t_view_state = $t_note['view_state'];\n\t\t\t} else {\n\t\t\t\t$t_view_state = config_get( 'default_bugnote_view_status' );\n\t\t\t}\n\t\t\t\n\t\t\t$note_type = isset ( $t_note['note_type'] ) ? (int) $t_note['note_type'] : BUGNOTE;\n\t\t\t$note_attr = isset ( $t_note['note_type'] ) ? $t_note['note_attr'] : '';\n\n\t\t\t$t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n\t\t\tbugnote_add( $t_issue_id, $t_note['text'], mci_get_time_tracking_from_note( $t_issue_id, $t_note ), $t_view_state_id == VS_PRIVATE, $note_type, $note_attr, $t_user_id, FALSE );\n\t\t}\n\t}\n\t\n\tif ( isset ( $p_issue['tags']) && is_array ( $p_issue['tags']) ) {\n\t\tmci_tag_set_for_issue( $t_issue_id, $p_issue['tags'], $t_user_id );\n\t}\t\n\n\temail_new_bug( $t_issue_id );\n\n\treturn $t_issue_id;\n}\n\n/**\n * Update Issue in database\n *\n * Created By KGB\n * @param string $p_username The name of the user trying to add the issue.\n * @param string $p_password The password of the user.\n * @param Array $p_issue A IssueData structure containing information about the new issue.\n * @return integer The id of the created issue.\n */\nfunction mc_issue_update( $p_username, $p_password, $p_issue_id, $p_issue ) {\n\tglobal $g_project_override;\n\t\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' does not exist.\" );\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$g_project_override = $t_project_id; // ensure that helper_get_current_project() calls resolve to this project id\n\n\t$t_project_id = mci_get_project_id( $p_issue['project'] );\n\t$t_reporter_id = isset( $p_issue['reporter'] ) ? mci_get_user_id( $p_issue['reporter'] )  : $t_user_id ;\n\t$t_handler_id = isset( $p_issue['handler'] ) ? mci_get_user_id( $p_issue['handler'] ) : 0;\n\t$t_project = $p_issue['project'];\n\t$t_summary = isset( $p_issue['summary'] ) ? $p_issue['summary'] : '';\n\t$t_description = isset( $p_issue['description'] ) ? $p_issue['description'] : '';\n\t\n\t\n\tif(( $t_project_id == 0 ) || !project_exists( $t_project_id ) ) {\n\t\tif( $t_project_id == 0 ) {\n\t\t\treturn new soap_fault( 'Client', '', \"Project '\" . $t_project['name'] . \"' does not exist.\" );\n\t\t}\n\t\treturn new soap_fault( 'Client', '', \"Project '$t_project_id' does not exist.\" );\n\t}\n\n\tif( !access_has_bug_level( config_get( 'update_bug_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id,  \"Not enough rights to update issues\" );\n\t}\n\n\tif(( $t_handler_id != 0 ) && !user_exists( $t_handler_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"User '$t_handler_id' does not exist.\" );\n\t}\n\n\t$t_category = isset ( $p_issue['category'] ) ? $p_issue['category'] : null;\n\t\n\t$t_category_id = translate_category_name_to_id( $t_category, $t_project_id );\n\tif ( $t_category_id == 0 && !config_get( 'allow_no_category' ) ) {\n\t\tif ( isset( $p_issue['category'] ) && !is_blank( $p_issue['category'] ) ) {\n\t\t\treturn new soap_fault( 'Client', '', \"Category field must be supplied.\" );\n\t\t} else {\n\t\t\treturn new soap_fault( 'Client', '', \"Category '\" . $p_issue['category'] . \"' not found for project '$t_project_name'.\" );\n\t\t}\n\t}\n\n\tif ( isset( $p_issue['version'] ) && !is_blank( $p_issue['version'] ) && !version_get_id( $p_issue['version'], $t_project_id ) ) {\n\t\t$t_error_when_version_not_found = config_get( 'mc_error_when_version_not_found' );\n\t\tif( $t_error_when_version_not_found == ON ) {\n\t\t\t$t_project_name = project_get_name( $t_project_id );\n\t\t\treturn new soap_fault( 'Client', '', \"Version '\" . $p_issue['version'] . \"' does not exist in project '$t_project_name'.\" );\n\t\t} else {\n\t\t\t$t_version_when_not_found = config_get( 'mc_version_when_not_found' );\n\t\t\t$p_issue['version'] = $t_version_when_not_found;\n\t\t}\n\t}\n\n\tif ( is_blank( $t_summary ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Mandatory field 'summary' is missing.\" );\n\t}\n\n\tif ( is_blank( $t_description ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Mandatory field 'description' is missing.\" );\n\t}\n\n\t// fields which we expect to always be set\n\t$t_bug_data = bug_get( $p_issue_id, true );\n\t$t_bug_data->project_id = $t_project_id;\n\t$t_bug_data->reporter_id = $t_reporter_id;\n\t$t_bug_data->handler_id = $t_handler_id;\n\t$t_bug_data->category_id = $t_category_id;\n\t$t_bug_data->summary = $t_summary;\n\t$t_bug_data->description = $t_description;\n\n\t// fields which might not be set\n\tif ( isset ( $p_issue['steps_to_reproduce'] ) )\n\t\t$t_bug_data->steps_to_reproduce = $p_issue['steps_to_reproduce'];\n\tif ( isset ( $p_issue['additional_information'] ) )\n\t\t$t_bug_data->additional_information = $p_issue['additional_information'];\n\tif ( isset( $p_issue['priority'] ) )\n\t\t$t_bug_data->priority = mci_get_priority_id( $p_issue['priority'] );\n\tif ( isset( $p_issue['severity'] ) )\n\t\t$t_bug_data->severity = mci_get_severity_id( $p_issue['severity'] );\n\tif ( isset( $p_issue['status'] ) )\n\t\t$t_bug_data->status = mci_get_status_id ( $p_issue['status'] );\n\tif ( isset ( $p_issue['reproducibility'] ) )\n\t\t$t_bug_data->reproducibility = mci_get_reproducibility_id( $p_issue['reproducibility'] );\n\tif ( isset ( $p_issue['resolution'] ) )\n\t\t$t_bug_data->resolution = mci_get_resolution_id( $p_issue['resolution'] );\n\tif ( isset ( $p_issue['projection'] ) )\n\t\t$t_bug_data->projection = mci_get_projection_id( $p_issue['projection'] );\n\tif ( isset ( $p_issue['eta'] ) )\n\t\t$t_bug_data->eta = mci_get_eta_id( $p_issue['eta'] );\n\tif ( isset ( $p_issue['view_state'] ) )\n\t\t$t_bug_data->view_state = mci_get_view_state_id( $p_issue['view_state'] );\n\tif ( isset ( $p_issue['date_submitted'] ) )\n\t\t$t_bug_data->date_submitted = $p_issue['date_submitted'];\n\tif ( isset ( $p_issue['date_updated'] ) )\n\t\t$t_bug_data->last_updated = $p_issue['last_updated'];\n\tif ( isset ( $p_issue['profile_id'] ) )\n\t\t$t_bug_data->profile_id = $p_issue['profile_id'];\n\tif ( isset ( $p_issue['os'] ) )\n\t\t$t_bug_data->os = $p_issue['os'];\n\tif ( isset ( $p_issue['os_build'] ) )\n\t\t$t_bug_data->os_build = $p_issue['os_build'];\n\tif ( isset ( $p_issue['build'] ) )\n\t\t$t_bug_data->build = $p_issue['build'];\n\tif ( isset ( $p_issue['platform'] ) )\n\t\t$t_bug_data->platform = $p_issue['platform'];\n\tif ( isset ( $p_issue['version'] ) )\n\t\t$t_bug_data->version = $p_issue['version'];\n\tif ( isset ( $p_issue['fixed_in_version'] ) )\n\t\t$t_bug_data->fixed_in_version = $p_issue['fixed_in_version'];\n\tif (  isset ( $p_issue['sticky']) && access_has_bug_level( config_get( 'set_bug_sticky_threshold' ), $t_bug_data->id ) ) {\n\t    $t_bug_data->sticky = $p_issue['sticky'];\n\t}\n\n\tif ( isset( $p_issue['due_date'] ) && access_has_global_level( config_get( 'due_date_update_threshold' ) ) ) {\n\t\t$t_bug_data->due_date = mci_iso8601_to_timestamp( $p_issue['due_date'] );\n\t} else {\n\t\t$t_bug_data->due_date = date_get_null();\n\t}\n\n\tif( access_has_project_level( config_get( 'roadmap_update_threshold' ), $t_bug_data->project_id, $t_user_id ) ) {\n\t\t$t_bug_data->target_version = isset( $p_issue['target_version'] ) ? $p_issue['target_version'] : '';\n\t}\n\n\tmci_issue_set_custom_fields( $p_issue_id, $p_issue['custom_fields'], true );\n\tif ( isset ( $p_issue['monitors'] ) )\n\t    mci_issue_set_monitors( $p_issue_id , $t_user_id, $p_issue['monitors'] );\n\n\tif ( isset( $p_issue['notes'] ) && is_array( $p_issue['notes'] ) ) {\n\n\t\t$t_bugnotes = bugnote_get_all_visible_bugnotes( $p_issue_id, 'DESC', 0 );\n\t\t$t_bugnotes_by_id = array();\n\t\tforeach ( $t_bugnotes as $t_bugnote ) {\n\t\t\t$t_bugnotes_by_id[$t_bugnote->id] = $t_bugnote;\n\t\t}\n\n\t\tforeach ( $p_issue['notes'] as $t_note ) {\n\t\t\tif ( isset( $t_note['view_state'] ) ) {\n\t\t\t\t$t_view_state = $t_note['view_state'];\n\t\t\t} else {\n\t\t\t\t$t_view_state = config_get( 'default_bugnote_view_status' );\n\t\t\t}\n\n\t\t\tif ( isset( $t_note['id'] ) && ( (int)$t_note['id'] > 0 ) ) {\n\t\t\t\t$t_bugnote_id = (integer)$t_note['id'];\n\n\t\t\t\t$t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n\n\t\t\t\tif ( array_key_exists( $t_bugnote_id , $t_bugnotes_by_id) ) {\n\n\t\t\t\t\t$t_bugnote_changed = false;\n\n\t\t\t\t\tif ( $t_bugnote->note !== $t_note['text']) {\n\t\t\t\t\t\tbugnote_set_text( $t_bugnote_id, $t_note['text'] );\n\t\t\t\t\t\t$t_bugnote_changed = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $t_bugnote->view_state !== $t_view_state_id ) {\n\t\t\t\t\t\tbugnote_set_view_state( $t_bugnote_id, $t_view_state_id == VS_PRIVATE );\n\t\t\t\t\t\t$t_bugnote_changed = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isset( $t_note['time_tracking']) && $t_note['time_tracking'] !== $t_bugnote->time_tracking ) {\n\t\t\t\t\t\tbugnote_set_time_tracking( $t_bugnote_id, mci_get_time_tracking_from_note( $p_issue_id, $t_note ) );\n\t\t\t\t\t\t$t_bugnote_changed = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( $t_bugnote_changed ) {\n\t\t\t\t\t\tbugnote_date_update( $t_bugnote_id );\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n\t\t\t\t\n\t\t\t\t$note_type = isset ( $t_note['note_type'] ) ? (int) $t_note['note_type'] : BUGNOTE;\n\t\t\t    $note_attr = isset ( $t_note['note_type'] ) ? $t_note['note_attr'] : '';\n\t\t\t\t\n\t\t\t\tbugnote_add( $p_issue_id, $t_note['text'], mci_get_time_tracking_from_note( $p_issue_id, $t_note ), $t_view_state_id == VS_PRIVATE, $note_type, $note_attr, $t_user_id, FALSE );\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif ( isset ( $p_issue['tags']) && is_array ( $p_issue['tags']) ) {\n\t\tmci_tag_set_for_issue( $p_issue_id, $p_issue['tags'] , $t_user_id );\n\t}\n\t\n\t# submit the issue\n\treturn $t_is_success = $t_bug_data->update( /* update_extended */ true, /* bypass_email */ false);\n}\n\nfunction mc_issue_set_tags ( $p_username, $p_password, $p_issue_id, $p_tags ) {\n\t\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\t\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' does not exist.\" );\n\t}\n\t\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\t\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\tmci_tag_set_for_issue( $p_issue_id,  $p_tags, $t_user_id );\n\t\n\treturn true;\n}\n\n/**\n * Delete the specified issue.\n *\n * @param string $p_username  The name of the user trying to delete the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue to delete.\n * @return boolean  True if the issue has been deleted successfully, false otherwise.\n */\nfunction mc_issue_delete( $p_username, $p_password, $p_issue_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' does not exist.\");\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\tif ( !access_has_bug_level( config_get( 'delete_bug_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t    return mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\treturn bug_delete( $p_issue_id );\n}\n\n/**\n * Add a note to an existing issue.\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue to add the note to.\n * @param IssueNoteData $p_note  The note to add.\n * @return integer The id of the added note.\n */\nfunction mc_issue_note_add( $p_username, $p_password, $p_issue_id, $p_note ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( (integer) $p_issue_id < 1 ) {\n\t\treturn new soap_fault( 'Client', '', \"Invalid issue id '$p_issue_id'\" );\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' does not exist.\" );\n\t}\n\n\tif ( !isset( $p_note['text'] ) || is_blank( $p_note['text'] ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue note text must not be blank.\" );\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\tif( !access_has_bug_level( config_get( 'add_bugnote_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id, \"You do not have access rights to add notes to this issue\" );\n\t}\n\n\tif( bug_is_readonly( $p_issue_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id, \"Issue '$p_issue_id' is readonly\" );\n\t}\n\n\tif( isset( $p_note['view_state'] ) ) {\n\t\t$t_view_state = $p_note['view_state'];\n\t} else {\n\t\t$t_view_state = array(\n\t\t\t'id' => config_get( 'default_bug_view_status' ),\n\t\t);\n\t}\n\t\n\t$t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n\t\n\t$note_type = isset ( $p_note['note_type'] ) ? (int) $p_note['note_type'] : BUGNOTE;\n\t$note_attr = isset ( $p_note['note_type'] ) ? $p_note['note_attr'] : '';\n\n\treturn bugnote_add( $p_issue_id, $p_note['text'], mci_get_time_tracking_from_note( $p_issue_id, $p_note ), $t_view_state_id == VS_PRIVATE, $note_type, $note_attr, $t_user_id );\n}\n\n/**\n * Delete a note given its id.\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_note_id  The id of the note to be deleted.\n * @return true: success, false: failure\n */\nfunction mc_issue_note_delete( $p_username, $p_password, $p_issue_note_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( (integer) $p_issue_note_id < 1 ) {\n\t\treturn new soap_fault( 'Client', '', \"Invalid issue note id '$p_issue_note_id'.\");\n\t}\n\n\tif( !bugnote_exists( $p_issue_note_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue note '$p_issue_note_id' does not exist.\");\n\t}\n\n\t$t_issue_id = bugnote_get_field( $p_issue_note_id, 'bug_id' );\n\t$t_project_id = bug_get_field( $t_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\t\n\t$t_reporter_id = bugnote_get_field( $p_issue_note_id, 'reporter_id' );\t\n\t\n\t// mirrors check from bugnote_delete.php\n\tif ( ( $t_user_id != $t_reporter_id ) || ( OFF == config_get( 'bugnote_allow_user_edit_delete' ) ) ) {\n\t    if ( !access_has_bugnote_level( config_get( 'delete_bugnote_threshold' ), $p_issue_note_id ) ) {\n\t        return mci_soap_fault_access_denied( $t_user_id );\n\t    }\n\t}\n\n\treturn bugnote_delete( $p_issue_note_id );\n}\n\n/**\n * Update a note\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * param string $p_password  The password of the user.\n * @param IssueNoteData $p_note  The note to update.\n * @return true on success, false on failure\n */\nfunction mc_issue_note_update( $p_username, $p_password, $p_note ) {\n    $t_user_id = mci_check_login( $p_username, $p_password );\n    \n    if( $t_user_id === false ) {\n        return mci_soap_fault_login_failed();\n    }\n\n    if ( !isset( $p_note['id'] ) || is_blank( $p_note['id'] ) ) {\n        return new soap_fault( 'Client', '', \"Issue id must not be blank.\" );\n    }\n    \n    if ( !isset( $p_note['text'] ) || is_blank( $p_note['text'] ) ) {\n        return new soap_fault( 'Client', '', \"Issue note text must not be blank.\" );\n    }\n    \n    $t_issue_note_id = $p_note['id'];\n\n    if( !bugnote_exists( $t_issue_note_id ) ) {\n        return new soap_fault( 'Server', '', \"Issue note '$t_issue_note_id' does not exist.\" );\n    }\n    \n\t$t_issue_id = bugnote_get_field( $t_issue_note_id, 'bug_id' );\n\t\n\t$t_project_id = bug_get_field( $t_issue_id, 'project_id' );\n\n    if( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n        return mci_soap_fault_access_denied( $t_user_id );\n    }\n\n    if( !access_has_bug_level( config_get( 'add_bugnote_threshold' ), $t_issue_id, $t_user_id ) ) {\n        return mci_soap_fault_access_denied( $t_user_id, \"You do not have access rights to add notes to this issue\" );\n    }\n\n    if( bug_is_readonly( $t_issue_id ) ) {\n        return mci_soap_fault_access_denied( $t_user_id, \"Issue ' . $t_issue_id . ' is readonly\" );\n    }\n\n    if( isset( $p_note['view_state'] )) {\n        $t_view_state = $p_note['view_state'];\n        $t_view_state_id = mci_get_enum_id_from_objectref( 'view_state', $t_view_state );\n        bugnote_set_view_state( $t_issue_note_id, $t_view_state_id );\n    }\n\n    bugnote_set_text( $t_issue_note_id, $p_note['text'] );\n\n    return bugnote_date_update( $t_issue_note_id );\n}\n\n/**\n * Submit a new relationship.\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the issue of the source issue.\n * @param RelationshipData $p_relationship  The relationship to add.\n * @return integer The id of the added relationship.\n */\nfunction mc_issue_relationship_add( $p_username, $p_password, $p_issue_id, $p_relationship ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\t$t_dest_issue_id = $p_relationship['target_id'];\n\t$t_rel_type = $p_relationship['type'];\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t# user has access to update the bug...\n\tif( !access_has_bug_level( config_get( 'update_bug_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id, \"Active user does not have access level required to add a relationship to this issue\" );\n\t}\n\n\t# source and destination bugs are the same bug...\n\tif( $p_issue_id == $t_dest_issue_id ) {\n\t\treturn new soap_fault( 'Client', '', \"An issue can't be related to itself.\" );\n\t}\n\n\t# the related bug exists...\n\tif( !bug_exists( $t_dest_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$t_dest_issue_id' not found.\" );\n\t}\n\n\t# bug is not read-only...\n\tif( bug_is_readonly( $p_issue_id ) ) {\n\t\treturn new mci_soap_fault_access_denied( $t_user_id, \"Issue '$p_issue_id' is readonly\" );\n\t}\n\n\t# user can access to the related bug at least as viewer...\n\tif( !access_has_bug_level( VIEWER, $t_dest_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id, \"The issue '$t_dest_issue_id' requires higher access level\" );\n\t}\n\n\t$t_old_id_relationship = relationship_same_type_exists( $p_issue_id, $t_dest_issue_id, $t_rel_type['id'] );\n\n\tif( $t_old_id_relationship == 0 ) {\n\t\trelationship_add( $p_issue_id, $t_dest_issue_id, $t_rel_type['id'] );\n\n\t\t// The above function call into MantisBT does not seem to return a valid BugRelationshipData object.\n\t\t// So we call db_insert_id in order to find the id of the created relationship.\n\t\t$t_relationship_id = db_insert_id( db_get_table( 'mantis_bug_relationship_table' ) );\n\n\t\t# Add log line to the history (both bugs)\n\t\thistory_log_event_special( $p_issue_id, BUG_ADD_RELATIONSHIP, $t_rel_type['id'], $t_dest_issue_id );\n\t\thistory_log_event_special( $t_dest_issue_id, BUG_ADD_RELATIONSHIP, relationship_get_complementary_type( $t_rel_type['id'] ), $p_issue_id );\n\n\t\t# update bug last updated for both bugs\n\t\tbug_update_date( $p_issue_id );\n\t\tbug_update_date( $t_dest_issue_id );\n\n\t\t# send email notification to the users addressed by both the bugs\n\t\temail_relationship_added( $p_issue_id, $t_dest_issue_id, $t_rel_type['id'] );\n\t\temail_relationship_added( $t_dest_issue_id, $p_issue_id, relationship_get_complementary_type( $t_rel_type['id'] ) );\n\n\t\treturn $t_relationship_id;\n\t} else {\n\t\treturn new soap_fault( 'Client', '', \"Relationship already exists.\" );\n\t}\n}\n\n/**\n * Delete the relationship with the specified target id.\n *\n * @param string $p_username  The name of the user trying to add a note to an issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id  The id of the source issue for the relationship\n * @param integer $p_relationship_id  The id of relationship to delete.\n * @return true: success, false: failure\n */\nfunction mc_issue_relationship_delete( $p_username, $p_password, $p_issue_id, $p_relationship_id ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\t# user has access to update the bug...\n\tif( !access_has_bug_level( config_get( 'update_bug_threshold' ), $p_issue_id, $t_user_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id , \"Active user does not have access level required to remove a relationship from this issue.\" );\n\t}\n\n\t# bug is not read-only...\n\tif( bug_is_readonly( $p_issue_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id , \"Issue '$p_issue_id' is readonly.\" );\n\t}\n\n\t# retrieve the destination bug of the relationship\n\t$t_dest_issue_id = relationship_get_linked_bug_id( $p_relationship_id, $p_issue_id );\n\n\t# user can access to the related bug at least as viewer, if it's exist...\n\tif( bug_exists( $t_dest_issue_id ) ) {\n\t\tif( !access_has_bug_level( VIEWER, $t_dest_issue_id, $t_user_id ) ) {\n\t\t\treturn mci_soap_fault_access_denied( $t_user_id , \"The issue '$t_dest_issue_id' requires higher access level.\" );\n\t\t}\n\t}\n\n\t$t_bug_relationship_data = relationship_get( $p_relationship_id );\n\t$t_rel_type = $t_bug_relationship_data->type;\n\n\t# delete relationship from the DB\n\trelationship_delete( $p_relationship_id );\n\n\t# update bug last updated\n\tbug_update_date( $p_issue_id );\n\tbug_update_date ( $t_dest_issue_id );\n\n\t# set the rel_type for both bug and dest_bug based on $t_rel_type and on who is the dest bug\n\tif( $p_issue_id == $t_bug_relationship_data->src_bug_id ) {\n\t\t$t_bug_rel_type = $t_rel_type;\n\t\t$t_dest_bug_rel_type = relationship_get_complementary_type( $t_rel_type );\n\t} else {\n\t\t$t_bug_rel_type = relationship_get_complementary_type( $t_rel_type );\n\t\t$t_dest_bug_rel_type = $t_rel_type;\n\t}\n\n\t# send email and update the history for the src issue\n\thistory_log_event_special( $p_issue_id, BUG_DEL_RELATIONSHIP, $t_bug_rel_type, $t_dest_issue_id );\n\temail_relationship_deleted( $p_issue_id, $t_dest_issue_id, $t_bug_rel_type );\n\n\tif( bug_exists( $t_dest_issue_id ) ) {\n\n\t\t# send email and update the history for the dest issue\n\t\thistory_log_event_special( $t_dest_issue_id, BUG_DEL_RELATIONSHIP, $t_dest_bug_rel_type, $p_issue_id );\n\t\temail_relationship_deleted( $t_dest_issue_id, $p_issue_id, $t_dest_bug_rel_type );\n\t}\n\n\treturn true;\n}\n\n/**\n * Log a checkin event on the issue\n *\n * @param string $p_username  The name of the user trying to access the issue.\n * @param string $p_password  The password of the user.\n * @param integer $p_issue_id The id of the issue to log a checkin.\n * @param string $p_comment   The comment to add\n * @param boolean $p_fixed    True if the issue is to be set to fixed\n * @return boolean  true success, false otherwise.\n */\nfunction mc_issue_checkin( $p_username, $p_password, $p_issue_id, $p_comment, $p_fixed ) {\n\t$t_user_id = mci_check_login( $p_username, $p_password );\n\tif( $t_user_id === false ) {\n\t\treturn mci_soap_fault_login_failed();\n\t}\n\n\tif( !bug_exists( $p_issue_id ) ) {\n\t\treturn new soap_fault( 'Client', '', \"Issue '$p_issue_id' not found.\" );\n\t}\n\n\t$t_project_id = bug_get_field( $p_issue_id, 'project_id' );\n\tif( !mci_has_readwrite_access( $t_user_id, $t_project_id ) ) {\n\t\treturn mci_soap_fault_access_denied( $t_user_id );\n\t}\n\n\thelper_call_custom_function( 'checkin', array( $p_issue_id, $p_comment, '', '', $p_fixed ) );\n\n\treturn true;\n}\n\n/**\n * Returns the date in iso8601 format, with proper timezone offset applied\n * \n * @param string $p_date the date in iso8601 format\n * @return int the timestamp\n */\nfunction mci_iso8601_to_timestamp( $p_date ) {\n\t\n\t// retrieve the offset, seems to be lost by nusoap\n\t$t_utc_date = new DateTime( $p_date, new DateTimeZone( 'UTC' ) );\n\t$t_timezone = new DateTimeZone( date_default_timezone_get() );\n\t$t_offset = $t_timezone->getOffset( $t_utc_date ); \n\t\n\t$t_raw_timestamp = iso8601_to_timestamp( $p_date );\n\t\n\treturn $t_raw_timestamp - $t_offset;\n\t\n}\n\n\n/**\n * Returns an array for SOAP encoding from a BugData object\n * \n * @param BugData $p_issue_data\n * @param int $p_user_id\n * @param string $p_lang\n * @return array The issue as an array\n */\nfunction mci_issue_data_as_array( $p_issue_data, $p_user_id, $p_lang ) {\n\t\n\t\t$t_id = $p_issue_data->id;\n\n\t\t$t_issue = array();\n\t\t$t_issue['id'] = $t_id;\n\t\t$t_issue['view_state'] = mci_enum_get_array_by_id( $p_issue_data->view_state, 'view_state', $p_lang );\n\t\t$t_issue['last_updated'] = timestamp_to_iso8601( $p_issue_data->last_updated, false );\n\n\t\t$t_issue['project'] = mci_project_as_array_by_id( $p_issue_data->project_id );\n\t\t$t_issue['category'] = mci_get_category( $p_issue_data->category_id );\n\t\t$t_issue['priority'] = mci_enum_get_array_by_id( $p_issue_data->priority, 'priority', $p_lang );\n\t\t$t_issue['severity'] = mci_enum_get_array_by_id( $p_issue_data->severity, 'severity', $p_lang );\n\t\t$t_issue['status'] = mci_enum_get_array_by_id( $p_issue_data->status, 'status', $p_lang );\n\n\t\t$t_issue['reporter'] = mci_account_get_array_by_id( $p_issue_data->reporter_id );\n\t\t$t_issue['summary'] = $p_issue_data->summary;\n\t\t$t_issue['version'] = mci_null_if_empty( $p_issue_data->version );\n\t\t$t_issue['build'] = mci_null_if_empty( $p_issue_data->build );\n\t\t$t_issue['profile_id'] = mci_null_if_empty( $p_issue_data->profile_id );\n\t\t$t_issue['platform'] = mci_null_if_empty( $p_issue_data->platform );\n\t\t$t_issue['os'] = mci_null_if_empty( $p_issue_data->os );\n\t\t$t_issue['os_build'] = mci_null_if_empty( $p_issue_data->os_build );\n\t\t$t_issue['reproducibility'] = mci_enum_get_array_by_id( $p_issue_data->reproducibility, 'reproducibility', $p_lang );\n\t\t$t_issue['date_submitted'] = timestamp_to_iso8601( $p_issue_data->date_submitted, false );\n\t\t$t_issue['sticky'] = $p_issue_data->sticky;\n\t\t\n\t\t$t_issue['sponsorship_total'] = $p_issue_data->sponsorship_total;\n\n\t\tif( !empty( $p_issue_data->handler_id ) ) {\n\t\t\t$t_issue['handler'] = mci_account_get_array_by_id( $p_issue_data->handler_id );\n\t\t}\n\t\t$t_issue['projection'] = mci_enum_get_array_by_id( $p_issue_data->projection, 'projection', $p_lang );\n\t\t$t_issue['eta'] = mci_enum_get_array_by_id( $p_issue_data->eta, 'eta', $p_lang );\n\n\t\t$t_issue['resolution'] = mci_enum_get_array_by_id( $p_issue_data->resolution, 'resolution', $p_lang );\n\t\t$t_issue['fixed_in_version'] = mci_null_if_empty( $p_issue_data->fixed_in_version );\n\t\t$t_issue['target_version'] = mci_null_if_empty( $p_issue_data->target_version );\n\n\t\t$t_issue['description'] = bug_get_text_field( $t_id, 'description' );\n\n\t\t$t_steps_to_reproduce = bug_get_text_field( $t_id, 'steps_to_reproduce' );\n\t\t$t_issue['steps_to_reproduce'] = mci_null_if_empty( $t_steps_to_reproduce );\n\n\t\t$t_additional_information = bug_get_text_field( $t_id, 'additional_information' );\n\t\t$t_issue['additional_information'] = mci_null_if_empty( $t_additional_information );\n\n\t\t$t_issue['attachments'] = mci_issue_get_attachments( $p_issue_data->id );\n\t\t$t_issue['relationships'] = mci_issue_get_relationships( $p_issue_data->id, $p_user_id );\n\t\t$t_issue['notes'] = mci_issue_get_notes( $p_issue_data->id );\n\t\t$t_issue['custom_fields'] = mci_issue_get_custom_fields( $p_issue_data->id );\n\t\t$t_issue['tags'] = mci_issue_get_tags_for_bug_id( $p_issue_data->id, $p_user_id );\n\t\t\n\t\treturn $t_issue;\n}\n\nfunction mci_issue_get_tags_for_bug_id( $p_bug_id, $p_user_id ) {\n\t\n\tif ( !access_has_global_level( config_get( 'tag_view_threshold' ), $p_user_id ) )\n\t\treturn array();\n\t\n\t$t_tag_rows = tag_bug_get_attached( $p_bug_id );\n\t$t_result = array();\n\t\n\tforeach ( $t_tag_rows as $t_tag_row ) {\n\t\t$t_result[] = array (\n\t\t\t'id' => $t_tag_row['id'],\n\t\t\t'name' => $t_tag_row['name']\n\t\t);\n\t}\n\t\n\treturn $t_result;\n}\n"], "filenames": ["api/soap/mc_issue_api.php"], "buggy_code_start_loc": [945], "buggy_code_end_loc": [945], "fixing_code_start_loc": [946], "fixing_code_end_loc": [950], "type": "CWE-264", "message": "The SOAP API in MantisBT before 1.2.9 does not properly enforce the bugnote_allow_user_edit_delete and delete_bug_threshold permissions, which allows remote authenticated users with read and write SOAP API privileges to delete arbitrary bug reports and bug notes.", "other": {"cve": {"id": "CVE-2012-1120", "sourceIdentifier": "secalert@redhat.com", "published": "2012-06-29T19:55:02.953", "lastModified": "2021-01-12T18:05:59.507", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The SOAP API in MantisBT before 1.2.9 does not properly enforce the bugnote_allow_user_edit_delete and delete_bug_threshold permissions, which allows remote authenticated users with read and write SOAP API privileges to delete arbitrary bug reports and bug notes."}, {"lang": "es", "value": "La API SOAP de MantisBT anteriores a 1.2.9 no establece adecuadamente los permisos bugnote_allow_user_edit_delete y delete_bug_threshold permissions, lo que permite a usuarios autenticados remotos con privilegios SOAP API de lectura y escritura borrar reportes y notas de bug."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:S/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 3.6}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-264"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.8", "matchCriteriaId": "79367D94-9665-49D7-94E4-CC9EFC7439BB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.18.0:*:*:*:*:*:*:*", "matchCriteriaId": "AF83F757-4B62-441C-8421-15809E573A83"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.0:*:*:*:*:*:*:*", "matchCriteriaId": "A608AFEC-B265-4143-99DA-BB2AE9D522BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.0:a1:*:*:*:*:*:*", "matchCriteriaId": "A826DA75-7DEE-4E96-9B00-347508BBCFE8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.0:a2:*:*:*:*:*:*", "matchCriteriaId": "06663B16-0609-4FCF-9B42-6BF30D25E67A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "7FCB56AC-4C14-49B1-BEFE-8651BC70476E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.1:*:*:*:*:*:*:*", "matchCriteriaId": "F59BAE6B-C73D-4BE2-AEF9-93F2F4A4373F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.2:*:*:*:*:*:*:*", "matchCriteriaId": "C9DA5C2F-FB7C-4D95-81DE-24D8EADC5C30"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.3:*:*:*:*:*:*:*", "matchCriteriaId": "85A3FBD5-163C-4990-B809-A5C9C81A3C6C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.4:*:*:*:*:*:*:*", "matchCriteriaId": "D3FDF456-9648-4A7C-B15A-2828A32D4962"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:0.19.5:*:*:*:*:*:*:*", "matchCriteriaId": "9EE8BCBE-D864-4311-B73A-DF92162D8DF3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "6B2602F7-2D93-4E1E-9425-4EDD23752029"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:a1:*:*:*:*:*:*", "matchCriteriaId": "482256A6-B213-4226-AF03-9F93164AA337"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:a2:*:*:*:*:*:*", "matchCriteriaId": "1F005474-CEBD-48FC-9C7F-861AFF771081"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:a3:*:*:*:*:*:*", "matchCriteriaId": "BEF461E5-24D2-4540-A2FC-E0D4C3488B8F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "62F6B391-DDE3-4E8E-8582-85EA7287E591"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "80DBD667-1FB9-4354-9150-A190D4D817A2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "F27E40C0-263F-452B-8C91-E621A02EFC28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:rc4:*:*:*:*:*:*", "matchCriteriaId": "CB888B14-EA67-4EDB-A3AF-ACD3F0A6227E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.0:rc5:*:*:*:*:*:*", "matchCriteriaId": "1DB45A02-2522-4E10-BC81-48750ACB42DD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "86DE3BE3-D6C9-4905-9E61-B70776460604"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "F128A2E2-D509-4B50-95C2-1A31C5B3B31F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.3:*:*:*:*:*:*:*", "matchCriteriaId": "140D5F68-1CAB-458C-BC8B-4F726D657FE8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "0D25F4F5-7678-41C1-93CB-305883A08527"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "D1A1316D-314B-4740-A836-D5E6319F4B28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "DBD27CCE-28C4-43CC-8CBD-D7FFB46171AC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.7:*:*:*:*:*:*:*", "matchCriteriaId": "97298C43-B881-4C11-ADB6-17A8E43EB84E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.8:*:*:*:*:*:*:*", "matchCriteriaId": "7257ADD7-C9B7-4F85-AA13-615DD033FD5C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.0.9:*:*:*:*:*:*:*", "matchCriteriaId": "DE6A94C0-48A1-4D42-AC43-7B4E959C4E21"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "02FE950B-5E29-4FAA-9BE5-79F38B4C38F7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.0:a1:*:*:*:*:*:*", "matchCriteriaId": "45FF2B45-AA64-4428-8F6E-65C5171990CB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.0:a2:*:*:*:*:*:*", "matchCriteriaId": "CC868663-1E48-4F9A-B687-5B48D016611B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.0:a3:*:*:*:*:*:*", "matchCriteriaId": "4F04ED02-4D99-45CF-9BEC-AC0F648748EA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.0:a4:*:*:*:*:*:*", "matchCriteriaId": "0AC08731-C4BB-4D84-ADBE-80054149BF33"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "35AAF0B4-31B5-4849-813F-63D9546C2E16"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "FB98EF06-7D6E-4D5F-819D-21B437E91B58"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "66AB409E-5A5B-4455-8B68-22C32152681B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "D6F2BA78-D054-4E49-ABCA-637922898BF7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.2:*:*:*:*:*:*:*", "matchCriteriaId": "4595B1E3-25AB-489E-A847-FDBF2554DD6D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "E6A13A38-E149-42A7-9309-BC991521320B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.4:*:*:*:*:*:*:*", "matchCriteriaId": "C11A8F17-5253-475B-89FF-A26EA7531E13"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.5:*:*:*:*:*:*:*", "matchCriteriaId": "4A88B09D-CDCF-45FD-B004-13B597DA4F48"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.6:*:*:*:*:*:*:*", "matchCriteriaId": "49583BE8-B832-4E9F-B154-47A26C72489D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.7:*:*:*:*:*:*:*", "matchCriteriaId": "E2501F40-3630-4528-BE0A-61D4BB6EC7FE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.8:*:*:*:*:*:*:*", "matchCriteriaId": "9223DAF7-D03E-4A4E-8AB5-5CEB87DFF2C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.1.9:*:*:*:*:*:*:*", "matchCriteriaId": "078C0943-C27C-44A9-B00D-5A261C58D6CF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "CFF77ABF-0A03-437A-B241-1EF2BBB83D24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "9DA2615A-CD65-4765-AB0A-D72C2BEB00F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha2:*:*:*:*:*:*", "matchCriteriaId": "7D09CC46-DFA2-408D-8720-05C23E73C859"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:alpha3:*:*:*:*:*:*", "matchCriteriaId": "3461212B-A96B-4D38-A722-84E7418C2A7A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "7B6DEE14-744B-4DE4-BDCF-E4E4D37F70A0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "D4462BEE-39B6-47BD-B08F-5BE1FD918221"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "5F096CD6-534E-4ABF-B2DF-D4B55B8C5F6A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "A66AB537-6FBA-4A51-B10C-BF61F54BC01B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.3:*:*:*:*:*:*:*", "matchCriteriaId": "A50835BF-D28B-47FF-81F0-C34D95D6F2E9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.4:*:*:*:*:*:*:*", "matchCriteriaId": "BA0EB9A6-1DFD-4C17-A002-0899DA252A56"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.5:*:*:*:*:*:*:*", "matchCriteriaId": "BBA33285-3EE7-43FD-8347-E7D9A18DC134"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.6:*:*:*:*:*:*:*", "matchCriteriaId": "8827C2B4-EBEC-4D64-9AC8-07A048467F40"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.2.7:*:*:*:*:*:*:*", "matchCriteriaId": "1F32DFF4-6448-46FD-9358-4FB1C310EC2E"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-November/092926.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-November/093063.html", "source": "secalert@redhat.com"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2012-November/093064.html", "source": "secalert@redhat.com"}, {"url": "http://security.gentoo.org/glsa/glsa-201211-01.xml", "source": "secalert@redhat.com"}, {"url": "http://www.debian.org/security/2012/dsa-2500", "source": "secalert@redhat.com"}, {"url": "http://www.mantisbt.org/bugs/changelog_page.php?version_id=140", "source": "secalert@redhat.com"}, {"url": "http://www.mantisbt.org/bugs/view.php?id=13656", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/03/06/9", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/52313", "source": "secalert@redhat.com"}, {"url": "https://github.com/mantisbt/mantisbt/commit/df7782a65e96aa1c9639a7625a658102134c7fe0", "source": "secalert@redhat.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/mantisbt/mantisbt/commit/df7782a65e96aa1c9639a7625a658102134c7fe0"}}