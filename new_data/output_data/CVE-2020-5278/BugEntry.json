{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @since 1.5.0\n */\nclass PrestaShopExceptionCore extends Exception\n{\n    /**\n     * This method acts like an error handler, if dev mode is on, display the error else use a better silent way.\n     */\n    public function displayMessage()\n    {\n        if (getenv('kernel.environment') === 'test') {\n            throw $this;\n        }\n\n        header('HTTP/1.1 500 Internal Server Error');\n        if (ToolsCore::isPHPCLI()) {\n            echo get_class($this) . ' in ' . $this->getFile() . ' line ' . $this->getLine() . \"\\n\";\n            echo $this->getTraceAsString() . \"\\n\";\n        } elseif (_PS_MODE_DEV_) {\n            // Display error message\n            echo '<style>\n                #psException{font-family: Verdana; font-size: 14px}\n                #psException h2{color: #F20000}\n                #psException p{padding-left: 20px}\n                #psException ul li{margin-bottom: 10px}\n                #psException a{font-size: 12px; color: #000000}\n                #psException .psTrace, #psException .psArgs{display: none}\n                #psException pre{border: 1px solid #236B04; background-color: #EAFEE1; padding: 5px; font-family: Courier; width: 99%; overflow-x: auto; margin-bottom: 30px;}\n                #psException .psArgs pre{background-color: #F1FDFE;}\n                #psException pre .selected{color: #F20000; font-weight: bold;}\n            </style>';\n            echo '<div id=\"psException\">';\n            echo '<h2>[' . get_class($this) . ']</h2>';\n            echo $this->getExtendedMessage();\n\n            $this->displayFileDebug($this->getFile(), $this->getLine());\n\n            // Display debug backtrace\n            echo '<ul>';\n            foreach ($this->getTrace() as $id => $trace) {\n                $relative_file = (isset($trace['file'])) ? ltrim(str_replace(array(_PS_ROOT_DIR_, '\\\\'), array('', '/'), $trace['file']), '/') : '';\n                $current_line = (isset($trace['line'])) ? $trace['line'] : '';\n                if (defined('_PS_ADMIN_DIR_')) {\n                    $relative_file = str_replace(basename(_PS_ADMIN_DIR_) . DIRECTORY_SEPARATOR, 'admin' . DIRECTORY_SEPARATOR, $relative_file);\n                }\n                echo '<li>';\n                echo '<b>' . ((isset($trace['class'])) ? $trace['class'] : '') . ((isset($trace['type'])) ? $trace['type'] : '') . $trace['function'] . '</b>';\n                echo ' - <a style=\"font-size: 12px; color: #000000; cursor:pointer; color: blue;\" onclick=\"document.getElementById(\\'psTrace_' . $id . '\\').style.display = (document.getElementById(\\'psTrace_' . $id . '\\').style.display != \\'block\\') ? \\'block\\' : \\'none\\'; return false\">[line ' . $current_line . ' - ' . $relative_file . ']</a>';\n\n                if (isset($trace['args']) && count($trace['args'])) {\n                    echo ' - <a style=\"font-size: 12px; color: #000000; cursor:pointer; color: blue;\" onclick=\"document.getElementById(\\'psArgs_' . $id . '\\').style.display = (document.getElementById(\\'psArgs_' . $id . '\\').style.display != \\'block\\') ? \\'block\\' : \\'none\\'; return false\">[' . count($trace['args']) . ' Arguments]</a>';\n                }\n\n                if ($relative_file) {\n                    $this->displayFileDebug($trace['file'], $trace['line'], $id);\n                }\n                if (isset($trace['args']) && count($trace['args'])) {\n                    $args = $this->hideCriticalArgs($trace);\n                    $this->displayArgsDebug($args, $id);\n                }\n                echo '</li>';\n            }\n            echo '</ul>';\n            echo '</div>';\n        } else {\n            // If not in mode dev, display an error page\n            if (file_exists(_PS_ROOT_DIR_ . '/error500.html')) {\n                echo file_get_contents(_PS_ROOT_DIR_ . '/error500.html');\n            }\n        }\n        // Log the error in the disk\n        $this->logError();\n        //We only need the error code 1 in cli context\n        exit((int) ToolsCore::isPHPCLI());\n    }\n\n    /**\n     * Display lines around current line.\n     *\n     * @param string $file\n     * @param int $line\n     * @param string $id\n     */\n    protected function displayFileDebug($file, $line, $id = null)\n    {\n        $lines = file($file);\n        $offset = $line - 6;\n        $total = 11;\n        if ($offset < 0) {\n            $total += $offset;\n            $offset = 0;\n        }\n        $lines = array_slice($lines, $offset, $total);\n        ++$offset;\n\n        echo '<div class=\"psTrace\" id=\"psTrace_' . $id . '\" ' . ((null === $id ? 'style=\"display: block\"' : '')) . '><pre>';\n        foreach ($lines as $k => $l) {\n            $string = ($offset + $k) . '. ' . htmlspecialchars($l);\n            if ($offset + $k == $line) {\n                echo '<span class=\"selected\">' . $string . '</span>';\n            } else {\n                echo $string;\n            }\n        }\n        echo '</pre></div>';\n    }\n\n    /**\n     * Prevent critical arguments to be displayed in the debug trace page (e.g. database password)\n     * Returns the array of args with critical arguments replaced by placeholders.\n     *\n     * @param array $trace\n     *\n     * @return array\n     */\n    protected function hideCriticalArgs(array $trace)\n    {\n        $args = $trace['args'];\n        if (empty($trace['class']) || empty($trace['function'])) {\n            return $args;\n        }\n\n        $criticalParameters = [\n            'pwd',\n            'pass',\n            'passwd',\n            'password',\n            'database',\n            'server',\n        ];\n        $hiddenArgs = [];\n\n        try {\n            $class = new \\ReflectionClass($trace['class']);\n            /** @var \\ReflectionMethod $method */\n            $method = $class->getMethod($trace['function']);\n            /** @var \\ReflectionParameter $parameter */\n            foreach ($method->getParameters() as $argIndex => $parameter) {\n                if ($argIndex >= count($args)) {\n                    break;\n                }\n\n                if (in_array(strtolower($parameter->getName()), $criticalParameters)) {\n                    $hiddenArgs[] = '**hidden_' . $parameter->getName() . '**';\n                } else {\n                    $hiddenArgs[] = $args[$argIndex];\n                }\n            }\n        } catch (ReflectionException $e) {\n            //In worst case scenario there are some critical args we could't detect so we return an empty array\n        }\n\n        return $hiddenArgs;\n    }\n\n    /**\n     * Display arguments list of traced function.\n     *\n     * @param array $args List of arguments\n     * @param string $id ID of argument\n     */\n    protected function displayArgsDebug($args, $id)\n    {\n        echo '<div class=\"psArgs\" id=\"psArgs_' . $id . '\"><pre>';\n        foreach ($args as $arg => $value) {\n            echo '<b>Argument [' . Tools::safeOutput($arg) . \"]</b>\\n\";\n            echo Tools::safeOutput(print_r($value, true));\n            echo \"\\n\";\n        }\n        echo '</pre>';\n    }\n\n    /**\n     * Log the error on the disk.\n     */\n    protected function logError()\n    {\n        $logger = new FileLogger();\n        $logger->setFilename(_PS_ROOT_DIR_ . '/var/logs/' . date('Ymd') . '_exception.log');\n        $logger->logError($this->getExtendedMessage(false));\n    }\n\n    /**\n     * @deprecated 1.5.5\n     */\n    protected function getExentedMessage($html = true)\n    {\n        Tools::displayAsDeprecated('Use getExtendedMessage instead');\n\n        return $this->getExtendedMessage($html);\n    }\n\n    /**\n     * Return the content of the Exception.\n     *\n     * @return string content of the exception\n     */\n    protected function getExtendedMessage($html = true)\n    {\n        $format = '<p><b>%s</b><br /><i>at line </i><b>%d</b><i> in file </i><b>%s</b></p>';\n        if (!$html) {\n            $format = strip_tags(str_replace('<br />', ' ', $format));\n        }\n\n        return sprintf(\n            $format,\n            $this->getMessage(),\n            $this->getLine(),\n            ltrim(str_replace(array(_PS_ROOT_DIR_, '\\\\'), array('', '/'), $this->getFile()), '/')\n        );\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\n/**\n * @since 1.5.0\n */\nclass PrestaShopExceptionCore extends Exception\n{\n    /**\n     * This method acts like an error handler, if dev mode is on, display the error else use a better silent way.\n     */\n    public function displayMessage()\n    {\n        if (getenv('kernel.environment') === 'test') {\n            throw $this;\n        }\n\n        header('HTTP/1.1 500 Internal Server Error');\n        if (ToolsCore::isPHPCLI()) {\n            echo get_class($this) . ' in ' . $this->getFile() . ' line ' . $this->getLine() . \"\\n\";\n            echo $this->getTraceAsString() . \"\\n\";\n        } elseif (_PS_MODE_DEV_) {\n            // Display error message\n            echo '<style>\n                #psException{font-family: Verdana; font-size: 14px}\n                #psException h2{color: #F20000}\n                #psException p{padding-left: 20px}\n                #psException ul li{margin-bottom: 10px}\n                #psException a{font-size: 12px; color: #000000}\n                #psException .psTrace, #psException .psArgs{display: none}\n                #psException pre{border: 1px solid #236B04; background-color: #EAFEE1; padding: 5px; font-family: Courier; width: 99%; overflow-x: auto; margin-bottom: 30px;}\n                #psException .psArgs pre{background-color: #F1FDFE;}\n                #psException pre .selected{color: #F20000; font-weight: bold;}\n            </style>';\n            echo '<div id=\"psException\">';\n            echo '<h2>[' . get_class($this) . ']</h2>';\n            echo $this->getExtendedMessage();\n\n            $this->displayFileDebug($this->getFile(), $this->getLine());\n\n            // Display debug backtrace\n            echo '<ul>';\n            foreach ($this->getTrace() as $id => $trace) {\n                $relative_file = (isset($trace['file'])) ? ltrim(str_replace(array(_PS_ROOT_DIR_, '\\\\'), array('', '/'), $trace['file']), '/') : '';\n                $current_line = (isset($trace['line'])) ? $trace['line'] : '';\n                if (defined('_PS_ADMIN_DIR_')) {\n                    $relative_file = str_replace(basename(_PS_ADMIN_DIR_) . DIRECTORY_SEPARATOR, 'admin' . DIRECTORY_SEPARATOR, $relative_file);\n                }\n                echo '<li>';\n                echo '<b>' . ((isset($trace['class'])) ? $trace['class'] : '') . ((isset($trace['type'])) ? $trace['type'] : '') . $trace['function'] . '</b>';\n                echo ' - <a style=\"font-size: 12px; color: #000000; cursor:pointer; color: blue;\" onclick=\"document.getElementById(\\'psTrace_' . $id . '\\').style.display = (document.getElementById(\\'psTrace_' . $id . '\\').style.display != \\'block\\') ? \\'block\\' : \\'none\\'; return false\">[line ' . $current_line . ' - ' . $relative_file . ']</a>';\n\n                if (isset($trace['args']) && count($trace['args'])) {\n                    echo ' - <a style=\"font-size: 12px; color: #000000; cursor:pointer; color: blue;\" onclick=\"document.getElementById(\\'psArgs_' . $id . '\\').style.display = (document.getElementById(\\'psArgs_' . $id . '\\').style.display != \\'block\\') ? \\'block\\' : \\'none\\'; return false\">[' . count($trace['args']) . ' Arguments]</a>';\n                }\n\n                if ($relative_file) {\n                    $this->displayFileDebug($trace['file'], $trace['line'], $id);\n                }\n                if (isset($trace['args']) && count($trace['args'])) {\n                    $args = $this->hideCriticalArgs($trace);\n                    $this->displayArgsDebug($args, $id);\n                }\n                echo '</li>';\n            }\n            echo '</ul>';\n            echo '</div>';\n        } else {\n            // If not in mode dev, display an error page\n            if (file_exists(_PS_ROOT_DIR_ . '/error500.html')) {\n                echo file_get_contents(_PS_ROOT_DIR_ . '/error500.html');\n            }\n        }\n        // Log the error in the disk\n        $this->logError();\n        //We only need the error code 1 in cli context\n        exit((int) ToolsCore::isPHPCLI());\n    }\n\n    /**\n     * Display lines around current line.\n     *\n     * @param string $file\n     * @param int $line\n     * @param string $id\n     */\n    protected function displayFileDebug($file, $line, $id = null)\n    {\n        $lines = file($file);\n        $offset = $line - 6;\n        $total = 11;\n        if ($offset < 0) {\n            $total += $offset;\n            $offset = 0;\n        }\n        $lines = array_slice($lines, $offset, $total);\n        ++$offset;\n\n        echo '<div class=\"psTrace\" id=\"psTrace_' . $id . '\" ' . ((null === $id ? 'style=\"display: block\"' : '')) . '><pre>';\n        foreach ($lines as $k => $l) {\n            $string = ($offset + $k) . '. ' . htmlspecialchars($l);\n            if ($offset + $k == $line) {\n                echo '<span class=\"selected\">' . $string . '</span>';\n            } else {\n                echo $string;\n            }\n        }\n        echo '</pre></div>';\n    }\n\n    /**\n     * Prevent critical arguments to be displayed in the debug trace page (e.g. database password)\n     * Returns the array of args with critical arguments replaced by placeholders.\n     *\n     * @param array $trace\n     *\n     * @return array\n     */\n    protected function hideCriticalArgs(array $trace)\n    {\n        $args = $trace['args'];\n        if (empty($trace['class']) || empty($trace['function'])) {\n            return $args;\n        }\n\n        $criticalParameters = [\n            'pwd',\n            'pass',\n            'passwd',\n            'password',\n            'database',\n            'server',\n        ];\n        $hiddenArgs = [];\n\n        try {\n            $class = new \\ReflectionClass($trace['class']);\n            /** @var \\ReflectionMethod $method */\n            $method = $class->getMethod($trace['function']);\n            /** @var \\ReflectionParameter $parameter */\n            foreach ($method->getParameters() as $argIndex => $parameter) {\n                if ($argIndex >= count($args)) {\n                    break;\n                }\n\n                if (in_array(strtolower($parameter->getName()), $criticalParameters)) {\n                    $hiddenArgs[] = '**hidden_' . $parameter->getName() . '**';\n                } else {\n                    $hiddenArgs[] = $args[$argIndex];\n                }\n            }\n        } catch (ReflectionException $e) {\n            //In worst case scenario there are some critical args we could't detect so we return an empty array\n        }\n\n        return $hiddenArgs;\n    }\n\n    /**\n     * Display arguments list of traced function.\n     *\n     * @param array $args List of arguments\n     * @param string $id ID of argument\n     */\n    protected function displayArgsDebug($args, $id)\n    {\n        echo '<div class=\"psArgs\" id=\"psArgs_' . $id . '\"><pre>';\n        foreach ($args as $arg => $value) {\n            echo '<b>Argument [' . Tools::safeOutput($arg) . \"]</b>\\n\";\n            echo Tools::safeOutput(print_r($value, true));\n            echo \"\\n\";\n        }\n        echo '</pre>';\n    }\n\n    /**\n     * Log the error on the disk.\n     */\n    protected function logError()\n    {\n        $logger = new FileLogger();\n        $logger->setFilename(_PS_ROOT_DIR_ . '/var/logs/' . date('Ymd') . '_exception.log');\n        $logger->logError($this->getExtendedMessage(false));\n    }\n\n    /**\n     * @deprecated 1.5.5\n     */\n    protected function getExentedMessage($html = true)\n    {\n        Tools::displayAsDeprecated('Use getExtendedMessage instead');\n\n        return $this->getExtendedMessage($html);\n    }\n\n    /**\n     * Return the content of the Exception.\n     *\n     * @return string content of the exception\n     */\n    protected function getExtendedMessage($html = true)\n    {\n        $format = '<p><b>%s</b><br /><i>at line </i><b>%d</b><i> in file </i><b>%s</b></p>';\n        if (!$html) {\n            $format = strip_tags(str_replace('<br />', ' ', $format));\n        }\n\n        return sprintf(\n            $format,\n            Tools::safeOutput($this->getMessage(), true),\n            $this->getLine(),\n            ltrim(str_replace(array(_PS_ROOT_DIR_, '\\\\'), array('', '/'), $this->getFile()), '/')\n        );\n    }\n}\n"], "filenames": ["classes/exception/PrestaShopException.php"], "buggy_code_start_loc": [233], "buggy_code_end_loc": [234], "fixing_code_start_loc": [233], "fixing_code_end_loc": [234], "type": "CWE-79", "message": "In PrestaShop between versions 1.5.4.0 and 1.7.6.5, there is a reflected XSS on Exception page The problem is fixed in 1.7.6.5", "other": {"cve": {"id": "CVE-2020-5278", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-20T17:15:15.820", "lastModified": "2020-04-22T15:22:27.273", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop between versions 1.5.4.0 and 1.7.6.5, there is a reflected XSS on Exception page The problem is fixed in 1.7.6.5"}, {"lang": "es", "value": "En PrestaShop entre las versiones 1.5.4.0 y 1.7.6.5, hay una vulnerabilidad de tipo XSS reflejado en la p\u00e1gina Exception. El problema es corregido en la versi\u00f3n 1.7.6.5"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.5.4.0", "versionEndExcluding": "1.7.6.5", "matchCriteriaId": "F21264A9-4272-4A27-986C-2E693BF5CF58"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/ea85210d6e5d81f058b55764bc4608cdb0b36c5d", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-mrpj-67mq-3fr5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/ea85210d6e5d81f058b55764bc4608cdb0b36c5d"}}