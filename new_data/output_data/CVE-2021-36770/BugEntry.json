{"buggy_code": ["#\n# $Id: Encode.pm,v 3.10 2021/05/18 07:42:45 dankogai Exp dankogai $\n#\npackage Encode;\nuse strict;\nuse warnings;\nuse constant DEBUG => !!$ENV{PERL_ENCODE_DEBUG};\nour $VERSION;\nBEGIN {\n    $VERSION = sprintf \"%d.%02d\", q$Revision: 3.10 $ =~ /(\\d+)/g;\n    require XSLoader;\n    XSLoader::load( __PACKAGE__, $VERSION );\n}\n\nuse Exporter 5.57 'import';\n\nuse Carp ();\nour @CARP_NOT = qw(Encode::Encoder);\n\n# Public, encouraged API is exported by default\n\nour @EXPORT = qw(\n  decode  decode_utf8  encode  encode_utf8 str2bytes bytes2str\n  encodings  find_encoding find_mime_encoding clone_encoding\n);\nour @FB_FLAGS = qw(\n  DIE_ON_ERR WARN_ON_ERR RETURN_ON_ERR LEAVE_SRC\n  PERLQQ HTMLCREF XMLCREF STOP_AT_PARTIAL\n);\nour @FB_CONSTS = qw(\n  FB_DEFAULT FB_CROAK FB_QUIET FB_WARN\n  FB_PERLQQ FB_HTMLCREF FB_XMLCREF\n);\nour @EXPORT_OK = (\n    qw(\n      _utf8_off _utf8_on define_encoding from_to is_16bit is_8bit\n      is_utf8 perlio_ok resolve_alias utf8_downgrade utf8_upgrade\n      ),\n    @FB_FLAGS, @FB_CONSTS,\n);\n\nour %EXPORT_TAGS = (\n    all          => [ @EXPORT,    @EXPORT_OK ],\n    default      => [ @EXPORT ],\n    fallbacks    => [ @FB_CONSTS ],\n    fallback_all => [ @FB_CONSTS, @FB_FLAGS ],\n);\n\n# Documentation moved after __END__ for speed - NI-S\n\nour $ON_EBCDIC = ( ord(\"A\") == 193 );\n\nuse Encode::Alias ();\nuse Encode::MIME::Name;\n\nuse Storable;\n\n# Make a %Encoding package variable to allow a certain amount of cheating\nour %Encoding;\nour %ExtModule;\nrequire Encode::Config;\n#  See\n#  https://bugzilla.redhat.com/show_bug.cgi?id=435505#c2\n#  to find why sig handlers inside eval{} are disabled.\neval {\n    local $SIG{__DIE__};\n    local $SIG{__WARN__};\n    local @INC = @INC || ();\n    pop @INC if $INC[-1] eq '.';\n    require Encode::ConfigLocal;\n};\n\nsub encodings {\n    my %enc;\n    my $arg  = $_[1] || '';\n    if ( $arg eq \":all\" ) {\n        %enc = ( %Encoding, %ExtModule );\n    }\n    else {\n        %enc = %Encoding;\n        for my $mod ( map { m/::/ ? $_ : \"Encode::$_\" } @_ ) {\n            DEBUG and warn $mod;\n            for my $enc ( keys %ExtModule ) {\n                $ExtModule{$enc} eq $mod and $enc{$enc} = $mod;\n            }\n        }\n    }\n    return sort { lc $a cmp lc $b }\n      grep      { !/^(?:Internal|Unicode|Guess)$/o } keys %enc;\n}\n\nsub perlio_ok {\n    my $obj = ref( $_[0] ) ? $_[0] : find_encoding( $_[0] );\n    $obj->can(\"perlio_ok\") and return $obj->perlio_ok();\n    return 0;    # safety net\n}\n\nsub define_encoding {\n    my $obj  = shift;\n    my $name = shift;\n    $Encoding{$name} = $obj;\n    my $lc = lc($name);\n    define_alias( $lc => $obj ) unless $lc eq $name;\n    while (@_) {\n        my $alias = shift;\n        define_alias( $alias, $obj );\n    }\n    my $class = ref($obj);\n    push @Encode::CARP_NOT, $class unless grep { $_ eq $class } @Encode::CARP_NOT;\n    push @Encode::Encoding::CARP_NOT, $class unless grep { $_ eq $class } @Encode::Encoding::CARP_NOT;\n    return $obj;\n}\n\nsub getEncoding {\n    my ( $class, $name, $skip_external ) = @_;\n\n    defined($name) or return;\n\n    $name =~ s/\\s+//g; # https://rt.cpan.org/Ticket/Display.html?id=65796\n\n    ref($name) && $name->can('renew') and return $name;\n    exists $Encoding{$name} and return $Encoding{$name};\n    my $lc = lc $name;\n    exists $Encoding{$lc} and return $Encoding{$lc};\n\n    my $oc = $class->find_alias($name);\n    defined($oc) and return $oc;\n    $lc ne $name and $oc = $class->find_alias($lc);\n    defined($oc) and return $oc;\n\n    unless ($skip_external) {\n        if ( my $mod = $ExtModule{$name} || $ExtModule{$lc} ) {\n            $mod =~ s,::,/,g;\n            $mod .= '.pm';\n            eval { require $mod; };\n            exists $Encoding{$name} and return $Encoding{$name};\n        }\n    }\n    return;\n}\n\n# HACK: These two functions must be defined in Encode and because of\n# cyclic dependency between Encode and Encode::Alias, Exporter does not work\nsub find_alias {\n    goto &Encode::Alias::find_alias;\n}\nsub define_alias {\n    goto &Encode::Alias::define_alias;\n}\n\nsub find_encoding($;$) {\n    my ( $name, $skip_external ) = @_;\n    return __PACKAGE__->getEncoding( $name, $skip_external );\n}\n\nsub find_mime_encoding($;$) {\n    my ( $mime_name, $skip_external ) = @_;\n    my $name = Encode::MIME::Name::get_encode_name( $mime_name );\n    return find_encoding( $name, $skip_external );\n}\n\nsub resolve_alias($) {\n    my $obj = find_encoding(shift);\n    defined $obj and return $obj->name;\n    return;\n}\n\nsub clone_encoding($) {\n    my $obj = find_encoding(shift);\n    ref $obj or return;\n    return Storable::dclone($obj);\n}\n\nonBOOT;\n\nif ($ON_EBCDIC) {\n    package Encode::UTF_EBCDIC;\n    use parent 'Encode::Encoding';\n    my $obj = bless { Name => \"UTF_EBCDIC\" } => \"Encode::UTF_EBCDIC\";\n    Encode::define_encoding($obj, 'Unicode');\n    sub decode {\n        my ( undef, $str, $chk ) = @_;\n        my $res = '';\n        for ( my $i = 0 ; $i < length($str) ; $i++ ) {\n            $res .=\n              chr(\n                utf8::unicode_to_native( ord( substr( $str, $i, 1 ) ) )\n              );\n        }\n        $_[1] = '' if $chk;\n        return $res;\n    }\n    sub encode {\n        my ( undef, $str, $chk ) = @_;\n        my $res = '';\n        for ( my $i = 0 ; $i < length($str) ; $i++ ) {\n            $res .=\n              chr(\n                utf8::native_to_unicode( ord( substr( $str, $i, 1 ) ) )\n              );\n        }\n        $_[1] = '' if $chk;\n        return $res;\n    }\n}\n\n{\n    # https://rt.cpan.org/Public/Bug/Display.html?id=103253\n    package Encode::XS;\n    use parent 'Encode::Encoding';\n}\n\n{\n    package Encode::utf8;\n    use parent 'Encode::Encoding';\n    my %obj = (\n        'utf8'         => { Name => 'utf8' },\n        'utf-8-strict' => { Name => 'utf-8-strict', strict_utf8 => 1 }\n    );\n    for ( keys %obj ) {\n        bless $obj{$_} => __PACKAGE__;\n        Encode::define_encoding( $obj{$_} => $_ );\n    }\n    sub cat_decode {\n        # ($obj, $dst, $src, $pos, $trm, $chk)\n        # currently ignores $chk\n        my ( undef, undef, undef, $pos, $trm ) = @_;\n        my ( $rdst, $rsrc, $rpos ) = \\@_[ 1, 2, 3 ];\n        use bytes;\n        if ( ( my $npos = index( $$rsrc, $trm, $pos ) ) >= 0 ) {\n            $$rdst .=\n              substr( $$rsrc, $pos, $npos - $pos + length($trm) );\n            $$rpos = $npos + length($trm);\n            return 1;\n        }\n        $$rdst .= substr( $$rsrc, $pos );\n        $$rpos = length($$rsrc);\n        return '';\n    }\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nEncode - character encodings in Perl\n\n=head1 SYNOPSIS\n\n    use Encode qw(decode encode);\n    $characters = decode('UTF-8', $octets,     Encode::FB_CROAK);\n    $octets     = encode('UTF-8', $characters, Encode::FB_CROAK);\n\n=head2 Table of Contents\n\nEncode consists of a collection of modules whose details are too extensive\nto fit in one document.  This one itself explains the top-level APIs\nand general topics at a glance.  For other topics and more details,\nsee the documentation for these modules:\n\n=over 2\n\n=item L<Encode::Alias> - Alias definitions to encodings\n\n=item L<Encode::Encoding> - Encode Implementation Base Class\n\n=item L<Encode::Supported> - List of Supported Encodings\n\n=item L<Encode::CN> - Simplified Chinese Encodings\n\n=item L<Encode::JP> - Japanese Encodings\n\n=item L<Encode::KR> - Korean Encodings\n\n=item L<Encode::TW> - Traditional Chinese Encodings\n\n=back\n\n=head1 DESCRIPTION\n\nThe C<Encode> module provides the interface between Perl strings\nand the rest of the system.  Perl strings are sequences of\nI<characters>.\n\nThe repertoire of characters that Perl can represent is a superset of those\ndefined by the Unicode Consortium. On most platforms the ordinal\nvalues of a character as returned by C<ord(I<S>)> is the I<Unicode\ncodepoint> for that character. The exceptions are platforms where\nthe legacy encoding is some variant of EBCDIC rather than a superset\nof ASCII; see L<perlebcdic>.\n\nDuring recent history, data is moved around a computer in 8-bit chunks,\noften called \"bytes\" but also known as \"octets\" in standards documents.\nPerl is widely used to manipulate data of many types: not only strings of\ncharacters representing human or computer languages, but also \"binary\"\ndata, being the machine's representation of numbers, pixels in an image, or\njust about anything.\n\nWhen Perl is processing \"binary data\", the programmer wants Perl to\nprocess \"sequences of bytes\". This is not a problem for Perl: because a\nbyte has 256 possible values, it easily fits in Perl's much larger\n\"logical character\".\n\nThis document mostly explains the I<how>. L<perlunitut> and L<perlunifaq>\nexplain the I<why>.\n\n=head2 TERMINOLOGY\n\n=head3 character\n\nA character in the range 0 .. 2**32-1 (or more);\nwhat Perl's strings are made of.\n\n=head3 byte\n\nA character in the range 0..255;\na special case of a Perl character.\n\n=head3 octet\n\n8 bits of data, with ordinal values 0..255;\nterm for bytes passed to or from a non-Perl context, such as a disk file,\nstandard I/O stream, database, command-line argument, environment variable,\nsocket etc.\n\n=head1 THE PERL ENCODING API\n\n=head2 Basic methods\n\n=head3 encode\n\n  $octets  = encode(ENCODING, STRING[, CHECK])\n\nEncodes the scalar value I<STRING> from Perl's internal form into\nI<ENCODING> and returns a sequence of octets.  I<ENCODING> can be either a\ncanonical name or an alias.  For encoding names and aliases, see\nL</\"Defining Aliases\">.  For CHECK, see L</\"Handling Malformed Data\">.\n\nB<CAVEAT>: the input scalar I<STRING> might be modified in-place depending\non what is set in CHECK. See L</LEAVE_SRC> if you want your inputs to be\nleft unchanged.\n\nFor example, to convert a string from Perl's internal format into\nISO-8859-1, also known as Latin1:\n\n  $octets = encode(\"iso-8859-1\", $string);\n\nB<CAVEAT>: When you run C<$octets = encode(\"UTF-8\", $string)>, then\n$octets I<might not be equal to> $string.  Though both contain the\nsame data, the UTF8 flag for $octets is I<always> off.  When you\nencode anything, the UTF8 flag on the result is always off, even when it\ncontains a completely valid UTF-8 string. See L</\"The UTF8 flag\"> below.\n\nIf the $string is C<undef>, then C<undef> is returned.\n\nC<str2bytes> may be used as an alias for C<encode>.\n\n=head3 decode\n\n  $string = decode(ENCODING, OCTETS[, CHECK])\n\nThis function returns the string that results from decoding the scalar\nvalue I<OCTETS>, assumed to be a sequence of octets in I<ENCODING>, into\nPerl's internal form.  As with encode(),\nI<ENCODING> can be either a canonical name or an alias. For encoding names\nand aliases, see L</\"Defining Aliases\">; for I<CHECK>, see L</\"Handling\nMalformed Data\">.\n\nB<CAVEAT>: the input scalar I<OCTETS> might be modified in-place depending\non what is set in CHECK. See L</LEAVE_SRC> if you want your inputs to be\nleft unchanged.\n\nFor example, to convert ISO-8859-1 data into a string in Perl's\ninternal format:\n\n  $string = decode(\"iso-8859-1\", $octets);\n\nB<CAVEAT>: When you run C<$string = decode(\"UTF-8\", $octets)>, then $string\nI<might not be equal to> $octets.  Though both contain the same data, the\nUTF8 flag for $string is on.  See L</\"The UTF8 flag\">\nbelow.\n\nIf the $string is C<undef>, then C<undef> is returned.\n\nC<bytes2str> may be used as an alias for C<decode>.\n\n=head3 find_encoding\n\n  [$obj =] find_encoding(ENCODING)\n\nReturns the I<encoding object> corresponding to I<ENCODING>.  Returns\nC<undef> if no matching I<ENCODING> is find.  The returned object is\nwhat does the actual encoding or decoding.\n\n  $string = decode($name, $bytes);\n\nis in fact\n\n    $string = do {\n        $obj = find_encoding($name);\n        croak qq(encoding \"$name\" not found) unless ref $obj;\n        $obj->decode($bytes);\n    };\n\nwith more error checking.\n\nYou can therefore save time by reusing this object as follows;\n\n    my $enc = find_encoding(\"iso-8859-1\");\n    while(<>) {\n        my $string = $enc->decode($_);\n        ... # now do something with $string;\n    }\n\nBesides L</decode> and L</encode>, other methods are\navailable as well.  For instance, C<name()> returns the canonical\nname of the encoding object.\n\n  find_encoding(\"latin1\")->name; # iso-8859-1\n\nSee L<Encode::Encoding> for details.\n\n=head3 find_mime_encoding\n\n  [$obj =] find_mime_encoding(MIME_ENCODING)\n\nReturns the I<encoding object> corresponding to I<MIME_ENCODING>.  Acts\nsame as C<find_encoding()> but C<mime_name()> of returned object must\nmatch to I<MIME_ENCODING>.  So as opposite of C<find_encoding()>\ncanonical names and aliases are not used when searching for object.\n\n    find_mime_encoding(\"utf8\"); # returns undef because \"utf8\" is not valid I<MIME_ENCODING>\n    find_mime_encoding(\"utf-8\"); # returns encode object \"utf-8-strict\"\n    find_mime_encoding(\"UTF-8\"); # same as \"utf-8\" because I<MIME_ENCODING> is case insensitive\n    find_mime_encoding(\"utf-8-strict\"); returns undef because \"utf-8-strict\" is not valid I<MIME_ENCODING>\n\n=head3 from_to\n\n  [$length =] from_to($octets, FROM_ENC, TO_ENC [, CHECK])\n\nConverts I<in-place> data between two encodings. The data in $octets\nmust be encoded as octets and I<not> as characters in Perl's internal\nformat. For example, to convert ISO-8859-1 data into Microsoft's CP1250\nencoding:\n\n  from_to($octets, \"iso-8859-1\", \"cp1250\");\n\nand to convert it back:\n\n  from_to($octets, \"cp1250\", \"iso-8859-1\");\n\nBecause the conversion happens in place, the data to be\nconverted cannot be a string constant: it must be a scalar variable.\n\nC<from_to()> returns the length of the converted string in octets on success,\nand C<undef> on error.\n\nB<CAVEAT>: The following operations may look the same, but are not:\n\n  from_to($data, \"iso-8859-1\", \"UTF-8\"); #1\n  $data = decode(\"iso-8859-1\", $data);  #2\n\nBoth #1 and #2 make $data consist of a completely valid UTF-8 string,\nbut only #2 turns the UTF8 flag on.  #1 is equivalent to:\n\n  $data = encode(\"UTF-8\", decode(\"iso-8859-1\", $data));\n\nSee L</\"The UTF8 flag\"> below.\n\nAlso note that:\n\n  from_to($octets, $from, $to, $check);\n\nis equivalent to:\n\n  $octets = encode($to, decode($from, $octets), $check);\n\nYes, it does I<not> respect the $check during decoding.  It is\ndeliberately done that way.  If you need minute control, use C<decode>\nfollowed by C<encode> as follows:\n\n  $octets = encode($to, decode($from, $octets, $check_from), $check_to);\n\n=head3 encode_utf8\n\n  $octets = encode_utf8($string);\n\nB<WARNING>: L<This function can produce invalid UTF-8!|/UTF-8 vs. utf8 vs. UTF8>\nDo not use it for data exchange.\nUnless you want Perl's older \"lax\" mode, prefer\nC<$octets = encode(\"UTF-8\", $string)>.\n\nEquivalent to C<$octets = encode(\"utf8\", $string)>.  The characters in\n$string are encoded in Perl's internal format, and the result is returned\nas a sequence of octets.  Because all possible characters in Perl have a\n(loose, not strict) utf8 representation, this function cannot fail.\n\n=head3 decode_utf8\n\n  $string = decode_utf8($octets [, CHECK]);\n\nB<WARNING>: L<This function accepts invalid UTF-8!|/UTF-8 vs. utf8 vs. UTF8>\nDo not use it for data exchange.\nUnless you want Perl's older \"lax\" mode, prefer\nC<$string = decode(\"UTF-8\", $octets [, CHECK])>.\n\nEquivalent to C<$string = decode(\"utf8\", $octets [, CHECK])>.\nThe sequence of octets represented by $octets is decoded\nfrom (loose, not strict) utf8 into a sequence of logical characters.\nBecause not all sequences of octets are valid not strict utf8,\nit is quite possible for this function to fail.\nFor CHECK, see L</\"Handling Malformed Data\">.\n\nB<CAVEAT>: the input I<$octets> might be modified in-place depending on\nwhat is set in CHECK. See L</LEAVE_SRC> if you want your inputs to be\nleft unchanged.\n\n=head2 Listing available encodings\n\n  use Encode;\n  @list = Encode->encodings();\n\nReturns a list of canonical names of available encodings that have already\nbeen loaded.  To get a list of all available encodings including those that\nhave not yet been loaded, say:\n\n  @all_encodings = Encode->encodings(\":all\");\n\nOr you can give the name of a specific module:\n\n  @with_jp = Encode->encodings(\"Encode::JP\");\n\nWhen \"C<::>\" is not in the name, \"C<Encode::>\" is assumed.\n\n  @ebcdic = Encode->encodings(\"EBCDIC\");\n\nTo find out in detail which encodings are supported by this package,\nsee L<Encode::Supported>.\n\n=head2 Defining Aliases\n\nTo add a new alias to a given encoding, use:\n\n  use Encode;\n  use Encode::Alias;\n  define_alias(NEWNAME => ENCODING);\n\nAfter that, I<NEWNAME> can be used as an alias for I<ENCODING>.\nI<ENCODING> may be either the name of an encoding or an\nI<encoding object>.\n\nBefore you do that, first make sure the alias is nonexistent using\nC<resolve_alias()>, which returns the canonical name thereof.\nFor example:\n\n  Encode::resolve_alias(\"latin1\") eq \"iso-8859-1\" # true\n  Encode::resolve_alias(\"iso-8859-12\")   # false; nonexistent\n  Encode::resolve_alias($name) eq $name  # true if $name is canonical\n\nC<resolve_alias()> does not need C<use Encode::Alias>; it can be\nimported via C<use Encode qw(resolve_alias)>.\n\nSee L<Encode::Alias> for details.\n\n=head2 Finding IANA Character Set Registry names\n\nThe canonical name of a given encoding does not necessarily agree with\nIANA Character Set Registry, commonly seen as C<< Content-Type:\ntext/plain; charset=I<WHATEVER> >>.  For most cases, the canonical name\nworks, but sometimes it does not, most notably with \"utf-8-strict\".\n\nAs of C<Encode> version 2.21, a new method C<mime_name()> is therefore added.\n\n  use Encode;\n  my $enc = find_encoding(\"UTF-8\");\n  warn $enc->name;      # utf-8-strict\n  warn $enc->mime_name; # UTF-8\n\nSee also:  L<Encode::Encoding>\n\n=head1 Encoding via PerlIO\n\nIf your perl supports C<PerlIO> (which is the default), you can use a\nC<PerlIO> layer to decode and encode directly via a filehandle.  The\nfollowing two examples are fully identical in functionality:\n\n  ### Version 1 via PerlIO\n    open(INPUT,  \"< :encoding(shiftjis)\", $infile)\n        || die \"Can't open < $infile for reading: $!\";\n    open(OUTPUT, \"> :encoding(euc-jp)\",  $outfile)\n        || die \"Can't open > $output for writing: $!\";\n    while (<INPUT>) {   # auto decodes $_\n        print OUTPUT;   # auto encodes $_\n    }\n    close(INPUT)   || die \"can't close $infile: $!\";\n    close(OUTPUT)  || die \"can't close $outfile: $!\";\n\n  ### Version 2 via from_to()\n    open(INPUT,  \"< :raw\", $infile)\n        || die \"Can't open < $infile for reading: $!\";\n    open(OUTPUT, \"> :raw\",  $outfile)\n        || die \"Can't open > $output for writing: $!\";\n\n    while (<INPUT>) {\n        from_to($_, \"shiftjis\", \"euc-jp\", 1);  # switch encoding\n        print OUTPUT;   # emit raw (but properly encoded) data\n    }\n    close(INPUT)   || die \"can't close $infile: $!\";\n    close(OUTPUT)  || die \"can't close $outfile: $!\";\n\nIn the first version above, you let the appropriate encoding layer\nhandle the conversion.  In the second, you explicitly translate\nfrom one encoding to the other.\n\nUnfortunately, it may be that encodings are not C<PerlIO>-savvy.  You can check\nto see whether your encoding is supported by C<PerlIO> by invoking the\nC<perlio_ok> method on it:\n\n  Encode::perlio_ok(\"hz\");             # false\n  find_encoding(\"euc-cn\")->perlio_ok;  # true wherever PerlIO is available\n\n  use Encode qw(perlio_ok);            # imported upon request\n  perlio_ok(\"euc-jp\")\n\nFortunately, all encodings that come with C<Encode> core are C<PerlIO>-savvy\nexcept for C<hz> and C<ISO-2022-kr>.  For the gory details, see\nL<Encode::Encoding> and L<Encode::PerlIO>.\n\n=head1 Handling Malformed Data\n\nThe optional I<CHECK> argument tells C<Encode> what to do when\nencountering malformed data.  Without I<CHECK>, C<Encode::FB_DEFAULT>\n(== 0) is assumed.\n\nAs of version 2.12, C<Encode> supports coderef values for C<CHECK>;\nsee below.\n\nB<NOTE:> Not all encodings support this feature.\nSome encodings ignore the I<CHECK> argument.  For example,\nL<Encode::Unicode> ignores I<CHECK> and it always croaks on error.\n\n=head2 List of I<CHECK> values\n\n=head3 FB_DEFAULT\n\n  I<CHECK> = Encode::FB_DEFAULT ( == 0)\n\nIf I<CHECK> is 0, encoding and decoding replace any malformed character\nwith a I<substitution character>.  When you encode, I<SUBCHAR> is used.\nWhen you decode, the Unicode REPLACEMENT CHARACTER, code point U+FFFD, is\nused.  If the data is supposed to be UTF-8, an optional lexical warning of\nwarning category C<\"utf8\"> is given.\n\n=head3 FB_CROAK\n\n  I<CHECK> = Encode::FB_CROAK ( == 1)\n\nIf I<CHECK> is 1, methods immediately die with an error\nmessage.  Therefore, when I<CHECK> is 1, you should trap\nexceptions with C<eval{}>, unless you really want to let it C<die>.\n\n=head3 FB_QUIET\n\n  I<CHECK> = Encode::FB_QUIET\n\nIf I<CHECK> is set to C<Encode::FB_QUIET>, encoding and decoding immediately\nreturn the portion of the data that has been processed so far when an\nerror occurs. The data argument is overwritten with everything\nafter that point; that is, the unprocessed portion of the data.  This is\nhandy when you have to call C<decode> repeatedly in the case where your\nsource data may contain partial multi-byte character sequences,\n(that is, you are reading with a fixed-width buffer). Here's some sample\ncode to do exactly that:\n\n    my($buffer, $string) = (\"\", \"\");\n    while (read($fh, $buffer, 256, length($buffer))) {\n        $string .= decode($encoding, $buffer, Encode::FB_QUIET);\n        # $buffer now contains the unprocessed partial character\n    }\n\n=head3 FB_WARN\n\n  I<CHECK> = Encode::FB_WARN\n\nThis is the same as C<FB_QUIET> above, except that instead of being silent\non errors, it issues a warning.  This is handy for when you are debugging.\n\nB<CAVEAT>: All warnings from Encode module are reported, independently of\nL<pragma warnings|warnings> settings. If you want to follow settings of\nlexical warnings configured by L<pragma warnings|warnings> then append\nalso check value C<ENCODE::ONLY_PRAGMA_WARNINGS>. This value is available\nsince Encode version 2.99.\n\n=head3 FB_PERLQQ FB_HTMLCREF FB_XMLCREF\n\n=over 2\n\n=item perlqq mode (I<CHECK> = Encode::FB_PERLQQ)\n\n=item HTML charref mode (I<CHECK> = Encode::FB_HTMLCREF)\n\n=item XML charref mode (I<CHECK> = Encode::FB_XMLCREF)\n\n=back\n\nFor encodings that are implemented by the C<Encode::XS> module, C<CHECK> C<==>\nC<Encode::FB_PERLQQ> puts C<encode> and C<decode> into C<perlqq> fallback mode.\n\nWhen you decode, C<\\xI<HH>> is inserted for a malformed character, where\nI<HH> is the hex representation of the octet that could not be decoded to\nutf8.  When you encode, C<\\x{I<HHHH>}> will be inserted, where I<HHHH> is\nthe Unicode code point (in any number of hex digits) of the character that\ncannot be found in the character repertoire of the encoding.\n\nThe HTML/XML character reference modes are about the same. In place of\nC<\\x{I<HHHH>}>, HTML uses C<&#I<NNN>;> where I<NNN> is a decimal number, and\nXML uses C<&#xI<HHHH>;> where I<HHHH> is the hexadecimal number.\n\nIn C<Encode> 2.10 or later, C<LEAVE_SRC> is also implied.\n\n=head3 The bitmask\n\nThese modes are all actually set via a bitmask.  Here is how the C<FB_I<XXX>>\nconstants are laid out.  You can import the C<FB_I<XXX>> constants via\nC<use Encode qw(:fallbacks)>, and you can import the generic bitmask\nconstants via C<use Encode qw(:fallback_all)>.\n\n                     FB_DEFAULT FB_CROAK FB_QUIET FB_WARN  FB_PERLQQ\n DIE_ON_ERR    0x0001             X\n WARN_ON_ERR   0x0002                               X\n RETURN_ON_ERR 0x0004                      X        X\n LEAVE_SRC     0x0008                                        X\n PERLQQ        0x0100                                        X\n HTMLCREF      0x0200\n XMLCREF       0x0400\n\n=head3 LEAVE_SRC\n\n  Encode::LEAVE_SRC\n\nIf the C<Encode::LEAVE_SRC> bit is I<not> set but I<CHECK> is set, then the\nsource string to encode() or decode() will be overwritten in place.\nIf you're not interested in this, then bitwise-OR it with the bitmask.\n\n=head2 coderef for CHECK\n\nAs of C<Encode> 2.12, C<CHECK> can also be a code reference which takes the\nordinal value of the unmapped character as an argument and returns\noctets that represent the fallback character.  For instance:\n\n  $ascii = encode(\"ascii\", $utf8, sub{ sprintf \"<U+%04X>\", shift });\n\nActs like C<FB_PERLQQ> but U+I<XXXX> is used instead of C<\\x{I<XXXX>}>.\n\nFallback for C<decode> must return decoded string (sequence of characters)\nand takes a list of ordinal values as its arguments. So for\nexample if you wish to decode octets as UTF-8, and use ISO-8859-15 as\na fallback for bytes that are not valid UTF-8, you could write\n\n    $str = decode 'UTF-8', $octets, sub {\n        my $tmp = join '', map chr, @_;\n        return decode 'ISO-8859-15', $tmp;\n    };\n\n=head1 Defining Encodings\n\nTo define a new encoding, use:\n\n    use Encode qw(define_encoding);\n    define_encoding($object, CANONICAL_NAME [, alias...]);\n\nI<CANONICAL_NAME> will be associated with I<$object>.  The object\nshould provide the interface described in L<Encode::Encoding>.\nIf more than two arguments are provided, additional\narguments are considered aliases for I<$object>.\n\nSee L<Encode::Encoding> for details.\n\n=head1 The UTF8 flag\n\nBefore the introduction of Unicode support in Perl, The C<eq> operator\njust compared the strings represented by two scalars. Beginning with\nPerl 5.8, C<eq> compares two strings with simultaneous consideration of\nI<the UTF8 flag>. To explain why we made it so, I quote from page 402 of\nI<Programming Perl, 3rd ed.>\n\n=over 2\n\n=item Goal #1:\n\nOld byte-oriented programs should not spontaneously break on the old\nbyte-oriented data they used to work on.\n\n=item Goal #2:\n\nOld byte-oriented programs should magically start working on the new\ncharacter-oriented data when appropriate.\n\n=item Goal #3:\n\nPrograms should run just as fast in the new character-oriented mode\nas in the old byte-oriented mode.\n\n=item Goal #4:\n\nPerl should remain one language, rather than forking into a\nbyte-oriented Perl and a character-oriented Perl.\n\n=back\n\nWhen I<Programming Perl, 3rd ed.> was written, not even Perl 5.6.0 had been\nborn yet, many features documented in the book remained unimplemented for a\nlong time.  Perl 5.8 corrected much of this, and the introduction of the\nUTF8 flag is one of them.  You can think of there being two fundamentally\ndifferent kinds of strings and string-operations in Perl: one a\nbyte-oriented mode  for when the internal UTF8 flag is off, and the other a\ncharacter-oriented mode for when the internal UTF8 flag is on.\n\nThis UTF8 flag is not visible in Perl scripts, exactly for the same reason\nyou cannot (or rather, you I<don't have to>) see whether a scalar contains\na string, an integer, or a floating-point number.   But you can still peek\nand poke these if you will.  See the next section.\n\n=head2 Messing with Perl's Internals\n\nThe following API uses parts of Perl's internals in the current\nimplementation.  As such, they are efficient but may change in a future\nrelease.\n\n=head3 is_utf8\n\n  is_utf8(STRING [, CHECK])\n\n[INTERNAL] Tests whether the UTF8 flag is turned on in the I<STRING>.\nIf I<CHECK> is true, also checks whether I<STRING> contains well-formed\nUTF-8.  Returns true if successful, false otherwise.\n\nTypically only necessary for debugging and testing.  Don't use this flag as\na marker to distinguish character and binary data, that should be decided\nfor each variable when you write your code.\n\nB<CAVEAT>: If I<STRING> has UTF8 flag set, it does B<NOT> mean that\nI<STRING> is UTF-8 encoded and vice-versa.\n\nAs of Perl 5.8.1, L<utf8> also has the C<utf8::is_utf8> function.\n\n=head3 _utf8_on\n\n  _utf8_on(STRING)\n\n[INTERNAL] Turns the I<STRING>'s internal UTF8 flag B<on>.  The I<STRING>\nis I<not> checked for containing only well-formed UTF-8.  Do not use this\nunless you I<know with absolute certainty> that the STRING holds only\nwell-formed UTF-8.  Returns the previous state of the UTF8 flag (so please\ndon't treat the return value as indicating success or failure), or C<undef>\nif I<STRING> is not a string.\n\nB<NOTE>: For security reasons, this function does not work on tainted values.\n\n=head3 _utf8_off\n\n  _utf8_off(STRING)\n\n[INTERNAL] Turns the I<STRING>'s internal UTF8 flag B<off>.  Do not use\nfrivolously.  Returns the previous state of the UTF8 flag, or C<undef> if\nI<STRING> is not a string.  Do not treat the return value as indicative of\nsuccess or failure, because that isn't what it means: it is only the\nprevious setting.\n\nB<NOTE>: For security reasons, this function does not work on tainted values.\n\n=head1 UTF-8 vs. utf8 vs. UTF8\n\n  ....We now view strings not as sequences of bytes, but as sequences\n  of numbers in the range 0 .. 2**32-1 (or in the case of 64-bit\n  computers, 0 .. 2**64-1) -- Programming Perl, 3rd ed.\n\nThat has historically been Perl's notion of UTF-8, as that is how UTF-8 was\nfirst conceived by Ken Thompson when he invented it. However, thanks to\nlater revisions to the applicable standards, official UTF-8 is now rather\nstricter than that. For example, its range is much narrower (0 .. 0x10_FFFF\nto cover only 21 bits instead of 32 or 64 bits) and some sequences\nare not allowed, like those used in surrogate pairs, the 31 non-character\ncode points 0xFDD0 .. 0xFDEF, the last two code points in I<any> plane\n(0xI<XX>_FFFE and 0xI<XX>_FFFF), all non-shortest encodings, etc.\n\nThe former default in which Perl would always use a loose interpretation of\nUTF-8 has now been overruled:\n\n  From: Larry Wall <larry@wall.org>\n  Date: December 04, 2004 11:51:58 JST\n  To: perl-unicode@perl.org\n  Subject: Re: Make Encode.pm support the real UTF-8\n  Message-Id: <20041204025158.GA28754@wall.org>\n\n  On Fri, Dec 03, 2004 at 10:12:12PM +0000, Tim Bunce wrote:\n  : I've no problem with 'utf8' being perl's unrestricted uft8 encoding,\n  : but \"UTF-8\" is the name of the standard and should give the\n  : corresponding behaviour.\n\n  For what it's worth, that's how I've always kept them straight in my\n  head.\n\n  Also for what it's worth, Perl 6 will mostly default to strict but\n  make it easy to switch back to lax.\n\n  Larry\n\nGot that?  As of Perl 5.8.7, B<\"UTF-8\"> means UTF-8 in its current\nsense, which is conservative and strict and security-conscious, whereas\nB<\"utf8\"> means UTF-8 in its former sense, which was liberal and loose and\nlax.  C<Encode> version 2.10 or later thus groks this subtle but critically\nimportant distinction between C<\"UTF-8\"> and C<\"utf8\">.\n\n  encode(\"utf8\",  \"\\x{FFFF_FFFF}\", 1); # okay\n  encode(\"UTF-8\", \"\\x{FFFF_FFFF}\", 1); # croaks\n\nThis distinction is also important for decoding. In the following,\nC<$s> stores character U+200000, which exceeds UTF-8's allowed range.\nC<$s> thus stores an invalid Unicode code point:\n\n  $s = decode(\"utf8\", \"\\xf8\\x88\\x80\\x80\\x80\");\n\nC<\"UTF-8\">, by contrast, will either coerce the input to something valid:\n\n    $s = decode(\"UTF-8\", \"\\xf8\\x88\\x80\\x80\\x80\"); # U+FFFD\n\n.. or croak:\n\n    decode(\"UTF-8\", \"\\xf8\\x88\\x80\\x80\\x80\", FB_CROAK|LEAVE_SRC);\n\nIn the C<Encode> module, C<\"UTF-8\"> is actually a canonical name for\nC<\"utf-8-strict\">.  That hyphen between the C<\"UTF\"> and the C<\"8\"> is\ncritical; without it, C<Encode> goes \"liberal\" and (perhaps overly-)permissive:\n\n  find_encoding(\"UTF-8\")->name # is 'utf-8-strict'\n  find_encoding(\"utf-8\")->name # ditto. names are case insensitive\n  find_encoding(\"utf_8\")->name # ditto. \"_\" are treated as \"-\"\n  find_encoding(\"UTF8\")->name  # is 'utf8'.\n\nPerl's internal UTF8 flag is called \"UTF8\", without a hyphen. It indicates\nwhether a string is internally encoded as \"utf8\", also without a hyphen.\n\n=head1 SEE ALSO\n\nL<Encode::Encoding>,\nL<Encode::Supported>,\nL<Encode::PerlIO>,\nL<encoding>,\nL<perlebcdic>,\nL<perlfunc/open>,\nL<perlunicode>, L<perluniintro>, L<perlunifaq>, L<perlunitut>\nL<utf8>,\nthe Perl Unicode Mailing List L<http://lists.perl.org/list/perl-unicode.html>\n\n=head1 MAINTAINER\n\nThis project was originated by the late Nick Ing-Simmons and later\nmaintained by Dan Kogai I<< <dankogai@cpan.org> >>.  See AUTHORS\nfor a full list of people involved.  For any questions, send mail to\nI<< <perl-unicode@perl.org> >> so that we can all share.\n\nWhile Dan Kogai retains the copyright as a maintainer, credit\nshould go to all those involved.  See AUTHORS for a list of those\nwho submitted code to the project.\n\n=head1 COPYRIGHT\n\nCopyright 2002-2014 Dan Kogai I<< <dankogai@cpan.org> >>.\n\nThis library is free software; you can redistribute it and/or modify\nit under the same terms as Perl itself.\n\n=cut\n"], "fixing_code": ["#\n# $Id: Encode.pm,v 3.10 2021/05/18 07:42:45 dankogai Exp dankogai $\n#\npackage Encode;\nuse strict;\nuse warnings;\nuse constant DEBUG => !!$ENV{PERL_ENCODE_DEBUG};\nour $VERSION;\nBEGIN {\n    $VERSION = \"3.10_01\";\n    $VERSION = eval $VERSION;\n    require XSLoader;\n    XSLoader::load( __PACKAGE__, $VERSION );\n}\n\nuse Exporter 5.57 'import';\n\nuse Carp ();\nour @CARP_NOT = qw(Encode::Encoder);\n\n# Public, encouraged API is exported by default\n\nour @EXPORT = qw(\n  decode  decode_utf8  encode  encode_utf8 str2bytes bytes2str\n  encodings  find_encoding find_mime_encoding clone_encoding\n);\nour @FB_FLAGS = qw(\n  DIE_ON_ERR WARN_ON_ERR RETURN_ON_ERR LEAVE_SRC\n  PERLQQ HTMLCREF XMLCREF STOP_AT_PARTIAL\n);\nour @FB_CONSTS = qw(\n  FB_DEFAULT FB_CROAK FB_QUIET FB_WARN\n  FB_PERLQQ FB_HTMLCREF FB_XMLCREF\n);\nour @EXPORT_OK = (\n    qw(\n      _utf8_off _utf8_on define_encoding from_to is_16bit is_8bit\n      is_utf8 perlio_ok resolve_alias utf8_downgrade utf8_upgrade\n      ),\n    @FB_FLAGS, @FB_CONSTS,\n);\n\nour %EXPORT_TAGS = (\n    all          => [ @EXPORT,    @EXPORT_OK ],\n    default      => [ @EXPORT ],\n    fallbacks    => [ @FB_CONSTS ],\n    fallback_all => [ @FB_CONSTS, @FB_FLAGS ],\n);\n\n# Documentation moved after __END__ for speed - NI-S\n\nour $ON_EBCDIC = ( ord(\"A\") == 193 );\n\nuse Encode::Alias ();\nuse Encode::MIME::Name;\n\nuse Storable;\n\n# Make a %Encoding package variable to allow a certain amount of cheating\nour %Encoding;\nour %ExtModule;\nrequire Encode::Config;\n#  See\n#  https://bugzilla.redhat.com/show_bug.cgi?id=435505#c2\n#  to find why sig handlers inside eval{} are disabled.\neval {\n    local $SIG{__DIE__};\n    local $SIG{__WARN__};\n    local @INC = @INC;\n    pop @INC if @INC && $INC[-1] eq '.';\n    require Encode::ConfigLocal;\n};\n\nsub encodings {\n    my %enc;\n    my $arg  = $_[1] || '';\n    if ( $arg eq \":all\" ) {\n        %enc = ( %Encoding, %ExtModule );\n    }\n    else {\n        %enc = %Encoding;\n        for my $mod ( map { m/::/ ? $_ : \"Encode::$_\" } @_ ) {\n            DEBUG and warn $mod;\n            for my $enc ( keys %ExtModule ) {\n                $ExtModule{$enc} eq $mod and $enc{$enc} = $mod;\n            }\n        }\n    }\n    return sort { lc $a cmp lc $b }\n      grep      { !/^(?:Internal|Unicode|Guess)$/o } keys %enc;\n}\n\nsub perlio_ok {\n    my $obj = ref( $_[0] ) ? $_[0] : find_encoding( $_[0] );\n    $obj->can(\"perlio_ok\") and return $obj->perlio_ok();\n    return 0;    # safety net\n}\n\nsub define_encoding {\n    my $obj  = shift;\n    my $name = shift;\n    $Encoding{$name} = $obj;\n    my $lc = lc($name);\n    define_alias( $lc => $obj ) unless $lc eq $name;\n    while (@_) {\n        my $alias = shift;\n        define_alias( $alias, $obj );\n    }\n    my $class = ref($obj);\n    push @Encode::CARP_NOT, $class unless grep { $_ eq $class } @Encode::CARP_NOT;\n    push @Encode::Encoding::CARP_NOT, $class unless grep { $_ eq $class } @Encode::Encoding::CARP_NOT;\n    return $obj;\n}\n\nsub getEncoding {\n    my ( $class, $name, $skip_external ) = @_;\n\n    defined($name) or return;\n\n    $name =~ s/\\s+//g; # https://rt.cpan.org/Ticket/Display.html?id=65796\n\n    ref($name) && $name->can('renew') and return $name;\n    exists $Encoding{$name} and return $Encoding{$name};\n    my $lc = lc $name;\n    exists $Encoding{$lc} and return $Encoding{$lc};\n\n    my $oc = $class->find_alias($name);\n    defined($oc) and return $oc;\n    $lc ne $name and $oc = $class->find_alias($lc);\n    defined($oc) and return $oc;\n\n    unless ($skip_external) {\n        if ( my $mod = $ExtModule{$name} || $ExtModule{$lc} ) {\n            $mod =~ s,::,/,g;\n            $mod .= '.pm';\n            eval { require $mod; };\n            exists $Encoding{$name} and return $Encoding{$name};\n        }\n    }\n    return;\n}\n\n# HACK: These two functions must be defined in Encode and because of\n# cyclic dependency between Encode and Encode::Alias, Exporter does not work\nsub find_alias {\n    goto &Encode::Alias::find_alias;\n}\nsub define_alias {\n    goto &Encode::Alias::define_alias;\n}\n\nsub find_encoding($;$) {\n    my ( $name, $skip_external ) = @_;\n    return __PACKAGE__->getEncoding( $name, $skip_external );\n}\n\nsub find_mime_encoding($;$) {\n    my ( $mime_name, $skip_external ) = @_;\n    my $name = Encode::MIME::Name::get_encode_name( $mime_name );\n    return find_encoding( $name, $skip_external );\n}\n\nsub resolve_alias($) {\n    my $obj = find_encoding(shift);\n    defined $obj and return $obj->name;\n    return;\n}\n\nsub clone_encoding($) {\n    my $obj = find_encoding(shift);\n    ref $obj or return;\n    return Storable::dclone($obj);\n}\n\nonBOOT;\n\nif ($ON_EBCDIC) {\n    package Encode::UTF_EBCDIC;\n    use parent 'Encode::Encoding';\n    my $obj = bless { Name => \"UTF_EBCDIC\" } => \"Encode::UTF_EBCDIC\";\n    Encode::define_encoding($obj, 'Unicode');\n    sub decode {\n        my ( undef, $str, $chk ) = @_;\n        my $res = '';\n        for ( my $i = 0 ; $i < length($str) ; $i++ ) {\n            $res .=\n              chr(\n                utf8::unicode_to_native( ord( substr( $str, $i, 1 ) ) )\n              );\n        }\n        $_[1] = '' if $chk;\n        return $res;\n    }\n    sub encode {\n        my ( undef, $str, $chk ) = @_;\n        my $res = '';\n        for ( my $i = 0 ; $i < length($str) ; $i++ ) {\n            $res .=\n              chr(\n                utf8::native_to_unicode( ord( substr( $str, $i, 1 ) ) )\n              );\n        }\n        $_[1] = '' if $chk;\n        return $res;\n    }\n}\n\n{\n    # https://rt.cpan.org/Public/Bug/Display.html?id=103253\n    package Encode::XS;\n    use parent 'Encode::Encoding';\n}\n\n{\n    package Encode::utf8;\n    use parent 'Encode::Encoding';\n    my %obj = (\n        'utf8'         => { Name => 'utf8' },\n        'utf-8-strict' => { Name => 'utf-8-strict', strict_utf8 => 1 }\n    );\n    for ( keys %obj ) {\n        bless $obj{$_} => __PACKAGE__;\n        Encode::define_encoding( $obj{$_} => $_ );\n    }\n    sub cat_decode {\n        # ($obj, $dst, $src, $pos, $trm, $chk)\n        # currently ignores $chk\n        my ( undef, undef, undef, $pos, $trm ) = @_;\n        my ( $rdst, $rsrc, $rpos ) = \\@_[ 1, 2, 3 ];\n        use bytes;\n        if ( ( my $npos = index( $$rsrc, $trm, $pos ) ) >= 0 ) {\n            $$rdst .=\n              substr( $$rsrc, $pos, $npos - $pos + length($trm) );\n            $$rpos = $npos + length($trm);\n            return 1;\n        }\n        $$rdst .= substr( $$rsrc, $pos );\n        $$rpos = length($$rsrc);\n        return '';\n    }\n}\n\n1;\n\n__END__\n\n=head1 NAME\n\nEncode - character encodings in Perl\n\n=head1 SYNOPSIS\n\n    use Encode qw(decode encode);\n    $characters = decode('UTF-8', $octets,     Encode::FB_CROAK);\n    $octets     = encode('UTF-8', $characters, Encode::FB_CROAK);\n\n=head2 Table of Contents\n\nEncode consists of a collection of modules whose details are too extensive\nto fit in one document.  This one itself explains the top-level APIs\nand general topics at a glance.  For other topics and more details,\nsee the documentation for these modules:\n\n=over 2\n\n=item L<Encode::Alias> - Alias definitions to encodings\n\n=item L<Encode::Encoding> - Encode Implementation Base Class\n\n=item L<Encode::Supported> - List of Supported Encodings\n\n=item L<Encode::CN> - Simplified Chinese Encodings\n\n=item L<Encode::JP> - Japanese Encodings\n\n=item L<Encode::KR> - Korean Encodings\n\n=item L<Encode::TW> - Traditional Chinese Encodings\n\n=back\n\n=head1 DESCRIPTION\n\nThe C<Encode> module provides the interface between Perl strings\nand the rest of the system.  Perl strings are sequences of\nI<characters>.\n\nThe repertoire of characters that Perl can represent is a superset of those\ndefined by the Unicode Consortium. On most platforms the ordinal\nvalues of a character as returned by C<ord(I<S>)> is the I<Unicode\ncodepoint> for that character. The exceptions are platforms where\nthe legacy encoding is some variant of EBCDIC rather than a superset\nof ASCII; see L<perlebcdic>.\n\nDuring recent history, data is moved around a computer in 8-bit chunks,\noften called \"bytes\" but also known as \"octets\" in standards documents.\nPerl is widely used to manipulate data of many types: not only strings of\ncharacters representing human or computer languages, but also \"binary\"\ndata, being the machine's representation of numbers, pixels in an image, or\njust about anything.\n\nWhen Perl is processing \"binary data\", the programmer wants Perl to\nprocess \"sequences of bytes\". This is not a problem for Perl: because a\nbyte has 256 possible values, it easily fits in Perl's much larger\n\"logical character\".\n\nThis document mostly explains the I<how>. L<perlunitut> and L<perlunifaq>\nexplain the I<why>.\n\n=head2 TERMINOLOGY\n\n=head3 character\n\nA character in the range 0 .. 2**32-1 (or more);\nwhat Perl's strings are made of.\n\n=head3 byte\n\nA character in the range 0..255;\na special case of a Perl character.\n\n=head3 octet\n\n8 bits of data, with ordinal values 0..255;\nterm for bytes passed to or from a non-Perl context, such as a disk file,\nstandard I/O stream, database, command-line argument, environment variable,\nsocket etc.\n\n=head1 THE PERL ENCODING API\n\n=head2 Basic methods\n\n=head3 encode\n\n  $octets  = encode(ENCODING, STRING[, CHECK])\n\nEncodes the scalar value I<STRING> from Perl's internal form into\nI<ENCODING> and returns a sequence of octets.  I<ENCODING> can be either a\ncanonical name or an alias.  For encoding names and aliases, see\nL</\"Defining Aliases\">.  For CHECK, see L</\"Handling Malformed Data\">.\n\nB<CAVEAT>: the input scalar I<STRING> might be modified in-place depending\non what is set in CHECK. See L</LEAVE_SRC> if you want your inputs to be\nleft unchanged.\n\nFor example, to convert a string from Perl's internal format into\nISO-8859-1, also known as Latin1:\n\n  $octets = encode(\"iso-8859-1\", $string);\n\nB<CAVEAT>: When you run C<$octets = encode(\"UTF-8\", $string)>, then\n$octets I<might not be equal to> $string.  Though both contain the\nsame data, the UTF8 flag for $octets is I<always> off.  When you\nencode anything, the UTF8 flag on the result is always off, even when it\ncontains a completely valid UTF-8 string. See L</\"The UTF8 flag\"> below.\n\nIf the $string is C<undef>, then C<undef> is returned.\n\nC<str2bytes> may be used as an alias for C<encode>.\n\n=head3 decode\n\n  $string = decode(ENCODING, OCTETS[, CHECK])\n\nThis function returns the string that results from decoding the scalar\nvalue I<OCTETS>, assumed to be a sequence of octets in I<ENCODING>, into\nPerl's internal form.  As with encode(),\nI<ENCODING> can be either a canonical name or an alias. For encoding names\nand aliases, see L</\"Defining Aliases\">; for I<CHECK>, see L</\"Handling\nMalformed Data\">.\n\nB<CAVEAT>: the input scalar I<OCTETS> might be modified in-place depending\non what is set in CHECK. See L</LEAVE_SRC> if you want your inputs to be\nleft unchanged.\n\nFor example, to convert ISO-8859-1 data into a string in Perl's\ninternal format:\n\n  $string = decode(\"iso-8859-1\", $octets);\n\nB<CAVEAT>: When you run C<$string = decode(\"UTF-8\", $octets)>, then $string\nI<might not be equal to> $octets.  Though both contain the same data, the\nUTF8 flag for $string is on.  See L</\"The UTF8 flag\">\nbelow.\n\nIf the $string is C<undef>, then C<undef> is returned.\n\nC<bytes2str> may be used as an alias for C<decode>.\n\n=head3 find_encoding\n\n  [$obj =] find_encoding(ENCODING)\n\nReturns the I<encoding object> corresponding to I<ENCODING>.  Returns\nC<undef> if no matching I<ENCODING> is find.  The returned object is\nwhat does the actual encoding or decoding.\n\n  $string = decode($name, $bytes);\n\nis in fact\n\n    $string = do {\n        $obj = find_encoding($name);\n        croak qq(encoding \"$name\" not found) unless ref $obj;\n        $obj->decode($bytes);\n    };\n\nwith more error checking.\n\nYou can therefore save time by reusing this object as follows;\n\n    my $enc = find_encoding(\"iso-8859-1\");\n    while(<>) {\n        my $string = $enc->decode($_);\n        ... # now do something with $string;\n    }\n\nBesides L</decode> and L</encode>, other methods are\navailable as well.  For instance, C<name()> returns the canonical\nname of the encoding object.\n\n  find_encoding(\"latin1\")->name; # iso-8859-1\n\nSee L<Encode::Encoding> for details.\n\n=head3 find_mime_encoding\n\n  [$obj =] find_mime_encoding(MIME_ENCODING)\n\nReturns the I<encoding object> corresponding to I<MIME_ENCODING>.  Acts\nsame as C<find_encoding()> but C<mime_name()> of returned object must\nmatch to I<MIME_ENCODING>.  So as opposite of C<find_encoding()>\ncanonical names and aliases are not used when searching for object.\n\n    find_mime_encoding(\"utf8\"); # returns undef because \"utf8\" is not valid I<MIME_ENCODING>\n    find_mime_encoding(\"utf-8\"); # returns encode object \"utf-8-strict\"\n    find_mime_encoding(\"UTF-8\"); # same as \"utf-8\" because I<MIME_ENCODING> is case insensitive\n    find_mime_encoding(\"utf-8-strict\"); returns undef because \"utf-8-strict\" is not valid I<MIME_ENCODING>\n\n=head3 from_to\n\n  [$length =] from_to($octets, FROM_ENC, TO_ENC [, CHECK])\n\nConverts I<in-place> data between two encodings. The data in $octets\nmust be encoded as octets and I<not> as characters in Perl's internal\nformat. For example, to convert ISO-8859-1 data into Microsoft's CP1250\nencoding:\n\n  from_to($octets, \"iso-8859-1\", \"cp1250\");\n\nand to convert it back:\n\n  from_to($octets, \"cp1250\", \"iso-8859-1\");\n\nBecause the conversion happens in place, the data to be\nconverted cannot be a string constant: it must be a scalar variable.\n\nC<from_to()> returns the length of the converted string in octets on success,\nand C<undef> on error.\n\nB<CAVEAT>: The following operations may look the same, but are not:\n\n  from_to($data, \"iso-8859-1\", \"UTF-8\"); #1\n  $data = decode(\"iso-8859-1\", $data);  #2\n\nBoth #1 and #2 make $data consist of a completely valid UTF-8 string,\nbut only #2 turns the UTF8 flag on.  #1 is equivalent to:\n\n  $data = encode(\"UTF-8\", decode(\"iso-8859-1\", $data));\n\nSee L</\"The UTF8 flag\"> below.\n\nAlso note that:\n\n  from_to($octets, $from, $to, $check);\n\nis equivalent to:\n\n  $octets = encode($to, decode($from, $octets), $check);\n\nYes, it does I<not> respect the $check during decoding.  It is\ndeliberately done that way.  If you need minute control, use C<decode>\nfollowed by C<encode> as follows:\n\n  $octets = encode($to, decode($from, $octets, $check_from), $check_to);\n\n=head3 encode_utf8\n\n  $octets = encode_utf8($string);\n\nB<WARNING>: L<This function can produce invalid UTF-8!|/UTF-8 vs. utf8 vs. UTF8>\nDo not use it for data exchange.\nUnless you want Perl's older \"lax\" mode, prefer\nC<$octets = encode(\"UTF-8\", $string)>.\n\nEquivalent to C<$octets = encode(\"utf8\", $string)>.  The characters in\n$string are encoded in Perl's internal format, and the result is returned\nas a sequence of octets.  Because all possible characters in Perl have a\n(loose, not strict) utf8 representation, this function cannot fail.\n\n=head3 decode_utf8\n\n  $string = decode_utf8($octets [, CHECK]);\n\nB<WARNING>: L<This function accepts invalid UTF-8!|/UTF-8 vs. utf8 vs. UTF8>\nDo not use it for data exchange.\nUnless you want Perl's older \"lax\" mode, prefer\nC<$string = decode(\"UTF-8\", $octets [, CHECK])>.\n\nEquivalent to C<$string = decode(\"utf8\", $octets [, CHECK])>.\nThe sequence of octets represented by $octets is decoded\nfrom (loose, not strict) utf8 into a sequence of logical characters.\nBecause not all sequences of octets are valid not strict utf8,\nit is quite possible for this function to fail.\nFor CHECK, see L</\"Handling Malformed Data\">.\n\nB<CAVEAT>: the input I<$octets> might be modified in-place depending on\nwhat is set in CHECK. See L</LEAVE_SRC> if you want your inputs to be\nleft unchanged.\n\n=head2 Listing available encodings\n\n  use Encode;\n  @list = Encode->encodings();\n\nReturns a list of canonical names of available encodings that have already\nbeen loaded.  To get a list of all available encodings including those that\nhave not yet been loaded, say:\n\n  @all_encodings = Encode->encodings(\":all\");\n\nOr you can give the name of a specific module:\n\n  @with_jp = Encode->encodings(\"Encode::JP\");\n\nWhen \"C<::>\" is not in the name, \"C<Encode::>\" is assumed.\n\n  @ebcdic = Encode->encodings(\"EBCDIC\");\n\nTo find out in detail which encodings are supported by this package,\nsee L<Encode::Supported>.\n\n=head2 Defining Aliases\n\nTo add a new alias to a given encoding, use:\n\n  use Encode;\n  use Encode::Alias;\n  define_alias(NEWNAME => ENCODING);\n\nAfter that, I<NEWNAME> can be used as an alias for I<ENCODING>.\nI<ENCODING> may be either the name of an encoding or an\nI<encoding object>.\n\nBefore you do that, first make sure the alias is nonexistent using\nC<resolve_alias()>, which returns the canonical name thereof.\nFor example:\n\n  Encode::resolve_alias(\"latin1\") eq \"iso-8859-1\" # true\n  Encode::resolve_alias(\"iso-8859-12\")   # false; nonexistent\n  Encode::resolve_alias($name) eq $name  # true if $name is canonical\n\nC<resolve_alias()> does not need C<use Encode::Alias>; it can be\nimported via C<use Encode qw(resolve_alias)>.\n\nSee L<Encode::Alias> for details.\n\n=head2 Finding IANA Character Set Registry names\n\nThe canonical name of a given encoding does not necessarily agree with\nIANA Character Set Registry, commonly seen as C<< Content-Type:\ntext/plain; charset=I<WHATEVER> >>.  For most cases, the canonical name\nworks, but sometimes it does not, most notably with \"utf-8-strict\".\n\nAs of C<Encode> version 2.21, a new method C<mime_name()> is therefore added.\n\n  use Encode;\n  my $enc = find_encoding(\"UTF-8\");\n  warn $enc->name;      # utf-8-strict\n  warn $enc->mime_name; # UTF-8\n\nSee also:  L<Encode::Encoding>\n\n=head1 Encoding via PerlIO\n\nIf your perl supports C<PerlIO> (which is the default), you can use a\nC<PerlIO> layer to decode and encode directly via a filehandle.  The\nfollowing two examples are fully identical in functionality:\n\n  ### Version 1 via PerlIO\n    open(INPUT,  \"< :encoding(shiftjis)\", $infile)\n        || die \"Can't open < $infile for reading: $!\";\n    open(OUTPUT, \"> :encoding(euc-jp)\",  $outfile)\n        || die \"Can't open > $output for writing: $!\";\n    while (<INPUT>) {   # auto decodes $_\n        print OUTPUT;   # auto encodes $_\n    }\n    close(INPUT)   || die \"can't close $infile: $!\";\n    close(OUTPUT)  || die \"can't close $outfile: $!\";\n\n  ### Version 2 via from_to()\n    open(INPUT,  \"< :raw\", $infile)\n        || die \"Can't open < $infile for reading: $!\";\n    open(OUTPUT, \"> :raw\",  $outfile)\n        || die \"Can't open > $output for writing: $!\";\n\n    while (<INPUT>) {\n        from_to($_, \"shiftjis\", \"euc-jp\", 1);  # switch encoding\n        print OUTPUT;   # emit raw (but properly encoded) data\n    }\n    close(INPUT)   || die \"can't close $infile: $!\";\n    close(OUTPUT)  || die \"can't close $outfile: $!\";\n\nIn the first version above, you let the appropriate encoding layer\nhandle the conversion.  In the second, you explicitly translate\nfrom one encoding to the other.\n\nUnfortunately, it may be that encodings are not C<PerlIO>-savvy.  You can check\nto see whether your encoding is supported by C<PerlIO> by invoking the\nC<perlio_ok> method on it:\n\n  Encode::perlio_ok(\"hz\");             # false\n  find_encoding(\"euc-cn\")->perlio_ok;  # true wherever PerlIO is available\n\n  use Encode qw(perlio_ok);            # imported upon request\n  perlio_ok(\"euc-jp\")\n\nFortunately, all encodings that come with C<Encode> core are C<PerlIO>-savvy\nexcept for C<hz> and C<ISO-2022-kr>.  For the gory details, see\nL<Encode::Encoding> and L<Encode::PerlIO>.\n\n=head1 Handling Malformed Data\n\nThe optional I<CHECK> argument tells C<Encode> what to do when\nencountering malformed data.  Without I<CHECK>, C<Encode::FB_DEFAULT>\n(== 0) is assumed.\n\nAs of version 2.12, C<Encode> supports coderef values for C<CHECK>;\nsee below.\n\nB<NOTE:> Not all encodings support this feature.\nSome encodings ignore the I<CHECK> argument.  For example,\nL<Encode::Unicode> ignores I<CHECK> and it always croaks on error.\n\n=head2 List of I<CHECK> values\n\n=head3 FB_DEFAULT\n\n  I<CHECK> = Encode::FB_DEFAULT ( == 0)\n\nIf I<CHECK> is 0, encoding and decoding replace any malformed character\nwith a I<substitution character>.  When you encode, I<SUBCHAR> is used.\nWhen you decode, the Unicode REPLACEMENT CHARACTER, code point U+FFFD, is\nused.  If the data is supposed to be UTF-8, an optional lexical warning of\nwarning category C<\"utf8\"> is given.\n\n=head3 FB_CROAK\n\n  I<CHECK> = Encode::FB_CROAK ( == 1)\n\nIf I<CHECK> is 1, methods immediately die with an error\nmessage.  Therefore, when I<CHECK> is 1, you should trap\nexceptions with C<eval{}>, unless you really want to let it C<die>.\n\n=head3 FB_QUIET\n\n  I<CHECK> = Encode::FB_QUIET\n\nIf I<CHECK> is set to C<Encode::FB_QUIET>, encoding and decoding immediately\nreturn the portion of the data that has been processed so far when an\nerror occurs. The data argument is overwritten with everything\nafter that point; that is, the unprocessed portion of the data.  This is\nhandy when you have to call C<decode> repeatedly in the case where your\nsource data may contain partial multi-byte character sequences,\n(that is, you are reading with a fixed-width buffer). Here's some sample\ncode to do exactly that:\n\n    my($buffer, $string) = (\"\", \"\");\n    while (read($fh, $buffer, 256, length($buffer))) {\n        $string .= decode($encoding, $buffer, Encode::FB_QUIET);\n        # $buffer now contains the unprocessed partial character\n    }\n\n=head3 FB_WARN\n\n  I<CHECK> = Encode::FB_WARN\n\nThis is the same as C<FB_QUIET> above, except that instead of being silent\non errors, it issues a warning.  This is handy for when you are debugging.\n\nB<CAVEAT>: All warnings from Encode module are reported, independently of\nL<pragma warnings|warnings> settings. If you want to follow settings of\nlexical warnings configured by L<pragma warnings|warnings> then append\nalso check value C<ENCODE::ONLY_PRAGMA_WARNINGS>. This value is available\nsince Encode version 2.99.\n\n=head3 FB_PERLQQ FB_HTMLCREF FB_XMLCREF\n\n=over 2\n\n=item perlqq mode (I<CHECK> = Encode::FB_PERLQQ)\n\n=item HTML charref mode (I<CHECK> = Encode::FB_HTMLCREF)\n\n=item XML charref mode (I<CHECK> = Encode::FB_XMLCREF)\n\n=back\n\nFor encodings that are implemented by the C<Encode::XS> module, C<CHECK> C<==>\nC<Encode::FB_PERLQQ> puts C<encode> and C<decode> into C<perlqq> fallback mode.\n\nWhen you decode, C<\\xI<HH>> is inserted for a malformed character, where\nI<HH> is the hex representation of the octet that could not be decoded to\nutf8.  When you encode, C<\\x{I<HHHH>}> will be inserted, where I<HHHH> is\nthe Unicode code point (in any number of hex digits) of the character that\ncannot be found in the character repertoire of the encoding.\n\nThe HTML/XML character reference modes are about the same. In place of\nC<\\x{I<HHHH>}>, HTML uses C<&#I<NNN>;> where I<NNN> is a decimal number, and\nXML uses C<&#xI<HHHH>;> where I<HHHH> is the hexadecimal number.\n\nIn C<Encode> 2.10 or later, C<LEAVE_SRC> is also implied.\n\n=head3 The bitmask\n\nThese modes are all actually set via a bitmask.  Here is how the C<FB_I<XXX>>\nconstants are laid out.  You can import the C<FB_I<XXX>> constants via\nC<use Encode qw(:fallbacks)>, and you can import the generic bitmask\nconstants via C<use Encode qw(:fallback_all)>.\n\n                     FB_DEFAULT FB_CROAK FB_QUIET FB_WARN  FB_PERLQQ\n DIE_ON_ERR    0x0001             X\n WARN_ON_ERR   0x0002                               X\n RETURN_ON_ERR 0x0004                      X        X\n LEAVE_SRC     0x0008                                        X\n PERLQQ        0x0100                                        X\n HTMLCREF      0x0200\n XMLCREF       0x0400\n\n=head3 LEAVE_SRC\n\n  Encode::LEAVE_SRC\n\nIf the C<Encode::LEAVE_SRC> bit is I<not> set but I<CHECK> is set, then the\nsource string to encode() or decode() will be overwritten in place.\nIf you're not interested in this, then bitwise-OR it with the bitmask.\n\n=head2 coderef for CHECK\n\nAs of C<Encode> 2.12, C<CHECK> can also be a code reference which takes the\nordinal value of the unmapped character as an argument and returns\noctets that represent the fallback character.  For instance:\n\n  $ascii = encode(\"ascii\", $utf8, sub{ sprintf \"<U+%04X>\", shift });\n\nActs like C<FB_PERLQQ> but U+I<XXXX> is used instead of C<\\x{I<XXXX>}>.\n\nFallback for C<decode> must return decoded string (sequence of characters)\nand takes a list of ordinal values as its arguments. So for\nexample if you wish to decode octets as UTF-8, and use ISO-8859-15 as\na fallback for bytes that are not valid UTF-8, you could write\n\n    $str = decode 'UTF-8', $octets, sub {\n        my $tmp = join '', map chr, @_;\n        return decode 'ISO-8859-15', $tmp;\n    };\n\n=head1 Defining Encodings\n\nTo define a new encoding, use:\n\n    use Encode qw(define_encoding);\n    define_encoding($object, CANONICAL_NAME [, alias...]);\n\nI<CANONICAL_NAME> will be associated with I<$object>.  The object\nshould provide the interface described in L<Encode::Encoding>.\nIf more than two arguments are provided, additional\narguments are considered aliases for I<$object>.\n\nSee L<Encode::Encoding> for details.\n\n=head1 The UTF8 flag\n\nBefore the introduction of Unicode support in Perl, The C<eq> operator\njust compared the strings represented by two scalars. Beginning with\nPerl 5.8, C<eq> compares two strings with simultaneous consideration of\nI<the UTF8 flag>. To explain why we made it so, I quote from page 402 of\nI<Programming Perl, 3rd ed.>\n\n=over 2\n\n=item Goal #1:\n\nOld byte-oriented programs should not spontaneously break on the old\nbyte-oriented data they used to work on.\n\n=item Goal #2:\n\nOld byte-oriented programs should magically start working on the new\ncharacter-oriented data when appropriate.\n\n=item Goal #3:\n\nPrograms should run just as fast in the new character-oriented mode\nas in the old byte-oriented mode.\n\n=item Goal #4:\n\nPerl should remain one language, rather than forking into a\nbyte-oriented Perl and a character-oriented Perl.\n\n=back\n\nWhen I<Programming Perl, 3rd ed.> was written, not even Perl 5.6.0 had been\nborn yet, many features documented in the book remained unimplemented for a\nlong time.  Perl 5.8 corrected much of this, and the introduction of the\nUTF8 flag is one of them.  You can think of there being two fundamentally\ndifferent kinds of strings and string-operations in Perl: one a\nbyte-oriented mode  for when the internal UTF8 flag is off, and the other a\ncharacter-oriented mode for when the internal UTF8 flag is on.\n\nThis UTF8 flag is not visible in Perl scripts, exactly for the same reason\nyou cannot (or rather, you I<don't have to>) see whether a scalar contains\na string, an integer, or a floating-point number.   But you can still peek\nand poke these if you will.  See the next section.\n\n=head2 Messing with Perl's Internals\n\nThe following API uses parts of Perl's internals in the current\nimplementation.  As such, they are efficient but may change in a future\nrelease.\n\n=head3 is_utf8\n\n  is_utf8(STRING [, CHECK])\n\n[INTERNAL] Tests whether the UTF8 flag is turned on in the I<STRING>.\nIf I<CHECK> is true, also checks whether I<STRING> contains well-formed\nUTF-8.  Returns true if successful, false otherwise.\n\nTypically only necessary for debugging and testing.  Don't use this flag as\na marker to distinguish character and binary data, that should be decided\nfor each variable when you write your code.\n\nB<CAVEAT>: If I<STRING> has UTF8 flag set, it does B<NOT> mean that\nI<STRING> is UTF-8 encoded and vice-versa.\n\nAs of Perl 5.8.1, L<utf8> also has the C<utf8::is_utf8> function.\n\n=head3 _utf8_on\n\n  _utf8_on(STRING)\n\n[INTERNAL] Turns the I<STRING>'s internal UTF8 flag B<on>.  The I<STRING>\nis I<not> checked for containing only well-formed UTF-8.  Do not use this\nunless you I<know with absolute certainty> that the STRING holds only\nwell-formed UTF-8.  Returns the previous state of the UTF8 flag (so please\ndon't treat the return value as indicating success or failure), or C<undef>\nif I<STRING> is not a string.\n\nB<NOTE>: For security reasons, this function does not work on tainted values.\n\n=head3 _utf8_off\n\n  _utf8_off(STRING)\n\n[INTERNAL] Turns the I<STRING>'s internal UTF8 flag B<off>.  Do not use\nfrivolously.  Returns the previous state of the UTF8 flag, or C<undef> if\nI<STRING> is not a string.  Do not treat the return value as indicative of\nsuccess or failure, because that isn't what it means: it is only the\nprevious setting.\n\nB<NOTE>: For security reasons, this function does not work on tainted values.\n\n=head1 UTF-8 vs. utf8 vs. UTF8\n\n  ....We now view strings not as sequences of bytes, but as sequences\n  of numbers in the range 0 .. 2**32-1 (or in the case of 64-bit\n  computers, 0 .. 2**64-1) -- Programming Perl, 3rd ed.\n\nThat has historically been Perl's notion of UTF-8, as that is how UTF-8 was\nfirst conceived by Ken Thompson when he invented it. However, thanks to\nlater revisions to the applicable standards, official UTF-8 is now rather\nstricter than that. For example, its range is much narrower (0 .. 0x10_FFFF\nto cover only 21 bits instead of 32 or 64 bits) and some sequences\nare not allowed, like those used in surrogate pairs, the 31 non-character\ncode points 0xFDD0 .. 0xFDEF, the last two code points in I<any> plane\n(0xI<XX>_FFFE and 0xI<XX>_FFFF), all non-shortest encodings, etc.\n\nThe former default in which Perl would always use a loose interpretation of\nUTF-8 has now been overruled:\n\n  From: Larry Wall <larry@wall.org>\n  Date: December 04, 2004 11:51:58 JST\n  To: perl-unicode@perl.org\n  Subject: Re: Make Encode.pm support the real UTF-8\n  Message-Id: <20041204025158.GA28754@wall.org>\n\n  On Fri, Dec 03, 2004 at 10:12:12PM +0000, Tim Bunce wrote:\n  : I've no problem with 'utf8' being perl's unrestricted uft8 encoding,\n  : but \"UTF-8\" is the name of the standard and should give the\n  : corresponding behaviour.\n\n  For what it's worth, that's how I've always kept them straight in my\n  head.\n\n  Also for what it's worth, Perl 6 will mostly default to strict but\n  make it easy to switch back to lax.\n\n  Larry\n\nGot that?  As of Perl 5.8.7, B<\"UTF-8\"> means UTF-8 in its current\nsense, which is conservative and strict and security-conscious, whereas\nB<\"utf8\"> means UTF-8 in its former sense, which was liberal and loose and\nlax.  C<Encode> version 2.10 or later thus groks this subtle but critically\nimportant distinction between C<\"UTF-8\"> and C<\"utf8\">.\n\n  encode(\"utf8\",  \"\\x{FFFF_FFFF}\", 1); # okay\n  encode(\"UTF-8\", \"\\x{FFFF_FFFF}\", 1); # croaks\n\nThis distinction is also important for decoding. In the following,\nC<$s> stores character U+200000, which exceeds UTF-8's allowed range.\nC<$s> thus stores an invalid Unicode code point:\n\n  $s = decode(\"utf8\", \"\\xf8\\x88\\x80\\x80\\x80\");\n\nC<\"UTF-8\">, by contrast, will either coerce the input to something valid:\n\n    $s = decode(\"UTF-8\", \"\\xf8\\x88\\x80\\x80\\x80\"); # U+FFFD\n\n.. or croak:\n\n    decode(\"UTF-8\", \"\\xf8\\x88\\x80\\x80\\x80\", FB_CROAK|LEAVE_SRC);\n\nIn the C<Encode> module, C<\"UTF-8\"> is actually a canonical name for\nC<\"utf-8-strict\">.  That hyphen between the C<\"UTF\"> and the C<\"8\"> is\ncritical; without it, C<Encode> goes \"liberal\" and (perhaps overly-)permissive:\n\n  find_encoding(\"UTF-8\")->name # is 'utf-8-strict'\n  find_encoding(\"utf-8\")->name # ditto. names are case insensitive\n  find_encoding(\"utf_8\")->name # ditto. \"_\" are treated as \"-\"\n  find_encoding(\"UTF8\")->name  # is 'utf8'.\n\nPerl's internal UTF8 flag is called \"UTF8\", without a hyphen. It indicates\nwhether a string is internally encoded as \"utf8\", also without a hyphen.\n\n=head1 SEE ALSO\n\nL<Encode::Encoding>,\nL<Encode::Supported>,\nL<Encode::PerlIO>,\nL<encoding>,\nL<perlebcdic>,\nL<perlfunc/open>,\nL<perlunicode>, L<perluniintro>, L<perlunifaq>, L<perlunitut>\nL<utf8>,\nthe Perl Unicode Mailing List L<http://lists.perl.org/list/perl-unicode.html>\n\n=head1 MAINTAINER\n\nThis project was originated by the late Nick Ing-Simmons and later\nmaintained by Dan Kogai I<< <dankogai@cpan.org> >>.  See AUTHORS\nfor a full list of people involved.  For any questions, send mail to\nI<< <perl-unicode@perl.org> >> so that we can all share.\n\nWhile Dan Kogai retains the copyright as a maintainer, credit\nshould go to all those involved.  See AUTHORS for a list of those\nwho submitted code to the project.\n\n=head1 COPYRIGHT\n\nCopyright 2002-2014 Dan Kogai I<< <dankogai@cpan.org> >>.\n\nThis library is free software; you can redistribute it and/or modify\nit under the same terms as Perl itself.\n\n=cut\n"], "filenames": ["cpan/Encode/Encode.pm"], "buggy_code_start_loc": [10], "buggy_code_end_loc": [70], "fixing_code_start_loc": [10], "fixing_code_end_loc": [71], "type": "CWE-427", "message": "Encode.pm, as distributed in Perl through 5.34.0, allows local users to gain privileges via a Trojan horse Encode::ConfigLocal library (in the current working directory) that preempts dynamic module loading. Exploitation requires an unusual configuration, and certain 2021 versions of Encode.pm (3.05 through 3.11). This issue occurs because the || operator evaluates @INC in a scalar context, and thus @INC has only an integer value.", "other": {"cve": {"id": "CVE-2021-36770", "sourceIdentifier": "cve@mitre.org", "published": "2021-08-11T23:15:07.707", "lastModified": "2022-05-03T16:04:40.443", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Encode.pm, as distributed in Perl through 5.34.0, allows local users to gain privileges via a Trojan horse Encode::ConfigLocal library (in the current working directory) that preempts dynamic module loading. Exploitation requires an unusual configuration, and certain 2021 versions of Encode.pm (3.05 through 3.11). This issue occurs because the || operator evaluates @INC in a scalar context, and thus @INC has only an integer value."}, {"lang": "es", "value": "Encode.pm, distribuido en Perl versiones hasta 5.34.0, permite a usuarios locales alcanzar privilegios por medio de una biblioteca Encode::ConfigLocal (en el directorio de trabajo actual) que se adelanta a una carga din\u00e1mica de m\u00f3dulos. Una explotaci\u00f3n requiere una configuraci\u00f3n inusual, y determinadas versiones 2021 de Encode.pm (3.05 hasta 3.11). Este problema ocurre porque el operador || eval\u00faa @INC en un contexto escalar, y por lo tanto @INC s\u00f3lo tiene un valor entero"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-427"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:p5-encode_project:p5-encode:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.05", "versionEndExcluding": "3.12", "matchCriteriaId": "1789B3F3-F9D3-4521-8279-02D87A3CBBBB"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:a:perl:perl:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.34.0", "matchCriteriaId": "5420C786-37DA-4247-96B1-1E4DCA0D452C"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:33:*:*:*:*:*:*:*", "matchCriteriaId": "E460AA51-FCDA-46B9-AE97-E6676AA5E194"}]}]}], "references": [{"url": "https://github.com/Perl/perl5/commit/c1a937fef07c061600a0078f4cb53fe9c2136bb9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/dankogai/p5-encode/commit/527e482dc70b035d0df4f8c77a00d81f8d775c74", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5NDGQSGMEZ75FJGBKNYC75OTO7TF7XHB/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/6KOZYD7BH2DNIAEZ2ZL4PJ4QUVQI6Y33/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://metacpan.org/dist/Encode/changes", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://news.cpanel.com/unscheduled-tsr-10-august-2021/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://security-tracker.debian.org/tracker/CVE-2021-36770", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://security.netapp.com/advisory/ntap-20210909-0003/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Perl/perl5/commit/c1a937fef07c061600a0078f4cb53fe9c2136bb9"}}