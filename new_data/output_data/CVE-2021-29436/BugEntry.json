{"buggy_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n\n// Set include path for PEAR and its modules, which we include in the distribution.\n//\nset_include_path(realpath(dirname(__FILE__).'/lib/pear') . PATH_SEPARATOR . get_include_path());\n\n\n// Database connection parameters.\n//\n// CHANGE 3 PARAMETERS HERE!\n// In this example: \"root\" is username, \"no\" is password, \"dbname\" is database name.\n//\ndefine('DSN', 'mysqli://root:no@localhost/dbname?charset=utf8mb4');\n// Do NOT change charset unless you upgraded from an older Time Tracker where charset was NOT specified\n// and now you see some corrupted characters. See http://dev.mysql.com/doc/refman/5.0/en/charset-mysql.html\n\n\n// MULTIORG_MODE option defines whether users can create their own top groups (organizations).\n// When false, a Time Tracker server is managed by admin, who creates top groups (one or many).\n//\n// Available values are true or false.\n//\ndefine('MULTIORG_MODE', true);\n\n\n// EMAIL_REQUIRED defines whether an email is required for new registrations.\ndefine('EMAIL_REQUIRED', false);\n\n\n// Directory name.\n// If you install time tracker into a sub-directory of your site reflect this in the DIR_NAME parameter.\n// For example, for http://localhost/timetracker/ define DIR_NAME as 'timetracker'.\n//\n// define('DIR_NAME', 'timetracker');\n//\n\n\n// WEEKEND_START_DAY\n//\n// This option defines which days are highlighted with weekend color.\n// 6 means Saturday. For Saudi Arabia, etc. set it to 4 for Thursday and Friday to be weekend days.\n//\ndefine('WEEKEND_START_DAY', 6);\n\n\n// SESSION_COOKIE_NAME\n//\n// PHP session cookie name.\n// define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\n\n\n// PHPSESSID_TTL\n//\n// Lifetime in seconds for session cookie. Time to live is extended by this value\n// with each visit to the site so that users don't have to re-login. \n// define('PHPSESSID_TTL', 86400);\n//\n// Note: see also PHP_SESSION_PATH below as you may have to use it together with\n// PHPSESSID_TTL to avoid premature session expirations.\n\n\n// PHP_SESSION_PATH\n// Local file system path for PHP sessions. Use it to isolate session deletions\n// (garbage collection interference) by other PHP scripts potentially running on the system.\n// define('PHP_SESSION_PATH', '/tmp/timetracker'); // Directory must exist and be writable.\n\n\n// LOGIN_COOKIE_NAME\n//\n// Cookie name for user login to remember it between browser sessions.\n// define('LOGIN_COOKIE_NAME', 'tt_login');\n\n\n// Forum and help links from the main menu.\n//\ndefine('FORUM_LINK', 'https://www.anuko.com/forum/viewforum.php?f=4');\ndefine('HELP_LINK', 'https://www.anuko.com/time-tracker/user-guide/index.htm');\n\n\n// Default sender for mail.\n//\ndefine('SENDER', 'Anuko Time Tracker <no-reply@timetracker.anuko.com>');\n\n\n// MAIL_MODE - mail sending mode. Can be 'mail' or 'smtp'.\n// 'mail' - sending through php mail() function.\n// 'smtp' - sending directly through SMTP server.\n// See https://www.anuko.com/time_tracker/install_guide/mail.htm\n//\ndefine('MAIL_MODE', 'smtp');\ndefine('MAIL_SMTP_HOST', 'localhost'); // For gmail use 'ssl://smtp.gmail.com' instead of 'localhost' and port 465.\n// define('MAIL_SMTP_PORT', '465');\n// define('MAIL_SMTP_USER', 'yourname@yourdomain.com');\n// define('MAIL_SMTP_PASSWORD', 'yourpassword');\n// define('MAIL_SMTP_AUTH', true);\n// define('MAIL_SMTP_DEBUG', true);\n\n\n// CSS files. They are located in the root of Time Tracker installation.\n//\ndefine('DEFAULT_CSS', 'default.css');\ndefine('RTL_CSS', 'rtl.css'); // For right to left languages.\n\n\n// Default language of the application.\n// Possible values: en, fr, nl, etc. Empty string means the language is defined by user browser.\n// \ndefine('LANG_DEFAULT', '');\n\n\n// Default currency symbol. Use \u20ac, \u00a3, a more specific dollar like US$, CAD, etc.\n// \ndefine('CURRENCY_DEFAULT', '$');\n\n\n// EXPORT_DECIMAL_DURATION - defines whether time duration values are decimal in CSV and XML data exports (1.25 or 1,25 vs 1:15).\n// \ndefine('EXPORT_DECIMAL_DURATION', true);\n\n\n// REPORT_FOOTER - defines whether to use a footer on reports.\n// \ndefine('REPORT_FOOTER', true);\n\n\n// Authentication module (see WEB-INF/lib/auth/)\n// Possible authentication methods:\n//   db - internal database, logins and password hashes are stored in time tracker database.\n//   ldap - authentication against an LDAP directory such as OpenLDAP or Windows Active Directory.\ndefine('AUTH_MODULE', 'db');\n\n// LDAP authentication examples.\n// Go to https://www.anuko.com/time_tracker/install_guide/ldap_auth/index.htm for detailed configuration instructions.\n\n// Configuration example for OpenLDAP server:\n// define('AUTH_MODULE', 'ldap');\n// $GLOBALS['AUTH_MODULE_PARAMS'] = array(\n//  'server' => '127.0.0.1',                    // OpenLDAP server address or name. For secure LDAP use ldaps://hostname:port here.\n//  'type' => 'openldap',                       // Type of server. openldap type should also work with Sun Directory Server when member_of is empty.\n                                                // It may work with other (non Windows AD) LDAP servers. For Windows AD use the 'ad' type.\n//  'base_dn' => 'ou=People,dc=example,dc=com', // Path of user's base distinguished name in LDAP catalog.\n//  'user_login_attribute' => 'uid',            // LDAP attribute used for login.\n//  'default_domain' => 'example.com',          // Default domain.\n//  'member_of' => array());                    // List of groups, membership in which is required for user to be authenticated.\n\n\n// Configuration example for Windows domains with Active Directory:\n// define('AUTH_MODULE', 'ldap');\n// $GLOBALS['AUTH_MODULE_PARAMS'] = array(\n//  'server' => '127.0.0.1',            // Domain controller IP address or name. For secure LDAP use ldaps://hostname:port here.\n//  'type' => 'ad',                     // Type of server.\n//  'base_dn' => 'DC=example,DC=com',   // Base distinguished name in LDAP catalog.\n//  'default_domain' => 'example.com',  // Default domain.\n//  'member_of' => array());            // List of groups, membership in which is required for user to be authenticated.\n                                        // Leave it empty if membership is not necessary. Otherwise list CN parts only.\n                                        // For example:\n                                        // array('Ldap Testers') means that the user must be a member Ldap Testers group.\n                                        // array('Ldap Testers', 'Ldap Users') means the user must be a member of both Ldap Testers and Ldap Users groups.\n\n// define('DEBUG', false); // Note: enabling DEBUG breaks redirects as debug output is printed before setting redirect header. Do not enable on production systems.\n\n\n// HTTP_TARGET - defines http target for cross site request forgery protection.\n// It can be used when you access the application via a proxy.\n// define('HTTP_TARGET', 'localhost');\n\n\n// Group managers can set monthly work hour quota for years between the following  values.\n// define('MONTHLY_QUOTA_YEAR_START', 2010); // If nothing is specified, it falls back to 2015.\n// define('MONTHLY_QUOTA_YEAR_END', 2025);   // If nothing is specified, it falls back to 2030.\n\n// Height in pixels for the note input field in time.php. Defaults to 40.\n// define('NOTE_INPUT_HEIGHT', 100);\n\n// A comma-separated list of default plugins for new group registrations.\n// Example below enables charts and attachments.\n// define('DEFAULT_PLUGINS', 'ch,at');\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// import() function loads a class.\nfunction import($class_name) {\n  $libs = array(\n    dirname($_SERVER[\"SCRIPT_FILENAME\"]),\n    LIBRARY_DIR\n  );\n\n\t    $pos = strpos($class_name, \".\");\n        if (!($pos === false)) {\n            $peaces = explode(\".\", $class_name);\n            $p = \"\";\n            for ($i=0; $i<count($peaces)-1; $i++) {\n                $p = $p . \"/\" . $peaces[$i];\n            }\n\t\t\t$libs = array_merge(array(LIBRARY_DIR . $p),$libs);\n            $class_name = $peaces[count($peaces)-1];\n        }\n\n\t\t$filename = $class_name . '.class.php';\n\n\t\tforeach($libs as $lib) {\n\t\t\t$inc_filename = $lib . '/' . $filename;\n\t\t\tif (file_exists($inc_filename)) {\n\t\t\t\t\trequire_once($inc_filename);\n\t\t\t\t\treturn $class_name;\n\t\t\t}\n\t\t}\n\n\t\tprint '<br><b>load_class: error loading file \"'.$filename.'\"</b>';\n\t\tdie();\n}\n\n\t// The mu_sort function is used to sort a multi-dimensional array.\n\t// It looks like the code example is taken from the PHP manual http://ca2.php.net/manual/en/function.sort.php\n\tfunction mu_sort($array, $key_sort) {\n\t\t$n = 0;\n\t\tif (!is_array($array) || count($array)==0)\n\t\t\treturn array();\n\n\t\t$key_sorta = explode(\",\", $key_sort);\n\t\t$keys = array_keys($array[0]);\n\n\t\tfor($m=0; $m < count($key_sorta); $m++) {\n\t\t\t$nkeys[$m] = trim($key_sorta[$m]);\n\t\t}\n\t\t$n += count($key_sorta);\n\n\t\tfor($i=0; $i < count($keys); $i++) {\n\t\t\tif(!in_array($keys[$i], $key_sorta)) {\n\t\t\t\t$nkeys[$n] = $keys[$i];\n\t\t\t\t$n += \"1\";\n\t\t\t}\n\t\t}\n\n\t\tfor($u=0;$u<count($array); $u++) {\n\t\t\t$arr = $array[$u];\n\t\t\tfor($s=0; $s<count($nkeys); $s++) {\n\t\t\t\t$k = $nkeys[$s];\n\t\t\t\t$output[$u][$k] = $array[$u][$k];\n\t\t\t}\n\t\t}\n\t\tsort($output);\n\t\treturn $output;\n\t}\n\n\t/**\n\t * return float type\n\t *\n\t * @param unknown $value\n\t * @return unknown\n\t */\n\tfunction toFloat($value) {\n\t\tif (isset($value) && (strlen($value) > 0)) {\n\t\t\t$value = str_replace(\",\",\".\",$value);\n\t\t\treturn floatval($value);\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction &getConnection() {\n        if (!isset($GLOBALS[\"_MDB2_CONNECTION\"])) {\n\n        \trequire_once('MDB2.php');\n\n        \t$mdb2 = MDB2::connect(DSN);\n\t\t\tif (is_a($mdb2, 'PEAR_Error')) {\n    \t\t\tdie($mdb2->getMessage());\n\t\t\t}\n\n\t\t\t$mdb2->setFetchMode(MDB2_FETCHMODE_ASSOC);\n\t\t\t\n   \t\t\t$GLOBALS[\"_MDB2_CONNECTION\"] = $mdb2;\n    \t}\n      \treturn $GLOBALS[\"_MDB2_CONNECTION\"];\n\t}\n\n\n// time_to_decimal converts a time string such as 1:15 to its decimal representation such as 1.25 or 1,25.\nfunction time_to_decimal($val) {\n  global $user;\n  $parts = explode(':', $val); // parts[0] is hours, parts[1] is minutes.\n\n  $minutePercent = round($parts[1]*100/60); // Integer value (0-98) of percent of minutes portion in the hour.\n  if($minutePercent < 10) $minutePercent = '0'.$minutePercent; // Pad small values with a 0 to always have 2 digits.\n\n  $decimalTime = $parts[0].$user->decimal_mark.$minutePercent; // Construct decimal representation of time value.\n\n  return $decimalTime;\n}\n\n// check_extension checks whether a required PHP extension is loaded and dies if not so.\nfunction check_extension($ext)\n{\n  if (!extension_loaded($ext))\n    die(\"PHP extension '{$ext}' is required but is not loaded. Read Time Tracker Install Guide for help.\");\n}\n\n// isTrue is a helper function to return correct false for older config.php values defined as a string 'false'.\nfunction isTrue($val)\n{\n  return (defined($val) && constant($val) === true);\n}\n\n// ttValidString is used to check user input to validate a string.\nfunction ttValidString($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0 && !$emptyValid)\n    return false;\n    \n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  return true;    \n}\n\n// ttValidCss is used to check user input for custom css.\nfunction ttValidCss($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return true;\n\n  // String must not contain any tags.\n  if (stristr($val, '<'))\n    return false;\n\n  // Security note: the above may not be enough.\n  // Currently it is unclear how vulnerable we are assuming custom css is available only to a logged on user\n  // (one custom css per group).\n  // However, if abuse occurs or when the issue is better understood, we may have to rewrite this function,\n  // perhaps by specifying what exactly we allow to style.\n  return true;\n}\n\n// ttValidTemplateText is used to check template-based user input.\n// When templates are used, required input parts must be filled by user.\n// We identify these parts by 3 \"stop sign\" emojis (aka \"octagonal sign\" U+1F6D1).\nfunction ttValidTemplateText($val)\n{\n  $valid = strpos($val, '\ud83d\uded1\ud83d\uded1\ud83d\uded1') === false; // no 3 \"stop sign\" emojis in a row.\n  return $valid;\n}\n\n// ttValidEmail is used to check user input to validate an email string.\nfunction ttValidEmail($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n  \t\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  // Validate a single email address. TODO: improve for compliancy with RFC.\n  if (!preg_match(\"/^[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+)$/\", $val))\n    return false;\n  \n  return true;    \n}\n\n// ttValidEmailList is used to check user input to validate an email string.\nfunction ttValidEmailList($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n  \t\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  // Validates a list of email addresses separated by a comma with optional spaces.\n  if (!preg_match(\"/^[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+)(,\\s*[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+))*$/\", $val))\n    return false;\n    \n  return true;\n}\n\n// ttValidFloat is used to check user input to validate a float value.\nfunction ttValidFloat($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n    \n  global $user;\n  $decimal = $user->getDecimalMark();\n\t\n  if (!preg_match('/^-?[0-9'.$decimal.']+$/', $val))\n    return false;\n    \n  return true;    \n}\n\n// ttValidDate is used to check user input to validate a date.\nfunction ttValidDate($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return false;\n\n  // This should accept a string in format 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD-MM-YYYY', 'DD.MM.YYYY', or 'DD.MM.YYYY whatever'.\n  if (!preg_match('/^\\d\\d\\d\\d-\\d\\d-\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\-\\d\\d\\-\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d .+$/', $val))\n    return false;\n    \n  return true;    \n}\n\n// ttValidInteger is used to check user input to validate an integer.\nfunction ttValidInteger($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n    \n  if (!preg_match('/^[0-9]+$/', $val))\n    return false;\n\n  return true;\n}\n\n// ttValidCronSpec is used to check user input to validate cron specification.\nfunction ttValidCronSpec($val)\n{\n  // This code is adapted from http://stackoverflow.com/questions/235504/validating-crontab-entries-w-php\n  $numbers= array(\n     'min'=>'[0-5]?\\d',\n     'hour'=>'[01]?\\d|2[0-3]',\n     'day'=>'0?[1-9]|[12]\\d|3[01]',\n     'month'=>'[1-9]|1[012]',\n     'dow'=>'[0-7]'\n  );\n\n  foreach($numbers as $field=>$number) {\n    $range= \"($number)(-($number)(\\/\\d+)?)?\";\n    $field_re[$field]= \"\\*(\\/\\d+)?|$range(,$range)*\";\n  }\n\n  $field_re['month'].='|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec';\n  $field_re['dow'].='|mon|tue|wed|thu|fri|sat|sun';\n\n  $fields_re= '('.join(')\\s+(', $field_re).')';\n\n  /*\n  $replacements= '@reboot|@yearly|@annually|@monthly|@weekly|@daily|@midnight|@hourly';\n\n  $regexp = '^\\s*('.\n                '$'.\n                '|#'.\n                '|\\w+\\s*='.\n                \"|$fields_re\\s+\\S\".\n                \"|($replacements)\\s+\\S\".\n            ')';\n   */\n  // The above block from the link did not work for me.\n\n  // But this works.\n  $regexp = '/^'.$fields_re.'$/';\n\t\n  if (!preg_match($regexp, $val))\n    return false;\n\n  return true;\n}\n\n// ttValidCondition is used to check user input to validate a notification condition.\nfunction ttValidCondition($val, $emptyValid = true)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n\n  if (!preg_match(\"/^count\\s?(=|[<>]=?|<>)\\s?\\d+$/\", $val) &&\n      !preg_match(\"/^hours\\s?(=|[<>]=?|<>)\\s?\\d+$/\", $val))\n    return false;\n\n  return true;\n}\n\n// ttValidIP is used to check user input to validate a comma-separated\n// list of IP subnet \"prefixes\", for example 192.168.0 (note: no .* in the end).\n// We keep regexp checks here simple - they are not precise.\n// For example, IPv4-mapped IPv6 addresses will fail. This may need to be fixed.\nfunction ttValidIP($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0 && $emptyValid)\n    return true;\n\n  $subnets = explode(',', $val);\n  foreach ($subnets as $subnet) {\n    $ipv4 = preg_match('/^\\d\\d?\\d?(\\.\\d\\d?\\d?){0,3}\\.?$/', $subnet); // Not precise check.\n    $ipv6 = preg_match('/^([0-9a-fA-F]{4})(:[0-9a-fA-F]{4}){0,7}$/', $subnet); // Not precise check.\n    if (!$ipv4 && !$ipv6)\n      return false;\n  }\n  return true;\n}\n\n// ttValidHolidays is used to check user input to validate holidays spec.\n// To keep things simple, the format is a comma-separated list of dates:\n// ****-01-01,****-12-31,2019-04-20\n// The above means Jan 1 and Dec 31 are holidays in all years, while Apr 20 is only in 2019.\nfunction ttValidHolidays($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0) return true;\n\n  $dates = explode(',', $val);\n  foreach ($dates as $date) {\n    if (!preg_match('/^[\\d*]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/', $date))\n      return false;\n  }\n  return true;\n}\n\n// ttAccessAllowed checks whether user is allowed access to a particular page.\n// It is used as an initial check on all publicly available pages\n// (except login.php, register.php, and others where we don't have to check).\nfunction ttAccessAllowed($required_right)\n{\n  global $auth;\n  global $user;\n\n  // Redirect to login page if user is not authenticated.\n  if (!$auth->isAuthenticated()) {\n    header('Location: login.php');\n    exit();\n  }\n\n  // Protection against cross site request forgery.\n  if (!ttMitigateCSRF())\n    return false;\n\n  // Check IP restriction, if set.\n  if ($user->allow_ip && !$user->can('override_allow_ip')) {\n    $access_allowed = false;\n    $user_ip = $_SERVER['REMOTE_ADDR'];\n    $allowed_ip_array = explode(',', $user->allow_ip);\n    foreach ($allowed_ip_array as $allowed_ip) {\n      $len = strlen($allowed_ip);\n      if (substr($user_ip, 0, $len) === $allowed_ip) { // startsWith check.\n         $access_allowed = true;\n         break;\n      }\n    }\n    if (!$access_allowed) return false;\n  }\n\n  // Check if user has the right.\n  if (in_array($required_right, $user->rights)) {\n    import('ttUserHelper');\n    ttUserHelper::updateLastAccess();\n    return true;\n  }\n\n  return false;\n}\n\n// ttMitigateCSRF verifies request headers in an attempt to block cross site request forgery.\nfunction ttMitigateCSRF() {\n  // No need to do anything for get requests.\n  global $request;\n  if ($request->isGet())\n    return true;\n\n  $origin = $_SERVER['HTTP_ORIGIN'];\n  if ($origin) {\n    $pos = strpos($origin, '//');\n    $origin = substr($origin, $pos+2); // Strip protocol.\n  }\n  if (!$origin) {\n    // Try using referer.\n    $origin = $_SERVER['HTTP_REFERER'];\n    if ($origin) {\n      $pos = strpos($origin, '//');\n      $origin = substr($origin, $pos+2); // Strip protocol.\n      $pos = strpos($origin, '/');\n      $origin = substr($origin, 0, $pos); // Leave host only.\n    }\n  }\n  error_log(\"origin: \".$origin);\n  $target = defined('HTTP_TARGET') ? HTTP_TARGET : $_SERVER['HTTP_HOST'];\n  error_log(\"target: \".$target);\n  if (strcmp($origin, $target)) {\n    error_log(\"Potential cross site request forgery. Origin: '$origin' does not match target: '$target'.\");\n    return false; // Origin and target do not match,\n  }\n\n  // TODO: review and improve this function for custom ports.\n  return true;\n}\n\n\n// ttStartsWith functions checks if a string starts with a given substring.\nfunction ttStartsWith($string, $startString)\n{\n    $len = strlen($startString);\n    return (substr($string, 0, $len) === $startString);\n}\n\n// ttEndsWith functions checks if a string ends with a given substring.\nfunction ttEndsWith($string, $endString)\n{\n    $len = strlen($endString);\n    if ($len == 0) return true;\n    return (substr($string, -$len) === $endString);\n}\n\n// ttDateToUserFormat converts a date from database format to user format.\nfunction ttDateToUserFormat($date)\n{\n  global $user;\n  $o_date = new DateAndTime(DB_DATEFORMAT, $date);\n  return $o_date->toString($user->date_format);\n}\n\n// ttRandomString generates a random alphanumeric string.\nfunction ttRandomString($length = 32) {\n  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  $charactersLength = strlen($characters);\n  $randomString = '';\n  for ($i = 0; $i < $length; $i++) {\n    $randomString .= $characters[rand(0, $charactersLength - 1)];\n  }\n  return $randomString;\n}\n\n// ttNeutralizeForCsv neutralizes user input for export to CSV files\n// by removing =, +, -, and @ characters from the beginning of cell values.\n// This mitigates a risk of CSV injection, see https://owasp.org/www-community/attacks/CSV_Injection\n// Additionally, it replaces each quote character with a double quote.\nfunction ttNeutralizeForCsv($val) {\n  $result = ltrim($val, '=+-@');\n  return str_replace('\"', '\"\"', $result);\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\n// require_once('init_auth.php');\ndefine(\"APP_VERSION\", \"1.19.27.5431\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n"], "fixing_code": ["<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n\n// Set include path for PEAR and its modules, which we include in the distribution.\n//\nset_include_path(realpath(dirname(__FILE__).'/lib/pear') . PATH_SEPARATOR . get_include_path());\n\n\n// Database connection parameters.\n//\n// CHANGE 3 PARAMETERS HERE!\n// In this example: \"root\" is username, \"no\" is password, \"dbname\" is database name.\n//\ndefine('DSN', 'mysqli://root:no@localhost/dbname?charset=utf8mb4');\n// Do NOT change charset unless you upgraded from an older Time Tracker where charset was NOT specified\n// and now you see some corrupted characters. See http://dev.mysql.com/doc/refman/5.0/en/charset-mysql.html\n\n\n// MULTIORG_MODE option defines whether users can create their own top groups (organizations).\n// When false, a Time Tracker server is managed by admin, who creates top groups (one or many).\n//\n// Available values are true or false.\n//\ndefine('MULTIORG_MODE', true);\n\n\n// EMAIL_REQUIRED defines whether an email is required for new registrations.\ndefine('EMAIL_REQUIRED', false);\n\n\n// Directory name.\n// If you install time tracker into a sub-directory of your site reflect this in the DIR_NAME parameter.\n// For example, for http://localhost/timetracker/ define DIR_NAME as 'timetracker'.\n//\n// define('DIR_NAME', 'timetracker');\n//\n\n\n// WEEKEND_START_DAY\n//\n// This option defines which days are highlighted with weekend color.\n// 6 means Saturday. For Saudi Arabia, etc. set it to 4 for Thursday and Friday to be weekend days.\n//\ndefine('WEEKEND_START_DAY', 6);\n\n\n// SESSION_COOKIE_NAME\n//\n// PHP session cookie name.\n// define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\n\n\n// PHPSESSID_TTL\n//\n// Lifetime in seconds for session cookie. Time to live is extended by this value\n// with each visit to the site so that users don't have to re-login. \n// define('PHPSESSID_TTL', 86400);\n//\n// Note: see also PHP_SESSION_PATH below as you may have to use it together with\n// PHPSESSID_TTL to avoid premature session expirations.\n\n\n// PHP_SESSION_PATH\n// Local file system path for PHP sessions. Use it to isolate session deletions\n// (garbage collection interference) by other PHP scripts potentially running on the system.\n// define('PHP_SESSION_PATH', '/tmp/timetracker'); // Directory must exist and be writable.\n\n\n// LOGIN_COOKIE_NAME\n//\n// Cookie name for user login to remember it between browser sessions.\n// define('LOGIN_COOKIE_NAME', 'tt_login');\n\n\n// Forum and help links from the main menu.\n//\ndefine('FORUM_LINK', 'https://www.anuko.com/forum/viewforum.php?f=4');\ndefine('HELP_LINK', 'https://www.anuko.com/time-tracker/user-guide/index.htm');\n\n\n// Default sender for mail.\n//\ndefine('SENDER', 'Anuko Time Tracker <no-reply@timetracker.anuko.com>');\n\n\n// MAIL_MODE - mail sending mode. Can be 'mail' or 'smtp'.\n// 'mail' - sending through php mail() function.\n// 'smtp' - sending directly through SMTP server.\n// See https://www.anuko.com/time_tracker/install_guide/mail.htm\n//\ndefine('MAIL_MODE', 'smtp');\ndefine('MAIL_SMTP_HOST', 'localhost'); // For gmail use 'ssl://smtp.gmail.com' instead of 'localhost' and port 465.\n// define('MAIL_SMTP_PORT', '465');\n// define('MAIL_SMTP_USER', 'yourname@yourdomain.com');\n// define('MAIL_SMTP_PASSWORD', 'yourpassword');\n// define('MAIL_SMTP_AUTH', true);\n// define('MAIL_SMTP_DEBUG', true);\n\n\n// CSS files. They are located in the root of Time Tracker installation.\n//\ndefine('DEFAULT_CSS', 'default.css');\ndefine('RTL_CSS', 'rtl.css'); // For right to left languages.\n\n\n// Default language of the application.\n// Possible values: en, fr, nl, etc. Empty string means the language is defined by user browser.\n// \ndefine('LANG_DEFAULT', '');\n\n\n// Default currency symbol. Use \u20ac, \u00a3, a more specific dollar like US$, CAD, etc.\n// \ndefine('CURRENCY_DEFAULT', '$');\n\n\n// EXPORT_DECIMAL_DURATION - defines whether time duration values are decimal in CSV and XML data exports (1.25 or 1,25 vs 1:15).\n// \ndefine('EXPORT_DECIMAL_DURATION', true);\n\n\n// REPORT_FOOTER - defines whether to use a footer on reports.\n// \ndefine('REPORT_FOOTER', true);\n\n\n// Authentication module (see WEB-INF/lib/auth/)\n// Possible authentication methods:\n//   db - internal database, logins and password hashes are stored in time tracker database.\n//   ldap - authentication against an LDAP directory such as OpenLDAP or Windows Active Directory.\ndefine('AUTH_MODULE', 'db');\n\n// LDAP authentication examples.\n// Go to https://www.anuko.com/time_tracker/install_guide/ldap_auth/index.htm for detailed configuration instructions.\n\n// Configuration example for OpenLDAP server:\n// define('AUTH_MODULE', 'ldap');\n// $GLOBALS['AUTH_MODULE_PARAMS'] = array(\n//  'server' => '127.0.0.1',                    // OpenLDAP server address or name. For secure LDAP use ldaps://hostname:port here.\n//  'type' => 'openldap',                       // Type of server. openldap type should also work with Sun Directory Server when member_of is empty.\n                                                // It may work with other (non Windows AD) LDAP servers. For Windows AD use the 'ad' type.\n//  'base_dn' => 'ou=People,dc=example,dc=com', // Path of user's base distinguished name in LDAP catalog.\n//  'user_login_attribute' => 'uid',            // LDAP attribute used for login.\n//  'default_domain' => 'example.com',          // Default domain.\n//  'member_of' => array());                    // List of groups, membership in which is required for user to be authenticated.\n\n\n// Configuration example for Windows domains with Active Directory:\n// define('AUTH_MODULE', 'ldap');\n// $GLOBALS['AUTH_MODULE_PARAMS'] = array(\n//  'server' => '127.0.0.1',            // Domain controller IP address or name. For secure LDAP use ldaps://hostname:port here.\n//  'type' => 'ad',                     // Type of server.\n//  'base_dn' => 'DC=example,DC=com',   // Base distinguished name in LDAP catalog.\n//  'default_domain' => 'example.com',  // Default domain.\n//  'member_of' => array());            // List of groups, membership in which is required for user to be authenticated.\n                                        // Leave it empty if membership is not necessary. Otherwise list CN parts only.\n                                        // For example:\n                                        // array('Ldap Testers') means that the user must be a member Ldap Testers group.\n                                        // array('Ldap Testers', 'Ldap Users') means the user must be a member of both Ldap Testers and Ldap Users groups.\n\n// define('DEBUG', false); // Note: enabling DEBUG breaks redirects as debug output is printed before setting redirect header. Do not enable on production systems.\n\n\n// HTTP_TARGET - defines http target for cross site request forgery protection.\n// It can be used when you access the application via a proxy.\n// define('HTTP_TARGET', 'localhost:8080');\n\n\n// Group managers can set monthly work hour quota for years between the following  values.\n// define('MONTHLY_QUOTA_YEAR_START', 2010); // If nothing is specified, it falls back to 2015.\n// define('MONTHLY_QUOTA_YEAR_END', 2025);   // If nothing is specified, it falls back to 2030.\n\n// Height in pixels for the note input field in time.php. Defaults to 40.\n// define('NOTE_INPUT_HEIGHT', 100);\n\n// A comma-separated list of default plugins for new group registrations.\n// Example below enables charts and attachments.\n// define('DEFAULT_PLUGINS', 'ch,at');\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// import() function loads a class.\nfunction import($class_name) {\n  $libs = array(\n    dirname($_SERVER[\"SCRIPT_FILENAME\"]),\n    LIBRARY_DIR\n  );\n\n\t    $pos = strpos($class_name, \".\");\n        if (!($pos === false)) {\n            $peaces = explode(\".\", $class_name);\n            $p = \"\";\n            for ($i=0; $i<count($peaces)-1; $i++) {\n                $p = $p . \"/\" . $peaces[$i];\n            }\n\t\t\t$libs = array_merge(array(LIBRARY_DIR . $p),$libs);\n            $class_name = $peaces[count($peaces)-1];\n        }\n\n\t\t$filename = $class_name . '.class.php';\n\n\t\tforeach($libs as $lib) {\n\t\t\t$inc_filename = $lib . '/' . $filename;\n\t\t\tif (file_exists($inc_filename)) {\n\t\t\t\t\trequire_once($inc_filename);\n\t\t\t\t\treturn $class_name;\n\t\t\t}\n\t\t}\n\n\t\tprint '<br><b>load_class: error loading file \"'.$filename.'\"</b>';\n\t\tdie();\n}\n\n\t// The mu_sort function is used to sort a multi-dimensional array.\n\t// It looks like the code example is taken from the PHP manual http://ca2.php.net/manual/en/function.sort.php\n\tfunction mu_sort($array, $key_sort) {\n\t\t$n = 0;\n\t\tif (!is_array($array) || count($array)==0)\n\t\t\treturn array();\n\n\t\t$key_sorta = explode(\",\", $key_sort);\n\t\t$keys = array_keys($array[0]);\n\n\t\tfor($m=0; $m < count($key_sorta); $m++) {\n\t\t\t$nkeys[$m] = trim($key_sorta[$m]);\n\t\t}\n\t\t$n += count($key_sorta);\n\n\t\tfor($i=0; $i < count($keys); $i++) {\n\t\t\tif(!in_array($keys[$i], $key_sorta)) {\n\t\t\t\t$nkeys[$n] = $keys[$i];\n\t\t\t\t$n += \"1\";\n\t\t\t}\n\t\t}\n\n\t\tfor($u=0;$u<count($array); $u++) {\n\t\t\t$arr = $array[$u];\n\t\t\tfor($s=0; $s<count($nkeys); $s++) {\n\t\t\t\t$k = $nkeys[$s];\n\t\t\t\t$output[$u][$k] = $array[$u][$k];\n\t\t\t}\n\t\t}\n\t\tsort($output);\n\t\treturn $output;\n\t}\n\n\t/**\n\t * return float type\n\t *\n\t * @param unknown $value\n\t * @return unknown\n\t */\n\tfunction toFloat($value) {\n\t\tif (isset($value) && (strlen($value) > 0)) {\n\t\t\t$value = str_replace(\",\",\".\",$value);\n\t\t\treturn floatval($value);\n\t\t}\n\t\treturn null;\n\t}\n\n\tfunction &getConnection() {\n        if (!isset($GLOBALS[\"_MDB2_CONNECTION\"])) {\n\n        \trequire_once('MDB2.php');\n\n        \t$mdb2 = MDB2::connect(DSN);\n\t\t\tif (is_a($mdb2, 'PEAR_Error')) {\n    \t\t\tdie($mdb2->getMessage());\n\t\t\t}\n\n\t\t\t$mdb2->setFetchMode(MDB2_FETCHMODE_ASSOC);\n\t\t\t\n   \t\t\t$GLOBALS[\"_MDB2_CONNECTION\"] = $mdb2;\n    \t}\n      \treturn $GLOBALS[\"_MDB2_CONNECTION\"];\n\t}\n\n\n// time_to_decimal converts a time string such as 1:15 to its decimal representation such as 1.25 or 1,25.\nfunction time_to_decimal($val) {\n  global $user;\n  $parts = explode(':', $val); // parts[0] is hours, parts[1] is minutes.\n\n  $minutePercent = round($parts[1]*100/60); // Integer value (0-98) of percent of minutes portion in the hour.\n  if($minutePercent < 10) $minutePercent = '0'.$minutePercent; // Pad small values with a 0 to always have 2 digits.\n\n  $decimalTime = $parts[0].$user->decimal_mark.$minutePercent; // Construct decimal representation of time value.\n\n  return $decimalTime;\n}\n\n// check_extension checks whether a required PHP extension is loaded and dies if not so.\nfunction check_extension($ext)\n{\n  if (!extension_loaded($ext))\n    die(\"PHP extension '{$ext}' is required but is not loaded. Read Time Tracker Install Guide for help.\");\n}\n\n// isTrue is a helper function to return correct false for older config.php values defined as a string 'false'.\nfunction isTrue($val)\n{\n  return (defined($val) && constant($val) === true);\n}\n\n// ttValidString is used to check user input to validate a string.\nfunction ttValidString($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0 && !$emptyValid)\n    return false;\n    \n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  return true;    \n}\n\n// ttValidCss is used to check user input for custom css.\nfunction ttValidCss($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return true;\n\n  // String must not contain any tags.\n  if (stristr($val, '<'))\n    return false;\n\n  // Security note: the above may not be enough.\n  // Currently it is unclear how vulnerable we are assuming custom css is available only to a logged on user\n  // (one custom css per group).\n  // However, if abuse occurs or when the issue is better understood, we may have to rewrite this function,\n  // perhaps by specifying what exactly we allow to style.\n  return true;\n}\n\n// ttValidTemplateText is used to check template-based user input.\n// When templates are used, required input parts must be filled by user.\n// We identify these parts by 3 \"stop sign\" emojis (aka \"octagonal sign\" U+1F6D1).\nfunction ttValidTemplateText($val)\n{\n  $valid = strpos($val, '\ud83d\uded1\ud83d\uded1\ud83d\uded1') === false; // no 3 \"stop sign\" emojis in a row.\n  return $valid;\n}\n\n// ttValidEmail is used to check user input to validate an email string.\nfunction ttValidEmail($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n  \t\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  // Validate a single email address. TODO: improve for compliancy with RFC.\n  if (!preg_match(\"/^[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+)$/\", $val))\n    return false;\n  \n  return true;    \n}\n\n// ttValidEmailList is used to check user input to validate an email string.\nfunction ttValidEmailList($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n  \t\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n    \n  // Validates a list of email addresses separated by a comma with optional spaces.\n  if (!preg_match(\"/^[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+)(,\\s*[_a-zA-Z\\d\\'-\\.]+@([_a-zA-Z\\d\\-]+(\\.[_a-zA-Z\\d\\-]+)+))*$/\", $val))\n    return false;\n    \n  return true;\n}\n\n// ttValidFloat is used to check user input to validate a float value.\nfunction ttValidFloat($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n    \n  global $user;\n  $decimal = $user->getDecimalMark();\n\t\n  if (!preg_match('/^-?[0-9'.$decimal.']+$/', $val))\n    return false;\n    \n  return true;    \n}\n\n// ttValidDate is used to check user input to validate a date.\nfunction ttValidDate($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return false;\n\n  // This should accept a string in format 'YYYY-MM-DD', 'MM/DD/YYYY', 'DD-MM-YYYY', 'DD.MM.YYYY', or 'DD.MM.YYYY whatever'.\n  if (!preg_match('/^\\d\\d\\d\\d-\\d\\d-\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\/\\d\\d\\/\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\-\\d\\d\\-\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d$/', $val) &&\n    !preg_match('/^\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d .+$/', $val))\n    return false;\n    \n  return true;    \n}\n\n// ttValidInteger is used to check user input to validate an integer.\nfunction ttValidInteger($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n    \n  if (!preg_match('/^[0-9]+$/', $val))\n    return false;\n\n  return true;\n}\n\n// ttValidCronSpec is used to check user input to validate cron specification.\nfunction ttValidCronSpec($val)\n{\n  // This code is adapted from http://stackoverflow.com/questions/235504/validating-crontab-entries-w-php\n  $numbers= array(\n     'min'=>'[0-5]?\\d',\n     'hour'=>'[01]?\\d|2[0-3]',\n     'day'=>'0?[1-9]|[12]\\d|3[01]',\n     'month'=>'[1-9]|1[012]',\n     'dow'=>'[0-7]'\n  );\n\n  foreach($numbers as $field=>$number) {\n    $range= \"($number)(-($number)(\\/\\d+)?)?\";\n    $field_re[$field]= \"\\*(\\/\\d+)?|$range(,$range)*\";\n  }\n\n  $field_re['month'].='|jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec';\n  $field_re['dow'].='|mon|tue|wed|thu|fri|sat|sun';\n\n  $fields_re= '('.join(')\\s+(', $field_re).')';\n\n  /*\n  $replacements= '@reboot|@yearly|@annually|@monthly|@weekly|@daily|@midnight|@hourly';\n\n  $regexp = '^\\s*('.\n                '$'.\n                '|#'.\n                '|\\w+\\s*='.\n                \"|$fields_re\\s+\\S\".\n                \"|($replacements)\\s+\\S\".\n            ')';\n   */\n  // The above block from the link did not work for me.\n\n  // But this works.\n  $regexp = '/^'.$fields_re.'$/';\n\t\n  if (!preg_match($regexp, $val))\n    return false;\n\n  return true;\n}\n\n// ttValidCondition is used to check user input to validate a notification condition.\nfunction ttValidCondition($val, $emptyValid = true)\n{\n  $val = trim($val);\n  if (strlen($val) == 0)\n    return ($emptyValid ? true : false);\n\n  // String must not be XSS evil (to insert JavaScript).\n  if (stristr($val, '<script>') || stristr($val, '<script '))\n    return false;\n\n  if (!preg_match(\"/^count\\s?(=|[<>]=?|<>)\\s?\\d+$/\", $val) &&\n      !preg_match(\"/^hours\\s?(=|[<>]=?|<>)\\s?\\d+$/\", $val))\n    return false;\n\n  return true;\n}\n\n// ttValidIP is used to check user input to validate a comma-separated\n// list of IP subnet \"prefixes\", for example 192.168.0 (note: no .* in the end).\n// We keep regexp checks here simple - they are not precise.\n// For example, IPv4-mapped IPv6 addresses will fail. This may need to be fixed.\nfunction ttValidIP($val, $emptyValid = false)\n{\n  $val = trim($val);\n  if (strlen($val) == 0 && $emptyValid)\n    return true;\n\n  $subnets = explode(',', $val);\n  foreach ($subnets as $subnet) {\n    $ipv4 = preg_match('/^\\d\\d?\\d?(\\.\\d\\d?\\d?){0,3}\\.?$/', $subnet); // Not precise check.\n    $ipv6 = preg_match('/^([0-9a-fA-F]{4})(:[0-9a-fA-F]{4}){0,7}$/', $subnet); // Not precise check.\n    if (!$ipv4 && !$ipv6)\n      return false;\n  }\n  return true;\n}\n\n// ttValidHolidays is used to check user input to validate holidays spec.\n// To keep things simple, the format is a comma-separated list of dates:\n// ****-01-01,****-12-31,2019-04-20\n// The above means Jan 1 and Dec 31 are holidays in all years, while Apr 20 is only in 2019.\nfunction ttValidHolidays($val)\n{\n  $val = trim($val);\n  if (strlen($val) == 0) return true;\n\n  $dates = explode(',', $val);\n  foreach ($dates as $date) {\n    if (!preg_match('/^[\\d*]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$/', $date))\n      return false;\n  }\n  return true;\n}\n\n// ttAccessAllowed checks whether user is allowed access to a particular page.\n// It is used as an initial check on all publicly available pages\n// (except login.php, register.php, and others where we don't have to check).\nfunction ttAccessAllowed($required_right)\n{\n  global $auth;\n  global $user;\n\n  // Redirect to login page if user is not authenticated.\n  if (!$auth->isAuthenticated()) {\n    header('Location: login.php');\n    exit();\n  }\n\n  // Protection against cross site request forgery.\n  if (!ttMitigateCSRF())\n    return false;\n\n  // Check IP restriction, if set.\n  if ($user->allow_ip && !$user->can('override_allow_ip')) {\n    $access_allowed = false;\n    $user_ip = $_SERVER['REMOTE_ADDR'];\n    $allowed_ip_array = explode(',', $user->allow_ip);\n    foreach ($allowed_ip_array as $allowed_ip) {\n      $len = strlen($allowed_ip);\n      if (substr($user_ip, 0, $len) === $allowed_ip) { // startsWith check.\n         $access_allowed = true;\n         break;\n      }\n    }\n    if (!$access_allowed) return false;\n  }\n\n  // Check if user has the right.\n  if (in_array($required_right, $user->rights)) {\n    import('ttUserHelper');\n    ttUserHelper::updateLastAccess();\n    return true;\n  }\n\n  return false;\n}\n\n// ttMitigateCSRF verifies request headers in an attempt to block cross site request forgery.\nfunction ttMitigateCSRF() {\n  // No need to do anything for get requests.\n  global $request;\n  if ($request->isGet())\n    return true;\n\n  $origin = $_SERVER['HTTP_ORIGIN'];\n  if ($origin) {\n    $pos = strpos($origin, '//');\n    $origin = substr($origin, $pos+2); // Strip protocol.\n  }\n  if (!$origin) {\n    // Try using referer.\n    $origin = $_SERVER['HTTP_REFERER'];\n    if ($origin) {\n      $pos = strpos($origin, '//');\n      $origin = substr($origin, $pos+2); // Strip protocol.\n      $pos = strpos($origin, '/');\n      $origin = substr($origin, 0, $pos); // Leave host only.\n    }\n  }\n  $target = defined('HTTP_TARGET') ? HTTP_TARGET : $_SERVER['HTTP_HOST'];\n  if (strcmp($origin, $target)) {\n    error_log(\"Potential cross site request forgery. Origin: '$origin' does not match target: '$target'.\");\n    return false; // Origin and target do not match.\n  }\n\n  return true;\n}\n\n\n// ttStartsWith functions checks if a string starts with a given substring.\nfunction ttStartsWith($string, $startString)\n{\n    $len = strlen($startString);\n    return (substr($string, 0, $len) === $startString);\n}\n\n// ttEndsWith functions checks if a string ends with a given substring.\nfunction ttEndsWith($string, $endString)\n{\n    $len = strlen($endString);\n    if ($len == 0) return true;\n    return (substr($string, -$len) === $endString);\n}\n\n// ttDateToUserFormat converts a date from database format to user format.\nfunction ttDateToUserFormat($date)\n{\n  global $user;\n  $o_date = new DateAndTime(DB_DATEFORMAT, $date);\n  return $o_date->toString($user->date_format);\n}\n\n// ttRandomString generates a random alphanumeric string.\nfunction ttRandomString($length = 32) {\n  $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  $charactersLength = strlen($characters);\n  $randomString = '';\n  for ($i = 0; $i < $length; $i++) {\n    $randomString .= $characters[rand(0, $charactersLength - 1)];\n  }\n  return $randomString;\n}\n\n// ttNeutralizeForCsv neutralizes user input for export to CSV files\n// by removing =, +, -, and @ characters from the beginning of cell values.\n// This mitigates a risk of CSV injection, see https://owasp.org/www-community/attacks/CSV_Injection\n// Additionally, it replaces each quote character with a double quote.\nfunction ttNeutralizeForCsv($val) {\n  $result = ltrim($val, '=+-@');\n  return str_replace('\"', '\"\"', $result);\n}\n", "<?php\n/* Copyright (c) Anuko International Ltd. https://www.anuko.com\nLicense: See license.txt */\n\n// Report all errors except E_NOTICE and E_STRICT.\n// Ignoring E_STRICT is here because PEAR 1.9.4 that we use is not E_STRICT compliant.\nif (!defined('E_STRICT')) define('E_STRICT', 2048);\n// if (!defined('E_DEPRECATED')) define('E_DEPRECATED', 8192);\nerror_reporting(E_ALL & ~E_NOTICE & ~E_STRICT); // & ~E_DEPRECATED);\n// E_ALL tends to change as PHP evolves, therefore we use & here instead of exclusive OR (^).\n\n// Disable displaying errors on screen.\nini_set('display_errors', 'Off');\n\n// require_once('init_auth.php');\ndefine(\"APP_VERSION\", \"1.19.27.5432\");\ndefine(\"APP_DIR\", dirname(__FILE__));\ndefine(\"LIBRARY_DIR\", APP_DIR.\"/WEB-INF/lib\");\ndefine(\"TEMPLATE_DIR\", APP_DIR.\"/WEB-INF/templates\");\n// Date format for database and URI parameters.\ndefine('DB_DATEFORMAT', '%Y-%m-%d');\ndefine('MAX_RANK', 512); // Max user rank.\n\nrequire_once(LIBRARY_DIR.'/common.lib.php');\n\n// Require the configuration file with application settings.\nif (!file_exists(APP_DIR.\"/WEB-INF/config.php\")) die (\"WEB-INF/config.php file does not exist.\");\nrequire_once(\"WEB-INF/config.php\");\n// Check whether DSN is defined.\nif (!defined(\"DSN\")) {\n  die (\"DSN value is not defined. Check your config.php file.\");\n}\n\n// Depending on DSN, require either mysqli or mysql extensions.\nif (strrpos(DSN, 'mysqli://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysqli'); // DSN starts with mysqli:// - require mysqli extension.\n}\nif (strrpos(DSN, 'mysql://', -strlen(DSN)) !== FALSE) {\n  check_extension('mysql');  // DSN starts with mysql:// - require mysql extension.\n}\n\n// Require other extensions.\ncheck_extension('mbstring');\n\n// If auth params are not defined (in config.php) - initialize with an empty array.\nif (!isset($GLOBALS['AUTH_MODULE_PARAMS']) || !is_array($GLOBALS['AUTH_MODULE_PARAMS']))\n  $GLOBALS['AUTH_MODULE_PARAMS'] = array();\n\n// Smarty initialization.\nimport('smarty.Smarty');\n$smarty = new Smarty;\n$smarty->use_sub_dirs = false;\n$smarty->template_dir = TEMPLATE_DIR;\n$smarty->compile_dir  = TEMPLATE_DIR.'_c';\n\n// Note: these 3 settings below used to be in .htaccess file. Moved them here to eliminate \"error 500\" problems\n// with some shared hostings that do not have AllowOverride Options or AllowOverride All in their apache configurations.\n// Change http cache expiration time to 1 minute.\nsession_cache_expire(1);\n\n$phpsessid_ttl = defined('PHPSESSID_TTL') ? PHPSESSID_TTL : 60*60*24;\n// Set lifetime for garbage collection.\nini_set('session.gc_maxlifetime', $phpsessid_ttl);\n// Set PHP session path, if defined to avoid garbage collection interference from other scripts.\nif (defined('PHP_SESSION_PATH') && realpath(PHP_SESSION_PATH)) {\n  ini_set('session.save_path', realpath(PHP_SESSION_PATH));\n  ini_set('session.gc_probability', 1);\n}\n\n// \"tt_\" prefix is to avoid sharing session with other PHP apps that do not name session.\nif (!defined('SESSION_COOKIE_NAME')) define('SESSION_COOKIE_NAME', 'tt_PHPSESSID');\nif (!defined('LOGIN_COOKIE_NAME')) define('LOGIN_COOKIE_NAME', 'tt_login');\n\n// Set session cookie lifetime.\nsession_set_cookie_params($phpsessid_ttl);\nif (isset($_COOKIE[SESSION_COOKIE_NAME])) {\n  // Extend PHP session cookie lifetime by PHPSESSID_TTL (if defined, otherwise 24 hours) \n  // so that users don't have to re-login during this period from now. \n  setcookie(SESSION_COOKIE_NAME, $_COOKIE[SESSION_COOKIE_NAME],  time() + $phpsessid_ttl, '/');\n}\n\n// Start or resume PHP session.\nsession_name(SESSION_COOKIE_NAME);\n@session_start();\n\n// Authorization.\nimport('Auth');\n$auth = Auth::factory(AUTH_MODULE, $GLOBALS['AUTH_MODULE_PARAMS']);\n\n// Some defines we'll need.\n//\ndefine('RESOURCE_DIR', APP_DIR.'/WEB-INF/resources');\ndefine('COOKIE_EXPIRE', 60*60*24*30); // Cookies expire in 30 days.\n\n// Status values for projects, users, etc.\ndefine('ACTIVE', 1);\ndefine('INACTIVE', 0);\n// define('DELETED', -1); // DELETED items should have a NULL status. This allows us to have duplicate NULL status entries with existing indexes.\n\n// Definitions for tracking mode types.\ndefine('MODE_TIME', 0); // Tracking time only. There are no projects or tasks.\ndefine('MODE_PROJECTS', 1); // Tracking time per projects. There are no tasks.\ndefine('MODE_PROJECTS_AND_TASKS', 2); // Tracking time for projects and tasks.\n\n// Definitions of types for time records.\ndefine('TYPE_ALL', 0); // Time record can be specified with either duration or start and finish times.\ndefine('TYPE_START_FINISH', 1); // Time record has start and finish times.\ndefine('TYPE_DURATION', 2); // Time record has only duration, no start and finish times.\n\ndefine('CHARSET', 'utf-8');\n\ndate_default_timezone_set(@date_default_timezone_get());\n\n// Initialize global objects that are needed for the application.\nimport('html.HttpRequest');\n$request = new ttHttpRequest();\n\nimport('form.ActionErrors');\n$err = new ActionErrors(); // Error messages for user.\n$msg = new ActionErrors(); // Notification messages (not errrors) for user.\n\n// Create an instance of ttUser class. This gets us most of user details.\nimport('ttUser');\n$user = new ttUser(null, $auth->getUserId());\nif ($user->custom_logo) {\n  $smarty->assign('custom_logo', 'img/'.$user->group_id.'.png');\n  $smarty->assign('mobile_custom_logo', '../img/'.$user->group_id.'.png');\n}\n$smarty->assign('user', $user);\n\n// Localization.\nimport('I18n');\n$i18n = new I18n();\n\n// Determine the language to use.\n$lang = $user->lang;\nif (!$lang) {\n  if (defined('LANG_DEFAULT'))\n    $lang = LANG_DEFAULT;\n\n  // If we still do not have the language get it from the browser.\n  if (!$lang) {\n    $lang = $i18n->getBrowserLanguage();\n\n    // Finally - English is the default.\n    if (!$lang) {\n      $lang = 'en';\n    }\n  }\n}\n\n// Load i18n file.\n$i18n->load($lang);\n\n// Assign things for smarty to use in template files.\n$smarty->assign('i18n', $i18n->keys);\n$smarty->assign('err', $err);\n$smarty->assign('msg', $msg);\n\n// TODO: move this code out of here to the files that use it.\n\n// We use js/strftime.js to print dates in JavaScript (in DateField controls).\n// One of our date formats (%d.%m.%Y %a) prints a localized short weekday name (%a).\n// The init_js_date_locale function iniitializes Date.ext.locales array in js/strftime.js for our language\n// so that we could print localized short weekday names.\n//\n// JavaScript usage (see http://hacks.bluesmoon.info/strftime/localisation.html).\n//\n// var d = new Date();\n// d.locale = \"fr\";           // Remember to initialize locale.\n// d.strftime(\"%d.%m.%Y %a\"); // This will output a localized %a as in \"31.05.2013 Ven\"\n\n// Initialize date locale for JavaScript.\ninit_js_date_locale();\n\nfunction init_js_date_locale()\n{\n  global $i18n, $smarty;\n  $lang = $i18n->lang;\n\n  $days = $i18n->weekdayNames;\n  $short_day_names = array();\n  foreach($days as $k => $v) {\n    $short_day_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n\n  /*\n  $months = $i18n->monthNames;\n  $short_month_names = array();\n  foreach ($months as $k => $v) {\n    $short_month_names[$k] = mb_substr($v, 0, 3, 'utf-8');\n  }\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      A: ['\" . join(\"', '\", $days) . \"'],\n      b: ['\" . join(\"', '\", $short_month_names) . \"'],\n      B: ['\" . join(\"', '\", $months) . \"'],\n      c: '%a %d %b %Y %T %Z',\n      p: ['', ''],\n      P: ['', ''],\n      x: '%Y-%m-%d',\n      X: '%T'\n    };\"; */\n  // We use %a in one of date formats. Therefore, simplified code here (instead of the above block).\n  // %p is also used on the Profile page in 12-hour time format example. Note that %p is not localized.\n  $js = \"Date.ext.locales['$lang'] = {\n      a: ['\" . join(\"', '\", $short_day_names) . \"'],\n      p: ['AM', 'PM']\n    };\";\n  $smarty->assign('js_date_locale', $js);\n}\n"], "filenames": ["WEB-INF/config.php.dist", "WEB-INF/lib/common.lib.php", "initialize.php"], "buggy_code_start_loc": [168, 417, 16], "buggy_code_end_loc": [169, 426, 17], "fixing_code_start_loc": [168, 416, 16], "fixing_code_end_loc": [169, 423, 17], "type": "CWE-352", "message": "Anuko Time Tracker is an open source, web-based time tracking application written in PHP. In Time Tracker before version 1.19.27.5431 a Cross site request forgery (CSRF) vulnerability existed. The nature of CSRF is that a logged on user may be tricked by social engineering to click on an attacker-provided form that executes an unintended action such as changing user password. The vulnerability is fixed in Time Tracker version 1.19.27.5431. Upgrade is recommended. If upgrade is not practical, introduce ttMitigateCSRF() function in /WEB-INF/lib/common.php.lib using the latest available code and call it from ttAccessAllowed().", "other": {"cve": {"id": "CVE-2021-29436", "sourceIdentifier": "security-advisories@github.com", "published": "2021-04-13T20:15:22.000", "lastModified": "2021-04-26T18:27:28.597", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Anuko Time Tracker is an open source, web-based time tracking application written in PHP. In Time Tracker before version 1.19.27.5431 a Cross site request forgery (CSRF) vulnerability existed. The nature of CSRF is that a logged on user may be tricked by social engineering to click on an attacker-provided form that executes an unintended action such as changing user password. The vulnerability is fixed in Time Tracker version 1.19.27.5431. Upgrade is recommended. If upgrade is not practical, introduce ttMitigateCSRF() function in /WEB-INF/lib/common.php.lib using the latest available code and call it from ttAccessAllowed()."}, {"lang": "es", "value": "Anuko Time Tracker es una aplicaci\u00f3n de seguimiento del tiempo de c\u00f3digo abierto basada en web escrita en PHP.&#xa0;En Time Tracker versiones anteriores a 1.19.27.5431, se presentaba una vulnerabilidad de tipo Cross site request forgery (CSRF).&#xa0;La naturaleza de CSRF es que un usuario que ha iniciado sesi\u00f3n puede ser enga\u00f1ado por ingenier\u00eda social para que haga clic en un formulario proporcionado por un atacante que ejecuta una acci\u00f3n no prevista, tal y como cambiar la contrase\u00f1a del usuario.&#xa0;La vulnerabilidad se corrigi\u00f3 en la versi\u00f3n 1.19.27.5431 de Time Tracker.&#xa0;Una actualizaci\u00f3n es recomendada.&#xa0;Si la actualizaci\u00f3n no es pr\u00e1ctica, introduzca la funci\u00f3n ttMitigateCSRF() en la biblioteca /WEB-INF/lib/common.php.lib usando el \u00faltimo c\u00f3digo disponible y ll\u00e1melo desde la funci\u00f3n ttAccessAllowed()"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:anuko:time_tracker:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.19.27.5431", "matchCriteriaId": "8AA337D3-0BE0-449A-9E94-A08AD1153B35"}]}]}], "references": [{"url": "https://github.com/anuko/timetracker/commit/e3f8222ee308322942bcebcd86b78ecf19382563", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/anuko/timetracker/commit/e77be7eea69df5d52e19f9f25b5b89a0e66a5b8e", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/anuko/timetracker/security/advisories/GHSA-pgpx-rfvj-9g4f", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/anuko/timetracker/commit/e3f8222ee308322942bcebcd86b78ecf19382563"}}